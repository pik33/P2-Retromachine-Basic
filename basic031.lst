00000                 | 
00000                 | #line 1 "D:/programowanie/P2-Retromachine-Basic/basic031.p2asm"
00000                 | con
00000                 | 	_clkfreq = 340500000
00000                 | 	_clkmode = 27175163
00000                 | 	HEAPSIZE = 192000
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	ver = 31
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getaddr = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_channel = 44
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_csave = 80
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_defsnd = 115
00000                 | 	token_defenv = 116
00000                 | 	token_play = 117
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_position = 129
00000                 | 	token_cos = 130
00000                 | 	token_tan = 131
00000                 | 	token_asin = 132
00000                 | 	token_acos = 133
00000                 | 	token_atn = 134
00000                 | 	token_sqr = 135
00000                 | 	token_rad = 136
00000                 | 	token_deg = 137
00000                 | 	token_int = 138
00000                 | 	token_setvol = 139
00000                 | 	token_setpan = 140
00000                 | 	token_setlen = 141
00000                 | 	token_setdelay = 142
00000                 | 	token_setwave = 143
00000                 | 	token_setenv = 144
00000                 | 	token_setsustain = 145
00000                 | 	token_release = 146
00000                 | 	token_getenvsustain = 147
00000                 | 	token_getnotevalue = 148
00000                 | 	token_poke = 149
00000                 | 	token_dpoke = 150
00000                 | 	token_lpoke = 151
00000                 | 	token_peek = 152
00000                 | 	token_dpeek = 153
00000                 | 	token_lpeek = 154
00000                 | 	token_adr = 155
00000                 | 	token_fre = 156
00000                 | 	token_inkey = 157
00000                 | 	token_abs = 158
00000                 | 	token_chr = 159
00000                 | 	token_val = 160
00000                 | 	token_str = 161
00000                 | 	token_bin = 162
00000                 | 	token_hex = 163
00000                 | 	token_left = 164
00000                 | 	token_right = 165
00000                 | 	token_mid = 166
00000                 | 	token_asc = 167
00000                 | 	token_len = 168
00000                 | 	token_gosub = 169
00000                 | 	token_return = 170
00000                 | 	token_progend = 171
00000                 | 	token_pop = 172
00000                 | 	token_log = 173
00000                 | 	token_changefreq = 174
00000                 | 	token_changevol = 175
00000                 | 	token_changewave = 176
00000                 | 	token_changepan = 177
00000                 | 	token_shutup = 178
00000                 | 	token_open = 179
00000                 | 	token_close = 180
00000                 | 	token_input = 181
00000                 | 	token_read = 182
00000                 | 	token_data = 183
00000                 | 	token_cload = 184
00000                 | 	token_blit = 185
00000                 | 	token_playsample = 186
00000                 | 	token_get = 187
00000                 | 	token_put = 188
00000                 | 	token_enter = 189
00000                 | 	token_rem = 190
00000                 | 	token_round = 191
00000                 | 	token_coginit = 192
00000                 | 	token_on = 193
00000                 | 	token_delete = 194
00000                 | 	token_cd = 195
00000                 | 	token_copy = 196
00000                 | 	token_framebuf = 197
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	token_notename = 768
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	result_channel = 44
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1024
00000                 | 	maxstack = 512
00000                 | 	maxfor = 64
00000                 | 	maxgosub = 64
00000                 | 	memlo = 524288
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 340500000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $19ea8fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 54 CF 80 FF 
00420 007 00 F0 65 FD | 	hubset	##27175160
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a 54 CF 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##27175163
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e CF 25 8A FF 
00440 00f 14 40 6C FC | 	wrlong	##340500000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 BC D7 A1 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 1F 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 1F 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 3F 7F 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 3E 7D 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 3F 7D 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 7E 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 7C 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 3E 7D 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 3F 7F 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec 5C B8 03 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed 94 B5 03 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 64 A6 06 00 | 	long	@objmem
007d0 0f3             | ptr___system__dat__
007d0 0f3 74 A8 03 00 | 	long	@__system__dat_
007d4 0f4             | ptr__audio096_spin2_dat__
007d4 0f4 CC A3 03 00 | 	long	@_audio096_spin2_dat_
007d8 0f5             | ptr__dat__
007d8 0f5 CC 10 03 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 B4 AF 03 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 40 42 03 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 60 14 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 F0 69 03 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa A8 67 03 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb 80 79 03 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc 88 4A 07 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' '-------------------------------------------------------------------------------------------------------- 
00804                 | ' '------------------------------------ MAIN LOOP END -----------------------------------------------------
00804                 | ' '--------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' '                     A full screen editor for programming and entering data
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' function edit() as string
00804                 | _edit
00804     1C 4A 05 F6 | 	mov	COUNT_, #28
00808     A8 00 A0 FD | 	call	#pushregs_
0080c     00 1E 06 F6 | 	mov	local01, #0
00810     00 20 06 F6 | 	mov	local02, #0
00814     00 22 06 F6 | 	mov	local03, #0
00818     00 24 06 F6 | 	mov	local04, #0
0081c                 | ' rpt=0 : rptcnt=0 : key=0 : key2=0 : key3=0 : key4=0 
0081c                 | ' do
0081c                 | LR__0001
0081c     01 12 06 F6 | 	mov	arg01, #1
00820     F4 E7 B1 FD | 	call	#_hg010b_spin2_waitvbl
00824     28 F9 B1 FD | 	call	#_usbnew_spin2_get_key
00828     FD 26 02 F6 | 	mov	local05, result1
0082c                 | '   return hkbd_led_rep
0082c     13 00 00 FF 
00830     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
00834     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
00838     13 00 00 FF 
0083c     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
00840     51 00 00 FF 
00844     E0 E5 05 F1 | 	add	objptr, ##41952
00848     F2 FA 61 FC | 	wrlong	result1, objptr
0084c     51 00 00 FF 
00850     E0 E5 85 F1 | 	sub	objptr, ##41952
00854                 | ' if key>0 andalso key<4 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(10): paula.stop(7)
00854     01 26 16 F2 | 	cmp	local05, #1 wc
00858     A4 00 90 CD |  if_b	jmp	#LR__0002
0085c     04 26 16 F2 | 	cmp	local05, #4 wc
00860     9C 00 90 3D |  if_ae	jmp	#LR__0002
00864     50 00 00 FF 
00868     14 E5 05 F1 | 	add	objptr, ##41236
0086c     F2 28 02 FB | 	rdlong	local06, objptr
00870     50 00 00 FF 
00874     14 E5 85 F1 | 	sub	objptr, ##41236
00878     01 28 0E F2 | 	cmp	local06, #1 wz
0087c     80 00 90 5D |  if_ne	jmp	#LR__0002
00880     04 00 00 FF 
00884     A8 EA 05 F1 | 	add	ptr__dat__, ##2216
00888     56 00 00 FF 
0088c     44 2A 06 F6 | 	mov	local07, ##44100
00890     0C 2C C6 F9 | 	decod	local08, #12
00894     00 2E 06 F6 | 	mov	local09, #0
00898     03 00 00 FF 
0089c     DE 30 06 F6 | 	mov	local10, ##1758
008a0     07 12 06 F6 | 	mov	arg01, #7
008a4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
008a8     56 00 00 FF 
008ac     44 16 06 F6 | 	mov	arg03, ##44100
008b0     0C 18 C6 F9 | 	decod	arg04, #12
008b4     00 1A 06 F6 | 	mov	arg05, #0
008b8     03 00 00 FF 
008bc     DE 1C 06 F6 | 	mov	arg06, ##1758
008c0     0B 00 00 FF 
008c4     CC E4 05 F1 | 	add	objptr, ##5836
008c8     04 00 00 FF 
008cc     A8 EA 85 F1 | 	sub	ptr__dat__, ##2216
008d0     20 FC B1 FD | 	call	#_audio096_spin2_play
008d4     0B 00 00 FF 
008d8     CC E4 85 F1 | 	sub	objptr, ##5836
008dc     0A 12 06 F6 | 	mov	arg01, #10
008e0     74 03 B2 FD | 	call	#__system___waitms
008e4     07 28 06 F6 | 	mov	local06, #7
008e8     07 12 06 F6 | 	mov	arg01, #7
008ec     0B 00 00 FF 
008f0     CC E4 05 F1 | 	add	objptr, ##5836
008f4     6C FD B1 FD | 	call	#_audio096_spin2_stop
008f8     0B 00 00 FF 
008fc     CC E4 85 F1 | 	sub	objptr, ##5836
00900                 | LR__0002
00900                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then key2=key : rpt=1 : key3=key2 
00900     04 26 16 F2 | 	cmp	local05, #4 wc
00904     20 00 90 CD |  if_b	jmp	#LR__0003
00908     00 00 40 FF 
0090c     00 26 16 F2 | 	cmp	local05, ##-2147483648 wc
00910     13 29 02 C6 |  if_b	mov	local06, local05
00914     14 29 E2 C8 |  if_b	getbyte	local06, local06, #0
00918     E0 28 16 C2 |  if_b	cmp	local06, #224 wc
0091c     13 23 02 C6 |  if_b	mov	local03, local05
00920     01 1E 06 C6 |  if_b	mov	local01, #1
00924     11 25 02 C6 |  if_b	mov	local04, local03
00928                 | LR__0003
00928                 | ' if key>$80000000 then rptcnt=0 : rpt=0
00928     00 00 40 FF 
0092c     01 26 16 F2 | 	cmp	local05, ##-2147483647 wc
00930     00 20 06 36 |  if_ae	mov	local02, #0
00934     00 1E 06 36 |  if_ae	mov	local01, #0
00938                 | ' if key=0 andalso rpt=1 then rptcnt+=1
00938     00 26 0E F2 | 	cmp	local05, #0 wz
0093c     01 1E 0E A2 |  if_e	cmp	local01, #1 wz
00940     01 20 06 A1 |  if_e	add	local02, #1
00944                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
00944     00 00 40 FF 
00948     00 26 16 F2 | 	cmp	local05, ##-2147483648 wc
0094c     19 20 0E C2 |  if_b	cmp	local02, #25 wz
00950     11 25 02 86 |  if_c_and_z	mov	local04, local03
00954     15 20 06 86 |  if_c_and_z	mov	local02, #21
00958                 | ' 
00958                 | ' '' there is a key pressed and it needs to be processed
00958                 | ' 
00958                 | ' if key3<>0 then
00958     00 24 0E F2 | 	cmp	local04, #0 wz
0095c     BC FE 9F AD |  if_e	jmp	#LR__0001
00960                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len)     	' make a click
00960     50 00 00 FF 
00964     14 E5 05 F1 | 	add	objptr, ##41236
00968     F2 28 02 FB | 	rdlong	local06, objptr
0096c     50 00 00 FF 
00970     14 E5 85 F1 | 	sub	objptr, ##41236
00974     01 28 0E F2 | 	cmp	local06, #1 wz
00978     50 00 90 5D |  if_ne	jmp	#LR__0004
0097c     51 00 00 FF 
00980     B8 E5 05 F1 | 	add	objptr, ##41912
00984     F2 14 02 FB | 	rdlong	arg02, objptr
00988     56 00 00 FF 
0098c     44 2A 06 F6 | 	mov	local07, ##44100
00990     0C 2C C6 F9 | 	decod	local08, #12
00994     04 E4 85 F1 | 	sub	objptr, #4
00998     F2 2E 02 FB | 	rdlong	local09, objptr
0099c     01 30 66 F6 | 	neg	local10, #1
009a0     07 12 06 F6 | 	mov	arg01, #7
009a4     56 00 00 FF 
009a8     44 16 06 F6 | 	mov	arg03, ##44100
009ac     0C 18 C6 F9 | 	decod	arg04, #12
009b0     17 1B 02 F6 | 	mov	arg05, local09
009b4     01 1C 66 F6 | 	neg	arg06, #1
009b8     46 00 00 FF 
009bc     E8 E4 85 F1 | 	sub	objptr, ##36072
009c0     30 FB B1 FD | 	call	#_audio096_spin2_play
009c4     0B 00 00 FF 
009c8     CC E4 85 F1 | 	sub	objptr, ##5836
009cc                 | LR__0004
009cc     12 13 02 F6 | 	mov	arg01, local04
009d0     44 CD B1 FD | 	call	#_scantochar
009d4     FD 32 02 F6 | 	mov	local11, result1
009d8                 | '   if leds and 2 = 2 then 						' caps lock
009d8     51 00 00 FF 
009dc     E0 E5 05 F1 | 	add	objptr, ##41952
009e0     F2 34 02 FB | 	rdlong	local12, objptr
009e4     51 00 00 FF 
009e8     E0 E5 85 F1 | 	sub	objptr, ##41952
009ec     1A 29 0A F6 | 	mov	local06, local12 wz
009f0     4C 00 90 AD |  if_e	jmp	#LR__0012
009f4                 | '     if key4>96 andalso key4<123 then                 
009f4     61 32 16 F2 | 	cmp	local11, #97 wc
009f8     0C 00 90 CD |  if_b	jmp	#LR__0005
009fc     7B 32 16 F2 | 	cmp	local11, #123 wc
00a00     20 32 86 C1 |  if_b	sub	local11, #32
00a04     38 00 90 CD |  if_b	jmp	#LR__0011
00a08                 | LR__0005
00a08     41 32 16 F2 | 	cmp	local11, #65 wc
00a0c     0C 00 90 CD |  if_b	jmp	#LR__0006
00a10     5B 32 16 F2 | 	cmp	local11, #91 wc
00a14     20 32 06 C1 |  if_b	add	local11, #32
00a18     24 00 90 CD |  if_b	jmp	#LR__0010
00a1c                 | LR__0006
00a1c     17 32 16 F2 | 	cmp	local11, #23 wc
00a20     0C 00 90 CD |  if_b	jmp	#LR__0007
00a24     20 32 16 F2 | 	cmp	local11, #32 wc
00a28     09 32 86 C1 |  if_b	sub	local11, #9
00a2c     10 00 90 CD |  if_b	jmp	#LR__0009
00a30                 | LR__0007
00a30     0E 32 16 F2 | 	cmp	local11, #14 wc
00a34     08 00 90 CD |  if_b	jmp	#LR__0008
00a38     17 32 16 F2 | 	cmp	local11, #23 wc
00a3c     27 32 06 C1 |  if_b	add	local11, #39
00a40                 | LR__0008
00a40                 | LR__0009
00a40                 | LR__0010
00a40                 | LR__0011
00a40                 | LR__0012
00a40                 | '  
00a40                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then		' put the char on the screen 
00a40     01 32 16 F2 | 	cmp	local11, #1 wc
00a44     BC 01 90 CD |  if_b	jmp	#LR__0017
00a48     7F 32 16 F2 | 	cmp	local11, #127 wc
00a4c     3C E4 05 C1 |  if_b	add	objptr, #60
00a50     F2 28 E2 CA |  if_b	rdword	local06, objptr
00a54     3C E4 85 C1 |  if_b	sub	objptr, #60
00a58     FE 28 16 C2 |  if_b	cmp	local06, #254 wc
00a5c     A4 01 90 3D |  if_ae	jmp	#LR__0017
00a60                 | '     if do_insert then							' move the characters right
00a60     51 00 00 FF 
00a64     DC E5 05 F1 | 	add	objptr, ##41948
00a68     F2 28 0A FB | 	rdlong	local06, objptr wz
00a6c     51 00 00 FF 
00a70     DC E5 85 F1 | 	sub	objptr, ##41948
00a74     84 01 90 AD |  if_e	jmp	#LR__0016
00a78                 | '       for i=  v.textbuf_ptr+128*v.cursor_y+127 to v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2)+1 step -1 : pspoke i,pspeek(i-1) : next i 
00a78     3E E4 05 F1 | 	add	objptr, #62
00a7c     F2 2A C2 FA | 	rdbyte	local07, objptr
00a80     15 2D E2 F8 | 	getbyte	local08, local07, #0
00a84     80 2C 06 FA | 	mul	local08, #128
00a88     3A E4 85 F1 | 	sub	objptr, #58
00a8c     F2 36 02 FB | 	rdlong	local13, objptr
00a90     1B 39 02 F6 | 	mov	local14, local13
00a94     16 39 02 F1 | 	add	local14, local08
00a98     7F 38 06 F1 | 	add	local14, #127
00a9c     15 2B E2 F8 | 	getbyte	local07, local07, #0
00aa0     80 2A 06 FA | 	mul	local07, #128
00aa4     15 37 02 F1 | 	add	local13, local07
00aa8     38 E4 05 F1 | 	add	objptr, #56
00aac     F2 2E E2 FA | 	rdword	local09, objptr
00ab0     3C E4 85 F1 | 	sub	objptr, #60
00ab4     17 3B 52 F6 | 	abs	local15, local09 wc
00ab8     01 3A 46 F0 | 	shr	local15, #1
00abc     1D 37 82 F3 | 	sumc	local13, local15
00ac0     01 36 06 F1 | 	add	local13, #1
00ac4                 | LR__0013
00ac4     1C 3D 02 F6 | 	mov	local16, local14
00ac8     01 3C 86 F1 | 	sub	local16, #1
00acc     1E 13 02 F6 | 	mov	arg01, local16
00ad0     3C CB B1 FD | 	call	#_pspeek
00ad4     FD 3E 02 F6 | 	mov	local17, result1
00ad8     1F 41 E2 F8 | 	getbyte	local18, local17, #0
00adc     20 43 02 F6 | 	mov	local19, local18
00ae0     1C 13 02 F6 | 	mov	arg01, local14
00ae4     21 15 02 F6 | 	mov	arg02, local19
00ae8     DC CA B1 FD | 	call	#_pspoke
00aec     01 38 86 F1 | 	sub	local14, #1
00af0     1B 39 52 F2 | 	cmps	local14, local13 wc
00af4     CC FF 9F 3D |  if_ae	jmp	#LR__0013
00af8     51 00 00 FF 
00afc     E8 E5 05 F1 | 	add	objptr, ##41960
00b00     F2 00 68 FC | 	wrlong	#0, objptr
00b04     51 00 00 FF 
00b08     AA E5 85 F1 | 	sub	objptr, ##41898
00b0c     F2 2A C2 FA | 	rdbyte	local07, objptr
00b10     15 2D E2 F8 | 	getbyte	local08, local07, #0
00b14     80 2C 06 FA | 	mul	local08, #128
00b18     3A E4 85 F1 | 	sub	objptr, #58
00b1c     F2 2E 02 FB | 	rdlong	local09, objptr
00b20     17 39 02 F6 | 	mov	local14, local09
00b24     16 39 02 F1 | 	add	local14, local08
00b28     38 E4 05 F1 | 	add	objptr, #56
00b2c     F2 3A E2 FA | 	rdword	local15, objptr
00b30     1D 31 32 F9 | 	getword	local10, local15, #0
00b34     18 45 52 F6 | 	abs	local20, local10 wc
00b38     01 44 46 F0 | 	shr	local20, #1
00b3c     22 45 82 F6 | 	negc	local20, local20
00b40     22 39 02 F1 | 	add	local14, local20
00b44     15 2B E2 F8 | 	getbyte	local07, local07, #0
00b48     80 2A 06 FA | 	mul	local07, #128
00b4c     17 2D 02 F6 | 	mov	local08, local09
00b50     3C E4 85 F1 | 	sub	objptr, #60
00b54     16 47 02 F6 | 	mov	local21, local08
00b58     15 47 02 F1 | 	add	local21, local07
00b5c     80 46 06 F1 | 	add	local21, #128
00b60                 | LR__0014
00b60     23 39 52 F2 | 	cmps	local14, local21 wc
00b64     94 00 90 3D |  if_ae	jmp	#LR__0015
00b68     3C E4 05 F1 | 	add	objptr, #60
00b6c     F2 28 E2 FA | 	rdword	local06, objptr
00b70     51 00 00 FF 
00b74     AC E5 05 F1 | 	add	objptr, ##41900
00b78     F2 2C 02 FB | 	rdlong	local08, objptr
00b7c     01 2C 66 F0 | 	shl	local08, #1
00b80     16 29 02 F1 | 	add	local06, local08
00b84     51 00 00 FF 
00b88     AA E5 85 F1 | 	sub	objptr, ##41898
00b8c     F2 34 C2 FA | 	rdbyte	local12, objptr
00b90     3E E4 85 F1 | 	sub	objptr, #62
00b94     10 34 06 FA | 	mul	local12, #16
00b98     04 34 06 F1 | 	add	local12, #4
00b9c     1C 13 02 F6 | 	mov	arg01, local14
00ba0     6C CA B1 FD | 	call	#_pspeek
00ba4     FD 2A E2 F8 | 	getbyte	local07, result1, #0
00ba8     41 E4 05 F1 | 	add	objptr, #65
00bac     F2 2C 02 FB | 	rdlong	local08, objptr
00bb0     04 E4 05 F1 | 	add	objptr, #4
00bb4     F2 30 02 FB | 	rdlong	local10, objptr
00bb8     45 E4 85 F1 | 	sub	objptr, #69
00bbc     18 2F 02 F6 | 	mov	local09, local10
00bc0     14 13 02 F6 | 	mov	arg01, local06
00bc4     1A 15 02 F6 | 	mov	arg02, local12
00bc8     15 17 02 F6 | 	mov	arg03, local07
00bcc     16 19 02 F6 | 	mov	arg04, local08
00bd0     17 1B 02 F6 | 	mov	arg05, local09
00bd4     3C E2 B1 FD | 	call	#_hg010b_spin2_putcharxycgf
00bd8     51 00 00 FF 
00bdc     E8 E5 05 F1 | 	add	objptr, ##41960
00be0     F2 28 02 FB | 	rdlong	local06, objptr
00be4     01 28 06 F1 | 	add	local06, #1
00be8     F2 28 62 FC | 	wrlong	local06, objptr
00bec     51 00 00 FF 
00bf0     E8 E5 85 F1 | 	sub	objptr, ##41960
00bf4     01 38 06 F1 | 	add	local14, #1
00bf8     64 FF 9F FD | 	jmp	#LR__0014
00bfc                 | LR__0015
00bfc                 | LR__0016
00bfc     19 13 02 F6 | 	mov	arg01, local11
00c00     58 E5 B1 FD | 	call	#_hg010b_spin2_putchar
00c04                 | LR__0017
00c04                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(300): paula.stop(7) 'end of line reached
00c04     01 32 16 F2 | 	cmp	local11, #1 wc
00c08     B4 00 90 CD |  if_b	jmp	#LR__0018
00c0c     7F 32 16 F2 | 	cmp	local11, #127 wc
00c10     AC 00 90 3D |  if_ae	jmp	#LR__0018
00c14     3C E4 05 F1 | 	add	objptr, #60
00c18     F2 28 E2 FA | 	rdword	local06, objptr
00c1c     3C E4 85 F1 | 	sub	objptr, #60
00c20     FE 28 0E F2 | 	cmp	local06, #254 wz
00c24     50 00 00 AF 
00c28     14 E5 05 A1 |  if_e	add	objptr, ##41236
00c2c     F2 2C 02 AB |  if_e	rdlong	local08, objptr
00c30     50 00 00 AF 
00c34     14 E5 85 A1 |  if_e	sub	objptr, ##41236
00c38     16 2B 02 A6 |  if_e	mov	local07, local08
00c3c     01 2A 0E A2 |  if_e	cmp	local07, #1 wz
00c40     7C 00 90 5D |  if_ne	jmp	#LR__0018
00c44     04 00 00 FF 
00c48     A8 EA 05 F1 | 	add	ptr__dat__, ##2216
00c4c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00c50     04 00 00 FF 
00c54     A8 EA 85 F1 | 	sub	ptr__dat__, ##2216
00c58     56 00 00 FF 
00c5c     44 2A 06 F6 | 	mov	local07, ##44100
00c60     0C 2C C6 F9 | 	decod	local08, #12
00c64     00 2E 06 F6 | 	mov	local09, #0
00c68     03 00 00 FF 
00c6c     DE 30 06 F6 | 	mov	local10, ##1758
00c70     07 12 06 F6 | 	mov	arg01, #7
00c74     56 00 00 FF 
00c78     44 16 06 F6 | 	mov	arg03, ##44100
00c7c     0C 18 C6 F9 | 	decod	arg04, #12
00c80     00 1A 06 F6 | 	mov	arg05, #0
00c84     03 00 00 FF 
00c88     DE 1C 06 F6 | 	mov	arg06, ##1758
00c8c     0B 00 00 FF 
00c90     CC E4 05 F1 | 	add	objptr, ##5836
00c94     5C F8 B1 FD | 	call	#_audio096_spin2_play
00c98     0B 00 00 FF 
00c9c     CC E4 85 F1 | 	sub	objptr, ##5836
00ca0     2C 13 06 F6 | 	mov	arg01, #300
00ca4     B0 FF B1 FD | 	call	#__system___waitms
00ca8     07 12 06 F6 | 	mov	arg01, #7
00cac     0B 00 00 FF 
00cb0     CC E4 05 F1 | 	add	objptr, ##5836
00cb4     AC F9 B1 FD | 	call	#_audio096_spin2_stop
00cb8     0B 00 00 FF 
00cbc     CC E4 85 F1 | 	sub	objptr, ##5836
00cc0                 | LR__0018
00cc0                 | '  
00cc0                 | '   if key4=key_enter then 						' get the line from the  screen and return it
00cc0     8D 32 0E F2 | 	cmp	local11, #141 wz
00cc4     B0 00 90 5D |  if_ne	jmp	#LR__0022
00cc8     81 01 00 FF 
00ccc     3E 48 06 F6 | 	mov	local22, ##@LR__5047
00cd0                 | '     line$="" 
00cd0                 | '     for i=editor_spaces to 127
00cd0     37 00 00 FF 
00cd4     34 E4 05 F1 | 	add	objptr, ##28212
00cd8     F2 38 02 FB | 	rdlong	local14, objptr
00cdc     37 00 00 FF 
00ce0     34 E4 85 F1 | 	sub	objptr, ##28212
00ce4                 | LR__0019
00ce4     80 38 56 F2 | 	cmps	local14, #128 wc
00ce8     44 00 90 3D |  if_ae	jmp	#LR__0020
00cec     3E E4 05 F1 | 	add	objptr, #62
00cf0     F2 3A C2 FA | 	rdbyte	local15, objptr
00cf4     80 3A 06 FA | 	mul	local15, #128
00cf8     3A E4 85 F1 | 	sub	objptr, #58
00cfc     F2 12 02 FB | 	rdlong	arg01, objptr
00d00     04 E4 85 F1 | 	sub	objptr, #4
00d04     1D 13 02 F1 | 	add	arg01, local15
00d08     1C 13 02 F1 | 	add	arg01, local14
00d0c     00 C9 B1 FD | 	call	#_pspeek
00d10     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
00d14     8C 1E B2 FD | 	call	#__system__Chr_S
00d18     FD 14 02 F6 | 	mov	arg02, result1
00d1c     24 13 02 F6 | 	mov	arg01, local22
00d20     9C FC B1 FD | 	call	#__system___string_concat
00d24     FD 48 02 F6 | 	mov	local22, result1
00d28     01 38 06 F1 | 	add	local14, #1
00d2c     B4 FF 9F FD | 	jmp	#LR__0019
00d30                 | LR__0020
00d30                 | '     if do_insert andalso v.cursor_y<35 then v.scrolldown(v.cursor_y+1)
00d30     51 00 00 FF 
00d34     DC E5 05 F1 | 	add	objptr, ##41948
00d38     F2 28 0A FB | 	rdlong	local06, objptr wz
00d3c     51 00 00 FF 
00d40     DC E5 85 F1 | 	sub	objptr, ##41948
00d44     24 00 90 AD |  if_e	jmp	#LR__0021
00d48     3E E4 05 F1 | 	add	objptr, #62
00d4c     F2 2A C2 FA | 	rdbyte	local07, objptr
00d50     3E E4 85 F1 | 	sub	objptr, #62
00d54     23 2A 16 F2 | 	cmp	local07, #35 wc
00d58     3E E4 05 C1 |  if_b	add	objptr, #62
00d5c     F2 12 C2 CA |  if_b	rdbyte	arg01, objptr
00d60     3E E4 85 C1 |  if_b	sub	objptr, #62
00d64     01 12 06 C1 |  if_b	add	arg01, #1
00d68     A8 E9 B1 CD |  if_b	call	#_hg010b_spin2_scrolldown
00d6c                 | LR__0021
00d6c     D8 EB B1 FD | 	call	#_hg010b_spin2_crlf
00d70                 | '     v.crlf() 
00d70                 | '     return  line$
00d70     24 FB 01 F6 | 	mov	result1, local22
00d74     DC 06 90 FD | 	jmp	#LR__0049
00d78                 | LR__0022
00d78     12 33 E2 F8 | 	getbyte	local11, local04, #0
00d7c                 | '   
00d7c                 | '   if key4 = 43 andalso v.cursor_x>=240 andalso keyclick=1 then paula.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0)  	' tab
00d7c     2B 32 0E F2 | 	cmp	local11, #43 wz
00d80     B0 00 90 5D |  if_ne	jmp	#LR__0023
00d84     3C E4 05 F1 | 	add	objptr, #60
00d88     F2 28 E2 FA | 	rdword	local06, objptr
00d8c     3C E4 85 F1 | 	sub	objptr, #60
00d90     F0 28 16 F2 | 	cmp	local06, #240 wc
00d94     9C 00 90 CD |  if_b	jmp	#LR__0023
00d98     50 00 00 FF 
00d9c     14 E5 05 F1 | 	add	objptr, ##41236
00da0     F2 2C 02 FB | 	rdlong	local08, objptr
00da4     50 00 00 FF 
00da8     14 E5 85 F1 | 	sub	objptr, ##41236
00dac     16 2B 02 F6 | 	mov	local07, local08
00db0     01 2A 0E F2 | 	cmp	local07, #1 wz
00db4     7C 00 90 5D |  if_ne	jmp	#LR__0023
00db8     04 00 00 FF 
00dbc     A8 EA 05 F1 | 	add	ptr__dat__, ##2216
00dc0     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00dc4     04 00 00 FF 
00dc8     A8 EA 85 F1 | 	sub	ptr__dat__, ##2216
00dcc     56 00 00 FF 
00dd0     44 2A 06 F6 | 	mov	local07, ##44100
00dd4     0E 2C C6 F9 | 	decod	local08, #14
00dd8     00 2E 06 F6 | 	mov	local09, #0
00ddc     03 00 00 FF 
00de0     DE 30 06 F6 | 	mov	local10, ##1758
00de4     00 12 06 F6 | 	mov	arg01, #0
00de8     56 00 00 FF 
00dec     44 16 06 F6 | 	mov	arg03, ##44100
00df0     0E 18 C6 F9 | 	decod	arg04, #14
00df4     00 1A 06 F6 | 	mov	arg05, #0
00df8     03 00 00 FF 
00dfc     DE 1C 06 F6 | 	mov	arg06, ##1758
00e00     0B 00 00 FF 
00e04     CC E4 05 F1 | 	add	objptr, ##5836
00e08     E8 F6 B1 FD | 	call	#_audio096_spin2_play
00e0c     0B 00 00 FF 
00e10     CC E4 85 F1 | 	sub	objptr, ##5836
00e14     2C 13 06 F6 | 	mov	arg01, #300
00e18     3C FE B1 FD | 	call	#__system___waitms
00e1c     00 12 06 F6 | 	mov	arg01, #0
00e20     0B 00 00 FF 
00e24     CC E4 05 F1 | 	add	objptr, ##5836
00e28     38 F8 B1 FD | 	call	#_audio096_spin2_stop
00e2c     0B 00 00 FF 
00e30     CC E4 85 F1 | 	sub	objptr, ##5836
00e34                 | LR__0023
00e34                 | '   if key4=77 then i=127 : do: 															' end
00e34     4D 32 0E F2 | 	cmp	local11, #77 wz
00e38     90 00 90 5D |  if_ne	jmp	#LR__0028
00e3c     7F 38 06 F6 | 	mov	local14, #127
00e40                 | LR__0024
00e40                 | '     if pspeek(v.textbuf_ptr+128*v.cursor_y+i)<>32 then 
00e40     3E E4 05 F1 | 	add	objptr, #62
00e44     F2 2E C2 FA | 	rdbyte	local09, objptr
00e48     17 2D E2 F8 | 	getbyte	local08, local09, #0
00e4c     16 31 02 F6 | 	mov	local10, local08
00e50     80 30 06 FA | 	mul	local10, #128
00e54     3A E4 85 F1 | 	sub	objptr, #58
00e58     F2 3A 02 FB | 	rdlong	local15, objptr
00e5c     04 E4 85 F1 | 	sub	objptr, #4
00e60     1D 2B 02 F6 | 	mov	local07, local15
00e64     18 2B 02 F1 | 	add	local07, local10
00e68     1C 2B 02 F1 | 	add	local07, local14
00e6c     15 13 02 F6 | 	mov	arg01, local07
00e70     9C C7 B1 FD | 	call	#_pspeek
00e74     FD 28 E2 F8 | 	getbyte	local06, result1, #0
00e78     20 28 0E F2 | 	cmp	local06, #32 wz
00e7c     2C 00 90 AD |  if_e	jmp	#LR__0026
00e80                 | '       if i<127 then v.setcursorx(2*i+2) else v.setcursorx(254)
00e80     7F 38 56 F2 | 	cmps	local14, #127 wc
00e84     18 00 90 3D |  if_ae	jmp	#LR__0025
00e88     1C 2B 02 F6 | 	mov	local07, local14
00e8c     01 2A 66 F0 | 	shl	local07, #1
00e90     15 13 02 F6 | 	mov	arg01, local07
00e94     02 12 06 F1 | 	add	arg01, #2
00e98     18 E1 B1 FD | 	call	#_hg010b_spin2_setcursorx
00e9c     2C 00 90 FD | 	jmp	#LR__0027
00ea0                 | LR__0025
00ea0     FE 12 06 F6 | 	mov	arg01, #254
00ea4     0C E1 B1 FD | 	call	#_hg010b_spin2_setcursorx
00ea8     20 00 90 FD | 	jmp	#LR__0027
00eac                 | LR__0026
00eac     01 38 86 F1 | 	sub	local14, #1
00eb0     37 00 00 FF 
00eb4     34 E4 05 F1 | 	add	objptr, ##28212
00eb8     F2 28 02 FB | 	rdlong	local06, objptr
00ebc     37 00 00 FF 
00ec0     34 E4 85 F1 | 	sub	objptr, ##28212
00ec4     14 39 0A F2 | 	cmp	local14, local06 wz
00ec8     74 FF 9F 5D |  if_ne	jmp	#LR__0024
00ecc                 | LR__0027
00ecc                 | LR__0028
00ecc                 | '   if i=editor_spaces then v.setcursorx(2*editor_spaces)
00ecc     37 00 00 FF 
00ed0     34 E4 05 F1 | 	add	objptr, ##28212
00ed4     F2 34 02 FB | 	rdlong	local12, objptr
00ed8     37 00 00 FF 
00edc     34 E4 85 F1 | 	sub	objptr, ##28212
00ee0     1A 29 02 F6 | 	mov	local06, local12
00ee4     14 39 0A F2 | 	cmp	local14, local06 wz
00ee8     2C 00 90 5D |  if_ne	jmp	#LR__0029
00eec     37 00 00 FF 
00ef0     34 E4 05 F1 | 	add	objptr, ##28212
00ef4     F2 2C 02 FB | 	rdlong	local08, objptr
00ef8     37 00 00 FF 
00efc     34 E4 85 F1 | 	sub	objptr, ##28212
00f00     16 2B 02 F6 | 	mov	local07, local08
00f04     15 35 02 F6 | 	mov	local12, local07
00f08     01 34 66 F0 | 	shl	local12, #1
00f0c     1A 29 02 F6 | 	mov	local06, local12
00f10     14 13 02 F6 | 	mov	arg01, local06
00f14     9C E0 B1 FD | 	call	#_hg010b_spin2_setcursorx
00f18                 | LR__0029
00f18                 | '     
00f18                 | '   if key4=74 then v.setcursorx(editor_spaces*2)													' home
00f18     4A 32 0E F2 | 	cmp	local11, #74 wz
00f1c     2C 00 90 5D |  if_ne	jmp	#LR__0030
00f20     37 00 00 FF 
00f24     34 E4 05 F1 | 	add	objptr, ##28212
00f28     F2 2C 02 FB | 	rdlong	local08, objptr
00f2c     37 00 00 FF 
00f30     34 E4 85 F1 | 	sub	objptr, ##28212
00f34     16 2B 02 F6 | 	mov	local07, local08
00f38     15 35 02 F6 | 	mov	local12, local07
00f3c     01 34 66 F0 | 	shl	local12, #1
00f40     1A 29 02 F6 | 	mov	local06, local12
00f44     14 13 02 F6 | 	mov	arg01, local06
00f48     68 E0 B1 FD | 	call	#_hg010b_spin2_setcursorx
00f4c                 | LR__0030
00f4c                 | '   if key4=75 then v.setcursory(0)														' pgup
00f4c     4B 32 0E F2 | 	cmp	local11, #75 wz
00f50     00 28 06 A6 |  if_e	mov	local06, #0
00f54     00 12 06 A6 |  if_e	mov	arg01, #0
00f58     88 E0 B1 AD |  if_e	call	#_hg010b_spin2_setcursory
00f5c                 | '   if key4=78 then v.setcursory(36) 														' pgdn, todo: parameter instead 36
00f5c     4E 32 0E F2 | 	cmp	local11, #78 wz
00f60     24 28 06 A6 |  if_e	mov	local06, #36
00f64     24 12 06 A6 |  if_e	mov	arg01, #36
00f68     78 E0 B1 AD |  if_e	call	#_hg010b_spin2_setcursory
00f6c                 | '   if key4=76 then 																' del
00f6c     4C 32 0E F2 | 	cmp	local11, #76 wz
00f70     AC 01 90 5D |  if_ne	jmp	#LR__0035
00f74                 | '     for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
00f74     3E E4 05 F1 | 	add	objptr, #62
00f78     F2 2A C2 FA | 	rdbyte	local07, objptr
00f7c     15 2D E2 F8 | 	getbyte	local08, local07, #0
00f80     80 2C 06 FA | 	mul	local08, #128
00f84     3A E4 85 F1 | 	sub	objptr, #58
00f88     F2 4A 02 FB | 	rdlong	local23, objptr
00f8c     25 39 02 F6 | 	mov	local14, local23
00f90     16 39 02 F1 | 	add	local14, local08
00f94     38 E4 05 F1 | 	add	objptr, #56
00f98     F2 30 E2 FA | 	rdword	local10, objptr
00f9c     18 45 52 F6 | 	abs	local20, local10 wc
00fa0     01 44 46 F0 | 	shr	local20, #1
00fa4     22 39 82 F3 | 	sumc	local14, local20
00fa8     15 2B E2 F8 | 	getbyte	local07, local07, #0
00fac     80 2A 06 FA | 	mul	local07, #128
00fb0     3C E4 85 F1 | 	sub	objptr, #60
00fb4     15 4B 02 F1 | 	add	local23, local07
00fb8     80 4A 06 F1 | 	add	local23, #128
00fbc                 | LR__0031
00fbc     25 39 52 F2 | 	cmps	local14, local23 wc
00fc0     20 00 90 3D |  if_ae	jmp	#LR__0032
00fc4     1C 13 02 F6 | 	mov	arg01, local14
00fc8     01 12 06 F1 | 	add	arg01, #1
00fcc     40 C6 B1 FD | 	call	#_pspeek
00fd0     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
00fd4     1C 13 02 F6 | 	mov	arg01, local14
00fd8     EC C5 B1 FD | 	call	#_pspoke
00fdc     01 38 06 F1 | 	add	local14, #1
00fe0     D8 FF 9F FD | 	jmp	#LR__0031
00fe4                 | LR__0032
00fe4     3E E4 05 F1 | 	add	objptr, #62
00fe8     F2 2E C2 FA | 	rdbyte	local09, objptr
00fec     80 2E 06 FA | 	mul	local09, #128
00ff0     3A E4 85 F1 | 	sub	objptr, #58
00ff4     F2 12 02 FB | 	rdlong	arg01, objptr
00ff8     04 E4 85 F1 | 	sub	objptr, #4
00ffc     17 13 02 F1 | 	add	arg01, local09
01000     7F 12 06 F1 | 	add	arg01, #127
01004     20 14 06 F6 | 	mov	arg02, #32
01008     BC C5 B1 FD | 	call	#_pspoke
0100c     51 00 00 FF 
01010     E8 E5 05 F1 | 	add	objptr, ##41960
01014     F2 00 68 FC | 	wrlong	#0, objptr
01018     51 00 00 FF 
0101c     AA E5 85 F1 | 	sub	objptr, ##41898
01020     F2 34 C2 FA | 	rdbyte	local12, objptr
01024     1A 2D E2 F8 | 	getbyte	local08, local12, #0
01028     80 2C 06 FA | 	mul	local08, #128
0102c     3A E4 85 F1 | 	sub	objptr, #58
01030     F2 2E 02 FB | 	rdlong	local09, objptr
01034     17 39 02 F6 | 	mov	local14, local09
01038     16 39 02 F1 | 	add	local14, local08
0103c     38 E4 05 F1 | 	add	objptr, #56
01040     F2 3A E2 FA | 	rdword	local15, objptr
01044     1D 31 32 F9 | 	getword	local10, local15, #0
01048     18 45 52 F6 | 	abs	local20, local10 wc
0104c     01 44 46 F0 | 	shr	local20, #1
01050     22 45 82 F6 | 	negc	local20, local20
01054     22 39 02 F1 | 	add	local14, local20
01058     1A 29 E2 F8 | 	getbyte	local06, local12, #0
0105c     14 2B 02 F6 | 	mov	local07, local06
01060     80 2A 06 FA | 	mul	local07, #128
01064     17 2D 02 F6 | 	mov	local08, local09
01068     3C E4 85 F1 | 	sub	objptr, #60
0106c     16 4D 02 F6 | 	mov	local24, local08
01070     15 4D 02 F1 | 	add	local24, local07
01074     80 4C 06 F1 | 	add	local24, #128
01078                 | LR__0033
01078     26 39 52 F2 | 	cmps	local14, local24 wc
0107c     A0 00 90 3D |  if_ae	jmp	#LR__0034
01080     3C E4 05 F1 | 	add	objptr, #60
01084     F2 28 E2 FA | 	rdword	local06, objptr
01088     51 00 00 FF 
0108c     AC E5 05 F1 | 	add	objptr, ##41900
01090     F2 2C 02 FB | 	rdlong	local08, objptr
01094     01 2C 66 F0 | 	shl	local08, #1
01098     16 29 02 F1 | 	add	local06, local08
0109c     51 00 00 FF 
010a0     AA E5 85 F1 | 	sub	objptr, ##41898
010a4     F2 34 C2 FA | 	rdbyte	local12, objptr
010a8     3E E4 85 F1 | 	sub	objptr, #62
010ac     10 34 06 FA | 	mul	local12, #16
010b0     04 34 06 F1 | 	add	local12, #4
010b4     1C 13 02 F6 | 	mov	arg01, local14
010b8     54 C5 B1 FD | 	call	#_pspeek
010bc     FD 2A E2 F8 | 	getbyte	local07, result1, #0
010c0     41 E4 05 F1 | 	add	objptr, #65
010c4     F2 2C 02 FB | 	rdlong	local08, objptr
010c8     04 E4 05 F1 | 	add	objptr, #4
010cc     F2 30 02 FB | 	rdlong	local10, objptr
010d0     45 E4 85 F1 | 	sub	objptr, #69
010d4     18 2F 02 F6 | 	mov	local09, local10
010d8     14 13 02 F6 | 	mov	arg01, local06
010dc     1A 15 02 F6 | 	mov	arg02, local12
010e0     15 17 02 F6 | 	mov	arg03, local07
010e4     16 19 02 F6 | 	mov	arg04, local08
010e8     17 1B 02 F6 | 	mov	arg05, local09
010ec     24 DD B1 FD | 	call	#_hg010b_spin2_putcharxycgf
010f0     51 00 00 FF 
010f4     E8 E5 05 F1 | 	add	objptr, ##41960
010f8     F2 28 02 FB | 	rdlong	local06, objptr
010fc     01 28 06 F1 | 	add	local06, #1
01100     F2 28 62 FC | 	wrlong	local06, objptr
01104     51 00 00 FF 
01108     E8 E5 85 F1 | 	sub	objptr, ##41960
0110c     1C 29 02 F6 | 	mov	local06, local14
01110     1C 35 02 F6 | 	mov	local12, local14
01114     01 34 06 F1 | 	add	local12, #1
01118     1A 39 02 F6 | 	mov	local14, local12
0111c     58 FF 9F FD | 	jmp	#LR__0033
01120                 | LR__0034
01120                 | LR__0035
01120                 | ' 
01120                 | '   if key4 = 42 then  'backspace
01120     2A 32 0E F2 | 	cmp	local11, #42 wz
01124     14 02 90 5D |  if_ne	jmp	#LR__0041
01128                 | '     if v.cursor_x>editor_spaces*2 then 
01128     3C E4 05 F1 | 	add	objptr, #60
0112c     F2 34 E2 FA | 	rdword	local12, objptr
01130     1A 29 32 F9 | 	getword	local06, local12, #0
01134     36 00 00 FF 
01138     F8 E5 05 F1 | 	add	objptr, ##28152
0113c     F2 2E 02 FB | 	rdlong	local09, objptr
01140     37 00 00 FF 
01144     34 E4 85 F1 | 	sub	objptr, ##28212
01148     17 2D 02 F6 | 	mov	local08, local09
0114c     16 2B 02 F6 | 	mov	local07, local08
01150     01 2A 66 F0 | 	shl	local07, #1
01154     15 29 5A F2 | 	cmps	local06, local07 wcz
01158     C8 01 90 ED |  if_be	jmp	#LR__0039
0115c     3C E4 05 F1 | 	add	objptr, #60
01160     F2 12 E2 FA | 	rdword	arg01, objptr
01164     02 12 86 F1 | 	sub	arg01, #2
01168     02 E4 05 F1 | 	add	objptr, #2
0116c     F2 14 C2 FA | 	rdbyte	arg02, objptr
01170     3E E4 85 F1 | 	sub	objptr, #62
01174     00 DE B1 FD | 	call	#_hg010b_spin2_setcursorpos
01178                 | '       position v.cursor_x-2,v.cursor_y
01178                 | '       for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
01178     3E E4 05 F1 | 	add	objptr, #62
0117c     F2 2A C2 FA | 	rdbyte	local07, objptr
01180     15 2D E2 F8 | 	getbyte	local08, local07, #0
01184     80 2C 06 FA | 	mul	local08, #128
01188     3A E4 85 F1 | 	sub	objptr, #58
0118c     F2 4E 02 FB | 	rdlong	local25, objptr
01190     27 39 02 F6 | 	mov	local14, local25
01194     16 39 02 F1 | 	add	local14, local08
01198     38 E4 05 F1 | 	add	objptr, #56
0119c     F2 30 E2 FA | 	rdword	local10, objptr
011a0     18 45 52 F6 | 	abs	local20, local10 wc
011a4     01 44 46 F0 | 	shr	local20, #1
011a8     22 39 82 F3 | 	sumc	local14, local20
011ac     15 2B E2 F8 | 	getbyte	local07, local07, #0
011b0     80 2A 06 FA | 	mul	local07, #128
011b4     3C E4 85 F1 | 	sub	objptr, #60
011b8     15 4F 02 F1 | 	add	local25, local07
011bc     80 4E 06 F1 | 	add	local25, #128
011c0                 | LR__0036
011c0     27 39 52 F2 | 	cmps	local14, local25 wc
011c4     20 00 90 3D |  if_ae	jmp	#LR__0037
011c8     1C 13 02 F6 | 	mov	arg01, local14
011cc     01 12 06 F1 | 	add	arg01, #1
011d0     3C C4 B1 FD | 	call	#_pspeek
011d4     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
011d8     1C 13 02 F6 | 	mov	arg01, local14
011dc     E8 C3 B1 FD | 	call	#_pspoke
011e0     01 38 06 F1 | 	add	local14, #1
011e4     D8 FF 9F FD | 	jmp	#LR__0036
011e8                 | LR__0037
011e8     3E E4 05 F1 | 	add	objptr, #62
011ec     F2 2E C2 FA | 	rdbyte	local09, objptr
011f0     80 2E 06 FA | 	mul	local09, #128
011f4     3A E4 85 F1 | 	sub	objptr, #58
011f8     F2 12 02 FB | 	rdlong	arg01, objptr
011fc     04 E4 85 F1 | 	sub	objptr, #4
01200     17 13 02 F1 | 	add	arg01, local09
01204     7F 12 06 F1 | 	add	arg01, #127
01208     20 14 06 F6 | 	mov	arg02, #32
0120c     B8 C3 B1 FD | 	call	#_pspoke
01210     51 00 00 FF 
01214     E8 E5 05 F1 | 	add	objptr, ##41960
01218     F2 00 68 FC | 	wrlong	#0, objptr
0121c     51 00 00 FF 
01220     AA E5 85 F1 | 	sub	objptr, ##41898
01224     F2 34 C2 FA | 	rdbyte	local12, objptr
01228     1A 2D E2 F8 | 	getbyte	local08, local12, #0
0122c     80 2C 06 FA | 	mul	local08, #128
01230     3A E4 85 F1 | 	sub	objptr, #58
01234     F2 2E 02 FB | 	rdlong	local09, objptr
01238     17 39 02 F6 | 	mov	local14, local09
0123c     16 39 02 F1 | 	add	local14, local08
01240     38 E4 05 F1 | 	add	objptr, #56
01244     F2 3A E2 FA | 	rdword	local15, objptr
01248     1D 31 32 F9 | 	getword	local10, local15, #0
0124c     18 45 52 F6 | 	abs	local20, local10 wc
01250     01 44 46 F0 | 	shr	local20, #1
01254     22 45 82 F6 | 	negc	local20, local20
01258     22 39 02 F1 | 	add	local14, local20
0125c     1A 29 E2 F8 | 	getbyte	local06, local12, #0
01260     14 2B 02 F6 | 	mov	local07, local06
01264     80 2A 06 FA | 	mul	local07, #128
01268     17 2D 02 F6 | 	mov	local08, local09
0126c     3C E4 85 F1 | 	sub	objptr, #60
01270     16 51 02 F6 | 	mov	local26, local08
01274     15 51 02 F1 | 	add	local26, local07
01278     80 50 06 F1 | 	add	local26, #128
0127c                 | LR__0038
0127c     28 39 52 F2 | 	cmps	local14, local26 wc
01280     B8 00 90 3D |  if_ae	jmp	#LR__0040
01284     3C E4 05 F1 | 	add	objptr, #60
01288     F2 28 E2 FA | 	rdword	local06, objptr
0128c     51 00 00 FF 
01290     AC E5 05 F1 | 	add	objptr, ##41900
01294     F2 2C 02 FB | 	rdlong	local08, objptr
01298     01 2C 66 F0 | 	shl	local08, #1
0129c     16 29 02 F1 | 	add	local06, local08
012a0     51 00 00 FF 
012a4     AA E5 85 F1 | 	sub	objptr, ##41898
012a8     F2 34 C2 FA | 	rdbyte	local12, objptr
012ac     3E E4 85 F1 | 	sub	objptr, #62
012b0     10 34 06 FA | 	mul	local12, #16
012b4     04 34 06 F1 | 	add	local12, #4
012b8     1C 13 02 F6 | 	mov	arg01, local14
012bc     50 C3 B1 FD | 	call	#_pspeek
012c0     FD 2A E2 F8 | 	getbyte	local07, result1, #0
012c4     41 E4 05 F1 | 	add	objptr, #65
012c8     F2 2C 02 FB | 	rdlong	local08, objptr
012cc     04 E4 05 F1 | 	add	objptr, #4
012d0     F2 30 02 FB | 	rdlong	local10, objptr
012d4     45 E4 85 F1 | 	sub	objptr, #69
012d8     18 2F 02 F6 | 	mov	local09, local10
012dc     14 13 02 F6 | 	mov	arg01, local06
012e0     1A 15 02 F6 | 	mov	arg02, local12
012e4     15 17 02 F6 | 	mov	arg03, local07
012e8     16 19 02 F6 | 	mov	arg04, local08
012ec     17 1B 02 F6 | 	mov	arg05, local09
012f0     20 DB B1 FD | 	call	#_hg010b_spin2_putcharxycgf
012f4     51 00 00 FF 
012f8     E8 E5 05 F1 | 	add	objptr, ##41960
012fc     F2 28 02 FB | 	rdlong	local06, objptr
01300     01 28 06 F1 | 	add	local06, #1
01304     F2 28 62 FC | 	wrlong	local06, objptr
01308     51 00 00 FF 
0130c     E8 E5 85 F1 | 	sub	objptr, ##41960
01310     1C 29 02 F6 | 	mov	local06, local14
01314     1C 35 02 F6 | 	mov	local12, local14
01318     01 34 06 F1 | 	add	local12, #1
0131c     1A 39 02 F6 | 	mov	local14, local12
01320     58 FF 9F FD | 	jmp	#LR__0038
01324                 | LR__0039
01324     81 01 00 FF 
01328     3F 48 06 F6 | 	mov	local22, ##@LR__5048
0132c     04 28 06 F6 | 	mov	local06, #4
01330     3C E4 05 F1 | 	add	objptr, #60
01334     F2 08 58 FC | 	wrword	#4, objptr
01338     3C E4 85 F1 | 	sub	objptr, #60
0133c                 | LR__0040
0133c                 | LR__0041
0133c                 | ' 
0133c                 | '   if key4=82 then 						' arrow up
0133c     52 32 0E F2 | 	cmp	local11, #82 wz
01340     20 00 90 5D |  if_ne	jmp	#LR__0042
01344                 | ' return cursor_y
01344     3E E4 05 F1 | 	add	objptr, #62
01348     F2 34 C2 FA | 	rdbyte	local12, objptr
0134c     3E E4 85 F1 | 	sub	objptr, #62
01350     1A 53 02 F6 | 	mov	local27, local12
01354     01 52 86 F1 | 	sub	local27, #1
01358     29 29 02 F6 | 	mov	local06, local27
0135c     14 13 02 F6 | 	mov	arg01, local06
01360     80 DC B1 FD | 	call	#_hg010b_spin2_setcursory
01364                 | LR__0042
01364                 | '   if key4=81 then						' arrow down,  todo: remove hardcoded 36
01364     51 32 0E F2 | 	cmp	local11, #81 wz
01368     24 00 90 5D |  if_ne	jmp	#LR__0043
0136c                 | ' return cursor_y
0136c     3E E4 05 F1 | 	add	objptr, #62
01370     F2 34 C2 FA | 	rdbyte	local12, objptr
01374     3E E4 85 F1 | 	sub	objptr, #62
01378     1A 53 02 F6 | 	mov	local27, local12
0137c     01 52 06 F1 | 	add	local27, #1
01380     24 52 36 F3 | 	fle	local27, #36 wc
01384     29 29 02 F6 | 	mov	local06, local27
01388     14 13 02 F6 | 	mov	arg01, local06
0138c     54 DC B1 FD | 	call	#_hg010b_spin2_setcursory
01390                 | LR__0043
01390                 | '   if key4=80 then
01390     50 32 0E F2 | 	cmp	local11, #80 wz
01394     44 00 90 5D |  if_ne	jmp	#LR__0044
01398                 | ' return cursor_x
01398     3C E4 05 F1 | 	add	objptr, #60
0139c     F2 54 E2 FA | 	rdword	local28, objptr
013a0     02 54 86 F1 | 	sub	local28, #2
013a4                 | '     cx=v.getcursorx()-2 					' arrow left
013a4                 | '     if cx<editor_spaces then cx=editor_spaces			
013a4     36 00 00 FF 
013a8     F8 E5 05 F1 | 	add	objptr, ##28152
013ac     F2 34 02 FB | 	rdlong	local12, objptr
013b0     37 00 00 FF 
013b4     34 E4 85 F1 | 	sub	objptr, ##28212
013b8     1A 55 52 F2 | 	cmps	local28, local12 wc
013bc     37 00 00 CF 
013c0     34 E4 05 C1 |  if_b	add	objptr, ##28212
013c4     F2 54 02 CB |  if_b	rdlong	local28, objptr
013c8     37 00 00 CF 
013cc     34 E4 85 C1 |  if_b	sub	objptr, ##28212
013d0     2A 29 02 F6 | 	mov	local06, local28
013d4     14 13 02 F6 | 	mov	arg01, local06
013d8     D8 DB B1 FD | 	call	#_hg010b_spin2_setcursorx
013dc                 | LR__0044
013dc                 | '   if key4=79 then						' arrow right
013dc     4F 32 0E F2 | 	cmp	local11, #79 wz
013e0     20 00 90 5D |  if_ne	jmp	#LR__0045
013e4                 | ' return cursor_x
013e4     3C E4 05 F1 | 	add	objptr, #60
013e8     F2 54 E2 FA | 	rdword	local28, objptr
013ec     3C E4 85 F1 | 	sub	objptr, #60
013f0     02 54 06 F1 | 	add	local28, #2
013f4                 | '     cx=v.getcursorx()+2 
013f4                 | '     if cx>254  then cx=254 
013f4     FE 54 36 F3 | 	fle	local28, #254 wc
013f8     2A 29 02 F6 | 	mov	local06, local28
013fc     14 13 02 F6 | 	mov	arg01, local06
01400     B0 DB B1 FD | 	call	#_hg010b_spin2_setcursorx
01404                 | LR__0045
01404                 | ' 
01404                 | '   if key4=73 then 						' ins
01404     49 32 0E F2 | 	cmp	local11, #73 wz
01408     40 00 90 5D |  if_ne	jmp	#LR__0048
0140c     51 00 00 FF 
01410     DC E5 05 F1 | 	add	objptr, ##41948
01414     F2 28 02 FB | 	rdlong	local06, objptr
01418     14 35 22 F6 | 	not	local12, local06
0141c     F2 34 62 FC | 	wrlong	local12, objptr
01420                 | '     if do_insert then v.setcursorshape(14) else  v.setcursorshape(0)
01420     51 00 00 FF 
01424     DC E5 85 F1 | 	sub	objptr, ##41948
01428     00 34 0E F2 | 	cmp	local12, #0 wz
0142c     10 00 90 AD |  if_e	jmp	#LR__0046
01430     0E 28 06 F6 | 	mov	local06, #14
01434     0E 12 06 F6 | 	mov	arg01, #14
01438     FC C9 B1 FD | 	call	#_hg010b_spin2_setcursorshape
0143c     0C 00 90 FD | 	jmp	#LR__0047
01440                 | LR__0046
01440     00 28 06 F6 | 	mov	local06, #0
01444     00 12 06 F6 | 	mov	arg01, #0
01448     EC C9 B1 FD | 	call	#_hg010b_spin2_setcursorshape
0144c                 | LR__0047
0144c                 | LR__0048
0144c     00 24 06 F6 | 	mov	local04, #0
01450     C8 F3 9F FD | 	jmp	#LR__0001
01454                 | LR__0049
01454     A7 F0 03 F6 | 	mov	ptra, fp
01458     B2 00 A0 FD | 	call	#popregs_
0145c                 | _edit_ret
0145c     2D 00 64 FD | 	ret
01460                 | 
01460                 | ' 
01460                 | ' ''-----------------------------------------------------------------------------------------------------------
01460                 | ' ' 					A housekeepeer.
01460                 | ' ' A deedicated cog that is intended to do things in the background, for example tracking GUI elements
01460                 | ' ' or playing audio tracks in  the background.  In the current version it reads the mouse pointer and
01460                 | ' ' a digital joystick position. It also implements a 200 Hz clock that's ticks are synchronized with vblanks 
01460                 | ' ''-----------------------------------------------------------------------------------------------------------
01460                 | ' 
01460                 | ' sub housekeeper
01460                 | _housekeeper
01460                 | ' 
01460                 | ' do
01460                 | LR__0050
01460                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
01460     49 E4 05 F1 | 	add	objptr, #73
01464                 | LR__0051
01464     F2 12 02 FB | 	rdlong	arg01, objptr
01468     01 12 0E F2 | 	cmp	arg01, #1 wz
0146c     F4 FF 9F 5D |  if_ne	jmp	#LR__0051
01470     51 00 00 FF 
01474     5F E5 05 F1 | 	add	objptr, ##41823
01478     F2 12 02 FB | 	rdlong	arg01, objptr
0147c     01 12 06 F1 | 	add	arg01, #1
01480     F2 12 62 FC | 	wrlong	arg01, objptr
01484     51 00 00 FF 
01488     A8 E5 85 F1 | 	sub	objptr, ##41896
0148c     80 00 B0 FD | 	call	#_gethdi
01490     05 12 06 F6 | 	mov	arg01, #5
01494     C0 F7 B1 FD | 	call	#__system___waitms
01498     51 00 00 FF 
0149c     A8 E5 05 F1 | 	add	objptr, ##41896
014a0     F2 12 02 FB | 	rdlong	arg01, objptr
014a4     01 12 06 F1 | 	add	arg01, #1
014a8     F2 12 62 FC | 	wrlong	arg01, objptr
014ac     51 00 00 FF 
014b0     A8 E5 85 F1 | 	sub	objptr, ##41896
014b4     58 00 B0 FD | 	call	#_gethdi
014b8     05 12 06 F6 | 	mov	arg01, #5
014bc     98 F7 B1 FD | 	call	#__system___waitms
014c0     51 00 00 FF 
014c4     A8 E5 05 F1 | 	add	objptr, ##41896
014c8     F2 12 02 FB | 	rdlong	arg01, objptr
014cc     01 12 06 F1 | 	add	arg01, #1
014d0     F2 12 62 FC | 	wrlong	arg01, objptr
014d4     51 00 00 FF 
014d8     A8 E5 85 F1 | 	sub	objptr, ##41896
014dc     30 00 B0 FD | 	call	#_gethdi
014e0     05 12 06 F6 | 	mov	arg01, #5
014e4     70 F7 B1 FD | 	call	#__system___waitms
014e8     51 00 00 FF 
014ec     A8 E5 05 F1 | 	add	objptr, ##41896
014f0     F2 12 02 FB | 	rdlong	arg01, objptr
014f4     01 12 06 F1 | 	add	arg01, #1
014f8     F2 12 62 FC | 	wrlong	arg01, objptr
014fc     51 00 00 FF 
01500     A8 E5 85 F1 | 	sub	objptr, ##41896
01504     08 00 B0 FD | 	call	#_gethdi
01508     54 FF 9F FD | 	jmp	#LR__0050
0150c                 | _housekeeper_ret
0150c     2D 00 64 FD | 	ret
01510                 | 
01510                 | ' 
01510                 | ' '----------------------------------------------------------------------------------------------------------
01510                 | ' ' gethdi is called from the houseekeeper to read HDI related values
01510                 | ' '----------------------------------------------------------------------------------------------------------
01510                 | ' 
01510                 | ' sub gethdi
01510                 | _gethdi
01510     03 4A 05 F6 | 	mov	COUNT_, #3
01514     A8 00 A0 FD | 	call	#pushregs_
01518                 | '   x := mouse_xacc
01518     14 00 00 FF 
0151c     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
01520     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
01524                 | '   y := mouse_yacc
01524     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01528     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
0152c     51 00 00 FF 
01530     20 E5 05 F1 | 	add	objptr, ##41760
01534     F2 14 62 FC | 	wrlong	arg02, objptr
01538     04 E4 05 F1 | 	add	objptr, #4
0153c     F2 12 62 FC | 	wrlong	arg01, objptr
01540                 | '   x := 0
01540                 | '   y := mouse_zacc
01540     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01544     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
01548     08 E4 05 F1 | 	add	objptr, #8
0154c     F2 FA 61 FC | 	wrlong	result1, objptr
01550                 | '   return mouse_bstate&7
01550     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01554     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
01558     14 00 00 FF 
0155c     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
01560     07 FA 05 F5 | 	and	result1, #7
01564     04 E4 85 F1 | 	sub	objptr, #4
01568     F2 FA 61 FC | 	wrlong	result1, objptr
0156c     51 00 00 FF 
01570     28 E5 85 F1 | 	sub	objptr, ##41768
01574     00 1E 06 F6 | 	mov	local01, #0
01578                 | ' 
01578                 | ' mousex,mousey=kbm.mouse_xy()
01578                 | ' dummy,mousew=kbm.mouse_scroll()
01578                 | ' mousek=kbm.mouse_buttons()
01578                 | ' i=0:
01578                 | ' for j=0 to 6
01578     00 20 06 F6 | 	mov	local02, #0
0157c                 | LR__0060
0157c                 | '   if kbm.hidpad_id(j)>0 then
0157c     10 13 02 F6 | 	mov	arg01, local02
01580     C8 EC B1 FD | 	call	#_usbnew_spin2_hidpad_id
01584     01 FA 55 F2 | 	cmps	result1, #1 wc
01588     8C 00 90 CD |  if_b	jmp	#LR__0061
0158c     10 13 02 F6 | 	mov	arg01, local02
01590     00 14 06 F6 | 	mov	arg02, #0
01594     18 ED B1 FD | 	call	#_usbnew_spin2_hidpad_axis
01598     FD 22 02 F6 | 	mov	local03, result1
0159c     10 13 02 F6 | 	mov	arg01, local02
015a0     01 14 06 F6 | 	mov	arg02, #1
015a4     08 ED B1 FD | 	call	#_usbnew_spin2_hidpad_axis
015a8     60 00 00 FF 
015ac     00 22 06 F1 | 	add	local03, ##49152
015b0     0F 22 46 F0 | 	shr	local03, #15
015b4     01 14 06 F6 | 	mov	arg02, #1
015b8     11 15 02 F1 | 	add	arg02, local03
015bc     60 00 00 FF 
015c0     00 FA 05 F1 | 	add	result1, ##49152
015c4     0F FA 45 F0 | 	shr	result1, #15
015c8     01 12 06 F6 | 	mov	arg01, #1
015cc     FD 12 02 F1 | 	add	arg01, result1
015d0     0F 23 02 F6 | 	mov	local03, local01
015d4     02 22 66 F0 | 	shl	local03, #2
015d8     51 00 00 FF 
015dc     30 E5 05 F1 | 	add	objptr, ##41776
015e0     F2 22 02 F1 | 	add	local03, objptr
015e4     02 12 66 F0 | 	shl	arg01, #2
015e8     09 15 02 F1 | 	add	arg02, arg01
015ec     11 15 62 FC | 	wrlong	arg02, local03
015f0     0F 23 02 F6 | 	mov	local03, local01
015f4     02 22 66 F0 | 	shl	local03, #2
015f8     1C E4 05 F1 | 	add	objptr, #28
015fc     F2 22 02 F1 | 	add	local03, objptr
01600     10 13 02 F6 | 	mov	arg01, local02
01604     51 00 00 FF 
01608     4C E5 85 F1 | 	sub	objptr, ##41804
0160c     6C EC B1 FD | 	call	#_usbnew_spin2_hidpad_buttons
01610     11 FB 61 FC | 	wrlong	result1, local03
01614     01 1E 06 F1 | 	add	local01, #1
01618                 | LR__0061
01618     01 20 06 F1 | 	add	local02, #1
0161c     07 20 16 F2 | 	cmp	local02, #7 wc
01620     58 FF 9F CD |  if_b	jmp	#LR__0060
01624     97 22 48 FB | 	callpa	#(@LR__0063-@LR__0062)>>2,fcache_load_ptr_
01628                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
01628                 | LR__0062
01628     07 1E 16 F2 | 	cmp	local01, #7 wc
0162c     3C 00 90 3D |  if_ae	jmp	#LR__0064
01630     0F 23 02 F6 | 	mov	local03, local01
01634     02 22 66 F0 | 	shl	local03, #2
01638     51 00 00 FF 
0163c     30 E5 05 F1 | 	add	objptr, ##41776
01640     F2 22 02 F1 | 	add	local03, objptr
01644     11 01 68 FC | 	wrlong	#0, local03
01648     0F 23 02 F6 | 	mov	local03, local01
0164c     02 22 66 F0 | 	shl	local03, #2
01650     1C E4 05 F1 | 	add	objptr, #28
01654     F2 22 02 F1 | 	add	local03, objptr
01658     11 01 68 FC | 	wrlong	#0, local03
0165c     01 1E 06 F1 | 	add	local01, #1
01660     51 00 00 FF 
01664     4C E5 85 F1 | 	sub	objptr, ##41804
01668     BC FF 9F FD | 	jmp	#LR__0062
0166c                 | LR__0063
0166c                 | LR__0064
0166c     A7 F0 03 F6 | 	mov	ptra, fp
01670     B2 00 A0 FD | 	call	#popregs_
01674                 | _gethdi_ret
01674     2D 00 64 FD | 	ret
01678                 | 
01678                 | ' 
01678                 | ' '-------------------------------------------------------------------------------------------------------------
01678                 | ' '---------------------------------- Housekeeper stuff ends here ----------------------------------------------
01678                 | ' '-------------------------------------------------------------------------------------------------------------
01678                 | ' 
01678                 | ' '-------------------------------------------------------------------------------------------------------------
01678                 | ' '
01678                 | ' '                                     LINE INTERPRETER/TOKENIZER
01678                 | ' '
01678                 | ' '-------------------------------------------------------------------------------------------------------------
01678                 | ' 
01678                 | ' 
01678                 | ' sub interpret
01678                 | _interpret
01678     2F 4A 05 F6 | 	mov	COUNT_, #47
0167c     A8 00 A0 FD | 	call	#pushregs_
01680     01 00 00 FF 
01684     7C F0 07 F1 | 	add	ptra, ##636
01688     37 00 00 FF 
0168c     1C E4 05 F1 | 	add	objptr, ##28188
01690     F2 12 02 FB | 	rdlong	arg01, objptr
01694     37 00 00 FF 
01698     1C E4 85 F1 | 	sub	objptr, ##28188
0169c     D0 17 B2 FD | 	call	#__system__RTrim_S
016a0     FD 12 02 F6 | 	mov	arg01, result1
016a4     08 17 B2 FD | 	call	#__system__LTrim_S
016a8     37 00 00 FF 
016ac     20 E4 05 F1 | 	add	objptr, ##28192
016b0     F2 FA 61 FC | 	wrlong	result1, objptr
016b4     04 E4 05 F1 | 	add	objptr, #4
016b8     FF FF FF FF 
016bc     F2 FE 6B FC | 	wrlong	##-1, objptr
016c0     1A 00 00 FF 
016c4     A0 E5 05 F1 | 	add	objptr, ##13728
016c8     F2 00 68 FC | 	wrlong	#0, objptr
016cc     07 00 00 FF 
016d0     48 E5 85 F1 | 	sub	objptr, ##3912
016d4     F2 00 68 FC | 	wrlong	#0, objptr
016d8     4A 00 00 FF 
016dc     7C E4 85 F1 | 	sub	objptr, ##38012
016e0     00 1E 06 F6 | 	mov	local01, #0
016e4                 | LR__0070
016e4                 | ' 
016e4                 | ' ' -------------------------    Pass 1: Split the line to parts, strip unneded spaces, lowercase parts, detect and concatenate strings
016e4                 | ' 
016e4                 | ' fullline$=trim$(line$): cont=-1  : linenum=0 : lineptr=0 : err=0
016e4                 | ' 
016e4                 | ' 108 
016e4                 | ' for i=0 to 125: separators(i)=0 :next i
016e4     00 20 06 F6 | 	mov	local02, #0
016e8     38 4E 05 F1 | 	add	fp, #56
016ec     97 0E 48 FB | 	callpa	#(@LR__0072-@LR__0071)>>2,fcache_load_ptr_
016f0                 | LR__0071
016f0     10 23 02 F6 | 	mov	local03, local02
016f4     02 22 66 F0 | 	shl	local03, #2
016f8     A7 22 02 F1 | 	add	local03, fp
016fc     11 01 68 FC | 	wrlong	#0, local03
01700     01 20 06 F1 | 	add	local02, #1
01704     7E 20 56 F2 | 	cmps	local02, #126 wc
01708     E4 FF 9F CD |  if_b	jmp	#LR__0071
0170c                 | LR__0072
0170c     38 4E 85 F1 | 	sub	fp, #56
01710                 | ' for i=0 to 125: lparts(i).part$="": lparts(i).token=0: next i
01710     00 20 06 F6 | 	mov	local02, #0
01714     35 00 00 FF 
01718     0C E4 05 F1 | 	add	objptr, ##27148
0171c     97 20 48 FB | 	callpa	#(@LR__0074-@LR__0073)>>2,fcache_load_ptr_
01720                 | LR__0073
01720     10 25 02 F6 | 	mov	local04, local02
01724     03 24 66 F0 | 	shl	local04, #3
01728     F2 24 02 F1 | 	add	local04, objptr
0172c     81 01 00 FF 
01730     40 16 06 F6 | 	mov	arg03, ##@LR__5049
01734     12 17 62 FC | 	wrlong	arg03, local04
01738     10 25 02 F6 | 	mov	local04, local02
0173c     03 24 66 F0 | 	shl	local04, #3
01740     F2 26 02 F6 | 	mov	local05, objptr
01744     F2 24 02 F1 | 	add	local04, objptr
01748     00 28 06 F6 | 	mov	local06, #0
0174c     04 24 06 F1 | 	add	local04, #4
01750     12 01 68 FC | 	wrlong	#0, local04
01754     01 20 06 F1 | 	add	local02, #1
01758     7E 20 56 F2 | 	cmps	local02, #126 wc
0175c     C0 FF 9F CD |  if_b	jmp	#LR__0073
01760                 | LR__0074
01760     02 00 00 FF 
01764     10 E4 05 F1 | 	add	objptr, ##1040
01768     F2 12 02 FB | 	rdlong	arg01, objptr
0176c     37 00 00 FF 
01770     1C E4 85 F1 | 	sub	objptr, ##28188
01774     F8 16 B2 FD | 	call	#__system__RTrim_S
01778     FD 12 02 F6 | 	mov	arg01, result1
0177c     30 16 B2 FD | 	call	#__system__LTrim_S
01780     37 00 00 FF 
01784     1C E4 05 F1 | 	add	objptr, ##28188
01788     F2 FA 61 FC | 	wrlong	result1, objptr
0178c     81 01 00 FF 
01790     41 24 06 F6 | 	mov	local04, ##@LR__5050
01794     1A 00 00 FF 
01798     D4 E5 05 F1 | 	add	objptr, ##13780
0179c     F2 24 62 FC | 	wrlong	local04, objptr
017a0     1A 00 00 FF 
017a4     D4 E5 85 F1 | 	sub	objptr, ##13780
017a8     F2 12 02 FB | 	rdlong	arg01, objptr
017ac     37 00 00 FF 
017b0     1C E4 85 F1 | 	sub	objptr, ##28188
017b4     09 2B 02 F6 | 	mov	local07, arg01
017b8     97 06 48 FB | 	callpa	#(@LR__0076-@LR__0075)>>2,fcache_load_ptr_
017bc                 | LR__0075
017bc     15 FB C9 FA | 	rdbyte	result1, local07 wz
017c0     01 2A 06 51 |  if_ne	add	local07, #1
017c4     F4 FF 9F 5D |  if_ne	jmp	#LR__0075
017c8                 | LR__0076
017c8     09 2B 8A F1 | 	sub	local07, arg01 wz
017cc     51 00 00 FF 
017d0     F4 E5 05 F1 | 	add	objptr, ##41972
017d4     F2 2A 62 FC | 	wrlong	local07, objptr
017d8                 | ' if l=0 then goto 101					' empty line,  nothing to do except print "ready"
017d8     51 00 00 FF 
017dc     F4 E5 85 F1 | 	sub	objptr, ##41972
017e0     60 24 90 AD |  if_e	jmp	#LR__0198
017e4     00 2C 06 F6 | 	mov	local08, #0
017e8                 | ' d=0							' before we split the line, we have to find colons that are inside a string, 
017e8                 | ' for i=1 to len(line$)
017e8     01 20 06 F6 | 	mov	local02, #1
017ec     37 00 00 FF 
017f0     1C E4 05 F1 | 	add	objptr, ##28188
017f4     F2 12 02 FB | 	rdlong	arg01, objptr
017f8     37 00 00 FF 
017fc     1C E4 85 F1 | 	sub	objptr, ##28188
01800     09 2B 02 F6 | 	mov	local07, arg01
01804     97 06 48 FB | 	callpa	#(@LR__0078-@LR__0077)>>2,fcache_load_ptr_
01808                 | LR__0077
01808     15 FB C9 FA | 	rdbyte	result1, local07 wz
0180c     01 2A 06 51 |  if_ne	add	local07, #1
01810     F4 FF 9F 5D |  if_ne	jmp	#LR__0077
01814                 | LR__0078
01814     09 2B 82 F1 | 	sub	local07, arg01
01818     15 2F 02 F6 | 	mov	local09, local07
0181c     01 2E 06 F1 | 	add	local09, #1
01820                 | LR__0079
01820     17 21 52 F2 | 	cmps	local02, local09 wc
01824     AC 00 90 3D |  if_ae	jmp	#LR__0081
01828                 | '   if mid$(line$,i,1)="""" andalso d=0 then 		' they are inside a string if there is an odd number of " before :
01828     37 00 00 FF 
0182c     1C E4 05 F1 | 	add	objptr, ##28188
01830     F2 12 02 FB | 	rdlong	arg01, objptr
01834     37 00 00 FF 
01838     1C E4 85 F1 | 	sub	objptr, ##28188
0183c     10 15 02 F6 | 	mov	arg02, local02
01840     01 16 06 F6 | 	mov	arg03, #1
01844     B0 12 B2 FD | 	call	#__system__Mid_S
01848     FD 12 02 F6 | 	mov	arg01, result1
0184c     81 01 00 FF 
01850     42 14 06 F6 | 	mov	arg02, ##@LR__5051
01854     34 F1 B1 FD | 	call	#__system___string_cmp
01858     00 FA 0D F2 | 	cmp	result1, #0 wz
0185c     00 2C 0E A2 |  if_e	cmp	local08, #0 wz
01860     01 2C 06 A6 |  if_e	mov	local08, #1
01864     3C 00 90 AD |  if_e	jmp	#LR__0080
01868     37 00 00 FF 
0186c     1C E4 05 F1 | 	add	objptr, ##28188
01870     F2 12 02 FB | 	rdlong	arg01, objptr
01874     37 00 00 FF 
01878     1C E4 85 F1 | 	sub	objptr, ##28188
0187c     10 15 02 F6 | 	mov	arg02, local02
01880     01 16 06 F6 | 	mov	arg03, #1
01884     70 12 B2 FD | 	call	#__system__Mid_S
01888     FD 12 02 F6 | 	mov	arg01, result1
0188c     81 01 00 FF 
01890     44 14 06 F6 | 	mov	arg02, ##@LR__5052
01894     F4 F0 B1 FD | 	call	#__system___string_cmp
01898     00 FA 0D F2 | 	cmp	result1, #0 wz
0189c     01 2C 0E A2 |  if_e	cmp	local08, #1 wz
018a0     00 2C 06 A6 |  if_e	mov	local08, #0
018a4                 | LR__0080
018a4     10 25 02 F6 | 	mov	local04, local02
018a8     03 24 66 F0 | 	shl	local04, #3
018ac     35 00 00 FF 
018b0     0C E4 05 F1 | 	add	objptr, ##27148
018b4     F2 26 02 F6 | 	mov	local05, objptr
018b8     F2 24 02 F1 | 	add	local04, objptr
018bc     04 24 06 F1 | 	add	local04, #4
018c0     12 2D 62 FC | 	wrlong	local08, local04
018c4     01 20 06 F1 | 	add	local02, #1
018c8     35 00 00 FF 
018cc     0C E4 85 F1 | 	sub	objptr, ##27148
018d0     4C FF 9F FD | 	jmp	#LR__0079
018d4                 | LR__0081
018d4     01 20 06 F6 | 	mov	local02, #1
018d8                 | ' i=1: do until (mid$(line$,i,1)=":" andalso lparts(i).token=0)  orelse i>=l : i=i+1 : loop 		' find the first : that is not in a string
018d8                 | LR__0082
018d8     37 00 00 FF 
018dc     1C E4 05 F1 | 	add	objptr, ##28188
018e0     F2 12 02 FB | 	rdlong	arg01, objptr
018e4     37 00 00 FF 
018e8     1C E4 85 F1 | 	sub	objptr, ##28188
018ec     10 15 02 F6 | 	mov	arg02, local02
018f0     01 16 06 F6 | 	mov	arg03, #1
018f4     00 12 B2 FD | 	call	#__system__Mid_S
018f8     FD 12 02 F6 | 	mov	arg01, result1
018fc     81 01 00 FF 
01900     46 30 06 F6 | 	mov	local10, ##@LR__5053
01904     18 15 02 F6 | 	mov	arg02, local10
01908     80 F0 B1 FD | 	call	#__system___string_cmp
0190c     00 FA 0D F2 | 	cmp	result1, #0 wz
01910     34 00 90 5D |  if_ne	jmp	#LR__0083
01914     10 27 02 F6 | 	mov	local05, local02
01918     03 26 66 F0 | 	shl	local05, #3
0191c     35 00 00 FF 
01920     0C E4 05 F1 | 	add	objptr, ##27148
01924     F2 28 02 F6 | 	mov	local06, objptr
01928     F2 26 02 F1 | 	add	local05, objptr
0192c     04 26 06 F1 | 	add	local05, #4
01930     13 33 02 FB | 	rdlong	local11, local05
01934     04 26 86 F1 | 	sub	local05, #4
01938     19 35 0A F6 | 	mov	local12, local11 wz
0193c     35 00 00 FF 
01940     0C E4 85 F1 | 	sub	objptr, ##27148
01944     24 00 90 AD |  if_e	jmp	#LR__0084
01948                 | LR__0083
01948     51 00 00 FF 
0194c     F4 E5 05 F1 | 	add	objptr, ##41972
01950     F2 36 02 FB | 	rdlong	local13, objptr
01954     51 00 00 FF 
01958     F4 E5 85 F1 | 	sub	objptr, ##41972
0195c     1B 39 02 F6 | 	mov	local14, local13
01960     1C 21 52 F2 | 	cmps	local02, local14 wc
01964     01 20 06 C1 |  if_b	add	local02, #1
01968     6C FF 9F CD |  if_b	jmp	#LR__0082
0196c                 | LR__0084
0196c                 | ' if i<l then let rest$=trim$(right$(line$,len(line$)-i)):line$=trim$(left$(line$,i-1)) else rest$="" 	' and separate the part of the line before the first : from the rest
0196c     51 00 00 FF 
01970     F4 E5 05 F1 | 	add	objptr, ##41972
01974     F2 24 02 FB | 	rdlong	local04, objptr
01978     51 00 00 FF 
0197c     F4 E5 85 F1 | 	sub	objptr, ##41972
01980     12 21 52 F2 | 	cmps	local02, local04 wc
01984     A8 00 90 3D |  if_ae	jmp	#LR__0087
01988     37 00 00 FF 
0198c     1C E4 05 F1 | 	add	objptr, ##28188
01990     F2 28 02 FB | 	rdlong	local06, objptr
01994     37 00 00 FF 
01998     1C E4 85 F1 | 	sub	objptr, ##28188
0199c     14 13 02 F6 | 	mov	arg01, local06
019a0     09 2B 02 F6 | 	mov	local07, arg01
019a4     97 06 48 FB | 	callpa	#(@LR__0086-@LR__0085)>>2,fcache_load_ptr_
019a8                 | LR__0085
019a8     15 FB C9 FA | 	rdbyte	result1, local07 wz
019ac     01 2A 06 51 |  if_ne	add	local07, #1
019b0     F4 FF 9F 5D |  if_ne	jmp	#LR__0085
019b4                 | LR__0086
019b4     09 2B 82 F1 | 	sub	local07, arg01
019b8     15 27 02 F6 | 	mov	local05, local07
019bc     13 15 02 F6 | 	mov	arg02, local05
019c0     10 15 82 F1 | 	sub	arg02, local02
019c4     14 13 02 F6 | 	mov	arg01, local06
019c8     9C 10 B2 FD | 	call	#__system__Right_S
019cc     FD 12 02 F6 | 	mov	arg01, result1
019d0     9C 14 B2 FD | 	call	#__system__RTrim_S
019d4     FD 12 02 F6 | 	mov	arg01, result1
019d8     D4 13 B2 FD | 	call	#__system__LTrim_S
019dc     51 00 00 FF 
019e0     F8 E5 05 F1 | 	add	objptr, ##41976
019e4     F2 FA 61 FC | 	wrlong	result1, objptr
019e8     1A 00 00 FF 
019ec     DC E5 85 F1 | 	sub	objptr, ##13788
019f0     F2 12 02 FB | 	rdlong	arg01, objptr
019f4     37 00 00 FF 
019f8     1C E4 85 F1 | 	sub	objptr, ##28188
019fc     01 20 86 F1 | 	sub	local02, #1
01a00     10 15 02 F6 | 	mov	arg02, local02
01a04     D8 0F B2 FD | 	call	#__system__Left_S
01a08     FD 12 02 F6 | 	mov	arg01, result1
01a0c     60 14 B2 FD | 	call	#__system__RTrim_S
01a10     FD 12 02 F6 | 	mov	arg01, result1
01a14     98 13 B2 FD | 	call	#__system__LTrim_S
01a18     37 00 00 FF 
01a1c     1C E4 05 F1 | 	add	objptr, ##28188
01a20     F2 FA 61 FC | 	wrlong	result1, objptr
01a24     37 00 00 FF 
01a28     1C E4 85 F1 | 	sub	objptr, ##28188
01a2c     1C 00 90 FD | 	jmp	#LR__0088
01a30                 | LR__0087
01a30     81 01 00 FF 
01a34     48 24 06 F6 | 	mov	local04, ##@LR__5054
01a38     51 00 00 FF 
01a3c     F8 E5 05 F1 | 	add	objptr, ##41976
01a40     F2 24 62 FC | 	wrlong	local04, objptr
01a44     51 00 00 FF 
01a48     F8 E5 85 F1 | 	sub	objptr, ##41976
01a4c                 | LR__0088
01a4c                 | ' 
01a4c                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not the last part
01a4c     37 00 00 FF 
01a50     24 E4 05 F1 | 	add	objptr, ##28196
01a54     F2 24 02 FB | 	rdlong	local04, objptr
01a58     37 00 00 FF 
01a5c     24 E4 85 F1 | 	sub	objptr, ##28196
01a60     FF FF 7F FF 
01a64     FF 25 0E F2 | 	cmp	local04, ##-1 wz
01a68     40 00 90 5D |  if_ne	jmp	#LR__0089
01a6c     51 00 00 FF 
01a70     F8 E5 05 F1 | 	add	objptr, ##41976
01a74     F2 12 02 FB | 	rdlong	arg01, objptr
01a78     51 00 00 FF 
01a7c     F8 E5 85 F1 | 	sub	objptr, ##41976
01a80     81 01 00 FF 
01a84     49 28 06 F6 | 	mov	local06, ##@LR__5055
01a88     14 15 02 F6 | 	mov	arg02, local06
01a8c     FC EE B1 FD | 	call	#__system___string_cmp
01a90     00 FA 0D F2 | 	cmp	result1, #0 wz
01a94     37 00 00 5F 
01a98     24 E4 05 51 |  if_ne	add	objptr, ##28196
01a9c     F2 00 68 5C |  if_ne	wrlong	#0, objptr
01aa0     37 00 00 5F 
01aa4     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01aa8     08 01 90 5D |  if_ne	jmp	#LR__0093
01aac                 | LR__0089
01aac                 | ' if cont=-1 andalso rest$= "" then cont=3 : goto 107		' this is the first AND the last part
01aac     37 00 00 FF 
01ab0     24 E4 05 F1 | 	add	objptr, ##28196
01ab4     F2 24 02 FB | 	rdlong	local04, objptr
01ab8     37 00 00 FF 
01abc     24 E4 85 F1 | 	sub	objptr, ##28196
01ac0     FF FF 7F FF 
01ac4     FF 25 0E F2 | 	cmp	local04, ##-1 wz
01ac8     3C 00 90 5D |  if_ne	jmp	#LR__0090
01acc     51 00 00 FF 
01ad0     F8 E5 05 F1 | 	add	objptr, ##41976
01ad4     F2 12 02 FB | 	rdlong	arg01, objptr
01ad8     51 00 00 FF 
01adc     F8 E5 85 F1 | 	sub	objptr, ##41976
01ae0     81 01 00 FF 
01ae4     4A 14 06 F6 | 	mov	arg02, ##@LR__5056
01ae8     A0 EE B1 FD | 	call	#__system___string_cmp
01aec     00 FA 0D F2 | 	cmp	result1, #0 wz
01af0     37 00 00 AF 
01af4     24 E4 05 A1 |  if_e	add	objptr, ##28196
01af8     F2 06 68 AC |  if_e	wrlong	#3, objptr
01afc     37 00 00 AF 
01b00     24 E4 85 A1 |  if_e	sub	objptr, ##28196
01b04     AC 00 90 AD |  if_e	jmp	#LR__0093
01b08                 | LR__0090
01b08                 | ' if cont=4  andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
01b08     37 00 00 FF 
01b0c     24 E4 05 F1 | 	add	objptr, ##28196
01b10     F2 24 02 FB | 	rdlong	local04, objptr
01b14     37 00 00 FF 
01b18     24 E4 85 F1 | 	sub	objptr, ##28196
01b1c     04 24 0E F2 | 	cmp	local04, #4 wz
01b20     3C 00 90 5D |  if_ne	jmp	#LR__0091
01b24     51 00 00 FF 
01b28     F8 E5 05 F1 | 	add	objptr, ##41976
01b2c     F2 12 02 FB | 	rdlong	arg01, objptr
01b30     51 00 00 FF 
01b34     F8 E5 85 F1 | 	sub	objptr, ##41976
01b38     81 01 00 FF 
01b3c     4B 14 06 F6 | 	mov	arg02, ##@LR__5057
01b40     48 EE B1 FD | 	call	#__system___string_cmp
01b44     00 FA 0D F2 | 	cmp	result1, #0 wz
01b48     37 00 00 5F 
01b4c     24 E4 05 51 |  if_ne	add	objptr, ##28196
01b50     F2 02 68 5C |  if_ne	wrlong	#1, objptr
01b54     37 00 00 5F 
01b58     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01b5c     54 00 90 5D |  if_ne	jmp	#LR__0093
01b60                 | LR__0091
01b60                 | ' if cont=4  andalso rest$= "" then cont=2 : goto 107		' this is the last, and not the first, part
01b60     37 00 00 FF 
01b64     24 E4 05 F1 | 	add	objptr, ##28196
01b68     F2 24 02 FB | 	rdlong	local04, objptr
01b6c     37 00 00 FF 
01b70     24 E4 85 F1 | 	sub	objptr, ##28196
01b74     04 24 0E F2 | 	cmp	local04, #4 wz
01b78     38 00 90 5D |  if_ne	jmp	#LR__0092
01b7c     51 00 00 FF 
01b80     F8 E5 05 F1 | 	add	objptr, ##41976
01b84     F2 12 02 FB | 	rdlong	arg01, objptr
01b88     51 00 00 FF 
01b8c     F8 E5 85 F1 | 	sub	objptr, ##41976
01b90     81 01 00 FF 
01b94     4C 14 06 F6 | 	mov	arg02, ##@LR__5058
01b98     F0 ED B1 FD | 	call	#__system___string_cmp
01b9c     00 FA 0D F2 | 	cmp	result1, #0 wz
01ba0     37 00 00 AF 
01ba4     24 E4 05 A1 |  if_e	add	objptr, ##28196
01ba8     F2 04 68 AC |  if_e	wrlong	#2, objptr
01bac     37 00 00 AF 
01bb0     24 E4 85 A1 |  if_e	sub	objptr, ##28196
01bb4                 | LR__0092
01bb4                 | LR__0093
01bb4     38 4E 05 F1 | 	add	fp, #56
01bb8     A7 00 68 FC | 	wrlong	#0, fp
01bbc     38 4E 85 F1 | 	sub	fp, #56
01bc0     00 20 06 F6 | 	mov	local02, #0
01bc4     01 3A 06 F6 | 	mov	local15, #1
01bc8                 | ' 
01bc8                 | ' ' 1b: find separators
01bc8                 | ' 
01bc8                 | ' 107
01bc8                 | ' separators(0)=0
01bc8                 | ' i=0: j=1
01bc8                 | ' do: 
01bc8                 | LR__0094
01bc8     01 20 06 F1 | 	add	local02, #1
01bcc     37 00 00 FF 
01bd0     1C E4 05 F1 | 	add	objptr, ##28188
01bd4     F2 12 02 FB | 	rdlong	arg01, objptr
01bd8     37 00 00 FF 
01bdc     1C E4 85 F1 | 	sub	objptr, ##28188
01be0     10 15 02 F6 | 	mov	arg02, local02
01be4     01 16 06 F6 | 	mov	arg03, #1
01be8     0C 0F B2 FD | 	call	#__system__Mid_S
01bec     FD 3C 02 F6 | 	mov	local16, result1
01bf0                 | '   i+=1 : c$=mid$(line$,i,1) : if isseparator(c$) then separators(j)=i: j+=1 
01bf0     1E 13 02 F6 | 	mov	arg01, local16
01bf4     2C 28 B0 FD | 	call	#_isseparator
01bf8     00 FA 0D F2 | 	cmp	result1, #0 wz
01bfc     1C 00 90 AD |  if_e	jmp	#LR__0095
01c00     1D 23 02 F6 | 	mov	local03, local15
01c04     02 22 66 F0 | 	shl	local03, #2
01c08     38 4E 05 F1 | 	add	fp, #56
01c0c     A7 22 02 F1 | 	add	local03, fp
01c10     11 21 62 FC | 	wrlong	local02, local03
01c14     01 3A 06 F1 | 	add	local15, #1
01c18     38 4E 85 F1 | 	sub	fp, #56
01c1c                 | LR__0095
01c1c     51 00 00 FF 
01c20     F4 E5 05 F1 | 	add	objptr, ##41972
01c24     F2 24 02 FB | 	rdlong	local04, objptr
01c28     51 00 00 FF 
01c2c     F4 E5 85 F1 | 	sub	objptr, ##41972
01c30     12 21 5A F2 | 	cmps	local02, local04 wcz
01c34     90 FF 9F ED |  if_be	jmp	#LR__0094
01c38     1D 23 02 F6 | 	mov	local03, local15
01c3c     02 22 66 F0 | 	shl	local03, #2
01c40     38 4E 05 F1 | 	add	fp, #56
01c44     A7 30 02 F6 | 	mov	local10, fp
01c48     A7 22 02 F1 | 	add	local03, fp
01c4c     11 21 62 FC | 	wrlong	local02, local03
01c50     00 3E 06 F6 | 	mov	local17, #0
01c54                 | ' for i=0 to j-1 
01c54     00 20 06 F6 | 	mov	local02, #0
01c58     1D 41 02 F6 | 	mov	local18, local15
01c5c     38 4E 85 F1 | 	sub	fp, #56
01c60                 | LR__0096
01c60     20 21 52 F2 | 	cmps	local02, local18 wc
01c64     50 01 90 3D |  if_ae	jmp	#LR__0100
01c68     10 23 02 F6 | 	mov	local03, local02
01c6c     02 22 66 F0 | 	shl	local03, #2
01c70     38 4E 05 F1 | 	add	fp, #56
01c74     A7 22 02 F1 | 	add	local03, fp
01c78     11 27 02 FB | 	rdlong	local05, local03
01c7c     52 00 00 FF 
01c80     00 E4 05 F1 | 	add	objptr, ##41984
01c84     F2 26 62 FC | 	wrlong	local05, objptr
01c88     10 23 02 F6 | 	mov	local03, local02
01c8c     01 22 06 F1 | 	add	local03, #1
01c90     02 22 66 F0 | 	shl	local03, #2
01c94     A7 30 02 F6 | 	mov	local10, fp
01c98     A7 22 02 F1 | 	add	local03, fp
01c9c     11 27 02 FB | 	rdlong	local05, local03
01ca0     04 E4 05 F1 | 	add	objptr, #4
01ca4     F2 26 62 FC | 	wrlong	local05, objptr
01ca8                 | '   if p1>0 then let p$=mid$(line$,p1,1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01ca8     04 E4 85 F1 | 	sub	objptr, #4
01cac     F2 24 02 FB | 	rdlong	local04, objptr
01cb0     52 00 00 FF 
01cb4     00 E4 85 F1 | 	sub	objptr, ##41984
01cb8     01 24 56 F2 | 	cmps	local04, #1 wc
01cbc     38 4E 85 F1 | 	sub	fp, #56
01cc0     68 00 90 CD |  if_b	jmp	#LR__0098
01cc4     37 00 00 FF 
01cc8     1C E4 05 F1 | 	add	objptr, ##28188
01ccc     F2 12 02 FB | 	rdlong	arg01, objptr
01cd0     1A 00 00 FF 
01cd4     E4 E5 05 F1 | 	add	objptr, ##13796
01cd8     F2 14 02 FB | 	rdlong	arg02, objptr
01cdc     52 00 00 FF 
01ce0     00 E4 85 F1 | 	sub	objptr, ##41984
01ce4     01 16 06 F6 | 	mov	arg03, #1
01ce8     0C 0E B2 FD | 	call	#__system__Mid_S
01cec     FD 42 02 F6 | 	mov	local19, result1
01cf0     81 01 00 FF 
01cf4     4D 14 06 F6 | 	mov	arg02, ##@LR__5059
01cf8     21 13 02 F6 | 	mov	arg01, local19
01cfc     8C EC B1 FD | 	call	#__system___string_cmp
01d00     00 FA 0D F2 | 	cmp	result1, #0 wz
01d04     24 00 90 AD |  if_e	jmp	#LR__0097
01d08     1F 31 02 F6 | 	mov	local10, local17
01d0c     03 30 66 F0 | 	shl	local10, #3
01d10     35 00 00 FF 
01d14     0C E4 05 F1 | 	add	objptr, ##27148
01d18     F2 30 02 F1 | 	add	local10, objptr
01d1c     18 43 62 FC | 	wrlong	local19, local10
01d20     01 3E 06 F1 | 	add	local17, #1
01d24     35 00 00 FF 
01d28     0C E4 85 F1 | 	sub	objptr, ##27148
01d2c                 | LR__0097
01d2c                 | LR__0098
01d2c     37 00 00 FF 
01d30     1C E4 05 F1 | 	add	objptr, ##28188
01d34     F2 12 02 FB | 	rdlong	arg01, objptr
01d38     1A 00 00 FF 
01d3c     E4 E5 05 F1 | 	add	objptr, ##13796
01d40     F2 14 02 FB | 	rdlong	arg02, objptr
01d44     01 14 06 F1 | 	add	arg02, #1
01d48     04 E4 05 F1 | 	add	objptr, #4
01d4c     F2 16 02 FB | 	rdlong	arg03, objptr
01d50     04 E4 85 F1 | 	sub	objptr, #4
01d54     F2 32 02 FB | 	rdlong	local11, objptr
01d58     52 00 00 FF 
01d5c     00 E4 85 F1 | 	sub	objptr, ##41984
01d60     19 35 02 F6 | 	mov	local12, local11
01d64     1A 17 82 F1 | 	sub	arg03, local12
01d68     01 16 86 F1 | 	sub	arg03, #1
01d6c     88 0D B2 FD | 	call	#__system__Mid_S
01d70     FD 42 02 F6 | 	mov	local19, result1
01d74                 | '   p$=mid$(line$,p1+1,p2-p1-1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01d74     81 01 00 FF 
01d78     4E 14 06 F6 | 	mov	arg02, ##@LR__5060
01d7c     21 13 02 F6 | 	mov	arg01, local19
01d80     08 EC B1 FD | 	call	#__system___string_cmp
01d84     00 FA 0D F2 | 	cmp	result1, #0 wz
01d88     24 00 90 AD |  if_e	jmp	#LR__0099
01d8c     1F 31 02 F6 | 	mov	local10, local17
01d90     03 30 66 F0 | 	shl	local10, #3
01d94     35 00 00 FF 
01d98     0C E4 05 F1 | 	add	objptr, ##27148
01d9c     F2 30 02 F1 | 	add	local10, objptr
01da0     18 43 62 FC | 	wrlong	local19, local10
01da4     01 3E 06 F1 | 	add	local17, #1
01da8     35 00 00 FF 
01dac     0C E4 85 F1 | 	sub	objptr, ##27148
01db0                 | LR__0099
01db0     01 20 06 F1 | 	add	local02, #1
01db4     A8 FE 9F FD | 	jmp	#LR__0096
01db8                 | LR__0100
01db8                 | ' 
01db8                 | ' ' 1d  : first part has to have a line number, if not, add 0 for the immediate line
01db8                 | ' 
01db8                 | ' if (cont=0 orelse cont=3) andalso (not isdec(lparts(0).part$))  then for i=k to 1 step -1: lparts(i)=lparts(i-1) : next i: lparts(0).part$="0" : k+=1
01db8     37 00 00 FF 
01dbc     24 E4 05 F1 | 	add	objptr, ##28196
01dc0     F2 24 0A FB | 	rdlong	local04, objptr wz
01dc4     37 00 00 FF 
01dc8     24 E4 85 F1 | 	sub	objptr, ##28196
01dcc     37 00 00 5F 
01dd0     24 E4 05 51 |  if_ne	add	objptr, ##28196
01dd4     F2 30 02 5B |  if_ne	rdlong	local10, objptr
01dd8     37 00 00 5F 
01ddc     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01de0     03 30 0E 52 |  if_ne	cmp	local10, #3 wz
01de4     B8 00 90 5D |  if_ne	jmp	#LR__0103
01de8     35 00 00 FF 
01dec     0C E4 05 F1 | 	add	objptr, ##27148
01df0     F2 32 02 FB | 	rdlong	local11, objptr
01df4     35 00 00 FF 
01df8     0C E4 85 F1 | 	sub	objptr, ##27148
01dfc     19 13 02 F6 | 	mov	arg01, local11
01e00     04 46 B0 FD | 	call	#_isdec
01e04     FD 34 02 F6 | 	mov	local12, result1
01e08     1A 29 22 F6 | 	not	local06, local12
01e0c     00 28 0E F2 | 	cmp	local06, #0 wz
01e10     8C 00 90 AD |  if_e	jmp	#LR__0103
01e14     1F 21 02 F6 | 	mov	local02, local17
01e18     35 00 00 FF 
01e1c     0C E4 05 F1 | 	add	objptr, ##27148
01e20     97 32 48 FB | 	callpa	#(@LR__0102-@LR__0101)>>2,fcache_load_ptr_
01e24                 | LR__0101
01e24     10 27 02 F6 | 	mov	local05, local02
01e28     01 26 86 F1 | 	sub	local05, #1
01e2c     03 26 66 F0 | 	shl	local05, #3
01e30     F2 26 02 F1 | 	add	local05, objptr
01e34     13 25 02 FB | 	rdlong	local04, local05
01e38     10 29 02 F6 | 	mov	local06, local02
01e3c     01 28 86 F1 | 	sub	local06, #1
01e40     03 28 66 F0 | 	shl	local06, #3
01e44     F2 28 02 F1 | 	add	local06, objptr
01e48     04 28 06 F1 | 	add	local06, #4
01e4c     14 23 02 FB | 	rdlong	local03, local06
01e50     10 29 02 F6 | 	mov	local06, local02
01e54     03 28 66 F0 | 	shl	local06, #3
01e58     F2 34 02 F6 | 	mov	local12, objptr
01e5c     F2 28 02 F1 | 	add	local06, objptr
01e60     14 25 62 FC | 	wrlong	local04, local06
01e64     10 33 02 F6 | 	mov	local11, local02
01e68     19 37 02 F6 | 	mov	local13, local11
01e6c     03 36 66 F0 | 	shl	local13, #3
01e70     F2 36 02 F1 | 	add	local13, objptr
01e74     04 36 06 F1 | 	add	local13, #4
01e78     1B 23 62 FC | 	wrlong	local03, local13
01e7c     01 20 86 F1 | 	sub	local02, #1
01e80     01 20 56 F2 | 	cmps	local02, #1 wc
01e84     9C FF 9F 3D |  if_ae	jmp	#LR__0101
01e88                 | LR__0102
01e88     81 01 00 FF 
01e8c     4F 24 06 F6 | 	mov	local04, ##@LR__5061
01e90     F2 24 62 FC | 	wrlong	local04, objptr
01e94     35 00 00 FF 
01e98     0C E4 85 F1 | 	sub	objptr, ##27148
01e9c     01 3E 06 F1 | 	add	local17, #1
01ea0                 | LR__0103
01ea0     00 20 06 F6 | 	mov	local02, #0
01ea4                 | ' 
01ea4                 | ' ' 1e : find strings
01ea4                 | ' 
01ea4                 | ' i=0
01ea4                 | ' do
01ea4                 | LR__0104
01ea4                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
01ea4     10 27 02 F6 | 	mov	local05, local02
01ea8     03 26 66 F0 | 	shl	local05, #3
01eac     35 00 00 FF 
01eb0     0C E4 05 F1 | 	add	objptr, ##27148
01eb4     F2 26 02 F1 | 	add	local05, objptr
01eb8     13 13 02 FB | 	rdlong	arg01, local05
01ebc     81 01 00 FF 
01ec0     51 14 06 F6 | 	mov	arg02, ##@LR__5062
01ec4     35 00 00 FF 
01ec8     0C E4 85 F1 | 	sub	objptr, ##27148
01ecc     BC EA B1 FD | 	call	#__system___string_cmp
01ed0     00 FA 0D F2 | 	cmp	result1, #0 wz
01ed4     01 20 06 51 |  if_ne	add	local02, #1
01ed8     20 01 90 5D |  if_ne	jmp	#LR__0109
01edc     10 45 02 F6 | 	mov	local20, local02
01ee0                 | LR__0105
01ee0     10 31 02 F6 | 	mov	local10, local02
01ee4     01 30 06 F1 | 	add	local10, #1
01ee8     03 30 66 F0 | 	shl	local10, #3
01eec     35 00 00 FF 
01ef0     0C E4 05 F1 | 	add	objptr, ##27148
01ef4     F2 30 02 F1 | 	add	local10, objptr
01ef8     18 43 02 FB | 	rdlong	local19, local10
01efc     22 31 02 F6 | 	mov	local10, local20
01f00     03 30 66 F0 | 	shl	local10, #3
01f04     F2 30 02 F1 | 	add	local10, objptr
01f08     22 33 02 F6 | 	mov	local11, local20
01f0c     19 39 02 F6 | 	mov	local14, local11
01f10     03 38 66 F0 | 	shl	local14, #3
01f14     F2 38 02 F1 | 	add	local14, objptr
01f18     1C 13 02 FB | 	rdlong	arg01, local14
01f1c     21 35 02 F6 | 	mov	local12, local19
01f20     1A 15 02 F6 | 	mov	arg02, local12
01f24     35 00 00 FF 
01f28     0C E4 85 F1 | 	sub	objptr, ##27148
01f2c     90 EA B1 FD | 	call	#__system___string_concat
01f30     18 FB 61 FC | 	wrlong	result1, local10
01f34     10 3B 02 F6 | 	mov	local15, local02
01f38     01 3A 06 F1 | 	add	local15, #1
01f3c     1F 47 02 F6 | 	mov	local21, local17
01f40     01 46 06 F1 | 	add	local21, #1
01f44     97 3C 48 FB | 	callpa	#(@LR__0107-@LR__0106)>>2,fcache_load_ptr_
01f48                 | LR__0106
01f48     23 3B 52 F2 | 	cmps	local15, local21 wc
01f4c     70 00 90 3D |  if_ae	jmp	#LR__0108
01f50     1D 27 02 F6 | 	mov	local05, local15
01f54     01 26 06 F1 | 	add	local05, #1
01f58     03 26 66 F0 | 	shl	local05, #3
01f5c     35 00 00 FF 
01f60     0C E4 05 F1 | 	add	objptr, ##27148
01f64     F2 26 02 F1 | 	add	local05, objptr
01f68     13 25 02 FB | 	rdlong	local04, local05
01f6c     1D 29 02 F6 | 	mov	local06, local15
01f70     01 28 06 F1 | 	add	local06, #1
01f74     03 28 66 F0 | 	shl	local06, #3
01f78     F2 28 02 F1 | 	add	local06, objptr
01f7c     04 28 06 F1 | 	add	local06, #4
01f80     14 23 02 FB | 	rdlong	local03, local06
01f84     1D 29 02 F6 | 	mov	local06, local15
01f88     03 28 66 F0 | 	shl	local06, #3
01f8c     F2 34 02 F6 | 	mov	local12, objptr
01f90     F2 28 02 F1 | 	add	local06, objptr
01f94     14 25 62 FC | 	wrlong	local04, local06
01f98     1D 33 02 F6 | 	mov	local11, local15
01f9c     19 37 02 F6 | 	mov	local13, local11
01fa0     03 36 66 F0 | 	shl	local13, #3
01fa4     F2 36 02 F1 | 	add	local13, objptr
01fa8     04 36 06 F1 | 	add	local13, #4
01fac     1B 23 62 FC | 	wrlong	local03, local13
01fb0     01 3A 06 F1 | 	add	local15, #1
01fb4     35 00 00 FF 
01fb8     0C E4 85 F1 | 	sub	objptr, ##27148
01fbc     88 FF 9F FD | 	jmp	#LR__0106
01fc0                 | LR__0107
01fc0                 | LR__0108
01fc0     01 3E 86 F1 | 	sub	local17, #1
01fc4     81 01 00 FF 
01fc8     53 14 06 F6 | 	mov	arg02, ##@LR__5063
01fcc     21 13 02 F6 | 	mov	arg01, local19
01fd0     B8 E9 B1 FD | 	call	#__system___string_cmp
01fd4     00 FA 0D F2 | 	cmp	result1, #0 wz
01fd8     1F 21 52 52 |  if_ne	cmps	local02, local17 wc
01fdc     00 FF 9F 4D |  if_c_and_nz	jmp	#LR__0105
01fe0                 | '   if p$<>"""" then k+=1:i+=1
01fe0     81 01 00 FF 
01fe4     55 14 06 F6 | 	mov	arg02, ##@LR__5064
01fe8     21 13 02 F6 | 	mov	arg01, local19
01fec     9C E9 B1 FD | 	call	#__system___string_cmp
01ff0     00 FA 0D F2 | 	cmp	result1, #0 wz
01ff4     01 3E 06 51 |  if_ne	add	local17, #1
01ff8     01 20 06 51 |  if_ne	add	local02, #1
01ffc                 | LR__0109
01ffc     1F 21 52 F2 | 	cmps	local02, local17 wc
02000     A0 FE 9F CD |  if_b	jmp	#LR__0104
02004     00 20 06 F6 | 	mov	local02, #0
02008                 | ' 
02008                 | ' ' 1f : concatenate strings if "" detected between
02008                 | '  
02008                 | ' i=0
02008                 | ' do
02008                 | LR__0110
02008                 | '   if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
02008     10 27 02 F6 | 	mov	local05, local02
0200c     03 26 66 F0 | 	shl	local05, #3
02010     35 00 00 FF 
02014     0C E4 05 F1 | 	add	objptr, ##27148
02018     F2 28 02 F6 | 	mov	local06, objptr
0201c     F2 26 02 F1 | 	add	local05, objptr
02020     13 13 02 FB | 	rdlong	arg01, local05
02024     01 14 06 F6 | 	mov	arg02, #1
02028     35 00 00 FF 
0202c     0C E4 85 F1 | 	sub	objptr, ##27148
02030     34 0A B2 FD | 	call	#__system__Right_S
02034     FD 12 02 F6 | 	mov	arg01, result1
02038     81 01 00 FF 
0203c     57 14 06 F6 | 	mov	arg02, ##@LR__5065
02040     48 E9 B1 FD | 	call	#__system___string_cmp
02044     00 FA 0D F2 | 	cmp	result1, #0 wz
02048     7C 01 90 5D |  if_ne	jmp	#LR__0116
0204c     10 29 02 F6 | 	mov	local06, local02
02050     01 28 06 F1 | 	add	local06, #1
02054     03 28 66 F0 | 	shl	local06, #3
02058     35 00 00 FF 
0205c     0C E4 05 F1 | 	add	objptr, ##27148
02060     F2 34 02 F6 | 	mov	local12, objptr
02064     F2 28 02 F1 | 	add	local06, objptr
02068     14 13 02 FB | 	rdlong	arg01, local06
0206c     01 14 06 F6 | 	mov	arg02, #1
02070     35 00 00 FF 
02074     0C E4 85 F1 | 	sub	objptr, ##27148
02078     64 09 B2 FD | 	call	#__system__Left_S
0207c     FD 12 02 F6 | 	mov	arg01, result1
02080     81 01 00 FF 
02084     59 14 06 F6 | 	mov	arg02, ##@LR__5066
02088     00 E9 B1 FD | 	call	#__system___string_cmp
0208c     00 FA 0D F2 | 	cmp	result1, #0 wz
02090     34 01 90 5D |  if_ne	jmp	#LR__0116
02094     10 31 02 F6 | 	mov	local10, local02
02098     03 30 66 F0 | 	shl	local10, #3
0209c     35 00 00 FF 
020a0     0C E4 05 F1 | 	add	objptr, ##27148
020a4     F2 30 02 F1 | 	add	local10, objptr
020a8     10 39 02 F6 | 	mov	local14, local02
020ac     03 38 66 F0 | 	shl	local14, #3
020b0     F2 38 02 F1 | 	add	local14, objptr
020b4     1C 29 02 FB | 	rdlong	local06, local14
020b8     10 37 02 F6 | 	mov	local13, local02
020bc     01 36 06 F1 | 	add	local13, #1
020c0     03 36 66 F0 | 	shl	local13, #3
020c4     F2 36 02 F1 | 	add	local13, objptr
020c8     1B 35 02 FB | 	rdlong	local12, local13
020cc     10 49 02 F6 | 	mov	local22, local02
020d0     01 48 06 F1 | 	add	local22, #1
020d4     24 4B 02 F6 | 	mov	local23, local22
020d8     03 4A 66 F0 | 	shl	local23, #3
020dc     F2 4C 02 F6 | 	mov	local24, objptr
020e0     F2 4A 02 F1 | 	add	local23, objptr
020e4     25 13 02 FB | 	rdlong	arg01, local23
020e8     35 00 00 FF 
020ec     0C E4 85 F1 | 	sub	objptr, ##27148
020f0     09 2B 02 F6 | 	mov	local07, arg01
020f4     97 06 48 FB | 	callpa	#(@LR__0112-@LR__0111)>>2,fcache_load_ptr_
020f8                 | LR__0111
020f8     15 FB C9 FA | 	rdbyte	result1, local07 wz
020fc     01 2A 06 51 |  if_ne	add	local07, #1
02100     F4 FF 9F 5D |  if_ne	jmp	#LR__0111
02104                 | LR__0112
02104     09 2B 82 F1 | 	sub	local07, arg01
02108     15 33 02 F6 | 	mov	local11, local07
0210c     01 32 86 F1 | 	sub	local11, #1
02110     1A 13 02 F6 | 	mov	arg01, local12
02114     19 15 02 F6 | 	mov	arg02, local11
02118     4C 09 B2 FD | 	call	#__system__Right_S
0211c     FD 34 02 F6 | 	mov	local12, result1
02120     14 13 02 F6 | 	mov	arg01, local06
02124     1A 15 02 F6 | 	mov	arg02, local12
02128     94 E8 B1 FD | 	call	#__system___string_concat
0212c     FD 28 02 F6 | 	mov	local06, result1
02130     18 29 62 FC | 	wrlong	local06, local10
02134                 | '     for j=i+1 to k: lparts(j)=lparts(j+1): next j  
02134     10 3B 02 F6 | 	mov	local15, local02
02138     01 3A 06 F1 | 	add	local15, #1
0213c     1F 4F 02 F6 | 	mov	local25, local17
02140     01 4E 06 F1 | 	add	local25, #1
02144     97 3C 48 FB | 	callpa	#(@LR__0114-@LR__0113)>>2,fcache_load_ptr_
02148                 | LR__0113
02148     27 3B 52 F2 | 	cmps	local15, local25 wc
0214c     70 00 90 3D |  if_ae	jmp	#LR__0115
02150     1D 27 02 F6 | 	mov	local05, local15
02154     01 26 06 F1 | 	add	local05, #1
02158     03 26 66 F0 | 	shl	local05, #3
0215c     35 00 00 FF 
02160     0C E4 05 F1 | 	add	objptr, ##27148
02164     F2 26 02 F1 | 	add	local05, objptr
02168     13 25 02 FB | 	rdlong	local04, local05
0216c     1D 29 02 F6 | 	mov	local06, local15
02170     01 28 06 F1 | 	add	local06, #1
02174     03 28 66 F0 | 	shl	local06, #3
02178     F2 28 02 F1 | 	add	local06, objptr
0217c     04 28 06 F1 | 	add	local06, #4
02180     14 23 02 FB | 	rdlong	local03, local06
02184     1D 29 02 F6 | 	mov	local06, local15
02188     03 28 66 F0 | 	shl	local06, #3
0218c     F2 34 02 F6 | 	mov	local12, objptr
02190     F2 28 02 F1 | 	add	local06, objptr
02194     14 25 62 FC | 	wrlong	local04, local06
02198     1D 33 02 F6 | 	mov	local11, local15
0219c     19 37 02 F6 | 	mov	local13, local11
021a0     03 36 66 F0 | 	shl	local13, #3
021a4     F2 36 02 F1 | 	add	local13, objptr
021a8     04 36 06 F1 | 	add	local13, #4
021ac     1B 23 62 FC | 	wrlong	local03, local13
021b0     01 3A 06 F1 | 	add	local15, #1
021b4     35 00 00 FF 
021b8     0C E4 85 F1 | 	sub	objptr, ##27148
021bc     88 FF 9F FD | 	jmp	#LR__0113
021c0                 | LR__0114
021c0                 | LR__0115
021c0     01 20 86 F1 | 	sub	local02, #1
021c4     01 3E 86 F1 | 	sub	local17, #1
021c8                 | LR__0116
021c8     01 20 06 F1 | 	add	local02, #1
021cc     1F 21 52 F2 | 	cmps	local02, local17 wc
021d0     34 FE 9F CD |  if_b	jmp	#LR__0110
021d4     00 20 06 F6 | 	mov	local02, #0
021d8                 | '  
021d8                 | ' ' 1g: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
021d8                 | '  
021d8                 | ' i=0 
021d8                 | ' do
021d8                 | LR__0117
021d8     10 31 02 F6 | 	mov	local10, local02
021dc     03 30 66 F0 | 	shl	local10, #3
021e0     35 00 00 FF 
021e4     0C E4 05 F1 | 	add	objptr, ##27148
021e8     F2 30 02 F1 | 	add	local10, objptr
021ec     18 51 02 FB | 	rdlong	local26, local10
021f0     10 31 02 F6 | 	mov	local10, local02
021f4     01 30 06 F1 | 	add	local10, #1
021f8     03 30 66 F0 | 	shl	local10, #3
021fc     F2 30 02 F1 | 	add	local10, objptr
02200     18 53 02 FB | 	rdlong	local27, local10
02204                 | '   s1$=lparts(i).part$ : s2$=lparts(i+1).part$
02204                 | '   if ((s1$=">" orelse s1$="<" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
02204     81 01 00 FF 
02208     5B 14 06 F6 | 	mov	arg02, ##@LR__5067
0220c     28 13 02 F6 | 	mov	arg01, local26
02210     35 00 00 FF 
02214     0C E4 85 F1 | 	sub	objptr, ##27148
02218     70 E7 B1 FD | 	call	#__system___string_cmp
0221c     00 FA 0D F2 | 	cmp	result1, #0 wz
02220     A8 00 90 AD |  if_e	jmp	#LR__0118
02224     81 01 00 FF 
02228     5D 14 06 F6 | 	mov	arg02, ##@LR__5068
0222c     28 13 02 F6 | 	mov	arg01, local26
02230     58 E7 B1 FD | 	call	#__system___string_cmp
02234     FD 22 0A F6 | 	mov	local03, result1 wz
02238     90 00 90 AD |  if_e	jmp	#LR__0118
0223c     81 01 00 FF 
02240     5F 28 06 F6 | 	mov	local06, ##@LR__5069
02244     28 13 02 F6 | 	mov	arg01, local26
02248     14 15 02 F6 | 	mov	arg02, local06
0224c     3C E7 B1 FD | 	call	#__system___string_cmp
02250     00 FA 0D F2 | 	cmp	result1, #0 wz
02254     74 00 90 AD |  if_e	jmp	#LR__0118
02258     81 01 00 FF 
0225c     61 34 06 F6 | 	mov	local12, ##@LR__5070
02260     28 13 02 F6 | 	mov	arg01, local26
02264     1A 15 02 F6 | 	mov	arg02, local12
02268     20 E7 B1 FD | 	call	#__system___string_cmp
0226c     00 FA 0D F2 | 	cmp	result1, #0 wz
02270     58 00 90 AD |  if_e	jmp	#LR__0118
02274     81 01 00 FF 
02278     63 32 06 F6 | 	mov	local11, ##@LR__5071
0227c     19 35 02 F6 | 	mov	local12, local11
02280     28 13 02 F6 | 	mov	arg01, local26
02284     1A 15 02 F6 | 	mov	arg02, local12
02288     00 E7 B1 FD | 	call	#__system___string_cmp
0228c     FD 28 0A F6 | 	mov	local06, result1 wz
02290     38 00 90 AD |  if_e	jmp	#LR__0118
02294     81 01 00 FF 
02298     65 32 06 F6 | 	mov	local11, ##@LR__5072
0229c     28 13 02 F6 | 	mov	arg01, local26
022a0     19 15 02 F6 | 	mov	arg02, local11
022a4     E4 E6 B1 FD | 	call	#__system___string_cmp
022a8     FD 34 0A F6 | 	mov	local12, result1 wz
022ac     1C 00 90 AD |  if_e	jmp	#LR__0118
022b0     81 01 00 FF 
022b4     67 38 06 F6 | 	mov	local14, ##@LR__5073
022b8     28 13 02 F6 | 	mov	arg01, local26
022bc     1C 15 02 F6 | 	mov	arg02, local14
022c0     C8 E6 B1 FD | 	call	#__system___string_cmp
022c4     FD 32 0A F6 | 	mov	local11, result1 wz
022c8     20 00 90 5D |  if_ne	jmp	#LR__0119
022cc                 | LR__0118
022cc     81 01 00 FF 
022d0     69 54 06 F6 | 	mov	local28, ##@LR__5074
022d4     2A 37 02 F6 | 	mov	local13, local28
022d8     29 13 02 F6 | 	mov	arg01, local27
022dc     1B 15 02 F6 | 	mov	arg02, local13
022e0     A8 E6 B1 FD | 	call	#__system___string_cmp
022e4     FD 38 0A F6 | 	mov	local14, result1 wz
022e8     B8 00 90 AD |  if_e	jmp	#LR__0122
022ec                 | LR__0119
022ec     81 01 00 FF 
022f0     6B 54 06 F6 | 	mov	local28, ##@LR__5075
022f4     28 13 02 F6 | 	mov	arg01, local26
022f8     2A 15 02 F6 | 	mov	arg02, local28
022fc     8C E6 B1 FD | 	call	#__system___string_cmp
02300     FD 36 0A F6 | 	mov	local13, result1 wz
02304     20 00 90 5D |  if_ne	jmp	#LR__0120
02308     81 01 00 FF 
0230c     6D 4A 06 F6 | 	mov	local23, ##@LR__5076
02310     25 49 02 F6 | 	mov	local22, local23
02314     29 13 02 F6 | 	mov	arg01, local27
02318     24 15 02 F6 | 	mov	arg02, local22
0231c     6C E6 B1 FD | 	call	#__system___string_cmp
02320     FD 54 0A F6 | 	mov	local28, result1 wz
02324     7C 00 90 AD |  if_e	jmp	#LR__0122
02328                 | LR__0120
02328     81 01 00 FF 
0232c     6F 4A 06 F6 | 	mov	local23, ##@LR__5077
02330     28 13 02 F6 | 	mov	arg01, local26
02334     25 15 02 F6 | 	mov	arg02, local23
02338     50 E6 B1 FD | 	call	#__system___string_cmp
0233c     FD 48 0A F6 | 	mov	local22, result1 wz
02340     20 00 90 5D |  if_ne	jmp	#LR__0121
02344     81 01 00 FF 
02348     71 56 06 F6 | 	mov	local29, ##@LR__5078
0234c     2B 4D 02 F6 | 	mov	local24, local29
02350     29 13 02 F6 | 	mov	arg01, local27
02354     26 15 02 F6 | 	mov	arg02, local24
02358     30 E6 B1 FD | 	call	#__system___string_cmp
0235c     FD 4A 0A F6 | 	mov	local23, result1 wz
02360     40 00 90 AD |  if_e	jmp	#LR__0122
02364                 | LR__0121
02364     81 01 00 FF 
02368     73 58 06 F6 | 	mov	local30, ##@LR__5079
0236c     2C 57 02 F6 | 	mov	local29, local30
02370     28 13 02 F6 | 	mov	arg01, local26
02374     2B 15 02 F6 | 	mov	arg02, local29
02378     10 E6 B1 FD | 	call	#__system___string_cmp
0237c     FD 4C 0A F6 | 	mov	local24, result1 wz
02380     F0 00 90 5D |  if_ne	jmp	#LR__0126
02384     81 01 00 FF 
02388     75 5A 06 F6 | 	mov	local31, ##@LR__5080
0238c     2D 59 02 F6 | 	mov	local30, local31
02390     29 13 02 F6 | 	mov	arg01, local27
02394     2C 15 02 F6 | 	mov	arg02, local30
02398     F0 E5 B1 FD | 	call	#__system___string_cmp
0239c     FD 56 0A F6 | 	mov	local29, result1 wz
023a0     D0 00 90 5D |  if_ne	jmp	#LR__0126
023a4                 | LR__0122
023a4     10 31 02 F6 | 	mov	local10, local02
023a8     03 30 66 F0 | 	shl	local10, #3
023ac     35 00 00 FF 
023b0     0C E4 05 F1 | 	add	objptr, ##27148
023b4     F2 30 02 F1 | 	add	local10, objptr
023b8     29 35 02 F6 | 	mov	local12, local27
023bc     28 13 02 F6 | 	mov	arg01, local26
023c0     1A 15 02 F6 | 	mov	arg02, local12
023c4     35 00 00 FF 
023c8     0C E4 85 F1 | 	sub	objptr, ##27148
023cc     F0 E5 B1 FD | 	call	#__system___string_concat
023d0     18 FB 61 FC | 	wrlong	result1, local10
023d4                 | '     lparts(i).part$=s1$+s2$
023d4                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
023d4     10 3B 02 F6 | 	mov	local15, local02
023d8     01 3A 06 F1 | 	add	local15, #1
023dc     1F 5D 02 F6 | 	mov	local32, local17
023e0     01 5C 06 F1 | 	add	local32, #1
023e4     97 42 48 FB | 	callpa	#(@LR__0124-@LR__0123)>>2,fcache_load_ptr_
023e8                 | LR__0123
023e8     2E 3B 52 F2 | 	cmps	local15, local32 wc
023ec     7C 00 90 3D |  if_ae	jmp	#LR__0125
023f0     1D 27 02 F6 | 	mov	local05, local15
023f4     01 26 06 F1 | 	add	local05, #1
023f8     03 26 66 F0 | 	shl	local05, #3
023fc     35 00 00 FF 
02400     0C E4 05 F1 | 	add	objptr, ##27148
02404     F2 26 02 F1 | 	add	local05, objptr
02408     13 25 02 FB | 	rdlong	local04, local05
0240c     1D 29 02 F6 | 	mov	local06, local15
02410     01 28 06 F1 | 	add	local06, #1
02414     03 28 66 F0 | 	shl	local06, #3
02418     F2 28 02 F1 | 	add	local06, objptr
0241c     04 28 06 F1 | 	add	local06, #4
02420     14 23 02 FB | 	rdlong	local03, local06
02424     1D 29 02 F6 | 	mov	local06, local15
02428     03 28 66 F0 | 	shl	local06, #3
0242c     F2 34 02 F6 | 	mov	local12, objptr
02430     F2 28 02 F1 | 	add	local06, objptr
02434     14 25 62 FC | 	wrlong	local04, local06
02438     1D 33 02 F6 | 	mov	local11, local15
0243c     19 39 02 F6 | 	mov	local14, local11
02440     1C 37 02 F6 | 	mov	local13, local14
02444     03 36 66 F0 | 	shl	local13, #3
02448     F2 54 02 F6 | 	mov	local28, objptr
0244c     F2 36 02 F1 | 	add	local13, objptr
02450     04 36 06 F1 | 	add	local13, #4
02454     1B 23 62 FC | 	wrlong	local03, local13
02458     04 36 86 F1 | 	sub	local13, #4
0245c     01 3A 06 F1 | 	add	local15, #1
02460     35 00 00 FF 
02464     0C E4 85 F1 | 	sub	objptr, ##27148
02468     7C FF 9F FD | 	jmp	#LR__0123
0246c                 | LR__0124
0246c                 | LR__0125
0246c     01 20 86 F1 | 	sub	local02, #1
02470     01 3E 86 F1 | 	sub	local17, #1
02474                 | LR__0126
02474     01 20 06 F1 | 	add	local02, #1
02478     1F 21 52 F2 | 	cmps	local02, local17 wc
0247c     58 FD 9F CD |  if_b	jmp	#LR__0117
02480                 | '  
02480                 | ' ' 1h : now remove parts that are spaces
02480                 | ' 
02480                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
02480     00 20 06 F6 | 	mov	local02, #0
02484     1F 5F 02 F6 | 	mov	local33, local17
02488     01 5E 06 F1 | 	add	local33, #1
0248c                 | LR__0127
0248c     2F 21 52 F2 | 	cmps	local02, local33 wc
02490     50 00 90 3D |  if_ae	jmp	#LR__0128
02494     10 31 02 F6 | 	mov	local10, local02
02498     03 30 66 F0 | 	shl	local10, #3
0249c     35 00 00 FF 
024a0     0C E4 05 F1 | 	add	objptr, ##27148
024a4     F2 30 02 F1 | 	add	local10, objptr
024a8     10 35 02 F6 | 	mov	local12, local02
024ac     1A 33 02 F6 | 	mov	local11, local12
024b0     19 39 02 F6 | 	mov	local14, local11
024b4     03 38 66 F0 | 	shl	local14, #3
024b8     F2 36 02 F6 | 	mov	local13, objptr
024bc     F2 38 02 F1 | 	add	local14, objptr
024c0     1C 13 02 FB | 	rdlong	arg01, local14
024c4     35 00 00 FF 
024c8     0C E4 85 F1 | 	sub	objptr, ##27148
024cc     A0 09 B2 FD | 	call	#__system__RTrim_S
024d0     FD 12 02 F6 | 	mov	arg01, result1
024d4     D8 08 B2 FD | 	call	#__system__LTrim_S
024d8     18 FB 61 FC | 	wrlong	result1, local10
024dc     01 20 06 F1 | 	add	local02, #1
024e0     A8 FF 9F FD | 	jmp	#LR__0127
024e4                 | LR__0128
024e4     00 20 06 F6 | 	mov	local02, #0
024e8     97 88 48 FB | 	callpa	#(@LR__0135-@LR__0129)>>2,fcache_load_ptr_
024ec                 | ' i=0
024ec                 | ' do 
024ec                 | LR__0129
024ec                 | '   if len(lparts(i).part$)=0 then 
024ec     10 27 02 F6 | 	mov	local05, local02
024f0     03 26 66 F0 | 	shl	local05, #3
024f4     35 00 00 FF 
024f8     0C E4 05 F1 | 	add	objptr, ##27148
024fc     F2 26 02 F1 | 	add	local05, objptr
02500     13 13 02 FB | 	rdlong	arg01, local05
02504     35 00 00 FF 
02508     0C E4 85 F1 | 	sub	objptr, ##27148
0250c     09 2B 02 F6 | 	mov	local07, arg01
02510                 | LR__0130
02510     15 FB C9 FA | 	rdbyte	result1, local07 wz
02514     01 2A 06 51 |  if_ne	add	local07, #1
02518     F4 FF 9F 5D |  if_ne	jmp	#LR__0130
0251c     09 2B 8A F1 | 	sub	local07, arg01 wz
02520     C4 00 90 5D |  if_ne	jmp	#LR__0134
02524                 | '     if i=k-1 then k-=1  :  exit
02524     1F 25 02 F6 | 	mov	local04, local17
02528     01 24 86 F1 | 	sub	local04, #1
0252c     12 21 0A F2 | 	cmp	local02, local04 wz
02530     01 3E 86 A1 |  if_e	sub	local17, #1
02534     C4 00 90 AD |  if_e	jmp	#LR__0136
02538                 | '     if i<k-1 then 
02538     1F 25 02 F6 | 	mov	local04, local17
0253c     01 24 86 F1 | 	sub	local04, #1
02540     12 21 52 F2 | 	cmps	local02, local04 wc
02544     A0 00 90 3D |  if_ae	jmp	#LR__0133
02548                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
02548     10 3B 02 F6 | 	mov	local15, local02
0254c     1F 61 02 F6 | 	mov	local34, local17
02550     01 60 86 F1 | 	sub	local34, #1
02554                 | LR__0131
02554     30 3B 52 F2 | 	cmps	local15, local34 wc
02558     80 00 90 3D |  if_ae	jmp	#LR__0132
0255c     1D 27 02 F6 | 	mov	local05, local15
02560     01 26 06 F1 | 	add	local05, #1
02564     03 26 66 F0 | 	shl	local05, #3
02568     35 00 00 FF 
0256c     0C E4 05 F1 | 	add	objptr, ##27148
02570     F2 26 02 F1 | 	add	local05, objptr
02574     13 25 02 FB | 	rdlong	local04, local05
02578     1D 29 02 F6 | 	mov	local06, local15
0257c     01 28 06 F1 | 	add	local06, #1
02580     03 28 66 F0 | 	shl	local06, #3
02584     F2 28 02 F1 | 	add	local06, objptr
02588     04 28 06 F1 | 	add	local06, #4
0258c     14 23 02 FB | 	rdlong	local03, local06
02590     1D 31 02 F6 | 	mov	local10, local15
02594     18 29 02 F6 | 	mov	local06, local10
02598     03 28 66 F0 | 	shl	local06, #3
0259c     F2 34 02 F6 | 	mov	local12, objptr
025a0     F2 28 02 F1 | 	add	local06, objptr
025a4     14 25 62 FC | 	wrlong	local04, local06
025a8     1D 33 02 F6 | 	mov	local11, local15
025ac     19 39 02 F6 | 	mov	local14, local11
025b0     1C 37 02 F6 | 	mov	local13, local14
025b4     03 36 66 F0 | 	shl	local13, #3
025b8     F2 54 02 F6 | 	mov	local28, objptr
025bc     F2 36 02 F1 | 	add	local13, objptr
025c0     04 36 06 F1 | 	add	local13, #4
025c4     1B 23 62 FC | 	wrlong	local03, local13
025c8     04 36 86 F1 | 	sub	local13, #4
025cc     01 3A 06 F1 | 	add	local15, #1
025d0     35 00 00 FF 
025d4     0C E4 85 F1 | 	sub	objptr, ##27148
025d8     78 FF 9F FD | 	jmp	#LR__0131
025dc                 | LR__0132
025dc     01 3E 86 F1 | 	sub	local17, #1
025e0                 | '       if i>0 then i-=1 
025e0     01 20 56 F2 | 	cmps	local02, #1 wc
025e4     01 20 86 31 |  if_ae	sub	local02, #1
025e8                 | LR__0133
025e8                 | LR__0134
025e8     01 20 06 F1 | 	add	local02, #1
025ec     1F 25 02 F6 | 	mov	local04, local17
025f0     01 24 86 F1 | 	sub	local04, #1
025f4     12 21 5A F2 | 	cmps	local02, local04 wcz
025f8     F0 FE 9F ED |  if_be	jmp	#LR__0129
025fc                 | LR__0135
025fc                 | LR__0136
025fc                 | ' 
025fc                 | ' ' 1i: lowercase all that is not a string
025fc                 | ' 
025fc                 | ' for j=0 to k-1
025fc     00 3A 06 F6 | 	mov	local15, #0
02600     1F 63 02 F6 | 	mov	local35, local17
02604                 | LR__0137
02604     31 3B 52 F2 | 	cmps	local15, local35 wc
02608     C8 00 90 3D |  if_ae	jmp	#LR__0140
0260c                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
0260c     1D 27 02 F6 | 	mov	local05, local15
02610     03 26 66 F0 | 	shl	local05, #3
02614     35 00 00 FF 
02618     0C E4 05 F1 | 	add	objptr, ##27148
0261c     F2 26 02 F1 | 	add	local05, objptr
02620     13 13 02 FB | 	rdlong	arg01, local05
02624     01 14 06 F6 | 	mov	arg02, #1
02628     35 00 00 FF 
0262c     0C E4 85 F1 | 	sub	objptr, ##27148
02630     AC 03 B2 FD | 	call	#__system__Left_S
02634     FD 12 02 F6 | 	mov	arg01, result1
02638     81 01 00 FF 
0263c     77 14 06 F6 | 	mov	arg02, ##@LR__5081
02640     48 E3 B1 FD | 	call	#__system___string_cmp
02644     00 FA 0D F2 | 	cmp	result1, #0 wz
02648     44 00 90 5D |  if_ne	jmp	#LR__0138
0264c     1D 29 02 F6 | 	mov	local06, local15
02650     03 28 66 F0 | 	shl	local06, #3
02654     35 00 00 FF 
02658     0C E4 05 F1 | 	add	objptr, ##27148
0265c     F2 34 02 F6 | 	mov	local12, objptr
02660     F2 28 02 F1 | 	add	local06, objptr
02664     14 13 02 FB | 	rdlong	arg01, local06
02668     01 14 06 F6 | 	mov	arg02, #1
0266c     35 00 00 FF 
02670     0C E4 85 F1 | 	sub	objptr, ##27148
02674     F0 03 B2 FD | 	call	#__system__Right_S
02678     FD 12 02 F6 | 	mov	arg01, result1
0267c     81 01 00 FF 
02680     79 14 06 F6 | 	mov	arg02, ##@LR__5082
02684     04 E3 B1 FD | 	call	#__system___string_cmp
02688     00 FA 0D F2 | 	cmp	result1, #0 wz
0268c     3C 00 90 AD |  if_e	jmp	#LR__0139
02690                 | LR__0138
02690     1D 31 02 F6 | 	mov	local10, local15
02694     03 30 66 F0 | 	shl	local10, #3
02698     35 00 00 FF 
0269c     0C E4 05 F1 | 	add	objptr, ##27148
026a0     F2 30 02 F1 | 	add	local10, objptr
026a4     1D 33 02 F6 | 	mov	local11, local15
026a8     19 39 02 F6 | 	mov	local14, local11
026ac     03 38 66 F0 | 	shl	local14, #3
026b0     F2 36 02 F6 | 	mov	local13, objptr
026b4     F2 38 02 F1 | 	add	local14, objptr
026b8     1C 13 02 FB | 	rdlong	arg01, local14
026bc     35 00 00 FF 
026c0     0C E4 85 F1 | 	sub	objptr, ##27148
026c4     28 06 B2 FD | 	call	#__system__LCase_S
026c8     18 FB 61 FC | 	wrlong	result1, local10
026cc                 | LR__0139
026cc     01 3A 06 F1 | 	add	local15, #1
026d0     30 FF 9F FD | 	jmp	#LR__0137
026d4                 | LR__0140
026d4                 | ' 
026d4                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
026d4                 | ' 
026d4                 | ' for i=0 to k: lparts(i).token=-1: next i					' initialize all tokens to -1=invalid
026d4     00 20 06 F6 | 	mov	local02, #0
026d8     1F 65 02 F6 | 	mov	local36, local17
026dc     01 64 06 F1 | 	add	local36, #1
026e0     97 1C 48 FB | 	callpa	#(@LR__0142-@LR__0141)>>2,fcache_load_ptr_
026e4                 | LR__0141
026e4     32 21 52 F2 | 	cmps	local02, local36 wc
026e8     30 00 90 3D |  if_ae	jmp	#LR__0143
026ec     10 31 02 F6 | 	mov	local10, local02
026f0     03 30 66 F0 | 	shl	local10, #3
026f4     35 00 00 FF 
026f8     0C E4 05 F1 | 	add	objptr, ##27148
026fc     F2 30 02 F1 | 	add	local10, objptr
02700     04 30 06 F1 | 	add	local10, #4
02704     FF FF FF FF 
02708     18 FF 6B FC | 	wrlong	##-1, local10
0270c     01 20 06 F1 | 	add	local02, #1
02710     35 00 00 FF 
02714     0C E4 85 F1 | 	sub	objptr, ##27148
02718     C8 FF 9F FD | 	jmp	#LR__0141
0271c                 | LR__0142
0271c                 | LR__0143
0271c                 | ' 
0271c                 | ' if isdec(lparts(0).part$) then addptr=1 else addptr=0				' check if the abbreviated command are on the line start, or after linenum, 'then' or 'else'
0271c     35 00 00 FF 
02720     0C E4 05 F1 | 	add	objptr, ##27148
02724     F2 12 02 FB | 	rdlong	arg01, objptr
02728     35 00 00 FF 
0272c     0C E4 85 F1 | 	sub	objptr, ##27148
02730     D4 3C B0 FD | 	call	#_isdec
02734     00 FA 0D F2 | 	cmp	result1, #0 wz
02738     01 66 06 56 |  if_ne	mov	local37, #1
0273c     00 66 06 A6 |  if_e	mov	local37, #0
02740                 | ' if lparts(0).part$="else" then addptr=1 					' else is always the first
02740     35 00 00 FF 
02744     0C E4 05 F1 | 	add	objptr, ##27148
02748     F2 12 02 FB | 	rdlong	arg01, objptr
0274c     35 00 00 FF 
02750     0C E4 85 F1 | 	sub	objptr, ##27148
02754     81 01 00 FF 
02758     7B 14 06 F6 | 	mov	arg02, ##@LR__5083
0275c     2C E2 B1 FD | 	call	#__system___string_cmp
02760     00 FA 0D F2 | 	cmp	result1, #0 wz
02764     01 66 06 A6 |  if_e	mov	local37, #1
02768     00 20 06 F6 | 	mov	local02, #0
0276c                 | ' i=0 : do 
0276c                 | LR__0144
0276c                 | '   if lparts(i).part$="then" then exit loop 					' try to find 'then'
0276c     10 27 02 F6 | 	mov	local05, local02
02770     03 26 66 F0 | 	shl	local05, #3
02774     35 00 00 FF 
02778     0C E4 05 F1 | 	add	objptr, ##27148
0277c     F2 26 02 F1 | 	add	local05, objptr
02780     13 13 02 FB | 	rdlong	arg01, local05
02784     81 01 00 FF 
02788     80 14 06 F6 | 	mov	arg02, ##@LR__5084
0278c     35 00 00 FF 
02790     0C E4 85 F1 | 	sub	objptr, ##27148
02794     F4 E1 B1 FD | 	call	#__system___string_cmp
02798     00 FA 0D F2 | 	cmp	result1, #0 wz
0279c     0C 00 90 AD |  if_e	jmp	#LR__0145
027a0     01 20 06 F1 | 	add	local02, #1
027a4     1F 21 5A F2 | 	cmps	local02, local17 wcz
027a8     C0 FF 9F ED |  if_be	jmp	#LR__0144
027ac                 | LR__0145
027ac                 | ' if i<k then addptr=i+1	 							' then found
027ac     1F 21 52 F2 | 	cmps	local02, local17 wc
027b0     10 67 02 C6 |  if_b	mov	local37, local02
027b4     01 66 06 C1 |  if_b	add	local37, #1
027b8     35 00 00 FF 
027bc     0C E4 05 F1 | 	add	objptr, ##27148
027c0     33 29 02 F6 | 	mov	local06, local37
027c4     03 28 66 F0 | 	shl	local06, #3
027c8     F2 34 02 F6 | 	mov	local12, objptr
027cc     F2 28 02 F1 | 	add	local06, objptr
027d0     14 15 02 FB | 	rdlong	arg02, local06
027d4     81 01 00 FF 
027d8     85 16 06 F6 | 	mov	arg03, ##@LR__5085
027dc     01 12 06 F6 | 	mov	arg01, #1
027e0     35 00 00 FF 
027e4     0C E4 85 F1 | 	sub	objptr, ##27148
027e8     3C 07 B2 FD | 	call	#__system__Instr
027ec     FD 68 02 F6 | 	mov	local38, result1
027f0                 | ' lp$=lparts(addptr).part$ 
027f0                 | ' dot=instr(1,lparts(addptr).part$,".")						' find a dot	
027f0                 | ' if dot>0 andalso dot<len(lparts(addptr).part$) then 				' split the part
027f0     01 68 56 F2 | 	cmps	local38, #1 wc
027f4     68 01 90 CD |  if_b	jmp	#LR__0152
027f8     33 27 02 F6 | 	mov	local05, local37
027fc     03 26 66 F0 | 	shl	local05, #3
02800     35 00 00 FF 
02804     0C E4 05 F1 | 	add	objptr, ##27148
02808     F2 26 02 F1 | 	add	local05, objptr
0280c     13 13 02 FB | 	rdlong	arg01, local05
02810     35 00 00 FF 
02814     0C E4 85 F1 | 	sub	objptr, ##27148
02818     09 2B 02 F6 | 	mov	local07, arg01
0281c     97 06 48 FB | 	callpa	#(@LR__0147-@LR__0146)>>2,fcache_load_ptr_
02820                 | LR__0146
02820     15 FB C9 FA | 	rdbyte	result1, local07 wz
02824     01 2A 06 51 |  if_ne	add	local07, #1
02828     F4 FF 9F 5D |  if_ne	jmp	#LR__0146
0282c                 | LR__0147
0282c     09 2B 82 F1 | 	sub	local07, arg01
02830     15 69 52 F2 | 	cmps	local38, local07 wc
02834     28 01 90 3D |  if_ae	jmp	#LR__0152
02838     01 3E 06 F1 | 	add	local17, #1
0283c                 | '   k+=1
0283c                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
0283c     1F 21 02 F6 | 	mov	local02, local17
02840     33 6B 02 F6 | 	mov	local39, local37
02844     01 6A 06 F1 | 	add	local39, #1
02848     35 00 00 FF 
0284c     0C E4 05 F1 | 	add	objptr, ##27148
02850     97 2E 48 FB | 	callpa	#(@LR__0149-@LR__0148)>>2,fcache_load_ptr_
02854                 | LR__0148
02854     10 27 02 F6 | 	mov	local05, local02
02858     01 26 86 F1 | 	sub	local05, #1
0285c     03 26 66 F0 | 	shl	local05, #3
02860     F2 26 02 F1 | 	add	local05, objptr
02864     13 25 02 FB | 	rdlong	local04, local05
02868     10 29 02 F6 | 	mov	local06, local02
0286c     01 28 86 F1 | 	sub	local06, #1
02870     03 28 66 F0 | 	shl	local06, #3
02874     F2 28 02 F1 | 	add	local06, objptr
02878     04 28 06 F1 | 	add	local06, #4
0287c     14 23 02 FB | 	rdlong	local03, local06
02880     10 29 02 F6 | 	mov	local06, local02
02884     03 28 66 F0 | 	shl	local06, #3
02888     F2 28 02 F1 | 	add	local06, objptr
0288c     14 25 62 FC | 	wrlong	local04, local06
02890     10 37 02 F6 | 	mov	local13, local02
02894     03 36 66 F0 | 	shl	local13, #3
02898     F2 36 02 F1 | 	add	local13, objptr
0289c     04 36 06 F1 | 	add	local13, #4
028a0     1B 23 62 FC | 	wrlong	local03, local13
028a4     01 20 86 F1 | 	sub	local02, #1
028a8     35 21 52 F2 | 	cmps	local02, local39 wc
028ac     A4 FF 9F 3D |  if_ae	jmp	#LR__0148
028b0                 | LR__0149
028b0     33 31 02 F6 | 	mov	local10, local37
028b4     01 30 06 F1 | 	add	local10, #1
028b8     03 30 66 F0 | 	shl	local10, #3
028bc     F2 30 02 F1 | 	add	local10, objptr
028c0     33 39 02 F6 | 	mov	local14, local37
028c4     03 38 66 F0 | 	shl	local14, #3
028c8     F2 38 02 F1 | 	add	local14, objptr
028cc     1C 29 02 FB | 	rdlong	local06, local14
028d0     33 55 02 F6 | 	mov	local28, local37
028d4     2A 49 02 F6 | 	mov	local22, local28
028d8     03 48 66 F0 | 	shl	local22, #3
028dc     F2 4A 02 F6 | 	mov	local23, objptr
028e0     F2 48 02 F1 | 	add	local22, objptr
028e4     24 13 02 FB | 	rdlong	arg01, local22
028e8     35 00 00 FF 
028ec     0C E4 85 F1 | 	sub	objptr, ##27148
028f0     09 2B 02 F6 | 	mov	local07, arg01
028f4     97 06 48 FB | 	callpa	#(@LR__0151-@LR__0150)>>2,fcache_load_ptr_
028f8                 | LR__0150
028f8     15 FB C9 FA | 	rdbyte	result1, local07 wz
028fc     01 2A 06 51 |  if_ne	add	local07, #1
02900     F4 FF 9F 5D |  if_ne	jmp	#LR__0150
02904                 | LR__0151
02904     09 2B 82 F1 | 	sub	local07, arg01
02908     15 15 02 F6 | 	mov	arg02, local07
0290c     34 15 82 F1 | 	sub	arg02, local38
02910     14 13 02 F6 | 	mov	arg01, local06
02914     50 01 B2 FD | 	call	#__system__Right_S
02918     18 FB 61 FC | 	wrlong	result1, local10
0291c     33 31 02 F6 | 	mov	local10, local37
02920     03 30 66 F0 | 	shl	local10, #3
02924     35 00 00 FF 
02928     0C E4 05 F1 | 	add	objptr, ##27148
0292c     F2 30 02 F1 | 	add	local10, objptr
02930     33 33 02 F6 | 	mov	local11, local37
02934     19 39 02 F6 | 	mov	local14, local11
02938     03 38 66 F0 | 	shl	local14, #3
0293c     F2 36 02 F6 | 	mov	local13, objptr
02940     F2 38 02 F1 | 	add	local14, objptr
02944     1C 13 02 FB | 	rdlong	arg01, local14
02948     34 35 02 F6 | 	mov	local12, local38
0294c     1A 15 02 F6 | 	mov	arg02, local12
02950     35 00 00 FF 
02954     0C E4 85 F1 | 	sub	objptr, ##27148
02958     84 00 B2 FD | 	call	#__system__Left_S
0295c     18 FB 61 FC | 	wrlong	result1, local10
02960                 | LR__0152
02960                 | ' if left$(lparts(addptr).part$,1)="?" andalso len(lparts(addptr).part$)>1 then ' ? is abbreviation of print, but it has no dots, so it has to be treated here
02960     33 27 02 F6 | 	mov	local05, local37
02964     03 26 66 F0 | 	shl	local05, #3
02968     35 00 00 FF 
0296c     0C E4 05 F1 | 	add	objptr, ##27148
02970     F2 26 02 F1 | 	add	local05, objptr
02974     13 13 02 FB | 	rdlong	arg01, local05
02978     01 14 06 F6 | 	mov	arg02, #1
0297c     35 00 00 FF 
02980     0C E4 85 F1 | 	sub	objptr, ##27148
02984     58 00 B2 FD | 	call	#__system__Left_S
02988     FD 12 02 F6 | 	mov	arg01, result1
0298c     81 01 00 FF 
02990     87 14 06 F6 | 	mov	arg02, ##@LR__5086
02994     F4 DF B1 FD | 	call	#__system___string_cmp
02998     00 FA 0D F2 | 	cmp	result1, #0 wz
0299c     60 01 90 5D |  if_ne	jmp	#LR__0159
029a0     33 29 02 F6 | 	mov	local06, local37
029a4     03 28 66 F0 | 	shl	local06, #3
029a8     35 00 00 FF 
029ac     0C E4 05 F1 | 	add	objptr, ##27148
029b0     F2 34 02 F6 | 	mov	local12, objptr
029b4     F2 28 02 F1 | 	add	local06, objptr
029b8     14 13 02 FB | 	rdlong	arg01, local06
029bc     35 00 00 FF 
029c0     0C E4 85 F1 | 	sub	objptr, ##27148
029c4     09 2B 02 F6 | 	mov	local07, arg01
029c8     97 06 48 FB | 	callpa	#(@LR__0154-@LR__0153)>>2,fcache_load_ptr_
029cc                 | LR__0153
029cc     15 FB C9 FA | 	rdbyte	result1, local07 wz
029d0     01 2A 06 51 |  if_ne	add	local07, #1
029d4     F4 FF 9F 5D |  if_ne	jmp	#LR__0153
029d8                 | LR__0154
029d8     09 2B 82 F1 | 	sub	local07, arg01
029dc     02 2A 56 F2 | 	cmps	local07, #2 wc
029e0     1C 01 90 CD |  if_b	jmp	#LR__0159
029e4     01 3E 06 F1 | 	add	local17, #1
029e8                 | '   k+=1
029e8                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
029e8     1F 21 02 F6 | 	mov	local02, local17
029ec     33 6D 02 F6 | 	mov	local40, local37
029f0     01 6C 06 F1 | 	add	local40, #1
029f4     35 00 00 FF 
029f8     0C E4 05 F1 | 	add	objptr, ##27148
029fc     97 2E 48 FB | 	callpa	#(@LR__0156-@LR__0155)>>2,fcache_load_ptr_
02a00                 | LR__0155
02a00     10 27 02 F6 | 	mov	local05, local02
02a04     01 26 86 F1 | 	sub	local05, #1
02a08     03 26 66 F0 | 	shl	local05, #3
02a0c     F2 26 02 F1 | 	add	local05, objptr
02a10     13 25 02 FB | 	rdlong	local04, local05
02a14     10 29 02 F6 | 	mov	local06, local02
02a18     01 28 86 F1 | 	sub	local06, #1
02a1c     03 28 66 F0 | 	shl	local06, #3
02a20     F2 28 02 F1 | 	add	local06, objptr
02a24     04 28 06 F1 | 	add	local06, #4
02a28     14 23 02 FB | 	rdlong	local03, local06
02a2c     10 29 02 F6 | 	mov	local06, local02
02a30     03 28 66 F0 | 	shl	local06, #3
02a34     F2 28 02 F1 | 	add	local06, objptr
02a38     14 25 62 FC | 	wrlong	local04, local06
02a3c     10 37 02 F6 | 	mov	local13, local02
02a40     03 36 66 F0 | 	shl	local13, #3
02a44     F2 36 02 F1 | 	add	local13, objptr
02a48     04 36 06 F1 | 	add	local13, #4
02a4c     1B 23 62 FC | 	wrlong	local03, local13
02a50     01 20 86 F1 | 	sub	local02, #1
02a54     36 21 52 F2 | 	cmps	local02, local40 wc
02a58     A4 FF 9F 3D |  if_ae	jmp	#LR__0155
02a5c                 | LR__0156
02a5c     33 31 02 F6 | 	mov	local10, local37
02a60     01 30 06 F1 | 	add	local10, #1
02a64     03 30 66 F0 | 	shl	local10, #3
02a68     F2 30 02 F1 | 	add	local10, objptr
02a6c     33 39 02 F6 | 	mov	local14, local37
02a70     03 38 66 F0 | 	shl	local14, #3
02a74     F2 38 02 F1 | 	add	local14, objptr
02a78     1C 29 02 FB | 	rdlong	local06, local14
02a7c     33 37 02 F6 | 	mov	local13, local37
02a80     1B 55 02 F6 | 	mov	local28, local13
02a84     2A 49 02 F6 | 	mov	local22, local28
02a88     03 48 66 F0 | 	shl	local22, #3
02a8c     F2 4A 02 F6 | 	mov	local23, objptr
02a90     F2 48 02 F1 | 	add	local22, objptr
02a94     24 13 02 FB | 	rdlong	arg01, local22
02a98     35 00 00 FF 
02a9c     0C E4 85 F1 | 	sub	objptr, ##27148
02aa0     09 2B 02 F6 | 	mov	local07, arg01
02aa4     97 06 48 FB | 	callpa	#(@LR__0158-@LR__0157)>>2,fcache_load_ptr_
02aa8                 | LR__0157
02aa8     15 FB C9 FA | 	rdbyte	result1, local07 wz
02aac     01 2A 06 51 |  if_ne	add	local07, #1
02ab0     F4 FF 9F 5D |  if_ne	jmp	#LR__0157
02ab4                 | LR__0158
02ab4     09 2B 82 F1 | 	sub	local07, arg01
02ab8     15 39 02 F6 | 	mov	local14, local07
02abc     1C 33 02 F6 | 	mov	local11, local14
02ac0     01 32 86 F1 | 	sub	local11, #1
02ac4     19 35 02 F6 | 	mov	local12, local11
02ac8     14 13 02 F6 | 	mov	arg01, local06
02acc     1A 15 02 F6 | 	mov	arg02, local12
02ad0     94 FF B1 FD | 	call	#__system__Right_S
02ad4     18 FB 61 FC | 	wrlong	result1, local10
02ad8     33 31 02 F6 | 	mov	local10, local37
02adc     03 30 66 F0 | 	shl	local10, #3
02ae0     35 00 00 FF 
02ae4     0C E4 05 F1 | 	add	objptr, ##27148
02ae8     F2 30 02 F1 | 	add	local10, objptr
02aec     81 01 00 FF 
02af0     89 28 06 F6 | 	mov	local06, ##@LR__5087
02af4     18 29 62 FC | 	wrlong	local06, local10
02af8     35 00 00 FF 
02afc     0C E4 85 F1 | 	sub	objptr, ##27148
02b00                 | LR__0159
02b00     33 31 02 F6 | 	mov	local10, local37
02b04     03 30 66 F0 | 	shl	local10, #3
02b08     35 00 00 FF 
02b0c     0C E4 05 F1 | 	add	objptr, ##27148
02b10     F2 30 02 F1 | 	add	local10, objptr
02b14     18 6F 02 FB | 	rdlong	local41, local10
02b18                 | ' 
02b18                 | ' lp$=lparts(addptr).part$ 
02b18                 | ' 
02b18                 | ' ' process mouse/cursor/click on/off
02b18                 | ' 
02b18                 | ' if (lp$="mouse" orelse lp$="cursor" orelse lp$="click") then 
02b18     81 01 00 FF 
02b1c     8B 14 06 F6 | 	mov	arg02, ##@LR__5088
02b20     37 13 02 F6 | 	mov	arg01, local41
02b24     35 00 00 FF 
02b28     0C E4 85 F1 | 	sub	objptr, ##27148
02b2c     5C DE B1 FD | 	call	#__system___string_cmp
02b30     00 FA 0D F2 | 	cmp	result1, #0 wz
02b34     30 00 90 AD |  if_e	jmp	#LR__0160
02b38     81 01 00 FF 
02b3c     91 14 06 F6 | 	mov	arg02, ##@LR__5089
02b40     37 13 02 F6 | 	mov	arg01, local41
02b44     44 DE B1 FD | 	call	#__system___string_cmp
02b48     00 FA 0D F2 | 	cmp	result1, #0 wz
02b4c     18 00 90 AD |  if_e	jmp	#LR__0160
02b50     81 01 00 FF 
02b54     98 14 06 F6 | 	mov	arg02, ##@LR__5090
02b58     37 13 02 F6 | 	mov	arg01, local41
02b5c     2C DE B1 FD | 	call	#__system___string_cmp
02b60     00 FA 0D F2 | 	cmp	result1, #0 wz
02b64     E0 00 90 5D |  if_ne	jmp	#LR__0163
02b68                 | LR__0160
02b68                 | '   if lparts(addptr+1).part$="on" then lparts(addptr+1).part$="1" :lparts(2).token=token_decimal
02b68     33 27 02 F6 | 	mov	local05, local37
02b6c     01 26 06 F1 | 	add	local05, #1
02b70     03 26 66 F0 | 	shl	local05, #3
02b74     35 00 00 FF 
02b78     0C E4 05 F1 | 	add	objptr, ##27148
02b7c     F2 26 02 F1 | 	add	local05, objptr
02b80     13 13 02 FB | 	rdlong	arg01, local05
02b84     81 01 00 FF 
02b88     9E 14 06 F6 | 	mov	arg02, ##@LR__5091
02b8c     35 00 00 FF 
02b90     0C E4 85 F1 | 	sub	objptr, ##27148
02b94     F4 DD B1 FD | 	call	#__system___string_cmp
02b98     00 FA 0D F2 | 	cmp	result1, #0 wz
02b9c     38 00 90 5D |  if_ne	jmp	#LR__0161
02ba0     33 31 02 F6 | 	mov	local10, local37
02ba4     01 30 06 F1 | 	add	local10, #1
02ba8     03 30 66 F0 | 	shl	local10, #3
02bac     35 00 00 FF 
02bb0     0C E4 05 F1 | 	add	objptr, ##27148
02bb4     F2 30 02 F1 | 	add	local10, objptr
02bb8     81 01 00 FF 
02bbc     A1 28 06 F6 | 	mov	local06, ##@LR__5092
02bc0     18 29 62 FC | 	wrlong	local06, local10
02bc4     14 E4 05 F1 | 	add	objptr, #20
02bc8     01 00 80 FF 
02bcc     F2 00 68 FC | 	wrlong	##512, objptr
02bd0     35 00 00 FF 
02bd4     20 E4 85 F1 | 	sub	objptr, ##27168
02bd8                 | LR__0161
02bd8                 | '   if lparts(addptr+1).part$="off" then lparts(addptr+1).part$="0" :lparts(2).token=token_decimal
02bd8     33 27 02 F6 | 	mov	local05, local37
02bdc     01 26 06 F1 | 	add	local05, #1
02be0     03 26 66 F0 | 	shl	local05, #3
02be4     35 00 00 FF 
02be8     0C E4 05 F1 | 	add	objptr, ##27148
02bec     F2 26 02 F1 | 	add	local05, objptr
02bf0     13 13 02 FB | 	rdlong	arg01, local05
02bf4     81 01 00 FF 
02bf8     A3 14 06 F6 | 	mov	arg02, ##@LR__5093
02bfc     35 00 00 FF 
02c00     0C E4 85 F1 | 	sub	objptr, ##27148
02c04     84 DD B1 FD | 	call	#__system___string_cmp
02c08     00 FA 0D F2 | 	cmp	result1, #0 wz
02c0c     38 00 90 5D |  if_ne	jmp	#LR__0162
02c10     33 31 02 F6 | 	mov	local10, local37
02c14     01 30 06 F1 | 	add	local10, #1
02c18     03 30 66 F0 | 	shl	local10, #3
02c1c     35 00 00 FF 
02c20     0C E4 05 F1 | 	add	objptr, ##27148
02c24     F2 30 02 F1 | 	add	local10, objptr
02c28     81 01 00 FF 
02c2c     A7 28 06 F6 | 	mov	local06, ##@LR__5094
02c30     18 29 62 FC | 	wrlong	local06, local10
02c34     14 E4 05 F1 | 	add	objptr, #20
02c38     01 00 80 FF 
02c3c     F2 00 68 FC | 	wrlong	##512, objptr
02c40     35 00 00 FF 
02c44     20 E4 85 F1 | 	sub	objptr, ##27168
02c48                 | LR__0162
02c48                 | LR__0163
02c48                 | ' 		
02c48                 | ' ' process text constant for 'mode' - TO DO all predefined constants should have # before				
02c48                 | ' 
02c48                 | ' if (lp$="mode" orelse lp$="m.") then 
02c48     81 01 00 FF 
02c4c     A9 14 06 F6 | 	mov	arg02, ##@LR__5095
02c50     37 13 02 F6 | 	mov	arg01, local41
02c54     34 DD B1 FD | 	call	#__system___string_cmp
02c58     00 FA 0D F2 | 	cmp	result1, #0 wz
02c5c     18 00 90 AD |  if_e	jmp	#LR__0164
02c60     81 01 00 FF 
02c64     AE 14 06 F6 | 	mov	arg02, ##@LR__5096
02c68     37 13 02 F6 | 	mov	arg01, local41
02c6c     1C DD B1 FD | 	call	#__system___string_cmp
02c70     00 FA 0D F2 | 	cmp	result1, #0 wz
02c74     F4 01 90 5D |  if_ne	jmp	#LR__0170
02c78                 | LR__0164
02c78                 | '   if lparts(addptr+1).part$="atari" then lparts(addptr+1).part$="0"       
02c78     33 27 02 F6 | 	mov	local05, local37
02c7c     01 26 06 F1 | 	add	local05, #1
02c80     03 26 66 F0 | 	shl	local05, #3
02c84     35 00 00 FF 
02c88     0C E4 05 F1 | 	add	objptr, ##27148
02c8c     F2 26 02 F1 | 	add	local05, objptr
02c90     13 13 02 FB | 	rdlong	arg01, local05
02c94     81 01 00 FF 
02c98     B1 14 06 F6 | 	mov	arg02, ##@LR__5097
02c9c     35 00 00 FF 
02ca0     0C E4 85 F1 | 	sub	objptr, ##27148
02ca4     E4 DC B1 FD | 	call	#__system___string_cmp
02ca8     00 FA 0D F2 | 	cmp	result1, #0 wz
02cac     2C 00 90 5D |  if_ne	jmp	#LR__0165
02cb0     33 31 02 F6 | 	mov	local10, local37
02cb4     01 30 06 F1 | 	add	local10, #1
02cb8     03 30 66 F0 | 	shl	local10, #3
02cbc     35 00 00 FF 
02cc0     0C E4 05 F1 | 	add	objptr, ##27148
02cc4     F2 30 02 F1 | 	add	local10, objptr
02cc8     81 01 00 FF 
02ccc     B7 28 06 F6 | 	mov	local06, ##@LR__5098
02cd0     18 29 62 FC | 	wrlong	local06, local10
02cd4     35 00 00 FF 
02cd8     0C E4 85 F1 | 	sub	objptr, ##27148
02cdc                 | LR__0165
02cdc                 | '   if lparts(addptr+1).part$="pc_amber" then lparts(addptr+1).part$="1"  
02cdc     33 27 02 F6 | 	mov	local05, local37
02ce0     01 26 06 F1 | 	add	local05, #1
02ce4     03 26 66 F0 | 	shl	local05, #3
02ce8     35 00 00 FF 
02cec     0C E4 05 F1 | 	add	objptr, ##27148
02cf0     F2 26 02 F1 | 	add	local05, objptr
02cf4     13 13 02 FB | 	rdlong	arg01, local05
02cf8     81 01 00 FF 
02cfc     B9 14 06 F6 | 	mov	arg02, ##@LR__5099
02d00     35 00 00 FF 
02d04     0C E4 85 F1 | 	sub	objptr, ##27148
02d08     80 DC B1 FD | 	call	#__system___string_cmp
02d0c     00 FA 0D F2 | 	cmp	result1, #0 wz
02d10     2C 00 90 5D |  if_ne	jmp	#LR__0166
02d14     33 31 02 F6 | 	mov	local10, local37
02d18     01 30 06 F1 | 	add	local10, #1
02d1c     03 30 66 F0 | 	shl	local10, #3
02d20     35 00 00 FF 
02d24     0C E4 05 F1 | 	add	objptr, ##27148
02d28     F2 30 02 F1 | 	add	local10, objptr
02d2c     81 01 00 FF 
02d30     C2 28 06 F6 | 	mov	local06, ##@LR__5100
02d34     18 29 62 FC | 	wrlong	local06, local10
02d38     35 00 00 FF 
02d3c     0C E4 85 F1 | 	sub	objptr, ##27148
02d40                 | LR__0166
02d40                 | '   if lparts(addptr+1).part$="pc_green" then lparts(addptr+1).part$="2"  
02d40     33 27 02 F6 | 	mov	local05, local37
02d44     01 26 06 F1 | 	add	local05, #1
02d48     03 26 66 F0 | 	shl	local05, #3
02d4c     35 00 00 FF 
02d50     0C E4 05 F1 | 	add	objptr, ##27148
02d54     F2 26 02 F1 | 	add	local05, objptr
02d58     13 13 02 FB | 	rdlong	arg01, local05
02d5c     81 01 00 FF 
02d60     C4 14 06 F6 | 	mov	arg02, ##@LR__5101
02d64     35 00 00 FF 
02d68     0C E4 85 F1 | 	sub	objptr, ##27148
02d6c     1C DC B1 FD | 	call	#__system___string_cmp
02d70     00 FA 0D F2 | 	cmp	result1, #0 wz
02d74     2C 00 90 5D |  if_ne	jmp	#LR__0167
02d78     33 31 02 F6 | 	mov	local10, local37
02d7c     01 30 06 F1 | 	add	local10, #1
02d80     03 30 66 F0 | 	shl	local10, #3
02d84     35 00 00 FF 
02d88     0C E4 05 F1 | 	add	objptr, ##27148
02d8c     F2 30 02 F1 | 	add	local10, objptr
02d90     81 01 00 FF 
02d94     CD 28 06 F6 | 	mov	local06, ##@LR__5102
02d98     18 29 62 FC | 	wrlong	local06, local10
02d9c     35 00 00 FF 
02da0     0C E4 85 F1 | 	sub	objptr, ##27148
02da4                 | LR__0167
02da4                 | '   if lparts(addptr+1).part$="pc_white" then lparts(addptr+1).part$="3"  
02da4     33 27 02 F6 | 	mov	local05, local37
02da8     01 26 06 F1 | 	add	local05, #1
02dac     03 26 66 F0 | 	shl	local05, #3
02db0     35 00 00 FF 
02db4     0C E4 05 F1 | 	add	objptr, ##27148
02db8     F2 26 02 F1 | 	add	local05, objptr
02dbc     13 13 02 FB | 	rdlong	arg01, local05
02dc0     81 01 00 FF 
02dc4     CF 14 06 F6 | 	mov	arg02, ##@LR__5103
02dc8     35 00 00 FF 
02dcc     0C E4 85 F1 | 	sub	objptr, ##27148
02dd0     B8 DB B1 FD | 	call	#__system___string_cmp
02dd4     00 FA 0D F2 | 	cmp	result1, #0 wz
02dd8     2C 00 90 5D |  if_ne	jmp	#LR__0168
02ddc     33 31 02 F6 | 	mov	local10, local37
02de0     01 30 06 F1 | 	add	local10, #1
02de4     03 30 66 F0 | 	shl	local10, #3
02de8     35 00 00 FF 
02dec     0C E4 05 F1 | 	add	objptr, ##27148
02df0     F2 30 02 F1 | 	add	local10, objptr
02df4     81 01 00 FF 
02df8     D8 28 06 F6 | 	mov	local06, ##@LR__5104
02dfc     18 29 62 FC | 	wrlong	local06, local10
02e00     35 00 00 FF 
02e04     0C E4 85 F1 | 	sub	objptr, ##27148
02e08                 | LR__0168
02e08                 | '   if lparts(addptr+1).part$="st" then lparts(addptr+1).part$="4"  
02e08     33 27 02 F6 | 	mov	local05, local37
02e0c     01 26 06 F1 | 	add	local05, #1
02e10     03 26 66 F0 | 	shl	local05, #3
02e14     35 00 00 FF 
02e18     0C E4 05 F1 | 	add	objptr, ##27148
02e1c     F2 26 02 F1 | 	add	local05, objptr
02e20     13 13 02 FB | 	rdlong	arg01, local05
02e24     81 01 00 FF 
02e28     DA 14 06 F6 | 	mov	arg02, ##@LR__5105
02e2c     35 00 00 FF 
02e30     0C E4 85 F1 | 	sub	objptr, ##27148
02e34     54 DB B1 FD | 	call	#__system___string_cmp
02e38     00 FA 0D F2 | 	cmp	result1, #0 wz
02e3c     2C 00 90 5D |  if_ne	jmp	#LR__0169
02e40     33 31 02 F6 | 	mov	local10, local37
02e44     01 30 06 F1 | 	add	local10, #1
02e48     03 30 66 F0 | 	shl	local10, #3
02e4c     35 00 00 FF 
02e50     0C E4 05 F1 | 	add	objptr, ##27148
02e54     F2 30 02 F1 | 	add	local10, objptr
02e58     81 01 00 FF 
02e5c     DD 28 06 F6 | 	mov	local06, ##@LR__5106
02e60     18 29 62 FC | 	wrlong	local06, local10
02e64     35 00 00 FF 
02e68     0C E4 85 F1 | 	sub	objptr, ##27148
02e6c                 | LR__0169
02e6c                 | LR__0170
02e6c                 | ' 
02e6c                 | ' ' find part types 
02e6c                 | ' 
02e6c                 | ' for i=0 to k-1
02e6c     00 20 06 F6 | 	mov	local02, #0
02e70     1F 71 02 F6 | 	mov	local42, local17
02e74                 | LR__0171
02e74     38 21 52 F2 | 	cmps	local02, local42 wc
02e78     A4 07 90 3D |  if_ae	jmp	#LR__0183
02e7c     10 31 02 F6 | 	mov	local10, local02
02e80     03 30 66 F0 | 	shl	local10, #3
02e84     35 00 00 FF 
02e88     0C E4 05 F1 | 	add	objptr, ##27148
02e8c     F2 30 02 F1 | 	add	local10, objptr
02e90     10 33 02 F6 | 	mov	local11, local02
02e94     19 39 02 F6 | 	mov	local14, local11
02e98     1C 37 02 F6 | 	mov	local13, local14
02e9c     03 36 66 F0 | 	shl	local13, #3
02ea0     F2 36 02 F1 | 	add	local13, objptr
02ea4     1B 13 02 FB | 	rdlong	arg01, local13
02ea8     35 00 00 FF 
02eac     0C E4 85 F1 | 	sub	objptr, ##27148
02eb0     70 15 B0 FD | 	call	#_isseparator
02eb4     FD FA E1 F8 | 	getbyte	result1, result1, #0
02eb8     04 30 06 F1 | 	add	local10, #4
02ebc     18 FB 61 FC | 	wrlong	result1, local10
02ec0                 | ' lparts(i).token=isseparator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
02ec0     10 31 02 F6 | 	mov	local10, local02
02ec4     03 30 66 F0 | 	shl	local10, #3
02ec8     35 00 00 FF 
02ecc     0C E4 05 F1 | 	add	objptr, ##27148
02ed0     F2 30 02 F1 | 	add	local10, objptr
02ed4     04 30 06 F1 | 	add	local10, #4
02ed8     18 35 02 FB | 	rdlong	local12, local10
02edc     01 34 56 F2 | 	cmps	local12, #1 wc
02ee0     35 00 00 FF 
02ee4     0C E4 85 F1 | 	sub	objptr, ##27148
02ee8     2C 07 90 3D |  if_ae	jmp	#LR__0182
02eec     10 31 02 F6 | 	mov	local10, local02
02ef0     03 30 66 F0 | 	shl	local10, #3
02ef4     35 00 00 FF 
02ef8     0C E4 05 F1 | 	add	objptr, ##27148
02efc     F2 30 02 F1 | 	add	local10, objptr
02f00     10 33 02 F6 | 	mov	local11, local02
02f04     19 39 02 F6 | 	mov	local14, local11
02f08     1C 37 02 F6 | 	mov	local13, local14
02f0c     03 36 66 F0 | 	shl	local13, #3
02f10     F2 36 02 F1 | 	add	local13, objptr
02f14     1B 13 02 FB | 	rdlong	arg01, local13
02f18     35 00 00 FF 
02f1c     0C E4 85 F1 | 	sub	objptr, ##27148
02f20     4C 0D B0 FD | 	call	#_isoperator
02f24     FD FA E1 F8 | 	getbyte	result1, result1, #0
02f28     04 30 06 F1 | 	add	local10, #4
02f2c     18 FB 61 FC | 	wrlong	result1, local10
02f30                 | ' lparts(i).token=isoperator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
02f30     10 31 02 F6 | 	mov	local10, local02
02f34     03 30 66 F0 | 	shl	local10, #3
02f38     35 00 00 FF 
02f3c     0C E4 05 F1 | 	add	objptr, ##27148
02f40     F2 30 02 F1 | 	add	local10, objptr
02f44     04 30 06 F1 | 	add	local10, #4
02f48     18 35 02 FB | 	rdlong	local12, local10
02f4c     01 34 56 F2 | 	cmps	local12, #1 wc
02f50     35 00 00 FF 
02f54     0C E4 85 F1 | 	sub	objptr, ##27148
02f58     BC 06 90 3D |  if_ae	jmp	#LR__0182
02f5c     10 31 02 F6 | 	mov	local10, local02
02f60     03 30 66 F0 | 	shl	local10, #3
02f64     35 00 00 FF 
02f68     0C E4 05 F1 | 	add	objptr, ##27148
02f6c     F2 30 02 F1 | 	add	local10, objptr
02f70     10 33 02 F6 | 	mov	local11, local02
02f74     19 39 02 F6 | 	mov	local14, local11
02f78     1C 37 02 F6 | 	mov	local13, local14
02f7c     03 36 66 F0 | 	shl	local13, #3
02f80     F2 36 02 F1 | 	add	local13, objptr
02f84     1B 13 02 FB | 	rdlong	arg01, local13
02f88     35 00 00 FF 
02f8c     0C E4 85 F1 | 	sub	objptr, ##27148
02f90                 | ' 
02f90                 | ' select case s
02f90     81 01 00 FF 
02f94     B2 15 06 F6 | 	mov	arg02, ##@LR__5183
02f98     F0 D9 B1 FD | 	call	#__system___string_cmp
02f9c     00 FA 0D F2 | 	cmp	result1, #0 wz
02fa0     1B FA 05 A6 |  if_e	mov	result1, #27
02fa4     00 FA 05 56 |  if_ne	mov	result1, #0
02fa8     FD FA E1 F8 | 	getbyte	result1, result1, #0
02fac     04 30 06 F1 | 	add	local10, #4
02fb0     18 FB 61 FC | 	wrlong	result1, local10
02fb4                 | ' lparts(i).token=isassign(lparts(i).part$) 	: if lparts(i).token>0 then goto 102
02fb4     10 31 02 F6 | 	mov	local10, local02
02fb8     03 30 66 F0 | 	shl	local10, #3
02fbc     35 00 00 FF 
02fc0     0C E4 05 F1 | 	add	objptr, ##27148
02fc4     F2 30 02 F1 | 	add	local10, objptr
02fc8     04 30 06 F1 | 	add	local10, #4
02fcc     18 35 02 FB | 	rdlong	local12, local10
02fd0     01 34 56 F2 | 	cmps	local12, #1 wc
02fd4     35 00 00 FF 
02fd8     0C E4 85 F1 | 	sub	objptr, ##27148
02fdc     38 06 90 3D |  if_ae	jmp	#LR__0182
02fe0     10 31 02 F6 | 	mov	local10, local02
02fe4     03 30 66 F0 | 	shl	local10, #3
02fe8     35 00 00 FF 
02fec     0C E4 05 F1 | 	add	objptr, ##27148
02ff0     F2 30 02 F1 | 	add	local10, objptr
02ff4     10 33 02 F6 | 	mov	local11, local02
02ff8     19 39 02 F6 | 	mov	local14, local11
02ffc     1C 37 02 F6 | 	mov	local13, local14
03000     03 36 66 F0 | 	shl	local13, #3
03004     F2 36 02 F1 | 	add	local13, objptr
03008     1B 13 02 FB | 	rdlong	arg01, local13
0300c     35 00 00 FF 
03010     0C E4 85 F1 | 	sub	objptr, ##27148
03014     0C 16 B0 FD | 	call	#_iscommand
03018     FD FA E1 F8 | 	getbyte	result1, result1, #0
0301c     04 30 06 F1 | 	add	local10, #4
03020     18 FB 61 FC | 	wrlong	result1, local10
03024                 | ' lparts(i).token=iscommand(lparts(i).part$)	: if lparts(i).token>0 then goto 102
03024     10 31 02 F6 | 	mov	local10, local02
03028     03 30 66 F0 | 	shl	local10, #3
0302c     35 00 00 FF 
03030     0C E4 05 F1 | 	add	objptr, ##27148
03034     F2 30 02 F1 | 	add	local10, objptr
03038     04 30 06 F1 | 	add	local10, #4
0303c     18 35 02 FB | 	rdlong	local12, local10
03040     01 34 56 F2 | 	cmps	local12, #1 wc
03044     35 00 00 FF 
03048     0C E4 85 F1 | 	sub	objptr, ##27148
0304c     C8 05 90 3D |  if_ae	jmp	#LR__0182
03050     10 31 02 F6 | 	mov	local10, local02
03054     03 30 66 F0 | 	shl	local10, #3
03058     35 00 00 FF 
0305c     0C E4 05 F1 | 	add	objptr, ##27148
03060     F2 30 02 F1 | 	add	local10, objptr
03064     10 33 02 F6 | 	mov	local11, local02
03068     19 39 02 F6 | 	mov	local14, local11
0306c     1C 37 02 F6 | 	mov	local13, local14
03070     03 36 66 F0 | 	shl	local13, #3
03074     F2 54 02 F6 | 	mov	local28, objptr
03078     F2 36 02 F1 | 	add	local13, objptr
0307c     1B 13 02 FB | 	rdlong	arg01, local13
03080     35 00 00 FF 
03084     0C E4 85 F1 | 	sub	objptr, ##27148
03088     D8 24 B0 FD | 	call	#_isfunction
0308c     FD FA E1 F8 | 	getbyte	result1, result1, #0
03090     04 30 06 F1 | 	add	local10, #4
03094     18 FB 61 FC | 	wrlong	result1, local10
03098                 | ' lparts(i).token=isfunction(lparts(i).part$)	: if lparts(i).token>0 then goto 102
03098     10 31 02 F6 | 	mov	local10, local02
0309c     03 30 66 F0 | 	shl	local10, #3
030a0     35 00 00 FF 
030a4     0C E4 05 F1 | 	add	objptr, ##27148
030a8     F2 30 02 F1 | 	add	local10, objptr
030ac     04 30 06 F1 | 	add	local10, #4
030b0     18 35 02 FB | 	rdlong	local12, local10
030b4     01 34 56 F2 | 	cmps	local12, #1 wc
030b8     35 00 00 FF 
030bc     0C E4 85 F1 | 	sub	objptr, ##27148
030c0     54 05 90 3D |  if_ae	jmp	#LR__0182
030c4     10 31 02 F6 | 	mov	local10, local02
030c8     03 30 66 F0 | 	shl	local10, #3
030cc     35 00 00 FF 
030d0     0C E4 05 F1 | 	add	objptr, ##27148
030d4     F2 30 02 F1 | 	add	local10, objptr
030d8     10 33 02 F6 | 	mov	local11, local02
030dc     19 39 02 F6 | 	mov	local14, local11
030e0     03 38 66 F0 | 	shl	local14, #3
030e4     F2 36 02 F6 | 	mov	local13, objptr
030e8     F2 38 02 F1 | 	add	local14, objptr
030ec     1C 13 02 FB | 	rdlong	arg01, local14
030f0     35 00 00 FF 
030f4     0C E4 85 F1 | 	sub	objptr, ##27148
030f8     BC 0F B0 FD | 	call	#_isnotename
030fc     04 30 06 F1 | 	add	local10, #4
03100     18 FB 61 FC | 	wrlong	result1, local10
03104                 | ' lparts(i).token=isnotename(lparts(i).part$) 
03104                 | ' if lparts(i).token>0 then 
03104     10 31 02 F6 | 	mov	local10, local02
03108     03 30 66 F0 | 	shl	local10, #3
0310c     35 00 00 FF 
03110     0C E4 05 F1 | 	add	objptr, ##27148
03114     F2 30 02 F1 | 	add	local10, objptr
03118     04 30 06 F1 | 	add	local10, #4
0311c     18 29 02 FB | 	rdlong	local06, local10
03120     01 28 56 F2 | 	cmps	local06, #1 wc
03124     35 00 00 FF 
03128     0C E4 85 F1 | 	sub	objptr, ##27148
0312c     8C 00 90 CD |  if_b	jmp	#LR__0172
03130     10 27 02 F6 | 	mov	local05, local02
03134     03 26 66 F0 | 	shl	local05, #3
03138     35 00 00 FF 
0313c     0C E4 05 F1 | 	add	objptr, ##27148
03140     F2 26 02 F1 | 	add	local05, objptr
03144     04 26 06 F1 | 	add	local05, #4
03148     13 35 02 FB | 	rdlong	local12, local05
0314c     1A 13 02 F6 | 	mov	arg01, local12
03150     35 00 00 FF 
03154     0C E4 85 F1 | 	sub	objptr, ##27148
03158     D0 33 B0 FD | 	call	#_getnoteval
0315c     FD 72 02 F6 | 	mov	local43, result1
03160     10 31 02 F6 | 	mov	local10, local02
03164     03 30 66 F0 | 	shl	local10, #3
03168     35 00 00 FF 
0316c     0C E4 05 F1 | 	add	objptr, ##27148
03170     F2 30 02 F1 | 	add	local10, objptr
03174     39 13 02 F6 | 	mov	arg01, local43
03178     35 00 00 FF 
0317c     0C E4 85 F1 | 	sub	objptr, ##27148
03180     54 FA B1 FD | 	call	#__system__str_S
03184     18 FB 61 FC | 	wrlong	result1, local10
03188     10 25 02 F6 | 	mov	local04, local02
0318c     12 23 02 F6 | 	mov	local03, local04
03190     11 31 02 F6 | 	mov	local10, local03
03194     03 30 66 F0 | 	shl	local10, #3
03198     35 00 00 FF 
0319c     0C E4 05 F1 | 	add	objptr, ##27148
031a0     F2 30 02 F1 | 	add	local10, objptr
031a4     04 30 06 F1 | 	add	local10, #4
031a8     01 00 80 FF 
031ac     18 05 68 FC | 	wrlong	##514, local10
031b0     35 00 00 FF 
031b4     0C E4 85 F1 | 	sub	objptr, ##27148
031b8     5C 04 90 FD | 	jmp	#LR__0182
031bc                 | LR__0172
031bc     10 31 02 F6 | 	mov	local10, local02
031c0     03 30 66 F0 | 	shl	local10, #3
031c4     35 00 00 FF 
031c8     0C E4 05 F1 | 	add	objptr, ##27148
031cc     F2 30 02 F1 | 	add	local10, objptr
031d0     10 39 02 F6 | 	mov	local14, local02
031d4     03 38 66 F0 | 	shl	local14, #3
031d8     F2 38 02 F1 | 	add	local14, objptr
031dc     1C 13 02 FB | 	rdlong	arg01, local14
031e0     35 00 00 FF 
031e4     0C E4 85 F1 | 	sub	objptr, ##27148
031e8     64 0D B0 FD | 	call	#_ischannel
031ec     04 30 06 F1 | 	add	local10, #4
031f0     18 FB 61 FC | 	wrlong	result1, local10
031f4                 | ' 
031f4                 | ' ' if it is #channel, make it a number from 0 to 9 while setting a token_channel
031f4                 | ' 
031f4                 | ' lparts(i).token=ischannel(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=right$(lparts(i).part$,1) : lparts(i).token=token_channel : goto 102
031f4     10 31 02 F6 | 	mov	local10, local02
031f8     03 30 66 F0 | 	shl	local10, #3
031fc     35 00 00 FF 
03200     0C E4 05 F1 | 	add	objptr, ##27148
03204     F2 30 02 F1 | 	add	local10, objptr
03208     04 30 06 F1 | 	add	local10, #4
0320c     18 29 02 FB | 	rdlong	local06, local10
03210     01 28 56 F2 | 	cmps	local06, #1 wc
03214     35 00 00 FF 
03218     0C E4 85 F1 | 	sub	objptr, ##27148
0321c     74 00 90 CD |  if_b	jmp	#LR__0173
03220     10 31 02 F6 | 	mov	local10, local02
03224     03 30 66 F0 | 	shl	local10, #3
03228     35 00 00 FF 
0322c     0C E4 05 F1 | 	add	objptr, ##27148
03230     F2 30 02 F1 | 	add	local10, objptr
03234     10 33 02 F6 | 	mov	local11, local02
03238     19 39 02 F6 | 	mov	local14, local11
0323c     03 38 66 F0 | 	shl	local14, #3
03240     F2 36 02 F6 | 	mov	local13, objptr
03244     F2 38 02 F1 | 	add	local14, objptr
03248     1C 13 02 FB | 	rdlong	arg01, local14
0324c     01 34 06 F6 | 	mov	local12, #1
03250     01 14 06 F6 | 	mov	arg02, #1
03254     35 00 00 FF 
03258     0C E4 85 F1 | 	sub	objptr, ##27148
0325c     08 F8 B1 FD | 	call	#__system__Right_S
03260     18 FB 61 FC | 	wrlong	result1, local10
03264     10 25 02 F6 | 	mov	local04, local02
03268     12 23 02 F6 | 	mov	local03, local04
0326c     11 31 02 F6 | 	mov	local10, local03
03270     03 30 66 F0 | 	shl	local10, #3
03274     35 00 00 FF 
03278     0C E4 05 F1 | 	add	objptr, ##27148
0327c     F2 30 02 F1 | 	add	local10, objptr
03280     04 30 06 F1 | 	add	local10, #4
03284     18 59 68 FC | 	wrlong	#44, local10
03288     35 00 00 FF 
0328c     0C E4 85 F1 | 	sub	objptr, ##27148
03290     84 03 90 FD | 	jmp	#LR__0182
03294                 | LR__0173
03294     10 31 02 F6 | 	mov	local10, local02
03298     03 30 66 F0 | 	shl	local10, #3
0329c     35 00 00 FF 
032a0     0C E4 05 F1 | 	add	objptr, ##27148
032a4     F2 30 02 F1 | 	add	local10, objptr
032a8     10 33 02 F6 | 	mov	local11, local02
032ac     19 39 02 F6 | 	mov	local14, local11
032b0     03 38 66 F0 | 	shl	local14, #3
032b4     F2 36 02 F6 | 	mov	local13, objptr
032b8     F2 38 02 F1 | 	add	local14, objptr
032bc     1C 13 02 FB | 	rdlong	arg01, local14
032c0     35 00 00 FF 
032c4     0C E4 85 F1 | 	sub	objptr, ##27148
032c8     6C 0D B0 FD | 	call	#_isconstant
032cc     04 30 06 F1 | 	add	local10, #4
032d0     18 FB 61 FC | 	wrlong	result1, local10
032d4                 | ' lparts(i).token=isconstant(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=str$(lparts(i).token) : lparts(i).token=token_integer : goto 102
032d4     10 31 02 F6 | 	mov	local10, local02
032d8     03 30 66 F0 | 	shl	local10, #3
032dc     35 00 00 FF 
032e0     0C E4 05 F1 | 	add	objptr, ##27148
032e4     F2 30 02 F1 | 	add	local10, objptr
032e8     04 30 06 F1 | 	add	local10, #4
032ec     18 35 02 FB | 	rdlong	local12, local10
032f0     01 34 56 F2 | 	cmps	local12, #1 wc
032f4     35 00 00 FF 
032f8     0C E4 85 F1 | 	sub	objptr, ##27148
032fc     94 00 90 CD |  if_b	jmp	#LR__0174
03300     10 31 02 F6 | 	mov	local10, local02
03304     03 30 66 F0 | 	shl	local10, #3
03308     35 00 00 FF 
0330c     0C E4 05 F1 | 	add	objptr, ##27148
03310     F2 30 02 F1 | 	add	local10, objptr
03314     10 35 02 F6 | 	mov	local12, local02
03318     1A 33 02 F6 | 	mov	local11, local12
0331c     19 39 02 F6 | 	mov	local14, local11
03320     03 38 66 F0 | 	shl	local14, #3
03324     F2 36 02 F6 | 	mov	local13, objptr
03328     F2 38 02 F1 | 	add	local14, objptr
0332c     04 38 06 F1 | 	add	local14, #4
03330     1C 13 02 FB | 	rdlong	arg01, local14
03334     04 38 86 F1 | 	sub	local14, #4
03338     35 00 00 FF 
0333c     0C E4 85 F1 | 	sub	objptr, ##27148
03340     09 13 52 F6 | 	abs	arg01, arg01 wc
03344     1F 74 C6 C9 |  if_b	decod	local44, #31
03348     00 74 06 36 |  if_ae	mov	local44, #0
0334c     C4 FD B1 FD | 	call	#__system___float_fromuns
03350     3A FB 61 F5 | 	xor	result1, local44
03354     FD 12 02 F6 | 	mov	arg01, result1
03358     7C F8 B1 FD | 	call	#__system__str_S
0335c     18 FB 61 FC | 	wrlong	result1, local10
03360     10 25 02 F6 | 	mov	local04, local02
03364     12 23 02 F6 | 	mov	local03, local04
03368     11 31 02 F6 | 	mov	local10, local03
0336c     03 30 66 F0 | 	shl	local10, #3
03370     35 00 00 FF 
03374     0C E4 05 F1 | 	add	objptr, ##27148
03378     F2 30 02 F1 | 	add	local10, objptr
0337c     04 30 06 F1 | 	add	local10, #4
03380     01 00 80 FF 
03384     18 03 68 FC | 	wrlong	##513, local10
03388     35 00 00 FF 
0338c     0C E4 85 F1 | 	sub	objptr, ##27148
03390     84 02 90 FD | 	jmp	#LR__0182
03394                 | LR__0174
03394     10 27 02 F6 | 	mov	local05, local02
03398     03 26 66 F0 | 	shl	local05, #3
0339c     35 00 00 FF 
033a0     0C E4 05 F1 | 	add	objptr, ##27148
033a4     F2 26 02 F1 | 	add	local05, objptr
033a8     13 13 02 FB | 	rdlong	arg01, local05
033ac     35 00 00 FF 
033b0     0C E4 85 F1 | 	sub	objptr, ##27148
033b4     C0 29 B0 FD | 	call	#_isnum
033b8     FD 76 02 F6 | 	mov	local45, result1
033bc     10 27 02 F6 | 	mov	local05, local02
033c0     03 26 66 F0 | 	shl	local05, #3
033c4     35 00 00 FF 
033c8     0C E4 05 F1 | 	add	objptr, ##27148
033cc     F2 26 02 F1 | 	add	local05, objptr
033d0     13 13 02 FB | 	rdlong	arg01, local05
033d4     35 00 00 FF 
033d8     0C E4 85 F1 | 	sub	objptr, ##27148
033dc     84 2D B0 FD | 	call	#_isint
033e0     FD 78 02 F6 | 	mov	local46, result1
033e4     10 27 02 F6 | 	mov	local05, local02
033e8     03 26 66 F0 | 	shl	local05, #3
033ec     35 00 00 FF 
033f0     0C E4 05 F1 | 	add	objptr, ##27148
033f4     F2 26 02 F1 | 	add	local05, objptr
033f8     13 13 02 FB | 	rdlong	arg01, local05
033fc     35 00 00 FF 
03400     0C E4 85 F1 | 	sub	objptr, ##27148
03404     00 30 B0 FD | 	call	#_isdec
03408     FD 7A 02 F6 | 	mov	local47, result1
0340c                 | ' 
0340c                 | ' b1=isnum(lparts(i).part$) : b2=isint(lparts(i).part$) : b3=isdec(lparts(i).part$)
0340c                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal 			: goto 102 	' pure decimal for line num
0340c     00 76 0E F2 | 	cmp	local45, #0 wz
03410     00 78 0E 52 |  if_ne	cmp	local46, #0 wz
03414     00 7A 0E 52 |  if_ne	cmp	local47, #0 wz
03418     34 00 90 AD |  if_e	jmp	#LR__0175
0341c     10 25 02 F6 | 	mov	local04, local02
03420     12 23 02 F6 | 	mov	local03, local04
03424     11 31 02 F6 | 	mov	local10, local03
03428     03 30 66 F0 | 	shl	local10, #3
0342c     35 00 00 FF 
03430     0C E4 05 F1 | 	add	objptr, ##27148
03434     F2 30 02 F1 | 	add	local10, objptr
03438     04 30 06 F1 | 	add	local10, #4
0343c     01 00 80 FF 
03440     18 01 68 FC | 	wrlong	##512, local10
03444     35 00 00 FF 
03448     0C E4 85 F1 | 	sub	objptr, ##27148
0344c     C8 01 90 FD | 	jmp	#LR__0182
03450                 | LR__0175
03450                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer 		: goto 102 	' integer
03450     00 76 0E F2 | 	cmp	local45, #0 wz
03454     00 78 0E 52 |  if_ne	cmp	local46, #0 wz
03458     3D 25 22 56 |  if_ne	not	local04, local47
0345c     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
03460     34 00 90 AD |  if_e	jmp	#LR__0176
03464     10 25 02 F6 | 	mov	local04, local02
03468     12 23 02 F6 | 	mov	local03, local04
0346c     11 31 02 F6 | 	mov	local10, local03
03470     03 30 66 F0 | 	shl	local10, #3
03474     35 00 00 FF 
03478     0C E4 05 F1 | 	add	objptr, ##27148
0347c     F2 30 02 F1 | 	add	local10, objptr
03480     04 30 06 F1 | 	add	local10, #4
03484     01 00 80 FF 
03488     18 03 68 FC | 	wrlong	##513, local10
0348c     35 00 00 FF 
03490     0C E4 85 F1 | 	sub	objptr, ##27148
03494     80 01 90 FD | 	jmp	#LR__0182
03498                 | LR__0176
03498                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float 	: goto 102 	' float
03498     00 76 0E F2 | 	cmp	local45, #0 wz
0349c     3C 25 22 56 |  if_ne	not	local04, local46
034a0     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
034a4     3D 23 22 56 |  if_ne	not	local03, local47
034a8     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
034ac     34 00 90 AD |  if_e	jmp	#LR__0177
034b0     10 25 02 F6 | 	mov	local04, local02
034b4     12 23 02 F6 | 	mov	local03, local04
034b8     11 31 02 F6 | 	mov	local10, local03
034bc     03 30 66 F0 | 	shl	local10, #3
034c0     35 00 00 FF 
034c4     0C E4 05 F1 | 	add	objptr, ##27148
034c8     F2 30 02 F1 | 	add	local10, objptr
034cc     04 30 06 F1 | 	add	local10, #4
034d0     01 00 80 FF 
034d4     18 05 68 FC | 	wrlong	##514, local10
034d8     35 00 00 FF 
034dc     0C E4 85 F1 | 	sub	objptr, ##27148
034e0     34 01 90 FD | 	jmp	#LR__0182
034e4                 | LR__0177
034e4                 | ' 
034e4                 | ' if isstring(lparts(i).part$) then 
034e4     10 27 02 F6 | 	mov	local05, local02
034e8     03 26 66 F0 | 	shl	local05, #3
034ec     35 00 00 FF 
034f0     0C E4 05 F1 | 	add	objptr, ##27148
034f4     F2 26 02 F1 | 	add	local05, objptr
034f8     13 13 02 FB | 	rdlong	arg01, local05
034fc     35 00 00 FF 
03500     0C E4 85 F1 | 	sub	objptr, ##27148
03504     C0 2F B0 FD | 	call	#_isstring
03508     00 FA 0D F2 | 	cmp	result1, #0 wz
0350c     A8 00 90 AD |  if_e	jmp	#LR__0180
03510     10 31 02 F6 | 	mov	local10, local02
03514     03 30 66 F0 | 	shl	local10, #3
03518     35 00 00 FF 
0351c     0C E4 05 F1 | 	add	objptr, ##27148
03520     F2 30 02 F1 | 	add	local10, objptr
03524     04 30 06 F1 | 	add	local10, #4
03528     01 00 80 FF 
0352c     18 07 68 FC | 	wrlong	##515, local10
03530     10 25 02 F6 | 	mov	local04, local02
03534     12 23 02 F6 | 	mov	local03, local04
03538     11 31 02 F6 | 	mov	local10, local03
0353c     03 30 66 F0 | 	shl	local10, #3
03540     F2 30 02 F1 | 	add	local10, objptr
03544     10 39 02 F6 | 	mov	local14, local02
03548     03 38 66 F0 | 	shl	local14, #3
0354c     F2 38 02 F1 | 	add	local14, objptr
03550     1C 29 02 FB | 	rdlong	local06, local14
03554     02 34 06 F6 | 	mov	local12, #2
03558     10 49 02 F6 | 	mov	local22, local02
0355c     24 4B 02 F6 | 	mov	local23, local22
03560     03 4A 66 F0 | 	shl	local23, #3
03564     F2 4C 02 F6 | 	mov	local24, objptr
03568     F2 4A 02 F1 | 	add	local23, objptr
0356c     25 13 02 FB | 	rdlong	arg01, local23
03570     35 00 00 FF 
03574     0C E4 85 F1 | 	sub	objptr, ##27148
03578     09 2B 02 F6 | 	mov	local07, arg01
0357c     97 06 48 FB | 	callpa	#(@LR__0179-@LR__0178)>>2,fcache_load_ptr_
03580                 | LR__0178
03580     15 FB C9 FA | 	rdbyte	result1, local07 wz
03584     01 2A 06 51 |  if_ne	add	local07, #1
03588     F4 FF 9F 5D |  if_ne	jmp	#LR__0178
0358c                 | LR__0179
0358c     09 2B 82 F1 | 	sub	local07, arg01
03590     15 37 02 F6 | 	mov	local13, local07
03594     1B 39 02 F6 | 	mov	local14, local13
03598     02 38 86 F1 | 	sub	local14, #2
0359c     1C 33 02 F6 | 	mov	local11, local14
035a0     14 13 02 F6 | 	mov	arg01, local06
035a4     1A 15 02 F6 | 	mov	arg02, local12
035a8     19 17 02 F6 | 	mov	arg03, local11
035ac     48 F5 B1 FD | 	call	#__system__Mid_S
035b0     18 FB 61 FC | 	wrlong	result1, local10
035b4     60 00 90 FD | 	jmp	#LR__0182
035b8                 | LR__0180
035b8                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
035b8     10 23 02 F6 | 	mov	local03, local02
035bc     11 27 02 F6 | 	mov	local05, local03
035c0     03 26 66 F0 | 	shl	local05, #3
035c4     35 00 00 FF 
035c8     0C E4 05 F1 | 	add	objptr, ##27148
035cc     F2 26 02 F1 | 	add	local05, objptr
035d0     13 13 02 FB | 	rdlong	arg01, local05
035d4     35 00 00 FF 
035d8     0C E4 85 F1 | 	sub	objptr, ##27148
035dc     24 25 B0 FD | 	call	#_isname
035e0     FD 24 0A F6 | 	mov	local04, result1 wz
035e4     30 00 90 AD |  if_e	jmp	#LR__0181
035e8     10 25 02 F6 | 	mov	local04, local02
035ec     12 23 02 F6 | 	mov	local03, local04
035f0     11 31 02 F6 | 	mov	local10, local03
035f4     03 30 66 F0 | 	shl	local10, #3
035f8     35 00 00 FF 
035fc     0C E4 05 F1 | 	add	objptr, ##27148
03600     F2 30 02 F1 | 	add	local10, objptr
03604     04 30 06 F1 | 	add	local10, #4
03608     01 00 80 FF 
0360c     18 09 68 FC | 	wrlong	##516, local10
03610     35 00 00 FF 
03614     0C E4 85 F1 | 	sub	objptr, ##27148
03618                 | LR__0181
03618                 | LR__0182
03618     01 20 06 F1 | 	add	local02, #1
0361c     54 F8 9F FD | 	jmp	#LR__0171
03620                 | LR__0183
03620     1F 31 02 F6 | 	mov	local10, local17
03624     03 30 66 F0 | 	shl	local10, #3
03628     35 00 00 FF 
0362c     0C E4 05 F1 | 	add	objptr, ##27148
03630     F2 30 02 F1 | 	add	local10, objptr
03634     04 30 06 F1 | 	add	local10, #4
03638     18 FD 6B FC | 	wrlong	#510, local10
0363c     1F 31 02 F6 | 	mov	local10, local17
03640     03 30 66 F0 | 	shl	local10, #3
03644     F2 26 02 F6 | 	mov	local05, objptr
03648     F2 30 02 F1 | 	add	local10, objptr
0364c     81 01 00 FF 
03650     DF 28 06 F6 | 	mov	local06, ##@LR__5107
03654     18 29 62 FC | 	wrlong	local06, local10
03658     10 00 00 FF 
0365c     54 E4 05 F1 | 	add	objptr, ##8276
03660     F2 3E 62 FC | 	wrlong	local17, objptr
03664     45 00 00 FF 
03668     60 E4 85 F1 | 	sub	objptr, ##35424
0366c                 | ' 
0366c                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
0366c                 | ' 
0366c                 | ' ' process the case when simple load or save is called without "". This cannot be done earlier, as tokens has to be known                                    					 
0366c                 | '  
0366c                 | ' if (lp$="load" orelse lp$="save" orelse lp$="brun" orelse lp$="run" orelse lp$="lo." orelse lp$="s." orelse lp$="br." orelse lp$="enter" orelse lp$="e.") andalso lparts(addptr+1).token=token_name then lparts(addptr+1).token=token_string
0366c     81 01 00 FF 
03670     E0 30 06 F6 | 	mov	local10, ##@LR__5108
03674     37 13 02 F6 | 	mov	arg01, local41
03678     18 15 02 F6 | 	mov	arg02, local10
0367c     0C D3 B1 FD | 	call	#__system___string_cmp
03680     00 FA 0D F2 | 	cmp	result1, #0 wz
03684     FC 00 90 AD |  if_e	jmp	#LR__0184
03688     81 01 00 FF 
0368c     E5 26 06 F6 | 	mov	local05, ##@LR__5109
03690     13 31 02 F6 | 	mov	local10, local05
03694     37 13 02 F6 | 	mov	arg01, local41
03698     18 15 02 F6 | 	mov	arg02, local10
0369c     EC D2 B1 FD | 	call	#__system___string_cmp
036a0     00 FA 0D F2 | 	cmp	result1, #0 wz
036a4     DC 00 90 AD |  if_e	jmp	#LR__0184
036a8     81 01 00 FF 
036ac     EA 28 06 F6 | 	mov	local06, ##@LR__5110
036b0     14 27 02 F6 | 	mov	local05, local06
036b4     37 13 02 F6 | 	mov	arg01, local41
036b8     13 15 02 F6 | 	mov	arg02, local05
036bc     CC D2 B1 FD | 	call	#__system___string_cmp
036c0     FD 30 0A F6 | 	mov	local10, result1 wz
036c4     BC 00 90 AD |  if_e	jmp	#LR__0184
036c8     81 01 00 FF 
036cc     EF 34 06 F6 | 	mov	local12, ##@LR__5111
036d0     1A 29 02 F6 | 	mov	local06, local12
036d4     37 13 02 F6 | 	mov	arg01, local41
036d8     14 15 02 F6 | 	mov	arg02, local06
036dc     AC D2 B1 FD | 	call	#__system___string_cmp
036e0     FD 26 0A F6 | 	mov	local05, result1 wz
036e4     9C 00 90 AD |  if_e	jmp	#LR__0184
036e8     81 01 00 FF 
036ec     F3 32 06 F6 | 	mov	local11, ##@LR__5112
036f0     19 35 02 F6 | 	mov	local12, local11
036f4     37 13 02 F6 | 	mov	arg01, local41
036f8     1A 15 02 F6 | 	mov	arg02, local12
036fc     8C D2 B1 FD | 	call	#__system___string_cmp
03700     FD 28 0A F6 | 	mov	local06, result1 wz
03704     7C 00 90 AD |  if_e	jmp	#LR__0184
03708     81 01 00 FF 
0370c     F7 38 06 F6 | 	mov	local14, ##@LR__5113
03710     1C 33 02 F6 | 	mov	local11, local14
03714     37 13 02 F6 | 	mov	arg01, local41
03718     19 15 02 F6 | 	mov	arg02, local11
0371c     6C D2 B1 FD | 	call	#__system___string_cmp
03720     FD 34 0A F6 | 	mov	local12, result1 wz
03724     5C 00 90 AD |  if_e	jmp	#LR__0184
03728     81 01 00 FF 
0372c     FA 36 06 F6 | 	mov	local13, ##@LR__5114
03730     1B 39 02 F6 | 	mov	local14, local13
03734     37 13 02 F6 | 	mov	arg01, local41
03738     1C 15 02 F6 | 	mov	arg02, local14
0373c     4C D2 B1 FD | 	call	#__system___string_cmp
03740     FD 32 0A F6 | 	mov	local11, result1 wz
03744     3C 00 90 AD |  if_e	jmp	#LR__0184
03748     81 01 00 FF 
0374c     FE 36 06 F6 | 	mov	local13, ##@LR__5115
03750     37 13 02 F6 | 	mov	arg01, local41
03754     1B 15 02 F6 | 	mov	arg02, local13
03758     30 D2 B1 FD | 	call	#__system___string_cmp
0375c     FD 38 0A F6 | 	mov	local14, result1 wz
03760     20 00 90 AD |  if_e	jmp	#LR__0184
03764     81 01 00 FF 
03768     04 49 06 F6 | 	mov	local22, ##@LR__5116
0376c     24 55 02 F6 | 	mov	local28, local22
03770     37 13 02 F6 | 	mov	arg01, local41
03774     2A 15 02 F6 | 	mov	arg02, local28
03778     10 D2 B1 FD | 	call	#__system___string_cmp
0377c     FD 36 0A F6 | 	mov	local13, result1 wz
03780     84 00 90 5D |  if_ne	jmp	#LR__0185
03784                 | LR__0184
03784     33 55 02 F6 | 	mov	local28, local37
03788     01 54 06 F1 | 	add	local28, #1
0378c     2A 49 02 F6 | 	mov	local22, local28
03790     24 4B 02 F6 | 	mov	local23, local22
03794     03 4A 66 F0 | 	shl	local23, #3
03798     35 00 00 FF 
0379c     0C E4 05 F1 | 	add	objptr, ##27148
037a0     F2 4C 02 F6 | 	mov	local24, objptr
037a4     F2 4A 02 F1 | 	add	local23, objptr
037a8     04 4A 06 F1 | 	add	local23, #4
037ac     25 59 02 FB | 	rdlong	local30, local23
037b0     04 4A 86 F1 | 	sub	local23, #4
037b4     2C 57 02 F6 | 	mov	local29, local30
037b8     01 00 00 FF 
037bc     04 56 0E F2 | 	cmp	local29, ##516 wz
037c0     35 00 00 FF 
037c4     0C E4 85 F1 | 	sub	objptr, ##27148
037c8     3C 00 90 5D |  if_ne	jmp	#LR__0185
037cc     33 31 02 F6 | 	mov	local10, local37
037d0     01 30 06 F1 | 	add	local10, #1
037d4     03 30 66 F0 | 	shl	local10, #3
037d8     35 00 00 FF 
037dc     0C E4 05 F1 | 	add	objptr, ##27148
037e0     F2 26 02 F6 | 	mov	local05, objptr
037e4     F2 30 02 F1 | 	add	local10, objptr
037e8     01 00 00 FF 
037ec     03 28 06 F6 | 	mov	local06, ##515
037f0     04 30 06 F1 | 	add	local10, #4
037f4     01 00 80 FF 
037f8     18 07 68 FC | 	wrlong	##515, local10
037fc     04 30 86 F1 | 	sub	local10, #4
03800     35 00 00 FF 
03804     0C E4 85 F1 | 	sub	objptr, ##27148
03808                 | LR__0185
03808                 | ' 
03808                 | ' ' determine a type of the line and compile it
03808                 | ' 
03808                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
03808     35 00 00 FF 
0380c     0C E4 05 F1 | 	add	objptr, ##27148
03810     F2 12 02 FB | 	rdlong	arg01, objptr
03814     35 00 00 FF 
03818     0C E4 85 F1 | 	sub	objptr, ##27148
0381c     E8 2B B0 FD | 	call	#_isdec
03820     00 FA 0D F2 | 	cmp	result1, #0 wz
03824     30 00 90 AD |  if_e	jmp	#LR__0186
03828     35 00 00 FF 
0382c     0C E4 05 F1 | 	add	objptr, ##27148
03830     F2 12 02 FB | 	rdlong	arg01, objptr
03834     35 00 00 FF 
03838     0C E4 85 F1 | 	sub	objptr, ##27148
0383c     00 14 06 F6 | 	mov	arg02, #0
03840     4C 03 B2 FD | 	call	#__system____builtin_atoi
03844     51 00 00 FF 
03848     C4 E5 05 F1 | 	add	objptr, ##41924
0384c     F2 FA 61 FC | 	wrlong	result1, objptr
03850     51 00 00 FF 
03854     C4 E5 85 F1 | 	sub	objptr, ##41924
03858                 | LR__0186
03858                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104   ' this was an empty numbered line, delete it
03858     51 00 00 FF 
0385c     C4 E5 05 F1 | 	add	objptr, ##41924
03860     F2 24 02 FB | 	rdlong	local04, objptr
03864     51 00 00 FF 
03868     C4 E5 85 F1 | 	sub	objptr, ##41924
0386c     01 24 16 F2 | 	cmp	local04, #1 wc
03870     40 00 90 CD |  if_b	jmp	#LR__0187
03874     01 3E 0E F2 | 	cmp	local17, #1 wz
03878     37 00 00 AF 
0387c     24 E4 05 A1 |  if_e	add	objptr, ##28196
03880     F2 26 02 AB |  if_e	rdlong	local05, objptr
03884     37 00 00 AF 
03888     24 E4 85 A1 |  if_e	sub	objptr, ##28196
0388c     13 31 02 A6 |  if_e	mov	local10, local05
03890     03 30 0E A2 |  if_e	cmp	local10, #3 wz
03894     1C 00 90 5D |  if_ne	jmp	#LR__0187
03898     51 00 00 FF 
0389c     C4 E5 05 F1 | 	add	objptr, ##41924
038a0     F2 12 02 FB | 	rdlong	arg01, objptr
038a4     51 00 00 FF 
038a8     C4 E5 85 F1 | 	sub	objptr, ##41924
038ac     04 2D B0 FD | 	call	#_deleteline
038b0     70 03 90 FD | 	jmp	#LR__0197
038b4                 | LR__0187
038b4                 | ' 
038b4                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  		' first part, commans
038b4     37 00 00 FF 
038b8     24 E4 05 F1 | 	add	objptr, ##28196
038bc     F2 24 0A FB | 	rdlong	local04, objptr wz
038c0     37 00 00 FF 
038c4     24 E4 85 F1 | 	sub	objptr, ##28196
038c8     37 00 00 5F 
038cc     24 E4 05 51 |  if_ne	add	objptr, ##28196
038d0     F2 30 02 5B |  if_ne	rdlong	local10, objptr
038d4     37 00 00 5F 
038d8     24 E4 85 51 |  if_ne	sub	objptr, ##28196
038dc     03 30 0E 52 |  if_ne	cmp	local10, #3 wz
038e0     AC 00 90 5D |  if_ne	jmp	#LR__0189
038e4     35 00 00 FF 
038e8     20 E4 05 F1 | 	add	objptr, ##27168
038ec     F2 34 02 FB | 	rdlong	local12, objptr
038f0     35 00 00 FF 
038f4     20 E4 85 F1 | 	sub	objptr, ##27168
038f8     1B 34 0E F2 | 	cmp	local12, #27 wz
038fc     90 00 90 AD |  if_e	jmp	#LR__0189
03900     51 00 00 FF 
03904     C4 E5 05 F1 | 	add	objptr, ##41924
03908     F2 12 02 FB | 	rdlong	arg01, objptr
0390c     1A 00 00 FF 
03910     A0 E5 85 F1 | 	sub	objptr, ##13728
03914     F2 16 02 FB | 	rdlong	arg03, objptr
03918     37 00 00 FF 
0391c     24 E4 85 F1 | 	sub	objptr, ##28196
03920     00 14 06 F6 | 	mov	arg02, #0
03924     30 40 B0 FD | 	call	#_compile
03928     FD 1E 0A F6 | 	mov	local01, result1 wz
0392c                 | '   err=compile(linenum,0,cont) 
0392c                 | '   if err<>0 then printerror(err): goto 101
0392c     0C 00 90 AD |  if_e	jmp	#LR__0188
03930     0F 13 02 F6 | 	mov	arg01, local01
03934     9C 9A B1 FD | 	call	#_printerror
03938     08 03 90 FD | 	jmp	#LR__0198
0393c                 | LR__0188
0393c                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
0393c     51 00 00 FF 
03940     F8 E5 05 F1 | 	add	objptr, ##41976
03944     F2 12 02 FB | 	rdlong	arg01, objptr
03948     51 00 00 FF 
0394c     F8 E5 85 F1 | 	sub	objptr, ##41976
03950     81 01 00 FF 
03954     07 15 06 F6 | 	mov	arg02, ##@LR__5117
03958     30 D0 B1 FD | 	call	#__system___string_cmp
0395c     00 FA 0D F2 | 	cmp	result1, #0 wz
03960     C0 02 90 AD |  if_e	jmp	#LR__0197
03964     51 00 00 FF 
03968     F8 E5 05 F1 | 	add	objptr, ##41976
0396c     F2 24 02 FB | 	rdlong	local04, objptr
03970     1A 00 00 FF 
03974     DC E5 85 F1 | 	sub	objptr, ##13788
03978     F2 24 62 FC | 	wrlong	local04, objptr
0397c     08 E4 05 F1 | 	add	objptr, #8
03980     F2 08 68 FC | 	wrlong	#4, objptr
03984     37 00 00 FF 
03988     24 E4 85 F1 | 	sub	objptr, ##28196
0398c     54 DD 9F FD | 	jmp	#LR__0070
03990                 | LR__0189
03990                 | '       							
03990                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 		' not a first part, command
03990     37 00 00 FF 
03994     24 E4 05 F1 | 	add	objptr, ##28196
03998     F2 24 02 FB | 	rdlong	local04, objptr
0399c     37 00 00 FF 
039a0     24 E4 85 F1 | 	sub	objptr, ##28196
039a4     01 24 0E F2 | 	cmp	local04, #1 wz
039a8     37 00 00 5F 
039ac     24 E4 05 51 |  if_ne	add	objptr, ##28196
039b0     F2 30 02 5B |  if_ne	rdlong	local10, objptr
039b4     37 00 00 5F 
039b8     24 E4 85 51 |  if_ne	sub	objptr, ##28196
039bc     02 30 0E 52 |  if_ne	cmp	local10, #2 wz
039c0     AC 00 90 5D |  if_ne	jmp	#LR__0191
039c4     35 00 00 FF 
039c8     18 E4 05 F1 | 	add	objptr, ##27160
039cc     F2 34 02 FB | 	rdlong	local12, objptr
039d0     35 00 00 FF 
039d4     18 E4 85 F1 | 	sub	objptr, ##27160
039d8     1B 34 0E F2 | 	cmp	local12, #27 wz
039dc     90 00 90 AD |  if_e	jmp	#LR__0191
039e0     51 00 00 FF 
039e4     C4 E5 05 F1 | 	add	objptr, ##41924
039e8     F2 12 02 FB | 	rdlong	arg01, objptr
039ec     1A 00 00 FF 
039f0     A0 E5 85 F1 | 	sub	objptr, ##13728
039f4     F2 16 02 FB | 	rdlong	arg03, objptr
039f8     37 00 00 FF 
039fc     24 E4 85 F1 | 	sub	objptr, ##28196
03a00     00 14 06 F6 | 	mov	arg02, #0
03a04     50 3F B0 FD | 	call	#_compile
03a08     FD 1E 0A F6 | 	mov	local01, result1 wz
03a0c                 | '   err=compile(linenum,0,cont) 
03a0c                 | '   if err<>0 then printerror(err): goto 101
03a0c     0C 00 90 AD |  if_e	jmp	#LR__0190
03a10     0F 13 02 F6 | 	mov	arg01, local01
03a14     BC 99 B1 FD | 	call	#_printerror
03a18     28 02 90 FD | 	jmp	#LR__0198
03a1c                 | LR__0190
03a1c                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
03a1c     51 00 00 FF 
03a20     F8 E5 05 F1 | 	add	objptr, ##41976
03a24     F2 12 02 FB | 	rdlong	arg01, objptr
03a28     51 00 00 FF 
03a2c     F8 E5 85 F1 | 	sub	objptr, ##41976
03a30     81 01 00 FF 
03a34     08 15 06 F6 | 	mov	arg02, ##@LR__5118
03a38     50 CF B1 FD | 	call	#__system___string_cmp
03a3c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a40     E0 01 90 AD |  if_e	jmp	#LR__0197
03a44     51 00 00 FF 
03a48     F8 E5 05 F1 | 	add	objptr, ##41976
03a4c     F2 24 02 FB | 	rdlong	local04, objptr
03a50     1A 00 00 FF 
03a54     DC E5 85 F1 | 	sub	objptr, ##13788
03a58     F2 24 62 FC | 	wrlong	local04, objptr
03a5c     08 E4 05 F1 | 	add	objptr, #8
03a60     F2 08 68 FC | 	wrlong	#4, objptr
03a64     37 00 00 FF 
03a68     24 E4 85 F1 | 	sub	objptr, ##28196
03a6c     74 DC 9F FD | 	jmp	#LR__0070
03a70                 | LR__0191
03a70                 | ' 							 
03a70                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  		' first part, assign
03a70     37 00 00 FF 
03a74     24 E4 05 F1 | 	add	objptr, ##28196
03a78     F2 24 0A FB | 	rdlong	local04, objptr wz
03a7c     37 00 00 FF 
03a80     24 E4 85 F1 | 	sub	objptr, ##28196
03a84     37 00 00 5F 
03a88     24 E4 05 51 |  if_ne	add	objptr, ##28196
03a8c     F2 30 02 5B |  if_ne	rdlong	local10, objptr
03a90     37 00 00 5F 
03a94     24 E4 85 51 |  if_ne	sub	objptr, ##28196
03a98     03 30 0E 52 |  if_ne	cmp	local10, #3 wz
03a9c     35 00 00 AF 
03aa0     20 E4 05 A1 |  if_e	add	objptr, ##27168
03aa4     F2 34 02 AB |  if_e	rdlong	local12, objptr
03aa8     35 00 00 AF 
03aac     20 E4 85 A1 |  if_e	sub	objptr, ##27168
03ab0     1B 34 0E A2 |  if_e	cmp	local12, #27 wz
03ab4     90 00 90 5D |  if_ne	jmp	#LR__0193
03ab8     51 00 00 FF 
03abc     C4 E5 05 F1 | 	add	objptr, ##41924
03ac0     F2 12 02 FB | 	rdlong	arg01, objptr
03ac4     1A 00 00 FF 
03ac8     A0 E5 85 F1 | 	sub	objptr, ##13728
03acc     F2 16 02 FB | 	rdlong	arg03, objptr
03ad0     37 00 00 FF 
03ad4     24 E4 85 F1 | 	sub	objptr, ##28196
03ad8     00 14 06 F6 | 	mov	arg02, #0
03adc     40 3F B0 FD | 	call	#_compile_assign
03ae0     FD 1E 0A F6 | 	mov	local01, result1 wz
03ae4                 | '   err=compile_assign(linenum,0,cont)
03ae4                 | '   if err<>0 then printerror(err): goto 101
03ae4     0C 00 90 AD |  if_e	jmp	#LR__0192
03ae8     0F 13 02 F6 | 	mov	arg01, local01
03aec     E4 98 B1 FD | 	call	#_printerror
03af0     50 01 90 FD | 	jmp	#LR__0198
03af4                 | LR__0192
03af4                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
03af4     51 00 00 FF 
03af8     F8 E5 05 F1 | 	add	objptr, ##41976
03afc     F2 12 02 FB | 	rdlong	arg01, objptr
03b00     51 00 00 FF 
03b04     F8 E5 85 F1 | 	sub	objptr, ##41976
03b08     81 01 00 FF 
03b0c     09 15 06 F6 | 	mov	arg02, ##@LR__5119
03b10     78 CE B1 FD | 	call	#__system___string_cmp
03b14     00 FA 0D F2 | 	cmp	result1, #0 wz
03b18     08 01 90 AD |  if_e	jmp	#LR__0197
03b1c     51 00 00 FF 
03b20     F8 E5 05 F1 | 	add	objptr, ##41976
03b24     F2 24 02 FB | 	rdlong	local04, objptr
03b28     1A 00 00 FF 
03b2c     DC E5 85 F1 | 	sub	objptr, ##13788
03b30     F2 24 62 FC | 	wrlong	local04, objptr
03b34     08 E4 05 F1 | 	add	objptr, #8
03b38     F2 08 68 FC | 	wrlong	#4, objptr
03b3c     37 00 00 FF 
03b40     24 E4 85 F1 | 	sub	objptr, ##28196
03b44     9C DB 9F FD | 	jmp	#LR__0070
03b48                 | LR__0193
03b48                 | '     							 
03b48                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 		' not a first part, assign
03b48     37 00 00 FF 
03b4c     24 E4 05 F1 | 	add	objptr, ##28196
03b50     F2 24 02 FB | 	rdlong	local04, objptr
03b54     37 00 00 FF 
03b58     24 E4 85 F1 | 	sub	objptr, ##28196
03b5c     01 24 0E F2 | 	cmp	local04, #1 wz
03b60     37 00 00 5F 
03b64     24 E4 05 51 |  if_ne	add	objptr, ##28196
03b68     F2 30 02 5B |  if_ne	rdlong	local10, objptr
03b6c     37 00 00 5F 
03b70     24 E4 85 51 |  if_ne	sub	objptr, ##28196
03b74     02 30 0E 52 |  if_ne	cmp	local10, #2 wz
03b78     35 00 00 AF 
03b7c     18 E4 05 A1 |  if_e	add	objptr, ##27160
03b80     F2 34 02 AB |  if_e	rdlong	local12, objptr
03b84     35 00 00 AF 
03b88     18 E4 85 A1 |  if_e	sub	objptr, ##27160
03b8c     1B 34 0E A2 |  if_e	cmp	local12, #27 wz
03b90     90 00 90 5D |  if_ne	jmp	#LR__0196
03b94     51 00 00 FF 
03b98     C4 E5 05 F1 | 	add	objptr, ##41924
03b9c     F2 12 02 FB | 	rdlong	arg01, objptr
03ba0     1A 00 00 FF 
03ba4     A0 E5 85 F1 | 	sub	objptr, ##13728
03ba8     F2 16 02 FB | 	rdlong	arg03, objptr
03bac     37 00 00 FF 
03bb0     24 E4 85 F1 | 	sub	objptr, ##28196
03bb4     00 14 06 F6 | 	mov	arg02, #0
03bb8     64 3E B0 FD | 	call	#_compile_assign
03bbc     FD 1E 0A F6 | 	mov	local01, result1 wz
03bc0                 | '   err=compile_assign(linenum,0,cont) 
03bc0                 | '   if err<>0 then printerror(err): goto 101
03bc0     0C 00 90 AD |  if_e	jmp	#LR__0194
03bc4     0F 13 02 F6 | 	mov	arg01, local01
03bc8     08 98 B1 FD | 	call	#_printerror
03bcc     74 00 90 FD | 	jmp	#LR__0198
03bd0                 | LR__0194
03bd0                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								 
03bd0     51 00 00 FF 
03bd4     F8 E5 05 F1 | 	add	objptr, ##41976
03bd8     F2 12 02 FB | 	rdlong	arg01, objptr
03bdc     51 00 00 FF 
03be0     F8 E5 85 F1 | 	sub	objptr, ##41976
03be4     81 01 00 FF 
03be8     0A 15 06 F6 | 	mov	arg02, ##@LR__5120
03bec     9C CD B1 FD | 	call	#__system___string_cmp
03bf0     00 FA 4D F2 | 	cmps	result1, #0 wz
03bf4     2C 00 90 AD |  if_e	jmp	#LR__0195
03bf8     51 00 00 FF 
03bfc     F8 E5 05 F1 | 	add	objptr, ##41976
03c00     F2 24 02 FB | 	rdlong	local04, objptr
03c04     1A 00 00 FF 
03c08     DC E5 85 F1 | 	sub	objptr, ##13788
03c0c     F2 24 62 FC | 	wrlong	local04, objptr
03c10     08 E4 05 F1 | 	add	objptr, #8
03c14     F2 08 68 FC | 	wrlong	#4, objptr
03c18     37 00 00 FF 
03c1c     24 E4 85 F1 | 	sub	objptr, ##28196
03c20     C0 DA 9F FD | 	jmp	#LR__0070
03c24                 | LR__0195
03c24                 | LR__0196
03c24                 | LR__0197
03c24                 | ' 
03c24                 | ' 104 if linenum=0 then 								' line 0 is for immediate execution
03c24     51 00 00 FF 
03c28     C4 E5 05 F1 | 	add	objptr, ##41924
03c2c     F2 24 0A FB | 	rdlong	local04, objptr wz
03c30     51 00 00 FF 
03c34     C4 E5 85 F1 | 	sub	objptr, ##41924
03c38     28 00 90 5D |  if_ne	jmp	#LR__0199
03c3c     02 12 06 F6 | 	mov	arg01, #2
03c40     64 75 B0 FD | 	call	#_execute_line
03c44                 | LR__0198
03c44     81 01 00 FF 
03c48     0B 13 06 F6 | 	mov	arg01, ##@LR__5121
03c4c                 | ' 
03c4c                 | ' write(text)
03c4c     F8 B7 B1 FD | 	call	#_hg010b_spin2_write
03c50                 | ' crlf
03c50     F4 BC B1 FD | 	call	#_hg010b_spin2_crlf
03c54     81 01 00 FF 
03c58     0C 13 06 F6 | 	mov	arg01, ##@LR__5122
03c5c                 | ' 
03c5c                 | ' write(text)
03c5c     E8 B7 B1 FD | 	call	#_hg010b_spin2_write
03c60                 | ' crlf
03c60     E4 BC B1 FD | 	call	#_hg010b_spin2_crlf
03c64                 | LR__0199
03c64     A7 F0 03 F6 | 	mov	ptra, fp
03c68     B2 00 A0 FD | 	call	#popregs_
03c6c                 | _interpret_ret
03c6c     2D 00 64 FD | 	ret
03c70                 | 
03c70                 | ' 
03c70                 | ' '---------------------------------------------------------------------------------------------------------------------
03c70                 | ' '
03c70                 | ' '                          END OF TOKENIZER MAIN CODE
03c70                 | ' '
03c70                 | ' '---------------------------------------------------------------------------------------------------------------------
03c70                 | ' 
03c70                 | ' '---------------------------------------------------------------------------------------------------------------------
03c70                 | ' '-------------------- Helper functions for the tokenizer -------------------------------------------------------------
03c70                 | ' '---------------------------------------------------------------------------------------------------------------------
03c70                 | ' 
03c70                 | ' ' Check if the part is an operator, return a token or 0 if not found
03c70                 | ' 
03c70                 | ' function isoperator(s as string) as ubyte
03c70                 | _isoperator
03c70     01 4A 05 F6 | 	mov	COUNT_, #1
03c74     A8 00 A0 FD | 	call	#pushregs_
03c78                 | ' 
03c78                 | ' select case s
03c78     09 1F 02 F6 | 	mov	local01, arg01
03c7c     81 01 00 FF 
03c80     12 15 06 F6 | 	mov	arg02, ##@LR__5123
03c84     0F 13 02 F6 | 	mov	arg01, local01
03c88     00 CD B1 FD | 	call	#__system___string_cmp
03c8c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c90     FC 01 90 AD |  if_e	jmp	#LR__0200
03c94     81 01 00 FF 
03c98     14 15 06 F6 | 	mov	arg02, ##@LR__5124
03c9c     0F 13 02 F6 | 	mov	arg01, local01
03ca0     E8 CC B1 FD | 	call	#__system___string_cmp
03ca4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ca8     EC 01 90 AD |  if_e	jmp	#LR__0201
03cac     81 01 00 FF 
03cb0     16 15 06 F6 | 	mov	arg02, ##@LR__5125
03cb4     0F 13 02 F6 | 	mov	arg01, local01
03cb8     D0 CC B1 FD | 	call	#__system___string_cmp
03cbc     00 FA 0D F2 | 	cmp	result1, #0 wz
03cc0     DC 01 90 AD |  if_e	jmp	#LR__0202
03cc4     81 01 00 FF 
03cc8     19 15 06 F6 | 	mov	arg02, ##@LR__5126
03ccc     0F 13 02 F6 | 	mov	arg01, local01
03cd0     B8 CC B1 FD | 	call	#__system___string_cmp
03cd4     00 FA 0D F2 | 	cmp	result1, #0 wz
03cd8     CC 01 90 AD |  if_e	jmp	#LR__0203
03cdc     81 01 00 FF 
03ce0     1D 15 06 F6 | 	mov	arg02, ##@LR__5127
03ce4     0F 13 02 F6 | 	mov	arg01, local01
03ce8     A0 CC B1 FD | 	call	#__system___string_cmp
03cec     00 FA 0D F2 | 	cmp	result1, #0 wz
03cf0     BC 01 90 AD |  if_e	jmp	#LR__0204
03cf4     81 01 00 FF 
03cf8     1F 15 06 F6 | 	mov	arg02, ##@LR__5128
03cfc     0F 13 02 F6 | 	mov	arg01, local01
03d00     88 CC B1 FD | 	call	#__system___string_cmp
03d04     00 FA 0D F2 | 	cmp	result1, #0 wz
03d08     AC 01 90 AD |  if_e	jmp	#LR__0205
03d0c     81 01 00 FF 
03d10     21 15 06 F6 | 	mov	arg02, ##@LR__5129
03d14     0F 13 02 F6 | 	mov	arg01, local01
03d18     70 CC B1 FD | 	call	#__system___string_cmp
03d1c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d20     9C 01 90 AD |  if_e	jmp	#LR__0206
03d24     81 01 00 FF 
03d28     25 15 06 F6 | 	mov	arg02, ##@LR__5130
03d2c     0F 13 02 F6 | 	mov	arg01, local01
03d30     58 CC B1 FD | 	call	#__system___string_cmp
03d34     00 FA 0D F2 | 	cmp	result1, #0 wz
03d38     8C 01 90 AD |  if_e	jmp	#LR__0207
03d3c     81 01 00 FF 
03d40     29 15 06 F6 | 	mov	arg02, ##@LR__5131
03d44     0F 13 02 F6 | 	mov	arg01, local01
03d48     40 CC B1 FD | 	call	#__system___string_cmp
03d4c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d50     7C 01 90 AD |  if_e	jmp	#LR__0208
03d54     81 01 00 FF 
03d58     2D 15 06 F6 | 	mov	arg02, ##@LR__5132
03d5c     0F 13 02 F6 | 	mov	arg01, local01
03d60     28 CC B1 FD | 	call	#__system___string_cmp
03d64     00 FA 0D F2 | 	cmp	result1, #0 wz
03d68     6C 01 90 AD |  if_e	jmp	#LR__0209
03d6c     81 01 00 FF 
03d70     31 15 06 F6 | 	mov	arg02, ##@LR__5133
03d74     0F 13 02 F6 | 	mov	arg01, local01
03d78     10 CC B1 FD | 	call	#__system___string_cmp
03d7c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d80     5C 01 90 AD |  if_e	jmp	#LR__0210
03d84     81 01 00 FF 
03d88     35 15 06 F6 | 	mov	arg02, ##@LR__5134
03d8c     0F 13 02 F6 | 	mov	arg01, local01
03d90     F8 CB B1 FD | 	call	#__system___string_cmp
03d94     00 FA 0D F2 | 	cmp	result1, #0 wz
03d98     4C 01 90 AD |  if_e	jmp	#LR__0211
03d9c     81 01 00 FF 
03da0     37 15 06 F6 | 	mov	arg02, ##@LR__5135
03da4     0F 13 02 F6 | 	mov	arg01, local01
03da8     E0 CB B1 FD | 	call	#__system___string_cmp
03dac     00 FA 0D F2 | 	cmp	result1, #0 wz
03db0     3C 01 90 AD |  if_e	jmp	#LR__0212
03db4     81 01 00 FF 
03db8     3B 15 06 F6 | 	mov	arg02, ##@LR__5136
03dbc     0F 13 02 F6 | 	mov	arg01, local01
03dc0     C8 CB B1 FD | 	call	#__system___string_cmp
03dc4     00 FA 0D F2 | 	cmp	result1, #0 wz
03dc8     2C 01 90 AD |  if_e	jmp	#LR__0213
03dcc     81 01 00 FF 
03dd0     3D 15 06 F6 | 	mov	arg02, ##@LR__5137
03dd4     0F 13 02 F6 | 	mov	arg01, local01
03dd8     B0 CB B1 FD | 	call	#__system___string_cmp
03ddc     00 FA 0D F2 | 	cmp	result1, #0 wz
03de0     1C 01 90 AD |  if_e	jmp	#LR__0214
03de4     81 01 00 FF 
03de8     3F 15 06 F6 | 	mov	arg02, ##@LR__5138
03dec     0F 13 02 F6 | 	mov	arg01, local01
03df0     98 CB B1 FD | 	call	#__system___string_cmp
03df4     00 FA 0D F2 | 	cmp	result1, #0 wz
03df8     0C 01 90 AD |  if_e	jmp	#LR__0215
03dfc     81 01 00 FF 
03e00     42 15 06 F6 | 	mov	arg02, ##@LR__5139
03e04     0F 13 02 F6 | 	mov	arg01, local01
03e08     80 CB B1 FD | 	call	#__system___string_cmp
03e0c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e10     FC 00 90 AD |  if_e	jmp	#LR__0216
03e14     81 01 00 FF 
03e18     45 15 06 F6 | 	mov	arg02, ##@LR__5140
03e1c     0F 13 02 F6 | 	mov	arg01, local01
03e20     68 CB B1 FD | 	call	#__system___string_cmp
03e24     00 FA 0D F2 | 	cmp	result1, #0 wz
03e28     EC 00 90 AD |  if_e	jmp	#LR__0217
03e2c     81 01 00 FF 
03e30     47 15 06 F6 | 	mov	arg02, ##@LR__5141
03e34     0F 13 02 F6 | 	mov	arg01, local01
03e38     50 CB B1 FD | 	call	#__system___string_cmp
03e3c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e40     DC 00 90 AD |  if_e	jmp	#LR__0218
03e44     81 01 00 FF 
03e48     49 15 06 F6 | 	mov	arg02, ##@LR__5142
03e4c     0F 13 02 F6 | 	mov	arg01, local01
03e50     38 CB B1 FD | 	call	#__system___string_cmp
03e54     00 FA 0D F2 | 	cmp	result1, #0 wz
03e58     CC 00 90 AD |  if_e	jmp	#LR__0219
03e5c     81 01 00 FF 
03e60     4C 15 06 F6 | 	mov	arg02, ##@LR__5143
03e64     0F 13 02 F6 | 	mov	arg01, local01
03e68     20 CB B1 FD | 	call	#__system___string_cmp
03e6c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e70     BC 00 90 AD |  if_e	jmp	#LR__0220
03e74     81 01 00 FF 
03e78     4F 15 06 F6 | 	mov	arg02, ##@LR__5144
03e7c     0F 13 02 F6 | 	mov	arg01, local01
03e80     08 CB B1 FD | 	call	#__system___string_cmp
03e84     00 FA 0D F2 | 	cmp	result1, #0 wz
03e88     AC 00 90 AD |  if_e	jmp	#LR__0221
03e8c     B0 00 90 FD | 	jmp	#LR__0222
03e90                 | LR__0200
03e90     01 FA 05 F6 | 	mov	result1, #1
03e94     AC 00 90 FD | 	jmp	#LR__0223
03e98                 | LR__0201
03e98     02 FA 05 F6 | 	mov	result1, #2
03e9c     A4 00 90 FD | 	jmp	#LR__0223
03ea0                 | LR__0202
03ea0     03 FA 05 F6 | 	mov	result1, #3
03ea4     9C 00 90 FD | 	jmp	#LR__0223
03ea8                 | LR__0203
03ea8     04 FA 05 F6 | 	mov	result1, #4
03eac     94 00 90 FD | 	jmp	#LR__0223
03eb0                 | LR__0204
03eb0     05 FA 05 F6 | 	mov	result1, #5
03eb4     8C 00 90 FD | 	jmp	#LR__0223
03eb8                 | LR__0205
03eb8     06 FA 05 F6 | 	mov	result1, #6
03ebc     84 00 90 FD | 	jmp	#LR__0223
03ec0                 | LR__0206
03ec0     07 FA 05 F6 | 	mov	result1, #7
03ec4     7C 00 90 FD | 	jmp	#LR__0223
03ec8                 | LR__0207
03ec8     08 FA 05 F6 | 	mov	result1, #8
03ecc     74 00 90 FD | 	jmp	#LR__0223
03ed0                 | LR__0208
03ed0     09 FA 05 F6 | 	mov	result1, #9
03ed4     6C 00 90 FD | 	jmp	#LR__0223
03ed8                 | LR__0209
03ed8     0A FA 05 F6 | 	mov	result1, #10
03edc     64 00 90 FD | 	jmp	#LR__0223
03ee0                 | LR__0210
03ee0     0B FA 05 F6 | 	mov	result1, #11
03ee4     5C 00 90 FD | 	jmp	#LR__0223
03ee8                 | LR__0211
03ee8     0C FA 05 F6 | 	mov	result1, #12
03eec     54 00 90 FD | 	jmp	#LR__0223
03ef0                 | LR__0212
03ef0     0D FA 05 F6 | 	mov	result1, #13
03ef4     4C 00 90 FD | 	jmp	#LR__0223
03ef8                 | LR__0213
03ef8     0E FA 05 F6 | 	mov	result1, #14
03efc     44 00 90 FD | 	jmp	#LR__0223
03f00                 | LR__0214
03f00     1B FA 05 F6 | 	mov	result1, #27
03f04     3C 00 90 FD | 	jmp	#LR__0223
03f08                 | LR__0215
03f08     27 FA 05 F6 | 	mov	result1, #39
03f0c     34 00 90 FD | 	jmp	#LR__0223
03f10                 | LR__0216
03f10     26 FA 05 F6 | 	mov	result1, #38
03f14     2C 00 90 FD | 	jmp	#LR__0223
03f18                 | LR__0217
03f18     10 FA 05 F6 | 	mov	result1, #16
03f1c     24 00 90 FD | 	jmp	#LR__0223
03f20                 | LR__0218
03f20     0F FA 05 F6 | 	mov	result1, #15
03f24     1C 00 90 FD | 	jmp	#LR__0223
03f28                 | LR__0219
03f28     2A FA 05 F6 | 	mov	result1, #42
03f2c     14 00 90 FD | 	jmp	#LR__0223
03f30                 | LR__0220
03f30     28 FA 05 F6 | 	mov	result1, #40
03f34     0C 00 90 FD | 	jmp	#LR__0223
03f38                 | LR__0221
03f38     29 FA 05 F6 | 	mov	result1, #41
03f3c     04 00 90 FD | 	jmp	#LR__0223
03f40                 | LR__0222
03f40     00 FA 05 F6 | 	mov	result1, #0
03f44                 | LR__0223
03f44     A7 F0 03 F6 | 	mov	ptra, fp
03f48     B2 00 A0 FD | 	call	#popregs_
03f4c                 | _isoperator_ret
03f4c     2D 00 64 FD | 	ret
03f50                 | 
03f50                 | ' 
03f50                 | ' ' Check if the part is a channel#, return a token or 0 if not found
03f50                 | ' 
03f50                 | ' function ischannel(s as string) as ulong
03f50                 | _ischannel
03f50     02 4A 05 F6 | 	mov	COUNT_, #2
03f54     A8 00 A0 FD | 	call	#pushregs_
03f58                 | ' if left$(s,1)<>"#" then return 0
03f58     09 1F 02 F6 | 	mov	local01, arg01
03f5c     01 14 06 F6 | 	mov	arg02, #1
03f60     7C EA B1 FD | 	call	#__system__Left_S
03f64     FD 12 02 F6 | 	mov	arg01, result1
03f68     81 01 00 FF 
03f6c     52 15 06 F6 | 	mov	arg02, ##@LR__5145
03f70     18 CA B1 FD | 	call	#__system___string_cmp
03f74     00 FA 0D F2 | 	cmp	result1, #0 wz
03f78     00 FA 05 56 |  if_ne	mov	result1, #0
03f7c     AC 00 90 5D |  if_ne	jmp	#LR__0234
03f80                 | ' if len(s)<>2 then return 0
03f80     0F 13 02 F6 | 	mov	arg01, local01
03f84     09 21 02 F6 | 	mov	local02, arg01
03f88     97 06 48 FB | 	callpa	#(@LR__0231-@LR__0230)>>2,fcache_load_ptr_
03f8c                 | LR__0230
03f8c     10 FB C9 FA | 	rdbyte	result1, local02 wz
03f90     01 20 06 51 |  if_ne	add	local02, #1
03f94     F4 FF 9F 5D |  if_ne	jmp	#LR__0230
03f98                 | LR__0231
03f98     09 21 82 F1 | 	sub	local02, arg01
03f9c     10 FB 01 F6 | 	mov	result1, local02
03fa0     02 FA 0D F2 | 	cmp	result1, #2 wz
03fa4     00 FA 05 56 |  if_ne	mov	result1, #0
03fa8     80 00 90 5D |  if_ne	jmp	#LR__0234
03fac                 | ' if right$(s,1)<"0" orelse right$(s,1)>"9" then return 0
03fac     0F 13 02 F6 | 	mov	arg01, local01
03fb0     01 14 06 F6 | 	mov	arg02, #1
03fb4     B0 EA B1 FD | 	call	#__system__Right_S
03fb8     FD 12 02 F6 | 	mov	arg01, result1
03fbc     81 01 00 FF 
03fc0     54 15 06 F6 | 	mov	arg02, ##@LR__5146
03fc4     C4 C9 B1 FD | 	call	#__system___string_cmp
03fc8     00 FA 55 F2 | 	cmps	result1, #0 wc
03fcc     24 00 90 CD |  if_b	jmp	#LR__0232
03fd0     0F 13 02 F6 | 	mov	arg01, local01
03fd4     01 14 06 F6 | 	mov	arg02, #1
03fd8     8C EA B1 FD | 	call	#__system__Right_S
03fdc     FD 12 02 F6 | 	mov	arg01, result1
03fe0     81 01 00 FF 
03fe4     56 15 06 F6 | 	mov	arg02, ##@LR__5147
03fe8     A0 C9 B1 FD | 	call	#__system___string_cmp
03fec     01 FA 55 F2 | 	cmps	result1, #1 wc
03ff0     08 00 90 CD |  if_b	jmp	#LR__0233
03ff4                 | LR__0232
03ff4     00 FA 05 F6 | 	mov	result1, #0
03ff8     30 00 90 FD | 	jmp	#LR__0234
03ffc                 | LR__0233
03ffc                 | ' return token_channel+val(right$(s,1))
03ffc     0F 13 02 F6 | 	mov	arg01, local01
04000     01 14 06 F6 | 	mov	arg02, #1
04004     60 EA B1 FD | 	call	#__system__Right_S
04008     FD 12 02 F6 | 	mov	arg01, result1
0400c     14 FD B1 FD | 	call	#__system____builtin_atof
04010     FD 14 02 F6 | 	mov	arg02, result1
04014     00 18 21 FF 
04018     00 12 06 F6 | 	mov	arg01, ##1110441984
0401c     28 F1 B1 FD | 	call	#__system___float_add
04020     FD 12 02 F6 | 	mov	arg01, result1
04024     00 14 06 F6 | 	mov	arg02, #0
04028     B4 F9 B1 FD | 	call	#__system___float_tointeger
0402c                 | LR__0234
0402c     A7 F0 03 F6 | 	mov	ptra, fp
04030     B2 00 A0 FD | 	call	#popregs_
04034                 | _ischannel_ret
04034     2D 00 64 FD | 	ret
04038                 | 
04038                 | ' 
04038                 | ' ' Check if the part is a predefined constant, return a constant or 0 if not found
04038                 | ' ' todo: add spin2/pasm constants for pin control
04038                 | ' 
04038                 | ' function isconstant(s as string) as integer
04038                 | _isconstant
04038     01 4A 05 F6 | 	mov	COUNT_, #1
0403c     A8 00 A0 FD | 	call	#pushregs_
04040                 | ' 
04040                 | ' select case s
04040     09 1F 02 F6 | 	mov	local01, arg01
04044     81 01 00 FF 
04048     58 15 06 F6 | 	mov	arg02, ##@LR__5148
0404c     0F 13 02 F6 | 	mov	arg01, local01
04050     38 C9 B1 FD | 	call	#__system___string_cmp
04054     00 FA 0D F2 | 	cmp	result1, #0 wz
04058     34 00 90 AD |  if_e	jmp	#LR__0240
0405c     81 01 00 FF 
04060     5E 15 06 F6 | 	mov	arg02, ##@LR__5149
04064     0F 13 02 F6 | 	mov	arg01, local01
04068     20 C9 B1 FD | 	call	#__system___string_cmp
0406c     00 FA 0D F2 | 	cmp	result1, #0 wz
04070     24 00 90 AD |  if_e	jmp	#LR__0241
04074     81 01 00 FF 
04078     65 15 06 F6 | 	mov	arg02, ##@LR__5150
0407c     0F 13 02 F6 | 	mov	arg01, local01
04080     08 C9 B1 FD | 	call	#__system___string_cmp
04084     00 FA 0D F2 | 	cmp	result1, #0 wz
04088     14 00 90 AD |  if_e	jmp	#LR__0242
0408c     18 00 90 FD | 	jmp	#LR__0243
04090                 | LR__0240
04090     01 FA 05 F6 | 	mov	result1, #1
04094     14 00 90 FD | 	jmp	#LR__0244
04098                 | LR__0241
04098     02 FA 05 F6 | 	mov	result1, #2
0409c     0C 00 90 FD | 	jmp	#LR__0244
040a0                 | LR__0242
040a0     04 FA 05 F6 | 	mov	result1, #4
040a4     04 00 90 FD | 	jmp	#LR__0244
040a8                 | LR__0243
040a8     00 FA 05 F6 | 	mov	result1, #0
040ac                 | LR__0244
040ac     A7 F0 03 F6 | 	mov	ptra, fp
040b0     B2 00 A0 FD | 	call	#popregs_
040b4                 | _isconstant_ret
040b4     2D 00 64 FD | 	ret
040b8                 | 
040b8                 | ' 
040b8                 | ' ' Check if the part is a predefined music note name, return a token or 0 if not found
040b8                 | ' 
040b8                 | ' function isnotename(s as string) as ulong
040b8                 | _isnotename
040b8     07 4A 05 F6 | 	mov	COUNT_, #7
040bc     A8 00 A0 FD | 	call	#pushregs_
040c0                 | ' if left$(s,1)<>"#" then return 0
040c0     09 1F 02 F6 | 	mov	local01, arg01
040c4     01 14 06 F6 | 	mov	arg02, #1
040c8     14 E9 B1 FD | 	call	#__system__Left_S
040cc     FD 12 02 F6 | 	mov	arg01, result1
040d0     81 01 00 FF 
040d4     6D 15 06 F6 | 	mov	arg02, ##@LR__5151
040d8     B0 C8 B1 FD | 	call	#__system___string_cmp
040dc     00 FA 0D F2 | 	cmp	result1, #0 wz
040e0     00 FA 05 56 |  if_ne	mov	result1, #0
040e4     30 03 90 5D |  if_ne	jmp	#LR__0273
040e8                 | ' if mid$(s,3,1)="#" then s1=mid$(s,2,2) else s1=mid$(s,2,1)
040e8     0F 13 02 F6 | 	mov	arg01, local01
040ec     03 14 06 F6 | 	mov	arg02, #3
040f0     01 16 06 F6 | 	mov	arg03, #1
040f4     00 EA B1 FD | 	call	#__system__Mid_S
040f8     FD 12 02 F6 | 	mov	arg01, result1
040fc     81 01 00 FF 
04100     6F 15 06 F6 | 	mov	arg02, ##@LR__5152
04104     84 C8 B1 FD | 	call	#__system___string_cmp
04108     00 FA 0D F2 | 	cmp	result1, #0 wz
0410c     18 00 90 5D |  if_ne	jmp	#LR__0250
04110     0F 13 02 F6 | 	mov	arg01, local01
04114     02 14 06 F6 | 	mov	arg02, #2
04118     02 16 06 F6 | 	mov	arg03, #2
0411c     D8 E9 B1 FD | 	call	#__system__Mid_S
04120     FD 20 02 F6 | 	mov	local02, result1
04124     14 00 90 FD | 	jmp	#LR__0251
04128                 | LR__0250
04128     0F 13 02 F6 | 	mov	arg01, local01
0412c     02 14 06 F6 | 	mov	arg02, #2
04130     01 16 06 F6 | 	mov	arg03, #1
04134     C0 E9 B1 FD | 	call	#__system__Mid_S
04138     FD 20 02 F6 | 	mov	local02, result1
0413c                 | LR__0251
0413c                 | ' if mid$(s,len(s)-1,1)<>"-" then nn=val(right$(s,1)) else nn=-1*val(right$(s,1))
0413c     0F 13 02 F6 | 	mov	arg01, local01
04140     09 23 02 F6 | 	mov	local03, arg01
04144     97 06 48 FB | 	callpa	#(@LR__0253-@LR__0252)>>2,fcache_load_ptr_
04148                 | LR__0252
04148     11 FB C9 FA | 	rdbyte	result1, local03 wz
0414c     01 22 06 51 |  if_ne	add	local03, #1
04150     F4 FF 9F 5D |  if_ne	jmp	#LR__0252
04154                 | LR__0253
04154     09 23 82 F1 | 	sub	local03, arg01
04158     11 15 02 F6 | 	mov	arg02, local03
0415c     01 14 86 F1 | 	sub	arg02, #1
04160     0F 13 02 F6 | 	mov	arg01, local01
04164     01 16 06 F6 | 	mov	arg03, #1
04168     8C E9 B1 FD | 	call	#__system__Mid_S
0416c     FD 12 02 F6 | 	mov	arg01, result1
04170     81 01 00 FF 
04174     71 15 06 F6 | 	mov	arg02, ##@LR__5153
04178     10 C8 B1 FD | 	call	#__system___string_cmp
0417c     00 FA 0D F2 | 	cmp	result1, #0 wz
04180     28 00 90 AD |  if_e	jmp	#LR__0254
04184     0F 13 02 F6 | 	mov	arg01, local01
04188     01 14 06 F6 | 	mov	arg02, #1
0418c     D8 E8 B1 FD | 	call	#__system__Right_S
04190     FD 12 02 F6 | 	mov	arg01, result1
04194     8C FB B1 FD | 	call	#__system____builtin_atof
04198     FD 12 02 F6 | 	mov	arg01, result1
0419c     00 14 06 F6 | 	mov	arg02, #0
041a0     3C F8 B1 FD | 	call	#__system___float_tointeger
041a4     FD 24 02 F6 | 	mov	local04, result1
041a8     34 00 90 FD | 	jmp	#LR__0255
041ac                 | LR__0254
041ac     0F 13 02 F6 | 	mov	arg01, local01
041b0     01 14 06 F6 | 	mov	arg02, #1
041b4     B0 E8 B1 FD | 	call	#__system__Right_S
041b8     FD 12 02 F6 | 	mov	arg01, result1
041bc     64 FB B1 FD | 	call	#__system____builtin_atof
041c0     FD 14 02 F6 | 	mov	arg02, result1
041c4     00 C0 5F FF 
041c8     00 12 06 F6 | 	mov	arg01, ##-1082130432
041cc     48 F3 B1 FD | 	call	#__system___float_mul
041d0     FD 12 02 F6 | 	mov	arg01, result1
041d4     00 14 06 F6 | 	mov	arg02, #0
041d8     04 F8 B1 FD | 	call	#__system___float_tointeger
041dc     FD 24 02 F6 | 	mov	local04, result1
041e0                 | LR__0255
041e0                 | ' 
041e0                 | ' if nn=0 andalso right$(s,1)<>"0" then nn=4
041e0     00 24 0E F2 | 	cmp	local04, #0 wz
041e4     24 00 90 5D |  if_ne	jmp	#LR__0256
041e8     0F 13 02 F6 | 	mov	arg01, local01
041ec     01 14 06 F6 | 	mov	arg02, #1
041f0     74 E8 B1 FD | 	call	#__system__Right_S
041f4     FD 12 02 F6 | 	mov	arg01, result1
041f8     81 01 00 FF 
041fc     73 15 06 F6 | 	mov	arg02, ##@LR__5154
04200     88 C7 B1 FD | 	call	#__system___string_cmp
04204     00 FA 0D F2 | 	cmp	result1, #0 wz
04208     04 24 06 56 |  if_ne	mov	local04, #4
0420c                 | LR__0256
0420c                 | ' 
0420c                 | ' select case s1
0420c     10 27 02 F6 | 	mov	local05, local02
04210     81 01 00 FF 
04214     75 15 06 F6 | 	mov	arg02, ##@LR__5155
04218     13 13 02 F6 | 	mov	arg01, local05
0421c     6C C7 B1 FD | 	call	#__system___string_cmp
04220     00 FA 0D F2 | 	cmp	result1, #0 wz
04224     24 01 90 AD |  if_e	jmp	#LR__0257
04228     81 01 00 FF 
0422c     77 15 06 F6 | 	mov	arg02, ##@LR__5156
04230     13 13 02 F6 | 	mov	arg01, local05
04234     54 C7 B1 FD | 	call	#__system___string_cmp
04238     00 FA 0D F2 | 	cmp	result1, #0 wz
0423c     18 01 90 AD |  if_e	jmp	#LR__0258
04240     81 01 00 FF 
04244     7A 15 06 F6 | 	mov	arg02, ##@LR__5157
04248     13 13 02 F6 | 	mov	arg01, local05
0424c     3C C7 B1 FD | 	call	#__system___string_cmp
04250     00 FA 0D F2 | 	cmp	result1, #0 wz
04254     0C 01 90 AD |  if_e	jmp	#LR__0259
04258     81 01 00 FF 
0425c     7C 15 06 F6 | 	mov	arg02, ##@LR__5158
04260     13 13 02 F6 | 	mov	arg01, local05
04264     24 C7 B1 FD | 	call	#__system___string_cmp
04268     00 FA 0D F2 | 	cmp	result1, #0 wz
0426c     00 01 90 AD |  if_e	jmp	#LR__0260
04270     81 01 00 FF 
04274     7F 15 06 F6 | 	mov	arg02, ##@LR__5159
04278     13 13 02 F6 | 	mov	arg01, local05
0427c     0C C7 B1 FD | 	call	#__system___string_cmp
04280     00 FA 0D F2 | 	cmp	result1, #0 wz
04284     F4 00 90 AD |  if_e	jmp	#LR__0261
04288     81 01 00 FF 
0428c     81 15 06 F6 | 	mov	arg02, ##@LR__5160
04290     13 13 02 F6 | 	mov	arg01, local05
04294     F4 C6 B1 FD | 	call	#__system___string_cmp
04298     00 FA 0D F2 | 	cmp	result1, #0 wz
0429c     E8 00 90 AD |  if_e	jmp	#LR__0262
042a0     81 01 00 FF 
042a4     83 15 06 F6 | 	mov	arg02, ##@LR__5161
042a8     13 13 02 F6 | 	mov	arg01, local05
042ac     DC C6 B1 FD | 	call	#__system___string_cmp
042b0     00 FA 0D F2 | 	cmp	result1, #0 wz
042b4     DC 00 90 AD |  if_e	jmp	#LR__0263
042b8     81 01 00 FF 
042bc     86 15 06 F6 | 	mov	arg02, ##@LR__5162
042c0     13 13 02 F6 | 	mov	arg01, local05
042c4     C4 C6 B1 FD | 	call	#__system___string_cmp
042c8     00 FA 0D F2 | 	cmp	result1, #0 wz
042cc     D0 00 90 AD |  if_e	jmp	#LR__0264
042d0     81 01 00 FF 
042d4     88 15 06 F6 | 	mov	arg02, ##@LR__5163
042d8     13 13 02 F6 | 	mov	arg01, local05
042dc     AC C6 B1 FD | 	call	#__system___string_cmp
042e0     00 FA 0D F2 | 	cmp	result1, #0 wz
042e4     C4 00 90 AD |  if_e	jmp	#LR__0265
042e8     81 01 00 FF 
042ec     8B 15 06 F6 | 	mov	arg02, ##@LR__5164
042f0     13 13 02 F6 | 	mov	arg01, local05
042f4     94 C6 B1 FD | 	call	#__system___string_cmp
042f8     00 FA 0D F2 | 	cmp	result1, #0 wz
042fc     B8 00 90 AD |  if_e	jmp	#LR__0266
04300     81 01 00 FF 
04304     8D 15 06 F6 | 	mov	arg02, ##@LR__5165
04308     13 13 02 F6 | 	mov	arg01, local05
0430c     7C C6 B1 FD | 	call	#__system___string_cmp
04310     00 FA 0D F2 | 	cmp	result1, #0 wz
04314     AC 00 90 AD |  if_e	jmp	#LR__0267
04318     81 01 00 FF 
0431c     90 15 06 F6 | 	mov	arg02, ##@LR__5166
04320     13 13 02 F6 | 	mov	arg01, local05
04324     64 C6 B1 FD | 	call	#__system___string_cmp
04328     00 FA 0D F2 | 	cmp	result1, #0 wz
0432c     A0 00 90 AD |  if_e	jmp	#LR__0268
04330     81 01 00 FF 
04334     92 15 06 F6 | 	mov	arg02, ##@LR__5167
04338     13 13 02 F6 | 	mov	arg01, local05
0433c     4C C6 B1 FD | 	call	#__system___string_cmp
04340     00 FA 0D F2 | 	cmp	result1, #0 wz
04344     94 00 90 AD |  if_e	jmp	#LR__0269
04348     9C 00 90 FD | 	jmp	#LR__0270
0434c                 | LR__0257
0434c     01 00 00 FF 
04350     00 29 06 F6 | 	mov	local06, ##768
04354     98 00 90 FD | 	jmp	#LR__0271
04358                 | LR__0258
04358     01 00 00 FF 
0435c     01 29 06 F6 | 	mov	local06, ##769
04360     8C 00 90 FD | 	jmp	#LR__0271
04364                 | LR__0259
04364     01 00 00 FF 
04368     02 29 06 F6 | 	mov	local06, ##770
0436c     80 00 90 FD | 	jmp	#LR__0271
04370                 | LR__0260
04370     01 00 00 FF 
04374     03 29 06 F6 | 	mov	local06, ##771
04378     74 00 90 FD | 	jmp	#LR__0271
0437c                 | LR__0261
0437c     01 00 00 FF 
04380     04 29 06 F6 | 	mov	local06, ##772
04384     68 00 90 FD | 	jmp	#LR__0271
04388                 | LR__0262
04388     01 00 00 FF 
0438c     05 29 06 F6 | 	mov	local06, ##773
04390     5C 00 90 FD | 	jmp	#LR__0271
04394                 | LR__0263
04394     01 00 00 FF 
04398     06 29 06 F6 | 	mov	local06, ##774
0439c     50 00 90 FD | 	jmp	#LR__0271
043a0                 | LR__0264
043a0     01 00 00 FF 
043a4     07 29 06 F6 | 	mov	local06, ##775
043a8     44 00 90 FD | 	jmp	#LR__0271
043ac                 | LR__0265
043ac     01 00 00 FF 
043b0     08 29 06 F6 | 	mov	local06, ##776
043b4     38 00 90 FD | 	jmp	#LR__0271
043b8                 | LR__0266
043b8     01 00 00 FF 
043bc     09 29 06 F6 | 	mov	local06, ##777
043c0     2C 00 90 FD | 	jmp	#LR__0271
043c4                 | LR__0267
043c4     01 00 00 FF 
043c8     0A 29 06 F6 | 	mov	local06, ##778
043cc     20 00 90 FD | 	jmp	#LR__0271
043d0                 | LR__0268
043d0     01 00 00 FF 
043d4     0B 29 06 F6 | 	mov	local06, ##779
043d8     14 00 90 FD | 	jmp	#LR__0271
043dc                 | LR__0269
043dc     01 00 00 FF 
043e0     0B 29 06 F6 | 	mov	local06, ##779
043e4     08 00 90 FD | 	jmp	#LR__0271
043e8                 | LR__0270
043e8     00 FA 05 F6 | 	mov	result1, #0
043ec     28 00 90 FD | 	jmp	#LR__0273
043f0                 | LR__0271
043f0                 | ' if nn>=-1 andalso nn<10 then token=token+12*nn
043f0     FF FF 7F FF 
043f4     FF 25 56 F2 | 	cmps	local04, ##-1 wc
043f8     18 00 90 CD |  if_b	jmp	#LR__0272
043fc     0A 24 56 F2 | 	cmps	local04, #10 wc
04400     12 2B 02 C6 |  if_b	mov	local07, local04
04404     01 2A 66 C0 |  if_b	shl	local07, #1
04408     12 2B 02 C1 |  if_b	add	local07, local04
0440c     02 2A 66 C0 |  if_b	shl	local07, #2
04410     15 29 02 C1 |  if_b	add	local06, local07
04414                 | LR__0272
04414                 | ' return token
04414     14 FB 01 F6 | 	mov	result1, local06
04418                 | LR__0273
04418     A7 F0 03 F6 | 	mov	ptra, fp
0441c     B2 00 A0 FD | 	call	#popregs_
04420                 | _isnotename_ret
04420     2D 00 64 FD | 	ret
04424                 | 
04424                 | ' 
04424                 | ' ' Check if the part is a separator, return a token or 0 if not found
04424                 | ' 
04424                 | ' function isseparator(s as string) as ubyte
04424                 | _isseparator
04424     01 4A 05 F6 | 	mov	COUNT_, #1
04428     A8 00 A0 FD | 	call	#pushregs_
0442c                 | ' 
0442c                 | ' select case s
0442c     09 1F 02 F6 | 	mov	local01, arg01
04430     81 01 00 FF 
04434     94 15 06 F6 | 	mov	arg02, ##@LR__5168
04438     0F 13 02 F6 | 	mov	arg01, local01
0443c     4C C5 B1 FD | 	call	#__system___string_cmp
04440     00 FA 0D F2 | 	cmp	result1, #0 wz
04444     54 01 90 AD |  if_e	jmp	#LR__0280
04448     81 01 00 FF 
0444c     96 15 06 F6 | 	mov	arg02, ##@LR__5169
04450     0F 13 02 F6 | 	mov	arg01, local01
04454     34 C5 B1 FD | 	call	#__system___string_cmp
04458     00 FA 0D F2 | 	cmp	result1, #0 wz
0445c     44 01 90 AD |  if_e	jmp	#LR__0281
04460     81 01 00 FF 
04464     98 15 06 F6 | 	mov	arg02, ##@LR__5170
04468     0F 13 02 F6 | 	mov	arg01, local01
0446c     1C C5 B1 FD | 	call	#__system___string_cmp
04470     00 FA 0D F2 | 	cmp	result1, #0 wz
04474     34 01 90 AD |  if_e	jmp	#LR__0282
04478     81 01 00 FF 
0447c     9A 15 06 F6 | 	mov	arg02, ##@LR__5171
04480     0F 13 02 F6 | 	mov	arg01, local01
04484     04 C5 B1 FD | 	call	#__system___string_cmp
04488     00 FA 0D F2 | 	cmp	result1, #0 wz
0448c     24 01 90 AD |  if_e	jmp	#LR__0283
04490     81 01 00 FF 
04494     9C 15 06 F6 | 	mov	arg02, ##@LR__5172
04498     0F 13 02 F6 | 	mov	arg01, local01
0449c     EC C4 B1 FD | 	call	#__system___string_cmp
044a0     00 FA 0D F2 | 	cmp	result1, #0 wz
044a4     14 01 90 AD |  if_e	jmp	#LR__0284
044a8     81 01 00 FF 
044ac     9E 15 06 F6 | 	mov	arg02, ##@LR__5173
044b0     0F 13 02 F6 | 	mov	arg01, local01
044b4     D4 C4 B1 FD | 	call	#__system___string_cmp
044b8     00 FA 0D F2 | 	cmp	result1, #0 wz
044bc     04 01 90 AD |  if_e	jmp	#LR__0285
044c0     81 01 00 FF 
044c4     A0 15 06 F6 | 	mov	arg02, ##@LR__5174
044c8     0F 13 02 F6 | 	mov	arg01, local01
044cc     BC C4 B1 FD | 	call	#__system___string_cmp
044d0     00 FA 0D F2 | 	cmp	result1, #0 wz
044d4     F4 00 90 AD |  if_e	jmp	#LR__0286
044d8     81 01 00 FF 
044dc     A2 15 06 F6 | 	mov	arg02, ##@LR__5175
044e0     0F 13 02 F6 | 	mov	arg01, local01
044e4     A4 C4 B1 FD | 	call	#__system___string_cmp
044e8     00 FA 0D F2 | 	cmp	result1, #0 wz
044ec     E4 00 90 AD |  if_e	jmp	#LR__0287
044f0     81 01 00 FF 
044f4     A4 15 06 F6 | 	mov	arg02, ##@LR__5176
044f8     0F 13 02 F6 | 	mov	arg01, local01
044fc     8C C4 B1 FD | 	call	#__system___string_cmp
04500     00 FA 0D F2 | 	cmp	result1, #0 wz
04504     D4 00 90 AD |  if_e	jmp	#LR__0288
04508     81 01 00 FF 
0450c     A6 15 06 F6 | 	mov	arg02, ##@LR__5177
04510     0F 13 02 F6 | 	mov	arg01, local01
04514     74 C4 B1 FD | 	call	#__system___string_cmp
04518     00 FA 0D F2 | 	cmp	result1, #0 wz
0451c     C4 00 90 AD |  if_e	jmp	#LR__0289
04520     81 01 00 FF 
04524     A8 15 06 F6 | 	mov	arg02, ##@LR__5178
04528     0F 13 02 F6 | 	mov	arg01, local01
0452c     5C C4 B1 FD | 	call	#__system___string_cmp
04530     00 FA 0D F2 | 	cmp	result1, #0 wz
04534     B4 00 90 AD |  if_e	jmp	#LR__0290
04538     81 01 00 FF 
0453c     AA 15 06 F6 | 	mov	arg02, ##@LR__5179
04540     0F 13 02 F6 | 	mov	arg01, local01
04544     44 C4 B1 FD | 	call	#__system___string_cmp
04548     00 FA 0D F2 | 	cmp	result1, #0 wz
0454c     A4 00 90 AD |  if_e	jmp	#LR__0291
04550     81 01 00 FF 
04554     AC 15 06 F6 | 	mov	arg02, ##@LR__5180
04558     0F 13 02 F6 | 	mov	arg01, local01
0455c     2C C4 B1 FD | 	call	#__system___string_cmp
04560     00 FA 0D F2 | 	cmp	result1, #0 wz
04564     94 00 90 AD |  if_e	jmp	#LR__0292
04568     81 01 00 FF 
0456c     AE 15 06 F6 | 	mov	arg02, ##@LR__5181
04570     0F 13 02 F6 | 	mov	arg01, local01
04574     14 C4 B1 FD | 	call	#__system___string_cmp
04578     00 FA 0D F2 | 	cmp	result1, #0 wz
0457c     84 00 90 AD |  if_e	jmp	#LR__0293
04580     81 01 00 FF 
04584     B0 15 06 F6 | 	mov	arg02, ##@LR__5182
04588     0F 13 02 F6 | 	mov	arg01, local01
0458c     FC C3 B1 FD | 	call	#__system___string_cmp
04590     00 FA 0D F2 | 	cmp	result1, #0 wz
04594     74 00 90 AD |  if_e	jmp	#LR__0294
04598     78 00 90 FD | 	jmp	#LR__0295
0459c                 | LR__0280
0459c     01 FA 05 F6 | 	mov	result1, #1
045a0     74 00 90 FD | 	jmp	#LR__0296
045a4                 | LR__0281
045a4     02 FA 05 F6 | 	mov	result1, #2
045a8     6C 00 90 FD | 	jmp	#LR__0296
045ac                 | LR__0282
045ac     1B FA 05 F6 | 	mov	result1, #27
045b0     64 00 90 FD | 	jmp	#LR__0296
045b4                 | LR__0283
045b4     11 FA 05 F6 | 	mov	result1, #17
045b8     5C 00 90 FD | 	jmp	#LR__0296
045bc                 | LR__0284
045bc     05 FA 05 F6 | 	mov	result1, #5
045c0     54 00 90 FD | 	jmp	#LR__0296
045c4                 | LR__0285
045c4     06 FA 05 F6 | 	mov	result1, #6
045c8     4C 00 90 FD | 	jmp	#LR__0296
045cc                 | LR__0286
045cc     12 FA 05 F6 | 	mov	result1, #18
045d0     44 00 90 FD | 	jmp	#LR__0296
045d4                 | LR__0287
045d4     13 FA 05 F6 | 	mov	result1, #19
045d8     3C 00 90 FD | 	jmp	#LR__0296
045dc                 | LR__0288
045dc     0C FA 05 F6 | 	mov	result1, #12
045e0     34 00 90 FD | 	jmp	#LR__0296
045e4                 | LR__0289
045e4     14 FA 05 F6 | 	mov	result1, #20
045e8     2C 00 90 FD | 	jmp	#LR__0296
045ec                 | LR__0290
045ec     15 FA 05 F6 | 	mov	result1, #21
045f0     24 00 90 FD | 	jmp	#LR__0296
045f4                 | LR__0291
045f4     16 FA 05 F6 | 	mov	result1, #22
045f8     1C 00 90 FD | 	jmp	#LR__0296
045fc                 | LR__0292
045fc     FF FB 05 F6 | 	mov	result1, #511
04600     14 00 90 FD | 	jmp	#LR__0296
04604                 | LR__0293
04604     0F FA 05 F6 | 	mov	result1, #15
04608     0C 00 90 FD | 	jmp	#LR__0296
0460c                 | LR__0294
0460c     10 FA 05 F6 | 	mov	result1, #16
04610     04 00 90 FD | 	jmp	#LR__0296
04614                 | LR__0295
04614     00 FA 05 F6 | 	mov	result1, #0
04618                 | LR__0296
04618     A7 F0 03 F6 | 	mov	ptra, fp
0461c     B2 00 A0 FD | 	call	#popregs_
04620                 | _isseparator_ret
04620     2D 00 64 FD | 	ret
04624                 | 
04624                 | ' 
04624                 | ' ' Check if the part is a command than doesn't return a value, return a token or 0 if not found
04624                 | ' 
04624                 | ' function iscommand(s as string) as ubyte
04624                 | _iscommand
04624     01 4A 05 F6 | 	mov	COUNT_, #1
04628     A8 00 A0 FD | 	call	#pushregs_
0462c                 | ' 
0462c                 | ' select case s
0462c     09 1F 02 F6 | 	mov	local01, arg01
04630     81 01 00 FF 
04634     B4 15 06 F6 | 	mov	arg02, ##@LR__5184
04638     0F 13 02 F6 | 	mov	arg01, local01
0463c     4C C3 B1 FD | 	call	#__system___string_cmp
04640     00 FA 0D F2 | 	cmp	result1, #0 wz
04644     44 0B 90 AD |  if_e	jmp	#LR__0300
04648     81 01 00 FF 
0464c     B9 15 06 F6 | 	mov	arg02, ##@LR__5185
04650     0F 13 02 F6 | 	mov	arg01, local01
04654     34 C3 B1 FD | 	call	#__system___string_cmp
04658     00 FA 0D F2 | 	cmp	result1, #0 wz
0465c     34 0B 90 AD |  if_e	jmp	#LR__0301
04660     81 01 00 FF 
04664     BC 15 06 F6 | 	mov	arg02, ##@LR__5186
04668     0F 13 02 F6 | 	mov	arg01, local01
0466c     1C C3 B1 FD | 	call	#__system___string_cmp
04670     00 FA 0D F2 | 	cmp	result1, #0 wz
04674     24 0B 90 AD |  if_e	jmp	#LR__0302
04678     81 01 00 FF 
0467c     C0 15 06 F6 | 	mov	arg02, ##@LR__5187
04680     0F 13 02 F6 | 	mov	arg01, local01
04684     04 C3 B1 FD | 	call	#__system___string_cmp
04688     00 FA 0D F2 | 	cmp	result1, #0 wz
0468c     14 0B 90 AD |  if_e	jmp	#LR__0303
04690     81 01 00 FF 
04694     C5 15 06 F6 | 	mov	arg02, ##@LR__5188
04698     0F 13 02 F6 | 	mov	arg01, local01
0469c     EC C2 B1 FD | 	call	#__system___string_cmp
046a0     00 FA 0D F2 | 	cmp	result1, #0 wz
046a4     04 0B 90 AD |  if_e	jmp	#LR__0304
046a8     81 01 00 FF 
046ac     C9 15 06 F6 | 	mov	arg02, ##@LR__5189
046b0     0F 13 02 F6 | 	mov	arg01, local01
046b4     D4 C2 B1 FD | 	call	#__system___string_cmp
046b8     00 FA 0D F2 | 	cmp	result1, #0 wz
046bc     F4 0A 90 AD |  if_e	jmp	#LR__0305
046c0     81 01 00 FF 
046c4     D4 15 06 F6 | 	mov	arg02, ##@LR__5190
046c8     0F 13 02 F6 | 	mov	arg01, local01
046cc     BC C2 B1 FD | 	call	#__system___string_cmp
046d0     00 FA 0D F2 | 	cmp	result1, #0 wz
046d4     E4 0A 90 AD |  if_e	jmp	#LR__0306
046d8     81 01 00 FF 
046dc     D8 15 06 F6 | 	mov	arg02, ##@LR__5191
046e0     0F 13 02 F6 | 	mov	arg01, local01
046e4     A4 C2 B1 FD | 	call	#__system___string_cmp
046e8     00 FA 0D F2 | 	cmp	result1, #0 wz
046ec     D4 0A 90 AD |  if_e	jmp	#LR__0307
046f0     81 01 00 FF 
046f4     E2 15 06 F6 | 	mov	arg02, ##@LR__5192
046f8     0F 13 02 F6 | 	mov	arg01, local01
046fc     8C C2 B1 FD | 	call	#__system___string_cmp
04700     00 FA 0D F2 | 	cmp	result1, #0 wz
04704     C4 0A 90 AD |  if_e	jmp	#LR__0308
04708     81 01 00 FF 
0470c     E6 15 06 F6 | 	mov	arg02, ##@LR__5193
04710     0F 13 02 F6 | 	mov	arg01, local01
04714     74 C2 B1 FD | 	call	#__system___string_cmp
04718     00 FA 0D F2 | 	cmp	result1, #0 wz
0471c     B4 0A 90 AD |  if_e	jmp	#LR__0309
04720     81 01 00 FF 
04724     F0 15 06 F6 | 	mov	arg02, ##@LR__5194
04728     0F 13 02 F6 | 	mov	arg01, local01
0472c     5C C2 B1 FD | 	call	#__system___string_cmp
04730     00 FA 0D F2 | 	cmp	result1, #0 wz
04734     A4 0A 90 AD |  if_e	jmp	#LR__0310
04738     81 01 00 FF 
0473c     F4 15 06 F6 | 	mov	arg02, ##@LR__5195
04740     0F 13 02 F6 | 	mov	arg01, local01
04744     44 C2 B1 FD | 	call	#__system___string_cmp
04748     00 FA 0D F2 | 	cmp	result1, #0 wz
0474c     94 0A 90 AD |  if_e	jmp	#LR__0311
04750     81 01 00 FF 
04754     FF 15 06 F6 | 	mov	arg02, ##@LR__5196
04758     0F 13 02 F6 | 	mov	arg01, local01
0475c     2C C2 B1 FD | 	call	#__system___string_cmp
04760     00 FA 0D F2 | 	cmp	result1, #0 wz
04764     84 0A 90 AD |  if_e	jmp	#LR__0312
04768     82 01 00 FF 
0476c     03 14 06 F6 | 	mov	arg02, ##@LR__5197
04770     0F 13 02 F6 | 	mov	arg01, local01
04774     14 C2 B1 FD | 	call	#__system___string_cmp
04778     00 FA 0D F2 | 	cmp	result1, #0 wz
0477c     74 0A 90 AD |  if_e	jmp	#LR__0313
04780     82 01 00 FF 
04784     0A 14 06 F6 | 	mov	arg02, ##@LR__5198
04788     0F 13 02 F6 | 	mov	arg01, local01
0478c     FC C1 B1 FD | 	call	#__system___string_cmp
04790     00 FA 0D F2 | 	cmp	result1, #0 wz
04794     64 0A 90 AD |  if_e	jmp	#LR__0314
04798     82 01 00 FF 
0479c     0E 14 06 F6 | 	mov	arg02, ##@LR__5199
047a0     0F 13 02 F6 | 	mov	arg01, local01
047a4     E4 C1 B1 FD | 	call	#__system___string_cmp
047a8     00 FA 0D F2 | 	cmp	result1, #0 wz
047ac     54 0A 90 AD |  if_e	jmp	#LR__0315
047b0     82 01 00 FF 
047b4     14 14 06 F6 | 	mov	arg02, ##@LR__5200
047b8     0F 13 02 F6 | 	mov	arg01, local01
047bc     CC C1 B1 FD | 	call	#__system___string_cmp
047c0     00 FA 0D F2 | 	cmp	result1, #0 wz
047c4     44 0A 90 AD |  if_e	jmp	#LR__0316
047c8     82 01 00 FF 
047cc     1A 14 06 F6 | 	mov	arg02, ##@LR__5201
047d0     0F 13 02 F6 | 	mov	arg01, local01
047d4     B4 C1 B1 FD | 	call	#__system___string_cmp
047d8     00 FA 0D F2 | 	cmp	result1, #0 wz
047dc     34 0A 90 AD |  if_e	jmp	#LR__0317
047e0     82 01 00 FF 
047e4     1E 14 06 F6 | 	mov	arg02, ##@LR__5202
047e8     0F 13 02 F6 | 	mov	arg01, local01
047ec     9C C1 B1 FD | 	call	#__system___string_cmp
047f0     00 FA 0D F2 | 	cmp	result1, #0 wz
047f4     24 0A 90 AD |  if_e	jmp	#LR__0318
047f8     82 01 00 FF 
047fc     24 14 06 F6 | 	mov	arg02, ##@LR__5203
04800     0F 13 02 F6 | 	mov	arg01, local01
04804     84 C1 B1 FD | 	call	#__system___string_cmp
04808     00 FA 0D F2 | 	cmp	result1, #0 wz
0480c     14 0A 90 AD |  if_e	jmp	#LR__0319
04810     82 01 00 FF 
04814     27 14 06 F6 | 	mov	arg02, ##@LR__5204
04818     0F 13 02 F6 | 	mov	arg01, local01
0481c     6C C1 B1 FD | 	call	#__system___string_cmp
04820     00 FA 0D F2 | 	cmp	result1, #0 wz
04824     04 0A 90 AD |  if_e	jmp	#LR__0320
04828     82 01 00 FF 
0482c     2D 14 06 F6 | 	mov	arg02, ##@LR__5205
04830     0F 13 02 F6 | 	mov	arg01, local01
04834     54 C1 B1 FD | 	call	#__system___string_cmp
04838     00 FA 0D F2 | 	cmp	result1, #0 wz
0483c     F4 09 90 AD |  if_e	jmp	#LR__0321
04840     82 01 00 FF 
04844     31 14 06 F6 | 	mov	arg02, ##@LR__5206
04848     0F 13 02 F6 | 	mov	arg01, local01
0484c     3C C1 B1 FD | 	call	#__system___string_cmp
04850     00 FA 0D F2 | 	cmp	result1, #0 wz
04854     E4 09 90 AD |  if_e	jmp	#LR__0322
04858     82 01 00 FF 
0485c     38 14 06 F6 | 	mov	arg02, ##@LR__5207
04860     0F 13 02 F6 | 	mov	arg01, local01
04864     24 C1 B1 FD | 	call	#__system___string_cmp
04868     00 FA 0D F2 | 	cmp	result1, #0 wz
0486c     D4 09 90 AD |  if_e	jmp	#LR__0323
04870     82 01 00 FF 
04874     3F 14 06 F6 | 	mov	arg02, ##@LR__5208
04878     0F 13 02 F6 | 	mov	arg01, local01
0487c     0C C1 B1 FD | 	call	#__system___string_cmp
04880     00 FA 0D F2 | 	cmp	result1, #0 wz
04884     C4 09 90 AD |  if_e	jmp	#LR__0324
04888     82 01 00 FF 
0488c     46 14 06 F6 | 	mov	arg02, ##@LR__5209
04890     0F 13 02 F6 | 	mov	arg01, local01
04894     F4 C0 B1 FD | 	call	#__system___string_cmp
04898     00 FA 0D F2 | 	cmp	result1, #0 wz
0489c     B4 09 90 AD |  if_e	jmp	#LR__0325
048a0     82 01 00 FF 
048a4     50 14 06 F6 | 	mov	arg02, ##@LR__5210
048a8     0F 13 02 F6 | 	mov	arg01, local01
048ac     DC C0 B1 FD | 	call	#__system___string_cmp
048b0     00 FA 0D F2 | 	cmp	result1, #0 wz
048b4     A4 09 90 AD |  if_e	jmp	#LR__0326
048b8     82 01 00 FF 
048bc     54 14 06 F6 | 	mov	arg02, ##@LR__5211
048c0     0F 13 02 F6 | 	mov	arg01, local01
048c4     C4 C0 B1 FD | 	call	#__system___string_cmp
048c8     00 FA 0D F2 | 	cmp	result1, #0 wz
048cc     94 09 90 AD |  if_e	jmp	#LR__0327
048d0     82 01 00 FF 
048d4     58 14 06 F6 | 	mov	arg02, ##@LR__5212
048d8     0F 13 02 F6 | 	mov	arg01, local01
048dc     AC C0 B1 FD | 	call	#__system___string_cmp
048e0     00 FA 0D F2 | 	cmp	result1, #0 wz
048e4     84 09 90 AD |  if_e	jmp	#LR__0328
048e8     82 01 00 FF 
048ec     5C 14 06 F6 | 	mov	arg02, ##@LR__5213
048f0     0F 13 02 F6 | 	mov	arg01, local01
048f4     94 C0 B1 FD | 	call	#__system___string_cmp
048f8     00 FA 0D F2 | 	cmp	result1, #0 wz
048fc     74 09 90 AD |  if_e	jmp	#LR__0329
04900     82 01 00 FF 
04904     60 14 06 F6 | 	mov	arg02, ##@LR__5214
04908     0F 13 02 F6 | 	mov	arg01, local01
0490c     7C C0 B1 FD | 	call	#__system___string_cmp
04910     00 FA 0D F2 | 	cmp	result1, #0 wz
04914     64 09 90 AD |  if_e	jmp	#LR__0330
04918     82 01 00 FF 
0491c     66 14 06 F6 | 	mov	arg02, ##@LR__5215
04920     0F 13 02 F6 | 	mov	arg01, local01
04924     64 C0 B1 FD | 	call	#__system___string_cmp
04928     00 FA 0D F2 | 	cmp	result1, #0 wz
0492c     54 09 90 AD |  if_e	jmp	#LR__0331
04930     82 01 00 FF 
04934     6B 14 06 F6 | 	mov	arg02, ##@LR__5216
04938     0F 13 02 F6 | 	mov	arg01, local01
0493c     4C C0 B1 FD | 	call	#__system___string_cmp
04940     00 FA 0D F2 | 	cmp	result1, #0 wz
04944     44 09 90 AD |  if_e	jmp	#LR__0332
04948     82 01 00 FF 
0494c     6F 14 06 F6 | 	mov	arg02, ##@LR__5217
04950     0F 13 02 F6 | 	mov	arg01, local01
04954     34 C0 B1 FD | 	call	#__system___string_cmp
04958     00 FA 0D F2 | 	cmp	result1, #0 wz
0495c     34 09 90 AD |  if_e	jmp	#LR__0333
04960     82 01 00 FF 
04964     74 14 06 F6 | 	mov	arg02, ##@LR__5218
04968     0F 13 02 F6 | 	mov	arg01, local01
0496c     1C C0 B1 FD | 	call	#__system___string_cmp
04970     00 FA 0D F2 | 	cmp	result1, #0 wz
04974     24 09 90 AD |  if_e	jmp	#LR__0334
04978     82 01 00 FF 
0497c     78 14 06 F6 | 	mov	arg02, ##@LR__5219
04980     0F 13 02 F6 | 	mov	arg01, local01
04984     04 C0 B1 FD | 	call	#__system___string_cmp
04988     00 FA 0D F2 | 	cmp	result1, #0 wz
0498c     14 09 90 AD |  if_e	jmp	#LR__0335
04990     82 01 00 FF 
04994     7E 14 06 F6 | 	mov	arg02, ##@LR__5220
04998     0F 13 02 F6 | 	mov	arg01, local01
0499c     EC BF B1 FD | 	call	#__system___string_cmp
049a0     00 FA 0D F2 | 	cmp	result1, #0 wz
049a4     04 09 90 AD |  if_e	jmp	#LR__0336
049a8     82 01 00 FF 
049ac     81 14 06 F6 | 	mov	arg02, ##@LR__5221
049b0     0F 13 02 F6 | 	mov	arg01, local01
049b4     D4 BF B1 FD | 	call	#__system___string_cmp
049b8     00 FA 0D F2 | 	cmp	result1, #0 wz
049bc     F4 08 90 AD |  if_e	jmp	#LR__0337
049c0     82 01 00 FF 
049c4     89 14 06 F6 | 	mov	arg02, ##@LR__5222
049c8     0F 13 02 F6 | 	mov	arg01, local01
049cc     BC BF B1 FD | 	call	#__system___string_cmp
049d0     00 FA 0D F2 | 	cmp	result1, #0 wz
049d4     E4 08 90 AD |  if_e	jmp	#LR__0338
049d8     82 01 00 FF 
049dc     8D 14 06 F6 | 	mov	arg02, ##@LR__5223
049e0     0F 13 02 F6 | 	mov	arg01, local01
049e4     A4 BF B1 FD | 	call	#__system___string_cmp
049e8     00 FA 0D F2 | 	cmp	result1, #0 wz
049ec     D4 08 90 AD |  if_e	jmp	#LR__0339
049f0     82 01 00 FF 
049f4     92 14 06 F6 | 	mov	arg02, ##@LR__5224
049f8     0F 13 02 F6 | 	mov	arg01, local01
049fc     8C BF B1 FD | 	call	#__system___string_cmp
04a00     00 FA 0D F2 | 	cmp	result1, #0 wz
04a04     C4 08 90 AD |  if_e	jmp	#LR__0340
04a08     82 01 00 FF 
04a0c     96 14 06 F6 | 	mov	arg02, ##@LR__5225
04a10     0F 13 02 F6 | 	mov	arg01, local01
04a14     74 BF B1 FD | 	call	#__system___string_cmp
04a18     00 FA 0D F2 | 	cmp	result1, #0 wz
04a1c     B4 08 90 AD |  if_e	jmp	#LR__0341
04a20     82 01 00 FF 
04a24     9B 14 06 F6 | 	mov	arg02, ##@LR__5226
04a28     0F 13 02 F6 | 	mov	arg01, local01
04a2c     5C BF B1 FD | 	call	#__system___string_cmp
04a30     00 FA 0D F2 | 	cmp	result1, #0 wz
04a34     A4 08 90 AD |  if_e	jmp	#LR__0342
04a38     82 01 00 FF 
04a3c     9F 14 06 F6 | 	mov	arg02, ##@LR__5227
04a40     0F 13 02 F6 | 	mov	arg01, local01
04a44     44 BF B1 FD | 	call	#__system___string_cmp
04a48     00 FA 0D F2 | 	cmp	result1, #0 wz
04a4c     94 08 90 AD |  if_e	jmp	#LR__0343
04a50     82 01 00 FF 
04a54     A2 14 06 F6 | 	mov	arg02, ##@LR__5228
04a58     0F 13 02 F6 | 	mov	arg01, local01
04a5c     2C BF B1 FD | 	call	#__system___string_cmp
04a60     00 FA 0D F2 | 	cmp	result1, #0 wz
04a64     84 08 90 AD |  if_e	jmp	#LR__0344
04a68     82 01 00 FF 
04a6c     A8 14 06 F6 | 	mov	arg02, ##@LR__5229
04a70     0F 13 02 F6 | 	mov	arg01, local01
04a74     14 BF B1 FD | 	call	#__system___string_cmp
04a78     00 FA 0D F2 | 	cmp	result1, #0 wz
04a7c     74 08 90 AD |  if_e	jmp	#LR__0345
04a80     82 01 00 FF 
04a84     AC 14 06 F6 | 	mov	arg02, ##@LR__5230
04a88     0F 13 02 F6 | 	mov	arg01, local01
04a8c     FC BE B1 FD | 	call	#__system___string_cmp
04a90     00 FA 0D F2 | 	cmp	result1, #0 wz
04a94     64 08 90 AD |  if_e	jmp	#LR__0346
04a98     82 01 00 FF 
04a9c     B0 14 06 F6 | 	mov	arg02, ##@LR__5231
04aa0     0F 13 02 F6 | 	mov	arg01, local01
04aa4     E4 BE B1 FD | 	call	#__system___string_cmp
04aa8     00 FA 0D F2 | 	cmp	result1, #0 wz
04aac     54 08 90 AD |  if_e	jmp	#LR__0347
04ab0     82 01 00 FF 
04ab4     B6 14 06 F6 | 	mov	arg02, ##@LR__5232
04ab8     0F 13 02 F6 | 	mov	arg01, local01
04abc     CC BE B1 FD | 	call	#__system___string_cmp
04ac0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ac4     44 08 90 AD |  if_e	jmp	#LR__0348
04ac8     82 01 00 FF 
04acc     BB 14 06 F6 | 	mov	arg02, ##@LR__5233
04ad0     0F 13 02 F6 | 	mov	arg01, local01
04ad4     B4 BE B1 FD | 	call	#__system___string_cmp
04ad8     00 FA 0D F2 | 	cmp	result1, #0 wz
04adc     34 08 90 AD |  if_e	jmp	#LR__0349
04ae0     82 01 00 FF 
04ae4     BE 14 06 F6 | 	mov	arg02, ##@LR__5234
04ae8     0F 13 02 F6 | 	mov	arg01, local01
04aec     9C BE B1 FD | 	call	#__system___string_cmp
04af0     00 FA 0D F2 | 	cmp	result1, #0 wz
04af4     24 08 90 AD |  if_e	jmp	#LR__0350
04af8     82 01 00 FF 
04afc     C1 14 06 F6 | 	mov	arg02, ##@LR__5235
04b00     0F 13 02 F6 | 	mov	arg01, local01
04b04     84 BE B1 FD | 	call	#__system___string_cmp
04b08     00 FA 0D F2 | 	cmp	result1, #0 wz
04b0c     14 08 90 AD |  if_e	jmp	#LR__0351
04b10     82 01 00 FF 
04b14     C5 14 06 F6 | 	mov	arg02, ##@LR__5236
04b18     0F 13 02 F6 | 	mov	arg01, local01
04b1c     6C BE B1 FD | 	call	#__system___string_cmp
04b20     00 FA 0D F2 | 	cmp	result1, #0 wz
04b24     04 08 90 AD |  if_e	jmp	#LR__0352
04b28     82 01 00 FF 
04b2c     C8 14 06 F6 | 	mov	arg02, ##@LR__5237
04b30     0F 13 02 F6 | 	mov	arg01, local01
04b34     54 BE B1 FD | 	call	#__system___string_cmp
04b38     00 FA 0D F2 | 	cmp	result1, #0 wz
04b3c     F4 07 90 AD |  if_e	jmp	#LR__0353
04b40     82 01 00 FF 
04b44     CD 14 06 F6 | 	mov	arg02, ##@LR__5238
04b48     0F 13 02 F6 | 	mov	arg01, local01
04b4c     3C BE B1 FD | 	call	#__system___string_cmp
04b50     00 FA 0D F2 | 	cmp	result1, #0 wz
04b54     E4 07 90 AD |  if_e	jmp	#LR__0354
04b58     82 01 00 FF 
04b5c     D0 14 06 F6 | 	mov	arg02, ##@LR__5239
04b60     0F 13 02 F6 | 	mov	arg01, local01
04b64     24 BE B1 FD | 	call	#__system___string_cmp
04b68     00 FA 0D F2 | 	cmp	result1, #0 wz
04b6c     D4 07 90 AD |  if_e	jmp	#LR__0355
04b70     82 01 00 FF 
04b74     D5 14 06 F6 | 	mov	arg02, ##@LR__5240
04b78     0F 13 02 F6 | 	mov	arg01, local01
04b7c     0C BE B1 FD | 	call	#__system___string_cmp
04b80     00 FA 0D F2 | 	cmp	result1, #0 wz
04b84     C4 07 90 AD |  if_e	jmp	#LR__0356
04b88     82 01 00 FF 
04b8c     D9 14 06 F6 | 	mov	arg02, ##@LR__5241
04b90     0F 13 02 F6 | 	mov	arg01, local01
04b94     F4 BD B1 FD | 	call	#__system___string_cmp
04b98     00 FA 0D F2 | 	cmp	result1, #0 wz
04b9c     B4 07 90 AD |  if_e	jmp	#LR__0357
04ba0     82 01 00 FF 
04ba4     DF 14 06 F6 | 	mov	arg02, ##@LR__5242
04ba8     0F 13 02 F6 | 	mov	arg01, local01
04bac     DC BD B1 FD | 	call	#__system___string_cmp
04bb0     00 FA 0D F2 | 	cmp	result1, #0 wz
04bb4     A4 07 90 AD |  if_e	jmp	#LR__0358
04bb8     82 01 00 FF 
04bbc     E4 14 06 F6 | 	mov	arg02, ##@LR__5243
04bc0     0F 13 02 F6 | 	mov	arg01, local01
04bc4     C4 BD B1 FD | 	call	#__system___string_cmp
04bc8     00 FA 0D F2 | 	cmp	result1, #0 wz
04bcc     94 07 90 AD |  if_e	jmp	#LR__0359
04bd0     82 01 00 FF 
04bd4     E7 14 06 F6 | 	mov	arg02, ##@LR__5244
04bd8     0F 13 02 F6 | 	mov	arg01, local01
04bdc     AC BD B1 FD | 	call	#__system___string_cmp
04be0     00 FA 0D F2 | 	cmp	result1, #0 wz
04be4     84 07 90 AD |  if_e	jmp	#LR__0360
04be8     82 01 00 FF 
04bec     ED 14 06 F6 | 	mov	arg02, ##@LR__5245
04bf0     0F 13 02 F6 | 	mov	arg01, local01
04bf4     94 BD B1 FD | 	call	#__system___string_cmp
04bf8     00 FA 0D F2 | 	cmp	result1, #0 wz
04bfc     74 07 90 AD |  if_e	jmp	#LR__0361
04c00     82 01 00 FF 
04c04     F1 14 06 F6 | 	mov	arg02, ##@LR__5246
04c08     0F 13 02 F6 | 	mov	arg01, local01
04c0c     7C BD B1 FD | 	call	#__system___string_cmp
04c10     00 FA 0D F2 | 	cmp	result1, #0 wz
04c14     64 07 90 AD |  if_e	jmp	#LR__0362
04c18     82 01 00 FF 
04c1c     F6 14 06 F6 | 	mov	arg02, ##@LR__5247
04c20     0F 13 02 F6 | 	mov	arg01, local01
04c24     64 BD B1 FD | 	call	#__system___string_cmp
04c28     00 FA 0D F2 | 	cmp	result1, #0 wz
04c2c     54 07 90 AD |  if_e	jmp	#LR__0363
04c30     82 01 00 FF 
04c34     F9 14 06 F6 | 	mov	arg02, ##@LR__5248
04c38     0F 13 02 F6 | 	mov	arg01, local01
04c3c     4C BD B1 FD | 	call	#__system___string_cmp
04c40     00 FA 0D F2 | 	cmp	result1, #0 wz
04c44     44 07 90 AD |  if_e	jmp	#LR__0364
04c48     82 01 00 FF 
04c4c     FE 14 06 F6 | 	mov	arg02, ##@LR__5249
04c50     0F 13 02 F6 | 	mov	arg01, local01
04c54     34 BD B1 FD | 	call	#__system___string_cmp
04c58     00 FA 0D F2 | 	cmp	result1, #0 wz
04c5c     34 07 90 AD |  if_e	jmp	#LR__0365
04c60     82 01 00 FF 
04c64     04 15 06 F6 | 	mov	arg02, ##@LR__5250
04c68     0F 13 02 F6 | 	mov	arg01, local01
04c6c     1C BD B1 FD | 	call	#__system___string_cmp
04c70     00 FA 0D F2 | 	cmp	result1, #0 wz
04c74     24 07 90 AD |  if_e	jmp	#LR__0366
04c78     82 01 00 FF 
04c7c     08 15 06 F6 | 	mov	arg02, ##@LR__5251
04c80     0F 13 02 F6 | 	mov	arg01, local01
04c84     04 BD B1 FD | 	call	#__system___string_cmp
04c88     00 FA 0D F2 | 	cmp	result1, #0 wz
04c8c     14 07 90 AD |  if_e	jmp	#LR__0367
04c90     82 01 00 FF 
04c94     11 15 06 F6 | 	mov	arg02, ##@LR__5252
04c98     0F 13 02 F6 | 	mov	arg01, local01
04c9c     EC BC B1 FD | 	call	#__system___string_cmp
04ca0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ca4     04 07 90 AD |  if_e	jmp	#LR__0368
04ca8     82 01 00 FF 
04cac     17 15 06 F6 | 	mov	arg02, ##@LR__5253
04cb0     0F 13 02 F6 | 	mov	arg01, local01
04cb4     D4 BC B1 FD | 	call	#__system___string_cmp
04cb8     00 FA 0D F2 | 	cmp	result1, #0 wz
04cbc     F4 06 90 AD |  if_e	jmp	#LR__0369
04cc0     82 01 00 FF 
04cc4     1D 15 06 F6 | 	mov	arg02, ##@LR__5254
04cc8     0F 13 02 F6 | 	mov	arg01, local01
04ccc     BC BC B1 FD | 	call	#__system___string_cmp
04cd0     00 FA 0D F2 | 	cmp	result1, #0 wz
04cd4     E4 06 90 AD |  if_e	jmp	#LR__0370
04cd8     82 01 00 FF 
04cdc     26 15 06 F6 | 	mov	arg02, ##@LR__5255
04ce0     0F 13 02 F6 | 	mov	arg01, local01
04ce4     A4 BC B1 FD | 	call	#__system___string_cmp
04ce8     00 FA 0D F2 | 	cmp	result1, #0 wz
04cec     D4 06 90 AD |  if_e	jmp	#LR__0371
04cf0     82 01 00 FF 
04cf4     30 15 06 F6 | 	mov	arg02, ##@LR__5256
04cf8     0F 13 02 F6 | 	mov	arg01, local01
04cfc     8C BC B1 FD | 	call	#__system___string_cmp
04d00     00 FA 0D F2 | 	cmp	result1, #0 wz
04d04     C4 06 90 AD |  if_e	jmp	#LR__0372
04d08     82 01 00 FF 
04d0c     39 15 06 F6 | 	mov	arg02, ##@LR__5257
04d10     0F 13 02 F6 | 	mov	arg01, local01
04d14     74 BC B1 FD | 	call	#__system___string_cmp
04d18     00 FA 0D F2 | 	cmp	result1, #0 wz
04d1c     B4 06 90 AD |  if_e	jmp	#LR__0373
04d20     82 01 00 FF 
04d24     3E 15 06 F6 | 	mov	arg02, ##@LR__5258
04d28     0F 13 02 F6 | 	mov	arg01, local01
04d2c     5C BC B1 FD | 	call	#__system___string_cmp
04d30     00 FA 0D F2 | 	cmp	result1, #0 wz
04d34     A4 06 90 AD |  if_e	jmp	#LR__0374
04d38     82 01 00 FF 
04d3c     41 15 06 F6 | 	mov	arg02, ##@LR__5259
04d40     0F 13 02 F6 | 	mov	arg01, local01
04d44     44 BC B1 FD | 	call	#__system___string_cmp
04d48     00 FA 0D F2 | 	cmp	result1, #0 wz
04d4c     94 06 90 AD |  if_e	jmp	#LR__0375
04d50     82 01 00 FF 
04d54     46 15 06 F6 | 	mov	arg02, ##@LR__5260
04d58     0F 13 02 F6 | 	mov	arg01, local01
04d5c     2C BC B1 FD | 	call	#__system___string_cmp
04d60     00 FA 0D F2 | 	cmp	result1, #0 wz
04d64     84 06 90 AD |  if_e	jmp	#LR__0376
04d68     82 01 00 FF 
04d6c     4A 15 06 F6 | 	mov	arg02, ##@LR__5261
04d70     0F 13 02 F6 | 	mov	arg01, local01
04d74     14 BC B1 FD | 	call	#__system___string_cmp
04d78     00 FA 0D F2 | 	cmp	result1, #0 wz
04d7c     74 06 90 AD |  if_e	jmp	#LR__0377
04d80     82 01 00 FF 
04d84     4F 15 06 F6 | 	mov	arg02, ##@LR__5262
04d88     0F 13 02 F6 | 	mov	arg01, local01
04d8c     FC BB B1 FD | 	call	#__system___string_cmp
04d90     00 FA 0D F2 | 	cmp	result1, #0 wz
04d94     64 06 90 AD |  if_e	jmp	#LR__0378
04d98     82 01 00 FF 
04d9c     53 15 06 F6 | 	mov	arg02, ##@LR__5263
04da0     0F 13 02 F6 | 	mov	arg01, local01
04da4     E4 BB B1 FD | 	call	#__system___string_cmp
04da8     00 FA 0D F2 | 	cmp	result1, #0 wz
04dac     54 06 90 AD |  if_e	jmp	#LR__0379
04db0     82 01 00 FF 
04db4     5C 15 06 F6 | 	mov	arg02, ##@LR__5264
04db8     0F 13 02 F6 | 	mov	arg01, local01
04dbc     CC BB B1 FD | 	call	#__system___string_cmp
04dc0     00 FA 0D F2 | 	cmp	result1, #0 wz
04dc4     44 06 90 AD |  if_e	jmp	#LR__0380
04dc8     82 01 00 FF 
04dcc     61 15 06 F6 | 	mov	arg02, ##@LR__5265
04dd0     0F 13 02 F6 | 	mov	arg01, local01
04dd4     B4 BB B1 FD | 	call	#__system___string_cmp
04dd8     00 FA 0D F2 | 	cmp	result1, #0 wz
04ddc     34 06 90 AD |  if_e	jmp	#LR__0381
04de0     82 01 00 FF 
04de4     67 15 06 F6 | 	mov	arg02, ##@LR__5266
04de8     0F 13 02 F6 | 	mov	arg01, local01
04dec     9C BB B1 FD | 	call	#__system___string_cmp
04df0     00 FA 0D F2 | 	cmp	result1, #0 wz
04df4     24 06 90 AD |  if_e	jmp	#LR__0382
04df8     82 01 00 FF 
04dfc     69 15 06 F6 | 	mov	arg02, ##@LR__5267
04e00     0F 13 02 F6 | 	mov	arg01, local01
04e04     84 BB B1 FD | 	call	#__system___string_cmp
04e08     00 FA 0D F2 | 	cmp	result1, #0 wz
04e0c     14 06 90 AD |  if_e	jmp	#LR__0383
04e10     82 01 00 FF 
04e14     6D 15 06 F6 | 	mov	arg02, ##@LR__5268
04e18     0F 13 02 F6 | 	mov	arg01, local01
04e1c     6C BB B1 FD | 	call	#__system___string_cmp
04e20     00 FA 0D F2 | 	cmp	result1, #0 wz
04e24     04 06 90 AD |  if_e	jmp	#LR__0384
04e28     82 01 00 FF 
04e2c     71 15 06 F6 | 	mov	arg02, ##@LR__5269
04e30     0F 13 02 F6 | 	mov	arg01, local01
04e34     54 BB B1 FD | 	call	#__system___string_cmp
04e38     00 FA 0D F2 | 	cmp	result1, #0 wz
04e3c     F4 05 90 AD |  if_e	jmp	#LR__0385
04e40     82 01 00 FF 
04e44     79 15 06 F6 | 	mov	arg02, ##@LR__5270
04e48     0F 13 02 F6 | 	mov	arg01, local01
04e4c     3C BB B1 FD | 	call	#__system___string_cmp
04e50     00 FA 0D F2 | 	cmp	result1, #0 wz
04e54     E4 05 90 AD |  if_e	jmp	#LR__0386
04e58     82 01 00 FF 
04e5c     7D 15 06 F6 | 	mov	arg02, ##@LR__5271
04e60     0F 13 02 F6 | 	mov	arg01, local01
04e64     24 BB B1 FD | 	call	#__system___string_cmp
04e68     00 FA 0D F2 | 	cmp	result1, #0 wz
04e6c     D4 05 90 AD |  if_e	jmp	#LR__0387
04e70     82 01 00 FF 
04e74     7F 15 06 F6 | 	mov	arg02, ##@LR__5272
04e78     0F 13 02 F6 | 	mov	arg01, local01
04e7c     0C BB B1 FD | 	call	#__system___string_cmp
04e80     00 FA 0D F2 | 	cmp	result1, #0 wz
04e84     C4 05 90 AD |  if_e	jmp	#LR__0388
04e88     82 01 00 FF 
04e8c     86 15 06 F6 | 	mov	arg02, ##@LR__5273
04e90     0F 13 02 F6 | 	mov	arg01, local01
04e94     F4 BA B1 FD | 	call	#__system___string_cmp
04e98     00 FA 0D F2 | 	cmp	result1, #0 wz
04e9c     B4 05 90 AD |  if_e	jmp	#LR__0389
04ea0     82 01 00 FF 
04ea4     8A 15 06 F6 | 	mov	arg02, ##@LR__5274
04ea8     0F 13 02 F6 | 	mov	arg01, local01
04eac     DC BA B1 FD | 	call	#__system___string_cmp
04eb0     00 FA 0D F2 | 	cmp	result1, #0 wz
04eb4     A4 05 90 AD |  if_e	jmp	#LR__0390
04eb8     82 01 00 FF 
04ebc     8F 15 06 F6 | 	mov	arg02, ##@LR__5275
04ec0     0F 13 02 F6 | 	mov	arg01, local01
04ec4     C4 BA B1 FD | 	call	#__system___string_cmp
04ec8     00 FA 0D F2 | 	cmp	result1, #0 wz
04ecc     94 05 90 AD |  if_e	jmp	#LR__0391
04ed0     82 01 00 FF 
04ed4     92 15 06 F6 | 	mov	arg02, ##@LR__5276
04ed8     0F 13 02 F6 | 	mov	arg01, local01
04edc     AC BA B1 FD | 	call	#__system___string_cmp
04ee0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ee4     84 05 90 AD |  if_e	jmp	#LR__0392
04ee8     82 01 00 FF 
04eec     9B 15 06 F6 | 	mov	arg02, ##@LR__5277
04ef0     0F 13 02 F6 | 	mov	arg01, local01
04ef4     94 BA B1 FD | 	call	#__system___string_cmp
04ef8     00 FA 0D F2 | 	cmp	result1, #0 wz
04efc     74 05 90 AD |  if_e	jmp	#LR__0393
04f00     82 01 00 FF 
04f04     9F 15 06 F6 | 	mov	arg02, ##@LR__5278
04f08     0F 13 02 F6 | 	mov	arg01, local01
04f0c     7C BA B1 FD | 	call	#__system___string_cmp
04f10     00 FA 0D F2 | 	cmp	result1, #0 wz
04f14     64 05 90 AD |  if_e	jmp	#LR__0394
04f18     82 01 00 FF 
04f1c     A6 15 06 F6 | 	mov	arg02, ##@LR__5279
04f20     0F 13 02 F6 | 	mov	arg01, local01
04f24     64 BA B1 FD | 	call	#__system___string_cmp
04f28     00 FA 0D F2 | 	cmp	result1, #0 wz
04f2c     54 05 90 AD |  if_e	jmp	#LR__0395
04f30     82 01 00 FF 
04f34     AA 15 06 F6 | 	mov	arg02, ##@LR__5280
04f38     0F 13 02 F6 | 	mov	arg01, local01
04f3c     4C BA B1 FD | 	call	#__system___string_cmp
04f40     00 FA 0D F2 | 	cmp	result1, #0 wz
04f44     44 05 90 AD |  if_e	jmp	#LR__0396
04f48     82 01 00 FF 
04f4c     B1 15 06 F6 | 	mov	arg02, ##@LR__5281
04f50     0F 13 02 F6 | 	mov	arg01, local01
04f54     34 BA B1 FD | 	call	#__system___string_cmp
04f58     00 FA 0D F2 | 	cmp	result1, #0 wz
04f5c     34 05 90 AD |  if_e	jmp	#LR__0397
04f60     82 01 00 FF 
04f64     B5 15 06 F6 | 	mov	arg02, ##@LR__5282
04f68     0F 13 02 F6 | 	mov	arg01, local01
04f6c     1C BA B1 FD | 	call	#__system___string_cmp
04f70     00 FA 0D F2 | 	cmp	result1, #0 wz
04f74     24 05 90 AD |  if_e	jmp	#LR__0398
04f78     82 01 00 FF 
04f7c     BC 15 06 F6 | 	mov	arg02, ##@LR__5283
04f80     0F 13 02 F6 | 	mov	arg01, local01
04f84     04 BA B1 FD | 	call	#__system___string_cmp
04f88     00 FA 0D F2 | 	cmp	result1, #0 wz
04f8c     14 05 90 AD |  if_e	jmp	#LR__0399
04f90     82 01 00 FF 
04f94     BF 15 06 F6 | 	mov	arg02, ##@LR__5284
04f98     0F 13 02 F6 | 	mov	arg01, local01
04f9c     EC B9 B1 FD | 	call	#__system___string_cmp
04fa0     00 FA 0D F2 | 	cmp	result1, #0 wz
04fa4     04 05 90 AD |  if_e	jmp	#LR__0400
04fa8     82 01 00 FF 
04fac     CA 15 06 F6 | 	mov	arg02, ##@LR__5285
04fb0     0F 13 02 F6 | 	mov	arg01, local01
04fb4     D4 B9 B1 FD | 	call	#__system___string_cmp
04fb8     00 FA 0D F2 | 	cmp	result1, #0 wz
04fbc     F4 04 90 AD |  if_e	jmp	#LR__0401
04fc0     82 01 00 FF 
04fc4     CE 15 06 F6 | 	mov	arg02, ##@LR__5286
04fc8     0F 13 02 F6 | 	mov	arg01, local01
04fcc     BC B9 B1 FD | 	call	#__system___string_cmp
04fd0     00 FA 0D F2 | 	cmp	result1, #0 wz
04fd4     E4 04 90 AD |  if_e	jmp	#LR__0402
04fd8     82 01 00 FF 
04fdc     D5 15 06 F6 | 	mov	arg02, ##@LR__5287
04fe0     0F 13 02 F6 | 	mov	arg01, local01
04fe4     A4 B9 B1 FD | 	call	#__system___string_cmp
04fe8     00 FA 0D F2 | 	cmp	result1, #0 wz
04fec     D4 04 90 AD |  if_e	jmp	#LR__0403
04ff0     82 01 00 FF 
04ff4     D9 15 06 F6 | 	mov	arg02, ##@LR__5288
04ff8     0F 13 02 F6 | 	mov	arg01, local01
04ffc     8C B9 B1 FD | 	call	#__system___string_cmp
05000     00 FA 0D F2 | 	cmp	result1, #0 wz
05004     C4 04 90 AD |  if_e	jmp	#LR__0404
05008     82 01 00 FF 
0500c     E1 15 06 F6 | 	mov	arg02, ##@LR__5289
05010     0F 13 02 F6 | 	mov	arg01, local01
05014     74 B9 B1 FD | 	call	#__system___string_cmp
05018     00 FA 0D F2 | 	cmp	result1, #0 wz
0501c     B4 04 90 AD |  if_e	jmp	#LR__0405
05020     82 01 00 FF 
05024     E5 15 06 F6 | 	mov	arg02, ##@LR__5290
05028     0F 13 02 F6 | 	mov	arg01, local01
0502c     5C B9 B1 FD | 	call	#__system___string_cmp
05030     00 FA 0D F2 | 	cmp	result1, #0 wz
05034     A4 04 90 AD |  if_e	jmp	#LR__0406
05038     82 01 00 FF 
0503c     EC 15 06 F6 | 	mov	arg02, ##@LR__5291
05040     0F 13 02 F6 | 	mov	arg01, local01
05044     44 B9 B1 FD | 	call	#__system___string_cmp
05048     00 FA 0D F2 | 	cmp	result1, #0 wz
0504c     94 04 90 AD |  if_e	jmp	#LR__0407
05050     82 01 00 FF 
05054     F3 15 06 F6 | 	mov	arg02, ##@LR__5292
05058     0F 13 02 F6 | 	mov	arg01, local01
0505c     2C B9 B1 FD | 	call	#__system___string_cmp
05060     00 FA 0D F2 | 	cmp	result1, #0 wz
05064     84 04 90 AD |  if_e	jmp	#LR__0408
05068     82 01 00 FF 
0506c     F7 15 06 F6 | 	mov	arg02, ##@LR__5293
05070     0F 13 02 F6 | 	mov	arg01, local01
05074     14 B9 B1 FD | 	call	#__system___string_cmp
05078     00 FA 0D F2 | 	cmp	result1, #0 wz
0507c     74 04 90 AD |  if_e	jmp	#LR__0409
05080     82 01 00 FF 
05084     FD 15 06 F6 | 	mov	arg02, ##@LR__5294
05088     0F 13 02 F6 | 	mov	arg01, local01
0508c     FC B8 B1 FD | 	call	#__system___string_cmp
05090     00 FA 0D F2 | 	cmp	result1, #0 wz
05094     64 04 90 AD |  if_e	jmp	#LR__0410
05098     83 01 00 FF 
0509c     01 14 06 F6 | 	mov	arg02, ##@LR__5295
050a0     0F 13 02 F6 | 	mov	arg01, local01
050a4     E4 B8 B1 FD | 	call	#__system___string_cmp
050a8     00 FA 0D F2 | 	cmp	result1, #0 wz
050ac     54 04 90 AD |  if_e	jmp	#LR__0411
050b0     83 01 00 FF 
050b4     08 14 06 F6 | 	mov	arg02, ##@LR__5296
050b8     0F 13 02 F6 | 	mov	arg01, local01
050bc     CC B8 B1 FD | 	call	#__system___string_cmp
050c0     00 FA 0D F2 | 	cmp	result1, #0 wz
050c4     44 04 90 AD |  if_e	jmp	#LR__0412
050c8     83 01 00 FF 
050cc     0D 14 06 F6 | 	mov	arg02, ##@LR__5297
050d0     0F 13 02 F6 | 	mov	arg01, local01
050d4     B4 B8 B1 FD | 	call	#__system___string_cmp
050d8     00 FA 0D F2 | 	cmp	result1, #0 wz
050dc     34 04 90 AD |  if_e	jmp	#LR__0413
050e0     83 01 00 FF 
050e4     12 14 06 F6 | 	mov	arg02, ##@LR__5298
050e8     0F 13 02 F6 | 	mov	arg01, local01
050ec     9C B8 B1 FD | 	call	#__system___string_cmp
050f0     00 FA 0D F2 | 	cmp	result1, #0 wz
050f4     24 04 90 AD |  if_e	jmp	#LR__0414
050f8     83 01 00 FF 
050fc     19 14 06 F6 | 	mov	arg02, ##@LR__5299
05100     0F 13 02 F6 | 	mov	arg01, local01
05104     84 B8 B1 FD | 	call	#__system___string_cmp
05108     00 FA 0D F2 | 	cmp	result1, #0 wz
0510c     14 04 90 AD |  if_e	jmp	#LR__0415
05110     83 01 00 FF 
05114     23 14 06 F6 | 	mov	arg02, ##@LR__5300
05118     0F 13 02 F6 | 	mov	arg01, local01
0511c     6C B8 B1 FD | 	call	#__system___string_cmp
05120     00 FA 0D F2 | 	cmp	result1, #0 wz
05124     04 04 90 AD |  if_e	jmp	#LR__0416
05128     83 01 00 FF 
0512c     27 14 06 F6 | 	mov	arg02, ##@LR__5301
05130     0F 13 02 F6 | 	mov	arg01, local01
05134     54 B8 B1 FD | 	call	#__system___string_cmp
05138     00 FA 0D F2 | 	cmp	result1, #0 wz
0513c     F4 03 90 AD |  if_e	jmp	#LR__0417
05140     83 01 00 FF 
05144     2F 14 06 F6 | 	mov	arg02, ##@LR__5302
05148     0F 13 02 F6 | 	mov	arg01, local01
0514c     3C B8 B1 FD | 	call	#__system___string_cmp
05150     00 FA 0D F2 | 	cmp	result1, #0 wz
05154     E4 03 90 AD |  if_e	jmp	#LR__0418
05158     83 01 00 FF 
0515c     33 14 06 F6 | 	mov	arg02, ##@LR__5303
05160     0F 13 02 F6 | 	mov	arg01, local01
05164     24 B8 B1 FD | 	call	#__system___string_cmp
05168     00 FA 0D F2 | 	cmp	result1, #0 wz
0516c     D4 03 90 AD |  if_e	jmp	#LR__0419
05170     83 01 00 FF 
05174     39 14 06 F6 | 	mov	arg02, ##@LR__5304
05178     0F 13 02 F6 | 	mov	arg01, local01
0517c     0C B8 B1 FD | 	call	#__system___string_cmp
05180     00 FA 0D F2 | 	cmp	result1, #0 wz
05184     C4 03 90 AD |  if_e	jmp	#LR__0420
05188     C8 03 90 FD | 	jmp	#LR__0421
0518c                 | LR__0300
0518c     5C FA 05 F6 | 	mov	result1, #92
05190     C4 03 90 FD | 	jmp	#LR__0422
05194                 | LR__0301
05194     5C FA 05 F6 | 	mov	result1, #92
05198     BC 03 90 FD | 	jmp	#LR__0422
0519c                 | LR__0302
0519c     47 FA 05 F6 | 	mov	result1, #71
051a0     B4 03 90 FD | 	jmp	#LR__0422
051a4                 | LR__0303
051a4     59 FA 05 F6 | 	mov	result1, #89
051a8     AC 03 90 FD | 	jmp	#LR__0422
051ac                 | LR__0304
051ac     59 FA 05 F6 | 	mov	result1, #89
051b0     A4 03 90 FD | 	jmp	#LR__0422
051b4                 | LR__0305
051b4     AE FA 05 F6 | 	mov	result1, #174
051b8     9C 03 90 FD | 	jmp	#LR__0422
051bc                 | LR__0306
051bc     AE FA 05 F6 | 	mov	result1, #174
051c0     94 03 90 FD | 	jmp	#LR__0422
051c4                 | LR__0307
051c4     B1 FA 05 F6 | 	mov	result1, #177
051c8     8C 03 90 FD | 	jmp	#LR__0422
051cc                 | LR__0308
051cc     B1 FA 05 F6 | 	mov	result1, #177
051d0     84 03 90 FD | 	jmp	#LR__0422
051d4                 | LR__0309
051d4     AF FA 05 F6 | 	mov	result1, #175
051d8     7C 03 90 FD | 	jmp	#LR__0422
051dc                 | LR__0310
051dc     AF FA 05 F6 | 	mov	result1, #175
051e0     74 03 90 FD | 	jmp	#LR__0422
051e4                 | LR__0311
051e4     B0 FA 05 F6 | 	mov	result1, #176
051e8     6C 03 90 FD | 	jmp	#LR__0422
051ec                 | LR__0312
051ec     B0 FA 05 F6 | 	mov	result1, #176
051f0     64 03 90 FD | 	jmp	#LR__0422
051f4                 | LR__0313
051f4     45 FA 05 F6 | 	mov	result1, #69
051f8     5C 03 90 FD | 	jmp	#LR__0422
051fc                 | LR__0314
051fc     45 FA 05 F6 | 	mov	result1, #69
05200     54 03 90 FD | 	jmp	#LR__0422
05204                 | LR__0315
05204     69 FA 05 F6 | 	mov	result1, #105
05208     4C 03 90 FD | 	jmp	#LR__0422
0520c                 | LR__0316
0520c     B4 FA 05 F6 | 	mov	result1, #180
05210     44 03 90 FD | 	jmp	#LR__0422
05214                 | LR__0317
05214     40 FA 05 F6 | 	mov	result1, #64
05218     3C 03 90 FD | 	jmp	#LR__0422
0521c                 | LR__0318
0521c     49 FA 05 F6 | 	mov	result1, #73
05220     34 03 90 FD | 	jmp	#LR__0422
05224                 | LR__0319
05224     49 FA 05 F6 | 	mov	result1, #73
05228     2C 03 90 FD | 	jmp	#LR__0422
0522c                 | LR__0320
0522c     50 FA 05 F6 | 	mov	result1, #80
05230     24 03 90 FD | 	jmp	#LR__0422
05234                 | LR__0321
05234     50 FA 05 F6 | 	mov	result1, #80
05238     1C 03 90 FD | 	jmp	#LR__0422
0523c                 | LR__0322
0523c     68 FA 05 F6 | 	mov	result1, #104
05240     14 03 90 FD | 	jmp	#LR__0422
05244                 | LR__0323
05244     73 FA 05 F6 | 	mov	result1, #115
05248     0C 03 90 FD | 	jmp	#LR__0422
0524c                 | LR__0324
0524c     74 FA 05 F6 | 	mov	result1, #116
05250     04 03 90 FD | 	jmp	#LR__0422
05254                 | LR__0325
05254     6C FA 05 F6 | 	mov	result1, #108
05258     FC 02 90 FD | 	jmp	#LR__0422
0525c                 | LR__0326
0525c     6C FA 05 F6 | 	mov	result1, #108
05260     F4 02 90 FD | 	jmp	#LR__0422
05264                 | LR__0327
05264     89 FA 05 F6 | 	mov	result1, #137
05268     EC 02 90 FD | 	jmp	#LR__0422
0526c                 | LR__0328
0526c     72 FA 05 F6 | 	mov	result1, #114
05270     E4 02 90 FD | 	jmp	#LR__0422
05274                 | LR__0329
05274     5D FA 05 F6 | 	mov	result1, #93
05278     DC 02 90 FD | 	jmp	#LR__0422
0527c                 | LR__0330
0527c     96 FA 05 F6 | 	mov	result1, #150
05280     D4 02 90 FD | 	jmp	#LR__0422
05284                 | LR__0331
05284     43 FA 05 F6 | 	mov	result1, #67
05288     CC 02 90 FD | 	jmp	#LR__0422
0528c                 | LR__0332
0528c     43 FA 05 F6 | 	mov	result1, #67
05290     C4 02 90 FD | 	jmp	#LR__0422
05294                 | LR__0333
05294     5A FA 05 F6 | 	mov	result1, #90
05298     BC 02 90 FD | 	jmp	#LR__0422
0529c                 | LR__0334
0529c     AB FA 05 F6 | 	mov	result1, #171
052a0     B4 02 90 FD | 	jmp	#LR__0422
052a4                 | LR__0335
052a4     BD FA 05 F6 | 	mov	result1, #189
052a8     AC 02 90 FD | 	jmp	#LR__0422
052ac                 | LR__0336
052ac     BD FA 05 F6 | 	mov	result1, #189
052b0     A4 02 90 FD | 	jmp	#LR__0422
052b4                 | LR__0337
052b4     46 FA 05 F6 | 	mov	result1, #70
052b8     9C 02 90 FD | 	jmp	#LR__0422
052bc                 | LR__0338
052bc     46 FA 05 F6 | 	mov	result1, #70
052c0     94 02 90 FD | 	jmp	#LR__0422
052c4                 | LR__0339
052c4     71 FA 05 F6 | 	mov	result1, #113
052c8     8C 02 90 FD | 	jmp	#LR__0422
052cc                 | LR__0340
052cc     71 FA 05 F6 | 	mov	result1, #113
052d0     84 02 90 FD | 	jmp	#LR__0422
052d4                 | LR__0341
052d4     60 FA 05 F6 | 	mov	result1, #96
052d8     7C 02 90 FD | 	jmp	#LR__0422
052dc                 | LR__0342
052dc     4A FA 05 F6 | 	mov	result1, #74
052e0     74 02 90 FD | 	jmp	#LR__0422
052e4                 | LR__0343
052e4     4A FA 05 F6 | 	mov	result1, #74
052e8     6C 02 90 FD | 	jmp	#LR__0422
052ec                 | LR__0344
052ec     48 FA 05 F6 | 	mov	result1, #72
052f0     64 02 90 FD | 	jmp	#LR__0422
052f4                 | LR__0345
052f4     48 FA 05 F6 | 	mov	result1, #72
052f8     5C 02 90 FD | 	jmp	#LR__0422
052fc                 | LR__0346
052fc     BB FA 05 F6 | 	mov	result1, #187
05300     54 02 90 FD | 	jmp	#LR__0422
05304                 | LR__0347
05304     A9 FA 05 F6 | 	mov	result1, #169
05308     4C 02 90 FD | 	jmp	#LR__0422
0530c                 | LR__0348
0530c     4E FA 05 F6 | 	mov	result1, #78
05310     44 02 90 FD | 	jmp	#LR__0422
05314                 | LR__0349
05314     4E FA 05 F6 | 	mov	result1, #78
05318     3C 02 90 FD | 	jmp	#LR__0422
0531c                 | LR__0350
0531c     58 FA 05 F6 | 	mov	result1, #88
05320     34 02 90 FD | 	jmp	#LR__0422
05324                 | LR__0351
05324     5F FA 05 F6 | 	mov	result1, #95
05328     2C 02 90 FD | 	jmp	#LR__0422
0532c                 | LR__0352
0532c     5F FA 05 F6 | 	mov	result1, #95
05330     24 02 90 FD | 	jmp	#LR__0422
05334                 | LR__0353
05334     4C FA 05 F6 | 	mov	result1, #76
05338     1C 02 90 FD | 	jmp	#LR__0422
0533c                 | LR__0354
0533c     4C FA 05 F6 | 	mov	result1, #76
05340     14 02 90 FD | 	jmp	#LR__0422
05344                 | LR__0355
05344     52 FA 05 F6 | 	mov	result1, #82
05348     0C 02 90 FD | 	jmp	#LR__0422
0534c                 | LR__0356
0534c     52 FA 05 F6 | 	mov	result1, #82
05350     04 02 90 FD | 	jmp	#LR__0422
05354                 | LR__0357
05354     97 FA 05 F6 | 	mov	result1, #151
05358     FC 01 90 FD | 	jmp	#LR__0422
0535c                 | LR__0358
0535c     61 FA 05 F6 | 	mov	result1, #97
05360     F4 01 90 FD | 	jmp	#LR__0422
05364                 | LR__0359
05364     61 FA 05 F6 | 	mov	result1, #97
05368     EC 01 90 FD | 	jmp	#LR__0422
0536c                 | LR__0360
0536c     63 FA 05 F6 | 	mov	result1, #99
05370     E4 01 90 FD | 	jmp	#LR__0422
05374                 | LR__0361
05374     41 FA 05 F6 | 	mov	result1, #65
05378     DC 01 90 FD | 	jmp	#LR__0422
0537c                 | LR__0362
0537c     4B FA 05 F6 | 	mov	result1, #75
05380     D4 01 90 FD | 	jmp	#LR__0422
05384                 | LR__0363
05384     4B FA 05 F6 | 	mov	result1, #75
05388     CC 01 90 FD | 	jmp	#LR__0422
0538c                 | LR__0364
0538c     B3 FA 05 F6 | 	mov	result1, #179
05390     C4 01 90 FD | 	jmp	#LR__0422
05394                 | LR__0365
05394     5E FA 05 F6 | 	mov	result1, #94
05398     BC 01 90 FD | 	jmp	#LR__0422
0539c                 | LR__0366
0539c     5E FA 05 F6 | 	mov	result1, #94
053a0     B4 01 90 FD | 	jmp	#LR__0422
053a4                 | LR__0367
053a4     7C FA 05 F6 | 	mov	result1, #124
053a8     AC 01 90 FD | 	jmp	#LR__0422
053ac                 | LR__0368
053ac     7E FA 05 F6 | 	mov	result1, #126
053b0     A4 01 90 FD | 	jmp	#LR__0422
053b4                 | LR__0369
053b4     7D FA 05 F6 | 	mov	result1, #125
053b8     9C 01 90 FD | 	jmp	#LR__0422
053bc                 | LR__0370
053bc     7F FA 05 F6 | 	mov	result1, #127
053c0     94 01 90 FD | 	jmp	#LR__0422
053c4                 | LR__0371
053c4     80 FA 05 F6 | 	mov	result1, #128
053c8     8C 01 90 FD | 	jmp	#LR__0422
053cc                 | LR__0372
053cc     55 FA 05 F6 | 	mov	result1, #85
053d0     84 01 90 FD | 	jmp	#LR__0422
053d4                 | LR__0373
053d4     75 FA 05 F6 | 	mov	result1, #117
053d8     7C 01 90 FD | 	jmp	#LR__0422
053dc                 | LR__0374
053dc     75 FA 05 F6 | 	mov	result1, #117
053e0     74 01 90 FD | 	jmp	#LR__0422
053e4                 | LR__0375
053e4     42 FA 05 F6 | 	mov	result1, #66
053e8     6C 01 90 FD | 	jmp	#LR__0422
053ec                 | LR__0376
053ec     42 FA 05 F6 | 	mov	result1, #66
053f0     64 01 90 FD | 	jmp	#LR__0422
053f4                 | LR__0377
053f4     95 FA 05 F6 | 	mov	result1, #149
053f8     5C 01 90 FD | 	jmp	#LR__0422
053fc                 | LR__0378
053fc     AC FA 05 F6 | 	mov	result1, #172
05400     54 01 90 FD | 	jmp	#LR__0422
05404                 | LR__0379
05404     81 FA 05 F6 | 	mov	result1, #129
05408     4C 01 90 FD | 	jmp	#LR__0422
0540c                 | LR__0380
0540c     81 FA 05 F6 | 	mov	result1, #129
05410     44 01 90 FD | 	jmp	#LR__0422
05414                 | LR__0381
05414     44 FA 05 F6 | 	mov	result1, #68
05418     3C 01 90 FD | 	jmp	#LR__0422
0541c                 | LR__0382
0541c     44 FA 05 F6 | 	mov	result1, #68
05420     34 01 90 FD | 	jmp	#LR__0422
05424                 | LR__0383
05424     BC FA 05 F6 | 	mov	result1, #188
05428     2C 01 90 FD | 	jmp	#LR__0422
0542c                 | LR__0384
0542c     88 FA 05 F6 | 	mov	result1, #136
05430     24 01 90 FD | 	jmp	#LR__0422
05434                 | LR__0385
05434     92 FA 05 F6 | 	mov	result1, #146
05438     1C 01 90 FD | 	jmp	#LR__0422
0543c                 | LR__0386
0543c     BE FA 05 F6 | 	mov	result1, #190
05440     14 01 90 FD | 	jmp	#LR__0422
05444                 | LR__0387
05444     BE FA 05 F6 | 	mov	result1, #190
05448     0C 01 90 FD | 	jmp	#LR__0422
0544c                 | LR__0388
0544c     AA FA 05 F6 | 	mov	result1, #170
05450     04 01 90 FD | 	jmp	#LR__0422
05454                 | LR__0389
05454     4D FA 05 F6 | 	mov	result1, #77
05458     FC 00 90 FD | 	jmp	#LR__0422
0545c                 | LR__0390
0545c     51 FA 05 F6 | 	mov	result1, #81
05460     F4 00 90 FD | 	jmp	#LR__0422
05464                 | LR__0391
05464     51 FA 05 F6 | 	mov	result1, #81
05468     EC 00 90 FD | 	jmp	#LR__0422
0546c                 | LR__0392
0546c     8E FA 05 F6 | 	mov	result1, #142
05470     E4 00 90 FD | 	jmp	#LR__0422
05474                 | LR__0393
05474     8E FA 05 F6 | 	mov	result1, #142
05478     DC 00 90 FD | 	jmp	#LR__0422
0547c                 | LR__0394
0547c     90 FA 05 F6 | 	mov	result1, #144
05480     D4 00 90 FD | 	jmp	#LR__0422
05484                 | LR__0395
05484     90 FA 05 F6 | 	mov	result1, #144
05488     CC 00 90 FD | 	jmp	#LR__0422
0548c                 | LR__0396
0548c     8D FA 05 F6 | 	mov	result1, #141
05490     C4 00 90 FD | 	jmp	#LR__0422
05494                 | LR__0397
05494     8D FA 05 F6 | 	mov	result1, #141
05498     BC 00 90 FD | 	jmp	#LR__0422
0549c                 | LR__0398
0549c     8C FA 05 F6 | 	mov	result1, #140
054a0     B4 00 90 FD | 	jmp	#LR__0422
054a4                 | LR__0399
054a4     8C FA 05 F6 | 	mov	result1, #140
054a8     AC 00 90 FD | 	jmp	#LR__0422
054ac                 | LR__0400
054ac     91 FA 05 F6 | 	mov	result1, #145
054b0     A4 00 90 FD | 	jmp	#LR__0422
054b4                 | LR__0401
054b4     91 FA 05 F6 | 	mov	result1, #145
054b8     9C 00 90 FD | 	jmp	#LR__0422
054bc                 | LR__0402
054bc     8B FA 05 F6 | 	mov	result1, #139
054c0     94 00 90 FD | 	jmp	#LR__0422
054c4                 | LR__0403
054c4     8B FA 05 F6 | 	mov	result1, #139
054c8     8C 00 90 FD | 	jmp	#LR__0422
054cc                 | LR__0404
054cc     8F FA 05 F6 | 	mov	result1, #143
054d0     84 00 90 FD | 	jmp	#LR__0422
054d4                 | LR__0405
054d4     8F FA 05 F6 | 	mov	result1, #143
054d8     7C 00 90 FD | 	jmp	#LR__0422
054dc                 | LR__0406
054dc     8F FA 05 F6 | 	mov	result1, #143
054e0     74 00 90 FD | 	jmp	#LR__0422
054e4                 | LR__0407
054e4     B2 FA 05 F6 | 	mov	result1, #178
054e8     6C 00 90 FD | 	jmp	#LR__0422
054ec                 | LR__0408
054ec     B2 FA 05 F6 | 	mov	result1, #178
054f0     64 00 90 FD | 	jmp	#LR__0422
054f4                 | LR__0409
054f4     75 FA 05 F6 | 	mov	result1, #117
054f8     5C 00 90 FD | 	jmp	#LR__0422
054fc                 | LR__0410
054fc     75 FA 05 F6 | 	mov	result1, #117
05500     54 00 90 FD | 	jmp	#LR__0422
05504                 | LR__0411
05504     6D FA 05 F6 | 	mov	result1, #109
05508     4C 00 90 FD | 	jmp	#LR__0422
0550c                 | LR__0412
0550c     6D FA 05 F6 | 	mov	result1, #109
05510     44 00 90 FD | 	jmp	#LR__0422
05514                 | LR__0413
05514     5B FA 05 F6 | 	mov	result1, #91
05518     3C 00 90 FD | 	jmp	#LR__0422
0551c                 | LR__0414
0551c     56 FA 05 F6 | 	mov	result1, #86
05520     34 00 90 FD | 	jmp	#LR__0422
05524                 | LR__0415
05524     70 FA 05 F6 | 	mov	result1, #112
05528     2C 00 90 FD | 	jmp	#LR__0422
0552c                 | LR__0416
0552c     70 FA 05 F6 | 	mov	result1, #112
05530     24 00 90 FD | 	jmp	#LR__0422
05534                 | LR__0417
05534     57 FA 05 F6 | 	mov	result1, #87
05538     1C 00 90 FD | 	jmp	#LR__0422
0553c                 | LR__0418
0553c     57 FA 05 F6 | 	mov	result1, #87
05540     14 00 90 FD | 	jmp	#LR__0422
05544                 | LR__0419
05544     77 FA 05 F6 | 	mov	result1, #119
05548     0C 00 90 FD | 	jmp	#LR__0422
0554c                 | LR__0420
0554c     78 FA 05 F6 | 	mov	result1, #120
05550     04 00 90 FD | 	jmp	#LR__0422
05554                 | LR__0421
05554     00 FA 05 F6 | 	mov	result1, #0
05558                 | LR__0422
05558     A7 F0 03 F6 | 	mov	ptra, fp
0555c     B2 00 A0 FD | 	call	#popregs_
05560                 | _iscommand_ret
05560     2D 00 64 FD | 	ret
05564                 | 
05564                 | ' 
05564                 | ' ' Check if the part is a function than returns a value, return a token or 0 if not found
05564                 | ' 
05564                 | ' function isfunction(s as string) as ubyte
05564                 | _isfunction
05564     01 4A 05 F6 | 	mov	COUNT_, #1
05568     A8 00 A0 FD | 	call	#pushregs_
0556c                 | ' 
0556c                 | ' select case s
0556c     09 1F 02 F6 | 	mov	local01, arg01
05570     83 01 00 FF 
05574     3F 14 06 F6 | 	mov	arg02, ##@LR__5305
05578     0F 13 02 F6 | 	mov	arg01, local01
0557c     0C B4 B1 FD | 	call	#__system___string_cmp
05580     00 FA 0D F2 | 	cmp	result1, #0 wz
05584     0C 04 90 AD |  if_e	jmp	#LR__0430
05588     83 01 00 FF 
0558c     43 14 06 F6 | 	mov	arg02, ##@LR__5306
05590     0F 13 02 F6 | 	mov	arg01, local01
05594     F4 B3 B1 FD | 	call	#__system___string_cmp
05598     00 FA 0D F2 | 	cmp	result1, #0 wz
0559c     FC 03 90 AD |  if_e	jmp	#LR__0431
055a0     83 01 00 FF 
055a4     48 14 06 F6 | 	mov	arg02, ##@LR__5307
055a8     0F 13 02 F6 | 	mov	arg01, local01
055ac     DC B3 B1 FD | 	call	#__system___string_cmp
055b0     00 FA 0D F2 | 	cmp	result1, #0 wz
055b4     EC 03 90 AD |  if_e	jmp	#LR__0432
055b8     83 01 00 FF 
055bc     4C 14 06 F6 | 	mov	arg02, ##@LR__5308
055c0     0F 13 02 F6 | 	mov	arg01, local01
055c4     C4 B3 B1 FD | 	call	#__system___string_cmp
055c8     00 FA 0D F2 | 	cmp	result1, #0 wz
055cc     DC 03 90 AD |  if_e	jmp	#LR__0433
055d0     83 01 00 FF 
055d4     51 14 06 F6 | 	mov	arg02, ##@LR__5309
055d8     0F 13 02 F6 | 	mov	arg01, local01
055dc     AC B3 B1 FD | 	call	#__system___string_cmp
055e0     00 FA 0D F2 | 	cmp	result1, #0 wz
055e4     CC 03 90 AD |  if_e	jmp	#LR__0434
055e8     83 01 00 FF 
055ec     55 14 06 F6 | 	mov	arg02, ##@LR__5310
055f0     0F 13 02 F6 | 	mov	arg01, local01
055f4     94 B3 B1 FD | 	call	#__system___string_cmp
055f8     00 FA 0D F2 | 	cmp	result1, #0 wz
055fc     BC 03 90 AD |  if_e	jmp	#LR__0435
05600     83 01 00 FF 
05604     5A 14 06 F6 | 	mov	arg02, ##@LR__5311
05608     0F 13 02 F6 | 	mov	arg01, local01
0560c     7C B3 B1 FD | 	call	#__system___string_cmp
05610     00 FA 0D F2 | 	cmp	result1, #0 wz
05614     AC 03 90 AD |  if_e	jmp	#LR__0436
05618     83 01 00 FF 
0561c     5E 14 06 F6 | 	mov	arg02, ##@LR__5312
05620     0F 13 02 F6 | 	mov	arg01, local01
05624     64 B3 B1 FD | 	call	#__system___string_cmp
05628     00 FA 0D F2 | 	cmp	result1, #0 wz
0562c     9C 03 90 AD |  if_e	jmp	#LR__0437
05630     83 01 00 FF 
05634     63 14 06 F6 | 	mov	arg02, ##@LR__5313
05638     0F 13 02 F6 | 	mov	arg01, local01
0563c     4C B3 B1 FD | 	call	#__system___string_cmp
05640     00 FA 0D F2 | 	cmp	result1, #0 wz
05644     8C 03 90 AD |  if_e	jmp	#LR__0438
05648     83 01 00 FF 
0564c     68 14 06 F6 | 	mov	arg02, ##@LR__5314
05650     0F 13 02 F6 | 	mov	arg01, local01
05654     34 B3 B1 FD | 	call	#__system___string_cmp
05658     00 FA 0D F2 | 	cmp	result1, #0 wz
0565c     7C 03 90 AD |  if_e	jmp	#LR__0439
05660     83 01 00 FF 
05664     6C 14 06 F6 | 	mov	arg02, ##@LR__5315
05668     0F 13 02 F6 | 	mov	arg01, local01
0566c     1C B3 B1 FD | 	call	#__system___string_cmp
05670     00 FA 0D F2 | 	cmp	result1, #0 wz
05674     6C 03 90 AD |  if_e	jmp	#LR__0440
05678     83 01 00 FF 
0567c     72 14 06 F6 | 	mov	arg02, ##@LR__5316
05680     0F 13 02 F6 | 	mov	arg01, local01
05684     04 B3 B1 FD | 	call	#__system___string_cmp
05688     00 FA 0D F2 | 	cmp	result1, #0 wz
0568c     5C 03 90 AD |  if_e	jmp	#LR__0441
05690     83 01 00 FF 
05694     76 14 06 F6 | 	mov	arg02, ##@LR__5317
05698     0F 13 02 F6 | 	mov	arg01, local01
0569c     EC B2 B1 FD | 	call	#__system___string_cmp
056a0     00 FA 0D F2 | 	cmp	result1, #0 wz
056a4     4C 03 90 AD |  if_e	jmp	#LR__0442
056a8     83 01 00 FF 
056ac     7F 14 06 F6 | 	mov	arg02, ##@LR__5318
056b0     0F 13 02 F6 | 	mov	arg01, local01
056b4     D4 B2 B1 FD | 	call	#__system___string_cmp
056b8     00 FA 0D F2 | 	cmp	result1, #0 wz
056bc     3C 03 90 AD |  if_e	jmp	#LR__0443
056c0     83 01 00 FF 
056c4     83 14 06 F6 | 	mov	arg02, ##@LR__5319
056c8     0F 13 02 F6 | 	mov	arg01, local01
056cc     BC B2 B1 FD | 	call	#__system___string_cmp
056d0     00 FA 0D F2 | 	cmp	result1, #0 wz
056d4     2C 03 90 AD |  if_e	jmp	#LR__0444
056d8     83 01 00 FF 
056dc     91 14 06 F6 | 	mov	arg02, ##@LR__5320
056e0     0F 13 02 F6 | 	mov	arg01, local01
056e4     A4 B2 B1 FD | 	call	#__system___string_cmp
056e8     00 FA 0D F2 | 	cmp	result1, #0 wz
056ec     1C 03 90 AD |  if_e	jmp	#LR__0445
056f0     83 01 00 FF 
056f4     9E 14 06 F6 | 	mov	arg02, ##@LR__5321
056f8     0F 13 02 F6 | 	mov	arg01, local01
056fc     8C B2 B1 FD | 	call	#__system___string_cmp
05700     00 FA 0D F2 | 	cmp	result1, #0 wz
05704     0C 03 90 AD |  if_e	jmp	#LR__0446
05708     83 01 00 FF 
0570c     A6 14 06 F6 | 	mov	arg02, ##@LR__5322
05710     0F 13 02 F6 | 	mov	arg01, local01
05714     74 B2 B1 FD | 	call	#__system___string_cmp
05718     00 FA 0D F2 | 	cmp	result1, #0 wz
0571c     FC 02 90 AD |  if_e	jmp	#LR__0447
05720     83 01 00 FF 
05724     AB 14 06 F6 | 	mov	arg02, ##@LR__5323
05728     0F 13 02 F6 | 	mov	arg01, local01
0572c     5C B2 B1 FD | 	call	#__system___string_cmp
05730     00 FA 0D F2 | 	cmp	result1, #0 wz
05734     EC 02 90 AD |  if_e	jmp	#LR__0448
05738     83 01 00 FF 
0573c     B2 14 06 F6 | 	mov	arg02, ##@LR__5324
05740     0F 13 02 F6 | 	mov	arg01, local01
05744     44 B2 B1 FD | 	call	#__system___string_cmp
05748     00 FA 0D F2 | 	cmp	result1, #0 wz
0574c     DC 02 90 AD |  if_e	jmp	#LR__0449
05750     83 01 00 FF 
05754     B6 14 06 F6 | 	mov	arg02, ##@LR__5325
05758     0F 13 02 F6 | 	mov	arg01, local01
0575c     2C B2 B1 FD | 	call	#__system___string_cmp
05760     00 FA 0D F2 | 	cmp	result1, #0 wz
05764     CC 02 90 AD |  if_e	jmp	#LR__0450
05768     83 01 00 FF 
0576c     BC 14 06 F6 | 	mov	arg02, ##@LR__5326
05770     0F 13 02 F6 | 	mov	arg01, local01
05774     14 B2 B1 FD | 	call	#__system___string_cmp
05778     00 FA 0D F2 | 	cmp	result1, #0 wz
0577c     BC 02 90 AD |  if_e	jmp	#LR__0451
05780     83 01 00 FF 
05784     C0 14 06 F6 | 	mov	arg02, ##@LR__5327
05788     0F 13 02 F6 | 	mov	arg01, local01
0578c     FC B1 B1 FD | 	call	#__system___string_cmp
05790     00 FA 0D F2 | 	cmp	result1, #0 wz
05794     AC 02 90 AD |  if_e	jmp	#LR__0452
05798     83 01 00 FF 
0579c     C4 14 06 F6 | 	mov	arg02, ##@LR__5328
057a0     0F 13 02 F6 | 	mov	arg01, local01
057a4     E4 B1 B1 FD | 	call	#__system___string_cmp
057a8     00 FA 0D F2 | 	cmp	result1, #0 wz
057ac     9C 02 90 AD |  if_e	jmp	#LR__0453
057b0     83 01 00 FF 
057b4     CA 14 06 F6 | 	mov	arg02, ##@LR__5329
057b8     0F 13 02 F6 | 	mov	arg01, local01
057bc     CC B1 B1 FD | 	call	#__system___string_cmp
057c0     00 FA 0D F2 | 	cmp	result1, #0 wz
057c4     8C 02 90 AD |  if_e	jmp	#LR__0454
057c8     83 01 00 FF 
057cc     CF 14 06 F6 | 	mov	arg02, ##@LR__5330
057d0     0F 13 02 F6 | 	mov	arg01, local01
057d4     B4 B1 B1 FD | 	call	#__system___string_cmp
057d8     00 FA 0D F2 | 	cmp	result1, #0 wz
057dc     7C 02 90 AD |  if_e	jmp	#LR__0455
057e0     83 01 00 FF 
057e4     D6 14 06 F6 | 	mov	arg02, ##@LR__5331
057e8     0F 13 02 F6 | 	mov	arg01, local01
057ec     9C B1 B1 FD | 	call	#__system___string_cmp
057f0     00 FA 0D F2 | 	cmp	result1, #0 wz
057f4     6C 02 90 AD |  if_e	jmp	#LR__0456
057f8     83 01 00 FF 
057fc     DD 14 06 F6 | 	mov	arg02, ##@LR__5332
05800     0F 13 02 F6 | 	mov	arg01, local01
05804     84 B1 B1 FD | 	call	#__system___string_cmp
05808     00 FA 0D F2 | 	cmp	result1, #0 wz
0580c     5C 02 90 AD |  if_e	jmp	#LR__0457
05810     83 01 00 FF 
05814     E4 14 06 F6 | 	mov	arg02, ##@LR__5333
05818     0F 13 02 F6 | 	mov	arg01, local01
0581c     6C B1 B1 FD | 	call	#__system___string_cmp
05820     00 FA 0D F2 | 	cmp	result1, #0 wz
05824     4C 02 90 AD |  if_e	jmp	#LR__0458
05828     83 01 00 FF 
0582c     EB 14 06 F6 | 	mov	arg02, ##@LR__5334
05830     0F 13 02 F6 | 	mov	arg01, local01
05834     54 B1 B1 FD | 	call	#__system___string_cmp
05838     00 FA 0D F2 | 	cmp	result1, #0 wz
0583c     3C 02 90 AD |  if_e	jmp	#LR__0459
05840     83 01 00 FF 
05844     F0 14 06 F6 | 	mov	arg02, ##@LR__5335
05848     0F 13 02 F6 | 	mov	arg01, local01
0584c     3C B1 B1 FD | 	call	#__system___string_cmp
05850     00 FA 0D F2 | 	cmp	result1, #0 wz
05854     2C 02 90 AD |  if_e	jmp	#LR__0460
05858     83 01 00 FF 
0585c     F8 14 06 F6 | 	mov	arg02, ##@LR__5336
05860     0F 13 02 F6 | 	mov	arg01, local01
05864     24 B1 B1 FD | 	call	#__system___string_cmp
05868     00 FA 0D F2 | 	cmp	result1, #0 wz
0586c     1C 02 90 AD |  if_e	jmp	#LR__0461
05870     83 01 00 FF 
05874     FE 14 06 F6 | 	mov	arg02, ##@LR__5337
05878     0F 13 02 F6 | 	mov	arg01, local01
0587c     0C B1 B1 FD | 	call	#__system___string_cmp
05880     00 FA 0D F2 | 	cmp	result1, #0 wz
05884     0C 02 90 AD |  if_e	jmp	#LR__0462
05888     83 01 00 FF 
0588c     05 15 06 F6 | 	mov	arg02, ##@LR__5338
05890     0F 13 02 F6 | 	mov	arg01, local01
05894     F4 B0 B1 FD | 	call	#__system___string_cmp
05898     00 FA 0D F2 | 	cmp	result1, #0 wz
0589c     FC 01 90 AD |  if_e	jmp	#LR__0463
058a0     83 01 00 FF 
058a4     0B 15 06 F6 | 	mov	arg02, ##@LR__5339
058a8     0F 13 02 F6 | 	mov	arg01, local01
058ac     DC B0 B1 FD | 	call	#__system___string_cmp
058b0     00 FA 0D F2 | 	cmp	result1, #0 wz
058b4     EC 01 90 AD |  if_e	jmp	#LR__0464
058b8     83 01 00 FF 
058bc     11 15 06 F6 | 	mov	arg02, ##@LR__5340
058c0     0F 13 02 F6 | 	mov	arg01, local01
058c4     C4 B0 B1 FD | 	call	#__system___string_cmp
058c8     00 FA 0D F2 | 	cmp	result1, #0 wz
058cc     DC 01 90 AD |  if_e	jmp	#LR__0465
058d0     83 01 00 FF 
058d4     15 15 06 F6 | 	mov	arg02, ##@LR__5341
058d8     0F 13 02 F6 | 	mov	arg01, local01
058dc     AC B0 B1 FD | 	call	#__system___string_cmp
058e0     00 FA 0D F2 | 	cmp	result1, #0 wz
058e4     CC 01 90 AD |  if_e	jmp	#LR__0466
058e8     83 01 00 FF 
058ec     19 15 06 F6 | 	mov	arg02, ##@LR__5342
058f0     0F 13 02 F6 | 	mov	arg01, local01
058f4     94 B0 B1 FD | 	call	#__system___string_cmp
058f8     00 FA 0D F2 | 	cmp	result1, #0 wz
058fc     BC 01 90 AD |  if_e	jmp	#LR__0467
05900     83 01 00 FF 
05904     1D 15 06 F6 | 	mov	arg02, ##@LR__5343
05908     0F 13 02 F6 | 	mov	arg01, local01
0590c     7C B0 B1 FD | 	call	#__system___string_cmp
05910     00 FA 0D F2 | 	cmp	result1, #0 wz
05914     AC 01 90 AD |  if_e	jmp	#LR__0468
05918     83 01 00 FF 
0591c     23 15 06 F6 | 	mov	arg02, ##@LR__5344
05920     0F 13 02 F6 | 	mov	arg01, local01
05924     64 B0 B1 FD | 	call	#__system___string_cmp
05928     00 FA 0D F2 | 	cmp	result1, #0 wz
0592c     9C 01 90 AD |  if_e	jmp	#LR__0469
05930     83 01 00 FF 
05934     29 15 06 F6 | 	mov	arg02, ##@LR__5345
05938     0F 13 02 F6 | 	mov	arg01, local01
0593c     4C B0 B1 FD | 	call	#__system___string_cmp
05940     00 FA 0D F2 | 	cmp	result1, #0 wz
05944     8C 01 90 AD |  if_e	jmp	#LR__0470
05948     83 01 00 FF 
0594c     2E 15 06 F6 | 	mov	arg02, ##@LR__5346
05950     0F 13 02 F6 | 	mov	arg01, local01
05954     34 B0 B1 FD | 	call	#__system___string_cmp
05958     00 FA 0D F2 | 	cmp	result1, #0 wz
0595c     7C 01 90 AD |  if_e	jmp	#LR__0471
05960     83 01 00 FF 
05964     32 15 06 F6 | 	mov	arg02, ##@LR__5347
05968     0F 13 02 F6 | 	mov	arg01, local01
0596c     1C B0 B1 FD | 	call	#__system___string_cmp
05970     00 FA 0D F2 | 	cmp	result1, #0 wz
05974     6C 01 90 AD |  if_e	jmp	#LR__0472
05978     83 01 00 FF 
0597c     36 15 06 F6 | 	mov	arg02, ##@LR__5348
05980     0F 13 02 F6 | 	mov	arg01, local01
05984     04 B0 B1 FD | 	call	#__system___string_cmp
05988     00 FA 0D F2 | 	cmp	result1, #0 wz
0598c     5C 01 90 AD |  if_e	jmp	#LR__0473
05990     60 01 90 FD | 	jmp	#LR__0474
05994                 | LR__0430
05994     9E FA 05 F6 | 	mov	result1, #158
05998     5C 01 90 FD | 	jmp	#LR__0475
0599c                 | LR__0431
0599c     85 FA 05 F6 | 	mov	result1, #133
059a0     54 01 90 FD | 	jmp	#LR__0475
059a4                 | LR__0432
059a4     9B FA 05 F6 | 	mov	result1, #155
059a8     4C 01 90 FD | 	jmp	#LR__0475
059ac                 | LR__0433
059ac     9B FA 05 F6 | 	mov	result1, #155
059b0     44 01 90 FD | 	jmp	#LR__0475
059b4                 | LR__0434
059b4     A7 FA 05 F6 | 	mov	result1, #167
059b8     3C 01 90 FD | 	jmp	#LR__0475
059bc                 | LR__0435
059bc     84 FA 05 F6 | 	mov	result1, #132
059c0     34 01 90 FD | 	jmp	#LR__0475
059c4                 | LR__0436
059c4     86 FA 05 F6 | 	mov	result1, #134
059c8     2C 01 90 FD | 	jmp	#LR__0475
059cc                 | LR__0437
059cc     A2 FA 05 F6 | 	mov	result1, #162
059d0     24 01 90 FD | 	jmp	#LR__0475
059d4                 | LR__0438
059d4     9F FA 05 F6 | 	mov	result1, #159
059d8     1C 01 90 FD | 	jmp	#LR__0475
059dc                 | LR__0439
059dc     82 FA 05 F6 | 	mov	result1, #130
059e0     14 01 90 FD | 	jmp	#LR__0475
059e4                 | LR__0440
059e4     99 FA 05 F6 | 	mov	result1, #153
059e8     0C 01 90 FD | 	jmp	#LR__0475
059ec                 | LR__0441
059ec     9C FA 05 F6 | 	mov	result1, #156
059f0     04 01 90 FD | 	jmp	#LR__0475
059f4                 | LR__0442
059f4     6F FA 05 F6 | 	mov	result1, #111
059f8     FC 00 90 FD | 	jmp	#LR__0475
059fc                 | LR__0443
059fc     6F FA 05 F6 | 	mov	result1, #111
05a00     F4 00 90 FD | 	jmp	#LR__0475
05a04                 | LR__0444
05a04     93 FA 05 F6 | 	mov	result1, #147
05a08     EC 00 90 FD | 	jmp	#LR__0475
05a0c                 | LR__0445
05a0c     94 FA 05 F6 | 	mov	result1, #148
05a10     E4 00 90 FD | 	jmp	#LR__0475
05a14                 | LR__0446
05a14     62 FA 05 F6 | 	mov	result1, #98
05a18     DC 00 90 FD | 	jmp	#LR__0475
05a1c                 | LR__0447
05a1c     A3 FA 05 F6 | 	mov	result1, #163
05a20     D4 00 90 FD | 	jmp	#LR__0475
05a24                 | LR__0448
05a24     9D FA 05 F6 | 	mov	result1, #157
05a28     CC 00 90 FD | 	jmp	#LR__0475
05a2c                 | LR__0449
05a2c     8A FA 05 F6 | 	mov	result1, #138
05a30     C4 00 90 FD | 	jmp	#LR__0475
05a34                 | LR__0450
05a34     A4 FA 05 F6 | 	mov	result1, #164
05a38     BC 00 90 FD | 	jmp	#LR__0475
05a3c                 | LR__0451
05a3c     A8 FA 05 F6 | 	mov	result1, #168
05a40     B4 00 90 FD | 	jmp	#LR__0475
05a44                 | LR__0452
05a44     AD FA 05 F6 | 	mov	result1, #173
05a48     AC 00 90 FD | 	jmp	#LR__0475
05a4c                 | LR__0453
05a4c     9A FA 05 F6 | 	mov	result1, #154
05a50     A4 00 90 FD | 	jmp	#LR__0475
05a54                 | LR__0454
05a54     A6 FA 05 F6 | 	mov	result1, #166
05a58     9C 00 90 FD | 	jmp	#LR__0475
05a5c                 | LR__0455
05a5c     66 FA 05 F6 | 	mov	result1, #102
05a60     94 00 90 FD | 	jmp	#LR__0475
05a64                 | LR__0456
05a64     67 FA 05 F6 | 	mov	result1, #103
05a68     8C 00 90 FD | 	jmp	#LR__0475
05a6c                 | LR__0457
05a6c     64 FA 05 F6 | 	mov	result1, #100
05a70     84 00 90 FD | 	jmp	#LR__0475
05a74                 | LR__0458
05a74     65 FA 05 F6 | 	mov	result1, #101
05a78     7C 00 90 FD | 	jmp	#LR__0475
05a7c                 | LR__0459
05a7c     98 FA 05 F6 | 	mov	result1, #152
05a80     74 00 90 FD | 	jmp	#LR__0475
05a84                 | LR__0460
05a84     7B FA 05 F6 | 	mov	result1, #123
05a88     6C 00 90 FD | 	jmp	#LR__0475
05a8c                 | LR__0461
05a8c     76 FA 05 F6 | 	mov	result1, #118
05a90     64 00 90 FD | 	jmp	#LR__0475
05a94                 | LR__0462
05a94     A5 FA 05 F6 | 	mov	result1, #165
05a98     5C 00 90 FD | 	jmp	#LR__0475
05a9c                 | LR__0463
05a9c     7A FA 05 F6 | 	mov	result1, #122
05aa0     54 00 90 FD | 	jmp	#LR__0475
05aa4                 | LR__0464
05aa4     BF FA 05 F6 | 	mov	result1, #191
05aa8     4C 00 90 FD | 	jmp	#LR__0475
05aac                 | LR__0465
05aac     54 FA 05 F6 | 	mov	result1, #84
05ab0     44 00 90 FD | 	jmp	#LR__0475
05ab4                 | LR__0466
05ab4     6B FA 05 F6 | 	mov	result1, #107
05ab8     3C 00 90 FD | 	jmp	#LR__0475
05abc                 | LR__0467
05abc     87 FA 05 F6 | 	mov	result1, #135
05ac0     34 00 90 FD | 	jmp	#LR__0475
05ac4                 | LR__0468
05ac4     6A FA 05 F6 | 	mov	result1, #106
05ac8     2C 00 90 FD | 	jmp	#LR__0475
05acc                 | LR__0469
05acc     6E FA 05 F6 | 	mov	result1, #110
05ad0     24 00 90 FD | 	jmp	#LR__0475
05ad4                 | LR__0470
05ad4     A1 FA 05 F6 | 	mov	result1, #161
05ad8     1C 00 90 FD | 	jmp	#LR__0475
05adc                 | LR__0471
05adc     83 FA 05 F6 | 	mov	result1, #131
05ae0     14 00 90 FD | 	jmp	#LR__0475
05ae4                 | LR__0472
05ae4     A0 FA 05 F6 | 	mov	result1, #160
05ae8     0C 00 90 FD | 	jmp	#LR__0475
05aec                 | LR__0473
05aec     9B FA 05 F6 | 	mov	result1, #155
05af0     04 00 90 FD | 	jmp	#LR__0475
05af4                 | LR__0474
05af4     00 FA 05 F6 | 	mov	result1, #0
05af8                 | LR__0475
05af8     A7 F0 03 F6 | 	mov	ptra, fp
05afc     B2 00 A0 FD | 	call	#popregs_
05b00                 | _isfunction_ret
05b00     2D 00 64 FD | 	ret
05b04                 | 
05b04                 | ' 
05b04                 | ' ' Check if the part is a name
05b04                 | ' 
05b04                 | ' function isname(s as string) as boolean
05b04                 | _isname
05b04     0D 4A 05 F6 | 	mov	COUNT_, #13
05b08     A8 00 A0 FD | 	call	#pushregs_
05b0c     09 1F 02 F6 | 	mov	local01, arg01
05b10     09 21 02 F6 | 	mov	local02, arg01
05b14     97 06 48 FB | 	callpa	#(@LR__0481-@LR__0480)>>2,fcache_load_ptr_
05b18                 | LR__0480
05b18     10 FB C9 FA | 	rdbyte	result1, local02 wz
05b1c     01 20 06 51 |  if_ne	add	local02, #1
05b20     F4 FF 9F 5D |  if_ne	jmp	#LR__0480
05b24                 | LR__0481
05b24     09 21 82 F1 | 	sub	local02, arg01
05b28     10 FB 01 F6 | 	mov	result1, local02
05b2c     FD 22 0A F6 | 	mov	local03, result1 wz
05b30     00 FA 05 A6 |  if_e	mov	result1, #0
05b34     34 02 90 AD |  if_e	jmp	#LR__0493
05b38     0F 13 02 F6 | 	mov	arg01, local01
05b3c     01 14 06 F6 | 	mov	arg02, #1
05b40     01 16 06 F6 | 	mov	arg03, #1
05b44     B0 CF B1 FD | 	call	#__system__Mid_S
05b48     FD 24 02 F6 | 	mov	local04, result1
05b4c                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
05b4c     83 01 00 FF 
05b50     3D 15 06 F6 | 	mov	arg02, ##@LR__5349
05b54     12 13 02 F6 | 	mov	arg01, local04
05b58     30 AE B1 FD | 	call	#__system___string_cmp
05b5c     00 FA 55 F2 | 	cmps	result1, #0 wc
05b60     18 00 90 CD |  if_b	jmp	#LR__0482
05b64     83 01 00 FF 
05b68     3F 15 06 F6 | 	mov	arg02, ##@LR__5350
05b6c     12 13 02 F6 | 	mov	arg01, local04
05b70     18 AE B1 FD | 	call	#__system___string_cmp
05b74     01 FA 55 F2 | 	cmps	result1, #1 wc
05b78     1C 00 90 CD |  if_b	jmp	#LR__0483
05b7c                 | LR__0482
05b7c     83 01 00 FF 
05b80     41 15 06 F6 | 	mov	arg02, ##@LR__5351
05b84     12 13 02 F6 | 	mov	arg01, local04
05b88     00 AE B1 FD | 	call	#__system___string_cmp
05b8c     00 FA 0D F2 | 	cmp	result1, #0 wz
05b90     00 FA 05 56 |  if_ne	mov	result1, #0
05b94     D4 01 90 5D |  if_ne	jmp	#LR__0493
05b98                 | LR__0483
05b98                 | ' if l>2 then 
05b98     03 22 56 F2 | 	cmps	local03, #3 wc
05b9c     C8 01 90 CD |  if_b	jmp	#LR__0492
05ba0                 | '   for i=2 to l
05ba0     02 26 06 F6 | 	mov	local05, #2
05ba4     11 29 02 F6 | 	mov	local06, local03
05ba8     01 28 06 F1 | 	add	local06, #1
05bac                 | LR__0484
05bac     14 27 52 F2 | 	cmps	local05, local06 wc
05bb0     B4 01 90 3D |  if_ae	jmp	#LR__0491
05bb4     0F 13 02 F6 | 	mov	arg01, local01
05bb8     13 15 02 F6 | 	mov	arg02, local05
05bbc     01 16 06 F6 | 	mov	arg03, #1
05bc0     34 CF B1 FD | 	call	#__system__Mid_S
05bc4     FD 24 02 F6 | 	mov	local04, result1
05bc8                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false 
05bc8     11 27 52 F2 | 	cmps	local05, local03 wc
05bcc     9C 00 90 3D |  if_ae	jmp	#LR__0487
05bd0     83 01 00 FF 
05bd4     43 15 06 F6 | 	mov	arg02, ##@LR__5352
05bd8     12 13 02 F6 | 	mov	arg01, local04
05bdc     AC AD B1 FD | 	call	#__system___string_cmp
05be0     00 FA 55 F2 | 	cmps	result1, #0 wc
05be4     18 00 90 CD |  if_b	jmp	#LR__0485
05be8     83 01 00 FF 
05bec     45 15 06 F6 | 	mov	arg02, ##@LR__5353
05bf0     12 13 02 F6 | 	mov	arg01, local04
05bf4     94 AD B1 FD | 	call	#__system___string_cmp
05bf8     01 FA 55 F2 | 	cmps	result1, #1 wc
05bfc     6C 00 90 CD |  if_b	jmp	#LR__0487
05c00                 | LR__0485
05c00     83 01 00 FF 
05c04     47 15 06 F6 | 	mov	arg02, ##@LR__5354
05c08     12 13 02 F6 | 	mov	arg01, local04
05c0c     7C AD B1 FD | 	call	#__system___string_cmp
05c10     00 FA 55 F2 | 	cmps	result1, #0 wc
05c14     18 00 90 CD |  if_b	jmp	#LR__0486
05c18     83 01 00 FF 
05c1c     49 15 06 F6 | 	mov	arg02, ##@LR__5355
05c20     12 13 02 F6 | 	mov	arg01, local04
05c24     64 AD B1 FD | 	call	#__system___string_cmp
05c28     01 FA 55 F2 | 	cmps	result1, #1 wc
05c2c     3C 00 90 CD |  if_b	jmp	#LR__0487
05c30                 | LR__0486
05c30     83 01 00 FF 
05c34     4B 2B 06 F6 | 	mov	local07, ##@LR__5356
05c38     12 13 02 F6 | 	mov	arg01, local04
05c3c     15 15 02 F6 | 	mov	arg02, local07
05c40     48 AD B1 FD | 	call	#__system___string_cmp
05c44     00 FA 0D F2 | 	cmp	result1, #0 wz
05c48     20 00 90 AD |  if_e	jmp	#LR__0487
05c4c     83 01 00 FF 
05c50     4D 2D 06 F6 | 	mov	local08, ##@LR__5357
05c54     12 13 02 F6 | 	mov	arg01, local04
05c58     16 15 02 F6 | 	mov	arg02, local08
05c5c     2C AD B1 FD | 	call	#__system___string_cmp
05c60     FD 2E 0A F6 | 	mov	local09, result1 wz
05c64     00 FA 05 56 |  if_ne	mov	result1, #0
05c68     00 01 90 5D |  if_ne	jmp	#LR__0493
05c6c                 | LR__0487
05c6c                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
05c6c     11 27 0A F2 | 	cmp	local05, local03 wz
05c70     EC 00 90 5D |  if_ne	jmp	#LR__0490
05c74     83 01 00 FF 
05c78     4F 31 06 F6 | 	mov	local10, ##@LR__5358
05c7c     12 13 02 F6 | 	mov	arg01, local04
05c80     18 15 02 F6 | 	mov	arg02, local10
05c84     04 AD B1 FD | 	call	#__system___string_cmp
05c88     FD 32 02 F6 | 	mov	local11, result1
05c8c     00 32 56 F2 | 	cmps	local11, #0 wc
05c90     1C 00 90 CD |  if_b	jmp	#LR__0488
05c94     83 01 00 FF 
05c98     51 15 06 F6 | 	mov	arg02, ##@LR__5359
05c9c     12 13 02 F6 | 	mov	arg01, local04
05ca0     E8 AC B1 FD | 	call	#__system___string_cmp
05ca4     FD 30 02 F6 | 	mov	local10, result1
05ca8     01 30 56 F2 | 	cmps	local10, #1 wc
05cac     B0 00 90 CD |  if_b	jmp	#LR__0490
05cb0                 | LR__0488
05cb0     83 01 00 FF 
05cb4     53 15 06 F6 | 	mov	arg02, ##@LR__5360
05cb8     12 13 02 F6 | 	mov	arg01, local04
05cbc     CC AC B1 FD | 	call	#__system___string_cmp
05cc0     00 FA 55 F2 | 	cmps	result1, #0 wc
05cc4     1C 00 90 CD |  if_b	jmp	#LR__0489
05cc8     83 01 00 FF 
05ccc     55 2F 06 F6 | 	mov	local09, ##@LR__5361
05cd0     12 13 02 F6 | 	mov	arg01, local04
05cd4     17 15 02 F6 | 	mov	arg02, local09
05cd8     B0 AC B1 FD | 	call	#__system___string_cmp
05cdc     01 FA 55 F2 | 	cmps	result1, #1 wc
05ce0     7C 00 90 CD |  if_b	jmp	#LR__0490
05ce4                 | LR__0489
05ce4     83 01 00 FF 
05ce8     57 2F 06 F6 | 	mov	local09, ##@LR__5362
05cec     12 13 02 F6 | 	mov	arg01, local04
05cf0     17 15 02 F6 | 	mov	arg02, local09
05cf4     94 AC B1 FD | 	call	#__system___string_cmp
05cf8     00 FA 4D F2 | 	cmps	result1, #0 wz
05cfc     60 00 90 AD |  if_e	jmp	#LR__0490
05d00     83 01 00 FF 
05d04     59 2D 06 F6 | 	mov	local08, ##@LR__5363
05d08     12 13 02 F6 | 	mov	arg01, local04
05d0c     16 15 02 F6 | 	mov	arg02, local08
05d10     78 AC B1 FD | 	call	#__system___string_cmp
05d14     FD 2E 0A F6 | 	mov	local09, result1 wz
05d18     44 00 90 AD |  if_e	jmp	#LR__0490
05d1c     83 01 00 FF 
05d20     5B 35 06 F6 | 	mov	local12, ##@LR__5364
05d24     1A 2D 02 F6 | 	mov	local08, local12
05d28     12 13 02 F6 | 	mov	arg01, local04
05d2c     16 15 02 F6 | 	mov	arg02, local08
05d30     58 AC B1 FD | 	call	#__system___string_cmp
05d34     FD 2A 0A F6 | 	mov	local07, result1 wz
05d38     24 00 90 AD |  if_e	jmp	#LR__0490
05d3c     83 01 00 FF 
05d40     5D 37 06 F6 | 	mov	local13, ##@LR__5365
05d44     1B 35 02 F6 | 	mov	local12, local13
05d48     12 13 02 F6 | 	mov	arg01, local04
05d4c     1A 15 02 F6 | 	mov	arg02, local12
05d50     38 AC B1 FD | 	call	#__system___string_cmp
05d54     FD 2C 0A F6 | 	mov	local08, result1 wz
05d58     00 FA 05 56 |  if_ne	mov	result1, #0
05d5c     0C 00 90 5D |  if_ne	jmp	#LR__0493
05d60                 | LR__0490
05d60     01 26 06 F1 | 	add	local05, #1
05d64     44 FE 9F FD | 	jmp	#LR__0484
05d68                 | LR__0491
05d68                 | LR__0492
05d68                 | ' return true
05d68     01 FA 65 F6 | 	neg	result1, #1
05d6c                 | LR__0493
05d6c     A7 F0 03 F6 | 	mov	ptra, fp
05d70     B2 00 A0 FD | 	call	#popregs_
05d74                 | _isname_ret
05d74     2D 00 64 FD | 	ret
05d78                 | 
05d78                 | ' 
05d78                 | ' ' Check if the part is a number.  
05d78                 | ' 
05d78                 | ' function isnum(s as string) as boolean 
05d78                 | _isnum
05d78     13 4A 05 F6 | 	mov	COUNT_, #19
05d7c     A8 00 A0 FD | 	call	#pushregs_
05d80     09 1F 02 F6 | 	mov	local01, arg01
05d84     00 20 06 F6 | 	mov	local02, #0
05d88     00 22 06 F6 | 	mov	local03, #0
05d8c     0F 13 02 F6 | 	mov	arg01, local01
05d90     09 25 02 F6 | 	mov	local04, arg01
05d94     97 06 48 FB | 	callpa	#(@LR__0501-@LR__0500)>>2,fcache_load_ptr_
05d98                 | LR__0500
05d98     12 FB C9 FA | 	rdbyte	result1, local04 wz
05d9c     01 24 06 51 |  if_ne	add	local04, #1
05da0     F4 FF 9F 5D |  if_ne	jmp	#LR__0500
05da4                 | LR__0501
05da4     09 25 82 F1 | 	sub	local04, arg01
05da8     12 FB 01 F6 | 	mov	result1, local04
05dac     FD 26 0A F6 | 	mov	local05, result1 wz
05db0     00 FA 05 A6 |  if_e	mov	result1, #0
05db4     A0 03 90 AD |  if_e	jmp	#LR__0516
05db8     0F 13 02 F6 | 	mov	arg01, local01
05dbc     01 14 06 F6 | 	mov	arg02, #1
05dc0     01 16 06 F6 | 	mov	arg03, #1
05dc4     30 CD B1 FD | 	call	#__system__Mid_S
05dc8     FD 28 02 F6 | 	mov	local06, result1
05dcc                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
05dcc     83 01 00 FF 
05dd0     5F 15 06 F6 | 	mov	arg02, ##@LR__5366
05dd4     14 13 02 F6 | 	mov	arg01, local06
05dd8     B0 AB B1 FD | 	call	#__system___string_cmp
05ddc     00 FA 55 F2 | 	cmps	result1, #0 wc
05de0     1C 00 90 CD |  if_b	jmp	#LR__0502
05de4     83 01 00 FF 
05de8     61 2B 06 F6 | 	mov	local07, ##@LR__5367
05dec     14 13 02 F6 | 	mov	arg01, local06
05df0     15 15 02 F6 | 	mov	arg02, local07
05df4     94 AB B1 FD | 	call	#__system___string_cmp
05df8     01 FA 55 F2 | 	cmps	result1, #1 wc
05dfc     84 00 90 CD |  if_b	jmp	#LR__0503
05e00                 | LR__0502
05e00     83 01 00 FF 
05e04     63 2D 06 F6 | 	mov	local08, ##@LR__5368
05e08     16 2B 02 F6 | 	mov	local07, local08
05e0c     14 13 02 F6 | 	mov	arg01, local06
05e10     15 15 02 F6 | 	mov	arg02, local07
05e14     74 AB B1 FD | 	call	#__system___string_cmp
05e18     00 FA 0D F2 | 	cmp	result1, #0 wz
05e1c     64 00 90 AD |  if_e	jmp	#LR__0503
05e20     83 01 00 FF 
05e24     65 2F 06 F6 | 	mov	local09, ##@LR__5369
05e28     17 2D 02 F6 | 	mov	local08, local09
05e2c     14 13 02 F6 | 	mov	arg01, local06
05e30     16 15 02 F6 | 	mov	arg02, local08
05e34     54 AB B1 FD | 	call	#__system___string_cmp
05e38     FD 2A 0A F6 | 	mov	local07, result1 wz
05e3c     44 00 90 AD |  if_e	jmp	#LR__0503
05e40     83 01 00 FF 
05e44     67 31 06 F6 | 	mov	local10, ##@LR__5370
05e48     18 2F 02 F6 | 	mov	local09, local10
05e4c     14 13 02 F6 | 	mov	arg01, local06
05e50     17 15 02 F6 | 	mov	arg02, local09
05e54     34 AB B1 FD | 	call	#__system___string_cmp
05e58     FD 2C 0A F6 | 	mov	local08, result1 wz
05e5c     24 00 90 AD |  if_e	jmp	#LR__0503
05e60     83 01 00 FF 
05e64     69 33 06 F6 | 	mov	local11, ##@LR__5371
05e68     19 31 02 F6 | 	mov	local10, local11
05e6c     14 13 02 F6 | 	mov	arg01, local06
05e70     18 15 02 F6 | 	mov	arg02, local10
05e74     14 AB B1 FD | 	call	#__system___string_cmp
05e78     FD 2E 0A F6 | 	mov	local09, result1 wz
05e7c     00 FA 05 56 |  if_ne	mov	result1, #0
05e80     D4 02 90 5D |  if_ne	jmp	#LR__0516
05e84                 | LR__0503
05e84                 | ' if m$="." then ds=1
05e84     83 01 00 FF 
05e88     6B 15 06 F6 | 	mov	arg02, ##@LR__5372
05e8c     14 13 02 F6 | 	mov	arg01, local06
05e90     F8 AA B1 FD | 	call	#__system___string_cmp
05e94     00 FA 0D F2 | 	cmp	result1, #0 wz
05e98     01 20 06 A6 |  if_e	mov	local02, #1
05e9c                 | ' if m$="$" then hex=1 else hex=0
05e9c     83 01 00 FF 
05ea0     6D 15 06 F6 | 	mov	arg02, ##@LR__5373
05ea4     14 13 02 F6 | 	mov	arg01, local06
05ea8     E0 AA B1 FD | 	call	#__system___string_cmp
05eac     00 FA 0D F2 | 	cmp	result1, #0 wz
05eb0     01 34 06 A6 |  if_e	mov	local12, #1
05eb4     00 34 06 56 |  if_ne	mov	local12, #0
05eb8                 | ' if m$="%" then bin=1 else bin=0
05eb8     83 01 00 FF 
05ebc     6F 15 06 F6 | 	mov	arg02, ##@LR__5374
05ec0     14 13 02 F6 | 	mov	arg01, local06
05ec4     C4 AA B1 FD | 	call	#__system___string_cmp
05ec8     00 FA 0D F2 | 	cmp	result1, #0 wz
05ecc     01 36 06 A6 |  if_e	mov	local13, #1
05ed0     00 36 06 56 |  if_ne	mov	local13, #0
05ed4                 | ' if l>1 then 
05ed4     02 26 56 F2 | 	cmps	local05, #2 wc
05ed8     78 02 90 CD |  if_b	jmp	#LR__0515
05edc                 | '   for i=2 to l
05edc     02 38 06 F6 | 	mov	local14, #2
05ee0     13 3B 02 F6 | 	mov	local15, local05
05ee4     01 3A 06 F1 | 	add	local15, #1
05ee8                 | LR__0504
05ee8     1D 39 52 F2 | 	cmps	local14, local15 wc
05eec     64 02 90 3D |  if_ae	jmp	#LR__0514
05ef0     0F 13 02 F6 | 	mov	arg01, local01
05ef4     1C 15 02 F6 | 	mov	arg02, local14
05ef8     01 16 06 F6 | 	mov	arg03, #1
05efc     F8 CB B1 FD | 	call	#__system__Mid_S
05f00     FD 28 02 F6 | 	mov	local06, result1
05f04     00 3C 06 F6 | 	mov	local16, #0
05f08                 | '     m$=mid$(s,i,1) : b=false
05f08                 | '     if m$>="0" andalso m$<="9" then b=true  
05f08     83 01 00 FF 
05f0c     71 15 06 F6 | 	mov	arg02, ##@LR__5375
05f10     14 13 02 F6 | 	mov	arg01, local06
05f14     74 AA B1 FD | 	call	#__system___string_cmp
05f18     00 FA 55 F2 | 	cmps	result1, #0 wc
05f1c     1C 00 90 CD |  if_b	jmp	#LR__0505
05f20     83 01 00 FF 
05f24     73 2B 06 F6 | 	mov	local07, ##@LR__5376
05f28     14 13 02 F6 | 	mov	arg01, local06
05f2c     15 15 02 F6 | 	mov	arg02, local07
05f30     58 AA B1 FD | 	call	#__system___string_cmp
05f34     01 FA 55 F2 | 	cmps	result1, #1 wc
05f38     01 3C 66 C6 |  if_b	neg	local16, #1
05f3c                 | LR__0505
05f3c                 | '     if m$="_" orelse m$="." orelse m$="E" orelse m$="e" orelse m$="-" then b=true 
05f3c     83 01 00 FF 
05f40     75 15 06 F6 | 	mov	arg02, ##@LR__5377
05f44     14 13 02 F6 | 	mov	arg01, local06
05f48     40 AA B1 FD | 	call	#__system___string_cmp
05f4c     00 FA 0D F2 | 	cmp	result1, #0 wz
05f50     7C 00 90 AD |  if_e	jmp	#LR__0506
05f54     83 01 00 FF 
05f58     77 2B 06 F6 | 	mov	local07, ##@LR__5378
05f5c     14 13 02 F6 | 	mov	arg01, local06
05f60     15 15 02 F6 | 	mov	arg02, local07
05f64     24 AA B1 FD | 	call	#__system___string_cmp
05f68     00 FA 0D F2 | 	cmp	result1, #0 wz
05f6c     60 00 90 AD |  if_e	jmp	#LR__0506
05f70     83 01 00 FF 
05f74     79 2D 06 F6 | 	mov	local08, ##@LR__5379
05f78     16 2B 02 F6 | 	mov	local07, local08
05f7c     14 13 02 F6 | 	mov	arg01, local06
05f80     15 15 02 F6 | 	mov	arg02, local07
05f84     04 AA B1 FD | 	call	#__system___string_cmp
05f88     00 FA 0D F2 | 	cmp	result1, #0 wz
05f8c     40 00 90 AD |  if_e	jmp	#LR__0506
05f90     83 01 00 FF 
05f94     7B 2F 06 F6 | 	mov	local09, ##@LR__5380
05f98     17 2D 02 F6 | 	mov	local08, local09
05f9c     14 13 02 F6 | 	mov	arg01, local06
05fa0     16 15 02 F6 | 	mov	arg02, local08
05fa4     E4 A9 B1 FD | 	call	#__system___string_cmp
05fa8     FD 2A 0A F6 | 	mov	local07, result1 wz
05fac     20 00 90 AD |  if_e	jmp	#LR__0506
05fb0     83 01 00 FF 
05fb4     7D 31 06 F6 | 	mov	local10, ##@LR__5381
05fb8     18 2F 02 F6 | 	mov	local09, local10
05fbc     14 13 02 F6 | 	mov	arg01, local06
05fc0     17 15 02 F6 | 	mov	arg02, local09
05fc4     C4 A9 B1 FD | 	call	#__system___string_cmp
05fc8     FD 2C 0A F6 | 	mov	local08, result1 wz
05fcc     04 00 90 5D |  if_ne	jmp	#LR__0507
05fd0                 | LR__0506
05fd0     01 3C 66 F6 | 	neg	local16, #1
05fd4                 | LR__0507
05fd4                 | '     if hex=1 andalso m$>="a" andalso m$<="f" then b=true
05fd4     01 34 0E F2 | 	cmp	local12, #1 wz
05fd8     34 00 90 5D |  if_ne	jmp	#LR__0508
05fdc     83 01 00 FF 
05fe0     7F 15 06 F6 | 	mov	arg02, ##@LR__5382
05fe4     14 13 02 F6 | 	mov	arg01, local06
05fe8     A0 A9 B1 FD | 	call	#__system___string_cmp
05fec     00 FA 55 F2 | 	cmps	result1, #0 wc
05ff0     1C 00 90 CD |  if_b	jmp	#LR__0508
05ff4     83 01 00 FF 
05ff8     81 2B 06 F6 | 	mov	local07, ##@LR__5383
05ffc     14 13 02 F6 | 	mov	arg01, local06
06000     15 15 02 F6 | 	mov	arg02, local07
06004     84 A9 B1 FD | 	call	#__system___string_cmp
06008     01 FA 55 F2 | 	cmps	result1, #1 wc
0600c     01 3C 66 C6 |  if_b	neg	local16, #1
06010                 | LR__0508
06010                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_" then return false
06010     01 36 0E F2 | 	cmp	local13, #1 wz
06014     58 00 90 5D |  if_ne	jmp	#LR__0510
06018     83 01 00 FF 
0601c     83 15 06 F6 | 	mov	arg02, ##@LR__5384
06020     14 13 02 F6 | 	mov	arg01, local06
06024     64 A9 B1 FD | 	call	#__system___string_cmp
06028     00 FA 55 F2 | 	cmps	result1, #0 wc
0602c     1C 00 90 CD |  if_b	jmp	#LR__0509
06030     83 01 00 FF 
06034     85 2B 06 F6 | 	mov	local07, ##@LR__5385
06038     14 13 02 F6 | 	mov	arg01, local06
0603c     15 15 02 F6 | 	mov	arg02, local07
06040     48 A9 B1 FD | 	call	#__system___string_cmp
06044     01 FA 55 F2 | 	cmps	result1, #1 wc
06048     24 00 90 CD |  if_b	jmp	#LR__0510
0604c                 | LR__0509
0604c     83 01 00 FF 
06050     87 2D 06 F6 | 	mov	local08, ##@LR__5386
06054     16 2B 02 F6 | 	mov	local07, local08
06058     14 13 02 F6 | 	mov	arg01, local06
0605c     15 15 02 F6 | 	mov	arg02, local07
06060     28 A9 B1 FD | 	call	#__system___string_cmp
06064     00 FA 0D F2 | 	cmp	result1, #0 wz
06068     00 FA 05 56 |  if_ne	mov	result1, #0
0606c     E8 00 90 5D |  if_ne	jmp	#LR__0516
06070                 | LR__0510
06070                 | '     if not b then return false
06070     1E 3D 22 F6 | 	not	local16, local16
06074     00 3C 0E F2 | 	cmp	local16, #0 wz
06078     00 FA 05 56 |  if_ne	mov	result1, #0
0607c     D8 00 90 5D |  if_ne	jmp	#LR__0516
06080                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
06080     83 01 00 FF 
06084     89 15 06 F6 | 	mov	arg02, ##@LR__5387
06088     14 13 02 F6 | 	mov	arg01, local06
0608c     FC A8 B1 FD | 	call	#__system___string_cmp
06090     00 FA 0D F2 | 	cmp	result1, #0 wz
06094     3C 00 90 5D |  if_ne	jmp	#LR__0511
06098     1C 15 02 F6 | 	mov	arg02, local14
0609c     01 14 86 F1 | 	sub	arg02, #1
060a0     0F 13 02 F6 | 	mov	arg01, local01
060a4     01 16 06 F6 | 	mov	arg03, #1
060a8     4C CA B1 FD | 	call	#__system__Mid_S
060ac     FD 12 02 F6 | 	mov	arg01, result1
060b0     3C CC B1 FD | 	call	#__system__LCase_S
060b4     FD 12 02 F6 | 	mov	arg01, result1
060b8     83 01 00 FF 
060bc     8B 2B 06 F6 | 	mov	local07, ##@LR__5388
060c0     15 15 02 F6 | 	mov	arg02, local07
060c4     C4 A8 B1 FD | 	call	#__system___string_cmp
060c8     00 FA 0D F2 | 	cmp	result1, #0 wz
060cc     00 FA 05 56 |  if_ne	mov	result1, #0
060d0     84 00 90 5D |  if_ne	jmp	#LR__0516
060d4                 | LR__0511
060d4                 | '     if m$="." then ds+=1: if ds>1 then return false
060d4     83 01 00 FF 
060d8     8D 15 06 F6 | 	mov	arg02, ##@LR__5389
060dc     14 13 02 F6 | 	mov	arg01, local06
060e0     A8 A8 B1 FD | 	call	#__system___string_cmp
060e4     00 FA 0D F2 | 	cmp	result1, #0 wz
060e8     01 20 06 A1 |  if_e	add	local02, #1
060ec     02 20 56 A2 |  if_e	cmps	local02, #2 wc
060f0     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
060f4     60 00 90 2D |  if_nc_and_z	jmp	#LR__0516
060f8                 | '     if m$="E" orelse m$="e" then es+=1: if hex=0 andalso es>1 then return false
060f8     83 01 00 FF 
060fc     8F 3F 06 F6 | 	mov	local17, ##@LR__5390
06100     1F 41 02 F6 | 	mov	local18, local17
06104     14 13 02 F6 | 	mov	arg01, local06
06108     20 15 02 F6 | 	mov	arg02, local18
0610c     7C A8 B1 FD | 	call	#__system___string_cmp
06110     FD 42 0A F6 | 	mov	local19, result1 wz
06114     20 00 90 AD |  if_e	jmp	#LR__0512
06118     83 01 00 FF 
0611c     91 2B 06 F6 | 	mov	local07, ##@LR__5391
06120     15 3F 02 F6 | 	mov	local17, local07
06124     14 13 02 F6 | 	mov	arg01, local06
06128     1F 15 02 F6 | 	mov	arg02, local17
0612c     5C A8 B1 FD | 	call	#__system___string_cmp
06130     FD 40 0A F6 | 	mov	local18, result1 wz
06134     14 00 90 5D |  if_ne	jmp	#LR__0513
06138                 | LR__0512
06138     01 22 06 F1 | 	add	local03, #1
0613c     00 34 0E F2 | 	cmp	local12, #0 wz
06140     02 22 56 A2 |  if_e	cmps	local03, #2 wc
06144     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
06148     0C 00 90 2D |  if_nc_and_z	jmp	#LR__0516
0614c                 | LR__0513
0614c     01 38 06 F1 | 	add	local14, #1
06150     94 FD 9F FD | 	jmp	#LR__0504
06154                 | LR__0514
06154                 | LR__0515
06154                 | ' return true
06154     01 FA 65 F6 | 	neg	result1, #1
06158                 | LR__0516
06158     A7 F0 03 F6 | 	mov	ptra, fp
0615c     B2 00 A0 FD | 	call	#popregs_
06160                 | _isnum_ret
06160     2D 00 64 FD | 	ret
06164                 | 
06164                 | '   
06164                 | ' ' Check if the part is an integer number.    
06164                 | '   
06164                 | ' function isint(s as string) as boolean
06164                 | _isint
06164     0E 4A 05 F6 | 	mov	COUNT_, #14
06168     A8 00 A0 FD | 	call	#pushregs_
0616c     09 1F 02 F6 | 	mov	local01, arg01
06170     09 21 02 F6 | 	mov	local02, arg01
06174     97 06 48 FB | 	callpa	#(@LR__0521-@LR__0520)>>2,fcache_load_ptr_
06178                 | LR__0520
06178     10 FB C9 FA | 	rdbyte	result1, local02 wz
0617c     01 20 06 51 |  if_ne	add	local02, #1
06180     F4 FF 9F 5D |  if_ne	jmp	#LR__0520
06184                 | LR__0521
06184     09 21 82 F1 | 	sub	local02, arg01
06188     10 FB 01 F6 | 	mov	result1, local02
0618c     FD 22 0A F6 | 	mov	local03, result1 wz
06190     00 FA 05 A6 |  if_e	mov	result1, #0
06194     64 02 90 AD |  if_e	jmp	#LR__0534
06198     0F 13 02 F6 | 	mov	arg01, local01
0619c     01 14 06 F6 | 	mov	arg02, #1
061a0     01 16 06 F6 | 	mov	arg03, #1
061a4     50 C9 B1 FD | 	call	#__system__Mid_S
061a8     FD 24 02 F6 | 	mov	local04, result1
061ac                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
061ac     83 01 00 FF 
061b0     93 15 06 F6 | 	mov	arg02, ##@LR__5392
061b4     12 13 02 F6 | 	mov	arg01, local04
061b8     D0 A7 B1 FD | 	call	#__system___string_cmp
061bc     00 FA 55 F2 | 	cmps	result1, #0 wc
061c0     1C 00 90 CD |  if_b	jmp	#LR__0522
061c4     83 01 00 FF 
061c8     95 27 06 F6 | 	mov	local05, ##@LR__5393
061cc     12 13 02 F6 | 	mov	arg01, local04
061d0     13 15 02 F6 | 	mov	arg02, local05
061d4     B4 A7 B1 FD | 	call	#__system___string_cmp
061d8     01 FA 55 F2 | 	cmps	result1, #1 wc
061dc     64 00 90 CD |  if_b	jmp	#LR__0523
061e0                 | LR__0522
061e0     83 01 00 FF 
061e4     97 29 06 F6 | 	mov	local06, ##@LR__5394
061e8     14 27 02 F6 | 	mov	local05, local06
061ec     12 13 02 F6 | 	mov	arg01, local04
061f0     13 15 02 F6 | 	mov	arg02, local05
061f4     94 A7 B1 FD | 	call	#__system___string_cmp
061f8     00 FA 0D F2 | 	cmp	result1, #0 wz
061fc     44 00 90 AD |  if_e	jmp	#LR__0523
06200     83 01 00 FF 
06204     99 2B 06 F6 | 	mov	local07, ##@LR__5395
06208     15 29 02 F6 | 	mov	local06, local07
0620c     12 13 02 F6 | 	mov	arg01, local04
06210     14 15 02 F6 | 	mov	arg02, local06
06214     74 A7 B1 FD | 	call	#__system___string_cmp
06218     FD 26 0A F6 | 	mov	local05, result1 wz
0621c     24 00 90 AD |  if_e	jmp	#LR__0523
06220     83 01 00 FF 
06224     9B 2D 06 F6 | 	mov	local08, ##@LR__5396
06228     16 2B 02 F6 | 	mov	local07, local08
0622c     12 13 02 F6 | 	mov	arg01, local04
06230     15 15 02 F6 | 	mov	arg02, local07
06234     54 A7 B1 FD | 	call	#__system___string_cmp
06238     FD 28 0A F6 | 	mov	local06, result1 wz
0623c     00 FA 05 56 |  if_ne	mov	result1, #0
06240     B8 01 90 5D |  if_ne	jmp	#LR__0534
06244                 | LR__0523
06244                 | ' if m$="$" then hex=1 else hex=0
06244     83 01 00 FF 
06248     9D 15 06 F6 | 	mov	arg02, ##@LR__5397
0624c     12 13 02 F6 | 	mov	arg01, local04
06250     38 A7 B1 FD | 	call	#__system___string_cmp
06254     00 FA 0D F2 | 	cmp	result1, #0 wz
06258     01 2E 06 A6 |  if_e	mov	local09, #1
0625c     00 2E 06 56 |  if_ne	mov	local09, #0
06260                 | ' if m$="%" then bin=1 else bin=0
06260     83 01 00 FF 
06264     9F 15 06 F6 | 	mov	arg02, ##@LR__5398
06268     12 13 02 F6 | 	mov	arg01, local04
0626c     1C A7 B1 FD | 	call	#__system___string_cmp
06270     00 FA 0D F2 | 	cmp	result1, #0 wz
06274     01 30 06 A6 |  if_e	mov	local10, #1
06278     00 30 06 56 |  if_ne	mov	local10, #0
0627c                 | ' if l>1 then 
0627c     02 22 56 F2 | 	cmps	local03, #2 wc
06280     74 01 90 CD |  if_b	jmp	#LR__0533
06284                 | '   for i=2 to l
06284     02 32 06 F6 | 	mov	local11, #2
06288     11 35 02 F6 | 	mov	local12, local03
0628c     01 34 06 F1 | 	add	local12, #1
06290                 | LR__0524
06290     1A 33 52 F2 | 	cmps	local11, local12 wc
06294     60 01 90 3D |  if_ae	jmp	#LR__0532
06298     0F 13 02 F6 | 	mov	arg01, local01
0629c     19 15 02 F6 | 	mov	arg02, local11
062a0     01 16 06 F6 | 	mov	arg03, #1
062a4     50 C8 B1 FD | 	call	#__system__Mid_S
062a8     FD 24 02 F6 | 	mov	local04, result1
062ac                 | '     m$=mid$(s,i,1) 
062ac                 | '     if hex=0 andalso (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
062ac     00 2E 0E F2 | 	cmp	local09, #0 wz
062b0     50 00 90 5D |  if_ne	jmp	#LR__0526
062b4     83 01 00 FF 
062b8     A1 15 06 F6 | 	mov	arg02, ##@LR__5399
062bc     12 13 02 F6 | 	mov	arg01, local04
062c0     C8 A6 B1 FD | 	call	#__system___string_cmp
062c4     00 FA 55 F2 | 	cmps	result1, #0 wc
062c8     18 00 90 CD |  if_b	jmp	#LR__0525
062cc     83 01 00 FF 
062d0     A3 15 06 F6 | 	mov	arg02, ##@LR__5400
062d4     12 13 02 F6 | 	mov	arg01, local04
062d8     B0 A6 B1 FD | 	call	#__system___string_cmp
062dc     01 FA 55 F2 | 	cmps	result1, #1 wc
062e0     20 00 90 CD |  if_b	jmp	#LR__0526
062e4                 | LR__0525
062e4     83 01 00 FF 
062e8     A5 29 06 F6 | 	mov	local06, ##@LR__5401
062ec     12 13 02 F6 | 	mov	arg01, local04
062f0     14 15 02 F6 | 	mov	arg02, local06
062f4     94 A6 B1 FD | 	call	#__system___string_cmp
062f8     00 FA 0D F2 | 	cmp	result1, #0 wz
062fc     00 FA 05 56 |  if_ne	mov	result1, #0
06300     F8 00 90 5D |  if_ne	jmp	#LR__0534
06304                 | LR__0526
06304                 | '     if hex=1 andalso (m$<"0" orelse m$>"9") andalso (m$<"a" orelse m$>"f") andalso m$<>"_"  then return false
06304     01 2E 0E F2 | 	cmp	local09, #1 wz
06308     90 00 90 5D |  if_ne	jmp	#LR__0529
0630c     83 01 00 FF 
06310     A7 15 06 F6 | 	mov	arg02, ##@LR__5402
06314     12 13 02 F6 | 	mov	arg01, local04
06318     70 A6 B1 FD | 	call	#__system___string_cmp
0631c     00 FA 55 F2 | 	cmps	result1, #0 wc
06320     1C 00 90 CD |  if_b	jmp	#LR__0527
06324     83 01 00 FF 
06328     A9 15 06 F6 | 	mov	arg02, ##@LR__5403
0632c     12 13 02 F6 | 	mov	arg01, local04
06330     58 A6 B1 FD | 	call	#__system___string_cmp
06334     FD 36 02 F6 | 	mov	local13, result1
06338     01 36 56 F2 | 	cmps	local13, #1 wc
0633c     5C 00 90 CD |  if_b	jmp	#LR__0529
06340                 | LR__0527
06340     83 01 00 FF 
06344     AB 27 06 F6 | 	mov	local05, ##@LR__5404
06348     12 13 02 F6 | 	mov	arg01, local04
0634c     13 15 02 F6 | 	mov	arg02, local05
06350     38 A6 B1 FD | 	call	#__system___string_cmp
06354     FD 38 02 F6 | 	mov	local14, result1
06358     00 38 56 F2 | 	cmps	local14, #0 wc
0635c     1C 00 90 CD |  if_b	jmp	#LR__0528
06360     83 01 00 FF 
06364     AD 2B 06 F6 | 	mov	local07, ##@LR__5405
06368     12 13 02 F6 | 	mov	arg01, local04
0636c     15 15 02 F6 | 	mov	arg02, local07
06370     18 A6 B1 FD | 	call	#__system___string_cmp
06374     01 FA 55 F2 | 	cmps	result1, #1 wc
06378     20 00 90 CD |  if_b	jmp	#LR__0529
0637c                 | LR__0528
0637c     83 01 00 FF 
06380     AF 2D 06 F6 | 	mov	local08, ##@LR__5406
06384     12 13 02 F6 | 	mov	arg01, local04
06388     16 15 02 F6 | 	mov	arg02, local08
0638c     FC A5 B1 FD | 	call	#__system___string_cmp
06390     00 FA 0D F2 | 	cmp	result1, #0 wz
06394     00 FA 05 56 |  if_ne	mov	result1, #0
06398     60 00 90 5D |  if_ne	jmp	#LR__0534
0639c                 | LR__0529
0639c                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_"  then return false
0639c     01 30 0E F2 | 	cmp	local10, #1 wz
063a0     4C 00 90 5D |  if_ne	jmp	#LR__0531
063a4     83 01 00 FF 
063a8     B1 15 06 F6 | 	mov	arg02, ##@LR__5407
063ac     12 13 02 F6 | 	mov	arg01, local04
063b0     D8 A5 B1 FD | 	call	#__system___string_cmp
063b4     00 FA 55 F2 | 	cmps	result1, #0 wc
063b8     18 00 90 CD |  if_b	jmp	#LR__0530
063bc     83 01 00 FF 
063c0     B3 15 06 F6 | 	mov	arg02, ##@LR__5408
063c4     12 13 02 F6 | 	mov	arg01, local04
063c8     C0 A5 B1 FD | 	call	#__system___string_cmp
063cc     01 FA 55 F2 | 	cmps	result1, #1 wc
063d0     1C 00 90 CD |  if_b	jmp	#LR__0531
063d4                 | LR__0530
063d4     83 01 00 FF 
063d8     B5 15 06 F6 | 	mov	arg02, ##@LR__5409
063dc     12 13 02 F6 | 	mov	arg01, local04
063e0     A8 A5 B1 FD | 	call	#__system___string_cmp
063e4     00 FA 0D F2 | 	cmp	result1, #0 wz
063e8     00 FA 05 56 |  if_ne	mov	result1, #0
063ec     0C 00 90 5D |  if_ne	jmp	#LR__0534
063f0                 | LR__0531
063f0     01 32 06 F1 | 	add	local11, #1
063f4     98 FE 9F FD | 	jmp	#LR__0524
063f8                 | LR__0532
063f8                 | LR__0533
063f8                 | ' return true
063f8     01 FA 65 F6 | 	neg	result1, #1
063fc                 | LR__0534
063fc     A7 F0 03 F6 | 	mov	ptra, fp
06400     B2 00 A0 FD | 	call	#popregs_
06404                 | _isint_ret
06404     2D 00 64 FD | 	ret
06408                 | 
06408                 | ' 
06408                 | ' ' Check if the part is a positive decimal number.  
06408                 | ' 
06408                 | ' function isdec(s as string) as boolean
06408                 | _isdec
06408     05 4A 05 F6 | 	mov	COUNT_, #5
0640c     A8 00 A0 FD | 	call	#pushregs_
06410     09 1F 02 F6 | 	mov	local01, arg01
06414     09 21 02 F6 | 	mov	local02, arg01
06418     97 06 48 FB | 	callpa	#(@LR__0541-@LR__0540)>>2,fcache_load_ptr_
0641c                 | LR__0540
0641c     10 FB C9 FA | 	rdbyte	result1, local02 wz
06420     01 20 06 51 |  if_ne	add	local02, #1
06424     F4 FF 9F 5D |  if_ne	jmp	#LR__0540
06428                 | LR__0541
06428     09 21 82 F1 | 	sub	local02, arg01
0642c     10 FB 01 F6 | 	mov	result1, local02
06430     FD 20 0A F6 | 	mov	local02, result1 wz
06434     00 FA 05 A6 |  if_e	mov	result1, #0
06438     80 00 90 AD |  if_e	jmp	#LR__0546
0643c                 | ' for i=1 to l
0643c     01 22 06 F6 | 	mov	local03, #1
06440     10 25 02 F6 | 	mov	local04, local02
06444     01 24 06 F1 | 	add	local04, #1
06448                 | LR__0542
06448     12 23 52 F2 | 	cmps	local03, local04 wc
0644c     68 00 90 3D |  if_ae	jmp	#LR__0545
06450     0F 13 02 F6 | 	mov	arg01, local01
06454     11 15 02 F6 | 	mov	arg02, local03
06458     01 16 06 F6 | 	mov	arg03, #1
0645c     98 C6 B1 FD | 	call	#__system__Mid_S
06460     FD 26 02 F6 | 	mov	local05, result1
06464                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
06464     83 01 00 FF 
06468     B7 15 06 F6 | 	mov	arg02, ##@LR__5410
0646c     13 13 02 F6 | 	mov	arg01, local05
06470     18 A5 B1 FD | 	call	#__system___string_cmp
06474     00 FA 55 F2 | 	cmps	result1, #0 wc
06478     18 00 90 CD |  if_b	jmp	#LR__0543
0647c     83 01 00 FF 
06480     B9 15 06 F6 | 	mov	arg02, ##@LR__5411
06484     13 13 02 F6 | 	mov	arg01, local05
06488     00 A5 B1 FD | 	call	#__system___string_cmp
0648c     01 FA 55 F2 | 	cmps	result1, #1 wc
06490     1C 00 90 CD |  if_b	jmp	#LR__0544
06494                 | LR__0543
06494     83 01 00 FF 
06498     BB 15 06 F6 | 	mov	arg02, ##@LR__5412
0649c     13 13 02 F6 | 	mov	arg01, local05
064a0     E8 A4 B1 FD | 	call	#__system___string_cmp
064a4     00 FA 0D F2 | 	cmp	result1, #0 wz
064a8     00 FA 05 56 |  if_ne	mov	result1, #0
064ac     0C 00 90 5D |  if_ne	jmp	#LR__0546
064b0                 | LR__0544
064b0     01 22 06 F1 | 	add	local03, #1
064b4     90 FF 9F FD | 	jmp	#LR__0542
064b8                 | LR__0545
064b8                 | ' return true
064b8     01 FA 65 F6 | 	neg	result1, #1
064bc                 | LR__0546
064bc     A7 F0 03 F6 | 	mov	ptra, fp
064c0     B2 00 A0 FD | 	call	#popregs_
064c4                 | _isdec_ret
064c4     2D 00 64 FD | 	ret
064c8                 | 
064c8                 | ' 
064c8                 | ' ' Check if the part is a string.  
064c8                 | ' 
064c8                 | ' function isstring(s as string) as boolean
064c8                 | _isstring
064c8     01 4A 05 F6 | 	mov	COUNT_, #1
064cc     A8 00 A0 FD | 	call	#pushregs_
064d0                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
064d0     09 1F 02 F6 | 	mov	local01, arg01
064d4     01 14 06 F6 | 	mov	arg02, #1
064d8     04 C5 B1 FD | 	call	#__system__Left_S
064dc     FD 12 02 F6 | 	mov	arg01, result1
064e0     83 01 00 FF 
064e4     BD 15 06 F6 | 	mov	arg02, ##@LR__5413
064e8     A0 A4 B1 FD | 	call	#__system___string_cmp
064ec     00 FA 4D F2 | 	cmps	result1, #0 wz
064f0     28 00 90 5D |  if_ne	jmp	#LR__0550
064f4     0F 13 02 F6 | 	mov	arg01, local01
064f8     01 14 06 F6 | 	mov	arg02, #1
064fc     68 C5 B1 FD | 	call	#__system__Right_S
06500     FD 12 02 F6 | 	mov	arg01, result1
06504     83 01 00 FF 
06508     BF 15 06 F6 | 	mov	arg02, ##@LR__5414
0650c     7C A4 B1 FD | 	call	#__system___string_cmp
06510     00 FA 4D F2 | 	cmps	result1, #0 wz
06514     01 FA 65 A6 |  if_e	neg	result1, #1
06518     04 00 90 AD |  if_e	jmp	#LR__0551
0651c                 | LR__0550
0651c     00 FA 05 F6 | 	mov	result1, #0
06520                 | LR__0551
06520     A7 F0 03 F6 | 	mov	ptra, fp
06524     B2 00 A0 FD | 	call	#popregs_
06528                 | _isstring_ret
06528     2D 00 64 FD | 	ret
0652c                 | 
0652c                 | ' 
0652c                 | ' ' getnoteval. Returns the frequency of note token
0652c                 | ' 
0652c                 | ' function getnoteval(token) as single
0652c                 | _getnoteval
0652c     02 4A 05 F6 | 	mov	COUNT_, #2
06530     A8 00 A0 FD | 	call	#pushregs_
06534     01 00 00 FF 
06538     00 13 86 F1 | 	sub	arg01, ##768
0653c     09 15 52 F6 | 	abs	arg02, arg01 wc
06540     0C 14 16 FD | 	qdiv	arg02, #12
06544     14 00 00 FF 
06548     D8 E4 05 F1 | 	add	objptr, ##10456
0654c     19 14 62 FD | 	getqy	arg02
06550     0A 15 82 F6 | 	negc	arg02, arg02
06554     02 14 66 F0 | 	shl	arg02, #2
06558     F2 14 02 F1 | 	add	arg02, objptr
0655c     0A 1F 02 FB | 	rdlong	local01, arg02
06560     09 15 52 F6 | 	abs	arg02, arg01 wc
06564     0C 14 16 FD | 	qdiv	arg02, #12
06568     14 00 00 FF 
0656c     D8 E4 85 F1 | 	sub	objptr, ##10456
06570     01 12 06 F6 | 	mov	arg01, #1
06574                 | ' noteexp=1+(note/12) 
06574                 | ' return (2.0^noteexp)*notebase
06574     18 14 62 FD | 	getqx	arg02
06578     0A 13 82 F3 | 	sumc	arg01, arg02
0657c     09 13 52 F6 | 	abs	arg01, arg01 wc
06580     1F 20 C6 C9 |  if_b	decod	local02, #31
06584     00 20 06 36 |  if_ae	mov	local02, #0
06588     88 CB B1 FD | 	call	#__system___float_fromuns
0658c     10 FB 61 F5 | 	xor	result1, local02
06590     FD 14 02 F6 | 	mov	arg02, result1
06594     1E 12 C6 F9 | 	decod	arg01, #30
06598     84 DE B1 FD | 	call	#__system____builtin_powf
0659c     FD 12 02 F6 | 	mov	arg01, result1
065a0     0F 15 02 F6 | 	mov	arg02, local01
065a4     70 CF B1 FD | 	call	#__system___float_mul
065a8     A7 F0 03 F6 | 	mov	ptra, fp
065ac     B2 00 A0 FD | 	call	#popregs_
065b0                 | _getnoteval_ret
065b0     2D 00 64 FD | 	ret
065b4                 | 
065b4                 | ' 
065b4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
065b4                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
065b4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
065b4                 | ' 
065b4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
065b4                 | ' '
065b4                 | ' '               		REVERSE POLISH NOTATION PRECOMPILER
065b4                 | ' '
065b4                 | ' ' A precompiler gets the tokenized line at the input, and outputs the precompiled line that uses the reverse Polish notation.
065b4                 | ' ' That means the operation is done by firs placing the arguments on the stack, and then do the operation on a top of this stack.
065b4                 | ' ' The expression a=b*(c+d) is translated to push c, push d, add, push b, mul, push variable#, assign
065b4                 | ' ' If the precompiled line has a number that is >0, then it is added to the program and saved in the PSRAM using the 2-way list structure
065b4                 | ' ' If the line number=0, it is not saved, and instead it is immediately executed in the "interpret" function
065b4                 | ' ' 
065b4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
065b4                 | ' 
065b4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
065b4                 | ' ' Helper functions to manage program lines
065b4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
065b4                 | ' 
065b4                 | ' '----- delete a line from a program
065b4                 | ' 
065b4                 | ' function deleteline(aline as ulong) as integer
065b4                 | _deleteline
065b4     02 4A 05 F6 | 	mov	COUNT_, #2
065b8     A8 00 A0 FD | 	call	#pushregs_
065bc     2C F0 07 F1 | 	add	ptra, #44
065c0     04 4E 05 F1 | 	add	fp, #4
065c4     A7 12 62 FC | 	wrlong	arg01, fp
065c8     4A 00 00 FF 
065cc     88 E4 05 F1 | 	add	objptr, ##38024
065d0     F2 1E 02 FB | 	rdlong	local01, objptr
065d4     0C 4E 05 F1 | 	add	fp, #12
065d8     A7 1E 62 FC | 	wrlong	local01, fp
065dc     10 4E 85 F1 | 	sub	fp, #16
065e0                 | ' 
065e0                 | ' searchptr=programstart
065e0                 | ' do
065e0     3E 00 00 FF 
065e4     BC E5 85 F1 | 	sub	objptr, ##32188
065e8                 | LR__0560
065e8     14 4E 05 F1 | 	add	fp, #20
065ec     A7 12 02 F6 | 	mov	arg01, fp
065f0     04 4E 85 F1 | 	sub	fp, #4
065f4     A7 14 02 FB | 	rdlong	arg02, fp
065f8     10 4E 85 F1 | 	sub	fp, #16
065fc     18 16 06 F6 | 	mov	arg03, #24
06600     20 97 B1 FD | 	call	#_psram_spin2_read1
06604     10 4E 05 F1 | 	add	fp, #16
06608     A7 1E 02 FB | 	rdlong	local01, fp
0660c     08 4E 85 F1 | 	sub	fp, #8
06610     A7 1E 62 FC | 	wrlong	local01, fp
06614     20 4E 05 F1 | 	add	fp, #32
06618     A7 1E 02 FB | 	rdlong	local01, fp
0661c     18 4E 85 F1 | 	sub	fp, #24
06620     A7 1E 62 FC | 	wrlong	local01, fp
06624     04 4E 05 F1 | 	add	fp, #4
06628     A7 1E 02 FB | 	rdlong	local01, fp
0662c     10 4E 85 F1 | 	sub	fp, #16
06630     A7 16 02 FB | 	rdlong	arg03, fp
06634     04 4E 85 F1 | 	sub	fp, #4
06638     0B 1F 12 F2 | 	cmp	local01, arg03 wc
0663c     28 4E 05 C1 |  if_b	add	fp, #40
06640     A7 20 02 CB |  if_b	rdlong	local02, fp
06644     28 4E 85 C1 |  if_b	sub	fp, #40
06648     FF FF 3F CF 
0664c     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
06650     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0560
06654     0B 00 00 FF 
06658     CC E4 85 F1 | 	sub	objptr, ##5836
0665c                 | ' if header(0)<>aline then return -1						' if not =, then there is no line, return
0665c     14 4E 05 F1 | 	add	fp, #20
06660     A7 1E 02 FB | 	rdlong	local01, fp
06664     10 4E 85 F1 | 	sub	fp, #16
06668     A7 20 02 FB | 	rdlong	local02, fp
0666c     04 4E 85 F1 | 	sub	fp, #4
06670     10 1F 0A F2 | 	cmp	local01, local02 wz
06674     01 FA 65 56 |  if_ne	neg	result1, #1
06678     34 02 90 5D |  if_ne	jmp	#LR__0565
0667c     08 4E 05 F1 | 	add	fp, #8
06680     A7 12 02 FB | 	rdlong	arg01, fp
06684     08 4E 85 F1 | 	sub	fp, #8
06688     01 14 66 F6 | 	neg	arg02, #1
0668c     A8 6E B1 FD | 	call	#_pslpoke
06690                 | ' pslpoke(lineptr2,$FFFF_FFFF) 							' flag the deleted line
06690                 | ' 
06690                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then  			' this is one and only line in the program
06690     28 4E 05 F1 | 	add	fp, #40
06694     A7 1E 02 FB | 	rdlong	local01, fp
06698     28 4E 85 F1 | 	sub	fp, #40
0669c     FF FF 3F FF 
066a0     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
066a4     24 4E 05 A1 |  if_e	add	fp, #36
066a8     A7 20 02 AB |  if_e	rdlong	local02, fp
066ac     24 4E 85 A1 |  if_e	sub	fp, #36
066b0     FF FF 7F AF 
066b4     FF 21 0E A2 |  if_e	cmp	local02, ##-1 wz
066b8     88 00 90 5D |  if_ne	jmp	#LR__0561
066bc     4A 00 00 FF 
066c0     88 E4 05 F1 | 	add	objptr, ##38024
066c4     00 04 80 FF 
066c8     F2 00 68 FC | 	wrlong	##524288, objptr
066cc     07 00 00 FF 
066d0     2C E4 85 F1 | 	sub	objptr, ##3628
066d4     00 04 80 FF 
066d8     F2 00 68 FC | 	wrlong	##524288, objptr
066dc     07 00 00 FF 
066e0     30 E4 05 F1 | 	add	objptr, ##3632
066e4     F2 00 68 FC | 	wrlong	#0, objptr
066e8     04 E4 05 F1 | 	add	objptr, #4
066ec     FF FF FF FF 
066f0     F2 FE 6B FC | 	wrlong	##-1, objptr
066f4     4A 00 00 FF 
066f8     90 E4 85 F1 | 	sub	objptr, ##38032
066fc     00 12 06 F6 | 	mov	arg01, #0
06700     01 14 66 F6 | 	neg	arg02, #1
06704     30 6E B1 FD | 	call	#_pslpoke
06708     10 12 06 F6 | 	mov	arg01, #16
0670c     01 14 66 F6 | 	neg	arg02, #1
06710     24 6E B1 FD | 	call	#_pslpoke
06714     14 12 06 F6 | 	mov	arg01, #20
06718     1E 14 CE F9 | 	bmask	arg02, #30
0671c     18 6E B1 FD | 	call	#_pslpoke
06720     50 00 00 FF 
06724     B8 E4 05 F1 | 	add	objptr, ##41144
06728     00 04 80 FF 
0672c     F2 00 68 FC | 	wrlong	##524288, objptr
06730     04 E4 05 F1 | 	add	objptr, #4
06734     00 04 80 FF 
06738     F2 00 68 FC | 	wrlong	##524288, objptr
0673c     50 00 00 FF 
06740     BC E4 85 F1 | 	sub	objptr, ##41148
06744                 | LR__0561
06744                 | ' 
06744                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' this is the last, and not first, line of the program
06744     28 4E 05 F1 | 	add	fp, #40
06748     A7 1E 02 FB | 	rdlong	local01, fp
0674c     28 4E 85 F1 | 	sub	fp, #40
06750     FF FF 3F FF 
06754     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
06758     74 00 90 5D |  if_ne	jmp	#LR__0562
0675c     24 4E 05 F1 | 	add	fp, #36
06760     A7 20 02 FB | 	rdlong	local02, fp
06764     24 4E 85 F1 | 	sub	fp, #36
06768     FF FF 7F FF 
0676c     FF 21 0E F2 | 	cmp	local02, ##-1 wz
06770     5C 00 90 AD |  if_e	jmp	#LR__0562
06774     24 4E 05 F1 | 	add	fp, #36
06778     A7 12 02 FB | 	rdlong	arg01, fp
0677c     24 4E 85 F1 | 	sub	fp, #36
06780     14 12 06 F1 | 	add	arg01, #20
06784     1E 14 CE F9 | 	bmask	arg02, #30
06788     AC 6D B1 FD | 	call	#_pslpoke
0678c     24 4E 05 F1 | 	add	fp, #36
06790     A7 1E 02 FB | 	rdlong	local01, fp
06794     4A 00 00 FF 
06798     90 E4 05 F1 | 	add	objptr, ##38032
0679c     F2 1E 62 FC | 	wrlong	local01, objptr
067a0     4A 00 00 FF 
067a4     90 E4 85 F1 | 	sub	objptr, ##38032
067a8     A7 12 02 FB | 	rdlong	arg01, fp
067ac     24 4E 85 F1 | 	sub	fp, #36
067b0     B4 6E B1 FD | 	call	#_pslpeek
067b4     4A 00 00 FF 
067b8     8C E4 05 F1 | 	add	objptr, ##38028
067bc     F2 FA 61 FC | 	wrlong	result1, objptr
067c0     4A 00 00 FF 
067c4     8C E4 85 F1 | 	sub	objptr, ##38028
067c8                 | '   pslpoke(header(4)+20,$7FFF_FFFF) 						' unlink the previous line
067c8                 | '   lastlineptr=header(4)           						' keep the last line pointer to avoid searching while sequentially adding a new line
067c8                 | '   lastline=pslpeek(header(4))
067c8                 | '   return 0
067c8     00 FA 05 F6 | 	mov	result1, #0
067cc     E0 00 90 FD | 	jmp	#LR__0565
067d0                 | LR__0562
067d0                 | ' 
067d0                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then 			' this is the first line, but not the last
067d0     28 4E 05 F1 | 	add	fp, #40
067d4     A7 1E 02 FB | 	rdlong	local01, fp
067d8     28 4E 85 F1 | 	sub	fp, #40
067dc     FF FF 3F FF 
067e0     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
067e4     58 00 90 AD |  if_e	jmp	#LR__0563
067e8     24 4E 05 F1 | 	add	fp, #36
067ec     A7 20 02 FB | 	rdlong	local02, fp
067f0     24 4E 85 F1 | 	sub	fp, #36
067f4     FF FF 7F FF 
067f8     FF 21 0E F2 | 	cmp	local02, ##-1 wz
067fc     40 00 90 5D |  if_ne	jmp	#LR__0563
06800     28 4E 05 F1 | 	add	fp, #40
06804     A7 12 02 FB | 	rdlong	arg01, fp
06808     28 4E 85 F1 | 	sub	fp, #40
0680c     10 12 06 F1 | 	add	arg01, #16
06810     01 14 66 F6 | 	neg	arg02, #1
06814     20 6D B1 FD | 	call	#_pslpoke
06818     28 4E 05 F1 | 	add	fp, #40
0681c     A7 1E 02 FB | 	rdlong	local01, fp
06820     28 4E 85 F1 | 	sub	fp, #40
06824     4A 00 00 FF 
06828     88 E4 05 F1 | 	add	objptr, ##38024
0682c     F2 1E 62 FC | 	wrlong	local01, objptr
06830     4A 00 00 FF 
06834     88 E4 85 F1 | 	sub	objptr, ##38024
06838                 | ' '   print "deleted first line"
06838                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
06838                 | '   programstart=header(5) 							' adjust the program start to point on the first new line
06838                 | '   return 0
06838     00 FA 05 F6 | 	mov	result1, #0
0683c     70 00 90 FD | 	jmp	#LR__0565
06840                 | LR__0563
06840                 | ' 
06840                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' the line is not first and not last
06840     28 4E 05 F1 | 	add	fp, #40
06844     A7 1E 02 FB | 	rdlong	local01, fp
06848     28 4E 85 F1 | 	sub	fp, #40
0684c     FF FF 3F FF 
06850     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
06854     24 4E 05 51 |  if_ne	add	fp, #36
06858     A7 20 02 5B |  if_ne	rdlong	local02, fp
0685c     24 4E 85 51 |  if_ne	sub	fp, #36
06860     FF FF 7F 5F 
06864     FF 21 0E 52 |  if_ne	cmp	local02, ##-1 wz
06868     40 00 90 AD |  if_e	jmp	#LR__0564
0686c     28 4E 05 F1 | 	add	fp, #40
06870     A7 12 02 FB | 	rdlong	arg01, fp
06874     10 12 06 F1 | 	add	arg01, #16
06878     04 4E 85 F1 | 	sub	fp, #4
0687c     A7 14 02 FB | 	rdlong	arg02, fp
06880     24 4E 85 F1 | 	sub	fp, #36
06884     B0 6C B1 FD | 	call	#_pslpoke
06888     24 4E 05 F1 | 	add	fp, #36
0688c     A7 12 02 FB | 	rdlong	arg01, fp
06890     14 12 06 F1 | 	add	arg01, #20
06894     04 4E 05 F1 | 	add	fp, #4
06898     A7 14 02 FB | 	rdlong	arg02, fp
0689c     28 4E 85 F1 | 	sub	fp, #40
068a0     94 6C B1 FD | 	call	#_pslpoke
068a4                 | '    pslpoke(header(5)+16,header(4))  
068a4                 | '    pslpoke(header(4)+20, header(5))
068a4                 | '    return 0
068a4     00 FA 05 F6 | 	mov	result1, #0
068a8     04 00 90 FD | 	jmp	#LR__0565
068ac                 | LR__0564
068ac     00 FA 05 F6 | 	mov	result1, #0
068b0                 | LR__0565
068b0     A7 F0 03 F6 | 	mov	ptra, fp
068b4     B2 00 A0 FD | 	call	#popregs_
068b8                 | _deleteline_ret
068b8     2D 00 64 FD | 	ret
068bc                 | 
068bc                 | ' 
068bc                 | ' '----- Save a line to the PSRAM. Called from insertline and add_line_at_end
068bc                 | ' 
068bc                 | ' sub save_line
068bc                 | _save_line
068bc     03 4A 05 F6 | 	mov	COUNT_, #3
068c0     A8 00 A0 FD | 	call	#pushregs_
068c4     4A 00 00 FF 
068c8     7C E4 05 F1 | 	add	objptr, ##38012
068cc     F2 16 02 FB | 	rdlong	arg03, objptr
068d0     01 16 06 F1 | 	add	arg03, #1
068d4     05 00 00 FF 
068d8     18 E4 85 F1 | 	sub	objptr, ##2584
068dc     F2 14 02 FB | 	rdlong	arg02, objptr
068e0     0B 15 02 FD | 	qmul	arg02, arg03
068e4     0E 00 00 FF 
068e8     44 E4 85 F1 | 	sub	objptr, ##7236
068ec     F2 12 02 FB | 	rdlong	arg01, objptr
068f0     37 00 00 FF 
068f4     20 E4 85 F1 | 	sub	objptr, ##28192
068f8     09 1F 02 F6 | 	mov	local01, arg01
068fc     18 20 62 FD | 	getqx	local02
06900     97 06 48 FB | 	callpa	#(@LR__0571-@LR__0570)>>2,fcache_load_ptr_
06904                 | LR__0570
06904     0F FB C9 FA | 	rdbyte	result1, local01 wz
06908     01 1E 06 51 |  if_ne	add	local01, #1
0690c     F4 FF 9F 5D |  if_ne	jmp	#LR__0570
06910                 | LR__0571
06910     09 1F 82 F1 | 	sub	local01, arg01
06914     03 1E CE F7 | 	test	local01, #3 wz
06918     02 1E 46 50 |  if_ne	shr	local01, #2
0691c     01 1E 06 51 |  if_ne	add	local01, #1
06920     02 1E 66 50 |  if_ne	shl	local01, #2
06924     10 23 02 F6 | 	mov	local03, local02
06928     0F 23 02 F1 | 	add	local03, local01
0692c     43 00 00 FF 
06930     5C E4 05 F1 | 	add	objptr, ##34396
06934     F2 16 02 FB | 	rdlong	arg03, objptr
06938     10 17 02 F1 | 	add	arg03, local02
0693c     04 00 00 FF 
06940     28 E4 05 F1 | 	add	objptr, ##2088
06944     F2 16 62 FC | 	wrlong	arg03, objptr
06948     04 E4 05 F1 | 	add	objptr, #4
0694c     F2 1E 62 FC | 	wrlong	local01, objptr
06950     0C E4 85 F1 | 	sub	objptr, #12
06954     F2 12 02 F6 | 	mov	arg01, objptr
06958     04 00 00 FF 
0695c     20 E4 85 F1 | 	sub	objptr, ##2080
06960     F2 14 02 FB | 	rdlong	arg02, objptr
06964     10 17 02 F6 | 	mov	arg03, local02
06968     37 00 00 FF 
0696c     90 E5 85 F1 | 	sub	objptr, ##28560
06970     4C 94 B1 FD | 	call	#_psram_spin2_write
06974     2B 00 00 FF 
06978     54 E5 05 F1 | 	add	objptr, ##22356
0697c     F2 12 02 FB | 	rdlong	arg01, objptr
06980     0C 00 00 FF 
06984     3C E4 05 F1 | 	add	objptr, ##6204
06988     F2 14 02 FB | 	rdlong	arg02, objptr
0698c     10 15 02 F1 | 	add	arg02, local02
06990     0F 17 02 F6 | 	mov	arg03, local01
06994     37 00 00 FF 
06998     90 E5 85 F1 | 	sub	objptr, ##28560
0699c     20 94 B1 FD | 	call	#_psram_spin2_write
069a0     37 00 00 FF 
069a4     90 E5 05 F1 | 	add	objptr, ##28560
069a8     F2 1E 02 FB | 	rdlong	local01, objptr
069ac     11 1F 02 F1 | 	add	local01, local03
069b0     F2 1E 62 FC | 	wrlong	local01, objptr
069b4     43 00 00 FF 
069b8     5C E4 85 F1 | 	sub	objptr, ##34396
069bc     A7 F0 03 F6 | 	mov	ptra, fp
069c0     B2 00 A0 FD | 	call	#popregs_
069c4                 | _save_line_ret
069c4     2D 00 64 FD | 	ret
069c8                 | 
069c8                 | ' 
069c8                 | ' '----- Insert a new line into the middle of the program
069c8                 | ' 
069c8                 | ' function insertline(aline as ulong) as integer
069c8                 | _insertline
069c8     02 4A 05 F6 | 	mov	COUNT_, #2
069cc     A8 00 A0 FD | 	call	#pushregs_
069d0     28 F0 07 F1 | 	add	ptra, #40
069d4     04 4E 05 F1 | 	add	fp, #4
069d8     A7 12 62 FC | 	wrlong	arg01, fp
069dc     4A 00 00 FF 
069e0     88 E4 05 F1 | 	add	objptr, ##38024
069e4     F2 1E 02 FB | 	rdlong	local01, objptr
069e8     04 4E 05 F1 | 	add	fp, #4
069ec     A7 1E 62 FC | 	wrlong	local01, fp
069f0     08 4E 85 F1 | 	sub	fp, #8
069f4                 | ' 
069f4                 | ' do
069f4     3E 00 00 FF 
069f8     BC E5 85 F1 | 	sub	objptr, ##32188
069fc                 | LR__0580
069fc     10 4E 05 F1 | 	add	fp, #16
06a00     A7 12 02 F6 | 	mov	arg01, fp
06a04     08 4E 85 F1 | 	sub	fp, #8
06a08     A7 14 02 FB | 	rdlong	arg02, fp
06a0c     08 4E 85 F1 | 	sub	fp, #8
06a10     18 16 06 F6 | 	mov	arg03, #24
06a14     0C 93 B1 FD | 	call	#_psram_spin2_read1
06a18     08 4E 05 F1 | 	add	fp, #8
06a1c     A7 1E 02 FB | 	rdlong	local01, fp
06a20     04 4E 05 F1 | 	add	fp, #4
06a24     A7 1E 62 FC | 	wrlong	local01, fp
06a28     18 4E 05 F1 | 	add	fp, #24
06a2c     A7 1E 02 FB | 	rdlong	local01, fp
06a30     1C 4E 85 F1 | 	sub	fp, #28
06a34     A7 1E 62 FC | 	wrlong	local01, fp
06a38     08 4E 05 F1 | 	add	fp, #8
06a3c     A7 1E 02 FB | 	rdlong	local01, fp
06a40     0C 4E 85 F1 | 	sub	fp, #12
06a44     A7 16 02 FB | 	rdlong	arg03, fp
06a48     04 4E 85 F1 | 	sub	fp, #4
06a4c     0B 1F 12 F2 | 	cmp	local01, arg03 wc
06a50     24 4E 05 C1 |  if_b	add	fp, #36
06a54     A7 20 02 CB |  if_b	rdlong	local02, fp
06a58     24 4E 85 C1 |  if_b	sub	fp, #36
06a5c     FF FF 3F CF 
06a60     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
06a64     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0580
06a68     0B 00 00 FF 
06a6c     CC E4 85 F1 | 	sub	objptr, ##5836
06a70                 | ' 
06a70                 | ' if header(0)=aline then return -1 				' delete it first
06a70     10 4E 05 F1 | 	add	fp, #16
06a74     A7 1E 02 FB | 	rdlong	local01, fp
06a78     0C 4E 85 F1 | 	sub	fp, #12
06a7c     A7 20 02 FB | 	rdlong	local02, fp
06a80     04 4E 85 F1 | 	sub	fp, #4
06a84     10 1F 0A F2 | 	cmp	local01, local02 wz
06a88     01 FA 65 A6 |  if_e	neg	result1, #1
06a8c     48 01 90 AD |  if_e	jmp	#LR__0583
06a90                 | ' if header(0)<aline then return -2 				' end of program reached
06a90     10 4E 05 F1 | 	add	fp, #16
06a94     A7 1E 02 FB | 	rdlong	local01, fp
06a98     0C 4E 85 F1 | 	sub	fp, #12
06a9c     A7 16 02 FB | 	rdlong	arg03, fp
06aa0     04 4E 85 F1 | 	sub	fp, #4
06aa4     0B 1F 12 F2 | 	cmp	local01, arg03 wc
06aa8     02 FA 65 C6 |  if_b	neg	result1, #2
06aac     28 01 90 CD |  if_b	jmp	#LR__0583
06ab0                 | ' 
06ab0                 | ' if  header(4)=$FFFF_FFFF then 					' this is the first line in the program so the inserted line will be new first
06ab0     20 4E 05 F1 | 	add	fp, #32
06ab4     A7 1E 02 FB | 	rdlong	local01, fp
06ab8     20 4E 85 F1 | 	sub	fp, #32
06abc     FF FF 7F FF 
06ac0     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
06ac4     78 00 90 5D |  if_ne	jmp	#LR__0581
06ac8     43 00 00 FF 
06acc     5C E4 05 F1 | 	add	objptr, ##34396
06ad0     F2 1E 02 FB | 	rdlong	local01, objptr
06ad4     07 00 00 FF 
06ad8     2C E4 05 F1 | 	add	objptr, ##3628
06adc     F2 1E 62 FC | 	wrlong	local01, objptr
06ae0     0C 4E 05 F1 | 	add	fp, #12
06ae4     A7 12 02 FB | 	rdlong	arg01, fp
06ae8     0C 4E 85 F1 | 	sub	fp, #12
06aec     10 12 06 F1 | 	add	arg01, #16
06af0     07 00 00 FF 
06af4     2C E4 85 F1 | 	sub	objptr, ##3628
06af8     F2 14 02 FB | 	rdlong	arg02, objptr
06afc     43 00 00 FF 
06b00     5C E4 85 F1 | 	sub	objptr, ##34396
06b04     30 6A B1 FD | 	call	#_pslpoke
06b08     47 00 00 FF 
06b0c     8C E4 05 F1 | 	add	objptr, ##36492
06b10     FF FF FF FF 
06b14     F2 FE 6B FC | 	wrlong	##-1, objptr
06b18     0C 4E 05 F1 | 	add	fp, #12
06b1c     A7 1E 02 FB | 	rdlong	local01, fp
06b20     0C 4E 85 F1 | 	sub	fp, #12
06b24     04 E4 05 F1 | 	add	objptr, #4
06b28     F2 1E 62 FC | 	wrlong	local01, objptr
06b2c     47 00 00 FF 
06b30     90 E4 85 F1 | 	sub	objptr, ##36496
06b34     84 FD BF FD | 	call	#_save_line
06b38                 | '   programstart=programptr
06b38                 | '   pslpoke(lineptr2+16,programptr)
06b38                 | '   ucompiledline(4)=$FFFF_FFFF
06b38                 | '   ucompiledline(5)=lineptr2
06b38                 | '   save_line
06b38                 | '   return 0
06b38     00 FA 05 F6 | 	mov	result1, #0
06b3c     98 00 90 FD | 	jmp	#LR__0583
06b40                 | LR__0581
06b40                 | ' 
06b40                 | ' if header(4)<>$FFFF_FFFF then 					' this is not first line of the program. It doesn't matter if it is last as we will insert a new line before
06b40     20 4E 05 F1 | 	add	fp, #32
06b44     A7 1E 02 FB | 	rdlong	local01, fp
06b48     20 4E 85 F1 | 	sub	fp, #32
06b4c     FF FF 7F FF 
06b50     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
06b54     7C 00 90 AD |  if_e	jmp	#LR__0582
06b58     20 4E 05 F1 | 	add	fp, #32
06b5c     A7 1E 02 FB | 	rdlong	local01, fp
06b60     47 00 00 FF 
06b64     8C E4 05 F1 | 	add	objptr, ##36492
06b68     F2 1E 62 FC | 	wrlong	local01, objptr
06b6c     14 4E 85 F1 | 	sub	fp, #20
06b70     A7 1E 02 FB | 	rdlong	local01, fp
06b74     04 E4 05 F1 | 	add	objptr, #4
06b78     F2 1E 62 FC | 	wrlong	local01, objptr
06b7c     A7 12 02 FB | 	rdlong	arg01, fp
06b80     0C 4E 85 F1 | 	sub	fp, #12
06b84     10 12 06 F1 | 	add	arg01, #16
06b88     04 00 00 FF 
06b8c     34 E4 85 F1 | 	sub	objptr, ##2100
06b90     F2 14 02 FB | 	rdlong	arg02, objptr
06b94     43 00 00 FF 
06b98     5C E4 85 F1 | 	sub	objptr, ##34396
06b9c     98 69 B1 FD | 	call	#_pslpoke
06ba0     20 4E 05 F1 | 	add	fp, #32
06ba4     A7 12 02 FB | 	rdlong	arg01, fp
06ba8     20 4E 85 F1 | 	sub	fp, #32
06bac     14 12 06 F1 | 	add	arg01, #20
06bb0     43 00 00 FF 
06bb4     5C E4 05 F1 | 	add	objptr, ##34396
06bb8     F2 14 02 FB | 	rdlong	arg02, objptr
06bbc     43 00 00 FF 
06bc0     5C E4 85 F1 | 	sub	objptr, ##34396
06bc4     70 69 B1 FD | 	call	#_pslpoke
06bc8     F0 FC BF FD | 	call	#_save_line
06bcc                 | '   ucompiledline(4)=header(4)
06bcc                 | '   ucompiledline(5)=lineptr2
06bcc                 | '   pslpoke(lineptr2+16,programptr)
06bcc                 | '   pslpoke(header(4)+20,programptr)
06bcc                 | '   save_line
06bcc                 | '   return 0
06bcc     00 FA 05 F6 | 	mov	result1, #0
06bd0     04 00 90 FD | 	jmp	#LR__0583
06bd4                 | LR__0582
06bd4     00 FA 05 F6 | 	mov	result1, #0
06bd8                 | LR__0583
06bd8     A7 F0 03 F6 | 	mov	ptra, fp
06bdc     B2 00 A0 FD | 	call	#popregs_
06be0                 | _insertline_ret
06be0     2D 00 64 FD | 	ret
06be4                 | 
06be4                 | ' 
06be4                 | ' '----- Adds a new line at the end of the program
06be4                 | ' 
06be4                 | ' sub add_line_at_end(aline) 
06be4                 | _add_line_at_end
06be4     4A 00 00 FF 
06be8     8C E4 05 F1 | 	add	objptr, ##38028
06bec     F2 12 62 FC | 	wrlong	arg01, objptr
06bf0     04 E4 05 F1 | 	add	objptr, #4
06bf4     F2 14 02 FB | 	rdlong	arg02, objptr
06bf8     03 00 00 FF 
06bfc     04 E4 85 F1 | 	sub	objptr, ##1540
06c00     F2 14 62 FC | 	wrlong	arg02, objptr
06c04     03 00 00 FF 
06c08     04 E4 05 F1 | 	add	objptr, ##1540
06c0c     F2 12 02 FB | 	rdlong	arg01, objptr
06c10     14 12 06 F1 | 	add	arg01, #20
06c14     07 00 00 FF 
06c18     34 E4 85 F1 | 	sub	objptr, ##3636
06c1c     F2 14 02 FB | 	rdlong	arg02, objptr
06c20     43 00 00 FF 
06c24     5C E4 85 F1 | 	sub	objptr, ##34396
06c28     0C 69 B1 FD | 	call	#_pslpoke
06c2c     43 00 00 FF 
06c30     5C E4 05 F1 | 	add	objptr, ##34396
06c34     F2 14 02 FB | 	rdlong	arg02, objptr
06c38     07 00 00 FF 
06c3c     34 E4 05 F1 | 	add	objptr, ##3636
06c40     F2 14 62 FC | 	wrlong	arg02, objptr
06c44     03 00 00 FF 
06c48     00 E4 85 F1 | 	sub	objptr, ##1536
06c4c     FF FF BF FF 
06c50     F2 FE 6B FC | 	wrlong	##2147483647, objptr
06c54                 | ' 
06c54                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
06c54                 | ' if programptr=memlo then ucompiledline(4)=$FFFFFFFF ' that is the first line
06c54     04 00 00 FF 
06c58     34 E4 85 F1 | 	sub	objptr, ##2100
06c5c     F2 14 02 FB | 	rdlong	arg02, objptr
06c60     43 00 00 FF 
06c64     5C E4 85 F1 | 	sub	objptr, ##34396
06c68     00 04 00 FF 
06c6c     00 14 0E F2 | 	cmp	arg02, ##524288 wz
06c70     47 00 00 AF 
06c74     8C E4 05 A1 |  if_e	add	objptr, ##36492
06c78     FF FF FF AF 
06c7c     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
06c80     47 00 00 AF 
06c84     8C E4 85 A1 |  if_e	sub	objptr, ##36492
06c88     30 FC BF FD | 	call	#_save_line
06c8c     43 00 00 FF 
06c90     5C E4 05 F1 | 	add	objptr, ##34396
06c94     F2 12 02 FB | 	rdlong	arg01, objptr
06c98     43 00 00 FF 
06c9c     5C E4 85 F1 | 	sub	objptr, ##34396
06ca0     01 14 66 F6 | 	neg	arg02, #1
06ca4     90 68 B1 FD | 	call	#_pslpoke
06ca8                 | _add_line_at_end_ret
06ca8     2D 00 64 FD | 	ret
06cac                 | 
06cac                 | ' 
06cac                 | ' '--------------------------------------------------------------------------------------------------------------------------
06cac                 | ' '---------------------------------- End of line managing helper functions -------------------------------------------------
06cac                 | ' '--------------------------------------------------------------------------------------------------------------------------
06cac                 | ' 
06cac                 | ' '--------------------------------------------------------------------------------------------------------------------------
06cac                 | ' '--------------------------------------- Compilers ------------------------------------------------------------------------
06cac                 | ' '--------------------------------------------------------------------------------------------------------------------------
06cac                 | ' 
06cac                 | ' '--- Do a main compilation task for commands, called from compile(), returns an error code
06cac                 | ' 
06cac                 | ' function compile_immediate(linetype as ulong, aline as ulong) as integer
06cac                 | _compile_immediate
06cac     0A 4A 05 F6 | 	mov	COUNT_, #10
06cb0     A8 00 A0 FD | 	call	#pushregs_
06cb4                 | _compile_immediate_enter
06cb4     09 25 02 F6 | 	mov	local04, arg01
06cb8     0A 27 02 F6 | 	mov	local05, arg02
06cbc     00 28 06 F6 | 	mov	local06, #0
06cc0     00 2A 06 F6 | 	mov	local07, #0
06cc4     00 2C 06 F6 | 	mov	local08, #0
06cc8                 | ' 
06cc8                 | ' ' linetype=cont+1
06cc8                 | ' ' 1 : this is the first part of the line that will continue
06cc8                 | ' ' 2 - this is the continuation of the line
06cc8                 | ' ' 3 - this is the last continued line
06cc8                 | ' ' 4 - this is the one and only part
06cc8                 | ' ' 5 - continued after if/else
06cc8                 | ' 
06cc8                 | ' err=0
06cc8                 | ' cmd=0
06cc8                 | ' vars=0
06cc8                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 
06cc8     02 24 0E F2 | 	cmp	local04, #2 wz
06ccc     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
06cd0     24 00 90 5D |  if_ne	jmp	#LR__0590
06cd4     35 00 00 FF 
06cd8     10 E4 05 F1 | 	add	objptr, ##27152
06cdc     F2 2A 02 FB | 	rdlong	local07, objptr
06ce0     01 2E 06 F6 | 	mov	local09, #1
06ce4     02 00 00 FF 
06ce8     34 E4 05 F1 | 	add	objptr, ##1076
06cec     F2 02 68 FC | 	wrlong	#1, objptr
06cf0     37 00 00 FF 
06cf4     44 E4 85 F1 | 	sub	objptr, ##28228
06cf8                 | LR__0590
06cf8                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
06cf8     04 24 0E F2 | 	cmp	local04, #4 wz
06cfc     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
06d00     30 00 90 5D |  if_ne	jmp	#LR__0591
06d04     35 00 00 FF 
06d08     18 E4 05 F1 | 	add	objptr, ##27160
06d0c     F2 2A 02 FB | 	rdlong	local07, objptr
06d10     02 2E 06 F6 | 	mov	local09, #2
06d14     02 00 00 FF 
06d18     2C E4 05 F1 | 	add	objptr, ##1068
06d1c     F2 04 68 FC | 	wrlong	#2, objptr
06d20     13 00 00 FF 
06d24     38 E4 05 F1 | 	add	objptr, ##9784
06d28     F2 04 68 FC | 	wrlong	#2, objptr
06d2c     4A 00 00 FF 
06d30     7C E4 85 F1 | 	sub	objptr, ##38012
06d34                 | LR__0591
06d34                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 
06d34     05 24 0E F2 | 	cmp	local04, #5 wz
06d38     40 00 90 5D |  if_ne	jmp	#LR__0592
06d3c     37 00 00 FF 
06d40     44 E4 05 F1 | 	add	objptr, ##28228
06d44     F2 FC 01 FB | 	rdlong	result2, objptr
06d48     FE 2E 02 F6 | 	mov	local09, result2
06d4c     03 2E 66 F0 | 	shl	local09, #3
06d50     02 00 00 FF 
06d54     38 E4 85 F1 | 	sub	objptr, ##1080
06d58     F2 2E 02 F1 | 	add	local09, objptr
06d5c     04 2E 06 F1 | 	add	local09, #4
06d60     17 2B 02 FB | 	rdlong	local07, local09
06d64     01 FC 05 F1 | 	add	result2, #1
06d68     02 00 00 FF 
06d6c     38 E4 05 F1 | 	add	objptr, ##1080
06d70     F2 FC 61 FC | 	wrlong	result2, objptr
06d74     37 00 00 FF 
06d78     44 E4 85 F1 | 	sub	objptr, ##28228
06d7c                 | LR__0592
06d7c                 | ' 
06d7c                 | ' 'print  "In compile_immediate cmd=:", cmd
06d7c                 | ' 451 select case cmd
06d7c     5C 2A 0E F2 | 	cmp	local07, #92 wz
06d80     80 02 90 AD |  if_e	jmp	#LR__0593
06d84     47 2A 0E F2 | 	cmp	local07, #71 wz
06d88     84 02 90 AD |  if_e	jmp	#LR__0594
06d8c     59 2A 0E F2 | 	cmp	local07, #89 wz
06d90     8C 02 90 AD |  if_e	jmp	#LR__0595
06d94     45 2A 0E F2 | 	cmp	local07, #69 wz
06d98     94 02 90 AD |  if_e	jmp	#LR__0596
06d9c     69 2A 0E F2 | 	cmp	local07, #105 wz
06da0     9C 02 90 AD |  if_e	jmp	#LR__0597
06da4     40 2A 0E F2 | 	cmp	local07, #64 wz
06da8     28 06 90 AD |  if_e	jmp	#LR__0665
06dac     B4 2A 0E F2 | 	cmp	local07, #180 wz
06db0     98 02 90 AD |  if_e	jmp	#LR__0598
06db4     49 2A 0E F2 | 	cmp	local07, #73 wz
06db8     9C 02 90 AD |  if_e	jmp	#LR__0599
06dbc     50 2A 0E F2 | 	cmp	local07, #80 wz
06dc0     A0 02 90 AD |  if_e	jmp	#LR__0600
06dc4     AE 2A 0E F2 | 	cmp	local07, #174 wz
06dc8     A8 02 90 AD |  if_e	jmp	#LR__0601
06dcc     B0 2A 0E F2 | 	cmp	local07, #176 wz
06dd0     AC 02 90 AD |  if_e	jmp	#LR__0602
06dd4     AF 2A 0E F2 | 	cmp	local07, #175 wz
06dd8     B0 02 90 AD |  if_e	jmp	#LR__0603
06ddc     B1 2A 0E F2 | 	cmp	local07, #177 wz
06de0     B4 02 90 AD |  if_e	jmp	#LR__0604
06de4     68 2A 0E F2 | 	cmp	local07, #104 wz
06de8     B8 02 90 AD |  if_e	jmp	#LR__0605
06dec     74 2A 0E F2 | 	cmp	local07, #116 wz
06df0     BC 02 90 AD |  if_e	jmp	#LR__0606
06df4     73 2A 0E F2 | 	cmp	local07, #115 wz
06df8     C4 02 90 AD |  if_e	jmp	#LR__0607
06dfc     6C 2A 0E F2 | 	cmp	local07, #108 wz
06e00     CC 02 90 AD |  if_e	jmp	#LR__0608
06e04     89 2A 0E F2 | 	cmp	local07, #137 wz
06e08     C8 05 90 AD |  if_e	jmp	#LR__0665
06e0c     72 2A 0E F2 | 	cmp	local07, #114 wz
06e10     CC 02 90 AD |  if_e	jmp	#LR__0609
06e14     5D 2A 0E F2 | 	cmp	local07, #93 wz
06e18     D0 02 90 AD |  if_e	jmp	#LR__0610
06e1c     96 2A 0E F2 | 	cmp	local07, #150 wz
06e20     D8 02 90 AD |  if_e	jmp	#LR__0611
06e24     43 2A 0E F2 | 	cmp	local07, #67 wz
06e28     DC 02 90 AD |  if_e	jmp	#LR__0612
06e2c     5A 2A 0E F2 | 	cmp	local07, #90 wz
06e30     E4 02 90 AD |  if_e	jmp	#LR__0613
06e34     AB 2A 0E F2 | 	cmp	local07, #171 wz
06e38     98 05 90 AD |  if_e	jmp	#LR__0665
06e3c     BD 2A 0E F2 | 	cmp	local07, #189 wz
06e40     E4 02 90 AD |  if_e	jmp	#LR__0614
06e44     BB 2A 0E F2 | 	cmp	local07, #187 wz
06e48     EC 02 90 AD |  if_e	jmp	#LR__0615
06e4c     4E 2A 0E F2 | 	cmp	local07, #78 wz
06e50     F4 02 90 AD |  if_e	jmp	#LR__0616
06e54     A9 2A 0E F2 | 	cmp	local07, #169 wz
06e58     08 03 90 AD |  if_e	jmp	#LR__0618
06e5c     46 2A 0E F2 | 	cmp	local07, #70 wz
06e60     1C 03 90 AD |  if_e	jmp	#LR__0620
06e64     71 2A 0E F2 | 	cmp	local07, #113 wz
06e68     24 03 90 AD |  if_e	jmp	#LR__0621
06e6c     60 2A 0E F2 | 	cmp	local07, #96 wz
06e70     28 03 90 AD |  if_e	jmp	#LR__0622
06e74     4A 2A 0E F2 | 	cmp	local07, #74 wz
06e78     2C 03 90 AD |  if_e	jmp	#LR__0623
06e7c     48 2A 0E F2 | 	cmp	local07, #72 wz
06e80     30 03 90 AD |  if_e	jmp	#LR__0624
06e84     58 2A 0E F2 | 	cmp	local07, #88 wz
06e88     38 03 90 AD |  if_e	jmp	#LR__0625
06e8c     5F 2A 0E F2 | 	cmp	local07, #95 wz
06e90     40 03 90 AD |  if_e	jmp	#LR__0626
06e94     8A 2A 0E F2 | 	cmp	local07, #138 wz
06e98     44 03 90 AD |  if_e	jmp	#LR__0627
06e9c     4C 2A 0E F2 | 	cmp	local07, #76 wz
06ea0     48 03 90 AD |  if_e	jmp	#LR__0628
06ea4     52 2A 0E F2 | 	cmp	local07, #82 wz
06ea8     50 03 90 AD |  if_e	jmp	#LR__0629
06eac     97 2A 0E F2 | 	cmp	local07, #151 wz
06eb0     58 03 90 AD |  if_e	jmp	#LR__0630
06eb4     61 2A 0E F2 | 	cmp	local07, #97 wz
06eb8     5C 03 90 AD |  if_e	jmp	#LR__0631
06ebc     63 2A 0E F2 | 	cmp	local07, #99 wz
06ec0     60 03 90 AD |  if_e	jmp	#LR__0632
06ec4     41 2A 0E F2 | 	cmp	local07, #65 wz
06ec8     08 05 90 AD |  if_e	jmp	#LR__0665
06ecc     4B 2A 0E F2 | 	cmp	local07, #75 wz
06ed0     5C 03 90 AD |  if_e	jmp	#LR__0633
06ed4     B3 2A 0E F2 | 	cmp	local07, #179 wz
06ed8     60 03 90 AD |  if_e	jmp	#LR__0634
06edc     5E 2A 0E F2 | 	cmp	local07, #94 wz
06ee0     64 03 90 AD |  if_e	jmp	#LR__0635
06ee4     7C 2A 0E F2 | 	cmp	local07, #124 wz
06ee8     68 03 90 AD |  if_e	jmp	#LR__0636
06eec     7D 2A 0E F2 | 	cmp	local07, #125 wz
06ef0     6C 03 90 AD |  if_e	jmp	#LR__0637
06ef4     7E 2A 0E F2 | 	cmp	local07, #126 wz
06ef8     70 03 90 AD |  if_e	jmp	#LR__0638
06efc     7F 2A 0E F2 | 	cmp	local07, #127 wz
06f00     74 03 90 AD |  if_e	jmp	#LR__0639
06f04     80 2A 0E F2 | 	cmp	local07, #128 wz
06f08     78 03 90 AD |  if_e	jmp	#LR__0640
06f0c     55 2A 0E F2 | 	cmp	local07, #85 wz
06f10     7C 03 90 AD |  if_e	jmp	#LR__0641
06f14     75 2A 0E F2 | 	cmp	local07, #117 wz
06f18     80 03 90 AD |  if_e	jmp	#LR__0642
06f1c     42 2A 0E F2 | 	cmp	local07, #66 wz
06f20     88 03 90 AD |  if_e	jmp	#LR__0643
06f24     95 2A 0E F2 | 	cmp	local07, #149 wz
06f28     90 03 90 AD |  if_e	jmp	#LR__0644
06f2c     AC 2A 0E F2 | 	cmp	local07, #172 wz
06f30     A0 04 90 AD |  if_e	jmp	#LR__0665
06f34     81 2A 0E F2 | 	cmp	local07, #129 wz
06f38     8C 03 90 AD |  if_e	jmp	#LR__0645
06f3c     44 2A 0E F2 | 	cmp	local07, #68 wz
06f40     90 03 90 AD |  if_e	jmp	#LR__0646
06f44     BC 2A 0E F2 | 	cmp	local07, #188 wz
06f48     94 03 90 AD |  if_e	jmp	#LR__0647
06f4c     88 2A 0E F2 | 	cmp	local07, #136 wz
06f50     80 04 90 AD |  if_e	jmp	#LR__0665
06f54     92 2A 0E F2 | 	cmp	local07, #146 wz
06f58     94 03 90 AD |  if_e	jmp	#LR__0648
06f5c     BE 2A 0E F2 | 	cmp	local07, #190 wz
06f60     2C 05 90 AD |  if_e	jmp	#LR__0666
06f64     AA 2A 0E F2 | 	cmp	local07, #170 wz
06f68     68 04 90 AD |  if_e	jmp	#LR__0665
06f6c     4D 2A 0E F2 | 	cmp	local07, #77 wz
06f70     88 03 90 AD |  if_e	jmp	#LR__0649
06f74     51 2A 0E F2 | 	cmp	local07, #81 wz
06f78     90 03 90 AD |  if_e	jmp	#LR__0650
06f7c     8E 2A 0E F2 | 	cmp	local07, #142 wz
06f80     98 03 90 AD |  if_e	jmp	#LR__0651
06f84     90 2A 0E F2 | 	cmp	local07, #144 wz
06f88     9C 03 90 AD |  if_e	jmp	#LR__0652
06f8c     8D 2A 0E F2 | 	cmp	local07, #141 wz
06f90     A0 03 90 AD |  if_e	jmp	#LR__0653
06f94     8C 2A 0E F2 | 	cmp	local07, #140 wz
06f98     A4 03 90 AD |  if_e	jmp	#LR__0654
06f9c     91 2A 0E F2 | 	cmp	local07, #145 wz
06fa0     A8 03 90 AD |  if_e	jmp	#LR__0655
06fa4     8B 2A 0E F2 | 	cmp	local07, #139 wz
06fa8     AC 03 90 AD |  if_e	jmp	#LR__0656
06fac     8F 2A 0E F2 | 	cmp	local07, #143 wz
06fb0     B0 03 90 AD |  if_e	jmp	#LR__0657
06fb4     B2 2A 0E F2 | 	cmp	local07, #178 wz
06fb8     B4 03 90 AD |  if_e	jmp	#LR__0658
06fbc     6D 2A 0E F2 | 	cmp	local07, #109 wz
06fc0     BC 03 90 AD |  if_e	jmp	#LR__0659
06fc4     70 2A 0E F2 | 	cmp	local07, #112 wz
06fc8     08 04 90 AD |  if_e	jmp	#LR__0665
06fcc     56 2A 0E F2 | 	cmp	local07, #86 wz
06fd0     B8 03 90 AD |  if_e	jmp	#LR__0660
06fd4     57 2A 0E F2 | 	cmp	local07, #87 wz
06fd8     F8 03 90 AD |  if_e	jmp	#LR__0665
06fdc     79 2A 0E F2 | 	cmp	local07, #121 wz
06fe0     B4 03 90 AD |  if_e	jmp	#LR__0661
06fe4     77 2A 0E F2 | 	cmp	local07, #119 wz
06fe8     B8 03 90 AD |  if_e	jmp	#LR__0662
06fec     78 2A 0E F2 | 	cmp	local07, #120 wz
06ff0     BC 03 90 AD |  if_e	jmp	#LR__0663
06ff4     01 00 00 FF 
06ff8     04 2A 0E F2 | 	cmp	local07, ##516 wz
06ffc     BC 03 90 AD |  if_e	jmp	#LR__0664
07000     8C 04 90 FD | 	jmp	#LR__0666
07004                 | LR__0593
07004     D8 0A B0 FD | 	call	#_compile_fun_2p
07008     FD 28 02 F6 | 	mov	local06, result1
0700c     C4 03 90 FD | 	jmp	#LR__0665
07010                 | LR__0594
07010     9C 0D B0 FD | 	call	#_compile_fun_varp
07014     FD 2C 02 F6 | 	mov	local08, result1
07018     FE 28 02 F6 | 	mov	local06, result2
0701c     B4 03 90 FD | 	jmp	#LR__0665
07020                 | LR__0595
07020     8C 0D B0 FD | 	call	#_compile_fun_varp
07024     FD 2C 02 F6 | 	mov	local08, result1
07028     FE 28 02 F6 | 	mov	local06, result2
0702c     A4 03 90 FD | 	jmp	#LR__0665
07030                 | LR__0596
07030     7C 0D B0 FD | 	call	#_compile_fun_varp
07034     FD 2C 02 F6 | 	mov	local08, result1
07038     FE 28 02 F6 | 	mov	local06, result2
0703c     94 03 90 FD | 	jmp	#LR__0665
07040                 | LR__0597
07040                 | ' return expr()
07040     4C 2A B0 FD | 	call	#_expr
07044     FD 28 02 F6 | 	mov	local06, result1
07048     88 03 90 FD | 	jmp	#LR__0665
0704c                 | LR__0598
0704c                 | ' return expr()
0704c     40 2A B0 FD | 	call	#_expr
07050     FD 28 02 F6 | 	mov	local06, result1
07054     7C 03 90 FD | 	jmp	#LR__0665
07058                 | LR__0599
07058                 | ' return expr()
07058     34 2A B0 FD | 	call	#_expr
0705c     FD 28 02 F6 | 	mov	local06, result1
07060     70 03 90 FD | 	jmp	#LR__0665
07064                 | LR__0600
07064     48 0D B0 FD | 	call	#_compile_fun_varp
07068     FD 2C 02 F6 | 	mov	local08, result1
0706c     FE 28 02 F6 | 	mov	local06, result2
07070     60 03 90 FD | 	jmp	#LR__0665
07074                 | LR__0601
07074     68 0A B0 FD | 	call	#_compile_fun_2p
07078     FD 28 02 F6 | 	mov	local06, result1
0707c     54 03 90 FD | 	jmp	#LR__0665
07080                 | LR__0602
07080     5C 0A B0 FD | 	call	#_compile_fun_2p
07084     FD 28 02 F6 | 	mov	local06, result1
07088     48 03 90 FD | 	jmp	#LR__0665
0708c                 | LR__0603
0708c     50 0A B0 FD | 	call	#_compile_fun_2p
07090     FD 28 02 F6 | 	mov	local06, result1
07094     3C 03 90 FD | 	jmp	#LR__0665
07098                 | LR__0604
07098     44 0A B0 FD | 	call	#_compile_fun_2p
0709c     FD 28 02 F6 | 	mov	local06, result1
070a0     30 03 90 FD | 	jmp	#LR__0665
070a4                 | LR__0605
070a4                 | ' return expr()
070a4     E8 29 B0 FD | 	call	#_expr
070a8     FD 28 02 F6 | 	mov	local06, result1
070ac     24 03 90 FD | 	jmp	#LR__0665
070b0                 | LR__0606
070b0     FC 0C B0 FD | 	call	#_compile_fun_varp
070b4     FD 2C 02 F6 | 	mov	local08, result1
070b8     FE 28 02 F6 | 	mov	local06, result2
070bc     14 03 90 FD | 	jmp	#LR__0665
070c0                 | LR__0607
070c0     EC 0C B0 FD | 	call	#_compile_fun_varp
070c4     FD 2C 02 F6 | 	mov	local08, result1
070c8     FE 28 02 F6 | 	mov	local06, result2
070cc     04 03 90 FD | 	jmp	#LR__0665
070d0                 | LR__0608
070d0     DC 0C B0 FD | 	call	#_compile_fun_varp
070d4     FD 2C 02 F6 | 	mov	local08, result1
070d8     FE 28 02 F6 | 	mov	local06, result2
070dc     F4 02 90 FD | 	jmp	#LR__0665
070e0                 | LR__0609
070e0     A0 19 B0 FD | 	call	#_compile_dim
070e4     FD 28 02 F6 | 	mov	local06, result1
070e8     A4 03 90 FD | 	jmp	#LR__0666
070ec                 | LR__0610
070ec     C0 0C B0 FD | 	call	#_compile_fun_varp
070f0     FD 2C 02 F6 | 	mov	local08, result1
070f4     FE 28 02 F6 | 	mov	local06, result2
070f8     D8 02 90 FD | 	jmp	#LR__0665
070fc                 | LR__0611
070fc     E0 09 B0 FD | 	call	#_compile_fun_2p
07100     FD 28 02 F6 | 	mov	local06, result1
07104     CC 02 90 FD | 	jmp	#LR__0665
07108                 | LR__0612
07108     A4 0C B0 FD | 	call	#_compile_fun_varp
0710c     FD 2C 02 F6 | 	mov	local08, result1
07110     FE 28 02 F6 | 	mov	local06, result2
07114     BC 02 90 FD | 	jmp	#LR__0665
07118                 | LR__0613
07118     13 13 02 F6 | 	mov	arg01, local05
0711c     2C 18 B0 FD | 	call	#_compile_else
07120     FD 28 02 F6 | 	mov	local06, result1
07124     68 03 90 FD | 	jmp	#LR__0666
07128                 | LR__0614
07128     84 0C B0 FD | 	call	#_compile_fun_varp
0712c     FD 2C 02 F6 | 	mov	local08, result1
07130     FE 28 02 F6 | 	mov	local06, result2
07134     9C 02 90 FD | 	jmp	#LR__0665
07138                 | LR__0615
07138     74 0C B0 FD | 	call	#_compile_fun_varp
0713c     FD 2C 02 F6 | 	mov	local08, result1
07140     FE 28 02 F6 | 	mov	local06, result2
07144     8C 02 90 FD | 	jmp	#LR__0665
07148                 | LR__0616
07148     01 26 16 F2 | 	cmp	local05, #1 wc
0714c     08 00 90 CD |  if_b	jmp	#LR__0617
07150     4C 25 B0 FD | 	call	#_compile_goto
07154     38 03 90 FD | 	jmp	#LR__0666
07158                 | LR__0617
07158     19 12 06 F6 | 	mov	arg01, #25
0715c     74 62 B1 FD | 	call	#_printerror
07160     2C 03 90 FD | 	jmp	#LR__0666
07164                 | LR__0618
07164     01 26 16 F2 | 	cmp	local05, #1 wc
07168     08 00 90 CD |  if_b	jmp	#LR__0619
0716c     CC 24 B0 FD | 	call	#_compile_gosub
07170     1C 03 90 FD | 	jmp	#LR__0666
07174                 | LR__0619
07174     19 12 06 F6 | 	mov	arg01, #25
07178     58 62 B1 FD | 	call	#_printerror
0717c     10 03 90 FD | 	jmp	#LR__0666
07180                 | LR__0620
07180     2C 0C B0 FD | 	call	#_compile_fun_varp
07184     FD 2C 02 F6 | 	mov	local08, result1
07188     FE 28 02 F6 | 	mov	local06, result2
0718c     44 02 90 FD | 	jmp	#LR__0665
07190                 | LR__0621
07190     C4 0A B0 FD | 	call	#_compile_fun_4p
07194     FD 28 02 F6 | 	mov	local06, result1
07198     38 02 90 FD | 	jmp	#LR__0665
0719c                 | LR__0622
0719c                 | ' return expr()
0719c     F0 28 B0 FD | 	call	#_expr
071a0     FD 28 02 F6 | 	mov	local06, result1
071a4     2C 02 90 FD | 	jmp	#LR__0665
071a8                 | LR__0623
071a8     B4 1F B0 FD | 	call	#_compile_for
071ac     FD 28 02 F6 | 	mov	local06, result1
071b0     DC 02 90 FD | 	jmp	#LR__0666
071b4                 | LR__0624
071b4     F8 0B B0 FD | 	call	#_compile_fun_varp
071b8     FD 2C 02 F6 | 	mov	local08, result1
071bc     FE 28 02 F6 | 	mov	local06, result2
071c0     10 02 90 FD | 	jmp	#LR__0665
071c4                 | LR__0625
071c4     13 13 02 F6 | 	mov	arg01, local05
071c8     F8 15 B0 FD | 	call	#_compile_if
071cc     FD 28 02 F6 | 	mov	local06, result1
071d0     BC 02 90 FD | 	jmp	#LR__0666
071d4                 | LR__0626
071d4                 | ' return expr()
071d4     B8 28 B0 FD | 	call	#_expr
071d8     FD 28 02 F6 | 	mov	local06, result1
071dc     F4 01 90 FD | 	jmp	#LR__0665
071e0                 | LR__0627
071e0                 | ' return expr()
071e0     AC 28 B0 FD | 	call	#_expr
071e4     FD 28 02 F6 | 	mov	local06, result1
071e8     E8 01 90 FD | 	jmp	#LR__0665
071ec                 | LR__0628
071ec     C0 0B B0 FD | 	call	#_compile_fun_varp
071f0     FD 2C 02 F6 | 	mov	local08, result1
071f4     FE 28 02 F6 | 	mov	local06, result2
071f8     D8 01 90 FD | 	jmp	#LR__0665
071fc                 | LR__0629
071fc     B0 0B B0 FD | 	call	#_compile_fun_varp
07200     FD 2C 02 F6 | 	mov	local08, result1
07204     FE 28 02 F6 | 	mov	local06, result2
07208     C8 01 90 FD | 	jmp	#LR__0665
0720c                 | LR__0630
0720c     D0 08 B0 FD | 	call	#_compile_fun_2p
07210     FD 28 02 F6 | 	mov	local06, result1
07214     BC 01 90 FD | 	jmp	#LR__0665
07218                 | LR__0631
07218                 | ' return expr()
07218     74 28 B0 FD | 	call	#_expr
0721c     FD 28 02 F6 | 	mov	local06, result1
07220     B0 01 90 FD | 	jmp	#LR__0665
07224                 | LR__0632
07224                 | ' return expr()
07224     68 28 B0 FD | 	call	#_expr
07228     FD 28 02 F6 | 	mov	local06, result1
0722c     A4 01 90 FD | 	jmp	#LR__0665
07230                 | LR__0633
07230     70 22 B0 FD | 	call	#_compile_next
07234     FD 28 02 F6 | 	mov	local06, result1
07238     54 02 90 FD | 	jmp	#LR__0666
0723c                 | LR__0634
0723c     28 09 B0 FD | 	call	#_compile_fun_3p
07240     FD 28 02 F6 | 	mov	local06, result1
07244     8C 01 90 FD | 	jmp	#LR__0665
07248                 | LR__0635
07248                 | ' return expr()
07248     44 28 B0 FD | 	call	#_expr
0724c     FD 28 02 F6 | 	mov	local06, result1
07250     80 01 90 FD | 	jmp	#LR__0665
07254                 | LR__0636
07254                 | ' return expr()
07254     38 28 B0 FD | 	call	#_expr
07258     FD 28 02 F6 | 	mov	local06, result1
0725c     74 01 90 FD | 	jmp	#LR__0665
07260                 | LR__0637
07260                 | ' return expr()
07260     2C 28 B0 FD | 	call	#_expr
07264     FD 28 02 F6 | 	mov	local06, result1
07268     68 01 90 FD | 	jmp	#LR__0665
0726c                 | LR__0638
0726c                 | ' return expr()
0726c     20 28 B0 FD | 	call	#_expr
07270     FD 28 02 F6 | 	mov	local06, result1
07274     5C 01 90 FD | 	jmp	#LR__0665
07278                 | LR__0639
07278     DC 09 B0 FD | 	call	#_compile_fun_4p
0727c     FD 28 02 F6 | 	mov	local06, result1
07280     50 01 90 FD | 	jmp	#LR__0665
07284                 | LR__0640
07284                 | ' return expr()
07284     08 28 B0 FD | 	call	#_expr
07288     FD 28 02 F6 | 	mov	local06, result1
0728c     44 01 90 FD | 	jmp	#LR__0665
07290                 | LR__0641
07290     4C 08 B0 FD | 	call	#_compile_fun_2p
07294     FD 28 02 F6 | 	mov	local06, result1
07298     38 01 90 FD | 	jmp	#LR__0665
0729c                 | LR__0642
0729c     10 0B B0 FD | 	call	#_compile_fun_varp
072a0     FD 2C 02 F6 | 	mov	local08, result1
072a4     FE 28 02 F6 | 	mov	local06, result2
072a8     28 01 90 FD | 	jmp	#LR__0665
072ac                 | LR__0643
072ac     00 0B B0 FD | 	call	#_compile_fun_varp
072b0     FD 2C 02 F6 | 	mov	local08, result1
072b4     FE 28 02 F6 | 	mov	local06, result2
072b8     18 01 90 FD | 	jmp	#LR__0665
072bc                 | LR__0644
072bc     20 08 B0 FD | 	call	#_compile_fun_2p
072c0     FD 28 02 F6 | 	mov	local06, result1
072c4     0C 01 90 FD | 	jmp	#LR__0665
072c8                 | LR__0645
072c8     14 08 B0 FD | 	call	#_compile_fun_2p
072cc     FD 28 02 F6 | 	mov	local06, result1
072d0     00 01 90 FD | 	jmp	#LR__0665
072d4                 | LR__0646
072d4     14 0E B0 FD | 	call	#_compile_print
072d8     FD 28 02 F6 | 	mov	local06, result1
072dc     B0 01 90 FD | 	jmp	#LR__0666
072e0                 | LR__0647
072e0     CC 0A B0 FD | 	call	#_compile_fun_varp
072e4     FD 2C 02 F6 | 	mov	local08, result1
072e8     FE 28 02 F6 | 	mov	local06, result2
072ec     E4 00 90 FD | 	jmp	#LR__0665
072f0                 | LR__0648
072f0                 | ' return expr()
072f0     9C 27 B0 FD | 	call	#_expr
072f4     FD 28 02 F6 | 	mov	local06, result1
072f8     D8 00 90 FD | 	jmp	#LR__0665
072fc                 | LR__0649
072fc     B0 0A B0 FD | 	call	#_compile_fun_varp
07300     FD 2C 02 F6 | 	mov	local08, result1
07304     FE 28 02 F6 | 	mov	local06, result2
07308     C8 00 90 FD | 	jmp	#LR__0665
0730c                 | LR__0650
0730c     A0 0A B0 FD | 	call	#_compile_fun_varp
07310     FD 2C 02 F6 | 	mov	local08, result1
07314     FE 28 02 F6 | 	mov	local06, result2
07318     B8 00 90 FD | 	jmp	#LR__0665
0731c                 | LR__0651
0731c     C0 07 B0 FD | 	call	#_compile_fun_2p
07320     FD 28 02 F6 | 	mov	local06, result1
07324     AC 00 90 FD | 	jmp	#LR__0665
07328                 | LR__0652
07328     B4 07 B0 FD | 	call	#_compile_fun_2p
0732c     FD 28 02 F6 | 	mov	local06, result1
07330     A0 00 90 FD | 	jmp	#LR__0665
07334                 | LR__0653
07334     A8 07 B0 FD | 	call	#_compile_fun_2p
07338     FD 28 02 F6 | 	mov	local06, result1
0733c     94 00 90 FD | 	jmp	#LR__0665
07340                 | LR__0654
07340     9C 07 B0 FD | 	call	#_compile_fun_2p
07344     FD 28 02 F6 | 	mov	local06, result1
07348     88 00 90 FD | 	jmp	#LR__0665
0734c                 | LR__0655
0734c     90 07 B0 FD | 	call	#_compile_fun_2p
07350     FD 28 02 F6 | 	mov	local06, result1
07354     7C 00 90 FD | 	jmp	#LR__0665
07358                 | LR__0656
07358     84 07 B0 FD | 	call	#_compile_fun_2p
0735c     FD 28 02 F6 | 	mov	local06, result1
07360     70 00 90 FD | 	jmp	#LR__0665
07364                 | LR__0657
07364     78 07 B0 FD | 	call	#_compile_fun_2p
07368     FD 28 02 F6 | 	mov	local06, result1
0736c     64 00 90 FD | 	jmp	#LR__0665
07370                 | LR__0658
07370     3C 0A B0 FD | 	call	#_compile_fun_varp
07374     FD 2C 02 F6 | 	mov	local08, result1
07378     FE 28 02 F6 | 	mov	local06, result2
0737c     54 00 90 FD | 	jmp	#LR__0665
07380                 | LR__0659
07380     E4 07 B0 FD | 	call	#_compile_fun_3p
07384     FD 28 02 F6 | 	mov	local06, result1
07388     48 00 90 FD | 	jmp	#LR__0665
0738c                 | LR__0660
0738c                 | ' return expr()
0738c     00 27 B0 FD | 	call	#_expr
07390     FD 28 02 F6 | 	mov	local06, result1
07394     3C 00 90 FD | 	jmp	#LR__0665
07398                 | LR__0661
07398     44 07 B0 FD | 	call	#_compile_fun_2p
0739c     FD 28 02 F6 | 	mov	local06, result1
073a0     30 00 90 FD | 	jmp	#LR__0665
073a4                 | LR__0662
073a4     38 07 B0 FD | 	call	#_compile_fun_2p
073a8     FD 28 02 F6 | 	mov	local06, result1
073ac     24 00 90 FD | 	jmp	#LR__0665
073b0                 | LR__0663
073b0     2C 07 B0 FD | 	call	#_compile_fun_2p
073b4     FD 28 02 F6 | 	mov	local06, result1
073b8     18 00 90 FD | 	jmp	#LR__0665
073bc                 | LR__0664
073bc     CC 0A B0 FD | 	call	#_compile_array_assign
073c0     FD 28 02 F6 | 	mov	local06, result1
073c4     0E 28 0E F2 | 	cmp	local06, #14 wz
073c8     C4 00 90 5D |  if_ne	jmp	#LR__0666
073cc                 | ' return 23
073cc     17 28 06 F6 | 	mov	local06, #23
073d0     BC 00 90 FD | 	jmp	#LR__0666
073d4                 | ' return 23
073d4                 | LR__0665
073d4     15 23 02 F6 | 	mov	local03, local07
073d8     16 1F 02 F6 | 	mov	local01, local08
073dc     0F 2F 02 F6 | 	mov	local09, local01
073e0     10 31 02 F6 | 	mov	local10, local02
073e4     11 2B 02 F6 | 	mov	local07, local03
073e8     4A 00 00 FF 
073ec     7C E4 05 F1 | 	add	objptr, ##38012
073f0     F2 1E 02 FB | 	rdlong	local01, objptr
073f4     0F 2D 02 F6 | 	mov	local08, local01
073f8     01 2C 66 F0 | 	shl	local08, #1
073fc     0F 2D 02 F1 | 	add	local08, local01
07400     02 2C 66 F0 | 	shl	local08, #2
07404     03 00 00 FF 
07408     00 E4 85 F1 | 	sub	objptr, ##1536
0740c     F2 2C 02 F1 | 	add	local08, objptr
07410     16 2F 62 FC | 	wrlong	local09, local08
07414     03 00 00 FF 
07418     00 E4 05 F1 | 	add	objptr, ##1536
0741c     F2 1E 02 FB | 	rdlong	local01, objptr
07420     0F 2F 02 F6 | 	mov	local09, local01
07424     01 2E 66 F0 | 	shl	local09, #1
07428     0F 2F 02 F1 | 	add	local09, local01
0742c     02 2E 66 F0 | 	shl	local09, #2
07430     03 00 00 FF 
07434     00 E4 85 F1 | 	sub	objptr, ##1536
07438     F2 2E 02 F1 | 	add	local09, objptr
0743c     04 2E 06 F1 | 	add	local09, #4
07440     17 31 62 FC | 	wrlong	local10, local09
07444     03 00 00 FF 
07448     00 E4 05 F1 | 	add	objptr, ##1536
0744c     F2 1E 02 FB | 	rdlong	local01, objptr
07450     0F 31 02 F6 | 	mov	local10, local01
07454     01 30 66 F0 | 	shl	local10, #1
07458     0F 31 02 F1 | 	add	local10, local01
0745c     02 30 66 F0 | 	shl	local10, #2
07460     03 00 00 FF 
07464     00 E4 85 F1 | 	sub	objptr, ##1536
07468     F2 30 02 F1 | 	add	local10, objptr
0746c     08 30 06 F1 | 	add	local10, #8
07470     18 2B 62 FC | 	wrlong	local07, local10
07474     03 00 00 FF 
07478     00 E4 05 F1 | 	add	objptr, ##1536
0747c     F2 2E 02 FB | 	rdlong	local09, objptr
07480     01 2E 06 F1 | 	add	local09, #1
07484     F2 2E 62 FC | 	wrlong	local09, objptr
07488     4A 00 00 FF 
0748c     7C E4 85 F1 | 	sub	objptr, ##38012
07490                 | LR__0666
07490                 | ' 
07490                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
07490                 | ' 450 if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end 				' the last part 
07490     03 24 0E F2 | 	cmp	local04, #3 wz
07494     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
07498     38 00 90 5D |  if_ne	jmp	#LR__0667
0749c     4A 00 00 FF 
074a0     7C E4 05 F1 | 	add	objptr, ##38012
074a4     F2 30 02 FB | 	rdlong	local10, objptr
074a8     18 1F 02 F6 | 	mov	local01, local10
074ac     01 1E 66 F0 | 	shl	local01, #1
074b0     18 1F 02 F1 | 	add	local01, local10
074b4     02 1E 66 F0 | 	shl	local01, #2
074b8     03 00 00 FF 
074bc     00 E4 85 F1 | 	sub	objptr, ##1536
074c0     F2 1E 02 F1 | 	add	local01, objptr
074c4     08 1E 06 F1 | 	add	local01, #8
074c8     0F FD 6B FC | 	wrlong	#510, local01
074cc     47 00 00 FF 
074d0     7C E4 85 F1 | 	sub	objptr, ##36476
074d4                 | LR__0667
074d4                 | ' ' if there is token_adr somewhere, change fun_getvar to fun_getaddr
074d4                 | ' for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
074d4     4A 00 00 FF 
074d8     7C E4 05 F1 | 	add	objptr, ##38012
074dc     F2 1E 02 FB | 	rdlong	local01, objptr
074e0     4A 00 00 FF 
074e4     7C E4 85 F1 | 	sub	objptr, ##38012
074e8     97 58 48 FB | 	callpa	#(@LR__0670-@LR__0668)>>2,fcache_load_ptr_
074ec                 | LR__0668
074ec     0F 31 02 F6 | 	mov	local10, local01
074f0     01 30 66 F0 | 	shl	local10, #1
074f4     0F 31 02 F1 | 	add	local10, local01
074f8     02 30 66 F0 | 	shl	local10, #2
074fc     47 00 00 FF 
07500     7C E4 05 F1 | 	add	objptr, ##36476
07504     F2 30 02 F1 | 	add	local10, objptr
07508     08 30 06 F1 | 	add	local10, #8
0750c     18 31 02 FB | 	rdlong	local10, local10
07510     9B 30 0E F2 | 	cmp	local10, #155 wz
07514     47 00 00 FF 
07518     7C E4 85 F1 | 	sub	objptr, ##36476
0751c     70 00 90 5D |  if_ne	jmp	#LR__0669
07520     0F 2F 02 F6 | 	mov	local09, local01
07524     01 2E 86 F1 | 	sub	local09, #1
07528     17 31 02 F6 | 	mov	local10, local09
0752c     01 30 66 F0 | 	shl	local10, #1
07530     17 31 02 F1 | 	add	local10, local09
07534     02 30 66 F0 | 	shl	local10, #2
07538     47 00 00 FF 
0753c     7C E4 05 F1 | 	add	objptr, ##36476
07540     F2 30 02 F1 | 	add	local10, objptr
07544     08 30 06 F1 | 	add	local10, #8
07548     18 31 02 FB | 	rdlong	local10, local10
0754c     11 30 0E F2 | 	cmp	local10, #17 wz
07550     47 00 00 FF 
07554     7C E4 85 F1 | 	sub	objptr, ##36476
07558     34 00 90 5D |  if_ne	jmp	#LR__0669
0755c     0F 2F 02 F6 | 	mov	local09, local01
07560     01 2E 86 F1 | 	sub	local09, #1
07564     17 31 02 F6 | 	mov	local10, local09
07568     01 30 66 F0 | 	shl	local10, #1
0756c     17 31 02 F1 | 	add	local10, local09
07570     02 30 66 F0 | 	shl	local10, #2
07574     47 00 00 FF 
07578     7C E4 05 F1 | 	add	objptr, ##36476
0757c     F2 30 02 F1 | 	add	local10, objptr
07580     08 30 06 F1 | 	add	local10, #8
07584     18 25 68 FC | 	wrlong	#18, local10
07588     47 00 00 FF 
0758c     7C E4 85 F1 | 	sub	objptr, ##36476
07590                 | LR__0669
07590     01 1E 86 F1 | 	sub	local01, #1
07594     01 1E 56 F2 | 	cmps	local01, #1 wc
07598     50 FF 9F 3D |  if_ae	jmp	#LR__0668
0759c                 | LR__0670
0759c                 | ' ' DEBUG print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
0759c                 | ' return err
0759c     14 FB 01 F6 | 	mov	result1, local06
075a0     A7 F0 03 F6 | 	mov	ptra, fp
075a4     B2 00 A0 FD | 	call	#popregs_
075a8                 | _compile_immediate_ret
075a8     2D 00 64 FD | 	ret
075ac                 | 
075ac                 | ' 
075ac                 | ' '--- Do a main compilation task for assigns, called from compile_assign(), returns an error code
075ac                 | ' 
075ac                 | ' function compile_immediate_assign(linetype as ulong) as ulong
075ac                 | _compile_immediate_assign
075ac     0C 4A 05 F6 | 	mov	COUNT_, #12
075b0     A8 00 A0 FD | 	call	#pushregs_
075b4     09 25 02 F6 | 	mov	local04, arg01
075b8     FF 22 06 F6 | 	mov	local03, #255
075bc     01 26 66 F6 | 	neg	local05, #1
075c0     00 28 06 F6 | 	mov	local06, #0
075c4                 | ' 
075c4                 | ' t1.result_type=result_error : t1.result.uresult=0
075c4                 | ' i=-1: j=-1 : err=0
075c4                 | ' 
075c4                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
075c4     02 24 0E F2 | 	cmp	local04, #2 wz
075c8     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
075cc     35 00 00 AF 
075d0     0C E4 05 A1 |  if_e	add	objptr, ##27148
075d4     F2 2A 02 AB |  if_e	rdlong	local07, objptr
075d8     02 00 00 AF 
075dc     38 E4 05 A1 |  if_e	add	objptr, ##1080
075e0     F2 04 68 AC |  if_e	wrlong	#2, objptr
075e4     37 00 00 AF 
075e8     44 E4 85 A1 |  if_e	sub	objptr, ##28228
075ec                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
075ec     04 24 0E F2 | 	cmp	local04, #4 wz
075f0     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
075f4     2C 00 90 5D |  if_ne	jmp	#LR__0680
075f8     35 00 00 FF 
075fc     14 E4 05 F1 | 	add	objptr, ##27156
07600     F2 2A 02 FB | 	rdlong	local07, objptr
07604     02 00 00 FF 
07608     30 E4 05 F1 | 	add	objptr, ##1072
0760c     F2 06 68 FC | 	wrlong	#3, objptr
07610     13 00 00 FF 
07614     38 E4 05 F1 | 	add	objptr, ##9784
07618     F2 04 68 FC | 	wrlong	#2, objptr
0761c     4A 00 00 FF 
07620     7C E4 85 F1 | 	sub	objptr, ##38012
07624                 | LR__0680
07624                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
07624     05 24 0E F2 | 	cmp	local04, #5 wz
07628     3C 00 90 5D |  if_ne	jmp	#LR__0681
0762c     37 00 00 FF 
07630     44 E4 05 F1 | 	add	objptr, ##28228
07634     F2 FA 01 FB | 	rdlong	result1, objptr
07638     FD 2A 02 F6 | 	mov	local07, result1
0763c     03 2A 66 F0 | 	shl	local07, #3
07640     02 00 00 FF 
07644     38 E4 85 F1 | 	sub	objptr, ##1080
07648     F2 2A 02 F1 | 	add	local07, objptr
0764c     15 2B 02 FB | 	rdlong	local07, local07
07650     02 FA 05 F1 | 	add	result1, #2
07654     02 00 00 FF 
07658     38 E4 05 F1 | 	add	objptr, ##1080
0765c     F2 FA 61 FC | 	wrlong	result1, objptr
07660     37 00 00 FF 
07664     44 E4 85 F1 | 	sub	objptr, ##28228
07668                 | LR__0681
07668     15 13 02 F6 | 	mov	arg01, local07
0766c     01 14 06 F6 | 	mov	arg02, #1
07670     F4 B3 B1 FD | 	call	#__system__Right_S
07674     FD 2C 02 F6 | 	mov	local08, result1
07678     14 24 B0 FD | 	call	#_expr
0767c                 | ' 
0767c                 | ' suffix2$=right$(varname2$,1)
0767c                 | ' expr()
0767c                 | ' if varnum>0 then					' try to find a variable
0767c     35 00 00 FF 
07680     08 E4 05 F1 | 	add	objptr, ##27144
07684     F2 2E 02 FB | 	rdlong	local09, objptr
07688     35 00 00 FF 
0768c     08 E4 85 F1 | 	sub	objptr, ##27144
07690     01 2E 56 F2 | 	cmps	local09, #1 wc
07694     58 00 90 CD |  if_b	jmp	#LR__0684
07698                 | '   for i=0 to varnum-1
07698     00 30 06 F6 | 	mov	local10, #0
0769c     35 00 00 FF 
076a0     08 E4 05 F1 | 	add	objptr, ##27144
076a4     F2 32 02 FB | 	rdlong	local11, objptr
076a8     35 00 00 FF 
076ac     08 E4 85 F1 | 	sub	objptr, ##27144
076b0                 | LR__0682
076b0     19 31 52 F2 | 	cmps	local10, local11 wc
076b4     38 00 90 3D |  if_ae	jmp	#LR__0683
076b8                 | '     if variables(i).name=varname2$ then j=i : exit
076b8     18 2F 02 F6 | 	mov	local09, local10
076bc     04 2E 66 F0 | 	shl	local09, #4
076c0     14 00 00 FF 
076c4     F8 E5 05 F1 | 	add	objptr, ##10744
076c8     F2 2E 02 F1 | 	add	local09, objptr
076cc     17 13 02 FB | 	rdlong	arg01, local09
076d0     15 15 02 F6 | 	mov	arg02, local07
076d4     14 00 00 FF 
076d8     F8 E5 85 F1 | 	sub	objptr, ##10744
076dc     AC 92 B1 FD | 	call	#__system___string_cmp
076e0     00 FA 0D F2 | 	cmp	result1, #0 wz
076e4     18 27 02 A6 |  if_e	mov	local05, local10
076e8     01 30 06 51 |  if_ne	add	local10, #1
076ec     C0 FF 9F 5D |  if_ne	jmp	#LR__0682
076f0                 | LR__0683
076f0                 | LR__0684
076f0                 | ' if  j=-1 andalso varnum<maxvars then   			' not found, add a new one
076f0     FF FF 7F FF 
076f4     FF 27 0E F2 | 	cmp	local05, ##-1 wz
076f8     60 00 90 5D |  if_ne	jmp	#LR__0685
076fc     35 00 00 FF 
07700     08 E4 05 F1 | 	add	objptr, ##27144
07704     F2 2E 02 FB | 	rdlong	local09, objptr
07708     35 00 00 FF 
0770c     08 E4 85 F1 | 	sub	objptr, ##27144
07710     02 00 00 FF 
07714     00 2E 56 F2 | 	cmps	local09, ##1024 wc
07718     40 00 90 3D |  if_ae	jmp	#LR__0685
0771c     35 00 00 FF 
07720     08 E4 05 F1 | 	add	objptr, ##27144
07724     F2 32 02 FB | 	rdlong	local11, objptr
07728     04 32 66 F0 | 	shl	local11, #4
0772c     20 00 00 FF 
07730     10 E4 85 F1 | 	sub	objptr, ##16400
07734     F2 32 02 F1 | 	add	local11, objptr
07738     19 2B 62 FC | 	wrlong	local07, local11
0773c     20 00 00 FF 
07740     10 E4 05 F1 | 	add	objptr, ##16400
07744     F2 2E 02 FB | 	rdlong	local09, objptr
07748     17 27 02 F6 | 	mov	local05, local09
0774c     01 2E 06 F1 | 	add	local09, #1
07750     F2 2E 62 FC | 	wrlong	local09, objptr
07754     35 00 00 FF 
07758     08 E4 85 F1 | 	sub	objptr, ##27144
0775c                 | LR__0685
0775c                 | ' if varnum>=maxvars then
0775c     35 00 00 FF 
07760     08 E4 05 F1 | 	add	objptr, ##27144
07764     F2 2E 02 FB | 	rdlong	local09, objptr
07768     35 00 00 FF 
0776c     08 E4 85 F1 | 	sub	objptr, ##27144
07770     02 00 00 FF 
07774     00 2E 56 F2 | 	cmps	local09, ##1024 wc
07778     2D 28 06 36 |  if_ae	mov	local06, #45
0777c     C8 01 90 3D |  if_ae	jmp	#LR__0690
07780     13 1F 02 F6 | 	mov	local01, local05
07784     17 22 06 F6 | 	mov	local03, #23
07788     0F 2F 02 F6 | 	mov	local09, local01
0778c     10 35 02 F6 | 	mov	local12, local02
07790     11 1F 02 F6 | 	mov	local01, local03
07794     4A 00 00 FF 
07798     7C E4 05 F1 | 	add	objptr, ##38012
0779c     F2 32 02 FB | 	rdlong	local11, objptr
077a0     19 31 02 F6 | 	mov	local10, local11
077a4     01 30 66 F0 | 	shl	local10, #1
077a8     19 31 02 F1 | 	add	local10, local11
077ac     02 30 66 F0 | 	shl	local10, #2
077b0     03 00 00 FF 
077b4     00 E4 85 F1 | 	sub	objptr, ##1536
077b8     F2 30 02 F1 | 	add	local10, objptr
077bc     18 2F 62 FC | 	wrlong	local09, local10
077c0     03 00 00 FF 
077c4     00 E4 05 F1 | 	add	objptr, ##1536
077c8     F2 2E 02 FB | 	rdlong	local09, objptr
077cc     17 33 02 F6 | 	mov	local11, local09
077d0     01 32 66 F0 | 	shl	local11, #1
077d4     17 33 02 F1 | 	add	local11, local09
077d8     02 32 66 F0 | 	shl	local11, #2
077dc     03 00 00 FF 
077e0     00 E4 85 F1 | 	sub	objptr, ##1536
077e4     F2 32 02 F1 | 	add	local11, objptr
077e8     04 32 06 F1 | 	add	local11, #4
077ec     19 35 62 FC | 	wrlong	local12, local11
077f0     03 00 00 FF 
077f4     00 E4 05 F1 | 	add	objptr, ##1536
077f8     F2 2E 02 FB | 	rdlong	local09, objptr
077fc     17 35 02 F6 | 	mov	local12, local09
07800     01 34 66 F0 | 	shl	local12, #1
07804     17 35 02 F1 | 	add	local12, local09
07808     02 34 66 F0 | 	shl	local12, #2
0780c     03 00 00 FF 
07810     00 E4 85 F1 | 	sub	objptr, ##1536
07814     F2 34 02 F1 | 	add	local12, objptr
07818     08 34 06 F1 | 	add	local12, #8
0781c     1A 1F 62 FC | 	wrlong	local01, local12
07820     03 00 00 FF 
07824     00 E4 05 F1 | 	add	objptr, ##1536
07828     F2 2E 02 FB | 	rdlong	local09, objptr
0782c     01 2E 06 F1 | 	add	local09, #1
07830     F2 2E 62 FC | 	wrlong	local09, objptr
07834     4A 00 00 FF 
07838     7C E4 85 F1 | 	sub	objptr, ##38012
0783c                 | '   t1.result.uresult=j: t1.result_type=fun_assign  
0783c                 | '   compiledline(lineptr)=t1:  lineptr+=1 
0783c                 | '   if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
0783c     03 24 0E F2 | 	cmp	local04, #3 wz
07840     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
07844     38 00 90 5D |  if_ne	jmp	#LR__0686
07848     4A 00 00 FF 
0784c     7C E4 05 F1 | 	add	objptr, ##38012
07850     F2 34 02 FB | 	rdlong	local12, objptr
07854     1A 1F 02 F6 | 	mov	local01, local12
07858     01 1E 66 F0 | 	shl	local01, #1
0785c     1A 1F 02 F1 | 	add	local01, local12
07860     02 1E 66 F0 | 	shl	local01, #2
07864     03 00 00 FF 
07868     00 E4 85 F1 | 	sub	objptr, ##1536
0786c     F2 1E 02 F1 | 	add	local01, objptr
07870     08 1E 06 F1 | 	add	local01, #8
07874     0F FD 6B FC | 	wrlong	#510, local01
07878     47 00 00 FF 
0787c     7C E4 85 F1 | 	sub	objptr, ##36476
07880                 | LR__0686
07880                 | '   for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
07880     4A 00 00 FF 
07884     7C E4 05 F1 | 	add	objptr, ##38012
07888     F2 30 02 FB | 	rdlong	local10, objptr
0788c     4A 00 00 FF 
07890     7C E4 85 F1 | 	sub	objptr, ##38012
07894     97 58 48 FB | 	callpa	#(@LR__0689-@LR__0687)>>2,fcache_load_ptr_
07898                 | LR__0687
07898     18 35 02 F6 | 	mov	local12, local10
0789c     01 34 66 F0 | 	shl	local12, #1
078a0     18 35 02 F1 | 	add	local12, local10
078a4     02 34 66 F0 | 	shl	local12, #2
078a8     47 00 00 FF 
078ac     7C E4 05 F1 | 	add	objptr, ##36476
078b0     F2 34 02 F1 | 	add	local12, objptr
078b4     08 34 06 F1 | 	add	local12, #8
078b8     1A 35 02 FB | 	rdlong	local12, local12
078bc     9B 34 0E F2 | 	cmp	local12, #155 wz
078c0     47 00 00 FF 
078c4     7C E4 85 F1 | 	sub	objptr, ##36476
078c8     70 00 90 5D |  if_ne	jmp	#LR__0688
078cc     18 35 02 F6 | 	mov	local12, local10
078d0     01 34 86 F1 | 	sub	local12, #1
078d4     1A 1F 02 F6 | 	mov	local01, local12
078d8     01 1E 66 F0 | 	shl	local01, #1
078dc     1A 1F 02 F1 | 	add	local01, local12
078e0     02 1E 66 F0 | 	shl	local01, #2
078e4     47 00 00 FF 
078e8     7C E4 05 F1 | 	add	objptr, ##36476
078ec     F2 1E 02 F1 | 	add	local01, objptr
078f0     08 1E 06 F1 | 	add	local01, #8
078f4     0F 1F 02 FB | 	rdlong	local01, local01
078f8     11 1E 0E F2 | 	cmp	local01, #17 wz
078fc     47 00 00 FF 
07900     7C E4 85 F1 | 	sub	objptr, ##36476
07904     34 00 90 5D |  if_ne	jmp	#LR__0688
07908     18 35 02 F6 | 	mov	local12, local10
0790c     01 34 86 F1 | 	sub	local12, #1
07910     1A 1F 02 F6 | 	mov	local01, local12
07914     01 1E 66 F0 | 	shl	local01, #1
07918     1A 1F 02 F1 | 	add	local01, local12
0791c     02 1E 66 F0 | 	shl	local01, #2
07920     47 00 00 FF 
07924     7C E4 05 F1 | 	add	objptr, ##36476
07928     F2 1E 02 F1 | 	add	local01, objptr
0792c     08 1E 06 F1 | 	add	local01, #8
07930     0F 25 68 FC | 	wrlong	#18, local01
07934     47 00 00 FF 
07938     7C E4 85 F1 | 	sub	objptr, ##36476
0793c                 | LR__0688
0793c     01 30 86 F1 | 	sub	local10, #1
07940     01 30 56 F2 | 	cmps	local10, #1 wc
07944     50 FF 9F 3D |  if_ae	jmp	#LR__0687
07948                 | LR__0689
07948                 | LR__0690
07948                 | ' return err
07948     14 FB 01 F6 | 	mov	result1, local06
0794c     A7 F0 03 F6 | 	mov	ptra, fp
07950     B2 00 A0 FD | 	call	#popregs_
07954                 | _compile_immediate_assign_ret
07954     2D 00 64 FD | 	ret
07958                 | 
07958                 | ' 
07958                 | ' ' ------------------ compile the line that is calling a command, and save it if linenum>0, called from the interpreter 
07958                 | ' 
07958                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong) as ulong
07958                 | _compile
07958     03 4A 05 F6 | 	mov	COUNT_, #3
0795c     A8 00 A0 FD | 	call	#pushregs_
07960     09 1F 02 F6 | 	mov	local01, arg01
07964     0B 21 02 F6 | 	mov	local02, arg03
07968     47 00 00 FF 
0796c     7C E4 05 F1 | 	add	objptr, ##36476
07970     F2 1E 62 FC | 	wrlong	local01, objptr
07974     04 E4 05 F1 | 	add	objptr, #4
07978     F2 14 62 FC | 	wrlong	arg02, objptr
0797c     47 00 00 FF 
07980     80 E4 85 F1 | 	sub	objptr, ##36480
07984     10 13 02 F6 | 	mov	arg01, local02
07988     01 12 06 F1 | 	add	arg01, #1
0798c     0F 15 02 F6 | 	mov	arg02, local01
07990     18 F3 BF FD | 	call	#_compile_immediate
07994     FD 22 0A F6 | 	mov	local03, result1 wz
07998                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
07998                 | ' ucompiledline(0)=alinemajor
07998                 | ' ucompiledline(1)=alineminor		' this is for the future when maybe linenums will be optional.
07998                 | ' 
07998                 | ' ' cont: 
07998                 | ' ' 0 - this is the first part of the line that will continue
07998                 | ' ' 1 - this is the continuation of the line
07998                 | ' ' 2 - this is the last continued line
07998                 | ' ' 3 - this is the one and only part
07998                 | ' 
07998                 | ' err=compile_immediate(cont+1,alinemajor) 
07998                 | ' if err=0 andalso alinemajor>0 then
07998     74 00 90 5D |  if_ne	jmp	#LR__0705
0799c     01 1E 16 F2 | 	cmp	local01, #1 wc
079a0     6C 00 90 CD |  if_b	jmp	#LR__0705
079a4                 | '   if cont=3 orelse cont=2 then 
079a4     03 20 0E F2 | 	cmp	local02, #3 wz
079a8     02 20 0E 52 |  if_ne	cmp	local02, #2 wz
079ac     60 00 90 5D |  if_ne	jmp	#LR__0704
079b0                 | '     if alinemajor >lastline then 
079b0     4A 00 00 FF 
079b4     8C E4 05 F1 | 	add	objptr, ##38028
079b8     F2 14 02 FB | 	rdlong	arg02, objptr
079bc     4A 00 00 FF 
079c0     8C E4 85 F1 | 	sub	objptr, ##38028
079c4     0A 1F 1A F2 | 	cmp	local01, arg02 wcz
079c8     0C 00 90 ED |  if_be	jmp	#LR__0700
079cc     0F 13 02 F6 | 	mov	arg01, local01
079d0     10 F2 BF FD | 	call	#_add_line_at_end
079d4     38 00 90 FD | 	jmp	#LR__0703
079d8                 | LR__0700
079d8     0F 13 02 F6 | 	mov	arg01, local01
079dc     D4 EB BF FD | 	call	#_deleteline
079e0                 | '       deleteline(alinemajor)  
079e0                 | '       if alinemajor>lastline then add_line_at_end(alinemajor)  else insertline(alinemajor)   ' TODO: that's not optimal    
079e0     4A 00 00 FF 
079e4     8C E4 05 F1 | 	add	objptr, ##38028
079e8     F2 14 02 FB | 	rdlong	arg02, objptr
079ec     4A 00 00 FF 
079f0     8C E4 85 F1 | 	sub	objptr, ##38028
079f4     0A 1F 1A F2 | 	cmp	local01, arg02 wcz
079f8     0C 00 90 ED |  if_be	jmp	#LR__0701
079fc     0F 13 02 F6 | 	mov	arg01, local01
07a00     E0 F1 BF FD | 	call	#_add_line_at_end
07a04     08 00 90 FD | 	jmp	#LR__0702
07a08                 | LR__0701
07a08     0F 13 02 F6 | 	mov	arg01, local01
07a0c     B8 EF BF FD | 	call	#_insertline
07a10                 | LR__0702
07a10                 | LR__0703
07a10                 | LR__0704
07a10                 | LR__0705
07a10                 | ' return err
07a10     11 FB 01 F6 | 	mov	result1, local03
07a14     A7 F0 03 F6 | 	mov	ptra, fp
07a18     B2 00 A0 FD | 	call	#popregs_
07a1c                 | _compile_ret
07a1c     2D 00 64 FD | 	ret
07a20                 | 
07a20                 | ' 
07a20                 | ' ' ------------------ compile the line that is assigning to a variable and save it if linenum>0, called from the interpreter 
07a20                 | ' 
07a20                 | ' function compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  as ulong
07a20                 | _compile_assign
07a20     03 4A 05 F6 | 	mov	COUNT_, #3
07a24     A8 00 A0 FD | 	call	#pushregs_
07a28     09 1F 02 F6 | 	mov	local01, arg01
07a2c     0B 21 02 F6 | 	mov	local02, arg03
07a30     47 00 00 FF 
07a34     7C E4 05 F1 | 	add	objptr, ##36476
07a38     F2 1E 62 FC | 	wrlong	local01, objptr
07a3c     04 E4 05 F1 | 	add	objptr, #4
07a40     F2 14 62 FC | 	wrlong	arg02, objptr
07a44     47 00 00 FF 
07a48     80 E4 85 F1 | 	sub	objptr, ##36480
07a4c     10 13 02 F6 | 	mov	arg01, local02
07a50     01 12 06 F1 | 	add	arg01, #1
07a54     54 FB BF FD | 	call	#_compile_immediate_assign
07a58     FD 22 02 F6 | 	mov	local03, result1
07a5c                 | ' 
07a5c                 | ' ucompiledline(0)=alinemajor
07a5c                 | ' ucompiledline(1)=alineminor
07a5c                 | ' 
07a5c                 | ' err=compile_immediate_assign(cont+1) 
07a5c                 | ' if alinemajor>0 then
07a5c     01 1E 16 F2 | 	cmp	local01, #1 wc
07a60     6C 00 90 CD |  if_b	jmp	#LR__0715
07a64                 | '   if cont=3 orelse cont=2 then 
07a64     03 20 0E F2 | 	cmp	local02, #3 wz
07a68     02 20 0E 52 |  if_ne	cmp	local02, #2 wz
07a6c     60 00 90 5D |  if_ne	jmp	#LR__0714
07a70                 | '     if alinemajor >lastline then 
07a70     4A 00 00 FF 
07a74     8C E4 05 F1 | 	add	objptr, ##38028
07a78     F2 14 02 FB | 	rdlong	arg02, objptr
07a7c     4A 00 00 FF 
07a80     8C E4 85 F1 | 	sub	objptr, ##38028
07a84     0A 1F 1A F2 | 	cmp	local01, arg02 wcz
07a88     0C 00 90 ED |  if_be	jmp	#LR__0710
07a8c     0F 13 02 F6 | 	mov	arg01, local01
07a90     50 F1 BF FD | 	call	#_add_line_at_end
07a94     38 00 90 FD | 	jmp	#LR__0713
07a98                 | LR__0710
07a98     0F 13 02 F6 | 	mov	arg01, local01
07a9c     14 EB BF FD | 	call	#_deleteline
07aa0                 | '       deleteline(alinemajor)  
07aa0                 | '       if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
07aa0     4A 00 00 FF 
07aa4     8C E4 05 F1 | 	add	objptr, ##38028
07aa8     F2 14 02 FB | 	rdlong	arg02, objptr
07aac     4A 00 00 FF 
07ab0     8C E4 85 F1 | 	sub	objptr, ##38028
07ab4     0A 1F 1A F2 | 	cmp	local01, arg02 wcz
07ab8     0C 00 90 ED |  if_be	jmp	#LR__0711
07abc     0F 13 02 F6 | 	mov	arg01, local01
07ac0     20 F1 BF FD | 	call	#_add_line_at_end
07ac4     08 00 90 FD | 	jmp	#LR__0712
07ac8                 | LR__0711
07ac8     0F 13 02 F6 | 	mov	arg01, local01
07acc     F8 EE BF FD | 	call	#_insertline
07ad0                 | LR__0712
07ad0                 | LR__0713
07ad0                 | LR__0714
07ad0                 | LR__0715
07ad0                 | ' return err
07ad0     11 FB 01 F6 | 	mov	result1, local03
07ad4     A7 F0 03 F6 | 	mov	ptra, fp
07ad8     B2 00 A0 FD | 	call	#popregs_
07adc                 | _compile_assign_ret
07adc     2D 00 64 FD | 	ret
07ae0                 | 
07ae0                 | ' 
07ae0                 | ' '----- A function that prepares 2 parameters for a 2-parameter command
07ae0                 | ' 
07ae0                 | ' function compile_fun_2p() as ulong
07ae0                 | _compile_fun_2p
07ae0     01 4A 05 F6 | 	mov	COUNT_, #1
07ae4     A8 00 A0 FD | 	call	#pushregs_
07ae8     A4 1F B0 FD | 	call	#_expr
07aec     FD 1E 02 F6 | 	mov	local01, result1
07af0                 | ' err=expr() : if err>0 then return err
07af0     01 1E 16 F2 | 	cmp	local01, #1 wc
07af4     0F FB 01 36 |  if_ae	mov	result1, local01
07af8     60 00 90 3D |  if_ae	jmp	#LR__0720
07afc                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
07afc     37 00 00 FF 
07b00     44 E4 05 F1 | 	add	objptr, ##28228
07b04     F2 1E 02 FB | 	rdlong	local01, objptr
07b08     03 1E 66 F0 | 	shl	local01, #3
07b0c     02 00 00 FF 
07b10     38 E4 85 F1 | 	sub	objptr, ##1080
07b14     F2 1E 02 F1 | 	add	local01, objptr
07b18     04 1E 06 F1 | 	add	local01, #4
07b1c     0F 1F 02 FB | 	rdlong	local01, local01
07b20     11 1E 0E F2 | 	cmp	local01, #17 wz
07b24     35 00 00 FF 
07b28     0C E4 85 F1 | 	sub	objptr, ##27148
07b2c     15 FA 05 56 |  if_ne	mov	result1, #21
07b30     28 00 90 5D |  if_ne	jmp	#LR__0720
07b34     37 00 00 FF 
07b38     44 E4 05 F1 | 	add	objptr, ##28228
07b3c     F2 1E 02 FB | 	rdlong	local01, objptr
07b40     01 1E 06 F1 | 	add	local01, #1
07b44     F2 1E 62 FC | 	wrlong	local01, objptr
07b48     37 00 00 FF 
07b4c     44 E4 85 F1 | 	sub	objptr, ##28228
07b50     3C 1F B0 FD | 	call	#_expr
07b54                 | ' err=expr() : if err>0 then return err
07b54     01 FA 15 F2 | 	cmp	result1, #1 wc
07b58                 | ' return 0
07b58     00 FA 05 C6 |  if_b	mov	result1, #0
07b5c                 | LR__0720
07b5c     A7 F0 03 F6 | 	mov	ptra, fp
07b60     B2 00 A0 FD | 	call	#popregs_
07b64                 | _compile_fun_2p_ret
07b64     2D 00 64 FD | 	ret
07b68                 | 
07b68                 | ' 
07b68                 | ' '----- A function that prepares 3 parameters for a 3-parameter command
07b68                 | ' 
07b68                 | ' function compile_fun_3p() as ulong
07b68                 | _compile_fun_3p
07b68     01 4A 05 F6 | 	mov	COUNT_, #1
07b6c     A8 00 A0 FD | 	call	#pushregs_
07b70     1C 1F B0 FD | 	call	#_expr
07b74     FD 1E 02 F6 | 	mov	local01, result1
07b78                 | ' err=expr() : if err>0 then return err
07b78     01 1E 16 F2 | 	cmp	local01, #1 wc
07b7c     0F FB 01 36 |  if_ae	mov	result1, local01
07b80     C8 00 90 3D |  if_ae	jmp	#LR__0730
07b84                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
07b84     37 00 00 FF 
07b88     44 E4 05 F1 | 	add	objptr, ##28228
07b8c     F2 1E 02 FB | 	rdlong	local01, objptr
07b90     03 1E 66 F0 | 	shl	local01, #3
07b94     02 00 00 FF 
07b98     38 E4 85 F1 | 	sub	objptr, ##1080
07b9c     F2 1E 02 F1 | 	add	local01, objptr
07ba0     04 1E 06 F1 | 	add	local01, #4
07ba4     0F 1F 02 FB | 	rdlong	local01, local01
07ba8     11 1E 0E F2 | 	cmp	local01, #17 wz
07bac     35 00 00 FF 
07bb0     0C E4 85 F1 | 	sub	objptr, ##27148
07bb4     15 FA 05 56 |  if_ne	mov	result1, #21
07bb8     90 00 90 5D |  if_ne	jmp	#LR__0730
07bbc     37 00 00 FF 
07bc0     44 E4 05 F1 | 	add	objptr, ##28228
07bc4     F2 1E 02 FB | 	rdlong	local01, objptr
07bc8     01 1E 06 F1 | 	add	local01, #1
07bcc     F2 1E 62 FC | 	wrlong	local01, objptr
07bd0     37 00 00 FF 
07bd4     44 E4 85 F1 | 	sub	objptr, ##28228
07bd8     B4 1E B0 FD | 	call	#_expr
07bdc     FD 1E 02 F6 | 	mov	local01, result1
07be0                 | ' err=expr() : if err>0 then return err
07be0     01 1E 16 F2 | 	cmp	local01, #1 wc
07be4     0F FB 01 36 |  if_ae	mov	result1, local01
07be8     60 00 90 3D |  if_ae	jmp	#LR__0730
07bec                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
07bec     37 00 00 FF 
07bf0     44 E4 05 F1 | 	add	objptr, ##28228
07bf4     F2 1E 02 FB | 	rdlong	local01, objptr
07bf8     03 1E 66 F0 | 	shl	local01, #3
07bfc     02 00 00 FF 
07c00     38 E4 85 F1 | 	sub	objptr, ##1080
07c04     F2 1E 02 F1 | 	add	local01, objptr
07c08     04 1E 06 F1 | 	add	local01, #4
07c0c     0F 1F 02 FB | 	rdlong	local01, local01
07c10     11 1E 0E F2 | 	cmp	local01, #17 wz
07c14     35 00 00 FF 
07c18     0C E4 85 F1 | 	sub	objptr, ##27148
07c1c     15 FA 05 56 |  if_ne	mov	result1, #21
07c20     28 00 90 5D |  if_ne	jmp	#LR__0730
07c24     37 00 00 FF 
07c28     44 E4 05 F1 | 	add	objptr, ##28228
07c2c     F2 1E 02 FB | 	rdlong	local01, objptr
07c30     01 1E 06 F1 | 	add	local01, #1
07c34     F2 1E 62 FC | 	wrlong	local01, objptr
07c38     37 00 00 FF 
07c3c     44 E4 85 F1 | 	sub	objptr, ##28228
07c40     4C 1E B0 FD | 	call	#_expr
07c44                 | ' err=expr() : if err>0 then return err
07c44     01 FA 15 F2 | 	cmp	result1, #1 wc
07c48                 | ' return 0
07c48     00 FA 05 C6 |  if_b	mov	result1, #0
07c4c                 | LR__0730
07c4c     A7 F0 03 F6 | 	mov	ptra, fp
07c50     B2 00 A0 FD | 	call	#popregs_
07c54                 | _compile_fun_3p_ret
07c54     2D 00 64 FD | 	ret
07c58                 | 
07c58                 | ' 
07c58                 | ' '----- A function that prepares 4 parameters for a 4-parameter command
07c58                 | ' 
07c58                 | ' function compile_fun_4p() as ulong
07c58                 | _compile_fun_4p
07c58     01 4A 05 F6 | 	mov	COUNT_, #1
07c5c     A8 00 A0 FD | 	call	#pushregs_
07c60     2C 1E B0 FD | 	call	#_expr
07c64     FD 1E 02 F6 | 	mov	local01, result1
07c68                 | ' err=expr() : if err>0 then return err
07c68     01 1E 16 F2 | 	cmp	local01, #1 wc
07c6c     0F FB 01 36 |  if_ae	mov	result1, local01
07c70     30 01 90 3D |  if_ae	jmp	#LR__0740
07c74                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
07c74     37 00 00 FF 
07c78     44 E4 05 F1 | 	add	objptr, ##28228
07c7c     F2 1E 02 FB | 	rdlong	local01, objptr
07c80     03 1E 66 F0 | 	shl	local01, #3
07c84     02 00 00 FF 
07c88     38 E4 85 F1 | 	sub	objptr, ##1080
07c8c     F2 1E 02 F1 | 	add	local01, objptr
07c90     04 1E 06 F1 | 	add	local01, #4
07c94     0F 1F 02 FB | 	rdlong	local01, local01
07c98     11 1E 0E F2 | 	cmp	local01, #17 wz
07c9c     35 00 00 FF 
07ca0     0C E4 85 F1 | 	sub	objptr, ##27148
07ca4     15 FA 05 56 |  if_ne	mov	result1, #21
07ca8     F8 00 90 5D |  if_ne	jmp	#LR__0740
07cac     37 00 00 FF 
07cb0     44 E4 05 F1 | 	add	objptr, ##28228
07cb4     F2 1E 02 FB | 	rdlong	local01, objptr
07cb8     01 1E 06 F1 | 	add	local01, #1
07cbc     F2 1E 62 FC | 	wrlong	local01, objptr
07cc0     37 00 00 FF 
07cc4     44 E4 85 F1 | 	sub	objptr, ##28228
07cc8     C4 1D B0 FD | 	call	#_expr
07ccc     FD 1E 02 F6 | 	mov	local01, result1
07cd0                 | ' err=expr() : if err>0 then return err
07cd0     01 1E 16 F2 | 	cmp	local01, #1 wc
07cd4     0F FB 01 36 |  if_ae	mov	result1, local01
07cd8     C8 00 90 3D |  if_ae	jmp	#LR__0740
07cdc                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
07cdc     37 00 00 FF 
07ce0     44 E4 05 F1 | 	add	objptr, ##28228
07ce4     F2 1E 02 FB | 	rdlong	local01, objptr
07ce8     03 1E 66 F0 | 	shl	local01, #3
07cec     02 00 00 FF 
07cf0     38 E4 85 F1 | 	sub	objptr, ##1080
07cf4     F2 1E 02 F1 | 	add	local01, objptr
07cf8     04 1E 06 F1 | 	add	local01, #4
07cfc     0F 1F 02 FB | 	rdlong	local01, local01
07d00     11 1E 0E F2 | 	cmp	local01, #17 wz
07d04     35 00 00 FF 
07d08     0C E4 85 F1 | 	sub	objptr, ##27148
07d0c     15 FA 05 56 |  if_ne	mov	result1, #21
07d10     90 00 90 5D |  if_ne	jmp	#LR__0740
07d14     37 00 00 FF 
07d18     44 E4 05 F1 | 	add	objptr, ##28228
07d1c     F2 1E 02 FB | 	rdlong	local01, objptr
07d20     01 1E 06 F1 | 	add	local01, #1
07d24     F2 1E 62 FC | 	wrlong	local01, objptr
07d28     37 00 00 FF 
07d2c     44 E4 85 F1 | 	sub	objptr, ##28228
07d30     5C 1D B0 FD | 	call	#_expr
07d34     FD 1E 02 F6 | 	mov	local01, result1
07d38                 | ' err=expr() : if err>0 then return err
07d38     01 1E 16 F2 | 	cmp	local01, #1 wc
07d3c     0F FB 01 36 |  if_ae	mov	result1, local01
07d40     60 00 90 3D |  if_ae	jmp	#LR__0740
07d44                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1  
07d44     37 00 00 FF 
07d48     44 E4 05 F1 | 	add	objptr, ##28228
07d4c     F2 1E 02 FB | 	rdlong	local01, objptr
07d50     03 1E 66 F0 | 	shl	local01, #3
07d54     02 00 00 FF 
07d58     38 E4 85 F1 | 	sub	objptr, ##1080
07d5c     F2 1E 02 F1 | 	add	local01, objptr
07d60     04 1E 06 F1 | 	add	local01, #4
07d64     0F 1F 02 FB | 	rdlong	local01, local01
07d68     11 1E 0E F2 | 	cmp	local01, #17 wz
07d6c     35 00 00 FF 
07d70     0C E4 85 F1 | 	sub	objptr, ##27148
07d74     15 FA 05 56 |  if_ne	mov	result1, #21
07d78     28 00 90 5D |  if_ne	jmp	#LR__0740
07d7c     37 00 00 FF 
07d80     44 E4 05 F1 | 	add	objptr, ##28228
07d84     F2 1E 02 FB | 	rdlong	local01, objptr
07d88     01 1E 06 F1 | 	add	local01, #1
07d8c     F2 1E 62 FC | 	wrlong	local01, objptr
07d90     37 00 00 FF 
07d94     44 E4 85 F1 | 	sub	objptr, ##28228
07d98     F4 1C B0 FD | 	call	#_expr
07d9c                 | ' err=expr() : if err>0 then return err
07d9c     01 FA 15 F2 | 	cmp	result1, #1 wc
07da0                 | ' return 0
07da0     00 FA 05 C6 |  if_b	mov	result1, #0
07da4                 | LR__0740
07da4     A7 F0 03 F6 | 	mov	ptra, fp
07da8     B2 00 A0 FD | 	call	#popregs_
07dac                 | _compile_fun_4p_ret
07dac     2D 00 64 FD | 	ret
07db0                 | 
07db0                 | ' 
07db0                 | ' '----  Compile a command that can have variable number of parameters. Return num of params and error code
07db0                 | ' 
07db0                 | ' function compile_fun_varp() as ulong,ulong 
07db0                 | _compile_fun_varp
07db0     03 4A 05 F6 | 	mov	COUNT_, #3
07db4     A8 00 A0 FD | 	call	#pushregs_
07db8     00 1E 06 F6 | 	mov	local01, #0
07dbc                 | ' 
07dbc                 | ' i=0 : err=0
07dbc                 | ' if lparts(ct).token<>token_end then
07dbc     37 00 00 FF 
07dc0     44 E4 05 F1 | 	add	objptr, ##28228
07dc4     F2 20 02 FB | 	rdlong	local02, objptr
07dc8     03 20 66 F0 | 	shl	local02, #3
07dcc     02 00 00 FF 
07dd0     38 E4 85 F1 | 	sub	objptr, ##1080
07dd4     F2 20 02 F1 | 	add	local02, objptr
07dd8     04 20 06 F1 | 	add	local02, #4
07ddc     10 21 02 FB | 	rdlong	local02, local02
07de0     FE 21 0E F2 | 	cmp	local02, #510 wz
07de4     35 00 00 FF 
07de8     0C E4 85 F1 | 	sub	objptr, ##27148
07dec     88 00 90 AD |  if_e	jmp	#LR__0751
07df0                 | '   do
07df0                 | LR__0750
07df0     9C 1C B0 FD | 	call	#_expr
07df4     01 1E 06 F1 | 	add	local01, #1
07df8                 | '     expr()
07df8                 | '     i+=1
07df8                 | '     if lparts(ct).token=token_comma then ct+=1
07df8     37 00 00 FF 
07dfc     44 E4 05 F1 | 	add	objptr, ##28228
07e00     F2 20 02 FB | 	rdlong	local02, objptr
07e04     03 20 66 F0 | 	shl	local02, #3
07e08     02 00 00 FF 
07e0c     38 E4 85 F1 | 	sub	objptr, ##1080
07e10     F2 20 02 F1 | 	add	local02, objptr
07e14     04 20 06 F1 | 	add	local02, #4
07e18     10 21 02 FB | 	rdlong	local02, local02
07e1c     11 20 0E F2 | 	cmp	local02, #17 wz
07e20     35 00 00 FF 
07e24     0C E4 85 F1 | 	sub	objptr, ##27148
07e28     37 00 00 AF 
07e2c     44 E4 05 A1 |  if_e	add	objptr, ##28228
07e30     F2 22 02 AB |  if_e	rdlong	local03, objptr
07e34     01 22 06 A1 |  if_e	add	local03, #1
07e38     F2 22 62 AC |  if_e	wrlong	local03, objptr
07e3c     37 00 00 AF 
07e40     44 E4 85 A1 |  if_e	sub	objptr, ##28228
07e44                 | '     if lparts(ct).token=token_end then exit loop
07e44     37 00 00 FF 
07e48     44 E4 05 F1 | 	add	objptr, ##28228
07e4c     F2 20 02 FB | 	rdlong	local02, objptr
07e50     03 20 66 F0 | 	shl	local02, #3
07e54     02 00 00 FF 
07e58     38 E4 85 F1 | 	sub	objptr, ##1080
07e5c     F2 20 02 F1 | 	add	local02, objptr
07e60     04 20 06 F1 | 	add	local02, #4
07e64     10 21 02 FB | 	rdlong	local02, local02
07e68     FE 21 0E F2 | 	cmp	local02, #510 wz
07e6c     35 00 00 FF 
07e70     0C E4 85 F1 | 	sub	objptr, ##27148
07e74     78 FF 9F 5D |  if_ne	jmp	#LR__0750
07e78                 | LR__0751
07e78                 | ' return i,err
07e78     0F FB 01 F6 | 	mov	result1, local01
07e7c     00 FC 05 F6 | 	mov	result2, #0
07e80     A7 F0 03 F6 | 	mov	ptra, fp
07e84     B2 00 A0 FD | 	call	#popregs_
07e88                 | _compile_fun_varp_ret
07e88     2D 00 64 FD | 	ret
07e8c                 | 
07e8c                 | ' 
07e8c                 | ' '----- compile assign to an array element
07e8c                 | ' 
07e8c                 | ' function compile_array_assign() as ulong 
07e8c                 | _compile_array_assign
07e8c     0B 4A 05 F6 | 	mov	COUNT_, #11
07e90     A8 00 A0 FD | 	call	#pushregs_
07e94     00 24 06 F6 | 	mov	local04, #0
07e98     00 26 06 F6 | 	mov	local05, #0
07e9c     37 00 00 FF 
07ea0     44 E4 05 F1 | 	add	objptr, ##28228
07ea4     F2 28 02 FB | 	rdlong	local06, objptr
07ea8     14 FB 01 F6 | 	mov	result1, local06
07eac     01 FA 85 F1 | 	sub	result1, #1
07eb0     03 FA 65 F0 | 	shl	result1, #3
07eb4     02 00 00 FF 
07eb8     38 E4 85 F1 | 	sub	objptr, ##1080
07ebc     F2 FA 01 F1 | 	add	result1, objptr
07ec0     FD 2A 02 FB | 	rdlong	local07, result1
07ec4                 | ' numpar=0 : err=0
07ec4                 | ' varname$=lparts(ct-1).part$
07ec4                 | ' if lparts(ct).token=token_lpar then
07ec4     03 28 66 F0 | 	shl	local06, #3
07ec8     F2 28 02 F1 | 	add	local06, objptr
07ecc     04 28 06 F1 | 	add	local06, #4
07ed0     14 29 02 FB | 	rdlong	local06, local06
07ed4     15 28 0E F2 | 	cmp	local06, #21 wz
07ed8     35 00 00 FF 
07edc     0C E4 85 F1 | 	sub	objptr, ##27148
07ee0     F4 01 90 5D |  if_ne	jmp	#LR__0764
07ee4     37 00 00 FF 
07ee8     44 E4 05 F1 | 	add	objptr, ##28228
07eec     F2 2C 02 FB | 	rdlong	local08, objptr
07ef0     01 2C 06 F1 | 	add	local08, #1
07ef4     F2 2C 62 FC | 	wrlong	local08, objptr
07ef8     37 00 00 FF 
07efc     44 E4 85 F1 | 	sub	objptr, ##28228
07f00                 | '   ct+=1 											' omit this lpar, this is for expr list
07f00                 | '   do
07f00                 | LR__0760
07f00     8C 1B B0 FD | 	call	#_expr
07f04     37 00 00 FF 
07f08     44 E4 05 F1 | 	add	objptr, ##28228
07f0c     F2 28 02 FB | 	rdlong	local06, objptr
07f10     01 28 06 F1 | 	add	local06, #1
07f14     F2 28 62 FC | 	wrlong	local06, objptr
07f18     01 24 06 F1 | 	add	local04, #1
07f1c     01 28 86 F1 | 	sub	local06, #1
07f20     03 28 66 F0 | 	shl	local06, #3
07f24     02 00 00 FF 
07f28     38 E4 85 F1 | 	sub	objptr, ##1080
07f2c     F2 28 02 F1 | 	add	local06, objptr
07f30     04 28 06 F1 | 	add	local06, #4
07f34     14 2D 02 FB | 	rdlong	local08, local06
07f38     14 2C 0E F2 | 	cmp	local08, #20 wz
07f3c     35 00 00 FF 
07f40     0C E4 85 F1 | 	sub	objptr, ##27148
07f44     34 00 90 AD |  if_e	jmp	#LR__0761
07f48     37 00 00 FF 
07f4c     44 E4 05 F1 | 	add	objptr, ##28228
07f50     F2 2C 02 FB | 	rdlong	local08, objptr
07f54     03 2C 66 F0 | 	shl	local08, #3
07f58     02 00 00 FF 
07f5c     38 E4 85 F1 | 	sub	objptr, ##1080
07f60     F2 2C 02 F1 | 	add	local08, objptr
07f64     04 2C 06 F1 | 	add	local08, #4
07f68     16 2D 02 FB | 	rdlong	local08, local08
07f6c     FE 2D 0E F2 | 	cmp	local08, #510 wz
07f70     35 00 00 FF 
07f74     0C E4 85 F1 | 	sub	objptr, ##27148
07f78     84 FF 9F 5D |  if_ne	jmp	#LR__0760
07f7c                 | LR__0761
07f7c     37 00 00 FF 
07f80     44 E4 05 F1 | 	add	objptr, ##28228
07f84     F2 2C 02 FB | 	rdlong	local08, objptr
07f88     01 2C 06 F1 | 	add	local08, #1
07f8c     F2 2C 62 FC | 	wrlong	local08, objptr
07f90     37 00 00 FF 
07f94     44 E4 85 F1 | 	sub	objptr, ##28228
07f98     F4 1A B0 FD | 	call	#_expr
07f9c     01 2E 66 F6 | 	neg	local09, #1
07fa0     00 30 06 F6 | 	mov	local10, #0
07fa4                 | '   ct+=1 : expr()
07fa4                 | '   j=-1 : i=0 
07fa4                 | '   do 
07fa4                 | LR__0762
07fa4                 | '     if variables(i).name=varname$ then j=i: exit loop
07fa4     18 29 02 F6 | 	mov	local06, local10
07fa8     04 28 66 F0 | 	shl	local06, #4
07fac     14 00 00 FF 
07fb0     F8 E5 05 F1 | 	add	objptr, ##10744
07fb4     F2 28 02 F1 | 	add	local06, objptr
07fb8     14 13 02 FB | 	rdlong	arg01, local06
07fbc     15 15 02 F6 | 	mov	arg02, local07
07fc0     14 00 00 FF 
07fc4     F8 E5 85 F1 | 	sub	objptr, ##10744
07fc8     C0 89 B1 FD | 	call	#__system___string_cmp
07fcc     00 FA 0D F2 | 	cmp	result1, #0 wz
07fd0     18 2F 02 A6 |  if_e	mov	local09, local10
07fd4     20 00 90 AD |  if_e	jmp	#LR__0763
07fd8     01 30 06 F1 | 	add	local10, #1
07fdc     35 00 00 FF 
07fe0     08 E4 05 F1 | 	add	objptr, ##27144
07fe4     F2 2C 02 FB | 	rdlong	local08, objptr
07fe8     35 00 00 FF 
07fec     08 E4 85 F1 | 	sub	objptr, ##27144
07ff0     16 31 5A F2 | 	cmps	local10, local08 wcz
07ff4     AC FF 9F ED |  if_be	jmp	#LR__0762
07ff8                 | LR__0763
07ff8     17 1F 02 F6 | 	mov	local01, local09
07ffc     12 21 02 F6 | 	mov	local02, local04
08000     17 22 06 F6 | 	mov	local03, #23
08004     0F 2D 02 F6 | 	mov	local08, local01
08008     10 33 02 F6 | 	mov	local11, local02
0800c     11 2B 02 F6 | 	mov	local07, local03
08010     4A 00 00 FF 
08014     7C E4 05 F1 | 	add	objptr, ##38012
08018     F2 1E 02 FB | 	rdlong	local01, objptr
0801c     0F 2F 02 F6 | 	mov	local09, local01
08020     01 2E 66 F0 | 	shl	local09, #1
08024     0F 2F 02 F1 | 	add	local09, local01
08028     02 2E 66 F0 | 	shl	local09, #2
0802c     03 00 00 FF 
08030     00 E4 85 F1 | 	sub	objptr, ##1536
08034     F2 2E 02 F1 | 	add	local09, objptr
08038     17 2D 62 FC | 	wrlong	local08, local09
0803c     03 00 00 FF 
08040     00 E4 05 F1 | 	add	objptr, ##1536
08044     F2 1E 02 FB | 	rdlong	local01, objptr
08048     0F 2F 02 F6 | 	mov	local09, local01
0804c     01 2E 66 F0 | 	shl	local09, #1
08050     0F 2F 02 F1 | 	add	local09, local01
08054     02 2E 66 F0 | 	shl	local09, #2
08058     03 00 00 FF 
0805c     00 E4 85 F1 | 	sub	objptr, ##1536
08060     F2 2E 02 F1 | 	add	local09, objptr
08064     04 2E 06 F1 | 	add	local09, #4
08068     17 33 62 FC | 	wrlong	local11, local09
0806c     03 00 00 FF 
08070     00 E4 05 F1 | 	add	objptr, ##1536
08074     F2 32 02 FB | 	rdlong	local11, objptr
08078     19 1F 02 F6 | 	mov	local01, local11
0807c     01 1E 66 F0 | 	shl	local01, #1
08080     19 1F 02 F1 | 	add	local01, local11
08084     02 1E 66 F0 | 	shl	local01, #2
08088     03 00 00 FF 
0808c     00 E4 85 F1 | 	sub	objptr, ##1536
08090     F2 1E 02 F1 | 	add	local01, objptr
08094     08 1E 06 F1 | 	add	local01, #8
08098     0F 2B 62 FC | 	wrlong	local07, local01
0809c     03 00 00 FF 
080a0     00 E4 05 F1 | 	add	objptr, ##1536
080a4     F2 2C 02 FB | 	rdlong	local08, objptr
080a8     01 2C 06 F1 | 	add	local08, #1
080ac     F2 2C 62 FC | 	wrlong	local08, objptr
080b0                 | '   t1.result.twowords(0)=j: t1.result.twowords(1)=numpar : t1.result_type=fun_assign : compiledline(lineptr)=t1: lineptr +=1 
080b0                 | '   if numpar>3 then err=45
080b0     04 24 16 F2 | 	cmp	local04, #4 wc
080b4     2D 26 06 36 |  if_ae	mov	local05, #45
080b8                 | '   if i>varnum then err=20
080b8     15 00 00 FF 
080bc     74 E4 85 F1 | 	sub	objptr, ##10868
080c0     F2 2C 02 FB | 	rdlong	local08, objptr
080c4     35 00 00 FF 
080c8     08 E4 85 F1 | 	sub	objptr, ##27144
080cc     16 31 5A F2 | 	cmps	local10, local08 wcz
080d0     14 26 06 16 |  if_a	mov	local05, #20
080d4     04 00 90 FD | 	jmp	#LR__0765
080d8                 | LR__0764
080d8     0E 26 06 F6 | 	mov	local05, #14
080dc                 | LR__0765
080dc                 | ' return err
080dc     13 FB 01 F6 | 	mov	result1, local05
080e0     A7 F0 03 F6 | 	mov	ptra, fp
080e4     B2 00 A0 FD | 	call	#popregs_
080e8                 | _compile_array_assign_ret
080e8     2D 00 64 FD | 	ret
080ec                 | 
080ec                 | ' 
080ec                 | ' '----- compile print command with its ";" and "," modifiers
080ec                 | ' 
080ec                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
080ec                 | _compile_print
080ec     0B 4A 05 F6 | 	mov	COUNT_, #11
080f0     A8 00 A0 FD | 	call	#pushregs_
080f4     00 1E 06 F6 | 	mov	local01, #0
080f8     1D 22 06 F6 | 	mov	local03, #29
080fc                 | ' t1.result.uresult=0 : t1.result_type=result_uint
080fc                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
080fc     37 00 00 FF 
08100     44 E4 05 F1 | 	add	objptr, ##28228
08104     F2 24 02 FB | 	rdlong	local04, objptr
08108     03 24 66 F0 | 	shl	local04, #3
0810c     02 00 00 FF 
08110     38 E4 85 F1 | 	sub	objptr, ##1080
08114     F2 24 02 F1 | 	add	local04, objptr
08118     04 24 06 F1 | 	add	local04, #4
0811c     12 25 02 FB | 	rdlong	local04, local04
08120     FE 25 0E F2 | 	cmp	local04, #510 wz
08124     35 00 00 FF 
08128     0C E4 85 F1 | 	sub	objptr, ##27148
0812c     68 01 90 5D |  if_ne	jmp	#LR__0770
08130     20 22 06 F6 | 	mov	local03, #32
08134     0F 27 02 F6 | 	mov	local05, local01
08138     10 29 02 F6 | 	mov	local06, local02
0813c     11 2B 02 F6 | 	mov	local07, local03
08140     4A 00 00 FF 
08144     7C E4 05 F1 | 	add	objptr, ##38012
08148     F2 2C 02 FB | 	rdlong	local08, objptr
0814c     16 2F 02 F6 | 	mov	local09, local08
08150     01 2E 66 F0 | 	shl	local09, #1
08154     16 2F 02 F1 | 	add	local09, local08
08158     02 2E 66 F0 | 	shl	local09, #2
0815c     03 00 00 FF 
08160     00 E4 85 F1 | 	sub	objptr, ##1536
08164     F2 2E 02 F1 | 	add	local09, objptr
08168     17 27 62 FC | 	wrlong	local05, local09
0816c     03 00 00 FF 
08170     00 E4 05 F1 | 	add	objptr, ##1536
08174     F2 26 02 FB | 	rdlong	local05, objptr
08178     13 31 02 F6 | 	mov	local10, local05
0817c     01 30 66 F0 | 	shl	local10, #1
08180     13 31 02 F1 | 	add	local10, local05
08184     02 30 66 F0 | 	shl	local10, #2
08188     03 00 00 FF 
0818c     00 E4 85 F1 | 	sub	objptr, ##1536
08190     F2 30 02 F1 | 	add	local10, objptr
08194     04 30 06 F1 | 	add	local10, #4
08198     18 29 62 FC | 	wrlong	local06, local10
0819c     03 00 00 FF 
081a0     00 E4 05 F1 | 	add	objptr, ##1536
081a4     F2 26 02 FB | 	rdlong	local05, objptr
081a8     13 33 02 F6 | 	mov	local11, local05
081ac     01 32 66 F0 | 	shl	local11, #1
081b0     13 33 02 F1 | 	add	local11, local05
081b4     02 32 66 F0 | 	shl	local11, #2
081b8     03 00 00 FF 
081bc     00 E4 85 F1 | 	sub	objptr, ##1536
081c0     F2 32 02 F1 | 	add	local11, objptr
081c4     08 32 06 F1 | 	add	local11, #8
081c8     19 2B 62 FC | 	wrlong	local07, local11
081cc     03 00 00 FF 
081d0     00 E4 05 F1 | 	add	objptr, ##1536
081d4     F2 26 02 FB | 	rdlong	local05, objptr
081d8     01 26 06 F1 | 	add	local05, #1
081dc     F2 26 62 FC | 	wrlong	local05, objptr
081e0     44 22 06 F6 | 	mov	local03, #68
081e4     0F 27 02 F6 | 	mov	local05, local01
081e8     10 29 02 F6 | 	mov	local06, local02
081ec     11 2B 02 F6 | 	mov	local07, local03
081f0     F2 2C 02 FB | 	rdlong	local08, objptr
081f4     16 2F 02 F6 | 	mov	local09, local08
081f8     01 2E 66 F0 | 	shl	local09, #1
081fc     16 2F 02 F1 | 	add	local09, local08
08200     02 2E 66 F0 | 	shl	local09, #2
08204     03 00 00 FF 
08208     00 E4 85 F1 | 	sub	objptr, ##1536
0820c     F2 2E 02 F1 | 	add	local09, objptr
08210     17 27 62 FC | 	wrlong	local05, local09
08214     03 00 00 FF 
08218     00 E4 05 F1 | 	add	objptr, ##1536
0821c     F2 32 02 FB | 	rdlong	local11, objptr
08220     19 31 02 F6 | 	mov	local10, local11
08224     01 30 66 F0 | 	shl	local10, #1
08228     19 31 02 F1 | 	add	local10, local11
0822c     02 30 66 F0 | 	shl	local10, #2
08230     03 00 00 FF 
08234     00 E4 85 F1 | 	sub	objptr, ##1536
08238     F2 30 02 F1 | 	add	local10, objptr
0823c     04 30 06 F1 | 	add	local10, #4
08240     18 29 62 FC | 	wrlong	local06, local10
08244     03 00 00 FF 
08248     00 E4 05 F1 | 	add	objptr, ##1536
0824c     F2 30 02 FB | 	rdlong	local10, objptr
08250     18 33 02 F6 | 	mov	local11, local10
08254     01 32 66 F0 | 	shl	local11, #1
08258     18 33 02 F1 | 	add	local11, local10
0825c     02 32 66 F0 | 	shl	local11, #2
08260     03 00 00 FF 
08264     00 E4 85 F1 | 	sub	objptr, ##1536
08268     F2 32 02 F1 | 	add	local11, objptr
0826c     08 32 06 F1 | 	add	local11, #8
08270     19 2B 62 FC | 	wrlong	local07, local11
08274     03 00 00 FF 
08278     00 E4 05 F1 | 	add	objptr, ##1536
0827c     F2 26 02 FB | 	rdlong	local05, objptr
08280     01 26 06 F1 | 	add	local05, #1
08284     F2 26 62 FC | 	wrlong	local05, objptr
08288     4A 00 00 FF 
0828c     7C E4 85 F1 | 	sub	objptr, ##38012
08290     00 FA 05 F6 | 	mov	result1, #0
08294     20 05 90 FD | 	jmp	#LR__0777
08298                 | LR__0770
08298                 | ' do
08298                 | LR__0771
08298     F4 17 B0 FD | 	call	#_expr
0829c                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
0829c                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
0829c     37 00 00 FF 
082a0     44 E4 05 F1 | 	add	objptr, ##28228
082a4     F2 24 02 FB | 	rdlong	local04, objptr
082a8     03 24 66 F0 | 	shl	local04, #3
082ac     02 00 00 FF 
082b0     38 E4 85 F1 | 	sub	objptr, ##1080
082b4     F2 24 02 F1 | 	add	local04, objptr
082b8     04 24 06 F1 | 	add	local04, #4
082bc     12 2D 02 FB | 	rdlong	local08, local04
082c0     11 2C 0E F2 | 	cmp	local08, #17 wz
082c4     35 00 00 FF 
082c8     0C E4 85 F1 | 	sub	objptr, ##27148
082cc     60 01 90 5D |  if_ne	jmp	#LR__0772
082d0     21 22 06 F6 | 	mov	local03, #33
082d4     0F 27 02 F6 | 	mov	local05, local01
082d8     10 29 02 F6 | 	mov	local06, local02
082dc     11 2B 02 F6 | 	mov	local07, local03
082e0     4A 00 00 FF 
082e4     7C E4 05 F1 | 	add	objptr, ##38012
082e8     F2 2C 02 FB | 	rdlong	local08, objptr
082ec     16 2F 02 F6 | 	mov	local09, local08
082f0     01 2E 66 F0 | 	shl	local09, #1
082f4     16 2F 02 F1 | 	add	local09, local08
082f8     02 2E 66 F0 | 	shl	local09, #2
082fc     03 00 00 FF 
08300     00 E4 85 F1 | 	sub	objptr, ##1536
08304     F2 2E 02 F1 | 	add	local09, objptr
08308     17 27 62 FC | 	wrlong	local05, local09
0830c     03 00 00 FF 
08310     00 E4 05 F1 | 	add	objptr, ##1536
08314     F2 32 02 FB | 	rdlong	local11, objptr
08318     19 31 02 F6 | 	mov	local10, local11
0831c     01 30 66 F0 | 	shl	local10, #1
08320     19 31 02 F1 | 	add	local10, local11
08324     02 30 66 F0 | 	shl	local10, #2
08328     03 00 00 FF 
0832c     00 E4 85 F1 | 	sub	objptr, ##1536
08330     F2 30 02 F1 | 	add	local10, objptr
08334     04 30 06 F1 | 	add	local10, #4
08338     18 29 62 FC | 	wrlong	local06, local10
0833c     03 00 00 FF 
08340     00 E4 05 F1 | 	add	objptr, ##1536
08344     F2 26 02 FB | 	rdlong	local05, objptr
08348     13 33 02 F6 | 	mov	local11, local05
0834c     01 32 66 F0 | 	shl	local11, #1
08350     13 33 02 F1 | 	add	local11, local05
08354     02 32 66 F0 | 	shl	local11, #2
08358     03 00 00 FF 
0835c     00 E4 85 F1 | 	sub	objptr, ##1536
08360     F2 32 02 F1 | 	add	local11, objptr
08364     08 32 06 F1 | 	add	local11, #8
08368     19 2B 62 FC | 	wrlong	local07, local11
0836c     03 00 00 FF 
08370     00 E4 05 F1 | 	add	objptr, ##1536
08374     F2 26 02 FB | 	rdlong	local05, objptr
08378     01 26 06 F1 | 	add	local05, #1
0837c     F2 26 62 FC | 	wrlong	local05, objptr
08380     44 22 06 F6 | 	mov	local03, #68
08384     0F 27 02 F6 | 	mov	local05, local01
08388     10 29 02 F6 | 	mov	local06, local02
0838c     11 2B 02 F6 | 	mov	local07, local03
08390     F2 2C 02 FB | 	rdlong	local08, objptr
08394     16 2F 02 F6 | 	mov	local09, local08
08398     01 2E 66 F0 | 	shl	local09, #1
0839c     16 2F 02 F1 | 	add	local09, local08
083a0     02 2E 66 F0 | 	shl	local09, #2
083a4     03 00 00 FF 
083a8     00 E4 85 F1 | 	sub	objptr, ##1536
083ac     F2 2E 02 F1 | 	add	local09, objptr
083b0     17 27 62 FC | 	wrlong	local05, local09
083b4     03 00 00 FF 
083b8     00 E4 05 F1 | 	add	objptr, ##1536
083bc     F2 32 02 FB | 	rdlong	local11, objptr
083c0     19 31 02 F6 | 	mov	local10, local11
083c4     01 30 66 F0 | 	shl	local10, #1
083c8     19 31 02 F1 | 	add	local10, local11
083cc     02 30 66 F0 | 	shl	local10, #2
083d0     03 00 00 FF 
083d4     00 E4 85 F1 | 	sub	objptr, ##1536
083d8     F2 30 02 F1 | 	add	local10, objptr
083dc     04 30 06 F1 | 	add	local10, #4
083e0     18 29 62 FC | 	wrlong	local06, local10
083e4     03 00 00 FF 
083e8     00 E4 05 F1 | 	add	objptr, ##1536
083ec     F2 30 02 FB | 	rdlong	local10, objptr
083f0     18 33 02 F6 | 	mov	local11, local10
083f4     01 32 66 F0 | 	shl	local11, #1
083f8     18 33 02 F1 | 	add	local11, local10
083fc     02 32 66 F0 | 	shl	local11, #2
08400     03 00 00 FF 
08404     00 E4 85 F1 | 	sub	objptr, ##1536
08408     F2 32 02 F1 | 	add	local11, objptr
0840c     08 32 06 F1 | 	add	local11, #8
08410     19 2B 62 FC | 	wrlong	local07, local11
08414     03 00 00 FF 
08418     00 E4 05 F1 | 	add	objptr, ##1536
0841c     F2 26 02 FB | 	rdlong	local05, objptr
08420     01 26 06 F1 | 	add	local05, #1
08424     F2 26 62 FC | 	wrlong	local05, objptr
08428     4A 00 00 FF 
0842c     7C E4 85 F1 | 	sub	objptr, ##38012
08430                 | LR__0772
08430                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
08430     37 00 00 FF 
08434     44 E4 05 F1 | 	add	objptr, ##28228
08438     F2 24 02 FB | 	rdlong	local04, objptr
0843c     03 24 66 F0 | 	shl	local04, #3
08440     02 00 00 FF 
08444     38 E4 85 F1 | 	sub	objptr, ##1080
08448     F2 24 02 F1 | 	add	local04, objptr
0844c     04 24 06 F1 | 	add	local04, #4
08450     12 2D 02 FB | 	rdlong	local08, local04
08454     12 2C 0E F2 | 	cmp	local08, #18 wz
08458     35 00 00 FF 
0845c     0C E4 85 F1 | 	sub	objptr, ##27148
08460     60 01 90 5D |  if_ne	jmp	#LR__0773
08464     22 22 06 F6 | 	mov	local03, #34
08468     0F 27 02 F6 | 	mov	local05, local01
0846c     10 29 02 F6 | 	mov	local06, local02
08470     11 2B 02 F6 | 	mov	local07, local03
08474     4A 00 00 FF 
08478     7C E4 05 F1 | 	add	objptr, ##38012
0847c     F2 2C 02 FB | 	rdlong	local08, objptr
08480     16 2F 02 F6 | 	mov	local09, local08
08484     01 2E 66 F0 | 	shl	local09, #1
08488     16 2F 02 F1 | 	add	local09, local08
0848c     02 2E 66 F0 | 	shl	local09, #2
08490     03 00 00 FF 
08494     00 E4 85 F1 | 	sub	objptr, ##1536
08498     F2 2E 02 F1 | 	add	local09, objptr
0849c     17 27 62 FC | 	wrlong	local05, local09
084a0     03 00 00 FF 
084a4     00 E4 05 F1 | 	add	objptr, ##1536
084a8     F2 32 02 FB | 	rdlong	local11, objptr
084ac     19 31 02 F6 | 	mov	local10, local11
084b0     01 30 66 F0 | 	shl	local10, #1
084b4     19 31 02 F1 | 	add	local10, local11
084b8     02 30 66 F0 | 	shl	local10, #2
084bc     03 00 00 FF 
084c0     00 E4 85 F1 | 	sub	objptr, ##1536
084c4     F2 30 02 F1 | 	add	local10, objptr
084c8     04 30 06 F1 | 	add	local10, #4
084cc     18 29 62 FC | 	wrlong	local06, local10
084d0     03 00 00 FF 
084d4     00 E4 05 F1 | 	add	objptr, ##1536
084d8     F2 26 02 FB | 	rdlong	local05, objptr
084dc     13 33 02 F6 | 	mov	local11, local05
084e0     01 32 66 F0 | 	shl	local11, #1
084e4     13 33 02 F1 | 	add	local11, local05
084e8     02 32 66 F0 | 	shl	local11, #2
084ec     03 00 00 FF 
084f0     00 E4 85 F1 | 	sub	objptr, ##1536
084f4     F2 32 02 F1 | 	add	local11, objptr
084f8     08 32 06 F1 | 	add	local11, #8
084fc     19 2B 62 FC | 	wrlong	local07, local11
08500     03 00 00 FF 
08504     00 E4 05 F1 | 	add	objptr, ##1536
08508     F2 26 02 FB | 	rdlong	local05, objptr
0850c     01 26 06 F1 | 	add	local05, #1
08510     F2 26 62 FC | 	wrlong	local05, objptr
08514     44 22 06 F6 | 	mov	local03, #68
08518     0F 27 02 F6 | 	mov	local05, local01
0851c     10 29 02 F6 | 	mov	local06, local02
08520     11 2B 02 F6 | 	mov	local07, local03
08524     F2 2C 02 FB | 	rdlong	local08, objptr
08528     16 2F 02 F6 | 	mov	local09, local08
0852c     01 2E 66 F0 | 	shl	local09, #1
08530     16 2F 02 F1 | 	add	local09, local08
08534     02 2E 66 F0 | 	shl	local09, #2
08538     03 00 00 FF 
0853c     00 E4 85 F1 | 	sub	objptr, ##1536
08540     F2 2E 02 F1 | 	add	local09, objptr
08544     17 27 62 FC | 	wrlong	local05, local09
08548     03 00 00 FF 
0854c     00 E4 05 F1 | 	add	objptr, ##1536
08550     F2 32 02 FB | 	rdlong	local11, objptr
08554     19 31 02 F6 | 	mov	local10, local11
08558     01 30 66 F0 | 	shl	local10, #1
0855c     19 31 02 F1 | 	add	local10, local11
08560     02 30 66 F0 | 	shl	local10, #2
08564     03 00 00 FF 
08568     00 E4 85 F1 | 	sub	objptr, ##1536
0856c     F2 30 02 F1 | 	add	local10, objptr
08570     04 30 06 F1 | 	add	local10, #4
08574     18 29 62 FC | 	wrlong	local06, local10
08578     03 00 00 FF 
0857c     00 E4 05 F1 | 	add	objptr, ##1536
08580     F2 30 02 FB | 	rdlong	local10, objptr
08584     18 33 02 F6 | 	mov	local11, local10
08588     01 32 66 F0 | 	shl	local11, #1
0858c     18 33 02 F1 | 	add	local11, local10
08590     02 32 66 F0 | 	shl	local11, #2
08594     03 00 00 FF 
08598     00 E4 85 F1 | 	sub	objptr, ##1536
0859c     F2 32 02 F1 | 	add	local11, objptr
085a0     08 32 06 F1 | 	add	local11, #8
085a4     19 2B 62 FC | 	wrlong	local07, local11
085a8     03 00 00 FF 
085ac     00 E4 05 F1 | 	add	objptr, ##1536
085b0     F2 26 02 FB | 	rdlong	local05, objptr
085b4     01 26 06 F1 | 	add	local05, #1
085b8     F2 26 62 FC | 	wrlong	local05, objptr
085bc     4A 00 00 FF 
085c0     7C E4 85 F1 | 	sub	objptr, ##38012
085c4                 | LR__0773
085c4                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
085c4     37 00 00 FF 
085c8     44 E4 05 F1 | 	add	objptr, ##28228
085cc     F2 24 02 FB | 	rdlong	local04, objptr
085d0     03 24 66 F0 | 	shl	local04, #3
085d4     02 00 00 FF 
085d8     38 E4 85 F1 | 	sub	objptr, ##1080
085dc     F2 24 02 F1 | 	add	local04, objptr
085e0     04 24 06 F1 | 	add	local04, #4
085e4     12 2D 02 FB | 	rdlong	local08, local04
085e8     FE 2D 0E F2 | 	cmp	local08, #510 wz
085ec     35 00 00 FF 
085f0     0C E4 85 F1 | 	sub	objptr, ##27148
085f4     B8 00 90 5D |  if_ne	jmp	#LR__0774
085f8     44 22 06 F6 | 	mov	local03, #68
085fc     0F 27 02 F6 | 	mov	local05, local01
08600     10 29 02 F6 | 	mov	local06, local02
08604     11 2B 02 F6 | 	mov	local07, local03
08608     4A 00 00 FF 
0860c     7C E4 05 F1 | 	add	objptr, ##38012
08610     F2 2C 02 FB | 	rdlong	local08, objptr
08614     16 2F 02 F6 | 	mov	local09, local08
08618     01 2E 66 F0 | 	shl	local09, #1
0861c     16 2F 02 F1 | 	add	local09, local08
08620     02 2E 66 F0 | 	shl	local09, #2
08624     03 00 00 FF 
08628     00 E4 85 F1 | 	sub	objptr, ##1536
0862c     F2 2E 02 F1 | 	add	local09, objptr
08630     17 27 62 FC | 	wrlong	local05, local09
08634     03 00 00 FF 
08638     00 E4 05 F1 | 	add	objptr, ##1536
0863c     F2 32 02 FB | 	rdlong	local11, objptr
08640     19 31 02 F6 | 	mov	local10, local11
08644     01 30 66 F0 | 	shl	local10, #1
08648     19 31 02 F1 | 	add	local10, local11
0864c     02 30 66 F0 | 	shl	local10, #2
08650     03 00 00 FF 
08654     00 E4 85 F1 | 	sub	objptr, ##1536
08658     F2 30 02 F1 | 	add	local10, objptr
0865c     04 30 06 F1 | 	add	local10, #4
08660     18 29 62 FC | 	wrlong	local06, local10
08664     03 00 00 FF 
08668     00 E4 05 F1 | 	add	objptr, ##1536
0866c     F2 30 02 FB | 	rdlong	local10, objptr
08670     18 33 02 F6 | 	mov	local11, local10
08674     01 32 66 F0 | 	shl	local11, #1
08678     18 33 02 F1 | 	add	local11, local10
0867c     02 32 66 F0 | 	shl	local11, #2
08680     03 00 00 FF 
08684     00 E4 85 F1 | 	sub	objptr, ##1536
08688     F2 32 02 F1 | 	add	local11, objptr
0868c     08 32 06 F1 | 	add	local11, #8
08690     19 2B 62 FC | 	wrlong	local07, local11
08694     03 00 00 FF 
08698     00 E4 05 F1 | 	add	objptr, ##1536
0869c     F2 26 02 FB | 	rdlong	local05, objptr
086a0     01 26 06 F1 | 	add	local05, #1
086a4     F2 26 62 FC | 	wrlong	local05, objptr
086a8     4A 00 00 FF 
086ac     7C E4 85 F1 | 	sub	objptr, ##38012
086b0                 | LR__0774
086b0                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then return 22
086b0     37 00 00 FF 
086b4     44 E4 05 F1 | 	add	objptr, ##28228
086b8     F2 24 02 FB | 	rdlong	local04, objptr
086bc     03 24 66 F0 | 	shl	local04, #3
086c0     02 00 00 FF 
086c4     38 E4 85 F1 | 	sub	objptr, ##1080
086c8     F2 24 02 F1 | 	add	local04, objptr
086cc     04 24 06 F1 | 	add	local04, #4
086d0     12 2D 02 FB | 	rdlong	local08, local04
086d4     11 2C 0E F2 | 	cmp	local08, #17 wz
086d8     35 00 00 FF 
086dc     0C E4 85 F1 | 	sub	objptr, ##27148
086e0     6C 00 90 AD |  if_e	jmp	#LR__0775
086e4     37 00 00 FF 
086e8     44 E4 05 F1 | 	add	objptr, ##28228
086ec     F2 2C 02 FB | 	rdlong	local08, objptr
086f0     03 2C 66 F0 | 	shl	local08, #3
086f4     02 00 00 FF 
086f8     38 E4 85 F1 | 	sub	objptr, ##1080
086fc     F2 2C 02 F1 | 	add	local08, objptr
08700     04 2C 06 F1 | 	add	local08, #4
08704     16 2D 02 FB | 	rdlong	local08, local08
08708     12 2C 0E F2 | 	cmp	local08, #18 wz
0870c     35 00 00 FF 
08710     0C E4 85 F1 | 	sub	objptr, ##27148
08714     38 00 90 AD |  if_e	jmp	#LR__0775
08718     37 00 00 FF 
0871c     44 E4 05 F1 | 	add	objptr, ##28228
08720     F2 32 02 FB | 	rdlong	local11, objptr
08724     03 32 66 F0 | 	shl	local11, #3
08728     02 00 00 FF 
0872c     38 E4 85 F1 | 	sub	objptr, ##1080
08730     F2 32 02 F1 | 	add	local11, objptr
08734     04 32 06 F1 | 	add	local11, #4
08738     19 33 02 FB | 	rdlong	local11, local11
0873c     FE 33 0E F2 | 	cmp	local11, #510 wz
08740     35 00 00 FF 
08744     0C E4 85 F1 | 	sub	objptr, ##27148
08748     16 FA 05 56 |  if_ne	mov	result1, #22
0874c     68 00 90 5D |  if_ne	jmp	#LR__0777
08750                 | LR__0775
08750     37 00 00 FF 
08754     44 E4 05 F1 | 	add	objptr, ##28228
08758     F2 24 02 FB | 	rdlong	local04, objptr
0875c     01 24 06 F1 | 	add	local04, #1
08760     F2 24 62 FC | 	wrlong	local04, objptr
08764     03 24 66 F0 | 	shl	local04, #3
08768     02 00 00 FF 
0876c     38 E4 85 F1 | 	sub	objptr, ##1080
08770     F2 24 02 F1 | 	add	local04, objptr
08774     04 24 06 F1 | 	add	local04, #4
08778     12 2D 02 FB | 	rdlong	local08, local04
0877c     FE 2D 0E F2 | 	cmp	local08, #510 wz
08780     35 00 00 FF 
08784     0C E4 85 F1 | 	sub	objptr, ##27148
08788     28 00 90 AD |  if_e	jmp	#LR__0776
0878c     37 00 00 FF 
08790     44 E4 05 F1 | 	add	objptr, ##28228
08794     F2 32 02 FB | 	rdlong	local11, objptr
08798     0E 00 00 FF 
0879c     1C E4 05 F1 | 	add	objptr, ##7196
087a0     F2 30 02 FB | 	rdlong	local10, objptr
087a4     45 00 00 FF 
087a8     60 E4 85 F1 | 	sub	objptr, ##35424
087ac     18 33 52 F2 | 	cmps	local11, local10 wc
087b0     E4 FA 9F CD |  if_b	jmp	#LR__0771
087b4                 | LR__0776
087b4                 | ' return 0
087b4     00 FA 05 F6 | 	mov	result1, #0
087b8                 | LR__0777
087b8     A7 F0 03 F6 | 	mov	ptra, fp
087bc     B2 00 A0 FD | 	call	#popregs_
087c0                 | _compile_print_ret
087c0     2D 00 64 FD | 	ret
087c4                 | 
087c4                 | ' 
087c4                 | ' '----- compile 'if' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
087c4                 | ' 
087c4                 | ' function compile_if(aline as ulong) as ulong  
087c4                 | _compile_if
087c4     09 4A 05 F6 | 	mov	COUNT_, #9
087c8     A8 00 A0 FD | 	call	#pushregs_
087cc                 | _compile_if_enter
087cc     09 25 02 F6 | 	mov	local04, arg01
087d0                 | ' return expr()
087d0     BC 12 B0 FD | 	call	#_expr
087d4     37 00 00 FF 
087d8     44 E4 05 F1 | 	add	objptr, ##28228
087dc     F2 14 02 FB | 	rdlong	arg02, objptr
087e0     0A 27 02 F6 | 	mov	local05, arg02
087e4     03 26 66 F0 | 	shl	local05, #3
087e8     02 00 00 FF 
087ec     38 E4 85 F1 | 	sub	objptr, ##1080
087f0     F2 26 02 F1 | 	add	local05, objptr
087f4     04 26 06 F1 | 	add	local05, #4
087f8     13 27 02 FB | 	rdlong	local05, local05
087fc     01 14 06 F1 | 	add	arg02, #1
08800     02 00 00 FF 
08804     38 E4 05 F1 | 	add	objptr, ##1080
08808     F2 14 62 FC | 	wrlong	arg02, objptr
0880c     37 00 00 FF 
08810     44 E4 85 F1 | 	sub	objptr, ##28228
08814                 | ' 
08814                 | ' err=compile_fun_1p()
08814                 | ' cmd=lparts(ct).token : ct+=1 : if cmd<>token_then then return 52
08814     5B 26 0E F2 | 	cmp	local05, #91 wz
08818     34 FA 05 56 |  if_ne	mov	result1, #52
0881c     20 01 90 5D |  if_ne	jmp	#LR__0782
08820     58 22 06 F6 | 	mov	local03, #88
08824     0F 29 02 F6 | 	mov	local06, local01
08828     10 2B 02 F6 | 	mov	local07, local02
0882c     11 15 02 F6 | 	mov	arg02, local03
08830     4A 00 00 FF 
08834     7C E4 05 F1 | 	add	objptr, ##38012
08838     F2 12 02 FB | 	rdlong	arg01, objptr
0883c     09 2D 02 F6 | 	mov	local08, arg01
08840     01 2C 66 F0 | 	shl	local08, #1
08844     09 2D 02 F1 | 	add	local08, arg01
08848     02 2C 66 F0 | 	shl	local08, #2
0884c     03 00 00 FF 
08850     00 E4 85 F1 | 	sub	objptr, ##1536
08854     F2 2C 02 F1 | 	add	local08, objptr
08858     16 29 62 FC | 	wrlong	local06, local08
0885c     03 00 00 FF 
08860     00 E4 05 F1 | 	add	objptr, ##1536
08864     F2 28 02 FB | 	rdlong	local06, objptr
08868     14 13 02 F6 | 	mov	arg01, local06
0886c     01 12 66 F0 | 	shl	arg01, #1
08870     14 13 02 F1 | 	add	arg01, local06
08874     02 12 66 F0 | 	shl	arg01, #2
08878     03 00 00 FF 
0887c     00 E4 85 F1 | 	sub	objptr, ##1536
08880     F2 12 02 F1 | 	add	arg01, objptr
08884     04 12 06 F1 | 	add	arg01, #4
08888     09 2B 62 FC | 	wrlong	local07, arg01
0888c     03 00 00 FF 
08890     00 E4 05 F1 | 	add	objptr, ##1536
08894     F2 28 02 FB | 	rdlong	local06, objptr
08898     14 13 02 F6 | 	mov	arg01, local06
0889c     01 12 66 F0 | 	shl	arg01, #1
088a0     14 13 02 F1 | 	add	arg01, local06
088a4     02 12 66 F0 | 	shl	arg01, #2
088a8     03 00 00 FF 
088ac     00 E4 85 F1 | 	sub	objptr, ##1536
088b0     F2 12 02 F1 | 	add	arg01, objptr
088b4     08 12 06 F1 | 	add	arg01, #8
088b8     09 15 62 FC | 	wrlong	arg02, arg01
088bc     03 00 00 FF 
088c0     00 E4 05 F1 | 	add	objptr, ##1536
088c4     F2 28 02 FB | 	rdlong	local06, objptr
088c8     01 28 06 F1 | 	add	local06, #1
088cc     F2 28 62 FC | 	wrlong	local06, objptr
088d0                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
088d0                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
088d0     13 00 00 FF 
088d4     38 E4 85 F1 | 	sub	objptr, ##9784
088d8     F2 14 02 FB | 	rdlong	arg02, objptr
088dc     01 14 06 F1 | 	add	arg02, #1
088e0     03 14 66 F0 | 	shl	arg02, #3
088e4     02 00 00 FF 
088e8     38 E4 85 F1 | 	sub	objptr, ##1080
088ec     F2 14 02 F1 | 	add	arg02, objptr
088f0     0A 13 02 FB | 	rdlong	arg01, arg02
088f4     35 00 00 FF 
088f8     0C E4 85 F1 | 	sub	objptr, ##27148
088fc                 | ' 
088fc                 | ' select case s
088fc     81 01 00 FF 
08900     B2 15 06 F6 | 	mov	arg02, ##@LR__5183
08904     84 80 B1 FD | 	call	#__system___string_cmp
08908     00 FA 0D F2 | 	cmp	result1, #0 wz
0890c     1B FA 05 A6 |  if_e	mov	result1, #27
08910     00 FA 05 56 |  if_ne	mov	result1, #0
08914     00 FA 0D F2 | 	cmp	result1, #0 wz
08918     10 00 90 AD |  if_e	jmp	#LR__0780
0891c     05 12 06 F6 | 	mov	arg01, #5
08920     88 EC BF FD | 	call	#_compile_immediate_assign
08924     FD 2E 02 F6 | 	mov	local09, result1
08928     10 00 90 FD | 	jmp	#LR__0781
0892c                 | LR__0780
0892c     05 12 06 F6 | 	mov	arg01, #5
08930     12 15 02 F6 | 	mov	arg02, local04
08934     74 E3 BF FD | 	call	#_compile_immediate
08938     FD 2E 02 F6 | 	mov	local09, result1
0893c                 | LR__0781
0893c                 | ' return err
0893c     17 FB 01 F6 | 	mov	result1, local09
08940                 | LR__0782
08940     A7 F0 03 F6 | 	mov	ptra, fp
08944     B2 00 A0 FD | 	call	#popregs_
08948                 | _compile_if_ret
08948     2D 00 64 FD | 	ret
0894c                 | 
0894c                 | ' 
0894c                 | ' '----- compile 'else' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
0894c                 | ' 
0894c                 | ' function compile_else(aline as ulong) as ulong  
0894c                 | _compile_else
0894c     07 4A 05 F6 | 	mov	COUNT_, #7
08950     A8 00 A0 FD | 	call	#pushregs_
08954                 | _compile_else_enter
08954     09 25 02 F6 | 	mov	local04, arg01
08958     5A 22 06 F6 | 	mov	local03, #90
0895c     0F 27 02 F6 | 	mov	local05, local01
08960     10 29 02 F6 | 	mov	local06, local02
08964     11 1F 02 F6 | 	mov	local01, local03
08968     4A 00 00 FF 
0896c     7C E4 05 F1 | 	add	objptr, ##38012
08970     F2 14 02 FB | 	rdlong	arg02, objptr
08974     0A 13 02 F6 | 	mov	arg01, arg02
08978     01 12 66 F0 | 	shl	arg01, #1
0897c     0A 13 02 F1 | 	add	arg01, arg02
08980     02 12 66 F0 | 	shl	arg01, #2
08984     03 00 00 FF 
08988     00 E4 85 F1 | 	sub	objptr, ##1536
0898c     F2 12 02 F1 | 	add	arg01, objptr
08990     09 27 62 FC | 	wrlong	local05, arg01
08994     03 00 00 FF 
08998     00 E4 05 F1 | 	add	objptr, ##1536
0899c     F2 26 02 FB | 	rdlong	local05, objptr
089a0     13 15 02 F6 | 	mov	arg02, local05
089a4     01 14 66 F0 | 	shl	arg02, #1
089a8     13 15 02 F1 | 	add	arg02, local05
089ac     02 14 66 F0 | 	shl	arg02, #2
089b0     03 00 00 FF 
089b4     00 E4 85 F1 | 	sub	objptr, ##1536
089b8     F2 14 02 F1 | 	add	arg02, objptr
089bc     04 14 06 F1 | 	add	arg02, #4
089c0     0A 29 62 FC | 	wrlong	local06, arg02
089c4     03 00 00 FF 
089c8     00 E4 05 F1 | 	add	objptr, ##1536
089cc     F2 28 02 FB | 	rdlong	local06, objptr
089d0     14 27 02 F6 | 	mov	local05, local06
089d4     01 26 66 F0 | 	shl	local05, #1
089d8     14 27 02 F1 | 	add	local05, local06
089dc     02 26 66 F0 | 	shl	local05, #2
089e0     03 00 00 FF 
089e4     00 E4 85 F1 | 	sub	objptr, ##1536
089e8     F2 26 02 F1 | 	add	local05, objptr
089ec     08 26 06 F1 | 	add	local05, #8
089f0     13 1F 62 FC | 	wrlong	local01, local05
089f4     03 00 00 FF 
089f8     00 E4 05 F1 | 	add	objptr, ##1536
089fc     F2 26 02 FB | 	rdlong	local05, objptr
08a00     01 26 06 F1 | 	add	local05, #1
08a04     F2 26 62 FC | 	wrlong	local05, objptr
08a08                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
08a08                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
08a08     13 00 00 FF 
08a0c     38 E4 85 F1 | 	sub	objptr, ##9784
08a10     F2 28 02 FB | 	rdlong	local06, objptr
08a14     01 28 06 F1 | 	add	local06, #1
08a18     03 28 66 F0 | 	shl	local06, #3
08a1c     02 00 00 FF 
08a20     38 E4 85 F1 | 	sub	objptr, ##1080
08a24     F2 28 02 F1 | 	add	local06, objptr
08a28     14 13 02 FB | 	rdlong	arg01, local06
08a2c     35 00 00 FF 
08a30     0C E4 85 F1 | 	sub	objptr, ##27148
08a34                 | ' 
08a34                 | ' select case s
08a34     81 01 00 FF 
08a38     B2 15 06 F6 | 	mov	arg02, ##@LR__5183
08a3c     4C 7F B1 FD | 	call	#__system___string_cmp
08a40     00 FA 0D F2 | 	cmp	result1, #0 wz
08a44     1B FA 05 A6 |  if_e	mov	result1, #27
08a48     00 FA 05 56 |  if_ne	mov	result1, #0
08a4c     00 FA 0D F2 | 	cmp	result1, #0 wz
08a50     10 00 90 AD |  if_e	jmp	#LR__0790
08a54     05 12 06 F6 | 	mov	arg01, #5
08a58     50 EB BF FD | 	call	#_compile_immediate_assign
08a5c     FD 2A 02 F6 | 	mov	local07, result1
08a60     10 00 90 FD | 	jmp	#LR__0791
08a64                 | LR__0790
08a64     05 12 06 F6 | 	mov	arg01, #5
08a68     12 15 02 F6 | 	mov	arg02, local04
08a6c     3C E2 BF FD | 	call	#_compile_immediate
08a70     FD 2A 02 F6 | 	mov	local07, result1
08a74                 | LR__0791
08a74                 | ' return err
08a74     15 FB 01 F6 | 	mov	result1, local07
08a78     A7 F0 03 F6 | 	mov	ptra, fp
08a7c     B2 00 A0 FD | 	call	#popregs_
08a80                 | _compile_else_ret
08a80     2D 00 64 FD | 	ret
08a84                 | 
08a84                 | ' 
08a84                 | ' '----- compile 'dim' command. Also it allocates the psram for an aray from the top of the memory
08a84                 | ' 
08a84                 | ' function compile_dim() as ulong  
08a84                 | _compile_dim
08a84     11 4A 05 F6 | 	mov	COUNT_, #17
08a88     A8 00 A0 FD | 	call	#pushregs_
08a8c     01 1E 06 F6 | 	mov	local01, #1
08a90     01 20 06 F6 | 	mov	local02, #1
08a94     01 22 06 F6 | 	mov	local03, #1
08a98                 | ' 
08a98                 | ' dims(0)=1: dims(1)=1: dims(2)=1
08a98                 | ' if isname(lparts(ct).part$) then 
08a98     37 00 00 FF 
08a9c     44 E4 05 F1 | 	add	objptr, ##28228
08aa0     F2 18 02 FB | 	rdlong	arg04, objptr
08aa4     03 18 66 F0 | 	shl	arg04, #3
08aa8     02 00 00 FF 
08aac     38 E4 85 F1 | 	sub	objptr, ##1080
08ab0     F2 18 02 F1 | 	add	arg04, objptr
08ab4     0C 13 02 FB | 	rdlong	arg01, arg04
08ab8     35 00 00 FF 
08abc     0C E4 85 F1 | 	sub	objptr, ##27148
08ac0     40 D0 BF FD | 	call	#_isname
08ac4     00 FA 0D F2 | 	cmp	result1, #0 wz
08ac8     80 05 90 AD |  if_e	jmp	#LR__0823
08acc     37 00 00 FF 
08ad0     44 E4 05 F1 | 	add	objptr, ##28228
08ad4     F2 24 02 FB | 	rdlong	local04, objptr
08ad8     03 24 66 F0 | 	shl	local04, #3
08adc     02 00 00 FF 
08ae0     38 E4 85 F1 | 	sub	objptr, ##1080
08ae4     F2 24 02 F1 | 	add	local04, objptr
08ae8     12 27 02 FB | 	rdlong	local05, local04
08aec     01 28 66 F6 | 	neg	local06, #1
08af0                 | '   varname2$=lparts(ct).part$ 
08af0                 | '   j=-1
08af0                 | '   if varnum>0 then
08af0     04 E4 85 F1 | 	sub	objptr, #4
08af4     F2 2A 02 FB | 	rdlong	local07, objptr
08af8     35 00 00 FF 
08afc     08 E4 85 F1 | 	sub	objptr, ##27144
08b00     01 2A 56 F2 | 	cmps	local07, #1 wc
08b04     58 00 90 CD |  if_b	jmp	#LR__0802
08b08                 | '     for i=0 to varnum-1
08b08     00 2C 06 F6 | 	mov	local08, #0
08b0c     35 00 00 FF 
08b10     08 E4 05 F1 | 	add	objptr, ##27144
08b14     F2 2E 02 FB | 	rdlong	local09, objptr
08b18     35 00 00 FF 
08b1c     08 E4 85 F1 | 	sub	objptr, ##27144
08b20                 | LR__0800
08b20     17 2D 52 F2 | 	cmps	local08, local09 wc
08b24     38 00 90 3D |  if_ae	jmp	#LR__0801
08b28                 | '       if variables(i).name=varname2$ then j=i : exit
08b28     16 25 02 F6 | 	mov	local04, local08
08b2c     04 24 66 F0 | 	shl	local04, #4
08b30     14 00 00 FF 
08b34     F8 E5 05 F1 | 	add	objptr, ##10744
08b38     F2 24 02 F1 | 	add	local04, objptr
08b3c     12 13 02 FB | 	rdlong	arg01, local04
08b40     13 15 02 F6 | 	mov	arg02, local05
08b44     14 00 00 FF 
08b48     F8 E5 85 F1 | 	sub	objptr, ##10744
08b4c     3C 7E B1 FD | 	call	#__system___string_cmp
08b50     00 FA 0D F2 | 	cmp	result1, #0 wz
08b54     16 29 02 A6 |  if_e	mov	local06, local08
08b58     01 2C 06 51 |  if_ne	add	local08, #1
08b5c     C0 FF 9F 5D |  if_ne	jmp	#LR__0800
08b60                 | LR__0801
08b60                 | LR__0802
08b60                 | '   if j=-1 then j=varnum else print "Dim: at line ";linenum;": warning: the variable existed."
08b60     FF FF 7F FF 
08b64     FF 29 0E F2 | 	cmp	local06, ##-1 wz
08b68     35 00 00 AF 
08b6c     08 E4 05 A1 |  if_e	add	objptr, ##27144
08b70     F2 28 02 AB |  if_e	rdlong	local06, objptr
08b74     35 00 00 AF 
08b78     08 E4 85 A1 |  if_e	sub	objptr, ##27144
08b7c     78 00 90 AD |  if_e	jmp	#LR__0803
08b80     00 12 06 F6 | 	mov	arg01, #0
08b84     40 D8 B1 FD | 	call	#__system___getiolock_0540
08b88     FD 12 02 F6 | 	mov	arg01, result1
08b8c     D4 7D B1 FD | 	call	#__system___lockmem
08b90     83 01 00 FF 
08b94     C1 15 06 F6 | 	mov	arg02, ##@LR__5415
08b98     00 12 06 F6 | 	mov	arg01, #0
08b9c     00 16 06 F6 | 	mov	arg03, #0
08ba0     B4 8A B1 FD | 	call	#__system___basic_print_string
08ba4     51 00 00 FF 
08ba8     C4 E5 05 F1 | 	add	objptr, ##41924
08bac     F2 14 02 FB | 	rdlong	arg02, objptr
08bb0     51 00 00 FF 
08bb4     C4 E5 85 F1 | 	sub	objptr, ##41924
08bb8     00 12 06 F6 | 	mov	arg01, #0
08bbc     00 16 06 F6 | 	mov	arg03, #0
08bc0     0A 18 06 F6 | 	mov	arg04, #10
08bc4     14 8B B1 FD | 	call	#__system___basic_print_unsigned
08bc8     83 01 00 FF 
08bcc     CF 15 06 F6 | 	mov	arg02, ##@LR__5416
08bd0     00 12 06 F6 | 	mov	arg01, #0
08bd4     00 16 06 F6 | 	mov	arg03, #0
08bd8     7C 8A B1 FD | 	call	#__system___basic_print_string
08bdc     00 12 06 F6 | 	mov	arg01, #0
08be0     0A 14 06 F6 | 	mov	arg02, #10
08be4     00 16 06 F6 | 	mov	arg03, #0
08be8     14 8A B1 FD | 	call	#__system___basic_print_char
08bec     00 12 06 F6 | 	mov	arg01, #0
08bf0     D4 D7 B1 FD | 	call	#__system___getiolock_0540
08bf4     FD 00 68 FC | 	wrlong	#0, result1
08bf8                 | LR__0803
08bf8                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then return 43
08bf8     37 00 00 FF 
08bfc     44 E4 05 F1 | 	add	objptr, ##28228
08c00     F2 14 02 FB | 	rdlong	arg02, objptr
08c04     01 14 06 F1 | 	add	arg02, #1
08c08     03 14 66 F0 | 	shl	arg02, #3
08c0c     02 00 00 FF 
08c10     38 E4 85 F1 | 	sub	objptr, ##1080
08c14     F2 14 02 F1 | 	add	arg02, objptr
08c18     0A 13 02 FB | 	rdlong	arg01, arg02
08c1c     83 01 00 FF 
08c20     F0 15 06 F6 | 	mov	arg02, ##@LR__5417
08c24     35 00 00 FF 
08c28     0C E4 85 F1 | 	sub	objptr, ##27148
08c2c     5C 7D B1 FD | 	call	#__system___string_cmp
08c30     00 FA 0D F2 | 	cmp	result1, #0 wz
08c34     44 00 90 AD |  if_e	jmp	#LR__0804
08c38     37 00 00 FF 
08c3c     44 E4 05 F1 | 	add	objptr, ##28228
08c40     F2 2E 02 FB | 	rdlong	local09, objptr
08c44     01 2E 06 F1 | 	add	local09, #1
08c48     03 2E 66 F0 | 	shl	local09, #3
08c4c     02 00 00 FF 
08c50     38 E4 85 F1 | 	sub	objptr, ##1080
08c54     F2 2E 02 F1 | 	add	local09, objptr
08c58     17 13 02 FB | 	rdlong	arg01, local09
08c5c     83 01 00 FF 
08c60     F2 15 06 F6 | 	mov	arg02, ##@LR__5418
08c64     35 00 00 FF 
08c68     0C E4 85 F1 | 	sub	objptr, ##27148
08c6c     1C 7D B1 FD | 	call	#__system___string_cmp
08c70     00 FA 0D F2 | 	cmp	result1, #0 wz
08c74     2B FA 05 56 |  if_ne	mov	result1, #43
08c78     D8 04 90 5D |  if_ne	jmp	#LR__0825
08c7c                 | LR__0804
08c7c                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350	' allocate a typed array
08c7c     37 00 00 FF 
08c80     44 E4 05 F1 | 	add	objptr, ##28228
08c84     F2 14 02 FB | 	rdlong	arg02, objptr
08c88     01 14 06 F1 | 	add	arg02, #1
08c8c     03 14 66 F0 | 	shl	arg02, #3
08c90     02 00 00 FF 
08c94     38 E4 85 F1 | 	sub	objptr, ##1080
08c98     F2 14 02 F1 | 	add	arg02, objptr
08c9c     0A 13 02 FB | 	rdlong	arg01, arg02
08ca0     83 01 00 FF 
08ca4     F5 15 06 F6 | 	mov	arg02, ##@LR__5419
08ca8     35 00 00 FF 
08cac     0C E4 85 F1 | 	sub	objptr, ##27148
08cb0     D8 7C B1 FD | 	call	#__system___string_cmp
08cb4     00 FA 0D F2 | 	cmp	result1, #0 wz
08cb8     37 00 00 AF 
08cbc     44 E4 05 A1 |  if_e	add	objptr, ##28228
08cc0     F2 30 02 AB |  if_e	rdlong	local10, objptr
08cc4     37 00 00 AF 
08cc8     44 E4 85 A1 |  if_e	sub	objptr, ##28228
08ccc     01 30 06 A1 |  if_e	add	local10, #1
08cd0     5C 01 90 AD |  if_e	jmp	#LR__0809
08cd4     37 00 00 FF 
08cd8     44 E4 05 F1 | 	add	objptr, ##28228
08cdc     F2 30 02 FB | 	rdlong	local10, objptr
08ce0     37 00 00 FF 
08ce4     44 E4 85 F1 | 	sub	objptr, ##28228
08ce8     02 30 06 F1 | 	add	local10, #2
08cec     00 32 06 F6 | 	mov	local11, #0
08cf0                 | '   l=ct+2 : m=0 : do
08cf0                 | LR__0805
08cf0                 | '   if isdec(lparts(l).part$) then 
08cf0     18 25 02 F6 | 	mov	local04, local10
08cf4     03 24 66 F0 | 	shl	local04, #3
08cf8     35 00 00 FF 
08cfc     0C E4 05 F1 | 	add	objptr, ##27148
08d00     F2 24 02 F1 | 	add	local04, objptr
08d04     12 13 02 FB | 	rdlong	arg01, local04
08d08     35 00 00 FF 
08d0c     0C E4 85 F1 | 	sub	objptr, ##27148
08d10     F4 D6 BF FD | 	call	#_isdec
08d14     00 FA 0D F2 | 	cmp	result1, #0 wz
08d18     44 00 90 AD |  if_e	jmp	#LR__0806
08d1c     19 35 02 F6 | 	mov	local12, local11
08d20     0F 35 06 F1 | 	add	local12, #local01
08d24     18 2F 02 F6 | 	mov	local09, local10
08d28     03 2E 66 F0 | 	shl	local09, #3
08d2c     35 00 00 FF 
08d30     0C E4 05 F1 | 	add	objptr, ##27148
08d34     F2 2E 02 F1 | 	add	local09, objptr
08d38     17 13 02 FB | 	rdlong	arg01, local09
08d3c     00 14 06 F6 | 	mov	arg02, #0
08d40     35 00 00 FF 
08d44     0C E4 85 F1 | 	sub	objptr, ##27148
08d48     44 AE B1 FD | 	call	#__system____builtin_atoi
08d4c     FD 36 02 F6 | 	mov	local13, result1
08d50                 | 	'.live	local13
08d50                 | 	'.live	local12
08d50     00 34 8E F9 | 	altd	local12, #0
08d54     1B 35 02 F6 | 	mov	local12, local13
08d58     01 32 06 F1 | 	add	local11, #1
08d5c     08 00 90 FD | 	jmp	#LR__0807
08d60                 | LR__0806
08d60                 | '     return(17)
08d60     11 FA 05 F6 | 	mov	result1, #17
08d64     EC 03 90 FD | 	jmp	#LR__0825
08d68                 | LR__0807
08d68                 | '   if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then return 44 
08d68     18 25 02 F6 | 	mov	local04, local10
08d6c     01 24 06 F1 | 	add	local04, #1
08d70     03 24 66 F0 | 	shl	local04, #3
08d74     35 00 00 FF 
08d78     0C E4 05 F1 | 	add	objptr, ##27148
08d7c     F2 24 02 F1 | 	add	local04, objptr
08d80     12 13 02 FB | 	rdlong	arg01, local04
08d84     83 01 00 FF 
08d88     F8 15 06 F6 | 	mov	arg02, ##@LR__5420
08d8c     35 00 00 FF 
08d90     0C E4 85 F1 | 	sub	objptr, ##27148
08d94     F4 7B B1 FD | 	call	#__system___string_cmp
08d98     00 FA 0D F2 | 	cmp	result1, #0 wz
08d9c     3C 00 90 AD |  if_e	jmp	#LR__0808
08da0     18 37 02 F6 | 	mov	local13, local10
08da4     01 36 06 F1 | 	add	local13, #1
08da8     03 36 66 F0 | 	shl	local13, #3
08dac     35 00 00 FF 
08db0     0C E4 05 F1 | 	add	objptr, ##27148
08db4     F2 36 02 F1 | 	add	local13, objptr
08db8     1B 13 02 FB | 	rdlong	arg01, local13
08dbc     83 01 00 FF 
08dc0     FA 15 06 F6 | 	mov	arg02, ##@LR__5421
08dc4     35 00 00 FF 
08dc8     0C E4 85 F1 | 	sub	objptr, ##27148
08dcc     BC 7B B1 FD | 	call	#__system___string_cmp
08dd0     00 FA 0D F2 | 	cmp	result1, #0 wz
08dd4     2C FA 05 56 |  if_ne	mov	result1, #44
08dd8     78 03 90 5D |  if_ne	jmp	#LR__0825
08ddc                 | LR__0808
08ddc     02 30 06 F1 | 	add	local10, #2
08de0     18 25 02 F6 | 	mov	local04, local10
08de4     01 24 86 F1 | 	sub	local04, #1
08de8     03 24 66 F0 | 	shl	local04, #3
08dec     35 00 00 FF 
08df0     0C E4 05 F1 | 	add	objptr, ##27148
08df4     F2 24 02 F1 | 	add	local04, objptr
08df8     12 13 02 FB | 	rdlong	arg01, local04
08dfc     83 01 00 FF 
08e00     FC 15 06 F6 | 	mov	arg02, ##@LR__5422
08e04     35 00 00 FF 
08e08     0C E4 85 F1 | 	sub	objptr, ##27148
08e0c     7C 7B B1 FD | 	call	#__system___string_cmp
08e10     00 FA 0D F2 | 	cmp	result1, #0 wz
08e14     03 32 56 52 |  if_ne	cmps	local11, #3 wc
08e18     D4 FE 9F 4D |  if_c_and_nz	jmp	#LR__0805
08e1c                 | '   if m>3 then return 45
08e1c     04 32 56 F2 | 	cmps	local11, #4 wc
08e20     2D FA 05 36 |  if_ae	mov	result1, #45
08e24     2C 03 90 3D |  if_ae	jmp	#LR__0825
08e28     00 39 06 F6 | 	mov	local14, #256
08e2c     0C 3A 06 F6 | 	mov	local15, #12
08e30                 | LR__0809
08e30                 | '   arraytype=array_no_type : esize=12
08e30                 | ' 1350 
08e30                 | '   if lparts(l).part$="as" then
08e30     18 25 02 F6 | 	mov	local04, local10
08e34     03 24 66 F0 | 	shl	local04, #3
08e38     35 00 00 FF 
08e3c     0C E4 05 F1 | 	add	objptr, ##27148
08e40     F2 24 02 F1 | 	add	local04, objptr
08e44     12 13 02 FB | 	rdlong	arg01, local04
08e48     83 01 00 FF 
08e4c     FE 15 06 F6 | 	mov	arg02, ##@LR__5423
08e50     35 00 00 FF 
08e54     0C E4 85 F1 | 	sub	objptr, ##27148
08e58     30 7B B1 FD | 	call	#__system___string_cmp
08e5c     00 FA 0D F2 | 	cmp	result1, #0 wz
08e60     F0 01 90 5D |  if_ne	jmp	#LR__0824
08e64                 | '     select case lparts(l+1).part$
08e64     18 35 02 F6 | 	mov	local12, local10
08e68     01 34 06 F1 | 	add	local12, #1
08e6c     03 34 66 F0 | 	shl	local12, #3
08e70     35 00 00 FF 
08e74     0C E4 05 F1 | 	add	objptr, ##27148
08e78     F2 34 02 F1 | 	add	local12, objptr
08e7c     1A 3D 02 FB | 	rdlong	local16, local12
08e80     84 01 00 FF 
08e84     01 14 06 F6 | 	mov	arg02, ##@LR__5424
08e88     1E 13 02 F6 | 	mov	arg01, local16
08e8c     35 00 00 FF 
08e90     0C E4 85 F1 | 	sub	objptr, ##27148
08e94     F4 7A B1 FD | 	call	#__system___string_cmp
08e98     00 FA 0D F2 | 	cmp	result1, #0 wz
08e9c     0C 01 90 AD |  if_e	jmp	#LR__0810
08ea0     84 01 00 FF 
08ea4     06 14 06 F6 | 	mov	arg02, ##@LR__5425
08ea8     1E 13 02 F6 | 	mov	arg01, local16
08eac     DC 7A B1 FD | 	call	#__system___string_cmp
08eb0     00 FA 0D F2 | 	cmp	result1, #0 wz
08eb4     00 01 90 AD |  if_e	jmp	#LR__0811
08eb8     84 01 00 FF 
08ebc     0C 14 06 F6 | 	mov	arg02, ##@LR__5426
08ec0     1E 13 02 F6 | 	mov	arg01, local16
08ec4     C4 7A B1 FD | 	call	#__system___string_cmp
08ec8     00 FA 0D F2 | 	cmp	result1, #0 wz
08ecc     F4 00 90 AD |  if_e	jmp	#LR__0812
08ed0     84 01 00 FF 
08ed4     12 14 06 F6 | 	mov	arg02, ##@LR__5427
08ed8     1E 13 02 F6 | 	mov	arg01, local16
08edc     AC 7A B1 FD | 	call	#__system___string_cmp
08ee0     00 FA 0D F2 | 	cmp	result1, #0 wz
08ee4     E8 00 90 AD |  if_e	jmp	#LR__0813
08ee8     84 01 00 FF 
08eec     19 14 06 F6 | 	mov	arg02, ##@LR__5428
08ef0     1E 13 02 F6 | 	mov	arg01, local16
08ef4     94 7A B1 FD | 	call	#__system___string_cmp
08ef8     00 FA 0D F2 | 	cmp	result1, #0 wz
08efc     DC 00 90 AD |  if_e	jmp	#LR__0814
08f00     84 01 00 FF 
08f04     1E 14 06 F6 | 	mov	arg02, ##@LR__5429
08f08     1E 13 02 F6 | 	mov	arg01, local16
08f0c     7C 7A B1 FD | 	call	#__system___string_cmp
08f10     00 FA 0D F2 | 	cmp	result1, #0 wz
08f14     D0 00 90 AD |  if_e	jmp	#LR__0815
08f18     84 01 00 FF 
08f1c     26 14 06 F6 | 	mov	arg02, ##@LR__5430
08f20     1E 13 02 F6 | 	mov	arg01, local16
08f24     64 7A B1 FD | 	call	#__system___string_cmp
08f28     00 FA 0D F2 | 	cmp	result1, #0 wz
08f2c     C4 00 90 AD |  if_e	jmp	#LR__0816
08f30     84 01 00 FF 
08f34     2C 14 06 F6 | 	mov	arg02, ##@LR__5431
08f38     1E 13 02 F6 | 	mov	arg01, local16
08f3c     4C 7A B1 FD | 	call	#__system___string_cmp
08f40     00 FA 0D F2 | 	cmp	result1, #0 wz
08f44     B8 00 90 AD |  if_e	jmp	#LR__0817
08f48     84 01 00 FF 
08f4c     32 14 06 F6 | 	mov	arg02, ##@LR__5432
08f50     1E 13 02 F6 | 	mov	arg01, local16
08f54     34 7A B1 FD | 	call	#__system___string_cmp
08f58     00 FA 0D F2 | 	cmp	result1, #0 wz
08f5c     AC 00 90 AD |  if_e	jmp	#LR__0818
08f60     84 01 00 FF 
08f64     39 14 06 F6 | 	mov	arg02, ##@LR__5433
08f68     1E 13 02 F6 | 	mov	arg01, local16
08f6c     1C 7A B1 FD | 	call	#__system___string_cmp
08f70     00 FA 0D F2 | 	cmp	result1, #0 wz
08f74     A0 00 90 AD |  if_e	jmp	#LR__0819
08f78     84 01 00 FF 
08f7c     40 14 06 F6 | 	mov	arg02, ##@LR__5434
08f80     1E 13 02 F6 | 	mov	arg01, local16
08f84     04 7A B1 FD | 	call	#__system___string_cmp
08f88     00 FA 0D F2 | 	cmp	result1, #0 wz
08f8c     94 00 90 AD |  if_e	jmp	#LR__0820
08f90     84 01 00 FF 
08f94     47 14 06 F6 | 	mov	arg02, ##@LR__5435
08f98     1E 13 02 F6 | 	mov	arg01, local16
08f9c     EC 79 B1 FD | 	call	#__system___string_cmp
08fa0     00 FA 0D F2 | 	cmp	result1, #0 wz
08fa4     88 00 90 AD |  if_e	jmp	#LR__0821
08fa8     90 00 90 FD | 	jmp	#LR__0822
08fac                 | LR__0810
08fac     01 39 06 F6 | 	mov	local14, #257
08fb0     01 3A 06 F6 | 	mov	local15, #1
08fb4     9C 00 90 FD | 	jmp	#LR__0824
08fb8                 | LR__0811
08fb8     02 39 06 F6 | 	mov	local14, #258
08fbc     01 3A 06 F6 | 	mov	local15, #1
08fc0     90 00 90 FD | 	jmp	#LR__0824
08fc4                 | LR__0812
08fc4     03 39 06 F6 | 	mov	local14, #259
08fc8     02 3A 06 F6 | 	mov	local15, #2
08fcc     84 00 90 FD | 	jmp	#LR__0824
08fd0                 | LR__0813
08fd0     04 39 06 F6 | 	mov	local14, #260
08fd4     02 3A 06 F6 | 	mov	local15, #2
08fd8     78 00 90 FD | 	jmp	#LR__0824
08fdc                 | LR__0814
08fdc     05 39 06 F6 | 	mov	local14, #261
08fe0     04 3A 06 F6 | 	mov	local15, #4
08fe4     6C 00 90 FD | 	jmp	#LR__0824
08fe8                 | LR__0815
08fe8     05 39 06 F6 | 	mov	local14, #261
08fec     04 3A 06 F6 | 	mov	local15, #4
08ff0     60 00 90 FD | 	jmp	#LR__0824
08ff4                 | LR__0816
08ff4     06 39 06 F6 | 	mov	local14, #262
08ff8     04 3A 06 F6 | 	mov	local15, #4
08ffc     54 00 90 FD | 	jmp	#LR__0824
09000                 | LR__0817
09000     07 39 06 F6 | 	mov	local14, #263
09004     08 3A 06 F6 | 	mov	local15, #8
09008     48 00 90 FD | 	jmp	#LR__0824
0900c                 | LR__0818
0900c     08 39 06 F6 | 	mov	local14, #264
09010     08 3A 06 F6 | 	mov	local15, #8
09014     3C 00 90 FD | 	jmp	#LR__0824
09018                 | LR__0819
09018     09 39 06 F6 | 	mov	local14, #265
0901c     04 3A 06 F6 | 	mov	local15, #4
09020     30 00 90 FD | 	jmp	#LR__0824
09024                 | LR__0820
09024     0A 39 06 F6 | 	mov	local14, #266
09028     08 3A 06 F6 | 	mov	local15, #8
0902c     24 00 90 FD | 	jmp	#LR__0824
09030                 | LR__0821
09030     0B 39 06 F6 | 	mov	local14, #267
09034     04 3A 06 F6 | 	mov	local15, #4
09038     18 00 90 FD | 	jmp	#LR__0824
0903c                 | LR__0822
0903c     2F 12 06 F6 | 	mov	arg01, #47
09040     90 43 B1 FD | 	call	#_printerror
09044     2F FA 05 F6 | 	mov	result1, #47
09048     08 01 90 FD | 	jmp	#LR__0825
0904c                 | LR__0823
0904c                 | '   return 46
0904c     2E FA 05 F6 | 	mov	result1, #46
09050     00 01 90 FD | 	jmp	#LR__0825
09054                 | LR__0824
09054     0F 3B 02 FD | 	qmul	local15, local01
09058     18 2A 62 FD | 	getqx	local07
0905c     10 2B 02 FD | 	qmul	local07, local02
09060     18 3C 62 FD | 	getqx	local16
09064     11 3D 02 FD | 	qmul	local16, local03
09068     51 00 00 FF 
0906c     AC E5 05 F1 | 	add	objptr, ##41900
09070     F2 3E 02 FB | 	rdlong	local17, objptr
09074     1C 15 02 F6 | 	mov	arg02, local14
09078     18 3C 62 FD | 	getqx	local16
0907c     1E 3F 82 F1 | 	sub	local17, local16
09080     10 3E 86 F1 | 	sub	local17, #16
09084     0F 3E 26 F5 | 	andn	local17, #15
09088     F2 3E 62 FC | 	wrlong	local17, objptr
0908c     51 00 00 FF 
09090     AC E5 85 F1 | 	sub	objptr, ##41900
09094     1F 13 02 F6 | 	mov	arg01, local17
09098     E4 44 B1 FD | 	call	#_psdpoke
0909c     1F 13 02 F6 | 	mov	arg01, local17
090a0     02 12 06 F1 | 	add	arg01, #2
090a4     1D 15 02 F6 | 	mov	arg02, local15
090a8     D4 44 B1 FD | 	call	#_psdpoke
090ac     1F 13 02 F6 | 	mov	arg01, local17
090b0     04 12 06 F1 | 	add	arg01, #4
090b4     0F 15 02 F6 | 	mov	arg02, local01
090b8     7C 44 B1 FD | 	call	#_pslpoke
090bc     1F 13 02 F6 | 	mov	arg01, local17
090c0     08 12 06 F1 | 	add	arg01, #8
090c4     10 15 02 F6 | 	mov	arg02, local02
090c8     6C 44 B1 FD | 	call	#_pslpoke
090cc     1F 13 02 F6 | 	mov	arg01, local17
090d0     0C 12 06 F1 | 	add	arg01, #12
090d4     11 15 02 F6 | 	mov	arg02, local03
090d8     5C 44 B1 FD | 	call	#_pslpoke
090dc     14 35 02 F6 | 	mov	local12, local06
090e0     04 34 66 F0 | 	shl	local12, #4
090e4     14 00 00 FF 
090e8     F8 E5 05 F1 | 	add	objptr, ##10744
090ec     F2 34 02 F1 | 	add	local12, objptr
090f0     1A 27 62 FC | 	wrlong	local05, local12
090f4     14 35 02 F6 | 	mov	local12, local06
090f8     04 34 66 F0 | 	shl	local12, #4
090fc     F2 34 02 F1 | 	add	local12, objptr
09100     04 34 06 F1 | 	add	local12, #4
09104     1A 3F 62 FC | 	wrlong	local17, local12
09108     14 35 02 F6 | 	mov	local12, local06
0910c     04 34 66 F0 | 	shl	local12, #4
09110     F2 34 02 F1 | 	add	local12, objptr
09114     0C 34 06 F1 | 	add	local12, #12
09118     1A 39 62 FC | 	wrlong	local14, local12
0911c                 | ' memtop=arrayptr
0911c                 | ' psdpoke arrayptr,arraytype 
0911c                 | ' psdpoke arrayptr+2,esize 
0911c                 | ' pslpoke arrayptr+4,dims(0)
0911c                 | ' pslpoke arrayptr+8,dims(1)
0911c                 | ' pslpoke arrayptr+12,dims(2)
0911c                 | ' variables(j).name=varname2$
0911c                 | ' variables(j).value.uresult=arrayptr
0911c                 | ' variables(j).vartype=arraytype
0911c                 | ' if j=varnum then varnum+=1
0911c     20 00 00 FF 
09120     10 E4 05 F1 | 	add	objptr, ##16400
09124     F2 2A 02 FB | 	rdlong	local07, objptr
09128     35 00 00 FF 
0912c     08 E4 85 F1 | 	sub	objptr, ##27144
09130     15 29 0A F2 | 	cmp	local06, local07 wz
09134     35 00 00 AF 
09138     08 E4 05 A1 |  if_e	add	objptr, ##27144
0913c     F2 2A 02 AB |  if_e	rdlong	local07, objptr
09140     01 2A 06 A1 |  if_e	add	local07, #1
09144     F2 2A 62 AC |  if_e	wrlong	local07, objptr
09148     35 00 00 AF 
0914c     08 E4 85 A1 |  if_e	sub	objptr, ##27144
09150                 | ' return 0
09150     00 FA 05 F6 | 	mov	result1, #0
09154                 | LR__0825
09154     A7 F0 03 F6 | 	mov	ptra, fp
09158     B2 00 A0 FD | 	call	#popregs_
0915c                 | _compile_dim_ret
0915c     2D 00 64 FD | 	ret
09160                 | 
09160                 | ' 
09160                 | ' '----- compile 'for' command. 
09160                 | ' 
09160                 | ' function compile_for() as ulong  
09160                 | _compile_for
09160     05 4A 05 F6 | 	mov	COUNT_, #5
09164     A8 00 A0 FD | 	call	#pushregs_
09168                 | ' 
09168                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else return 32
09168     37 00 00 FF 
0916c     44 E4 05 F1 | 	add	objptr, ##28228
09170     F2 14 02 FB | 	rdlong	arg02, objptr
09174     01 14 06 F1 | 	add	arg02, #1
09178     03 14 66 F0 | 	shl	arg02, #3
0917c     02 00 00 FF 
09180     38 E4 85 F1 | 	sub	objptr, ##1080
09184     F2 14 02 F1 | 	add	arg02, objptr
09188     0A 13 02 FB | 	rdlong	arg01, arg02
0918c     35 00 00 FF 
09190     0C E4 85 F1 | 	sub	objptr, ##27148
09194                 | ' 
09194                 | ' select case s
09194     81 01 00 FF 
09198     B2 15 06 F6 | 	mov	arg02, ##@LR__5183
0919c     EC 77 B1 FD | 	call	#__system___string_cmp
091a0     00 FA 0D F2 | 	cmp	result1, #0 wz
091a4     1B FA 05 A6 |  if_e	mov	result1, #27
091a8     00 FA 05 56 |  if_ne	mov	result1, #0
091ac     00 FA 0D F2 | 	cmp	result1, #0 wz
091b0     0C 00 90 AD |  if_e	jmp	#LR__0830
091b4     05 12 06 F6 | 	mov	arg01, #5
091b8     F0 E3 BF FD | 	call	#_compile_immediate_assign
091bc     08 00 90 FD | 	jmp	#LR__0831
091c0                 | LR__0830
091c0     20 FA 05 F6 | 	mov	result1, #32
091c4     D0 02 90 FD | 	jmp	#LR__0835
091c8                 | LR__0831
091c8     4A 00 00 FF 
091cc     7C E4 05 F1 | 	add	objptr, ##38012
091d0     F2 14 02 FB | 	rdlong	arg02, objptr
091d4     0A 13 02 F6 | 	mov	arg01, arg02
091d8     01 12 86 F1 | 	sub	arg01, #1
091dc     09 25 02 F6 | 	mov	local04, arg01
091e0     01 24 66 F0 | 	shl	local04, #1
091e4     09 25 02 F1 | 	add	local04, arg01
091e8     02 24 66 F0 | 	shl	local04, #2
091ec     03 00 00 FF 
091f0     00 E4 85 F1 | 	sub	objptr, ##1536
091f4     F2 24 02 F1 | 	add	local04, objptr
091f8     12 1F 02 FB | 	rdlong	local01, local04
091fc     04 24 06 F1 | 	add	local04, #4
09200     12 25 02 FB | 	rdlong	local04, local04
09204     01 14 86 F1 | 	sub	arg02, #1
09208     0A 13 02 F6 | 	mov	arg01, arg02
0920c     01 12 66 F0 | 	shl	arg01, #1
09210     0A 13 02 F1 | 	add	arg01, arg02
09214     02 12 66 F0 | 	shl	arg01, #2
09218     F2 12 02 F1 | 	add	arg01, objptr
0921c     08 12 06 F1 | 	add	arg01, #8
09220     09 15 02 FB | 	rdlong	arg02, arg01
09224     12 21 02 F6 | 	mov	local02, local04
09228     0A 23 02 F6 | 	mov	local03, arg02
0922c                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then  return 34'		' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
0922c     17 22 0E F2 | 	cmp	local03, #23 wz
09230     47 00 00 FF 
09234     7C E4 85 F1 | 	sub	objptr, ##36476
09238     22 FA 05 56 |  if_ne	mov	result1, #34
0923c     58 02 90 5D |  if_ne	jmp	#LR__0835
09240     0F 27 02 F6 | 	mov	local05, local01
09244                 | ' varnum=t1.result.uresult
09244                 | ' if lparts(ct).part$<>"to" then return 33
09244     37 00 00 FF 
09248     44 E4 05 F1 | 	add	objptr, ##28228
0924c     F2 1E 02 FB | 	rdlong	local01, objptr
09250     03 1E 66 F0 | 	shl	local01, #3
09254     02 00 00 FF 
09258     38 E4 85 F1 | 	sub	objptr, ##1080
0925c     F2 1E 02 F1 | 	add	local01, objptr
09260     0F 13 02 FB | 	rdlong	arg01, local01
09264     84 01 00 FF 
09268     4E 14 06 F6 | 	mov	arg02, ##@LR__5436
0926c     35 00 00 FF 
09270     0C E4 85 F1 | 	sub	objptr, ##27148
09274     14 77 B1 FD | 	call	#__system___string_cmp
09278     00 FA 0D F2 | 	cmp	result1, #0 wz
0927c     21 FA 05 56 |  if_ne	mov	result1, #33
09280     14 02 90 5D |  if_ne	jmp	#LR__0835
09284     37 00 00 FF 
09288     44 E4 05 F1 | 	add	objptr, ##28228
0928c     F2 24 02 FB | 	rdlong	local04, objptr
09290     01 24 06 F1 | 	add	local04, #1
09294     F2 24 62 FC | 	wrlong	local04, objptr
09298     37 00 00 FF 
0929c     44 E4 85 F1 | 	sub	objptr, ##28228
092a0     EC 07 B0 FD | 	call	#_expr
092a4                 | ' ct+=1
092a4                 | ' expr()  										' there is "to" value pushed on the stack
092a4                 | ' if lparts(ct).part$="step" orelse lparts(ct).part$="s." then
092a4     37 00 00 FF 
092a8     44 E4 05 F1 | 	add	objptr, ##28228
092ac     F2 24 02 FB | 	rdlong	local04, objptr
092b0     03 24 66 F0 | 	shl	local04, #3
092b4     02 00 00 FF 
092b8     38 E4 85 F1 | 	sub	objptr, ##1080
092bc     F2 24 02 F1 | 	add	local04, objptr
092c0     12 13 02 FB | 	rdlong	arg01, local04
092c4     84 01 00 FF 
092c8     51 14 06 F6 | 	mov	arg02, ##@LR__5437
092cc     35 00 00 FF 
092d0     0C E4 85 F1 | 	sub	objptr, ##27148
092d4     B4 76 B1 FD | 	call	#__system___string_cmp
092d8     00 FA 0D F2 | 	cmp	result1, #0 wz
092dc     3C 00 90 AD |  if_e	jmp	#LR__0832
092e0     37 00 00 FF 
092e4     44 E4 05 F1 | 	add	objptr, ##28228
092e8     F2 24 02 FB | 	rdlong	local04, objptr
092ec     03 24 66 F0 | 	shl	local04, #3
092f0     02 00 00 FF 
092f4     38 E4 85 F1 | 	sub	objptr, ##1080
092f8     F2 24 02 F1 | 	add	local04, objptr
092fc     12 13 02 FB | 	rdlong	arg01, local04
09300     84 01 00 FF 
09304     56 14 06 F6 | 	mov	arg02, ##@LR__5438
09308     35 00 00 FF 
0930c     0C E4 85 F1 | 	sub	objptr, ##27148
09310     78 76 B1 FD | 	call	#__system___string_cmp
09314     00 FA 0D F2 | 	cmp	result1, #0 wz
09318     24 00 90 5D |  if_ne	jmp	#LR__0833
0931c                 | LR__0832
0931c     37 00 00 FF 
09320     44 E4 05 F1 | 	add	objptr, ##28228
09324     F2 1E 02 FB | 	rdlong	local01, objptr
09328     01 1E 06 F1 | 	add	local01, #1
0932c     F2 1E 62 FC | 	wrlong	local01, objptr
09330     37 00 00 FF 
09334     44 E4 85 F1 | 	sub	objptr, ##28228
09338     54 07 B0 FD | 	call	#_expr
0933c     78 00 90 FD | 	jmp	#LR__0834
09340                 | LR__0833
09340     4A 00 00 FF 
09344     7C E4 05 F1 | 	add	objptr, ##38012
09348     F2 1E 02 FB | 	rdlong	local01, objptr
0934c     0F 25 02 F6 | 	mov	local04, local01
09350     01 24 66 F0 | 	shl	local04, #1
09354     0F 25 02 F1 | 	add	local04, local01
09358     02 24 66 F0 | 	shl	local04, #2
0935c     03 00 00 FF 
09360     00 E4 85 F1 | 	sub	objptr, ##1536
09364     F2 24 02 F1 | 	add	local04, objptr
09368     08 24 06 F1 | 	add	local04, #8
0936c     12 39 68 FC | 	wrlong	#28, local04
09370     03 00 00 FF 
09374     00 E4 05 F1 | 	add	objptr, ##1536
09378     F2 1E 02 FB | 	rdlong	local01, objptr
0937c     0F 25 02 F6 | 	mov	local04, local01
09380     01 24 66 F0 | 	shl	local04, #1
09384     0F 25 02 F1 | 	add	local04, local01
09388     02 24 66 F0 | 	shl	local04, #2
0938c     03 00 00 FF 
09390     00 E4 85 F1 | 	sub	objptr, ##1536
09394     F2 24 02 F1 | 	add	local04, objptr
09398     12 03 68 FC | 	wrlong	#1, local04
0939c     03 00 00 FF 
093a0     00 E4 05 F1 | 	add	objptr, ##1536
093a4     F2 1E 02 FB | 	rdlong	local01, objptr
093a8     01 1E 06 F1 | 	add	local01, #1
093ac     F2 1E 62 FC | 	wrlong	local01, objptr
093b0     4A 00 00 FF 
093b4     7C E4 85 F1 | 	sub	objptr, ##38012
093b8                 | LR__0834
093b8     4A 00 00 FF 
093bc     7C E4 05 F1 | 	add	objptr, ##38012
093c0     F2 1E 02 FB | 	rdlong	local01, objptr
093c4     0F 25 02 F6 | 	mov	local04, local01
093c8     01 24 66 F0 | 	shl	local04, #1
093cc     0F 25 02 F1 | 	add	local04, local01
093d0     02 24 66 F0 | 	shl	local04, #2
093d4     03 00 00 FF 
093d8     00 E4 85 F1 | 	sub	objptr, ##1536
093dc     F2 24 02 F1 | 	add	local04, objptr
093e0     08 24 06 F1 | 	add	local04, #8
093e4     12 39 68 FC | 	wrlong	#28, local04
093e8     03 00 00 FF 
093ec     00 E4 05 F1 | 	add	objptr, ##1536
093f0     F2 1E 02 FB | 	rdlong	local01, objptr
093f4     0F 25 02 F6 | 	mov	local04, local01
093f8     01 24 66 F0 | 	shl	local04, #1
093fc     0F 25 02 F1 | 	add	local04, local01
09400     02 24 66 F0 | 	shl	local04, #2
09404     03 00 00 FF 
09408     00 E4 85 F1 | 	sub	objptr, ##1536
0940c     F2 24 02 F1 | 	add	local04, objptr
09410     12 27 62 FC | 	wrlong	local05, local04
09414     03 00 00 FF 
09418     00 E4 05 F1 | 	add	objptr, ##1536
0941c     F2 26 02 FB | 	rdlong	local05, objptr
09420     01 26 06 F1 | 	add	local05, #1
09424     F2 26 62 FC | 	wrlong	local05, objptr
09428     13 1F 02 F6 | 	mov	local01, local05
0942c     01 1E 66 F0 | 	shl	local01, #1
09430     13 1F 02 F1 | 	add	local01, local05
09434     02 1E 66 F0 | 	shl	local01, #2
09438     03 00 00 FF 
0943c     00 E4 85 F1 | 	sub	objptr, ##1536
09440     F2 1E 02 F1 | 	add	local01, objptr
09444     08 1E 06 F1 | 	add	local01, #8
09448     0F 95 68 FC | 	wrlong	#74, local01
0944c     03 00 00 FF 
09450     00 E4 05 F1 | 	add	objptr, ##1536
09454     F2 26 02 FB | 	rdlong	local05, objptr
09458     13 1F 02 F6 | 	mov	local01, local05
0945c     01 1E 66 F0 | 	shl	local01, #1
09460     13 1F 02 F1 | 	add	local01, local05
09464     02 1E 66 F0 | 	shl	local01, #2
09468     03 00 00 FF 
0946c     00 E4 85 F1 | 	sub	objptr, ##1536
09470     F2 1E 02 F1 | 	add	local01, objptr
09474     0F 01 68 FC | 	wrlong	#0, local01
09478     03 00 00 FF 
0947c     00 E4 05 F1 | 	add	objptr, ##1536
09480     F2 26 02 FB | 	rdlong	local05, objptr
09484     01 26 06 F1 | 	add	local05, #1
09488     F2 26 62 FC | 	wrlong	local05, objptr
0948c     4A 00 00 FF 
09490     7C E4 85 F1 | 	sub	objptr, ##38012
09494                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
09494                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
09494                 | ' return 0
09494     00 FA 05 F6 | 	mov	result1, #0
09498                 | LR__0835
09498     A7 F0 03 F6 | 	mov	ptra, fp
0949c     B2 00 A0 FD | 	call	#popregs_
094a0                 | _compile_for_ret
094a0     2D 00 64 FD | 	ret
094a4                 | 
094a4                 | ' 
094a4                 | ' '----- compile 'next' command. 
094a4                 | ' 
094a4                 | ' function compile_next() as ulong
094a4                 | _compile_next
094a4     04 4A 05 F6 | 	mov	COUNT_, #4
094a8     A8 00 A0 FD | 	call	#pushregs_
094ac     37 00 00 FF 
094b0     44 E4 05 F1 | 	add	objptr, ##28228
094b4     F2 14 02 FB | 	rdlong	arg02, objptr
094b8     03 14 66 F0 | 	shl	arg02, #3
094bc     02 00 00 FF 
094c0     38 E4 85 F1 | 	sub	objptr, ##1080
094c4     F2 14 02 F1 | 	add	arg02, objptr
094c8     0A 1F 02 FB | 	rdlong	local01, arg02
094cc                 | ' 
094cc                 | ' varname$=lparts(ct).part$ 
094cc                 | ' if varnum=0 then return 35
094cc     04 E4 85 F1 | 	sub	objptr, #4
094d0     F2 14 0A FB | 	rdlong	arg02, objptr wz
094d4     35 00 00 FF 
094d8     08 E4 85 F1 | 	sub	objptr, ##27144
094dc     23 FA 05 A6 |  if_e	mov	result1, #35
094e0     4C 01 90 AD |  if_e	jmp	#LR__0842
094e4     01 20 66 F6 | 	neg	local02, #1
094e8                 | ' j=-1
094e8                 | ' for i=0 to varnum-1
094e8     00 22 06 F6 | 	mov	local03, #0
094ec     35 00 00 FF 
094f0     08 E4 05 F1 | 	add	objptr, ##27144
094f4     F2 24 02 FB | 	rdlong	local04, objptr
094f8     35 00 00 FF 
094fc     08 E4 85 F1 | 	sub	objptr, ##27144
09500                 | LR__0840
09500     12 23 12 F2 | 	cmp	local03, local04 wc
09504     38 00 90 3D |  if_ae	jmp	#LR__0841
09508                 | '   if variables(i).name=varname$ then j=i : exit
09508     11 15 02 F6 | 	mov	arg02, local03
0950c     04 14 66 F0 | 	shl	arg02, #4
09510     14 00 00 FF 
09514     F8 E5 05 F1 | 	add	objptr, ##10744
09518     F2 14 02 F1 | 	add	arg02, objptr
0951c     0A 13 02 FB | 	rdlong	arg01, arg02
09520     0F 15 02 F6 | 	mov	arg02, local01
09524     14 00 00 FF 
09528     F8 E5 85 F1 | 	sub	objptr, ##10744
0952c     5C 74 B1 FD | 	call	#__system___string_cmp
09530     00 FA 0D F2 | 	cmp	result1, #0 wz
09534     11 21 02 A6 |  if_e	mov	local02, local03
09538     01 22 06 51 |  if_ne	add	local03, #1
0953c     C0 FF 9F 5D |  if_ne	jmp	#LR__0840
09540                 | LR__0841
09540                 | ' if j=-1 then return 35
09540     FF FF 7F FF 
09544     FF 21 0E F2 | 	cmp	local02, ##-1 wz
09548     23 FA 05 A6 |  if_e	mov	result1, #35
0954c     E0 00 90 AD |  if_e	jmp	#LR__0842
09550     4A 00 00 FF 
09554     7C E4 05 F1 | 	add	objptr, ##38012
09558     F2 24 02 FB | 	rdlong	local04, objptr
0955c     12 23 02 F6 | 	mov	local03, local04
09560     01 22 66 F0 | 	shl	local03, #1
09564     12 23 02 F1 | 	add	local03, local04
09568     02 22 66 F0 | 	shl	local03, #2
0956c     03 00 00 FF 
09570     00 E4 85 F1 | 	sub	objptr, ##1536
09574     F2 22 02 F1 | 	add	local03, objptr
09578     08 22 06 F1 | 	add	local03, #8
0957c     11 39 68 FC | 	wrlong	#28, local03
09580     03 00 00 FF 
09584     00 E4 05 F1 | 	add	objptr, ##1536
09588     F2 24 02 FB | 	rdlong	local04, objptr
0958c     12 23 02 F6 | 	mov	local03, local04
09590     01 22 66 F0 | 	shl	local03, #1
09594     12 23 02 F1 | 	add	local03, local04
09598     02 22 66 F0 | 	shl	local03, #2
0959c     03 00 00 FF 
095a0     00 E4 85 F1 | 	sub	objptr, ##1536
095a4     F2 22 02 F1 | 	add	local03, objptr
095a8     11 21 62 FC | 	wrlong	local02, local03
095ac     03 00 00 FF 
095b0     00 E4 05 F1 | 	add	objptr, ##1536
095b4     F2 24 02 FB | 	rdlong	local04, objptr
095b8     01 24 06 F1 | 	add	local04, #1
095bc     F2 24 62 FC | 	wrlong	local04, objptr
095c0     12 23 02 F6 | 	mov	local03, local04
095c4     01 22 66 F0 | 	shl	local03, #1
095c8     12 23 02 F1 | 	add	local03, local04
095cc     02 22 66 F0 | 	shl	local03, #2
095d0     03 00 00 FF 
095d4     00 E4 85 F1 | 	sub	objptr, ##1536
095d8     F2 22 02 F1 | 	add	local03, objptr
095dc     08 22 06 F1 | 	add	local03, #8
095e0     11 97 68 FC | 	wrlong	#75, local03
095e4     03 00 00 FF 
095e8     00 E4 05 F1 | 	add	objptr, ##1536
095ec     F2 24 02 FB | 	rdlong	local04, objptr
095f0     12 23 02 F6 | 	mov	local03, local04
095f4     01 22 66 F0 | 	shl	local03, #1
095f8     12 23 02 F1 | 	add	local03, local04
095fc     02 22 66 F0 | 	shl	local03, #2
09600     03 00 00 FF 
09604     00 E4 85 F1 | 	sub	objptr, ##1536
09608     F2 22 02 F1 | 	add	local03, objptr
0960c     11 01 68 FC | 	wrlong	#0, local03
09610     03 00 00 FF 
09614     00 E4 05 F1 | 	add	objptr, ##1536
09618     F2 24 02 FB | 	rdlong	local04, objptr
0961c     01 24 06 F1 | 	add	local04, #1
09620     F2 24 62 FC | 	wrlong	local04, objptr
09624     4A 00 00 FF 
09628     7C E4 85 F1 | 	sub	objptr, ##38012
0962c                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
0962c                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
0962c                 | ' return 0
0962c     00 FA 05 F6 | 	mov	result1, #0
09630                 | LR__0842
09630     A7 F0 03 F6 | 	mov	ptra, fp
09634     B2 00 A0 FD | 	call	#popregs_
09638                 | _compile_next_ret
09638     2D 00 64 FD | 	ret
0963c                 | 
0963c                 | ' 
0963c                 | ' '----- compile 'gosub' command. Gosub is "goto" that saves the return address, so add token_gosub, then compile goto
0963c                 | ' 
0963c                 | ' function compile_gosub() as ulong
0963c                 | _compile_gosub
0963c     02 4A 05 F6 | 	mov	COUNT_, #2
09640     A8 00 A0 FD | 	call	#pushregs_
09644     4A 00 00 FF 
09648     7C E4 05 F1 | 	add	objptr, ##38012
0964c     F2 1E 02 FB | 	rdlong	local01, objptr
09650     0F 21 02 F6 | 	mov	local02, local01
09654     01 20 66 F0 | 	shl	local02, #1
09658     0F 21 02 F1 | 	add	local02, local01
0965c     02 20 66 F0 | 	shl	local02, #2
09660     03 00 00 FF 
09664     00 E4 85 F1 | 	sub	objptr, ##1536
09668     F2 20 02 F1 | 	add	local02, objptr
0966c     08 20 06 F1 | 	add	local02, #8
09670     10 53 69 FC | 	wrlong	#169, local02
09674     03 00 00 FF 
09678     00 E4 05 F1 | 	add	objptr, ##1536
0967c     F2 20 02 FB | 	rdlong	local02, objptr
09680     01 20 06 F1 | 	add	local02, #1
09684     F2 20 62 FC | 	wrlong	local02, objptr
09688     4A 00 00 FF 
0968c     7C E4 85 F1 | 	sub	objptr, ##38012
09690     0C 00 B0 FD | 	call	#_compile_goto
09694                 | ' compiledline(lineptr).result_type=token_gosub
09694                 | ' lineptr+=1
09694                 | ' err=compile_goto()
09694                 | ' return err
09694     A7 F0 03 F6 | 	mov	ptra, fp
09698     B2 00 A0 FD | 	call	#popregs_
0969c                 | _compile_gosub_ret
0969c     2D 00 64 FD | 	ret
096a0                 | 
096a0                 | ' 
096a0                 | ' '----- compile 'goto' 
096a0                 | ' 
096a0                 | ' function compile_goto( ) as ulong
096a0                 | _compile_goto
096a0     03 4A 05 F6 | 	mov	COUNT_, #3
096a4     A8 00 A0 FD | 	call	#pushregs_
096a8     34 F0 07 F1 | 	add	ptra, #52
096ac                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 	' we have a goto to a constant
096ac     37 00 00 FF 
096b0     44 E4 05 F1 | 	add	objptr, ##28228
096b4     F2 16 02 FB | 	rdlong	arg03, objptr
096b8     03 16 66 F0 | 	shl	arg03, #3
096bc     02 00 00 FF 
096c0     38 E4 85 F1 | 	sub	objptr, ##1080
096c4     F2 16 02 F1 | 	add	arg03, objptr
096c8     04 16 06 F1 | 	add	arg03, #4
096cc     0B 17 02 FB | 	rdlong	arg03, arg03
096d0     01 00 00 FF 
096d4     00 16 0E F2 | 	cmp	arg03, ##512 wz
096d8     35 00 00 FF 
096dc     0C E4 85 F1 | 	sub	objptr, ##27148
096e0     CC 02 90 5D |  if_ne	jmp	#LR__0855
096e4     37 00 00 FF 
096e8     44 E4 05 F1 | 	add	objptr, ##28228
096ec     F2 16 02 FB | 	rdlong	arg03, objptr
096f0     01 16 06 F1 | 	add	arg03, #1
096f4     03 16 66 F0 | 	shl	arg03, #3
096f8     02 00 00 FF 
096fc     38 E4 85 F1 | 	sub	objptr, ##1080
09700     F2 16 02 F1 | 	add	arg03, objptr
09704     04 16 06 F1 | 	add	arg03, #4
09708     0B 17 02 FB | 	rdlong	arg03, arg03
0970c     FE 17 0E F2 | 	cmp	arg03, #510 wz
09710     35 00 00 FF 
09714     0C E4 85 F1 | 	sub	objptr, ##27148
09718     94 02 90 5D |  if_ne	jmp	#LR__0855
0971c     37 00 00 FF 
09720     44 E4 05 F1 | 	add	objptr, ##28228
09724     F2 16 02 FB | 	rdlong	arg03, objptr
09728     03 16 66 F0 | 	shl	arg03, #3
0972c     02 00 00 FF 
09730     38 E4 85 F1 | 	sub	objptr, ##1080
09734     F2 16 02 F1 | 	add	arg03, objptr
09738     0B 13 02 FB | 	rdlong	arg01, arg03
0973c     00 14 06 F6 | 	mov	arg02, #0
09740     35 00 00 FF 
09744     0C E4 85 F1 | 	sub	objptr, ##27148
09748     44 A4 B1 FD | 	call	#__system____builtin_atoi
0974c     04 4E 05 F1 | 	add	fp, #4
09750     A7 FA 61 FC | 	wrlong	result1, fp
09754     4A 00 00 FF 
09758     7C E4 05 F1 | 	add	objptr, ##38012
0975c     F2 1E 02 FB | 	rdlong	local01, objptr
09760     0F 21 02 F6 | 	mov	local02, local01
09764     01 20 66 F0 | 	shl	local02, #1
09768     0F 21 02 F1 | 	add	local02, local01
0976c     02 20 66 F0 | 	shl	local02, #2
09770     03 00 00 FF 
09774     00 E4 85 F1 | 	sub	objptr, ##1536
09778     F2 20 02 F1 | 	add	local02, objptr
0977c     08 20 06 F1 | 	add	local02, #8
09780     10 9D 68 FC | 	wrlong	#78, local02
09784     03 00 00 FF 
09788     0C E4 05 F1 | 	add	objptr, ##1548
0978c     F2 22 02 FB | 	rdlong	local03, objptr
09790     4A 00 00 FF 
09794     88 E4 85 F1 | 	sub	objptr, ##38024
09798     04 4E 05 F1 | 	add	fp, #4
0979c     A7 22 62 FC | 	wrlong	local03, fp
097a0     08 4E 85 F1 | 	sub	fp, #8
097a4                 | '   gotoline=val%(lparts(ct).part$) 
097a4                 | '   compiledline(lineptr).result_type=token_fast_goto
097a4                 | '   gotoptr=programstart 							    	' now try to find a pointer to goto
097a4                 | '   do
097a4                 | LR__0850
097a4     10 4E 05 F1 | 	add	fp, #16
097a8     A7 12 02 F6 | 	mov	arg01, fp
097ac     08 4E 85 F1 | 	sub	fp, #8
097b0     A7 14 02 FB | 	rdlong	arg02, fp
097b4     08 4E 85 F1 | 	sub	fp, #8
097b8     18 16 06 F6 | 	mov	arg03, #24
097bc     0B 00 00 FF 
097c0     CC E4 05 F1 | 	add	objptr, ##5836
097c4     5C 65 B1 FD | 	call	#_psram_spin2_read1
097c8     0B 00 00 FF 
097cc     CC E4 85 F1 | 	sub	objptr, ##5836
097d0                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
097d0                 | '     if gotoheader(0)<>$FFFFFFFF then
097d0     10 4E 05 F1 | 	add	fp, #16
097d4     A7 22 02 FB | 	rdlong	local03, fp
097d8     10 4E 85 F1 | 	sub	fp, #16
097dc     FF FF 7F FF 
097e0     FF 23 0E F2 | 	cmp	local03, ##-1 wz
097e4     24 00 90 AD |  if_e	jmp	#LR__0851
097e8     08 4E 05 F1 | 	add	fp, #8
097ec     A7 22 02 FB | 	rdlong	local03, fp
097f0     04 4E 05 F1 | 	add	fp, #4
097f4     A7 22 62 FC | 	wrlong	local03, fp
097f8     18 4E 05 F1 | 	add	fp, #24
097fc     A7 22 02 FB | 	rdlong	local03, fp
09800     1C 4E 85 F1 | 	sub	fp, #28
09804     A7 22 62 FC | 	wrlong	local03, fp
09808     08 4E 85 F1 | 	sub	fp, #8
0980c                 | LR__0851
0980c     24 4E 05 F1 | 	add	fp, #36
09810     A7 22 02 FB | 	rdlong	local03, fp
09814     24 4E 85 F1 | 	sub	fp, #36
09818     FF FF 3F FF 
0981c     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
09820     10 4E 05 51 |  if_ne	add	fp, #16
09824     A7 1E 02 5B |  if_ne	rdlong	local01, fp
09828     10 4E 85 51 |  if_ne	sub	fp, #16
0982c     FF FF 7F 5F 
09830     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
09834     1C 00 90 AD |  if_e	jmp	#LR__0852
09838     10 4E 05 F1 | 	add	fp, #16
0983c     A7 22 02 FB | 	rdlong	local03, fp
09840     0C 4E 85 F1 | 	sub	fp, #12
09844     A7 20 02 FB | 	rdlong	local02, fp
09848     04 4E 85 F1 | 	sub	fp, #4
0984c     10 23 0A F2 | 	cmp	local03, local02 wz
09850     50 FF 9F 5D |  if_ne	jmp	#LR__0850
09854                 | LR__0852
09854                 | '   if gotoheader(0)=gotoline then
09854     10 4E 05 F1 | 	add	fp, #16
09858     A7 22 02 FB | 	rdlong	local03, fp
0985c     0C 4E 85 F1 | 	sub	fp, #12
09860     A7 1E 02 FB | 	rdlong	local01, fp
09864     04 4E 85 F1 | 	sub	fp, #4
09868     0F 23 0A F2 | 	cmp	local03, local01 wz
0986c     7C 00 90 5D |  if_ne	jmp	#LR__0853
09870     4A 00 00 FF 
09874     7C E4 05 F1 | 	add	objptr, ##38012
09878     F2 1E 02 FB | 	rdlong	local01, objptr
0987c     0F 21 02 F6 | 	mov	local02, local01
09880     01 20 66 F0 | 	shl	local02, #1
09884     0F 21 02 F1 | 	add	local02, local01
09888     02 20 66 F0 | 	shl	local02, #2
0988c     03 00 00 FF 
09890     00 E4 85 F1 | 	sub	objptr, ##1536
09894     F2 20 02 F1 | 	add	local02, objptr
09898     0C 4E 05 F1 | 	add	fp, #12
0989c     A7 22 02 FB | 	rdlong	local03, fp
098a0     10 23 62 FC | 	wrlong	local03, local02
098a4     03 00 00 FF 
098a8     00 E4 05 F1 | 	add	objptr, ##1536
098ac     F2 1E 02 FB | 	rdlong	local01, objptr
098b0     0F 21 02 F6 | 	mov	local02, local01
098b4     01 20 66 F0 | 	shl	local02, #1
098b8     0F 21 02 F1 | 	add	local02, local01
098bc     02 20 66 F0 | 	shl	local02, #2
098c0     03 00 00 FF 
098c4     00 E4 85 F1 | 	sub	objptr, ##1536
098c8     F2 20 02 F1 | 	add	local02, objptr
098cc     08 4E 85 F1 | 	sub	fp, #8
098d0     A7 22 02 FB | 	rdlong	local03, fp
098d4     04 4E 85 F1 | 	sub	fp, #4
098d8     04 20 06 F1 | 	add	local02, #4
098dc     10 23 62 FC | 	wrlong	local03, local02
098e0     47 00 00 FF 
098e4     7C E4 85 F1 | 	sub	objptr, ##36476
098e8     A4 00 90 FD | 	jmp	#LR__0854
098ec                 | LR__0853
098ec     4A 00 00 FF 
098f0     7C E4 05 F1 | 	add	objptr, ##38012
098f4     F2 1E 02 FB | 	rdlong	local01, objptr
098f8     0F 21 02 F6 | 	mov	local02, local01
098fc     01 20 66 F0 | 	shl	local02, #1
09900     0F 21 02 F1 | 	add	local02, local01
09904     02 20 66 F0 | 	shl	local02, #2
09908     03 00 00 FF 
0990c     00 E4 85 F1 | 	sub	objptr, ##1536
09910     F2 20 02 F1 | 	add	local02, objptr
09914     00 00 C0 FF 
09918     10 01 68 FC | 	wrlong	##-2147483648, local02
0991c     03 00 00 FF 
09920     00 E4 05 F1 | 	add	objptr, ##1536
09924     F2 1E 02 FB | 	rdlong	local01, objptr
09928     0F 21 02 F6 | 	mov	local02, local01
0992c     01 20 66 F0 | 	shl	local02, #1
09930     0F 21 02 F1 | 	add	local02, local01
09934     02 20 66 F0 | 	shl	local02, #2
09938     03 00 00 FF 
0993c     00 E4 85 F1 | 	sub	objptr, ##1536
09940     F2 20 02 F1 | 	add	local02, objptr
09944     04 4E 05 F1 | 	add	fp, #4
09948     A7 22 02 FB | 	rdlong	local03, fp
0994c     04 4E 85 F1 | 	sub	fp, #4
09950     04 20 06 F1 | 	add	local02, #4
09954     10 23 62 FC | 	wrlong	local03, local02
09958     03 00 00 FF 
0995c     00 E4 05 F1 | 	add	objptr, ##1536
09960     F2 1E 02 FB | 	rdlong	local01, objptr
09964     0F 21 02 F6 | 	mov	local02, local01
09968     01 20 66 F0 | 	shl	local02, #1
0996c     0F 21 02 F1 | 	add	local02, local01
09970     02 20 66 F0 | 	shl	local02, #2
09974     03 00 00 FF 
09978     00 E4 85 F1 | 	sub	objptr, ##1536
0997c     F2 20 02 F1 | 	add	local02, objptr
09980     08 20 06 F1 | 	add	local02, #8
09984     10 A7 68 FC | 	wrlong	#83, local02
09988     47 00 00 FF 
0998c     7C E4 85 F1 | 	sub	objptr, ##36476
09990                 | LR__0854
09990     4A 00 00 FF 
09994     7C E4 05 F1 | 	add	objptr, ##38012
09998     F2 22 02 FB | 	rdlong	local03, objptr
0999c     01 22 06 F1 | 	add	local03, #1
099a0     F2 22 62 FC | 	wrlong	local03, objptr
099a4     4A 00 00 FF 
099a8     7C E4 85 F1 | 	sub	objptr, ##38012
099ac     D0 00 90 FD | 	jmp	#LR__0856
099b0                 | LR__0855
099b0     DC 00 B0 FD | 	call	#_expr
099b4     30 4E 05 F1 | 	add	fp, #48
099b8     A7 9E 68 FC | 	wrlong	#79, fp
099bc     08 4E 85 F1 | 	sub	fp, #8
099c0     A7 00 68 FC | 	wrlong	#0, fp
099c4     04 4E 05 F1 | 	add	fp, #4
099c8     A7 22 02 FB | 	rdlong	local03, fp
099cc     04 4E 05 F1 | 	add	fp, #4
099d0     A7 1E 02 FB | 	rdlong	local01, fp
099d4     30 4E 85 F1 | 	sub	fp, #48
099d8     4A 00 00 FF 
099dc     7C E4 05 F1 | 	add	objptr, ##38012
099e0     F2 20 02 FB | 	rdlong	local02, objptr
099e4     10 17 02 F6 | 	mov	arg03, local02
099e8     01 16 66 F0 | 	shl	arg03, #1
099ec     10 17 02 F1 | 	add	arg03, local02
099f0     02 16 66 F0 | 	shl	arg03, #2
099f4     03 00 00 FF 
099f8     00 E4 85 F1 | 	sub	objptr, ##1536
099fc     F2 16 02 F1 | 	add	arg03, objptr
09a00     0B 01 68 FC | 	wrlong	#0, arg03
09a04     03 00 00 FF 
09a08     00 E4 05 F1 | 	add	objptr, ##1536
09a0c     F2 20 02 FB | 	rdlong	local02, objptr
09a10     10 17 02 F6 | 	mov	arg03, local02
09a14     01 16 66 F0 | 	shl	arg03, #1
09a18     10 17 02 F1 | 	add	arg03, local02
09a1c     02 16 66 F0 | 	shl	arg03, #2
09a20     03 00 00 FF 
09a24     00 E4 85 F1 | 	sub	objptr, ##1536
09a28     F2 16 02 F1 | 	add	arg03, objptr
09a2c     04 16 06 F1 | 	add	arg03, #4
09a30     0B 23 62 FC | 	wrlong	local03, arg03
09a34     03 00 00 FF 
09a38     00 E4 05 F1 | 	add	objptr, ##1536
09a3c     F2 22 02 FB | 	rdlong	local03, objptr
09a40     11 21 02 F6 | 	mov	local02, local03
09a44     01 20 66 F0 | 	shl	local02, #1
09a48     11 21 02 F1 | 	add	local02, local03
09a4c     02 20 66 F0 | 	shl	local02, #2
09a50     03 00 00 FF 
09a54     00 E4 85 F1 | 	sub	objptr, ##1536
09a58     F2 20 02 F1 | 	add	local02, objptr
09a5c     08 20 06 F1 | 	add	local02, #8
09a60     10 1F 62 FC | 	wrlong	local01, local02
09a64     03 00 00 FF 
09a68     00 E4 05 F1 | 	add	objptr, ##1536
09a6c     F2 22 02 FB | 	rdlong	local03, objptr
09a70     01 22 06 F1 | 	add	local03, #1
09a74     F2 22 62 FC | 	wrlong	local03, objptr
09a78     4A 00 00 FF 
09a7c     7C E4 85 F1 | 	sub	objptr, ##38012
09a80                 | LR__0856
09a80                 | ' return 0
09a80     00 FA 05 F6 | 	mov	result1, #0
09a84     A7 F0 03 F6 | 	mov	ptra, fp
09a88     B2 00 A0 FD | 	call	#popregs_
09a8c                 | _compile_goto_ret
09a8c     2D 00 64 FD | 	ret
09a90                 | 
09a90                 | ' 
09a90                 | ' 
09a90                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
09a90                 | ' '------------------------------------------ The end of the precompiler  ----------------------------------------------------------------
09a90                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
09a90                 | ' 
09a90                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
09a90                 | ' '
09a90                 | ' '     			   	    COMPILE TIME EXPRESSION DECODER/EVALUATOR
09a90                 | ' '
09a90                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
09a90                 | ' 
09a90                 | ' function expr() as ulong 
09a90                 | _expr
09a90     07 4A 05 F6 | 	mov	COUNT_, #7
09a94     A8 00 A0 FD | 	call	#pushregs_
09a98                 | _expr_enter
09a98     37 00 00 FF 
09a9c     44 E4 05 F1 | 	add	objptr, ##28228
09aa0     F2 24 02 FB | 	rdlong	local04, objptr
09aa4     03 24 66 F0 | 	shl	local04, #3
09aa8     02 00 00 FF 
09aac     38 E4 85 F1 | 	sub	objptr, ##1080
09ab0     F2 24 02 F1 | 	add	local04, objptr
09ab4     04 24 06 F1 | 	add	local04, #4
09ab8     12 27 02 FB | 	rdlong	local05, local04
09abc                 | ' 
09abc                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
09abc     FE 27 0E F2 | 	cmp	local05, #510 wz
09ac0     35 00 00 FF 
09ac4     0C E4 85 F1 | 	sub	objptr, ##27148
09ac8     C4 00 90 5D |  if_ne	jmp	#LR__0860
09acc     1D 1E 06 F6 | 	mov	local01, #29
09ad0     FF 22 06 F6 | 	mov	local03, #255
09ad4     0F 29 02 F6 | 	mov	local06, local01
09ad8     10 2B 02 F6 | 	mov	local07, local02
09adc     11 1F 02 F6 | 	mov	local01, local03
09ae0     4A 00 00 FF 
09ae4     7C E4 05 F1 | 	add	objptr, ##38012
09ae8     F2 26 02 FB | 	rdlong	local05, objptr
09aec     13 25 02 F6 | 	mov	local04, local05
09af0     01 24 66 F0 | 	shl	local04, #1
09af4     13 25 02 F1 | 	add	local04, local05
09af8     02 24 66 F0 | 	shl	local04, #2
09afc     03 00 00 FF 
09b00     00 E4 85 F1 | 	sub	objptr, ##1536
09b04     F2 24 02 F1 | 	add	local04, objptr
09b08     12 29 62 FC | 	wrlong	local06, local04
09b0c     03 00 00 FF 
09b10     00 E4 05 F1 | 	add	objptr, ##1536
09b14     F2 28 02 FB | 	rdlong	local06, objptr
09b18     14 27 02 F6 | 	mov	local05, local06
09b1c     01 26 66 F0 | 	shl	local05, #1
09b20     14 27 02 F1 | 	add	local05, local06
09b24     02 26 66 F0 | 	shl	local05, #2
09b28     03 00 00 FF 
09b2c     00 E4 85 F1 | 	sub	objptr, ##1536
09b30     F2 26 02 F1 | 	add	local05, objptr
09b34     04 26 06 F1 | 	add	local05, #4
09b38     13 2B 62 FC | 	wrlong	local07, local05
09b3c     03 00 00 FF 
09b40     00 E4 05 F1 | 	add	objptr, ##1536
09b44     F2 2A 02 FB | 	rdlong	local07, objptr
09b48     15 29 02 F6 | 	mov	local06, local07
09b4c     01 28 66 F0 | 	shl	local06, #1
09b50     15 29 02 F1 | 	add	local06, local07
09b54     02 28 66 F0 | 	shl	local06, #2
09b58     03 00 00 FF 
09b5c     00 E4 85 F1 | 	sub	objptr, ##1536
09b60     F2 28 02 F1 | 	add	local06, objptr
09b64     08 28 06 F1 | 	add	local06, #8
09b68     14 1F 62 FC | 	wrlong	local01, local06
09b6c     03 00 00 FF 
09b70     00 E4 05 F1 | 	add	objptr, ##1536
09b74     F2 28 02 FB | 	rdlong	local06, objptr
09b78     01 28 06 F1 | 	add	local06, #1
09b7c     F2 28 62 FC | 	wrlong	local06, objptr
09b80     4A 00 00 FF 
09b84     7C E4 85 F1 | 	sub	objptr, ##38012
09b88     1D FA 05 F6 | 	mov	result1, #29
09b8c     64 01 90 FD | 	jmp	#LR__0863
09b90                 | LR__0860
09b90     00 1E 06 F6 | 	mov	local01, #0
09b94     68 01 B0 FD | 	call	#_addsub
09b98                 | ' t3.result.uresult=0
09b98                 | ' err=addsub()             			' call higher priority operator check. It will itself call muldiv, which then calls getval/getvar 
09b98                 | ' if err>0 then return err
09b98     01 FA 15 F2 | 	cmp	result1, #1 wc
09b9c     54 01 90 3D |  if_ae	jmp	#LR__0863
09ba0     37 00 00 FF 
09ba4     44 E4 05 F1 | 	add	objptr, ##28228
09ba8     F2 24 02 FB | 	rdlong	local04, objptr
09bac     03 24 66 F0 | 	shl	local04, #3
09bb0     02 00 00 FF 
09bb4     38 E4 85 F1 | 	sub	objptr, ##1080
09bb8     F2 24 02 F1 | 	add	local04, objptr
09bbc     04 24 06 F1 | 	add	local04, #4
09bc0     12 27 02 FB | 	rdlong	local05, local04
09bc4                 | ' op = lparts(ct).token				' Lowest priority : comparison operators
09bc4                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
09bc4     35 00 00 FF 
09bc8     0C E4 85 F1 | 	sub	objptr, ##27148
09bcc                 | LR__0861
09bcc     1B 26 0E F2 | 	cmp	local05, #27 wz
09bd0     0F 26 0E 52 |  if_ne	cmp	local05, #15 wz
09bd4     10 26 0E 52 |  if_ne	cmp	local05, #16 wz
09bd8     27 26 0E 52 |  if_ne	cmp	local05, #39 wz
09bdc     26 26 0E 52 |  if_ne	cmp	local05, #38 wz
09be0     2A 26 0E 52 |  if_ne	cmp	local05, #42 wz
09be4     08 01 90 5D |  if_ne	jmp	#LR__0862
09be8     37 00 00 FF 
09bec     44 E4 05 F1 | 	add	objptr, ##28228
09bf0     F2 28 02 FB | 	rdlong	local06, objptr
09bf4     01 28 06 F1 | 	add	local06, #1
09bf8     F2 28 62 FC | 	wrlong	local06, objptr
09bfc     37 00 00 FF 
09c00     44 E4 85 F1 | 	sub	objptr, ##28228
09c04     F8 00 B0 FD | 	call	#_addsub
09c08                 | '   ct+=1
09c08                 | '   err=addsub() : if err>0 then return err
09c08     01 FA 15 F2 | 	cmp	result1, #1 wc
09c0c     E4 00 90 3D |  if_ae	jmp	#LR__0863
09c10     13 23 02 F6 | 	mov	local03, local05
09c14     0F 29 02 F6 | 	mov	local06, local01
09c18     10 2B 02 F6 | 	mov	local07, local02
09c1c     11 27 02 F6 | 	mov	local05, local03
09c20     4A 00 00 FF 
09c24     7C E4 05 F1 | 	add	objptr, ##38012
09c28     F2 24 02 FB | 	rdlong	local04, objptr
09c2c     12 FB 01 F6 | 	mov	result1, local04
09c30     01 FA 65 F0 | 	shl	result1, #1
09c34     12 FB 01 F1 | 	add	result1, local04
09c38     02 FA 65 F0 | 	shl	result1, #2
09c3c     03 00 00 FF 
09c40     00 E4 85 F1 | 	sub	objptr, ##1536
09c44     F2 FA 01 F1 | 	add	result1, objptr
09c48     FD 28 62 FC | 	wrlong	local06, result1
09c4c     03 00 00 FF 
09c50     00 E4 05 F1 | 	add	objptr, ##1536
09c54     F2 28 02 FB | 	rdlong	local06, objptr
09c58     14 25 02 F6 | 	mov	local04, local06
09c5c     01 24 66 F0 | 	shl	local04, #1
09c60     14 25 02 F1 | 	add	local04, local06
09c64     02 24 66 F0 | 	shl	local04, #2
09c68     03 00 00 FF 
09c6c     00 E4 85 F1 | 	sub	objptr, ##1536
09c70     F2 24 02 F1 | 	add	local04, objptr
09c74     04 24 06 F1 | 	add	local04, #4
09c78     12 2B 62 FC | 	wrlong	local07, local04
09c7c     03 00 00 FF 
09c80     00 E4 05 F1 | 	add	objptr, ##1536
09c84     F2 2A 02 FB | 	rdlong	local07, objptr
09c88     15 29 02 F6 | 	mov	local06, local07
09c8c     01 28 66 F0 | 	shl	local06, #1
09c90     15 29 02 F1 | 	add	local06, local07
09c94     02 28 66 F0 | 	shl	local06, #2
09c98     03 00 00 FF 
09c9c     00 E4 85 F1 | 	sub	objptr, ##1536
09ca0     F2 28 02 F1 | 	add	local06, objptr
09ca4     08 28 06 F1 | 	add	local06, #8
09ca8     14 27 62 FC | 	wrlong	local05, local06
09cac     03 00 00 FF 
09cb0     00 E4 05 F1 | 	add	objptr, ##1536
09cb4     F2 28 02 FB | 	rdlong	local06, objptr
09cb8     01 28 06 F1 | 	add	local06, #1
09cbc     F2 28 62 FC | 	wrlong	local06, objptr
09cc0     13 00 00 FF 
09cc4     38 E4 85 F1 | 	sub	objptr, ##9784
09cc8     F2 24 02 FB | 	rdlong	local04, objptr
09ccc     03 24 66 F0 | 	shl	local04, #3
09cd0     02 00 00 FF 
09cd4     38 E4 85 F1 | 	sub	objptr, ##1080
09cd8     F2 24 02 F1 | 	add	local04, objptr
09cdc     04 24 06 F1 | 	add	local04, #4
09ce0     12 27 02 FB | 	rdlong	local05, local04
09ce4     35 00 00 FF 
09ce8     0C E4 85 F1 | 	sub	objptr, ##27148
09cec     DC FE 9F FD | 	jmp	#LR__0861
09cf0                 | LR__0862
09cf0                 | ' return 0  
09cf0     00 FA 05 F6 | 	mov	result1, #0
09cf4                 | LR__0863
09cf4     A7 F0 03 F6 | 	mov	ptra, fp
09cf8     B2 00 A0 FD | 	call	#popregs_
09cfc                 | _expr_ret
09cfc     2D 00 64 FD | 	ret
09d00                 | 
09d00                 | ' 
09d00                 | ' ' Second level operators : add, sub, logic
09d00                 | ' 
09d00                 | ' function addsub() as ulong
09d00                 | _addsub
09d00     07 4A 05 F6 | 	mov	COUNT_, #7
09d04     A8 00 A0 FD | 	call	#pushregs_
09d08                 | _addsub_enter
09d08     00 1E 06 F6 | 	mov	local01, #0
09d0c     60 01 B0 FD | 	call	#_muldiv
09d10                 | ' 
09d10                 | ' t3.result.uresult=0
09d10                 | ' err=muldiv() : if err>0 then return err           			 
09d10     01 FA 15 F2 | 	cmp	result1, #1 wc
09d14     4C 01 90 3D |  if_ae	jmp	#LR__0872
09d18     37 00 00 FF 
09d1c     44 E4 05 F1 | 	add	objptr, ##28228
09d20     F2 24 02 FB | 	rdlong	local04, objptr
09d24     03 24 66 F0 | 	shl	local04, #3
09d28     02 00 00 FF 
09d2c     38 E4 85 F1 | 	sub	objptr, ##1080
09d30     F2 24 02 F1 | 	add	local04, objptr
09d34     04 24 06 F1 | 	add	local04, #4
09d38     12 27 02 FB | 	rdlong	local05, local04
09d3c                 | ' op = lparts(ct).token				 
09d3c                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
09d3c     35 00 00 FF 
09d40     0C E4 85 F1 | 	sub	objptr, ##27148
09d44                 | LR__0870
09d44     01 26 0E F2 | 	cmp	local05, #1 wz
09d48     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
09d4c     07 26 0E 52 |  if_ne	cmp	local05, #7 wz
09d50     03 26 0E 52 |  if_ne	cmp	local05, #3 wz
09d54     08 01 90 5D |  if_ne	jmp	#LR__0871
09d58     37 00 00 FF 
09d5c     44 E4 05 F1 | 	add	objptr, ##28228
09d60     F2 24 02 FB | 	rdlong	local04, objptr
09d64     01 24 06 F1 | 	add	local04, #1
09d68     F2 24 62 FC | 	wrlong	local04, objptr
09d6c     37 00 00 FF 
09d70     44 E4 85 F1 | 	sub	objptr, ##28228
09d74     F8 00 B0 FD | 	call	#_muldiv
09d78                 | '   ct+=1
09d78                 | '   err=muldiv() : if err>0 then return err   
09d78     01 FA 15 F2 | 	cmp	result1, #1 wc
09d7c     E4 00 90 3D |  if_ae	jmp	#LR__0872
09d80     13 23 02 F6 | 	mov	local03, local05
09d84     0F 29 02 F6 | 	mov	local06, local01
09d88     10 2B 02 F6 | 	mov	local07, local02
09d8c     11 27 02 F6 | 	mov	local05, local03
09d90     4A 00 00 FF 
09d94     7C E4 05 F1 | 	add	objptr, ##38012
09d98     F2 24 02 FB | 	rdlong	local04, objptr
09d9c     12 FB 01 F6 | 	mov	result1, local04
09da0     01 FA 65 F0 | 	shl	result1, #1
09da4     12 FB 01 F1 | 	add	result1, local04
09da8     02 FA 65 F0 | 	shl	result1, #2
09dac     03 00 00 FF 
09db0     00 E4 85 F1 | 	sub	objptr, ##1536
09db4     F2 FA 01 F1 | 	add	result1, objptr
09db8     FD 28 62 FC | 	wrlong	local06, result1
09dbc     03 00 00 FF 
09dc0     00 E4 05 F1 | 	add	objptr, ##1536
09dc4     F2 28 02 FB | 	rdlong	local06, objptr
09dc8     14 25 02 F6 | 	mov	local04, local06
09dcc     01 24 66 F0 | 	shl	local04, #1
09dd0     14 25 02 F1 | 	add	local04, local06
09dd4     02 24 66 F0 | 	shl	local04, #2
09dd8     03 00 00 FF 
09ddc     00 E4 85 F1 | 	sub	objptr, ##1536
09de0     F2 24 02 F1 | 	add	local04, objptr
09de4     04 24 06 F1 | 	add	local04, #4
09de8     12 2B 62 FC | 	wrlong	local07, local04
09dec     03 00 00 FF 
09df0     00 E4 05 F1 | 	add	objptr, ##1536
09df4     F2 2A 02 FB | 	rdlong	local07, objptr
09df8     15 29 02 F6 | 	mov	local06, local07
09dfc     01 28 66 F0 | 	shl	local06, #1
09e00     15 29 02 F1 | 	add	local06, local07
09e04     02 28 66 F0 | 	shl	local06, #2
09e08     03 00 00 FF 
09e0c     00 E4 85 F1 | 	sub	objptr, ##1536
09e10     F2 28 02 F1 | 	add	local06, objptr
09e14     08 28 06 F1 | 	add	local06, #8
09e18     14 27 62 FC | 	wrlong	local05, local06
09e1c     03 00 00 FF 
09e20     00 E4 05 F1 | 	add	objptr, ##1536
09e24     F2 28 02 FB | 	rdlong	local06, objptr
09e28     01 28 06 F1 | 	add	local06, #1
09e2c     F2 28 62 FC | 	wrlong	local06, objptr
09e30     13 00 00 FF 
09e34     38 E4 85 F1 | 	sub	objptr, ##9784
09e38     F2 24 02 FB | 	rdlong	local04, objptr
09e3c     03 24 66 F0 | 	shl	local04, #3
09e40     02 00 00 FF 
09e44     38 E4 85 F1 | 	sub	objptr, ##1080
09e48     F2 24 02 F1 | 	add	local04, objptr
09e4c     04 24 06 F1 | 	add	local04, #4
09e50     12 27 02 FB | 	rdlong	local05, local04
09e54     35 00 00 FF 
09e58     0C E4 85 F1 | 	sub	objptr, ##27148
09e5c     E4 FE 9F FD | 	jmp	#LR__0870
09e60                 | LR__0871
09e60                 | ' return 0
09e60     00 FA 05 F6 | 	mov	result1, #0
09e64                 | LR__0872
09e64     A7 F0 03 F6 | 	mov	ptra, fp
09e68     B2 00 A0 FD | 	call	#popregs_
09e6c                 | _addsub_ret
09e6c     2D 00 64 FD | 	ret
09e70                 | 
09e70                 | ' 
09e70                 | ' ' Third level operators : mul,div,shift,power
09e70                 | ' 
09e70                 | ' function muldiv() as ulong
09e70                 | _muldiv
09e70     07 4A 05 F6 | 	mov	COUNT_, #7
09e74     A8 00 A0 FD | 	call	#pushregs_
09e78                 | _muldiv_enter
09e78     00 1E 06 F6 | 	mov	local01, #0
09e7c     6C 01 B0 FD | 	call	#_getvalue
09e80                 | ' 
09e80                 | ' t3.result.uresult=0
09e80                 | ' err=getvalue() : if err>0 then return err     
09e80     01 FA 15 F2 | 	cmp	result1, #1 wc
09e84     58 01 90 3D |  if_ae	jmp	#LR__0882
09e88     37 00 00 FF 
09e8c     44 E4 05 F1 | 	add	objptr, ##28228
09e90     F2 24 02 FB | 	rdlong	local04, objptr
09e94     03 24 66 F0 | 	shl	local04, #3
09e98     02 00 00 FF 
09e9c     38 E4 85 F1 | 	sub	objptr, ##1080
09ea0     F2 24 02 F1 | 	add	local04, objptr
09ea4     04 24 06 F1 | 	add	local04, #4
09ea8     12 27 02 FB | 	rdlong	local05, local04
09eac                 | ' op = lparts(ct).token
09eac                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
09eac     35 00 00 FF 
09eb0     0C E4 85 F1 | 	sub	objptr, ##27148
09eb4                 | LR__0880
09eb4     05 26 0E F2 | 	cmp	local05, #5 wz
09eb8     08 26 0E 52 |  if_ne	cmp	local05, #8 wz
09ebc     06 26 0E 52 |  if_ne	cmp	local05, #6 wz
09ec0     09 26 0E 52 |  if_ne	cmp	local05, #9 wz
09ec4     0A 26 0E 52 |  if_ne	cmp	local05, #10 wz
09ec8     0B 26 0E 52 |  if_ne	cmp	local05, #11 wz
09ecc     0C 26 0E 52 |  if_ne	cmp	local05, #12 wz
09ed0     08 01 90 5D |  if_ne	jmp	#LR__0881
09ed4     37 00 00 FF 
09ed8     44 E4 05 F1 | 	add	objptr, ##28228
09edc     F2 24 02 FB | 	rdlong	local04, objptr
09ee0     01 24 06 F1 | 	add	local04, #1
09ee4     F2 24 62 FC | 	wrlong	local04, objptr
09ee8     37 00 00 FF 
09eec     44 E4 85 F1 | 	sub	objptr, ##28228
09ef0     F8 00 B0 FD | 	call	#_getvalue
09ef4                 | '   ct+=1
09ef4                 | '   err=getvalue() :if err>0 then return err   
09ef4     01 FA 15 F2 | 	cmp	result1, #1 wc
09ef8     E4 00 90 3D |  if_ae	jmp	#LR__0882
09efc     13 23 02 F6 | 	mov	local03, local05
09f00     0F 29 02 F6 | 	mov	local06, local01
09f04     10 2B 02 F6 | 	mov	local07, local02
09f08     11 27 02 F6 | 	mov	local05, local03
09f0c     4A 00 00 FF 
09f10     7C E4 05 F1 | 	add	objptr, ##38012
09f14     F2 24 02 FB | 	rdlong	local04, objptr
09f18     12 FB 01 F6 | 	mov	result1, local04
09f1c     01 FA 65 F0 | 	shl	result1, #1
09f20     12 FB 01 F1 | 	add	result1, local04
09f24     02 FA 65 F0 | 	shl	result1, #2
09f28     03 00 00 FF 
09f2c     00 E4 85 F1 | 	sub	objptr, ##1536
09f30     F2 FA 01 F1 | 	add	result1, objptr
09f34     FD 28 62 FC | 	wrlong	local06, result1
09f38     03 00 00 FF 
09f3c     00 E4 05 F1 | 	add	objptr, ##1536
09f40     F2 28 02 FB | 	rdlong	local06, objptr
09f44     14 25 02 F6 | 	mov	local04, local06
09f48     01 24 66 F0 | 	shl	local04, #1
09f4c     14 25 02 F1 | 	add	local04, local06
09f50     02 24 66 F0 | 	shl	local04, #2
09f54     03 00 00 FF 
09f58     00 E4 85 F1 | 	sub	objptr, ##1536
09f5c     F2 24 02 F1 | 	add	local04, objptr
09f60     04 24 06 F1 | 	add	local04, #4
09f64     12 2B 62 FC | 	wrlong	local07, local04
09f68     03 00 00 FF 
09f6c     00 E4 05 F1 | 	add	objptr, ##1536
09f70     F2 2A 02 FB | 	rdlong	local07, objptr
09f74     15 29 02 F6 | 	mov	local06, local07
09f78     01 28 66 F0 | 	shl	local06, #1
09f7c     15 29 02 F1 | 	add	local06, local07
09f80     02 28 66 F0 | 	shl	local06, #2
09f84     03 00 00 FF 
09f88     00 E4 85 F1 | 	sub	objptr, ##1536
09f8c     F2 28 02 F1 | 	add	local06, objptr
09f90     08 28 06 F1 | 	add	local06, #8
09f94     14 27 62 FC | 	wrlong	local05, local06
09f98     03 00 00 FF 
09f9c     00 E4 05 F1 | 	add	objptr, ##1536
09fa0     F2 28 02 FB | 	rdlong	local06, objptr
09fa4     01 28 06 F1 | 	add	local06, #1
09fa8     F2 28 62 FC | 	wrlong	local06, objptr
09fac     13 00 00 FF 
09fb0     38 E4 85 F1 | 	sub	objptr, ##9784
09fb4     F2 24 02 FB | 	rdlong	local04, objptr
09fb8     03 24 66 F0 | 	shl	local04, #3
09fbc     02 00 00 FF 
09fc0     38 E4 85 F1 | 	sub	objptr, ##1080
09fc4     F2 24 02 F1 | 	add	local04, objptr
09fc8     04 24 06 F1 | 	add	local04, #4
09fcc     12 27 02 FB | 	rdlong	local05, local04
09fd0     35 00 00 FF 
09fd4     0C E4 85 F1 | 	sub	objptr, ##27148
09fd8     D8 FE 9F FD | 	jmp	#LR__0880
09fdc                 | LR__0881
09fdc                 | ' return 0
09fdc     00 FA 05 F6 | 	mov	result1, #0
09fe0                 | LR__0882
09fe0     A7 F0 03 F6 | 	mov	ptra, fp
09fe4     B2 00 A0 FD | 	call	#popregs_
09fe8                 | _muldiv_ret
09fe8     2D 00 64 FD | 	ret
09fec                 | 
09fec                 | ' 
09fec                 | ' ' Get a value for operations
09fec                 | ' 
09fec                 | ' function getvalue()  as ulong
09fec                 | _getvalue
09fec     0B 4A 05 F6 | 	mov	COUNT_, #11
09ff0     A8 00 A0 FD | 	call	#pushregs_
09ff4                 | _getvalue_enter
09ff4     01 24 06 F6 | 	mov	local04, #1
09ff8     00 1E 06 F6 | 	mov	local01, #0
09ffc     1D 22 06 F6 | 	mov	local03, #29
0a000     37 00 00 FF 
0a004     44 E4 05 F1 | 	add	objptr, ##28228
0a008     F2 16 02 FB | 	rdlong	arg03, objptr
0a00c     03 16 66 F0 | 	shl	arg03, #3
0a010     02 00 00 FF 
0a014     38 E4 85 F1 | 	sub	objptr, ##1080
0a018     F2 16 02 F1 | 	add	arg03, objptr
0a01c     04 16 06 F1 | 	add	arg03, #4
0a020     0B 27 02 FB | 	rdlong	local05, arg03
0a024                 | ' 
0a024                 | ' m=1											' for negative numbers
0a024                 | ' t1.result.uresult=0: t1.result_type=result_uint
0a024                 | ' op=lparts(ct).token
0a024                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token				' '-' operator found
0a024     02 26 0E F2 | 	cmp	local05, #2 wz
0a028     35 00 00 FF 
0a02c     0C E4 85 F1 | 	sub	objptr, ##27148
0a030     38 00 90 5D |  if_ne	jmp	#LR__0890
0a034     01 24 66 F6 | 	neg	local04, #1
0a038     37 00 00 FF 
0a03c     44 E4 05 F1 | 	add	objptr, ##28228
0a040     F2 26 02 FB | 	rdlong	local05, objptr
0a044     01 26 06 F1 | 	add	local05, #1
0a048     F2 26 62 FC | 	wrlong	local05, objptr
0a04c     03 26 66 F0 | 	shl	local05, #3
0a050     02 00 00 FF 
0a054     38 E4 85 F1 | 	sub	objptr, ##1080
0a058     F2 26 02 F1 | 	add	local05, objptr
0a05c     04 26 06 F1 | 	add	local05, #4
0a060     13 27 02 FB | 	rdlong	local05, local05
0a064     35 00 00 FF 
0a068     0C E4 85 F1 | 	sub	objptr, ##27148
0a06c                 | LR__0890
0a06c                 | ' select case op
0a06c     01 00 00 FF 
0a070     00 26 0E F2 | 	cmp	local05, ##512 wz
0a074     44 00 90 AD |  if_e	jmp	#LR__0891
0a078     01 00 00 FF 
0a07c     01 26 0E F2 | 	cmp	local05, ##513 wz
0a080     90 01 90 AD |  if_e	jmp	#LR__0894
0a084     01 00 00 FF 
0a088     02 26 0E F2 | 	cmp	local05, ##514 wz
0a08c     44 04 90 AD |  if_e	jmp	#LR__0901
0a090     01 00 00 FF 
0a094     03 26 0E F2 | 	cmp	local05, ##515 wz
0a098     A8 05 90 AD |  if_e	jmp	#LR__0904
0a09c     2C 26 0E F2 | 	cmp	local05, #44 wz
0a0a0     78 07 90 AD |  if_e	jmp	#LR__0909
0a0a4     01 00 00 FF 
0a0a8     04 26 0E F2 | 	cmp	local05, ##516 wz
0a0ac     70 08 90 AD |  if_e	jmp	#LR__0910
0a0b0     15 26 0E F2 | 	cmp	local05, #21 wz
0a0b4     98 08 90 AD |  if_e	jmp	#LR__0911
0a0b8     10 09 90 FD | 	jmp	#LR__0912
0a0bc                 | LR__0891
0a0bc                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_int  
0a0bc     01 24 0E F2 | 	cmp	local04, #1 wz
0a0c0     3C 00 90 5D |  if_ne	jmp	#LR__0892
0a0c4     37 00 00 FF 
0a0c8     44 E4 05 F1 | 	add	objptr, ##28228
0a0cc     F2 26 02 FB | 	rdlong	local05, objptr
0a0d0     03 26 66 F0 | 	shl	local05, #3
0a0d4     02 00 00 FF 
0a0d8     38 E4 85 F1 | 	sub	objptr, ##1080
0a0dc     F2 26 02 F1 | 	add	local05, objptr
0a0e0     13 13 02 FB | 	rdlong	arg01, local05
0a0e4     00 14 06 F6 | 	mov	arg02, #0
0a0e8     35 00 00 FF 
0a0ec     0C E4 85 F1 | 	sub	objptr, ##27148
0a0f0     9C 9A B1 FD | 	call	#__system____builtin_atoi
0a0f4     FD 24 02 FD | 	qmul	local04, result1
0a0f8     18 1E 62 FD | 	getqx	local01
0a0fc     1C 22 06 F6 | 	mov	local03, #28
0a100                 | LR__0892
0a100                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int 	' todo token_int64?
0a100     FF FF 7F FF 
0a104     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0a108     3C 00 90 5D |  if_ne	jmp	#LR__0893
0a10c     37 00 00 FF 
0a110     44 E4 05 F1 | 	add	objptr, ##28228
0a114     F2 26 02 FB | 	rdlong	local05, objptr
0a118     03 26 66 F0 | 	shl	local05, #3
0a11c     02 00 00 FF 
0a120     38 E4 85 F1 | 	sub	objptr, ##1080
0a124     F2 26 02 F1 | 	add	local05, objptr
0a128     13 13 02 FB | 	rdlong	arg01, local05
0a12c     00 14 06 F6 | 	mov	arg02, #0
0a130     35 00 00 FF 
0a134     0C E4 85 F1 | 	sub	objptr, ##27148
0a138     54 9A B1 FD | 	call	#__system____builtin_atoi
0a13c     FD 24 02 FD | 	qmul	local04, result1
0a140     18 1E 62 FD | 	getqx	local01
0a144     1C 22 06 F6 | 	mov	local03, #28
0a148                 | LR__0893
0a148     0F 29 02 F6 | 	mov	local06, local01
0a14c     10 2B 02 F6 | 	mov	local07, local02
0a150     11 27 02 F6 | 	mov	local05, local03
0a154     4A 00 00 FF 
0a158     7C E4 05 F1 | 	add	objptr, ##38012
0a15c     F2 1E 02 FB | 	rdlong	local01, objptr
0a160     0F 25 02 F6 | 	mov	local04, local01
0a164     01 24 66 F0 | 	shl	local04, #1
0a168     0F 25 02 F1 | 	add	local04, local01
0a16c     02 24 66 F0 | 	shl	local04, #2
0a170     03 00 00 FF 
0a174     00 E4 85 F1 | 	sub	objptr, ##1536
0a178     F2 24 02 F1 | 	add	local04, objptr
0a17c     12 29 62 FC | 	wrlong	local06, local04
0a180     03 00 00 FF 
0a184     00 E4 05 F1 | 	add	objptr, ##1536
0a188     F2 28 02 FB | 	rdlong	local06, objptr
0a18c     14 1F 02 F6 | 	mov	local01, local06
0a190     01 1E 66 F0 | 	shl	local01, #1
0a194     14 1F 02 F1 | 	add	local01, local06
0a198     02 1E 66 F0 | 	shl	local01, #2
0a19c     03 00 00 FF 
0a1a0     00 E4 85 F1 | 	sub	objptr, ##1536
0a1a4     F2 1E 02 F1 | 	add	local01, objptr
0a1a8     04 1E 06 F1 | 	add	local01, #4
0a1ac     0F 2B 62 FC | 	wrlong	local07, local01
0a1b0     03 00 00 FF 
0a1b4     00 E4 05 F1 | 	add	objptr, ##1536
0a1b8     F2 2A 02 FB | 	rdlong	local07, objptr
0a1bc     15 29 02 F6 | 	mov	local06, local07
0a1c0     01 28 66 F0 | 	shl	local06, #1
0a1c4     15 29 02 F1 | 	add	local06, local07
0a1c8     02 28 66 F0 | 	shl	local06, #2
0a1cc     03 00 00 FF 
0a1d0     00 E4 85 F1 | 	sub	objptr, ##1536
0a1d4     F2 28 02 F1 | 	add	local06, objptr
0a1d8     08 28 06 F1 | 	add	local06, #8
0a1dc     14 27 62 FC | 	wrlong	local05, local06
0a1e0     03 00 00 FF 
0a1e4     00 E4 05 F1 | 	add	objptr, ##1536
0a1e8     F2 28 02 FB | 	rdlong	local06, objptr
0a1ec     01 28 06 F1 | 	add	local06, #1
0a1f0     F2 28 62 FC | 	wrlong	local06, objptr
0a1f4     13 00 00 FF 
0a1f8     38 E4 85 F1 | 	sub	objptr, ##9784
0a1fc     F2 28 02 FB | 	rdlong	local06, objptr
0a200     01 28 06 F1 | 	add	local06, #1
0a204     F2 28 62 FC | 	wrlong	local06, objptr
0a208     37 00 00 FF 
0a20c     44 E4 85 F1 | 	sub	objptr, ##28228
0a210     E4 07 90 FD | 	jmp	#LR__0913
0a214                 | LR__0894
0a214                 | '     if left$(lparts(ct).part$,1)="$" then lparts(ct).part$="&h"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0a214     37 00 00 FF 
0a218     44 E4 05 F1 | 	add	objptr, ##28228
0a21c     F2 16 02 FB | 	rdlong	arg03, objptr
0a220     03 16 66 F0 | 	shl	arg03, #3
0a224     02 00 00 FF 
0a228     38 E4 85 F1 | 	sub	objptr, ##1080
0a22c     F2 16 02 F1 | 	add	arg03, objptr
0a230     0B 13 02 FB | 	rdlong	arg01, arg03
0a234     01 14 06 F6 | 	mov	arg02, #1
0a238     35 00 00 FF 
0a23c     0C E4 85 F1 | 	sub	objptr, ##27148
0a240     9C 87 B1 FD | 	call	#__system__Left_S
0a244     FD 12 02 F6 | 	mov	arg01, result1
0a248     84 01 00 FF 
0a24c     59 14 06 F6 | 	mov	arg02, ##@LR__5439
0a250     38 67 B1 FD | 	call	#__system___string_cmp
0a254     00 FA 0D F2 | 	cmp	result1, #0 wz
0a258     94 00 90 5D |  if_ne	jmp	#LR__0897
0a25c     37 00 00 FF 
0a260     44 E4 05 F1 | 	add	objptr, ##28228
0a264     F2 2A 02 FB | 	rdlong	local07, objptr
0a268     15 29 02 F6 | 	mov	local06, local07
0a26c     03 28 66 F0 | 	shl	local06, #3
0a270     02 00 00 FF 
0a274     38 E4 85 F1 | 	sub	objptr, ##1080
0a278     F2 28 02 F1 | 	add	local06, objptr
0a27c     84 01 00 FF 
0a280     5B 26 06 F6 | 	mov	local05, ##@LR__5440
0a284     03 2A 66 F0 | 	shl	local07, #3
0a288     F2 2A 02 F1 | 	add	local07, objptr
0a28c     15 2B 02 FB | 	rdlong	local07, local07
0a290     02 00 00 FF 
0a294     38 E4 05 F1 | 	add	objptr, ##1080
0a298     F2 1E 02 FB | 	rdlong	local01, objptr
0a29c     03 1E 66 F0 | 	shl	local01, #3
0a2a0     02 00 00 FF 
0a2a4     38 E4 85 F1 | 	sub	objptr, ##1080
0a2a8     F2 1E 02 F1 | 	add	local01, objptr
0a2ac     0F 13 02 FB | 	rdlong	arg01, local01
0a2b0     35 00 00 FF 
0a2b4     0C E4 85 F1 | 	sub	objptr, ##27148
0a2b8     09 2D 02 F6 | 	mov	local08, arg01
0a2bc     97 06 48 FB | 	callpa	#(@LR__0896-@LR__0895)>>2,fcache_load_ptr_
0a2c0                 | LR__0895
0a2c0     16 FB C9 FA | 	rdbyte	result1, local08 wz
0a2c4     01 2C 06 51 |  if_ne	add	local08, #1
0a2c8     F4 FF 9F 5D |  if_ne	jmp	#LR__0895
0a2cc                 | LR__0896
0a2cc     09 2D 82 F1 | 	sub	local08, arg01
0a2d0     16 15 02 F6 | 	mov	arg02, local08
0a2d4     01 14 86 F1 | 	sub	arg02, #1
0a2d8     15 13 02 F6 | 	mov	arg01, local07
0a2dc     88 87 B1 FD | 	call	#__system__Right_S
0a2e0     FD 14 02 F6 | 	mov	arg02, result1
0a2e4     13 13 02 F6 | 	mov	arg01, local05
0a2e8     D4 66 B1 FD | 	call	#__system___string_concat
0a2ec     14 FB 61 FC | 	wrlong	result1, local06
0a2f0                 | LR__0897
0a2f0                 | '     if left$(lparts(ct).part$,1)="%" then lparts(ct).part$="&b"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0a2f0     37 00 00 FF 
0a2f4     44 E4 05 F1 | 	add	objptr, ##28228
0a2f8     F2 16 02 FB | 	rdlong	arg03, objptr
0a2fc     03 16 66 F0 | 	shl	arg03, #3
0a300     02 00 00 FF 
0a304     38 E4 85 F1 | 	sub	objptr, ##1080
0a308     F2 16 02 F1 | 	add	arg03, objptr
0a30c     0B 13 02 FB | 	rdlong	arg01, arg03
0a310     01 14 06 F6 | 	mov	arg02, #1
0a314     35 00 00 FF 
0a318     0C E4 85 F1 | 	sub	objptr, ##27148
0a31c     C0 86 B1 FD | 	call	#__system__Left_S
0a320     FD 12 02 F6 | 	mov	arg01, result1
0a324     84 01 00 FF 
0a328     5E 14 06 F6 | 	mov	arg02, ##@LR__5441
0a32c     5C 66 B1 FD | 	call	#__system___string_cmp
0a330     00 FA 0D F2 | 	cmp	result1, #0 wz
0a334     94 00 90 5D |  if_ne	jmp	#LR__0900
0a338     37 00 00 FF 
0a33c     44 E4 05 F1 | 	add	objptr, ##28228
0a340     F2 2A 02 FB | 	rdlong	local07, objptr
0a344     15 29 02 F6 | 	mov	local06, local07
0a348     03 28 66 F0 | 	shl	local06, #3
0a34c     02 00 00 FF 
0a350     38 E4 85 F1 | 	sub	objptr, ##1080
0a354     F2 28 02 F1 | 	add	local06, objptr
0a358     84 01 00 FF 
0a35c     60 26 06 F6 | 	mov	local05, ##@LR__5442
0a360     03 2A 66 F0 | 	shl	local07, #3
0a364     F2 2A 02 F1 | 	add	local07, objptr
0a368     15 2B 02 FB | 	rdlong	local07, local07
0a36c     02 00 00 FF 
0a370     38 E4 05 F1 | 	add	objptr, ##1080
0a374     F2 1E 02 FB | 	rdlong	local01, objptr
0a378     03 1E 66 F0 | 	shl	local01, #3
0a37c     02 00 00 FF 
0a380     38 E4 85 F1 | 	sub	objptr, ##1080
0a384     F2 1E 02 F1 | 	add	local01, objptr
0a388     0F 13 02 FB | 	rdlong	arg01, local01
0a38c     35 00 00 FF 
0a390     0C E4 85 F1 | 	sub	objptr, ##27148
0a394     09 2D 02 F6 | 	mov	local08, arg01
0a398     97 06 48 FB | 	callpa	#(@LR__0899-@LR__0898)>>2,fcache_load_ptr_
0a39c                 | LR__0898
0a39c     16 FB C9 FA | 	rdbyte	result1, local08 wz
0a3a0     01 2C 06 51 |  if_ne	add	local08, #1
0a3a4     F4 FF 9F 5D |  if_ne	jmp	#LR__0898
0a3a8                 | LR__0899
0a3a8     09 2D 82 F1 | 	sub	local08, arg01
0a3ac     16 15 02 F6 | 	mov	arg02, local08
0a3b0     01 14 86 F1 | 	sub	arg02, #1
0a3b4     15 13 02 F6 | 	mov	arg01, local07
0a3b8     AC 86 B1 FD | 	call	#__system__Right_S
0a3bc     FD 14 02 F6 | 	mov	arg02, result1
0a3c0     13 13 02 F6 | 	mov	arg01, local05
0a3c4     F8 65 B1 FD | 	call	#__system___string_concat
0a3c8     14 FB 61 FC | 	wrlong	result1, local06
0a3cc                 | LR__0900
0a3cc     37 00 00 FF 
0a3d0     44 E4 05 F1 | 	add	objptr, ##28228
0a3d4     F2 28 02 FB | 	rdlong	local06, objptr
0a3d8     03 28 66 F0 | 	shl	local06, #3
0a3dc     02 00 00 FF 
0a3e0     38 E4 85 F1 | 	sub	objptr, ##1080
0a3e4     F2 28 02 F1 | 	add	local06, objptr
0a3e8     14 13 02 FB | 	rdlong	arg01, local06
0a3ec     00 14 06 F6 | 	mov	arg02, #0
0a3f0     35 00 00 FF 
0a3f4     0C E4 85 F1 | 	sub	objptr, ##27148
0a3f8     94 97 B1 FD | 	call	#__system____builtin_atoi
0a3fc     FD 24 02 FD | 	qmul	local04, result1
0a400     4A 00 00 FF 
0a404     7C E4 05 F1 | 	add	objptr, ##38012
0a408     F2 28 02 FB | 	rdlong	local06, objptr
0a40c     14 2F 02 F6 | 	mov	local09, local06
0a410     01 2E 66 F0 | 	shl	local09, #1
0a414     14 2F 02 F1 | 	add	local09, local06
0a418     02 2E 66 F0 | 	shl	local09, #2
0a41c     03 00 00 FF 
0a420     00 E4 85 F1 | 	sub	objptr, ##1536
0a424     F2 2E 02 F1 | 	add	local09, objptr
0a428     03 00 00 FF 
0a42c     00 E4 05 F1 | 	add	objptr, ##1536
0a430     18 1E 62 FD | 	getqx	local01
0a434     1C 22 06 F6 | 	mov	local03, #28
0a438     0F 29 02 F6 | 	mov	local06, local01
0a43c     10 2B 02 F6 | 	mov	local07, local02
0a440     17 29 62 FC | 	wrlong	local06, local09
0a444     11 2F 02 F6 | 	mov	local09, local03
0a448     F2 28 02 FB | 	rdlong	local06, objptr
0a44c     14 27 02 F6 | 	mov	local05, local06
0a450     01 26 66 F0 | 	shl	local05, #1
0a454     14 27 02 F1 | 	add	local05, local06
0a458     02 26 66 F0 | 	shl	local05, #2
0a45c     03 00 00 FF 
0a460     00 E4 85 F1 | 	sub	objptr, ##1536
0a464     F2 26 02 F1 | 	add	local05, objptr
0a468     04 26 06 F1 | 	add	local05, #4
0a46c     13 2B 62 FC | 	wrlong	local07, local05
0a470     03 00 00 FF 
0a474     00 E4 05 F1 | 	add	objptr, ##1536
0a478     F2 2A 02 FB | 	rdlong	local07, objptr
0a47c     15 29 02 F6 | 	mov	local06, local07
0a480     01 28 66 F0 | 	shl	local06, #1
0a484     15 29 02 F1 | 	add	local06, local07
0a488     02 28 66 F0 | 	shl	local06, #2
0a48c     03 00 00 FF 
0a490     00 E4 85 F1 | 	sub	objptr, ##1536
0a494     F2 28 02 F1 | 	add	local06, objptr
0a498     08 28 06 F1 | 	add	local06, #8
0a49c     14 2F 62 FC | 	wrlong	local09, local06
0a4a0     03 00 00 FF 
0a4a4     00 E4 05 F1 | 	add	objptr, ##1536
0a4a8     F2 28 02 FB | 	rdlong	local06, objptr
0a4ac     01 28 06 F1 | 	add	local06, #1
0a4b0     F2 28 62 FC | 	wrlong	local06, objptr
0a4b4     13 00 00 FF 
0a4b8     38 E4 85 F1 | 	sub	objptr, ##9784
0a4bc     F2 28 02 FB | 	rdlong	local06, objptr
0a4c0     01 28 06 F1 | 	add	local06, #1
0a4c4     F2 28 62 FC | 	wrlong	local06, objptr
0a4c8     37 00 00 FF 
0a4cc     44 E4 85 F1 | 	sub	objptr, ##28228
0a4d0     24 05 90 FD | 	jmp	#LR__0913
0a4d4                 | LR__0901
0a4d4                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
0a4d4     01 24 0E F2 | 	cmp	local04, #1 wz
0a4d8     48 00 90 5D |  if_ne	jmp	#LR__0902
0a4dc     00 C0 1F FF 
0a4e0     00 28 06 F6 | 	mov	local06, ##1065353216
0a4e4     37 00 00 FF 
0a4e8     44 E4 05 F1 | 	add	objptr, ##28228
0a4ec     F2 2E 02 FB | 	rdlong	local09, objptr
0a4f0     03 2E 66 F0 | 	shl	local09, #3
0a4f4     02 00 00 FF 
0a4f8     38 E4 85 F1 | 	sub	objptr, ##1080
0a4fc     F2 2E 02 F1 | 	add	local09, objptr
0a500     17 13 02 FB | 	rdlong	arg01, local09
0a504     35 00 00 FF 
0a508     0C E4 85 F1 | 	sub	objptr, ##27148
0a50c     14 98 B1 FD | 	call	#__system____builtin_atof
0a510     FD 14 02 F6 | 	mov	arg02, result1
0a514     14 13 02 F6 | 	mov	arg01, local06
0a518     FC 8F B1 FD | 	call	#__system___float_mul
0a51c     FD 1E 02 F6 | 	mov	local01, result1
0a520     1E 22 06 F6 | 	mov	local03, #30
0a524                 | LR__0902
0a524                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
0a524     FF FF 7F FF 
0a528     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0a52c     48 00 90 5D |  if_ne	jmp	#LR__0903
0a530     00 C0 5F FF 
0a534     00 28 06 F6 | 	mov	local06, ##-1082130432
0a538     37 00 00 FF 
0a53c     44 E4 05 F1 | 	add	objptr, ##28228
0a540     F2 2E 02 FB | 	rdlong	local09, objptr
0a544     03 2E 66 F0 | 	shl	local09, #3
0a548     02 00 00 FF 
0a54c     38 E4 85 F1 | 	sub	objptr, ##1080
0a550     F2 2E 02 F1 | 	add	local09, objptr
0a554     17 13 02 FB | 	rdlong	arg01, local09
0a558     35 00 00 FF 
0a55c     0C E4 85 F1 | 	sub	objptr, ##27148
0a560     C0 97 B1 FD | 	call	#__system____builtin_atof
0a564     FD 14 02 F6 | 	mov	arg02, result1
0a568     14 13 02 F6 | 	mov	arg01, local06
0a56c     A8 8F B1 FD | 	call	#__system___float_mul
0a570     FD 1E 02 F6 | 	mov	local01, result1
0a574     1E 22 06 F6 | 	mov	local03, #30
0a578                 | LR__0903
0a578     0F 29 02 F6 | 	mov	local06, local01
0a57c     10 2B 02 F6 | 	mov	local07, local02
0a580     11 27 02 F6 | 	mov	local05, local03
0a584     4A 00 00 FF 
0a588     7C E4 05 F1 | 	add	objptr, ##38012
0a58c     F2 1E 02 FB | 	rdlong	local01, objptr
0a590     0F 2F 02 F6 | 	mov	local09, local01
0a594     01 2E 66 F0 | 	shl	local09, #1
0a598     0F 2F 02 F1 | 	add	local09, local01
0a59c     02 2E 66 F0 | 	shl	local09, #2
0a5a0     03 00 00 FF 
0a5a4     00 E4 85 F1 | 	sub	objptr, ##1536
0a5a8     F2 2E 02 F1 | 	add	local09, objptr
0a5ac     17 29 62 FC | 	wrlong	local06, local09
0a5b0     03 00 00 FF 
0a5b4     00 E4 05 F1 | 	add	objptr, ##1536
0a5b8     F2 2E 02 FB | 	rdlong	local09, objptr
0a5bc     17 29 02 F6 | 	mov	local06, local09
0a5c0     01 28 66 F0 | 	shl	local06, #1
0a5c4     17 29 02 F1 | 	add	local06, local09
0a5c8     02 28 66 F0 | 	shl	local06, #2
0a5cc     03 00 00 FF 
0a5d0     00 E4 85 F1 | 	sub	objptr, ##1536
0a5d4     F2 28 02 F1 | 	add	local06, objptr
0a5d8     04 28 06 F1 | 	add	local06, #4
0a5dc     14 2B 62 FC | 	wrlong	local07, local06
0a5e0     03 00 00 FF 
0a5e4     00 E4 05 F1 | 	add	objptr, ##1536
0a5e8     F2 2E 02 FB | 	rdlong	local09, objptr
0a5ec     17 2B 02 F6 | 	mov	local07, local09
0a5f0     01 2A 66 F0 | 	shl	local07, #1
0a5f4     17 2B 02 F1 | 	add	local07, local09
0a5f8     02 2A 66 F0 | 	shl	local07, #2
0a5fc     03 00 00 FF 
0a600     00 E4 85 F1 | 	sub	objptr, ##1536
0a604     F2 2A 02 F1 | 	add	local07, objptr
0a608     08 2A 06 F1 | 	add	local07, #8
0a60c     15 27 62 FC | 	wrlong	local05, local07
0a610     03 00 00 FF 
0a614     00 E4 05 F1 | 	add	objptr, ##1536
0a618     F2 28 02 FB | 	rdlong	local06, objptr
0a61c     01 28 06 F1 | 	add	local06, #1
0a620     F2 28 62 FC | 	wrlong	local06, objptr
0a624     13 00 00 FF 
0a628     38 E4 85 F1 | 	sub	objptr, ##9784
0a62c     F2 28 02 FB | 	rdlong	local06, objptr
0a630     01 28 06 F1 | 	add	local06, #1
0a634     F2 28 62 FC | 	wrlong	local06, objptr
0a638     37 00 00 FF 
0a63c     44 E4 85 F1 | 	sub	objptr, ##28228
0a640     B4 03 90 FD | 	jmp	#LR__0913
0a644                 | LR__0904
0a644     37 00 00 FF 
0a648     44 E4 05 F1 | 	add	objptr, ##28228
0a64c     F2 16 02 FB | 	rdlong	arg03, objptr
0a650     03 16 66 F0 | 	shl	arg03, #3
0a654     02 00 00 FF 
0a658     38 E4 85 F1 | 	sub	objptr, ##1080
0a65c     F2 16 02 F1 | 	add	arg03, objptr
0a660     0B 13 02 FB | 	rdlong	arg01, arg03
0a664     35 00 00 FF 
0a668     0C E4 85 F1 | 	sub	objptr, ##27148
0a66c     09 2D 02 F6 | 	mov	local08, arg01
0a670     97 06 48 FB | 	callpa	#(@LR__0906-@LR__0905)>>2,fcache_load_ptr_
0a674                 | LR__0905
0a674     16 FB C9 FA | 	rdbyte	result1, local08 wz
0a678     01 2C 06 51 |  if_ne	add	local08, #1
0a67c     F4 FF 9F 5D |  if_ne	jmp	#LR__0905
0a680                 | LR__0906
0a680     09 2D 82 F1 | 	sub	local08, arg01
0a684     16 FB 01 F6 | 	mov	result1, local08
0a688     51 00 00 FF 
0a68c     F4 E5 05 F1 | 	add	objptr, ##41972
0a690     F2 FA 61 FC | 	wrlong	result1, objptr
0a694     48 E4 85 F1 | 	sub	objptr, #72
0a698     F2 12 02 FB | 	rdlong	arg01, objptr
0a69c     FD 12 82 F1 | 	sub	arg01, result1
0a6a0     04 12 86 F1 | 	sub	arg01, #4
0a6a4     03 12 26 F5 | 	andn	arg01, #3
0a6a8     F2 12 62 FC | 	wrlong	arg01, objptr
0a6ac     48 E4 05 F1 | 	add	objptr, #72
0a6b0     F2 14 02 FB | 	rdlong	arg02, objptr
0a6b4     51 00 00 FF 
0a6b8     F4 E5 85 F1 | 	sub	objptr, ##41972
0a6bc     78 2E B1 FD | 	call	#_pslpoke
0a6c0                 | '     pslpoke memtop,l
0a6c0                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
0a6c0     01 30 06 F6 | 	mov	local10, #1
0a6c4     51 00 00 FF 
0a6c8     F4 E5 05 F1 | 	add	objptr, ##41972
0a6cc     F2 32 02 FB | 	rdlong	local11, objptr
0a6d0     51 00 00 FF 
0a6d4     F4 E5 85 F1 | 	sub	objptr, ##41972
0a6d8     01 32 06 F1 | 	add	local11, #1
0a6dc                 | LR__0907
0a6dc     19 31 52 F2 | 	cmps	local10, local11 wc
0a6e0     5C 00 90 3D |  if_ae	jmp	#LR__0908
0a6e4     51 00 00 FF 
0a6e8     AC E5 05 F1 | 	add	objptr, ##41900
0a6ec     F2 2A 02 FB | 	rdlong	local07, objptr
0a6f0     03 2A 06 F1 | 	add	local07, #3
0a6f4     18 2B 02 F1 | 	add	local07, local10
0a6f8     1A 00 00 FF 
0a6fc     68 E5 85 F1 | 	sub	objptr, ##13672
0a700     F2 2E 02 FB | 	rdlong	local09, objptr
0a704     03 2E 66 F0 | 	shl	local09, #3
0a708     02 00 00 FF 
0a70c     38 E4 85 F1 | 	sub	objptr, ##1080
0a710     F2 2E 02 F1 | 	add	local09, objptr
0a714     17 13 02 FB | 	rdlong	arg01, local09
0a718     18 15 02 F6 | 	mov	arg02, local10
0a71c     01 16 06 F6 | 	mov	arg03, #1
0a720     35 00 00 FF 
0a724     0C E4 85 F1 | 	sub	objptr, ##27148
0a728     CC 83 B1 FD | 	call	#__system__Mid_S
0a72c     FD 14 C2 FA | 	rdbyte	arg02, result1
0a730     15 13 02 F6 | 	mov	arg01, local07
0a734     90 2E B1 FD | 	call	#_pspoke
0a738     01 30 06 F1 | 	add	local10, #1
0a73c     9C FF 9F FD | 	jmp	#LR__0907
0a740                 | LR__0908
0a740     51 00 00 FF 
0a744     AC E5 05 F1 | 	add	objptr, ##41900
0a748     F2 1E 02 FB | 	rdlong	local01, objptr
0a74c     2B 22 06 F6 | 	mov	local03, #43
0a750     0F 29 02 F6 | 	mov	local06, local01
0a754     10 2B 02 F6 | 	mov	local07, local02
0a758     11 33 02 F6 | 	mov	local11, local03
0a75c     07 00 00 FF 
0a760     30 E5 85 F1 | 	sub	objptr, ##3888
0a764     F2 30 02 FB | 	rdlong	local10, objptr
0a768     18 2F 02 F6 | 	mov	local09, local10
0a76c     01 2E 66 F0 | 	shl	local09, #1
0a770     18 2F 02 F1 | 	add	local09, local10
0a774     02 2E 66 F0 | 	shl	local09, #2
0a778     03 00 00 FF 
0a77c     00 E4 85 F1 | 	sub	objptr, ##1536
0a780     F2 2E 02 F1 | 	add	local09, objptr
0a784     17 29 62 FC | 	wrlong	local06, local09
0a788     03 00 00 FF 
0a78c     00 E4 05 F1 | 	add	objptr, ##1536
0a790     F2 30 02 FB | 	rdlong	local10, objptr
0a794     18 2F 02 F6 | 	mov	local09, local10
0a798     01 2E 66 F0 | 	shl	local09, #1
0a79c     18 2F 02 F1 | 	add	local09, local10
0a7a0     02 2E 66 F0 | 	shl	local09, #2
0a7a4     03 00 00 FF 
0a7a8     00 E4 85 F1 | 	sub	objptr, ##1536
0a7ac     F2 2E 02 F1 | 	add	local09, objptr
0a7b0     04 2E 06 F1 | 	add	local09, #4
0a7b4     17 2B 62 FC | 	wrlong	local07, local09
0a7b8     03 00 00 FF 
0a7bc     00 E4 05 F1 | 	add	objptr, ##1536
0a7c0     F2 30 02 FB | 	rdlong	local10, objptr
0a7c4     18 2F 02 F6 | 	mov	local09, local10
0a7c8     01 2E 66 F0 | 	shl	local09, #1
0a7cc     18 2F 02 F1 | 	add	local09, local10
0a7d0     02 2E 66 F0 | 	shl	local09, #2
0a7d4     03 00 00 FF 
0a7d8     00 E4 85 F1 | 	sub	objptr, ##1536
0a7dc     F2 2E 02 F1 | 	add	local09, objptr
0a7e0     08 2E 06 F1 | 	add	local09, #8
0a7e4     17 33 62 FC | 	wrlong	local11, local09
0a7e8     03 00 00 FF 
0a7ec     00 E4 05 F1 | 	add	objptr, ##1536
0a7f0     F2 28 02 FB | 	rdlong	local06, objptr
0a7f4     01 28 06 F1 | 	add	local06, #1
0a7f8     F2 28 62 FC | 	wrlong	local06, objptr
0a7fc     13 00 00 FF 
0a800     38 E4 85 F1 | 	sub	objptr, ##9784
0a804     F2 28 02 FB | 	rdlong	local06, objptr
0a808     01 28 06 F1 | 	add	local06, #1
0a80c     F2 28 62 FC | 	wrlong	local06, objptr
0a810     37 00 00 FF 
0a814     44 E4 85 F1 | 	sub	objptr, ##28228
0a818     DC 01 90 FD | 	jmp	#LR__0913
0a81c                 | LR__0909
0a81c     2C 22 06 F6 | 	mov	local03, #44
0a820     37 00 00 FF 
0a824     44 E4 05 F1 | 	add	objptr, ##28228
0a828     F2 28 02 FB | 	rdlong	local06, objptr
0a82c     03 28 66 F0 | 	shl	local06, #3
0a830     02 00 00 FF 
0a834     38 E4 85 F1 | 	sub	objptr, ##1080
0a838     F2 28 02 F1 | 	add	local06, objptr
0a83c     14 13 02 FB | 	rdlong	arg01, local06
0a840     00 14 06 F6 | 	mov	arg02, #0
0a844     35 00 00 FF 
0a848     0C E4 85 F1 | 	sub	objptr, ##27148
0a84c     40 93 B1 FD | 	call	#__system____builtin_atoi
0a850     FD 1E 02 F6 | 	mov	local01, result1
0a854     0F 29 02 F6 | 	mov	local06, local01
0a858     10 2B 02 F6 | 	mov	local07, local02
0a85c     11 33 02 F6 | 	mov	local11, local03
0a860     4A 00 00 FF 
0a864     7C E4 05 F1 | 	add	objptr, ##38012
0a868     F2 30 02 FB | 	rdlong	local10, objptr
0a86c     18 2F 02 F6 | 	mov	local09, local10
0a870     01 2E 66 F0 | 	shl	local09, #1
0a874     18 2F 02 F1 | 	add	local09, local10
0a878     02 2E 66 F0 | 	shl	local09, #2
0a87c     03 00 00 FF 
0a880     00 E4 85 F1 | 	sub	objptr, ##1536
0a884     F2 2E 02 F1 | 	add	local09, objptr
0a888     17 29 62 FC | 	wrlong	local06, local09
0a88c     03 00 00 FF 
0a890     00 E4 05 F1 | 	add	objptr, ##1536
0a894     F2 30 02 FB | 	rdlong	local10, objptr
0a898     18 2F 02 F6 | 	mov	local09, local10
0a89c     01 2E 66 F0 | 	shl	local09, #1
0a8a0     18 2F 02 F1 | 	add	local09, local10
0a8a4     02 2E 66 F0 | 	shl	local09, #2
0a8a8     03 00 00 FF 
0a8ac     00 E4 85 F1 | 	sub	objptr, ##1536
0a8b0     F2 2E 02 F1 | 	add	local09, objptr
0a8b4     04 2E 06 F1 | 	add	local09, #4
0a8b8     17 2B 62 FC | 	wrlong	local07, local09
0a8bc     03 00 00 FF 
0a8c0     00 E4 05 F1 | 	add	objptr, ##1536
0a8c4     F2 30 02 FB | 	rdlong	local10, objptr
0a8c8     18 2F 02 F6 | 	mov	local09, local10
0a8cc     01 2E 66 F0 | 	shl	local09, #1
0a8d0     18 2F 02 F1 | 	add	local09, local10
0a8d4     02 2E 66 F0 | 	shl	local09, #2
0a8d8     03 00 00 FF 
0a8dc     00 E4 85 F1 | 	sub	objptr, ##1536
0a8e0     F2 2E 02 F1 | 	add	local09, objptr
0a8e4     08 2E 06 F1 | 	add	local09, #8
0a8e8     17 33 62 FC | 	wrlong	local11, local09
0a8ec     03 00 00 FF 
0a8f0     00 E4 05 F1 | 	add	objptr, ##1536
0a8f4     F2 28 02 FB | 	rdlong	local06, objptr
0a8f8     01 28 06 F1 | 	add	local06, #1
0a8fc     F2 28 62 FC | 	wrlong	local06, objptr
0a900     13 00 00 FF 
0a904     38 E4 85 F1 | 	sub	objptr, ##9784
0a908     F2 28 02 FB | 	rdlong	local06, objptr
0a90c     01 28 06 F1 | 	add	local06, #1
0a910     F2 28 62 FC | 	wrlong	local06, objptr
0a914     37 00 00 FF 
0a918     44 E4 85 F1 | 	sub	objptr, ##28228
0a91c     D8 00 90 FD | 	jmp	#LR__0913
0a920                 | LR__0910
0a920     12 13 02 F6 | 	mov	arg01, local04
0a924     24 04 B0 FD | 	call	#_getvar
0a928     37 00 00 FF 
0a92c     44 E4 05 F1 | 	add	objptr, ##28228
0a930     F2 28 02 FB | 	rdlong	local06, objptr
0a934     01 28 06 F1 | 	add	local06, #1
0a938     F2 28 62 FC | 	wrlong	local06, objptr
0a93c     37 00 00 FF 
0a940     44 E4 85 F1 | 	sub	objptr, ##28228
0a944                 | '     err=getvar(m) : ct+=1 : if err>0 then return err 
0a944     01 FA 55 F2 | 	cmps	result1, #1 wc
0a948     B0 00 90 3D |  if_ae	jmp	#LR__0914
0a94c     A8 00 90 FD | 	jmp	#LR__0913
0a950                 | LR__0911
0a950     37 00 00 FF 
0a954     44 E4 05 F1 | 	add	objptr, ##28228
0a958     F2 28 02 FB | 	rdlong	local06, objptr
0a95c     01 28 06 F1 | 	add	local06, #1
0a960     F2 28 62 FC | 	wrlong	local06, objptr
0a964     37 00 00 FF 
0a968     44 E4 85 F1 | 	sub	objptr, ##28228
0a96c     20 F1 BF FD | 	call	#_expr
0a970                 | '     ct+=1
0a970                 | '     err=expr() : if err>0 then return err 
0a970     01 FA 55 F2 | 	cmps	result1, #1 wc
0a974     84 00 90 3D |  if_ae	jmp	#LR__0914
0a978                 | '     if lparts(ct).token=token_rpar then ct+=1
0a978     37 00 00 FF 
0a97c     44 E4 05 F1 | 	add	objptr, ##28228
0a980     F2 32 02 FB | 	rdlong	local11, objptr
0a984     03 32 66 F0 | 	shl	local11, #3
0a988     02 00 00 FF 
0a98c     38 E4 85 F1 | 	sub	objptr, ##1080
0a990     F2 32 02 F1 | 	add	local11, objptr
0a994     04 32 06 F1 | 	add	local11, #4
0a998     19 33 02 FB | 	rdlong	local11, local11
0a99c     14 32 0E F2 | 	cmp	local11, #20 wz
0a9a0     35 00 00 FF 
0a9a4     0C E4 85 F1 | 	sub	objptr, ##27148
0a9a8     4C 00 90 5D |  if_ne	jmp	#LR__0913
0a9ac     37 00 00 FF 
0a9b0     44 E4 05 F1 | 	add	objptr, ##28228
0a9b4     F2 28 02 FB | 	rdlong	local06, objptr
0a9b8     01 28 06 F1 | 	add	local06, #1
0a9bc     F2 28 62 FC | 	wrlong	local06, objptr
0a9c0     37 00 00 FF 
0a9c4     44 E4 85 F1 | 	sub	objptr, ##28228
0a9c8     2C 00 90 FD | 	jmp	#LR__0913
0a9cc                 | LR__0912
0a9cc     12 13 02 F6 | 	mov	arg01, local04
0a9d0     34 00 B0 FD | 	call	#_getfun
0a9d4     37 00 00 FF 
0a9d8     44 E4 05 F1 | 	add	objptr, ##28228
0a9dc     F2 28 02 FB | 	rdlong	local06, objptr
0a9e0     01 28 06 F1 | 	add	local06, #1
0a9e4     F2 28 62 FC | 	wrlong	local06, objptr
0a9e8     37 00 00 FF 
0a9ec     44 E4 85 F1 | 	sub	objptr, ##28228
0a9f0                 | '     err=getfun(m) : ct+=1 : if err>0 then return err 
0a9f0     01 FA 55 F2 | 	cmps	result1, #1 wc
0a9f4     04 00 90 3D |  if_ae	jmp	#LR__0914
0a9f8                 | LR__0913
0a9f8                 | ' return 0  
0a9f8     00 FA 05 F6 | 	mov	result1, #0
0a9fc                 | LR__0914
0a9fc     A7 F0 03 F6 | 	mov	ptra, fp
0aa00     B2 00 A0 FD | 	call	#popregs_
0aa04                 | _getvalue_ret
0aa04     2D 00 64 FD | 	ret
0aa08                 | 
0aa08                 | ' 
0aa08                 | ' ' Get a function result 
0aa08                 | ' 
0aa08                 | ' function getfun(m as integer) as ulong
0aa08                 | _getfun
0aa08     0F 4A 05 F6 | 	mov	COUNT_, #15
0aa0c     A8 00 A0 FD | 	call	#pushregs_
0aa10                 | _getfun_enter
0aa10     09 25 02 F6 | 	mov	local04, arg01
0aa14     37 00 00 FF 
0aa18     44 E4 05 F1 | 	add	objptr, ##28228
0aa1c     F2 26 02 FB | 	rdlong	local05, objptr
0aa20     13 29 02 F6 | 	mov	local06, local05
0aa24     00 2A 06 F6 | 	mov	local07, #0
0aa28                 | ' oldct=ct
0aa28                 | ' numpar=0
0aa28                 | ' if lparts(ct+1).token=token_lpar then
0aa28     01 26 06 F1 | 	add	local05, #1
0aa2c     03 26 66 F0 | 	shl	local05, #3
0aa30     02 00 00 FF 
0aa34     38 E4 85 F1 | 	sub	objptr, ##1080
0aa38     F2 26 02 F1 | 	add	local05, objptr
0aa3c     04 26 06 F1 | 	add	local05, #4
0aa40     13 27 02 FB | 	rdlong	local05, local05
0aa44     15 26 0E F2 | 	cmp	local05, #21 wz
0aa48     35 00 00 FF 
0aa4c     0C E4 85 F1 | 	sub	objptr, ##27148
0aa50     54 01 90 5D |  if_ne	jmp	#LR__0924
0aa54     37 00 00 FF 
0aa58     44 E4 05 F1 | 	add	objptr, ##28228
0aa5c     F2 2C 02 FB | 	rdlong	local08, objptr
0aa60     01 2C 06 F1 | 	add	local08, #1
0aa64     F2 2C 62 FC | 	wrlong	local08, objptr
0aa68     37 00 00 FF 
0aa6c     44 E4 85 F1 | 	sub	objptr, ##28228
0aa70                 | '   ct+=1 											' omit this lpar, this is for expr list
0aa70                 | '   do
0aa70                 | LR__0920
0aa70     37 00 00 FF 
0aa74     44 E4 05 F1 | 	add	objptr, ##28228
0aa78     F2 26 02 FB | 	rdlong	local05, objptr
0aa7c     01 26 06 F1 | 	add	local05, #1
0aa80     F2 26 62 FC | 	wrlong	local05, objptr
0aa84                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0aa84                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0aa84     03 26 66 F0 | 	shl	local05, #3
0aa88     02 00 00 FF 
0aa8c     38 E4 85 F1 | 	sub	objptr, ##1080
0aa90     F2 26 02 F1 | 	add	local05, objptr
0aa94     04 26 06 F1 | 	add	local05, #4
0aa98     13 2D 02 FB | 	rdlong	local08, local05
0aa9c     15 2C 0E F2 | 	cmp	local08, #21 wz
0aaa0     35 00 00 FF 
0aaa4     0C E4 85 F1 | 	sub	objptr, ##27148
0aaa8     44 00 90 5D |  if_ne	jmp	#LR__0921
0aaac     37 00 00 FF 
0aab0     44 E4 05 F1 | 	add	objptr, ##28228
0aab4     F2 2C 02 FB | 	rdlong	local08, objptr
0aab8     01 2C 06 F1 | 	add	local08, #1
0aabc     F2 2C 62 FC | 	wrlong	local08, objptr
0aac0     37 00 00 FF 
0aac4     44 E4 85 F1 | 	sub	objptr, ##28228
0aac8     C4 EF BF FD | 	call	#_expr
0aacc     FD 2E 02 F6 | 	mov	local09, result1
0aad0     37 00 00 FF 
0aad4     44 E4 05 F1 | 	add	objptr, ##28228
0aad8     F2 2C 02 FB | 	rdlong	local08, objptr
0aadc     01 2C 06 F1 | 	add	local08, #1
0aae0     F2 2C 62 FC | 	wrlong	local08, objptr
0aae4     37 00 00 FF 
0aae8     44 E4 85 F1 | 	sub	objptr, ##28228
0aaec     08 00 90 FD | 	jmp	#LR__0922
0aaf0                 | LR__0921
0aaf0     9C EF BF FD | 	call	#_expr
0aaf4     FD 2E 02 F6 | 	mov	local09, result1
0aaf8                 | LR__0922
0aaf8                 | '     if err>0 then return err
0aaf8     01 2E 16 F2 | 	cmp	local09, #1 wc
0aafc     17 FB 01 36 |  if_ae	mov	result1, local09
0ab00     3C 02 90 3D |  if_ae	jmp	#LR__0926
0ab04     01 2A 06 F1 | 	add	local07, #1
0ab08     37 00 00 FF 
0ab0c     44 E4 05 F1 | 	add	objptr, ##28228
0ab10     F2 26 02 FB | 	rdlong	local05, objptr
0ab14     03 26 66 F0 | 	shl	local05, #3
0ab18     02 00 00 FF 
0ab1c     38 E4 85 F1 | 	sub	objptr, ##1080
0ab20     F2 26 02 F1 | 	add	local05, objptr
0ab24     04 26 06 F1 | 	add	local05, #4
0ab28     13 2F 02 FB | 	rdlong	local09, local05
0ab2c     14 2E 0E F2 | 	cmp	local09, #20 wz
0ab30     35 00 00 FF 
0ab34     0C E4 85 F1 | 	sub	objptr, ##27148
0ab38     34 00 90 AD |  if_e	jmp	#LR__0923
0ab3c     37 00 00 FF 
0ab40     44 E4 05 F1 | 	add	objptr, ##28228
0ab44     F2 2E 02 FB | 	rdlong	local09, objptr
0ab48     03 2E 66 F0 | 	shl	local09, #3
0ab4c     02 00 00 FF 
0ab50     38 E4 85 F1 | 	sub	objptr, ##1080
0ab54     F2 2E 02 F1 | 	add	local09, objptr
0ab58     04 2E 06 F1 | 	add	local09, #4
0ab5c     17 2F 02 FB | 	rdlong	local09, local09
0ab60     FE 2F 0E F2 | 	cmp	local09, #510 wz
0ab64     35 00 00 FF 
0ab68     0C E4 85 F1 | 	sub	objptr, ##27148
0ab6c     00 FF 9F 5D |  if_ne	jmp	#LR__0920
0ab70                 | LR__0923
0ab70                 | '   if lparts(ct).token=token_end then return 14
0ab70     37 00 00 FF 
0ab74     44 E4 05 F1 | 	add	objptr, ##28228
0ab78     F2 26 02 FB | 	rdlong	local05, objptr
0ab7c     03 26 66 F0 | 	shl	local05, #3
0ab80     02 00 00 FF 
0ab84     38 E4 85 F1 | 	sub	objptr, ##1080
0ab88     F2 26 02 F1 | 	add	local05, objptr
0ab8c     04 26 06 F1 | 	add	local05, #4
0ab90     13 2F 02 FB | 	rdlong	local09, local05
0ab94     FE 2F 0E F2 | 	cmp	local09, #510 wz
0ab98     35 00 00 FF 
0ab9c     0C E4 85 F1 | 	sub	objptr, ##27148
0aba0     0E FA 05 A6 |  if_e	mov	result1, #14
0aba4     98 01 90 AD |  if_e	jmp	#LR__0926
0aba8                 | LR__0924
0aba8     15 1F 02 F6 | 	mov	local01, local07
0abac     03 28 66 F0 | 	shl	local06, #3
0abb0     35 00 00 FF 
0abb4     0C E4 05 F1 | 	add	objptr, ##27148
0abb8     F2 28 02 F1 | 	add	local06, objptr
0abbc     04 28 06 F1 | 	add	local06, #4
0abc0     14 23 02 FB | 	rdlong	local03, local06
0abc4     0F 2D 02 F6 | 	mov	local08, local01
0abc8     10 31 02 F6 | 	mov	local10, local02
0abcc     11 33 02 F6 | 	mov	local11, local03
0abd0     15 00 00 FF 
0abd4     70 E4 05 F1 | 	add	objptr, ##10864
0abd8     F2 34 02 FB | 	rdlong	local12, objptr
0abdc     1A 37 02 F6 | 	mov	local13, local12
0abe0     01 36 66 F0 | 	shl	local13, #1
0abe4     1A 37 02 F1 | 	add	local13, local12
0abe8     02 36 66 F0 | 	shl	local13, #2
0abec     03 00 00 FF 
0abf0     00 E4 85 F1 | 	sub	objptr, ##1536
0abf4     F2 36 02 F1 | 	add	local13, objptr
0abf8     1B 2D 62 FC | 	wrlong	local08, local13
0abfc     03 00 00 FF 
0ac00     00 E4 05 F1 | 	add	objptr, ##1536
0ac04     F2 2C 02 FB | 	rdlong	local08, objptr
0ac08     16 39 02 F6 | 	mov	local14, local08
0ac0c     01 38 66 F0 | 	shl	local14, #1
0ac10     16 39 02 F1 | 	add	local14, local08
0ac14     02 38 66 F0 | 	shl	local14, #2
0ac18     03 00 00 FF 
0ac1c     00 E4 85 F1 | 	sub	objptr, ##1536
0ac20     F2 38 02 F1 | 	add	local14, objptr
0ac24     04 38 06 F1 | 	add	local14, #4
0ac28     1C 31 62 FC | 	wrlong	local10, local14
0ac2c     03 00 00 FF 
0ac30     00 E4 05 F1 | 	add	objptr, ##1536
0ac34     F2 2C 02 FB | 	rdlong	local08, objptr
0ac38     16 3B 02 F6 | 	mov	local15, local08
0ac3c     01 3A 66 F0 | 	shl	local15, #1
0ac40     16 3B 02 F1 | 	add	local15, local08
0ac44     02 3A 66 F0 | 	shl	local15, #2
0ac48     03 00 00 FF 
0ac4c     00 E4 85 F1 | 	sub	objptr, ##1536
0ac50     F2 3A 02 F1 | 	add	local15, objptr
0ac54     08 3A 06 F1 | 	add	local15, #8
0ac58     1D 33 62 FC | 	wrlong	local11, local15
0ac5c     03 00 00 FF 
0ac60     00 E4 05 F1 | 	add	objptr, ##1536
0ac64     F2 2C 02 FB | 	rdlong	local08, objptr
0ac68     01 2C 06 F1 | 	add	local08, #1
0ac6c     F2 2C 62 FC | 	wrlong	local08, objptr
0ac70     4A 00 00 FF 
0ac74     7C E4 85 F1 | 	sub	objptr, ##38012
0ac78                 | ' t2.result.uresult=numpar
0ac78                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
0ac78                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0ac78                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0ac78     FF FF 7F FF 
0ac7c     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0ac80     B8 00 90 5D |  if_ne	jmp	#LR__0925
0ac84     15 22 06 F6 | 	mov	local03, #21
0ac88     0F 2D 02 F6 | 	mov	local08, local01
0ac8c     10 31 02 F6 | 	mov	local10, local02
0ac90     11 33 02 F6 | 	mov	local11, local03
0ac94     4A 00 00 FF 
0ac98     7C E4 05 F1 | 	add	objptr, ##38012
0ac9c     F2 34 02 FB | 	rdlong	local12, objptr
0aca0     1A 37 02 F6 | 	mov	local13, local12
0aca4     01 36 66 F0 | 	shl	local13, #1
0aca8     1A 37 02 F1 | 	add	local13, local12
0acac     02 36 66 F0 | 	shl	local13, #2
0acb0     03 00 00 FF 
0acb4     00 E4 85 F1 | 	sub	objptr, ##1536
0acb8     F2 36 02 F1 | 	add	local13, objptr
0acbc     1B 2D 62 FC | 	wrlong	local08, local13
0acc0     03 00 00 FF 
0acc4     00 E4 05 F1 | 	add	objptr, ##1536
0acc8     F2 3A 02 FB | 	rdlong	local15, objptr
0accc     1D 39 02 F6 | 	mov	local14, local15
0acd0     01 38 66 F0 | 	shl	local14, #1
0acd4     1D 39 02 F1 | 	add	local14, local15
0acd8     02 38 66 F0 | 	shl	local14, #2
0acdc     03 00 00 FF 
0ace0     00 E4 85 F1 | 	sub	objptr, ##1536
0ace4     F2 38 02 F1 | 	add	local14, objptr
0ace8     04 38 06 F1 | 	add	local14, #4
0acec     1C 31 62 FC | 	wrlong	local10, local14
0acf0     03 00 00 FF 
0acf4     00 E4 05 F1 | 	add	objptr, ##1536
0acf8     F2 38 02 FB | 	rdlong	local14, objptr
0acfc     1C 3B 02 F6 | 	mov	local15, local14
0ad00     01 3A 66 F0 | 	shl	local15, #1
0ad04     1C 3B 02 F1 | 	add	local15, local14
0ad08     02 3A 66 F0 | 	shl	local15, #2
0ad0c     03 00 00 FF 
0ad10     00 E4 85 F1 | 	sub	objptr, ##1536
0ad14     F2 3A 02 F1 | 	add	local15, objptr
0ad18     08 3A 06 F1 | 	add	local15, #8
0ad1c     1D 33 62 FC | 	wrlong	local11, local15
0ad20     03 00 00 FF 
0ad24     00 E4 05 F1 | 	add	objptr, ##1536
0ad28     F2 2C 02 FB | 	rdlong	local08, objptr
0ad2c     01 2C 06 F1 | 	add	local08, #1
0ad30     F2 2C 62 FC | 	wrlong	local08, objptr
0ad34     4A 00 00 FF 
0ad38     7C E4 85 F1 | 	sub	objptr, ##38012
0ad3c                 | LR__0925
0ad3c                 | ' return 0
0ad3c     00 FA 05 F6 | 	mov	result1, #0
0ad40                 | LR__0926
0ad40     A7 F0 03 F6 | 	mov	ptra, fp
0ad44     B2 00 A0 FD | 	call	#popregs_
0ad48                 | _getfun_ret
0ad48     2D 00 64 FD | 	ret
0ad4c                 | 
0ad4c                 | '   
0ad4c                 | '   
0ad4c                 | ' function getvar(m as integer) as ulong
0ad4c                 | _getvar
0ad4c     11 4A 05 F6 | 	mov	COUNT_, #17
0ad50     A8 00 A0 FD | 	call	#pushregs_
0ad54                 | _getvar_enter
0ad54     09 25 02 F6 | 	mov	local04, arg01
0ad58     37 00 00 FF 
0ad5c     44 E4 05 F1 | 	add	objptr, ##28228
0ad60     F2 26 02 FB | 	rdlong	local05, objptr
0ad64     03 26 66 F0 | 	shl	local05, #3
0ad68     02 00 00 FF 
0ad6c     38 E4 85 F1 | 	sub	objptr, ##1080
0ad70     F2 26 02 F1 | 	add	local05, objptr
0ad74     13 29 02 FB | 	rdlong	local06, local05
0ad78     01 2A 66 F6 | 	neg	local07, #1
0ad7c                 | ' 
0ad7c                 | ' varname$=lparts(ct).part$
0ad7c                 | ' j=-1
0ad7c                 | ' 
0ad7c                 | ' for i=0 to varnum-1
0ad7c     00 2C 06 F6 | 	mov	local08, #0
0ad80     04 E4 85 F1 | 	sub	objptr, #4
0ad84     F2 2E 02 FB | 	rdlong	local09, objptr
0ad88     35 00 00 FF 
0ad8c     08 E4 85 F1 | 	sub	objptr, ##27144
0ad90                 | LR__0930
0ad90     17 2D 52 F2 | 	cmps	local08, local09 wc
0ad94     38 00 90 3D |  if_ae	jmp	#LR__0931
0ad98                 | '   if variables(i).name=varname$ then j=i : exit
0ad98     16 27 02 F6 | 	mov	local05, local08
0ad9c     04 26 66 F0 | 	shl	local05, #4
0ada0     14 00 00 FF 
0ada4     F8 E5 05 F1 | 	add	objptr, ##10744
0ada8     F2 26 02 F1 | 	add	local05, objptr
0adac     13 13 02 FB | 	rdlong	arg01, local05
0adb0     14 15 02 F6 | 	mov	arg02, local06
0adb4     14 00 00 FF 
0adb8     F8 E5 85 F1 | 	sub	objptr, ##10744
0adbc     CC 5B B1 FD | 	call	#__system___string_cmp
0adc0     00 FA 0D F2 | 	cmp	result1, #0 wz
0adc4     16 2B 02 A6 |  if_e	mov	local07, local08
0adc8     01 2C 06 51 |  if_ne	add	local08, #1
0adcc     C0 FF 9F 5D |  if_ne	jmp	#LR__0930
0add0                 | LR__0931
0add0                 | ' if  j=-1 andalso varnum<maxvars then   
0add0     FF FF 7F FF 
0add4     FF 2B 0E F2 | 	cmp	local07, ##-1 wz
0add8     A8 00 90 5D |  if_ne	jmp	#LR__0932
0addc     35 00 00 FF 
0ade0     08 E4 05 F1 | 	add	objptr, ##27144
0ade4     F2 2E 02 FB | 	rdlong	local09, objptr
0ade8     35 00 00 FF 
0adec     08 E4 85 F1 | 	sub	objptr, ##27144
0adf0     02 00 00 FF 
0adf4     00 2E 56 F2 | 	cmps	local09, ##1024 wc
0adf8     88 00 90 3D |  if_ae	jmp	#LR__0932
0adfc     35 00 00 FF 
0ae00     08 E4 05 F1 | 	add	objptr, ##27144
0ae04     F2 26 02 FB | 	rdlong	local05, objptr
0ae08     04 26 66 F0 | 	shl	local05, #4
0ae0c     20 00 00 FF 
0ae10     10 E4 85 F1 | 	sub	objptr, ##16400
0ae14     F2 26 02 F1 | 	add	local05, objptr
0ae18     13 29 62 FC | 	wrlong	local06, local05
0ae1c     20 00 00 FF 
0ae20     10 E4 05 F1 | 	add	objptr, ##16400
0ae24     F2 26 02 FB | 	rdlong	local05, objptr
0ae28     04 26 66 F0 | 	shl	local05, #4
0ae2c     20 00 00 FF 
0ae30     10 E4 85 F1 | 	sub	objptr, ##16400
0ae34     F2 26 02 F1 | 	add	local05, objptr
0ae38     04 26 06 F1 | 	add	local05, #4
0ae3c     13 01 68 FC | 	wrlong	#0, local05
0ae40     20 00 00 FF 
0ae44     10 E4 05 F1 | 	add	objptr, ##16400
0ae48     F2 26 02 FB | 	rdlong	local05, objptr
0ae4c     04 26 66 F0 | 	shl	local05, #4
0ae50     20 00 00 FF 
0ae54     10 E4 85 F1 | 	sub	objptr, ##16400
0ae58     F2 26 02 F1 | 	add	local05, objptr
0ae5c     0C 26 06 F1 | 	add	local05, #12
0ae60     13 39 68 FC | 	wrlong	#28, local05
0ae64     20 00 00 FF 
0ae68     10 E4 05 F1 | 	add	objptr, ##16400
0ae6c     F2 2E 02 FB | 	rdlong	local09, objptr
0ae70     17 2B 02 F6 | 	mov	local07, local09
0ae74     01 2E 06 F1 | 	add	local09, #1
0ae78     F2 2E 62 FC | 	wrlong	local09, objptr
0ae7c     35 00 00 FF 
0ae80     08 E4 85 F1 | 	sub	objptr, ##27144
0ae84                 | LR__0932
0ae84     00 2E 06 F6 | 	mov	local09, #0
0ae88                 | ' numpar=0
0ae88                 | ' if lparts(ct+1).token=token_lpar then								' check if it is an array
0ae88     37 00 00 FF 
0ae8c     44 E4 05 F1 | 	add	objptr, ##28228
0ae90     F2 26 02 FB | 	rdlong	local05, objptr
0ae94     01 26 06 F1 | 	add	local05, #1
0ae98     03 26 66 F0 | 	shl	local05, #3
0ae9c     02 00 00 FF 
0aea0     38 E4 85 F1 | 	sub	objptr, ##1080
0aea4     F2 26 02 F1 | 	add	local05, objptr
0aea8     04 26 06 F1 | 	add	local05, #4
0aeac     13 2D 02 FB | 	rdlong	local08, local05
0aeb0     15 2C 0E F2 | 	cmp	local08, #21 wz
0aeb4     35 00 00 FF 
0aeb8     0C E4 85 F1 | 	sub	objptr, ##27148
0aebc     54 01 90 5D |  if_ne	jmp	#LR__0937
0aec0     37 00 00 FF 
0aec4     44 E4 05 F1 | 	add	objptr, ##28228
0aec8     F2 30 02 FB | 	rdlong	local10, objptr
0aecc     01 30 06 F1 | 	add	local10, #1
0aed0     F2 30 62 FC | 	wrlong	local10, objptr
0aed4     37 00 00 FF 
0aed8     44 E4 85 F1 | 	sub	objptr, ##28228
0aedc                 | '   ct+=1 											' omit this lpar, this is for expr list
0aedc                 | '   do
0aedc                 | LR__0933
0aedc     37 00 00 FF 
0aee0     44 E4 05 F1 | 	add	objptr, ##28228
0aee4     F2 26 02 FB | 	rdlong	local05, objptr
0aee8     01 26 06 F1 | 	add	local05, #1
0aeec     F2 26 62 FC | 	wrlong	local05, objptr
0aef0                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0aef0                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0aef0     03 26 66 F0 | 	shl	local05, #3
0aef4     02 00 00 FF 
0aef8     38 E4 85 F1 | 	sub	objptr, ##1080
0aefc     F2 26 02 F1 | 	add	local05, objptr
0af00     04 26 06 F1 | 	add	local05, #4
0af04     13 31 02 FB | 	rdlong	local10, local05
0af08     15 30 0E F2 | 	cmp	local10, #21 wz
0af0c     35 00 00 FF 
0af10     0C E4 85 F1 | 	sub	objptr, ##27148
0af14     44 00 90 5D |  if_ne	jmp	#LR__0934
0af18     37 00 00 FF 
0af1c     44 E4 05 F1 | 	add	objptr, ##28228
0af20     F2 30 02 FB | 	rdlong	local10, objptr
0af24     01 30 06 F1 | 	add	local10, #1
0af28     F2 30 62 FC | 	wrlong	local10, objptr
0af2c     37 00 00 FF 
0af30     44 E4 85 F1 | 	sub	objptr, ##28228
0af34     58 EB BF FD | 	call	#_expr
0af38     FD 32 02 F6 | 	mov	local11, result1
0af3c     37 00 00 FF 
0af40     44 E4 05 F1 | 	add	objptr, ##28228
0af44     F2 30 02 FB | 	rdlong	local10, objptr
0af48     01 30 06 F1 | 	add	local10, #1
0af4c     F2 30 62 FC | 	wrlong	local10, objptr
0af50     37 00 00 FF 
0af54     44 E4 85 F1 | 	sub	objptr, ##28228
0af58     08 00 90 FD | 	jmp	#LR__0935
0af5c                 | LR__0934
0af5c     30 EB BF FD | 	call	#_expr
0af60     FD 32 02 F6 | 	mov	local11, result1
0af64                 | LR__0935
0af64                 | '     if err>0 then return err
0af64     01 32 56 F2 | 	cmps	local11, #1 wc
0af68     19 FB 01 36 |  if_ae	mov	result1, local11
0af6c     2C 02 90 3D |  if_ae	jmp	#LR__0939
0af70     01 2E 06 F1 | 	add	local09, #1
0af74     37 00 00 FF 
0af78     44 E4 05 F1 | 	add	objptr, ##28228
0af7c     F2 26 02 FB | 	rdlong	local05, objptr
0af80     03 26 66 F0 | 	shl	local05, #3
0af84     02 00 00 FF 
0af88     38 E4 85 F1 | 	sub	objptr, ##1080
0af8c     F2 26 02 F1 | 	add	local05, objptr
0af90     04 26 06 F1 | 	add	local05, #4
0af94     13 33 02 FB | 	rdlong	local11, local05
0af98     14 32 0E F2 | 	cmp	local11, #20 wz
0af9c     35 00 00 FF 
0afa0     0C E4 85 F1 | 	sub	objptr, ##27148
0afa4     34 00 90 AD |  if_e	jmp	#LR__0936
0afa8     37 00 00 FF 
0afac     44 E4 05 F1 | 	add	objptr, ##28228
0afb0     F2 32 02 FB | 	rdlong	local11, objptr
0afb4     03 32 66 F0 | 	shl	local11, #3
0afb8     02 00 00 FF 
0afbc     38 E4 85 F1 | 	sub	objptr, ##1080
0afc0     F2 32 02 F1 | 	add	local11, objptr
0afc4     04 32 06 F1 | 	add	local11, #4
0afc8     19 33 02 FB | 	rdlong	local11, local11
0afcc     FE 33 0E F2 | 	cmp	local11, #510 wz
0afd0     35 00 00 FF 
0afd4     0C E4 85 F1 | 	sub	objptr, ##27148
0afd8     00 FF 9F 5D |  if_ne	jmp	#LR__0933
0afdc                 | LR__0936
0afdc                 | '     if lparts(ct).token=token_end then return 14
0afdc     37 00 00 FF 
0afe0     44 E4 05 F1 | 	add	objptr, ##28228
0afe4     F2 26 02 FB | 	rdlong	local05, objptr
0afe8     03 26 66 F0 | 	shl	local05, #3
0afec     02 00 00 FF 
0aff0     38 E4 85 F1 | 	sub	objptr, ##1080
0aff4     F2 26 02 F1 | 	add	local05, objptr
0aff8     04 26 06 F1 | 	add	local05, #4
0affc     13 33 02 FB | 	rdlong	local11, local05
0b000     FE 33 0E F2 | 	cmp	local11, #510 wz
0b004     35 00 00 FF 
0b008     0C E4 85 F1 | 	sub	objptr, ##27148
0b00c     0E FA 05 A6 |  if_e	mov	result1, #14
0b010     88 01 90 AD |  if_e	jmp	#LR__0939
0b014                 | LR__0937
0b014     17 21 02 F6 | 	mov	local02, local09
0b018     11 22 06 F6 | 	mov	local03, #17
0b01c     15 1F 02 F6 | 	mov	local01, local07
0b020     0F 31 02 F6 | 	mov	local10, local01
0b024     10 35 02 F6 | 	mov	local12, local02
0b028     11 37 02 F6 | 	mov	local13, local03
0b02c     4A 00 00 FF 
0b030     7C E4 05 F1 | 	add	objptr, ##38012
0b034     F2 38 02 FB | 	rdlong	local14, objptr
0b038     1C 3B 02 F6 | 	mov	local15, local14
0b03c     01 3A 66 F0 | 	shl	local15, #1
0b040     1C 3B 02 F1 | 	add	local15, local14
0b044     02 3A 66 F0 | 	shl	local15, #2
0b048     03 00 00 FF 
0b04c     00 E4 85 F1 | 	sub	objptr, ##1536
0b050     F2 3A 02 F1 | 	add	local15, objptr
0b054     1D 31 62 FC | 	wrlong	local10, local15
0b058     03 00 00 FF 
0b05c     00 E4 05 F1 | 	add	objptr, ##1536
0b060     F2 30 02 FB | 	rdlong	local10, objptr
0b064     18 3D 02 F6 | 	mov	local16, local10
0b068     01 3C 66 F0 | 	shl	local16, #1
0b06c     18 3D 02 F1 | 	add	local16, local10
0b070     02 3C 66 F0 | 	shl	local16, #2
0b074     03 00 00 FF 
0b078     00 E4 85 F1 | 	sub	objptr, ##1536
0b07c     F2 3C 02 F1 | 	add	local16, objptr
0b080     04 3C 06 F1 | 	add	local16, #4
0b084     1E 35 62 FC | 	wrlong	local12, local16
0b088     03 00 00 FF 
0b08c     00 E4 05 F1 | 	add	objptr, ##1536
0b090     F2 30 02 FB | 	rdlong	local10, objptr
0b094     18 3F 02 F6 | 	mov	local17, local10
0b098     01 3E 66 F0 | 	shl	local17, #1
0b09c     18 3F 02 F1 | 	add	local17, local10
0b0a0     02 3E 66 F0 | 	shl	local17, #2
0b0a4     03 00 00 FF 
0b0a8     00 E4 85 F1 | 	sub	objptr, ##1536
0b0ac     F2 3E 02 F1 | 	add	local17, objptr
0b0b0     08 3E 06 F1 | 	add	local17, #8
0b0b4     1F 37 62 FC | 	wrlong	local13, local17
0b0b8     03 00 00 FF 
0b0bc     00 E4 05 F1 | 	add	objptr, ##1536
0b0c0     F2 30 02 FB | 	rdlong	local10, objptr
0b0c4     01 30 06 F1 | 	add	local10, #1
0b0c8     F2 30 62 FC | 	wrlong	local10, objptr
0b0cc     4A 00 00 FF 
0b0d0     7C E4 85 F1 | 	sub	objptr, ##38012
0b0d4                 | ' t2.result.twowords(1)=numpar
0b0d4                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
0b0d4                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0b0d4                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0b0d4     FF FF 7F FF 
0b0d8     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0b0dc     B8 00 90 5D |  if_ne	jmp	#LR__0938
0b0e0     15 22 06 F6 | 	mov	local03, #21
0b0e4     0F 31 02 F6 | 	mov	local10, local01
0b0e8     10 35 02 F6 | 	mov	local12, local02
0b0ec     11 37 02 F6 | 	mov	local13, local03
0b0f0     4A 00 00 FF 
0b0f4     7C E4 05 F1 | 	add	objptr, ##38012
0b0f8     F2 38 02 FB | 	rdlong	local14, objptr
0b0fc     1C 3B 02 F6 | 	mov	local15, local14
0b100     01 3A 66 F0 | 	shl	local15, #1
0b104     1C 3B 02 F1 | 	add	local15, local14
0b108     02 3A 66 F0 | 	shl	local15, #2
0b10c     03 00 00 FF 
0b110     00 E4 85 F1 | 	sub	objptr, ##1536
0b114     F2 3A 02 F1 | 	add	local15, objptr
0b118     1D 31 62 FC | 	wrlong	local10, local15
0b11c     03 00 00 FF 
0b120     00 E4 05 F1 | 	add	objptr, ##1536
0b124     F2 3E 02 FB | 	rdlong	local17, objptr
0b128     1F 3D 02 F6 | 	mov	local16, local17
0b12c     01 3C 66 F0 | 	shl	local16, #1
0b130     1F 3D 02 F1 | 	add	local16, local17
0b134     02 3C 66 F0 | 	shl	local16, #2
0b138     03 00 00 FF 
0b13c     00 E4 85 F1 | 	sub	objptr, ##1536
0b140     F2 3C 02 F1 | 	add	local16, objptr
0b144     04 3C 06 F1 | 	add	local16, #4
0b148     1E 35 62 FC | 	wrlong	local12, local16
0b14c     03 00 00 FF 
0b150     00 E4 05 F1 | 	add	objptr, ##1536
0b154     F2 3C 02 FB | 	rdlong	local16, objptr
0b158     1E 3F 02 F6 | 	mov	local17, local16
0b15c     01 3E 66 F0 | 	shl	local17, #1
0b160     1E 3F 02 F1 | 	add	local17, local16
0b164     02 3E 66 F0 | 	shl	local17, #2
0b168     03 00 00 FF 
0b16c     00 E4 85 F1 | 	sub	objptr, ##1536
0b170     F2 3E 02 F1 | 	add	local17, objptr
0b174     08 3E 06 F1 | 	add	local17, #8
0b178     1F 37 62 FC | 	wrlong	local13, local17
0b17c     03 00 00 FF 
0b180     00 E4 05 F1 | 	add	objptr, ##1536
0b184     F2 30 02 FB | 	rdlong	local10, objptr
0b188     01 30 06 F1 | 	add	local10, #1
0b18c     F2 30 62 FC | 	wrlong	local10, objptr
0b190     4A 00 00 FF 
0b194     7C E4 85 F1 | 	sub	objptr, ##38012
0b198                 | LR__0938
0b198                 | ' return 0
0b198     00 FA 05 F6 | 	mov	result1, #0
0b19c                 | LR__0939
0b19c     A7 F0 03 F6 | 	mov	ptra, fp
0b1a0     B2 00 A0 FD | 	call	#popregs_
0b1a4                 | _getvar_ret
0b1a4     2D 00 64 FD | 	ret
0b1a8                 | 
0b1a8                 | ' 
0b1a8                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b1a8                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
0b1a8                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b1a8                 | ' 
0b1a8                 | ' 
0b1a8                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b1a8                 | ' '                                                                                                                                       -
0b1a8                 | ' '                                              RUNTIME STARTS HERE                                                                      - 
0b1a8                 | ' '                                                                                                                                       -
0b1a8                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b1a8                 | ' 
0b1a8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0b1a8                 | ' '----------------------------------------- A main execute line function ----------------------------------------------------------------
0b1a8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0b1a8                 | ' 
0b1a8                 | ' function execute_line (astart=0 as integer) as integer
0b1a8                 | _execute_line
0b1a8     04 4A 05 F6 | 	mov	COUNT_, #4
0b1ac     A8 00 A0 FD | 	call	#pushregs_
0b1b0     50 00 00 FF 
0b1b4     BC E4 05 F1 | 	add	objptr, ##41148
0b1b8     F2 00 68 FC | 	wrlong	#0, objptr
0b1bc                 | ' 
0b1bc                 | ' runptr2=0
0b1bc                 | ' for lineptr_e=astart to lineptr-1
0b1bc     06 00 00 FF 
0b1c0     3C E4 85 F1 | 	sub	objptr, ##3132
0b1c4     F2 12 62 FC | 	wrlong	arg01, objptr
0b1c8     04 E4 85 F1 | 	sub	objptr, #4
0b1cc     F2 1E 02 FB | 	rdlong	local01, objptr
0b1d0     4A 00 00 FF 
0b1d4     7C E4 85 F1 | 	sub	objptr, ##38012
0b1d8                 | LR__0940
0b1d8     4A 00 00 FF 
0b1dc     80 E4 05 F1 | 	add	objptr, ##38016
0b1e0     F2 FA 01 FB | 	rdlong	result1, objptr
0b1e4     4A 00 00 FF 
0b1e8     80 E4 85 F1 | 	sub	objptr, ##38016
0b1ec     0F FB 51 F2 | 	cmps	result1, local01 wc
0b1f0     98 00 90 3D |  if_ae	jmp	#LR__0941
0b1f4     4A 00 00 FF 
0b1f8     80 E4 05 F1 | 	add	objptr, ##38016
0b1fc     F2 FA 01 FB | 	rdlong	result1, objptr
0b200     FD 20 02 F6 | 	mov	local02, result1
0b204     01 20 66 F0 | 	shl	local02, #1
0b208     FD 20 02 F1 | 	add	local02, result1
0b20c     02 20 66 F0 | 	shl	local02, #2
0b210     03 00 00 FF 
0b214     04 E4 85 F1 | 	sub	objptr, ##1540
0b218     F2 20 02 F1 | 	add	local02, objptr
0b21c     08 20 06 F1 | 	add	local02, #8
0b220     10 21 02 FB | 	rdlong	local02, local02
0b224     10 21 E2 F8 | 	getbyte	local02, local02, #0
0b228     02 20 66 F0 | 	shl	local02, #2
0b22c     04 00 00 FF 
0b230     1C E4 85 F1 | 	sub	objptr, ##2076
0b234     F2 20 02 F1 | 	add	local02, objptr
0b238     10 21 02 FB | 	rdlong	local02, local02
0b23c     10 23 02 F6 | 	mov	local03, local02
0b240     13 20 46 F7 | 	zerox	local02, #19
0b244     14 22 46 F0 | 	shr	local03, #20
0b248     02 22 66 F0 | 	shl	local03, #2
0b24c     ED 22 02 F1 | 	add	local03, __methods__
0b250     11 23 02 FB | 	rdlong	local03, local03
0b254     43 00 00 FF 
0b258     60 E4 85 F1 | 	sub	objptr, ##34400
0b25c     F2 24 02 F6 | 	mov	local04, objptr
0b260     10 E5 01 F6 | 	mov	objptr, local02
0b264     2D 22 62 FD | 	call	local03
0b268     12 E5 01 F6 | 	mov	objptr, local04
0b26c     4A 00 00 FF 
0b270     80 E4 05 F1 | 	add	objptr, ##38016
0b274     F2 24 02 FB | 	rdlong	local04, objptr
0b278     01 24 06 F1 | 	add	local04, #1
0b27c     F2 24 62 FC | 	wrlong	local04, objptr
0b280     4A 00 00 FF 
0b284     80 E4 85 F1 | 	sub	objptr, ##38016
0b288     4C FF 9F FD | 	jmp	#LR__0940
0b28c                 | LR__0941
0b28c                 | ' return runptr2
0b28c     50 00 00 FF 
0b290     BC E4 05 F1 | 	add	objptr, ##41148
0b294     F2 FA 01 FB | 	rdlong	result1, objptr
0b298     50 00 00 FF 
0b29c     BC E4 85 F1 | 	sub	objptr, ##41148
0b2a0     A7 F0 03 F6 | 	mov	ptra, fp
0b2a4     B2 00 A0 FD | 	call	#popregs_
0b2a8                 | _execute_line_ret
0b2a8     2D 00 64 FD | 	ret
0b2ac                 | 
0b2ac                 | ' 
0b2ac                 | ' 
0b2ac                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b2ac                 | ' '--------------------------------------- Runtime helper functions -----------------------------------------------------------------------
0b2ac                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b2ac                 | ' 
0b2ac                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
0b2ac                 | ' 
0b2ac                 | ' function pop() as expr_result
0b2ac                 | _pop
0b2ac                 | ' if stackpointer=0 then
0b2ac     43 00 00 FF 
0b2b0     58 E4 05 F1 | 	add	objptr, ##34392
0b2b4     F2 FA 09 FB | 	rdlong	result1, objptr wz
0b2b8     43 00 00 FF 
0b2bc     58 E4 85 F1 | 	sub	objptr, ##34392
0b2c0     FF 04 06 A6 |  if_e	mov	_var03, #255
0b2c4     18 00 06 A6 |  if_e	mov	_var01, #24
0b2c8     68 00 90 AD |  if_e	jmp	#LR__0950
0b2cc     43 00 00 FF 
0b2d0     58 E4 05 F1 | 	add	objptr, ##34392
0b2d4     F2 FA 01 FB | 	rdlong	result1, objptr
0b2d8     01 FA 85 F1 | 	sub	result1, #1
0b2dc     F2 FA 61 FC | 	wrlong	result1, objptr
0b2e0     FD FE 01 F6 | 	mov	result3, result1
0b2e4     01 FE 65 F0 | 	shl	result3, #1
0b2e8     FD FE 01 F1 | 	add	result3, result1
0b2ec     02 FE 65 F0 | 	shl	result3, #2
0b2f0     0C 00 00 FF 
0b2f4     0C E4 85 F1 | 	sub	objptr, ##6156
0b2f8     F2 FE 01 F1 | 	add	result3, objptr
0b2fc     FF 00 02 FB | 	rdlong	_var01, result3
0b300     04 FE 05 F1 | 	add	result3, #4
0b304     FF FE 01 FB | 	rdlong	result3, result3
0b308     FD FC 01 F6 | 	mov	result2, result1
0b30c     01 FC 65 F0 | 	shl	result2, #1
0b310     FD FC 01 F1 | 	add	result2, result1
0b314     02 FC 65 F0 | 	shl	result2, #2
0b318     F2 FC 01 F1 | 	add	result2, objptr
0b31c     08 FC 05 F1 | 	add	result2, #8
0b320     FE FA 01 FB | 	rdlong	result1, result2
0b324     FF 02 02 F6 | 	mov	_var02, result3
0b328     FD 04 02 F6 | 	mov	_var03, result1
0b32c     37 00 00 FF 
0b330     4C E4 85 F1 | 	sub	objptr, ##28236
0b334                 | LR__0950
0b334                 | ' return t1
0b334     01 FD 01 F6 | 	mov	result2, _var02
0b338     02 FF 01 F6 | 	mov	result3, _var03
0b33c     00 FB 01 F6 | 	mov	result1, _var01
0b340                 | _pop_ret
0b340     2D 00 64 FD | 	ret
0b344                 | 
0b344                 | ' 
0b344                 | ' sub push(t1 as expr_result )
0b344                 | _push
0b344                 | ' if stackpointer<maxstack then 
0b344     43 00 00 FF 
0b348     58 E4 05 F1 | 	add	objptr, ##34392
0b34c     F2 00 02 FB | 	rdlong	_var01, objptr
0b350     43 00 00 FF 
0b354     58 E4 85 F1 | 	sub	objptr, ##34392
0b358     01 00 00 FF 
0b35c     00 00 56 F2 | 	cmps	_var01, ##512 wc
0b360     BC 00 90 3D |  if_ae	jmp	#LR__0960
0b364     09 01 02 FB | 	rdlong	_var01, arg01
0b368     04 12 06 F1 | 	add	arg01, #4
0b36c     09 03 02 FB | 	rdlong	_var02, arg01
0b370     04 12 06 F1 | 	add	arg01, #4
0b374     09 13 02 FB | 	rdlong	arg01, arg01
0b378     43 00 00 FF 
0b37c     58 E4 05 F1 | 	add	objptr, ##34392
0b380     F2 04 02 FB | 	rdlong	_var03, objptr
0b384     02 07 02 F6 | 	mov	_var04, _var03
0b388     01 06 66 F0 | 	shl	_var04, #1
0b38c     02 07 02 F1 | 	add	_var04, _var03
0b390     02 06 66 F0 | 	shl	_var04, #2
0b394     0C 00 00 FF 
0b398     0C E4 85 F1 | 	sub	objptr, ##6156
0b39c     F2 06 02 F1 | 	add	_var04, objptr
0b3a0     03 01 62 FC | 	wrlong	_var01, _var04
0b3a4     0C 00 00 FF 
0b3a8     0C E4 05 F1 | 	add	objptr, ##6156
0b3ac     F2 06 02 FB | 	rdlong	_var04, objptr
0b3b0     03 05 02 F6 | 	mov	_var03, _var04
0b3b4     01 04 66 F0 | 	shl	_var03, #1
0b3b8     03 05 02 F1 | 	add	_var03, _var04
0b3bc     02 04 66 F0 | 	shl	_var03, #2
0b3c0     0C 00 00 FF 
0b3c4     0C E4 85 F1 | 	sub	objptr, ##6156
0b3c8     F2 04 02 F1 | 	add	_var03, objptr
0b3cc     04 04 06 F1 | 	add	_var03, #4
0b3d0     02 03 62 FC | 	wrlong	_var02, _var03
0b3d4     0C 00 00 FF 
0b3d8     0C E4 05 F1 | 	add	objptr, ##6156
0b3dc     F2 06 02 FB | 	rdlong	_var04, objptr
0b3e0     03 05 02 F6 | 	mov	_var03, _var04
0b3e4     01 04 66 F0 | 	shl	_var03, #1
0b3e8     03 05 02 F1 | 	add	_var03, _var04
0b3ec     02 04 66 F0 | 	shl	_var03, #2
0b3f0     0C 00 00 FF 
0b3f4     0C E4 85 F1 | 	sub	objptr, ##6156
0b3f8     F2 04 02 F1 | 	add	_var03, objptr
0b3fc     08 04 06 F1 | 	add	_var03, #8
0b400     02 13 62 FC | 	wrlong	arg01, _var03
0b404     0C 00 00 FF 
0b408     0C E4 05 F1 | 	add	objptr, ##6156
0b40c     F2 00 02 FB | 	rdlong	_var01, objptr
0b410     01 00 06 F1 | 	add	_var01, #1
0b414     F2 00 62 FC | 	wrlong	_var01, objptr
0b418     43 00 00 FF 
0b41c     58 E4 85 F1 | 	sub	objptr, ##34392
0b420                 | LR__0960
0b420                 | _push_ret
0b420     2D 00 64 FD | 	ret
0b424                 | 
0b424                 | ' 
0b424                 | ' ' -------------------------------- Runtime converting functions
0b424                 | ' 
0b424                 | ' ' converts the PSRAM based string to 'normal' string. A PSRAM pointer at input, a string at output
0b424                 | ' 
0b424                 | ' function  convertstring(psaddr as ulong) as string
0b424                 | _convertstring
0b424     04 4A 05 F6 | 	mov	COUNT_, #4
0b428     A8 00 A0 FD | 	call	#pushregs_
0b42c     09 1F 02 F6 | 	mov	local01, arg01
0b430     34 22 B1 FD | 	call	#_pslpeek
0b434     FD 20 02 F6 | 	mov	local02, result1
0b438     84 01 00 FF 
0b43c     63 22 06 F6 | 	mov	local03, ##@LR__5443
0b440                 | ' l=pslpeek(psaddr)
0b440                 | ' s="" 
0b440                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
0b440     01 24 06 F6 | 	mov	local04, #1
0b444     01 20 06 F1 | 	add	local02, #1
0b448                 | LR__0970
0b448     10 25 52 F2 | 	cmps	local04, local02 wc
0b44c     30 00 90 3D |  if_ae	jmp	#LR__0971
0b450     0F 13 02 F6 | 	mov	arg01, local01
0b454     03 12 06 F1 | 	add	arg01, #3
0b458     12 13 02 F1 | 	add	arg01, local04
0b45c     B0 21 B1 FD | 	call	#_pspeek
0b460     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
0b464     3C 77 B1 FD | 	call	#__system__Chr_S
0b468     FD 14 02 F6 | 	mov	arg02, result1
0b46c     11 13 02 F6 | 	mov	arg01, local03
0b470     4C 55 B1 FD | 	call	#__system___string_concat
0b474     FD 22 02 F6 | 	mov	local03, result1
0b478     01 24 06 F1 | 	add	local04, #1
0b47c     C8 FF 9F FD | 	jmp	#LR__0970
0b480                 | LR__0971
0b480                 | ' return s
0b480     11 FB 01 F6 | 	mov	result1, local03
0b484     A7 F0 03 F6 | 	mov	ptra, fp
0b488     B2 00 A0 FD | 	call	#popregs_
0b48c                 | _convertstring_ret
0b48c     2D 00 64 FD | 	ret
0b490                 | 
0b490                 | ' 
0b490                 | ' ' converts a variable to an integer
0b490                 | ' 
0b490                 | ' function converttoint (t1 as expr_result) as integer 
0b490                 | _converttoint
0b490     02 4A 05 F6 | 	mov	COUNT_, #2
0b494     A8 00 A0 FD | 	call	#pushregs_
0b498     09 1F 02 F6 | 	mov	local01, arg01
0b49c                 | ' 
0b49c                 | ' select case t1.result_type
0b49c     08 1E 06 F1 | 	add	local01, #8
0b4a0     0F 21 02 FB | 	rdlong	local02, local01
0b4a4     08 1E 86 F1 | 	sub	local01, #8
0b4a8     1C 20 0E F2 | 	cmp	local02, #28 wz
0b4ac     2C 00 90 AD |  if_e	jmp	#LR__0980
0b4b0     1D 20 0E F2 | 	cmp	local02, #29 wz
0b4b4     2C 00 90 AD |  if_e	jmp	#LR__0981
0b4b8     1E 20 0E F2 | 	cmp	local02, #30 wz
0b4bc     2C 00 90 AD |  if_e	jmp	#LR__0982
0b4c0     1F 20 0E F2 | 	cmp	local02, #31 wz
0b4c4     34 00 90 AD |  if_e	jmp	#LR__0983
0b4c8     2B 20 0E F2 | 	cmp	local02, #43 wz
0b4cc     44 00 90 AD |  if_e	jmp	#LR__0984
0b4d0     2C 20 0E F2 | 	cmp	local02, #44 wz
0b4d4     5C 00 90 AD |  if_e	jmp	#LR__0985
0b4d8     60 00 90 FD | 	jmp	#LR__0986
0b4dc                 | LR__0980
0b4dc     0F FB 01 FB | 	rdlong	result1, local01
0b4e0     5C 00 90 FD | 	jmp	#LR__0987
0b4e4                 | LR__0981
0b4e4     0F FB 01 FB | 	rdlong	result1, local01
0b4e8     54 00 90 FD | 	jmp	#LR__0987
0b4ec                 | LR__0982
0b4ec     0F 13 02 FB | 	rdlong	arg01, local01
0b4f0     01 14 06 F6 | 	mov	arg02, #1
0b4f4     E8 84 B1 FD | 	call	#__system___float_tointeger
0b4f8     44 00 90 FD | 	jmp	#LR__0987
0b4fc                 | LR__0983
0b4fc     0F 13 02 FB | 	rdlong	arg01, local01
0b500     20 88 B1 FD | 	call	#__system____builtin_atof
0b504     FD 12 02 F6 | 	mov	arg01, result1
0b508     01 14 06 F6 | 	mov	arg02, #1
0b50c     D0 84 B1 FD | 	call	#__system___float_tointeger
0b510     2C 00 90 FD | 	jmp	#LR__0987
0b514                 | LR__0984
0b514     0F 13 02 FB | 	rdlong	arg01, local01
0b518     08 FF BF FD | 	call	#_convertstring
0b51c     FD 12 02 F6 | 	mov	arg01, result1
0b520     00 88 B1 FD | 	call	#__system____builtin_atof
0b524     FD 12 02 F6 | 	mov	arg01, result1
0b528     01 14 06 F6 | 	mov	arg02, #1
0b52c     B0 84 B1 FD | 	call	#__system___float_tointeger
0b530     0C 00 90 FD | 	jmp	#LR__0987
0b534                 | LR__0985
0b534     0F FB 01 FB | 	rdlong	result1, local01
0b538     04 00 90 FD | 	jmp	#LR__0987
0b53c                 | LR__0986
0b53c     00 FA 05 F6 | 	mov	result1, #0
0b540                 | LR__0987
0b540     A7 F0 03 F6 | 	mov	ptra, fp
0b544     B2 00 A0 FD | 	call	#popregs_
0b548                 | _converttoint_ret
0b548     2D 00 64 FD | 	ret
0b54c                 | 
0b54c                 | ' 
0b54c                 | ' ' converts a variable to float
0b54c                 | ' 
0b54c                 | ' function converttofloat (t1 as expr_result) as single
0b54c                 | _converttofloat
0b54c     03 4A 05 F6 | 	mov	COUNT_, #3
0b550     A8 00 A0 FD | 	call	#pushregs_
0b554     09 1F 02 F6 | 	mov	local01, arg01
0b558                 | ' 
0b558                 | ' select case t1.result_type
0b558     08 1E 06 F1 | 	add	local01, #8
0b55c     0F 21 02 FB | 	rdlong	local02, local01
0b560     08 1E 86 F1 | 	sub	local01, #8
0b564     1C 20 0E F2 | 	cmp	local02, #28 wz
0b568     24 00 90 AD |  if_e	jmp	#LR__0990
0b56c     1D 20 0E F2 | 	cmp	local02, #29 wz
0b570     38 00 90 AD |  if_e	jmp	#LR__0991
0b574     1E 20 0E F2 | 	cmp	local02, #30 wz
0b578     3C 00 90 AD |  if_e	jmp	#LR__0992
0b57c     1F 20 0E F2 | 	cmp	local02, #31 wz
0b580     3C 00 90 AD |  if_e	jmp	#LR__0993
0b584     2B 20 0E F2 | 	cmp	local02, #43 wz
0b588     40 00 90 AD |  if_e	jmp	#LR__0994
0b58c     50 00 90 FD | 	jmp	#LR__0995
0b590                 | LR__0990
0b590     0F 13 02 FB | 	rdlong	arg01, local01
0b594     09 13 52 F6 | 	abs	arg01, arg01 wc
0b598     1F 22 C6 C9 |  if_b	decod	local03, #31
0b59c     00 22 06 36 |  if_ae	mov	local03, #0
0b5a0     70 7B B1 FD | 	call	#__system___float_fromuns
0b5a4     11 FB 61 F5 | 	xor	result1, local03
0b5a8     38 00 90 FD | 	jmp	#LR__0996
0b5ac                 | LR__0991
0b5ac     0F 13 02 FB | 	rdlong	arg01, local01
0b5b0     60 7B B1 FD | 	call	#__system___float_fromuns
0b5b4     2C 00 90 FD | 	jmp	#LR__0996
0b5b8                 | LR__0992
0b5b8     0F FB 01 FB | 	rdlong	result1, local01
0b5bc     24 00 90 FD | 	jmp	#LR__0996
0b5c0                 | LR__0993
0b5c0     0F 13 02 FB | 	rdlong	arg01, local01
0b5c4     5C 87 B1 FD | 	call	#__system____builtin_atof
0b5c8     18 00 90 FD | 	jmp	#LR__0996
0b5cc                 | LR__0994
0b5cc     0F 13 02 FB | 	rdlong	arg01, local01
0b5d0     50 FE BF FD | 	call	#_convertstring
0b5d4     FD 12 02 F6 | 	mov	arg01, result1
0b5d8     48 87 B1 FD | 	call	#__system____builtin_atof
0b5dc     04 00 90 FD | 	jmp	#LR__0996
0b5e0                 | LR__0995
0b5e0     00 FA 05 F6 | 	mov	result1, #0
0b5e4                 | LR__0996
0b5e4     A7 F0 03 F6 | 	mov	ptra, fp
0b5e8     B2 00 A0 FD | 	call	#popregs_
0b5ec                 | _converttofloat_ret
0b5ec     2D 00 64 FD | 	ret
0b5f0                 | 
0b5f0                 | ' 
0b5f0                 | ' '----------------- End of converting 
0b5f0                 | ' 
0b5f0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b5f0                 | ' '----- A nostalgic experiment with saving the program on a cassette tape ----------------------------------------------------------------
0b5f0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b5f0                 | ' 
0b5f0                 | ' sub csave_block(address as ulong)
0b5f0                 | _csave_block
0b5f0     09 01 02 F6 | 	mov	_var01, arg01
0b5f4                 | ' 
0b5f4                 | ' for i=0 to 63 step 2
0b5f4     00 02 06 F6 | 	mov	_var02, #0
0b5f8                 | LR__1000
0b5f8                 | '   do: loop until lpeek(base+64*7)>32768
0b5f8     37 00 00 FF 
0b5fc     10 E4 05 F1 | 	add	objptr, ##28176
0b600     97 0C 48 FB | 	callpa	#(@LR__1002-@LR__1001)>>2,fcache_load_ptr_
0b604                 | LR__1001
0b604     F2 12 02 FB | 	rdlong	arg01, objptr
0b608     C0 13 06 F1 | 	add	arg01, #448
0b60c     09 FB 01 FB | 	rdlong	result1, arg01
0b610     40 00 00 FF 
0b614     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0b618     E8 FF 9F CD |  if_b	jmp	#LR__1001
0b61c                 | LR__1002
0b61c     00 13 02 F6 | 	mov	arg01, _var01
0b620     01 05 02 F6 | 	mov	_var03, _var02
0b624     02 04 66 F0 | 	shl	_var03, #2
0b628     02 13 02 F1 | 	add	arg01, _var03
0b62c     09 07 02 FB | 	rdlong	_var04, arg01
0b630     1A 00 00 FF 
0b634     FC E5 05 F1 | 	add	objptr, ##13820
0b638     F2 06 62 FC | 	wrlong	_var04, objptr
0b63c     52 00 00 FF 
0b640     0C E4 85 F1 | 	sub	objptr, ##41996
0b644                 | '   q=lpeek(address+4*i)
0b644                 | '      for bit=0 to 31
0b644     00 08 06 F6 | 	mov	_var05, #0
0b648     97 84 48 FB | 	callpa	#(@LR__1007-@LR__1003)>>2,fcache_load_ptr_
0b64c                 | LR__1003
0b64c                 | '       if (q and (1 shl bit)) then sample(4*bit)=127: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=128 else sample(4*bit)=128: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=127
0b64c     52 00 00 FF 
0b650     0C E4 05 F1 | 	add	objptr, ##41996
0b654     F2 06 02 FB | 	rdlong	_var04, objptr
0b658     52 00 00 FF 
0b65c     0C E4 85 F1 | 	sub	objptr, ##41996
0b660     04 05 C2 F9 | 	decod	_var03, _var05
0b664     02 07 CA F7 | 	test	_var04, _var03 wz
0b668     60 00 90 AD |  if_e	jmp	#LR__1004
0b66c     04 05 02 F6 | 	mov	_var03, _var05
0b670     02 04 66 F0 | 	shl	_var03, #2
0b674     4D 00 00 FF 
0b678     B4 E5 05 F1 | 	add	objptr, ##39860
0b67c     F2 04 02 F1 | 	add	_var03, objptr
0b680     02 FF 48 FC | 	wrbyte	#127, _var03
0b684     04 05 02 F6 | 	mov	_var03, _var05
0b688     02 04 66 F0 | 	shl	_var03, #2
0b68c     01 04 06 F1 | 	add	_var03, #1
0b690     F2 04 02 F1 | 	add	_var03, objptr
0b694     02 01 49 FC | 	wrbyte	#128, _var03
0b698     04 05 02 F6 | 	mov	_var03, _var05
0b69c     02 04 66 F0 | 	shl	_var03, #2
0b6a0     02 04 06 F1 | 	add	_var03, #2
0b6a4     F2 04 02 F1 | 	add	_var03, objptr
0b6a8     02 FF 48 FC | 	wrbyte	#127, _var03
0b6ac     04 05 02 F6 | 	mov	_var03, _var05
0b6b0     02 04 66 F0 | 	shl	_var03, #2
0b6b4     03 04 06 F1 | 	add	_var03, #3
0b6b8     F2 04 02 F1 | 	add	_var03, objptr
0b6bc     02 01 49 FC | 	wrbyte	#128, _var03
0b6c0     4D 00 00 FF 
0b6c4     B4 E5 85 F1 | 	sub	objptr, ##39860
0b6c8     5C 00 90 FD | 	jmp	#LR__1005
0b6cc                 | LR__1004
0b6cc     04 05 02 F6 | 	mov	_var03, _var05
0b6d0     02 04 66 F0 | 	shl	_var03, #2
0b6d4     4D 00 00 FF 
0b6d8     B4 E5 05 F1 | 	add	objptr, ##39860
0b6dc     F2 04 02 F1 | 	add	_var03, objptr
0b6e0     02 01 49 FC | 	wrbyte	#128, _var03
0b6e4     04 05 02 F6 | 	mov	_var03, _var05
0b6e8     02 04 66 F0 | 	shl	_var03, #2
0b6ec     01 04 06 F1 | 	add	_var03, #1
0b6f0     F2 04 02 F1 | 	add	_var03, objptr
0b6f4     02 01 49 FC | 	wrbyte	#128, _var03
0b6f8     04 05 02 F6 | 	mov	_var03, _var05
0b6fc     02 04 66 F0 | 	shl	_var03, #2
0b700     02 04 06 F1 | 	add	_var03, #2
0b704     F2 04 02 F1 | 	add	_var03, objptr
0b708     02 FF 48 FC | 	wrbyte	#127, _var03
0b70c     04 05 02 F6 | 	mov	_var03, _var05
0b710     02 04 66 F0 | 	shl	_var03, #2
0b714     03 04 06 F1 | 	add	_var03, #3
0b718     F2 04 02 F1 | 	add	_var03, objptr
0b71c     02 FF 48 FC | 	wrbyte	#127, _var03
0b720     4D 00 00 FF 
0b724     B4 E5 85 F1 | 	sub	objptr, ##39860
0b728                 | LR__1005
0b728     01 08 06 F1 | 	add	_var05, #1
0b72c     20 08 56 F2 | 	cmps	_var05, #32 wc
0b730     18 FF 9F CD |  if_b	jmp	#LR__1003
0b734                 | '   do: loop until lpeek(base+64*7)<32768
0b734     37 00 00 FF 
0b738     10 E4 05 F1 | 	add	objptr, ##28176
0b73c                 | LR__1006
0b73c     F2 12 02 FB | 	rdlong	arg01, objptr
0b740     C0 13 06 F1 | 	add	arg01, #448
0b744     09 FB 01 FB | 	rdlong	result1, arg01
0b748     40 00 00 FF 
0b74c     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0b750     E8 FF 9F 3D |  if_ae	jmp	#LR__1006
0b754                 | LR__1007
0b754     00 13 02 F6 | 	mov	arg01, _var01
0b758     04 12 06 F1 | 	add	arg01, #4
0b75c     01 05 02 F6 | 	mov	_var03, _var02
0b760     02 04 66 F0 | 	shl	_var03, #2
0b764     02 13 02 F1 | 	add	arg01, _var03
0b768     09 07 02 FB | 	rdlong	_var04, arg01
0b76c     1A 00 00 FF 
0b770     FC E5 05 F1 | 	add	objptr, ##13820
0b774     F2 06 62 FC | 	wrlong	_var04, objptr
0b778     52 00 00 FF 
0b77c     0C E4 85 F1 | 	sub	objptr, ##41996
0b780                 | '   q=lpeek(address+4+4*i)
0b780                 | '      for bit=0 to 31
0b780     00 08 06 F6 | 	mov	_var05, #0
0b784     97 94 48 FB | 	callpa	#(@LR__1011-@LR__1008)>>2,fcache_load_ptr_
0b788                 | LR__1008
0b788                 | '       if (q and (1 shl bit)) then sample(128+4*bit)=127: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=128 else sample(128+4*bit)=128: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=127
0b788     52 00 00 FF 
0b78c     0C E4 05 F1 | 	add	objptr, ##41996
0b790     F2 06 02 FB | 	rdlong	_var04, objptr
0b794     52 00 00 FF 
0b798     0C E4 85 F1 | 	sub	objptr, ##41996
0b79c     04 05 C2 F9 | 	decod	_var03, _var05
0b7a0     02 07 CA F7 | 	test	_var04, _var03 wz
0b7a4     80 00 90 AD |  if_e	jmp	#LR__1009
0b7a8     04 0B 02 F6 | 	mov	_var06, _var05
0b7ac     02 0A 66 F0 | 	shl	_var06, #2
0b7b0     80 04 06 F6 | 	mov	_var03, #128
0b7b4     05 05 02 F1 | 	add	_var03, _var06
0b7b8     4D 00 00 FF 
0b7bc     B4 E5 05 F1 | 	add	objptr, ##39860
0b7c0     F2 04 02 F1 | 	add	_var03, objptr
0b7c4     02 FF 48 FC | 	wrbyte	#127, _var03
0b7c8     04 0B 02 F6 | 	mov	_var06, _var05
0b7cc     02 0A 66 F0 | 	shl	_var06, #2
0b7d0     80 04 06 F6 | 	mov	_var03, #128
0b7d4     05 05 02 F1 | 	add	_var03, _var06
0b7d8     01 04 06 F1 | 	add	_var03, #1
0b7dc     F2 04 02 F1 | 	add	_var03, objptr
0b7e0     02 01 49 FC | 	wrbyte	#128, _var03
0b7e4     04 0B 02 F6 | 	mov	_var06, _var05
0b7e8     02 0A 66 F0 | 	shl	_var06, #2
0b7ec     80 04 06 F6 | 	mov	_var03, #128
0b7f0     05 05 02 F1 | 	add	_var03, _var06
0b7f4     02 04 06 F1 | 	add	_var03, #2
0b7f8     F2 04 02 F1 | 	add	_var03, objptr
0b7fc     02 FF 48 FC | 	wrbyte	#127, _var03
0b800     04 0B 02 F6 | 	mov	_var06, _var05
0b804     02 0A 66 F0 | 	shl	_var06, #2
0b808     80 04 06 F6 | 	mov	_var03, #128
0b80c     05 05 02 F1 | 	add	_var03, _var06
0b810     03 04 06 F1 | 	add	_var03, #3
0b814     F2 04 02 F1 | 	add	_var03, objptr
0b818     02 01 49 FC | 	wrbyte	#128, _var03
0b81c     4D 00 00 FF 
0b820     B4 E5 85 F1 | 	sub	objptr, ##39860
0b824     7C 00 90 FD | 	jmp	#LR__1010
0b828                 | LR__1009
0b828     04 0B 02 F6 | 	mov	_var06, _var05
0b82c     02 0A 66 F0 | 	shl	_var06, #2
0b830     80 04 06 F6 | 	mov	_var03, #128
0b834     05 05 02 F1 | 	add	_var03, _var06
0b838     4D 00 00 FF 
0b83c     B4 E5 05 F1 | 	add	objptr, ##39860
0b840     F2 04 02 F1 | 	add	_var03, objptr
0b844     02 01 49 FC | 	wrbyte	#128, _var03
0b848     04 0B 02 F6 | 	mov	_var06, _var05
0b84c     02 0A 66 F0 | 	shl	_var06, #2
0b850     80 04 06 F6 | 	mov	_var03, #128
0b854     05 05 02 F1 | 	add	_var03, _var06
0b858     01 04 06 F1 | 	add	_var03, #1
0b85c     F2 04 02 F1 | 	add	_var03, objptr
0b860     02 01 49 FC | 	wrbyte	#128, _var03
0b864     04 0B 02 F6 | 	mov	_var06, _var05
0b868     02 0A 66 F0 | 	shl	_var06, #2
0b86c     80 04 06 F6 | 	mov	_var03, #128
0b870     05 05 02 F1 | 	add	_var03, _var06
0b874     02 04 06 F1 | 	add	_var03, #2
0b878     F2 04 02 F1 | 	add	_var03, objptr
0b87c     02 FF 48 FC | 	wrbyte	#127, _var03
0b880     04 0B 02 F6 | 	mov	_var06, _var05
0b884     02 0A 66 F0 | 	shl	_var06, #2
0b888     80 04 06 F6 | 	mov	_var03, #128
0b88c     05 05 02 F1 | 	add	_var03, _var06
0b890     03 04 06 F1 | 	add	_var03, #3
0b894     F2 04 02 F1 | 	add	_var03, objptr
0b898     02 FF 48 FC | 	wrbyte	#127, _var03
0b89c     4D 00 00 FF 
0b8a0     B4 E5 85 F1 | 	sub	objptr, ##39860
0b8a4                 | LR__1010
0b8a4     01 08 06 F1 | 	add	_var05, #1
0b8a8     20 08 56 F2 | 	cmps	_var05, #32 wc
0b8ac     D8 FE 9F CD |  if_b	jmp	#LR__1008
0b8b0                 | LR__1011
0b8b0     02 02 06 F1 | 	add	_var02, #2
0b8b4     40 02 56 F2 | 	cmps	_var02, #64 wc
0b8b8     3C FD 9F CD |  if_b	jmp	#LR__1000
0b8bc                 | ' do: loop until lpeek(base+64*7)>32768
0b8bc     37 00 00 FF 
0b8c0     10 E4 05 F1 | 	add	objptr, ##28176
0b8c4     97 84 48 FB | 	callpa	#(@LR__1020-@LR__1012)>>2,fcache_load_ptr_
0b8c8                 | LR__1012
0b8c8     F2 12 02 FB | 	rdlong	arg01, objptr
0b8cc     C0 13 06 F1 | 	add	arg01, #448
0b8d0     09 FB 01 FB | 	rdlong	result1, arg01
0b8d4     40 00 00 FF 
0b8d8     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0b8dc     E8 FF 9F CD |  if_b	jmp	#LR__1012
0b8e0     37 00 00 FF 
0b8e4     10 E4 85 F1 | 	sub	objptr, ##28176
0b8e8                 | ' for i=0 to 127: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0b8e8     00 02 06 F6 | 	mov	_var02, #0
0b8ec                 | LR__1013
0b8ec     01 07 52 F6 | 	abs	_var04, _var02 wc
0b8f0     07 06 06 F5 | 	and	_var04, #7
0b8f4     03 07 82 F6 | 	negc	_var04, _var04
0b8f8     04 06 56 F2 | 	cmps	_var04, #4 wc
0b8fc     20 00 90 3D |  if_ae	jmp	#LR__1014
0b900     01 0B 02 F6 | 	mov	_var06, _var02
0b904     4D 00 00 FF 
0b908     B4 E5 05 F1 | 	add	objptr, ##39860
0b90c     F2 0A 02 F1 | 	add	_var06, objptr
0b910     05 FF 48 FC | 	wrbyte	#127, _var06
0b914     4D 00 00 FF 
0b918     B4 E5 85 F1 | 	sub	objptr, ##39860
0b91c     1C 00 90 FD | 	jmp	#LR__1015
0b920                 | LR__1014
0b920     01 0B 02 F6 | 	mov	_var06, _var02
0b924     4D 00 00 FF 
0b928     B4 E5 05 F1 | 	add	objptr, ##39860
0b92c     F2 0A 02 F1 | 	add	_var06, objptr
0b930     05 01 49 FC | 	wrbyte	#128, _var06
0b934     4D 00 00 FF 
0b938     B4 E5 85 F1 | 	sub	objptr, ##39860
0b93c                 | LR__1015
0b93c     01 02 06 F1 | 	add	_var02, #1
0b940     80 02 56 F2 | 	cmps	_var02, #128 wc
0b944     A4 FF 9F CD |  if_b	jmp	#LR__1013
0b948                 | ' 
0b948                 | ' do: loop until lpeek(base+64*7)<32768
0b948     37 00 00 FF 
0b94c     10 E4 05 F1 | 	add	objptr, ##28176
0b950                 | LR__1016
0b950     F2 12 02 FB | 	rdlong	arg01, objptr
0b954     C0 13 06 F1 | 	add	arg01, #448
0b958     09 FB 01 FB | 	rdlong	result1, arg01
0b95c     40 00 00 FF 
0b960     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0b964     E8 FF 9F 3D |  if_ae	jmp	#LR__1016
0b968     37 00 00 FF 
0b96c     10 E4 85 F1 | 	sub	objptr, ##28176
0b970                 | ' for i=128 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0b970     80 02 06 F6 | 	mov	_var02, #128
0b974                 | LR__1017
0b974     01 07 52 F6 | 	abs	_var04, _var02 wc
0b978     07 06 06 F5 | 	and	_var04, #7
0b97c     03 07 82 F6 | 	negc	_var04, _var04
0b980     04 06 56 F2 | 	cmps	_var04, #4 wc
0b984     20 00 90 3D |  if_ae	jmp	#LR__1018
0b988     01 0B 02 F6 | 	mov	_var06, _var02
0b98c     4D 00 00 FF 
0b990     B4 E5 05 F1 | 	add	objptr, ##39860
0b994     F2 0A 02 F1 | 	add	_var06, objptr
0b998     05 FF 48 FC | 	wrbyte	#127, _var06
0b99c     4D 00 00 FF 
0b9a0     B4 E5 85 F1 | 	sub	objptr, ##39860
0b9a4     1C 00 90 FD | 	jmp	#LR__1019
0b9a8                 | LR__1018
0b9a8     01 0B 02 F6 | 	mov	_var06, _var02
0b9ac     4D 00 00 FF 
0b9b0     B4 E5 05 F1 | 	add	objptr, ##39860
0b9b4     F2 0A 02 F1 | 	add	_var06, objptr
0b9b8     05 01 49 FC | 	wrbyte	#128, _var06
0b9bc     4D 00 00 FF 
0b9c0     B4 E5 85 F1 | 	sub	objptr, ##39860
0b9c4                 | LR__1019
0b9c4     01 02 06 F1 | 	add	_var02, #1
0b9c8     00 03 16 F2 | 	cmp	_var02, #256 wc
0b9cc     A4 FF 9F CD |  if_b	jmp	#LR__1017
0b9d0                 | LR__1020
0b9d0                 | _csave_block_ret
0b9d0     2D 00 64 FD | 	ret
0b9d4                 | 
0b9d4                 | ' 
0b9d4                 | ' sub csave_addtoblock(d as ubyte, force as ubyte)
0b9d4                 | _csave_addtoblock
0b9d4     04 4A 05 F6 | 	mov	COUNT_, #4
0b9d8     A8 00 A0 FD | 	call	#pushregs_
0b9dc     09 1F 02 F6 | 	mov	local01, arg01
0b9e0                 | ' 
0b9e0                 | ' if force=0 then
0b9e0     07 14 4E F7 | 	zerox	arg02, #7 wz
0b9e4     78 00 90 5D |  if_ne	jmp	#LR__1030
0b9e8     50 00 00 FF 
0b9ec     B4 E4 05 F1 | 	add	objptr, ##41140
0b9f0     F2 14 02 FB | 	rdlong	arg02, objptr
0b9f4     02 00 00 FF 
0b9f8     00 E4 85 F1 | 	sub	objptr, ##1024
0b9fc     F2 14 02 F1 | 	add	arg02, objptr
0ba00     0A 1F 42 FC | 	wrbyte	local01, arg02
0ba04     02 00 00 FF 
0ba08     00 E4 05 F1 | 	add	objptr, ##1024
0ba0c     F2 1E 02 FB | 	rdlong	local01, objptr
0ba10     01 1E 06 F1 | 	add	local01, #1
0ba14     F2 1E 62 FC | 	wrlong	local01, objptr
0ba18                 | '   block(blockptr)=d
0ba18                 | '   blockptr+=1
0ba18                 | '   if blockptr>=255 then
0ba18     50 00 00 FF 
0ba1c     B4 E4 85 F1 | 	sub	objptr, ##41140
0ba20     FF 1E 16 F2 | 	cmp	local01, #255 wc
0ba24     E4 00 90 CD |  if_b	jmp	#LR__1034
0ba28     4E 00 00 FF 
0ba2c     B4 E4 05 F1 | 	add	objptr, ##40116
0ba30     F2 12 02 F6 | 	mov	arg01, objptr
0ba34     4E 00 00 FF 
0ba38     B4 E4 85 F1 | 	sub	objptr, ##40116
0ba3c     B0 FB BF FD | 	call	#_csave_block
0ba40     50 00 00 FF 
0ba44     B4 E4 05 F1 | 	add	objptr, ##41140
0ba48     F2 00 68 FC | 	wrlong	#0, objptr
0ba4c     50 00 00 FF 
0ba50     B4 E4 85 F1 | 	sub	objptr, ##41140
0ba54     2C 13 06 F6 | 	mov	arg01, #300
0ba58     FC 51 B1 FD | 	call	#__system___waitms
0ba5c     AC 00 90 FD | 	jmp	#LR__1034
0ba60                 | LR__1030
0ba60     50 00 00 FF 
0ba64     B4 E4 05 F1 | 	add	objptr, ##41140
0ba68     F2 20 02 FB | 	rdlong	local02, objptr
0ba6c     02 00 00 FF 
0ba70     00 E4 85 F1 | 	sub	objptr, ##1024
0ba74     F2 20 02 F1 | 	add	local02, objptr
0ba78     10 1F 42 FC | 	wrbyte	local01, local02
0ba7c                 | '   block(blockptr)=d
0ba7c                 | '   if blockptr<255 then for i=blockptr to 255 : block(i)=0 : next i 
0ba7c     02 00 00 FF 
0ba80     00 E4 05 F1 | 	add	objptr, ##1024
0ba84     F2 22 02 FB | 	rdlong	local03, objptr
0ba88     50 00 00 FF 
0ba8c     B4 E4 85 F1 | 	sub	objptr, ##41140
0ba90     FF 22 16 F2 | 	cmp	local03, #255 wc
0ba94     40 00 90 3D |  if_ae	jmp	#LR__1033
0ba98     50 00 00 FF 
0ba9c     B4 E4 05 F1 | 	add	objptr, ##41140
0baa0     F2 24 02 FB | 	rdlong	local04, objptr
0baa4     50 00 00 FF 
0baa8     B4 E4 85 F1 | 	sub	objptr, ##41140
0baac                 | LR__1031
0baac     00 25 56 F2 | 	cmps	local04, #256 wc
0bab0     24 00 90 3D |  if_ae	jmp	#LR__1032
0bab4     12 21 02 F6 | 	mov	local02, local04
0bab8     4E 00 00 FF 
0babc     B4 E4 05 F1 | 	add	objptr, ##40116
0bac0     F2 20 02 F1 | 	add	local02, objptr
0bac4     10 01 48 FC | 	wrbyte	#0, local02
0bac8     01 24 06 F1 | 	add	local04, #1
0bacc     4E 00 00 FF 
0bad0     B4 E4 85 F1 | 	sub	objptr, ##40116
0bad4     D4 FF 9F FD | 	jmp	#LR__1031
0bad8                 | LR__1032
0bad8                 | LR__1033
0bad8     4E 00 00 FF 
0badc     B4 E4 05 F1 | 	add	objptr, ##40116
0bae0     F2 12 02 F6 | 	mov	arg01, objptr
0bae4     4E 00 00 FF 
0bae8     B4 E4 85 F1 | 	sub	objptr, ##40116
0baec     00 FB BF FD | 	call	#_csave_block
0baf0     50 00 00 FF 
0baf4     B4 E4 05 F1 | 	add	objptr, ##41140
0baf8     F2 00 68 FC | 	wrlong	#0, objptr
0bafc     50 00 00 FF 
0bb00     B4 E4 85 F1 | 	sub	objptr, ##41140
0bb04     2C 13 06 F6 | 	mov	arg01, #300
0bb08     4C 51 B1 FD | 	call	#__system___waitms
0bb0c                 | LR__1034
0bb0c     A7 F0 03 F6 | 	mov	ptra, fp
0bb10     B2 00 A0 FD | 	call	#popregs_
0bb14                 | _csave_addtoblock_ret
0bb14     2D 00 64 FD | 	ret
0bb18                 | 
0bb18                 | ' 
0bb18                 | ' '----------------------- csave
0bb18                 | ' 
0bb18                 | ' sub test_csave
0bb18                 | _test_csave
0bb18     04 4A 05 F6 | 	mov	COUNT_, #4
0bb1c     A8 00 A0 FD | 	call	#pushregs_
0bb20     C0 F0 07 F1 | 	add	ptra, #192
0bb24                 | ' 'dim fileheader,savestart, saveptr as ulong
0bb24                 | ' 
0bb24                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0bb24     4A 00 00 FF 
0bb28     88 E4 05 F1 | 	add	objptr, ##38024
0bb2c     F2 12 02 FB | 	rdlong	arg01, objptr
0bb30     4A 00 00 FF 
0bb34     88 E4 85 F1 | 	sub	objptr, ##38024
0bb38     2C 1B B1 FD | 	call	#_pslpeek
0bb3c     FF FF 7F FF 
0bb40     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0bb44     0C 00 90 5D |  if_ne	jmp	#LR__1040
0bb48     1B 12 06 F6 | 	mov	arg01, #27
0bb4c     84 18 B1 FD | 	call	#_printerror
0bb50     1C 03 90 FD | 	jmp	#LR__1054
0bb54                 | LR__1040
0bb54     54 F7 BF FD | 	call	#_pop
0bb58     90 4E 05 F1 | 	add	fp, #144
0bb5c     A7 FA 61 FC | 	wrlong	result1, fp
0bb60     04 4E 05 F1 | 	add	fp, #4
0bb64     A7 FC 61 FC | 	wrlong	result2, fp
0bb68     04 4E 05 F1 | 	add	fp, #4
0bb6c     A7 FE 61 FC | 	wrlong	result3, fp
0bb70                 | ' t1=pop()
0bb70                 | ' if t1.result_type<>result_string then name$=loadname else name$=t1.result.sresult
0bb70     98 4E 85 F1 | 	sub	fp, #152
0bb74     1F FE 0D F2 | 	cmp	result3, #31 wz
0bb78     24 00 90 AD |  if_e	jmp	#LR__1041
0bb7c     51 00 00 FF 
0bb80     D8 E5 05 F1 | 	add	objptr, ##41944
0bb84     F2 1C 02 FB | 	rdlong	arg06, objptr
0bb88     51 00 00 FF 
0bb8c     D8 E5 85 F1 | 	sub	objptr, ##41944
0bb90     8C 4E 05 F1 | 	add	fp, #140
0bb94     A7 1C 62 FC | 	wrlong	arg06, fp
0bb98     8C 4E 85 F1 | 	sub	fp, #140
0bb9c     14 00 90 FD | 	jmp	#LR__1042
0bba0                 | LR__1041
0bba0     90 4E 05 F1 | 	add	fp, #144
0bba4     A7 1C 02 FB | 	rdlong	arg06, fp
0bba8     04 4E 85 F1 | 	sub	fp, #4
0bbac     A7 1C 62 FC | 	wrlong	arg06, fp
0bbb0     8C 4E 85 F1 | 	sub	fp, #140
0bbb4                 | LR__1042
0bbb4                 | ' 
0bbb4                 | ' ' prepare 1 kHz header wave
0bbb4                 | ' 
0bbb4                 | ' for i=0 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0bbb4     A7 00 68 FC | 	wrlong	#0, fp
0bbb8     97 34 48 FB | 	callpa	#(@LR__1046-@LR__1043)>>2,fcache_load_ptr_
0bbbc                 | LR__1043
0bbbc     A7 1C 02 FB | 	rdlong	arg06, fp
0bbc0     0E 1B 52 F6 | 	abs	arg05, arg06 wc
0bbc4     07 1A 06 F5 | 	and	arg05, #7
0bbc8     0D 1B 82 F6 | 	negc	arg05, arg05
0bbcc     04 1A 56 F2 | 	cmps	arg05, #4 wc
0bbd0     20 00 90 3D |  if_ae	jmp	#LR__1044
0bbd4     A7 1A 02 FB | 	rdlong	arg05, fp
0bbd8     4D 00 00 FF 
0bbdc     B4 E5 05 F1 | 	add	objptr, ##39860
0bbe0     F2 1A 02 F1 | 	add	arg05, objptr
0bbe4     0D FF 48 FC | 	wrbyte	#127, arg05
0bbe8     4D 00 00 FF 
0bbec     B4 E5 85 F1 | 	sub	objptr, ##39860
0bbf0     1C 00 90 FD | 	jmp	#LR__1045
0bbf4                 | LR__1044
0bbf4     A7 1A 02 FB | 	rdlong	arg05, fp
0bbf8     4D 00 00 FF 
0bbfc     B4 E5 05 F1 | 	add	objptr, ##39860
0bc00     F2 1A 02 F1 | 	add	arg05, objptr
0bc04     0D 01 49 FC | 	wrbyte	#128, arg05
0bc08     4D 00 00 FF 
0bc0c     B4 E5 85 F1 | 	sub	objptr, ##39860
0bc10                 | LR__1045
0bc10     A7 1A 02 FB | 	rdlong	arg05, fp
0bc14     01 1A 06 F1 | 	add	arg05, #1
0bc18     A7 1A 62 FC | 	wrlong	arg05, fp
0bc1c     00 1B 56 F2 | 	cmps	arg05, #256 wc
0bc20     98 FF 9F CD |  if_b	jmp	#LR__1043
0bc24                 | LR__1046
0bc24     4D 00 00 FF 
0bc28     B4 E5 05 F1 | 	add	objptr, ##39860
0bc2c     F2 14 02 F6 | 	mov	arg02, objptr
0bc30     07 12 06 F6 | 	mov	arg01, #7
0bc34     0F 00 00 FF 
0bc38     40 17 06 F6 | 	mov	arg03, ##8000
0bc3c     0E 18 C6 F9 | 	decod	arg04, #14
0bc40     00 1B 06 F6 | 	mov	arg05, #256
0bc44     00 1C 06 F6 | 	mov	arg06, #0
0bc48     42 00 00 FF 
0bc4c     E8 E4 85 F1 | 	sub	objptr, ##34024
0bc50     6C 49 B1 FD | 	call	#_audio096_spin2_play8
0bc54     0B 00 00 FF 
0bc58     CC E4 85 F1 | 	sub	objptr, ##5836
0bc5c     05 00 00 FF 
0bc60     B8 13 06 F6 | 	mov	arg01, ##3000
0bc64     F0 4F B1 FD | 	call	#__system___waitms
0bc68     50 00 00 FF 
0bc6c     B4 E4 05 F1 | 	add	objptr, ##41140
0bc70     F2 00 68 FC | 	wrlong	#0, objptr
0bc74     50 00 00 FF 
0bc78     B4 E4 85 F1 | 	sub	objptr, ##41140
0bc7c     72 12 06 F6 | 	mov	arg01, #114
0bc80     00 14 06 F6 | 	mov	arg02, #0
0bc84     4C FD BF FD | 	call	#_csave_addtoblock
0bc88     62 12 06 F6 | 	mov	arg01, #98
0bc8c     00 14 06 F6 | 	mov	arg02, #0
0bc90     40 FD BF FD | 	call	#_csave_addtoblock
0bc94     61 12 06 F6 | 	mov	arg01, #97
0bc98     00 14 06 F6 | 	mov	arg02, #0
0bc9c     34 FD BF FD | 	call	#_csave_addtoblock
0bca0     0D 12 06 F6 | 	mov	arg01, #13
0bca4     00 14 06 F6 | 	mov	arg02, #0
0bca8     28 FD BF FD | 	call	#_csave_addtoblock
0bcac                 | ' paula.play8(7,varptr(sample),8000,16384,256,0)
0bcac                 | ' waitms 3000 
0bcac                 | ' 
0bcac                 | ' blockptr=0
0bcac                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($61,0): csave_addtoblock($0D,0) ' rba+ver(13)
0bcac                 | ' for i=1 to len(name$): csave_addtoblock(asc(mid$(name$,i,1)),0) : next i : csave_addtoblock(0,0) 
0bcac     A7 02 68 FC | 	wrlong	#1, fp
0bcb0     8C 4E 05 F1 | 	add	fp, #140
0bcb4     A7 12 02 FB | 	rdlong	arg01, fp
0bcb8     8C 4E 85 F1 | 	sub	fp, #140
0bcbc     09 1F 02 F6 | 	mov	local01, arg01
0bcc0     97 06 48 FB | 	callpa	#(@LR__1048-@LR__1047)>>2,fcache_load_ptr_
0bcc4                 | LR__1047
0bcc4     0F FB C9 FA | 	rdbyte	result1, local01 wz
0bcc8     01 1E 06 51 |  if_ne	add	local01, #1
0bccc     F4 FF 9F 5D |  if_ne	jmp	#LR__1047
0bcd0                 | LR__1048
0bcd0     09 1F 82 F1 | 	sub	local01, arg01
0bcd4     0F 21 02 F6 | 	mov	local02, local01
0bcd8     01 20 06 F1 | 	add	local02, #1
0bcdc                 | LR__1049
0bcdc     A7 1A 02 FB | 	rdlong	arg05, fp
0bce0     10 1B 52 F2 | 	cmps	arg05, local02 wc
0bce4     34 00 90 3D |  if_ae	jmp	#LR__1050
0bce8     8C 4E 05 F1 | 	add	fp, #140
0bcec     A7 12 02 FB | 	rdlong	arg01, fp
0bcf0     8C 4E 85 F1 | 	sub	fp, #140
0bcf4     A7 14 02 FB | 	rdlong	arg02, fp
0bcf8     01 16 06 F6 | 	mov	arg03, #1
0bcfc     F8 6D B1 FD | 	call	#__system__Mid_S
0bd00     FD 12 C2 FA | 	rdbyte	arg01, result1
0bd04     00 14 06 F6 | 	mov	arg02, #0
0bd08     C8 FC BF FD | 	call	#_csave_addtoblock
0bd0c     A7 1A 02 FB | 	rdlong	arg05, fp
0bd10     01 1A 06 F1 | 	add	arg05, #1
0bd14     A7 1A 62 FC | 	wrlong	arg05, fp
0bd18     C0 FF 9F FD | 	jmp	#LR__1049
0bd1c                 | LR__1050
0bd1c     00 12 06 F6 | 	mov	arg01, #0
0bd20     00 14 06 F6 | 	mov	arg02, #0
0bd24     AC FC BF FD | 	call	#_csave_addtoblock
0bd28     72 12 06 F6 | 	mov	arg01, #114
0bd2c     00 14 06 F6 | 	mov	arg02, #0
0bd30     A0 FC BF FD | 	call	#_csave_addtoblock
0bd34     62 12 06 F6 | 	mov	arg01, #98
0bd38     00 14 06 F6 | 	mov	arg02, #0
0bd3c     94 FC BF FD | 	call	#_csave_addtoblock
0bd40     73 12 06 F6 | 	mov	arg01, #115
0bd44     00 14 06 F6 | 	mov	arg02, #0
0bd48     88 FC BF FD | 	call	#_csave_addtoblock
0bd4c     0D 12 06 F6 | 	mov	arg01, #13
0bd50     00 14 06 F6 | 	mov	arg02, #0
0bd54     7C FC BF FD | 	call	#_csave_addtoblock
0bd58     4A 00 00 FF 
0bd5c     88 E4 05 F1 | 	add	objptr, ##38024
0bd60     F2 22 02 FB | 	rdlong	local03, objptr
0bd64     4A 00 00 FF 
0bd68     88 E4 85 F1 | 	sub	objptr, ##38024
0bd6c     9C 4E 05 F1 | 	add	fp, #156
0bd70     A7 22 62 FC | 	wrlong	local03, fp
0bd74     9C 4E 85 F1 | 	sub	fp, #156
0bd78                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($73,0): csave_addtoblock($0D,0) ' rbs+ver(13)
0bd78                 | ' 
0bd78                 | ' saveptr=programstart
0bd78                 | ' do
0bd78                 | LR__1051
0bd78     A0 4E 05 F1 | 	add	fp, #160
0bd7c     A7 12 02 F6 | 	mov	arg01, fp
0bd80     04 4E 85 F1 | 	sub	fp, #4
0bd84     A7 14 02 FB | 	rdlong	arg02, fp
0bd88     9C 4E 85 F1 | 	sub	fp, #156
0bd8c     18 16 06 F6 | 	mov	arg03, #24
0bd90     0B 00 00 FF 
0bd94     CC E4 05 F1 | 	add	objptr, ##5836
0bd98     88 3F B1 FD | 	call	#_psram_spin2_read1
0bd9c     0C 4E 05 F1 | 	add	fp, #12
0bda0     A7 12 02 F6 | 	mov	arg01, fp
0bda4     9C 4E 05 F1 | 	add	fp, #156
0bda8     A7 14 02 FB | 	rdlong	arg02, fp
0bdac     04 4E 05 F1 | 	add	fp, #4
0bdb0     A7 16 02 FB | 	rdlong	arg03, fp
0bdb4     AC 4E 85 F1 | 	sub	fp, #172
0bdb8     68 3F B1 FD | 	call	#_psram_spin2_read1
0bdbc     0B 00 00 FF 
0bdc0     CC E4 85 F1 | 	sub	objptr, ##5836
0bdc4     AC 4E 05 F1 | 	add	fp, #172
0bdc8     A7 12 02 FB | 	rdlong	arg01, fp
0bdcc     AC 4E 85 F1 | 	sub	fp, #172
0bdd0     00 14 06 F6 | 	mov	arg02, #0
0bdd4     FC FB BF FD | 	call	#_csave_addtoblock
0bdd8                 | ' 
0bdd8                 | '   psram.read1(varptr(header(0)),saveptr,24)
0bdd8                 | '   psram.read1(varptr(linebuf(0)),header(2),header(3))  
0bdd8                 | '   csave_addtoblock(header(3),0) ' that's always <255
0bdd8                 | '   for i=0 to header(3)-1: csave_addtoblock(linebuf(i),0)  :next i
0bdd8     A7 00 68 FC | 	wrlong	#0, fp
0bddc     AC 4E 05 F1 | 	add	fp, #172
0bde0     A7 24 02 FB | 	rdlong	local04, fp
0bde4     AC 4E 85 F1 | 	sub	fp, #172
0bde8                 | LR__1052
0bde8     A7 22 02 FB | 	rdlong	local03, fp
0bdec     12 23 52 F2 | 	cmps	local03, local04 wc
0bdf0     2C 00 90 3D |  if_ae	jmp	#LR__1053
0bdf4     A7 22 02 FB | 	rdlong	local03, fp
0bdf8     0C 4E 05 F1 | 	add	fp, #12
0bdfc     A7 22 02 F1 | 	add	local03, fp
0be00     11 13 C2 FA | 	rdbyte	arg01, local03
0be04     00 14 06 F6 | 	mov	arg02, #0
0be08     0C 4E 85 F1 | 	sub	fp, #12
0be0c     C4 FB BF FD | 	call	#_csave_addtoblock
0be10     A7 22 02 FB | 	rdlong	local03, fp
0be14     01 22 06 F1 | 	add	local03, #1
0be18     A7 22 62 FC | 	wrlong	local03, fp
0be1c     C8 FF 9F FD | 	jmp	#LR__1052
0be20                 | LR__1053
0be20     B4 4E 05 F1 | 	add	fp, #180
0be24     A7 22 02 FB | 	rdlong	local03, fp
0be28     18 4E 85 F1 | 	sub	fp, #24
0be2c     A7 22 62 FC | 	wrlong	local03, fp
0be30     18 4E 05 F1 | 	add	fp, #24
0be34     A7 22 02 FB | 	rdlong	local03, fp
0be38     B4 4E 85 F1 | 	sub	fp, #180
0be3c     FF FF 3F FF 
0be40     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0be44     30 FF 9F 5D |  if_ne	jmp	#LR__1051
0be48     00 12 06 F6 | 	mov	arg01, #0
0be4c     01 14 06 F6 | 	mov	arg02, #1
0be50     80 FB BF FD | 	call	#_csave_addtoblock
0be54     37 00 00 FF 
0be58     10 E4 05 F1 | 	add	objptr, ##28176
0be5c     F2 12 02 FB | 	rdlong	arg01, objptr
0be60     37 00 00 FF 
0be64     10 E4 85 F1 | 	sub	objptr, ##28176
0be68     D4 13 06 F1 | 	add	arg01, #468
0be6c     09 01 58 FC | 	wrword	#0, arg01
0be70                 | LR__1054
0be70     A7 F0 03 F6 | 	mov	ptra, fp
0be74     B2 00 A0 FD | 	call	#popregs_
0be78                 | _test_csave_ret
0be78     2D 00 64 FD | 	ret
0be7c                 | 
0be7c                 | ' 
0be7c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0be7c                 | ' '----- End of cassette procedures -------------------------------------------------------------------------------------------------------
0be7c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0be7c                 | ' 
0be7c                 | ' 
0be7c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0be7c                 | ' '--------------------------------------- Runtime functions ------------------------------------------------------------------------------
0be7c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0be7c                 | ' 
0be7c                 | ' '-------------------- abs
0be7c                 | ' 
0be7c                 | ' sub do_abs
0be7c                 | _do_abs
0be7c     01 4A 05 F6 | 	mov	COUNT_, #1
0be80     A8 00 A0 FD | 	call	#pushregs_
0be84     0C F0 07 F1 | 	add	ptra, #12
0be88     20 F4 BF FD | 	call	#_pop
0be8c     FF 1E 02 F6 | 	mov	local01, result3
0be90     A7 FA 61 FC | 	wrlong	result1, fp
0be94     04 4E 05 F1 | 	add	fp, #4
0be98     A7 FC 61 FC | 	wrlong	result2, fp
0be9c     04 4E 05 F1 | 	add	fp, #4
0bea0     A7 1E 62 FC | 	wrlong	local01, fp
0bea4                 | ' 
0bea4                 | ' t1=pop()
0bea4                 | ' if t1.result_type=result_int then 
0bea4     08 4E 85 F1 | 	sub	fp, #8
0bea8     1C 1E 0E F2 | 	cmp	local01, #28 wz
0beac     A7 12 02 AB |  if_e	rdlong	arg01, fp
0beb0     09 1F 42 A6 |  if_e	abs	local01, arg01
0beb4     A7 1E 62 AC |  if_e	wrlong	local01, fp
0beb8     2C 00 90 AD |  if_e	jmp	#LR__1060
0bebc     08 4E 05 F1 | 	add	fp, #8
0bec0     A7 1E 02 FB | 	rdlong	local01, fp
0bec4     08 4E 85 F1 | 	sub	fp, #8
0bec8     1E 1E 0E F2 | 	cmp	local01, #30 wz
0becc     A7 FA 01 AB |  if_e	rdlong	result1, fp
0bed0     1F FA 05 A4 |  if_e	bitl	result1, #31
0bed4     A7 FA 61 AC |  if_e	wrlong	result1, fp
0bed8     08 4E 05 51 |  if_ne	add	fp, #8
0bedc     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0bee0     08 4E 85 51 |  if_ne	sub	fp, #8
0bee4     A7 50 68 5C |  if_ne	wrlong	#40, fp
0bee8                 | LR__1060
0bee8     A7 12 02 F6 | 	mov	arg01, fp
0beec     54 F4 BF FD | 	call	#_push
0bef0     A7 F0 03 F6 | 	mov	ptra, fp
0bef4     B2 00 A0 FD | 	call	#popregs_
0bef8                 | _do_abs_ret
0bef8     2D 00 64 FD | 	ret
0befc                 | 
0befc                 | ' 
0befc                 | ' '-------------------- acos
0befc                 | ' 
0befc                 | ' sub do_acos
0befc                 | _do_acos
0befc     01 4A 05 F6 | 	mov	COUNT_, #1
0bf00     A8 00 A0 FD | 	call	#pushregs_
0bf04     10 F0 07 F1 | 	add	ptra, #16
0bf08     4A 00 00 FF 
0bf0c     80 E4 05 F1 | 	add	objptr, ##38016
0bf10     F2 1E 02 FB | 	rdlong	local01, objptr
0bf14     0F 17 02 F6 | 	mov	arg03, local01
0bf18     01 16 66 F0 | 	shl	arg03, #1
0bf1c     0F 17 02 F1 | 	add	arg03, local01
0bf20     02 16 66 F0 | 	shl	arg03, #2
0bf24     03 00 00 FF 
0bf28     04 E4 85 F1 | 	sub	objptr, ##1540
0bf2c     F2 16 02 F1 | 	add	arg03, objptr
0bf30     0B 17 02 FB | 	rdlong	arg03, arg03
0bf34     0C 4E 05 F1 | 	add	fp, #12
0bf38     A7 16 62 FC | 	wrlong	arg03, fp
0bf3c                 | ' 
0bf3c                 | ' numpar=compiledline(lineptr_e).result.uresult
0bf3c                 | ' if numpar>1 orelse numpar=0 then print "acos: "; : printerror(39) : return
0bf3c     0C 4E 85 F1 | 	sub	fp, #12
0bf40     02 16 16 F2 | 	cmp	arg03, #2 wc
0bf44     47 00 00 FF 
0bf48     7C E4 85 F1 | 	sub	objptr, ##36476
0bf4c     0C 4E 05 C1 |  if_b	add	fp, #12
0bf50     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
0bf54     0C 4E 85 C1 |  if_b	sub	fp, #12
0bf58     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1070
0bf5c     00 12 06 F6 | 	mov	arg01, #0
0bf60     64 A4 B1 FD | 	call	#__system___getiolock_0540
0bf64     FD 12 02 F6 | 	mov	arg01, result1
0bf68     F8 49 B1 FD | 	call	#__system___lockmem
0bf6c     84 01 00 FF 
0bf70     64 14 06 F6 | 	mov	arg02, ##@LR__5444
0bf74     00 12 06 F6 | 	mov	arg01, #0
0bf78     00 16 06 F6 | 	mov	arg03, #0
0bf7c     D8 56 B1 FD | 	call	#__system___basic_print_string
0bf80     00 12 06 F6 | 	mov	arg01, #0
0bf84     40 A4 B1 FD | 	call	#__system___getiolock_0540
0bf88     FD 00 68 FC | 	wrlong	#0, result1
0bf8c     27 12 06 F6 | 	mov	arg01, #39
0bf90     40 14 B1 FD | 	call	#_printerror
0bf94     64 00 90 FD | 	jmp	#LR__1071
0bf98                 | LR__1070
0bf98     10 F3 BF FD | 	call	#_pop
0bf9c     FF 1E 02 F6 | 	mov	local01, result3
0bfa0     A7 FA 61 FC | 	wrlong	result1, fp
0bfa4     04 4E 05 F1 | 	add	fp, #4
0bfa8     A7 FC 61 FC | 	wrlong	result2, fp
0bfac     04 4E 05 F1 | 	add	fp, #4
0bfb0     A7 1E 62 FC | 	wrlong	local01, fp
0bfb4     08 4E 85 F1 | 	sub	fp, #8
0bfb8     A7 12 02 F6 | 	mov	arg01, fp
0bfbc     8C F5 BF FD | 	call	#_converttofloat
0bfc0     FD 12 02 F6 | 	mov	arg01, result1
0bfc4     90 80 B1 FD | 	call	#__system____builtin_acosf
0bfc8     FD 12 02 F6 | 	mov	arg01, result1
0bfcc     51 00 00 FF 
0bfd0     C0 E5 05 F1 | 	add	objptr, ##41920
0bfd4     F2 14 02 FB | 	rdlong	arg02, objptr
0bfd8     51 00 00 FF 
0bfdc     C0 E5 85 F1 | 	sub	objptr, ##41920
0bfe0     34 75 B1 FD | 	call	#__system___float_mul
0bfe4     A7 FA 61 FC | 	wrlong	result1, fp
0bfe8     08 4E 05 F1 | 	add	fp, #8
0bfec     A7 3C 68 FC | 	wrlong	#30, fp
0bff0     08 4E 85 F1 | 	sub	fp, #8
0bff4     A7 12 02 F6 | 	mov	arg01, fp
0bff8     48 F3 BF FD | 	call	#_push
0bffc                 | LR__1071
0bffc     A7 F0 03 F6 | 	mov	ptra, fp
0c000     B2 00 A0 FD | 	call	#popregs_
0c004                 | _do_acos_ret
0c004     2D 00 64 FD | 	ret
0c008                 | 
0c008                 | ' 
0c008                 | ' '-------------------- asc
0c008                 | ' 
0c008                 | ' sub do_asc
0c008                 | _do_asc
0c008     01 4A 05 F6 | 	mov	COUNT_, #1
0c00c     A8 00 A0 FD | 	call	#pushregs_
0c010     14 F0 07 F1 | 	add	ptra, #20
0c014     4A 00 00 FF 
0c018     80 E4 05 F1 | 	add	objptr, ##38016
0c01c     F2 1E 02 FB | 	rdlong	local01, objptr
0c020     0F 17 02 F6 | 	mov	arg03, local01
0c024     01 16 66 F0 | 	shl	arg03, #1
0c028     0F 17 02 F1 | 	add	arg03, local01
0c02c     02 16 66 F0 | 	shl	arg03, #2
0c030     03 00 00 FF 
0c034     04 E4 85 F1 | 	sub	objptr, ##1540
0c038     F2 16 02 F1 | 	add	arg03, objptr
0c03c     0B 17 02 FB | 	rdlong	arg03, arg03
0c040     0C 4E 05 F1 | 	add	fp, #12
0c044     A7 16 62 FC | 	wrlong	arg03, fp
0c048                 | ' 
0c048                 | ' numpar=compiledline(lineptr_e).result.uresult
0c048                 | ' if numpar>1 orelse numpar=0 then print "asc: "; : printerror(39) : return
0c048     0C 4E 85 F1 | 	sub	fp, #12
0c04c     02 16 16 F2 | 	cmp	arg03, #2 wc
0c050     47 00 00 FF 
0c054     7C E4 85 F1 | 	sub	objptr, ##36476
0c058     0C 4E 05 C1 |  if_b	add	fp, #12
0c05c     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
0c060     0C 4E 85 C1 |  if_b	sub	fp, #12
0c064     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1080
0c068     00 12 06 F6 | 	mov	arg01, #0
0c06c     58 A3 B1 FD | 	call	#__system___getiolock_0540
0c070     FD 12 02 F6 | 	mov	arg01, result1
0c074     EC 48 B1 FD | 	call	#__system___lockmem
0c078     84 01 00 FF 
0c07c     6B 14 06 F6 | 	mov	arg02, ##@LR__5445
0c080     00 12 06 F6 | 	mov	arg01, #0
0c084     00 16 06 F6 | 	mov	arg03, #0
0c088     CC 55 B1 FD | 	call	#__system___basic_print_string
0c08c     00 12 06 F6 | 	mov	arg01, #0
0c090     34 A3 B1 FD | 	call	#__system___getiolock_0540
0c094     FD 00 68 FC | 	wrlong	#0, result1
0c098     27 12 06 F6 | 	mov	arg01, #39
0c09c     34 13 B1 FD | 	call	#_printerror
0c0a0     B0 00 90 FD | 	jmp	#LR__1083
0c0a4                 | LR__1080
0c0a4     04 F2 BF FD | 	call	#_pop
0c0a8     FF 16 02 F6 | 	mov	arg03, result3
0c0ac     A7 FA 61 FC | 	wrlong	result1, fp
0c0b0     04 4E 05 F1 | 	add	fp, #4
0c0b4     A7 FC 61 FC | 	wrlong	result2, fp
0c0b8     04 4E 05 F1 | 	add	fp, #4
0c0bc     A7 16 62 FC | 	wrlong	arg03, fp
0c0c0                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0c0c0     08 4E 85 F1 | 	sub	fp, #8
0c0c4     2B 16 0E F2 | 	cmp	arg03, #43 wz
0c0c8     18 00 90 5D |  if_ne	jmp	#LR__1081
0c0cc     A7 12 02 FB | 	rdlong	arg01, fp
0c0d0     50 F3 BF FD | 	call	#_convertstring
0c0d4     A7 FA 61 FC | 	wrlong	result1, fp
0c0d8     08 4E 05 F1 | 	add	fp, #8
0c0dc     A7 3E 68 FC | 	wrlong	#31, fp
0c0e0     08 4E 85 F1 | 	sub	fp, #8
0c0e4                 | LR__1081
0c0e4                 | ' if t1.result_type<>result_string then print "asc: "; : printerror(15) : return 
0c0e4     08 4E 05 F1 | 	add	fp, #8
0c0e8     A7 16 02 FB | 	rdlong	arg03, fp
0c0ec     08 4E 85 F1 | 	sub	fp, #8
0c0f0     1F 16 0E F2 | 	cmp	arg03, #31 wz
0c0f4     3C 00 90 AD |  if_e	jmp	#LR__1082
0c0f8     00 12 06 F6 | 	mov	arg01, #0
0c0fc     C8 A2 B1 FD | 	call	#__system___getiolock_0540
0c100     FD 12 02 F6 | 	mov	arg01, result1
0c104     5C 48 B1 FD | 	call	#__system___lockmem
0c108     84 01 00 FF 
0c10c     71 14 06 F6 | 	mov	arg02, ##@LR__5446
0c110     00 12 06 F6 | 	mov	arg01, #0
0c114     00 16 06 F6 | 	mov	arg03, #0
0c118     3C 55 B1 FD | 	call	#__system___basic_print_string
0c11c     00 12 06 F6 | 	mov	arg01, #0
0c120     A4 A2 B1 FD | 	call	#__system___getiolock_0540
0c124     FD 00 68 FC | 	wrlong	#0, result1
0c128     0F 12 06 F6 | 	mov	arg01, #15
0c12c     A4 12 B1 FD | 	call	#_printerror
0c130     20 00 90 FD | 	jmp	#LR__1083
0c134                 | LR__1082
0c134     A7 1E 02 FB | 	rdlong	local01, fp
0c138     0F 1F C2 FA | 	rdbyte	local01, local01
0c13c     A7 1E 62 FC | 	wrlong	local01, fp
0c140     08 4E 05 F1 | 	add	fp, #8
0c144     A7 38 68 FC | 	wrlong	#28, fp
0c148     08 4E 85 F1 | 	sub	fp, #8
0c14c     A7 12 02 F6 | 	mov	arg01, fp
0c150     F0 F1 BF FD | 	call	#_push
0c154                 | LR__1083
0c154     A7 F0 03 F6 | 	mov	ptra, fp
0c158     B2 00 A0 FD | 	call	#popregs_
0c15c                 | _do_asc_ret
0c15c     2D 00 64 FD | 	ret
0c160                 | 
0c160                 | ' 
0c160                 | ' '-------------------- asin
0c160                 | ' 
0c160                 | ' sub do_asin
0c160                 | _do_asin
0c160     01 4A 05 F6 | 	mov	COUNT_, #1
0c164     A8 00 A0 FD | 	call	#pushregs_
0c168     10 F0 07 F1 | 	add	ptra, #16
0c16c     4A 00 00 FF 
0c170     80 E4 05 F1 | 	add	objptr, ##38016
0c174     F2 1E 02 FB | 	rdlong	local01, objptr
0c178     0F 17 02 F6 | 	mov	arg03, local01
0c17c     01 16 66 F0 | 	shl	arg03, #1
0c180     0F 17 02 F1 | 	add	arg03, local01
0c184     02 16 66 F0 | 	shl	arg03, #2
0c188     03 00 00 FF 
0c18c     04 E4 85 F1 | 	sub	objptr, ##1540
0c190     F2 16 02 F1 | 	add	arg03, objptr
0c194     0B 17 02 FB | 	rdlong	arg03, arg03
0c198     0C 4E 05 F1 | 	add	fp, #12
0c19c     A7 16 62 FC | 	wrlong	arg03, fp
0c1a0                 | ' 
0c1a0                 | ' numpar=compiledline(lineptr_e).result.uresult
0c1a0                 | ' if numpar>1 orelse numpar=0 then print "asin: "; : printerror(39) : return
0c1a0     0C 4E 85 F1 | 	sub	fp, #12
0c1a4     02 16 16 F2 | 	cmp	arg03, #2 wc
0c1a8     47 00 00 FF 
0c1ac     7C E4 85 F1 | 	sub	objptr, ##36476
0c1b0     0C 4E 05 C1 |  if_b	add	fp, #12
0c1b4     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
0c1b8     0C 4E 85 C1 |  if_b	sub	fp, #12
0c1bc     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1090
0c1c0     00 12 06 F6 | 	mov	arg01, #0
0c1c4     00 A2 B1 FD | 	call	#__system___getiolock_0540
0c1c8     FD 12 02 F6 | 	mov	arg01, result1
0c1cc     94 47 B1 FD | 	call	#__system___lockmem
0c1d0     84 01 00 FF 
0c1d4     77 14 06 F6 | 	mov	arg02, ##@LR__5447
0c1d8     00 12 06 F6 | 	mov	arg01, #0
0c1dc     00 16 06 F6 | 	mov	arg03, #0
0c1e0     74 54 B1 FD | 	call	#__system___basic_print_string
0c1e4     00 12 06 F6 | 	mov	arg01, #0
0c1e8     DC A1 B1 FD | 	call	#__system___getiolock_0540
0c1ec     FD 00 68 FC | 	wrlong	#0, result1
0c1f0     27 12 06 F6 | 	mov	arg01, #39
0c1f4     DC 11 B1 FD | 	call	#_printerror
0c1f8     64 00 90 FD | 	jmp	#LR__1091
0c1fc                 | LR__1090
0c1fc     AC F0 BF FD | 	call	#_pop
0c200     FF 1E 02 F6 | 	mov	local01, result3
0c204     A7 FA 61 FC | 	wrlong	result1, fp
0c208     04 4E 05 F1 | 	add	fp, #4
0c20c     A7 FC 61 FC | 	wrlong	result2, fp
0c210     04 4E 05 F1 | 	add	fp, #4
0c214     A7 1E 62 FC | 	wrlong	local01, fp
0c218     08 4E 85 F1 | 	sub	fp, #8
0c21c     A7 12 02 F6 | 	mov	arg01, fp
0c220     28 F3 BF FD | 	call	#_converttofloat
0c224     FD 12 02 F6 | 	mov	arg01, result1
0c228     E0 7D B1 FD | 	call	#__system____builtin_asinf
0c22c     FD 12 02 F6 | 	mov	arg01, result1
0c230     51 00 00 FF 
0c234     C0 E5 05 F1 | 	add	objptr, ##41920
0c238     F2 14 02 FB | 	rdlong	arg02, objptr
0c23c     51 00 00 FF 
0c240     C0 E5 85 F1 | 	sub	objptr, ##41920
0c244     D0 72 B1 FD | 	call	#__system___float_mul
0c248     A7 FA 61 FC | 	wrlong	result1, fp
0c24c     08 4E 05 F1 | 	add	fp, #8
0c250     A7 3C 68 FC | 	wrlong	#30, fp
0c254     08 4E 85 F1 | 	sub	fp, #8
0c258     A7 12 02 F6 | 	mov	arg01, fp
0c25c     E4 F0 BF FD | 	call	#_push
0c260                 | LR__1091
0c260     A7 F0 03 F6 | 	mov	ptra, fp
0c264     B2 00 A0 FD | 	call	#popregs_
0c268                 | _do_asin_ret
0c268     2D 00 64 FD | 	ret
0c26c                 | 
0c26c                 | ' 
0c26c                 | ' '-------------------- atn
0c26c                 | ' 
0c26c                 | ' sub do_atn
0c26c                 | _do_atn
0c26c     01 4A 05 F6 | 	mov	COUNT_, #1
0c270     A8 00 A0 FD | 	call	#pushregs_
0c274     10 F0 07 F1 | 	add	ptra, #16
0c278     4A 00 00 FF 
0c27c     80 E4 05 F1 | 	add	objptr, ##38016
0c280     F2 1E 02 FB | 	rdlong	local01, objptr
0c284     0F 17 02 F6 | 	mov	arg03, local01
0c288     01 16 66 F0 | 	shl	arg03, #1
0c28c     0F 17 02 F1 | 	add	arg03, local01
0c290     02 16 66 F0 | 	shl	arg03, #2
0c294     03 00 00 FF 
0c298     04 E4 85 F1 | 	sub	objptr, ##1540
0c29c     F2 16 02 F1 | 	add	arg03, objptr
0c2a0     0B 17 02 FB | 	rdlong	arg03, arg03
0c2a4     0C 4E 05 F1 | 	add	fp, #12
0c2a8     A7 16 62 FC | 	wrlong	arg03, fp
0c2ac                 | ' 
0c2ac                 | ' numpar=compiledline(lineptr_e).result.uresult
0c2ac                 | ' if numpar>1 orelse numpar=0 then print "atn: "; : printerror(39) : return
0c2ac     0C 4E 85 F1 | 	sub	fp, #12
0c2b0     02 16 16 F2 | 	cmp	arg03, #2 wc
0c2b4     47 00 00 FF 
0c2b8     7C E4 85 F1 | 	sub	objptr, ##36476
0c2bc     0C 4E 05 C1 |  if_b	add	fp, #12
0c2c0     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
0c2c4     0C 4E 85 C1 |  if_b	sub	fp, #12
0c2c8     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1100
0c2cc     00 12 06 F6 | 	mov	arg01, #0
0c2d0     F4 A0 B1 FD | 	call	#__system___getiolock_0540
0c2d4     FD 12 02 F6 | 	mov	arg01, result1
0c2d8     88 46 B1 FD | 	call	#__system___lockmem
0c2dc     84 01 00 FF 
0c2e0     7E 14 06 F6 | 	mov	arg02, ##@LR__5448
0c2e4     00 12 06 F6 | 	mov	arg01, #0
0c2e8     00 16 06 F6 | 	mov	arg03, #0
0c2ec     68 53 B1 FD | 	call	#__system___basic_print_string
0c2f0     00 12 06 F6 | 	mov	arg01, #0
0c2f4     D0 A0 B1 FD | 	call	#__system___getiolock_0540
0c2f8     FD 00 68 FC | 	wrlong	#0, result1
0c2fc     27 12 06 F6 | 	mov	arg01, #39
0c300     D0 10 B1 FD | 	call	#_printerror
0c304     6C 00 90 FD | 	jmp	#LR__1101
0c308                 | LR__1100
0c308     A0 EF BF FD | 	call	#_pop
0c30c     FF 1E 02 F6 | 	mov	local01, result3
0c310     A7 FA 61 FC | 	wrlong	result1, fp
0c314     04 4E 05 F1 | 	add	fp, #4
0c318     A7 FC 61 FC | 	wrlong	result2, fp
0c31c     04 4E 05 F1 | 	add	fp, #4
0c320     A7 1E 62 FC | 	wrlong	local01, fp
0c324     08 4E 85 F1 | 	sub	fp, #8
0c328     A7 12 02 F6 | 	mov	arg01, fp
0c32c     1C F2 BF FD | 	call	#_converttofloat
0c330     FD 12 02 F6 | 	mov	arg01, result1
0c334     00 C0 1F FF 
0c338     00 14 06 F6 | 	mov	arg02, ##1065353216
0c33c     64 7D B1 FD | 	call	#__system____builtin_atan2f
0c340     FD 12 02 F6 | 	mov	arg01, result1
0c344     51 00 00 FF 
0c348     C0 E5 05 F1 | 	add	objptr, ##41920
0c34c     F2 14 02 FB | 	rdlong	arg02, objptr
0c350     51 00 00 FF 
0c354     C0 E5 85 F1 | 	sub	objptr, ##41920
0c358     BC 71 B1 FD | 	call	#__system___float_mul
0c35c     A7 FA 61 FC | 	wrlong	result1, fp
0c360     08 4E 05 F1 | 	add	fp, #8
0c364     A7 3C 68 FC | 	wrlong	#30, fp
0c368     08 4E 85 F1 | 	sub	fp, #8
0c36c     A7 12 02 F6 | 	mov	arg01, fp
0c370     D0 EF BF FD | 	call	#_push
0c374                 | LR__1101
0c374     A7 F0 03 F6 | 	mov	ptra, fp
0c378     B2 00 A0 FD | 	call	#popregs_
0c37c                 | _do_atn_ret
0c37c     2D 00 64 FD | 	ret
0c380                 | 
0c380                 | ' 
0c380                 | ' '-------------------- beep
0c380                 | ' 
0c380                 | ' sub do_beep
0c380                 | _do_beep
0c380     02 4A 05 F6 | 	mov	COUNT_, #2
0c384     A8 00 A0 FD | 	call	#pushregs_
0c388     20 F0 07 F1 | 	add	ptra, #32
0c38c     1C EF BF FD | 	call	#_pop
0c390     FD 1E 02 F6 | 	mov	local01, result1
0c394     FE 1C 02 F6 | 	mov	arg06, result2
0c398     FF 20 02 F6 | 	mov	local02, result3
0c39c     0C 4E 05 F1 | 	add	fp, #12
0c3a0     A7 1E 62 FC | 	wrlong	local01, fp
0c3a4     04 4E 05 F1 | 	add	fp, #4
0c3a8     A7 1C 62 FC | 	wrlong	arg06, fp
0c3ac     04 4E 05 F1 | 	add	fp, #4
0c3b0     A7 20 62 FC | 	wrlong	local02, fp
0c3b4     14 4E 85 F1 | 	sub	fp, #20
0c3b8     F0 EE BF FD | 	call	#_pop
0c3bc     A7 FA 61 FC | 	wrlong	result1, fp
0c3c0     04 4E 05 F1 | 	add	fp, #4
0c3c4     A7 FC 61 FC | 	wrlong	result2, fp
0c3c8     04 4E 05 F1 | 	add	fp, #4
0c3cc     A7 FE 61 FC | 	wrlong	result3, fp
0c3d0                 | ' 
0c3d0                 | ' t2=pop()
0c3d0                 | ' t1=pop()
0c3d0                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
0c3d0     08 4E 85 F1 | 	sub	fp, #8
0c3d4     1C FE 0D F2 | 	cmp	result3, #28 wz
0c3d8     08 4E 05 51 |  if_ne	add	fp, #8
0c3dc     A7 20 02 5B |  if_ne	rdlong	local02, fp
0c3e0     08 4E 85 51 |  if_ne	sub	fp, #8
0c3e4     1D 20 0E 52 |  if_ne	cmp	local02, #29 wz
0c3e8     A7 1E 02 AB |  if_e	rdlong	local01, fp
0c3ec     18 4E 05 A1 |  if_e	add	fp, #24
0c3f0     A7 1E 62 AC |  if_e	wrlong	local01, fp
0c3f4     18 4E 85 A1 |  if_e	sub	fp, #24
0c3f8     14 00 90 AD |  if_e	jmp	#LR__1110
0c3fc     A7 12 02 F6 | 	mov	arg01, fp
0c400     8C F0 BF FD | 	call	#_converttoint
0c404     18 4E 05 F1 | 	add	fp, #24
0c408     A7 FA 61 FC | 	wrlong	result1, fp
0c40c     18 4E 85 F1 | 	sub	fp, #24
0c410                 | LR__1110
0c410     1C 4E 05 F1 | 	add	fp, #28
0c414     A7 FE 48 FC | 	wrbyte	#127, fp
0c418     01 4E 05 F1 | 	add	fp, #1
0c41c     A7 00 49 FC | 	wrbyte	#128, fp
0c420     01 4E 85 F1 | 	sub	fp, #1
0c424     A7 14 02 F6 | 	mov	arg02, fp
0c428     04 4E 85 F1 | 	sub	fp, #4
0c42c     A7 16 02 FB | 	rdlong	arg03, fp
0c430     18 4E 85 F1 | 	sub	fp, #24
0c434     01 16 66 F0 | 	shl	arg03, #1
0c438     07 12 06 F6 | 	mov	arg01, #7
0c43c     0E 18 C6 F9 | 	decod	arg04, #14
0c440     02 1A 06 F6 | 	mov	arg05, #2
0c444     00 1C 06 F6 | 	mov	arg06, #0
0c448     0B 00 00 FF 
0c44c     CC E4 05 F1 | 	add	objptr, ##5836
0c450     6C 41 B1 FD | 	call	#_audio096_spin2_play8
0c454     0B 00 00 FF 
0c458     CC E4 85 F1 | 	sub	objptr, ##5836
0c45c     0C 4E 05 F1 | 	add	fp, #12
0c460     A7 12 02 F6 | 	mov	arg01, fp
0c464     0C 4E 85 F1 | 	sub	fp, #12
0c468     D8 EE BF FD | 	call	#_push
0c46c     08 EE B0 FD | 	call	#_do_waitms
0c470     07 12 06 F6 | 	mov	arg01, #7
0c474     0B 00 00 FF 
0c478     CC E4 05 F1 | 	add	objptr, ##5836
0c47c     E4 41 B1 FD | 	call	#_audio096_spin2_stop
0c480     0B 00 00 FF 
0c484     CC E4 85 F1 | 	sub	objptr, ##5836
0c488     A7 F0 03 F6 | 	mov	ptra, fp
0c48c     B2 00 A0 FD | 	call	#popregs_
0c490                 | _do_beep_ret
0c490     2D 00 64 FD | 	ret
0c494                 | 
0c494                 | ' 
0c494                 | ' '-------------------- bin$
0c494                 | ' 
0c494                 | ' sub do_bin
0c494                 | _do_bin
0c494     01 4A 05 F6 | 	mov	COUNT_, #1
0c498     A8 00 A0 FD | 	call	#pushregs_
0c49c     18 F0 07 F1 | 	add	ptra, #24
0c4a0     4A 00 00 FF 
0c4a4     80 E4 05 F1 | 	add	objptr, ##38016
0c4a8     F2 1E 02 FB | 	rdlong	local01, objptr
0c4ac     0F 17 02 F6 | 	mov	arg03, local01
0c4b0     01 16 66 F0 | 	shl	arg03, #1
0c4b4     0F 17 02 F1 | 	add	arg03, local01
0c4b8     02 16 66 F0 | 	shl	arg03, #2
0c4bc     03 00 00 FF 
0c4c0     04 E4 85 F1 | 	sub	objptr, ##1540
0c4c4     F2 16 02 F1 | 	add	arg03, objptr
0c4c8     0B 17 02 FB | 	rdlong	arg03, arg03
0c4cc     0C 4E 05 F1 | 	add	fp, #12
0c4d0     A7 16 62 FC | 	wrlong	arg03, fp
0c4d4                 | ' 
0c4d4                 | ' numpar=compiledline(lineptr_e).result.uresult
0c4d4                 | ' if numpar>2 orelse numpar=0 then print "bin$: "; : printerror(39) : return
0c4d4     0C 4E 85 F1 | 	sub	fp, #12
0c4d8     03 16 16 F2 | 	cmp	arg03, #3 wc
0c4dc     47 00 00 FF 
0c4e0     7C E4 85 F1 | 	sub	objptr, ##36476
0c4e4     0C 4E 05 C1 |  if_b	add	fp, #12
0c4e8     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
0c4ec     0C 4E 85 C1 |  if_b	sub	fp, #12
0c4f0     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1120
0c4f4     00 12 06 F6 | 	mov	arg01, #0
0c4f8     CC 9E B1 FD | 	call	#__system___getiolock_0540
0c4fc     FD 12 02 F6 | 	mov	arg01, result1
0c500     60 44 B1 FD | 	call	#__system___lockmem
0c504     84 01 00 FF 
0c508     84 14 06 F6 | 	mov	arg02, ##@LR__5449
0c50c     00 12 06 F6 | 	mov	arg01, #0
0c510     00 16 06 F6 | 	mov	arg03, #0
0c514     40 51 B1 FD | 	call	#__system___basic_print_string
0c518     00 12 06 F6 | 	mov	arg01, #0
0c51c     A8 9E B1 FD | 	call	#__system___getiolock_0540
0c520     FD 00 68 FC | 	wrlong	#0, result1
0c524     27 12 06 F6 | 	mov	arg01, #39
0c528     A8 0E B1 FD | 	call	#_printerror
0c52c     B8 00 90 FD | 	jmp	#LR__1123
0c530                 | LR__1120
0c530                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=0
0c530     0C 4E 05 F1 | 	add	fp, #12
0c534     A7 1E 02 FB | 	rdlong	local01, fp
0c538     0C 4E 85 F1 | 	sub	fp, #12
0c53c     02 1E 0E F2 | 	cmp	local01, #2 wz
0c540     38 00 90 5D |  if_ne	jmp	#LR__1121
0c544     64 ED BF FD | 	call	#_pop
0c548     FF 1E 02 F6 | 	mov	local01, result3
0c54c     A7 FA 61 FC | 	wrlong	result1, fp
0c550     04 4E 05 F1 | 	add	fp, #4
0c554     A7 FC 61 FC | 	wrlong	result2, fp
0c558     04 4E 05 F1 | 	add	fp, #4
0c55c     A7 1E 62 FC | 	wrlong	local01, fp
0c560     08 4E 85 F1 | 	sub	fp, #8
0c564     A7 12 02 F6 | 	mov	arg01, fp
0c568     24 EF BF FD | 	call	#_converttoint
0c56c     14 4E 05 F1 | 	add	fp, #20
0c570     A7 FA 61 FC | 	wrlong	result1, fp
0c574     14 4E 85 F1 | 	sub	fp, #20
0c578     0C 00 90 FD | 	jmp	#LR__1122
0c57c                 | LR__1121
0c57c     14 4E 05 F1 | 	add	fp, #20
0c580     A7 00 68 FC | 	wrlong	#0, fp
0c584     14 4E 85 F1 | 	sub	fp, #20
0c588                 | LR__1122
0c588     20 ED BF FD | 	call	#_pop
0c58c     FF 1E 02 F6 | 	mov	local01, result3
0c590     A7 FA 61 FC | 	wrlong	result1, fp
0c594     04 4E 05 F1 | 	add	fp, #4
0c598     A7 FC 61 FC | 	wrlong	result2, fp
0c59c     04 4E 05 F1 | 	add	fp, #4
0c5a0     A7 1E 62 FC | 	wrlong	local01, fp
0c5a4     08 4E 85 F1 | 	sub	fp, #8
0c5a8     A7 12 02 F6 | 	mov	arg01, fp
0c5ac     E0 EE BF FD | 	call	#_converttoint
0c5b0     10 4E 05 F1 | 	add	fp, #16
0c5b4     A7 FA 61 FC | 	wrlong	result1, fp
0c5b8     FD 12 02 F6 | 	mov	arg01, result1
0c5bc     04 4E 05 F1 | 	add	fp, #4
0c5c0     A7 14 02 FB | 	rdlong	arg02, fp
0c5c4     14 4E 85 F1 | 	sub	fp, #20
0c5c8     02 16 06 F6 | 	mov	arg03, #2
0c5cc     64 66 B1 FD | 	call	#__system__Number_S
0c5d0     A7 FA 61 FC | 	wrlong	result1, fp
0c5d4     08 4E 05 F1 | 	add	fp, #8
0c5d8     A7 3E 68 FC | 	wrlong	#31, fp
0c5dc     08 4E 85 F1 | 	sub	fp, #8
0c5e0     A7 12 02 F6 | 	mov	arg01, fp
0c5e4     5C ED BF FD | 	call	#_push
0c5e8                 | LR__1123
0c5e8     A7 F0 03 F6 | 	mov	ptra, fp
0c5ec     B2 00 A0 FD | 	call	#popregs_
0c5f0                 | _do_bin_ret
0c5f0     2D 00 64 FD | 	ret
0c5f4                 | 
0c5f4                 | ' 
0c5f4                 | ' '-------------------- box
0c5f4                 | ' 
0c5f4                 | ' sub do_box
0c5f4                 | _do_box
0c5f4     03 4A 05 F6 | 	mov	COUNT_, #3
0c5f8     A8 00 A0 FD | 	call	#pushregs_
0c5fc     30 F0 07 F1 | 	add	ptra, #48
0c600     A8 EC BF FD | 	call	#_pop
0c604     FD 1A 02 F6 | 	mov	arg05, result1
0c608     FE 18 02 F6 | 	mov	arg04, result2
0c60c     FF 16 02 F6 | 	mov	arg03, result3
0c610     24 4E 05 F1 | 	add	fp, #36
0c614     A7 1A 62 FC | 	wrlong	arg05, fp
0c618     04 4E 05 F1 | 	add	fp, #4
0c61c     A7 18 62 FC | 	wrlong	arg04, fp
0c620     04 4E 05 F1 | 	add	fp, #4
0c624     A7 16 62 FC | 	wrlong	arg03, fp
0c628     2C 4E 85 F1 | 	sub	fp, #44
0c62c     7C EC BF FD | 	call	#_pop
0c630     FD 1A 02 F6 | 	mov	arg05, result1
0c634     FE 18 02 F6 | 	mov	arg04, result2
0c638     FF 16 02 F6 | 	mov	arg03, result3
0c63c     18 4E 05 F1 | 	add	fp, #24
0c640     A7 1A 62 FC | 	wrlong	arg05, fp
0c644     04 4E 05 F1 | 	add	fp, #4
0c648     A7 18 62 FC | 	wrlong	arg04, fp
0c64c     04 4E 05 F1 | 	add	fp, #4
0c650     A7 16 62 FC | 	wrlong	arg03, fp
0c654     20 4E 85 F1 | 	sub	fp, #32
0c658     50 EC BF FD | 	call	#_pop
0c65c     FD 1A 02 F6 | 	mov	arg05, result1
0c660     FE 18 02 F6 | 	mov	arg04, result2
0c664     FF 1E 02 F6 | 	mov	local01, result3
0c668     0C 4E 05 F1 | 	add	fp, #12
0c66c     A7 1A 62 FC | 	wrlong	arg05, fp
0c670     04 4E 05 F1 | 	add	fp, #4
0c674     A7 18 62 FC | 	wrlong	arg04, fp
0c678     04 4E 05 F1 | 	add	fp, #4
0c67c     A7 1E 62 FC | 	wrlong	local01, fp
0c680     14 4E 85 F1 | 	sub	fp, #20
0c684     24 EC BF FD | 	call	#_pop
0c688     A7 FA 61 FC | 	wrlong	result1, fp
0c68c     04 4E 05 F1 | 	add	fp, #4
0c690     A7 FC 61 FC | 	wrlong	result2, fp
0c694     04 4E 05 F1 | 	add	fp, #4
0c698     A7 FE 61 FC | 	wrlong	result3, fp
0c69c                 | ' 
0c69c                 | ' t4=pop()
0c69c                 | ' t3=pop()
0c69c                 | ' t2=pop()
0c69c                 | ' t1=pop()
0c69c                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
0c69c     FF 1A 02 F6 | 	mov	arg05, result3
0c6a0     08 4E 85 F1 | 	sub	fp, #8
0c6a4     1C 1A 0E F2 | 	cmp	arg05, #28 wz
0c6a8     08 4E 05 51 |  if_ne	add	fp, #8
0c6ac     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0c6b0     08 4E 85 51 |  if_ne	sub	fp, #8
0c6b4     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0c6b8     A8 00 90 5D |  if_ne	jmp	#LR__1130
0c6bc     14 4E 05 F1 | 	add	fp, #20
0c6c0     A7 1E 02 FB | 	rdlong	local01, fp
0c6c4     14 4E 85 F1 | 	sub	fp, #20
0c6c8     1C 1E 0E F2 | 	cmp	local01, #28 wz
0c6cc     14 4E 05 51 |  if_ne	add	fp, #20
0c6d0     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0c6d4     14 4E 85 51 |  if_ne	sub	fp, #20
0c6d8     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0c6dc     84 00 90 5D |  if_ne	jmp	#LR__1130
0c6e0     20 4E 05 F1 | 	add	fp, #32
0c6e4     A7 1E 02 FB | 	rdlong	local01, fp
0c6e8     20 4E 85 F1 | 	sub	fp, #32
0c6ec     1C 1E 0E F2 | 	cmp	local01, #28 wz
0c6f0     20 4E 05 51 |  if_ne	add	fp, #32
0c6f4     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0c6f8     20 4E 85 51 |  if_ne	sub	fp, #32
0c6fc     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0c700     60 00 90 5D |  if_ne	jmp	#LR__1130
0c704     2C 4E 05 F1 | 	add	fp, #44
0c708     A7 1E 02 FB | 	rdlong	local01, fp
0c70c     2C 4E 85 F1 | 	sub	fp, #44
0c710     1C 1E 0E F2 | 	cmp	local01, #28 wz
0c714     2C 4E 05 51 |  if_ne	add	fp, #44
0c718     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0c71c     2C 4E 85 51 |  if_ne	sub	fp, #44
0c720     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0c724     3C 00 90 5D |  if_ne	jmp	#LR__1130
0c728     A7 12 02 FB | 	rdlong	arg01, fp
0c72c     0C 4E 05 F1 | 	add	fp, #12
0c730     A7 14 02 FB | 	rdlong	arg02, fp
0c734     0C 4E 05 F1 | 	add	fp, #12
0c738     A7 16 02 FB | 	rdlong	arg03, fp
0c73c     0C 4E 05 F1 | 	add	fp, #12
0c740     A7 18 02 FB | 	rdlong	arg04, fp
0c744     24 4E 85 F1 | 	sub	fp, #36
0c748     37 00 00 FF 
0c74c     28 E4 05 F1 | 	add	objptr, ##28200
0c750     F2 1A 02 FB | 	rdlong	arg05, objptr
0c754     37 00 00 FF 
0c758     28 E4 85 F1 | 	sub	objptr, ##28200
0c75c     60 26 B1 FD | 	call	#_hg010b_spin2_box
0c760                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
0c760     6C 00 90 FD | 	jmp	#LR__1131
0c764                 | LR__1130
0c764     A7 12 02 F6 | 	mov	arg01, fp
0c768     24 ED BF FD | 	call	#_converttoint
0c76c     FD 20 02 F6 | 	mov	local02, result1
0c770     0C 4E 05 F1 | 	add	fp, #12
0c774     A7 12 02 F6 | 	mov	arg01, fp
0c778     0C 4E 85 F1 | 	sub	fp, #12
0c77c     10 ED BF FD | 	call	#_converttoint
0c780     FD 22 02 F6 | 	mov	local03, result1
0c784     18 4E 05 F1 | 	add	fp, #24
0c788     A7 12 02 F6 | 	mov	arg01, fp
0c78c     18 4E 85 F1 | 	sub	fp, #24
0c790     FC EC BF FD | 	call	#_converttoint
0c794     FD 1E 02 F6 | 	mov	local01, result1
0c798     24 4E 05 F1 | 	add	fp, #36
0c79c     A7 12 02 F6 | 	mov	arg01, fp
0c7a0     24 4E 85 F1 | 	sub	fp, #36
0c7a4     E8 EC BF FD | 	call	#_converttoint
0c7a8     FD 18 02 F6 | 	mov	arg04, result1
0c7ac     37 00 00 FF 
0c7b0     28 E4 05 F1 | 	add	objptr, ##28200
0c7b4     F2 1A 02 FB | 	rdlong	arg05, objptr
0c7b8     37 00 00 FF 
0c7bc     28 E4 85 F1 | 	sub	objptr, ##28200
0c7c0     10 13 02 F6 | 	mov	arg01, local02
0c7c4     11 15 02 F6 | 	mov	arg02, local03
0c7c8     0F 17 02 F6 | 	mov	arg03, local01
0c7cc     F0 25 B1 FD | 	call	#_hg010b_spin2_box
0c7d0                 | LR__1131
0c7d0     A7 F0 03 F6 | 	mov	ptra, fp
0c7d4     B2 00 A0 FD | 	call	#popregs_
0c7d8                 | _do_box_ret
0c7d8     2D 00 64 FD | 	ret
0c7dc                 | 
0c7dc                 | ' 
0c7dc                 | ' '-------------------- brun
0c7dc                 | ' 
0c7dc                 | ' sub do_brun
0c7dc                 | _do_brun
0c7dc     08 4A 05 F6 | 	mov	COUNT_, #8
0c7e0     A8 00 A0 FD | 	call	#pushregs_
0c7e4     C4 EA BF FD | 	call	#_pop
0c7e8     FE 1A 02 F6 | 	mov	arg05, result2
0c7ec     FF 18 02 F6 | 	mov	arg04, result3
0c7f0     FD 1E 02 F6 | 	mov	local01, result1
0c7f4     0D 21 02 F6 | 	mov	local02, arg05
0c7f8     0C 23 02 F6 | 	mov	local03, arg04
0c7fc                 | ' 
0c7fc                 | ' t1=pop() 
0c7fc                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
0c7fc     2B 22 0E F2 | 	cmp	local03, #43 wz
0c800     10 00 90 5D |  if_ne	jmp	#LR__1140
0c804     0F 13 02 F6 | 	mov	arg01, local01
0c808     18 EC BF FD | 	call	#_convertstring
0c80c     FD 1E 02 F6 | 	mov	local01, result1
0c810     1F 22 06 F6 | 	mov	local03, #31
0c814                 | LR__1140
0c814                 | ' if t1.result_type=result_string then
0c814     1F 22 0E F2 | 	cmp	local03, #31 wz
0c818     EC 01 90 5D |  if_ne	jmp	#LR__1144
0c81c     0F 25 02 F6 | 	mov	local04, local01
0c820                 | '   filename=t1.result.sresult
0c820                 | '   if left$(filename,1)="/" then 
0c820     12 13 02 F6 | 	mov	arg01, local04
0c824     01 14 06 F6 | 	mov	arg02, #1
0c828     B4 61 B1 FD | 	call	#__system__Left_S
0c82c     FD 12 02 F6 | 	mov	arg01, result1
0c830     84 01 00 FF 
0c834     8B 14 06 F6 | 	mov	arg02, ##@LR__5450
0c838     50 41 B1 FD | 	call	#__system___string_cmp
0c83c     00 FA 0D F2 | 	cmp	result1, #0 wz
0c840     12 27 02 A6 |  if_e	mov	local05, local04
0c844     14 00 90 AD |  if_e	jmp	#LR__1141
0c848     84 01 00 FF 
0c84c     8D 12 06 F6 | 	mov	arg01, ##@LR__5451
0c850     12 15 02 F6 | 	mov	arg02, local04
0c854     68 41 B1 FD | 	call	#__system___string_concat
0c858     FD 26 02 F6 | 	mov	local05, result1
0c85c                 | LR__1141
0c85c                 | '   open fullfilename for input as #9
0c85c     09 12 06 F6 | 	mov	arg01, #9
0c860     13 15 02 F6 | 	mov	arg02, local05
0c864     00 16 06 F6 | 	mov	arg03, #0
0c868     FC 4C B1 FD | 	call	#__system___basic_open_string
0c86c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0c870     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0c874     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0c878     FD 28 0A F6 | 	mov	local06, result1 wz
0c87c                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
0c87c     8C 00 90 AD |  if_e	jmp	#LR__1142
0c880     00 12 06 F6 | 	mov	arg01, #0
0c884     40 9B B1 FD | 	call	#__system___getiolock_0540
0c888     FD 12 02 F6 | 	mov	arg01, result1
0c88c     D4 40 B1 FD | 	call	#__system___lockmem
0c890     84 01 00 FF 
0c894     96 14 06 F6 | 	mov	arg02, ##@LR__5452
0c898     00 12 06 F6 | 	mov	arg01, #0
0c89c     00 16 06 F6 | 	mov	arg03, #0
0c8a0     B4 4D B1 FD | 	call	#__system___basic_print_string
0c8a4     00 12 06 F6 | 	mov	arg01, #0
0c8a8     14 15 02 F6 | 	mov	arg02, local06
0c8ac     00 16 06 F6 | 	mov	arg03, #0
0c8b0     0A 18 06 F6 | 	mov	arg04, #10
0c8b4     E4 4D B1 FD | 	call	#__system___basic_print_integer
0c8b8     84 01 00 FF 
0c8bc     A4 14 06 F6 | 	mov	arg02, ##@LR__5453
0c8c0     00 12 06 F6 | 	mov	arg01, #0
0c8c4     00 16 06 F6 | 	mov	arg03, #0
0c8c8     8C 4D B1 FD | 	call	#__system___basic_print_string
0c8cc     14 13 02 F6 | 	mov	arg01, local06
0c8d0     58 67 B1 FD | 	call	#__system___strerror
0c8d4     FD 14 02 F6 | 	mov	arg02, result1
0c8d8     00 12 06 F6 | 	mov	arg01, #0
0c8dc     00 16 06 F6 | 	mov	arg03, #0
0c8e0     74 4D B1 FD | 	call	#__system___basic_print_string
0c8e4     00 12 06 F6 | 	mov	arg01, #0
0c8e8     0A 14 06 F6 | 	mov	arg02, #10
0c8ec     00 16 06 F6 | 	mov	arg03, #0
0c8f0     0C 4D B1 FD | 	call	#__system___basic_print_char
0c8f4     00 12 06 F6 | 	mov	arg01, #0
0c8f8     CC 9A B1 FD | 	call	#__system___getiolock_0540
0c8fc     FD 00 68 FC | 	wrlong	#0, result1
0c900     09 12 06 F6 | 	mov	arg01, #9
0c904     F0 90 B1 FD | 	call	#__system__close
0c908     FC 00 90 FD | 	jmp	#LR__1145
0c90c                 | LR__1142
0c90c     01 2A 06 F6 | 	mov	local07, #1
0c910     00 2C 06 F6 | 	mov	local08, #0
0c914                 | '   do
0c914                 | LR__1143
0c914                 | '     get #9,pos,block(0),1024,r : pos+=r	
0c914     4E 00 00 FF 
0c918     B4 E4 05 F1 | 	add	objptr, ##40116
0c91c     F2 16 02 F6 | 	mov	arg03, objptr
0c920     4E 00 00 FF 
0c924     B4 E4 85 F1 | 	sub	objptr, ##40116
0c928     09 12 06 F6 | 	mov	arg01, #9
0c92c     15 15 02 F6 | 	mov	arg02, local07
0c930     0A 18 C6 F9 | 	decod	arg04, #10
0c934     01 1A 06 F6 | 	mov	arg05, #1
0c938     98 4E B1 FD | 	call	#__system___basic_get
0c93c     FD 28 02 F6 | 	mov	local06, result1
0c940     FD 2A 02 F1 | 	add	local07, result1
0c944     4E 00 00 FF 
0c948     B4 E4 05 F1 | 	add	objptr, ##40116
0c94c     F2 12 02 F6 | 	mov	arg01, objptr
0c950     16 15 02 F6 | 	mov	arg02, local08
0c954     0A 16 C6 F9 | 	decod	arg03, #10
0c958     42 00 00 FF 
0c95c     E8 E5 85 F1 | 	sub	objptr, ##34280
0c960     5C 34 B1 FD | 	call	#_psram_spin2_write
0c964     0B 00 00 FF 
0c968     CC E4 85 F1 | 	sub	objptr, ##5836
0c96c     14 2D 02 F1 | 	add	local08, local06
0c970     02 00 00 FF 
0c974     00 28 0E F2 | 	cmp	local06, ##1024 wz
0c978     E0 03 00 AF 
0c97c     00 2C 56 A2 |  if_e	cmps	local08, ##507904 wc
0c980     90 FF 9F 8D |  if_c_and_z	jmp	#LR__1143
0c984     36 00 00 FF 
0c988     FC E5 05 F1 | 	add	objptr, ##28156
0c98c     F2 12 02 FB | 	rdlong	arg01, objptr
0c990     03 12 62 FD | 	cogstop	arg01
0c994     04 E4 05 F1 | 	add	objptr, #4
0c998     F2 12 02 FB | 	rdlong	arg01, objptr
0c99c     03 12 62 FD | 	cogstop	arg01
0c9a0     04 E4 05 F1 | 	add	objptr, #4
0c9a4     F2 12 02 FB | 	rdlong	arg01, objptr
0c9a8     03 12 62 FD | 	cogstop	arg01
0c9ac     19 00 00 FF 
0c9b0     14 E5 05 F1 | 	add	objptr, ##13076
0c9b4     F2 12 02 FB | 	rdlong	arg01, objptr
0c9b8     03 12 62 FD | 	cogstop	arg01
0c9bc     18 00 00 FF 
0c9c0     D8 EA 05 F1 | 	add	ptr__dat__, ##12504
0c9c4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
0c9c8     18 00 00 FF 
0c9cc     D8 EA 85 F1 | 	sub	ptr__dat__, ##12504
0c9d0     19 00 00 FF 
0c9d4     0C E5 85 F1 | 	sub	objptr, ##13068
0c9d8     1E 2C 06 F6 | 	mov	local08, #30
0c9dc     28 E4 61 FD | 	setq	objptr
0c9e0     0A 2D F2 FC | 	coginit	local08, arg02 wc
0c9e4     01 2C 66 C6 |  if_b	neg	local08, #1
0c9e8     1B 00 00 FF 
0c9ec     10 E4 05 F1 | 	add	objptr, ##13840
0c9f0     F2 2C 62 FC | 	wrlong	local08, objptr
0c9f4     52 00 00 FF 
0c9f8     1C E4 85 F1 | 	sub	objptr, ##42012
0c9fc     00 12 06 F6 | 	mov	arg01, #0
0ca00     01 12 62 FD | 	cogid	arg01
0ca04     03 12 62 FD | 	cogstop	arg01
0ca08                 | LR__1144
0ca08                 | LR__1145
0ca08     A7 F0 03 F6 | 	mov	ptra, fp
0ca0c     B2 00 A0 FD | 	call	#popregs_
0ca10                 | _do_brun_ret
0ca10     2D 00 64 FD | 	ret
0ca14                 | 
0ca14                 | ' 
0ca14                 | ' '-------------------- changefreq
0ca14                 | ' 
0ca14                 | ' sub do_changefreq
0ca14                 | _do_changefreq
0ca14     04 4A 05 F6 | 	mov	COUNT_, #4
0ca18     A8 00 A0 FD | 	call	#pushregs_
0ca1c     28 F0 07 F1 | 	add	ptra, #40
0ca20     88 E8 BF FD | 	call	#_pop
0ca24     FF 14 02 F6 | 	mov	arg02, result3
0ca28     A7 FA 61 FC | 	wrlong	result1, fp
0ca2c     04 4E 05 F1 | 	add	fp, #4
0ca30     A7 FC 61 FC | 	wrlong	result2, fp
0ca34     04 4E 05 F1 | 	add	fp, #4
0ca38     A7 14 62 FC | 	wrlong	arg02, fp
0ca3c     08 4E 85 F1 | 	sub	fp, #8
0ca40     A7 12 02 F6 | 	mov	arg01, fp
0ca44     04 EB BF FD | 	call	#_converttofloat
0ca48     24 4E 05 F1 | 	add	fp, #36
0ca4c     A7 FA 61 FC | 	wrlong	result1, fp
0ca50     24 4E 85 F1 | 	sub	fp, #36
0ca54     FD 14 02 F6 | 	mov	arg02, result1
0ca58     FC 16 20 FF 
0ca5c     54 12 06 F6 | 	mov	arg01, ##1076754516
0ca60     84 7A B1 FD | 	call	#__system____builtin_logbase
0ca64     FD 1E 02 F6 | 	mov	local01, result1
0ca68     1E 14 C6 F9 | 	decod	arg02, #30
0ca6c     FC 16 20 FF 
0ca70     54 12 06 F6 | 	mov	arg01, ##1076754516
0ca74     70 7A B1 FD | 	call	#__system____builtin_logbase
0ca78     FD 14 02 F6 | 	mov	arg02, result1
0ca7c     0F 13 02 F6 | 	mov	arg01, local01
0ca80     98 6C B1 FD | 	call	#__system___float_div
0ca84     FD 12 02 F6 | 	mov	arg01, result1
0ca88     00 14 06 F6 | 	mov	arg02, #0
0ca8c     50 6F B1 FD | 	call	#__system___float_tointeger
0ca90     10 4E 05 F1 | 	add	fp, #16
0ca94     A7 FA 61 FC | 	wrlong	result1, fp
0ca98     1E 1E C6 F9 | 	decod	local01, #30
0ca9c     FD 12 02 F6 | 	mov	arg01, result1
0caa0     10 4E 85 F1 | 	sub	fp, #16
0caa4     05 12 06 F1 | 	add	arg01, #5
0caa8     09 13 52 F6 | 	abs	arg01, arg01 wc
0caac     1F 20 C6 C9 |  if_b	decod	local02, #31
0cab0     00 20 06 36 |  if_ae	mov	local02, #0
0cab4     5C 66 B1 FD | 	call	#__system___float_fromuns
0cab8     10 FB 61 F5 | 	xor	result1, local02
0cabc     FD 14 02 F6 | 	mov	arg02, result1
0cac0     0F 13 02 F6 | 	mov	arg01, local01
0cac4     58 79 B1 FD | 	call	#__system____builtin_powf
0cac8     FD 12 02 F6 | 	mov	arg01, result1
0cacc     01 14 06 F6 | 	mov	arg02, #1
0cad0     0C 6F B1 FD | 	call	#__system___float_tointeger
0cad4     14 4E 05 F1 | 	add	fp, #20
0cad8     A7 FA 61 FC | 	wrlong	result1, fp
0cadc                 | ' skip=round(2^(lfreq+5))
0cadc                 | ' if skip>32768 then i=skip/32768: skip=32768 else i=1
0cadc     14 4E 85 F1 | 	sub	fp, #20
0cae0     40 00 00 FF 
0cae4     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0cae8     30 00 90 CD |  if_b	jmp	#LR__1150
0caec     14 4E 05 F1 | 	add	fp, #20
0caf0     A7 1E 02 FB | 	rdlong	local01, fp
0caf4     0F 1F 52 F6 | 	abs	local01, local01 wc
0caf8     0F 1E 46 F0 | 	shr	local01, #15
0cafc     0F 1F 82 F6 | 	negc	local01, local01
0cb00     04 4E 05 F1 | 	add	fp, #4
0cb04     A7 1E 62 FC | 	wrlong	local01, fp
0cb08     04 4E 85 F1 | 	sub	fp, #4
0cb0c     40 00 80 FF 
0cb10     A7 00 68 FC | 	wrlong	##32768, fp
0cb14     14 4E 85 F1 | 	sub	fp, #20
0cb18     0C 00 90 FD | 	jmp	#LR__1151
0cb1c                 | LR__1150
0cb1c     18 4E 05 F1 | 	add	fp, #24
0cb20     A7 02 68 FC | 	wrlong	#1, fp
0cb24     18 4E 85 F1 | 	sub	fp, #24
0cb28                 | LR__1151
0cb28     24 4E 05 F1 | 	add	fp, #36
0cb2c     A7 14 02 FB | 	rdlong	arg02, fp
0cb30     24 4E 85 F1 | 	sub	fp, #36
0cb34     3E 2C 25 FF 
0cb38     3C 12 06 F6 | 	mov	arg01, ##1247312956
0cb3c     DC 6B B1 FD | 	call	#__system___float_div
0cb40     FD 1E 02 F6 | 	mov	local01, result1
0cb44     18 4E 05 F1 | 	add	fp, #24
0cb48     A7 12 02 FB | 	rdlong	arg01, fp
0cb4c     18 4E 85 F1 | 	sub	fp, #24
0cb50     09 13 52 F6 | 	abs	arg01, arg01 wc
0cb54     1F 20 C6 C9 |  if_b	decod	local02, #31
0cb58     00 20 06 36 |  if_ae	mov	local02, #0
0cb5c     B4 65 B1 FD | 	call	#__system___float_fromuns
0cb60     10 FB 61 F5 | 	xor	result1, local02
0cb64     FD 22 02 F6 | 	mov	local03, result1
0cb68     1E 24 C6 F9 | 	decod	local04, #30
0cb6c     0D 12 06 F6 | 	mov	arg01, #13
0cb70     10 4E 05 F1 | 	add	fp, #16
0cb74     A7 14 02 FB | 	rdlong	arg02, fp
0cb78     10 4E 85 F1 | 	sub	fp, #16
0cb7c     0A 13 82 F1 | 	sub	arg01, arg02
0cb80     09 13 52 F6 | 	abs	arg01, arg01 wc
0cb84     1F 20 C6 C9 |  if_b	decod	local02, #31
0cb88     00 20 06 36 |  if_ae	mov	local02, #0
0cb8c     84 65 B1 FD | 	call	#__system___float_fromuns
0cb90     10 FB 61 F5 | 	xor	result1, local02
0cb94     FD 14 02 F6 | 	mov	arg02, result1
0cb98     12 13 02 F6 | 	mov	arg01, local04
0cb9c     80 78 B1 FD | 	call	#__system____builtin_powf
0cba0     FD 14 02 F6 | 	mov	arg02, result1
0cba4     11 13 02 F6 | 	mov	arg01, local03
0cba8     6C 69 B1 FD | 	call	#__system___float_mul
0cbac     FD 14 02 F6 | 	mov	arg02, result1
0cbb0     0F 13 02 F6 | 	mov	arg01, local01
0cbb4     64 6B B1 FD | 	call	#__system___float_div
0cbb8     FD 12 02 F6 | 	mov	arg01, result1
0cbbc     01 14 06 F6 | 	mov	arg02, #1
0cbc0     1C 6E B1 FD | 	call	#__system___float_tointeger
0cbc4     FD 1E 02 F6 | 	mov	local01, result1
0cbc8     1C 4E 05 F1 | 	add	fp, #28
0cbcc     A7 1E 62 FC | 	wrlong	local01, fp
0cbd0     1C 4E 85 F1 | 	sub	fp, #28
0cbd4     D4 E6 BF FD | 	call	#_pop
0cbd8     FF 24 02 F6 | 	mov	local04, result3
0cbdc     A7 FA 61 FC | 	wrlong	result1, fp
0cbe0     04 4E 05 F1 | 	add	fp, #4
0cbe4     A7 FC 61 FC | 	wrlong	result2, fp
0cbe8     04 4E 05 F1 | 	add	fp, #4
0cbec     A7 24 62 FC | 	wrlong	local04, fp
0cbf0     08 4E 85 F1 | 	sub	fp, #8
0cbf4     A7 12 02 F6 | 	mov	arg01, fp
0cbf8     94 E8 BF FD | 	call	#_converttoint
0cbfc     FD 22 52 F6 | 	abs	local03, result1 wc
0cc00     07 22 06 F5 | 	and	local03, #7
0cc04     11 23 82 F6 | 	negc	local03, local03
0cc08     0C 4E 05 F1 | 	add	fp, #12
0cc0c     A7 22 62 FC | 	wrlong	local03, fp
0cc10     08 4E 05 F1 | 	add	fp, #8
0cc14     A7 1E 02 FB | 	rdlong	local01, fp
0cc18     10 1E 66 F0 | 	shl	local01, #16
0cc1c     08 4E 05 F1 | 	add	fp, #8
0cc20     A7 24 02 FB | 	rdlong	local04, fp
0cc24     12 1F 02 F1 | 	add	local01, local04
0cc28     04 4E 05 F1 | 	add	fp, #4
0cc2c     A7 1E 62 FC | 	wrlong	local01, fp
0cc30                 | ' if (lpeek(base+64*channel+8) and $0800_0000)=0 then 
0cc30     37 00 00 FF 
0cc34     10 E4 05 F1 | 	add	objptr, ##28176
0cc38     F2 12 02 FB | 	rdlong	arg01, objptr
0cc3c     37 00 00 FF 
0cc40     10 E4 85 F1 | 	sub	objptr, ##28176
0cc44     14 4E 85 F1 | 	sub	fp, #20
0cc48     A7 24 02 FB | 	rdlong	local04, fp
0cc4c     0C 4E 85 F1 | 	sub	fp, #12
0cc50     06 24 66 F0 | 	shl	local04, #6
0cc54     12 13 02 F1 | 	add	arg01, local04
0cc58     08 12 06 F1 | 	add	arg01, #8
0cc5c     09 FB 01 FB | 	rdlong	result1, arg01
0cc60     1B FA 2D F4 | 	testbn	result1, #27 wz
0cc64     3C 00 90 5D |  if_ne	jmp	#LR__1152
0cc68     37 00 00 FF 
0cc6c     10 E4 05 F1 | 	add	objptr, ##28176
0cc70     F2 12 02 FB | 	rdlong	arg01, objptr
0cc74     37 00 00 FF 
0cc78     10 E4 85 F1 | 	sub	objptr, ##28176
0cc7c     0C 4E 05 F1 | 	add	fp, #12
0cc80     A7 24 02 FB | 	rdlong	local04, fp
0cc84     06 24 66 F0 | 	shl	local04, #6
0cc88     12 13 02 F1 | 	add	arg01, local04
0cc8c     18 12 06 F1 | 	add	arg01, #24
0cc90     14 4E 05 F1 | 	add	fp, #20
0cc94     A7 14 02 FB | 	rdlong	arg02, fp
0cc98     20 4E 85 F1 | 	sub	fp, #32
0cc9c     09 15 62 FC | 	wrlong	arg02, arg01
0cca0     80 00 90 FD | 	jmp	#LR__1153
0cca4                 | LR__1152
0cca4     37 00 00 FF 
0cca8     10 E4 05 F1 | 	add	objptr, ##28176
0ccac     F2 1E 02 FB | 	rdlong	local01, objptr
0ccb0     37 00 00 FF 
0ccb4     10 E4 85 F1 | 	sub	objptr, ##28176
0ccb8     0C 4E 05 F1 | 	add	fp, #12
0ccbc     A7 24 02 FB | 	rdlong	local04, fp
0ccc0     06 24 66 F0 | 	shl	local04, #6
0ccc4     12 1F 02 F1 | 	add	local01, local04
0ccc8     18 1E 06 F1 | 	add	local01, #24
0cccc     18 4E 05 F1 | 	add	fp, #24
0ccd0     A7 14 02 FB | 	rdlong	arg02, fp
0ccd4     24 4E 85 F1 | 	sub	fp, #36
0ccd8     3E 2C 25 FF 
0ccdc     3C 12 06 F6 | 	mov	arg01, ##1247312956
0cce0     38 6A B1 FD | 	call	#__system___float_div
0cce4     FD 12 02 F6 | 	mov	arg01, result1
0cce8     01 14 06 F6 | 	mov	arg02, #1
0ccec     F0 6C B1 FD | 	call	#__system___float_tointeger
0ccf0     0F FB 51 FC | 	wrword	result1, local01
0ccf4     37 00 00 FF 
0ccf8     10 E4 05 F1 | 	add	objptr, ##28176
0ccfc     F2 12 02 FB | 	rdlong	arg01, objptr
0cd00     37 00 00 FF 
0cd04     10 E4 85 F1 | 	sub	objptr, ##28176
0cd08     0C 4E 05 F1 | 	add	fp, #12
0cd0c     A7 24 02 FB | 	rdlong	local04, fp
0cd10     0C 4E 85 F1 | 	sub	fp, #12
0cd14     06 24 66 F0 | 	shl	local04, #6
0cd18     12 13 02 F1 | 	add	arg01, local04
0cd1c     1A 12 06 F1 | 	add	arg01, #26
0cd20     09 01 5A FC | 	wrword	#256, arg01
0cd24                 | LR__1153
0cd24     A7 F0 03 F6 | 	mov	ptra, fp
0cd28     B2 00 A0 FD | 	call	#popregs_
0cd2c                 | _do_changefreq_ret
0cd2c     2D 00 64 FD | 	ret
0cd30                 | 
0cd30                 | ' 
0cd30                 | ' '-------------------- changepan
0cd30                 | ' 
0cd30                 | ' sub do_changepan
0cd30                 | _do_changepan
0cd30     01 4A 05 F6 | 	mov	COUNT_, #1
0cd34     A8 00 A0 FD | 	call	#pushregs_
0cd38     14 F0 07 F1 | 	add	ptra, #20
0cd3c     6C E5 BF FD | 	call	#_pop
0cd40     A7 FA 61 FC | 	wrlong	result1, fp
0cd44     04 4E 05 F1 | 	add	fp, #4
0cd48     A7 FC 61 FC | 	wrlong	result2, fp
0cd4c     04 4E 05 F1 | 	add	fp, #4
0cd50     A7 FE 61 FC | 	wrlong	result3, fp
0cd54     08 4E 85 F1 | 	sub	fp, #8
0cd58     00 00 23 FF 
0cd5c     00 1E 06 F6 | 	mov	local01, ##1174405120
0cd60     A7 12 02 F6 | 	mov	arg01, fp
0cd64     E4 E7 BF FD | 	call	#_converttofloat
0cd68     FD 14 02 F6 | 	mov	arg02, result1
0cd6c     0F 13 02 F6 | 	mov	arg01, local01
0cd70     A4 67 B1 FD | 	call	#__system___float_mul
0cd74     FD 12 02 F6 | 	mov	arg01, result1
0cd78     01 14 06 F6 | 	mov	arg02, #1
0cd7c     60 6C B1 FD | 	call	#__system___float_tointeger
0cd80     0D 1E C6 F9 | 	decod	local01, #13
0cd84     FD 1E 02 F1 | 	add	local01, result1
0cd88     10 4E 05 F1 | 	add	fp, #16
0cd8c     A7 1E 62 FC | 	wrlong	local01, fp
0cd90                 | ' 
0cd90                 | ' t1=pop()
0cd90                 | ' pan=8192+round(8192*converttofloat(t1)) 
0cd90                 | ' if pan<0 then pan=0
0cd90     10 4E 85 F1 | 	sub	fp, #16
0cd94     00 1E 56 F2 | 	cmps	local01, #0 wc
0cd98     10 4E 05 C1 |  if_b	add	fp, #16
0cd9c     A7 00 68 CC |  if_b	wrlong	#0, fp
0cda0     10 4E 85 C1 |  if_b	sub	fp, #16
0cda4                 | ' if pan>16384 then pan=16384
0cda4     10 4E 05 F1 | 	add	fp, #16
0cda8     A7 1E 02 FB | 	rdlong	local01, fp
0cdac     10 4E 85 F1 | 	sub	fp, #16
0cdb0     20 00 00 FF 
0cdb4     01 1E 56 F2 | 	cmps	local01, ##16385 wc
0cdb8     10 4E 05 31 |  if_ae	add	fp, #16
0cdbc     20 00 80 3F 
0cdc0     A7 00 68 3C |  if_ae	wrlong	##16384, fp
0cdc4     10 4E 85 31 |  if_ae	sub	fp, #16
0cdc8     E0 E4 BF FD | 	call	#_pop
0cdcc     FF 1E 02 F6 | 	mov	local01, result3
0cdd0     A7 FA 61 FC | 	wrlong	result1, fp
0cdd4     04 4E 05 F1 | 	add	fp, #4
0cdd8     A7 FC 61 FC | 	wrlong	result2, fp
0cddc     04 4E 05 F1 | 	add	fp, #4
0cde0     A7 1E 62 FC | 	wrlong	local01, fp
0cde4     08 4E 85 F1 | 	sub	fp, #8
0cde8     A7 12 02 F6 | 	mov	arg01, fp
0cdec     A0 E6 BF FD | 	call	#_converttoint
0cdf0     FD 1E 52 F6 | 	abs	local01, result1 wc
0cdf4     07 1E 06 F5 | 	and	local01, #7
0cdf8     0F 1F 82 F6 | 	negc	local01, local01
0cdfc     0C 4E 05 F1 | 	add	fp, #12
0ce00     A7 1E 62 FC | 	wrlong	local01, fp
0ce04     37 00 00 FF 
0ce08     10 E4 05 F1 | 	add	objptr, ##28176
0ce0c     F2 12 02 FB | 	rdlong	arg01, objptr
0ce10     37 00 00 FF 
0ce14     10 E4 85 F1 | 	sub	objptr, ##28176
0ce18     06 1E 66 F0 | 	shl	local01, #6
0ce1c     0F 13 02 F1 | 	add	arg01, local01
0ce20     16 12 06 F1 | 	add	arg01, #22
0ce24     04 4E 05 F1 | 	add	fp, #4
0ce28     A7 14 02 FB | 	rdlong	arg02, fp
0ce2c     10 4E 85 F1 | 	sub	fp, #16
0ce30     09 15 52 FC | 	wrword	arg02, arg01
0ce34     A7 F0 03 F6 | 	mov	ptra, fp
0ce38     B2 00 A0 FD | 	call	#popregs_
0ce3c                 | _do_changepan_ret
0ce3c     2D 00 64 FD | 	ret
0ce40                 | 
0ce40                 | ' 
0ce40                 | ' '-------------------- changevol
0ce40                 | ' 
0ce40                 | ' sub do_changevol
0ce40                 | _do_changevol
0ce40     00 4A 05 F6 | 	mov	COUNT_, #0
0ce44     A8 00 A0 FD | 	call	#pushregs_
0ce48     14 F0 07 F1 | 	add	ptra, #20
0ce4c     5C E4 BF FD | 	call	#_pop
0ce50     FF 14 02 F6 | 	mov	arg02, result3
0ce54     A7 FA 61 FC | 	wrlong	result1, fp
0ce58     04 4E 05 F1 | 	add	fp, #4
0ce5c     A7 FC 61 FC | 	wrlong	result2, fp
0ce60     04 4E 05 F1 | 	add	fp, #4
0ce64     A7 14 62 FC | 	wrlong	arg02, fp
0ce68     08 4E 85 F1 | 	sub	fp, #8
0ce6c     A7 12 02 F6 | 	mov	arg01, fp
0ce70     D8 E6 BF FD | 	call	#_converttofloat
0ce74     FD 12 02 F6 | 	mov	arg01, result1
0ce78     00 3D 22 FF 
0ce7c     00 14 06 F6 | 	mov	arg02, ##1148846080
0ce80     94 66 B1 FD | 	call	#__system___float_mul
0ce84     FD 12 02 F6 | 	mov	arg01, result1
0ce88     01 14 06 F6 | 	mov	arg02, #1
0ce8c     50 6B B1 FD | 	call	#__system___float_tointeger
0ce90     FD 14 52 F6 | 	abs	arg02, result1 wc
0ce94     0D 14 46 F7 | 	zerox	arg02, #13
0ce98     0A 15 82 F6 | 	negc	arg02, arg02
0ce9c     10 4E 05 F1 | 	add	fp, #16
0cea0     A7 14 62 FC | 	wrlong	arg02, fp
0cea4     10 4E 85 F1 | 	sub	fp, #16
0cea8     00 E4 BF FD | 	call	#_pop
0ceac     FF 14 02 F6 | 	mov	arg02, result3
0ceb0     A7 FA 61 FC | 	wrlong	result1, fp
0ceb4     04 4E 05 F1 | 	add	fp, #4
0ceb8     A7 FC 61 FC | 	wrlong	result2, fp
0cebc     04 4E 05 F1 | 	add	fp, #4
0cec0     A7 14 62 FC | 	wrlong	arg02, fp
0cec4     08 4E 85 F1 | 	sub	fp, #8
0cec8     A7 12 02 F6 | 	mov	arg01, fp
0cecc     C0 E5 BF FD | 	call	#_converttoint
0ced0     FD 14 52 F6 | 	abs	arg02, result1 wc
0ced4     07 14 06 F5 | 	and	arg02, #7
0ced8     0A 15 82 F6 | 	negc	arg02, arg02
0cedc     0C 4E 05 F1 | 	add	fp, #12
0cee0     A7 14 62 FC | 	wrlong	arg02, fp
0cee4     37 00 00 FF 
0cee8     10 E4 05 F1 | 	add	objptr, ##28176
0ceec     F2 12 02 FB | 	rdlong	arg01, objptr
0cef0     37 00 00 FF 
0cef4     10 E4 85 F1 | 	sub	objptr, ##28176
0cef8     06 14 66 F0 | 	shl	arg02, #6
0cefc     0A 13 02 F1 | 	add	arg01, arg02
0cf00     14 12 06 F1 | 	add	arg01, #20
0cf04     04 4E 05 F1 | 	add	fp, #4
0cf08     A7 14 02 FB | 	rdlong	arg02, fp
0cf0c     10 4E 85 F1 | 	sub	fp, #16
0cf10     09 15 52 FC | 	wrword	arg02, arg01
0cf14     A7 F0 03 F6 | 	mov	ptra, fp
0cf18     B2 00 A0 FD | 	call	#popregs_
0cf1c                 | _do_changevol_ret
0cf1c     2D 00 64 FD | 	ret
0cf20                 | 
0cf20                 | ' 
0cf20                 | ' '-------------------- changewav
0cf20                 | ' 
0cf20                 | ' sub do_changewav
0cf20                 | _do_changewav
0cf20     00 4A 05 F6 | 	mov	COUNT_, #0
0cf24     A8 00 A0 FD | 	call	#pushregs_
0cf28     14 F0 07 F1 | 	add	ptra, #20
0cf2c     7C E3 BF FD | 	call	#_pop
0cf30     FF 14 02 F6 | 	mov	arg02, result3
0cf34     A7 FA 61 FC | 	wrlong	result1, fp
0cf38     04 4E 05 F1 | 	add	fp, #4
0cf3c     A7 FC 61 FC | 	wrlong	result2, fp
0cf40     04 4E 05 F1 | 	add	fp, #4
0cf44     A7 14 62 FC | 	wrlong	arg02, fp
0cf48     08 4E 85 F1 | 	sub	fp, #8
0cf4c     A7 12 02 F6 | 	mov	arg01, fp
0cf50     3C E5 BF FD | 	call	#_converttoint
0cf54     10 4E 05 F1 | 	add	fp, #16
0cf58     A7 FA 61 FC | 	wrlong	result1, fp
0cf5c                 | ' 
0cf5c                 | ' t1=pop()
0cf5c                 | ' wave=converttoint(t1)
0cf5c                 | ' if wave<0 then wave=0
0cf5c     FD 14 02 F6 | 	mov	arg02, result1
0cf60     10 4E 85 F1 | 	sub	fp, #16
0cf64     00 14 56 F2 | 	cmps	arg02, #0 wc
0cf68     10 4E 05 C1 |  if_b	add	fp, #16
0cf6c     A7 00 68 CC |  if_b	wrlong	#0, fp
0cf70     10 4E 85 C1 |  if_b	sub	fp, #16
0cf74     34 E3 BF FD | 	call	#_pop
0cf78     FF 14 02 F6 | 	mov	arg02, result3
0cf7c     A7 FA 61 FC | 	wrlong	result1, fp
0cf80     04 4E 05 F1 | 	add	fp, #4
0cf84     A7 FC 61 FC | 	wrlong	result2, fp
0cf88     04 4E 05 F1 | 	add	fp, #4
0cf8c     A7 14 62 FC | 	wrlong	arg02, fp
0cf90     08 4E 85 F1 | 	sub	fp, #8
0cf94     A7 12 02 F6 | 	mov	arg01, fp
0cf98     F4 E4 BF FD | 	call	#_converttoint
0cf9c     FD 14 52 F6 | 	abs	arg02, result1 wc
0cfa0     07 14 06 F5 | 	and	arg02, #7
0cfa4     0A 15 82 F6 | 	negc	arg02, arg02
0cfa8     0C 4E 05 F1 | 	add	fp, #12
0cfac     A7 14 62 FC | 	wrlong	arg02, fp
0cfb0                 | ' if wave <32 then 
0cfb0     04 4E 05 F1 | 	add	fp, #4
0cfb4     A7 14 02 FB | 	rdlong	arg02, fp
0cfb8     10 4E 85 F1 | 	sub	fp, #16
0cfbc     20 14 56 F2 | 	cmps	arg02, #32 wc
0cfc0     48 00 90 3D |  if_ae	jmp	#LR__1160
0cfc4     37 00 00 FF 
0cfc8     10 E4 05 F1 | 	add	objptr, ##28176
0cfcc     F2 12 02 FB | 	rdlong	arg01, objptr
0cfd0     37 00 00 FF 
0cfd4     10 E4 85 F1 | 	sub	objptr, ##28176
0cfd8     0C 4E 05 F1 | 	add	fp, #12
0cfdc     A7 14 02 FB | 	rdlong	arg02, fp
0cfe0     06 14 66 F0 | 	shl	arg02, #6
0cfe4     0A 13 02 F1 | 	add	arg01, arg02
0cfe8     08 12 06 F1 | 	add	arg01, #8
0cfec     04 4E 05 F1 | 	add	fp, #4
0cff0     A7 14 02 FB | 	rdlong	arg02, fp
0cff4     10 4E 85 F1 | 	sub	fp, #16
0cff8     0B 14 66 F0 | 	shl	arg02, #11
0cffc     00 00 40 FF 
0d000     00 14 06 F1 | 	add	arg02, ##-2147483648
0d004     09 15 62 FC | 	wrlong	arg02, arg01
0d008     34 00 90 FD | 	jmp	#LR__1161
0d00c                 | LR__1160
0d00c     37 00 00 FF 
0d010     10 E4 05 F1 | 	add	objptr, ##28176
0d014     F2 12 02 FB | 	rdlong	arg01, objptr
0d018     37 00 00 FF 
0d01c     10 E4 85 F1 | 	sub	objptr, ##28176
0d020     0C 4E 05 F1 | 	add	fp, #12
0d024     A7 14 02 FB | 	rdlong	arg02, fp
0d028     0C 4E 85 F1 | 	sub	fp, #12
0d02c     06 14 66 F0 | 	shl	arg02, #6
0d030     0A 13 02 F1 | 	add	arg01, arg02
0d034     08 12 06 F1 | 	add	arg01, #8
0d038     00 00 C4 FF 
0d03c     09 01 68 FC | 	wrlong	##-2013265920, arg01
0d040                 | LR__1161
0d040     A7 F0 03 F6 | 	mov	ptra, fp
0d044     B2 00 A0 FD | 	call	#popregs_
0d048                 | _do_changewav_ret
0d048     2D 00 64 FD | 	ret
0d04c                 | 
0d04c                 | ' 
0d04c                 | ' '-------------------- chr$
0d04c                 | ' 
0d04c                 | ' sub do_chr
0d04c                 | _do_chr
0d04c     01 4A 05 F6 | 	mov	COUNT_, #1
0d050     A8 00 A0 FD | 	call	#pushregs_
0d054     14 F0 07 F1 | 	add	ptra, #20
0d058     4A 00 00 FF 
0d05c     80 E4 05 F1 | 	add	objptr, ##38016
0d060     F2 1E 02 FB | 	rdlong	local01, objptr
0d064     0F 17 02 F6 | 	mov	arg03, local01
0d068     01 16 66 F0 | 	shl	arg03, #1
0d06c     0F 17 02 F1 | 	add	arg03, local01
0d070     02 16 66 F0 | 	shl	arg03, #2
0d074     03 00 00 FF 
0d078     04 E4 85 F1 | 	sub	objptr, ##1540
0d07c     F2 16 02 F1 | 	add	arg03, objptr
0d080     0B 17 02 FB | 	rdlong	arg03, arg03
0d084     0C 4E 05 F1 | 	add	fp, #12
0d088     A7 16 62 FC | 	wrlong	arg03, fp
0d08c                 | ' 
0d08c                 | ' numpar=compiledline(lineptr_e).result.uresult
0d08c                 | ' if numpar>1 orelse numpar=0 then print "chr$: "; : printerror(39) : return
0d08c     0C 4E 85 F1 | 	sub	fp, #12
0d090     02 16 16 F2 | 	cmp	arg03, #2 wc
0d094     47 00 00 FF 
0d098     7C E4 85 F1 | 	sub	objptr, ##36476
0d09c     0C 4E 05 C1 |  if_b	add	fp, #12
0d0a0     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
0d0a4     0C 4E 85 C1 |  if_b	sub	fp, #12
0d0a8     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1170
0d0ac     00 12 06 F6 | 	mov	arg01, #0
0d0b0     14 93 B1 FD | 	call	#__system___getiolock_0540
0d0b4     FD 12 02 F6 | 	mov	arg01, result1
0d0b8     A8 38 B1 FD | 	call	#__system___lockmem
0d0bc     84 01 00 FF 
0d0c0     A7 14 06 F6 | 	mov	arg02, ##@LR__5454
0d0c4     00 12 06 F6 | 	mov	arg01, #0
0d0c8     00 16 06 F6 | 	mov	arg03, #0
0d0cc     88 45 B1 FD | 	call	#__system___basic_print_string
0d0d0     00 12 06 F6 | 	mov	arg01, #0
0d0d4     F0 92 B1 FD | 	call	#__system___getiolock_0540
0d0d8     FD 00 68 FC | 	wrlong	#0, result1
0d0dc     27 12 06 F6 | 	mov	arg01, #39
0d0e0     F0 02 B1 FD | 	call	#_printerror
0d0e4     54 00 90 FD | 	jmp	#LR__1171
0d0e8                 | LR__1170
0d0e8     C0 E1 BF FD | 	call	#_pop
0d0ec     FF 1E 02 F6 | 	mov	local01, result3
0d0f0     A7 FA 61 FC | 	wrlong	result1, fp
0d0f4     04 4E 05 F1 | 	add	fp, #4
0d0f8     A7 FC 61 FC | 	wrlong	result2, fp
0d0fc     04 4E 05 F1 | 	add	fp, #4
0d100     A7 1E 62 FC | 	wrlong	local01, fp
0d104     08 4E 85 F1 | 	sub	fp, #8
0d108     A7 12 02 F6 | 	mov	arg01, fp
0d10c     80 E3 BF FD | 	call	#_converttoint
0d110     10 4E 05 F1 | 	add	fp, #16
0d114     A7 FA 61 FC | 	wrlong	result1, fp
0d118     FD 12 02 F6 | 	mov	arg01, result1
0d11c     10 4E 85 F1 | 	sub	fp, #16
0d120     80 5A B1 FD | 	call	#__system__Chr_S
0d124     A7 FA 61 FC | 	wrlong	result1, fp
0d128     08 4E 05 F1 | 	add	fp, #8
0d12c     A7 3E 68 FC | 	wrlong	#31, fp
0d130     08 4E 85 F1 | 	sub	fp, #8
0d134     A7 12 02 F6 | 	mov	arg01, fp
0d138     08 E2 BF FD | 	call	#_push
0d13c                 | LR__1171
0d13c     A7 F0 03 F6 | 	mov	ptra, fp
0d140     B2 00 A0 FD | 	call	#popregs_
0d144                 | _do_chr_ret
0d144     2D 00 64 FD | 	ret
0d148                 | 
0d148                 | ' 
0d148                 | ' '-------------------- circle
0d148                 | ' 
0d148                 | ' sub do_circle
0d148                 | _do_circle
0d148     02 4A 05 F6 | 	mov	COUNT_, #2
0d14c     A8 00 A0 FD | 	call	#pushregs_
0d150     24 F0 07 F1 | 	add	ptra, #36
0d154     54 E1 BF FD | 	call	#_pop
0d158     FD 18 02 F6 | 	mov	arg04, result1
0d15c     FE 16 02 F6 | 	mov	arg03, result2
0d160     FF 14 02 F6 | 	mov	arg02, result3
0d164     18 4E 05 F1 | 	add	fp, #24
0d168     A7 18 62 FC | 	wrlong	arg04, fp
0d16c     04 4E 05 F1 | 	add	fp, #4
0d170     A7 16 62 FC | 	wrlong	arg03, fp
0d174     04 4E 05 F1 | 	add	fp, #4
0d178     A7 14 62 FC | 	wrlong	arg02, fp
0d17c     20 4E 85 F1 | 	sub	fp, #32
0d180     28 E1 BF FD | 	call	#_pop
0d184     FD 18 02 F6 | 	mov	arg04, result1
0d188     FE 16 02 F6 | 	mov	arg03, result2
0d18c     FF 1E 02 F6 | 	mov	local01, result3
0d190     0C 4E 05 F1 | 	add	fp, #12
0d194     A7 18 62 FC | 	wrlong	arg04, fp
0d198     04 4E 05 F1 | 	add	fp, #4
0d19c     A7 16 62 FC | 	wrlong	arg03, fp
0d1a0     04 4E 05 F1 | 	add	fp, #4
0d1a4     A7 1E 62 FC | 	wrlong	local01, fp
0d1a8     14 4E 85 F1 | 	sub	fp, #20
0d1ac     FC E0 BF FD | 	call	#_pop
0d1b0     A7 FA 61 FC | 	wrlong	result1, fp
0d1b4     04 4E 05 F1 | 	add	fp, #4
0d1b8     A7 FC 61 FC | 	wrlong	result2, fp
0d1bc     04 4E 05 F1 | 	add	fp, #4
0d1c0     A7 FE 61 FC | 	wrlong	result3, fp
0d1c4                 | ' 
0d1c4                 | ' t3=pop()
0d1c4                 | ' t2=pop()
0d1c4                 | ' t1=pop()
0d1c4                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
0d1c4     FF 18 02 F6 | 	mov	arg04, result3
0d1c8     08 4E 85 F1 | 	sub	fp, #8
0d1cc     1C 18 0E F2 | 	cmp	arg04, #28 wz
0d1d0     08 4E 05 51 |  if_ne	add	fp, #8
0d1d4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0d1d8     08 4E 85 51 |  if_ne	sub	fp, #8
0d1dc     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0d1e0     7C 00 90 5D |  if_ne	jmp	#LR__1180
0d1e4     14 4E 05 F1 | 	add	fp, #20
0d1e8     A7 1E 02 FB | 	rdlong	local01, fp
0d1ec     14 4E 85 F1 | 	sub	fp, #20
0d1f0     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d1f4     14 4E 05 51 |  if_ne	add	fp, #20
0d1f8     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0d1fc     14 4E 85 51 |  if_ne	sub	fp, #20
0d200     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0d204     58 00 90 5D |  if_ne	jmp	#LR__1180
0d208     20 4E 05 F1 | 	add	fp, #32
0d20c     A7 1E 02 FB | 	rdlong	local01, fp
0d210     20 4E 85 F1 | 	sub	fp, #32
0d214     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d218     20 4E 05 51 |  if_ne	add	fp, #32
0d21c     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0d220     20 4E 85 51 |  if_ne	sub	fp, #32
0d224     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0d228     34 00 90 5D |  if_ne	jmp	#LR__1180
0d22c     A7 12 02 FB | 	rdlong	arg01, fp
0d230     0C 4E 05 F1 | 	add	fp, #12
0d234     A7 14 02 FB | 	rdlong	arg02, fp
0d238     0C 4E 05 F1 | 	add	fp, #12
0d23c     A7 16 02 FB | 	rdlong	arg03, fp
0d240     18 4E 85 F1 | 	sub	fp, #24
0d244     37 00 00 FF 
0d248     28 E4 05 F1 | 	add	objptr, ##28200
0d24c     F2 18 02 FB | 	rdlong	arg04, objptr
0d250     37 00 00 FF 
0d254     28 E4 85 F1 | 	sub	objptr, ##28200
0d258     98 19 B1 FD | 	call	#_hg010b_spin2_circle
0d25c                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
0d25c     54 00 90 FD | 	jmp	#LR__1181
0d260                 | LR__1180
0d260     A7 12 02 F6 | 	mov	arg01, fp
0d264     28 E2 BF FD | 	call	#_converttoint
0d268     FD 1E 02 F6 | 	mov	local01, result1
0d26c     0C 4E 05 F1 | 	add	fp, #12
0d270     A7 12 02 F6 | 	mov	arg01, fp
0d274     0C 4E 85 F1 | 	sub	fp, #12
0d278     14 E2 BF FD | 	call	#_converttoint
0d27c     FD 20 02 F6 | 	mov	local02, result1
0d280     18 4E 05 F1 | 	add	fp, #24
0d284     A7 12 02 F6 | 	mov	arg01, fp
0d288     18 4E 85 F1 | 	sub	fp, #24
0d28c     00 E2 BF FD | 	call	#_converttoint
0d290     FD 16 02 F6 | 	mov	arg03, result1
0d294     37 00 00 FF 
0d298     28 E4 05 F1 | 	add	objptr, ##28200
0d29c     F2 18 02 FB | 	rdlong	arg04, objptr
0d2a0     37 00 00 FF 
0d2a4     28 E4 85 F1 | 	sub	objptr, ##28200
0d2a8     0F 13 02 F6 | 	mov	arg01, local01
0d2ac     10 15 02 F6 | 	mov	arg02, local02
0d2b0     40 19 B1 FD | 	call	#_hg010b_spin2_circle
0d2b4                 | LR__1181
0d2b4     A7 F0 03 F6 | 	mov	ptra, fp
0d2b8     B2 00 A0 FD | 	call	#popregs_
0d2bc                 | _do_circle_ret
0d2bc     2D 00 64 FD | 	ret
0d2c0                 | 
0d2c0                 | ' 
0d2c0                 | ' '-------------------- click
0d2c0                 | ' 
0d2c0                 | ' sub do_click
0d2c0                 | _do_click
0d2c0     E8 DF BF FD | 	call	#_pop
0d2c4     00 FA 4D F2 | 	cmps	result1, #0 wz
0d2c8                 | ' 
0d2c8                 | ' t1=pop()
0d2c8                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
0d2c8     50 00 00 AF 
0d2cc     14 E5 05 A1 |  if_e	add	objptr, ##41236
0d2d0     F2 00 68 AC |  if_e	wrlong	#0, objptr
0d2d4     50 00 00 FF 
0d2d8     14 E5 C5 F3 | 	sumz	objptr, ##41236
0d2dc     F2 02 68 5C |  if_ne	wrlong	#1, objptr
0d2e0     50 00 00 5F 
0d2e4     14 E5 85 51 |  if_ne	sub	objptr, ##41236
0d2e8                 | _do_click_ret
0d2e8     2D 00 64 FD | 	ret
0d2ec                 | 
0d2ec                 | ' 
0d2ec                 | ' '-------------------- close
0d2ec                 | ' 
0d2ec                 | ' sub do_close
0d2ec                 | _do_close
0d2ec     03 4A 05 F6 | 	mov	COUNT_, #3
0d2f0     A8 00 A0 FD | 	call	#pushregs_
0d2f4     B4 DF BF FD | 	call	#_pop
0d2f8     FD 1E 02 F6 | 	mov	local01, result1
0d2fc     FF 16 02 F6 | 	mov	arg03, result3
0d300     FE 20 02 F6 | 	mov	local02, result2
0d304     0B 23 02 F6 | 	mov	local03, arg03
0d308                 | ' 
0d308                 | ' numpar=compiledline(lineptr_e).result.uresult
0d308                 | ' t1=pop()
0d308                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
0d308     2C 22 0E F2 | 	cmp	local03, #44 wz
0d30c     44 00 90 AD |  if_e	jmp	#LR__1190
0d310     00 12 06 F6 | 	mov	arg01, #0
0d314     B0 90 B1 FD | 	call	#__system___getiolock_0540
0d318     FD 12 02 F6 | 	mov	arg01, result1
0d31c     44 36 B1 FD | 	call	#__system___lockmem
0d320     84 01 00 FF 
0d324     AE 14 06 F6 | 	mov	arg02, ##@LR__5455
0d328     00 12 06 F6 | 	mov	arg01, #0
0d32c     00 16 06 F6 | 	mov	arg03, #0
0d330     24 43 B1 FD | 	call	#__system___basic_print_string
0d334     00 12 06 F6 | 	mov	arg01, #0
0d338     0A 14 06 F6 | 	mov	arg02, #10
0d33c     00 16 06 F6 | 	mov	arg03, #0
0d340     BC 42 B1 FD | 	call	#__system___basic_print_char
0d344     00 12 06 F6 | 	mov	arg01, #0
0d348     7C 90 B1 FD | 	call	#__system___getiolock_0540
0d34c     FD 00 68 FC | 	wrlong	#0, result1
0d350     08 00 90 FD | 	jmp	#LR__1191
0d354                 | LR__1190
0d354                 | ' channel  = t1.result.iresult
0d354                 | ' close #channel
0d354     0F 13 02 F6 | 	mov	arg01, local01
0d358     9C 86 B1 FD | 	call	#__system__close
0d35c                 | LR__1191
0d35c     A7 F0 03 F6 | 	mov	ptra, fp
0d360     B2 00 A0 FD | 	call	#popregs_
0d364                 | _do_close_ret
0d364     2D 00 64 FD | 	ret
0d368                 | 
0d368                 | ' 
0d368                 | ' '-------------------- cls
0d368                 | ' 
0d368                 | ' sub do_cls
0d368                 | _do_cls
0d368     37 00 00 FF 
0d36c     3C E4 05 F1 | 	add	objptr, ##28220
0d370     F2 12 02 FB | 	rdlong	arg01, objptr
0d374     04 E4 85 F1 | 	sub	objptr, #4
0d378     F2 14 02 FB | 	rdlong	arg02, objptr
0d37c     37 00 00 FF 
0d380     38 E4 85 F1 | 	sub	objptr, ##28216
0d384     00 1D B1 FD | 	call	#_hg010b_spin2_cls
0d388     37 00 00 FF 
0d38c     3C E4 05 F1 | 	add	objptr, ##28220
0d390     F2 14 02 FB | 	rdlong	arg02, objptr
0d394     14 E4 85 F1 | 	sub	objptr, #20
0d398     F2 14 62 FC | 	wrlong	arg02, objptr
0d39c     37 00 00 FF 
0d3a0     28 E4 85 F1 | 	sub	objptr, ##28200
0d3a4                 | _do_cls_ret
0d3a4     2D 00 64 FD | 	ret
0d3a8                 | 
0d3a8                 | ' 
0d3a8                 | ' '-------------------- color
0d3a8                 | ' 
0d3a8                 | ' sub do_color
0d3a8                 | _do_color
0d3a8     03 4A 05 F6 | 	mov	COUNT_, #3
0d3ac     A8 00 A0 FD | 	call	#pushregs_
0d3b0     F8 DE BF FD | 	call	#_pop
0d3b4     FD 1E 02 F6 | 	mov	local01, result1
0d3b8     FE 20 02 F6 | 	mov	local02, result2
0d3bc     FF 22 02 F6 | 	mov	local03, result3
0d3c0     37 00 00 FF 
0d3c4     28 E4 05 F1 | 	add	objptr, ##28200
0d3c8     F2 1E 62 FC | 	wrlong	local01, objptr
0d3cc     37 00 00 FF 
0d3d0     28 E4 85 F1 | 	sub	objptr, ##28200
0d3d4     A7 F0 03 F6 | 	mov	ptra, fp
0d3d8     B2 00 A0 FD | 	call	#popregs_
0d3dc                 | _do_color_ret
0d3dc     2D 00 64 FD | 	ret
0d3e0                 | 
0d3e0                 | ' 
0d3e0                 | ' '-------------------- cos
0d3e0                 | ' 
0d3e0                 | ' sub do_cos
0d3e0                 | _do_cos
0d3e0     01 4A 05 F6 | 	mov	COUNT_, #1
0d3e4     A8 00 A0 FD | 	call	#pushregs_
0d3e8     10 F0 07 F1 | 	add	ptra, #16
0d3ec     4A 00 00 FF 
0d3f0     80 E4 05 F1 | 	add	objptr, ##38016
0d3f4     F2 1E 02 FB | 	rdlong	local01, objptr
0d3f8     0F 17 02 F6 | 	mov	arg03, local01
0d3fc     01 16 66 F0 | 	shl	arg03, #1
0d400     0F 17 02 F1 | 	add	arg03, local01
0d404     02 16 66 F0 | 	shl	arg03, #2
0d408     03 00 00 FF 
0d40c     04 E4 85 F1 | 	sub	objptr, ##1540
0d410     F2 16 02 F1 | 	add	arg03, objptr
0d414     0B 17 02 FB | 	rdlong	arg03, arg03
0d418     0C 4E 05 F1 | 	add	fp, #12
0d41c     A7 16 62 FC | 	wrlong	arg03, fp
0d420                 | ' 
0d420                 | ' numpar=compiledline(lineptr_e).result.uresult
0d420                 | ' if numpar>1 orelse numpar=0 then print "cos: "; : printerror(39) : return
0d420     0C 4E 85 F1 | 	sub	fp, #12
0d424     02 16 16 F2 | 	cmp	arg03, #2 wc
0d428     47 00 00 FF 
0d42c     7C E4 85 F1 | 	sub	objptr, ##36476
0d430     0C 4E 05 C1 |  if_b	add	fp, #12
0d434     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
0d438     0C 4E 85 C1 |  if_b	sub	fp, #12
0d43c     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1200
0d440     00 12 06 F6 | 	mov	arg01, #0
0d444     80 8F B1 FD | 	call	#__system___getiolock_0540
0d448     FD 12 02 F6 | 	mov	arg01, result1
0d44c     14 35 B1 FD | 	call	#__system___lockmem
0d450     84 01 00 FF 
0d454     C0 14 06 F6 | 	mov	arg02, ##@LR__5456
0d458     00 12 06 F6 | 	mov	arg01, #0
0d45c     00 16 06 F6 | 	mov	arg03, #0
0d460     F4 41 B1 FD | 	call	#__system___basic_print_string
0d464     00 12 06 F6 | 	mov	arg01, #0
0d468     5C 8F B1 FD | 	call	#__system___getiolock_0540
0d46c     FD 00 68 FC | 	wrlong	#0, result1
0d470     27 12 06 F6 | 	mov	arg01, #39
0d474     5C FF B0 FD | 	call	#_printerror
0d478     78 00 90 FD | 	jmp	#LR__1201
0d47c                 | LR__1200
0d47c     2C DE BF FD | 	call	#_pop
0d480     A7 FA 61 FC | 	wrlong	result1, fp
0d484     04 4E 05 F1 | 	add	fp, #4
0d488     A7 FC 61 FC | 	wrlong	result2, fp
0d48c     04 4E 05 F1 | 	add	fp, #4
0d490     A7 FE 61 FC | 	wrlong	result3, fp
0d494     08 4E 85 F1 | 	sub	fp, #8
0d498     51 00 00 FF 
0d49c     BC E5 05 F1 | 	add	objptr, ##41916
0d4a0     F2 1E 02 FB | 	rdlong	local01, objptr
0d4a4     51 00 00 FF 
0d4a8     BC E5 85 F1 | 	sub	objptr, ##41916
0d4ac     A7 12 02 F6 | 	mov	arg01, fp
0d4b0     98 E0 BF FD | 	call	#_converttofloat
0d4b4     FD 14 02 F6 | 	mov	arg02, result1
0d4b8     0F 13 02 F6 | 	mov	arg01, local01
0d4bc     58 60 B1 FD | 	call	#__system___float_mul
0d4c0     FD 14 02 F6 | 	mov	arg02, result1
0d4c4     87 E4 1F FF 
0d4c8     DB 13 06 F6 | 	mov	arg01, ##1070141403
0d4cc     1F 14 E6 F4 | 	bitnot	arg02, #31
0d4d0     74 5C B1 FD | 	call	#__system___float_add
0d4d4     FD 12 02 F6 | 	mov	arg01, result1
0d4d8     9C 69 B1 FD | 	call	#__system____builtin_sinf
0d4dc     A7 FA 61 FC | 	wrlong	result1, fp
0d4e0     08 4E 05 F1 | 	add	fp, #8
0d4e4     A7 3C 68 FC | 	wrlong	#30, fp
0d4e8     08 4E 85 F1 | 	sub	fp, #8
0d4ec     A7 12 02 F6 | 	mov	arg01, fp
0d4f0     50 DE BF FD | 	call	#_push
0d4f4                 | LR__1201
0d4f4     A7 F0 03 F6 | 	mov	ptra, fp
0d4f8     B2 00 A0 FD | 	call	#popregs_
0d4fc                 | _do_cos_ret
0d4fc     2D 00 64 FD | 	ret
0d500                 | 
0d500                 | ' 
0d500                 | ' '-------------------- cursor
0d500                 | ' 
0d500                 | ' sub do_cursor
0d500                 | _do_cursor
0d500     A8 DD BF FD | 	call	#_pop
0d504     00 FA 4D F2 | 	cmps	result1, #0 wz
0d508                 | ' t1=pop()
0d508                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
0d508     14 00 90 5D |  if_ne	jmp	#LR__1210
0d50c     11 12 06 F6 | 	mov	arg01, #17
0d510     00 14 06 F6 | 	mov	arg02, #0
0d514     00 16 06 F6 | 	mov	arg03, #0
0d518     4C 0E B1 FD | 	call	#_hg010b_spin2_setspritesize
0d51c     10 00 90 FD | 	jmp	#LR__1211
0d520                 | LR__1210
0d520     11 12 06 F6 | 	mov	arg01, #17
0d524     08 14 06 F6 | 	mov	arg02, #8
0d528     10 16 06 F6 | 	mov	arg03, #16
0d52c     38 0E B1 FD | 	call	#_hg010b_spin2_setspritesize
0d530                 | LR__1211
0d530                 | _do_cursor_ret
0d530     2D 00 64 FD | 	ret
0d534                 | 
0d534                 | ' 
0d534                 | ' '-------------------- defenv
0d534                 | ' 
0d534                 | ' sub do_defenv
0d534                 | _do_defenv
0d534     08 4A 05 F6 | 	mov	COUNT_, #8
0d538     A8 00 A0 FD | 	call	#pushregs_
0d53c     58 F0 07 F1 | 	add	ptra, #88
0d540     4A 00 00 FF 
0d544     80 E4 05 F1 | 	add	objptr, ##38016
0d548     F2 1E 02 FB | 	rdlong	local01, objptr
0d54c     0F 1B 02 F6 | 	mov	arg05, local01
0d550     01 1A 66 F0 | 	shl	arg05, #1
0d554     0F 1B 02 F1 | 	add	arg05, local01
0d558     02 1A 66 F0 | 	shl	arg05, #2
0d55c     03 00 00 FF 
0d560     04 E4 85 F1 | 	sub	objptr, ##1540
0d564     F2 1A 02 F1 | 	add	arg05, objptr
0d568     0D 1B 02 FB | 	rdlong	arg05, arg05
0d56c     10 4E 05 F1 | 	add	fp, #16
0d570     A7 1A 62 FC | 	wrlong	arg05, fp
0d574                 | ' 
0d574                 | ' numpar=compiledline(lineptr_e).result.uresult
0d574                 | ' if numpar<>2 andalso numpar<>5 then return 			' TODO and print error
0d574     10 4E 85 F1 | 	sub	fp, #16
0d578     02 1A 0E F2 | 	cmp	arg05, #2 wz
0d57c     47 00 00 FF 
0d580     7C E4 85 F1 | 	sub	objptr, ##36476
0d584     10 4E 05 51 |  if_ne	add	fp, #16
0d588     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0d58c     10 4E 85 51 |  if_ne	sub	fp, #16
0d590     05 1E 0E 52 |  if_ne	cmp	local01, #5 wz
0d594     8C 0A 90 5D |  if_ne	jmp	#LR__1241
0d598                 | ' 
0d598                 | ' if numpar=2 then						' env from .h2 or from a pointer
0d598     10 4E 05 F1 | 	add	fp, #16
0d59c     A7 1E 02 FB | 	rdlong	local01, fp
0d5a0     10 4E 85 F1 | 	sub	fp, #16
0d5a4     02 1E 0E F2 | 	cmp	local01, #2 wz
0d5a8     24 04 90 5D |  if_ne	jmp	#LR__1233
0d5ac     FC DC BF FD | 	call	#_pop
0d5b0     FF 1A 02 F6 | 	mov	arg05, result3
0d5b4     40 4E 05 F1 | 	add	fp, #64
0d5b8     A7 FA 61 FC | 	wrlong	result1, fp
0d5bc     04 4E 05 F1 | 	add	fp, #4
0d5c0     A7 FC 61 FC | 	wrlong	result2, fp
0d5c4     04 4E 05 F1 | 	add	fp, #4
0d5c8     A7 1A 62 FC | 	wrlong	arg05, fp
0d5cc                 | '   t1=pop()
0d5cc                 | '   if t1.result_type=result_string2 then 
0d5cc     48 4E 85 F1 | 	sub	fp, #72
0d5d0     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0d5d4     20 00 90 5D |  if_ne	jmp	#LR__1220
0d5d8     40 4E 05 F1 | 	add	fp, #64
0d5dc     A7 12 02 FB | 	rdlong	arg01, fp
0d5e0     40 4E 85 F1 | 	sub	fp, #64
0d5e4     3C DE BF FD | 	call	#_convertstring
0d5e8     4C 4E 05 F1 | 	add	fp, #76
0d5ec     A7 FA 61 FC | 	wrlong	result1, fp
0d5f0     4C 4E 85 F1 | 	sub	fp, #76
0d5f4     58 00 90 FD | 	jmp	#LR__1223
0d5f8                 | LR__1220
0d5f8     48 4E 05 F1 | 	add	fp, #72
0d5fc     A7 1E 02 FB | 	rdlong	local01, fp
0d600     48 4E 85 F1 | 	sub	fp, #72
0d604     1F 1E 0E F2 | 	cmp	local01, #31 wz
0d608     18 00 90 5D |  if_ne	jmp	#LR__1221
0d60c     40 4E 05 F1 | 	add	fp, #64
0d610     A7 1E 02 FB | 	rdlong	local01, fp
0d614     0C 4E 05 F1 | 	add	fp, #12
0d618     A7 1E 62 FC | 	wrlong	local01, fp
0d61c     4C 4E 85 F1 | 	sub	fp, #76
0d620     2C 00 90 FD | 	jmp	#LR__1222
0d624                 | LR__1221
0d624     84 01 00 FF 
0d628     C6 1E 06 F6 | 	mov	local01, ##@LR__5457
0d62c     4C 4E 05 F1 | 	add	fp, #76
0d630     A7 1E 62 FC | 	wrlong	local01, fp
0d634     0C 4E 85 F1 | 	sub	fp, #12
0d638     A7 12 02 F6 | 	mov	arg01, fp
0d63c     40 4E 85 F1 | 	sub	fp, #64
0d640     4C DE BF FD | 	call	#_converttoint
0d644     1C 4E 05 F1 | 	add	fp, #28
0d648     A7 FA 61 FC | 	wrlong	result1, fp
0d64c     1C 4E 85 F1 | 	sub	fp, #28
0d650                 | LR__1222
0d650                 | LR__1223
0d650                 | '   if s1<>"" then 
0d650     4C 4E 05 F1 | 	add	fp, #76
0d654     A7 12 02 FB | 	rdlong	arg01, fp
0d658     4C 4E 85 F1 | 	sub	fp, #76
0d65c     84 01 00 FF 
0d660     C7 14 06 F6 | 	mov	arg02, ##@LR__5458
0d664     24 33 B1 FD | 	call	#__system___string_cmp
0d668     00 FA 0D F2 | 	cmp	result1, #0 wz
0d66c     24 02 90 AD |  if_e	jmp	#LR__1227
0d670     38 DC BF FD | 	call	#_pop
0d674     FF 1E 02 F6 | 	mov	local01, result3
0d678     40 4E 05 F1 | 	add	fp, #64
0d67c     A7 FA 61 FC | 	wrlong	result1, fp
0d680     04 4E 05 F1 | 	add	fp, #4
0d684     A7 FC 61 FC | 	wrlong	result2, fp
0d688     04 4E 05 F1 | 	add	fp, #4
0d68c     A7 1E 62 FC | 	wrlong	local01, fp
0d690     08 4E 85 F1 | 	sub	fp, #8
0d694     A7 12 02 F6 | 	mov	arg01, fp
0d698     40 4E 85 F1 | 	sub	fp, #64
0d69c     F0 DD BF FD | 	call	#_converttoint
0d6a0     18 4E 05 F1 | 	add	fp, #24
0d6a4     A7 FA 61 FC | 	wrlong	result1, fp
0d6a8     18 4E 85 F1 | 	sub	fp, #24
0d6ac                 | '     t1=pop()
0d6ac                 | '     channel=converttoint(t1) 
0d6ac                 | '     close #9 : open "/sd/media/h/"+s1 for input as #9
0d6ac     09 12 06 F6 | 	mov	arg01, #9
0d6b0     44 83 B1 FD | 	call	#__system__close
0d6b4     09 1E 06 F6 | 	mov	local01, #9
0d6b8     84 01 00 FF 
0d6bc     C8 12 06 F6 | 	mov	arg01, ##@LR__5459
0d6c0     4C 4E 05 F1 | 	add	fp, #76
0d6c4     A7 14 02 FB | 	rdlong	arg02, fp
0d6c8     4C 4E 85 F1 | 	sub	fp, #76
0d6cc     F0 32 B1 FD | 	call	#__system___string_concat
0d6d0     FD 14 02 F6 | 	mov	arg02, result1
0d6d4     0F 13 02 F6 | 	mov	arg01, local01
0d6d8     00 16 06 F6 | 	mov	arg03, #0
0d6dc     88 3E B1 FD | 	call	#__system___basic_open_string
0d6e0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0d6e4     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0d6e8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0d6ec     0C 4E 05 F1 | 	add	fp, #12
0d6f0     A7 FA 61 FC | 	wrlong	result1, fp
0d6f4                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0d6f4     0C 4E 85 F1 | 	sub	fp, #12
0d6f8     A0 00 90 AD |  if_e	jmp	#LR__1224
0d6fc     00 12 06 F6 | 	mov	arg01, #0
0d700     C4 8C B1 FD | 	call	#__system___getiolock_0540
0d704     FD 12 02 F6 | 	mov	arg01, result1
0d708     58 32 B1 FD | 	call	#__system___lockmem
0d70c     84 01 00 FF 
0d710     D5 14 06 F6 | 	mov	arg02, ##@LR__5460
0d714     00 12 06 F6 | 	mov	arg01, #0
0d718     00 16 06 F6 | 	mov	arg03, #0
0d71c     38 3F B1 FD | 	call	#__system___basic_print_string
0d720     0C 4E 05 F1 | 	add	fp, #12
0d724     A7 14 02 FB | 	rdlong	arg02, fp
0d728     0C 4E 85 F1 | 	sub	fp, #12
0d72c     00 12 06 F6 | 	mov	arg01, #0
0d730     00 16 06 F6 | 	mov	arg03, #0
0d734     0A 18 06 F6 | 	mov	arg04, #10
0d738     60 3F B1 FD | 	call	#__system___basic_print_integer
0d73c     84 01 00 FF 
0d740     E3 14 06 F6 | 	mov	arg02, ##@LR__5461
0d744     00 12 06 F6 | 	mov	arg01, #0
0d748     00 16 06 F6 | 	mov	arg03, #0
0d74c     08 3F B1 FD | 	call	#__system___basic_print_string
0d750     00 1E 06 F6 | 	mov	local01, #0
0d754     0C 4E 05 F1 | 	add	fp, #12
0d758     A7 12 02 FB | 	rdlong	arg01, fp
0d75c     0C 4E 85 F1 | 	sub	fp, #12
0d760     C8 58 B1 FD | 	call	#__system___strerror
0d764     FD 14 02 F6 | 	mov	arg02, result1
0d768     0F 13 02 F6 | 	mov	arg01, local01
0d76c     00 16 06 F6 | 	mov	arg03, #0
0d770     E4 3E B1 FD | 	call	#__system___basic_print_string
0d774     00 12 06 F6 | 	mov	arg01, #0
0d778     0A 14 06 F6 | 	mov	arg02, #10
0d77c     00 16 06 F6 | 	mov	arg03, #0
0d780     7C 3E B1 FD | 	call	#__system___basic_print_char
0d784     00 12 06 F6 | 	mov	arg01, #0
0d788     3C 8C B1 FD | 	call	#__system___getiolock_0540
0d78c     FD 00 68 FC | 	wrlong	#0, result1
0d790     09 12 06 F6 | 	mov	arg01, #9
0d794     60 82 B1 FD | 	call	#__system__close
0d798     88 08 90 FD | 	jmp	#LR__1241
0d79c                 | LR__1224
0d79c                 | '     get #9,17,envbuf8(channel,0),256
0d79c     18 4E 05 F1 | 	add	fp, #24
0d7a0     A7 1A 02 FB | 	rdlong	arg05, fp
0d7a4     18 4E 85 F1 | 	sub	fp, #24
0d7a8     0D 17 02 F6 | 	mov	arg03, arg05
0d7ac     09 16 66 F0 | 	shl	arg03, #9
0d7b0     0D 17 02 F1 | 	add	arg03, arg05
0d7b4     0C 00 00 FF 
0d7b8     D8 E4 05 F1 | 	add	objptr, ##6360
0d7bc     F2 16 02 F1 | 	add	arg03, objptr
0d7c0     09 12 06 F6 | 	mov	arg01, #9
0d7c4     11 14 06 F6 | 	mov	arg02, #17
0d7c8     00 19 06 F6 | 	mov	arg04, #256
0d7cc     01 1A 06 F6 | 	mov	arg05, #1
0d7d0     0C 00 00 FF 
0d7d4     D8 E4 85 F1 | 	sub	objptr, ##6360
0d7d8     F8 3F B1 FD | 	call	#__system___basic_get
0d7dc                 | '     for i=255 to 0 step -1 : envbuf(channel,i)=envbuf8(channel,i)*256 : next i
0d7dc     14 4E 05 F1 | 	add	fp, #20
0d7e0     A7 FE 69 FC | 	wrlong	#255, fp
0d7e4     14 4E 85 F1 | 	sub	fp, #20
0d7e8     0C 00 00 FF 
0d7ec     D8 E4 05 F1 | 	add	objptr, ##6360
0d7f0     97 30 48 FB | 	callpa	#(@LR__1226-@LR__1225)>>2,fcache_load_ptr_
0d7f4                 | LR__1225
0d7f4     18 4E 05 F1 | 	add	fp, #24
0d7f8     A7 16 02 FB | 	rdlong	arg03, fp
0d7fc     0B 1F 02 F6 | 	mov	local01, arg03
0d800     09 1E 66 F0 | 	shl	local01, #9
0d804     F2 1E 02 F1 | 	add	local01, objptr
0d808     04 4E 85 F1 | 	sub	fp, #4
0d80c     A7 1A 02 FB | 	rdlong	arg05, fp
0d810     0D 19 02 F6 | 	mov	arg04, arg05
0d814     01 18 66 F0 | 	shl	arg04, #1
0d818     0F 19 02 F1 | 	add	arg04, local01
0d81c     0B 1F 02 F6 | 	mov	local01, arg03
0d820     09 1E 66 F0 | 	shl	local01, #9
0d824     0B 1F 02 F1 | 	add	local01, arg03
0d828     F2 1E 02 F1 | 	add	local01, objptr
0d82c     0F 1B 02 F1 | 	add	arg05, local01
0d830     0D 1F C2 FA | 	rdbyte	local01, arg05
0d834     00 1F 06 FA | 	mul	local01, #256
0d838     0C 1F 52 FC | 	wrword	local01, arg04
0d83c     A7 1E 02 FB | 	rdlong	local01, fp
0d840     01 1E 86 F1 | 	sub	local01, #1
0d844     A7 1E 62 FC | 	wrlong	local01, fp
0d848     14 4E 85 F1 | 	sub	fp, #20
0d84c     00 1E 56 F2 | 	cmps	local01, #0 wc
0d850     A0 FF 9F 3D |  if_ae	jmp	#LR__1225
0d854                 | LR__1226
0d854     0C 00 00 FF 
0d858     D8 E4 85 F1 | 	sub	objptr, ##6360
0d85c                 | '     close #9
0d85c     09 12 06 F6 | 	mov	arg01, #9
0d860     94 81 B1 FD | 	call	#__system__close
0d864     18 4E 05 F1 | 	add	fp, #24
0d868     A7 1E 02 FB | 	rdlong	local01, fp
0d86c     18 4E 85 F1 | 	sub	fp, #24
0d870     09 1E 66 F0 | 	shl	local01, #9
0d874     0C 00 00 FF 
0d878     D8 E4 05 F1 | 	add	objptr, ##6360
0d87c     F2 1E 02 F1 | 	add	local01, objptr
0d880     FE 1F 06 F1 | 	add	local01, #510
0d884     0F 01 58 FC | 	wrword	#0, local01
0d888                 | '     envbuf(channel,255)=0                                                              
0d888                 | '     return
0d888     0C 00 00 FF 
0d88c     D8 E4 85 F1 | 	sub	objptr, ##6360
0d890     90 07 90 FD | 	jmp	#LR__1241
0d894                 | LR__1227
0d894                 | '     if wptr < $80000 then 
0d894     1C 4E 05 F1 | 	add	fp, #28
0d898     A7 20 02 FB | 	rdlong	local02, fp
0d89c     1C 4E 85 F1 | 	sub	fp, #28
0d8a0     00 04 00 FF 
0d8a4     00 20 56 F2 | 	cmps	local02, ##524288 wc
0d8a8     7C 00 90 3D |  if_ae	jmp	#LR__1230
0d8ac                 | '       for i=0 to 255: envbuf(channel,i)=dpeek(wptr+2*i): next i
0d8ac     14 4E 05 F1 | 	add	fp, #20
0d8b0     A7 00 68 FC | 	wrlong	#0, fp
0d8b4     14 4E 85 F1 | 	sub	fp, #20
0d8b8     0C 00 00 FF 
0d8bc     D8 E4 05 F1 | 	add	objptr, ##6360
0d8c0     97 2C 48 FB | 	callpa	#(@LR__1229-@LR__1228)>>2,fcache_load_ptr_
0d8c4                 | LR__1228
0d8c4     18 4E 05 F1 | 	add	fp, #24
0d8c8     A7 20 02 FB | 	rdlong	local02, fp
0d8cc     09 20 66 F0 | 	shl	local02, #9
0d8d0     F2 20 02 F1 | 	add	local02, objptr
0d8d4     04 4E 85 F1 | 	sub	fp, #4
0d8d8     A7 1E 02 FB | 	rdlong	local01, fp
0d8dc     0F 1B 02 F6 | 	mov	arg05, local01
0d8e0     01 1A 66 F0 | 	shl	arg05, #1
0d8e4     10 1B 02 F1 | 	add	arg05, local02
0d8e8     08 4E 05 F1 | 	add	fp, #8
0d8ec     A7 12 02 FB | 	rdlong	arg01, fp
0d8f0     01 1E 66 F0 | 	shl	local01, #1
0d8f4     0F 13 02 F1 | 	add	arg01, local01
0d8f8     09 FB E1 FA | 	rdword	result1, arg01
0d8fc     0D FB 51 FC | 	wrword	result1, arg05
0d900     08 4E 85 F1 | 	sub	fp, #8
0d904     A7 20 02 FB | 	rdlong	local02, fp
0d908     01 20 06 F1 | 	add	local02, #1
0d90c     A7 20 62 FC | 	wrlong	local02, fp
0d910     14 4E 85 F1 | 	sub	fp, #20
0d914     00 21 56 F2 | 	cmps	local02, #256 wc
0d918     A8 FF 9F CD |  if_b	jmp	#LR__1228
0d91c                 | LR__1229
0d91c     0C 00 00 FF 
0d920     D8 E4 85 F1 | 	sub	objptr, ##6360
0d924     78 00 90 FD | 	jmp	#LR__1232
0d928                 | LR__1230
0d928                 | '       for i=0 to 255: envbuf(channel,i)=psdpeek(wptr+2*i) : next i
0d928     14 4E 05 F1 | 	add	fp, #20
0d92c     A7 00 68 FC | 	wrlong	#0, fp
0d930     14 4E 85 F1 | 	sub	fp, #20
0d934                 | LR__1231
0d934     18 4E 05 F1 | 	add	fp, #24
0d938     A7 20 02 FB | 	rdlong	local02, fp
0d93c     09 20 66 F0 | 	shl	local02, #9
0d940     0C 00 00 FF 
0d944     D8 E4 05 F1 | 	add	objptr, ##6360
0d948     F2 20 02 F1 | 	add	local02, objptr
0d94c     04 4E 85 F1 | 	sub	fp, #4
0d950     A7 1E 02 FB | 	rdlong	local01, fp
0d954     0F 23 02 F6 | 	mov	local03, local01
0d958     01 22 66 F0 | 	shl	local03, #1
0d95c     10 23 02 F1 | 	add	local03, local02
0d960     08 4E 05 F1 | 	add	fp, #8
0d964     A7 12 02 FB | 	rdlong	arg01, fp
0d968     1C 4E 85 F1 | 	sub	fp, #28
0d96c     01 1E 66 F0 | 	shl	local01, #1
0d970     0F 13 02 F1 | 	add	arg01, local01
0d974     0C 00 00 FF 
0d978     D8 E4 85 F1 | 	sub	objptr, ##6360
0d97c     40 FD B0 FD | 	call	#_psdpeek
0d980     11 FB 51 FC | 	wrword	result1, local03
0d984     14 4E 05 F1 | 	add	fp, #20
0d988     A7 22 02 FB | 	rdlong	local03, fp
0d98c     01 22 06 F1 | 	add	local03, #1
0d990     A7 22 62 FC | 	wrlong	local03, fp
0d994     14 4E 85 F1 | 	sub	fp, #20
0d998     00 23 56 F2 | 	cmps	local03, #256 wc
0d99c     94 FF 9F CD |  if_b	jmp	#LR__1231
0d9a0                 | LR__1232
0d9a0     18 4E 05 F1 | 	add	fp, #24
0d9a4     A7 22 02 FB | 	rdlong	local03, fp
0d9a8     18 4E 85 F1 | 	sub	fp, #24
0d9ac     09 22 66 F0 | 	shl	local03, #9
0d9b0     0C 00 00 FF 
0d9b4     D8 E4 05 F1 | 	add	objptr, ##6360
0d9b8     F2 22 02 F1 | 	add	local03, objptr
0d9bc     FE 23 06 F1 | 	add	local03, #510
0d9c0     11 01 58 FC | 	wrword	#0, local03
0d9c4                 | '     envbuf(channel,255)=0
0d9c4                 | '     return   
0d9c4     0C 00 00 FF 
0d9c8     D8 E4 85 F1 | 	sub	objptr, ##6360
0d9cc     54 06 90 FD | 	jmp	#LR__1241
0d9d0                 | LR__1233
0d9d0                 | ' 
0d9d0                 | ' if numpar=5 then   						 'simple adsr
0d9d0     10 4E 05 F1 | 	add	fp, #16
0d9d4     A7 20 02 FB | 	rdlong	local02, fp
0d9d8     10 4E 85 F1 | 	sub	fp, #16
0d9dc     05 20 0E F2 | 	cmp	local02, #5 wz
0d9e0     14 06 90 5D |  if_ne	jmp	#LR__1240
0d9e4     C4 D8 BF FD | 	call	#_pop
0d9e8     FF 1E 02 F6 | 	mov	local01, result3
0d9ec     40 4E 05 F1 | 	add	fp, #64
0d9f0     A7 FA 61 FC | 	wrlong	result1, fp
0d9f4     04 4E 05 F1 | 	add	fp, #4
0d9f8     A7 FC 61 FC | 	wrlong	result2, fp
0d9fc     04 4E 05 F1 | 	add	fp, #4
0da00     A7 1E 62 FC | 	wrlong	local01, fp
0da04     08 4E 85 F1 | 	sub	fp, #8
0da08     A7 12 02 F6 | 	mov	arg01, fp
0da0c     40 4E 85 F1 | 	sub	fp, #64
0da10     38 DB BF FD | 	call	#_converttofloat
0da14     FD 20 02 F6 | 	mov	local02, result1
0da18     2C 4E 05 F1 | 	add	fp, #44
0da1c     A7 20 62 FC | 	wrlong	local02, fp
0da20     2C 4E 85 F1 | 	sub	fp, #44
0da24     84 D8 BF FD | 	call	#_pop
0da28     FF 1E 02 F6 | 	mov	local01, result3
0da2c     40 4E 05 F1 | 	add	fp, #64
0da30     A7 FA 61 FC | 	wrlong	result1, fp
0da34     04 4E 05 F1 | 	add	fp, #4
0da38     A7 FC 61 FC | 	wrlong	result2, fp
0da3c     04 4E 05 F1 | 	add	fp, #4
0da40     A7 1E 62 FC | 	wrlong	local01, fp
0da44     08 4E 85 F1 | 	sub	fp, #8
0da48     A7 12 02 F6 | 	mov	arg01, fp
0da4c     40 4E 85 F1 | 	sub	fp, #64
0da50     F8 DA BF FD | 	call	#_converttofloat
0da54     FD 20 02 F6 | 	mov	local02, result1
0da58     28 4E 05 F1 | 	add	fp, #40
0da5c     A7 20 62 FC | 	wrlong	local02, fp
0da60     28 4E 85 F1 | 	sub	fp, #40
0da64     44 D8 BF FD | 	call	#_pop
0da68     FF 1E 02 F6 | 	mov	local01, result3
0da6c     40 4E 05 F1 | 	add	fp, #64
0da70     A7 FA 61 FC | 	wrlong	result1, fp
0da74     04 4E 05 F1 | 	add	fp, #4
0da78     A7 FC 61 FC | 	wrlong	result2, fp
0da7c     04 4E 05 F1 | 	add	fp, #4
0da80     A7 1E 62 FC | 	wrlong	local01, fp
0da84     08 4E 85 F1 | 	sub	fp, #8
0da88     A7 12 02 F6 | 	mov	arg01, fp
0da8c     40 4E 85 F1 | 	sub	fp, #64
0da90     B8 DA BF FD | 	call	#_converttofloat
0da94     FD 20 02 F6 | 	mov	local02, result1
0da98     24 4E 05 F1 | 	add	fp, #36
0da9c     A7 20 62 FC | 	wrlong	local02, fp
0daa0     24 4E 85 F1 | 	sub	fp, #36
0daa4     04 D8 BF FD | 	call	#_pop
0daa8     FF 1E 02 F6 | 	mov	local01, result3
0daac     40 4E 05 F1 | 	add	fp, #64
0dab0     A7 FA 61 FC | 	wrlong	result1, fp
0dab4     04 4E 05 F1 | 	add	fp, #4
0dab8     A7 FC 61 FC | 	wrlong	result2, fp
0dabc     04 4E 05 F1 | 	add	fp, #4
0dac0     A7 1E 62 FC | 	wrlong	local01, fp
0dac4     08 4E 85 F1 | 	sub	fp, #8
0dac8     A7 12 02 F6 | 	mov	arg01, fp
0dacc     40 4E 85 F1 | 	sub	fp, #64
0dad0     78 DA BF FD | 	call	#_converttofloat
0dad4     FD 20 02 F6 | 	mov	local02, result1
0dad8     20 4E 05 F1 | 	add	fp, #32
0dadc     A7 20 62 FC | 	wrlong	local02, fp
0dae0     20 4E 85 F1 | 	sub	fp, #32
0dae4     C4 D7 BF FD | 	call	#_pop
0dae8     FF 1E 02 F6 | 	mov	local01, result3
0daec     40 4E 05 F1 | 	add	fp, #64
0daf0     A7 FA 61 FC | 	wrlong	result1, fp
0daf4     04 4E 05 F1 | 	add	fp, #4
0daf8     A7 FC 61 FC | 	wrlong	result2, fp
0dafc     04 4E 05 F1 | 	add	fp, #4
0db00     A7 1E 62 FC | 	wrlong	local01, fp
0db04     08 4E 85 F1 | 	sub	fp, #8
0db08     A7 12 02 F6 | 	mov	arg01, fp
0db0c     40 4E 85 F1 | 	sub	fp, #64
0db10     7C D9 BF FD | 	call	#_converttoint
0db14     18 4E 05 F1 | 	add	fp, #24
0db18     A7 FA 61 FC | 	wrlong	result1, fp
0db1c                 | '   t1=pop() : rr=converttofloat(t1)
0db1c                 | '   t1=pop() : ss=converttofloat(t1) 
0db1c                 | '   t1=pop() : dd=converttofloat(t1)
0db1c                 | '   t1=pop() : aa=converttofloat(t1)
0db1c                 | '   t1=pop() : channel=converttoint(t1)
0db1c                 | '   if ss<0.0 then ss=0.0 
0db1c     10 4E 05 F1 | 	add	fp, #16
0db20     A7 12 02 FB | 	rdlong	arg01, fp
0db24     28 4E 85 F1 | 	sub	fp, #40
0db28     00 14 06 F6 | 	mov	arg02, #0
0db2c     01 16 06 F6 | 	mov	arg03, #1
0db30     18 5E B1 FD | 	call	#__system___float_cmp
0db34     00 FA 55 F2 | 	cmps	result1, #0 wc
0db38     28 4E 05 C1 |  if_b	add	fp, #40
0db3c     A7 00 68 CC |  if_b	wrlong	#0, fp
0db40     28 4E 85 C1 |  if_b	sub	fp, #40
0db44                 | '   if ss>1.0 then ss=1.0
0db44     28 4E 05 F1 | 	add	fp, #40
0db48     A7 12 02 FB | 	rdlong	arg01, fp
0db4c     28 4E 85 F1 | 	sub	fp, #40
0db50     00 C0 1F FF 
0db54     00 14 06 F6 | 	mov	arg02, ##1065353216
0db58     01 16 66 F6 | 	neg	arg03, #1
0db5c     EC 5D B1 FD | 	call	#__system___float_cmp
0db60     01 FA 55 F2 | 	cmps	result1, #1 wc
0db64     28 4E 05 31 |  if_ae	add	fp, #40
0db68     00 C0 9F 3F 
0db6c     A7 00 68 3C |  if_ae	wrlong	##1065353216, fp
0db70     28 4E 85 31 |  if_ae	sub	fp, #40
0db74     20 4E 05 F1 | 	add	fp, #32
0db78     A7 12 02 FB | 	rdlong	arg01, fp
0db7c     04 4E 05 F1 | 	add	fp, #4
0db80     A7 14 02 FB | 	rdlong	arg02, fp
0db84     24 4E 85 F1 | 	sub	fp, #36
0db88     BC 55 B1 FD | 	call	#__system___float_add
0db8c     FD 12 02 F6 | 	mov	arg01, result1
0db90     2C 4E 05 F1 | 	add	fp, #44
0db94     A7 14 02 FB | 	rdlong	arg02, fp
0db98     2C 4E 85 F1 | 	sub	fp, #44
0db9c     A8 55 B1 FD | 	call	#__system___float_add
0dba0     30 4E 05 F1 | 	add	fp, #48
0dba4     A7 FA 61 FC | 	wrlong	result1, fp
0dba8     FD 14 02 F6 | 	mov	arg02, result1
0dbac     30 4E 85 F1 | 	sub	fp, #48
0dbb0     00 C0 21 FF 
0dbb4     00 12 06 F6 | 	mov	arg01, ##1132462080
0dbb8     60 5B B1 FD | 	call	#__system___float_div
0dbbc     34 4E 05 F1 | 	add	fp, #52
0dbc0     A7 FA 61 FC | 	wrlong	result1, fp
0dbc4     14 4E 85 F1 | 	sub	fp, #20
0dbc8     A7 12 02 FB | 	rdlong	arg01, fp
0dbcc     FD 14 02 F6 | 	mov	arg02, result1
0dbd0     20 4E 85 F1 | 	sub	fp, #32
0dbd4     40 59 B1 FD | 	call	#__system___float_mul
0dbd8     FD 12 02 F6 | 	mov	arg01, result1
0dbdc     01 14 06 F6 | 	mov	arg02, #1
0dbe0     FC 5D B1 FD | 	call	#__system___float_tointeger
0dbe4     A7 FA 61 FC | 	wrlong	result1, fp
0dbe8     24 4E 05 F1 | 	add	fp, #36
0dbec     A7 12 02 FB | 	rdlong	arg01, fp
0dbf0     10 4E 05 F1 | 	add	fp, #16
0dbf4     A7 14 02 FB | 	rdlong	arg02, fp
0dbf8     34 4E 85 F1 | 	sub	fp, #52
0dbfc     18 59 B1 FD | 	call	#__system___float_mul
0dc00     FD 12 02 F6 | 	mov	arg01, result1
0dc04     01 14 06 F6 | 	mov	arg02, #1
0dc08     D4 5D B1 FD | 	call	#__system___float_tointeger
0dc0c     04 4E 05 F1 | 	add	fp, #4
0dc10     A7 FA 61 FC | 	wrlong	result1, fp
0dc14     28 4E 05 F1 | 	add	fp, #40
0dc18     A7 12 02 FB | 	rdlong	arg01, fp
0dc1c     08 4E 05 F1 | 	add	fp, #8
0dc20     A7 14 02 FB | 	rdlong	arg02, fp
0dc24     34 4E 85 F1 | 	sub	fp, #52
0dc28     EC 58 B1 FD | 	call	#__system___float_mul
0dc2c     FD 12 02 F6 | 	mov	arg01, result1
0dc30     01 14 06 F6 | 	mov	arg02, #1
0dc34     A8 5D B1 FD | 	call	#__system___float_tointeger
0dc38     0C 4E 05 F1 | 	add	fp, #12
0dc3c     A7 FA 61 FC | 	wrlong	result1, fp
0dc40     0C 4E 85 F1 | 	sub	fp, #12
0dc44     F8 BF 23 FF 
0dc48     00 20 06 F6 | 	mov	local02, ##1199566848
0dc4c     A7 12 02 FB | 	rdlong	arg01, fp
0dc50     09 13 52 F6 | 	abs	arg01, arg01 wc
0dc54     1F 24 C6 C9 |  if_b	decod	local04, #31
0dc58     00 24 06 36 |  if_ae	mov	local04, #0
0dc5c     B4 54 B1 FD | 	call	#__system___float_fromuns
0dc60     12 FB 61 F5 | 	xor	result1, local04
0dc64     FD 14 02 F6 | 	mov	arg02, result1
0dc68     10 13 02 F6 | 	mov	arg01, local02
0dc6c     AC 5A B1 FD | 	call	#__system___float_div
0dc70     38 4E 05 F1 | 	add	fp, #56
0dc74     A7 FA 61 FC | 	wrlong	result1, fp
0dc78     F8 BF 23 FF 
0dc7c     00 20 06 F6 | 	mov	local02, ##1199566848
0dc80     10 4E 85 F1 | 	sub	fp, #16
0dc84     A7 14 02 FB | 	rdlong	arg02, fp
0dc88     28 4E 85 F1 | 	sub	fp, #40
0dc8c     F8 BF 23 FF 
0dc90     00 12 06 F6 | 	mov	arg01, ##1199566848
0dc94     80 58 B1 FD | 	call	#__system___float_mul
0dc98     FD 14 02 F6 | 	mov	arg02, result1
0dc9c     10 13 02 F6 | 	mov	arg01, local02
0dca0     1F 14 E6 F4 | 	bitnot	arg02, #31
0dca4     A0 54 B1 FD | 	call	#__system___float_add
0dca8     FD 20 02 F6 | 	mov	local02, result1
0dcac     04 4E 05 F1 | 	add	fp, #4
0dcb0     A7 12 02 FB | 	rdlong	arg01, fp
0dcb4     04 4E 85 F1 | 	sub	fp, #4
0dcb8     09 13 52 F6 | 	abs	arg01, arg01 wc
0dcbc     1F 24 C6 C9 |  if_b	decod	local04, #31
0dcc0     00 24 06 36 |  if_ae	mov	local04, #0
0dcc4     4C 54 B1 FD | 	call	#__system___float_fromuns
0dcc8     12 FB 61 F5 | 	xor	result1, local04
0dccc     FD 14 02 F6 | 	mov	arg02, result1
0dcd0     10 13 02 F6 | 	mov	arg01, local02
0dcd4     44 5A B1 FD | 	call	#__system___float_div
0dcd8     24 4E 05 F1 | 	add	fp, #36
0dcdc     A7 FA 61 FC | 	wrlong	result1, fp
0dce0     04 4E 05 F1 | 	add	fp, #4
0dce4     A7 14 02 FB | 	rdlong	arg02, fp
0dce8     28 4E 85 F1 | 	sub	fp, #40
0dcec     F8 BF 23 FF 
0dcf0     00 12 06 F6 | 	mov	arg01, ##1199566848
0dcf4     20 58 B1 FD | 	call	#__system___float_mul
0dcf8     FD 20 02 F6 | 	mov	local02, result1
0dcfc     0C 4E 05 F1 | 	add	fp, #12
0dd00     A7 12 02 FB | 	rdlong	arg01, fp
0dd04     0C 4E 85 F1 | 	sub	fp, #12
0dd08     09 13 52 F6 | 	abs	arg01, arg01 wc
0dd0c     1F 24 C6 C9 |  if_b	decod	local04, #31
0dd10     00 24 06 36 |  if_ae	mov	local04, #0
0dd14     FC 53 B1 FD | 	call	#__system___float_fromuns
0dd18     12 FB 61 F5 | 	xor	result1, local04
0dd1c     FD 14 02 F6 | 	mov	arg02, result1
0dd20     10 13 02 F6 | 	mov	arg01, local02
0dd24     F4 59 B1 FD | 	call	#__system___float_div
0dd28     3C 4E 05 F1 | 	add	fp, #60
0dd2c     A7 FA 61 FC | 	wrlong	result1, fp
0dd30     24 4E 85 F1 | 	sub	fp, #36
0dd34     A7 26 02 FB | 	rdlong	local05, fp
0dd38     18 4E 85 F1 | 	sub	fp, #24
0dd3c     01 26 66 F0 | 	shl	local05, #1
0dd40     51 00 00 FF 
0dd44     C8 E5 05 F1 | 	add	objptr, ##41928
0dd48     F2 26 02 F1 | 	add	local05, objptr
0dd4c     A7 28 02 FB | 	rdlong	local06, fp
0dd50     04 4E 05 F1 | 	add	fp, #4
0dd54     A7 22 02 FB | 	rdlong	local03, fp
0dd58     11 29 02 F1 | 	add	local06, local03
0dd5c     13 29 52 FC | 	wrword	local06, local05
0dd60     1C 4E 05 F1 | 	add	fp, #28
0dd64     A7 00 68 FC | 	wrlong	#0, fp
0dd68                 | '   fulltime=aa+dd+rr
0dd68                 | '   timeunit=256/fulltime : a=round(aa*timeunit) : d=round(dd*timeunit) : r=round(rr*timeunit)  
0dd68                 | '   da=65520.0/a : dd=(65520.0-65520.0*ss)/d : dr=(65520.0*ss)/r  
0dd68                 | '   suspoints(channel)=a+d
0dd68                 | '   aa=0.0 : for i=0 to a-1  : envbuf(channel,i)=round(aa): aa+=da : next i
0dd68     0C 4E 85 F1 | 	sub	fp, #12
0dd6c     A7 00 68 FC | 	wrlong	#0, fp
0dd70     14 4E 85 F1 | 	sub	fp, #20
0dd74     A7 2A 02 FB | 	rdlong	local07, fp
0dd78     51 00 00 FF 
0dd7c     C8 E5 85 F1 | 	sub	objptr, ##41928
0dd80                 | LR__1234
0dd80     14 4E 05 F1 | 	add	fp, #20
0dd84     A7 20 02 FB | 	rdlong	local02, fp
0dd88     14 4E 85 F1 | 	sub	fp, #20
0dd8c     15 21 52 F2 | 	cmps	local02, local07 wc
0dd90     80 00 90 3D |  if_ae	jmp	#LR__1235
0dd94     18 4E 05 F1 | 	add	fp, #24
0dd98     A7 28 02 FB | 	rdlong	local06, fp
0dd9c     09 28 66 F0 | 	shl	local06, #9
0dda0     0C 00 00 FF 
0dda4     D8 E4 05 F1 | 	add	objptr, ##6360
0dda8     F2 28 02 F1 | 	add	local06, objptr
0ddac     04 4E 85 F1 | 	sub	fp, #4
0ddb0     A7 26 02 FB | 	rdlong	local05, fp
0ddb4     01 26 66 F0 | 	shl	local05, #1
0ddb8     14 27 02 F1 | 	add	local05, local06
0ddbc     0C 4E 05 F1 | 	add	fp, #12
0ddc0     A7 12 02 FB | 	rdlong	arg01, fp
0ddc4     20 4E 85 F1 | 	sub	fp, #32
0ddc8     0C 00 00 FF 
0ddcc     D8 E4 85 F1 | 	sub	objptr, ##6360
0ddd0     01 14 06 F6 | 	mov	arg02, #1
0ddd4     08 5C B1 FD | 	call	#__system___float_tointeger
0ddd8     13 FB 51 FC | 	wrword	result1, local05
0dddc     20 4E 05 F1 | 	add	fp, #32
0dde0     A7 12 02 FB | 	rdlong	arg01, fp
0dde4     18 4E 05 F1 | 	add	fp, #24
0dde8     A7 14 02 FB | 	rdlong	arg02, fp
0ddec     38 4E 85 F1 | 	sub	fp, #56
0ddf0     54 53 B1 FD | 	call	#__system___float_add
0ddf4     20 4E 05 F1 | 	add	fp, #32
0ddf8     A7 FA 61 FC | 	wrlong	result1, fp
0ddfc     0C 4E 85 F1 | 	sub	fp, #12
0de00     A7 28 02 FB | 	rdlong	local06, fp
0de04     01 28 06 F1 | 	add	local06, #1
0de08     A7 28 62 FC | 	wrlong	local06, fp
0de0c     14 4E 85 F1 | 	sub	fp, #20
0de10     6C FF 9F FD | 	jmp	#LR__1234
0de14                 | LR__1235
0de14                 | '   for i=a to (a+d-1) : envbuf(channel,i)=round(aa) : aa=aa-dd : if aa<0.0 then aa=0.0
0de14     A7 20 02 FB | 	rdlong	local02, fp
0de18     14 4E 05 F1 | 	add	fp, #20
0de1c     A7 20 62 FC | 	wrlong	local02, fp
0de20     14 4E 85 F1 | 	sub	fp, #20
0de24     A7 2C 02 FB | 	rdlong	local08, fp
0de28     04 4E 05 F1 | 	add	fp, #4
0de2c     A7 20 02 FB | 	rdlong	local02, fp
0de30     04 4E 85 F1 | 	sub	fp, #4
0de34     10 2D 02 F1 | 	add	local08, local02
0de38                 | LR__1236
0de38     14 4E 05 F1 | 	add	fp, #20
0de3c     A7 20 02 FB | 	rdlong	local02, fp
0de40     14 4E 85 F1 | 	sub	fp, #20
0de44     16 21 52 F2 | 	cmps	local02, local08 wc
0de48     A8 00 90 3D |  if_ae	jmp	#LR__1237
0de4c     18 4E 05 F1 | 	add	fp, #24
0de50     A7 2A 02 FB | 	rdlong	local07, fp
0de54     09 2A 66 F0 | 	shl	local07, #9
0de58     0C 00 00 FF 
0de5c     D8 E4 05 F1 | 	add	objptr, ##6360
0de60     F2 2A 02 F1 | 	add	local07, objptr
0de64     04 4E 85 F1 | 	sub	fp, #4
0de68     A7 28 02 FB | 	rdlong	local06, fp
0de6c     01 28 66 F0 | 	shl	local06, #1
0de70     15 29 02 F1 | 	add	local06, local07
0de74     0C 4E 05 F1 | 	add	fp, #12
0de78     A7 12 02 FB | 	rdlong	arg01, fp
0de7c     20 4E 85 F1 | 	sub	fp, #32
0de80     0C 00 00 FF 
0de84     D8 E4 85 F1 | 	sub	objptr, ##6360
0de88     01 14 06 F6 | 	mov	arg02, #1
0de8c     50 5B B1 FD | 	call	#__system___float_tointeger
0de90     14 FB 51 FC | 	wrword	result1, local06
0de94     20 4E 05 F1 | 	add	fp, #32
0de98     A7 12 02 FB | 	rdlong	arg01, fp
0de9c     04 4E 05 F1 | 	add	fp, #4
0dea0     A7 14 02 FB | 	rdlong	arg02, fp
0dea4     24 4E 85 F1 | 	sub	fp, #36
0dea8     1F 14 E6 F4 | 	bitnot	arg02, #31
0deac     98 52 B1 FD | 	call	#__system___float_add
0deb0     20 4E 05 F1 | 	add	fp, #32
0deb4     A7 FA 61 FC | 	wrlong	result1, fp
0deb8     20 4E 85 F1 | 	sub	fp, #32
0debc     FD 12 02 F6 | 	mov	arg01, result1
0dec0     00 14 06 F6 | 	mov	arg02, #0
0dec4     01 16 06 F6 | 	mov	arg03, #1
0dec8     80 5A B1 FD | 	call	#__system___float_cmp
0decc     00 FA 55 F2 | 	cmps	result1, #0 wc
0ded0     20 4E 05 C1 |  if_b	add	fp, #32
0ded4     A7 00 68 CC |  if_b	wrlong	#0, fp
0ded8     20 4E 85 C1 |  if_b	sub	fp, #32
0dedc     14 4E 05 F1 | 	add	fp, #20
0dee0     A7 2A 02 FB | 	rdlong	local07, fp
0dee4     01 2A 06 F1 | 	add	local07, #1
0dee8     A7 2A 62 FC | 	wrlong	local07, fp
0deec     14 4E 85 F1 | 	sub	fp, #20
0def0     44 FF 9F FD | 	jmp	#LR__1236
0def4                 | LR__1237
0def4                 | '   for i=(a+d) to 255 : envbuf(channel,i)=round(aa): aa=aa-dr : if aa<0.0 then aa=0.0
0def4     A7 20 02 FB | 	rdlong	local02, fp
0def8     04 4E 05 F1 | 	add	fp, #4
0defc     A7 2C 02 FB | 	rdlong	local08, fp
0df00     16 21 02 F1 | 	add	local02, local08
0df04     10 4E 05 F1 | 	add	fp, #16
0df08     A7 20 62 FC | 	wrlong	local02, fp
0df0c     14 4E 85 F1 | 	sub	fp, #20
0df10                 | LR__1238
0df10     14 4E 05 F1 | 	add	fp, #20
0df14     A7 26 02 FB | 	rdlong	local05, fp
0df18     14 4E 85 F1 | 	sub	fp, #20
0df1c     00 27 56 F2 | 	cmps	local05, #256 wc
0df20     A8 00 90 3D |  if_ae	jmp	#LR__1239
0df24     18 4E 05 F1 | 	add	fp, #24
0df28     A7 2C 02 FB | 	rdlong	local08, fp
0df2c     09 2C 66 F0 | 	shl	local08, #9
0df30     0C 00 00 FF 
0df34     D8 E4 05 F1 | 	add	objptr, ##6360
0df38     F2 2C 02 F1 | 	add	local08, objptr
0df3c     04 4E 85 F1 | 	sub	fp, #4
0df40     A7 2A 02 FB | 	rdlong	local07, fp
0df44     01 2A 66 F0 | 	shl	local07, #1
0df48     16 2B 02 F1 | 	add	local07, local08
0df4c     0C 4E 05 F1 | 	add	fp, #12
0df50     A7 12 02 FB | 	rdlong	arg01, fp
0df54     20 4E 85 F1 | 	sub	fp, #32
0df58     0C 00 00 FF 
0df5c     D8 E4 85 F1 | 	sub	objptr, ##6360
0df60     01 14 06 F6 | 	mov	arg02, #1
0df64     78 5A B1 FD | 	call	#__system___float_tointeger
0df68     15 FB 51 FC | 	wrword	result1, local07
0df6c     20 4E 05 F1 | 	add	fp, #32
0df70     A7 12 02 FB | 	rdlong	arg01, fp
0df74     1C 4E 05 F1 | 	add	fp, #28
0df78     A7 14 02 FB | 	rdlong	arg02, fp
0df7c     3C 4E 85 F1 | 	sub	fp, #60
0df80     1F 14 E6 F4 | 	bitnot	arg02, #31
0df84     C0 51 B1 FD | 	call	#__system___float_add
0df88     20 4E 05 F1 | 	add	fp, #32
0df8c     A7 FA 61 FC | 	wrlong	result1, fp
0df90     20 4E 85 F1 | 	sub	fp, #32
0df94     FD 12 02 F6 | 	mov	arg01, result1
0df98     00 14 06 F6 | 	mov	arg02, #0
0df9c     01 16 06 F6 | 	mov	arg03, #1
0dfa0     A8 59 B1 FD | 	call	#__system___float_cmp
0dfa4     00 FA 55 F2 | 	cmps	result1, #0 wc
0dfa8     20 4E 05 C1 |  if_b	add	fp, #32
0dfac     A7 00 68 CC |  if_b	wrlong	#0, fp
0dfb0     20 4E 85 C1 |  if_b	sub	fp, #32
0dfb4     14 4E 05 F1 | 	add	fp, #20
0dfb8     A7 2C 02 FB | 	rdlong	local08, fp
0dfbc     01 2C 06 F1 | 	add	local08, #1
0dfc0     A7 2C 62 FC | 	wrlong	local08, fp
0dfc4     14 4E 85 F1 | 	sub	fp, #20
0dfc8     44 FF 9F FD | 	jmp	#LR__1238
0dfcc                 | LR__1239
0dfcc     18 4E 05 F1 | 	add	fp, #24
0dfd0     A7 26 02 FB | 	rdlong	local05, fp
0dfd4     18 4E 85 F1 | 	sub	fp, #24
0dfd8     09 26 66 F0 | 	shl	local05, #9
0dfdc     0C 00 00 FF 
0dfe0     D8 E4 05 F1 | 	add	objptr, ##6360
0dfe4     F2 26 02 F1 | 	add	local05, objptr
0dfe8     FE 27 06 F1 | 	add	local05, #510
0dfec     13 01 58 FC | 	wrword	#0, local05
0dff0     0C 00 00 FF 
0dff4     D8 E4 85 F1 | 	sub	objptr, ##6360
0dff8                 | LR__1240
0dff8     18 4E 05 F1 | 	add	fp, #24
0dffc     A7 26 02 FB | 	rdlong	local05, fp
0e000     18 4E 85 F1 | 	sub	fp, #24
0e004     09 26 66 F0 | 	shl	local05, #9
0e008     0C 00 00 FF 
0e00c     D8 E4 05 F1 | 	add	objptr, ##6360
0e010     F2 26 02 F1 | 	add	local05, objptr
0e014     FE 27 06 F1 | 	add	local05, #510
0e018     13 01 58 FC | 	wrword	#0, local05
0e01c     0C 00 00 FF 
0e020     D8 E4 85 F1 | 	sub	objptr, ##6360
0e024                 | LR__1241
0e024     A7 F0 03 F6 | 	mov	ptra, fp
0e028     B2 00 A0 FD | 	call	#popregs_
0e02c                 | _do_defenv_ret
0e02c     2D 00 64 FD | 	ret
0e030                 | 
0e030                 | ' 
0e030                 | ' '-------------------- defsnd
0e030                 | ' 
0e030                 | ' sub do_defsnd
0e030                 | _do_defsnd
0e030     04 4A 05 F6 | 	mov	COUNT_, #4
0e034     A8 00 A0 FD | 	call	#pushregs_
0e038     88 F0 07 F1 | 	add	ptra, #136
0e03c     4A 00 00 FF 
0e040     80 E4 05 F1 | 	add	objptr, ##38016
0e044     F2 1A 02 FB | 	rdlong	arg05, objptr
0e048     0D 19 02 F6 | 	mov	arg04, arg05
0e04c     01 18 66 F0 | 	shl	arg04, #1
0e050     0D 19 02 F1 | 	add	arg04, arg05
0e054     02 18 66 F0 | 	shl	arg04, #2
0e058     03 00 00 FF 
0e05c     04 E4 85 F1 | 	sub	objptr, ##1540
0e060     F2 18 02 F1 | 	add	arg04, objptr
0e064     0C 1B 02 FB | 	rdlong	arg05, arg04
0e068     A7 1A 62 FC | 	wrlong	arg05, fp
0e06c                 | ' 
0e06c                 | ' numpar=compiledline(lineptr_e).result.uresult
0e06c                 | ' 
0e06c                 | ' ' defsnd channel, string - tries to load from /media/s an s2 file from PC-Softsynth
0e06c                 | ' ' defsnd channel, h1,h2.... h15 - defines harmonics
0e06c                 | ' ' defsnd channel, negfloat, negfloat - defines even and odd harmonics dampening
0e06c                 | ' ' defsnd channel, oneint - loads the wave from the pointer
0e06c                 | ' 
0e06c                 | ' if numpar<2 then return
0e06c     02 1A 56 F2 | 	cmps	arg05, #2 wc
0e070     47 00 00 FF 
0e074     7C E4 85 F1 | 	sub	objptr, ##36476
0e078     94 08 90 CD |  if_b	jmp	#LR__1273
0e07c                 | '  
0e07c                 | ' if numpar=2 then
0e07c     A7 1A 02 FB | 	rdlong	arg05, fp
0e080     02 1A 0E F2 | 	cmp	arg05, #2 wz
0e084     A0 03 90 5D |  if_ne	jmp	#LR__1260
0e088     20 D2 BF FD | 	call	#_pop
0e08c     FF 1A 02 F6 | 	mov	arg05, result3
0e090     2C 4E 05 F1 | 	add	fp, #44
0e094     A7 FA 61 FC | 	wrlong	result1, fp
0e098     04 4E 05 F1 | 	add	fp, #4
0e09c     A7 FC 61 FC | 	wrlong	result2, fp
0e0a0     04 4E 05 F1 | 	add	fp, #4
0e0a4     A7 1A 62 FC | 	wrlong	arg05, fp
0e0a8                 | '   t1=pop()
0e0a8                 | '   if t1.result_type=result_string2 then 
0e0a8     34 4E 85 F1 | 	sub	fp, #52
0e0ac     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0e0b0     20 00 90 5D |  if_ne	jmp	#LR__1250
0e0b4     2C 4E 05 F1 | 	add	fp, #44
0e0b8     A7 12 02 FB | 	rdlong	arg01, fp
0e0bc     2C 4E 85 F1 | 	sub	fp, #44
0e0c0     60 D3 BF FD | 	call	#_convertstring
0e0c4     38 4E 05 F1 | 	add	fp, #56
0e0c8     A7 FA 61 FC | 	wrlong	result1, fp
0e0cc     38 4E 85 F1 | 	sub	fp, #56
0e0d0     58 00 90 FD | 	jmp	#LR__1253
0e0d4                 | LR__1250
0e0d4     34 4E 05 F1 | 	add	fp, #52
0e0d8     A7 1A 02 FB | 	rdlong	arg05, fp
0e0dc     34 4E 85 F1 | 	sub	fp, #52
0e0e0     1F 1A 0E F2 | 	cmp	arg05, #31 wz
0e0e4     18 00 90 5D |  if_ne	jmp	#LR__1251
0e0e8     2C 4E 05 F1 | 	add	fp, #44
0e0ec     A7 1A 02 FB | 	rdlong	arg05, fp
0e0f0     0C 4E 05 F1 | 	add	fp, #12
0e0f4     A7 1A 62 FC | 	wrlong	arg05, fp
0e0f8     38 4E 85 F1 | 	sub	fp, #56
0e0fc     2C 00 90 FD | 	jmp	#LR__1252
0e100                 | LR__1251
0e100     84 01 00 FF 
0e104     E6 1A 06 F6 | 	mov	arg05, ##@LR__5462
0e108     38 4E 05 F1 | 	add	fp, #56
0e10c     A7 1A 62 FC | 	wrlong	arg05, fp
0e110     0C 4E 85 F1 | 	sub	fp, #12
0e114     A7 12 02 F6 | 	mov	arg01, fp
0e118     2C 4E 85 F1 | 	sub	fp, #44
0e11c     70 D3 BF FD | 	call	#_converttoint
0e120     14 4E 05 F1 | 	add	fp, #20
0e124     A7 FA 61 FC | 	wrlong	result1, fp
0e128     14 4E 85 F1 | 	sub	fp, #20
0e12c                 | LR__1252
0e12c                 | LR__1253
0e12c                 | '   if s<>"" then 
0e12c     38 4E 05 F1 | 	add	fp, #56
0e130     A7 12 02 FB | 	rdlong	arg01, fp
0e134     38 4E 85 F1 | 	sub	fp, #56
0e138     84 01 00 FF 
0e13c     E7 14 06 F6 | 	mov	arg02, ##@LR__5463
0e140     48 28 B1 FD | 	call	#__system___string_cmp
0e144     00 FA 0D F2 | 	cmp	result1, #0 wz
0e148     E0 01 90 AD |  if_e	jmp	#LR__1256
0e14c     5C D1 BF FD | 	call	#_pop
0e150     FF 1A 02 F6 | 	mov	arg05, result3
0e154     2C 4E 05 F1 | 	add	fp, #44
0e158     A7 FA 61 FC | 	wrlong	result1, fp
0e15c     04 4E 05 F1 | 	add	fp, #4
0e160     A7 FC 61 FC | 	wrlong	result2, fp
0e164     04 4E 05 F1 | 	add	fp, #4
0e168     A7 1A 62 FC | 	wrlong	arg05, fp
0e16c     08 4E 85 F1 | 	sub	fp, #8
0e170     A7 12 02 F6 | 	mov	arg01, fp
0e174     2C 4E 85 F1 | 	sub	fp, #44
0e178     14 D3 BF FD | 	call	#_converttoint
0e17c     10 4E 05 F1 | 	add	fp, #16
0e180     A7 FA 61 FC | 	wrlong	result1, fp
0e184                 | '     t1=pop()
0e184                 | '     channel=converttoint(t1) : if channel>31 then return
0e184     FD 1A 02 F6 | 	mov	arg05, result1
0e188     10 4E 85 F1 | 	sub	fp, #16
0e18c     20 1A 56 F2 | 	cmps	arg05, #32 wc
0e190     7C 07 90 3D |  if_ae	jmp	#LR__1273
0e194                 | '     close #9 : open "/sd/media/s/"+s for input as #9
0e194     09 12 06 F6 | 	mov	arg01, #9
0e198     5C 78 B1 FD | 	call	#__system__close
0e19c     09 1E 06 F6 | 	mov	local01, #9
0e1a0     84 01 00 FF 
0e1a4     E8 12 06 F6 | 	mov	arg01, ##@LR__5464
0e1a8     38 4E 05 F1 | 	add	fp, #56
0e1ac     A7 14 02 FB | 	rdlong	arg02, fp
0e1b0     38 4E 85 F1 | 	sub	fp, #56
0e1b4     08 28 B1 FD | 	call	#__system___string_concat
0e1b8     FD 14 02 F6 | 	mov	arg02, result1
0e1bc     0F 13 02 F6 | 	mov	arg01, local01
0e1c0     00 16 06 F6 | 	mov	arg03, #0
0e1c4     A0 33 B1 FD | 	call	#__system___basic_open_string
0e1c8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0e1cc     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0e1d0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0e1d4     52 00 00 FF 
0e1d8     14 E4 05 F1 | 	add	objptr, ##42004
0e1dc     F2 FA 61 FC | 	wrlong	result1, objptr
0e1e0                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0e1e0     52 00 00 FF 
0e1e4     14 E4 85 F1 | 	sub	objptr, ##42004
0e1e8     B0 00 90 AD |  if_e	jmp	#LR__1254
0e1ec     00 12 06 F6 | 	mov	arg01, #0
0e1f0     D4 81 B1 FD | 	call	#__system___getiolock_0540
0e1f4     FD 12 02 F6 | 	mov	arg01, result1
0e1f8     68 27 B1 FD | 	call	#__system___lockmem
0e1fc     84 01 00 FF 
0e200     F5 14 06 F6 | 	mov	arg02, ##@LR__5465
0e204     00 12 06 F6 | 	mov	arg01, #0
0e208     00 16 06 F6 | 	mov	arg03, #0
0e20c     48 34 B1 FD | 	call	#__system___basic_print_string
0e210     52 00 00 FF 
0e214     14 E4 05 F1 | 	add	objptr, ##42004
0e218     F2 14 02 FB | 	rdlong	arg02, objptr
0e21c     52 00 00 FF 
0e220     14 E4 85 F1 | 	sub	objptr, ##42004
0e224     00 12 06 F6 | 	mov	arg01, #0
0e228     00 16 06 F6 | 	mov	arg03, #0
0e22c     0A 18 06 F6 | 	mov	arg04, #10
0e230     68 34 B1 FD | 	call	#__system___basic_print_integer
0e234     84 01 00 FF 
0e238     03 15 06 F6 | 	mov	arg02, ##@LR__5466
0e23c     00 12 06 F6 | 	mov	arg01, #0
0e240     00 16 06 F6 | 	mov	arg03, #0
0e244     10 34 B1 FD | 	call	#__system___basic_print_string
0e248     00 1E 06 F6 | 	mov	local01, #0
0e24c     52 00 00 FF 
0e250     14 E4 05 F1 | 	add	objptr, ##42004
0e254     F2 12 02 FB | 	rdlong	arg01, objptr
0e258     52 00 00 FF 
0e25c     14 E4 85 F1 | 	sub	objptr, ##42004
0e260     C8 4D B1 FD | 	call	#__system___strerror
0e264     FD 14 02 F6 | 	mov	arg02, result1
0e268     0F 13 02 F6 | 	mov	arg01, local01
0e26c     00 16 06 F6 | 	mov	arg03, #0
0e270     E4 33 B1 FD | 	call	#__system___basic_print_string
0e274     00 12 06 F6 | 	mov	arg01, #0
0e278     0A 14 06 F6 | 	mov	arg02, #10
0e27c     00 16 06 F6 | 	mov	arg03, #0
0e280     7C 33 B1 FD | 	call	#__system___basic_print_char
0e284     00 12 06 F6 | 	mov	arg01, #0
0e288     3C 81 B1 FD | 	call	#__system___getiolock_0540
0e28c     FD 00 68 FC | 	wrlong	#0, result1
0e290     09 12 06 F6 | 	mov	arg01, #9
0e294     60 77 B1 FD | 	call	#__system__close
0e298     74 06 90 FD | 	jmp	#LR__1273
0e29c                 | LR__1254
0e29c                 | '     for i=0 to 1024 : get #9,17+2*i,sample,1 : psdpoke 2048*channel+2*i, sample : next i
0e29c     04 4E 05 F1 | 	add	fp, #4
0e2a0     A7 00 68 FC | 	wrlong	#0, fp
0e2a4                 | LR__1255
0e2a4     A7 1E 02 FB | 	rdlong	local01, fp
0e2a8     01 1E 66 F0 | 	shl	local01, #1
0e2ac     11 14 06 F6 | 	mov	arg02, #17
0e2b0     0F 15 02 F1 | 	add	arg02, local01
0e2b4     78 4E 05 F1 | 	add	fp, #120
0e2b8     A7 16 02 F6 | 	mov	arg03, fp
0e2bc     7C 4E 85 F1 | 	sub	fp, #124
0e2c0     09 12 06 F6 | 	mov	arg01, #9
0e2c4     01 18 06 F6 | 	mov	arg04, #1
0e2c8     02 1A 06 F6 | 	mov	arg05, #2
0e2cc     04 35 B1 FD | 	call	#__system___basic_get
0e2d0     10 4E 05 F1 | 	add	fp, #16
0e2d4     A7 12 02 FB | 	rdlong	arg01, fp
0e2d8     0B 12 66 F0 | 	shl	arg01, #11
0e2dc     0C 4E 85 F1 | 	sub	fp, #12
0e2e0     A7 1E 02 FB | 	rdlong	local01, fp
0e2e4     01 1E 66 F0 | 	shl	local01, #1
0e2e8     0F 13 02 F1 | 	add	arg01, local01
0e2ec     78 4E 05 F1 | 	add	fp, #120
0e2f0     A7 14 E2 FA | 	rdword	arg02, fp
0e2f4     7C 4E 85 F1 | 	sub	fp, #124
0e2f8     0F 14 66 F7 | 	signx	arg02, #15
0e2fc     80 F2 B0 FD | 	call	#_psdpoke
0e300     04 4E 05 F1 | 	add	fp, #4
0e304     A7 1E 02 FB | 	rdlong	local01, fp
0e308     01 1E 06 F1 | 	add	local01, #1
0e30c     A7 1E 62 FC | 	wrlong	local01, fp
0e310     02 00 00 FF 
0e314     01 1E 56 F2 | 	cmps	local01, ##1025 wc
0e318     88 FF 9F CD |  if_b	jmp	#LR__1255
0e31c     04 4E 85 F1 | 	sub	fp, #4
0e320                 | '     close #9
0e320     09 12 06 F6 | 	mov	arg01, #9
0e324     D0 76 B1 FD | 	call	#__system__close
0e328                 | '     return
0e328     E4 05 90 FD | 	jmp	#LR__1273
0e32c                 | LR__1256
0e32c                 | '     if wptr < ($80000 - 2048) then 
0e32c     14 4E 05 F1 | 	add	fp, #20
0e330     A7 1E 02 FB | 	rdlong	local01, fp
0e334     14 4E 85 F1 | 	sub	fp, #20
0e338     FC 03 00 FF 
0e33c     00 1E 56 F2 | 	cmps	local01, ##522240 wc
0e340     70 00 90 3D |  if_ae	jmp	#LR__1258
0e344                 | '       for i=0 to 1023: psdpoke 2048*channel+2*i,dpeek(wptr+2*i): next i
0e344     04 4E 05 F1 | 	add	fp, #4
0e348     A7 00 68 FC | 	wrlong	#0, fp
0e34c     04 4E 85 F1 | 	sub	fp, #4
0e350                 | LR__1257
0e350     10 4E 05 F1 | 	add	fp, #16
0e354     A7 1E 02 FB | 	rdlong	local01, fp
0e358     0B 1E 66 F0 | 	shl	local01, #11
0e35c     0C 4E 85 F1 | 	sub	fp, #12
0e360     A7 1A 02 FB | 	rdlong	arg05, fp
0e364     0D 19 02 F6 | 	mov	arg04, arg05
0e368     01 18 66 F0 | 	shl	arg04, #1
0e36c     0C 1F 02 F1 | 	add	local01, arg04
0e370     10 4E 05 F1 | 	add	fp, #16
0e374     A7 12 02 FB | 	rdlong	arg01, fp
0e378     14 4E 85 F1 | 	sub	fp, #20
0e37c     01 1A 66 F0 | 	shl	arg05, #1
0e380     0D 13 02 F1 | 	add	arg01, arg05
0e384     09 15 E2 FA | 	rdword	arg02, arg01
0e388     0F 13 02 F6 | 	mov	arg01, local01
0e38c     F0 F1 B0 FD | 	call	#_psdpoke
0e390     04 4E 05 F1 | 	add	fp, #4
0e394     A7 1E 02 FB | 	rdlong	local01, fp
0e398     01 1E 06 F1 | 	add	local01, #1
0e39c     A7 1E 62 FC | 	wrlong	local01, fp
0e3a0     04 4E 85 F1 | 	sub	fp, #4
0e3a4     02 00 00 FF 
0e3a8     00 1E 56 F2 | 	cmps	local01, ##1024 wc
0e3ac     A0 FF 9F CD |  if_b	jmp	#LR__1257
0e3b0     5C 05 90 FD | 	jmp	#LR__1273
0e3b4                 | LR__1258
0e3b4                 | '       for i=0 to 1023 : psdpoke 2048*channel+2*i,psdpeek(wptr+2*i) : next i
0e3b4     04 4E 05 F1 | 	add	fp, #4
0e3b8     A7 00 68 FC | 	wrlong	#0, fp
0e3bc     04 4E 85 F1 | 	sub	fp, #4
0e3c0                 | LR__1259
0e3c0     10 4E 05 F1 | 	add	fp, #16
0e3c4     A7 1E 02 FB | 	rdlong	local01, fp
0e3c8     0B 1E 66 F0 | 	shl	local01, #11
0e3cc     0C 4E 85 F1 | 	sub	fp, #12
0e3d0     A7 1A 02 FB | 	rdlong	arg05, fp
0e3d4     0D 19 02 F6 | 	mov	arg04, arg05
0e3d8     01 18 66 F0 | 	shl	arg04, #1
0e3dc     0C 1F 02 F1 | 	add	local01, arg04
0e3e0     10 4E 05 F1 | 	add	fp, #16
0e3e4     A7 12 02 FB | 	rdlong	arg01, fp
0e3e8     14 4E 85 F1 | 	sub	fp, #20
0e3ec     01 1A 66 F0 | 	shl	arg05, #1
0e3f0     0D 13 02 F1 | 	add	arg01, arg05
0e3f4     C8 F2 B0 FD | 	call	#_psdpeek
0e3f8     FD 14 02 F6 | 	mov	arg02, result1
0e3fc     0F 13 02 F6 | 	mov	arg01, local01
0e400     7C F1 B0 FD | 	call	#_psdpoke
0e404     04 4E 05 F1 | 	add	fp, #4
0e408     A7 1E 02 FB | 	rdlong	local01, fp
0e40c     01 1E 06 F1 | 	add	local01, #1
0e410     A7 1E 62 FC | 	wrlong	local01, fp
0e414     04 4E 85 F1 | 	sub	fp, #4
0e418     02 00 00 FF 
0e41c     00 1E 56 F2 | 	cmps	local01, ##1024 wc
0e420     9C FF 9F CD |  if_b	jmp	#LR__1259
0e424                 | '     return 
0e424     E8 04 90 FD | 	jmp	#LR__1273
0e428                 | '   return
0e428                 | LR__1260
0e428                 | ' for i=0 to 15 : harm(i)=0: next i  
0e428     04 4E 05 F1 | 	add	fp, #4
0e42c     A7 00 68 FC | 	wrlong	#0, fp
0e430     97 16 48 FB | 	callpa	#(@LR__1262-@LR__1261)>>2,fcache_load_ptr_
0e434                 | LR__1261
0e434     A7 1E 02 FB | 	rdlong	local01, fp
0e438     02 1E 66 F0 | 	shl	local01, #2
0e43c     38 4E 05 F1 | 	add	fp, #56
0e440     A7 1E 02 F1 | 	add	local01, fp
0e444     0F 01 68 FC | 	wrlong	#0, local01
0e448     38 4E 85 F1 | 	sub	fp, #56
0e44c     A7 1E 02 FB | 	rdlong	local01, fp
0e450     01 1E 06 F1 | 	add	local01, #1
0e454     A7 1E 62 FC | 	wrlong	local01, fp
0e458     10 1E 56 F2 | 	cmps	local01, #16 wc
0e45c     D4 FF 9F CD |  if_b	jmp	#LR__1261
0e460                 | LR__1262
0e460     04 4E 85 F1 | 	sub	fp, #4
0e464                 | ' for i=numpar to 2 step -1 
0e464     A7 1E 02 FB | 	rdlong	local01, fp
0e468     04 4E 05 F1 | 	add	fp, #4
0e46c     A7 1E 62 FC | 	wrlong	local01, fp
0e470     04 4E 85 F1 | 	sub	fp, #4
0e474                 | LR__1263
0e474     34 CE BF FD | 	call	#_pop
0e478     2C 4E 05 F1 | 	add	fp, #44
0e47c     A7 FA 61 FC | 	wrlong	result1, fp
0e480     04 4E 05 F1 | 	add	fp, #4
0e484     A7 FC 61 FC | 	wrlong	result2, fp
0e488     04 4E 05 F1 | 	add	fp, #4
0e48c     A7 FE 61 FC | 	wrlong	result3, fp
0e490     30 4E 85 F1 | 	sub	fp, #48
0e494     A7 1E 02 FB | 	rdlong	local01, fp
0e498     02 1E 86 F1 | 	sub	local01, #2
0e49c     02 1E 66 F0 | 	shl	local01, #2
0e4a0     38 4E 05 F1 | 	add	fp, #56
0e4a4     A7 1E 02 F1 | 	add	local01, fp
0e4a8     10 4E 85 F1 | 	sub	fp, #16
0e4ac     A7 12 02 F6 | 	mov	arg01, fp
0e4b0     2C 4E 85 F1 | 	sub	fp, #44
0e4b4     94 D0 BF FD | 	call	#_converttofloat
0e4b8     0F FB 61 FC | 	wrlong	result1, local01
0e4bc     04 4E 05 F1 | 	add	fp, #4
0e4c0     A7 1E 02 FB | 	rdlong	local01, fp
0e4c4     01 1E 86 F1 | 	sub	local01, #1
0e4c8     A7 1E 62 FC | 	wrlong	local01, fp
0e4cc     04 4E 85 F1 | 	sub	fp, #4
0e4d0     02 1E 56 F2 | 	cmps	local01, #2 wc
0e4d4     9C FF 9F 3D |  if_ae	jmp	#LR__1263
0e4d8     D0 CD BF FD | 	call	#_pop
0e4dc     FF 1E 02 F6 | 	mov	local01, result3
0e4e0     2C 4E 05 F1 | 	add	fp, #44
0e4e4     A7 FA 61 FC | 	wrlong	result1, fp
0e4e8     04 4E 05 F1 | 	add	fp, #4
0e4ec     A7 FC 61 FC | 	wrlong	result2, fp
0e4f0     04 4E 05 F1 | 	add	fp, #4
0e4f4     A7 1E 62 FC | 	wrlong	local01, fp
0e4f8     08 4E 85 F1 | 	sub	fp, #8
0e4fc     A7 12 02 F6 | 	mov	arg01, fp
0e500     2C 4E 85 F1 | 	sub	fp, #44
0e504     88 CF BF FD | 	call	#_converttoint
0e508     10 4E 05 F1 | 	add	fp, #16
0e50c     A7 FA 61 FC | 	wrlong	result1, fp
0e510                 | ' t1=pop()
0e510                 | ' channel=converttoint(t1) : : if channel>31 then return
0e510     FD 1E 02 F6 | 	mov	local01, result1
0e514     10 4E 85 F1 | 	sub	fp, #16
0e518     20 1E 56 F2 | 	cmps	local01, #32 wc
0e51c     F0 03 90 3D |  if_ae	jmp	#LR__1273
0e520     20 4E 05 F1 | 	add	fp, #32
0e524     A7 00 68 FC | 	wrlong	#0, fp
0e528                 | ' max=0
0e528                 | ' if harm(0)<0 then
0e528     1C 4E 05 F1 | 	add	fp, #28
0e52c     A7 12 02 FB | 	rdlong	arg01, fp
0e530     3C 4E 85 F1 | 	sub	fp, #60
0e534     00 14 06 F6 | 	mov	arg02, #0
0e538     01 16 06 F6 | 	mov	arg03, #1
0e53c     0C 54 B1 FD | 	call	#__system___float_cmp
0e540     00 FA 55 F2 | 	cmps	result1, #0 wc
0e544     04 01 90 3D |  if_ae	jmp	#LR__1266
0e548     3C 4E 05 F1 | 	add	fp, #60
0e54c     A7 FA 01 FB | 	rdlong	result1, fp
0e550     1F FA 05 F4 | 	bitl	result1, #31
0e554     24 4E 85 F1 | 	sub	fp, #36
0e558     A7 FA 61 FC | 	wrlong	result1, fp
0e55c     28 4E 05 F1 | 	add	fp, #40
0e560     A7 FA 01 FB | 	rdlong	result1, fp
0e564     1F FA 05 F4 | 	bitl	result1, #31
0e568     24 4E 85 F1 | 	sub	fp, #36
0e56c     A7 FA 61 FC | 	wrlong	result1, fp
0e570     20 4E 05 F1 | 	add	fp, #32
0e574     00 C0 9F FF 
0e578     A7 00 68 FC | 	wrlong	##1065353216, fp
0e57c     24 4E 85 F1 | 	sub	fp, #36
0e580     A7 1E 02 FB | 	rdlong	local01, fp
0e584     28 4E 05 F1 | 	add	fp, #40
0e588     A7 1E 62 FC | 	wrlong	local01, fp
0e58c     24 4E 85 F1 | 	sub	fp, #36
0e590     A7 1E 02 FB | 	rdlong	local01, fp
0e594     28 4E 05 F1 | 	add	fp, #40
0e598     A7 1E 62 FC | 	wrlong	local01, fp
0e59c                 | '   harm(0)=1
0e59c                 | '   harm(1)=even
0e59c                 | '   harm(2)=odd
0e59c                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
0e59c     40 4E 85 F1 | 	sub	fp, #64
0e5a0     A7 06 68 FC | 	wrlong	#3, fp
0e5a4                 | LR__1264
0e5a4     A7 1A 02 FB | 	rdlong	arg05, fp
0e5a8     0D 21 02 F6 | 	mov	local02, arg05
0e5ac     02 20 66 F0 | 	shl	local02, #2
0e5b0     38 4E 05 F1 | 	add	fp, #56
0e5b4     A7 20 02 F1 | 	add	local02, fp
0e5b8     02 1A 86 F1 | 	sub	arg05, #2
0e5bc     02 1A 66 F0 | 	shl	arg05, #2
0e5c0     A7 1A 02 F1 | 	add	arg05, fp
0e5c4     0D 13 02 FB | 	rdlong	arg01, arg05
0e5c8     24 4E 85 F1 | 	sub	fp, #36
0e5cc     A7 14 02 FB | 	rdlong	arg02, fp
0e5d0     18 4E 85 F1 | 	sub	fp, #24
0e5d4     40 4F B1 FD | 	call	#__system___float_mul
0e5d8     10 FB 61 FC | 	wrlong	result1, local02
0e5dc     04 4E 05 F1 | 	add	fp, #4
0e5e0     A7 22 02 FB | 	rdlong	local03, fp
0e5e4     02 22 06 F1 | 	add	local03, #2
0e5e8     A7 22 62 FC | 	wrlong	local03, fp
0e5ec     10 22 56 F2 | 	cmps	local03, #16 wc
0e5f0     B0 FF 9F CD |  if_b	jmp	#LR__1264
0e5f4                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
0e5f4     A7 08 68 FC | 	wrlong	#4, fp
0e5f8                 | LR__1265
0e5f8     A7 22 02 FB | 	rdlong	local03, fp
0e5fc     11 21 02 F6 | 	mov	local02, local03
0e600     02 20 66 F0 | 	shl	local02, #2
0e604     38 4E 05 F1 | 	add	fp, #56
0e608     A7 20 02 F1 | 	add	local02, fp
0e60c     02 22 86 F1 | 	sub	local03, #2
0e610     02 22 66 F0 | 	shl	local03, #2
0e614     A7 22 02 F1 | 	add	local03, fp
0e618     11 13 02 FB | 	rdlong	arg01, local03
0e61c     20 4E 85 F1 | 	sub	fp, #32
0e620     A7 14 02 FB | 	rdlong	arg02, fp
0e624     1C 4E 85 F1 | 	sub	fp, #28
0e628     EC 4E B1 FD | 	call	#__system___float_mul
0e62c     10 FB 61 FC | 	wrlong	result1, local02
0e630     04 4E 05 F1 | 	add	fp, #4
0e634     A7 22 02 FB | 	rdlong	local03, fp
0e638     02 22 06 F1 | 	add	local03, #2
0e63c     A7 22 62 FC | 	wrlong	local03, fp
0e640     0F 22 56 F2 | 	cmps	local03, #15 wc
0e644     B0 FF 9F CD |  if_b	jmp	#LR__1265
0e648     04 4E 85 F1 | 	sub	fp, #4
0e64c                 | LR__1266
0e64c                 | ' if harm(0)>=0 then ' synthesize with harmonics
0e64c     3C 4E 05 F1 | 	add	fp, #60
0e650     A7 12 02 FB | 	rdlong	arg01, fp
0e654     3C 4E 85 F1 | 	sub	fp, #60
0e658     00 14 06 F6 | 	mov	arg02, #0
0e65c     01 16 66 F6 | 	neg	arg03, #1
0e660     E8 52 B1 FD | 	call	#__system___float_cmp
0e664     00 FA 55 F2 | 	cmps	result1, #0 wc
0e668     A4 02 90 CD |  if_b	jmp	#LR__1272
0e66c                 | '   for i=0 to 1023
0e66c     04 4E 05 F1 | 	add	fp, #4
0e670     A7 00 68 FC | 	wrlong	#0, fp
0e674     04 4E 85 F1 | 	sub	fp, #4
0e678                 | LR__1267
0e678     24 4E 05 F1 | 	add	fp, #36
0e67c     A7 00 68 FC | 	wrlong	#0, fp
0e680                 | '     spl=0
0e680                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
0e680     1C 4E 85 F1 | 	sub	fp, #28
0e684     A7 00 68 FC | 	wrlong	#0, fp
0e688                 | LR__1268
0e688     A7 20 02 FB | 	rdlong	local02, fp
0e68c     02 20 66 F0 | 	shl	local02, #2
0e690     34 4E 05 F1 | 	add	fp, #52
0e694     A7 20 02 F1 | 	add	local02, fp
0e698     10 23 02 FB | 	rdlong	local03, local02
0e69c     87 E4 1D FF 
0e6a0     DB 21 06 F6 | 	mov	local02, ##1003032539
0e6a4     38 4E 85 F1 | 	sub	fp, #56
0e6a8     A7 12 02 FB | 	rdlong	arg01, fp
0e6ac     04 4E 85 F1 | 	sub	fp, #4
0e6b0     09 13 52 F6 | 	abs	arg01, arg01 wc
0e6b4     1F 24 C6 C9 |  if_b	decod	local04, #31
0e6b8     00 24 06 36 |  if_ae	mov	local04, #0
0e6bc     54 4A B1 FD | 	call	#__system___float_fromuns
0e6c0     12 FB 61 F5 | 	xor	result1, local04
0e6c4     FD 14 02 F6 | 	mov	arg02, result1
0e6c8     10 13 02 F6 | 	mov	arg01, local02
0e6cc     48 4E B1 FD | 	call	#__system___float_mul
0e6d0     FD 20 02 F6 | 	mov	local02, result1
0e6d4     08 4E 05 F1 | 	add	fp, #8
0e6d8     A7 12 02 FB | 	rdlong	arg01, fp
0e6dc     08 4E 85 F1 | 	sub	fp, #8
0e6e0     01 12 06 F1 | 	add	arg01, #1
0e6e4     09 13 52 F6 | 	abs	arg01, arg01 wc
0e6e8     1F 24 C6 C9 |  if_b	decod	local04, #31
0e6ec     00 24 06 36 |  if_ae	mov	local04, #0
0e6f0     20 4A B1 FD | 	call	#__system___float_fromuns
0e6f4     12 FB 61 F5 | 	xor	result1, local04
0e6f8     FD 14 02 F6 | 	mov	arg02, result1
0e6fc     10 13 02 F6 | 	mov	arg01, local02
0e700     14 4E B1 FD | 	call	#__system___float_mul
0e704     FD 12 02 F6 | 	mov	arg01, result1
0e708     6C 57 B1 FD | 	call	#__system____builtin_sinf
0e70c     FD 14 02 F6 | 	mov	arg02, result1
0e710     11 13 02 F6 | 	mov	arg01, local03
0e714     00 4E B1 FD | 	call	#__system___float_mul
0e718     FD 14 02 F6 | 	mov	arg02, result1
0e71c     24 4E 05 F1 | 	add	fp, #36
0e720     A7 12 02 FB | 	rdlong	arg01, fp
0e724     24 4E 85 F1 | 	sub	fp, #36
0e728     1C 4A B1 FD | 	call	#__system___float_add
0e72c     24 4E 05 F1 | 	add	fp, #36
0e730     A7 FA 61 FC | 	wrlong	result1, fp
0e734     1C 4E 85 F1 | 	sub	fp, #28
0e738     A7 16 02 FB | 	rdlong	arg03, fp
0e73c     01 16 06 F1 | 	add	arg03, #1
0e740     A7 16 62 FC | 	wrlong	arg03, fp
0e744     10 16 56 F2 | 	cmps	arg03, #16 wc
0e748     3C FF 9F CD |  if_b	jmp	#LR__1268
0e74c                 | '     if abs(spl)>max then max=abs(spl)  
0e74c     1C 4E 05 F1 | 	add	fp, #28
0e750     A7 12 02 FB | 	rdlong	arg01, fp
0e754     1F 12 06 F4 | 	bitl	arg01, #31
0e758     04 4E 85 F1 | 	sub	fp, #4
0e75c     A7 14 02 FB | 	rdlong	arg02, fp
0e760     20 4E 85 F1 | 	sub	fp, #32
0e764     01 16 66 F6 | 	neg	arg03, #1
0e768     E0 51 B1 FD | 	call	#__system___float_cmp
0e76c     01 FA 55 F2 | 	cmps	result1, #1 wc
0e770     18 00 90 CD |  if_b	jmp	#LR__1269
0e774     24 4E 05 F1 | 	add	fp, #36
0e778     A7 FA 01 FB | 	rdlong	result1, fp
0e77c     1F FA 05 F4 | 	bitl	result1, #31
0e780     04 4E 85 F1 | 	sub	fp, #4
0e784     A7 FA 61 FC | 	wrlong	result1, fp
0e788     20 4E 85 F1 | 	sub	fp, #32
0e78c                 | LR__1269
0e78c     04 4E 05 F1 | 	add	fp, #4
0e790     A7 22 02 FB | 	rdlong	local03, fp
0e794     01 22 06 F1 | 	add	local03, #1
0e798     A7 22 62 FC | 	wrlong	local03, fp
0e79c     04 4E 85 F1 | 	sub	fp, #4
0e7a0     02 00 00 FF 
0e7a4     00 22 56 F2 | 	cmps	local03, ##1024 wc
0e7a8     CC FE 9F CD |  if_b	jmp	#LR__1267
0e7ac                 | '   for i=0 to 1023
0e7ac     04 4E 05 F1 | 	add	fp, #4
0e7b0     A7 00 68 FC | 	wrlong	#0, fp
0e7b4     04 4E 85 F1 | 	sub	fp, #4
0e7b8                 | LR__1270
0e7b8     24 4E 05 F1 | 	add	fp, #36
0e7bc     A7 00 68 FC | 	wrlong	#0, fp
0e7c0                 | '     spl=0
0e7c0                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j 
0e7c0     1C 4E 85 F1 | 	sub	fp, #28
0e7c4     A7 00 68 FC | 	wrlong	#0, fp
0e7c8                 | LR__1271
0e7c8     A7 22 02 FB | 	rdlong	local03, fp
0e7cc     02 22 66 F0 | 	shl	local03, #2
0e7d0     34 4E 05 F1 | 	add	fp, #52
0e7d4     A7 22 02 F1 | 	add	local03, fp
0e7d8     11 23 02 FB | 	rdlong	local03, local03
0e7dc     1C 4E 85 F1 | 	sub	fp, #28
0e7e0     A7 14 02 FB | 	rdlong	arg02, fp
0e7e4     20 4E 85 F1 | 	sub	fp, #32
0e7e8     58 7F 23 FF 
0e7ec     00 12 06 F6 | 	mov	arg01, ##1191096320
0e7f0     28 4F B1 FD | 	call	#__system___float_div
0e7f4     FD 14 02 F6 | 	mov	arg02, result1
0e7f8     11 13 02 F6 | 	mov	arg01, local03
0e7fc     18 4D B1 FD | 	call	#__system___float_mul
0e800     FD 22 02 F6 | 	mov	local03, result1
0e804     87 E4 1D FF 
0e808     DB 21 06 F6 | 	mov	local02, ##1003032539
0e80c     04 4E 05 F1 | 	add	fp, #4
0e810     A7 12 02 FB | 	rdlong	arg01, fp
0e814     04 4E 85 F1 | 	sub	fp, #4
0e818     09 13 52 F6 | 	abs	arg01, arg01 wc
0e81c     1F 24 C6 C9 |  if_b	decod	local04, #31
0e820     00 24 06 36 |  if_ae	mov	local04, #0
0e824     EC 48 B1 FD | 	call	#__system___float_fromuns
0e828     12 FB 61 F5 | 	xor	result1, local04
0e82c     FD 14 02 F6 | 	mov	arg02, result1
0e830     10 13 02 F6 | 	mov	arg01, local02
0e834     E0 4C B1 FD | 	call	#__system___float_mul
0e838     FD 20 02 F6 | 	mov	local02, result1
0e83c     08 4E 05 F1 | 	add	fp, #8
0e840     A7 12 02 FB | 	rdlong	arg01, fp
0e844     08 4E 85 F1 | 	sub	fp, #8
0e848     01 12 06 F1 | 	add	arg01, #1
0e84c     09 13 52 F6 | 	abs	arg01, arg01 wc
0e850     1F 24 C6 C9 |  if_b	decod	local04, #31
0e854     00 24 06 36 |  if_ae	mov	local04, #0
0e858     B8 48 B1 FD | 	call	#__system___float_fromuns
0e85c     12 FB 61 F5 | 	xor	result1, local04
0e860     FD 14 02 F6 | 	mov	arg02, result1
0e864     10 13 02 F6 | 	mov	arg01, local02
0e868     AC 4C B1 FD | 	call	#__system___float_mul
0e86c     FD 12 02 F6 | 	mov	arg01, result1
0e870     04 56 B1 FD | 	call	#__system____builtin_sinf
0e874     FD 14 02 F6 | 	mov	arg02, result1
0e878     11 13 02 F6 | 	mov	arg01, local03
0e87c     98 4C B1 FD | 	call	#__system___float_mul
0e880     FD 14 02 F6 | 	mov	arg02, result1
0e884     24 4E 05 F1 | 	add	fp, #36
0e888     A7 12 02 FB | 	rdlong	arg01, fp
0e88c     24 4E 85 F1 | 	sub	fp, #36
0e890     B4 48 B1 FD | 	call	#__system___float_add
0e894     24 4E 05 F1 | 	add	fp, #36
0e898     A7 FA 61 FC | 	wrlong	result1, fp
0e89c     1C 4E 85 F1 | 	sub	fp, #28
0e8a0     A7 22 02 FB | 	rdlong	local03, fp
0e8a4     01 22 06 F1 | 	add	local03, #1
0e8a8     A7 22 62 FC | 	wrlong	local03, fp
0e8ac     10 22 56 F2 | 	cmps	local03, #16 wc
0e8b0     14 FF 9F CD |  if_b	jmp	#LR__1271
0e8b4     08 4E 05 F1 | 	add	fp, #8
0e8b8     A7 22 02 FB | 	rdlong	local03, fp
0e8bc     0B 22 66 F0 | 	shl	local03, #11
0e8c0     0C 4E 85 F1 | 	sub	fp, #12
0e8c4     A7 20 02 FB | 	rdlong	local02, fp
0e8c8     01 20 66 F0 | 	shl	local02, #1
0e8cc     10 23 02 F1 | 	add	local03, local02
0e8d0     20 4E 05 F1 | 	add	fp, #32
0e8d4     A7 12 02 FB | 	rdlong	arg01, fp
0e8d8     24 4E 85 F1 | 	sub	fp, #36
0e8dc     01 14 06 F6 | 	mov	arg02, #1
0e8e0     FC 50 B1 FD | 	call	#__system___float_tointeger
0e8e4     FD 14 02 F6 | 	mov	arg02, result1
0e8e8     11 13 02 F6 | 	mov	arg01, local03
0e8ec     90 EC B0 FD | 	call	#_psdpoke
0e8f0     04 4E 05 F1 | 	add	fp, #4
0e8f4     A7 22 02 FB | 	rdlong	local03, fp
0e8f8     01 22 06 F1 | 	add	local03, #1
0e8fc     A7 22 62 FC | 	wrlong	local03, fp
0e900     04 4E 85 F1 | 	sub	fp, #4
0e904     02 00 00 FF 
0e908     00 22 56 F2 | 	cmps	local03, ##1024 wc
0e90c     A8 FE 9F CD |  if_b	jmp	#LR__1270
0e910                 | LR__1272
0e910                 | LR__1273
0e910     A7 F0 03 F6 | 	mov	ptra, fp
0e914     B2 00 A0 FD | 	call	#popregs_
0e918                 | _do_defsnd_ret
0e918     2D 00 64 FD | 	ret
0e91c                 | 
0e91c                 | ' 
0e91c                 | ' '-------------------- defsprite
0e91c                 | ' 
0e91c                 | ' sub do_defsprite
0e91c                 | _do_defsprite
0e91c     07 4A 05 F6 | 	mov	COUNT_, #7
0e920     A8 00 A0 FD | 	call	#pushregs_
0e924     60 F0 07 F1 | 	add	ptra, #96
0e928     80 C9 BF FD | 	call	#_pop
0e92c     FD 16 02 F6 | 	mov	arg03, result1
0e930     FE 14 02 F6 | 	mov	arg02, result2
0e934     FF 12 02 F6 | 	mov	arg01, result3
0e938     30 4E 05 F1 | 	add	fp, #48
0e93c     A7 16 62 FC | 	wrlong	arg03, fp
0e940     04 4E 05 F1 | 	add	fp, #4
0e944     A7 14 62 FC | 	wrlong	arg02, fp
0e948     04 4E 05 F1 | 	add	fp, #4
0e94c     A7 12 62 FC | 	wrlong	arg01, fp
0e950     38 4E 85 F1 | 	sub	fp, #56
0e954     54 C9 BF FD | 	call	#_pop
0e958     FD 16 02 F6 | 	mov	arg03, result1
0e95c     FE 14 02 F6 | 	mov	arg02, result2
0e960     FF 12 02 F6 | 	mov	arg01, result3
0e964     24 4E 05 F1 | 	add	fp, #36
0e968     A7 16 62 FC | 	wrlong	arg03, fp
0e96c     04 4E 05 F1 | 	add	fp, #4
0e970     A7 14 62 FC | 	wrlong	arg02, fp
0e974     04 4E 05 F1 | 	add	fp, #4
0e978     A7 12 62 FC | 	wrlong	arg01, fp
0e97c     2C 4E 85 F1 | 	sub	fp, #44
0e980     28 C9 BF FD | 	call	#_pop
0e984     FD 16 02 F6 | 	mov	arg03, result1
0e988     FE 14 02 F6 | 	mov	arg02, result2
0e98c     FF 12 02 F6 | 	mov	arg01, result3
0e990     18 4E 05 F1 | 	add	fp, #24
0e994     A7 16 62 FC | 	wrlong	arg03, fp
0e998     04 4E 05 F1 | 	add	fp, #4
0e99c     A7 14 62 FC | 	wrlong	arg02, fp
0e9a0     04 4E 05 F1 | 	add	fp, #4
0e9a4     A7 12 62 FC | 	wrlong	arg01, fp
0e9a8     20 4E 85 F1 | 	sub	fp, #32
0e9ac     FC C8 BF FD | 	call	#_pop
0e9b0     FD 16 02 F6 | 	mov	arg03, result1
0e9b4     FE 14 02 F6 | 	mov	arg02, result2
0e9b8     FF 12 02 F6 | 	mov	arg01, result3
0e9bc     0C 4E 05 F1 | 	add	fp, #12
0e9c0     A7 16 62 FC | 	wrlong	arg03, fp
0e9c4     04 4E 05 F1 | 	add	fp, #4
0e9c8     A7 14 62 FC | 	wrlong	arg02, fp
0e9cc     04 4E 05 F1 | 	add	fp, #4
0e9d0     A7 12 62 FC | 	wrlong	arg01, fp
0e9d4     14 4E 85 F1 | 	sub	fp, #20
0e9d8     D0 C8 BF FD | 	call	#_pop
0e9dc     FF 16 02 F6 | 	mov	arg03, result3
0e9e0     A7 FA 61 FC | 	wrlong	result1, fp
0e9e4     04 4E 05 F1 | 	add	fp, #4
0e9e8     A7 FC 61 FC | 	wrlong	result2, fp
0e9ec     04 4E 05 F1 | 	add	fp, #4
0e9f0     A7 16 62 FC | 	wrlong	arg03, fp
0e9f4     08 4E 85 F1 | 	sub	fp, #8
0e9f8     A7 12 02 F6 | 	mov	arg01, fp
0e9fc     90 CA BF FD | 	call	#_converttoint
0ea00     3C 4E 05 F1 | 	add	fp, #60
0ea04     A7 FA 61 FC | 	wrlong	result1, fp
0ea08     30 4E 85 F1 | 	sub	fp, #48
0ea0c     A7 12 02 F6 | 	mov	arg01, fp
0ea10     0C 4E 85 F1 | 	sub	fp, #12
0ea14     78 CA BF FD | 	call	#_converttoint
0ea18     40 4E 05 F1 | 	add	fp, #64
0ea1c     A7 FA 61 FC | 	wrlong	result1, fp
0ea20     28 4E 85 F1 | 	sub	fp, #40
0ea24     A7 12 02 F6 | 	mov	arg01, fp
0ea28     18 4E 85 F1 | 	sub	fp, #24
0ea2c     60 CA BF FD | 	call	#_converttoint
0ea30     44 4E 05 F1 | 	add	fp, #68
0ea34     A7 FA 61 FC | 	wrlong	result1, fp
0ea38     20 4E 85 F1 | 	sub	fp, #32
0ea3c     A7 12 02 F6 | 	mov	arg01, fp
0ea40     24 4E 85 F1 | 	sub	fp, #36
0ea44     48 CA BF FD | 	call	#_converttoint
0ea48     48 4E 05 F1 | 	add	fp, #72
0ea4c     A7 FA 61 FC | 	wrlong	result1, fp
0ea50     18 4E 85 F1 | 	sub	fp, #24
0ea54     A7 12 02 F6 | 	mov	arg01, fp
0ea58     30 4E 85 F1 | 	sub	fp, #48
0ea5c     30 CA BF FD | 	call	#_converttoint
0ea60     4C 4E 05 F1 | 	add	fp, #76
0ea64     A7 FA 61 FC | 	wrlong	result1, fp
0ea68                 | ' 
0ea68                 | ' t5=pop()
0ea68                 | ' t4=pop()
0ea68                 | ' t3=pop()
0ea68                 | ' t2=pop()
0ea68                 | ' t1=pop()
0ea68                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5) ' do convert, defsprite is not a racing command
0ea68                 | ' if sprite(a1)<> nil then delete(sprite(a1))	' todo: check parameters for limits
0ea68     10 4E 85 F1 | 	sub	fp, #16
0ea6c     A7 16 02 FB | 	rdlong	arg03, fp
0ea70     3C 4E 85 F1 | 	sub	fp, #60
0ea74     02 16 66 F0 | 	shl	arg03, #2
0ea78     51 00 00 FF 
0ea7c     68 E5 05 F1 | 	add	objptr, ##41832
0ea80     F2 16 02 F1 | 	add	arg03, objptr
0ea84     0B 17 0A FB | 	rdlong	arg03, arg03 wz
0ea88     51 00 00 FF 
0ea8c     68 E5 85 F1 | 	sub	objptr, ##41832
0ea90     2C 00 90 AD |  if_e	jmp	#LR__1280
0ea94     3C 4E 05 F1 | 	add	fp, #60
0ea98     A7 16 02 FB | 	rdlong	arg03, fp
0ea9c     3C 4E 85 F1 | 	sub	fp, #60
0eaa0     02 16 66 F0 | 	shl	arg03, #2
0eaa4     51 00 00 FF 
0eaa8     68 E5 05 F1 | 	add	objptr, ##41832
0eaac     F2 16 02 F1 | 	add	arg03, objptr
0eab0     0B 13 02 FB | 	rdlong	arg01, arg03
0eab4     51 00 00 FF 
0eab8     68 E5 85 F1 | 	sub	objptr, ##41832
0eabc     BC 5E B1 FD | 	call	#__system___gc_free
0eac0                 | LR__1280
0eac0     3C 4E 05 F1 | 	add	fp, #60
0eac4     A7 1E 02 FB | 	rdlong	local01, fp
0eac8     0C 4E 05 F1 | 	add	fp, #12
0eacc     A7 16 02 FB | 	rdlong	arg03, fp
0ead0     04 4E 05 F1 | 	add	fp, #4
0ead4     A7 14 02 FB | 	rdlong	arg02, fp
0ead8     0A 17 02 FD | 	qmul	arg03, arg02
0eadc     02 1E 66 F0 | 	shl	local01, #2
0eae0     51 00 00 FF 
0eae4     68 E5 05 F1 | 	add	objptr, ##41832
0eae8     F2 1E 02 F1 | 	add	local01, objptr
0eaec     4C 4E 85 F1 | 	sub	fp, #76
0eaf0     51 00 00 FF 
0eaf4     68 E5 85 F1 | 	sub	objptr, ##41832
0eaf8     18 12 62 FD | 	getqx	arg01
0eafc     40 5D B1 FD | 	call	#__system___gc_alloc_managed
0eb00     0F FB 61 FC | 	wrlong	result1, local01
0eb04                 | ' for y=a3 to a3+a5-1
0eb04     44 4E 05 F1 | 	add	fp, #68
0eb08     A7 20 02 FB | 	rdlong	local02, fp
0eb0c     0C 4E 05 F1 | 	add	fp, #12
0eb10     A7 20 62 FC | 	wrlong	local02, fp
0eb14     0C 4E 85 F1 | 	sub	fp, #12
0eb18     A7 22 02 FB | 	rdlong	local03, fp
0eb1c     08 4E 05 F1 | 	add	fp, #8
0eb20     A7 24 02 FB | 	rdlong	local04, fp
0eb24     4C 4E 85 F1 | 	sub	fp, #76
0eb28     12 23 02 F1 | 	add	local03, local04
0eb2c                 | LR__1281
0eb2c     50 4E 05 F1 | 	add	fp, #80
0eb30     A7 20 02 FB | 	rdlong	local02, fp
0eb34     50 4E 85 F1 | 	sub	fp, #80
0eb38     11 21 52 F2 | 	cmps	local02, local03 wc
0eb3c     F4 00 90 3D |  if_ae	jmp	#LR__1284
0eb40                 | '   for x=a2 to a4+a2-1
0eb40     40 4E 05 F1 | 	add	fp, #64
0eb44     A7 1E 02 FB | 	rdlong	local01, fp
0eb48     14 4E 05 F1 | 	add	fp, #20
0eb4c     A7 1E 62 FC | 	wrlong	local01, fp
0eb50     0C 4E 85 F1 | 	sub	fp, #12
0eb54     A7 26 02 FB | 	rdlong	local05, fp
0eb58     08 4E 85 F1 | 	sub	fp, #8
0eb5c     A7 28 02 FB | 	rdlong	local06, fp
0eb60     40 4E 85 F1 | 	sub	fp, #64
0eb64     14 27 02 F1 | 	add	local05, local06
0eb68                 | LR__1282
0eb68     54 4E 05 F1 | 	add	fp, #84
0eb6c     A7 1E 02 FB | 	rdlong	local01, fp
0eb70     54 4E 85 F1 | 	sub	fp, #84
0eb74     13 1F 52 F2 | 	cmps	local01, local05 wc
0eb78     A0 00 90 3D |  if_ae	jmp	#LR__1283
0eb7c     3C 4E 05 F1 | 	add	fp, #60
0eb80     A7 28 02 FB | 	rdlong	local06, fp
0eb84     18 4E 05 F1 | 	add	fp, #24
0eb88     A7 24 02 FB | 	rdlong	local04, fp
0eb8c     14 4E 85 F1 | 	sub	fp, #20
0eb90     A7 20 02 FB | 	rdlong	local02, fp
0eb94     10 4E 05 F1 | 	add	fp, #16
0eb98     A7 1E 02 FB | 	rdlong	local01, fp
0eb9c     0F 17 02 F6 | 	mov	arg03, local01
0eba0     0C 4E 85 F1 | 	sub	fp, #12
0eba4     A7 14 02 FB | 	rdlong	arg02, fp
0eba8     0A 17 82 F1 | 	sub	arg03, arg02
0ebac     04 4E 05 F1 | 	add	fp, #4
0ebb0     A7 14 02 FB | 	rdlong	arg02, fp
0ebb4     0A 17 02 FD | 	qmul	arg03, arg02
0ebb8     02 28 66 F0 | 	shl	local06, #2
0ebbc     51 00 00 FF 
0ebc0     68 E5 05 F1 | 	add	objptr, ##41832
0ebc4     F2 28 02 F1 | 	add	local06, objptr
0ebc8     14 29 02 FB | 	rdlong	local06, local06
0ebcc     12 2B 02 F6 | 	mov	local07, local04
0ebd0     10 2B 82 F1 | 	sub	local07, local02
0ebd4     51 00 00 FF 
0ebd8     68 E5 85 F1 | 	sub	objptr, ##41832
0ebdc     F2 12 02 FB | 	rdlong	arg01, objptr
0ebe0     12 13 02 F1 | 	add	arg01, local04
0ebe4     48 4E 85 F1 | 	sub	fp, #72
0ebe8     0A 1E 66 F0 | 	shl	local01, #10
0ebec     0F 13 02 F1 | 	add	arg01, local01
0ebf0     18 24 62 FD | 	getqx	local04
0ebf4     12 2B 02 F1 | 	add	local07, local04
0ebf8     14 2B 02 F1 | 	add	local07, local06
0ebfc     10 EA B0 FD | 	call	#_pspeek
0ec00     15 FB 41 FC | 	wrbyte	result1, local07
0ec04     54 4E 05 F1 | 	add	fp, #84
0ec08     A7 2A 02 FB | 	rdlong	local07, fp
0ec0c     01 2A 06 F1 | 	add	local07, #1
0ec10     A7 2A 62 FC | 	wrlong	local07, fp
0ec14     54 4E 85 F1 | 	sub	fp, #84
0ec18     4C FF 9F FD | 	jmp	#LR__1282
0ec1c                 | LR__1283
0ec1c     50 4E 05 F1 | 	add	fp, #80
0ec20     A7 2A 02 FB | 	rdlong	local07, fp
0ec24     01 2A 06 F1 | 	add	local07, #1
0ec28     A7 2A 62 FC | 	wrlong	local07, fp
0ec2c     50 4E 85 F1 | 	sub	fp, #80
0ec30     F8 FE 9F FD | 	jmp	#LR__1281
0ec34                 | LR__1284
0ec34     3C 4E 05 F1 | 	add	fp, #60
0ec38     A7 2A 02 FB | 	rdlong	local07, fp
0ec3c     15 13 02 F6 | 	mov	arg01, local07
0ec40     3C 4E 85 F1 | 	sub	fp, #60
0ec44     02 2A 66 F0 | 	shl	local07, #2
0ec48     51 00 00 FF 
0ec4c     68 E5 05 F1 | 	add	objptr, ##41832
0ec50     F2 2A 02 F1 | 	add	local07, objptr
0ec54     15 15 02 FB | 	rdlong	arg02, local07
0ec58     51 00 00 FF 
0ec5c     68 E5 85 F1 | 	sub	objptr, ##41832
0ec60     74 F6 B0 FD | 	call	#_hg010b_spin2_setspriteptr
0ec64     3C 4E 05 F1 | 	add	fp, #60
0ec68     A7 12 02 FB | 	rdlong	arg01, fp
0ec6c     0C 4E 05 F1 | 	add	fp, #12
0ec70     A7 14 02 FB | 	rdlong	arg02, fp
0ec74     04 4E 05 F1 | 	add	fp, #4
0ec78     A7 16 02 FB | 	rdlong	arg03, fp
0ec7c     4C 4E 85 F1 | 	sub	fp, #76
0ec80     E4 F6 B0 FD | 	call	#_hg010b_spin2_setspritesize
0ec84     A7 F0 03 F6 | 	mov	ptra, fp
0ec88     B2 00 A0 FD | 	call	#popregs_
0ec8c                 | _do_defsprite_ret
0ec8c     2D 00 64 FD | 	ret
0ec90                 | 
0ec90                 | ' 
0ec90                 | ' '-------------------- dir
0ec90                 | ' 
0ec90                 | ' sub do_dir
0ec90                 | _do_dir
0ec90     13 4A 05 F6 | 	mov	COUNT_, #19
0ec94     A8 00 A0 FD | 	call	#pushregs_
0ec98     01 00 00 FF 
0ec9c     38 F0 07 F1 | 	add	ptra, ##568
0eca0     84 01 00 FF 
0eca4     06 13 06 F6 | 	mov	arg01, ##@LR__5467
0eca8     44 23 B1 FD | 	call	#__system___chdir
0ecac                 | ' 
0ecac                 | ' chdir("/sd/bas")       ' set working directory - TODO allow to change it!
0ecac                 | ' print "Working directory: "; currentdir$ 
0ecac     00 12 06 F6 | 	mov	arg01, #0
0ecb0     14 77 B1 FD | 	call	#__system___getiolock_0540
0ecb4     FD 12 02 F6 | 	mov	arg01, result1
0ecb8     A8 1C B1 FD | 	call	#__system___lockmem
0ecbc     84 01 00 FF 
0ecc0     0E 15 06 F6 | 	mov	arg02, ##@LR__5468
0ecc4     00 12 06 F6 | 	mov	arg01, #0
0ecc8     00 16 06 F6 | 	mov	arg03, #0
0eccc     88 29 B1 FD | 	call	#__system___basic_print_string
0ecd0     4A 00 00 FF 
0ecd4     94 E4 05 F1 | 	add	objptr, ##38036
0ecd8     F2 14 02 FB | 	rdlong	arg02, objptr
0ecdc     4A 00 00 FF 
0ece0     94 E4 85 F1 | 	sub	objptr, ##38036
0ece4     00 12 06 F6 | 	mov	arg01, #0
0ece8     00 16 06 F6 | 	mov	arg03, #0
0ecec     68 29 B1 FD | 	call	#__system___basic_print_string
0ecf0     00 12 06 F6 | 	mov	arg01, #0
0ecf4     0A 14 06 F6 | 	mov	arg02, #10
0ecf8     00 16 06 F6 | 	mov	arg03, #0
0ecfc     00 29 B1 FD | 	call	#__system___basic_print_char
0ed00     01 1E 06 F6 | 	mov	local01, #1
0ed04     00 12 06 F6 | 	mov	arg01, #0
0ed08     BC 76 B1 FD | 	call	#__system___getiolock_0540
0ed0c     FD 00 68 FC | 	wrlong	#0, result1
0ed10     00 20 06 F6 | 	mov	local02, #0
0ed14     00 22 06 F6 | 	mov	local03, #0
0ed18                 | ' px=0
0ed18                 | ' for i=0 to 127: filelist(i)="" : next i
0ed18     00 24 06 F6 | 	mov	local04, #0
0ed1c     1C 4E 05 F1 | 	add	fp, #28
0ed20     97 12 48 FB | 	callpa	#(@LR__1291-@LR__1290)>>2,fcache_load_ptr_
0ed24                 | LR__1290
0ed24     12 27 02 F6 | 	mov	local05, local04
0ed28     02 26 66 F0 | 	shl	local05, #2
0ed2c     A7 26 02 F1 | 	add	local05, fp
0ed30     84 01 00 FF 
0ed34     22 29 06 F6 | 	mov	local06, ##@LR__5469
0ed38     13 29 62 FC | 	wrlong	local06, local05
0ed3c     01 24 06 F1 | 	add	local04, #1
0ed40     80 24 56 F2 | 	cmps	local04, #128 wc
0ed44     DC FF 9F CD |  if_b	jmp	#LR__1290
0ed48                 | LR__1291
0ed48     1C 4E 85 F1 | 	sub	fp, #28
0ed4c     84 01 00 FF 
0ed50     23 13 06 F6 | 	mov	arg01, ##@LR__5470
0ed54     10 14 06 F6 | 	mov	arg02, #16
0ed58     A4 77 B1 FD | 	call	#__system___basic_dir
0ed5c     FD 2A 02 F6 | 	mov	local07, result1
0ed60     00 2C 06 F6 | 	mov	local08, #0
0ed64                 | ' filename=dir$("*", fbDirectory)
0ed64                 | ' n=0
0ed64                 | ' while filename <> "" andalso filename <> nil andalso n<128
0ed64                 | LR__1292
0ed64     84 01 00 FF 
0ed68     25 2F 06 F6 | 	mov	local09, ##@LR__5471
0ed6c     15 13 02 F6 | 	mov	arg01, local07
0ed70     17 15 02 F6 | 	mov	arg02, local09
0ed74     14 1C B1 FD | 	call	#__system___string_cmp
0ed78     00 FA 0D F2 | 	cmp	result1, #0 wz
0ed7c     68 00 90 AD |  if_e	jmp	#LR__1293
0ed80     00 2E 06 F6 | 	mov	local09, #0
0ed84     15 13 02 F6 | 	mov	arg01, local07
0ed88     00 14 06 F6 | 	mov	arg02, #0
0ed8c     FC 1B B1 FD | 	call	#__system___string_cmp
0ed90     00 FA 0D F2 | 	cmp	result1, #0 wz
0ed94     50 00 90 AD |  if_e	jmp	#LR__1293
0ed98     80 2C 56 F2 | 	cmps	local08, #128 wc
0ed9c     48 00 90 3D |  if_ae	jmp	#LR__1293
0eda0     84 01 00 FF 
0eda4     26 13 06 F6 | 	mov	arg01, ##@LR__5472
0eda8     15 15 02 F6 | 	mov	arg02, local07
0edac     10 1C B1 FD | 	call	#__system___string_concat
0edb0     FD 2A 02 F6 | 	mov	local07, result1
0edb4     16 27 02 F6 | 	mov	local05, local08
0edb8     02 26 66 F0 | 	shl	local05, #2
0edbc     1C 4E 05 F1 | 	add	fp, #28
0edc0     A7 26 02 F1 | 	add	local05, fp
0edc4     13 2B 62 FC | 	wrlong	local07, local05
0edc8     01 2C 06 F1 | 	add	local08, #1
0edcc     00 26 06 F6 | 	mov	local05, #0
0edd0     00 12 06 F6 | 	mov	arg01, #0
0edd4     00 14 06 F6 | 	mov	arg02, #0
0edd8     1C 4E 85 F1 | 	sub	fp, #28
0eddc     20 77 B1 FD | 	call	#__system___basic_dir
0ede0     FD 2A 02 F6 | 	mov	local07, result1
0ede4     7C FF 9F FD | 	jmp	#LR__1292
0ede8                 | LR__1293
0ede8                 | ' for i=0 to n-1			' now sort this
0ede8     00 24 06 F6 | 	mov	local04, #0
0edec     16 31 02 F6 | 	mov	local10, local08
0edf0                 | LR__1294
0edf0     18 25 52 F2 | 	cmps	local04, local10 wc
0edf4     DC 00 90 3D |  if_ae	jmp	#LR__1298
0edf8     00 32 06 F6 | 	mov	local11, #0
0edfc                 | '   swapped=false
0edfc                 | '   for j=0 to n-i-2
0edfc     00 34 06 F6 | 	mov	local12, #0
0ee00     16 37 02 F6 | 	mov	local13, local08
0ee04     12 37 82 F1 | 	sub	local13, local04
0ee08     01 36 86 F1 | 	sub	local13, #1
0ee0c                 | LR__1295
0ee0c     1B 35 52 F2 | 	cmps	local12, local13 wc
0ee10     B0 00 90 3D |  if_ae	jmp	#LR__1297
0ee14                 | '     if filelist(j) > filelist(j+1) then
0ee14     1A 2F 02 F6 | 	mov	local09, local12
0ee18     02 2E 66 F0 | 	shl	local09, #2
0ee1c     1C 4E 05 F1 | 	add	fp, #28
0ee20     A7 2E 02 F1 | 	add	local09, fp
0ee24     17 13 02 FB | 	rdlong	arg01, local09
0ee28     1A 2F 02 F6 | 	mov	local09, local12
0ee2c     01 2E 06 F1 | 	add	local09, #1
0ee30     17 29 02 F6 | 	mov	local06, local09
0ee34     02 28 66 F0 | 	shl	local06, #2
0ee38     A7 1E 02 F6 | 	mov	local01, fp
0ee3c     A7 28 02 F1 | 	add	local06, fp
0ee40     14 27 02 FB | 	rdlong	local05, local06
0ee44     13 15 02 F6 | 	mov	arg02, local05
0ee48     1C 4E 85 F1 | 	sub	fp, #28
0ee4c     3C 1B B1 FD | 	call	#__system___string_cmp
0ee50     01 FA 55 F2 | 	cmps	result1, #1 wc
0ee54     64 00 90 CD |  if_b	jmp	#LR__1296
0ee58     1A 2F 02 F6 | 	mov	local09, local12
0ee5c     01 2E 06 F1 | 	add	local09, #1
0ee60     02 2E 66 F0 | 	shl	local09, #2
0ee64     1C 4E 05 F1 | 	add	fp, #28
0ee68     A7 2E 02 F1 | 	add	local09, fp
0ee6c     17 33 02 FB | 	rdlong	local11, local09
0ee70     1A 29 02 F6 | 	mov	local06, local12
0ee74     02 28 66 F0 | 	shl	local06, #2
0ee78     A7 28 02 F1 | 	add	local06, fp
0ee7c     14 27 02 FB | 	rdlong	local05, local06
0ee80     1A 2F 02 F6 | 	mov	local09, local12
0ee84     17 29 02 F6 | 	mov	local06, local09
0ee88     02 28 66 F0 | 	shl	local06, #2
0ee8c     A7 1E 02 F6 | 	mov	local01, fp
0ee90     A7 28 02 F1 | 	add	local06, fp
0ee94     14 33 62 FC | 	wrlong	local11, local06
0ee98     1A 21 02 F6 | 	mov	local02, local12
0ee9c     01 20 06 F1 | 	add	local02, #1
0eea0     10 39 02 F6 | 	mov	local14, local02
0eea4     02 38 66 F0 | 	shl	local14, #2
0eea8     A7 3A 02 F6 | 	mov	local15, fp
0eeac     A7 38 02 F1 | 	add	local14, fp
0eeb0     1C 27 62 FC | 	wrlong	local05, local14
0eeb4     01 32 66 F6 | 	neg	local11, #1
0eeb8     1C 4E 85 F1 | 	sub	fp, #28
0eebc                 | LR__1296
0eebc     01 34 06 F1 | 	add	local12, #1
0eec0     48 FF 9F FD | 	jmp	#LR__1295
0eec4                 | LR__1297
0eec4                 | ' if not swapped then exit for
0eec4     19 3D 22 F6 | 	not	local16, local11
0eec8     00 3C 0E F2 | 	cmp	local16, #0 wz
0eecc     01 24 06 A1 |  if_e	add	local04, #1
0eed0     1C FF 9F AD |  if_e	jmp	#LR__1294
0eed4                 | LR__1298
0eed4                 | ' for i=0 to n-1
0eed4     00 24 06 F6 | 	mov	local04, #0
0eed8     16 3F 02 F6 | 	mov	local17, local08
0eedc                 | LR__1299
0eedc     1F 25 52 F2 | 	cmps	local04, local17 wc
0eee0     94 00 90 3D |  if_ae	jmp	#LR__1301
0eee4                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
0eee4     00 12 06 F6 | 	mov	arg01, #0
0eee8     DC 74 B1 FD | 	call	#__system___getiolock_0540
0eeec     FD 12 02 F6 | 	mov	arg01, result1
0eef0     70 1A B1 FD | 	call	#__system___lockmem
0eef4     12 21 02 F6 | 	mov	local02, local04
0eef8     02 20 66 F0 | 	shl	local02, #2
0eefc     1C 4E 05 F1 | 	add	fp, #28
0ef00     A7 38 02 F6 | 	mov	local14, fp
0ef04     A7 20 02 F1 | 	add	local02, fp
0ef08     10 15 02 FB | 	rdlong	arg02, local02
0ef0c     00 1E 06 F6 | 	mov	local01, #0
0ef10     00 12 06 F6 | 	mov	arg01, #0
0ef14     00 16 06 F6 | 	mov	arg03, #0
0ef18     1C 4E 85 F1 | 	sub	fp, #28
0ef1c     38 27 B1 FD | 	call	#__system___basic_print_string
0ef20     00 12 06 F6 | 	mov	arg01, #0
0ef24     A0 74 B1 FD | 	call	#__system___getiolock_0540
0ef28     FD 00 68 FC | 	wrlong	#0, result1
0ef2c     40 22 06 F1 | 	add	local03, #64
0ef30     11 13 02 F6 | 	mov	arg01, local03
0ef34     7C 00 B1 FD | 	call	#_hg010b_spin2_setcursorx
0ef38     00 23 56 F2 | 	cmps	local03, #256 wc
0ef3c     30 00 90 CD |  if_b	jmp	#LR__1300
0ef40     00 22 06 F6 | 	mov	local03, #0
0ef44     00 12 06 F6 | 	mov	arg01, #0
0ef48     7C 74 B1 FD | 	call	#__system___getiolock_0540
0ef4c     FD 12 02 F6 | 	mov	arg01, result1
0ef50     10 1A B1 FD | 	call	#__system___lockmem
0ef54     00 12 06 F6 | 	mov	arg01, #0
0ef58     0A 14 06 F6 | 	mov	arg02, #10
0ef5c     00 16 06 F6 | 	mov	arg03, #0
0ef60     9C 26 B1 FD | 	call	#__system___basic_print_char
0ef64     00 12 06 F6 | 	mov	arg01, #0
0ef68     5C 74 B1 FD | 	call	#__system___getiolock_0540
0ef6c     FD 00 68 FC | 	wrlong	#0, result1
0ef70                 | LR__1300
0ef70     01 24 06 F1 | 	add	local04, #1
0ef74     64 FF 9F FD | 	jmp	#LR__1299
0ef78                 | LR__1301
0ef78                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
0ef78     80 2C 56 F2 | 	cmps	local08, #128 wc
0ef7c     44 00 90 CD |  if_b	jmp	#LR__1302
0ef80     00 12 06 F6 | 	mov	arg01, #0
0ef84     40 74 B1 FD | 	call	#__system___getiolock_0540
0ef88     FD 12 02 F6 | 	mov	arg01, result1
0ef8c     D4 19 B1 FD | 	call	#__system___lockmem
0ef90     84 01 00 FF 
0ef94     2D 15 06 F6 | 	mov	arg02, ##@LR__5473
0ef98     00 12 06 F6 | 	mov	arg01, #0
0ef9c     00 16 06 F6 | 	mov	arg03, #0
0efa0     B4 26 B1 FD | 	call	#__system___basic_print_string
0efa4     00 12 06 F6 | 	mov	arg01, #0
0efa8     0A 14 06 F6 | 	mov	arg02, #10
0efac     00 16 06 F6 | 	mov	arg03, #0
0efb0     4C 26 B1 FD | 	call	#__system___basic_print_char
0efb4     00 12 06 F6 | 	mov	arg01, #0
0efb8     0C 74 B1 FD | 	call	#__system___getiolock_0540
0efbc     FD 00 68 FC | 	wrlong	#0, result1
0efc0     00 1E 06 F6 | 	mov	local01, #0
0efc4                 | LR__1302
0efc4                 | ' print
0efc4     00 12 06 F6 | 	mov	arg01, #0
0efc8     FC 73 B1 FD | 	call	#__system___getiolock_0540
0efcc     FD 12 02 F6 | 	mov	arg01, result1
0efd0     90 19 B1 FD | 	call	#__system___lockmem
0efd4     00 12 06 F6 | 	mov	arg01, #0
0efd8     0A 14 06 F6 | 	mov	arg02, #10
0efdc     00 16 06 F6 | 	mov	arg03, #0
0efe0     1C 26 B1 FD | 	call	#__system___basic_print_char
0efe4     00 12 06 F6 | 	mov	arg01, #0
0efe8     DC 73 B1 FD | 	call	#__system___getiolock_0540
0efec     FD 00 68 FC | 	wrlong	#0, result1
0eff0     00 28 06 F6 | 	mov	local06, #0
0eff4     00 2C 06 F6 | 	mov	local08, #0
0eff8     00 22 06 F6 | 	mov	local03, #0
0effc                 | ' return cursor_y
0effc     3E E4 05 F1 | 	add	objptr, #62
0f000     F2 40 C2 FA | 	rdbyte	local18, objptr
0f004     3E E4 85 F1 | 	sub	objptr, #62
0f008     84 01 00 FF 
0f00c     5F 13 06 F6 | 	mov	arg01, ##@LR__5474
0f010     21 14 06 F6 | 	mov	arg02, #33
0f014     E8 74 B1 FD | 	call	#__system___basic_dir
0f018     FD 2A 02 F6 | 	mov	local07, result1
0f01c                 | ' n=0
0f01c                 | ' px=0: py=v.getcursory()
0f01c                 | ' filename = dir$("*", fbNormal )   
0f01c                 | ' do while filename <> "" andalso filename <> nil andalso n<128
0f01c                 | LR__1303
0f01c     84 01 00 FF 
0f020     61 2F 06 F6 | 	mov	local09, ##@LR__5475
0f024     15 13 02 F6 | 	mov	arg01, local07
0f028     17 15 02 F6 | 	mov	arg02, local09
0f02c     5C 19 B1 FD | 	call	#__system___string_cmp
0f030     00 FA 0D F2 | 	cmp	result1, #0 wz
0f034     54 00 90 AD |  if_e	jmp	#LR__1304
0f038     00 2E 06 F6 | 	mov	local09, #0
0f03c     15 13 02 F6 | 	mov	arg01, local07
0f040     00 14 06 F6 | 	mov	arg02, #0
0f044     44 19 B1 FD | 	call	#__system___string_cmp
0f048     00 FA 0D F2 | 	cmp	result1, #0 wz
0f04c     3C 00 90 AD |  if_e	jmp	#LR__1304
0f050     80 2C 56 F2 | 	cmps	local08, #128 wc
0f054     34 00 90 3D |  if_ae	jmp	#LR__1304
0f058     16 27 02 F6 | 	mov	local05, local08
0f05c     02 26 66 F0 | 	shl	local05, #2
0f060     1C 4E 05 F1 | 	add	fp, #28
0f064     A7 26 02 F1 | 	add	local05, fp
0f068     13 2B 62 FC | 	wrlong	local07, local05
0f06c     01 2C 06 F1 | 	add	local08, #1
0f070     00 26 06 F6 | 	mov	local05, #0
0f074     00 12 06 F6 | 	mov	arg01, #0
0f078     00 14 06 F6 | 	mov	arg02, #0
0f07c     1C 4E 85 F1 | 	sub	fp, #28
0f080     7C 74 B1 FD | 	call	#__system___basic_dir
0f084     FD 2A 02 F6 | 	mov	local07, result1
0f088     90 FF 9F FD | 	jmp	#LR__1303
0f08c                 | LR__1304
0f08c                 | ' for i =0 to n-1
0f08c     00 24 06 F6 | 	mov	local04, #0
0f090                 | LR__1305
0f090     16 25 52 F2 | 	cmps	local04, local08 wc
0f094     D8 00 90 3D |  if_ae	jmp	#LR__1309
0f098     00 32 06 F6 | 	mov	local11, #0
0f09c                 | '   swapped=false
0f09c                 | '   for j=0 to n-i-2
0f09c     00 34 06 F6 | 	mov	local12, #0
0f0a0     16 43 02 F6 | 	mov	local19, local08
0f0a4     12 43 82 F1 | 	sub	local19, local04
0f0a8     01 42 86 F1 | 	sub	local19, #1
0f0ac                 | LR__1306
0f0ac     21 35 52 F2 | 	cmps	local12, local19 wc
0f0b0     AC 00 90 3D |  if_ae	jmp	#LR__1308
0f0b4                 | '     if filelist(j) > filelist(j+1) then
0f0b4     1A 2F 02 F6 | 	mov	local09, local12
0f0b8     02 2E 66 F0 | 	shl	local09, #2
0f0bc     1C 4E 05 F1 | 	add	fp, #28
0f0c0     A7 2E 02 F1 | 	add	local09, fp
0f0c4     17 13 02 FB | 	rdlong	arg01, local09
0f0c8     1A 2F 02 F6 | 	mov	local09, local12
0f0cc     01 2E 06 F1 | 	add	local09, #1
0f0d0     17 29 02 F6 | 	mov	local06, local09
0f0d4     02 28 66 F0 | 	shl	local06, #2
0f0d8     A7 1E 02 F6 | 	mov	local01, fp
0f0dc     A7 28 02 F1 | 	add	local06, fp
0f0e0     14 27 02 FB | 	rdlong	local05, local06
0f0e4     13 15 02 F6 | 	mov	arg02, local05
0f0e8     1C 4E 85 F1 | 	sub	fp, #28
0f0ec     9C 18 B1 FD | 	call	#__system___string_cmp
0f0f0     01 FA 55 F2 | 	cmps	result1, #1 wc
0f0f4     60 00 90 CD |  if_b	jmp	#LR__1307
0f0f8     1A 2F 02 F6 | 	mov	local09, local12
0f0fc     01 2E 06 F1 | 	add	local09, #1
0f100     02 2E 66 F0 | 	shl	local09, #2
0f104     1C 4E 05 F1 | 	add	fp, #28
0f108     A7 2E 02 F1 | 	add	local09, fp
0f10c     17 3D 02 FB | 	rdlong	local16, local09
0f110     1A 29 02 F6 | 	mov	local06, local12
0f114     02 28 66 F0 | 	shl	local06, #2
0f118     A7 28 02 F1 | 	add	local06, fp
0f11c     14 27 02 FB | 	rdlong	local05, local06
0f120     1A 2F 02 F6 | 	mov	local09, local12
0f124     17 29 02 F6 | 	mov	local06, local09
0f128     02 28 66 F0 | 	shl	local06, #2
0f12c     A7 1E 02 F6 | 	mov	local01, fp
0f130     A7 28 02 F1 | 	add	local06, fp
0f134     14 3D 62 FC | 	wrlong	local16, local06
0f138     1A 39 02 F6 | 	mov	local14, local12
0f13c     01 38 06 F1 | 	add	local14, #1
0f140     02 38 66 F0 | 	shl	local14, #2
0f144     A7 3A 02 F6 | 	mov	local15, fp
0f148     A7 38 02 F1 | 	add	local14, fp
0f14c     1C 27 62 FC | 	wrlong	local05, local14
0f150     01 32 66 F6 | 	neg	local11, #1
0f154     1C 4E 85 F1 | 	sub	fp, #28
0f158                 | LR__1307
0f158     01 34 06 F1 | 	add	local12, #1
0f15c     4C FF 9F FD | 	jmp	#LR__1306
0f160                 | LR__1308
0f160                 | ' if not swapped then exit for
0f160     19 3D 22 F6 | 	not	local16, local11
0f164     00 3C 0E F2 | 	cmp	local16, #0 wz
0f168     01 24 06 A1 |  if_e	add	local04, #1
0f16c     20 FF 9F AD |  if_e	jmp	#LR__1305
0f170                 | LR__1309
0f170                 | ' for i=0 to n-1
0f170     00 24 06 F6 | 	mov	local04, #0
0f174                 | LR__1310
0f174     16 25 52 F2 | 	cmps	local04, local08 wc
0f178     8C 00 90 3D |  if_ae	jmp	#LR__1312
0f17c                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
0f17c     00 12 06 F6 | 	mov	arg01, #0
0f180     44 72 B1 FD | 	call	#__system___getiolock_0540
0f184     FD 12 02 F6 | 	mov	arg01, result1
0f188     D8 17 B1 FD | 	call	#__system___lockmem
0f18c     12 21 02 F6 | 	mov	local02, local04
0f190     02 20 66 F0 | 	shl	local02, #2
0f194     1C 4E 05 F1 | 	add	fp, #28
0f198     A7 20 02 F1 | 	add	local02, fp
0f19c     10 15 02 FB | 	rdlong	arg02, local02
0f1a0     00 12 06 F6 | 	mov	arg01, #0
0f1a4     00 16 06 F6 | 	mov	arg03, #0
0f1a8     1C 4E 85 F1 | 	sub	fp, #28
0f1ac     A8 24 B1 FD | 	call	#__system___basic_print_string
0f1b0     00 12 06 F6 | 	mov	arg01, #0
0f1b4     10 72 B1 FD | 	call	#__system___getiolock_0540
0f1b8     FD 00 68 FC | 	wrlong	#0, result1
0f1bc     40 22 06 F1 | 	add	local03, #64
0f1c0     11 13 02 F6 | 	mov	arg01, local03
0f1c4     EC FD B0 FD | 	call	#_hg010b_spin2_setcursorx
0f1c8     00 23 56 F2 | 	cmps	local03, #256 wc
0f1cc     30 00 90 CD |  if_b	jmp	#LR__1311
0f1d0     00 22 06 F6 | 	mov	local03, #0
0f1d4     00 12 06 F6 | 	mov	arg01, #0
0f1d8     EC 71 B1 FD | 	call	#__system___getiolock_0540
0f1dc     FD 12 02 F6 | 	mov	arg01, result1
0f1e0     80 17 B1 FD | 	call	#__system___lockmem
0f1e4     00 12 06 F6 | 	mov	arg01, #0
0f1e8     0A 14 06 F6 | 	mov	arg02, #10
0f1ec     00 16 06 F6 | 	mov	arg03, #0
0f1f0     0C 24 B1 FD | 	call	#__system___basic_print_char
0f1f4     00 12 06 F6 | 	mov	arg01, #0
0f1f8     CC 71 B1 FD | 	call	#__system___getiolock_0540
0f1fc     FD 00 68 FC | 	wrlong	#0, result1
0f200                 | LR__1311
0f200     01 24 06 F1 | 	add	local04, #1
0f204     6C FF 9F FD | 	jmp	#LR__1310
0f208                 | LR__1312
0f208                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
0f208     80 2C 56 F2 | 	cmps	local08, #128 wc
0f20c     40 00 90 CD |  if_b	jmp	#LR__1313
0f210     00 12 06 F6 | 	mov	arg01, #0
0f214     B0 71 B1 FD | 	call	#__system___getiolock_0540
0f218     FD 12 02 F6 | 	mov	arg01, result1
0f21c     44 17 B1 FD | 	call	#__system___lockmem
0f220     84 01 00 FF 
0f224     62 15 06 F6 | 	mov	arg02, ##@LR__5476
0f228     00 12 06 F6 | 	mov	arg01, #0
0f22c     00 16 06 F6 | 	mov	arg03, #0
0f230     24 24 B1 FD | 	call	#__system___basic_print_string
0f234     00 12 06 F6 | 	mov	arg01, #0
0f238     0A 14 06 F6 | 	mov	arg02, #10
0f23c     00 16 06 F6 | 	mov	arg03, #0
0f240     BC 23 B1 FD | 	call	#__system___basic_print_char
0f244     00 12 06 F6 | 	mov	arg01, #0
0f248     7C 71 B1 FD | 	call	#__system___getiolock_0540
0f24c     FD 00 68 FC | 	wrlong	#0, result1
0f250                 | LR__1313
0f250                 | ' print
0f250     00 12 06 F6 | 	mov	arg01, #0
0f254     70 71 B1 FD | 	call	#__system___getiolock_0540
0f258     FD 12 02 F6 | 	mov	arg01, result1
0f25c     04 17 B1 FD | 	call	#__system___lockmem
0f260     00 12 06 F6 | 	mov	arg01, #0
0f264     0A 14 06 F6 | 	mov	arg02, #10
0f268     00 16 06 F6 | 	mov	arg03, #0
0f26c     90 23 B1 FD | 	call	#__system___basic_print_char
0f270     00 12 06 F6 | 	mov	arg01, #0
0f274     50 71 B1 FD | 	call	#__system___getiolock_0540
0f278     FD 00 68 FC | 	wrlong	#0, result1
0f27c     A7 F0 03 F6 | 	mov	ptra, fp
0f280     B2 00 A0 FD | 	call	#popregs_
0f284                 | _do_dir_ret
0f284     2D 00 64 FD | 	ret
0f288                 | 
0f288                 | ' 
0f288                 | ' '-------------------- draw
0f288                 | ' 
0f288                 | ' sub do_draw
0f288                 | _do_draw
0f288     00 4A 05 F6 | 	mov	COUNT_, #0
0f28c     A8 00 A0 FD | 	call	#pushregs_
0f290     20 F0 07 F1 | 	add	ptra, #32
0f294     14 C0 BF FD | 	call	#_pop
0f298     FD 1A 02 F6 | 	mov	arg05, result1
0f29c     FE 18 02 F6 | 	mov	arg04, result2
0f2a0     FF 16 02 F6 | 	mov	arg03, result3
0f2a4     0C 4E 05 F1 | 	add	fp, #12
0f2a8     A7 1A 62 FC | 	wrlong	arg05, fp
0f2ac     04 4E 05 F1 | 	add	fp, #4
0f2b0     A7 18 62 FC | 	wrlong	arg04, fp
0f2b4     04 4E 05 F1 | 	add	fp, #4
0f2b8     A7 16 62 FC | 	wrlong	arg03, fp
0f2bc     14 4E 85 F1 | 	sub	fp, #20
0f2c0     E8 BF BF FD | 	call	#_pop
0f2c4     FF 1A 02 F6 | 	mov	arg05, result3
0f2c8     A7 FA 61 FC | 	wrlong	result1, fp
0f2cc     04 4E 05 F1 | 	add	fp, #4
0f2d0     A7 FC 61 FC | 	wrlong	result2, fp
0f2d4     04 4E 05 F1 | 	add	fp, #4
0f2d8     A7 1A 62 FC | 	wrlong	arg05, fp
0f2dc     08 4E 85 F1 | 	sub	fp, #8
0f2e0     A7 12 02 F6 | 	mov	arg01, fp
0f2e4     A8 C1 BF FD | 	call	#_converttoint
0f2e8     18 4E 05 F1 | 	add	fp, #24
0f2ec     A7 FA 61 FC | 	wrlong	result1, fp
0f2f0     0C 4E 85 F1 | 	sub	fp, #12
0f2f4     A7 12 02 F6 | 	mov	arg01, fp
0f2f8     0C 4E 85 F1 | 	sub	fp, #12
0f2fc     90 C1 BF FD | 	call	#_converttoint
0f300     1C 4E 05 F1 | 	add	fp, #28
0f304     A7 FA 61 FC | 	wrlong	result1, fp
0f308     37 00 00 FF 
0f30c     2C E4 05 F1 | 	add	objptr, ##28204
0f310     F2 12 02 FB | 	rdlong	arg01, objptr
0f314     04 E4 05 F1 | 	add	objptr, #4
0f318     F2 14 02 FB | 	rdlong	arg02, objptr
0f31c     04 4E 85 F1 | 	sub	fp, #4
0f320     A7 16 02 FB | 	rdlong	arg03, fp
0f324     FD 18 02 F6 | 	mov	arg04, result1
0f328     18 4E 85 F1 | 	sub	fp, #24
0f32c     08 E4 85 F1 | 	sub	objptr, #8
0f330     F2 1A 02 FB | 	rdlong	arg05, objptr
0f334     37 00 00 FF 
0f338     28 E4 85 F1 | 	sub	objptr, ##28200
0f33c     24 F3 B0 FD | 	call	#_hg010b_spin2_draw
0f340     18 4E 05 F1 | 	add	fp, #24
0f344     A7 1A 02 FB | 	rdlong	arg05, fp
0f348     37 00 00 FF 
0f34c     2C E4 05 F1 | 	add	objptr, ##28204
0f350     F2 1A 62 FC | 	wrlong	arg05, objptr
0f354     04 4E 05 F1 | 	add	fp, #4
0f358     A7 1A 02 FB | 	rdlong	arg05, fp
0f35c     1C 4E 85 F1 | 	sub	fp, #28
0f360     04 E4 05 F1 | 	add	objptr, #4
0f364     F2 1A 62 FC | 	wrlong	arg05, objptr
0f368     37 00 00 FF 
0f36c     30 E4 85 F1 | 	sub	objptr, ##28208
0f370     A7 F0 03 F6 | 	mov	ptra, fp
0f374     B2 00 A0 FD | 	call	#popregs_
0f378                 | _do_draw_ret
0f378     2D 00 64 FD | 	ret
0f37c                 | 
0f37c                 | ' 
0f37c                 | ' '-------------------- end
0f37c                 | ' 
0f37c                 | ' sub do_end
0f37c                 | _do_end
0f37c     4A 00 00 FF 
0f380     7C E4 05 F1 | 	add	objptr, ##38012
0f384     F2 00 02 FB | 	rdlong	_var01, objptr
0f388     01 00 86 F1 | 	sub	_var01, #1
0f38c     04 E4 05 F1 | 	add	objptr, #4
0f390     F2 00 62 FC | 	wrlong	_var01, objptr
0f394     06 00 00 FF 
0f398     38 E4 05 F1 | 	add	objptr, ##3128
0f39c     FF FF BF FF 
0f3a0     F2 FE 6B FC | 	wrlong	##2147483647, objptr
0f3a4     50 00 00 FF 
0f3a8     B8 E4 85 F1 | 	sub	objptr, ##41144
0f3ac                 | _do_end_ret
0f3ac     2D 00 64 FD | 	ret
0f3b0                 | 
0f3b0                 | ' 
0f3b0                 | ' '-------------------- enter
0f3b0                 | ' 
0f3b0                 | ' sub do_enter
0f3b0                 | _do_enter
0f3b0     02 00 00 FF 
0f3b4     D2 12 06 F6 | 	mov	arg01, ##1234
0f3b8     E0 1C B0 FD | 	call	#_do_load
0f3bc                 | _do_enter_ret
0f3bc     2D 00 64 FD | 	ret
0f3c0                 | 
0f3c0                 | ' 
0f3c0                 | ' '------------------- error processing
0f3c0                 | ' 
0f3c0                 | ' sub do_error
0f3c0                 | _do_error
0f3c0     01 4A 05 F6 | 	mov	COUNT_, #1
0f3c4     A8 00 A0 FD | 	call	#pushregs_
0f3c8     4A 00 00 FF 
0f3cc     80 E4 05 F1 | 	add	objptr, ##38016
0f3d0     F2 18 02 FB | 	rdlong	arg04, objptr
0f3d4     0C 17 02 F6 | 	mov	arg03, arg04
0f3d8     01 16 66 F0 | 	shl	arg03, #1
0f3dc     0C 17 02 F1 | 	add	arg03, arg04
0f3e0     02 16 66 F0 | 	shl	arg03, #2
0f3e4     03 00 00 FF 
0f3e8     04 E4 85 F1 | 	sub	objptr, ##1540
0f3ec     F2 16 02 F1 | 	add	arg03, objptr
0f3f0     0B 1F 02 FB | 	rdlong	local01, arg03
0f3f4                 | ' r=compiledline(lineptr_e).result.uresult
0f3f4                 | ' print "Error ";r;": ";errors$(r)
0f3f4     00 12 06 F6 | 	mov	arg01, #0
0f3f8     47 00 00 FF 
0f3fc     7C E4 85 F1 | 	sub	objptr, ##36476
0f400     C4 6F B1 FD | 	call	#__system___getiolock_0540
0f404     FD 12 02 F6 | 	mov	arg01, result1
0f408     58 15 B1 FD | 	call	#__system___lockmem
0f40c     84 01 00 FF 
0f410     94 15 06 F6 | 	mov	arg02, ##@LR__5477
0f414     00 12 06 F6 | 	mov	arg01, #0
0f418     00 16 06 F6 | 	mov	arg03, #0
0f41c     38 22 B1 FD | 	call	#__system___basic_print_string
0f420     00 12 06 F6 | 	mov	arg01, #0
0f424     0F 15 02 F6 | 	mov	arg02, local01
0f428     00 16 06 F6 | 	mov	arg03, #0
0f42c     0A 18 06 F6 | 	mov	arg04, #10
0f430     A8 22 B1 FD | 	call	#__system___basic_print_unsigned
0f434     84 01 00 FF 
0f438     9B 15 06 F6 | 	mov	arg02, ##@LR__5478
0f43c     00 12 06 F6 | 	mov	arg01, #0
0f440     00 16 06 F6 | 	mov	arg03, #0
0f444     10 22 B1 FD | 	call	#__system___basic_print_string
0f448     02 1E 66 F0 | 	shl	local01, #2
0f44c     45 00 00 FF 
0f450     7C E4 05 F1 | 	add	objptr, ##35452
0f454     F2 1E 02 F1 | 	add	local01, objptr
0f458     0F 15 02 FB | 	rdlong	arg02, local01
0f45c     00 12 06 F6 | 	mov	arg01, #0
0f460     00 16 06 F6 | 	mov	arg03, #0
0f464     45 00 00 FF 
0f468     7C E4 85 F1 | 	sub	objptr, ##35452
0f46c     E8 21 B1 FD | 	call	#__system___basic_print_string
0f470     00 12 06 F6 | 	mov	arg01, #0
0f474     0A 14 06 F6 | 	mov	arg02, #10
0f478     00 16 06 F6 | 	mov	arg03, #0
0f47c     80 21 B1 FD | 	call	#__system___basic_print_char
0f480     00 12 06 F6 | 	mov	arg01, #0
0f484     40 6F B1 FD | 	call	#__system___getiolock_0540
0f488     FD 00 68 FC | 	wrlong	#0, result1
0f48c     A7 F0 03 F6 | 	mov	ptra, fp
0f490     B2 00 A0 FD | 	call	#popregs_
0f494                 | _do_error_ret
0f494     2D 00 64 FD | 	ret
0f498                 | 
0f498                 | ' 
0f498                 | ' '-------------------- for
0f498                 | ' 
0f498                 | ' sub do_for()
0f498                 | _do_for
0f498     01 4A 05 F6 | 	mov	COUNT_, #1
0f49c     A8 00 A0 FD | 	call	#pushregs_
0f4a0     10 F0 07 F1 | 	add	ptra, #16
0f4a4     50 00 00 FF 
0f4a8     08 E5 05 F1 | 	add	objptr, ##41224
0f4ac     F2 12 02 FB | 	rdlong	arg01, objptr
0f4b0     01 12 06 F1 | 	add	arg01, #1
0f4b4     F2 12 62 FC | 	wrlong	arg01, objptr
0f4b8     50 00 00 FF 
0f4bc     08 E5 85 F1 | 	sub	objptr, ##41224
0f4c0     E8 BD BF FD | 	call	#_pop
0f4c4     A7 FA 61 FC | 	wrlong	result1, fp
0f4c8     04 4E 05 F1 | 	add	fp, #4
0f4cc     A7 FC 61 FC | 	wrlong	result2, fp
0f4d0     04 4E 05 F1 | 	add	fp, #4
0f4d4     A7 FE 61 FC | 	wrlong	result3, fp
0f4d8     08 4E 85 F1 | 	sub	fp, #8
0f4dc     50 00 00 FF 
0f4e0     08 E5 05 F1 | 	add	objptr, ##41224
0f4e4     F2 12 02 FB | 	rdlong	arg01, objptr
0f4e8     09 1F 02 F6 | 	mov	local01, arg01
0f4ec     02 1E 66 F0 | 	shl	local01, #2
0f4f0     09 1F 02 F1 | 	add	local01, arg01
0f4f4     02 1E 66 F0 | 	shl	local01, #2
0f4f8     06 00 00 FF 
0f4fc     70 E4 85 F1 | 	sub	objptr, ##3184
0f500     F2 1E 02 F1 | 	add	local01, objptr
0f504     A7 12 02 FB | 	rdlong	arg01, fp
0f508     08 1E 06 F1 | 	add	local01, #8
0f50c     0F 13 62 FC | 	wrlong	arg01, local01
0f510     4A 00 00 FF 
0f514     98 E4 85 F1 | 	sub	objptr, ##38040
0f518     90 BD BF FD | 	call	#_pop
0f51c     A7 FA 61 FC | 	wrlong	result1, fp
0f520     04 4E 05 F1 | 	add	fp, #4
0f524     A7 FC 61 FC | 	wrlong	result2, fp
0f528     04 4E 05 F1 | 	add	fp, #4
0f52c     A7 FE 61 FC | 	wrlong	result3, fp
0f530     08 4E 85 F1 | 	sub	fp, #8
0f534     50 00 00 FF 
0f538     08 E5 05 F1 | 	add	objptr, ##41224
0f53c     F2 12 02 FB | 	rdlong	arg01, objptr
0f540     09 1F 02 F6 | 	mov	local01, arg01
0f544     02 1E 66 F0 | 	shl	local01, #2
0f548     09 1F 02 F1 | 	add	local01, arg01
0f54c     02 1E 66 F0 | 	shl	local01, #2
0f550     06 00 00 FF 
0f554     70 E4 85 F1 | 	sub	objptr, ##3184
0f558     F2 1E 02 F1 | 	add	local01, objptr
0f55c     A7 12 02 F6 | 	mov	arg01, fp
0f560     4A 00 00 FF 
0f564     98 E4 85 F1 | 	sub	objptr, ##38040
0f568     24 BF BF FD | 	call	#_converttoint
0f56c     FD 12 02 F6 | 	mov	arg01, result1
0f570     0C 1E 06 F1 | 	add	local01, #12
0f574     0F 13 62 FC | 	wrlong	arg01, local01
0f578     30 BD BF FD | 	call	#_pop
0f57c     A7 FA 61 FC | 	wrlong	result1, fp
0f580     04 4E 05 F1 | 	add	fp, #4
0f584     A7 FC 61 FC | 	wrlong	result2, fp
0f588     04 4E 05 F1 | 	add	fp, #4
0f58c     A7 FE 61 FC | 	wrlong	result3, fp
0f590     08 4E 85 F1 | 	sub	fp, #8
0f594     50 00 00 FF 
0f598     08 E5 05 F1 | 	add	objptr, ##41224
0f59c     F2 12 02 FB | 	rdlong	arg01, objptr
0f5a0     09 1F 02 F6 | 	mov	local01, arg01
0f5a4     02 1E 66 F0 | 	shl	local01, #2
0f5a8     09 1F 02 F1 | 	add	local01, arg01
0f5ac     02 1E 66 F0 | 	shl	local01, #2
0f5b0     06 00 00 FF 
0f5b4     70 E4 85 F1 | 	sub	objptr, ##3184
0f5b8     F2 1E 02 F1 | 	add	local01, objptr
0f5bc     A7 12 02 F6 | 	mov	arg01, fp
0f5c0     4A 00 00 FF 
0f5c4     98 E4 85 F1 | 	sub	objptr, ##38040
0f5c8     C4 BE BF FD | 	call	#_converttoint
0f5cc     10 1E 06 F1 | 	add	local01, #16
0f5d0     0F FB 61 FC | 	wrlong	result1, local01
0f5d4                 | ' fortop+=1
0f5d4                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
0f5d4                 | ' t1=pop() : fortable(fortop).stepval=converttoint(t1)
0f5d4                 | ' t1=pop() : fortable(fortop).endval=converttoint(t1)
0f5d4                 | ' if compiledline(lineptr_e).result_type=token_end then	' end of line after for, set the pointer to the start of the next line
0f5d4     4A 00 00 FF 
0f5d8     80 E4 05 F1 | 	add	objptr, ##38016
0f5dc     F2 12 02 FB | 	rdlong	arg01, objptr
0f5e0     09 1F 02 F6 | 	mov	local01, arg01
0f5e4     01 1E 66 F0 | 	shl	local01, #1
0f5e8     09 1F 02 F1 | 	add	local01, arg01
0f5ec     02 1E 66 F0 | 	shl	local01, #2
0f5f0     03 00 00 FF 
0f5f4     04 E4 85 F1 | 	sub	objptr, ##1540
0f5f8     F2 1E 02 F1 | 	add	local01, objptr
0f5fc     08 1E 06 F1 | 	add	local01, #8
0f600     0F 1F 02 FB | 	rdlong	local01, local01
0f604     FE 1F 0E F2 | 	cmp	local01, #510 wz
0f608     47 00 00 FF 
0f60c     7C E4 85 F1 | 	sub	objptr, ##36476
0f610     70 00 90 5D |  if_ne	jmp	#LR__1320
0f614     50 00 00 FF 
0f618     08 E5 05 F1 | 	add	objptr, ##41224
0f61c     F2 12 02 FB | 	rdlong	arg01, objptr
0f620     09 1F 02 F6 | 	mov	local01, arg01
0f624     02 1E 66 F0 | 	shl	local01, #2
0f628     09 1F 02 F1 | 	add	local01, arg01
0f62c     02 1E 66 F0 | 	shl	local01, #2
0f630     06 00 00 FF 
0f634     70 E4 85 F1 | 	sub	objptr, ##3184
0f638     F2 1E 02 F1 | 	add	local01, objptr
0f63c     06 00 00 FF 
0f640     20 E4 05 F1 | 	add	objptr, ##3104
0f644     F2 12 02 FB | 	rdlong	arg01, objptr
0f648     0F 13 62 FC | 	wrlong	arg01, local01
0f64c     50 E4 05 F1 | 	add	objptr, #80
0f650     F2 12 02 FB | 	rdlong	arg01, objptr
0f654     09 1F 02 F6 | 	mov	local01, arg01
0f658     02 1E 66 F0 | 	shl	local01, #2
0f65c     09 1F 02 F1 | 	add	local01, arg01
0f660     02 1E 66 F0 | 	shl	local01, #2
0f664     06 00 00 FF 
0f668     70 E4 85 F1 | 	sub	objptr, ##3184
0f66c     F2 1E 02 F1 | 	add	local01, objptr
0f670     04 1E 06 F1 | 	add	local01, #4
0f674     0F 01 68 FC | 	wrlong	#0, local01
0f678     4A 00 00 FF 
0f67c     98 E4 85 F1 | 	sub	objptr, ##38040
0f680     78 00 90 FD | 	jmp	#LR__1321
0f684                 | LR__1320
0f684     50 00 00 FF 
0f688     08 E5 05 F1 | 	add	objptr, ##41224
0f68c     F2 12 02 FB | 	rdlong	arg01, objptr
0f690     09 1F 02 F6 | 	mov	local01, arg01
0f694     02 1E 66 F0 | 	shl	local01, #2
0f698     09 1F 02 F1 | 	add	local01, arg01
0f69c     02 1E 66 F0 | 	shl	local01, #2
0f6a0     06 00 00 FF 
0f6a4     70 E4 85 F1 | 	sub	objptr, ##3184
0f6a8     F2 1E 02 F1 | 	add	local01, objptr
0f6ac     06 00 00 FF 
0f6b0     28 E4 05 F1 | 	add	objptr, ##3112
0f6b4     F2 12 02 FB | 	rdlong	arg01, objptr
0f6b8     0F 13 62 FC | 	wrlong	arg01, local01
0f6bc     48 E4 05 F1 | 	add	objptr, #72
0f6c0     F2 12 02 FB | 	rdlong	arg01, objptr
0f6c4     09 1F 02 F6 | 	mov	local01, arg01
0f6c8     02 1E 66 F0 | 	shl	local01, #2
0f6cc     09 1F 02 F1 | 	add	local01, arg01
0f6d0     02 1E 66 F0 | 	shl	local01, #2
0f6d4     06 00 00 FF 
0f6d8     70 E4 85 F1 | 	sub	objptr, ##3184
0f6dc     F2 1E 02 F1 | 	add	local01, objptr
0f6e0     18 E4 85 F1 | 	sub	objptr, #24
0f6e4     F2 12 02 FB | 	rdlong	arg01, objptr
0f6e8     4A 00 00 FF 
0f6ec     80 E4 85 F1 | 	sub	objptr, ##38016
0f6f0     01 12 06 F1 | 	add	arg01, #1
0f6f4     04 1E 06 F1 | 	add	local01, #4
0f6f8     0F 13 62 FC | 	wrlong	arg01, local01
0f6fc                 | LR__1321
0f6fc     A7 F0 03 F6 | 	mov	ptra, fp
0f700     B2 00 A0 FD | 	call	#popregs_
0f704                 | _do_for_ret
0f704     2D 00 64 FD | 	ret
0f708                 | 
0f708                 | ' 
0f708                 | ' '-------------------- get
0f708                 | ' 
0f708                 | ' sub do_get		' get  #chn,addr,(amount,(pos))
0f708                 | _do_get
0f708     09 4A 05 F6 | 	mov	COUNT_, #9
0f70c     A8 00 A0 FD | 	call	#pushregs_
0f710     40 F0 07 F1 | 	add	ptra, #64
0f714     4A 00 00 FF 
0f718     80 E4 05 F1 | 	add	objptr, ##38016
0f71c     F2 1A 02 FB | 	rdlong	arg05, objptr
0f720     0D 19 02 F6 | 	mov	arg04, arg05
0f724     01 18 66 F0 | 	shl	arg04, #1
0f728     0D 19 02 F1 | 	add	arg04, arg05
0f72c     02 18 66 F0 | 	shl	arg04, #2
0f730     03 00 00 FF 
0f734     04 E4 85 F1 | 	sub	objptr, ##1540
0f738     F2 18 02 F1 | 	add	arg04, objptr
0f73c     0C 1B 02 FB | 	rdlong	arg05, arg04
0f740     A7 1A 62 FC | 	wrlong	arg05, fp
0f744                 | ' 
0f744                 | ' numpar=compiledline(lineptr_e).result.uresult
0f744                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
0f744     04 1A 0E F2 | 	cmp	arg05, #4 wz
0f748     47 00 00 FF 
0f74c     7C E4 85 F1 | 	sub	objptr, ##36476
0f750     48 00 90 5D |  if_ne	jmp	#LR__1330
0f754     54 BB BF FD | 	call	#_pop
0f758     FF 1A 02 F6 | 	mov	arg05, result3
0f75c     1C 4E 05 F1 | 	add	fp, #28
0f760     A7 FA 61 FC | 	wrlong	result1, fp
0f764     04 4E 05 F1 | 	add	fp, #4
0f768     A7 FC 61 FC | 	wrlong	result2, fp
0f76c     04 4E 05 F1 | 	add	fp, #4
0f770     A7 1A 62 FC | 	wrlong	arg05, fp
0f774     08 4E 85 F1 | 	sub	fp, #8
0f778     A7 12 02 F6 | 	mov	arg01, fp
0f77c     1C 4E 85 F1 | 	sub	fp, #28
0f780     0C BD BF FD | 	call	#_converttoint
0f784     52 00 00 FF 
0f788     10 E4 05 F1 | 	add	objptr, ##42000
0f78c     F2 FA 61 FC | 	wrlong	result1, objptr
0f790     52 00 00 FF 
0f794     10 E4 85 F1 | 	sub	objptr, ##42000
0f798     18 00 90 FD | 	jmp	#LR__1331
0f79c                 | LR__1330
0f79c     52 00 00 FF 
0f7a0     10 E4 05 F1 | 	add	objptr, ##42000
0f7a4     FF FF FF FF 
0f7a8     F2 FE 6B FC | 	wrlong	##-1, objptr
0f7ac     52 00 00 FF 
0f7b0     10 E4 85 F1 | 	sub	objptr, ##42000
0f7b4                 | LR__1331
0f7b4                 | ' if numpar>=3  then t1=pop() : amount=converttoint(t1) else amount=1
0f7b4     A7 16 02 FB | 	rdlong	arg03, fp
0f7b8     03 16 56 F2 | 	cmps	arg03, #3 wc
0f7bc     40 00 90 CD |  if_b	jmp	#LR__1332
0f7c0     E8 BA BF FD | 	call	#_pop
0f7c4     FF 16 02 F6 | 	mov	arg03, result3
0f7c8     1C 4E 05 F1 | 	add	fp, #28
0f7cc     A7 FA 61 FC | 	wrlong	result1, fp
0f7d0     04 4E 05 F1 | 	add	fp, #4
0f7d4     A7 FC 61 FC | 	wrlong	result2, fp
0f7d8     04 4E 05 F1 | 	add	fp, #4
0f7dc     A7 16 62 FC | 	wrlong	arg03, fp
0f7e0     08 4E 85 F1 | 	sub	fp, #8
0f7e4     A7 12 02 F6 | 	mov	arg01, fp
0f7e8     1C 4E 85 F1 | 	sub	fp, #28
0f7ec     A0 BC BF FD | 	call	#_converttoint
0f7f0     08 4E 05 F1 | 	add	fp, #8
0f7f4     A7 FA 61 FC | 	wrlong	result1, fp
0f7f8     08 4E 85 F1 | 	sub	fp, #8
0f7fc     0C 00 90 FD | 	jmp	#LR__1333
0f800                 | LR__1332
0f800     08 4E 05 F1 | 	add	fp, #8
0f804     A7 02 68 FC | 	wrlong	#1, fp
0f808     08 4E 85 F1 | 	sub	fp, #8
0f80c                 | LR__1333
0f80c                 | ' if numpar>=2  then t1=pop() : adr=converttoint(t1)
0f80c     A7 16 02 FB | 	rdlong	arg03, fp
0f810     02 16 56 F2 | 	cmps	arg03, #2 wc
0f814     3C 00 90 CD |  if_b	jmp	#LR__1334
0f818     90 BA BF FD | 	call	#_pop
0f81c     FF 16 02 F6 | 	mov	arg03, result3
0f820     1C 4E 05 F1 | 	add	fp, #28
0f824     A7 FA 61 FC | 	wrlong	result1, fp
0f828     04 4E 05 F1 | 	add	fp, #4
0f82c     A7 FC 61 FC | 	wrlong	result2, fp
0f830     04 4E 05 F1 | 	add	fp, #4
0f834     A7 16 62 FC | 	wrlong	arg03, fp
0f838     08 4E 85 F1 | 	sub	fp, #8
0f83c     A7 12 02 F6 | 	mov	arg01, fp
0f840     1C 4E 85 F1 | 	sub	fp, #28
0f844     48 BC BF FD | 	call	#_converttoint
0f848     0C 4E 05 F1 | 	add	fp, #12
0f84c     A7 FA 61 FC | 	wrlong	result1, fp
0f850     0C 4E 85 F1 | 	sub	fp, #12
0f854                 | LR__1334
0f854     54 BA BF FD | 	call	#_pop
0f858     FF 16 02 F6 | 	mov	arg03, result3
0f85c     1C 4E 05 F1 | 	add	fp, #28
0f860     A7 FA 61 FC | 	wrlong	result1, fp
0f864     04 4E 05 F1 | 	add	fp, #4
0f868     A7 FC 61 FC | 	wrlong	result2, fp
0f86c     04 4E 05 F1 | 	add	fp, #4
0f870     A7 16 62 FC | 	wrlong	arg03, fp
0f874     08 4E 85 F1 | 	sub	fp, #8
0f878     A7 12 02 F6 | 	mov	arg01, fp
0f87c     1C 4E 85 F1 | 	sub	fp, #28
0f880     0C BC BF FD | 	call	#_converttoint
0f884     04 4E 05 F1 | 	add	fp, #4
0f888     A7 FA 61 FC | 	wrlong	result1, fp
0f88c     10 4E 05 F1 | 	add	fp, #16
0f890     A7 16 02 FB | 	rdlong	arg03, fp
0f894     14 4E 85 F1 | 	sub	fp, #20
0f898     02 16 66 F0 | 	shl	arg03, #2
0f89c     50 00 00 FF 
0f8a0     C4 E4 05 F1 | 	add	objptr, ##41156
0f8a4     F2 1E 02 F6 | 	mov	local01, objptr
0f8a8     F2 16 02 F1 | 	add	arg03, objptr
0f8ac     0B 01 68 FC | 	wrlong	#0, arg03
0f8b0                 | ' t1=pop() : channel=converttoint(t1)
0f8b0                 | ' getres(j)=0
0f8b0                 | ' if pos>=0 then
0f8b0     01 00 00 FF 
0f8b4     4C E5 05 F1 | 	add	objptr, ##844
0f8b8     F2 20 02 FB | 	rdlong	local02, objptr
0f8bc     52 00 00 FF 
0f8c0     10 E4 85 F1 | 	sub	objptr, ##42000
0f8c4     00 20 56 F2 | 	cmps	local02, #0 wc
0f8c8     F0 01 90 CD |  if_b	jmp	#LR__1341
0f8cc                 | '   for i=0 to  amount/1024
0f8cc     10 4E 05 F1 | 	add	fp, #16
0f8d0     A7 00 68 FC | 	wrlong	#0, fp
0f8d4     08 4E 85 F1 | 	sub	fp, #8
0f8d8     A7 22 02 FB | 	rdlong	local03, fp
0f8dc     08 4E 85 F1 | 	sub	fp, #8
0f8e0     11 25 52 F6 | 	abs	local04, local03 wc
0f8e4     0A 24 46 F0 | 	shr	local04, #10
0f8e8     12 25 82 F6 | 	negc	local04, local04
0f8ec     01 24 06 F1 | 	add	local04, #1
0f8f0                 | LR__1335
0f8f0     10 4E 05 F1 | 	add	fp, #16
0f8f4     A7 22 02 FB | 	rdlong	local03, fp
0f8f8     10 4E 85 F1 | 	sub	fp, #16
0f8fc     12 23 52 F2 | 	cmps	local03, local04 wc
0f900     9C 03 90 3D |  if_ae	jmp	#LR__1349
0f904                 | '     get #channel,pos+1,block(0),amount,r
0f904     04 4E 05 F1 | 	add	fp, #4
0f908     A7 12 02 FB | 	rdlong	arg01, fp
0f90c     52 00 00 FF 
0f910     10 E4 05 F1 | 	add	objptr, ##42000
0f914     F2 14 02 FB | 	rdlong	arg02, objptr
0f918     01 14 06 F1 | 	add	arg02, #1
0f91c     03 00 00 FF 
0f920     5C E5 85 F1 | 	sub	objptr, ##1884
0f924     F2 16 02 F6 | 	mov	arg03, objptr
0f928     4E 00 00 FF 
0f92c     B4 E4 85 F1 | 	sub	objptr, ##40116
0f930     04 4E 05 F1 | 	add	fp, #4
0f934     A7 18 02 FB | 	rdlong	arg04, fp
0f938     08 4E 85 F1 | 	sub	fp, #8
0f93c     01 1A 06 F6 | 	mov	arg05, #1
0f940     90 1E B1 FD | 	call	#__system___basic_get
0f944     18 4E 05 F1 | 	add	fp, #24
0f948     A7 FA 61 FC | 	wrlong	result1, fp
0f94c                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
0f94c     0C 4E 85 F1 | 	sub	fp, #12
0f950     A7 20 02 FB | 	rdlong	local02, fp
0f954     0C 4E 85 F1 | 	sub	fp, #12
0f958     00 04 00 FF 
0f95c     00 20 56 F2 | 	cmps	local02, ##524288 wc
0f960     7C 00 90 3D |  if_ae	jmp	#LR__1337
0f964     14 4E 05 F1 | 	add	fp, #20
0f968     A7 00 68 FC | 	wrlong	#0, fp
0f96c     04 4E 05 F1 | 	add	fp, #4
0f970     A7 26 02 FB | 	rdlong	local05, fp
0f974     18 4E 85 F1 | 	sub	fp, #24
0f978                 | LR__1336
0f978     14 4E 05 F1 | 	add	fp, #20
0f97c     A7 20 02 FB | 	rdlong	local02, fp
0f980     14 4E 85 F1 | 	sub	fp, #20
0f984     13 21 52 F2 | 	cmps	local02, local05 wc
0f988     D8 00 90 3D |  if_ae	jmp	#LR__1340
0f98c     0C 4E 05 F1 | 	add	fp, #12
0f990     A7 12 02 FB | 	rdlong	arg01, fp
0f994     04 4E 05 F1 | 	add	fp, #4
0f998     A7 22 02 FB | 	rdlong	local03, fp
0f99c     0A 22 66 F0 | 	shl	local03, #10
0f9a0     11 13 02 F1 | 	add	arg01, local03
0f9a4     04 4E 05 F1 | 	add	fp, #4
0f9a8     A7 22 02 FB | 	rdlong	local03, fp
0f9ac     11 13 02 F1 | 	add	arg01, local03
0f9b0     4E 00 00 FF 
0f9b4     B4 E4 05 F1 | 	add	objptr, ##40116
0f9b8     F2 22 02 F1 | 	add	local03, objptr
0f9bc     11 15 C2 FA | 	rdbyte	arg02, local03
0f9c0     09 15 42 FC | 	wrbyte	arg02, arg01
0f9c4     4E 00 00 FF 
0f9c8     B4 E4 85 F1 | 	sub	objptr, ##40116
0f9cc     A7 22 02 FB | 	rdlong	local03, fp
0f9d0     01 22 06 F1 | 	add	local03, #1
0f9d4     A7 22 62 FC | 	wrlong	local03, fp
0f9d8     14 4E 85 F1 | 	sub	fp, #20
0f9dc     98 FF 9F FD | 	jmp	#LR__1336
0f9e0                 | LR__1337
0f9e0     14 4E 05 F1 | 	add	fp, #20
0f9e4     A7 00 68 FC | 	wrlong	#0, fp
0f9e8     04 4E 05 F1 | 	add	fp, #4
0f9ec     A7 28 02 FB | 	rdlong	local06, fp
0f9f0     18 4E 85 F1 | 	sub	fp, #24
0f9f4                 | LR__1338
0f9f4     14 4E 05 F1 | 	add	fp, #20
0f9f8     A7 20 02 FB | 	rdlong	local02, fp
0f9fc     14 4E 85 F1 | 	sub	fp, #20
0fa00     14 21 52 F2 | 	cmps	local02, local06 wc
0fa04     5C 00 90 3D |  if_ae	jmp	#LR__1339
0fa08     0C 4E 05 F1 | 	add	fp, #12
0fa0c     A7 12 02 FB | 	rdlong	arg01, fp
0fa10     04 4E 05 F1 | 	add	fp, #4
0fa14     A7 26 02 FB | 	rdlong	local05, fp
0fa18     0A 26 66 F0 | 	shl	local05, #10
0fa1c     13 13 02 F1 | 	add	arg01, local05
0fa20     04 4E 05 F1 | 	add	fp, #4
0fa24     A7 26 02 FB | 	rdlong	local05, fp
0fa28     13 13 02 F1 | 	add	arg01, local05
0fa2c     14 4E 85 F1 | 	sub	fp, #20
0fa30     4E 00 00 FF 
0fa34     B4 E4 05 F1 | 	add	objptr, ##40116
0fa38     F2 26 02 F1 | 	add	local05, objptr
0fa3c     13 15 C2 FA | 	rdbyte	arg02, local05
0fa40     4E 00 00 FF 
0fa44     B4 E4 85 F1 | 	sub	objptr, ##40116
0fa48     7C DB B0 FD | 	call	#_pspoke
0fa4c     14 4E 05 F1 | 	add	fp, #20
0fa50     A7 26 02 FB | 	rdlong	local05, fp
0fa54     01 26 06 F1 | 	add	local05, #1
0fa58     A7 26 62 FC | 	wrlong	local05, fp
0fa5c     14 4E 85 F1 | 	sub	fp, #20
0fa60     90 FF 9F FD | 	jmp	#LR__1338
0fa64                 | LR__1339
0fa64                 | LR__1340
0fa64     14 4E 05 F1 | 	add	fp, #20
0fa68     A7 28 02 FB | 	rdlong	local06, fp
0fa6c     14 23 02 F6 | 	mov	local03, local06
0fa70     02 22 66 F0 | 	shl	local03, #2
0fa74     50 00 00 FF 
0fa78     C4 E4 05 F1 | 	add	objptr, ##41156
0fa7c     F2 22 02 F1 | 	add	local03, objptr
0fa80     02 28 66 F0 | 	shl	local06, #2
0fa84     F2 28 02 F1 | 	add	local06, objptr
0fa88     14 29 02 FB | 	rdlong	local06, local06
0fa8c     04 4E 05 F1 | 	add	fp, #4
0fa90     A7 26 02 FB | 	rdlong	local05, fp
0fa94     13 29 02 F1 | 	add	local06, local05
0fa98     11 29 62 FC | 	wrlong	local06, local03
0fa9c     08 4E 85 F1 | 	sub	fp, #8
0faa0     A7 28 02 FB | 	rdlong	local06, fp
0faa4     01 28 06 F1 | 	add	local06, #1
0faa8     A7 28 62 FC | 	wrlong	local06, fp
0faac     10 4E 85 F1 | 	sub	fp, #16
0fab0     50 00 00 FF 
0fab4     C4 E4 85 F1 | 	sub	objptr, ##41156
0fab8     34 FE 9F FD | 	jmp	#LR__1335
0fabc                 | LR__1341
0fabc                 | '   for i=0 to  amount/1024
0fabc     10 4E 05 F1 | 	add	fp, #16
0fac0     A7 00 68 FC | 	wrlong	#0, fp
0fac4     08 4E 85 F1 | 	sub	fp, #8
0fac8     A7 22 02 FB | 	rdlong	local03, fp
0facc     08 4E 85 F1 | 	sub	fp, #8
0fad0     11 2B 52 F6 | 	abs	local07, local03 wc
0fad4     0A 2A 46 F0 | 	shr	local07, #10
0fad8     15 2B 82 F6 | 	negc	local07, local07
0fadc     01 2A 06 F1 | 	add	local07, #1
0fae0                 | LR__1342
0fae0     10 4E 05 F1 | 	add	fp, #16
0fae4     A7 22 02 FB | 	rdlong	local03, fp
0fae8     10 4E 85 F1 | 	sub	fp, #16
0faec     15 23 52 F2 | 	cmps	local03, local07 wc
0faf0     AC 01 90 3D |  if_ae	jmp	#LR__1348
0faf4                 | '     get #channel,,block(0),amount,r
0faf4     04 4E 05 F1 | 	add	fp, #4
0faf8     A7 12 02 FB | 	rdlong	arg01, fp
0fafc     4E 00 00 FF 
0fb00     B4 E4 05 F1 | 	add	objptr, ##40116
0fb04     F2 16 02 F6 | 	mov	arg03, objptr
0fb08     4E 00 00 FF 
0fb0c     B4 E4 85 F1 | 	sub	objptr, ##40116
0fb10     04 4E 05 F1 | 	add	fp, #4
0fb14     A7 18 02 FB | 	rdlong	arg04, fp
0fb18     08 4E 85 F1 | 	sub	fp, #8
0fb1c     00 14 06 F6 | 	mov	arg02, #0
0fb20     01 1A 06 F6 | 	mov	arg05, #1
0fb24     AC 1C B1 FD | 	call	#__system___basic_get
0fb28     18 4E 05 F1 | 	add	fp, #24
0fb2c     A7 FA 61 FC | 	wrlong	result1, fp
0fb30                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
0fb30     0C 4E 85 F1 | 	sub	fp, #12
0fb34     A7 20 02 FB | 	rdlong	local02, fp
0fb38     0C 4E 85 F1 | 	sub	fp, #12
0fb3c     00 04 00 FF 
0fb40     00 20 56 F2 | 	cmps	local02, ##524288 wc
0fb44     7C 00 90 3D |  if_ae	jmp	#LR__1344
0fb48     14 4E 05 F1 | 	add	fp, #20
0fb4c     A7 00 68 FC | 	wrlong	#0, fp
0fb50     04 4E 05 F1 | 	add	fp, #4
0fb54     A7 2C 02 FB | 	rdlong	local08, fp
0fb58     18 4E 85 F1 | 	sub	fp, #24
0fb5c                 | LR__1343
0fb5c     14 4E 05 F1 | 	add	fp, #20
0fb60     A7 20 02 FB | 	rdlong	local02, fp
0fb64     14 4E 85 F1 | 	sub	fp, #20
0fb68     16 21 52 F2 | 	cmps	local02, local08 wc
0fb6c     D8 00 90 3D |  if_ae	jmp	#LR__1347
0fb70     0C 4E 05 F1 | 	add	fp, #12
0fb74     A7 12 02 FB | 	rdlong	arg01, fp
0fb78     04 4E 05 F1 | 	add	fp, #4
0fb7c     A7 28 02 FB | 	rdlong	local06, fp
0fb80     0A 28 66 F0 | 	shl	local06, #10
0fb84     14 13 02 F1 | 	add	arg01, local06
0fb88     04 4E 05 F1 | 	add	fp, #4
0fb8c     A7 28 02 FB | 	rdlong	local06, fp
0fb90     14 13 02 F1 | 	add	arg01, local06
0fb94     4E 00 00 FF 
0fb98     B4 E4 05 F1 | 	add	objptr, ##40116
0fb9c     F2 28 02 F1 | 	add	local06, objptr
0fba0     14 15 C2 FA | 	rdbyte	arg02, local06
0fba4     09 15 42 FC | 	wrbyte	arg02, arg01
0fba8     4E 00 00 FF 
0fbac     B4 E4 85 F1 | 	sub	objptr, ##40116
0fbb0     A7 28 02 FB | 	rdlong	local06, fp
0fbb4     01 28 06 F1 | 	add	local06, #1
0fbb8     A7 28 62 FC | 	wrlong	local06, fp
0fbbc     14 4E 85 F1 | 	sub	fp, #20
0fbc0     98 FF 9F FD | 	jmp	#LR__1343
0fbc4                 | LR__1344
0fbc4     14 4E 05 F1 | 	add	fp, #20
0fbc8     A7 00 68 FC | 	wrlong	#0, fp
0fbcc     04 4E 05 F1 | 	add	fp, #4
0fbd0     A7 2E 02 FB | 	rdlong	local09, fp
0fbd4     18 4E 85 F1 | 	sub	fp, #24
0fbd8                 | LR__1345
0fbd8     14 4E 05 F1 | 	add	fp, #20
0fbdc     A7 20 02 FB | 	rdlong	local02, fp
0fbe0     14 4E 85 F1 | 	sub	fp, #20
0fbe4     17 21 52 F2 | 	cmps	local02, local09 wc
0fbe8     5C 00 90 3D |  if_ae	jmp	#LR__1346
0fbec     0C 4E 05 F1 | 	add	fp, #12
0fbf0     A7 12 02 FB | 	rdlong	arg01, fp
0fbf4     04 4E 05 F1 | 	add	fp, #4
0fbf8     A7 2C 02 FB | 	rdlong	local08, fp
0fbfc     0A 2C 66 F0 | 	shl	local08, #10
0fc00     16 13 02 F1 | 	add	arg01, local08
0fc04     04 4E 05 F1 | 	add	fp, #4
0fc08     A7 2C 02 FB | 	rdlong	local08, fp
0fc0c     16 13 02 F1 | 	add	arg01, local08
0fc10     14 4E 85 F1 | 	sub	fp, #20
0fc14     4E 00 00 FF 
0fc18     B4 E4 05 F1 | 	add	objptr, ##40116
0fc1c     F2 2C 02 F1 | 	add	local08, objptr
0fc20     16 15 C2 FA | 	rdbyte	arg02, local08
0fc24     4E 00 00 FF 
0fc28     B4 E4 85 F1 | 	sub	objptr, ##40116
0fc2c     98 D9 B0 FD | 	call	#_pspoke
0fc30     14 4E 05 F1 | 	add	fp, #20
0fc34     A7 2C 02 FB | 	rdlong	local08, fp
0fc38     01 2C 06 F1 | 	add	local08, #1
0fc3c     A7 2C 62 FC | 	wrlong	local08, fp
0fc40     14 4E 85 F1 | 	sub	fp, #20
0fc44     90 FF 9F FD | 	jmp	#LR__1345
0fc48                 | LR__1346
0fc48                 | LR__1347
0fc48     14 4E 05 F1 | 	add	fp, #20
0fc4c     A7 2E 02 FB | 	rdlong	local09, fp
0fc50     17 29 02 F6 | 	mov	local06, local09
0fc54     02 28 66 F0 | 	shl	local06, #2
0fc58     50 00 00 FF 
0fc5c     C4 E4 05 F1 | 	add	objptr, ##41156
0fc60     F2 28 02 F1 | 	add	local06, objptr
0fc64     02 2E 66 F0 | 	shl	local09, #2
0fc68     F2 2E 02 F1 | 	add	local09, objptr
0fc6c     17 2F 02 FB | 	rdlong	local09, local09
0fc70     04 4E 05 F1 | 	add	fp, #4
0fc74     A7 2C 02 FB | 	rdlong	local08, fp
0fc78     16 2F 02 F1 | 	add	local09, local08
0fc7c     14 2F 62 FC | 	wrlong	local09, local06
0fc80     08 4E 85 F1 | 	sub	fp, #8
0fc84     A7 2E 02 FB | 	rdlong	local09, fp
0fc88     01 2E 06 F1 | 	add	local09, #1
0fc8c     A7 2E 62 FC | 	wrlong	local09, fp
0fc90     10 4E 85 F1 | 	sub	fp, #16
0fc94     50 00 00 FF 
0fc98     C4 E4 85 F1 | 	sub	objptr, ##41156
0fc9c     40 FE 9F FD | 	jmp	#LR__1342
0fca0                 | LR__1348
0fca0                 | LR__1349
0fca0     A7 F0 03 F6 | 	mov	ptra, fp
0fca4     B2 00 A0 FD | 	call	#popregs_
0fca8                 | _do_get_ret
0fca8     2D 00 64 FD | 	ret
0fcac                 | 
0fcac                 | ' 
0fcac                 | ' '-------------------- getenvsustain
0fcac                 | ' 
0fcac                 | ' sub do_getenvsustain
0fcac                 | _do_getenvsustain
0fcac     01 4A 05 F6 | 	mov	COUNT_, #1
0fcb0     A8 00 A0 FD | 	call	#pushregs_
0fcb4     10 F0 07 F1 | 	add	ptra, #16
0fcb8     4A 00 00 FF 
0fcbc     80 E4 05 F1 | 	add	objptr, ##38016
0fcc0     F2 1E 02 FB | 	rdlong	local01, objptr
0fcc4     0F 17 02 F6 | 	mov	arg03, local01
0fcc8     01 16 66 F0 | 	shl	arg03, #1
0fccc     0F 17 02 F1 | 	add	arg03, local01
0fcd0     02 16 66 F0 | 	shl	arg03, #2
0fcd4     03 00 00 FF 
0fcd8     04 E4 85 F1 | 	sub	objptr, ##1540
0fcdc     F2 16 02 F1 | 	add	arg03, objptr
0fce0     0B 17 02 FB | 	rdlong	arg03, arg03
0fce4     0C 4E 05 F1 | 	add	fp, #12
0fce8     A7 16 62 FC | 	wrlong	arg03, fp
0fcec                 | ' 
0fcec                 | ' numpar=compiledline(lineptr_e).result.uresult
0fcec                 | ' if numpar>1 orelse numpar=0 then print "getenvsustain: "; : printerror(39) : return
0fcec     0C 4E 85 F1 | 	sub	fp, #12
0fcf0     02 16 16 F2 | 	cmp	arg03, #2 wc
0fcf4     47 00 00 FF 
0fcf8     7C E4 85 F1 | 	sub	objptr, ##36476
0fcfc     0C 4E 05 C1 |  if_b	add	fp, #12
0fd00     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
0fd04     0C 4E 85 C1 |  if_b	sub	fp, #12
0fd08     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1350
0fd0c     00 12 06 F6 | 	mov	arg01, #0
0fd10     B4 66 B1 FD | 	call	#__system___getiolock_0540
0fd14     FD 12 02 F6 | 	mov	arg01, result1
0fd18     48 0C B1 FD | 	call	#__system___lockmem
0fd1c     84 01 00 FF 
0fd20     9E 15 06 F6 | 	mov	arg02, ##@LR__5479
0fd24     00 12 06 F6 | 	mov	arg01, #0
0fd28     00 16 06 F6 | 	mov	arg03, #0
0fd2c     28 19 B1 FD | 	call	#__system___basic_print_string
0fd30     00 12 06 F6 | 	mov	arg01, #0
0fd34     90 66 B1 FD | 	call	#__system___getiolock_0540
0fd38     FD 00 68 FC | 	wrlong	#0, result1
0fd3c     27 12 06 F6 | 	mov	arg01, #39
0fd40     90 D6 B0 FD | 	call	#_printerror
0fd44     64 00 90 FD | 	jmp	#LR__1351
0fd48                 | LR__1350
0fd48     60 B5 BF FD | 	call	#_pop
0fd4c     FD 1E 02 F6 | 	mov	local01, result1
0fd50     FE 16 02 F6 | 	mov	arg03, result2
0fd54     A7 1E 62 FC | 	wrlong	local01, fp
0fd58     04 4E 05 F1 | 	add	fp, #4
0fd5c     A7 16 62 FC | 	wrlong	arg03, fp
0fd60     04 4E 05 F1 | 	add	fp, #4
0fd64     A7 FE 61 FC | 	wrlong	result3, fp
0fd68     08 4E 85 F1 | 	sub	fp, #8
0fd6c     A7 12 02 F6 | 	mov	arg01, fp
0fd70     1C B7 BF FD | 	call	#_converttoint
0fd74     FD 1E 02 F6 | 	mov	local01, result1
0fd78     01 1E 66 F0 | 	shl	local01, #1
0fd7c     51 00 00 FF 
0fd80     C8 E5 05 F1 | 	add	objptr, ##41928
0fd84     F2 1E 02 F1 | 	add	local01, objptr
0fd88     0F 1F E2 FA | 	rdword	local01, local01
0fd8c     A7 1E 62 FC | 	wrlong	local01, fp
0fd90     08 4E 05 F1 | 	add	fp, #8
0fd94     A7 38 68 FC | 	wrlong	#28, fp
0fd98     08 4E 85 F1 | 	sub	fp, #8
0fd9c     A7 12 02 F6 | 	mov	arg01, fp
0fda0     51 00 00 FF 
0fda4     C8 E5 85 F1 | 	sub	objptr, ##41928
0fda8     98 B5 BF FD | 	call	#_push
0fdac                 | LR__1351
0fdac     A7 F0 03 F6 | 	mov	ptra, fp
0fdb0     B2 00 A0 FD | 	call	#popregs_
0fdb4                 | _do_getenvsustain_ret
0fdb4     2D 00 64 FD | 	ret
0fdb8                 | 
0fdb8                 | ' 
0fdb8                 | ' '-------------------- getnotevalue
0fdb8                 | ' 
0fdb8                 | ' sub do_getnotevalue
0fdb8                 | _do_getnotevalue
0fdb8     01 4A 05 F6 | 	mov	COUNT_, #1
0fdbc     A8 00 A0 FD | 	call	#pushregs_
0fdc0     1C F0 07 F1 | 	add	ptra, #28
0fdc4     E4 B4 BF FD | 	call	#_pop
0fdc8     FF 14 02 F6 | 	mov	arg02, result3
0fdcc     10 4E 05 F1 | 	add	fp, #16
0fdd0     A7 FA 61 FC | 	wrlong	result1, fp
0fdd4     04 4E 05 F1 | 	add	fp, #4
0fdd8     A7 FC 61 FC | 	wrlong	result2, fp
0fddc     04 4E 05 F1 | 	add	fp, #4
0fde0     A7 14 62 FC | 	wrlong	arg02, fp
0fde4     08 4E 85 F1 | 	sub	fp, #8
0fde8     A7 12 02 F6 | 	mov	arg01, fp
0fdec     10 4E 85 F1 | 	sub	fp, #16
0fdf0     9C B6 BF FD | 	call	#_converttoint
0fdf4     FD 14 52 F6 | 	abs	arg02, result1 wc
0fdf8     0C 14 16 FD | 	qdiv	arg02, #12
0fdfc     0C 4E 05 F1 | 	add	fp, #12
0fe00     A7 FA 61 FC | 	wrlong	result1, fp
0fe04     14 00 00 FF 
0fe08     D8 E4 05 F1 | 	add	objptr, ##10456
0fe0c     08 4E 85 F1 | 	sub	fp, #8
0fe10     19 14 62 FD | 	getqy	arg02
0fe14     0A 15 82 F6 | 	negc	arg02, arg02
0fe18     02 14 66 F0 | 	shl	arg02, #2
0fe1c     F2 14 02 F1 | 	add	arg02, objptr
0fe20     0A 15 02 FB | 	rdlong	arg02, arg02
0fe24     A7 14 62 FC | 	wrlong	arg02, fp
0fe28     08 4E 05 F1 | 	add	fp, #8
0fe2c     A7 14 02 FB | 	rdlong	arg02, fp
0fe30     0A 15 52 F6 | 	abs	arg02, arg02 wc
0fe34     0C 14 16 FD | 	qdiv	arg02, #12
0fe38     0C 4E 85 F1 | 	sub	fp, #12
0fe3c     14 00 00 FF 
0fe40     D8 E4 85 F1 | 	sub	objptr, ##10456
0fe44     18 14 62 FD | 	getqx	arg02
0fe48     0A 13 82 F6 | 	negc	arg01, arg02
0fe4c     09 13 52 F6 | 	abs	arg01, arg01 wc
0fe50     1F 1E C6 C9 |  if_b	decod	local01, #31
0fe54     00 1E 06 36 |  if_ae	mov	local01, #0
0fe58     B8 32 B1 FD | 	call	#__system___float_fromuns
0fe5c     0F FB 61 F5 | 	xor	result1, local01
0fe60     08 4E 05 F1 | 	add	fp, #8
0fe64     A7 FA 61 FC | 	wrlong	result1, fp
0fe68     FD 14 02 F6 | 	mov	arg02, result1
0fe6c     08 4E 85 F1 | 	sub	fp, #8
0fe70     1E 12 C6 F9 | 	decod	arg01, #30
0fe74     A8 45 B1 FD | 	call	#__system____builtin_powf
0fe78     FD 12 02 F6 | 	mov	arg01, result1
0fe7c     04 4E 05 F1 | 	add	fp, #4
0fe80     A7 14 02 FB | 	rdlong	arg02, fp
0fe84     04 4E 85 F1 | 	sub	fp, #4
0fe88     8C 36 B1 FD | 	call	#__system___float_mul
0fe8c     A7 FA 61 FC | 	wrlong	result1, fp
0fe90     10 4E 05 F1 | 	add	fp, #16
0fe94     A7 FA 61 FC | 	wrlong	result1, fp
0fe98     08 4E 05 F1 | 	add	fp, #8
0fe9c     A7 3C 68 FC | 	wrlong	#30, fp
0fea0     08 4E 85 F1 | 	sub	fp, #8
0fea4     A7 12 02 F6 | 	mov	arg01, fp
0fea8     10 4E 85 F1 | 	sub	fp, #16
0feac     94 B4 BF FD | 	call	#_push
0feb0     A7 F0 03 F6 | 	mov	ptra, fp
0feb4     B2 00 A0 FD | 	call	#popregs_
0feb8                 | _do_getnotevalue_ret
0feb8     2D 00 64 FD | 	ret
0febc                 | 
0febc                 | ' 
0febc                 | ' '-------------------- getpixel
0febc                 | ' 
0febc                 | ' sub do_getpixel
0febc                 | _do_getpixel
0febc     00 4A 05 F6 | 	mov	COUNT_, #0
0fec0     A8 00 A0 FD | 	call	#pushregs_
0fec4     24 F0 07 F1 | 	add	ptra, #36
0fec8     4A 00 00 FF 
0fecc     80 E4 05 F1 | 	add	objptr, ##38016
0fed0     F2 16 02 FB | 	rdlong	arg03, objptr
0fed4     0B 15 02 F6 | 	mov	arg02, arg03
0fed8     01 14 66 F0 | 	shl	arg02, #1
0fedc     0B 15 02 F1 | 	add	arg02, arg03
0fee0     02 14 66 F0 | 	shl	arg02, #2
0fee4     03 00 00 FF 
0fee8     04 E4 85 F1 | 	sub	objptr, ##1540
0feec     F2 14 02 F1 | 	add	arg02, objptr
0fef0     0A 17 02 FB | 	rdlong	arg03, arg02
0fef4     18 4E 05 F1 | 	add	fp, #24
0fef8     A7 16 62 FC | 	wrlong	arg03, fp
0fefc                 | ' 
0fefc                 | ' numpar=compiledline(lineptr_e).result.uresult
0fefc                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
0fefc     18 4E 85 F1 | 	sub	fp, #24
0ff00     02 16 0E F2 | 	cmp	arg03, #2 wz
0ff04     47 00 00 FF 
0ff08     7C E4 85 F1 | 	sub	objptr, ##36476
0ff0c     3C 00 90 AD |  if_e	jmp	#LR__1360
0ff10     00 12 06 F6 | 	mov	arg01, #0
0ff14     B0 64 B1 FD | 	call	#__system___getiolock_0540
0ff18     FD 12 02 F6 | 	mov	arg01, result1
0ff1c     44 0A B1 FD | 	call	#__system___lockmem
0ff20     84 01 00 FF 
0ff24     AE 15 06 F6 | 	mov	arg02, ##@LR__5480
0ff28     00 12 06 F6 | 	mov	arg01, #0
0ff2c     00 16 06 F6 | 	mov	arg03, #0
0ff30     24 17 B1 FD | 	call	#__system___basic_print_string
0ff34     00 12 06 F6 | 	mov	arg01, #0
0ff38     8C 64 B1 FD | 	call	#__system___getiolock_0540
0ff3c     FD 00 68 FC | 	wrlong	#0, result1
0ff40     27 12 06 F6 | 	mov	arg01, #39
0ff44     8C D4 B0 FD | 	call	#_printerror
0ff48     B4 00 90 FD | 	jmp	#LR__1361
0ff4c                 | LR__1360
0ff4c     5C B3 BF FD | 	call	#_pop
0ff50     FD 16 02 F6 | 	mov	arg03, result1
0ff54     FE 14 02 F6 | 	mov	arg02, result2
0ff58     FF 12 02 F6 | 	mov	arg01, result3
0ff5c     0C 4E 05 F1 | 	add	fp, #12
0ff60     A7 16 62 FC | 	wrlong	arg03, fp
0ff64     04 4E 05 F1 | 	add	fp, #4
0ff68     A7 14 62 FC | 	wrlong	arg02, fp
0ff6c     04 4E 05 F1 | 	add	fp, #4
0ff70     A7 12 62 FC | 	wrlong	arg01, fp
0ff74     14 4E 85 F1 | 	sub	fp, #20
0ff78     30 B3 BF FD | 	call	#_pop
0ff7c     FF 16 02 F6 | 	mov	arg03, result3
0ff80     A7 FA 61 FC | 	wrlong	result1, fp
0ff84     04 4E 05 F1 | 	add	fp, #4
0ff88     A7 FC 61 FC | 	wrlong	result2, fp
0ff8c     04 4E 05 F1 | 	add	fp, #4
0ff90     A7 16 62 FC | 	wrlong	arg03, fp
0ff94     08 4E 85 F1 | 	sub	fp, #8
0ff98     A7 12 02 F6 | 	mov	arg01, fp
0ff9c     F0 B4 BF FD | 	call	#_converttoint
0ffa0     1C 4E 05 F1 | 	add	fp, #28
0ffa4     A7 FA 61 FC | 	wrlong	result1, fp
0ffa8     10 4E 85 F1 | 	sub	fp, #16
0ffac     A7 12 02 F6 | 	mov	arg01, fp
0ffb0     0C 4E 85 F1 | 	sub	fp, #12
0ffb4     D8 B4 BF FD | 	call	#_converttoint
0ffb8     FD 16 02 F6 | 	mov	arg03, result1
0ffbc     20 4E 05 F1 | 	add	fp, #32
0ffc0     A7 16 62 FC | 	wrlong	arg03, fp
0ffc4     F2 12 02 FB | 	rdlong	arg01, objptr
0ffc8     04 4E 85 F1 | 	sub	fp, #4
0ffcc     A7 FE 01 FB | 	rdlong	result3, fp
0ffd0     FF 12 02 F1 | 	add	arg01, result3
0ffd4     1C 4E 85 F1 | 	sub	fp, #28
0ffd8     0A 16 66 F0 | 	shl	arg03, #10
0ffdc     0B 13 02 F1 | 	add	arg01, arg03
0ffe0     2C D6 B0 FD | 	call	#_pspeek
0ffe4     FD FA E1 F8 | 	getbyte	result1, result1, #0
0ffe8     A7 FA 61 FC | 	wrlong	result1, fp
0ffec     08 4E 05 F1 | 	add	fp, #8
0fff0     A7 3A 68 FC | 	wrlong	#29, fp
0fff4     08 4E 85 F1 | 	sub	fp, #8
0fff8     A7 12 02 F6 | 	mov	arg01, fp
0fffc     44 B3 BF FD | 	call	#_push
10000                 | LR__1361
10000     A7 F0 03 F6 | 	mov	ptra, fp
10004     B2 00 A0 FD | 	call	#popregs_
10008                 | _do_getpixel_ret
10008     2D 00 64 FD | 	ret
1000c                 | 
1000c                 | ' 
1000c                 | ' '-------------------- gettime
1000c                 | ' 
1000c                 | ' sub do_gettime
1000c                 | _do_gettime
1000c     02 4A 05 F6 | 	mov	COUNT_, #2
10010     A8 00 A0 FD | 	call	#pushregs_
10014     14 F0 07 F1 | 	add	ptra, #20
10018                 | ' 
10018                 | ' const asm 
10018     1A 1E 72 FD | 	getct	local01 wc
1001c     1A 20 62 FD | 	getct	local02
10020                 | ' return hi1, lo1
10020     10 FD 01 F6 | 	mov	result2, local02
10024     A7 1E 62 FC | 	wrlong	local01, fp
10028     04 4E 05 F1 | 	add	fp, #4
1002c     A7 FC 61 FC | 	wrlong	result2, fp
10030     0C 4E 05 F1 | 	add	fp, #12
10034     A7 3A 68 FC | 	wrlong	#29, fp
10038     0C 4E 85 F1 | 	sub	fp, #12
1003c     A7 12 02 FB | 	rdlong	arg01, fp
10040     04 4E 05 F1 | 	add	fp, #4
10044     A7 12 62 FC | 	wrlong	arg01, fp
10048     08 4E 85 F1 | 	sub	fp, #8
1004c     A7 12 02 FB | 	rdlong	arg01, fp
10050     0C 4E 05 F1 | 	add	fp, #12
10054     A7 12 62 FC | 	wrlong	arg01, fp
10058     04 4E 85 F1 | 	sub	fp, #4
1005c     A7 12 02 F6 | 	mov	arg01, fp
10060     08 4E 85 F1 | 	sub	fp, #8
10064     DC B2 BF FD | 	call	#_push
10068     A7 F0 03 F6 | 	mov	ptra, fp
1006c     B2 00 A0 FD | 	call	#popregs_
10070                 | _do_gettime_ret
10070     2D 00 64 FD | 	ret
10074                 | 
10074                 | ' 
10074                 | ' '-------------------- gosub
10074                 | ' 
10074                 | ' sub do_gosub()
10074                 | _do_gosub
10074     50 00 00 FF 
10078     0C E5 05 F1 | 	add	objptr, ##41228
1007c     F2 00 02 FB | 	rdlong	_var01, objptr
10080     01 00 06 F1 | 	add	_var01, #1
10084     F2 00 62 FC | 	wrlong	_var01, objptr
10088                 | ' gosubtop+=1
10088                 | ' if compiledline(lineptr_e+1).result_type=token_end then
10088     06 00 00 FF 
1008c     8C E4 85 F1 | 	sub	objptr, ##3212
10090     F2 00 02 FB | 	rdlong	_var01, objptr
10094     01 00 06 F1 | 	add	_var01, #1
10098     00 03 02 F6 | 	mov	_var02, _var01
1009c     01 02 66 F0 | 	shl	_var02, #1
100a0     00 03 02 F1 | 	add	_var02, _var01
100a4     02 02 66 F0 | 	shl	_var02, #2
100a8     03 00 00 FF 
100ac     04 E4 85 F1 | 	sub	objptr, ##1540
100b0     F2 02 02 F1 | 	add	_var02, objptr
100b4     08 02 06 F1 | 	add	_var02, #8
100b8     01 03 02 FB | 	rdlong	_var02, _var02
100bc     FE 03 0E F2 | 	cmp	_var02, #510 wz
100c0     47 00 00 FF 
100c4     7C E4 85 F1 | 	sub	objptr, ##36476
100c8     58 00 90 5D |  if_ne	jmp	#LR__1370
100cc     50 00 00 FF 
100d0     0C E5 05 F1 | 	add	objptr, ##41228
100d4     F2 02 02 FB | 	rdlong	_var02, objptr
100d8     03 02 66 F0 | 	shl	_var02, #3
100dc     03 00 00 FF 
100e0     60 E5 85 F1 | 	sub	objptr, ##1888
100e4     F2 02 02 F1 | 	add	_var02, objptr
100e8     03 00 00 FF 
100ec     0C E5 05 F1 | 	add	objptr, ##1804
100f0     F2 00 02 FB | 	rdlong	_var01, objptr
100f4     01 01 62 FC | 	wrlong	_var01, _var02
100f8     54 E4 05 F1 | 	add	objptr, #84
100fc     F2 02 02 FB | 	rdlong	_var02, objptr
10100     03 02 66 F0 | 	shl	_var02, #3
10104     03 00 00 FF 
10108     60 E5 85 F1 | 	sub	objptr, ##1888
1010c     F2 02 02 F1 | 	add	_var02, objptr
10110     04 02 06 F1 | 	add	_var02, #4
10114     01 01 68 FC | 	wrlong	#0, _var02
10118     4C 00 00 FF 
1011c     AC E5 85 F1 | 	sub	objptr, ##39340
10120     64 00 90 FD | 	jmp	#LR__1371
10124                 | LR__1370
10124     50 00 00 FF 
10128     0C E5 05 F1 | 	add	objptr, ##41228
1012c     F2 02 02 FB | 	rdlong	_var02, objptr
10130     03 02 66 F0 | 	shl	_var02, #3
10134     03 00 00 FF 
10138     60 E5 85 F1 | 	sub	objptr, ##1888
1013c     F2 02 02 F1 | 	add	_var02, objptr
10140     03 00 00 FF 
10144     14 E5 05 F1 | 	add	objptr, ##1812
10148     F2 00 02 FB | 	rdlong	_var01, objptr
1014c     01 01 62 FC | 	wrlong	_var01, _var02
10150     4C E4 05 F1 | 	add	objptr, #76
10154     F2 02 02 FB | 	rdlong	_var02, objptr
10158     03 02 66 F0 | 	shl	_var02, #3
1015c     03 00 00 FF 
10160     60 E5 85 F1 | 	sub	objptr, ##1888
10164     F2 02 02 F1 | 	add	_var02, objptr
10168     02 00 00 FF 
1016c     2C E5 85 F1 | 	sub	objptr, ##1324
10170     F2 00 02 FB | 	rdlong	_var01, objptr
10174     4A 00 00 FF 
10178     80 E4 85 F1 | 	sub	objptr, ##38016
1017c     02 00 06 F1 | 	add	_var01, #2
10180     04 02 06 F1 | 	add	_var02, #4
10184     01 01 62 FC | 	wrlong	_var01, _var02
10188                 | LR__1371
10188                 | _do_gosub_ret
10188     2D 00 64 FD | 	ret
1018c                 | 
1018c                 | ' 
1018c                 | ' '--------------------- goto
1018c                 | ' 
1018c                 | ' '------- fast goto
1018c                 | ' 
1018c                 | ' sub do_fast_goto
1018c                 | _do_fast_goto
1018c     02 4A 05 F6 | 	mov	COUNT_, #2
10190     A8 00 A0 FD | 	call	#pushregs_
10194                 | _do_fast_goto_enter
10194     4A 00 00 FF 
10198     80 E4 05 F1 | 	add	objptr, ##38016
1019c     F2 12 02 FB | 	rdlong	arg01, objptr
101a0     09 1F 02 F6 | 	mov	local01, arg01
101a4     01 1E 66 F0 | 	shl	local01, #1
101a8     09 1F 02 F1 | 	add	local01, arg01
101ac     02 1E 66 F0 | 	shl	local01, #2
101b0     03 00 00 FF 
101b4     04 E4 85 F1 | 	sub	objptr, ##1540
101b8     F2 1E 02 F1 | 	add	local01, objptr
101bc     0F 21 02 FB | 	rdlong	local02, local01
101c0     10 13 02 F6 | 	mov	arg01, local02
101c4     47 00 00 FF 
101c8     7C E4 85 F1 | 	sub	objptr, ##36476
101cc     98 D4 B0 FD | 	call	#_pslpeek
101d0     FD 12 02 F6 | 	mov	arg01, result1
101d4                 | ' 
101d4                 | ' testptr=compiledline(lineptr_e).result.uresult
101d4                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
101d4                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
101d4     4A 00 00 FF 
101d8     80 E4 05 F1 | 	add	objptr, ##38016
101dc     F2 FA 01 FB | 	rdlong	result1, objptr
101e0     FD 1E 02 F6 | 	mov	local01, result1
101e4     01 1E 66 F0 | 	shl	local01, #1
101e8     FD 1E 02 F1 | 	add	local01, result1
101ec     02 1E 66 F0 | 	shl	local01, #2
101f0     03 00 00 FF 
101f4     04 E4 85 F1 | 	sub	objptr, ##1540
101f8     F2 1E 02 F1 | 	add	local01, objptr
101fc     04 1E 06 F1 | 	add	local01, #4
10200     0F 1F 02 FB | 	rdlong	local01, local01
10204     0F 13 0A F2 | 	cmp	arg01, local01 wz
10208     47 00 00 FF 
1020c     7C E4 85 F1 | 	sub	objptr, ##36476
10210     58 00 90 5D |  if_ne	jmp	#LR__1380
10214     50 00 00 FF 
10218     B8 E4 05 F1 | 	add	objptr, ##41144
1021c     F2 20 62 FC | 	wrlong	local02, objptr
10220     06 00 00 FF 
10224     3C E4 85 F1 | 	sub	objptr, ##3132
10228     F2 20 02 FB | 	rdlong	local02, objptr
1022c     01 20 86 F1 | 	sub	local02, #1
10230     04 E4 05 F1 | 	add	objptr, #4
10234     F2 20 62 FC | 	wrlong	local02, objptr
10238                 | '   runptr=testptr
10238                 | '   lineptr_e=lineptr-1
10238                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
10238     06 00 00 FF 
1023c     84 E4 05 F1 | 	add	objptr, ##3204
10240     F2 20 02 FB | 	rdlong	local02, objptr
10244     50 00 00 FF 
10248     04 E5 85 F1 | 	sub	objptr, ##41220
1024c     FF FF 3F FF 
10250     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
10254     50 00 00 AF 
10258     04 E5 05 A1 |  if_e	add	objptr, ##41220
1025c     F2 00 68 AC |  if_e	wrlong	#0, objptr
10260     50 00 00 AF 
10264     04 E5 85 A1 |  if_e	sub	objptr, ##41220
10268     04 00 90 FD | 	jmp	#LR__1381
1026c                 | LR__1380
1026c     0C 00 B0 FD | 	call	#_do_find_goto
10270                 | LR__1381
10270     A7 F0 03 F6 | 	mov	ptra, fp
10274     B2 00 A0 FD | 	call	#popregs_
10278                 | _do_fast_goto_ret
10278     2D 00 64 FD | 	ret
1027c                 | 
1027c                 | ' 
1027c                 | ' '------- find goto  
1027c                 | ' 
1027c                 | ' sub do_find_goto
1027c                 | _do_find_goto
1027c     03 4A 05 F6 | 	mov	COUNT_, #3
10280     A8 00 A0 FD | 	call	#pushregs_
10284     24 F0 07 F1 | 	add	ptra, #36
10288                 | _do_find_goto_enter
10288     4A 00 00 FF 
1028c     80 E4 05 F1 | 	add	objptr, ##38016
10290     F2 1E 02 FB | 	rdlong	local01, objptr
10294     0F 21 02 F6 | 	mov	local02, local01
10298     01 20 66 F0 | 	shl	local02, #1
1029c     0F 21 02 F1 | 	add	local02, local01
102a0     02 20 66 F0 | 	shl	local02, #2
102a4     03 00 00 FF 
102a8     04 E4 85 F1 | 	sub	objptr, ##1540
102ac     F2 20 02 F1 | 	add	local02, objptr
102b0     04 20 06 F1 | 	add	local02, #4
102b4     10 21 02 FB | 	rdlong	local02, local02
102b8     A7 20 62 FC | 	wrlong	local02, fp
102bc     03 00 00 FF 
102c0     0C E4 05 F1 | 	add	objptr, ##1548
102c4     F2 22 02 FB | 	rdlong	local03, objptr
102c8     4A 00 00 FF 
102cc     88 E4 85 F1 | 	sub	objptr, ##38024
102d0     04 4E 05 F1 | 	add	fp, #4
102d4     A7 22 62 FC | 	wrlong	local03, fp
102d8     04 4E 85 F1 | 	sub	fp, #4
102dc                 | ' 
102dc                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
102dc                 | ' gotoptr=programstart
102dc                 | ' do
102dc                 | LR__1390
102dc     0C 4E 05 F1 | 	add	fp, #12
102e0     A7 12 02 F6 | 	mov	arg01, fp
102e4     08 4E 85 F1 | 	sub	fp, #8
102e8     A7 14 02 FB | 	rdlong	arg02, fp
102ec     04 4E 85 F1 | 	sub	fp, #4
102f0     18 16 06 F6 | 	mov	arg03, #24
102f4     0B 00 00 FF 
102f8     CC E4 05 F1 | 	add	objptr, ##5836
102fc     24 FA B0 FD | 	call	#_psram_spin2_read1
10300     0B 00 00 FF 
10304     CC E4 85 F1 | 	sub	objptr, ##5836
10308                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
10308                 | '   if gotoheader(0)<>$FFFFFFFF then
10308     0C 4E 05 F1 | 	add	fp, #12
1030c     A7 22 02 FB | 	rdlong	local03, fp
10310     0C 4E 85 F1 | 	sub	fp, #12
10314     FF FF 7F FF 
10318     FF 23 0E F2 | 	cmp	local03, ##-1 wz
1031c     24 00 90 AD |  if_e	jmp	#LR__1391
10320     04 4E 05 F1 | 	add	fp, #4
10324     A7 22 02 FB | 	rdlong	local03, fp
10328     04 4E 05 F1 | 	add	fp, #4
1032c     A7 22 62 FC | 	wrlong	local03, fp
10330     18 4E 05 F1 | 	add	fp, #24
10334     A7 22 02 FB | 	rdlong	local03, fp
10338     1C 4E 85 F1 | 	sub	fp, #28
1033c     A7 22 62 FC | 	wrlong	local03, fp
10340     04 4E 85 F1 | 	sub	fp, #4
10344                 | LR__1391
10344     20 4E 05 F1 | 	add	fp, #32
10348     A7 22 02 FB | 	rdlong	local03, fp
1034c     20 4E 85 F1 | 	sub	fp, #32
10350     FF FF 3F FF 
10354     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
10358     0C 4E 05 51 |  if_ne	add	fp, #12
1035c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
10360     0C 4E 85 51 |  if_ne	sub	fp, #12
10364     FF FF 7F 5F 
10368     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
1036c     18 00 90 AD |  if_e	jmp	#LR__1392
10370     0C 4E 05 F1 | 	add	fp, #12
10374     A7 22 02 FB | 	rdlong	local03, fp
10378     0C 4E 85 F1 | 	sub	fp, #12
1037c     A7 20 02 FB | 	rdlong	local02, fp
10380     10 23 0A F2 | 	cmp	local03, local02 wz
10384     54 FF 9F 5D |  if_ne	jmp	#LR__1390
10388                 | LR__1392
10388                 | ' 
10388                 | ' if gotoheader(0)=gotoline then
10388     0C 4E 05 F1 | 	add	fp, #12
1038c     A7 22 02 FB | 	rdlong	local03, fp
10390     0C 4E 85 F1 | 	sub	fp, #12
10394     A7 1E 02 FB | 	rdlong	local01, fp
10398     0F 23 0A F2 | 	cmp	local03, local01 wz
1039c     D8 00 90 5D |  if_ne	jmp	#LR__1393
103a0     4A 00 00 FF 
103a4     80 E4 05 F1 | 	add	objptr, ##38016
103a8     F2 1E 02 FB | 	rdlong	local01, objptr
103ac     0F 21 02 F6 | 	mov	local02, local01
103b0     01 20 66 F0 | 	shl	local02, #1
103b4     0F 21 02 F1 | 	add	local02, local01
103b8     02 20 66 F0 | 	shl	local02, #2
103bc     03 00 00 FF 
103c0     04 E4 85 F1 | 	sub	objptr, ##1540
103c4     F2 20 02 F1 | 	add	local02, objptr
103c8     08 4E 05 F1 | 	add	fp, #8
103cc     A7 22 02 FB | 	rdlong	local03, fp
103d0     10 23 62 FC | 	wrlong	local03, local02
103d4     03 00 00 FF 
103d8     04 E4 05 F1 | 	add	objptr, ##1540
103dc     F2 1E 02 FB | 	rdlong	local01, objptr
103e0     0F 21 02 F6 | 	mov	local02, local01
103e4     01 20 66 F0 | 	shl	local02, #1
103e8     0F 21 02 F1 | 	add	local02, local01
103ec     02 20 66 F0 | 	shl	local02, #2
103f0     03 00 00 FF 
103f4     04 E4 85 F1 | 	sub	objptr, ##1540
103f8     F2 20 02 F1 | 	add	local02, objptr
103fc     08 20 06 F1 | 	add	local02, #8
10400     10 9D 68 FC | 	wrlong	#78, local02
10404     03 00 00 FF 
10408     04 E4 05 F1 | 	add	objptr, ##1540
1040c     F2 20 02 FB | 	rdlong	local02, objptr
10410     10 13 02 F6 | 	mov	arg01, local02
10414     01 12 66 F0 | 	shl	arg01, #1
10418     10 13 02 F1 | 	add	arg01, local02
1041c     02 12 66 F0 | 	shl	arg01, #2
10420     03 00 00 FF 
10424     04 E4 85 F1 | 	sub	objptr, ##1540
10428     F2 12 02 F1 | 	add	arg01, objptr
1042c     09 00 00 FF 
10430     44 E4 05 F1 | 	add	objptr, ##4676
10434     F2 14 02 FB | 	rdlong	arg02, objptr
10438     02 22 06 F6 | 	mov	local03, #2
1043c     10 23 02 F1 | 	add	local03, local02
10440     0B 00 00 FF 
10444     5C E4 85 F1 | 	sub	objptr, ##5724
10448     F2 16 02 FB | 	rdlong	arg03, objptr
1044c     0B 23 02 FD | 	qmul	local03, arg03
10450     08 4E 85 F1 | 	sub	fp, #8
10454     39 00 00 FF 
10458     98 E5 85 F1 | 	sub	objptr, ##29592
1045c     18 22 62 FD | 	getqx	local03
10460     11 15 02 F1 | 	add	arg02, local03
10464     58 F9 B0 FD | 	call	#_psram_spin2_write
10468     0B 00 00 FF 
1046c     CC E4 85 F1 | 	sub	objptr, ##5836
10470     18 FD BF FD | 	call	#_do_fast_goto
10474     08 00 90 FD | 	jmp	#LR__1394
10478                 | LR__1393
10478     26 12 06 F6 | 	mov	arg01, #38
1047c     54 CF B0 FD | 	call	#_printerror
10480                 | LR__1394
10480     A7 F0 03 F6 | 	mov	ptra, fp
10484     B2 00 A0 FD | 	call	#popregs_
10488                 | _do_find_goto_ret
10488     2D 00 64 FD | 	ret
1048c                 | 
1048c                 | ' 
1048c                 | ' '------- slow goto  
1048c                 | ' 
1048c                 | ' sub do_slow_goto
1048c                 | _do_slow_goto
1048c     02 4A 05 F6 | 	mov	COUNT_, #2
10490     A8 00 A0 FD | 	call	#pushregs_
10494     30 F0 07 F1 | 	add	ptra, #48
10498     10 AE BF FD | 	call	#_pop
1049c     FF 1E 02 F6 | 	mov	local01, result3
104a0     24 4E 05 F1 | 	add	fp, #36
104a4     A7 FA 61 FC | 	wrlong	result1, fp
104a8     04 4E 05 F1 | 	add	fp, #4
104ac     A7 FC 61 FC | 	wrlong	result2, fp
104b0     04 4E 05 F1 | 	add	fp, #4
104b4     A7 1E 62 FC | 	wrlong	local01, fp
104b8     08 4E 85 F1 | 	sub	fp, #8
104bc     A7 12 02 F6 | 	mov	arg01, fp
104c0     24 4E 85 F1 | 	sub	fp, #36
104c4     C8 AF BF FD | 	call	#_converttoint
104c8     A7 FA 61 FC | 	wrlong	result1, fp
104cc     4A 00 00 FF 
104d0     88 E4 05 F1 | 	add	objptr, ##38024
104d4     F2 20 02 FB | 	rdlong	local02, objptr
104d8     4A 00 00 FF 
104dc     88 E4 85 F1 | 	sub	objptr, ##38024
104e0     04 4E 05 F1 | 	add	fp, #4
104e4     A7 20 62 FC | 	wrlong	local02, fp
104e8     04 4E 85 F1 | 	sub	fp, #4
104ec                 | ' 
104ec                 | ' t1=pop() : gotoline=converttoint(t1)
104ec                 | ' gotoptr=programstart
104ec                 | ' do
104ec                 | LR__1400
104ec     0C 4E 05 F1 | 	add	fp, #12
104f0     A7 12 02 F6 | 	mov	arg01, fp
104f4     08 4E 85 F1 | 	sub	fp, #8
104f8     A7 14 02 FB | 	rdlong	arg02, fp
104fc     04 4E 85 F1 | 	sub	fp, #4
10500     18 16 06 F6 | 	mov	arg03, #24
10504     0B 00 00 FF 
10508     CC E4 05 F1 | 	add	objptr, ##5836
1050c     14 F8 B0 FD | 	call	#_psram_spin2_read1
10510     0B 00 00 FF 
10514     CC E4 85 F1 | 	sub	objptr, ##5836
10518                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
10518                 | '   if gotoheader(0)<>$FFFFFFFF then
10518     0C 4E 05 F1 | 	add	fp, #12
1051c     A7 20 02 FB | 	rdlong	local02, fp
10520     0C 4E 85 F1 | 	sub	fp, #12
10524     FF FF 7F FF 
10528     FF 21 0E F2 | 	cmp	local02, ##-1 wz
1052c     24 00 90 AD |  if_e	jmp	#LR__1401
10530     04 4E 05 F1 | 	add	fp, #4
10534     A7 20 02 FB | 	rdlong	local02, fp
10538     04 4E 05 F1 | 	add	fp, #4
1053c     A7 20 62 FC | 	wrlong	local02, fp
10540     18 4E 05 F1 | 	add	fp, #24
10544     A7 20 02 FB | 	rdlong	local02, fp
10548     1C 4E 85 F1 | 	sub	fp, #28
1054c     A7 20 62 FC | 	wrlong	local02, fp
10550     04 4E 85 F1 | 	sub	fp, #4
10554                 | LR__1401
10554     20 4E 05 F1 | 	add	fp, #32
10558     A7 20 02 FB | 	rdlong	local02, fp
1055c     20 4E 85 F1 | 	sub	fp, #32
10560     FF FF 3F FF 
10564     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
10568     0C 4E 05 51 |  if_ne	add	fp, #12
1056c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
10570     0C 4E 85 51 |  if_ne	sub	fp, #12
10574     FF FF 7F 5F 
10578     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
1057c     18 00 90 AD |  if_e	jmp	#LR__1402
10580     0C 4E 05 F1 | 	add	fp, #12
10584     A7 20 02 FB | 	rdlong	local02, fp
10588     0C 4E 85 F1 | 	sub	fp, #12
1058c     A7 16 02 FB | 	rdlong	arg03, fp
10590     0B 21 0A F2 | 	cmp	local02, arg03 wz
10594     54 FF 9F 5D |  if_ne	jmp	#LR__1400
10598                 | LR__1402
10598                 | ' if gotoheader(0)=gotoline then  
10598     0C 4E 05 F1 | 	add	fp, #12
1059c     A7 20 02 FB | 	rdlong	local02, fp
105a0     0C 4E 85 F1 | 	sub	fp, #12
105a4     A7 1E 02 FB | 	rdlong	local01, fp
105a8     0F 21 0A F2 | 	cmp	local02, local01 wz
105ac     60 00 90 5D |  if_ne	jmp	#LR__1403
105b0     08 4E 05 F1 | 	add	fp, #8
105b4     A7 20 02 FB | 	rdlong	local02, fp
105b8     08 4E 85 F1 | 	sub	fp, #8
105bc     50 00 00 FF 
105c0     B8 E4 05 F1 | 	add	objptr, ##41144
105c4     F2 20 62 FC | 	wrlong	local02, objptr
105c8     06 00 00 FF 
105cc     3C E4 85 F1 | 	sub	objptr, ##3132
105d0     F2 20 02 FB | 	rdlong	local02, objptr
105d4     01 20 86 F1 | 	sub	local02, #1
105d8     04 E4 05 F1 | 	add	objptr, #4
105dc     F2 20 62 FC | 	wrlong	local02, objptr
105e0                 | '    runptr=oldgotoptr
105e0                 | '    lineptr_e=lineptr-1
105e0                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0 
105e0     06 00 00 FF 
105e4     84 E4 05 F1 | 	add	objptr, ##3204
105e8     F2 20 02 FB | 	rdlong	local02, objptr
105ec     50 00 00 FF 
105f0     04 E5 85 F1 | 	sub	objptr, ##41220
105f4     FF FF 3F FF 
105f8     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
105fc     50 00 00 AF 
10600     04 E5 05 A1 |  if_e	add	objptr, ##41220
10604     F2 00 68 AC |  if_e	wrlong	#0, objptr
10608     50 00 00 AF 
1060c     04 E5 85 A1 |  if_e	sub	objptr, ##41220
10610                 | LR__1403
10610     A7 F0 03 F6 | 	mov	ptra, fp
10614     B2 00 A0 FD | 	call	#popregs_
10618                 | _do_slow_goto_ret
10618     2D 00 64 FD | 	ret
1061c                 | 
1061c                 | ' 
1061c                 | ' ' ----------------  hex$
1061c                 | ' 
1061c                 | ' sub do_hex
1061c                 | _do_hex
1061c     01 4A 05 F6 | 	mov	COUNT_, #1
10620     A8 00 A0 FD | 	call	#pushregs_
10624     18 F0 07 F1 | 	add	ptra, #24
10628     4A 00 00 FF 
1062c     80 E4 05 F1 | 	add	objptr, ##38016
10630     F2 1E 02 FB | 	rdlong	local01, objptr
10634     0F 17 02 F6 | 	mov	arg03, local01
10638     01 16 66 F0 | 	shl	arg03, #1
1063c     0F 17 02 F1 | 	add	arg03, local01
10640     02 16 66 F0 | 	shl	arg03, #2
10644     03 00 00 FF 
10648     04 E4 85 F1 | 	sub	objptr, ##1540
1064c     F2 16 02 F1 | 	add	arg03, objptr
10650     0B 17 02 FB | 	rdlong	arg03, arg03
10654     0C 4E 05 F1 | 	add	fp, #12
10658     A7 16 62 FC | 	wrlong	arg03, fp
1065c                 | ' 
1065c                 | ' numpar=compiledline(lineptr_e).result.uresult
1065c                 | ' if numpar>2 orelse numpar=0 then print "hex$: "; : printerror(39) : return
1065c     0C 4E 85 F1 | 	sub	fp, #12
10660     03 16 16 F2 | 	cmp	arg03, #3 wc
10664     47 00 00 FF 
10668     7C E4 85 F1 | 	sub	objptr, ##36476
1066c     0C 4E 05 C1 |  if_b	add	fp, #12
10670     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
10674     0C 4E 85 C1 |  if_b	sub	fp, #12
10678     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1410
1067c     00 12 06 F6 | 	mov	arg01, #0
10680     44 5D B1 FD | 	call	#__system___getiolock_0540
10684     FD 12 02 F6 | 	mov	arg01, result1
10688     D8 02 B1 FD | 	call	#__system___lockmem
1068c     84 01 00 FF 
10690     B9 15 06 F6 | 	mov	arg02, ##@LR__5481
10694     00 12 06 F6 | 	mov	arg01, #0
10698     00 16 06 F6 | 	mov	arg03, #0
1069c     B8 0F B1 FD | 	call	#__system___basic_print_string
106a0     00 12 06 F6 | 	mov	arg01, #0
106a4     20 5D B1 FD | 	call	#__system___getiolock_0540
106a8     FD 00 68 FC | 	wrlong	#0, result1
106ac     27 12 06 F6 | 	mov	arg01, #39
106b0     20 CD B0 FD | 	call	#_printerror
106b4     B8 00 90 FD | 	jmp	#LR__1413
106b8                 | LR__1410
106b8                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=8
106b8     0C 4E 05 F1 | 	add	fp, #12
106bc     A7 1E 02 FB | 	rdlong	local01, fp
106c0     0C 4E 85 F1 | 	sub	fp, #12
106c4     02 1E 0E F2 | 	cmp	local01, #2 wz
106c8     38 00 90 5D |  if_ne	jmp	#LR__1411
106cc     DC AB BF FD | 	call	#_pop
106d0     FF 1E 02 F6 | 	mov	local01, result3
106d4     A7 FA 61 FC | 	wrlong	result1, fp
106d8     04 4E 05 F1 | 	add	fp, #4
106dc     A7 FC 61 FC | 	wrlong	result2, fp
106e0     04 4E 05 F1 | 	add	fp, #4
106e4     A7 1E 62 FC | 	wrlong	local01, fp
106e8     08 4E 85 F1 | 	sub	fp, #8
106ec     A7 12 02 F6 | 	mov	arg01, fp
106f0     9C AD BF FD | 	call	#_converttoint
106f4     14 4E 05 F1 | 	add	fp, #20
106f8     A7 FA 61 FC | 	wrlong	result1, fp
106fc     14 4E 85 F1 | 	sub	fp, #20
10700     0C 00 90 FD | 	jmp	#LR__1412
10704                 | LR__1411
10704     14 4E 05 F1 | 	add	fp, #20
10708     A7 10 68 FC | 	wrlong	#8, fp
1070c     14 4E 85 F1 | 	sub	fp, #20
10710                 | LR__1412
10710     98 AB BF FD | 	call	#_pop
10714     FF 1E 02 F6 | 	mov	local01, result3
10718     A7 FA 61 FC | 	wrlong	result1, fp
1071c     04 4E 05 F1 | 	add	fp, #4
10720     A7 FC 61 FC | 	wrlong	result2, fp
10724     04 4E 05 F1 | 	add	fp, #4
10728     A7 1E 62 FC | 	wrlong	local01, fp
1072c     08 4E 85 F1 | 	sub	fp, #8
10730     A7 12 02 F6 | 	mov	arg01, fp
10734     58 AD BF FD | 	call	#_converttoint
10738     10 4E 05 F1 | 	add	fp, #16
1073c     A7 FA 61 FC | 	wrlong	result1, fp
10740     FD 12 02 F6 | 	mov	arg01, result1
10744     04 4E 05 F1 | 	add	fp, #4
10748     A7 14 02 FB | 	rdlong	arg02, fp
1074c     14 4E 85 F1 | 	sub	fp, #20
10750     10 16 06 F6 | 	mov	arg03, #16
10754     DC 24 B1 FD | 	call	#__system__Number_S
10758     A7 FA 61 FC | 	wrlong	result1, fp
1075c     08 4E 05 F1 | 	add	fp, #8
10760     A7 3E 68 FC | 	wrlong	#31, fp
10764     08 4E 85 F1 | 	sub	fp, #8
10768     A7 12 02 F6 | 	mov	arg01, fp
1076c     D4 AB BF FD | 	call	#_push
10770                 | LR__1413
10770     A7 F0 03 F6 | 	mov	ptra, fp
10774     B2 00 A0 FD | 	call	#popregs_
10778                 | _do_hex_ret
10778     2D 00 64 FD | 	ret
1077c                 | 
1077c                 | ' 
1077c                 | ' ' ----------------  inkey$
1077c                 | ' 
1077c                 | ' sub do_inkey
1077c                 | _do_inkey
1077c     02 4A 05 F6 | 	mov	COUNT_, #2
10780     A8 00 A0 FD | 	call	#pushregs_
10784     0C F0 07 F1 | 	add	ptra, #12
10788     C4 F9 B0 FD | 	call	#_usbnew_spin2_get_key
1078c     45 00 00 FF 
10790     74 E4 05 F1 | 	add	objptr, ##35444
10794     F2 FA 61 FC | 	wrlong	result1, objptr
10798                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then  
10798     45 00 00 FF 
1079c     74 E4 85 F1 | 	sub	objptr, ##35444
107a0     00 FA 0D F2 | 	cmp	result1, #0 wz
107a4     94 00 90 AD |  if_e	jmp	#LR__1421
107a8     45 00 00 FF 
107ac     74 E4 05 F1 | 	add	objptr, ##35444
107b0     F2 1C 02 FB | 	rdlong	arg06, objptr
107b4     45 00 00 FF 
107b8     74 E4 85 F1 | 	sub	objptr, ##35444
107bc     00 00 40 FF 
107c0     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
107c4     45 00 00 CF 
107c8     74 E4 05 C1 |  if_b	add	objptr, ##35444
107cc     F2 1E 02 CB |  if_b	rdlong	local01, objptr
107d0     45 00 00 CF 
107d4     74 E4 85 C1 |  if_b	sub	objptr, ##35444
107d8     0F 1F E2 C8 |  if_b	getbyte	local01, local01, #0
107dc     E0 1E 16 C2 |  if_b	cmp	local01, #224 wc
107e0     58 00 90 3D |  if_ae	jmp	#LR__1421
107e4                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len) 
107e4     50 00 00 FF 
107e8     14 E5 05 F1 | 	add	objptr, ##41236
107ec     F2 1C 02 FB | 	rdlong	arg06, objptr
107f0     50 00 00 FF 
107f4     14 E5 85 F1 | 	sub	objptr, ##41236
107f8     01 1C 0E F2 | 	cmp	arg06, #1 wz
107fc     3C 00 90 5D |  if_ne	jmp	#LR__1420
10800     51 00 00 FF 
10804     B8 E5 05 F1 | 	add	objptr, ##41912
10808     F2 14 02 FB | 	rdlong	arg02, objptr
1080c     04 E4 85 F1 | 	sub	objptr, #4
10810     F2 1A 02 FB | 	rdlong	arg05, objptr
10814     07 12 06 F6 | 	mov	arg01, #7
10818     56 00 00 FF 
1081c     44 16 06 F6 | 	mov	arg03, ##44100
10820     0C 18 C6 F9 | 	decod	arg04, #12
10824     01 1C 66 F6 | 	neg	arg06, #1
10828     46 00 00 FF 
1082c     E8 E4 85 F1 | 	sub	objptr, ##36072
10830     C0 FC B0 FD | 	call	#_audio096_spin2_play
10834     0B 00 00 FF 
10838     CC E4 85 F1 | 	sub	objptr, ##5836
1083c                 | LR__1420
1083c                 | LR__1421
1083c                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then
1083c     45 00 00 FF 
10840     74 E4 05 F1 | 	add	objptr, ##35444
10844     F2 1C 0A FB | 	rdlong	arg06, objptr wz
10848     45 00 00 FF 
1084c     74 E4 85 F1 | 	sub	objptr, ##35444
10850     D4 01 90 AD |  if_e	jmp	#LR__1430
10854     45 00 00 FF 
10858     74 E4 05 F1 | 	add	objptr, ##35444
1085c     F2 1C 02 FB | 	rdlong	arg06, objptr
10860     45 00 00 FF 
10864     74 E4 85 F1 | 	sub	objptr, ##35444
10868     00 00 40 FF 
1086c     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
10870     45 00 00 CF 
10874     74 E4 05 C1 |  if_b	add	objptr, ##35444
10878     F2 1E 02 CB |  if_b	rdlong	local01, objptr
1087c     45 00 00 CF 
10880     74 E4 85 C1 |  if_b	sub	objptr, ##35444
10884     0F 1F E2 C8 |  if_b	getbyte	local01, local01, #0
10888     E0 1E 16 C2 |  if_b	cmp	local01, #224 wc
1088c     98 01 90 3D |  if_ae	jmp	#LR__1430
10890                 | '   if leds and 2 = 2 then 
10890     51 00 00 FF 
10894     E0 E5 05 F1 | 	add	objptr, ##41952
10898     F2 1E 0A FB | 	rdlong	local01, objptr wz
1089c     51 00 00 FF 
108a0     E0 E5 85 F1 | 	sub	objptr, ##41952
108a4     58 01 90 AD |  if_e	jmp	#LR__1429
108a8                 | '     if key>96 andalso key<123 then
108a8     45 00 00 FF 
108ac     74 E4 05 F1 | 	add	objptr, ##35444
108b0     F2 1E 02 FB | 	rdlong	local01, objptr
108b4     45 00 00 FF 
108b8     74 E4 85 F1 | 	sub	objptr, ##35444
108bc     61 1E 16 F2 | 	cmp	local01, #97 wc
108c0     3C 00 90 CD |  if_b	jmp	#LR__1422
108c4     45 00 00 FF 
108c8     74 E4 05 F1 | 	add	objptr, ##35444
108cc     F2 1E 02 FB | 	rdlong	local01, objptr
108d0     45 00 00 FF 
108d4     74 E4 85 F1 | 	sub	objptr, ##35444
108d8     7B 1E 16 F2 | 	cmp	local01, #123 wc
108dc     20 00 90 3D |  if_ae	jmp	#LR__1422
108e0     45 00 00 FF 
108e4     74 E4 05 F1 | 	add	objptr, ##35444
108e8     F2 1E 02 FB | 	rdlong	local01, objptr
108ec     20 1E 86 F1 | 	sub	local01, #32
108f0     F2 1E 62 FC | 	wrlong	local01, objptr
108f4     45 00 00 FF 
108f8     74 E4 85 F1 | 	sub	objptr, ##35444
108fc     00 01 90 FD | 	jmp	#LR__1428
10900                 | LR__1422
10900     45 00 00 FF 
10904     74 E4 05 F1 | 	add	objptr, ##35444
10908     F2 1E 02 FB | 	rdlong	local01, objptr
1090c     45 00 00 FF 
10910     74 E4 85 F1 | 	sub	objptr, ##35444
10914     41 1E 16 F2 | 	cmp	local01, #65 wc
10918     3C 00 90 CD |  if_b	jmp	#LR__1423
1091c     45 00 00 FF 
10920     74 E4 05 F1 | 	add	objptr, ##35444
10924     F2 1E 02 FB | 	rdlong	local01, objptr
10928     45 00 00 FF 
1092c     74 E4 85 F1 | 	sub	objptr, ##35444
10930     5B 1E 16 F2 | 	cmp	local01, #91 wc
10934     20 00 90 3D |  if_ae	jmp	#LR__1423
10938     45 00 00 FF 
1093c     74 E4 05 F1 | 	add	objptr, ##35444
10940     F2 1E 02 FB | 	rdlong	local01, objptr
10944     20 1E 06 F1 | 	add	local01, #32
10948     F2 1E 62 FC | 	wrlong	local01, objptr
1094c     45 00 00 FF 
10950     74 E4 85 F1 | 	sub	objptr, ##35444
10954     A8 00 90 FD | 	jmp	#LR__1427
10958                 | LR__1423
10958     45 00 00 FF 
1095c     74 E4 05 F1 | 	add	objptr, ##35444
10960     F2 1E 02 FB | 	rdlong	local01, objptr
10964     45 00 00 FF 
10968     74 E4 85 F1 | 	sub	objptr, ##35444
1096c     17 1E 16 F2 | 	cmp	local01, #23 wc
10970     3C 00 90 CD |  if_b	jmp	#LR__1424
10974     45 00 00 FF 
10978     74 E4 05 F1 | 	add	objptr, ##35444
1097c     F2 1E 02 FB | 	rdlong	local01, objptr
10980     45 00 00 FF 
10984     74 E4 85 F1 | 	sub	objptr, ##35444
10988     20 1E 16 F2 | 	cmp	local01, #32 wc
1098c     20 00 90 3D |  if_ae	jmp	#LR__1424
10990     45 00 00 FF 
10994     74 E4 05 F1 | 	add	objptr, ##35444
10998     F2 1E 02 FB | 	rdlong	local01, objptr
1099c     09 1E 86 F1 | 	sub	local01, #9
109a0     F2 1E 62 FC | 	wrlong	local01, objptr
109a4     45 00 00 FF 
109a8     74 E4 85 F1 | 	sub	objptr, ##35444
109ac     50 00 90 FD | 	jmp	#LR__1426
109b0                 | LR__1424
109b0     45 00 00 FF 
109b4     74 E4 05 F1 | 	add	objptr, ##35444
109b8     F2 20 02 FB | 	rdlong	local02, objptr
109bc     45 00 00 FF 
109c0     74 E4 85 F1 | 	sub	objptr, ##35444
109c4     0E 20 16 F2 | 	cmp	local02, #14 wc
109c8     34 00 90 CD |  if_b	jmp	#LR__1425
109cc     45 00 00 FF 
109d0     74 E4 05 F1 | 	add	objptr, ##35444
109d4     F2 1E 02 FB | 	rdlong	local01, objptr
109d8     45 00 00 FF 
109dc     74 E4 85 F1 | 	sub	objptr, ##35444
109e0     17 1E 16 F2 | 	cmp	local01, #23 wc
109e4     51 00 00 CF 
109e8     E4 E5 05 C1 |  if_b	add	objptr, ##41956
109ec     F2 20 02 CB |  if_b	rdlong	local02, objptr
109f0     27 20 06 C1 |  if_b	add	local02, #39
109f4     F2 20 62 CC |  if_b	wrlong	local02, objptr
109f8     51 00 00 CF 
109fc     E4 E5 85 C1 |  if_b	sub	objptr, ##41956
10a00                 | LR__1425
10a00                 | LR__1426
10a00                 | LR__1427
10a00                 | LR__1428
10a00                 | LR__1429
10a00     45 00 00 FF 
10a04     74 E4 05 F1 | 	add	objptr, ##35444
10a08     F2 12 02 FB | 	rdlong	arg01, objptr
10a0c     45 00 00 FF 
10a10     74 E4 85 F1 | 	sub	objptr, ##35444
10a14     00 CD B0 FD | 	call	#_scantochar
10a18     FD 12 02 F6 | 	mov	arg01, result1
10a1c     84 21 B1 FD | 	call	#__system__Chr_S
10a20     A7 FA 61 FC | 	wrlong	result1, fp
10a24     0C 00 90 FD | 	jmp	#LR__1431
10a28                 | LR__1430
10a28     84 01 00 FF 
10a2c     C0 21 06 F6 | 	mov	local02, ##@LR__5482
10a30     A7 20 62 FC | 	wrlong	local02, fp
10a34                 | LR__1431
10a34     08 4E 05 F1 | 	add	fp, #8
10a38     A7 3E 68 FC | 	wrlong	#31, fp
10a3c     08 4E 85 F1 | 	sub	fp, #8
10a40     A7 12 02 F6 | 	mov	arg01, fp
10a44     FC A8 BF FD | 	call	#_push
10a48     A7 F0 03 F6 | 	mov	ptra, fp
10a4c     B2 00 A0 FD | 	call	#popregs_
10a50                 | _do_inkey_ret
10a50     2D 00 64 FD | 	ret
10a54                 | 
10a54                 | ' 
10a54                 | ' ' ----------------  int
10a54                 | ' 
10a54                 | ' sub do_int
10a54                 | _do_int
10a54     02 4A 05 F6 | 	mov	COUNT_, #2
10a58     A8 00 A0 FD | 	call	#pushregs_
10a5c     10 F0 07 F1 | 	add	ptra, #16
10a60     48 A8 BF FD | 	call	#_pop
10a64     FE 1E 02 F6 | 	mov	local01, result2
10a68     FF 20 02 F6 | 	mov	local02, result3
10a6c     A7 FA 61 FC | 	wrlong	result1, fp
10a70     04 4E 05 F1 | 	add	fp, #4
10a74     A7 1E 62 FC | 	wrlong	local01, fp
10a78     04 4E 05 F1 | 	add	fp, #4
10a7c     A7 20 62 FC | 	wrlong	local02, fp
10a80                 | ' 
10a80                 | ' t1=pop()
10a80                 | ' select case t1.result_type
10a80     08 4E 85 F1 | 	sub	fp, #8
10a84     1E 20 0E F2 | 	cmp	local02, #30 wz
10a88     14 00 90 AD |  if_e	jmp	#LR__1440
10a8c     1F 20 0E F2 | 	cmp	local02, #31 wz
10a90     20 00 90 AD |  if_e	jmp	#LR__1441
10a94     2B 20 0E F2 | 	cmp	local02, #43 wz
10a98     34 00 90 AD |  if_e	jmp	#LR__1442
10a9c     50 00 90 FD | 	jmp	#LR__1443
10aa0                 | LR__1440
10aa0     A7 12 02 FB | 	rdlong	arg01, fp
10aa4     00 14 06 F6 | 	mov	arg02, #0
10aa8     34 2F B1 FD | 	call	#__system___float_tointeger
10aac     A7 FA 61 FC | 	wrlong	result1, fp
10ab0     3C 00 90 FD | 	jmp	#LR__1443
10ab4                 | LR__1441
10ab4     A7 12 02 FB | 	rdlong	arg01, fp
10ab8     68 32 B1 FD | 	call	#__system____builtin_atof
10abc     FD 12 02 F6 | 	mov	arg01, result1
10ac0     00 14 06 F6 | 	mov	arg02, #0
10ac4     18 2F B1 FD | 	call	#__system___float_tointeger
10ac8     A7 FA 61 FC | 	wrlong	result1, fp
10acc     20 00 90 FD | 	jmp	#LR__1443
10ad0                 | LR__1442
10ad0     A7 12 02 FB | 	rdlong	arg01, fp
10ad4     4C A9 BF FD | 	call	#_convertstring
10ad8     FD 12 02 F6 | 	mov	arg01, result1
10adc     44 32 B1 FD | 	call	#__system____builtin_atof
10ae0     FD 12 02 F6 | 	mov	arg01, result1
10ae4     00 14 06 F6 | 	mov	arg02, #0
10ae8     F4 2E B1 FD | 	call	#__system___float_tointeger
10aec     A7 FA 61 FC | 	wrlong	result1, fp
10af0                 | LR__1443
10af0     08 4E 05 F1 | 	add	fp, #8
10af4     A7 38 68 FC | 	wrlong	#28, fp
10af8     08 4E 85 F1 | 	sub	fp, #8
10afc     A7 12 02 F6 | 	mov	arg01, fp
10b00     40 A8 BF FD | 	call	#_push
10b04     A7 F0 03 F6 | 	mov	ptra, fp
10b08     B2 00 A0 FD | 	call	#popregs_
10b0c                 | _do_int_ret
10b0c     2D 00 64 FD | 	ret
10b10                 | 
10b10                 | ' 
10b10                 | ' ' ----------------  left$
10b10                 | ' 
10b10                 | ' sub do_left
10b10                 | _do_left
10b10     00 4A 05 F6 | 	mov	COUNT_, #0
10b14     A8 00 A0 FD | 	call	#pushregs_
10b18     14 F0 07 F1 | 	add	ptra, #20
10b1c     4A 00 00 FF 
10b20     80 E4 05 F1 | 	add	objptr, ##38016
10b24     F2 16 02 FB | 	rdlong	arg03, objptr
10b28     0B 15 02 F6 | 	mov	arg02, arg03
10b2c     01 14 66 F0 | 	shl	arg02, #1
10b30     0B 15 02 F1 | 	add	arg02, arg03
10b34     02 14 66 F0 | 	shl	arg02, #2
10b38     03 00 00 FF 
10b3c     04 E4 85 F1 | 	sub	objptr, ##1540
10b40     F2 14 02 F1 | 	add	arg02, objptr
10b44     0A 17 02 FB | 	rdlong	arg03, arg02
10b48     0C 4E 05 F1 | 	add	fp, #12
10b4c     A7 16 62 FC | 	wrlong	arg03, fp
10b50                 | ' 
10b50                 | ' numpar=compiledline(lineptr_e).result.uresult
10b50                 | ' if numpar<>2  then print "left$: "; : printerror(39) : return
10b50     0C 4E 85 F1 | 	sub	fp, #12
10b54     02 16 0E F2 | 	cmp	arg03, #2 wz
10b58     47 00 00 FF 
10b5c     7C E4 85 F1 | 	sub	objptr, ##36476
10b60     3C 00 90 AD |  if_e	jmp	#LR__1450
10b64     00 12 06 F6 | 	mov	arg01, #0
10b68     5C 58 B1 FD | 	call	#__system___getiolock_0540
10b6c     FD 12 02 F6 | 	mov	arg01, result1
10b70     F0 FD B0 FD | 	call	#__system___lockmem
10b74     84 01 00 FF 
10b78     C1 15 06 F6 | 	mov	arg02, ##@LR__5483
10b7c     00 12 06 F6 | 	mov	arg01, #0
10b80     00 16 06 F6 | 	mov	arg03, #0
10b84     D0 0A B1 FD | 	call	#__system___basic_print_string
10b88     00 12 06 F6 | 	mov	arg01, #0
10b8c     38 58 B1 FD | 	call	#__system___getiolock_0540
10b90     FD 00 68 FC | 	wrlong	#0, result1
10b94     27 12 06 F6 | 	mov	arg01, #39
10b98     38 C8 B0 FD | 	call	#_printerror
10b9c     E8 00 90 FD | 	jmp	#LR__1453
10ba0                 | LR__1450
10ba0     08 A7 BF FD | 	call	#_pop
10ba4     FF 16 02 F6 | 	mov	arg03, result3
10ba8     A7 FA 61 FC | 	wrlong	result1, fp
10bac     04 4E 05 F1 | 	add	fp, #4
10bb0     A7 FC 61 FC | 	wrlong	result2, fp
10bb4     04 4E 05 F1 | 	add	fp, #4
10bb8     A7 16 62 FC | 	wrlong	arg03, fp
10bbc     08 4E 85 F1 | 	sub	fp, #8
10bc0     A7 12 02 F6 | 	mov	arg01, fp
10bc4     C8 A8 BF FD | 	call	#_converttoint
10bc8     FD 16 02 F6 | 	mov	arg03, result1
10bcc     10 4E 05 F1 | 	add	fp, #16
10bd0     A7 16 62 FC | 	wrlong	arg03, fp
10bd4     10 4E 85 F1 | 	sub	fp, #16
10bd8     D0 A6 BF FD | 	call	#_pop
10bdc     FF 16 02 F6 | 	mov	arg03, result3
10be0     A7 FA 61 FC | 	wrlong	result1, fp
10be4     04 4E 05 F1 | 	add	fp, #4
10be8     A7 FC 61 FC | 	wrlong	result2, fp
10bec     04 4E 05 F1 | 	add	fp, #4
10bf0     A7 16 62 FC | 	wrlong	arg03, fp
10bf4                 | ' t1=pop() : arg=converttoint(t1)
10bf4                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
10bf4     08 4E 85 F1 | 	sub	fp, #8
10bf8     2B 16 0E F2 | 	cmp	arg03, #43 wz
10bfc     18 00 90 5D |  if_ne	jmp	#LR__1451
10c00     A7 12 02 FB | 	rdlong	arg01, fp
10c04     1C A8 BF FD | 	call	#_convertstring
10c08     A7 FA 61 FC | 	wrlong	result1, fp
10c0c     08 4E 05 F1 | 	add	fp, #8
10c10     A7 3E 68 FC | 	wrlong	#31, fp
10c14     08 4E 85 F1 | 	sub	fp, #8
10c18                 | LR__1451
10c18                 | ' if t1.result_type<>result_string then print "left$: "; : printerror(15) : return 
10c18     08 4E 05 F1 | 	add	fp, #8
10c1c     A7 16 02 FB | 	rdlong	arg03, fp
10c20     08 4E 85 F1 | 	sub	fp, #8
10c24     1F 16 0E F2 | 	cmp	arg03, #31 wz
10c28     3C 00 90 AD |  if_e	jmp	#LR__1452
10c2c     00 12 06 F6 | 	mov	arg01, #0
10c30     94 57 B1 FD | 	call	#__system___getiolock_0540
10c34     FD 12 02 F6 | 	mov	arg01, result1
10c38     28 FD B0 FD | 	call	#__system___lockmem
10c3c     84 01 00 FF 
10c40     C9 15 06 F6 | 	mov	arg02, ##@LR__5484
10c44     00 12 06 F6 | 	mov	arg01, #0
10c48     00 16 06 F6 | 	mov	arg03, #0
10c4c     08 0A B1 FD | 	call	#__system___basic_print_string
10c50     00 12 06 F6 | 	mov	arg01, #0
10c54     70 57 B1 FD | 	call	#__system___getiolock_0540
10c58     FD 00 68 FC | 	wrlong	#0, result1
10c5c     0F 12 06 F6 | 	mov	arg01, #15
10c60     70 C7 B0 FD | 	call	#_printerror
10c64     20 00 90 FD | 	jmp	#LR__1453
10c68                 | LR__1452
10c68     A7 12 02 FB | 	rdlong	arg01, fp
10c6c     10 4E 05 F1 | 	add	fp, #16
10c70     A7 14 02 FB | 	rdlong	arg02, fp
10c74     10 4E 85 F1 | 	sub	fp, #16
10c78     64 1D B1 FD | 	call	#__system__Left_S
10c7c     A7 FA 61 FC | 	wrlong	result1, fp
10c80     A7 12 02 F6 | 	mov	arg01, fp
10c84     BC A6 BF FD | 	call	#_push
10c88                 | LR__1453
10c88     A7 F0 03 F6 | 	mov	ptra, fp
10c8c     B2 00 A0 FD | 	call	#popregs_
10c90                 | _do_left_ret
10c90     2D 00 64 FD | 	ret
10c94                 | 
10c94                 | ' 
10c94                 | ' ' ----------------  len
10c94                 | ' 
10c94                 | ' sub do_len
10c94                 | _do_len
10c94     02 4A 05 F6 | 	mov	COUNT_, #2
10c98     A8 00 A0 FD | 	call	#pushregs_
10c9c     14 F0 07 F1 | 	add	ptra, #20
10ca0     4A 00 00 FF 
10ca4     80 E4 05 F1 | 	add	objptr, ##38016
10ca8     F2 1E 02 FB | 	rdlong	local01, objptr
10cac     0F 17 02 F6 | 	mov	arg03, local01
10cb0     01 16 66 F0 | 	shl	arg03, #1
10cb4     0F 17 02 F1 | 	add	arg03, local01
10cb8     02 16 66 F0 | 	shl	arg03, #2
10cbc     03 00 00 FF 
10cc0     04 E4 85 F1 | 	sub	objptr, ##1540
10cc4     F2 16 02 F1 | 	add	arg03, objptr
10cc8     0B 17 02 FB | 	rdlong	arg03, arg03
10ccc     0C 4E 05 F1 | 	add	fp, #12
10cd0     A7 16 62 FC | 	wrlong	arg03, fp
10cd4                 | ' 
10cd4                 | ' numpar=compiledline(lineptr_e).result.uresult
10cd4                 | ' if numpar>1 orelse numpar=0 then print "len: "; : printerror(39) : return
10cd4     0C 4E 85 F1 | 	sub	fp, #12
10cd8     02 16 16 F2 | 	cmp	arg03, #2 wc
10cdc     47 00 00 FF 
10ce0     7C E4 85 F1 | 	sub	objptr, ##36476
10ce4     0C 4E 05 C1 |  if_b	add	fp, #12
10ce8     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
10cec     0C 4E 85 C1 |  if_b	sub	fp, #12
10cf0     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1460
10cf4     00 12 06 F6 | 	mov	arg01, #0
10cf8     CC 56 B1 FD | 	call	#__system___getiolock_0540
10cfc     FD 12 02 F6 | 	mov	arg01, result1
10d00     60 FC B0 FD | 	call	#__system___lockmem
10d04     84 01 00 FF 
10d08     D1 15 06 F6 | 	mov	arg02, ##@LR__5485
10d0c     00 12 06 F6 | 	mov	arg01, #0
10d10     00 16 06 F6 | 	mov	arg03, #0
10d14     40 09 B1 FD | 	call	#__system___basic_print_string
10d18     00 12 06 F6 | 	mov	arg01, #0
10d1c     A8 56 B1 FD | 	call	#__system___getiolock_0540
10d20     FD 00 68 FC | 	wrlong	#0, result1
10d24     27 12 06 F6 | 	mov	arg01, #39
10d28     A8 C6 B0 FD | 	call	#_printerror
10d2c     C4 00 90 FD | 	jmp	#LR__1465
10d30                 | LR__1460
10d30     78 A5 BF FD | 	call	#_pop
10d34     FF 16 02 F6 | 	mov	arg03, result3
10d38     A7 FA 61 FC | 	wrlong	result1, fp
10d3c     04 4E 05 F1 | 	add	fp, #4
10d40     A7 FC 61 FC | 	wrlong	result2, fp
10d44     04 4E 05 F1 | 	add	fp, #4
10d48     A7 16 62 FC | 	wrlong	arg03, fp
10d4c                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
10d4c     08 4E 85 F1 | 	sub	fp, #8
10d50     2B 16 0E F2 | 	cmp	arg03, #43 wz
10d54     18 00 90 5D |  if_ne	jmp	#LR__1461
10d58     A7 12 02 FB | 	rdlong	arg01, fp
10d5c     C4 A6 BF FD | 	call	#_convertstring
10d60     A7 FA 61 FC | 	wrlong	result1, fp
10d64     08 4E 05 F1 | 	add	fp, #8
10d68     A7 3E 68 FC | 	wrlong	#31, fp
10d6c     08 4E 85 F1 | 	sub	fp, #8
10d70                 | LR__1461
10d70                 | ' if t1.result_type<>result_string then print "len: "; : printerror(15) : return 
10d70     08 4E 05 F1 | 	add	fp, #8
10d74     A7 16 02 FB | 	rdlong	arg03, fp
10d78     08 4E 85 F1 | 	sub	fp, #8
10d7c     1F 16 0E F2 | 	cmp	arg03, #31 wz
10d80     3C 00 90 AD |  if_e	jmp	#LR__1462
10d84     00 12 06 F6 | 	mov	arg01, #0
10d88     3C 56 B1 FD | 	call	#__system___getiolock_0540
10d8c     FD 12 02 F6 | 	mov	arg01, result1
10d90     D0 FB B0 FD | 	call	#__system___lockmem
10d94     84 01 00 FF 
10d98     D7 15 06 F6 | 	mov	arg02, ##@LR__5486
10d9c     00 12 06 F6 | 	mov	arg01, #0
10da0     00 16 06 F6 | 	mov	arg03, #0
10da4     B0 08 B1 FD | 	call	#__system___basic_print_string
10da8     00 12 06 F6 | 	mov	arg01, #0
10dac     18 56 B1 FD | 	call	#__system___getiolock_0540
10db0     FD 00 68 FC | 	wrlong	#0, result1
10db4     0F 12 06 F6 | 	mov	arg01, #15
10db8     18 C6 B0 FD | 	call	#_printerror
10dbc     34 00 90 FD | 	jmp	#LR__1465
10dc0                 | LR__1462
10dc0     A7 12 02 FB | 	rdlong	arg01, fp
10dc4     09 21 02 F6 | 	mov	local02, arg01
10dc8     97 06 48 FB | 	callpa	#(@LR__1464-@LR__1463)>>2,fcache_load_ptr_
10dcc                 | LR__1463
10dcc     10 FB C9 FA | 	rdbyte	result1, local02 wz
10dd0     01 20 06 51 |  if_ne	add	local02, #1
10dd4     F4 FF 9F 5D |  if_ne	jmp	#LR__1463
10dd8                 | LR__1464
10dd8     09 21 82 F1 | 	sub	local02, arg01
10ddc     A7 20 62 FC | 	wrlong	local02, fp
10de0     08 4E 05 F1 | 	add	fp, #8
10de4     A7 38 68 FC | 	wrlong	#28, fp
10de8     08 4E 85 F1 | 	sub	fp, #8
10dec     A7 12 02 F6 | 	mov	arg01, fp
10df0     50 A5 BF FD | 	call	#_push
10df4                 | LR__1465
10df4     A7 F0 03 F6 | 	mov	ptra, fp
10df8     B2 00 A0 FD | 	call	#popregs_
10dfc                 | _do_len_ret
10dfc     2D 00 64 FD | 	ret
10e00                 | 
10e00                 | ' 
10e00                 | ' ' ----------------  list
10e00                 | ' 
10e00                 | ' sub do_list
10e00                 | _do_list
10e00     02 4A 05 F6 | 	mov	COUNT_, #2
10e04     A8 00 A0 FD | 	call	#pushregs_
10e08     B8 F0 07 F1 | 	add	ptra, #184
10e0c     04 4E 05 F1 | 	add	fp, #4
10e10     A7 00 68 FC | 	wrlong	#0, fp
10e14     04 4E 05 F1 | 	add	fp, #4
10e18     FF FF BF FF 
10e1c     A7 FE 6B FC | 	wrlong	##2147483647, fp
10e20     08 4E 85 F1 | 	sub	fp, #8
10e24     4A 00 00 FF 
10e28     80 E4 05 F1 | 	add	objptr, ##38016
10e2c     F2 1E 02 FB | 	rdlong	local01, objptr
10e30     0F 17 02 F6 | 	mov	arg03, local01
10e34     01 16 66 F0 | 	shl	arg03, #1
10e38     0F 17 02 F1 | 	add	arg03, local01
10e3c     02 16 66 F0 | 	shl	arg03, #2
10e40     03 00 00 FF 
10e44     04 E4 85 F1 | 	sub	objptr, ##1540
10e48     F2 16 02 F1 | 	add	arg03, objptr
10e4c     0B 17 02 FB | 	rdlong	arg03, arg03
10e50     A7 16 62 FC | 	wrlong	arg03, fp
10e54                 | ' 
10e54                 | ' startline=0 : endline=$7FFFFFFF
10e54                 | ' numpar=compiledline(lineptr_e).result.uresult
10e54                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
10e54     01 16 0E F2 | 	cmp	arg03, #1 wz
10e58     47 00 00 FF 
10e5c     7C E4 85 F1 | 	sub	objptr, ##36476
10e60     3C 00 90 5D |  if_ne	jmp	#LR__1470
10e64     44 A4 BF FD | 	call	#_pop
10e68     FF 1E 02 F6 | 	mov	local01, result3
10e6c     0C 4E 05 F1 | 	add	fp, #12
10e70     A7 FA 61 FC | 	wrlong	result1, fp
10e74     04 4E 05 F1 | 	add	fp, #4
10e78     A7 FC 61 FC | 	wrlong	result2, fp
10e7c     04 4E 05 F1 | 	add	fp, #4
10e80     A7 1E 62 FC | 	wrlong	local01, fp
10e84     08 4E 85 F1 | 	sub	fp, #8
10e88     A7 12 02 F6 | 	mov	arg01, fp
10e8c     0C 4E 85 F1 | 	sub	fp, #12
10e90     FC A5 BF FD | 	call	#_converttoint
10e94     04 4E 05 F1 | 	add	fp, #4
10e98     A7 FA 61 FC | 	wrlong	result1, fp
10e9c     04 4E 85 F1 | 	sub	fp, #4
10ea0                 | LR__1470
10ea0                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
10ea0     A7 16 02 FB | 	rdlong	arg03, fp
10ea4     02 16 0E F2 | 	cmp	arg03, #2 wz
10ea8     7C 00 90 5D |  if_ne	jmp	#LR__1471
10eac     FC A3 BF FD | 	call	#_pop
10eb0     FF 1E 02 F6 | 	mov	local01, result3
10eb4     0C 4E 05 F1 | 	add	fp, #12
10eb8     A7 FA 61 FC | 	wrlong	result1, fp
10ebc     04 4E 05 F1 | 	add	fp, #4
10ec0     A7 FC 61 FC | 	wrlong	result2, fp
10ec4     04 4E 05 F1 | 	add	fp, #4
10ec8     A7 1E 62 FC | 	wrlong	local01, fp
10ecc     08 4E 85 F1 | 	sub	fp, #8
10ed0     A7 12 02 F6 | 	mov	arg01, fp
10ed4     0C 4E 85 F1 | 	sub	fp, #12
10ed8     B4 A5 BF FD | 	call	#_converttoint
10edc     FD 1E 02 F6 | 	mov	local01, result1
10ee0     08 4E 05 F1 | 	add	fp, #8
10ee4     A7 1E 62 FC | 	wrlong	local01, fp
10ee8     08 4E 85 F1 | 	sub	fp, #8
10eec     BC A3 BF FD | 	call	#_pop
10ef0     FF 1E 02 F6 | 	mov	local01, result3
10ef4     0C 4E 05 F1 | 	add	fp, #12
10ef8     A7 FA 61 FC | 	wrlong	result1, fp
10efc     04 4E 05 F1 | 	add	fp, #4
10f00     A7 FC 61 FC | 	wrlong	result2, fp
10f04     04 4E 05 F1 | 	add	fp, #4
10f08     A7 1E 62 FC | 	wrlong	local01, fp
10f0c     08 4E 85 F1 | 	sub	fp, #8
10f10     A7 12 02 F6 | 	mov	arg01, fp
10f14     0C 4E 85 F1 | 	sub	fp, #12
10f18     74 A5 BF FD | 	call	#_converttoint
10f1c     04 4E 05 F1 | 	add	fp, #4
10f20     A7 FA 61 FC | 	wrlong	result1, fp
10f24     04 4E 85 F1 | 	sub	fp, #4
10f28                 | LR__1471
10f28                 | ' 
10f28                 | ' 
10f28                 | ' print
10f28     00 12 06 F6 | 	mov	arg01, #0
10f2c     98 54 B1 FD | 	call	#__system___getiolock_0540
10f30     FD 12 02 F6 | 	mov	arg01, result1
10f34     2C FA B0 FD | 	call	#__system___lockmem
10f38     00 12 06 F6 | 	mov	arg01, #0
10f3c     0A 14 06 F6 | 	mov	arg02, #10
10f40     00 16 06 F6 | 	mov	arg03, #0
10f44     B8 06 B1 FD | 	call	#__system___basic_print_char
10f48     00 12 06 F6 | 	mov	arg01, #0
10f4c     78 54 B1 FD | 	call	#__system___getiolock_0540
10f50     FD 00 68 FC | 	wrlong	#0, result1
10f54     4A 00 00 FF 
10f58     88 E4 05 F1 | 	add	objptr, ##38024
10f5c     F2 20 02 FB | 	rdlong	local02, objptr
10f60     07 00 00 FF 
10f64     98 E5 05 F1 | 	add	objptr, ##3992
10f68     F2 20 62 FC | 	wrlong	local02, objptr
10f6c     52 00 00 FF 
10f70     20 E4 85 F1 | 	sub	objptr, ##42016
10f74                 | ' do 
10f74                 | LR__1472
10f74     20 4E 05 F1 | 	add	fp, #32
10f78     A7 12 02 F6 | 	mov	arg01, fp
10f7c     20 4E 85 F1 | 	sub	fp, #32
10f80     52 00 00 FF 
10f84     20 E4 05 F1 | 	add	objptr, ##42016
10f88     F2 14 02 FB | 	rdlong	arg02, objptr
10f8c     18 16 06 F6 | 	mov	arg03, #24
10f90     46 00 00 FF 
10f94     54 E5 85 F1 | 	sub	objptr, ##36180
10f98     88 ED B0 FD | 	call	#_psram_spin2_read1
10f9c     0B 00 00 FF 
10fa0     CC E4 85 F1 | 	sub	objptr, ##5836
10fa4                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart : waitms 7000 : waitms 7000 : waitms 7000
10fa4                 | '   
10fa4                 | '   if header(0)<> $FFFFFFFF then
10fa4     20 4E 05 F1 | 	add	fp, #32
10fa8     A7 20 02 FB | 	rdlong	local02, fp
10fac     20 4E 85 F1 | 	sub	fp, #32
10fb0     FF FF 7F FF 
10fb4     FF 21 0E F2 | 	cmp	local02, ##-1 wz
10fb8     A8 00 90 AD |  if_e	jmp	#LR__1474
10fbc     38 4E 05 F1 | 	add	fp, #56
10fc0     3F 16 06 F6 | 	mov	arg03, #63
10fc4     28 16 62 FD | 	setq	arg03
10fc8     A7 00 68 FC | 	wrlong	#0, fp
10fcc     A7 12 02 F6 | 	mov	arg01, fp
10fd0     10 4E 85 F1 | 	sub	fp, #16
10fd4     A7 14 02 FB | 	rdlong	arg02, fp
10fd8     04 4E 05 F1 | 	add	fp, #4
10fdc     A7 16 02 FB | 	rdlong	arg03, fp
10fe0     2C 4E 85 F1 | 	sub	fp, #44
10fe4     0B 00 00 FF 
10fe8     CC E4 05 F1 | 	add	objptr, ##5836
10fec     34 ED B0 FD | 	call	#_psram_spin2_read1
10ff0     0B 00 00 FF 
10ff4     CC E4 85 F1 | 	sub	objptr, ##5836
10ff8                 | '     longfill(linebuf,0,64)
10ff8                 | '     psram.read1(varptr(linebuf),header(2),header(3))
10ff8                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
10ff8     20 4E 05 F1 | 	add	fp, #32
10ffc     A7 20 02 FB | 	rdlong	local02, fp
11000     1C 4E 85 F1 | 	sub	fp, #28
11004     A7 1E 02 FB | 	rdlong	local01, fp
11008     04 4E 85 F1 | 	sub	fp, #4
1100c     0F 21 52 F2 | 	cmps	local02, local01 wc
11010     30 00 90 CD |  if_b	jmp	#LR__1473
11014     20 4E 05 F1 | 	add	fp, #32
11018     A7 20 02 FB | 	rdlong	local02, fp
1101c     18 4E 85 F1 | 	sub	fp, #24
11020     A7 16 02 FB | 	rdlong	arg03, fp
11024     08 4E 85 F1 | 	sub	fp, #8
11028     0B 21 5A F2 | 	cmps	local02, arg03 wcz
1102c     14 00 90 1D |  if_a	jmp	#LR__1473
11030     38 4E 05 F1 | 	add	fp, #56
11034     A7 12 02 F6 | 	mov	arg01, fp
11038     38 4E 85 F1 | 	sub	fp, #56
1103c                 | ' 
1103c                 | ' write(text)
1103c     08 E4 B0 FD | 	call	#_hg010b_spin2_write
11040                 | ' crlf
11040     04 E9 B0 FD | 	call	#_hg010b_spin2_crlf
11044                 | LR__1473
11044     34 4E 05 F1 | 	add	fp, #52
11048     A7 20 02 FB | 	rdlong	local02, fp
1104c     34 4E 85 F1 | 	sub	fp, #52
11050     52 00 00 FF 
11054     20 E4 05 F1 | 	add	objptr, ##42016
11058     F2 20 62 FC | 	wrlong	local02, objptr
1105c     52 00 00 FF 
11060     20 E4 85 F1 | 	sub	objptr, ##42016
11064                 | LR__1474
11064     34 4E 05 F1 | 	add	fp, #52
11068     A7 20 02 FB | 	rdlong	local02, fp
1106c     34 4E 85 F1 | 	sub	fp, #52
11070     FF FF 3F FF 
11074     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
11078     20 4E 05 51 |  if_ne	add	fp, #32
1107c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
11080     20 4E 85 51 |  if_ne	sub	fp, #32
11084     FF FF 7F 5F 
11088     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
1108c     E4 FE 9F 5D |  if_ne	jmp	#LR__1472
11090     A7 F0 03 F6 | 	mov	ptra, fp
11094     B2 00 A0 FD | 	call	#popregs_
11098                 | _do_list_ret
11098     2D 00 64 FD | 	ret
1109c                 | 
1109c                 | ' 
1109c                 | ' '-------------------- load
1109c                 | ' 
1109c                 | ' sub do_load(amode=0 as integer)  
1109c                 | _do_load
1109c     01 4A 05 F6 | 	mov	COUNT_, #1
110a0     A8 00 A0 FD | 	call	#pushregs_
110a4     AC F0 07 F1 | 	add	ptra, #172
110a8     A7 12 62 FC | 	wrlong	arg01, fp
110ac     4A 00 00 FF 
110b0     80 E4 05 F1 | 	add	objptr, ##38016
110b4     F2 14 02 FB | 	rdlong	arg02, objptr
110b8     0A 13 02 F6 | 	mov	arg01, arg02
110bc     01 12 66 F0 | 	shl	arg01, #1
110c0     0A 13 02 F1 | 	add	arg01, arg02
110c4     02 12 66 F0 | 	shl	arg01, #2
110c8     03 00 00 FF 
110cc     04 E4 85 F1 | 	sub	objptr, ##1540
110d0     F2 12 02 F1 | 	add	arg01, objptr
110d4     09 15 02 FB | 	rdlong	arg02, arg01
110d8     1C 4E 05 F1 | 	add	fp, #28
110dc     A7 14 62 FC | 	wrlong	arg02, fp
110e0     8C 4E 05 F1 | 	add	fp, #140
110e4     A7 12 02 F6 | 	mov	arg01, fp
110e8     47 00 00 FF 
110ec     7C E4 85 F1 | 	sub	objptr, ##36476
110f0     80 4E 85 F1 | 	sub	fp, #128
110f4     09 4F 61 FC | 	wrlong	fp, arg01
110f8                 | ' numpar=compiledline(lineptr_e).result.uresult
110f8                 | ' lpoke varptr(line2$),varptr(line2)
110f8                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
110f8     0C 4E 85 F1 | 	sub	fp, #12
110fc     A7 1E 02 FB | 	rdlong	local01, fp
11100     1C 4E 85 F1 | 	sub	fp, #28
11104     01 1E 56 F2 | 	cmps	local01, #1 wc
11108     24 00 90 CD |  if_b	jmp	#LR__1480
1110c     9C A1 BF FD | 	call	#_pop
11110     04 4E 05 F1 | 	add	fp, #4
11114     A7 FA 61 FC | 	wrlong	result1, fp
11118     04 4E 05 F1 | 	add	fp, #4
1111c     A7 FC 61 FC | 	wrlong	result2, fp
11120     04 4E 05 F1 | 	add	fp, #4
11124     A7 FE 61 FC | 	wrlong	result3, fp
11128     0C 4E 85 F1 | 	sub	fp, #12
1112c     28 00 90 FD | 	jmp	#LR__1481
11130                 | LR__1480
11130     51 00 00 FF 
11134     D8 E5 05 F1 | 	add	objptr, ##41944
11138     F2 1E 02 FB | 	rdlong	local01, objptr
1113c     51 00 00 FF 
11140     D8 E5 85 F1 | 	sub	objptr, ##41944
11144     04 4E 05 F1 | 	add	fp, #4
11148     A7 1E 62 FC | 	wrlong	local01, fp
1114c     08 4E 05 F1 | 	add	fp, #8
11150     A7 3E 68 FC | 	wrlong	#31, fp
11154     0C 4E 85 F1 | 	sub	fp, #12
11158                 | LR__1481
11158                 | ' 'print "popped "; t1.result.uresult, t1.result_type
11158                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
11158     0C 4E 05 F1 | 	add	fp, #12
1115c     A7 1E 02 FB | 	rdlong	local01, fp
11160     0C 4E 85 F1 | 	sub	fp, #12
11164     2B 1E 0E F2 | 	cmp	local01, #43 wz
11168     24 00 90 5D |  if_ne	jmp	#LR__1482
1116c     04 4E 05 F1 | 	add	fp, #4
11170     A7 12 02 FB | 	rdlong	arg01, fp
11174     04 4E 85 F1 | 	sub	fp, #4
11178     A8 A2 BF FD | 	call	#_convertstring
1117c     04 4E 05 F1 | 	add	fp, #4
11180     A7 FA 61 FC | 	wrlong	result1, fp
11184     08 4E 05 F1 | 	add	fp, #8
11188     A7 3E 68 FC | 	wrlong	#31, fp
1118c     0C 4E 85 F1 | 	sub	fp, #12
11190                 | LR__1482
11190                 | ' if t1.result_type=result_string then
11190     0C 4E 05 F1 | 	add	fp, #12
11194     A7 1E 02 FB | 	rdlong	local01, fp
11198     0C 4E 85 F1 | 	sub	fp, #12
1119c     1F 1E 0E F2 | 	cmp	local01, #31 wz
111a0     E0 02 90 5D |  if_ne	jmp	#LR__1488
111a4                 | '   if amode<>1234 then do_new
111a4     A7 1E 02 FB | 	rdlong	local01, fp
111a8     02 00 00 FF 
111ac     D2 1E 0E F2 | 	cmp	local01, ##1234 wz
111b0     F4 07 B0 5D |  if_ne	call	#_do_new
111b4                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
111b4     04 4E 05 F1 | 	add	fp, #4
111b8     A7 12 02 FB | 	rdlong	arg01, fp
111bc     04 4E 85 F1 | 	sub	fp, #4
111c0     84 01 00 FF 
111c4     DD 15 06 F6 | 	mov	arg02, ##@LR__5487
111c8     C0 F7 B0 FD | 	call	#__system___string_cmp
111cc     00 FA 0D F2 | 	cmp	result1, #0 wz
111d0     24 00 90 5D |  if_ne	jmp	#LR__1483
111d4     51 00 00 FF 
111d8     D8 E5 05 F1 | 	add	objptr, ##41944
111dc     F2 1E 02 FB | 	rdlong	local01, objptr
111e0     51 00 00 FF 
111e4     D8 E5 85 F1 | 	sub	objptr, ##41944
111e8     04 4E 05 F1 | 	add	fp, #4
111ec     A7 1E 62 FC | 	wrlong	local01, fp
111f0     04 4E 85 F1 | 	sub	fp, #4
111f4     20 00 90 FD | 	jmp	#LR__1484
111f8                 | LR__1483
111f8     04 4E 05 F1 | 	add	fp, #4
111fc     A7 1E 02 FB | 	rdlong	local01, fp
11200     04 4E 85 F1 | 	sub	fp, #4
11204     51 00 00 FF 
11208     D8 E5 05 F1 | 	add	objptr, ##41944
1120c     F2 1E 62 FC | 	wrlong	local01, objptr
11210     51 00 00 FF 
11214     D8 E5 85 F1 | 	sub	objptr, ##41944
11218                 | LR__1484
11218                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
11218     09 12 06 F6 | 	mov	arg01, #9
1121c     D8 47 B1 FD | 	call	#__system__close
11220     09 1E 06 F6 | 	mov	local01, #9
11224     4A 00 00 FF 
11228     94 E4 05 F1 | 	add	objptr, ##38036
1122c     F2 12 02 FB | 	rdlong	arg01, objptr
11230     4A 00 00 FF 
11234     94 E4 85 F1 | 	sub	objptr, ##38036
11238     84 01 00 FF 
1123c     DE 15 06 F6 | 	mov	arg02, ##@LR__5488
11240     7C F7 B0 FD | 	call	#__system___string_concat
11244     FD 12 02 F6 | 	mov	arg01, result1
11248     04 4E 05 F1 | 	add	fp, #4
1124c     A7 14 02 FB | 	rdlong	arg02, fp
11250     04 4E 85 F1 | 	sub	fp, #4
11254     68 F7 B0 FD | 	call	#__system___string_concat
11258     FD 14 02 F6 | 	mov	arg02, result1
1125c     0F 13 02 F6 | 	mov	arg01, local01
11260     00 16 06 F6 | 	mov	arg03, #0
11264     00 03 B1 FD | 	call	#__system___basic_open_string
11268     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1126c     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
11270     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
11274     14 4E 05 F1 | 	add	fp, #20
11278     A7 FA 61 FC | 	wrlong	result1, fp
1127c                 | '   r=geterr() 
1127c                 | '   if r then 
1127c     14 4E 85 F1 | 	sub	fp, #20
11280     50 01 90 AD |  if_e	jmp	#LR__1486
11284                 | '     close #9: open currentdir$+"/"+t1.result.sresult+".bas" for input as #9 
11284     09 12 06 F6 | 	mov	arg01, #9
11288     6C 47 B1 FD | 	call	#__system__close
1128c     09 1E 06 F6 | 	mov	local01, #9
11290     4A 00 00 FF 
11294     94 E4 05 F1 | 	add	objptr, ##38036
11298     F2 12 02 FB | 	rdlong	arg01, objptr
1129c     4A 00 00 FF 
112a0     94 E4 85 F1 | 	sub	objptr, ##38036
112a4     84 01 00 FF 
112a8     E0 15 06 F6 | 	mov	arg02, ##@LR__5489
112ac     10 F7 B0 FD | 	call	#__system___string_concat
112b0     FD 12 02 F6 | 	mov	arg01, result1
112b4     04 4E 05 F1 | 	add	fp, #4
112b8     A7 14 02 FB | 	rdlong	arg02, fp
112bc     04 4E 85 F1 | 	sub	fp, #4
112c0     FC F6 B0 FD | 	call	#__system___string_concat
112c4     FD 12 02 F6 | 	mov	arg01, result1
112c8     84 01 00 FF 
112cc     E2 15 06 F6 | 	mov	arg02, ##@LR__5490
112d0     EC F6 B0 FD | 	call	#__system___string_concat
112d4     FD 14 02 F6 | 	mov	arg02, result1
112d8     0F 13 02 F6 | 	mov	arg01, local01
112dc     00 16 06 F6 | 	mov	arg03, #0
112e0     84 02 B1 FD | 	call	#__system___basic_open_string
112e4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
112e8     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
112ec     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
112f0     14 4E 05 F1 | 	add	fp, #20
112f4     A7 FA 61 FC | 	wrlong	result1, fp
112f8                 | '     r=geterr() 
112f8                 | '     if r then 
112f8     14 4E 85 F1 | 	sub	fp, #20
112fc     A0 00 90 AD |  if_e	jmp	#LR__1485
11300                 | '       print "System error ";r;": ";strerror$(r) :close #9 : return
11300     00 12 06 F6 | 	mov	arg01, #0
11304     C0 50 B1 FD | 	call	#__system___getiolock_0540
11308     FD 12 02 F6 | 	mov	arg01, result1
1130c     54 F6 B0 FD | 	call	#__system___lockmem
11310     84 01 00 FF 
11314     E7 15 06 F6 | 	mov	arg02, ##@LR__5491
11318     00 12 06 F6 | 	mov	arg01, #0
1131c     00 16 06 F6 | 	mov	arg03, #0
11320     34 03 B1 FD | 	call	#__system___basic_print_string
11324     14 4E 05 F1 | 	add	fp, #20
11328     A7 14 02 FB | 	rdlong	arg02, fp
1132c     14 4E 85 F1 | 	sub	fp, #20
11330     00 12 06 F6 | 	mov	arg01, #0
11334     00 16 06 F6 | 	mov	arg03, #0
11338     0A 18 06 F6 | 	mov	arg04, #10
1133c     5C 03 B1 FD | 	call	#__system___basic_print_integer
11340     84 01 00 FF 
11344     F5 15 06 F6 | 	mov	arg02, ##@LR__5492
11348     00 12 06 F6 | 	mov	arg01, #0
1134c     00 16 06 F6 | 	mov	arg03, #0
11350     04 03 B1 FD | 	call	#__system___basic_print_string
11354     00 1E 06 F6 | 	mov	local01, #0
11358     14 4E 05 F1 | 	add	fp, #20
1135c     A7 12 02 FB | 	rdlong	arg01, fp
11360     14 4E 85 F1 | 	sub	fp, #20
11364     C4 1C B1 FD | 	call	#__system___strerror
11368     FD 14 02 F6 | 	mov	arg02, result1
1136c     0F 13 02 F6 | 	mov	arg01, local01
11370     00 16 06 F6 | 	mov	arg03, #0
11374     E0 02 B1 FD | 	call	#__system___basic_print_string
11378     00 12 06 F6 | 	mov	arg01, #0
1137c     0A 14 06 F6 | 	mov	arg02, #10
11380     00 16 06 F6 | 	mov	arg03, #0
11384     78 02 B1 FD | 	call	#__system___basic_print_char
11388     00 12 06 F6 | 	mov	arg01, #0
1138c     38 50 B1 FD | 	call	#__system___getiolock_0540
11390     FD 00 68 FC | 	wrlong	#0, result1
11394     09 12 06 F6 | 	mov	arg01, #9
11398     5C 46 B1 FD | 	call	#__system__close
1139c     7C 01 90 FD | 	jmp	#LR__1490
113a0                 | LR__1485
113a0     51 00 00 FF 
113a4     D8 E5 05 F1 | 	add	objptr, ##41944
113a8     F2 12 02 FB | 	rdlong	arg01, objptr
113ac     51 00 00 FF 
113b0     D8 E5 85 F1 | 	sub	objptr, ##41944
113b4     84 01 00 FF 
113b8     F8 15 06 F6 | 	mov	arg02, ##@LR__5493
113bc     00 F6 B0 FD | 	call	#__system___string_concat
113c0     51 00 00 FF 
113c4     D8 E5 05 F1 | 	add	objptr, ##41944
113c8     F2 FA 61 FC | 	wrlong	result1, objptr
113cc     51 00 00 FF 
113d0     D8 E5 85 F1 | 	sub	objptr, ##41944
113d4                 | LR__1486
113d4                 | '   close #9: open currentdir$+"/"+loadname for input as #9
113d4     09 12 06 F6 | 	mov	arg01, #9
113d8     1C 46 B1 FD | 	call	#__system__close
113dc     09 1E 06 F6 | 	mov	local01, #9
113e0     4A 00 00 FF 
113e4     94 E4 05 F1 | 	add	objptr, ##38036
113e8     F2 12 02 FB | 	rdlong	arg01, objptr
113ec     4A 00 00 FF 
113f0     94 E4 85 F1 | 	sub	objptr, ##38036
113f4     84 01 00 FF 
113f8     FD 15 06 F6 | 	mov	arg02, ##@LR__5494
113fc     C0 F5 B0 FD | 	call	#__system___string_concat
11400     FD 12 02 F6 | 	mov	arg01, result1
11404     51 00 00 FF 
11408     D8 E5 05 F1 | 	add	objptr, ##41944
1140c     F2 14 02 FB | 	rdlong	arg02, objptr
11410     51 00 00 FF 
11414     D8 E5 85 F1 | 	sub	objptr, ##41944
11418     A4 F5 B0 FD | 	call	#__system___string_concat
1141c     FD 14 02 F6 | 	mov	arg02, result1
11420     0F 13 02 F6 | 	mov	arg01, local01
11424     00 16 06 F6 | 	mov	arg03, #0
11428     3C 01 B1 FD | 	call	#__system___basic_open_string
1142c                 | '   do
1142c                 | LR__1487
1142c     09 12 06 F6 | 	mov	arg01, #9
11430     3C F7 B0 FD | 	call	#__system___basic_read_line
11434     FD 1E 02 F6 | 	mov	local01, result1
11438     37 00 00 FF 
1143c     1C E4 05 F1 | 	add	objptr, ##28188
11440     F2 1E 62 FC | 	wrlong	local01, objptr
11444     37 00 00 FF 
11448     1C E4 85 F1 | 	sub	objptr, ##28188
1144c     28 02 BF FD | 	call	#_interpret
11450     37 00 00 FF 
11454     1C E4 05 F1 | 	add	objptr, ##28188
11458     F2 12 02 FB | 	rdlong	arg01, objptr
1145c     37 00 00 FF 
11460     1C E4 85 F1 | 	sub	objptr, ##28188
11464     84 01 00 FF 
11468     FF 15 06 F6 | 	mov	arg02, ##@LR__5495
1146c     1C F5 B0 FD | 	call	#__system___string_cmp
11470     00 FA 0D F2 | 	cmp	result1, #0 wz
11474     B4 FF 9F 5D |  if_ne	jmp	#LR__1487
11478                 | '   close #9   
11478     09 12 06 F6 | 	mov	arg01, #9
1147c     78 45 B1 FD | 	call	#__system__close
11480     08 00 90 FD | 	jmp	#LR__1489
11484                 | LR__1488
11484     1E 12 06 F6 | 	mov	arg01, #30
11488     48 BF B0 FD | 	call	#_printerror
1148c                 | LR__1489
1148c                 | ' print "Loaded ";currentdir$+"/"+loadname
1148c     00 12 06 F6 | 	mov	arg01, #0
11490     34 4F B1 FD | 	call	#__system___getiolock_0540
11494     FD 12 02 F6 | 	mov	arg01, result1
11498     C8 F4 B0 FD | 	call	#__system___lockmem
1149c     85 01 00 FF 
114a0     00 14 06 F6 | 	mov	arg02, ##@LR__5496
114a4     00 12 06 F6 | 	mov	arg01, #0
114a8     00 16 06 F6 | 	mov	arg03, #0
114ac     A8 01 B1 FD | 	call	#__system___basic_print_string
114b0     00 1E 06 F6 | 	mov	local01, #0
114b4     4A 00 00 FF 
114b8     94 E4 05 F1 | 	add	objptr, ##38036
114bc     F2 12 02 FB | 	rdlong	arg01, objptr
114c0     4A 00 00 FF 
114c4     94 E4 85 F1 | 	sub	objptr, ##38036
114c8     85 01 00 FF 
114cc     08 14 06 F6 | 	mov	arg02, ##@LR__5497
114d0     EC F4 B0 FD | 	call	#__system___string_concat
114d4     FD 12 02 F6 | 	mov	arg01, result1
114d8     51 00 00 FF 
114dc     D8 E5 05 F1 | 	add	objptr, ##41944
114e0     F2 14 02 FB | 	rdlong	arg02, objptr
114e4     51 00 00 FF 
114e8     D8 E5 85 F1 | 	sub	objptr, ##41944
114ec     D0 F4 B0 FD | 	call	#__system___string_concat
114f0     FD 14 02 F6 | 	mov	arg02, result1
114f4     0F 13 02 F6 | 	mov	arg01, local01
114f8     00 16 06 F6 | 	mov	arg03, #0
114fc     58 01 B1 FD | 	call	#__system___basic_print_string
11500     00 12 06 F6 | 	mov	arg01, #0
11504     0A 14 06 F6 | 	mov	arg02, #10
11508     00 16 06 F6 | 	mov	arg03, #0
1150c     F0 00 B1 FD | 	call	#__system___basic_print_char
11510     00 12 06 F6 | 	mov	arg01, #0
11514     B0 4E B1 FD | 	call	#__system___getiolock_0540
11518     FD 00 68 FC | 	wrlong	#0, result1
1151c                 | LR__1490
1151c     A7 F0 03 F6 | 	mov	ptra, fp
11520     B2 00 A0 FD | 	call	#popregs_
11524                 | _do_load_ret
11524     2D 00 64 FD | 	ret
11528                 | 
11528                 | ' 
11528                 | ' '-------------------- log
11528                 | ' 
11528                 | ' sub do_log
11528                 | _do_log
11528     01 4A 05 F6 | 	mov	COUNT_, #1
1152c     A8 00 A0 FD | 	call	#pushregs_
11530     14 F0 07 F1 | 	add	ptra, #20
11534     4A 00 00 FF 
11538     80 E4 05 F1 | 	add	objptr, ##38016
1153c     F2 1E 02 FB | 	rdlong	local01, objptr
11540     0F 17 02 F6 | 	mov	arg03, local01
11544     01 16 66 F0 | 	shl	arg03, #1
11548     0F 17 02 F1 | 	add	arg03, local01
1154c     02 16 66 F0 | 	shl	arg03, #2
11550     03 00 00 FF 
11554     04 E4 85 F1 | 	sub	objptr, ##1540
11558     F2 16 02 F1 | 	add	arg03, objptr
1155c     0B 17 0A FB | 	rdlong	arg03, arg03 wz
11560     0C 4E 05 F1 | 	add	fp, #12
11564     A7 16 62 FC | 	wrlong	arg03, fp
11568                 | ' 
11568                 | ' numpar=compiledline(lineptr_e).result.uresult
11568                 | ' if numpar=0 orelse numpar>2 then print "log: "; : printerror(39) : return
11568     0C 4E 85 F1 | 	sub	fp, #12
1156c     47 00 00 FF 
11570     7C E4 85 F1 | 	sub	objptr, ##36476
11574     0C 4E 05 51 |  if_ne	add	fp, #12
11578     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1157c     0C 4E 85 51 |  if_ne	sub	fp, #12
11580     03 1E 16 52 |  if_ne	cmp	local01, #3 wc
11584     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1500
11588     00 12 06 F6 | 	mov	arg01, #0
1158c     38 4E B1 FD | 	call	#__system___getiolock_0540
11590     FD 12 02 F6 | 	mov	arg01, result1
11594     CC F3 B0 FD | 	call	#__system___lockmem
11598     85 01 00 FF 
1159c     0A 14 06 F6 | 	mov	arg02, ##@LR__5498
115a0     00 12 06 F6 | 	mov	arg01, #0
115a4     00 16 06 F6 | 	mov	arg03, #0
115a8     AC 00 B1 FD | 	call	#__system___basic_print_string
115ac     00 12 06 F6 | 	mov	arg01, #0
115b0     14 4E B1 FD | 	call	#__system___getiolock_0540
115b4     FD 00 68 FC | 	wrlong	#0, result1
115b8     27 12 06 F6 | 	mov	arg01, #39
115bc     14 BE B0 FD | 	call	#_printerror
115c0     D0 00 90 FD | 	jmp	#LR__1503
115c4                 | LR__1500
115c4                 | ' if numpar=2 then 
115c4     0C 4E 05 F1 | 	add	fp, #12
115c8     A7 1E 02 FB | 	rdlong	local01, fp
115cc     0C 4E 85 F1 | 	sub	fp, #12
115d0     02 1E 0E F2 | 	cmp	local01, #2 wz
115d4     48 00 90 5D |  if_ne	jmp	#LR__1501
115d8     D0 9C BF FD | 	call	#_pop
115dc     FF 1E 02 F6 | 	mov	local01, result3
115e0     A7 FA 61 FC | 	wrlong	result1, fp
115e4     04 4E 05 F1 | 	add	fp, #4
115e8     A7 FC 61 FC | 	wrlong	result2, fp
115ec     04 4E 05 F1 | 	add	fp, #4
115f0     A7 1E 62 FC | 	wrlong	local01, fp
115f4     08 4E 85 F1 | 	sub	fp, #8
115f8     A7 12 02 F6 | 	mov	arg01, fp
115fc     4C 9F BF FD | 	call	#_converttofloat
11600     FD 14 02 F6 | 	mov	arg02, result1
11604     FC 16 20 FF 
11608     54 12 06 F6 | 	mov	arg01, ##1076754516
1160c     D8 2E B1 FD | 	call	#__system____builtin_logbase
11610     10 4E 05 F1 | 	add	fp, #16
11614     A7 FA 61 FC | 	wrlong	result1, fp
11618     10 4E 85 F1 | 	sub	fp, #16
1161c     10 00 90 FD | 	jmp	#LR__1502
11620                 | LR__1501
11620     10 4E 05 F1 | 	add	fp, #16
11624     00 C0 9F FF 
11628     A7 00 68 FC | 	wrlong	##1065353216, fp
1162c     10 4E 85 F1 | 	sub	fp, #16
11630                 | LR__1502
11630     78 9C BF FD | 	call	#_pop
11634     FF 1E 02 F6 | 	mov	local01, result3
11638     A7 FA 61 FC | 	wrlong	result1, fp
1163c     04 4E 05 F1 | 	add	fp, #4
11640     A7 FC 61 FC | 	wrlong	result2, fp
11644     04 4E 05 F1 | 	add	fp, #4
11648     A7 1E 62 FC | 	wrlong	local01, fp
1164c     08 4E 85 F1 | 	sub	fp, #8
11650     A7 12 02 F6 | 	mov	arg01, fp
11654     F4 9E BF FD | 	call	#_converttofloat
11658     FD 14 02 F6 | 	mov	arg02, result1
1165c     FC 16 20 FF 
11660     54 12 06 F6 | 	mov	arg01, ##1076754516
11664     80 2E B1 FD | 	call	#__system____builtin_logbase
11668     FD 12 02 F6 | 	mov	arg01, result1
1166c     10 4E 05 F1 | 	add	fp, #16
11670     A7 14 02 FB | 	rdlong	arg02, fp
11674     10 4E 85 F1 | 	sub	fp, #16
11678     A0 20 B1 FD | 	call	#__system___float_div
1167c     A7 FA 61 FC | 	wrlong	result1, fp
11680     08 4E 05 F1 | 	add	fp, #8
11684     A7 3C 68 FC | 	wrlong	#30, fp
11688     08 4E 85 F1 | 	sub	fp, #8
1168c     A7 12 02 F6 | 	mov	arg01, fp
11690     B0 9C BF FD | 	call	#_push
11694                 | LR__1503
11694     A7 F0 03 F6 | 	mov	ptra, fp
11698     B2 00 A0 FD | 	call	#popregs_
1169c                 | _do_log_ret
1169c     2D 00 64 FD | 	ret
116a0                 | 
116a0                 | ' 
116a0                 | ' '-------------------- mid$
116a0                 | ' 
116a0                 | ' sub do_mid
116a0                 | _do_mid
116a0     00 4A 05 F6 | 	mov	COUNT_, #0
116a4     A8 00 A0 FD | 	call	#pushregs_
116a8     18 F0 07 F1 | 	add	ptra, #24
116ac     4A 00 00 FF 
116b0     80 E4 05 F1 | 	add	objptr, ##38016
116b4     F2 16 02 FB | 	rdlong	arg03, objptr
116b8     0B 15 02 F6 | 	mov	arg02, arg03
116bc     01 14 66 F0 | 	shl	arg02, #1
116c0     0B 15 02 F1 | 	add	arg02, arg03
116c4     02 14 66 F0 | 	shl	arg02, #2
116c8     03 00 00 FF 
116cc     04 E4 85 F1 | 	sub	objptr, ##1540
116d0     F2 14 02 F1 | 	add	arg02, objptr
116d4     0A 17 02 FB | 	rdlong	arg03, arg02
116d8     0C 4E 05 F1 | 	add	fp, #12
116dc     A7 16 62 FC | 	wrlong	arg03, fp
116e0                 | ' 
116e0                 | ' numpar=compiledline(lineptr_e).result.uresult
116e0                 | ' if numpar<>3  then print "mid$: "; : printerror(39) : return
116e0     0C 4E 85 F1 | 	sub	fp, #12
116e4     03 16 0E F2 | 	cmp	arg03, #3 wz
116e8     47 00 00 FF 
116ec     7C E4 85 F1 | 	sub	objptr, ##36476
116f0     3C 00 90 AD |  if_e	jmp	#LR__1510
116f4     00 12 06 F6 | 	mov	arg01, #0
116f8     CC 4C B1 FD | 	call	#__system___getiolock_0540
116fc     FD 12 02 F6 | 	mov	arg01, result1
11700     60 F2 B0 FD | 	call	#__system___lockmem
11704     85 01 00 FF 
11708     10 14 06 F6 | 	mov	arg02, ##@LR__5499
1170c     00 12 06 F6 | 	mov	arg01, #0
11710     00 16 06 F6 | 	mov	arg03, #0
11714     40 FF B0 FD | 	call	#__system___basic_print_string
11718     00 12 06 F6 | 	mov	arg01, #0
1171c     A8 4C B1 FD | 	call	#__system___getiolock_0540
11720     FD 00 68 FC | 	wrlong	#0, result1
11724     27 12 06 F6 | 	mov	arg01, #39
11728     A8 BC B0 FD | 	call	#_printerror
1172c     28 01 90 FD | 	jmp	#LR__1513
11730                 | LR__1510
11730     78 9B BF FD | 	call	#_pop
11734     FF 16 02 F6 | 	mov	arg03, result3
11738     A7 FA 61 FC | 	wrlong	result1, fp
1173c     04 4E 05 F1 | 	add	fp, #4
11740     A7 FC 61 FC | 	wrlong	result2, fp
11744     04 4E 05 F1 | 	add	fp, #4
11748     A7 16 62 FC | 	wrlong	arg03, fp
1174c     08 4E 85 F1 | 	sub	fp, #8
11750     A7 12 02 F6 | 	mov	arg01, fp
11754     38 9D BF FD | 	call	#_converttoint
11758     FD 16 02 F6 | 	mov	arg03, result1
1175c     14 4E 05 F1 | 	add	fp, #20
11760     A7 16 62 FC | 	wrlong	arg03, fp
11764     14 4E 85 F1 | 	sub	fp, #20
11768     40 9B BF FD | 	call	#_pop
1176c     FF 16 02 F6 | 	mov	arg03, result3
11770     A7 FA 61 FC | 	wrlong	result1, fp
11774     04 4E 05 F1 | 	add	fp, #4
11778     A7 FC 61 FC | 	wrlong	result2, fp
1177c     04 4E 05 F1 | 	add	fp, #4
11780     A7 16 62 FC | 	wrlong	arg03, fp
11784     08 4E 85 F1 | 	sub	fp, #8
11788     A7 12 02 F6 | 	mov	arg01, fp
1178c     00 9D BF FD | 	call	#_converttoint
11790     FD 16 02 F6 | 	mov	arg03, result1
11794     10 4E 05 F1 | 	add	fp, #16
11798     A7 16 62 FC | 	wrlong	arg03, fp
1179c     10 4E 85 F1 | 	sub	fp, #16
117a0     08 9B BF FD | 	call	#_pop
117a4     FF 16 02 F6 | 	mov	arg03, result3
117a8     A7 FA 61 FC | 	wrlong	result1, fp
117ac     04 4E 05 F1 | 	add	fp, #4
117b0     A7 FC 61 FC | 	wrlong	result2, fp
117b4     04 4E 05 F1 | 	add	fp, #4
117b8     A7 16 62 FC | 	wrlong	arg03, fp
117bc                 | ' t1=pop() : arg2=converttoint(t1)
117bc                 | ' t1=pop() : arg1=converttoint(t1)
117bc                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
117bc     08 4E 85 F1 | 	sub	fp, #8
117c0     2B 16 0E F2 | 	cmp	arg03, #43 wz
117c4     18 00 90 5D |  if_ne	jmp	#LR__1511
117c8     A7 12 02 FB | 	rdlong	arg01, fp
117cc     54 9C BF FD | 	call	#_convertstring
117d0     A7 FA 61 FC | 	wrlong	result1, fp
117d4     08 4E 05 F1 | 	add	fp, #8
117d8     A7 3E 68 FC | 	wrlong	#31, fp
117dc     08 4E 85 F1 | 	sub	fp, #8
117e0                 | LR__1511
117e0                 | ' if t1.result_type<>result_string then print "mid$: "; : printerror(15) : return 
117e0     08 4E 05 F1 | 	add	fp, #8
117e4     A7 16 02 FB | 	rdlong	arg03, fp
117e8     08 4E 85 F1 | 	sub	fp, #8
117ec     1F 16 0E F2 | 	cmp	arg03, #31 wz
117f0     3C 00 90 AD |  if_e	jmp	#LR__1512
117f4     00 12 06 F6 | 	mov	arg01, #0
117f8     CC 4B B1 FD | 	call	#__system___getiolock_0540
117fc     FD 12 02 F6 | 	mov	arg01, result1
11800     60 F1 B0 FD | 	call	#__system___lockmem
11804     85 01 00 FF 
11808     17 14 06 F6 | 	mov	arg02, ##@LR__5500
1180c     00 12 06 F6 | 	mov	arg01, #0
11810     00 16 06 F6 | 	mov	arg03, #0
11814     40 FE B0 FD | 	call	#__system___basic_print_string
11818     00 12 06 F6 | 	mov	arg01, #0
1181c     A8 4B B1 FD | 	call	#__system___getiolock_0540
11820     FD 00 68 FC | 	wrlong	#0, result1
11824     0F 12 06 F6 | 	mov	arg01, #15
11828     A8 BB B0 FD | 	call	#_printerror
1182c     28 00 90 FD | 	jmp	#LR__1513
11830                 | LR__1512
11830     A7 12 02 FB | 	rdlong	arg01, fp
11834     10 4E 05 F1 | 	add	fp, #16
11838     A7 14 02 FB | 	rdlong	arg02, fp
1183c     04 4E 05 F1 | 	add	fp, #4
11840     A7 16 02 FB | 	rdlong	arg03, fp
11844     14 4E 85 F1 | 	sub	fp, #20
11848     AC 12 B1 FD | 	call	#__system__Mid_S
1184c     A7 FA 61 FC | 	wrlong	result1, fp
11850     A7 12 02 F6 | 	mov	arg01, fp
11854     EC 9A BF FD | 	call	#_push
11858                 | LR__1513
11858     A7 F0 03 F6 | 	mov	ptra, fp
1185c     B2 00 A0 FD | 	call	#popregs_
11860                 | _do_mid_ret
11860     2D 00 64 FD | 	ret
11864                 | 
11864                 | ' 
11864                 | ' '-------------------- mouse
11864                 | ' 
11864                 | ' sub do_mouse
11864                 | _do_mouse
11864     44 9A BF FD | 	call	#_pop
11868     00 FA 4D F2 | 	cmps	result1, #0 wz
1186c                 | ' 
1186c                 | ' t1=pop()
1186c                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
1186c     14 00 90 5D |  if_ne	jmp	#LR__1520
11870     10 12 06 F6 | 	mov	arg01, #16
11874     00 14 06 F6 | 	mov	arg02, #0
11878     00 16 06 F6 | 	mov	arg03, #0
1187c     E8 CA B0 FD | 	call	#_hg010b_spin2_setspritesize
11880     10 00 90 FD | 	jmp	#LR__1521
11884                 | LR__1520
11884     10 12 06 F6 | 	mov	arg01, #16
11888     20 14 06 F6 | 	mov	arg02, #32
1188c     20 16 06 F6 | 	mov	arg03, #32
11890     D4 CA B0 FD | 	call	#_hg010b_spin2_setspritesize
11894                 | LR__1521
11894                 | _do_mouse_ret
11894     2D 00 64 FD | 	ret
11898                 | 
11898                 | ' 
11898                 | ' '-------------------- mousek
11898                 | ' 
11898                 | ' sub do_mousek
11898                 | _do_mousek
11898     00 4A 05 F6 | 	mov	COUNT_, #0
1189c     A8 00 A0 FD | 	call	#pushregs_
118a0     0C F0 07 F1 | 	add	ptra, #12
118a4     08 4E 05 F1 | 	add	fp, #8
118a8     A7 3A 68 FC | 	wrlong	#29, fp
118ac     08 4E 85 F1 | 	sub	fp, #8
118b0     51 00 00 FF 
118b4     28 E5 05 F1 | 	add	objptr, ##41768
118b8     F2 12 02 FB | 	rdlong	arg01, objptr
118bc     51 00 00 FF 
118c0     28 E5 85 F1 | 	sub	objptr, ##41768
118c4     A7 12 62 FC | 	wrlong	arg01, fp
118c8     A7 12 02 F6 | 	mov	arg01, fp
118cc     74 9A BF FD | 	call	#_push
118d0     A7 F0 03 F6 | 	mov	ptra, fp
118d4     B2 00 A0 FD | 	call	#popregs_
118d8                 | _do_mousek_ret
118d8     2D 00 64 FD | 	ret
118dc                 | 
118dc                 | ' 
118dc                 | ' '-------------------- mousew
118dc                 | ' 
118dc                 | ' sub do_mousew
118dc                 | _do_mousew
118dc     00 4A 05 F6 | 	mov	COUNT_, #0
118e0     A8 00 A0 FD | 	call	#pushregs_
118e4     0C F0 07 F1 | 	add	ptra, #12
118e8     08 4E 05 F1 | 	add	fp, #8
118ec     A7 38 68 FC | 	wrlong	#28, fp
118f0     08 4E 85 F1 | 	sub	fp, #8
118f4     51 00 00 FF 
118f8     2C E5 05 F1 | 	add	objptr, ##41772
118fc     F2 12 02 FB | 	rdlong	arg01, objptr
11900     51 00 00 FF 
11904     2C E5 85 F1 | 	sub	objptr, ##41772
11908     A7 12 62 FC | 	wrlong	arg01, fp
1190c     A7 12 02 F6 | 	mov	arg01, fp
11910     30 9A BF FD | 	call	#_push
11914     A7 F0 03 F6 | 	mov	ptra, fp
11918     B2 00 A0 FD | 	call	#popregs_
1191c                 | _do_mousew_ret
1191c     2D 00 64 FD | 	ret
11920                 | 
11920                 | ' 
11920                 | ' '-------------------- mousex
11920                 | ' 
11920                 | ' sub do_mousex
11920                 | _do_mousex
11920     00 4A 05 F6 | 	mov	COUNT_, #0
11924     A8 00 A0 FD | 	call	#pushregs_
11928     0C F0 07 F1 | 	add	ptra, #12
1192c     08 4E 05 F1 | 	add	fp, #8
11930     A7 3A 68 FC | 	wrlong	#29, fp
11934     08 4E 85 F1 | 	sub	fp, #8
11938     51 00 00 FF 
1193c     20 E5 05 F1 | 	add	objptr, ##41760
11940     F2 12 02 FB | 	rdlong	arg01, objptr
11944     51 00 00 FF 
11948     20 E5 85 F1 | 	sub	objptr, ##41760
1194c     A7 12 62 FC | 	wrlong	arg01, fp
11950     A7 12 02 F6 | 	mov	arg01, fp
11954     EC 99 BF FD | 	call	#_push
11958     A7 F0 03 F6 | 	mov	ptra, fp
1195c     B2 00 A0 FD | 	call	#popregs_
11960                 | _do_mousex_ret
11960     2D 00 64 FD | 	ret
11964                 | 
11964                 | ' 
11964                 | ' '-------------------- mousey
11964                 | ' 
11964                 | ' sub do_mousey
11964                 | _do_mousey
11964     00 4A 05 F6 | 	mov	COUNT_, #0
11968     A8 00 A0 FD | 	call	#pushregs_
1196c     0C F0 07 F1 | 	add	ptra, #12
11970     08 4E 05 F1 | 	add	fp, #8
11974     A7 3A 68 FC | 	wrlong	#29, fp
11978     08 4E 85 F1 | 	sub	fp, #8
1197c     51 00 00 FF 
11980     24 E5 05 F1 | 	add	objptr, ##41764
11984     F2 12 02 FB | 	rdlong	arg01, objptr
11988     51 00 00 FF 
1198c     24 E5 85 F1 | 	sub	objptr, ##41764
11990     A7 12 62 FC | 	wrlong	arg01, fp
11994     A7 12 02 F6 | 	mov	arg01, fp
11998     A8 99 BF FD | 	call	#_push
1199c     A7 F0 03 F6 | 	mov	ptra, fp
119a0     B2 00 A0 FD | 	call	#popregs_
119a4                 | _do_mousey_ret
119a4     2D 00 64 FD | 	ret
119a8                 | 
119a8                 | ' 
119a8                 | ' '------------------ new
119a8                 | ' 
119a8                 | ' sub do_new
119a8                 | _do_new
119a8     03 4A 05 F6 | 	mov	COUNT_, #3
119ac     A8 00 A0 FD | 	call	#pushregs_
119b0     13 12 C6 F9 | 	decod	arg01, #19
119b4     01 14 66 F6 | 	neg	arg02, #1
119b8     7C BB B0 FD | 	call	#_pslpoke
119bc     35 00 00 FF 
119c0     08 E4 05 F1 | 	add	objptr, ##27144
119c4     F2 00 68 FC | 	wrlong	#0, objptr
119c8                 | ' 
119c8                 | ' pslpoke(memlo,$FFFFFFFF)
119c8                 | ' varnum=0 : for i=0 to maxvars: variables(i).name="" : variables(i).vartype=0: next i
119c8     00 1E 06 F6 | 	mov	local01, #0
119cc     20 00 00 FF 
119d0     10 E4 85 F1 | 	sub	objptr, ##16400
119d4     97 1E 48 FB | 	callpa	#(@LR__1531-@LR__1530)>>2,fcache_load_ptr_
119d8                 | LR__1530
119d8     0F 17 02 F6 | 	mov	arg03, local01
119dc     04 16 66 F0 | 	shl	arg03, #4
119e0     F2 16 02 F1 | 	add	arg03, objptr
119e4     85 01 00 FF 
119e8     1E 14 06 F6 | 	mov	arg02, ##@LR__5501
119ec     0B 15 62 FC | 	wrlong	arg02, arg03
119f0     0F 21 02 F6 | 	mov	local02, local01
119f4     04 20 66 F0 | 	shl	local02, #4
119f8     F2 20 02 F1 | 	add	local02, objptr
119fc     0C 20 06 F1 | 	add	local02, #12
11a00     10 01 68 FC | 	wrlong	#0, local02
11a04     01 1E 06 F1 | 	add	local01, #1
11a08     02 00 00 FF 
11a0c     01 1E 56 F2 | 	cmps	local01, ##1025 wc
11a10     C4 FF 9F CD |  if_b	jmp	#LR__1530
11a14                 | LR__1531
11a14     35 00 00 FF 
11a18     90 E4 05 F1 | 	add	objptr, ##27280
11a1c     00 04 80 FF 
11a20     F2 00 68 FC | 	wrlong	##524288, objptr
11a24     06 00 00 FF 
11a28     30 E4 05 F1 | 	add	objptr, ##3120
11a2c     00 04 80 FF 
11a30     F2 00 68 FC | 	wrlong	##524288, objptr
11a34     04 E4 05 F1 | 	add	objptr, #4
11a38     00 04 80 FF 
11a3c     F2 00 68 FC | 	wrlong	##524288, objptr
11a40     0D 00 00 FF 
11a44     64 E4 85 F1 | 	sub	objptr, ##6756
11a48     F2 00 68 FC | 	wrlong	#0, objptr
11a4c     07 00 00 FF 
11a50     24 E4 05 F1 | 	add	objptr, ##3620
11a54     F2 00 68 FC | 	wrlong	#0, objptr
11a58     07 00 00 FF 
11a5c     20 E4 85 F1 | 	sub	objptr, ##3616
11a60     00 04 80 FF 
11a64     F2 00 68 FC | 	wrlong	##524288, objptr
11a68     07 00 00 FF 
11a6c     30 E4 05 F1 | 	add	objptr, ##3632
11a70     F2 00 68 FC | 	wrlong	#0, objptr
11a74     04 E4 05 F1 | 	add	objptr, #4
11a78     FF FF FF FF 
11a7c     F2 FE 6B FC | 	wrlong	##-1, objptr
11a80     06 00 00 FF 
11a84     78 E4 05 F1 | 	add	objptr, ##3192
11a88     F2 00 68 FC | 	wrlong	#0, objptr
11a8c     04 E4 05 F1 | 	add	objptr, #4
11a90     F2 00 68 FC | 	wrlong	#0, objptr
11a94                 | ' programstart=memlo :runptr=memlo : runptr2=memlo
11a94                 | ' stackpointer=0
11a94                 | ' lineptr=0 
11a94                 | ' programptr=memlo ': stringptr=0
11a94                 | ' 
11a94                 | ' lastline=0 : lastlineptr=-1 :fortop=0 :gosubtop=0
11a94                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
11a94     00 1E 06 F6 | 	mov	local01, #0
11a98     06 00 00 FF 
11a9c     74 E4 85 F1 | 	sub	objptr, ##3188
11aa0     97 16 48 FB | 	callpa	#(@LR__1533-@LR__1532)>>2,fcache_load_ptr_
11aa4                 | LR__1532
11aa4     0F 21 02 F6 | 	mov	local02, local01
11aa8     02 20 66 F0 | 	shl	local02, #2
11aac     0F 21 02 F1 | 	add	local02, local01
11ab0     02 20 66 F0 | 	shl	local02, #2
11ab4     F2 20 02 F1 | 	add	local02, objptr
11ab8     08 20 06 F1 | 	add	local02, #8
11abc     FF FF FF FF 
11ac0     10 FF 6B FC | 	wrlong	##-1, local02
11ac4     01 1E 06 F1 | 	add	local01, #1
11ac8     41 1E 56 F2 | 	cmps	local01, #65 wc
11acc     D4 FF 9F CD |  if_b	jmp	#LR__1532
11ad0                 | LR__1533
11ad0     4A 00 00 FF 
11ad4     98 E4 85 F1 | 	sub	objptr, ##38040
11ad8                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i)) 
11ad8     00 1E 06 F6 | 	mov	local01, #0
11adc                 | LR__1534
11adc     0F 21 02 F6 | 	mov	local02, local01
11ae0     02 20 66 F0 | 	shl	local02, #2
11ae4     51 00 00 FF 
11ae8     68 E5 05 F1 | 	add	objptr, ##41832
11aec     F2 20 02 F1 | 	add	local02, objptr
11af0     10 23 0A FB | 	rdlong	local03, local02 wz
11af4     51 00 00 FF 
11af8     68 E5 85 F1 | 	sub	objptr, ##41832
11afc     34 00 90 AD |  if_e	jmp	#LR__1535
11b00     0F 13 02 F6 | 	mov	arg01, local01
11b04     00 14 06 F6 | 	mov	arg02, #0
11b08     00 16 06 F6 | 	mov	arg03, #0
11b0c     58 C8 B0 FD | 	call	#_hg010b_spin2_setspritesize
11b10     0F 21 02 F6 | 	mov	local02, local01
11b14     02 20 66 F0 | 	shl	local02, #2
11b18     51 00 00 FF 
11b1c     68 E5 05 F1 | 	add	objptr, ##41832
11b20     F2 20 02 F1 | 	add	local02, objptr
11b24     10 13 02 FB | 	rdlong	arg01, local02
11b28     51 00 00 FF 
11b2c     68 E5 85 F1 | 	sub	objptr, ##41832
11b30     48 2E B1 FD | 	call	#__system___gc_free
11b34                 | LR__1535
11b34     01 1E 06 F1 | 	add	local01, #1
11b38     10 1E 56 F2 | 	cmps	local01, #16 wc
11b3c     9C FF 9F CD |  if_b	jmp	#LR__1534
11b40     51 00 00 FF 
11b44     BC E5 05 F1 | 	add	objptr, ##41916
11b48     00 C0 9F FF 
11b4c     F2 00 68 FC | 	wrlong	##1065353216, objptr
11b50     04 E4 05 F1 | 	add	objptr, #4
11b54     00 C0 9F FF 
11b58     F2 00 68 FC | 	wrlong	##1065353216, objptr
11b5c     51 00 00 FF 
11b60     BC E5 85 F1 | 	sub	objptr, ##41916
11b64     F2 22 02 FB | 	rdlong	local03, objptr
11b68     51 00 00 FF 
11b6c     A8 E5 05 F1 | 	add	objptr, ##41896
11b70     F2 22 62 FC | 	wrlong	local03, objptr
11b74     51 00 00 FF 
11b78     AC E5 85 F1 | 	sub	objptr, ##41900
11b7c     11 12 06 F6 | 	mov	arg01, #17
11b80     08 14 06 F6 | 	mov	arg02, #8
11b84     10 16 06 F6 | 	mov	arg03, #16
11b88     DC C7 B0 FD | 	call	#_hg010b_spin2_setspritesize
11b8c     10 12 06 F6 | 	mov	arg01, #16
11b90     20 14 06 F6 | 	mov	arg02, #32
11b94     20 16 06 F6 | 	mov	arg03, #32
11b98     CC C7 B0 FD | 	call	#_hg010b_spin2_setspritesize
11b9c     85 01 00 FF 
11ba0     1F 22 06 F6 | 	mov	local03, ##@LR__5502
11ba4     51 00 00 FF 
11ba8     D8 E5 05 F1 | 	add	objptr, ##41944
11bac     F2 22 62 FC | 	wrlong	local03, objptr
11bb0     51 00 00 FF 
11bb4     D8 E5 85 F1 | 	sub	objptr, ##41944
11bb8     40 AC B0 FD | 	call	#_init_audio
11bbc     A7 F0 03 F6 | 	mov	ptra, fp
11bc0     B2 00 A0 FD | 	call	#popregs_
11bc4                 | _do_new_ret
11bc4     2D 00 64 FD | 	ret
11bc8                 | 
11bc8                 | ' 
11bc8                 | ' '-------------------- next
11bc8                 | ' 
11bc8                 | ' sub do_next()
11bc8                 | _do_next
11bc8     04 4A 05 F6 | 	mov	COUNT_, #4
11bcc     A8 00 A0 FD | 	call	#pushregs_
11bd0     D8 96 BF FD | 	call	#_pop
11bd4     FD 1E 02 F6 | 	mov	local01, result1
11bd8     FE 20 02 F6 | 	mov	local02, result2
11bdc     FF 22 02 F6 | 	mov	local03, result3
11be0                 | ' t1=pop() :varnum=t1.result.uresult
11be0                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
11be0     50 00 00 FF 
11be4     08 E5 05 F1 | 	add	objptr, ##41224
11be8     F2 12 02 FB | 	rdlong	arg01, objptr
11bec     09 15 02 F6 | 	mov	arg02, arg01
11bf0     02 14 66 F0 | 	shl	arg02, #2
11bf4     09 15 02 F1 | 	add	arg02, arg01
11bf8     02 14 66 F0 | 	shl	arg02, #2
11bfc     06 00 00 FF 
11c00     70 E4 85 F1 | 	sub	objptr, ##3184
11c04     F2 14 02 F1 | 	add	arg02, objptr
11c08     08 14 06 F1 | 	add	arg02, #8
11c0c     0A 15 02 FB | 	rdlong	arg02, arg02
11c10     0F 15 0A F2 | 	cmp	arg02, local01 wz
11c14     4A 00 00 FF 
11c18     98 E4 85 F1 | 	sub	objptr, ##38040
11c1c     0C 00 90 AD |  if_e	jmp	#LR__1540
11c20     25 12 06 F6 | 	mov	arg01, #37
11c24     AC B7 B0 FD | 	call	#_printerror
11c28     54 03 90 FD | 	jmp	#LR__1547
11c2c                 | LR__1540
11c2c                 | ' if variables(varnum).vartype=result_float then variables(varnum).vartype=result_int : variables(varnum).value.iresult=round(variables(varnum).value.fresult)
11c2c     0F 15 02 F6 | 	mov	arg02, local01
11c30     04 14 66 F0 | 	shl	arg02, #4
11c34     14 00 00 FF 
11c38     F8 E5 05 F1 | 	add	objptr, ##10744
11c3c     F2 14 02 F1 | 	add	arg02, objptr
11c40     0C 14 06 F1 | 	add	arg02, #12
11c44     0A 15 02 FB | 	rdlong	arg02, arg02
11c48     1E 14 0E F2 | 	cmp	arg02, #30 wz
11c4c     14 00 00 FF 
11c50     F8 E5 85 F1 | 	sub	objptr, ##10744
11c54     54 00 90 5D |  if_ne	jmp	#LR__1541
11c58     0F 15 02 F6 | 	mov	arg02, local01
11c5c     04 14 66 F0 | 	shl	arg02, #4
11c60     14 00 00 FF 
11c64     F8 E5 05 F1 | 	add	objptr, ##10744
11c68     F2 14 02 F1 | 	add	arg02, objptr
11c6c     0C 14 06 F1 | 	add	arg02, #12
11c70     0A 39 68 FC | 	wrlong	#28, arg02
11c74     0F 25 02 F6 | 	mov	local04, local01
11c78     04 24 66 F0 | 	shl	local04, #4
11c7c     F2 24 02 F1 | 	add	local04, objptr
11c80     0F 13 02 F6 | 	mov	arg01, local01
11c84     04 12 66 F0 | 	shl	arg01, #4
11c88     F2 12 02 F1 | 	add	arg01, objptr
11c8c     04 12 06 F1 | 	add	arg01, #4
11c90     09 13 02 FB | 	rdlong	arg01, arg01
11c94     14 00 00 FF 
11c98     F8 E5 85 F1 | 	sub	objptr, ##10744
11c9c     01 14 06 F6 | 	mov	arg02, #1
11ca0     3C 1D B1 FD | 	call	#__system___float_tointeger
11ca4     04 24 06 F1 | 	add	local04, #4
11ca8     12 FB 61 FC | 	wrlong	result1, local04
11cac                 | LR__1541
11cac     50 00 00 FF 
11cb0     08 E5 05 F1 | 	add	objptr, ##41224
11cb4     F2 12 02 FB | 	rdlong	arg01, objptr
11cb8     09 25 02 F6 | 	mov	local04, arg01
11cbc     02 24 66 F0 | 	shl	local04, #2
11cc0     09 25 02 F1 | 	add	local04, arg01
11cc4     02 24 66 F0 | 	shl	local04, #2
11cc8     06 00 00 FF 
11ccc     70 E4 85 F1 | 	sub	objptr, ##3184
11cd0     F2 24 02 F1 | 	add	local04, objptr
11cd4     0C 24 06 F1 | 	add	local04, #12
11cd8     12 25 02 FB | 	rdlong	local04, local04
11cdc     0F 13 02 F6 | 	mov	arg01, local01
11ce0     04 12 66 F0 | 	shl	arg01, #4
11ce4     35 00 00 FF 
11ce8     A0 E4 85 F1 | 	sub	objptr, ##27296
11cec     F2 12 02 F1 | 	add	arg01, objptr
11cf0     0F FF 01 F6 | 	mov	result3, local01
11cf4     04 FE 65 F0 | 	shl	result3, #4
11cf8     F2 FE 01 F1 | 	add	result3, objptr
11cfc     04 FE 05 F1 | 	add	result3, #4
11d00     FF FE 01 FB | 	rdlong	result3, result3
11d04     12 FF 01 F1 | 	add	result3, local04
11d08     04 12 06 F1 | 	add	arg01, #4
11d0c     09 FF 61 FC | 	wrlong	result3, arg01
11d10                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
11d10                 | ' if fortable(fortop).stepval>=0 then
11d10     3B 00 00 FF 
11d14     10 E5 05 F1 | 	add	objptr, ##30480
11d18     F2 12 02 FB | 	rdlong	arg01, objptr
11d1c     09 25 02 F6 | 	mov	local04, arg01
11d20     02 24 66 F0 | 	shl	local04, #2
11d24     09 25 02 F1 | 	add	local04, arg01
11d28     02 24 66 F0 | 	shl	local04, #2
11d2c     06 00 00 FF 
11d30     70 E4 85 F1 | 	sub	objptr, ##3184
11d34     F2 24 02 F1 | 	add	local04, objptr
11d38     0C 24 06 F1 | 	add	local04, #12
11d3c     12 25 02 FB | 	rdlong	local04, local04
11d40     00 24 56 F2 | 	cmps	local04, #0 wc
11d44     4A 00 00 FF 
11d48     98 E4 85 F1 | 	sub	objptr, ##38040
11d4c     78 00 90 CD |  if_b	jmp	#LR__1542
11d50                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
11d50     04 1E 66 F0 | 	shl	local01, #4
11d54     14 00 00 FF 
11d58     F8 E5 05 F1 | 	add	objptr, ##10744
11d5c     F2 1E 02 F1 | 	add	local01, objptr
11d60     3B 00 00 FF 
11d64     10 E5 05 F1 | 	add	objptr, ##30480
11d68     F2 24 02 FB | 	rdlong	local04, objptr
11d6c     12 13 02 F6 | 	mov	arg01, local04
11d70     02 12 66 F0 | 	shl	arg01, #2
11d74     12 13 02 F1 | 	add	arg01, local04
11d78     02 12 66 F0 | 	shl	arg01, #2
11d7c     06 00 00 FF 
11d80     70 E4 85 F1 | 	sub	objptr, ##3184
11d84     F2 12 02 F1 | 	add	arg01, objptr
11d88     04 1E 06 F1 | 	add	local01, #4
11d8c     0F 25 02 FB | 	rdlong	local04, local01
11d90     10 12 06 F1 | 	add	arg01, #16
11d94     09 13 02 FB | 	rdlong	arg01, arg01
11d98     09 25 5A F2 | 	cmps	local04, arg01 wcz
11d9c     4A 00 00 FF 
11da0     98 E4 85 F1 | 	sub	objptr, ##38040
11da4     9C 00 90 ED |  if_be	jmp	#LR__1544
11da8     50 00 00 FF 
11dac     08 E5 05 F1 | 	add	objptr, ##41224
11db0     F2 24 02 FB | 	rdlong	local04, objptr
11db4     01 24 86 F1 | 	sub	local04, #1
11db8     F2 24 62 FC | 	wrlong	local04, objptr
11dbc     50 00 00 FF 
11dc0     08 E5 85 F1 | 	sub	objptr, ##41224
11dc4     B8 01 90 FD | 	jmp	#LR__1547
11dc8                 | LR__1542
11dc8                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
11dc8     0F 13 02 F6 | 	mov	arg01, local01
11dcc     04 12 66 F0 | 	shl	arg01, #4
11dd0     14 00 00 FF 
11dd4     F8 E5 05 F1 | 	add	objptr, ##10744
11dd8     F2 12 02 F1 | 	add	arg01, objptr
11ddc     3B 00 00 FF 
11de0     10 E5 05 F1 | 	add	objptr, ##30480
11de4     F2 24 02 FB | 	rdlong	local04, objptr
11de8     12 1F 02 F6 | 	mov	local01, local04
11dec     02 1E 66 F0 | 	shl	local01, #2
11df0     12 1F 02 F1 | 	add	local01, local04
11df4     02 1E 66 F0 | 	shl	local01, #2
11df8     06 00 00 FF 
11dfc     70 E4 85 F1 | 	sub	objptr, ##3184
11e00     F2 1E 02 F1 | 	add	local01, objptr
11e04     04 12 06 F1 | 	add	arg01, #4
11e08     09 13 02 FB | 	rdlong	arg01, arg01
11e0c     10 1E 06 F1 | 	add	local01, #16
11e10     0F 1F 02 FB | 	rdlong	local01, local01
11e14     0F 13 52 F2 | 	cmps	arg01, local01 wc
11e18     4A 00 00 FF 
11e1c     98 E4 85 F1 | 	sub	objptr, ##38040
11e20     20 00 90 3D |  if_ae	jmp	#LR__1543
11e24     50 00 00 FF 
11e28     08 E5 05 F1 | 	add	objptr, ##41224
11e2c     F2 24 02 FB | 	rdlong	local04, objptr
11e30     01 24 86 F1 | 	sub	local04, #1
11e34     F2 24 62 FC | 	wrlong	local04, objptr
11e38     50 00 00 FF 
11e3c     08 E5 85 F1 | 	sub	objptr, ##41224
11e40     3C 01 90 FD | 	jmp	#LR__1547
11e44                 | LR__1543
11e44                 | LR__1544
11e44                 | ' ' if not returned, goto pointer 
11e44                 | ' if inrun>0 andalso runptr<>fortable(fortop).lineptr then
11e44     50 00 00 FF 
11e48     EC E4 05 F1 | 	add	objptr, ##41196
11e4c     F2 24 02 FB | 	rdlong	local04, objptr
11e50     50 00 00 FF 
11e54     EC E4 85 F1 | 	sub	objptr, ##41196
11e58     01 24 16 F2 | 	cmp	local04, #1 wc
11e5c     DC 00 90 CD |  if_b	jmp	#LR__1545
11e60     50 00 00 FF 
11e64     08 E5 05 F1 | 	add	objptr, ##41224
11e68     F2 1E 02 FB | 	rdlong	local01, objptr
11e6c     0F 25 02 F6 | 	mov	local04, local01
11e70     02 24 66 F0 | 	shl	local04, #2
11e74     0F 25 02 F1 | 	add	local04, local01
11e78     02 24 66 F0 | 	shl	local04, #2
11e7c     06 00 00 FF 
11e80     70 E4 85 F1 | 	sub	objptr, ##3184
11e84     F2 24 02 F1 | 	add	local04, objptr
11e88     06 00 00 FF 
11e8c     20 E4 05 F1 | 	add	objptr, ##3104
11e90     F2 1E 02 FB | 	rdlong	local01, objptr
11e94     50 00 00 FF 
11e98     B8 E4 85 F1 | 	sub	objptr, ##41144
11e9c     12 25 02 FB | 	rdlong	local04, local04
11ea0     12 1F 0A F2 | 	cmp	local01, local04 wz
11ea4     94 00 90 AD |  if_e	jmp	#LR__1545
11ea8     50 00 00 FF 
11eac     08 E5 05 F1 | 	add	objptr, ##41224
11eb0     F2 1E 02 FB | 	rdlong	local01, objptr
11eb4     0F 25 02 F6 | 	mov	local04, local01
11eb8     02 24 66 F0 | 	shl	local04, #2
11ebc     0F 25 02 F1 | 	add	local04, local01
11ec0     02 24 66 F0 | 	shl	local04, #2
11ec4     06 00 00 FF 
11ec8     70 E4 85 F1 | 	sub	objptr, ##3184
11ecc     F2 24 02 F1 | 	add	local04, objptr
11ed0     12 25 02 FB | 	rdlong	local04, local04
11ed4     06 00 00 FF 
11ed8     20 E4 05 F1 | 	add	objptr, ##3104
11edc     F2 24 62 FC | 	wrlong	local04, objptr
11ee0     50 E4 05 F1 | 	add	objptr, #80
11ee4     F2 1E 02 FB | 	rdlong	local01, objptr
11ee8     0F 25 02 F6 | 	mov	local04, local01
11eec     02 24 66 F0 | 	shl	local04, #2
11ef0     0F 25 02 F1 | 	add	local04, local01
11ef4     02 24 66 F0 | 	shl	local04, #2
11ef8     06 00 00 FF 
11efc     70 E4 85 F1 | 	sub	objptr, ##3184
11f00     F2 24 02 F1 | 	add	local04, objptr
11f04     04 24 06 F1 | 	add	local04, #4
11f08     12 25 02 FB | 	rdlong	local04, local04
11f0c     06 00 00 FF 
11f10     24 E4 05 F1 | 	add	objptr, ##3108
11f14     F2 24 62 FC | 	wrlong	local04, objptr
11f18     06 00 00 FF 
11f1c     40 E4 85 F1 | 	sub	objptr, ##3136
11f20     F2 24 02 FB | 	rdlong	local04, objptr
11f24     01 24 86 F1 | 	sub	local04, #1
11f28     04 E4 05 F1 | 	add	objptr, #4
11f2c     F2 24 62 FC | 	wrlong	local04, objptr
11f30     4A 00 00 FF 
11f34     80 E4 85 F1 | 	sub	objptr, ##38016
11f38     44 00 90 FD | 	jmp	#LR__1546
11f3c                 | LR__1545
11f3c     50 00 00 FF 
11f40     08 E5 05 F1 | 	add	objptr, ##41224
11f44     F2 24 02 FB | 	rdlong	local04, objptr
11f48     12 1F 02 F6 | 	mov	local01, local04
11f4c     02 1E 66 F0 | 	shl	local01, #2
11f50     12 1F 02 F1 | 	add	local01, local04
11f54     02 1E 66 F0 | 	shl	local01, #2
11f58     06 00 00 FF 
11f5c     70 E4 85 F1 | 	sub	objptr, ##3184
11f60     F2 1E 02 F1 | 	add	local01, objptr
11f64     04 1E 06 F1 | 	add	local01, #4
11f68     0F 1F 02 FB | 	rdlong	local01, local01
11f6c     01 1E 86 F1 | 	sub	local01, #1
11f70     18 E4 85 F1 | 	sub	objptr, #24
11f74     F2 1E 62 FC | 	wrlong	local01, objptr
11f78     4A 00 00 FF 
11f7c     80 E4 85 F1 | 	sub	objptr, ##38016
11f80                 | LR__1546
11f80                 | LR__1547
11f80     A7 F0 03 F6 | 	mov	ptra, fp
11f84     B2 00 A0 FD | 	call	#popregs_
11f88                 | _do_next_ret
11f88     2D 00 64 FD | 	ret
11f8c                 | 
11f8c                 | ' 
11f8c                 | ' '-------------------- no command (print "Unknown command")
11f8c                 | ' 
11f8c                 | ' sub do_no_command
11f8c                 | _do_no_command
11f8c     17 12 06 F6 | 	mov	arg01, #23
11f90     40 B4 B0 FD | 	call	#_printerror
11f94                 | _do_no_command_ret
11f94     2D 00 64 FD | 	ret
11f98                 | 
11f98                 | ' 
11f98                 | ' '-------------------- nothing
11f98                 | ' 
11f98                 | ' sub do_nothing					' a placeholder for tokens that don't do anything by themselves (then, else) 
11f98                 | _do_nothing
11f98                 | _do_nothing_ret
11f98     2D 00 64 FD | 	ret
11f9c                 | 
11f9c                 | ' 
11f9c                 | ' '-------------------- open
11f9c                 | ' 
11f9c                 | ' sub do_open
11f9c                 | _do_open
11f9c     02 4A 05 F6 | 	mov	COUNT_, #2
11fa0     A8 00 A0 FD | 	call	#pushregs_
11fa4     20 F0 07 F1 | 	add	ptra, #32
11fa8     4A 00 00 FF 
11fac     80 E4 05 F1 | 	add	objptr, ##38016
11fb0     F2 16 02 FB | 	rdlong	arg03, objptr
11fb4     0B 15 02 F6 | 	mov	arg02, arg03
11fb8     01 14 66 F0 | 	shl	arg02, #1
11fbc     0B 15 02 F1 | 	add	arg02, arg03
11fc0     02 14 66 F0 | 	shl	arg02, #2
11fc4     03 00 00 FF 
11fc8     04 E4 85 F1 | 	sub	objptr, ##1540
11fcc     F2 14 02 F1 | 	add	arg02, objptr
11fd0     0A 17 02 FB | 	rdlong	arg03, arg02
11fd4     10 4E 05 F1 | 	add	fp, #16
11fd8     A7 16 62 FC | 	wrlong	arg03, fp
11fdc     10 4E 85 F1 | 	sub	fp, #16
11fe0     47 00 00 FF 
11fe4     7C E4 85 F1 | 	sub	objptr, ##36476
11fe8     C0 92 BF FD | 	call	#_pop
11fec     FF 16 02 F6 | 	mov	arg03, result3
11ff0     A7 FA 61 FC | 	wrlong	result1, fp
11ff4     04 4E 05 F1 | 	add	fp, #4
11ff8     A7 FC 61 FC | 	wrlong	result2, fp
11ffc     04 4E 05 F1 | 	add	fp, #4
12000     A7 16 62 FC | 	wrlong	arg03, fp
12004                 | ' 
12004                 | ' numpar=compiledline(lineptr_e).result.uresult
12004                 | ' 
12004                 | ' t1=pop()
12004                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
12004     08 4E 85 F1 | 	sub	fp, #8
12008     2B 16 0E F2 | 	cmp	arg03, #43 wz
1200c     18 00 90 5D |  if_ne	jmp	#LR__1550
12010     A7 12 02 FB | 	rdlong	arg01, fp
12014     0C 94 BF FD | 	call	#_convertstring
12018     A7 FA 61 FC | 	wrlong	result1, fp
1201c     08 4E 05 F1 | 	add	fp, #8
12020     A7 3E 68 FC | 	wrlong	#31, fp
12024     08 4E 85 F1 | 	sub	fp, #8
12028                 | LR__1550
12028                 | ' if t1.result_type<>result_string then  print "filename expected" : return  ' error here
12028     08 4E 05 F1 | 	add	fp, #8
1202c     A7 16 02 FB | 	rdlong	arg03, fp
12030     08 4E 85 F1 | 	sub	fp, #8
12034     1F 16 0E F2 | 	cmp	arg03, #31 wz
12038     44 00 90 AD |  if_e	jmp	#LR__1551
1203c     00 12 06 F6 | 	mov	arg01, #0
12040     84 43 B1 FD | 	call	#__system___getiolock_0540
12044     FD 12 02 F6 | 	mov	arg01, result1
12048     18 E9 B0 FD | 	call	#__system___lockmem
1204c     85 01 00 FF 
12050     2A 14 06 F6 | 	mov	arg02, ##@LR__5503
12054     00 12 06 F6 | 	mov	arg01, #0
12058     00 16 06 F6 | 	mov	arg03, #0
1205c     F8 F5 B0 FD | 	call	#__system___basic_print_string
12060     00 12 06 F6 | 	mov	arg01, #0
12064     0A 14 06 F6 | 	mov	arg02, #10
12068     00 16 06 F6 | 	mov	arg03, #0
1206c     90 F5 B0 FD | 	call	#__system___basic_print_char
12070     00 12 06 F6 | 	mov	arg01, #0
12074     50 43 B1 FD | 	call	#__system___getiolock_0540
12078     FD 00 68 FC | 	wrlong	#0, result1
1207c     28 02 90 FD | 	jmp	#LR__1562
12080                 | LR__1551
12080     A7 16 02 FB | 	rdlong	arg03, fp
12084     0C 4E 05 F1 | 	add	fp, #12
12088     A7 16 62 FC | 	wrlong	arg03, fp
1208c     0C 4E 85 F1 | 	sub	fp, #12
12090     18 92 BF FD | 	call	#_pop
12094     FF 16 02 F6 | 	mov	arg03, result3
12098     A7 FA 61 FC | 	wrlong	result1, fp
1209c     04 4E 05 F1 | 	add	fp, #4
120a0     A7 FC 61 FC | 	wrlong	result2, fp
120a4     04 4E 05 F1 | 	add	fp, #4
120a8     A7 16 62 FC | 	wrlong	arg03, fp
120ac                 | ' filename=t1.result.sresult
120ac                 | ' t1=pop()
120ac                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
120ac     08 4E 85 F1 | 	sub	fp, #8
120b0     2B 16 0E F2 | 	cmp	arg03, #43 wz
120b4     18 00 90 5D |  if_ne	jmp	#LR__1552
120b8     A7 12 02 FB | 	rdlong	arg01, fp
120bc     64 93 BF FD | 	call	#_convertstring
120c0     A7 FA 61 FC | 	wrlong	result1, fp
120c4     08 4E 05 F1 | 	add	fp, #8
120c8     A7 3E 68 FC | 	wrlong	#31, fp
120cc     08 4E 85 F1 | 	sub	fp, #8
120d0                 | LR__1552
120d0     14 4E 05 F1 | 	add	fp, #20
120d4     A7 00 68 FC | 	wrlong	#0, fp
120d8                 | ' mode=0
120d8                 | ' if t1.result_type=result_string then
120d8     0C 4E 85 F1 | 	sub	fp, #12
120dc     A7 14 02 FB | 	rdlong	arg02, fp
120e0     08 4E 85 F1 | 	sub	fp, #8
120e4     1F 14 0E F2 | 	cmp	arg02, #31 wz
120e8     64 00 90 5D |  if_ne	jmp	#LR__1553
120ec                 | '   if t1.result.sresult="read" then mode=1
120ec     A7 12 02 FB | 	rdlong	arg01, fp
120f0     85 01 00 FF 
120f4     3C 14 06 F6 | 	mov	arg02, ##@LR__5504
120f8     90 E8 B0 FD | 	call	#__system___string_cmp
120fc     00 FA 0D F2 | 	cmp	result1, #0 wz
12100     14 4E 05 A1 |  if_e	add	fp, #20
12104     A7 02 68 AC |  if_e	wrlong	#1, fp
12108     14 4E 85 A1 |  if_e	sub	fp, #20
1210c                 | '   if t1.result.sresult="write" then mode=2
1210c     A7 12 02 FB | 	rdlong	arg01, fp
12110     85 01 00 FF 
12114     41 14 06 F6 | 	mov	arg02, ##@LR__5505
12118     70 E8 B0 FD | 	call	#__system___string_cmp
1211c     00 FA 0D F2 | 	cmp	result1, #0 wz
12120     14 4E 05 A1 |  if_e	add	fp, #20
12124     A7 04 68 AC |  if_e	wrlong	#2, fp
12128     14 4E 85 A1 |  if_e	sub	fp, #20
1212c                 | '   if t1.result.sresult="append" then mode=4
1212c     A7 12 02 FB | 	rdlong	arg01, fp
12130     85 01 00 FF 
12134     47 14 06 F6 | 	mov	arg02, ##@LR__5506
12138     50 E8 B0 FD | 	call	#__system___string_cmp
1213c     00 FA 0D F2 | 	cmp	result1, #0 wz
12140     14 4E 05 A1 |  if_e	add	fp, #20
12144     A7 08 68 AC |  if_e	wrlong	#4, fp
12148     14 4E 85 A1 |  if_e	sub	fp, #20
1214c     14 00 90 FD | 	jmp	#LR__1554
12150                 | LR__1553
12150     A7 12 02 F6 | 	mov	arg01, fp
12154     38 93 BF FD | 	call	#_converttoint
12158     14 4E 05 F1 | 	add	fp, #20
1215c     A7 FA 61 FC | 	wrlong	result1, fp
12160     14 4E 85 F1 | 	sub	fp, #20
12164                 | LR__1554
12164     44 91 BF FD | 	call	#_pop
12168     FF 16 02 F6 | 	mov	arg03, result3
1216c     A7 FA 61 FC | 	wrlong	result1, fp
12170     04 4E 05 F1 | 	add	fp, #4
12174     A7 FC 61 FC | 	wrlong	result2, fp
12178     04 4E 05 F1 | 	add	fp, #4
1217c     A7 16 62 FC | 	wrlong	arg03, fp
12180                 | ' t1=pop()
12180                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
12180     08 4E 85 F1 | 	sub	fp, #8
12184     2C 16 0E F2 | 	cmp	arg03, #44 wz
12188     44 00 90 AD |  if_e	jmp	#LR__1555
1218c     00 12 06 F6 | 	mov	arg01, #0
12190     34 42 B1 FD | 	call	#__system___getiolock_0540
12194     FD 12 02 F6 | 	mov	arg01, result1
12198     C8 E7 B0 FD | 	call	#__system___lockmem
1219c     85 01 00 FF 
121a0     4E 14 06 F6 | 	mov	arg02, ##@LR__5507
121a4     00 12 06 F6 | 	mov	arg01, #0
121a8     00 16 06 F6 | 	mov	arg03, #0
121ac     A8 F4 B0 FD | 	call	#__system___basic_print_string
121b0     00 12 06 F6 | 	mov	arg01, #0
121b4     0A 14 06 F6 | 	mov	arg02, #10
121b8     00 16 06 F6 | 	mov	arg03, #0
121bc     40 F4 B0 FD | 	call	#__system___basic_print_char
121c0     00 12 06 F6 | 	mov	arg01, #0
121c4     00 42 B1 FD | 	call	#__system___getiolock_0540
121c8     FD 00 68 FC | 	wrlong	#0, result1
121cc     D8 00 90 FD | 	jmp	#LR__1562
121d0                 | LR__1555
121d0     A7 1E 02 FB | 	rdlong	local01, fp
121d4     18 4E 05 F1 | 	add	fp, #24
121d8     A7 1E 62 FC | 	wrlong	local01, fp
121dc                 | ' channel  = t1.result.iresult
121dc                 | ' select case  mode
121dc     04 4E 85 F1 | 	sub	fp, #4
121e0     A7 20 02 FB | 	rdlong	local02, fp
121e4     14 4E 85 F1 | 	sub	fp, #20
121e8     01 20 86 F1 | 	sub	local02, #1
121ec     04 20 26 F3 | 	fle	local02, #4
121f0     30 20 62 FD | 	jmprel	local02
121f4                 | LR__1556
121f4     10 00 90 FD | 	jmp	#LR__1557
121f8     2C 00 90 FD | 	jmp	#LR__1558
121fc     68 00 90 FD | 	jmp	#LR__1560
12200     44 00 90 FD | 	jmp	#LR__1559
12204     60 00 90 FD | 	jmp	#LR__1560
12208                 | LR__1557
12208     18 4E 05 F1 | 	add	fp, #24
1220c     A7 12 02 FB | 	rdlong	arg01, fp
12210     0C 4E 85 F1 | 	sub	fp, #12
12214     A7 14 02 FB | 	rdlong	arg02, fp
12218     0C 4E 85 F1 | 	sub	fp, #12
1221c     00 16 06 F6 | 	mov	arg03, #0
12220     44 F3 B0 FD | 	call	#__system___basic_open_string
12224     80 00 90 FD | 	jmp	#LR__1561
12228                 | LR__1558
12228     18 4E 05 F1 | 	add	fp, #24
1222c     A7 12 02 FB | 	rdlong	arg01, fp
12230     0C 4E 85 F1 | 	sub	fp, #12
12234     A7 14 02 FB | 	rdlong	arg02, fp
12238     0C 4E 85 F1 | 	sub	fp, #12
1223c     0D 16 06 F6 | 	mov	arg03, #13
12240     24 F3 B0 FD | 	call	#__system___basic_open_string
12244     60 00 90 FD | 	jmp	#LR__1561
12248                 | LR__1559
12248     18 4E 05 F1 | 	add	fp, #24
1224c     A7 12 02 FB | 	rdlong	arg01, fp
12250     0C 4E 85 F1 | 	sub	fp, #12
12254     A7 14 02 FB | 	rdlong	arg02, fp
12258     0C 4E 85 F1 | 	sub	fp, #12
1225c     25 16 06 F6 | 	mov	arg03, #37
12260     04 F3 B0 FD | 	call	#__system___basic_open_string
12264     40 00 90 FD | 	jmp	#LR__1561
12268                 | LR__1560
12268     00 12 06 F6 | 	mov	arg01, #0
1226c     58 41 B1 FD | 	call	#__system___getiolock_0540
12270     FD 12 02 F6 | 	mov	arg01, result1
12274     EC E6 B0 FD | 	call	#__system___lockmem
12278     85 01 00 FF 
1227c     60 14 06 F6 | 	mov	arg02, ##@LR__5508
12280     00 12 06 F6 | 	mov	arg01, #0
12284     00 16 06 F6 | 	mov	arg03, #0
12288     CC F3 B0 FD | 	call	#__system___basic_print_string
1228c     00 12 06 F6 | 	mov	arg01, #0
12290     0A 14 06 F6 | 	mov	arg02, #10
12294     00 16 06 F6 | 	mov	arg03, #0
12298     64 F3 B0 FD | 	call	#__system___basic_print_char
1229c     00 12 06 F6 | 	mov	arg01, #0
122a0     24 41 B1 FD | 	call	#__system___getiolock_0540
122a4     FD 00 68 FC | 	wrlong	#0, result1
122a8                 | LR__1561
122a8                 | LR__1562
122a8     A7 F0 03 F6 | 	mov	ptra, fp
122ac     B2 00 A0 FD | 	call	#popregs_
122b0                 | _do_open_ret
122b0     2D 00 64 FD | 	ret
122b4                 | 
122b4                 | ' 
122b4                 | ' '-------------------- pinfloat
122b4                 | ' 
122b4                 | ' sub do_pinfloat
122b4                 | _do_pinfloat
122b4     00 4A 05 F6 | 	mov	COUNT_, #0
122b8     A8 00 A0 FD | 	call	#pushregs_
122bc     0C F0 07 F1 | 	add	ptra, #12
122c0     E8 8F BF FD | 	call	#_pop
122c4     A7 FA 61 FC | 	wrlong	result1, fp
122c8     04 4E 05 F1 | 	add	fp, #4
122cc     A7 FC 61 FC | 	wrlong	result2, fp
122d0     04 4E 05 F1 | 	add	fp, #4
122d4     A7 FE 61 FC | 	wrlong	result3, fp
122d8     08 4E 85 F1 | 	sub	fp, #8
122dc     A7 12 02 F6 | 	mov	arg01, fp
122e0     AC 91 BF FD | 	call	#_converttoint
122e4     50 FA 61 FD | 	fltl	result1
122e8     A7 F0 03 F6 | 	mov	ptra, fp
122ec     B2 00 A0 FD | 	call	#popregs_
122f0                 | _do_pinfloat_ret
122f0     2D 00 64 FD | 	ret
122f4                 | 
122f4                 | ' 
122f4                 | ' '-------------------- pinhi
122f4                 | ' 
122f4                 | ' sub do_pinhi
122f4                 | _do_pinhi
122f4     00 4A 05 F6 | 	mov	COUNT_, #0
122f8     A8 00 A0 FD | 	call	#pushregs_
122fc     0C F0 07 F1 | 	add	ptra, #12
12300     A8 8F BF FD | 	call	#_pop
12304     A7 FA 61 FC | 	wrlong	result1, fp
12308     04 4E 05 F1 | 	add	fp, #4
1230c     A7 FC 61 FC | 	wrlong	result2, fp
12310     04 4E 05 F1 | 	add	fp, #4
12314     A7 FE 61 FC | 	wrlong	result3, fp
12318     08 4E 85 F1 | 	sub	fp, #8
1231c     A7 12 02 F6 | 	mov	arg01, fp
12320     6C 91 BF FD | 	call	#_converttoint
12324     59 FA 61 FD | 	drvh	result1
12328     A7 F0 03 F6 | 	mov	ptra, fp
1232c     B2 00 A0 FD | 	call	#popregs_
12330                 | _do_pinhi_ret
12330     2D 00 64 FD | 	ret
12334                 | 
12334                 | ' 
12334                 | ' '-------------------- pinlo
12334                 | ' 
12334                 | ' sub do_pinlo
12334                 | _do_pinlo
12334     00 4A 05 F6 | 	mov	COUNT_, #0
12338     A8 00 A0 FD | 	call	#pushregs_
1233c     0C F0 07 F1 | 	add	ptra, #12
12340     68 8F BF FD | 	call	#_pop
12344     A7 FA 61 FC | 	wrlong	result1, fp
12348     04 4E 05 F1 | 	add	fp, #4
1234c     A7 FC 61 FC | 	wrlong	result2, fp
12350     04 4E 05 F1 | 	add	fp, #4
12354     A7 FE 61 FC | 	wrlong	result3, fp
12358     08 4E 85 F1 | 	sub	fp, #8
1235c     A7 12 02 F6 | 	mov	arg01, fp
12360     2C 91 BF FD | 	call	#_converttoint
12364     58 FA 61 FD | 	drvl	result1
12368     A7 F0 03 F6 | 	mov	ptra, fp
1236c     B2 00 A0 FD | 	call	#popregs_
12370                 | _do_pinlo_ret
12370     2D 00 64 FD | 	ret
12374                 | 
12374                 | ' 
12374                 | ' '-------------------- pinread
12374                 | ' 
12374                 | ' sub do_pinread
12374                 | _do_pinread
12374     00 4A 05 F6 | 	mov	COUNT_, #0
12378     A8 00 A0 FD | 	call	#pushregs_
1237c     0C F0 07 F1 | 	add	ptra, #12
12380     28 8F BF FD | 	call	#_pop
12384     A7 FA 61 FC | 	wrlong	result1, fp
12388     04 4E 05 F1 | 	add	fp, #4
1238c     A7 FC 61 FC | 	wrlong	result2, fp
12390     04 4E 05 F1 | 	add	fp, #4
12394     A7 FE 61 FC | 	wrlong	result3, fp
12398     08 4E 85 F1 | 	sub	fp, #8
1239c     A7 12 02 F6 | 	mov	arg01, fp
123a0     EC 90 BF FD | 	call	#_converttoint
123a4     FD 12 02 F6 | 	mov	arg01, result1
123a8     20 12 CE F7 | 	test	arg01, #32 wz
123ac     FF FB 01 56 |  if_ne	mov	result1, inb
123b0     FE FB 01 A6 |  if_e	mov	result1, ina
123b4     09 FB 41 F0 | 	shr	result1, arg01
123b8     06 12 46 F0 | 	shr	arg01, #6
123bc     09 FB 41 F7 | 	zerox	result1, arg01
123c0     52 00 00 FF 
123c4     14 E4 05 F1 | 	add	objptr, ##42004
123c8     F2 FA 61 FC | 	wrlong	result1, objptr
123cc     52 00 00 FF 
123d0     14 E4 85 F1 | 	sub	objptr, ##42004
123d4     08 4E 05 F1 | 	add	fp, #8
123d8     A7 3A 68 FC | 	wrlong	#29, fp
123dc     08 4E 85 F1 | 	sub	fp, #8
123e0     A7 08 68 FC | 	wrlong	#4, fp
123e4     A7 12 02 F6 | 	mov	arg01, fp
123e8     58 8F BF FD | 	call	#_push
123ec     A7 F0 03 F6 | 	mov	ptra, fp
123f0     B2 00 A0 FD | 	call	#popregs_
123f4                 | _do_pinread_ret
123f4     2D 00 64 FD | 	ret
123f8                 | 
123f8                 | ' 
123f8                 | ' '-------------------- pinstart
123f8                 | ' 
123f8                 | ' sub do_pinstart
123f8                 | _do_pinstart
123f8     03 4A 05 F6 | 	mov	COUNT_, #3
123fc     A8 00 A0 FD | 	call	#pushregs_
12400     30 F0 07 F1 | 	add	ptra, #48
12404     A4 8E BF FD | 	call	#_pop
12408     FD 16 02 F6 | 	mov	arg03, result1
1240c     FE 14 02 F6 | 	mov	arg02, result2
12410     FF 18 02 F6 | 	mov	arg04, result3
12414     A7 16 62 FC | 	wrlong	arg03, fp
12418     04 4E 05 F1 | 	add	fp, #4
1241c     A7 14 62 FC | 	wrlong	arg02, fp
12420     04 4E 05 F1 | 	add	fp, #4
12424     A7 18 62 FC | 	wrlong	arg04, fp
12428     08 4E 85 F1 | 	sub	fp, #8
1242c     7C 8E BF FD | 	call	#_pop
12430     FD 16 02 F6 | 	mov	arg03, result1
12434     FE 14 02 F6 | 	mov	arg02, result2
12438     FF 18 02 F6 | 	mov	arg04, result3
1243c     0C 4E 05 F1 | 	add	fp, #12
12440     A7 16 62 FC | 	wrlong	arg03, fp
12444     04 4E 05 F1 | 	add	fp, #4
12448     A7 14 62 FC | 	wrlong	arg02, fp
1244c     04 4E 05 F1 | 	add	fp, #4
12450     A7 18 62 FC | 	wrlong	arg04, fp
12454     14 4E 85 F1 | 	sub	fp, #20
12458     50 8E BF FD | 	call	#_pop
1245c     FD 16 02 F6 | 	mov	arg03, result1
12460     FE 14 02 F6 | 	mov	arg02, result2
12464     FF 18 02 F6 | 	mov	arg04, result3
12468     18 4E 05 F1 | 	add	fp, #24
1246c     A7 16 62 FC | 	wrlong	arg03, fp
12470     04 4E 05 F1 | 	add	fp, #4
12474     A7 14 62 FC | 	wrlong	arg02, fp
12478     04 4E 05 F1 | 	add	fp, #4
1247c     A7 18 62 FC | 	wrlong	arg04, fp
12480     20 4E 85 F1 | 	sub	fp, #32
12484     24 8E BF FD | 	call	#_pop
12488     FF 16 02 F6 | 	mov	arg03, result3
1248c     24 4E 05 F1 | 	add	fp, #36
12490     A7 FA 61 FC | 	wrlong	result1, fp
12494     04 4E 05 F1 | 	add	fp, #4
12498     A7 FC 61 FC | 	wrlong	result2, fp
1249c     04 4E 05 F1 | 	add	fp, #4
124a0     A7 16 62 FC | 	wrlong	arg03, fp
124a4     08 4E 85 F1 | 	sub	fp, #8
124a8     A7 12 02 F6 | 	mov	arg01, fp
124ac     24 4E 85 F1 | 	sub	fp, #36
124b0     DC 8F BF FD | 	call	#_converttoint
124b4     FD 1E 02 F6 | 	mov	local01, result1
124b8     18 4E 05 F1 | 	add	fp, #24
124bc     A7 12 02 F6 | 	mov	arg01, fp
124c0     18 4E 85 F1 | 	sub	fp, #24
124c4     C8 8F BF FD | 	call	#_converttoint
124c8     FD 20 02 F6 | 	mov	local02, result1
124cc     0C 4E 05 F1 | 	add	fp, #12
124d0     A7 12 02 F6 | 	mov	arg01, fp
124d4     0C 4E 85 F1 | 	sub	fp, #12
124d8     B4 8F BF FD | 	call	#_converttoint
124dc     FD 22 02 F6 | 	mov	local03, result1
124e0     A7 12 02 F6 | 	mov	arg01, fp
124e4     A8 8F BF FD | 	call	#_converttoint
124e8     40 1E 62 FD | 	dirl	local01
124ec     0F 21 02 FC | 	wrpin	local02, local01
124f0     0F 23 12 FC | 	wxpin	local03, local01
124f4     0F FB 21 FC | 	wypin	result1, local01
124f8     41 1E 62 FD | 	dirh	local01
124fc     A7 F0 03 F6 | 	mov	ptra, fp
12500     B2 00 A0 FD | 	call	#popregs_
12504                 | _do_pinstart_ret
12504     2D 00 64 FD | 	ret
12508                 | 
12508                 | ' 
12508                 | ' '-------------------- pintoggle
12508                 | ' 
12508                 | ' sub do_pintoggle
12508                 | _do_pintoggle
12508     00 4A 05 F6 | 	mov	COUNT_, #0
1250c     A8 00 A0 FD | 	call	#pushregs_
12510     0C F0 07 F1 | 	add	ptra, #12
12514     94 8D BF FD | 	call	#_pop
12518     A7 FA 61 FC | 	wrlong	result1, fp
1251c     04 4E 05 F1 | 	add	fp, #4
12520     A7 FC 61 FC | 	wrlong	result2, fp
12524     04 4E 05 F1 | 	add	fp, #4
12528     A7 FE 61 FC | 	wrlong	result3, fp
1252c     08 4E 85 F1 | 	sub	fp, #8
12530     A7 12 02 F6 | 	mov	arg01, fp
12534     58 8F BF FD | 	call	#_converttoint
12538     5F FA 61 FD | 	drvnot	result1
1253c     A7 F0 03 F6 | 	mov	ptra, fp
12540     B2 00 A0 FD | 	call	#popregs_
12544                 | _do_pintoggle_ret
12544     2D 00 64 FD | 	ret
12548                 | 
12548                 | ' 
12548                 | ' '-------------------- pinwrite
12548                 | ' 
12548                 | ' sub do_pinwrite
12548                 | _do_pinwrite
12548     01 4A 05 F6 | 	mov	COUNT_, #1
1254c     A8 00 A0 FD | 	call	#pushregs_
12550     18 F0 07 F1 | 	add	ptra, #24
12554     54 8D BF FD | 	call	#_pop
12558     FD 14 02 F6 | 	mov	arg02, result1
1255c     FE 12 02 F6 | 	mov	arg01, result2
12560     FF 1E 02 F6 | 	mov	local01, result3
12564     A7 14 62 FC | 	wrlong	arg02, fp
12568     04 4E 05 F1 | 	add	fp, #4
1256c     A7 12 62 FC | 	wrlong	arg01, fp
12570     04 4E 05 F1 | 	add	fp, #4
12574     A7 1E 62 FC | 	wrlong	local01, fp
12578     08 4E 85 F1 | 	sub	fp, #8
1257c     2C 8D BF FD | 	call	#_pop
12580     FF 1E 02 F6 | 	mov	local01, result3
12584     0C 4E 05 F1 | 	add	fp, #12
12588     A7 FA 61 FC | 	wrlong	result1, fp
1258c     04 4E 05 F1 | 	add	fp, #4
12590     A7 FC 61 FC | 	wrlong	result2, fp
12594     04 4E 05 F1 | 	add	fp, #4
12598     A7 1E 62 FC | 	wrlong	local01, fp
1259c     08 4E 85 F1 | 	sub	fp, #8
125a0     A7 12 02 F6 | 	mov	arg01, fp
125a4     0C 4E 85 F1 | 	sub	fp, #12
125a8     E4 8E BF FD | 	call	#_converttoint
125ac     FD 1E 02 F6 | 	mov	local01, result1
125b0     A7 12 02 F6 | 	mov	arg01, fp
125b4     D8 8E BF FD | 	call	#_converttoint
125b8     FD 14 02 F6 | 	mov	arg02, result1
125bc     0F 13 02 F6 | 	mov	arg01, local01
125c0     54 E5 B0 FD | 	call	#__system___pinwrite
125c4     A7 F0 03 F6 | 	mov	ptra, fp
125c8     B2 00 A0 FD | 	call	#popregs_
125cc                 | _do_pinwrite_ret
125cc     2D 00 64 FD | 	ret
125d0                 | 
125d0                 | ' 
125d0                 | ' '-------------------- play
125d0                 | ' 
125d0                 | ' sub do_play
125d0                 | _do_play
125d0     08 4A 05 F6 | 	mov	COUNT_, #8
125d4     A8 00 A0 FD | 	call	#pushregs_
125d8     7C F0 07 F1 | 	add	ptra, #124
125dc     68 4E 05 F1 | 	add	fp, #104
125e0     77 CC A1 FF 
125e4     A7 7C 6B FC | 	wrlong	##1134096318, fp
125e8                 | ' speed_coeff=305.873
125e8                 | ' 
125e8                 | ' for i=0 to 8 : params(i)=-2.0 : next i
125e8     64 4E 85 F1 | 	sub	fp, #100
125ec     A7 00 68 FC | 	wrlong	#0, fp
125f0     97 18 48 FB | 	callpa	#(@LR__1571-@LR__1570)>>2,fcache_load_ptr_
125f4                 | LR__1570
125f4     A7 16 02 FB | 	rdlong	arg03, fp
125f8     02 16 66 F0 | 	shl	arg03, #2
125fc     34 4E 05 F1 | 	add	fp, #52
12600     A7 16 02 F1 | 	add	arg03, fp
12604     00 00 E0 FF 
12608     0B 01 68 FC | 	wrlong	##-1073741824, arg03
1260c     34 4E 85 F1 | 	sub	fp, #52
12610     A7 1E 02 FB | 	rdlong	local01, fp
12614     01 1E 06 F1 | 	add	local01, #1
12618     A7 1E 62 FC | 	wrlong	local01, fp
1261c     09 1E 56 F2 | 	cmps	local01, #9 wc
12620     D0 FF 9F CD |  if_b	jmp	#LR__1570
12624                 | LR__1571
12624     04 4E 85 F1 | 	sub	fp, #4
12628     4A 00 00 FF 
1262c     80 E4 05 F1 | 	add	objptr, ##38016
12630     F2 20 02 FB | 	rdlong	local02, objptr
12634     10 23 02 F6 | 	mov	local03, local02
12638     01 22 66 F0 | 	shl	local03, #1
1263c     10 23 02 F1 | 	add	local03, local02
12640     02 22 66 F0 | 	shl	local03, #2
12644     03 00 00 FF 
12648     04 E4 85 F1 | 	sub	objptr, ##1540
1264c     F2 22 02 F1 | 	add	local03, objptr
12650     11 25 02 FB | 	rdlong	local04, local03
12654     A7 24 62 FC | 	wrlong	local04, fp
12658                 | ' numpar=compiledline(lineptr_e).result.uresult
12658                 | ' for i=numpar to 1 step -1 
12658     04 4E 05 F1 | 	add	fp, #4
1265c     A7 24 62 FC | 	wrlong	local04, fp
12660     04 4E 85 F1 | 	sub	fp, #4
12664     47 00 00 FF 
12668     7C E4 85 F1 | 	sub	objptr, ##36476
1266c                 | LR__1572
1266c     3C 8C BF FD | 	call	#_pop
12670     5C 4E 05 F1 | 	add	fp, #92
12674     A7 FA 61 FC | 	wrlong	result1, fp
12678     04 4E 05 F1 | 	add	fp, #4
1267c     A7 FC 61 FC | 	wrlong	result2, fp
12680     04 4E 05 F1 | 	add	fp, #4
12684     A7 FE 61 FC | 	wrlong	result3, fp
12688     60 4E 85 F1 | 	sub	fp, #96
1268c     A7 22 02 FB | 	rdlong	local03, fp
12690     01 22 86 F1 | 	sub	local03, #1
12694     02 22 66 F0 | 	shl	local03, #2
12698     34 4E 05 F1 | 	add	fp, #52
1269c     A7 22 02 F1 | 	add	local03, fp
126a0     24 4E 05 F1 | 	add	fp, #36
126a4     A7 26 02 F6 | 	mov	local05, fp
126a8     13 13 02 F6 | 	mov	arg01, local05
126ac     5C 4E 85 F1 | 	sub	fp, #92
126b0     98 8E BF FD | 	call	#_converttofloat
126b4     11 FB 61 FC | 	wrlong	result1, local03
126b8     04 4E 05 F1 | 	add	fp, #4
126bc     A7 1E 02 FB | 	rdlong	local01, fp
126c0     01 1E 86 F1 | 	sub	local01, #1
126c4     A7 1E 62 FC | 	wrlong	local01, fp
126c8     04 4E 85 F1 | 	sub	fp, #4
126cc     01 1E 56 F2 | 	cmps	local01, #1 wc
126d0     98 FF 9F 3D |  if_ae	jmp	#LR__1572
126d4                 | ' 
126d4                 | ' if params(0)<0 then channel=0 else channel=round(params(0)) mod 8
126d4     38 4E 05 F1 | 	add	fp, #56
126d8     A7 12 02 FB | 	rdlong	arg01, fp
126dc     38 4E 85 F1 | 	sub	fp, #56
126e0     00 14 06 F6 | 	mov	arg02, #0
126e4     01 16 06 F6 | 	mov	arg03, #1
126e8     60 12 B1 FD | 	call	#__system___float_cmp
126ec     00 FA 55 F2 | 	cmps	result1, #0 wc
126f0     0C 4E 05 C1 |  if_b	add	fp, #12
126f4     A7 00 68 CC |  if_b	wrlong	#0, fp
126f8     0C 4E 85 C1 |  if_b	sub	fp, #12
126fc     2C 00 90 CD |  if_b	jmp	#LR__1573
12700     38 4E 05 F1 | 	add	fp, #56
12704     A7 12 02 FB | 	rdlong	arg01, fp
12708     38 4E 85 F1 | 	sub	fp, #56
1270c     01 14 06 F6 | 	mov	arg02, #1
12710     CC 12 B1 FD | 	call	#__system___float_tointeger
12714     FD 1E 52 F6 | 	abs	local01, result1 wc
12718     07 1E 06 F5 | 	and	local01, #7
1271c     0F 1F 82 F6 | 	negc	local01, local01
12720     0C 4E 05 F1 | 	add	fp, #12
12724     A7 1E 62 FC | 	wrlong	local01, fp
12728     0C 4E 85 F1 | 	sub	fp, #12
1272c                 | LR__1573
1272c                 | ' if params(1)<0 then freq=channels(channel).freq else freq=params(1) : channels(channel).freq=freq
1272c     3C 4E 05 F1 | 	add	fp, #60
12730     A7 12 02 FB | 	rdlong	arg01, fp
12734     3C 4E 85 F1 | 	sub	fp, #60
12738     00 14 06 F6 | 	mov	arg02, #0
1273c     01 16 06 F6 | 	mov	arg03, #1
12740     08 12 B1 FD | 	call	#__system___float_cmp
12744     00 FA 55 F2 | 	cmps	result1, #0 wc
12748     40 00 90 3D |  if_ae	jmp	#LR__1574
1274c     0C 4E 05 F1 | 	add	fp, #12
12750     A7 20 02 FB | 	rdlong	local02, fp
12754     10 23 02 F6 | 	mov	local03, local02
12758     01 22 66 F0 | 	shl	local03, #1
1275c     10 23 02 F1 | 	add	local03, local02
12760     03 22 66 F0 | 	shl	local03, #3
12764     14 00 00 FF 
12768     38 E5 05 F1 | 	add	objptr, ##10552
1276c     F2 22 02 F1 | 	add	local03, objptr
12770     11 29 02 FB | 	rdlong	local06, local03
12774     60 4E 05 F1 | 	add	fp, #96
12778     A7 28 62 FC | 	wrlong	local06, fp
1277c     6C 4E 85 F1 | 	sub	fp, #108
12780     14 00 00 FF 
12784     38 E5 85 F1 | 	sub	objptr, ##10552
12788     44 00 90 FD | 	jmp	#LR__1575
1278c                 | LR__1574
1278c     3C 4E 05 F1 | 	add	fp, #60
12790     A7 24 02 FB | 	rdlong	local04, fp
12794     30 4E 05 F1 | 	add	fp, #48
12798     A7 24 62 FC | 	wrlong	local04, fp
1279c     60 4E 85 F1 | 	sub	fp, #96
127a0     A7 20 02 FB | 	rdlong	local02, fp
127a4     10 23 02 F6 | 	mov	local03, local02
127a8     01 22 66 F0 | 	shl	local03, #1
127ac     10 23 02 F1 | 	add	local03, local02
127b0     03 22 66 F0 | 	shl	local03, #3
127b4     14 00 00 FF 
127b8     38 E5 05 F1 | 	add	objptr, ##10552
127bc     F2 22 02 F1 | 	add	local03, objptr
127c0     0C 4E 85 F1 | 	sub	fp, #12
127c4     11 25 62 FC | 	wrlong	local04, local03
127c8     14 00 00 FF 
127cc     38 E5 85 F1 | 	sub	objptr, ##10552
127d0                 | LR__1575
127d0                 | ' if params(2)<0 orelse params(2)>10000.0 then delay=channels(channel).delay else delay=round(params(2)) : channels(channel).delay=delay
127d0     40 4E 05 F1 | 	add	fp, #64
127d4     A7 12 02 FB | 	rdlong	arg01, fp
127d8     40 4E 85 F1 | 	sub	fp, #64
127dc     00 14 06 F6 | 	mov	arg02, #0
127e0     01 16 06 F6 | 	mov	arg03, #1
127e4     64 11 B1 FD | 	call	#__system___float_cmp
127e8     00 FA 55 F2 | 	cmps	result1, #0 wc
127ec     24 00 90 CD |  if_b	jmp	#LR__1576
127f0     40 4E 05 F1 | 	add	fp, #64
127f4     A7 12 02 FB | 	rdlong	arg01, fp
127f8     40 4E 85 F1 | 	sub	fp, #64
127fc     20 0E 23 FF 
12800     00 14 06 F6 | 	mov	arg02, ##1176256512
12804     01 16 66 F6 | 	neg	arg03, #1
12808     40 11 B1 FD | 	call	#__system___float_cmp
1280c     01 FA 55 F2 | 	cmps	result1, #1 wc
12810     48 00 90 CD |  if_b	jmp	#LR__1577
12814                 | LR__1576
12814     0C 4E 05 F1 | 	add	fp, #12
12818     A7 22 02 FB | 	rdlong	local03, fp
1281c     11 2B 02 F6 | 	mov	local07, local03
12820     01 2A 66 F0 | 	shl	local07, #1
12824     11 2B 02 F1 | 	add	local07, local03
12828     03 2A 66 F0 | 	shl	local07, #3
1282c     14 00 00 FF 
12830     38 E5 05 F1 | 	add	objptr, ##10552
12834     F2 2A 02 F1 | 	add	local07, objptr
12838     06 2A 06 F1 | 	add	local07, #6
1283c     15 27 E2 FA | 	rdword	local05, local07
12840     13 25 32 F9 | 	getword	local04, local05, #0
12844     1C 4E 05 F1 | 	add	fp, #28
12848     A7 24 62 FC | 	wrlong	local04, fp
1284c     28 4E 85 F1 | 	sub	fp, #40
12850     14 00 00 FF 
12854     38 E5 85 F1 | 	sub	objptr, ##10552
12858     54 00 90 FD | 	jmp	#LR__1578
1285c                 | LR__1577
1285c     40 4E 05 F1 | 	add	fp, #64
12860     A7 12 02 FB | 	rdlong	arg01, fp
12864     40 4E 85 F1 | 	sub	fp, #64
12868     01 14 06 F6 | 	mov	arg02, #1
1286c     70 11 B1 FD | 	call	#__system___float_tointeger
12870     28 4E 05 F1 | 	add	fp, #40
12874     A7 FA 61 FC | 	wrlong	result1, fp
12878     1C 4E 85 F1 | 	sub	fp, #28
1287c     A7 20 02 FB | 	rdlong	local02, fp
12880     10 23 02 F6 | 	mov	local03, local02
12884     01 22 66 F0 | 	shl	local03, #1
12888     10 23 02 F1 | 	add	local03, local02
1288c     03 22 66 F0 | 	shl	local03, #3
12890     14 00 00 FF 
12894     38 E5 05 F1 | 	add	objptr, ##10552
12898     F2 22 02 F1 | 	add	local03, objptr
1289c     0C 4E 85 F1 | 	sub	fp, #12
128a0     06 22 06 F1 | 	add	local03, #6
128a4     11 FB 51 FC | 	wrword	result1, local03
128a8     14 00 00 FF 
128ac     38 E5 85 F1 | 	sub	objptr, ##10552
128b0                 | LR__1578
128b0                 | ' if params(3)<0 orelse params(3)>16.384 then vol=channels(channel).vol else vol=params(3) : channels(channel).vol=vol
128b0     44 4E 05 F1 | 	add	fp, #68
128b4     A7 12 02 FB | 	rdlong	arg01, fp
128b8     44 4E 85 F1 | 	sub	fp, #68
128bc     00 14 06 F6 | 	mov	arg02, #0
128c0     01 16 06 F6 | 	mov	arg03, #1
128c4     84 10 B1 FD | 	call	#__system___float_cmp
128c8     00 FA 55 F2 | 	cmps	result1, #0 wc
128cc     24 00 90 CD |  if_b	jmp	#LR__1579
128d0     44 4E 05 F1 | 	add	fp, #68
128d4     A7 12 02 FB | 	rdlong	arg01, fp
128d8     44 4E 85 F1 | 	sub	fp, #68
128dc     89 C1 20 FF 
128e0     6F 14 06 F6 | 	mov	arg02, ##1099108975
128e4     01 16 66 F6 | 	neg	arg03, #1
128e8     60 10 B1 FD | 	call	#__system___float_cmp
128ec     01 FA 55 F2 | 	cmps	result1, #1 wc
128f0     44 00 90 CD |  if_b	jmp	#LR__1580
128f4                 | LR__1579
128f4     0C 4E 05 F1 | 	add	fp, #12
128f8     A7 20 02 FB | 	rdlong	local02, fp
128fc     10 23 02 F6 | 	mov	local03, local02
12900     01 22 66 F0 | 	shl	local03, #1
12904     10 23 02 F1 | 	add	local03, local02
12908     03 22 66 F0 | 	shl	local03, #3
1290c     14 00 00 FF 
12910     38 E5 05 F1 | 	add	objptr, ##10552
12914     F2 22 02 F1 | 	add	local03, objptr
12918     0C 22 06 F1 | 	add	local03, #12
1291c     11 29 02 FB | 	rdlong	local06, local03
12920     68 4E 05 F1 | 	add	fp, #104
12924     A7 28 62 FC | 	wrlong	local06, fp
12928     74 4E 85 F1 | 	sub	fp, #116
1292c     14 00 00 FF 
12930     38 E5 85 F1 | 	sub	objptr, ##10552
12934     48 00 90 FD | 	jmp	#LR__1581
12938                 | LR__1580
12938     44 4E 05 F1 | 	add	fp, #68
1293c     A7 24 02 FB | 	rdlong	local04, fp
12940     30 4E 05 F1 | 	add	fp, #48
12944     A7 24 62 FC | 	wrlong	local04, fp
12948     68 4E 85 F1 | 	sub	fp, #104
1294c     A7 20 02 FB | 	rdlong	local02, fp
12950     10 23 02 F6 | 	mov	local03, local02
12954     01 22 66 F0 | 	shl	local03, #1
12958     10 23 02 F1 | 	add	local03, local02
1295c     03 22 66 F0 | 	shl	local03, #3
12960     14 00 00 FF 
12964     38 E5 05 F1 | 	add	objptr, ##10552
12968     F2 22 02 F1 | 	add	local03, objptr
1296c     0C 4E 85 F1 | 	sub	fp, #12
12970     0C 22 06 F1 | 	add	local03, #12
12974     11 25 62 FC | 	wrlong	local04, local03
12978     14 00 00 FF 
1297c     38 E5 85 F1 | 	sub	objptr, ##10552
12980                 | LR__1581
12980                 | ' if params(4)<0 orelse params(4)>32 then wave=channels(channel).wave else wave=round(params(4)) : channels(channel).wave=wave
12980     48 4E 05 F1 | 	add	fp, #72
12984     A7 12 02 FB | 	rdlong	arg01, fp
12988     48 4E 85 F1 | 	sub	fp, #72
1298c     00 14 06 F6 | 	mov	arg02, #0
12990     01 16 06 F6 | 	mov	arg03, #1
12994     B4 0F B1 FD | 	call	#__system___float_cmp
12998     00 FA 55 F2 | 	cmps	result1, #0 wc
1299c     24 00 90 CD |  if_b	jmp	#LR__1582
129a0     48 4E 05 F1 | 	add	fp, #72
129a4     A7 12 02 FB | 	rdlong	arg01, fp
129a8     48 4E 85 F1 | 	sub	fp, #72
129ac     00 00 21 FF 
129b0     00 14 06 F6 | 	mov	arg02, ##1107296256
129b4     01 16 66 F6 | 	neg	arg03, #1
129b8     90 0F B1 FD | 	call	#__system___float_cmp
129bc     01 FA 55 F2 | 	cmps	result1, #1 wc
129c0     48 00 90 CD |  if_b	jmp	#LR__1583
129c4                 | LR__1582
129c4     0C 4E 05 F1 | 	add	fp, #12
129c8     A7 22 02 FB | 	rdlong	local03, fp
129cc     11 2B 02 F6 | 	mov	local07, local03
129d0     01 2A 66 F0 | 	shl	local07, #1
129d4     11 2B 02 F1 | 	add	local07, local03
129d8     03 2A 66 F0 | 	shl	local07, #3
129dc     14 00 00 FF 
129e0     38 E5 05 F1 | 	add	objptr, ##10552
129e4     F2 2A 02 F1 | 	add	local07, objptr
129e8     04 2A 06 F1 | 	add	local07, #4
129ec     15 27 C2 FA | 	rdbyte	local05, local07
129f0     13 25 E2 F8 | 	getbyte	local04, local05, #0
129f4     14 4E 05 F1 | 	add	fp, #20
129f8     A7 24 62 FC | 	wrlong	local04, fp
129fc     20 4E 85 F1 | 	sub	fp, #32
12a00     14 00 00 FF 
12a04     38 E5 85 F1 | 	sub	objptr, ##10552
12a08     54 00 90 FD | 	jmp	#LR__1584
12a0c                 | LR__1583
12a0c     48 4E 05 F1 | 	add	fp, #72
12a10     A7 12 02 FB | 	rdlong	arg01, fp
12a14     48 4E 85 F1 | 	sub	fp, #72
12a18     01 14 06 F6 | 	mov	arg02, #1
12a1c     C0 0F B1 FD | 	call	#__system___float_tointeger
12a20     20 4E 05 F1 | 	add	fp, #32
12a24     A7 FA 61 FC | 	wrlong	result1, fp
12a28     14 4E 85 F1 | 	sub	fp, #20
12a2c     A7 20 02 FB | 	rdlong	local02, fp
12a30     10 23 02 F6 | 	mov	local03, local02
12a34     01 22 66 F0 | 	shl	local03, #1
12a38     10 23 02 F1 | 	add	local03, local02
12a3c     03 22 66 F0 | 	shl	local03, #3
12a40     14 00 00 FF 
12a44     38 E5 05 F1 | 	add	objptr, ##10552
12a48     F2 22 02 F1 | 	add	local03, objptr
12a4c     0C 4E 85 F1 | 	sub	fp, #12
12a50     04 22 06 F1 | 	add	local03, #4
12a54     11 FB 41 FC | 	wrbyte	result1, local03
12a58     14 00 00 FF 
12a5c     38 E5 85 F1 | 	sub	objptr, ##10552
12a60                 | LR__1584
12a60                 | ' if params(5)<0 orelse params(5)>8.0 then env=channels(channel).env else env=round(params(5)) : channels(channel).env=env
12a60     4C 4E 05 F1 | 	add	fp, #76
12a64     A7 12 02 FB | 	rdlong	arg01, fp
12a68     4C 4E 85 F1 | 	sub	fp, #76
12a6c     00 14 06 F6 | 	mov	arg02, #0
12a70     01 16 06 F6 | 	mov	arg03, #1
12a74     D4 0E B1 FD | 	call	#__system___float_cmp
12a78     00 FA 55 F2 | 	cmps	result1, #0 wc
12a7c     24 00 90 CD |  if_b	jmp	#LR__1585
12a80     4C 4E 05 F1 | 	add	fp, #76
12a84     A7 12 02 FB | 	rdlong	arg01, fp
12a88     4C 4E 85 F1 | 	sub	fp, #76
12a8c     00 80 20 FF 
12a90     00 14 06 F6 | 	mov	arg02, ##1090519040
12a94     01 16 66 F6 | 	neg	arg03, #1
12a98     B0 0E B1 FD | 	call	#__system___float_cmp
12a9c     01 FA 55 F2 | 	cmps	result1, #1 wc
12aa0     48 00 90 CD |  if_b	jmp	#LR__1586
12aa4                 | LR__1585
12aa4     0C 4E 05 F1 | 	add	fp, #12
12aa8     A7 22 02 FB | 	rdlong	local03, fp
12aac     11 2B 02 F6 | 	mov	local07, local03
12ab0     01 2A 66 F0 | 	shl	local07, #1
12ab4     11 2B 02 F1 | 	add	local07, local03
12ab8     03 2A 66 F0 | 	shl	local07, #3
12abc     14 00 00 FF 
12ac0     38 E5 05 F1 | 	add	objptr, ##10552
12ac4     F2 2A 02 F1 | 	add	local07, objptr
12ac8     05 2A 06 F1 | 	add	local07, #5
12acc     15 27 C2 FA | 	rdbyte	local05, local07
12ad0     13 25 E2 F8 | 	getbyte	local04, local05, #0
12ad4     18 4E 05 F1 | 	add	fp, #24
12ad8     A7 24 62 FC | 	wrlong	local04, fp
12adc     24 4E 85 F1 | 	sub	fp, #36
12ae0     14 00 00 FF 
12ae4     38 E5 85 F1 | 	sub	objptr, ##10552
12ae8     54 00 90 FD | 	jmp	#LR__1587
12aec                 | LR__1586
12aec     4C 4E 05 F1 | 	add	fp, #76
12af0     A7 12 02 FB | 	rdlong	arg01, fp
12af4     4C 4E 85 F1 | 	sub	fp, #76
12af8     01 14 06 F6 | 	mov	arg02, #1
12afc     E0 0E B1 FD | 	call	#__system___float_tointeger
12b00     24 4E 05 F1 | 	add	fp, #36
12b04     A7 FA 61 FC | 	wrlong	result1, fp
12b08     18 4E 85 F1 | 	sub	fp, #24
12b0c     A7 20 02 FB | 	rdlong	local02, fp
12b10     10 23 02 F6 | 	mov	local03, local02
12b14     01 22 66 F0 | 	shl	local03, #1
12b18     10 23 02 F1 | 	add	local03, local02
12b1c     03 22 66 F0 | 	shl	local03, #3
12b20     14 00 00 FF 
12b24     38 E5 05 F1 | 	add	objptr, ##10552
12b28     F2 22 02 F1 | 	add	local03, objptr
12b2c     0C 4E 85 F1 | 	sub	fp, #12
12b30     05 22 06 F1 | 	add	local03, #5
12b34     11 FB 41 FC | 	wrbyte	result1, local03
12b38     14 00 00 FF 
12b3c     38 E5 85 F1 | 	sub	objptr, ##10552
12b40                 | LR__1587
12b40                 | ' if params(6)<0 orelse params(6)>1000.0 then slen=channels(channel).length else slen=params(6) : channels(channel).length=slen
12b40     50 4E 05 F1 | 	add	fp, #80
12b44     A7 12 02 FB | 	rdlong	arg01, fp
12b48     50 4E 85 F1 | 	sub	fp, #80
12b4c     00 14 06 F6 | 	mov	arg02, #0
12b50     01 16 06 F6 | 	mov	arg03, #1
12b54     F4 0D B1 FD | 	call	#__system___float_cmp
12b58     00 FA 55 F2 | 	cmps	result1, #0 wc
12b5c     24 00 90 CD |  if_b	jmp	#LR__1588
12b60     50 4E 05 F1 | 	add	fp, #80
12b64     A7 12 02 FB | 	rdlong	arg01, fp
12b68     50 4E 85 F1 | 	sub	fp, #80
12b6c     00 3D 22 FF 
12b70     00 14 06 F6 | 	mov	arg02, ##1148846080
12b74     01 16 66 F6 | 	neg	arg03, #1
12b78     D0 0D B1 FD | 	call	#__system___float_cmp
12b7c     01 FA 55 F2 | 	cmps	result1, #1 wc
12b80     44 00 90 CD |  if_b	jmp	#LR__1589
12b84                 | LR__1588
12b84     0C 4E 05 F1 | 	add	fp, #12
12b88     A7 20 02 FB | 	rdlong	local02, fp
12b8c     10 23 02 F6 | 	mov	local03, local02
12b90     01 22 66 F0 | 	shl	local03, #1
12b94     10 23 02 F1 | 	add	local03, local02
12b98     03 22 66 F0 | 	shl	local03, #3
12b9c     14 00 00 FF 
12ba0     38 E5 05 F1 | 	add	objptr, ##10552
12ba4     F2 22 02 F1 | 	add	local03, objptr
12ba8     08 22 06 F1 | 	add	local03, #8
12bac     11 29 02 FB | 	rdlong	local06, local03
12bb0     6C 4E 05 F1 | 	add	fp, #108
12bb4     A7 28 62 FC | 	wrlong	local06, fp
12bb8     78 4E 85 F1 | 	sub	fp, #120
12bbc     14 00 00 FF 
12bc0     38 E5 85 F1 | 	sub	objptr, ##10552
12bc4     48 00 90 FD | 	jmp	#LR__1590
12bc8                 | LR__1589
12bc8     50 4E 05 F1 | 	add	fp, #80
12bcc     A7 28 02 FB | 	rdlong	local06, fp
12bd0     28 4E 05 F1 | 	add	fp, #40
12bd4     A7 28 62 FC | 	wrlong	local06, fp
12bd8     6C 4E 85 F1 | 	sub	fp, #108
12bdc     A7 20 02 FB | 	rdlong	local02, fp
12be0     10 23 02 F6 | 	mov	local03, local02
12be4     01 22 66 F0 | 	shl	local03, #1
12be8     10 23 02 F1 | 	add	local03, local02
12bec     03 22 66 F0 | 	shl	local03, #3
12bf0     14 00 00 FF 
12bf4     38 E5 05 F1 | 	add	objptr, ##10552
12bf8     F2 22 02 F1 | 	add	local03, objptr
12bfc     0C 4E 85 F1 | 	sub	fp, #12
12c00     08 22 06 F1 | 	add	local03, #8
12c04     11 29 62 FC | 	wrlong	local06, local03
12c08     14 00 00 FF 
12c0c     38 E5 85 F1 | 	sub	objptr, ##10552
12c10                 | LR__1590
12c10                 | ' if params(7)<-1.0 orelse params(7)>1.0 then pan=channels(channel).pan else pan= params(7) : channels(channel).pan=pan
12c10     54 4E 05 F1 | 	add	fp, #84
12c14     A7 12 02 FB | 	rdlong	arg01, fp
12c18     54 4E 85 F1 | 	sub	fp, #84
12c1c     00 C0 5F FF 
12c20     00 14 06 F6 | 	mov	arg02, ##-1082130432
12c24     01 16 06 F6 | 	mov	arg03, #1
12c28     20 0D B1 FD | 	call	#__system___float_cmp
12c2c     00 FA 55 F2 | 	cmps	result1, #0 wc
12c30     24 00 90 CD |  if_b	jmp	#LR__1591
12c34     54 4E 05 F1 | 	add	fp, #84
12c38     A7 12 02 FB | 	rdlong	arg01, fp
12c3c     54 4E 85 F1 | 	sub	fp, #84
12c40     00 C0 1F FF 
12c44     00 14 06 F6 | 	mov	arg02, ##1065353216
12c48     01 16 66 F6 | 	neg	arg03, #1
12c4c     FC 0C B1 FD | 	call	#__system___float_cmp
12c50     01 FA 55 F2 | 	cmps	result1, #1 wc
12c54     44 00 90 CD |  if_b	jmp	#LR__1592
12c58                 | LR__1591
12c58     0C 4E 05 F1 | 	add	fp, #12
12c5c     A7 20 02 FB | 	rdlong	local02, fp
12c60     10 23 02 F6 | 	mov	local03, local02
12c64     01 22 66 F0 | 	shl	local03, #1
12c68     10 23 02 F1 | 	add	local03, local02
12c6c     03 22 66 F0 | 	shl	local03, #3
12c70     14 00 00 FF 
12c74     38 E5 05 F1 | 	add	objptr, ##10552
12c78     F2 22 02 F1 | 	add	local03, objptr
12c7c     10 22 06 F1 | 	add	local03, #16
12c80     11 29 02 FB | 	rdlong	local06, local03
12c84     64 4E 05 F1 | 	add	fp, #100
12c88     A7 28 62 FC | 	wrlong	local06, fp
12c8c     70 4E 85 F1 | 	sub	fp, #112
12c90     14 00 00 FF 
12c94     38 E5 85 F1 | 	sub	objptr, ##10552
12c98     48 00 90 FD | 	jmp	#LR__1593
12c9c                 | LR__1592
12c9c     54 4E 05 F1 | 	add	fp, #84
12ca0     A7 28 02 FB | 	rdlong	local06, fp
12ca4     1C 4E 05 F1 | 	add	fp, #28
12ca8     A7 28 62 FC | 	wrlong	local06, fp
12cac     64 4E 85 F1 | 	sub	fp, #100
12cb0     A7 20 02 FB | 	rdlong	local02, fp
12cb4     10 23 02 F6 | 	mov	local03, local02
12cb8     01 22 66 F0 | 	shl	local03, #1
12cbc     10 23 02 F1 | 	add	local03, local02
12cc0     03 22 66 F0 | 	shl	local03, #3
12cc4     14 00 00 FF 
12cc8     38 E5 05 F1 | 	add	objptr, ##10552
12ccc     F2 22 02 F1 | 	add	local03, objptr
12cd0     0C 4E 85 F1 | 	sub	fp, #12
12cd4     10 22 06 F1 | 	add	local03, #16
12cd8     11 29 62 FC | 	wrlong	local06, local03
12cdc     14 00 00 FF 
12ce0     38 E5 85 F1 | 	sub	objptr, ##10552
12ce4                 | LR__1593
12ce4                 | ' if params(8)<0 orelse params(8)>255 then sus=channels(channel).sus else sus= round(params(8)) : channels(channel).sus=sus
12ce4     58 4E 05 F1 | 	add	fp, #88
12ce8     A7 12 02 FB | 	rdlong	arg01, fp
12cec     58 4E 85 F1 | 	sub	fp, #88
12cf0     00 14 06 F6 | 	mov	arg02, #0
12cf4     01 16 06 F6 | 	mov	arg03, #1
12cf8     50 0C B1 FD | 	call	#__system___float_cmp
12cfc     00 FA 55 F2 | 	cmps	result1, #0 wc
12d00     24 00 90 CD |  if_b	jmp	#LR__1594
12d04     58 4E 05 F1 | 	add	fp, #88
12d08     A7 12 02 FB | 	rdlong	arg01, fp
12d0c     58 4E 85 F1 | 	sub	fp, #88
12d10     80 BF 21 FF 
12d14     00 14 06 F6 | 	mov	arg02, ##1132396544
12d18     01 16 66 F6 | 	neg	arg03, #1
12d1c     2C 0C B1 FD | 	call	#__system___float_cmp
12d20     01 FA 55 F2 | 	cmps	result1, #1 wc
12d24     44 00 90 CD |  if_b	jmp	#LR__1595
12d28                 | LR__1594
12d28     0C 4E 05 F1 | 	add	fp, #12
12d2c     A7 22 02 FB | 	rdlong	local03, fp
12d30     11 2B 02 F6 | 	mov	local07, local03
12d34     01 2A 66 F0 | 	shl	local07, #1
12d38     11 2B 02 F1 | 	add	local07, local03
12d3c     03 2A 66 F0 | 	shl	local07, #3
12d40     14 00 00 FF 
12d44     38 E5 05 F1 | 	add	objptr, ##10552
12d48     F2 2A 02 F1 | 	add	local07, objptr
12d4c     14 2A 06 F1 | 	add	local07, #20
12d50     15 25 E2 FA | 	rdword	local04, local07
12d54     20 4E 05 F1 | 	add	fp, #32
12d58     A7 24 62 FC | 	wrlong	local04, fp
12d5c     2C 4E 85 F1 | 	sub	fp, #44
12d60     14 00 00 FF 
12d64     38 E5 85 F1 | 	sub	objptr, ##10552
12d68     54 00 90 FD | 	jmp	#LR__1596
12d6c                 | LR__1595
12d6c     58 4E 05 F1 | 	add	fp, #88
12d70     A7 12 02 FB | 	rdlong	arg01, fp
12d74     58 4E 85 F1 | 	sub	fp, #88
12d78     01 14 06 F6 | 	mov	arg02, #1
12d7c     60 0C B1 FD | 	call	#__system___float_tointeger
12d80     2C 4E 05 F1 | 	add	fp, #44
12d84     A7 FA 61 FC | 	wrlong	result1, fp
12d88     20 4E 85 F1 | 	sub	fp, #32
12d8c     A7 20 02 FB | 	rdlong	local02, fp
12d90     10 23 02 F6 | 	mov	local03, local02
12d94     01 22 66 F0 | 	shl	local03, #1
12d98     10 23 02 F1 | 	add	local03, local02
12d9c     03 22 66 F0 | 	shl	local03, #3
12da0     14 00 00 FF 
12da4     38 E5 05 F1 | 	add	objptr, ##10552
12da8     F2 22 02 F1 | 	add	local03, objptr
12dac     0C 4E 85 F1 | 	sub	fp, #12
12db0     14 22 06 F1 | 	add	local03, #20
12db4     11 FB 51 FC | 	wrword	result1, local03
12db8     14 00 00 FF 
12dbc     38 E5 85 F1 | 	sub	objptr, ##10552
12dc0                 | LR__1596
12dc0     6C 4E 05 F1 | 	add	fp, #108
12dc4     A7 14 02 FB | 	rdlong	arg02, fp
12dc8     6C 4E 85 F1 | 	sub	fp, #108
12dcc     FC 16 20 FF 
12dd0     54 12 06 F6 | 	mov	arg01, ##1076754516
12dd4     10 17 B1 FD | 	call	#__system____builtin_logbase
12dd8     FD 24 02 F6 | 	mov	local04, result1
12ddc     1E 14 C6 F9 | 	decod	arg02, #30
12de0     FC 16 20 FF 
12de4     54 12 06 F6 | 	mov	arg01, ##1076754516
12de8     FC 16 B1 FD | 	call	#__system____builtin_logbase
12dec     FD 14 02 F6 | 	mov	arg02, result1
12df0     12 13 02 F6 | 	mov	arg01, local04
12df4     24 09 B1 FD | 	call	#__system___float_div
12df8     FD 12 02 F6 | 	mov	arg01, result1
12dfc     00 14 06 F6 | 	mov	arg02, #0
12e00     DC 0B B1 FD | 	call	#__system___float_tointeger
12e04     30 4E 05 F1 | 	add	fp, #48
12e08     A7 FA 61 FC | 	wrlong	result1, fp
12e0c     1E 24 C6 F9 | 	decod	local04, #30
12e10     FD 12 02 F6 | 	mov	arg01, result1
12e14     30 4E 85 F1 | 	sub	fp, #48
12e18     05 12 06 F1 | 	add	arg01, #5
12e1c     09 13 52 F6 | 	abs	arg01, arg01 wc
12e20     1F 2C C6 C9 |  if_b	decod	local08, #31
12e24     00 2C 06 36 |  if_ae	mov	local08, #0
12e28     E8 02 B1 FD | 	call	#__system___float_fromuns
12e2c     16 FB 61 F5 | 	xor	result1, local08
12e30     FD 14 02 F6 | 	mov	arg02, result1
12e34     12 13 02 F6 | 	mov	arg01, local04
12e38     E4 15 B1 FD | 	call	#__system____builtin_powf
12e3c     FD 12 02 F6 | 	mov	arg01, result1
12e40     01 14 06 F6 | 	mov	arg02, #1
12e44     98 0B B1 FD | 	call	#__system___float_tointeger
12e48     10 4E 05 F1 | 	add	fp, #16
12e4c     A7 FA 61 FC | 	wrlong	result1, fp
12e50                 | ' skip=round(2^(lfreq+5))
12e50                 | ' if skip>32768 then i=skip/32768: skip=32768 else i=1
12e50     10 4E 85 F1 | 	sub	fp, #16
12e54     40 00 00 FF 
12e58     01 FA 55 F2 | 	cmps	result1, ##32769 wc
12e5c     30 00 90 CD |  if_b	jmp	#LR__1597
12e60     10 4E 05 F1 | 	add	fp, #16
12e64     A7 1E 02 FB | 	rdlong	local01, fp
12e68     0F 25 52 F6 | 	abs	local04, local01 wc
12e6c     0F 24 46 F0 | 	shr	local04, #15
12e70     12 25 82 F6 | 	negc	local04, local04
12e74     0C 4E 85 F1 | 	sub	fp, #12
12e78     A7 24 62 FC | 	wrlong	local04, fp
12e7c     0C 4E 05 F1 | 	add	fp, #12
12e80     40 00 80 FF 
12e84     A7 00 68 FC | 	wrlong	##32768, fp
12e88     10 4E 85 F1 | 	sub	fp, #16
12e8c     0C 00 90 FD | 	jmp	#LR__1598
12e90                 | LR__1597
12e90     04 4E 05 F1 | 	add	fp, #4
12e94     A7 02 68 FC | 	wrlong	#1, fp
12e98     04 4E 85 F1 | 	sub	fp, #4
12e9c                 | LR__1598
12e9c     6C 4E 05 F1 | 	add	fp, #108
12ea0     A7 14 02 FB | 	rdlong	arg02, fp
12ea4     6C 4E 85 F1 | 	sub	fp, #108
12ea8     3E 2C 25 FF 
12eac     3C 12 06 F6 | 	mov	arg01, ##1247312956
12eb0     68 08 B1 FD | 	call	#__system___float_div
12eb4     FD 24 02 F6 | 	mov	local04, result1
12eb8     04 4E 05 F1 | 	add	fp, #4
12ebc     A7 12 02 FB | 	rdlong	arg01, fp
12ec0     04 4E 85 F1 | 	sub	fp, #4
12ec4     09 13 52 F6 | 	abs	arg01, arg01 wc
12ec8     1F 2C C6 C9 |  if_b	decod	local08, #31
12ecc     00 2C 06 36 |  if_ae	mov	local08, #0
12ed0     40 02 B1 FD | 	call	#__system___float_fromuns
12ed4     16 FB 61 F5 | 	xor	result1, local08
12ed8     FD 1E 02 F6 | 	mov	local01, result1
12edc     1E 20 C6 F9 | 	decod	local02, #30
12ee0     0D 12 06 F6 | 	mov	arg01, #13
12ee4     30 4E 05 F1 | 	add	fp, #48
12ee8     A7 28 02 FB | 	rdlong	local06, fp
12eec     30 4E 85 F1 | 	sub	fp, #48
12ef0     14 13 82 F1 | 	sub	arg01, local06
12ef4     09 13 52 F6 | 	abs	arg01, arg01 wc
12ef8     1F 2C C6 C9 |  if_b	decod	local08, #31
12efc     00 2C 06 36 |  if_ae	mov	local08, #0
12f00     10 02 B1 FD | 	call	#__system___float_fromuns
12f04     16 FB 61 F5 | 	xor	result1, local08
12f08     FD 14 02 F6 | 	mov	arg02, result1
12f0c     10 13 02 F6 | 	mov	arg01, local02
12f10     0C 15 B1 FD | 	call	#__system____builtin_powf
12f14     FD 14 02 F6 | 	mov	arg02, result1
12f18     0F 13 02 F6 | 	mov	arg01, local01
12f1c     F8 05 B1 FD | 	call	#__system___float_mul
12f20     FD 14 02 F6 | 	mov	arg02, result1
12f24     12 13 02 F6 | 	mov	arg01, local04
12f28     F0 07 B1 FD | 	call	#__system___float_div
12f2c     FD 12 02 F6 | 	mov	arg01, result1
12f30     01 14 06 F6 | 	mov	arg02, #1
12f34     A8 0A B1 FD | 	call	#__system___float_tointeger
12f38     34 4E 05 F1 | 	add	fp, #52
12f3c     A7 FA 61 FC | 	wrlong	result1, fp
12f40     34 4E 05 F1 | 	add	fp, #52
12f44     A7 12 02 FB | 	rdlong	arg01, fp
12f48     10 4E 05 F1 | 	add	fp, #16
12f4c     A7 14 02 FB | 	rdlong	arg02, fp
12f50     78 4E 85 F1 | 	sub	fp, #120
12f54     C4 07 B1 FD | 	call	#__system___float_div
12f58     FD 12 02 F6 | 	mov	arg01, result1
12f5c     01 14 06 F6 | 	mov	arg02, #1
12f60     7C 0A B1 FD | 	call	#__system___float_tointeger
12f64     FD 24 02 F6 | 	mov	local04, result1
12f68     14 4E 05 F1 | 	add	fp, #20
12f6c     A7 24 62 FC | 	wrlong	local04, fp
12f70     5C 4E 05 F1 | 	add	fp, #92
12f74     A7 14 02 FB | 	rdlong	arg02, fp
12f78     70 4E 85 F1 | 	sub	fp, #112
12f7c     00 00 23 FF 
12f80     00 12 06 F6 | 	mov	arg01, ##1174405120
12f84     90 05 B1 FD | 	call	#__system___float_mul
12f88     FD 12 02 F6 | 	mov	arg01, result1
12f8c     01 14 06 F6 | 	mov	arg02, #1
12f90     4C 0A B1 FD | 	call	#__system___float_tointeger
12f94     0D 24 C6 F9 | 	decod	local04, #13
12f98     FD 24 02 F1 | 	add	local04, result1
12f9c     18 4E 05 F1 | 	add	fp, #24
12fa0     A7 24 62 FC | 	wrlong	local04, fp
12fa4     5C 4E 05 F1 | 	add	fp, #92
12fa8     A7 14 02 FB | 	rdlong	arg02, fp
12fac     74 4E 85 F1 | 	sub	fp, #116
12fb0     00 3D 22 FF 
12fb4     00 12 06 F6 | 	mov	arg01, ##1148846080
12fb8     5C 05 B1 FD | 	call	#__system___float_mul
12fbc     FD 12 02 F6 | 	mov	arg01, result1
12fc0     01 14 06 F6 | 	mov	arg02, #1
12fc4     18 0A B1 FD | 	call	#__system___float_tointeger
12fc8     1C 4E 05 F1 | 	add	fp, #28
12fcc     A7 FA 61 FC | 	wrlong	result1, fp
12fd0     37 00 00 FF 
12fd4     10 E4 05 F1 | 	add	objptr, ##28176
12fd8     F2 24 02 FB | 	rdlong	local04, objptr
12fdc     37 00 00 FF 
12fe0     10 E4 85 F1 | 	sub	objptr, ##28176
12fe4     10 4E 85 F1 | 	sub	fp, #16
12fe8     A7 20 02 FB | 	rdlong	local02, fp
12fec     06 20 66 F0 | 	shl	local02, #6
12ff0     10 25 02 F1 | 	add	local04, local02
12ff4     04 4E 85 F1 | 	sub	fp, #4
12ff8     A7 24 62 FC | 	wrlong	local04, fp
12ffc                 | ' period=round((3546895/freq)/(i*(2^(13-lfreq))))
12ffc                 | ' speed=round(speed_coeff/slen)
12ffc                 | ' ipan=8192+round(8192*pan)
12ffc                 | ' ivol=round(1000.0*vol)
12ffc                 | ' base2=base+64*channel
12ffc                 | ' if wave <32 then 
12ffc     18 4E 05 F1 | 	add	fp, #24
13000     A7 24 02 FB | 	rdlong	local04, fp
13004     20 4E 85 F1 | 	sub	fp, #32
13008     20 24 56 F2 | 	cmps	local04, #32 wc
1300c     2C 00 90 3D |  if_ae	jmp	#LR__1599
13010     08 4E 05 F1 | 	add	fp, #8
13014     A7 12 02 FB | 	rdlong	arg01, fp
13018     08 12 06 F1 | 	add	arg01, #8
1301c     18 4E 05 F1 | 	add	fp, #24
13020     A7 14 02 FB | 	rdlong	arg02, fp
13024     20 4E 85 F1 | 	sub	fp, #32
13028     0B 14 66 F0 | 	shl	arg02, #11
1302c     00 00 60 FF 
13030     00 14 06 F1 | 	add	arg02, ##-1073741824
13034     09 15 62 FC | 	wrlong	arg02, arg01
13038     18 00 90 FD | 	jmp	#LR__1600
1303c                 | LR__1599
1303c     08 4E 05 F1 | 	add	fp, #8
13040     A7 12 02 FB | 	rdlong	arg01, fp
13044     08 4E 85 F1 | 	sub	fp, #8
13048     08 12 06 F1 | 	add	arg01, #8
1304c     00 00 E4 FF 
13050     09 01 68 FC | 	wrlong	##-939524096, arg01
13054                 | LR__1600
13054     08 4E 05 F1 | 	add	fp, #8
13058     A7 12 02 FB | 	rdlong	arg01, fp
1305c     10 12 06 F1 | 	add	arg01, #16
13060     04 00 80 FF 
13064     09 01 68 FC | 	wrlong	##2048, arg01
13068     A7 12 02 FB | 	rdlong	arg01, fp
1306c     0C 12 06 F1 | 	add	arg01, #12
13070     09 01 68 FC | 	wrlong	#0, arg01
13074     A7 12 02 FB | 	rdlong	arg01, fp
13078     14 12 06 F1 | 	add	arg01, #20
1307c     14 4E 05 F1 | 	add	fp, #20
13080     A7 14 02 FB | 	rdlong	arg02, fp
13084     09 15 52 FC | 	wrword	arg02, arg01
13088     14 4E 85 F1 | 	sub	fp, #20
1308c     A7 12 02 FB | 	rdlong	arg01, fp
13090     16 12 06 F1 | 	add	arg01, #22
13094     10 4E 05 F1 | 	add	fp, #16
13098     A7 14 02 FB | 	rdlong	arg02, fp
1309c     09 15 52 FC | 	wrword	arg02, arg01
130a0                 | ' lpoke base2+16,2048
130a0                 | ' lpoke base2+12,0
130a0                 | ' dpoke base2+20,ivol 
130a0                 | ' dpoke base2+22,ipan 
130a0                 | ' if wave<32 then
130a0     08 4E 05 F1 | 	add	fp, #8
130a4     A7 24 02 FB | 	rdlong	local04, fp
130a8     20 4E 85 F1 | 	sub	fp, #32
130ac     20 24 56 F2 | 	cmps	local04, #32 wc
130b0     38 00 90 3D |  if_ae	jmp	#LR__1601
130b4     08 4E 05 F1 | 	add	fp, #8
130b8     A7 12 02 FB | 	rdlong	arg01, fp
130bc     18 12 06 F1 | 	add	arg01, #24
130c0     2C 4E 05 F1 | 	add	fp, #44
130c4     A7 14 02 FB | 	rdlong	arg02, fp
130c8     09 15 52 FC | 	wrword	arg02, arg01
130cc     2C 4E 85 F1 | 	sub	fp, #44
130d0     A7 12 02 FB | 	rdlong	arg01, fp
130d4     1A 12 06 F1 | 	add	arg01, #26
130d8     08 4E 05 F1 | 	add	fp, #8
130dc     A7 14 02 FB | 	rdlong	arg02, fp
130e0     10 4E 85 F1 | 	sub	fp, #16
130e4     09 15 52 FC | 	wrword	arg02, arg01
130e8     48 00 90 FD | 	jmp	#LR__1602
130ec                 | LR__1601
130ec     08 4E 05 F1 | 	add	fp, #8
130f0     A7 24 02 FB | 	rdlong	local04, fp
130f4     18 24 06 F1 | 	add	local04, #24
130f8     64 4E 05 F1 | 	add	fp, #100
130fc     A7 14 02 FB | 	rdlong	arg02, fp
13100     6C 4E 85 F1 | 	sub	fp, #108
13104     3E 2C 25 FF 
13108     3C 12 06 F6 | 	mov	arg01, ##1247312956
1310c     0C 06 B1 FD | 	call	#__system___float_div
13110     FD 12 02 F6 | 	mov	arg01, result1
13114     01 14 06 F6 | 	mov	arg02, #1
13118     C4 08 B1 FD | 	call	#__system___float_tointeger
1311c     12 FB 51 FC | 	wrword	result1, local04
13120     08 4E 05 F1 | 	add	fp, #8
13124     A7 12 02 FB | 	rdlong	arg01, fp
13128     08 4E 85 F1 | 	sub	fp, #8
1312c     1A 12 06 F1 | 	add	arg01, #26
13130     09 01 5A FC | 	wrword	#256, arg01
13134                 | LR__1602
13134     08 4E 05 F1 | 	add	fp, #8
13138     A7 12 02 FB | 	rdlong	arg01, fp
1313c     1C 12 06 F1 | 	add	arg01, #28
13140     09 01 68 FC | 	wrlong	#0, arg01
13144     A7 12 02 FB | 	rdlong	arg01, fp
13148     20 12 06 F1 | 	add	arg01, #32
1314c     09 01 68 FC | 	wrlong	#0, arg01
13150                 | ' lpoke base2+28,$0000_0000
13150                 | ' lpoke base2+32,0 
13150                 | ' if env=8 then lpoke base2+36,0 else lpoke base2+36,varptr(envbuf(env,0))
13150     1C 4E 05 F1 | 	add	fp, #28
13154     A7 24 02 FB | 	rdlong	local04, fp
13158     24 4E 85 F1 | 	sub	fp, #36
1315c     08 24 0E F2 | 	cmp	local04, #8 wz
13160     18 00 90 5D |  if_ne	jmp	#LR__1603
13164     08 4E 05 F1 | 	add	fp, #8
13168     A7 12 02 FB | 	rdlong	arg01, fp
1316c     08 4E 85 F1 | 	sub	fp, #8
13170     24 12 06 F1 | 	add	arg01, #36
13174     09 01 68 FC | 	wrlong	#0, arg01
13178     34 00 90 FD | 	jmp	#LR__1604
1317c                 | LR__1603
1317c     08 4E 05 F1 | 	add	fp, #8
13180     A7 12 02 FB | 	rdlong	arg01, fp
13184     24 12 06 F1 | 	add	arg01, #36
13188     1C 4E 05 F1 | 	add	fp, #28
1318c     A7 14 02 FB | 	rdlong	arg02, fp
13190     24 4E 85 F1 | 	sub	fp, #36
13194     09 14 66 F0 | 	shl	arg02, #9
13198     0C 00 00 FF 
1319c     D8 E4 05 F1 | 	add	objptr, ##6360
131a0     F2 14 02 F1 | 	add	arg02, objptr
131a4     0C 00 00 FF 
131a8     D8 E4 85 F1 | 	sub	objptr, ##6360
131ac     09 15 62 FC | 	wrlong	arg02, arg01
131b0                 | LR__1604
131b0     08 4E 05 F1 | 	add	fp, #8
131b4     A7 12 02 FB | 	rdlong	arg01, fp
131b8     28 12 06 F1 | 	add	arg01, #40
131bc     0C 4E 05 F1 | 	add	fp, #12
131c0     A7 14 02 FB | 	rdlong	arg02, fp
131c4     09 15 62 FC | 	wrlong	arg02, arg01
131c8     0C 4E 85 F1 | 	sub	fp, #12
131cc     A7 12 02 FB | 	rdlong	arg01, fp
131d0     2C 12 06 F1 | 	add	arg01, #44
131d4     24 4E 05 F1 | 	add	fp, #36
131d8     A7 14 02 FB | 	rdlong	arg02, fp
131dc     09 15 62 FC | 	wrlong	arg02, arg01
131e0                 | ' lpoke base2+40,speed 
131e0                 | ' lpoke base2+44,sus 
131e0                 | ' if delay>0 then waitms(delay) 
131e0     04 4E 85 F1 | 	sub	fp, #4
131e4     A7 24 02 FB | 	rdlong	local04, fp
131e8     28 4E 85 F1 | 	sub	fp, #40
131ec     01 24 56 F2 | 	cmps	local04, #1 wc
131f0     28 4E 05 31 |  if_ae	add	fp, #40
131f4     A7 12 02 3B |  if_ae	rdlong	arg01, fp
131f8     28 4E 85 31 |  if_ae	sub	fp, #40
131fc     58 DA B0 3D |  if_ae	call	#__system___waitms
13200     A7 F0 03 F6 | 	mov	ptra, fp
13204     B2 00 A0 FD | 	call	#popregs_
13208                 | _do_play_ret
13208     2D 00 64 FD | 	ret
1320c                 | 
1320c                 | ' 
1320c                 | ' '-------------------- plot
1320c                 | ' 
1320c                 | ' sub do_plot
1320c                 | _do_plot
1320c     00 4A 05 F6 | 	mov	COUNT_, #0
13210     A8 00 A0 FD | 	call	#pushregs_
13214     20 F0 07 F1 | 	add	ptra, #32
13218     90 80 BF FD | 	call	#_pop
1321c     FD 16 02 F6 | 	mov	arg03, result1
13220     FE 14 02 F6 | 	mov	arg02, result2
13224     FF 12 02 F6 | 	mov	arg01, result3
13228     0C 4E 05 F1 | 	add	fp, #12
1322c     A7 16 62 FC | 	wrlong	arg03, fp
13230     04 4E 05 F1 | 	add	fp, #4
13234     A7 14 62 FC | 	wrlong	arg02, fp
13238     04 4E 05 F1 | 	add	fp, #4
1323c     A7 12 62 FC | 	wrlong	arg01, fp
13240     14 4E 85 F1 | 	sub	fp, #20
13244     64 80 BF FD | 	call	#_pop
13248     FF 16 02 F6 | 	mov	arg03, result3
1324c     A7 FA 61 FC | 	wrlong	result1, fp
13250     04 4E 05 F1 | 	add	fp, #4
13254     A7 FC 61 FC | 	wrlong	result2, fp
13258     04 4E 05 F1 | 	add	fp, #4
1325c     A7 16 62 FC | 	wrlong	arg03, fp
13260     08 4E 85 F1 | 	sub	fp, #8
13264     A7 12 02 F6 | 	mov	arg01, fp
13268     24 82 BF FD | 	call	#_converttoint
1326c     18 4E 05 F1 | 	add	fp, #24
13270     A7 FA 61 FC | 	wrlong	result1, fp
13274     0C 4E 85 F1 | 	sub	fp, #12
13278     A7 12 02 F6 | 	mov	arg01, fp
1327c     0C 4E 85 F1 | 	sub	fp, #12
13280     0C 82 BF FD | 	call	#_converttoint
13284     1C 4E 05 F1 | 	add	fp, #28
13288     A7 FA 61 FC | 	wrlong	result1, fp
1328c     04 4E 85 F1 | 	sub	fp, #4
13290     A7 16 02 FB | 	rdlong	arg03, fp
13294     37 00 00 FF 
13298     2C E4 05 F1 | 	add	objptr, ##28204
1329c     F2 16 62 FC | 	wrlong	arg03, objptr
132a0     04 4E 05 F1 | 	add	fp, #4
132a4     A7 14 02 FB | 	rdlong	arg02, fp
132a8     1C 4E 85 F1 | 	sub	fp, #28
132ac     04 E4 05 F1 | 	add	objptr, #4
132b0     F2 14 62 FC | 	wrlong	arg02, objptr
132b4     04 E4 85 F1 | 	sub	objptr, #4
132b8     F2 12 02 FB | 	rdlong	arg01, objptr
132bc     04 E4 85 F1 | 	sub	objptr, #4
132c0     F2 16 02 FB | 	rdlong	arg03, objptr
132c4     37 00 00 FF 
132c8     28 E4 85 F1 | 	sub	objptr, ##28200
132cc     E4 B0 B0 FD | 	call	#_hg010b_spin2_putpixel
132d0     A7 F0 03 F6 | 	mov	ptra, fp
132d4     B2 00 A0 FD | 	call	#popregs_
132d8                 | _do_plot_ret
132d8     2D 00 64 FD | 	ret
132dc                 | 
132dc                 | ' 
132dc                 | ' '-------------------- pop
132dc                 | ' 
132dc                 | ' sub do_pop()
132dc                 | _do_pop
132dc                 | ' if gosubtop>0 then  gosubtop -=1 
132dc     50 00 00 FF 
132e0     0C E5 05 F1 | 	add	objptr, ##41228
132e4     F2 00 02 FB | 	rdlong	_var01, objptr
132e8     50 00 00 FF 
132ec     0C E5 85 F1 | 	sub	objptr, ##41228
132f0     01 00 56 F2 | 	cmps	_var01, #1 wc
132f4     50 00 00 3F 
132f8     0C E5 05 31 |  if_ae	add	objptr, ##41228
132fc     F2 00 02 3B |  if_ae	rdlong	_var01, objptr
13300     01 00 86 31 |  if_ae	sub	_var01, #1
13304     F2 00 62 3C |  if_ae	wrlong	_var01, objptr
13308     50 00 00 3F 
1330c     0C E5 85 31 |  if_ae	sub	objptr, ##41228
13310                 | _do_pop_ret
13310     2D 00 64 FD | 	ret
13314                 | 
13314                 | ' 
13314                 | ' '-------------------- print
13314                 | ' 
13314                 | ' sub do_print  
13314                 | _do_print
13314     0B 4A 05 F6 | 	mov	COUNT_, #11
13318     A8 00 A0 FD | 	call	#pushregs_
1331c     00 24 06 F6 | 	mov	local04, #0
13320     88 7F BF FD | 	call	#_pop
13324     FD 26 02 F6 | 	mov	local05, result1
13328     FE 28 02 F6 | 	mov	local06, result2
1332c     FF 2A 02 F6 | 	mov	local07, result3
13330     13 1F 02 F6 | 	mov	local01, local05
13334     14 21 02 F6 | 	mov	local02, local06
13338     15 23 02 F6 | 	mov	local03, local07
1333c                 | '  
1333c                 | ' r=0
1333c                 | ' t1=pop() 
1333c                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
1333c     21 22 0E F2 | 	cmp	local03, #33 wz
13340     22 22 0E 52 |  if_ne	cmp	local03, #34 wz
13344     20 00 90 5D |  if_ne	jmp	#LR__1610
13348     11 25 02 F6 | 	mov	local04, local03
1334c     5C 7F BF FD | 	call	#_pop
13350     FD 26 02 F6 | 	mov	local05, result1
13354     FE 28 02 F6 | 	mov	local06, result2
13358     FF 2A 02 F6 | 	mov	local07, result3
1335c     13 1F 02 F6 | 	mov	local01, local05
13360     14 21 02 F6 | 	mov	local02, local06
13364     15 23 02 F6 | 	mov	local03, local07
13368                 | LR__1610
13368                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
13368     20 22 0E F2 | 	cmp	local03, #32 wz
1336c     11 25 02 A6 |  if_e	mov	local04, local03
13370                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
13370     FF 22 0E F2 | 	cmp	local03, #255 wz
13374     0C 00 90 5D |  if_ne	jmp	#LR__1611
13378     0F 13 02 F6 | 	mov	arg01, local01
1337c     54 A0 B0 FD | 	call	#_printerror
13380     D4 04 90 FD | 	jmp	#LR__1630
13384                 | LR__1611
13384                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)  :  t1.result_type=result_string  
13384     2B 22 0E F2 | 	cmp	local03, #43 wz
13388     14 00 90 5D |  if_ne	jmp	#LR__1612
1338c     0F 13 02 F6 | 	mov	arg01, local01
13390     90 80 BF FD | 	call	#_convertstring
13394     FD 26 02 F6 | 	mov	local05, result1
13398     13 1F 02 F6 | 	mov	local01, local05
1339c     1F 22 06 F6 | 	mov	local03, #31
133a0                 | LR__1612
133a0                 | ' 
133a0                 | ' if t1.result_type=token_channel then print "Print to channel (not yet implemented)"; t1.result.iresult : t1=pop()
133a0     2C 22 0E F2 | 	cmp	local03, #44 wz
133a4     80 00 90 5D |  if_ne	jmp	#LR__1613
133a8     00 12 06 F6 | 	mov	arg01, #0
133ac     18 30 B1 FD | 	call	#__system___getiolock_0540
133b0     FD 12 02 F6 | 	mov	arg01, result1
133b4     AC D5 B0 FD | 	call	#__system___lockmem
133b8     85 01 00 FF 
133bc     73 14 06 F6 | 	mov	arg02, ##@LR__5509
133c0     00 12 06 F6 | 	mov	arg01, #0
133c4     00 16 06 F6 | 	mov	arg03, #0
133c8     8C E2 B0 FD | 	call	#__system___basic_print_string
133cc     0A 2C 06 F6 | 	mov	local08, #10
133d0     00 12 06 F6 | 	mov	arg01, #0
133d4     0F 15 02 F6 | 	mov	arg02, local01
133d8     00 16 06 F6 | 	mov	arg03, #0
133dc     0A 18 06 F6 | 	mov	arg04, #10
133e0     B8 E2 B0 FD | 	call	#__system___basic_print_integer
133e4     FD 2E 02 F6 | 	mov	local09, result1
133e8     00 12 06 F6 | 	mov	arg01, #0
133ec     0A 14 06 F6 | 	mov	arg02, #10
133f0     00 16 06 F6 | 	mov	arg03, #0
133f4     08 E2 B0 FD | 	call	#__system___basic_print_char
133f8     01 30 06 F6 | 	mov	local10, #1
133fc     00 12 06 F6 | 	mov	arg01, #0
13400     C4 2F B1 FD | 	call	#__system___getiolock_0540
13404     FD 00 68 FC | 	wrlong	#0, result1
13408     00 32 06 F6 | 	mov	local11, #0
1340c     9C 7E BF FD | 	call	#_pop
13410     FD 26 02 F6 | 	mov	local05, result1
13414     FE 28 02 F6 | 	mov	local06, result2
13418     FF 2A 02 F6 | 	mov	local07, result3
1341c     13 1F 02 F6 | 	mov	local01, local05
13420     14 21 02 F6 | 	mov	local02, local06
13424     15 23 02 F6 | 	mov	local03, local07
13428                 | LR__1613
13428                 | ' 
13428                 | ' if r=print_mod_comma  then
13428     21 24 0E F2 | 	cmp	local04, #33 wz
1342c     AC 01 90 5D |  if_ne	jmp	#LR__1618
13430                 | '   if t1.result_type=result_int then print t1.result.iresult,
13430     1C 22 0E F2 | 	cmp	local03, #28 wz
13434     64 00 90 5D |  if_ne	jmp	#LR__1614
13438     00 12 06 F6 | 	mov	arg01, #0
1343c     88 2F B1 FD | 	call	#__system___getiolock_0540
13440     FD 12 02 F6 | 	mov	arg01, result1
13444     1C D5 B0 FD | 	call	#__system___lockmem
13448     00 28 06 F6 | 	mov	local06, #0
1344c     00 12 06 F6 | 	mov	arg01, #0
13450     0F 15 02 F6 | 	mov	arg02, local01
13454     00 16 06 F6 | 	mov	arg03, #0
13458     0A 18 06 F6 | 	mov	arg04, #10
1345c     3C E2 B0 FD | 	call	#__system___basic_print_integer
13460     FD 2A 02 F6 | 	mov	local07, result1
13464     14 27 02 F6 | 	mov	local05, local06
13468     15 27 02 F1 | 	add	local05, local07
1346c     00 32 06 F6 | 	mov	local11, #0
13470     00 12 06 F6 | 	mov	arg01, #0
13474     09 14 06 F6 | 	mov	arg02, #9
13478     00 16 06 F6 | 	mov	arg03, #0
1347c     80 E1 B0 FD | 	call	#__system___basic_print_char
13480     FD 2E 02 F6 | 	mov	local09, result1
13484     FD 26 02 F1 | 	add	local05, result1
13488     00 12 06 F6 | 	mov	arg01, #0
1348c     38 2F B1 FD | 	call	#__system___getiolock_0540
13490     FD 00 68 FC | 	wrlong	#0, result1
13494     00 FA 05 F6 | 	mov	result1, #0
13498     00 30 06 F6 | 	mov	local10, #0
1349c                 | LR__1614
1349c                 | '   if t1.result_type=result_uint then print t1.result.uresult,
1349c     1D 22 0E F2 | 	cmp	local03, #29 wz
134a0     64 00 90 5D |  if_ne	jmp	#LR__1615
134a4     00 12 06 F6 | 	mov	arg01, #0
134a8     1C 2F B1 FD | 	call	#__system___getiolock_0540
134ac     FD 12 02 F6 | 	mov	arg01, result1
134b0     B0 D4 B0 FD | 	call	#__system___lockmem
134b4     00 28 06 F6 | 	mov	local06, #0
134b8     00 12 06 F6 | 	mov	arg01, #0
134bc     0F 15 02 F6 | 	mov	arg02, local01
134c0     00 16 06 F6 | 	mov	arg03, #0
134c4     0A 18 06 F6 | 	mov	arg04, #10
134c8     10 E2 B0 FD | 	call	#__system___basic_print_unsigned
134cc     FD 2A 02 F6 | 	mov	local07, result1
134d0     14 27 02 F6 | 	mov	local05, local06
134d4     15 27 02 F1 | 	add	local05, local07
134d8     00 32 06 F6 | 	mov	local11, #0
134dc     00 12 06 F6 | 	mov	arg01, #0
134e0     09 14 06 F6 | 	mov	arg02, #9
134e4     00 16 06 F6 | 	mov	arg03, #0
134e8     14 E1 B0 FD | 	call	#__system___basic_print_char
134ec     FD 2E 02 F6 | 	mov	local09, result1
134f0     FD 26 02 F1 | 	add	local05, result1
134f4     00 12 06 F6 | 	mov	arg01, #0
134f8     CC 2E B1 FD | 	call	#__system___getiolock_0540
134fc     FD 00 68 FC | 	wrlong	#0, result1
13500     00 FA 05 F6 | 	mov	result1, #0
13504     00 30 06 F6 | 	mov	local10, #0
13508                 | LR__1615
13508                 | '   if t1.result_type=result_float then print t1.result.fresult,
13508     1E 22 0E F2 | 	cmp	local03, #30 wz
1350c     64 00 90 5D |  if_ne	jmp	#LR__1616
13510     00 12 06 F6 | 	mov	arg01, #0
13514     B0 2E B1 FD | 	call	#__system___getiolock_0540
13518     FD 12 02 F6 | 	mov	arg01, result1
1351c     44 D4 B0 FD | 	call	#__system___lockmem
13520     00 28 06 F6 | 	mov	local06, #0
13524     00 12 06 F6 | 	mov	arg01, #0
13528     0F 15 02 F6 | 	mov	arg02, local01
1352c     00 16 06 F6 | 	mov	arg03, #0
13530     23 18 06 F6 | 	mov	arg04, #35
13534     F8 05 B1 FD | 	call	#__system___basic_print_float
13538     FD 2A 02 F6 | 	mov	local07, result1
1353c     14 27 02 F6 | 	mov	local05, local06
13540     15 27 02 F1 | 	add	local05, local07
13544     00 32 06 F6 | 	mov	local11, #0
13548     00 12 06 F6 | 	mov	arg01, #0
1354c     09 14 06 F6 | 	mov	arg02, #9
13550     00 16 06 F6 | 	mov	arg03, #0
13554     A8 E0 B0 FD | 	call	#__system___basic_print_char
13558     FD 2E 02 F6 | 	mov	local09, result1
1355c     FD 26 02 F1 | 	add	local05, result1
13560     00 12 06 F6 | 	mov	arg01, #0
13564     60 2E B1 FD | 	call	#__system___getiolock_0540
13568     FD 00 68 FC | 	wrlong	#0, result1
1356c     00 FA 05 F6 | 	mov	result1, #0
13570     00 30 06 F6 | 	mov	local10, #0
13574                 | LR__1616
13574                 | '   if t1.result_type=result_string then print t1.result.sresult,
13574     1F 22 0E F2 | 	cmp	local03, #31 wz
13578     60 00 90 5D |  if_ne	jmp	#LR__1617
1357c     00 12 06 F6 | 	mov	arg01, #0
13580     44 2E B1 FD | 	call	#__system___getiolock_0540
13584     FD 12 02 F6 | 	mov	arg01, result1
13588     D8 D3 B0 FD | 	call	#__system___lockmem
1358c     00 28 06 F6 | 	mov	local06, #0
13590     00 12 06 F6 | 	mov	arg01, #0
13594     0F 15 02 F6 | 	mov	arg02, local01
13598     00 16 06 F6 | 	mov	arg03, #0
1359c     B8 E0 B0 FD | 	call	#__system___basic_print_string
135a0     FD 2A 02 F6 | 	mov	local07, result1
135a4     14 27 02 F6 | 	mov	local05, local06
135a8     15 27 02 F1 | 	add	local05, local07
135ac     00 32 06 F6 | 	mov	local11, #0
135b0     00 12 06 F6 | 	mov	arg01, #0
135b4     09 14 06 F6 | 	mov	arg02, #9
135b8     00 16 06 F6 | 	mov	arg03, #0
135bc     40 E0 B0 FD | 	call	#__system___basic_print_char
135c0     FD 2E 02 F6 | 	mov	local09, result1
135c4     FD 26 02 F1 | 	add	local05, result1
135c8     00 12 06 F6 | 	mov	arg01, #0
135cc     F8 2D B1 FD | 	call	#__system___getiolock_0540
135d0     FD 00 68 FC | 	wrlong	#0, result1
135d4     00 FA 05 F6 | 	mov	result1, #0
135d8     00 30 06 F6 | 	mov	local10, #0
135dc                 | LR__1617
135dc                 | LR__1618
135dc                 | ' if r=print_mod_semicolon then 
135dc     22 24 0E F2 | 	cmp	local04, #34 wz
135e0     1C 01 90 5D |  if_ne	jmp	#LR__1623
135e4                 | '   if t1.result_type=result_int then print t1.result.iresult;
135e4     1C 22 0E F2 | 	cmp	local03, #28 wz
135e8     50 00 90 5D |  if_ne	jmp	#LR__1619
135ec     00 12 06 F6 | 	mov	arg01, #0
135f0     D4 2D B1 FD | 	call	#__system___getiolock_0540
135f4     FD 12 02 F6 | 	mov	arg01, result1
135f8     68 D3 B0 FD | 	call	#__system___lockmem
135fc     00 28 06 F6 | 	mov	local06, #0
13600     00 30 06 F6 | 	mov	local10, #0
13604     0A 32 06 F6 | 	mov	local11, #10
13608     00 12 06 F6 | 	mov	arg01, #0
1360c     0F 15 02 F6 | 	mov	arg02, local01
13610     00 16 06 F6 | 	mov	arg03, #0
13614     0A 18 06 F6 | 	mov	arg04, #10
13618     80 E0 B0 FD | 	call	#__system___basic_print_integer
1361c     FD 2A 02 F6 | 	mov	local07, result1
13620     14 27 02 F6 | 	mov	local05, local06
13624     15 27 02 F1 | 	add	local05, local07
13628     00 12 06 F6 | 	mov	arg01, #0
1362c     98 2D B1 FD | 	call	#__system___getiolock_0540
13630     FD 00 68 FC | 	wrlong	#0, result1
13634     00 FA 05 F6 | 	mov	result1, #0
13638     00 2E 06 F6 | 	mov	local09, #0
1363c                 | LR__1619
1363c                 | '   if t1.result_type=result_uint then print t1.result.uresult;
1363c     1D 22 0E F2 | 	cmp	local03, #29 wz
13640     50 00 90 5D |  if_ne	jmp	#LR__1620
13644     00 12 06 F6 | 	mov	arg01, #0
13648     7C 2D B1 FD | 	call	#__system___getiolock_0540
1364c     FD 12 02 F6 | 	mov	arg01, result1
13650     10 D3 B0 FD | 	call	#__system___lockmem
13654     00 28 06 F6 | 	mov	local06, #0
13658     00 30 06 F6 | 	mov	local10, #0
1365c     0A 32 06 F6 | 	mov	local11, #10
13660     00 12 06 F6 | 	mov	arg01, #0
13664     0F 15 02 F6 | 	mov	arg02, local01
13668     00 16 06 F6 | 	mov	arg03, #0
1366c     0A 18 06 F6 | 	mov	arg04, #10
13670     68 E0 B0 FD | 	call	#__system___basic_print_unsigned
13674     FD 2A 02 F6 | 	mov	local07, result1
13678     14 27 02 F6 | 	mov	local05, local06
1367c     15 27 02 F1 | 	add	local05, local07
13680     00 12 06 F6 | 	mov	arg01, #0
13684     40 2D B1 FD | 	call	#__system___getiolock_0540
13688     FD 00 68 FC | 	wrlong	#0, result1
1368c     00 FA 05 F6 | 	mov	result1, #0
13690     00 2E 06 F6 | 	mov	local09, #0
13694                 | LR__1620
13694                 | '   if t1.result_type=result_float then print t1.result.fresult;
13694     1E 22 0E F2 | 	cmp	local03, #30 wz
13698     30 00 90 5D |  if_ne	jmp	#LR__1621
1369c     00 12 06 F6 | 	mov	arg01, #0
136a0     24 2D B1 FD | 	call	#__system___getiolock_0540
136a4     FD 12 02 F6 | 	mov	arg01, result1
136a8     B8 D2 B0 FD | 	call	#__system___lockmem
136ac     00 12 06 F6 | 	mov	arg01, #0
136b0     0F 15 02 F6 | 	mov	arg02, local01
136b4     00 16 06 F6 | 	mov	arg03, #0
136b8     23 18 06 F6 | 	mov	arg04, #35
136bc     70 04 B1 FD | 	call	#__system___basic_print_float
136c0     00 12 06 F6 | 	mov	arg01, #0
136c4     00 2D B1 FD | 	call	#__system___getiolock_0540
136c8     FD 00 68 FC | 	wrlong	#0, result1
136cc                 | LR__1621
136cc                 | '   if t1.result_type=result_string then print t1.result.sresult;
136cc     1F 22 0E F2 | 	cmp	local03, #31 wz
136d0     2C 00 90 5D |  if_ne	jmp	#LR__1622
136d4     00 12 06 F6 | 	mov	arg01, #0
136d8     EC 2C B1 FD | 	call	#__system___getiolock_0540
136dc     FD 12 02 F6 | 	mov	arg01, result1
136e0     80 D2 B0 FD | 	call	#__system___lockmem
136e4     00 12 06 F6 | 	mov	arg01, #0
136e8     0F 15 02 F6 | 	mov	arg02, local01
136ec     00 16 06 F6 | 	mov	arg03, #0
136f0     64 DF B0 FD | 	call	#__system___basic_print_string
136f4     00 12 06 F6 | 	mov	arg01, #0
136f8     CC 2C B1 FD | 	call	#__system___getiolock_0540
136fc     FD 00 68 FC | 	wrlong	#0, result1
13700                 | LR__1622
13700                 | LR__1623
13700                 | ' if r=0 then 
13700     00 24 0E F2 | 	cmp	local04, #0 wz
13704     1C 01 90 5D |  if_ne	jmp	#LR__1628
13708                 | '   if t1.result_type=result_int then print t1.result.iresult
13708     1C 22 0E F2 | 	cmp	local03, #28 wz
1370c     40 00 90 5D |  if_ne	jmp	#LR__1624
13710     00 12 06 F6 | 	mov	arg01, #0
13714     B0 2C B1 FD | 	call	#__system___getiolock_0540
13718     FD 12 02 F6 | 	mov	arg01, result1
1371c     44 D2 B0 FD | 	call	#__system___lockmem
13720     00 12 06 F6 | 	mov	arg01, #0
13724     0F 15 02 F6 | 	mov	arg02, local01
13728     00 16 06 F6 | 	mov	arg03, #0
1372c     0A 18 06 F6 | 	mov	arg04, #10
13730     68 DF B0 FD | 	call	#__system___basic_print_integer
13734     00 12 06 F6 | 	mov	arg01, #0
13738     0A 14 06 F6 | 	mov	arg02, #10
1373c     00 16 06 F6 | 	mov	arg03, #0
13740     BC DE B0 FD | 	call	#__system___basic_print_char
13744     00 12 06 F6 | 	mov	arg01, #0
13748     7C 2C B1 FD | 	call	#__system___getiolock_0540
1374c     FD 00 68 FC | 	wrlong	#0, result1
13750                 | LR__1624
13750                 | '   if t1.result_type=result_uint then print t1.result.uresult
13750     1D 22 0E F2 | 	cmp	local03, #29 wz
13754     40 00 90 5D |  if_ne	jmp	#LR__1625
13758     00 12 06 F6 | 	mov	arg01, #0
1375c     68 2C B1 FD | 	call	#__system___getiolock_0540
13760     FD 12 02 F6 | 	mov	arg01, result1
13764     FC D1 B0 FD | 	call	#__system___lockmem
13768     00 12 06 F6 | 	mov	arg01, #0
1376c     0F 15 02 F6 | 	mov	arg02, local01
13770     00 16 06 F6 | 	mov	arg03, #0
13774     0A 18 06 F6 | 	mov	arg04, #10
13778     60 DF B0 FD | 	call	#__system___basic_print_unsigned
1377c     00 12 06 F6 | 	mov	arg01, #0
13780     0A 14 06 F6 | 	mov	arg02, #10
13784     00 16 06 F6 | 	mov	arg03, #0
13788     74 DE B0 FD | 	call	#__system___basic_print_char
1378c     00 12 06 F6 | 	mov	arg01, #0
13790     34 2C B1 FD | 	call	#__system___getiolock_0540
13794     FD 00 68 FC | 	wrlong	#0, result1
13798                 | LR__1625
13798                 | '   if t1.result_type=result_float then print t1.result.fresult
13798     1E 22 0E F2 | 	cmp	local03, #30 wz
1379c     40 00 90 5D |  if_ne	jmp	#LR__1626
137a0     00 12 06 F6 | 	mov	arg01, #0
137a4     20 2C B1 FD | 	call	#__system___getiolock_0540
137a8     FD 12 02 F6 | 	mov	arg01, result1
137ac     B4 D1 B0 FD | 	call	#__system___lockmem
137b0     00 12 06 F6 | 	mov	arg01, #0
137b4     0F 15 02 F6 | 	mov	arg02, local01
137b8     00 16 06 F6 | 	mov	arg03, #0
137bc     23 18 06 F6 | 	mov	arg04, #35
137c0     6C 03 B1 FD | 	call	#__system___basic_print_float
137c4     00 12 06 F6 | 	mov	arg01, #0
137c8     0A 14 06 F6 | 	mov	arg02, #10
137cc     00 16 06 F6 | 	mov	arg03, #0
137d0     2C DE B0 FD | 	call	#__system___basic_print_char
137d4     00 12 06 F6 | 	mov	arg01, #0
137d8     EC 2B B1 FD | 	call	#__system___getiolock_0540
137dc     FD 00 68 FC | 	wrlong	#0, result1
137e0                 | LR__1626
137e0                 | '   if t1.result_type=result_string then print t1.result.sresult
137e0     1F 22 0E F2 | 	cmp	local03, #31 wz
137e4     3C 00 90 5D |  if_ne	jmp	#LR__1627
137e8     00 12 06 F6 | 	mov	arg01, #0
137ec     D8 2B B1 FD | 	call	#__system___getiolock_0540
137f0     FD 12 02 F6 | 	mov	arg01, result1
137f4     6C D1 B0 FD | 	call	#__system___lockmem
137f8     00 12 06 F6 | 	mov	arg01, #0
137fc     0F 15 02 F6 | 	mov	arg02, local01
13800     00 16 06 F6 | 	mov	arg03, #0
13804     50 DE B0 FD | 	call	#__system___basic_print_string
13808     00 12 06 F6 | 	mov	arg01, #0
1380c     0A 14 06 F6 | 	mov	arg02, #10
13810     00 16 06 F6 | 	mov	arg03, #0
13814     E8 DD B0 FD | 	call	#__system___basic_print_char
13818     00 12 06 F6 | 	mov	arg01, #0
1381c     A8 2B B1 FD | 	call	#__system___getiolock_0540
13820     FD 00 68 FC | 	wrlong	#0, result1
13824                 | LR__1627
13824                 | LR__1628
13824                 | ' if r=print_mod_empty then print
13824     20 24 0E F2 | 	cmp	local04, #32 wz
13828     2C 00 90 5D |  if_ne	jmp	#LR__1629
1382c     00 12 06 F6 | 	mov	arg01, #0
13830     94 2B B1 FD | 	call	#__system___getiolock_0540
13834     FD 12 02 F6 | 	mov	arg01, result1
13838     28 D1 B0 FD | 	call	#__system___lockmem
1383c     00 12 06 F6 | 	mov	arg01, #0
13840     0A 14 06 F6 | 	mov	arg02, #10
13844     00 16 06 F6 | 	mov	arg03, #0
13848     B4 DD B0 FD | 	call	#__system___basic_print_char
1384c     00 12 06 F6 | 	mov	arg01, #0
13850     74 2B B1 FD | 	call	#__system___getiolock_0540
13854     FD 00 68 FC | 	wrlong	#0, result1
13858                 | LR__1629
13858                 | LR__1630
13858     A7 F0 03 F6 | 	mov	ptra, fp
1385c     B2 00 A0 FD | 	call	#popregs_
13860                 | _do_print_ret
13860     2D 00 64 FD | 	ret
13864                 | 
13864                 | ' 
13864                 | ' ' ------------------- push a variable on the stack. No command for this, a variable is a command
13864                 | ' 
13864                 | ' sub do_push
13864                 | _do_push
13864                 | ' if stackpointer<maxstack then 
13864     43 00 00 FF 
13868     58 E4 05 F1 | 	add	objptr, ##34392
1386c     F2 00 02 FB | 	rdlong	_var01, objptr
13870     43 00 00 FF 
13874     58 E4 85 F1 | 	sub	objptr, ##34392
13878     01 00 00 FF 
1387c     00 00 56 F2 | 	cmps	_var01, ##512 wc
13880     F8 00 90 3D |  if_ae	jmp	#LR__1640
13884     4A 00 00 FF 
13888     80 E4 05 F1 | 	add	objptr, ##38016
1388c     F2 02 02 FB | 	rdlong	_var02, objptr
13890     01 05 02 F6 | 	mov	_var03, _var02
13894     01 04 66 F0 | 	shl	_var03, #1
13898     01 05 02 F1 | 	add	_var03, _var02
1389c     02 04 66 F0 | 	shl	_var03, #2
138a0     03 00 00 FF 
138a4     04 E4 85 F1 | 	sub	objptr, ##1540
138a8     F2 04 02 F1 | 	add	_var03, objptr
138ac     02 01 02 FB | 	rdlong	_var01, _var03
138b0     04 04 06 F1 | 	add	_var03, #4
138b4     02 07 02 FB | 	rdlong	_var04, _var03
138b8     01 05 02 F6 | 	mov	_var03, _var02
138bc     01 04 66 F0 | 	shl	_var03, #1
138c0     01 05 02 F1 | 	add	_var03, _var02
138c4     02 04 66 F0 | 	shl	_var03, #2
138c8     F2 04 02 F1 | 	add	_var03, objptr
138cc     08 04 06 F1 | 	add	_var03, #8
138d0     02 03 02 FB | 	rdlong	_var02, _var03
138d4     04 00 00 FF 
138d8     24 E4 85 F1 | 	sub	objptr, ##2084
138dc     F2 04 02 FB | 	rdlong	_var03, objptr
138e0     02 09 02 F6 | 	mov	_var05, _var03
138e4     01 08 66 F0 | 	shl	_var05, #1
138e8     02 09 02 F1 | 	add	_var05, _var03
138ec     02 08 66 F0 | 	shl	_var05, #2
138f0     0C 00 00 FF 
138f4     0C E4 85 F1 | 	sub	objptr, ##6156
138f8     F2 08 02 F1 | 	add	_var05, objptr
138fc     04 01 62 FC | 	wrlong	_var01, _var05
13900     0C 00 00 FF 
13904     0C E4 05 F1 | 	add	objptr, ##6156
13908     F2 08 02 FB | 	rdlong	_var05, objptr
1390c     04 05 02 F6 | 	mov	_var03, _var05
13910     01 04 66 F0 | 	shl	_var03, #1
13914     04 05 02 F1 | 	add	_var03, _var05
13918     02 04 66 F0 | 	shl	_var03, #2
1391c     0C 00 00 FF 
13920     0C E4 85 F1 | 	sub	objptr, ##6156
13924     F2 04 02 F1 | 	add	_var03, objptr
13928     04 04 06 F1 | 	add	_var03, #4
1392c     02 07 62 FC | 	wrlong	_var04, _var03
13930     0C 00 00 FF 
13934     0C E4 05 F1 | 	add	objptr, ##6156
13938     F2 08 02 FB | 	rdlong	_var05, objptr
1393c     04 07 02 F6 | 	mov	_var04, _var05
13940     01 06 66 F0 | 	shl	_var04, #1
13944     04 07 02 F1 | 	add	_var04, _var05
13948     02 06 66 F0 | 	shl	_var04, #2
1394c     0C 00 00 FF 
13950     0C E4 85 F1 | 	sub	objptr, ##6156
13954     F2 06 02 F1 | 	add	_var04, objptr
13958     08 06 06 F1 | 	add	_var04, #8
1395c     03 03 62 FC | 	wrlong	_var02, _var04
13960     0C 00 00 FF 
13964     0C E4 05 F1 | 	add	objptr, ##6156
13968     F2 00 02 FB | 	rdlong	_var01, objptr
1396c     01 00 06 F1 | 	add	_var01, #1
13970     F2 00 62 FC | 	wrlong	_var01, objptr
13974     43 00 00 FF 
13978     58 E4 85 F1 | 	sub	objptr, ##34392
1397c                 | LR__1640
1397c                 | _do_push_ret
1397c     2D 00 64 FD | 	ret
13980                 | 
13980                 | ' 
13980                 | ' '-------------------- put
13980                 | ' 
13980                 | ' sub do_put			' put  #chn,addr,(amount,(pos))
13980                 | _do_put
13980     03 4A 05 F6 | 	mov	COUNT_, #3
13984     A8 00 A0 FD | 	call	#pushregs_
13988     28 F0 07 F1 | 	add	ptra, #40
1398c     4A 00 00 FF 
13990     80 E4 05 F1 | 	add	objptr, ##38016
13994     F2 1A 02 FB | 	rdlong	arg05, objptr
13998     0D 19 02 F6 | 	mov	arg04, arg05
1399c     01 18 66 F0 | 	shl	arg04, #1
139a0     0D 19 02 F1 | 	add	arg04, arg05
139a4     02 18 66 F0 | 	shl	arg04, #2
139a8     03 00 00 FF 
139ac     04 E4 85 F1 | 	sub	objptr, ##1540
139b0     F2 18 02 F1 | 	add	arg04, objptr
139b4     0C 1B 02 FB | 	rdlong	arg05, arg04
139b8     A7 1A 62 FC | 	wrlong	arg05, fp
139bc                 | ' 
139bc                 | ' numpar=compiledline(lineptr_e).result.uresult
139bc                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
139bc     04 1A 0E F2 | 	cmp	arg05, #4 wz
139c0     47 00 00 FF 
139c4     7C E4 85 F1 | 	sub	objptr, ##36476
139c8     48 00 90 5D |  if_ne	jmp	#LR__1650
139cc     DC 78 BF FD | 	call	#_pop
139d0     FF 1A 02 F6 | 	mov	arg05, result3
139d4     1C 4E 05 F1 | 	add	fp, #28
139d8     A7 FA 61 FC | 	wrlong	result1, fp
139dc     04 4E 05 F1 | 	add	fp, #4
139e0     A7 FC 61 FC | 	wrlong	result2, fp
139e4     04 4E 05 F1 | 	add	fp, #4
139e8     A7 1A 62 FC | 	wrlong	arg05, fp
139ec     08 4E 85 F1 | 	sub	fp, #8
139f0     A7 12 02 F6 | 	mov	arg01, fp
139f4     1C 4E 85 F1 | 	sub	fp, #28
139f8     94 7A BF FD | 	call	#_converttoint
139fc     52 00 00 FF 
13a00     10 E4 05 F1 | 	add	objptr, ##42000
13a04     F2 FA 61 FC | 	wrlong	result1, objptr
13a08     52 00 00 FF 
13a0c     10 E4 85 F1 | 	sub	objptr, ##42000
13a10     18 00 90 FD | 	jmp	#LR__1651
13a14                 | LR__1650
13a14     52 00 00 FF 
13a18     10 E4 05 F1 | 	add	objptr, ##42000
13a1c     FF FF FF FF 
13a20     F2 FE 6B FC | 	wrlong	##-1, objptr
13a24     52 00 00 FF 
13a28     10 E4 85 F1 | 	sub	objptr, ##42000
13a2c                 | LR__1651
13a2c                 | ' if numpar>=3 then t1=pop() : amount=converttoint(t1) else amount=1
13a2c     A7 1A 02 FB | 	rdlong	arg05, fp
13a30     03 1A 56 F2 | 	cmps	arg05, #3 wc
13a34     40 00 90 CD |  if_b	jmp	#LR__1652
13a38     70 78 BF FD | 	call	#_pop
13a3c     FF 1A 02 F6 | 	mov	arg05, result3
13a40     1C 4E 05 F1 | 	add	fp, #28
13a44     A7 FA 61 FC | 	wrlong	result1, fp
13a48     04 4E 05 F1 | 	add	fp, #4
13a4c     A7 FC 61 FC | 	wrlong	result2, fp
13a50     04 4E 05 F1 | 	add	fp, #4
13a54     A7 1A 62 FC | 	wrlong	arg05, fp
13a58     08 4E 85 F1 | 	sub	fp, #8
13a5c     A7 12 02 F6 | 	mov	arg01, fp
13a60     1C 4E 85 F1 | 	sub	fp, #28
13a64     28 7A BF FD | 	call	#_converttoint
13a68     08 4E 05 F1 | 	add	fp, #8
13a6c     A7 FA 61 FC | 	wrlong	result1, fp
13a70     08 4E 85 F1 | 	sub	fp, #8
13a74     0C 00 90 FD | 	jmp	#LR__1653
13a78                 | LR__1652
13a78     08 4E 05 F1 | 	add	fp, #8
13a7c     A7 02 68 FC | 	wrlong	#1, fp
13a80     08 4E 85 F1 | 	sub	fp, #8
13a84                 | LR__1653
13a84                 | ' if numpar>=2 then t1=pop() : adr=converttoint(t1)
13a84     A7 18 02 FB | 	rdlong	arg04, fp
13a88     02 18 56 F2 | 	cmps	arg04, #2 wc
13a8c     3C 00 90 CD |  if_b	jmp	#LR__1654
13a90     18 78 BF FD | 	call	#_pop
13a94     FF 18 02 F6 | 	mov	arg04, result3
13a98     1C 4E 05 F1 | 	add	fp, #28
13a9c     A7 FA 61 FC | 	wrlong	result1, fp
13aa0     04 4E 05 F1 | 	add	fp, #4
13aa4     A7 FC 61 FC | 	wrlong	result2, fp
13aa8     04 4E 05 F1 | 	add	fp, #4
13aac     A7 18 62 FC | 	wrlong	arg04, fp
13ab0     08 4E 85 F1 | 	sub	fp, #8
13ab4     A7 12 02 F6 | 	mov	arg01, fp
13ab8     1C 4E 85 F1 | 	sub	fp, #28
13abc     D0 79 BF FD | 	call	#_converttoint
13ac0     0C 4E 05 F1 | 	add	fp, #12
13ac4     A7 FA 61 FC | 	wrlong	result1, fp
13ac8     0C 4E 85 F1 | 	sub	fp, #12
13acc                 | LR__1654
13acc     DC 77 BF FD | 	call	#_pop
13ad0     FF 18 02 F6 | 	mov	arg04, result3
13ad4     1C 4E 05 F1 | 	add	fp, #28
13ad8     A7 FA 61 FC | 	wrlong	result1, fp
13adc     04 4E 05 F1 | 	add	fp, #4
13ae0     A7 FC 61 FC | 	wrlong	result2, fp
13ae4     04 4E 05 F1 | 	add	fp, #4
13ae8     A7 18 62 FC | 	wrlong	arg04, fp
13aec     08 4E 85 F1 | 	sub	fp, #8
13af0     A7 12 02 F6 | 	mov	arg01, fp
13af4     1C 4E 85 F1 | 	sub	fp, #28
13af8     94 79 BF FD | 	call	#_converttoint
13afc     04 4E 05 F1 | 	add	fp, #4
13b00     A7 FA 61 FC | 	wrlong	result1, fp
13b04     10 4E 05 F1 | 	add	fp, #16
13b08     A7 1E 02 FB | 	rdlong	local01, fp
13b0c     14 4E 85 F1 | 	sub	fp, #20
13b10     02 1E 66 F0 | 	shl	local01, #2
13b14     50 00 00 FF 
13b18     C4 E4 05 F1 | 	add	objptr, ##41156
13b1c     F2 1E 02 F1 | 	add	local01, objptr
13b20     0F 01 68 FC | 	wrlong	#0, local01
13b24                 | ' t1=pop() : channel=converttoint(t1)
13b24                 | ' getres(j)=0
13b24                 | ' if pos>=0 then
13b24     01 00 00 FF 
13b28     4C E5 05 F1 | 	add	objptr, ##844
13b2c     F2 20 02 FB | 	rdlong	local02, objptr
13b30     52 00 00 FF 
13b34     10 E4 85 F1 | 	sub	objptr, ##42000
13b38     00 20 56 F2 | 	cmps	local02, #0 wc
13b3c     C0 01 90 CD |  if_b	jmp	#LR__1660
13b40     10 4E 05 F1 | 	add	fp, #16
13b44     A7 00 68 FC | 	wrlong	#0, fp
13b48     10 4E 85 F1 | 	sub	fp, #16
13b4c                 | '    i=0: do
13b4c                 | LR__1655
13b4c     14 4E 05 F1 | 	add	fp, #20
13b50     A7 00 68 FC | 	wrlong	#0, fp
13b54     14 4E 85 F1 | 	sub	fp, #20
13b58                 | '    j=0: do    
13b58                 | LR__1656
13b58                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
13b58     0C 4E 05 F1 | 	add	fp, #12
13b5c     A7 20 02 FB | 	rdlong	local02, fp
13b60     0C 4E 85 F1 | 	sub	fp, #12
13b64     00 04 00 FF 
13b68     00 20 56 F2 | 	cmps	local02, ##524288 wc
13b6c     4C 00 90 3D |  if_ae	jmp	#LR__1657
13b70     14 4E 05 F1 | 	add	fp, #20
13b74     A7 20 02 FB | 	rdlong	local02, fp
13b78     10 1F 02 F6 | 	mov	local01, local02
13b7c     4E 00 00 FF 
13b80     B4 E4 05 F1 | 	add	objptr, ##40116
13b84     F2 1E 02 F1 | 	add	local01, objptr
13b88     08 4E 85 F1 | 	sub	fp, #8
13b8c     A7 12 02 FB | 	rdlong	arg01, fp
13b90     04 4E 05 F1 | 	add	fp, #4
13b94     A7 18 02 FB | 	rdlong	arg04, fp
13b98     0A 18 66 F0 | 	shl	arg04, #10
13b9c     0C 13 02 F1 | 	add	arg01, arg04
13ba0     10 4E 85 F1 | 	sub	fp, #16
13ba4     10 13 02 F1 | 	add	arg01, local02
13ba8     09 FB C1 FA | 	rdbyte	result1, arg01
13bac     4E 00 00 FF 
13bb0     B4 E4 85 F1 | 	sub	objptr, ##40116
13bb4     0F FB 41 FC | 	wrbyte	result1, local01
13bb8     48 00 90 FD | 	jmp	#LR__1658
13bbc                 | LR__1657
13bbc     14 4E 05 F1 | 	add	fp, #20
13bc0     A7 20 02 FB | 	rdlong	local02, fp
13bc4     10 1F 02 F6 | 	mov	local01, local02
13bc8     4E 00 00 FF 
13bcc     B4 E4 05 F1 | 	add	objptr, ##40116
13bd0     F2 1E 02 F1 | 	add	local01, objptr
13bd4     08 4E 85 F1 | 	sub	fp, #8
13bd8     A7 12 02 FB | 	rdlong	arg01, fp
13bdc     04 4E 05 F1 | 	add	fp, #4
13be0     A7 18 02 FB | 	rdlong	arg04, fp
13be4     0A 18 66 F0 | 	shl	arg04, #10
13be8     0C 13 02 F1 | 	add	arg01, arg04
13bec     10 4E 85 F1 | 	sub	fp, #16
13bf0     10 13 02 F1 | 	add	arg01, local02
13bf4     4E 00 00 FF 
13bf8     B4 E4 85 F1 | 	sub	objptr, ##40116
13bfc     10 9A B0 FD | 	call	#_pspeek
13c00     0F FB 41 FC | 	wrbyte	result1, local01
13c04                 | LR__1658
13c04     14 4E 05 F1 | 	add	fp, #20
13c08     A7 20 02 FB | 	rdlong	local02, fp
13c0c     01 20 06 F1 | 	add	local02, #1
13c10     A7 20 62 FC | 	wrlong	local02, fp
13c14     14 4E 85 F1 | 	sub	fp, #20
13c18     02 00 00 FF 
13c1c     00 20 56 F2 | 	cmps	local02, ##1024 wc
13c20     2C 00 90 3D |  if_ae	jmp	#LR__1659
13c24     10 4E 05 F1 | 	add	fp, #16
13c28     A7 1E 02 FB | 	rdlong	local01, fp
13c2c     0A 1E 66 F0 | 	shl	local01, #10
13c30     04 4E 05 F1 | 	add	fp, #4
13c34     A7 20 02 FB | 	rdlong	local02, fp
13c38     10 1F 02 F1 | 	add	local01, local02
13c3c     0C 4E 85 F1 | 	sub	fp, #12
13c40     A7 20 02 FB | 	rdlong	local02, fp
13c44     08 4E 85 F1 | 	sub	fp, #8
13c48     10 1F 5A F2 | 	cmps	local01, local02 wcz
13c4c     08 FF 9F ED |  if_be	jmp	#LR__1656
13c50                 | LR__1659
13c50                 | '    put #channel, pos+1,block(0),amount, r : getres(channel)=r
13c50     04 4E 05 F1 | 	add	fp, #4
13c54     A7 12 02 FB | 	rdlong	arg01, fp
13c58     52 00 00 FF 
13c5c     10 E4 05 F1 | 	add	objptr, ##42000
13c60     F2 14 02 FB | 	rdlong	arg02, objptr
13c64     01 14 06 F1 | 	add	arg02, #1
13c68     03 00 00 FF 
13c6c     5C E5 85 F1 | 	sub	objptr, ##1884
13c70     F2 16 02 F6 | 	mov	arg03, objptr
13c74     4E 00 00 FF 
13c78     B4 E4 85 F1 | 	sub	objptr, ##40116
13c7c     04 4E 05 F1 | 	add	fp, #4
13c80     A7 18 02 FB | 	rdlong	arg04, fp
13c84     08 4E 85 F1 | 	sub	fp, #8
13c88     01 1A 06 F6 | 	mov	arg05, #1
13c8c     D8 DA B0 FD | 	call	#__system___basic_put
13c90     18 4E 05 F1 | 	add	fp, #24
13c94     A7 FA 61 FC | 	wrlong	result1, fp
13c98     14 4E 85 F1 | 	sub	fp, #20
13c9c     A7 1E 02 FB | 	rdlong	local01, fp
13ca0     02 1E 66 F0 | 	shl	local01, #2
13ca4     50 00 00 FF 
13ca8     C4 E4 05 F1 | 	add	objptr, ##41156
13cac     F2 1E 02 F1 | 	add	local01, objptr
13cb0     0F FB 61 FC | 	wrlong	result1, local01
13cb4                 | '    if 1024*i+j>amount then exit loop
13cb4     0C 4E 05 F1 | 	add	fp, #12
13cb8     A7 20 02 FB | 	rdlong	local02, fp
13cbc     0A 20 66 F0 | 	shl	local02, #10
13cc0     04 4E 05 F1 | 	add	fp, #4
13cc4     A7 1E 02 FB | 	rdlong	local01, fp
13cc8     0F 21 02 F1 | 	add	local02, local01
13ccc     0C 4E 85 F1 | 	sub	fp, #12
13cd0     A7 1E 02 FB | 	rdlong	local01, fp
13cd4     08 4E 85 F1 | 	sub	fp, #8
13cd8     0F 21 5A F2 | 	cmps	local02, local01 wcz
13cdc     50 00 00 FF 
13ce0     C4 E4 85 F1 | 	sub	objptr, ##41156
13ce4     CC 01 90 1D |  if_a	jmp	#LR__1667
13ce8     10 4E 05 F1 | 	add	fp, #16
13cec     A7 20 02 FB | 	rdlong	local02, fp
13cf0     01 20 06 F1 | 	add	local02, #1
13cf4     A7 20 62 FC | 	wrlong	local02, fp
13cf8     10 4E 85 F1 | 	sub	fp, #16
13cfc     4C FE 9F FD | 	jmp	#LR__1655
13d00                 | LR__1660
13d00     10 4E 05 F1 | 	add	fp, #16
13d04     A7 00 68 FC | 	wrlong	#0, fp
13d08     10 4E 85 F1 | 	sub	fp, #16
13d0c                 | '    i=0: do
13d0c                 | LR__1661
13d0c     14 4E 05 F1 | 	add	fp, #20
13d10     A7 00 68 FC | 	wrlong	#0, fp
13d14     14 4E 85 F1 | 	sub	fp, #20
13d18                 | '    j=0: do  
13d18                 | LR__1662
13d18                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
13d18     0C 4E 05 F1 | 	add	fp, #12
13d1c     A7 20 02 FB | 	rdlong	local02, fp
13d20     0C 4E 85 F1 | 	sub	fp, #12
13d24     00 04 00 FF 
13d28     00 20 56 F2 | 	cmps	local02, ##524288 wc
13d2c     4C 00 90 3D |  if_ae	jmp	#LR__1663
13d30     14 4E 05 F1 | 	add	fp, #20
13d34     A7 20 02 FB | 	rdlong	local02, fp
13d38     10 1F 02 F6 | 	mov	local01, local02
13d3c     4E 00 00 FF 
13d40     B4 E4 05 F1 | 	add	objptr, ##40116
13d44     F2 1E 02 F1 | 	add	local01, objptr
13d48     08 4E 85 F1 | 	sub	fp, #8
13d4c     A7 12 02 FB | 	rdlong	arg01, fp
13d50     04 4E 05 F1 | 	add	fp, #4
13d54     A7 18 02 FB | 	rdlong	arg04, fp
13d58     0A 18 66 F0 | 	shl	arg04, #10
13d5c     0C 13 02 F1 | 	add	arg01, arg04
13d60     10 4E 85 F1 | 	sub	fp, #16
13d64     10 13 02 F1 | 	add	arg01, local02
13d68     09 FB C1 FA | 	rdbyte	result1, arg01
13d6c     4E 00 00 FF 
13d70     B4 E4 85 F1 | 	sub	objptr, ##40116
13d74     0F FB 41 FC | 	wrbyte	result1, local01
13d78     48 00 90 FD | 	jmp	#LR__1664
13d7c                 | LR__1663
13d7c     14 4E 05 F1 | 	add	fp, #20
13d80     A7 20 02 FB | 	rdlong	local02, fp
13d84     10 1F 02 F6 | 	mov	local01, local02
13d88     4E 00 00 FF 
13d8c     B4 E4 05 F1 | 	add	objptr, ##40116
13d90     F2 1E 02 F1 | 	add	local01, objptr
13d94     08 4E 85 F1 | 	sub	fp, #8
13d98     A7 12 02 FB | 	rdlong	arg01, fp
13d9c     04 4E 05 F1 | 	add	fp, #4
13da0     A7 18 02 FB | 	rdlong	arg04, fp
13da4     0A 18 66 F0 | 	shl	arg04, #10
13da8     0C 13 02 F1 | 	add	arg01, arg04
13dac     10 4E 85 F1 | 	sub	fp, #16
13db0     10 13 02 F1 | 	add	arg01, local02
13db4     4E 00 00 FF 
13db8     B4 E4 85 F1 | 	sub	objptr, ##40116
13dbc     50 98 B0 FD | 	call	#_pspeek
13dc0     0F FB 41 FC | 	wrbyte	result1, local01
13dc4                 | LR__1664
13dc4     14 4E 05 F1 | 	add	fp, #20
13dc8     A7 20 02 FB | 	rdlong	local02, fp
13dcc     01 20 06 F1 | 	add	local02, #1
13dd0     A7 20 62 FC | 	wrlong	local02, fp
13dd4     14 4E 85 F1 | 	sub	fp, #20
13dd8     02 00 00 FF 
13ddc     00 20 56 F2 | 	cmps	local02, ##1024 wc
13de0     2C 00 90 3D |  if_ae	jmp	#LR__1665
13de4     10 4E 05 F1 | 	add	fp, #16
13de8     A7 1E 02 FB | 	rdlong	local01, fp
13dec     0A 1E 66 F0 | 	shl	local01, #10
13df0     04 4E 05 F1 | 	add	fp, #4
13df4     A7 20 02 FB | 	rdlong	local02, fp
13df8     10 1F 02 F1 | 	add	local01, local02
13dfc     0C 4E 85 F1 | 	sub	fp, #12
13e00     A7 20 02 FB | 	rdlong	local02, fp
13e04     08 4E 85 F1 | 	sub	fp, #8
13e08     10 1F 5A F2 | 	cmps	local01, local02 wcz
13e0c     08 FF 9F ED |  if_be	jmp	#LR__1662
13e10                 | LR__1665
13e10                 | '    put #channel,,block(0),amount, r : getres(channel)=r
13e10     04 4E 05 F1 | 	add	fp, #4
13e14     A7 12 02 FB | 	rdlong	arg01, fp
13e18     4E 00 00 FF 
13e1c     B4 E4 05 F1 | 	add	objptr, ##40116
13e20     F2 16 02 F6 | 	mov	arg03, objptr
13e24     4E 00 00 FF 
13e28     B4 E4 85 F1 | 	sub	objptr, ##40116
13e2c     04 4E 05 F1 | 	add	fp, #4
13e30     A7 18 02 FB | 	rdlong	arg04, fp
13e34     08 4E 85 F1 | 	sub	fp, #8
13e38     00 14 06 F6 | 	mov	arg02, #0
13e3c     01 1A 06 F6 | 	mov	arg05, #1
13e40     24 D9 B0 FD | 	call	#__system___basic_put
13e44     18 4E 05 F1 | 	add	fp, #24
13e48     A7 FA 61 FC | 	wrlong	result1, fp
13e4c     14 4E 85 F1 | 	sub	fp, #20
13e50     A7 1E 02 FB | 	rdlong	local01, fp
13e54     02 1E 66 F0 | 	shl	local01, #2
13e58     50 00 00 FF 
13e5c     C4 E4 05 F1 | 	add	objptr, ##41156
13e60     F2 1E 02 F1 | 	add	local01, objptr
13e64     0F FB 61 FC | 	wrlong	result1, local01
13e68                 | '    if 1024*i+j>amount then exit loop
13e68     0C 4E 05 F1 | 	add	fp, #12
13e6c     A7 20 02 FB | 	rdlong	local02, fp
13e70     0A 20 66 F0 | 	shl	local02, #10
13e74     04 4E 05 F1 | 	add	fp, #4
13e78     A7 1E 02 FB | 	rdlong	local01, fp
13e7c     0F 21 02 F1 | 	add	local02, local01
13e80     0C 4E 85 F1 | 	sub	fp, #12
13e84     A7 22 02 FB | 	rdlong	local03, fp
13e88     08 4E 85 F1 | 	sub	fp, #8
13e8c     11 21 5A F2 | 	cmps	local02, local03 wcz
13e90     50 00 00 FF 
13e94     C4 E4 85 F1 | 	sub	objptr, ##41156
13e98     18 00 90 1D |  if_a	jmp	#LR__1666
13e9c     10 4E 05 F1 | 	add	fp, #16
13ea0     A7 20 02 FB | 	rdlong	local02, fp
13ea4     01 20 06 F1 | 	add	local02, #1
13ea8     A7 20 62 FC | 	wrlong	local02, fp
13eac     10 4E 85 F1 | 	sub	fp, #16
13eb0     58 FE 9F FD | 	jmp	#LR__1661
13eb4                 | LR__1666
13eb4                 | LR__1667
13eb4     A7 F0 03 F6 | 	mov	ptra, fp
13eb8     B2 00 A0 FD | 	call	#popregs_
13ebc                 | _do_put_ret
13ebc     2D 00 64 FD | 	ret
13ec0                 | 
13ec0                 | ' 
13ec0                 | ' '-------------------- rdpin
13ec0                 | ' 
13ec0                 | ' sub do_rdpin
13ec0                 | _do_rdpin
13ec0     00 4A 05 F6 | 	mov	COUNT_, #0
13ec4     A8 00 A0 FD | 	call	#pushregs_
13ec8     0C F0 07 F1 | 	add	ptra, #12
13ecc     DC 73 BF FD | 	call	#_pop
13ed0     A7 FA 61 FC | 	wrlong	result1, fp
13ed4     04 4E 05 F1 | 	add	fp, #4
13ed8     A7 FC 61 FC | 	wrlong	result2, fp
13edc     04 4E 05 F1 | 	add	fp, #4
13ee0     A7 FE 61 FC | 	wrlong	result3, fp
13ee4     08 4E 85 F1 | 	sub	fp, #8
13ee8     A7 12 02 F6 | 	mov	arg01, fp
13eec     A0 75 BF FD | 	call	#_converttoint
13ef0     FD FA 89 FA | 	rdpin	result1, result1
13ef4     52 00 00 FF 
13ef8     14 E4 05 F1 | 	add	objptr, ##42004
13efc     F2 FA 61 FC | 	wrlong	result1, objptr
13f00     52 00 00 FF 
13f04     14 E4 85 F1 | 	sub	objptr, ##42004
13f08     08 4E 05 F1 | 	add	fp, #8
13f0c     A7 3A 68 FC | 	wrlong	#29, fp
13f10     08 4E 85 F1 | 	sub	fp, #8
13f14     A7 08 68 FC | 	wrlong	#4, fp
13f18     A7 12 02 F6 | 	mov	arg01, fp
13f1c     24 74 BF FD | 	call	#_push
13f20     A7 F0 03 F6 | 	mov	ptra, fp
13f24     B2 00 A0 FD | 	call	#popregs_
13f28                 | _do_rdpin_ret
13f28     2D 00 64 FD | 	ret
13f2c                 | 
13f2c                 | ' 
13f2c                 | ' '------------------- release
13f2c                 | ' 
13f2c                 | ' sub do_release
13f2c                 | _do_release
13f2c     00 4A 05 F6 | 	mov	COUNT_, #0
13f30     A8 00 A0 FD | 	call	#pushregs_
13f34     10 F0 07 F1 | 	add	ptra, #16
13f38     70 73 BF FD | 	call	#_pop
13f3c     FF 14 02 F6 | 	mov	arg02, result3
13f40     A7 FA 61 FC | 	wrlong	result1, fp
13f44     04 4E 05 F1 | 	add	fp, #4
13f48     A7 FC 61 FC | 	wrlong	result2, fp
13f4c     04 4E 05 F1 | 	add	fp, #4
13f50     A7 14 62 FC | 	wrlong	arg02, fp
13f54     08 4E 85 F1 | 	sub	fp, #8
13f58     A7 12 02 F6 | 	mov	arg01, fp
13f5c     30 75 BF FD | 	call	#_converttoint
13f60     0C 4E 05 F1 | 	add	fp, #12
13f64     A7 FA 61 FC | 	wrlong	result1, fp
13f68                 | ' 
13f68                 | ' t1=pop()
13f68                 | ' channel=converttoint(t1)
13f68                 | ' if channel>=0 andalso channel<=7 then lpoke base+64*channel+44,255  
13f68     0C 4E 85 F1 | 	sub	fp, #12
13f6c     00 FA 55 F2 | 	cmps	result1, #0 wc
13f70     44 00 90 CD |  if_b	jmp	#LR__1670
13f74     0C 4E 05 F1 | 	add	fp, #12
13f78     A7 14 02 FB | 	rdlong	arg02, fp
13f7c     0C 4E 85 F1 | 	sub	fp, #12
13f80     08 14 56 F2 | 	cmps	arg02, #8 wc
13f84     30 00 90 3D |  if_ae	jmp	#LR__1670
13f88     37 00 00 FF 
13f8c     10 E4 05 F1 | 	add	objptr, ##28176
13f90     F2 12 02 FB | 	rdlong	arg01, objptr
13f94     37 00 00 FF 
13f98     10 E4 85 F1 | 	sub	objptr, ##28176
13f9c     0C 4E 05 F1 | 	add	fp, #12
13fa0     A7 14 02 FB | 	rdlong	arg02, fp
13fa4     0C 4E 85 F1 | 	sub	fp, #12
13fa8     06 14 66 F0 | 	shl	arg02, #6
13fac     0A 13 02 F1 | 	add	arg01, arg02
13fb0     2C 12 06 F1 | 	add	arg01, #44
13fb4     09 FF 69 FC | 	wrlong	#255, arg01
13fb8                 | LR__1670
13fb8     A7 F0 03 F6 | 	mov	ptra, fp
13fbc     B2 00 A0 FD | 	call	#popregs_
13fc0                 | _do_release_ret
13fc0     2D 00 64 FD | 	ret
13fc4                 | 
13fc4                 | ' 
13fc4                 | ' '------------------- return
13fc4                 | ' 
13fc4                 | ' sub do_return()
13fc4                 | _do_return
13fc4                 | ' if gosubtop>0 then
13fc4     50 00 00 FF 
13fc8     0C E5 05 F1 | 	add	objptr, ##41228
13fcc     F2 00 02 FB | 	rdlong	_var01, objptr
13fd0     50 00 00 FF 
13fd4     0C E5 85 F1 | 	sub	objptr, ##41228
13fd8     01 00 56 F2 | 	cmps	_var01, #1 wc
13fdc     8C 00 90 CD |  if_b	jmp	#LR__1680
13fe0     50 00 00 FF 
13fe4     0C E5 05 F1 | 	add	objptr, ##41228
13fe8     F2 00 02 FB | 	rdlong	_var01, objptr
13fec     03 00 66 F0 | 	shl	_var01, #3
13ff0     03 00 00 FF 
13ff4     60 E5 85 F1 | 	sub	objptr, ##1888
13ff8     F2 00 02 F1 | 	add	_var01, objptr
13ffc     00 01 02 FB | 	rdlong	_var01, _var01
14000     03 00 00 FF 
14004     0C E5 05 F1 | 	add	objptr, ##1804
14008     F2 00 62 FC | 	wrlong	_var01, objptr
1400c     54 E4 05 F1 | 	add	objptr, #84
14010     F2 00 02 FB | 	rdlong	_var01, objptr
14014     03 00 66 F0 | 	shl	_var01, #3
14018     03 00 00 FF 
1401c     60 E5 85 F1 | 	sub	objptr, ##1888
14020     F2 00 02 F1 | 	add	_var01, objptr
14024     04 00 06 F1 | 	add	_var01, #4
14028     00 01 02 FB | 	rdlong	_var01, _var01
1402c     03 00 00 FF 
14030     10 E5 05 F1 | 	add	objptr, ##1808
14034     F2 00 62 FC | 	wrlong	_var01, objptr
14038     06 00 00 FF 
1403c     40 E4 85 F1 | 	sub	objptr, ##3136
14040     F2 00 02 FB | 	rdlong	_var01, objptr
14044     01 00 86 F1 | 	sub	_var01, #1
14048     04 E4 05 F1 | 	add	objptr, #4
1404c     F2 00 62 FC | 	wrlong	_var01, objptr
14050     06 00 00 FF 
14054     8C E4 05 F1 | 	add	objptr, ##3212
14058     F2 00 02 FB | 	rdlong	_var01, objptr
1405c     01 00 86 F1 | 	sub	_var01, #1
14060     F2 00 62 FC | 	wrlong	_var01, objptr
14064     50 00 00 FF 
14068     0C E5 85 F1 | 	sub	objptr, ##41228
1406c                 | LR__1680
1406c                 | _do_return_ret
1406c     2D 00 64 FD | 	ret
14070                 | 
14070                 | ' 
14070                 | ' '------------------- right$
14070                 | ' 
14070                 | ' sub do_right
14070                 | _do_right
14070     00 4A 05 F6 | 	mov	COUNT_, #0
14074     A8 00 A0 FD | 	call	#pushregs_
14078     14 F0 07 F1 | 	add	ptra, #20
1407c     4A 00 00 FF 
14080     80 E4 05 F1 | 	add	objptr, ##38016
14084     F2 16 02 FB | 	rdlong	arg03, objptr
14088     0B 15 02 F6 | 	mov	arg02, arg03
1408c     01 14 66 F0 | 	shl	arg02, #1
14090     0B 15 02 F1 | 	add	arg02, arg03
14094     02 14 66 F0 | 	shl	arg02, #2
14098     03 00 00 FF 
1409c     04 E4 85 F1 | 	sub	objptr, ##1540
140a0     F2 14 02 F1 | 	add	arg02, objptr
140a4     0A 17 02 FB | 	rdlong	arg03, arg02
140a8     0C 4E 05 F1 | 	add	fp, #12
140ac     A7 16 62 FC | 	wrlong	arg03, fp
140b0                 | ' 
140b0                 | ' numpar=compiledline(lineptr_e).result.uresult
140b0                 | ' if numpar<>2  then print "right$: "; : printerror(39) : return
140b0     0C 4E 85 F1 | 	sub	fp, #12
140b4     02 16 0E F2 | 	cmp	arg03, #2 wz
140b8     47 00 00 FF 
140bc     7C E4 85 F1 | 	sub	objptr, ##36476
140c0     3C 00 90 AD |  if_e	jmp	#LR__1690
140c4     00 12 06 F6 | 	mov	arg01, #0
140c8     FC 22 B1 FD | 	call	#__system___getiolock_0540
140cc     FD 12 02 F6 | 	mov	arg01, result1
140d0     90 C8 B0 FD | 	call	#__system___lockmem
140d4     85 01 00 FF 
140d8     9A 14 06 F6 | 	mov	arg02, ##@LR__5510
140dc     00 12 06 F6 | 	mov	arg01, #0
140e0     00 16 06 F6 | 	mov	arg03, #0
140e4     70 D5 B0 FD | 	call	#__system___basic_print_string
140e8     00 12 06 F6 | 	mov	arg01, #0
140ec     D8 22 B1 FD | 	call	#__system___getiolock_0540
140f0     FD 00 68 FC | 	wrlong	#0, result1
140f4     27 12 06 F6 | 	mov	arg01, #39
140f8     D8 92 B0 FD | 	call	#_printerror
140fc     E8 00 90 FD | 	jmp	#LR__1693
14100                 | LR__1690
14100     A8 71 BF FD | 	call	#_pop
14104     FF 16 02 F6 | 	mov	arg03, result3
14108     A7 FA 61 FC | 	wrlong	result1, fp
1410c     04 4E 05 F1 | 	add	fp, #4
14110     A7 FC 61 FC | 	wrlong	result2, fp
14114     04 4E 05 F1 | 	add	fp, #4
14118     A7 16 62 FC | 	wrlong	arg03, fp
1411c     08 4E 85 F1 | 	sub	fp, #8
14120     A7 12 02 F6 | 	mov	arg01, fp
14124     68 73 BF FD | 	call	#_converttoint
14128     FD 16 02 F6 | 	mov	arg03, result1
1412c     10 4E 05 F1 | 	add	fp, #16
14130     A7 16 62 FC | 	wrlong	arg03, fp
14134     10 4E 85 F1 | 	sub	fp, #16
14138     70 71 BF FD | 	call	#_pop
1413c     FF 16 02 F6 | 	mov	arg03, result3
14140     A7 FA 61 FC | 	wrlong	result1, fp
14144     04 4E 05 F1 | 	add	fp, #4
14148     A7 FC 61 FC | 	wrlong	result2, fp
1414c     04 4E 05 F1 | 	add	fp, #4
14150     A7 16 62 FC | 	wrlong	arg03, fp
14154                 | ' t1=pop() : arg=converttoint(t1)
14154                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
14154     08 4E 85 F1 | 	sub	fp, #8
14158     2B 16 0E F2 | 	cmp	arg03, #43 wz
1415c     18 00 90 5D |  if_ne	jmp	#LR__1691
14160     A7 12 02 FB | 	rdlong	arg01, fp
14164     BC 72 BF FD | 	call	#_convertstring
14168     A7 FA 61 FC | 	wrlong	result1, fp
1416c     08 4E 05 F1 | 	add	fp, #8
14170     A7 3E 68 FC | 	wrlong	#31, fp
14174     08 4E 85 F1 | 	sub	fp, #8
14178                 | LR__1691
14178                 | ' if t1.result_type<>result_string then print "right$: "; : printerror(15) : return 
14178     08 4E 05 F1 | 	add	fp, #8
1417c     A7 16 02 FB | 	rdlong	arg03, fp
14180     08 4E 85 F1 | 	sub	fp, #8
14184     1F 16 0E F2 | 	cmp	arg03, #31 wz
14188     3C 00 90 AD |  if_e	jmp	#LR__1692
1418c     00 12 06 F6 | 	mov	arg01, #0
14190     34 22 B1 FD | 	call	#__system___getiolock_0540
14194     FD 12 02 F6 | 	mov	arg01, result1
14198     C8 C7 B0 FD | 	call	#__system___lockmem
1419c     85 01 00 FF 
141a0     A3 14 06 F6 | 	mov	arg02, ##@LR__5511
141a4     00 12 06 F6 | 	mov	arg01, #0
141a8     00 16 06 F6 | 	mov	arg03, #0
141ac     A8 D4 B0 FD | 	call	#__system___basic_print_string
141b0     00 12 06 F6 | 	mov	arg01, #0
141b4     10 22 B1 FD | 	call	#__system___getiolock_0540
141b8     FD 00 68 FC | 	wrlong	#0, result1
141bc     0F 12 06 F6 | 	mov	arg01, #15
141c0     10 92 B0 FD | 	call	#_printerror
141c4     20 00 90 FD | 	jmp	#LR__1693
141c8                 | LR__1692
141c8     A7 12 02 FB | 	rdlong	arg01, fp
141cc     10 4E 05 F1 | 	add	fp, #16
141d0     A7 14 02 FB | 	rdlong	arg02, fp
141d4     10 4E 85 F1 | 	sub	fp, #16
141d8     8C E8 B0 FD | 	call	#__system__Right_S
141dc     A7 FA 61 FC | 	wrlong	result1, fp
141e0     A7 12 02 F6 | 	mov	arg01, fp
141e4     5C 71 BF FD | 	call	#_push
141e8                 | LR__1693
141e8     A7 F0 03 F6 | 	mov	ptra, fp
141ec     B2 00 A0 FD | 	call	#popregs_
141f0                 | _do_right_ret
141f0     2D 00 64 FD | 	ret
141f4                 | 
141f4                 | ' 
141f4                 | ' '------------------- rnd
141f4                 | ' 
141f4                 | ' sub do_rnd
141f4                 | _do_rnd
141f4     01 4A 05 F6 | 	mov	COUNT_, #1
141f8     A8 00 A0 FD | 	call	#pushregs_
141fc     10 F0 07 F1 | 	add	ptra, #16
14200     4A 00 00 FF 
14204     80 E4 05 F1 | 	add	objptr, ##38016
14208     F2 1E 02 FB | 	rdlong	local01, objptr
1420c     0F 17 02 F6 | 	mov	arg03, local01
14210     01 16 66 F0 | 	shl	arg03, #1
14214     0F 17 02 F1 | 	add	arg03, local01
14218     02 16 66 F0 | 	shl	arg03, #2
1421c     03 00 00 FF 
14220     04 E4 85 F1 | 	sub	objptr, ##1540
14224     F2 16 02 F1 | 	add	arg03, objptr
14228     0B 17 02 FB | 	rdlong	arg03, arg03
1422c     0C 4E 05 F1 | 	add	fp, #12
14230     A7 16 62 FC | 	wrlong	arg03, fp
14234                 | ' 
14234                 | ' numpar=compiledline(lineptr_e).result.uresult
14234                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
14234     0C 4E 85 F1 | 	sub	fp, #12
14238     02 16 16 F2 | 	cmp	arg03, #2 wc
1423c     47 00 00 FF 
14240     7C E4 85 F1 | 	sub	objptr, ##36476
14244     3C 00 90 CD |  if_b	jmp	#LR__1700
14248     00 12 06 F6 | 	mov	arg01, #0
1424c     78 21 B1 FD | 	call	#__system___getiolock_0540
14250     FD 12 02 F6 | 	mov	arg01, result1
14254     0C C7 B0 FD | 	call	#__system___lockmem
14258     85 01 00 FF 
1425c     AC 14 06 F6 | 	mov	arg02, ##@LR__5512
14260     00 12 06 F6 | 	mov	arg01, #0
14264     00 16 06 F6 | 	mov	arg03, #0
14268     EC D3 B0 FD | 	call	#__system___basic_print_string
1426c     00 12 06 F6 | 	mov	arg01, #0
14270     54 21 B1 FD | 	call	#__system___getiolock_0540
14274     FD 00 68 FC | 	wrlong	#0, result1
14278     27 12 06 F6 | 	mov	arg01, #39
1427c     54 91 B0 FD | 	call	#_printerror
14280     2C 01 90 FD | 	jmp	#LR__1707
14284                 | LR__1700
14284                 | ' if numpar=0 then
14284     0C 4E 05 F1 | 	add	fp, #12
14288     A7 FE 09 FB | 	rdlong	result3, fp wz
1428c     0C 4E 85 F1 | 	sub	fp, #12
14290     20 00 90 5D |  if_ne	jmp	#LR__1701
14294     08 4E 05 F1 | 	add	fp, #8
14298     A7 3A 68 FC | 	wrlong	#29, fp
1429c     08 4E 85 F1 | 	sub	fp, #8
142a0     1B FA 61 FD | 	getrnd	result1
142a4     A7 FA 61 FC | 	wrlong	result1, fp
142a8     A7 12 02 F6 | 	mov	arg01, fp
142ac     94 70 BF FD | 	call	#_push
142b0     FC 00 90 FD | 	jmp	#LR__1706
142b4                 | LR__1701
142b4     F4 6F BF FD | 	call	#_pop
142b8     A7 FA 61 FC | 	wrlong	result1, fp
142bc     04 4E 05 F1 | 	add	fp, #4
142c0     A7 FC 61 FC | 	wrlong	result2, fp
142c4     04 4E 05 F1 | 	add	fp, #4
142c8     A7 FE 61 FC | 	wrlong	result3, fp
142cc                 | '   t1=pop()
142cc                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
142cc     08 4E 85 F1 | 	sub	fp, #8
142d0     1C FE 0D F2 | 	cmp	result3, #28 wz
142d4     08 4E 05 51 |  if_ne	add	fp, #8
142d8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
142dc     08 4E 85 51 |  if_ne	sub	fp, #8
142e0     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
142e4     2C 00 90 5D |  if_ne	jmp	#LR__1702
142e8     1B FA 61 FD | 	getrnd	result1
142ec     A7 1E 02 FB | 	rdlong	local01, fp
142f0     0F FB 11 FD | 	qdiv	result1, local01
142f4     A7 12 02 F6 | 	mov	arg01, fp
142f8     19 1E 62 FD | 	getqy	local01
142fc     A7 1E 62 FC | 	wrlong	local01, fp
14300     08 4E 05 F1 | 	add	fp, #8
14304     A7 3A 68 FC | 	wrlong	#29, fp
14308     08 4E 85 F1 | 	sub	fp, #8
1430c     34 70 BF FD | 	call	#_push
14310     9C 00 90 FD | 	jmp	#LR__1705
14314                 | LR__1702
14314     08 4E 05 F1 | 	add	fp, #8
14318     A7 1E 02 FB | 	rdlong	local01, fp
1431c     08 4E 85 F1 | 	sub	fp, #8
14320     1E 1E 0E F2 | 	cmp	local01, #30 wz
14324     48 00 90 5D |  if_ne	jmp	#LR__1703
14328     A7 12 02 FB | 	rdlong	arg01, fp
1432c     00 C0 24 FF 
14330     00 14 06 F6 | 	mov	arg02, ##1233125376
14334     E4 F3 B0 FD | 	call	#__system___float_div
14338     FD 1E 02 F6 | 	mov	local01, result1
1433c     1B 12 62 FD | 	getrnd	arg01
14340     74 13 06 F4 | 	bitl	arg01, #372
14344     CC ED B0 FD | 	call	#__system___float_fromuns
14348     FD 14 02 F6 | 	mov	arg02, result1
1434c     0F 13 02 F6 | 	mov	arg01, local01
14350     C4 F1 B0 FD | 	call	#__system___float_mul
14354     A7 FA 61 FC | 	wrlong	result1, fp
14358     08 4E 05 F1 | 	add	fp, #8
1435c     A7 3C 68 FC | 	wrlong	#30, fp
14360     08 4E 85 F1 | 	sub	fp, #8
14364     A7 12 02 F6 | 	mov	arg01, fp
14368     D8 6F BF FD | 	call	#_push
1436c     40 00 90 FD | 	jmp	#LR__1704
14370                 | LR__1703
14370                 | '     print "rnd: "; : printerror(40) 
14370     00 12 06 F6 | 	mov	arg01, #0
14374     50 20 B1 FD | 	call	#__system___getiolock_0540
14378     FD 12 02 F6 | 	mov	arg01, result1
1437c     E4 C5 B0 FD | 	call	#__system___lockmem
14380     85 01 00 FF 
14384     B2 14 06 F6 | 	mov	arg02, ##@LR__5513
14388     00 12 06 F6 | 	mov	arg01, #0
1438c     00 16 06 F6 | 	mov	arg03, #0
14390     C4 D2 B0 FD | 	call	#__system___basic_print_string
14394     00 12 06 F6 | 	mov	arg01, #0
14398     2C 20 B1 FD | 	call	#__system___getiolock_0540
1439c     FD 00 68 FC | 	wrlong	#0, result1
143a0     28 12 06 F6 | 	mov	arg01, #40
143a4     2C 90 B0 FD | 	call	#_printerror
143a8     A7 12 02 F6 | 	mov	arg01, fp
143ac     94 6F BF FD | 	call	#_push
143b0                 | LR__1704
143b0                 | LR__1705
143b0                 | LR__1706
143b0                 | LR__1707
143b0     A7 F0 03 F6 | 	mov	ptra, fp
143b4     B2 00 A0 FD | 	call	#popregs_
143b8                 | _do_rnd_ret
143b8     2D 00 64 FD | 	ret
143bc                 | 
143bc                 | ' 
143bc                 | ' '-------------------- round
143bc                 | ' 
143bc                 | ' sub do_round
143bc                 | _do_round
143bc     00 4A 05 F6 | 	mov	COUNT_, #0
143c0     A8 00 A0 FD | 	call	#pushregs_
143c4     0C F0 07 F1 | 	add	ptra, #12
143c8     E0 6E BF FD | 	call	#_pop
143cc     A7 FA 61 FC | 	wrlong	result1, fp
143d0     04 4E 05 F1 | 	add	fp, #4
143d4     A7 FC 61 FC | 	wrlong	result2, fp
143d8     04 4E 05 F1 | 	add	fp, #4
143dc     A7 FE 61 FC | 	wrlong	result3, fp
143e0     08 4E 85 F1 | 	sub	fp, #8
143e4     A7 12 02 F6 | 	mov	arg01, fp
143e8     A4 70 BF FD | 	call	#_converttoint
143ec     A7 FA 61 FC | 	wrlong	result1, fp
143f0     08 4E 05 F1 | 	add	fp, #8
143f4     A7 38 68 FC | 	wrlong	#28, fp
143f8     08 4E 85 F1 | 	sub	fp, #8
143fc     A7 12 02 F6 | 	mov	arg01, fp
14400     40 6F BF FD | 	call	#_push
14404     A7 F0 03 F6 | 	mov	ptra, fp
14408     B2 00 A0 FD | 	call	#popregs_
1440c                 | _do_round_ret
1440c     2D 00 64 FD | 	ret
14410                 | 
14410                 | ' 
14410                 | ' '-------------------- rqpin
14410                 | ' 
14410                 | ' sub do_rqpin
14410                 | _do_rqpin
14410     00 4A 05 F6 | 	mov	COUNT_, #0
14414     A8 00 A0 FD | 	call	#pushregs_
14418     0C F0 07 F1 | 	add	ptra, #12
1441c     8C 6E BF FD | 	call	#_pop
14420     A7 FA 61 FC | 	wrlong	result1, fp
14424     04 4E 05 F1 | 	add	fp, #4
14428     A7 FC 61 FC | 	wrlong	result2, fp
1442c     04 4E 05 F1 | 	add	fp, #4
14430     A7 FE 61 FC | 	wrlong	result3, fp
14434     08 4E 85 F1 | 	sub	fp, #8
14438     A7 12 02 F6 | 	mov	arg01, fp
1443c     50 70 BF FD | 	call	#_converttoint
14440     FD 12 02 F6 | 	mov	arg01, result1
14444     00 FA 05 F6 | 	mov	result1, #0
14448     09 FB 81 FA | 	rqpin	result1, arg01
1444c     52 00 00 FF 
14450     14 E4 05 F1 | 	add	objptr, ##42004
14454     F2 FA 61 FC | 	wrlong	result1, objptr
14458     52 00 00 FF 
1445c     14 E4 85 F1 | 	sub	objptr, ##42004
14460     08 4E 05 F1 | 	add	fp, #8
14464     A7 3A 68 FC | 	wrlong	#29, fp
14468     08 4E 85 F1 | 	sub	fp, #8
1446c     A7 08 68 FC | 	wrlong	#4, fp
14470     A7 12 02 F6 | 	mov	arg01, fp
14474     CC 6E BF FD | 	call	#_push
14478     A7 F0 03 F6 | 	mov	ptra, fp
1447c     B2 00 A0 FD | 	call	#popregs_
14480                 | _do_rqpin_ret
14480     2D 00 64 FD | 	ret
14484                 | 
14484                 | ' 
14484                 | ' ' ------------------ run
14484                 | ' 
14484                 | ' sub do_run
14484                 | _do_run
14484     04 4A 05 F6 | 	mov	COUNT_, #4
14488     A8 00 A0 FD | 	call	#pushregs_
1448c     4A 00 00 FF 
14490     80 E4 05 F1 | 	add	objptr, ##38016
14494     F2 1E 02 FB | 	rdlong	local01, objptr
14498     06 00 00 FF 
1449c     38 E4 05 F1 | 	add	objptr, ##3128
144a0     F2 20 02 FB | 	rdlong	local02, objptr
144a4     04 E4 05 F1 | 	add	objptr, #4
144a8     F2 22 02 FB | 	rdlong	local03, objptr
144ac     0F 19 02 F6 | 	mov	arg04, local01
144b0     0C 17 02 F6 | 	mov	arg03, arg04
144b4     01 16 66 F0 | 	shl	arg03, #1
144b8     0C 17 02 F1 | 	add	arg03, arg04
144bc     02 16 66 F0 | 	shl	arg03, #2
144c0     09 00 00 FF 
144c4     40 E4 85 F1 | 	sub	objptr, ##4672
144c8     F2 16 02 F1 | 	add	arg03, objptr
144cc     0B 15 02 FB | 	rdlong	arg02, arg03
144d0                 | ' 
144d0                 | ' r_lineptr_e=lineptr_e
144d0                 | ' r_runptr=runptr
144d0                 | ' r_runptr2=runptr2
144d0                 | ' 
144d0                 | ' numpar=compiledline(lineptr_e).result.uresult
144d0                 | ' if numpar=1 then do_load ' todo also run linenum so check the param
144d0     01 14 0E F2 | 	cmp	arg02, #1 wz
144d4     47 00 00 FF 
144d8     7C E4 85 F1 | 	sub	objptr, ##36476
144dc     00 12 06 A6 |  if_e	mov	arg01, #0
144e0     B8 CB BF AD |  if_e	call	#_do_load
144e4     4A 00 00 FF 
144e8     88 E4 05 F1 | 	add	objptr, ##38024
144ec     F2 18 02 FB | 	rdlong	arg04, objptr
144f0     06 00 00 FF 
144f4     30 E4 05 F1 | 	add	objptr, ##3120
144f8     F2 18 62 FC | 	wrlong	arg04, objptr
144fc     04 E4 05 F1 | 	add	objptr, #4
14500     F2 00 68 FC | 	wrlong	#0, objptr
14504     04 E4 05 F1 | 	add	objptr, #4
14508     FF FF FF FF 
1450c     F2 FE 6B FC | 	wrlong	##-1, objptr
14510                 | ' runptr=programstart : runptr2=0 : oldrunptr=-1
14510                 | ' if inrun>0 then 
14510     2C E4 05 F1 | 	add	objptr, #44
14514     F2 18 02 FB | 	rdlong	arg04, objptr
14518     50 00 00 FF 
1451c     EC E4 85 F1 | 	sub	objptr, ##41196
14520     01 18 16 F2 | 	cmp	arg04, #1 wc
14524     30 00 90 CD |  if_b	jmp	#LR__1710
14528     50 00 00 FF 
1452c     F0 E4 05 F1 | 	add	objptr, ##41200
14530     F2 12 02 F6 | 	mov	arg01, objptr
14534     38 E4 85 F1 | 	sub	objptr, #56
14538     F2 14 02 FB | 	rdlong	arg02, objptr
1453c     18 16 06 F6 | 	mov	arg03, #24
14540     44 00 00 FF 
14544     EC E5 85 F1 | 	sub	objptr, ##35308
14548     D8 B7 B0 FD | 	call	#_psram_spin2_read1
1454c     0B 00 00 FF 
14550     CC E4 85 F1 | 	sub	objptr, ##5836
14554                 | '   psram.read1(varptr(runheader),runptr,24)  
14554                 | '   return
14554     D4 02 90 FD | 	jmp	#LR__1716
14558                 | LR__1710
14558     50 00 00 FF 
1455c     EC E4 05 F1 | 	add	objptr, ##41196
14560     F2 02 68 FC | 	wrlong	#1, objptr
14564     04 E4 05 F1 | 	add	objptr, #4
14568     F2 12 02 F6 | 	mov	arg01, objptr
1456c     38 E4 85 F1 | 	sub	objptr, #56
14570     F2 14 02 FB | 	rdlong	arg02, objptr
14574     18 16 06 F6 | 	mov	arg03, #24
14578     44 00 00 FF 
1457c     EC E5 85 F1 | 	sub	objptr, ##35308
14580     A0 B7 B0 FD | 	call	#_psram_spin2_read1
14584                 | ' inrun=1
14584                 | ' psram.read1(varptr(runheader),runptr,24) 
14584                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
14584     45 00 00 FF 
14588     24 E4 05 F1 | 	add	objptr, ##35364
1458c     F2 24 02 FB | 	rdlong	local04, objptr
14590     50 00 00 FF 
14594     F0 E4 85 F1 | 	sub	objptr, ##41200
14598     FF FF 7F FF 
1459c     FF 25 0E F2 | 	cmp	local04, ##-1 wz
145a0     50 00 00 AF 
145a4     EC E4 05 A1 |  if_e	add	objptr, ##41196
145a8     F2 00 68 AC |  if_e	wrlong	#0, objptr
145ac     50 00 00 AF 
145b0     EC E4 85 A1 |  if_e	sub	objptr, ##41196
145b4     74 02 90 AD |  if_e	jmp	#LR__1716
145b8                 | ' do 
145b8                 | LR__1711
145b8                 | '   if runptr<>oldrunptr then
145b8     50 00 00 FF 
145bc     B8 E4 05 F1 | 	add	objptr, ##41144
145c0     F2 24 02 FB | 	rdlong	local04, objptr
145c4     08 E4 05 F1 | 	add	objptr, #8
145c8     F2 18 02 FB | 	rdlong	arg04, objptr
145cc     50 00 00 FF 
145d0     C0 E4 85 F1 | 	sub	objptr, ##41152
145d4     0C 25 0A F2 | 	cmp	local04, arg04 wz
145d8     CC 00 90 AD |  if_e	jmp	#LR__1712
145dc     50 00 00 FF 
145e0     F0 E4 05 F1 | 	add	objptr, ##41200
145e4     F2 12 02 F6 | 	mov	arg01, objptr
145e8     38 E4 85 F1 | 	sub	objptr, #56
145ec     F2 14 02 FB | 	rdlong	arg02, objptr
145f0     18 16 06 F6 | 	mov	arg03, #24
145f4     44 00 00 FF 
145f8     EC E5 85 F1 | 	sub	objptr, ##35308
145fc     24 B7 B0 FD | 	call	#_psram_spin2_read1
14600     3B 00 00 FF 
14604     B0 E5 05 F1 | 	add	objptr, ##30640
14608     F2 12 02 F6 | 	mov	arg01, objptr
1460c     09 00 00 FF 
14610     3C E4 05 F1 | 	add	objptr, ##4668
14614     F2 14 02 FB | 	rdlong	arg02, objptr
14618     0B 00 00 FF 
1461c     54 E4 85 F1 | 	sub	objptr, ##5716
14620     F2 24 02 FB | 	rdlong	local04, objptr
14624     01 24 66 F0 | 	shl	local04, #1
14628     12 15 02 F1 | 	add	arg02, local04
1462c     0B 00 00 FF 
14630     94 E4 05 F1 | 	add	objptr, ##5780
14634     F2 16 02 FB | 	rdlong	arg03, objptr
14638     40 E4 85 F1 | 	sub	objptr, #64
1463c     F2 24 02 FB | 	rdlong	local04, objptr
14640     12 17 82 F1 | 	sub	arg03, local04
14644     44 00 00 FF 
14648     EC E5 85 F1 | 	sub	objptr, ##35308
1464c     D4 B6 B0 FD | 	call	#_psram_spin2_read1
14650     45 00 00 FF 
14654     2C E4 05 F1 | 	add	objptr, ##35372
14658     F2 24 02 FB | 	rdlong	local04, objptr
1465c     40 E4 85 F1 | 	sub	objptr, #64
14660     F2 14 02 FB | 	rdlong	arg02, objptr
14664     0A 25 82 F1 | 	sub	local04, arg02
14668     0B 00 00 FF 
1466c     54 E4 85 F1 | 	sub	objptr, ##5716
14670     F2 14 02 FB | 	rdlong	arg02, objptr
14674     0A 25 12 FD | 	qdiv	local04, arg02
14678     05 00 00 FF 
1467c     18 E4 05 F1 | 	add	objptr, ##2584
14680     18 24 62 FD | 	getqx	local04
14684     03 24 86 F1 | 	sub	local04, #3
14688     F2 24 62 FC | 	wrlong	local04, objptr
1468c     06 00 00 FF 
14690     3C E4 05 F1 | 	add	objptr, ##3132
14694     F2 24 02 FB | 	rdlong	local04, objptr
14698     08 E4 05 F1 | 	add	objptr, #8
1469c     F2 24 62 FC | 	wrlong	local04, objptr
146a0     50 00 00 FF 
146a4     C0 E4 85 F1 | 	sub	objptr, ##41152
146a8                 | LR__1712
146a8     50 00 00 FF 
146ac     04 E5 05 F1 | 	add	objptr, ##41220
146b0     F2 24 02 FB | 	rdlong	local04, objptr
146b4     4C E4 85 F1 | 	sub	objptr, #76
146b8     F2 24 62 FC | 	wrlong	local04, objptr
146bc     04 E4 05 F1 | 	add	objptr, #4
146c0     F2 12 02 FB | 	rdlong	arg01, objptr
146c4     50 00 00 FF 
146c8     BC E4 85 F1 | 	sub	objptr, ##41148
146cc     D8 6A BF FD | 	call	#_execute_line
146d0     50 00 00 FF 
146d4     BC E4 05 F1 | 	add	objptr, ##41148
146d8     F2 FA 61 FC | 	wrlong	result1, objptr
146dc     04 E4 85 F1 | 	sub	objptr, #4
146e0     F2 24 02 FB | 	rdlong	local04, objptr
146e4     50 00 00 FF 
146e8     B8 E4 85 F1 | 	sub	objptr, ##41144
146ec     FF FF 3F FF 
146f0     FF 25 0E F2 | 	cmp	local04, ##2147483647 wz
146f4     30 00 90 AD |  if_e	jmp	#LR__1714
146f8     E0 12 06 F6 | 	mov	arg01, #224
146fc     B4 B9 B0 FD | 	call	#_usbnew_spin2_keystate
14700     00 FA 0D F2 | 	cmp	result1, #0 wz
14704     10 00 90 5D |  if_ne	jmp	#LR__1713
14708     E4 12 06 F6 | 	mov	arg01, #228
1470c     A4 B9 B0 FD | 	call	#_usbnew_spin2_keystate
14710     00 FA 0D F2 | 	cmp	result1, #0 wz
14714     A0 FE 9F AD |  if_e	jmp	#LR__1711
14718                 | LR__1713
14718     06 12 06 F6 | 	mov	arg01, #6
1471c     94 B9 B0 FD | 	call	#_usbnew_spin2_keystate
14720     00 FA 0D F2 | 	cmp	result1, #0 wz
14724     90 FE 9F AD |  if_e	jmp	#LR__1711
14728                 | LR__1714
14728                 | '   ''do whatever kbm.peek_latest_key()=$106 
14728                 | ' if runptr<>$7FFF_FFFF then 
14728     50 00 00 FF 
1472c     B8 E4 05 F1 | 	add	objptr, ##41144
14730     F2 24 02 FB | 	rdlong	local04, objptr
14734     50 00 00 FF 
14738     B8 E4 85 F1 | 	sub	objptr, ##41144
1473c     FF FF 3F FF 
14740     FF 25 0E F2 | 	cmp	local04, ##2147483647 wz
14744     90 00 90 AD |  if_e	jmp	#LR__1715
14748                 | '   print: print "Stopped at line ";runheader(0) 
14748     00 12 06 F6 | 	mov	arg01, #0
1474c     78 1C B1 FD | 	call	#__system___getiolock_0540
14750     FD 12 02 F6 | 	mov	arg01, result1
14754     0C C2 B0 FD | 	call	#__system___lockmem
14758     00 12 06 F6 | 	mov	arg01, #0
1475c     0A 14 06 F6 | 	mov	arg02, #10
14760     00 16 06 F6 | 	mov	arg03, #0
14764     98 CE B0 FD | 	call	#__system___basic_print_char
14768     00 12 06 F6 | 	mov	arg01, #0
1476c     58 1C B1 FD | 	call	#__system___getiolock_0540
14770     FD 00 68 FC | 	wrlong	#0, result1
14774     00 12 06 F6 | 	mov	arg01, #0
14778     4C 1C B1 FD | 	call	#__system___getiolock_0540
1477c     FD 12 02 F6 | 	mov	arg01, result1
14780     E0 C1 B0 FD | 	call	#__system___lockmem
14784     85 01 00 FF 
14788     B8 14 06 F6 | 	mov	arg02, ##@LR__5514
1478c     00 12 06 F6 | 	mov	arg01, #0
14790     00 16 06 F6 | 	mov	arg03, #0
14794     C0 CE B0 FD | 	call	#__system___basic_print_string
14798     50 00 00 FF 
1479c     F0 E4 05 F1 | 	add	objptr, ##41200
147a0     F2 14 02 FB | 	rdlong	arg02, objptr
147a4     50 00 00 FF 
147a8     F0 E4 85 F1 | 	sub	objptr, ##41200
147ac     00 12 06 F6 | 	mov	arg01, #0
147b0     00 16 06 F6 | 	mov	arg03, #0
147b4     0A 18 06 F6 | 	mov	arg04, #10
147b8     20 CF B0 FD | 	call	#__system___basic_print_unsigned
147bc     00 12 06 F6 | 	mov	arg01, #0
147c0     0A 14 06 F6 | 	mov	arg02, #10
147c4     00 16 06 F6 | 	mov	arg03, #0
147c8     34 CE B0 FD | 	call	#__system___basic_print_char
147cc     00 12 06 F6 | 	mov	arg01, #0
147d0     F4 1B B1 FD | 	call	#__system___getiolock_0540
147d4     FD 00 68 FC | 	wrlong	#0, result1
147d8                 | LR__1715
147d8     50 00 00 FF 
147dc     EC E4 05 F1 | 	add	objptr, ##41196
147e0     F2 00 68 FC | 	wrlong	#0, objptr
147e4     06 00 00 FF 
147e8     6C E4 85 F1 | 	sub	objptr, ##3180
147ec     F2 1E 62 FC | 	wrlong	local01, objptr
147f0     06 00 00 FF 
147f4     38 E4 05 F1 | 	add	objptr, ##3128
147f8     F2 20 62 FC | 	wrlong	local02, objptr
147fc     04 E4 05 F1 | 	add	objptr, #4
14800     F2 22 62 FC | 	wrlong	local03, objptr
14804     50 00 00 FF 
14808     BC E4 85 F1 | 	sub	objptr, ##41148
1480c     11 12 06 F6 | 	mov	arg01, #17
14810     08 14 06 F6 | 	mov	arg02, #8
14814     10 16 06 F6 | 	mov	arg03, #16
14818     4C 9B B0 FD | 	call	#_hg010b_spin2_setspritesize
1481c     10 12 06 F6 | 	mov	arg01, #16
14820     20 14 06 F6 | 	mov	arg02, #32
14824     20 16 06 F6 | 	mov	arg03, #32
14828     3C 9B B0 FD | 	call	#_hg010b_spin2_setspritesize
1482c                 | LR__1716
1482c     A7 F0 03 F6 | 	mov	ptra, fp
14830     B2 00 A0 FD | 	call	#popregs_
14834                 | _do_run_ret
14834     2D 00 64 FD | 	ret
14838                 | 
14838                 | ' 
14838                 | ' ' ------------------ save
14838                 | ' 
14838                 | ' sub do_save                        
14838                 | _do_save
14838     04 4A 05 F6 | 	mov	COUNT_, #4
1483c     A8 00 A0 FD | 	call	#pushregs_
14840     B8 F0 07 F1 | 	add	ptra, #184
14844     4A 00 00 FF 
14848     80 E4 05 F1 | 	add	objptr, ##38016
1484c     F2 1E 02 FB | 	rdlong	local01, objptr
14850     0F 21 02 F6 | 	mov	local02, local01
14854     01 20 66 F0 | 	shl	local02, #1
14858     0F 21 02 F1 | 	add	local02, local01
1485c     02 20 66 F0 | 	shl	local02, #2
14860     03 00 00 FF 
14864     04 E4 85 F1 | 	sub	objptr, ##1540
14868     F2 20 02 F1 | 	add	local02, objptr
1486c     10 23 02 FB | 	rdlong	local03, local02
14870     10 4E 05 F1 | 	add	fp, #16
14874     A7 22 62 FC | 	wrlong	local03, fp
14878                 | ' 
14878                 | ' numpar=compiledline(lineptr_e).result.uresult
14878                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
14878     10 4E 85 F1 | 	sub	fp, #16
1487c     01 22 56 F2 | 	cmps	local03, #1 wc
14880     47 00 00 FF 
14884     7C E4 85 F1 | 	sub	objptr, ##36476
14888     20 00 90 CD |  if_b	jmp	#LR__1720
1488c     1C 6A BF FD | 	call	#_pop
14890     A7 FA 61 FC | 	wrlong	result1, fp
14894     04 4E 05 F1 | 	add	fp, #4
14898     A7 FC 61 FC | 	wrlong	result2, fp
1489c     04 4E 05 F1 | 	add	fp, #4
148a0     A7 FE 61 FC | 	wrlong	result3, fp
148a4     08 4E 85 F1 | 	sub	fp, #8
148a8     24 00 90 FD | 	jmp	#LR__1721
148ac                 | LR__1720
148ac     51 00 00 FF 
148b0     D8 E5 05 F1 | 	add	objptr, ##41944
148b4     F2 22 02 FB | 	rdlong	local03, objptr
148b8     51 00 00 FF 
148bc     D8 E5 85 F1 | 	sub	objptr, ##41944
148c0     A7 22 62 FC | 	wrlong	local03, fp
148c4     08 4E 05 F1 | 	add	fp, #8
148c8     A7 3E 68 FC | 	wrlong	#31, fp
148cc     08 4E 85 F1 | 	sub	fp, #8
148d0                 | LR__1721
148d0                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
148d0     4A 00 00 FF 
148d4     88 E4 05 F1 | 	add	objptr, ##38024
148d8     F2 12 02 FB | 	rdlong	arg01, objptr
148dc     4A 00 00 FF 
148e0     88 E4 85 F1 | 	sub	objptr, ##38024
148e4     80 8D B0 FD | 	call	#_pslpeek
148e8     FF FF 7F FF 
148ec     FF FB 0D F2 | 	cmp	result1, ##-1 wz
148f0     0C 00 90 5D |  if_ne	jmp	#LR__1722
148f4     1B 12 06 F6 | 	mov	arg01, #27
148f8     D8 8A B0 FD | 	call	#_printerror
148fc     CC 02 90 FD | 	jmp	#LR__1728
14900                 | LR__1722
14900                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
14900     08 4E 05 F1 | 	add	fp, #8
14904     A7 22 02 FB | 	rdlong	local03, fp
14908     08 4E 85 F1 | 	sub	fp, #8
1490c     2B 22 0E F2 | 	cmp	local03, #43 wz
14910     18 00 90 5D |  if_ne	jmp	#LR__1723
14914     A7 12 02 FB | 	rdlong	arg01, fp
14918     08 6B BF FD | 	call	#_convertstring
1491c     A7 FA 61 FC | 	wrlong	result1, fp
14920     08 4E 05 F1 | 	add	fp, #8
14924     A7 3E 68 FC | 	wrlong	#31, fp
14928     08 4E 85 F1 | 	sub	fp, #8
1492c                 | LR__1723
1492c                 | ' if t1.result_type=result_string then
1492c     08 4E 05 F1 | 	add	fp, #8
14930     A7 22 02 FB | 	rdlong	local03, fp
14934     08 4E 85 F1 | 	sub	fp, #8
14938     1F 22 0E F2 | 	cmp	local03, #31 wz
1493c     8C 02 90 5D |  if_ne	jmp	#LR__1727
14940                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
14940     A7 12 02 FB | 	rdlong	arg01, fp
14944     85 01 00 FF 
14948     C9 14 06 F6 | 	mov	arg02, ##@LR__5515
1494c     3C C0 B0 FD | 	call	#__system___string_cmp
14950     00 FA 0D F2 | 	cmp	result1, #0 wz
14954     51 00 00 AF 
14958     D8 E5 05 A1 |  if_e	add	objptr, ##41944
1495c     F2 22 02 AB |  if_e	rdlong	local03, objptr
14960     A7 22 62 AC |  if_e	wrlong	local03, fp
14964     51 00 00 AF 
14968     D8 E5 85 A1 |  if_e	sub	objptr, ##41944
1496c     A7 22 02 5B |  if_ne	rdlong	local03, fp
14970     51 00 00 5F 
14974     D8 E5 05 51 |  if_ne	add	objptr, ##41944
14978     F2 22 62 5C |  if_ne	wrlong	local03, objptr
1497c     51 00 00 5F 
14980     D8 E5 85 51 |  if_ne	sub	objptr, ##41944
14984                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
14984     09 12 06 F6 | 	mov	arg01, #9
14988     6C 10 B1 FD | 	call	#__system__close
1498c     09 22 06 F6 | 	mov	local03, #9
14990     4A 00 00 FF 
14994     94 E4 05 F1 | 	add	objptr, ##38036
14998     F2 12 02 FB | 	rdlong	arg01, objptr
1499c     4A 00 00 FF 
149a0     94 E4 85 F1 | 	sub	objptr, ##38036
149a4     85 01 00 FF 
149a8     CA 14 06 F6 | 	mov	arg02, ##@LR__5516
149ac     10 C0 B0 FD | 	call	#__system___string_concat
149b0     FD 12 02 F6 | 	mov	arg01, result1
149b4     A7 14 02 FB | 	rdlong	arg02, fp
149b8     04 C0 B0 FD | 	call	#__system___string_concat
149bc     FD 14 02 F6 | 	mov	arg02, result1
149c0     11 13 02 F6 | 	mov	arg01, local03
149c4     0D 16 06 F6 | 	mov	arg03, #13
149c8     9C CB B0 FD | 	call	#__system___basic_open_string
149cc     4A 00 00 FF 
149d0     88 E4 05 F1 | 	add	objptr, ##38024
149d4     F2 22 02 FB | 	rdlong	local03, objptr
149d8     4A 00 00 FF 
149dc     88 E4 85 F1 | 	sub	objptr, ##38024
149e0     B0 4E 05 F1 | 	add	fp, #176
149e4     A7 22 62 FC | 	wrlong	local03, fp
149e8     B0 4E 85 F1 | 	sub	fp, #176
149ec                 | '   saveptr=programstart
149ec                 | '   do
149ec                 | LR__1724
149ec     14 4E 05 F1 | 	add	fp, #20
149f0     A7 12 02 F6 | 	mov	arg01, fp
149f4     9C 4E 05 F1 | 	add	fp, #156
149f8     A7 14 02 FB | 	rdlong	arg02, fp
149fc     B0 4E 85 F1 | 	sub	fp, #176
14a00     18 16 06 F6 | 	mov	arg03, #24
14a04     0B 00 00 FF 
14a08     CC E4 05 F1 | 	add	objptr, ##5836
14a0c     14 B3 B0 FD | 	call	#_psram_spin2_read1
14a10     2C 4E 05 F1 | 	add	fp, #44
14a14     A7 12 02 F6 | 	mov	arg01, fp
14a18     10 4E 85 F1 | 	sub	fp, #16
14a1c     A7 14 02 FB | 	rdlong	arg02, fp
14a20     04 4E 05 F1 | 	add	fp, #4
14a24     A7 16 02 FB | 	rdlong	arg03, fp
14a28     20 4E 85 F1 | 	sub	fp, #32
14a2c     F4 B2 B0 FD | 	call	#_psram_spin2_read1
14a30     0B 00 00 FF 
14a34     CC E4 85 F1 | 	sub	objptr, ##5836
14a38     85 01 00 FF 
14a3c     CC 22 06 F6 | 	mov	local03, ##@LR__5517
14a40     AC 4E 05 F1 | 	add	fp, #172
14a44     A7 22 62 FC | 	wrlong	local03, fp
14a48                 | '     psram.read1(varptr(header(0)),saveptr,24)
14a48                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
14a48                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
14a48     A0 4E 85 F1 | 	sub	fp, #160
14a4c     A7 02 68 FC | 	wrlong	#1, fp
14a50     14 4E 05 F1 | 	add	fp, #20
14a54     A7 24 02 FB | 	rdlong	local04, fp
14a58     20 4E 85 F1 | 	sub	fp, #32
14a5c     01 24 06 F1 | 	add	local04, #1
14a60                 | LR__1725
14a60     0C 4E 05 F1 | 	add	fp, #12
14a64     A7 22 02 FB | 	rdlong	local03, fp
14a68     0C 4E 85 F1 | 	sub	fp, #12
14a6c     12 23 52 F2 | 	cmps	local03, local04 wc
14a70     54 00 90 3D |  if_ae	jmp	#LR__1726
14a74     AC 4E 05 F1 | 	add	fp, #172
14a78     A7 1E 02 FB | 	rdlong	local01, fp
14a7c     A0 4E 85 F1 | 	sub	fp, #160
14a80     A7 22 02 FB | 	rdlong	local03, fp
14a84     01 22 86 F1 | 	sub	local03, #1
14a88     20 4E 05 F1 | 	add	fp, #32
14a8c     A7 22 02 F1 | 	add	local03, fp
14a90     11 13 C2 FA | 	rdbyte	arg01, local03
14a94     2C 4E 85 F1 | 	sub	fp, #44
14a98     08 E1 B0 FD | 	call	#__system__Chr_S
14a9c     FD 14 02 F6 | 	mov	arg02, result1
14aa0     0F 13 02 F6 | 	mov	arg01, local01
14aa4     18 BF B0 FD | 	call	#__system___string_concat
14aa8     AC 4E 05 F1 | 	add	fp, #172
14aac     A7 FA 61 FC | 	wrlong	result1, fp
14ab0     A0 4E 85 F1 | 	sub	fp, #160
14ab4     A7 22 02 FB | 	rdlong	local03, fp
14ab8     01 22 06 F1 | 	add	local03, #1
14abc     A7 22 62 FC | 	wrlong	local03, fp
14ac0     0C 4E 85 F1 | 	sub	fp, #12
14ac4     98 FF 9F FD | 	jmp	#LR__1725
14ac8                 | LR__1726
14ac8                 | '     print #9, saveline$
14ac8     09 12 06 F6 | 	mov	arg01, #9
14acc     F8 18 B1 FD | 	call	#__system___getiolock_0540
14ad0     FD 12 02 F6 | 	mov	arg01, result1
14ad4     8C BE B0 FD | 	call	#__system___lockmem
14ad8     AC 4E 05 F1 | 	add	fp, #172
14adc     A7 14 02 FB | 	rdlong	arg02, fp
14ae0     AC 4E 85 F1 | 	sub	fp, #172
14ae4     09 12 06 F6 | 	mov	arg01, #9
14ae8     00 16 06 F6 | 	mov	arg03, #0
14aec     68 CB B0 FD | 	call	#__system___basic_print_string
14af0     09 12 06 F6 | 	mov	arg01, #9
14af4     0A 14 06 F6 | 	mov	arg02, #10
14af8     00 16 06 F6 | 	mov	arg03, #0
14afc     00 CB B0 FD | 	call	#__system___basic_print_char
14b00     09 12 06 F6 | 	mov	arg01, #9
14b04     C0 18 B1 FD | 	call	#__system___getiolock_0540
14b08     FD 00 68 FC | 	wrlong	#0, result1
14b0c     28 4E 05 F1 | 	add	fp, #40
14b10     A7 22 02 FB | 	rdlong	local03, fp
14b14     88 4E 05 F1 | 	add	fp, #136
14b18     A7 22 62 FC | 	wrlong	local03, fp
14b1c     88 4E 85 F1 | 	sub	fp, #136
14b20     A7 22 02 FB | 	rdlong	local03, fp
14b24     28 4E 85 F1 | 	sub	fp, #40
14b28     FF FF 3F FF 
14b2c     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
14b30     B8 FE 9F 5D |  if_ne	jmp	#LR__1724
14b34                 | '   close #9  
14b34     09 12 06 F6 | 	mov	arg01, #9
14b38     BC 0E B1 FD | 	call	#__system__close
14b3c                 | '   print "Saved as ";currentdir$+"/"+loadname
14b3c     00 12 06 F6 | 	mov	arg01, #0
14b40     84 18 B1 FD | 	call	#__system___getiolock_0540
14b44     FD 12 02 F6 | 	mov	arg01, result1
14b48     18 BE B0 FD | 	call	#__system___lockmem
14b4c     85 01 00 FF 
14b50     CD 14 06 F6 | 	mov	arg02, ##@LR__5518
14b54     00 12 06 F6 | 	mov	arg01, #0
14b58     00 16 06 F6 | 	mov	arg03, #0
14b5c     F8 CA B0 FD | 	call	#__system___basic_print_string
14b60     00 20 06 F6 | 	mov	local02, #0
14b64     4A 00 00 FF 
14b68     94 E4 05 F1 | 	add	objptr, ##38036
14b6c     F2 12 02 FB | 	rdlong	arg01, objptr
14b70     4A 00 00 FF 
14b74     94 E4 85 F1 | 	sub	objptr, ##38036
14b78     85 01 00 FF 
14b7c     D7 14 06 F6 | 	mov	arg02, ##@LR__5519
14b80     3C BE B0 FD | 	call	#__system___string_concat
14b84     FD 12 02 F6 | 	mov	arg01, result1
14b88     51 00 00 FF 
14b8c     D8 E5 05 F1 | 	add	objptr, ##41944
14b90     F2 14 02 FB | 	rdlong	arg02, objptr
14b94     51 00 00 FF 
14b98     D8 E5 85 F1 | 	sub	objptr, ##41944
14b9c     20 BE B0 FD | 	call	#__system___string_concat
14ba0     FD 14 02 F6 | 	mov	arg02, result1
14ba4     10 13 02 F6 | 	mov	arg01, local02
14ba8     00 16 06 F6 | 	mov	arg03, #0
14bac     A8 CA B0 FD | 	call	#__system___basic_print_string
14bb0     00 12 06 F6 | 	mov	arg01, #0
14bb4     0A 14 06 F6 | 	mov	arg02, #10
14bb8     00 16 06 F6 | 	mov	arg03, #0
14bbc     40 CA B0 FD | 	call	#__system___basic_print_char
14bc0     00 12 06 F6 | 	mov	arg01, #0
14bc4     00 18 B1 FD | 	call	#__system___getiolock_0540
14bc8     FD 00 68 FC | 	wrlong	#0, result1
14bcc                 | LR__1727
14bcc                 | LR__1728
14bcc     A7 F0 03 F6 | 	mov	ptra, fp
14bd0     B2 00 A0 FD | 	call	#popregs_
14bd4                 | _do_save_ret
14bd4     2D 00 64 FD | 	ret
14bd8                 | 
14bd8                 | ' 
14bd8                 | ' ' ------------------ setdelay
14bd8                 | ' 
14bd8                 | ' sub do_setdelay
14bd8                 | _do_setdelay
14bd8     02 4A 05 F6 | 	mov	COUNT_, #2
14bdc     A8 00 A0 FD | 	call	#pushregs_
14be0     18 F0 07 F1 | 	add	ptra, #24
14be4     C4 66 BF FD | 	call	#_pop
14be8     FD 12 02 F6 | 	mov	arg01, result1
14bec     FE 1E 02 F6 | 	mov	local01, result2
14bf0     FF 20 02 F6 | 	mov	local02, result3
14bf4     A7 12 62 FC | 	wrlong	arg01, fp
14bf8     04 4E 05 F1 | 	add	fp, #4
14bfc     A7 1E 62 FC | 	wrlong	local01, fp
14c00     04 4E 05 F1 | 	add	fp, #4
14c04     A7 20 62 FC | 	wrlong	local02, fp
14c08     08 4E 85 F1 | 	sub	fp, #8
14c0c     9C 66 BF FD | 	call	#_pop
14c10     FD 20 02 F6 | 	mov	local02, result1
14c14     0C 4E 05 F1 | 	add	fp, #12
14c18     A7 20 62 FC | 	wrlong	local02, fp
14c1c     04 4E 05 F1 | 	add	fp, #4
14c20     A7 FC 61 FC | 	wrlong	result2, fp
14c24     04 4E 05 F1 | 	add	fp, #4
14c28     A7 FE 61 FC | 	wrlong	result3, fp
14c2c     08 4E 85 F1 | 	sub	fp, #8
14c30     A7 12 02 F6 | 	mov	arg01, fp
14c34     0C 4E 85 F1 | 	sub	fp, #12
14c38     54 68 BF FD | 	call	#_converttoint
14c3c     FD 20 02 F6 | 	mov	local02, result1
14c40     10 1F 02 F6 | 	mov	local01, local02
14c44     01 1E 66 F0 | 	shl	local01, #1
14c48     10 1F 02 F1 | 	add	local01, local02
14c4c     03 1E 66 F0 | 	shl	local01, #3
14c50     14 00 00 FF 
14c54     38 E5 05 F1 | 	add	objptr, ##10552
14c58     F2 1E 02 F1 | 	add	local01, objptr
14c5c     A7 12 02 F6 | 	mov	arg01, fp
14c60     14 00 00 FF 
14c64     38 E5 85 F1 | 	sub	objptr, ##10552
14c68     24 68 BF FD | 	call	#_converttoint
14c6c     06 1E 06 F1 | 	add	local01, #6
14c70     0F FB 51 FC | 	wrword	result1, local01
14c74     A7 F0 03 F6 | 	mov	ptra, fp
14c78     B2 00 A0 FD | 	call	#popregs_
14c7c                 | _do_setdelay_ret
14c7c     2D 00 64 FD | 	ret
14c80                 | 
14c80                 | ' 
14c80                 | ' ' ------------------ setenv
14c80                 | ' 
14c80                 | ' sub do_setenv
14c80                 | _do_setenv
14c80     02 4A 05 F6 | 	mov	COUNT_, #2
14c84     A8 00 A0 FD | 	call	#pushregs_
14c88     18 F0 07 F1 | 	add	ptra, #24
14c8c     1C 66 BF FD | 	call	#_pop
14c90     FD 12 02 F6 | 	mov	arg01, result1
14c94     FE 1E 02 F6 | 	mov	local01, result2
14c98     FF 20 02 F6 | 	mov	local02, result3
14c9c     A7 12 62 FC | 	wrlong	arg01, fp
14ca0     04 4E 05 F1 | 	add	fp, #4
14ca4     A7 1E 62 FC | 	wrlong	local01, fp
14ca8     04 4E 05 F1 | 	add	fp, #4
14cac     A7 20 62 FC | 	wrlong	local02, fp
14cb0     08 4E 85 F1 | 	sub	fp, #8
14cb4     F4 65 BF FD | 	call	#_pop
14cb8     FD 20 02 F6 | 	mov	local02, result1
14cbc     0C 4E 05 F1 | 	add	fp, #12
14cc0     A7 20 62 FC | 	wrlong	local02, fp
14cc4     04 4E 05 F1 | 	add	fp, #4
14cc8     A7 FC 61 FC | 	wrlong	result2, fp
14ccc     04 4E 05 F1 | 	add	fp, #4
14cd0     A7 FE 61 FC | 	wrlong	result3, fp
14cd4     08 4E 85 F1 | 	sub	fp, #8
14cd8     A7 12 02 F6 | 	mov	arg01, fp
14cdc     0C 4E 85 F1 | 	sub	fp, #12
14ce0     AC 67 BF FD | 	call	#_converttoint
14ce4     FD 20 02 F6 | 	mov	local02, result1
14ce8     10 1F 02 F6 | 	mov	local01, local02
14cec     01 1E 66 F0 | 	shl	local01, #1
14cf0     10 1F 02 F1 | 	add	local01, local02
14cf4     03 1E 66 F0 | 	shl	local01, #3
14cf8     14 00 00 FF 
14cfc     38 E5 05 F1 | 	add	objptr, ##10552
14d00     F2 1E 02 F1 | 	add	local01, objptr
14d04     A7 12 02 F6 | 	mov	arg01, fp
14d08     14 00 00 FF 
14d0c     38 E5 85 F1 | 	sub	objptr, ##10552
14d10     7C 67 BF FD | 	call	#_converttoint
14d14     05 1E 06 F1 | 	add	local01, #5
14d18     0F FB 41 FC | 	wrbyte	result1, local01
14d1c     A7 F0 03 F6 | 	mov	ptra, fp
14d20     B2 00 A0 FD | 	call	#popregs_
14d24                 | _do_setenv_ret
14d24     2D 00 64 FD | 	ret
14d28                 | 
14d28                 | ' 
14d28                 | ' ' ------------------ setlen
14d28                 | ' 
14d28                 | ' sub do_setlen
14d28                 | _do_setlen
14d28     02 4A 05 F6 | 	mov	COUNT_, #2
14d2c     A8 00 A0 FD | 	call	#pushregs_
14d30     18 F0 07 F1 | 	add	ptra, #24
14d34     74 65 BF FD | 	call	#_pop
14d38     FD 12 02 F6 | 	mov	arg01, result1
14d3c     FE 1E 02 F6 | 	mov	local01, result2
14d40     FF 20 02 F6 | 	mov	local02, result3
14d44     A7 12 62 FC | 	wrlong	arg01, fp
14d48     04 4E 05 F1 | 	add	fp, #4
14d4c     A7 1E 62 FC | 	wrlong	local01, fp
14d50     04 4E 05 F1 | 	add	fp, #4
14d54     A7 20 62 FC | 	wrlong	local02, fp
14d58     08 4E 85 F1 | 	sub	fp, #8
14d5c     4C 65 BF FD | 	call	#_pop
14d60     FD 20 02 F6 | 	mov	local02, result1
14d64     0C 4E 05 F1 | 	add	fp, #12
14d68     A7 20 62 FC | 	wrlong	local02, fp
14d6c     04 4E 05 F1 | 	add	fp, #4
14d70     A7 FC 61 FC | 	wrlong	result2, fp
14d74     04 4E 05 F1 | 	add	fp, #4
14d78     A7 FE 61 FC | 	wrlong	result3, fp
14d7c     08 4E 85 F1 | 	sub	fp, #8
14d80     A7 12 02 F6 | 	mov	arg01, fp
14d84     0C 4E 85 F1 | 	sub	fp, #12
14d88     04 67 BF FD | 	call	#_converttoint
14d8c     FD 20 02 F6 | 	mov	local02, result1
14d90     10 1F 02 F6 | 	mov	local01, local02
14d94     01 1E 66 F0 | 	shl	local01, #1
14d98     10 1F 02 F1 | 	add	local01, local02
14d9c     03 1E 66 F0 | 	shl	local01, #3
14da0     14 00 00 FF 
14da4     38 E5 05 F1 | 	add	objptr, ##10552
14da8     F2 1E 02 F1 | 	add	local01, objptr
14dac     A7 12 02 F6 | 	mov	arg01, fp
14db0     14 00 00 FF 
14db4     38 E5 85 F1 | 	sub	objptr, ##10552
14db8     90 67 BF FD | 	call	#_converttofloat
14dbc     08 1E 06 F1 | 	add	local01, #8
14dc0     0F FB 61 FC | 	wrlong	result1, local01
14dc4     A7 F0 03 F6 | 	mov	ptra, fp
14dc8     B2 00 A0 FD | 	call	#popregs_
14dcc                 | _do_setlen_ret
14dcc     2D 00 64 FD | 	ret
14dd0                 | 
14dd0                 | ' 
14dd0                 | ' ' ------------------ setpan
14dd0                 | ' 
14dd0                 | ' sub do_setpan
14dd0                 | _do_setpan
14dd0     02 4A 05 F6 | 	mov	COUNT_, #2
14dd4     A8 00 A0 FD | 	call	#pushregs_
14dd8     18 F0 07 F1 | 	add	ptra, #24
14ddc     CC 64 BF FD | 	call	#_pop
14de0     FD 12 02 F6 | 	mov	arg01, result1
14de4     FE 1E 02 F6 | 	mov	local01, result2
14de8     FF 20 02 F6 | 	mov	local02, result3
14dec     A7 12 62 FC | 	wrlong	arg01, fp
14df0     04 4E 05 F1 | 	add	fp, #4
14df4     A7 1E 62 FC | 	wrlong	local01, fp
14df8     04 4E 05 F1 | 	add	fp, #4
14dfc     A7 20 62 FC | 	wrlong	local02, fp
14e00     08 4E 85 F1 | 	sub	fp, #8
14e04     A4 64 BF FD | 	call	#_pop
14e08     FD 20 02 F6 | 	mov	local02, result1
14e0c     0C 4E 05 F1 | 	add	fp, #12
14e10     A7 20 62 FC | 	wrlong	local02, fp
14e14     04 4E 05 F1 | 	add	fp, #4
14e18     A7 FC 61 FC | 	wrlong	result2, fp
14e1c     04 4E 05 F1 | 	add	fp, #4
14e20     A7 FE 61 FC | 	wrlong	result3, fp
14e24     08 4E 85 F1 | 	sub	fp, #8
14e28     A7 12 02 F6 | 	mov	arg01, fp
14e2c     0C 4E 85 F1 | 	sub	fp, #12
14e30     5C 66 BF FD | 	call	#_converttoint
14e34     FD 20 02 F6 | 	mov	local02, result1
14e38     10 1F 02 F6 | 	mov	local01, local02
14e3c     01 1E 66 F0 | 	shl	local01, #1
14e40     10 1F 02 F1 | 	add	local01, local02
14e44     03 1E 66 F0 | 	shl	local01, #3
14e48     14 00 00 FF 
14e4c     38 E5 05 F1 | 	add	objptr, ##10552
14e50     F2 1E 02 F1 | 	add	local01, objptr
14e54     A7 12 02 F6 | 	mov	arg01, fp
14e58     14 00 00 FF 
14e5c     38 E5 85 F1 | 	sub	objptr, ##10552
14e60     E8 66 BF FD | 	call	#_converttofloat
14e64     10 1E 06 F1 | 	add	local01, #16
14e68     0F FB 61 FC | 	wrlong	result1, local01
14e6c     A7 F0 03 F6 | 	mov	ptra, fp
14e70     B2 00 A0 FD | 	call	#popregs_
14e74                 | _do_setpan_ret
14e74     2D 00 64 FD | 	ret
14e78                 | 
14e78                 | ' 
14e78                 | ' ' ------------------ setsustain
14e78                 | ' 
14e78                 | ' sub do_setsustain
14e78                 | _do_setsustain
14e78     02 4A 05 F6 | 	mov	COUNT_, #2
14e7c     A8 00 A0 FD | 	call	#pushregs_
14e80     18 F0 07 F1 | 	add	ptra, #24
14e84     24 64 BF FD | 	call	#_pop
14e88     FD 12 02 F6 | 	mov	arg01, result1
14e8c     FE 1E 02 F6 | 	mov	local01, result2
14e90     FF 20 02 F6 | 	mov	local02, result3
14e94     A7 12 62 FC | 	wrlong	arg01, fp
14e98     04 4E 05 F1 | 	add	fp, #4
14e9c     A7 1E 62 FC | 	wrlong	local01, fp
14ea0     04 4E 05 F1 | 	add	fp, #4
14ea4     A7 20 62 FC | 	wrlong	local02, fp
14ea8     08 4E 85 F1 | 	sub	fp, #8
14eac     FC 63 BF FD | 	call	#_pop
14eb0     FD 20 02 F6 | 	mov	local02, result1
14eb4     0C 4E 05 F1 | 	add	fp, #12
14eb8     A7 20 62 FC | 	wrlong	local02, fp
14ebc     04 4E 05 F1 | 	add	fp, #4
14ec0     A7 FC 61 FC | 	wrlong	result2, fp
14ec4     04 4E 05 F1 | 	add	fp, #4
14ec8     A7 FE 61 FC | 	wrlong	result3, fp
14ecc     08 4E 85 F1 | 	sub	fp, #8
14ed0     A7 12 02 F6 | 	mov	arg01, fp
14ed4     0C 4E 85 F1 | 	sub	fp, #12
14ed8     B4 65 BF FD | 	call	#_converttoint
14edc     FD 20 02 F6 | 	mov	local02, result1
14ee0     10 1F 02 F6 | 	mov	local01, local02
14ee4     01 1E 66 F0 | 	shl	local01, #1
14ee8     10 1F 02 F1 | 	add	local01, local02
14eec     03 1E 66 F0 | 	shl	local01, #3
14ef0     14 00 00 FF 
14ef4     38 E5 05 F1 | 	add	objptr, ##10552
14ef8     F2 1E 02 F1 | 	add	local01, objptr
14efc     A7 12 02 F6 | 	mov	arg01, fp
14f00     14 00 00 FF 
14f04     38 E5 85 F1 | 	sub	objptr, ##10552
14f08     84 65 BF FD | 	call	#_converttoint
14f0c     14 1E 06 F1 | 	add	local01, #20
14f10     0F FB 51 FC | 	wrword	result1, local01
14f14     A7 F0 03 F6 | 	mov	ptra, fp
14f18     B2 00 A0 FD | 	call	#popregs_
14f1c                 | _do_setsustain_ret
14f1c     2D 00 64 FD | 	ret
14f20                 | 
14f20                 | ' 
14f20                 | ' ' ------------------ setvol
14f20                 | ' 
14f20                 | ' sub do_setvol
14f20                 | _do_setvol
14f20     02 4A 05 F6 | 	mov	COUNT_, #2
14f24     A8 00 A0 FD | 	call	#pushregs_
14f28     18 F0 07 F1 | 	add	ptra, #24
14f2c     7C 63 BF FD | 	call	#_pop
14f30     FD 12 02 F6 | 	mov	arg01, result1
14f34     FE 1E 02 F6 | 	mov	local01, result2
14f38     FF 20 02 F6 | 	mov	local02, result3
14f3c     A7 12 62 FC | 	wrlong	arg01, fp
14f40     04 4E 05 F1 | 	add	fp, #4
14f44     A7 1E 62 FC | 	wrlong	local01, fp
14f48     04 4E 05 F1 | 	add	fp, #4
14f4c     A7 20 62 FC | 	wrlong	local02, fp
14f50     08 4E 85 F1 | 	sub	fp, #8
14f54     54 63 BF FD | 	call	#_pop
14f58     FD 20 02 F6 | 	mov	local02, result1
14f5c     0C 4E 05 F1 | 	add	fp, #12
14f60     A7 20 62 FC | 	wrlong	local02, fp
14f64     04 4E 05 F1 | 	add	fp, #4
14f68     A7 FC 61 FC | 	wrlong	result2, fp
14f6c     04 4E 05 F1 | 	add	fp, #4
14f70     A7 FE 61 FC | 	wrlong	result3, fp
14f74     08 4E 85 F1 | 	sub	fp, #8
14f78     A7 12 02 F6 | 	mov	arg01, fp
14f7c     0C 4E 85 F1 | 	sub	fp, #12
14f80     0C 65 BF FD | 	call	#_converttoint
14f84     FD 20 02 F6 | 	mov	local02, result1
14f88     10 1F 02 F6 | 	mov	local01, local02
14f8c     01 1E 66 F0 | 	shl	local01, #1
14f90     10 1F 02 F1 | 	add	local01, local02
14f94     03 1E 66 F0 | 	shl	local01, #3
14f98     14 00 00 FF 
14f9c     38 E5 05 F1 | 	add	objptr, ##10552
14fa0     F2 1E 02 F1 | 	add	local01, objptr
14fa4     A7 12 02 F6 | 	mov	arg01, fp
14fa8     14 00 00 FF 
14fac     38 E5 85 F1 | 	sub	objptr, ##10552
14fb0     98 65 BF FD | 	call	#_converttofloat
14fb4     0C 1E 06 F1 | 	add	local01, #12
14fb8     0F FB 61 FC | 	wrlong	result1, local01
14fbc     A7 F0 03 F6 | 	mov	ptra, fp
14fc0     B2 00 A0 FD | 	call	#popregs_
14fc4                 | _do_setvol_ret
14fc4     2D 00 64 FD | 	ret
14fc8                 | 
14fc8                 | ' 
14fc8                 | ' ' ------------------ setwave
14fc8                 | ' 
14fc8                 | ' sub do_setwave
14fc8                 | _do_setwave
14fc8     02 4A 05 F6 | 	mov	COUNT_, #2
14fcc     A8 00 A0 FD | 	call	#pushregs_
14fd0     18 F0 07 F1 | 	add	ptra, #24
14fd4     D4 62 BF FD | 	call	#_pop
14fd8     FD 12 02 F6 | 	mov	arg01, result1
14fdc     FE 1E 02 F6 | 	mov	local01, result2
14fe0     FF 20 02 F6 | 	mov	local02, result3
14fe4     A7 12 62 FC | 	wrlong	arg01, fp
14fe8     04 4E 05 F1 | 	add	fp, #4
14fec     A7 1E 62 FC | 	wrlong	local01, fp
14ff0     04 4E 05 F1 | 	add	fp, #4
14ff4     A7 20 62 FC | 	wrlong	local02, fp
14ff8     08 4E 85 F1 | 	sub	fp, #8
14ffc     AC 62 BF FD | 	call	#_pop
15000     FD 20 02 F6 | 	mov	local02, result1
15004     0C 4E 05 F1 | 	add	fp, #12
15008     A7 20 62 FC | 	wrlong	local02, fp
1500c     04 4E 05 F1 | 	add	fp, #4
15010     A7 FC 61 FC | 	wrlong	result2, fp
15014     04 4E 05 F1 | 	add	fp, #4
15018     A7 FE 61 FC | 	wrlong	result3, fp
1501c     08 4E 85 F1 | 	sub	fp, #8
15020     A7 12 02 F6 | 	mov	arg01, fp
15024     0C 4E 85 F1 | 	sub	fp, #12
15028     64 64 BF FD | 	call	#_converttoint
1502c     FD 20 02 F6 | 	mov	local02, result1
15030     10 1F 02 F6 | 	mov	local01, local02
15034     01 1E 66 F0 | 	shl	local01, #1
15038     10 1F 02 F1 | 	add	local01, local02
1503c     03 1E 66 F0 | 	shl	local01, #3
15040     14 00 00 FF 
15044     38 E5 05 F1 | 	add	objptr, ##10552
15048     F2 1E 02 F1 | 	add	local01, objptr
1504c     A7 12 02 F6 | 	mov	arg01, fp
15050     14 00 00 FF 
15054     38 E5 85 F1 | 	sub	objptr, ##10552
15058     34 64 BF FD | 	call	#_converttoint
1505c     04 1E 06 F1 | 	add	local01, #4
15060     0F FB 41 FC | 	wrbyte	result1, local01
15064     A7 F0 03 F6 | 	mov	ptra, fp
15068     B2 00 A0 FD | 	call	#popregs_
1506c                 | _do_setwave_ret
1506c     2D 00 64 FD | 	ret
15070                 | 
15070                 | ' 
15070                 | ' ' ------------------ shutup
15070                 | ' 
15070                 | ' sub do_shutup
15070                 | _do_shutup
15070     03 4A 05 F6 | 	mov	COUNT_, #3
15074     A8 00 A0 FD | 	call	#pushregs_
15078     18 F0 07 F1 | 	add	ptra, #24
1507c     4A 00 00 FF 
15080     80 E4 05 F1 | 	add	objptr, ##38016
15084     F2 1E 02 FB | 	rdlong	local01, objptr
15088     0F 21 02 F6 | 	mov	local02, local01
1508c     01 20 66 F0 | 	shl	local02, #1
15090     0F 21 02 F1 | 	add	local02, local01
15094     02 20 66 F0 | 	shl	local02, #2
15098     03 00 00 FF 
1509c     04 E4 85 F1 | 	sub	objptr, ##1540
150a0     F2 20 02 F1 | 	add	local02, objptr
150a4     10 23 0A FB | 	rdlong	local03, local02 wz
150a8     14 4E 05 F1 | 	add	fp, #20
150ac     A7 22 62 FC | 	wrlong	local03, fp
150b0                 | ' 
150b0                 | ' numpar=compiledline(lineptr_e).result.uresult
150b0                 | ' if numpar=0 then
150b0     14 4E 85 F1 | 	sub	fp, #20
150b4     47 00 00 FF 
150b8     7C E4 85 F1 | 	sub	objptr, ##36476
150bc     50 00 90 5D |  if_ne	jmp	#LR__1732
150c0                 | '   for i=0 to 7 : dpoke base+64*i+20,0 : next i
150c0     10 4E 05 F1 | 	add	fp, #16
150c4     A7 00 68 FC | 	wrlong	#0, fp
150c8     37 00 00 FF 
150cc     10 E4 05 F1 | 	add	objptr, ##28176
150d0     97 16 48 FB | 	callpa	#(@LR__1731-@LR__1730)>>2,fcache_load_ptr_
150d4                 | LR__1730
150d4     F2 12 02 FB | 	rdlong	arg01, objptr
150d8     A7 22 02 FB | 	rdlong	local03, fp
150dc     06 22 66 F0 | 	shl	local03, #6
150e0     11 13 02 F1 | 	add	arg01, local03
150e4     14 12 06 F1 | 	add	arg01, #20
150e8     09 01 58 FC | 	wrword	#0, arg01
150ec     A7 22 02 FB | 	rdlong	local03, fp
150f0     01 22 06 F1 | 	add	local03, #1
150f4     A7 22 62 FC | 	wrlong	local03, fp
150f8     08 22 56 F2 | 	cmps	local03, #8 wc
150fc     D4 FF 9F CD |  if_b	jmp	#LR__1730
15100                 | LR__1731
15100     37 00 00 FF 
15104     10 E4 85 F1 | 	sub	objptr, ##28176
15108     10 4E 85 F1 | 	sub	fp, #16
1510c     64 00 90 FD | 	jmp	#LR__1733
15110                 | LR__1732
15110     98 61 BF FD | 	call	#_pop
15114     FF 1E 02 F6 | 	mov	local01, result3
15118     A7 FA 61 FC | 	wrlong	result1, fp
1511c     04 4E 05 F1 | 	add	fp, #4
15120     A7 FC 61 FC | 	wrlong	result2, fp
15124     04 4E 05 F1 | 	add	fp, #4
15128     A7 1E 62 FC | 	wrlong	local01, fp
1512c     08 4E 85 F1 | 	sub	fp, #8
15130     A7 12 02 F6 | 	mov	arg01, fp
15134     58 63 BF FD | 	call	#_converttoint
15138     FD 22 52 F6 | 	abs	local03, result1 wc
1513c     07 22 06 F5 | 	and	local03, #7
15140     11 21 82 F6 | 	negc	local02, local03
15144     0C 4E 05 F1 | 	add	fp, #12
15148     A7 20 62 FC | 	wrlong	local02, fp
1514c     37 00 00 FF 
15150     10 E4 05 F1 | 	add	objptr, ##28176
15154     F2 12 02 FB | 	rdlong	arg01, objptr
15158     37 00 00 FF 
1515c     10 E4 85 F1 | 	sub	objptr, ##28176
15160     0C 4E 85 F1 | 	sub	fp, #12
15164     06 20 66 F0 | 	shl	local02, #6
15168     10 13 02 F1 | 	add	arg01, local02
1516c     14 12 06 F1 | 	add	arg01, #20
15170     09 01 58 FC | 	wrword	#0, arg01
15174                 | LR__1733
15174     A7 F0 03 F6 | 	mov	ptra, fp
15178     B2 00 A0 FD | 	call	#popregs_
1517c                 | _do_shutup_ret
1517c     2D 00 64 FD | 	ret
15180                 | 
15180                 | ' 
15180                 | ' ' ------------------ sin
15180                 | ' 
15180                 | ' sub do_sin
15180                 | _do_sin
15180     01 4A 05 F6 | 	mov	COUNT_, #1
15184     A8 00 A0 FD | 	call	#pushregs_
15188     10 F0 07 F1 | 	add	ptra, #16
1518c     4A 00 00 FF 
15190     80 E4 05 F1 | 	add	objptr, ##38016
15194     F2 1E 02 FB | 	rdlong	local01, objptr
15198     0F 17 02 F6 | 	mov	arg03, local01
1519c     01 16 66 F0 | 	shl	arg03, #1
151a0     0F 17 02 F1 | 	add	arg03, local01
151a4     02 16 66 F0 | 	shl	arg03, #2
151a8     03 00 00 FF 
151ac     04 E4 85 F1 | 	sub	objptr, ##1540
151b0     F2 16 02 F1 | 	add	arg03, objptr
151b4     0B 17 02 FB | 	rdlong	arg03, arg03
151b8     0C 4E 05 F1 | 	add	fp, #12
151bc     A7 16 62 FC | 	wrlong	arg03, fp
151c0                 | ' 
151c0                 | ' numpar=compiledline(lineptr_e).result.uresult
151c0                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
151c0     0C 4E 85 F1 | 	sub	fp, #12
151c4     02 16 16 F2 | 	cmp	arg03, #2 wc
151c8     47 00 00 FF 
151cc     7C E4 85 F1 | 	sub	objptr, ##36476
151d0     0C 4E 05 C1 |  if_b	add	fp, #12
151d4     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
151d8     0C 4E 85 C1 |  if_b	sub	fp, #12
151dc     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1740
151e0     00 12 06 F6 | 	mov	arg01, #0
151e4     E0 11 B1 FD | 	call	#__system___getiolock_0540
151e8     FD 12 02 F6 | 	mov	arg01, result1
151ec     74 B7 B0 FD | 	call	#__system___lockmem
151f0     85 01 00 FF 
151f4     D9 14 06 F6 | 	mov	arg02, ##@LR__5520
151f8     00 12 06 F6 | 	mov	arg01, #0
151fc     00 16 06 F6 | 	mov	arg03, #0
15200     54 C4 B0 FD | 	call	#__system___basic_print_string
15204     00 12 06 F6 | 	mov	arg01, #0
15208     BC 11 B1 FD | 	call	#__system___getiolock_0540
1520c     FD 00 68 FC | 	wrlong	#0, result1
15210     27 12 06 F6 | 	mov	arg01, #39
15214     BC 81 B0 FD | 	call	#_printerror
15218     64 00 90 FD | 	jmp	#LR__1741
1521c                 | LR__1740
1521c     8C 60 BF FD | 	call	#_pop
15220     A7 FA 61 FC | 	wrlong	result1, fp
15224     04 4E 05 F1 | 	add	fp, #4
15228     A7 FC 61 FC | 	wrlong	result2, fp
1522c     04 4E 05 F1 | 	add	fp, #4
15230     A7 FE 61 FC | 	wrlong	result3, fp
15234     08 4E 85 F1 | 	sub	fp, #8
15238     51 00 00 FF 
1523c     BC E5 05 F1 | 	add	objptr, ##41916
15240     F2 1E 02 FB | 	rdlong	local01, objptr
15244     51 00 00 FF 
15248     BC E5 85 F1 | 	sub	objptr, ##41916
1524c     A7 12 02 F6 | 	mov	arg01, fp
15250     F8 62 BF FD | 	call	#_converttofloat
15254     FD 14 02 F6 | 	mov	arg02, result1
15258     0F 13 02 F6 | 	mov	arg01, local01
1525c     B8 E2 B0 FD | 	call	#__system___float_mul
15260     FD 12 02 F6 | 	mov	arg01, result1
15264     10 EC B0 FD | 	call	#__system____builtin_sinf
15268     A7 FA 61 FC | 	wrlong	result1, fp
1526c     08 4E 05 F1 | 	add	fp, #8
15270     A7 3C 68 FC | 	wrlong	#30, fp
15274     08 4E 85 F1 | 	sub	fp, #8
15278     A7 12 02 F6 | 	mov	arg01, fp
1527c     C4 60 BF FD | 	call	#_push
15280                 | LR__1741
15280     A7 F0 03 F6 | 	mov	ptra, fp
15284     B2 00 A0 FD | 	call	#popregs_
15288                 | _do_sin_ret
15288     2D 00 64 FD | 	ret
1528c                 | 
1528c                 | ' 
1528c                 | ' ' ------------------ sprite
1528c                 | ' 
1528c                 | ' sub do_sprite
1528c                 | _do_sprite
1528c     00 4A 05 F6 | 	mov	COUNT_, #0
15290     A8 00 A0 FD | 	call	#pushregs_
15294     30 F0 07 F1 | 	add	ptra, #48
15298     10 60 BF FD | 	call	#_pop
1529c     FD 16 02 F6 | 	mov	arg03, result1
152a0     FE 14 02 F6 | 	mov	arg02, result2
152a4     FF 12 02 F6 | 	mov	arg01, result3
152a8     18 4E 05 F1 | 	add	fp, #24
152ac     A7 16 62 FC | 	wrlong	arg03, fp
152b0     04 4E 05 F1 | 	add	fp, #4
152b4     A7 14 62 FC | 	wrlong	arg02, fp
152b8     04 4E 05 F1 | 	add	fp, #4
152bc     A7 12 62 FC | 	wrlong	arg01, fp
152c0     20 4E 85 F1 | 	sub	fp, #32
152c4     E4 5F BF FD | 	call	#_pop
152c8     FD 16 02 F6 | 	mov	arg03, result1
152cc     FE 14 02 F6 | 	mov	arg02, result2
152d0     FF 12 02 F6 | 	mov	arg01, result3
152d4     0C 4E 05 F1 | 	add	fp, #12
152d8     A7 16 62 FC | 	wrlong	arg03, fp
152dc     04 4E 05 F1 | 	add	fp, #4
152e0     A7 14 62 FC | 	wrlong	arg02, fp
152e4     04 4E 05 F1 | 	add	fp, #4
152e8     A7 12 62 FC | 	wrlong	arg01, fp
152ec     14 4E 85 F1 | 	sub	fp, #20
152f0     B8 5F BF FD | 	call	#_pop
152f4     FF 16 02 F6 | 	mov	arg03, result3
152f8     A7 FA 61 FC | 	wrlong	result1, fp
152fc     04 4E 05 F1 | 	add	fp, #4
15300     A7 FC 61 FC | 	wrlong	result2, fp
15304     04 4E 05 F1 | 	add	fp, #4
15308     A7 16 62 FC | 	wrlong	arg03, fp
1530c     08 4E 85 F1 | 	sub	fp, #8
15310     A7 12 02 F6 | 	mov	arg01, fp
15314     78 61 BF FD | 	call	#_converttoint
15318     24 4E 05 F1 | 	add	fp, #36
1531c     A7 FA 61 FC | 	wrlong	result1, fp
15320     18 4E 85 F1 | 	sub	fp, #24
15324     A7 12 02 F6 | 	mov	arg01, fp
15328     0C 4E 85 F1 | 	sub	fp, #12
1532c     60 61 BF FD | 	call	#_converttoint
15330     28 4E 05 F1 | 	add	fp, #40
15334     A7 FA 61 FC | 	wrlong	result1, fp
15338     10 4E 85 F1 | 	sub	fp, #16
1533c     A7 12 02 F6 | 	mov	arg01, fp
15340     18 4E 85 F1 | 	sub	fp, #24
15344     48 61 BF FD | 	call	#_converttoint
15348     2C 4E 05 F1 | 	add	fp, #44
1534c     A7 FA 61 FC | 	wrlong	result1, fp
15350     08 4E 85 F1 | 	sub	fp, #8
15354     A7 12 02 FB | 	rdlong	arg01, fp
15358     04 4E 05 F1 | 	add	fp, #4
1535c     A7 14 02 FB | 	rdlong	arg02, fp
15360     FD 16 02 F6 | 	mov	arg03, result1
15364     28 4E 85 F1 | 	sub	fp, #40
15368     94 8F B0 FD | 	call	#_hg010b_spin2_setspritepos
1536c     A7 F0 03 F6 | 	mov	ptra, fp
15370     B2 00 A0 FD | 	call	#popregs_
15374                 | _do_sprite_ret
15374     2D 00 64 FD | 	ret
15378                 | 
15378                 | ' 
15378                 | ' ' ------------------ sqr
15378                 | ' 
15378                 | ' sub do_sqr
15378                 | _do_sqr
15378     01 4A 05 F6 | 	mov	COUNT_, #1
1537c     A8 00 A0 FD | 	call	#pushregs_
15380     10 F0 07 F1 | 	add	ptra, #16
15384     4A 00 00 FF 
15388     80 E4 05 F1 | 	add	objptr, ##38016
1538c     F2 1E 02 FB | 	rdlong	local01, objptr
15390     0F 17 02 F6 | 	mov	arg03, local01
15394     01 16 66 F0 | 	shl	arg03, #1
15398     0F 17 02 F1 | 	add	arg03, local01
1539c     02 16 66 F0 | 	shl	arg03, #2
153a0     03 00 00 FF 
153a4     04 E4 85 F1 | 	sub	objptr, ##1540
153a8     F2 16 02 F1 | 	add	arg03, objptr
153ac     0B 17 02 FB | 	rdlong	arg03, arg03
153b0     0C 4E 05 F1 | 	add	fp, #12
153b4     A7 16 62 FC | 	wrlong	arg03, fp
153b8                 | ' 
153b8                 | ' numpar=compiledline(lineptr_e).result.uresult
153b8                 | ' if numpar>1 orelse numpar=0 then print "sqr: "; : printerror(39) : return
153b8     0C 4E 85 F1 | 	sub	fp, #12
153bc     02 16 16 F2 | 	cmp	arg03, #2 wc
153c0     47 00 00 FF 
153c4     7C E4 85 F1 | 	sub	objptr, ##36476
153c8     0C 4E 05 C1 |  if_b	add	fp, #12
153cc     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
153d0     0C 4E 85 C1 |  if_b	sub	fp, #12
153d4     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1750
153d8     00 12 06 F6 | 	mov	arg01, #0
153dc     E8 0F B1 FD | 	call	#__system___getiolock_0540
153e0     FD 12 02 F6 | 	mov	arg01, result1
153e4     7C B5 B0 FD | 	call	#__system___lockmem
153e8     85 01 00 FF 
153ec     DF 14 06 F6 | 	mov	arg02, ##@LR__5521
153f0     00 12 06 F6 | 	mov	arg01, #0
153f4     00 16 06 F6 | 	mov	arg03, #0
153f8     5C C2 B0 FD | 	call	#__system___basic_print_string
153fc     00 12 06 F6 | 	mov	arg01, #0
15400     C4 0F B1 FD | 	call	#__system___getiolock_0540
15404     FD 00 68 FC | 	wrlong	#0, result1
15408     27 12 06 F6 | 	mov	arg01, #39
1540c     C4 7F B0 FD | 	call	#_printerror
15410     48 00 90 FD | 	jmp	#LR__1751
15414                 | LR__1750
15414     94 5E BF FD | 	call	#_pop
15418     FF 1E 02 F6 | 	mov	local01, result3
1541c     A7 FA 61 FC | 	wrlong	result1, fp
15420     04 4E 05 F1 | 	add	fp, #4
15424     A7 FC 61 FC | 	wrlong	result2, fp
15428     04 4E 05 F1 | 	add	fp, #4
1542c     A7 1E 62 FC | 	wrlong	local01, fp
15430     08 4E 85 F1 | 	sub	fp, #8
15434     A7 12 02 F6 | 	mov	arg01, fp
15438     10 61 BF FD | 	call	#_converttofloat
1543c     FD 12 02 F6 | 	mov	arg01, result1
15440     FC DF B0 FD | 	call	#__system___float_sqrt
15444     A7 FA 61 FC | 	wrlong	result1, fp
15448     08 4E 05 F1 | 	add	fp, #8
1544c     A7 3C 68 FC | 	wrlong	#30, fp
15450     08 4E 85 F1 | 	sub	fp, #8
15454     A7 12 02 F6 | 	mov	arg01, fp
15458     E8 5E BF FD | 	call	#_push
1545c                 | LR__1751
1545c     A7 F0 03 F6 | 	mov	ptra, fp
15460     B2 00 A0 FD | 	call	#popregs_
15464                 | _do_sqr_ret
15464     2D 00 64 FD | 	ret
15468                 | 
15468                 | ' 
15468                 | ' ' ------------------ stick
15468                 | ' 
15468                 | ' sub do_stick
15468                 | _do_stick
15468     01 4A 05 F6 | 	mov	COUNT_, #1
1546c     A8 00 A0 FD | 	call	#pushregs_
15470     10 F0 07 F1 | 	add	ptra, #16
15474     4A 00 00 FF 
15478     80 E4 05 F1 | 	add	objptr, ##38016
1547c     F2 1E 02 FB | 	rdlong	local01, objptr
15480     0F 17 02 F6 | 	mov	arg03, local01
15484     01 16 66 F0 | 	shl	arg03, #1
15488     0F 17 02 F1 | 	add	arg03, local01
1548c     02 16 66 F0 | 	shl	arg03, #2
15490     03 00 00 FF 
15494     04 E4 85 F1 | 	sub	objptr, ##1540
15498     F2 16 02 F1 | 	add	arg03, objptr
1549c     0B 17 02 FB | 	rdlong	arg03, arg03
154a0     0C 4E 05 F1 | 	add	fp, #12
154a4     A7 16 62 FC | 	wrlong	arg03, fp
154a8                 | ' 
154a8                 | ' numpar=compiledline(lineptr_e).result.uresult
154a8                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
154a8     0C 4E 85 F1 | 	sub	fp, #12
154ac     02 16 16 F2 | 	cmp	arg03, #2 wc
154b0     47 00 00 FF 
154b4     7C E4 85 F1 | 	sub	objptr, ##36476
154b8     3C 00 90 CD |  if_b	jmp	#LR__1760
154bc     00 12 06 F6 | 	mov	arg01, #0
154c0     04 0F B1 FD | 	call	#__system___getiolock_0540
154c4     FD 12 02 F6 | 	mov	arg01, result1
154c8     98 B4 B0 FD | 	call	#__system___lockmem
154cc     85 01 00 FF 
154d0     E5 14 06 F6 | 	mov	arg02, ##@LR__5522
154d4     00 12 06 F6 | 	mov	arg01, #0
154d8     00 16 06 F6 | 	mov	arg03, #0
154dc     78 C1 B0 FD | 	call	#__system___basic_print_string
154e0     00 12 06 F6 | 	mov	arg01, #0
154e4     E0 0E B1 FD | 	call	#__system___getiolock_0540
154e8     FD 00 68 FC | 	wrlong	#0, result1
154ec     27 12 06 F6 | 	mov	arg01, #39
154f0     E0 7E B0 FD | 	call	#_printerror
154f4     E8 00 90 FD | 	jmp	#LR__1764
154f8                 | LR__1760
154f8                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
154f8     0C 4E 05 F1 | 	add	fp, #12
154fc     A7 FE 09 FB | 	rdlong	result3, fp wz
15500     0C 4E 85 F1 | 	sub	fp, #12
15504     30 00 90 5D |  if_ne	jmp	#LR__1761
15508     51 00 00 FF 
1550c     30 E5 05 F1 | 	add	objptr, ##41776
15510     F2 1E 02 FB | 	rdlong	local01, objptr
15514     51 00 00 FF 
15518     30 E5 85 F1 | 	sub	objptr, ##41776
1551c     A7 1E 62 FC | 	wrlong	local01, fp
15520     08 4E 05 F1 | 	add	fp, #8
15524     A7 3A 68 FC | 	wrlong	#29, fp
15528     08 4E 85 F1 | 	sub	fp, #8
1552c     A7 12 02 F6 | 	mov	arg01, fp
15530     10 5E BF FD | 	call	#_push
15534     A8 00 90 FD | 	jmp	#LR__1764
15538                 | LR__1761
15538     70 5D BF FD | 	call	#_pop
1553c     A7 FA 61 FC | 	wrlong	result1, fp
15540     04 4E 05 F1 | 	add	fp, #4
15544     A7 FC 61 FC | 	wrlong	result2, fp
15548     04 4E 05 F1 | 	add	fp, #4
1554c     A7 FE 61 FC | 	wrlong	result3, fp
15550                 | ' t1=pop()
15550                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
15550     08 4E 85 F1 | 	sub	fp, #8
15554     1C FE 0D F2 | 	cmp	result3, #28 wz
15558     08 4E 05 51 |  if_ne	add	fp, #8
1555c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
15560     08 4E 85 51 |  if_ne	sub	fp, #8
15564     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
15568     6C 00 90 5D |  if_ne	jmp	#LR__1763
1556c     A7 1E 02 FB | 	rdlong	local01, fp
15570     52 00 00 FF 
15574     0C E4 05 F1 | 	add	objptr, ##41996
15578     F2 1E 62 FC | 	wrlong	local01, objptr
1557c                 | '   q=t1.result.uresult
1557c                 | '   if q<7 then 
1557c     52 00 00 FF 
15580     0C E4 85 F1 | 	sub	objptr, ##41996
15584     07 1E 56 F2 | 	cmps	local01, #7 wc
15588     40 00 90 3D |  if_ae	jmp	#LR__1762
1558c     52 00 00 FF 
15590     0C E4 05 F1 | 	add	objptr, ##41996
15594     F2 1E 02 FB | 	rdlong	local01, objptr
15598     02 1E 66 F0 | 	shl	local01, #2
1559c     DC E4 85 F1 | 	sub	objptr, #220
155a0     F2 1E 02 F1 | 	add	local01, objptr
155a4     0F 1F 02 FB | 	rdlong	local01, local01
155a8     A7 1E 62 FC | 	wrlong	local01, fp
155ac     08 4E 05 F1 | 	add	fp, #8
155b0     A7 3A 68 FC | 	wrlong	#29, fp
155b4     08 4E 85 F1 | 	sub	fp, #8
155b8     A7 12 02 F6 | 	mov	arg01, fp
155bc     51 00 00 FF 
155c0     30 E5 85 F1 | 	sub	objptr, ##41776
155c4     7C 5D BF FD | 	call	#_push
155c8                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
155c8     14 00 90 FD | 	jmp	#LR__1764
155cc                 | LR__1762
155cc     29 12 06 F6 | 	mov	arg01, #41
155d0     00 7E B0 FD | 	call	#_printerror
155d4                 | '      printerror(41) : return
155d4     08 00 90 FD | 	jmp	#LR__1764
155d8                 | LR__1763
155d8     29 12 06 F6 | 	mov	arg01, #41
155dc     F4 7D B0 FD | 	call	#_printerror
155e0                 | LR__1764
155e0     A7 F0 03 F6 | 	mov	ptra, fp
155e4     B2 00 A0 FD | 	call	#popregs_
155e8                 | _do_stick_ret
155e8     2D 00 64 FD | 	ret
155ec                 | 
155ec                 | ' 
155ec                 | ' ' ------------------ strig
155ec                 | ' 
155ec                 | ' sub do_strig
155ec                 | _do_strig
155ec     01 4A 05 F6 | 	mov	COUNT_, #1
155f0     A8 00 A0 FD | 	call	#pushregs_
155f4     10 F0 07 F1 | 	add	ptra, #16
155f8     4A 00 00 FF 
155fc     80 E4 05 F1 | 	add	objptr, ##38016
15600     F2 1E 02 FB | 	rdlong	local01, objptr
15604     0F 17 02 F6 | 	mov	arg03, local01
15608     01 16 66 F0 | 	shl	arg03, #1
1560c     0F 17 02 F1 | 	add	arg03, local01
15610     02 16 66 F0 | 	shl	arg03, #2
15614     03 00 00 FF 
15618     04 E4 85 F1 | 	sub	objptr, ##1540
1561c     F2 16 02 F1 | 	add	arg03, objptr
15620     0B 17 02 FB | 	rdlong	arg03, arg03
15624     0C 4E 05 F1 | 	add	fp, #12
15628     A7 16 62 FC | 	wrlong	arg03, fp
1562c                 | ' 
1562c                 | ' numpar=compiledline(lineptr_e).result.uresult
1562c                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
1562c     0C 4E 85 F1 | 	sub	fp, #12
15630     02 16 16 F2 | 	cmp	arg03, #2 wc
15634     47 00 00 FF 
15638     7C E4 85 F1 | 	sub	objptr, ##36476
1563c     3C 00 90 CD |  if_b	jmp	#LR__1770
15640     00 12 06 F6 | 	mov	arg01, #0
15644     80 0D B1 FD | 	call	#__system___getiolock_0540
15648     FD 12 02 F6 | 	mov	arg01, result1
1564c     14 B3 B0 FD | 	call	#__system___lockmem
15650     85 01 00 FF 
15654     ED 14 06 F6 | 	mov	arg02, ##@LR__5523
15658     00 12 06 F6 | 	mov	arg01, #0
1565c     00 16 06 F6 | 	mov	arg03, #0
15660     F4 BF B0 FD | 	call	#__system___basic_print_string
15664     00 12 06 F6 | 	mov	arg01, #0
15668     5C 0D B1 FD | 	call	#__system___getiolock_0540
1566c     FD 00 68 FC | 	wrlong	#0, result1
15670     27 12 06 F6 | 	mov	arg01, #39
15674     5C 7D B0 FD | 	call	#_printerror
15678     E8 00 90 FD | 	jmp	#LR__1774
1567c                 | LR__1770
1567c                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
1567c     0C 4E 05 F1 | 	add	fp, #12
15680     A7 FE 09 FB | 	rdlong	result3, fp wz
15684     0C 4E 85 F1 | 	sub	fp, #12
15688     30 00 90 5D |  if_ne	jmp	#LR__1771
1568c     51 00 00 FF 
15690     4C E5 05 F1 | 	add	objptr, ##41804
15694     F2 1E 02 FB | 	rdlong	local01, objptr
15698     51 00 00 FF 
1569c     4C E5 85 F1 | 	sub	objptr, ##41804
156a0     A7 1E 62 FC | 	wrlong	local01, fp
156a4     08 4E 05 F1 | 	add	fp, #8
156a8     A7 3A 68 FC | 	wrlong	#29, fp
156ac     08 4E 85 F1 | 	sub	fp, #8
156b0     A7 12 02 F6 | 	mov	arg01, fp
156b4     8C 5C BF FD | 	call	#_push
156b8     A8 00 90 FD | 	jmp	#LR__1774
156bc                 | LR__1771
156bc     EC 5B BF FD | 	call	#_pop
156c0     A7 FA 61 FC | 	wrlong	result1, fp
156c4     04 4E 05 F1 | 	add	fp, #4
156c8     A7 FC 61 FC | 	wrlong	result2, fp
156cc     04 4E 05 F1 | 	add	fp, #4
156d0     A7 FE 61 FC | 	wrlong	result3, fp
156d4                 | ' t1=pop()
156d4                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
156d4     08 4E 85 F1 | 	sub	fp, #8
156d8     1C FE 0D F2 | 	cmp	result3, #28 wz
156dc     08 4E 05 51 |  if_ne	add	fp, #8
156e0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
156e4     08 4E 85 51 |  if_ne	sub	fp, #8
156e8     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
156ec     6C 00 90 5D |  if_ne	jmp	#LR__1773
156f0     A7 1E 02 FB | 	rdlong	local01, fp
156f4     52 00 00 FF 
156f8     0C E4 05 F1 | 	add	objptr, ##41996
156fc     F2 1E 62 FC | 	wrlong	local01, objptr
15700                 | '   q=t1.result.uresult
15700                 | '   if q<7 then 
15700     52 00 00 FF 
15704     0C E4 85 F1 | 	sub	objptr, ##41996
15708     07 1E 56 F2 | 	cmps	local01, #7 wc
1570c     40 00 90 3D |  if_ae	jmp	#LR__1772
15710     52 00 00 FF 
15714     0C E4 05 F1 | 	add	objptr, ##41996
15718     F2 1E 02 FB | 	rdlong	local01, objptr
1571c     02 1E 66 F0 | 	shl	local01, #2
15720     C0 E4 85 F1 | 	sub	objptr, #192
15724     F2 1E 02 F1 | 	add	local01, objptr
15728     0F 1F 02 FB | 	rdlong	local01, local01
1572c     A7 1E 62 FC | 	wrlong	local01, fp
15730     08 4E 05 F1 | 	add	fp, #8
15734     A7 3A 68 FC | 	wrlong	#29, fp
15738     08 4E 85 F1 | 	sub	fp, #8
1573c     A7 12 02 F6 | 	mov	arg01, fp
15740     51 00 00 FF 
15744     4C E5 85 F1 | 	sub	objptr, ##41804
15748     F8 5B BF FD | 	call	#_push
1574c                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
1574c     14 00 90 FD | 	jmp	#LR__1774
15750                 | LR__1772
15750     29 12 06 F6 | 	mov	arg01, #41
15754     7C 7C B0 FD | 	call	#_printerror
15758                 | '      printerror(41) : return
15758     08 00 90 FD | 	jmp	#LR__1774
1575c                 | LR__1773
1575c     29 12 06 F6 | 	mov	arg01, #41
15760     70 7C B0 FD | 	call	#_printerror
15764                 | LR__1774
15764     A7 F0 03 F6 | 	mov	ptra, fp
15768     B2 00 A0 FD | 	call	#popregs_
1576c                 | _do_strig_ret
1576c     2D 00 64 FD | 	ret
15770                 | 
15770                 | ' 
15770                 | ' ' ------------------ tan
15770                 | ' 
15770                 | ' sub do_tan
15770                 | _do_tan
15770     01 4A 05 F6 | 	mov	COUNT_, #1
15774     A8 00 A0 FD | 	call	#pushregs_
15778     10 F0 07 F1 | 	add	ptra, #16
1577c     4A 00 00 FF 
15780     80 E4 05 F1 | 	add	objptr, ##38016
15784     F2 1E 02 FB | 	rdlong	local01, objptr
15788     0F 17 02 F6 | 	mov	arg03, local01
1578c     01 16 66 F0 | 	shl	arg03, #1
15790     0F 17 02 F1 | 	add	arg03, local01
15794     02 16 66 F0 | 	shl	arg03, #2
15798     03 00 00 FF 
1579c     04 E4 85 F1 | 	sub	objptr, ##1540
157a0     F2 16 02 F1 | 	add	arg03, objptr
157a4     0B 17 02 FB | 	rdlong	arg03, arg03
157a8     0C 4E 05 F1 | 	add	fp, #12
157ac     A7 16 62 FC | 	wrlong	arg03, fp
157b0                 | ' 
157b0                 | ' numpar=compiledline(lineptr_e).result.uresult
157b0                 | ' if numpar>1 orelse numpar=0 then print "tan: "; : printerror(39) : return
157b0     0C 4E 85 F1 | 	sub	fp, #12
157b4     02 16 16 F2 | 	cmp	arg03, #2 wc
157b8     47 00 00 FF 
157bc     7C E4 85 F1 | 	sub	objptr, ##36476
157c0     0C 4E 05 C1 |  if_b	add	fp, #12
157c4     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
157c8     0C 4E 85 C1 |  if_b	sub	fp, #12
157cc     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1780
157d0     00 12 06 F6 | 	mov	arg01, #0
157d4     F0 0B B1 FD | 	call	#__system___getiolock_0540
157d8     FD 12 02 F6 | 	mov	arg01, result1
157dc     84 B1 B0 FD | 	call	#__system___lockmem
157e0     85 01 00 FF 
157e4     F5 14 06 F6 | 	mov	arg02, ##@LR__5524
157e8     00 12 06 F6 | 	mov	arg01, #0
157ec     00 16 06 F6 | 	mov	arg03, #0
157f0     64 BE B0 FD | 	call	#__system___basic_print_string
157f4     00 12 06 F6 | 	mov	arg01, #0
157f8     CC 0B B1 FD | 	call	#__system___getiolock_0540
157fc     FD 00 68 FC | 	wrlong	#0, result1
15800     27 12 06 F6 | 	mov	arg01, #39
15804     CC 7B B0 FD | 	call	#_printerror
15808     64 00 90 FD | 	jmp	#LR__1781
1580c                 | LR__1780
1580c     9C 5A BF FD | 	call	#_pop
15810     A7 FA 61 FC | 	wrlong	result1, fp
15814     04 4E 05 F1 | 	add	fp, #4
15818     A7 FC 61 FC | 	wrlong	result2, fp
1581c     04 4E 05 F1 | 	add	fp, #4
15820     A7 FE 61 FC | 	wrlong	result3, fp
15824     08 4E 85 F1 | 	sub	fp, #8
15828     51 00 00 FF 
1582c     BC E5 05 F1 | 	add	objptr, ##41916
15830     F2 1E 02 FB | 	rdlong	local01, objptr
15834     51 00 00 FF 
15838     BC E5 85 F1 | 	sub	objptr, ##41916
1583c     A7 12 02 F6 | 	mov	arg01, fp
15840     08 5D BF FD | 	call	#_converttofloat
15844     FD 14 02 F6 | 	mov	arg02, result1
15848     0F 13 02 F6 | 	mov	arg01, local01
1584c     C8 DC B0 FD | 	call	#__system___float_mul
15850     FD 12 02 F6 | 	mov	arg01, result1
15854     6C E7 B0 FD | 	call	#__system____builtin_tanf
15858     A7 FA 61 FC | 	wrlong	result1, fp
1585c     08 4E 05 F1 | 	add	fp, #8
15860     A7 3C 68 FC | 	wrlong	#30, fp
15864     08 4E 85 F1 | 	sub	fp, #8
15868     A7 12 02 F6 | 	mov	arg01, fp
1586c     D4 5A BF FD | 	call	#_push
15870                 | LR__1781
15870     A7 F0 03 F6 | 	mov	ptra, fp
15874     B2 00 A0 FD | 	call	#popregs_
15878                 | _do_tan_ret
15878     2D 00 64 FD | 	ret
1587c                 | 
1587c                 | ' 
1587c                 | ' ' ------------------ val
1587c                 | ' 
1587c                 | ' sub do_val
1587c                 | _do_val
1587c     03 4A 05 F6 | 	mov	COUNT_, #3
15880     A8 00 A0 FD | 	call	#pushregs_
15884     20 F0 07 F1 | 	add	ptra, #32
15888     4A 00 00 FF 
1588c     80 E4 05 F1 | 	add	objptr, ##38016
15890     F2 16 02 FB | 	rdlong	arg03, objptr
15894     0B 1F 02 F6 | 	mov	local01, arg03
15898     01 1E 66 F0 | 	shl	local01, #1
1589c     0B 1F 02 F1 | 	add	local01, arg03
158a0     02 1E 66 F0 | 	shl	local01, #2
158a4     03 00 00 FF 
158a8     04 E4 85 F1 | 	sub	objptr, ##1540
158ac     F2 1E 02 F1 | 	add	local01, objptr
158b0     0F 17 02 FB | 	rdlong	arg03, local01
158b4     0C 4E 05 F1 | 	add	fp, #12
158b8     A7 16 62 FC | 	wrlong	arg03, fp
158bc                 | ' 
158bc                 | ' numpar=compiledline(lineptr_e).result.uresult
158bc                 | ' if numpar>1 orelse numpar=0 then print "val: "; : printerror(39) : return
158bc     0C 4E 85 F1 | 	sub	fp, #12
158c0     02 16 16 F2 | 	cmp	arg03, #2 wc
158c4     47 00 00 FF 
158c8     7C E4 85 F1 | 	sub	objptr, ##36476
158cc     0C 4E 05 C1 |  if_b	add	fp, #12
158d0     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
158d4     0C 4E 85 C1 |  if_b	sub	fp, #12
158d8     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1790
158dc     00 12 06 F6 | 	mov	arg01, #0
158e0     E4 0A B1 FD | 	call	#__system___getiolock_0540
158e4     FD 12 02 F6 | 	mov	arg01, result1
158e8     78 B0 B0 FD | 	call	#__system___lockmem
158ec     85 01 00 FF 
158f0     FB 14 06 F6 | 	mov	arg02, ##@LR__5525
158f4     00 12 06 F6 | 	mov	arg01, #0
158f8     00 16 06 F6 | 	mov	arg03, #0
158fc     58 BD B0 FD | 	call	#__system___basic_print_string
15900     00 12 06 F6 | 	mov	arg01, #0
15904     C0 0A B1 FD | 	call	#__system___getiolock_0540
15908     FD 00 68 FC | 	wrlong	#0, result1
1590c     27 12 06 F6 | 	mov	arg01, #39
15910     C0 7A B0 FD | 	call	#_printerror
15914     5C 02 90 FD | 	jmp	#LR__1803
15918                 | LR__1790
15918     90 59 BF FD | 	call	#_pop
1591c     FF 16 02 F6 | 	mov	arg03, result3
15920     A7 FA 61 FC | 	wrlong	result1, fp
15924     04 4E 05 F1 | 	add	fp, #4
15928     A7 FC 61 FC | 	wrlong	result2, fp
1592c     04 4E 05 F1 | 	add	fp, #4
15930     A7 16 62 FC | 	wrlong	arg03, fp
15934                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
15934     08 4E 85 F1 | 	sub	fp, #8
15938     2B 16 0E F2 | 	cmp	arg03, #43 wz
1593c     18 00 90 5D |  if_ne	jmp	#LR__1791
15940     A7 12 02 FB | 	rdlong	arg01, fp
15944     DC 5A BF FD | 	call	#_convertstring
15948     A7 FA 61 FC | 	wrlong	result1, fp
1594c     08 4E 05 F1 | 	add	fp, #8
15950     A7 3E 68 FC | 	wrlong	#31, fp
15954     08 4E 85 F1 | 	sub	fp, #8
15958                 | LR__1791
15958                 | ' if t1.result_type<>result_string then print "val: "; : printerror(15) : return 
15958     08 4E 05 F1 | 	add	fp, #8
1595c     A7 16 02 FB | 	rdlong	arg03, fp
15960     08 4E 85 F1 | 	sub	fp, #8
15964     1F 16 0E F2 | 	cmp	arg03, #31 wz
15968     3C 00 90 AD |  if_e	jmp	#LR__1792
1596c     00 12 06 F6 | 	mov	arg01, #0
15970     54 0A B1 FD | 	call	#__system___getiolock_0540
15974     FD 12 02 F6 | 	mov	arg01, result1
15978     E8 AF B0 FD | 	call	#__system___lockmem
1597c     85 01 00 FF 
15980     01 15 06 F6 | 	mov	arg02, ##@LR__5526
15984     00 12 06 F6 | 	mov	arg01, #0
15988     00 16 06 F6 | 	mov	arg03, #0
1598c     C8 BC B0 FD | 	call	#__system___basic_print_string
15990     00 12 06 F6 | 	mov	arg01, #0
15994     30 0A B1 FD | 	call	#__system___getiolock_0540
15998     FD 00 68 FC | 	wrlong	#0, result1
1599c     0F 12 06 F6 | 	mov	arg01, #15
159a0     30 7A B0 FD | 	call	#_printerror
159a4     CC 01 90 FD | 	jmp	#LR__1803
159a8                 | LR__1792
159a8                 | ' if left$(t1.result.sresult,1)="$" then t1.result.sresult="&h"+right$(t1.result.sresult,len(t1.result.sresult)-1)
159a8     A7 12 02 FB | 	rdlong	arg01, fp
159ac     01 14 06 F6 | 	mov	arg02, #1
159b0     2C D0 B0 FD | 	call	#__system__Left_S
159b4     FD 12 02 F6 | 	mov	arg01, result1
159b8     85 01 00 FF 
159bc     07 15 06 F6 | 	mov	arg02, ##@LR__5527
159c0     C8 AF B0 FD | 	call	#__system___string_cmp
159c4     00 FA 0D F2 | 	cmp	result1, #0 wz
159c8     48 00 90 5D |  if_ne	jmp	#LR__1795
159cc     85 01 00 FF 
159d0     09 1F 06 F6 | 	mov	local01, ##@LR__5528
159d4     A7 16 02 FB | 	rdlong	arg03, fp
159d8     0B 13 02 F6 | 	mov	arg01, arg03
159dc     09 21 02 F6 | 	mov	local02, arg01
159e0     97 06 48 FB | 	callpa	#(@LR__1794-@LR__1793)>>2,fcache_load_ptr_
159e4                 | LR__1793
159e4     10 FB C9 FA | 	rdbyte	result1, local02 wz
159e8     01 20 06 51 |  if_ne	add	local02, #1
159ec     F4 FF 9F 5D |  if_ne	jmp	#LR__1793
159f0                 | LR__1794
159f0     09 21 82 F1 | 	sub	local02, arg01
159f4     10 15 02 F6 | 	mov	arg02, local02
159f8     01 14 86 F1 | 	sub	arg02, #1
159fc     0B 13 02 F6 | 	mov	arg01, arg03
15a00     64 D0 B0 FD | 	call	#__system__Right_S
15a04     FD 14 02 F6 | 	mov	arg02, result1
15a08     0F 13 02 F6 | 	mov	arg01, local01
15a0c     B0 AF B0 FD | 	call	#__system___string_concat
15a10     A7 FA 61 FC | 	wrlong	result1, fp
15a14                 | LR__1795
15a14                 | ' if left$(t1.result.sresult,1)="%" then t1.result.sresult="&b"+right$(t1.result.sresult,len(t1.result.sresult)-1)
15a14     A7 12 02 FB | 	rdlong	arg01, fp
15a18     01 14 06 F6 | 	mov	arg02, #1
15a1c     C0 CF B0 FD | 	call	#__system__Left_S
15a20     FD 12 02 F6 | 	mov	arg01, result1
15a24     85 01 00 FF 
15a28     0C 15 06 F6 | 	mov	arg02, ##@LR__5529
15a2c     5C AF B0 FD | 	call	#__system___string_cmp
15a30     00 FA 0D F2 | 	cmp	result1, #0 wz
15a34     48 00 90 5D |  if_ne	jmp	#LR__1798
15a38     85 01 00 FF 
15a3c     0E 1F 06 F6 | 	mov	local01, ##@LR__5530
15a40     A7 16 02 FB | 	rdlong	arg03, fp
15a44     0B 13 02 F6 | 	mov	arg01, arg03
15a48     09 21 02 F6 | 	mov	local02, arg01
15a4c     97 06 48 FB | 	callpa	#(@LR__1797-@LR__1796)>>2,fcache_load_ptr_
15a50                 | LR__1796
15a50     10 FB C9 FA | 	rdbyte	result1, local02 wz
15a54     01 20 06 51 |  if_ne	add	local02, #1
15a58     F4 FF 9F 5D |  if_ne	jmp	#LR__1796
15a5c                 | LR__1797
15a5c     09 21 82 F1 | 	sub	local02, arg01
15a60     10 15 02 F6 | 	mov	arg02, local02
15a64     01 14 86 F1 | 	sub	arg02, #1
15a68     0B 13 02 F6 | 	mov	arg01, arg03
15a6c     F8 CF B0 FD | 	call	#__system__Right_S
15a70     FD 14 02 F6 | 	mov	arg02, result1
15a74     0F 13 02 F6 | 	mov	arg01, local01
15a78     44 AF B0 FD | 	call	#__system___string_concat
15a7c     A7 FA 61 FC | 	wrlong	result1, fp
15a80                 | LR__1798
15a80     A7 12 02 FB | 	rdlong	arg01, fp
15a84     9C E2 B0 FD | 	call	#__system____builtin_atof
15a88     1C 4E 05 F1 | 	add	fp, #28
15a8c     A7 FA 61 FC | 	wrlong	result1, fp
15a90     1C 4E 85 F1 | 	sub	fp, #28
15a94     A7 12 02 FB | 	rdlong	arg01, fp
15a98     00 14 06 F6 | 	mov	arg02, #0
15a9c     F0 E0 B0 FD | 	call	#__system____builtin_atoi
15aa0     18 4E 05 F1 | 	add	fp, #24
15aa4     A7 FA 61 FC | 	wrlong	result1, fp
15aa8                 | ' fval=val(t1.result.sresult)
15aa8                 | ' ival=val%(t1.result.sresult)
15aa8                 | ' if fval=ival then
15aa8     04 4E 05 F1 | 	add	fp, #4
15aac     A7 1E 02 FB | 	rdlong	local01, fp
15ab0     1C 4E 85 F1 | 	sub	fp, #28
15ab4     FD 12 52 F6 | 	abs	arg01, result1 wc
15ab8     1F 22 C6 C9 |  if_b	decod	local03, #31
15abc     00 22 06 36 |  if_ae	mov	local03, #0
15ac0     50 D6 B0 FD | 	call	#__system___float_fromuns
15ac4     11 FB 61 F5 | 	xor	result1, local03
15ac8     FD 14 02 F6 | 	mov	arg02, result1
15acc     0F 13 02 F6 | 	mov	arg01, local01
15ad0     01 16 06 F6 | 	mov	arg03, #1
15ad4     74 DE B0 FD | 	call	#__system___float_cmp
15ad8     00 FA 0D F2 | 	cmp	result1, #0 wz
15adc     20 00 90 5D |  if_ne	jmp	#LR__1799
15ae0     18 4E 05 F1 | 	add	fp, #24
15ae4     A7 1E 02 FB | 	rdlong	local01, fp
15ae8     18 4E 85 F1 | 	sub	fp, #24
15aec     A7 1E 62 FC | 	wrlong	local01, fp
15af0     08 4E 05 F1 | 	add	fp, #8
15af4     A7 38 68 FC | 	wrlong	#28, fp
15af8     08 4E 85 F1 | 	sub	fp, #8
15afc     6C 00 90 FD | 	jmp	#LR__1802
15b00                 | LR__1799
15b00                 | '   if fval=0 andalso ival<>0 then
15b00     1C 4E 05 F1 | 	add	fp, #28
15b04     A7 12 02 FB | 	rdlong	arg01, fp
15b08     1C 4E 85 F1 | 	sub	fp, #28
15b0c     00 14 06 F6 | 	mov	arg02, #0
15b10     01 16 06 F6 | 	mov	arg03, #1
15b14     34 DE B0 FD | 	call	#__system___float_cmp
15b18     00 FA 0D F2 | 	cmp	result1, #0 wz
15b1c     30 00 90 5D |  if_ne	jmp	#LR__1800
15b20     18 4E 05 F1 | 	add	fp, #24
15b24     A7 1E 0A FB | 	rdlong	local01, fp wz
15b28     18 4E 85 F1 | 	sub	fp, #24
15b2c     20 00 90 AD |  if_e	jmp	#LR__1800
15b30     18 4E 05 F1 | 	add	fp, #24
15b34     A7 1E 02 FB | 	rdlong	local01, fp
15b38     18 4E 85 F1 | 	sub	fp, #24
15b3c     A7 1E 62 FC | 	wrlong	local01, fp
15b40     08 4E 05 F1 | 	add	fp, #8
15b44     A7 38 68 FC | 	wrlong	#28, fp
15b48     08 4E 85 F1 | 	sub	fp, #8
15b4c     1C 00 90 FD | 	jmp	#LR__1801
15b50                 | LR__1800
15b50     1C 4E 05 F1 | 	add	fp, #28
15b54     A7 1E 02 FB | 	rdlong	local01, fp
15b58     1C 4E 85 F1 | 	sub	fp, #28
15b5c     A7 1E 62 FC | 	wrlong	local01, fp
15b60     08 4E 05 F1 | 	add	fp, #8
15b64     A7 3C 68 FC | 	wrlong	#30, fp
15b68     08 4E 85 F1 | 	sub	fp, #8
15b6c                 | LR__1801
15b6c                 | LR__1802
15b6c     A7 12 02 F6 | 	mov	arg01, fp
15b70     D0 57 BF FD | 	call	#_push
15b74                 | LR__1803
15b74     A7 F0 03 F6 | 	mov	ptra, fp
15b78     B2 00 A0 FD | 	call	#popregs_
15b7c                 | _do_val_ret
15b7c     2D 00 64 FD | 	ret
15b80                 | 
15b80                 | ' 
15b80                 | ' ' ------------------ wrpin
15b80                 | ' 
15b80                 | ' sub do_wrpin
15b80                 | _do_wrpin
15b80     01 4A 05 F6 | 	mov	COUNT_, #1
15b84     A8 00 A0 FD | 	call	#pushregs_
15b88     18 F0 07 F1 | 	add	ptra, #24
15b8c     1C 57 BF FD | 	call	#_pop
15b90     FD 14 02 F6 | 	mov	arg02, result1
15b94     FE 12 02 F6 | 	mov	arg01, result2
15b98     FF 1E 02 F6 | 	mov	local01, result3
15b9c     A7 14 62 FC | 	wrlong	arg02, fp
15ba0     04 4E 05 F1 | 	add	fp, #4
15ba4     A7 12 62 FC | 	wrlong	arg01, fp
15ba8     04 4E 05 F1 | 	add	fp, #4
15bac     A7 1E 62 FC | 	wrlong	local01, fp
15bb0     08 4E 85 F1 | 	sub	fp, #8
15bb4     F4 56 BF FD | 	call	#_pop
15bb8     FF 1E 02 F6 | 	mov	local01, result3
15bbc     0C 4E 05 F1 | 	add	fp, #12
15bc0     A7 FA 61 FC | 	wrlong	result1, fp
15bc4     04 4E 05 F1 | 	add	fp, #4
15bc8     A7 FC 61 FC | 	wrlong	result2, fp
15bcc     04 4E 05 F1 | 	add	fp, #4
15bd0     A7 1E 62 FC | 	wrlong	local01, fp
15bd4     08 4E 85 F1 | 	sub	fp, #8
15bd8     A7 12 02 F6 | 	mov	arg01, fp
15bdc     0C 4E 85 F1 | 	sub	fp, #12
15be0     AC 58 BF FD | 	call	#_converttoint
15be4     FD 1E 02 F6 | 	mov	local01, result1
15be8     A7 12 02 F6 | 	mov	arg01, fp
15bec     A0 58 BF FD | 	call	#_converttoint
15bf0     0F FB 01 FC | 	wrpin	result1, local01
15bf4     A7 F0 03 F6 | 	mov	ptra, fp
15bf8     B2 00 A0 FD | 	call	#popregs_
15bfc                 | _do_wrpin_ret
15bfc     2D 00 64 FD | 	ret
15c00                 | 
15c00                 | ' 
15c00                 | ' ' ------------------ wxpin
15c00                 | ' 
15c00                 | ' sub do_wxpin
15c00                 | _do_wxpin
15c00     01 4A 05 F6 | 	mov	COUNT_, #1
15c04     A8 00 A0 FD | 	call	#pushregs_
15c08     18 F0 07 F1 | 	add	ptra, #24
15c0c     9C 56 BF FD | 	call	#_pop
15c10     FD 14 02 F6 | 	mov	arg02, result1
15c14     FE 12 02 F6 | 	mov	arg01, result2
15c18     FF 1E 02 F6 | 	mov	local01, result3
15c1c     A7 14 62 FC | 	wrlong	arg02, fp
15c20     04 4E 05 F1 | 	add	fp, #4
15c24     A7 12 62 FC | 	wrlong	arg01, fp
15c28     04 4E 05 F1 | 	add	fp, #4
15c2c     A7 1E 62 FC | 	wrlong	local01, fp
15c30     08 4E 85 F1 | 	sub	fp, #8
15c34     74 56 BF FD | 	call	#_pop
15c38     FF 1E 02 F6 | 	mov	local01, result3
15c3c     0C 4E 05 F1 | 	add	fp, #12
15c40     A7 FA 61 FC | 	wrlong	result1, fp
15c44     04 4E 05 F1 | 	add	fp, #4
15c48     A7 FC 61 FC | 	wrlong	result2, fp
15c4c     04 4E 05 F1 | 	add	fp, #4
15c50     A7 1E 62 FC | 	wrlong	local01, fp
15c54     08 4E 85 F1 | 	sub	fp, #8
15c58     A7 12 02 F6 | 	mov	arg01, fp
15c5c     0C 4E 85 F1 | 	sub	fp, #12
15c60     2C 58 BF FD | 	call	#_converttoint
15c64     FD 1E 02 F6 | 	mov	local01, result1
15c68     A7 12 02 F6 | 	mov	arg01, fp
15c6c     20 58 BF FD | 	call	#_converttoint
15c70     0F FB 11 FC | 	wxpin	result1, local01
15c74     A7 F0 03 F6 | 	mov	ptra, fp
15c78     B2 00 A0 FD | 	call	#popregs_
15c7c                 | _do_wxpin_ret
15c7c     2D 00 64 FD | 	ret
15c80                 | 
15c80                 | ' 
15c80                 | ' ' ------------------ wypin
15c80                 | ' 
15c80                 | ' sub do_wypin
15c80                 | _do_wypin
15c80     01 4A 05 F6 | 	mov	COUNT_, #1
15c84     A8 00 A0 FD | 	call	#pushregs_
15c88     18 F0 07 F1 | 	add	ptra, #24
15c8c     1C 56 BF FD | 	call	#_pop
15c90     FD 14 02 F6 | 	mov	arg02, result1
15c94     FE 12 02 F6 | 	mov	arg01, result2
15c98     FF 1E 02 F6 | 	mov	local01, result3
15c9c     A7 14 62 FC | 	wrlong	arg02, fp
15ca0     04 4E 05 F1 | 	add	fp, #4
15ca4     A7 12 62 FC | 	wrlong	arg01, fp
15ca8     04 4E 05 F1 | 	add	fp, #4
15cac     A7 1E 62 FC | 	wrlong	local01, fp
15cb0     08 4E 85 F1 | 	sub	fp, #8
15cb4     F4 55 BF FD | 	call	#_pop
15cb8     FF 1E 02 F6 | 	mov	local01, result3
15cbc     0C 4E 05 F1 | 	add	fp, #12
15cc0     A7 FA 61 FC | 	wrlong	result1, fp
15cc4     04 4E 05 F1 | 	add	fp, #4
15cc8     A7 FC 61 FC | 	wrlong	result2, fp
15ccc     04 4E 05 F1 | 	add	fp, #4
15cd0     A7 1E 62 FC | 	wrlong	local01, fp
15cd4     08 4E 85 F1 | 	sub	fp, #8
15cd8     A7 12 02 F6 | 	mov	arg01, fp
15cdc     0C 4E 85 F1 | 	sub	fp, #12
15ce0     AC 57 BF FD | 	call	#_converttoint
15ce4     FD 1E 02 F6 | 	mov	local01, result1
15ce8     A7 12 02 F6 | 	mov	arg01, fp
15cec     A0 57 BF FD | 	call	#_converttoint
15cf0     0F FB 21 FC | 	wypin	result1, local01
15cf4     A7 F0 03 F6 | 	mov	ptra, fp
15cf8     B2 00 A0 FD | 	call	#popregs_
15cfc                 | _do_wypin_ret
15cfc     2D 00 64 FD | 	ret
15d00                 | 
15d00                 | ' 
15d00                 | ' 
15d00                 | ' 
15d00                 | ' 
15d00                 | ' 
15d00                 | ' 
15d00                 | ' 
15d00                 | ' 
15d00                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
15d00                 | ' '--------------------------------------- Runtime variable processing--------------------------------------------------------------------- 
15d00                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
15d00                 | ' 
15d00                 | ' 
15d00                 | ' '------------------ Assign
15d00                 | ' 
15d00                 | ' sub do_assign
15d00                 | _do_assign
15d00     05 4A 05 F6 | 	mov	COUNT_, #5
15d04     A8 00 A0 FD | 	call	#pushregs_
15d08     44 F0 07 F1 | 	add	ptra, #68
15d0c     4A 00 00 FF 
15d10     80 E4 05 F1 | 	add	objptr, ##38016
15d14     F2 16 02 FB | 	rdlong	arg03, objptr
15d18     0B 15 02 F6 | 	mov	arg02, arg03
15d1c     01 14 66 F0 | 	shl	arg02, #1
15d20     0B 15 02 F1 | 	add	arg02, arg03
15d24     02 14 66 F0 | 	shl	arg02, #2
15d28     03 00 00 FF 
15d2c     04 E4 85 F1 | 	sub	objptr, ##1540
15d30     F2 14 02 F1 | 	add	arg02, objptr
15d34     0A 15 02 FB | 	rdlong	arg02, arg02
15d38     18 4E 05 F1 | 	add	fp, #24
15d3c     A7 14 62 FC | 	wrlong	arg02, fp
15d40                 | ' 
15d40                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
15d40                 | ' if variables(varnum).vartype<array_no_type then 
15d40     18 4E 85 F1 | 	sub	fp, #24
15d44     04 14 66 F0 | 	shl	arg02, #4
15d48     32 00 00 FF 
15d4c     84 E4 85 F1 | 	sub	objptr, ##25732
15d50     F2 14 02 F1 | 	add	arg02, objptr
15d54     0C 14 06 F1 | 	add	arg02, #12
15d58     0A 17 02 FB | 	rdlong	arg03, arg02
15d5c     00 17 16 F2 | 	cmp	arg03, #256 wc
15d60     14 00 00 FF 
15d64     F8 E5 85 F1 | 	sub	objptr, ##10744
15d68     18 01 90 3D |  if_ae	jmp	#LR__1810
15d6c     3C 55 BF FD | 	call	#_pop
15d70     A7 FA 61 FC | 	wrlong	result1, fp
15d74     04 4E 05 F1 | 	add	fp, #4
15d78     A7 FC 61 FC | 	wrlong	result2, fp
15d7c     04 4E 05 F1 | 	add	fp, #4
15d80     A7 FE 61 FC | 	wrlong	result3, fp
15d84     08 4E 85 F1 | 	sub	fp, #8
15d88     A7 16 02 FB | 	rdlong	arg03, fp
15d8c     04 4E 05 F1 | 	add	fp, #4
15d90     A7 14 02 FB | 	rdlong	arg02, fp
15d94     14 4E 05 F1 | 	add	fp, #20
15d98     A7 12 02 FB | 	rdlong	arg01, fp
15d9c     04 12 66 F0 | 	shl	arg01, #4
15da0     14 00 00 FF 
15da4     F8 E5 05 F1 | 	add	objptr, ##10744
15da8     F2 12 02 F1 | 	add	arg01, objptr
15dac     04 12 06 F1 | 	add	arg01, #4
15db0     09 17 62 FC | 	wrlong	arg03, arg01
15db4     A7 16 02 FB | 	rdlong	arg03, fp
15db8     04 16 66 F0 | 	shl	arg03, #4
15dbc     F2 16 02 F1 | 	add	arg03, objptr
15dc0     08 16 06 F1 | 	add	arg03, #8
15dc4     0B 15 62 FC | 	wrlong	arg02, arg03
15dc8     A7 16 02 FB | 	rdlong	arg03, fp
15dcc     04 16 66 F0 | 	shl	arg03, #4
15dd0     F2 16 02 F1 | 	add	arg03, objptr
15dd4     10 4E 85 F1 | 	sub	fp, #16
15dd8     A7 14 02 FB | 	rdlong	arg02, fp
15ddc     0C 16 06 F1 | 	add	arg03, #12
15de0     0B 15 62 FC | 	wrlong	arg02, arg03
15de4                 | '   t1=pop() 
15de4                 | '   variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
15de4                 | '   if variables(varnum).vartype<>result_string2 then return
15de4     10 4E 05 F1 | 	add	fp, #16
15de8     A7 16 02 FB | 	rdlong	arg03, fp
15dec     18 4E 85 F1 | 	sub	fp, #24
15df0     04 16 66 F0 | 	shl	arg03, #4
15df4     F2 16 02 F1 | 	add	arg03, objptr
15df8     0C 16 06 F1 | 	add	arg03, #12
15dfc     0B 17 02 FB | 	rdlong	arg03, arg03
15e00     2B 16 0E F2 | 	cmp	arg03, #43 wz
15e04     14 00 00 FF 
15e08     F8 E5 85 F1 | 	sub	objptr, ##10744
15e0c     E4 04 90 5D |  if_ne	jmp	#LR__1833
15e10     18 4E 05 F1 | 	add	fp, #24
15e14     A7 16 02 FB | 	rdlong	arg03, fp
15e18     0B 1F 02 F6 | 	mov	local01, arg03
15e1c     04 1E 66 F0 | 	shl	local01, #4
15e20     14 00 00 FF 
15e24     F8 E5 05 F1 | 	add	objptr, ##10744
15e28     F2 1E 02 F1 | 	add	local01, objptr
15e2c     18 4E 85 F1 | 	sub	fp, #24
15e30     04 16 66 F0 | 	shl	arg03, #4
15e34     F2 16 02 F1 | 	add	arg03, objptr
15e38     04 16 06 F1 | 	add	arg03, #4
15e3c     0B 13 02 FB | 	rdlong	arg01, arg03
15e40     14 00 00 FF 
15e44     F8 E5 85 F1 | 	sub	objptr, ##10744
15e48     D8 55 BF FD | 	call	#_convertstring
15e4c     04 1E 06 F1 | 	add	local01, #4
15e50     0F FB 61 FC | 	wrlong	result1, local01
15e54     18 4E 05 F1 | 	add	fp, #24
15e58     A7 1E 02 FB | 	rdlong	local01, fp
15e5c     18 4E 85 F1 | 	sub	fp, #24
15e60     04 1E 66 F0 | 	shl	local01, #4
15e64     14 00 00 FF 
15e68     F8 E5 05 F1 | 	add	objptr, ##10744
15e6c     F2 1E 02 F1 | 	add	local01, objptr
15e70     0C 1E 06 F1 | 	add	local01, #12
15e74     0F 3F 68 FC | 	wrlong	#31, local01
15e78                 | '   variables(varnum).value.sresult=convertstring(variables(varnum).value.uresult)
15e78                 | '   variables(varnum).vartype=result_string
15e78                 | '   return
15e78     14 00 00 FF 
15e7c     F8 E5 85 F1 | 	sub	objptr, ##10744
15e80     70 04 90 FD | 	jmp	#LR__1833
15e84                 | LR__1810
15e84                 | ' for i=0 to 2 : arrid(i)=0 : next i
15e84     1C 4E 05 F1 | 	add	fp, #28
15e88     A7 00 68 FC | 	wrlong	#0, fp
15e8c     97 16 48 FB | 	callpa	#(@LR__1812-@LR__1811)>>2,fcache_load_ptr_
15e90                 | LR__1811
15e90     A7 1E 02 FB | 	rdlong	local01, fp
15e94     02 1E 66 F0 | 	shl	local01, #2
15e98     18 4E 05 F1 | 	add	fp, #24
15e9c     A7 1E 02 F1 | 	add	local01, fp
15ea0     0F 01 68 FC | 	wrlong	#0, local01
15ea4     18 4E 85 F1 | 	sub	fp, #24
15ea8     A7 1E 02 FB | 	rdlong	local01, fp
15eac     01 1E 06 F1 | 	add	local01, #1
15eb0     A7 1E 62 FC | 	wrlong	local01, fp
15eb4     03 1E 16 F2 | 	cmp	local01, #3 wc
15eb8     D4 FF 9F CD |  if_b	jmp	#LR__1811
15ebc                 | LR__1812
15ebc     4A 00 00 FF 
15ec0     80 E4 05 F1 | 	add	objptr, ##38016
15ec4     F2 16 02 FB | 	rdlong	arg03, objptr
15ec8     0B 1F 02 F6 | 	mov	local01, arg03
15ecc     01 1E 66 F0 | 	shl	local01, #1
15ed0     0B 1F 02 F1 | 	add	local01, arg03
15ed4     02 1E 66 F0 | 	shl	local01, #2
15ed8     03 00 00 FF 
15edc     04 E4 85 F1 | 	sub	objptr, ##1540
15ee0     F2 1E 02 F1 | 	add	local01, objptr
15ee4     04 1E 06 F1 | 	add	local01, #4
15ee8     0F 21 02 FB | 	rdlong	local02, local01
15eec     04 4E 05 F1 | 	add	fp, #4
15ef0     A7 20 62 FC | 	wrlong	local02, fp
15ef4     20 4E 85 F1 | 	sub	fp, #32
15ef8     47 00 00 FF 
15efc     7C E4 85 F1 | 	sub	objptr, ##36476
15f00     A8 53 BF FD | 	call	#_pop
15f04     A7 FA 61 FC | 	wrlong	result1, fp
15f08     04 4E 05 F1 | 	add	fp, #4
15f0c     A7 FC 61 FC | 	wrlong	result2, fp
15f10     04 4E 05 F1 | 	add	fp, #4
15f14     A7 FE 61 FC | 	wrlong	result3, fp
15f18                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
15f18                 | ' t1=pop() ' var value
15f18                 | ' if numpar>0 then
15f18     18 4E 05 F1 | 	add	fp, #24
15f1c     A7 22 02 FB | 	rdlong	local03, fp
15f20     20 4E 85 F1 | 	sub	fp, #32
15f24     01 22 16 F2 | 	cmp	local03, #1 wc
15f28     78 00 90 CD |  if_b	jmp	#LR__1815
15f2c                 | '   for i=numpar to 1 step -1
15f2c     20 4E 05 F1 | 	add	fp, #32
15f30     A7 24 0A FB | 	rdlong	local04, fp wz
15f34     04 4E 85 F1 | 	sub	fp, #4
15f38     A7 24 62 FC | 	wrlong	local04, fp
15f3c     1C 4E 85 F1 | 	sub	fp, #28
15f40     60 00 90 AD |  if_e	jmp	#LR__1814
15f44                 | LR__1813
15f44     64 53 BF FD | 	call	#_pop
15f48     0C 4E 05 F1 | 	add	fp, #12
15f4c     A7 FA 61 FC | 	wrlong	result1, fp
15f50     04 4E 05 F1 | 	add	fp, #4
15f54     A7 FC 61 FC | 	wrlong	result2, fp
15f58     04 4E 05 F1 | 	add	fp, #4
15f5c     A7 FE 61 FC | 	wrlong	result3, fp
15f60     08 4E 05 F1 | 	add	fp, #8
15f64     A7 22 02 FB | 	rdlong	local03, fp
15f68     01 22 86 F1 | 	sub	local03, #1
15f6c     02 22 66 F0 | 	shl	local03, #2
15f70     18 4E 05 F1 | 	add	fp, #24
15f74     A7 22 02 F1 | 	add	local03, fp
15f78     28 4E 85 F1 | 	sub	fp, #40
15f7c     A7 12 02 F6 | 	mov	arg01, fp
15f80     0C 4E 85 F1 | 	sub	fp, #12
15f84     08 55 BF FD | 	call	#_converttoint
15f88     11 FB 61 FC | 	wrlong	result1, local03
15f8c     1C 4E 05 F1 | 	add	fp, #28
15f90     A7 24 02 FB | 	rdlong	local04, fp
15f94     01 24 8E F1 | 	sub	local04, #1 wz
15f98     A7 24 62 FC | 	wrlong	local04, fp
15f9c     1C 4E 85 F1 | 	sub	fp, #28
15fa0     A0 FF 9F 5D |  if_ne	jmp	#LR__1813
15fa4                 | LR__1814
15fa4                 | LR__1815
15fa4     18 4E 05 F1 | 	add	fp, #24
15fa8     A7 1E 02 FB | 	rdlong	local01, fp
15fac     04 1E 66 F0 | 	shl	local01, #4
15fb0     14 00 00 FF 
15fb4     F8 E5 05 F1 | 	add	objptr, ##10744
15fb8     F2 1E 02 F1 | 	add	local01, objptr
15fbc     04 1E 06 F1 | 	add	local01, #4
15fc0     0F 13 02 FB | 	rdlong	arg01, local01
15fc4     0C 4E 05 F1 | 	add	fp, #12
15fc8     A7 12 62 FC | 	wrlong	arg01, fp
15fcc     24 4E 85 F1 | 	sub	fp, #36
15fd0     14 00 00 FF 
15fd4     F8 E5 85 F1 | 	sub	objptr, ##10744
15fd8     8C 76 B0 FD | 	call	#_pslpeek
15fdc     FD 24 32 F9 | 	getword	local04, result1, #0
15fe0     28 4E 05 F1 | 	add	fp, #40
15fe4     A7 24 62 FC | 	wrlong	local04, fp
15fe8     04 4E 85 F1 | 	sub	fp, #4
15fec     A7 12 02 FB | 	rdlong	arg01, fp
15ff0     24 4E 85 F1 | 	sub	fp, #36
15ff4     02 12 06 F1 | 	add	arg01, #2
15ff8     14 76 B0 FD | 	call	#_pspeek
15ffc     FD FA E1 F8 | 	getbyte	result1, result1, #0
16000     2C 4E 05 F1 | 	add	fp, #44
16004     A7 FA 61 FC | 	wrlong	result1, fp
16008                 | ' esize=pspeek(arrptr+2)
16008                 | ' if arrid(0)>=pslpeek(arrptr+4) orelse arrid(1)>=pslpeek(arrptr+8) orelse arrid(2)>=pslpeek(arrptr+12) then printerror(49) : return
16008     08 4E 85 F1 | 	sub	fp, #8
1600c     A7 12 02 FB | 	rdlong	arg01, fp
16010     24 4E 85 F1 | 	sub	fp, #36
16014     04 12 06 F1 | 	add	arg01, #4
16018     4C 76 B0 FD | 	call	#_pslpeek
1601c     FD 24 02 F6 | 	mov	local04, result1
16020     34 4E 05 F1 | 	add	fp, #52
16024     A7 1E 02 FB | 	rdlong	local01, fp
16028     34 4E 85 F1 | 	sub	fp, #52
1602c     12 1F 12 F2 | 	cmp	local01, local04 wc
16030     54 00 90 3D |  if_ae	jmp	#LR__1816
16034     24 4E 05 F1 | 	add	fp, #36
16038     A7 12 02 FB | 	rdlong	arg01, fp
1603c     24 4E 85 F1 | 	sub	fp, #36
16040     08 12 06 F1 | 	add	arg01, #8
16044     20 76 B0 FD | 	call	#_pslpeek
16048     FD 1E 02 F6 | 	mov	local01, result1
1604c     38 4E 05 F1 | 	add	fp, #56
16050     A7 24 02 FB | 	rdlong	local04, fp
16054     38 4E 85 F1 | 	sub	fp, #56
16058     0F 25 12 F2 | 	cmp	local04, local01 wc
1605c     28 00 90 3D |  if_ae	jmp	#LR__1816
16060     24 4E 05 F1 | 	add	fp, #36
16064     A7 12 02 FB | 	rdlong	arg01, fp
16068     24 4E 85 F1 | 	sub	fp, #36
1606c     0C 12 06 F1 | 	add	arg01, #12
16070     F4 75 B0 FD | 	call	#_pslpeek
16074     3C 4E 05 F1 | 	add	fp, #60
16078     A7 24 02 FB | 	rdlong	local04, fp
1607c     3C 4E 85 F1 | 	sub	fp, #60
16080     FD 24 12 F2 | 	cmp	local04, result1 wc
16084     0C 00 90 CD |  if_b	jmp	#LR__1817
16088                 | LR__1816
16088     31 12 06 F6 | 	mov	arg01, #49
1608c     44 73 B0 FD | 	call	#_printerror
16090     60 02 90 FD | 	jmp	#LR__1833
16094                 | LR__1817
16094     24 4E 05 F1 | 	add	fp, #36
16098     A7 12 02 FB | 	rdlong	arg01, fp
1609c     09 25 02 F6 | 	mov	local04, arg01
160a0     10 24 06 F1 | 	add	local04, #16
160a4     24 4E 85 F1 | 	sub	fp, #36
160a8     04 12 06 F1 | 	add	arg01, #4
160ac     B8 75 B0 FD | 	call	#_pslpeek
160b0     FD 1E 02 F6 | 	mov	local01, result1
160b4     38 4E 05 F1 | 	add	fp, #56
160b8     A7 20 02 FB | 	rdlong	local02, fp
160bc     10 1F 02 FD | 	qmul	local01, local02
160c0     04 4E 85 F1 | 	sub	fp, #4
160c4     A7 22 02 FB | 	rdlong	local03, fp
160c8     10 4E 85 F1 | 	sub	fp, #16
160cc     A7 12 02 FB | 	rdlong	arg01, fp
160d0     24 4E 85 F1 | 	sub	fp, #36
160d4     08 12 06 F1 | 	add	arg01, #8
160d8     18 20 62 FD | 	getqx	local02
160dc     10 23 02 F1 | 	add	local03, local02
160e0     84 75 B0 FD | 	call	#_pslpeek
160e4     FD 20 02 F6 | 	mov	local02, result1
160e8     24 4E 05 F1 | 	add	fp, #36
160ec     A7 12 02 FB | 	rdlong	arg01, fp
160f0     24 4E 85 F1 | 	sub	fp, #36
160f4     04 12 06 F1 | 	add	arg01, #4
160f8     6C 75 B0 FD | 	call	#_pslpeek
160fc     FD 20 02 FD | 	qmul	local02, result1
16100     3C 4E 05 F1 | 	add	fp, #60
16104     A7 20 02 FB | 	rdlong	local02, fp
16108     18 1E 62 FD | 	getqx	local01
1610c     10 1F 02 FD | 	qmul	local01, local02
16110     10 4E 85 F1 | 	sub	fp, #16
16114     A7 20 02 FB | 	rdlong	local02, fp
16118     18 1E 62 FD | 	getqx	local01
1611c     0F 23 02 F1 | 	add	local03, local01
16120     11 21 02 FD | 	qmul	local02, local03
16124     04 4E 05 F1 | 	add	fp, #4
16128                 | ' 
16128                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
16128                 | ' select case arrtype
16128     18 22 62 FD | 	getqx	local03
1612c     11 25 02 F1 | 	add	local04, local03
16130     A7 24 62 FC | 	wrlong	local04, fp
16134     08 4E 85 F1 | 	sub	fp, #8
16138     A7 26 02 FB | 	rdlong	local05, fp
1613c     28 4E 85 F1 | 	sub	fp, #40
16140     00 27 86 F1 | 	sub	local05, #256
16144     0C 26 26 F3 | 	fle	local05, #12
16148     30 26 62 FD | 	jmprel	local05
1614c                 | LR__1818
1614c     30 00 90 FD | 	jmp	#LR__1819
16150     58 00 90 FD | 	jmp	#LR__1820
16154     6C 00 90 FD | 	jmp	#LR__1821
16158     80 00 90 FD | 	jmp	#LR__1822
1615c     B0 00 90 FD | 	jmp	#LR__1823
16160     E0 00 90 FD | 	jmp	#LR__1824
16164     F4 00 90 FD | 	jmp	#LR__1825
16168     08 01 90 FD | 	jmp	#LR__1826
1616c     1C 01 90 FD | 	jmp	#LR__1827
16170     30 01 90 FD | 	jmp	#LR__1828
16174     44 01 90 FD | 	jmp	#LR__1829
16178     58 01 90 FD | 	jmp	#LR__1830
1617c     6C 01 90 FD | 	jmp	#LR__1831
16180                 | LR__1819
16180     A7 12 02 F6 | 	mov	arg01, fp
16184     30 4E 05 F1 | 	add	fp, #48
16188     A7 14 02 FB | 	rdlong	arg02, fp
1618c     30 4E 85 F1 | 	sub	fp, #48
16190     0C 16 06 F6 | 	mov	arg03, #12
16194     0B 00 00 FF 
16198     CC E4 05 F1 | 	add	objptr, ##5836
1619c     20 9C B0 FD | 	call	#_psram_spin2_write
161a0     0B 00 00 FF 
161a4     CC E4 85 F1 | 	sub	objptr, ##5836
161a8     48 01 90 FD | 	jmp	#LR__1832
161ac                 | LR__1820
161ac     30 4E 05 F1 | 	add	fp, #48
161b0     A7 12 02 FB | 	rdlong	arg01, fp
161b4     30 4E 85 F1 | 	sub	fp, #48
161b8     A7 14 02 FB | 	rdlong	arg02, fp
161bc     08 74 B0 FD | 	call	#_pspoke
161c0     30 01 90 FD | 	jmp	#LR__1832
161c4                 | LR__1821
161c4     30 4E 05 F1 | 	add	fp, #48
161c8     A7 12 02 FB | 	rdlong	arg01, fp
161cc     30 4E 85 F1 | 	sub	fp, #48
161d0     A7 14 02 FB | 	rdlong	arg02, fp
161d4     F0 73 B0 FD | 	call	#_pspoke
161d8     18 01 90 FD | 	jmp	#LR__1832
161dc                 | LR__1822
161dc     30 4E 05 F1 | 	add	fp, #48
161e0     A7 12 02 FB | 	rdlong	arg01, fp
161e4     30 4E 85 F1 | 	sub	fp, #48
161e8     A7 14 02 FB | 	rdlong	arg02, fp
161ec     D8 73 B0 FD | 	call	#_pspoke
161f0     30 4E 05 F1 | 	add	fp, #48
161f4     A7 12 02 FB | 	rdlong	arg01, fp
161f8     30 4E 85 F1 | 	sub	fp, #48
161fc     01 12 06 F1 | 	add	arg01, #1
16200     A7 14 02 FB | 	rdlong	arg02, fp
16204     08 14 46 F0 | 	shr	arg02, #8
16208     BC 73 B0 FD | 	call	#_pspoke
1620c     E4 00 90 FD | 	jmp	#LR__1832
16210                 | LR__1823
16210     30 4E 05 F1 | 	add	fp, #48
16214     A7 12 02 FB | 	rdlong	arg01, fp
16218     30 4E 85 F1 | 	sub	fp, #48
1621c     A7 14 02 FB | 	rdlong	arg02, fp
16220     A4 73 B0 FD | 	call	#_pspoke
16224     30 4E 05 F1 | 	add	fp, #48
16228     A7 12 02 FB | 	rdlong	arg01, fp
1622c     30 4E 85 F1 | 	sub	fp, #48
16230     01 12 06 F1 | 	add	arg01, #1
16234     A7 14 02 FB | 	rdlong	arg02, fp
16238     08 14 46 F0 | 	shr	arg02, #8
1623c     88 73 B0 FD | 	call	#_pspoke
16240     B0 00 90 FD | 	jmp	#LR__1832
16244                 | LR__1824
16244     30 4E 05 F1 | 	add	fp, #48
16248     A7 12 02 FB | 	rdlong	arg01, fp
1624c     30 4E 85 F1 | 	sub	fp, #48
16250     A7 14 02 FB | 	rdlong	arg02, fp
16254     E0 72 B0 FD | 	call	#_pslpoke
16258     98 00 90 FD | 	jmp	#LR__1832
1625c                 | LR__1825
1625c     30 4E 05 F1 | 	add	fp, #48
16260     A7 12 02 FB | 	rdlong	arg01, fp
16264     30 4E 85 F1 | 	sub	fp, #48
16268     A7 14 02 FB | 	rdlong	arg02, fp
1626c     C8 72 B0 FD | 	call	#_pslpoke
16270     80 00 90 FD | 	jmp	#LR__1832
16274                 | LR__1826
16274     30 4E 05 F1 | 	add	fp, #48
16278     A7 12 02 FB | 	rdlong	arg01, fp
1627c     30 4E 85 F1 | 	sub	fp, #48
16280     A7 14 02 FB | 	rdlong	arg02, fp
16284     B0 72 B0 FD | 	call	#_pslpoke
16288     68 00 90 FD | 	jmp	#LR__1832
1628c                 | LR__1827
1628c     30 4E 05 F1 | 	add	fp, #48
16290     A7 12 02 FB | 	rdlong	arg01, fp
16294     30 4E 85 F1 | 	sub	fp, #48
16298     A7 14 02 FB | 	rdlong	arg02, fp
1629c     98 72 B0 FD | 	call	#_pslpoke
162a0     50 00 90 FD | 	jmp	#LR__1832
162a4                 | LR__1828
162a4     30 4E 05 F1 | 	add	fp, #48
162a8     A7 12 02 FB | 	rdlong	arg01, fp
162ac     30 4E 85 F1 | 	sub	fp, #48
162b0     A7 14 02 FB | 	rdlong	arg02, fp
162b4     80 72 B0 FD | 	call	#_pslpoke
162b8     38 00 90 FD | 	jmp	#LR__1832
162bc                 | LR__1829
162bc     30 4E 05 F1 | 	add	fp, #48
162c0     A7 12 02 FB | 	rdlong	arg01, fp
162c4     30 4E 85 F1 | 	sub	fp, #48
162c8     A7 14 02 FB | 	rdlong	arg02, fp
162cc     68 72 B0 FD | 	call	#_pslpoke
162d0     20 00 90 FD | 	jmp	#LR__1832
162d4                 | LR__1830
162d4     30 4E 05 F1 | 	add	fp, #48
162d8     A7 12 02 FB | 	rdlong	arg01, fp
162dc     30 4E 85 F1 | 	sub	fp, #48
162e0     A7 14 02 FB | 	rdlong	arg02, fp
162e4     50 72 B0 FD | 	call	#_pslpoke
162e8     08 00 90 FD | 	jmp	#LR__1832
162ec                 | LR__1831
162ec     32 12 06 F6 | 	mov	arg01, #50
162f0     E0 70 B0 FD | 	call	#_printerror
162f4                 | LR__1832
162f4                 | LR__1833
162f4     A7 F0 03 F6 | 	mov	ptra, fp
162f8     B2 00 A0 FD | 	call	#popregs_
162fc                 | _do_assign_ret
162fc     2D 00 64 FD | 	ret
16300                 | 
16300                 | ' 
16300                 | ' 
16300                 | ' '------------------ getvar.  Read a variable and push it to the RPN stack
16300                 | ' 
16300                 | ' sub do_getvar
16300                 | _do_getvar
16300     04 4A 05 F6 | 	mov	COUNT_, #4
16304     A8 00 A0 FD | 	call	#pushregs_
16308     3C F0 07 F1 | 	add	ptra, #60
1630c                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
1630c     4A 00 00 FF 
16310     80 E4 05 F1 | 	add	objptr, ##38016
16314     F2 1E 02 FB | 	rdlong	local01, objptr
16318     0F 17 02 F6 | 	mov	arg03, local01
1631c     01 16 66 F0 | 	shl	arg03, #1
16320     0F 17 02 F1 | 	add	arg03, local01
16324     02 16 66 F0 | 	shl	arg03, #2
16328     03 00 00 FF 
1632c     04 E4 85 F1 | 	sub	objptr, ##1540
16330     F2 16 02 F1 | 	add	arg03, objptr
16334     04 16 06 F1 | 	add	arg03, #4
16338     0B 17 0A FB | 	rdlong	arg03, arg03 wz
1633c     47 00 00 FF 
16340     7C E4 85 F1 | 	sub	objptr, ##36476
16344     C4 00 90 5D |  if_ne	jmp	#LR__1841
16348     4A 00 00 FF 
1634c     80 E4 05 F1 | 	add	objptr, ##38016
16350     F2 1E 02 FB | 	rdlong	local01, objptr
16354     0F 13 02 F6 | 	mov	arg01, local01
16358     01 12 66 F0 | 	shl	arg01, #1
1635c     0F 13 02 F1 | 	add	arg01, local01
16360     02 12 66 F0 | 	shl	arg01, #2
16364     03 00 00 FF 
16368     04 E4 85 F1 | 	sub	objptr, ##1540
1636c     F2 12 02 F1 | 	add	arg01, objptr
16370     09 1F 02 FB | 	rdlong	local01, arg01
16374     04 1E 66 F0 | 	shl	local01, #4
16378     32 00 00 FF 
1637c     84 E4 85 F1 | 	sub	objptr, ##25732
16380     F2 1E 02 F1 | 	add	local01, objptr
16384     04 1E 06 F1 | 	add	local01, #4
16388     0F 13 02 FB | 	rdlong	arg01, local01
1638c     04 1E 06 F1 | 	add	local01, #4
16390     0F 1F 02 FB | 	rdlong	local01, local01
16394     A7 12 62 FC | 	wrlong	arg01, fp
16398     04 4E 05 F1 | 	add	fp, #4
1639c     A7 1E 62 FC | 	wrlong	local01, fp
163a0     35 00 00 FF 
163a4     88 E4 05 F1 | 	add	objptr, ##27272
163a8     F2 1E 02 FB | 	rdlong	local01, objptr
163ac     0F 13 02 F6 | 	mov	arg01, local01
163b0     01 12 66 F0 | 	shl	arg01, #1
163b4     0F 13 02 F1 | 	add	arg01, local01
163b8     02 12 66 F0 | 	shl	arg01, #2
163bc     03 00 00 FF 
163c0     04 E4 85 F1 | 	sub	objptr, ##1540
163c4     F2 12 02 F1 | 	add	arg01, objptr
163c8     09 1F 02 FB | 	rdlong	local01, arg01
163cc     04 1E 66 F0 | 	shl	local01, #4
163d0     32 00 00 FF 
163d4     84 E4 85 F1 | 	sub	objptr, ##25732
163d8     F2 1E 02 F1 | 	add	local01, objptr
163dc     0C 1E 06 F1 | 	add	local01, #12
163e0     0F 1F 02 FB | 	rdlong	local01, local01
163e4     04 4E 05 F1 | 	add	fp, #4
163e8     A7 1E 62 FC | 	wrlong	local01, fp
163ec                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
163ec                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
163ec                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
163ec     08 4E 85 F1 | 	sub	fp, #8
163f0     00 1F 16 F2 | 	cmp	local01, #256 wc
163f4     14 00 00 FF 
163f8     F8 E5 85 F1 | 	sub	objptr, ##10744
163fc     0C 00 90 3D |  if_ae	jmp	#LR__1840
16400     A7 12 02 F6 | 	mov	arg01, fp
16404     3C 4F BF FD | 	call	#_push
16408     A0 04 90 FD | 	jmp	#LR__1862
1640c                 | LR__1840
1640c                 | LR__1841
1640c     4A 00 00 FF 
16410     80 E4 05 F1 | 	add	objptr, ##38016
16414     F2 16 02 FB | 	rdlong	arg03, objptr
16418     0B 15 02 F6 | 	mov	arg02, arg03
1641c     01 14 66 F0 | 	shl	arg02, #1
16420     0B 15 02 F1 | 	add	arg02, arg03
16424     02 14 66 F0 | 	shl	arg02, #2
16428     03 00 00 FF 
1642c     04 E4 85 F1 | 	sub	objptr, ##1540
16430     F2 14 02 F1 | 	add	arg02, objptr
16434     0A 17 02 FB | 	rdlong	arg03, arg02
16438     04 16 66 F0 | 	shl	arg03, #4
1643c     32 00 00 FF 
16440     84 E4 85 F1 | 	sub	objptr, ##25732
16444     F2 16 02 F1 | 	add	arg03, objptr
16448     04 16 06 F1 | 	add	arg03, #4
1644c     0B 13 02 FB | 	rdlong	arg01, arg03
16450     0C 4E 05 F1 | 	add	fp, #12
16454     A7 12 62 FC | 	wrlong	arg01, fp
16458     0C 4E 85 F1 | 	sub	fp, #12
1645c     14 00 00 FF 
16460     F8 E5 85 F1 | 	sub	objptr, ##10744
16464     00 72 B0 FD | 	call	#_pslpeek
16468     FD FA 31 F9 | 	getword	result1, result1, #0
1646c     10 4E 05 F1 | 	add	fp, #16
16470     A7 FA 61 FC | 	wrlong	result1, fp
16474     4A 00 00 FF 
16478     80 E4 05 F1 | 	add	objptr, ##38016
1647c     F2 16 02 FB | 	rdlong	arg03, objptr
16480     0B 15 02 F6 | 	mov	arg02, arg03
16484     01 14 66 F0 | 	shl	arg02, #1
16488     0B 15 02 F1 | 	add	arg02, arg03
1648c     02 14 66 F0 | 	shl	arg02, #2
16490     03 00 00 FF 
16494     04 E4 85 F1 | 	sub	objptr, ##1540
16498     F2 14 02 F1 | 	add	arg02, objptr
1649c     04 14 06 F1 | 	add	arg02, #4
164a0     0A 17 02 FB | 	rdlong	arg03, arg02
164a4     04 4E 05 F1 | 	add	fp, #4
164a8     A7 16 62 FC | 	wrlong	arg03, fp
164ac     08 4E 85 F1 | 	sub	fp, #8
164b0     A7 12 02 FB | 	rdlong	arg01, fp
164b4     0C 4E 85 F1 | 	sub	fp, #12
164b8     02 12 06 F1 | 	add	arg01, #2
164bc     47 00 00 FF 
164c0     7C E4 85 F1 | 	sub	objptr, ##36476
164c4     48 71 B0 FD | 	call	#_pspeek
164c8     FD FA E1 F8 | 	getbyte	result1, result1, #0
164cc     18 4E 05 F1 | 	add	fp, #24
164d0     A7 FA 61 FC | 	wrlong	result1, fp
164d4     0C 4E 85 F1 | 	sub	fp, #12
164d8     A7 12 02 FB | 	rdlong	arg01, fp
164dc     0C 4E 85 F1 | 	sub	fp, #12
164e0     04 12 06 F1 | 	add	arg01, #4
164e4     80 71 B0 FD | 	call	#_pslpeek
164e8     1C 4E 05 F1 | 	add	fp, #28
164ec     A7 FA 61 FC | 	wrlong	result1, fp
164f0     10 4E 85 F1 | 	sub	fp, #16
164f4     A7 12 02 FB | 	rdlong	arg01, fp
164f8     0C 4E 85 F1 | 	sub	fp, #12
164fc     08 12 06 F1 | 	add	arg01, #8
16500     64 71 B0 FD | 	call	#_pslpeek
16504     20 4E 05 F1 | 	add	fp, #32
16508     A7 FA 61 FC | 	wrlong	result1, fp
1650c     14 4E 85 F1 | 	sub	fp, #20
16510     A7 12 02 FB | 	rdlong	arg01, fp
16514     0C 4E 85 F1 | 	sub	fp, #12
16518     0C 12 06 F1 | 	add	arg01, #12
1651c     48 71 B0 FD | 	call	#_pslpeek
16520     24 4E 05 F1 | 	add	fp, #36
16524     A7 FA 61 FC | 	wrlong	result1, fp
16528                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
16528                 | ' esize=pspeek(arrptr+2)
16528                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
16528                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
16528                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
16528                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
16528     10 4E 85 F1 | 	sub	fp, #16
1652c     A7 16 02 FB | 	rdlong	arg03, fp
16530     14 4E 85 F1 | 	sub	fp, #20
16534     03 16 16 F2 | 	cmp	arg03, #3 wc
16538     38 00 90 CD |  if_b	jmp	#LR__1842
1653c     6C 4D BF FD | 	call	#_pop
16540     FF 16 02 F6 | 	mov	arg03, result3
16544     A7 FA 61 FC | 	wrlong	result1, fp
16548     04 4E 05 F1 | 	add	fp, #4
1654c     A7 FC 61 FC | 	wrlong	result2, fp
16550     04 4E 05 F1 | 	add	fp, #4
16554     A7 16 62 FC | 	wrlong	arg03, fp
16558     08 4E 85 F1 | 	sub	fp, #8
1655c     A7 12 02 F6 | 	mov	arg01, fp
16560     2C 4F BF FD | 	call	#_converttoint
16564     30 4E 05 F1 | 	add	fp, #48
16568     A7 FA 61 FC | 	wrlong	result1, fp
1656c     30 4E 85 F1 | 	sub	fp, #48
16570     0C 00 90 FD | 	jmp	#LR__1843
16574                 | LR__1842
16574     30 4E 05 F1 | 	add	fp, #48
16578     A7 00 68 FC | 	wrlong	#0, fp
1657c     30 4E 85 F1 | 	sub	fp, #48
16580                 | LR__1843
16580                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
16580     14 4E 05 F1 | 	add	fp, #20
16584     A7 16 02 FB | 	rdlong	arg03, fp
16588     14 4E 85 F1 | 	sub	fp, #20
1658c     02 16 16 F2 | 	cmp	arg03, #2 wc
16590     38 00 90 CD |  if_b	jmp	#LR__1844
16594     14 4D BF FD | 	call	#_pop
16598     FF 16 02 F6 | 	mov	arg03, result3
1659c     A7 FA 61 FC | 	wrlong	result1, fp
165a0     04 4E 05 F1 | 	add	fp, #4
165a4     A7 FC 61 FC | 	wrlong	result2, fp
165a8     04 4E 05 F1 | 	add	fp, #4
165ac     A7 16 62 FC | 	wrlong	arg03, fp
165b0     08 4E 85 F1 | 	sub	fp, #8
165b4     A7 12 02 F6 | 	mov	arg01, fp
165b8     D4 4E BF FD | 	call	#_converttoint
165bc     2C 4E 05 F1 | 	add	fp, #44
165c0     A7 FA 61 FC | 	wrlong	result1, fp
165c4     2C 4E 85 F1 | 	sub	fp, #44
165c8     0C 00 90 FD | 	jmp	#LR__1845
165cc                 | LR__1844
165cc     2C 4E 05 F1 | 	add	fp, #44
165d0     A7 00 68 FC | 	wrlong	#0, fp
165d4     2C 4E 85 F1 | 	sub	fp, #44
165d8                 | LR__1845
165d8                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
165d8     14 4E 05 F1 | 	add	fp, #20
165dc     A7 16 02 FB | 	rdlong	arg03, fp
165e0     14 4E 85 F1 | 	sub	fp, #20
165e4     01 16 16 F2 | 	cmp	arg03, #1 wc
165e8     38 00 90 CD |  if_b	jmp	#LR__1846
165ec     BC 4C BF FD | 	call	#_pop
165f0     FF 16 02 F6 | 	mov	arg03, result3
165f4     A7 FA 61 FC | 	wrlong	result1, fp
165f8     04 4E 05 F1 | 	add	fp, #4
165fc     A7 FC 61 FC | 	wrlong	result2, fp
16600     04 4E 05 F1 | 	add	fp, #4
16604     A7 16 62 FC | 	wrlong	arg03, fp
16608     08 4E 85 F1 | 	sub	fp, #8
1660c     A7 12 02 F6 | 	mov	arg01, fp
16610     7C 4E BF FD | 	call	#_converttoint
16614     28 4E 05 F1 | 	add	fp, #40
16618     A7 FA 61 FC | 	wrlong	result1, fp
1661c     28 4E 85 F1 | 	sub	fp, #40
16620     0C 00 90 FD | 	jmp	#LR__1847
16624                 | LR__1846
16624     28 4E 05 F1 | 	add	fp, #40
16628     A7 00 68 FC | 	wrlong	#0, fp
1662c     28 4E 85 F1 | 	sub	fp, #40
16630                 | LR__1847
16630     0C 4E 05 F1 | 	add	fp, #12
16634     A7 20 02 FB | 	rdlong	local02, fp
16638     1C 4E 05 F1 | 	add	fp, #28
1663c     A7 22 02 FB | 	rdlong	local03, fp
16640     04 4E 05 F1 | 	add	fp, #4
16644     A7 FC 01 FB | 	rdlong	result2, fp
16648     10 4E 85 F1 | 	sub	fp, #16
1664c     A7 FE 01 FB | 	rdlong	result3, fp
16650     FF FC 01 FD | 	qmul	result2, result3
16654     10 20 06 F1 | 	add	local02, #16
16658     14 4E 05 F1 | 	add	fp, #20
1665c     A7 FC 01 FB | 	rdlong	result2, fp
16660     18 FA 61 FD | 	getqx	result1
16664     FF FC 01 FD | 	qmul	result2, result3
16668     FD 22 02 F1 | 	add	local03, result1
1666c     10 4E 85 F1 | 	sub	fp, #16
16670     A7 FE 01 FB | 	rdlong	result3, fp
16674     18 FC 61 FD | 	getqx	result2
16678     FF FC 01 FD | 	qmul	result2, result3
1667c     08 4E 85 F1 | 	sub	fp, #8
16680     A7 FE 01 FB | 	rdlong	result3, fp
16684     18 FC 61 FD | 	getqx	result2
16688     FE 22 02 F1 | 	add	local03, result2
1668c     FF 22 02 FD | 	qmul	local03, result3
16690     1C 4E 05 F1 | 	add	fp, #28
16694                 | ' 
16694                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize 
16694                 | ' 
16694                 | ' select case vartype
16694     18 FC 61 FD | 	getqx	result2
16698     FE 20 02 F1 | 	add	local02, result2
1669c     A7 20 62 FC | 	wrlong	local02, fp
166a0     24 4E 85 F1 | 	sub	fp, #36
166a4     A7 24 02 FB | 	rdlong	local04, fp
166a8     10 4E 85 F1 | 	sub	fp, #16
166ac     00 25 86 F1 | 	sub	local04, #256
166b0     0C 24 26 F3 | 	fle	local04, #12
166b4     30 24 62 FD | 	jmprel	local04
166b8                 | LR__1848
166b8     30 00 90 FD | 	jmp	#LR__1849
166bc     58 00 90 FD | 	jmp	#LR__1850
166c0     8C 00 90 FD | 	jmp	#LR__1851
166c4     AC 00 90 FD | 	jmp	#LR__1852
166c8     E8 00 90 FD | 	jmp	#LR__1853
166cc     08 01 90 FD | 	jmp	#LR__1854
166d0     24 01 90 FD | 	jmp	#LR__1855
166d4     40 01 90 FD | 	jmp	#LR__1856
166d8     50 01 90 FD | 	jmp	#LR__1857
166dc     60 01 90 FD | 	jmp	#LR__1858
166e0     7C 01 90 FD | 	jmp	#LR__1859
166e4     8C 01 90 FD | 	jmp	#LR__1860
166e8     B8 01 90 FD | 	jmp	#LR__1861
166ec                 | LR__1849
166ec     A7 12 02 F6 | 	mov	arg01, fp
166f0     34 4E 05 F1 | 	add	fp, #52
166f4     A7 14 02 FB | 	rdlong	arg02, fp
166f8     34 4E 85 F1 | 	sub	fp, #52
166fc     0C 16 06 F6 | 	mov	arg03, #12
16700     0B 00 00 FF 
16704     CC E4 05 F1 | 	add	objptr, ##5836
16708     18 96 B0 FD | 	call	#_psram_spin2_read1
1670c     0B 00 00 FF 
16710     CC E4 85 F1 | 	sub	objptr, ##5836
16714     8C 01 90 FD | 	jmp	#LR__1861
16718                 | LR__1850
16718     08 4E 05 F1 | 	add	fp, #8
1671c     A7 38 68 FC | 	wrlong	#28, fp
16720     2C 4E 05 F1 | 	add	fp, #44
16724     A7 12 02 FB | 	rdlong	arg01, fp
16728     34 4E 85 F1 | 	sub	fp, #52
1672c     E0 6E B0 FD | 	call	#_pspeek
16730     FD FA E1 F8 | 	getbyte	result1, result1, #0
16734     A7 FA 61 FC | 	wrlong	result1, fp
16738     80 FA 15 F2 | 	cmp	result1, #128 wc
1673c     00 1F 66 36 |  if_ae	neg	local01, #256
16740     A7 22 02 3B |  if_ae	rdlong	local03, fp
16744     11 1F 42 35 |  if_ae	or	local01, local03
16748     A7 1E 62 3C |  if_ae	wrlong	local01, fp
1674c     54 01 90 FD | 	jmp	#LR__1861
16750                 | LR__1851
16750     08 4E 05 F1 | 	add	fp, #8
16754     A7 3A 68 FC | 	wrlong	#29, fp
16758     2C 4E 05 F1 | 	add	fp, #44
1675c     A7 12 02 FB | 	rdlong	arg01, fp
16760     34 4E 85 F1 | 	sub	fp, #52
16764     A8 6E B0 FD | 	call	#_pspeek
16768     FD FA E1 F8 | 	getbyte	result1, result1, #0
1676c     A7 FA 61 FC | 	wrlong	result1, fp
16770     30 01 90 FD | 	jmp	#LR__1861
16774                 | LR__1852
16774     08 4E 05 F1 | 	add	fp, #8
16778     A7 38 68 FC | 	wrlong	#28, fp
1677c     2C 4E 05 F1 | 	add	fp, #44
16780     A7 12 02 FB | 	rdlong	arg01, fp
16784     34 4E 85 F1 | 	sub	fp, #52
16788     DC 6E B0 FD | 	call	#_pslpeek
1678c     FD FA 31 F9 | 	getword	result1, result1, #0
16790     A7 FA 61 FC | 	wrlong	result1, fp
16794     40 00 00 FF 
16798     00 FA 15 F2 | 	cmp	result1, ##32768 wc
1679c     FF 7F 00 3F 
167a0     00 1F 06 36 |  if_ae	mov	local01, ##16776960
167a4     A7 22 02 3B |  if_ae	rdlong	local03, fp
167a8     11 1F 42 35 |  if_ae	or	local01, local03
167ac     A7 1E 62 3C |  if_ae	wrlong	local01, fp
167b0     F0 00 90 FD | 	jmp	#LR__1861
167b4                 | LR__1853
167b4     08 4E 05 F1 | 	add	fp, #8
167b8     A7 3A 68 FC | 	wrlong	#29, fp
167bc     2C 4E 05 F1 | 	add	fp, #44
167c0     A7 12 02 FB | 	rdlong	arg01, fp
167c4     34 4E 85 F1 | 	sub	fp, #52
167c8     9C 6E B0 FD | 	call	#_pslpeek
167cc     FD FA 31 F9 | 	getword	result1, result1, #0
167d0     A7 FA 61 FC | 	wrlong	result1, fp
167d4     CC 00 90 FD | 	jmp	#LR__1861
167d8                 | LR__1854
167d8     08 4E 05 F1 | 	add	fp, #8
167dc     A7 38 68 FC | 	wrlong	#28, fp
167e0     2C 4E 05 F1 | 	add	fp, #44
167e4     A7 12 02 FB | 	rdlong	arg01, fp
167e8     34 4E 85 F1 | 	sub	fp, #52
167ec     78 6E B0 FD | 	call	#_pslpeek
167f0     A7 FA 61 FC | 	wrlong	result1, fp
167f4     AC 00 90 FD | 	jmp	#LR__1861
167f8                 | LR__1855
167f8     08 4E 05 F1 | 	add	fp, #8
167fc     A7 3A 68 FC | 	wrlong	#29, fp
16800     2C 4E 05 F1 | 	add	fp, #44
16804     A7 12 02 FB | 	rdlong	arg01, fp
16808     34 4E 85 F1 | 	sub	fp, #52
1680c     58 6E B0 FD | 	call	#_pslpeek
16810     A7 FA 61 FC | 	wrlong	result1, fp
16814     8C 00 90 FD | 	jmp	#LR__1861
16818                 | LR__1856
16818     08 4E 05 F1 | 	add	fp, #8
1681c     A7 FE 69 FC | 	wrlong	#255, fp
16820     08 4E 85 F1 | 	sub	fp, #8
16824     A7 60 68 FC | 	wrlong	#48, fp
16828     78 00 90 FD | 	jmp	#LR__1861
1682c                 | LR__1857
1682c     08 4E 05 F1 | 	add	fp, #8
16830     A7 FE 69 FC | 	wrlong	#255, fp
16834     08 4E 85 F1 | 	sub	fp, #8
16838     A7 60 68 FC | 	wrlong	#48, fp
1683c     64 00 90 FD | 	jmp	#LR__1861
16840                 | LR__1858
16840     08 4E 05 F1 | 	add	fp, #8
16844     A7 3C 68 FC | 	wrlong	#30, fp
16848     2C 4E 05 F1 | 	add	fp, #44
1684c     A7 12 02 FB | 	rdlong	arg01, fp
16850     34 4E 85 F1 | 	sub	fp, #52
16854     10 6E B0 FD | 	call	#_pslpeek
16858     A7 FA 61 FC | 	wrlong	result1, fp
1685c     44 00 90 FD | 	jmp	#LR__1861
16860                 | LR__1859
16860     08 4E 05 F1 | 	add	fp, #8
16864     A7 FE 69 FC | 	wrlong	#255, fp
16868     08 4E 85 F1 | 	sub	fp, #8
1686c     A7 60 68 FC | 	wrlong	#48, fp
16870     30 00 90 FD | 	jmp	#LR__1861
16874                 | LR__1860
16874     08 4E 05 F1 | 	add	fp, #8
16878     A7 3E 68 FC | 	wrlong	#31, fp
1687c     2C 4E 05 F1 | 	add	fp, #44
16880     A7 12 02 FB | 	rdlong	arg01, fp
16884     34 4E 85 F1 | 	sub	fp, #52
16888     DC 6D B0 FD | 	call	#_pslpeek
1688c     A7 FA 61 FC | 	wrlong	result1, fp
16890     00 04 00 FF 
16894     00 FA 15 F2 | 	cmp	result1, ##524288 wc
16898     08 4E 05 31 |  if_ae	add	fp, #8
1689c     A7 56 68 3C |  if_ae	wrlong	#43, fp
168a0     08 4E 85 31 |  if_ae	sub	fp, #8
168a4                 | LR__1861
168a4     A7 12 02 F6 | 	mov	arg01, fp
168a8     98 4A BF FD | 	call	#_push
168ac                 | LR__1862
168ac     A7 F0 03 F6 | 	mov	ptra, fp
168b0     B2 00 A0 FD | 	call	#popregs_
168b4                 | _do_getvar_ret
168b4     2D 00 64 FD | 	ret
168b8                 | 
168b8                 | ' 
168b8                 | ' '------------------ getaddr.  Get a pointer to a variable and push it to the RPN stack
168b8                 | ' 
168b8                 | ' sub do_getaddr
168b8                 | _do_getaddr
168b8     01 4A 05 F6 | 	mov	COUNT_, #1
168bc     A8 00 A0 FD | 	call	#pushregs_
168c0     38 F0 07 F1 | 	add	ptra, #56
168c4                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
168c4                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
168c4     4A 00 00 FF 
168c8     80 E4 05 F1 | 	add	objptr, ##38016
168cc     F2 12 02 FB | 	rdlong	arg01, objptr
168d0     09 FD 01 F6 | 	mov	result2, arg01
168d4     01 FC 65 F0 | 	shl	result2, #1
168d8     09 FD 01 F1 | 	add	result2, arg01
168dc     02 FC 65 F0 | 	shl	result2, #2
168e0     03 00 00 FF 
168e4     04 E4 85 F1 | 	sub	objptr, ##1540
168e8     F2 FC 01 F1 | 	add	result2, objptr
168ec     04 FC 05 F1 | 	add	result2, #4
168f0     FE FC 09 FB | 	rdlong	result2, result2 wz
168f4     47 00 00 FF 
168f8     7C E4 85 F1 | 	sub	objptr, ##36476
168fc     C4 00 90 5D |  if_ne	jmp	#LR__1870
16900     4A 00 00 FF 
16904     80 E4 05 F1 | 	add	objptr, ##38016
16908     F2 12 02 FB | 	rdlong	arg01, objptr
1690c     09 FD 01 F6 | 	mov	result2, arg01
16910     01 FC 65 F0 | 	shl	result2, #1
16914     09 FD 01 F1 | 	add	result2, arg01
16918     02 FC 65 F0 | 	shl	result2, #2
1691c     03 00 00 FF 
16920     04 E4 85 F1 | 	sub	objptr, ##1540
16924     F2 FC 01 F1 | 	add	result2, objptr
16928     FE 12 02 FB | 	rdlong	arg01, result2
1692c     04 12 66 F0 | 	shl	arg01, #4
16930     32 00 00 FF 
16934     84 E4 85 F1 | 	sub	objptr, ##25732
16938     F2 12 02 F1 | 	add	arg01, objptr
1693c     0C 12 06 F1 | 	add	arg01, #12
16940     09 13 02 FB | 	rdlong	arg01, arg01
16944     08 4E 05 F1 | 	add	fp, #8
16948     A7 12 62 FC | 	wrlong	arg01, fp
1694c                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
1694c                 | '    if t1.result_type>=array_no_type then goto 2200
1694c     08 4E 85 F1 | 	sub	fp, #8
16950     00 13 16 F2 | 	cmp	arg01, #256 wc
16954     14 00 00 FF 
16958     F8 E5 85 F1 | 	sub	objptr, ##10744
1695c     64 00 90 3D |  if_ae	jmp	#LR__1871
16960     4A 00 00 FF 
16964     80 E4 05 F1 | 	add	objptr, ##38016
16968     F2 12 02 FB | 	rdlong	arg01, objptr
1696c     09 FB 01 F6 | 	mov	result1, arg01
16970     01 FA 65 F0 | 	shl	result1, #1
16974     09 FB 01 F1 | 	add	result1, arg01
16978     02 FA 65 F0 | 	shl	result1, #2
1697c     03 00 00 FF 
16980     04 E4 85 F1 | 	sub	objptr, ##1540
16984     F2 FA 01 F1 | 	add	result1, objptr
16988     FD FA 01 FB | 	rdlong	result1, result1
1698c     04 FA 65 F0 | 	shl	result1, #4
16990     32 00 00 FF 
16994     84 E4 85 F1 | 	sub	objptr, ##25732
16998     F2 FA 01 F1 | 	add	result1, objptr
1699c     04 FA 05 F1 | 	add	result1, #4
169a0     14 00 00 FF 
169a4     F8 E5 85 F1 | 	sub	objptr, ##10744
169a8     A7 FA 61 FC | 	wrlong	result1, fp
169ac     08 4E 05 F1 | 	add	fp, #8
169b0     A7 3A 68 FC | 	wrlong	#29, fp
169b4     08 4E 85 F1 | 	sub	fp, #8
169b8     A7 12 02 F6 | 	mov	arg01, fp
169bc     84 49 BF FD | 	call	#_push
169c0                 | '   t1.result.uresult=varptr(variables(compiledline(lineptr_e).result.uresult).value)
169c0                 | '   t1.result_type=result_uint
169c0                 | '   push t1 : return
169c0     D8 02 90 FD | 	jmp	#LR__1880
169c4                 | LR__1870
169c4                 | LR__1871
169c4     4A 00 00 FF 
169c8     80 E4 05 F1 | 	add	objptr, ##38016
169cc     F2 FE 01 FB | 	rdlong	result3, objptr
169d0     FF 12 02 F6 | 	mov	arg01, result3
169d4     01 12 66 F0 | 	shl	arg01, #1
169d8     FF 12 02 F1 | 	add	arg01, result3
169dc     02 12 66 F0 | 	shl	arg01, #2
169e0     03 00 00 FF 
169e4     04 E4 85 F1 | 	sub	objptr, ##1540
169e8     F2 12 02 F1 | 	add	arg01, objptr
169ec     09 13 02 FB | 	rdlong	arg01, arg01
169f0     04 12 66 F0 | 	shl	arg01, #4
169f4     32 00 00 FF 
169f8     84 E4 85 F1 | 	sub	objptr, ##25732
169fc     F2 12 02 F1 | 	add	arg01, objptr
16a00     04 12 06 F1 | 	add	arg01, #4
16a04     09 13 02 FB | 	rdlong	arg01, arg01
16a08     0C 4E 05 F1 | 	add	fp, #12
16a0c     A7 12 62 FC | 	wrlong	arg01, fp
16a10     0C 4E 85 F1 | 	sub	fp, #12
16a14     14 00 00 FF 
16a18     F8 E5 85 F1 | 	sub	objptr, ##10744
16a1c     48 6C B0 FD | 	call	#_pslpeek
16a20     FD FA 31 F9 | 	getword	result1, result1, #0
16a24     10 4E 05 F1 | 	add	fp, #16
16a28     A7 FA 61 FC | 	wrlong	result1, fp
16a2c     4A 00 00 FF 
16a30     80 E4 05 F1 | 	add	objptr, ##38016
16a34     F2 FE 01 FB | 	rdlong	result3, objptr
16a38     FF 12 02 F6 | 	mov	arg01, result3
16a3c     01 12 66 F0 | 	shl	arg01, #1
16a40     FF 12 02 F1 | 	add	arg01, result3
16a44     02 12 66 F0 | 	shl	arg01, #2
16a48     03 00 00 FF 
16a4c     04 E4 85 F1 | 	sub	objptr, ##1540
16a50     F2 12 02 F1 | 	add	arg01, objptr
16a54     04 12 06 F1 | 	add	arg01, #4
16a58     09 13 02 FB | 	rdlong	arg01, arg01
16a5c     04 4E 05 F1 | 	add	fp, #4
16a60     A7 12 62 FC | 	wrlong	arg01, fp
16a64     08 4E 85 F1 | 	sub	fp, #8
16a68     A7 12 02 FB | 	rdlong	arg01, fp
16a6c     0C 4E 85 F1 | 	sub	fp, #12
16a70     02 12 06 F1 | 	add	arg01, #2
16a74     47 00 00 FF 
16a78     7C E4 85 F1 | 	sub	objptr, ##36476
16a7c     90 6B B0 FD | 	call	#_pspeek
16a80     FD FA E1 F8 | 	getbyte	result1, result1, #0
16a84     18 4E 05 F1 | 	add	fp, #24
16a88     A7 FA 61 FC | 	wrlong	result1, fp
16a8c     0C 4E 85 F1 | 	sub	fp, #12
16a90     A7 12 02 FB | 	rdlong	arg01, fp
16a94     0C 4E 85 F1 | 	sub	fp, #12
16a98     04 12 06 F1 | 	add	arg01, #4
16a9c     C8 6B B0 FD | 	call	#_pslpeek
16aa0     1C 4E 05 F1 | 	add	fp, #28
16aa4     A7 FA 61 FC | 	wrlong	result1, fp
16aa8     10 4E 85 F1 | 	sub	fp, #16
16aac     A7 12 02 FB | 	rdlong	arg01, fp
16ab0     0C 4E 85 F1 | 	sub	fp, #12
16ab4     08 12 06 F1 | 	add	arg01, #8
16ab8     AC 6B B0 FD | 	call	#_pslpeek
16abc     20 4E 05 F1 | 	add	fp, #32
16ac0     A7 FA 61 FC | 	wrlong	result1, fp
16ac4     14 4E 85 F1 | 	sub	fp, #20
16ac8     A7 12 02 FB | 	rdlong	arg01, fp
16acc     0C 4E 85 F1 | 	sub	fp, #12
16ad0     0C 12 06 F1 | 	add	arg01, #12
16ad4     90 6B B0 FD | 	call	#_pslpeek
16ad8     24 4E 05 F1 | 	add	fp, #36
16adc     A7 FA 61 FC | 	wrlong	result1, fp
16ae0                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
16ae0                 | ' esize=pspeek(arrptr+2)
16ae0                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
16ae0                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
16ae0                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
16ae0                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
16ae0     10 4E 85 F1 | 	sub	fp, #16
16ae4     A7 12 02 FB | 	rdlong	arg01, fp
16ae8     14 4E 85 F1 | 	sub	fp, #20
16aec     03 12 16 F2 | 	cmp	arg01, #3 wc
16af0     34 00 90 CD |  if_b	jmp	#LR__1872
16af4     B4 47 BF FD | 	call	#_pop
16af8     A7 FA 61 FC | 	wrlong	result1, fp
16afc     04 4E 05 F1 | 	add	fp, #4
16b00     A7 FC 61 FC | 	wrlong	result2, fp
16b04     04 4E 05 F1 | 	add	fp, #4
16b08     A7 FE 61 FC | 	wrlong	result3, fp
16b0c     08 4E 85 F1 | 	sub	fp, #8
16b10     A7 12 02 F6 | 	mov	arg01, fp
16b14     78 49 BF FD | 	call	#_converttoint
16b18     30 4E 05 F1 | 	add	fp, #48
16b1c     A7 FA 61 FC | 	wrlong	result1, fp
16b20     30 4E 85 F1 | 	sub	fp, #48
16b24     0C 00 90 FD | 	jmp	#LR__1873
16b28                 | LR__1872
16b28     30 4E 05 F1 | 	add	fp, #48
16b2c     A7 00 68 FC | 	wrlong	#0, fp
16b30     30 4E 85 F1 | 	sub	fp, #48
16b34                 | LR__1873
16b34                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
16b34     14 4E 05 F1 | 	add	fp, #20
16b38     A7 12 02 FB | 	rdlong	arg01, fp
16b3c     14 4E 85 F1 | 	sub	fp, #20
16b40     02 12 16 F2 | 	cmp	arg01, #2 wc
16b44     34 00 90 CD |  if_b	jmp	#LR__1874
16b48     60 47 BF FD | 	call	#_pop
16b4c     A7 FA 61 FC | 	wrlong	result1, fp
16b50     04 4E 05 F1 | 	add	fp, #4
16b54     A7 FC 61 FC | 	wrlong	result2, fp
16b58     04 4E 05 F1 | 	add	fp, #4
16b5c     A7 FE 61 FC | 	wrlong	result3, fp
16b60     08 4E 85 F1 | 	sub	fp, #8
16b64     A7 12 02 F6 | 	mov	arg01, fp
16b68     24 49 BF FD | 	call	#_converttoint
16b6c     2C 4E 05 F1 | 	add	fp, #44
16b70     A7 FA 61 FC | 	wrlong	result1, fp
16b74     2C 4E 85 F1 | 	sub	fp, #44
16b78     0C 00 90 FD | 	jmp	#LR__1875
16b7c                 | LR__1874
16b7c     2C 4E 05 F1 | 	add	fp, #44
16b80     A7 00 68 FC | 	wrlong	#0, fp
16b84     2C 4E 85 F1 | 	sub	fp, #44
16b88                 | LR__1875
16b88                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
16b88     14 4E 05 F1 | 	add	fp, #20
16b8c     A7 12 02 FB | 	rdlong	arg01, fp
16b90     14 4E 85 F1 | 	sub	fp, #20
16b94     01 12 16 F2 | 	cmp	arg01, #1 wc
16b98     34 00 90 CD |  if_b	jmp	#LR__1876
16b9c     0C 47 BF FD | 	call	#_pop
16ba0     A7 FA 61 FC | 	wrlong	result1, fp
16ba4     04 4E 05 F1 | 	add	fp, #4
16ba8     A7 FC 61 FC | 	wrlong	result2, fp
16bac     04 4E 05 F1 | 	add	fp, #4
16bb0     A7 FE 61 FC | 	wrlong	result3, fp
16bb4     08 4E 85 F1 | 	sub	fp, #8
16bb8     A7 12 02 F6 | 	mov	arg01, fp
16bbc     D0 48 BF FD | 	call	#_converttoint
16bc0     28 4E 05 F1 | 	add	fp, #40
16bc4     A7 FA 61 FC | 	wrlong	result1, fp
16bc8     28 4E 85 F1 | 	sub	fp, #40
16bcc     0C 00 90 FD | 	jmp	#LR__1877
16bd0                 | LR__1876
16bd0     28 4E 05 F1 | 	add	fp, #40
16bd4     A7 00 68 FC | 	wrlong	#0, fp
16bd8     28 4E 85 F1 | 	sub	fp, #40
16bdc                 | LR__1877
16bdc                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
16bdc                 | ' if numpar>0 then
16bdc     14 4E 05 F1 | 	add	fp, #20
16be0     A7 FE 01 FB | 	rdlong	result3, fp
16be4     14 4E 85 F1 | 	sub	fp, #20
16be8     01 FE 15 F2 | 	cmp	result3, #1 wc
16bec     8C 00 90 CD |  if_b	jmp	#LR__1878
16bf0     0C 4E 05 F1 | 	add	fp, #12
16bf4     A7 FC 01 FB | 	rdlong	result2, fp
16bf8     1C 4E 05 F1 | 	add	fp, #28
16bfc     A7 FE 01 FB | 	rdlong	result3, fp
16c00     04 4E 05 F1 | 	add	fp, #4
16c04     A7 12 02 FB | 	rdlong	arg01, fp
16c08     10 4E 85 F1 | 	sub	fp, #16
16c0c     A7 FA 01 FB | 	rdlong	result1, fp
16c10     FD 12 02 FD | 	qmul	arg01, result1
16c14     10 FC 05 F1 | 	add	result2, #16
16c18     14 4E 05 F1 | 	add	fp, #20
16c1c     A7 1E 02 FB | 	rdlong	local01, fp
16c20     18 12 62 FD | 	getqx	arg01
16c24     FD 1E 02 FD | 	qmul	local01, result1
16c28     09 FF 01 F1 | 	add	result3, arg01
16c2c     10 4E 85 F1 | 	sub	fp, #16
16c30     A7 1E 02 FB | 	rdlong	local01, fp
16c34     18 FA 61 FD | 	getqx	result1
16c38     0F FB 01 FD | 	qmul	result1, local01
16c3c     08 4E 85 F1 | 	sub	fp, #8
16c40     A7 1E 02 FB | 	rdlong	local01, fp
16c44     18 FA 61 FD | 	getqx	result1
16c48     FD FE 01 F1 | 	add	result3, result1
16c4c     0F FF 01 FD | 	qmul	result3, local01
16c50     1C 4E 05 F1 | 	add	fp, #28
16c54     18 1E 62 FD | 	getqx	local01
16c58     0F FD 01 F1 | 	add	result2, local01
16c5c     A7 FC 61 FC | 	wrlong	result2, fp
16c60     2C 4E 85 F1 | 	sub	fp, #44
16c64     A7 3A 68 FC | 	wrlong	#29, fp
16c68     2C 4E 05 F1 | 	add	fp, #44
16c6c     A7 1E 02 FB | 	rdlong	local01, fp
16c70     34 4E 85 F1 | 	sub	fp, #52
16c74     A7 1E 62 FC | 	wrlong	local01, fp
16c78     18 00 90 FD | 	jmp	#LR__1879
16c7c                 | LR__1878
16c7c     08 4E 05 F1 | 	add	fp, #8
16c80     A7 3A 68 FC | 	wrlong	#29, fp
16c84     04 4E 05 F1 | 	add	fp, #4
16c88     A7 1E 02 FB | 	rdlong	local01, fp
16c8c     0C 4E 85 F1 | 	sub	fp, #12
16c90     A7 1E 62 FC | 	wrlong	local01, fp
16c94                 | LR__1879
16c94     A7 12 02 F6 | 	mov	arg01, fp
16c98     A8 46 BF FD | 	call	#_push
16c9c                 | LR__1880
16c9c     A7 F0 03 F6 | 	mov	ptra, fp
16ca0     B2 00 A0 FD | 	call	#popregs_
16ca4                 | _do_getaddr_ret
16ca4     2D 00 64 FD | 	ret
16ca8                 | 
16ca8                 | ' 
16ca8                 | ' 
16ca8                 | ' 
16ca8                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
16ca8                 | ' '--------------------------------------- Operators ------------------------------------------------------------------------------------- 
16ca8                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
16ca8                 | ' 
16ca8                 | ' '--------------------------------- AND 
16ca8                 | ' 
16ca8                 | ' sub do_and 
16ca8                 | _do_and
16ca8     03 4A 05 F6 | 	mov	COUNT_, #3
16cac     A8 00 A0 FD | 	call	#pushregs_
16cb0     18 F0 07 F1 | 	add	ptra, #24
16cb4     F4 45 BF FD | 	call	#_pop
16cb8     FD 12 02 F6 | 	mov	arg01, result1
16cbc     FE 1E 02 F6 | 	mov	local01, result2
16cc0     FF 20 02 F6 | 	mov	local02, result3
16cc4     0C 4E 05 F1 | 	add	fp, #12
16cc8     A7 12 62 FC | 	wrlong	arg01, fp
16ccc     04 4E 05 F1 | 	add	fp, #4
16cd0     A7 1E 62 FC | 	wrlong	local01, fp
16cd4     04 4E 05 F1 | 	add	fp, #4
16cd8     A7 20 62 FC | 	wrlong	local02, fp
16cdc     14 4E 85 F1 | 	sub	fp, #20
16ce0     C8 45 BF FD | 	call	#_pop
16ce4     FF 22 02 F6 | 	mov	local03, result3
16ce8     A7 FA 61 FC | 	wrlong	result1, fp
16cec     04 4E 05 F1 | 	add	fp, #4
16cf0     A7 FC 61 FC | 	wrlong	result2, fp
16cf4     04 4E 05 F1 | 	add	fp, #4
16cf8     A7 22 62 FC | 	wrlong	local03, fp
16cfc                 | ' 
16cfc                 | ' t2=pop()
16cfc                 | ' t1=pop()
16cfc                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
16cfc     08 4E 85 F1 | 	sub	fp, #8
16d00     1C 22 0E F2 | 	cmp	local03, #28 wz
16d04     A7 22 02 AB |  if_e	rdlong	local03, fp
16d08     A7 22 62 AC |  if_e	wrlong	local03, fp
16d0c     08 4E 05 A1 |  if_e	add	fp, #8
16d10     A7 3A 68 AC |  if_e	wrlong	#29, fp
16d14     08 4E 85 A1 |  if_e	sub	fp, #8
16d18                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
16d18     14 4E 05 F1 | 	add	fp, #20
16d1c     A7 22 02 FB | 	rdlong	local03, fp
16d20     14 4E 85 F1 | 	sub	fp, #20
16d24     1C 22 0E F2 | 	cmp	local03, #28 wz
16d28     18 00 90 5D |  if_ne	jmp	#LR__1890
16d2c     0C 4E 05 F1 | 	add	fp, #12
16d30     A7 22 02 FB | 	rdlong	local03, fp
16d34     A7 22 62 FC | 	wrlong	local03, fp
16d38     08 4E 05 F1 | 	add	fp, #8
16d3c     A7 3A 68 FC | 	wrlong	#29, fp
16d40     14 4E 85 F1 | 	sub	fp, #20
16d44                 | LR__1890
16d44                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
16d44     08 4E 05 F1 | 	add	fp, #8
16d48     A7 22 02 FB | 	rdlong	local03, fp
16d4c     08 4E 85 F1 | 	sub	fp, #8
16d50     1F 22 0E F2 | 	cmp	local03, #31 wz
16d54     14 4E 05 51 |  if_ne	add	fp, #20
16d58     A7 20 02 5B |  if_ne	rdlong	local02, fp
16d5c     14 4E 85 51 |  if_ne	sub	fp, #20
16d60     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
16d64     08 4E 05 51 |  if_ne	add	fp, #8
16d68     A7 22 02 5B |  if_ne	rdlong	local03, fp
16d6c     08 4E 85 51 |  if_ne	sub	fp, #8
16d70     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
16d74     14 4E 05 51 |  if_ne	add	fp, #20
16d78     14 4E 85 51 |  if_ne	sub	fp, #20
16d7c     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
16d80     A7 0C 68 AC |  if_e	wrlong	#6, fp
16d84     08 4E 05 A1 |  if_e	add	fp, #8
16d88     A7 FE 69 AC |  if_e	wrlong	#255, fp
16d8c     08 4E 85 A1 |  if_e	sub	fp, #8
16d90     18 00 90 AD |  if_e	jmp	#LR__1891
16d94     A7 22 02 FB | 	rdlong	local03, fp
16d98     0C 4E 05 F1 | 	add	fp, #12
16d9c     A7 1E 02 FB | 	rdlong	local01, fp
16da0     0C 4E 85 F1 | 	sub	fp, #12
16da4     0F 23 02 F5 | 	and	local03, local01
16da8     A7 22 62 FC | 	wrlong	local03, fp
16dac                 | LR__1891
16dac     A7 12 02 F6 | 	mov	arg01, fp
16db0     90 45 BF FD | 	call	#_push
16db4     A7 F0 03 F6 | 	mov	ptra, fp
16db8     B2 00 A0 FD | 	call	#popregs_
16dbc                 | _do_and_ret
16dbc     2D 00 64 FD | 	ret
16dc0                 | 
16dc0                 | ' 
16dc0                 | ' '--------------------------------- DIV (integer divide)
16dc0                 | ' 
16dc0                 | ' sub do_div 
16dc0                 | _do_div
16dc0     01 4A 05 F6 | 	mov	COUNT_, #1
16dc4     A8 00 A0 FD | 	call	#pushregs_
16dc8     18 F0 07 F1 | 	add	ptra, #24
16dcc     DC 44 BF FD | 	call	#_pop
16dd0     FD 7E 02 F6 | 	mov	muldivb_, result1
16dd4     FE 7C 02 F6 | 	mov	muldiva_, result2
16dd8     FF 1E 02 F6 | 	mov	local01, result3
16ddc     0C 4E 05 F1 | 	add	fp, #12
16de0     A7 7E 62 FC | 	wrlong	muldivb_, fp
16de4     04 4E 05 F1 | 	add	fp, #4
16de8     A7 7C 62 FC | 	wrlong	muldiva_, fp
16dec     04 4E 05 F1 | 	add	fp, #4
16df0     A7 1E 62 FC | 	wrlong	local01, fp
16df4     14 4E 85 F1 | 	sub	fp, #20
16df8     B0 44 BF FD | 	call	#_pop
16dfc     A7 FA 61 FC | 	wrlong	result1, fp
16e00     04 4E 05 F1 | 	add	fp, #4
16e04     A7 FC 61 FC | 	wrlong	result2, fp
16e08     04 4E 05 F1 | 	add	fp, #4
16e0c     A7 FE 61 FC | 	wrlong	result3, fp
16e10                 | ' 
16e10                 | ' t2=pop()
16e10                 | ' t1=pop()
16e10                 | ' 
16e10                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
16e10     08 4E 85 F1 | 	sub	fp, #8
16e14     1F FE 0D F2 | 	cmp	result3, #31 wz
16e18     14 4E 05 51 |  if_ne	add	fp, #20
16e1c     A7 12 02 5B |  if_ne	rdlong	arg01, fp
16e20     14 4E 85 51 |  if_ne	sub	fp, #20
16e24     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
16e28     A7 14 68 AC |  if_e	wrlong	#10, fp
16e2c     08 4E 05 A1 |  if_e	add	fp, #8
16e30     A7 FE 69 AC |  if_e	wrlong	#255, fp
16e34     08 4E 85 A1 |  if_e	sub	fp, #8
16e38     90 01 90 AD |  if_e	jmp	#LR__1906
16e3c                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
16e3c     08 4E 05 F1 | 	add	fp, #8
16e40     A7 7E 02 FB | 	rdlong	muldivb_, fp
16e44     08 4E 85 F1 | 	sub	fp, #8
16e48     1E 7E 0E F2 | 	cmp	muldivb_, #30 wz
16e4c     1C 00 90 5D |  if_ne	jmp	#LR__1900
16e50     08 4E 05 F1 | 	add	fp, #8
16e54     A7 38 68 FC | 	wrlong	#28, fp
16e58     08 4E 85 F1 | 	sub	fp, #8
16e5c     A7 12 02 FB | 	rdlong	arg01, fp
16e60     00 14 06 F6 | 	mov	arg02, #0
16e64     78 CB B0 FD | 	call	#__system___float_tointeger
16e68     A7 FA 61 FC | 	wrlong	result1, fp
16e6c                 | LR__1900
16e6c                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
16e6c     14 4E 05 F1 | 	add	fp, #20
16e70     A7 7E 02 FB | 	rdlong	muldivb_, fp
16e74     14 4E 85 F1 | 	sub	fp, #20
16e78     1E 7E 0E F2 | 	cmp	muldivb_, #30 wz
16e7c     28 00 90 5D |  if_ne	jmp	#LR__1901
16e80     14 4E 05 F1 | 	add	fp, #20
16e84     A7 38 68 FC | 	wrlong	#28, fp
16e88     08 4E 85 F1 | 	sub	fp, #8
16e8c     A7 12 02 FB | 	rdlong	arg01, fp
16e90     0C 4E 85 F1 | 	sub	fp, #12
16e94     00 14 06 F6 | 	mov	arg02, #0
16e98     44 CB B0 FD | 	call	#__system___float_tointeger
16e9c     0C 4E 05 F1 | 	add	fp, #12
16ea0     A7 FA 61 FC | 	wrlong	result1, fp
16ea4     0C 4E 85 F1 | 	sub	fp, #12
16ea8                 | LR__1901
16ea8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
16ea8     08 4E 05 F1 | 	add	fp, #8
16eac     A7 7E 02 FB | 	rdlong	muldivb_, fp
16eb0     08 4E 85 F1 | 	sub	fp, #8
16eb4     1D 7E 0E F2 | 	cmp	muldivb_, #29 wz
16eb8     14 4E 05 A1 |  if_e	add	fp, #20
16ebc     A7 1E 02 AB |  if_e	rdlong	local01, fp
16ec0     14 4E 85 A1 |  if_e	sub	fp, #20
16ec4     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
16ec8     20 00 90 5D |  if_ne	jmp	#LR__1902
16ecc     0C 4E 05 F1 | 	add	fp, #12
16ed0     A7 1E 02 FB | 	rdlong	local01, fp
16ed4     0C 4E 85 F1 | 	sub	fp, #12
16ed8     A7 7E 02 FB | 	rdlong	muldivb_, fp
16edc     0F 7F 12 FD | 	qdiv	muldivb_, local01
16ee0     18 1E 62 FD | 	getqx	local01
16ee4     A7 1E 62 FC | 	wrlong	local01, fp
16ee8     E0 00 90 FD | 	jmp	#LR__1906
16eec                 | LR__1902
16eec                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
16eec     08 4E 05 F1 | 	add	fp, #8
16ef0     A7 7E 02 FB | 	rdlong	muldivb_, fp
16ef4     08 4E 85 F1 | 	sub	fp, #8
16ef8     1D 7E 0E F2 | 	cmp	muldivb_, #29 wz
16efc     14 4E 05 A1 |  if_e	add	fp, #20
16f00     A7 1E 02 AB |  if_e	rdlong	local01, fp
16f04     14 4E 85 A1 |  if_e	sub	fp, #20
16f08     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
16f0c     2C 00 90 5D |  if_ne	jmp	#LR__1903
16f10     0C 4E 05 F1 | 	add	fp, #12
16f14     A7 1E 02 FB | 	rdlong	local01, fp
16f18     0C 4E 85 F1 | 	sub	fp, #12
16f1c     A7 7E 02 FB | 	rdlong	muldivb_, fp
16f20     0F 7F 12 FD | 	qdiv	muldivb_, local01
16f24     18 1E 62 FD | 	getqx	local01
16f28     A7 1E 62 FC | 	wrlong	local01, fp
16f2c     08 4E 05 F1 | 	add	fp, #8
16f30     A7 38 68 FC | 	wrlong	#28, fp
16f34     08 4E 85 F1 | 	sub	fp, #8
16f38     90 00 90 FD | 	jmp	#LR__1906
16f3c                 | LR__1903
16f3c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
16f3c     08 4E 05 F1 | 	add	fp, #8
16f40     A7 7E 02 FB | 	rdlong	muldivb_, fp
16f44     08 4E 85 F1 | 	sub	fp, #8
16f48     1C 7E 0E F2 | 	cmp	muldivb_, #28 wz
16f4c     14 4E 05 A1 |  if_e	add	fp, #20
16f50     A7 1E 02 AB |  if_e	rdlong	local01, fp
16f54     14 4E 85 A1 |  if_e	sub	fp, #20
16f58     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
16f5c     1C 00 90 5D |  if_ne	jmp	#LR__1904
16f60     A7 7C 02 FB | 	rdlong	muldiva_, fp
16f64     0C 4E 05 F1 | 	add	fp, #12
16f68     A7 7E 02 FB | 	rdlong	muldivb_, fp
16f6c     0C 4E 85 F1 | 	sub	fp, #12
16f70     BA 00 A0 FD | 	call	#divide_
16f74     A7 7E 62 FC | 	wrlong	muldivb_, fp
16f78     50 00 90 FD | 	jmp	#LR__1906
16f7c                 | LR__1904
16f7c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
16f7c     08 4E 05 F1 | 	add	fp, #8
16f80     A7 7E 02 FB | 	rdlong	muldivb_, fp
16f84     08 4E 85 F1 | 	sub	fp, #8
16f88     1C 7E 0E F2 | 	cmp	muldivb_, #28 wz
16f8c     14 4E 05 A1 |  if_e	add	fp, #20
16f90     A7 1E 02 AB |  if_e	rdlong	local01, fp
16f94     14 4E 85 A1 |  if_e	sub	fp, #20
16f98     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
16f9c     1C 00 90 5D |  if_ne	jmp	#LR__1905
16fa0     A7 7C 02 FB | 	rdlong	muldiva_, fp
16fa4     0C 4E 05 F1 | 	add	fp, #12
16fa8     A7 7E 02 FB | 	rdlong	muldivb_, fp
16fac     0C 4E 85 F1 | 	sub	fp, #12
16fb0     BA 00 A0 FD | 	call	#divide_
16fb4     A7 7E 62 FC | 	wrlong	muldivb_, fp
16fb8     10 00 90 FD | 	jmp	#LR__1906
16fbc                 | LR__1905
16fbc     A7 16 68 FC | 	wrlong	#11, fp
16fc0     08 4E 05 F1 | 	add	fp, #8
16fc4     A7 FE 69 FC | 	wrlong	#255, fp
16fc8     08 4E 85 F1 | 	sub	fp, #8
16fcc                 | LR__1906
16fcc     A7 12 02 F6 | 	mov	arg01, fp
16fd0     70 43 BF FD | 	call	#_push
16fd4     A7 F0 03 F6 | 	mov	ptra, fp
16fd8     B2 00 A0 FD | 	call	#popregs_
16fdc                 | _do_div_ret
16fdc     2D 00 64 FD | 	ret
16fe0                 | 
16fe0                 | ' 
16fe0                 | ' '--------------------------------- fdiv (/) - float divide
16fe0                 | ' 
16fe0                 | ' sub do_fdiv 
16fe0                 | _do_fdiv
16fe0     02 4A 05 F6 | 	mov	COUNT_, #2
16fe4     A8 00 A0 FD | 	call	#pushregs_
16fe8     18 F0 07 F1 | 	add	ptra, #24
16fec     BC 42 BF FD | 	call	#_pop
16ff0     FD 14 02 F6 | 	mov	arg02, result1
16ff4     FE 12 02 F6 | 	mov	arg01, result2
16ff8     FF 1E 02 F6 | 	mov	local01, result3
16ffc     0C 4E 05 F1 | 	add	fp, #12
17000     A7 14 62 FC | 	wrlong	arg02, fp
17004     04 4E 05 F1 | 	add	fp, #4
17008     A7 12 62 FC | 	wrlong	arg01, fp
1700c     04 4E 05 F1 | 	add	fp, #4
17010     A7 1E 62 FC | 	wrlong	local01, fp
17014     14 4E 85 F1 | 	sub	fp, #20
17018     90 42 BF FD | 	call	#_pop
1701c     A7 FA 61 FC | 	wrlong	result1, fp
17020     04 4E 05 F1 | 	add	fp, #4
17024     A7 FC 61 FC | 	wrlong	result2, fp
17028     04 4E 05 F1 | 	add	fp, #4
1702c     A7 FE 61 FC | 	wrlong	result3, fp
17030                 | ' 
17030                 | ' t2=pop()
17030                 | ' t1=pop()
17030                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
17030     08 4E 85 F1 | 	sub	fp, #8
17034     1F FE 0D F2 | 	cmp	result3, #31 wz
17038     14 4E 05 51 |  if_ne	add	fp, #20
1703c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
17040     14 4E 85 51 |  if_ne	sub	fp, #20
17044     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
17048     A7 14 68 AC |  if_e	wrlong	#10, fp
1704c     08 4E 05 A1 |  if_e	add	fp, #8
17050     A7 FE 69 AC |  if_e	wrlong	#255, fp
17054     08 4E 85 A1 |  if_e	sub	fp, #8
17058     38 01 90 AD |  if_e	jmp	#LR__1915
1705c                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
1705c     08 4E 05 F1 | 	add	fp, #8
17060     A7 14 02 FB | 	rdlong	arg02, fp
17064     08 4E 85 F1 | 	sub	fp, #8
17068     1C 14 0E F2 | 	cmp	arg02, #28 wz
1706c     28 00 90 5D |  if_ne	jmp	#LR__1910
17070     08 4E 05 F1 | 	add	fp, #8
17074     A7 3C 68 FC | 	wrlong	#30, fp
17078     08 4E 85 F1 | 	sub	fp, #8
1707c     A7 12 02 FB | 	rdlong	arg01, fp
17080     09 13 52 F6 | 	abs	arg01, arg01 wc
17084     1F 20 C6 C9 |  if_b	decod	local02, #31
17088     00 20 06 36 |  if_ae	mov	local02, #0
1708c     84 C0 B0 FD | 	call	#__system___float_fromuns
17090     10 FB 61 F5 | 	xor	result1, local02
17094     A7 FA 61 FC | 	wrlong	result1, fp
17098                 | LR__1910
17098                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
17098     08 4E 05 F1 | 	add	fp, #8
1709c     A7 14 02 FB | 	rdlong	arg02, fp
170a0     08 4E 85 F1 | 	sub	fp, #8
170a4     1D 14 0E F2 | 	cmp	arg02, #29 wz
170a8     18 00 90 5D |  if_ne	jmp	#LR__1911
170ac     08 4E 05 F1 | 	add	fp, #8
170b0     A7 3C 68 FC | 	wrlong	#30, fp
170b4     08 4E 85 F1 | 	sub	fp, #8
170b8     A7 12 02 FB | 	rdlong	arg01, fp
170bc     54 C0 B0 FD | 	call	#__system___float_fromuns
170c0     A7 FA 61 FC | 	wrlong	result1, fp
170c4                 | LR__1911
170c4                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
170c4     14 4E 05 F1 | 	add	fp, #20
170c8     A7 14 02 FB | 	rdlong	arg02, fp
170cc     14 4E 85 F1 | 	sub	fp, #20
170d0     1C 14 0E F2 | 	cmp	arg02, #28 wz
170d4     34 00 90 5D |  if_ne	jmp	#LR__1912
170d8     14 4E 05 F1 | 	add	fp, #20
170dc     A7 3C 68 FC | 	wrlong	#30, fp
170e0     08 4E 85 F1 | 	sub	fp, #8
170e4     A7 12 02 FB | 	rdlong	arg01, fp
170e8     0C 4E 85 F1 | 	sub	fp, #12
170ec     09 13 52 F6 | 	abs	arg01, arg01 wc
170f0     1F 20 C6 C9 |  if_b	decod	local02, #31
170f4     00 20 06 36 |  if_ae	mov	local02, #0
170f8     18 C0 B0 FD | 	call	#__system___float_fromuns
170fc     10 FB 61 F5 | 	xor	result1, local02
17100     0C 4E 05 F1 | 	add	fp, #12
17104     A7 FA 61 FC | 	wrlong	result1, fp
17108     0C 4E 85 F1 | 	sub	fp, #12
1710c                 | LR__1912
1710c                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
1710c     14 4E 05 F1 | 	add	fp, #20
17110     A7 14 02 FB | 	rdlong	arg02, fp
17114     14 4E 85 F1 | 	sub	fp, #20
17118     1D 14 0E F2 | 	cmp	arg02, #29 wz
1711c     24 00 90 5D |  if_ne	jmp	#LR__1913
17120     14 4E 05 F1 | 	add	fp, #20
17124     A7 3C 68 FC | 	wrlong	#30, fp
17128     08 4E 85 F1 | 	sub	fp, #8
1712c     A7 12 02 FB | 	rdlong	arg01, fp
17130     0C 4E 85 F1 | 	sub	fp, #12
17134     DC BF B0 FD | 	call	#__system___float_fromuns
17138     0C 4E 05 F1 | 	add	fp, #12
1713c     A7 FA 61 FC | 	wrlong	result1, fp
17140     0C 4E 85 F1 | 	sub	fp, #12
17144                 | LR__1913
17144                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
17144     08 4E 05 F1 | 	add	fp, #8
17148     A7 14 02 FB | 	rdlong	arg02, fp
1714c     08 4E 85 F1 | 	sub	fp, #8
17150     1E 14 0E F2 | 	cmp	arg02, #30 wz
17154     14 4E 05 A1 |  if_e	add	fp, #20
17158     A7 1E 02 AB |  if_e	rdlong	local01, fp
1715c     14 4E 85 A1 |  if_e	sub	fp, #20
17160     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
17164     1C 00 90 5D |  if_ne	jmp	#LR__1914
17168     A7 12 02 FB | 	rdlong	arg01, fp
1716c     0C 4E 05 F1 | 	add	fp, #12
17170     A7 14 02 FB | 	rdlong	arg02, fp
17174     0C 4E 85 F1 | 	sub	fp, #12
17178     A0 C5 B0 FD | 	call	#__system___float_div
1717c     A7 FA 61 FC | 	wrlong	result1, fp
17180     10 00 90 FD | 	jmp	#LR__1915
17184                 | LR__1914
17184     A7 16 68 FC | 	wrlong	#11, fp
17188     08 4E 05 F1 | 	add	fp, #8
1718c     A7 FE 69 FC | 	wrlong	#255, fp
17190     08 4E 85 F1 | 	sub	fp, #8
17194                 | LR__1915
17194     A7 12 02 F6 | 	mov	arg01, fp
17198     A8 41 BF FD | 	call	#_push
1719c     A7 F0 03 F6 | 	mov	ptra, fp
171a0     B2 00 A0 FD | 	call	#popregs_
171a4                 | _do_fdiv_ret
171a4     2D 00 64 FD | 	ret
171a8                 | 
171a8                 | ' 
171a8                 | ' '--------------------------------- minus (-)
171a8                 | ' 
171a8                 | ' sub do_minus
171a8                 | _do_minus
171a8     05 4A 05 F6 | 	mov	COUNT_, #5
171ac     A8 00 A0 FD | 	call	#pushregs_
171b0     18 F0 07 F1 | 	add	ptra, #24
171b4     F4 40 BF FD | 	call	#_pop
171b8     FD 1E 02 F6 | 	mov	local01, result1
171bc     FE 20 02 F6 | 	mov	local02, result2
171c0     FF 22 02 F6 | 	mov	local03, result3
171c4     0C 4E 05 F1 | 	add	fp, #12
171c8     A7 1E 62 FC | 	wrlong	local01, fp
171cc     04 4E 05 F1 | 	add	fp, #4
171d0     A7 20 62 FC | 	wrlong	local02, fp
171d4     04 4E 05 F1 | 	add	fp, #4
171d8     A7 22 62 FC | 	wrlong	local03, fp
171dc     14 4E 85 F1 | 	sub	fp, #20
171e0     C8 40 BF FD | 	call	#_pop
171e4     FF 22 02 F6 | 	mov	local03, result3
171e8     A7 FA 61 FC | 	wrlong	result1, fp
171ec     04 4E 05 F1 | 	add	fp, #4
171f0     A7 FC 61 FC | 	wrlong	result2, fp
171f4     04 4E 05 F1 | 	add	fp, #4
171f8     A7 22 62 FC | 	wrlong	local03, fp
171fc                 | ' 
171fc                 | ' t2=pop()
171fc                 | ' t1=pop()
171fc                 | ' 
171fc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
171fc     08 4E 85 F1 | 	sub	fp, #8
17200     1D 22 0E F2 | 	cmp	local03, #29 wz
17204     14 4E 05 A1 |  if_e	add	fp, #20
17208     A7 24 02 AB |  if_e	rdlong	local04, fp
1720c     14 4E 85 A1 |  if_e	sub	fp, #20
17210     12 23 02 A6 |  if_e	mov	local03, local04
17214     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
17218     5C 00 90 5D |  if_ne	jmp	#LR__1921
1721c                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
1721c     0C 4E 05 F1 | 	add	fp, #12
17220     A7 1E 02 FB | 	rdlong	local01, fp
17224     0C 4E 85 F1 | 	sub	fp, #12
17228     A7 22 02 FB | 	rdlong	local03, fp
1722c     11 1F 12 F2 | 	cmp	local01, local03 wc
17230     1C 00 90 3D |  if_ae	jmp	#LR__1920
17234     A7 1E 02 FB | 	rdlong	local01, fp
17238     0C 4E 05 F1 | 	add	fp, #12
1723c     A7 20 02 FB | 	rdlong	local02, fp
17240     0C 4E 85 F1 | 	sub	fp, #12
17244     10 1F 82 F1 | 	sub	local01, local02
17248     A7 1E 62 FC | 	wrlong	local01, fp
1724c     F4 02 90 FD | 	jmp	#LR__1930
17250                 | LR__1920
17250     A7 1E 02 FB | 	rdlong	local01, fp
17254     0C 4E 05 F1 | 	add	fp, #12
17258     A7 20 02 FB | 	rdlong	local02, fp
1725c     0C 4E 85 F1 | 	sub	fp, #12
17260     10 1F 82 F1 | 	sub	local01, local02
17264     A7 1E 62 FC | 	wrlong	local01, fp
17268     08 4E 05 F1 | 	add	fp, #8
1726c     A7 38 68 FC | 	wrlong	#28, fp
17270     08 4E 85 F1 | 	sub	fp, #8
17274     CC 02 90 FD | 	jmp	#LR__1930
17278                 | LR__1921
17278                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
17278     08 4E 05 F1 | 	add	fp, #8
1727c     A7 1E 02 FB | 	rdlong	local01, fp
17280     08 4E 85 F1 | 	sub	fp, #8
17284     1D 1E 0E F2 | 	cmp	local01, #29 wz
17288     14 4E 05 A1 |  if_e	add	fp, #20
1728c     A7 24 02 AB |  if_e	rdlong	local04, fp
17290     14 4E 85 A1 |  if_e	sub	fp, #20
17294     12 23 02 A6 |  if_e	mov	local03, local04
17298     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1729c     28 00 90 5D |  if_ne	jmp	#LR__1922
172a0     A7 1E 02 FB | 	rdlong	local01, fp
172a4     0C 4E 05 F1 | 	add	fp, #12
172a8     A7 20 02 FB | 	rdlong	local02, fp
172ac     0C 4E 85 F1 | 	sub	fp, #12
172b0     10 1F 82 F1 | 	sub	local01, local02
172b4     A7 1E 62 FC | 	wrlong	local01, fp
172b8     08 4E 05 F1 | 	add	fp, #8
172bc     A7 38 68 FC | 	wrlong	#28, fp
172c0     08 4E 85 F1 | 	sub	fp, #8
172c4     7C 02 90 FD | 	jmp	#LR__1930
172c8                 | LR__1922
172c8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
172c8     08 4E 05 F1 | 	add	fp, #8
172cc     A7 1E 02 FB | 	rdlong	local01, fp
172d0     08 4E 85 F1 | 	sub	fp, #8
172d4     1D 1E 0E F2 | 	cmp	local01, #29 wz
172d8     14 4E 05 A1 |  if_e	add	fp, #20
172dc     A7 24 02 AB |  if_e	rdlong	local04, fp
172e0     14 4E 85 A1 |  if_e	sub	fp, #20
172e4     12 23 02 A6 |  if_e	mov	local03, local04
172e8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
172ec     34 00 90 5D |  if_ne	jmp	#LR__1923
172f0     A7 12 02 FB | 	rdlong	arg01, fp
172f4     1C BE B0 FD | 	call	#__system___float_fromuns
172f8     FD 12 02 F6 | 	mov	arg01, result1
172fc     0C 4E 05 F1 | 	add	fp, #12
17300     A7 14 02 FB | 	rdlong	arg02, fp
17304     0C 4E 85 F1 | 	sub	fp, #12
17308     1F 14 E6 F4 | 	bitnot	arg02, #31
1730c     38 BE B0 FD | 	call	#__system___float_add
17310     A7 FA 61 FC | 	wrlong	result1, fp
17314     08 4E 05 F1 | 	add	fp, #8
17318     A7 3C 68 FC | 	wrlong	#30, fp
1731c     08 4E 85 F1 | 	sub	fp, #8
17320     20 02 90 FD | 	jmp	#LR__1930
17324                 | LR__1923
17324                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
17324     08 4E 05 F1 | 	add	fp, #8
17328     A7 1E 02 FB | 	rdlong	local01, fp
1732c     08 4E 85 F1 | 	sub	fp, #8
17330     1C 1E 0E F2 | 	cmp	local01, #28 wz
17334     14 4E 05 A1 |  if_e	add	fp, #20
17338     A7 24 02 AB |  if_e	rdlong	local04, fp
1733c     14 4E 85 A1 |  if_e	sub	fp, #20
17340     12 23 02 A6 |  if_e	mov	local03, local04
17344     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
17348     1C 00 90 5D |  if_ne	jmp	#LR__1924
1734c     A7 1E 02 FB | 	rdlong	local01, fp
17350     0C 4E 05 F1 | 	add	fp, #12
17354     A7 20 02 FB | 	rdlong	local02, fp
17358     0C 4E 85 F1 | 	sub	fp, #12
1735c     10 1F 82 F1 | 	sub	local01, local02
17360     A7 1E 62 FC | 	wrlong	local01, fp
17364     DC 01 90 FD | 	jmp	#LR__1930
17368                 | LR__1924
17368                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
17368     08 4E 05 F1 | 	add	fp, #8
1736c     A7 1E 02 FB | 	rdlong	local01, fp
17370     08 4E 85 F1 | 	sub	fp, #8
17374     1C 1E 0E F2 | 	cmp	local01, #28 wz
17378     14 4E 05 A1 |  if_e	add	fp, #20
1737c     A7 24 02 AB |  if_e	rdlong	local04, fp
17380     14 4E 85 A1 |  if_e	sub	fp, #20
17384     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
17388     1C 00 90 5D |  if_ne	jmp	#LR__1925
1738c     A7 1E 02 FB | 	rdlong	local01, fp
17390     0C 4E 05 F1 | 	add	fp, #12
17394     A7 20 02 FB | 	rdlong	local02, fp
17398     0C 4E 85 F1 | 	sub	fp, #12
1739c     10 1F 82 F1 | 	sub	local01, local02
173a0     A7 1E 62 FC | 	wrlong	local01, fp
173a4     9C 01 90 FD | 	jmp	#LR__1930
173a8                 | LR__1925
173a8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
173a8     08 4E 05 F1 | 	add	fp, #8
173ac     A7 1E 02 FB | 	rdlong	local01, fp
173b0     08 4E 85 F1 | 	sub	fp, #8
173b4     1C 1E 0E F2 | 	cmp	local01, #28 wz
173b8     14 4E 05 A1 |  if_e	add	fp, #20
173bc     A7 22 02 AB |  if_e	rdlong	local03, fp
173c0     14 4E 85 A1 |  if_e	sub	fp, #20
173c4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
173c8     44 00 90 5D |  if_ne	jmp	#LR__1926
173cc     A7 12 02 FB | 	rdlong	arg01, fp
173d0     09 13 52 F6 | 	abs	arg01, arg01 wc
173d4     1F 26 C6 C9 |  if_b	decod	local05, #31
173d8     00 26 06 36 |  if_ae	mov	local05, #0
173dc     34 BD B0 FD | 	call	#__system___float_fromuns
173e0     13 FB 61 F5 | 	xor	result1, local05
173e4     FD 12 02 F6 | 	mov	arg01, result1
173e8     0C 4E 05 F1 | 	add	fp, #12
173ec     A7 14 02 FB | 	rdlong	arg02, fp
173f0     0C 4E 85 F1 | 	sub	fp, #12
173f4     1F 14 E6 F4 | 	bitnot	arg02, #31
173f8     4C BD B0 FD | 	call	#__system___float_add
173fc     A7 FA 61 FC | 	wrlong	result1, fp
17400     08 4E 05 F1 | 	add	fp, #8
17404     A7 3C 68 FC | 	wrlong	#30, fp
17408     08 4E 85 F1 | 	sub	fp, #8
1740c     34 01 90 FD | 	jmp	#LR__1930
17410                 | LR__1926
17410                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
17410     08 4E 05 F1 | 	add	fp, #8
17414     A7 1E 02 FB | 	rdlong	local01, fp
17418     08 4E 85 F1 | 	sub	fp, #8
1741c     1E 1E 0E F2 | 	cmp	local01, #30 wz
17420     14 4E 05 A1 |  if_e	add	fp, #20
17424     A7 22 02 AB |  if_e	rdlong	local03, fp
17428     14 4E 85 A1 |  if_e	sub	fp, #20
1742c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
17430     2C 00 90 5D |  if_ne	jmp	#LR__1927
17434     A7 1E 02 FB | 	rdlong	local01, fp
17438     0C 4E 05 F1 | 	add	fp, #12
1743c     A7 12 02 FB | 	rdlong	arg01, fp
17440     0C 4E 85 F1 | 	sub	fp, #12
17444     CC BC B0 FD | 	call	#__system___float_fromuns
17448     FD 14 02 F6 | 	mov	arg02, result1
1744c     0F 13 02 F6 | 	mov	arg01, local01
17450     1F 14 E6 F4 | 	bitnot	arg02, #31
17454     F0 BC B0 FD | 	call	#__system___float_add
17458     A7 FA 61 FC | 	wrlong	result1, fp
1745c     E4 00 90 FD | 	jmp	#LR__1930
17460                 | LR__1927
17460                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
17460     08 4E 05 F1 | 	add	fp, #8
17464     A7 1E 02 FB | 	rdlong	local01, fp
17468     08 4E 85 F1 | 	sub	fp, #8
1746c     1E 1E 0E F2 | 	cmp	local01, #30 wz
17470     14 4E 05 A1 |  if_e	add	fp, #20
17474     A7 22 02 AB |  if_e	rdlong	local03, fp
17478     14 4E 85 A1 |  if_e	sub	fp, #20
1747c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
17480     3C 00 90 5D |  if_ne	jmp	#LR__1928
17484     A7 1E 02 FB | 	rdlong	local01, fp
17488     0C 4E 05 F1 | 	add	fp, #12
1748c     A7 12 02 FB | 	rdlong	arg01, fp
17490     0C 4E 85 F1 | 	sub	fp, #12
17494     09 13 52 F6 | 	abs	arg01, arg01 wc
17498     1F 26 C6 C9 |  if_b	decod	local05, #31
1749c     00 26 06 36 |  if_ae	mov	local05, #0
174a0     70 BC B0 FD | 	call	#__system___float_fromuns
174a4     13 FB 61 F5 | 	xor	result1, local05
174a8     FD 14 02 F6 | 	mov	arg02, result1
174ac     0F 13 02 F6 | 	mov	arg01, local01
174b0     1F 14 E6 F4 | 	bitnot	arg02, #31
174b4     90 BC B0 FD | 	call	#__system___float_add
174b8     A7 FA 61 FC | 	wrlong	result1, fp
174bc     84 00 90 FD | 	jmp	#LR__1930
174c0                 | LR__1928
174c0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
174c0     08 4E 05 F1 | 	add	fp, #8
174c4     A7 1E 02 FB | 	rdlong	local01, fp
174c8     08 4E 85 F1 | 	sub	fp, #8
174cc     1E 1E 0E F2 | 	cmp	local01, #30 wz
174d0     14 4E 05 A1 |  if_e	add	fp, #20
174d4     A7 22 02 AB |  if_e	rdlong	local03, fp
174d8     14 4E 85 A1 |  if_e	sub	fp, #20
174dc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
174e0     20 00 90 5D |  if_ne	jmp	#LR__1929
174e4     A7 12 02 FB | 	rdlong	arg01, fp
174e8     0C 4E 05 F1 | 	add	fp, #12
174ec     A7 14 02 FB | 	rdlong	arg02, fp
174f0     0C 4E 85 F1 | 	sub	fp, #12
174f4     1F 14 E6 F4 | 	bitnot	arg02, #31
174f8     4C BC B0 FD | 	call	#__system___float_add
174fc     A7 FA 61 FC | 	wrlong	result1, fp
17500     40 00 90 FD | 	jmp	#LR__1930
17504                 | LR__1929
17504                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
17504     08 4E 05 F1 | 	add	fp, #8
17508     A7 1E 02 FB | 	rdlong	local01, fp
1750c     08 4E 85 F1 | 	sub	fp, #8
17510     1F 1E 0E F2 | 	cmp	local01, #31 wz
17514     14 4E 05 51 |  if_ne	add	fp, #20
17518     A7 22 02 5B |  if_ne	rdlong	local03, fp
1751c     14 4E 85 51 |  if_ne	sub	fp, #20
17520     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
17524     A7 06 68 AC |  if_e	wrlong	#3, fp
17528     08 4E 05 A1 |  if_e	add	fp, #8
1752c     A7 FE 69 AC |  if_e	wrlong	#255, fp
17530     08 4E 85 A1 |  if_e	sub	fp, #8
17534     A7 0A 68 5C |  if_ne	wrlong	#5, fp
17538     08 4E 05 51 |  if_ne	add	fp, #8
1753c     A7 FE 69 5C |  if_ne	wrlong	#255, fp
17540     08 4E 85 51 |  if_ne	sub	fp, #8
17544                 | LR__1930
17544     A7 12 02 F6 | 	mov	arg01, fp
17548     F8 3D BF FD | 	call	#_push
1754c     A7 F0 03 F6 | 	mov	ptra, fp
17550     B2 00 A0 FD | 	call	#popregs_
17554                 | _do_minus_ret
17554     2D 00 64 FD | 	ret
17558                 | 
17558                 | ' 
17558                 | ' '--------------------------------- negative (-), one argument negative
17558                 | ' 
17558                 | ' sub do_negative
17558                 | _do_negative
17558     02 4A 05 F6 | 	mov	COUNT_, #2
1755c     A8 00 A0 FD | 	call	#pushregs_
17560     0C F0 07 F1 | 	add	ptra, #12
17564     44 3D BF FD | 	call	#_pop
17568     FF 1E 02 F6 | 	mov	local01, result3
1756c     A7 FA 61 FC | 	wrlong	result1, fp
17570     04 4E 05 F1 | 	add	fp, #4
17574     A7 FC 61 FC | 	wrlong	result2, fp
17578     04 4E 05 F1 | 	add	fp, #4
1757c     A7 1E 62 FC | 	wrlong	local01, fp
17580                 | ' t1=pop()
17580                 | ' if t1.result_type=result_int then 
17580     08 4E 85 F1 | 	sub	fp, #8
17584     1C 1E 0E F2 | 	cmp	local01, #28 wz
17588     A7 20 02 AB |  if_e	rdlong	local02, fp
1758c     10 1F 62 A6 |  if_e	neg	local01, local02
17590     A7 1E 62 AC |  if_e	wrlong	local01, fp
17594     5C 00 90 AD |  if_e	jmp	#LR__1942
17598     08 4E 05 F1 | 	add	fp, #8
1759c     A7 1E 02 FB | 	rdlong	local01, fp
175a0     08 4E 85 F1 | 	sub	fp, #8
175a4     1D 1E 0E F2 | 	cmp	local01, #29 wz
175a8     1C 00 90 5D |  if_ne	jmp	#LR__1940
175ac     A7 20 02 FB | 	rdlong	local02, fp
175b0     10 1F 62 F6 | 	neg	local01, local02
175b4     A7 1E 62 FC | 	wrlong	local01, fp
175b8     08 4E 05 F1 | 	add	fp, #8
175bc     A7 38 68 FC | 	wrlong	#28, fp
175c0     08 4E 85 F1 | 	sub	fp, #8
175c4     2C 00 90 FD | 	jmp	#LR__1941
175c8                 | LR__1940
175c8     08 4E 05 F1 | 	add	fp, #8
175cc     A7 1E 02 FB | 	rdlong	local01, fp
175d0     08 4E 85 F1 | 	sub	fp, #8
175d4     1E 1E 0E F2 | 	cmp	local01, #30 wz
175d8     A7 FA 01 AB |  if_e	rdlong	result1, fp
175dc     1F FA E5 A4 |  if_e	bitnot	result1, #31
175e0     A7 FA 61 AC |  if_e	wrlong	result1, fp
175e4     08 4E 05 51 |  if_ne	add	fp, #8
175e8     A7 FE 69 5C |  if_ne	wrlong	#255, fp
175ec     08 4E 85 51 |  if_ne	sub	fp, #8
175f0     A7 50 68 5C |  if_ne	wrlong	#40, fp
175f4                 | LR__1941
175f4                 | LR__1942
175f4     A7 12 02 F6 | 	mov	arg01, fp
175f8     48 3D BF FD | 	call	#_push
175fc     A7 F0 03 F6 | 	mov	ptra, fp
17600     B2 00 A0 FD | 	call	#popregs_
17604                 | _do_negative_ret
17604     2D 00 64 FD | 	ret
17608                 | 
17608                 | ' 
17608                 | ' '--------------------------------- MOD (modulo)
17608                 | ' 
17608                 | ' sub do_mod 
17608                 | _do_mod
17608     01 4A 05 F6 | 	mov	COUNT_, #1
1760c     A8 00 A0 FD | 	call	#pushregs_
17610     18 F0 07 F1 | 	add	ptra, #24
17614     94 3C BF FD | 	call	#_pop
17618     FD 7E 02 F6 | 	mov	muldivb_, result1
1761c     FE 7C 02 F6 | 	mov	muldiva_, result2
17620     FF 1E 02 F6 | 	mov	local01, result3
17624     0C 4E 05 F1 | 	add	fp, #12
17628     A7 7E 62 FC | 	wrlong	muldivb_, fp
1762c     04 4E 05 F1 | 	add	fp, #4
17630     A7 7C 62 FC | 	wrlong	muldiva_, fp
17634     04 4E 05 F1 | 	add	fp, #4
17638     A7 1E 62 FC | 	wrlong	local01, fp
1763c     14 4E 85 F1 | 	sub	fp, #20
17640     68 3C BF FD | 	call	#_pop
17644     A7 FA 61 FC | 	wrlong	result1, fp
17648     04 4E 05 F1 | 	add	fp, #4
1764c     A7 FC 61 FC | 	wrlong	result2, fp
17650     04 4E 05 F1 | 	add	fp, #4
17654     A7 FE 61 FC | 	wrlong	result3, fp
17658                 | ' 
17658                 | ' t2=pop()
17658                 | ' t1=pop()
17658                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
17658     08 4E 85 F1 | 	sub	fp, #8
1765c     1F FE 0D F2 | 	cmp	result3, #31 wz
17660     14 4E 05 51 |  if_ne	add	fp, #20
17664     A7 12 02 5B |  if_ne	rdlong	arg01, fp
17668     14 4E 85 51 |  if_ne	sub	fp, #20
1766c     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
17670     A7 14 68 AC |  if_e	wrlong	#10, fp
17674     08 4E 05 A1 |  if_e	add	fp, #8
17678     A7 FE 69 AC |  if_e	wrlong	#255, fp
1767c     08 4E 85 A1 |  if_e	sub	fp, #8
17680     90 01 90 AD |  if_e	jmp	#LR__1956
17684                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
17684     08 4E 05 F1 | 	add	fp, #8
17688     A7 7E 02 FB | 	rdlong	muldivb_, fp
1768c     08 4E 85 F1 | 	sub	fp, #8
17690     1E 7E 0E F2 | 	cmp	muldivb_, #30 wz
17694     1C 00 90 5D |  if_ne	jmp	#LR__1950
17698     08 4E 05 F1 | 	add	fp, #8
1769c     A7 38 68 FC | 	wrlong	#28, fp
176a0     08 4E 85 F1 | 	sub	fp, #8
176a4     A7 12 02 FB | 	rdlong	arg01, fp
176a8     00 14 06 F6 | 	mov	arg02, #0
176ac     30 C3 B0 FD | 	call	#__system___float_tointeger
176b0     A7 FA 61 FC | 	wrlong	result1, fp
176b4                 | LR__1950
176b4                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
176b4     14 4E 05 F1 | 	add	fp, #20
176b8     A7 7E 02 FB | 	rdlong	muldivb_, fp
176bc     14 4E 85 F1 | 	sub	fp, #20
176c0     1E 7E 0E F2 | 	cmp	muldivb_, #30 wz
176c4     28 00 90 5D |  if_ne	jmp	#LR__1951
176c8     14 4E 05 F1 | 	add	fp, #20
176cc     A7 38 68 FC | 	wrlong	#28, fp
176d0     08 4E 85 F1 | 	sub	fp, #8
176d4     A7 12 02 FB | 	rdlong	arg01, fp
176d8     0C 4E 85 F1 | 	sub	fp, #12
176dc     00 14 06 F6 | 	mov	arg02, #0
176e0     FC C2 B0 FD | 	call	#__system___float_tointeger
176e4     0C 4E 05 F1 | 	add	fp, #12
176e8     A7 FA 61 FC | 	wrlong	result1, fp
176ec     0C 4E 85 F1 | 	sub	fp, #12
176f0                 | LR__1951
176f0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
176f0     08 4E 05 F1 | 	add	fp, #8
176f4     A7 7E 02 FB | 	rdlong	muldivb_, fp
176f8     08 4E 85 F1 | 	sub	fp, #8
176fc     1D 7E 0E F2 | 	cmp	muldivb_, #29 wz
17700     14 4E 05 A1 |  if_e	add	fp, #20
17704     A7 1E 02 AB |  if_e	rdlong	local01, fp
17708     14 4E 85 A1 |  if_e	sub	fp, #20
1770c     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
17710     20 00 90 5D |  if_ne	jmp	#LR__1952
17714     0C 4E 05 F1 | 	add	fp, #12
17718     A7 1E 02 FB | 	rdlong	local01, fp
1771c     0C 4E 85 F1 | 	sub	fp, #12
17720     A7 7E 02 FB | 	rdlong	muldivb_, fp
17724     0F 7F 12 FD | 	qdiv	muldivb_, local01
17728     19 1E 62 FD | 	getqy	local01
1772c     A7 1E 62 FC | 	wrlong	local01, fp
17730     E0 00 90 FD | 	jmp	#LR__1956
17734                 | LR__1952
17734                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
17734     08 4E 05 F1 | 	add	fp, #8
17738     A7 7E 02 FB | 	rdlong	muldivb_, fp
1773c     08 4E 85 F1 | 	sub	fp, #8
17740     1D 7E 0E F2 | 	cmp	muldivb_, #29 wz
17744     14 4E 05 A1 |  if_e	add	fp, #20
17748     A7 1E 02 AB |  if_e	rdlong	local01, fp
1774c     14 4E 85 A1 |  if_e	sub	fp, #20
17750     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
17754     2C 00 90 5D |  if_ne	jmp	#LR__1953
17758     0C 4E 05 F1 | 	add	fp, #12
1775c     A7 1E 02 FB | 	rdlong	local01, fp
17760     0C 4E 85 F1 | 	sub	fp, #12
17764     A7 7E 02 FB | 	rdlong	muldivb_, fp
17768     0F 7F 12 FD | 	qdiv	muldivb_, local01
1776c     19 1E 62 FD | 	getqy	local01
17770     A7 1E 62 FC | 	wrlong	local01, fp
17774     08 4E 05 F1 | 	add	fp, #8
17778     A7 38 68 FC | 	wrlong	#28, fp
1777c     08 4E 85 F1 | 	sub	fp, #8
17780     90 00 90 FD | 	jmp	#LR__1956
17784                 | LR__1953
17784                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
17784     08 4E 05 F1 | 	add	fp, #8
17788     A7 7E 02 FB | 	rdlong	muldivb_, fp
1778c     08 4E 85 F1 | 	sub	fp, #8
17790     1C 7E 0E F2 | 	cmp	muldivb_, #28 wz
17794     14 4E 05 A1 |  if_e	add	fp, #20
17798     A7 1E 02 AB |  if_e	rdlong	local01, fp
1779c     14 4E 85 A1 |  if_e	sub	fp, #20
177a0     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
177a4     1C 00 90 5D |  if_ne	jmp	#LR__1954
177a8     A7 7C 02 FB | 	rdlong	muldiva_, fp
177ac     0C 4E 05 F1 | 	add	fp, #12
177b0     A7 7E 02 FB | 	rdlong	muldivb_, fp
177b4     0C 4E 85 F1 | 	sub	fp, #12
177b8     BA 00 A0 FD | 	call	#divide_
177bc     A7 7C 62 FC | 	wrlong	muldiva_, fp
177c0     50 00 90 FD | 	jmp	#LR__1956
177c4                 | LR__1954
177c4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
177c4     08 4E 05 F1 | 	add	fp, #8
177c8     A7 7E 02 FB | 	rdlong	muldivb_, fp
177cc     08 4E 85 F1 | 	sub	fp, #8
177d0     1C 7E 0E F2 | 	cmp	muldivb_, #28 wz
177d4     14 4E 05 A1 |  if_e	add	fp, #20
177d8     A7 1E 02 AB |  if_e	rdlong	local01, fp
177dc     14 4E 85 A1 |  if_e	sub	fp, #20
177e0     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
177e4     1C 00 90 5D |  if_ne	jmp	#LR__1955
177e8     A7 7C 02 FB | 	rdlong	muldiva_, fp
177ec     0C 4E 05 F1 | 	add	fp, #12
177f0     A7 7E 02 FB | 	rdlong	muldivb_, fp
177f4     0C 4E 85 F1 | 	sub	fp, #12
177f8     BA 00 A0 FD | 	call	#divide_
177fc     A7 7C 62 FC | 	wrlong	muldiva_, fp
17800     10 00 90 FD | 	jmp	#LR__1956
17804                 | LR__1955
17804     A7 16 68 FC | 	wrlong	#11, fp
17808     08 4E 05 F1 | 	add	fp, #8
1780c     A7 FE 69 FC | 	wrlong	#255, fp
17810     08 4E 85 F1 | 	sub	fp, #8
17814                 | LR__1956
17814     A7 12 02 F6 | 	mov	arg01, fp
17818     28 3B BF FD | 	call	#_push
1781c     A7 F0 03 F6 | 	mov	ptra, fp
17820     B2 00 A0 FD | 	call	#popregs_
17824                 | _do_mod_ret
17824     2D 00 64 FD | 	ret
17828                 | 
17828                 | ' 
17828                 | ' '--------------------------------- mul (*)
17828                 | ' 
17828                 | ' sub do_mul
17828                 | _do_mul
17828     05 4A 05 F6 | 	mov	COUNT_, #5
1782c     A8 00 A0 FD | 	call	#pushregs_
17830     18 F0 07 F1 | 	add	ptra, #24
17834     74 3A BF FD | 	call	#_pop
17838     FD 1E 02 F6 | 	mov	local01, result1
1783c     FE 20 02 F6 | 	mov	local02, result2
17840     FF 22 02 F6 | 	mov	local03, result3
17844     0C 4E 05 F1 | 	add	fp, #12
17848     A7 1E 62 FC | 	wrlong	local01, fp
1784c     04 4E 05 F1 | 	add	fp, #4
17850     A7 20 62 FC | 	wrlong	local02, fp
17854     04 4E 05 F1 | 	add	fp, #4
17858     A7 22 62 FC | 	wrlong	local03, fp
1785c     14 4E 85 F1 | 	sub	fp, #20
17860     48 3A BF FD | 	call	#_pop
17864     FF 22 02 F6 | 	mov	local03, result3
17868     A7 FA 61 FC | 	wrlong	result1, fp
1786c     04 4E 05 F1 | 	add	fp, #4
17870     A7 FC 61 FC | 	wrlong	result2, fp
17874     04 4E 05 F1 | 	add	fp, #4
17878     A7 22 62 FC | 	wrlong	local03, fp
1787c                 | ' 
1787c                 | ' t2=pop()
1787c                 | ' t1=pop()
1787c                 | ' 
1787c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
1787c     08 4E 85 F1 | 	sub	fp, #8
17880     1D 22 0E F2 | 	cmp	local03, #29 wz
17884     14 4E 05 A1 |  if_e	add	fp, #20
17888     A7 24 02 AB |  if_e	rdlong	local04, fp
1788c     14 4E 85 A1 |  if_e	sub	fp, #20
17890     12 23 02 A6 |  if_e	mov	local03, local04
17894     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
17898     20 00 90 5D |  if_ne	jmp	#LR__1960
1789c     A7 20 02 FB | 	rdlong	local02, fp
178a0     0C 4E 05 F1 | 	add	fp, #12
178a4     A7 22 02 FB | 	rdlong	local03, fp
178a8     11 21 02 FD | 	qmul	local02, local03
178ac     0C 4E 85 F1 | 	sub	fp, #12
178b0     18 1E 62 FD | 	getqx	local01
178b4     A7 1E 62 FC | 	wrlong	local01, fp
178b8     C4 02 90 FD | 	jmp	#LR__1969
178bc                 | LR__1960
178bc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
178bc     08 4E 05 F1 | 	add	fp, #8
178c0     A7 1E 02 FB | 	rdlong	local01, fp
178c4     08 4E 85 F1 | 	sub	fp, #8
178c8     1D 1E 0E F2 | 	cmp	local01, #29 wz
178cc     14 4E 05 A1 |  if_e	add	fp, #20
178d0     A7 24 02 AB |  if_e	rdlong	local04, fp
178d4     14 4E 85 A1 |  if_e	sub	fp, #20
178d8     12 23 02 A6 |  if_e	mov	local03, local04
178dc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
178e0     2C 00 90 5D |  if_ne	jmp	#LR__1961
178e4     A7 20 02 FB | 	rdlong	local02, fp
178e8     0C 4E 05 F1 | 	add	fp, #12
178ec     A7 22 02 FB | 	rdlong	local03, fp
178f0     11 21 02 FD | 	qmul	local02, local03
178f4     0C 4E 85 F1 | 	sub	fp, #12
178f8     18 1E 62 FD | 	getqx	local01
178fc     A7 1E 62 FC | 	wrlong	local01, fp
17900     08 4E 05 F1 | 	add	fp, #8
17904     A7 38 68 FC | 	wrlong	#28, fp
17908     08 4E 85 F1 | 	sub	fp, #8
1790c     70 02 90 FD | 	jmp	#LR__1969
17910                 | LR__1961
17910                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
17910     08 4E 05 F1 | 	add	fp, #8
17914     A7 1E 02 FB | 	rdlong	local01, fp
17918     08 4E 85 F1 | 	sub	fp, #8
1791c     1D 1E 0E F2 | 	cmp	local01, #29 wz
17920     14 4E 05 A1 |  if_e	add	fp, #20
17924     A7 24 02 AB |  if_e	rdlong	local04, fp
17928     14 4E 85 A1 |  if_e	sub	fp, #20
1792c     12 23 02 A6 |  if_e	mov	local03, local04
17930     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
17934     30 00 90 5D |  if_ne	jmp	#LR__1962
17938     A7 12 02 FB | 	rdlong	arg01, fp
1793c     D4 B7 B0 FD | 	call	#__system___float_fromuns
17940     FD 12 02 F6 | 	mov	arg01, result1
17944     0C 4E 05 F1 | 	add	fp, #12
17948     A7 14 02 FB | 	rdlong	arg02, fp
1794c     0C 4E 85 F1 | 	sub	fp, #12
17950     C4 BB B0 FD | 	call	#__system___float_mul
17954     A7 FA 61 FC | 	wrlong	result1, fp
17958     08 4E 05 F1 | 	add	fp, #8
1795c     A7 3C 68 FC | 	wrlong	#30, fp
17960     08 4E 85 F1 | 	sub	fp, #8
17964     18 02 90 FD | 	jmp	#LR__1969
17968                 | LR__1962
17968                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
17968     08 4E 05 F1 | 	add	fp, #8
1796c     A7 1E 02 FB | 	rdlong	local01, fp
17970     08 4E 85 F1 | 	sub	fp, #8
17974     1C 1E 0E F2 | 	cmp	local01, #28 wz
17978     14 4E 05 A1 |  if_e	add	fp, #20
1797c     A7 24 02 AB |  if_e	rdlong	local04, fp
17980     14 4E 85 A1 |  if_e	sub	fp, #20
17984     12 23 02 A6 |  if_e	mov	local03, local04
17988     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1798c     20 00 90 5D |  if_ne	jmp	#LR__1963
17990     A7 20 02 FB | 	rdlong	local02, fp
17994     0C 4E 05 F1 | 	add	fp, #12
17998     A7 22 02 FB | 	rdlong	local03, fp
1799c     11 21 02 FD | 	qmul	local02, local03
179a0     0C 4E 85 F1 | 	sub	fp, #12
179a4     18 1E 62 FD | 	getqx	local01
179a8     A7 1E 62 FC | 	wrlong	local01, fp
179ac     D0 01 90 FD | 	jmp	#LR__1969
179b0                 | LR__1963
179b0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
179b0     08 4E 05 F1 | 	add	fp, #8
179b4     A7 1E 02 FB | 	rdlong	local01, fp
179b8     08 4E 85 F1 | 	sub	fp, #8
179bc     1C 1E 0E F2 | 	cmp	local01, #28 wz
179c0     14 4E 05 A1 |  if_e	add	fp, #20
179c4     A7 24 02 AB |  if_e	rdlong	local04, fp
179c8     14 4E 85 A1 |  if_e	sub	fp, #20
179cc     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
179d0     20 00 90 5D |  if_ne	jmp	#LR__1964
179d4     A7 20 02 FB | 	rdlong	local02, fp
179d8     0C 4E 05 F1 | 	add	fp, #12
179dc     A7 22 02 FB | 	rdlong	local03, fp
179e0     11 21 02 FD | 	qmul	local02, local03
179e4     0C 4E 85 F1 | 	sub	fp, #12
179e8     18 1E 62 FD | 	getqx	local01
179ec     A7 1E 62 FC | 	wrlong	local01, fp
179f0     8C 01 90 FD | 	jmp	#LR__1969
179f4                 | LR__1964
179f4                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
179f4     08 4E 05 F1 | 	add	fp, #8
179f8     A7 1E 02 FB | 	rdlong	local01, fp
179fc     08 4E 85 F1 | 	sub	fp, #8
17a00     1C 1E 0E F2 | 	cmp	local01, #28 wz
17a04     14 4E 05 A1 |  if_e	add	fp, #20
17a08     A7 22 02 AB |  if_e	rdlong	local03, fp
17a0c     14 4E 85 A1 |  if_e	sub	fp, #20
17a10     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
17a14     40 00 90 5D |  if_ne	jmp	#LR__1965
17a18     A7 12 02 FB | 	rdlong	arg01, fp
17a1c     09 13 52 F6 | 	abs	arg01, arg01 wc
17a20     1F 26 C6 C9 |  if_b	decod	local05, #31
17a24     00 26 06 36 |  if_ae	mov	local05, #0
17a28     E8 B6 B0 FD | 	call	#__system___float_fromuns
17a2c     13 FB 61 F5 | 	xor	result1, local05
17a30     FD 12 02 F6 | 	mov	arg01, result1
17a34     0C 4E 05 F1 | 	add	fp, #12
17a38     A7 14 02 FB | 	rdlong	arg02, fp
17a3c     0C 4E 85 F1 | 	sub	fp, #12
17a40     D4 BA B0 FD | 	call	#__system___float_mul
17a44     A7 FA 61 FC | 	wrlong	result1, fp
17a48     08 4E 05 F1 | 	add	fp, #8
17a4c     A7 3C 68 FC | 	wrlong	#30, fp
17a50     08 4E 85 F1 | 	sub	fp, #8
17a54     28 01 90 FD | 	jmp	#LR__1969
17a58                 | LR__1965
17a58                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
17a58     08 4E 05 F1 | 	add	fp, #8
17a5c     A7 1E 02 FB | 	rdlong	local01, fp
17a60     08 4E 85 F1 | 	sub	fp, #8
17a64     1E 1E 0E F2 | 	cmp	local01, #30 wz
17a68     14 4E 05 A1 |  if_e	add	fp, #20
17a6c     A7 22 02 AB |  if_e	rdlong	local03, fp
17a70     14 4E 85 A1 |  if_e	sub	fp, #20
17a74     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
17a78     28 00 90 5D |  if_ne	jmp	#LR__1966
17a7c     A7 1E 02 FB | 	rdlong	local01, fp
17a80     0C 4E 05 F1 | 	add	fp, #12
17a84     A7 12 02 FB | 	rdlong	arg01, fp
17a88     0C 4E 85 F1 | 	sub	fp, #12
17a8c     84 B6 B0 FD | 	call	#__system___float_fromuns
17a90     FD 14 02 F6 | 	mov	arg02, result1
17a94     0F 13 02 F6 | 	mov	arg01, local01
17a98     7C BA B0 FD | 	call	#__system___float_mul
17a9c     A7 FA 61 FC | 	wrlong	result1, fp
17aa0     DC 00 90 FD | 	jmp	#LR__1969
17aa4                 | LR__1966
17aa4                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
17aa4     08 4E 05 F1 | 	add	fp, #8
17aa8     A7 1E 02 FB | 	rdlong	local01, fp
17aac     08 4E 85 F1 | 	sub	fp, #8
17ab0     1E 1E 0E F2 | 	cmp	local01, #30 wz
17ab4     14 4E 05 A1 |  if_e	add	fp, #20
17ab8     A7 22 02 AB |  if_e	rdlong	local03, fp
17abc     14 4E 85 A1 |  if_e	sub	fp, #20
17ac0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
17ac4     38 00 90 5D |  if_ne	jmp	#LR__1967
17ac8     A7 1E 02 FB | 	rdlong	local01, fp
17acc     0C 4E 05 F1 | 	add	fp, #12
17ad0     A7 12 02 FB | 	rdlong	arg01, fp
17ad4     0C 4E 85 F1 | 	sub	fp, #12
17ad8     09 13 52 F6 | 	abs	arg01, arg01 wc
17adc     1F 26 C6 C9 |  if_b	decod	local05, #31
17ae0     00 26 06 36 |  if_ae	mov	local05, #0
17ae4     2C B6 B0 FD | 	call	#__system___float_fromuns
17ae8     13 FB 61 F5 | 	xor	result1, local05
17aec     FD 14 02 F6 | 	mov	arg02, result1
17af0     0F 13 02 F6 | 	mov	arg01, local01
17af4     20 BA B0 FD | 	call	#__system___float_mul
17af8     A7 FA 61 FC | 	wrlong	result1, fp
17afc     80 00 90 FD | 	jmp	#LR__1969
17b00                 | LR__1967
17b00                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
17b00     08 4E 05 F1 | 	add	fp, #8
17b04     A7 1E 02 FB | 	rdlong	local01, fp
17b08     08 4E 85 F1 | 	sub	fp, #8
17b0c     1E 1E 0E F2 | 	cmp	local01, #30 wz
17b10     14 4E 05 A1 |  if_e	add	fp, #20
17b14     A7 22 02 AB |  if_e	rdlong	local03, fp
17b18     14 4E 85 A1 |  if_e	sub	fp, #20
17b1c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
17b20     1C 00 90 5D |  if_ne	jmp	#LR__1968
17b24     A7 12 02 FB | 	rdlong	arg01, fp
17b28     0C 4E 05 F1 | 	add	fp, #12
17b2c     A7 14 02 FB | 	rdlong	arg02, fp
17b30     0C 4E 85 F1 | 	sub	fp, #12
17b34     E0 B9 B0 FD | 	call	#__system___float_mul
17b38     A7 FA 61 FC | 	wrlong	result1, fp
17b3c     40 00 90 FD | 	jmp	#LR__1969
17b40                 | LR__1968
17b40                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
17b40     08 4E 05 F1 | 	add	fp, #8
17b44     A7 1E 02 FB | 	rdlong	local01, fp
17b48     08 4E 85 F1 | 	sub	fp, #8
17b4c     1F 1E 0E F2 | 	cmp	local01, #31 wz
17b50     14 4E 05 51 |  if_ne	add	fp, #20
17b54     A7 22 02 5B |  if_ne	rdlong	local03, fp
17b58     14 4E 85 51 |  if_ne	sub	fp, #20
17b5c     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
17b60     A7 10 68 AC |  if_e	wrlong	#8, fp
17b64     08 4E 05 A1 |  if_e	add	fp, #8
17b68     A7 FE 69 AC |  if_e	wrlong	#255, fp
17b6c     08 4E 85 A1 |  if_e	sub	fp, #8
17b70     A7 12 68 5C |  if_ne	wrlong	#9, fp
17b74     08 4E 05 51 |  if_ne	add	fp, #8
17b78     A7 FE 69 5C |  if_ne	wrlong	#255, fp
17b7c     08 4E 85 51 |  if_ne	sub	fp, #8
17b80                 | LR__1969
17b80     A7 12 02 F6 | 	mov	arg01, fp
17b84     BC 37 BF FD | 	call	#_push
17b88     A7 F0 03 F6 | 	mov	ptra, fp
17b8c     B2 00 A0 FD | 	call	#popregs_
17b90                 | _do_mul_ret
17b90     2D 00 64 FD | 	ret
17b94                 | 
17b94                 | ' 
17b94                 | ' '--------------------------------- OR
17b94                 | ' 
17b94                 | ' sub do_or 
17b94                 | _do_or
17b94     03 4A 05 F6 | 	mov	COUNT_, #3
17b98     A8 00 A0 FD | 	call	#pushregs_
17b9c     18 F0 07 F1 | 	add	ptra, #24
17ba0     08 37 BF FD | 	call	#_pop
17ba4     FD 12 02 F6 | 	mov	arg01, result1
17ba8     FE 1E 02 F6 | 	mov	local01, result2
17bac     FF 20 02 F6 | 	mov	local02, result3
17bb0     0C 4E 05 F1 | 	add	fp, #12
17bb4     A7 12 62 FC | 	wrlong	arg01, fp
17bb8     04 4E 05 F1 | 	add	fp, #4
17bbc     A7 1E 62 FC | 	wrlong	local01, fp
17bc0     04 4E 05 F1 | 	add	fp, #4
17bc4     A7 20 62 FC | 	wrlong	local02, fp
17bc8     14 4E 85 F1 | 	sub	fp, #20
17bcc     DC 36 BF FD | 	call	#_pop
17bd0     FF 22 02 F6 | 	mov	local03, result3
17bd4     A7 FA 61 FC | 	wrlong	result1, fp
17bd8     04 4E 05 F1 | 	add	fp, #4
17bdc     A7 FC 61 FC | 	wrlong	result2, fp
17be0     04 4E 05 F1 | 	add	fp, #4
17be4     A7 22 62 FC | 	wrlong	local03, fp
17be8                 | ' 
17be8                 | ' t2=pop()
17be8                 | ' t1=pop()
17be8                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
17be8     08 4E 85 F1 | 	sub	fp, #8
17bec     1C 22 0E F2 | 	cmp	local03, #28 wz
17bf0     A7 22 02 AB |  if_e	rdlong	local03, fp
17bf4     A7 22 62 AC |  if_e	wrlong	local03, fp
17bf8     08 4E 05 A1 |  if_e	add	fp, #8
17bfc     A7 3A 68 AC |  if_e	wrlong	#29, fp
17c00     08 4E 85 A1 |  if_e	sub	fp, #8
17c04                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
17c04     14 4E 05 F1 | 	add	fp, #20
17c08     A7 22 02 FB | 	rdlong	local03, fp
17c0c     14 4E 85 F1 | 	sub	fp, #20
17c10     1C 22 0E F2 | 	cmp	local03, #28 wz
17c14     18 00 90 5D |  if_ne	jmp	#LR__1970
17c18     0C 4E 05 F1 | 	add	fp, #12
17c1c     A7 22 02 FB | 	rdlong	local03, fp
17c20     A7 22 62 FC | 	wrlong	local03, fp
17c24     08 4E 05 F1 | 	add	fp, #8
17c28     A7 3A 68 FC | 	wrlong	#29, fp
17c2c     14 4E 85 F1 | 	sub	fp, #20
17c30                 | LR__1970
17c30                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
17c30     08 4E 05 F1 | 	add	fp, #8
17c34     A7 22 02 FB | 	rdlong	local03, fp
17c38     08 4E 85 F1 | 	sub	fp, #8
17c3c     1F 22 0E F2 | 	cmp	local03, #31 wz
17c40     14 4E 05 51 |  if_ne	add	fp, #20
17c44     A7 20 02 5B |  if_ne	rdlong	local02, fp
17c48     14 4E 85 51 |  if_ne	sub	fp, #20
17c4c     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
17c50     08 4E 05 51 |  if_ne	add	fp, #8
17c54     A7 22 02 5B |  if_ne	rdlong	local03, fp
17c58     08 4E 85 51 |  if_ne	sub	fp, #8
17c5c     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
17c60     14 4E 05 51 |  if_ne	add	fp, #20
17c64     14 4E 85 51 |  if_ne	sub	fp, #20
17c68     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
17c6c     A7 0C 68 AC |  if_e	wrlong	#6, fp
17c70     08 4E 05 A1 |  if_e	add	fp, #8
17c74     A7 FE 69 AC |  if_e	wrlong	#255, fp
17c78     08 4E 85 A1 |  if_e	sub	fp, #8
17c7c     18 00 90 AD |  if_e	jmp	#LR__1971
17c80     A7 22 02 FB | 	rdlong	local03, fp
17c84     0C 4E 05 F1 | 	add	fp, #12
17c88     A7 1E 02 FB | 	rdlong	local01, fp
17c8c     0C 4E 85 F1 | 	sub	fp, #12
17c90     0F 23 42 F5 | 	or	local03, local01
17c94     A7 22 62 FC | 	wrlong	local03, fp
17c98                 | LR__1971
17c98     A7 12 02 F6 | 	mov	arg01, fp
17c9c     A4 36 BF FD | 	call	#_push
17ca0     A7 F0 03 F6 | 	mov	ptra, fp
17ca4     B2 00 A0 FD | 	call	#popregs_
17ca8                 | _do_or_ret
17ca8     2D 00 64 FD | 	ret
17cac                 | 
17cac                 | ' 
17cac                 | ' '--------------------------------- plus (+)
17cac                 | ' 
17cac                 | ' sub do_plus 
17cac                 | _do_plus
17cac     05 4A 05 F6 | 	mov	COUNT_, #5
17cb0     A8 00 A0 FD | 	call	#pushregs_
17cb4     18 F0 07 F1 | 	add	ptra, #24
17cb8     F0 35 BF FD | 	call	#_pop
17cbc     FD 1E 02 F6 | 	mov	local01, result1
17cc0     FE 20 02 F6 | 	mov	local02, result2
17cc4     FF 22 02 F6 | 	mov	local03, result3
17cc8     0C 4E 05 F1 | 	add	fp, #12
17ccc     A7 1E 62 FC | 	wrlong	local01, fp
17cd0     04 4E 05 F1 | 	add	fp, #4
17cd4     A7 20 62 FC | 	wrlong	local02, fp
17cd8     04 4E 05 F1 | 	add	fp, #4
17cdc     A7 22 62 FC | 	wrlong	local03, fp
17ce0     14 4E 85 F1 | 	sub	fp, #20
17ce4     C4 35 BF FD | 	call	#_pop
17ce8     FF 22 02 F6 | 	mov	local03, result3
17cec     A7 FA 61 FC | 	wrlong	result1, fp
17cf0     04 4E 05 F1 | 	add	fp, #4
17cf4     A7 FC 61 FC | 	wrlong	result2, fp
17cf8     04 4E 05 F1 | 	add	fp, #4
17cfc     A7 22 62 FC | 	wrlong	local03, fp
17d00                 | ' 
17d00                 | ' t2=pop()
17d00                 | ' t1=pop()
17d00                 | ' 
17d00                 | ' 
17d00                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
17d00     08 4E 85 F1 | 	sub	fp, #8
17d04     1D 22 0E F2 | 	cmp	local03, #29 wz
17d08     14 4E 05 A1 |  if_e	add	fp, #20
17d0c     A7 24 02 AB |  if_e	rdlong	local04, fp
17d10     14 4E 85 A1 |  if_e	sub	fp, #20
17d14     12 23 02 A6 |  if_e	mov	local03, local04
17d18     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
17d1c     1C 00 90 5D |  if_ne	jmp	#LR__1980
17d20     A7 1E 02 FB | 	rdlong	local01, fp
17d24     0C 4E 05 F1 | 	add	fp, #12
17d28     A7 20 02 FB | 	rdlong	local02, fp
17d2c     0C 4E 85 F1 | 	sub	fp, #12
17d30     10 1F 02 F1 | 	add	local01, local02
17d34     A7 1E 62 FC | 	wrlong	local01, fp
17d38     48 04 90 FD | 	jmp	#LR__1995
17d3c                 | LR__1980
17d3c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
17d3c     08 4E 05 F1 | 	add	fp, #8
17d40     A7 1E 02 FB | 	rdlong	local01, fp
17d44     08 4E 85 F1 | 	sub	fp, #8
17d48     1D 1E 0E F2 | 	cmp	local01, #29 wz
17d4c     14 4E 05 A1 |  if_e	add	fp, #20
17d50     A7 24 02 AB |  if_e	rdlong	local04, fp
17d54     14 4E 85 A1 |  if_e	sub	fp, #20
17d58     12 23 02 A6 |  if_e	mov	local03, local04
17d5c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
17d60     28 00 90 5D |  if_ne	jmp	#LR__1981
17d64     A7 1E 02 FB | 	rdlong	local01, fp
17d68     0C 4E 05 F1 | 	add	fp, #12
17d6c     A7 20 02 FB | 	rdlong	local02, fp
17d70     0C 4E 85 F1 | 	sub	fp, #12
17d74     10 1F 02 F1 | 	add	local01, local02
17d78     A7 1E 62 FC | 	wrlong	local01, fp
17d7c     08 4E 05 F1 | 	add	fp, #8
17d80     A7 38 68 FC | 	wrlong	#28, fp
17d84     08 4E 85 F1 | 	sub	fp, #8
17d88     F8 03 90 FD | 	jmp	#LR__1995
17d8c                 | LR__1981
17d8c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
17d8c     08 4E 05 F1 | 	add	fp, #8
17d90     A7 1E 02 FB | 	rdlong	local01, fp
17d94     08 4E 85 F1 | 	sub	fp, #8
17d98     1D 1E 0E F2 | 	cmp	local01, #29 wz
17d9c     14 4E 05 A1 |  if_e	add	fp, #20
17da0     A7 24 02 AB |  if_e	rdlong	local04, fp
17da4     14 4E 85 A1 |  if_e	sub	fp, #20
17da8     12 23 02 A6 |  if_e	mov	local03, local04
17dac     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
17db0     30 00 90 5D |  if_ne	jmp	#LR__1982
17db4     A7 12 02 FB | 	rdlong	arg01, fp
17db8     58 B3 B0 FD | 	call	#__system___float_fromuns
17dbc     FD 12 02 F6 | 	mov	arg01, result1
17dc0     0C 4E 05 F1 | 	add	fp, #12
17dc4     A7 14 02 FB | 	rdlong	arg02, fp
17dc8     0C 4E 85 F1 | 	sub	fp, #12
17dcc     78 B3 B0 FD | 	call	#__system___float_add
17dd0     A7 FA 61 FC | 	wrlong	result1, fp
17dd4     08 4E 05 F1 | 	add	fp, #8
17dd8     A7 3C 68 FC | 	wrlong	#30, fp
17ddc     08 4E 85 F1 | 	sub	fp, #8
17de0     A0 03 90 FD | 	jmp	#LR__1995
17de4                 | LR__1982
17de4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
17de4     08 4E 05 F1 | 	add	fp, #8
17de8     A7 1E 02 FB | 	rdlong	local01, fp
17dec     08 4E 85 F1 | 	sub	fp, #8
17df0     1C 1E 0E F2 | 	cmp	local01, #28 wz
17df4     14 4E 05 A1 |  if_e	add	fp, #20
17df8     A7 24 02 AB |  if_e	rdlong	local04, fp
17dfc     14 4E 85 A1 |  if_e	sub	fp, #20
17e00     12 23 02 A6 |  if_e	mov	local03, local04
17e04     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
17e08     1C 00 90 5D |  if_ne	jmp	#LR__1983
17e0c     A7 1E 02 FB | 	rdlong	local01, fp
17e10     0C 4E 05 F1 | 	add	fp, #12
17e14     A7 20 02 FB | 	rdlong	local02, fp
17e18     0C 4E 85 F1 | 	sub	fp, #12
17e1c     10 1F 02 F1 | 	add	local01, local02
17e20     A7 1E 62 FC | 	wrlong	local01, fp
17e24     5C 03 90 FD | 	jmp	#LR__1995
17e28                 | LR__1983
17e28                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
17e28     08 4E 05 F1 | 	add	fp, #8
17e2c     A7 1E 02 FB | 	rdlong	local01, fp
17e30     08 4E 85 F1 | 	sub	fp, #8
17e34     1C 1E 0E F2 | 	cmp	local01, #28 wz
17e38     14 4E 05 A1 |  if_e	add	fp, #20
17e3c     A7 24 02 AB |  if_e	rdlong	local04, fp
17e40     14 4E 85 A1 |  if_e	sub	fp, #20
17e44     12 23 02 A6 |  if_e	mov	local03, local04
17e48     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
17e4c     1C 00 90 5D |  if_ne	jmp	#LR__1984
17e50     A7 1E 02 FB | 	rdlong	local01, fp
17e54     0C 4E 05 F1 | 	add	fp, #12
17e58     A7 20 02 FB | 	rdlong	local02, fp
17e5c     0C 4E 85 F1 | 	sub	fp, #12
17e60     10 1F 02 F1 | 	add	local01, local02
17e64     A7 1E 62 FC | 	wrlong	local01, fp
17e68     18 03 90 FD | 	jmp	#LR__1995
17e6c                 | LR__1984
17e6c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
17e6c     08 4E 05 F1 | 	add	fp, #8
17e70     A7 1E 02 FB | 	rdlong	local01, fp
17e74     08 4E 85 F1 | 	sub	fp, #8
17e78     1C 1E 0E F2 | 	cmp	local01, #28 wz
17e7c     14 4E 05 A1 |  if_e	add	fp, #20
17e80     A7 24 02 AB |  if_e	rdlong	local04, fp
17e84     14 4E 85 A1 |  if_e	sub	fp, #20
17e88     12 23 02 A6 |  if_e	mov	local03, local04
17e8c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
17e90     40 00 90 5D |  if_ne	jmp	#LR__1985
17e94     A7 12 02 FB | 	rdlong	arg01, fp
17e98     09 13 52 F6 | 	abs	arg01, arg01 wc
17e9c     1F 26 C6 C9 |  if_b	decod	local05, #31
17ea0     00 26 06 36 |  if_ae	mov	local05, #0
17ea4     6C B2 B0 FD | 	call	#__system___float_fromuns
17ea8     13 FB 61 F5 | 	xor	result1, local05
17eac     FD 12 02 F6 | 	mov	arg01, result1
17eb0     0C 4E 05 F1 | 	add	fp, #12
17eb4     A7 14 02 FB | 	rdlong	arg02, fp
17eb8     0C 4E 85 F1 | 	sub	fp, #12
17ebc     88 B2 B0 FD | 	call	#__system___float_add
17ec0     A7 FA 61 FC | 	wrlong	result1, fp
17ec4     08 4E 05 F1 | 	add	fp, #8
17ec8     A7 3C 68 FC | 	wrlong	#30, fp
17ecc     08 4E 85 F1 | 	sub	fp, #8
17ed0     B0 02 90 FD | 	jmp	#LR__1995
17ed4                 | LR__1985
17ed4                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
17ed4     08 4E 05 F1 | 	add	fp, #8
17ed8     A7 1E 02 FB | 	rdlong	local01, fp
17edc     08 4E 85 F1 | 	sub	fp, #8
17ee0     1E 1E 0E F2 | 	cmp	local01, #30 wz
17ee4     14 4E 05 A1 |  if_e	add	fp, #20
17ee8     A7 24 02 AB |  if_e	rdlong	local04, fp
17eec     14 4E 85 A1 |  if_e	sub	fp, #20
17ef0     12 23 02 A6 |  if_e	mov	local03, local04
17ef4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
17ef8     28 00 90 5D |  if_ne	jmp	#LR__1986
17efc     A7 1E 02 FB | 	rdlong	local01, fp
17f00     0C 4E 05 F1 | 	add	fp, #12
17f04     A7 12 02 FB | 	rdlong	arg01, fp
17f08     0C 4E 85 F1 | 	sub	fp, #12
17f0c     04 B2 B0 FD | 	call	#__system___float_fromuns
17f10     FD 14 02 F6 | 	mov	arg02, result1
17f14     0F 13 02 F6 | 	mov	arg01, local01
17f18     2C B2 B0 FD | 	call	#__system___float_add
17f1c     A7 FA 61 FC | 	wrlong	result1, fp
17f20     60 02 90 FD | 	jmp	#LR__1995
17f24                 | LR__1986
17f24                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
17f24     08 4E 05 F1 | 	add	fp, #8
17f28     A7 1E 02 FB | 	rdlong	local01, fp
17f2c     08 4E 85 F1 | 	sub	fp, #8
17f30     1E 1E 0E F2 | 	cmp	local01, #30 wz
17f34     14 4E 05 A1 |  if_e	add	fp, #20
17f38     A7 24 02 AB |  if_e	rdlong	local04, fp
17f3c     14 4E 85 A1 |  if_e	sub	fp, #20
17f40     12 23 02 A6 |  if_e	mov	local03, local04
17f44     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
17f48     38 00 90 5D |  if_ne	jmp	#LR__1987
17f4c     A7 1E 02 FB | 	rdlong	local01, fp
17f50     0C 4E 05 F1 | 	add	fp, #12
17f54     A7 12 02 FB | 	rdlong	arg01, fp
17f58     0C 4E 85 F1 | 	sub	fp, #12
17f5c     09 13 52 F6 | 	abs	arg01, arg01 wc
17f60     1F 26 C6 C9 |  if_b	decod	local05, #31
17f64     00 26 06 36 |  if_ae	mov	local05, #0
17f68     A8 B1 B0 FD | 	call	#__system___float_fromuns
17f6c     13 FB 61 F5 | 	xor	result1, local05
17f70     FD 14 02 F6 | 	mov	arg02, result1
17f74     0F 13 02 F6 | 	mov	arg01, local01
17f78     CC B1 B0 FD | 	call	#__system___float_add
17f7c     A7 FA 61 FC | 	wrlong	result1, fp
17f80     00 02 90 FD | 	jmp	#LR__1995
17f84                 | LR__1987
17f84                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
17f84     08 4E 05 F1 | 	add	fp, #8
17f88     A7 1E 02 FB | 	rdlong	local01, fp
17f8c     08 4E 85 F1 | 	sub	fp, #8
17f90     1E 1E 0E F2 | 	cmp	local01, #30 wz
17f94     14 4E 05 A1 |  if_e	add	fp, #20
17f98     A7 24 02 AB |  if_e	rdlong	local04, fp
17f9c     14 4E 85 A1 |  if_e	sub	fp, #20
17fa0     1E 24 0E A2 |  if_e	cmp	local04, #30 wz
17fa4     1C 00 90 5D |  if_ne	jmp	#LR__1988
17fa8     A7 12 02 FB | 	rdlong	arg01, fp
17fac     0C 4E 05 F1 | 	add	fp, #12
17fb0     A7 14 02 FB | 	rdlong	arg02, fp
17fb4     0C 4E 85 F1 | 	sub	fp, #12
17fb8     8C B1 B0 FD | 	call	#__system___float_add
17fbc     A7 FA 61 FC | 	wrlong	result1, fp
17fc0     C0 01 90 FD | 	jmp	#LR__1995
17fc4                 | LR__1988
17fc4                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
17fc4     08 4E 05 F1 | 	add	fp, #8
17fc8     A7 1E 02 FB | 	rdlong	local01, fp
17fcc     08 4E 85 F1 | 	sub	fp, #8
17fd0     1F 1E 0E F2 | 	cmp	local01, #31 wz
17fd4     24 00 90 5D |  if_ne	jmp	#LR__1989
17fd8     14 4E 05 F1 | 	add	fp, #20
17fdc     A7 22 02 FB | 	rdlong	local03, fp
17fe0     14 4E 85 F1 | 	sub	fp, #20
17fe4     1F 22 0E F2 | 	cmp	local03, #31 wz
17fe8     A7 04 68 5C |  if_ne	wrlong	#2, fp
17fec     08 4E 05 51 |  if_ne	add	fp, #8
17ff0     A7 FE 69 5C |  if_ne	wrlong	#255, fp
17ff4     08 4E 85 51 |  if_ne	sub	fp, #8
17ff8     88 01 90 5D |  if_ne	jmp	#LR__1995
17ffc                 | LR__1989
17ffc                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
17ffc     14 4E 05 F1 | 	add	fp, #20
18000     A7 1E 02 FB | 	rdlong	local01, fp
18004     14 4E 85 F1 | 	sub	fp, #20
18008     1F 1E 0E F2 | 	cmp	local01, #31 wz
1800c     24 00 90 5D |  if_ne	jmp	#LR__1990
18010     08 4E 05 F1 | 	add	fp, #8
18014     A7 22 02 FB | 	rdlong	local03, fp
18018     08 4E 85 F1 | 	sub	fp, #8
1801c     1F 22 0E F2 | 	cmp	local03, #31 wz
18020     A7 04 68 5C |  if_ne	wrlong	#2, fp
18024     08 4E 05 51 |  if_ne	add	fp, #8
18028     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1802c     08 4E 85 51 |  if_ne	sub	fp, #8
18030     50 01 90 5D |  if_ne	jmp	#LR__1995
18034                 | LR__1990
18034                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
18034     08 4E 05 F1 | 	add	fp, #8
18038     A7 1E 02 FB | 	rdlong	local01, fp
1803c     08 4E 85 F1 | 	sub	fp, #8
18040     1F 1E 0E F2 | 	cmp	local01, #31 wz
18044     14 4E 05 A1 |  if_e	add	fp, #20
18048     A7 22 02 AB |  if_e	rdlong	local03, fp
1804c     14 4E 85 A1 |  if_e	sub	fp, #20
18050     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
18054     1C 00 90 5D |  if_ne	jmp	#LR__1991
18058     A7 12 02 FB | 	rdlong	arg01, fp
1805c     0C 4E 05 F1 | 	add	fp, #12
18060     A7 14 02 FB | 	rdlong	arg02, fp
18064     0C 4E 85 F1 | 	sub	fp, #12
18068     54 89 B0 FD | 	call	#__system___string_concat
1806c     A7 FA 61 FC | 	wrlong	result1, fp
18070     10 01 90 FD | 	jmp	#LR__1995
18074                 | LR__1991
18074                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.sresult=convertstring(t1.result.uresult)+t2.result.sresult : t1.result_type=result_string:goto 1040
18074     08 4E 05 F1 | 	add	fp, #8
18078     A7 1E 02 FB | 	rdlong	local01, fp
1807c     08 4E 85 F1 | 	sub	fp, #8
18080     2B 1E 0E F2 | 	cmp	local01, #43 wz
18084     14 4E 05 A1 |  if_e	add	fp, #20
18088     A7 22 02 AB |  if_e	rdlong	local03, fp
1808c     14 4E 85 A1 |  if_e	sub	fp, #20
18090     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
18094     30 00 90 5D |  if_ne	jmp	#LR__1992
18098     A7 12 02 FB | 	rdlong	arg01, fp
1809c     84 33 BF FD | 	call	#_convertstring
180a0     FD 12 02 F6 | 	mov	arg01, result1
180a4     0C 4E 05 F1 | 	add	fp, #12
180a8     A7 14 02 FB | 	rdlong	arg02, fp
180ac     0C 4E 85 F1 | 	sub	fp, #12
180b0     0C 89 B0 FD | 	call	#__system___string_concat
180b4     A7 FA 61 FC | 	wrlong	result1, fp
180b8     08 4E 05 F1 | 	add	fp, #8
180bc     A7 3E 68 FC | 	wrlong	#31, fp
180c0     08 4E 85 F1 | 	sub	fp, #8
180c4     BC 00 90 FD | 	jmp	#LR__1995
180c8                 | LR__1992
180c8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.sresult=t1.result.sresult+convertstring(t2.result.uresult) :goto 1040
180c8     08 4E 05 F1 | 	add	fp, #8
180cc     A7 1E 02 FB | 	rdlong	local01, fp
180d0     08 4E 85 F1 | 	sub	fp, #8
180d4     1F 1E 0E F2 | 	cmp	local01, #31 wz
180d8     14 4E 05 A1 |  if_e	add	fp, #20
180dc     A7 22 02 AB |  if_e	rdlong	local03, fp
180e0     14 4E 85 A1 |  if_e	sub	fp, #20
180e4     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
180e8     28 00 90 5D |  if_ne	jmp	#LR__1993
180ec     A7 1E 02 FB | 	rdlong	local01, fp
180f0     0C 4E 05 F1 | 	add	fp, #12
180f4     A7 12 02 FB | 	rdlong	arg01, fp
180f8     0C 4E 85 F1 | 	sub	fp, #12
180fc     24 33 BF FD | 	call	#_convertstring
18100     FD 14 02 F6 | 	mov	arg02, result1
18104     0F 13 02 F6 | 	mov	arg01, local01
18108     B4 88 B0 FD | 	call	#__system___string_concat
1810c     A7 FA 61 FC | 	wrlong	result1, fp
18110     70 00 90 FD | 	jmp	#LR__1995
18114                 | LR__1993
18114                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)+convertstring(t2.result.uresult) : t1.result_type=result_string :goto 1040
18114     08 4E 05 F1 | 	add	fp, #8
18118     A7 1E 02 FB | 	rdlong	local01, fp
1811c     08 4E 85 F1 | 	sub	fp, #8
18120     2B 1E 0E F2 | 	cmp	local01, #43 wz
18124     14 4E 05 A1 |  if_e	add	fp, #20
18128     A7 22 02 AB |  if_e	rdlong	local03, fp
1812c     14 4E 85 A1 |  if_e	sub	fp, #20
18130     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
18134     3C 00 90 5D |  if_ne	jmp	#LR__1994
18138     A7 12 02 FB | 	rdlong	arg01, fp
1813c     E4 32 BF FD | 	call	#_convertstring
18140     FD 1E 02 F6 | 	mov	local01, result1
18144     0C 4E 05 F1 | 	add	fp, #12
18148     A7 12 02 FB | 	rdlong	arg01, fp
1814c     0C 4E 85 F1 | 	sub	fp, #12
18150     D0 32 BF FD | 	call	#_convertstring
18154     FD 14 02 F6 | 	mov	arg02, result1
18158     0F 13 02 F6 | 	mov	arg01, local01
1815c     60 88 B0 FD | 	call	#__system___string_concat
18160     A7 FA 61 FC | 	wrlong	result1, fp
18164     08 4E 05 F1 | 	add	fp, #8
18168     A7 3E 68 FC | 	wrlong	#31, fp
1816c     08 4E 85 F1 | 	sub	fp, #8
18170     10 00 90 FD | 	jmp	#LR__1995
18174                 | LR__1994
18174     A7 08 68 FC | 	wrlong	#4, fp
18178     08 4E 05 F1 | 	add	fp, #8
1817c     A7 FE 69 FC | 	wrlong	#255, fp
18180     08 4E 85 F1 | 	sub	fp, #8
18184                 | LR__1995
18184     A7 12 02 F6 | 	mov	arg01, fp
18188     B8 31 BF FD | 	call	#_push
1818c     A7 F0 03 F6 | 	mov	ptra, fp
18190     B2 00 A0 FD | 	call	#popregs_
18194                 | _do_plus_ret
18194     2D 00 64 FD | 	ret
18198                 | 
18198                 | ' 
18198                 | ' 
18198                 | ' 
18198                 | ' 
18198                 | ' 
18198                 | ' 
18198                 | ' 
18198                 | ' 
18198                 | ' 
18198                 | ' 
18198                 | ' 
18198                 | ' 
18198                 | ' 
18198                 | ' 
18198                 | ' 
18198                 | ' 
18198                 | ' sub do_shl 
18198                 | _do_shl
18198     03 4A 05 F6 | 	mov	COUNT_, #3
1819c     A8 00 A0 FD | 	call	#pushregs_
181a0     18 F0 07 F1 | 	add	ptra, #24
181a4     04 31 BF FD | 	call	#_pop
181a8     FD 12 02 F6 | 	mov	arg01, result1
181ac     FE 1E 02 F6 | 	mov	local01, result2
181b0     FF 20 02 F6 | 	mov	local02, result3
181b4     0C 4E 05 F1 | 	add	fp, #12
181b8     A7 12 62 FC | 	wrlong	arg01, fp
181bc     04 4E 05 F1 | 	add	fp, #4
181c0     A7 1E 62 FC | 	wrlong	local01, fp
181c4     04 4E 05 F1 | 	add	fp, #4
181c8     A7 20 62 FC | 	wrlong	local02, fp
181cc     14 4E 85 F1 | 	sub	fp, #20
181d0     D8 30 BF FD | 	call	#_pop
181d4     FF 22 02 F6 | 	mov	local03, result3
181d8     A7 FA 61 FC | 	wrlong	result1, fp
181dc     04 4E 05 F1 | 	add	fp, #4
181e0     A7 FC 61 FC | 	wrlong	result2, fp
181e4     04 4E 05 F1 | 	add	fp, #4
181e8     A7 22 62 FC | 	wrlong	local03, fp
181ec                 | ' 
181ec                 | ' t2=pop()
181ec                 | ' t1=pop()
181ec                 | ' 
181ec                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
181ec     08 4E 85 F1 | 	sub	fp, #8
181f0     1C 22 0E F2 | 	cmp	local03, #28 wz
181f4     A7 22 02 AB |  if_e	rdlong	local03, fp
181f8     A7 22 62 AC |  if_e	wrlong	local03, fp
181fc     08 4E 05 A1 |  if_e	add	fp, #8
18200     A7 3A 68 AC |  if_e	wrlong	#29, fp
18204     08 4E 85 A1 |  if_e	sub	fp, #8
18208                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
18208     14 4E 05 F1 | 	add	fp, #20
1820c     A7 22 02 FB | 	rdlong	local03, fp
18210     14 4E 85 F1 | 	sub	fp, #20
18214     1C 22 0E F2 | 	cmp	local03, #28 wz
18218     18 00 90 5D |  if_ne	jmp	#LR__2000
1821c     0C 4E 05 F1 | 	add	fp, #12
18220     A7 22 02 FB | 	rdlong	local03, fp
18224     A7 22 62 FC | 	wrlong	local03, fp
18228     08 4E 05 F1 | 	add	fp, #8
1822c     A7 3A 68 FC | 	wrlong	#29, fp
18230     14 4E 85 F1 | 	sub	fp, #20
18234                 | LR__2000
18234                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
18234     08 4E 05 F1 | 	add	fp, #8
18238     A7 22 02 FB | 	rdlong	local03, fp
1823c     08 4E 85 F1 | 	sub	fp, #8
18240     1F 22 0E F2 | 	cmp	local03, #31 wz
18244     14 4E 05 51 |  if_ne	add	fp, #20
18248     A7 20 02 5B |  if_ne	rdlong	local02, fp
1824c     14 4E 85 51 |  if_ne	sub	fp, #20
18250     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
18254     08 4E 05 51 |  if_ne	add	fp, #8
18258     A7 22 02 5B |  if_ne	rdlong	local03, fp
1825c     08 4E 85 51 |  if_ne	sub	fp, #8
18260     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
18264     14 4E 05 51 |  if_ne	add	fp, #20
18268     14 4E 85 51 |  if_ne	sub	fp, #20
1826c     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
18270     A7 0C 68 AC |  if_e	wrlong	#6, fp
18274     08 4E 05 A1 |  if_e	add	fp, #8
18278     A7 FE 69 AC |  if_e	wrlong	#255, fp
1827c     08 4E 85 A1 |  if_e	sub	fp, #8
18280     18 00 90 AD |  if_e	jmp	#LR__2001
18284     A7 22 02 FB | 	rdlong	local03, fp
18288     0C 4E 05 F1 | 	add	fp, #12
1828c     A7 1E 02 FB | 	rdlong	local01, fp
18290     0C 4E 85 F1 | 	sub	fp, #12
18294     0F 23 62 F0 | 	shl	local03, local01
18298     A7 22 62 FC | 	wrlong	local03, fp
1829c                 | LR__2001
1829c     A7 12 02 F6 | 	mov	arg01, fp
182a0     A0 30 BF FD | 	call	#_push
182a4     A7 F0 03 F6 | 	mov	ptra, fp
182a8     B2 00 A0 FD | 	call	#popregs_
182ac                 | _do_shl_ret
182ac     2D 00 64 FD | 	ret
182b0                 | 
182b0                 | ' 
182b0                 | ' sub do_shr 
182b0                 | _do_shr
182b0     03 4A 05 F6 | 	mov	COUNT_, #3
182b4     A8 00 A0 FD | 	call	#pushregs_
182b8     18 F0 07 F1 | 	add	ptra, #24
182bc     EC 2F BF FD | 	call	#_pop
182c0     FD 12 02 F6 | 	mov	arg01, result1
182c4     FE 1E 02 F6 | 	mov	local01, result2
182c8     FF 20 02 F6 | 	mov	local02, result3
182cc     0C 4E 05 F1 | 	add	fp, #12
182d0     A7 12 62 FC | 	wrlong	arg01, fp
182d4     04 4E 05 F1 | 	add	fp, #4
182d8     A7 1E 62 FC | 	wrlong	local01, fp
182dc     04 4E 05 F1 | 	add	fp, #4
182e0     A7 20 62 FC | 	wrlong	local02, fp
182e4     14 4E 85 F1 | 	sub	fp, #20
182e8     C0 2F BF FD | 	call	#_pop
182ec     FF 22 02 F6 | 	mov	local03, result3
182f0     A7 FA 61 FC | 	wrlong	result1, fp
182f4     04 4E 05 F1 | 	add	fp, #4
182f8     A7 FC 61 FC | 	wrlong	result2, fp
182fc     04 4E 05 F1 | 	add	fp, #4
18300     A7 22 62 FC | 	wrlong	local03, fp
18304                 | ' t2=pop()
18304                 | ' t1=pop()
18304                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
18304     08 4E 85 F1 | 	sub	fp, #8
18308     1C 22 0E F2 | 	cmp	local03, #28 wz
1830c     A7 22 02 AB |  if_e	rdlong	local03, fp
18310     A7 22 62 AC |  if_e	wrlong	local03, fp
18314     08 4E 05 A1 |  if_e	add	fp, #8
18318     A7 3A 68 AC |  if_e	wrlong	#29, fp
1831c     08 4E 85 A1 |  if_e	sub	fp, #8
18320                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
18320     14 4E 05 F1 | 	add	fp, #20
18324     A7 22 02 FB | 	rdlong	local03, fp
18328     14 4E 85 F1 | 	sub	fp, #20
1832c     1C 22 0E F2 | 	cmp	local03, #28 wz
18330     18 00 90 5D |  if_ne	jmp	#LR__2010
18334     0C 4E 05 F1 | 	add	fp, #12
18338     A7 22 02 FB | 	rdlong	local03, fp
1833c     A7 22 62 FC | 	wrlong	local03, fp
18340     08 4E 05 F1 | 	add	fp, #8
18344     A7 3A 68 FC | 	wrlong	#29, fp
18348     14 4E 85 F1 | 	sub	fp, #20
1834c                 | LR__2010
1834c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
1834c     08 4E 05 F1 | 	add	fp, #8
18350     A7 22 02 FB | 	rdlong	local03, fp
18354     08 4E 85 F1 | 	sub	fp, #8
18358     1F 22 0E F2 | 	cmp	local03, #31 wz
1835c     14 4E 05 51 |  if_ne	add	fp, #20
18360     A7 20 02 5B |  if_ne	rdlong	local02, fp
18364     14 4E 85 51 |  if_ne	sub	fp, #20
18368     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
1836c     08 4E 05 51 |  if_ne	add	fp, #8
18370     A7 22 02 5B |  if_ne	rdlong	local03, fp
18374     08 4E 85 51 |  if_ne	sub	fp, #8
18378     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
1837c     14 4E 05 51 |  if_ne	add	fp, #20
18380     14 4E 85 51 |  if_ne	sub	fp, #20
18384     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
18388     A7 0C 68 AC |  if_e	wrlong	#6, fp
1838c     08 4E 05 A1 |  if_e	add	fp, #8
18390     A7 FE 69 AC |  if_e	wrlong	#255, fp
18394     08 4E 85 A1 |  if_e	sub	fp, #8
18398     18 00 90 AD |  if_e	jmp	#LR__2011
1839c     A7 22 02 FB | 	rdlong	local03, fp
183a0     0C 4E 05 F1 | 	add	fp, #12
183a4     A7 1E 02 FB | 	rdlong	local01, fp
183a8     0C 4E 85 F1 | 	sub	fp, #12
183ac     0F 23 42 F0 | 	shr	local03, local01
183b0     A7 22 62 FC | 	wrlong	local03, fp
183b4                 | LR__2011
183b4     A7 12 02 F6 | 	mov	arg01, fp
183b8     88 2F BF FD | 	call	#_push
183bc     A7 F0 03 F6 | 	mov	ptra, fp
183c0     B2 00 A0 FD | 	call	#popregs_
183c4                 | _do_shr_ret
183c4     2D 00 64 FD | 	ret
183c8                 | 
183c8                 | ' 
183c8                 | ' sub do_power 
183c8                 | _do_power
183c8     02 4A 05 F6 | 	mov	COUNT_, #2
183cc     A8 00 A0 FD | 	call	#pushregs_
183d0     18 F0 07 F1 | 	add	ptra, #24
183d4     D4 2E BF FD | 	call	#_pop
183d8     FD 14 02 F6 | 	mov	arg02, result1
183dc     FE 12 02 F6 | 	mov	arg01, result2
183e0     FF 1E 02 F6 | 	mov	local01, result3
183e4     0C 4E 05 F1 | 	add	fp, #12
183e8     A7 14 62 FC | 	wrlong	arg02, fp
183ec     04 4E 05 F1 | 	add	fp, #4
183f0     A7 12 62 FC | 	wrlong	arg01, fp
183f4     04 4E 05 F1 | 	add	fp, #4
183f8     A7 1E 62 FC | 	wrlong	local01, fp
183fc     14 4E 85 F1 | 	sub	fp, #20
18400     A8 2E BF FD | 	call	#_pop
18404     A7 FA 61 FC | 	wrlong	result1, fp
18408     04 4E 05 F1 | 	add	fp, #4
1840c     A7 FC 61 FC | 	wrlong	result2, fp
18410     04 4E 05 F1 | 	add	fp, #4
18414     A7 FE 61 FC | 	wrlong	result3, fp
18418                 | ' t2=pop()
18418                 | ' t1=pop()
18418                 | ' 
18418                 | ' 
18418                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
18418     08 4E 85 F1 | 	sub	fp, #8
1841c     1F FE 0D F2 | 	cmp	result3, #31 wz
18420     14 4E 05 51 |  if_ne	add	fp, #20
18424     A7 1E 02 5B |  if_ne	rdlong	local01, fp
18428     14 4E 85 51 |  if_ne	sub	fp, #20
1842c     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
18430     A7 18 68 AC |  if_e	wrlong	#12, fp
18434     08 4E 05 A1 |  if_e	add	fp, #8
18438     A7 FE 69 AC |  if_e	wrlong	#255, fp
1843c     08 4E 85 A1 |  if_e	sub	fp, #8
18440     38 01 90 AD |  if_e	jmp	#LR__2025
18444                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
18444     08 4E 05 F1 | 	add	fp, #8
18448     A7 14 02 FB | 	rdlong	arg02, fp
1844c     08 4E 85 F1 | 	sub	fp, #8
18450     1C 14 0E F2 | 	cmp	arg02, #28 wz
18454     28 00 90 5D |  if_ne	jmp	#LR__2020
18458     08 4E 05 F1 | 	add	fp, #8
1845c     A7 3C 68 FC | 	wrlong	#30, fp
18460     08 4E 85 F1 | 	sub	fp, #8
18464     A7 12 02 FB | 	rdlong	arg01, fp
18468     09 13 52 F6 | 	abs	arg01, arg01 wc
1846c     1F 20 C6 C9 |  if_b	decod	local02, #31
18470     00 20 06 36 |  if_ae	mov	local02, #0
18474     9C AC B0 FD | 	call	#__system___float_fromuns
18478     10 FB 61 F5 | 	xor	result1, local02
1847c     A7 FA 61 FC | 	wrlong	result1, fp
18480                 | LR__2020
18480                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
18480     08 4E 05 F1 | 	add	fp, #8
18484     A7 14 02 FB | 	rdlong	arg02, fp
18488     08 4E 85 F1 | 	sub	fp, #8
1848c     1D 14 0E F2 | 	cmp	arg02, #29 wz
18490     18 00 90 5D |  if_ne	jmp	#LR__2021
18494     08 4E 05 F1 | 	add	fp, #8
18498     A7 3C 68 FC | 	wrlong	#30, fp
1849c     08 4E 85 F1 | 	sub	fp, #8
184a0     A7 12 02 FB | 	rdlong	arg01, fp
184a4     6C AC B0 FD | 	call	#__system___float_fromuns
184a8     A7 FA 61 FC | 	wrlong	result1, fp
184ac                 | LR__2021
184ac                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
184ac     14 4E 05 F1 | 	add	fp, #20
184b0     A7 14 02 FB | 	rdlong	arg02, fp
184b4     14 4E 85 F1 | 	sub	fp, #20
184b8     1C 14 0E F2 | 	cmp	arg02, #28 wz
184bc     34 00 90 5D |  if_ne	jmp	#LR__2022
184c0     14 4E 05 F1 | 	add	fp, #20
184c4     A7 3C 68 FC | 	wrlong	#30, fp
184c8     08 4E 85 F1 | 	sub	fp, #8
184cc     A7 12 02 FB | 	rdlong	arg01, fp
184d0     0C 4E 85 F1 | 	sub	fp, #12
184d4     09 13 52 F6 | 	abs	arg01, arg01 wc
184d8     1F 20 C6 C9 |  if_b	decod	local02, #31
184dc     00 20 06 36 |  if_ae	mov	local02, #0
184e0     30 AC B0 FD | 	call	#__system___float_fromuns
184e4     10 FB 61 F5 | 	xor	result1, local02
184e8     0C 4E 05 F1 | 	add	fp, #12
184ec     A7 FA 61 FC | 	wrlong	result1, fp
184f0     0C 4E 85 F1 | 	sub	fp, #12
184f4                 | LR__2022
184f4                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
184f4     14 4E 05 F1 | 	add	fp, #20
184f8     A7 14 02 FB | 	rdlong	arg02, fp
184fc     14 4E 85 F1 | 	sub	fp, #20
18500     1D 14 0E F2 | 	cmp	arg02, #29 wz
18504     24 00 90 5D |  if_ne	jmp	#LR__2023
18508     14 4E 05 F1 | 	add	fp, #20
1850c     A7 3C 68 FC | 	wrlong	#30, fp
18510     08 4E 85 F1 | 	sub	fp, #8
18514     A7 12 02 FB | 	rdlong	arg01, fp
18518     0C 4E 85 F1 | 	sub	fp, #12
1851c     F4 AB B0 FD | 	call	#__system___float_fromuns
18520     0C 4E 05 F1 | 	add	fp, #12
18524     A7 FA 61 FC | 	wrlong	result1, fp
18528     0C 4E 85 F1 | 	sub	fp, #12
1852c                 | LR__2023
1852c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
1852c     08 4E 05 F1 | 	add	fp, #8
18530     A7 14 02 FB | 	rdlong	arg02, fp
18534     08 4E 85 F1 | 	sub	fp, #8
18538     1E 14 0E F2 | 	cmp	arg02, #30 wz
1853c     14 4E 05 A1 |  if_e	add	fp, #20
18540     A7 1E 02 AB |  if_e	rdlong	local01, fp
18544     14 4E 85 A1 |  if_e	sub	fp, #20
18548     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
1854c     1C 00 90 5D |  if_ne	jmp	#LR__2024
18550     A7 12 02 FB | 	rdlong	arg01, fp
18554     0C 4E 05 F1 | 	add	fp, #12
18558     A7 14 02 FB | 	rdlong	arg02, fp
1855c     0C 4E 85 F1 | 	sub	fp, #12
18560     BC BE B0 FD | 	call	#__system____builtin_powf
18564     A7 FA 61 FC | 	wrlong	result1, fp
18568     10 00 90 FD | 	jmp	#LR__2025
1856c                 | LR__2024
1856c     A7 1A 68 FC | 	wrlong	#13, fp
18570     08 4E 05 F1 | 	add	fp, #8
18574     A7 FE 69 FC | 	wrlong	#255, fp
18578     08 4E 85 F1 | 	sub	fp, #8
1857c                 | LR__2025
1857c     A7 12 02 F6 | 	mov	arg01, fp
18580     C0 2D BF FD | 	call	#_push
18584     A7 F0 03 F6 | 	mov	ptra, fp
18588     B2 00 A0 FD | 	call	#popregs_
1858c                 | _do_power_ret
1858c     2D 00 64 FD | 	ret
18590                 | 
18590                 | ' 
18590                 | ' 
18590                 | ' sub do_eq
18590                 | _do_eq
18590     05 4A 05 F6 | 	mov	COUNT_, #5
18594     A8 00 A0 FD | 	call	#pushregs_
18598     18 F0 07 F1 | 	add	ptra, #24
1859c     0C 2D BF FD | 	call	#_pop
185a0     FD 1E 02 F6 | 	mov	local01, result1
185a4     FE 20 02 F6 | 	mov	local02, result2
185a8     FF 22 02 F6 | 	mov	local03, result3
185ac     0C 4E 05 F1 | 	add	fp, #12
185b0     A7 1E 62 FC | 	wrlong	local01, fp
185b4     04 4E 05 F1 | 	add	fp, #4
185b8     A7 20 62 FC | 	wrlong	local02, fp
185bc     04 4E 05 F1 | 	add	fp, #4
185c0     A7 22 62 FC | 	wrlong	local03, fp
185c4     14 4E 85 F1 | 	sub	fp, #20
185c8     E0 2C BF FD | 	call	#_pop
185cc     FF 22 02 F6 | 	mov	local03, result3
185d0     A7 FA 61 FC | 	wrlong	result1, fp
185d4     04 4E 05 F1 | 	add	fp, #4
185d8     A7 FC 61 FC | 	wrlong	result2, fp
185dc     04 4E 05 F1 | 	add	fp, #4
185e0     A7 22 62 FC | 	wrlong	local03, fp
185e4                 | ' t2=pop()
185e4                 | ' t1=pop()
185e4                 | ' 
185e4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
185e4     08 4E 85 F1 | 	sub	fp, #8
185e8     1F 22 0E F2 | 	cmp	local03, #31 wz
185ec     14 4E 05 A1 |  if_e	add	fp, #20
185f0     A7 24 02 AB |  if_e	rdlong	local04, fp
185f4     14 4E 85 A1 |  if_e	sub	fp, #20
185f8     12 23 02 A6 |  if_e	mov	local03, local04
185fc     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
18600     28 00 90 5D |  if_ne	jmp	#LR__2030
18604     00 1E 06 F6 | 	mov	local01, #0
18608     A7 12 02 FB | 	rdlong	arg01, fp
1860c     0C 4E 05 F1 | 	add	fp, #12
18610     A7 14 02 FB | 	rdlong	arg02, fp
18614     0C 4E 85 F1 | 	sub	fp, #12
18618     70 83 B0 FD | 	call	#__system___string_cmp
1861c     00 FA 0D F2 | 	cmp	result1, #0 wz
18620     00 1E 26 A6 |  if_e	not	local01, #0
18624     A7 1E 62 FC | 	wrlong	local01, fp
18628     1C 04 90 FD | 	jmp	#LR__2043
1862c                 | LR__2030
1862c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
1862c     08 4E 05 F1 | 	add	fp, #8
18630     A7 1E 02 FB | 	rdlong	local01, fp
18634     08 4E 85 F1 | 	sub	fp, #8
18638     1E 1E 0E F2 | 	cmp	local01, #30 wz
1863c     14 4E 05 A1 |  if_e	add	fp, #20
18640     A7 24 02 AB |  if_e	rdlong	local04, fp
18644     14 4E 85 A1 |  if_e	sub	fp, #20
18648     12 23 02 A6 |  if_e	mov	local03, local04
1864c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
18650     2C 00 90 5D |  if_ne	jmp	#LR__2031
18654     00 1E 06 F6 | 	mov	local01, #0
18658     A7 12 02 FB | 	rdlong	arg01, fp
1865c     0C 4E 05 F1 | 	add	fp, #12
18660     A7 14 02 FB | 	rdlong	arg02, fp
18664     0C 4E 85 F1 | 	sub	fp, #12
18668     01 16 06 F6 | 	mov	arg03, #1
1866c     DC B2 B0 FD | 	call	#__system___float_cmp
18670     00 FA 0D F2 | 	cmp	result1, #0 wz
18674     00 1E 26 A6 |  if_e	not	local01, #0
18678     A7 1E 62 FC | 	wrlong	local01, fp
1867c     C8 03 90 FD | 	jmp	#LR__2043
18680                 | LR__2031
18680                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
18680     08 4E 05 F1 | 	add	fp, #8
18684     A7 1E 02 FB | 	rdlong	local01, fp
18688     08 4E 85 F1 | 	sub	fp, #8
1868c     1E 1E 0E F2 | 	cmp	local01, #30 wz
18690     14 4E 05 A1 |  if_e	add	fp, #20
18694     A7 24 02 AB |  if_e	rdlong	local04, fp
18698     14 4E 85 A1 |  if_e	sub	fp, #20
1869c     12 23 02 A6 |  if_e	mov	local03, local04
186a0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
186a4     48 00 90 5D |  if_ne	jmp	#LR__2032
186a8     00 1E 06 F6 | 	mov	local01, #0
186ac     A7 20 02 FB | 	rdlong	local02, fp
186b0     0C 4E 05 F1 | 	add	fp, #12
186b4     A7 12 02 FB | 	rdlong	arg01, fp
186b8     0C 4E 85 F1 | 	sub	fp, #12
186bc     09 13 52 F6 | 	abs	arg01, arg01 wc
186c0     1F 26 C6 C9 |  if_b	decod	local05, #31
186c4     00 26 06 36 |  if_ae	mov	local05, #0
186c8     48 AA B0 FD | 	call	#__system___float_fromuns
186cc     13 FB 61 F5 | 	xor	result1, local05
186d0     FD 14 02 F6 | 	mov	arg02, result1
186d4     10 13 02 F6 | 	mov	arg01, local02
186d8     01 16 06 F6 | 	mov	arg03, #1
186dc     6C B2 B0 FD | 	call	#__system___float_cmp
186e0     00 FA 0D F2 | 	cmp	result1, #0 wz
186e4     00 1E 26 A6 |  if_e	not	local01, #0
186e8     A7 1E 62 FC | 	wrlong	local01, fp
186ec     58 03 90 FD | 	jmp	#LR__2043
186f0                 | LR__2032
186f0                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
186f0     08 4E 05 F1 | 	add	fp, #8
186f4     A7 1E 02 FB | 	rdlong	local01, fp
186f8     08 4E 85 F1 | 	sub	fp, #8
186fc     1E 1E 0E F2 | 	cmp	local01, #30 wz
18700     14 4E 05 A1 |  if_e	add	fp, #20
18704     A7 24 02 AB |  if_e	rdlong	local04, fp
18708     14 4E 85 A1 |  if_e	sub	fp, #20
1870c     12 23 02 A6 |  if_e	mov	local03, local04
18710     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
18714     38 00 90 5D |  if_ne	jmp	#LR__2033
18718     00 1E 06 F6 | 	mov	local01, #0
1871c     A7 20 02 FB | 	rdlong	local02, fp
18720     0C 4E 05 F1 | 	add	fp, #12
18724     A7 12 02 FB | 	rdlong	arg01, fp
18728     0C 4E 85 F1 | 	sub	fp, #12
1872c     E4 A9 B0 FD | 	call	#__system___float_fromuns
18730     FD 14 02 F6 | 	mov	arg02, result1
18734     10 13 02 F6 | 	mov	arg01, local02
18738     01 16 06 F6 | 	mov	arg03, #1
1873c     0C B2 B0 FD | 	call	#__system___float_cmp
18740     00 FA 0D F2 | 	cmp	result1, #0 wz
18744     00 1E 26 A6 |  if_e	not	local01, #0
18748     A7 1E 62 FC | 	wrlong	local01, fp
1874c     F8 02 90 FD | 	jmp	#LR__2043
18750                 | LR__2033
18750                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
18750     08 4E 05 F1 | 	add	fp, #8
18754     A7 1E 02 FB | 	rdlong	local01, fp
18758     08 4E 85 F1 | 	sub	fp, #8
1875c     1C 1E 0E F2 | 	cmp	local01, #28 wz
18760     14 4E 05 A1 |  if_e	add	fp, #20
18764     A7 24 02 AB |  if_e	rdlong	local04, fp
18768     14 4E 85 A1 |  if_e	sub	fp, #20
1876c     12 23 02 A6 |  if_e	mov	local03, local04
18770     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
18774     44 00 90 5D |  if_ne	jmp	#LR__2034
18778     00 1E 06 F6 | 	mov	local01, #0
1877c     A7 12 02 FB | 	rdlong	arg01, fp
18780     09 13 52 F6 | 	abs	arg01, arg01 wc
18784     1F 26 C6 C9 |  if_b	decod	local05, #31
18788     00 26 06 36 |  if_ae	mov	local05, #0
1878c     84 A9 B0 FD | 	call	#__system___float_fromuns
18790     13 FB 61 F5 | 	xor	result1, local05
18794     FD 12 02 F6 | 	mov	arg01, result1
18798     0C 4E 05 F1 | 	add	fp, #12
1879c     A7 14 02 FB | 	rdlong	arg02, fp
187a0     0C 4E 85 F1 | 	sub	fp, #12
187a4     01 16 06 F6 | 	mov	arg03, #1
187a8     A0 B1 B0 FD | 	call	#__system___float_cmp
187ac     00 FA 0D F2 | 	cmp	result1, #0 wz
187b0     00 1E 26 A6 |  if_e	not	local01, #0
187b4     A7 1E 62 FC | 	wrlong	local01, fp
187b8     8C 02 90 FD | 	jmp	#LR__2043
187bc                 | LR__2034
187bc                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
187bc     08 4E 05 F1 | 	add	fp, #8
187c0     A7 1E 02 FB | 	rdlong	local01, fp
187c4     08 4E 85 F1 | 	sub	fp, #8
187c8     1C 1E 0E F2 | 	cmp	local01, #28 wz
187cc     14 4E 05 A1 |  if_e	add	fp, #20
187d0     A7 24 02 AB |  if_e	rdlong	local04, fp
187d4     14 4E 85 A1 |  if_e	sub	fp, #20
187d8     12 23 02 A6 |  if_e	mov	local03, local04
187dc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
187e0     24 00 90 5D |  if_ne	jmp	#LR__2035
187e4     00 1E 06 F6 | 	mov	local01, #0
187e8     A7 20 02 FB | 	rdlong	local02, fp
187ec     0C 4E 05 F1 | 	add	fp, #12
187f0     A7 22 02 FB | 	rdlong	local03, fp
187f4     0C 4E 85 F1 | 	sub	fp, #12
187f8     11 21 0A F2 | 	cmp	local02, local03 wz
187fc     01 1E 66 A6 |  if_e	neg	local01, #1
18800     A7 1E 62 FC | 	wrlong	local01, fp
18804     40 02 90 FD | 	jmp	#LR__2043
18808                 | LR__2035
18808                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
18808     08 4E 05 F1 | 	add	fp, #8
1880c     A7 1E 02 FB | 	rdlong	local01, fp
18810     08 4E 85 F1 | 	sub	fp, #8
18814     1C 1E 0E F2 | 	cmp	local01, #28 wz
18818     14 4E 05 A1 |  if_e	add	fp, #20
1881c     A7 24 02 AB |  if_e	rdlong	local04, fp
18820     14 4E 85 A1 |  if_e	sub	fp, #20
18824     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
18828     24 00 90 5D |  if_ne	jmp	#LR__2036
1882c     00 1E 06 F6 | 	mov	local01, #0
18830     A7 20 02 FB | 	rdlong	local02, fp
18834     0C 4E 05 F1 | 	add	fp, #12
18838     A7 22 02 FB | 	rdlong	local03, fp
1883c     0C 4E 85 F1 | 	sub	fp, #12
18840     11 21 0A F2 | 	cmp	local02, local03 wz
18844     01 1E 66 A6 |  if_e	neg	local01, #1
18848     A7 1E 62 FC | 	wrlong	local01, fp
1884c     F8 01 90 FD | 	jmp	#LR__2043
18850                 | LR__2036
18850                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
18850     08 4E 05 F1 | 	add	fp, #8
18854     A7 1E 02 FB | 	rdlong	local01, fp
18858     08 4E 85 F1 | 	sub	fp, #8
1885c     1D 1E 0E F2 | 	cmp	local01, #29 wz
18860     14 4E 05 A1 |  if_e	add	fp, #20
18864     A7 22 02 AB |  if_e	rdlong	local03, fp
18868     14 4E 85 A1 |  if_e	sub	fp, #20
1886c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
18870     34 00 90 5D |  if_ne	jmp	#LR__2037
18874     00 1E 06 F6 | 	mov	local01, #0
18878     A7 12 02 FB | 	rdlong	arg01, fp
1887c     94 A8 B0 FD | 	call	#__system___float_fromuns
18880     FD 12 02 F6 | 	mov	arg01, result1
18884     0C 4E 05 F1 | 	add	fp, #12
18888     A7 14 02 FB | 	rdlong	arg02, fp
1888c     0C 4E 85 F1 | 	sub	fp, #12
18890     01 16 06 F6 | 	mov	arg03, #1
18894     B4 B0 B0 FD | 	call	#__system___float_cmp
18898     00 FA 0D F2 | 	cmp	result1, #0 wz
1889c     00 1E 26 A6 |  if_e	not	local01, #0
188a0     A7 1E 62 FC | 	wrlong	local01, fp
188a4     A0 01 90 FD | 	jmp	#LR__2043
188a8                 | LR__2037
188a8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
188a8     08 4E 05 F1 | 	add	fp, #8
188ac     A7 1E 02 FB | 	rdlong	local01, fp
188b0     08 4E 85 F1 | 	sub	fp, #8
188b4     1D 1E 0E F2 | 	cmp	local01, #29 wz
188b8     14 4E 05 A1 |  if_e	add	fp, #20
188bc     A7 22 02 AB |  if_e	rdlong	local03, fp
188c0     14 4E 85 A1 |  if_e	sub	fp, #20
188c4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
188c8     24 00 90 5D |  if_ne	jmp	#LR__2038
188cc     00 1E 06 F6 | 	mov	local01, #0
188d0     A7 20 02 FB | 	rdlong	local02, fp
188d4     0C 4E 05 F1 | 	add	fp, #12
188d8     A7 22 02 FB | 	rdlong	local03, fp
188dc     0C 4E 85 F1 | 	sub	fp, #12
188e0     11 21 0A F2 | 	cmp	local02, local03 wz
188e4     01 1E 66 A6 |  if_e	neg	local01, #1
188e8     A7 1E 62 FC | 	wrlong	local01, fp
188ec     58 01 90 FD | 	jmp	#LR__2043
188f0                 | LR__2038
188f0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
188f0     08 4E 05 F1 | 	add	fp, #8
188f4     A7 1E 02 FB | 	rdlong	local01, fp
188f8     08 4E 85 F1 | 	sub	fp, #8
188fc     1D 1E 0E F2 | 	cmp	local01, #29 wz
18900     14 4E 05 A1 |  if_e	add	fp, #20
18904     A7 22 02 AB |  if_e	rdlong	local03, fp
18908     14 4E 85 A1 |  if_e	sub	fp, #20
1890c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
18910     24 00 90 5D |  if_ne	jmp	#LR__2039
18914     00 1E 06 F6 | 	mov	local01, #0
18918     A7 20 02 FB | 	rdlong	local02, fp
1891c     0C 4E 05 F1 | 	add	fp, #12
18920     A7 22 02 FB | 	rdlong	local03, fp
18924     0C 4E 85 F1 | 	sub	fp, #12
18928     11 21 0A F2 | 	cmp	local02, local03 wz
1892c     01 1E 66 A6 |  if_e	neg	local01, #1
18930     A7 1E 62 FC | 	wrlong	local01, fp
18934     10 01 90 FD | 	jmp	#LR__2043
18938                 | LR__2039
18938                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)=t2.result.sresult):goto 1150
18938     08 4E 05 F1 | 	add	fp, #8
1893c     A7 1E 02 FB | 	rdlong	local01, fp
18940     08 4E 85 F1 | 	sub	fp, #8
18944     2B 1E 0E F2 | 	cmp	local01, #43 wz
18948     14 4E 05 A1 |  if_e	add	fp, #20
1894c     A7 22 02 AB |  if_e	rdlong	local03, fp
18950     14 4E 85 A1 |  if_e	sub	fp, #20
18954     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
18958     30 00 90 5D |  if_ne	jmp	#LR__2040
1895c     00 1E 06 F6 | 	mov	local01, #0
18960     A7 12 02 FB | 	rdlong	arg01, fp
18964     BC 2A BF FD | 	call	#_convertstring
18968     FD 12 02 F6 | 	mov	arg01, result1
1896c     0C 4E 05 F1 | 	add	fp, #12
18970     A7 14 02 FB | 	rdlong	arg02, fp
18974     0C 4E 85 F1 | 	sub	fp, #12
18978     10 80 B0 FD | 	call	#__system___string_cmp
1897c     00 FA 0D F2 | 	cmp	result1, #0 wz
18980     00 1E 26 A6 |  if_e	not	local01, #0
18984     A7 1E 62 FC | 	wrlong	local01, fp
18988     BC 00 90 FD | 	jmp	#LR__2043
1898c                 | LR__2040
1898c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult=convertstring(t2.result.uresult)) :goto 1150
1898c     08 4E 05 F1 | 	add	fp, #8
18990     A7 1E 02 FB | 	rdlong	local01, fp
18994     08 4E 85 F1 | 	sub	fp, #8
18998     1F 1E 0E F2 | 	cmp	local01, #31 wz
1899c     14 4E 05 A1 |  if_e	add	fp, #20
189a0     A7 22 02 AB |  if_e	rdlong	local03, fp
189a4     14 4E 85 A1 |  if_e	sub	fp, #20
189a8     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
189ac     34 00 90 5D |  if_ne	jmp	#LR__2041
189b0     00 1E 06 F6 | 	mov	local01, #0
189b4     A7 20 02 FB | 	rdlong	local02, fp
189b8     0C 4E 05 F1 | 	add	fp, #12
189bc     A7 12 02 FB | 	rdlong	arg01, fp
189c0     0C 4E 85 F1 | 	sub	fp, #12
189c4     5C 2A BF FD | 	call	#_convertstring
189c8     FD 14 02 F6 | 	mov	arg02, result1
189cc     10 13 02 F6 | 	mov	arg01, local02
189d0     B8 7F B0 FD | 	call	#__system___string_cmp
189d4     00 FA 0D F2 | 	cmp	result1, #0 wz
189d8     00 1E 26 A6 |  if_e	not	local01, #0
189dc     A7 1E 62 FC | 	wrlong	local01, fp
189e0     64 00 90 FD | 	jmp	#LR__2043
189e4                 | LR__2041
189e4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)=convertstring(t2.result.uresult)) :goto 1150
189e4     08 4E 05 F1 | 	add	fp, #8
189e8     A7 1E 02 FB | 	rdlong	local01, fp
189ec     08 4E 85 F1 | 	sub	fp, #8
189f0     2B 1E 0E F2 | 	cmp	local01, #43 wz
189f4     14 4E 05 A1 |  if_e	add	fp, #20
189f8     A7 22 02 AB |  if_e	rdlong	local03, fp
189fc     14 4E 85 A1 |  if_e	sub	fp, #20
18a00     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
18a04     3C 00 90 5D |  if_ne	jmp	#LR__2042
18a08     00 1E 06 F6 | 	mov	local01, #0
18a0c     A7 12 02 FB | 	rdlong	arg01, fp
18a10     10 2A BF FD | 	call	#_convertstring
18a14     FD 20 02 F6 | 	mov	local02, result1
18a18     0C 4E 05 F1 | 	add	fp, #12
18a1c     A7 12 02 FB | 	rdlong	arg01, fp
18a20     0C 4E 85 F1 | 	sub	fp, #12
18a24     FC 29 BF FD | 	call	#_convertstring
18a28     FD 14 02 F6 | 	mov	arg02, result1
18a2c     10 13 02 F6 | 	mov	arg01, local02
18a30     58 7F B0 FD | 	call	#__system___string_cmp
18a34     00 FA 0D F2 | 	cmp	result1, #0 wz
18a38     00 1E 26 A6 |  if_e	not	local01, #0
18a3c     A7 1E 62 FC | 	wrlong	local01, fp
18a40     04 00 90 FD | 	jmp	#LR__2043
18a44                 | LR__2042
18a44     A7 00 68 FC | 	wrlong	#0, fp
18a48                 | LR__2043
18a48     08 4E 05 F1 | 	add	fp, #8
18a4c     A7 38 68 FC | 	wrlong	#28, fp
18a50     08 4E 85 F1 | 	sub	fp, #8
18a54     A7 12 02 F6 | 	mov	arg01, fp
18a58     E8 28 BF FD | 	call	#_push
18a5c     A7 F0 03 F6 | 	mov	ptra, fp
18a60     B2 00 A0 FD | 	call	#popregs_
18a64                 | _do_eq_ret
18a64     2D 00 64 FD | 	ret
18a68                 | 
18a68                 | ' 
18a68                 | ' sub do_gt
18a68                 | _do_gt
18a68     05 4A 05 F6 | 	mov	COUNT_, #5
18a6c     A8 00 A0 FD | 	call	#pushregs_
18a70     18 F0 07 F1 | 	add	ptra, #24
18a74     34 28 BF FD | 	call	#_pop
18a78     FD 1E 02 F6 | 	mov	local01, result1
18a7c     FE 20 02 F6 | 	mov	local02, result2
18a80     FF 22 02 F6 | 	mov	local03, result3
18a84     0C 4E 05 F1 | 	add	fp, #12
18a88     A7 1E 62 FC | 	wrlong	local01, fp
18a8c     04 4E 05 F1 | 	add	fp, #4
18a90     A7 20 62 FC | 	wrlong	local02, fp
18a94     04 4E 05 F1 | 	add	fp, #4
18a98     A7 22 62 FC | 	wrlong	local03, fp
18a9c     14 4E 85 F1 | 	sub	fp, #20
18aa0     08 28 BF FD | 	call	#_pop
18aa4     FF 22 02 F6 | 	mov	local03, result3
18aa8     A7 FA 61 FC | 	wrlong	result1, fp
18aac     04 4E 05 F1 | 	add	fp, #4
18ab0     A7 FC 61 FC | 	wrlong	result2, fp
18ab4     04 4E 05 F1 | 	add	fp, #4
18ab8     A7 22 62 FC | 	wrlong	local03, fp
18abc                 | ' t2=pop()
18abc                 | ' t1=pop()
18abc                 | ' 
18abc                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
18abc     08 4E 85 F1 | 	sub	fp, #8
18ac0     1F 22 0E F2 | 	cmp	local03, #31 wz
18ac4     14 4E 05 A1 |  if_e	add	fp, #20
18ac8     A7 24 02 AB |  if_e	rdlong	local04, fp
18acc     14 4E 85 A1 |  if_e	sub	fp, #20
18ad0     12 23 02 A6 |  if_e	mov	local03, local04
18ad4     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
18ad8     28 00 90 5D |  if_ne	jmp	#LR__2050
18adc     00 1E 06 F6 | 	mov	local01, #0
18ae0     A7 12 02 FB | 	rdlong	arg01, fp
18ae4     0C 4E 05 F1 | 	add	fp, #12
18ae8     A7 14 02 FB | 	rdlong	arg02, fp
18aec     0C 4E 85 F1 | 	sub	fp, #12
18af0     98 7E B0 FD | 	call	#__system___string_cmp
18af4     01 FA 55 F2 | 	cmps	result1, #1 wc
18af8     00 1E 26 36 |  if_ae	not	local01, #0
18afc     A7 1E 62 FC | 	wrlong	local01, fp
18b00     1C 04 90 FD | 	jmp	#LR__2063
18b04                 | LR__2050
18b04                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
18b04     08 4E 05 F1 | 	add	fp, #8
18b08     A7 1E 02 FB | 	rdlong	local01, fp
18b0c     08 4E 85 F1 | 	sub	fp, #8
18b10     1E 1E 0E F2 | 	cmp	local01, #30 wz
18b14     14 4E 05 A1 |  if_e	add	fp, #20
18b18     A7 24 02 AB |  if_e	rdlong	local04, fp
18b1c     14 4E 85 A1 |  if_e	sub	fp, #20
18b20     12 23 02 A6 |  if_e	mov	local03, local04
18b24     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
18b28     2C 00 90 5D |  if_ne	jmp	#LR__2051
18b2c     00 1E 06 F6 | 	mov	local01, #0
18b30     A7 12 02 FB | 	rdlong	arg01, fp
18b34     0C 4E 05 F1 | 	add	fp, #12
18b38     A7 14 02 FB | 	rdlong	arg02, fp
18b3c     0C 4E 85 F1 | 	sub	fp, #12
18b40     01 16 66 F6 | 	neg	arg03, #1
18b44     04 AE B0 FD | 	call	#__system___float_cmp
18b48     01 FA 55 F2 | 	cmps	result1, #1 wc
18b4c     00 1E 26 36 |  if_ae	not	local01, #0
18b50     A7 1E 62 FC | 	wrlong	local01, fp
18b54     C8 03 90 FD | 	jmp	#LR__2063
18b58                 | LR__2051
18b58                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
18b58     08 4E 05 F1 | 	add	fp, #8
18b5c     A7 1E 02 FB | 	rdlong	local01, fp
18b60     08 4E 85 F1 | 	sub	fp, #8
18b64     1E 1E 0E F2 | 	cmp	local01, #30 wz
18b68     14 4E 05 A1 |  if_e	add	fp, #20
18b6c     A7 24 02 AB |  if_e	rdlong	local04, fp
18b70     14 4E 85 A1 |  if_e	sub	fp, #20
18b74     12 23 02 A6 |  if_e	mov	local03, local04
18b78     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
18b7c     48 00 90 5D |  if_ne	jmp	#LR__2052
18b80     00 1E 06 F6 | 	mov	local01, #0
18b84     A7 20 02 FB | 	rdlong	local02, fp
18b88     0C 4E 05 F1 | 	add	fp, #12
18b8c     A7 12 02 FB | 	rdlong	arg01, fp
18b90     0C 4E 85 F1 | 	sub	fp, #12
18b94     09 13 52 F6 | 	abs	arg01, arg01 wc
18b98     1F 26 C6 C9 |  if_b	decod	local05, #31
18b9c     00 26 06 36 |  if_ae	mov	local05, #0
18ba0     70 A5 B0 FD | 	call	#__system___float_fromuns
18ba4     13 FB 61 F5 | 	xor	result1, local05
18ba8     FD 14 02 F6 | 	mov	arg02, result1
18bac     10 13 02 F6 | 	mov	arg01, local02
18bb0     01 16 66 F6 | 	neg	arg03, #1
18bb4     94 AD B0 FD | 	call	#__system___float_cmp
18bb8     01 FA 55 F2 | 	cmps	result1, #1 wc
18bbc     00 1E 26 36 |  if_ae	not	local01, #0
18bc0     A7 1E 62 FC | 	wrlong	local01, fp
18bc4     58 03 90 FD | 	jmp	#LR__2063
18bc8                 | LR__2052
18bc8                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
18bc8     08 4E 05 F1 | 	add	fp, #8
18bcc     A7 1E 02 FB | 	rdlong	local01, fp
18bd0     08 4E 85 F1 | 	sub	fp, #8
18bd4     1E 1E 0E F2 | 	cmp	local01, #30 wz
18bd8     14 4E 05 A1 |  if_e	add	fp, #20
18bdc     A7 24 02 AB |  if_e	rdlong	local04, fp
18be0     14 4E 85 A1 |  if_e	sub	fp, #20
18be4     12 23 02 A6 |  if_e	mov	local03, local04
18be8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
18bec     38 00 90 5D |  if_ne	jmp	#LR__2053
18bf0     00 1E 06 F6 | 	mov	local01, #0
18bf4     A7 20 02 FB | 	rdlong	local02, fp
18bf8     0C 4E 05 F1 | 	add	fp, #12
18bfc     A7 12 02 FB | 	rdlong	arg01, fp
18c00     0C 4E 85 F1 | 	sub	fp, #12
18c04     0C A5 B0 FD | 	call	#__system___float_fromuns
18c08     FD 14 02 F6 | 	mov	arg02, result1
18c0c     10 13 02 F6 | 	mov	arg01, local02
18c10     01 16 66 F6 | 	neg	arg03, #1
18c14     34 AD B0 FD | 	call	#__system___float_cmp
18c18     01 FA 55 F2 | 	cmps	result1, #1 wc
18c1c     00 1E 26 36 |  if_ae	not	local01, #0
18c20     A7 1E 62 FC | 	wrlong	local01, fp
18c24     F8 02 90 FD | 	jmp	#LR__2063
18c28                 | LR__2053
18c28                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
18c28     08 4E 05 F1 | 	add	fp, #8
18c2c     A7 1E 02 FB | 	rdlong	local01, fp
18c30     08 4E 85 F1 | 	sub	fp, #8
18c34     1C 1E 0E F2 | 	cmp	local01, #28 wz
18c38     14 4E 05 A1 |  if_e	add	fp, #20
18c3c     A7 24 02 AB |  if_e	rdlong	local04, fp
18c40     14 4E 85 A1 |  if_e	sub	fp, #20
18c44     12 23 02 A6 |  if_e	mov	local03, local04
18c48     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
18c4c     44 00 90 5D |  if_ne	jmp	#LR__2054
18c50     00 1E 06 F6 | 	mov	local01, #0
18c54     A7 12 02 FB | 	rdlong	arg01, fp
18c58     09 13 52 F6 | 	abs	arg01, arg01 wc
18c5c     1F 26 C6 C9 |  if_b	decod	local05, #31
18c60     00 26 06 36 |  if_ae	mov	local05, #0
18c64     AC A4 B0 FD | 	call	#__system___float_fromuns
18c68     13 FB 61 F5 | 	xor	result1, local05
18c6c     FD 12 02 F6 | 	mov	arg01, result1
18c70     0C 4E 05 F1 | 	add	fp, #12
18c74     A7 14 02 FB | 	rdlong	arg02, fp
18c78     0C 4E 85 F1 | 	sub	fp, #12
18c7c     01 16 66 F6 | 	neg	arg03, #1
18c80     C8 AC B0 FD | 	call	#__system___float_cmp
18c84     01 FA 55 F2 | 	cmps	result1, #1 wc
18c88     00 1E 26 36 |  if_ae	not	local01, #0
18c8c     A7 1E 62 FC | 	wrlong	local01, fp
18c90     8C 02 90 FD | 	jmp	#LR__2063
18c94                 | LR__2054
18c94                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
18c94     08 4E 05 F1 | 	add	fp, #8
18c98     A7 1E 02 FB | 	rdlong	local01, fp
18c9c     08 4E 85 F1 | 	sub	fp, #8
18ca0     1C 1E 0E F2 | 	cmp	local01, #28 wz
18ca4     14 4E 05 A1 |  if_e	add	fp, #20
18ca8     A7 24 02 AB |  if_e	rdlong	local04, fp
18cac     14 4E 85 A1 |  if_e	sub	fp, #20
18cb0     12 23 02 A6 |  if_e	mov	local03, local04
18cb4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
18cb8     24 00 90 5D |  if_ne	jmp	#LR__2055
18cbc     00 1E 06 F6 | 	mov	local01, #0
18cc0     A7 20 02 FB | 	rdlong	local02, fp
18cc4     0C 4E 05 F1 | 	add	fp, #12
18cc8     A7 22 02 FB | 	rdlong	local03, fp
18ccc     0C 4E 85 F1 | 	sub	fp, #12
18cd0     11 21 5A F2 | 	cmps	local02, local03 wcz
18cd4     01 1E 66 16 |  if_a	neg	local01, #1
18cd8     A7 1E 62 FC | 	wrlong	local01, fp
18cdc     40 02 90 FD | 	jmp	#LR__2063
18ce0                 | LR__2055
18ce0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
18ce0     08 4E 05 F1 | 	add	fp, #8
18ce4     A7 1E 02 FB | 	rdlong	local01, fp
18ce8     08 4E 85 F1 | 	sub	fp, #8
18cec     1C 1E 0E F2 | 	cmp	local01, #28 wz
18cf0     14 4E 05 A1 |  if_e	add	fp, #20
18cf4     A7 24 02 AB |  if_e	rdlong	local04, fp
18cf8     14 4E 85 A1 |  if_e	sub	fp, #20
18cfc     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
18d00     24 00 90 5D |  if_ne	jmp	#LR__2056
18d04     00 1E 06 F6 | 	mov	local01, #0
18d08     A7 20 02 FB | 	rdlong	local02, fp
18d0c     0C 4E 05 F1 | 	add	fp, #12
18d10     A7 22 02 FB | 	rdlong	local03, fp
18d14     0C 4E 85 F1 | 	sub	fp, #12
18d18     11 21 5A F2 | 	cmps	local02, local03 wcz
18d1c     01 1E 66 16 |  if_a	neg	local01, #1
18d20     A7 1E 62 FC | 	wrlong	local01, fp
18d24     F8 01 90 FD | 	jmp	#LR__2063
18d28                 | LR__2056
18d28                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
18d28     08 4E 05 F1 | 	add	fp, #8
18d2c     A7 1E 02 FB | 	rdlong	local01, fp
18d30     08 4E 85 F1 | 	sub	fp, #8
18d34     1D 1E 0E F2 | 	cmp	local01, #29 wz
18d38     14 4E 05 A1 |  if_e	add	fp, #20
18d3c     A7 22 02 AB |  if_e	rdlong	local03, fp
18d40     14 4E 85 A1 |  if_e	sub	fp, #20
18d44     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
18d48     34 00 90 5D |  if_ne	jmp	#LR__2057
18d4c     00 1E 06 F6 | 	mov	local01, #0
18d50     A7 12 02 FB | 	rdlong	arg01, fp
18d54     BC A3 B0 FD | 	call	#__system___float_fromuns
18d58     FD 12 02 F6 | 	mov	arg01, result1
18d5c     0C 4E 05 F1 | 	add	fp, #12
18d60     A7 14 02 FB | 	rdlong	arg02, fp
18d64     0C 4E 85 F1 | 	sub	fp, #12
18d68     01 16 66 F6 | 	neg	arg03, #1
18d6c     DC AB B0 FD | 	call	#__system___float_cmp
18d70     01 FA 55 F2 | 	cmps	result1, #1 wc
18d74     00 1E 26 36 |  if_ae	not	local01, #0
18d78     A7 1E 62 FC | 	wrlong	local01, fp
18d7c     A0 01 90 FD | 	jmp	#LR__2063
18d80                 | LR__2057
18d80                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
18d80     08 4E 05 F1 | 	add	fp, #8
18d84     A7 1E 02 FB | 	rdlong	local01, fp
18d88     08 4E 85 F1 | 	sub	fp, #8
18d8c     1D 1E 0E F2 | 	cmp	local01, #29 wz
18d90     14 4E 05 A1 |  if_e	add	fp, #20
18d94     A7 22 02 AB |  if_e	rdlong	local03, fp
18d98     14 4E 85 A1 |  if_e	sub	fp, #20
18d9c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
18da0     24 00 90 5D |  if_ne	jmp	#LR__2058
18da4     00 1E 06 F6 | 	mov	local01, #0
18da8     A7 20 02 FB | 	rdlong	local02, fp
18dac     0C 4E 05 F1 | 	add	fp, #12
18db0     A7 22 02 FB | 	rdlong	local03, fp
18db4     0C 4E 85 F1 | 	sub	fp, #12
18db8     11 21 5A F2 | 	cmps	local02, local03 wcz
18dbc     01 1E 66 16 |  if_a	neg	local01, #1
18dc0     A7 1E 62 FC | 	wrlong	local01, fp
18dc4     58 01 90 FD | 	jmp	#LR__2063
18dc8                 | LR__2058
18dc8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
18dc8     08 4E 05 F1 | 	add	fp, #8
18dcc     A7 1E 02 FB | 	rdlong	local01, fp
18dd0     08 4E 85 F1 | 	sub	fp, #8
18dd4     1D 1E 0E F2 | 	cmp	local01, #29 wz
18dd8     14 4E 05 A1 |  if_e	add	fp, #20
18ddc     A7 22 02 AB |  if_e	rdlong	local03, fp
18de0     14 4E 85 A1 |  if_e	sub	fp, #20
18de4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
18de8     24 00 90 5D |  if_ne	jmp	#LR__2059
18dec     00 1E 06 F6 | 	mov	local01, #0
18df0     A7 20 02 FB | 	rdlong	local02, fp
18df4     0C 4E 05 F1 | 	add	fp, #12
18df8     A7 22 02 FB | 	rdlong	local03, fp
18dfc     0C 4E 85 F1 | 	sub	fp, #12
18e00     11 21 1A F2 | 	cmp	local02, local03 wcz
18e04     01 1E 66 16 |  if_a	neg	local01, #1
18e08     A7 1E 62 FC | 	wrlong	local01, fp
18e0c     10 01 90 FD | 	jmp	#LR__2063
18e10                 | LR__2059
18e10                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>t2.result.sresult):goto 1160
18e10     08 4E 05 F1 | 	add	fp, #8
18e14     A7 1E 02 FB | 	rdlong	local01, fp
18e18     08 4E 85 F1 | 	sub	fp, #8
18e1c     2B 1E 0E F2 | 	cmp	local01, #43 wz
18e20     14 4E 05 A1 |  if_e	add	fp, #20
18e24     A7 22 02 AB |  if_e	rdlong	local03, fp
18e28     14 4E 85 A1 |  if_e	sub	fp, #20
18e2c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
18e30     30 00 90 5D |  if_ne	jmp	#LR__2060
18e34     00 1E 06 F6 | 	mov	local01, #0
18e38     A7 12 02 FB | 	rdlong	arg01, fp
18e3c     E4 25 BF FD | 	call	#_convertstring
18e40     FD 12 02 F6 | 	mov	arg01, result1
18e44     0C 4E 05 F1 | 	add	fp, #12
18e48     A7 14 02 FB | 	rdlong	arg02, fp
18e4c     0C 4E 85 F1 | 	sub	fp, #12
18e50     38 7B B0 FD | 	call	#__system___string_cmp
18e54     01 FA 55 F2 | 	cmps	result1, #1 wc
18e58     00 1E 26 36 |  if_ae	not	local01, #0
18e5c     A7 1E 62 FC | 	wrlong	local01, fp
18e60     BC 00 90 FD | 	jmp	#LR__2063
18e64                 | LR__2060
18e64                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>convertstring(t2.result.uresult)) :goto 1160
18e64     08 4E 05 F1 | 	add	fp, #8
18e68     A7 1E 02 FB | 	rdlong	local01, fp
18e6c     08 4E 85 F1 | 	sub	fp, #8
18e70     1F 1E 0E F2 | 	cmp	local01, #31 wz
18e74     14 4E 05 A1 |  if_e	add	fp, #20
18e78     A7 22 02 AB |  if_e	rdlong	local03, fp
18e7c     14 4E 85 A1 |  if_e	sub	fp, #20
18e80     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
18e84     34 00 90 5D |  if_ne	jmp	#LR__2061
18e88     00 1E 06 F6 | 	mov	local01, #0
18e8c     A7 20 02 FB | 	rdlong	local02, fp
18e90     0C 4E 05 F1 | 	add	fp, #12
18e94     A7 12 02 FB | 	rdlong	arg01, fp
18e98     0C 4E 85 F1 | 	sub	fp, #12
18e9c     84 25 BF FD | 	call	#_convertstring
18ea0     FD 14 02 F6 | 	mov	arg02, result1
18ea4     10 13 02 F6 | 	mov	arg01, local02
18ea8     E0 7A B0 FD | 	call	#__system___string_cmp
18eac     01 FA 55 F2 | 	cmps	result1, #1 wc
18eb0     00 1E 26 36 |  if_ae	not	local01, #0
18eb4     A7 1E 62 FC | 	wrlong	local01, fp
18eb8     64 00 90 FD | 	jmp	#LR__2063
18ebc                 | LR__2061
18ebc                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>convertstring(t2.result.uresult)) :goto 1160
18ebc     08 4E 05 F1 | 	add	fp, #8
18ec0     A7 1E 02 FB | 	rdlong	local01, fp
18ec4     08 4E 85 F1 | 	sub	fp, #8
18ec8     2B 1E 0E F2 | 	cmp	local01, #43 wz
18ecc     14 4E 05 A1 |  if_e	add	fp, #20
18ed0     A7 22 02 AB |  if_e	rdlong	local03, fp
18ed4     14 4E 85 A1 |  if_e	sub	fp, #20
18ed8     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
18edc     3C 00 90 5D |  if_ne	jmp	#LR__2062
18ee0     00 1E 06 F6 | 	mov	local01, #0
18ee4     A7 12 02 FB | 	rdlong	arg01, fp
18ee8     38 25 BF FD | 	call	#_convertstring
18eec     FD 20 02 F6 | 	mov	local02, result1
18ef0     0C 4E 05 F1 | 	add	fp, #12
18ef4     A7 12 02 FB | 	rdlong	arg01, fp
18ef8     0C 4E 85 F1 | 	sub	fp, #12
18efc     24 25 BF FD | 	call	#_convertstring
18f00     FD 14 02 F6 | 	mov	arg02, result1
18f04     10 13 02 F6 | 	mov	arg01, local02
18f08     80 7A B0 FD | 	call	#__system___string_cmp
18f0c     01 FA 55 F2 | 	cmps	result1, #1 wc
18f10     00 1E 26 36 |  if_ae	not	local01, #0
18f14     A7 1E 62 FC | 	wrlong	local01, fp
18f18     04 00 90 FD | 	jmp	#LR__2063
18f1c                 | LR__2062
18f1c     A7 00 68 FC | 	wrlong	#0, fp
18f20                 | LR__2063
18f20     08 4E 05 F1 | 	add	fp, #8
18f24     A7 38 68 FC | 	wrlong	#28, fp
18f28     08 4E 85 F1 | 	sub	fp, #8
18f2c     A7 12 02 F6 | 	mov	arg01, fp
18f30     10 24 BF FD | 	call	#_push
18f34     A7 F0 03 F6 | 	mov	ptra, fp
18f38     B2 00 A0 FD | 	call	#popregs_
18f3c                 | _do_gt_ret
18f3c     2D 00 64 FD | 	ret
18f40                 | 
18f40                 | ' 
18f40                 | ' sub do_lt
18f40                 | _do_lt
18f40     05 4A 05 F6 | 	mov	COUNT_, #5
18f44     A8 00 A0 FD | 	call	#pushregs_
18f48     18 F0 07 F1 | 	add	ptra, #24
18f4c     5C 23 BF FD | 	call	#_pop
18f50     FD 1E 02 F6 | 	mov	local01, result1
18f54     FE 20 02 F6 | 	mov	local02, result2
18f58     FF 22 02 F6 | 	mov	local03, result3
18f5c     0C 4E 05 F1 | 	add	fp, #12
18f60     A7 1E 62 FC | 	wrlong	local01, fp
18f64     04 4E 05 F1 | 	add	fp, #4
18f68     A7 20 62 FC | 	wrlong	local02, fp
18f6c     04 4E 05 F1 | 	add	fp, #4
18f70     A7 22 62 FC | 	wrlong	local03, fp
18f74     14 4E 85 F1 | 	sub	fp, #20
18f78     30 23 BF FD | 	call	#_pop
18f7c     FF 22 02 F6 | 	mov	local03, result3
18f80     A7 FA 61 FC | 	wrlong	result1, fp
18f84     04 4E 05 F1 | 	add	fp, #4
18f88     A7 FC 61 FC | 	wrlong	result2, fp
18f8c     04 4E 05 F1 | 	add	fp, #4
18f90     A7 22 62 FC | 	wrlong	local03, fp
18f94                 | ' t2=pop()
18f94                 | ' t1=pop()
18f94                 | ' 
18f94                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
18f94     08 4E 85 F1 | 	sub	fp, #8
18f98     1F 22 0E F2 | 	cmp	local03, #31 wz
18f9c     14 4E 05 A1 |  if_e	add	fp, #20
18fa0     A7 24 02 AB |  if_e	rdlong	local04, fp
18fa4     14 4E 85 A1 |  if_e	sub	fp, #20
18fa8     12 23 02 A6 |  if_e	mov	local03, local04
18fac     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
18fb0     28 00 90 5D |  if_ne	jmp	#LR__2070
18fb4     00 1E 06 F6 | 	mov	local01, #0
18fb8     A7 12 02 FB | 	rdlong	arg01, fp
18fbc     0C 4E 05 F1 | 	add	fp, #12
18fc0     A7 14 02 FB | 	rdlong	arg02, fp
18fc4     0C 4E 85 F1 | 	sub	fp, #12
18fc8     C0 79 B0 FD | 	call	#__system___string_cmp
18fcc     00 FA 55 F2 | 	cmps	result1, #0 wc
18fd0     00 1E 26 C6 |  if_b	not	local01, #0
18fd4     A7 1E 62 FC | 	wrlong	local01, fp
18fd8     0C 04 90 FD | 	jmp	#LR__2083
18fdc                 | LR__2070
18fdc                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
18fdc     08 4E 05 F1 | 	add	fp, #8
18fe0     A7 1E 02 FB | 	rdlong	local01, fp
18fe4     08 4E 85 F1 | 	sub	fp, #8
18fe8     1E 1E 0E F2 | 	cmp	local01, #30 wz
18fec     14 4E 05 A1 |  if_e	add	fp, #20
18ff0     A7 24 02 AB |  if_e	rdlong	local04, fp
18ff4     14 4E 85 A1 |  if_e	sub	fp, #20
18ff8     12 23 02 A6 |  if_e	mov	local03, local04
18ffc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
19000     2C 00 90 5D |  if_ne	jmp	#LR__2071
19004     00 1E 06 F6 | 	mov	local01, #0
19008     A7 12 02 FB | 	rdlong	arg01, fp
1900c     0C 4E 05 F1 | 	add	fp, #12
19010     A7 14 02 FB | 	rdlong	arg02, fp
19014     0C 4E 85 F1 | 	sub	fp, #12
19018     01 16 06 F6 | 	mov	arg03, #1
1901c     2C A9 B0 FD | 	call	#__system___float_cmp
19020     00 FA 55 F2 | 	cmps	result1, #0 wc
19024     00 1E 26 C6 |  if_b	not	local01, #0
19028     A7 1E 62 FC | 	wrlong	local01, fp
1902c     B8 03 90 FD | 	jmp	#LR__2083
19030                 | LR__2071
19030                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
19030     08 4E 05 F1 | 	add	fp, #8
19034     A7 1E 02 FB | 	rdlong	local01, fp
19038     08 4E 85 F1 | 	sub	fp, #8
1903c     1E 1E 0E F2 | 	cmp	local01, #30 wz
19040     14 4E 05 A1 |  if_e	add	fp, #20
19044     A7 24 02 AB |  if_e	rdlong	local04, fp
19048     14 4E 85 A1 |  if_e	sub	fp, #20
1904c     12 23 02 A6 |  if_e	mov	local03, local04
19050     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
19054     48 00 90 5D |  if_ne	jmp	#LR__2072
19058     00 1E 06 F6 | 	mov	local01, #0
1905c     A7 20 02 FB | 	rdlong	local02, fp
19060     0C 4E 05 F1 | 	add	fp, #12
19064     A7 12 02 FB | 	rdlong	arg01, fp
19068     0C 4E 85 F1 | 	sub	fp, #12
1906c     09 13 52 F6 | 	abs	arg01, arg01 wc
19070     1F 26 C6 C9 |  if_b	decod	local05, #31
19074     00 26 06 36 |  if_ae	mov	local05, #0
19078     98 A0 B0 FD | 	call	#__system___float_fromuns
1907c     13 FB 61 F5 | 	xor	result1, local05
19080     FD 14 02 F6 | 	mov	arg02, result1
19084     10 13 02 F6 | 	mov	arg01, local02
19088     01 16 06 F6 | 	mov	arg03, #1
1908c     BC A8 B0 FD | 	call	#__system___float_cmp
19090     00 FA 55 F2 | 	cmps	result1, #0 wc
19094     00 1E 26 C6 |  if_b	not	local01, #0
19098     A7 1E 62 FC | 	wrlong	local01, fp
1909c     48 03 90 FD | 	jmp	#LR__2083
190a0                 | LR__2072
190a0                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
190a0     08 4E 05 F1 | 	add	fp, #8
190a4     A7 1E 02 FB | 	rdlong	local01, fp
190a8     08 4E 85 F1 | 	sub	fp, #8
190ac     1E 1E 0E F2 | 	cmp	local01, #30 wz
190b0     14 4E 05 A1 |  if_e	add	fp, #20
190b4     A7 24 02 AB |  if_e	rdlong	local04, fp
190b8     14 4E 85 A1 |  if_e	sub	fp, #20
190bc     12 23 02 A6 |  if_e	mov	local03, local04
190c0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
190c4     38 00 90 5D |  if_ne	jmp	#LR__2073
190c8     00 1E 06 F6 | 	mov	local01, #0
190cc     A7 20 02 FB | 	rdlong	local02, fp
190d0     0C 4E 05 F1 | 	add	fp, #12
190d4     A7 12 02 FB | 	rdlong	arg01, fp
190d8     0C 4E 85 F1 | 	sub	fp, #12
190dc     34 A0 B0 FD | 	call	#__system___float_fromuns
190e0     FD 14 02 F6 | 	mov	arg02, result1
190e4     10 13 02 F6 | 	mov	arg01, local02
190e8     01 16 06 F6 | 	mov	arg03, #1
190ec     5C A8 B0 FD | 	call	#__system___float_cmp
190f0     00 FA 55 F2 | 	cmps	result1, #0 wc
190f4     00 1E 26 C6 |  if_b	not	local01, #0
190f8     A7 1E 62 FC | 	wrlong	local01, fp
190fc     E8 02 90 FD | 	jmp	#LR__2083
19100                 | LR__2073
19100                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
19100     08 4E 05 F1 | 	add	fp, #8
19104     A7 1E 02 FB | 	rdlong	local01, fp
19108     08 4E 85 F1 | 	sub	fp, #8
1910c     1C 1E 0E F2 | 	cmp	local01, #28 wz
19110     14 4E 05 A1 |  if_e	add	fp, #20
19114     A7 24 02 AB |  if_e	rdlong	local04, fp
19118     14 4E 85 A1 |  if_e	sub	fp, #20
1911c     12 23 02 A6 |  if_e	mov	local03, local04
19120     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
19124     44 00 90 5D |  if_ne	jmp	#LR__2074
19128     00 1E 06 F6 | 	mov	local01, #0
1912c     A7 12 02 FB | 	rdlong	arg01, fp
19130     09 13 52 F6 | 	abs	arg01, arg01 wc
19134     1F 26 C6 C9 |  if_b	decod	local05, #31
19138     00 26 06 36 |  if_ae	mov	local05, #0
1913c     D4 9F B0 FD | 	call	#__system___float_fromuns
19140     13 FB 61 F5 | 	xor	result1, local05
19144     FD 12 02 F6 | 	mov	arg01, result1
19148     0C 4E 05 F1 | 	add	fp, #12
1914c     A7 14 02 FB | 	rdlong	arg02, fp
19150     0C 4E 85 F1 | 	sub	fp, #12
19154     01 16 06 F6 | 	mov	arg03, #1
19158     F0 A7 B0 FD | 	call	#__system___float_cmp
1915c     00 FA 55 F2 | 	cmps	result1, #0 wc
19160     00 1E 26 C6 |  if_b	not	local01, #0
19164     A7 1E 62 FC | 	wrlong	local01, fp
19168     7C 02 90 FD | 	jmp	#LR__2083
1916c                 | LR__2074
1916c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
1916c     08 4E 05 F1 | 	add	fp, #8
19170     A7 1E 02 FB | 	rdlong	local01, fp
19174     08 4E 85 F1 | 	sub	fp, #8
19178     1C 1E 0E F2 | 	cmp	local01, #28 wz
1917c     14 4E 05 A1 |  if_e	add	fp, #20
19180     A7 24 02 AB |  if_e	rdlong	local04, fp
19184     14 4E 85 A1 |  if_e	sub	fp, #20
19188     12 23 02 A6 |  if_e	mov	local03, local04
1918c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
19190     20 00 90 5D |  if_ne	jmp	#LR__2075
19194     A7 20 02 FB | 	rdlong	local02, fp
19198     0C 4E 05 F1 | 	add	fp, #12
1919c     A7 22 02 FB | 	rdlong	local03, fp
191a0     0C 4E 85 F1 | 	sub	fp, #12
191a4     11 21 52 F2 | 	cmps	local02, local03 wc
191a8     0F 1F A2 F1 | 	subx	local01, local01
191ac     A7 1E 62 FC | 	wrlong	local01, fp
191b0     34 02 90 FD | 	jmp	#LR__2083
191b4                 | LR__2075
191b4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
191b4     08 4E 05 F1 | 	add	fp, #8
191b8     A7 1E 02 FB | 	rdlong	local01, fp
191bc     08 4E 85 F1 | 	sub	fp, #8
191c0     1C 1E 0E F2 | 	cmp	local01, #28 wz
191c4     14 4E 05 A1 |  if_e	add	fp, #20
191c8     A7 24 02 AB |  if_e	rdlong	local04, fp
191cc     14 4E 85 A1 |  if_e	sub	fp, #20
191d0     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
191d4     20 00 90 5D |  if_ne	jmp	#LR__2076
191d8     A7 20 02 FB | 	rdlong	local02, fp
191dc     0C 4E 05 F1 | 	add	fp, #12
191e0     A7 22 02 FB | 	rdlong	local03, fp
191e4     0C 4E 85 F1 | 	sub	fp, #12
191e8     11 21 52 F2 | 	cmps	local02, local03 wc
191ec     0F 1F A2 F1 | 	subx	local01, local01
191f0     A7 1E 62 FC | 	wrlong	local01, fp
191f4     F0 01 90 FD | 	jmp	#LR__2083
191f8                 | LR__2076
191f8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
191f8     08 4E 05 F1 | 	add	fp, #8
191fc     A7 1E 02 FB | 	rdlong	local01, fp
19200     08 4E 85 F1 | 	sub	fp, #8
19204     1D 1E 0E F2 | 	cmp	local01, #29 wz
19208     14 4E 05 A1 |  if_e	add	fp, #20
1920c     A7 22 02 AB |  if_e	rdlong	local03, fp
19210     14 4E 85 A1 |  if_e	sub	fp, #20
19214     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
19218     34 00 90 5D |  if_ne	jmp	#LR__2077
1921c     00 1E 06 F6 | 	mov	local01, #0
19220     A7 12 02 FB | 	rdlong	arg01, fp
19224     EC 9E B0 FD | 	call	#__system___float_fromuns
19228     FD 12 02 F6 | 	mov	arg01, result1
1922c     0C 4E 05 F1 | 	add	fp, #12
19230     A7 14 02 FB | 	rdlong	arg02, fp
19234     0C 4E 85 F1 | 	sub	fp, #12
19238     01 16 06 F6 | 	mov	arg03, #1
1923c     0C A7 B0 FD | 	call	#__system___float_cmp
19240     00 FA 55 F2 | 	cmps	result1, #0 wc
19244     00 1E 26 C6 |  if_b	not	local01, #0
19248     A7 1E 62 FC | 	wrlong	local01, fp
1924c     98 01 90 FD | 	jmp	#LR__2083
19250                 | LR__2077
19250                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
19250     08 4E 05 F1 | 	add	fp, #8
19254     A7 1E 02 FB | 	rdlong	local01, fp
19258     08 4E 85 F1 | 	sub	fp, #8
1925c     1D 1E 0E F2 | 	cmp	local01, #29 wz
19260     14 4E 05 A1 |  if_e	add	fp, #20
19264     A7 22 02 AB |  if_e	rdlong	local03, fp
19268     14 4E 85 A1 |  if_e	sub	fp, #20
1926c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
19270     20 00 90 5D |  if_ne	jmp	#LR__2078
19274     A7 20 02 FB | 	rdlong	local02, fp
19278     0C 4E 05 F1 | 	add	fp, #12
1927c     A7 22 02 FB | 	rdlong	local03, fp
19280     0C 4E 85 F1 | 	sub	fp, #12
19284     11 21 52 F2 | 	cmps	local02, local03 wc
19288     0F 1F A2 F1 | 	subx	local01, local01
1928c     A7 1E 62 FC | 	wrlong	local01, fp
19290     54 01 90 FD | 	jmp	#LR__2083
19294                 | LR__2078
19294                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
19294     08 4E 05 F1 | 	add	fp, #8
19298     A7 1E 02 FB | 	rdlong	local01, fp
1929c     08 4E 85 F1 | 	sub	fp, #8
192a0     1D 1E 0E F2 | 	cmp	local01, #29 wz
192a4     14 4E 05 A1 |  if_e	add	fp, #20
192a8     A7 22 02 AB |  if_e	rdlong	local03, fp
192ac     14 4E 85 A1 |  if_e	sub	fp, #20
192b0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
192b4     20 00 90 5D |  if_ne	jmp	#LR__2079
192b8     A7 20 02 FB | 	rdlong	local02, fp
192bc     0C 4E 05 F1 | 	add	fp, #12
192c0     A7 22 02 FB | 	rdlong	local03, fp
192c4     0C 4E 85 F1 | 	sub	fp, #12
192c8     11 21 12 F2 | 	cmp	local02, local03 wc
192cc     0F 1F A2 F1 | 	subx	local01, local01
192d0     A7 1E 62 FC | 	wrlong	local01, fp
192d4     10 01 90 FD | 	jmp	#LR__2083
192d8                 | LR__2079
192d8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<t2.result.sresult):goto 1170
192d8     08 4E 05 F1 | 	add	fp, #8
192dc     A7 1E 02 FB | 	rdlong	local01, fp
192e0     08 4E 85 F1 | 	sub	fp, #8
192e4     2B 1E 0E F2 | 	cmp	local01, #43 wz
192e8     14 4E 05 A1 |  if_e	add	fp, #20
192ec     A7 22 02 AB |  if_e	rdlong	local03, fp
192f0     14 4E 85 A1 |  if_e	sub	fp, #20
192f4     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
192f8     30 00 90 5D |  if_ne	jmp	#LR__2080
192fc     00 1E 06 F6 | 	mov	local01, #0
19300     A7 12 02 FB | 	rdlong	arg01, fp
19304     1C 21 BF FD | 	call	#_convertstring
19308     FD 12 02 F6 | 	mov	arg01, result1
1930c     0C 4E 05 F1 | 	add	fp, #12
19310     A7 14 02 FB | 	rdlong	arg02, fp
19314     0C 4E 85 F1 | 	sub	fp, #12
19318     70 76 B0 FD | 	call	#__system___string_cmp
1931c     00 FA 55 F2 | 	cmps	result1, #0 wc
19320     00 1E 26 C6 |  if_b	not	local01, #0
19324     A7 1E 62 FC | 	wrlong	local01, fp
19328     BC 00 90 FD | 	jmp	#LR__2083
1932c                 | LR__2080
1932c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<convertstring(t2.result.uresult)) :goto 1170
1932c     08 4E 05 F1 | 	add	fp, #8
19330     A7 1E 02 FB | 	rdlong	local01, fp
19334     08 4E 85 F1 | 	sub	fp, #8
19338     1F 1E 0E F2 | 	cmp	local01, #31 wz
1933c     14 4E 05 A1 |  if_e	add	fp, #20
19340     A7 22 02 AB |  if_e	rdlong	local03, fp
19344     14 4E 85 A1 |  if_e	sub	fp, #20
19348     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1934c     34 00 90 5D |  if_ne	jmp	#LR__2081
19350     00 1E 06 F6 | 	mov	local01, #0
19354     A7 20 02 FB | 	rdlong	local02, fp
19358     0C 4E 05 F1 | 	add	fp, #12
1935c     A7 12 02 FB | 	rdlong	arg01, fp
19360     0C 4E 85 F1 | 	sub	fp, #12
19364     BC 20 BF FD | 	call	#_convertstring
19368     FD 14 02 F6 | 	mov	arg02, result1
1936c     10 13 02 F6 | 	mov	arg01, local02
19370     18 76 B0 FD | 	call	#__system___string_cmp
19374     00 FA 55 F2 | 	cmps	result1, #0 wc
19378     00 1E 26 C6 |  if_b	not	local01, #0
1937c     A7 1E 62 FC | 	wrlong	local01, fp
19380     64 00 90 FD | 	jmp	#LR__2083
19384                 | LR__2081
19384                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<convertstring(t2.result.uresult)) :goto 1170
19384     08 4E 05 F1 | 	add	fp, #8
19388     A7 1E 02 FB | 	rdlong	local01, fp
1938c     08 4E 85 F1 | 	sub	fp, #8
19390     2B 1E 0E F2 | 	cmp	local01, #43 wz
19394     14 4E 05 A1 |  if_e	add	fp, #20
19398     A7 22 02 AB |  if_e	rdlong	local03, fp
1939c     14 4E 85 A1 |  if_e	sub	fp, #20
193a0     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
193a4     3C 00 90 5D |  if_ne	jmp	#LR__2082
193a8     00 1E 06 F6 | 	mov	local01, #0
193ac     A7 12 02 FB | 	rdlong	arg01, fp
193b0     70 20 BF FD | 	call	#_convertstring
193b4     FD 20 02 F6 | 	mov	local02, result1
193b8     0C 4E 05 F1 | 	add	fp, #12
193bc     A7 12 02 FB | 	rdlong	arg01, fp
193c0     0C 4E 85 F1 | 	sub	fp, #12
193c4     5C 20 BF FD | 	call	#_convertstring
193c8     FD 14 02 F6 | 	mov	arg02, result1
193cc     10 13 02 F6 | 	mov	arg01, local02
193d0     B8 75 B0 FD | 	call	#__system___string_cmp
193d4     00 FA 55 F2 | 	cmps	result1, #0 wc
193d8     00 1E 26 C6 |  if_b	not	local01, #0
193dc     A7 1E 62 FC | 	wrlong	local01, fp
193e0     04 00 90 FD | 	jmp	#LR__2083
193e4                 | LR__2082
193e4     A7 00 68 FC | 	wrlong	#0, fp
193e8                 | LR__2083
193e8     08 4E 05 F1 | 	add	fp, #8
193ec     A7 38 68 FC | 	wrlong	#28, fp
193f0     08 4E 85 F1 | 	sub	fp, #8
193f4     A7 12 02 F6 | 	mov	arg01, fp
193f8     48 1F BF FD | 	call	#_push
193fc     A7 F0 03 F6 | 	mov	ptra, fp
19400     B2 00 A0 FD | 	call	#popregs_
19404                 | _do_lt_ret
19404     2D 00 64 FD | 	ret
19408                 | 
19408                 | ' 
19408                 | ' sub do_ge
19408                 | _do_ge
19408     05 4A 05 F6 | 	mov	COUNT_, #5
1940c     A8 00 A0 FD | 	call	#pushregs_
19410     18 F0 07 F1 | 	add	ptra, #24
19414     94 1E BF FD | 	call	#_pop
19418     FD 1E 02 F6 | 	mov	local01, result1
1941c     FE 20 02 F6 | 	mov	local02, result2
19420     FF 22 02 F6 | 	mov	local03, result3
19424     0C 4E 05 F1 | 	add	fp, #12
19428     A7 1E 62 FC | 	wrlong	local01, fp
1942c     04 4E 05 F1 | 	add	fp, #4
19430     A7 20 62 FC | 	wrlong	local02, fp
19434     04 4E 05 F1 | 	add	fp, #4
19438     A7 22 62 FC | 	wrlong	local03, fp
1943c     14 4E 85 F1 | 	sub	fp, #20
19440     68 1E BF FD | 	call	#_pop
19444     FF 22 02 F6 | 	mov	local03, result3
19448     A7 FA 61 FC | 	wrlong	result1, fp
1944c     04 4E 05 F1 | 	add	fp, #4
19450     A7 FC 61 FC | 	wrlong	result2, fp
19454     04 4E 05 F1 | 	add	fp, #4
19458     A7 22 62 FC | 	wrlong	local03, fp
1945c                 | ' t2=pop()
1945c                 | ' t1=pop()
1945c                 | ' 
1945c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
1945c     08 4E 85 F1 | 	sub	fp, #8
19460     1F 22 0E F2 | 	cmp	local03, #31 wz
19464     14 4E 05 A1 |  if_e	add	fp, #20
19468     A7 24 02 AB |  if_e	rdlong	local04, fp
1946c     14 4E 85 A1 |  if_e	sub	fp, #20
19470     12 23 02 A6 |  if_e	mov	local03, local04
19474     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
19478     28 00 90 5D |  if_ne	jmp	#LR__2090
1947c     00 1E 06 F6 | 	mov	local01, #0
19480     A7 12 02 FB | 	rdlong	arg01, fp
19484     0C 4E 05 F1 | 	add	fp, #12
19488     A7 14 02 FB | 	rdlong	arg02, fp
1948c     0C 4E 85 F1 | 	sub	fp, #12
19490     F8 74 B0 FD | 	call	#__system___string_cmp
19494     00 FA 55 F2 | 	cmps	result1, #0 wc
19498     00 1E 26 36 |  if_ae	not	local01, #0
1949c     A7 1E 62 FC | 	wrlong	local01, fp
194a0     1C 04 90 FD | 	jmp	#LR__2103
194a4                 | LR__2090
194a4                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
194a4     08 4E 05 F1 | 	add	fp, #8
194a8     A7 1E 02 FB | 	rdlong	local01, fp
194ac     08 4E 85 F1 | 	sub	fp, #8
194b0     1E 1E 0E F2 | 	cmp	local01, #30 wz
194b4     14 4E 05 A1 |  if_e	add	fp, #20
194b8     A7 24 02 AB |  if_e	rdlong	local04, fp
194bc     14 4E 85 A1 |  if_e	sub	fp, #20
194c0     12 23 02 A6 |  if_e	mov	local03, local04
194c4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
194c8     2C 00 90 5D |  if_ne	jmp	#LR__2091
194cc     00 1E 06 F6 | 	mov	local01, #0
194d0     A7 12 02 FB | 	rdlong	arg01, fp
194d4     0C 4E 05 F1 | 	add	fp, #12
194d8     A7 14 02 FB | 	rdlong	arg02, fp
194dc     0C 4E 85 F1 | 	sub	fp, #12
194e0     01 16 66 F6 | 	neg	arg03, #1
194e4     64 A4 B0 FD | 	call	#__system___float_cmp
194e8     00 FA 55 F2 | 	cmps	result1, #0 wc
194ec     00 1E 26 36 |  if_ae	not	local01, #0
194f0     A7 1E 62 FC | 	wrlong	local01, fp
194f4     C8 03 90 FD | 	jmp	#LR__2103
194f8                 | LR__2091
194f8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
194f8     08 4E 05 F1 | 	add	fp, #8
194fc     A7 1E 02 FB | 	rdlong	local01, fp
19500     08 4E 85 F1 | 	sub	fp, #8
19504     1E 1E 0E F2 | 	cmp	local01, #30 wz
19508     14 4E 05 A1 |  if_e	add	fp, #20
1950c     A7 24 02 AB |  if_e	rdlong	local04, fp
19510     14 4E 85 A1 |  if_e	sub	fp, #20
19514     12 23 02 A6 |  if_e	mov	local03, local04
19518     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1951c     48 00 90 5D |  if_ne	jmp	#LR__2092
19520     00 1E 06 F6 | 	mov	local01, #0
19524     A7 20 02 FB | 	rdlong	local02, fp
19528     0C 4E 05 F1 | 	add	fp, #12
1952c     A7 12 02 FB | 	rdlong	arg01, fp
19530     0C 4E 85 F1 | 	sub	fp, #12
19534     09 13 52 F6 | 	abs	arg01, arg01 wc
19538     1F 26 C6 C9 |  if_b	decod	local05, #31
1953c     00 26 06 36 |  if_ae	mov	local05, #0
19540     D0 9B B0 FD | 	call	#__system___float_fromuns
19544     13 FB 61 F5 | 	xor	result1, local05
19548     FD 14 02 F6 | 	mov	arg02, result1
1954c     10 13 02 F6 | 	mov	arg01, local02
19550     01 16 66 F6 | 	neg	arg03, #1
19554     F4 A3 B0 FD | 	call	#__system___float_cmp
19558     00 FA 55 F2 | 	cmps	result1, #0 wc
1955c     00 1E 26 36 |  if_ae	not	local01, #0
19560     A7 1E 62 FC | 	wrlong	local01, fp
19564     58 03 90 FD | 	jmp	#LR__2103
19568                 | LR__2092
19568                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
19568     08 4E 05 F1 | 	add	fp, #8
1956c     A7 1E 02 FB | 	rdlong	local01, fp
19570     08 4E 85 F1 | 	sub	fp, #8
19574     1E 1E 0E F2 | 	cmp	local01, #30 wz
19578     14 4E 05 A1 |  if_e	add	fp, #20
1957c     A7 24 02 AB |  if_e	rdlong	local04, fp
19580     14 4E 85 A1 |  if_e	sub	fp, #20
19584     12 23 02 A6 |  if_e	mov	local03, local04
19588     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1958c     38 00 90 5D |  if_ne	jmp	#LR__2093
19590     00 1E 06 F6 | 	mov	local01, #0
19594     A7 20 02 FB | 	rdlong	local02, fp
19598     0C 4E 05 F1 | 	add	fp, #12
1959c     A7 12 02 FB | 	rdlong	arg01, fp
195a0     0C 4E 85 F1 | 	sub	fp, #12
195a4     6C 9B B0 FD | 	call	#__system___float_fromuns
195a8     FD 14 02 F6 | 	mov	arg02, result1
195ac     10 13 02 F6 | 	mov	arg01, local02
195b0     01 16 66 F6 | 	neg	arg03, #1
195b4     94 A3 B0 FD | 	call	#__system___float_cmp
195b8     00 FA 55 F2 | 	cmps	result1, #0 wc
195bc     00 1E 26 36 |  if_ae	not	local01, #0
195c0     A7 1E 62 FC | 	wrlong	local01, fp
195c4     F8 02 90 FD | 	jmp	#LR__2103
195c8                 | LR__2093
195c8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
195c8     08 4E 05 F1 | 	add	fp, #8
195cc     A7 1E 02 FB | 	rdlong	local01, fp
195d0     08 4E 85 F1 | 	sub	fp, #8
195d4     1C 1E 0E F2 | 	cmp	local01, #28 wz
195d8     14 4E 05 A1 |  if_e	add	fp, #20
195dc     A7 24 02 AB |  if_e	rdlong	local04, fp
195e0     14 4E 85 A1 |  if_e	sub	fp, #20
195e4     12 23 02 A6 |  if_e	mov	local03, local04
195e8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
195ec     44 00 90 5D |  if_ne	jmp	#LR__2094
195f0     00 1E 06 F6 | 	mov	local01, #0
195f4     A7 12 02 FB | 	rdlong	arg01, fp
195f8     09 13 52 F6 | 	abs	arg01, arg01 wc
195fc     1F 26 C6 C9 |  if_b	decod	local05, #31
19600     00 26 06 36 |  if_ae	mov	local05, #0
19604     0C 9B B0 FD | 	call	#__system___float_fromuns
19608     13 FB 61 F5 | 	xor	result1, local05
1960c     FD 12 02 F6 | 	mov	arg01, result1
19610     0C 4E 05 F1 | 	add	fp, #12
19614     A7 14 02 FB | 	rdlong	arg02, fp
19618     0C 4E 85 F1 | 	sub	fp, #12
1961c     01 16 66 F6 | 	neg	arg03, #1
19620     28 A3 B0 FD | 	call	#__system___float_cmp
19624     00 FA 55 F2 | 	cmps	result1, #0 wc
19628     00 1E 26 36 |  if_ae	not	local01, #0
1962c     A7 1E 62 FC | 	wrlong	local01, fp
19630     8C 02 90 FD | 	jmp	#LR__2103
19634                 | LR__2094
19634                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
19634     08 4E 05 F1 | 	add	fp, #8
19638     A7 1E 02 FB | 	rdlong	local01, fp
1963c     08 4E 85 F1 | 	sub	fp, #8
19640     1C 1E 0E F2 | 	cmp	local01, #28 wz
19644     14 4E 05 A1 |  if_e	add	fp, #20
19648     A7 24 02 AB |  if_e	rdlong	local04, fp
1964c     14 4E 85 A1 |  if_e	sub	fp, #20
19650     12 23 02 A6 |  if_e	mov	local03, local04
19654     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
19658     24 00 90 5D |  if_ne	jmp	#LR__2095
1965c     00 1E 06 F6 | 	mov	local01, #0
19660     A7 20 02 FB | 	rdlong	local02, fp
19664     0C 4E 05 F1 | 	add	fp, #12
19668     A7 22 02 FB | 	rdlong	local03, fp
1966c     0C 4E 85 F1 | 	sub	fp, #12
19670     11 21 52 F2 | 	cmps	local02, local03 wc
19674     01 1E 66 36 |  if_ae	neg	local01, #1
19678     A7 1E 62 FC | 	wrlong	local01, fp
1967c     40 02 90 FD | 	jmp	#LR__2103
19680                 | LR__2095
19680                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
19680     08 4E 05 F1 | 	add	fp, #8
19684     A7 1E 02 FB | 	rdlong	local01, fp
19688     08 4E 85 F1 | 	sub	fp, #8
1968c     1C 1E 0E F2 | 	cmp	local01, #28 wz
19690     14 4E 05 A1 |  if_e	add	fp, #20
19694     A7 24 02 AB |  if_e	rdlong	local04, fp
19698     14 4E 85 A1 |  if_e	sub	fp, #20
1969c     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
196a0     24 00 90 5D |  if_ne	jmp	#LR__2096
196a4     00 1E 06 F6 | 	mov	local01, #0
196a8     A7 20 02 FB | 	rdlong	local02, fp
196ac     0C 4E 05 F1 | 	add	fp, #12
196b0     A7 22 02 FB | 	rdlong	local03, fp
196b4     0C 4E 85 F1 | 	sub	fp, #12
196b8     11 21 52 F2 | 	cmps	local02, local03 wc
196bc     01 1E 66 36 |  if_ae	neg	local01, #1
196c0     A7 1E 62 FC | 	wrlong	local01, fp
196c4     F8 01 90 FD | 	jmp	#LR__2103
196c8                 | LR__2096
196c8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
196c8     08 4E 05 F1 | 	add	fp, #8
196cc     A7 1E 02 FB | 	rdlong	local01, fp
196d0     08 4E 85 F1 | 	sub	fp, #8
196d4     1D 1E 0E F2 | 	cmp	local01, #29 wz
196d8     14 4E 05 A1 |  if_e	add	fp, #20
196dc     A7 22 02 AB |  if_e	rdlong	local03, fp
196e0     14 4E 85 A1 |  if_e	sub	fp, #20
196e4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
196e8     34 00 90 5D |  if_ne	jmp	#LR__2097
196ec     00 1E 06 F6 | 	mov	local01, #0
196f0     A7 12 02 FB | 	rdlong	arg01, fp
196f4     1C 9A B0 FD | 	call	#__system___float_fromuns
196f8     FD 12 02 F6 | 	mov	arg01, result1
196fc     0C 4E 05 F1 | 	add	fp, #12
19700     A7 14 02 FB | 	rdlong	arg02, fp
19704     0C 4E 85 F1 | 	sub	fp, #12
19708     01 16 66 F6 | 	neg	arg03, #1
1970c     3C A2 B0 FD | 	call	#__system___float_cmp
19710     00 FA 55 F2 | 	cmps	result1, #0 wc
19714     00 1E 26 36 |  if_ae	not	local01, #0
19718     A7 1E 62 FC | 	wrlong	local01, fp
1971c     A0 01 90 FD | 	jmp	#LR__2103
19720                 | LR__2097
19720                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
19720     08 4E 05 F1 | 	add	fp, #8
19724     A7 1E 02 FB | 	rdlong	local01, fp
19728     08 4E 85 F1 | 	sub	fp, #8
1972c     1D 1E 0E F2 | 	cmp	local01, #29 wz
19730     14 4E 05 A1 |  if_e	add	fp, #20
19734     A7 22 02 AB |  if_e	rdlong	local03, fp
19738     14 4E 85 A1 |  if_e	sub	fp, #20
1973c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
19740     24 00 90 5D |  if_ne	jmp	#LR__2098
19744     00 1E 06 F6 | 	mov	local01, #0
19748     A7 20 02 FB | 	rdlong	local02, fp
1974c     0C 4E 05 F1 | 	add	fp, #12
19750     A7 22 02 FB | 	rdlong	local03, fp
19754     0C 4E 85 F1 | 	sub	fp, #12
19758     11 21 52 F2 | 	cmps	local02, local03 wc
1975c     01 1E 66 36 |  if_ae	neg	local01, #1
19760     A7 1E 62 FC | 	wrlong	local01, fp
19764     58 01 90 FD | 	jmp	#LR__2103
19768                 | LR__2098
19768                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
19768     08 4E 05 F1 | 	add	fp, #8
1976c     A7 1E 02 FB | 	rdlong	local01, fp
19770     08 4E 85 F1 | 	sub	fp, #8
19774     1D 1E 0E F2 | 	cmp	local01, #29 wz
19778     14 4E 05 A1 |  if_e	add	fp, #20
1977c     A7 22 02 AB |  if_e	rdlong	local03, fp
19780     14 4E 85 A1 |  if_e	sub	fp, #20
19784     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
19788     24 00 90 5D |  if_ne	jmp	#LR__2099
1978c     00 1E 06 F6 | 	mov	local01, #0
19790     A7 20 02 FB | 	rdlong	local02, fp
19794     0C 4E 05 F1 | 	add	fp, #12
19798     A7 22 02 FB | 	rdlong	local03, fp
1979c     0C 4E 85 F1 | 	sub	fp, #12
197a0     11 21 12 F2 | 	cmp	local02, local03 wc
197a4     01 1E 66 36 |  if_ae	neg	local01, #1
197a8     A7 1E 62 FC | 	wrlong	local01, fp
197ac     10 01 90 FD | 	jmp	#LR__2103
197b0                 | LR__2099
197b0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>=t2.result.sresult):goto 1180
197b0     08 4E 05 F1 | 	add	fp, #8
197b4     A7 1E 02 FB | 	rdlong	local01, fp
197b8     08 4E 85 F1 | 	sub	fp, #8
197bc     2B 1E 0E F2 | 	cmp	local01, #43 wz
197c0     14 4E 05 A1 |  if_e	add	fp, #20
197c4     A7 22 02 AB |  if_e	rdlong	local03, fp
197c8     14 4E 85 A1 |  if_e	sub	fp, #20
197cc     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
197d0     30 00 90 5D |  if_ne	jmp	#LR__2100
197d4     00 1E 06 F6 | 	mov	local01, #0
197d8     A7 12 02 FB | 	rdlong	arg01, fp
197dc     44 1C BF FD | 	call	#_convertstring
197e0     FD 12 02 F6 | 	mov	arg01, result1
197e4     0C 4E 05 F1 | 	add	fp, #12
197e8     A7 14 02 FB | 	rdlong	arg02, fp
197ec     0C 4E 85 F1 | 	sub	fp, #12
197f0     98 71 B0 FD | 	call	#__system___string_cmp
197f4     00 FA 55 F2 | 	cmps	result1, #0 wc
197f8     00 1E 26 36 |  if_ae	not	local01, #0
197fc     A7 1E 62 FC | 	wrlong	local01, fp
19800     BC 00 90 FD | 	jmp	#LR__2103
19804                 | LR__2100
19804                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>=convertstring(t2.result.uresult)) :goto 1180
19804     08 4E 05 F1 | 	add	fp, #8
19808     A7 1E 02 FB | 	rdlong	local01, fp
1980c     08 4E 85 F1 | 	sub	fp, #8
19810     1F 1E 0E F2 | 	cmp	local01, #31 wz
19814     14 4E 05 A1 |  if_e	add	fp, #20
19818     A7 22 02 AB |  if_e	rdlong	local03, fp
1981c     14 4E 85 A1 |  if_e	sub	fp, #20
19820     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
19824     34 00 90 5D |  if_ne	jmp	#LR__2101
19828     00 1E 06 F6 | 	mov	local01, #0
1982c     A7 20 02 FB | 	rdlong	local02, fp
19830     0C 4E 05 F1 | 	add	fp, #12
19834     A7 12 02 FB | 	rdlong	arg01, fp
19838     0C 4E 85 F1 | 	sub	fp, #12
1983c     E4 1B BF FD | 	call	#_convertstring
19840     FD 14 02 F6 | 	mov	arg02, result1
19844     10 13 02 F6 | 	mov	arg01, local02
19848     40 71 B0 FD | 	call	#__system___string_cmp
1984c     00 FA 55 F2 | 	cmps	result1, #0 wc
19850     00 1E 26 36 |  if_ae	not	local01, #0
19854     A7 1E 62 FC | 	wrlong	local01, fp
19858     64 00 90 FD | 	jmp	#LR__2103
1985c                 | LR__2101
1985c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>=convertstring(t2.result.uresult)) :goto 1180
1985c     08 4E 05 F1 | 	add	fp, #8
19860     A7 1E 02 FB | 	rdlong	local01, fp
19864     08 4E 85 F1 | 	sub	fp, #8
19868     2B 1E 0E F2 | 	cmp	local01, #43 wz
1986c     14 4E 05 A1 |  if_e	add	fp, #20
19870     A7 22 02 AB |  if_e	rdlong	local03, fp
19874     14 4E 85 A1 |  if_e	sub	fp, #20
19878     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1987c     3C 00 90 5D |  if_ne	jmp	#LR__2102
19880     00 1E 06 F6 | 	mov	local01, #0
19884     A7 12 02 FB | 	rdlong	arg01, fp
19888     98 1B BF FD | 	call	#_convertstring
1988c     FD 20 02 F6 | 	mov	local02, result1
19890     0C 4E 05 F1 | 	add	fp, #12
19894     A7 12 02 FB | 	rdlong	arg01, fp
19898     0C 4E 85 F1 | 	sub	fp, #12
1989c     84 1B BF FD | 	call	#_convertstring
198a0     FD 14 02 F6 | 	mov	arg02, result1
198a4     10 13 02 F6 | 	mov	arg01, local02
198a8     E0 70 B0 FD | 	call	#__system___string_cmp
198ac     00 FA 55 F2 | 	cmps	result1, #0 wc
198b0     00 1E 26 36 |  if_ae	not	local01, #0
198b4     A7 1E 62 FC | 	wrlong	local01, fp
198b8     04 00 90 FD | 	jmp	#LR__2103
198bc                 | LR__2102
198bc     A7 00 68 FC | 	wrlong	#0, fp
198c0                 | LR__2103
198c0     08 4E 05 F1 | 	add	fp, #8
198c4     A7 38 68 FC | 	wrlong	#28, fp
198c8     08 4E 85 F1 | 	sub	fp, #8
198cc     A7 12 02 F6 | 	mov	arg01, fp
198d0     70 1A BF FD | 	call	#_push
198d4     A7 F0 03 F6 | 	mov	ptra, fp
198d8     B2 00 A0 FD | 	call	#popregs_
198dc                 | _do_ge_ret
198dc     2D 00 64 FD | 	ret
198e0                 | 
198e0                 | ' 
198e0                 | ' sub do_le
198e0                 | _do_le
198e0     05 4A 05 F6 | 	mov	COUNT_, #5
198e4     A8 00 A0 FD | 	call	#pushregs_
198e8     18 F0 07 F1 | 	add	ptra, #24
198ec     BC 19 BF FD | 	call	#_pop
198f0     FD 1E 02 F6 | 	mov	local01, result1
198f4     FE 20 02 F6 | 	mov	local02, result2
198f8     FF 22 02 F6 | 	mov	local03, result3
198fc     0C 4E 05 F1 | 	add	fp, #12
19900     A7 1E 62 FC | 	wrlong	local01, fp
19904     04 4E 05 F1 | 	add	fp, #4
19908     A7 20 62 FC | 	wrlong	local02, fp
1990c     04 4E 05 F1 | 	add	fp, #4
19910     A7 22 62 FC | 	wrlong	local03, fp
19914     14 4E 85 F1 | 	sub	fp, #20
19918     90 19 BF FD | 	call	#_pop
1991c     FF 22 02 F6 | 	mov	local03, result3
19920     A7 FA 61 FC | 	wrlong	result1, fp
19924     04 4E 05 F1 | 	add	fp, #4
19928     A7 FC 61 FC | 	wrlong	result2, fp
1992c     04 4E 05 F1 | 	add	fp, #4
19930     A7 22 62 FC | 	wrlong	local03, fp
19934                 | ' t2=pop()
19934                 | ' t1=pop()
19934                 | ' 
19934                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
19934     08 4E 85 F1 | 	sub	fp, #8
19938     1F 22 0E F2 | 	cmp	local03, #31 wz
1993c     14 4E 05 A1 |  if_e	add	fp, #20
19940     A7 24 02 AB |  if_e	rdlong	local04, fp
19944     14 4E 85 A1 |  if_e	sub	fp, #20
19948     12 23 02 A6 |  if_e	mov	local03, local04
1994c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
19950     28 00 90 5D |  if_ne	jmp	#LR__2110
19954     00 1E 06 F6 | 	mov	local01, #0
19958     A7 12 02 FB | 	rdlong	arg01, fp
1995c     0C 4E 05 F1 | 	add	fp, #12
19960     A7 14 02 FB | 	rdlong	arg02, fp
19964     0C 4E 85 F1 | 	sub	fp, #12
19968     20 70 B0 FD | 	call	#__system___string_cmp
1996c     01 FA 55 F2 | 	cmps	result1, #1 wc
19970     00 1E 26 C6 |  if_b	not	local01, #0
19974     A7 1E 62 FC | 	wrlong	local01, fp
19978     1C 04 90 FD | 	jmp	#LR__2123
1997c                 | LR__2110
1997c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
1997c     08 4E 05 F1 | 	add	fp, #8
19980     A7 1E 02 FB | 	rdlong	local01, fp
19984     08 4E 85 F1 | 	sub	fp, #8
19988     1E 1E 0E F2 | 	cmp	local01, #30 wz
1998c     14 4E 05 A1 |  if_e	add	fp, #20
19990     A7 24 02 AB |  if_e	rdlong	local04, fp
19994     14 4E 85 A1 |  if_e	sub	fp, #20
19998     12 23 02 A6 |  if_e	mov	local03, local04
1999c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
199a0     2C 00 90 5D |  if_ne	jmp	#LR__2111
199a4     00 1E 06 F6 | 	mov	local01, #0
199a8     A7 12 02 FB | 	rdlong	arg01, fp
199ac     0C 4E 05 F1 | 	add	fp, #12
199b0     A7 14 02 FB | 	rdlong	arg02, fp
199b4     0C 4E 85 F1 | 	sub	fp, #12
199b8     01 16 06 F6 | 	mov	arg03, #1
199bc     8C 9F B0 FD | 	call	#__system___float_cmp
199c0     01 FA 55 F2 | 	cmps	result1, #1 wc
199c4     00 1E 26 C6 |  if_b	not	local01, #0
199c8     A7 1E 62 FC | 	wrlong	local01, fp
199cc     C8 03 90 FD | 	jmp	#LR__2123
199d0                 | LR__2111
199d0                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
199d0     08 4E 05 F1 | 	add	fp, #8
199d4     A7 1E 02 FB | 	rdlong	local01, fp
199d8     08 4E 85 F1 | 	sub	fp, #8
199dc     1E 1E 0E F2 | 	cmp	local01, #30 wz
199e0     14 4E 05 A1 |  if_e	add	fp, #20
199e4     A7 24 02 AB |  if_e	rdlong	local04, fp
199e8     14 4E 85 A1 |  if_e	sub	fp, #20
199ec     12 23 02 A6 |  if_e	mov	local03, local04
199f0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
199f4     48 00 90 5D |  if_ne	jmp	#LR__2112
199f8     00 1E 06 F6 | 	mov	local01, #0
199fc     A7 20 02 FB | 	rdlong	local02, fp
19a00     0C 4E 05 F1 | 	add	fp, #12
19a04     A7 12 02 FB | 	rdlong	arg01, fp
19a08     0C 4E 85 F1 | 	sub	fp, #12
19a0c     09 13 52 F6 | 	abs	arg01, arg01 wc
19a10     1F 26 C6 C9 |  if_b	decod	local05, #31
19a14     00 26 06 36 |  if_ae	mov	local05, #0
19a18     F8 96 B0 FD | 	call	#__system___float_fromuns
19a1c     13 FB 61 F5 | 	xor	result1, local05
19a20     FD 14 02 F6 | 	mov	arg02, result1
19a24     10 13 02 F6 | 	mov	arg01, local02
19a28     01 16 06 F6 | 	mov	arg03, #1
19a2c     1C 9F B0 FD | 	call	#__system___float_cmp
19a30     01 FA 55 F2 | 	cmps	result1, #1 wc
19a34     00 1E 26 C6 |  if_b	not	local01, #0
19a38     A7 1E 62 FC | 	wrlong	local01, fp
19a3c     58 03 90 FD | 	jmp	#LR__2123
19a40                 | LR__2112
19a40                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
19a40     08 4E 05 F1 | 	add	fp, #8
19a44     A7 1E 02 FB | 	rdlong	local01, fp
19a48     08 4E 85 F1 | 	sub	fp, #8
19a4c     1E 1E 0E F2 | 	cmp	local01, #30 wz
19a50     14 4E 05 A1 |  if_e	add	fp, #20
19a54     A7 24 02 AB |  if_e	rdlong	local04, fp
19a58     14 4E 85 A1 |  if_e	sub	fp, #20
19a5c     12 23 02 A6 |  if_e	mov	local03, local04
19a60     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
19a64     38 00 90 5D |  if_ne	jmp	#LR__2113
19a68     00 1E 06 F6 | 	mov	local01, #0
19a6c     A7 20 02 FB | 	rdlong	local02, fp
19a70     0C 4E 05 F1 | 	add	fp, #12
19a74     A7 12 02 FB | 	rdlong	arg01, fp
19a78     0C 4E 85 F1 | 	sub	fp, #12
19a7c     94 96 B0 FD | 	call	#__system___float_fromuns
19a80     FD 14 02 F6 | 	mov	arg02, result1
19a84     10 13 02 F6 | 	mov	arg01, local02
19a88     01 16 06 F6 | 	mov	arg03, #1
19a8c     BC 9E B0 FD | 	call	#__system___float_cmp
19a90     01 FA 55 F2 | 	cmps	result1, #1 wc
19a94     00 1E 26 C6 |  if_b	not	local01, #0
19a98     A7 1E 62 FC | 	wrlong	local01, fp
19a9c     F8 02 90 FD | 	jmp	#LR__2123
19aa0                 | LR__2113
19aa0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
19aa0     08 4E 05 F1 | 	add	fp, #8
19aa4     A7 1E 02 FB | 	rdlong	local01, fp
19aa8     08 4E 85 F1 | 	sub	fp, #8
19aac     1C 1E 0E F2 | 	cmp	local01, #28 wz
19ab0     14 4E 05 A1 |  if_e	add	fp, #20
19ab4     A7 24 02 AB |  if_e	rdlong	local04, fp
19ab8     14 4E 85 A1 |  if_e	sub	fp, #20
19abc     12 23 02 A6 |  if_e	mov	local03, local04
19ac0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
19ac4     44 00 90 5D |  if_ne	jmp	#LR__2114
19ac8     00 1E 06 F6 | 	mov	local01, #0
19acc     A7 12 02 FB | 	rdlong	arg01, fp
19ad0     09 13 52 F6 | 	abs	arg01, arg01 wc
19ad4     1F 26 C6 C9 |  if_b	decod	local05, #31
19ad8     00 26 06 36 |  if_ae	mov	local05, #0
19adc     34 96 B0 FD | 	call	#__system___float_fromuns
19ae0     13 FB 61 F5 | 	xor	result1, local05
19ae4     FD 12 02 F6 | 	mov	arg01, result1
19ae8     0C 4E 05 F1 | 	add	fp, #12
19aec     A7 14 02 FB | 	rdlong	arg02, fp
19af0     0C 4E 85 F1 | 	sub	fp, #12
19af4     01 16 06 F6 | 	mov	arg03, #1
19af8     50 9E B0 FD | 	call	#__system___float_cmp
19afc     01 FA 55 F2 | 	cmps	result1, #1 wc
19b00     00 1E 26 C6 |  if_b	not	local01, #0
19b04     A7 1E 62 FC | 	wrlong	local01, fp
19b08     8C 02 90 FD | 	jmp	#LR__2123
19b0c                 | LR__2114
19b0c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
19b0c     08 4E 05 F1 | 	add	fp, #8
19b10     A7 1E 02 FB | 	rdlong	local01, fp
19b14     08 4E 85 F1 | 	sub	fp, #8
19b18     1C 1E 0E F2 | 	cmp	local01, #28 wz
19b1c     14 4E 05 A1 |  if_e	add	fp, #20
19b20     A7 24 02 AB |  if_e	rdlong	local04, fp
19b24     14 4E 85 A1 |  if_e	sub	fp, #20
19b28     12 23 02 A6 |  if_e	mov	local03, local04
19b2c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
19b30     24 00 90 5D |  if_ne	jmp	#LR__2115
19b34     00 1E 06 F6 | 	mov	local01, #0
19b38     A7 20 02 FB | 	rdlong	local02, fp
19b3c     0C 4E 05 F1 | 	add	fp, #12
19b40     A7 22 02 FB | 	rdlong	local03, fp
19b44     0C 4E 85 F1 | 	sub	fp, #12
19b48     11 21 5A F2 | 	cmps	local02, local03 wcz
19b4c     01 1E 66 E6 |  if_be	neg	local01, #1
19b50     A7 1E 62 FC | 	wrlong	local01, fp
19b54     40 02 90 FD | 	jmp	#LR__2123
19b58                 | LR__2115
19b58                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
19b58     08 4E 05 F1 | 	add	fp, #8
19b5c     A7 1E 02 FB | 	rdlong	local01, fp
19b60     08 4E 85 F1 | 	sub	fp, #8
19b64     1C 1E 0E F2 | 	cmp	local01, #28 wz
19b68     14 4E 05 A1 |  if_e	add	fp, #20
19b6c     A7 24 02 AB |  if_e	rdlong	local04, fp
19b70     14 4E 85 A1 |  if_e	sub	fp, #20
19b74     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
19b78     24 00 90 5D |  if_ne	jmp	#LR__2116
19b7c     00 1E 06 F6 | 	mov	local01, #0
19b80     A7 20 02 FB | 	rdlong	local02, fp
19b84     0C 4E 05 F1 | 	add	fp, #12
19b88     A7 22 02 FB | 	rdlong	local03, fp
19b8c     0C 4E 85 F1 | 	sub	fp, #12
19b90     11 21 5A F2 | 	cmps	local02, local03 wcz
19b94     01 1E 66 E6 |  if_be	neg	local01, #1
19b98     A7 1E 62 FC | 	wrlong	local01, fp
19b9c     F8 01 90 FD | 	jmp	#LR__2123
19ba0                 | LR__2116
19ba0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
19ba0     08 4E 05 F1 | 	add	fp, #8
19ba4     A7 1E 02 FB | 	rdlong	local01, fp
19ba8     08 4E 85 F1 | 	sub	fp, #8
19bac     1D 1E 0E F2 | 	cmp	local01, #29 wz
19bb0     14 4E 05 A1 |  if_e	add	fp, #20
19bb4     A7 22 02 AB |  if_e	rdlong	local03, fp
19bb8     14 4E 85 A1 |  if_e	sub	fp, #20
19bbc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
19bc0     34 00 90 5D |  if_ne	jmp	#LR__2117
19bc4     00 1E 06 F6 | 	mov	local01, #0
19bc8     A7 12 02 FB | 	rdlong	arg01, fp
19bcc     44 95 B0 FD | 	call	#__system___float_fromuns
19bd0     FD 12 02 F6 | 	mov	arg01, result1
19bd4     0C 4E 05 F1 | 	add	fp, #12
19bd8     A7 14 02 FB | 	rdlong	arg02, fp
19bdc     0C 4E 85 F1 | 	sub	fp, #12
19be0     01 16 06 F6 | 	mov	arg03, #1
19be4     64 9D B0 FD | 	call	#__system___float_cmp
19be8     01 FA 55 F2 | 	cmps	result1, #1 wc
19bec     00 1E 26 C6 |  if_b	not	local01, #0
19bf0     A7 1E 62 FC | 	wrlong	local01, fp
19bf4     A0 01 90 FD | 	jmp	#LR__2123
19bf8                 | LR__2117
19bf8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
19bf8     08 4E 05 F1 | 	add	fp, #8
19bfc     A7 1E 02 FB | 	rdlong	local01, fp
19c00     08 4E 85 F1 | 	sub	fp, #8
19c04     1D 1E 0E F2 | 	cmp	local01, #29 wz
19c08     14 4E 05 A1 |  if_e	add	fp, #20
19c0c     A7 22 02 AB |  if_e	rdlong	local03, fp
19c10     14 4E 85 A1 |  if_e	sub	fp, #20
19c14     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
19c18     24 00 90 5D |  if_ne	jmp	#LR__2118
19c1c     00 1E 06 F6 | 	mov	local01, #0
19c20     A7 20 02 FB | 	rdlong	local02, fp
19c24     0C 4E 05 F1 | 	add	fp, #12
19c28     A7 22 02 FB | 	rdlong	local03, fp
19c2c     0C 4E 85 F1 | 	sub	fp, #12
19c30     11 21 5A F2 | 	cmps	local02, local03 wcz
19c34     01 1E 66 E6 |  if_be	neg	local01, #1
19c38     A7 1E 62 FC | 	wrlong	local01, fp
19c3c     58 01 90 FD | 	jmp	#LR__2123
19c40                 | LR__2118
19c40                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
19c40     08 4E 05 F1 | 	add	fp, #8
19c44     A7 1E 02 FB | 	rdlong	local01, fp
19c48     08 4E 85 F1 | 	sub	fp, #8
19c4c     1D 1E 0E F2 | 	cmp	local01, #29 wz
19c50     14 4E 05 A1 |  if_e	add	fp, #20
19c54     A7 22 02 AB |  if_e	rdlong	local03, fp
19c58     14 4E 85 A1 |  if_e	sub	fp, #20
19c5c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
19c60     24 00 90 5D |  if_ne	jmp	#LR__2119
19c64     00 1E 06 F6 | 	mov	local01, #0
19c68     A7 20 02 FB | 	rdlong	local02, fp
19c6c     0C 4E 05 F1 | 	add	fp, #12
19c70     A7 22 02 FB | 	rdlong	local03, fp
19c74     0C 4E 85 F1 | 	sub	fp, #12
19c78     11 21 1A F2 | 	cmp	local02, local03 wcz
19c7c     01 1E 66 E6 |  if_be	neg	local01, #1
19c80     A7 1E 62 FC | 	wrlong	local01, fp
19c84     10 01 90 FD | 	jmp	#LR__2123
19c88                 | LR__2119
19c88                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<=t2.result.sresult):goto 1190
19c88     08 4E 05 F1 | 	add	fp, #8
19c8c     A7 1E 02 FB | 	rdlong	local01, fp
19c90     08 4E 85 F1 | 	sub	fp, #8
19c94     2B 1E 0E F2 | 	cmp	local01, #43 wz
19c98     14 4E 05 A1 |  if_e	add	fp, #20
19c9c     A7 22 02 AB |  if_e	rdlong	local03, fp
19ca0     14 4E 85 A1 |  if_e	sub	fp, #20
19ca4     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
19ca8     30 00 90 5D |  if_ne	jmp	#LR__2120
19cac     00 1E 06 F6 | 	mov	local01, #0
19cb0     A7 12 02 FB | 	rdlong	arg01, fp
19cb4     6C 17 BF FD | 	call	#_convertstring
19cb8     FD 12 02 F6 | 	mov	arg01, result1
19cbc     0C 4E 05 F1 | 	add	fp, #12
19cc0     A7 14 02 FB | 	rdlong	arg02, fp
19cc4     0C 4E 85 F1 | 	sub	fp, #12
19cc8     C0 6C B0 FD | 	call	#__system___string_cmp
19ccc     01 FA 55 F2 | 	cmps	result1, #1 wc
19cd0     00 1E 26 C6 |  if_b	not	local01, #0
19cd4     A7 1E 62 FC | 	wrlong	local01, fp
19cd8     BC 00 90 FD | 	jmp	#LR__2123
19cdc                 | LR__2120
19cdc                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<=convertstring(t2.result.uresult)) :goto 1190
19cdc     08 4E 05 F1 | 	add	fp, #8
19ce0     A7 1E 02 FB | 	rdlong	local01, fp
19ce4     08 4E 85 F1 | 	sub	fp, #8
19ce8     1F 1E 0E F2 | 	cmp	local01, #31 wz
19cec     14 4E 05 A1 |  if_e	add	fp, #20
19cf0     A7 22 02 AB |  if_e	rdlong	local03, fp
19cf4     14 4E 85 A1 |  if_e	sub	fp, #20
19cf8     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
19cfc     34 00 90 5D |  if_ne	jmp	#LR__2121
19d00     00 1E 06 F6 | 	mov	local01, #0
19d04     A7 20 02 FB | 	rdlong	local02, fp
19d08     0C 4E 05 F1 | 	add	fp, #12
19d0c     A7 12 02 FB | 	rdlong	arg01, fp
19d10     0C 4E 85 F1 | 	sub	fp, #12
19d14     0C 17 BF FD | 	call	#_convertstring
19d18     FD 14 02 F6 | 	mov	arg02, result1
19d1c     10 13 02 F6 | 	mov	arg01, local02
19d20     68 6C B0 FD | 	call	#__system___string_cmp
19d24     01 FA 55 F2 | 	cmps	result1, #1 wc
19d28     00 1E 26 C6 |  if_b	not	local01, #0
19d2c     A7 1E 62 FC | 	wrlong	local01, fp
19d30     64 00 90 FD | 	jmp	#LR__2123
19d34                 | LR__2121
19d34                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<=convertstring(t2.result.uresult)) :goto 1190
19d34     08 4E 05 F1 | 	add	fp, #8
19d38     A7 1E 02 FB | 	rdlong	local01, fp
19d3c     08 4E 85 F1 | 	sub	fp, #8
19d40     2B 1E 0E F2 | 	cmp	local01, #43 wz
19d44     14 4E 05 A1 |  if_e	add	fp, #20
19d48     A7 22 02 AB |  if_e	rdlong	local03, fp
19d4c     14 4E 85 A1 |  if_e	sub	fp, #20
19d50     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
19d54     3C 00 90 5D |  if_ne	jmp	#LR__2122
19d58     00 1E 06 F6 | 	mov	local01, #0
19d5c     A7 12 02 FB | 	rdlong	arg01, fp
19d60     C0 16 BF FD | 	call	#_convertstring
19d64     FD 20 02 F6 | 	mov	local02, result1
19d68     0C 4E 05 F1 | 	add	fp, #12
19d6c     A7 12 02 FB | 	rdlong	arg01, fp
19d70     0C 4E 85 F1 | 	sub	fp, #12
19d74     AC 16 BF FD | 	call	#_convertstring
19d78     FD 14 02 F6 | 	mov	arg02, result1
19d7c     10 13 02 F6 | 	mov	arg01, local02
19d80     08 6C B0 FD | 	call	#__system___string_cmp
19d84     01 FA 55 F2 | 	cmps	result1, #1 wc
19d88     00 1E 26 C6 |  if_b	not	local01, #0
19d8c     A7 1E 62 FC | 	wrlong	local01, fp
19d90     04 00 90 FD | 	jmp	#LR__2123
19d94                 | LR__2122
19d94     A7 00 68 FC | 	wrlong	#0, fp
19d98                 | LR__2123
19d98     08 4E 05 F1 | 	add	fp, #8
19d9c     A7 38 68 FC | 	wrlong	#28, fp
19da0     08 4E 85 F1 | 	sub	fp, #8
19da4     A7 12 02 F6 | 	mov	arg01, fp
19da8     98 15 BF FD | 	call	#_push
19dac     A7 F0 03 F6 | 	mov	ptra, fp
19db0     B2 00 A0 FD | 	call	#popregs_
19db4                 | _do_le_ret
19db4     2D 00 64 FD | 	ret
19db8                 | 
19db8                 | ' 
19db8                 | ' 
19db8                 | ' sub do_ne
19db8                 | _do_ne
19db8     05 4A 05 F6 | 	mov	COUNT_, #5
19dbc     A8 00 A0 FD | 	call	#pushregs_
19dc0     18 F0 07 F1 | 	add	ptra, #24
19dc4     E4 14 BF FD | 	call	#_pop
19dc8     FD 1E 02 F6 | 	mov	local01, result1
19dcc     FE 20 02 F6 | 	mov	local02, result2
19dd0     FF 22 02 F6 | 	mov	local03, result3
19dd4     0C 4E 05 F1 | 	add	fp, #12
19dd8     A7 1E 62 FC | 	wrlong	local01, fp
19ddc     04 4E 05 F1 | 	add	fp, #4
19de0     A7 20 62 FC | 	wrlong	local02, fp
19de4     04 4E 05 F1 | 	add	fp, #4
19de8     A7 22 62 FC | 	wrlong	local03, fp
19dec     14 4E 85 F1 | 	sub	fp, #20
19df0     B8 14 BF FD | 	call	#_pop
19df4     FF 22 02 F6 | 	mov	local03, result3
19df8     A7 FA 61 FC | 	wrlong	result1, fp
19dfc     04 4E 05 F1 | 	add	fp, #4
19e00     A7 FC 61 FC | 	wrlong	result2, fp
19e04     04 4E 05 F1 | 	add	fp, #4
19e08     A7 22 62 FC | 	wrlong	local03, fp
19e0c                 | ' t2=pop()
19e0c                 | ' t1=pop()
19e0c                 | ' 
19e0c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
19e0c     08 4E 85 F1 | 	sub	fp, #8
19e10     1F 22 0E F2 | 	cmp	local03, #31 wz
19e14     14 4E 05 A1 |  if_e	add	fp, #20
19e18     A7 24 02 AB |  if_e	rdlong	local04, fp
19e1c     14 4E 85 A1 |  if_e	sub	fp, #20
19e20     12 23 02 A6 |  if_e	mov	local03, local04
19e24     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
19e28     28 00 90 5D |  if_ne	jmp	#LR__2130
19e2c     00 1E 06 F6 | 	mov	local01, #0
19e30     A7 12 02 FB | 	rdlong	arg01, fp
19e34     0C 4E 05 F1 | 	add	fp, #12
19e38     A7 14 02 FB | 	rdlong	arg02, fp
19e3c     0C 4E 85 F1 | 	sub	fp, #12
19e40     48 6B B0 FD | 	call	#__system___string_cmp
19e44     00 FA 0D F2 | 	cmp	result1, #0 wz
19e48     00 1E 26 56 |  if_ne	not	local01, #0
19e4c     A7 1E 62 FC | 	wrlong	local01, fp
19e50     1C 04 90 FD | 	jmp	#LR__2143
19e54                 | LR__2130
19e54                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
19e54     08 4E 05 F1 | 	add	fp, #8
19e58     A7 1E 02 FB | 	rdlong	local01, fp
19e5c     08 4E 85 F1 | 	sub	fp, #8
19e60     1E 1E 0E F2 | 	cmp	local01, #30 wz
19e64     14 4E 05 A1 |  if_e	add	fp, #20
19e68     A7 24 02 AB |  if_e	rdlong	local04, fp
19e6c     14 4E 85 A1 |  if_e	sub	fp, #20
19e70     12 23 02 A6 |  if_e	mov	local03, local04
19e74     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
19e78     2C 00 90 5D |  if_ne	jmp	#LR__2131
19e7c     00 1E 06 F6 | 	mov	local01, #0
19e80     A7 12 02 FB | 	rdlong	arg01, fp
19e84     0C 4E 05 F1 | 	add	fp, #12
19e88     A7 14 02 FB | 	rdlong	arg02, fp
19e8c     0C 4E 85 F1 | 	sub	fp, #12
19e90     01 16 06 F6 | 	mov	arg03, #1
19e94     B4 9A B0 FD | 	call	#__system___float_cmp
19e98     00 FA 0D F2 | 	cmp	result1, #0 wz
19e9c     00 1E 26 56 |  if_ne	not	local01, #0
19ea0     A7 1E 62 FC | 	wrlong	local01, fp
19ea4     C8 03 90 FD | 	jmp	#LR__2143
19ea8                 | LR__2131
19ea8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
19ea8     08 4E 05 F1 | 	add	fp, #8
19eac     A7 1E 02 FB | 	rdlong	local01, fp
19eb0     08 4E 85 F1 | 	sub	fp, #8
19eb4     1E 1E 0E F2 | 	cmp	local01, #30 wz
19eb8     14 4E 05 A1 |  if_e	add	fp, #20
19ebc     A7 24 02 AB |  if_e	rdlong	local04, fp
19ec0     14 4E 85 A1 |  if_e	sub	fp, #20
19ec4     12 23 02 A6 |  if_e	mov	local03, local04
19ec8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
19ecc     48 00 90 5D |  if_ne	jmp	#LR__2132
19ed0     00 1E 06 F6 | 	mov	local01, #0
19ed4     A7 20 02 FB | 	rdlong	local02, fp
19ed8     0C 4E 05 F1 | 	add	fp, #12
19edc     A7 12 02 FB | 	rdlong	arg01, fp
19ee0     0C 4E 85 F1 | 	sub	fp, #12
19ee4     09 13 52 F6 | 	abs	arg01, arg01 wc
19ee8     1F 26 C6 C9 |  if_b	decod	local05, #31
19eec     00 26 06 36 |  if_ae	mov	local05, #0
19ef0     20 92 B0 FD | 	call	#__system___float_fromuns
19ef4     13 FB 61 F5 | 	xor	result1, local05
19ef8     FD 14 02 F6 | 	mov	arg02, result1
19efc     10 13 02 F6 | 	mov	arg01, local02
19f00     01 16 06 F6 | 	mov	arg03, #1
19f04     44 9A B0 FD | 	call	#__system___float_cmp
19f08     00 FA 0D F2 | 	cmp	result1, #0 wz
19f0c     00 1E 26 56 |  if_ne	not	local01, #0
19f10     A7 1E 62 FC | 	wrlong	local01, fp
19f14     58 03 90 FD | 	jmp	#LR__2143
19f18                 | LR__2132
19f18                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
19f18     08 4E 05 F1 | 	add	fp, #8
19f1c     A7 1E 02 FB | 	rdlong	local01, fp
19f20     08 4E 85 F1 | 	sub	fp, #8
19f24     1E 1E 0E F2 | 	cmp	local01, #30 wz
19f28     14 4E 05 A1 |  if_e	add	fp, #20
19f2c     A7 24 02 AB |  if_e	rdlong	local04, fp
19f30     14 4E 85 A1 |  if_e	sub	fp, #20
19f34     12 23 02 A6 |  if_e	mov	local03, local04
19f38     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
19f3c     38 00 90 5D |  if_ne	jmp	#LR__2133
19f40     00 1E 06 F6 | 	mov	local01, #0
19f44     A7 20 02 FB | 	rdlong	local02, fp
19f48     0C 4E 05 F1 | 	add	fp, #12
19f4c     A7 12 02 FB | 	rdlong	arg01, fp
19f50     0C 4E 85 F1 | 	sub	fp, #12
19f54     BC 91 B0 FD | 	call	#__system___float_fromuns
19f58     FD 14 02 F6 | 	mov	arg02, result1
19f5c     10 13 02 F6 | 	mov	arg01, local02
19f60     01 16 06 F6 | 	mov	arg03, #1
19f64     E4 99 B0 FD | 	call	#__system___float_cmp
19f68     00 FA 0D F2 | 	cmp	result1, #0 wz
19f6c     00 1E 26 56 |  if_ne	not	local01, #0
19f70     A7 1E 62 FC | 	wrlong	local01, fp
19f74     F8 02 90 FD | 	jmp	#LR__2143
19f78                 | LR__2133
19f78                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
19f78     08 4E 05 F1 | 	add	fp, #8
19f7c     A7 1E 02 FB | 	rdlong	local01, fp
19f80     08 4E 85 F1 | 	sub	fp, #8
19f84     1C 1E 0E F2 | 	cmp	local01, #28 wz
19f88     14 4E 05 A1 |  if_e	add	fp, #20
19f8c     A7 24 02 AB |  if_e	rdlong	local04, fp
19f90     14 4E 85 A1 |  if_e	sub	fp, #20
19f94     12 23 02 A6 |  if_e	mov	local03, local04
19f98     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
19f9c     44 00 90 5D |  if_ne	jmp	#LR__2134
19fa0     00 1E 06 F6 | 	mov	local01, #0
19fa4     A7 12 02 FB | 	rdlong	arg01, fp
19fa8     09 13 52 F6 | 	abs	arg01, arg01 wc
19fac     1F 26 C6 C9 |  if_b	decod	local05, #31
19fb0     00 26 06 36 |  if_ae	mov	local05, #0
19fb4     5C 91 B0 FD | 	call	#__system___float_fromuns
19fb8     13 FB 61 F5 | 	xor	result1, local05
19fbc     FD 12 02 F6 | 	mov	arg01, result1
19fc0     0C 4E 05 F1 | 	add	fp, #12
19fc4     A7 14 02 FB | 	rdlong	arg02, fp
19fc8     0C 4E 85 F1 | 	sub	fp, #12
19fcc     01 16 06 F6 | 	mov	arg03, #1
19fd0     78 99 B0 FD | 	call	#__system___float_cmp
19fd4     00 FA 0D F2 | 	cmp	result1, #0 wz
19fd8     00 1E 26 56 |  if_ne	not	local01, #0
19fdc     A7 1E 62 FC | 	wrlong	local01, fp
19fe0     8C 02 90 FD | 	jmp	#LR__2143
19fe4                 | LR__2134
19fe4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
19fe4     08 4E 05 F1 | 	add	fp, #8
19fe8     A7 1E 02 FB | 	rdlong	local01, fp
19fec     08 4E 85 F1 | 	sub	fp, #8
19ff0     1C 1E 0E F2 | 	cmp	local01, #28 wz
19ff4     14 4E 05 A1 |  if_e	add	fp, #20
19ff8     A7 24 02 AB |  if_e	rdlong	local04, fp
19ffc     14 4E 85 A1 |  if_e	sub	fp, #20
1a000     12 23 02 A6 |  if_e	mov	local03, local04
1a004     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1a008     24 00 90 5D |  if_ne	jmp	#LR__2135
1a00c     00 1E 06 F6 | 	mov	local01, #0
1a010     A7 20 02 FB | 	rdlong	local02, fp
1a014     0C 4E 05 F1 | 	add	fp, #12
1a018     A7 22 02 FB | 	rdlong	local03, fp
1a01c     0C 4E 85 F1 | 	sub	fp, #12
1a020     11 21 0A F2 | 	cmp	local02, local03 wz
1a024     01 1E 66 56 |  if_ne	neg	local01, #1
1a028     A7 1E 62 FC | 	wrlong	local01, fp
1a02c     40 02 90 FD | 	jmp	#LR__2143
1a030                 | LR__2135
1a030                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
1a030     08 4E 05 F1 | 	add	fp, #8
1a034     A7 1E 02 FB | 	rdlong	local01, fp
1a038     08 4E 85 F1 | 	sub	fp, #8
1a03c     1C 1E 0E F2 | 	cmp	local01, #28 wz
1a040     14 4E 05 A1 |  if_e	add	fp, #20
1a044     A7 24 02 AB |  if_e	rdlong	local04, fp
1a048     14 4E 85 A1 |  if_e	sub	fp, #20
1a04c     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
1a050     24 00 90 5D |  if_ne	jmp	#LR__2136
1a054     00 1E 06 F6 | 	mov	local01, #0
1a058     A7 20 02 FB | 	rdlong	local02, fp
1a05c     0C 4E 05 F1 | 	add	fp, #12
1a060     A7 22 02 FB | 	rdlong	local03, fp
1a064     0C 4E 85 F1 | 	sub	fp, #12
1a068     11 21 0A F2 | 	cmp	local02, local03 wz
1a06c     01 1E 66 56 |  if_ne	neg	local01, #1
1a070     A7 1E 62 FC | 	wrlong	local01, fp
1a074     F8 01 90 FD | 	jmp	#LR__2143
1a078                 | LR__2136
1a078                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
1a078     08 4E 05 F1 | 	add	fp, #8
1a07c     A7 1E 02 FB | 	rdlong	local01, fp
1a080     08 4E 85 F1 | 	sub	fp, #8
1a084     1D 1E 0E F2 | 	cmp	local01, #29 wz
1a088     14 4E 05 A1 |  if_e	add	fp, #20
1a08c     A7 22 02 AB |  if_e	rdlong	local03, fp
1a090     14 4E 85 A1 |  if_e	sub	fp, #20
1a094     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1a098     34 00 90 5D |  if_ne	jmp	#LR__2137
1a09c     00 1E 06 F6 | 	mov	local01, #0
1a0a0     A7 12 02 FB | 	rdlong	arg01, fp
1a0a4     6C 90 B0 FD | 	call	#__system___float_fromuns
1a0a8     FD 12 02 F6 | 	mov	arg01, result1
1a0ac     0C 4E 05 F1 | 	add	fp, #12
1a0b0     A7 14 02 FB | 	rdlong	arg02, fp
1a0b4     0C 4E 85 F1 | 	sub	fp, #12
1a0b8     01 16 06 F6 | 	mov	arg03, #1
1a0bc     8C 98 B0 FD | 	call	#__system___float_cmp
1a0c0     00 FA 0D F2 | 	cmp	result1, #0 wz
1a0c4     00 1E 26 56 |  if_ne	not	local01, #0
1a0c8     A7 1E 62 FC | 	wrlong	local01, fp
1a0cc     A0 01 90 FD | 	jmp	#LR__2143
1a0d0                 | LR__2137
1a0d0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
1a0d0     08 4E 05 F1 | 	add	fp, #8
1a0d4     A7 1E 02 FB | 	rdlong	local01, fp
1a0d8     08 4E 85 F1 | 	sub	fp, #8
1a0dc     1D 1E 0E F2 | 	cmp	local01, #29 wz
1a0e0     14 4E 05 A1 |  if_e	add	fp, #20
1a0e4     A7 22 02 AB |  if_e	rdlong	local03, fp
1a0e8     14 4E 85 A1 |  if_e	sub	fp, #20
1a0ec     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1a0f0     24 00 90 5D |  if_ne	jmp	#LR__2138
1a0f4     00 1E 06 F6 | 	mov	local01, #0
1a0f8     A7 20 02 FB | 	rdlong	local02, fp
1a0fc     0C 4E 05 F1 | 	add	fp, #12
1a100     A7 22 02 FB | 	rdlong	local03, fp
1a104     0C 4E 85 F1 | 	sub	fp, #12
1a108     11 21 0A F2 | 	cmp	local02, local03 wz
1a10c     01 1E 66 56 |  if_ne	neg	local01, #1
1a110     A7 1E 62 FC | 	wrlong	local01, fp
1a114     58 01 90 FD | 	jmp	#LR__2143
1a118                 | LR__2138
1a118                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
1a118     08 4E 05 F1 | 	add	fp, #8
1a11c     A7 1E 02 FB | 	rdlong	local01, fp
1a120     08 4E 85 F1 | 	sub	fp, #8
1a124     1D 1E 0E F2 | 	cmp	local01, #29 wz
1a128     14 4E 05 A1 |  if_e	add	fp, #20
1a12c     A7 22 02 AB |  if_e	rdlong	local03, fp
1a130     14 4E 85 A1 |  if_e	sub	fp, #20
1a134     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1a138     24 00 90 5D |  if_ne	jmp	#LR__2139
1a13c     00 1E 06 F6 | 	mov	local01, #0
1a140     A7 20 02 FB | 	rdlong	local02, fp
1a144     0C 4E 05 F1 | 	add	fp, #12
1a148     A7 22 02 FB | 	rdlong	local03, fp
1a14c     0C 4E 85 F1 | 	sub	fp, #12
1a150     11 21 0A F2 | 	cmp	local02, local03 wz
1a154     01 1E 66 56 |  if_ne	neg	local01, #1
1a158     A7 1E 62 FC | 	wrlong	local01, fp
1a15c     10 01 90 FD | 	jmp	#LR__2143
1a160                 | LR__2139
1a160                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<>t2.result.sresult):goto 1192
1a160     08 4E 05 F1 | 	add	fp, #8
1a164     A7 1E 02 FB | 	rdlong	local01, fp
1a168     08 4E 85 F1 | 	sub	fp, #8
1a16c     2B 1E 0E F2 | 	cmp	local01, #43 wz
1a170     14 4E 05 A1 |  if_e	add	fp, #20
1a174     A7 22 02 AB |  if_e	rdlong	local03, fp
1a178     14 4E 85 A1 |  if_e	sub	fp, #20
1a17c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
1a180     30 00 90 5D |  if_ne	jmp	#LR__2140
1a184     00 1E 06 F6 | 	mov	local01, #0
1a188     A7 12 02 FB | 	rdlong	arg01, fp
1a18c     94 12 BF FD | 	call	#_convertstring
1a190     FD 12 02 F6 | 	mov	arg01, result1
1a194     0C 4E 05 F1 | 	add	fp, #12
1a198     A7 14 02 FB | 	rdlong	arg02, fp
1a19c     0C 4E 85 F1 | 	sub	fp, #12
1a1a0     E8 67 B0 FD | 	call	#__system___string_cmp
1a1a4     00 FA 0D F2 | 	cmp	result1, #0 wz
1a1a8     00 1E 26 56 |  if_ne	not	local01, #0
1a1ac     A7 1E 62 FC | 	wrlong	local01, fp
1a1b0     BC 00 90 FD | 	jmp	#LR__2143
1a1b4                 | LR__2140
1a1b4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<>convertstring(t2.result.uresult)) :goto 1192
1a1b4     08 4E 05 F1 | 	add	fp, #8
1a1b8     A7 1E 02 FB | 	rdlong	local01, fp
1a1bc     08 4E 85 F1 | 	sub	fp, #8
1a1c0     1F 1E 0E F2 | 	cmp	local01, #31 wz
1a1c4     14 4E 05 A1 |  if_e	add	fp, #20
1a1c8     A7 22 02 AB |  if_e	rdlong	local03, fp
1a1cc     14 4E 85 A1 |  if_e	sub	fp, #20
1a1d0     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1a1d4     34 00 90 5D |  if_ne	jmp	#LR__2141
1a1d8     00 1E 06 F6 | 	mov	local01, #0
1a1dc     A7 20 02 FB | 	rdlong	local02, fp
1a1e0     0C 4E 05 F1 | 	add	fp, #12
1a1e4     A7 12 02 FB | 	rdlong	arg01, fp
1a1e8     0C 4E 85 F1 | 	sub	fp, #12
1a1ec     34 12 BF FD | 	call	#_convertstring
1a1f0     FD 14 02 F6 | 	mov	arg02, result1
1a1f4     10 13 02 F6 | 	mov	arg01, local02
1a1f8     90 67 B0 FD | 	call	#__system___string_cmp
1a1fc     00 FA 0D F2 | 	cmp	result1, #0 wz
1a200     00 1E 26 56 |  if_ne	not	local01, #0
1a204     A7 1E 62 FC | 	wrlong	local01, fp
1a208     64 00 90 FD | 	jmp	#LR__2143
1a20c                 | LR__2141
1a20c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<>convertstring(t2.result.uresult)) :goto 1192
1a20c     08 4E 05 F1 | 	add	fp, #8
1a210     A7 1E 02 FB | 	rdlong	local01, fp
1a214     08 4E 85 F1 | 	sub	fp, #8
1a218     2B 1E 0E F2 | 	cmp	local01, #43 wz
1a21c     14 4E 05 A1 |  if_e	add	fp, #20
1a220     A7 22 02 AB |  if_e	rdlong	local03, fp
1a224     14 4E 85 A1 |  if_e	sub	fp, #20
1a228     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1a22c     3C 00 90 5D |  if_ne	jmp	#LR__2142
1a230     00 1E 06 F6 | 	mov	local01, #0
1a234     A7 12 02 FB | 	rdlong	arg01, fp
1a238     E8 11 BF FD | 	call	#_convertstring
1a23c     FD 20 02 F6 | 	mov	local02, result1
1a240     0C 4E 05 F1 | 	add	fp, #12
1a244     A7 12 02 FB | 	rdlong	arg01, fp
1a248     0C 4E 85 F1 | 	sub	fp, #12
1a24c     D4 11 BF FD | 	call	#_convertstring
1a250     FD 14 02 F6 | 	mov	arg02, result1
1a254     10 13 02 F6 | 	mov	arg01, local02
1a258     30 67 B0 FD | 	call	#__system___string_cmp
1a25c     00 FA 0D F2 | 	cmp	result1, #0 wz
1a260     00 1E 26 56 |  if_ne	not	local01, #0
1a264     A7 1E 62 FC | 	wrlong	local01, fp
1a268     04 00 90 FD | 	jmp	#LR__2143
1a26c                 | LR__2142
1a26c     A7 00 68 FC | 	wrlong	#0, fp
1a270                 | LR__2143
1a270     08 4E 05 F1 | 	add	fp, #8
1a274     A7 38 68 FC | 	wrlong	#28, fp
1a278     08 4E 85 F1 | 	sub	fp, #8
1a27c     A7 12 02 F6 | 	mov	arg01, fp
1a280     C0 10 BF FD | 	call	#_push
1a284     A7 F0 03 F6 | 	mov	ptra, fp
1a288     B2 00 A0 FD | 	call	#popregs_
1a28c                 | _do_ne_ret
1a28c     2D 00 64 FD | 	ret
1a290                 | 
1a290                 | ' 
1a290                 | ' 
1a290                 | ' 
1a290                 | ' ' -------------------------- Draw a filled circle at x,y and radius r
1a290                 | ' 
1a290                 | ' sub do_fcircle
1a290                 | _do_fcircle
1a290     02 4A 05 F6 | 	mov	COUNT_, #2
1a294     A8 00 A0 FD | 	call	#pushregs_
1a298     24 F0 07 F1 | 	add	ptra, #36
1a29c     0C 10 BF FD | 	call	#_pop
1a2a0     FD 18 02 F6 | 	mov	arg04, result1
1a2a4     FE 16 02 F6 | 	mov	arg03, result2
1a2a8     FF 14 02 F6 | 	mov	arg02, result3
1a2ac     18 4E 05 F1 | 	add	fp, #24
1a2b0     A7 18 62 FC | 	wrlong	arg04, fp
1a2b4     04 4E 05 F1 | 	add	fp, #4
1a2b8     A7 16 62 FC | 	wrlong	arg03, fp
1a2bc     04 4E 05 F1 | 	add	fp, #4
1a2c0     A7 14 62 FC | 	wrlong	arg02, fp
1a2c4     20 4E 85 F1 | 	sub	fp, #32
1a2c8     E0 0F BF FD | 	call	#_pop
1a2cc     FD 18 02 F6 | 	mov	arg04, result1
1a2d0     FE 16 02 F6 | 	mov	arg03, result2
1a2d4     FF 1E 02 F6 | 	mov	local01, result3
1a2d8     0C 4E 05 F1 | 	add	fp, #12
1a2dc     A7 18 62 FC | 	wrlong	arg04, fp
1a2e0     04 4E 05 F1 | 	add	fp, #4
1a2e4     A7 16 62 FC | 	wrlong	arg03, fp
1a2e8     04 4E 05 F1 | 	add	fp, #4
1a2ec     A7 1E 62 FC | 	wrlong	local01, fp
1a2f0     14 4E 85 F1 | 	sub	fp, #20
1a2f4     B4 0F BF FD | 	call	#_pop
1a2f8     A7 FA 61 FC | 	wrlong	result1, fp
1a2fc     04 4E 05 F1 | 	add	fp, #4
1a300     A7 FC 61 FC | 	wrlong	result2, fp
1a304     04 4E 05 F1 | 	add	fp, #4
1a308     A7 FE 61 FC | 	wrlong	result3, fp
1a30c                 | ' 
1a30c                 | ' t3=pop()
1a30c                 | ' t2=pop()
1a30c                 | ' t1=pop()
1a30c                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
1a30c     FF 18 02 F6 | 	mov	arg04, result3
1a310     08 4E 85 F1 | 	sub	fp, #8
1a314     1C 18 0E F2 | 	cmp	arg04, #28 wz
1a318     08 4E 05 51 |  if_ne	add	fp, #8
1a31c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1a320     08 4E 85 51 |  if_ne	sub	fp, #8
1a324     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
1a328     7C 00 90 5D |  if_ne	jmp	#LR__2150
1a32c     14 4E 05 F1 | 	add	fp, #20
1a330     A7 1E 02 FB | 	rdlong	local01, fp
1a334     14 4E 85 F1 | 	sub	fp, #20
1a338     1C 1E 0E F2 | 	cmp	local01, #28 wz
1a33c     14 4E 05 51 |  if_ne	add	fp, #20
1a340     A7 18 02 5B |  if_ne	rdlong	arg04, fp
1a344     14 4E 85 51 |  if_ne	sub	fp, #20
1a348     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
1a34c     58 00 90 5D |  if_ne	jmp	#LR__2150
1a350     20 4E 05 F1 | 	add	fp, #32
1a354     A7 1E 02 FB | 	rdlong	local01, fp
1a358     20 4E 85 F1 | 	sub	fp, #32
1a35c     1C 1E 0E F2 | 	cmp	local01, #28 wz
1a360     20 4E 05 51 |  if_ne	add	fp, #32
1a364     A7 18 02 5B |  if_ne	rdlong	arg04, fp
1a368     20 4E 85 51 |  if_ne	sub	fp, #32
1a36c     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
1a370     34 00 90 5D |  if_ne	jmp	#LR__2150
1a374     A7 12 02 FB | 	rdlong	arg01, fp
1a378     0C 4E 05 F1 | 	add	fp, #12
1a37c     A7 14 02 FB | 	rdlong	arg02, fp
1a380     0C 4E 05 F1 | 	add	fp, #12
1a384     A7 16 02 FB | 	rdlong	arg03, fp
1a388     18 4E 85 F1 | 	sub	fp, #24
1a38c     37 00 00 FF 
1a390     28 E4 05 F1 | 	add	objptr, ##28200
1a394     F2 18 02 FB | 	rdlong	arg04, objptr
1a398     37 00 00 FF 
1a39c     28 E4 85 F1 | 	sub	objptr, ##28200
1a3a0     44 47 B0 FD | 	call	#_hg010b_spin2_fcircle
1a3a4                 | '    v.fcircle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
1a3a4     54 00 90 FD | 	jmp	#LR__2151
1a3a8                 | LR__2150
1a3a8     A7 12 02 F6 | 	mov	arg01, fp
1a3ac     E0 10 BF FD | 	call	#_converttoint
1a3b0     FD 1E 02 F6 | 	mov	local01, result1
1a3b4     0C 4E 05 F1 | 	add	fp, #12
1a3b8     A7 12 02 F6 | 	mov	arg01, fp
1a3bc     0C 4E 85 F1 | 	sub	fp, #12
1a3c0     CC 10 BF FD | 	call	#_converttoint
1a3c4     FD 20 02 F6 | 	mov	local02, result1
1a3c8     18 4E 05 F1 | 	add	fp, #24
1a3cc     A7 12 02 F6 | 	mov	arg01, fp
1a3d0     18 4E 85 F1 | 	sub	fp, #24
1a3d4     B8 10 BF FD | 	call	#_converttoint
1a3d8     FD 16 02 F6 | 	mov	arg03, result1
1a3dc     37 00 00 FF 
1a3e0     28 E4 05 F1 | 	add	objptr, ##28200
1a3e4     F2 18 02 FB | 	rdlong	arg04, objptr
1a3e8     37 00 00 FF 
1a3ec     28 E4 85 F1 | 	sub	objptr, ##28200
1a3f0     0F 13 02 F6 | 	mov	arg01, local01
1a3f4     10 15 02 F6 | 	mov	arg02, local02
1a3f8     EC 46 B0 FD | 	call	#_hg010b_spin2_fcircle
1a3fc                 | LR__2151
1a3fc     A7 F0 03 F6 | 	mov	ptra, fp
1a400     B2 00 A0 FD | 	call	#popregs_
1a404                 | _do_fcircle_ret
1a404     2D 00 64 FD | 	ret
1a408                 | 
1a408                 | ' 
1a408                 | ' 
1a408                 | ' sub do_fill
1a408                 | _do_fill
1a408     03 4A 05 F6 | 	mov	COUNT_, #3
1a40c     A8 00 A0 FD | 	call	#pushregs_
1a410     30 F0 07 F1 | 	add	ptra, #48
1a414     94 0E BF FD | 	call	#_pop
1a418     FD 18 02 F6 | 	mov	arg04, result1
1a41c     FE 16 02 F6 | 	mov	arg03, result2
1a420     FF 14 02 F6 | 	mov	arg02, result3
1a424     24 4E 05 F1 | 	add	fp, #36
1a428     A7 18 62 FC | 	wrlong	arg04, fp
1a42c     04 4E 05 F1 | 	add	fp, #4
1a430     A7 16 62 FC | 	wrlong	arg03, fp
1a434     04 4E 05 F1 | 	add	fp, #4
1a438     A7 14 62 FC | 	wrlong	arg02, fp
1a43c     2C 4E 85 F1 | 	sub	fp, #44
1a440     68 0E BF FD | 	call	#_pop
1a444     FD 18 02 F6 | 	mov	arg04, result1
1a448     FE 16 02 F6 | 	mov	arg03, result2
1a44c     FF 14 02 F6 | 	mov	arg02, result3
1a450     18 4E 05 F1 | 	add	fp, #24
1a454     A7 18 62 FC | 	wrlong	arg04, fp
1a458     04 4E 05 F1 | 	add	fp, #4
1a45c     A7 16 62 FC | 	wrlong	arg03, fp
1a460     04 4E 05 F1 | 	add	fp, #4
1a464     A7 14 62 FC | 	wrlong	arg02, fp
1a468     20 4E 85 F1 | 	sub	fp, #32
1a46c     3C 0E BF FD | 	call	#_pop
1a470     FD 18 02 F6 | 	mov	arg04, result1
1a474     FE 16 02 F6 | 	mov	arg03, result2
1a478     FF 1E 02 F6 | 	mov	local01, result3
1a47c     0C 4E 05 F1 | 	add	fp, #12
1a480     A7 18 62 FC | 	wrlong	arg04, fp
1a484     04 4E 05 F1 | 	add	fp, #4
1a488     A7 16 62 FC | 	wrlong	arg03, fp
1a48c     04 4E 05 F1 | 	add	fp, #4
1a490     A7 1E 62 FC | 	wrlong	local01, fp
1a494     14 4E 85 F1 | 	sub	fp, #20
1a498     10 0E BF FD | 	call	#_pop
1a49c     A7 FA 61 FC | 	wrlong	result1, fp
1a4a0     04 4E 05 F1 | 	add	fp, #4
1a4a4     A7 FC 61 FC | 	wrlong	result2, fp
1a4a8     04 4E 05 F1 | 	add	fp, #4
1a4ac     A7 FE 61 FC | 	wrlong	result3, fp
1a4b0                 | ' 
1a4b0                 | ' t4=pop()
1a4b0                 | ' t3=pop()
1a4b0                 | ' t2=pop()
1a4b0                 | ' t1=pop()
1a4b0                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
1a4b0     FF 18 02 F6 | 	mov	arg04, result3
1a4b4     08 4E 85 F1 | 	sub	fp, #8
1a4b8     1C 18 0E F2 | 	cmp	arg04, #28 wz
1a4bc     08 4E 05 51 |  if_ne	add	fp, #8
1a4c0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1a4c4     08 4E 85 51 |  if_ne	sub	fp, #8
1a4c8     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
1a4cc     94 00 90 5D |  if_ne	jmp	#LR__2160
1a4d0     14 4E 05 F1 | 	add	fp, #20
1a4d4     A7 1E 02 FB | 	rdlong	local01, fp
1a4d8     14 4E 85 F1 | 	sub	fp, #20
1a4dc     1C 1E 0E F2 | 	cmp	local01, #28 wz
1a4e0     14 4E 05 51 |  if_ne	add	fp, #20
1a4e4     A7 18 02 5B |  if_ne	rdlong	arg04, fp
1a4e8     14 4E 85 51 |  if_ne	sub	fp, #20
1a4ec     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
1a4f0     70 00 90 5D |  if_ne	jmp	#LR__2160
1a4f4     20 4E 05 F1 | 	add	fp, #32
1a4f8     A7 1E 02 FB | 	rdlong	local01, fp
1a4fc     20 4E 85 F1 | 	sub	fp, #32
1a500     1C 1E 0E F2 | 	cmp	local01, #28 wz
1a504     20 4E 05 51 |  if_ne	add	fp, #32
1a508     A7 18 02 5B |  if_ne	rdlong	arg04, fp
1a50c     20 4E 85 51 |  if_ne	sub	fp, #32
1a510     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
1a514     4C 00 90 5D |  if_ne	jmp	#LR__2160
1a518     2C 4E 05 F1 | 	add	fp, #44
1a51c     A7 1E 02 FB | 	rdlong	local01, fp
1a520     2C 4E 85 F1 | 	sub	fp, #44
1a524     1C 1E 0E F2 | 	cmp	local01, #28 wz
1a528     2C 4E 05 51 |  if_ne	add	fp, #44
1a52c     A7 18 02 5B |  if_ne	rdlong	arg04, fp
1a530     2C 4E 85 51 |  if_ne	sub	fp, #44
1a534     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
1a538     28 00 90 5D |  if_ne	jmp	#LR__2160
1a53c     A7 12 02 FB | 	rdlong	arg01, fp
1a540     0C 4E 05 F1 | 	add	fp, #12
1a544     A7 14 02 FB | 	rdlong	arg02, fp
1a548     0C 4E 05 F1 | 	add	fp, #12
1a54c     A7 16 02 FB | 	rdlong	arg03, fp
1a550     0C 4E 05 F1 | 	add	fp, #12
1a554     A7 18 02 FB | 	rdlong	arg04, fp
1a558     24 4E 85 F1 | 	sub	fp, #36
1a55c     F4 42 B0 FD | 	call	#_hg010b_spin2_fill
1a560                 | '    v.fill(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult) : return
1a560     58 00 90 FD | 	jmp	#LR__2161
1a564                 | LR__2160
1a564     A7 12 02 F6 | 	mov	arg01, fp
1a568     24 0F BF FD | 	call	#_converttoint
1a56c     FD 20 02 F6 | 	mov	local02, result1
1a570     0C 4E 05 F1 | 	add	fp, #12
1a574     A7 12 02 F6 | 	mov	arg01, fp
1a578     0C 4E 85 F1 | 	sub	fp, #12
1a57c     10 0F BF FD | 	call	#_converttoint
1a580     FD 22 02 F6 | 	mov	local03, result1
1a584     18 4E 05 F1 | 	add	fp, #24
1a588     A7 12 02 F6 | 	mov	arg01, fp
1a58c     18 4E 85 F1 | 	sub	fp, #24
1a590     FC 0E BF FD | 	call	#_converttoint
1a594     FD 1E 02 F6 | 	mov	local01, result1
1a598     24 4E 05 F1 | 	add	fp, #36
1a59c     A7 12 02 F6 | 	mov	arg01, fp
1a5a0     24 4E 85 F1 | 	sub	fp, #36
1a5a4     E8 0E BF FD | 	call	#_converttoint
1a5a8     FD 18 02 F6 | 	mov	arg04, result1
1a5ac     10 13 02 F6 | 	mov	arg01, local02
1a5b0     11 15 02 F6 | 	mov	arg02, local03
1a5b4     0F 17 02 F6 | 	mov	arg03, local01
1a5b8     98 42 B0 FD | 	call	#_hg010b_spin2_fill
1a5bc                 | LR__2161
1a5bc     A7 F0 03 F6 | 	mov	ptra, fp
1a5c0     B2 00 A0 FD | 	call	#popregs_
1a5c4                 | _do_fill_ret
1a5c4     2D 00 64 FD | 	ret
1a5c8                 | 
1a5c8                 | ' 
1a5c8                 | ' ' -------------------------- Draw a frane
1a5c8                 | ' 
1a5c8                 | ' sub do_frame
1a5c8                 | _do_frame
1a5c8     03 4A 05 F6 | 	mov	COUNT_, #3
1a5cc     A8 00 A0 FD | 	call	#pushregs_
1a5d0     30 F0 07 F1 | 	add	ptra, #48
1a5d4     D4 0C BF FD | 	call	#_pop
1a5d8     FD 1A 02 F6 | 	mov	arg05, result1
1a5dc     FE 18 02 F6 | 	mov	arg04, result2
1a5e0     FF 16 02 F6 | 	mov	arg03, result3
1a5e4     24 4E 05 F1 | 	add	fp, #36
1a5e8     A7 1A 62 FC | 	wrlong	arg05, fp
1a5ec     04 4E 05 F1 | 	add	fp, #4
1a5f0     A7 18 62 FC | 	wrlong	arg04, fp
1a5f4     04 4E 05 F1 | 	add	fp, #4
1a5f8     A7 16 62 FC | 	wrlong	arg03, fp
1a5fc     2C 4E 85 F1 | 	sub	fp, #44
1a600     A8 0C BF FD | 	call	#_pop
1a604     FD 1A 02 F6 | 	mov	arg05, result1
1a608     FE 18 02 F6 | 	mov	arg04, result2
1a60c     FF 16 02 F6 | 	mov	arg03, result3
1a610     18 4E 05 F1 | 	add	fp, #24
1a614     A7 1A 62 FC | 	wrlong	arg05, fp
1a618     04 4E 05 F1 | 	add	fp, #4
1a61c     A7 18 62 FC | 	wrlong	arg04, fp
1a620     04 4E 05 F1 | 	add	fp, #4
1a624     A7 16 62 FC | 	wrlong	arg03, fp
1a628     20 4E 85 F1 | 	sub	fp, #32
1a62c     7C 0C BF FD | 	call	#_pop
1a630     FD 1A 02 F6 | 	mov	arg05, result1
1a634     FE 18 02 F6 | 	mov	arg04, result2
1a638     FF 1E 02 F6 | 	mov	local01, result3
1a63c     0C 4E 05 F1 | 	add	fp, #12
1a640     A7 1A 62 FC | 	wrlong	arg05, fp
1a644     04 4E 05 F1 | 	add	fp, #4
1a648     A7 18 62 FC | 	wrlong	arg04, fp
1a64c     04 4E 05 F1 | 	add	fp, #4
1a650     A7 1E 62 FC | 	wrlong	local01, fp
1a654     14 4E 85 F1 | 	sub	fp, #20
1a658     50 0C BF FD | 	call	#_pop
1a65c     A7 FA 61 FC | 	wrlong	result1, fp
1a660     04 4E 05 F1 | 	add	fp, #4
1a664     A7 FC 61 FC | 	wrlong	result2, fp
1a668     04 4E 05 F1 | 	add	fp, #4
1a66c     A7 FE 61 FC | 	wrlong	result3, fp
1a670                 | ' 
1a670                 | ' t4=pop()
1a670                 | ' t3=pop()
1a670                 | ' t2=pop()
1a670                 | ' t1=pop()
1a670                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
1a670     FF 1A 02 F6 | 	mov	arg05, result3
1a674     08 4E 85 F1 | 	sub	fp, #8
1a678     1C 1A 0E F2 | 	cmp	arg05, #28 wz
1a67c     08 4E 05 51 |  if_ne	add	fp, #8
1a680     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1a684     08 4E 85 51 |  if_ne	sub	fp, #8
1a688     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
1a68c     A8 00 90 5D |  if_ne	jmp	#LR__2170
1a690     14 4E 05 F1 | 	add	fp, #20
1a694     A7 1E 02 FB | 	rdlong	local01, fp
1a698     14 4E 85 F1 | 	sub	fp, #20
1a69c     1C 1E 0E F2 | 	cmp	local01, #28 wz
1a6a0     14 4E 05 51 |  if_ne	add	fp, #20
1a6a4     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
1a6a8     14 4E 85 51 |  if_ne	sub	fp, #20
1a6ac     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
1a6b0     84 00 90 5D |  if_ne	jmp	#LR__2170
1a6b4     20 4E 05 F1 | 	add	fp, #32
1a6b8     A7 1E 02 FB | 	rdlong	local01, fp
1a6bc     20 4E 85 F1 | 	sub	fp, #32
1a6c0     1C 1E 0E F2 | 	cmp	local01, #28 wz
1a6c4     20 4E 05 51 |  if_ne	add	fp, #32
1a6c8     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
1a6cc     20 4E 85 51 |  if_ne	sub	fp, #32
1a6d0     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
1a6d4     60 00 90 5D |  if_ne	jmp	#LR__2170
1a6d8     2C 4E 05 F1 | 	add	fp, #44
1a6dc     A7 1E 02 FB | 	rdlong	local01, fp
1a6e0     2C 4E 85 F1 | 	sub	fp, #44
1a6e4     1C 1E 0E F2 | 	cmp	local01, #28 wz
1a6e8     2C 4E 05 51 |  if_ne	add	fp, #44
1a6ec     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
1a6f0     2C 4E 85 51 |  if_ne	sub	fp, #44
1a6f4     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
1a6f8     3C 00 90 5D |  if_ne	jmp	#LR__2170
1a6fc     A7 12 02 FB | 	rdlong	arg01, fp
1a700     0C 4E 05 F1 | 	add	fp, #12
1a704     A7 14 02 FB | 	rdlong	arg02, fp
1a708     0C 4E 05 F1 | 	add	fp, #12
1a70c     A7 16 02 FB | 	rdlong	arg03, fp
1a710     0C 4E 05 F1 | 	add	fp, #12
1a714     A7 18 02 FB | 	rdlong	arg04, fp
1a718     24 4E 85 F1 | 	sub	fp, #36
1a71c     37 00 00 FF 
1a720     28 E4 05 F1 | 	add	objptr, ##28200
1a724     F2 1A 02 FB | 	rdlong	arg05, objptr
1a728     37 00 00 FF 
1a72c     28 E4 85 F1 | 	sub	objptr, ##28200
1a730     0C 46 B0 FD | 	call	#_hg010b_spin2_frame
1a734                 | '    v.frame(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
1a734     6C 00 90 FD | 	jmp	#LR__2171
1a738                 | LR__2170
1a738     A7 12 02 F6 | 	mov	arg01, fp
1a73c     50 0D BF FD | 	call	#_converttoint
1a740     FD 20 02 F6 | 	mov	local02, result1
1a744     0C 4E 05 F1 | 	add	fp, #12
1a748     A7 12 02 F6 | 	mov	arg01, fp
1a74c     0C 4E 85 F1 | 	sub	fp, #12
1a750     3C 0D BF FD | 	call	#_converttoint
1a754     FD 22 02 F6 | 	mov	local03, result1
1a758     18 4E 05 F1 | 	add	fp, #24
1a75c     A7 12 02 F6 | 	mov	arg01, fp
1a760     18 4E 85 F1 | 	sub	fp, #24
1a764     28 0D BF FD | 	call	#_converttoint
1a768     FD 1E 02 F6 | 	mov	local01, result1
1a76c     24 4E 05 F1 | 	add	fp, #36
1a770     A7 12 02 F6 | 	mov	arg01, fp
1a774     24 4E 85 F1 | 	sub	fp, #36
1a778     14 0D BF FD | 	call	#_converttoint
1a77c     FD 18 02 F6 | 	mov	arg04, result1
1a780     37 00 00 FF 
1a784     28 E4 05 F1 | 	add	objptr, ##28200
1a788     F2 1A 02 FB | 	rdlong	arg05, objptr
1a78c     37 00 00 FF 
1a790     28 E4 85 F1 | 	sub	objptr, ##28200
1a794     10 13 02 F6 | 	mov	arg01, local02
1a798     11 15 02 F6 | 	mov	arg02, local03
1a79c     0F 17 02 F6 | 	mov	arg03, local01
1a7a0     9C 45 B0 FD | 	call	#_hg010b_spin2_frame
1a7a4                 | LR__2171
1a7a4     A7 F0 03 F6 | 	mov	ptra, fp
1a7a8     B2 00 A0 FD | 	call	#popregs_
1a7ac                 | _do_frame_ret
1a7ac     2D 00 64 FD | 	ret
1a7b0                 | 
1a7b0                 | ' 
1a7b0                 | ' 
1a7b0                 | ' sub do_paper
1a7b0                 | _do_paper
1a7b0     03 4A 05 F6 | 	mov	COUNT_, #3
1a7b4     A8 00 A0 FD | 	call	#pushregs_
1a7b8     F0 0A BF FD | 	call	#_pop
1a7bc     FD 1E 02 F6 | 	mov	local01, result1
1a7c0     FE 20 02 F6 | 	mov	local02, result2
1a7c4     FF 22 02 F6 | 	mov	local03, result3
1a7c8                 | ' t1=pop() 
1a7c8                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
1a7c8     1E 22 0E F2 | 	cmp	local03, #30 wz
1a7cc     10 00 90 5D |  if_ne	jmp	#LR__2180
1a7d0     0F 13 02 F6 | 	mov	arg01, local01
1a7d4     00 14 06 F6 | 	mov	arg02, #0
1a7d8     04 92 B0 FD | 	call	#__system___float_tointeger
1a7dc     FD 1E 02 F6 | 	mov	local01, result1
1a7e0                 | LR__2180
1a7e0                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
1a7e0     1F 22 0E F2 | 	cmp	local03, #31 wz
1a7e4     18 00 90 5D |  if_ne	jmp	#LR__2181
1a7e8     0F 13 02 F6 | 	mov	arg01, local01
1a7ec     34 95 B0 FD | 	call	#__system____builtin_atof
1a7f0     FD 12 02 F6 | 	mov	arg01, result1
1a7f4     00 14 06 F6 | 	mov	arg02, #0
1a7f8     E4 91 B0 FD | 	call	#__system___float_tointeger
1a7fc     FD 1E 02 F6 | 	mov	local01, result1
1a800                 | LR__2181
1a800     37 00 00 FF 
1a804     38 E4 05 F1 | 	add	objptr, ##28216
1a808     F2 1E 62 FC | 	wrlong	local01, objptr
1a80c     04 E4 05 F1 | 	add	objptr, #4
1a810     F2 12 02 FB | 	rdlong	arg01, objptr
1a814                 | ' 
1a814                 | ' write_color:=ff
1a814     36 00 00 FF 
1a818     FB E5 85 F1 | 	sub	objptr, ##28155
1a81c     F2 12 62 FC | 	wrlong	arg01, objptr
1a820                 | ' write_background:=bb
1a820     04 E4 05 F1 | 	add	objptr, #4
1a824     F2 1E 62 FC | 	wrlong	local01, objptr
1a828     45 E4 85 F1 | 	sub	objptr, #69
1a82c     A7 F0 03 F6 | 	mov	ptra, fp
1a830     B2 00 A0 FD | 	call	#popregs_
1a834                 | _do_paper_ret
1a834     2D 00 64 FD | 	ret
1a838                 | 
1a838                 | ' 
1a838                 | ' sub do_ink
1a838                 | _do_ink
1a838     03 4A 05 F6 | 	mov	COUNT_, #3
1a83c     A8 00 A0 FD | 	call	#pushregs_
1a840     68 0A BF FD | 	call	#_pop
1a844     FD 1E 02 F6 | 	mov	local01, result1
1a848     FE 20 02 F6 | 	mov	local02, result2
1a84c     FF 22 02 F6 | 	mov	local03, result3
1a850                 | ' t1=pop() 
1a850                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
1a850     1E 22 0E F2 | 	cmp	local03, #30 wz
1a854     10 00 90 5D |  if_ne	jmp	#LR__2190
1a858     0F 13 02 F6 | 	mov	arg01, local01
1a85c     00 14 06 F6 | 	mov	arg02, #0
1a860     7C 91 B0 FD | 	call	#__system___float_tointeger
1a864     FD 1E 02 F6 | 	mov	local01, result1
1a868                 | LR__2190
1a868                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
1a868     1F 22 0E F2 | 	cmp	local03, #31 wz
1a86c     18 00 90 5D |  if_ne	jmp	#LR__2191
1a870     0F 13 02 F6 | 	mov	arg01, local01
1a874     AC 94 B0 FD | 	call	#__system____builtin_atof
1a878     FD 12 02 F6 | 	mov	arg01, result1
1a87c     00 14 06 F6 | 	mov	arg02, #0
1a880     5C 91 B0 FD | 	call	#__system___float_tointeger
1a884     FD 1E 02 F6 | 	mov	local01, result1
1a888                 | LR__2191
1a888     37 00 00 FF 
1a88c     3C E4 05 F1 | 	add	objptr, ##28220
1a890     F2 1E 62 FC | 	wrlong	local01, objptr
1a894     04 E4 85 F1 | 	sub	objptr, #4
1a898     F2 14 02 FB | 	rdlong	arg02, objptr
1a89c                 | ' 
1a89c                 | ' write_color:=ff
1a89c     36 00 00 FF 
1a8a0     F7 E5 85 F1 | 	sub	objptr, ##28151
1a8a4     F2 1E 62 FC | 	wrlong	local01, objptr
1a8a8                 | ' write_background:=bb
1a8a8     04 E4 05 F1 | 	add	objptr, #4
1a8ac     F2 14 62 FC | 	wrlong	arg02, objptr
1a8b0     36 00 00 FF 
1a8b4     F7 E5 05 F1 | 	add	objptr, ##28151
1a8b8     F2 12 02 FB | 	rdlong	arg01, objptr
1a8bc     37 00 00 FF 
1a8c0     3C E4 85 F1 | 	sub	objptr, ##28220
1a8c4     2C 36 B0 FD | 	call	#_hg010b_spin2_setcursorcolor
1a8c8     A7 F0 03 F6 | 	mov	ptra, fp
1a8cc     B2 00 A0 FD | 	call	#popregs_
1a8d0                 | _do_ink_ret
1a8d0     2D 00 64 FD | 	ret
1a8d4                 | 
1a8d4                 | ' 
1a8d4                 | ' 
1a8d4                 | ' sub do_font
1a8d4                 | _do_font
1a8d4     03 4A 05 F6 | 	mov	COUNT_, #3
1a8d8     A8 00 A0 FD | 	call	#pushregs_
1a8dc     CC 09 BF FD | 	call	#_pop
1a8e0     FD 1E 02 F6 | 	mov	local01, result1
1a8e4     FE 20 02 F6 | 	mov	local02, result2
1a8e8     FF 22 02 F6 | 	mov	local03, result3
1a8ec                 | ' t1=pop() 
1a8ec                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
1a8ec     1E 22 0E F2 | 	cmp	local03, #30 wz
1a8f0     10 00 90 5D |  if_ne	jmp	#LR__2200
1a8f4     0F 13 02 F6 | 	mov	arg01, local01
1a8f8     00 14 06 F6 | 	mov	arg02, #0
1a8fc     E0 90 B0 FD | 	call	#__system___float_tointeger
1a900     FD 1E 02 F6 | 	mov	local01, result1
1a904                 | LR__2200
1a904                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
1a904     1F 22 0E F2 | 	cmp	local03, #31 wz
1a908     18 00 90 5D |  if_ne	jmp	#LR__2201
1a90c     0F 13 02 F6 | 	mov	arg01, local01
1a910     10 94 B0 FD | 	call	#__system____builtin_atof
1a914     FD 12 02 F6 | 	mov	arg01, result1
1a918     00 14 06 F6 | 	mov	arg02, #0
1a91c     C0 90 B0 FD | 	call	#__system___float_tointeger
1a920     FD 1E 02 F6 | 	mov	local01, result1
1a924                 | LR__2201
1a924     37 00 00 FF 
1a928     40 E4 05 F1 | 	add	objptr, ##28224
1a92c     F2 1E 62 FC | 	wrlong	local01, objptr
1a930     37 00 00 FF 
1a934     40 E4 85 F1 | 	sub	objptr, ##28224
1a938     02 1E 66 F0 | 	shl	local01, #2
1a93c     0F 13 02 F6 | 	mov	arg01, local01
1a940     F4 45 B0 FD | 	call	#_hg010b_spin2_setfontfamily
1a944     A7 F0 03 F6 | 	mov	ptra, fp
1a948     B2 00 A0 FD | 	call	#popregs_
1a94c                 | _do_font_ret
1a94c     2D 00 64 FD | 	ret
1a950                 | 
1a950                 | ' 
1a950                 | ' sub do_mode
1a950                 | _do_mode
1a950     05 4A 05 F6 | 	mov	COUNT_, #5
1a954     A8 00 A0 FD | 	call	#pushregs_
1a958     50 09 BF FD | 	call	#_pop
1a95c     FD 1E 02 F6 | 	mov	local01, result1
1a960     FE 20 02 F6 | 	mov	local02, result2
1a964     FF 22 02 F6 | 	mov	local03, result3
1a968                 | ' t1=pop() 
1a968                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
1a968     1E 22 0E F2 | 	cmp	local03, #30 wz
1a96c     10 00 90 5D |  if_ne	jmp	#LR__2210
1a970     0F 13 02 F6 | 	mov	arg01, local01
1a974     00 14 06 F6 | 	mov	arg02, #0
1a978     64 90 B0 FD | 	call	#__system___float_tointeger
1a97c     FD 1E 02 F6 | 	mov	local01, result1
1a980                 | LR__2210
1a980                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
1a980     1F 22 0E F2 | 	cmp	local03, #31 wz
1a984     18 00 90 5D |  if_ne	jmp	#LR__2211
1a988     0F 13 02 F6 | 	mov	arg01, local01
1a98c     94 93 B0 FD | 	call	#__system____builtin_atof
1a990     FD 12 02 F6 | 	mov	arg01, result1
1a994     00 14 06 F6 | 	mov	arg02, #0
1a998     44 90 B0 FD | 	call	#__system___float_tointeger
1a99c     FD 1E 02 F6 | 	mov	local01, result1
1a9a0                 | LR__2211
1a9a0                 | ' select case t1.result.iresult
1a9a0     0F 25 02 F6 | 	mov	local04, local01
1a9a4     05 24 26 F3 | 	fle	local04, #5
1a9a8     30 24 62 FD | 	jmprel	local04
1a9ac                 | LR__2212
1a9ac     14 00 90 FD | 	jmp	#LR__2213
1a9b0     A8 00 90 FD | 	jmp	#LR__2214
1a9b4     10 01 90 FD | 	jmp	#LR__2215
1a9b8     78 01 90 FD | 	jmp	#LR__2216
1a9bc     E0 01 90 FD | 	jmp	#LR__2217
1a9c0     70 02 90 FD | 	jmp	#LR__2218
1a9c4                 | LR__2213
1a9c4     37 00 00 FF 
1a9c8     40 E4 05 F1 | 	add	objptr, ##28224
1a9cc     F2 02 68 FC | 	wrlong	#1, objptr
1a9d0     04 E4 85 F1 | 	sub	objptr, #4
1a9d4     F2 34 69 FC | 	wrlong	#154, objptr
1a9d8     19 00 00 FF 
1a9dc     D8 E4 05 F1 | 	add	objptr, ##13016
1a9e0     F2 02 68 FC | 	wrlong	#1, objptr
1a9e4     19 00 00 FF 
1a9e8     DC E4 85 F1 | 	sub	objptr, ##13020
1a9ec     F2 26 69 FC | 	wrlong	#147, objptr
1a9f0     37 00 00 FF 
1a9f4     38 E4 85 F1 | 	sub	objptr, ##28216
1a9f8     04 12 06 F6 | 	mov	arg01, #4
1a9fc     38 45 B0 FD | 	call	#_hg010b_spin2_setfontfamily
1aa00     37 00 00 FF 
1aa04     3C E4 05 F1 | 	add	objptr, ##28220
1aa08     F2 12 02 FB | 	rdlong	arg01, objptr
1aa0c     04 E4 85 F1 | 	sub	objptr, #4
1aa10     F2 14 02 FB | 	rdlong	arg02, objptr
1aa14                 | ' 
1aa14                 | ' write_color:=ff
1aa14     36 00 00 FF 
1aa18     F7 E5 85 F1 | 	sub	objptr, ##28151
1aa1c     F2 12 62 FC | 	wrlong	arg01, objptr
1aa20                 | ' write_background:=bb
1aa20     04 E4 05 F1 | 	add	objptr, #4
1aa24     F2 14 62 FC | 	wrlong	arg02, objptr
1aa28     01 00 00 FF 
1aa2c     00 EA 05 F1 | 	add	ptr__dat__, ##512
1aa30     51 00 00 FF 
1aa34     73 E5 05 F1 | 	add	objptr, ##41843
1aa38     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
1aa3c     04 E4 85 F1 | 	sub	objptr, #4
1aa40     03 00 80 FF 
1aa44     F2 30 69 FC | 	wrlong	##1688, objptr
1aa48     51 00 00 FF 
1aa4c     B4 E5 85 F1 | 	sub	objptr, ##41908
1aa50     01 00 00 FF 
1aa54     00 EA 85 F1 | 	sub	ptr__dat__, ##512
1aa58     D8 01 90 FD | 	jmp	#LR__2218
1aa5c                 | LR__2214
1aa5c     37 00 00 FF 
1aa60     40 E4 05 F1 | 	add	objptr, ##28224
1aa64     F2 00 68 FC | 	wrlong	#0, objptr
1aa68     04 E4 85 F1 | 	sub	objptr, #4
1aa6c     F2 2E 68 FC | 	wrlong	#23, objptr
1aa70     19 00 00 FF 
1aa74     D8 E4 05 F1 | 	add	objptr, ##13016
1aa78     F2 00 68 FC | 	wrlong	#0, objptr
1aa7c     19 00 00 FF 
1aa80     DC E4 85 F1 | 	sub	objptr, ##13020
1aa84     F2 00 68 FC | 	wrlong	#0, objptr
1aa88     37 00 00 FF 
1aa8c     38 E4 85 F1 | 	sub	objptr, ##28216
1aa90     00 12 06 F6 | 	mov	arg01, #0
1aa94     A0 44 B0 FD | 	call	#_hg010b_spin2_setfontfamily
1aa98     37 00 00 FF 
1aa9c     3C E4 05 F1 | 	add	objptr, ##28220
1aaa0     F2 12 02 FB | 	rdlong	arg01, objptr
1aaa4     04 E4 85 F1 | 	sub	objptr, #4
1aaa8     F2 14 02 FB | 	rdlong	arg02, objptr
1aaac                 | ' 
1aaac                 | ' write_color:=ff
1aaac     36 00 00 FF 
1aab0     F7 E5 85 F1 | 	sub	objptr, ##28151
1aab4     F2 12 62 FC | 	wrlong	arg01, objptr
1aab8                 | ' write_background:=bb
1aab8     04 E4 05 F1 | 	add	objptr, #4
1aabc     F2 14 62 FC | 	wrlong	arg02, objptr
1aac0     45 E4 85 F1 | 	sub	objptr, #69
1aac4     6C 01 90 FD | 	jmp	#LR__2218
1aac8                 | LR__2215
1aac8     37 00 00 FF 
1aacc     40 E4 05 F1 | 	add	objptr, ##28224
1aad0     F2 00 68 FC | 	wrlong	#0, objptr
1aad4     04 E4 85 F1 | 	sub	objptr, #4
1aad8     F2 6A 69 FC | 	wrlong	#181, objptr
1aadc     19 00 00 FF 
1aae0     D8 E4 05 F1 | 	add	objptr, ##13016
1aae4     F2 00 68 FC | 	wrlong	#0, objptr
1aae8     19 00 00 FF 
1aaec     DC E4 85 F1 | 	sub	objptr, ##13020
1aaf0     F2 00 68 FC | 	wrlong	#0, objptr
1aaf4     37 00 00 FF 
1aaf8     38 E4 85 F1 | 	sub	objptr, ##28216
1aafc     00 12 06 F6 | 	mov	arg01, #0
1ab00     34 44 B0 FD | 	call	#_hg010b_spin2_setfontfamily
1ab04     37 00 00 FF 
1ab08     3C E4 05 F1 | 	add	objptr, ##28220
1ab0c     F2 12 02 FB | 	rdlong	arg01, objptr
1ab10     04 E4 85 F1 | 	sub	objptr, #4
1ab14     F2 14 02 FB | 	rdlong	arg02, objptr
1ab18                 | ' 
1ab18                 | ' write_color:=ff
1ab18     36 00 00 FF 
1ab1c     F7 E5 85 F1 | 	sub	objptr, ##28151
1ab20     F2 12 62 FC | 	wrlong	arg01, objptr
1ab24                 | ' write_background:=bb
1ab24     04 E4 05 F1 | 	add	objptr, #4
1ab28     F2 14 62 FC | 	wrlong	arg02, objptr
1ab2c     45 E4 85 F1 | 	sub	objptr, #69
1ab30     00 01 90 FD | 	jmp	#LR__2218
1ab34                 | LR__2216
1ab34     37 00 00 FF 
1ab38     40 E4 05 F1 | 	add	objptr, ##28224
1ab3c     F2 00 68 FC | 	wrlong	#0, objptr
1ab40     04 E4 85 F1 | 	sub	objptr, #4
1ab44     F2 1E 68 FC | 	wrlong	#15, objptr
1ab48     19 00 00 FF 
1ab4c     D8 E4 05 F1 | 	add	objptr, ##13016
1ab50     F2 00 68 FC | 	wrlong	#0, objptr
1ab54     19 00 00 FF 
1ab58     DC E4 85 F1 | 	sub	objptr, ##13020
1ab5c     F2 00 68 FC | 	wrlong	#0, objptr
1ab60     37 00 00 FF 
1ab64     38 E4 85 F1 | 	sub	objptr, ##28216
1ab68     00 12 06 F6 | 	mov	arg01, #0
1ab6c     C8 43 B0 FD | 	call	#_hg010b_spin2_setfontfamily
1ab70     37 00 00 FF 
1ab74     3C E4 05 F1 | 	add	objptr, ##28220
1ab78     F2 12 02 FB | 	rdlong	arg01, objptr
1ab7c     04 E4 85 F1 | 	sub	objptr, #4
1ab80     F2 14 02 FB | 	rdlong	arg02, objptr
1ab84                 | ' 
1ab84                 | ' write_color:=ff
1ab84     36 00 00 FF 
1ab88     F7 E5 85 F1 | 	sub	objptr, ##28151
1ab8c     F2 12 62 FC | 	wrlong	arg01, objptr
1ab90                 | ' write_background:=bb
1ab90     04 E4 05 F1 | 	add	objptr, #4
1ab94     F2 14 62 FC | 	wrlong	arg02, objptr
1ab98     45 E4 85 F1 | 	sub	objptr, #69
1ab9c     94 00 90 FD | 	jmp	#LR__2218
1aba0                 | LR__2217
1aba0     37 00 00 FF 
1aba4     40 E4 05 F1 | 	add	objptr, ##28224
1aba8     F2 02 68 FC | 	wrlong	#1, objptr
1abac     04 E4 85 F1 | 	sub	objptr, #4
1abb0     F2 02 68 FC | 	wrlong	#1, objptr
1abb4     19 00 00 FF 
1abb8     D8 E4 05 F1 | 	add	objptr, ##13016
1abbc     F2 02 68 FC | 	wrlong	#1, objptr
1abc0     19 00 00 FF 
1abc4     DC E4 85 F1 | 	sub	objptr, ##13020
1abc8     F2 1C 68 FC | 	wrlong	#14, objptr
1abcc     37 00 00 FF 
1abd0     38 E4 85 F1 | 	sub	objptr, ##28216
1abd4     04 12 06 F6 | 	mov	arg01, #4
1abd8     5C 43 B0 FD | 	call	#_hg010b_spin2_setfontfamily
1abdc     37 00 00 FF 
1abe0     3C E4 05 F1 | 	add	objptr, ##28220
1abe4     F2 12 02 FB | 	rdlong	arg01, objptr
1abe8     04 E4 85 F1 | 	sub	objptr, #4
1abec     F2 14 02 FB | 	rdlong	arg02, objptr
1abf0                 | ' 
1abf0                 | ' write_color:=ff
1abf0     36 00 00 FF 
1abf4     F7 E5 85 F1 | 	sub	objptr, ##28151
1abf8     F2 12 62 FC | 	wrlong	arg01, objptr
1abfc                 | ' write_background:=bb
1abfc     04 E4 05 F1 | 	add	objptr, #4
1ac00     F2 14 62 FC | 	wrlong	arg02, objptr
1ac04     07 00 00 FF 
1ac08     8A EB 05 F1 | 	add	ptr__dat__, ##3978
1ac0c     51 00 00 FF 
1ac10     73 E5 05 F1 | 	add	objptr, ##41843
1ac14     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
1ac18     04 E4 85 F1 | 	sub	objptr, #4
1ac1c     03 00 80 FF 
1ac20     F2 30 69 FC | 	wrlong	##1688, objptr
1ac24     51 00 00 FF 
1ac28     B4 E5 85 F1 | 	sub	objptr, ##41908
1ac2c     07 00 00 FF 
1ac30     8A EB 85 F1 | 	sub	ptr__dat__, ##3978
1ac34                 | LR__2218
1ac34     51 00 00 FF 
1ac38     B0 E5 05 F1 | 	add	objptr, ##41904
1ac3c     F2 1E 62 FC | 	wrlong	local01, objptr
1ac40     04 E4 85 F1 | 	sub	objptr, #4
1ac44     F2 12 02 FB | 	rdlong	arg01, objptr
1ac48     0E 00 00 FF 
1ac4c     50 E5 85 F1 | 	sub	objptr, ##7504
1ac50     F2 26 02 FB | 	rdlong	local05, objptr
1ac54     43 00 00 FF 
1ac58     5C E4 85 F1 | 	sub	objptr, ##34396
1ac5c     13 13 82 F1 | 	sub	arg01, local05
1ac60     00 14 06 F6 | 	mov	arg02, #0
1ac64     0A 16 06 F6 | 	mov	arg03, #10
1ac68     C8 7F B0 FD | 	call	#__system__Number_S
1ac6c     FD 12 02 F6 | 	mov	arg01, result1
1ac70     85 01 00 FF 
1ac74     11 15 06 F6 | 	mov	arg02, ##@LR__5531
1ac78     44 5D B0 FD | 	call	#__system___string_concat
1ac7c     50 00 00 FF 
1ac80     10 E5 05 F1 | 	add	objptr, ##41232
1ac84     F2 FA 61 FC | 	wrlong	result1, objptr
1ac88     19 00 00 FF 
1ac8c     D4 E4 85 F1 | 	sub	objptr, ##13012
1ac90     F2 12 02 FB | 	rdlong	arg01, objptr
1ac94     04 E4 85 F1 | 	sub	objptr, #4
1ac98     F2 14 02 FB | 	rdlong	arg02, objptr
1ac9c     37 00 00 FF 
1aca0     38 E4 85 F1 | 	sub	objptr, ##28216
1aca4     E0 43 B0 FD | 	call	#_hg010b_spin2_cls
1aca8     85 01 00 FF 
1acac     23 13 06 F6 | 	mov	arg01, ##@LR__5532
1acb0                 | ' 
1acb0                 | ' write(text)
1acb0     94 47 B0 FD | 	call	#_hg010b_spin2_write
1acb4                 | ' crlf
1acb4     90 4C B0 FD | 	call	#_hg010b_spin2_crlf
1acb8     18 00 00 FF 
1acbc     4C EB 05 F1 | 	add	ptr__dat__, ##12620
1acc0     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
1acc4     18 00 00 FF 
1acc8     4C EB 85 F1 | 	sub	ptr__dat__, ##12620
1accc                 | ' 
1accc                 | ' write(text)
1accc     78 47 B0 FD | 	call	#_hg010b_spin2_write
1acd0                 | ' crlf
1acd0     74 4C B0 FD | 	call	#_hg010b_spin2_crlf
1acd4     50 00 00 FF 
1acd8     10 E5 05 F1 | 	add	objptr, ##41232
1acdc     F2 12 02 FB | 	rdlong	arg01, objptr
1ace0     50 00 00 FF 
1ace4     10 E5 85 F1 | 	sub	objptr, ##41232
1ace8                 | ' 
1ace8                 | ' write(text)
1ace8     5C 47 B0 FD | 	call	#_hg010b_spin2_write
1acec                 | ' crlf
1acec     58 4C B0 FD | 	call	#_hg010b_spin2_crlf
1acf0     A7 F0 03 F6 | 	mov	ptra, fp
1acf4     B2 00 A0 FD | 	call	#popregs_
1acf8                 | _do_mode_ret
1acf8     2D 00 64 FD | 	ret
1acfc                 | 
1acfc                 | ' 
1acfc                 | ' 
1acfc                 | ' sub do_position
1acfc                 | _do_position
1acfc     01 4A 05 F6 | 	mov	COUNT_, #1
1ad00     A8 00 A0 FD | 	call	#pushregs_
1ad04     18 F0 07 F1 | 	add	ptra, #24
1ad08     A0 05 BF FD | 	call	#_pop
1ad0c     FD 14 02 F6 | 	mov	arg02, result1
1ad10     FE 12 02 F6 | 	mov	arg01, result2
1ad14     FF 1E 02 F6 | 	mov	local01, result3
1ad18     A7 14 62 FC | 	wrlong	arg02, fp
1ad1c     04 4E 05 F1 | 	add	fp, #4
1ad20     A7 12 62 FC | 	wrlong	arg01, fp
1ad24     04 4E 05 F1 | 	add	fp, #4
1ad28     A7 1E 62 FC | 	wrlong	local01, fp
1ad2c     08 4E 85 F1 | 	sub	fp, #8
1ad30     78 05 BF FD | 	call	#_pop
1ad34     FF 1E 02 F6 | 	mov	local01, result3
1ad38     0C 4E 05 F1 | 	add	fp, #12
1ad3c     A7 FA 61 FC | 	wrlong	result1, fp
1ad40     04 4E 05 F1 | 	add	fp, #4
1ad44     A7 FC 61 FC | 	wrlong	result2, fp
1ad48     04 4E 05 F1 | 	add	fp, #4
1ad4c     A7 1E 62 FC | 	wrlong	local01, fp
1ad50     08 4E 85 F1 | 	sub	fp, #8
1ad54     A7 12 02 F6 | 	mov	arg01, fp
1ad58     0C 4E 85 F1 | 	sub	fp, #12
1ad5c     30 07 BF FD | 	call	#_converttoint
1ad60     FD 1E 02 F6 | 	mov	local01, result1
1ad64     A7 12 02 F6 | 	mov	arg01, fp
1ad68     24 07 BF FD | 	call	#_converttoint
1ad6c     FD 14 02 F6 | 	mov	arg02, result1
1ad70     0F 13 02 F6 | 	mov	arg01, local01
1ad74     00 42 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1ad78     A7 F0 03 F6 | 	mov	ptra, fp
1ad7c     B2 00 A0 FD | 	call	#popregs_
1ad80                 | _do_position_ret
1ad80     2D 00 64 FD | 	ret
1ad84                 | 
1ad84                 | ' 
1ad84                 | ' sub do_poke
1ad84                 | _do_poke
1ad84     01 4A 05 F6 | 	mov	COUNT_, #1
1ad88     A8 00 A0 FD | 	call	#pushregs_
1ad8c     20 F0 07 F1 | 	add	ptra, #32
1ad90     18 05 BF FD | 	call	#_pop
1ad94     FD 14 02 F6 | 	mov	arg02, result1
1ad98     FE 12 02 F6 | 	mov	arg01, result2
1ad9c     FF 1E 02 F6 | 	mov	local01, result3
1ada0     A7 14 62 FC | 	wrlong	arg02, fp
1ada4     04 4E 05 F1 | 	add	fp, #4
1ada8     A7 12 62 FC | 	wrlong	arg01, fp
1adac     04 4E 05 F1 | 	add	fp, #4
1adb0     A7 1E 62 FC | 	wrlong	local01, fp
1adb4     08 4E 85 F1 | 	sub	fp, #8
1adb8     F0 04 BF FD | 	call	#_pop
1adbc     FF 1E 02 F6 | 	mov	local01, result3
1adc0     0C 4E 05 F1 | 	add	fp, #12
1adc4     A7 FA 61 FC | 	wrlong	result1, fp
1adc8     04 4E 05 F1 | 	add	fp, #4
1adcc     A7 FC 61 FC | 	wrlong	result2, fp
1add0     04 4E 05 F1 | 	add	fp, #4
1add4     A7 1E 62 FC | 	wrlong	local01, fp
1add8     08 4E 85 F1 | 	sub	fp, #8
1addc     A7 12 02 F6 | 	mov	arg01, fp
1ade0     0C 4E 85 F1 | 	sub	fp, #12
1ade4     A8 06 BF FD | 	call	#_converttoint
1ade8     18 4E 05 F1 | 	add	fp, #24
1adec     A7 FA 61 FC | 	wrlong	result1, fp
1adf0     18 4E 85 F1 | 	sub	fp, #24
1adf4     A7 12 02 F6 | 	mov	arg01, fp
1adf8     94 06 BF FD | 	call	#_converttoint
1adfc     1C 4E 05 F1 | 	add	fp, #28
1ae00     A7 FA 61 FC | 	wrlong	result1, fp
1ae04                 | ' t1=pop() 'value
1ae04                 | ' t2=pop() 
1ae04                 | ' a=converttoint(t2) : v=converttoint(t1)
1ae04                 | ' if a<$80000 then poke a,v else pspoke a,v
1ae04     04 4E 85 F1 | 	sub	fp, #4
1ae08     A7 1E 02 FB | 	rdlong	local01, fp
1ae0c     18 4E 85 F1 | 	sub	fp, #24
1ae10     00 04 00 FF 
1ae14     00 1E 16 F2 | 	cmp	local01, ##524288 wc
1ae18     1C 00 90 3D |  if_ae	jmp	#LR__2220
1ae1c     18 4E 05 F1 | 	add	fp, #24
1ae20     A7 12 02 FB | 	rdlong	arg01, fp
1ae24     04 4E 05 F1 | 	add	fp, #4
1ae28     A7 14 02 FB | 	rdlong	arg02, fp
1ae2c     1C 4E 85 F1 | 	sub	fp, #28
1ae30     09 15 42 FC | 	wrbyte	arg02, arg01
1ae34     18 00 90 FD | 	jmp	#LR__2221
1ae38                 | LR__2220
1ae38     18 4E 05 F1 | 	add	fp, #24
1ae3c     A7 12 02 FB | 	rdlong	arg01, fp
1ae40     04 4E 05 F1 | 	add	fp, #4
1ae44     A7 14 02 FB | 	rdlong	arg02, fp
1ae48     1C 4E 85 F1 | 	sub	fp, #28
1ae4c     78 27 B0 FD | 	call	#_pspoke
1ae50                 | LR__2221
1ae50     A7 F0 03 F6 | 	mov	ptra, fp
1ae54     B2 00 A0 FD | 	call	#popregs_
1ae58                 | _do_poke_ret
1ae58     2D 00 64 FD | 	ret
1ae5c                 | 
1ae5c                 | ' 
1ae5c                 | ' sub do_dpoke
1ae5c                 | _do_dpoke
1ae5c     01 4A 05 F6 | 	mov	COUNT_, #1
1ae60     A8 00 A0 FD | 	call	#pushregs_
1ae64     20 F0 07 F1 | 	add	ptra, #32
1ae68     40 04 BF FD | 	call	#_pop
1ae6c     FD 14 02 F6 | 	mov	arg02, result1
1ae70     FE 12 02 F6 | 	mov	arg01, result2
1ae74     FF 1E 02 F6 | 	mov	local01, result3
1ae78     A7 14 62 FC | 	wrlong	arg02, fp
1ae7c     04 4E 05 F1 | 	add	fp, #4
1ae80     A7 12 62 FC | 	wrlong	arg01, fp
1ae84     04 4E 05 F1 | 	add	fp, #4
1ae88     A7 1E 62 FC | 	wrlong	local01, fp
1ae8c     08 4E 85 F1 | 	sub	fp, #8
1ae90     18 04 BF FD | 	call	#_pop
1ae94     FF 1E 02 F6 | 	mov	local01, result3
1ae98     0C 4E 05 F1 | 	add	fp, #12
1ae9c     A7 FA 61 FC | 	wrlong	result1, fp
1aea0     04 4E 05 F1 | 	add	fp, #4
1aea4     A7 FC 61 FC | 	wrlong	result2, fp
1aea8     04 4E 05 F1 | 	add	fp, #4
1aeac     A7 1E 62 FC | 	wrlong	local01, fp
1aeb0     08 4E 85 F1 | 	sub	fp, #8
1aeb4     A7 12 02 F6 | 	mov	arg01, fp
1aeb8     0C 4E 85 F1 | 	sub	fp, #12
1aebc     D0 05 BF FD | 	call	#_converttoint
1aec0     18 4E 05 F1 | 	add	fp, #24
1aec4     A7 FA 61 FC | 	wrlong	result1, fp
1aec8     18 4E 85 F1 | 	sub	fp, #24
1aecc     A7 12 02 F6 | 	mov	arg01, fp
1aed0     BC 05 BF FD | 	call	#_converttoint
1aed4     1C 4E 05 F1 | 	add	fp, #28
1aed8     A7 FA 61 FC | 	wrlong	result1, fp
1aedc                 | ' t1=pop() 'value
1aedc                 | ' t2=pop() 
1aedc                 | ' a=converttoint(t2) : v=converttoint(t1)
1aedc                 | ' if a<$80000 then dpoke a,v else psdpoke a,v
1aedc     04 4E 85 F1 | 	sub	fp, #4
1aee0     A7 1E 02 FB | 	rdlong	local01, fp
1aee4     18 4E 85 F1 | 	sub	fp, #24
1aee8     00 04 00 FF 
1aeec     00 1E 16 F2 | 	cmp	local01, ##524288 wc
1aef0     1C 00 90 3D |  if_ae	jmp	#LR__2230
1aef4     18 4E 05 F1 | 	add	fp, #24
1aef8     A7 12 02 FB | 	rdlong	arg01, fp
1aefc     04 4E 05 F1 | 	add	fp, #4
1af00     A7 14 02 FB | 	rdlong	arg02, fp
1af04     1C 4E 85 F1 | 	sub	fp, #28
1af08     09 15 52 FC | 	wrword	arg02, arg01
1af0c     18 00 90 FD | 	jmp	#LR__2231
1af10                 | LR__2230
1af10     18 4E 05 F1 | 	add	fp, #24
1af14     A7 12 02 FB | 	rdlong	arg01, fp
1af18     04 4E 05 F1 | 	add	fp, #4
1af1c     A7 14 02 FB | 	rdlong	arg02, fp
1af20     1C 4E 85 F1 | 	sub	fp, #28
1af24     58 26 B0 FD | 	call	#_psdpoke
1af28                 | LR__2231
1af28     A7 F0 03 F6 | 	mov	ptra, fp
1af2c     B2 00 A0 FD | 	call	#popregs_
1af30                 | _do_dpoke_ret
1af30     2D 00 64 FD | 	ret
1af34                 | 
1af34                 | ' 
1af34                 | ' sub do_lpoke
1af34                 | _do_lpoke
1af34     01 4A 05 F6 | 	mov	COUNT_, #1
1af38     A8 00 A0 FD | 	call	#pushregs_
1af3c     20 F0 07 F1 | 	add	ptra, #32
1af40     68 03 BF FD | 	call	#_pop
1af44     FD 14 02 F6 | 	mov	arg02, result1
1af48     FE 12 02 F6 | 	mov	arg01, result2
1af4c     FF 1E 02 F6 | 	mov	local01, result3
1af50     A7 14 62 FC | 	wrlong	arg02, fp
1af54     04 4E 05 F1 | 	add	fp, #4
1af58     A7 12 62 FC | 	wrlong	arg01, fp
1af5c     04 4E 05 F1 | 	add	fp, #4
1af60     A7 1E 62 FC | 	wrlong	local01, fp
1af64     08 4E 85 F1 | 	sub	fp, #8
1af68     40 03 BF FD | 	call	#_pop
1af6c     FF 1E 02 F6 | 	mov	local01, result3
1af70     0C 4E 05 F1 | 	add	fp, #12
1af74     A7 FA 61 FC | 	wrlong	result1, fp
1af78     04 4E 05 F1 | 	add	fp, #4
1af7c     A7 FC 61 FC | 	wrlong	result2, fp
1af80     04 4E 05 F1 | 	add	fp, #4
1af84     A7 1E 62 FC | 	wrlong	local01, fp
1af88     08 4E 85 F1 | 	sub	fp, #8
1af8c     A7 12 02 F6 | 	mov	arg01, fp
1af90     0C 4E 85 F1 | 	sub	fp, #12
1af94     F8 04 BF FD | 	call	#_converttoint
1af98     18 4E 05 F1 | 	add	fp, #24
1af9c     A7 FA 61 FC | 	wrlong	result1, fp
1afa0     18 4E 85 F1 | 	sub	fp, #24
1afa4     A7 12 02 F6 | 	mov	arg01, fp
1afa8     E4 04 BF FD | 	call	#_converttoint
1afac     1C 4E 05 F1 | 	add	fp, #28
1afb0     A7 FA 61 FC | 	wrlong	result1, fp
1afb4                 | ' t1=pop() 'value
1afb4                 | ' t2=pop() 
1afb4                 | ' a=converttoint(t2) : v=converttoint(t1)
1afb4                 | ' if a<$80000 then lpoke a,v else pslpoke a,v
1afb4     04 4E 85 F1 | 	sub	fp, #4
1afb8     A7 1E 02 FB | 	rdlong	local01, fp
1afbc     18 4E 85 F1 | 	sub	fp, #24
1afc0     00 04 00 FF 
1afc4     00 1E 16 F2 | 	cmp	local01, ##524288 wc
1afc8     1C 00 90 3D |  if_ae	jmp	#LR__2240
1afcc     18 4E 05 F1 | 	add	fp, #24
1afd0     A7 12 02 FB | 	rdlong	arg01, fp
1afd4     04 4E 05 F1 | 	add	fp, #4
1afd8     A7 14 02 FB | 	rdlong	arg02, fp
1afdc     1C 4E 85 F1 | 	sub	fp, #28
1afe0     09 15 62 FC | 	wrlong	arg02, arg01
1afe4     18 00 90 FD | 	jmp	#LR__2241
1afe8                 | LR__2240
1afe8     18 4E 05 F1 | 	add	fp, #24
1afec     A7 12 02 FB | 	rdlong	arg01, fp
1aff0     04 4E 05 F1 | 	add	fp, #4
1aff4     A7 14 02 FB | 	rdlong	arg02, fp
1aff8     1C 4E 85 F1 | 	sub	fp, #28
1affc     38 25 B0 FD | 	call	#_pslpoke
1b000                 | LR__2241
1b000     A7 F0 03 F6 | 	mov	ptra, fp
1b004     B2 00 A0 FD | 	call	#popregs_
1b008                 | _do_lpoke_ret
1b008     2D 00 64 FD | 	ret
1b00c                 | 
1b00c                 | ' 
1b00c                 | ' sub do_peek
1b00c                 | _do_peek
1b00c     00 4A 05 F6 | 	mov	COUNT_, #0
1b010     A8 00 A0 FD | 	call	#pushregs_
1b014     14 F0 07 F1 | 	add	ptra, #20
1b018     90 02 BF FD | 	call	#_pop
1b01c     A7 FA 61 FC | 	wrlong	result1, fp
1b020     04 4E 05 F1 | 	add	fp, #4
1b024     A7 FC 61 FC | 	wrlong	result2, fp
1b028     04 4E 05 F1 | 	add	fp, #4
1b02c     A7 FE 61 FC | 	wrlong	result3, fp
1b030     08 4E 85 F1 | 	sub	fp, #8
1b034     A7 12 02 F6 | 	mov	arg01, fp
1b038     54 04 BF FD | 	call	#_converttoint
1b03c     0C 4E 05 F1 | 	add	fp, #12
1b040     A7 FA 61 FC | 	wrlong	result1, fp
1b044                 | ' t1=pop()
1b044                 | ' a=converttoint(t1)
1b044                 | ' if a<$80000 then r=peek(a) else r=pspeek(a)
1b044     0C 4E 85 F1 | 	sub	fp, #12
1b048     00 04 00 FF 
1b04c     00 FA 15 F2 | 	cmp	result1, ##524288 wc
1b050     1C 00 90 3D |  if_ae	jmp	#LR__2250
1b054     0C 4E 05 F1 | 	add	fp, #12
1b058     A7 12 02 FB | 	rdlong	arg01, fp
1b05c     09 FB C1 FA | 	rdbyte	result1, arg01
1b060     04 4E 05 F1 | 	add	fp, #4
1b064     A7 FA 61 FC | 	wrlong	result1, fp
1b068     10 4E 85 F1 | 	sub	fp, #16
1b06c     20 00 90 FD | 	jmp	#LR__2251
1b070                 | LR__2250
1b070     0C 4E 05 F1 | 	add	fp, #12
1b074     A7 12 02 FB | 	rdlong	arg01, fp
1b078     0C 4E 85 F1 | 	sub	fp, #12
1b07c     90 25 B0 FD | 	call	#_pspeek
1b080     FD FA E1 F8 | 	getbyte	result1, result1, #0
1b084     10 4E 05 F1 | 	add	fp, #16
1b088     A7 FA 61 FC | 	wrlong	result1, fp
1b08c     10 4E 85 F1 | 	sub	fp, #16
1b090                 | LR__2251
1b090     08 4E 05 F1 | 	add	fp, #8
1b094     A7 3A 68 FC | 	wrlong	#29, fp
1b098     08 4E 05 F1 | 	add	fp, #8
1b09c     A7 12 02 FB | 	rdlong	arg01, fp
1b0a0     10 4E 85 F1 | 	sub	fp, #16
1b0a4     A7 12 62 FC | 	wrlong	arg01, fp
1b0a8     A7 12 02 F6 | 	mov	arg01, fp
1b0ac     94 02 BF FD | 	call	#_push
1b0b0     A7 F0 03 F6 | 	mov	ptra, fp
1b0b4     B2 00 A0 FD | 	call	#popregs_
1b0b8                 | _do_peek_ret
1b0b8     2D 00 64 FD | 	ret
1b0bc                 | 
1b0bc                 | ' 
1b0bc                 | ' sub do_dpeek
1b0bc                 | _do_dpeek
1b0bc     00 4A 05 F6 | 	mov	COUNT_, #0
1b0c0     A8 00 A0 FD | 	call	#pushregs_
1b0c4     14 F0 07 F1 | 	add	ptra, #20
1b0c8     E0 01 BF FD | 	call	#_pop
1b0cc     A7 FA 61 FC | 	wrlong	result1, fp
1b0d0     04 4E 05 F1 | 	add	fp, #4
1b0d4     A7 FC 61 FC | 	wrlong	result2, fp
1b0d8     04 4E 05 F1 | 	add	fp, #4
1b0dc     A7 FE 61 FC | 	wrlong	result3, fp
1b0e0     08 4E 85 F1 | 	sub	fp, #8
1b0e4     A7 12 02 F6 | 	mov	arg01, fp
1b0e8     A4 03 BF FD | 	call	#_converttoint
1b0ec     0C 4E 05 F1 | 	add	fp, #12
1b0f0     A7 FA 61 FC | 	wrlong	result1, fp
1b0f4                 | ' t1=pop()
1b0f4                 | ' a=converttoint(t1)
1b0f4                 | ' if a<$80000 then r=dpeek(a) else r=psdpeek(a)
1b0f4     0C 4E 85 F1 | 	sub	fp, #12
1b0f8     00 04 00 FF 
1b0fc     00 FA 15 F2 | 	cmp	result1, ##524288 wc
1b100     1C 00 90 3D |  if_ae	jmp	#LR__2260
1b104     0C 4E 05 F1 | 	add	fp, #12
1b108     A7 12 02 FB | 	rdlong	arg01, fp
1b10c     09 FB E1 FA | 	rdword	result1, arg01
1b110     04 4E 05 F1 | 	add	fp, #4
1b114     A7 FA 61 FC | 	wrlong	result1, fp
1b118     10 4E 85 F1 | 	sub	fp, #16
1b11c     1C 00 90 FD | 	jmp	#LR__2261
1b120                 | LR__2260
1b120     0C 4E 05 F1 | 	add	fp, #12
1b124     A7 12 02 FB | 	rdlong	arg01, fp
1b128     0C 4E 85 F1 | 	sub	fp, #12
1b12c     90 25 B0 FD | 	call	#_psdpeek
1b130     10 4E 05 F1 | 	add	fp, #16
1b134     A7 FA 61 FC | 	wrlong	result1, fp
1b138     10 4E 85 F1 | 	sub	fp, #16
1b13c                 | LR__2261
1b13c     08 4E 05 F1 | 	add	fp, #8
1b140     A7 3A 68 FC | 	wrlong	#29, fp
1b144     08 4E 05 F1 | 	add	fp, #8
1b148     A7 12 02 FB | 	rdlong	arg01, fp
1b14c     10 4E 85 F1 | 	sub	fp, #16
1b150     A7 12 62 FC | 	wrlong	arg01, fp
1b154     A7 12 02 F6 | 	mov	arg01, fp
1b158     E8 01 BF FD | 	call	#_push
1b15c     A7 F0 03 F6 | 	mov	ptra, fp
1b160     B2 00 A0 FD | 	call	#popregs_
1b164                 | _do_dpeek_ret
1b164     2D 00 64 FD | 	ret
1b168                 | 
1b168                 | ' 
1b168                 | ' 
1b168                 | ' sub do_lpeek
1b168                 | _do_lpeek
1b168     00 4A 05 F6 | 	mov	COUNT_, #0
1b16c     A8 00 A0 FD | 	call	#pushregs_
1b170     14 F0 07 F1 | 	add	ptra, #20
1b174     34 01 BF FD | 	call	#_pop
1b178     A7 FA 61 FC | 	wrlong	result1, fp
1b17c     04 4E 05 F1 | 	add	fp, #4
1b180     A7 FC 61 FC | 	wrlong	result2, fp
1b184     04 4E 05 F1 | 	add	fp, #4
1b188     A7 FE 61 FC | 	wrlong	result3, fp
1b18c     08 4E 85 F1 | 	sub	fp, #8
1b190     A7 12 02 F6 | 	mov	arg01, fp
1b194     F8 02 BF FD | 	call	#_converttoint
1b198     0C 4E 05 F1 | 	add	fp, #12
1b19c     A7 FA 61 FC | 	wrlong	result1, fp
1b1a0                 | ' t1=pop()
1b1a0                 | ' a=converttoint(t1)
1b1a0                 | ' if a<$80000 then r=lpeek(a) else r=pslpeek(a)
1b1a0     0C 4E 85 F1 | 	sub	fp, #12
1b1a4     00 04 00 FF 
1b1a8     00 FA 15 F2 | 	cmp	result1, ##524288 wc
1b1ac     1C 00 90 3D |  if_ae	jmp	#LR__2270
1b1b0     0C 4E 05 F1 | 	add	fp, #12
1b1b4     A7 12 02 FB | 	rdlong	arg01, fp
1b1b8     09 FB 01 FB | 	rdlong	result1, arg01
1b1bc     04 4E 05 F1 | 	add	fp, #4
1b1c0     A7 FA 61 FC | 	wrlong	result1, fp
1b1c4     10 4E 85 F1 | 	sub	fp, #16
1b1c8     1C 00 90 FD | 	jmp	#LR__2271
1b1cc                 | LR__2270
1b1cc     0C 4E 05 F1 | 	add	fp, #12
1b1d0     A7 12 02 FB | 	rdlong	arg01, fp
1b1d4     0C 4E 85 F1 | 	sub	fp, #12
1b1d8     8C 24 B0 FD | 	call	#_pslpeek
1b1dc     10 4E 05 F1 | 	add	fp, #16
1b1e0     A7 FA 61 FC | 	wrlong	result1, fp
1b1e4     10 4E 85 F1 | 	sub	fp, #16
1b1e8                 | LR__2271
1b1e8     08 4E 05 F1 | 	add	fp, #8
1b1ec     A7 3A 68 FC | 	wrlong	#29, fp
1b1f0     08 4E 05 F1 | 	add	fp, #8
1b1f4     A7 12 02 FB | 	rdlong	arg01, fp
1b1f8     10 4E 85 F1 | 	sub	fp, #16
1b1fc     A7 12 62 FC | 	wrlong	arg01, fp
1b200     A7 12 02 F6 | 	mov	arg01, fp
1b204     3C 01 BF FD | 	call	#_push
1b208     A7 F0 03 F6 | 	mov	ptra, fp
1b20c     B2 00 A0 FD | 	call	#popregs_
1b210                 | _do_lpeek_ret
1b210     2D 00 64 FD | 	ret
1b214                 | 
1b214                 | ' 
1b214                 | ' sub do_fre
1b214                 | _do_fre
1b214     01 4A 05 F6 | 	mov	COUNT_, #1
1b218     A8 00 A0 FD | 	call	#pushregs_
1b21c     0C F0 07 F1 | 	add	ptra, #12
1b220     51 00 00 FF 
1b224     AC E5 05 F1 | 	add	objptr, ##41900
1b228     F2 12 02 FB | 	rdlong	arg01, objptr
1b22c     0E 00 00 FF 
1b230     50 E5 85 F1 | 	sub	objptr, ##7504
1b234     F2 1E 02 FB | 	rdlong	local01, objptr
1b238     0F 13 82 F1 | 	sub	arg01, local01
1b23c     0E 00 00 FF 
1b240     B8 E5 05 F1 | 	add	objptr, ##7608
1b244     F2 12 62 FC | 	wrlong	arg01, objptr
1b248     08 4E 05 F1 | 	add	fp, #8
1b24c     A7 3A 68 FC | 	wrlong	#29, fp
1b250     08 4E 85 F1 | 	sub	fp, #8
1b254     F2 1E 02 FB | 	rdlong	local01, objptr
1b258     52 00 00 FF 
1b25c     14 E4 85 F1 | 	sub	objptr, ##42004
1b260     A7 1E 62 FC | 	wrlong	local01, fp
1b264     A7 12 02 F6 | 	mov	arg01, fp
1b268     D8 00 BF FD | 	call	#_push
1b26c     A7 F0 03 F6 | 	mov	ptra, fp
1b270     B2 00 A0 FD | 	call	#popregs_
1b274                 | _do_fre_ret
1b274     2D 00 64 FD | 	ret
1b278                 | 
1b278                 | ' 
1b278                 | ' 
1b278                 | ' 
1b278                 | ' 
1b278                 | ' 
1b278                 | ' 
1b278                 | ' sub do_waitms
1b278                 | _do_waitms
1b278     01 4A 05 F6 | 	mov	COUNT_, #1
1b27c     A8 00 A0 FD | 	call	#pushregs_
1b280     18 F0 07 F1 | 	add	ptra, #24
1b284     24 00 BF FD | 	call	#_pop
1b288     A7 FA 61 FC | 	wrlong	result1, fp
1b28c     04 4E 05 F1 | 	add	fp, #4
1b290     A7 FC 61 FC | 	wrlong	result2, fp
1b294     04 4E 05 F1 | 	add	fp, #4
1b298     A7 FE 61 FC | 	wrlong	result3, fp
1b29c                 | ' 
1b29c                 | ' t1=pop() 'value
1b29c                 | ' 
1b29c                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then t=t1.result.iresult else t=converttoint(t1)
1b29c     08 4E 85 F1 | 	sub	fp, #8
1b2a0     1C FE 0D F2 | 	cmp	result3, #28 wz
1b2a4     08 4E 05 51 |  if_ne	add	fp, #8
1b2a8     A7 12 02 5B |  if_ne	rdlong	arg01, fp
1b2ac     08 4E 85 51 |  if_ne	sub	fp, #8
1b2b0     1D 12 0E 52 |  if_ne	cmp	arg01, #29 wz
1b2b4     A7 12 02 AB |  if_e	rdlong	arg01, fp
1b2b8     0C 4E 05 A1 |  if_e	add	fp, #12
1b2bc     A7 12 62 AC |  if_e	wrlong	arg01, fp
1b2c0     0C 4E 85 A1 |  if_e	sub	fp, #12
1b2c4     14 00 90 AD |  if_e	jmp	#LR__2280
1b2c8     A7 12 02 F6 | 	mov	arg01, fp
1b2cc     C0 01 BF FD | 	call	#_converttoint
1b2d0     0C 4E 05 F1 | 	add	fp, #12
1b2d4     A7 FA 61 FC | 	wrlong	result1, fp
1b2d8     0C 4E 85 F1 | 	sub	fp, #12
1b2dc                 | LR__2280
1b2dc                 | ' if t<0 then return
1b2dc     0C 4E 05 F1 | 	add	fp, #12
1b2e0     A7 12 02 FB | 	rdlong	arg01, fp
1b2e4     0C 4E 85 F1 | 	sub	fp, #12
1b2e8     00 12 56 F2 | 	cmps	arg01, #0 wc
1b2ec     B8 00 90 CD |  if_b	jmp	#LR__2285
1b2f0                 | ' if t < 5000 then 
1b2f0     0C 4E 05 F1 | 	add	fp, #12
1b2f4     A7 12 02 FB | 	rdlong	arg01, fp
1b2f8     0C 4E 85 F1 | 	sub	fp, #12
1b2fc     09 00 00 FF 
1b300     88 13 56 F2 | 	cmps	arg01, ##5000 wc
1b304     14 00 90 3D |  if_ae	jmp	#LR__2281
1b308     0C 4E 05 F1 | 	add	fp, #12
1b30c     A7 12 02 FB | 	rdlong	arg01, fp
1b310     0C 4E 85 F1 | 	sub	fp, #12
1b314     40 59 B0 FD | 	call	#__system___waitms
1b318     8C 00 90 FD | 	jmp	#LR__2284
1b31c                 | LR__2281
1b31c     10 4E 05 F1 | 	add	fp, #16
1b320     A7 02 68 FC | 	wrlong	#1, fp
1b324     04 4E 85 F1 | 	sub	fp, #4
1b328     A7 12 02 FB | 	rdlong	arg01, fp
1b32c     09 13 52 F6 | 	abs	arg01, arg01 wc
1b330     09 00 00 FF 
1b334     88 13 16 FD | 	qdiv	arg01, ##5000
1b338                 | '   for i=1 to t/5000
1b338     0C 4E 85 F1 | 	sub	fp, #12
1b33c     18 1E 62 FD | 	getqx	local01
1b340     0F 1F 82 F6 | 	negc	local01, local01
1b344     01 1E 06 F1 | 	add	local01, #1
1b348                 | LR__2282
1b348     10 4E 05 F1 | 	add	fp, #16
1b34c     A7 12 02 FB | 	rdlong	arg01, fp
1b350     10 4E 85 F1 | 	sub	fp, #16
1b354     0F 13 52 F2 | 	cmps	arg01, local01 wc
1b358     28 00 90 3D |  if_ae	jmp	#LR__2283
1b35c     0C 4E 05 F1 | 	add	fp, #12
1b360     A7 12 02 FB | 	rdlong	arg01, fp
1b364     0C 4E 85 F1 | 	sub	fp, #12
1b368     EC 58 B0 FD | 	call	#__system___waitms
1b36c     10 4E 05 F1 | 	add	fp, #16
1b370     A7 12 02 FB | 	rdlong	arg01, fp
1b374     01 12 06 F1 | 	add	arg01, #1
1b378     A7 12 62 FC | 	wrlong	arg01, fp
1b37c     10 4E 85 F1 | 	sub	fp, #16
1b380     C4 FF 9F FD | 	jmp	#LR__2282
1b384                 | LR__2283
1b384     0C 4E 05 F1 | 	add	fp, #12
1b388     A7 1E 02 FB | 	rdlong	local01, fp
1b38c     0F 1F 52 F6 | 	abs	local01, local01 wc
1b390     09 00 00 FF 
1b394     88 1F 16 FD | 	qdiv	local01, ##5000
1b398     0C 4E 85 F1 | 	sub	fp, #12
1b39c     19 1E 62 FD | 	getqy	local01
1b3a0     0F 13 82 F6 | 	negc	arg01, local01
1b3a4     B0 58 B0 FD | 	call	#__system___waitms
1b3a8                 | LR__2284
1b3a8                 | LR__2285
1b3a8     A7 F0 03 F6 | 	mov	ptra, fp
1b3ac     B2 00 A0 FD | 	call	#popregs_
1b3b0                 | _do_waitms_ret
1b3b0     2D 00 64 FD | 	ret
1b3b4                 | 
1b3b4                 | ' 
1b3b4                 | ' sub do_waitvbl
1b3b4                 | _do_waitvbl
1b3b4     01 12 06 F6 | 	mov	arg01, #1
1b3b8     5C 3C B0 FD | 	call	#_hg010b_spin2_waitvbl
1b3bc                 | _do_waitvbl_ret
1b3bc     2D 00 64 FD | 	ret
1b3c0                 | 
1b3c0                 | ' 
1b3c0                 | ' sub do_waitclock
1b3c0                 | _do_waitclock
1b3c0     51 00 00 FF 
1b3c4     A8 E5 05 F1 | 	add	objptr, ##41896
1b3c8     F2 00 02 FB | 	rdlong	_var01, objptr
1b3cc                 | ' c=hkcnt
1b3cc                 | ' do: loop until hkcnt<>c
1b3cc                 | LR__2290
1b3cc     F2 02 02 FB | 	rdlong	_var02, objptr
1b3d0     00 03 0A F2 | 	cmp	_var02, _var01 wz
1b3d4     F4 FF 9F AD |  if_e	jmp	#LR__2290
1b3d8     51 00 00 FF 
1b3dc     A8 E5 85 F1 | 	sub	objptr, ##41896
1b3e0                 | _do_waitclock_ret
1b3e0     2D 00 64 FD | 	ret
1b3e4                 | 
1b3e4                 | ' 
1b3e4                 | ' 
1b3e4                 | ' 
1b3e4                 | ' 
1b3e4                 | ' sub do_if
1b3e4                 | _do_if
1b3e4     05 4A 05 F6 | 	mov	COUNT_, #5
1b3e8     A8 00 A0 FD | 	call	#pushregs_
1b3ec     BC FE BE FD | 	call	#_pop
1b3f0     FD 1E 0A F6 | 	mov	local01, result1 wz
1b3f4     FE 20 02 F6 | 	mov	local02, result2
1b3f8     FF 22 02 F6 | 	mov	local03, result3
1b3fc                 | ' t1=pop()
1b3fc                 | ' ' if uresult=0, jump over else
1b3fc                 | ' if t1.result.uresult = 0 then 
1b3fc     BC 00 90 5D |  if_ne	jmp	#LR__2302
1b400                 | '   for i=lineptr_e to lineptr-1
1b400     4A 00 00 FF 
1b404     80 E4 05 F1 | 	add	objptr, ##38016
1b408     F2 24 02 FB | 	rdlong	local04, objptr
1b40c     04 E4 85 F1 | 	sub	objptr, #4
1b410     F2 26 02 FB | 	rdlong	local05, objptr
1b414     4A 00 00 FF 
1b418     7C E4 85 F1 | 	sub	objptr, ##38012
1b41c                 | LR__2300
1b41c     13 25 52 F2 | 	cmps	local04, local05 wc
1b420     78 00 90 3D |  if_ae	jmp	#LR__2301
1b424     12 FF 01 F6 | 	mov	result3, local04
1b428     01 FE 65 F0 | 	shl	result3, #1
1b42c     12 FF 01 F1 | 	add	result3, local04
1b430     02 FE 65 F0 | 	shl	result3, #2
1b434     47 00 00 FF 
1b438     7C E4 05 F1 | 	add	objptr, ##36476
1b43c     F2 FE 01 F1 | 	add	result3, objptr
1b440     FF 1E 02 FB | 	rdlong	local01, result3
1b444     04 FE 05 F1 | 	add	result3, #4
1b448     FF FC 01 FB | 	rdlong	result2, result3
1b44c     12 FF 01 F6 | 	mov	result3, local04
1b450     01 FE 65 F0 | 	shl	result3, #1
1b454     12 FF 01 F1 | 	add	result3, local04
1b458     02 FE 65 F0 | 	shl	result3, #2
1b45c     F2 FE 01 F1 | 	add	result3, objptr
1b460     08 FE 05 F1 | 	add	result3, #8
1b464     FF FE 01 FB | 	rdlong	result3, result3
1b468     FE 20 02 F6 | 	mov	local02, result2
1b46c     FF 22 02 F6 | 	mov	local03, result3
1b470                 | '     t1=compiledline(i)
1b470                 | '     if t1.result_type=token_else then lineptr_e=i : return
1b470     5A 22 0E F2 | 	cmp	local03, #90 wz
1b474     47 00 00 FF 
1b478     7C E4 85 F1 | 	sub	objptr, ##36476
1b47c     4A 00 00 AF 
1b480     80 E4 05 A1 |  if_e	add	objptr, ##38016
1b484     F2 24 62 AC |  if_e	wrlong	local04, objptr
1b488     4A 00 00 AF 
1b48c     80 E4 85 A1 |  if_e	sub	objptr, ##38016
1b490     28 00 90 AD |  if_e	jmp	#LR__2303
1b494     01 24 06 F1 | 	add	local04, #1
1b498     80 FF 9F FD | 	jmp	#LR__2300
1b49c                 | LR__2301
1b49c     4A 00 00 FF 
1b4a0     7C E4 05 F1 | 	add	objptr, ##38012
1b4a4     F2 26 02 FB | 	rdlong	local05, objptr
1b4a8     01 26 86 F1 | 	sub	local05, #1
1b4ac     04 E4 05 F1 | 	add	objptr, #4
1b4b0     F2 26 62 FC | 	wrlong	local05, objptr
1b4b4     4A 00 00 FF 
1b4b8     80 E4 85 F1 | 	sub	objptr, ##38016
1b4bc                 | LR__2302
1b4bc                 | LR__2303
1b4bc     A7 F0 03 F6 | 	mov	ptra, fp
1b4c0     B2 00 A0 FD | 	call	#popregs_
1b4c4                 | _do_if_ret
1b4c4     2D 00 64 FD | 	ret
1b4c8                 | 
1b4c8                 | ' 
1b4c8                 | ' sub do_else
1b4c8                 | _do_else
1b4c8     4A 00 00 FF 
1b4cc     7C E4 05 F1 | 	add	objptr, ##38012
1b4d0     F2 00 02 FB | 	rdlong	_var01, objptr
1b4d4     01 00 86 F1 | 	sub	_var01, #1
1b4d8     04 E4 05 F1 | 	add	objptr, #4
1b4dc     F2 00 62 FC | 	wrlong	_var01, objptr
1b4e0     4A 00 00 FF 
1b4e4     80 E4 85 F1 | 	sub	objptr, ##38016
1b4e8                 | _do_else_ret
1b4e8     2D 00 64 FD | 	ret
1b4ec                 | 
1b4ec                 | ' 
1b4ec                 | ' sub do_rad
1b4ec                 | _do_rad
1b4ec     51 00 00 FF 
1b4f0     BC E5 05 F1 | 	add	objptr, ##41916
1b4f4     00 C0 9F FF 
1b4f8     F2 00 68 FC | 	wrlong	##1065353216, objptr
1b4fc     04 E4 05 F1 | 	add	objptr, #4
1b500     00 C0 9F FF 
1b504     F2 00 68 FC | 	wrlong	##1065353216, objptr
1b508     51 00 00 FF 
1b50c     C0 E5 85 F1 | 	sub	objptr, ##41920
1b510                 | _do_rad_ret
1b510     2D 00 64 FD | 	ret
1b514                 | 
1b514                 | ' 
1b514                 | ' sub do_deg
1b514                 | _do_deg
1b514     51 00 00 FF 
1b518     BC E5 05 F1 | 	add	objptr, ##41916
1b51c     7D 47 9E FF 
1b520     F2 6A 68 FC | 	wrlong	##1016003125, objptr
1b524     04 E4 05 F1 | 	add	objptr, #4
1b528     97 32 A1 FF 
1b52c     F2 C2 69 FC | 	wrlong	##1113927393, objptr
1b530     51 00 00 FF 
1b534     C0 E5 85 F1 | 	sub	objptr, ##41920
1b538                 | _do_deg_ret
1b538     2D 00 64 FD | 	ret
1b53c                 | 
1b53c                 | ' 
1b53c                 | ' 
1b53c                 | ' 
1b53c                 | ' 
1b53c                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
1b53c                 | ' 
1b53c                 | ' ''----------------------------------------------------------------------------------------------------
1b53c                 | ' ''------------------ Initialization procedures -------------------------------------------------------
1b53c                 | ' ''----------------------------------------------------------------------------------------------------
1b53c                 | ' 
1b53c                 | ' ''--------------------------- Command function pointers
1b53c                 | ' 
1b53c                 | ' sub init_commands
1b53c                 | _init_commands
1b53c                 | ' 
1b53c                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
1b53c     00 00 06 F6 | 	mov	_var01, #0
1b540     97 16 48 FB | 	callpa	#(@LR__2311-@LR__2310)>>2,fcache_load_ptr_
1b544                 | LR__2310
1b544     00 FB 01 F6 | 	mov	result1, _var01
1b548     02 FA 65 F0 | 	shl	result1, #2
1b54c     43 00 00 FF 
1b550     60 E4 05 F1 | 	add	objptr, ##34400
1b554     F2 FA 01 F1 | 	add	result1, objptr
1b558     43 00 00 FF 
1b55c     60 E4 85 F1 | 	sub	objptr, ##34400
1b560     FD E4 61 FC | 	wrlong	objptr, result1
1b564     01 00 06 F1 | 	add	_var01, #1
1b568     00 01 56 F2 | 	cmps	_var01, #256 wc
1b56c     D4 FF 9F CD |  if_b	jmp	#LR__2310
1b570                 | LR__2311
1b570     F2 FA 01 F6 | 	mov	result1, objptr
1b574     14 FA 25 F4 | 	bith	result1, #20
1b578     43 00 00 FF 
1b57c     64 E4 05 F1 | 	add	objptr, ##34404
1b580     F2 FA 61 FC | 	wrlong	result1, objptr
1b584     43 00 00 FF 
1b588     64 E4 85 F1 | 	sub	objptr, ##34404
1b58c     F2 FA 01 F6 | 	mov	result1, objptr
1b590     15 FA 25 F4 | 	bith	result1, #21
1b594     43 00 00 FF 
1b598     68 E4 05 F1 | 	add	objptr, ##34408
1b59c     F2 FA 61 FC | 	wrlong	result1, objptr
1b5a0     43 00 00 FF 
1b5a4     68 E4 85 F1 | 	sub	objptr, ##34408
1b5a8     F2 FA 01 F6 | 	mov	result1, objptr
1b5ac     34 FA 25 F4 | 	bith	result1, #52
1b5b0     43 00 00 FF 
1b5b4     6C E4 05 F1 | 	add	objptr, ##34412
1b5b8     F2 FA 61 FC | 	wrlong	result1, objptr
1b5bc     43 00 00 FF 
1b5c0     6C E4 85 F1 | 	sub	objptr, ##34412
1b5c4     F2 FA 01 F6 | 	mov	result1, objptr
1b5c8     16 FA 25 F4 | 	bith	result1, #22
1b5cc     43 00 00 FF 
1b5d0     74 E4 05 F1 | 	add	objptr, ##34420
1b5d4     F2 FA 61 FC | 	wrlong	result1, objptr
1b5d8     43 00 00 FF 
1b5dc     74 E4 85 F1 | 	sub	objptr, ##34420
1b5e0     F2 FA 01 F6 | 	mov	result1, objptr
1b5e4     00 28 00 FF 
1b5e8     00 FA 45 F5 | 	or	result1, ##5242880
1b5ec     43 00 00 FF 
1b5f0     78 E4 05 F1 | 	add	objptr, ##34424
1b5f4     F2 FA 61 FC | 	wrlong	result1, objptr
1b5f8     43 00 00 FF 
1b5fc     78 E4 85 F1 | 	sub	objptr, ##34424
1b600     F2 FA 01 F6 | 	mov	result1, objptr
1b604     35 FA 25 F4 | 	bith	result1, #53
1b608     43 00 00 FF 
1b60c     7C E4 05 F1 | 	add	objptr, ##34428
1b610     F2 FA 61 FC | 	wrlong	result1, objptr
1b614     43 00 00 FF 
1b618     7C E4 85 F1 | 	sub	objptr, ##34428
1b61c     F2 FA 01 F6 | 	mov	result1, objptr
1b620     54 FA 25 F4 | 	bith	result1, #84
1b624     43 00 00 FF 
1b628     80 E4 05 F1 | 	add	objptr, ##34432
1b62c     F2 FA 61 FC | 	wrlong	result1, objptr
1b630     43 00 00 FF 
1b634     80 E4 85 F1 | 	sub	objptr, ##34432
1b638     F2 FA 01 F6 | 	mov	result1, objptr
1b63c     17 FA 25 F4 | 	bith	result1, #23
1b640     43 00 00 FF 
1b644     84 E4 05 F1 | 	add	objptr, ##34436
1b648     F2 FA 61 FC | 	wrlong	result1, objptr
1b64c     43 00 00 FF 
1b650     84 E4 85 F1 | 	sub	objptr, ##34436
1b654     F2 FA 01 F6 | 	mov	result1, objptr
1b658     00 48 00 FF 
1b65c     00 FA 45 F5 | 	or	result1, ##9437184
1b660     43 00 00 FF 
1b664     88 E4 05 F1 | 	add	objptr, ##34440
1b668     F2 FA 61 FC | 	wrlong	result1, objptr
1b66c     43 00 00 FF 
1b670     88 E4 85 F1 | 	sub	objptr, ##34440
1b674     F2 FA 01 F6 | 	mov	result1, objptr
1b678     00 50 00 FF 
1b67c     00 FA 45 F5 | 	or	result1, ##10485760
1b680     43 00 00 FF 
1b684     8C E4 05 F1 | 	add	objptr, ##34444
1b688     F2 FA 61 FC | 	wrlong	result1, objptr
1b68c     43 00 00 FF 
1b690     8C E4 85 F1 | 	sub	objptr, ##34444
1b694     F2 FA 01 F6 | 	mov	result1, objptr
1b698     00 58 00 FF 
1b69c     00 FA 45 F5 | 	or	result1, ##11534336
1b6a0     43 00 00 FF 
1b6a4     90 E4 05 F1 | 	add	objptr, ##34448
1b6a8     F2 FA 61 FC | 	wrlong	result1, objptr
1b6ac     43 00 00 FF 
1b6b0     90 E4 85 F1 | 	sub	objptr, ##34448
1b6b4     F2 FA 01 F6 | 	mov	result1, objptr
1b6b8     36 FA 25 F4 | 	bith	result1, #54
1b6bc     43 00 00 FF 
1b6c0     A4 E4 05 F1 | 	add	objptr, ##34468
1b6c4     F2 FA 61 FC | 	wrlong	result1, objptr
1b6c8     43 00 00 FF 
1b6cc     A4 E4 85 F1 | 	sub	objptr, ##34468
1b6d0     F2 FA 01 F6 | 	mov	result1, objptr
1b6d4     00 68 00 FF 
1b6d8     00 FA 45 F5 | 	or	result1, ##13631488
1b6dc     43 00 00 FF 
1b6e0     D4 E4 05 F1 | 	add	objptr, ##34516
1b6e4     F2 FA 61 FC | 	wrlong	result1, objptr
1b6e8     43 00 00 FF 
1b6ec     D4 E4 85 F1 | 	sub	objptr, ##34516
1b6f0     F2 FA 01 F6 | 	mov	result1, objptr
1b6f4     00 68 00 FF 
1b6f8     00 FA 45 F5 | 	or	result1, ##13631488
1b6fc     43 00 00 FF 
1b700     D0 E4 05 F1 | 	add	objptr, ##34512
1b704     F2 FA 61 FC | 	wrlong	result1, objptr
1b708     43 00 00 FF 
1b70c     D0 E4 85 F1 | 	sub	objptr, ##34512
1b710     F2 FA 01 F6 | 	mov	result1, objptr
1b714     00 68 00 FF 
1b718     00 FA 45 F5 | 	or	result1, ##13631488
1b71c     43 00 00 FF 
1b720     D8 E4 05 F1 | 	add	objptr, ##34520
1b724     F2 FA 61 FC | 	wrlong	result1, objptr
1b728     43 00 00 FF 
1b72c     D8 E4 85 F1 | 	sub	objptr, ##34520
1b730     F2 FA 01 F6 | 	mov	result1, objptr
1b734     00 68 00 FF 
1b738     00 FA 45 F5 | 	or	result1, ##13631488
1b73c     43 00 00 FF 
1b740     DC E4 05 F1 | 	add	objptr, ##34524
1b744     F2 FA 61 FC | 	wrlong	result1, objptr
1b748     43 00 00 FF 
1b74c     DC E4 85 F1 | 	sub	objptr, ##34524
1b750     F2 FA 01 F6 | 	mov	result1, objptr
1b754     00 68 00 FF 
1b758     00 FA 45 F5 | 	or	result1, ##13631488
1b75c     43 00 00 FF 
1b760     0C E5 05 F1 | 	add	objptr, ##34572
1b764     F2 FA 61 FC | 	wrlong	result1, objptr
1b768     43 00 00 FF 
1b76c     0C E5 85 F1 | 	sub	objptr, ##34572
1b770     F2 FA 01 F6 | 	mov	result1, objptr
1b774     55 FA 25 F4 | 	bith	result1, #85
1b778     43 00 00 FF 
1b77c     BC E4 05 F1 | 	add	objptr, ##34492
1b780     F2 FA 61 FC | 	wrlong	result1, objptr
1b784     43 00 00 FF 
1b788     BC E4 85 F1 | 	sub	objptr, ##34492
1b78c     F2 FA 01 F6 | 	mov	result1, objptr
1b790     00 68 00 FF 
1b794     00 FA 45 F5 | 	or	result1, ##13631488
1b798     43 00 00 FF 
1b79c     10 E5 05 F1 | 	add	objptr, ##34576
1b7a0     F2 FA 61 FC | 	wrlong	result1, objptr
1b7a4     43 00 00 FF 
1b7a8     10 E5 85 F1 | 	sub	objptr, ##34576
1b7ac     F2 FA 01 F6 | 	mov	result1, objptr
1b7b0     00 68 00 FF 
1b7b4     00 FA 45 F5 | 	or	result1, ##13631488
1b7b8     43 00 00 FF 
1b7bc     E0 E4 05 F1 | 	add	objptr, ##34528
1b7c0     F2 FA 61 FC | 	wrlong	result1, objptr
1b7c4     43 00 00 FF 
1b7c8     E0 E4 85 F1 | 	sub	objptr, ##34528
1b7cc     F2 FA 01 F6 | 	mov	result1, objptr
1b7d0     00 68 00 FF 
1b7d4     00 FA 45 F5 | 	or	result1, ##13631488
1b7d8     43 00 00 FF 
1b7dc     E4 E4 05 F1 | 	add	objptr, ##34532
1b7e0     F2 FA 61 FC | 	wrlong	result1, objptr
1b7e4     43 00 00 FF 
1b7e8     E4 E4 85 F1 | 	sub	objptr, ##34532
1b7ec     F2 FA 01 F6 | 	mov	result1, objptr
1b7f0     00 68 00 FF 
1b7f4     00 FA 45 F5 | 	or	result1, ##13631488
1b7f8     43 00 00 FF 
1b7fc     E8 E4 05 F1 | 	add	objptr, ##34536
1b800     F2 FA 61 FC | 	wrlong	result1, objptr
1b804     43 00 00 FF 
1b808     E8 E4 85 F1 | 	sub	objptr, ##34536
1b80c     F2 FA 01 F6 | 	mov	result1, objptr
1b810     74 FA 25 F4 | 	bith	result1, #116
1b814     43 00 00 FF 
1b818     60 E5 05 F1 | 	add	objptr, ##34656
1b81c     F2 FA 61 FC | 	wrlong	result1, objptr
1b820     43 00 00 FF 
1b824     60 E5 85 F1 | 	sub	objptr, ##34656
1b828     F2 FA 01 F6 | 	mov	result1, objptr
1b82c     18 FA 25 F4 | 	bith	result1, #24
1b830     43 00 00 FF 
1b834     64 E5 05 F1 | 	add	objptr, ##34660
1b838     F2 FA 61 FC | 	wrlong	result1, objptr
1b83c     43 00 00 FF 
1b840     64 E5 85 F1 | 	sub	objptr, ##34660
1b844     F2 FA 01 F6 | 	mov	result1, objptr
1b848     00 88 00 FF 
1b84c     00 FA 45 F5 | 	or	result1, ##17825792
1b850     43 00 00 FF 
1b854     68 E5 05 F1 | 	add	objptr, ##34664
1b858     F2 FA 61 FC | 	wrlong	result1, objptr
1b85c     43 00 00 FF 
1b860     68 E5 85 F1 | 	sub	objptr, ##34664
1b864     F2 FA 01 F6 | 	mov	result1, objptr
1b868     00 90 00 FF 
1b86c     00 FA 45 F5 | 	or	result1, ##18874368
1b870     43 00 00 FF 
1b874     6C E5 05 F1 | 	add	objptr, ##34668
1b878     F2 FA 61 FC | 	wrlong	result1, objptr
1b87c     43 00 00 FF 
1b880     6C E5 85 F1 | 	sub	objptr, ##34668
1b884     F2 FA 01 F6 | 	mov	result1, objptr
1b888     00 98 00 FF 
1b88c     00 FA 45 F5 | 	or	result1, ##19922944
1b890     43 00 00 FF 
1b894     70 E5 05 F1 | 	add	objptr, ##34672
1b898     F2 FA 61 FC | 	wrlong	result1, objptr
1b89c     43 00 00 FF 
1b8a0     70 E5 85 F1 | 	sub	objptr, ##34672
1b8a4     F2 FA 01 F6 | 	mov	result1, objptr
1b8a8     00 A0 00 FF 
1b8ac     00 FA 45 F5 | 	or	result1, ##20971520
1b8b0     43 00 00 FF 
1b8b4     74 E5 05 F1 | 	add	objptr, ##34676
1b8b8     F2 FA 61 FC | 	wrlong	result1, objptr
1b8bc     43 00 00 FF 
1b8c0     74 E5 85 F1 | 	sub	objptr, ##34676
1b8c4     F2 FA 01 F6 | 	mov	result1, objptr
1b8c8     00 A8 00 FF 
1b8cc     00 FA 45 F5 | 	or	result1, ##22020096
1b8d0     43 00 00 FF 
1b8d4     78 E5 05 F1 | 	add	objptr, ##34680
1b8d8     F2 FA 61 FC | 	wrlong	result1, objptr
1b8dc     43 00 00 FF 
1b8e0     78 E5 85 F1 | 	sub	objptr, ##34680
1b8e4     F2 FA 01 F6 | 	mov	result1, objptr
1b8e8     00 B0 00 FF 
1b8ec     00 FA 45 F5 | 	or	result1, ##23068672
1b8f0     43 00 00 FF 
1b8f4     7C E5 05 F1 | 	add	objptr, ##34684
1b8f8     F2 FA 61 FC | 	wrlong	result1, objptr
1b8fc     43 00 00 FF 
1b900     7C E5 85 F1 | 	sub	objptr, ##34684
1b904     F2 FA 01 F6 | 	mov	result1, objptr
1b908     00 B8 00 FF 
1b90c     00 FA 45 F5 | 	or	result1, ##24117248
1b910     43 00 00 FF 
1b914     80 E5 05 F1 | 	add	objptr, ##34688
1b918     F2 FA 61 FC | 	wrlong	result1, objptr
1b91c     43 00 00 FF 
1b920     80 E5 85 F1 | 	sub	objptr, ##34688
1b924     F2 FA 01 F6 | 	mov	result1, objptr
1b928     37 FA 25 F4 | 	bith	result1, #55
1b92c     43 00 00 FF 
1b930     84 E5 05 F1 | 	add	objptr, ##34692
1b934     F2 FA 61 FC | 	wrlong	result1, objptr
1b938     43 00 00 FF 
1b93c     84 E5 85 F1 | 	sub	objptr, ##34692
1b940     F2 FA 01 F6 | 	mov	result1, objptr
1b944     00 C8 00 FF 
1b948     00 FA 45 F5 | 	or	result1, ##26214400
1b94c     43 00 00 FF 
1b950     88 E5 05 F1 | 	add	objptr, ##34696
1b954     F2 FA 61 FC | 	wrlong	result1, objptr
1b958     43 00 00 FF 
1b95c     88 E5 85 F1 | 	sub	objptr, ##34696
1b960     F2 FA 01 F6 | 	mov	result1, objptr
1b964     00 D0 00 FF 
1b968     00 FA 45 F5 | 	or	result1, ##27262976
1b96c     43 00 00 FF 
1b970     8C E5 05 F1 | 	add	objptr, ##34700
1b974     F2 FA 61 FC | 	wrlong	result1, objptr
1b978     43 00 00 FF 
1b97c     8C E5 85 F1 | 	sub	objptr, ##34700
1b980     F2 FA 01 F6 | 	mov	result1, objptr
1b984     00 D8 00 FF 
1b988     00 FA 45 F5 | 	or	result1, ##28311552
1b98c     43 00 00 FF 
1b990     90 E5 05 F1 | 	add	objptr, ##34704
1b994     F2 FA 61 FC | 	wrlong	result1, objptr
1b998     43 00 00 FF 
1b99c     90 E5 85 F1 | 	sub	objptr, ##34704
1b9a0     F2 FA 01 F6 | 	mov	result1, objptr
1b9a4     56 FA 25 F4 | 	bith	result1, #86
1b9a8     43 00 00 FF 
1b9ac     94 E5 05 F1 | 	add	objptr, ##34708
1b9b0     F2 FA 61 FC | 	wrlong	result1, objptr
1b9b4     43 00 00 FF 
1b9b8     94 E5 85 F1 | 	sub	objptr, ##34708
1b9bc     F2 FA 01 F6 | 	mov	result1, objptr
1b9c0     00 E8 00 FF 
1b9c4     00 FA 45 F5 | 	or	result1, ##30408704
1b9c8     45 00 00 FF 
1b9cc     5C E4 05 F1 | 	add	objptr, ##35420
1b9d0     F2 FA 61 FC | 	wrlong	result1, objptr
1b9d4     45 00 00 FF 
1b9d8     5C E4 85 F1 | 	sub	objptr, ##35420
1b9dc     F2 FA 01 F6 | 	mov	result1, objptr
1b9e0     75 FA 25 F4 | 	bith	result1, #117
1b9e4     43 00 00 FF 
1b9e8     98 E5 05 F1 | 	add	objptr, ##34712
1b9ec     F2 FA 61 FC | 	wrlong	result1, objptr
1b9f0     43 00 00 FF 
1b9f4     98 E5 85 F1 | 	sub	objptr, ##34712
1b9f8     F2 FA 01 F6 | 	mov	result1, objptr
1b9fc     94 FA 25 F4 | 	bith	result1, #148
1ba00     43 00 00 FF 
1ba04     AC E5 05 F1 | 	add	objptr, ##34732
1ba08     F2 FA 61 FC | 	wrlong	result1, objptr
1ba0c     43 00 00 FF 
1ba10     AC E5 85 F1 | 	sub	objptr, ##34732
1ba14     F2 FA 01 F6 | 	mov	result1, objptr
1ba18     19 FA 25 F4 | 	bith	result1, #25
1ba1c     43 00 00 FF 
1ba20     9C E5 05 F1 | 	add	objptr, ##34716
1ba24     F2 FA 61 FC | 	wrlong	result1, objptr
1ba28     43 00 00 FF 
1ba2c     9C E5 85 F1 | 	sub	objptr, ##34716
1ba30     F2 FA 01 F6 | 	mov	result1, objptr
1ba34     00 08 01 FF 
1ba38     00 FA 45 F5 | 	or	result1, ##34603008
1ba3c     43 00 00 FF 
1ba40     B8 E4 05 F1 | 	add	objptr, ##34488
1ba44     F2 FA 61 FC | 	wrlong	result1, objptr
1ba48     43 00 00 FF 
1ba4c     B8 E4 85 F1 | 	sub	objptr, ##34488
1ba50     F2 FA 01 F6 | 	mov	result1, objptr
1ba54     00 10 01 FF 
1ba58     00 FA 45 F5 | 	or	result1, ##35651584
1ba5c     43 00 00 FF 
1ba60     A0 E5 05 F1 | 	add	objptr, ##34720
1ba64     F2 FA 61 FC | 	wrlong	result1, objptr
1ba68     43 00 00 FF 
1ba6c     A0 E5 85 F1 | 	sub	objptr, ##34720
1ba70     F2 FA 01 F6 | 	mov	result1, objptr
1ba74     00 18 01 FF 
1ba78     00 FA 45 F5 | 	or	result1, ##36700160
1ba7c     43 00 00 FF 
1ba80     A4 E5 05 F1 | 	add	objptr, ##34724
1ba84     F2 FA 61 FC | 	wrlong	result1, objptr
1ba88     43 00 00 FF 
1ba8c     A4 E5 85 F1 | 	sub	objptr, ##34724
1ba90     F2 FA 01 F6 | 	mov	result1, objptr
1ba94     00 20 01 FF 
1ba98     00 FA 45 F5 | 	or	result1, ##37748736
1ba9c     43 00 00 FF 
1baa0     A8 E5 05 F1 | 	add	objptr, ##34728
1baa4     F2 FA 61 FC | 	wrlong	result1, objptr
1baa8     43 00 00 FF 
1baac     A8 E5 85 F1 | 	sub	objptr, ##34728
1bab0     F2 FA 01 F6 | 	mov	result1, objptr
1bab4     00 28 01 FF 
1bab8     00 FA 45 F5 | 	or	result1, ##38797312
1babc     43 00 00 FF 
1bac0     B4 E5 05 F1 | 	add	objptr, ##34740
1bac4     F2 FA 61 FC | 	wrlong	result1, objptr
1bac8     43 00 00 FF 
1bacc     B4 E5 85 F1 | 	sub	objptr, ##34740
1bad0     F2 FA 01 F6 | 	mov	result1, objptr
1bad4     00 30 01 FF 
1bad8     00 FA 45 F5 | 	or	result1, ##39845888
1badc     43 00 00 FF 
1bae0     B8 E5 05 F1 | 	add	objptr, ##34744
1bae4     F2 FA 61 FC | 	wrlong	result1, objptr
1bae8     43 00 00 FF 
1baec     B8 E5 85 F1 | 	sub	objptr, ##34744
1baf0     F2 FA 01 F6 | 	mov	result1, objptr
1baf4     00 38 01 FF 
1baf8     00 FA 45 F5 | 	or	result1, ##40894464
1bafc     43 00 00 FF 
1bb00     BC E5 05 F1 | 	add	objptr, ##34748
1bb04     F2 FA 61 FC | 	wrlong	result1, objptr
1bb08     43 00 00 FF 
1bb0c     BC E5 85 F1 | 	sub	objptr, ##34748
1bb10     F2 FA 01 F6 | 	mov	result1, objptr
1bb14     00 40 01 FF 
1bb18     00 FA 45 F5 | 	or	result1, ##41943040
1bb1c     43 00 00 FF 
1bb20     C0 E5 05 F1 | 	add	objptr, ##34752
1bb24     F2 FA 61 FC | 	wrlong	result1, objptr
1bb28     43 00 00 FF 
1bb2c     C0 E5 85 F1 | 	sub	objptr, ##34752
1bb30     F2 FA 01 F6 | 	mov	result1, objptr
1bb34     00 48 01 FF 
1bb38     00 FA 45 F5 | 	or	result1, ##42991616
1bb3c     43 00 00 FF 
1bb40     C8 E5 05 F1 | 	add	objptr, ##34760
1bb44     F2 FA 61 FC | 	wrlong	result1, objptr
1bb48     43 00 00 FF 
1bb4c     C8 E5 85 F1 | 	sub	objptr, ##34760
1bb50     F2 FA 01 F6 | 	mov	result1, objptr
1bb54     00 08 01 FF 
1bb58     00 FA 45 F5 | 	or	result1, ##34603008
1bb5c     43 00 00 FF 
1bb60     CC E5 05 F1 | 	add	objptr, ##34764
1bb64     F2 FA 61 FC | 	wrlong	result1, objptr
1bb68     43 00 00 FF 
1bb6c     CC E5 85 F1 | 	sub	objptr, ##34764
1bb70     F2 FA 01 F6 | 	mov	result1, objptr
1bb74     00 50 01 FF 
1bb78     00 FA 45 F5 | 	or	result1, ##44040192
1bb7c     43 00 00 FF 
1bb80     CC E4 05 F1 | 	add	objptr, ##34508
1bb84     F2 FA 61 FC | 	wrlong	result1, objptr
1bb88     43 00 00 FF 
1bb8c     CC E4 85 F1 | 	sub	objptr, ##34508
1bb90     F2 FA 01 F6 | 	mov	result1, objptr
1bb94     00 58 01 FF 
1bb98     00 FA 45 F5 | 	or	result1, ##45088768
1bb9c     43 00 00 FF 
1bba0     FC E4 05 F1 | 	add	objptr, ##34556
1bba4     F2 FA 61 FC | 	wrlong	result1, objptr
1bba8     43 00 00 FF 
1bbac     FC E4 85 F1 | 	sub	objptr, ##34556
1bbb0     F2 FA 01 F6 | 	mov	result1, objptr
1bbb4     00 60 01 FF 
1bbb8     00 FA 45 F5 | 	or	result1, ##46137344
1bbbc     43 00 00 FF 
1bbc0     F8 E4 05 F1 | 	add	objptr, ##34552
1bbc4     F2 FA 61 FC | 	wrlong	result1, objptr
1bbc8     43 00 00 FF 
1bbcc     F8 E4 85 F1 | 	sub	objptr, ##34552
1bbd0     F2 FA 01 F6 | 	mov	result1, objptr
1bbd4     00 68 01 FF 
1bbd8     00 FA 45 F5 | 	or	result1, ##47185920
1bbdc     43 00 00 FF 
1bbe0     9C E4 05 F1 | 	add	objptr, ##34460
1bbe4     F2 FA 61 FC | 	wrlong	result1, objptr
1bbe8     43 00 00 FF 
1bbec     9C E4 85 F1 | 	sub	objptr, ##34460
1bbf0     F2 FA 01 F6 | 	mov	result1, objptr
1bbf4     00 70 01 FF 
1bbf8     00 FA 45 F5 | 	or	result1, ##48234496
1bbfc     43 00 00 FF 
1bc00     A0 E4 05 F1 | 	add	objptr, ##34464
1bc04     F2 FA 61 FC | 	wrlong	result1, objptr
1bc08     43 00 00 FF 
1bc0c     A0 E4 85 F1 | 	sub	objptr, ##34464
1bc10     F2 FA 01 F6 | 	mov	result1, objptr
1bc14     00 78 01 FF 
1bc18     00 FA 45 F5 | 	or	result1, ##49283072
1bc1c     43 00 00 FF 
1bc20     08 E5 05 F1 | 	add	objptr, ##34568
1bc24     F2 FA 61 FC | 	wrlong	result1, objptr
1bc28     43 00 00 FF 
1bc2c     08 E5 85 F1 | 	sub	objptr, ##34568
1bc30     F2 FA 01 F6 | 	mov	result1, objptr
1bc34     38 FA 25 F4 | 	bith	result1, #56
1bc38     43 00 00 FF 
1bc3c     B0 E5 05 F1 | 	add	objptr, ##34736
1bc40     F2 FA 61 FC | 	wrlong	result1, objptr
1bc44     43 00 00 FF 
1bc48     B0 E5 85 F1 | 	sub	objptr, ##34736
1bc4c     F2 FA 01 F6 | 	mov	result1, objptr
1bc50     00 88 01 FF 
1bc54     00 FA 45 F5 | 	or	result1, ##51380224
1bc58     43 00 00 FF 
1bc5c     C4 E5 05 F1 | 	add	objptr, ##34756
1bc60     F2 FA 61 FC | 	wrlong	result1, objptr
1bc64     43 00 00 FF 
1bc68     C4 E5 85 F1 | 	sub	objptr, ##34756
1bc6c     F2 FA 01 F6 | 	mov	result1, objptr
1bc70     00 90 01 FF 
1bc74     00 FA 45 F5 | 	or	result1, ##52428800
1bc78     43 00 00 FF 
1bc7c     D0 E5 05 F1 | 	add	objptr, ##34768
1bc80     F2 FA 61 FC | 	wrlong	result1, objptr
1bc84     43 00 00 FF 
1bc88     D0 E5 85 F1 | 	sub	objptr, ##34768
1bc8c     F2 FA 01 F6 | 	mov	result1, objptr
1bc90     00 98 01 FF 
1bc94     00 FA 45 F5 | 	or	result1, ##53477376
1bc98     43 00 00 FF 
1bc9c     D4 E5 05 F1 | 	add	objptr, ##34772
1bca0     F2 FA 61 FC | 	wrlong	result1, objptr
1bca4     43 00 00 FF 
1bca8     D4 E5 85 F1 | 	sub	objptr, ##34772
1bcac     F2 FA 01 F6 | 	mov	result1, objptr
1bcb0     00 A0 01 FF 
1bcb4     00 FA 45 F5 | 	or	result1, ##54525952
1bcb8     43 00 00 FF 
1bcbc     D8 E5 05 F1 | 	add	objptr, ##34776
1bcc0     F2 FA 61 FC | 	wrlong	result1, objptr
1bcc4     43 00 00 FF 
1bcc8     D8 E5 85 F1 | 	sub	objptr, ##34776
1bccc     F2 FA 01 F6 | 	mov	result1, objptr
1bcd0     00 A8 01 FF 
1bcd4     00 FA 45 F5 | 	or	result1, ##55574528
1bcd8     43 00 00 FF 
1bcdc     DC E5 05 F1 | 	add	objptr, ##34780
1bce0     F2 FA 61 FC | 	wrlong	result1, objptr
1bce4     43 00 00 FF 
1bce8     DC E5 85 F1 | 	sub	objptr, ##34780
1bcec     F2 FA 01 F6 | 	mov	result1, objptr
1bcf0     00 B0 01 FF 
1bcf4     00 FA 45 F5 | 	or	result1, ##56623104
1bcf8     43 00 00 FF 
1bcfc     E0 E5 05 F1 | 	add	objptr, ##34784
1bd00     F2 FA 61 FC | 	wrlong	result1, objptr
1bd04     43 00 00 FF 
1bd08     E0 E5 85 F1 | 	sub	objptr, ##34784
1bd0c     F2 FA 01 F6 | 	mov	result1, objptr
1bd10     00 B8 01 FF 
1bd14     00 FA 45 F5 | 	or	result1, ##57671680
1bd18     43 00 00 FF 
1bd1c     E4 E5 05 F1 | 	add	objptr, ##34788
1bd20     F2 FA 61 FC | 	wrlong	result1, objptr
1bd24     43 00 00 FF 
1bd28     E4 E5 85 F1 | 	sub	objptr, ##34788
1bd2c     F2 FA 01 F6 | 	mov	result1, objptr
1bd30     94 FA 25 F4 | 	bith	result1, #148
1bd34     43 00 00 FF 
1bd38     AC E5 05 F1 | 	add	objptr, ##34732
1bd3c     F2 FA 61 FC | 	wrlong	result1, objptr
1bd40     43 00 00 FF 
1bd44     AC E5 85 F1 | 	sub	objptr, ##34732
1bd48     F2 FA 01 F6 | 	mov	result1, objptr
1bd4c     57 FA 25 F4 | 	bith	result1, #87
1bd50     43 00 00 FF 
1bd54     EC E5 05 F1 | 	add	objptr, ##34796
1bd58     F2 FA 61 FC | 	wrlong	result1, objptr
1bd5c     43 00 00 FF 
1bd60     EC E5 85 F1 | 	sub	objptr, ##34796
1bd64     F2 FA 01 F6 | 	mov	result1, objptr
1bd68     00 C8 01 FF 
1bd6c     00 FA 45 F5 | 	or	result1, ##59768832
1bd70     43 00 00 FF 
1bd74     E8 E5 05 F1 | 	add	objptr, ##34792
1bd78     F2 FA 61 FC | 	wrlong	result1, objptr
1bd7c     43 00 00 FF 
1bd80     E8 E5 85 F1 | 	sub	objptr, ##34792
1bd84     F2 FA 01 F6 | 	mov	result1, objptr
1bd88     00 D0 01 FF 
1bd8c     00 FA 45 F5 | 	or	result1, ##60817408
1bd90     44 00 00 FF 
1bd94     00 E4 05 F1 | 	add	objptr, ##34816
1bd98     F2 FA 61 FC | 	wrlong	result1, objptr
1bd9c     44 00 00 FF 
1bda0     00 E4 85 F1 | 	sub	objptr, ##34816
1bda4     F2 FA 01 F6 | 	mov	result1, objptr
1bda8     00 D8 01 FF 
1bdac     00 FA 45 F5 | 	or	result1, ##61865984
1bdb0     44 00 00 FF 
1bdb4     04 E4 05 F1 | 	add	objptr, ##34820
1bdb8     F2 FA 61 FC | 	wrlong	result1, objptr
1bdbc     44 00 00 FF 
1bdc0     04 E4 85 F1 | 	sub	objptr, ##34820
1bdc4     F2 FA 01 F6 | 	mov	result1, objptr
1bdc8     76 FA 25 F4 | 	bith	result1, #118
1bdcc     43 00 00 FF 
1bdd0     F0 E5 05 F1 | 	add	objptr, ##34800
1bdd4     F2 FA 61 FC | 	wrlong	result1, objptr
1bdd8     43 00 00 FF 
1bddc     F0 E5 85 F1 | 	sub	objptr, ##34800
1bde0     F2 FA 01 F6 | 	mov	result1, objptr
1bde4     00 E8 01 FF 
1bde8     00 FA 45 F5 | 	or	result1, ##63963136
1bdec     43 00 00 FF 
1bdf0     F4 E5 05 F1 | 	add	objptr, ##34804
1bdf4     F2 FA 61 FC | 	wrlong	result1, objptr
1bdf8     43 00 00 FF 
1bdfc     F4 E5 85 F1 | 	sub	objptr, ##34804
1be00     F2 FA 01 F6 | 	mov	result1, objptr
1be04     95 FA 25 F4 | 	bith	result1, #149
1be08     43 00 00 FF 
1be0c     F8 E5 05 F1 | 	add	objptr, ##34808
1be10     F2 FA 61 FC | 	wrlong	result1, objptr
1be14     43 00 00 FF 
1be18     F8 E5 85 F1 | 	sub	objptr, ##34808
1be1c     F2 FA 01 F6 | 	mov	result1, objptr
1be20     B4 FA 25 F4 | 	bith	result1, #180
1be24     43 00 00 FF 
1be28     FC E5 05 F1 | 	add	objptr, ##34812
1be2c     F2 FA 61 FC | 	wrlong	result1, objptr
1be30     43 00 00 FF 
1be34     FC E5 85 F1 | 	sub	objptr, ##34812
1be38     F2 FA 01 F6 | 	mov	result1, objptr
1be3c     1A FA 25 F4 | 	bith	result1, #26
1be40     44 00 00 FF 
1be44     0C E4 05 F1 | 	add	objptr, ##34828
1be48     F2 FA 61 FC | 	wrlong	result1, objptr
1be4c     44 00 00 FF 
1be50     0C E4 85 F1 | 	sub	objptr, ##34828
1be54     F2 FA 01 F6 | 	mov	result1, objptr
1be58     00 08 02 FF 
1be5c     00 FA 45 F5 | 	or	result1, ##68157440
1be60     44 00 00 FF 
1be64     08 E4 05 F1 | 	add	objptr, ##34824
1be68     F2 FA 61 FC | 	wrlong	result1, objptr
1be6c     44 00 00 FF 
1be70     08 E4 85 F1 | 	sub	objptr, ##34824
1be74     F2 FA 01 F6 | 	mov	result1, objptr
1be78     00 10 02 FF 
1be7c     00 FA 45 F5 | 	or	result1, ##69206016
1be80     44 00 00 FF 
1be84     18 E4 05 F1 | 	add	objptr, ##34840
1be88     F2 FA 61 FC | 	wrlong	result1, objptr
1be8c     44 00 00 FF 
1be90     18 E4 85 F1 | 	sub	objptr, ##34840
1be94     F2 FA 01 F6 | 	mov	result1, objptr
1be98     00 18 02 FF 
1be9c     00 FA 45 F5 | 	or	result1, ##70254592
1bea0     44 00 00 FF 
1bea4     14 E4 05 F1 | 	add	objptr, ##34836
1bea8     F2 FA 61 FC | 	wrlong	result1, objptr
1beac     44 00 00 FF 
1beb0     14 E4 85 F1 | 	sub	objptr, ##34836
1beb4     F2 FA 01 F6 | 	mov	result1, objptr
1beb8     00 20 02 FF 
1bebc     00 FA 45 F5 | 	or	result1, ##71303168
1bec0     44 00 00 FF 
1bec4     10 E4 05 F1 | 	add	objptr, ##34832
1bec8     F2 FA 61 FC | 	wrlong	result1, objptr
1becc     44 00 00 FF 
1bed0     10 E4 85 F1 | 	sub	objptr, ##34832
1bed4     F2 FA 01 F6 | 	mov	result1, objptr
1bed8     00 28 02 FF 
1bedc     00 FA 45 F5 | 	or	result1, ##72351744
1bee0     44 00 00 FF 
1bee4     1C E4 05 F1 | 	add	objptr, ##34844
1bee8     F2 FA 61 FC | 	wrlong	result1, objptr
1beec     44 00 00 FF 
1bef0     1C E4 85 F1 | 	sub	objptr, ##34844
1bef4     F2 FA 01 F6 | 	mov	result1, objptr
1bef8     00 30 02 FF 
1befc     00 FA 45 F5 | 	or	result1, ##73400320
1bf00     44 00 00 FF 
1bf04     20 E4 05 F1 | 	add	objptr, ##34848
1bf08     F2 FA 61 FC | 	wrlong	result1, objptr
1bf0c     44 00 00 FF 
1bf10     20 E4 85 F1 | 	sub	objptr, ##34848
1bf14     F2 FA 01 F6 | 	mov	result1, objptr
1bf18     00 38 02 FF 
1bf1c     00 FA 45 F5 | 	or	result1, ##74448896
1bf20     43 00 00 FF 
1bf24     B4 E4 05 F1 | 	add	objptr, ##34484
1bf28     F2 FA 61 FC | 	wrlong	result1, objptr
1bf2c     43 00 00 FF 
1bf30     B4 E4 85 F1 | 	sub	objptr, ##34484
1bf34     F2 FA 01 F6 | 	mov	result1, objptr
1bf38     00 40 02 FF 
1bf3c     00 FA 45 F5 | 	or	result1, ##75497472
1bf40     44 00 00 FF 
1bf44     38 E4 05 F1 | 	add	objptr, ##34872
1bf48     F2 FA 61 FC | 	wrlong	result1, objptr
1bf4c     44 00 00 FF 
1bf50     38 E4 85 F1 | 	sub	objptr, ##34872
1bf54     F2 FA 01 F6 | 	mov	result1, objptr
1bf58     00 48 02 FF 
1bf5c     00 FA 45 F5 | 	or	result1, ##76546048
1bf60     44 00 00 FF 
1bf64     48 E4 05 F1 | 	add	objptr, ##34888
1bf68     F2 FA 61 FC | 	wrlong	result1, objptr
1bf6c     44 00 00 FF 
1bf70     48 E4 85 F1 | 	sub	objptr, ##34888
1bf74     F2 FA 01 F6 | 	mov	result1, objptr
1bf78     00 50 02 FF 
1bf7c     00 FA 45 F5 | 	or	result1, ##77594624
1bf80     44 00 00 FF 
1bf84     4C E4 05 F1 | 	add	objptr, ##34892
1bf88     F2 FA 61 FC | 	wrlong	result1, objptr
1bf8c     44 00 00 FF 
1bf90     4C E4 85 F1 | 	sub	objptr, ##34892
1bf94     F2 FA 01 F6 | 	mov	result1, objptr
1bf98     00 58 02 FF 
1bf9c     00 FA 45 F5 | 	or	result1, ##78643200
1bfa0     44 00 00 FF 
1bfa4     44 E4 05 F1 | 	add	objptr, ##34884
1bfa8     F2 FA 61 FC | 	wrlong	result1, objptr
1bfac     44 00 00 FF 
1bfb0     44 E4 85 F1 | 	sub	objptr, ##34884
1bfb4     F2 FA 01 F6 | 	mov	result1, objptr
1bfb8     00 60 02 FF 
1bfbc     00 FA 45 F5 | 	or	result1, ##79691776
1bfc0     44 00 00 FF 
1bfc4     3C E4 05 F1 | 	add	objptr, ##34876
1bfc8     F2 FA 61 FC | 	wrlong	result1, objptr
1bfcc     44 00 00 FF 
1bfd0     3C E4 85 F1 | 	sub	objptr, ##34876
1bfd4     F2 FA 01 F6 | 	mov	result1, objptr
1bfd8     00 68 02 FF 
1bfdc     00 FA 45 F5 | 	or	result1, ##80740352
1bfe0     44 00 00 FF 
1bfe4     40 E4 05 F1 | 	add	objptr, ##34880
1bfe8     F2 FA 61 FC | 	wrlong	result1, objptr
1bfec     44 00 00 FF 
1bff0     40 E4 85 F1 | 	sub	objptr, ##34880
1bff4     F2 FA 01 F6 | 	mov	result1, objptr
1bff8     00 70 02 FF 
1bffc     00 FA 45 F5 | 	or	result1, ##81788928
1c000     44 00 00 FF 
1c004     50 E4 05 F1 | 	add	objptr, ##34896
1c008     F2 FA 61 FC | 	wrlong	result1, objptr
1c00c     44 00 00 FF 
1c010     50 E4 85 F1 | 	sub	objptr, ##34896
1c014     F2 FA 01 F6 | 	mov	result1, objptr
1c018     00 78 02 FF 
1c01c     00 FA 45 F5 | 	or	result1, ##82837504
1c020     44 00 00 FF 
1c024     54 E4 05 F1 | 	add	objptr, ##34900
1c028     F2 FA 61 FC | 	wrlong	result1, objptr
1c02c     44 00 00 FF 
1c030     54 E4 85 F1 | 	sub	objptr, ##34900
1c034     F2 FA 01 F6 | 	mov	result1, objptr
1c038     00 80 02 FF 
1c03c     00 FA 45 F5 | 	or	result1, ##83886080
1c040     44 00 00 FF 
1c044     58 E4 05 F1 | 	add	objptr, ##34904
1c048     F2 FA 61 FC | 	wrlong	result1, objptr
1c04c     44 00 00 FF 
1c050     58 E4 85 F1 | 	sub	objptr, ##34904
1c054     F2 FA 01 F6 | 	mov	result1, objptr
1c058     00 88 02 FF 
1c05c     00 FA 45 F5 | 	or	result1, ##84934656
1c060     44 00 00 FF 
1c064     5C E4 05 F1 | 	add	objptr, ##34908
1c068     F2 FA 61 FC | 	wrlong	result1, objptr
1c06c     44 00 00 FF 
1c070     5C E4 85 F1 | 	sub	objptr, ##34908
1c074     F2 FA 01 F6 | 	mov	result1, objptr
1c078     00 90 02 FF 
1c07c     00 FA 45 F5 | 	or	result1, ##85983232
1c080     44 00 00 FF 
1c084     60 E4 05 F1 | 	add	objptr, ##34912
1c088     F2 FA 61 FC | 	wrlong	result1, objptr
1c08c     44 00 00 FF 
1c090     60 E4 85 F1 | 	sub	objptr, ##34912
1c094     F2 FA 01 F6 | 	mov	result1, objptr
1c098     00 98 02 FF 
1c09c     00 FA 45 F5 | 	or	result1, ##87031808
1c0a0     44 00 00 FF 
1c0a4     64 E4 05 F1 | 	add	objptr, ##34916
1c0a8     F2 FA 61 FC | 	wrlong	result1, objptr
1c0ac     44 00 00 FF 
1c0b0     64 E4 85 F1 | 	sub	objptr, ##34916
1c0b4     F2 FA 01 F6 | 	mov	result1, objptr
1c0b8     00 A0 02 FF 
1c0bc     00 FA 45 F5 | 	or	result1, ##88080384
1c0c0     44 00 00 FF 
1c0c4     68 E4 05 F1 | 	add	objptr, ##34920
1c0c8     F2 FA 61 FC | 	wrlong	result1, objptr
1c0cc     44 00 00 FF 
1c0d0     68 E4 85 F1 | 	sub	objptr, ##34920
1c0d4     F2 FA 01 F6 | 	mov	result1, objptr
1c0d8     00 A8 02 FF 
1c0dc     00 FA 45 F5 | 	or	result1, ##89128960
1c0e0     44 00 00 FF 
1c0e4     6C E4 05 F1 | 	add	objptr, ##34924
1c0e8     F2 FA 61 FC | 	wrlong	result1, objptr
1c0ec     44 00 00 FF 
1c0f0     6C E4 85 F1 | 	sub	objptr, ##34924
1c0f4     F2 FA 01 F6 | 	mov	result1, objptr
1c0f8     00 B0 02 FF 
1c0fc     00 FA 45 F5 | 	or	result1, ##90177536
1c100     44 00 00 FF 
1c104     78 E4 05 F1 | 	add	objptr, ##34936
1c108     F2 FA 61 FC | 	wrlong	result1, objptr
1c10c     44 00 00 FF 
1c110     78 E4 85 F1 | 	sub	objptr, ##34936
1c114     F2 FA 01 F6 | 	mov	result1, objptr
1c118     00 B8 02 FF 
1c11c     00 FA 45 F5 | 	or	result1, ##91226112
1c120     44 00 00 FF 
1c124     70 E4 05 F1 | 	add	objptr, ##34928
1c128     F2 FA 61 FC | 	wrlong	result1, objptr
1c12c     44 00 00 FF 
1c130     70 E4 85 F1 | 	sub	objptr, ##34928
1c134     F2 FA 01 F6 | 	mov	result1, objptr
1c138     00 C0 02 FF 
1c13c     00 FA 45 F5 | 	or	result1, ##92274688
1c140     44 00 00 FF 
1c144     74 E4 05 F1 | 	add	objptr, ##34932
1c148     F2 FA 61 FC | 	wrlong	result1, objptr
1c14c     44 00 00 FF 
1c150     74 E4 85 F1 | 	sub	objptr, ##34932
1c154     F2 FA 01 F6 | 	mov	result1, objptr
1c158     00 C8 02 FF 
1c15c     00 FA 45 F5 | 	or	result1, ##93323264
1c160     44 00 00 FF 
1c164     7C E4 05 F1 | 	add	objptr, ##34940
1c168     F2 FA 61 FC | 	wrlong	result1, objptr
1c16c     44 00 00 FF 
1c170     7C E4 85 F1 | 	sub	objptr, ##34940
1c174     F2 FA 01 F6 | 	mov	result1, objptr
1c178     00 D0 02 FF 
1c17c     00 FA 45 F5 | 	or	result1, ##94371840
1c180     44 00 00 FF 
1c184     24 E4 05 F1 | 	add	objptr, ##34852
1c188     F2 FA 61 FC | 	wrlong	result1, objptr
1c18c     44 00 00 FF 
1c190     24 E4 85 F1 | 	sub	objptr, ##34852
1c194     F2 FA 01 F6 | 	mov	result1, objptr
1c198     00 D8 02 FF 
1c19c     00 FA 45 F5 | 	or	result1, ##95420416
1c1a0     44 00 00 FF 
1c1a4     2C E4 05 F1 | 	add	objptr, ##34860
1c1a8     F2 FA 61 FC | 	wrlong	result1, objptr
1c1ac     44 00 00 FF 
1c1b0     2C E4 85 F1 | 	sub	objptr, ##34860
1c1b4     F2 FA 01 F6 | 	mov	result1, objptr
1c1b8     00 E0 02 FF 
1c1bc     00 FA 45 F5 | 	or	result1, ##96468992
1c1c0     44 00 00 FF 
1c1c4     30 E4 05 F1 | 	add	objptr, ##34864
1c1c8     F2 FA 61 FC | 	wrlong	result1, objptr
1c1cc     44 00 00 FF 
1c1d0     30 E4 85 F1 | 	sub	objptr, ##34864
1c1d4     F2 FA 01 F6 | 	mov	result1, objptr
1c1d8     00 E8 02 FF 
1c1dc     00 FA 45 F5 | 	or	result1, ##97517568
1c1e0     44 00 00 FF 
1c1e4     80 E4 05 F1 | 	add	objptr, ##34944
1c1e8     F2 FA 61 FC | 	wrlong	result1, objptr
1c1ec     44 00 00 FF 
1c1f0     80 E4 85 F1 | 	sub	objptr, ##34944
1c1f4     F2 FA 01 F6 | 	mov	result1, objptr
1c1f8     00 F0 02 FF 
1c1fc     00 FA 45 F5 | 	or	result1, ##98566144
1c200     44 00 00 FF 
1c204     84 E4 05 F1 | 	add	objptr, ##34948
1c208     F2 FA 61 FC | 	wrlong	result1, objptr
1c20c     44 00 00 FF 
1c210     84 E4 85 F1 | 	sub	objptr, ##34948
1c214     F2 FA 01 F6 | 	mov	result1, objptr
1c218     00 F8 02 FF 
1c21c     00 FA 45 F5 | 	or	result1, ##99614720
1c220     44 00 00 FF 
1c224     88 E4 05 F1 | 	add	objptr, ##34952
1c228     F2 FA 61 FC | 	wrlong	result1, objptr
1c22c     44 00 00 FF 
1c230     88 E4 85 F1 | 	sub	objptr, ##34952
1c234     F2 FA 01 F6 | 	mov	result1, objptr
1c238     39 FA 25 F4 | 	bith	result1, #57
1c23c     44 00 00 FF 
1c240     34 E4 05 F1 | 	add	objptr, ##34868
1c244     F2 FA 61 FC | 	wrlong	result1, objptr
1c248     44 00 00 FF 
1c24c     34 E4 85 F1 | 	sub	objptr, ##34868
1c250     F2 FA 01 F6 | 	mov	result1, objptr
1c254     00 08 03 FF 
1c258     00 FA 45 F5 | 	or	result1, ##101711872
1c25c     44 00 00 FF 
1c260     98 E4 05 F1 | 	add	objptr, ##34968
1c264     F2 FA 61 FC | 	wrlong	result1, objptr
1c268     44 00 00 FF 
1c26c     98 E4 85 F1 | 	sub	objptr, ##34968
1c270     F2 FA 01 F6 | 	mov	result1, objptr
1c274     00 10 03 FF 
1c278     00 FA 45 F5 | 	or	result1, ##102760448
1c27c     44 00 00 FF 
1c280     A0 E4 05 F1 | 	add	objptr, ##34976
1c284     F2 FA 61 FC | 	wrlong	result1, objptr
1c288     44 00 00 FF 
1c28c     A0 E4 85 F1 | 	sub	objptr, ##34976
1c290     F2 FA 01 F6 | 	mov	result1, objptr
1c294     00 18 03 FF 
1c298     00 FA 45 F5 | 	or	result1, ##103809024
1c29c     44 00 00 FF 
1c2a0     94 E4 05 F1 | 	add	objptr, ##34964
1c2a4     F2 FA 61 FC | 	wrlong	result1, objptr
1c2a8     44 00 00 FF 
1c2ac     94 E4 85 F1 | 	sub	objptr, ##34964
1c2b0     F2 FA 01 F6 | 	mov	result1, objptr
1c2b4     00 20 03 FF 
1c2b8     00 FA 45 F5 | 	or	result1, ##104857600
1c2bc     44 00 00 FF 
1c2c0     90 E4 05 F1 | 	add	objptr, ##34960
1c2c4     F2 FA 61 FC | 	wrlong	result1, objptr
1c2c8     44 00 00 FF 
1c2cc     90 E4 85 F1 | 	sub	objptr, ##34960
1c2d0     F2 FA 01 F6 | 	mov	result1, objptr
1c2d4     00 28 03 FF 
1c2d8     00 FA 45 F5 | 	or	result1, ##105906176
1c2dc     44 00 00 FF 
1c2e0     8C E4 05 F1 | 	add	objptr, ##34956
1c2e4     F2 FA 61 FC | 	wrlong	result1, objptr
1c2e8     44 00 00 FF 
1c2ec     8C E4 85 F1 | 	sub	objptr, ##34956
1c2f0     F2 FA 01 F6 | 	mov	result1, objptr
1c2f4     00 30 03 FF 
1c2f8     00 FA 45 F5 | 	or	result1, ##106954752
1c2fc     44 00 00 FF 
1c300     9C E4 05 F1 | 	add	objptr, ##34972
1c304     F2 FA 61 FC | 	wrlong	result1, objptr
1c308     44 00 00 FF 
1c30c     9C E4 85 F1 | 	sub	objptr, ##34972
1c310     F2 FA 01 F6 | 	mov	result1, objptr
1c314     00 38 03 FF 
1c318     00 FA 45 F5 | 	or	result1, ##108003328
1c31c     44 00 00 FF 
1c320     A4 E4 05 F1 | 	add	objptr, ##34980
1c324     F2 FA 61 FC | 	wrlong	result1, objptr
1c328     44 00 00 FF 
1c32c     A4 E4 85 F1 | 	sub	objptr, ##34980
1c330     F2 FA 01 F6 | 	mov	result1, objptr
1c334     00 40 03 FF 
1c338     00 FA 45 F5 | 	or	result1, ##109051904
1c33c     44 00 00 FF 
1c340     A8 E4 05 F1 | 	add	objptr, ##34984
1c344     F2 FA 61 FC | 	wrlong	result1, objptr
1c348     44 00 00 FF 
1c34c     A8 E4 85 F1 | 	sub	objptr, ##34984
1c350     F2 FA 01 F6 | 	mov	result1, objptr
1c354     00 48 03 FF 
1c358     00 FA 45 F5 | 	or	result1, ##110100480
1c35c     44 00 00 FF 
1c360     AC E4 05 F1 | 	add	objptr, ##34988
1c364     F2 FA 61 FC | 	wrlong	result1, objptr
1c368     44 00 00 FF 
1c36c     AC E4 85 F1 | 	sub	objptr, ##34988
1c370     F2 FA 01 F6 | 	mov	result1, objptr
1c374     00 50 03 FF 
1c378     00 FA 45 F5 | 	or	result1, ##111149056
1c37c     44 00 00 FF 
1c380     B4 E4 05 F1 | 	add	objptr, ##34996
1c384     F2 FA 61 FC | 	wrlong	result1, objptr
1c388     44 00 00 FF 
1c38c     B4 E4 85 F1 | 	sub	objptr, ##34996
1c390     F2 FA 01 F6 | 	mov	result1, objptr
1c394     00 58 03 FF 
1c398     00 FA 45 F5 | 	or	result1, ##112197632
1c39c     44 00 00 FF 
1c3a0     B8 E4 05 F1 | 	add	objptr, ##35000
1c3a4     F2 FA 61 FC | 	wrlong	result1, objptr
1c3a8     44 00 00 FF 
1c3ac     B8 E4 85 F1 | 	sub	objptr, ##35000
1c3b0     F2 FA 01 F6 | 	mov	result1, objptr
1c3b4     00 60 03 FF 
1c3b8     00 FA 45 F5 | 	or	result1, ##113246208
1c3bc     44 00 00 FF 
1c3c0     BC E4 05 F1 | 	add	objptr, ##35004
1c3c4     F2 FA 61 FC | 	wrlong	result1, objptr
1c3c8     44 00 00 FF 
1c3cc     BC E4 85 F1 | 	sub	objptr, ##35004
1c3d0     F2 FA 01 F6 | 	mov	result1, objptr
1c3d4     00 68 03 FF 
1c3d8     00 FA 45 F5 | 	or	result1, ##114294784
1c3dc     44 00 00 FF 
1c3e0     C0 E4 05 F1 | 	add	objptr, ##35008
1c3e4     F2 FA 61 FC | 	wrlong	result1, objptr
1c3e8     44 00 00 FF 
1c3ec     C0 E4 85 F1 | 	sub	objptr, ##35008
1c3f0     F2 FA 01 F6 | 	mov	result1, objptr
1c3f4     00 70 03 FF 
1c3f8     00 FA 45 F5 | 	or	result1, ##115343360
1c3fc     44 00 00 FF 
1c400     C4 E4 05 F1 | 	add	objptr, ##35012
1c404     F2 FA 61 FC | 	wrlong	result1, objptr
1c408     44 00 00 FF 
1c40c     C4 E4 85 F1 | 	sub	objptr, ##35012
1c410     F2 FA 01 F6 | 	mov	result1, objptr
1c414     00 78 03 FF 
1c418     00 FA 45 F5 | 	or	result1, ##116391936
1c41c     44 00 00 FF 
1c420     C8 E4 05 F1 | 	add	objptr, ##35016
1c424     F2 FA 61 FC | 	wrlong	result1, objptr
1c428     44 00 00 FF 
1c42c     C8 E4 85 F1 | 	sub	objptr, ##35016
1c430     F2 FA 01 F6 | 	mov	result1, objptr
1c434     00 08 01 FF 
1c438     00 FA 45 F5 | 	or	result1, ##34603008
1c43c     44 00 00 FF 
1c440     CC E4 05 F1 | 	add	objptr, ##35020
1c444     F2 FA 61 FC | 	wrlong	result1, objptr
1c448     44 00 00 FF 
1c44c     CC E4 85 F1 | 	sub	objptr, ##35020
1c450     F2 FA 01 F6 | 	mov	result1, objptr
1c454     58 FA 25 F4 | 	bith	result1, #88
1c458     44 00 00 FF 
1c45c     D0 E4 05 F1 | 	add	objptr, ##35024
1c460     F2 FA 61 FC | 	wrlong	result1, objptr
1c464     44 00 00 FF 
1c468     D0 E4 85 F1 | 	sub	objptr, ##35024
1c46c     F2 FA 01 F6 | 	mov	result1, objptr
1c470     00 88 03 FF 
1c474     00 FA 45 F5 | 	or	result1, ##118489088
1c478     44 00 00 FF 
1c47c     B0 E4 05 F1 | 	add	objptr, ##34992
1c480     F2 FA 61 FC | 	wrlong	result1, objptr
1c484     44 00 00 FF 
1c488     B0 E4 85 F1 | 	sub	objptr, ##34992
1c48c     F2 FA 01 F6 | 	mov	result1, objptr
1c490     00 90 03 FF 
1c494     00 FA 45 F5 | 	or	result1, ##119537664
1c498     43 00 00 FF 
1c49c     A8 E4 05 F1 | 	add	objptr, ##34472
1c4a0     F2 FA 61 FC | 	wrlong	result1, objptr
1c4a4     43 00 00 FF 
1c4a8     A8 E4 85 F1 | 	sub	objptr, ##34472
1c4ac     F2 FA 01 F6 | 	mov	result1, objptr
1c4b0     00 98 03 FF 
1c4b4     00 FA 45 F5 | 	or	result1, ##120586240
1c4b8     44 00 00 FF 
1c4bc     D4 E4 05 F1 | 	add	objptr, ##35028
1c4c0     F2 FA 61 FC | 	wrlong	result1, objptr
1c4c4     44 00 00 FF 
1c4c8     D4 E4 85 F1 | 	sub	objptr, ##35028
1c4cc     F2 FA 01 F6 | 	mov	result1, objptr
1c4d0     00 A0 03 FF 
1c4d4     00 FA 45 F5 | 	or	result1, ##121634816
1c4d8     44 00 00 FF 
1c4dc     D8 E4 05 F1 | 	add	objptr, ##35032
1c4e0     F2 FA 61 FC | 	wrlong	result1, objptr
1c4e4     44 00 00 FF 
1c4e8     D8 E4 85 F1 | 	sub	objptr, ##35032
1c4ec     F2 FA 01 F6 | 	mov	result1, objptr
1c4f0     00 A8 03 FF 
1c4f4     00 FA 45 F5 | 	or	result1, ##122683392
1c4f8     44 00 00 FF 
1c4fc     EC E4 05 F1 | 	add	objptr, ##35052
1c500     F2 FA 61 FC | 	wrlong	result1, objptr
1c504     44 00 00 FF 
1c508     EC E4 85 F1 | 	sub	objptr, ##35052
1c50c     F2 FA 01 F6 | 	mov	result1, objptr
1c510     00 B0 03 FF 
1c514     00 FA 45 F5 | 	or	result1, ##123731968
1c518     44 00 00 FF 
1c51c     E8 E4 05 F1 | 	add	objptr, ##35048
1c520     F2 FA 61 FC | 	wrlong	result1, objptr
1c524     44 00 00 FF 
1c528     E8 E4 85 F1 | 	sub	objptr, ##35048
1c52c     F2 FA 01 F6 | 	mov	result1, objptr
1c530     00 B8 03 FF 
1c534     00 FA 45 F5 | 	or	result1, ##124780544
1c538     44 00 00 FF 
1c53c     E0 E4 05 F1 | 	add	objptr, ##35040
1c540     F2 FA 61 FC | 	wrlong	result1, objptr
1c544     44 00 00 FF 
1c548     E0 E4 85 F1 | 	sub	objptr, ##35040
1c54c     F2 FA 01 F6 | 	mov	result1, objptr
1c550     77 FA 25 F4 | 	bith	result1, #119
1c554     44 00 00 FF 
1c558     DC E4 05 F1 | 	add	objptr, ##35036
1c55c     F2 FA 61 FC | 	wrlong	result1, objptr
1c560     44 00 00 FF 
1c564     DC E4 85 F1 | 	sub	objptr, ##35036
1c568     F2 FA 01 F6 | 	mov	result1, objptr
1c56c     00 C8 03 FF 
1c570     00 FA 45 F5 | 	or	result1, ##126877696
1c574     44 00 00 FF 
1c578     FC E4 05 F1 | 	add	objptr, ##35068
1c57c     F2 FA 61 FC | 	wrlong	result1, objptr
1c580     44 00 00 FF 
1c584     FC E4 85 F1 | 	sub	objptr, ##35068
1c588     F2 FA 01 F6 | 	mov	result1, objptr
1c58c     00 D0 03 FF 
1c590     00 FA 45 F5 | 	or	result1, ##127926272
1c594     44 00 00 FF 
1c598     F0 E4 05 F1 | 	add	objptr, ##35056
1c59c     F2 FA 61 FC | 	wrlong	result1, objptr
1c5a0     44 00 00 FF 
1c5a4     F0 E4 85 F1 | 	sub	objptr, ##35056
1c5a8     F2 FA 01 F6 | 	mov	result1, objptr
1c5ac     00 D8 03 FF 
1c5b0     00 FA 45 F5 | 	or	result1, ##128974848
1c5b4     44 00 00 FF 
1c5b8     F4 E4 05 F1 | 	add	objptr, ##35060
1c5bc     F2 FA 61 FC | 	wrlong	result1, objptr
1c5c0     44 00 00 FF 
1c5c4     F4 E4 85 F1 | 	sub	objptr, ##35060
1c5c8     F2 FA 01 F6 | 	mov	result1, objptr
1c5cc     96 FA 25 F4 | 	bith	result1, #150
1c5d0     44 00 00 FF 
1c5d4     F8 E4 05 F1 | 	add	objptr, ##35064
1c5d8     F2 FA 61 FC | 	wrlong	result1, objptr
1c5dc     44 00 00 FF 
1c5e0     F8 E4 85 F1 | 	sub	objptr, ##35064
1c5e4     F2 FA 01 F6 | 	mov	result1, objptr
1c5e8     00 E8 03 FF 
1c5ec     00 FA 45 F5 | 	or	result1, ##131072000
1c5f0     44 00 00 FF 
1c5f4     00 E5 05 F1 | 	add	objptr, ##35072
1c5f8     F2 FA 61 FC | 	wrlong	result1, objptr
1c5fc     44 00 00 FF 
1c600     00 E5 85 F1 | 	sub	objptr, ##35072
1c604     F2 FA 01 F6 | 	mov	result1, objptr
1c608     B5 FA 25 F4 | 	bith	result1, #181
1c60c     44 00 00 FF 
1c610     04 E5 05 F1 | 	add	objptr, ##35076
1c614     F2 FA 61 FC | 	wrlong	result1, objptr
1c618     44 00 00 FF 
1c61c     04 E5 85 F1 | 	sub	objptr, ##35076
1c620     F2 FA 01 F6 | 	mov	result1, objptr
1c624     D4 FA 25 F4 | 	bith	result1, #212
1c628     44 00 00 FF 
1c62c     08 E5 05 F1 | 	add	objptr, ##35080
1c630     F2 FA 61 FC | 	wrlong	result1, objptr
1c634     44 00 00 FF 
1c638     08 E5 85 F1 | 	sub	objptr, ##35080
1c63c     F2 FA 01 F6 | 	mov	result1, objptr
1c640     1B FA 25 F4 | 	bith	result1, #27
1c644     44 00 00 FF 
1c648     0C E5 05 F1 | 	add	objptr, ##35084
1c64c     F2 FA 61 FC | 	wrlong	result1, objptr
1c650     44 00 00 FF 
1c654     0C E5 85 F1 | 	sub	objptr, ##35084
1c658     F2 FA 01 F6 | 	mov	result1, objptr
1c65c     00 08 04 FF 
1c660     00 FA 45 F5 | 	or	result1, ##135266304
1c664     44 00 00 FF 
1c668     10 E5 05 F1 | 	add	objptr, ##35088
1c66c     F2 FA 61 FC | 	wrlong	result1, objptr
1c670     44 00 00 FF 
1c674     10 E5 85 F1 | 	sub	objptr, ##35088
1c678     F2 FA 01 F6 | 	mov	result1, objptr
1c67c     00 10 04 FF 
1c680     00 FA 45 F5 | 	or	result1, ##136314880
1c684     44 00 00 FF 
1c688     14 E5 05 F1 | 	add	objptr, ##35092
1c68c     F2 FA 61 FC | 	wrlong	result1, objptr
1c690     44 00 00 FF 
1c694     14 E5 85 F1 | 	sub	objptr, ##35092
1c698     F2 FA 01 F6 | 	mov	result1, objptr
1c69c     00 18 04 FF 
1c6a0     00 FA 45 F5 | 	or	result1, ##137363456
1c6a4     44 00 00 FF 
1c6a8     1C E5 05 F1 | 	add	objptr, ##35100
1c6ac     F2 FA 61 FC | 	wrlong	result1, objptr
1c6b0     44 00 00 FF 
1c6b4     1C E5 85 F1 | 	sub	objptr, ##35100
1c6b8     F2 FA 01 F6 | 	mov	result1, objptr
1c6bc     00 20 04 FF 
1c6c0     00 FA 45 F5 | 	or	result1, ##138412032
1c6c4     44 00 00 FF 
1c6c8     20 E5 05 F1 | 	add	objptr, ##35104
1c6cc     F2 FA 61 FC | 	wrlong	result1, objptr
1c6d0     44 00 00 FF 
1c6d4     20 E5 85 F1 | 	sub	objptr, ##35104
1c6d8     F2 FA 01 F6 | 	mov	result1, objptr
1c6dc     00 28 04 FF 
1c6e0     00 FA 45 F5 | 	or	result1, ##139460608
1c6e4     44 00 00 FF 
1c6e8     24 E5 05 F1 | 	add	objptr, ##35108
1c6ec     F2 FA 61 FC | 	wrlong	result1, objptr
1c6f0     44 00 00 FF 
1c6f4     24 E5 85 F1 | 	sub	objptr, ##35108
1c6f8     F2 FA 01 F6 | 	mov	result1, objptr
1c6fc     00 30 04 FF 
1c700     00 FA 45 F5 | 	or	result1, ##140509184
1c704     44 00 00 FF 
1c708     18 E5 05 F1 | 	add	objptr, ##35096
1c70c     F2 FA 61 FC | 	wrlong	result1, objptr
1c710     44 00 00 FF 
1c714     18 E5 85 F1 | 	sub	objptr, ##35096
1c718     F2 FA 01 F6 | 	mov	result1, objptr
1c71c     00 38 04 FF 
1c720     00 FA 45 F5 | 	or	result1, ##141557760
1c724     44 00 00 FF 
1c728     28 E5 05 F1 | 	add	objptr, ##35112
1c72c     F2 FA 61 FC | 	wrlong	result1, objptr
1c730     44 00 00 FF 
1c734     28 E5 85 F1 | 	sub	objptr, ##35112
1c738     F2 FA 01 F6 | 	mov	result1, objptr
1c73c     00 40 04 FF 
1c740     00 FA 45 F5 | 	or	result1, ##142606336
1c744     44 00 00 FF 
1c748     5C E5 05 F1 | 	add	objptr, ##35164
1c74c     F2 FA 61 FC | 	wrlong	result1, objptr
1c750     44 00 00 FF 
1c754     5C E5 85 F1 | 	sub	objptr, ##35164
1c758     F2 FA 01 F6 | 	mov	result1, objptr
1c75c     00 48 04 FF 
1c760     00 FA 45 F5 | 	or	result1, ##143654912
1c764     44 00 00 FF 
1c768     54 E5 05 F1 | 	add	objptr, ##35156
1c76c     F2 FA 61 FC | 	wrlong	result1, objptr
1c770     44 00 00 FF 
1c774     54 E5 85 F1 | 	sub	objptr, ##35156
1c778     F2 FA 01 F6 | 	mov	result1, objptr
1c77c     00 50 04 FF 
1c780     00 FA 45 F5 | 	or	result1, ##144703488
1c784     44 00 00 FF 
1c788     2C E5 05 F1 | 	add	objptr, ##35116
1c78c     F2 FA 61 FC | 	wrlong	result1, objptr
1c790     44 00 00 FF 
1c794     2C E5 85 F1 | 	sub	objptr, ##35116
1c798     F2 FA 01 F6 | 	mov	result1, objptr
1c79c     00 58 04 FF 
1c7a0     00 FA 45 F5 | 	or	result1, ##145752064
1c7a4     44 00 00 FF 
1c7a8     30 E5 05 F1 | 	add	objptr, ##35120
1c7ac     F2 FA 61 FC | 	wrlong	result1, objptr
1c7b0     44 00 00 FF 
1c7b4     30 E5 85 F1 | 	sub	objptr, ##35120
1c7b8     F2 FA 01 F6 | 	mov	result1, objptr
1c7bc     00 60 04 FF 
1c7c0     00 FA 45 F5 | 	or	result1, ##146800640
1c7c4     44 00 00 FF 
1c7c8     4C E5 05 F1 | 	add	objptr, ##35148
1c7cc     F2 FA 61 FC | 	wrlong	result1, objptr
1c7d0     44 00 00 FF 
1c7d4     4C E5 85 F1 | 	sub	objptr, ##35148
1c7d8     F2 FA 01 F6 | 	mov	result1, objptr
1c7dc     00 68 04 FF 
1c7e0     00 FA 45 F5 | 	or	result1, ##147849216
1c7e4     44 00 00 FF 
1c7e8     50 E5 05 F1 | 	add	objptr, ##35152
1c7ec     F2 FA 61 FC | 	wrlong	result1, objptr
1c7f0     44 00 00 FF 
1c7f4     50 E5 85 F1 | 	sub	objptr, ##35152
1c7f8                 | _init_commands_ret
1c7f8     2D 00 64 FD | 	ret
1c7fc                 | 
1c7fc                 | ' 
1c7fc                 | ' ''--------------------------------Error strings -------------------------------------
1c7fc                 | ' sub init_audio
1c7fc                 | _init_audio
1c7fc     06 4A 05 F6 | 	mov	COUNT_, #6
1c800     A8 00 A0 FD | 	call	#pushregs_
1c804     00 C0 1F FF 
1c808     00 1E 06 F6 | 	mov	local01, ##1065353216
1c80c                 | ' 
1c80c                 | ' for i=0 to 1023 : psdpoke       2*i,round(32600*sin(i*3.1415926535/512.0)) : next i               		' 0 : sinewave  
1c80c     00 20 06 F6 | 	mov	local02, #0
1c810                 | LR__2320
1c810     10 23 02 F6 | 	mov	local03, local02
1c814     01 22 66 F0 | 	shl	local03, #1
1c818     58 7F 23 FF 
1c81c     00 24 06 F6 | 	mov	local04, ##1191096320
1c820     10 13 52 F6 | 	abs	arg01, local02 wc
1c824     1F 26 C6 C9 |  if_b	decod	local05, #31
1c828     00 26 06 36 |  if_ae	mov	local05, #0
1c82c     E4 68 B0 FD | 	call	#__system___float_fromuns
1c830     13 FB 61 F5 | 	xor	result1, local05
1c834     FD 12 02 F6 | 	mov	arg01, result1
1c838     87 24 20 FF 
1c83c     DB 15 06 F6 | 	mov	arg02, ##1078530011
1c840     D4 6C B0 FD | 	call	#__system___float_mul
1c844     FD 12 02 F6 | 	mov	arg01, result1
1c848     00 00 22 FF 
1c84c     00 14 06 F6 | 	mov	arg02, ##1140850688
1c850     C8 6E B0 FD | 	call	#__system___float_div
1c854     FD 12 02 F6 | 	mov	arg01, result1
1c858     1C 76 B0 FD | 	call	#__system____builtin_sinf
1c85c     FD 14 02 F6 | 	mov	arg02, result1
1c860     12 13 02 F6 | 	mov	arg01, local04
1c864     B0 6C B0 FD | 	call	#__system___float_mul
1c868     FD 12 02 F6 | 	mov	arg01, result1
1c86c     01 14 06 F6 | 	mov	arg02, #1
1c870     6C 71 B0 FD | 	call	#__system___float_tointeger
1c874     FD 14 02 F6 | 	mov	arg02, result1
1c878     11 13 02 F6 | 	mov	arg01, local03
1c87c     00 0D B0 FD | 	call	#_psdpoke
1c880     01 20 06 F1 | 	add	local02, #1
1c884     02 00 00 FF 
1c888     00 20 56 F2 | 	cmps	local02, ##1024 wc
1c88c     80 FF 9F CD |  if_b	jmp	#LR__2320
1c890                 | ' for i=0 to 511  : psdpoke  2048+2*i, -32512+127*i: psdpoke 2048+2*(512+i),32512-127*i : next i   		' 1 : triangle 
1c890     00 20 06 F6 | 	mov	local02, #0
1c894                 | LR__2321
1c894     10 15 02 F6 | 	mov	arg02, local02
1c898     01 14 66 F0 | 	shl	arg02, #1
1c89c     0B 12 C6 F9 | 	decod	arg01, #11
1c8a0     0A 13 02 F1 | 	add	arg01, arg02
1c8a4     10 25 02 F6 | 	mov	local04, local02
1c8a8     07 24 66 F0 | 	shl	local04, #7
1c8ac     10 25 82 F1 | 	sub	local04, local02
1c8b0     C0 FF 7F FF 
1c8b4     00 15 06 F6 | 	mov	arg02, ##-32512
1c8b8     12 15 02 F1 | 	add	arg02, local04
1c8bc     C0 0C B0 FD | 	call	#_psdpoke
1c8c0     09 24 C6 F9 | 	decod	local04, #9
1c8c4     10 25 02 F1 | 	add	local04, local02
1c8c8     01 24 66 F0 | 	shl	local04, #1
1c8cc     0B 12 C6 F9 | 	decod	arg01, #11
1c8d0     12 13 02 F1 | 	add	arg01, local04
1c8d4     10 27 02 F6 | 	mov	local05, local02
1c8d8     07 26 66 F0 | 	shl	local05, #7
1c8dc     10 27 82 F1 | 	sub	local05, local02
1c8e0     3F 00 00 FF 
1c8e4     00 15 06 F6 | 	mov	arg02, ##32512
1c8e8     13 15 82 F1 | 	sub	arg02, local05
1c8ec     90 0C B0 FD | 	call	#_psdpoke
1c8f0     01 20 06 F1 | 	add	local02, #1
1c8f4     01 00 00 FF 
1c8f8     00 20 56 F2 | 	cmps	local02, ##512 wc
1c8fc     94 FF 9F CD |  if_b	jmp	#LR__2321
1c900                 | ' for i=0 to 1023 : psdpoke  4096+2*i, -32256+63*i : next i 							' 2 saw 4 sqr 8 noise 3567 
1c900     00 20 06 F6 | 	mov	local02, #0
1c904                 | LR__2322
1c904     10 27 02 F6 | 	mov	local05, local02
1c908     01 26 66 F0 | 	shl	local05, #1
1c90c     0C 12 C6 F9 | 	decod	arg01, #12
1c910     13 13 02 F1 | 	add	arg01, local05
1c914     10 27 02 F6 | 	mov	local05, local02
1c918     06 26 66 F0 | 	shl	local05, #6
1c91c     10 27 82 F1 | 	sub	local05, local02
1c920     C1 FF 7F FF 
1c924     00 14 06 F6 | 	mov	arg02, ##-32256
1c928     13 15 02 F1 | 	add	arg02, local05
1c92c     50 0C B0 FD | 	call	#_psdpoke
1c930     01 20 06 F1 | 	add	local02, #1
1c934     02 00 00 FF 
1c938     00 20 56 F2 | 	cmps	local02, ##1024 wc
1c93c     C4 FF 9F CD |  if_b	jmp	#LR__2322
1c940                 | ' for i=0 to 127  : psdpoke  6144+2*i, -32600 : next i : for i=128 to 1023 :  psdpoke 6144+2*i, 32600 : next i 	' 3 pulse 12.5%
1c940     00 20 06 F6 | 	mov	local02, #0
1c944                 | LR__2323
1c944     10 27 02 F6 | 	mov	local05, local02
1c948     01 26 66 F0 | 	shl	local05, #1
1c94c     0C 00 00 FF 
1c950     00 12 06 F6 | 	mov	arg01, ##6144
1c954     13 13 02 F1 | 	add	arg01, local05
1c958     C0 FF 7F FF 
1c95c     A8 14 06 F6 | 	mov	arg02, ##-32600
1c960     1C 0C B0 FD | 	call	#_psdpoke
1c964     01 20 06 F1 | 	add	local02, #1
1c968     80 20 56 F2 | 	cmps	local02, #128 wc
1c96c     D4 FF 9F CD |  if_b	jmp	#LR__2323
1c970     80 20 06 F6 | 	mov	local02, #128
1c974                 | LR__2324
1c974     10 27 02 F6 | 	mov	local05, local02
1c978     01 26 66 F0 | 	shl	local05, #1
1c97c     0C 00 00 FF 
1c980     00 12 06 F6 | 	mov	arg01, ##6144
1c984     13 13 02 F1 | 	add	arg01, local05
1c988     3F 00 00 FF 
1c98c     58 15 06 F6 | 	mov	arg02, ##32600
1c990     EC 0B B0 FD | 	call	#_psdpoke
1c994     01 20 06 F1 | 	add	local02, #1
1c998     02 00 00 FF 
1c99c     00 20 16 F2 | 	cmp	local02, ##1024 wc
1c9a0     D0 FF 9F CD |  if_b	jmp	#LR__2324
1c9a4                 | ' for i=0 to 511  : psdpoke  8192+2*i, -32600 : next i : for i=512 to 1023 :  psdpoke 8192+2*i, 32600 : next i 	' 4 square
1c9a4     00 20 06 F6 | 	mov	local02, #0
1c9a8                 | LR__2325
1c9a8     10 27 02 F6 | 	mov	local05, local02
1c9ac     01 26 66 F0 | 	shl	local05, #1
1c9b0     0D 12 C6 F9 | 	decod	arg01, #13
1c9b4     13 13 02 F1 | 	add	arg01, local05
1c9b8     C0 FF 7F FF 
1c9bc     A8 14 06 F6 | 	mov	arg02, ##-32600
1c9c0     BC 0B B0 FD | 	call	#_psdpoke
1c9c4     01 20 06 F1 | 	add	local02, #1
1c9c8     01 00 00 FF 
1c9cc     00 20 56 F2 | 	cmps	local02, ##512 wc
1c9d0     D4 FF 9F CD |  if_b	jmp	#LR__2325
1c9d4     09 20 C6 F9 | 	decod	local02, #9
1c9d8                 | LR__2326
1c9d8     10 27 02 F6 | 	mov	local05, local02
1c9dc     01 26 66 F0 | 	shl	local05, #1
1c9e0     0D 12 C6 F9 | 	decod	arg01, #13
1c9e4     13 13 02 F1 | 	add	arg01, local05
1c9e8     3F 00 00 FF 
1c9ec     58 15 06 F6 | 	mov	arg02, ##32600
1c9f0     8C 0B B0 FD | 	call	#_psdpoke
1c9f4     01 20 06 F1 | 	add	local02, #1
1c9f8     02 00 00 FF 
1c9fc     00 20 16 F2 | 	cmp	local02, ##1024 wc
1ca00     D4 FF 9F CD |  if_b	jmp	#LR__2326
1ca04                 | ' for i=0 to 255  : psdpoke 10240+2*i, -32600 : next i : for i=256 to 1023 : psdpoke 10240+2*i, 32600 : next i 	' 5 pulse 25%
1ca04     00 20 06 F6 | 	mov	local02, #0
1ca08                 | LR__2327
1ca08     10 27 02 F6 | 	mov	local05, local02
1ca0c     01 26 66 F0 | 	shl	local05, #1
1ca10     14 00 00 FF 
1ca14     00 12 06 F6 | 	mov	arg01, ##10240
1ca18     13 13 02 F1 | 	add	arg01, local05
1ca1c     C0 FF 7F FF 
1ca20     A8 14 06 F6 | 	mov	arg02, ##-32600
1ca24     58 0B B0 FD | 	call	#_psdpoke
1ca28     01 20 06 F1 | 	add	local02, #1
1ca2c     00 21 56 F2 | 	cmps	local02, #256 wc
1ca30     D4 FF 9F CD |  if_b	jmp	#LR__2327
1ca34     00 21 06 F6 | 	mov	local02, #256
1ca38                 | LR__2328
1ca38     10 27 02 F6 | 	mov	local05, local02
1ca3c     01 26 66 F0 | 	shl	local05, #1
1ca40     14 00 00 FF 
1ca44     00 12 06 F6 | 	mov	arg01, ##10240
1ca48     13 13 02 F1 | 	add	arg01, local05
1ca4c     3F 00 00 FF 
1ca50     58 15 06 F6 | 	mov	arg02, ##32600
1ca54     28 0B B0 FD | 	call	#_psdpoke
1ca58     01 20 06 F1 | 	add	local02, #1
1ca5c     02 00 00 FF 
1ca60     00 20 16 F2 | 	cmp	local02, ##1024 wc
1ca64     D0 FF 9F CD |  if_b	jmp	#LR__2328
1ca68                 | ' for i=12288 to 61436 step 4 : pslpoke i,0 : next i 
1ca68     18 00 00 FF 
1ca6c     00 20 06 F6 | 	mov	local02, ##12288
1ca70                 | LR__2329
1ca70     10 13 02 F6 | 	mov	arg01, local02
1ca74     00 14 06 F6 | 	mov	arg02, #0
1ca78     BC 0A B0 FD | 	call	#_pslpoke
1ca7c     04 20 06 F1 | 	add	local02, #4
1ca80     77 00 00 FF 
1ca84     FD 21 56 F2 | 	cmps	local02, ##61437 wc
1ca88     E4 FF 9F CD |  if_b	jmp	#LR__2329
1ca8c                 | ' for i=0 to 1023 : psdpoke 61440+2*i, dpeek(varptr(atari12)+16+2*i) : next i 				' 6 pokey waveform 12	
1ca8c     00 20 06 F6 | 	mov	local02, #0
1ca90                 | LR__2330
1ca90     10 27 02 F6 | 	mov	local05, local02
1ca94     01 26 66 F0 | 	shl	local05, #1
1ca98     78 00 00 FF 
1ca9c     00 22 06 F6 | 	mov	local03, ##61440
1caa0     13 23 02 F1 | 	add	local03, local05
1caa4     14 00 00 FF 
1caa8     C6 EA 05 F1 | 	add	ptr__dat__, ##10438
1caac     F5 12 02 F6 | 	mov	arg01, ptr__dat__
1cab0     14 00 00 FF 
1cab4     C6 EA 85 F1 | 	sub	ptr__dat__, ##10438
1cab8     10 12 06 F1 | 	add	arg01, #16
1cabc     10 15 02 F6 | 	mov	arg02, local02
1cac0     01 14 66 F0 | 	shl	arg02, #1
1cac4     0A 13 02 F1 | 	add	arg01, arg02
1cac8     09 15 E2 FA | 	rdword	arg02, arg01
1cacc     11 13 02 F6 | 	mov	arg01, local03
1cad0     AC 0A B0 FD | 	call	#_psdpoke
1cad4     01 20 06 F1 | 	add	local02, #1
1cad8     02 00 00 FF 
1cadc     00 20 56 F2 | 	cmps	local02, ##1024 wc
1cae0     AC FF 9F CD |  if_b	jmp	#LR__2330
1cae4                 | ' for i=0 to 1023 : psdpoke 63488+2*i, dpeek(varptr(atari2)+16+2*i) : next i 				' 7 pokey waveform 2	
1cae4     00 20 06 F6 | 	mov	local02, #0
1cae8                 | LR__2331
1cae8     10 27 02 F6 | 	mov	local05, local02
1caec     01 26 66 F0 | 	shl	local05, #1
1caf0     7C 00 00 FF 
1caf4     00 22 06 F6 | 	mov	local03, ##63488
1caf8     13 23 02 F1 | 	add	local03, local05
1cafc     10 00 00 FF 
1cb00     B6 EA 05 F1 | 	add	ptr__dat__, ##8374
1cb04     F5 12 02 F6 | 	mov	arg01, ptr__dat__
1cb08     10 00 00 FF 
1cb0c     B6 EA 85 F1 | 	sub	ptr__dat__, ##8374
1cb10     10 12 06 F1 | 	add	arg01, #16
1cb14     10 15 02 F6 | 	mov	arg02, local02
1cb18     01 14 66 F0 | 	shl	arg02, #1
1cb1c     0A 13 02 F1 | 	add	arg01, arg02
1cb20     09 15 E2 FA | 	rdword	arg02, arg01
1cb24     11 13 02 F6 | 	mov	arg01, local03
1cb28     54 0A B0 FD | 	call	#_psdpoke
1cb2c     01 20 06 F1 | 	add	local02, #1
1cb30     02 00 00 FF 
1cb34     00 20 56 F2 | 	cmps	local02, ##1024 wc
1cb38     AC FF 9F CD |  if_b	jmp	#LR__2331
1cb3c                 | ' 
1cb3c                 | ' 
1cb3c                 | ' for i=0 to 255 : envbuf(0,i)=65280-256*i : next i							' instant attack, linear release	
1cb3c     00 20 06 F6 | 	mov	local02, #0
1cb40     0C 00 00 FF 
1cb44     D8 E4 05 F1 | 	add	objptr, ##6360
1cb48     97 18 48 FB | 	callpa	#(@LR__2333-@LR__2332)>>2,fcache_load_ptr_
1cb4c                 | LR__2332
1cb4c     10 27 02 F6 | 	mov	local05, local02
1cb50     01 26 66 F0 | 	shl	local05, #1
1cb54     F2 26 02 F1 | 	add	local05, objptr
1cb58     10 23 02 F6 | 	mov	local03, local02
1cb5c     08 22 66 F0 | 	shl	local03, #8
1cb60     7F 00 00 FF 
1cb64     00 29 06 F6 | 	mov	local06, ##65280
1cb68     11 29 82 F1 | 	sub	local06, local03
1cb6c     13 29 52 FC | 	wrword	local06, local05
1cb70     01 20 06 F1 | 	add	local02, #1
1cb74     00 21 56 F2 | 	cmps	local02, #256 wc
1cb78     D0 FF 9F CD |  if_b	jmp	#LR__2332
1cb7c                 | LR__2333
1cb7c     0C 00 00 FF 
1cb80     D8 E4 85 F1 | 	sub	objptr, ##6360
1cb84                 | ' for i=0 to 255 : envbuf(1,i)=round(65280.0*k) : k=k*0.975 :  next i : envbuf(1,255)=0			' instant attack, log release
1cb84     00 20 06 F6 | 	mov	local02, #0
1cb88                 | LR__2334
1cb88     10 27 02 F6 | 	mov	local05, local02
1cb8c     01 26 66 F0 | 	shl	local05, #1
1cb90     0D 00 00 FF 
1cb94     D8 E4 05 F1 | 	add	objptr, ##6872
1cb98     F2 26 02 F1 | 	add	local05, objptr
1cb9c     80 BF 23 FF 
1cba0     00 12 06 F6 | 	mov	arg01, ##1199505408
1cba4     0F 15 02 F6 | 	mov	arg02, local01
1cba8     0D 00 00 FF 
1cbac     D8 E4 85 F1 | 	sub	objptr, ##6872
1cbb0     64 69 B0 FD | 	call	#__system___float_mul
1cbb4     FD 12 02 F6 | 	mov	arg01, result1
1cbb8     01 14 06 F6 | 	mov	arg02, #1
1cbbc     20 6E B0 FD | 	call	#__system___float_tointeger
1cbc0     13 FB 51 FC | 	wrword	result1, local05
1cbc4     0F 13 02 F6 | 	mov	arg01, local01
1cbc8     CC BC 1F FF 
1cbcc     9A 15 06 F6 | 	mov	arg02, ##1064933786
1cbd0     44 69 B0 FD | 	call	#__system___float_mul
1cbd4     FD 1E 02 F6 | 	mov	local01, result1
1cbd8     01 20 06 F1 | 	add	local02, #1
1cbdc     00 21 56 F2 | 	cmps	local02, #256 wc
1cbe0     A4 FF 9F CD |  if_b	jmp	#LR__2334
1cbe4     0E 00 00 FF 
1cbe8     D6 E4 05 F1 | 	add	objptr, ##7382
1cbec     F2 00 58 FC | 	wrword	#0, objptr
1cbf0                 | ' for i=0 to 254 : envbuf(2,i)=65280 : next i : envbuf(2,255)=0						' instant attack, instant release
1cbf0     00 20 06 F6 | 	mov	local02, #0
1cbf4     02 E4 05 F1 | 	add	objptr, #2
1cbf8     97 10 48 FB | 	callpa	#(@LR__2336-@LR__2335)>>2,fcache_load_ptr_
1cbfc                 | LR__2335
1cbfc     10 27 02 F6 | 	mov	local05, local02
1cc00     01 26 66 F0 | 	shl	local05, #1
1cc04     F2 26 02 F1 | 	add	local05, objptr
1cc08     7F 00 80 FF 
1cc0c     13 01 5A FC | 	wrword	##65280, local05
1cc10     01 20 06 F1 | 	add	local02, #1
1cc14     FF 20 56 F2 | 	cmps	local02, #255 wc
1cc18     E0 FF 9F CD |  if_b	jmp	#LR__2335
1cc1c                 | LR__2336
1cc1c     FE E5 05 F1 | 	add	objptr, #510
1cc20     F2 00 58 FC | 	wrword	#0, objptr
1cc24                 | ' for i=0 to 15 :  envbuf(3,i)=4096*i : next i 
1cc24     00 20 06 F6 | 	mov	local02, #0
1cc28     02 E4 05 F1 | 	add	objptr, #2
1cc2c     97 52 48 FB | 	callpa	#(@LR__2341-@LR__2337)>>2,fcache_load_ptr_
1cc30                 | LR__2337
1cc30     10 27 02 F6 | 	mov	local05, local02
1cc34     01 26 66 F0 | 	shl	local05, #1
1cc38     F2 26 02 F1 | 	add	local05, objptr
1cc3c     10 29 02 F6 | 	mov	local06, local02
1cc40     0C 28 66 F0 | 	shl	local06, #12
1cc44     13 29 52 FC | 	wrword	local06, local05
1cc48     01 20 06 F1 | 	add	local02, #1
1cc4c     10 20 56 F2 | 	cmps	local02, #16 wc
1cc50     DC FF 9F CD |  if_b	jmp	#LR__2337
1cc54                 | ' for i=16 to 239: envbuf(3,i)=65280 : next i
1cc54     10 20 06 F6 | 	mov	local02, #16
1cc58                 | LR__2338
1cc58     10 27 02 F6 | 	mov	local05, local02
1cc5c     01 26 66 F0 | 	shl	local05, #1
1cc60     F2 26 02 F1 | 	add	local05, objptr
1cc64     7F 00 80 FF 
1cc68     13 01 5A FC | 	wrword	##65280, local05
1cc6c     01 20 06 F1 | 	add	local02, #1
1cc70     F0 20 16 F2 | 	cmp	local02, #240 wc
1cc74     E0 FF 9F CD |  if_b	jmp	#LR__2338
1cc78                 | ' for i=240 to 255 : envbuf(3,i)=4096*(255-i) : next i							' smooth attack, smooth release
1cc78     F0 20 06 F6 | 	mov	local02, #240
1cc7c                 | LR__2339
1cc7c     10 27 02 F6 | 	mov	local05, local02
1cc80     01 26 66 F0 | 	shl	local05, #1
1cc84     F2 26 02 F1 | 	add	local05, objptr
1cc88     FF 22 06 F6 | 	mov	local03, #255
1cc8c     10 23 82 F1 | 	sub	local03, local02
1cc90     0C 22 66 F0 | 	shl	local03, #12
1cc94     13 23 52 FC | 	wrword	local03, local05
1cc98     01 20 06 F1 | 	add	local02, #1
1cc9c     00 21 16 F2 | 	cmp	local02, #256 wc
1cca0     D8 FF 9F CD |  if_b	jmp	#LR__2339
1cca4                 | ' for i=0 to 255 : envbuf(4,i)=256*i : next i : envbuf(4,255)=0						' slow attack, instant release
1cca4     00 20 06 F6 | 	mov	local02, #0
1cca8     01 00 00 FF 
1ccac     00 E4 05 F1 | 	add	objptr, ##512
1ccb0                 | LR__2340
1ccb0     10 27 02 F6 | 	mov	local05, local02
1ccb4     01 26 66 F0 | 	shl	local05, #1
1ccb8     F2 26 02 F1 | 	add	local05, objptr
1ccbc     10 29 02 F6 | 	mov	local06, local02
1ccc0     08 28 66 F0 | 	shl	local06, #8
1ccc4     13 29 52 FC | 	wrword	local06, local05
1ccc8     01 20 06 F1 | 	add	local02, #1
1cccc     00 21 56 F2 | 	cmps	local02, #256 wc
1ccd0     DC FF 9F CD |  if_b	jmp	#LR__2340
1ccd4                 | LR__2341
1ccd4     FE E5 05 F1 | 	add	objptr, #510
1ccd8     F2 00 58 FC | 	wrword	#0, objptr
1ccdc                 | ' for i=0 to 239 : envbuf(5,i)=272*i : next i : for i=240 to 255 : envbuf(5,i)=4096*(255-i) : next i	' slow attack, smooth release
1ccdc     00 20 06 F6 | 	mov	local02, #0
1cce0     02 E4 05 F1 | 	add	objptr, #2
1cce4     97 6A 48 FB | 	callpa	#(@LR__2346-@LR__2342)>>2,fcache_load_ptr_
1cce8                 | LR__2342
1cce8     10 27 02 F6 | 	mov	local05, local02
1ccec     01 26 66 F0 | 	shl	local05, #1
1ccf0     F2 26 02 F1 | 	add	local05, objptr
1ccf4     10 29 02 F6 | 	mov	local06, local02
1ccf8     04 28 66 F0 | 	shl	local06, #4
1ccfc     10 29 02 F1 | 	add	local06, local02
1cd00     04 28 66 F0 | 	shl	local06, #4
1cd04     13 29 52 FC | 	wrword	local06, local05
1cd08     01 20 06 F1 | 	add	local02, #1
1cd0c     F0 20 56 F2 | 	cmps	local02, #240 wc
1cd10     D4 FF 9F CD |  if_b	jmp	#LR__2342
1cd14     F0 20 06 F6 | 	mov	local02, #240
1cd18                 | LR__2343
1cd18     10 27 02 F6 | 	mov	local05, local02
1cd1c     01 26 66 F0 | 	shl	local05, #1
1cd20     F2 26 02 F1 | 	add	local05, objptr
1cd24     FF 22 06 F6 | 	mov	local03, #255
1cd28     10 23 82 F1 | 	sub	local03, local02
1cd2c     0C 22 66 F0 | 	shl	local03, #12
1cd30     13 23 52 FC | 	wrword	local03, local05
1cd34     01 20 06 F1 | 	add	local02, #1
1cd38     00 21 16 F2 | 	cmp	local02, #256 wc
1cd3c     D8 FF 9F CD |  if_b	jmp	#LR__2343
1cd40                 | ' for i=0 to 127 : envbuf(6,i)=512*i : envbuf(6,255-i)=512*i : next i 					' triangle
1cd40     00 20 06 F6 | 	mov	local02, #0
1cd44     01 00 00 FF 
1cd48     00 E4 05 F1 | 	add	objptr, ##512
1cd4c                 | LR__2344
1cd4c     10 27 02 F6 | 	mov	local05, local02
1cd50     01 26 66 F0 | 	shl	local05, #1
1cd54     F2 26 02 F1 | 	add	local05, objptr
1cd58     10 29 02 F6 | 	mov	local06, local02
1cd5c     09 28 66 F0 | 	shl	local06, #9
1cd60     13 29 52 FC | 	wrword	local06, local05
1cd64     FF 26 06 F6 | 	mov	local05, #255
1cd68     10 27 82 F1 | 	sub	local05, local02
1cd6c     01 26 66 F0 | 	shl	local05, #1
1cd70     F2 26 02 F1 | 	add	local05, objptr
1cd74     10 29 02 F6 | 	mov	local06, local02
1cd78     09 28 66 F0 | 	shl	local06, #9
1cd7c     13 29 52 FC | 	wrword	local06, local05
1cd80     01 20 06 F1 | 	add	local02, #1
1cd84     80 20 56 F2 | 	cmps	local02, #128 wc
1cd88     C0 FF 9F CD |  if_b	jmp	#LR__2344
1cd8c                 | ' for i=0 to 7: envbuf(7,i)=8192*i : next i
1cd8c     00 20 06 F6 | 	mov	local02, #0
1cd90     01 00 00 FF 
1cd94     00 E4 05 F1 | 	add	objptr, ##512
1cd98                 | LR__2345
1cd98     10 27 02 F6 | 	mov	local05, local02
1cd9c     01 26 66 F0 | 	shl	local05, #1
1cda0     F2 26 02 F1 | 	add	local05, objptr
1cda4     10 29 02 F6 | 	mov	local06, local02
1cda8     0D 28 66 F0 | 	shl	local06, #13
1cdac     13 29 52 FC | 	wrword	local06, local05
1cdb0     01 20 06 F1 | 	add	local02, #1
1cdb4     08 20 56 F2 | 	cmps	local02, #8 wc
1cdb8     DC FF 9F CD |  if_b	jmp	#LR__2345
1cdbc                 | LR__2346
1cdbc                 | ' for i=8 to 23 : envbuf(7,i)=65280-2048*(i-8) : next i 	
1cdbc     08 20 06 F6 | 	mov	local02, #8
1cdc0     97 42 48 FB | 	callpa	#(@LR__2350-@LR__2347)>>2,fcache_load_ptr_
1cdc4                 | LR__2347
1cdc4     10 27 02 F6 | 	mov	local05, local02
1cdc8     01 26 66 F0 | 	shl	local05, #1
1cdcc     F2 26 02 F1 | 	add	local05, objptr
1cdd0     10 1F 02 F6 | 	mov	local01, local02
1cdd4     08 1E 86 F1 | 	sub	local01, #8
1cdd8     0B 1E 66 F0 | 	shl	local01, #11
1cddc     7F 00 00 FF 
1cde0     00 29 06 F6 | 	mov	local06, ##65280
1cde4     0F 29 82 F1 | 	sub	local06, local01
1cde8     13 29 52 FC | 	wrword	local06, local05
1cdec     01 20 06 F1 | 	add	local02, #1
1cdf0     18 20 16 F2 | 	cmp	local02, #24 wc
1cdf4     CC FF 9F CD |  if_b	jmp	#LR__2347
1cdf8                 | ' for i=24 to 128 : envbuf(7,i)=32768 : next i
1cdf8     18 20 06 F6 | 	mov	local02, #24
1cdfc                 | LR__2348
1cdfc     10 27 02 F6 | 	mov	local05, local02
1ce00     01 26 66 F0 | 	shl	local05, #1
1ce04     F2 26 02 F1 | 	add	local05, objptr
1ce08     40 00 80 FF 
1ce0c     13 01 58 FC | 	wrword	##32768, local05
1ce10     01 20 06 F1 | 	add	local02, #1
1ce14     81 20 16 F2 | 	cmp	local02, #129 wc
1ce18     E0 FF 9F CD |  if_b	jmp	#LR__2348
1ce1c                 | ' for i=129 to 255: envbuf(7,i)=256*(255-i) : next i : suspoints(7)=128							' classic adsr
1ce1c     81 20 06 F6 | 	mov	local02, #129
1ce20                 | LR__2349
1ce20     10 27 02 F6 | 	mov	local05, local02
1ce24     01 26 66 F0 | 	shl	local05, #1
1ce28     F2 26 02 F1 | 	add	local05, objptr
1ce2c     FF 22 06 F6 | 	mov	local03, #255
1ce30     10 23 82 F1 | 	sub	local03, local02
1ce34     08 22 66 F0 | 	shl	local03, #8
1ce38     13 23 52 FC | 	wrword	local03, local05
1ce3c     01 20 06 F1 | 	add	local02, #1
1ce40     00 21 16 F2 | 	cmp	local02, #256 wc
1ce44     D8 FF 9F CD |  if_b	jmp	#LR__2349
1ce48                 | LR__2350
1ce48     3E 00 00 FF 
1ce4c     FE E4 05 F1 | 	add	objptr, ##31998
1ce50     F2 00 59 FC | 	wrword	#128, objptr
1ce54     51 00 00 FF 
1ce58     D6 E5 85 F1 | 	sub	objptr, ##41942
1ce5c                 | ' for i=0 to 7
1ce5c     00 20 06 F6 | 	mov	local02, #0
1ce60     97 8E 48 FB | 	callpa	#(@LR__2352-@LR__2351)>>2,fcache_load_ptr_
1ce64                 | LR__2351
1ce64     10 27 02 F6 | 	mov	local05, local02
1ce68     01 26 66 F0 | 	shl	local05, #1
1ce6c     10 27 02 F1 | 	add	local05, local02
1ce70     03 26 66 F0 | 	shl	local05, #3
1ce74     14 00 00 FF 
1ce78     38 E5 05 F1 | 	add	objptr, ##10552
1ce7c     F2 26 02 F1 | 	add	local05, objptr
1ce80     00 EE A1 FF 
1ce84     13 01 68 FC | 	wrlong	##1138491392, local05
1ce88     10 27 02 F6 | 	mov	local05, local02
1ce8c     01 26 66 F0 | 	shl	local05, #1
1ce90     10 27 02 F1 | 	add	local05, local02
1ce94     03 26 66 F0 | 	shl	local05, #3
1ce98     F2 26 02 F1 | 	add	local05, objptr
1ce9c     04 26 06 F1 | 	add	local05, #4
1cea0     13 21 42 FC | 	wrbyte	local02, local05
1cea4     10 27 02 F6 | 	mov	local05, local02
1cea8     01 26 66 F0 | 	shl	local05, #1
1ceac     10 27 02 F1 | 	add	local05, local02
1ceb0     03 26 66 F0 | 	shl	local05, #3
1ceb4     F2 26 02 F1 | 	add	local05, objptr
1ceb8     05 26 06 F1 | 	add	local05, #5
1cebc     13 21 42 FC | 	wrbyte	local02, local05
1cec0     10 27 02 F6 | 	mov	local05, local02
1cec4     01 26 66 F0 | 	shl	local05, #1
1cec8     10 27 02 F1 | 	add	local05, local02
1cecc     03 26 66 F0 | 	shl	local05, #3
1ced0     F2 26 02 F1 | 	add	local05, objptr
1ced4     06 26 06 F1 | 	add	local05, #6
1ced8     13 01 58 FC | 	wrword	#0, local05
1cedc     10 27 02 F6 | 	mov	local05, local02
1cee0     01 26 66 F0 | 	shl	local05, #1
1cee4     10 27 02 F1 | 	add	local05, local02
1cee8     03 26 66 F0 | 	shl	local05, #3
1ceec     F2 26 02 F1 | 	add	local05, objptr
1cef0     08 26 06 F1 | 	add	local05, #8
1cef4     00 C0 9F FF 
1cef8     13 01 68 FC | 	wrlong	##1065353216, local05
1cefc     10 27 02 F6 | 	mov	local05, local02
1cf00     01 26 66 F0 | 	shl	local05, #1
1cf04     10 27 02 F1 | 	add	local05, local02
1cf08     03 26 66 F0 | 	shl	local05, #3
1cf0c     F2 26 02 F1 | 	add	local05, objptr
1cf10     0C 26 06 F1 | 	add	local05, #12
1cf14     00 40 A0 FF 
1cf18     13 01 68 FC | 	wrlong	##1082130432, local05
1cf1c     10 27 02 F6 | 	mov	local05, local02
1cf20     01 26 66 F0 | 	shl	local05, #1
1cf24     10 27 02 F1 | 	add	local05, local02
1cf28     03 26 66 F0 | 	shl	local05, #3
1cf2c     F2 26 02 F1 | 	add	local05, objptr
1cf30     10 26 06 F1 | 	add	local05, #16
1cf34     13 01 68 FC | 	wrlong	#0, local05
1cf38     10 27 02 F6 | 	mov	local05, local02
1cf3c     01 26 66 F0 | 	shl	local05, #1
1cf40     10 27 02 F1 | 	add	local05, local02
1cf44     03 26 66 F0 | 	shl	local05, #3
1cf48     F2 26 02 F1 | 	add	local05, objptr
1cf4c     14 26 06 F1 | 	add	local05, #20
1cf50     13 FF 59 FC | 	wrword	#255, local05
1cf54     10 27 02 F6 | 	mov	local05, local02
1cf58     01 26 66 F0 | 	shl	local05, #1
1cf5c     3D 00 00 FF 
1cf60     90 E4 05 F1 | 	add	objptr, ##31376
1cf64     F2 26 02 F1 | 	add	local05, objptr
1cf68     13 FF 59 FC | 	wrword	#255, local05
1cf6c     01 20 06 F1 | 	add	local02, #1
1cf70     08 20 56 F2 | 	cmps	local02, #8 wc
1cf74     51 00 00 FF 
1cf78     C8 E5 85 F1 | 	sub	objptr, ##41928
1cf7c     E4 FE 9F CD |  if_b	jmp	#LR__2351
1cf80                 | LR__2352
1cf80     00 6E 20 FF 
1cf84     00 28 06 F6 | 	mov	local06, ##1088159744
1cf88                 | ' a=6.875 : for i=1 to 3 : a=a*(2.0^(1.0/12.0)) : next i : for i=0 to 11 : notetable(i) = a : a=a*(2.0^(1.0/12.0)) : next i
1cf88     03 26 06 F6 | 	mov	local05, #3
1cf8c                 | LR__2353
1cf8c     14 13 02 F6 | 	mov	arg01, local06
1cf90     CE C3 1F FF 
1cf94     7D 14 06 F6 | 	mov	arg02, ##1065852029
1cf98     7C 65 B0 FD | 	call	#__system___float_mul
1cf9c     FD 28 02 F6 | 	mov	local06, result1
1cfa0     FA 27 6E FB | 	djnz	local05, #LR__2353
1cfa4     00 20 06 F6 | 	mov	local02, #0
1cfa8                 | LR__2354
1cfa8     10 25 02 F6 | 	mov	local04, local02
1cfac     02 24 66 F0 | 	shl	local04, #2
1cfb0     14 00 00 FF 
1cfb4     D8 E4 05 F1 | 	add	objptr, ##10456
1cfb8     F2 24 02 F1 | 	add	local04, objptr
1cfbc     12 29 62 FC | 	wrlong	local06, local04
1cfc0     14 13 02 F6 | 	mov	arg01, local06
1cfc4     CE C3 1F FF 
1cfc8     7D 14 06 F6 | 	mov	arg02, ##1065852029
1cfcc     14 00 00 FF 
1cfd0     D8 E4 85 F1 | 	sub	objptr, ##10456
1cfd4     40 65 B0 FD | 	call	#__system___float_mul
1cfd8     FD 28 02 F6 | 	mov	local06, result1
1cfdc     01 20 06 F1 | 	add	local02, #1
1cfe0     0C 20 56 F2 | 	cmps	local02, #12 wc
1cfe4     C0 FF 9F CD |  if_b	jmp	#LR__2354
1cfe8     14 00 00 FF 
1cfec     08 E5 05 F1 | 	add	objptr, ##10504
1cff0     F2 50 6B FC | 	wrlong	#424, objptr
1cff4     04 E4 05 F1 | 	add	objptr, #4
1cff8     F2 20 6B FC | 	wrlong	#400, objptr
1cffc     04 E4 05 F1 | 	add	objptr, #4
1d000     F2 F2 6A FC | 	wrlong	#377, objptr
1d004     04 E4 05 F1 | 	add	objptr, #4
1d008     F2 C8 6A FC | 	wrlong	#356, objptr
1d00c     04 E4 05 F1 | 	add	objptr, #4
1d010     F2 A0 6A FC | 	wrlong	#336, objptr
1d014     04 E4 05 F1 | 	add	objptr, #4
1d018     F2 7A 6A FC | 	wrlong	#317, objptr
1d01c     04 E4 05 F1 | 	add	objptr, #4
1d020     F2 58 6A FC | 	wrlong	#300, objptr
1d024     04 E4 05 F1 | 	add	objptr, #4
1d028     F2 36 6A FC | 	wrlong	#283, objptr
1d02c     04 E4 05 F1 | 	add	objptr, #4
1d030     F2 16 6A FC | 	wrlong	#267, objptr
1d034     04 E4 05 F1 | 	add	objptr, #4
1d038     F2 F8 69 FC | 	wrlong	#252, objptr
1d03c     04 E4 05 F1 | 	add	objptr, #4
1d040     F2 DC 69 FC | 	wrlong	#238, objptr
1d044     04 E4 05 F1 | 	add	objptr, #4
1d048     F2 C0 69 FC | 	wrlong	#224, objptr
1d04c     3D 00 00 FF 
1d050     A2 E4 05 F1 | 	add	objptr, ##31394
1d054     F2 00 59 FC | 	wrword	#128, objptr
1d058     02 E4 85 F1 | 	sub	objptr, #2
1d05c     F2 00 59 FC | 	wrword	#128, objptr
1d060     51 00 00 FF 
1d064     D4 E5 85 F1 | 	sub	objptr, ##41940
1d068     A7 F0 03 F6 | 	mov	ptra, fp
1d06c     B2 00 A0 FD | 	call	#popregs_
1d070                 | _init_audio_ret
1d070     2D 00 64 FD | 	ret
1d074                 | 
1d074                 | ' 
1d074                 | ' 
1d074                 | ' 
1d074                 | ' 
1d074                 | ' 
1d074                 | ' 
1d074                 | ' sub init_error_strings
1d074                 | _init_error_strings
1d074     85 01 00 FF 
1d078     24 01 06 F6 | 	mov	_var01, ##@LR__5533
1d07c     45 00 00 FF 
1d080     7C E4 05 F1 | 	add	objptr, ##35452
1d084     F2 00 62 FC | 	wrlong	_var01, objptr
1d088     85 01 00 FF 
1d08c     25 01 06 F6 | 	mov	_var01, ##@LR__5534
1d090     04 E4 05 F1 | 	add	objptr, #4
1d094     F2 00 62 FC | 	wrlong	_var01, objptr
1d098     85 01 00 FF 
1d09c     4A 01 06 F6 | 	mov	_var01, ##@LR__5535
1d0a0     04 E4 05 F1 | 	add	objptr, #4
1d0a4     F2 00 62 FC | 	wrlong	_var01, objptr
1d0a8     85 01 00 FF 
1d0ac     6B 01 06 F6 | 	mov	_var01, ##@LR__5536
1d0b0     04 E4 05 F1 | 	add	objptr, #4
1d0b4     F2 00 62 FC | 	wrlong	_var01, objptr
1d0b8     85 01 00 FF 
1d0bc     85 01 06 F6 | 	mov	_var01, ##@LR__5537
1d0c0     04 E4 05 F1 | 	add	objptr, #4
1d0c4     F2 00 62 FC | 	wrlong	_var01, objptr
1d0c8     85 01 00 FF 
1d0cc     A1 01 06 F6 | 	mov	_var01, ##@LR__5538
1d0d0     04 E4 05 F1 | 	add	objptr, #4
1d0d4     F2 00 62 FC | 	wrlong	_var01, objptr
1d0d8     85 01 00 FF 
1d0dc     C3 01 06 F6 | 	mov	_var01, ##@LR__5539
1d0e0     04 E4 05 F1 | 	add	objptr, #4
1d0e4     F2 00 62 FC | 	wrlong	_var01, objptr
1d0e8     85 01 00 FF 
1d0ec     F1 01 06 F6 | 	mov	_var01, ##@LR__5540
1d0f0     04 E4 05 F1 | 	add	objptr, #4
1d0f4     F2 00 62 FC | 	wrlong	_var01, objptr
1d0f8     86 01 00 FF 
1d0fc     1C 00 06 F6 | 	mov	_var01, ##@LR__5541
1d100     04 E4 05 F1 | 	add	objptr, #4
1d104     F2 00 62 FC | 	wrlong	_var01, objptr
1d108     86 01 00 FF 
1d10c     35 00 06 F6 | 	mov	_var01, ##@LR__5542
1d110     04 E4 05 F1 | 	add	objptr, #4
1d114     F2 00 62 FC | 	wrlong	_var01, objptr
1d118     86 01 00 FF 
1d11c     56 00 06 F6 | 	mov	_var01, ##@LR__5543
1d120     04 E4 05 F1 | 	add	objptr, #4
1d124     F2 00 62 FC | 	wrlong	_var01, objptr
1d128     86 01 00 FF 
1d12c     6D 00 06 F6 | 	mov	_var01, ##@LR__5544
1d130     04 E4 05 F1 | 	add	objptr, #4
1d134     F2 00 62 FC | 	wrlong	_var01, objptr
1d138     86 01 00 FF 
1d13c     8B 00 06 F6 | 	mov	_var01, ##@LR__5545
1d140     04 E4 05 F1 | 	add	objptr, #4
1d144     F2 00 62 FC | 	wrlong	_var01, objptr
1d148     86 01 00 FF 
1d14c     AF 00 06 F6 | 	mov	_var01, ##@LR__5546
1d150     04 E4 05 F1 | 	add	objptr, #4
1d154     F2 00 62 FC | 	wrlong	_var01, objptr
1d158     86 01 00 FF 
1d15c     D6 00 06 F6 | 	mov	_var01, ##@LR__5547
1d160     04 E4 05 F1 | 	add	objptr, #4
1d164     F2 00 62 FC | 	wrlong	_var01, objptr
1d168     86 01 00 FF 
1d16c     F2 00 06 F6 | 	mov	_var01, ##@LR__5548
1d170     04 E4 05 F1 | 	add	objptr, #4
1d174     F2 00 62 FC | 	wrlong	_var01, objptr
1d178     86 01 00 FF 
1d17c     03 01 06 F6 | 	mov	_var01, ##@LR__5549
1d180     04 E4 05 F1 | 	add	objptr, #4
1d184     F2 00 62 FC | 	wrlong	_var01, objptr
1d188     86 01 00 FF 
1d18c     13 01 06 F6 | 	mov	_var01, ##@LR__5550
1d190     04 E4 05 F1 | 	add	objptr, #4
1d194     F2 00 62 FC | 	wrlong	_var01, objptr
1d198     86 01 00 FF 
1d19c     2E 01 06 F6 | 	mov	_var01, ##@LR__5551
1d1a0     04 E4 05 F1 | 	add	objptr, #4
1d1a4     F2 00 62 FC | 	wrlong	_var01, objptr
1d1a8     86 01 00 FF 
1d1ac     40 01 06 F6 | 	mov	_var01, ##@LR__5552
1d1b0     04 E4 05 F1 | 	add	objptr, #4
1d1b4     F2 00 62 FC | 	wrlong	_var01, objptr
1d1b8     86 01 00 FF 
1d1bc     58 01 06 F6 | 	mov	_var01, ##@LR__5553
1d1c0     04 E4 05 F1 | 	add	objptr, #4
1d1c4     F2 00 62 FC | 	wrlong	_var01, objptr
1d1c8     86 01 00 FF 
1d1cc     6C 01 06 F6 | 	mov	_var01, ##@LR__5554
1d1d0     04 E4 05 F1 | 	add	objptr, #4
1d1d4     F2 00 62 FC | 	wrlong	_var01, objptr
1d1d8     86 01 00 FF 
1d1dc     7C 01 06 F6 | 	mov	_var01, ##@LR__5555
1d1e0     04 E4 05 F1 | 	add	objptr, #4
1d1e4     F2 00 62 FC | 	wrlong	_var01, objptr
1d1e8     86 01 00 FF 
1d1ec     99 01 06 F6 | 	mov	_var01, ##@LR__5556
1d1f0     04 E4 05 F1 | 	add	objptr, #4
1d1f4     F2 00 62 FC | 	wrlong	_var01, objptr
1d1f8     86 01 00 FF 
1d1fc     AA 01 06 F6 | 	mov	_var01, ##@LR__5557
1d200     04 E4 05 F1 | 	add	objptr, #4
1d204     F2 00 62 FC | 	wrlong	_var01, objptr
1d208     86 01 00 FF 
1d20c     BB 01 06 F6 | 	mov	_var01, ##@LR__5558
1d210     04 E4 05 F1 | 	add	objptr, #4
1d214     F2 00 62 FC | 	wrlong	_var01, objptr
1d218     86 01 00 FF 
1d21c     EF 01 06 F6 | 	mov	_var01, ##@LR__5559
1d220     04 E4 05 F1 | 	add	objptr, #4
1d224     F2 00 62 FC | 	wrlong	_var01, objptr
1d228     87 01 00 FF 
1d22c     0B 00 06 F6 | 	mov	_var01, ##@LR__5560
1d230     04 E4 05 F1 | 	add	objptr, #4
1d234     F2 00 62 FC | 	wrlong	_var01, objptr
1d238     87 01 00 FF 
1d23c     21 00 06 F6 | 	mov	_var01, ##@LR__5561
1d240     04 E4 05 F1 | 	add	objptr, #4
1d244     F2 00 62 FC | 	wrlong	_var01, objptr
1d248     87 01 00 FF 
1d24c     2E 00 06 F6 | 	mov	_var01, ##@LR__5562
1d250     04 E4 05 F1 | 	add	objptr, #4
1d254     F2 00 62 FC | 	wrlong	_var01, objptr
1d258     87 01 00 FF 
1d25c     40 00 06 F6 | 	mov	_var01, ##@LR__5563
1d260     04 E4 05 F1 | 	add	objptr, #4
1d264     F2 00 62 FC | 	wrlong	_var01, objptr
1d268     87 01 00 FF 
1d26c     51 00 06 F6 | 	mov	_var01, ##@LR__5564
1d270     04 E4 05 F1 | 	add	objptr, #4
1d274     F2 00 62 FC | 	wrlong	_var01, objptr
1d278     87 01 00 FF 
1d27c     6D 00 06 F6 | 	mov	_var01, ##@LR__5565
1d280     04 E4 05 F1 | 	add	objptr, #4
1d284     F2 00 62 FC | 	wrlong	_var01, objptr
1d288     87 01 00 FF 
1d28c     7E 00 06 F6 | 	mov	_var01, ##@LR__5566
1d290     04 E4 05 F1 | 	add	objptr, #4
1d294     F2 00 62 FC | 	wrlong	_var01, objptr
1d298     87 01 00 FF 
1d29c     8D 00 06 F6 | 	mov	_var01, ##@LR__5567
1d2a0     04 E4 05 F1 | 	add	objptr, #4
1d2a4     F2 00 62 FC | 	wrlong	_var01, objptr
1d2a8     87 01 00 FF 
1d2ac     A8 00 06 F6 | 	mov	_var01, ##@LR__5568
1d2b0     04 E4 05 F1 | 	add	objptr, #4
1d2b4     F2 00 62 FC | 	wrlong	_var01, objptr
1d2b8     87 01 00 FF 
1d2bc     DC 00 06 F6 | 	mov	_var01, ##@LR__5569
1d2c0     04 E4 05 F1 | 	add	objptr, #4
1d2c4     F2 00 62 FC | 	wrlong	_var01, objptr
1d2c8     87 01 00 FF 
1d2cc     F5 00 06 F6 | 	mov	_var01, ##@LR__5570
1d2d0     04 E4 05 F1 | 	add	objptr, #4
1d2d4     F2 00 62 FC | 	wrlong	_var01, objptr
1d2d8     87 01 00 FF 
1d2dc     11 01 06 F6 | 	mov	_var01, ##@LR__5571
1d2e0     04 E4 05 F1 | 	add	objptr, #4
1d2e4     F2 00 62 FC | 	wrlong	_var01, objptr
1d2e8     87 01 00 FF 
1d2ec     2F 01 06 F6 | 	mov	_var01, ##@LR__5572
1d2f0     04 E4 05 F1 | 	add	objptr, #4
1d2f4     F2 00 62 FC | 	wrlong	_var01, objptr
1d2f8     87 01 00 FF 
1d2fc     48 01 06 F6 | 	mov	_var01, ##@LR__5573
1d300     04 E4 05 F1 | 	add	objptr, #4
1d304     F2 00 62 FC | 	wrlong	_var01, objptr
1d308     87 01 00 FF 
1d30c     67 01 06 F6 | 	mov	_var01, ##@LR__5574
1d310     04 E4 05 F1 | 	add	objptr, #4
1d314     F2 00 62 FC | 	wrlong	_var01, objptr
1d318     87 01 00 FF 
1d31c     76 01 06 F6 | 	mov	_var01, ##@LR__5575
1d320     04 E4 05 F1 | 	add	objptr, #4
1d324     F2 00 62 FC | 	wrlong	_var01, objptr
1d328     87 01 00 FF 
1d32c     A4 01 06 F6 | 	mov	_var01, ##@LR__5576
1d330     04 E4 05 F1 | 	add	objptr, #4
1d334     F2 00 62 FC | 	wrlong	_var01, objptr
1d338     87 01 00 FF 
1d33c     B2 01 06 F6 | 	mov	_var01, ##@LR__5577
1d340     04 E4 05 F1 | 	add	objptr, #4
1d344     F2 00 62 FC | 	wrlong	_var01, objptr
1d348     87 01 00 FF 
1d34c     C7 01 06 F6 | 	mov	_var01, ##@LR__5578
1d350     04 E4 05 F1 | 	add	objptr, #4
1d354     F2 00 62 FC | 	wrlong	_var01, objptr
1d358     87 01 00 FF 
1d35c     EB 01 06 F6 | 	mov	_var01, ##@LR__5579
1d360     04 E4 05 F1 | 	add	objptr, #4
1d364     F2 00 62 FC | 	wrlong	_var01, objptr
1d368     88 01 00 FF 
1d36c     02 00 06 F6 | 	mov	_var01, ##@LR__5580
1d370     04 E4 05 F1 | 	add	objptr, #4
1d374     F2 00 62 FC | 	wrlong	_var01, objptr
1d378     88 01 00 FF 
1d37c     15 00 06 F6 | 	mov	_var01, ##@LR__5581
1d380     04 E4 05 F1 | 	add	objptr, #4
1d384     F2 00 62 FC | 	wrlong	_var01, objptr
1d388     88 01 00 FF 
1d38c     2C 00 06 F6 | 	mov	_var01, ##@LR__5582
1d390     04 E4 05 F1 | 	add	objptr, #4
1d394     F2 00 62 FC | 	wrlong	_var01, objptr
1d398     88 01 00 FF 
1d39c     45 00 06 F6 | 	mov	_var01, ##@LR__5583
1d3a0     04 E4 05 F1 | 	add	objptr, #4
1d3a4     F2 00 62 FC | 	wrlong	_var01, objptr
1d3a8     88 01 00 FF 
1d3ac     67 00 06 F6 | 	mov	_var01, ##@LR__5584
1d3b0     04 E4 05 F1 | 	add	objptr, #4
1d3b4     F2 00 62 FC | 	wrlong	_var01, objptr
1d3b8     88 01 00 FF 
1d3bc     7A 00 06 F6 | 	mov	_var01, ##@LR__5585
1d3c0     04 E4 05 F1 | 	add	objptr, #4
1d3c4     F2 00 62 FC | 	wrlong	_var01, objptr
1d3c8     45 00 00 FF 
1d3cc     4C E5 85 F1 | 	sub	objptr, ##35660
1d3d0                 | _init_error_strings_ret
1d3d0     2D 00 64 FD | 	ret
1d3d4                 | 
1d3d4                 | '         
1d3d4                 | ' sub printerror(err as integer)
1d3d4                 | _printerror
1d3d4     01 4A 05 F6 | 	mov	COUNT_, #1
1d3d8     A8 00 A0 FD | 	call	#pushregs_
1d3dc     09 1F 02 F6 | 	mov	local01, arg01
1d3e0     88 01 00 FF 
1d3e4     8A 12 06 F6 | 	mov	arg01, ##@LR__5586
1d3e8     5C 20 B0 FD | 	call	#_hg010b_spin2_write
1d3ec     0F 13 02 F6 | 	mov	arg01, local01
1d3f0     F8 25 B0 FD | 	call	#_hg010b_spin2_inttostr
1d3f4     FD 12 02 F6 | 	mov	arg01, result1
1d3f8     4C 20 B0 FD | 	call	#_hg010b_spin2_write
1d3fc     88 01 00 FF 
1d400     91 12 06 F6 | 	mov	arg01, ##@LR__5587
1d404     40 20 B0 FD | 	call	#_hg010b_spin2_write
1d408     02 1E 66 F0 | 	shl	local01, #2
1d40c     45 00 00 FF 
1d410     7C E4 05 F1 | 	add	objptr, ##35452
1d414     F2 1E 02 F1 | 	add	local01, objptr
1d418     0F 13 02 FB | 	rdlong	arg01, local01
1d41c     45 00 00 FF 
1d420     7C E4 85 F1 | 	sub	objptr, ##35452
1d424                 | ' 
1d424                 | ' write(text)
1d424     20 20 B0 FD | 	call	#_hg010b_spin2_write
1d428                 | ' crlf
1d428     1C 25 B0 FD | 	call	#_hg010b_spin2_crlf
1d42c     A7 F0 03 F6 | 	mov	ptra, fp
1d430     B2 00 A0 FD | 	call	#popregs_
1d434                 | _printerror_ret
1d434     2D 00 64 FD | 	ret
1d438                 | 
1d438                 | ' 
1d438                 | ' '' ------------------------------- Hardware start/stop/initialization 
1d438                 | ' 
1d438                 | ' sub startpsram
1d438                 | _startpsram
1d438     00 12 06 F6 | 	mov	arg01, #0
1d43c     0A 14 C6 F9 | 	decod	arg02, #10
1d440     0B 16 06 F6 | 	mov	arg03, #11
1d444     07 18 06 F6 | 	mov	arg04, #7
1d448     0B 00 00 FF 
1d44c     CC E4 05 F1 | 	add	objptr, ##5836
1d450     A4 26 B0 FD | 	call	#_psram_spin2_startx
1d454     2B 00 00 FF 
1d458     3C E5 05 F1 | 	add	objptr, ##22332
1d45c     F2 FA 61 FC | 	wrlong	result1, objptr
1d460                 | '     return $7FF00 + cog*12
1d460     0C E4 05 F1 | 	add	objptr, #12
1d464     FF 03 80 FF 
1d468     F2 00 6A FC | 	wrlong	##524032, objptr
1d46c     37 00 00 FF 
1d470     14 E4 85 F1 | 	sub	objptr, ##28180
1d474                 | _startpsram_ret
1d474     2D 00 64 FD | 	ret
1d478                 | 
1d478                 | ' 
1d478                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
1d478                 | _startvideo
1d478     01 4A 05 F6 | 	mov	COUNT_, #1
1d47c     A8 00 A0 FD | 	call	#pushregs_
1d480     37 00 00 FF 
1d484     14 E4 05 F1 | 	add	objptr, ##28180
1d488     F2 18 02 FB | 	rdlong	arg04, objptr
1d48c     37 00 00 FF 
1d490     14 E4 85 F1 | 	sub	objptr, ##28180
1d494     0A 13 02 F6 | 	mov	arg01, arg02
1d498     0C 15 02 F6 | 	mov	arg02, arg04
1d49c     A0 07 B0 FD | 	call	#_hg010b_spin2_start
1d4a0     37 00 00 FF 
1d4a4     00 E4 05 F1 | 	add	objptr, ##28160
1d4a8     F2 FA 61 FC | 	wrlong	result1, objptr
1d4ac                 | ' 
1d4ac                 | ' videocog=v.start(pin,mbox)
1d4ac                 | ' 
1d4ac                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
1d4ac     00 1E 06 F6 | 	mov	local01, #0
1d4b0     2B 00 00 FF 
1d4b4     34 E5 85 F1 | 	sub	objptr, ##22324
1d4b8                 | LR__2360
1d4b8     0F 13 02 F6 | 	mov	arg01, local01
1d4bc     00 28 00 FF 
1d4c0     00 14 06 F6 | 	mov	arg02, ##5242880
1d4c4     88 2A B0 FD | 	call	#_psram_spin2_setQos
1d4c8     01 1E 06 F1 | 	add	local01, #1
1d4cc     08 1E 56 F2 | 	cmps	local01, #8 wc
1d4d0     E4 FF 9F CD |  if_b	jmp	#LR__2360
1d4d4     2B 00 00 FF 
1d4d8     34 E5 05 F1 | 	add	objptr, ##22324
1d4dc     F2 12 02 FB | 	rdlong	arg01, objptr
1d4e0     7A 00 02 FF 
1d4e4     00 14 06 F6 | 	mov	arg02, ##67171328
1d4e8     2B 00 00 FF 
1d4ec     34 E5 85 F1 | 	sub	objptr, ##22324
1d4f0     5C 2A B0 FD | 	call	#_psram_spin2_setQos
1d4f4     0B 00 00 FF 
1d4f8     CC E4 85 F1 | 	sub	objptr, ##5836
1d4fc                 | ' psram.setQoS(videocog, $0400f400) 
1d4fc                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
1d4fc     F2 14 02 F6 | 	mov	arg02, objptr
1d500     00 70 04 FF 
1d504     00 14 46 F5 | 	or	arg02, ##148897792
1d508     00 16 06 F6 | 	mov	arg03, #0
1d50c     00 18 06 F6 | 	mov	arg04, #0
1d510     00 12 06 F6 | 	mov	arg01, #0
1d514     F4 3E B0 FD | 	call	#__system___basic_open
1d518                 | ' return videocog
1d518     37 00 00 FF 
1d51c     00 E4 05 F1 | 	add	objptr, ##28160
1d520     F2 FA 01 FB | 	rdlong	result1, objptr
1d524     37 00 00 FF 
1d528     00 E4 85 F1 | 	sub	objptr, ##28160
1d52c     A7 F0 03 F6 | 	mov	ptra, fp
1d530     B2 00 A0 FD | 	call	#popregs_
1d534                 | _startvideo_ret
1d534     2D 00 64 FD | 	ret
1d538                 | 
1d538                 | ' 
1d538                 | ' 
1d538                 | ' 
1d538                 | ' 
1d538                 | ' '' ------------------------------- Convenient psram peek/poke
1d538                 | ' 
1d538                 | ' sub pslpoke(addr as ulong,value as ulong)
1d538                 | _pslpoke
1d538     00 4A 05 F6 | 	mov	COUNT_, #0
1d53c     A8 00 A0 FD | 	call	#pushregs_
1d540     08 F0 07 F1 | 	add	ptra, #8
1d544     A7 12 62 FC | 	wrlong	arg01, fp
1d548     04 4E 05 F1 | 	add	fp, #4
1d54c     A7 14 62 FC | 	wrlong	arg02, fp
1d550     A7 12 02 F6 | 	mov	arg01, fp
1d554     04 4E 85 F1 | 	sub	fp, #4
1d558     A7 14 02 FB | 	rdlong	arg02, fp
1d55c     04 16 06 F6 | 	mov	arg03, #4
1d560     0B 00 00 FF 
1d564     CC E4 05 F1 | 	add	objptr, ##5836
1d568     54 28 B0 FD | 	call	#_psram_spin2_write
1d56c     0B 00 00 FF 
1d570     CC E4 85 F1 | 	sub	objptr, ##5836
1d574     A7 F0 03 F6 | 	mov	ptra, fp
1d578     B2 00 A0 FD | 	call	#popregs_
1d57c                 | _pslpoke_ret
1d57c     2D 00 64 FD | 	ret
1d580                 | 
1d580                 | ' 
1d580                 | ' sub psdpoke(addr as ulong,value as ulong)
1d580                 | _psdpoke
1d580     00 4A 05 F6 | 	mov	COUNT_, #0
1d584     A8 00 A0 FD | 	call	#pushregs_
1d588     08 F0 07 F1 | 	add	ptra, #8
1d58c     A7 12 62 FC | 	wrlong	arg01, fp
1d590     04 4E 05 F1 | 	add	fp, #4
1d594     A7 14 62 FC | 	wrlong	arg02, fp
1d598     A7 12 02 F6 | 	mov	arg01, fp
1d59c     04 4E 85 F1 | 	sub	fp, #4
1d5a0     A7 14 02 FB | 	rdlong	arg02, fp
1d5a4     02 16 06 F6 | 	mov	arg03, #2
1d5a8     0B 00 00 FF 
1d5ac     CC E4 05 F1 | 	add	objptr, ##5836
1d5b0     0C 28 B0 FD | 	call	#_psram_spin2_write
1d5b4     0B 00 00 FF 
1d5b8     CC E4 85 F1 | 	sub	objptr, ##5836
1d5bc     A7 F0 03 F6 | 	mov	ptra, fp
1d5c0     B2 00 A0 FD | 	call	#popregs_
1d5c4                 | _psdpoke_ret
1d5c4     2D 00 64 FD | 	ret
1d5c8                 | 
1d5c8                 | ' 
1d5c8                 | ' sub pspoke(addr as ulong,value as ulong)
1d5c8                 | _pspoke
1d5c8     00 4A 05 F6 | 	mov	COUNT_, #0
1d5cc     A8 00 A0 FD | 	call	#pushregs_
1d5d0     08 F0 07 F1 | 	add	ptra, #8
1d5d4     A7 12 62 FC | 	wrlong	arg01, fp
1d5d8     04 4E 05 F1 | 	add	fp, #4
1d5dc     A7 14 62 FC | 	wrlong	arg02, fp
1d5e0     A7 12 02 F6 | 	mov	arg01, fp
1d5e4     04 4E 85 F1 | 	sub	fp, #4
1d5e8     A7 14 02 FB | 	rdlong	arg02, fp
1d5ec     01 16 06 F6 | 	mov	arg03, #1
1d5f0     0B 00 00 FF 
1d5f4     CC E4 05 F1 | 	add	objptr, ##5836
1d5f8     C4 27 B0 FD | 	call	#_psram_spin2_write
1d5fc     0B 00 00 FF 
1d600     CC E4 85 F1 | 	sub	objptr, ##5836
1d604     A7 F0 03 F6 | 	mov	ptra, fp
1d608     B2 00 A0 FD | 	call	#popregs_
1d60c                 | _pspoke_ret
1d60c     2D 00 64 FD | 	ret
1d610                 | 
1d610                 | ' 
1d610                 | ' function pspeek(adr as ulong) as ubyte
1d610                 | _pspeek
1d610     00 4A 05 F6 | 	mov	COUNT_, #0
1d614     A8 00 A0 FD | 	call	#pushregs_
1d618     0C F0 07 F1 | 	add	ptra, #12
1d61c     04 4E 05 F1 | 	add	fp, #4
1d620     A7 12 62 FC | 	wrlong	arg01, fp
1d624     04 4E 05 F1 | 	add	fp, #4
1d628     A7 12 02 F6 | 	mov	arg01, fp
1d62c     04 4E 85 F1 | 	sub	fp, #4
1d630     A7 14 02 FB | 	rdlong	arg02, fp
1d634     04 4E 85 F1 | 	sub	fp, #4
1d638     01 16 06 F6 | 	mov	arg03, #1
1d63c     0B 00 00 FF 
1d640     CC E4 05 F1 | 	add	objptr, ##5836
1d644     DC 26 B0 FD | 	call	#_psram_spin2_read1
1d648     0B 00 00 FF 
1d64c     CC E4 85 F1 | 	sub	objptr, ##5836
1d650                 | ' psram.read1(varptr(res),adr,1)
1d650                 | ' return res
1d650     08 4E 05 F1 | 	add	fp, #8
1d654     A7 FA C1 FA | 	rdbyte	result1, fp
1d658     08 4E 85 F1 | 	sub	fp, #8
1d65c     A7 F0 03 F6 | 	mov	ptra, fp
1d660     B2 00 A0 FD | 	call	#popregs_
1d664                 | _pspeek_ret
1d664     2D 00 64 FD | 	ret
1d668                 | 
1d668                 | ' 
1d668                 | ' function pslpeek(adr as ulong) as ulong
1d668                 | _pslpeek
1d668     00 4A 05 F6 | 	mov	COUNT_, #0
1d66c     A8 00 A0 FD | 	call	#pushregs_
1d670     0C F0 07 F1 | 	add	ptra, #12
1d674     04 4E 05 F1 | 	add	fp, #4
1d678     A7 12 62 FC | 	wrlong	arg01, fp
1d67c     04 4E 05 F1 | 	add	fp, #4
1d680     A7 12 02 F6 | 	mov	arg01, fp
1d684     04 4E 85 F1 | 	sub	fp, #4
1d688     A7 14 02 FB | 	rdlong	arg02, fp
1d68c     04 4E 85 F1 | 	sub	fp, #4
1d690     04 16 06 F6 | 	mov	arg03, #4
1d694     0B 00 00 FF 
1d698     CC E4 05 F1 | 	add	objptr, ##5836
1d69c     84 26 B0 FD | 	call	#_psram_spin2_read1
1d6a0     0B 00 00 FF 
1d6a4     CC E4 85 F1 | 	sub	objptr, ##5836
1d6a8                 | ' psram.read1(varptr(res),adr,4)
1d6a8                 | ' return res
1d6a8     08 4E 05 F1 | 	add	fp, #8
1d6ac     A7 FA 01 FB | 	rdlong	result1, fp
1d6b0     08 4E 85 F1 | 	sub	fp, #8
1d6b4     A7 F0 03 F6 | 	mov	ptra, fp
1d6b8     B2 00 A0 FD | 	call	#popregs_
1d6bc                 | _pslpeek_ret
1d6bc     2D 00 64 FD | 	ret
1d6c0                 | 
1d6c0                 | ' 
1d6c0                 | ' function psdpeek(adr as ulong) as ulong
1d6c0                 | _psdpeek
1d6c0     00 4A 05 F6 | 	mov	COUNT_, #0
1d6c4     A8 00 A0 FD | 	call	#pushregs_
1d6c8     0C F0 07 F1 | 	add	ptra, #12
1d6cc     04 4E 05 F1 | 	add	fp, #4
1d6d0     A7 12 62 FC | 	wrlong	arg01, fp
1d6d4     04 4E 05 F1 | 	add	fp, #4
1d6d8     A7 12 02 F6 | 	mov	arg01, fp
1d6dc     04 4E 85 F1 | 	sub	fp, #4
1d6e0     A7 14 02 FB | 	rdlong	arg02, fp
1d6e4     04 4E 85 F1 | 	sub	fp, #4
1d6e8     02 16 06 F6 | 	mov	arg03, #2
1d6ec     0B 00 00 FF 
1d6f0     CC E4 05 F1 | 	add	objptr, ##5836
1d6f4     2C 26 B0 FD | 	call	#_psram_spin2_read1
1d6f8     0B 00 00 FF 
1d6fc     CC E4 85 F1 | 	sub	objptr, ##5836
1d700                 | ' psram.read1(varptr(res),adr,2)
1d700                 | ' return res
1d700     08 4E 05 F1 | 	add	fp, #8
1d704     A7 FA E1 FA | 	rdword	result1, fp
1d708     08 4E 85 F1 | 	sub	fp, #8
1d70c     A7 F0 03 F6 | 	mov	ptra, fp
1d710     B2 00 A0 FD | 	call	#popregs_
1d714                 | _psdpeek_ret
1d714     2D 00 64 FD | 	ret
1d718                 | 
1d718                 | ' 
1d718                 | ' '' ------------------------------- USB keyboard scan to char translator
1d718                 | ' 
1d718                 | ' function scantochar(key)
1d718                 | _scantochar
1d718                 | ' 
1d718                 | ' select case (key shr 8) and 255
1d718     09 01 02 F6 | 	mov	_var01, arg01
1d71c     08 00 C6 F0 | 	sar	_var01, #8
1d720     FF 00 0E F5 | 	and	_var01, #255 wz
1d724     24 00 90 AD |  if_e	jmp	#LR__2370
1d728     02 00 0E F2 | 	cmp	_var01, #2 wz
1d72c     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
1d730     30 00 90 AD |  if_e	jmp	#LR__2371
1d734     40 00 0E F2 | 	cmp	_var01, #64 wz
1d738     44 00 90 AD |  if_e	jmp	#LR__2372
1d73c     42 00 0E F2 | 	cmp	_var01, #66 wz
1d740     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
1d744     70 00 90 5D |  if_ne	jmp	#LR__2374
1d748     50 00 90 FD | 	jmp	#LR__2373
1d74c                 | LR__2370
1d74c     09 FB 01 F6 | 	mov	result1, arg01
1d750     7F FA 05 F5 | 	and	result1, #127
1d754     02 FA 65 F0 | 	shl	result1, #2
1d758     F5 FA 01 F1 | 	add	result1, ptr__dat__
1d75c     FD FA C1 FA | 	rdbyte	result1, result1
1d760     54 00 90 FD | 	jmp	#_scantochar_ret
1d764                 | LR__2371
1d764     09 FB 01 F6 | 	mov	result1, arg01
1d768     7F FA 05 F5 | 	and	result1, #127
1d76c     02 FA 65 F0 | 	shl	result1, #2
1d770     01 FA 05 F1 | 	add	result1, #1
1d774     F5 FA 01 F1 | 	add	result1, ptr__dat__
1d778     FD FA C1 FA | 	rdbyte	result1, result1
1d77c     38 00 90 FD | 	jmp	#_scantochar_ret
1d780                 | LR__2372
1d780     09 FB 01 F6 | 	mov	result1, arg01
1d784     7F FA 05 F5 | 	and	result1, #127
1d788     02 FA 65 F0 | 	shl	result1, #2
1d78c     02 FA 05 F1 | 	add	result1, #2
1d790     F5 FA 01 F1 | 	add	result1, ptr__dat__
1d794     FD FA C1 FA | 	rdbyte	result1, result1
1d798     1C 00 90 FD | 	jmp	#_scantochar_ret
1d79c                 | LR__2373
1d79c     09 FB 01 F6 | 	mov	result1, arg01
1d7a0     7F FA 05 F5 | 	and	result1, #127
1d7a4     02 FA 65 F0 | 	shl	result1, #2
1d7a8     03 FA 05 F1 | 	add	result1, #3
1d7ac     F5 FA 01 F1 | 	add	result1, ptr__dat__
1d7b0     FD FA C1 FA | 	rdbyte	result1, result1
1d7b4     00 00 90 FD | 	jmp	#_scantochar_ret
1d7b8                 | LR__2374
1d7b8                 | _scantochar_ret
1d7b8     2D 00 64 FD | 	ret
1d7bc                 | 
1d7bc                 | _program
1d7bc     01 4A 05 F6 | 	mov	COUNT_, #1
1d7c0     A8 00 A0 FD | 	call	#pushregs_
1d7c4     70 FC BF FD | 	call	#_startpsram
1d7c8     40 12 06 F6 | 	mov	arg01, #64
1d7cc     00 14 06 F6 | 	mov	arg02, #0
1d7d0     00 16 06 F6 | 	mov	arg03, #0
1d7d4     A0 FC BF FD | 	call	#_startvideo
1d7d8     37 00 00 FF 
1d7dc     14 E4 05 F1 | 	add	objptr, ##28180
1d7e0     F2 12 02 FB | 	rdlong	arg01, objptr
1d7e4     00 14 06 F6 | 	mov	arg02, #0
1d7e8     FB 03 00 FF 
1d7ec     00 17 06 F6 | 	mov	arg03, ##521984
1d7f0     2B 00 00 FF 
1d7f4     48 E5 85 F1 | 	sub	objptr, ##22344
1d7f8     04 2B B0 FD | 	call	#_audio096_spin2_start
1d7fc     FE 16 02 F6 | 	mov	arg03, result2
1d800     2B 00 00 FF 
1d804     30 E5 05 F1 | 	add	objptr, ##22320
1d808     F2 FA 61 FC | 	wrlong	result1, objptr
1d80c     14 E4 05 F1 | 	add	objptr, #20
1d810     F2 16 62 FC | 	wrlong	arg03, objptr
1d814     37 00 00 FF 
1d818     10 E4 85 F1 | 	sub	objptr, ##28176
1d81c     32 12 06 F6 | 	mov	arg01, #50
1d820     34 34 B0 FD | 	call	#__system___waitms
1d824     37 00 00 FF 
1d828     10 E4 05 F1 | 	add	objptr, ##28176
1d82c     F2 12 02 FB | 	rdlong	arg01, objptr
1d830     37 00 00 FF 
1d834     10 E4 85 F1 | 	sub	objptr, ##28176
1d838     14 12 06 F1 | 	add	arg01, #20
1d83c     20 00 80 FF 
1d840     09 01 58 FC | 	wrword	##16384, arg01
1d844     10 28 B0 FD | 	call	#_usbnew_spin2_start
1d848     37 00 00 FF 
1d84c     04 E4 05 F1 | 	add	objptr, ##28164
1d850     F2 FA 61 FC | 	wrlong	result1, objptr
1d854                 | '   mouse_limits[0] := xlim
1d854     0F 00 00 FF 
1d858     BC F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7868
1d85c     01 00 80 FF 
1d860     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
1d864                 | '   mouse_limits[1] := ylim
1d864     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
1d868     01 00 80 FF 
1d86c     FB AE 68 FC | 	wrlong	##599, ptr__usbnew_spin2_dat__
1d870     36 00 00 FF 
1d874     F3 E4 85 F1 | 	sub	objptr, ##27891
1d878     F2 12 02 F6 | 	mov	arg01, objptr
1d87c     11 E5 85 F1 | 	sub	objptr, #273
1d880     C4 12 06 F1 | 	add	arg01, #196
1d884                 | '   mouse_outptr := ptr
1d884     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
1d888     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
1d88c     0F 00 00 FF 
1d890     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
1d894     0E 00 00 FF 
1d898     B6 EA 05 F1 | 	add	ptr__dat__, ##7350
1d89c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
1d8a0     0E 00 00 FF 
1d8a4     B6 EA 85 F1 | 	sub	ptr__dat__, ##7350
1d8a8     10 12 06 F6 | 	mov	arg01, #16
1d8ac     28 0A B0 FD | 	call	#_hg010b_spin2_setspriteptr
1d8b0     10 12 06 F6 | 	mov	arg01, #16
1d8b4     20 14 06 F6 | 	mov	arg02, #32
1d8b8     20 16 06 F6 | 	mov	arg03, #32
1d8bc     A8 0A B0 FD | 	call	#_hg010b_spin2_setspritesize
1d8c0     09 12 C6 F9 | 	decod	arg01, #9
1d8c4     2C 15 06 F6 | 	mov	arg02, #300
1d8c8     E4 28 B0 FD | 	call	#_usbnew_spin2_mouse_move
1d8cc     F2 16 02 F6 | 	mov	arg03, objptr
1d8d0     50 00 00 FF 
1d8d4     1C E5 05 F1 | 	add	objptr, ##41244
1d8d8     F2 14 02 F6 | 	mov	arg02, objptr
1d8dc     0A 17 62 FC | 	wrlong	arg03, arg02
1d8e0     04 14 06 F1 | 	add	arg02, #4
1d8e4     0A F1 61 FC | 	wrlong	ptr__housekeeper_, arg02
1d8e8     EF 14 02 F6 | 	mov	arg02, entryptr__
1d8ec     1E FA 05 F6 | 	mov	result1, #30
1d8f0     28 E4 61 FD | 	setq	objptr
1d8f4     0A FB F1 FC | 	coginit	result1, arg02 wc
1d8f8     01 FA 65 C6 |  if_b	neg	result1, #1
1d8fc     04 E4 85 F1 | 	sub	objptr, #4
1d900     F2 FA 61 FC | 	wrlong	result1, objptr
1d904     01 00 00 FF 
1d908     90 E4 05 F1 | 	add	objptr, ##656
1d90c     F2 00 68 FC | 	wrlong	#0, objptr
1d910     1A 00 00 FF 
1d914     74 E5 85 F1 | 	sub	objptr, ##13684
1d918     F2 04 68 FC | 	wrlong	#2, objptr
1d91c     04 E4 05 F1 | 	add	objptr, #4
1d920     F2 26 69 FC | 	wrlong	#147, objptr
1d924     04 E4 05 F1 | 	add	objptr, #4
1d928     F2 34 69 FC | 	wrlong	#154, objptr
1d92c     04 E4 05 F1 | 	add	objptr, #4
1d930     F2 08 68 FC | 	wrlong	#4, objptr
1d934     04 E4 85 F1 | 	sub	objptr, #4
1d938     F2 16 02 FB | 	rdlong	arg03, objptr
1d93c     14 E4 85 F1 | 	sub	objptr, #20
1d940     F2 16 62 FC | 	wrlong	arg03, objptr
1d944     04 E4 05 F1 | 	add	objptr, #4
1d948     F2 00 68 FC | 	wrlong	#0, objptr
1d94c     04 E4 05 F1 | 	add	objptr, #4
1d950     F2 00 68 FC | 	wrlong	#0, objptr
1d954     19 00 00 FF 
1d958     E4 E4 05 F1 | 	add	objptr, ##13028
1d95c     F2 02 68 FC | 	wrlong	#1, objptr
1d960     01 00 00 FF 
1d964     9C E4 05 F1 | 	add	objptr, ##668
1d968     F2 00 68 FC | 	wrlong	#0, objptr
1d96c     01 00 00 FF 
1d970     00 EA 05 F1 | 	add	ptr__dat__, ##512
1d974     08 E4 05 F1 | 	add	objptr, #8
1d978     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
1d97c     04 E4 85 F1 | 	sub	objptr, #4
1d980     03 00 80 FF 
1d984     F2 3C 69 FC | 	wrlong	##1694, objptr
1d988     0C 00 00 FF 
1d98c     50 E5 85 F1 | 	sub	objptr, ##6480
1d990     F2 18 68 FC | 	wrlong	#12, objptr
1d994     45 00 00 FF 
1d998     64 E4 85 F1 | 	sub	objptr, ##35428
1d99c     01 00 00 FF 
1d9a0     00 EA 85 F1 | 	sub	ptr__dat__, ##512
1d9a4     94 DB BF FD | 	call	#_init_commands
1d9a8     C8 F6 BF FD | 	call	#_init_error_strings
1d9ac     4C EE BF FD | 	call	#_init_audio
1d9b0     F4 3F BF FD | 	call	#_do_new
1d9b4     37 00 00 FF 
1d9b8     3C E4 05 F1 | 	add	objptr, ##28220
1d9bc     F2 12 02 FB | 	rdlong	arg01, objptr
1d9c0     04 E4 85 F1 | 	sub	objptr, #4
1d9c4     F2 14 02 FB | 	rdlong	arg02, objptr
1d9c8     37 00 00 FF 
1d9cc     38 E4 85 F1 | 	sub	objptr, ##28216
1d9d0     B4 16 B0 FD | 	call	#_hg010b_spin2_cls
1d9d4     37 00 00 FF 
1d9d8     40 E4 05 F1 | 	add	objptr, ##28224
1d9dc     F2 12 02 FB | 	rdlong	arg01, objptr
1d9e0     37 00 00 FF 
1d9e4     40 E4 85 F1 | 	sub	objptr, ##28224
1d9e8     4C 15 B0 FD | 	call	#_hg010b_spin2_setfontfamily
1d9ec                 | ' 
1d9ec                 | ' leading_spaces:=amount
1d9ec     01 00 00 FF 
1d9f0     B6 E4 05 F1 | 	add	objptr, ##694
1d9f4     F2 04 68 FC | 	wrlong	#2, objptr
1d9f8     01 00 00 FF 
1d9fc     B6 E4 85 F1 | 	sub	objptr, ##694
1da00     88 01 00 FF 
1da04     94 1E 06 F6 | 	mov	local01, ##@LR__5588
1da08     3D 12 06 F6 | 	mov	arg01, #61
1da0c     3C 14 06 F6 | 	mov	arg02, #60
1da10     3B 16 06 F6 | 	mov	arg03, #59
1da14     3A 18 06 F6 | 	mov	arg04, #58
1da18     08 7A B0 FD | 	call	#__system___vfs_open_sdcardx
1da1c     FD 14 02 F6 | 	mov	arg02, result1
1da20     0F 13 02 F6 | 	mov	arg01, local01
1da24     08 33 B0 FD | 	call	#__system___mount
1da28     88 01 00 FF 
1da2c     98 12 06 F6 | 	mov	arg01, ##@LR__5589
1da30     BC 35 B0 FD | 	call	#__system___chdir
1da34     88 01 00 FF 
1da38     A0 1E 06 F6 | 	mov	local01, ##@LR__5590
1da3c     4A 00 00 FF 
1da40     94 E4 05 F1 | 	add	objptr, ##38036
1da44     F2 1E 62 FC | 	wrlong	local01, objptr
1da48     13 00 00 FF 
1da4c     60 E4 85 F1 | 	sub	objptr, ##9824
1da50     F2 12 02 FB | 	rdlong	arg01, objptr
1da54     37 00 00 FF 
1da58     34 E4 85 F1 | 	sub	objptr, ##28212
1da5c     01 12 66 F0 | 	shl	arg01, #1
1da60     01 14 06 F6 | 	mov	arg02, #1
1da64     10 15 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1da68                 | ' init_commands
1da68                 | ' init_error_strings
1da68                 | ' init_audio
1da68                 | ' do_new
1da68                 | ' cls(ink, paper)
1da68                 | ' v.setfontfamily(font) 				' use ST Mono font
1da68                 | ' v.setleadingspaces(2)
1da68                 | ' mount "/sd", _vfs_open_sdcard()
1da68                 | ' chdir "/sd/bas"
1da68                 | ' currentdir$="/sd/bas"
1da68                 | ' position 2*editor_spaces,1 : print ver$
1da68     00 12 06 F6 | 	mov	arg01, #0
1da6c     58 89 B0 FD | 	call	#__system___getiolock_0540
1da70     FD 12 02 F6 | 	mov	arg01, result1
1da74     EC 2E B0 FD | 	call	#__system___lockmem
1da78     18 00 00 FF 
1da7c     4C EB 05 F1 | 	add	ptr__dat__, ##12620
1da80     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
1da84     18 00 00 FF 
1da88     4C EB 85 F1 | 	sub	ptr__dat__, ##12620
1da8c     00 12 06 F6 | 	mov	arg01, #0
1da90     00 16 06 F6 | 	mov	arg03, #0
1da94     C0 3B B0 FD | 	call	#__system___basic_print_string
1da98     00 12 06 F6 | 	mov	arg01, #0
1da9c     0A 14 06 F6 | 	mov	arg02, #10
1daa0     00 16 06 F6 | 	mov	arg03, #0
1daa4     58 3B B0 FD | 	call	#__system___basic_print_char
1daa8     00 12 06 F6 | 	mov	arg01, #0
1daac     18 89 B0 FD | 	call	#__system___getiolock_0540
1dab0     FD 00 68 FC | 	wrlong	#0, result1
1dab4     51 00 00 FF 
1dab8     AC E5 05 F1 | 	add	objptr, ##41900
1dabc     F2 12 02 FB | 	rdlong	arg01, objptr
1dac0     0E 00 00 FF 
1dac4     50 E5 85 F1 | 	sub	objptr, ##7504
1dac8     F2 1E 02 FB | 	rdlong	local01, objptr
1dacc     43 00 00 FF 
1dad0     5C E4 85 F1 | 	sub	objptr, ##34396
1dad4     0F 13 82 F1 | 	sub	arg01, local01
1dad8     00 14 06 F6 | 	mov	arg02, #0
1dadc     0A 16 06 F6 | 	mov	arg03, #10
1dae0     50 51 B0 FD | 	call	#__system__Number_S
1dae4     FD 12 02 F6 | 	mov	arg01, result1
1dae8     88 01 00 FF 
1daec     A8 14 06 F6 | 	mov	arg02, ##@LR__5591
1daf0     CC 2E B0 FD | 	call	#__system___string_concat
1daf4     FD 1E 02 F6 | 	mov	local01, result1
1daf8     50 00 00 FF 
1dafc     10 E5 05 F1 | 	add	objptr, ##41232
1db00     F2 1E 62 FC | 	wrlong	local01, objptr
1db04     50 00 00 FF 
1db08     10 E5 85 F1 | 	sub	objptr, ##41232
1db0c                 | ' free$=decuns$(memtop-programptr)+" BASIC bytes free" : print free$
1db0c     00 12 06 F6 | 	mov	arg01, #0
1db10     B4 88 B0 FD | 	call	#__system___getiolock_0540
1db14     FD 12 02 F6 | 	mov	arg01, result1
1db18     48 2E B0 FD | 	call	#__system___lockmem
1db1c     50 00 00 FF 
1db20     10 E5 05 F1 | 	add	objptr, ##41232
1db24     F2 14 02 FB | 	rdlong	arg02, objptr
1db28     50 00 00 FF 
1db2c     10 E5 85 F1 | 	sub	objptr, ##41232
1db30     00 12 06 F6 | 	mov	arg01, #0
1db34     00 16 06 F6 | 	mov	arg03, #0
1db38     1C 3B B0 FD | 	call	#__system___basic_print_string
1db3c     00 12 06 F6 | 	mov	arg01, #0
1db40     0A 14 06 F6 | 	mov	arg02, #10
1db44     00 16 06 F6 | 	mov	arg03, #0
1db48     B4 3A B0 FD | 	call	#__system___basic_print_char
1db4c     00 12 06 F6 | 	mov	arg01, #0
1db50     74 88 B0 FD | 	call	#__system___getiolock_0540
1db54     FD 00 68 FC | 	wrlong	#0, result1
1db58     37 00 00 FF 
1db5c     34 E4 05 F1 | 	add	objptr, ##28212
1db60     F2 12 02 FB | 	rdlong	arg01, objptr
1db64     37 00 00 FF 
1db68     34 E4 85 F1 | 	sub	objptr, ##28212
1db6c     01 12 66 F0 | 	shl	arg01, #1
1db70     04 14 06 F6 | 	mov	arg02, #4
1db74     00 14 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1db78                 | ' position 2*editor_spaces,4 : print "Ready"
1db78     00 12 06 F6 | 	mov	arg01, #0
1db7c     48 88 B0 FD | 	call	#__system___getiolock_0540
1db80     FD 12 02 F6 | 	mov	arg01, result1
1db84     DC 2D B0 FD | 	call	#__system___lockmem
1db88     88 01 00 FF 
1db8c     BA 14 06 F6 | 	mov	arg02, ##@LR__5592
1db90     00 12 06 F6 | 	mov	arg01, #0
1db94     00 16 06 F6 | 	mov	arg03, #0
1db98     BC 3A B0 FD | 	call	#__system___basic_print_string
1db9c     00 12 06 F6 | 	mov	arg01, #0
1dba0     0A 14 06 F6 | 	mov	arg02, #10
1dba4     00 16 06 F6 | 	mov	arg03, #0
1dba8     54 3A B0 FD | 	call	#__system___basic_print_char
1dbac     00 12 06 F6 | 	mov	arg01, #0
1dbb0     14 88 B0 FD | 	call	#__system___getiolock_0540
1dbb4     FD 00 68 FC | 	wrlong	#0, result1
1dbb8     00 14 06 F6 | 	mov	arg02, #0
1dbbc     01 14 D6 F7 | 	test	arg02, #1 wc
1dbc0     5A 4C 64 FD | 	drvc	#38
1dbc4     01 14 D6 F7 | 	test	arg02, #1 wc
1dbc8     5A 4E 64 FD | 	drvc	#39
1dbcc     88 01 00 FF 
1dbd0     C0 1E 06 F6 | 	mov	local01, ##@LR__5593
1dbd4     51 00 00 FF 
1dbd8     D8 E5 05 F1 | 	add	objptr, ##41944
1dbdc     F2 1E 62 FC | 	wrlong	local01, objptr
1dbe0     04 E4 05 F1 | 	add	objptr, #4
1dbe4     FF FF FF FF 
1dbe8     F2 FE 6B FC | 	wrlong	##-1, objptr
1dbec     51 00 00 FF 
1dbf0     DC E5 85 F1 | 	sub	objptr, ##41948
1dbf4                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
1dbf4                 | ' loadname="noname.bas"
1dbf4                 | ' do_insert=-1
1dbf4                 | ' 
1dbf4                 | ' '-------------------------------------------------------------------------------------------------------- 
1dbf4                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
1dbf4                 | ' '--------------------------------------------------------------------------------------------------------
1dbf4                 | ' 
1dbf4                 | ' do
1dbf4                 | LR__2380
1dbf4     0C 2C BE FD | 	call	#_edit
1dbf8     FD 1E 02 F6 | 	mov	local01, result1
1dbfc     37 00 00 FF 
1dc00     1C E4 05 F1 | 	add	objptr, ##28188
1dc04     F2 1E 62 FC | 	wrlong	local01, objptr
1dc08     37 00 00 FF 
1dc0c     1C E4 85 F1 | 	sub	objptr, ##28188
1dc10     64 3A BE FD | 	call	#_interpret
1dc14     88 01 00 FF 
1dc18     CB 1E 06 F6 | 	mov	local01, ##@LR__5594
1dc1c     37 00 00 FF 
1dc20     1C E4 05 F1 | 	add	objptr, ##28188
1dc24     F2 1E 62 FC | 	wrlong	local01, objptr
1dc28     37 00 00 FF 
1dc2c     1C E4 85 F1 | 	sub	objptr, ##28188
1dc30     C0 FF 9F FD | 	jmp	#LR__2380
1dc34     A7 F0 03 F6 | 	mov	ptra, fp
1dc38     B2 00 A0 FD | 	call	#popregs_
1dc3c                 | _program_ret
1dc3c     2D 00 64 FD | 	ret
1dc40                 | 
1dc40                 | ' '' this is not a main program.
1dc40                 | ' 
1dc40                 | ' '****************************************************************************************************************
1dc40                 | ' '                                                                                                             	*
1dc40                 | ' 'Start the driver  at pins 'base'                            					rev 20230829 	*
1dc40                 | ' '                                                                                                            	*
1dc40                 | ' ' base - HDMI base pin												*
1dc40                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
1dc40                 | ' '														*
1dc40                 | ' '														*
1dc40                 | ' '****************************************************************************************************************
1dc40                 | ' 
1dc40                 | ' pub start(base,mb):result |i
1dc40                 | _hg010b_spin2_start
1dc40                 | ' 
1dc40                 | ' '--------------------------- initialize pointers and variables
1dc40                 | ' 
1dc40                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
1dc40     34 E4 05 F1 | 	add	objptr, #52
1dc44     F2 FA 01 F6 | 	mov	result1, objptr
1dc48     28 E4 85 F1 | 	sub	objptr, #40
1dc4c     F2 FA 61 FC | 	wrlong	result1, objptr
1dc50                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
1dc50                 | ' hdmibase:=base							' HDMI base pin, 8*n
1dc50     18 E4 05 F1 | 	add	objptr, #24
1dc54     F2 12 62 FC | 	wrlong	arg01, objptr
1dc58                 | ' mailbox_ptr:=mb		
1dc58     04 E4 05 F1 | 	add	objptr, #4
1dc5c     F2 14 62 FC | 	wrlong	arg02, objptr
1dc60                 | ' mailbox0:=mb				' PSRAM mailbox pointer
1dc60     C1 E5 05 F1 | 	add	objptr, #449
1dc64     F2 14 62 FC | 	wrlong	arg02, objptr
1dc68                 | ' sprite_ptr:=@spr1ptr
1dc68     D8 E4 85 F1 | 	sub	objptr, #216
1dc6c     F2 FA 01 F6 | 	mov	result1, objptr
1dc70     E5 E4 85 F1 | 	sub	objptr, #229
1dc74     F2 FA 61 FC | 	wrlong	result1, objptr
1dc78                 | ' 
1dc78                 | ' 		'
1dc78                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
1dc78     E5 E4 05 F1 | 	add	objptr, #229
1dc7c     F2 FA 01 FB | 	rdlong	result1, objptr
1dc80     D0 FA 05 F1 | 	add	result1, #208
1dc84     FD 10 58 FC | 	wrword	#8, result1
1dc88                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
1dc88     F2 16 02 FB | 	rdlong	arg03, objptr
1dc8c     D2 16 06 F1 | 	add	arg03, #210
1dc90     0B 21 58 FC | 	wrword	#16, arg03
1dc94                 | ' leading_spaces:=0				'
1dc94     A5 E5 05 F1 | 	add	objptr, #421
1dc98     F2 00 68 FC | 	wrlong	#0, objptr
1dc9c                 | ' 
1dc9c                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
1dc9c     99 E4 85 F1 | 	sub	objptr, #153
1dca0     00 00 A0 FF 
1dca4     F2 0E 68 FC | 	wrlong	##1073741831, objptr
1dca8                 | ' emptydl[1]:=0
1dca8     04 E4 05 F1 | 	add	objptr, #4
1dcac     F2 00 68 FC | 	wrlong	#0, objptr
1dcb0                 | ' 
1dcb0                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
1dcb0                 | ' 
1dcb0                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
1dcb0     28 E5 85 F1 | 	sub	objptr, #296
1dcb4     F2 02 68 FC | 	wrlong	#1, objptr
1dcb8                 | ' if s_debug<>0
1dcb8                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
1dcb8     20 00 80 FF 
1dcbc     F2 00 68 FC | 	wrlong	##16384, objptr
1dcc0     F9 E4 85 F1 | 	sub	objptr, #249
1dcc4                 | ' setmode()							' set the mode, see below
1dcc4     EC 02 B0 FD | 	call	#_hg010b_spin2_setmode
1dcc8                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
1dcc8     49 E4 05 F1 | 	add	objptr, #73
1dccc     F2 FA 01 F6 | 	mov	result1, objptr
1dcd0     35 E4 85 F1 | 	sub	objptr, #53
1dcd4     F2 FA 61 FC | 	wrlong	result1, objptr
1dcd8                 | ' cursor_ptr:=@cursor_x						
1dcd8     28 E4 05 F1 | 	add	objptr, #40
1dcdc     F2 16 02 F6 | 	mov	arg03, objptr
1dce0     2C E4 85 F1 | 	sub	objptr, #44
1dce4     F2 16 62 FC | 	wrlong	arg03, objptr
1dce8                 | ' fontnum:=0  							' start with a PC type font 
1dce8     55 E4 05 F1 | 	add	objptr, #85
1dcec     F2 00 68 FC | 	wrlong	#0, objptr
1dcf0                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
1dcf0     1C E4 05 F1 | 	add	objptr, #28
1dcf4     F2 12 02 F6 | 	mov	arg01, objptr
1dcf8     81 E4 85 F1 | 	sub	objptr, #129
1dcfc     10 00 00 FF 
1dd00     80 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8320
1dd04     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
1dd08     10 00 00 FF 
1dd0c     80 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8320
1dd10     10 16 06 F6 | 	mov	arg03, #16
1dd14     6C 2B B0 FD | 	call	#__system____builtin_memmove
1dd18                 | ' leading_spaces:=0
1dd18     01 00 00 FF 
1dd1c     B6 E4 05 F1 | 	add	objptr, ##694
1dd20     F2 00 68 FC | 	wrlong	#0, objptr
1dd24     01 00 00 FF 
1dd28     B6 E4 85 F1 | 	sub	objptr, ##694
1dd2c                 | ' '---------------------------- initialize a cursor (MSDOS type)
1dd2c                 | ' 
1dd2c                 | ' initcursor(154)
1dd2c     9A 12 06 F6 | 	mov	arg01, #154
1dd30     4C 00 B0 FD | 	call	#_hg010b_spin2_initcursor
1dd34                 | ' 
1dd34                 | ' '---------------------------- start the cog
1dd34                 | ' 
1dd34                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
1dd34     10 00 00 FF 
1dd38     90 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8336
1dd3c     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
1dd40     10 00 00 FF 
1dd44     90 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8336
1dd48     14 E4 05 F1 | 	add	objptr, #20
1dd4c     10 FA 05 F6 | 	mov	result1, #16
1dd50     28 E4 61 FD | 	setq	objptr
1dd54     0A FB F1 FC | 	coginit	result1, arg02 wc
1dd58     01 FA 65 C6 |  if_b	neg	result1, #1
1dd5c     1C E4 05 F1 | 	add	objptr, #28
1dd60     F2 FA 61 FC | 	wrlong	result1, objptr
1dd64     30 E4 85 F1 | 	sub	objptr, #48
1dd68                 | ' waitms(40)							' wait for stabilize
1dd68     28 12 06 F6 | 	mov	arg01, #40
1dd6c     E8 2E B0 FD | 	call	#__system___waitms
1dd70                 | ' return cog							' return the driver's cog #
1dd70     30 E4 05 F1 | 	add	objptr, #48
1dd74     F2 FA 01 FB | 	rdlong	result1, objptr
1dd78     30 E4 85 F1 | 	sub	objptr, #48
1dd7c                 | _hg010b_spin2_start_ret
1dd7c     2D 00 64 FD | 	ret
1dd80                 | 
1dd80                 | ' 
1dd80                 | ' 
1dd80                 | ' '**************************************************************************************************************** 
1dd80                 | ' '                                                                                                             	*
1dd80                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
1dd80                 | ' '  Mode number - see start() above or bits below								*
1dd80                 | ' '                                                                                                             	*
1dd80                 | ' '****************************************************************************************************************
1dd80                 | ' 
1dd80                 | ' '---------------------------- initialize a cursor (MSDOS type)
1dd80                 | ' pub initcursor(color) |i
1dd80                 | _hg010b_spin2_initcursor
1dd80     03 4A 05 F6 | 	mov	COUNT_, #3
1dd84     A8 00 A0 FD | 	call	#pushregs_
1dd88     09 1F 02 F6 | 	mov	local01, arg01
1dd8c                 | ' 
1dd8c                 | ' cursor_x:=0							' place the cursor at 0:0
1dd8c     3C E4 05 F1 | 	add	objptr, #60
1dd90     F2 00 58 FC | 	wrword	#0, objptr
1dd94                 | ' cursor_y:=0
1dd94     02 E4 05 F1 | 	add	objptr, #2
1dd98     F2 00 48 FC | 	wrbyte	#0, objptr
1dd9c                 | ' repeat i from 0 to 111
1dd9c     00 20 06 F6 | 	mov	local02, #0
1dda0     F8 E5 05 F1 | 	add	objptr, #504
1dda4     97 1A 48 FB | 	callpa	#(@LR__2392-@LR__2390)>>2,fcache_load_ptr_
1dda8                 | LR__2390
1dda8                 | '   cursor[i]:=0
1dda8     10 23 02 F6 | 	mov	local03, local02
1ddac     F2 22 02 F1 | 	add	local03, objptr
1ddb0     11 01 48 FC | 	wrbyte	#0, local03
1ddb4     01 20 06 F1 | 	add	local02, #1
1ddb8     70 20 56 F2 | 	cmps	local02, #112 wc
1ddbc     E8 FF 9F CD |  if_b	jmp	#LR__2390
1ddc0                 | ' repeat i from 112 to 127
1ddc0     70 20 06 F6 | 	mov	local02, #112
1ddc4                 | LR__2391
1ddc4                 | '   cursor[i]:=color  
1ddc4     10 23 02 F6 | 	mov	local03, local02
1ddc8     F2 22 02 F1 | 	add	local03, objptr
1ddcc     11 1F 42 FC | 	wrbyte	local01, local03
1ddd0     01 20 06 F1 | 	add	local02, #1
1ddd4     80 20 16 F2 | 	cmp	local02, #128 wc
1ddd8     E8 FF 9F CD |  if_b	jmp	#LR__2391
1dddc                 | LR__2392
1dddc                 | ' 'repeat i from 0 to 127
1dddc                 | ' '  if ((i/8)//2)
1dddc                 | ' '    cursor[i]:=15
1dddc                 | ' '  else
1dddc                 | ' '    cursor[i]:=0
1dddc                 | ' '  if i>=120    
1dddc                 | ' '    cursor[i]:=40
1dddc                 | ' setspriteptr(17,@cursor)
1dddc     F2 14 02 F6 | 	mov	arg02, objptr
1dde0     01 00 00 FF 
1dde4     36 E4 85 F1 | 	sub	objptr, ##566
1dde8     11 12 06 F6 | 	mov	arg01, #17
1ddec     E8 04 B0 FD | 	call	#_hg010b_spin2_setspriteptr
1ddf0                 | ' setspritesize(17,8,16)
1ddf0     11 12 06 F6 | 	mov	arg01, #17
1ddf4     08 14 06 F6 | 	mov	arg02, #8
1ddf8     10 16 06 F6 | 	mov	arg03, #16
1ddfc     68 05 B0 FD | 	call	#_hg010b_spin2_setspritesize
1de00                 | ' setspritepos(17,0,0)
1de00     11 12 06 F6 | 	mov	arg01, #17
1de04     00 14 06 F6 | 	mov	arg02, #0
1de08     00 16 06 F6 | 	mov	arg03, #0
1de0c     F0 04 B0 FD | 	call	#_hg010b_spin2_setspritepos
1de10                 | ' cursorshape:=14
1de10     0B 00 00 FF 
1de14     C6 E4 05 F1 | 	add	objptr, ##5830
1de18     F2 1C 68 FC | 	wrlong	#14, objptr
1de1c                 | ' cursorcolor:=color
1de1c     04 E4 85 F1 | 	sub	objptr, #4
1de20     F2 1E 62 FC | 	wrlong	local01, objptr
1de24     0B 00 00 FF 
1de28     C2 E4 85 F1 | 	sub	objptr, ##5826
1de2c     A7 F0 03 F6 | 	mov	ptra, fp
1de30     B2 00 A0 FD | 	call	#popregs_
1de34                 | _hg010b_spin2_initcursor_ret
1de34     2D 00 64 FD | 	ret
1de38                 | 
1de38                 | ' 
1de38                 | ' pub setcursorshape(shape) | i
1de38                 | _hg010b_spin2_setcursorshape
1de38                 | ' 
1de38                 | ' cursorshape:=shape
1de38     0B 00 00 FF 
1de3c     C6 E4 05 F1 | 	add	objptr, ##5830
1de40     F2 12 62 FC | 	wrlong	arg01, objptr
1de44                 | ' repeat i from 0 to (8*cursorshape)-1
1de44     00 00 06 F6 | 	mov	_var01, #0
1de48     09 03 02 F6 | 	mov	_var02, arg01
1de4c     03 02 66 F0 | 	shl	_var02, #3
1de50     01 02 86 F1 | 	sub	_var02, #1
1de54     00 02 56 F2 | 	cmps	_var02, #0 wc
1de58     01 04 86 F6 | 	negc	_var03, #1
1de5c     02 07 02 F6 | 	mov	_var04, _var03
1de60     02 03 02 F1 | 	add	_var02, _var03
1de64     0A 00 00 FF 
1de68     90 E4 85 F1 | 	sub	objptr, ##5264
1de6c     97 0C 48 FB | 	callpa	#(@LR__2401-@LR__2400)>>2,fcache_load_ptr_
1de70                 | LR__2400
1de70                 | '   cursor[i]:=0
1de70     00 05 02 F6 | 	mov	_var03, _var01
1de74     F2 04 02 F1 | 	add	_var03, objptr
1de78     02 01 48 FC | 	wrbyte	#0, _var03
1de7c     03 01 02 F1 | 	add	_var01, _var04
1de80     01 01 0A F2 | 	cmp	_var01, _var02 wz
1de84     E8 FF 9F 5D |  if_ne	jmp	#LR__2400
1de88                 | LR__2401
1de88                 | ' repeat i from 8*cursorshape to 127
1de88     0A 00 00 FF 
1de8c     90 E4 05 F1 | 	add	objptr, ##5264
1de90     F2 06 02 FB | 	rdlong	_var04, objptr
1de94     03 01 02 F6 | 	mov	_var01, _var04
1de98     03 00 66 F0 | 	shl	_var01, #3
1de9c     0B 00 00 FF 
1dea0     C6 E4 85 F1 | 	sub	objptr, ##5830
1dea4     03 06 66 F0 | 	shl	_var04, #3
1dea8     80 06 56 F2 | 	cmps	_var04, #128 wc
1deac     01 04 A6 F6 | 	negnc	_var03, #1
1deb0     7F 02 06 F6 | 	mov	_var02, #127
1deb4     02 03 02 F1 | 	add	_var02, _var03
1deb8     97 1A 48 FB | 	callpa	#(@LR__2403-@LR__2402)>>2,fcache_load_ptr_
1debc                 | LR__2402
1debc                 | '   cursor[i]:=cursorcolor
1debc     00 07 02 F6 | 	mov	_var04, _var01
1dec0     01 00 00 FF 
1dec4     36 E4 05 F1 | 	add	objptr, ##566
1dec8     F2 06 02 F1 | 	add	_var04, objptr
1decc     0A 00 00 FF 
1ded0     8C E4 05 F1 | 	add	objptr, ##5260
1ded4     F2 12 02 FB | 	rdlong	arg01, objptr
1ded8     0B 00 00 FF 
1dedc     C2 E4 85 F1 | 	sub	objptr, ##5826
1dee0     03 13 42 FC | 	wrbyte	arg01, _var04
1dee4     02 01 02 F1 | 	add	_var01, _var03
1dee8     01 01 0A F2 | 	cmp	_var01, _var02 wz
1deec     CC FF 9F 5D |  if_ne	jmp	#LR__2402
1def0                 | LR__2403
1def0                 | _hg010b_spin2_setcursorshape_ret
1def0     2D 00 64 FD | 	ret
1def4                 | 
1def4                 | ' 
1def4                 | ' pub setcursorcolor(color) | i
1def4                 | _hg010b_spin2_setcursorcolor
1def4                 | ' 
1def4                 | ' cursorcolor:=color
1def4     0B 00 00 FF 
1def8     C2 E4 05 F1 | 	add	objptr, ##5826
1defc     F2 12 62 FC | 	wrlong	arg01, objptr
1df00                 | ' repeat i from 0 to (8*cursorshape)-1
1df00     00 12 06 F6 | 	mov	arg01, #0
1df04     04 E4 05 F1 | 	add	objptr, #4
1df08     F2 00 02 FB | 	rdlong	_var01, objptr
1df0c     03 00 66 F0 | 	shl	_var01, #3
1df10     01 00 86 F1 | 	sub	_var01, #1
1df14     00 00 56 F2 | 	cmps	_var01, #0 wc
1df18     01 02 86 F6 | 	negc	_var02, #1
1df1c     01 05 02 F6 | 	mov	_var03, _var02
1df20     01 01 02 F1 | 	add	_var01, _var02
1df24     0A 00 00 FF 
1df28     90 E4 85 F1 | 	sub	objptr, ##5264
1df2c     97 0C 48 FB | 	callpa	#(@LR__2411-@LR__2410)>>2,fcache_load_ptr_
1df30                 | LR__2410
1df30                 | '   cursor[i]:=0
1df30     09 03 02 F6 | 	mov	_var02, arg01
1df34     F2 02 02 F1 | 	add	_var02, objptr
1df38     01 01 48 FC | 	wrbyte	#0, _var02
1df3c     02 13 02 F1 | 	add	arg01, _var03
1df40     00 13 0A F2 | 	cmp	arg01, _var01 wz
1df44     E8 FF 9F 5D |  if_ne	jmp	#LR__2410
1df48                 | LR__2411
1df48                 | ' repeat i from 8*cursorshape to 127
1df48     0A 00 00 FF 
1df4c     90 E4 05 F1 | 	add	objptr, ##5264
1df50     F2 04 02 FB | 	rdlong	_var03, objptr
1df54     02 13 02 F6 | 	mov	arg01, _var03
1df58     03 12 66 F0 | 	shl	arg01, #3
1df5c     0B 00 00 FF 
1df60     C6 E4 85 F1 | 	sub	objptr, ##5830
1df64     03 04 66 F0 | 	shl	_var03, #3
1df68     80 04 56 F2 | 	cmps	_var03, #128 wc
1df6c     01 02 A6 F6 | 	negnc	_var02, #1
1df70     7F 00 06 F6 | 	mov	_var01, #127
1df74     01 01 02 F1 | 	add	_var01, _var02
1df78     97 1A 48 FB | 	callpa	#(@LR__2413-@LR__2412)>>2,fcache_load_ptr_
1df7c                 | LR__2412
1df7c                 | '   cursor[i]:=cursorcolor
1df7c     09 05 02 F6 | 	mov	_var03, arg01
1df80     01 00 00 FF 
1df84     36 E4 05 F1 | 	add	objptr, ##566
1df88     F2 04 02 F1 | 	add	_var03, objptr
1df8c     0A 00 00 FF 
1df90     8C E4 05 F1 | 	add	objptr, ##5260
1df94     F2 06 02 FB | 	rdlong	_var04, objptr
1df98     0B 00 00 FF 
1df9c     C2 E4 85 F1 | 	sub	objptr, ##5826
1dfa0     02 07 42 FC | 	wrbyte	_var04, _var03
1dfa4     01 13 02 F1 | 	add	arg01, _var02
1dfa8     00 13 0A F2 | 	cmp	arg01, _var01 wz
1dfac     CC FF 9F 5D |  if_ne	jmp	#LR__2412
1dfb0                 | LR__2413
1dfb0                 | _hg010b_spin2_setcursorcolor_ret
1dfb0     2D 00 64 FD | 	ret
1dfb4                 | 
1dfb4                 | '   
1dfb4                 | '   
1dfb4                 | '   
1dfb4                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
1dfb4                 | _hg010b_spin2_setmode
1dfb4     02 4A 05 F6 | 	mov	COUNT_, #2
1dfb8     A8 00 A0 FD | 	call	#pushregs_
1dfbc                 | ' 
1dfbc                 | ' 
1dfbc                 | ' dl_ptr:=@emptydl[0]
1dfbc     01 00 00 FF 
1dfc0     1D E4 05 F1 | 	add	objptr, ##541
1dfc4     F2 1A 02 F6 | 	mov	arg05, objptr
1dfc8     FD E5 85 F1 | 	sub	objptr, #509
1dfcc     F2 1A 62 FC | 	wrlong	arg05, objptr
1dfd0                 | ' 
1dfd0                 | ' if cog>0 
1dfd0     10 E4 05 F1 | 	add	objptr, #16
1dfd4     F2 1A 02 FB | 	rdlong	arg05, objptr
1dfd8     30 E4 85 F1 | 	sub	objptr, #48
1dfdc     01 1A 56 F2 | 	cmps	arg05, #1 wc
1dfe0                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
1dfe0     01 12 06 36 |  if_ae	mov	arg01, #1
1dfe4     30 10 B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
1dfe8                 | ' xres:=1024
1dfe8     01 00 00 FF 
1dfec     26 E4 05 F1 | 	add	objptr, ##550
1dff0     02 00 80 FF 
1dff4     F2 00 68 FC | 	wrlong	##1024, objptr
1dff8                 | ' yres:=600
1dff8     04 E4 05 F1 | 	add	objptr, #4
1dffc     01 00 80 FF 
1e000     F2 B0 68 FC | 	wrlong	##600, objptr
1e004                 | ' ppl:=(timings[3])
1e004     10 00 00 FF 
1e008     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8268
1e00c     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
1e010     51 E5 85 F1 | 	sub	objptr, #337
1e014     F2 1A 62 FC | 	wrlong	arg05, objptr
1e018                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
1e018     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
1e01c     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
1e020     01 1E 66 F0 | 	shl	local01, #1
1e024     80 E4 85 F1 | 	sub	objptr, #128
1e028     F2 1E 62 FC | 	wrlong	local01, objptr
1e02c                 | ' cpl1:=cpl '' todo remove
1e02c     04 E4 05 F1 | 	add	objptr, #4
1e030     F2 1E 62 FC | 	wrlong	local01, objptr
1e034                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
1e034     02 00 00 FF 
1e038     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##1052
1e03c     41 E4 85 F1 | 	sub	objptr, #65
1e040     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
1e044                 | ' repeat i from 0 to 3
1e044     00 20 06 F6 | 	mov	local02, #0
1e048     02 00 00 FF 
1e04c     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
1e050     08 E4 05 F1 | 	add	objptr, #8
1e054     97 20 48 FB | 	callpa	#(@LR__2421-@LR__2420)>>2,fcache_load_ptr_
1e058                 | LR__2420
1e058                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
1e058     10 1F 02 F6 | 	mov	local01, local02
1e05c     02 1E 66 F0 | 	shl	local01, #2
1e060     F7 1E 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
1e064     F2 1A 02 FB | 	rdlong	arg05, objptr
1e068     11 1A 66 F0 | 	shl	arg05, #17
1e06c     0F 1F 02 FB | 	rdlong	local01, local01
1e070     0D 1F 02 F1 | 	add	local01, arg05
1e074     80 40 38 FF 
1e078     00 1E 06 F1 | 	add	local01, ##1887502336
1e07c     10 1B 02 F6 | 	mov	arg05, local02
1e080     02 1A 66 F0 | 	shl	arg05, #2
1e084     F7 1A 02 F1 | 	add	arg05, ptr__hg010b_spin2_dat__
1e088     0D 1F 62 FC | 	wrlong	local01, arg05
1e08c     01 20 06 F1 | 	add	local02, #1
1e090     04 20 56 F2 | 	cmps	local02, #4 wc
1e094     C0 FF 9F CD |  if_b	jmp	#LR__2420
1e098                 | LR__2421
1e098     24 E4 85 F1 | 	sub	objptr, #36
1e09c                 | ' clkfreq:=timings[9]					    	' set the clock frequency for the mode
1e09c     24 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #36
1e0a0     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
1e0a4     14 1E 66 FC | 	wrlong	local01, #20
1e0a8                 | ' hubset(timings[10])
1e0a8     04 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #4
1e0ac     F7 12 02 FB | 	rdlong	arg01, ptr__hg010b_spin2_dat__
1e0b0     10 00 00 FF 
1e0b4     68 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8296
1e0b8     00 12 62 FD | 	hubset	arg01
1e0bc                 | ' waitms(1)                                                   	' wait for stabilization
1e0bc     01 12 06 F6 | 	mov	arg01, #1
1e0c0     94 2B B0 FD | 	call	#__system___waitms
1e0c4     10 00 00 FF 
1e0c8     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8300
1e0cc     F7 20 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
1e0d0     61 E4 05 F1 | 	add	objptr, #97
1e0d4     F2 20 62 FC | 	wrlong	local02, objptr
1e0d8     10 1F 52 F6 | 	abs	local01, local02 wc
1e0dc     04 1E 46 F0 | 	shr	local01, #4
1e0e0     0F 1F 82 F6 | 	negc	local01, local01
1e0e4     9C E4 05 F1 | 	add	objptr, #156
1e0e8     F2 1E 62 FC | 	wrlong	local01, objptr
1e0ec     A4 E4 85 F1 | 	sub	objptr, #164
1e0f0     F2 20 02 FB | 	rdlong	local02, objptr
1e0f4     08 E4 05 F1 | 	add	objptr, #8
1e0f8     F2 1E 02 FB | 	rdlong	local01, objptr
1e0fc     0F 21 02 FD | 	qmul	local02, local01
1e100                 | ' lines:=timings[11]
1e100                 | ' t_lines:=lines/16
1e100                 | ' buflen:=cpl*lines						' framebuffer length in longs
1e100     29 E4 85 F1 | 	sub	objptr, #41
1e104     19 1E C6 F9 | 	decod	local01, #25
1e108     10 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #16
1e10c     18 20 62 FD | 	getqx	local02
1e110     F2 20 62 FC | 	wrlong	local02, objptr
1e114     38 E4 85 F1 | 	sub	objptr, #56
1e118     02 20 66 F0 | 	shl	local02, #2
1e11c     10 1F 82 F1 | 	sub	local01, local02
1e120     F2 1E 62 FC | 	wrlong	local01, objptr
1e124     FD E4 05 F1 | 	add	objptr, #253
1e128     F2 20 02 FB | 	rdlong	local02, objptr
1e12c     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
1e130     0D 21 02 FD | 	qmul	local02, arg05
1e134                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
1e134                 | ' textbuf_ptr:=buf_ptr-t_lines*timings[7]
1e134     F9 E4 85 F1 | 	sub	objptr, #249
1e138                 | ' mode_ptr:=@timings						' set pointers to timings
1e138     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #28
1e13c                 | ' graphmode:=1024+512+192+48							' det global variable
1e13c                 | ' makedl(graphmode)							' make a DL for the mode
1e13c     03 00 00 FF 
1e140     F0 12 06 F6 | 	mov	arg01, ##1776
1e144     18 20 62 FD | 	getqx	local02
1e148     10 1F 82 F1 | 	sub	local01, local02
1e14c     F2 1E 62 FC | 	wrlong	local01, objptr
1e150     14 E4 05 F1 | 	add	objptr, #20
1e154     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
1e158     79 E4 05 F1 | 	add	objptr, #121
1e15c     03 00 80 FF 
1e160     F2 E0 69 FC | 	wrlong	##1776, objptr
1e164     91 E4 85 F1 | 	sub	objptr, #145
1e168     10 00 00 FF 
1e16c     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8256
1e170     E0 00 B0 FD | 	call	#_hg010b_spin2_makedl
1e174                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
1e174     F2 1E 02 FB | 	rdlong	local01, objptr
1e178     DD E4 05 F1 | 	add	objptr, #221
1e17c     F2 1E 62 FC | 	wrlong	local01, objptr
1e180                 | ' s_font_ptr:=font_ptr
1e180     D5 E4 85 F1 | 	sub	objptr, #213
1e184     F2 1E 02 FB | 	rdlong	local01, objptr
1e188     D9 E4 05 F1 | 	add	objptr, #217
1e18c     F2 1E 62 FC | 	wrlong	local01, objptr
1e190                 | ' s_lines:=lines
1e190     80 E4 85 F1 | 	sub	objptr, #128
1e194     F2 1E 02 FB | 	rdlong	local01, objptr
1e198     84 E4 05 F1 | 	add	objptr, #132
1e19c     F2 1E 62 FC | 	wrlong	local01, objptr
1e1a0                 | ' s_buflen:=buflen
1e1a0     AD E4 85 F1 | 	sub	objptr, #173
1e1a4     F2 1E 02 FB | 	rdlong	local01, objptr
1e1a8     B5 E4 05 F1 | 	add	objptr, #181
1e1ac     F2 1E 62 FC | 	wrlong	local01, objptr
1e1b0                 | ' s_cpl:=cpl
1e1b0     94 E4 85 F1 | 	sub	objptr, #148
1e1b4     F2 1E 02 FB | 	rdlong	local01, objptr
1e1b8     90 E4 05 F1 | 	add	objptr, #144
1e1bc     F2 1E 62 FC | 	wrlong	local01, objptr
1e1c0                 | ' s_cpl1:=cpl
1e1c0     90 E4 85 F1 | 	sub	objptr, #144
1e1c4     F2 1E 02 FB | 	rdlong	local01, objptr
1e1c8     98 E4 05 F1 | 	add	objptr, #152
1e1cc     F2 1E 62 FC | 	wrlong	local01, objptr
1e1d0                 | ' st_lines:=t_lines
1e1d0     0C E4 05 F1 | 	add	objptr, #12
1e1d4     F2 1E 02 FB | 	rdlong	local01, objptr
1e1d8     04 E4 05 F1 | 	add	objptr, #4
1e1dc     F2 1E 62 FC | 	wrlong	local01, objptr
1e1e0                 | ' ppl:=ppl/xzoom  
1e1e0     28 E4 85 F1 | 	sub	objptr, #40
1e1e4     F2 7C 02 FB | 	rdlong	muldiva_, objptr
1e1e8     2C E4 05 F1 | 	add	objptr, #44
1e1ec     F2 7E 02 FB | 	rdlong	muldivb_, objptr
1e1f0     05 E5 85 F1 | 	sub	objptr, #261
1e1f4     BA 00 A0 FD | 	call	#divide_
1e1f8     D9 E4 05 F1 | 	add	objptr, #217
1e1fc     F2 7E 62 FC | 	wrlong	muldivb_, objptr
1e200                 | ' s_ppl:=ppl
1e200     1C E4 05 F1 | 	add	objptr, #28
1e204     F2 7E 62 FC | 	wrlong	muldivb_, objptr
1e208     F5 E4 85 F1 | 	sub	objptr, #245
1e20c                 | ' waitms(20)							' wait 
1e20c     14 12 06 F6 | 	mov	arg01, #20
1e210     44 2A B0 FD | 	call	#__system___waitms
1e214                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
1e214     04 E4 05 F1 | 	add	objptr, #4
1e218     F2 12 02 FB | 	rdlong	arg01, objptr
1e21c     04 E4 85 F1 | 	sub	objptr, #4
1e220     F2 16 02 FB | 	rdlong	arg03, objptr
1e224     09 17 82 F1 | 	sub	arg03, arg01
1e228     20 14 06 F6 | 	mov	arg02, #32
1e22c     00 18 06 F6 | 	mov	arg04, #0
1e230     01 1A 06 F6 | 	mov	arg05, #1
1e234     0B 00 00 FF 
1e238     CC E4 05 F1 | 	add	objptr, ##5836
1e23c     1C 1C B0 FD | 	call	#_psram_spin2_fill
1e240     0B 00 00 FF 
1e244     CC E4 85 F1 | 	sub	objptr, ##5836
1e248     A7 F0 03 F6 | 	mov	ptra, fp
1e24c     B2 00 A0 FD | 	call	#popregs_
1e250                 | _hg010b_spin2_setmode_ret
1e250     2D 00 64 FD | 	ret
1e254                 | 
1e254                 | ' 
1e254                 | ' '****************************************************************************************************************
1e254                 | ' '                                                                                                             	*
1e254                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
1e254                 | ' '                                                                                                             	*
1e254                 | ' '****************************************************************************************************************
1e254                 | ' 
1e254                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
1e254                 | _hg010b_spin2_makedl
1e254                 | ' 
1e254                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
1e254                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
1e254                 | ' repeat i from 0 to 11                                                           ' clear DL
1e254     00 00 06 F6 | 	mov	_var01, #0
1e258     ED E5 05 F1 | 	add	objptr, #493
1e25c     97 0E 48 FB | 	callpa	#(@LR__2431-@LR__2430)>>2,fcache_load_ptr_
1e260                 | LR__2430
1e260                 | '   displaylist[i]:=0 
1e260     00 03 02 F6 | 	mov	_var02, _var01
1e264     02 02 66 F0 | 	shl	_var02, #2
1e268     F2 02 02 F1 | 	add	_var02, objptr
1e26c     01 01 68 FC | 	wrlong	#0, _var02
1e270     01 00 06 F1 | 	add	_var01, #1
1e274     0C 00 56 F2 | 	cmps	_var01, #12 wc
1e278     E4 FF 9F CD |  if_b	jmp	#LR__2430
1e27c                 | LR__2431
1e27c                 | '                         ' 
1e27c                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
1e27c     8C E5 85 F1 | 	sub	objptr, #396
1e280     F2 02 02 FB | 	rdlong	_var02, objptr
1e284     14 02 66 F0 | 	shl	_var02, #20
1e288     01 02 06 F1 | 	add	_var02, #1
1e28c     04 E4 85 F1 | 	sub	objptr, #4
1e290     F2 00 02 FB | 	rdlong	_var01, objptr
1e294     02 00 66 F0 | 	shl	_var01, #2
1e298     04 00 66 F0 | 	shl	_var01, #4
1e29c     00 03 02 F1 | 	add	_var02, _var01
1e2a0     90 E5 05 F1 | 	add	objptr, #400
1e2a4     F2 02 62 FC | 	wrlong	_var02, objptr
1e2a8     ED E5 85 F1 | 	sub	objptr, #493
1e2ac                 | ' displaylist[1]:=buf_ptr<<4+%10  
1e2ac     F2 02 02 FB | 	rdlong	_var02, objptr
1e2b0     04 02 66 F0 | 	shl	_var02, #4
1e2b4     02 02 06 F1 | 	add	_var02, #2
1e2b8     F1 E5 05 F1 | 	add	objptr, #497
1e2bc     F2 02 62 FC | 	wrlong	_var02, objptr
1e2c0                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
1e2c0     04 E4 85 F1 | 	sub	objptr, #4
1e2c4     F2 02 02 F6 | 	mov	_var02, objptr
1e2c8     CD E5 85 F1 | 	sub	objptr, #461
1e2cc     F2 02 62 FC | 	wrlong	_var02, objptr
1e2d0     20 E4 85 F1 | 	sub	objptr, #32
1e2d4                 | _hg010b_spin2_makedl_ret
1e2d4     2D 00 64 FD | 	ret
1e2d8                 | 
1e2d8                 | ' 
1e2d8                 | ' 
1e2d8                 | ' '****************************************************************************************************************
1e2d8                 | ' '                                                                        					*
1e2d8                 | ' '  Graphic primitives                                                    					*
1e2d8                 | ' '                                                                        					*
1e2d8                 | ' '****************************************************************************************************************
1e2d8                 | ' 
1e2d8                 | ' pub setspriteptr(num,ptr)
1e2d8                 | _hg010b_spin2_setspriteptr
1e2d8                 | ' long[@spr1ptr+12*num]:=ptr
1e2d8     11 E5 05 F1 | 	add	objptr, #273
1e2dc     F2 00 02 F6 | 	mov	_var01, objptr
1e2e0     09 03 02 F6 | 	mov	_var02, arg01
1e2e4     01 02 66 F0 | 	shl	_var02, #1
1e2e8     09 03 02 F1 | 	add	_var02, arg01
1e2ec     02 02 66 F0 | 	shl	_var02, #2
1e2f0     01 01 02 F1 | 	add	_var01, _var02
1e2f4     00 15 62 FC | 	wrlong	arg02, _var01
1e2f8     11 E5 85 F1 | 	sub	objptr, #273
1e2fc                 | _hg010b_spin2_setspriteptr_ret
1e2fc     2D 00 64 FD | 	ret
1e300                 | 
1e300                 | ' 
1e300                 | ' pub setspritepos(num,x,y)
1e300                 | _hg010b_spin2_setspritepos
1e300                 | ' if y>601
1e300     01 00 00 FF 
1e304     5A 16 56 F2 | 	cmps	arg03, ##602 wc
1e308                 | '   y:=601
1e308     01 00 00 3F 
1e30c     59 16 06 36 |  if_ae	mov	arg03, ##601
1e310                 | ' if x>1024
1e310     02 00 00 FF 
1e314     01 14 56 F2 | 	cmps	arg02, ##1025 wc
1e318                 | '   x:=1024
1e318     0A 14 C6 39 |  if_ae	decod	arg02, #10
1e31c                 | ' word[@spr1ptr+12*num+4]:=x
1e31c     11 E5 05 F1 | 	add	objptr, #273
1e320     F2 00 02 F6 | 	mov	_var01, objptr
1e324     09 03 02 F6 | 	mov	_var02, arg01
1e328     01 02 66 F0 | 	shl	_var02, #1
1e32c     09 03 02 F1 | 	add	_var02, arg01
1e330     02 02 66 F0 | 	shl	_var02, #2
1e334     01 01 02 F1 | 	add	_var01, _var02
1e338     04 00 06 F1 | 	add	_var01, #4
1e33c     00 15 52 FC | 	wrword	arg02, _var01
1e340                 | ' word[@spr1ptr+12*num+6]:=y
1e340     F2 00 02 F6 | 	mov	_var01, objptr
1e344     09 03 02 F6 | 	mov	_var02, arg01
1e348     01 02 66 F0 | 	shl	_var02, #1
1e34c     09 03 02 F1 | 	add	_var02, arg01
1e350     02 02 66 F0 | 	shl	_var02, #2
1e354     01 01 02 F1 | 	add	_var01, _var02
1e358     06 00 06 F1 | 	add	_var01, #6
1e35c     00 17 52 FC | 	wrword	arg03, _var01
1e360     11 E5 85 F1 | 	sub	objptr, #273
1e364                 | _hg010b_spin2_setspritepos_ret
1e364     2D 00 64 FD | 	ret
1e368                 | 
1e368                 | ' 
1e368                 | ' pub setspritesize(num,w,h)
1e368                 | _hg010b_spin2_setspritesize
1e368                 | ' word[@spr1ptr+12*num+8]:=w
1e368     11 E5 05 F1 | 	add	objptr, #273
1e36c     F2 00 02 F6 | 	mov	_var01, objptr
1e370     09 03 02 F6 | 	mov	_var02, arg01
1e374     01 02 66 F0 | 	shl	_var02, #1
1e378     09 03 02 F1 | 	add	_var02, arg01
1e37c     02 02 66 F0 | 	shl	_var02, #2
1e380     01 01 02 F1 | 	add	_var01, _var02
1e384     08 00 06 F1 | 	add	_var01, #8
1e388     00 15 52 FC | 	wrword	arg02, _var01
1e38c                 | ' word[@spr1ptr+12*num+10]:=h
1e38c     F2 00 02 F6 | 	mov	_var01, objptr
1e390     09 03 02 F6 | 	mov	_var02, arg01
1e394     01 02 66 F0 | 	shl	_var02, #1
1e398     09 03 02 F1 | 	add	_var02, arg01
1e39c     02 02 66 F0 | 	shl	_var02, #2
1e3a0     01 01 02 F1 | 	add	_var01, _var02
1e3a4     0A 00 06 F1 | 	add	_var01, #10
1e3a8     00 17 52 FC | 	wrword	arg03, _var01
1e3ac     11 E5 85 F1 | 	sub	objptr, #273
1e3b0                 | _hg010b_spin2_setspritesize_ret
1e3b0     2D 00 64 FD | 	ret
1e3b4                 | 
1e3b4                 | ' 
1e3b4                 | ' 
1e3b4                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
1e3b4                 | ' 
1e3b4                 | ' 
1e3b4                 | ' pub putpixel(x,y,c)
1e3b4                 | _hg010b_spin2_putpixel
1e3b4     04 4A 05 F6 | 	mov	COUNT_, #4
1e3b8     A8 00 A0 FD | 	call	#pushregs_
1e3bc     09 1F 02 F6 | 	mov	local01, arg01
1e3c0                 | ' 
1e3c0                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
1e3c0     00 20 06 F6 | 	mov	local02, #0
1e3c4     00 1E 56 F2 | 	cmps	local01, #0 wc
1e3c8     01 20 66 36 |  if_ae	neg	local02, #1
1e3cc     E9 E4 05 F1 | 	add	objptr, #233
1e3d0     F2 1A 02 FB | 	rdlong	arg05, objptr
1e3d4     02 1A 66 F0 | 	shl	arg05, #2
1e3d8     0D 1F 52 F2 | 	cmps	local01, arg05 wc
1e3dc     11 23 A2 F1 | 	subx	local03, local03
1e3e0     11 21 02 F5 | 	and	local02, local03
1e3e4     00 22 06 F6 | 	mov	local03, #0
1e3e8     00 14 56 F2 | 	cmps	arg02, #0 wc
1e3ec     01 22 66 36 |  if_ae	neg	local03, #1
1e3f0     11 21 02 F5 | 	and	local02, local03
1e3f4     04 E4 85 F1 | 	sub	objptr, #4
1e3f8     F2 22 02 FB | 	rdlong	local03, objptr
1e3fc     E5 E4 85 F1 | 	sub	objptr, #229
1e400     11 15 52 F2 | 	cmps	arg02, local03 wc
1e404     12 25 A2 F1 | 	subx	local04, local04
1e408     12 21 CA F7 | 	test	local02, local04 wz
1e40c     48 00 90 AD |  if_e	jmp	#LR__2440
1e410     DD E4 05 F1 | 	add	objptr, #221
1e414     F2 12 02 FB | 	rdlong	arg01, objptr
1e418     14 E4 05 F1 | 	add	objptr, #20
1e41c     F2 24 02 FB | 	rdlong	local04, objptr
1e420     02 24 66 F0 | 	shl	local04, #2
1e424     0A 25 02 FD | 	qmul	local04, arg02
1e428                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
1e428     0B 15 02 F6 | 	mov	arg02, arg03
1e42c     01 16 06 F6 | 	mov	arg03, #1
1e430     00 18 06 F6 | 	mov	arg04, #0
1e434     01 1A 06 F6 | 	mov	arg05, #1
1e438     0A 00 00 FF 
1e43c     DB E5 05 F1 | 	add	objptr, ##5595
1e440     18 24 62 FD | 	getqx	local04
1e444     0F 25 02 F1 | 	add	local04, local01
1e448     12 13 02 F1 | 	add	arg01, local04
1e44c     0C 1A B0 FD | 	call	#_psram_spin2_fill
1e450     0B 00 00 FF 
1e454     CC E4 85 F1 | 	sub	objptr, ##5836
1e458                 | LR__2440
1e458     A7 F0 03 F6 | 	mov	ptra, fp
1e45c     B2 00 A0 FD | 	call	#popregs_
1e460                 | _hg010b_spin2_putpixel_ret
1e460     2D 00 64 FD | 	ret
1e464                 | 
1e464                 | ' 
1e464                 | ' pub putpixel2(x,y,c)
1e464                 | _hg010b_spin2_putpixel2
1e464     02 4A 05 F6 | 	mov	COUNT_, #2
1e468     A8 00 A0 FD | 	call	#pushregs_
1e46c     DD E4 05 F1 | 	add	objptr, #221
1e470     F2 1E 02 FB | 	rdlong	local01, objptr
1e474     14 E4 05 F1 | 	add	objptr, #20
1e478     F2 1A 02 FB | 	rdlong	arg05, objptr
1e47c     02 1A 66 F0 | 	shl	arg05, #2
1e480     0A 1B 02 FD | 	qmul	arg05, arg02
1e484                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
1e484     0B 15 02 F6 | 	mov	arg02, arg03
1e488     01 16 06 F6 | 	mov	arg03, #1
1e48c     00 18 06 F6 | 	mov	arg04, #0
1e490     01 1A 06 F6 | 	mov	arg05, #1
1e494     0A 00 00 FF 
1e498     DB E5 05 F1 | 	add	objptr, ##5595
1e49c     18 20 62 FD | 	getqx	local02
1e4a0     09 21 02 F1 | 	add	local02, arg01
1e4a4     10 1F 02 F1 | 	add	local01, local02
1e4a8     0F 13 02 F6 | 	mov	arg01, local01
1e4ac     AC 19 B0 FD | 	call	#_psram_spin2_fill
1e4b0     0B 00 00 FF 
1e4b4     CC E4 85 F1 | 	sub	objptr, ##5836
1e4b8     A7 F0 03 F6 | 	mov	ptra, fp
1e4bc     B2 00 A0 FD | 	call	#popregs_
1e4c0                 | _hg010b_spin2_putpixel2_ret
1e4c0     2D 00 64 FD | 	ret
1e4c4                 | 
1e4c4                 | ' 
1e4c4                 | ' pub getpixel2(x,y): c 
1e4c4                 | _hg010b_spin2_getpixel2
1e4c4     02 4A 05 F6 | 	mov	COUNT_, #2
1e4c8     A8 00 A0 FD | 	call	#pushregs_
1e4cc     0C F0 07 F1 | 	add	ptra, #12
1e4d0     04 4E 05 F1 | 	add	fp, #4
1e4d4     A7 12 62 FC | 	wrlong	arg01, fp
1e4d8     04 4E 05 F1 | 	add	fp, #4
1e4dc     A7 14 62 FC | 	wrlong	arg02, fp
1e4e0     08 4E 85 F1 | 	sub	fp, #8
1e4e4     A7 00 68 FC | 	wrlong	#0, fp
1e4e8     A7 12 02 F6 | 	mov	arg01, fp
1e4ec     DD E4 05 F1 | 	add	objptr, #221
1e4f0     F2 14 02 FB | 	rdlong	arg02, objptr
1e4f4     14 E4 05 F1 | 	add	objptr, #20
1e4f8     F2 16 02 FB | 	rdlong	arg03, objptr
1e4fc     02 16 66 F0 | 	shl	arg03, #2
1e500     08 4E 05 F1 | 	add	fp, #8
1e504     A7 FA 01 FB | 	rdlong	result1, fp
1e508     FD 16 02 FD | 	qmul	arg03, result1
1e50c                 | ' 
1e50c                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
1e50c     04 4E 85 F1 | 	sub	fp, #4
1e510     A7 1E 02 FB | 	rdlong	local01, fp
1e514     04 4E 85 F1 | 	sub	fp, #4
1e518     01 16 06 F6 | 	mov	arg03, #1
1e51c     0A 00 00 FF 
1e520     DB E5 05 F1 | 	add	objptr, ##5595
1e524     18 20 62 FD | 	getqx	local02
1e528     0F 21 02 F1 | 	add	local02, local01
1e52c     10 15 02 F1 | 	add	arg02, local02
1e530     F0 17 B0 FD | 	call	#_psram_spin2_read1
1e534     0B 00 00 FF 
1e538     CC E4 85 F1 | 	sub	objptr, ##5836
1e53c                 | ' return c
1e53c     A7 FA 01 FB | 	rdlong	result1, fp
1e540     A7 F0 03 F6 | 	mov	ptra, fp
1e544     B2 00 A0 FD | 	call	#popregs_
1e548                 | _hg010b_spin2_getpixel2_ret
1e548     2D 00 64 FD | 	ret
1e54c                 | 
1e54c                 | '   
1e54c                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
1e54c                 | ' 
1e54c                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
1e54c                 | _hg010b_spin2_fastline
1e54c     02 4A 05 F6 | 	mov	COUNT_, #2
1e550     A8 00 A0 FD | 	call	#pushregs_
1e554     09 1F 02 F6 | 	mov	local01, arg01
1e558     0A 21 02 F6 | 	mov	local02, arg02
1e55c                 | ' 
1e55c                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
1e55c     00 16 56 F2 | 	cmps	arg03, #0 wc
1e560     F4 00 90 CD |  if_b	jmp	#LR__2450
1e564     01 00 00 FF 
1e568     2A E4 05 F1 | 	add	objptr, ##554
1e56c     F2 1A 02 FB | 	rdlong	arg05, objptr
1e570     01 00 00 FF 
1e574     2A E4 85 F1 | 	sub	objptr, ##554
1e578     0D 17 52 F2 | 	cmps	arg03, arg05 wc
1e57c     D8 00 90 3D |  if_ae	jmp	#LR__2450
1e580     00 1E 56 F2 | 	cmps	local01, #0 wc
1e584     00 20 56 C2 |  if_b	cmps	local02, #0 wc
1e588     CC 00 90 CD |  if_b	jmp	#LR__2450
1e58c     01 00 00 FF 
1e590     26 E4 05 F1 | 	add	objptr, ##550
1e594     F2 1A 02 FB | 	rdlong	arg05, objptr
1e598     01 00 00 FF 
1e59c     26 E4 85 F1 | 	sub	objptr, ##550
1e5a0     0D 1F 5A F2 | 	cmps	local01, arg05 wcz
1e5a4     01 00 00 1F 
1e5a8     26 E4 05 11 |  if_a	add	objptr, ##550
1e5ac     F2 12 02 1B |  if_a	rdlong	arg01, objptr
1e5b0     01 00 00 1F 
1e5b4     26 E4 85 11 |  if_a	sub	objptr, ##550
1e5b8     09 21 5A 12 |  if_a	cmps	local02, arg01 wcz
1e5bc                 | '   return
1e5bc     98 00 90 1D |  if_a	jmp	#LR__2450
1e5c0     10 1F 5A F2 | 	cmps	local01, local02 wcz
1e5c4     0F 1B 02 16 |  if_a	mov	arg05, local01
1e5c8     10 1F 02 16 |  if_a	mov	local01, local02
1e5cc     0D 21 02 16 |  if_a	mov	local02, arg05
1e5d0     00 1E 56 F2 | 	cmps	local01, #0 wc
1e5d4     00 1E 06 C6 |  if_b	mov	local01, #0
1e5d8     01 00 00 FF 
1e5dc     26 E4 05 F1 | 	add	objptr, ##550
1e5e0     F2 1A 02 FB | 	rdlong	arg05, objptr
1e5e4     01 00 00 FF 
1e5e8     26 E4 85 F1 | 	sub	objptr, ##550
1e5ec     0D 21 52 F2 | 	cmps	local02, arg05 wc
1e5f0     01 00 00 3F 
1e5f4     26 E4 05 31 |  if_ae	add	objptr, ##550
1e5f8     F2 20 02 3B |  if_ae	rdlong	local02, objptr
1e5fc     01 00 00 3F 
1e600     26 E4 85 31 |  if_ae	sub	objptr, ##550
1e604     DD E4 05 F1 | 	add	objptr, #221
1e608     F2 12 02 FB | 	rdlong	arg01, objptr
1e60c     14 E4 05 F1 | 	add	objptr, #20
1e610     F2 1A 02 FB | 	rdlong	arg05, objptr
1e614     02 1A 66 F0 | 	shl	arg05, #2
1e618     0B 1B 02 FD | 	qmul	arg05, arg03
1e61c                 | ' if x1>x2
1e61c                 | '   x1,x2:=x2,x1
1e61c                 | ' if x1<0 
1e61c                 | '   x1:=0
1e61c                 | ' if x2>=xres
1e61c                 | '   x2:=xres-1  
1e61c     01 20 86 31 |  if_ae	sub	local02, #1
1e620                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
1e620     01 16 06 F6 | 	mov	arg03, #1
1e624     10 17 02 F1 | 	add	arg03, local02
1e628     0F 17 82 F1 | 	sub	arg03, local01
1e62c     0C 15 02 F6 | 	mov	arg02, arg04
1e630     00 18 06 F6 | 	mov	arg04, #0
1e634     01 1A 06 F6 | 	mov	arg05, #1
1e638     0A 00 00 FF 
1e63c     DB E5 05 F1 | 	add	objptr, ##5595
1e640     18 20 62 FD | 	getqx	local02
1e644     0F 21 02 F1 | 	add	local02, local01
1e648     10 13 02 F1 | 	add	arg01, local02
1e64c     0C 18 B0 FD | 	call	#_psram_spin2_fill
1e650     0B 00 00 FF 
1e654     CC E4 85 F1 | 	sub	objptr, ##5836
1e658                 | LR__2450
1e658     A7 F0 03 F6 | 	mov	ptra, fp
1e65c     B2 00 A0 FD | 	call	#popregs_
1e660                 | _hg010b_spin2_fastline_ret
1e660     2D 00 64 FD | 	ret
1e664                 | 
1e664                 | ' 
1e664                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
1e664                 | _hg010b_spin2_draw
1e664     0E 4A 05 F6 | 	mov	COUNT_, #14
1e668     A8 00 A0 FD | 	call	#pushregs_
1e66c     09 1F 02 F6 | 	mov	local01, arg01
1e670     0A 21 02 F6 | 	mov	local02, arg02
1e674     0B 23 02 F6 | 	mov	local03, arg03
1e678     0C 25 02 F6 | 	mov	local04, arg04
1e67c     0D 27 02 F6 | 	mov	local05, arg05
1e680                 | ' 
1e680                 | ' if (y1==y2)
1e680     12 21 0A F2 | 	cmp	local02, local04 wz
1e684     18 00 90 5D |  if_ne	jmp	#LR__2460
1e688                 | '   fastline(x1,x2,y1,c)
1e688     0F 13 02 F6 | 	mov	arg01, local01
1e68c     11 15 02 F6 | 	mov	arg02, local03
1e690     10 17 02 F6 | 	mov	arg03, local02
1e694     13 19 02 F6 | 	mov	arg04, local05
1e698     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
1e69c     F8 00 90 FD | 	jmp	#LR__2466
1e6a0                 | LR__2460
1e6a0                 | ' else  
1e6a0                 | '   x:=x1
1e6a0     0F 29 02 F6 | 	mov	local06, local01
1e6a4                 | '   y:=y1
1e6a4     10 2B 02 F6 | 	mov	local07, local02
1e6a8                 | ' 
1e6a8                 | '   if (x1<x2) 
1e6a8     11 1F 52 F2 | 	cmps	local01, local03 wc
1e6ac                 | '     xi:=1
1e6ac     01 2C 06 C6 |  if_b	mov	local08, #1
1e6b0                 | '     dx:=x2-x1
1e6b0     11 2F 02 C6 |  if_b	mov	local09, local03
1e6b4     0F 2F 82 C1 |  if_b	sub	local09, local01
1e6b8                 | '   else
1e6b8                 | '     xi:=-1
1e6b8     01 2C 66 36 |  if_ae	neg	local08, #1
1e6bc                 | '     dx:=x1-x2
1e6bc     11 1F 82 31 |  if_ae	sub	local01, local03
1e6c0     0F 2F 02 36 |  if_ae	mov	local09, local01
1e6c4                 | '   
1e6c4                 | '   if (y1<y2) 
1e6c4     12 21 52 F2 | 	cmps	local02, local04 wc
1e6c8                 | '     yi:=1
1e6c8     01 30 06 C6 |  if_b	mov	local10, #1
1e6cc                 | '     dy:=y2-y1
1e6cc     12 33 02 C6 |  if_b	mov	local11, local04
1e6d0     10 33 82 C1 |  if_b	sub	local11, local02
1e6d4                 | '   else
1e6d4                 | '     yi:=-1
1e6d4     01 30 66 36 |  if_ae	neg	local10, #1
1e6d8                 | '     dy:=y1-y2
1e6d8     12 21 82 31 |  if_ae	sub	local02, local04
1e6dc     10 33 02 36 |  if_ae	mov	local11, local02
1e6e0                 | ' 
1e6e0                 | '   putpixel(x,y,c)
1e6e0     13 17 02 F6 | 	mov	arg03, local05
1e6e4     14 13 02 F6 | 	mov	arg01, local06
1e6e8     15 15 02 F6 | 	mov	arg02, local07
1e6ec     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
1e6f0                 | ' 
1e6f0                 | '   if (dx>dy)
1e6f0     19 2F 5A F2 | 	cmps	local09, local11 wcz
1e6f4     50 00 90 ED |  if_be	jmp	#LR__2462
1e6f8                 | '     ai:=(dy-dx)*2
1e6f8     19 35 02 F6 | 	mov	local12, local11
1e6fc     17 35 82 F1 | 	sub	local12, local09
1e700     01 34 66 F0 | 	shl	local12, #1
1e704                 | '     bi:=dy*2
1e704     01 32 66 F0 | 	shl	local11, #1
1e708     19 37 02 F6 | 	mov	local13, local11
1e70c                 | '     d:= bi-dx
1e70c     1B 39 02 F6 | 	mov	local14, local13
1e710     17 39 82 F1 | 	sub	local14, local09
1e714                 | '     repeat while (x<>x2) 
1e714                 | LR__2461
1e714     11 29 0A F2 | 	cmp	local06, local03 wz
1e718     7C 00 90 AD |  if_e	jmp	#LR__2465
1e71c                 | '       if (d>=0) 
1e71c     00 38 56 F2 | 	cmps	local14, #0 wc
1e720                 | '         x+=xi
1e720     16 29 02 31 |  if_ae	add	local06, local08
1e724                 | '         y+=yi
1e724     18 2B 02 31 |  if_ae	add	local07, local10
1e728                 | '         d+=ai
1e728     1A 39 02 31 |  if_ae	add	local14, local12
1e72c                 | '       else
1e72c                 | '         d+=bi
1e72c     1B 39 02 C1 |  if_b	add	local14, local13
1e730                 | '         x+=xi
1e730     16 29 02 C1 |  if_b	add	local06, local08
1e734                 | '       putpixel(x,y,c)
1e734     14 13 02 F6 | 	mov	arg01, local06
1e738     15 15 02 F6 | 	mov	arg02, local07
1e73c     13 17 02 F6 | 	mov	arg03, local05
1e740     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
1e744     CC FF 9F FD | 	jmp	#LR__2461
1e748                 | LR__2462
1e748                 | '   else
1e748                 | '     ai:=(dx-dy)*2
1e748     17 35 02 F6 | 	mov	local12, local09
1e74c     19 35 82 F1 | 	sub	local12, local11
1e750     01 34 66 F0 | 	shl	local12, #1
1e754                 | '     bi:=dx*2
1e754     01 2E 66 F0 | 	shl	local09, #1
1e758     17 37 02 F6 | 	mov	local13, local09
1e75c                 | '     d:=bi-dy
1e75c     1B 39 02 F6 | 	mov	local14, local13
1e760     19 39 82 F1 | 	sub	local14, local11
1e764                 | '     repeat while (y<>y2)
1e764                 | LR__2463
1e764     12 2B 0A F2 | 	cmp	local07, local04 wz
1e768     2C 00 90 AD |  if_e	jmp	#LR__2464
1e76c                 | '       if (d>=0)
1e76c     00 38 56 F2 | 	cmps	local14, #0 wc
1e770                 | '         x+=xi
1e770     16 29 02 31 |  if_ae	add	local06, local08
1e774                 | '         y+=yi
1e774     18 2B 02 31 |  if_ae	add	local07, local10
1e778                 | '         d+=ai
1e778     1A 39 02 31 |  if_ae	add	local14, local12
1e77c                 | '       else
1e77c                 | '         d+=bi
1e77c     1B 39 02 C1 |  if_b	add	local14, local13
1e780                 | '         y+=yi
1e780     18 2B 02 C1 |  if_b	add	local07, local10
1e784                 | '       putpixel(x, y,c)
1e784     14 13 02 F6 | 	mov	arg01, local06
1e788     15 15 02 F6 | 	mov	arg02, local07
1e78c     13 17 02 F6 | 	mov	arg03, local05
1e790     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
1e794     CC FF 9F FD | 	jmp	#LR__2463
1e798                 | LR__2464
1e798                 | LR__2465
1e798                 | LR__2466
1e798     A7 F0 03 F6 | 	mov	ptra, fp
1e79c     B2 00 A0 FD | 	call	#popregs_
1e7a0                 | _hg010b_spin2_draw_ret
1e7a0     2D 00 64 FD | 	ret
1e7a4                 | 
1e7a4                 | '  
1e7a4                 | ' pub fillpush(val) 
1e7a4                 | _hg010b_spin2_fillpush
1e7a4                 | ' fillstack[fillptr]:=val
1e7a4     0B 00 00 FF 
1e7a8     BA E4 05 F1 | 	add	objptr, ##5818
1e7ac     F2 00 02 FB | 	rdlong	_var01, objptr
1e7b0     02 00 66 F0 | 	shl	_var01, #2
1e7b4     0A 00 00 FF 
1e7b8     00 E4 85 F1 | 	sub	objptr, ##5120
1e7bc     F2 00 02 F1 | 	add	_var01, objptr
1e7c0     00 13 62 FC | 	wrlong	arg01, _var01
1e7c4                 | ' fillptr+=1   
1e7c4     0A 00 00 FF 
1e7c8     00 E4 05 F1 | 	add	objptr, ##5120
1e7cc     F2 00 02 FB | 	rdlong	_var01, objptr
1e7d0     01 00 06 F1 | 	add	_var01, #1
1e7d4     F2 00 62 FC | 	wrlong	_var01, objptr
1e7d8     0B 00 00 FF 
1e7dc     BA E4 85 F1 | 	sub	objptr, ##5818
1e7e0                 | _hg010b_spin2_fillpush_ret
1e7e0     2D 00 64 FD | 	ret
1e7e4                 | 
1e7e4                 | ' 
1e7e4                 | '     
1e7e4                 | ' pub fillpop() : val
1e7e4                 | _hg010b_spin2_fillpop
1e7e4                 | ' 
1e7e4                 | ' fillptr-=1
1e7e4     0B 00 00 FF 
1e7e8     BA E4 05 F1 | 	add	objptr, ##5818
1e7ec     F2 FA 01 FB | 	rdlong	result1, objptr
1e7f0     01 FA 85 F1 | 	sub	result1, #1
1e7f4     F2 FA 61 FC | 	wrlong	result1, objptr
1e7f8                 | ' if fillptr<0
1e7f8     0B 00 00 FF 
1e7fc     BA E4 85 F1 | 	sub	objptr, ##5818
1e800     00 FA 55 F2 | 	cmps	result1, #0 wc
1e804                 | '   fillptr:=0
1e804     0B 00 00 CF 
1e808     BA E4 05 C1 |  if_b	add	objptr, ##5818
1e80c     F2 00 68 CC |  if_b	wrlong	#0, objptr
1e810     0B 00 00 CF 
1e814     BA E4 85 C1 |  if_b	sub	objptr, ##5818
1e818                 | '   val:=-12345
1e818     E7 FF 7F CF 
1e81c     C7 01 06 C6 |  if_b	mov	_var01, ##-12345
1e820     28 00 90 CD |  if_b	jmp	#LR__2470
1e824                 | ' else 
1e824                 | '   val:=fillstack[fillptr]
1e824     0B 00 00 FF 
1e828     BA E4 05 F1 | 	add	objptr, ##5818
1e82c     F2 00 02 FB | 	rdlong	_var01, objptr
1e830     02 00 66 F0 | 	shl	_var01, #2
1e834     0A 00 00 FF 
1e838     00 E4 85 F1 | 	sub	objptr, ##5120
1e83c     F2 00 02 F1 | 	add	_var01, objptr
1e840     00 01 02 FB | 	rdlong	_var01, _var01
1e844     01 00 00 FF 
1e848     BA E4 85 F1 | 	sub	objptr, ##698
1e84c                 | LR__2470
1e84c                 | ' return val
1e84c     00 FB 01 F6 | 	mov	result1, _var01
1e850                 | _hg010b_spin2_fillpop_ret
1e850     2D 00 64 FD | 	ret
1e854                 | 
1e854                 | ' 
1e854                 | '       
1e854                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
1e854                 | _hg010b_spin2_fill
1e854     0B 4A 05 F6 | 	mov	COUNT_, #11
1e858     A8 00 A0 FD | 	call	#pushregs_
1e85c                 | ' 
1e85c                 | ' newcolor:=newcolor & 255
1e85c     0B 1F E2 F8 | 	getbyte	local01, arg03, #0
1e860                 | ' oldcolor:=oldcolor & 255
1e860     0C 21 E2 F8 | 	getbyte	local02, arg04, #0
1e864                 | ' 
1e864                 | ' if (oldcolor == newcolor) 
1e864     0F 21 0A F2 | 	cmp	local02, local01 wz
1e868                 | '   return
1e868     70 02 90 AD |  if_e	jmp	#LR__2489
1e86c                 | ' 
1e86c                 | ' fillptr:=0
1e86c     0B 00 00 FF 
1e870     BA E4 05 F1 | 	add	objptr, ##5818
1e874     F2 00 68 FC | 	wrlong	#0, objptr
1e878                 | ' fillmax:=0
1e878     04 E4 05 F1 | 	add	objptr, #4
1e87c     F2 00 68 FC | 	wrlong	#0, objptr
1e880     0B 00 00 FF 
1e884     BE E4 85 F1 | 	sub	objptr, ##5822
1e888                 | ' fillpush(x)
1e888     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
1e88c                 | ' fillpush(y)
1e88c     0A 13 02 F6 | 	mov	arg01, arg02
1e890     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
1e894                 | ' y:=fillpop()
1e894     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
1e898     FD 22 02 F6 | 	mov	local03, result1
1e89c                 | ' x:=fillpop()
1e89c     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
1e8a0     FD 24 02 F6 | 	mov	local04, result1
1e8a4                 | ' 'pinhigh(38)
1e8a4                 | ' repeat while (x>-1)       
1e8a4                 | LR__2480
1e8a4     00 24 56 F2 | 	cmps	local04, #0 wc
1e8a8     30 02 90 CD |  if_b	jmp	#LR__2488
1e8ac                 | '  ' pintoggle(39)
1e8ac                 | '   x1 := x
1e8ac     12 27 02 F6 | 	mov	local05, local04
1e8b0                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
1e8b0                 | LR__2481
1e8b0     00 28 06 F6 | 	mov	local06, #0
1e8b4     00 2A 06 F6 | 	mov	local07, #0
1e8b8     00 26 56 F2 | 	cmps	local05, #0 wc
1e8bc     01 2A 66 36 |  if_ae	neg	local07, #1
1e8c0     00 2A 0E F2 | 	cmp	local07, #0 wz
1e8c4     00 28 26 56 |  if_ne	not	local06, #0
1e8c8     00 2C 06 F6 | 	mov	local08, #0
1e8cc     00 2E 06 F6 | 	mov	local09, #0
1e8d0     11 15 02 F6 | 	mov	arg02, local03
1e8d4     13 13 02 F6 | 	mov	arg01, local05
1e8d8     E8 FB BF FD | 	call	#_hg010b_spin2_getpixel2
1e8dc     10 FB 09 F2 | 	cmp	result1, local02 wz
1e8e0     00 2E 26 A6 |  if_e	not	local09, #0
1e8e4     00 2E 0E F2 | 	cmp	local09, #0 wz
1e8e8     00 2C 26 56 |  if_ne	not	local08, #0
1e8ec     16 29 CA F7 | 	test	local06, local08 wz
1e8f0                 | '     x1--
1e8f0     01 26 86 51 |  if_ne	sub	local05, #1
1e8f4     B8 FF 9F 5D |  if_ne	jmp	#LR__2481
1e8f8                 | '   x1++
1e8f8     01 26 06 F1 | 	add	local05, #1
1e8fc                 | '   spanabove := 0
1e8fc     00 30 06 F6 | 	mov	local10, #0
1e900                 | '   spanbelow := 0
1e900     00 32 06 F6 | 	mov	local11, #0
1e904                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
1e904                 | LR__2482
1e904     00 28 06 F6 | 	mov	local06, #0
1e908     02 00 00 FF 
1e90c     00 26 56 F2 | 	cmps	local05, ##1024 wc
1e910     00 28 26 C6 |  if_b	not	local06, #0
1e914     00 2C 06 F6 | 	mov	local08, #0
1e918     00 2E 06 F6 | 	mov	local09, #0
1e91c     11 15 02 F6 | 	mov	arg02, local03
1e920     13 13 02 F6 | 	mov	arg01, local05
1e924     9C FB BF FD | 	call	#_hg010b_spin2_getpixel2
1e928     10 FB 09 F2 | 	cmp	result1, local02 wz
1e92c     00 2E 26 A6 |  if_e	not	local09, #0
1e930     00 2E 0E F2 | 	cmp	local09, #0 wz
1e934     00 2C 26 56 |  if_ne	not	local08, #0
1e938     16 29 CA F7 | 	test	local06, local08 wz
1e93c     88 01 90 AD |  if_e	jmp	#LR__2487
1e940                 | '     putpixel2 (x1,y, newcolor & 255)
1e940     0F 17 E2 F8 | 	getbyte	arg03, local01, #0
1e944     13 13 02 F6 | 	mov	arg01, local05
1e948     11 15 02 F6 | 	mov	arg02, local03
1e94c     14 FB BF FD | 	call	#_hg010b_spin2_putpixel2
1e950                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
1e950     00 28 06 F6 | 	mov	local06, #0
1e954     00 2A 06 F6 | 	mov	local07, #0
1e958     00 30 0E F2 | 	cmp	local10, #0 wz
1e95c     01 22 56 A2 |  if_e	cmps	local03, #1 wc
1e960     01 2A 66 26 |  if_nc_and_z	neg	local07, #1
1e964     00 2A 0E F2 | 	cmp	local07, #0 wz
1e968     00 28 26 56 |  if_ne	not	local06, #0
1e96c     00 2C 06 F6 | 	mov	local08, #0
1e970     00 2E 06 F6 | 	mov	local09, #0
1e974     11 15 02 F6 | 	mov	arg02, local03
1e978     01 14 86 F1 | 	sub	arg02, #1
1e97c     13 13 02 F6 | 	mov	arg01, local05
1e980     40 FB BF FD | 	call	#_hg010b_spin2_getpixel2
1e984     10 FB 09 F2 | 	cmp	result1, local02 wz
1e988     00 2E 26 A6 |  if_e	not	local09, #0
1e98c     00 2E 0E F2 | 	cmp	local09, #0 wz
1e990     00 2C 26 56 |  if_ne	not	local08, #0
1e994     16 29 CA F7 | 	test	local06, local08 wz
1e998     1C 00 90 AD |  if_e	jmp	#LR__2483
1e99c                 | '       fillpush(x1)
1e99c     13 13 02 F6 | 	mov	arg01, local05
1e9a0     00 FE BF FD | 	call	#_hg010b_spin2_fillpush
1e9a4                 | '       fillpush(y-1)
1e9a4     11 13 02 F6 | 	mov	arg01, local03
1e9a8     01 12 86 F1 | 	sub	arg01, #1
1e9ac     F4 FD BF FD | 	call	#_hg010b_spin2_fillpush
1e9b0                 | '       spanabove := 1 
1e9b0     01 30 06 F6 | 	mov	local10, #1
1e9b4     4C 00 90 FD | 	jmp	#LR__2484
1e9b8                 | LR__2483
1e9b8                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
1e9b8     00 28 06 F6 | 	mov	local06, #0
1e9bc     00 2A 06 F6 | 	mov	local07, #0
1e9c0     00 30 0E F2 | 	cmp	local10, #0 wz
1e9c4     01 22 56 52 |  if_ne	cmps	local03, #1 wc
1e9c8     01 2A 66 16 |  if_a	neg	local07, #1
1e9cc     00 2A 0E F2 | 	cmp	local07, #0 wz
1e9d0     00 28 26 56 |  if_ne	not	local06, #0
1e9d4     00 2C 06 F6 | 	mov	local08, #0
1e9d8     00 2E 06 F6 | 	mov	local09, #0
1e9dc     11 15 02 F6 | 	mov	arg02, local03
1e9e0     01 14 86 F1 | 	sub	arg02, #1
1e9e4     13 13 02 F6 | 	mov	arg01, local05
1e9e8     D8 FA BF FD | 	call	#_hg010b_spin2_getpixel2
1e9ec     10 FB 09 F2 | 	cmp	result1, local02 wz
1e9f0     00 2E 26 56 |  if_ne	not	local09, #0
1e9f4     00 2E 0E F2 | 	cmp	local09, #0 wz
1e9f8     00 2C 26 56 |  if_ne	not	local08, #0
1e9fc     16 29 CA F7 | 	test	local06, local08 wz
1ea00                 | '       spanabove := 0 
1ea00     00 30 06 56 |  if_ne	mov	local10, #0
1ea04                 | LR__2484
1ea04                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
1ea04     00 28 06 F6 | 	mov	local06, #0
1ea08     00 2A 06 F6 | 	mov	local07, #0
1ea0c     00 32 0E F2 | 	cmp	local11, #0 wz
1ea10     01 00 00 AF 
1ea14     3F 22 56 A2 |  if_e	cmps	local03, ##575 wc
1ea18     01 2A 66 86 |  if_c_and_z	neg	local07, #1
1ea1c     00 2A 0E F2 | 	cmp	local07, #0 wz
1ea20     00 28 26 56 |  if_ne	not	local06, #0
1ea24     00 2C 06 F6 | 	mov	local08, #0
1ea28     00 2E 06 F6 | 	mov	local09, #0
1ea2c     11 15 02 F6 | 	mov	arg02, local03
1ea30     01 14 06 F1 | 	add	arg02, #1
1ea34     13 13 02 F6 | 	mov	arg01, local05
1ea38     88 FA BF FD | 	call	#_hg010b_spin2_getpixel2
1ea3c     10 FB 09 F2 | 	cmp	result1, local02 wz
1ea40     00 2E 26 A6 |  if_e	not	local09, #0
1ea44     00 2E 0E F2 | 	cmp	local09, #0 wz
1ea48     00 2C 26 56 |  if_ne	not	local08, #0
1ea4c     16 29 CA F7 | 	test	local06, local08 wz
1ea50     1C 00 90 AD |  if_e	jmp	#LR__2485
1ea54                 | '       fillpush(x1)
1ea54     13 13 02 F6 | 	mov	arg01, local05
1ea58     48 FD BF FD | 	call	#_hg010b_spin2_fillpush
1ea5c                 | '       fillpush(y + 1)
1ea5c     11 13 02 F6 | 	mov	arg01, local03
1ea60     01 12 06 F1 | 	add	arg01, #1
1ea64     3C FD BF FD | 	call	#_hg010b_spin2_fillpush
1ea68                 | '       spanBelow := 1
1ea68     01 32 06 F6 | 	mov	local11, #1
1ea6c     50 00 90 FD | 	jmp	#LR__2486
1ea70                 | LR__2485
1ea70                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
1ea70     00 28 06 F6 | 	mov	local06, #0
1ea74     00 2A 06 F6 | 	mov	local07, #0
1ea78     00 32 0E F2 | 	cmp	local11, #0 wz
1ea7c     01 00 00 5F 
1ea80     3F 22 56 52 |  if_ne	cmps	local03, ##575 wc
1ea84     01 2A 66 46 |  if_c_and_nz	neg	local07, #1
1ea88     00 2A 0E F2 | 	cmp	local07, #0 wz
1ea8c     00 28 26 56 |  if_ne	not	local06, #0
1ea90     00 2C 06 F6 | 	mov	local08, #0
1ea94     00 2E 06 F6 | 	mov	local09, #0
1ea98     11 15 02 F6 | 	mov	arg02, local03
1ea9c     01 14 06 F1 | 	add	arg02, #1
1eaa0     13 13 02 F6 | 	mov	arg01, local05
1eaa4     1C FA BF FD | 	call	#_hg010b_spin2_getpixel2
1eaa8     10 FB 09 F2 | 	cmp	result1, local02 wz
1eaac     00 2E 26 56 |  if_ne	not	local09, #0
1eab0     00 2E 0E F2 | 	cmp	local09, #0 wz
1eab4     00 2C 26 56 |  if_ne	not	local08, #0
1eab8     16 29 CA F7 | 	test	local06, local08 wz
1eabc                 | '       spanbelow := 0
1eabc     00 32 06 56 |  if_ne	mov	local11, #0
1eac0                 | LR__2486
1eac0                 | '     x1++
1eac0     01 26 06 F1 | 	add	local05, #1
1eac4     3C FE 9F FD | 	jmp	#LR__2482
1eac8                 | LR__2487
1eac8                 | '   y:=fillpop()
1eac8     18 FD BF FD | 	call	#_hg010b_spin2_fillpop
1eacc     FD 22 02 F6 | 	mov	local03, result1
1ead0                 | '   x:=fillpop()
1ead0     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
1ead4     FD 24 02 F6 | 	mov	local04, result1
1ead8     C8 FD 9F FD | 	jmp	#LR__2480
1eadc                 | LR__2488
1eadc                 | LR__2489
1eadc     A7 F0 03 F6 | 	mov	ptra, fp
1eae0     B2 00 A0 FD | 	call	#popregs_
1eae4                 | _hg010b_spin2_fill_ret
1eae4     2D 00 64 FD | 	ret
1eae8                 | 
1eae8                 | ' 'pinlow(38)    
1eae8                 | ' 
1eae8                 | ' '-- A filled circle -----------------------------------------------------
1eae8                 | ' 
1eae8                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
1eae8                 | _hg010b_spin2_fcircle
1eae8     08 4A 05 F6 | 	mov	COUNT_, #8
1eaec     A8 00 A0 FD | 	call	#pushregs_
1eaf0     0B 1F 02 F6 | 	mov	local01, arg03
1eaf4     FF FF 7F FF 
1eaf8     FE 1F 06 FD | 	qmul	local01, ##-2
1eafc     09 21 02 F6 | 	mov	local02, arg01
1eb00     0A 23 02 F6 | 	mov	local03, arg02
1eb04     0C 25 02 F6 | 	mov	local04, arg04
1eb08                 | ' 
1eb08                 | ' d:=5-4*r
1eb08     0F 19 02 F6 | 	mov	arg04, local01
1eb0c     02 18 66 F0 | 	shl	arg04, #2
1eb10     05 26 06 F6 | 	mov	local05, #5
1eb14     0C 27 82 F1 | 	sub	local05, arg04
1eb18                 | ' x:=0
1eb18     00 28 06 F6 | 	mov	local06, #0
1eb1c                 | ' y:=r
1eb1c                 | ' da:=(-2*r+5)*4
1eb1c                 | ' db:=3*4
1eb1c     0C 2A 06 F6 | 	mov	local07, #12
1eb20                 | ' repeat while (x<=y) 
1eb20     18 2C 62 FD | 	getqx	local08
1eb24     05 2C 06 F1 | 	add	local08, #5
1eb28     02 2C 66 F0 | 	shl	local08, #2
1eb2c                 | LR__2490
1eb2c     0F 29 5A F2 | 	cmps	local06, local01 wcz
1eb30     B4 00 90 1D |  if_a	jmp	#LR__2492
1eb34                 | '   fastline(x0-x,x0+x,y0-y,c)
1eb34     10 13 02 F6 | 	mov	arg01, local02
1eb38     14 13 82 F1 | 	sub	arg01, local06
1eb3c     10 15 02 F6 | 	mov	arg02, local02
1eb40     14 15 02 F1 | 	add	arg02, local06
1eb44     11 17 02 F6 | 	mov	arg03, local03
1eb48     0F 17 82 F1 | 	sub	arg03, local01
1eb4c     12 19 02 F6 | 	mov	arg04, local04
1eb50     F8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1eb54                 | '   fastline(x0-x,x0+x,y0+y,c)
1eb54     10 13 02 F6 | 	mov	arg01, local02
1eb58     14 13 82 F1 | 	sub	arg01, local06
1eb5c     10 15 02 F6 | 	mov	arg02, local02
1eb60     14 15 02 F1 | 	add	arg02, local06
1eb64     11 17 02 F6 | 	mov	arg03, local03
1eb68     0F 17 02 F1 | 	add	arg03, local01
1eb6c     12 19 02 F6 | 	mov	arg04, local04
1eb70     D8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1eb74                 | '   fastline(x0-y,x0+y,y0-x,c)
1eb74     10 13 02 F6 | 	mov	arg01, local02
1eb78     0F 13 82 F1 | 	sub	arg01, local01
1eb7c     10 15 02 F6 | 	mov	arg02, local02
1eb80     0F 15 02 F1 | 	add	arg02, local01
1eb84     11 17 02 F6 | 	mov	arg03, local03
1eb88     14 17 82 F1 | 	sub	arg03, local06
1eb8c     12 19 02 F6 | 	mov	arg04, local04
1eb90     B8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1eb94                 | '   fastline(x0-y,x0+y,y0+x,c)
1eb94     10 13 02 F6 | 	mov	arg01, local02
1eb98     0F 13 82 F1 | 	sub	arg01, local01
1eb9c     10 15 02 F6 | 	mov	arg02, local02
1eba0     0F 15 02 F1 | 	add	arg02, local01
1eba4     11 17 02 F6 | 	mov	arg03, local03
1eba8     14 17 02 F1 | 	add	arg03, local06
1ebac     12 19 02 F6 | 	mov	arg04, local04
1ebb0     98 F9 BF FD | 	call	#_hg010b_spin2_fastline
1ebb4                 | '   if d>0 
1ebb4     01 26 56 F2 | 	cmps	local05, #1 wc
1ebb8     18 00 90 CD |  if_b	jmp	#LR__2491
1ebbc                 | '     d+=da
1ebbc     16 27 02 F1 | 	add	local05, local08
1ebc0                 | '     y-=1
1ebc0     01 1E 86 F1 | 	sub	local01, #1
1ebc4                 | '     x+=1
1ebc4     01 28 06 F1 | 	add	local06, #1
1ebc8                 | '     da+=4*4
1ebc8     10 2C 06 F1 | 	add	local08, #16
1ebcc                 | '     db+=2*4
1ebcc     08 2A 06 F1 | 	add	local07, #8
1ebd0     58 FF 9F FD | 	jmp	#LR__2490
1ebd4                 | LR__2491
1ebd4                 | '   else
1ebd4                 | '     d+=db
1ebd4     15 27 02 F1 | 	add	local05, local07
1ebd8                 | '     x+=1
1ebd8     01 28 06 F1 | 	add	local06, #1
1ebdc                 | '     da+=2*4
1ebdc     08 2C 06 F1 | 	add	local08, #8
1ebe0                 | '     db+=2*4
1ebe0     08 2A 06 F1 | 	add	local07, #8
1ebe4     44 FF 9F FD | 	jmp	#LR__2490
1ebe8                 | LR__2492
1ebe8     A7 F0 03 F6 | 	mov	ptra, fp
1ebec     B2 00 A0 FD | 	call	#popregs_
1ebf0                 | _hg010b_spin2_fcircle_ret
1ebf0     2D 00 64 FD | 	ret
1ebf4                 | 
1ebf4                 | '  
1ebf4                 | ' '-- A circle ------------------------------------------------------------ 
1ebf4                 | '  
1ebf4                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
1ebf4                 | _hg010b_spin2_circle
1ebf4     08 4A 05 F6 | 	mov	COUNT_, #8
1ebf8     A8 00 A0 FD | 	call	#pushregs_
1ebfc     0B 1F 02 F6 | 	mov	local01, arg03
1ec00     FF FF 7F FF 
1ec04     FE 1F 06 FD | 	qmul	local01, ##-2
1ec08     09 21 02 F6 | 	mov	local02, arg01
1ec0c     0A 23 02 F6 | 	mov	local03, arg02
1ec10     0C 25 02 F6 | 	mov	local04, arg04
1ec14                 | ' 
1ec14                 | '  
1ec14                 | ' d:=5-4*r
1ec14     0F 19 02 F6 | 	mov	arg04, local01
1ec18     02 18 66 F0 | 	shl	arg04, #2
1ec1c     05 26 06 F6 | 	mov	local05, #5
1ec20     0C 27 82 F1 | 	sub	local05, arg04
1ec24                 | ' x:=0
1ec24     00 28 06 F6 | 	mov	local06, #0
1ec28                 | ' y:=r
1ec28                 | ' da:=(-2*r+5)*4
1ec28                 | ' db:=3*4
1ec28     0C 2A 06 F6 | 	mov	local07, #12
1ec2c                 | ' repeat while (x<=y) 
1ec2c     18 2C 62 FD | 	getqx	local08
1ec30     05 2C 06 F1 | 	add	local08, #5
1ec34     02 2C 66 F0 | 	shl	local08, #2
1ec38                 | LR__2500
1ec38     0F 29 5A F2 | 	cmps	local06, local01 wcz
1ec3c     F4 00 90 1D |  if_a	jmp	#LR__2502
1ec40                 | '   putpixel(x0-x,y0-y,c)
1ec40     10 13 02 F6 | 	mov	arg01, local02
1ec44     14 13 82 F1 | 	sub	arg01, local06
1ec48     11 15 02 F6 | 	mov	arg02, local03
1ec4c     0F 15 82 F1 | 	sub	arg02, local01
1ec50     12 17 02 F6 | 	mov	arg03, local04
1ec54     5C F7 BF FD | 	call	#_hg010b_spin2_putpixel
1ec58                 | '   putpixel(x0-x,y0+y,c)
1ec58     10 13 02 F6 | 	mov	arg01, local02
1ec5c     14 13 82 F1 | 	sub	arg01, local06
1ec60     11 15 02 F6 | 	mov	arg02, local03
1ec64     0F 15 02 F1 | 	add	arg02, local01
1ec68     12 17 02 F6 | 	mov	arg03, local04
1ec6c     44 F7 BF FD | 	call	#_hg010b_spin2_putpixel
1ec70                 | '   putpixel(x0+x,y0-y,c)
1ec70     10 13 02 F6 | 	mov	arg01, local02
1ec74     14 13 02 F1 | 	add	arg01, local06
1ec78     11 15 02 F6 | 	mov	arg02, local03
1ec7c     0F 15 82 F1 | 	sub	arg02, local01
1ec80     12 17 02 F6 | 	mov	arg03, local04
1ec84     2C F7 BF FD | 	call	#_hg010b_spin2_putpixel
1ec88                 | '   putpixel(x0+x,y0+y,c)
1ec88     10 13 02 F6 | 	mov	arg01, local02
1ec8c     14 13 02 F1 | 	add	arg01, local06
1ec90     11 15 02 F6 | 	mov	arg02, local03
1ec94     0F 15 02 F1 | 	add	arg02, local01
1ec98     12 17 02 F6 | 	mov	arg03, local04
1ec9c     14 F7 BF FD | 	call	#_hg010b_spin2_putpixel
1eca0                 | '   putpixel(x0-y,y0-x,c)
1eca0     10 13 02 F6 | 	mov	arg01, local02
1eca4     0F 13 82 F1 | 	sub	arg01, local01
1eca8     11 15 02 F6 | 	mov	arg02, local03
1ecac     14 15 82 F1 | 	sub	arg02, local06
1ecb0     12 17 02 F6 | 	mov	arg03, local04
1ecb4     FC F6 BF FD | 	call	#_hg010b_spin2_putpixel
1ecb8                 | '   putpixel(x0-y,y0+x,c)
1ecb8     10 13 02 F6 | 	mov	arg01, local02
1ecbc     0F 13 82 F1 | 	sub	arg01, local01
1ecc0     11 15 02 F6 | 	mov	arg02, local03
1ecc4     14 15 02 F1 | 	add	arg02, local06
1ecc8     12 17 02 F6 | 	mov	arg03, local04
1eccc     E4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
1ecd0                 | '   putpixel(x0+y,y0-x,c)
1ecd0     10 13 02 F6 | 	mov	arg01, local02
1ecd4     0F 13 02 F1 | 	add	arg01, local01
1ecd8     11 15 02 F6 | 	mov	arg02, local03
1ecdc     14 15 82 F1 | 	sub	arg02, local06
1ece0     12 17 02 F6 | 	mov	arg03, local04
1ece4     CC F6 BF FD | 	call	#_hg010b_spin2_putpixel
1ece8                 | '   putpixel(x0+y,y0+x,c)
1ece8     10 13 02 F6 | 	mov	arg01, local02
1ecec     0F 13 02 F1 | 	add	arg01, local01
1ecf0     11 15 02 F6 | 	mov	arg02, local03
1ecf4     14 15 02 F1 | 	add	arg02, local06
1ecf8     12 17 02 F6 | 	mov	arg03, local04
1ecfc     B4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
1ed00                 | '   if d>0 
1ed00     01 26 56 F2 | 	cmps	local05, #1 wc
1ed04     18 00 90 CD |  if_b	jmp	#LR__2501
1ed08                 | '     d+=da
1ed08     16 27 02 F1 | 	add	local05, local08
1ed0c                 | '     y-=1
1ed0c     01 1E 86 F1 | 	sub	local01, #1
1ed10                 | '     x+=1
1ed10     01 28 06 F1 | 	add	local06, #1
1ed14                 | '     da+=4*4
1ed14     10 2C 06 F1 | 	add	local08, #16
1ed18                 | '     db+=2*4
1ed18     08 2A 06 F1 | 	add	local07, #8
1ed1c     18 FF 9F FD | 	jmp	#LR__2500
1ed20                 | LR__2501
1ed20                 | '   else
1ed20                 | '     d+=db
1ed20     15 27 02 F1 | 	add	local05, local07
1ed24                 | '     x+=1
1ed24     01 28 06 F1 | 	add	local06, #1
1ed28                 | '     da+=2*4
1ed28     08 2C 06 F1 | 	add	local08, #8
1ed2c                 | '     db+=2*4
1ed2c     08 2A 06 F1 | 	add	local07, #8
1ed30     04 FF 9F FD | 	jmp	#LR__2500
1ed34                 | LR__2502
1ed34     A7 F0 03 F6 | 	mov	ptra, fp
1ed38     B2 00 A0 FD | 	call	#popregs_
1ed3c                 | _hg010b_spin2_circle_ret
1ed3c     2D 00 64 FD | 	ret
1ed40                 | 
1ed40                 | '     
1ed40                 | ' '-- A frame (an empty rectangle) ---------------------------------------
1ed40                 | ' 
1ed40                 | ' pub frame(x1,y1,x2,y2,c)
1ed40                 | _hg010b_spin2_frame
1ed40     05 4A 05 F6 | 	mov	COUNT_, #5
1ed44     A8 00 A0 FD | 	call	#pushregs_
1ed48     09 1F 02 F6 | 	mov	local01, arg01
1ed4c     0A 21 02 F6 | 	mov	local02, arg02
1ed50     0B 23 02 F6 | 	mov	local03, arg03
1ed54     0C 25 02 F6 | 	mov	local04, arg04
1ed58     0D 27 02 F6 | 	mov	local05, arg05
1ed5c                 | ' 
1ed5c                 | ' fastline(x1,x2,y1,c)
1ed5c     0F 13 02 F6 | 	mov	arg01, local01
1ed60     11 15 02 F6 | 	mov	arg02, local03
1ed64     10 17 02 F6 | 	mov	arg03, local02
1ed68     13 19 02 F6 | 	mov	arg04, local05
1ed6c     DC F7 BF FD | 	call	#_hg010b_spin2_fastline
1ed70                 | ' fastline(x1,x2,y2,c)
1ed70     0F 13 02 F6 | 	mov	arg01, local01
1ed74     11 15 02 F6 | 	mov	arg02, local03
1ed78     12 17 02 F6 | 	mov	arg03, local04
1ed7c     13 19 02 F6 | 	mov	arg04, local05
1ed80     C8 F7 BF FD | 	call	#_hg010b_spin2_fastline
1ed84                 | ' line(x1,y1,x1,y2,c)
1ed84     0F 13 02 F6 | 	mov	arg01, local01
1ed88     10 15 02 F6 | 	mov	arg02, local02
1ed8c     0F 17 02 F6 | 	mov	arg03, local01
1ed90     12 19 02 F6 | 	mov	arg04, local04
1ed94     13 1B 02 F6 | 	mov	arg05, local05
1ed98                 | ' draw(x1,y1,x2,y2,c)
1ed98     C8 F8 BF FD | 	call	#_hg010b_spin2_draw
1ed9c                 | ' line(x2,y1,x2,y2,c)
1ed9c     11 13 02 F6 | 	mov	arg01, local03
1eda0     10 15 02 F6 | 	mov	arg02, local02
1eda4     11 17 02 F6 | 	mov	arg03, local03
1eda8     12 19 02 F6 | 	mov	arg04, local04
1edac     13 1B 02 F6 | 	mov	arg05, local05
1edb0                 | ' draw(x1,y1,x2,y2,c)
1edb0     B0 F8 BF FD | 	call	#_hg010b_spin2_draw
1edb4     A7 F0 03 F6 | 	mov	ptra, fp
1edb8     B2 00 A0 FD | 	call	#popregs_
1edbc                 | _hg010b_spin2_frame_ret
1edbc     2D 00 64 FD | 	ret
1edc0                 | 
1edc0                 | ' 
1edc0                 | ' '-- A box (a filled rectangle) ----------------------------------------
1edc0                 | ' 
1edc0                 | ' pub box(x1,y1,x2,y2,c) |yy
1edc0                 | _hg010b_spin2_box
1edc0     06 4A 05 F6 | 	mov	COUNT_, #6
1edc4     A8 00 A0 FD | 	call	#pushregs_
1edc8     09 1F 02 F6 | 	mov	local01, arg01
1edcc     0A 21 02 F6 | 	mov	local02, arg02
1edd0     0B 23 02 F6 | 	mov	local03, arg03
1edd4     0C 25 02 F6 | 	mov	local04, arg04
1edd8     0D 27 02 F6 | 	mov	local05, arg05
1eddc                 | ' 
1eddc                 | ' repeat yy from y1 to y2
1eddc     10 25 52 F2 | 	cmps	local04, local02 wc
1ede0     01 28 86 F6 | 	negc	local06, #1
1ede4     14 25 02 F1 | 	add	local04, local06
1ede8                 | LR__2510
1ede8                 | '   fastline(x1,x2,yy,c)
1ede8     0F 13 02 F6 | 	mov	arg01, local01
1edec     11 15 02 F6 | 	mov	arg02, local03
1edf0     13 19 02 F6 | 	mov	arg04, local05
1edf4     10 17 02 F6 | 	mov	arg03, local02
1edf8     50 F7 BF FD | 	call	#_hg010b_spin2_fastline
1edfc     14 21 02 F1 | 	add	local02, local06
1ee00     12 21 0A F2 | 	cmp	local02, local04 wz
1ee04     E0 FF 9F 5D |  if_ne	jmp	#LR__2510
1ee08     A7 F0 03 F6 | 	mov	ptra, fp
1ee0c     B2 00 A0 FD | 	call	#popregs_
1ee10                 | _hg010b_spin2_box_ret
1ee10     2D 00 64 FD | 	ret
1ee14                 | 
1ee14                 | '       
1ee14                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
1ee14                 | _hg010b_spin2_putcharxycgf
1ee14                 | ' 
1ee14                 | '  
1ee14                 | ' repeat yy from 0 to 15
1ee14     00 00 06 F6 | 	mov	_var01, #0
1ee18     97 8C 48 FB | 	callpa	#(@LR__2522-@LR__2520)>>2,fcache_load_ptr_
1ee1c                 | LR__2520
1ee1c                 | ' 
1ee1c                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
1ee1c     95 E4 05 F1 | 	add	objptr, #149
1ee20     F2 02 02 FB | 	rdlong	_var02, objptr
1ee24     0A 02 66 F0 | 	shl	_var02, #10
1ee28     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
1ee2c     01 05 02 F1 | 	add	_var03, _var02
1ee30     0B 03 02 F6 | 	mov	_var02, arg03
1ee34     04 02 66 F0 | 	shl	_var02, #4
1ee38     01 05 02 F1 | 	add	_var03, _var02
1ee3c     00 05 02 F1 | 	add	_var03, _var01
1ee40     02 05 C2 FA | 	rdbyte	_var03, _var03
1ee44                 | '   asm
1ee44     00 04 0E F4 | 	testb	_var03, #0 wz
1ee48     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
1ee4c     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
1ee50     01 04 0E F4 | 	testb	_var03, #1 wz
1ee54     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
1ee58     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
1ee5c     02 04 0E F4 | 	testb	_var03, #2 wz
1ee60     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
1ee64     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
1ee68     03 04 0E F4 | 	testb	_var03, #3 wz
1ee6c     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
1ee70     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
1ee74     04 04 0E F4 | 	testb	_var03, #4 wz
1ee78     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
1ee7c     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
1ee80     05 04 0E F4 | 	testb	_var03, #5 wz
1ee84     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
1ee88     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
1ee8c     06 04 0E F4 | 	testb	_var03, #6 wz
1ee90     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
1ee94     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
1ee98     07 04 0E F4 | 	testb	_var03, #7 wz
1ee9c     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
1eea0     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
1eea4                 | '   
1eea4                 | '   ccc[0]:=c1
1eea4     99 E5 05 F1 | 	add	objptr, #409
1eea8     F2 06 62 FC | 	wrlong	_var04, objptr
1eeac                 | '   ccc[1]:=c2 
1eeac     04 E4 05 F1 | 	add	objptr, #4
1eeb0     F2 08 62 FC | 	wrlong	_var05, objptr
1eeb4                 | '   long[mailbox0][2]:=8
1eeb4     49 E4 85 F1 | 	sub	objptr, #73
1eeb8     F2 04 02 FB | 	rdlong	_var03, objptr
1eebc     08 04 06 F1 | 	add	_var03, #8
1eec0     02 11 68 FC | 	wrlong	#8, _var03
1eec4                 | '   long[mailbox0][1]:=@ccc
1eec4     45 E4 05 F1 | 	add	objptr, #69
1eec8     F2 04 02 F6 | 	mov	_var03, objptr
1eecc     45 E4 85 F1 | 	sub	objptr, #69
1eed0     F2 02 02 FB | 	rdlong	_var02, objptr
1eed4     04 02 06 F1 | 	add	_var02, #4
1eed8     01 05 62 FC | 	wrlong	_var03, _var02
1eedc                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
1eedc     0C E5 85 F1 | 	sub	objptr, #268
1eee0     F2 04 02 FB | 	rdlong	_var03, objptr
1eee4     0A 03 02 F6 | 	mov	_var02, arg02
1eee8     00 03 02 F1 | 	add	_var02, _var01
1eeec     0A 02 66 F0 | 	shl	_var02, #10
1eef0     09 0B 02 F6 | 	mov	_var06, arg01
1eef4     02 0A 66 F0 | 	shl	_var06, #2
1eef8     05 03 02 F1 | 	add	_var02, _var06
1eefc     01 05 02 F1 | 	add	_var03, _var02
1ef00     00 00 78 FF 
1ef04     00 04 06 F1 | 	add	_var03, ##-268435456
1ef08     0C E5 05 F1 | 	add	objptr, #268
1ef0c     F2 0A 02 FB | 	rdlong	_var06, objptr
1ef10     05 05 62 FC | 	wrlong	_var03, _var06
1ef14                 | '   repeat
1ef14                 | LR__2521
1ef14     F2 04 02 FB | 	rdlong	_var03, objptr
1ef18     02 03 02 FB | 	rdlong	_var02, _var03
1ef1c     00 02 56 F2 | 	cmps	_var02, #0 wc
1ef20     F0 FF 9F CD |  if_b	jmp	#LR__2521
1ef24     E9 E5 85 F1 | 	sub	objptr, #489
1ef28     01 00 06 F1 | 	add	_var01, #1
1ef2c     10 00 56 F2 | 	cmps	_var01, #16 wc
1ef30     E8 FE 9F CD |  if_b	jmp	#LR__2520
1ef34                 | LR__2522
1ef34                 | _hg010b_spin2_putcharxycgf_ret
1ef34     2D 00 64 FD | 	ret
1ef38                 | 
1ef38                 | ' 
1ef38                 | ' 
1ef38                 | ' '**********************************************************************r***
1ef38                 | ' '                                                                        *
1ef38                 | ' ' Font related functions                                                 *
1ef38                 | ' '                                                                        *
1ef38                 | ' '*************************************************************************
1ef38                 | ' 
1ef38                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
1ef38                 | ' 
1ef38                 | ' pub setfontfamily(afontnum)
1ef38                 | _hg010b_spin2_setfontfamily
1ef38                 | ' 
1ef38                 | ' font_family:=afontnum
1ef38     95 E4 05 F1 | 	add	objptr, #149
1ef3c     F2 12 62 FC | 	wrlong	arg01, objptr
1ef40     95 E4 85 F1 | 	sub	objptr, #149
1ef44                 | ' 'if afontnum==8
1ef44                 | ' '  font_ptr:=@amiga_font
1ef44                 | ' 
1ef44                 | ' if afontnum==4
1ef44     04 12 0E F2 | 	cmp	arg01, #4 wz
1ef48                 | '   font_ptr:=@st_font
1ef48     08 00 00 AF 
1ef4c     00 EE 05 A1 |  if_e	add	ptr__hg010b_spin2_dat__, ##4096
1ef50     08 E4 05 A1 |  if_e	add	objptr, #8
1ef54     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
1ef58     08 E4 85 A1 |  if_e	sub	objptr, #8
1ef5c     08 00 00 AF 
1ef60     00 EE 85 A1 |  if_e	sub	ptr__hg010b_spin2_dat__, ##4096
1ef64                 | ' if afontnum==0
1ef64     00 12 0E F2 | 	cmp	arg01, #0 wz
1ef68                 | '   font_ptr:=@vga_font
1ef68     08 E4 05 A1 |  if_e	add	objptr, #8
1ef6c     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
1ef70     08 E4 85 A1 |  if_e	sub	objptr, #8
1ef74                 | _hg010b_spin2_setfontfamily_ret
1ef74     2D 00 64 FD | 	ret
1ef78                 | 
1ef78                 | ' 
1ef78                 | ' '*************************************************************************
1ef78                 | ' '                                                                        *
1ef78                 | ' '  Cursor functions                                                      *
1ef78                 | ' '                                                                        *
1ef78                 | ' '*************************************************************************
1ef78                 | ' 
1ef78                 | ' 
1ef78                 | ' pub setcursorpos(x,y)
1ef78                 | _hg010b_spin2_setcursorpos
1ef78                 | ' 
1ef78                 | ' ''---------- Set the (x,y) position of cursor
1ef78                 | ' 
1ef78                 | ' cursor_x:=x
1ef78     3C E4 05 F1 | 	add	objptr, #60
1ef7c     F2 12 52 FC | 	wrword	arg01, objptr
1ef80                 | ' cursor_y:=y
1ef80     02 E4 05 F1 | 	add	objptr, #2
1ef84     F2 14 42 FC | 	wrbyte	arg02, objptr
1ef88                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1ef88     02 E4 85 F1 | 	sub	objptr, #2
1ef8c     F2 14 E2 FA | 	rdword	arg02, objptr
1ef90     02 14 66 F0 | 	shl	arg02, #2
1ef94     02 E4 05 F1 | 	add	objptr, #2
1ef98     F2 16 C2 FA | 	rdbyte	arg03, objptr
1ef9c     3E E4 85 F1 | 	sub	objptr, #62
1efa0     04 16 66 F0 | 	shl	arg03, #4
1efa4     04 16 06 F1 | 	add	arg03, #4
1efa8     11 12 06 F6 | 	mov	arg01, #17
1efac     50 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
1efb0                 | _hg010b_spin2_setcursorpos_ret
1efb0     2D 00 64 FD | 	ret
1efb4                 | 
1efb4                 | ' 
1efb4                 | ' pub setcursorx(x)
1efb4                 | _hg010b_spin2_setcursorx
1efb4                 | ' cursor_x:=x
1efb4     3C E4 05 F1 | 	add	objptr, #60
1efb8     F2 12 52 FC | 	wrword	arg01, objptr
1efbc                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1efbc     F2 14 E2 FA | 	rdword	arg02, objptr
1efc0     02 14 66 F0 | 	shl	arg02, #2
1efc4     02 E4 05 F1 | 	add	objptr, #2
1efc8     F2 16 C2 FA | 	rdbyte	arg03, objptr
1efcc     3E E4 85 F1 | 	sub	objptr, #62
1efd0     04 16 66 F0 | 	shl	arg03, #4
1efd4     04 16 06 F1 | 	add	arg03, #4
1efd8     11 12 06 F6 | 	mov	arg01, #17
1efdc     20 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
1efe0                 | _hg010b_spin2_setcursorx_ret
1efe0     2D 00 64 FD | 	ret
1efe4                 | 
1efe4                 | ' 
1efe4                 | ' pub setcursory(y) 
1efe4                 | _hg010b_spin2_setcursory
1efe4                 | ' cursor_y:=y
1efe4     3E E4 05 F1 | 	add	objptr, #62
1efe8     F2 12 42 FC | 	wrbyte	arg01, objptr
1efec                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4)
1efec     02 E4 85 F1 | 	sub	objptr, #2
1eff0     F2 14 E2 FA | 	rdword	arg02, objptr
1eff4     02 14 66 F0 | 	shl	arg02, #2
1eff8     02 E4 05 F1 | 	add	objptr, #2
1effc     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f000     3E E4 85 F1 | 	sub	objptr, #62
1f004     04 16 66 F0 | 	shl	arg03, #4
1f008     04 16 06 F1 | 	add	arg03, #4
1f00c     11 12 06 F6 | 	mov	arg01, #17
1f010     EC F2 BF FD | 	call	#_hg010b_spin2_setspritepos
1f014                 | _hg010b_spin2_setcursory_ret
1f014     2D 00 64 FD | 	ret
1f018                 | 
1f018                 | ' 
1f018                 | ' '*************************************************************************
1f018                 | ' '                                                                        *
1f018                 | ' '  VBlank functions                                                      *
1f018                 | ' '                                                                        *
1f018                 | ' '*************************************************************************
1f018                 | ' 
1f018                 | ' pub waitvbl(amount) | i
1f018                 | _hg010b_spin2_waitvbl
1f018     03 4A 05 F6 | 	mov	COUNT_, #3
1f01c     A8 00 A0 FD | 	call	#pushregs_
1f020     09 1F 02 F6 | 	mov	local01, arg01
1f024                 | ' 
1f024                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
1f024                 | ' 
1f024                 | ' repeat i from 1 to amount
1f024     01 20 06 F6 | 	mov	local02, #1
1f028     01 1E 56 F2 | 	cmps	local01, #1 wc
1f02c     01 22 86 F6 | 	negc	local03, #1
1f030     11 1F 02 F1 | 	add	local01, local03
1f034                 | LR__2530
1f034                 | '   repeat until vblank==0
1f034                 | LR__2531
1f034     49 E4 05 F1 | 	add	objptr, #73
1f038     F2 12 0A FB | 	rdlong	arg01, objptr wz
1f03c     49 E4 85 F1 | 	sub	objptr, #73
1f040     0C 00 90 AD |  if_e	jmp	#LR__2532
1f044                 | '     waitus(100)
1f044     64 12 06 F6 | 	mov	arg01, #100
1f048     78 1C B0 FD | 	call	#__system___waitus
1f04c     E4 FF 9F FD | 	jmp	#LR__2531
1f050                 | LR__2532
1f050                 | '   repeat until vblank==1
1f050                 | LR__2533
1f050     49 E4 05 F1 | 	add	objptr, #73
1f054     F2 12 02 FB | 	rdlong	arg01, objptr
1f058     49 E4 85 F1 | 	sub	objptr, #73
1f05c     01 12 0E F2 | 	cmp	arg01, #1 wz
1f060     0C 00 90 AD |  if_e	jmp	#LR__2534
1f064                 | '     waitus(100)
1f064     64 12 06 F6 | 	mov	arg01, #100
1f068     58 1C B0 FD | 	call	#__system___waitus
1f06c     E0 FF 9F FD | 	jmp	#LR__2533
1f070                 | LR__2534
1f070     11 21 02 F1 | 	add	local02, local03
1f074     0F 21 0A F2 | 	cmp	local02, local01 wz
1f078     B8 FF 9F 5D |  if_ne	jmp	#LR__2530
1f07c     A7 F0 03 F6 | 	mov	ptra, fp
1f080     B2 00 A0 FD | 	call	#popregs_
1f084                 | _hg010b_spin2_waitvbl_ret
1f084     2D 00 64 FD | 	ret
1f088                 | 
1f088                 | ' 
1f088                 | ' 
1f088                 | ' pub cls(fc,bc)   :c,i
1f088                 | _hg010b_spin2_cls
1f088     02 4A 05 F6 | 	mov	COUNT_, #2
1f08c     A8 00 A0 FD | 	call	#pushregs_
1f090     09 1F 02 F6 | 	mov	local01, arg01
1f094     0A 21 02 F6 | 	mov	local02, arg02
1f098                 | ' 
1f098                 | ' c:=bc
1f098                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
1f098     DD E4 05 F1 | 	add	objptr, #221
1f09c     F2 12 02 FB | 	rdlong	arg01, objptr
1f0a0     A5 E4 85 F1 | 	sub	objptr, #165
1f0a4     F2 16 02 FB | 	rdlong	arg03, objptr
1f0a8     02 16 66 F0 | 	shl	arg03, #2
1f0ac     10 15 02 F6 | 	mov	arg02, local02
1f0b0     00 18 06 F6 | 	mov	arg04, #0
1f0b4     01 1A 06 F6 | 	mov	arg05, #1
1f0b8     0B 00 00 FF 
1f0bc     94 E4 05 F1 | 	add	objptr, ##5780
1f0c0     98 0D B0 FD | 	call	#_psram_spin2_fill
1f0c4                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
1f0c4     0B 00 00 FF 
1f0c8     C8 E4 85 F1 | 	sub	objptr, ##5832
1f0cc     F2 12 02 FB | 	rdlong	arg01, objptr
1f0d0     04 E4 85 F1 | 	sub	objptr, #4
1f0d4     F2 16 02 FB | 	rdlong	arg03, objptr
1f0d8     09 17 82 F1 | 	sub	arg03, arg01
1f0dc     20 14 06 F6 | 	mov	arg02, #32
1f0e0     00 18 06 F6 | 	mov	arg04, #0
1f0e4     01 1A 06 F6 | 	mov	arg05, #1
1f0e8     0B 00 00 FF 
1f0ec     CC E4 05 F1 | 	add	objptr, ##5836
1f0f0     68 0D B0 FD | 	call	#_psram_spin2_fill
1f0f4                 | ' setwritecolors(fc,bc)
1f0f4                 | ' 
1f0f4                 | ' write_color:=ff
1f0f4     0B 00 00 FF 
1f0f8     8B E4 85 F1 | 	sub	objptr, ##5771
1f0fc     F2 1E 62 FC | 	wrlong	local01, objptr
1f100                 | ' write_background:=bb
1f100     04 E4 05 F1 | 	add	objptr, #4
1f104     F2 20 62 FC | 	wrlong	local02, objptr
1f108                 | ' cursor_x:=0
1f108     09 E4 85 F1 | 	sub	objptr, #9
1f10c     F2 00 58 FC | 	wrword	#0, objptr
1f110                 | ' cursor_y:=0
1f110     02 E4 05 F1 | 	add	objptr, #2
1f114     F2 00 48 FC | 	wrbyte	#0, objptr
1f118                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1f118     02 E4 85 F1 | 	sub	objptr, #2
1f11c     F2 14 E2 FA | 	rdword	arg02, objptr
1f120     02 14 66 F0 | 	shl	arg02, #2
1f124     02 E4 05 F1 | 	add	objptr, #2
1f128     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f12c     3E E4 85 F1 | 	sub	objptr, #62
1f130     04 16 66 F0 | 	shl	arg03, #4
1f134     04 16 06 F1 | 	add	arg03, #4
1f138     11 12 06 F6 | 	mov	arg01, #17
1f13c     C0 F1 BF FD | 	call	#_hg010b_spin2_setspritepos
1f140                 | ' setcursorcolor(fc)
1f140     0F 13 02 F6 | 	mov	arg01, local01
1f144     AC ED BF FD | 	call	#_hg010b_spin2_setcursorcolor
1f148     10 FB 01 F6 | 	mov	result1, local02
1f14c     00 FC 05 F6 | 	mov	result2, #0
1f150     A7 F0 03 F6 | 	mov	ptra, fp
1f154     B2 00 A0 FD | 	call	#popregs_
1f158                 | _hg010b_spin2_cls_ret
1f158     2D 00 64 FD | 	ret
1f15c                 | 
1f15c                 | ' 
1f15c                 | ' ''---------- Output a char at the cursor position, move the cursor 
1f15c                 | ' 
1f15c                 | ' pub putchar(achar) | c,x,y,l,newcpl
1f15c                 | _hg010b_spin2_putchar
1f15c     02 4A 05 F6 | 	mov	COUNT_, #2
1f160     A8 00 A0 FD | 	call	#pushregs_
1f164     09 1F 02 F6 | 	mov	local01, arg01
1f168                 | ' 
1f168                 | ' if achar==10
1f168     0A 1E 0E F2 | 	cmp	local01, #10 wz
1f16c                 | '   crlf()
1f16c     D8 07 B0 AD |  if_e	call	#_hg010b_spin2_crlf
1f170                 | ' if achar==9
1f170     09 1E 0E F2 | 	cmp	local01, #9 wz
1f174     18 00 90 5D |  if_ne	jmp	#LR__2540
1f178                 | '   cursor_x:=(cursor_x& %11110000)+16
1f178     3C E4 05 F1 | 	add	objptr, #60
1f17c     F2 16 E2 FA | 	rdword	arg03, objptr
1f180     F0 16 06 F5 | 	and	arg03, #240
1f184     10 16 06 F1 | 	add	arg03, #16
1f188     F2 16 52 FC | 	wrword	arg03, objptr
1f18c     3C E4 85 F1 | 	sub	objptr, #60
1f190                 | LR__2540
1f190                 | '   
1f190                 | ' if (achar<>9) && (achar<>10) 
1f190     09 1E 0E F2 | 	cmp	local01, #9 wz
1f194     0A 1E 0E 52 |  if_ne	cmp	local01, #10 wz
1f198     A8 00 90 AD |  if_e	jmp	#LR__2541
1f19c                 | '   putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
1f19c     3C E4 05 F1 | 	add	objptr, #60
1f1a0     F2 12 E2 FA | 	rdword	arg01, objptr
1f1a4     02 E4 05 F1 | 	add	objptr, #2
1f1a8     F2 14 C2 FA | 	rdbyte	arg02, objptr
1f1ac     04 14 66 F0 | 	shl	arg02, #4
1f1b0     04 14 06 F1 | 	add	arg02, #4
1f1b4     03 E4 05 F1 | 	add	objptr, #3
1f1b8     F2 18 02 FB | 	rdlong	arg04, objptr
1f1bc     04 E4 05 F1 | 	add	objptr, #4
1f1c0     F2 1A 02 FB | 	rdlong	arg05, objptr
1f1c4     45 E4 85 F1 | 	sub	objptr, #69
1f1c8     0F 17 02 F6 | 	mov	arg03, local01
1f1cc     44 FC BF FD | 	call	#_hg010b_spin2_putcharxycgf
1f1d0     04 E4 05 F1 | 	add	objptr, #4
1f1d4     F2 12 02 FB | 	rdlong	arg01, objptr
1f1d8     10 00 00 FF 
1f1dc     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1f1e0     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1f1e4     3A E4 05 F1 | 	add	objptr, #58
1f1e8     F2 1A C2 FA | 	rdbyte	arg05, objptr
1f1ec     0D 17 02 FD | 	qmul	arg03, arg05
1f1f0                 | '   ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
1f1f0     10 00 00 FF 
1f1f4     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1f1f8     02 E4 85 F1 | 	sub	objptr, #2
1f1fc     F2 20 E2 FA | 	rdword	local02, objptr
1f200     01 20 46 F0 | 	shr	local02, #1
1f204     0F 15 02 F6 | 	mov	arg02, local01
1f208     01 16 06 F6 | 	mov	arg03, #1
1f20c     00 18 06 F6 | 	mov	arg04, #0
1f210     01 1A 06 F6 | 	mov	arg05, #1
1f214     0B 00 00 FF 
1f218     90 E4 05 F1 | 	add	objptr, ##5776
1f21c     18 1E 62 FD | 	getqx	local01
1f220     10 1F 02 F1 | 	add	local01, local02
1f224     0F 13 02 F1 | 	add	arg01, local01
1f228     30 0C B0 FD | 	call	#_psram_spin2_fill
1f22c                 | '   cursor_x+=2
1f22c     0B 00 00 FF 
1f230     90 E4 85 F1 | 	sub	objptr, ##5776
1f234     F2 20 E2 FA | 	rdword	local02, objptr
1f238     02 20 06 F1 | 	add	local02, #2
1f23c     F2 20 52 FC | 	wrword	local02, objptr
1f240     3C E4 85 F1 | 	sub	objptr, #60
1f244                 | LR__2541
1f244                 | ' 
1f244                 | ' if cursor_x>=256
1f244     3C E4 05 F1 | 	add	objptr, #60
1f248     F2 20 E2 FA | 	rdword	local02, objptr
1f24c     3C E4 85 F1 | 	sub	objptr, #60
1f250     00 21 56 F2 | 	cmps	local02, #256 wc
1f254     64 00 90 CD |  if_b	jmp	#LR__2543
1f258                 | '   cursor_x:=0
1f258     3C E4 05 F1 | 	add	objptr, #60
1f25c     F2 00 58 FC | 	wrword	#0, objptr
1f260                 | '   cursor_y+=1
1f260     02 E4 05 F1 | 	add	objptr, #2
1f264     F2 20 C2 FA | 	rdbyte	local02, objptr
1f268     01 20 06 F1 | 	add	local02, #1
1f26c     F2 20 42 FC | 	wrbyte	local02, objptr
1f270                 | '   if cursor_y>st_lines-1
1f270     C3 E4 05 F1 | 	add	objptr, #195
1f274     F2 20 02 FB | 	rdlong	local02, objptr
1f278     01 20 86 F1 | 	sub	local02, #1
1f27c     C3 E4 85 F1 | 	sub	objptr, #195
1f280     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f284     3E E4 85 F1 | 	sub	objptr, #62
1f288     10 17 5A F2 | 	cmps	arg03, local02 wcz
1f28c     2C 00 90 ED |  if_be	jmp	#LR__2542
1f290                 | '     scrollup2()
1f290     00 12 06 F6 | 	mov	arg01, #0
1f294     01 00 00 FF 
1f298     58 14 06 F6 | 	mov	arg02, ##600
1f29c     10 16 06 F6 | 	mov	arg03, #16
1f2a0     08 02 B0 FD | 	call	#_hg010b_spin2_scrollup2
1f2a4                 | '     cursor_y:=st_lines-1
1f2a4     01 E5 05 F1 | 	add	objptr, #257
1f2a8     F2 20 02 FB | 	rdlong	local02, objptr
1f2ac     01 20 86 F1 | 	sub	local02, #1
1f2b0     C3 E4 85 F1 | 	sub	objptr, #195
1f2b4     F2 20 42 FC | 	wrbyte	local02, objptr
1f2b8     3E E4 85 F1 | 	sub	objptr, #62
1f2bc                 | LR__2542
1f2bc                 | LR__2543
1f2bc                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1f2bc     3C E4 05 F1 | 	add	objptr, #60
1f2c0     F2 14 E2 FA | 	rdword	arg02, objptr
1f2c4     02 14 66 F0 | 	shl	arg02, #2
1f2c8     02 E4 05 F1 | 	add	objptr, #2
1f2cc     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f2d0     3E E4 85 F1 | 	sub	objptr, #62
1f2d4     04 16 66 F0 | 	shl	arg03, #4
1f2d8     04 16 06 F1 | 	add	arg03, #4
1f2dc     11 12 06 F6 | 	mov	arg01, #17
1f2e0     1C F0 BF FD | 	call	#_hg010b_spin2_setspritepos
1f2e4     A7 F0 03 F6 | 	mov	ptra, fp
1f2e8     B2 00 A0 FD | 	call	#popregs_
1f2ec                 | _hg010b_spin2_putchar_ret
1f2ec     2D 00 64 FD | 	ret
1f2f0                 | 
1f2f0                 | '     
1f2f0                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
1f2f0                 | ' 
1f2f0                 | ' pub putchar2(achar) | c,x,y,l,newcpl
1f2f0                 | _hg010b_spin2_putchar2
1f2f0     02 4A 05 F6 | 	mov	COUNT_, #2
1f2f4     A8 00 A0 FD | 	call	#pushregs_
1f2f8     09 1F 02 F6 | 	mov	local01, arg01
1f2fc                 | ' 
1f2fc                 | ' putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
1f2fc     3C E4 05 F1 | 	add	objptr, #60
1f300     F2 12 E2 FA | 	rdword	arg01, objptr
1f304     02 E4 05 F1 | 	add	objptr, #2
1f308     F2 14 C2 FA | 	rdbyte	arg02, objptr
1f30c     04 14 66 F0 | 	shl	arg02, #4
1f310     04 14 06 F1 | 	add	arg02, #4
1f314     03 E4 05 F1 | 	add	objptr, #3
1f318     F2 18 02 FB | 	rdlong	arg04, objptr
1f31c     04 E4 05 F1 | 	add	objptr, #4
1f320     F2 1A 02 FB | 	rdlong	arg05, objptr
1f324     45 E4 85 F1 | 	sub	objptr, #69
1f328     0F 17 02 F6 | 	mov	arg03, local01
1f32c     E4 FA BF FD | 	call	#_hg010b_spin2_putcharxycgf
1f330     04 E4 05 F1 | 	add	objptr, #4
1f334     F2 12 02 FB | 	rdlong	arg01, objptr
1f338     10 00 00 FF 
1f33c     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1f340     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1f344     3A E4 05 F1 | 	add	objptr, #58
1f348     F2 1A C2 FA | 	rdbyte	arg05, objptr
1f34c     0D 17 02 FD | 	qmul	arg03, arg05
1f350                 | ' ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
1f350     10 00 00 FF 
1f354     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1f358     02 E4 85 F1 | 	sub	objptr, #2
1f35c     F2 20 E2 FA | 	rdword	local02, objptr
1f360     01 20 46 F0 | 	shr	local02, #1
1f364     0F 15 02 F6 | 	mov	arg02, local01
1f368     01 16 06 F6 | 	mov	arg03, #1
1f36c     00 18 06 F6 | 	mov	arg04, #0
1f370     01 1A 06 F6 | 	mov	arg05, #1
1f374     0B 00 00 FF 
1f378     90 E4 05 F1 | 	add	objptr, ##5776
1f37c     18 1E 62 FD | 	getqx	local01
1f380     10 1F 02 F1 | 	add	local01, local02
1f384     0F 13 02 F1 | 	add	arg01, local01
1f388     D0 0A B0 FD | 	call	#_psram_spin2_fill
1f38c                 | ' 
1f38c                 | ' cursor_x+=2
1f38c     0B 00 00 FF 
1f390     90 E4 85 F1 | 	sub	objptr, ##5776
1f394     F2 20 E2 FA | 	rdword	local02, objptr
1f398     02 20 06 F1 | 	add	local02, #2
1f39c     F2 20 52 FC | 	wrword	local02, objptr
1f3a0                 | ' if cursor_x>=256
1f3a0     F2 20 E2 FA | 	rdword	local02, objptr
1f3a4     3C E4 85 F1 | 	sub	objptr, #60
1f3a8     00 21 56 F2 | 	cmps	local02, #256 wc
1f3ac     64 00 90 CD |  if_b	jmp	#LR__2551
1f3b0                 | '   cursor_x:=0
1f3b0     3C E4 05 F1 | 	add	objptr, #60
1f3b4     F2 00 58 FC | 	wrword	#0, objptr
1f3b8                 | '   cursor_y+=1
1f3b8     02 E4 05 F1 | 	add	objptr, #2
1f3bc     F2 20 C2 FA | 	rdbyte	local02, objptr
1f3c0     01 20 06 F1 | 	add	local02, #1
1f3c4     F2 20 42 FC | 	wrbyte	local02, objptr
1f3c8                 | '   if cursor_y>st_lines-1
1f3c8     C3 E4 05 F1 | 	add	objptr, #195
1f3cc     F2 20 02 FB | 	rdlong	local02, objptr
1f3d0     01 20 86 F1 | 	sub	local02, #1
1f3d4     C3 E4 85 F1 | 	sub	objptr, #195
1f3d8     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f3dc     3E E4 85 F1 | 	sub	objptr, #62
1f3e0     10 17 5A F2 | 	cmps	arg03, local02 wcz
1f3e4     2C 00 90 ED |  if_be	jmp	#LR__2550
1f3e8                 | '     scrollup2()
1f3e8     00 12 06 F6 | 	mov	arg01, #0
1f3ec     01 00 00 FF 
1f3f0     58 14 06 F6 | 	mov	arg02, ##600
1f3f4     10 16 06 F6 | 	mov	arg03, #16
1f3f8     B0 00 B0 FD | 	call	#_hg010b_spin2_scrollup2
1f3fc                 | '     cursor_y:=st_lines-1
1f3fc     01 E5 05 F1 | 	add	objptr, #257
1f400     F2 20 02 FB | 	rdlong	local02, objptr
1f404     01 20 86 F1 | 	sub	local02, #1
1f408     C3 E4 85 F1 | 	sub	objptr, #195
1f40c     F2 20 42 FC | 	wrbyte	local02, objptr
1f410     3E E4 85 F1 | 	sub	objptr, #62
1f414                 | LR__2550
1f414                 | LR__2551
1f414                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 ) 
1f414     3C E4 05 F1 | 	add	objptr, #60
1f418     F2 14 E2 FA | 	rdword	arg02, objptr
1f41c     02 14 66 F0 | 	shl	arg02, #2
1f420     02 E4 05 F1 | 	add	objptr, #2
1f424     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f428     3E E4 85 F1 | 	sub	objptr, #62
1f42c     04 16 66 F0 | 	shl	arg03, #4
1f430     04 16 06 F1 | 	add	arg03, #4
1f434     11 12 06 F6 | 	mov	arg01, #17
1f438     C4 EE BF FD | 	call	#_hg010b_spin2_setspritepos
1f43c     A7 F0 03 F6 | 	mov	ptra, fp
1f440     B2 00 A0 FD | 	call	#popregs_
1f444                 | _hg010b_spin2_putchar2_ret
1f444     2D 00 64 FD | 	ret
1f448                 | 
1f448                 | ' ''--------- Output a string at the cursor position, move the cursor  
1f448                 | ' 
1f448                 | ' pub write(text) | iii,c,ncx,ncy
1f448                 | _hg010b_spin2_write
1f448     04 4A 05 F6 | 	mov	COUNT_, #4
1f44c     A8 00 A0 FD | 	call	#pushregs_
1f450     09 1F 02 F6 | 	mov	local01, arg01
1f454                 | ' 
1f454                 | ' repeat iii from 0 to strsize(text)-1
1f454     00 20 06 F6 | 	mov	local02, #0
1f458     0F 13 02 F6 | 	mov	arg01, local01
1f45c     09 23 02 F6 | 	mov	local03, arg01
1f460     97 06 48 FB | 	callpa	#(@LR__2561-@LR__2560)>>2,fcache_load_ptr_
1f464                 | LR__2560
1f464     11 FB C9 FA | 	rdbyte	result1, local03 wz
1f468     01 22 06 51 |  if_ne	add	local03, #1
1f46c     F4 FF 9F 5D |  if_ne	jmp	#LR__2560
1f470                 | LR__2561
1f470     09 23 82 F1 | 	sub	local03, arg01
1f474     01 22 86 F1 | 	sub	local03, #1
1f478     00 22 56 F2 | 	cmps	local03, #0 wc
1f47c     01 24 86 F6 | 	negc	local04, #1
1f480     12 23 02 F1 | 	add	local03, local04
1f484                 | LR__2562
1f484                 | '   putchar2(byte[text+iii])
1f484     0F 13 02 F6 | 	mov	arg01, local01
1f488     10 13 02 F1 | 	add	arg01, local02
1f48c     09 13 C2 FA | 	rdbyte	arg01, arg01
1f490     5C FE BF FD | 	call	#_hg010b_spin2_putchar2
1f494     12 21 02 F1 | 	add	local02, local04
1f498     11 21 0A F2 | 	cmp	local02, local03 wz
1f49c     E4 FF 9F 5D |  if_ne	jmp	#LR__2562
1f4a0     A7 F0 03 F6 | 	mov	ptra, fp
1f4a4     B2 00 A0 FD | 	call	#popregs_
1f4a8                 | _hg010b_spin2_write_ret
1f4a8     2D 00 64 FD | 	ret
1f4ac                 | 
1f4ac                 | '    
1f4ac                 | ' ' a version for text scrolling in Basic shifted 4 lines down
1f4ac                 | ' 
1f4ac                 | ' pub scrollup2(start=0, end=600 , amount=16) | i
1f4ac                 | _hg010b_spin2_scrollup2
1f4ac     03 4A 05 F6 | 	mov	COUNT_, #3
1f4b0     A8 00 A0 FD | 	call	#pushregs_
1f4b4                 | ' 	
1f4b4                 | ' repeat i from 4 to 579 
1f4b4     04 1E 06 F6 | 	mov	local01, #4
1f4b8                 | LR__2570
1f4b8     F9 E4 05 F1 | 	add	objptr, #249
1f4bc     F2 1A 02 FB | 	rdlong	arg05, objptr
1f4c0     1C E4 85 F1 | 	sub	objptr, #28
1f4c4     F2 14 02 FB | 	rdlong	arg02, objptr
1f4c8     0F 19 02 F6 | 	mov	arg04, local01
1f4cc     10 18 06 F1 | 	add	arg04, #16
1f4d0     02 18 66 F0 | 	shl	arg04, #2
1f4d4     14 E4 05 F1 | 	add	objptr, #20
1f4d8     F2 16 02 FB | 	rdlong	arg03, objptr
1f4dc     0B 19 02 FD | 	qmul	arg04, arg03
1f4e0                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
1f4e0     F6 03 00 FF 
1f4e4     00 12 06 F6 | 	mov	arg01, ##519168
1f4e8     0D 13 82 F1 | 	sub	arg01, arg05
1f4ec     02 16 66 F0 | 	shl	arg03, #2
1f4f0     0A 00 00 FF 
1f4f4     DB E5 05 F1 | 	add	objptr, ##5595
1f4f8     18 1A 62 FD | 	getqx	arg05
1f4fc     0D 15 02 F1 | 	add	arg02, arg05
1f500     20 08 B0 FD | 	call	#_psram_spin2_read1
1f504     0A 00 00 FF 
1f508     D3 E5 85 F1 | 	sub	objptr, ##5587
1f50c     F2 1A 02 FB | 	rdlong	arg05, objptr
1f510     1C E4 85 F1 | 	sub	objptr, #28
1f514     F2 14 02 FB | 	rdlong	arg02, objptr
1f518     0F 19 02 F6 | 	mov	arg04, local01
1f51c     02 18 66 F0 | 	shl	arg04, #2
1f520     14 E4 05 F1 | 	add	objptr, #20
1f524     F2 16 02 FB | 	rdlong	arg03, objptr
1f528     0B 19 02 FD | 	qmul	arg04, arg03
1f52c                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
1f52c     F6 03 00 FF 
1f530     00 12 06 F6 | 	mov	arg01, ##519168
1f534     0D 13 82 F1 | 	sub	arg01, arg05
1f538     02 16 66 F0 | 	shl	arg03, #2
1f53c     0A 00 00 FF 
1f540     DB E5 05 F1 | 	add	objptr, ##5595
1f544     18 1A 62 FD | 	getqx	arg05
1f548     0D 15 02 F1 | 	add	arg02, arg05
1f54c     70 08 B0 FD | 	call	#_psram_spin2_write
1f550     0B 00 00 FF 
1f554     CC E4 85 F1 | 	sub	objptr, ##5836
1f558     01 1E 06 F1 | 	add	local01, #1
1f55c     01 00 00 FF 
1f560     44 1E 16 F2 | 	cmp	local01, ##580 wc
1f564     50 FF 9F CD |  if_b	jmp	#LR__2570
1f568                 | ' 
1f568                 | ' repeat i from 580 to 599
1f568     01 00 00 FF 
1f56c     44 1E 06 F6 | 	mov	local01, ##580
1f570                 | LR__2571
1f570                 | '    fastline(0,1023,i,write_background)   
1f570     45 E4 05 F1 | 	add	objptr, #69
1f574     F2 18 02 FB | 	rdlong	arg04, objptr
1f578     45 E4 85 F1 | 	sub	objptr, #69
1f57c     00 12 06 F6 | 	mov	arg01, #0
1f580     09 14 CE F9 | 	bmask	arg02, #9
1f584     0F 17 02 F6 | 	mov	arg03, local01
1f588     C0 EF BF FD | 	call	#_hg010b_spin2_fastline
1f58c     01 1E 06 F1 | 	add	local01, #1
1f590     01 00 00 FF 
1f594     58 1E 16 F2 | 	cmp	local01, ##600 wc
1f598     D4 FF 9F CD |  if_b	jmp	#LR__2571
1f59c                 | ' repeat i from 0 to 3
1f59c     00 1E 06 F6 | 	mov	local01, #0
1f5a0                 | LR__2572
1f5a0                 | '    fastline(0,1023,i,write_background)      
1f5a0     45 E4 05 F1 | 	add	objptr, #69
1f5a4     F2 18 02 FB | 	rdlong	arg04, objptr
1f5a8     45 E4 85 F1 | 	sub	objptr, #69
1f5ac     00 12 06 F6 | 	mov	arg01, #0
1f5b0     09 14 CE F9 | 	bmask	arg02, #9
1f5b4     0F 17 02 F6 | 	mov	arg03, local01
1f5b8     90 EF BF FD | 	call	#_hg010b_spin2_fastline
1f5bc     01 1E 06 F1 | 	add	local01, #1
1f5c0     04 1E 56 F2 | 	cmps	local01, #4 wc
1f5c4     D8 FF 9F CD |  if_b	jmp	#LR__2572
1f5c8                 | ' 
1f5c8                 | ' repeat i from 0 to 35
1f5c8     00 1E 06 F6 | 	mov	local01, #0
1f5cc                 | LR__2573
1f5cc     0F 1B 02 F6 | 	mov	arg05, local01
1f5d0     01 1A 06 F1 | 	add	arg05, #1
1f5d4     10 00 00 FF 
1f5d8     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1f5dc     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1f5e0     0B 1B 02 FD | 	qmul	arg05, arg03
1f5e4                 | '   ram.read1($80000-4096-1024-s_debug, textbuf_ptr+(i+1)*timings[7], timings[7])
1f5e4     F6 03 00 FF 
1f5e8     00 12 06 F6 | 	mov	arg01, ##519168
1f5ec     F9 E4 05 F1 | 	add	objptr, #249
1f5f0     F2 1A 02 FB | 	rdlong	arg05, objptr
1f5f4     0D 13 82 F1 | 	sub	arg01, arg05
1f5f8     F5 E4 85 F1 | 	sub	objptr, #245
1f5fc     F2 14 02 FB | 	rdlong	arg02, objptr
1f600     10 00 00 FF 
1f604     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1f608     0B 00 00 FF 
1f60c     C8 E4 05 F1 | 	add	objptr, ##5832
1f610     18 1A 62 FD | 	getqx	arg05
1f614     0D 15 02 F1 | 	add	arg02, arg05
1f618     08 07 B0 FD | 	call	#_psram_spin2_read1
1f61c     10 00 00 FF 
1f620     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1f624     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1f628     0B 1F 02 FD | 	qmul	local01, arg03
1f62c                 | '   ram.write($80000-4096-1024-s_debug, textbuf_ptr+i*timings[7], timings[7])
1f62c     F6 03 00 FF 
1f630     00 12 06 F6 | 	mov	arg01, ##519168
1f634     0A 00 00 FF 
1f638     D3 E5 85 F1 | 	sub	objptr, ##5587
1f63c     F2 1A 02 FB | 	rdlong	arg05, objptr
1f640     0D 13 82 F1 | 	sub	arg01, arg05
1f644     F5 E4 85 F1 | 	sub	objptr, #245
1f648     F2 14 02 FB | 	rdlong	arg02, objptr
1f64c     10 00 00 FF 
1f650     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1f654     0B 00 00 FF 
1f658     C8 E4 05 F1 | 	add	objptr, ##5832
1f65c     18 1A 62 FD | 	getqx	arg05
1f660     0D 15 02 F1 | 	add	arg02, arg05
1f664     58 07 B0 FD | 	call	#_psram_spin2_write
1f668     0B 00 00 FF 
1f66c     CC E4 85 F1 | 	sub	objptr, ##5836
1f670     01 1E 06 F1 | 	add	local01, #1
1f674     24 1E 56 F2 | 	cmps	local01, #36 wc
1f678     50 FF 9F CD |  if_b	jmp	#LR__2573
1f67c                 | ' repeat i from 0 to timings[7]-1
1f67c     00 1E 06 F6 | 	mov	local01, #0
1f680     10 00 00 FF 
1f684     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1f688     F7 20 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
1f68c     10 00 00 FF 
1f690     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1f694     01 20 86 F1 | 	sub	local02, #1
1f698     00 20 56 F2 | 	cmps	local02, #0 wc
1f69c     01 22 86 F6 | 	negc	local03, #1
1f6a0     11 21 02 F1 | 	add	local02, local03
1f6a4                 | LR__2574
1f6a4                 | '   ram.fill(textbuf_ptr+(36*timings[7]+i),32,1,0,1) 
1f6a4     04 E4 05 F1 | 	add	objptr, #4
1f6a8     F2 12 02 FB | 	rdlong	arg01, objptr
1f6ac     10 00 00 FF 
1f6b0     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1f6b4     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
1f6b8     10 00 00 FF 
1f6bc     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1f6c0     0D 19 02 F6 | 	mov	arg04, arg05
1f6c4     03 18 66 F0 | 	shl	arg04, #3
1f6c8     0D 19 02 F1 | 	add	arg04, arg05
1f6cc     02 18 66 F0 | 	shl	arg04, #2
1f6d0     0F 19 02 F1 | 	add	arg04, local01
1f6d4     0C 13 02 F1 | 	add	arg01, arg04
1f6d8     20 14 06 F6 | 	mov	arg02, #32
1f6dc     01 16 06 F6 | 	mov	arg03, #1
1f6e0     00 18 06 F6 | 	mov	arg04, #0
1f6e4     01 1A 06 F6 | 	mov	arg05, #1
1f6e8     0B 00 00 FF 
1f6ec     C8 E4 05 F1 | 	add	objptr, ##5832
1f6f0     68 07 B0 FD | 	call	#_psram_spin2_fill
1f6f4     0B 00 00 FF 
1f6f8     CC E4 85 F1 | 	sub	objptr, ##5836
1f6fc     11 1F 02 F1 | 	add	local01, local03
1f700     10 1F 0A F2 | 	cmp	local01, local02 wz
1f704     9C FF 9F 5D |  if_ne	jmp	#LR__2574
1f708     A7 F0 03 F6 | 	mov	ptra, fp
1f70c     B2 00 A0 FD | 	call	#popregs_
1f710                 | _hg010b_spin2_scrollup2_ret
1f710     2D 00 64 FD | 	ret
1f714                 | 
1f714                 | '  
1f714                 | ' ''----------- Scroll the screen one line down 
1f714                 | ' 
1f714                 | ' pub scrolldown(start=0) | i
1f714                 | _hg010b_spin2_scrolldown
1f714     05 4A 05 F6 | 	mov	COUNT_, #5
1f718     A8 00 A0 FD | 	call	#pushregs_
1f71c     09 1F 02 F6 | 	mov	local01, arg01
1f720                 | ' 
1f720                 | ' repeat i from 579 to (start*16)+4
1f720     01 00 00 FF 
1f724     43 20 06 F6 | 	mov	local02, ##579
1f728     0F 23 02 F6 | 	mov	local03, local01
1f72c     04 22 66 F0 | 	shl	local03, #4
1f730     04 22 06 F1 | 	add	local03, #4
1f734     01 00 00 FF 
1f738     43 22 56 F2 | 	cmps	local03, ##579 wc
1f73c     01 24 86 F6 | 	negc	local04, #1
1f740     12 27 02 F6 | 	mov	local05, local04
1f744     12 23 02 F1 | 	add	local03, local04
1f748                 | LR__2580
1f748     F9 E4 05 F1 | 	add	objptr, #249
1f74c     F2 24 02 FB | 	rdlong	local04, objptr
1f750     1C E4 85 F1 | 	sub	objptr, #28
1f754     F2 14 02 FB | 	rdlong	arg02, objptr
1f758     10 1B 02 F6 | 	mov	arg05, local02
1f75c     02 1A 66 F0 | 	shl	arg05, #2
1f760     14 E4 05 F1 | 	add	objptr, #20
1f764     F2 16 02 FB | 	rdlong	arg03, objptr
1f768     0B 1B 02 FD | 	qmul	arg05, arg03
1f76c                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
1f76c     F6 03 00 FF 
1f770     00 12 06 F6 | 	mov	arg01, ##519168
1f774     12 13 82 F1 | 	sub	arg01, local04
1f778     02 16 66 F0 | 	shl	arg03, #2
1f77c     0A 00 00 FF 
1f780     DB E5 05 F1 | 	add	objptr, ##5595
1f784     18 24 62 FD | 	getqx	local04
1f788     12 15 02 F1 | 	add	arg02, local04
1f78c     94 05 B0 FD | 	call	#_psram_spin2_read1
1f790     0A 00 00 FF 
1f794     D3 E5 85 F1 | 	sub	objptr, ##5587
1f798     F2 24 02 FB | 	rdlong	local04, objptr
1f79c     1C E4 85 F1 | 	sub	objptr, #28
1f7a0     F2 14 02 FB | 	rdlong	arg02, objptr
1f7a4     10 1B 02 F6 | 	mov	arg05, local02
1f7a8     10 1A 06 F1 | 	add	arg05, #16
1f7ac     02 1A 66 F0 | 	shl	arg05, #2
1f7b0     14 E4 05 F1 | 	add	objptr, #20
1f7b4     F2 16 02 FB | 	rdlong	arg03, objptr
1f7b8     0B 1B 02 FD | 	qmul	arg05, arg03
1f7bc                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
1f7bc     F6 03 00 FF 
1f7c0     00 12 06 F6 | 	mov	arg01, ##519168
1f7c4     12 13 82 F1 | 	sub	arg01, local04
1f7c8     02 16 66 F0 | 	shl	arg03, #2
1f7cc     0A 00 00 FF 
1f7d0     DB E5 05 F1 | 	add	objptr, ##5595
1f7d4     18 24 62 FD | 	getqx	local04
1f7d8     12 15 02 F1 | 	add	arg02, local04
1f7dc     E0 05 B0 FD | 	call	#_psram_spin2_write
1f7e0     0B 00 00 FF 
1f7e4     CC E4 85 F1 | 	sub	objptr, ##5836
1f7e8     13 21 02 F1 | 	add	local02, local05
1f7ec     11 21 0A F2 | 	cmp	local02, local03 wz
1f7f0     54 FF 9F 5D |  if_ne	jmp	#LR__2580
1f7f4                 | ' 
1f7f4                 | ' repeat i from (start*16)+4 to (start*16)+19
1f7f4     0F 21 02 F6 | 	mov	local02, local01
1f7f8     04 20 66 F0 | 	shl	local02, #4
1f7fc     04 20 06 F1 | 	add	local02, #4
1f800     0F 27 02 F6 | 	mov	local05, local01
1f804     04 26 66 F0 | 	shl	local05, #4
1f808     13 26 06 F1 | 	add	local05, #19
1f80c     0F 25 02 F6 | 	mov	local04, local01
1f810     04 24 66 F0 | 	shl	local04, #4
1f814     04 24 06 F1 | 	add	local04, #4
1f818     12 27 52 F2 | 	cmps	local05, local04 wc
1f81c     01 24 86 F6 | 	negc	local04, #1
1f820     12 23 02 F6 | 	mov	local03, local04
1f824     12 27 02 F1 | 	add	local05, local04
1f828                 | LR__2581
1f828                 | '    fastline(0,1023,i,write_background)    
1f828     45 E4 05 F1 | 	add	objptr, #69
1f82c     F2 18 02 FB | 	rdlong	arg04, objptr
1f830     45 E4 85 F1 | 	sub	objptr, #69
1f834     00 12 06 F6 | 	mov	arg01, #0
1f838     09 14 CE F9 | 	bmask	arg02, #9
1f83c     10 17 02 F6 | 	mov	arg03, local02
1f840     08 ED BF FD | 	call	#_hg010b_spin2_fastline
1f844     11 21 02 F1 | 	add	local02, local03
1f848     13 21 0A F2 | 	cmp	local02, local05 wz
1f84c     D8 FF 9F 5D |  if_ne	jmp	#LR__2581
1f850                 | '    
1f850                 | ' repeat i from 35 to start
1f850     23 20 06 F6 | 	mov	local02, #35
1f854     23 1E 56 F2 | 	cmps	local01, #35 wc
1f858     01 24 86 F6 | 	negc	local04, #1
1f85c     0F 27 02 F6 | 	mov	local05, local01
1f860     12 27 02 F1 | 	add	local05, local04
1f864                 | LR__2582
1f864                 | '   ram.read1($80000-4096-1024-s_debug, textbuf_ptr+(i*128), 128)
1f864     F6 03 00 FF 
1f868     00 12 06 F6 | 	mov	arg01, ##519168
1f86c     F9 E4 05 F1 | 	add	objptr, #249
1f870     F2 22 02 FB | 	rdlong	local03, objptr
1f874     11 13 82 F1 | 	sub	arg01, local03
1f878     F5 E4 85 F1 | 	sub	objptr, #245
1f87c     F2 14 02 FB | 	rdlong	arg02, objptr
1f880     10 23 02 F6 | 	mov	local03, local02
1f884     07 22 66 F0 | 	shl	local03, #7
1f888     11 15 02 F1 | 	add	arg02, local03
1f88c     80 16 06 F6 | 	mov	arg03, #128
1f890     0B 00 00 FF 
1f894     C8 E4 05 F1 | 	add	objptr, ##5832
1f898     88 04 B0 FD | 	call	#_psram_spin2_read1
1f89c                 | '   ram.write($80000-4096-1024-s_debug, textbuf_ptr+(i+1)*128,128)
1f89c     F6 03 00 FF 
1f8a0     00 12 06 F6 | 	mov	arg01, ##519168
1f8a4     0A 00 00 FF 
1f8a8     D3 E5 85 F1 | 	sub	objptr, ##5587
1f8ac     F2 22 02 FB | 	rdlong	local03, objptr
1f8b0     11 13 82 F1 | 	sub	arg01, local03
1f8b4     F5 E4 85 F1 | 	sub	objptr, #245
1f8b8     F2 14 02 FB | 	rdlong	arg02, objptr
1f8bc     10 23 02 F6 | 	mov	local03, local02
1f8c0     01 22 06 F1 | 	add	local03, #1
1f8c4     07 22 66 F0 | 	shl	local03, #7
1f8c8     11 15 02 F1 | 	add	arg02, local03
1f8cc     80 16 06 F6 | 	mov	arg03, #128
1f8d0     0B 00 00 FF 
1f8d4     C8 E4 05 F1 | 	add	objptr, ##5832
1f8d8     E4 04 B0 FD | 	call	#_psram_spin2_write
1f8dc     0B 00 00 FF 
1f8e0     CC E4 85 F1 | 	sub	objptr, ##5836
1f8e4     12 21 02 F1 | 	add	local02, local04
1f8e8     13 21 0A F2 | 	cmp	local02, local05 wz
1f8ec     74 FF 9F 5D |  if_ne	jmp	#LR__2582
1f8f0                 | ' repeat i from 0 to 127
1f8f0     00 20 06 F6 | 	mov	local02, #0
1f8f4                 | LR__2583
1f8f4                 | '   ram.fill((textbuf_ptr+start*128+i),32,1,0,1)      
1f8f4     04 E4 05 F1 | 	add	objptr, #4
1f8f8     F2 12 02 FB | 	rdlong	arg01, objptr
1f8fc     0F 27 02 F6 | 	mov	local05, local01
1f900     07 26 66 F0 | 	shl	local05, #7
1f904     13 13 02 F1 | 	add	arg01, local05
1f908     10 13 02 F1 | 	add	arg01, local02
1f90c     20 14 06 F6 | 	mov	arg02, #32
1f910     01 16 06 F6 | 	mov	arg03, #1
1f914     00 18 06 F6 | 	mov	arg04, #0
1f918     01 1A 06 F6 | 	mov	arg05, #1
1f91c     0B 00 00 FF 
1f920     C8 E4 05 F1 | 	add	objptr, ##5832
1f924     34 05 B0 FD | 	call	#_psram_spin2_fill
1f928     0B 00 00 FF 
1f92c     CC E4 85 F1 | 	sub	objptr, ##5836
1f930     01 20 06 F1 | 	add	local02, #1
1f934     80 20 56 F2 | 	cmps	local02, #128 wc
1f938     B8 FF 9F CD |  if_b	jmp	#LR__2583
1f93c     A7 F0 03 F6 | 	mov	ptra, fp
1f940     B2 00 A0 FD | 	call	#popregs_
1f944                 | _hg010b_spin2_scrolldown_ret
1f944     2D 00 64 FD | 	ret
1f948                 | 
1f948                 | ' 
1f948                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
1f948                 | ' 
1f948                 | ' pub crlf()
1f948                 | _hg010b_spin2_crlf
1f948                 | ' 
1f948                 | ' cursor_x:=leading_spaces*2
1f948     01 00 00 FF 
1f94c     B6 E4 05 F1 | 	add	objptr, ##694
1f950     F2 16 02 FB | 	rdlong	arg03, objptr
1f954     01 16 66 F0 | 	shl	arg03, #1
1f958     01 00 00 FF 
1f95c     7A E4 85 F1 | 	sub	objptr, ##634
1f960     F2 16 52 FC | 	wrword	arg03, objptr
1f964                 | ' cursor_y+=1
1f964     02 E4 05 F1 | 	add	objptr, #2
1f968     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f96c     01 16 06 F1 | 	add	arg03, #1
1f970     F2 16 42 FC | 	wrbyte	arg03, objptr
1f974                 | ' if cursor_y>st_lines-1
1f974     C3 E4 05 F1 | 	add	objptr, #195
1f978     F2 16 02 FB | 	rdlong	arg03, objptr
1f97c     01 16 86 F1 | 	sub	arg03, #1
1f980     C3 E4 85 F1 | 	sub	objptr, #195
1f984     F2 14 C2 FA | 	rdbyte	arg02, objptr
1f988     3E E4 85 F1 | 	sub	objptr, #62
1f98c     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
1f990     2C 00 90 ED |  if_be	jmp	#LR__2590
1f994                 | '   scrollup2()
1f994     00 12 06 F6 | 	mov	arg01, #0
1f998     01 00 00 FF 
1f99c     58 14 06 F6 | 	mov	arg02, ##600
1f9a0     10 16 06 F6 | 	mov	arg03, #16
1f9a4     04 FB BF FD | 	call	#_hg010b_spin2_scrollup2
1f9a8                 | '   cursor_y:=st_lines-1
1f9a8     01 E5 05 F1 | 	add	objptr, #257
1f9ac     F2 16 02 FB | 	rdlong	arg03, objptr
1f9b0     01 16 86 F1 | 	sub	arg03, #1
1f9b4     C3 E4 85 F1 | 	sub	objptr, #195
1f9b8     F2 16 42 FC | 	wrbyte	arg03, objptr
1f9bc     3E E4 85 F1 | 	sub	objptr, #62
1f9c0                 | LR__2590
1f9c0                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )  
1f9c0     3C E4 05 F1 | 	add	objptr, #60
1f9c4     F2 14 E2 FA | 	rdword	arg02, objptr
1f9c8     02 14 66 F0 | 	shl	arg02, #2
1f9cc     02 E4 05 F1 | 	add	objptr, #2
1f9d0     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f9d4     3E E4 85 F1 | 	sub	objptr, #62
1f9d8     04 16 66 F0 | 	shl	arg03, #4
1f9dc     04 16 06 F1 | 	add	arg03, #4
1f9e0     11 12 06 F6 | 	mov	arg01, #17
1f9e4     18 E9 BF FD | 	call	#_hg010b_spin2_setspritepos
1f9e8                 | _hg010b_spin2_crlf_ret
1f9e8     2D 00 64 FD | 	ret
1f9ec                 | 
1f9ec                 | ' 
1f9ec                 | ' 
1f9ec                 | ' '*************************************************************************
1f9ec                 | ' '                                                                        *
1f9ec                 | ' '  Conversions                                                           *
1f9ec                 | ' '                                                                        *
1f9ec                 | ' '*************************************************************************
1f9ec                 | ' 
1f9ec                 | ' ''---------- Convert a integer to dec string, return a pointer
1f9ec                 | ' 
1f9ec                 | ' pub inttostr(i):result |q,pos,k,j
1f9ec                 | _hg010b_spin2_inttostr
1f9ec     03 4A 05 F6 | 	mov	COUNT_, #3
1f9f0     A8 00 A0 FD | 	call	#pushregs_
1f9f4     09 1F 0A F6 | 	mov	local01, arg01 wz
1f9f8                 | ' 
1f9f8                 | ' j:=i
1f9f8                 | ' pos:=10
1f9f8     0A 20 06 F6 | 	mov	local02, #10
1f9fc                 | ' k:=0
1f9fc     00 22 06 F6 | 	mov	local03, #0
1fa00                 | ' 
1fa00                 | ' if (j==0)
1fa00     18 00 90 5D |  if_ne	jmp	#LR__2600
1fa04                 | '   n_string[0]:=48
1fa04     4D E4 05 F1 | 	add	objptr, #77
1fa08     F2 60 48 FC | 	wrbyte	#48, objptr
1fa0c                 | '   n_string[1]:=0
1fa0c     01 E4 05 F1 | 	add	objptr, #1
1fa10     F2 00 48 FC | 	wrbyte	#0, objptr
1fa14     4E E4 85 F1 | 	sub	objptr, #78
1fa18     C4 00 90 FD | 	jmp	#LR__2607
1fa1c                 | LR__2600
1fa1c                 | ' 
1fa1c                 | ' else
1fa1c                 | '   if (j<0)
1fa1c     0F 1F 52 F6 | 	abs	local01, local01 wc
1fa20                 | '     j:=0-j
1fa20                 | '     k:=45
1fa20     2D 22 06 C6 |  if_b	mov	local03, #45
1fa24                 | ' 
1fa24                 | '   n_string[11]:=0
1fa24     58 E4 05 F1 | 	add	objptr, #88
1fa28     F2 00 48 FC | 	wrbyte	#0, objptr
1fa2c     58 E4 85 F1 | 	sub	objptr, #88
1fa30     97 24 48 FB | 	callpa	#(@LR__2602-@LR__2601)>>2,fcache_load_ptr_
1fa34                 | '   repeat while (pos>-1)
1fa34                 | LR__2601
1fa34     00 20 56 F2 | 	cmps	local02, #0 wc
1fa38     40 00 90 CD |  if_b	jmp	#LR__2603
1fa3c     0F FB 51 F6 | 	abs	result1, local01 wc
1fa40     0A FA 15 FD | 	qdiv	result1, #10
1fa44                 | '     q:=j//10
1fa44     19 FA 61 FD | 	getqy	result1
1fa48     FD FA 81 F6 | 	negc	result1, result1
1fa4c     0F 1F 52 F6 | 	abs	local01, local01 wc
1fa50     0A 1E 16 FD | 	qdiv	local01, #10
1fa54                 | '     q:=48+q
1fa54     30 FA 05 F1 | 	add	result1, #48
1fa58                 | '     n_string[pos]:=q
1fa58     10 1F 02 F6 | 	mov	local01, local02
1fa5c     4D E4 05 F1 | 	add	objptr, #77
1fa60     F2 1E 02 F1 | 	add	local01, objptr
1fa64     0F FB 41 FC | 	wrbyte	result1, local01
1fa68                 | '     j:=j/10
1fa68     4D E4 85 F1 | 	sub	objptr, #77
1fa6c                 | '     pos-=1
1fa6c     01 20 86 F1 | 	sub	local02, #1
1fa70     18 1E 62 FD | 	getqx	local01
1fa74     0F 1F 82 F6 | 	negc	local01, local01
1fa78     B8 FF 9F FD | 	jmp	#LR__2601
1fa7c                 | LR__2602
1fa7c                 | LR__2603
1fa7c                 | '   repeat while n_string[0]==48
1fa7c                 | LR__2604
1fa7c     4D E4 05 F1 | 	add	objptr, #77
1fa80     F2 16 C2 FA | 	rdbyte	arg03, objptr
1fa84     4D E4 85 F1 | 	sub	objptr, #77
1fa88     30 16 0E F2 | 	cmp	arg03, #48 wz
1fa8c     20 00 90 5D |  if_ne	jmp	#LR__2605
1fa90                 | '     bytemove(@n_string,@n_string+1,12)
1fa90     4D E4 05 F1 | 	add	objptr, #77
1fa94     F2 12 02 F6 | 	mov	arg01, objptr
1fa98     F2 14 02 F6 | 	mov	arg02, objptr
1fa9c     4D E4 85 F1 | 	sub	objptr, #77
1faa0     01 14 06 F1 | 	add	arg02, #1
1faa4     0C 16 06 F6 | 	mov	arg03, #12
1faa8     D8 0D B0 FD | 	call	#__system____builtin_memmove
1faac     CC FF 9F FD | 	jmp	#LR__2604
1fab0                 | LR__2605
1fab0                 | ' 
1fab0                 | '   if k==45
1fab0     2D 22 0E F2 | 	cmp	local03, #45 wz
1fab4     28 00 90 5D |  if_ne	jmp	#LR__2606
1fab8                 | '      bytemove(@n_string+1,@n_string,12)
1fab8     4D E4 05 F1 | 	add	objptr, #77
1fabc     F2 12 02 F6 | 	mov	arg01, objptr
1fac0     01 12 06 F1 | 	add	arg01, #1
1fac4     F2 14 02 F6 | 	mov	arg02, objptr
1fac8     4D E4 85 F1 | 	sub	objptr, #77
1facc     0C 16 06 F6 | 	mov	arg03, #12
1fad0     B0 0D B0 FD | 	call	#__system____builtin_memmove
1fad4                 | '      n_string[0]:=k
1fad4     4D E4 05 F1 | 	add	objptr, #77
1fad8     F2 22 42 FC | 	wrbyte	local03, objptr
1fadc     4D E4 85 F1 | 	sub	objptr, #77
1fae0                 | LR__2606
1fae0                 | LR__2607
1fae0                 | ' 
1fae0                 | ' q:=@n_string
1fae0     4D E4 05 F1 | 	add	objptr, #77
1fae4     F2 FA 01 F6 | 	mov	result1, objptr
1fae8     4D E4 85 F1 | 	sub	objptr, #77
1faec                 | ' return q
1faec     A7 F0 03 F6 | 	mov	ptra, fp
1faf0     B2 00 A0 FD | 	call	#popregs_
1faf4                 | _hg010b_spin2_inttostr_ret
1faf4     2D 00 64 FD | 	ret
1faf8                 | 
1faf8                 | ' 
1faf8                 | ' '..............................................................................
1faf8                 | ' 
1faf8                 | ' {{
1faf8                 | ' }}
1faf8                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
1faf8                 | _psram_spin2_startx
1faf8     04 4A 05 F6 | 	mov	COUNT_, #4
1fafc     A8 00 A0 FD | 	call	#pushregs_
1fb00     09 1F 02 F6 | 	mov	local01, arg01
1fb04     0B 21 02 F6 | 	mov	local02, arg03
1fb08     0C 23 02 F6 | 	mov	local03, arg04
1fb0c                 | '     stop() ' restart driver if required
1fb0c     54 01 B0 FD | 	call	#_psram_spin2_stop
1fb10     00 1E 0E F2 | 	cmp	local01, #0 wz
1fb14     14 1E 06 AB |  if_e	rdlong	local01, #20
1fb18     0F 15 52 F6 | 	abs	arg02, local01 wc
1fb1c     A1 07 00 FF 
1fb20     40 14 16 FD | 	qdiv	arg02, ##1000000
1fb24                 | ' 
1fb24                 | '     ' use current frequency if none specified
1fb24                 | ' 
1fb24                 | '     if freq == 0 
1fb24                 | '         freq := clkfreq 
1fb24                 | ' 
1fb24                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
1fb24                 | ' 
1fb24                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
1fb24                 | '     if burst < 0
1fb24                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
1fb24     18 14 62 FD | 	getqx	arg02
1fb28     0A 19 82 F6 | 	negc	arg04, arg02
1fb2c     03 18 66 F0 | 	shl	arg04, #3
1fb30     84 18 86 F1 | 	sub	arg04, #132
1fb34     04 18 46 F0 | 	shr	arg04, #4
1fb38     04 18 66 F0 | 	shl	arg04, #4
1fb3c     00 18 56 F2 | 	cmps	arg04, #0 wc
1fb40     0E FA 65 C6 |  if_b	neg	result1, #14
1fb44     10 01 90 CD |  if_b	jmp	#LR__2613
1fb48                 | ' 
1fb48                 | '     ' compute the input delay
1fb48                 | ' 
1fb48                 | '     if delay <= 0
1fb48     01 20 56 F2 | 	cmps	local02, #1 wc
1fb4c     10 00 90 3D |  if_ae	jmp	#LR__2610
1fb50                 | '         delay := lookupDelay(freq)
1fb50     0F 13 02 F6 | 	mov	arg01, local01
1fb54     B8 04 B0 FD | 	call	#_psram_spin2_lookupDelay
1fb58     FD 20 02 F6 | 	mov	local02, result1
1fb5c     04 00 90 FD | 	jmp	#LR__2611
1fb60                 | LR__2610
1fb60                 | '     else
1fb60                 | '         delay <#= $f ' limit to 15
1fb60     0F 20 66 F3 | 	fles	local02, #15
1fb64                 | LR__2611
1fb64                 | ' 
1fb64                 | '     ' create our lock
1fb64                 | ' 
1fb64                 | '     driverlock := LOCKNEW()  
1fb64     00 FA 05 F6 | 	mov	result1, #0
1fb68     04 FA 61 FD | 	locknew	result1
1fb6c     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1fb70     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
1fb74                 | '     if driverlock == -1
1fb74     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1fb78     FF FF 7F FF 
1fb7c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
1fb80                 | '         return ERR_NO_LOCK
1fb80     1A FA 65 A6 |  if_e	neg	result1, #26
1fb84     D0 00 90 AD |  if_e	jmp	#LR__2613
1fb88                 | ' 
1fb88                 | '     ' patch in the proper data and HUB addresses to the startup structure
1fb88                 | ' 
1fb88                 | '     long[@startupData][0]:=clkfreq
1fb88     14 1E 06 FB | 	rdlong	local01, #20
1fb8c     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
1fb90     FA 1E 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
1fb94                 | ' '    long[@startupData][1]:=$1000_0000
1fb94                 | '     long[@startupData][5]:=@deviceData
1fb94     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
1fb98     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1fb9c     20 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #32
1fba0     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
1fba4     14 14 06 F1 | 	add	arg02, #20
1fba8     0A 1F 62 FC | 	wrlong	local01, arg02
1fbac                 | '     long[@startupData][6]:=@qosData
1fbac     A0 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #160
1fbb0     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1fbb4     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
1fbb8     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
1fbbc     18 14 06 F1 | 	add	arg02, #24
1fbc0     0A 1F 62 FC | 	wrlong	local01, arg02
1fbc4                 | '     long[@startupData][7]:=$7FF00
1fbc4     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1fbc8     1C 1E 06 F1 | 	add	local01, #28
1fbcc     FF 03 80 FF 
1fbd0     0F 01 6A FC | 	wrlong	##524032, local01
1fbd4                 | ' 
1fbd4                 | '     ' setup some default bank and QoS parameter values
1fbd4                 | ' 
1fbd4                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
1fbd4     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
1fbd8     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
1fbdc     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
1fbe0     10 18 66 F0 | 	shl	arg04, #16
1fbe4     0C 20 66 F0 | 	shl	local02, #12
1fbe8     10 19 42 F5 | 	or	arg04, local02
1fbec     18 18 46 F5 | 	or	arg04, #24
1fbf0     0C 15 02 F6 | 	mov	arg02, arg04
1fbf4     02 16 06 F6 | 	mov	arg03, #2
1fbf8     A0 00 A0 FD | 	call	#\builtin_longfill_
1fbfc                 | '     longfill(@qosData, $FFFF0000, 8)
1fbfc     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
1fc00     07 16 06 F6 | 	mov	arg03, #7
1fc04     28 16 62 FD | 	setq	arg03
1fc08     80 FF FF FF 
1fc0c     FA 00 68 FC | 	wrlong	##-65536, ptr__psram_spin2_dat__
1fc10                 | ' 
1fc10                 | '     ' get the address of the PSRAM memory driver so we can start it
1fc10                 | ' 
1fc10                 | '     driverAddr:= driver.getDriverAddr()
1fc10                 | '     return @driver_start
1fc10     20 F2 05 F1 | 	add	ptr__psram16drv_spin2_dat__, #32
1fc14     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
1fc18     20 F2 85 F1 | 	sub	ptr__psram16drv_spin2_dat__, #32
1fc1c                 | ' 
1fc1c                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
1fc1c                 | ' 
1fc1c                 | '     if desiredcog < 0
1fc1c     00 22 56 F2 | 	cmps	local03, #0 wc
1fc20                 | '         desiredcog := NEWCOG
1fc20     10 22 06 C6 |  if_b	mov	local03, #16
1fc24                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
1fc24     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
1fc28     11 25 02 F6 | 	mov	local04, local03
1fc2c     28 F4 61 FD | 	setq	ptr__psram_spin2_dat__
1fc30     0A 25 F2 FC | 	coginit	local04, arg02 wc
1fc34     01 24 66 C6 |  if_b	neg	local04, #1
1fc38     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
1fc3c     FA 24 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
1fc40                 | '     repeat until long[@startupData] == 0 
1fc40     28 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #40
1fc44                 | LR__2612
1fc44     FA 24 0A FB | 	rdlong	local04, ptr__psram_spin2_dat__ wz
1fc48     F8 FF 9F 5D |  if_ne	jmp	#LR__2612
1fc4c                 | ' 
1fc4c                 | '     return drivercog
1fc4c     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
1fc50     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
1fc54     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1fc58                 | LR__2613
1fc58     A7 F0 03 F6 | 	mov	ptra, fp
1fc5c     B2 00 A0 FD | 	call	#popregs_
1fc60                 | _psram_spin2_startx_ret
1fc60     2D 00 64 FD | 	ret
1fc64                 | 
1fc64                 | ' 
1fc64                 | ' '..............................................................................
1fc64                 | ' 
1fc64                 | ' {{
1fc64                 | ' }}
1fc64                 | ' PUB stop() : i
1fc64                 | _psram_spin2_stop
1fc64     00 00 06 F6 | 	mov	_var01, #0
1fc68                 | '     if drivercog <> -1
1fc68     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1fc6c     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1fc70     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1fc74     FF FF 7F FF 
1fc78     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
1fc7c     70 00 90 AD |  if_e	jmp	#LR__2623
1fc80                 | '         cogstop(drivercog) ' a rather brutal stop
1fc80     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1fc84     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1fc88     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1fc8c     03 12 62 FD | 	cogstop	arg01
1fc90     97 26 48 FB | 	callpa	#(@LR__2622-@LR__2620)>>2,fcache_load_ptr_
1fc94                 | '         repeat i from 0 to 7
1fc94                 | LR__2620
1fc94                 | '             if long[$7FF00][i*3] < 0
1fc94     00 FB 01 F6 | 	mov	result1, _var01
1fc98     01 FA 65 F0 | 	shl	result1, #1
1fc9c     00 FB 01 F1 | 	add	result1, _var01
1fca0     02 FA 65 F0 | 	shl	result1, #2
1fca4     FF 03 00 FF 
1fca8     00 FB 05 F1 | 	add	result1, ##524032
1fcac     FD FA 01 FB | 	rdlong	result1, result1
1fcb0     00 FA 55 F2 | 	cmps	result1, #0 wc
1fcb4     1C 00 90 3D |  if_ae	jmp	#LR__2621
1fcb8                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
1fcb8     00 FB 01 F6 | 	mov	result1, _var01
1fcbc     01 FA 65 F0 | 	shl	result1, #1
1fcc0     00 FB 01 F1 | 	add	result1, _var01
1fcc4     02 FA 65 F0 | 	shl	result1, #2
1fcc8     FF 03 00 FF 
1fccc     00 FB 05 F1 | 	add	result1, ##524032
1fcd0     FD 20 68 FC | 	wrlong	#16, result1
1fcd4                 | LR__2621
1fcd4     01 00 06 F1 | 	add	_var01, #1
1fcd8     08 00 56 F2 | 	cmps	_var01, #8 wc
1fcdc     B4 FF 9F CD |  if_b	jmp	#LR__2620
1fce0                 | LR__2622
1fce0                 | '         drivercog := -1
1fce0     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1fce4     FF FF FF FF 
1fce8     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
1fcec     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1fcf0                 | LR__2623
1fcf0                 | '     if driverlock <> -1
1fcf0     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1fcf4     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
1fcf8     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1fcfc     FF FF 7F FF 
1fd00     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
1fd04                 | '         LOCKRET(driverlock)
1fd04     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
1fd08     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
1fd0c     05 12 62 5D |  if_ne	lockret	arg01
1fd10                 | '         driverlock := -1
1fd10     FF FF FF 5F 
1fd14     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
1fd18     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
1fd1c     00 FB 01 F6 | 	mov	result1, _var01
1fd20                 | _psram_spin2_stop_ret
1fd20     2D 00 64 FD | 	ret
1fd24                 | 
1fd24                 | ' 
1fd24                 | ' '..............................................................................
1fd24                 | ' 
1fd24                 | ' {{
1fd24                 | ' }}
1fd24                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
1fd24                 | _psram_spin2_read1
1fd24                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
1fd24                 | '     if drivercog == -1 ' driver must be running
1fd24     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1fd28     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
1fd2c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1fd30     FF FF 7F FF 
1fd34     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
1fd38                 | '         return ERR_INACTIVE
1fd38     0F FA 65 A6 |  if_e	neg	result1, #15
1fd3c     7C 00 90 AD |  if_e	jmp	#LR__2631
1fd40                 | '     if count == 0 ' don't even bother reading
1fd40     00 16 0E F2 | 	cmp	arg03, #0 wz
1fd44                 | '         return 0
1fd44     00 FA 05 A6 |  if_e	mov	result1, #0
1fd48     70 00 90 AD |  if_e	jmp	#LR__2631
1fd4c                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
1fd4c     00 FA 05 F6 | 	mov	result1, #0
1fd50     01 FA 61 FD | 	cogid	result1
1fd54     FD 00 02 F6 | 	mov	_var01, result1
1fd58     01 00 66 F0 | 	shl	_var01, #1
1fd5c     FD 00 02 F1 | 	add	_var01, result1
1fd60     02 00 66 F0 | 	shl	_var01, #2
1fd64     FF 03 00 FF 
1fd68     00 03 06 F6 | 	mov	_var02, ##524032
1fd6c     00 03 02 F1 | 	add	_var02, _var01
1fd70                 | '     if long[mailbox] < 0
1fd70     01 01 02 FB | 	rdlong	_var01, _var02
1fd74     00 00 56 F2 | 	cmps	_var01, #0 wc
1fd78                 | '         return ERR_MAILBOX_BUSY
1fd78     1C FA 65 C6 |  if_b	neg	result1, #28
1fd7c     3C 00 90 CD |  if_b	jmp	#LR__2631
1fd80                 | '     long[mailbox][2] := count
1fd80     08 02 06 F1 | 	add	_var02, #8
1fd84     01 17 62 FC | 	wrlong	arg03, _var02
1fd88                 | '     long[mailbox][1] := dstHubAddr
1fd88     04 02 86 F1 | 	sub	_var02, #4
1fd8c     01 13 62 FC | 	wrlong	arg01, _var02
1fd90     04 02 86 F1 | 	sub	_var02, #4
1fd94                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
1fd94     0A 05 02 F6 | 	mov	_var03, arg02
1fd98     D9 04 06 F4 | 	bitl	_var03, #217
1fd9c     00 00 58 FF 
1fda0     00 00 06 F6 | 	mov	_var01, ##-1342177280
1fda4     02 01 02 F1 | 	add	_var01, _var03
1fda8     01 01 62 FC | 	wrlong	_var01, _var02
1fdac                 | '     repeat
1fdac                 | LR__2630
1fdac                 | '         result := long[mailbox]    
1fdac     01 05 02 FB | 	rdlong	_var03, _var02
1fdb0     00 04 56 F2 | 	cmps	_var03, #0 wc
1fdb4     F4 FF 9F CD |  if_b	jmp	#LR__2630
1fdb8                 | '     while result < 0   
1fdb8                 | '     return -result                       'return success or error
1fdb8     02 FB 61 F6 | 	neg	result1, _var03
1fdbc                 | LR__2631
1fdbc                 | _psram_spin2_read1_ret
1fdbc     2D 00 64 FD | 	ret
1fdc0                 | 
1fdc0                 | ' 
1fdc0                 | ' '..............................................................................
1fdc0                 | ' 
1fdc0                 | ' {{
1fdc0                 | ' }}
1fdc0                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
1fdc0                 | _psram_spin2_write
1fdc0                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
1fdc0                 | '     if drivercog == -1 ' driver must be running
1fdc0     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1fdc4     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
1fdc8     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1fdcc     FF FF 7F FF 
1fdd0     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
1fdd4                 | '         return ERR_INACTIVE
1fdd4     0F FA 65 A6 |  if_e	neg	result1, #15
1fdd8     7C 00 90 AD |  if_e	jmp	#LR__2641
1fddc                 | '     if count == 0 ' don't even bother writing
1fddc     00 16 0E F2 | 	cmp	arg03, #0 wz
1fde0                 | '         return 0
1fde0     00 FA 05 A6 |  if_e	mov	result1, #0
1fde4     70 00 90 AD |  if_e	jmp	#LR__2641
1fde8                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
1fde8     00 FA 05 F6 | 	mov	result1, #0
1fdec     01 FA 61 FD | 	cogid	result1
1fdf0     FD 00 02 F6 | 	mov	_var01, result1
1fdf4     01 00 66 F0 | 	shl	_var01, #1
1fdf8     FD 00 02 F1 | 	add	_var01, result1
1fdfc     02 00 66 F0 | 	shl	_var01, #2
1fe00     FF 03 00 FF 
1fe04     00 03 06 F6 | 	mov	_var02, ##524032
1fe08     00 03 02 F1 | 	add	_var02, _var01
1fe0c                 | '     if long[mailbox] < 0
1fe0c     01 01 02 FB | 	rdlong	_var01, _var02
1fe10     00 00 56 F2 | 	cmps	_var01, #0 wc
1fe14                 | '         return ERR_MAILBOX_BUSY
1fe14     1C FA 65 C6 |  if_b	neg	result1, #28
1fe18     3C 00 90 CD |  if_b	jmp	#LR__2641
1fe1c                 | '     long[mailbox][2] := count
1fe1c     08 02 06 F1 | 	add	_var02, #8
1fe20     01 17 62 FC | 	wrlong	arg03, _var02
1fe24                 | '     long[mailbox][1] := srcHubAddr
1fe24     04 02 86 F1 | 	sub	_var02, #4
1fe28     01 13 62 FC | 	wrlong	arg01, _var02
1fe2c     04 02 86 F1 | 	sub	_var02, #4
1fe30                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
1fe30     0A 05 02 F6 | 	mov	_var03, arg02
1fe34     D9 04 06 F4 | 	bitl	_var03, #217
1fe38     00 00 78 FF 
1fe3c     00 00 06 F6 | 	mov	_var01, ##-268435456
1fe40     02 01 02 F1 | 	add	_var01, _var03
1fe44     01 01 62 FC | 	wrlong	_var01, _var02
1fe48                 | '     repeat
1fe48                 | LR__2640
1fe48                 | '         result := long[mailbox]    
1fe48     01 05 02 FB | 	rdlong	_var03, _var02
1fe4c     00 04 56 F2 | 	cmps	_var03, #0 wc
1fe50     F4 FF 9F CD |  if_b	jmp	#LR__2640
1fe54                 | '     while result < 0   
1fe54                 | '     return -result                       'return success or error
1fe54     02 FB 61 F6 | 	neg	result1, _var03
1fe58                 | LR__2641
1fe58                 | _psram_spin2_write_ret
1fe58     2D 00 64 FD | 	ret
1fe5c                 | 
1fe5c                 | ' 
1fe5c                 | ' ' generalized fill
1fe5c                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
1fe5c                 | _psram_spin2_fill
1fe5c     09 01 02 F6 | 	mov	_var01, arg01
1fe60     0A 03 02 F6 | 	mov	_var02, arg02
1fe64     0B 05 02 F6 | 	mov	_var03, arg03
1fe68     0D 07 02 F6 | 	mov	_var04, arg05
1fe6c                 | '     case datasize 
1fe6c     01 06 86 F1 | 	sub	_var04, #1
1fe70     04 06 26 F3 | 	fle	_var04, #4
1fe74     30 06 62 FD | 	jmprel	_var04
1fe78                 | LR__2650
1fe78     10 00 90 FD | 	jmp	#LR__2651
1fe7c     18 00 90 FD | 	jmp	#LR__2652
1fe80     2C 00 90 FD | 	jmp	#LR__2654
1fe84     1C 00 90 FD | 	jmp	#LR__2653
1fe88     24 00 90 FD | 	jmp	#LR__2654
1fe8c                 | LR__2651
1fe8c                 | '         1: req := driver.R_WRITEBYTE
1fe8c     00 00 60 FF 
1fe90     00 08 06 F6 | 	mov	_var05, ##-1073741824
1fe94     20 00 90 FD | 	jmp	#LR__2655
1fe98                 | LR__2652
1fe98                 | '         2: req := driver.R_WRITEWORD
1fe98     00 00 68 FF 
1fe9c     00 08 06 F6 | 	mov	_var05, ##-805306368
1fea0     14 00 90 FD | 	jmp	#LR__2655
1fea4                 | LR__2653
1fea4                 | '         4: req := driver.R_WRITELONG
1fea4     00 00 70 FF 
1fea8     00 08 06 F6 | 	mov	_var05, ##-536870912
1feac     08 00 90 FD | 	jmp	#LR__2655
1feb0                 | LR__2654
1feb0                 | '         other : return ERR_INVALID
1feb0     06 FA 65 F6 | 	neg	result1, #6
1feb4     94 00 90 FD | 	jmp	#LR__2657
1feb8                 | LR__2655
1feb8                 | '     if count == 0   ' nothing to do
1feb8     00 04 0E F2 | 	cmp	_var03, #0 wz
1febc                 | '         return 0
1febc     00 FA 05 A6 |  if_e	mov	result1, #0
1fec0     88 00 90 AD |  if_e	jmp	#LR__2657
1fec4                 | '     if drivercog == -1
1fec4     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1fec8     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
1fecc     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1fed0     FF FF 7F FF 
1fed4     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
1fed8                 | '         return ERR_INACTIVE
1fed8     0F FA 65 A6 |  if_e	neg	result1, #15
1fedc     6C 00 90 AD |  if_e	jmp	#LR__2657
1fee0                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
1fee0     00 FA 05 F6 | 	mov	result1, #0
1fee4     01 FA 61 FD | 	cogid	result1
1fee8     FD 06 02 F6 | 	mov	_var04, result1
1feec     01 06 66 F0 | 	shl	_var04, #1
1fef0     FD 06 02 F1 | 	add	_var04, result1
1fef4     02 06 66 F0 | 	shl	_var04, #2
1fef8     FF 03 00 FF 
1fefc     00 0B 06 F6 | 	mov	_var06, ##524032
1ff00     03 0B 02 F1 | 	add	_var06, _var04
1ff04                 | '     if long[mailbox] < 0
1ff04     05 07 02 FB | 	rdlong	_var04, _var06
1ff08     00 06 56 F2 | 	cmps	_var04, #0 wc
1ff0c                 | '         return ERR_MAILBOX_BUSY
1ff0c     1C FA 65 C6 |  if_b	neg	result1, #28
1ff10     38 00 90 CD |  if_b	jmp	#LR__2657
1ff14                 | '     long[mailbox][2] := count
1ff14     08 0A 06 F1 | 	add	_var06, #8
1ff18     05 05 62 FC | 	wrlong	_var03, _var06
1ff1c                 | '     long[mailbox][1] := pattern
1ff1c     04 0A 86 F1 | 	sub	_var06, #4
1ff20     05 03 62 FC | 	wrlong	_var02, _var06
1ff24     04 0A 86 F1 | 	sub	_var06, #4
1ff28                 | '     long[mailbox] := req + (addr & $1ffffff)
1ff28     04 0D 02 F6 | 	mov	_var07, _var05
1ff2c     00 0F 02 F6 | 	mov	_var08, _var01
1ff30     D9 0E 06 F4 | 	bitl	_var08, #217
1ff34     07 0D 02 F1 | 	add	_var07, _var08
1ff38     05 0D 62 FC | 	wrlong	_var07, _var06
1ff3c                 | '     repeat
1ff3c                 | LR__2656
1ff3c                 | '         r := long[mailbox]
1ff3c     05 0F 02 FB | 	rdlong	_var08, _var06
1ff40     00 0E 56 F2 | 	cmps	_var08, #0 wc
1ff44     F4 FF 9F CD |  if_b	jmp	#LR__2656
1ff48                 | '     while r < 0
1ff48                 | '     return -r                  ' return 0 for success or negated error code
1ff48     07 FB 61 F6 | 	neg	result1, _var08
1ff4c                 | LR__2657
1ff4c                 | _psram_spin2_fill_ret
1ff4c     2D 00 64 FD | 	ret
1ff50                 | 
1ff50                 | ' 
1ff50                 | ' '..............................................................................
1ff50                 | ' 
1ff50                 | ' {{
1ff50                 | ' }}
1ff50                 | ' PUB setQos(cog, qos) : result | mailbox
1ff50                 | _psram_spin2_setQos
1ff50     09 01 02 F6 | 	mov	_var01, arg01
1ff54                 | '     if drivercog == -1 ' driver must be running
1ff54     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1ff58     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
1ff5c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1ff60     FF FF 7F FF 
1ff64     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
1ff68                 | '         return ERR_INACTIVE
1ff68     0F FA 65 A6 |  if_e	neg	result1, #15
1ff6c     9C 00 90 AD |  if_e	jmp	#LR__2664
1ff70                 | '     if cog < 0 or cog > 7 ' enforce cog id range
1ff70     00 00 56 F2 | 	cmps	_var01, #0 wc
1ff74     08 00 90 CD |  if_b	jmp	#LR__2660
1ff78     08 00 56 F2 | 	cmps	_var01, #8 wc
1ff7c     08 00 90 CD |  if_b	jmp	#LR__2661
1ff80                 | LR__2660
1ff80                 | '         return ERR_INVALID
1ff80     06 FA 65 F6 | 	neg	result1, #6
1ff84     84 00 90 FD | 	jmp	#LR__2664
1ff88                 | LR__2661
1ff88                 | '     long[@qosData][cog] := qos & !$1ff
1ff88     FF 15 26 F5 | 	andn	arg02, #511
1ff8c     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
1ff90     02 00 66 F0 | 	shl	_var01, #2
1ff94     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
1ff98     00 15 62 FC | 	wrlong	arg02, _var01
1ff9c                 | '     mailbox := $7FF00 + drivercog*12
1ff9c     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
1ffa0     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
1ffa4     02 07 02 F6 | 	mov	_var04, _var03
1ffa8     01 06 66 F0 | 	shl	_var04, #1
1ffac     02 07 02 F1 | 	add	_var04, _var03
1ffb0     02 06 66 F0 | 	shl	_var04, #2
1ffb4     FF 03 00 FF 
1ffb8     00 09 06 F6 | 	mov	_var05, ##524032
1ffbc     03 09 02 F1 | 	add	_var05, _var04
1ffc0                 | '     repeat until LOCKTRY(driverlock)
1ffc0     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
1ffc4                 | LR__2662
1ffc4     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1ffc8     06 12 72 FD | 	locktry	arg01 wc
1ffcc     F4 FF 9F 3D |  if_ae	jmp	#LR__2662
1ffd0     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1ffd4                 | '     long[mailbox] := driver.R_CONFIG + cogid()
1ffd4     00 06 06 F6 | 	mov	_var04, #0
1ffd8     01 06 62 FD | 	cogid	_var04
1ffdc     00 00 78 FF 
1ffe0     00 02 06 F6 | 	mov	_var02, ##-268435456
1ffe4     03 03 02 F1 | 	add	_var02, _var04
1ffe8     04 03 62 FC | 	wrlong	_var02, _var05
1ffec                 | '     repeat while long[mailbox] < 0
1ffec                 | LR__2663
1ffec     04 03 02 FB | 	rdlong	_var02, _var05
1fff0     00 02 56 F2 | 	cmps	_var02, #0 wc
1fff4     F4 FF 9F CD |  if_b	jmp	#LR__2663
1fff8                 | '     LOCKREL(driverlock)
1fff8     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1fffc     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
20000     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
20004     07 12 72 FD | 	lockrel	arg01 wc
20008     00 FA 05 F6 | 	mov	result1, #0
2000c                 | LR__2664
2000c                 | _psram_spin2_setQos_ret
2000c     2D 00 64 FD | 	ret
20010                 | 
20010                 | ' 
20010                 | ' '..............................................................................
20010                 | ' 
20010                 | ' {{
20010                 | ' }}
20010                 | ' PRI lookupDelay(freq) : delay | profile
20010                 | _psram_spin2_lookupDelay
20010                 | '     profile := @delayTable
20010     08 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #264
20014     FA 00 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
20018                 | '     delay := long[profile][0]
20018     00 03 02 FB | 	rdlong	_var02, _var01
2001c                 | '     repeat while long[profile][1] 
2001c     08 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #264
20020     97 16 48 FB | 	callpa	#(@LR__2671-@LR__2670)>>2,fcache_load_ptr_
20024                 | LR__2670
20024     04 00 06 F1 | 	add	_var01, #4
20028     00 FB 09 FB | 	rdlong	result1, _var01 wz
2002c     04 00 86 F1 | 	sub	_var01, #4
20030     1C 00 90 AD |  if_e	jmp	#LR__2672
20034                 | '         if freq +< long[profile][1] 
20034     04 00 06 F1 | 	add	_var01, #4
20038     00 FB 01 FB | 	rdlong	result1, _var01
2003c     04 00 86 F1 | 	sub	_var01, #4
20040     FD 12 12 F2 | 	cmp	arg01, result1 wc
20044                 | '             quit
20044                 | '         profile += 4
20044     04 00 06 31 |  if_ae	add	_var01, #4
20048                 | '         delay++
20048     01 02 06 31 |  if_ae	add	_var02, #1
2004c     D4 FF 9F 3D |  if_ae	jmp	#LR__2670
20050                 | LR__2671
20050                 | LR__2672
20050     01 FB 01 F6 | 	mov	result1, _var02
20054                 | _psram_spin2_lookupDelay_ret
20054     2D 00 64 FD | 	ret
20058                 | 
20058                 | ' 
20058                 | ' PUB start() : r
20058                 | _usbnew_spin2_start
20058     00 00 06 F6 | 	mov	_var01, #0
2005c                 | '   ifnot driver_cog
2005c     15 00 00 FF 
20060     4B F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10827
20064     FB 02 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
20068     15 00 00 FF 
2006c     4B F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10827
20070     38 00 90 5D |  if_ne	jmp	#LR__2680
20074                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
20074     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
20078     10 00 06 F6 | 	mov	_var01, #16
2007c     00 16 06 F6 | 	mov	arg03, #0
20080     28 16 62 FD | 	setq	arg03
20084     0A 01 F2 FC | 	coginit	_var01, arg02 wc
20088     01 00 66 C6 |  if_b	neg	_var01, #1
2008c                 | '     if r >= 0
2008c     00 00 56 F2 | 	cmps	_var01, #0 wc
20090                 | '       driver_cog := r+1
20090     00 03 02 36 |  if_ae	mov	_var02, _var01
20094     01 02 06 31 |  if_ae	add	_var02, #1
20098     15 00 00 3F 
2009c     4B F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10827
200a0     FB 02 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
200a4     15 00 00 3F 
200a8     4B F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10827
200ac                 | LR__2680
200ac     00 FB 01 F6 | 	mov	result1, _var01
200b0                 | _usbnew_spin2_start_ret
200b0     2D 00 64 FD | 	ret
200b4                 | 
200b4                 | '     '' (Always enabled)
200b4                 | ' 
200b4                 | ' '' Get current pressed state of a keyboard key
200b4                 | ' PUB keystate(key) : r | buf[2],tmp
200b4                 | _usbnew_spin2_keystate
200b4     00 04 06 F6 | 	mov	_var03, #0
200b8                 | '   if key >= $E0 && key < $E8
200b8     E0 12 56 F2 | 	cmps	arg01, #224 wc
200bc     34 00 90 CD |  if_b	jmp	#LR__2690
200c0     E8 12 56 F2 | 	cmps	arg01, #232 wc
200c4     2C 00 90 3D |  if_ae	jmp	#LR__2690
200c8                 | '     return not not (hkbd_report.byte[0] >> (key-$E0))
200c8     00 FA 05 F6 | 	mov	result1, #0
200cc     13 00 00 FF 
200d0     CC F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10188
200d4     09 07 02 F6 | 	mov	_var04, arg01
200d8     E0 06 86 F1 | 	sub	_var04, #224
200dc     FB 08 C2 FA | 	rdbyte	_var05, ptr__usbnew_spin2_dat__
200e0     03 09 4A F0 | 	shr	_var05, _var04 wz
200e4     13 00 00 FF 
200e8     CC F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10188
200ec     01 FA 65 56 |  if_ne	neg	result1, #1
200f0     58 00 90 FD | 	jmp	#_usbnew_spin2_keystate_ret
200f4                 | LR__2690
200f4                 | '   else
200f4                 | '     '' Do this in inline ASM to ensure atomicity
200f4                 | '     tmp := @hkbd_report
200f4     13 00 00 FF 
200f8     CC F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10188
200fc     FB 08 02 F6 | 	mov	_var05, ptr__usbnew_spin2_dat__
20100                 | '     org
20100     13 00 00 FF 
20104     CC F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10188
20108     97 1E 48 FB | 	callpa	#(@LR__2692-@LR__2691)>>2,fcache_load_ptr_
2010c                 | LR__2691
2010c 000             | 	org	0
2010c 000 28 02 64 FD | 	setq	#1
20110 001 04 01 02 FB | 	rdlong	_var01, _var05
20114 002 00 0B F2 F8 | 	getbyte	_var06, _var01, #2
20118 003 09 0B 0A F2 | 	cmp	_var06, arg01 wz
2011c 004 00 0B FA F8 | 	getbyte	_var06, _var01, #3
20120 005 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
20124 006 01 0B E2 F8 | 	getbyte	_var06, _var02, #0
20128 007 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
2012c 008 01 0B EA F8 | 	getbyte	_var06, _var02, #1
20130 009 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
20134 00a 01 0B F2 F8 | 	getbyte	_var06, _var02, #2
20138 00b 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
2013c 00c 01 0B FA F8 | 	getbyte	_var06, _var02, #3
20140 00d 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
20144 00e 01 04 66 A6 |  if_e	neg	_var03, #1
20148 00f             | LR__2692
20148                 | 	orgh
20148     02 FB 01 F6 | 	mov	result1, _var03
2014c                 | _usbnew_spin2_keystate_ret
2014c     2D 00 64 FD | 	ret
20150                 | 
20150                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
20150                 | ' 
20150                 | ' '' Return key event from buffer if there is one
20150                 | ' PUB get_key() : r | tail
20150                 | _usbnew_spin2_get_key
20150                 | '   tail := keyq_tail
20150     0F 00 00 FF 
20154     C9 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7881
20158     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
2015c                 | '   if keyq_head == tail
2015c     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
20160     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
20164     0F 00 00 FF 
20168     C8 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7880
2016c     00 03 0A F2 | 	cmp	_var02, _var01 wz
20170                 | '     return 0 ' No event
20170     00 FA 05 A6 |  if_e	mov	result1, #0
20174     34 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
20178                 | '   r := keyq_data[tail]
20178     00 03 02 F6 | 	mov	_var02, _var01
2017c     02 02 66 F0 | 	shl	_var02, #2
20180     0F 00 00 FF 
20184     CA F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7882
20188     FB 02 02 F1 | 	add	_var02, ptr__usbnew_spin2_dat__
2018c     01 FB 01 FB | 	rdlong	result1, _var02
20190                 | '   if ++tail == KEYQUEUE_SIZE
20190     01 00 06 F1 | 	add	_var01, #1
20194     80 00 0E F2 | 	cmp	_var01, #128 wz
20198                 | '     tail := 0
20198     00 00 06 A6 |  if_e	mov	_var01, #0
2019c                 | '   keyq_tail := tail
2019c     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
201a0     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
201a4     0F 00 00 FF 
201a8     C9 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7881
201ac                 | _usbnew_spin2_get_key_ret
201ac     2D 00 64 FD | 	ret
201b0                 | 
201b0                 | ' 
201b0                 | ' '' Emulate mouse movement
201b0                 | ' PUB mouse_move(x,y)
201b0                 | _usbnew_spin2_mouse_move
201b0     02 4A 05 F6 | 	mov	COUNT_, #2
201b4     A8 00 A0 FD | 	call	#pushregs_
201b8     09 1F 02 F6 | 	mov	local01, arg01
201bc     0A 21 02 F6 | 	mov	local02, arg02
201c0                 | '   mouse_lock := 1
201c0     14 00 00 FF 
201c4     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
201c8     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
201cc     14 00 00 FF 
201d0     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
201d4                 | '   waitus(2) ' hope driver is now done
201d4     02 12 06 F6 | 	mov	arg01, #2
201d8     E8 0A B0 FD | 	call	#__system___waitus
201dc                 | '   mouse_xacc := x
201dc     14 00 00 FF 
201e0     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
201e4     FB 1E 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
201e8                 | '   mouse_yacc := y
201e8     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
201ec     FB 20 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
201f0                 | '   if mouse_outptr
201f0     04 00 00 FF 
201f4     E5 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2533
201f8     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
201fc     0F 00 00 FF 
20200     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
20204     24 00 90 AD |  if_e	jmp	#LR__2700
20208                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
20208     10 20 66 F0 | 	shl	local02, #16
2020c     0F 1F 32 F9 | 	getword	local01, local01, #0
20210     0F 21 42 F5 | 	or	local02, local01
20214     0F 00 00 FF 
20218     C4 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7876
2021c     FB 1E 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
20220     0F 00 00 FF 
20224     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
20228     0F 21 62 FC | 	wrlong	local02, local01
2022c                 | LR__2700
2022c                 | '   mouse_lock := 0
2022c     14 00 00 FF 
20230     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
20234     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
20238     14 00 00 FF 
2023c     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
20240     A7 F0 03 F6 | 	mov	ptra, fp
20244     B2 00 A0 FD | 	call	#popregs_
20248                 | _usbnew_spin2_mouse_move_ret
20248     2D 00 64 FD | 	ret
2024c                 | 
2024c                 | '     '' Set HAVE_HIDPAD to enable.
2024c                 | '     '' Warning: never pass a device ID larger or equal than MAX_DEVICES
2024c                 | ' 
2024c                 | ' '' Get VID/PID pair for connected device. 0 means disconnected
2024c                 | ' PUB hidpad_id(dev) : r
2024c                 | _usbnew_spin2_hidpad_id
2024c                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
2024c     13 00 00 FF 
20250     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
20254     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
20258     09 01 02 F6 | 	mov	_var01, arg01
2025c     03 00 66 F0 | 	shl	_var01, #3
20260     09 01 82 F1 | 	sub	_var01, arg01
20264     02 00 66 F0 | 	shl	_var01, #2
20268     00 FB 01 F1 | 	add	result1, _var01
2026c     FD FA 01 FB | 	rdlong	result1, result1
20270     13 00 00 FF 
20274     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
20278                 | _usbnew_spin2_hidpad_id_ret
20278     2D 00 64 FD | 	ret
2027c                 | 
2027c                 | ' 
2027c                 | ' '' Get all button states for a device
2027c                 | ' PUB hidpad_buttons(dev) : r 
2027c                 | _usbnew_spin2_hidpad_buttons
2027c                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][5]
2027c     13 00 00 FF 
20280     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
20284     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
20288     09 01 02 F6 | 	mov	_var01, arg01
2028c     03 00 66 F0 | 	shl	_var01, #3
20290     09 01 82 F1 | 	sub	_var01, arg01
20294     02 00 66 F0 | 	shl	_var01, #2
20298     00 FB 01 F1 | 	add	result1, _var01
2029c     14 FA 05 F1 | 	add	result1, #20
202a0     FD FA 01 FB | 	rdlong	result1, result1
202a4     13 00 00 FF 
202a8     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
202ac                 | _usbnew_spin2_hidpad_buttons_ret
202ac     2D 00 64 FD | 	ret
202b0                 | 
202b0                 | ' 
202b0                 | ' '' Get state of an axis (normalized between -32768 and 32767)
202b0                 | ' PUB hidpad_axis(dev,axnum) : r
202b0                 | _usbnew_spin2_hidpad_axis
202b0                 | '   if axnum +>= 6
202b0     06 14 16 F2 | 	cmp	arg02, #6 wc
202b4                 | '     return 0
202b4     00 FA 05 36 |  if_ae	mov	result1, #0
202b8     40 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
202bc                 | '   else 
202bc                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
202bc     13 00 00 FF 
202c0     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
202c4     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
202c8     09 01 02 F6 | 	mov	_var01, arg01
202cc     03 00 66 F0 | 	shl	_var01, #3
202d0     09 01 82 F1 | 	sub	_var01, arg01
202d4     02 00 66 F0 | 	shl	_var01, #2
202d8     00 FB 01 F1 | 	add	result1, _var01
202dc     04 00 06 F6 | 	mov	_var01, #4
202e0     0A 01 02 F1 | 	add	_var01, arg02
202e4     01 00 66 F0 | 	shl	_var01, #1
202e8     FD 00 02 F1 | 	add	_var01, result1
202ec     00 FB E1 FA | 	rdword	result1, _var01
202f0     0F FA 65 F7 | 	signx	result1, #15
202f4     13 00 00 FF 
202f8     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
202fc                 | _usbnew_spin2_hidpad_axis_ret
202fc     2D 00 64 FD | 	ret
20300                 | 
20300                 | ' 
20300                 | ' 
20300                 | ' '--------------------------------------------------------------
20300                 | ' '---------- Init the variables, start the cog. ----------------
20300                 | ' '--------------------------------------------------------------
20300                 | ' 
20300                 | ' pub start(mbox,scope,cache) :cog,base | iii
20300                 | _audio096_spin2_start
20300     04 4A 05 F6 | 	mov	COUNT_, #4
20304     A8 00 A0 FD | 	call	#pushregs_
20308     09 1F 02 F6 | 	mov	local01, arg01
2030c                 | ' 
2030c                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
2030c                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
2030c                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
2030c                 | ' 
2030c                 | ' mailboxaddr:=mbox 
2030c     F2 1E 62 FC | 	wrlong	local01, objptr
20310                 | ' scope_ptr:=scope
20310     04 E4 05 F1 | 	add	objptr, #4
20314     F2 14 62 FC | 	wrlong	arg02, objptr
20318                 | ' cache_ptr:=cache
20318     04 E4 05 F1 | 	add	objptr, #4
2031c     F2 16 62 FC | 	wrlong	arg03, objptr
20320                 | ' base:=@channel1[0]
20320     04 E4 05 F1 | 	add	objptr, #4
20324     F2 20 02 F6 | 	mov	local02, objptr
20328                 | ' long[$40]:=mbox
20328     40 1E 66 FC | 	wrlong	local01, #64
2032c                 | ' repeat iii from 0 to 7
2032c     00 22 06 F6 | 	mov	local03, #0
20330     02 00 00 FF 
20334     A0 E8 05 F1 | 	add	ptr__audio096_spin2_dat__, ##1184
20338     0C E4 85 F1 | 	sub	objptr, #12
2033c     97 BC 48 FB | 	callpa	#(@LR__2711-@LR__2710)>>2,fcache_load_ptr_
20340                 | LR__2710
20340                 | '   long[base+64*iii]:=0
20340     10 1F 02 F6 | 	mov	local01, local02
20344     11 FD 01 F6 | 	mov	result2, local03
20348     06 FC 65 F0 | 	shl	result2, #6
2034c     FE 1E 02 F1 | 	add	local01, result2
20350     0F 01 68 FC | 	wrlong	#0, local01
20354                 | '   long[base+64*iii+4]:=0
20354     10 1F 02 F6 | 	mov	local01, local02
20358     11 FD 01 F6 | 	mov	result2, local03
2035c     06 FC 65 F0 | 	shl	result2, #6
20360     FE 1E 02 F1 | 	add	local01, result2
20364     04 1E 06 F1 | 	add	local01, #4
20368     0F 01 68 FC | 	wrlong	#0, local01
2036c                 | '   long[base+64*iii+12]:=0
2036c     10 25 02 F6 | 	mov	local04, local02
20370     11 1F 02 F6 | 	mov	local01, local03
20374     06 1E 66 F0 | 	shl	local01, #6
20378     0F 25 02 F1 | 	add	local04, local01
2037c     0C 24 06 F1 | 	add	local04, #12
20380     12 01 68 FC | 	wrlong	#0, local04
20384                 | '   long[base+64*iii+16]:=2 
20384     10 25 02 F6 | 	mov	local04, local02
20388     11 1F 02 F6 | 	mov	local01, local03
2038c     06 1E 66 F0 | 	shl	local01, #6
20390     0F 25 02 F1 | 	add	local04, local01
20394     10 24 06 F1 | 	add	local04, #16
20398     12 05 68 FC | 	wrlong	#2, local04
2039c                 | '   word[base+64*iii+20]:=0
2039c     10 25 02 F6 | 	mov	local04, local02
203a0     11 1F 02 F6 | 	mov	local01, local03
203a4     06 1E 66 F0 | 	shl	local01, #6
203a8     0F 25 02 F1 | 	add	local04, local01
203ac     14 24 06 F1 | 	add	local04, #20
203b0     12 01 58 FC | 	wrword	#0, local04
203b4                 | '   word[base+64*iii+22]:=8192
203b4     10 25 02 F6 | 	mov	local04, local02
203b8     11 1F 02 F6 | 	mov	local01, local03
203bc     06 1E 66 F0 | 	shl	local01, #6
203c0     0F 25 02 F1 | 	add	local04, local01
203c4     16 24 06 F1 | 	add	local04, #22
203c8     10 00 80 FF 
203cc     12 01 58 FC | 	wrword	##8192, local04
203d0                 | '   word[base+64*iii+24]:=4000+2*iii
203d0     11 25 02 F6 | 	mov	local04, local03
203d4     01 24 66 F0 | 	shl	local04, #1
203d8     07 00 00 FF 
203dc     A0 1F 06 F6 | 	mov	local01, ##4000
203e0     12 1F 02 F1 | 	add	local01, local04
203e4     10 25 02 F6 | 	mov	local04, local02
203e8     11 FD 01 F6 | 	mov	result2, local03
203ec     06 FC 65 F0 | 	shl	result2, #6
203f0     FE 24 02 F1 | 	add	local04, result2
203f4     18 24 06 F1 | 	add	local04, #24
203f8     12 1F 52 FC | 	wrword	local01, local04
203fc                 | '   word[base+64*iii+26]:=2
203fc     10 25 02 F6 | 	mov	local04, local02
20400     11 1F 02 F6 | 	mov	local01, local03
20404     06 1E 66 F0 | 	shl	local01, #6
20408     0F 25 02 F1 | 	add	local04, local01
2040c     1A 24 06 F1 | 	add	local04, #26
20410     12 05 58 FC | 	wrword	#2, local04
20414                 | '   long [base+64*iii+8]:=@null | $C0000000
20414     F4 1E 02 F6 | 	mov	local01, ptr__audio096_spin2_dat__
20418     3E 1E 26 F4 | 	bith	local01, #62
2041c     10 25 02 F6 | 	mov	local04, local02
20420     11 17 02 F6 | 	mov	arg03, local03
20424     06 16 66 F0 | 	shl	arg03, #6
20428     0B 25 02 F1 | 	add	local04, arg03
2042c     08 24 06 F1 | 	add	local04, #8
20430     12 1F 62 FC | 	wrlong	local01, local04
20434                 | '   long[base+64*iii+32]:=0
20434     10 25 02 F6 | 	mov	local04, local02
20438     11 1F 02 F6 | 	mov	local01, local03
2043c     06 1E 66 F0 | 	shl	local01, #6
20440     0F 25 02 F1 | 	add	local04, local01
20444     20 24 06 F1 | 	add	local04, #32
20448     12 01 68 FC | 	wrlong	#0, local04
2044c                 | '   long[base+64*iii+36]:=0
2044c     10 25 02 F6 | 	mov	local04, local02
20450     11 1F 02 F6 | 	mov	local01, local03
20454     06 1E 66 F0 | 	shl	local01, #6
20458     0F 25 02 F1 | 	add	local04, local01
2045c     24 24 06 F1 | 	add	local04, #36
20460     12 01 68 FC | 	wrlong	#0, local04
20464                 | '   long[base+64*iii+40]:=0
20464     10 25 02 F6 | 	mov	local04, local02
20468     11 1F 02 F6 | 	mov	local01, local03
2046c     06 1E 66 F0 | 	shl	local01, #6
20470     0F 25 02 F1 | 	add	local04, local01
20474     28 24 06 F1 | 	add	local04, #40
20478     12 01 68 FC | 	wrlong	#0, local04
2047c                 | '   long[base+64*iii+44]:=0
2047c     10 25 02 F6 | 	mov	local04, local02
20480     11 1F 02 F6 | 	mov	local01, local03
20484     06 1E 66 F0 | 	shl	local01, #6
20488     0F 25 02 F1 | 	add	local04, local01
2048c     2C 24 06 F1 | 	add	local04, #44
20490     12 01 68 FC | 	wrlong	#0, local04
20494                 | '   long[base+64*iii+28]:=0
20494     10 25 02 F6 | 	mov	local04, local02
20498     11 1F 02 F6 | 	mov	local01, local03
2049c     06 1E 66 F0 | 	shl	local01, #6
204a0     0F 25 02 F1 | 	add	local04, local01
204a4     1C 24 06 F1 | 	add	local04, #28
204a8     12 01 68 FC | 	wrlong	#0, local04
204ac     01 22 06 F1 | 	add	local03, #1
204b0     08 22 56 F2 | 	cmps	local03, #8 wc
204b4     88 FE 9F CD |  if_b	jmp	#LR__2710
204b8                 | LR__2711
204b8     02 00 00 FF 
204bc     A0 E8 85 F1 | 	sub	ptr__audio096_spin2_dat__, ##1184
204c0                 | '   
204c0                 | ' cog:=coginit(16,@audio,@mailboxaddr)
204c0     F4 14 02 F6 | 	mov	arg02, ptr__audio096_spin2_dat__
204c4     F2 16 02 F6 | 	mov	arg03, objptr
204c8     10 24 06 F6 | 	mov	local04, #16
204cc     28 16 62 FD | 	setq	arg03
204d0     0A 25 F2 FC | 	coginit	local04, arg02 wc
204d4     01 24 66 C6 |  if_b	neg	local04, #1
204d8                 | ' waitms(100)
204d8     64 12 06 F6 | 	mov	arg01, #100
204dc     78 07 B0 FD | 	call	#__system___waitms
204e0                 | ' return cog,base
204e0     10 FD 01 F6 | 	mov	result2, local02
204e4     12 FB 01 F6 | 	mov	result1, local04
204e8     A7 F0 03 F6 | 	mov	ptra, fp
204ec     B2 00 A0 FD | 	call	#popregs_
204f0                 | _audio096_spin2_start_ret
204f0     2D 00 64 FD | 	ret
204f4                 | 
204f4                 | ' 
204f4                 | ' ' a simple play procedure to not poke everything. 
204f4                 | ' 
204f4                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
204f4                 | _audio096_spin2_play
204f4     0C E4 05 F1 | 	add	objptr, #12
204f8     F2 00 02 F6 | 	mov	_var01, objptr
204fc     06 12 66 F0 | 	shl	arg01, #6
20500     09 01 02 F1 | 	add	_var01, arg01
20504     00 13 02 F6 | 	mov	arg01, _var01
20508     0C 12 06 F1 | 	add	arg01, #12
2050c     09 1B 62 FC | 	wrlong	arg05, arg01
20510     00 1C 56 F2 | 	cmps	arg06, #0 wc
20514     00 13 02 36 |  if_ae	mov	arg01, _var01
20518     10 12 06 31 |  if_ae	add	arg01, #16
2051c     09 1D 62 3C |  if_ae	wrlong	arg06, arg01
20520     02 1A 06 C1 |  if_b	add	arg05, #2
20524     00 13 02 C6 |  if_b	mov	arg01, _var01
20528     10 12 06 C1 |  if_b	add	arg01, #16
2052c     09 1B 62 CC |  if_b	wrlong	arg05, arg01
20530     0B 13 52 F6 | 	abs	arg01, arg03 wc
20534     0F 1B 80 FF 
20538     09 1F 1A FD | 	qdiv	##3546895, arg01
2053c                 | ' 
2053c                 | ' base2:=@channel1[0]+64*channel
2053c                 | ' 
2053c                 | ' 
2053c                 | ' long[base2+12]:= len
2053c                 | ' if loop >=0 
2053c                 | '   long[base2+16]:= loop
2053c     0C E4 85 F1 | 	sub	objptr, #12
20540                 | ' else
20540                 | '   long[base2+16]:= len+2
20540                 | ' word[base2+20]:=vol
20540     00 13 02 F6 | 	mov	arg01, _var01
20544     14 12 06 F1 | 	add	arg01, #20
20548     09 19 52 FC | 	wrword	arg04, arg01
2054c                 | ' word[base2+24]:= 3546895/splfreq 
2054c     00 19 02 F6 | 	mov	arg04, _var01
20550     18 18 06 F1 | 	add	arg04, #24
20554                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
20554                 | ' long[base2+28]:=$40000000    
20554                 | ' long[base2+32]:=0    
20554                 | ' long[base2+36]:=0    
20554                 | ' long[base2+40]:=0    
20554                 | ' long[base2+44]:=0    
20554                 | ' long[base2+8]:=sample+$C0000000     
20554     00 00 60 FF 
20558     00 14 06 F1 | 	add	arg02, ##-1073741824
2055c     18 12 62 FD | 	getqx	arg01
20560     09 13 82 F6 | 	negc	arg01, arg01
20564     0C 13 52 FC | 	wrword	arg01, arg04
20568     00 13 02 F6 | 	mov	arg01, _var01
2056c     1A 12 06 F1 | 	add	arg01, #26
20570     09 01 5A FC | 	wrword	#256, arg01
20574     00 13 02 F6 | 	mov	arg01, _var01
20578     1C 12 06 F1 | 	add	arg01, #28
2057c     00 00 A0 FF 
20580     09 01 68 FC | 	wrlong	##1073741824, arg01
20584     00 13 02 F6 | 	mov	arg01, _var01
20588     20 12 06 F1 | 	add	arg01, #32
2058c     09 01 68 FC | 	wrlong	#0, arg01
20590     00 13 02 F6 | 	mov	arg01, _var01
20594     24 12 06 F1 | 	add	arg01, #36
20598     09 01 68 FC | 	wrlong	#0, arg01
2059c     00 13 02 F6 | 	mov	arg01, _var01
205a0     28 12 06 F1 | 	add	arg01, #40
205a4     09 01 68 FC | 	wrlong	#0, arg01
205a8     00 13 02 F6 | 	mov	arg01, _var01
205ac     2C 12 06 F1 | 	add	arg01, #44
205b0     09 01 68 FC | 	wrlong	#0, arg01
205b4     08 00 06 F1 | 	add	_var01, #8
205b8     00 15 62 FC | 	wrlong	arg02, _var01
205bc                 | _audio096_spin2_play_ret
205bc     2D 00 64 FD | 	ret
205c0                 | 
205c0                 | ' 
205c0                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
205c0                 | _audio096_spin2_play8
205c0                 | ' 
205c0                 | ' base2:=@channel1[0]+64*channel
205c0     0C E4 05 F1 | 	add	objptr, #12
205c4     F2 00 02 F6 | 	mov	_var01, objptr
205c8     06 12 66 F0 | 	shl	arg01, #6
205cc     09 01 02 F1 | 	add	_var01, arg01
205d0                 | ' long[base2]:=0
205d0     00 01 68 FC | 	wrlong	#0, _var01
205d4                 | ' long[base2+8]:=sample+$40000000 
205d4     00 00 20 FF 
205d8     00 14 06 F1 | 	add	arg02, ##1073741824
205dc     00 13 02 F6 | 	mov	arg01, _var01
205e0     08 12 06 F1 | 	add	arg01, #8
205e4     09 15 62 FC | 	wrlong	arg02, arg01
205e8                 | ' if loop>=0
205e8     00 1C 56 F2 | 	cmps	arg06, #0 wc
205ec     0C E4 85 F1 | 	sub	objptr, #12
205f0     1C 00 90 CD |  if_b	jmp	#LR__2720
205f4                 | '   long[base2+12]:=loop
205f4     00 15 02 F6 | 	mov	arg02, _var01
205f8     0C 14 06 F1 | 	add	arg02, #12
205fc     0A 1D 62 FC | 	wrlong	arg06, arg02
20600                 | '   long[base2+16]:= len
20600     00 1D 02 F6 | 	mov	arg06, _var01
20604     10 1C 06 F1 | 	add	arg06, #16
20608     0E 1B 62 FC | 	wrlong	arg05, arg06
2060c     1C 00 90 FD | 	jmp	#LR__2721
20610                 | LR__2720
20610                 | ' else
20610                 | '   long[base2+12]:= len
20610     00 1D 02 F6 | 	mov	arg06, _var01
20614     0C 1C 06 F1 | 	add	arg06, #12
20618     0E 1B 62 FC | 	wrlong	arg05, arg06
2061c                 | '   long[base2+16]:= len+1
2061c     01 1A 06 F1 | 	add	arg05, #1
20620     00 13 02 F6 | 	mov	arg01, _var01
20624     10 12 06 F1 | 	add	arg01, #16
20628     09 1B 62 FC | 	wrlong	arg05, arg01
2062c                 | LR__2721
2062c     0B 17 52 F6 | 	abs	arg03, arg03 wc
20630     0F 1B 80 FF 
20634     0B 1F 1A FD | 	qdiv	##3546895, arg03
20638                 | ' word[base2+20]:=vol
20638     00 17 02 F6 | 	mov	arg03, _var01
2063c     14 16 06 F1 | 	add	arg03, #20
20640     0B 19 52 FC | 	wrword	arg04, arg03
20644                 | ' word[base2+24]:= 3546895 /splfreq 
20644     00 13 02 F6 | 	mov	arg01, _var01
20648     18 12 06 F1 | 	add	arg01, #24
2064c                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
2064c     1A 00 06 F1 | 	add	_var01, #26
20650     18 18 62 FD | 	getqx	arg04
20654     0C 19 82 F6 | 	negc	arg04, arg04
20658     09 19 52 FC | 	wrword	arg04, arg01
2065c     00 01 5A FC | 	wrword	#256, _var01
20660                 | _audio096_spin2_play8_ret
20660     2D 00 64 FD | 	ret
20664                 | 
20664                 | ' 'long[base2+28]:=$40000000
20664                 | ' 
20664                 | '     
20664                 | ' pub stop(channel) 'silence it
20664                 | _audio096_spin2_stop
20664                 | ' 
20664                 | ' word[@channel1[0]+64*channel+20]:=0
20664     0C E4 05 F1 | 	add	objptr, #12
20668     F2 00 02 F6 | 	mov	_var01, objptr
2066c     09 03 02 F6 | 	mov	_var02, arg01
20670     06 02 66 F0 | 	shl	_var02, #6
20674     01 01 02 F1 | 	add	_var01, _var02
20678     14 00 06 F1 | 	add	_var01, #20
2067c     00 01 58 FC | 	wrword	#0, _var01
20680                 | ' word[@channel1[0]+64*channel+20]:=0
20680     F2 00 02 F6 | 	mov	_var01, objptr
20684     06 12 66 F0 | 	shl	arg01, #6
20688     09 01 02 F1 | 	add	_var01, arg01
2068c     14 00 06 F1 | 	add	_var01, #20
20690     00 01 58 FC | 	wrword	#0, _var01
20694     0C E4 85 F1 | 	sub	objptr, #12
20698                 | _audio096_spin2_stop_ret
20698     2D 00 64 FD | 	ret
2069c                 | hubexit
2069c     81 00 80 FD | 	jmp	#cogexit
206a0                 | 
206a0                 | __system___setbaud
206a0     14 7C 06 FB | 	rdlong	muldiva_, #20
206a4     09 7F 02 F6 | 	mov	muldivb_, arg01
206a8     BA 00 A0 FD | 	call	#divide_
206ac     97 06 48 FB | 	callpa	#(@LR__2731-@LR__2730)>>2,fcache_load_ptr_
206b0                 | LR__2730
206b0     3E FA 9D FA | 	rdpin	result1, #62 wc
206b4     FE FC A1 F1 | 	subx	result2, result2
206b8     F4 FF 9F CD |  if_b	jmp	#LR__2730
206bc                 | LR__2731
206bc     40 7C 64 FD | 	dirl	#62
206c0     40 7E 64 FD | 	dirl	#63
206c4     F3 7E 62 FC | 	wrlong	muldivb_, ptr___system__dat__
206c8     10 7E 66 F0 | 	shl	muldivb_, #16
206cc     07 14 06 F6 | 	mov	arg02, #7
206d0     3F 15 02 F1 | 	add	arg02, muldivb_
206d4     3E F8 0C FC | 	wrpin	#124, #62
206d8     3E 14 16 FC | 	wxpin	arg02, #62
206dc     3F 7C 0C FC | 	wrpin	#62, #63
206e0     14 14 06 F1 | 	add	arg02, #20
206e4     3F 14 16 FC | 	wxpin	arg02, #63
206e8     41 7C 64 FD | 	dirh	#62
206ec     41 7E 64 FD | 	dirh	#63
206f0                 | __system___setbaud_ret
206f0     2D 00 64 FD | 	ret
206f4                 | 
206f4                 | __system___txraw
206f4     01 4A 05 F6 | 	mov	COUNT_, #1
206f8     A8 00 A0 FD | 	call	#pushregs_
206fc     09 1F 02 F6 | 	mov	local01, arg01
20700     97 06 48 FB | 	callpa	#(@LR__2741-@LR__2740)>>2,fcache_load_ptr_
20704                 | LR__2740
20704     3E FA 9D FA | 	rdpin	result1, #62 wc
20708     FE FC A1 F1 | 	subx	result2, result2
2070c     F4 FF 9F CD |  if_b	jmp	#LR__2740
20710                 | LR__2741
20710     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
20714     C2 01 00 AF 
20718     00 12 06 A6 |  if_e	mov	arg01, ##230400
2071c     80 FF BF AD |  if_e	call	#__system___setbaud
20720     58 7C 64 FD | 	drvl	#62
20724     3E 1E 26 FC | 	wypin	local01, #62
20728     01 FA 05 F6 | 	mov	result1, #1
2072c     A7 F0 03 F6 | 	mov	ptra, fp
20730     B2 00 A0 FD | 	call	#popregs_
20734                 | __system___txraw_ret
20734     2D 00 64 FD | 	ret
20738                 | 
20738                 | __system___rxraw
20738     0D 4A 05 F6 | 	mov	COUNT_, #13
2073c     A8 00 A0 FD | 	call	#pushregs_
20740     09 1F 02 F6 | 	mov	local01, arg01
20744     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
20748     C2 01 00 AF 
2074c     00 12 06 A6 |  if_e	mov	arg01, ##230400
20750     4C FF BF AD |  if_e	call	#__system___setbaud
20754     00 1E 0E F2 | 	cmp	local01, #0 wz
20758     20 00 90 AD |  if_e	jmp	#LR__2750
2075c     14 22 06 FB | 	rdlong	local03, #20
20760     0A 22 46 F0 | 	shr	local03, #10
20764     11 1F 02 FD | 	qmul	local01, local03
20768     1A FA 61 FD | 	getct	result1
2076c     18 24 62 FD | 	getqx	local04
20770     12 FB 01 F1 | 	add	result1, local04
20774     FD 26 02 F6 | 	mov	local05, result1
20778     04 00 90 FD | 	jmp	#LR__2751
2077c                 | LR__2750
2077c     00 26 06 F6 | 	mov	local05, #0
20780                 | LR__2751
20780     01 28 66 F6 | 	neg	local06, #1
20784     3F 2A 06 F6 | 	mov	local07, #63
20788     00 2C 06 F6 | 	mov	local08, #0
2078c     04 E6 05 F1 | 	add	ptr___system__dat__, #4
20790     F3 2E 02 FB | 	rdlong	local09, ptr___system__dat__
20794     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
20798                 | LR__2752
20798     08 2E 16 F4 | 	testb	local09, #8 wc
2079c     09 2E 76 F4 | 	testbn	local09, #9 andc
207a0     0A 2E 46 F0 | 	shr	local09, #10
207a4     01 2C 06 C6 |  if_b	mov	local08, #1
207a8     40 7E 6C 3D |  if_ae	testp	#63 wz
207ac     01 2C 06 26 |  if_nc_and_z	mov	local08, #1
207b0     3F 2E 8E 2A |  if_nc_and_z	rdpin	local09, #63
207b4     04 2E 46 20 |  if_nc_and_z	shr	local09, #4
207b8                 | LR__2753
207b8     00 20 06 F6 | 	mov	local02, #0
207bc     00 2C 0E F2 | 	cmp	local08, #0 wz
207c0     01 20 66 56 |  if_ne	neg	local02, #1
207c4     00 30 06 F6 | 	mov	local10, #0
207c8     00 22 06 F6 | 	mov	local03, #0
207cc     00 1E 0E F2 | 	cmp	local01, #0 wz
207d0     01 22 66 56 |  if_ne	neg	local03, #1
207d4     00 24 06 F6 | 	mov	local04, #0
207d8     00 32 06 F6 | 	mov	local11, #0
207dc     13 35 02 F6 | 	mov	local12, local05
207e0     1A FA 61 FD | 	getct	result1
207e4     FD 36 02 F6 | 	mov	local13, result1
207e8     1B 35 82 F1 | 	sub	local12, local13
207ec     00 34 56 F2 | 	cmps	local12, #0 wc
207f0     00 32 26 C6 |  if_b	not	local11, #0
207f4     00 32 0E F2 | 	cmp	local11, #0 wz
207f8     00 24 26 56 |  if_ne	not	local04, #0
207fc     12 23 CA F7 | 	test	local03, local04 wz
20800     00 30 26 56 |  if_ne	not	local10, #0
20804     18 21 4A F5 | 	or	local02, local10 wz
20808     8C FF 9F AD |  if_e	jmp	#LR__2752
2080c     00 2C 0E F2 | 	cmp	local08, #0 wz
20810     17 29 02 56 |  if_ne	mov	local06, local09
20814     14 29 E2 58 |  if_ne	getbyte	local06, local06, #0
20818     04 E6 05 F1 | 	add	ptr___system__dat__, #4
2081c     F3 2E 62 FC | 	wrlong	local09, ptr___system__dat__
20820     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
20824     14 FB 01 F6 | 	mov	result1, local06
20828     A7 F0 03 F6 | 	mov	ptra, fp
2082c     B2 00 A0 FD | 	call	#popregs_
20830                 | __system___rxraw_ret
20830     2D 00 64 FD | 	ret
20834                 | 
20834                 | __system___getus
20834     1A FC 71 FD | 	getct	result2 wc
20838     1A 00 62 FD | 	getct	_var01
2083c     10 E6 05 F1 | 	add	ptr___system__dat__, #16
20840     F3 02 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
20844     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
20848     20 00 90 5D |  if_ne	jmp	#LR__2760
2084c     14 02 06 FB | 	rdlong	_var02, #20
20850     A1 07 00 FF 
20854     40 02 16 FD | 	qdiv	_var02, ##1000000
20858     10 E6 05 F1 | 	add	ptr___system__dat__, #16
2085c     18 FA 61 FD | 	getqx	result1
20860     FD 02 02 F6 | 	mov	_var02, result1
20864     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
20868     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
2086c                 | LR__2760
2086c     01 FD 11 FD | 	qdiv	result2, _var02
20870     19 FC 61 FD | 	getqy	result2
20874     28 FC 61 FD | 	setq	result2
20878     01 01 12 FD | 	qdiv	_var01, _var02
2087c     18 FA 61 FD | 	getqx	result1
20880                 | __system___getus_ret
20880     2D 00 64 FD | 	ret
20884                 | 
20884                 | __system____builtin_memmove
20884     09 01 02 F6 | 	mov	_var01, arg01
20888     0A 13 52 F2 | 	cmps	arg01, arg02 wc
2088c     10 00 90 CD |  if_b	jmp	#LR__2770
20890     0A 03 02 F6 | 	mov	_var02, arg02
20894     0B 03 02 F1 | 	add	_var02, arg03
20898     01 13 52 F2 | 	cmps	arg01, _var02 wc
2089c     48 00 90 CD |  if_b	jmp	#LR__2776
208a0                 | LR__2770
208a0     0B 05 02 F6 | 	mov	_var03, arg03
208a4     02 04 4E F0 | 	shr	_var03, #2 wz
208a8     18 00 90 AD |  if_e	jmp	#LR__2775
208ac     97 0A 48 FB | 	callpa	#(@LR__2773-@LR__2771)>>2,fcache_load_ptr_
208b0                 | LR__2771
208b0     02 09 D8 FC | 	rep	@LR__2774, _var03
208b4                 | LR__2772
208b4     0A 05 02 FB | 	rdlong	_var03, arg02
208b8     09 05 62 FC | 	wrlong	_var03, arg01
208bc     04 12 06 F1 | 	add	arg01, #4
208c0     04 14 06 F1 | 	add	arg02, #4
208c4                 | LR__2773
208c4                 | LR__2774
208c4                 | LR__2775
208c4     02 16 CE F7 | 	test	arg03, #2 wz
208c8     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
208cc     09 03 52 5C |  if_ne	wrword	_var02, arg01
208d0     02 12 06 51 |  if_ne	add	arg01, #2
208d4     02 14 06 51 |  if_ne	add	arg02, #2
208d8     01 16 CE F7 | 	test	arg03, #1 wz
208dc     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
208e0     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
208e4     28 00 90 FD | 	jmp	#LR__2782
208e8                 | LR__2776
208e8     0B 13 02 F1 | 	add	arg01, arg03
208ec     0B 15 02 F1 | 	add	arg02, arg03
208f0     0B 07 0A F6 | 	mov	_var04, arg03 wz
208f4     18 00 90 AD |  if_e	jmp	#LR__2781
208f8     97 0A 48 FB | 	callpa	#(@LR__2779-@LR__2777)>>2,fcache_load_ptr_
208fc                 | LR__2777
208fc     03 09 D8 FC | 	rep	@LR__2780, _var04
20900                 | LR__2778
20900     01 12 86 F1 | 	sub	arg01, #1
20904     01 14 86 F1 | 	sub	arg02, #1
20908     0A 03 C2 FA | 	rdbyte	_var02, arg02
2090c     09 03 42 FC | 	wrbyte	_var02, arg01
20910                 | LR__2779
20910                 | LR__2780
20910                 | LR__2781
20910                 | LR__2782
20910     00 FB 01 F6 | 	mov	result1, _var01
20914                 | __system____builtin_memmove_ret
20914     2D 00 64 FD | 	ret
20918                 | 
20918                 | __system____builtin_strcpy
20918     09 01 02 F6 | 	mov	_var01, arg01
2091c     97 0A 48 FB | 	callpa	#(@LR__2791-@LR__2790)>>2,fcache_load_ptr_
20920                 | LR__2790
20920     0A FB C9 FA | 	rdbyte	result1, arg02 wz
20924     09 FB 41 FC | 	wrbyte	result1, arg01
20928     01 14 06 F1 | 	add	arg02, #1
2092c     01 12 06 F1 | 	add	arg01, #1
20930     EC FF 9F 5D |  if_ne	jmp	#LR__2790
20934                 | LR__2791
20934     00 FB 01 F6 | 	mov	result1, _var01
20938                 | __system____builtin_strcpy_ret
20938     2D 00 64 FD | 	ret
2093c                 | 
2093c                 | __system____topofstack
2093c     00 4A 05 F6 | 	mov	COUNT_, #0
20940     A8 00 A0 FD | 	call	#pushregs_
20944     08 F0 07 F1 | 	add	ptra, #8
20948     04 4E 05 F1 | 	add	fp, #4
2094c     A7 12 62 FC | 	wrlong	arg01, fp
20950     A7 FA 01 F6 | 	mov	result1, fp
20954     04 4E 85 F1 | 	sub	fp, #4
20958     A7 F0 03 F6 | 	mov	ptra, fp
2095c     B2 00 A0 FD | 	call	#popregs_
20960                 | __system____topofstack_ret
20960     2D 00 64 FD | 	ret
20964                 | 
20964                 | __system___lockmem
20964     00 FA 05 F6 | 	mov	result1, #0
20968     01 FA 61 FD | 	cogid	result1
2096c     00 FB 05 F1 | 	add	result1, #256
20970                 | LR__2800
20970     09 01 0A FB | 	rdlong	_var01, arg01 wz
20974     09 FB 61 AC |  if_e	wrlong	result1, arg01
20978     09 01 02 AB |  if_e	rdlong	_var01, arg01
2097c     09 01 02 AB |  if_e	rdlong	_var01, arg01
20980     FD 00 0A F2 | 	cmp	_var01, result1 wz
20984     E8 FF 9F 5D |  if_ne	jmp	#LR__2800
20988                 | __system___lockmem_ret
20988     2D 00 64 FD | 	ret
2098c                 | 
2098c                 | __system___string_cmp
2098c     97 14 48 FB | 	callpa	#(@LR__2811-@LR__2810)>>2,fcache_load_ptr_
20990                 | LR__2810
20990     09 01 C2 FA | 	rdbyte	_var01, arg01
20994     0A 03 C2 FA | 	rdbyte	_var02, arg02
20998     00 05 02 F6 | 	mov	_var03, _var01
2099c     01 05 8A F1 | 	sub	_var03, _var02 wz
209a0     01 12 06 F1 | 	add	arg01, #1
209a4     01 14 06 F1 | 	add	arg02, #1
209a8     0C 00 90 5D |  if_ne	jmp	#LR__2812
209ac     00 00 0E F2 | 	cmp	_var01, #0 wz
209b0     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
209b4     D8 FF 9F 5D |  if_ne	jmp	#LR__2810
209b8                 | LR__2811
209b8                 | LR__2812
209b8     02 FB 01 F6 | 	mov	result1, _var03
209bc                 | __system___string_cmp_ret
209bc     2D 00 64 FD | 	ret
209c0                 | 
209c0                 | __system___string_concat
209c0     05 4A 05 F6 | 	mov	COUNT_, #5
209c4     A8 00 A0 FD | 	call	#pushregs_
209c8     09 1F 02 F6 | 	mov	local01, arg01
209cc     0A 21 02 F6 | 	mov	local02, arg02
209d0     0F 13 02 F6 | 	mov	arg01, local01
209d4     09 23 02 F6 | 	mov	local03, arg01
209d8     97 06 48 FB | 	callpa	#(@LR__2821-@LR__2820)>>2,fcache_load_ptr_
209dc                 | LR__2820
209dc     11 FB C9 FA | 	rdbyte	result1, local03 wz
209e0     01 22 06 51 |  if_ne	add	local03, #1
209e4     F4 FF 9F 5D |  if_ne	jmp	#LR__2820
209e8                 | LR__2821
209e8     09 23 82 F1 | 	sub	local03, arg01
209ec     11 25 02 F6 | 	mov	local04, local03
209f0     10 13 02 F6 | 	mov	arg01, local02
209f4     09 23 02 F6 | 	mov	local03, arg01
209f8     97 06 48 FB | 	callpa	#(@LR__2823-@LR__2822)>>2,fcache_load_ptr_
209fc                 | LR__2822
209fc     11 FB C9 FA | 	rdbyte	result1, local03 wz
20a00     01 22 06 51 |  if_ne	add	local03, #1
20a04     F4 FF 9F 5D |  if_ne	jmp	#LR__2822
20a08                 | LR__2823
20a08     09 23 82 F1 | 	sub	local03, arg01
20a0c     12 13 02 F6 | 	mov	arg01, local04
20a10     11 13 02 F1 | 	add	arg01, local03
20a14     01 12 06 F1 | 	add	arg01, #1
20a18     24 3E B0 FD | 	call	#__system___gc_alloc_managed
20a1c     FD 26 0A F6 | 	mov	local05, result1 wz
20a20     28 00 90 AD |  if_e	jmp	#LR__2824
20a24     13 13 02 F6 | 	mov	arg01, local05
20a28     0F 15 02 F6 | 	mov	arg02, local01
20a2c     12 17 02 F6 | 	mov	arg03, local04
20a30     50 FE BF FD | 	call	#__system____builtin_memmove
20a34     13 13 02 F6 | 	mov	arg01, local05
20a38     12 13 02 F1 | 	add	arg01, local04
20a3c     01 22 06 F1 | 	add	local03, #1
20a40     10 15 02 F6 | 	mov	arg02, local02
20a44     11 17 02 F6 | 	mov	arg03, local03
20a48     38 FE BF FD | 	call	#__system____builtin_memmove
20a4c                 | LR__2824
20a4c     13 FB 01 F6 | 	mov	result1, local05
20a50     A7 F0 03 F6 | 	mov	ptra, fp
20a54     B2 00 A0 FD | 	call	#popregs_
20a58                 | __system___string_concat_ret
20a58     2D 00 64 FD | 	ret
20a5c                 | 
20a5c                 | __system___tx
20a5c     02 4A 05 F6 | 	mov	COUNT_, #2
20a60     A8 00 A0 FD | 	call	#pushregs_
20a64     09 1F 02 F6 | 	mov	local01, arg01
20a68     0A 1E 0E F2 | 	cmp	local01, #10 wz
20a6c     18 00 90 5D |  if_ne	jmp	#LR__2830
20a70     08 E6 05 F1 | 	add	ptr___system__dat__, #8
20a74     F3 20 02 FB | 	rdlong	local02, ptr___system__dat__
20a78     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
20a7c     02 20 CE F7 | 	test	local02, #2 wz
20a80     0D 12 06 56 |  if_ne	mov	arg01, #13
20a84     6C FC BF 5D |  if_ne	call	#__system___txraw
20a88                 | LR__2830
20a88     0F 13 02 F6 | 	mov	arg01, local01
20a8c     64 FC BF FD | 	call	#__system___txraw
20a90     A7 F0 03 F6 | 	mov	ptra, fp
20a94     B2 00 A0 FD | 	call	#popregs_
20a98                 | __system___tx_ret
20a98     2D 00 64 FD | 	ret
20a9c                 | 
20a9c                 | __system___rx
20a9c     01 4A 05 F6 | 	mov	COUNT_, #1
20aa0     A8 00 A0 FD | 	call	#pushregs_
20aa4                 | LR__2840
20aa4     00 12 06 F6 | 	mov	arg01, #0
20aa8     8C FC BF FD | 	call	#__system___rxraw
20aac     FD 1E 02 F6 | 	mov	local01, result1
20ab0     FF FF 7F FF 
20ab4     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
20ab8     E8 FF 9F AD |  if_e	jmp	#LR__2840
20abc     0D 1E 0E F2 | 	cmp	local01, #13 wz
20ac0     14 00 90 5D |  if_ne	jmp	#LR__2841
20ac4     08 E6 05 F1 | 	add	ptr___system__dat__, #8
20ac8     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
20acc     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
20ad0     02 FA CD F7 | 	test	result1, #2 wz
20ad4     0A 1E 06 56 |  if_ne	mov	local01, #10
20ad8                 | LR__2841
20ad8     08 E6 05 F1 | 	add	ptr___system__dat__, #8
20adc     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
20ae0     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
20ae4     01 12 CE F7 | 	test	arg01, #1 wz
20ae8     1C 00 90 AD |  if_e	jmp	#LR__2844
20aec     7F 1E 0E F2 | 	cmp	local01, #127 wz
20af0     0C 00 90 5D |  if_ne	jmp	#LR__2842
20af4     08 12 06 F6 | 	mov	arg01, #8
20af8     60 FF BF FD | 	call	#__system___tx
20afc     08 00 90 FD | 	jmp	#LR__2843
20b00                 | LR__2842
20b00     0F 13 02 F6 | 	mov	arg01, local01
20b04     54 FF BF FD | 	call	#__system___tx
20b08                 | LR__2843
20b08                 | LR__2844
20b08     0F FB 01 F6 | 	mov	result1, local01
20b0c     A7 F0 03 F6 | 	mov	ptra, fp
20b10     B2 00 A0 FD | 	call	#popregs_
20b14                 | __system___rx_ret
20b14     2D 00 64 FD | 	ret
20b18                 | 
20b18                 | __system___pinwrite
20b18     09 01 02 F6 | 	mov	_var01, arg01
20b1c     1F 00 06 F5 | 	and	_var01, #31
20b20     20 12 CE F7 | 	test	arg01, #32 wz
20b24     06 12 46 F0 | 	shr	arg01, #6
20b28     09 13 CA F9 | 	bmask	arg01, arg01
20b2c     00 13 62 F0 | 	shl	arg01, _var01
20b30     00 15 62 F0 | 	shl	arg02, _var01
20b34     1C 00 90 AD |  if_e	jmp	#LR__2850
20b38     09 F7 43 F5 | 	or	dirb, arg01
20b3c     FD 01 02 F6 | 	mov	_var01, outb
20b40     09 01 22 F5 | 	andn	_var01, arg01
20b44     09 15 02 F5 | 	and	arg02, arg01
20b48     0A 01 42 F5 | 	or	_var01, arg02
20b4c     00 FB 03 F6 | 	mov	outb, _var01
20b50     18 00 90 FD | 	jmp	#LR__2851
20b54                 | LR__2850
20b54     09 F5 43 F5 | 	or	dira, arg01
20b58     FC 01 02 F6 | 	mov	_var01, outa
20b5c     09 01 22 F5 | 	andn	_var01, arg01
20b60     09 15 02 F5 | 	and	arg02, arg01
20b64     0A 01 42 F5 | 	or	_var01, arg02
20b68     00 F9 03 F6 | 	mov	outa, _var01
20b6c                 | LR__2851
20b6c                 | __system___pinwrite_ret
20b6c     2D 00 64 FD | 	ret
20b70                 | 
20b70                 | __system___basic_read_line
20b70     06 4A 05 F6 | 	mov	COUNT_, #6
20b74     A8 00 A0 FD | 	call	#pushregs_
20b78     09 1F 02 F6 | 	mov	local01, arg01
20b7c     00 20 06 F6 | 	mov	local02, #0
20b80     18 22 06 F6 | 	mov	local03, #24
20b84     00 24 06 F6 | 	mov	local04, #0
20b88     18 12 06 F6 | 	mov	arg01, #24
20b8c     B0 3C B0 FD | 	call	#__system___gc_alloc_managed
20b90     FD 26 0A F6 | 	mov	local05, result1 wz
20b94     13 FB 01 A6 |  if_e	mov	result1, local05
20b98     B0 00 90 AD |  if_e	jmp	#LR__2863
20b9c                 | LR__2860
20b9c     0F 13 02 F6 | 	mov	arg01, local01
20ba0     78 0B B0 FD | 	call	#__system___basic_get_char
20ba4     FD 28 02 F6 | 	mov	local06, result1
20ba8     01 28 56 F2 | 	cmps	local06, #1 wc
20bac     8C 00 90 CD |  if_b	jmp	#LR__2862
20bb0     0A 28 0E F2 | 	cmp	local06, #10 wz
20bb4     10 00 90 5D |  if_ne	jmp	#LR__2861
20bb8     00 24 0E F2 | 	cmp	local04, #0 wz
20bbc     01 20 56 52 |  if_ne	cmps	local02, #1 wc
20bc0     01 20 86 11 |  if_a	sub	local02, #1
20bc4     74 00 90 FD | 	jmp	#LR__2862
20bc8                 | LR__2861
20bc8     0D 28 0E F2 | 	cmp	local06, #13 wz
20bcc     01 24 06 A6 |  if_e	mov	local04, #1
20bd0     00 24 06 56 |  if_ne	mov	local04, #0
20bd4     08 28 0E F2 | 	cmp	local06, #8 wz
20bd8     7F 28 0E 52 |  if_ne	cmp	local06, #127 wz
20bdc     01 20 56 A2 |  if_e	cmps	local02, #1 wc
20be0     01 20 86 21 |  if_nc_and_z	sub	local02, #1
20be4     B4 FF 9F AD |  if_e	jmp	#LR__2860
20be8     13 17 02 F6 | 	mov	arg03, local05
20bec     10 17 02 F1 | 	add	arg03, local02
20bf0     0B 29 42 FC | 	wrbyte	local06, arg03
20bf4     01 20 06 F1 | 	add	local02, #1
20bf8     11 21 0A F2 | 	cmp	local02, local03 wz
20bfc     9C FF 9F 5D |  if_ne	jmp	#LR__2860
20c00     11 13 02 F6 | 	mov	arg01, local03
20c04     20 12 06 F1 | 	add	arg01, #32
20c08     34 3C B0 FD | 	call	#__system___gc_alloc_managed
20c0c     FD 28 0A F6 | 	mov	local06, result1 wz
20c10     14 FB 01 A6 |  if_e	mov	result1, local06
20c14     34 00 90 AD |  if_e	jmp	#LR__2863
20c18     14 13 02 F6 | 	mov	arg01, local06
20c1c     13 15 02 F6 | 	mov	arg02, local05
20c20     11 17 02 F6 | 	mov	arg03, local03
20c24     5C FC BF FD | 	call	#__system____builtin_memmove
20c28     20 22 06 F1 | 	add	local03, #32
20c2c     13 13 02 F6 | 	mov	arg01, local05
20c30     48 3D B0 FD | 	call	#__system___gc_free
20c34     14 27 02 F6 | 	mov	local05, local06
20c38     60 FF 9F FD | 	jmp	#LR__2860
20c3c                 | LR__2862
20c3c     13 29 02 F6 | 	mov	local06, local05
20c40     10 29 02 F1 | 	add	local06, local02
20c44     14 01 48 FC | 	wrbyte	#0, local06
20c48     13 FB 01 F6 | 	mov	result1, local05
20c4c                 | LR__2863
20c4c     A7 F0 03 F6 | 	mov	ptra, fp
20c50     B2 00 A0 FD | 	call	#popregs_
20c54                 | __system___basic_read_line_ret
20c54     2D 00 64 FD | 	ret
20c58                 | 
20c58                 | __system___waitms
20c58     09 01 02 F6 | 	mov	_var01, arg01
20c5c     1A 02 62 FD | 	getct	_var02
20c60     14 04 06 FB | 	rdlong	_var03, #20
20c64     97 14 48 FB | 	callpa	#(@LR__2871-@LR__2870)>>2,fcache_load_ptr_
20c68                 | LR__2870
20c68     01 00 00 FF 
20c6c     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
20c70     1C 00 90 CD |  if_b	jmp	#LR__2872
20c74     02 03 02 F1 | 	add	_var02, _var03
20c78     01 13 02 F6 | 	mov	arg01, _var02
20c7c     00 12 66 FA | 	addct1	arg01, #0
20c80     24 22 60 FD | 	waitct1
20c84     01 00 00 FF 
20c88     E8 01 86 F1 | 	sub	_var01, ##1000
20c8c     D8 FF 9F FD | 	jmp	#LR__2870
20c90                 | LR__2871
20c90                 | LR__2872
20c90     01 00 56 F2 | 	cmps	_var01, #1 wc
20c94     28 00 90 CD |  if_b	jmp	#LR__2873
20c98     02 01 02 FD | 	qmul	_var01, _var03
20c9c     01 00 00 FF 
20ca0     E8 17 06 F6 | 	mov	arg03, ##1000
20ca4     19 FA 61 FD | 	getqy	result1
20ca8     18 12 62 FD | 	getqx	arg01
20cac     28 FA 61 FD | 	setq	result1
20cb0     0B 13 12 FD | 	qdiv	arg01, arg03
20cb4     18 12 62 FD | 	getqx	arg01
20cb8     01 13 62 FA | 	addct1	arg01, _var02
20cbc     24 22 60 FD | 	waitct1
20cc0                 | LR__2873
20cc0                 | __system___waitms_ret
20cc0     2D 00 64 FD | 	ret
20cc4                 | 
20cc4                 | __system___waitus
20cc4     09 01 02 F6 | 	mov	_var01, arg01
20cc8     1A 02 62 FD | 	getct	_var02
20ccc     14 04 06 FB | 	rdlong	_var03, #20
20cd0     97 14 48 FB | 	callpa	#(@LR__2881-@LR__2880)>>2,fcache_load_ptr_
20cd4                 | LR__2880
20cd4     A1 07 00 FF 
20cd8     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
20cdc     1C 00 90 CD |  if_b	jmp	#LR__2882
20ce0     02 03 02 F1 | 	add	_var02, _var03
20ce4     01 13 02 F6 | 	mov	arg01, _var02
20ce8     00 12 66 FA | 	addct1	arg01, #0
20cec     24 22 60 FD | 	waitct1
20cf0     A1 07 00 FF 
20cf4     40 00 86 F1 | 	sub	_var01, ##1000000
20cf8     D8 FF 9F FD | 	jmp	#LR__2880
20cfc                 | LR__2881
20cfc                 | LR__2882
20cfc     01 00 56 F2 | 	cmps	_var01, #1 wc
20d00     28 00 90 CD |  if_b	jmp	#LR__2883
20d04     02 01 02 FD | 	qmul	_var01, _var03
20d08     A1 07 00 FF 
20d0c     40 16 06 F6 | 	mov	arg03, ##1000000
20d10     19 FA 61 FD | 	getqy	result1
20d14     18 12 62 FD | 	getqx	arg01
20d18     28 FA 61 FD | 	setq	result1
20d1c     0B 13 12 FD | 	qdiv	arg01, arg03
20d20     18 FA 61 FD | 	getqx	result1
20d24     FD 02 62 FA | 	addct1	_var02, result1
20d28     24 22 60 FD | 	waitct1
20d2c                 | LR__2883
20d2c                 | __system___waitus_ret
20d2c     2D 00 64 FD | 	ret
20d30                 | 
20d30                 | __system___mount
20d30     0B 4A 05 F6 | 	mov	COUNT_, #11
20d34     A8 00 A0 FD | 	call	#pushregs_
20d38     09 1F 02 F6 | 	mov	local01, arg01
20d3c     0A 21 0A F6 | 	mov	local02, arg02 wz
20d40     01 22 66 F6 | 	neg	local03, #1
20d44     01 FA 65 A6 |  if_e	neg	result1, #1
20d48     98 02 90 AD |  if_e	jmp	#LR__2905
20d4c     0F FB C1 FA | 	rdbyte	result1, local01
20d50     2F FA 0D F2 | 	cmp	result1, #47 wz
20d54     28 00 90 5D |  if_ne	jmp	#LR__2892
20d58     0F 13 02 F6 | 	mov	arg01, local01
20d5c     09 25 02 F6 | 	mov	local04, arg01
20d60     97 06 48 FB | 	callpa	#(@LR__2891-@LR__2890)>>2,fcache_load_ptr_
20d64                 | LR__2890
20d64     12 FB C9 FA | 	rdbyte	result1, local04 wz
20d68     01 24 06 51 |  if_ne	add	local04, #1
20d6c     F4 FF 9F 5D |  if_ne	jmp	#LR__2890
20d70                 | LR__2891
20d70     09 25 82 F1 | 	sub	local04, arg01
20d74     12 FB 01 F6 | 	mov	result1, local04
20d78     10 FA 55 F2 | 	cmps	result1, #16 wc
20d7c     14 00 90 CD |  if_b	jmp	#LR__2893
20d80                 | LR__2892
20d80     20 E6 05 F1 | 	add	ptr___system__dat__, #32
20d84     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
20d88     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
20d8c     01 FA 65 F6 | 	neg	result1, #1
20d90     50 02 90 FD | 	jmp	#LR__2905
20d94                 | LR__2893
20d94     00 26 06 F6 | 	mov	local05, #0
20d98                 | LR__2894
20d98     04 26 56 F2 | 	cmps	local05, #4 wc
20d9c     B0 00 90 3D |  if_ae	jmp	#LR__2899
20da0     13 13 02 F6 | 	mov	arg01, local05
20da4     02 12 66 F0 | 	shl	arg01, #2
20da8     64 E6 05 F1 | 	add	ptr___system__dat__, #100
20dac     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
20db0     09 FB 09 FB | 	rdlong	result1, arg01 wz
20db4     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
20db8     00 22 56 A2 |  if_e	cmps	local03, #0 wc
20dbc     13 23 02 86 |  if_c_and_z	mov	local03, local05
20dc0     84 00 90 8D |  if_c_and_z	jmp	#LR__2898
20dc4     13 13 02 F6 | 	mov	arg01, local05
20dc8     02 12 66 F0 | 	shl	arg01, #2
20dcc     64 E6 05 F1 | 	add	ptr___system__dat__, #100
20dd0     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
20dd4     09 13 02 FB | 	rdlong	arg01, arg01
20dd8     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
20ddc     09 25 02 F6 | 	mov	local04, arg01
20de0     97 06 48 FB | 	callpa	#(@LR__2896-@LR__2895)>>2,fcache_load_ptr_
20de4                 | LR__2895
20de4     12 FB C9 FA | 	rdbyte	result1, local04 wz
20de8     01 24 06 51 |  if_ne	add	local04, #1
20dec     F4 FF 9F 5D |  if_ne	jmp	#LR__2895
20df0                 | LR__2896
20df0     09 25 82 F1 | 	sub	local04, arg01
20df4     12 29 02 F6 | 	mov	local06, local04
20df8     14 13 02 F6 | 	mov	arg01, local06
20dfc     0F 13 02 F1 | 	add	arg01, local01
20e00     09 FB C1 FA | 	rdbyte	result1, arg01
20e04     2F FA 0D F2 | 	cmp	result1, #47 wz
20e08     14 2B 02 56 |  if_ne	mov	local07, local06
20e0c     0F 2B 02 51 |  if_ne	add	local07, local01
20e10     15 13 CA 5A |  if_ne	rdbyte	arg01, local07 wz
20e14     30 00 90 5D |  if_ne	jmp	#LR__2897
20e18     13 17 02 F6 | 	mov	arg03, local05
20e1c     02 16 66 F0 | 	shl	arg03, #2
20e20     64 E6 05 F1 | 	add	ptr___system__dat__, #100
20e24     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
20e28     0B 15 02 FB | 	rdlong	arg02, arg03
20e2c     0F 13 02 F6 | 	mov	arg01, local01
20e30     14 17 02 F6 | 	mov	arg03, local06
20e34     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
20e38     84 4E B0 FD | 	call	#__system__strncmp
20e3c     00 FA 0D F2 | 	cmp	result1, #0 wz
20e40     13 23 02 A6 |  if_e	mov	local03, local05
20e44     08 00 90 AD |  if_e	jmp	#LR__2899
20e48                 | LR__2897
20e48                 | LR__2898
20e48     01 26 06 F1 | 	add	local05, #1
20e4c     48 FF 9F FD | 	jmp	#LR__2894
20e50                 | LR__2899
20e50     FF FF 7F FF 
20e54     FF 23 0E F2 | 	cmp	local03, ##-1 wz
20e58     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
20e5c     F3 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
20e60     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
20e64     01 FA 65 A6 |  if_e	neg	result1, #1
20e68     78 01 90 AD |  if_e	jmp	#LR__2905
20e6c     11 27 02 F6 | 	mov	local05, local03
20e70     13 2B 02 F6 | 	mov	local07, local05
20e74     02 2A 66 F0 | 	shl	local07, #2
20e78     74 E6 05 F1 | 	add	ptr___system__dat__, #116
20e7c     F3 2A 02 F1 | 	add	local07, ptr___system__dat__
20e80     15 29 0A FB | 	rdlong	local06, local07 wz
20e84     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
20e88     58 00 90 AD |  if_e	jmp	#LR__2900
20e8c     4C 28 06 F1 | 	add	local06, #76
20e90     14 2B 0A FB | 	rdlong	local07, local06 wz
20e94     4C 28 86 F1 | 	sub	local06, #76
20e98     48 00 90 AD |  if_e	jmp	#LR__2900
20e9c     4C 28 06 F1 | 	add	local06, #76
20ea0     14 2B 02 FB | 	rdlong	local07, local06
20ea4     15 23 02 F6 | 	mov	local03, local07
20ea8     13 2A 46 F7 | 	zerox	local07, #19
20eac     14 22 46 F0 | 	shr	local03, #20
20eb0     02 22 66 F0 | 	shl	local03, #2
20eb4     ED 22 02 F1 | 	add	local03, __methods__
20eb8     11 23 02 FB | 	rdlong	local03, local03
20ebc     13 29 02 F6 | 	mov	local06, local05
20ec0     02 28 66 F0 | 	shl	local06, #2
20ec4     64 E6 05 F1 | 	add	ptr___system__dat__, #100
20ec8     F3 28 02 F1 | 	add	local06, ptr___system__dat__
20ecc     14 13 02 FB | 	rdlong	arg01, local06
20ed0     F2 28 02 F6 | 	mov	local06, objptr
20ed4     15 E5 01 F6 | 	mov	objptr, local07
20ed8     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
20edc     2D 22 62 FD | 	call	local03
20ee0     14 E5 01 F6 | 	mov	objptr, local06
20ee4                 | LR__2900
20ee4     13 2D 02 F6 | 	mov	local08, local05
20ee8     02 2C 66 F0 | 	shl	local08, #2
20eec     74 E6 05 F1 | 	add	ptr___system__dat__, #116
20ef0     F3 2C 02 F1 | 	add	local08, ptr___system__dat__
20ef4     16 21 62 FC | 	wrlong	local02, local08
20ef8     00 20 0E F2 | 	cmp	local02, #0 wz
20efc     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
20f00     18 00 90 5D |  if_ne	jmp	#LR__2901
20f04     02 26 66 F0 | 	shl	local05, #2
20f08     64 E6 05 F1 | 	add	ptr___system__dat__, #100
20f0c     F3 26 02 F1 | 	add	local05, ptr___system__dat__
20f10     13 01 68 FC | 	wrlong	#0, local05
20f14     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
20f18     C4 00 90 FD | 	jmp	#LR__2904
20f1c                 | LR__2901
20f1c     13 2F 02 F6 | 	mov	local09, local05
20f20     04 2E 66 F0 | 	shl	local09, #4
20f24     24 E6 05 F1 | 	add	ptr___system__dat__, #36
20f28     F3 2E 02 F1 | 	add	local09, ptr___system__dat__
20f2c     17 13 02 F6 | 	mov	arg01, local09
20f30     0F 15 02 F6 | 	mov	arg02, local01
20f34     10 16 06 F6 | 	mov	arg03, #16
20f38     24 E6 85 F1 | 	sub	ptr___system__dat__, #36
20f3c     D4 4C B0 FD | 	call	#__system__strncpy
20f40     48 20 06 F1 | 	add	local02, #72
20f44     10 2D 0A FB | 	rdlong	local08, local02 wz
20f48     48 20 86 F1 | 	sub	local02, #72
20f4c     7C 00 90 AD |  if_e	jmp	#LR__2903
20f50     48 20 06 F1 | 	add	local02, #72
20f54     10 2D 02 FB | 	rdlong	local08, local02
20f58     16 31 02 F6 | 	mov	local10, local08
20f5c     13 2C 46 F7 | 	zerox	local08, #19
20f60     14 30 46 F0 | 	shr	local10, #20
20f64     02 30 66 F0 | 	shl	local10, #2
20f68     ED 30 02 F1 | 	add	local10, __methods__
20f6c     18 31 02 FB | 	rdlong	local10, local10
20f70     17 13 02 F6 | 	mov	arg01, local09
20f74     F2 32 02 F6 | 	mov	local11, objptr
20f78     16 E5 01 F6 | 	mov	objptr, local08
20f7c     2D 30 62 FD | 	call	local10
20f80     19 E5 01 F6 | 	mov	objptr, local11
20f84     FD 12 0A F6 | 	mov	arg01, result1 wz
20f88     40 00 90 AD |  if_e	jmp	#LR__2902
20f8c     13 2D 02 F6 | 	mov	local08, local05
20f90     02 2C 66 F0 | 	shl	local08, #2
20f94     74 E6 05 F1 | 	add	ptr___system__dat__, #116
20f98     F3 2C 02 F1 | 	add	local08, ptr___system__dat__
20f9c     16 01 68 FC | 	wrlong	#0, local08
20fa0     02 26 66 F0 | 	shl	local05, #2
20fa4     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
20fa8     F3 26 02 F1 | 	add	local05, ptr___system__dat__
20fac     13 01 68 FC | 	wrlong	#0, local05
20fb0     09 13 6A F6 | 	neg	arg01, arg01 wz
20fb4     44 E6 85 F1 | 	sub	ptr___system__dat__, #68
20fb8     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
20fbc     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
20fc0     01 FA 65 56 |  if_ne	neg	result1, #1
20fc4     00 FA 05 A6 |  if_e	mov	result1, #0
20fc8     18 00 90 FD | 	jmp	#LR__2905
20fcc                 | LR__2902
20fcc                 | LR__2903
20fcc     02 26 66 F0 | 	shl	local05, #2
20fd0     64 E6 05 F1 | 	add	ptr___system__dat__, #100
20fd4     F3 26 02 F1 | 	add	local05, ptr___system__dat__
20fd8     13 2F 62 FC | 	wrlong	local09, local05
20fdc     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
20fe0                 | LR__2904
20fe0     00 FA 05 F6 | 	mov	result1, #0
20fe4                 | LR__2905
20fe4     A7 F0 03 F6 | 	mov	ptra, fp
20fe8     B2 00 A0 FD | 	call	#popregs_
20fec                 | __system___mount_ret
20fec     2D 00 64 FD | 	ret
20ff0                 | 
20ff0                 | __system___chdir
20ff0     00 4A 05 F6 | 	mov	COUNT_, #0
20ff4     A8 00 A0 FD | 	call	#pushregs_
20ff8     40 F0 07 F1 | 	add	ptra, #64
20ffc     04 4E 05 F1 | 	add	fp, #4
21000     A7 12 62 FC | 	wrlong	arg01, fp
21004     04 4E 05 F1 | 	add	fp, #4
21008     A7 14 02 F6 | 	mov	arg02, fp
2100c     08 4E 85 F1 | 	sub	fp, #8
21010     A4 48 B0 FD | 	call	#__system__stat
21014     3C 4E 05 F1 | 	add	fp, #60
21018     A7 FA 61 FC | 	wrlong	result1, fp
2101c     3C 4E 85 F1 | 	sub	fp, #60
21020     00 FA 0D F2 | 	cmp	result1, #0 wz
21024     3C 4E 05 51 |  if_ne	add	fp, #60
21028     A7 FA 01 5B |  if_ne	rdlong	result1, fp
2102c     3C 4E 85 51 |  if_ne	sub	fp, #60
21030     BC 00 90 5D |  if_ne	jmp	#LR__2912
21034     10 4E 05 F1 | 	add	fp, #16
21038     A7 12 02 FB | 	rdlong	arg01, fp
2103c     10 4E 85 F1 | 	sub	fp, #16
21040     78 00 00 FF 
21044     00 12 06 F5 | 	and	arg01, ##61440
21048     08 00 00 FF 
2104c     00 12 0E F2 | 	cmp	arg01, ##4096 wz
21050     20 E6 05 51 |  if_ne	add	ptr___system__dat__, #32
21054     F3 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
21058     20 E6 85 51 |  if_ne	sub	ptr___system__dat__, #32
2105c     01 FA 65 56 |  if_ne	neg	result1, #1
21060     8C 00 90 5D |  if_ne	jmp	#LR__2912
21064     04 4E 05 F1 | 	add	fp, #4
21068     A7 16 02 FB | 	rdlong	arg03, fp
2106c     04 4E 85 F1 | 	sub	fp, #4
21070     0B 17 C2 FA | 	rdbyte	arg03, arg03
21074     2F 16 0E F2 | 	cmp	arg03, #47 wz
21078     24 00 90 5D |  if_ne	jmp	#LR__2910
2107c     84 E6 05 F1 | 	add	ptr___system__dat__, #132
21080     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
21084     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
21088     04 4E 05 F1 | 	add	fp, #4
2108c     A7 14 02 FB | 	rdlong	arg02, fp
21090     04 4E 85 F1 | 	sub	fp, #4
21094     00 17 06 F6 | 	mov	arg03, #256
21098     78 4B B0 FD | 	call	#__system__strncpy
2109c     4C 00 90 FD | 	jmp	#LR__2911
210a0                 | LR__2910
210a0     84 E7 05 F1 | 	add	ptr___system__dat__, #388
210a4     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
210a8     38 4E 05 F1 | 	add	fp, #56
210ac     A7 12 62 FC | 	wrlong	arg01, fp
210b0     38 4E 85 F1 | 	sub	fp, #56
210b4     00 E7 85 F1 | 	sub	ptr___system__dat__, #256
210b8     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
210bc     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
210c0     00 17 06 F6 | 	mov	arg03, #256
210c4     4C 4B B0 FD | 	call	#__system__strncpy
210c8     38 4E 05 F1 | 	add	fp, #56
210cc     A7 12 02 FB | 	rdlong	arg01, fp
210d0     34 4E 85 F1 | 	sub	fp, #52
210d4     A7 14 02 FB | 	rdlong	arg02, fp
210d8     04 4E 85 F1 | 	sub	fp, #4
210dc     84 E6 05 F1 | 	add	ptr___system__dat__, #132
210e0     F3 16 02 F6 | 	mov	arg03, ptr___system__dat__
210e4     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
210e8     10 00 B0 FD | 	call	#__system____getvfsforfile
210ec                 | LR__2911
210ec     00 FA 05 F6 | 	mov	result1, #0
210f0                 | LR__2912
210f0     A7 F0 03 F6 | 	mov	ptra, fp
210f4     B2 00 A0 FD | 	call	#popregs_
210f8                 | __system___chdir_ret
210f8     2D 00 64 FD | 	ret
210fc                 | 
210fc                 | __system____getvfsforfile
210fc     0E 4A 05 F6 | 	mov	COUNT_, #14
21100     A8 00 A0 FD | 	call	#pushregs_
21104     09 1F 02 F6 | 	mov	local01, arg01
21108     0A 21 02 F6 | 	mov	local02, arg02
2110c     0B 23 02 F6 | 	mov	local03, arg03
21110     97 10 48 FB | 	callpa	#(@LR__2921-@LR__2920)>>2,fcache_load_ptr_
21114                 | LR__2920
21114     10 FB C1 FA | 	rdbyte	result1, local02
21118     2F FA 0D F2 | 	cmp	result1, #47 wz
2111c     01 20 06 A1 |  if_e	add	local02, #1
21120     10 25 C2 AA |  if_e	rdbyte	local04, local02
21124     01 20 86 A1 |  if_e	sub	local02, #1
21128     2F 24 0E A2 |  if_e	cmp	local04, #47 wz
2112c     01 20 06 A1 |  if_e	add	local02, #1
21130     E0 FF 9F AD |  if_e	jmp	#LR__2920
21134                 | LR__2921
21134     10 25 C2 FA | 	rdbyte	local04, local02
21138     2F 24 0E F2 | 	cmp	local04, #47 wz
2113c     14 00 90 5D |  if_ne	jmp	#LR__2922
21140     0F 13 02 F6 | 	mov	arg01, local01
21144     10 15 02 F6 | 	mov	arg02, local02
21148     00 17 06 F6 | 	mov	arg03, #256
2114c     C4 4A B0 FD | 	call	#__system__strncpy
21150     7C 00 90 FD | 	jmp	#LR__2924
21154                 | LR__2922
21154     84 E6 05 F1 | 	add	ptr___system__dat__, #132
21158     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
2115c     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
21160     0F 13 02 F6 | 	mov	arg01, local01
21164     00 17 06 F6 | 	mov	arg03, #256
21168     A8 4A B0 FD | 	call	#__system__strncpy
2116c     10 25 CA FA | 	rdbyte	local04, local02 wz
21170     5C 00 90 AD |  if_e	jmp	#LR__2923
21174     10 25 C2 FA | 	rdbyte	local04, local02
21178     2E 24 0E F2 | 	cmp	local04, #46 wz
2117c     01 20 06 A1 |  if_e	add	local02, #1
21180     10 27 C2 AA |  if_e	rdbyte	local05, local02
21184     01 20 86 A1 |  if_e	sub	local02, #1
21188     13 29 02 A6 |  if_e	mov	local06, local05
2118c     07 28 4E A7 |  if_e	zerox	local06, #7 wz
21190     3C 00 90 AD |  if_e	jmp	#LR__2923
21194     0F 27 C2 FA | 	rdbyte	local05, local01
21198     2F 26 0E F2 | 	cmp	local05, #47 wz
2119c     01 1E 06 A1 |  if_e	add	local01, #1
211a0     0F 25 C2 AA |  if_e	rdbyte	local04, local01
211a4     01 1E 86 A1 |  if_e	sub	local01, #1
211a8     00 24 4E A2 |  if_e	cmps	local04, #0 wz
211ac     80 01 00 5F 
211b0     AC 15 06 56 |  if_ne	mov	arg02, ##@LR__5020
211b4     0F 13 02 56 |  if_ne	mov	arg01, local01
211b8     00 17 06 56 |  if_ne	mov	arg03, #256
211bc     A0 4A B0 5D |  if_ne	call	#__system__strncat
211c0     0F 13 02 F6 | 	mov	arg01, local01
211c4     10 15 02 F6 | 	mov	arg02, local02
211c8     00 17 06 F6 | 	mov	arg03, #256
211cc     90 4A B0 FD | 	call	#__system__strncat
211d0                 | LR__2923
211d0                 | LR__2924
211d0     0F 13 02 F6 | 	mov	arg01, local01
211d4     48 4C B0 FD | 	call	#__system___normalizeName
211d8     0F 25 CA FA | 	rdbyte	local04, local01 wz
211dc     1C 00 90 AD |  if_e	jmp	#LR__2925
211e0     0F 25 C2 FA | 	rdbyte	local04, local01
211e4     2F 24 0E F2 | 	cmp	local04, #47 wz
211e8     01 1E 06 A1 |  if_e	add	local01, #1
211ec     0F 29 C2 AA |  if_e	rdbyte	local06, local01
211f0     01 1E 86 A1 |  if_e	sub	local01, #1
211f4     00 28 4E A2 |  if_e	cmps	local06, #0 wz
211f8     18 00 90 5D |  if_ne	jmp	#LR__2926
211fc                 | LR__2925
211fc     01 00 00 FF 
21200     84 E6 05 F1 | 	add	ptr___system__dat__, ##644
21204     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
21208     01 00 00 FF 
2120c     84 E6 85 F1 | 	sub	ptr___system__dat__, ##644
21210     EC 01 90 FD | 	jmp	#LR__2940
21214                 | LR__2926
21214     00 2A 06 F6 | 	mov	local07, #0
21218                 | LR__2927
21218     04 2A 56 F2 | 	cmps	local07, #4 wc
2121c     CC 01 90 3D |  if_ae	jmp	#LR__2939
21220     15 29 02 F6 | 	mov	local06, local07
21224     02 28 66 F0 | 	shl	local06, #2
21228     64 E6 05 F1 | 	add	ptr___system__dat__, #100
2122c     F3 28 02 F1 | 	add	local06, ptr___system__dat__
21230     14 29 0A FB | 	rdlong	local06, local06 wz
21234     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
21238     A8 01 90 AD |  if_e	jmp	#LR__2938
2123c     15 25 02 F6 | 	mov	local04, local07
21240     02 24 66 F0 | 	shl	local04, #2
21244     64 E6 05 F1 | 	add	ptr___system__dat__, #100
21248     F3 24 02 F1 | 	add	local04, ptr___system__dat__
2124c     12 13 02 FB | 	rdlong	arg01, local04
21250     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
21254     09 2D 02 F6 | 	mov	local08, arg01
21258     97 06 48 FB | 	callpa	#(@LR__2929-@LR__2928)>>2,fcache_load_ptr_
2125c                 | LR__2928
2125c     16 FB C9 FA | 	rdbyte	result1, local08 wz
21260     01 2C 06 51 |  if_ne	add	local08, #1
21264     F4 FF 9F 5D |  if_ne	jmp	#LR__2928
21268                 | LR__2929
21268     09 2D 82 F1 | 	sub	local08, arg01
2126c     16 2F 02 F6 | 	mov	local09, local08
21270     17 25 02 F6 | 	mov	local04, local09
21274     0F 25 02 F1 | 	add	local04, local01
21278     12 29 C2 FA | 	rdbyte	local06, local04
2127c     2F 28 0E F2 | 	cmp	local06, #47 wz
21280     17 31 02 56 |  if_ne	mov	local10, local09
21284     0F 31 02 51 |  if_ne	add	local10, local01
21288     18 27 CA 5A |  if_ne	rdbyte	local05, local10 wz
2128c     54 01 90 5D |  if_ne	jmp	#LR__2937
21290     15 17 02 F6 | 	mov	arg03, local07
21294     02 16 66 F0 | 	shl	arg03, #2
21298     64 E6 05 F1 | 	add	ptr___system__dat__, #100
2129c     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
212a0     0B 15 02 FB | 	rdlong	arg02, arg03
212a4     17 17 02 F6 | 	mov	arg03, local09
212a8     0F 13 02 F6 | 	mov	arg01, local01
212ac     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
212b0     0C 4A B0 FD | 	call	#__system__strncmp
212b4     00 FA 4D F2 | 	cmps	result1, #0 wz
212b8     28 01 90 5D |  if_ne	jmp	#LR__2937
212bc     15 33 02 F6 | 	mov	local11, local07
212c0     02 32 66 F0 | 	shl	local11, #2
212c4     74 E6 05 F1 | 	add	ptr___system__dat__, #116
212c8     F3 32 02 F1 | 	add	local11, ptr___system__dat__
212cc     19 35 02 FB | 	rdlong	local12, local11
212d0     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
212d4     97 22 48 FB | 	callpa	#(@LR__2931-@LR__2930)>>2,fcache_load_ptr_
212d8                 | LR__2930
212d8     17 29 02 F6 | 	mov	local06, local09
212dc     01 28 06 F1 | 	add	local06, #1
212e0     0F 29 02 F1 | 	add	local06, local01
212e4     14 33 C2 FA | 	rdbyte	local11, local06
212e8     2E 32 0E F2 | 	cmp	local11, #46 wz
212ec     2C 00 90 5D |  if_ne	jmp	#LR__2932
212f0     17 33 02 F6 | 	mov	local11, local09
212f4     02 32 06 F1 | 	add	local11, #2
212f8     0F 33 02 F1 | 	add	local11, local01
212fc     19 31 C2 FA | 	rdbyte	local10, local11
21300     2F 30 0E F2 | 	cmp	local10, #47 wz
21304     17 37 02 56 |  if_ne	mov	local13, local09
21308     02 36 06 51 |  if_ne	add	local13, #2
2130c     0F 37 02 51 |  if_ne	add	local13, local01
21310     1B 39 CA 5A |  if_ne	rdbyte	local14, local13 wz
21314     01 2E 06 A1 |  if_e	add	local09, #1
21318     BC FF 9F AD |  if_e	jmp	#LR__2930
2131c                 | LR__2931
2131c                 | LR__2932
2131c     00 22 0E F2 | 	cmp	local03, #0 wz
21320     11 13 02 56 |  if_ne	mov	arg01, local03
21324     0F 15 02 56 |  if_ne	mov	arg02, local01
21328     00 17 06 56 |  if_ne	mov	arg03, #256
2132c     E4 48 B0 5D |  if_ne	call	#__system__strncpy
21330     0F 15 02 F6 | 	mov	arg02, local01
21334     17 15 02 F1 | 	add	arg02, local09
21338     01 14 06 F1 | 	add	arg02, #1
2133c     0F 13 02 F6 | 	mov	arg01, local01
21340     D4 F5 BF FD | 	call	#__system____builtin_strcpy
21344     0F 13 02 F6 | 	mov	arg01, local01
21348     09 2D 02 F6 | 	mov	local08, arg01
2134c     97 06 48 FB | 	callpa	#(@LR__2934-@LR__2933)>>2,fcache_load_ptr_
21350                 | LR__2933
21350     16 FB C9 FA | 	rdbyte	result1, local08 wz
21354     01 2C 06 51 |  if_ne	add	local08, #1
21358     F4 FF 9F 5D |  if_ne	jmp	#LR__2933
2135c                 | LR__2934
2135c     09 2D 82 F1 | 	sub	local08, arg01
21360     16 2F 02 F6 | 	mov	local09, local08
21364                 | LR__2935
21364     01 2E 56 F2 | 	cmps	local09, #1 wc
21368     70 00 90 CD |  if_b	jmp	#LR__2936
2136c     17 25 02 F6 | 	mov	local04, local09
21370     0F 25 02 F1 | 	add	local04, local01
21374     12 33 C2 FA | 	rdbyte	local11, local04
21378     2F 32 0E F2 | 	cmp	local11, #47 wz
2137c     17 33 02 A6 |  if_e	mov	local11, local09
21380     0F 33 02 A1 |  if_e	add	local11, local01
21384     19 01 48 AC |  if_e	wrbyte	#0, local11
21388     01 2E 86 A1 |  if_e	sub	local09, #1
2138c     D4 FF 9F AD |  if_e	jmp	#LR__2935
21390     17 25 02 F6 | 	mov	local04, local09
21394     0F 25 02 F1 | 	add	local04, local01
21398     12 33 C2 FA | 	rdbyte	local11, local04
2139c     2E 32 0E F2 | 	cmp	local11, #46 wz
213a0     38 00 90 5D |  if_ne	jmp	#LR__2936
213a4     02 2E 56 F2 | 	cmps	local09, #2 wc
213a8     30 00 90 CD |  if_b	jmp	#LR__2936
213ac     17 39 02 F6 | 	mov	local14, local09
213b0     01 38 86 F1 | 	sub	local14, #1
213b4     0F 39 02 F1 | 	add	local14, local01
213b8     1C 27 C2 FA | 	rdbyte	local05, local14
213bc     2F 26 0E F2 | 	cmp	local05, #47 wz
213c0     18 00 90 5D |  if_ne	jmp	#LR__2936
213c4     17 25 02 F6 | 	mov	local04, local09
213c8     01 24 86 F1 | 	sub	local04, #1
213cc     0F 25 02 F1 | 	add	local04, local01
213d0     12 01 48 FC | 	wrbyte	#0, local04
213d4     02 2E 86 F1 | 	sub	local09, #2
213d8     88 FF 9F FD | 	jmp	#LR__2935
213dc                 | LR__2936
213dc     1A FB 01 F6 | 	mov	result1, local12
213e0     1C 00 90 FD | 	jmp	#LR__2940
213e4                 | LR__2937
213e4                 | LR__2938
213e4     01 2A 06 F1 | 	add	local07, #1
213e8     2C FE 9F FD | 	jmp	#LR__2927
213ec                 | LR__2939
213ec     03 00 00 FF 
213f0     38 E7 05 F1 | 	add	ptr___system__dat__, ##1848
213f4     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
213f8     03 00 00 FF 
213fc     38 E7 85 F1 | 	sub	ptr___system__dat__, ##1848
21400                 | LR__2940
21400     A7 F0 03 F6 | 	mov	ptra, fp
21404     B2 00 A0 FD | 	call	#popregs_
21408                 | __system____getvfsforfile_ret
21408     2D 00 64 FD | 	ret
2140c                 | 
2140c                 | __system___basic_open
2140c     05 4A 05 F6 | 	mov	COUNT_, #5
21410     A8 00 A0 FD | 	call	#pushregs_
21414     0A 1F 02 F6 | 	mov	local01, arg02
21418     0B 21 02 F6 | 	mov	local02, arg03
2141c     0C 23 02 F6 | 	mov	local03, arg04
21420     00 24 06 F6 | 	mov	local04, #0
21424     C4 47 B0 FD | 	call	#__system____getftab
21428     FD 26 0A F6 | 	mov	local05, result1 wz
2142c     18 00 90 5D |  if_ne	jmp	#LR__2950
21430     EE 12 02 F6 | 	mov	arg01, abortchain
21434     0C 14 06 F6 | 	mov	arg02, #12
21438     01 16 06 F6 | 	mov	arg03, #1
2143c     DA 00 A0 FD | 	call	#__longjmp
21440     01 FA 65 F6 | 	neg	result1, #1
21444     14 01 90 FD | 	jmp	#LR__2959
21448                 | LR__2950
21448     08 26 06 F1 | 	add	local05, #8
2144c     13 FB 09 FB | 	rdlong	result1, local05 wz
21450     08 26 86 F1 | 	sub	local05, #8
21454     13 13 02 56 |  if_ne	mov	arg01, local05
21458     E4 3E B0 5D |  if_ne	call	#__system___closeraw
2145c     00 1E 0E F2 | 	cmp	local01, #0 wz
21460     00 20 0E A2 |  if_e	cmp	local02, #0 wz
21464     00 22 0E A2 |  if_e	cmp	local03, #0 wz
21468     3C 00 90 AD |  if_e	jmp	#LR__2952
2146c     0C 12 06 F6 | 	mov	arg01, #12
21470     CC 33 B0 FD | 	call	#__system___gc_alloc_managed
21474     FD 24 0A F6 | 	mov	local04, result1 wz
21478     18 00 90 5D |  if_ne	jmp	#LR__2951
2147c     EE 12 02 F6 | 	mov	arg01, abortchain
21480     07 14 06 F6 | 	mov	arg02, #7
21484     01 16 06 F6 | 	mov	arg03, #1
21488     DA 00 A0 FD | 	call	#__longjmp
2148c     01 FA 65 F6 | 	neg	result1, #1
21490     C8 00 90 FD | 	jmp	#LR__2959
21494                 | LR__2951
21494     12 01 68 FC | 	wrlong	#0, local04
21498     04 24 06 F1 | 	add	local04, #4
2149c     12 01 68 FC | 	wrlong	#0, local04
214a0     04 24 86 F1 | 	sub	local04, #4
214a4     13 25 62 FC | 	wrlong	local04, local05
214a8                 | LR__2952
214a8     00 1E 0E F2 | 	cmp	local01, #0 wz
214ac     20 00 90 AD |  if_e	jmp	#LR__2953
214b0     12 1F 62 FC | 	wrlong	local01, local04
214b4     12 FB 01 F6 | 	mov	result1, local04
214b8     00 78 04 FF 
214bc     00 FA 45 F5 | 	or	result1, ##149946368
214c0     1C 26 06 F1 | 	add	local05, #28
214c4     13 FB 61 FC | 	wrlong	result1, local05
214c8     1C 26 86 F1 | 	sub	local05, #28
214cc     0C 00 90 FD | 	jmp	#LR__2954
214d0                 | LR__2953
214d0     1C 26 06 F1 | 	add	local05, #28
214d4     13 01 68 FC | 	wrlong	#0, local05
214d8     1C 26 86 F1 | 	sub	local05, #28
214dc                 | LR__2954
214dc     00 20 0E F2 | 	cmp	local02, #0 wz
214e0     28 00 90 AD |  if_e	jmp	#LR__2955
214e4     04 24 06 F1 | 	add	local04, #4
214e8     12 21 62 FC | 	wrlong	local02, local04
214ec     04 24 86 F1 | 	sub	local04, #4
214f0     12 FB 01 F6 | 	mov	result1, local04
214f4     00 80 04 FF 
214f8     00 FA 45 F5 | 	or	result1, ##150994944
214fc     20 26 06 F1 | 	add	local05, #32
21500     13 FB 61 FC | 	wrlong	result1, local05
21504     20 26 86 F1 | 	sub	local05, #32
21508     0C 00 90 FD | 	jmp	#LR__2956
2150c                 | LR__2955
2150c     20 26 06 F1 | 	add	local05, #32
21510     13 01 68 FC | 	wrlong	#0, local05
21514     20 26 86 F1 | 	sub	local05, #32
21518                 | LR__2956
21518     00 22 0E F2 | 	cmp	local03, #0 wz
2151c     24 00 90 AD |  if_e	jmp	#LR__2957
21520     08 24 06 F1 | 	add	local04, #8
21524     12 23 62 FC | 	wrlong	local03, local04
21528     08 24 86 F1 | 	sub	local04, #8
2152c     00 88 04 FF 
21530     00 24 46 F5 | 	or	local04, ##152043520
21534     24 26 06 F1 | 	add	local05, #36
21538     13 25 62 FC | 	wrlong	local04, local05
2153c     24 26 86 F1 | 	sub	local05, #36
21540     0C 00 90 FD | 	jmp	#LR__2958
21544                 | LR__2957
21544     24 26 06 F1 | 	add	local05, #36
21548     13 01 68 FC | 	wrlong	#0, local05
2154c     24 26 86 F1 | 	sub	local05, #36
21550                 | LR__2958
21550     08 26 06 F1 | 	add	local05, #8
21554     13 0F 68 FC | 	wrlong	#7, local05
21558     00 FA 05 F6 | 	mov	result1, #0
2155c                 | LR__2959
2155c     A7 F0 03 F6 | 	mov	ptra, fp
21560     B2 00 A0 FD | 	call	#popregs_
21564                 | __system___basic_open_ret
21564     2D 00 64 FD | 	ret
21568                 | 
21568                 | __system___basic_open_string
21568     04 4A 05 F6 | 	mov	COUNT_, #4
2156c     A8 00 A0 FD | 	call	#pushregs_
21570     0A 1F 02 F6 | 	mov	local01, arg02
21574     0B 21 02 F6 | 	mov	local02, arg03
21578     70 46 B0 FD | 	call	#__system____getftab
2157c     FD 22 0A F6 | 	mov	local03, result1 wz
21580     18 00 90 5D |  if_ne	jmp	#LR__2960
21584     EE 12 02 F6 | 	mov	arg01, abortchain
21588     0C 14 06 F6 | 	mov	arg02, #12
2158c     01 16 06 F6 | 	mov	arg03, #1
21590     DA 00 A0 FD | 	call	#__longjmp
21594     01 FA 65 F6 | 	neg	result1, #1
21598     58 00 90 FD | 	jmp	#LR__2962
2159c                 | LR__2960
2159c     08 22 06 F1 | 	add	local03, #8
215a0     11 19 0A FB | 	rdlong	arg04, local03 wz
215a4     08 22 86 F1 | 	sub	local03, #8
215a8     11 13 02 56 |  if_ne	mov	arg01, local03
215ac     90 3D B0 5D |  if_ne	call	#__system___closeraw
215b0     0F 15 02 F6 | 	mov	arg02, local01
215b4     10 17 02 F6 | 	mov	arg03, local02
215b8     11 13 02 F6 | 	mov	arg01, local03
215bc     B6 19 06 F6 | 	mov	arg04, #438
215c0     78 3A B0 FD | 	call	#__system___openraw
215c4     FD 24 02 F6 | 	mov	local04, result1
215c8     00 24 56 F2 | 	cmps	local04, #0 wc
215cc     20 00 90 3D |  if_ae	jmp	#LR__2961
215d0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
215d4     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
215d8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
215dc     EE 12 02 F6 | 	mov	arg01, abortchain
215e0     01 16 06 F6 | 	mov	arg03, #1
215e4     DA 00 A0 FD | 	call	#__longjmp
215e8     01 FA 65 F6 | 	neg	result1, #1
215ec     04 00 90 FD | 	jmp	#LR__2962
215f0                 | LR__2961
215f0     12 FB 01 F6 | 	mov	result1, local04
215f4                 | LR__2962
215f4     A7 F0 03 F6 | 	mov	ptra, fp
215f8     B2 00 A0 FD | 	call	#popregs_
215fc                 | __system___basic_open_string_ret
215fc     2D 00 64 FD | 	ret
21600                 | 
21600                 | __system___basic_print_char
21600     03 4A 05 F6 | 	mov	COUNT_, #3
21604     A8 00 A0 FD | 	call	#pushregs_
21608     0A 1F 02 F6 | 	mov	local01, arg02
2160c     30 4D B0 FD | 	call	#__system___gettxfunc
21610     FD 20 0A F6 | 	mov	local02, result1 wz
21614     00 FA 05 A6 |  if_e	mov	result1, #0
21618     30 00 90 AD |  if_e	jmp	#LR__2970
2161c     10 23 02 F6 | 	mov	local03, local02
21620     13 20 46 F7 | 	zerox	local02, #19
21624     14 22 46 F0 | 	shr	local03, #20
21628     02 22 66 F0 | 	shl	local03, #2
2162c     ED 22 02 F1 | 	add	local03, __methods__
21630     11 23 02 FB | 	rdlong	local03, local03
21634     0F 13 02 F6 | 	mov	arg01, local01
21638     F2 1E 02 F6 | 	mov	local01, objptr
2163c     10 E5 01 F6 | 	mov	objptr, local02
21640     2D 22 62 FD | 	call	local03
21644     0F E5 01 F6 | 	mov	objptr, local01
21648     01 FA 05 F6 | 	mov	result1, #1
2164c                 | LR__2970
2164c     A7 F0 03 F6 | 	mov	ptra, fp
21650     B2 00 A0 FD | 	call	#popregs_
21654                 | __system___basic_print_char_ret
21654     2D 00 64 FD | 	ret
21658                 | 
21658                 | __system___basic_print_string
21658     03 4A 05 F6 | 	mov	COUNT_, #3
2165c     A8 00 A0 FD | 	call	#pushregs_
21660     0A 1F 02 F6 | 	mov	local01, arg02
21664     0B 21 02 F6 | 	mov	local02, arg03
21668     D4 4C B0 FD | 	call	#__system___gettxfunc
2166c     FD 22 0A F6 | 	mov	local03, result1 wz
21670     00 FA 05 A6 |  if_e	mov	result1, #0
21674     18 00 90 AD |  if_e	jmp	#LR__2980
21678     00 1E 0E F2 | 	cmp	local01, #0 wz
2167c     00 FA 05 A6 |  if_e	mov	result1, #0
21680     11 13 02 56 |  if_ne	mov	arg01, local03
21684     10 15 02 56 |  if_ne	mov	arg02, local02
21688     0F 17 02 56 |  if_ne	mov	arg03, local01
2168c     08 02 B0 5D |  if_ne	call	#__system___fmtstr
21690                 | LR__2980
21690     A7 F0 03 F6 | 	mov	ptra, fp
21694     B2 00 A0 FD | 	call	#popregs_
21698                 | __system___basic_print_string_ret
21698     2D 00 64 FD | 	ret
2169c                 | 
2169c                 | __system___basic_print_integer
2169c     04 4A 05 F6 | 	mov	COUNT_, #4
216a0     A8 00 A0 FD | 	call	#pushregs_
216a4     0A 1F 02 F6 | 	mov	local01, arg02
216a8     0B 21 02 F6 | 	mov	local02, arg03
216ac     0C 23 02 F6 | 	mov	local03, arg04
216b0     8C 4C B0 FD | 	call	#__system___gettxfunc
216b4     FD 24 0A F6 | 	mov	local04, result1 wz
216b8     00 FA 05 A6 |  if_e	mov	result1, #0
216bc     12 13 02 56 |  if_ne	mov	arg01, local04
216c0     10 15 02 56 |  if_ne	mov	arg02, local02
216c4     0F 17 02 56 |  if_ne	mov	arg03, local01
216c8     11 19 02 56 |  if_ne	mov	arg04, local03
216cc     B4 02 B0 5D |  if_ne	call	#__system___fmtnum
216d0     A7 F0 03 F6 | 	mov	ptra, fp
216d4     B2 00 A0 FD | 	call	#popregs_
216d8                 | __system___basic_print_integer_ret
216d8     2D 00 64 FD | 	ret
216dc                 | 
216dc                 | __system___basic_print_unsigned
216dc     03 4A 05 F6 | 	mov	COUNT_, #3
216e0     A8 00 A0 FD | 	call	#pushregs_
216e4     0A 1F 02 F6 | 	mov	local01, arg02
216e8     0B 21 02 F6 | 	mov	local02, arg03
216ec     0C 23 02 F6 | 	mov	local03, arg04
216f0     4C 4C B0 FD | 	call	#__system___gettxfunc
216f4     FD 12 0A F6 | 	mov	arg01, result1 wz
216f8     00 FA 05 A6 |  if_e	mov	result1, #0
216fc     3A 20 26 54 |  if_ne	bith	local02, #58
21700     10 15 02 56 |  if_ne	mov	arg02, local02
21704     0F 17 02 56 |  if_ne	mov	arg03, local01
21708     11 19 02 56 |  if_ne	mov	arg04, local03
2170c     74 02 B0 5D |  if_ne	call	#__system___fmtnum
21710     A7 F0 03 F6 | 	mov	ptra, fp
21714     B2 00 A0 FD | 	call	#popregs_
21718                 | __system___basic_print_unsigned_ret
21718     2D 00 64 FD | 	ret
2171c                 | 
2171c                 | __system___basic_get_char
2171c     03 4A 05 F6 | 	mov	COUNT_, #3
21720     A8 00 A0 FD | 	call	#pushregs_
21724     5C 4C B0 FD | 	call	#__system___getrxfunc
21728     FD 1E 0A F6 | 	mov	local01, result1 wz
2172c     01 FA 65 A6 |  if_e	neg	result1, #1
21730     28 00 90 AD |  if_e	jmp	#LR__2990
21734     0F 21 02 F6 | 	mov	local02, local01
21738     13 1E 46 F7 | 	zerox	local01, #19
2173c     14 20 46 F0 | 	shr	local02, #20
21740     02 20 66 F0 | 	shl	local02, #2
21744     ED 20 02 F1 | 	add	local02, __methods__
21748     10 21 02 FB | 	rdlong	local02, local02
2174c     F2 22 02 F6 | 	mov	local03, objptr
21750     0F E5 01 F6 | 	mov	objptr, local01
21754     2D 20 62 FD | 	call	local02
21758     11 E5 01 F6 | 	mov	objptr, local03
2175c                 | LR__2990
2175c     A7 F0 03 F6 | 	mov	ptra, fp
21760     B2 00 A0 FD | 	call	#popregs_
21764                 | __system___basic_get_char_ret
21764     2D 00 64 FD | 	ret
21768                 | 
21768                 | __system___basic_put
21768     04 4A 05 F6 | 	mov	COUNT_, #4
2176c     A8 00 A0 FD | 	call	#pushregs_
21770     0D 1F 02 F6 | 	mov	local01, arg05
21774     0F 19 02 FD | 	qmul	arg04, local01
21778     09 21 02 F6 | 	mov	local02, arg01
2177c     0B 23 02 F6 | 	mov	local03, arg03
21780     00 14 0E F2 | 	cmp	arg02, #0 wz
21784     01 14 86 51 |  if_ne	sub	arg02, #1
21788     10 13 02 56 |  if_ne	mov	arg01, local02
2178c     00 16 06 56 |  if_ne	mov	arg03, #0
21790     18 24 62 FD | 	getqx	local04
21794     9C 42 B0 5D |  if_ne	call	#__system__lseek
21798     11 15 02 F6 | 	mov	arg02, local03
2179c     12 17 02 F6 | 	mov	arg03, local04
217a0     10 13 02 F6 | 	mov	arg01, local02
217a4     D8 41 B0 FD | 	call	#__system__write
217a8     FD 24 02 F6 | 	mov	local04, result1
217ac     01 24 56 F2 | 	cmps	local04, #1 wc
217b0     10 00 90 CD |  if_b	jmp	#LR__3000
217b4     12 7D 02 F6 | 	mov	muldiva_, local04
217b8     0F 7F 02 F6 | 	mov	muldivb_, local01
217bc     BA 00 A0 FD | 	call	#divide_
217c0     3F 25 02 F6 | 	mov	local04, muldivb_
217c4                 | LR__3000
217c4     12 FB 01 F6 | 	mov	result1, local04
217c8     A7 F0 03 F6 | 	mov	ptra, fp
217cc     B2 00 A0 FD | 	call	#popregs_
217d0                 | __system___basic_put_ret
217d0     2D 00 64 FD | 	ret
217d4                 | 
217d4                 | __system___basic_get
217d4     04 4A 05 F6 | 	mov	COUNT_, #4
217d8     A8 00 A0 FD | 	call	#pushregs_
217dc     0D 1F 02 F6 | 	mov	local01, arg05
217e0     0F 19 02 FD | 	qmul	arg04, local01
217e4     09 21 02 F6 | 	mov	local02, arg01
217e8     0B 23 02 F6 | 	mov	local03, arg03
217ec     00 14 0E F2 | 	cmp	arg02, #0 wz
217f0     01 14 86 51 |  if_ne	sub	arg02, #1
217f4     10 13 02 56 |  if_ne	mov	arg01, local02
217f8     00 16 06 56 |  if_ne	mov	arg03, #0
217fc     18 24 62 FD | 	getqx	local04
21800     30 42 B0 5D |  if_ne	call	#__system__lseek
21804     11 15 02 F6 | 	mov	arg02, local03
21808     12 17 02 F6 | 	mov	arg03, local04
2180c     10 13 02 F6 | 	mov	arg01, local02
21810     A8 41 B0 FD | 	call	#__system__read
21814     FD 24 02 F6 | 	mov	local04, result1
21818     01 24 56 F2 | 	cmps	local04, #1 wc
2181c     10 00 90 CD |  if_b	jmp	#LR__3010
21820     12 7D 02 F6 | 	mov	muldiva_, local04
21824     0F 7F 02 F6 | 	mov	muldivb_, local01
21828     BA 00 A0 FD | 	call	#divide_
2182c     3F 25 02 F6 | 	mov	local04, muldivb_
21830                 | LR__3010
21830     12 FB 01 F6 | 	mov	result1, local04
21834     A7 F0 03 F6 | 	mov	ptra, fp
21838     B2 00 A0 FD | 	call	#popregs_
2183c                 | __system___basic_get_ret
2183c     2D 00 64 FD | 	ret
21840                 | 
21840                 | __system___fmtchar
21840     00 4A 05 F6 | 	mov	COUNT_, #0
21844     A8 00 A0 FD | 	call	#pushregs_
21848     10 F0 07 F1 | 	add	ptra, #16
2184c     04 4E 05 F1 | 	add	fp, #4
21850     A7 12 62 FC | 	wrlong	arg01, fp
21854     04 4E 05 F1 | 	add	fp, #4
21858     A7 14 62 FC | 	wrlong	arg02, fp
2185c     04 4E 05 F1 | 	add	fp, #4
21860     A7 16 62 FC | 	wrlong	arg03, fp
21864     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
21868     A7 16 62 FC | 	wrlong	arg03, fp
2186c     08 4E 85 F1 | 	sub	fp, #8
21870     A7 12 02 FB | 	rdlong	arg01, fp
21874     04 4E 05 F1 | 	add	fp, #4
21878     A7 14 02 FB | 	rdlong	arg02, fp
2187c     04 4E 05 F1 | 	add	fp, #4
21880     A7 16 02 F6 | 	mov	arg03, fp
21884     0C 4E 85 F1 | 	sub	fp, #12
21888     0C 00 B0 FD | 	call	#__system___fmtstr
2188c     A7 F0 03 F6 | 	mov	ptra, fp
21890     B2 00 A0 FD | 	call	#popregs_
21894                 | __system___fmtchar_ret
21894     2D 00 64 FD | 	ret
21898                 | 
21898                 | __system___fmtstr
21898     09 4A 05 F6 | 	mov	COUNT_, #9
2189c     A8 00 A0 FD | 	call	#pushregs_
218a0     09 1F 02 F6 | 	mov	local01, arg01
218a4     0A 21 02 F6 | 	mov	local02, arg02
218a8     0B 23 02 F6 | 	mov	local03, arg03
218ac     10 19 E2 F8 | 	getbyte	arg04, local02, #0
218b0     11 13 02 F6 | 	mov	arg01, local03
218b4     09 25 02 F6 | 	mov	local04, arg01
218b8     97 06 48 FB | 	callpa	#(@LR__3021-@LR__3020)>>2,fcache_load_ptr_
218bc                 | LR__3020
218bc     12 FB C9 FA | 	rdbyte	result1, local04 wz
218c0     01 24 06 51 |  if_ne	add	local04, #1
218c4     F4 FF 9F 5D |  if_ne	jmp	#LR__3020
218c8                 | LR__3021
218c8     09 25 82 F1 | 	sub	local04, arg01
218cc     00 18 0E F2 | 	cmp	arg04, #0 wz
218d0     0C 25 7A 53 |  if_ne	fles	local04, arg04 wcz
218d4     10 15 02 F6 | 	mov	arg02, local02
218d8     12 17 02 F6 | 	mov	arg03, local04
218dc     0F 13 02 F6 | 	mov	arg01, local01
218e0     02 18 06 F6 | 	mov	arg04, #2
218e4     F8 46 B0 FD | 	call	#__system___fmtpad
218e8     FD 26 02 F6 | 	mov	local05, result1
218ec     00 26 56 F2 | 	cmps	local05, #0 wc
218f0     13 FB 01 C6 |  if_b	mov	result1, local05
218f4     80 00 90 CD |  if_b	jmp	#LR__3024
218f8     01 24 56 F2 | 	cmps	local04, #1 wc
218fc     50 00 90 CD |  if_b	jmp	#LR__3023
21900     12 29 02 F6 | 	mov	local06, local04
21904                 | LR__3022
21904     0F 2B 02 F6 | 	mov	local07, local01
21908     0F 2D 02 F6 | 	mov	local08, local01
2190c     13 2A 46 F7 | 	zerox	local07, #19
21910     14 2C 46 F0 | 	shr	local08, #20
21914     02 2C 66 F0 | 	shl	local08, #2
21918     ED 2C 02 F1 | 	add	local08, __methods__
2191c     16 2D 02 FB | 	rdlong	local08, local08
21920     11 13 C2 FA | 	rdbyte	arg01, local03
21924     F2 2E 02 F6 | 	mov	local09, objptr
21928     15 E5 01 F6 | 	mov	objptr, local07
2192c     01 22 06 F1 | 	add	local03, #1
21930     2D 2C 62 FD | 	call	local08
21934     17 E5 01 F6 | 	mov	objptr, local09
21938     FD 2E 02 F6 | 	mov	local09, result1
2193c     00 2E 56 F2 | 	cmps	local09, #0 wc
21940     17 FB 01 C6 |  if_b	mov	result1, local09
21944     30 00 90 CD |  if_b	jmp	#LR__3024
21948     17 27 02 F1 | 	add	local05, local09
2194c     ED 29 6E FB | 	djnz	local06, #LR__3022
21950                 | LR__3023
21950     10 15 02 F6 | 	mov	arg02, local02
21954     12 17 02 F6 | 	mov	arg03, local04
21958     0F 13 02 F6 | 	mov	arg01, local01
2195c     01 18 06 F6 | 	mov	arg04, #1
21960     7C 46 B0 FD | 	call	#__system___fmtpad
21964     FD 2E 02 F6 | 	mov	local09, result1
21968     00 2E 56 F2 | 	cmps	local09, #0 wc
2196c     17 FB 01 C6 |  if_b	mov	result1, local09
21970     17 27 02 31 |  if_ae	add	local05, local09
21974     13 FB 01 36 |  if_ae	mov	result1, local05
21978                 | LR__3024
21978     A7 F0 03 F6 | 	mov	ptra, fp
2197c     B2 00 A0 FD | 	call	#popregs_
21980                 | __system___fmtstr_ret
21980     2D 00 64 FD | 	ret
21984                 | 
21984                 | __system___fmtnum
21984     0B 4A 05 F6 | 	mov	COUNT_, #11
21988     A8 00 A0 FD | 	call	#pushregs_
2198c     09 1F 02 F6 | 	mov	local01, arg01
21990     0A 21 02 F6 | 	mov	local02, arg02
21994     0B 23 02 F6 | 	mov	local03, arg03
21998     0C 25 02 F6 | 	mov	local04, arg04
2199c     F8 27 02 F6 | 	mov	local05, ptra
219a0     13 29 02 F6 | 	mov	local06, local05
219a4     00 2A 06 F6 | 	mov	local07, #0
219a8     10 2D 02 F6 | 	mov	local08, local02
219ac     10 2C 46 F0 | 	shr	local08, #16
219b0     3F 2C 06 F5 | 	and	local08, #63
219b4     10 2F E2 F8 | 	getbyte	local09, local02, #0
219b8     10 31 02 F6 | 	mov	local10, local02
219bc     1A 30 46 F0 | 	shr	local10, #26
219c0     03 30 06 F5 | 	and	local10, #3
219c4     18 33 02 F6 | 	mov	local11, local10
219c8     01 2C 56 F2 | 	cmps	local08, #1 wc
219cc     44 F0 07 F1 | 	add	ptra, #68
219d0     01 2C 86 31 |  if_ae	sub	local08, #1
219d4     41 2E 56 F2 | 	cmps	local09, #65 wc
219d8     00 2E 0E C2 |  if_b	cmp	local09, #0 wz
219dc     40 2E 06 B6 |  if_nc_or_z	mov	local09, #64
219e0     03 32 0E F2 | 	cmp	local11, #3 wz
219e4     00 32 06 A6 |  if_e	mov	local11, #0
219e8     00 22 56 52 |  if_ne	cmps	local03, #0 wc
219ec     04 32 06 46 |  if_c_and_nz	mov	local11, #4
219f0     11 23 62 46 |  if_c_and_nz	neg	local03, local03
219f4     00 32 0E F2 | 	cmp	local11, #0 wz
219f8     4C 00 90 AD |  if_e	jmp	#LR__3033
219fc     01 2A 06 F6 | 	mov	local07, #1
21a00     17 2D 0A F2 | 	cmp	local08, local09 wz
21a04     18 00 90 5D |  if_ne	jmp	#LR__3031
21a08     05 2C 6E FB | 	djnz	local08, #LR__3030
21a0c     0F 13 02 F6 | 	mov	arg01, local01
21a10     10 15 02 F6 | 	mov	arg02, local02
21a14     23 16 06 F6 | 	mov	arg03, #35
21a18     24 FE BF FD | 	call	#__system___fmtchar
21a1c     88 00 90 FD | 	jmp	#LR__3037
21a20                 | LR__3030
21a20                 | LR__3031
21a20     02 32 0E F2 | 	cmp	local11, #2 wz
21a24     14 31 02 A6 |  if_e	mov	local10, local06
21a28     01 28 06 A1 |  if_e	add	local06, #1
21a2c     18 41 48 AC |  if_e	wrbyte	#32, local10
21a30     14 00 90 AD |  if_e	jmp	#LR__3032
21a34     04 32 0E F2 | 	cmp	local11, #4 wz
21a38     14 5B 48 AC |  if_e	wrbyte	#45, local06
21a3c     01 28 06 A1 |  if_e	add	local06, #1
21a40     14 57 48 5C |  if_ne	wrbyte	#43, local06
21a44     01 28 06 51 |  if_ne	add	local06, #1
21a48                 | LR__3032
21a48                 | LR__3033
21a48     14 13 02 F6 | 	mov	arg01, local06
21a4c     11 15 02 F6 | 	mov	arg02, local03
21a50     12 17 02 F6 | 	mov	arg03, local04
21a54     16 19 02 F6 | 	mov	arg04, local08
21a58     00 1A 06 F6 | 	mov	arg05, #0
21a5c     1D 20 2E F4 | 	testbn	local02, #29 wz
21a60     01 1A 06 56 |  if_ne	mov	arg05, #1
21a64     40 46 B0 FD | 	call	#__system___uitoa
21a68     FD 2A 02 F1 | 	add	local07, result1
21a6c     17 2B 5A F2 | 	cmps	local07, local09 wcz
21a70     24 00 90 ED |  if_be	jmp	#LR__3036
21a74     97 0E 48 FB | 	callpa	#(@LR__3035-@LR__3034)>>2,fcache_load_ptr_
21a78                 | LR__3034
21a78     17 31 02 F6 | 	mov	local10, local09
21a7c     01 30 56 F2 | 	cmps	local10, #1 wc
21a80     01 2E 86 F1 | 	sub	local09, #1
21a84     14 31 02 36 |  if_ae	mov	local10, local06
21a88     01 28 06 31 |  if_ae	add	local06, #1
21a8c     18 47 48 3C |  if_ae	wrbyte	#35, local10
21a90     E4 FF 9F 3D |  if_ae	jmp	#LR__3034
21a94                 | LR__3035
21a94     14 01 48 FC | 	wrbyte	#0, local06
21a98                 | LR__3036
21a98     0F 13 02 F6 | 	mov	arg01, local01
21a9c     10 15 02 F6 | 	mov	arg02, local02
21aa0     13 17 02 F6 | 	mov	arg03, local05
21aa4     F0 FD BF FD | 	call	#__system___fmtstr
21aa8                 | LR__3037
21aa8     A7 F0 03 F6 | 	mov	ptra, fp
21aac     B2 00 A0 FD | 	call	#popregs_
21ab0                 | __system___fmtnum_ret
21ab0     2D 00 64 FD | 	ret
21ab4                 | 
21ab4                 | __system___fmtfloat
21ab4     10 4A 05 F6 | 	mov	COUNT_, #16
21ab8     A8 00 A0 FD | 	call	#pushregs_
21abc     24 F1 07 F1 | 	add	ptra, #292
21ac0     04 4E 05 F1 | 	add	fp, #4
21ac4     A7 12 62 FC | 	wrlong	arg01, fp
21ac8     04 4E 05 F1 | 	add	fp, #4
21acc     A7 14 62 FC | 	wrlong	arg02, fp
21ad0     04 4E 05 F1 | 	add	fp, #4
21ad4     A7 16 62 FC | 	wrlong	arg03, fp
21ad8     04 4E 05 F1 | 	add	fp, #4
21adc     A7 18 62 FC | 	wrlong	arg04, fp
21ae0     0C 4E 05 F1 | 	add	fp, #12
21ae4     A7 14 68 FC | 	wrlong	#10, fp
21ae8     08 4E 05 F1 | 	add	fp, #8
21aec     A7 00 68 FC | 	wrlong	#0, fp
21af0     08 4E 05 F1 | 	add	fp, #8
21af4     A7 00 68 FC | 	wrlong	#0, fp
21af8     08 4E 05 F1 | 	add	fp, #8
21afc     A7 00 68 FC | 	wrlong	#0, fp
21b00     04 4E 05 F1 | 	add	fp, #4
21b04     A7 04 68 FC | 	wrlong	#2, fp
21b08     04 4E 05 F1 | 	add	fp, #4
21b0c     A7 00 68 FC | 	wrlong	#0, fp
21b10     04 4E 05 F1 | 	add	fp, #4
21b14     A7 00 68 FC | 	wrlong	#0, fp
21b18     04 4E 05 F1 | 	add	fp, #4
21b1c     A7 00 68 FC | 	wrlong	#0, fp
21b20     04 4E 05 F1 | 	add	fp, #4
21b24     A7 00 68 FC | 	wrlong	#0, fp
21b28     18 4E 05 F1 | 	add	fp, #24
21b2c     A7 00 68 FC | 	wrlong	#0, fp
21b30     68 4E 05 F1 | 	add	fp, #104
21b34     A7 1E 02 F6 | 	mov	local01, fp
21b38     08 4E 85 F1 | 	sub	fp, #8
21b3c     A7 1E 62 FC | 	wrlong	local01, fp
21b40     04 4E 05 F1 | 	add	fp, #4
21b44     A7 1E 62 FC | 	wrlong	local01, fp
21b48     BC 4E 85 F1 | 	sub	fp, #188
21b4c     A7 1E 02 FB | 	rdlong	local01, fp
21b50     10 1E 46 F0 | 	shr	local01, #16
21b54     3F 1E 06 F5 | 	and	local01, #63
21b58     B0 4E 05 F1 | 	add	fp, #176
21b5c     A7 1E 62 FC | 	wrlong	local01, fp
21b60     B0 4E 85 F1 | 	sub	fp, #176
21b64     A7 1E 02 FB | 	rdlong	local01, fp
21b68     1C 1E 46 F0 | 	shr	local01, #28
21b6c     01 1E 06 F5 | 	and	local01, #1
21b70     08 4F 05 F1 | 	add	fp, #264
21b74     A7 1E 62 FC | 	wrlong	local01, fp
21b78     58 4E 85 F1 | 	sub	fp, #88
21b7c     A7 1E 0A FB | 	rdlong	local01, fp wz
21b80     B8 4E 85 F1 | 	sub	fp, #184
21b84     3C 00 90 5D |  if_ne	jmp	#LR__3041
21b88     10 4E 05 F1 | 	add	fp, #16
21b8c     A7 1E 02 FB | 	rdlong	local01, fp
21b90     10 4E 85 F1 | 	sub	fp, #16
21b94     61 1E 0E F2 | 	cmp	local01, #97 wz
21b98     18 00 90 5D |  if_ne	jmp	#LR__3040
21b9c     B8 4E 05 F1 | 	add	fp, #184
21ba0     A7 1A 68 FC | 	wrlong	#13, fp
21ba4     84 4E 85 F1 | 	sub	fp, #132
21ba8     A7 02 68 FC | 	wrlong	#1, fp
21bac     34 4E 85 F1 | 	sub	fp, #52
21bb0     24 00 90 FD | 	jmp	#LR__3042
21bb4                 | LR__3040
21bb4     B8 4E 05 F1 | 	add	fp, #184
21bb8     A7 0C 68 FC | 	wrlong	#6, fp
21bbc     B8 4E 85 F1 | 	sub	fp, #184
21bc0     14 00 90 FD | 	jmp	#LR__3042
21bc4                 | LR__3041
21bc4     B8 4E 05 F1 | 	add	fp, #184
21bc8     A7 1E 02 FB | 	rdlong	local01, fp
21bcc     01 1E 86 F1 | 	sub	local01, #1
21bd0     A7 1E 62 FC | 	wrlong	local01, fp
21bd4     B8 4E 85 F1 | 	sub	fp, #184
21bd8                 | LR__3042
21bd8     08 4E 05 F1 | 	add	fp, #8
21bdc     A7 1E 02 FB | 	rdlong	local01, fp
21be0     16 1E 46 F0 | 	shr	local01, #22
21be4     03 1E 06 F5 | 	and	local01, #3
21be8     04 4F 05 F1 | 	add	fp, #260
21bec     A7 1E 62 FC | 	wrlong	local01, fp
21bf0     04 4F 85 F1 | 	sub	fp, #260
21bf4     A7 1E 02 FB | 	rdlong	local01, fp
21bf8     1D 1E 46 F0 | 	shr	local01, #29
21bfc     01 1E 06 F5 | 	and	local01, #1
21c00     B4 4E 05 F1 | 	add	fp, #180
21c04     A7 1E 62 FC | 	wrlong	local01, fp
21c08     B4 4E 85 F1 | 	sub	fp, #180
21c0c     A7 1E 02 FB | 	rdlong	local01, fp
21c10     0F 1F EA F8 | 	getbyte	local01, local01, #1
21c14     60 4E 05 F1 | 	add	fp, #96
21c18     A7 1E 62 FC | 	wrlong	local01, fp
21c1c     60 4E 85 F1 | 	sub	fp, #96
21c20     A7 1E 02 FB | 	rdlong	local01, fp
21c24     0F 1F E2 F8 | 	getbyte	local01, local01, #0
21c28     64 4E 05 F1 | 	add	fp, #100
21c2c     A7 1E 62 FC | 	wrlong	local01, fp
21c30     00 1E 06 F6 | 	mov	local01, #0
21c34     5C 4E 85 F1 | 	sub	fp, #92
21c38     A7 1A 02 FB | 	rdlong	arg05, fp
21c3c     65 1A 0E F2 | 	cmp	arg05, #101 wz
21c40     01 1E 06 A6 |  if_e	mov	local01, #1
21c44     14 4E 05 F1 | 	add	fp, #20
21c48     A7 1E 62 FC | 	wrlong	local01, fp
21c4c     98 4E 05 F1 | 	add	fp, #152
21c50     A7 20 0A FB | 	rdlong	local02, fp wz
21c54     45 1E 06 56 |  if_ne	mov	local01, #69
21c58     65 1E 06 A6 |  if_e	mov	local01, #101
21c5c     8C 4E 85 F1 | 	sub	fp, #140
21c60     A7 1E 62 FC | 	wrlong	local01, fp
21c64     20 4E 85 F1 | 	sub	fp, #32
21c68     A7 1E 02 FB | 	rdlong	local01, fp
21c6c     10 4E 85 F1 | 	sub	fp, #16
21c70     61 1E 0E F2 | 	cmp	local01, #97 wz
21c74     4C 00 90 5D |  if_ne	jmp	#LR__3043
21c78     24 4E 05 F1 | 	add	fp, #36
21c7c     A7 02 68 FC | 	wrlong	#1, fp
21c80     98 4E 05 F1 | 	add	fp, #152
21c84     A7 20 0A FB | 	rdlong	local02, fp wz
21c88     50 1E 06 56 |  if_ne	mov	local01, #80
21c8c     70 1E 06 A6 |  if_e	mov	local01, #112
21c90     8C 4E 85 F1 | 	sub	fp, #140
21c94     A7 1E 62 FC | 	wrlong	local01, fp
21c98     14 4E 85 F1 | 	sub	fp, #20
21c9c     A7 04 68 FC | 	wrlong	#2, fp
21ca0     1C 4E 05 F1 | 	add	fp, #28
21ca4     A7 02 68 FC | 	wrlong	#1, fp
21ca8     84 4E 05 F1 | 	add	fp, #132
21cac     A7 20 0A FB | 	rdlong	local02, fp wz
21cb0     58 1E 06 56 |  if_ne	mov	local01, #88
21cb4     78 1E 06 A6 |  if_e	mov	local01, #120
21cb8     7C 4E 85 F1 | 	sub	fp, #124
21cbc     A7 1E 62 FC | 	wrlong	local01, fp
21cc0     40 4E 85 F1 | 	sub	fp, #64
21cc4                 | LR__3043
21cc4     10 4E 05 F1 | 	add	fp, #16
21cc8     A7 1E 02 FB | 	rdlong	local01, fp
21ccc     10 4E 85 F1 | 	sub	fp, #16
21cd0     23 1E 0E F2 | 	cmp	local01, #35 wz
21cd4     3C 00 90 5D |  if_ne	jmp	#LR__3046
21cd8     48 4E 05 F1 | 	add	fp, #72
21cdc     A7 02 68 FC | 	wrlong	#1, fp
21ce0     C8 4E 05 F1 | 	add	fp, #200
21ce4     A7 1E 0A FB | 	rdlong	local01, fp wz
21ce8     10 4F 85 F1 | 	sub	fp, #272
21cec     18 00 90 AD |  if_e	jmp	#LR__3044
21cf0     10 4E 05 F1 | 	add	fp, #16
21cf4     A7 CC 68 FC | 	wrlong	#102, fp
21cf8     00 4F 05 F1 | 	add	fp, #256
21cfc     A7 00 68 FC | 	wrlong	#0, fp
21d00     10 4F 85 F1 | 	sub	fp, #272
21d04     0C 00 90 FD | 	jmp	#LR__3045
21d08                 | LR__3044
21d08     10 4F 05 F1 | 	add	fp, #272
21d0c     A7 02 68 FC | 	wrlong	#1, fp
21d10     10 4F 85 F1 | 	sub	fp, #272
21d14                 | LR__3045
21d14                 | LR__3046
21d14     08 4E 05 F1 | 	add	fp, #8
21d18     A7 1E 02 FB | 	rdlong	local01, fp
21d1c     1A 1E 46 F0 | 	shr	local01, #26
21d20     03 1E 06 F5 | 	and	local01, #3
21d24     5C 4E 05 F1 | 	add	fp, #92
21d28     A7 1E 62 FC | 	wrlong	local01, fp
21d2c     58 4E 85 F1 | 	sub	fp, #88
21d30     A7 FA 01 FB | 	rdlong	result1, fp
21d34     0C 4E 85 F1 | 	sub	fp, #12
21d38     1F FA 4D F0 | 	shr	result1, #31 wz
21d3c     20 00 90 AD |  if_e	jmp	#LR__3047
21d40     2C 4E 05 F1 | 	add	fp, #44
21d44     A7 5A 68 FC | 	wrlong	#45, fp
21d48     20 4E 85 F1 | 	sub	fp, #32
21d4c     A7 FA 01 FB | 	rdlong	result1, fp
21d50     1F FA E5 F4 | 	bitnot	result1, #31
21d54     A7 FA 61 FC | 	wrlong	result1, fp
21d58     0C 4E 85 F1 | 	sub	fp, #12
21d5c     3C 00 90 FD | 	jmp	#LR__3049
21d60                 | LR__3047
21d60     64 4E 05 F1 | 	add	fp, #100
21d64     A7 1E 02 FB | 	rdlong	local01, fp
21d68     64 4E 85 F1 | 	sub	fp, #100
21d6c     01 1E 0E F2 | 	cmp	local01, #1 wz
21d70     2C 4E 05 A1 |  if_e	add	fp, #44
21d74     A7 56 68 AC |  if_e	wrlong	#43, fp
21d78     2C 4E 85 A1 |  if_e	sub	fp, #44
21d7c     1C 00 90 AD |  if_e	jmp	#LR__3048
21d80     64 4E 05 F1 | 	add	fp, #100
21d84     A7 1E 02 FB | 	rdlong	local01, fp
21d88     64 4E 85 F1 | 	sub	fp, #100
21d8c     02 1E 0E F2 | 	cmp	local01, #2 wz
21d90     2C 4E 05 A1 |  if_e	add	fp, #44
21d94     A7 40 68 AC |  if_e	wrlong	#32, fp
21d98     2C 4E 85 A1 |  if_e	sub	fp, #44
21d9c                 | LR__3048
21d9c                 | LR__3049
21d9c     08 4E 05 F1 | 	add	fp, #8
21da0     A7 1E 02 FB | 	rdlong	local01, fp
21da4     18 1E 46 F0 | 	shr	local01, #24
21da8     03 1E 06 F5 | 	and	local01, #3
21dac     3C 4E 05 F1 | 	add	fp, #60
21db0     A7 1E 62 FC | 	wrlong	local01, fp
21db4     00 1E 06 F6 | 	mov	local01, #0
21db8     18 4E 85 F1 | 	sub	fp, #24
21dbc     A7 22 0A FB | 	rdlong	local03, fp wz
21dc0     2C 4E 85 F1 | 	sub	fp, #44
21dc4     18 00 90 5D |  if_ne	jmp	#LR__3050
21dc8     1C 4E 05 F1 | 	add	fp, #28
21dcc     A7 24 02 FB | 	rdlong	local04, fp
21dd0     1C 4E 85 F1 | 	sub	fp, #28
21dd4     12 27 02 F6 | 	mov	local05, local04
21dd8     0A 26 0E F2 | 	cmp	local05, #10 wz
21ddc     04 00 90 AD |  if_e	jmp	#LR__3051
21de0                 | LR__3050
21de0     01 1E 66 F5 | 	xor	local01, #1
21de4                 | LR__3051
21de4     3C 4E 05 F1 | 	add	fp, #60
21de8     A7 1E 62 FC | 	wrlong	local01, fp
21dec     3C 4E 85 F1 | 	sub	fp, #60
21df0     00 1E 0E F2 | 	cmp	local01, #0 wz
21df4     0C 01 90 AD |  if_e	jmp	#LR__3053
21df8     44 4E 05 F1 | 	add	fp, #68
21dfc     A7 26 02 FB | 	rdlong	local05, fp
21e00     44 4E 85 F1 | 	sub	fp, #68
21e04     13 23 02 F6 | 	mov	local03, local05
21e08     02 22 0E F2 | 	cmp	local03, #2 wz
21e0c     F4 00 90 5D |  if_ne	jmp	#LR__3053
21e10     0C 4F 05 F1 | 	add	fp, #268
21e14     A7 28 02 FB | 	rdlong	local06, fp
21e18     0C 4F 85 F1 | 	sub	fp, #268
21e1c     14 25 02 F6 | 	mov	local04, local06
21e20     02 24 0E F2 | 	cmp	local04, #2 wz
21e24     DC 00 90 AD |  if_e	jmp	#LR__3053
21e28     C0 4E 05 F1 | 	add	fp, #192
21e2c     A7 12 02 FB | 	rdlong	arg01, fp
21e30     94 4E 85 F1 | 	sub	fp, #148
21e34     A7 14 02 FB | 	rdlong	arg02, fp
21e38     14 4E 05 F1 | 	add	fp, #20
21e3c     A7 16 02 FB | 	rdlong	arg03, fp
21e40     40 4E 85 F1 | 	sub	fp, #64
21e44     C8 44 B0 FD | 	call	#__system__emitsign_0500
21e48     14 4F 05 F1 | 	add	fp, #276
21e4c     A7 FA 61 FC | 	wrlong	result1, fp
21e50     14 4F 85 F1 | 	sub	fp, #276
21e54     00 FA 55 F2 | 	cmps	result1, #0 wc
21e58     14 4F 05 C1 |  if_b	add	fp, #276
21e5c     A7 FA 01 CB |  if_b	rdlong	result1, fp
21e60     14 4F 85 C1 |  if_b	sub	fp, #276
21e64     6C 0B 90 CD |  if_b	jmp	#LR__3103
21e68     C0 4E 05 F1 | 	add	fp, #192
21e6c     A7 1E 02 FB | 	rdlong	local01, fp
21e70     54 4E 05 F1 | 	add	fp, #84
21e74     A7 26 02 FB | 	rdlong	local05, fp
21e78     13 23 02 F6 | 	mov	local03, local05
21e7c     13 1F 02 F1 | 	add	local01, local05
21e80     54 4E 85 F1 | 	sub	fp, #84
21e84     A7 1E 62 FC | 	wrlong	local01, fp
21e88     58 4E 85 F1 | 	sub	fp, #88
21e8c     A7 1E 0A FB | 	rdlong	local01, fp wz
21e90     68 4E 85 F1 | 	sub	fp, #104
21e94     60 00 90 AD |  if_e	jmp	#LR__3052
21e98     68 4E 05 F1 | 	add	fp, #104
21e9c     A7 1E 02 FB | 	rdlong	local01, fp
21ea0     AC 4E 05 F1 | 	add	fp, #172
21ea4     A7 22 02 FB | 	rdlong	local03, fp
21ea8     11 1F 82 F1 | 	sub	local01, local03
21eac     AC 4E 85 F1 | 	sub	fp, #172
21eb0     A7 1E 62 FC | 	wrlong	local01, fp
21eb4     68 4E 85 F1 | 	sub	fp, #104
21eb8     00 1E 56 F2 | 	cmps	local01, #0 wc
21ebc     68 4E 05 C1 |  if_b	add	fp, #104
21ec0     A7 00 68 CC |  if_b	wrlong	#0, fp
21ec4     68 4E 85 C1 |  if_b	sub	fp, #104
21ec8     08 4E 05 F1 | 	add	fp, #8
21ecc     A7 1E 02 FB | 	rdlong	local01, fp
21ed0     E8 1E 06 F4 | 	bitl	local01, #232
21ed4     A7 1E 62 FC | 	wrlong	local01, fp
21ed8     60 4E 05 F1 | 	add	fp, #96
21edc     A7 26 02 FB | 	rdlong	local05, fp
21ee0     13 23 02 F6 | 	mov	local03, local05
21ee4     08 22 66 F0 | 	shl	local03, #8
21ee8     11 1F 42 F5 | 	or	local01, local03
21eec     60 4E 85 F1 | 	sub	fp, #96
21ef0     A7 1E 62 FC | 	wrlong	local01, fp
21ef4     08 4E 85 F1 | 	sub	fp, #8
21ef8                 | LR__3052
21ef8     3C 4E 05 F1 | 	add	fp, #60
21efc     A7 00 68 FC | 	wrlong	#0, fp
21f00     3C 4E 85 F1 | 	sub	fp, #60
21f04                 | LR__3053
21f04     0C 4E 05 F1 | 	add	fp, #12
21f08     A7 12 02 FB | 	rdlong	arg01, fp
21f0c     0C 4E 85 F1 | 	sub	fp, #12
21f10     28 1F B0 FD | 	call	#__system____builtin_ilogb
21f14     FF FF 3F FF 
21f18     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
21f1c     50 00 90 5D |  if_ne	jmp	#LR__3055
21f20     2C 4E 05 F1 | 	add	fp, #44
21f24     A7 1E 0A FB | 	rdlong	local01, fp wz
21f28     2C 4E 85 F1 | 	sub	fp, #44
21f2c     24 00 90 AD |  if_e	jmp	#LR__3054
21f30     C0 4E 05 F1 | 	add	fp, #192
21f34     A7 20 02 FB | 	rdlong	local02, fp
21f38     10 23 02 F6 | 	mov	local03, local02
21f3c     01 22 06 F1 | 	add	local03, #1
21f40     A7 22 62 FC | 	wrlong	local03, fp
21f44     94 4E 85 F1 | 	sub	fp, #148
21f48     A7 24 02 FB | 	rdlong	local04, fp
21f4c     2C 4E 85 F1 | 	sub	fp, #44
21f50     10 25 42 FC | 	wrbyte	local04, local02
21f54                 | LR__3054
21f54     C0 4E 05 F1 | 	add	fp, #192
21f58     A7 12 02 FB | 	rdlong	arg01, fp
21f5c     C0 4E 85 F1 | 	sub	fp, #192
21f60     80 01 00 FF 
21f64     AE 15 06 F6 | 	mov	arg02, ##@LR__5021
21f68     AC E9 BF FD | 	call	#__system____builtin_strcpy
21f6c     A4 08 90 FD | 	jmp	#LR__3091
21f70                 | LR__3055
21f70     0C 4E 05 F1 | 	add	fp, #12
21f74     A7 20 02 FB | 	rdlong	local02, fp
21f78     0C 4E 85 F1 | 	sub	fp, #12
21f7c     10 13 02 F6 | 	mov	arg01, local02
21f80     B8 1E B0 FD | 	call	#__system____builtin_ilogb
21f84     00 00 40 FF 
21f88     00 FA 0D F2 | 	cmp	result1, ##-2147483648 wz
21f8c     50 00 90 5D |  if_ne	jmp	#LR__3057
21f90     2C 4E 05 F1 | 	add	fp, #44
21f94     A7 1E 0A FB | 	rdlong	local01, fp wz
21f98     2C 4E 85 F1 | 	sub	fp, #44
21f9c     24 00 90 AD |  if_e	jmp	#LR__3056
21fa0     C0 4E 05 F1 | 	add	fp, #192
21fa4     A7 20 02 FB | 	rdlong	local02, fp
21fa8     10 23 02 F6 | 	mov	local03, local02
21fac     01 22 06 F1 | 	add	local03, #1
21fb0     A7 22 62 FC | 	wrlong	local03, fp
21fb4     94 4E 85 F1 | 	sub	fp, #148
21fb8     A7 24 02 FB | 	rdlong	local04, fp
21fbc     2C 4E 85 F1 | 	sub	fp, #44
21fc0     10 25 42 FC | 	wrbyte	local04, local02
21fc4                 | LR__3056
21fc4     C0 4E 05 F1 | 	add	fp, #192
21fc8     A7 12 02 FB | 	rdlong	arg01, fp
21fcc     C0 4E 85 F1 | 	sub	fp, #192
21fd0     80 01 00 FF 
21fd4     B2 15 06 F6 | 	mov	arg02, ##@LR__5022
21fd8     3C E9 BF FD | 	call	#__system____builtin_strcpy
21fdc     34 08 90 FD | 	jmp	#LR__3091
21fe0                 | LR__3057
21fe0     10 4E 05 F1 | 	add	fp, #16
21fe4     A7 1E 02 FB | 	rdlong	local01, fp
21fe8     10 4E 85 F1 | 	sub	fp, #16
21fec     67 1E 0E F2 | 	cmp	local01, #103 wz
21ff0     10 4E 05 51 |  if_ne	add	fp, #16
21ff4     A7 22 02 5B |  if_ne	rdlong	local03, fp
21ff8     10 4E 85 51 |  if_ne	sub	fp, #16
21ffc     23 22 0E 52 |  if_ne	cmp	local03, #35 wz
22000     94 01 90 5D |  if_ne	jmp	#LR__3062
22004     0C 4E 05 F1 | 	add	fp, #12
22008     A7 12 02 FB | 	rdlong	arg01, fp
2200c     08 4E 05 F1 | 	add	fp, #8
22010     A7 14 02 F6 | 	mov	arg02, fp
22014     0C 4E 05 F1 | 	add	fp, #12
22018     A7 16 02 F6 | 	mov	arg03, fp
2201c     98 4E 05 F1 | 	add	fp, #152
22020     A7 18 02 FB | 	rdlong	arg04, fp
22024     9C 4E 85 F1 | 	sub	fp, #156
22028     A7 1A 02 FB | 	rdlong	arg05, fp
2202c     1C 4E 85 F1 | 	sub	fp, #28
22030     E8 40 B0 FD | 	call	#__system__disassemble_0498
22034     10 4E 05 F1 | 	add	fp, #16
22038     A7 1E 02 FB | 	rdlong	local01, fp
2203c     10 4E 85 F1 | 	sub	fp, #16
22040     23 1E 0E F2 | 	cmp	local01, #35 wz
22044     A0 00 90 5D |  if_ne	jmp	#LR__3059
22048     20 4E 05 F1 | 	add	fp, #32
2204c     A7 1E 02 FB | 	rdlong	local01, fp
22050     98 4E 05 F1 | 	add	fp, #152
22054     A7 22 02 FB | 	rdlong	local03, fp
22058     B8 4E 85 F1 | 	sub	fp, #184
2205c     11 1F 5A F2 | 	cmps	local01, local03 wcz
22060     24 4E 05 11 |  if_a	add	fp, #36
22064     A7 02 68 1C |  if_a	wrlong	#1, fp
22068     24 4E 85 11 |  if_a	sub	fp, #36
2206c     A4 01 90 1D |  if_a	jmp	#LR__3065
22070     20 4E 05 F1 | 	add	fp, #32
22074     A7 1E 02 FB | 	rdlong	local01, fp
22078     20 4E 85 F1 | 	sub	fp, #32
2207c     00 1E 56 F2 | 	cmps	local01, #0 wc
22080     2C 00 90 3D |  if_ae	jmp	#LR__3058
22084     B8 4E 05 F1 | 	add	fp, #184
22088     A7 1E 02 FB | 	rdlong	local01, fp
2208c     0F 1F 62 F6 | 	neg	local01, local01
22090     98 4E 85 F1 | 	sub	fp, #152
22094     A7 22 02 FB | 	rdlong	local03, fp
22098     20 4E 85 F1 | 	sub	fp, #32
2209c     0F 23 5A F2 | 	cmps	local03, local01 wcz
220a0     24 4E 05 E1 |  if_be	add	fp, #36
220a4     A7 02 68 EC |  if_be	wrlong	#1, fp
220a8     24 4E 85 E1 |  if_be	sub	fp, #36
220ac     64 01 90 FD | 	jmp	#LR__3065
220b0                 | LR__3058
220b0     20 4E 05 F1 | 	add	fp, #32
220b4     A7 1E 02 FB | 	rdlong	local01, fp
220b8     20 4E 85 F1 | 	sub	fp, #32
220bc     01 1E 56 F2 | 	cmps	local01, #1 wc
220c0     50 01 90 CD |  if_b	jmp	#LR__3065
220c4     B8 4E 05 F1 | 	add	fp, #184
220c8     A7 1E 02 FB | 	rdlong	local01, fp
220cc     98 4E 85 F1 | 	sub	fp, #152
220d0     A7 22 02 FB | 	rdlong	local03, fp
220d4     11 1F 82 F1 | 	sub	local01, local03
220d8     98 4E 05 F1 | 	add	fp, #152
220dc     A7 1E 62 FC | 	wrlong	local01, fp
220e0     B8 4E 85 F1 | 	sub	fp, #184
220e4     2C 01 90 FD | 	jmp	#LR__3065
220e8                 | LR__3059
220e8     00 1E 06 F6 | 	mov	local01, #0
220ec     08 4E 05 F1 | 	add	fp, #8
220f0     A7 20 02 FB | 	rdlong	local02, fp
220f4     1C 20 46 F0 | 	shr	local02, #28
220f8     01 20 0E F5 | 	and	local02, #1 wz
220fc     01 1E 06 A6 |  if_e	mov	local01, #1
22100     2C 4E 05 F1 | 	add	fp, #44
22104     A7 1E 62 FC | 	wrlong	local01, fp
22108     14 4E 85 F1 | 	sub	fp, #20
2210c     A7 1E 02 FB | 	rdlong	local01, fp
22110     98 4E 05 F1 | 	add	fp, #152
22114     A7 22 02 FB | 	rdlong	local03, fp
22118     B8 4E 85 F1 | 	sub	fp, #184
2211c     11 1F 52 F2 | 	cmps	local01, local03 wc
22120     18 00 90 3D |  if_ae	jmp	#LR__3060
22124     20 4E 05 F1 | 	add	fp, #32
22128     A7 24 02 FB | 	rdlong	local04, fp
2212c     20 4E 85 F1 | 	sub	fp, #32
22130     FF FF 7F FF 
22134     FC 25 56 F2 | 	cmps	local04, ##-4 wc
22138     10 00 90 3D |  if_ae	jmp	#LR__3061
2213c                 | LR__3060
2213c     24 4E 05 F1 | 	add	fp, #36
22140     A7 02 68 FC | 	wrlong	#1, fp
22144     24 4E 85 F1 | 	sub	fp, #36
22148     C8 00 90 FD | 	jmp	#LR__3065
2214c                 | LR__3061
2214c     B8 4E 05 F1 | 	add	fp, #184
22150     A7 24 02 FB | 	rdlong	local04, fp
22154     98 4E 85 F1 | 	sub	fp, #152
22158     A7 22 02 FB | 	rdlong	local03, fp
2215c     11 25 82 F1 | 	sub	local04, local03
22160     98 4E 05 F1 | 	add	fp, #152
22164     A7 24 62 FC | 	wrlong	local04, fp
22168     AC 4E 85 F1 | 	sub	fp, #172
2216c     A7 12 02 FB | 	rdlong	arg01, fp
22170     08 4E 05 F1 | 	add	fp, #8
22174     A7 14 02 F6 | 	mov	arg02, fp
22178     0C 4E 05 F1 | 	add	fp, #12
2217c     A7 16 02 F6 | 	mov	arg03, fp
22180     12 19 62 F6 | 	neg	arg04, local04
22184     04 4E 85 F1 | 	sub	fp, #4
22188     A7 1A 02 FB | 	rdlong	arg05, fp
2218c     1C 4E 85 F1 | 	sub	fp, #28
22190     88 3F B0 FD | 	call	#__system__disassemble_0498
22194     7C 00 90 FD | 	jmp	#LR__3065
22198                 | LR__3062
22198     24 4E 05 F1 | 	add	fp, #36
2219c     A7 1E 0A FB | 	rdlong	local01, fp wz
221a0     24 4E 85 F1 | 	sub	fp, #36
221a4     34 00 90 AD |  if_e	jmp	#LR__3063
221a8     0C 4E 05 F1 | 	add	fp, #12
221ac     A7 12 02 FB | 	rdlong	arg01, fp
221b0     08 4E 05 F1 | 	add	fp, #8
221b4     A7 14 02 F6 | 	mov	arg02, fp
221b8     0C 4E 05 F1 | 	add	fp, #12
221bc     A7 16 02 F6 | 	mov	arg03, fp
221c0     98 4E 05 F1 | 	add	fp, #152
221c4     A7 18 02 FB | 	rdlong	arg04, fp
221c8     9C 4E 85 F1 | 	sub	fp, #156
221cc     A7 1A 02 FB | 	rdlong	arg05, fp
221d0     1C 4E 85 F1 | 	sub	fp, #28
221d4     44 3F B0 FD | 	call	#__system__disassemble_0498
221d8     38 00 90 FD | 	jmp	#LR__3064
221dc                 | LR__3063
221dc     0C 4E 05 F1 | 	add	fp, #12
221e0     A7 12 02 FB | 	rdlong	arg01, fp
221e4     08 4E 05 F1 | 	add	fp, #8
221e8     A7 14 02 F6 | 	mov	arg02, fp
221ec     0C 4E 05 F1 | 	add	fp, #12
221f0     A7 16 02 F6 | 	mov	arg03, fp
221f4     98 4E 05 F1 | 	add	fp, #152
221f8     A7 24 02 FB | 	rdlong	local04, fp
221fc     01 24 06 F1 | 	add	local04, #1
22200     12 19 62 F6 | 	neg	arg04, local04
22204     9C 4E 85 F1 | 	sub	fp, #156
22208     A7 1A 02 FB | 	rdlong	arg05, fp
2220c     1C 4E 85 F1 | 	sub	fp, #28
22210     08 3F B0 FD | 	call	#__system__disassemble_0498
22214                 | LR__3064
22214                 | LR__3065
22214     1C 4E 05 F1 | 	add	fp, #28
22218     A7 1E 02 FB | 	rdlong	local01, fp
2221c     1C 4E 85 F1 | 	sub	fp, #28
22220     02 1E 0E F2 | 	cmp	local01, #2 wz
22224     4C 00 90 5D |  if_ne	jmp	#LR__3068
22228     1C 4E 05 F1 | 	add	fp, #28
2222c     A7 20 68 FC | 	wrlong	#16, fp
22230     1C 4E 85 F1 | 	sub	fp, #28
22234                 | LR__3066
22234     14 4E 05 F1 | 	add	fp, #20
22238     A7 1E 0A FB | 	rdlong	local01, fp wz
2223c     14 4E 85 F1 | 	sub	fp, #20
22240     30 00 90 AD |  if_e	jmp	#LR__3067
22244     14 4E 05 F1 | 	add	fp, #20
22248     A7 22 02 FB | 	rdlong	local03, fp
2224c     14 4E 85 F1 | 	sub	fp, #20
22250     00 80 00 FF 
22254     00 22 16 F2 | 	cmp	local03, ##16777216 wc
22258     18 00 90 3D |  if_ae	jmp	#LR__3067
2225c     14 4E 05 F1 | 	add	fp, #20
22260     A7 1E 02 FB | 	rdlong	local01, fp
22264     01 1E 66 F0 | 	shl	local01, #1
22268     A7 1E 62 FC | 	wrlong	local01, fp
2226c     14 4E 85 F1 | 	sub	fp, #20
22270     C0 FF 9F FD | 	jmp	#LR__3066
22274                 | LR__3067
22274                 | LR__3068
22274     70 4E 05 F1 | 	add	fp, #112
22278     A7 12 02 F6 | 	mov	arg01, fp
2227c     5C 4E 85 F1 | 	sub	fp, #92
22280     A7 14 02 FB | 	rdlong	arg02, fp
22284     08 4E 05 F1 | 	add	fp, #8
22288     A7 16 02 FB | 	rdlong	arg03, fp
2228c     A0 4E 05 F1 | 	add	fp, #160
22290     A7 1A 02 FB | 	rdlong	arg05, fp
22294     BC 4E 85 F1 | 	sub	fp, #188
22298     01 18 06 F6 | 	mov	arg04, #1
2229c     08 3E B0 FD | 	call	#__system___uitoa
222a0     58 4E 05 F1 | 	add	fp, #88
222a4     A7 FA 61 FC | 	wrlong	result1, fp
222a8     38 4E 85 F1 | 	sub	fp, #56
222ac     A7 1E 02 FB | 	rdlong	local01, fp
222b0     20 4E 85 F1 | 	sub	fp, #32
222b4     00 1E 56 F2 | 	cmps	local01, #0 wc
222b8     50 00 90 3D |  if_ae	jmp	#LR__3069
222bc     60 4E 05 F1 | 	add	fp, #96
222c0     A7 5A 68 FC | 	wrlong	#45, fp
222c4     50 4E 05 F1 | 	add	fp, #80
222c8     A7 12 02 F6 | 	mov	arg01, fp
222cc     90 4E 85 F1 | 	sub	fp, #144
222d0     A7 22 02 FB | 	rdlong	local03, fp
222d4     11 15 62 F6 | 	neg	arg02, local03
222d8     18 4E 05 F1 | 	add	fp, #24
222dc     A7 18 02 FB | 	rdlong	arg04, fp
222e0     84 4E 05 F1 | 	add	fp, #132
222e4     A7 28 02 FB | 	rdlong	local06, fp
222e8     BC 4E 85 F1 | 	sub	fp, #188
222ec     14 25 02 F6 | 	mov	local04, local06
222f0     0A 16 06 F6 | 	mov	arg03, #10
222f4     12 1B 02 F6 | 	mov	arg05, local04
222f8     AC 3D B0 FD | 	call	#__system___uitoa
222fc     5C 4E 05 F1 | 	add	fp, #92
22300     A7 FA 61 FC | 	wrlong	result1, fp
22304     5C 4E 85 F1 | 	sub	fp, #92
22308     48 00 90 FD | 	jmp	#LR__3070
2230c                 | LR__3069
2230c     60 4E 05 F1 | 	add	fp, #96
22310     A7 56 68 FC | 	wrlong	#43, fp
22314     50 4E 05 F1 | 	add	fp, #80
22318     A7 12 02 F6 | 	mov	arg01, fp
2231c     90 4E 85 F1 | 	sub	fp, #144
22320     A7 14 02 FB | 	rdlong	arg02, fp
22324     18 4E 05 F1 | 	add	fp, #24
22328     A7 18 02 FB | 	rdlong	arg04, fp
2232c     84 4E 05 F1 | 	add	fp, #132
22330     A7 28 02 FB | 	rdlong	local06, fp
22334     BC 4E 85 F1 | 	sub	fp, #188
22338     14 25 02 F6 | 	mov	local04, local06
2233c     0A 16 06 F6 | 	mov	arg03, #10
22340     12 1B 02 F6 | 	mov	arg05, local04
22344     60 3D B0 FD | 	call	#__system___uitoa
22348     5C 4E 05 F1 | 	add	fp, #92
2234c     A7 FA 61 FC | 	wrlong	result1, fp
22350     5C 4E 85 F1 | 	sub	fp, #92
22354                 | LR__3070
22354     24 4E 05 F1 | 	add	fp, #36
22358     A7 1E 0A FB | 	rdlong	local01, fp wz
2235c     24 4E 85 F1 | 	sub	fp, #36
22360     2C 00 90 AD |  if_e	jmp	#LR__3071
22364     50 4E 05 F1 | 	add	fp, #80
22368     A7 00 68 FC | 	wrlong	#0, fp
2236c     04 4E 85 F1 | 	sub	fp, #4
22370     A7 00 68 FC | 	wrlong	#0, fp
22374     6C 4E 05 F1 | 	add	fp, #108
22378     A7 1E 02 FB | 	rdlong	local01, fp
2237c     01 1E 06 F1 | 	add	local01, #1
22380     64 4E 85 F1 | 	sub	fp, #100
22384     A7 1E 62 FC | 	wrlong	local01, fp
22388     54 4E 85 F1 | 	sub	fp, #84
2238c     88 00 90 FD | 	jmp	#LR__3074
22390                 | LR__3071
22390     20 4E 05 F1 | 	add	fp, #32
22394     A7 1E 02 FB | 	rdlong	local01, fp
22398     20 4E 85 F1 | 	sub	fp, #32
2239c     00 1E 56 F2 | 	cmps	local01, #0 wc
223a0     40 00 90 3D |  if_ae	jmp	#LR__3072
223a4     20 4E 05 F1 | 	add	fp, #32
223a8     A7 20 02 FB | 	rdlong	local02, fp
223ac     30 4E 05 F1 | 	add	fp, #48
223b0     A7 20 62 FC | 	wrlong	local02, fp
223b4     04 4E 85 F1 | 	sub	fp, #4
223b8     A7 20 62 FC | 	wrlong	local02, fp
223bc     2C 4E 85 F1 | 	sub	fp, #44
223c0     A7 1E 02 FB | 	rdlong	local01, fp
223c4     98 4E 05 F1 | 	add	fp, #152
223c8     A7 22 02 FB | 	rdlong	local03, fp
223cc     11 1F 02 F1 | 	add	local01, local03
223d0     01 1E 06 F1 | 	add	local01, #1
223d4     64 4E 85 F1 | 	sub	fp, #100
223d8     A7 1E 62 FC | 	wrlong	local01, fp
223dc     54 4E 85 F1 | 	sub	fp, #84
223e0     34 00 90 FD | 	jmp	#LR__3073
223e4                 | LR__3072
223e4     4C 4E 05 F1 | 	add	fp, #76
223e8     A7 00 68 FC | 	wrlong	#0, fp
223ec     2C 4E 85 F1 | 	sub	fp, #44
223f0     A7 1E 02 FB | 	rdlong	local01, fp
223f4     30 4E 05 F1 | 	add	fp, #48
223f8     A7 1E 62 FC | 	wrlong	local01, fp
223fc     68 4E 05 F1 | 	add	fp, #104
22400     A7 22 02 FB | 	rdlong	local03, fp
22404     11 1F 02 F1 | 	add	local01, local03
22408     01 1E 06 F1 | 	add	local01, #1
2240c     64 4E 85 F1 | 	sub	fp, #100
22410     A7 1E 62 FC | 	wrlong	local01, fp
22414     54 4E 85 F1 | 	sub	fp, #84
22418                 | LR__3073
22418                 | LR__3074
22418     54 4E 05 F1 | 	add	fp, #84
2241c     A7 1E 02 FB | 	rdlong	local01, fp
22420     08 4E 85 F1 | 	sub	fp, #8
22424     A7 22 02 FB | 	rdlong	local03, fp
22428     11 1F 82 F1 | 	sub	local01, local03
2242c     01 1E 06 F1 | 	add	local01, #1
22430     24 4E 85 F1 | 	sub	fp, #36
22434     A7 1E 62 FC | 	wrlong	local01, fp
22438     04 4E 05 F1 | 	add	fp, #4
2243c     A7 1E 0A FB | 	rdlong	local01, fp wz
22440     2C 4E 85 F1 | 	sub	fp, #44
22444     28 4E 05 51 |  if_ne	add	fp, #40
22448     A7 22 02 5B |  if_ne	rdlong	local03, fp
2244c     01 22 06 51 |  if_ne	add	local03, #1
22450     A7 22 62 5C |  if_ne	wrlong	local03, fp
22454     28 4E 85 51 |  if_ne	sub	fp, #40
22458     1C 4E 05 F1 | 	add	fp, #28
2245c     A7 1E 02 FB | 	rdlong	local01, fp
22460     1C 4E 85 F1 | 	sub	fp, #28
22464     10 1E 0E F2 | 	cmp	local01, #16 wz
22468     28 4E 05 A1 |  if_e	add	fp, #40
2246c     A7 1E 02 AB |  if_e	rdlong	local01, fp
22470     02 1E 06 A1 |  if_e	add	local01, #2
22474     A7 1E 62 AC |  if_e	wrlong	local01, fp
22478     28 4E 85 A1 |  if_e	sub	fp, #40
2247c     24 4E 05 F1 | 	add	fp, #36
22480     A7 1E 0A FB | 	rdlong	local01, fp wz
22484     24 4E 85 F1 | 	sub	fp, #36
22488     28 00 90 AD |  if_e	jmp	#LR__3075
2248c     28 4E 05 F1 | 	add	fp, #40
22490     A7 1E 02 FB | 	rdlong	local01, fp
22494     02 22 06 F6 | 	mov	local03, #2
22498     34 4E 05 F1 | 	add	fp, #52
2249c     A7 26 02 FB | 	rdlong	local05, fp
224a0     13 23 02 F1 | 	add	local03, local05
224a4     11 1F 02 F1 | 	add	local01, local03
224a8     34 4E 85 F1 | 	sub	fp, #52
224ac     A7 1E 62 FC | 	wrlong	local01, fp
224b0     28 4E 85 F1 | 	sub	fp, #40
224b4                 | LR__3075
224b4     28 4E 05 F1 | 	add	fp, #40
224b8     A7 1E 02 FB | 	rdlong	local01, fp
224bc     28 4E 85 F1 | 	sub	fp, #40
224c0     41 1E 56 F2 | 	cmps	local01, #65 wc
224c4     01 FA 65 36 |  if_ae	neg	result1, #1
224c8     08 05 90 3D |  if_ae	jmp	#LR__3103
224cc     3C 4E 05 F1 | 	add	fp, #60
224d0     A7 1E 0A FB | 	rdlong	local01, fp wz
224d4     3C 4E 85 F1 | 	sub	fp, #60
224d8     60 00 90 AD |  if_e	jmp	#LR__3076
224dc     C0 4E 05 F1 | 	add	fp, #192
224e0     A7 12 02 FB | 	rdlong	arg01, fp
224e4     94 4E 85 F1 | 	sub	fp, #148
224e8     A7 14 02 FB | 	rdlong	arg02, fp
224ec     14 4E 05 F1 | 	add	fp, #20
224f0     A7 16 02 FB | 	rdlong	arg03, fp
224f4     40 4E 85 F1 | 	sub	fp, #64
224f8     14 3E B0 FD | 	call	#__system__emitsign_0500
224fc     18 4F 05 F1 | 	add	fp, #280
22500     A7 FA 61 FC | 	wrlong	result1, fp
22504     18 4F 85 F1 | 	sub	fp, #280
22508     00 FA 55 F2 | 	cmps	result1, #0 wc
2250c     18 4F 05 C1 |  if_b	add	fp, #280
22510     A7 FA 01 CB |  if_b	rdlong	result1, fp
22514     18 4F 85 C1 |  if_b	sub	fp, #280
22518     B8 04 90 CD |  if_b	jmp	#LR__3103
2251c     C0 4E 05 F1 | 	add	fp, #192
22520     A7 1E 02 FB | 	rdlong	local01, fp
22524     58 4E 05 F1 | 	add	fp, #88
22528     A7 22 02 FB | 	rdlong	local03, fp
2252c     11 1F 02 F1 | 	add	local01, local03
22530     58 4E 85 F1 | 	sub	fp, #88
22534     A7 1E 62 FC | 	wrlong	local01, fp
22538     C0 4E 85 F1 | 	sub	fp, #192
2253c                 | LR__3076
2253c     4C 4E 05 F1 | 	add	fp, #76
22540     A7 1E 02 FB | 	rdlong	local01, fp
22544     34 4E 85 F1 | 	sub	fp, #52
22548     A7 1E 62 FC | 	wrlong	local01, fp
2254c     18 4E 85 F1 | 	sub	fp, #24
22550     97 9E 48 FB | 	callpa	#(@LR__3082-@LR__3077)>>2,fcache_load_ptr_
22554                 | LR__3077
22554     18 4E 05 F1 | 	add	fp, #24
22558     A7 20 02 FB | 	rdlong	local02, fp
2255c     3C 4E 05 F1 | 	add	fp, #60
22560     A7 26 02 FB | 	rdlong	local05, fp
22564     54 4E 85 F1 | 	sub	fp, #84
22568     13 21 52 F2 | 	cmps	local02, local05 wc
2256c     20 01 90 3D |  if_ae	jmp	#LR__3083
22570     18 4E 05 F1 | 	add	fp, #24
22574     A7 28 02 FB | 	rdlong	local06, fp
22578     18 4E 85 F1 | 	sub	fp, #24
2257c     00 28 56 F2 | 	cmps	local06, #0 wc
22580     58 00 90 CD |  if_b	jmp	#LR__3078
22584     18 4E 05 F1 | 	add	fp, #24
22588     A7 28 02 FB | 	rdlong	local06, fp
2258c     40 4E 05 F1 | 	add	fp, #64
22590     A7 2A 02 FB | 	rdlong	local07, fp
22594     58 4E 85 F1 | 	sub	fp, #88
22598     15 29 52 F2 | 	cmps	local06, local07 wc
2259c     3C 00 90 3D |  if_ae	jmp	#LR__3078
225a0     C0 4E 05 F1 | 	add	fp, #192
225a4     A7 2C 02 FB | 	rdlong	local08, fp
225a8     16 2B 02 F6 | 	mov	local07, local08
225ac     01 2A 06 F1 | 	add	local07, #1
225b0     A7 2A 62 FC | 	wrlong	local07, fp
225b4     A8 4E 85 F1 | 	sub	fp, #168
225b8     A7 2A 02 FB | 	rdlong	local07, fp
225bc     15 2F 02 F6 | 	mov	local09, local07
225c0     58 4E 05 F1 | 	add	fp, #88
225c4     A7 30 02 F6 | 	mov	local10, fp
225c8     A7 2E 02 F1 | 	add	local09, fp
225cc     17 33 C2 FA | 	rdbyte	local11, local09
225d0     16 33 42 FC | 	wrbyte	local11, local08
225d4     70 4E 85 F1 | 	sub	fp, #112
225d8     20 00 90 FD | 	jmp	#LR__3079
225dc                 | LR__3078
225dc     C0 4E 05 F1 | 	add	fp, #192
225e0     A7 2C 02 FB | 	rdlong	local08, fp
225e4     16 2F 02 F6 | 	mov	local09, local08
225e8     01 2E 06 F1 | 	add	local09, #1
225ec     A7 2E 62 FC | 	wrlong	local09, fp
225f0     C0 4E 85 F1 | 	sub	fp, #192
225f4     30 2E 06 F6 | 	mov	local09, #48
225f8     16 61 48 FC | 	wrbyte	#48, local08
225fc                 | LR__3079
225fc     18 4E 05 F1 | 	add	fp, #24
22600     A7 28 02 FB | 	rdlong	local06, fp
22604     38 4E 05 F1 | 	add	fp, #56
22608     A7 34 02 FB | 	rdlong	local12, fp
2260c     50 4E 85 F1 | 	sub	fp, #80
22610     1A 29 0A F2 | 	cmp	local06, local12 wz
22614     5C 00 90 5D |  if_ne	jmp	#LR__3081
22618     10 4F 05 F1 | 	add	fp, #272
2261c     A7 2A 02 FB | 	rdlong	local07, fp
22620     10 4F 85 F1 | 	sub	fp, #272
22624     15 2F 0A F6 | 	mov	local09, local07 wz
22628     28 00 90 5D |  if_ne	jmp	#LR__3080
2262c     54 4E 05 F1 | 	add	fp, #84
22630     A7 32 02 FB | 	rdlong	local11, fp
22634     19 31 02 F6 | 	mov	local10, local11
22638     01 30 86 F1 | 	sub	local10, #1
2263c     3C 4E 85 F1 | 	sub	fp, #60
22640     A7 36 02 FB | 	rdlong	local13, fp
22644     18 4E 85 F1 | 	sub	fp, #24
22648     1B 39 02 F6 | 	mov	local14, local13
2264c     18 39 52 F2 | 	cmps	local14, local10 wc
22650     20 00 90 3D |  if_ae	jmp	#LR__3081
22654                 | LR__3080
22654     C0 4E 05 F1 | 	add	fp, #192
22658     A7 2C 02 FB | 	rdlong	local08, fp
2265c     16 35 02 F6 | 	mov	local12, local08
22660     01 34 06 F1 | 	add	local12, #1
22664     A7 34 62 FC | 	wrlong	local12, fp
22668     C0 4E 85 F1 | 	sub	fp, #192
2266c     2E 2E 06 F6 | 	mov	local09, #46
22670     16 5D 48 FC | 	wrbyte	#46, local08
22674                 | LR__3081
22674     18 4E 05 F1 | 	add	fp, #24
22678     A7 3A 02 FB | 	rdlong	local15, fp
2267c     1D 35 02 F6 | 	mov	local12, local15
22680     01 34 06 F1 | 	add	local12, #1
22684     A7 34 62 FC | 	wrlong	local12, fp
22688     18 4E 85 F1 | 	sub	fp, #24
2268c     C4 FE 9F FD | 	jmp	#LR__3077
22690                 | LR__3082
22690                 | LR__3083
22690     34 4E 05 F1 | 	add	fp, #52
22694     A7 1E 0A FB | 	rdlong	local01, fp wz
22698     34 4E 85 F1 | 	sub	fp, #52
2269c     A0 00 90 AD |  if_e	jmp	#LR__3087
226a0     C0 4E 05 F1 | 	add	fp, #192
226a4     A7 1E 02 FB | 	rdlong	local01, fp
226a8     01 1E 86 F1 | 	sub	local01, #1
226ac     A7 1E 62 FC | 	wrlong	local01, fp
226b0     C0 4E 85 F1 | 	sub	fp, #192
226b4     97 26 48 FB | 	callpa	#(@LR__3085-@LR__3084)>>2,fcache_load_ptr_
226b8                 | LR__3084
226b8     C0 4E 05 F1 | 	add	fp, #192
226bc     A7 1E 02 FB | 	rdlong	local01, fp
226c0     04 4E 05 F1 | 	add	fp, #4
226c4     A7 22 02 FB | 	rdlong	local03, fp
226c8     C4 4E 85 F1 | 	sub	fp, #196
226cc     11 1F 5A F2 | 	cmps	local01, local03 wcz
226d0     30 00 90 ED |  if_be	jmp	#LR__3086
226d4     C0 4E 05 F1 | 	add	fp, #192
226d8     A7 28 02 FB | 	rdlong	local06, fp
226dc     C0 4E 85 F1 | 	sub	fp, #192
226e0     14 25 C2 FA | 	rdbyte	local04, local06
226e4     30 24 0E F2 | 	cmp	local04, #48 wz
226e8     18 00 90 5D |  if_ne	jmp	#LR__3086
226ec     C0 4E 05 F1 | 	add	fp, #192
226f0     A7 1E 02 FB | 	rdlong	local01, fp
226f4     01 1E 86 F1 | 	sub	local01, #1
226f8     A7 1E 62 FC | 	wrlong	local01, fp
226fc     C0 4E 85 F1 | 	sub	fp, #192
22700     B4 FF 9F FD | 	jmp	#LR__3084
22704                 | LR__3085
22704                 | LR__3086
22704     C0 4E 05 F1 | 	add	fp, #192
22708     A7 20 02 FB | 	rdlong	local02, fp
2270c     C0 4E 85 F1 | 	sub	fp, #192
22710     10 1F C2 FA | 	rdbyte	local01, local02
22714     2E 1E 0E F2 | 	cmp	local01, #46 wz
22718     C0 4E 05 A1 |  if_e	add	fp, #192
2271c     A7 1E 02 AB |  if_e	rdlong	local01, fp
22720     01 1E 86 A1 |  if_e	sub	local01, #1
22724     A7 1E 62 AC |  if_e	wrlong	local01, fp
22728     C0 4E 85 A1 |  if_e	sub	fp, #192
2272c     C0 4E 05 F1 | 	add	fp, #192
22730     A7 22 02 FB | 	rdlong	local03, fp
22734     01 22 06 F1 | 	add	local03, #1
22738     A7 22 62 FC | 	wrlong	local03, fp
2273c     C0 4E 85 F1 | 	sub	fp, #192
22740                 | LR__3087
22740     24 4E 05 F1 | 	add	fp, #36
22744     A7 1E 0A FB | 	rdlong	local01, fp wz
22748     24 4E 85 F1 | 	sub	fp, #36
2274c     B4 00 90 AD |  if_e	jmp	#LR__3090
22750     C0 4E 05 F1 | 	add	fp, #192
22754     A7 20 02 FB | 	rdlong	local02, fp
22758     10 23 02 F6 | 	mov	local03, local02
2275c     01 22 06 F1 | 	add	local03, #1
22760     A7 22 62 FC | 	wrlong	local03, fp
22764     90 4E 85 F1 | 	sub	fp, #144
22768     A7 24 02 FB | 	rdlong	local04, fp
2276c     10 25 42 FC | 	wrbyte	local04, local02
22770     90 4E 05 F1 | 	add	fp, #144
22774     A7 20 02 FB | 	rdlong	local02, fp
22778     10 23 02 F6 | 	mov	local03, local02
2277c     01 22 06 F1 | 	add	local03, #1
22780     A7 22 62 FC | 	wrlong	local03, fp
22784     60 4E 85 F1 | 	sub	fp, #96
22788     A7 24 02 FB | 	rdlong	local04, fp
2278c     10 25 42 FC | 	wrbyte	local04, local02
22790     48 4E 85 F1 | 	sub	fp, #72
22794     A7 00 68 FC | 	wrlong	#0, fp
22798     18 4E 85 F1 | 	sub	fp, #24
2279c                 | LR__3088
2279c     18 4E 05 F1 | 	add	fp, #24
227a0     A7 20 02 FB | 	rdlong	local02, fp
227a4     44 4E 05 F1 | 	add	fp, #68
227a8     A7 26 02 FB | 	rdlong	local05, fp
227ac     5C 4E 85 F1 | 	sub	fp, #92
227b0     13 21 52 F2 | 	cmps	local02, local05 wc
227b4     4C 00 90 3D |  if_ae	jmp	#LR__3089
227b8     C0 4E 05 F1 | 	add	fp, #192
227bc     A7 2C 02 FB | 	rdlong	local08, fp
227c0     16 35 02 F6 | 	mov	local12, local08
227c4     01 34 06 F1 | 	add	local12, #1
227c8     A7 34 62 FC | 	wrlong	local12, fp
227cc     A8 4E 85 F1 | 	sub	fp, #168
227d0     A7 2A 02 FB | 	rdlong	local07, fp
227d4     15 2F 02 F6 | 	mov	local09, local07
227d8     98 4E 05 F1 | 	add	fp, #152
227dc     A7 30 02 F6 | 	mov	local10, fp
227e0     A7 2E 02 F1 | 	add	local09, fp
227e4     17 33 C2 FA | 	rdbyte	local11, local09
227e8     16 33 42 FC | 	wrbyte	local11, local08
227ec     98 4E 85 F1 | 	sub	fp, #152
227f0     A7 34 02 FB | 	rdlong	local12, fp
227f4     01 34 06 F1 | 	add	local12, #1
227f8     A7 34 62 FC | 	wrlong	local12, fp
227fc     18 4E 85 F1 | 	sub	fp, #24
22800     98 FF 9F FD | 	jmp	#LR__3088
22804                 | LR__3089
22804                 | LR__3090
22804     C0 4E 05 F1 | 	add	fp, #192
22808     A7 1E 02 FB | 	rdlong	local01, fp
2280c     C0 4E 85 F1 | 	sub	fp, #192
22810     0F 01 48 FC | 	wrbyte	#0, local01
22814                 | LR__3091
22814     6C 4E 05 F1 | 	add	fp, #108
22818     A7 1E 0A FB | 	rdlong	local01, fp wz
2281c     6C 4E 85 F1 | 	sub	fp, #108
22820     90 01 90 AD |  if_e	jmp	#LR__3102
22824     48 4E 05 F1 | 	add	fp, #72
22828     A7 22 0A FB | 	rdlong	local03, fp wz
2282c     48 4E 85 F1 | 	sub	fp, #72
22830     80 01 90 AD |  if_e	jmp	#LR__3102
22834     C4 4E 05 F1 | 	add	fp, #196
22838     A7 12 02 FB | 	rdlong	arg01, fp
2283c     C4 4E 85 F1 | 	sub	fp, #196
22840     09 3D 02 F6 | 	mov	local16, arg01
22844     97 06 48 FB | 	callpa	#(@LR__3093-@LR__3092)>>2,fcache_load_ptr_
22848                 | LR__3092
22848     1E FB C9 FA | 	rdbyte	result1, local16 wz
2284c     01 3C 06 51 |  if_ne	add	local16, #1
22850     F4 FF 9F 5D |  if_ne	jmp	#LR__3092
22854                 | LR__3093
22854     09 3D 82 F1 | 	sub	local16, arg01
22858     1E 25 02 F6 | 	mov	local04, local16
2285c     6C 4E 05 F1 | 	add	fp, #108
22860     A7 28 02 FB | 	rdlong	local06, fp
22864     6C 4E 85 F1 | 	sub	fp, #108
22868     14 25 5A F2 | 	cmps	local04, local06 wcz
2286c     44 01 90 ED |  if_be	jmp	#LR__3102
22870     C4 4E 05 F1 | 	add	fp, #196
22874     A7 1E 02 FB | 	rdlong	local01, fp
22878     5C 4E 05 F1 | 	add	fp, #92
2287c     A7 1E 62 FC | 	wrlong	local01, fp
22880     FC 4E 85 F1 | 	sub	fp, #252
22884     A7 1E 0A FB | 	rdlong	local01, fp wz
22888     24 4E 85 F1 | 	sub	fp, #36
2288c     20 00 90 AD |  if_e	jmp	#LR__3094
22890     B8 4E 05 F1 | 	add	fp, #184
22894     A7 00 68 FC | 	wrlong	#0, fp
22898     4C 4E 85 F1 | 	sub	fp, #76
2289c     A7 1E 02 FB | 	rdlong	local01, fp
228a0     B0 4E 05 F1 | 	add	fp, #176
228a4     A7 1E 62 FC | 	wrlong	local01, fp
228a8     1C 4F 85 F1 | 	sub	fp, #284
228ac     24 00 90 FD | 	jmp	#LR__3095
228b0                 | LR__3094
228b0     6C 4E 05 F1 | 	add	fp, #108
228b4     A7 1E 02 FB | 	rdlong	local01, fp
228b8     01 1E 86 F1 | 	sub	local01, #1
228bc     4C 4E 05 F1 | 	add	fp, #76
228c0     A7 22 02 FB | 	rdlong	local03, fp
228c4     11 1F 82 F1 | 	sub	local01, local03
228c8     64 4E 05 F1 | 	add	fp, #100
228cc     A7 1E 62 FC | 	wrlong	local01, fp
228d0     1C 4F 85 F1 | 	sub	fp, #284
228d4                 | LR__3095
228d4     97 20 48 FB | 	callpa	#(@LR__3097-@LR__3096)>>2,fcache_load_ptr_
228d8                 | LR__3096
228d8     1C 4F 05 F1 | 	add	fp, #284
228dc     A7 1E 0A FB | 	rdlong	local01, fp wz
228e0     1C 4F 85 F1 | 	sub	fp, #284
228e4     30 00 90 AD |  if_e	jmp	#LR__3098
228e8     20 4F 05 F1 | 	add	fp, #288
228ec     A7 20 02 FB | 	rdlong	local02, fp
228f0     10 23 02 F6 | 	mov	local03, local02
228f4     01 22 06 F1 | 	add	local03, #1
228f8     A7 22 62 FC | 	wrlong	local03, fp
228fc     10 55 48 FC | 	wrbyte	#42, local02
22900     04 4E 85 F1 | 	sub	fp, #4
22904     A7 1E 02 FB | 	rdlong	local01, fp
22908     01 1E 86 F1 | 	sub	local01, #1
2290c     A7 1E 62 FC | 	wrlong	local01, fp
22910     1C 4F 85 F1 | 	sub	fp, #284
22914     C0 FF 9F FD | 	jmp	#LR__3096
22918                 | LR__3097
22918                 | LR__3098
22918     B8 4E 05 F1 | 	add	fp, #184
2291c     A7 1E 0A FB | 	rdlong	local01, fp wz
22920     B8 4E 85 F1 | 	sub	fp, #184
22924     70 00 90 AD |  if_e	jmp	#LR__3101
22928     20 4F 05 F1 | 	add	fp, #288
2292c     A7 20 02 FB | 	rdlong	local02, fp
22930     10 23 02 F6 | 	mov	local03, local02
22934     01 22 06 F1 | 	add	local03, #1
22938     A7 22 62 FC | 	wrlong	local03, fp
2293c     10 5D 48 FC | 	wrbyte	#46, local02
22940     04 4E 85 F1 | 	sub	fp, #4
22944     A7 00 68 FC | 	wrlong	#0, fp
22948     1C 4F 85 F1 | 	sub	fp, #284
2294c                 | LR__3099
2294c     1C 4F 05 F1 | 	add	fp, #284
22950     A7 20 02 FB | 	rdlong	local02, fp
22954     64 4E 85 F1 | 	sub	fp, #100
22958     A7 26 02 FB | 	rdlong	local05, fp
2295c     B8 4E 85 F1 | 	sub	fp, #184
22960     13 21 52 F2 | 	cmps	local02, local05 wc
22964     30 00 90 3D |  if_ae	jmp	#LR__3100
22968     20 4F 05 F1 | 	add	fp, #288
2296c     A7 2C 02 FB | 	rdlong	local08, fp
22970     16 35 02 F6 | 	mov	local12, local08
22974     01 34 06 F1 | 	add	local12, #1
22978     A7 34 62 FC | 	wrlong	local12, fp
2297c     16 55 48 FC | 	wrbyte	#42, local08
22980     04 4E 85 F1 | 	sub	fp, #4
22984     A7 34 02 FB | 	rdlong	local12, fp
22988     01 34 06 F1 | 	add	local12, #1
2298c     A7 34 62 FC | 	wrlong	local12, fp
22990     1C 4F 85 F1 | 	sub	fp, #284
22994     B4 FF 9F FD | 	jmp	#LR__3099
22998                 | LR__3100
22998                 | LR__3101
22998     20 4F 05 F1 | 	add	fp, #288
2299c     A7 20 02 FB | 	rdlong	local02, fp
229a0     10 23 02 F6 | 	mov	local03, local02
229a4     01 22 06 F1 | 	add	local03, #1
229a8     A7 22 62 FC | 	wrlong	local03, fp
229ac     20 4F 85 F1 | 	sub	fp, #288
229b0     10 01 48 FC | 	wrbyte	#0, local02
229b4                 | LR__3102
229b4     04 4E 05 F1 | 	add	fp, #4
229b8     A7 12 02 FB | 	rdlong	arg01, fp
229bc     04 4E 05 F1 | 	add	fp, #4
229c0     A7 14 02 FB | 	rdlong	arg02, fp
229c4     BC 4E 05 F1 | 	add	fp, #188
229c8     A7 16 02 FB | 	rdlong	arg03, fp
229cc     C4 4E 85 F1 | 	sub	fp, #196
229d0     C4 EE BF FD | 	call	#__system___fmtstr
229d4                 | LR__3103
229d4     A7 F0 03 F6 | 	mov	ptra, fp
229d8     B2 00 A0 FD | 	call	#popregs_
229dc                 | __system___fmtfloat_ret
229dc     2D 00 64 FD | 	ret
229e0                 | 
229e0                 | __system__Left_S
229e0     04 4A 05 F6 | 	mov	COUNT_, #4
229e4     A8 00 A0 FD | 	call	#pushregs_
229e8     09 1F 02 F6 | 	mov	local01, arg01
229ec     0A 21 02 F6 | 	mov	local02, arg02
229f0     01 20 56 F2 | 	cmps	local02, #1 wc
229f4     80 01 00 CF 
229f8     B6 FB 05 C6 |  if_b	mov	result1, ##@LR__5023
229fc     5C 00 90 CD |  if_b	jmp	#LR__3113
22a00     0F 13 02 F6 | 	mov	arg01, local01
22a04     09 23 02 F6 | 	mov	local03, arg01
22a08     97 06 48 FB | 	callpa	#(@LR__3111-@LR__3110)>>2,fcache_load_ptr_
22a0c                 | LR__3110
22a0c     11 FB C9 FA | 	rdbyte	result1, local03 wz
22a10     01 22 06 51 |  if_ne	add	local03, #1
22a14     F4 FF 9F 5D |  if_ne	jmp	#LR__3110
22a18                 | LR__3111
22a18     09 23 82 F1 | 	sub	local03, arg01
22a1c     11 FB 01 F6 | 	mov	result1, local03
22a20     10 FB 59 F2 | 	cmps	result1, local02 wcz
22a24     0F FB 01 E6 |  if_be	mov	result1, local01
22a28     30 00 90 ED |  if_be	jmp	#LR__3113
22a2c     10 13 02 F6 | 	mov	arg01, local02
22a30     02 12 06 F1 | 	add	arg01, #2
22a34     08 1E B0 FD | 	call	#__system___gc_alloc_managed
22a38     FD 24 0A F6 | 	mov	local04, result1 wz
22a3c     18 00 90 AD |  if_e	jmp	#LR__3112
22a40     12 13 02 F6 | 	mov	arg01, local04
22a44     0F 15 02 F6 | 	mov	arg02, local01
22a48     10 17 02 F6 | 	mov	arg03, local02
22a4c     34 DE BF FD | 	call	#__system____builtin_memmove
22a50     12 21 02 F1 | 	add	local02, local04
22a54     10 01 48 FC | 	wrbyte	#0, local02
22a58                 | LR__3112
22a58     12 FB 01 F6 | 	mov	result1, local04
22a5c                 | LR__3113
22a5c     A7 F0 03 F6 | 	mov	ptra, fp
22a60     B2 00 A0 FD | 	call	#popregs_
22a64                 | __system__Left_S_ret
22a64     2D 00 64 FD | 	ret
22a68                 | 
22a68                 | __system__Right_S
22a68     05 4A 05 F6 | 	mov	COUNT_, #5
22a6c     A8 00 A0 FD | 	call	#pushregs_
22a70     09 1F 02 F6 | 	mov	local01, arg01
22a74     0A 21 02 F6 | 	mov	local02, arg02
22a78     01 20 56 F2 | 	cmps	local02, #1 wc
22a7c     80 01 00 CF 
22a80     B7 FB 05 C6 |  if_b	mov	result1, ##@LR__5024
22a84     64 00 90 CD |  if_b	jmp	#LR__3123
22a88     0F 13 02 F6 | 	mov	arg01, local01
22a8c     09 23 02 F6 | 	mov	local03, arg01
22a90     97 06 48 FB | 	callpa	#(@LR__3121-@LR__3120)>>2,fcache_load_ptr_
22a94                 | LR__3120
22a94     11 FB C9 FA | 	rdbyte	result1, local03 wz
22a98     01 22 06 51 |  if_ne	add	local03, #1
22a9c     F4 FF 9F 5D |  if_ne	jmp	#LR__3120
22aa0                 | LR__3121
22aa0     09 23 82 F1 | 	sub	local03, arg01
22aa4     11 FB 01 F6 | 	mov	result1, local03
22aa8     FD 24 02 F6 | 	mov	local04, result1
22aac     10 25 5A F2 | 	cmps	local04, local02 wcz
22ab0     0F FB 01 E6 |  if_be	mov	result1, local01
22ab4     34 00 90 ED |  if_be	jmp	#LR__3123
22ab8     10 13 02 F6 | 	mov	arg01, local02
22abc     02 12 06 F1 | 	add	arg01, #2
22ac0     7C 1D B0 FD | 	call	#__system___gc_alloc_managed
22ac4     FD 26 0A F6 | 	mov	local05, result1 wz
22ac8     1C 00 90 AD |  if_e	jmp	#LR__3122
22acc     10 25 82 F1 | 	sub	local04, local02
22ad0     0F 25 02 F1 | 	add	local04, local01
22ad4     01 20 06 F1 | 	add	local02, #1
22ad8     13 13 02 F6 | 	mov	arg01, local05
22adc     12 15 02 F6 | 	mov	arg02, local04
22ae0     10 17 02 F6 | 	mov	arg03, local02
22ae4     9C DD BF FD | 	call	#__system____builtin_memmove
22ae8                 | LR__3122
22ae8     13 FB 01 F6 | 	mov	result1, local05
22aec                 | LR__3123
22aec     A7 F0 03 F6 | 	mov	ptra, fp
22af0     B2 00 A0 FD | 	call	#popregs_
22af4                 | __system__Right_S_ret
22af4     2D 00 64 FD | 	ret
22af8                 | 
22af8                 | __system__Mid_S
22af8     05 4A 05 F6 | 	mov	COUNT_, #5
22afc     A8 00 A0 FD | 	call	#pushregs_
22b00     09 1F 02 F6 | 	mov	local01, arg01
22b04     0A 21 02 F6 | 	mov	local02, arg02
22b08     01 16 56 F2 | 	cmps	arg03, #1 wc
22b0c     80 01 00 CF 
22b10     B8 FB 05 C6 |  if_b	mov	result1, ##@LR__5025
22b14     80 00 90 CD |  if_b	jmp	#LR__3133
22b18     01 20 86 F1 | 	sub	local02, #1
22b1c     00 20 56 F3 | 	fges	local02, #0 wc
22b20     0F 13 02 F6 | 	mov	arg01, local01
22b24     09 23 02 F6 | 	mov	local03, arg01
22b28     97 06 48 FB | 	callpa	#(@LR__3131-@LR__3130)>>2,fcache_load_ptr_
22b2c                 | LR__3130
22b2c     11 FB C9 FA | 	rdbyte	result1, local03 wz
22b30     01 22 06 51 |  if_ne	add	local03, #1
22b34     F4 FF 9F 5D |  if_ne	jmp	#LR__3130
22b38                 | LR__3131
22b38     09 23 82 F1 | 	sub	local03, arg01
22b3c     11 FB 01 F6 | 	mov	result1, local03
22b40     FD 14 02 F6 | 	mov	arg02, result1
22b44     10 15 52 F2 | 	cmps	arg02, local02 wc
22b48     80 01 00 CF 
22b4c     B9 FB 05 C6 |  if_b	mov	result1, ##@LR__5026
22b50     44 00 90 CD |  if_b	jmp	#LR__3133
22b54     0A 25 02 F6 | 	mov	local04, arg02
22b58     10 25 82 F1 | 	sub	local04, local02
22b5c     0B 25 5A F2 | 	cmps	local04, arg03 wcz
22b60     0B 25 02 16 |  if_a	mov	local04, arg03
22b64     12 13 02 F6 | 	mov	arg01, local04
22b68     02 12 06 F1 | 	add	arg01, #2
22b6c     D0 1C B0 FD | 	call	#__system___gc_alloc_managed
22b70     FD 26 0A F6 | 	mov	local05, result1 wz
22b74     1C 00 90 AD |  if_e	jmp	#LR__3132
22b78     0F 21 02 F1 | 	add	local02, local01
22b7c     13 13 02 F6 | 	mov	arg01, local05
22b80     10 15 02 F6 | 	mov	arg02, local02
22b84     12 17 02 F6 | 	mov	arg03, local04
22b88     F8 DC BF FD | 	call	#__system____builtin_memmove
22b8c     13 25 02 F1 | 	add	local04, local05
22b90     12 01 48 FC | 	wrbyte	#0, local04
22b94                 | LR__3132
22b94     13 FB 01 F6 | 	mov	result1, local05
22b98                 | LR__3133
22b98     A7 F0 03 F6 | 	mov	ptra, fp
22b9c     B2 00 A0 FD | 	call	#popregs_
22ba0                 | __system__Mid_S_ret
22ba0     2D 00 64 FD | 	ret
22ba4                 | 
22ba4                 | __system__Chr_S
22ba4     01 4A 05 F6 | 	mov	COUNT_, #1
22ba8     A8 00 A0 FD | 	call	#pushregs_
22bac     09 1F 02 F6 | 	mov	local01, arg01
22bb0     03 12 06 F6 | 	mov	arg01, #3
22bb4     88 1C B0 FD | 	call	#__system___gc_alloc_managed
22bb8     00 FA 4D F2 | 	cmps	result1, #0 wz
22bbc     FD 1E 42 5C |  if_ne	wrbyte	local01, result1
22bc0     01 FA 05 51 |  if_ne	add	result1, #1
22bc4     FD 00 48 5C |  if_ne	wrbyte	#0, result1
22bc8     01 FA 85 51 |  if_ne	sub	result1, #1
22bcc     A7 F0 03 F6 | 	mov	ptra, fp
22bd0     B2 00 A0 FD | 	call	#popregs_
22bd4                 | __system__Chr_S_ret
22bd4     2D 00 64 FD | 	ret
22bd8                 | 
22bd8                 | __system__str_S
22bd8     02 4A 05 F6 | 	mov	COUNT_, #2
22bdc     A8 00 A0 FD | 	call	#pushregs_
22be0     09 1F 02 F6 | 	mov	local01, arg01
22be4     10 12 06 F6 | 	mov	arg01, #16
22be8     54 1C B0 FD | 	call	#__system___gc_alloc_managed
22bec     FD 20 0A F6 | 	mov	local02, result1 wz
22bf0     30 00 90 AD |  if_e	jmp	#LR__3140
22bf4     F8 13 02 F6 | 	mov	arg01, ptra
22bf8     08 F0 07 F1 | 	add	ptra, #8
22bfc     09 21 62 FC | 	wrlong	local02, arg01
22c00     04 12 06 F1 | 	add	arg01, #4
22c04     09 01 68 FC | 	wrlong	#0, arg01
22c08     04 12 86 F1 | 	sub	arg01, #4
22c0c     00 A0 04 FF 
22c10     00 12 46 F5 | 	or	arg01, ##155189248
22c14     00 14 06 F6 | 	mov	arg02, #0
22c18     0F 17 02 F6 | 	mov	arg03, local01
22c1c     67 18 06 F6 | 	mov	arg04, #103
22c20     90 EE BF FD | 	call	#__system___fmtfloat
22c24                 | LR__3140
22c24     10 FB 01 F6 | 	mov	result1, local02
22c28     A7 F0 03 F6 | 	mov	ptra, fp
22c2c     B2 00 A0 FD | 	call	#popregs_
22c30                 | __system__str_S_ret
22c30     2D 00 64 FD | 	ret
22c34                 | 
22c34                 | __system__Number_S
22c34     08 4A 05 F6 | 	mov	COUNT_, #8
22c38     A8 00 A0 FD | 	call	#pushregs_
22c3c     09 1F 02 F6 | 	mov	local01, arg01
22c40     0A 21 0A F6 | 	mov	local02, arg02 wz
22c44     0B 23 02 F6 | 	mov	local03, arg03
22c48     3C 00 90 5D |  if_ne	jmp	#LR__3152
22c4c     01 20 06 F6 | 	mov	local02, #1
22c50     11 25 02 F6 | 	mov	local04, local03
22c54     01 26 06 F6 | 	mov	local05, #1
22c58     97 16 48 FB | 	callpa	#(@LR__3151-@LR__3150)>>2,fcache_load_ptr_
22c5c                 | LR__3150
22c5c     00 28 06 F6 | 	mov	local06, #0
22c60     0F 25 1A F2 | 	cmp	local04, local01 wcz
22c64     01 28 66 E6 |  if_be	neg	local06, #1
22c68     12 27 12 F2 | 	cmp	local05, local04 wc
22c6c     15 2B A2 F1 | 	subx	local07, local07
22c70     15 29 CA F7 | 	test	local06, local07 wz
22c74     11 25 02 5D |  if_ne	qmul	local04, local03
22c78     12 27 02 56 |  if_ne	mov	local05, local04
22c7c     01 20 06 51 |  if_ne	add	local02, #1
22c80     18 24 62 5D |  if_ne	getqx	local04
22c84     D4 FF 9F 5D |  if_ne	jmp	#LR__3150
22c88                 | LR__3151
22c88                 | LR__3152
22c88     20 20 36 F3 | 	fle	local02, #32 wc
22c8c     10 13 02 F6 | 	mov	arg01, local02
22c90     02 12 06 F1 | 	add	arg01, #2
22c94     A8 1B B0 FD | 	call	#__system___gc_alloc_managed
22c98     FD 28 02 F6 | 	mov	local06, result1
22c9c     10 2B 02 F6 | 	mov	local07, local02
22ca0     14 2B 02 F1 | 	add	local07, local06
22ca4     15 01 48 FC | 	wrbyte	#0, local07
22ca8     97 1A 48 FB | 	callpa	#(@LR__3154-@LR__3153)>>2,fcache_load_ptr_
22cac                 | LR__3153
22cac     01 20 16 F2 | 	cmp	local02, #1 wc
22cb0     2C 00 90 CD |  if_b	jmp	#LR__3155
22cb4     11 1F 12 FD | 	qdiv	local01, local03
22cb8     01 20 86 F1 | 	sub	local02, #1
22cbc     10 2B 02 F6 | 	mov	local07, local02
22cc0     14 2B 02 F1 | 	add	local07, local06
22cc4     19 2C 62 FD | 	getqy	local08
22cc8     0A 2C 16 F2 | 	cmp	local08, #10 wc
22ccc     30 2C 06 C1 |  if_b	add	local08, #48
22cd0     37 2C 06 31 |  if_ae	add	local08, #55
22cd4     15 2D 42 FC | 	wrbyte	local08, local07
22cd8     18 1E 62 FD | 	getqx	local01
22cdc     CC FF 9F FD | 	jmp	#LR__3153
22ce0                 | LR__3154
22ce0                 | LR__3155
22ce0     14 FB 01 F6 | 	mov	result1, local06
22ce4     A7 F0 03 F6 | 	mov	ptra, fp
22ce8     B2 00 A0 FD | 	call	#popregs_
22cec                 | __system__Number_S_ret
22cec     2D 00 64 FD | 	ret
22cf0                 | 
22cf0                 | __system__LCase_S
22cf0     07 4A 05 F6 | 	mov	COUNT_, #7
22cf4     A8 00 A0 FD | 	call	#pushregs_
22cf8     09 1F 02 F6 | 	mov	local01, arg01
22cfc     09 21 02 F6 | 	mov	local02, arg01
22d00     97 06 48 FB | 	callpa	#(@LR__3161-@LR__3160)>>2,fcache_load_ptr_
22d04                 | LR__3160
22d04     10 FB C9 FA | 	rdbyte	result1, local02 wz
22d08     01 20 06 51 |  if_ne	add	local02, #1
22d0c     F4 FF 9F 5D |  if_ne	jmp	#LR__3160
22d10                 | LR__3161
22d10     09 21 82 F1 | 	sub	local02, arg01
22d14     10 FB 01 F6 | 	mov	result1, local02
22d18     FD 20 0A F6 | 	mov	local02, result1 wz
22d1c     80 01 00 AF 
22d20     BA FB 05 A6 |  if_e	mov	result1, ##@LR__5027
22d24     7C 00 90 AD |  if_e	jmp	#LR__3167
22d28     10 13 02 F6 | 	mov	arg01, local02
22d2c     02 12 06 F1 | 	add	arg01, #2
22d30     0C 1B B0 FD | 	call	#__system___gc_alloc_managed
22d34     FD 22 0A F6 | 	mov	local03, result1 wz
22d38     64 00 90 AD |  if_e	jmp	#LR__3166
22d3c     01 24 66 F6 | 	neg	local04, #1
22d40     97 26 48 FB | 	callpa	#(@LR__3165-@LR__3162)>>2,fcache_load_ptr_
22d44                 | LR__3162
22d44     01 24 06 F1 | 	add	local04, #1
22d48     12 27 02 F6 | 	mov	local05, local04
22d4c     0F 27 02 F1 | 	add	local05, local01
22d50     13 29 C2 FA | 	rdbyte	local06, local05
22d54     41 28 56 F2 | 	cmps	local06, #65 wc
22d58     18 00 90 CD |  if_b	jmp	#LR__3163
22d5c     5B 28 56 F2 | 	cmps	local06, #91 wc
22d60     12 2B 02 C6 |  if_b	mov	local07, local04
22d64     11 2B 02 C1 |  if_b	add	local07, local03
22d68     20 28 06 C1 |  if_b	add	local06, #32
22d6c     15 29 42 CC |  if_b	wrbyte	local06, local07
22d70     0C 00 90 CD |  if_b	jmp	#LR__3164
22d74                 | LR__3163
22d74     12 2B 02 F6 | 	mov	local07, local04
22d78     11 2B 02 F1 | 	add	local07, local03
22d7c     15 29 42 FC | 	wrbyte	local06, local07
22d80                 | LR__3164
22d80     10 29 02 F6 | 	mov	local06, local02
22d84     01 28 86 F1 | 	sub	local06, #1
22d88     14 25 0A F2 | 	cmp	local04, local06 wz
22d8c     B4 FF 9F 5D |  if_ne	jmp	#LR__3162
22d90                 | LR__3165
22d90     11 21 02 F1 | 	add	local02, local03
22d94     10 01 48 FC | 	wrbyte	#0, local02
22d98     11 FB 01 F6 | 	mov	result1, local03
22d9c     04 00 90 FD | 	jmp	#LR__3167
22da0                 | LR__3166
22da0     11 FB 01 F6 | 	mov	result1, local03
22da4                 | LR__3167
22da4     A7 F0 03 F6 | 	mov	ptra, fp
22da8     B2 00 A0 FD | 	call	#popregs_
22dac                 | __system__LCase_S_ret
22dac     2D 00 64 FD | 	ret
22db0                 | 
22db0                 | __system__LTrim_S
22db0     05 4A 05 F6 | 	mov	COUNT_, #5
22db4     A8 00 A0 FD | 	call	#pushregs_
22db8     09 1F 02 F6 | 	mov	local01, arg01
22dbc     09 21 02 F6 | 	mov	local02, arg01
22dc0     97 06 48 FB | 	callpa	#(@LR__3171-@LR__3170)>>2,fcache_load_ptr_
22dc4                 | LR__3170
22dc4     10 FB C9 FA | 	rdbyte	result1, local02 wz
22dc8     01 20 06 51 |  if_ne	add	local02, #1
22dcc     F4 FF 9F 5D |  if_ne	jmp	#LR__3170
22dd0                 | LR__3171
22dd0     09 21 82 F1 | 	sub	local02, arg01
22dd4     10 FB 01 F6 | 	mov	result1, local02
22dd8     FD 20 0A F6 | 	mov	local02, result1 wz
22ddc     80 01 00 AF 
22de0     BB FB 05 A6 |  if_e	mov	result1, ##@LR__5028
22de4     7C 00 90 AD |  if_e	jmp	#LR__3176
22de8     00 22 06 F6 | 	mov	local03, #0
22dec     10 25 02 F6 | 	mov	local04, local02
22df0                 | LR__3172
22df0     12 23 52 F2 | 	cmps	local03, local04 wc
22df4     68 00 90 3D |  if_ae	jmp	#LR__3175
22df8     11 17 02 F6 | 	mov	arg03, local03
22dfc     0F 17 02 F1 | 	add	arg03, local01
22e00     0B 17 C2 FA | 	rdbyte	arg03, arg03
22e04     20 16 0E F2 | 	cmp	arg03, #32 wz
22e08     4C 00 90 AD |  if_e	jmp	#LR__3174
22e0c     10 13 02 F6 | 	mov	arg01, local02
22e10     11 13 82 F1 | 	sub	arg01, local03
22e14     02 12 06 F1 | 	add	arg01, #2
22e18     24 1A B0 FD | 	call	#__system___gc_alloc_managed
22e1c     FD 26 0A F6 | 	mov	local05, result1 wz
22e20     2C 00 90 AD |  if_e	jmp	#LR__3173
22e24     11 15 02 F6 | 	mov	arg02, local03
22e28     0F 15 02 F1 | 	add	arg02, local01
22e2c     10 17 02 F6 | 	mov	arg03, local02
22e30     11 17 82 F1 | 	sub	arg03, local03
22e34     13 13 02 F6 | 	mov	arg01, local05
22e38     48 DA BF FD | 	call	#__system____builtin_memmove
22e3c     11 21 82 F1 | 	sub	local02, local03
22e40     13 21 02 F1 | 	add	local02, local05
22e44     10 01 48 FC | 	wrbyte	#0, local02
22e48     13 FB 01 F6 | 	mov	result1, local05
22e4c     14 00 90 FD | 	jmp	#LR__3176
22e50                 | LR__3173
22e50     13 FB 01 F6 | 	mov	result1, local05
22e54     0C 00 90 FD | 	jmp	#LR__3176
22e58                 | LR__3174
22e58     01 22 06 F1 | 	add	local03, #1
22e5c     90 FF 9F FD | 	jmp	#LR__3172
22e60                 | LR__3175
22e60     0F FB 01 F6 | 	mov	result1, local01
22e64                 | LR__3176
22e64     A7 F0 03 F6 | 	mov	ptra, fp
22e68     B2 00 A0 FD | 	call	#popregs_
22e6c                 | __system__LTrim_S_ret
22e6c     2D 00 64 FD | 	ret
22e70                 | 
22e70                 | __system__RTrim_S
22e70     04 4A 05 F6 | 	mov	COUNT_, #4
22e74     A8 00 A0 FD | 	call	#pushregs_
22e78     09 1F 02 F6 | 	mov	local01, arg01
22e7c     09 21 02 F6 | 	mov	local02, arg01
22e80     97 06 48 FB | 	callpa	#(@LR__3181-@LR__3180)>>2,fcache_load_ptr_
22e84                 | LR__3180
22e84     10 FB C9 FA | 	rdbyte	result1, local02 wz
22e88     01 20 06 51 |  if_ne	add	local02, #1
22e8c     F4 FF 9F 5D |  if_ne	jmp	#LR__3180
22e90                 | LR__3181
22e90     09 21 82 F1 | 	sub	local02, arg01
22e94     10 FB 01 F6 | 	mov	result1, local02
22e98     FD 20 0A F6 | 	mov	local02, result1 wz
22e9c     80 01 00 AF 
22ea0     BC FB 05 A6 |  if_e	mov	result1, ##@LR__5029
22ea4     74 00 90 AD |  if_e	jmp	#LR__3185
22ea8     10 23 02 F6 | 	mov	local03, local02
22eac     01 22 86 F1 | 	sub	local03, #1
22eb0                 | LR__3182
22eb0     11 15 02 F6 | 	mov	arg02, local03
22eb4     0F 15 02 F1 | 	add	arg02, local01
22eb8     0A 21 C2 FA | 	rdbyte	local02, arg02
22ebc     20 20 0E F2 | 	cmp	local02, #32 wz
22ec0     44 00 90 AD |  if_e	jmp	#LR__3184
22ec4     11 13 02 F6 | 	mov	arg01, local03
22ec8     02 12 06 F1 | 	add	arg01, #2
22ecc     70 19 B0 FD | 	call	#__system___gc_alloc_managed
22ed0     FD 24 0A F6 | 	mov	local04, result1 wz
22ed4     28 00 90 AD |  if_e	jmp	#LR__3183
22ed8     11 17 02 F6 | 	mov	arg03, local03
22edc     01 16 06 F1 | 	add	arg03, #1
22ee0     12 13 02 F6 | 	mov	arg01, local04
22ee4     0F 15 02 F6 | 	mov	arg02, local01
22ee8     98 D9 BF FD | 	call	#__system____builtin_memmove
22eec     01 22 06 F1 | 	add	local03, #1
22ef0     12 23 02 F1 | 	add	local03, local04
22ef4     11 01 48 FC | 	wrbyte	#0, local03
22ef8     12 FB 01 F6 | 	mov	result1, local04
22efc     1C 00 90 FD | 	jmp	#LR__3185
22f00                 | LR__3183
22f00     12 FB 01 F6 | 	mov	result1, local04
22f04     14 00 90 FD | 	jmp	#LR__3185
22f08                 | LR__3184
22f08     01 22 86 F1 | 	sub	local03, #1
22f0c     00 22 56 F2 | 	cmps	local03, #0 wc
22f10     9C FF 9F 3D |  if_ae	jmp	#LR__3182
22f14     80 01 00 FF 
22f18     BD FB 05 F6 | 	mov	result1, ##@LR__5030
22f1c                 | LR__3185
22f1c     A7 F0 03 F6 | 	mov	ptra, fp
22f20     B2 00 A0 FD | 	call	#popregs_
22f24                 | __system__RTrim_S_ret
22f24     2D 00 64 FD | 	ret
22f28                 | 
22f28                 | __system__Instr
22f28     07 4A 05 F6 | 	mov	COUNT_, #7
22f2c     A8 00 A0 FD | 	call	#pushregs_
22f30     09 1F 02 F6 | 	mov	local01, arg01
22f34     0A 21 02 F6 | 	mov	local02, arg02
22f38     0B 23 02 F6 | 	mov	local03, arg03
22f3c     11 13 02 F6 | 	mov	arg01, local03
22f40     09 25 02 F6 | 	mov	local04, arg01
22f44     97 06 48 FB | 	callpa	#(@LR__3191-@LR__3190)>>2,fcache_load_ptr_
22f48                 | LR__3190
22f48     12 FB C9 FA | 	rdbyte	result1, local04 wz
22f4c     01 24 06 51 |  if_ne	add	local04, #1
22f50     F4 FF 9F 5D |  if_ne	jmp	#LR__3190
22f54                 | LR__3191
22f54     09 25 82 F1 | 	sub	local04, arg01
22f58     12 27 02 F6 | 	mov	local05, local04
22f5c     10 13 02 F6 | 	mov	arg01, local02
22f60     09 25 02 F6 | 	mov	local04, arg01
22f64     97 06 48 FB | 	callpa	#(@LR__3193-@LR__3192)>>2,fcache_load_ptr_
22f68                 | LR__3192
22f68     12 FB C9 FA | 	rdbyte	result1, local04 wz
22f6c     01 24 06 51 |  if_ne	add	local04, #1
22f70     F4 FF 9F 5D |  if_ne	jmp	#LR__3192
22f74                 | LR__3193
22f74     09 25 82 F1 | 	sub	local04, arg01
22f78     12 FB 01 F6 | 	mov	result1, local04
22f7c     FD 18 0A F6 | 	mov	arg04, result1 wz
22f80     00 FA 05 A6 |  if_e	mov	result1, #0
22f84     98 00 90 AD |  if_e	jmp	#LR__3197
22f88     00 26 0E F2 | 	cmp	local05, #0 wz
22f8c     00 FA 05 A6 |  if_e	mov	result1, #0
22f90     8C 00 90 AD |  if_e	jmp	#LR__3197
22f94     0C 1F 5A F2 | 	cmps	local01, arg04 wcz
22f98     00 FA 05 16 |  if_a	mov	result1, #0
22f9c     80 00 90 1D |  if_a	jmp	#LR__3197
22fa0     01 1E 56 F2 | 	cmps	local01, #1 wc
22fa4     01 1E 06 C6 |  if_b	mov	local01, #1
22fa8     11 29 C2 FA | 	rdbyte	local06, local03
22fac     01 26 0E F2 | 	cmp	local05, #1 wz
22fb0     18 00 90 5D |  if_ne	jmp	#LR__3194
22fb4     10 13 02 F6 | 	mov	arg01, local02
22fb8     14 15 02 F6 | 	mov	arg02, local06
22fbc     0F 17 02 F6 | 	mov	arg03, local01
22fc0     00 18 06 F6 | 	mov	arg04, #0
22fc4     50 34 B0 FD | 	call	#__system____ScanForChar
22fc8     54 00 90 FD | 	jmp	#LR__3197
22fcc                 | LR__3194
22fcc     0F 2B 02 F6 | 	mov	local07, local01
22fd0                 | LR__3195
22fd0     10 13 02 F6 | 	mov	arg01, local02
22fd4     14 15 02 F6 | 	mov	arg02, local06
22fd8     15 17 02 F6 | 	mov	arg03, local07
22fdc     00 18 06 F6 | 	mov	arg04, #0
22fe0     34 34 B0 FD | 	call	#__system____ScanForChar
22fe4     FD 2A 0A F6 | 	mov	local07, result1 wz
22fe8     30 00 90 AD |  if_e	jmp	#LR__3196
22fec     13 17 02 F6 | 	mov	arg03, local05
22ff0     10 13 02 F6 | 	mov	arg01, local02
22ff4     15 15 02 F6 | 	mov	arg02, local07
22ff8     FC FA BF FD | 	call	#__system__Mid_S
22ffc     FD 12 02 F6 | 	mov	arg01, result1
23000     11 15 02 F6 | 	mov	arg02, local03
23004     84 D9 BF FD | 	call	#__system___string_cmp
23008     00 FA 0D F2 | 	cmp	result1, #0 wz
2300c     15 FB 01 A6 |  if_e	mov	result1, local07
23010     0C 00 90 AD |  if_e	jmp	#LR__3197
23014     13 2B 02 F1 | 	add	local07, local05
23018     B4 FF 9F FD | 	jmp	#LR__3195
2301c                 | LR__3196
2301c     00 FA 05 F6 | 	mov	result1, #0
23020                 | LR__3197
23020     A7 F0 03 F6 | 	mov	ptra, fp
23024     B2 00 A0 FD | 	call	#popregs_
23028                 | __system__Instr_ret
23028     2D 00 64 FD | 	ret
2302c                 | 
2302c                 | __system___strerror
2302c     00 12 56 F2 | 	cmps	arg01, #0 wc
23030     08 00 90 CD |  if_b	jmp	#LR__3200
23034     1A 12 56 F2 | 	cmps	arg01, #26 wc
23038     04 00 90 CD |  if_b	jmp	#LR__3201
2303c                 | LR__3200
2303c     19 12 06 F6 | 	mov	arg01, #25
23040                 | LR__3201
23040     02 12 66 F0 | 	shl	arg01, #2
23044     01 00 00 FF 
23048     D8 E6 05 F1 | 	add	ptr___system__dat__, ##728
2304c     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
23050     09 FB 01 FB | 	rdlong	result1, arg01
23054     01 00 00 FF 
23058     D8 E6 85 F1 | 	sub	ptr___system__dat__, ##728
2305c                 | __system___strerror_ret
2305c     2D 00 64 FD | 	ret
23060                 | 
23060                 | __system___int64_shl
23060     20 16 CE F7 | 	test	arg03, #32 wz
23064     09 15 02 56 |  if_ne	mov	arg02, arg01
23068     00 12 06 56 |  if_ne	mov	arg01, #0
2306c     1F 16 CE F7 | 	test	arg03, #31 wz
23070     18 00 90 AD |  if_e	jmp	#LR__3210
23074     0B 15 62 F0 | 	shl	arg02, arg03
23078     09 FB 01 F6 | 	mov	result1, arg01
2307c     0B FD 61 F6 | 	neg	result2, arg03
23080     FE FA 41 F0 | 	shr	result1, result2
23084     FD 14 42 F5 | 	or	arg02, result1
23088     0B 13 62 F0 | 	shl	arg01, arg03
2308c                 | LR__3210
2308c     0A FD 01 F6 | 	mov	result2, arg02
23090     09 FB 01 F6 | 	mov	result1, arg01
23094                 | __system___int64_shl_ret
23094     2D 00 64 FD | 	ret
23098                 | 
23098                 | __system___usepins
23098     14 E6 05 F1 | 	add	ptr___system__dat__, #20
2309c     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
230a0     14 E6 85 F1 | 	sub	ptr___system__dat__, #20
230a4     00 13 CA F7 | 	test	arg01, _var01 wz
230a8     18 E6 05 A1 |  if_e	add	ptr___system__dat__, #24
230ac     F3 02 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
230b0     18 E6 85 A1 |  if_e	sub	ptr___system__dat__, #24
230b4     01 15 CA A7 |  if_e	test	arg02, _var02 wz
230b8     00 FA 05 56 |  if_ne	mov	result1, #0
230bc     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
230c0     14 E6 05 F1 | 	add	ptr___system__dat__, #20
230c4     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
230c8     09 03 42 F5 | 	or	_var02, arg01
230cc     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
230d0     04 E6 05 F1 | 	add	ptr___system__dat__, #4
230d4     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
230d8     0A 03 42 F5 | 	or	_var02, arg02
230dc     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
230e0     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
230e4     01 FA 65 F6 | 	neg	result1, #1
230e8                 | __system___usepins_ret
230e8     2D 00 64 FD | 	ret
230ec                 | 
230ec                 | __system___freepins
230ec     14 E6 05 F1 | 	add	ptr___system__dat__, #20
230f0     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
230f4     09 01 22 F5 | 	andn	_var01, arg01
230f8     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
230fc     04 E6 05 F1 | 	add	ptr___system__dat__, #4
23100     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
23104     0A 01 22 F5 | 	andn	_var01, arg02
23108     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
2310c     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
23110                 | __system___freepins_ret
23110     2D 00 64 FD | 	ret
23114                 | 
23114                 | __system___float_fromuns
23114     09 17 0A F6 | 	mov	arg03, arg01 wz
23118     0B FB 01 A6 |  if_e	mov	result1, arg03
2311c     24 00 90 AD |  if_e	jmp	#LR__3220
23120     0B 15 92 F7 | 	encod	arg02, arg03 wc
23124     01 14 06 C1 |  if_b	add	arg02, #1
23128     01 14 86 F1 | 	sub	arg02, #1
2312c     1F 12 06 F6 | 	mov	arg01, #31
23130     0A 13 82 F1 | 	sub	arg01, arg02
23134     09 17 62 F0 | 	shl	arg03, arg01
23138     02 16 46 F0 | 	shr	arg03, #2
2313c     00 12 06 F6 | 	mov	arg01, #0
23140     4C 09 B0 FD | 	call	#__system___float_Pack
23144                 | LR__3220
23144                 | __system___float_fromuns_ret
23144     2D 00 64 FD | 	ret
23148                 | 
23148                 | __system___float_add
23148     0F 4A 05 F6 | 	mov	COUNT_, #15
2314c     A8 00 A0 FD | 	call	#pushregs_
23150     09 1F 02 F6 | 	mov	local01, arg01
23154     0A 21 02 F6 | 	mov	local02, arg02
23158     00 22 06 F6 | 	mov	local03, #0
2315c     0F 25 02 F6 | 	mov	local04, local01
23160     12 27 02 F6 | 	mov	local05, local04
23164     16 26 46 F7 | 	zerox	local05, #22
23168     12 29 02 F6 | 	mov	local06, local04
2316c     01 28 66 F0 | 	shl	local06, #1
23170     18 28 46 F0 | 	shr	local06, #24
23174     1F 24 46 F0 | 	shr	local04, #31
23178     10 13 02 F6 | 	mov	arg01, local02
2317c     09 FB 01 F6 | 	mov	result1, arg01
23180     FD 2A 02 F6 | 	mov	local07, result1
23184     15 2D 02 F6 | 	mov	local08, local07
23188     16 2C 46 F7 | 	zerox	local08, #22
2318c     15 2F 02 F6 | 	mov	local09, local07
23190     01 2E 66 F0 | 	shl	local09, #1
23194     18 2E 46 F0 | 	shr	local09, #24
23198     17 31 02 F6 | 	mov	local10, local09
2319c     1F 2A 46 F0 | 	shr	local07, #31
231a0     00 32 06 F6 | 	mov	local11, #0
231a4     00 34 06 F6 | 	mov	local12, #0
231a8     18 29 12 F2 | 	cmp	local06, local10 wc
231ac     18 29 0A 32 |  if_ae	cmp	local06, local10 wz
231b0     2C 00 90 1D |  if_a	jmp	#LR__3230
231b4     16 27 12 32 |  if_ae	cmp	local05, local08 wc
231b8     24 00 90 3D |  if_ae	jmp	#LR__3230
231bc     13 37 02 F6 | 	mov	local13, local05
231c0     16 27 02 F6 | 	mov	local05, local08
231c4     1B 2D 02 F6 | 	mov	local08, local13
231c8     14 37 02 F6 | 	mov	local13, local06
231cc     18 29 02 F6 | 	mov	local06, local10
231d0     1B 31 02 F6 | 	mov	local10, local13
231d4     12 37 02 F6 | 	mov	local13, local04
231d8     15 25 02 F6 | 	mov	local04, local07
231dc     1B 2B 02 F6 | 	mov	local07, local13
231e0                 | LR__3230
231e0     FF 28 0E F2 | 	cmp	local06, #255 wz
231e4     70 01 90 AD |  if_e	jmp	#LR__3245
231e8     00 28 0E F2 | 	cmp	local06, #0 wz
231ec     AC 01 90 AD |  if_e	jmp	#LR__3247
231f0     17 26 26 F4 | 	bith	local05, #23
231f4                 | LR__3231
231f4     00 30 0E F2 | 	cmp	local10, #0 wz
231f8     F0 01 90 AD |  if_e	jmp	#LR__3251
231fc     17 2C 26 F4 | 	bith	local08, #23
23200                 | LR__3232
23200     7F 28 86 F1 | 	sub	local06, #127
23204     7F 30 86 F1 | 	sub	local10, #127
23208     14 39 02 F6 | 	mov	local14, local06
2320c     18 39 82 F1 | 	sub	local14, local10
23210     97 14 48 FB | 	callpa	#(@LR__3234-@LR__3233)>>2,fcache_load_ptr_
23214                 | LR__3233
23214     20 38 56 F2 | 	cmps	local14, #32 wc
23218     20 00 90 CD |  if_b	jmp	#LR__3235
2321c     16 2F 02 F6 | 	mov	local09, local08
23220     00 32 0E F2 | 	cmp	local11, #0 wz
23224     6F 32 62 FD | 	wrnz	local11
23228     19 2F 42 F5 | 	or	local09, local11
2322c     17 33 02 F6 | 	mov	local11, local09
23230     00 2C 06 F6 | 	mov	local08, #0
23234     20 38 86 F1 | 	sub	local14, #32
23238     D8 FF 9F FD | 	jmp	#LR__3233
2323c                 | LR__3234
2323c                 | LR__3235
2323c     00 38 0E F2 | 	cmp	local14, #0 wz
23240     38 00 90 AD |  if_e	jmp	#LR__3236
23244     16 37 02 F6 | 	mov	local13, local08
23248     20 30 06 F6 | 	mov	local10, #32
2324c     1C 31 82 F1 | 	sub	local10, local14
23250     18 37 62 F0 | 	shl	local13, local10
23254     19 31 02 F6 | 	mov	local10, local11
23258     20 2E 06 F6 | 	mov	local09, #32
2325c     1C 2F 82 F1 | 	sub	local09, local14
23260     17 31 6A F0 | 	shl	local10, local09 wz
23264     1C 33 42 F0 | 	shr	local11, local14
23268     1C 2D 42 F0 | 	shr	local08, local14
2326c     1B 33 42 F5 | 	or	local11, local13
23270     00 3A 06 F6 | 	mov	local15, #0
23274     01 3A 06 56 |  if_ne	mov	local15, #1
23278     1D 33 42 F5 | 	or	local11, local15
2327c                 | LR__3236
2327c     12 3B 02 F6 | 	mov	local15, local04
23280     15 3B 62 F5 | 	xor	local15, local07
23284     01 3A CE F7 | 	test	local15, #1 wz
23288     18 00 90 AD |  if_e	jmp	#LR__3237
2328c     16 2D 22 F6 | 	not	local08, local08
23290     19 33 22 F6 | 	not	local11, local11
23294     01 32 0E F1 | 	add	local11, #1 wz
23298     00 3A 06 F6 | 	mov	local15, #0
2329c     01 3A 06 A6 |  if_e	mov	local15, #1
232a0     1D 2D 02 F1 | 	add	local08, local15
232a4                 | LR__3237
232a4     19 35 12 F1 | 	add	local12, local11 wc
232a8     16 27 22 F1 | 	addx	local05, local08
232ac     00 26 56 F2 | 	cmps	local05, #0 wc
232b0     1C 00 90 3D |  if_ae	jmp	#LR__3238
232b4     01 24 66 F5 | 	xor	local04, #1
232b8     13 27 22 F6 | 	not	local05, local05
232bc     1A 35 22 F6 | 	not	local12, local12
232c0     01 34 0E F1 | 	add	local12, #1 wz
232c4     00 3A 06 F6 | 	mov	local15, #0
232c8     01 3A 06 A6 |  if_e	mov	local15, #1
232cc     1D 27 02 F1 | 	add	local05, local15
232d0                 | LR__3238
232d0     00 80 00 FF 
232d4     00 26 16 F2 | 	cmp	local05, ##16777216 wc
232d8     28 00 90 CD |  if_b	jmp	#LR__3239
232dc     01 28 06 F1 | 	add	local06, #1
232e0     1A 39 02 F6 | 	mov	local14, local12
232e4     01 38 06 F5 | 	and	local14, #1
232e8     01 34 46 F0 | 	shr	local12, #1
232ec     13 3B 02 F6 | 	mov	local15, local05
232f0     1F 3A 66 F0 | 	shl	local15, #31
232f4     1D 35 42 F5 | 	or	local12, local15
232f8     1C 35 42 F5 | 	or	local12, local14
232fc     01 26 46 F0 | 	shr	local05, #1
23300     3C 00 90 FD | 	jmp	#LR__3244
23304                 | LR__3239
23304     00 40 00 FF 
23308     00 26 16 F2 | 	cmp	local05, ##8388608 wc
2330c     30 00 90 3D |  if_ae	jmp	#LR__3243
23310     00 26 0E F2 | 	cmp	local05, #0 wz
23314     00 34 0E A2 |  if_e	cmp	local12, #0 wz
23318     08 24 46 A5 |  if_e	or	local04, #8
2331c     01 24 26 A5 |  if_e	andn	local04, #1
23320     1C 00 90 AD |  if_e	jmp	#LR__3242
23324                 | LR__3240
23324     00 40 00 FF 
23328     00 26 16 F2 | 	cmp	local05, ##8388608 wc
2332c     10 00 90 3D |  if_ae	jmp	#LR__3241
23330     1A 35 12 F1 | 	add	local12, local12 wc
23334     13 27 22 F1 | 	addx	local05, local05
23338     01 28 86 F1 | 	sub	local06, #1
2333c     E4 FF 9F FD | 	jmp	#LR__3240
23340                 | LR__3241
23340                 | LR__3242
23340                 | LR__3243
23340                 | LR__3244
23340     13 13 02 F6 | 	mov	arg01, local05
23344     1A 15 02 F6 | 	mov	arg02, local12
23348     14 17 02 F6 | 	mov	arg03, local06
2334c     12 19 02 F6 | 	mov	arg04, local04
23350     08 35 B0 FD | 	call	#__system__pack_0606
23354     DC 00 90 FD | 	jmp	#LR__3255
23358                 | LR__3245
23358     FF 30 0E F2 | 	cmp	local10, #255 wz
2335c     10 00 90 5D |  if_ne	jmp	#LR__3246
23360     12 2B 0A F2 | 	cmp	local07, local04 wz
23364     00 F8 3F 5F 
23368     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
2336c     C4 00 90 5D |  if_ne	jmp	#LR__3255
23370                 | LR__3246
23370     00 26 0E F2 | 	cmp	local05, #0 wz
23374     00 F8 3F 5F 
23378     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
2337c     B4 00 90 5D |  if_ne	jmp	#LR__3255
23380     1A 15 02 F6 | 	mov	arg02, local12
23384     14 17 02 F6 | 	mov	arg03, local06
23388     12 19 02 F6 | 	mov	arg04, local04
2338c     02 18 46 F5 | 	or	arg04, #2
23390     13 13 02 F6 | 	mov	arg01, local05
23394     C4 34 B0 FD | 	call	#__system__pack_0606
23398     98 00 90 FD | 	jmp	#LR__3255
2339c                 | LR__3247
2339c     00 26 0E F2 | 	cmp	local05, #0 wz
233a0     28 00 90 AD |  if_e	jmp	#LR__3250
233a4     01 26 66 F0 | 	shl	local05, #1
233a8     97 0E 48 FB | 	callpa	#(@LR__3249-@LR__3248)>>2,fcache_load_ptr_
233ac                 | LR__3248
233ac     00 40 00 FF 
233b0     00 26 16 F2 | 	cmp	local05, ##8388608 wc
233b4     14 3B 02 C6 |  if_b	mov	local15, local06
233b8     01 3A 86 C1 |  if_b	sub	local15, #1
233bc     1D 29 02 C6 |  if_b	mov	local06, local15
233c0     01 26 66 C0 |  if_b	shl	local05, #1
233c4     E4 FF 9F CD |  if_b	jmp	#LR__3248
233c8                 | LR__3249
233c8     28 FE 9F FD | 	jmp	#LR__3231
233cc                 | LR__3250
233cc     15 25 02 F5 | 	and	local04, local07
233d0     12 19 02 F6 | 	mov	arg04, local04
233d4     08 18 46 F5 | 	or	arg04, #8
233d8     00 12 06 F6 | 	mov	arg01, #0
233dc     00 14 06 F6 | 	mov	arg02, #0
233e0     00 16 06 F6 | 	mov	arg03, #0
233e4     74 34 B0 FD | 	call	#__system__pack_0606
233e8     48 00 90 FD | 	jmp	#LR__3255
233ec                 | LR__3251
233ec     00 2C 0E F2 | 	cmp	local08, #0 wz
233f0     28 00 90 AD |  if_e	jmp	#LR__3254
233f4     01 2C 66 F0 | 	shl	local08, #1
233f8     97 0E 48 FB | 	callpa	#(@LR__3253-@LR__3252)>>2,fcache_load_ptr_
233fc                 | LR__3252
233fc     00 40 00 FF 
23400     00 2C 16 F2 | 	cmp	local08, ##8388608 wc
23404     18 3B 02 C6 |  if_b	mov	local15, local10
23408     01 3A 86 C1 |  if_b	sub	local15, #1
2340c     1D 31 02 C6 |  if_b	mov	local10, local15
23410     01 2C 66 C0 |  if_b	shl	local08, #1
23414     E4 FF 9F CD |  if_b	jmp	#LR__3252
23418                 | LR__3253
23418     E4 FD 9F FD | 	jmp	#LR__3232
2341c                 | LR__3254
2341c     7F 28 86 F1 | 	sub	local06, #127
23420     13 13 02 F6 | 	mov	arg01, local05
23424     1A 15 02 F6 | 	mov	arg02, local12
23428     14 17 02 F6 | 	mov	arg03, local06
2342c     12 19 02 F6 | 	mov	arg04, local04
23430     28 34 B0 FD | 	call	#__system__pack_0606
23434                 | LR__3255
23434     A7 F0 03 F6 | 	mov	ptra, fp
23438     B2 00 A0 FD | 	call	#popregs_
2343c                 | __system___float_add_ret
2343c     2D 00 64 FD | 	ret
23440                 | 
23440                 | __system___float_sqrt
23440     04 4A 05 F6 | 	mov	COUNT_, #4
23444     A8 00 A0 FD | 	call	#pushregs_
23448     09 1F 02 F6 | 	mov	local01, arg01
2344c     09 FB 01 F6 | 	mov	result1, arg01
23450     FD 20 02 F6 | 	mov	local02, result1
23454     10 23 02 F6 | 	mov	local03, local02
23458     16 22 46 F7 | 	zerox	local03, #22
2345c     10 25 02 F6 | 	mov	local04, local02
23460     01 24 66 F0 | 	shl	local04, #1
23464     18 24 4E F0 | 	shr	local04, #24 wz
23468     1F 20 46 F0 | 	shr	local02, #31
2346c     70 00 90 AD |  if_e	jmp	#LR__3261
23470     17 22 26 F4 | 	bith	local03, #23
23474                 | LR__3260
23474     00 20 0E F2 | 	cmp	local02, #0 wz
23478     00 F8 3F 5F 
2347c     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
23480     88 00 90 5D |  if_ne	jmp	#LR__3264
23484     FF 24 0E F2 | 	cmp	local04, #255 wz
23488     0F FB 01 A6 |  if_e	mov	result1, local01
2348c     7C 00 90 AD |  if_e	jmp	#LR__3264
23490     7F 24 86 F1 | 	sub	local04, #127
23494     01 24 CE F7 | 	test	local04, #1 wz
23498     01 22 66 50 |  if_ne	shl	local03, #1
2349c     05 22 66 F0 | 	shl	local03, #5
234a0     11 01 38 FD | 	qsqrt	#0, local03
234a4     01 24 86 51 |  if_ne	sub	local04, #1
234a8     12 25 52 F6 | 	abs	local04, local04 wc
234ac     01 24 46 F0 | 	shr	local04, #1
234b0     12 17 82 F6 | 	negc	arg03, local04
234b4     10 19 02 F6 | 	mov	arg04, local02
234b8     18 12 62 FD | 	getqx	arg01
234bc     09 15 02 F6 | 	mov	arg02, arg01
234c0     19 14 66 F0 | 	shl	arg02, #25
234c4     07 12 46 F0 | 	shr	arg01, #7
234c8     00 80 00 FF 
234cc     01 12 16 F2 | 	cmp	arg01, ##16777217 wc
234d0     01 16 06 31 |  if_ae	add	arg03, #1
234d4     01 12 46 30 |  if_ae	shr	arg01, #1
234d8     80 33 B0 FD | 	call	#__system__pack_0606
234dc     2C 00 90 FD | 	jmp	#LR__3264
234e0                 | LR__3261
234e0     00 22 0E F2 | 	cmp	local03, #0 wz
234e4     0F FB 01 A6 |  if_e	mov	result1, local01
234e8     20 00 90 AD |  if_e	jmp	#LR__3264
234ec     01 22 66 F0 | 	shl	local03, #1
234f0     97 0A 48 FB | 	callpa	#(@LR__3263-@LR__3262)>>2,fcache_load_ptr_
234f4                 | LR__3262
234f4     00 40 00 FF 
234f8     00 22 16 F2 | 	cmp	local03, ##8388608 wc
234fc     01 24 86 C1 |  if_b	sub	local04, #1
23500     01 22 66 C0 |  if_b	shl	local03, #1
23504     EC FF 9F CD |  if_b	jmp	#LR__3262
23508                 | LR__3263
23508     68 FF 9F FD | 	jmp	#LR__3260
2350c                 | LR__3264
2350c     A7 F0 03 F6 | 	mov	ptra, fp
23510     B2 00 A0 FD | 	call	#popregs_
23514                 | __system___float_sqrt_ret
23514     2D 00 64 FD | 	ret
23518                 | 
23518                 | __system___float_mul
23518     0B 4A 05 F6 | 	mov	COUNT_, #11
2351c     A8 00 A0 FD | 	call	#pushregs_
23520     09 1F 02 F6 | 	mov	local01, arg01
23524     0A 21 02 F6 | 	mov	local02, arg02
23528     0F 23 02 F6 | 	mov	local03, local01
2352c     11 25 02 F6 | 	mov	local04, local03
23530     16 24 46 F7 | 	zerox	local04, #22
23534     11 27 02 F6 | 	mov	local05, local03
23538     01 26 66 F0 | 	shl	local05, #1
2353c     18 26 46 F0 | 	shr	local05, #24
23540     1F 22 46 F0 | 	shr	local03, #31
23544     10 FB 01 F6 | 	mov	result1, local02
23548     FD 28 02 F6 | 	mov	local06, result1
2354c     14 2B 02 F6 | 	mov	local07, local06
23550     16 2A 46 F7 | 	zerox	local07, #22
23554     14 2D 02 F6 | 	mov	local08, local06
23558     01 2C 66 F0 | 	shl	local08, #1
2355c     18 2C 46 F0 | 	shr	local08, #24
23560     1F 28 46 F0 | 	shr	local06, #31
23564     14 23 62 F5 | 	xor	local03, local06
23568     FF 26 0E F2 | 	cmp	local05, #255 wz
2356c     90 00 90 AD |  if_e	jmp	#LR__3273
23570     FF 2C 0E F2 | 	cmp	local08, #255 wz
23574     D8 00 90 AD |  if_e	jmp	#LR__3275
23578     00 26 0E F2 | 	cmp	local05, #0 wz
2357c     0C 01 90 AD |  if_e	jmp	#LR__3276
23580     17 24 26 F4 | 	bith	local04, #23
23584                 | LR__3270
23584     00 2C 0E F2 | 	cmp	local08, #0 wz
23588     44 01 90 AD |  if_e	jmp	#LR__3280
2358c     17 2A 26 F4 | 	bith	local07, #23
23590                 | LR__3271
23590     12 21 02 F6 | 	mov	local02, local04
23594     04 20 66 F0 | 	shl	local02, #4
23598     15 29 02 F6 | 	mov	local06, local07
2359c     05 28 66 F0 | 	shl	local06, #5
235a0     14 21 02 FD | 	qmul	local02, local06
235a4     16 27 02 F1 | 	add	local05, local08
235a8     FE 26 86 F1 | 	sub	local05, #254
235ac     13 2F 02 F6 | 	mov	local09, local05
235b0     04 24 66 F0 | 	shl	local04, #4
235b4     05 2A 66 F0 | 	shl	local07, #5
235b8     18 30 62 FD | 	getqx	local10
235bc     15 25 02 FD | 	qmul	local04, local07
235c0     19 32 62 FD | 	getqy	local11
235c4     00 80 00 FF 
235c8     00 32 16 F2 | 	cmp	local11, ##16777216 wc
235cc     18 00 90 CD |  if_b	jmp	#LR__3272
235d0     01 2E 06 F1 | 	add	local09, #1
235d4     01 30 46 F0 | 	shr	local10, #1
235d8     19 2D 02 F6 | 	mov	local08, local11
235dc     1F 2C 66 F0 | 	shl	local08, #31
235e0     16 31 42 F5 | 	or	local10, local08
235e4     01 32 46 F0 | 	shr	local11, #1
235e8                 | LR__3272
235e8     19 13 02 F6 | 	mov	arg01, local11
235ec     18 15 02 F6 | 	mov	arg02, local10
235f0     17 17 02 F6 | 	mov	arg03, local09
235f4     11 19 02 F6 | 	mov	arg04, local03
235f8     60 32 B0 FD | 	call	#__system__pack_0606
235fc     10 01 90 FD | 	jmp	#LR__3284
23600                 | LR__3273
23600     00 24 0E F2 | 	cmp	local04, #0 wz
23604     0F FB 01 56 |  if_ne	mov	result1, local01
23608     04 01 90 5D |  if_ne	jmp	#LR__3284
2360c     FF 2C 56 F2 | 	cmps	local08, #255 wc
23610     00 2C 0E C2 |  if_b	cmp	local08, #0 wz
23614     00 2A 0E 82 |  if_c_and_z	cmp	local07, #0 wz
23618     18 00 90 4D |  if_c_and_nz	jmp	#LR__3274
2361c     00 F8 3F CF 
23620     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
23624     E8 00 90 CD |  if_b	jmp	#LR__3284
23628     00 2A 0E F2 | 	cmp	local07, #0 wz
2362c     10 FB 01 56 |  if_ne	mov	result1, local02
23630     DC 00 90 5D |  if_ne	jmp	#LR__3284
23634                 | LR__3274
23634     02 22 46 F5 | 	or	local03, #2
23638     00 12 06 F6 | 	mov	arg01, #0
2363c     00 14 06 F6 | 	mov	arg02, #0
23640     13 17 02 F6 | 	mov	arg03, local05
23644     11 19 02 F6 | 	mov	arg04, local03
23648     10 32 B0 FD | 	call	#__system__pack_0606
2364c     C0 00 90 FD | 	jmp	#LR__3284
23650                 | LR__3275
23650     00 26 0E F2 | 	cmp	local05, #0 wz
23654     00 24 0E A2 |  if_e	cmp	local04, #0 wz
23658     00 F8 3F AF 
2365c     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
23660     AC 00 90 AD |  if_e	jmp	#LR__3284
23664     00 2A 0E F2 | 	cmp	local07, #0 wz
23668     10 FB 01 56 |  if_ne	mov	result1, local02
2366c     A0 00 90 5D |  if_ne	jmp	#LR__3284
23670     16 17 02 F6 | 	mov	arg03, local08
23674     11 19 02 F6 | 	mov	arg04, local03
23678     02 18 46 F5 | 	or	arg04, #2
2367c     00 12 06 F6 | 	mov	arg01, #0
23680     00 14 06 F6 | 	mov	arg02, #0
23684     D4 31 B0 FD | 	call	#__system__pack_0606
23688     84 00 90 FD | 	jmp	#LR__3284
2368c                 | LR__3276
2368c     00 24 0E F2 | 	cmp	local04, #0 wz
23690     20 00 90 AD |  if_e	jmp	#LR__3279
23694     01 24 66 F0 | 	shl	local04, #1
23698     97 0A 48 FB | 	callpa	#(@LR__3278-@LR__3277)>>2,fcache_load_ptr_
2369c                 | LR__3277
2369c     00 40 00 FF 
236a0     00 24 16 F2 | 	cmp	local04, ##8388608 wc
236a4     01 26 86 C1 |  if_b	sub	local05, #1
236a8     01 24 66 C0 |  if_b	shl	local04, #1
236ac     EC FF 9F CD |  if_b	jmp	#LR__3277
236b0                 | LR__3278
236b0     D0 FE 9F FD | 	jmp	#LR__3270
236b4                 | LR__3279
236b4     08 22 46 F5 | 	or	local03, #8
236b8     00 12 06 F6 | 	mov	arg01, #0
236bc     00 14 06 F6 | 	mov	arg02, #0
236c0     00 16 06 F6 | 	mov	arg03, #0
236c4     11 19 02 F6 | 	mov	arg04, local03
236c8     90 31 B0 FD | 	call	#__system__pack_0606
236cc     40 00 90 FD | 	jmp	#LR__3284
236d0                 | LR__3280
236d0     00 2A 0E F2 | 	cmp	local07, #0 wz
236d4     20 00 90 AD |  if_e	jmp	#LR__3283
236d8     01 2A 66 F0 | 	shl	local07, #1
236dc     97 0A 48 FB | 	callpa	#(@LR__3282-@LR__3281)>>2,fcache_load_ptr_
236e0                 | LR__3281
236e0     00 40 00 FF 
236e4     00 2A 16 F2 | 	cmp	local07, ##8388608 wc
236e8     01 2C 86 C1 |  if_b	sub	local08, #1
236ec     01 2A 66 C0 |  if_b	shl	local07, #1
236f0     EC FF 9F CD |  if_b	jmp	#LR__3281
236f4                 | LR__3282
236f4     98 FE 9F FD | 	jmp	#LR__3271
236f8                 | LR__3283
236f8     08 22 46 F5 | 	or	local03, #8
236fc     00 12 06 F6 | 	mov	arg01, #0
23700     00 14 06 F6 | 	mov	arg02, #0
23704     00 16 06 F6 | 	mov	arg03, #0
23708     11 19 02 F6 | 	mov	arg04, local03
2370c     4C 31 B0 FD | 	call	#__system__pack_0606
23710                 | LR__3284
23710     A7 F0 03 F6 | 	mov	ptra, fp
23714     B2 00 A0 FD | 	call	#popregs_
23718                 | __system___float_mul_ret
23718     2D 00 64 FD | 	ret
2371c                 | 
2371c                 | __system___float_div
2371c     0E 4A 05 F6 | 	mov	COUNT_, #14
23720     A8 00 A0 FD | 	call	#pushregs_
23724     09 23 02 F6 | 	mov	local03, arg01
23728     0A 25 02 F6 | 	mov	local04, arg02
2372c     11 27 02 F6 | 	mov	local05, local03
23730     13 29 02 F6 | 	mov	local06, local05
23734     16 28 46 F7 | 	zerox	local06, #22
23738     13 2B 02 F6 | 	mov	local07, local05
2373c     01 2A 66 F0 | 	shl	local07, #1
23740     18 2A 46 F0 | 	shr	local07, #24
23744     1F 26 46 F0 | 	shr	local05, #31
23748     12 FB 01 F6 | 	mov	result1, local04
2374c     FD 2C 02 F6 | 	mov	local08, result1
23750     16 2F 02 F6 | 	mov	local09, local08
23754     16 2E 46 F7 | 	zerox	local09, #22
23758     16 31 02 F6 | 	mov	local10, local08
2375c     01 30 66 F0 | 	shl	local10, #1
23760     18 30 46 F0 | 	shr	local10, #24
23764     1F 2C 46 F0 | 	shr	local08, #31
23768     16 27 62 F5 | 	xor	local05, local08
2376c     FF 2A 0E F2 | 	cmp	local07, #255 wz
23770     D4 00 90 AD |  if_e	jmp	#LR__3295
23774     FF 30 0E F2 | 	cmp	local10, #255 wz
23778     04 01 90 AD |  if_e	jmp	#LR__3296
2377c     00 2A 0E F2 | 	cmp	local07, #0 wz
23780     24 01 90 AD |  if_e	jmp	#LR__3297
23784     17 28 26 F4 | 	bith	local06, #23
23788                 | LR__3290
23788     00 30 0E F2 | 	cmp	local10, #0 wz
2378c     70 01 90 AD |  if_e	jmp	#LR__3301
23790     17 2E 26 F4 | 	bith	local09, #23
23794                 | LR__3291
23794     18 2B 82 F1 | 	sub	local07, local10
23798     15 33 02 F6 | 	mov	local11, local07
2379c     14 13 02 F6 | 	mov	arg01, local06
237a0     02 12 46 F0 | 	shr	arg01, #2
237a4     1E 28 66 F0 | 	shl	local06, #30
237a8     14 15 02 F6 | 	mov	arg02, local06
237ac     17 17 02 F6 | 	mov	arg03, local09
237b0     28 12 62 FD | 	setq	arg01
237b4     0B 15 12 FD | 	qdiv	arg02, arg03
237b8     00 34 06 F6 | 	mov	local12, #0
237bc     18 1E 62 FD | 	getqx	local01
237c0     19 FC 61 FD | 	getqy	result2
237c4     FE 20 02 F6 | 	mov	local02, result2
237c8     0F 37 02 F6 | 	mov	local13, local01
237cc     00 20 4E F2 | 	cmps	local02, #0 wz
237d0     1B 39 02 F6 | 	mov	local14, local13
237d4     19 38 66 F0 | 	shl	local14, #25
237d8     01 34 06 56 |  if_ne	mov	local12, #1
237dc     1A 39 42 F5 | 	or	local14, local12
237e0     07 36 46 F0 | 	shr	local13, #7
237e4     00 80 00 FF 
237e8     00 36 16 F2 | 	cmp	local13, ##16777216 wc
237ec     1C 00 90 CD |  if_b	jmp	#LR__3292
237f0     01 32 06 F1 | 	add	local11, #1
237f4     01 38 46 F0 | 	shr	local14, #1
237f8     1B 35 02 F6 | 	mov	local12, local13
237fc     1F 34 66 F0 | 	shl	local12, #31
23800     1A 39 42 F5 | 	or	local14, local12
23804     01 36 46 F0 | 	shr	local13, #1
23808     24 00 90 FD | 	jmp	#LR__3294
2380c                 | LR__3292
2380c     00 40 00 FF 
23810     00 36 16 F2 | 	cmp	local13, ##8388608 wc
23814     18 00 90 3D |  if_ae	jmp	#LR__3293
23818     01 32 86 F1 | 	sub	local11, #1
2381c     01 36 66 F0 | 	shl	local13, #1
23820     1C 35 02 F6 | 	mov	local12, local14
23824     1F 34 46 F0 | 	shr	local12, #31
23828     1A 37 42 F5 | 	or	local13, local12
2382c     01 38 66 F0 | 	shl	local14, #1
23830                 | LR__3293
23830                 | LR__3294
23830     1B 13 02 F6 | 	mov	arg01, local13
23834     1C 15 02 F6 | 	mov	arg02, local14
23838     19 17 02 F6 | 	mov	arg03, local11
2383c     13 19 02 F6 | 	mov	arg04, local05
23840     18 30 B0 FD | 	call	#__system__pack_0606
23844     F8 00 90 FD | 	jmp	#LR__3305
23848                 | LR__3295
23848     00 28 0E F2 | 	cmp	local06, #0 wz
2384c     11 FB 01 56 |  if_ne	mov	result1, local03
23850     EC 00 90 5D |  if_ne	jmp	#LR__3305
23854     FF 30 0E F2 | 	cmp	local10, #255 wz
23858     00 F8 3F AF 
2385c     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
23860     DC 00 90 AD |  if_e	jmp	#LR__3305
23864     02 26 46 F5 | 	or	local05, #2
23868     00 12 06 F6 | 	mov	arg01, #0
2386c     00 14 06 F6 | 	mov	arg02, #0
23870     15 17 02 F6 | 	mov	arg03, local07
23874     13 19 02 F6 | 	mov	arg04, local05
23878     E0 2F B0 FD | 	call	#__system__pack_0606
2387c     C0 00 90 FD | 	jmp	#LR__3305
23880                 | LR__3296
23880     00 2E 0E F2 | 	cmp	local09, #0 wz
23884     12 FB 01 56 |  if_ne	mov	result1, local04
23888     B4 00 90 5D |  if_ne	jmp	#LR__3305
2388c     13 19 02 F6 | 	mov	arg04, local05
23890     08 18 46 F5 | 	or	arg04, #8
23894     00 12 06 F6 | 	mov	arg01, #0
23898     00 14 06 F6 | 	mov	arg02, #0
2389c     00 16 06 F6 | 	mov	arg03, #0
238a0     B8 2F B0 FD | 	call	#__system__pack_0606
238a4     98 00 90 FD | 	jmp	#LR__3305
238a8                 | LR__3297
238a8     00 28 0E F2 | 	cmp	local06, #0 wz
238ac     20 00 90 AD |  if_e	jmp	#LR__3300
238b0     01 28 66 F0 | 	shl	local06, #1
238b4     97 0A 48 FB | 	callpa	#(@LR__3299-@LR__3298)>>2,fcache_load_ptr_
238b8                 | LR__3298
238b8     00 40 00 FF 
238bc     00 28 16 F2 | 	cmp	local06, ##8388608 wc
238c0     01 2A 86 C1 |  if_b	sub	local07, #1
238c4     01 28 66 C0 |  if_b	shl	local06, #1
238c8     EC FF 9F CD |  if_b	jmp	#LR__3298
238cc                 | LR__3299
238cc     B8 FE 9F FD | 	jmp	#LR__3290
238d0                 | LR__3300
238d0     00 30 0E F2 | 	cmp	local10, #0 wz
238d4     00 2E 0E A2 |  if_e	cmp	local09, #0 wz
238d8     00 F8 3F AF 
238dc     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
238e0     5C 00 90 AD |  if_e	jmp	#LR__3305
238e4     13 19 02 F6 | 	mov	arg04, local05
238e8     08 18 46 F5 | 	or	arg04, #8
238ec     00 12 06 F6 | 	mov	arg01, #0
238f0     00 14 06 F6 | 	mov	arg02, #0
238f4     00 16 06 F6 | 	mov	arg03, #0
238f8     60 2F B0 FD | 	call	#__system__pack_0606
238fc     40 00 90 FD | 	jmp	#LR__3305
23900                 | LR__3301
23900     00 2E 0E F2 | 	cmp	local09, #0 wz
23904     20 00 90 AD |  if_e	jmp	#LR__3304
23908     01 2E 66 F0 | 	shl	local09, #1
2390c     97 0A 48 FB | 	callpa	#(@LR__3303-@LR__3302)>>2,fcache_load_ptr_
23910                 | LR__3302
23910     00 40 00 FF 
23914     00 2E 16 F2 | 	cmp	local09, ##8388608 wc
23918     01 30 86 C1 |  if_b	sub	local10, #1
2391c     01 2E 66 C0 |  if_b	shl	local09, #1
23920     EC FF 9F CD |  if_b	jmp	#LR__3302
23924                 | LR__3303
23924     6C FE 9F FD | 	jmp	#LR__3291
23928                 | LR__3304
23928     02 26 46 F5 | 	or	local05, #2
2392c     00 12 06 F6 | 	mov	arg01, #0
23930     00 14 06 F6 | 	mov	arg02, #0
23934     00 16 06 F6 | 	mov	arg03, #0
23938     13 19 02 F6 | 	mov	arg04, local05
2393c     1C 2F B0 FD | 	call	#__system__pack_0606
23940                 | LR__3305
23940     A7 F0 03 F6 | 	mov	ptra, fp
23944     B2 00 A0 FD | 	call	#popregs_
23948                 | __system___float_div_ret
23948     2D 00 64 FD | 	ret
2394c                 | 
2394c                 | __system___float_cmp
2394c     00 C0 3F FF 
23950     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
23954     00 C0 3F CF 
23958     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
2395c     0B FB 01 36 |  if_ae	mov	result1, arg03
23960     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
23964     00 C0 7F FF 
23968     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
2396c     00 C0 7F CF 
23970     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
23974     0B FB 01 36 |  if_ae	mov	result1, arg03
23978     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
2397c     00 12 56 F2 | 	cmps	arg01, #0 wc
23980     2C 00 90 3D |  if_ae	jmp	#LR__3310
23984     00 14 56 F2 | 	cmps	arg02, #0 wc
23988     0A FB 01 C6 |  if_b	mov	result1, arg02
2398c     09 FB 81 C1 |  if_b	sub	result1, arg01
23990     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
23994     00 14 0E F2 | 	cmp	arg02, #0 wz
23998     00 00 40 AF 
2399c     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
239a0     00 FA 05 A6 |  if_e	mov	result1, #0
239a4     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
239a8     01 FA 65 F6 | 	neg	result1, #1
239ac     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
239b0                 | LR__3310
239b0     00 14 56 F2 | 	cmps	arg02, #0 wc
239b4     1C 00 90 3D |  if_ae	jmp	#LR__3311
239b8     00 12 0E F2 | 	cmp	arg01, #0 wz
239bc     00 00 40 AF 
239c0     00 14 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
239c4     00 FA 05 A6 |  if_e	mov	result1, #0
239c8     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
239cc     01 FA 05 F6 | 	mov	result1, #1
239d0     08 00 90 FD | 	jmp	#__system___float_cmp_ret
239d4                 | LR__3311
239d4     0A 13 82 F1 | 	sub	arg01, arg02
239d8     09 FB 01 F6 | 	mov	result1, arg01
239dc                 | __system___float_cmp_ret
239dc     2D 00 64 FD | 	ret
239e0                 | 
239e0                 | __system___float_tointeger
239e0     02 4A 05 F6 | 	mov	COUNT_, #2
239e4     A8 00 A0 FD | 	call	#pushregs_
239e8     50 00 B0 FD | 	call	#__system___float_Unpack
239ec     FF FF 7F FF 
239f0     FF FD 55 F2 | 	cmps	result2, ##-1 wc
239f4     34 00 90 CD |  if_b	jmp	#LR__3320
239f8     1F FC 55 F2 | 	cmps	result2, #31 wc
239fc     2C 00 90 3D |  if_ae	jmp	#LR__3320
23a00     02 FE 65 F0 | 	shl	result3, #2
23a04     1E 1E 06 F6 | 	mov	local01, #30
23a08     FE 1E 82 F1 | 	sub	local01, result2
23a0c     0F FF 41 F0 | 	shr	result3, local01
23a10     FF 20 02 F6 | 	mov	local02, result3
23a14     0A 21 02 F1 | 	add	local02, arg02
23a18     01 20 46 F0 | 	shr	local02, #1
23a1c     00 FA 0D F2 | 	cmp	result1, #0 wz
23a20     10 21 62 56 |  if_ne	neg	local02, local02
23a24     10 FB 01 F6 | 	mov	result1, local02
23a28     04 00 90 FD | 	jmp	#LR__3321
23a2c                 | LR__3320
23a2c     00 FA 05 F6 | 	mov	result1, #0
23a30                 | LR__3321
23a30     A7 F0 03 F6 | 	mov	ptra, fp
23a34     B2 00 A0 FD | 	call	#popregs_
23a38                 | __system___float_tointeger_ret
23a38     2D 00 64 FD | 	ret
23a3c                 | 
23a3c                 | __system___float_Unpack
23a3c     09 01 02 F6 | 	mov	_var01, arg01
23a40     1F 00 46 F0 | 	shr	_var01, #31
23a44     09 03 02 F6 | 	mov	_var02, arg01
23a48     01 02 66 F0 | 	shl	_var02, #1
23a4c     18 02 4E F0 | 	shr	_var02, #24 wz
23a50     17 13 06 F4 | 	bitl	arg01, #279
23a54     06 12 66 50 |  if_ne	shl	arg01, #6
23a58     1D 12 26 54 |  if_ne	bith	arg01, #29
23a5c     1C 00 90 5D |  if_ne	jmp	#LR__3330
23a60     09 05 92 F7 | 	encod	_var03, arg01 wc
23a64     01 04 06 C1 |  if_b	add	_var03, #1
23a68     17 04 86 F1 | 	sub	_var03, #23
23a6c     02 03 02 F6 | 	mov	_var02, _var03
23a70     07 FC 05 F6 | 	mov	result2, #7
23a74     02 FD 81 F1 | 	sub	result2, _var03
23a78     FE 12 62 F0 | 	shl	arg01, result2
23a7c                 | LR__3330
23a7c     7F 02 86 F1 | 	sub	_var02, #127
23a80     09 FF 01 F6 | 	mov	result3, arg01
23a84     00 FB 01 F6 | 	mov	result1, _var01
23a88     01 FD 01 F6 | 	mov	result2, _var02
23a8c                 | __system___float_Unpack_ret
23a8c     2D 00 64 FD | 	ret
23a90                 | 
23a90                 | __system___float_Pack
23a90     00 00 06 F6 | 	mov	_var01, #0
23a94     00 16 0E F2 | 	cmp	arg03, #0 wz
23a98     8C 00 90 AD |  if_e	jmp	#LR__3341
23a9c     0B 03 92 F7 | 	encod	_var02, arg03 wc
23aa0     01 02 06 C1 |  if_b	add	_var02, #1
23aa4     21 00 06 F6 | 	mov	_var01, #33
23aa8     01 01 82 F1 | 	sub	_var01, _var02
23aac     00 17 62 F0 | 	shl	arg03, _var01
23ab0     03 02 06 F6 | 	mov	_var02, #3
23ab4     00 03 82 F1 | 	sub	_var02, _var01
23ab8     01 15 02 F1 | 	add	arg02, _var02
23abc     0A 05 02 F6 | 	mov	_var03, arg02
23ac0     00 17 06 F1 | 	add	arg03, #256
23ac4     0B 03 02 F6 | 	mov	_var02, arg03
23ac8     FF 02 2E F5 | 	andn	_var02, #255 wz
23acc     01 04 06 A1 |  if_e	add	_var03, #1
23ad0     7F 04 06 F1 | 	add	_var03, #127
23ad4     FF FF 7F FF 
23ad8     E9 05 46 F3 | 	fges	_var03, ##-23
23adc     FF 04 66 F3 | 	fles	_var03, #255
23ae0     01 04 56 F2 | 	cmps	_var03, #1 wc
23ae4     1C 00 90 3D |  if_ae	jmp	#LR__3340
23ae8     01 16 46 F0 | 	shr	arg03, #1
23aec     1F 02 C6 F9 | 	decod	_var02, #31
23af0     0B 03 02 F1 | 	add	_var02, arg03
23af4     02 05 62 F6 | 	neg	_var03, _var03
23af8     02 03 42 F0 | 	shr	_var02, _var03
23afc     01 17 02 F6 | 	mov	arg03, _var02
23b00     00 04 06 F6 | 	mov	_var03, #0
23b04                 | LR__3340
23b04     09 FB 01 F6 | 	mov	result1, arg01
23b08     1F FA 65 F0 | 	shl	result1, #31
23b0c     02 03 02 F6 | 	mov	_var02, _var03
23b10     17 02 66 F0 | 	shl	_var02, #23
23b14     01 FB 41 F5 | 	or	result1, _var02
23b18     0B 07 02 F6 | 	mov	_var04, arg03
23b1c     09 06 46 F0 | 	shr	_var04, #9
23b20     03 FB 41 F5 | 	or	result1, _var04
23b24     04 00 90 FD | 	jmp	#__system___float_Pack_ret
23b28                 | LR__3341
23b28     00 FB 01 F6 | 	mov	result1, _var01
23b2c                 | __system___float_Pack_ret
23b2c     2D 00 64 FD | 	ret
23b30                 | 
23b30                 | __system___basic_print_float
23b30     05 4A 05 F6 | 	mov	COUNT_, #5
23b34     A8 00 A0 FD | 	call	#pushregs_
23b38     09 1F 02 F6 | 	mov	local01, arg01
23b3c     0A 21 02 F6 | 	mov	local02, arg02
23b40     0B 23 0A F6 | 	mov	local03, arg03 wz
23b44     0C 25 02 F6 | 	mov	local04, arg04
23b48     14 00 90 5D |  if_ne	jmp	#LR__3350
23b4c     23 24 0E F2 | 	cmp	local04, #35 wz
23b50     80 02 10 AF 
23b54     00 26 06 A6 |  if_e	mov	local05, ##537198592
23b58     1D 26 C6 59 |  if_ne	decod	local05, #29
23b5c     13 23 02 F6 | 	mov	local03, local05
23b60                 | LR__3350
23b60     0F 13 02 F6 | 	mov	arg01, local01
23b64     D8 27 B0 FD | 	call	#__system___gettxfunc
23b68     FD 26 0A F6 | 	mov	local05, result1 wz
23b6c     00 FA 05 A6 |  if_e	mov	result1, #0
23b70     13 13 02 56 |  if_ne	mov	arg01, local05
23b74     11 15 02 56 |  if_ne	mov	arg02, local03
23b78     10 17 02 56 |  if_ne	mov	arg03, local02
23b7c     12 19 02 56 |  if_ne	mov	arg04, local04
23b80     30 DF BF 5D |  if_ne	call	#__system___fmtfloat
23b84     A7 F0 03 F6 | 	mov	ptra, fp
23b88     B2 00 A0 FD | 	call	#popregs_
23b8c                 | __system___basic_print_float_ret
23b8c     2D 00 64 FD | 	ret
23b90                 | 
23b90                 | __system____builtin_atoi
23b90     07 4A 05 F6 | 	mov	COUNT_, #7
23b94     A8 00 A0 FD | 	call	#pushregs_
23b98                 | __system____builtin_atoi_enter
23b98     09 1F 02 F6 | 	mov	local01, arg01
23b9c     0A 21 02 F6 | 	mov	local02, arg02
23ba0     00 22 06 F6 | 	mov	local03, #0
23ba4     00 24 06 F6 | 	mov	local04, #0
23ba8     00 26 06 F6 | 	mov	local05, #0
23bac     97 1C 48 FB | 	callpa	#(@LR__3362-@LR__3360)>>2,fcache_load_ptr_
23bb0                 | LR__3360
23bb0     0F 29 C2 FA | 	rdbyte	local06, local01
23bb4     20 28 0E F2 | 	cmp	local06, #32 wz
23bb8     01 1E 06 A1 |  if_e	add	local01, #1
23bbc     F0 FF 9F AD |  if_e	jmp	#LR__3360
23bc0     0F 2B C2 FA | 	rdbyte	local07, local01
23bc4                 | LR__3361
23bc4     2D 2A 0E F2 | 	cmp	local07, #45 wz
23bc8     2B 2A 0E 52 |  if_ne	cmp	local07, #43 wz
23bcc     18 00 90 5D |  if_ne	jmp	#LR__3363
23bd0     01 1E 06 F1 | 	add	local01, #1
23bd4     2D 2A 0E F2 | 	cmp	local07, #45 wz
23bd8     01 28 06 A6 |  if_e	mov	local06, #1
23bdc     14 27 C2 A2 |  if_e	subr	local05, local06
23be0     0F 2B C2 FA | 	rdbyte	local07, local01
23be4     DC FF 9F FD | 	jmp	#LR__3361
23be8                 | LR__3362
23be8                 | LR__3363
23be8     00 20 0E F2 | 	cmp	local02, #0 wz
23bec     1C 00 90 5D |  if_ne	jmp	#LR__3365
23bf0     24 2A 0E F2 | 	cmp	local07, #36 wz
23bf4     10 20 06 A6 |  if_e	mov	local02, #16
23bf8     01 1E 06 A1 |  if_e	add	local01, #1
23bfc     0C 00 90 AD |  if_e	jmp	#LR__3364
23c00     25 2A 0E F2 | 	cmp	local07, #37 wz
23c04     02 20 06 A6 |  if_e	mov	local02, #2
23c08     01 1E 06 A1 |  if_e	add	local01, #1
23c0c                 | LR__3364
23c0c                 | LR__3365
23c0c     97 48 48 FB | 	callpa	#(@LR__3373-@LR__3366)>>2,fcache_load_ptr_
23c10                 | LR__3366
23c10                 | LR__3367
23c10     0F 2B C2 FA | 	rdbyte	local07, local01
23c14     5F 2A 0E F2 | 	cmp	local07, #95 wz
23c18     01 1E 06 F1 | 	add	local01, #1
23c1c     F0 FF 9F AD |  if_e	jmp	#LR__3367
23c20     30 2A 0E F2 | 	cmp	local07, #48 wz
23c24     26 2A 0E 52 |  if_ne	cmp	local07, #38 wz
23c28     00 24 06 A6 |  if_e	mov	local04, #0
23c2c     60 00 90 AD |  if_e	jmp	#LR__3372
23c30     31 2A 56 F2 | 	cmps	local07, #49 wc
23c34     18 00 90 CD |  if_b	jmp	#LR__3368
23c38     3A 2A 56 F2 | 	cmps	local07, #58 wc
23c3c     15 25 02 C6 |  if_b	mov	local04, local07
23c40     30 24 86 C1 |  if_b	sub	local04, #48
23c44     00 20 0E C2 |  if_b	cmp	local02, #0 wz
23c48     0A 20 06 86 |  if_c_and_z	mov	local02, #10
23c4c     40 00 90 CD |  if_b	jmp	#LR__3371
23c50                 | LR__3368
23c50     0B 20 56 F2 | 	cmps	local02, #11 wc
23c54     61 2A 56 32 |  if_ae	cmps	local07, #97 wc
23c58     14 00 90 CD |  if_b	jmp	#LR__3369
23c5c     67 2A 56 F2 | 	cmps	local07, #103 wc
23c60     61 2A 86 C1 |  if_b	sub	local07, #97
23c64     0A 24 06 C6 |  if_b	mov	local04, #10
23c68     15 25 02 C1 |  if_b	add	local04, local07
23c6c     20 00 90 CD |  if_b	jmp	#LR__3370
23c70                 | LR__3369
23c70     0B 20 56 F2 | 	cmps	local02, #11 wc
23c74     41 2A 56 32 |  if_ae	cmps	local07, #65 wc
23c78     24 00 90 CD |  if_b	jmp	#LR__3374
23c7c     47 2A 56 F2 | 	cmps	local07, #71 wc
23c80     41 2A 86 C1 |  if_b	sub	local07, #65
23c84     0A 24 06 C6 |  if_b	mov	local04, #10
23c88     15 25 02 C1 |  if_b	add	local04, local07
23c8c     10 00 90 3D |  if_ae	jmp	#LR__3374
23c90                 | LR__3370
23c90                 | LR__3371
23c90                 | LR__3372
23c90     11 21 02 FD | 	qmul	local02, local03
23c94     18 22 62 FD | 	getqx	local03
23c98     12 23 02 F1 | 	add	local03, local04
23c9c     70 FF 9F FD | 	jmp	#LR__3366
23ca0                 | LR__3373
23ca0                 | LR__3374
23ca0     00 20 0E F2 | 	cmp	local02, #0 wz
23ca4     64 00 90 5D |  if_ne	jmp	#LR__3380
23ca8     78 2A 0E F2 | 	cmp	local07, #120 wz
23cac     68 2A 0E 52 |  if_ne	cmp	local07, #104 wz
23cb0     58 2A 0E 52 |  if_ne	cmp	local07, #88 wz
23cb4     48 2A 0E 52 |  if_ne	cmp	local07, #72 wz
23cb8     14 00 90 5D |  if_ne	jmp	#LR__3375
23cbc     0F 13 02 F6 | 	mov	arg01, local01
23cc0     10 14 06 F6 | 	mov	arg02, #16
23cc4     C8 FE BF FD | 	call	#__system____builtin_atoi
23cc8     FD 22 02 F6 | 	mov	local03, result1
23ccc     3C 00 90 FD | 	jmp	#LR__3379
23cd0                 | LR__3375
23cd0     62 2A 0E F2 | 	cmp	local07, #98 wz
23cd4     42 2A 0E 52 |  if_ne	cmp	local07, #66 wz
23cd8     14 00 90 5D |  if_ne	jmp	#LR__3376
23cdc     0F 13 02 F6 | 	mov	arg01, local01
23ce0     02 14 06 F6 | 	mov	arg02, #2
23ce4     A8 FE BF FD | 	call	#__system____builtin_atoi
23ce8     FD 22 02 F6 | 	mov	local03, result1
23cec     1C 00 90 FD | 	jmp	#LR__3378
23cf0                 | LR__3376
23cf0     6F 2A 0E F2 | 	cmp	local07, #111 wz
23cf4     4F 2A 0E 52 |  if_ne	cmp	local07, #79 wz
23cf8     10 00 90 5D |  if_ne	jmp	#LR__3377
23cfc     0F 13 02 F6 | 	mov	arg01, local01
23d00     08 14 06 F6 | 	mov	arg02, #8
23d04     88 FE BF FD | 	call	#__system____builtin_atoi
23d08     FD 22 02 F6 | 	mov	local03, result1
23d0c                 | LR__3377
23d0c                 | LR__3378
23d0c                 | LR__3379
23d0c                 | LR__3380
23d0c     00 26 0E F2 | 	cmp	local05, #0 wz
23d10     11 23 62 56 |  if_ne	neg	local03, local03
23d14     11 FB 01 F6 | 	mov	result1, local03
23d18     A7 F0 03 F6 | 	mov	ptra, fp
23d1c     B2 00 A0 FD | 	call	#popregs_
23d20                 | __system____builtin_atoi_ret
23d20     2D 00 64 FD | 	ret
23d24                 | 
23d24                 | __system____builtin_atof
23d24     07 4A 05 F6 | 	mov	COUNT_, #7
23d28     A8 00 A0 FD | 	call	#pushregs_
23d2c     09 1F 02 F6 | 	mov	local01, arg01
23d30     00 20 06 F6 | 	mov	local02, #0
23d34     00 22 06 F6 | 	mov	local03, #0
23d38     00 24 06 F6 | 	mov	local04, #0
23d3c     00 26 06 F6 | 	mov	local05, #0
23d40     97 08 48 FB | 	callpa	#(@LR__3391-@LR__3390)>>2,fcache_load_ptr_
23d44                 | LR__3390
23d44     0F 17 C2 FA | 	rdbyte	arg03, local01
23d48     20 16 0E F2 | 	cmp	arg03, #32 wz
23d4c     01 1E 06 A1 |  if_e	add	local01, #1
23d50     F0 FF 9F AD |  if_e	jmp	#LR__3390
23d54                 | LR__3391
23d54     0F 29 C2 FA | 	rdbyte	local06, local01
23d58                 | LR__3392
23d58     2B 28 0E F2 | 	cmp	local06, #43 wz
23d5c     2D 28 0E 52 |  if_ne	cmp	local06, #45 wz
23d60     14 00 90 5D |  if_ne	jmp	#LR__3393
23d64     2D 28 0E F2 | 	cmp	local06, #45 wz
23d68     1F 24 E6 A4 |  if_e	bitnot	local04, #31
23d6c     01 1E 06 F1 | 	add	local01, #1
23d70     0F 29 C2 FA | 	rdbyte	local06, local01
23d74     E0 FF 9F FD | 	jmp	#LR__3392
23d78                 | LR__3393
23d78                 | LR__3394
23d78     97 08 48 FB | 	callpa	#(@LR__3396-@LR__3395)>>2,fcache_load_ptr_
23d7c                 | LR__3395
23d7c     0F 29 C2 FA | 	rdbyte	local06, local01
23d80     5F 28 0E F2 | 	cmp	local06, #95 wz
23d84     01 1E 06 F1 | 	add	local01, #1
23d88     F0 FF 9F AD |  if_e	jmp	#LR__3395
23d8c                 | LR__3396
23d8c     00 28 0E F2 | 	cmp	local06, #0 wz
23d90     5C 00 90 AD |  if_e	jmp	#LR__3398
23d94     30 28 56 F2 | 	cmps	local06, #48 wc
23d98     44 00 90 CD |  if_b	jmp	#LR__3397
23d9c     3A 28 56 F2 | 	cmps	local06, #58 wc
23da0     3C 00 90 3D |  if_ae	jmp	#LR__3397
23da4     10 13 02 F6 | 	mov	arg01, local02
23da8     00 90 20 FF 
23dac     00 14 06 F6 | 	mov	arg02, ##1092616192
23db0     64 F7 BF FD | 	call	#__system___float_mul
23db4     FD 20 02 F6 | 	mov	local02, result1
23db8     30 28 86 F1 | 	sub	local06, #48
23dbc     14 13 02 F6 | 	mov	arg01, local06
23dc0     50 F3 BF FD | 	call	#__system___float_fromuns
23dc4     FD 14 02 F6 | 	mov	arg02, result1
23dc8     10 13 02 F6 | 	mov	arg01, local02
23dcc     78 F3 BF FD | 	call	#__system___float_add
23dd0     FD 20 02 F6 | 	mov	local02, result1
23dd4     00 26 0E F2 | 	cmp	local05, #0 wz
23dd8     01 22 86 51 |  if_ne	sub	local03, #1
23ddc     98 FF 9F FD | 	jmp	#LR__3394
23de0                 | LR__3397
23de0     2E 28 0E F2 | 	cmp	local06, #46 wz
23de4     00 26 0E A2 |  if_e	cmp	local05, #0 wz
23de8     01 26 06 A6 |  if_e	mov	local05, #1
23dec     88 FF 9F AD |  if_e	jmp	#LR__3394
23df0                 | LR__3398
23df0     45 28 0E F2 | 	cmp	local06, #69 wz
23df4     65 28 0E 52 |  if_ne	cmp	local06, #101 wz
23df8     18 00 90 5D |  if_ne	jmp	#LR__3399
23dfc     0F 13 02 F6 | 	mov	arg01, local01
23e00     00 14 06 F6 | 	mov	arg02, #0
23e04     88 FD BF FD | 	call	#__system____builtin_atoi
23e08     11 FB 01 F1 | 	add	result1, local03
23e0c     FD 2A 02 F6 | 	mov	local07, result1
23e10     04 00 90 FD | 	jmp	#LR__3400
23e14                 | LR__3399
23e14     11 2B 02 F6 | 	mov	local07, local03
23e18                 | LR__3400
23e18     15 17 02 F6 | 	mov	arg03, local07
23e1c     10 13 02 F6 | 	mov	arg01, local02
23e20     00 90 20 FF 
23e24     00 14 06 F6 | 	mov	arg02, ##1092616192
23e28     F4 06 B0 FD | 	call	#__system___float_pow_n
23e2c     12 FB 61 F5 | 	xor	result1, local04
23e30     A7 F0 03 F6 | 	mov	ptra, fp
23e34     B2 00 A0 FD | 	call	#popregs_
23e38                 | __system____builtin_atof_ret
23e38     2D 00 64 FD | 	ret
23e3c                 | 
23e3c                 | __system____builtin_ilogb
23e3c     FC FB BF FD | 	call	#__system___float_Unpack
23e40     00 FE 0D F2 | 	cmp	result3, #0 wz
23e44     00 00 40 AF 
23e48     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
23e4c     24 00 90 AD |  if_e	jmp	#LR__3411
23e50     80 FC 0D F2 | 	cmp	result2, #128 wz
23e54     18 00 90 5D |  if_ne	jmp	#LR__3410
23e58     00 00 10 FF 
23e5c     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
23e60     1E FA CD A9 |  if_e	bmask	result1, #30
23e64     0C 00 90 AD |  if_e	jmp	#LR__3411
23e68     1F FA C5 F9 | 	decod	result1, #31
23e6c     04 00 90 FD | 	jmp	#LR__3411
23e70                 | LR__3410
23e70     FE FA 01 F6 | 	mov	result1, result2
23e74                 | LR__3411
23e74                 | __system____builtin_ilogb_ret
23e74     2D 00 64 FD | 	ret
23e78                 | 
23e78                 | __system____builtin_sinf
23e78     03 4A 05 F6 | 	mov	COUNT_, #3
23e7c     A8 00 A0 FD | 	call	#pushregs_
23e80     09 1F 02 F6 | 	mov	local01, arg01
23e84     87 64 20 FF 
23e88     DB 15 06 F6 | 	mov	arg02, ##1086918619
23e8c     8C F8 BF FD | 	call	#__system___float_div
23e90     FD 12 02 F6 | 	mov	arg01, result1
23e94     00 14 06 F6 | 	mov	arg02, #0
23e98     44 FB BF FD | 	call	#__system___float_tointeger
23e9c     FD 16 0A F6 | 	mov	arg03, result1 wz
23ea0     44 00 90 AD |  if_e	jmp	#LR__3420
23ea4     0B 13 52 F6 | 	abs	arg01, arg03 wc
23ea8     1F 20 C6 C9 |  if_b	decod	local02, #31
23eac     00 20 06 36 |  if_ae	mov	local02, #0
23eb0     60 F2 BF FD | 	call	#__system___float_fromuns
23eb4     10 FB 61 F5 | 	xor	result1, local02
23eb8     FD 12 02 F6 | 	mov	arg01, result1
23ebc     1E 14 C6 F9 | 	decod	arg02, #30
23ec0     54 F6 BF FD | 	call	#__system___float_mul
23ec4     FD 12 02 F6 | 	mov	arg01, result1
23ec8     87 24 20 FF 
23ecc     DB 15 06 F6 | 	mov	arg02, ##1078530011
23ed0     44 F6 BF FD | 	call	#__system___float_mul
23ed4     FD 14 02 F6 | 	mov	arg02, result1
23ed8     0F 13 02 F6 | 	mov	arg01, local01
23edc     1F 14 E6 F4 | 	bitnot	arg02, #31
23ee0     64 F2 BF FD | 	call	#__system___float_add
23ee4     FD 1E 02 F6 | 	mov	local01, result1
23ee8                 | LR__3420
23ee8     0F 13 02 F6 | 	mov	arg01, local01
23eec     66 E6 1E FF 
23ef0     CD 14 06 F6 | 	mov	arg02, ##1036831949
23ef4     01 16 06 F6 | 	mov	arg03, #1
23ef8     50 FA BF FD | 	call	#__system___float_cmp
23efc     00 FA 55 F2 | 	cmps	result1, #0 wc
23f00     5C 00 90 3D |  if_ae	jmp	#LR__3421
23f04     0F 13 02 F6 | 	mov	arg01, local01
23f08     66 E6 5E FF 
23f0c     CD 14 06 F6 | 	mov	arg02, ##-1110651699
23f10     01 16 66 F6 | 	neg	arg03, #1
23f14     34 FA BF FD | 	call	#__system___float_cmp
23f18     01 FA 55 F2 | 	cmps	result1, #1 wc
23f1c     40 00 90 CD |  if_b	jmp	#LR__3421
23f20     0F 13 02 F6 | 	mov	arg01, local01
23f24     0F 15 02 F6 | 	mov	arg02, local01
23f28     EC F5 BF FD | 	call	#__system___float_mul
23f2c     FD 12 02 F6 | 	mov	arg01, result1
23f30     0F 15 02 F6 | 	mov	arg02, local01
23f34     E0 F5 BF FD | 	call	#__system___float_mul
23f38     FD 12 02 F6 | 	mov	arg01, result1
23f3c     00 60 20 FF 
23f40     00 14 06 F6 | 	mov	arg02, ##1086324736
23f44     D4 F7 BF FD | 	call	#__system___float_div
23f48     FD 14 02 F6 | 	mov	arg02, result1
23f4c     0F 13 02 F6 | 	mov	arg01, local01
23f50     1F 14 E6 F4 | 	bitnot	arg02, #31
23f54     F0 F1 BF FD | 	call	#__system___float_add
23f58     FD 22 02 F6 | 	mov	local03, result1
23f5c     54 00 90 FD | 	jmp	#LR__3422
23f60                 | LR__3421
23f60     0F 13 02 F6 | 	mov	arg01, local01
23f64     7C 91 26 FF 
23f68     83 15 06 F6 | 	mov	arg02, ##1294137731
23f6c     A8 F5 BF FD | 	call	#__system___float_mul
23f70     FD 12 02 F6 | 	mov	arg01, result1
23f74     00 14 06 F6 | 	mov	arg02, #0
23f78     64 FA BF FD | 	call	#__system___float_tointeger
23f7c     02 FA 65 F0 | 	shl	result1, #2
23f80     00 00 A0 FF 
23f84     FD 00 48 FD | 	qrotate	##1073741824, result1
23f88     19 12 62 FD | 	getqy	arg01
23f8c     09 13 52 F6 | 	abs	arg01, arg01 wc
23f90     1F 20 C6 C9 |  if_b	decod	local02, #31
23f94     00 20 06 36 |  if_ae	mov	local02, #0
23f98     78 F1 BF FD | 	call	#__system___float_fromuns
23f9c     10 FB 61 F5 | 	xor	result1, local02
23fa0     FD 12 02 F6 | 	mov	arg01, result1
23fa4     00 40 27 FF 
23fa8     00 14 06 F6 | 	mov	arg02, ##1317011456
23fac     6C F7 BF FD | 	call	#__system___float_div
23fb0     FD 22 02 F6 | 	mov	local03, result1
23fb4                 | LR__3422
23fb4     11 FB 01 F6 | 	mov	result1, local03
23fb8     A7 F0 03 F6 | 	mov	ptra, fp
23fbc     B2 00 A0 FD | 	call	#popregs_
23fc0                 | __system____builtin_sinf_ret
23fc0     2D 00 64 FD | 	ret
23fc4                 | 
23fc4                 | __system____builtin_tanf
23fc4     02 4A 05 F6 | 	mov	COUNT_, #2
23fc8     A8 00 A0 FD | 	call	#pushregs_
23fcc     09 1F 02 F6 | 	mov	local01, arg01
23fd0     A4 FE BF FD | 	call	#__system____builtin_sinf
23fd4     FD 20 02 F6 | 	mov	local02, result1
23fd8     0F 15 02 F6 | 	mov	arg02, local01
23fdc     87 E4 1F FF 
23fe0     DB 13 06 F6 | 	mov	arg01, ##1070141403
23fe4     1F 14 E6 F4 | 	bitnot	arg02, #31
23fe8     5C F1 BF FD | 	call	#__system___float_add
23fec     FD 12 02 F6 | 	mov	arg01, result1
23ff0     84 FE BF FD | 	call	#__system____builtin_sinf
23ff4     FD 14 02 F6 | 	mov	arg02, result1
23ff8     10 13 02 F6 | 	mov	arg01, local02
23ffc     1C F7 BF FD | 	call	#__system___float_div
24000     A7 F0 03 F6 | 	mov	ptra, fp
24004     B2 00 A0 FD | 	call	#popregs_
24008                 | __system____builtin_tanf_ret
24008     2D 00 64 FD | 	ret
2400c                 | 
2400c                 | __system____builtin_asinf
2400c     01 4A 05 F6 | 	mov	COUNT_, #1
24010     A8 00 A0 FD | 	call	#pushregs_
24014     09 1F 02 F6 | 	mov	local01, arg01
24018     0F 15 02 F6 | 	mov	arg02, local01
2401c     0F 13 02 F6 | 	mov	arg01, local01
24020     F4 F4 BF FD | 	call	#__system___float_mul
24024     FD 14 02 F6 | 	mov	arg02, result1
24028     00 C0 1F FF 
2402c     00 12 06 F6 | 	mov	arg01, ##1065353216
24030     1F 14 E6 F4 | 	bitnot	arg02, #31
24034     10 F1 BF FD | 	call	#__system___float_add
24038     FD 12 02 F6 | 	mov	arg01, result1
2403c     00 F4 BF FD | 	call	#__system___float_sqrt
24040     FD 14 02 F6 | 	mov	arg02, result1
24044     0F 13 02 F6 | 	mov	arg01, local01
24048     58 00 B0 FD | 	call	#__system____builtin_atan2f
2404c     A7 F0 03 F6 | 	mov	ptra, fp
24050     B2 00 A0 FD | 	call	#popregs_
24054                 | __system____builtin_asinf_ret
24054     2D 00 64 FD | 	ret
24058                 | 
24058                 | __system____builtin_acosf
24058     01 4A 05 F6 | 	mov	COUNT_, #1
2405c     A8 00 A0 FD | 	call	#pushregs_
24060     09 1F 02 F6 | 	mov	local01, arg01
24064     0F 15 02 F6 | 	mov	arg02, local01
24068     0F 13 02 F6 | 	mov	arg01, local01
2406c     A8 F4 BF FD | 	call	#__system___float_mul
24070     FD 14 02 F6 | 	mov	arg02, result1
24074     00 C0 1F FF 
24078     00 12 06 F6 | 	mov	arg01, ##1065353216
2407c     1F 14 E6 F4 | 	bitnot	arg02, #31
24080     C4 F0 BF FD | 	call	#__system___float_add
24084     FD 12 02 F6 | 	mov	arg01, result1
24088     B4 F3 BF FD | 	call	#__system___float_sqrt
2408c     FD 12 02 F6 | 	mov	arg01, result1
24090     0F 15 02 F6 | 	mov	arg02, local01
24094     0C 00 B0 FD | 	call	#__system____builtin_atan2f
24098     A7 F0 03 F6 | 	mov	ptra, fp
2409c     B2 00 A0 FD | 	call	#popregs_
240a0                 | __system____builtin_acosf_ret
240a0     2D 00 64 FD | 	ret
240a4                 | 
240a4                 | __system____builtin_atan2f
240a4     04 4A 05 F6 | 	mov	COUNT_, #4
240a8     A8 00 A0 FD | 	call	#pushregs_
240ac     09 1F 02 F6 | 	mov	local01, arg01
240b0     0A 21 02 F6 | 	mov	local02, arg02
240b4     0F 13 02 F6 | 	mov	arg01, local01
240b8     00 14 06 F6 | 	mov	arg02, #0
240bc     01 16 06 F6 | 	mov	arg03, #1
240c0     88 F8 BF FD | 	call	#__system___float_cmp
240c4     00 FA 0D F2 | 	cmp	result1, #0 wz
240c8     28 00 90 5D |  if_ne	jmp	#LR__3430
240cc     10 13 02 F6 | 	mov	arg01, local02
240d0     00 14 06 F6 | 	mov	arg02, #0
240d4     01 16 06 F6 | 	mov	arg03, #1
240d8     70 F8 BF FD | 	call	#__system___float_cmp
240dc     00 FA 55 F2 | 	cmps	result1, #0 wc
240e0     87 24 60 CF 
240e4     DB FB 05 C6 |  if_b	mov	result1, ##-1068953637
240e8     DC 00 90 CD |  if_b	jmp	#LR__3431
240ec     00 FA 05 F6 | 	mov	result1, #0
240f0     D4 00 90 FD | 	jmp	#LR__3431
240f4                 | LR__3430
240f4     10 13 02 F6 | 	mov	arg01, local02
240f8     10 15 02 F6 | 	mov	arg02, local02
240fc     18 F4 BF FD | 	call	#__system___float_mul
24100     FD 22 02 F6 | 	mov	local03, result1
24104     0F 13 02 F6 | 	mov	arg01, local01
24108     0F 15 02 F6 | 	mov	arg02, local01
2410c     08 F4 BF FD | 	call	#__system___float_mul
24110     FD 14 02 F6 | 	mov	arg02, result1
24114     11 13 02 F6 | 	mov	arg01, local03
24118     2C F0 BF FD | 	call	#__system___float_add
2411c     FD 12 02 F6 | 	mov	arg01, result1
24120     1C F3 BF FD | 	call	#__system___float_sqrt
24124     FD 22 02 F6 | 	mov	local03, result1
24128     10 13 02 F6 | 	mov	arg01, local02
2412c     11 15 02 F6 | 	mov	arg02, local03
24130     E8 F5 BF FD | 	call	#__system___float_div
24134     FD 20 02 F6 | 	mov	local02, result1
24138     0F 13 02 F6 | 	mov	arg01, local01
2413c     11 15 02 F6 | 	mov	arg02, local03
24140     D8 F5 BF FD | 	call	#__system___float_div
24144     FD 1E 02 F6 | 	mov	local01, result1
24148     00 40 27 FF 
2414c     00 12 06 F6 | 	mov	arg01, ##1317011456
24150     10 15 02 F6 | 	mov	arg02, local02
24154     C0 F3 BF FD | 	call	#__system___float_mul
24158     FD 12 02 F6 | 	mov	arg01, result1
2415c     00 14 06 F6 | 	mov	arg02, #0
24160     7C F8 BF FD | 	call	#__system___float_tointeger
24164     FD 22 02 F6 | 	mov	local03, result1
24168     00 40 27 FF 
2416c     00 12 06 F6 | 	mov	arg01, ##1317011456
24170     0F 15 02 F6 | 	mov	arg02, local01
24174     A0 F3 BF FD | 	call	#__system___float_mul
24178     FD 12 02 F6 | 	mov	arg01, result1
2417c     00 14 06 F6 | 	mov	arg02, #0
24180     5C F8 BF FD | 	call	#__system___float_tointeger
24184     FD 22 52 FD | 	qvector	local03, result1
24188     87 24 20 FF 
2418c     DB 23 06 F6 | 	mov	local03, ##1078530011
24190     19 12 62 FD | 	getqy	arg01
24194     01 12 C6 F0 | 	sar	arg01, #1
24198     09 13 52 F6 | 	abs	arg01, arg01 wc
2419c     1F 24 C6 C9 |  if_b	decod	local04, #31
241a0     00 24 06 36 |  if_ae	mov	local04, #0
241a4     6C EF BF FD | 	call	#__system___float_fromuns
241a8     12 FB 61 F5 | 	xor	result1, local04
241ac     FD 12 02 F6 | 	mov	arg01, result1
241b0     00 40 27 FF 
241b4     00 14 06 F6 | 	mov	arg02, ##1317011456
241b8     60 F5 BF FD | 	call	#__system___float_div
241bc     FD 14 02 F6 | 	mov	arg02, result1
241c0     11 13 02 F6 | 	mov	arg01, local03
241c4     50 F3 BF FD | 	call	#__system___float_mul
241c8                 | LR__3431
241c8     A7 F0 03 F6 | 	mov	ptra, fp
241cc     B2 00 A0 FD | 	call	#popregs_
241d0                 | __system____builtin_atan2f_ret
241d0     2D 00 64 FD | 	ret
241d4                 | 
241d4                 | __system____builtin_exp2f
241d4     04 4A 05 F6 | 	mov	COUNT_, #4
241d8     A8 00 A0 FD | 	call	#pushregs_
241dc     09 1F 02 F6 | 	mov	local01, arg01
241e0     00 7F 21 FF 
241e4     00 14 06 F6 | 	mov	arg02, ##1123942400
241e8     01 16 66 F6 | 	neg	arg03, #1
241ec     5C F7 BF FD | 	call	#__system___float_cmp
241f0     00 FA 55 F2 | 	cmps	result1, #0 wc
241f4     00 C0 3F 3F 
241f8     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
241fc     DC 00 90 3D |  if_ae	jmp	#LR__3441
24200     0F 13 02 F6 | 	mov	arg01, local01
24204     00 7F 61 FF 
24208     00 14 06 F6 | 	mov	arg02, ##-1023541248
2420c     01 16 06 F6 | 	mov	arg03, #1
24210     38 F7 BF FD | 	call	#__system___float_cmp
24214     00 FA 55 F2 | 	cmps	result1, #0 wc
24218     00 FA 05 C6 |  if_b	mov	result1, #0
2421c     BC 00 90 CD |  if_b	jmp	#LR__3441
24220     0F 13 02 F6 | 	mov	arg01, local01
24224     00 14 06 F6 | 	mov	arg02, #0
24228     B4 F7 BF FD | 	call	#__system___float_tointeger
2422c     FD 20 02 F6 | 	mov	local02, result1
24230     10 13 52 F6 | 	abs	arg01, local02 wc
24234     1F 22 C6 C9 |  if_b	decod	local03, #31
24238     00 22 06 36 |  if_ae	mov	local03, #0
2423c     D4 EE BF FD | 	call	#__system___float_fromuns
24240     11 FB 61 F5 | 	xor	result1, local03
24244     FD 14 02 F6 | 	mov	arg02, result1
24248     0F 13 02 F6 | 	mov	arg01, local01
2424c     1F 14 E6 F4 | 	bitnot	arg02, #31
24250     F4 EE BF FD | 	call	#__system___float_add
24254     FD 24 02 F6 | 	mov	local04, result1
24258     12 13 02 F6 | 	mov	arg01, local04
2425c     00 14 06 F6 | 	mov	arg02, #0
24260     01 16 06 F6 | 	mov	arg03, #1
24264     E4 F6 BF FD | 	call	#__system___float_cmp
24268     00 FA 55 F2 | 	cmps	result1, #0 wc
2426c     18 00 90 3D |  if_ae	jmp	#LR__3440
24270     12 13 02 F6 | 	mov	arg01, local04
24274     00 C0 1F FF 
24278     00 14 06 F6 | 	mov	arg02, ##1065353216
2427c     C8 EE BF FD | 	call	#__system___float_add
24280     FD 24 02 F6 | 	mov	local04, result1
24284     01 20 86 F1 | 	sub	local02, #1
24288                 | LR__3440
24288     7F 20 06 F1 | 	add	local02, #127
2428c     17 20 66 F0 | 	shl	local02, #23
24290     12 13 02 F6 | 	mov	arg01, local04
24294     00 80 26 FF 
24298     00 14 06 F6 | 	mov	arg02, ##1291845632
2429c     78 F2 BF FD | 	call	#__system___float_mul
242a0     FD 12 02 F6 | 	mov	arg01, result1
242a4     00 14 06 F6 | 	mov	arg02, #0
242a8     34 F7 BF FD | 	call	#__system___float_tointeger
242ac     FD 24 0A F6 | 	mov	local04, result1 wz
242b0     10 FB 01 A6 |  if_e	mov	result1, local02
242b4     24 00 90 AD |  if_e	jmp	#LR__3441
242b8     3E 24 26 F4 | 	bith	local04, #62
242bc     0F 24 62 FD | 	qexp	local04
242c0     10 13 02 F6 | 	mov	arg01, local02
242c4     18 14 62 FD | 	getqx	arg02
242c8     01 14 06 F1 | 	add	arg02, #1
242cc     01 14 46 F0 | 	shr	arg02, #1
242d0     00 80 1F FF 
242d4     00 14 06 F1 | 	add	arg02, ##1056964608
242d8     3C F2 BF FD | 	call	#__system___float_mul
242dc                 | LR__3441
242dc     A7 F0 03 F6 | 	mov	ptra, fp
242e0     B2 00 A0 FD | 	call	#popregs_
242e4                 | __system____builtin_exp2f_ret
242e4     2D 00 64 FD | 	ret
242e8                 | 
242e8                 | __system____builtin_log2f
242e8     06 4A 05 F6 | 	mov	COUNT_, #6
242ec     A8 00 A0 FD | 	call	#pushregs_
242f0     09 1F 02 F6 | 	mov	local01, arg01
242f4     09 21 0A F6 | 	mov	local02, arg01 wz
242f8     00 00 40 5F 
242fc     00 20 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
24300     00 40 00 AF 
24304     00 FA 65 A6 |  if_e	neg	result1, ##8388608
24308     08 01 90 AD |  if_e	jmp	#LR__3454
2430c     00 20 56 F2 | 	cmps	local02, #0 wc
24310     00 E0 3F CF 
24314     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
24318     F8 00 90 CD |  if_b	jmp	#LR__3454
2431c     0F 13 02 F6 | 	mov	arg01, local01
24320     00 90 20 FF 
24324     00 14 06 F6 | 	mov	arg02, ##1092616192
24328     01 16 06 F6 | 	mov	arg03, #1
2432c     1C F6 BF FD | 	call	#__system___float_cmp
24330     00 FA 0D F2 | 	cmp	result1, #0 wz
24334     4D 2A 20 AF 
24338     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
2433c     D4 00 90 AD |  if_e	jmp	#LR__3454
24340     0F 13 02 F6 | 	mov	arg01, local01
24344     FC 16 20 FF 
24348     54 14 06 F6 | 	mov	arg02, ##1076754516
2434c     01 16 06 F6 | 	mov	arg03, #1
24350     F8 F5 BF FD | 	call	#__system___float_cmp
24354     00 FA 0D F2 | 	cmp	result1, #0 wz
24358     55 DC 1F AF 
2435c     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
24360     B0 00 90 AD |  if_e	jmp	#LR__3454
24364     10 23 02 F6 | 	mov	local03, local02
24368     17 22 46 F0 | 	shr	local03, #23
2436c     11 23 E2 F8 | 	getbyte	local03, local03, #0
24370     17 21 06 F4 | 	bitl	local02, #279
24374     10 25 02 F6 | 	mov	local04, local02
24378     FF 22 0E F2 | 	cmp	local03, #255 wz
2437c     1C 00 90 5D |  if_ne	jmp	#LR__3450
24380     00 24 0E F2 | 	cmp	local04, #0 wz
24384     00 C0 3F 5F 
24388     00 26 06 56 |  if_ne	mov	local05, ##2139095040
2438c     00 E0 3F AF 
24390     00 26 06 A6 |  if_e	mov	local05, ##2143289344
24394     13 FB 01 F6 | 	mov	result1, local05
24398     78 00 90 FD | 	jmp	#LR__3454
2439c                 | LR__3450
2439c     00 22 0E F2 | 	cmp	local03, #0 wz
243a0     17 24 26 54 |  if_ne	bith	local04, #23
243a4     7F 22 86 51 |  if_ne	sub	local03, #127
243a8     28 00 90 5D |  if_ne	jmp	#LR__3453
243ac     00 24 0E F2 | 	cmp	local04, #0 wz
243b0     00 40 00 AF 
243b4     00 FA 65 A6 |  if_e	neg	result1, ##8388608
243b8     58 00 90 AD |  if_e	jmp	#LR__3454
243bc     7E 22 66 F6 | 	neg	local03, #126
243c0     97 08 48 FB | 	callpa	#(@LR__3452-@LR__3451)>>2,fcache_load_ptr_
243c4                 | LR__3451
243c4     17 24 2E F4 | 	testbn	local04, #23 wz
243c8     01 24 66 A0 |  if_e	shl	local04, #1
243cc     01 22 06 A1 |  if_e	add	local03, #1
243d0     F0 FF 9F AD |  if_e	jmp	#LR__3451
243d4                 | LR__3452
243d4                 | LR__3453
243d4     0E 24 62 FD | 	qlog	local04
243d8     01 22 86 F1 | 	sub	local03, #1
243dc     11 13 52 F6 | 	abs	arg01, local03 wc
243e0     1F 28 C6 C9 |  if_b	decod	local06, #31
243e4     00 28 06 36 |  if_ae	mov	local06, #0
243e8     18 26 62 FD | 	getqx	local05
243ec     9B 26 06 F4 | 	bitl	local05, #155
243f0     08 26 06 F1 | 	add	local05, #8
243f4     04 26 46 F0 | 	shr	local05, #4
243f8     00 C0 1F FF 
243fc     00 26 06 F1 | 	add	local05, ##1065353216
24400     10 ED BF FD | 	call	#__system___float_fromuns
24404     14 FB 61 F5 | 	xor	result1, local06
24408     FD 14 02 F6 | 	mov	arg02, result1
2440c     13 13 02 F6 | 	mov	arg01, local05
24410     34 ED BF FD | 	call	#__system___float_add
24414                 | LR__3454
24414     A7 F0 03 F6 | 	mov	ptra, fp
24418     B2 00 A0 FD | 	call	#popregs_
2441c                 | __system____builtin_log2f_ret
2441c     2D 00 64 FD | 	ret
24420                 | 
24420                 | __system____builtin_powf
24420     04 4A 05 F6 | 	mov	COUNT_, #4
24424     A8 00 A0 FD | 	call	#pushregs_
24428     09 1F 02 F6 | 	mov	local01, arg01
2442c     0A 21 02 F6 | 	mov	local02, arg02
24430     10 13 02 F6 | 	mov	arg01, local02
24434     00 14 06 F6 | 	mov	arg02, #0
24438     A4 F5 BF FD | 	call	#__system___float_tointeger
2443c     FD 22 02 F6 | 	mov	local03, result1
24440     11 13 52 F6 | 	abs	arg01, local03 wc
24444     1F 24 C6 C9 |  if_b	decod	local04, #31
24448     00 24 06 36 |  if_ae	mov	local04, #0
2444c     C4 EC BF FD | 	call	#__system___float_fromuns
24450     12 FB 61 F5 | 	xor	result1, local04
24454     FD 12 02 F6 | 	mov	arg01, result1
24458     10 15 02 F6 | 	mov	arg02, local02
2445c     01 16 06 F6 | 	mov	arg03, #1
24460     E8 F4 BF FD | 	call	#__system___float_cmp
24464     00 FA 0D F2 | 	cmp	result1, #0 wz
24468     18 00 90 5D |  if_ne	jmp	#LR__3460
2446c     00 C0 1F FF 
24470     00 12 06 F6 | 	mov	arg01, ##1065353216
24474     0F 15 02 F6 | 	mov	arg02, local01
24478     11 17 02 F6 | 	mov	arg03, local03
2447c     A0 00 B0 FD | 	call	#__system___float_pow_n
24480     58 00 90 FD | 	jmp	#LR__3461
24484                 | LR__3460
24484     0F 13 02 F6 | 	mov	arg01, local01
24488     00 14 06 F6 | 	mov	arg02, #0
2448c     01 16 06 F6 | 	mov	arg03, #1
24490     B8 F4 BF FD | 	call	#__system___float_cmp
24494     00 FA 55 F2 | 	cmps	result1, #0 wc
24498     00 E0 3F CF 
2449c     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
244a0     38 00 90 CD |  if_b	jmp	#LR__3461
244a4     0F 13 02 F6 | 	mov	arg01, local01
244a8     00 14 06 F6 | 	mov	arg02, #0
244ac     01 16 06 F6 | 	mov	arg03, #1
244b0     98 F4 BF FD | 	call	#__system___float_cmp
244b4     00 FA 0D F2 | 	cmp	result1, #0 wz
244b8     00 FA 05 A6 |  if_e	mov	result1, #0
244bc     1C 00 90 AD |  if_e	jmp	#LR__3461
244c0     0F 13 02 F6 | 	mov	arg01, local01
244c4     20 FE BF FD | 	call	#__system____builtin_log2f
244c8     FD 12 02 F6 | 	mov	arg01, result1
244cc     10 15 02 F6 | 	mov	arg02, local02
244d0     44 F0 BF FD | 	call	#__system___float_mul
244d4     FD 12 02 F6 | 	mov	arg01, result1
244d8     F8 FC BF FD | 	call	#__system____builtin_exp2f
244dc                 | LR__3461
244dc     A7 F0 03 F6 | 	mov	ptra, fp
244e0     B2 00 A0 FD | 	call	#popregs_
244e4                 | __system____builtin_powf_ret
244e4     2D 00 64 FD | 	ret
244e8                 | 
244e8                 | __system____builtin_logbase
244e8     02 4A 05 F6 | 	mov	COUNT_, #2
244ec     A8 00 A0 FD | 	call	#pushregs_
244f0     09 1F 02 F6 | 	mov	local01, arg01
244f4     0A 13 02 F6 | 	mov	arg01, arg02
244f8     EC FD BF FD | 	call	#__system____builtin_log2f
244fc     FD 20 02 F6 | 	mov	local02, result1
24500     0F 13 02 F6 | 	mov	arg01, local01
24504     E0 FD BF FD | 	call	#__system____builtin_log2f
24508     FD 14 02 F6 | 	mov	arg02, result1
2450c     10 13 02 F6 | 	mov	arg01, local02
24510     08 F2 BF FD | 	call	#__system___float_div
24514     A7 F0 03 F6 | 	mov	ptra, fp
24518     B2 00 A0 FD | 	call	#popregs_
2451c                 | __system____builtin_logbase_ret
2451c     2D 00 64 FD | 	ret
24520                 | 
24520                 | __system___float_pow_n
24520     05 4A 05 F6 | 	mov	COUNT_, #5
24524     A8 00 A0 FD | 	call	#pushregs_
24528     09 1F 02 F6 | 	mov	local01, arg01
2452c     0A 21 02 F6 | 	mov	local02, arg02
24530     0B 23 02 F6 | 	mov	local03, arg03
24534     00 22 56 F2 | 	cmps	local03, #0 wc
24538     18 00 90 3D |  if_ae	jmp	#LR__3470
2453c     01 24 06 F6 | 	mov	local04, #1
24540     11 23 62 F6 | 	neg	local03, local03
24544     00 22 56 F2 | 	cmps	local03, #0 wc
24548     00 FA 05 C6 |  if_b	mov	result1, #0
2454c     94 00 90 CD |  if_b	jmp	#LR__3478
24550     04 00 90 FD | 	jmp	#LR__3471
24554                 | LR__3470
24554     00 24 06 F6 | 	mov	local04, #0
24558                 | LR__3471
24558     00 C0 1F FF 
2455c     00 26 06 F6 | 	mov	local05, ##1065353216
24560                 | LR__3472
24560     01 22 56 F2 | 	cmps	local03, #1 wc
24564     30 00 90 CD |  if_b	jmp	#LR__3474
24568     01 22 CE F7 | 	test	local03, #1 wz
2456c     10 00 90 AD |  if_e	jmp	#LR__3473
24570     13 13 02 F6 | 	mov	arg01, local05
24574     10 15 02 F6 | 	mov	arg02, local02
24578     9C EF BF FD | 	call	#__system___float_mul
2457c     FD 26 02 F6 | 	mov	local05, result1
24580                 | LR__3473
24580     01 22 C6 F0 | 	sar	local03, #1
24584     10 13 02 F6 | 	mov	arg01, local02
24588     10 15 02 F6 | 	mov	arg02, local02
2458c     88 EF BF FD | 	call	#__system___float_mul
24590     FD 20 02 F6 | 	mov	local02, result1
24594     C8 FF 9F FD | 	jmp	#LR__3472
24598                 | LR__3474
24598     00 24 0E F2 | 	cmp	local04, #0 wz
2459c     14 00 90 AD |  if_e	jmp	#LR__3475
245a0     0F 13 02 F6 | 	mov	arg01, local01
245a4     13 15 02 F6 | 	mov	arg02, local05
245a8     70 F1 BF FD | 	call	#__system___float_div
245ac     FD 26 02 F6 | 	mov	local05, result1
245b0     2C 00 90 FD | 	jmp	#LR__3477
245b4                 | LR__3475
245b4     0F 13 02 F6 | 	mov	arg01, local01
245b8     00 C0 1F FF 
245bc     00 14 06 F6 | 	mov	arg02, ##1065353216
245c0     01 16 06 F6 | 	mov	arg03, #1
245c4     84 F3 BF FD | 	call	#__system___float_cmp
245c8     00 FA 0D F2 | 	cmp	result1, #0 wz
245cc     10 00 90 AD |  if_e	jmp	#LR__3476
245d0     0F 13 02 F6 | 	mov	arg01, local01
245d4     13 15 02 F6 | 	mov	arg02, local05
245d8     3C EF BF FD | 	call	#__system___float_mul
245dc     FD 26 02 F6 | 	mov	local05, result1
245e0                 | LR__3476
245e0                 | LR__3477
245e0     13 FB 01 F6 | 	mov	result1, local05
245e4                 | LR__3478
245e4     A7 F0 03 F6 | 	mov	ptra, fp
245e8     B2 00 A0 FD | 	call	#popregs_
245ec                 | __system___float_pow_n_ret
245ec     2D 00 64 FD | 	ret
245f0                 | 
245f0                 | __system___gc_ptrs
245f0     EC 00 02 F6 | 	mov	_var01, __heap_ptr
245f4     00 03 02 F6 | 	mov	_var02, _var01
245f8     76 01 00 FF 
245fc     F8 03 06 F1 | 	add	_var02, ##191992
24600     00 FD 09 FB | 	rdlong	result2, _var01 wz
24604     74 00 90 5D |  if_ne	jmp	#LR__3480
24608     01 FD 01 F6 | 	mov	result2, _var02
2460c     00 FD 81 F1 | 	sub	result2, _var01
24610     00 03 58 FC | 	wrword	#1, _var01
24614     00 FB 01 F6 | 	mov	result1, _var01
24618     02 FA 05 F1 | 	add	result1, #2
2461c     36 00 80 FF 
24620     FD 20 59 FC | 	wrword	##27792, result1
24624     00 FB 01 F6 | 	mov	result1, _var01
24628     04 FA 05 F1 | 	add	result1, #4
2462c     FD 00 58 FC | 	wrword	#0, result1
24630     00 FB 01 F6 | 	mov	result1, _var01
24634     06 FA 05 F1 | 	add	result1, #6
24638     FD 02 58 FC | 	wrword	#1, result1
2463c     10 00 06 F1 | 	add	_var01, #16
24640     FE FC 51 F6 | 	abs	result2, result2 wc
24644     04 FC 45 F0 | 	shr	result2, #4
24648     FE FC 81 F6 | 	negc	result2, result2
2464c     00 FD 51 FC | 	wrword	result2, _var01
24650     00 FD 01 F6 | 	mov	result2, _var01
24654     02 FC 05 F1 | 	add	result2, #2
24658     36 00 80 FF 
2465c     FE 1E 59 FC | 	wrword	##27791, result2
24660     00 FD 01 F6 | 	mov	result2, _var01
24664     04 FC 05 F1 | 	add	result2, #4
24668     FE 00 58 FC | 	wrword	#0, result2
2466c     00 FD 01 F6 | 	mov	result2, _var01
24670     06 FC 05 F1 | 	add	result2, #6
24674     FE 00 58 FC | 	wrword	#0, result2
24678     10 00 86 F1 | 	sub	_var01, #16
2467c                 | LR__3480
2467c     00 FB 01 F6 | 	mov	result1, _var01
24680     01 FD 01 F6 | 	mov	result2, _var02
24684                 | __system___gc_ptrs_ret
24684     2D 00 64 FD | 	ret
24688                 | 
24688                 | __system___gc_tryalloc
24688     0B 4A 05 F6 | 	mov	COUNT_, #11
2468c     A8 00 A0 FD | 	call	#pushregs_
24690     09 1F 02 F6 | 	mov	local01, arg01
24694     0A 21 02 F6 | 	mov	local02, arg02
24698     54 FF BF FD | 	call	#__system___gc_ptrs
2469c     FD 22 02 F6 | 	mov	local03, result1
246a0     FE 24 02 F6 | 	mov	local04, result2
246a4     11 27 02 F6 | 	mov	local05, local03
246a8     00 28 06 F6 | 	mov	local06, #0
246ac     97 1E 48 FB | 	callpa	#(@LR__3491-@LR__3490)>>2,fcache_load_ptr_
246b0                 | LR__3490
246b0     13 2B 02 F6 | 	mov	local07, local05
246b4     06 26 06 F1 | 	add	local05, #6
246b8     13 15 EA FA | 	rdword	arg02, local05 wz
246bc     11 13 02 F6 | 	mov	arg01, local03
246c0     00 FA 05 A6 |  if_e	mov	result1, #0
246c4     04 14 66 50 |  if_ne	shl	arg02, #4
246c8     0A 13 02 51 |  if_ne	add	arg01, arg02
246cc     09 FB 01 56 |  if_ne	mov	result1, arg01
246d0     FD 26 0A F6 | 	mov	local05, result1 wz
246d4     13 29 E2 5A |  if_ne	rdword	local06, local05
246d8     00 26 0E F2 | 	cmp	local05, #0 wz
246dc     12 27 52 52 |  if_ne	cmps	local05, local04 wc
246e0     08 00 90 1D |  if_a	jmp	#LR__3492
246e4     14 1F 5A 52 |  if_ne	cmps	local01, local06 wcz
246e8     C4 FF 9F 1D |  if_a	jmp	#LR__3490
246ec                 | LR__3491
246ec                 | LR__3492
246ec     00 26 0E F2 | 	cmp	local05, #0 wz
246f0     13 FB 01 A6 |  if_e	mov	result1, local05
246f4     3C 01 90 AD |  if_e	jmp	#LR__3495
246f8     13 FD 01 F6 | 	mov	result2, local05
246fc     06 FC 05 F1 | 	add	result2, #6
24700     FE 2C E2 FA | 	rdword	local08, result2
24704     14 1F 52 F2 | 	cmps	local01, local06 wc
24708     C0 00 90 3D |  if_ae	jmp	#LR__3494
2470c     13 1F 52 FC | 	wrword	local01, local05
24710     13 13 02 F6 | 	mov	arg01, local05
24714     0F 2D 02 F6 | 	mov	local08, local01
24718     04 2C 66 F0 | 	shl	local08, #4
2471c     16 13 02 F1 | 	add	arg01, local08
24720     0F 29 82 F1 | 	sub	local06, local01
24724     09 29 52 FC | 	wrword	local06, arg01
24728     09 2D 02 F6 | 	mov	local08, arg01
2472c     02 2C 06 F1 | 	add	local08, #2
24730     36 00 80 FF 
24734     16 1F 59 FC | 	wrword	##27791, local08
24738     13 15 0A F6 | 	mov	arg02, local05 wz
2473c     00 FA 05 A6 |  if_e	mov	result1, #0
24740     11 15 82 51 |  if_ne	sub	arg02, local03
24744     04 14 46 50 |  if_ne	shr	arg02, #4
24748     0A FB 01 56 |  if_ne	mov	result1, arg02
2474c     09 2D 02 F6 | 	mov	local08, arg01
24750     04 2C 06 F1 | 	add	local08, #4
24754     16 FB 51 FC | 	wrword	result1, local08
24758     13 2D 02 F6 | 	mov	local08, local05
2475c     06 2C 06 F1 | 	add	local08, #6
24760     09 15 02 F6 | 	mov	arg02, arg01
24764     16 2D E2 FA | 	rdword	local08, local08
24768     06 14 06 F1 | 	add	arg02, #6
2476c     0A 2D 52 FC | 	wrword	local08, arg02
24770     09 2F 02 F6 | 	mov	local09, arg01
24774     17 15 0A F6 | 	mov	arg02, local09 wz
24778     00 FA 05 A6 |  if_e	mov	result1, #0
2477c     11 15 82 51 |  if_ne	sub	arg02, local03
24780     04 14 46 50 |  if_ne	shr	arg02, #4
24784     0A FB 01 56 |  if_ne	mov	result1, arg02
24788     FD 2C 02 F6 | 	mov	local08, result1
2478c     09 31 EA FA | 	rdword	local10, arg01 wz
24790     00 FA 05 A6 |  if_e	mov	result1, #0
24794     04 30 66 50 |  if_ne	shl	local10, #4
24798     18 13 02 51 |  if_ne	add	arg01, local10
2479c     09 FB 01 56 |  if_ne	mov	result1, arg01
247a0     FD 32 0A F6 | 	mov	local11, result1 wz
247a4     24 00 90 AD |  if_e	jmp	#LR__3493
247a8     12 33 52 F2 | 	cmps	local11, local04 wc
247ac     1C 00 90 3D |  if_ae	jmp	#LR__3493
247b0     17 15 0A F6 | 	mov	arg02, local09 wz
247b4     00 FA 05 A6 |  if_e	mov	result1, #0
247b8     11 15 82 51 |  if_ne	sub	arg02, local03
247bc     04 14 46 50 |  if_ne	shr	arg02, #4
247c0     0A FB 01 56 |  if_ne	mov	result1, arg02
247c4     04 32 06 F1 | 	add	local11, #4
247c8     19 FB 51 FC | 	wrword	result1, local11
247cc                 | LR__3493
247cc                 | LR__3494
247cc     06 2A 06 F1 | 	add	local07, #6
247d0     15 2D 52 FC | 	wrword	local08, local07
247d4     36 00 00 FF 
247d8     80 2E 06 F6 | 	mov	local09, ##27776
247dc     10 2F 42 F5 | 	or	local09, local02
247e0     00 FA 05 F6 | 	mov	result1, #0
247e4     01 FA 61 FD | 	cogid	result1
247e8     FD 2E 42 F5 | 	or	local09, result1
247ec     13 33 02 F6 | 	mov	local11, local05
247f0     02 32 06 F1 | 	add	local11, #2
247f4     19 2F 52 FC | 	wrword	local09, local11
247f8     11 2F 02 F6 | 	mov	local09, local03
247fc     08 2E 06 F1 | 	add	local09, #8
24800     13 33 02 F6 | 	mov	local11, local05
24804     17 2F E2 FA | 	rdword	local09, local09
24808     06 32 06 F1 | 	add	local11, #6
2480c     19 2F 52 FC | 	wrword	local09, local11
24810     13 15 0A F6 | 	mov	arg02, local05 wz
24814     00 FA 05 A6 |  if_e	mov	result1, #0
24818     11 15 82 51 |  if_ne	sub	arg02, local03
2481c     04 14 46 50 |  if_ne	shr	arg02, #4
24820     0A FB 01 56 |  if_ne	mov	result1, arg02
24824     08 22 06 F1 | 	add	local03, #8
24828     11 FB 51 FC | 	wrword	result1, local03
2482c     08 26 06 F1 | 	add	local05, #8
24830     13 FB 01 F6 | 	mov	result1, local05
24834                 | LR__3495
24834     A7 F0 03 F6 | 	mov	ptra, fp
24838     B2 00 A0 FD | 	call	#popregs_
2483c                 | __system___gc_tryalloc_ret
2483c     2D 00 64 FD | 	ret
24840                 | 
24840                 | __system___gc_alloc_managed
24840     01 4A 05 F6 | 	mov	COUNT_, #1
24844     A8 00 A0 FD | 	call	#pushregs_
24848     09 1F 02 F6 | 	mov	local01, arg01
2484c     00 14 06 F6 | 	mov	arg02, #0
24850     1C 00 B0 FD | 	call	#__system___gc_doalloc
24854     FD 14 0A F6 | 	mov	arg02, result1 wz
24858     01 1E 56 A2 |  if_e	cmps	local01, #1 wc
2485c     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
24860     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
24864     A7 F0 03 F6 | 	mov	ptra, fp
24868     B2 00 A0 FD | 	call	#popregs_
2486c                 | __system___gc_alloc_managed_ret
2486c     2D 00 64 FD | 	ret
24870                 | 
24870                 | __system___gc_doalloc
24870     06 4A 05 F6 | 	mov	COUNT_, #6
24874     A8 00 A0 FD | 	call	#pushregs_
24878     09 1F 0A F6 | 	mov	local01, arg01 wz
2487c     0A 21 02 F6 | 	mov	local02, arg02
24880     00 FA 05 A6 |  if_e	mov	result1, #0
24884     8C 00 90 AD |  if_e	jmp	#LR__3507
24888     17 1E 06 F1 | 	add	local01, #23
2488c     0F 1E 26 F5 | 	andn	local01, #15
24890     04 1E 46 F0 | 	shr	local01, #4
24894     1C E6 05 F1 | 	add	ptr___system__dat__, #28
24898     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2489c     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
248a0     C0 C0 BF FD | 	call	#__system___lockmem
248a4     0F 13 02 F6 | 	mov	arg01, local01
248a8     10 15 02 F6 | 	mov	arg02, local02
248ac     D8 FD BF FD | 	call	#__system___gc_tryalloc
248b0     FD 22 0A F6 | 	mov	local03, result1 wz
248b4     14 00 90 5D |  if_ne	jmp	#LR__3500
248b8     70 03 B0 FD | 	call	#__system___gc_docollect
248bc     0F 13 02 F6 | 	mov	arg01, local01
248c0     10 15 02 F6 | 	mov	arg02, local02
248c4     C0 FD BF FD | 	call	#__system___gc_tryalloc
248c8     FD 22 02 F6 | 	mov	local03, result1
248cc                 | LR__3500
248cc     1C E6 05 F1 | 	add	ptr___system__dat__, #28
248d0     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
248d4     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
248d8     09 01 68 FC | 	wrlong	#0, arg01
248dc     00 22 0E F2 | 	cmp	local03, #0 wz
248e0     2C 00 90 AD |  if_e	jmp	#LR__3506
248e4     04 1E 66 F0 | 	shl	local01, #4
248e8     08 1E 86 F1 | 	sub	local01, #8
248ec     0F 25 52 F6 | 	abs	local04, local01 wc
248f0     02 24 46 F0 | 	shr	local04, #2
248f4     12 27 8A F6 | 	negc	local05, local04 wz
248f8     11 29 02 F6 | 	mov	local06, local03
248fc     10 00 90 AD |  if_e	jmp	#LR__3505
24900     97 06 48 FB | 	callpa	#(@LR__3503-@LR__3501)>>2,fcache_load_ptr_
24904                 | LR__3501
24904     13 05 D8 FC | 	rep	@LR__3504, local05
24908                 | LR__3502
24908     14 01 68 FC | 	wrlong	#0, local06
2490c     04 28 06 F1 | 	add	local06, #4
24910                 | LR__3503
24910                 | LR__3504
24910                 | LR__3505
24910                 | LR__3506
24910     11 FB 01 F6 | 	mov	result1, local03
24914                 | LR__3507
24914     A7 F0 03 F6 | 	mov	ptra, fp
24918     B2 00 A0 FD | 	call	#popregs_
2491c                 | __system___gc_doalloc_ret
2491c     2D 00 64 FD | 	ret
24920                 | 
24920                 | __system___gc_isvalidptr
24920     F8 16 06 F4 | 	bitl	arg03, #248
24924     08 16 86 F1 | 	sub	arg03, #8
24928     09 17 52 F2 | 	cmps	arg03, arg01 wc
2492c     08 00 90 CD |  if_b	jmp	#LR__3510
24930     0A 17 52 F2 | 	cmps	arg03, arg02 wc
24934     08 00 90 CD |  if_b	jmp	#LR__3511
24938                 | LR__3510
24938     00 FA 05 F6 | 	mov	result1, #0
2493c     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
24940                 | LR__3511
24940     0B 01 02 F6 | 	mov	_var01, arg03
24944     09 01 62 F5 | 	xor	_var01, arg01
24948     0F 00 CE F7 | 	test	_var01, #15 wz
2494c     00 FA 05 56 |  if_ne	mov	result1, #0
24950     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
24954     0B 01 02 F6 | 	mov	_var01, arg03
24958     02 00 06 F1 | 	add	_var01, #2
2495c     00 01 E2 FA | 	rdword	_var01, _var01
24960     7F 00 00 FF 
24964     C0 01 06 F5 | 	and	_var01, ##65472
24968     36 00 00 FF 
2496c     80 00 0E F2 | 	cmp	_var01, ##27776 wz
24970     00 FA 05 56 |  if_ne	mov	result1, #0
24974     0B FB 01 A6 |  if_e	mov	result1, arg03
24978                 | __system___gc_isvalidptr_ret
24978     2D 00 64 FD | 	ret
2497c                 | 
2497c                 | __system___gc_free
2497c     09 17 02 F6 | 	mov	arg03, arg01
24980     6C FC BF FD | 	call	#__system___gc_ptrs
24984     FD 12 02 F6 | 	mov	arg01, result1
24988     FE 14 02 F6 | 	mov	arg02, result2
2498c     90 FF BF FD | 	call	#__system___gc_isvalidptr
24990     FD 14 0A F6 | 	mov	arg02, result1 wz
24994     28 00 90 AD |  if_e	jmp	#LR__3520
24998     1C E6 05 F1 | 	add	ptr___system__dat__, #28
2499c     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
249a0     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
249a4     BC BF BF FD | 	call	#__system___lockmem
249a8     0A 13 02 F6 | 	mov	arg01, arg02
249ac     14 00 B0 FD | 	call	#__system___gc_dofree
249b0     1C E6 05 F1 | 	add	ptr___system__dat__, #28
249b4     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
249b8     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
249bc     09 01 68 FC | 	wrlong	#0, arg01
249c0                 | LR__3520
249c0                 | __system___gc_free_ret
249c0     2D 00 64 FD | 	ret
249c4                 | 
249c4                 | __system___gc_dofree
249c4     06 4A 05 F6 | 	mov	COUNT_, #6
249c8     A8 00 A0 FD | 	call	#pushregs_
249cc     09 1F 02 F6 | 	mov	local01, arg01
249d0     1C FC BF FD | 	call	#__system___gc_ptrs
249d4     FD 20 02 F6 | 	mov	local02, result1
249d8     FE 22 02 F6 | 	mov	local03, result2
249dc     0F 15 02 F6 | 	mov	arg02, local01
249e0     02 14 06 F1 | 	add	arg02, #2
249e4     36 00 80 FF 
249e8     0A 1F 59 FC | 	wrword	##27791, arg02
249ec     0F 25 02 F6 | 	mov	local04, local01
249f0     0F 13 02 F6 | 	mov	arg01, local01
249f4     09 27 EA FA | 	rdword	local05, arg01 wz
249f8     00 FA 05 A6 |  if_e	mov	result1, #0
249fc     04 26 66 50 |  if_ne	shl	local05, #4
24a00     13 13 02 51 |  if_ne	add	arg01, local05
24a04     09 FB 01 56 |  if_ne	mov	result1, arg01
24a08     FD 28 02 F6 | 	mov	local06, result1
24a0c     97 24 48 FB | 	callpa	#(@LR__3531-@LR__3530)>>2,fcache_load_ptr_
24a10                 | LR__3530
24a10     04 24 06 F1 | 	add	local04, #4
24a14     12 15 EA FA | 	rdword	arg02, local04 wz
24a18     10 13 02 F6 | 	mov	arg01, local02
24a1c     00 FA 05 A6 |  if_e	mov	result1, #0
24a20     04 14 66 50 |  if_ne	shl	arg02, #4
24a24     0A 13 02 51 |  if_ne	add	arg01, arg02
24a28     09 FB 01 56 |  if_ne	mov	result1, arg01
24a2c     FD 24 0A F6 | 	mov	local04, result1 wz
24a30     24 00 90 AD |  if_e	jmp	#LR__3532
24a34     12 13 02 F6 | 	mov	arg01, local04
24a38     00 FA 05 F6 | 	mov	result1, #0
24a3c     02 12 06 F1 | 	add	arg01, #2
24a40     09 13 E2 FA | 	rdword	arg01, arg01
24a44     36 00 00 FF 
24a48     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
24a4c     01 FA 65 A6 |  if_e	neg	result1, #1
24a50     00 FA 0D F2 | 	cmp	result1, #0 wz
24a54     B8 FF 9F AD |  if_e	jmp	#LR__3530
24a58                 | LR__3531
24a58                 | LR__3532
24a58     00 24 0E F2 | 	cmp	local04, #0 wz
24a5c     10 25 02 A6 |  if_e	mov	local04, local02
24a60     12 15 02 F6 | 	mov	arg02, local04
24a64     06 14 06 F1 | 	add	arg02, #6
24a68     0F 13 02 F6 | 	mov	arg01, local01
24a6c     0A 15 E2 FA | 	rdword	arg02, arg02
24a70     06 12 06 F1 | 	add	arg01, #6
24a74     09 15 52 FC | 	wrword	arg02, arg01
24a78     0F 15 0A F6 | 	mov	arg02, local01 wz
24a7c     00 FA 05 A6 |  if_e	mov	result1, #0
24a80     10 15 82 51 |  if_ne	sub	arg02, local02
24a84     04 14 46 50 |  if_ne	shr	arg02, #4
24a88     0A FB 01 56 |  if_ne	mov	result1, arg02
24a8c     12 15 02 F6 | 	mov	arg02, local04
24a90     06 14 06 F1 | 	add	arg02, #6
24a94     0A FB 51 FC | 	wrword	result1, arg02
24a98     10 25 0A F2 | 	cmp	local04, local02 wz
24a9c     A4 00 90 AD |  if_e	jmp	#LR__3535
24aa0     12 13 02 F6 | 	mov	arg01, local04
24aa4     09 27 EA FA | 	rdword	local05, arg01 wz
24aa8     00 FA 05 A6 |  if_e	mov	result1, #0
24aac     04 26 66 50 |  if_ne	shl	local05, #4
24ab0     13 13 02 51 |  if_ne	add	arg01, local05
24ab4     09 FB 01 56 |  if_ne	mov	result1, arg01
24ab8     0F FB 09 F2 | 	cmp	result1, local01 wz
24abc     84 00 90 5D |  if_ne	jmp	#LR__3534
24ac0     12 29 E2 FA | 	rdword	local06, local04
24ac4     0F 15 E2 FA | 	rdword	arg02, local01
24ac8     0A 29 02 F1 | 	add	local06, arg02
24acc     12 29 52 FC | 	wrword	local06, local04
24ad0     0F 29 02 F6 | 	mov	local06, local01
24ad4     02 28 06 F1 | 	add	local06, #2
24ad8     14 01 58 FC | 	wrword	#0, local06
24adc     0F 13 02 F6 | 	mov	arg01, local01
24ae0     09 27 EA FA | 	rdword	local05, arg01 wz
24ae4     00 FA 05 A6 |  if_e	mov	result1, #0
24ae8     04 26 66 50 |  if_ne	shl	local05, #4
24aec     13 13 02 51 |  if_ne	add	arg01, local05
24af0     09 FB 01 56 |  if_ne	mov	result1, arg01
24af4     FD 28 02 F6 | 	mov	local06, result1
24af8     11 29 52 F2 | 	cmps	local06, local03 wc
24afc     20 00 90 3D |  if_ae	jmp	#LR__3533
24b00     12 15 0A F6 | 	mov	arg02, local04 wz
24b04     00 FA 05 A6 |  if_e	mov	result1, #0
24b08     10 15 82 51 |  if_ne	sub	arg02, local02
24b0c     04 14 46 50 |  if_ne	shr	arg02, #4
24b10     0A FB 01 56 |  if_ne	mov	result1, arg02
24b14     14 15 02 F6 | 	mov	arg02, local06
24b18     04 14 06 F1 | 	add	arg02, #4
24b1c     0A FB 51 FC | 	wrword	result1, arg02
24b20                 | LR__3533
24b20     0F 15 02 F6 | 	mov	arg02, local01
24b24     06 14 06 F1 | 	add	arg02, #6
24b28     12 FD 01 F6 | 	mov	result2, local04
24b2c     0A 15 E2 FA | 	rdword	arg02, arg02
24b30     06 FC 05 F1 | 	add	result2, #6
24b34     FE 14 52 FC | 	wrword	arg02, result2
24b38     06 1E 06 F1 | 	add	local01, #6
24b3c     0F 01 58 FC | 	wrword	#0, local01
24b40     12 1F 02 F6 | 	mov	local01, local04
24b44                 | LR__3534
24b44                 | LR__3535
24b44     0F 13 02 F6 | 	mov	arg01, local01
24b48     09 27 EA FA | 	rdword	local05, arg01 wz
24b4c     00 FA 05 A6 |  if_e	mov	result1, #0
24b50     04 26 66 50 |  if_ne	shl	local05, #4
24b54     13 13 02 51 |  if_ne	add	arg01, local05
24b58     09 FB 01 56 |  if_ne	mov	result1, arg01
24b5c     FD 14 0A F6 | 	mov	arg02, result1 wz
24b60     B8 00 90 AD |  if_e	jmp	#LR__3537
24b64     11 15 52 F2 | 	cmps	arg02, local03 wc
24b68     B0 00 90 3D |  if_ae	jmp	#LR__3537
24b6c     0A 13 02 F6 | 	mov	arg01, arg02
24b70     00 FA 05 F6 | 	mov	result1, #0
24b74     02 12 06 F1 | 	add	arg01, #2
24b78     09 13 E2 FA | 	rdword	arg01, arg01
24b7c     36 00 00 FF 
24b80     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
24b84     01 FA 65 A6 |  if_e	neg	result1, #1
24b88     00 FA 0D F2 | 	cmp	result1, #0 wz
24b8c     8C 00 90 AD |  if_e	jmp	#LR__3537
24b90     0F 25 02 F6 | 	mov	local04, local01
24b94     12 29 E2 FA | 	rdword	local06, local04
24b98     0A 13 02 F6 | 	mov	arg01, arg02
24b9c     09 1F E2 FA | 	rdword	local01, arg01
24ba0     0F 29 02 F1 | 	add	local06, local01
24ba4     12 29 52 FC | 	wrword	local06, local04
24ba8     09 29 02 F6 | 	mov	local06, arg01
24bac     06 28 06 F1 | 	add	local06, #6
24bb0     12 1F 02 F6 | 	mov	local01, local04
24bb4     14 29 E2 FA | 	rdword	local06, local06
24bb8     06 1E 06 F1 | 	add	local01, #6
24bbc     0F 29 52 FC | 	wrword	local06, local01
24bc0     09 29 02 F6 | 	mov	local06, arg01
24bc4     02 28 06 F1 | 	add	local06, #2
24bc8     14 55 59 FC | 	wrword	#170, local06
24bcc     09 29 02 F6 | 	mov	local06, arg01
24bd0     06 28 06 F1 | 	add	local06, #6
24bd4     14 01 58 FC | 	wrword	#0, local06
24bd8     09 27 EA FA | 	rdword	local05, arg01 wz
24bdc     00 FA 05 A6 |  if_e	mov	result1, #0
24be0     04 26 66 50 |  if_ne	shl	local05, #4
24be4     13 13 02 51 |  if_ne	add	arg01, local05
24be8     09 FB 01 56 |  if_ne	mov	result1, arg01
24bec     FD 28 0A F6 | 	mov	local06, result1 wz
24bf0     28 00 90 AD |  if_e	jmp	#LR__3536
24bf4     11 29 52 F2 | 	cmps	local06, local03 wc
24bf8     20 00 90 3D |  if_ae	jmp	#LR__3536
24bfc     12 15 0A F6 | 	mov	arg02, local04 wz
24c00     00 FA 05 A6 |  if_e	mov	result1, #0
24c04     10 15 82 51 |  if_ne	sub	arg02, local02
24c08     04 14 46 50 |  if_ne	shr	arg02, #4
24c0c     0A FB 01 56 |  if_ne	mov	result1, arg02
24c10     14 25 02 F6 | 	mov	local04, local06
24c14     04 24 06 F1 | 	add	local04, #4
24c18     12 FB 51 FC | 	wrword	result1, local04
24c1c                 | LR__3536
24c1c                 | LR__3537
24c1c     14 FB 01 F6 | 	mov	result1, local06
24c20     A7 F0 03 F6 | 	mov	ptra, fp
24c24     B2 00 A0 FD | 	call	#popregs_
24c28                 | __system___gc_dofree_ret
24c28     2D 00 64 FD | 	ret
24c2c                 | 
24c2c                 | __system___gc_docollect
24c2c     05 4A 05 F6 | 	mov	COUNT_, #5
24c30     A8 00 A0 FD | 	call	#pushregs_
24c34     B8 F9 BF FD | 	call	#__system___gc_ptrs
24c38     FE 1E 02 F6 | 	mov	local01, result2
24c3c     FD 20 02 F6 | 	mov	local02, result1
24c40     10 13 02 F6 | 	mov	arg01, local02
24c44     09 23 EA FA | 	rdword	local03, arg01 wz
24c48     00 FA 05 A6 |  if_e	mov	result1, #0
24c4c     04 22 66 50 |  if_ne	shl	local03, #4
24c50     11 13 02 51 |  if_ne	add	arg01, local03
24c54     09 FB 01 56 |  if_ne	mov	result1, arg01
24c58     FD 24 0A F6 | 	mov	local04, result1 wz
24c5c     00 FA 05 F6 | 	mov	result1, #0
24c60     01 FA 61 FD | 	cogid	result1
24c64     FD 26 02 F6 | 	mov	local05, result1
24c68     48 00 90 AD |  if_e	jmp	#LR__3542
24c6c     97 22 48 FB | 	callpa	#(@LR__3541-@LR__3540)>>2,fcache_load_ptr_
24c70                 | LR__3540
24c70     0F 25 52 F2 | 	cmps	local04, local01 wc
24c74     3C 00 90 3D |  if_ae	jmp	#LR__3542
24c78     12 15 02 F6 | 	mov	arg02, local04
24c7c     02 14 06 F1 | 	add	arg02, #2
24c80     0A 15 E2 FA | 	rdword	arg02, arg02
24c84     20 14 26 F5 | 	andn	arg02, #32
24c88     12 13 02 F6 | 	mov	arg01, local04
24c8c     02 12 06 F1 | 	add	arg01, #2
24c90     09 15 52 FC | 	wrword	arg02, arg01
24c94     12 13 02 F6 | 	mov	arg01, local04
24c98     09 23 EA FA | 	rdword	local03, arg01 wz
24c9c     00 FA 05 A6 |  if_e	mov	result1, #0
24ca0     04 22 66 50 |  if_ne	shl	local03, #4
24ca4     11 13 02 51 |  if_ne	add	arg01, local03
24ca8     09 FB 01 56 |  if_ne	mov	result1, arg01
24cac     FD 24 0A F6 | 	mov	local04, result1 wz
24cb0     BC FF 9F 5D |  if_ne	jmp	#LR__3540
24cb4                 | LR__3541
24cb4                 | LR__3542
24cb4     00 22 06 F6 | 	mov	local03, #0
24cb8     00 12 06 F6 | 	mov	arg01, #0
24cbc     7C BC BF FD | 	call	#__system____topofstack
24cc0     FD 14 02 F6 | 	mov	arg02, result1
24cc4     11 13 02 F6 | 	mov	arg01, local03
24cc8     90 00 B0 FD | 	call	#__system___gc_markhub
24ccc     1C 01 B0 FD | 	call	#__system___gc_markcog
24cd0     10 13 02 F6 | 	mov	arg01, local02
24cd4     09 23 EA FA | 	rdword	local03, arg01 wz
24cd8     00 FA 05 A6 |  if_e	mov	result1, #0
24cdc     04 22 66 50 |  if_ne	shl	local03, #4
24ce0     11 13 02 51 |  if_ne	add	arg01, local03
24ce4     09 FB 01 56 |  if_ne	mov	result1, arg01
24ce8     FD 20 0A F6 | 	mov	local02, result1 wz
24cec     60 00 90 AD |  if_e	jmp	#LR__3546
24cf0                 | LR__3543
24cf0     10 25 02 F6 | 	mov	local04, local02
24cf4     12 13 02 F6 | 	mov	arg01, local04
24cf8     09 23 EA FA | 	rdword	local03, arg01 wz
24cfc     00 FA 05 A6 |  if_e	mov	result1, #0
24d00     04 22 66 50 |  if_ne	shl	local03, #4
24d04     11 13 02 51 |  if_ne	add	arg01, local03
24d08     09 FB 01 56 |  if_ne	mov	result1, arg01
24d0c     FD 20 02 F6 | 	mov	local02, result1
24d10     12 15 02 F6 | 	mov	arg02, local04
24d14     02 14 06 F1 | 	add	arg02, #2
24d18     0A 15 E2 FA | 	rdword	arg02, arg02
24d1c     20 14 CE F7 | 	test	arg02, #32 wz
24d20     10 14 CE A7 |  if_e	test	arg02, #16 wz
24d24     1C 00 90 5D |  if_ne	jmp	#LR__3545
24d28     0A 15 42 F8 | 	getnib	arg02, arg02, #0
24d2c     13 15 0A F2 | 	cmp	arg02, local05 wz
24d30     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
24d34     0C 00 90 5D |  if_ne	jmp	#LR__3544
24d38     12 13 02 F6 | 	mov	arg01, local04
24d3c     84 FC BF FD | 	call	#__system___gc_dofree
24d40     FD 20 02 F6 | 	mov	local02, result1
24d44                 | LR__3544
24d44                 | LR__3545
24d44     00 20 0E F2 | 	cmp	local02, #0 wz
24d48     0F 21 52 52 |  if_ne	cmps	local02, local01 wc
24d4c     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__3543
24d50                 | LR__3546
24d50     A7 F0 03 F6 | 	mov	ptra, fp
24d54     B2 00 A0 FD | 	call	#popregs_
24d58                 | __system___gc_docollect_ret
24d58     2D 00 64 FD | 	ret
24d5c                 | 
24d5c                 | __system___gc_markhub
24d5c     04 4A 05 F6 | 	mov	COUNT_, #4
24d60     A8 00 A0 FD | 	call	#pushregs_
24d64     09 1F 02 F6 | 	mov	local01, arg01
24d68     0A 21 02 F6 | 	mov	local02, arg02
24d6c     80 F8 BF FD | 	call	#__system___gc_ptrs
24d70     FD 22 02 F6 | 	mov	local03, result1
24d74     FE 24 02 F6 | 	mov	local04, result2
24d78                 | LR__3550
24d78     10 1F 52 F2 | 	cmps	local01, local02 wc
24d7c     60 00 90 3D |  if_ae	jmp	#LR__3551
24d80     0F 17 02 FB | 	rdlong	arg03, local01
24d84     04 1E 06 F1 | 	add	local01, #4
24d88     12 15 02 F6 | 	mov	arg02, local04
24d8c     11 13 02 F6 | 	mov	arg01, local03
24d90     8C FB BF FD | 	call	#__system___gc_isvalidptr
24d94     FD 16 0A F6 | 	mov	arg03, result1 wz
24d98     DC FF 9F AD |  if_e	jmp	#LR__3550
24d9c     0B 13 02 F6 | 	mov	arg01, arg03
24da0     00 FA 05 F6 | 	mov	result1, #0
24da4     02 12 06 F1 | 	add	arg01, #2
24da8     09 13 E2 FA | 	rdword	arg01, arg01
24dac     36 00 00 FF 
24db0     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
24db4     01 FA 65 A6 |  if_e	neg	result1, #1
24db8     00 FA 0D F2 | 	cmp	result1, #0 wz
24dbc     B8 FF 9F 5D |  if_ne	jmp	#LR__3550
24dc0     0B FD 01 F6 | 	mov	result2, arg03
24dc4     02 FC 05 F1 | 	add	result2, #2
24dc8     FE FC E1 FA | 	rdword	result2, result2
24dcc     0F FC 25 F5 | 	andn	result2, #15
24dd0     2E FC 45 F5 | 	or	result2, #46
24dd4     02 16 06 F1 | 	add	arg03, #2
24dd8     0B FD 51 FC | 	wrword	result2, arg03
24ddc     98 FF 9F FD | 	jmp	#LR__3550
24de0                 | LR__3551
24de0     A7 F0 03 F6 | 	mov	ptra, fp
24de4     B2 00 A0 FD | 	call	#popregs_
24de8                 | __system___gc_markhub_ret
24de8     2D 00 64 FD | 	ret
24dec                 | 
24dec                 | __system___gc_markcog
24dec     04 4A 05 F6 | 	mov	COUNT_, #4
24df0     A8 00 A0 FD | 	call	#pushregs_
24df4     F8 F7 BF FD | 	call	#__system___gc_ptrs
24df8     FD 1E 02 F6 | 	mov	local01, result1
24dfc     FE 20 02 F6 | 	mov	local02, result2
24e00     EF 23 06 F6 | 	mov	local03, #495
24e04                 | LR__3560
24e04                 | 	'.live	local03
24e04     00 22 96 F9 | 	alts	local03, #0
24e08     11 25 02 F6 | 	mov	local04, local03
24e0c     0F 13 02 F6 | 	mov	arg01, local01
24e10     10 15 02 F6 | 	mov	arg02, local02
24e14     12 17 02 F6 | 	mov	arg03, local04
24e18     04 FB BF FD | 	call	#__system___gc_isvalidptr
24e1c     00 FA 0D F2 | 	cmp	result1, #0 wz
24e20     18 00 90 AD |  if_e	jmp	#LR__3561
24e24     FD 24 02 F6 | 	mov	local04, result1
24e28     02 24 06 F1 | 	add	local04, #2
24e2c     12 25 E2 FA | 	rdword	local04, local04
24e30     20 24 46 F5 | 	or	local04, #32
24e34     02 FA 05 F1 | 	add	result1, #2
24e38     FD 24 52 FC | 	wrword	local04, result1
24e3c                 | LR__3561
24e3c     01 22 86 F1 | 	sub	local03, #1
24e40     00 22 56 F2 | 	cmps	local03, #0 wc
24e44     BC FF 9F 3D |  if_ae	jmp	#LR__3560
24e48     A7 F0 03 F6 | 	mov	ptra, fp
24e4c     B2 00 A0 FD | 	call	#popregs_
24e50                 | __system___gc_markcog_ret
24e50     2D 00 64 FD | 	ret
24e54                 | 
24e54                 | __system__opendir
24e54     06 4A 05 F6 | 	mov	COUNT_, #6
24e58     A8 00 A0 FD | 	call	#pushregs_
24e5c     84 E7 05 F1 | 	add	ptr___system__dat__, #388
24e60     F3 1E 02 F6 | 	mov	local01, ptr___system__dat__
24e64     09 15 02 F6 | 	mov	arg02, arg01
24e68     0F 13 02 F6 | 	mov	arg01, local01
24e6c     00 16 06 F6 | 	mov	arg03, #0
24e70     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
24e74     84 C2 BF FD | 	call	#__system____getvfsforfile
24e78     FD 20 0A F6 | 	mov	local02, result1 wz
24e7c     10 00 90 AD |  if_e	jmp	#LR__3570
24e80     28 20 06 F1 | 	add	local02, #40
24e84     10 17 0A FB | 	rdlong	arg03, local02 wz
24e88     28 20 86 F1 | 	sub	local02, #40
24e8c     14 00 90 5D |  if_ne	jmp	#LR__3571
24e90                 | LR__3570
24e90     20 E6 05 F1 | 	add	ptr___system__dat__, #32
24e94     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
24e98     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
24e9c     00 FA 05 F6 | 	mov	result1, #0
24ea0     90 00 90 FD | 	jmp	#LR__3573
24ea4                 | LR__3571
24ea4     5C 12 06 F6 | 	mov	arg01, #92
24ea8     10 14 06 F6 | 	mov	arg02, #16
24eac     C0 F9 BF FD | 	call	#__system___gc_doalloc
24eb0     FD 22 0A F6 | 	mov	local03, result1 wz
24eb4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
24eb8     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
24ebc     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
24ec0     00 FA 05 A6 |  if_e	mov	result1, #0
24ec4     6C 00 90 AD |  if_e	jmp	#LR__3573
24ec8     28 20 06 F1 | 	add	local02, #40
24ecc     10 25 02 FB | 	rdlong	local04, local02
24ed0     12 27 02 F6 | 	mov	local05, local04
24ed4     28 20 86 F1 | 	sub	local02, #40
24ed8     13 26 46 F7 | 	zerox	local05, #19
24edc     14 24 46 F0 | 	shr	local04, #20
24ee0     02 24 66 F0 | 	shl	local04, #2
24ee4     ED 24 02 F1 | 	add	local04, __methods__
24ee8     12 25 02 FB | 	rdlong	local04, local04
24eec     11 13 02 F6 | 	mov	arg01, local03
24ef0     0F 15 02 F6 | 	mov	arg02, local01
24ef4     F2 28 02 F6 | 	mov	local06, objptr
24ef8     13 E5 01 F6 | 	mov	objptr, local05
24efc     2D 24 62 FD | 	call	local04
24f00     14 E5 01 F6 | 	mov	objptr, local06
24f04     FD 16 0A F6 | 	mov	arg03, result1 wz
24f08     20 00 90 AD |  if_e	jmp	#LR__3572
24f0c     00 16 4E F2 | 	cmps	arg03, #0 wz
24f10     20 E6 05 F1 | 	add	ptr___system__dat__, #32
24f14     F3 16 62 FC | 	wrlong	arg03, ptr___system__dat__
24f18     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
24f1c     11 13 02 F6 | 	mov	arg01, local03
24f20     58 FA BF FD | 	call	#__system___gc_free
24f24     00 FA 05 F6 | 	mov	result1, #0
24f28     08 00 90 FD | 	jmp	#LR__3573
24f2c                 | LR__3572
24f2c     11 21 62 FC | 	wrlong	local02, local03
24f30     11 FB 01 F6 | 	mov	result1, local03
24f34                 | LR__3573
24f34     A7 F0 03 F6 | 	mov	ptra, fp
24f38     B2 00 A0 FD | 	call	#popregs_
24f3c                 | __system__opendir_ret
24f3c     2D 00 64 FD | 	ret
24f40                 | 
24f40                 | __system__closedir
24f40     04 4A 05 F6 | 	mov	COUNT_, #4
24f44     A8 00 A0 FD | 	call	#pushregs_
24f48     09 1F 02 F6 | 	mov	local01, arg01
24f4c     0F 13 02 FB | 	rdlong	arg01, local01
24f50     2C 12 06 F1 | 	add	arg01, #44
24f54     09 21 02 FB | 	rdlong	local02, arg01
24f58     10 23 02 F6 | 	mov	local03, local02
24f5c     13 22 46 F7 | 	zerox	local03, #19
24f60     14 20 46 F0 | 	shr	local02, #20
24f64     02 20 66 F0 | 	shl	local02, #2
24f68     ED 20 02 F1 | 	add	local02, __methods__
24f6c     10 21 02 FB | 	rdlong	local02, local02
24f70     0F 13 02 F6 | 	mov	arg01, local01
24f74     F2 24 02 F6 | 	mov	local04, objptr
24f78     11 E5 01 F6 | 	mov	objptr, local03
24f7c     2D 20 62 FD | 	call	local02
24f80     12 E5 01 F6 | 	mov	objptr, local04
24f84     FD 24 02 F6 | 	mov	local04, result1
24f88     0F 13 02 F6 | 	mov	arg01, local01
24f8c     EC F9 BF FD | 	call	#__system___gc_free
24f90     00 24 4E F2 | 	cmps	local04, #0 wz
24f94     20 E6 05 F1 | 	add	ptr___system__dat__, #32
24f98     F3 24 62 FC | 	wrlong	local04, ptr___system__dat__
24f9c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
24fa0     01 FA 65 56 |  if_ne	neg	result1, #1
24fa4     00 FA 05 A6 |  if_e	mov	result1, #0
24fa8     A7 F0 03 F6 | 	mov	ptra, fp
24fac     B2 00 A0 FD | 	call	#popregs_
24fb0                 | __system__closedir_ret
24fb0     2D 00 64 FD | 	ret
24fb4                 | 
24fb4                 | __system__readdir
24fb4     04 4A 05 F6 | 	mov	COUNT_, #4
24fb8     A8 00 A0 FD | 	call	#pushregs_
24fbc     09 15 0A FB | 	rdlong	arg02, arg01 wz
24fc0     08 12 06 F1 | 	add	arg01, #8
24fc4     09 1F 02 F6 | 	mov	local01, arg01
24fc8     08 12 86 F1 | 	sub	arg01, #8
24fcc     00 FA 05 A6 |  if_e	mov	result1, #0
24fd0     5C 00 90 AD |  if_e	jmp	#LR__3581
24fd4     30 14 06 F1 | 	add	arg02, #48
24fd8     0A 21 02 FB | 	rdlong	local02, arg02
24fdc     10 23 02 F6 | 	mov	local03, local02
24fe0     13 22 46 F7 | 	zerox	local03, #19
24fe4     14 20 46 F0 | 	shr	local02, #20
24fe8     02 20 66 F0 | 	shl	local02, #2
24fec     ED 20 02 F1 | 	add	local02, __methods__
24ff0     10 21 02 FB | 	rdlong	local02, local02
24ff4     0F 15 02 F6 | 	mov	arg02, local01
24ff8     F2 24 02 F6 | 	mov	local04, objptr
24ffc     11 E5 01 F6 | 	mov	objptr, local03
25000     2D 20 62 FD | 	call	local02
25004     12 E5 01 F6 | 	mov	objptr, local04
25008     00 FA 4D F2 | 	cmps	result1, #0 wz
2500c     1C 00 90 AD |  if_e	jmp	#LR__3580
25010     01 FA 55 F2 | 	cmps	result1, #1 wc
25014     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
25018     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2501c     F3 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
25020     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
25024     00 FA 05 F6 | 	mov	result1, #0
25028     04 00 90 FD | 	jmp	#LR__3581
2502c                 | LR__3580
2502c     0F FB 01 F6 | 	mov	result1, local01
25030                 | LR__3581
25030     A7 F0 03 F6 | 	mov	ptra, fp
25034     B2 00 A0 FD | 	call	#popregs_
25038                 | __system__readdir_ret
25038     2D 00 64 FD | 	ret
2503c                 | 
2503c                 | __system___openraw
2503c     15 4A 05 F6 | 	mov	COUNT_, #21
25040     A8 00 A0 FD | 	call	#pushregs_
25044     09 1F 02 F6 | 	mov	local01, arg01
25048     0A 21 02 F6 | 	mov	local02, arg02
2504c     0B 23 02 F6 | 	mov	local03, arg03
25050     0C 25 02 F6 | 	mov	local04, arg04
25054     04 26 06 F6 | 	mov	local05, #4
25058     0F 29 02 F6 | 	mov	local06, local01
2505c     00 2A 06 F6 | 	mov	local07, #0
25060     84 E7 05 F1 | 	add	ptr___system__dat__, #388
25064     F3 2C 02 F6 | 	mov	local08, ptr___system__dat__
25068     16 13 02 F6 | 	mov	arg01, local08
2506c     10 15 02 F6 | 	mov	arg02, local02
25070     00 16 06 F6 | 	mov	arg03, #0
25074     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
25078     80 C0 BF FD | 	call	#__system____getvfsforfile
2507c     FD 2E 0A F6 | 	mov	local09, result1 wz
25080     10 00 90 AD |  if_e	jmp	#LR__3590
25084     20 2E 06 F1 | 	add	local09, #32
25088     17 FB 09 FB | 	rdlong	result1, local09 wz
2508c     20 2E 86 F1 | 	sub	local09, #32
25090     14 00 90 5D |  if_ne	jmp	#LR__3591
25094                 | LR__3590
25094     20 E6 05 F1 | 	add	ptr___system__dat__, #32
25098     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
2509c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
250a0     01 FA 65 F6 | 	neg	result1, #1
250a4     8C 02 90 FD | 	jmp	#LR__3604
250a8                 | LR__3591
250a8     14 13 02 F6 | 	mov	arg01, local06
250ac     00 14 06 F6 | 	mov	arg02, #0
250b0     34 16 06 F6 | 	mov	arg03, #52
250b4     09 31 02 F6 | 	mov	local10, arg01
250b8     98 00 A0 FD | 	call	#\builtin_bytefill_
250bc     20 2E 06 F1 | 	add	local09, #32
250c0     17 33 02 FB | 	rdlong	local11, local09
250c4     19 35 02 F6 | 	mov	local12, local11
250c8     19 37 02 F6 | 	mov	local13, local11
250cc     20 2E 86 F1 | 	sub	local09, #32
250d0     1B 39 02 F6 | 	mov	local14, local13
250d4     13 34 46 F7 | 	zerox	local12, #19
250d8     14 38 46 F0 | 	shr	local14, #20
250dc     02 38 66 F0 | 	shl	local14, #2
250e0     ED 38 02 F1 | 	add	local14, __methods__
250e4     1C 39 02 FB | 	rdlong	local14, local14
250e8     14 3B 02 F6 | 	mov	local15, local06
250ec     16 3D 02 F6 | 	mov	local16, local08
250f0     11 3F 02 F6 | 	mov	local17, local03
250f4     1D 13 02 F6 | 	mov	arg01, local15
250f8     1E 15 02 F6 | 	mov	arg02, local16
250fc     1F 17 02 F6 | 	mov	arg03, local17
25100     F2 40 02 F6 | 	mov	local18, objptr
25104     1A E5 01 F6 | 	mov	objptr, local12
25108     2D 38 62 FD | 	call	local14
2510c     20 E5 01 F6 | 	mov	objptr, local18
25110     FD 42 0A F6 | 	mov	local19, result1 wz
25114     04 22 CE 57 |  if_ne	test	local03, #4 wz
25118     58 00 90 AD |  if_e	jmp	#LR__3592
2511c     24 2E 06 F1 | 	add	local09, #36
25120     17 33 02 FB | 	rdlong	local11, local09
25124     19 35 02 F6 | 	mov	local12, local11
25128     19 37 02 F6 | 	mov	local13, local11
2512c     24 2E 86 F1 | 	sub	local09, #36
25130     1B 39 02 F6 | 	mov	local14, local13
25134     13 34 46 F7 | 	zerox	local12, #19
25138     14 38 46 F0 | 	shr	local14, #20
2513c     02 38 66 F0 | 	shl	local14, #2
25140     ED 38 02 F1 | 	add	local14, __methods__
25144     1C 39 02 FB | 	rdlong	local14, local14
25148     14 3B 02 F6 | 	mov	local15, local06
2514c     16 3D 02 F6 | 	mov	local16, local08
25150     12 3F 02 F6 | 	mov	local17, local04
25154     1D 13 02 F6 | 	mov	arg01, local15
25158     1E 15 02 F6 | 	mov	arg02, local16
2515c     1F 17 02 F6 | 	mov	arg03, local17
25160     F2 40 02 F6 | 	mov	local18, objptr
25164     1A E5 01 F6 | 	mov	objptr, local12
25168     2D 38 62 FD | 	call	local14
2516c     20 E5 01 F6 | 	mov	objptr, local18
25170     FD 42 02 F6 | 	mov	local19, result1
25174                 | LR__3592
25174     00 42 0E F2 | 	cmp	local19, #0 wz
25178     8C 01 90 5D |  if_ne	jmp	#LR__3602
2517c     11 45 02 F6 | 	mov	local20, local03
25180     03 44 0E F5 | 	and	local20, #3 wz
25184     02 26 46 55 |  if_ne	or	local05, #2
25188     01 44 0E F2 | 	cmp	local20, #1 wz
2518c     01 26 46 55 |  if_ne	or	local05, #1
25190     20 22 CE F7 | 	test	local03, #32 wz
25194     C0 26 46 55 |  if_ne	or	local05, #192
25198     08 28 06 F1 | 	add	local06, #8
2519c     14 27 62 FC | 	wrlong	local05, local06
251a0     0C 28 06 F1 | 	add	local06, #12
251a4     14 47 0A FB | 	rdlong	local21, local06 wz
251a8     14 28 86 F1 | 	sub	local06, #20
251ac     18 00 90 5D |  if_ne	jmp	#LR__3593
251b0     04 2E 06 F1 | 	add	local09, #4
251b4     17 47 02 FB | 	rdlong	local21, local09
251b8     04 2E 86 F1 | 	sub	local09, #4
251bc     14 28 06 F1 | 	add	local06, #20
251c0     14 47 62 FC | 	wrlong	local21, local06
251c4     14 28 86 F1 | 	sub	local06, #20
251c8                 | LR__3593
251c8     18 28 06 F1 | 	add	local06, #24
251cc     14 47 0A FB | 	rdlong	local21, local06 wz
251d0     18 28 86 F1 | 	sub	local06, #24
251d4     18 00 90 5D |  if_ne	jmp	#LR__3594
251d8     08 2E 06 F1 | 	add	local09, #8
251dc     17 47 02 FB | 	rdlong	local21, local09
251e0     08 2E 86 F1 | 	sub	local09, #8
251e4     18 28 06 F1 | 	add	local06, #24
251e8     14 47 62 FC | 	wrlong	local21, local06
251ec     18 28 86 F1 | 	sub	local06, #24
251f0                 | LR__3594
251f0     24 28 06 F1 | 	add	local06, #36
251f4     14 47 0A FB | 	rdlong	local21, local06 wz
251f8     24 28 86 F1 | 	sub	local06, #36
251fc     17 47 02 AB |  if_e	rdlong	local21, local09
25200     24 28 06 A1 |  if_e	add	local06, #36
25204     14 47 62 AC |  if_e	wrlong	local21, local06
25208     24 28 86 A1 |  if_e	sub	local06, #36
2520c     28 28 06 F1 | 	add	local06, #40
25210     14 47 0A FB | 	rdlong	local21, local06 wz
25214     28 28 86 F1 | 	sub	local06, #40
25218     18 00 90 5D |  if_ne	jmp	#LR__3595
2521c     10 2E 06 F1 | 	add	local09, #16
25220     17 47 02 FB | 	rdlong	local21, local09
25224     10 2E 86 F1 | 	sub	local09, #16
25228     28 28 06 F1 | 	add	local06, #40
2522c     14 47 62 FC | 	wrlong	local21, local06
25230     28 28 86 F1 | 	sub	local06, #40
25234                 | LR__3595
25234     30 28 06 F1 | 	add	local06, #48
25238     14 47 0A FB | 	rdlong	local21, local06 wz
2523c     30 28 86 F1 | 	sub	local06, #48
25240     18 00 90 5D |  if_ne	jmp	#LR__3596
25244     0C 2E 06 F1 | 	add	local09, #12
25248     17 47 02 FB | 	rdlong	local21, local09
2524c     0C 2E 86 F1 | 	sub	local09, #12
25250     30 28 06 F1 | 	add	local06, #48
25254     14 47 62 FC | 	wrlong	local21, local06
25258     30 28 86 F1 | 	sub	local06, #48
2525c                 | LR__3596
2525c     1C 28 06 F1 | 	add	local06, #28
25260     14 47 0A FB | 	rdlong	local21, local06 wz
25264     1C 28 86 F1 | 	sub	local06, #28
25268     1C 00 90 5D |  if_ne	jmp	#LR__3597
2526c     01 2A 06 F6 | 	mov	local07, #1
25270     F2 12 02 F6 | 	mov	arg01, objptr
25274     00 C8 04 FF 
25278     00 12 46 F5 | 	or	arg01, ##160432128
2527c     1C 28 06 F1 | 	add	local06, #28
25280     14 13 62 FC | 	wrlong	arg01, local06
25284     1C 28 86 F1 | 	sub	local06, #28
25288                 | LR__3597
25288     20 28 06 F1 | 	add	local06, #32
2528c     14 47 0A FB | 	rdlong	local21, local06 wz
25290     20 28 86 F1 | 	sub	local06, #32
25294     1C 00 90 5D |  if_ne	jmp	#LR__3598
25298     01 2A 06 F6 | 	mov	local07, #1
2529c     F2 12 02 F6 | 	mov	arg01, objptr
252a0     00 D0 04 FF 
252a4     00 12 46 F5 | 	or	arg01, ##161480704
252a8     20 28 06 F1 | 	add	local06, #32
252ac     14 13 62 FC | 	wrlong	arg01, local06
252b0     20 28 86 F1 | 	sub	local06, #32
252b4                 | LR__3598
252b4     2C 28 06 F1 | 	add	local06, #44
252b8     14 47 0A FB | 	rdlong	local21, local06 wz
252bc     2C 28 86 F1 | 	sub	local06, #44
252c0     44 00 90 5D |  if_ne	jmp	#LR__3601
252c4     14 2E 06 F1 | 	add	local09, #20
252c8     17 47 0A FB | 	rdlong	local21, local09 wz
252cc     14 2E 86 F1 | 	sub	local09, #20
252d0     18 00 90 AD |  if_e	jmp	#LR__3599
252d4     14 2E 06 F1 | 	add	local09, #20
252d8     17 47 02 FB | 	rdlong	local21, local09
252dc     2C 28 06 F1 | 	add	local06, #44
252e0     14 47 62 FC | 	wrlong	local21, local06
252e4     2C 28 86 F1 | 	sub	local06, #44
252e8     1C 00 90 FD | 	jmp	#LR__3600
252ec                 | LR__3599
252ec     01 2A 06 F6 | 	mov	local07, #1
252f0     F2 12 02 F6 | 	mov	arg01, objptr
252f4     00 D8 04 FF 
252f8     00 12 46 F5 | 	or	arg01, ##162529280
252fc     2C 28 06 F1 | 	add	local06, #44
25300     14 13 62 FC | 	wrlong	arg01, local06
25304     2C 28 86 F1 | 	sub	local06, #44
25308                 | LR__3600
25308                 | LR__3601
25308                 | LR__3602
25308     00 2A 0E F2 | 	cmp	local07, #0 wz
2530c     14 13 02 56 |  if_ne	mov	arg01, local06
25310     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
25314     00 42 0E F2 | 	cmp	local19, #0 wz
25318     00 12 06 A6 |  if_e	mov	arg01, #0
2531c     10 00 90 5D |  if_ne	jmp	#LR__3603
25320     00 12 4E F2 | 	cmps	arg01, #0 wz
25324     20 E6 05 F1 | 	add	ptr___system__dat__, #32
25328     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2532c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
25330                 | LR__3603
25330     21 FB 01 F6 | 	mov	result1, local19
25334                 | LR__3604
25334     A7 F0 03 F6 | 	mov	ptra, fp
25338     B2 00 A0 FD | 	call	#popregs_
2533c                 | __system___openraw_ret
2533c     2D 00 64 FD | 	ret
25340                 | 
25340                 | __system___closeraw
25340     05 4A 05 F6 | 	mov	COUNT_, #5
25344     A8 00 A0 FD | 	call	#pushregs_
25348     09 1F 02 F6 | 	mov	local01, arg01
2534c     00 20 06 F6 | 	mov	local02, #0
25350     08 1E 06 F1 | 	add	local01, #8
25354     0F FB 09 FB | 	rdlong	result1, local01 wz
25358     08 1E 86 F1 | 	sub	local01, #8
2535c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
25360     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
25364     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
25368     01 FA 65 A6 |  if_e	neg	result1, #1
2536c     A8 00 90 AD |  if_e	jmp	#LR__3612
25370     2C 1E 06 F1 | 	add	local01, #44
25374     0F FB 09 FB | 	rdlong	result1, local01 wz
25378     2C 1E 86 F1 | 	sub	local01, #44
2537c     38 00 90 AD |  if_e	jmp	#LR__3610
25380     2C 1E 06 F1 | 	add	local01, #44
25384     0F 23 02 FB | 	rdlong	local03, local01
25388     11 25 02 F6 | 	mov	local04, local03
2538c     2C 1E 86 F1 | 	sub	local01, #44
25390     13 24 46 F7 | 	zerox	local04, #19
25394     14 22 46 F0 | 	shr	local03, #20
25398     02 22 66 F0 | 	shl	local03, #2
2539c     ED 22 02 F1 | 	add	local03, __methods__
253a0     11 23 02 FB | 	rdlong	local03, local03
253a4     0F 13 02 F6 | 	mov	arg01, local01
253a8     F2 26 02 F6 | 	mov	local05, objptr
253ac     12 E5 01 F6 | 	mov	objptr, local04
253b0     2D 22 62 FD | 	call	local03
253b4     13 E5 01 F6 | 	mov	objptr, local05
253b8                 | LR__3610
253b8     24 1E 06 F1 | 	add	local01, #36
253bc     0F 27 0A FB | 	rdlong	local05, local01 wz
253c0     24 1E 86 F1 | 	sub	local01, #36
253c4     3C 00 90 AD |  if_e	jmp	#LR__3611
253c8     24 1E 06 F1 | 	add	local01, #36
253cc     0F 23 02 FB | 	rdlong	local03, local01
253d0     11 25 02 F6 | 	mov	local04, local03
253d4     24 1E 86 F1 | 	sub	local01, #36
253d8     13 24 46 F7 | 	zerox	local04, #19
253dc     14 22 46 F0 | 	shr	local03, #20
253e0     02 22 66 F0 | 	shl	local03, #2
253e4     ED 22 02 F1 | 	add	local03, __methods__
253e8     11 23 02 FB | 	rdlong	local03, local03
253ec     0F 13 02 F6 | 	mov	arg01, local01
253f0     F2 26 02 F6 | 	mov	local05, objptr
253f4     12 E5 01 F6 | 	mov	objptr, local04
253f8     2D 22 62 FD | 	call	local03
253fc     13 E5 01 F6 | 	mov	objptr, local05
25400     FD 20 02 F6 | 	mov	local02, result1
25404                 | LR__3611
25404     0F 13 02 F6 | 	mov	arg01, local01
25408     00 14 06 F6 | 	mov	arg02, #0
2540c     34 16 06 F6 | 	mov	arg03, #52
25410     98 00 A0 FD | 	call	#\builtin_bytefill_
25414     10 FB 01 F6 | 	mov	result1, local02
25418                 | LR__3612
25418     A7 F0 03 F6 | 	mov	ptra, fp
2541c     B2 00 A0 FD | 	call	#popregs_
25420                 | __system___closeraw_ret
25420     2D 00 64 FD | 	ret
25424                 | 
25424                 | __system___vfs_open_sdcardx
25424     0B 4A 05 F6 | 	mov	COUNT_, #11
25428     A8 00 A0 FD | 	call	#pushregs_
2542c     09 23 02 F6 | 	mov	local03, arg01
25430     0A 25 02 F6 | 	mov	local04, arg02
25434     0B 27 02 F6 | 	mov	local05, arg03
25438     0C 29 02 F6 | 	mov	local06, arg04
2543c     01 00 00 FF 
25440     24 12 06 F6 | 	mov	arg01, ##548
25444     F8 F3 BF FD | 	call	#__system___gc_alloc_managed
25448     FD 2A 02 F6 | 	mov	local07, result1
2544c     01 00 00 FF 
25450     34 12 06 F6 | 	mov	arg01, ##564
25454     E8 F3 BF FD | 	call	#__system___gc_alloc_managed
25458     FD 2C 02 F6 | 	mov	local08, result1
2545c     11 19 02 F6 | 	mov	arg04, local03
25460     1F 18 C6 F0 | 	sar	arg04, #31
25464     11 17 02 F6 | 	mov	arg03, local03
25468     01 12 06 F6 | 	mov	arg01, #1
2546c     00 14 06 F6 | 	mov	arg02, #0
25470     EC DB BF FD | 	call	#__system___int64_shl
25474     FD 1E 02 F6 | 	mov	local01, result1
25478     FE 2E 02 F6 | 	mov	local09, result2
2547c     12 19 02 F6 | 	mov	arg04, local04
25480     1F 18 C6 F0 | 	sar	arg04, #31
25484     12 17 02 F6 | 	mov	arg03, local04
25488     01 12 06 F6 | 	mov	arg01, #1
2548c     00 14 06 F6 | 	mov	arg02, #0
25490     CC DB BF FD | 	call	#__system___int64_shl
25494     FD 1E 42 F5 | 	or	local01, result1
25498     FE 2E 42 F5 | 	or	local09, result2
2549c     13 19 02 F6 | 	mov	arg04, local05
254a0     1F 18 C6 F0 | 	sar	arg04, #31
254a4     13 17 02 F6 | 	mov	arg03, local05
254a8     01 12 06 F6 | 	mov	arg01, #1
254ac     00 14 06 F6 | 	mov	arg02, #0
254b0     AC DB BF FD | 	call	#__system___int64_shl
254b4     FD 1E 42 F5 | 	or	local01, result1
254b8     FE 2E 42 F5 | 	or	local09, result2
254bc     14 19 02 F6 | 	mov	arg04, local06
254c0     1F 18 C6 F0 | 	sar	arg04, #31
254c4     14 17 02 F6 | 	mov	arg03, local06
254c8     01 12 06 F6 | 	mov	arg01, #1
254cc     00 14 06 F6 | 	mov	arg02, #0
254d0     8C DB BF FD | 	call	#__system___int64_shl
254d4     17 15 02 F6 | 	mov	arg02, local09
254d8     FD 1E 42 F5 | 	or	local01, result1
254dc     0A FD 41 F5 | 	or	result2, arg02
254e0     FE 20 02 F6 | 	mov	local02, result2
254e4     0F 13 02 F6 | 	mov	arg01, local01
254e8     10 15 02 F6 | 	mov	arg02, local02
254ec     A8 DB BF FD | 	call	#__system___usepins
254f0     00 FA 0D F2 | 	cmp	result1, #0 wz
254f4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
254f8     F3 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
254fc     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
25500     00 FA 05 A6 |  if_e	mov	result1, #0
25504     B4 00 90 AD |  if_e	jmp	#LR__3622
25508     0F 31 02 F6 | 	mov	local10, local01
2550c     10 2F 02 F6 | 	mov	local09, local02
25510     01 00 00 FF 
25514     08 2A 06 F1 | 	add	local07, ##520
25518     15 31 62 FC | 	wrlong	local10, local07
2551c     04 2A 06 F1 | 	add	local07, #4
25520     15 2F 62 FC | 	wrlong	local09, local07
25524     01 00 00 FF 
25528     0C 2A 86 F1 | 	sub	local07, ##524
2552c     14 1B 02 F6 | 	mov	arg05, local06
25530     00 12 06 F6 | 	mov	arg01, #0
25534     11 15 02 F6 | 	mov	arg02, local03
25538     12 17 02 F6 | 	mov	arg03, local04
2553c     13 19 02 F6 | 	mov	arg04, local05
25540     F2 30 02 F6 | 	mov	local10, objptr
25544     15 E5 01 F6 | 	mov	objptr, local07
25548     80 29 B0 FD | 	call	#_fatfs_cc_disk_setpins
2554c     18 E5 01 F6 | 	mov	objptr, local10
25550     FD 32 0A F6 | 	mov	local11, result1 wz
25554     24 00 90 5D |  if_ne	jmp	#LR__3620
25558     81 01 00 FF 
2555c     16 14 06 F6 | 	mov	arg02, ##@LR__5037
25560     16 13 02 F6 | 	mov	arg01, local08
25564     00 16 06 F6 | 	mov	arg03, #0
25568     F2 32 02 F6 | 	mov	local11, objptr
2556c     15 E5 01 F6 | 	mov	objptr, local07
25570     B0 60 B0 FD | 	call	#_fatfs_cc_f_mount
25574     19 E5 01 F6 | 	mov	objptr, local11
25578     FD 32 02 F6 | 	mov	local11, result1
2557c                 | LR__3620
2557c     00 32 0E F2 | 	cmp	local11, #0 wz
25580     24 00 90 AD |  if_e	jmp	#LR__3621
25584     0F 13 02 F6 | 	mov	arg01, local01
25588     10 15 02 F6 | 	mov	arg02, local02
2558c     5C DB BF FD | 	call	#__system___freepins
25590     19 13 6A F6 | 	neg	arg01, local11 wz
25594     20 E6 05 F1 | 	add	ptr___system__dat__, #32
25598     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2559c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
255a0     00 FA 05 F6 | 	mov	result1, #0
255a4     14 00 90 FD | 	jmp	#LR__3622
255a8                 | LR__3621
255a8     15 13 02 F6 | 	mov	arg01, local07
255ac     F2 32 02 F6 | 	mov	local11, objptr
255b0     15 E5 01 F6 | 	mov	objptr, local07
255b4     4C 9D B0 FD | 	call	#_fatfs_cc_get_vfs
255b8     19 E5 01 F6 | 	mov	objptr, local11
255bc                 | LR__3622
255bc     A7 F0 03 F6 | 	mov	ptra, fp
255c0     B2 00 A0 FD | 	call	#popregs_
255c4                 | __system___vfs_open_sdcardx_ret
255c4     2D 00 64 FD | 	ret
255c8                 | 
255c8                 | __system____default_getc
255c8     03 4A 05 F6 | 	mov	COUNT_, #3
255cc     A8 00 A0 FD | 	call	#pushregs_
255d0     09 1F 02 F6 | 	mov	local01, arg01
255d4     0F 21 02 FB | 	rdlong	local02, local01
255d8     08 20 06 F1 | 	add	local02, #8
255dc     10 23 02 FB | 	rdlong	local03, local02
255e0     02 22 CE F7 | 	test	local03, #2 wz
255e4     0F 13 02 56 |  if_ne	mov	arg01, local01
255e8     00 01 B0 5D |  if_ne	call	#__system____default_flush
255ec     10 23 02 FB | 	rdlong	local03, local02
255f0     01 22 46 F5 | 	or	local03, #1
255f4     10 23 62 FC | 	wrlong	local03, local02
255f8     08 20 86 F1 | 	sub	local02, #8
255fc     10 23 0A FB | 	rdlong	local03, local02 wz
25600     0C 00 90 5D |  if_ne	jmp	#LR__3630
25604     0F 13 02 F6 | 	mov	arg01, local01
25608     68 18 B0 FD | 	call	#__system____default_filbuf
2560c     FD 22 02 F6 | 	mov	local03, result1
25610                 | LR__3630
25610     01 22 56 F2 | 	cmps	local03, #1 wc
25614     01 FA 65 C6 |  if_b	neg	result1, #1
25618     1C 00 90 CD |  if_b	jmp	#LR__3631
2561c     01 22 86 F1 | 	sub	local03, #1
25620     10 23 62 FC | 	wrlong	local03, local02
25624     04 20 06 F1 | 	add	local02, #4
25628     10 23 02 FB | 	rdlong	local03, local02
2562c     11 FB C1 FA | 	rdbyte	result1, local03
25630     01 22 06 F1 | 	add	local03, #1
25634     10 23 62 FC | 	wrlong	local03, local02
25638                 | LR__3631
25638     A7 F0 03 F6 | 	mov	ptra, fp
2563c     B2 00 A0 FD | 	call	#popregs_
25640                 | __system____default_getc_ret
25640     2D 00 64 FD | 	ret
25644                 | 
25644                 | __system____default_putc
25644     06 4A 05 F6 | 	mov	COUNT_, #6
25648     A8 00 A0 FD | 	call	#pushregs_
2564c     09 1F 02 F6 | 	mov	local01, arg01
25650     0A 21 02 F6 | 	mov	local02, arg02
25654     10 23 02 FB | 	rdlong	local03, local02
25658     08 22 06 F1 | 	add	local03, #8
2565c     11 FB 01 FB | 	rdlong	result1, local03
25660     01 FA CD F7 | 	test	result1, #1 wz
25664     10 13 02 56 |  if_ne	mov	arg01, local02
25668     80 00 B0 5D |  if_ne	call	#__system____default_flush
2566c     11 25 02 FB | 	rdlong	local04, local03
25670     02 24 46 F5 | 	or	local04, #2
25674     11 25 62 FC | 	wrlong	local04, local03
25678     08 22 86 F1 | 	sub	local03, #8
2567c     11 27 02 FB | 	rdlong	local05, local03
25680     10 22 06 F1 | 	add	local03, #16
25684     11 15 02 FB | 	rdlong	arg02, local03
25688     10 22 86 F1 | 	sub	local03, #16
2568c     13 FB 01 F6 | 	mov	result1, local05
25690     0A FB 01 F1 | 	add	result1, arg02
25694     FD 1E 42 FC | 	wrbyte	local01, result1
25698     0F 1F E2 F8 | 	getbyte	local01, local01, #0
2569c     01 26 06 F1 | 	add	local05, #1
256a0     11 27 62 FC | 	wrlong	local05, local03
256a4     06 20 06 F1 | 	add	local02, #6
256a8     10 29 EA FA | 	rdword	local06, local02 wz
256ac     06 20 86 F1 | 	sub	local02, #6
256b0     0C 22 06 51 |  if_ne	add	local03, #12
256b4     11 25 02 5B |  if_ne	rdlong	local04, local03
256b8     12 27 0A 52 |  if_ne	cmp	local05, local04 wz
256bc     0C 00 90 AD |  if_e	jmp	#LR__3640
256c0     0A 1E 0E F2 | 	cmp	local01, #10 wz
256c4     01 28 0E A2 |  if_e	cmp	local06, #1 wz
256c8     10 00 90 5D |  if_ne	jmp	#LR__3641
256cc                 | LR__3640
256cc     10 13 02 F6 | 	mov	arg01, local02
256d0     18 00 B0 FD | 	call	#__system____default_flush
256d4     00 FA 0D F2 | 	cmp	result1, #0 wz
256d8     01 1E 66 56 |  if_ne	neg	local01, #1
256dc                 | LR__3641
256dc     0F FB 01 F6 | 	mov	result1, local01
256e0     A7 F0 03 F6 | 	mov	ptra, fp
256e4     B2 00 A0 FD | 	call	#popregs_
256e8                 | __system____default_putc_ret
256e8     2D 00 64 FD | 	ret
256ec                 | 
256ec                 | __system____default_flush
256ec     06 4A 05 F6 | 	mov	COUNT_, #6
256f0     A8 00 A0 FD | 	call	#pushregs_
256f4     09 1F 02 F6 | 	mov	local01, arg01
256f8     0F 21 02 FB | 	rdlong	local02, local01
256fc     10 23 02 FB | 	rdlong	local03, local02
25700     08 20 06 F1 | 	add	local02, #8
25704     10 FB 01 FB | 	rdlong	result1, local02
25708     08 20 86 F1 | 	sub	local02, #8
2570c     02 FA CD F7 | 	test	result1, #2 wz
25710     D0 00 90 AD |  if_e	jmp	#LR__3652
25714     01 22 56 F2 | 	cmps	local03, #1 wc
25718     20 01 90 CD |  if_b	jmp	#LR__3654
2571c     08 1E 06 F1 | 	add	local01, #8
25720     0F FB 01 FB | 	rdlong	result1, local01
25724     08 1E 86 F1 | 	sub	local01, #8
25728     40 FA CD F7 | 	test	result1, #64 wz
2572c     68 00 90 AD |  if_e	jmp	#LR__3651
25730     08 1E 06 F1 | 	add	local01, #8
25734     0F 17 02 FB | 	rdlong	arg03, local01
25738     08 1E 86 F1 | 	sub	local01, #8
2573c     80 16 CE F7 | 	test	arg03, #128 wz
25740     54 00 90 AD |  if_e	jmp	#LR__3650
25744     30 1E 06 F1 | 	add	local01, #48
25748     0F 25 02 FB | 	rdlong	local04, local01
2574c     12 27 02 F6 | 	mov	local05, local04
25750     30 1E 86 F1 | 	sub	local01, #48
25754     13 26 46 F7 | 	zerox	local05, #19
25758     14 24 46 F0 | 	shr	local04, #20
2575c     02 24 66 F0 | 	shl	local04, #2
25760     ED 24 02 F1 | 	add	local04, __methods__
25764     12 25 02 FB | 	rdlong	local04, local04
25768     0F 13 02 F6 | 	mov	arg01, local01
2576c     00 14 06 F6 | 	mov	arg02, #0
25770     02 16 06 F6 | 	mov	arg03, #2
25774     F2 28 02 F6 | 	mov	local06, objptr
25778     13 E5 01 F6 | 	mov	objptr, local05
2577c     2D 24 62 FD | 	call	local04
25780     14 E5 01 F6 | 	mov	objptr, local06
25784     08 1E 06 F1 | 	add	local01, #8
25788     0F 29 02 FB | 	rdlong	local06, local01
2578c     80 28 26 F5 | 	andn	local06, #128
25790     0F 29 62 FC | 	wrlong	local06, local01
25794     08 1E 86 F1 | 	sub	local01, #8
25798                 | LR__3650
25798                 | LR__3651
25798     18 1E 06 F1 | 	add	local01, #24
2579c     0F 25 02 FB | 	rdlong	local04, local01
257a0     12 27 02 F6 | 	mov	local05, local04
257a4     18 1E 86 F1 | 	sub	local01, #24
257a8     13 26 46 F7 | 	zerox	local05, #19
257ac     14 24 46 F0 | 	shr	local04, #20
257b0     02 24 66 F0 | 	shl	local04, #2
257b4     ED 24 02 F1 | 	add	local04, __methods__
257b8     12 25 02 FB | 	rdlong	local04, local04
257bc     10 20 06 F1 | 	add	local02, #16
257c0     10 15 02 FB | 	rdlong	arg02, local02
257c4     10 20 86 F1 | 	sub	local02, #16
257c8     0F 13 02 F6 | 	mov	arg01, local01
257cc     11 17 02 F6 | 	mov	arg03, local03
257d0     F2 28 02 F6 | 	mov	local06, objptr
257d4     13 E5 01 F6 | 	mov	objptr, local05
257d8     2D 24 62 FD | 	call	local04
257dc     14 E5 01 F6 | 	mov	objptr, local06
257e0     58 00 90 FD | 	jmp	#LR__3654
257e4                 | LR__3652
257e4     08 20 06 F1 | 	add	local02, #8
257e8     10 29 02 FB | 	rdlong	local06, local02
257ec     08 20 86 F1 | 	sub	local02, #8
257f0     01 28 CE F7 | 	test	local06, #1 wz
257f4     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
257f8     40 00 90 AD |  if_e	jmp	#LR__3653
257fc     30 1E 06 F1 | 	add	local01, #48
25800     0F 25 02 FB | 	rdlong	local04, local01
25804     12 27 02 F6 | 	mov	local05, local04
25808     30 1E 86 F1 | 	sub	local01, #48
2580c     13 26 46 F7 | 	zerox	local05, #19
25810     14 24 46 F0 | 	shr	local04, #20
25814     02 24 66 F0 | 	shl	local04, #2
25818     ED 24 02 F1 | 	add	local04, __methods__
2581c     12 25 02 FB | 	rdlong	local04, local04
25820     0F 13 02 F6 | 	mov	arg01, local01
25824     11 15 62 F6 | 	neg	arg02, local03
25828     01 16 06 F6 | 	mov	arg03, #1
2582c     F2 28 02 F6 | 	mov	local06, objptr
25830     13 E5 01 F6 | 	mov	objptr, local05
25834     2D 24 62 FD | 	call	local04
25838     14 E5 01 F6 | 	mov	objptr, local06
2583c                 | LR__3653
2583c                 | LR__3654
2583c     10 01 68 FC | 	wrlong	#0, local02
25840     04 20 06 F1 | 	add	local02, #4
25844     10 01 68 FC | 	wrlong	#0, local02
25848     04 20 06 F1 | 	add	local02, #4
2584c     10 01 68 FC | 	wrlong	#0, local02
25850     00 FA 05 F6 | 	mov	result1, #0
25854     A7 F0 03 F6 | 	mov	ptra, fp
25858     B2 00 A0 FD | 	call	#popregs_
2585c                 | __system____default_flush_ret
2585c     2D 00 64 FD | 	ret
25860                 | 
25860                 | __system____default_buffer_init
25860     02 4A 05 F6 | 	mov	COUNT_, #2
25864     A8 00 A0 FD | 	call	#pushregs_
25868     09 1F 02 F6 | 	mov	local01, arg01
2586c     0F 21 02 FB | 	rdlong	local02, local01
25870     0F 13 02 F6 | 	mov	arg01, local01
25874     34 03 B0 FD | 	call	#__system___isatty
25878     00 FA 0D F2 | 	cmp	result1, #0 wz
2587c     06 1E 06 51 |  if_ne	add	local01, #6
25880     0F 0B 58 5C |  if_ne	wrword	#5, local01
25884     06 1E 06 A1 |  if_e	add	local01, #6
25888     0F 0D 58 AC |  if_e	wrword	#6, local01
2588c     14 20 06 F1 | 	add	local02, #20
25890     10 1F 02 F6 | 	mov	local01, local02
25894     04 20 86 F1 | 	sub	local02, #4
25898     10 1F 62 FC | 	wrlong	local01, local02
2589c     04 20 86 F1 | 	sub	local02, #4
258a0     02 00 80 FF 
258a4     10 01 68 FC | 	wrlong	##1024, local02
258a8     00 FA 05 F6 | 	mov	result1, #0
258ac     A7 F0 03 F6 | 	mov	ptra, fp
258b0     B2 00 A0 FD | 	call	#popregs_
258b4                 | __system____default_buffer_init_ret
258b4     2D 00 64 FD | 	ret
258b8                 | 
258b8                 | __system__stat
258b8     04 4A 05 F6 | 	mov	COUNT_, #4
258bc     A8 00 A0 FD | 	call	#pushregs_
258c0     0A 1F 02 F6 | 	mov	local01, arg02
258c4     84 E7 05 F1 | 	add	ptr___system__dat__, #388
258c8     F3 20 02 F6 | 	mov	local02, ptr___system__dat__
258cc     09 15 02 F6 | 	mov	arg02, arg01
258d0     10 13 02 F6 | 	mov	arg01, local02
258d4     00 16 06 F6 | 	mov	arg03, #0
258d8     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
258dc     1C B8 BF FD | 	call	#__system____getvfsforfile
258e0     FD 22 0A F6 | 	mov	local03, result1 wz
258e4     10 00 90 AD |  if_e	jmp	#LR__3660
258e8     34 22 06 F1 | 	add	local03, #52
258ec     11 17 0A FB | 	rdlong	arg03, local03 wz
258f0     34 22 86 F1 | 	sub	local03, #52
258f4     14 00 90 5D |  if_ne	jmp	#LR__3661
258f8                 | LR__3660
258f8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
258fc     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
25900     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
25904     01 FA 65 F6 | 	neg	result1, #1
25908     68 00 90 FD | 	jmp	#LR__3662
2590c                 | LR__3661
2590c     0F 13 02 F6 | 	mov	arg01, local01
25910     00 14 06 F6 | 	mov	arg02, #0
25914     30 16 06 F6 | 	mov	arg03, #48
25918     09 25 02 F6 | 	mov	local04, arg01
2591c     98 00 A0 FD | 	call	#\builtin_bytefill_
25920     12 FB 01 F6 | 	mov	result1, local04
25924     10 13 CA FA | 	rdbyte	arg01, local02 wz
25928     08 1E 06 A1 |  if_e	add	local01, #8
2592c     08 00 80 AF 
25930     0F FF 6B AC |  if_e	wrlong	##4607, local01
25934     00 FA 05 A6 |  if_e	mov	result1, #0
25938     38 00 90 AD |  if_e	jmp	#LR__3662
2593c     34 22 06 F1 | 	add	local03, #52
25940     11 23 02 FB | 	rdlong	local03, local03
25944     11 25 02 F6 | 	mov	local04, local03
25948     13 22 46 F7 | 	zerox	local03, #19
2594c     14 24 46 F0 | 	shr	local04, #20
25950     02 24 66 F0 | 	shl	local04, #2
25954     ED 24 02 F1 | 	add	local04, __methods__
25958     12 25 02 FB | 	rdlong	local04, local04
2595c     10 13 02 F6 | 	mov	arg01, local02
25960     0F 15 02 F6 | 	mov	arg02, local01
25964     F2 20 02 F6 | 	mov	local02, objptr
25968     11 E5 01 F6 | 	mov	objptr, local03
2596c     2D 24 62 FD | 	call	local04
25970     10 E5 01 F6 | 	mov	objptr, local02
25974                 | LR__3662
25974     A7 F0 03 F6 | 	mov	ptra, fp
25978     B2 00 A0 FD | 	call	#popregs_
2597c                 | __system__stat_ret
2597c     2D 00 64 FD | 	ret
25980                 | 
25980                 | __system__write
25980     0A 12 16 F2 | 	cmp	arg01, #10 wc
25984     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
25988     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2598c     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
25990     01 FA 65 36 |  if_ae	neg	result1, #1
25994     20 00 90 3D |  if_ae	jmp	#LR__3670
25998     34 12 06 FD | 	qmul	arg01, #52
2599c     02 00 00 FF 
259a0     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
259a4     18 12 62 FD | 	getqx	arg01
259a8     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
259ac     02 00 00 FF 
259b0     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
259b4     0C 10 B0 FD | 	call	#__system___vfswrite
259b8                 | LR__3670
259b8                 | __system__write_ret
259b8     2D 00 64 FD | 	ret
259bc                 | 
259bc                 | __system__read
259bc     0A 12 16 F2 | 	cmp	arg01, #10 wc
259c0     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
259c4     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
259c8     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
259cc     01 FA 65 36 |  if_ae	neg	result1, #1
259d0     20 00 90 3D |  if_ae	jmp	#LR__3680
259d4     34 12 06 FD | 	qmul	arg01, #52
259d8     02 00 00 FF 
259dc     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
259e0     18 12 62 FD | 	getqx	arg01
259e4     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
259e8     02 00 00 FF 
259ec     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
259f0     98 11 B0 FD | 	call	#__system___vfsread
259f4                 | LR__3680
259f4                 | __system__read_ret
259f4     2D 00 64 FD | 	ret
259f8                 | 
259f8                 | __system__close
259f8     0A 12 16 F2 | 	cmp	arg01, #10 wc
259fc     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
25a00     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
25a04     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
25a08     01 FA 65 36 |  if_ae	neg	result1, #1
25a0c     20 00 90 3D |  if_ae	jmp	#LR__3690
25a10     34 12 06 FD | 	qmul	arg01, #52
25a14     02 00 00 FF 
25a18     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
25a1c     18 12 62 FD | 	getqx	arg01
25a20     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
25a24     02 00 00 FF 
25a28     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
25a2c     10 F9 BF FD | 	call	#__system___closeraw
25a30                 | LR__3690
25a30                 | __system__close_ret
25a30     2D 00 64 FD | 	ret
25a34                 | 
25a34                 | __system__lseek
25a34     06 4A 05 F6 | 	mov	COUNT_, #6
25a38     A8 00 A0 FD | 	call	#pushregs_
25a3c     0A 12 16 F2 | 	cmp	arg01, #10 wc
25a40     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
25a44     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
25a48     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
25a4c     01 FA 65 36 |  if_ae	neg	result1, #1
25a50     C4 00 90 3D |  if_ae	jmp	#LR__3701
25a54     34 12 06 FD | 	qmul	arg01, #52
25a58     02 00 00 FF 
25a5c     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
25a60     18 1E 62 FD | 	getqx	local01
25a64     F3 1E 02 F1 | 	add	local01, ptr___system__dat__
25a68     30 1E 06 F1 | 	add	local01, #48
25a6c     0F 13 0A FB | 	rdlong	arg01, local01 wz
25a70     30 1E 86 F1 | 	sub	local01, #48
25a74     02 00 00 FF 
25a78     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
25a7c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
25a80     F3 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
25a84     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
25a88     01 FA 65 A6 |  if_e	neg	result1, #1
25a8c     88 00 90 AD |  if_e	jmp	#LR__3701
25a90     08 1E 06 F1 | 	add	local01, #8
25a94     0F 21 02 FB | 	rdlong	local02, local01
25a98     08 1E 86 F1 | 	sub	local01, #8
25a9c     40 20 CE F7 | 	test	local02, #64 wz
25aa0     08 1E 06 51 |  if_ne	add	local01, #8
25aa4     0F 21 02 5B |  if_ne	rdlong	local02, local01
25aa8     80 20 46 55 |  if_ne	or	local02, #128
25aac     0F 21 62 5C |  if_ne	wrlong	local02, local01
25ab0     08 1E 86 51 |  if_ne	sub	local01, #8
25ab4     30 1E 06 F1 | 	add	local01, #48
25ab8     0F 23 02 FB | 	rdlong	local03, local01
25abc     11 25 02 F6 | 	mov	local04, local03
25ac0     30 1E 86 F1 | 	sub	local01, #48
25ac4     13 24 46 F7 | 	zerox	local04, #19
25ac8     14 22 46 F0 | 	shr	local03, #20
25acc     02 22 66 F0 | 	shl	local03, #2
25ad0     ED 22 02 F1 | 	add	local03, __methods__
25ad4     11 23 02 FB | 	rdlong	local03, local03
25ad8     0F 13 02 F6 | 	mov	arg01, local01
25adc     F2 26 02 F6 | 	mov	local05, objptr
25ae0     12 E5 01 F6 | 	mov	objptr, local04
25ae4     2D 22 62 FD | 	call	local03
25ae8     13 E5 01 F6 | 	mov	objptr, local05
25aec     FD 28 02 F6 | 	mov	local06, result1
25af0     00 28 56 F2 | 	cmps	local06, #0 wc
25af4     1C 00 90 3D |  if_ae	jmp	#LR__3700
25af8     14 13 6A F6 | 	neg	arg01, local06 wz
25afc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
25b00     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
25b04     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
25b08     01 FA 65 56 |  if_ne	neg	result1, #1
25b0c     00 FA 05 A6 |  if_e	mov	result1, #0
25b10     04 00 90 FD | 	jmp	#LR__3701
25b14                 | LR__3700
25b14     14 FB 01 F6 | 	mov	result1, local06
25b18                 | LR__3701
25b18     A7 F0 03 F6 | 	mov	ptra, fp
25b1c     B2 00 A0 FD | 	call	#popregs_
25b20                 | __system__lseek_ret
25b20     2D 00 64 FD | 	ret
25b24                 | 
25b24                 | __system___ioctl
25b24     03 4A 05 F6 | 	mov	COUNT_, #3
25b28     A8 00 A0 FD | 	call	#pushregs_
25b2c     00 12 4E F2 | 	cmps	arg01, #0 wz
25b30     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
25b34     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
25b38     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
25b3c     01 FA 65 A6 |  if_e	neg	result1, #1
25b40     5C 00 90 AD |  if_e	jmp	#LR__3711
25b44     28 12 06 F1 | 	add	arg01, #40
25b48     09 1F 02 FB | 	rdlong	local01, arg01
25b4c     0F 21 02 F6 | 	mov	local02, local01
25b50     28 12 86 F1 | 	sub	arg01, #40
25b54     13 20 46 F7 | 	zerox	local02, #19
25b58     14 1E 46 F0 | 	shr	local01, #20
25b5c     02 1E 66 F0 | 	shl	local01, #2
25b60     ED 1E 02 F1 | 	add	local01, __methods__
25b64     0F 1F 02 FB | 	rdlong	local01, local01
25b68     F2 22 02 F6 | 	mov	local03, objptr
25b6c     10 E5 01 F6 | 	mov	objptr, local02
25b70     2D 1E 62 FD | 	call	local01
25b74     11 E5 01 F6 | 	mov	objptr, local03
25b78     FD 12 0A F6 | 	mov	arg01, result1 wz
25b7c     1C 00 90 AD |  if_e	jmp	#LR__3710
25b80     00 12 4E F2 | 	cmps	arg01, #0 wz
25b84     20 E6 05 F1 | 	add	ptr___system__dat__, #32
25b88     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
25b8c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
25b90     01 FA 65 56 |  if_ne	neg	result1, #1
25b94     00 FA 05 A6 |  if_e	mov	result1, #0
25b98     04 00 90 FD | 	jmp	#LR__3711
25b9c                 | LR__3710
25b9c     00 FA 05 F6 | 	mov	result1, #0
25ba0                 | LR__3711
25ba0     A7 F0 03 F6 | 	mov	ptra, fp
25ba4     B2 00 A0 FD | 	call	#popregs_
25ba8                 | __system___ioctl_ret
25ba8     2D 00 64 FD | 	ret
25bac                 | 
25bac                 | __system___isatty
25bac     00 4A 05 F6 | 	mov	COUNT_, #0
25bb0     A8 00 A0 FD | 	call	#pushregs_
25bb4     0C F0 07 F1 | 	add	ptra, #12
25bb8     04 4E 05 F1 | 	add	fp, #4
25bbc     A7 12 62 FC | 	wrlong	arg01, fp
25bc0     04 4E 05 F1 | 	add	fp, #4
25bc4     A7 16 02 F6 | 	mov	arg03, fp
25bc8     08 4E 85 F1 | 	sub	fp, #8
25bcc     00 15 06 F6 | 	mov	arg02, #256
25bd0     50 FF BF FD | 	call	#__system___ioctl
25bd4     00 FA 0D F2 | 	cmp	result1, #0 wz
25bd8     01 FA 05 A6 |  if_e	mov	result1, #1
25bdc     00 FA 05 56 |  if_ne	mov	result1, #0
25be0     A7 F0 03 F6 | 	mov	ptra, fp
25be4     B2 00 A0 FD | 	call	#popregs_
25be8                 | __system___isatty_ret
25be8     2D 00 64 FD | 	ret
25bec                 | 
25bec                 | __system____getftab
25bec     0A 12 16 F2 | 	cmp	arg01, #10 wc
25bf0     34 12 06 CD |  if_b	qmul	arg01, #52
25bf4     00 FA 05 36 |  if_ae	mov	result1, #0
25bf8     02 00 00 CF 
25bfc     20 E7 05 C1 |  if_b	add	ptr___system__dat__, ##1312
25c00     18 FA 61 CD |  if_b	getqx	result1
25c04     F3 FA 01 C1 |  if_b	add	result1, ptr___system__dat__
25c08     02 00 00 CF 
25c0c     20 E7 85 C1 |  if_b	sub	ptr___system__dat__, ##1312
25c10                 | __system____getftab_ret
25c10     2D 00 64 FD | 	ret
25c14                 | 
25c14                 | __system__strncpy
25c14     09 01 02 F6 | 	mov	_var01, arg01
25c18                 | LR__3720
25c18     01 16 86 F1 | 	sub	arg03, #1
25c1c     00 16 56 F2 | 	cmps	arg03, #0 wc
25c20     18 00 90 CD |  if_b	jmp	#LR__3721
25c24     0A FB C1 FA | 	rdbyte	result1, arg02
25c28     00 FB 41 FC | 	wrbyte	result1, _var01
25c2c     01 14 06 F1 | 	add	arg02, #1
25c30     00 FB C9 FA | 	rdbyte	result1, _var01 wz
25c34     01 00 06 F1 | 	add	_var01, #1
25c38     DC FF 9F 5D |  if_ne	jmp	#LR__3720
25c3c                 | LR__3721
25c3c     97 0C 48 FB | 	callpa	#(@LR__3723-@LR__3722)>>2,fcache_load_ptr_
25c40                 | LR__3722
25c40     01 16 86 F1 | 	sub	arg03, #1
25c44     00 16 56 F2 | 	cmps	arg03, #0 wc
25c48     00 03 02 36 |  if_ae	mov	_var02, _var01
25c4c     01 00 06 31 |  if_ae	add	_var01, #1
25c50     01 01 48 3C |  if_ae	wrbyte	#0, _var02
25c54     E8 FF 9F 3D |  if_ae	jmp	#LR__3722
25c58                 | LR__3723
25c58     09 FB 01 F6 | 	mov	result1, arg01
25c5c                 | __system__strncpy_ret
25c5c     2D 00 64 FD | 	ret
25c60                 | 
25c60                 | __system__strncat
25c60     00 14 4E F2 | 	cmps	arg02, #0 wz
25c64     50 00 90 AD |  if_e	jmp	#LR__3734
25c68     01 16 16 F2 | 	cmp	arg03, #1 wc
25c6c     48 00 90 CD |  if_b	jmp	#LR__3734
25c70     09 01 02 F6 | 	mov	_var01, arg01
25c74     97 1E 48 FB | 	callpa	#(@LR__3732-@LR__3730)>>2,fcache_load_ptr_
25c78                 | LR__3730
25c78     00 FB C9 FA | 	rdbyte	result1, _var01 wz
25c7c     01 00 06 51 |  if_ne	add	_var01, #1
25c80     F4 FF 9F 5D |  if_ne	jmp	#LR__3730
25c84     0B 03 02 F6 | 	mov	_var02, arg03
25c88                 | LR__3731
25c88     0A 05 C2 FA | 	rdbyte	_var03, arg02
25c8c     02 07 02 F6 | 	mov	_var04, _var03
25c90     07 06 4E F7 | 	zerox	_var04, #7 wz
25c94     01 14 06 F1 | 	add	arg02, #1
25c98     18 00 90 AD |  if_e	jmp	#LR__3733
25c9c     01 02 86 F1 | 	sub	_var02, #1
25ca0     00 02 56 F2 | 	cmps	_var02, #0 wc
25ca4     00 07 02 36 |  if_ae	mov	_var04, _var01
25ca8     01 00 06 31 |  if_ae	add	_var01, #1
25cac     03 05 42 3C |  if_ae	wrbyte	_var03, _var04
25cb0     D4 FF 9F 3D |  if_ae	jmp	#LR__3731
25cb4                 | LR__3732
25cb4                 | LR__3733
25cb4     00 01 48 FC | 	wrbyte	#0, _var01
25cb8                 | LR__3734
25cb8     09 FB 01 F6 | 	mov	result1, arg01
25cbc                 | __system__strncat_ret
25cbc     2D 00 64 FD | 	ret
25cc0                 | 
25cc0                 | __system__strncmp
25cc0     09 01 0A F6 | 	mov	_var01, arg01 wz
25cc4     14 00 90 5D |  if_ne	jmp	#LR__3740
25cc8     00 14 0E F2 | 	cmp	arg02, #0 wz
25ccc     01 02 66 56 |  if_ne	neg	_var02, #1
25cd0     00 02 06 A6 |  if_e	mov	_var02, #0
25cd4     01 FB 01 F6 | 	mov	result1, _var02
25cd8     74 00 90 FD | 	jmp	#__system__strncmp_ret
25cdc                 | LR__3740
25cdc     00 14 0E F2 | 	cmp	arg02, #0 wz
25ce0     01 FA 05 A6 |  if_e	mov	result1, #1
25ce4     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
25ce8     0B 05 02 F6 | 	mov	_var03, arg03
25cec     97 16 48 FB | 	callpa	#(@LR__3742-@LR__3741)>>2,fcache_load_ptr_
25cf0                 | LR__3741
25cf0     00 07 C2 FA | 	rdbyte	_var04, _var01
25cf4     0A 09 02 F6 | 	mov	_var05, arg02
25cf8     04 0B C2 FA | 	rdbyte	_var06, _var05
25cfc     01 04 86 F1 | 	sub	_var03, #1
25d00     00 04 56 F2 | 	cmps	_var03, #0 wc
25d04     01 00 06 F1 | 	add	_var01, #1
25d08     01 14 06 F1 | 	add	arg02, #1
25d0c     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
25d10     08 00 90 2D |  if_nc_and_z	jmp	#LR__3743
25d14     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
25d18     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3741
25d1c                 | LR__3742
25d1c                 | LR__3743
25d1c     00 04 56 F2 | 	cmps	_var03, #0 wc
25d20     00 FA 05 C6 |  if_b	mov	result1, #0
25d24     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
25d28     05 07 0A F2 | 	cmp	_var04, _var06 wz
25d2c     00 FA 05 A6 |  if_e	mov	result1, #0
25d30     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
25d34     00 06 0E F2 | 	cmp	_var04, #0 wz
25d38     01 FA 65 A6 |  if_e	neg	result1, #1
25d3c     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
25d40     00 0A 0E F2 | 	cmp	_var06, #0 wz
25d44     01 FA 05 A6 |  if_e	mov	result1, #1
25d48     03 FB 01 56 |  if_ne	mov	result1, _var04
25d4c     05 FB 81 51 |  if_ne	sub	result1, _var06
25d50                 | __system__strncmp_ret
25d50     2D 00 64 FD | 	ret
25d54                 | 
25d54                 | __system____root_opendir
25d54     64 E6 05 F1 | 	add	ptr___system__dat__, #100
25d58     04 12 06 F1 | 	add	arg01, #4
25d5c     09 E7 61 FC | 	wrlong	ptr___system__dat__, arg01
25d60     00 FA 05 F6 | 	mov	result1, #0
25d64     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
25d68                 | __system____root_opendir_ret
25d68     2D 00 64 FD | 	ret
25d6c                 | 
25d6c                 | __system____root_readdir
25d6c     03 4A 05 F6 | 	mov	COUNT_, #3
25d70     A8 00 A0 FD | 	call	#pushregs_
25d74     09 1F 02 F6 | 	mov	local01, arg01
25d78     0A 21 02 F6 | 	mov	local02, arg02
25d7c     04 1E 06 F1 | 	add	local01, #4
25d80     0F 23 02 FB | 	rdlong	local03, local01
25d84     04 1E 86 F1 | 	sub	local01, #4
25d88                 | LR__3750
25d88     74 E6 05 F1 | 	add	ptr___system__dat__, #116
25d8c     F3 22 0A F2 | 	cmp	local03, ptr___system__dat__ wz
25d90     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
25d94     01 FA 65 A6 |  if_e	neg	result1, #1
25d98     48 00 90 AD |  if_e	jmp	#LR__3751
25d9c     11 17 0A FB | 	rdlong	arg03, local03 wz
25da0     04 22 06 A1 |  if_e	add	local03, #4
25da4     E0 FF 9F AD |  if_e	jmp	#LR__3750
25da8     11 15 02 FB | 	rdlong	arg02, local03
25dac     01 14 06 F1 | 	add	arg02, #1
25db0     10 13 02 F6 | 	mov	arg01, local02
25db4     40 16 06 F6 | 	mov	arg03, #64
25db8     58 FE BF FD | 	call	#__system__strncpy
25dbc     50 20 06 F1 | 	add	local02, #80
25dc0     10 03 48 FC | 	wrbyte	#1, local02
25dc4     08 20 86 F1 | 	sub	local02, #8
25dc8     10 01 68 FC | 	wrlong	#0, local02
25dcc     04 20 06 F1 | 	add	local02, #4
25dd0     10 01 68 FC | 	wrlong	#0, local02
25dd4     04 22 06 F1 | 	add	local03, #4
25dd8     04 1E 06 F1 | 	add	local01, #4
25ddc     0F 23 62 FC | 	wrlong	local03, local01
25de0     00 FA 05 F6 | 	mov	result1, #0
25de4                 | LR__3751
25de4     A7 F0 03 F6 | 	mov	ptra, fp
25de8     B2 00 A0 FD | 	call	#popregs_
25dec                 | __system____root_readdir_ret
25dec     2D 00 64 FD | 	ret
25df0                 | 
25df0                 | __system____root_closedir
25df0     00 FA 05 F6 | 	mov	result1, #0
25df4                 | __system____root_closedir_ret
25df4     2D 00 64 FD | 	ret
25df8                 | 
25df8                 | __system____root_stat
25df8     0A 01 02 F6 | 	mov	_var01, arg02
25dfc     00 13 02 F6 | 	mov	arg01, _var01
25e00     00 14 06 F6 | 	mov	arg02, #0
25e04     30 16 06 F6 | 	mov	arg03, #48
25e08     98 00 A0 FD | 	call	#\builtin_bytefill_
25e0c     08 00 06 F1 | 	add	_var01, #8
25e10     08 00 80 FF 
25e14     00 FF 6B FC | 	wrlong	##4607, _var01
25e18     00 FA 05 F6 | 	mov	result1, #0
25e1c                 | __system____root_stat_ret
25e1c     2D 00 64 FD | 	ret
25e20                 | 
25e20                 | __system___normalizeName
25e20     00 00 06 F6 | 	mov	_var01, #0
25e24     09 03 02 F6 | 	mov	_var02, arg01
25e28     01 05 02 F6 | 	mov	_var03, _var02
25e2c                 | LR__3760
25e2c     01 07 CA FA | 	rdbyte	_var04, _var02 wz
25e30     5C 01 90 AD |  if_e	jmp	#LR__3779
25e34     00 00 0E F2 | 	cmp	_var01, #0 wz
25e38     02 07 02 56 |  if_ne	mov	_var04, _var03
25e3c     01 04 06 51 |  if_ne	add	_var03, #1
25e40     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
25e44     00 00 06 56 |  if_ne	mov	_var01, #0
25e48     01 07 C2 FA | 	rdbyte	_var04, _var02
25e4c     2E 06 0E F2 | 	cmp	_var04, #46 wz
25e50     D8 00 90 5D |  if_ne	jmp	#LR__3772
25e54     01 02 06 F1 | 	add	_var02, #1
25e58     01 07 C2 FA | 	rdbyte	_var04, _var02
25e5c     01 02 86 F1 | 	sub	_var02, #1
25e60     2F 06 0E F2 | 	cmp	_var04, #47 wz
25e64     18 00 90 AD |  if_e	jmp	#LR__3761
25e68     01 02 06 F1 | 	add	_var02, #1
25e6c     01 09 C2 FA | 	rdbyte	_var05, _var02
25e70     01 02 86 F1 | 	sub	_var02, #1
25e74     04 0B 02 F6 | 	mov	_var06, _var05
25e78     07 0A 4E F7 | 	zerox	_var06, #7 wz
25e7c     10 00 90 5D |  if_ne	jmp	#LR__3762
25e80                 | LR__3761
25e80     01 0D 02 F6 | 	mov	_var07, _var02
25e84     01 0C 06 F1 | 	add	_var07, #1
25e88     06 03 02 F6 | 	mov	_var02, _var07
25e8c     E0 00 90 FD | 	jmp	#LR__3776
25e90                 | LR__3762
25e90     01 02 06 F1 | 	add	_var02, #1
25e94     01 0D C2 FA | 	rdbyte	_var07, _var02
25e98     01 02 86 F1 | 	sub	_var02, #1
25e9c     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
25ea0     2E 06 0E F2 | 	cmp	_var04, #46 wz
25ea4     84 00 90 5D |  if_ne	jmp	#LR__3771
25ea8     02 02 06 F1 | 	add	_var02, #2
25eac     01 0D C2 FA | 	rdbyte	_var07, _var02
25eb0     02 02 86 F1 | 	sub	_var02, #2
25eb4     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
25eb8     2F 06 0E F2 | 	cmp	_var04, #47 wz
25ebc     18 00 90 AD |  if_e	jmp	#LR__3763
25ec0     02 02 06 F1 | 	add	_var02, #2
25ec4     01 09 C2 FA | 	rdbyte	_var05, _var02
25ec8     02 02 86 F1 | 	sub	_var02, #2
25ecc     04 0B 02 F6 | 	mov	_var06, _var05
25ed0     07 0A 4E F7 | 	zerox	_var06, #7 wz
25ed4     54 00 90 5D |  if_ne	jmp	#LR__3770
25ed8                 | LR__3763
25ed8     02 02 06 F1 | 	add	_var02, #2
25edc     09 05 5A F2 | 	cmps	_var03, arg01 wcz
25ee0     40 00 90 ED |  if_be	jmp	#LR__3769
25ee4     02 0F 02 F6 | 	mov	_var08, _var03
25ee8     01 0E 86 F1 | 	sub	_var08, #1
25eec                 | LR__3764
25eec     07 07 C2 FA | 	rdbyte	_var04, _var08
25ef0     2F 06 0E F2 | 	cmp	_var04, #47 wz
25ef4     0C 00 90 5D |  if_ne	jmp	#LR__3765
25ef8     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
25efc     01 0E 86 11 |  if_a	sub	_var08, #1
25f00     E8 FF 9F 1D |  if_a	jmp	#LR__3764
25f04                 | LR__3765
25f04     97 0C 48 FB | 	callpa	#(@LR__3767-@LR__3766)>>2,fcache_load_ptr_
25f08                 | LR__3766
25f08     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
25f0c     10 00 90 ED |  if_be	jmp	#LR__3768
25f10     07 07 C2 FA | 	rdbyte	_var04, _var08
25f14     2F 06 0E F2 | 	cmp	_var04, #47 wz
25f18     01 0E 86 51 |  if_ne	sub	_var08, #1
25f1c     E8 FF 9F 5D |  if_ne	jmp	#LR__3766
25f20                 | LR__3767
25f20                 | LR__3768
25f20     07 05 02 F6 | 	mov	_var03, _var08
25f24                 | LR__3769
25f24     01 00 06 F6 | 	mov	_var01, #1
25f28     44 00 90 FD | 	jmp	#LR__3776
25f2c                 | LR__3770
25f2c                 | LR__3771
25f2c                 | LR__3772
25f2c     97 18 48 FB | 	callpa	#(@LR__3774-@LR__3773)>>2,fcache_load_ptr_
25f30                 | LR__3773
25f30     01 07 CA FA | 	rdbyte	_var04, _var02 wz
25f34     01 0D C2 5A |  if_ne	rdbyte	_var07, _var02
25f38     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
25f3c     20 00 90 AD |  if_e	jmp	#LR__3775
25f40     01 0B 02 F6 | 	mov	_var06, _var02
25f44     01 09 02 F6 | 	mov	_var05, _var02
25f48     01 08 06 F1 | 	add	_var05, #1
25f4c     05 11 C2 FA | 	rdbyte	_var09, _var06
25f50     04 03 02 F6 | 	mov	_var02, _var05
25f54     02 11 42 FC | 	wrbyte	_var09, _var03
25f58     01 04 06 F1 | 	add	_var03, #1
25f5c     D0 FF 9F FD | 	jmp	#LR__3773
25f60                 | LR__3774
25f60                 | LR__3775
25f60     01 07 C2 FA | 	rdbyte	_var04, _var02
25f64     2F 06 0E F2 | 	cmp	_var04, #47 wz
25f68     C0 FE 9F 5D |  if_ne	jmp	#LR__3760
25f6c     01 00 06 F6 | 	mov	_var01, #1
25f70                 | LR__3776
25f70     97 0C 48 FB | 	callpa	#(@LR__3778-@LR__3777)>>2,fcache_load_ptr_
25f74                 | LR__3777
25f74     01 07 C2 FA | 	rdbyte	_var04, _var02
25f78     2F 06 0E F2 | 	cmp	_var04, #47 wz
25f7c     01 0D 02 A6 |  if_e	mov	_var07, _var02
25f80     01 0C 06 A1 |  if_e	add	_var07, #1
25f84     06 03 02 A6 |  if_e	mov	_var02, _var07
25f88     E8 FF 9F AD |  if_e	jmp	#LR__3777
25f8c                 | LR__3778
25f8c     9C FE 9F FD | 	jmp	#LR__3760
25f90                 | LR__3779
25f90     02 01 48 FC | 	wrbyte	#0, _var03
25f94                 | __system___normalizeName_ret
25f94     2D 00 64 FD | 	ret
25f98                 | 
25f98                 | __system___strrev
25f98     09 01 CA FA | 	rdbyte	_var01, arg01 wz
25f9c     3C 00 90 AD |  if_e	jmp	#__system___strrev_ret
25fa0     09 03 02 F6 | 	mov	_var02, arg01
25fa4     97 1A 48 FB | 	callpa	#(@LR__3782-@LR__3780)>>2,fcache_load_ptr_
25fa8                 | LR__3780
25fa8     01 01 CA FA | 	rdbyte	_var01, _var02 wz
25fac     01 02 06 51 |  if_ne	add	_var02, #1
25fb0     F4 FF 9F 5D |  if_ne	jmp	#LR__3780
25fb4     01 02 86 F1 | 	sub	_var02, #1
25fb8                 | LR__3781
25fb8     09 03 5A F2 | 	cmps	_var02, arg01 wcz
25fbc     1C 00 90 ED |  if_be	jmp	#LR__3783
25fc0     09 01 C2 FA | 	rdbyte	_var01, arg01
25fc4     01 05 C2 FA | 	rdbyte	_var03, _var02
25fc8     09 05 42 FC | 	wrbyte	_var03, arg01
25fcc     01 01 42 FC | 	wrbyte	_var01, _var02
25fd0     01 12 06 F1 | 	add	arg01, #1
25fd4     01 02 86 F1 | 	sub	_var02, #1
25fd8     DC FF 9F FD | 	jmp	#LR__3781
25fdc                 | LR__3782
25fdc                 | LR__3783
25fdc                 | __system___strrev_ret
25fdc     2D 00 64 FD | 	ret
25fe0                 | 
25fe0                 | __system___fmtpad
25fe0     06 4A 05 F6 | 	mov	COUNT_, #6
25fe4     A8 00 A0 FD | 	call	#pushregs_
25fe8     09 1F 02 F6 | 	mov	local01, arg01
25fec     0A 21 02 F6 | 	mov	local02, arg02
25ff0     0B 23 02 F6 | 	mov	local03, arg03
25ff4     10 13 EA F8 | 	getbyte	arg01, local02, #1
25ff8     16 20 46 F0 | 	shr	local02, #22
25ffc     03 20 0E F5 | 	and	local02, #3 wz
26000     00 24 06 F6 | 	mov	local04, #0
26004     01 20 06 A6 |  if_e	mov	local02, #1
26008     0C 21 CA F7 | 	test	local02, arg04 wz
2600c     00 FA 05 A6 |  if_e	mov	result1, #0
26010     88 00 90 AD |  if_e	jmp	#LR__3793
26014     09 23 C2 F2 | 	subr	local03, arg01
26018     01 22 56 F2 | 	cmps	local03, #1 wc
2601c     00 FA 05 C6 |  if_b	mov	result1, #0
26020     78 00 90 CD |  if_b	jmp	#LR__3793
26024     03 20 0E F2 | 	cmp	local02, #3 wz
26028     18 00 90 5D |  if_ne	jmp	#LR__3790
2602c     01 18 0E F2 | 	cmp	arg04, #1 wz
26030     6E 20 62 FD | 	wrz	local02
26034     10 23 02 F1 | 	add	local03, local02
26038     11 23 52 F6 | 	abs	local03, local03 wc
2603c     01 22 46 F0 | 	shr	local03, #1
26040     11 23 82 F6 | 	negc	local03, local03
26044                 | LR__3790
26044     01 22 56 F2 | 	cmps	local03, #1 wc
26048     4C 00 90 CD |  if_b	jmp	#LR__3792
2604c     11 27 02 F6 | 	mov	local05, local03
26050                 | LR__3791
26050     0F 21 02 F6 | 	mov	local02, local01
26054     0F 29 02 F6 | 	mov	local06, local01
26058     13 20 46 F7 | 	zerox	local02, #19
2605c     14 28 46 F0 | 	shr	local06, #20
26060     02 28 66 F0 | 	shl	local06, #2
26064     ED 28 02 F1 | 	add	local06, __methods__
26068     14 29 02 FB | 	rdlong	local06, local06
2606c     20 12 06 F6 | 	mov	arg01, #32
26070     F2 22 02 F6 | 	mov	local03, objptr
26074     10 E5 01 F6 | 	mov	objptr, local02
26078     2D 28 62 FD | 	call	local06
2607c     11 E5 01 F6 | 	mov	objptr, local03
26080     FD 28 02 F6 | 	mov	local06, result1
26084     00 28 56 F2 | 	cmps	local06, #0 wc
26088     14 FB 01 C6 |  if_b	mov	result1, local06
2608c     0C 00 90 CD |  if_b	jmp	#LR__3793
26090     14 25 02 F1 | 	add	local04, local06
26094     EE 27 6E FB | 	djnz	local05, #LR__3791
26098                 | LR__3792
26098     12 FB 01 F6 | 	mov	result1, local04
2609c                 | LR__3793
2609c     A7 F0 03 F6 | 	mov	ptra, fp
260a0     B2 00 A0 FD | 	call	#popregs_
260a4                 | __system___fmtpad_ret
260a4     2D 00 64 FD | 	ret
260a8                 | 
260a8                 | __system___uitoa
260a8     04 4A 05 F6 | 	mov	COUNT_, #4
260ac     A8 00 A0 FD | 	call	#pushregs_
260b0     09 1F 02 F6 | 	mov	local01, arg01
260b4     00 1A 4E F2 | 	cmps	arg05, #0 wz
260b8     0F 1B 02 F6 | 	mov	arg05, local01
260bc     00 20 06 F6 | 	mov	local02, #0
260c0     37 22 06 56 |  if_ne	mov	local03, #55
260c4     57 22 06 A6 |  if_e	mov	local03, #87
260c8                 | LR__3800
260c8     0B 15 12 FD | 	qdiv	arg02, arg03
260cc     19 24 62 FD | 	getqy	local04
260d0     0B 15 12 FD | 	qdiv	arg02, arg03
260d4     0A 24 16 F2 | 	cmp	local04, #10 wc
260d8     30 24 06 C1 |  if_b	add	local04, #48
260dc     11 25 02 31 |  if_ae	add	local04, local03
260e0     0D 25 42 FC | 	wrbyte	local04, arg05
260e4     01 1A 06 F1 | 	add	arg05, #1
260e8     01 20 06 F1 | 	add	local02, #1
260ec     18 14 62 FD | 	getqx	arg02
260f0     00 14 0E F2 | 	cmp	arg02, #0 wz
260f4     D0 FF 9F 5D |  if_ne	jmp	#LR__3800
260f8     0C 21 12 F2 | 	cmp	local02, arg04 wc
260fc     C8 FF 9F CD |  if_b	jmp	#LR__3800
26100     0D 01 48 FC | 	wrbyte	#0, arg05
26104     0F 13 02 F6 | 	mov	arg01, local01
26108     8C FE BF FD | 	call	#__system___strrev
2610c     10 FB 01 F6 | 	mov	result1, local02
26110     A7 F0 03 F6 | 	mov	ptra, fp
26114     B2 00 A0 FD | 	call	#popregs_
26118                 | __system___uitoa_ret
26118     2D 00 64 FD | 	ret
2611c                 | 
2611c                 | __system__disassemble_0498
2611c     10 4A 05 F6 | 	mov	COUNT_, #16
26120     A8 00 A0 FD | 	call	#pushregs_
26124     09 1F 02 F6 | 	mov	local01, arg01
26128     0A 21 02 F6 | 	mov	local02, arg02
2612c     0B 23 02 F6 | 	mov	local03, arg03
26130     0C 25 02 F6 | 	mov	local04, arg04
26134     0D 27 02 F6 | 	mov	local05, arg05
26138     13 13 52 F6 | 	abs	arg01, local05 wc
2613c     1F 28 C6 C9 |  if_b	decod	local06, #31
26140     00 28 06 36 |  if_ae	mov	local06, #0
26144     CC CF BF FD | 	call	#__system___float_fromuns
26148     14 FB 61 F5 | 	xor	result1, local06
2614c     FD 2A 02 F6 | 	mov	local07, result1
26150     00 2C 06 F6 | 	mov	local08, #0
26154     0F 13 02 F6 | 	mov	arg01, local01
26158     00 14 06 F6 | 	mov	arg02, #0
2615c     01 16 06 F6 | 	mov	arg03, #1
26160     E8 D7 BF FD | 	call	#__system___float_cmp
26164     00 FA 0D F2 | 	cmp	result1, #0 wz
26168     00 2E 06 A6 |  if_e	mov	local09, #0
2616c     10 01 68 AC |  if_e	wrlong	#0, local02
26170     11 2F 62 AC |  if_e	wrlong	local09, local03
26174     8C 01 90 AD |  if_e	jmp	#LR__3822
26178     0F 13 02 F6 | 	mov	arg01, local01
2617c     BC DC BF FD | 	call	#__system____builtin_ilogb
26180     FD 30 02 F6 | 	mov	local10, result1
26184     0A 26 0E F2 | 	cmp	local05, #10 wz
26188     24 00 90 5D |  if_ne	jmp	#LR__3810
2618c     18 2F 02 F6 | 	mov	local09, local10
26190     01 2E 66 F0 | 	shl	local09, #1
26194     18 2F 02 F1 | 	add	local09, local10
26198     17 31 52 F6 | 	abs	local10, local09 wc
2619c     0A 30 16 FD | 	qdiv	local10, #10
261a0     09 32 06 F6 | 	mov	local11, #9
261a4     18 30 62 FD | 	getqx	local10
261a8     18 31 82 F6 | 	negc	local10, local10
261ac     04 00 90 FD | 	jmp	#LR__3811
261b0                 | LR__3810
261b0     18 32 06 F6 | 	mov	local11, #24
261b4                 | LR__3811
261b4                 | LR__3812
261b4     08 2C 56 F2 | 	cmps	local08, #8 wc
261b8     01 2C 06 F1 | 	add	local08, #1
261bc     60 00 90 3D |  if_ae	jmp	#LR__3813
261c0     00 C0 1F FF 
261c4     00 12 06 F6 | 	mov	arg01, ##1065353216
261c8     15 15 02 F6 | 	mov	arg02, local07
261cc     18 17 02 F6 | 	mov	arg03, local10
261d0     4C E3 BF FD | 	call	#__system___float_pow_n
261d4     FD 14 02 F6 | 	mov	arg02, result1
261d8     0F 13 02 F6 | 	mov	arg01, local01
261dc     3C D5 BF FD | 	call	#__system___float_div
261e0     FD 34 02 F6 | 	mov	local12, result1
261e4     1A 13 02 F6 | 	mov	arg01, local12
261e8     00 C0 1F FF 
261ec     00 14 06 F6 | 	mov	arg02, ##1065353216
261f0     01 16 06 F6 | 	mov	arg03, #1
261f4     54 D7 BF FD | 	call	#__system___float_cmp
261f8     00 FA 55 F2 | 	cmps	result1, #0 wc
261fc     01 30 86 C1 |  if_b	sub	local10, #1
26200     B0 FF 9F CD |  if_b	jmp	#LR__3812
26204     15 15 02 F6 | 	mov	arg02, local07
26208     1A 13 02 F6 | 	mov	arg01, local12
2620c     01 16 66 F6 | 	neg	arg03, #1
26210     38 D7 BF FD | 	call	#__system___float_cmp
26214     00 FA 55 F2 | 	cmps	result1, #0 wc
26218     01 30 06 31 |  if_ae	add	local10, #1
2621c     94 FF 9F 3D |  if_ae	jmp	#LR__3812
26220                 | LR__3813
26220     1A 13 02 F6 | 	mov	arg01, local12
26224     14 DC BF FD | 	call	#__system____builtin_ilogb
26228     FD 36 02 F6 | 	mov	local13, result1
2622c     1A 39 02 F6 | 	mov	local14, local12
26230     17 39 06 F4 | 	bitl	local14, #279
26234     17 38 26 F4 | 	bith	local14, #23
26238     1B 39 62 F0 | 	shl	local14, local13
2623c     02 26 0E F2 | 	cmp	local05, #2 wz
26240     02 24 66 A0 |  if_e	shl	local04, #2
26244     00 3A 06 F6 | 	mov	local15, #0
26248     00 24 56 F2 | 	cmps	local04, #0 wc
2624c     10 00 90 3D |  if_ae	jmp	#LR__3814
26250     18 25 C2 F2 | 	subr	local04, local10
26254     00 24 56 F2 | 	cmps	local04, #0 wc
26258     A0 00 90 CD |  if_b	jmp	#LR__3821
2625c     04 00 90 FD | 	jmp	#LR__3815
26260                 | LR__3814
26260     01 24 06 F1 | 	add	local04, #1
26264                 | LR__3815
26264     19 25 7A F3 | 	fles	local04, local11 wcz
26268     01 3C 06 F6 | 	mov	local16, #1
2626c     97 22 48 FB | 	callpa	#(@LR__3817-@LR__3816)>>2,fcache_load_ptr_
26270                 | LR__3816
26270     00 40 00 FF 
26274     00 3A 16 F2 | 	cmp	local15, ##8388608 wc
26278     38 00 90 3D |  if_ae	jmp	#LR__3818
2627c     01 24 56 F2 | 	cmps	local04, #1 wc
26280     01 24 86 F1 | 	sub	local04, #1
26284     2C 00 90 CD |  if_b	jmp	#LR__3818
26288     13 3B 02 FD | 	qmul	local15, local05
2628c     1C 37 02 F6 | 	mov	local13, local14
26290     17 36 46 F0 | 	shr	local13, #23
26294     17 39 06 F4 | 	bitl	local14, #279
26298     18 3A 62 FD | 	getqx	local15
2629c     13 3D 02 FD | 	qmul	local16, local05
262a0     18 3C 62 FD | 	getqx	local16
262a4     13 39 02 FD | 	qmul	local14, local05
262a8     1B 3B 02 F1 | 	add	local15, local13
262ac     18 38 62 FD | 	getqx	local14
262b0     BC FF 9F FD | 	jmp	#LR__3816
262b4                 | LR__3817
262b4                 | LR__3818
262b4     13 2F 02 F6 | 	mov	local09, local05
262b8     17 2E 66 F0 | 	shl	local09, #23
262bc     17 37 52 F6 | 	abs	local13, local09 wc
262c0     01 36 46 F0 | 	shr	local13, #1
262c4     1B 37 82 F6 | 	negc	local13, local13
262c8     1B 39 1A F2 | 	cmp	local14, local13 wcz
262cc     20 00 90 1D |  if_a	jmp	#LR__3819
262d0     17 26 66 F0 | 	shl	local05, #23
262d4     13 37 52 F6 | 	abs	local13, local05 wc
262d8     01 36 46 F0 | 	shr	local13, #1
262dc     1B 37 82 F6 | 	negc	local13, local13
262e0     1B 39 0A F2 | 	cmp	local14, local13 wz
262e4     14 00 90 5D |  if_ne	jmp	#LR__3820
262e8     01 3A CE F7 | 	test	local15, #1 wz
262ec     0C 00 90 AD |  if_e	jmp	#LR__3820
262f0                 | LR__3819
262f0     01 3A 06 F1 | 	add	local15, #1
262f4     1E 3B 0A F2 | 	cmp	local15, local16 wz
262f8     01 30 06 A1 |  if_e	add	local10, #1
262fc                 | LR__3820
262fc                 | LR__3821
262fc     10 3B 62 FC | 	wrlong	local15, local02
26300     11 31 62 FC | 	wrlong	local10, local03
26304                 | LR__3822
26304     A7 F0 03 F6 | 	mov	ptra, fp
26308     B2 00 A0 FD | 	call	#popregs_
2630c                 | __system__disassemble_0498_ret
2630c     2D 00 64 FD | 	ret
26310                 | 
26310                 | __system__emitsign_0500
26310     00 FA 05 F6 | 	mov	result1, #0
26314     00 14 0E F2 | 	cmp	arg02, #0 wz
26318     09 01 02 56 |  if_ne	mov	_var01, arg01
2631c     01 12 06 51 |  if_ne	add	arg01, #1
26320     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
26324     01 FA 05 56 |  if_ne	mov	result1, #1
26328     00 16 0E F2 | 	cmp	arg03, #0 wz
2632c     09 61 48 5C |  if_ne	wrbyte	#48, arg01
26330     01 12 06 51 |  if_ne	add	arg01, #1
26334     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
26338     02 FA 05 51 |  if_ne	add	result1, #2
2633c                 | __system__emitsign_0500_ret
2633c     2D 00 64 FD | 	ret
26340                 | 
26340                 | __system___gettxfunc
26340     01 4A 05 F6 | 	mov	COUNT_, #1
26344     A8 00 A0 FD | 	call	#pushregs_
26348     A0 F8 BF FD | 	call	#__system____getftab
2634c     FD 1E 0A F6 | 	mov	local01, result1 wz
26350     10 00 90 AD |  if_e	jmp	#LR__3830
26354     08 1E 06 F1 | 	add	local01, #8
26358     0F 15 0A FB | 	rdlong	arg02, local01 wz
2635c     08 1E 86 F1 | 	sub	local01, #8
26360     08 00 90 5D |  if_ne	jmp	#LR__3831
26364                 | LR__3830
26364     00 FA 05 F6 | 	mov	result1, #0
26368     0C 00 90 FD | 	jmp	#LR__3832
2636c                 | LR__3831
2636c     00 90 04 FF 
26370     00 1E 46 F5 | 	or	local01, ##153092096
26374     0F FB 01 F6 | 	mov	result1, local01
26378                 | LR__3832
26378     A7 F0 03 F6 | 	mov	ptra, fp
2637c     B2 00 A0 FD | 	call	#popregs_
26380                 | __system___gettxfunc_ret
26380     2D 00 64 FD | 	ret
26384                 | 
26384                 | __system___getrxfunc
26384     01 4A 05 F6 | 	mov	COUNT_, #1
26388     A8 00 A0 FD | 	call	#pushregs_
2638c     5C F8 BF FD | 	call	#__system____getftab
26390     FD 1E 0A F6 | 	mov	local01, result1 wz
26394     10 00 90 AD |  if_e	jmp	#LR__3840
26398     08 1E 06 F1 | 	add	local01, #8
2639c     0F 15 0A FB | 	rdlong	arg02, local01 wz
263a0     08 1E 86 F1 | 	sub	local01, #8
263a4     08 00 90 5D |  if_ne	jmp	#LR__3841
263a8                 | LR__3840
263a8     00 FA 05 F6 | 	mov	result1, #0
263ac     0C 00 90 FD | 	jmp	#LR__3842
263b0                 | LR__3841
263b0     00 98 04 FF 
263b4     00 1E 46 F5 | 	or	local01, ##154140672
263b8     0F FB 01 F6 | 	mov	result1, local01
263bc                 | LR__3842
263bc     A7 F0 03 F6 | 	mov	ptra, fp
263c0     B2 00 A0 FD | 	call	#popregs_
263c4                 | __system___getrxfunc_ret
263c4     2D 00 64 FD | 	ret
263c8                 | 
263c8                 | __system___getiolock_0540
263c8     01 4A 05 F6 | 	mov	COUNT_, #1
263cc     A8 00 A0 FD | 	call	#pushregs_
263d0     18 F8 BF FD | 	call	#__system____getftab
263d4     FD 1E 0A F6 | 	mov	local01, result1 wz
263d8     10 00 90 AD |  if_e	jmp	#LR__3850
263dc     08 1E 06 F1 | 	add	local01, #8
263e0     0F FB 09 FB | 	rdlong	result1, local01 wz
263e4     08 1E 86 F1 | 	sub	local01, #8
263e8     18 00 90 5D |  if_ne	jmp	#LR__3851
263ec                 | LR__3850
263ec     01 00 00 FF 
263f0     D4 E6 05 F1 | 	add	ptr___system__dat__, ##724
263f4     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
263f8     01 00 00 FF 
263fc     D4 E6 85 F1 | 	sub	ptr___system__dat__, ##724
26400     08 00 90 FD | 	jmp	#LR__3852
26404                 | LR__3851
26404     0C 1E 06 F1 | 	add	local01, #12
26408     0F FB 01 F6 | 	mov	result1, local01
2640c                 | LR__3852
2640c     A7 F0 03 F6 | 	mov	ptra, fp
26410     B2 00 A0 FD | 	call	#popregs_
26414                 | __system___getiolock_0540_ret
26414     2D 00 64 FD | 	ret
26418                 | 
26418                 | __system____ScanForChar
26418     09 01 02 F6 | 	mov	_var01, arg01
2641c     09 03 02 F6 | 	mov	_var02, arg01
26420     97 06 48 FB | 	callpa	#(@LR__3861-@LR__3860)>>2,fcache_load_ptr_
26424                 | LR__3860
26424     01 FB C9 FA | 	rdbyte	result1, _var02 wz
26428     01 02 06 51 |  if_ne	add	_var02, #1
2642c     F4 FF 9F 5D |  if_ne	jmp	#LR__3860
26430                 | LR__3861
26430     09 03 82 F1 | 	sub	_var02, arg01
26434     01 FB 01 F6 | 	mov	result1, _var02
26438     FD 12 0A F6 | 	mov	arg01, result1 wz
2643c     00 FA 05 A6 |  if_e	mov	result1, #0
26440     B8 00 90 AD |  if_e	jmp	#LR__3868
26444     0A 05 02 F6 | 	mov	_var03, arg02
26448     07 04 4E F7 | 	zerox	_var03, #7 wz
2644c     00 FA 05 A6 |  if_e	mov	result1, #0
26450     A8 00 90 AD |  if_e	jmp	#LR__3868
26454     01 16 16 F2 | 	cmp	arg03, #1 wc
26458     00 18 0E C2 |  if_b	cmp	arg04, #0 wz
2645c     01 16 06 86 |  if_c_and_z	mov	arg03, #1
26460     00 FA 05 46 |  if_c_and_nz	mov	result1, #0
26464     94 00 90 4D |  if_c_and_nz	jmp	#LR__3868
26468     09 17 1A F2 | 	cmp	arg03, arg01 wcz
2646c     10 00 90 ED |  if_be	jmp	#LR__3862
26470     00 18 0E F2 | 	cmp	arg04, #0 wz
26474     00 FA 05 A6 |  if_e	mov	result1, #0
26478     80 00 90 AD |  if_e	jmp	#LR__3868
2647c     09 17 02 F6 | 	mov	arg03, arg01
26480                 | LR__3862
26480     01 16 86 F1 | 	sub	arg03, #1
26484     00 18 0E F2 | 	cmp	arg04, #0 wz
26488     38 00 90 5D |  if_ne	jmp	#LR__3864
2648c     0B 07 02 F6 | 	mov	_var04, arg03
26490     09 09 02 F6 | 	mov	_var05, arg01
26494                 | LR__3863
26494     04 07 12 F2 | 	cmp	_var04, _var05 wc
26498     5C 00 90 3D |  if_ae	jmp	#LR__3867
2649c     03 05 02 F6 | 	mov	_var03, _var04
264a0     00 05 02 F1 | 	add	_var03, _var01
264a4     02 05 C2 FA | 	rdbyte	_var03, _var03
264a8     0A 19 E2 F8 | 	getbyte	arg04, arg02, #0
264ac     0C 05 0A F2 | 	cmp	_var03, arg04 wz
264b0     01 06 06 A1 |  if_e	add	_var04, #1
264b4     03 FB 01 A6 |  if_e	mov	result1, _var04
264b8     40 00 90 AD |  if_e	jmp	#LR__3868
264bc     01 06 06 F1 | 	add	_var04, #1
264c0     D0 FF 9F FD | 	jmp	#LR__3863
264c4                 | LR__3864
264c4     0B 07 02 F6 | 	mov	_var04, arg03
264c8                 | LR__3865
264c8     0B 07 1A F2 | 	cmp	_var04, arg03 wcz
264cc     28 00 90 1D |  if_a	jmp	#LR__3866
264d0     03 09 02 F6 | 	mov	_var05, _var04
264d4     00 09 02 F1 | 	add	_var05, _var01
264d8     04 05 C2 FA | 	rdbyte	_var03, _var05
264dc     0A 09 E2 F8 | 	getbyte	_var05, arg02, #0
264e0     04 05 0A F2 | 	cmp	_var03, _var05 wz
264e4     01 06 06 A1 |  if_e	add	_var04, #1
264e8     03 FB 01 A6 |  if_e	mov	result1, _var04
264ec     0C 00 90 AD |  if_e	jmp	#LR__3868
264f0     01 06 86 F1 | 	sub	_var04, #1
264f4     D0 FF 9F FD | 	jmp	#LR__3865
264f8                 | LR__3866
264f8                 | LR__3867
264f8     00 FA 05 F6 | 	mov	result1, #0
264fc                 | LR__3868
264fc                 | __system____ScanForChar_ret
264fc     2D 00 64 FD | 	ret
26500                 | 
26500                 | __system___basic_dir
26500     05 4A 05 F6 | 	mov	COUNT_, #5
26504     A8 00 A0 FD | 	call	#pushregs_
26508     4C F0 07 F1 | 	add	ptra, #76
2650c     04 4E 05 F1 | 	add	fp, #4
26510     A7 12 62 FC | 	wrlong	arg01, fp
26514     04 4E 05 F1 | 	add	fp, #4
26518     A7 14 62 FC | 	wrlong	arg02, fp
2651c     04 4E 85 F1 | 	sub	fp, #4
26520     A7 14 0A FB | 	rdlong	arg02, fp wz
26524     04 4E 85 F1 | 	sub	fp, #4
26528     04 4E 05 51 |  if_ne	add	fp, #4
2652c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
26530     04 4E 85 51 |  if_ne	sub	fp, #4
26534     0F 21 CA 5A |  if_ne	rdbyte	local02, local01 wz
26538     70 00 90 AD |  if_e	jmp	#LR__3870
2653c     03 00 00 FF 
26540     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
26544     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
26548     03 00 00 FF 
2654c     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
26550     03 00 00 5F 
26554     28 E7 05 51 |  if_ne	add	ptr___system__dat__, ##1832
26558     F3 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
2655c     03 00 00 5F 
26560     28 E7 85 51 |  if_ne	sub	ptr___system__dat__, ##1832
26564     D8 E9 BF 5D |  if_ne	call	#__system__closedir
26568     81 01 00 FF 
2656c     18 12 06 F6 | 	mov	arg01, ##@LR__5038
26570     E0 E8 BF FD | 	call	#__system__opendir
26574     03 00 00 FF 
26578     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
2657c     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
26580     08 4E 05 F1 | 	add	fp, #8
26584     A7 20 02 FB | 	rdlong	local02, fp
26588     04 E6 05 F1 | 	add	ptr___system__dat__, #4
2658c     F3 20 62 FC | 	wrlong	local02, ptr___system__dat__
26590     04 4E 85 F1 | 	sub	fp, #4
26594     A7 20 02 FB | 	rdlong	local02, fp
26598     04 4E 85 F1 | 	sub	fp, #4
2659c     04 E6 05 F1 | 	add	ptr___system__dat__, #4
265a0     F3 20 62 FC | 	wrlong	local02, ptr___system__dat__
265a4     03 00 00 FF 
265a8     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
265ac                 | LR__3870
265ac     03 00 00 FF 
265b0     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
265b4     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
265b8     03 00 00 FF 
265bc     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
265c0     81 01 00 AF 
265c4     1A FA 05 A6 |  if_e	mov	result1, ##@LR__5039
265c8     84 02 90 AD |  if_e	jmp	#LR__3883
265cc                 | LR__3871
265cc     03 00 00 FF 
265d0     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
265d4     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
265d8     03 00 00 FF 
265dc     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
265e0     D0 E9 BF FD | 	call	#__system__readdir
265e4     0C 4E 05 F1 | 	add	fp, #12
265e8     A7 FA 61 FC | 	wrlong	result1, fp
265ec     0C 4E 85 F1 | 	sub	fp, #12
265f0     00 FA 0D F2 | 	cmp	result1, #0 wz
265f4     38 00 90 5D |  if_ne	jmp	#LR__3872
265f8     03 00 00 FF 
265fc     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
26600     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
26604     03 00 00 FF 
26608     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
2660c     30 E9 BF FD | 	call	#__system__closedir
26610     03 00 00 FF 
26614     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
26618     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
2661c     03 00 00 FF 
26620     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
26624     81 01 00 FF 
26628     1C FA 05 F6 | 	mov	result1, ##@LR__5040
2662c     20 02 90 FD | 	jmp	#LR__3883
26630                 | LR__3872
26630     0C 4E 05 F1 | 	add	fp, #12
26634     A7 12 02 FB | 	rdlong	arg01, fp
26638     0C 4E 85 F1 | 	sub	fp, #12
2663c     03 00 00 FF 
26640     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
26644     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
26648     03 00 00 FF 
2664c     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
26650     10 09 B0 FD | 	call	#__system___pat_match
26654     00 FA 0D F2 | 	cmp	result1, #0 wz
26658     70 FF 9F AD |  if_e	jmp	#LR__3871
2665c     03 00 00 FF 
26660     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
26664     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
26668     03 00 00 FF 
2666c     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
26670     78 01 90 AD |  if_e	jmp	#LR__3879
26674     0C 4E 05 F1 | 	add	fp, #12
26678     A7 12 02 FB | 	rdlong	arg01, fp
2667c     04 4E 05 F1 | 	add	fp, #4
26680     A7 14 02 F6 | 	mov	arg02, fp
26684     10 4E 85 F1 | 	sub	fp, #16
26688     2C F2 BF FD | 	call	#__system__stat
2668c     40 4E 05 F1 | 	add	fp, #64
26690     A7 FA 61 FC | 	wrlong	result1, fp
26694     40 4E 85 F1 | 	sub	fp, #64
26698     00 FA 0D F2 | 	cmp	result1, #0 wz
2669c     81 01 00 5F 
266a0     1E FA 05 56 |  if_ne	mov	result1, ##@LR__5041
266a4     A8 01 90 5D |  if_ne	jmp	#LR__3883
266a8     18 4E 05 F1 | 	add	fp, #24
266ac     A7 20 02 FB | 	rdlong	local02, fp
266b0     78 00 00 FF 
266b4     00 20 06 F5 | 	and	local02, ##61440
266b8     2C 4E 05 F1 | 	add	fp, #44
266bc     A7 20 62 FC | 	wrlong	local02, fp
266c0     38 4E 85 F1 | 	sub	fp, #56
266c4     A7 20 02 FB | 	rdlong	local02, fp
266c8     0C 4E 85 F1 | 	sub	fp, #12
266cc     10 21 C2 FA | 	rdbyte	local02, local02
266d0     2E 20 0E F2 | 	cmp	local02, #46 wz
266d4     08 4E 05 A1 |  if_e	add	fp, #8
266d8     A7 04 68 AC |  if_e	wrlong	#2, fp
266dc     08 4E C5 F3 | 	sumz	fp, #8
266e0     A7 00 68 5C |  if_ne	wrlong	#0, fp
266e4     08 4E 85 51 |  if_ne	sub	fp, #8
266e8     44 4E 05 F1 | 	add	fp, #68
266ec     A7 20 02 FB | 	rdlong	local02, fp
266f0     44 4E 85 F1 | 	sub	fp, #68
266f4     08 00 00 FF 
266f8     00 20 0E F2 | 	cmp	local02, ##4096 wz
266fc     18 00 90 5D |  if_ne	jmp	#LR__3873
26700     08 4E 05 F1 | 	add	fp, #8
26704     A7 20 02 FB | 	rdlong	local02, fp
26708     10 20 46 F5 | 	or	local02, #16
2670c     A7 20 62 FC | 	wrlong	local02, fp
26710     08 4E 85 F1 | 	sub	fp, #8
26714     AC 00 90 FD | 	jmp	#LR__3878
26718                 | LR__3873
26718     44 4E 05 F1 | 	add	fp, #68
2671c     A7 20 02 FB | 	rdlong	local02, fp
26720     44 4E 85 F1 | 	sub	fp, #68
26724     10 00 00 FF 
26728     00 20 0E F2 | 	cmp	local02, ##8192 wz
2672c     44 4E 05 51 |  if_ne	add	fp, #68
26730     A7 1E 02 5B |  if_ne	rdlong	local01, fp
26734     44 4E 85 51 |  if_ne	sub	fp, #68
26738     18 00 00 5F 
2673c     00 1E 0E 52 |  if_ne	cmp	local01, ##12288 wz
26740     44 4E 05 51 |  if_ne	add	fp, #68
26744     0F 23 02 56 |  if_ne	mov	local03, local01
26748     44 4E 85 51 |  if_ne	sub	fp, #68
2674c     20 00 00 5F 
26750     00 22 0E 52 |  if_ne	cmp	local03, ##16384 wz
26754     18 00 90 5D |  if_ne	jmp	#LR__3874
26758     08 4E 05 F1 | 	add	fp, #8
2675c     A7 20 02 FB | 	rdlong	local02, fp
26760     04 20 46 F5 | 	or	local02, #4
26764     A7 20 62 FC | 	wrlong	local02, fp
26768     08 4E 85 F1 | 	sub	fp, #8
2676c     54 00 90 FD | 	jmp	#LR__3877
26770                 | LR__3874
26770     18 4E 05 F1 | 	add	fp, #24
26774     A7 20 02 FB | 	rdlong	local02, fp
26778     18 4E 85 F1 | 	sub	fp, #24
2677c     92 20 CE F7 | 	test	local02, #146 wz
26780     18 00 90 5D |  if_ne	jmp	#LR__3875
26784     08 4E 05 F1 | 	add	fp, #8
26788     A7 20 02 FB | 	rdlong	local02, fp
2678c     01 20 46 F5 | 	or	local02, #1
26790     A7 20 62 FC | 	wrlong	local02, fp
26794     08 4E 85 F1 | 	sub	fp, #8
26798     28 00 90 FD | 	jmp	#LR__3876
2679c                 | LR__3875
2679c     44 4E 05 F1 | 	add	fp, #68
267a0     A7 24 02 FB | 	rdlong	local04, fp
267a4     44 4E 85 F1 | 	sub	fp, #68
267a8     08 00 00 FF 
267ac     00 24 0E F2 | 	cmp	local04, ##4096 wz
267b0     08 4E 05 51 |  if_ne	add	fp, #8
267b4     A7 24 02 5B |  if_ne	rdlong	local04, fp
267b8     20 24 46 55 |  if_ne	or	local04, #32
267bc     A7 24 62 5C |  if_ne	wrlong	local04, fp
267c0     08 4E 85 51 |  if_ne	sub	fp, #8
267c4                 | LR__3876
267c4                 | LR__3877
267c4                 | LR__3878
267c4     08 4E 05 F1 | 	add	fp, #8
267c8     A7 24 02 FB | 	rdlong	local04, fp
267cc     08 4E 85 F1 | 	sub	fp, #8
267d0     03 00 00 FF 
267d4     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
267d8     F3 1E 02 FB | 	rdlong	local01, ptr___system__dat__
267dc     03 00 00 FF 
267e0     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
267e4     0F 25 CA F7 | 	test	local04, local01 wz
267e8     E0 FD 9F AD |  if_e	jmp	#LR__3871
267ec                 | LR__3879
267ec     0C 4E 05 F1 | 	add	fp, #12
267f0     A7 12 02 FB | 	rdlong	arg01, fp
267f4     0C 4E 85 F1 | 	sub	fp, #12
267f8     09 27 02 F6 | 	mov	local05, arg01
267fc     97 06 48 FB | 	callpa	#(@LR__3881-@LR__3880)>>2,fcache_load_ptr_
26800                 | LR__3880
26800     13 FB C9 FA | 	rdbyte	result1, local05 wz
26804     01 26 06 51 |  if_ne	add	local05, #1
26808     F4 FF 9F 5D |  if_ne	jmp	#LR__3880
2680c                 | LR__3881
2680c     13 13 C2 F2 | 	subr	arg01, local05
26810     01 12 06 F1 | 	add	arg01, #1
26814     28 E0 BF FD | 	call	#__system___gc_alloc_managed
26818     48 4E 05 F1 | 	add	fp, #72
2681c     A7 FA 61 FC | 	wrlong	result1, fp
26820     48 4E 85 F1 | 	sub	fp, #72
26824     00 FA 0D F2 | 	cmp	result1, #0 wz
26828     18 00 90 AD |  if_e	jmp	#LR__3882
2682c     48 4E 05 F1 | 	add	fp, #72
26830     A7 12 02 FB | 	rdlong	arg01, fp
26834     3C 4E 85 F1 | 	sub	fp, #60
26838     A7 14 02 FB | 	rdlong	arg02, fp
2683c     0C 4E 85 F1 | 	sub	fp, #12
26840     D4 A0 BF FD | 	call	#__system____builtin_strcpy
26844                 | LR__3882
26844     48 4E 05 F1 | 	add	fp, #72
26848     A7 FA 01 FB | 	rdlong	result1, fp
2684c     48 4E 85 F1 | 	sub	fp, #72
26850                 | LR__3883
26850     A7 F0 03 F6 | 	mov	ptra, fp
26854     B2 00 A0 FD | 	call	#popregs_
26858                 | __system___basic_dir_ret
26858     2D 00 64 FD | 	ret
2685c                 | 
2685c                 | __system__pack_0606
2685c     09 01 02 F6 | 	mov	_var01, arg01
26860     7F 16 06 F1 | 	add	arg03, #127
26864     04 18 CE F7 | 	test	arg04, #4 wz
26868     10 00 90 AD |  if_e	jmp	#LR__3890
2686c     00 00 0E F2 | 	cmp	_var01, #0 wz
26870     16 00 C6 A9 |  if_e	decod	_var01, #22
26874     F7 00 26 F4 | 	bith	_var01, #247
26878     B4 00 90 FD | 	jmp	#LR__3899
2687c                 | LR__3890
2687c     02 18 CE F7 | 	test	arg04, #2 wz
26880     00 C0 3F 5F 
26884     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
26888     00 14 06 56 |  if_ne	mov	arg02, #0
2688c     A0 00 90 5D |  if_ne	jmp	#LR__3898
26890     08 18 CE F7 | 	test	arg04, #8 wz
26894     00 00 06 56 |  if_ne	mov	_var01, #0
26898     94 00 90 5D |  if_ne	jmp	#LR__3897
2689c     FF 16 56 F2 | 	cmps	arg03, #255 wc
268a0     00 C0 3F 3F 
268a4     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
268a8     00 14 06 36 |  if_ae	mov	arg02, #0
268ac     80 00 90 3D |  if_ae	jmp	#LR__3896
268b0     01 16 56 F2 | 	cmps	arg03, #1 wc
268b4     6C 00 90 3D |  if_ae	jmp	#LR__3894
268b8     01 14 46 F0 | 	shr	arg02, #1
268bc     00 03 02 F6 | 	mov	_var02, _var01
268c0     01 02 06 F5 | 	and	_var02, #1
268c4     1F 02 66 F0 | 	shl	_var02, #31
268c8     01 15 42 F5 | 	or	arg02, _var02
268cc     01 00 46 F0 | 	shr	_var01, #1
268d0     97 1E 48 FB | 	callpa	#(@LR__3892-@LR__3891)>>2,fcache_load_ptr_
268d4                 | LR__3891
268d4     00 16 56 F2 | 	cmps	arg03, #0 wc
268d8     34 00 90 3D |  if_ae	jmp	#LR__3893
268dc     00 00 0E F2 | 	cmp	_var01, #0 wz
268e0     2C 00 90 AD |  if_e	jmp	#LR__3893
268e4     0A 13 02 F6 | 	mov	arg01, arg02
268e8     01 12 06 F5 | 	and	arg01, #1
268ec     01 16 06 F1 | 	add	arg03, #1
268f0     01 14 46 F0 | 	shr	arg02, #1
268f4     00 03 02 F6 | 	mov	_var02, _var01
268f8     01 02 06 F5 | 	and	_var02, #1
268fc     1F 02 66 F0 | 	shl	_var02, #31
26900     01 15 42 F5 | 	or	arg02, _var02
26904     09 15 42 F5 | 	or	arg02, arg01
26908     01 00 46 F0 | 	shr	_var01, #1
2690c     C4 FF 9F FD | 	jmp	#LR__3891
26910                 | LR__3892
26910                 | LR__3893
26910     00 16 56 F2 | 	cmps	arg03, #0 wc
26914     18 00 90 3D |  if_ae	jmp	#LR__3895
26918     00 14 0E F2 | 	cmp	arg02, #0 wz
2691c     6F 14 62 FD | 	wrnz	arg02
26920     0C 00 90 FD | 	jmp	#LR__3895
26924                 | LR__3894
26924     17 01 06 F4 | 	bitl	_var01, #279
26928     17 16 66 F0 | 	shl	arg03, #23
2692c     0B 01 42 F5 | 	or	_var01, arg03
26930                 | LR__3895
26930                 | LR__3896
26930                 | LR__3897
26930                 | LR__3898
26930                 | LR__3899
26930     01 00 CE F7 | 	test	_var01, #1 wz
26934     01 14 46 55 |  if_ne	or	arg02, #1
26938     0A 17 02 F6 | 	mov	arg03, arg02
2693c     00 02 06 F6 | 	mov	_var02, #0
26940     FF FF 3F FF 
26944     FF 15 06 F1 | 	add	arg02, ##2147483647
26948     0B 15 12 F2 | 	cmp	arg02, arg03 wc
2694c     01 02 06 C6 |  if_b	mov	_var02, #1
26950     01 01 02 F1 | 	add	_var01, _var02
26954     01 18 CE F7 | 	test	arg04, #1 wz
26958     1F 00 26 54 |  if_ne	bith	_var01, #31
2695c     00 FB 01 F6 | 	mov	result1, _var01
26960                 | __system__pack_0606_ret
26960     2D 00 64 FD | 	ret
26964                 | 
26964                 | __system___rxtxioctl_0696
26964     00 15 0E F2 | 	cmp	arg02, #256 wz
26968     0C 00 90 AD |  if_e	jmp	#LR__3900
2696c     01 15 0E F2 | 	cmp	arg02, #257 wz
26970     1C 00 90 AD |  if_e	jmp	#LR__3901
26974     30 00 90 FD | 	jmp	#LR__3902
26978                 | LR__3900
26978     08 E6 05 F1 | 	add	ptr___system__dat__, #8
2697c     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
26980     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
26984     0B FB 61 FC | 	wrlong	result1, arg03
26988     00 FA 05 F6 | 	mov	result1, #0
2698c     28 00 90 FD | 	jmp	#LR__3903
26990                 | LR__3901
26990     0B 13 02 FB | 	rdlong	arg01, arg03
26994     08 E6 05 F1 | 	add	ptr___system__dat__, #8
26998     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2699c     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
269a0     00 FA 05 F6 | 	mov	result1, #0
269a4     10 00 90 FD | 	jmp	#LR__3903
269a8                 | LR__3902
269a8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
269ac     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
269b0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
269b4     01 FA 65 F6 | 	neg	result1, #1
269b8                 | LR__3903
269b8                 | __system___rxtxioctl_0696_ret
269b8     2D 00 64 FD | 	ret
269bc                 | 
269bc                 | __system____dummy_flush_0697
269bc     00 FA 05 F6 | 	mov	result1, #0
269c0                 | __system____dummy_flush_0697_ret
269c0     2D 00 64 FD | 	ret
269c4                 | 
269c4                 | __system___vfswrite
269c4     09 4A 05 F6 | 	mov	COUNT_, #9
269c8     A8 00 A0 FD | 	call	#pushregs_
269cc     09 1F 02 F6 | 	mov	local01, arg01
269d0     0A 21 02 F6 | 	mov	local02, arg02
269d4     0B 23 02 F6 | 	mov	local03, arg03
269d8     10 25 02 F6 | 	mov	local04, local02
269dc     08 1E 06 F1 | 	add	local01, #8
269e0     0F 13 02 FB | 	rdlong	arg01, local01
269e4     08 1E 86 F1 | 	sub	local01, #8
269e8     02 12 CE F7 | 	test	arg01, #2 wz
269ec     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
269f0     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
269f4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
269f8     01 FA 65 A6 |  if_e	neg	result1, #1
269fc     80 01 90 AD |  if_e	jmp	#LR__3916
26a00     08 1E 06 F1 | 	add	local01, #8
26a04     0F FB 01 FB | 	rdlong	result1, local01
26a08     08 1E 86 F1 | 	sub	local01, #8
26a0c     40 FA CD F7 | 	test	result1, #64 wz
26a10     68 00 90 AD |  if_e	jmp	#LR__3911
26a14     08 1E 06 F1 | 	add	local01, #8
26a18     0F 15 02 FB | 	rdlong	arg02, local01
26a1c     08 1E 86 F1 | 	sub	local01, #8
26a20     80 14 CE F7 | 	test	arg02, #128 wz
26a24     54 00 90 AD |  if_e	jmp	#LR__3910
26a28     30 1E 06 F1 | 	add	local01, #48
26a2c     0F 27 02 FB | 	rdlong	local05, local01
26a30     13 29 02 F6 | 	mov	local06, local05
26a34     30 1E 86 F1 | 	sub	local01, #48
26a38     13 28 46 F7 | 	zerox	local06, #19
26a3c     14 26 46 F0 | 	shr	local05, #20
26a40     02 26 66 F0 | 	shl	local05, #2
26a44     ED 26 02 F1 | 	add	local05, __methods__
26a48     13 27 02 FB | 	rdlong	local05, local05
26a4c     0F 13 02 F6 | 	mov	arg01, local01
26a50     00 14 06 F6 | 	mov	arg02, #0
26a54     02 16 06 F6 | 	mov	arg03, #2
26a58     F2 2A 02 F6 | 	mov	local07, objptr
26a5c     14 E5 01 F6 | 	mov	objptr, local06
26a60     2D 26 62 FD | 	call	local05
26a64     15 E5 01 F6 | 	mov	objptr, local07
26a68     08 1E 06 F1 | 	add	local01, #8
26a6c     0F 2B 02 FB | 	rdlong	local07, local01
26a70     80 2A 26 F5 | 	andn	local07, #128
26a74     0F 2B 62 FC | 	wrlong	local07, local01
26a78     08 1E 86 F1 | 	sub	local01, #8
26a7c                 | LR__3910
26a7c                 | LR__3911
26a7c     18 1E 06 F1 | 	add	local01, #24
26a80     0F 2B 0A FB | 	rdlong	local07, local01 wz
26a84     18 1E 86 F1 | 	sub	local01, #24
26a88     80 00 90 AD |  if_e	jmp	#LR__3913
26a8c     18 1E 06 F1 | 	add	local01, #24
26a90     0F 27 02 FB | 	rdlong	local05, local01
26a94     13 29 02 F6 | 	mov	local06, local05
26a98     18 1E 86 F1 | 	sub	local01, #24
26a9c     13 28 46 F7 | 	zerox	local06, #19
26aa0     14 26 46 F0 | 	shr	local05, #20
26aa4     02 26 66 F0 | 	shl	local05, #2
26aa8     ED 26 02 F1 | 	add	local05, __methods__
26aac     13 27 02 FB | 	rdlong	local05, local05
26ab0     10 15 02 F6 | 	mov	arg02, local02
26ab4     11 17 02 F6 | 	mov	arg03, local03
26ab8     0F 13 02 F6 | 	mov	arg01, local01
26abc     F2 2A 02 F6 | 	mov	local07, objptr
26ac0     14 E5 01 F6 | 	mov	objptr, local06
26ac4     2D 26 62 FD | 	call	local05
26ac8     15 E5 01 F6 | 	mov	objptr, local07
26acc     FD 2C 02 F6 | 	mov	local08, result1
26ad0     00 2C 56 F2 | 	cmps	local08, #0 wc
26ad4     2C 00 90 3D |  if_ae	jmp	#LR__3912
26ad8     08 1E 06 F1 | 	add	local01, #8
26adc     0F 2B 02 FB | 	rdlong	local07, local01
26ae0     20 2A 46 F5 | 	or	local07, #32
26ae4     0F 2B 62 FC | 	wrlong	local07, local01
26ae8     00 2C 4E F2 | 	cmps	local08, #0 wz
26aec     20 E6 05 F1 | 	add	ptr___system__dat__, #32
26af0     F3 2C 62 FC | 	wrlong	local08, ptr___system__dat__
26af4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
26af8     01 FA 65 56 |  if_ne	neg	result1, #1
26afc     00 FA 05 A6 |  if_e	mov	result1, #0
26b00     7C 00 90 FD | 	jmp	#LR__3916
26b04                 | LR__3912
26b04     16 FB 01 F6 | 	mov	result1, local08
26b08     74 00 90 FD | 	jmp	#LR__3916
26b0c                 | LR__3913
26b0c     1C 1E 06 F1 | 	add	local01, #28
26b10     0F 2F 0A FB | 	rdlong	local09, local01 wz
26b14     1C 1E 86 F1 | 	sub	local01, #28
26b18     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
26b1c     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
26b20     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
26b24     01 FA 65 A6 |  if_e	neg	result1, #1
26b28     54 00 90 AD |  if_e	jmp	#LR__3916
26b2c     00 2C 06 F6 | 	mov	local08, #0
26b30                 | LR__3914
26b30     01 22 16 F2 | 	cmp	local03, #1 wc
26b34     44 00 90 CD |  if_b	jmp	#LR__3915
26b38     17 29 02 F6 | 	mov	local06, local09
26b3c     17 27 02 F6 | 	mov	local05, local09
26b40     13 28 46 F7 | 	zerox	local06, #19
26b44     14 26 46 F0 | 	shr	local05, #20
26b48     02 26 66 F0 | 	shl	local05, #2
26b4c     ED 26 02 F1 | 	add	local05, __methods__
26b50     13 27 02 FB | 	rdlong	local05, local05
26b54     12 13 C2 FA | 	rdbyte	arg01, local04
26b58     0F 15 02 F6 | 	mov	arg02, local01
26b5c     F2 2A 02 F6 | 	mov	local07, objptr
26b60     14 E5 01 F6 | 	mov	objptr, local06
26b64     01 24 06 F1 | 	add	local04, #1
26b68     2D 26 62 FD | 	call	local05
26b6c     15 E5 01 F6 | 	mov	objptr, local07
26b70     FD 2C 02 F1 | 	add	local08, result1
26b74     01 22 86 F1 | 	sub	local03, #1
26b78     B4 FF 9F FD | 	jmp	#LR__3914
26b7c                 | LR__3915
26b7c     16 FB 01 F6 | 	mov	result1, local08
26b80                 | LR__3916
26b80     A7 F0 03 F6 | 	mov	ptra, fp
26b84     B2 00 A0 FD | 	call	#popregs_
26b88                 | __system___vfswrite_ret
26b88     2D 00 64 FD | 	ret
26b8c                 | 
26b8c                 | __system___vfsread
26b8c     03 4A 05 F6 | 	mov	COUNT_, #3
26b90     A8 00 A0 FD | 	call	#pushregs_
26b94     28 F0 07 F1 | 	add	ptra, #40
26b98     04 4E 05 F1 | 	add	fp, #4
26b9c     A7 12 62 FC | 	wrlong	arg01, fp
26ba0     04 4E 05 F1 | 	add	fp, #4
26ba4     A7 14 62 FC | 	wrlong	arg02, fp
26ba8     04 4E 05 F1 | 	add	fp, #4
26bac     A7 16 62 FC | 	wrlong	arg03, fp
26bb0     04 4E 85 F1 | 	sub	fp, #4
26bb4     A7 FA 01 FB | 	rdlong	result1, fp
26bb8     14 4E 05 F1 | 	add	fp, #20
26bbc     A7 FA 61 FC | 	wrlong	result1, fp
26bc0     04 4E 05 F1 | 	add	fp, #4
26bc4     A7 00 68 FC | 	wrlong	#0, fp
26bc8     1C 4E 85 F1 | 	sub	fp, #28
26bcc     A7 12 02 FB | 	rdlong	arg01, fp
26bd0     04 4E 85 F1 | 	sub	fp, #4
26bd4     08 12 06 F1 | 	add	arg01, #8
26bd8     09 FB 01 FB | 	rdlong	result1, arg01
26bdc     01 FA CD F7 | 	test	result1, #1 wz
26be0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
26be4     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
26be8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
26bec     01 FA 65 A6 |  if_e	neg	result1, #1
26bf0     74 02 90 AD |  if_e	jmp	#LR__3926
26bf4     04 4E 05 F1 | 	add	fp, #4
26bf8     A7 12 02 FB | 	rdlong	arg01, fp
26bfc     04 4E 85 F1 | 	sub	fp, #4
26c00     14 12 06 F1 | 	add	arg01, #20
26c04     09 FB 09 FB | 	rdlong	result1, arg01 wz
26c08     B8 00 90 AD |  if_e	jmp	#LR__3921
26c0c     04 4E 05 F1 | 	add	fp, #4
26c10     A7 12 02 FB | 	rdlong	arg01, fp
26c14     09 17 02 F6 | 	mov	arg03, arg01
26c18     14 16 06 F1 | 	add	arg03, #20
26c1c     0B 1F 02 FB | 	rdlong	local01, arg03
26c20     0F 21 02 F6 | 	mov	local02, local01
26c24     13 1E 46 F7 | 	zerox	local01, #19
26c28     14 20 46 F0 | 	shr	local02, #20
26c2c     02 20 66 F0 | 	shl	local02, #2
26c30     ED 20 02 F1 | 	add	local02, __methods__
26c34     10 21 02 FB | 	rdlong	local02, local02
26c38     04 4E 05 F1 | 	add	fp, #4
26c3c     A7 14 02 FB | 	rdlong	arg02, fp
26c40     04 4E 05 F1 | 	add	fp, #4
26c44     A7 16 02 FB | 	rdlong	arg03, fp
26c48     0C 4E 85 F1 | 	sub	fp, #12
26c4c     F2 22 02 F6 | 	mov	local03, objptr
26c50     0F E5 01 F6 | 	mov	objptr, local01
26c54     2D 20 62 FD | 	call	local02
26c58     11 E5 01 F6 | 	mov	objptr, local03
26c5c     10 4E 05 F1 | 	add	fp, #16
26c60     A7 FA 61 FC | 	wrlong	result1, fp
26c64     10 4E 85 F1 | 	sub	fp, #16
26c68     00 FA 55 F2 | 	cmps	result1, #0 wc
26c6c     44 00 90 3D |  if_ae	jmp	#LR__3920
26c70     04 4E 05 F1 | 	add	fp, #4
26c74     A7 22 02 FB | 	rdlong	local03, fp
26c78     11 1F 02 F6 | 	mov	local01, local03
26c7c     08 22 06 F1 | 	add	local03, #8
26c80     11 21 02 FB | 	rdlong	local02, local03
26c84     20 20 46 F5 | 	or	local02, #32
26c88     08 1E 06 F1 | 	add	local01, #8
26c8c     0F 21 62 FC | 	wrlong	local02, local01
26c90     0C 4E 05 F1 | 	add	fp, #12
26c94     A7 12 0A FB | 	rdlong	arg01, fp wz
26c98     10 4E 85 F1 | 	sub	fp, #16
26c9c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
26ca0     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
26ca4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
26ca8     01 FA 65 56 |  if_ne	neg	result1, #1
26cac     00 FA 05 A6 |  if_e	mov	result1, #0
26cb0     B4 01 90 FD | 	jmp	#LR__3926
26cb4                 | LR__3920
26cb4     10 4E 05 F1 | 	add	fp, #16
26cb8     A7 FA 01 FB | 	rdlong	result1, fp
26cbc     10 4E 85 F1 | 	sub	fp, #16
26cc0     A4 01 90 FD | 	jmp	#LR__3926
26cc4                 | LR__3921
26cc4     04 4E 05 F1 | 	add	fp, #4
26cc8     A7 12 02 FB | 	rdlong	arg01, fp
26ccc     20 12 06 F1 | 	add	arg01, #32
26cd0     09 13 0A FB | 	rdlong	arg01, arg01 wz
26cd4     14 4E 05 F1 | 	add	fp, #20
26cd8     A7 12 62 FC | 	wrlong	arg01, fp
26cdc     18 4E 85 F1 | 	sub	fp, #24
26ce0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
26ce4     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
26ce8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
26cec     01 FA 65 A6 |  if_e	neg	result1, #1
26cf0     74 01 90 AD |  if_e	jmp	#LR__3926
26cf4     04 4E 05 F1 | 	add	fp, #4
26cf8     A7 22 02 FB | 	rdlong	local03, fp
26cfc     04 4E 85 F1 | 	sub	fp, #4
26d00     28 22 06 F1 | 	add	local03, #40
26d04     11 21 0A FB | 	rdlong	local02, local03 wz
26d08     7C 00 90 AD |  if_e	jmp	#LR__3923
26d0c     04 4E 05 F1 | 	add	fp, #4
26d10     A7 12 02 FB | 	rdlong	arg01, fp
26d14     09 23 02 F6 | 	mov	local03, arg01
26d18     28 22 06 F1 | 	add	local03, #40
26d1c     11 1F 02 FB | 	rdlong	local01, local03
26d20     0F 21 02 F6 | 	mov	local02, local01
26d24     13 1E 46 F7 | 	zerox	local01, #19
26d28     14 20 46 F0 | 	shr	local02, #20
26d2c     02 20 66 F0 | 	shl	local02, #2
26d30     ED 20 02 F1 | 	add	local02, __methods__
26d34     10 21 02 FB | 	rdlong	local02, local02
26d38     20 4E 05 F1 | 	add	fp, #32
26d3c     A7 16 02 F6 | 	mov	arg03, fp
26d40     24 4E 85 F1 | 	sub	fp, #36
26d44     00 15 06 F6 | 	mov	arg02, #256
26d48     F2 22 02 F6 | 	mov	local03, objptr
26d4c     0F E5 01 F6 | 	mov	objptr, local01
26d50     2D 20 62 FD | 	call	local02
26d54     11 E5 01 F6 | 	mov	objptr, local03
26d58     10 4E 05 F1 | 	add	fp, #16
26d5c     A7 FA 61 FC | 	wrlong	result1, fp
26d60     00 FA 4D F2 | 	cmps	result1, #0 wz
26d64     10 4E 85 F1 | 	sub	fp, #16
26d68     1C 00 90 5D |  if_ne	jmp	#LR__3922
26d6c     24 4E 05 F1 | 	add	fp, #36
26d70     A7 20 02 FB | 	rdlong	local02, fp
26d74     24 4E 85 F1 | 	sub	fp, #36
26d78     02 20 CE F7 | 	test	local02, #2 wz
26d7c     20 4E 05 51 |  if_ne	add	fp, #32
26d80     A7 02 68 5C |  if_ne	wrlong	#1, fp
26d84     20 4E 85 51 |  if_ne	sub	fp, #32
26d88                 | LR__3922
26d88                 | LR__3923
26d88     10 4E 05 F1 | 	add	fp, #16
26d8c     A7 00 68 FC | 	wrlong	#0, fp
26d90     10 4E 85 F1 | 	sub	fp, #16
26d94                 | LR__3924
26d94     0C 4E 05 F1 | 	add	fp, #12
26d98     A7 22 02 FB | 	rdlong	local03, fp
26d9c     0C 4E 85 F1 | 	sub	fp, #12
26da0     01 22 16 F2 | 	cmp	local03, #1 wc
26da4     B4 00 90 CD |  if_b	jmp	#LR__3925
26da8     18 4E 05 F1 | 	add	fp, #24
26dac     A7 20 02 FB | 	rdlong	local02, fp
26db0     10 23 02 F6 | 	mov	local03, local02
26db4     13 22 46 F7 | 	zerox	local03, #19
26db8     14 20 46 F0 | 	shr	local02, #20
26dbc     02 20 66 F0 | 	shl	local02, #2
26dc0     ED 20 02 F1 | 	add	local02, __methods__
26dc4     10 21 02 FB | 	rdlong	local02, local02
26dc8     14 4E 85 F1 | 	sub	fp, #20
26dcc     A7 12 02 FB | 	rdlong	arg01, fp
26dd0     04 4E 85 F1 | 	sub	fp, #4
26dd4     F2 1E 02 F6 | 	mov	local01, objptr
26dd8     11 E5 01 F6 | 	mov	objptr, local03
26ddc     2D 20 62 FD | 	call	local02
26de0     0F E5 01 F6 | 	mov	objptr, local01
26de4     14 4E 05 F1 | 	add	fp, #20
26de8     A7 FA 61 FC | 	wrlong	result1, fp
26dec     14 4E 85 F1 | 	sub	fp, #20
26df0     00 FA 55 F2 | 	cmps	result1, #0 wc
26df4     64 00 90 CD |  if_b	jmp	#LR__3925
26df8     1C 4E 05 F1 | 	add	fp, #28
26dfc     A7 22 02 FB | 	rdlong	local03, fp
26e00     11 21 02 F6 | 	mov	local02, local03
26e04     01 20 06 F1 | 	add	local02, #1
26e08     A7 20 62 FC | 	wrlong	local02, fp
26e0c     08 4E 85 F1 | 	sub	fp, #8
26e10     A7 20 02 FB | 	rdlong	local02, fp
26e14     11 21 42 FC | 	wrbyte	local02, local03
26e18     04 4E 85 F1 | 	sub	fp, #4
26e1c     A7 22 02 FB | 	rdlong	local03, fp
26e20     01 22 06 F1 | 	add	local03, #1
26e24     A7 22 62 FC | 	wrlong	local03, fp
26e28     04 4E 85 F1 | 	sub	fp, #4
26e2c     A7 22 02 FB | 	rdlong	local03, fp
26e30     01 22 86 F1 | 	sub	local03, #1
26e34     A7 22 62 FC | 	wrlong	local03, fp
26e38     14 4E 05 F1 | 	add	fp, #20
26e3c     A7 22 0A FB | 	rdlong	local03, fp wz
26e40     20 4E 85 F1 | 	sub	fp, #32
26e44     4C FF 9F AD |  if_e	jmp	#LR__3924
26e48     14 4E 05 F1 | 	add	fp, #20
26e4c     A7 20 02 FB | 	rdlong	local02, fp
26e50     14 4E 85 F1 | 	sub	fp, #20
26e54     0A 20 0E F2 | 	cmp	local02, #10 wz
26e58     38 FF 9F 5D |  if_ne	jmp	#LR__3924
26e5c                 | LR__3925
26e5c     10 4E 05 F1 | 	add	fp, #16
26e60     A7 FA 01 FB | 	rdlong	result1, fp
26e64     10 4E 85 F1 | 	sub	fp, #16
26e68                 | LR__3926
26e68     A7 F0 03 F6 | 	mov	ptra, fp
26e6c     B2 00 A0 FD | 	call	#popregs_
26e70                 | __system___vfsread_ret
26e70     2D 00 64 FD | 	ret
26e74                 | 
26e74                 | __system____default_filbuf
26e74     04 4A 05 F6 | 	mov	COUNT_, #4
26e78     A8 00 A0 FD | 	call	#pushregs_
26e7c     09 1F 02 F6 | 	mov	local01, arg01
26e80     0F 21 02 FB | 	rdlong	local02, local01
26e84     0C 20 06 F1 | 	add	local02, #12
26e88     10 FB 09 FB | 	rdlong	result1, local02 wz
26e8c     0C 20 86 F1 | 	sub	local02, #12
26e90     20 00 90 5D |  if_ne	jmp	#LR__3930
26e94     14 20 06 F1 | 	add	local02, #20
26e98     10 FB 01 F6 | 	mov	result1, local02
26e9c     04 20 86 F1 | 	sub	local02, #4
26ea0     10 FB 61 FC | 	wrlong	result1, local02
26ea4     04 20 86 F1 | 	sub	local02, #4
26ea8     02 00 80 FF 
26eac     10 01 68 FC | 	wrlong	##1024, local02
26eb0     0C 20 86 F1 | 	sub	local02, #12
26eb4                 | LR__3930
26eb4     14 1E 06 F1 | 	add	local01, #20
26eb8     0F 23 02 FB | 	rdlong	local03, local01
26ebc     11 25 02 F6 | 	mov	local04, local03
26ec0     14 1E 86 F1 | 	sub	local01, #20
26ec4     13 24 46 F7 | 	zerox	local04, #19
26ec8     14 22 46 F0 | 	shr	local03, #20
26ecc     02 22 66 F0 | 	shl	local03, #2
26ed0     ED 22 02 F1 | 	add	local03, __methods__
26ed4     11 23 02 FB | 	rdlong	local03, local03
26ed8     10 20 06 F1 | 	add	local02, #16
26edc     10 15 02 FB | 	rdlong	arg02, local02
26ee0     04 20 86 F1 | 	sub	local02, #4
26ee4     10 17 02 FB | 	rdlong	arg03, local02
26ee8     0C 20 86 F1 | 	sub	local02, #12
26eec     0F 13 02 F6 | 	mov	arg01, local01
26ef0     F2 1E 02 F6 | 	mov	local01, objptr
26ef4     12 E5 01 F6 | 	mov	objptr, local04
26ef8     2D 22 62 FD | 	call	local03
26efc     0F E5 01 F6 | 	mov	objptr, local01
26f00     FD 24 02 F6 | 	mov	local04, result1
26f04     00 24 56 F2 | 	cmps	local04, #0 wc
26f08     01 FA 65 C6 |  if_b	neg	result1, #1
26f0c     28 00 90 CD |  if_b	jmp	#LR__3931
26f10     10 25 62 FC | 	wrlong	local04, local02
26f14     10 20 06 F1 | 	add	local02, #16
26f18     10 23 02 FB | 	rdlong	local03, local02
26f1c     0C 20 86 F1 | 	sub	local02, #12
26f20     10 23 62 FC | 	wrlong	local03, local02
26f24     04 20 06 F1 | 	add	local02, #4
26f28     10 23 02 FB | 	rdlong	local03, local02
26f2c     01 22 46 F5 | 	or	local03, #1
26f30     10 23 62 FC | 	wrlong	local03, local02
26f34     12 FB 01 F6 | 	mov	result1, local04
26f38                 | LR__3931
26f38     A7 F0 03 F6 | 	mov	ptra, fp
26f3c     B2 00 A0 FD | 	call	#popregs_
26f40                 | __system____default_filbuf_ret
26f40     2D 00 64 FD | 	ret
26f44                 | 
26f44                 | __system__getlower_1082
26f44     41 12 56 F2 | 	cmps	arg01, #65 wc
26f48     10 00 90 CD |  if_b	jmp	#LR__3940
26f4c     5B 12 56 F2 | 	cmps	arg01, #91 wc
26f50     09 FB 01 C6 |  if_b	mov	result1, arg01
26f54     20 FA 05 C1 |  if_b	add	result1, #32
26f58     04 00 90 CD |  if_b	jmp	#__system__getlower_1082_ret
26f5c                 | LR__3940
26f5c     09 FB 01 F6 | 	mov	result1, arg01
26f60                 | __system__getlower_1082_ret
26f60     2D 00 64 FD | 	ret
26f64                 | 
26f64                 | __system___pat_match
26f64     08 4A 05 F6 | 	mov	COUNT_, #8
26f68     A8 00 A0 FD | 	call	#pushregs_
26f6c     09 1F 02 F6 | 	mov	local01, arg01
26f70                 | LR__3950
26f70     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
26f74     0F 13 CA 5A |  if_ne	rdbyte	arg01, local01 wz
26f78     0A 21 C2 5A |  if_ne	rdbyte	local02, arg02
26f7c     2A 20 0E 52 |  if_ne	cmp	local02, #42 wz
26f80     2C 00 90 AD |  if_e	jmp	#LR__3951
26f84     0A 13 C2 FA | 	rdbyte	arg01, arg02
26f88     B8 FF BF FD | 	call	#__system__getlower_1082
26f8c     FD 22 02 F6 | 	mov	local03, result1
26f90     0F 13 C2 FA | 	rdbyte	arg01, local01
26f94     AC FF BF FD | 	call	#__system__getlower_1082
26f98     11 FB 09 F2 | 	cmp	result1, local03 wz
26f9c     00 FA 05 56 |  if_ne	mov	result1, #0
26fa0     FC 00 90 5D |  if_ne	jmp	#LR__3959
26fa4     01 1E 06 F1 | 	add	local01, #1
26fa8     01 14 06 F1 | 	add	arg02, #1
26fac     C0 FF 9F FD | 	jmp	#LR__3950
26fb0                 | LR__3951
26fb0     0A 23 C2 FA | 	rdbyte	local03, arg02
26fb4     2A 22 0E F2 | 	cmp	local03, #42 wz
26fb8     D4 00 90 5D |  if_ne	jmp	#LR__3958
26fbc     01 14 06 F1 | 	add	arg02, #1
26fc0     0A 21 C2 FA | 	rdbyte	local02, arg02
26fc4     01 14 86 F1 | 	sub	arg02, #1
26fc8     2E 20 0E F2 | 	cmp	local02, #46 wz
26fcc     28 00 90 5D |  if_ne	jmp	#LR__3952
26fd0     02 14 06 F1 | 	add	arg02, #2
26fd4     0A 21 C2 FA | 	rdbyte	local02, arg02
26fd8     02 14 86 F1 | 	sub	arg02, #2
26fdc     2A 20 0E F2 | 	cmp	local02, #42 wz
26fe0     03 14 06 A1 |  if_e	add	arg02, #3
26fe4     0A 25 C2 AA |  if_e	rdbyte	local04, arg02
26fe8     03 14 86 A1 |  if_e	sub	arg02, #3
26fec     12 27 0A A6 |  if_e	mov	local05, local04 wz
26ff0     01 FA 05 A6 |  if_e	mov	result1, #1
26ff4     A8 00 90 AD |  if_e	jmp	#LR__3959
26ff8                 | LR__3952
26ff8     01 14 06 F1 | 	add	arg02, #1
26ffc     00 28 06 F6 | 	mov	local06, #0
27000     97 1E 48 FB | 	callpa	#(@LR__3955-@LR__3953)>>2,fcache_load_ptr_
27004                 | LR__3953
27004     14 2B 02 F6 | 	mov	local07, local06
27008     0A 2B 02 F1 | 	add	local07, arg02
2700c     15 2B CA FA | 	rdbyte	local07, local07 wz
27010     14 27 02 56 |  if_ne	mov	local05, local06
27014     01 26 06 51 |  if_ne	add	local05, #1
27018     13 29 02 56 |  if_ne	mov	local06, local05
2701c     E4 FF 9F 5D |  if_ne	jmp	#LR__3953
27020     00 2C 06 F6 | 	mov	local08, #0
27024                 | LR__3954
27024     16 2B 02 F6 | 	mov	local07, local08
27028     0F 2B 02 F1 | 	add	local07, local01
2702c     15 2B CA FA | 	rdbyte	local07, local07 wz
27030     16 27 02 56 |  if_ne	mov	local05, local08
27034     01 26 06 51 |  if_ne	add	local05, #1
27038     13 2D 02 56 |  if_ne	mov	local08, local05
2703c     E4 FF 9F 5D |  if_ne	jmp	#LR__3954
27040                 | LR__3955
27040     14 2D 52 F2 | 	cmps	local08, local06 wc
27044     00 FA 05 C6 |  if_b	mov	result1, #0
27048     54 00 90 CD |  if_b	jmp	#LR__3959
2704c     16 21 02 F6 | 	mov	local02, local08
27050     14 21 82 F1 | 	sub	local02, local06
27054     10 1F 02 F1 | 	add	local01, local02
27058                 | LR__3956
27058     01 28 56 F2 | 	cmps	local06, #1 wc
2705c     30 00 90 CD |  if_b	jmp	#LR__3957
27060     0F 13 C2 FA | 	rdbyte	arg01, local01
27064     DC FE BF FD | 	call	#__system__getlower_1082
27068     FD 2C 02 F6 | 	mov	local08, result1
2706c     0A 13 C2 FA | 	rdbyte	arg01, arg02
27070     D0 FE BF FD | 	call	#__system__getlower_1082
27074     FD 2C 0A F2 | 	cmp	local08, result1 wz
27078     00 FA 05 56 |  if_ne	mov	result1, #0
2707c     20 00 90 5D |  if_ne	jmp	#LR__3959
27080     01 1E 06 F1 | 	add	local01, #1
27084     01 14 06 F1 | 	add	arg02, #1
27088     01 28 86 F1 | 	sub	local06, #1
2708c     C8 FF 9F FD | 	jmp	#LR__3956
27090                 | LR__3957
27090                 | LR__3958
27090     0A 2D CA FA | 	rdbyte	local08, arg02 wz
27094     0F 2B CA AA |  if_e	rdbyte	local07, local01 wz
27098     01 FA 05 A6 |  if_e	mov	result1, #1
2709c     00 FA 05 56 |  if_ne	mov	result1, #0
270a0                 | LR__3959
270a0     A7 F0 03 F6 | 	mov	ptra, fp
270a4     B2 00 A0 FD | 	call	#popregs_
270a8                 | __system___pat_match_ret
270a8     2D 00 64 FD | 	ret
270ac                 | 
270ac                 | _fatfs_cc_ff_uni2oem
270ac     00 00 06 F6 | 	mov	_var01, #0
270b0     80 12 16 F2 | 	cmp	arg01, #128 wc
270b4     09 01 02 C6 |  if_b	mov	_var01, arg01
270b8     58 00 90 CD |  if_b	jmp	#LR__3964
270bc     80 00 00 FF 
270c0     00 12 16 F2 | 	cmp	arg01, ##65536 wc
270c4     4C 00 90 3D |  if_ae	jmp	#LR__3963
270c8     0A FB 31 F9 | 	getword	result1, arg02, #0
270cc     01 00 00 FF 
270d0     52 FB 0D F2 | 	cmp	result1, ##850 wz
270d4     3C 00 90 5D |  if_ne	jmp	#LR__3963
270d8                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
270d8     00 00 06 F6 | 	mov	_var01, #0
270dc     97 14 48 FB | 	callpa	#(@LR__3961-@LR__3960)>>2,fcache_load_ptr_
270e0                 | LR__3960
270e0     00 FB 31 F9 | 	getword	result1, _var01, #0
270e4     80 FA 15 F2 | 	cmp	result1, #128 wc
270e8     1C 00 90 3D |  if_ae	jmp	#LR__3962
270ec     00 FB 31 F9 | 	getword	result1, _var01, #0
270f0     01 FA 65 F0 | 	shl	result1, #1
270f4     F6 FA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
270f8     FD FA E1 FA | 	rdword	result1, result1
270fc     FD 12 0A F2 | 	cmp	arg01, result1 wz
27100     01 00 06 51 |  if_ne	add	_var01, #1
27104     D8 FF 9F 5D |  if_ne	jmp	#LR__3960
27108                 | LR__3961
27108                 | LR__3962
27108     00 01 32 F9 | 	getword	_var01, _var01, #0
2710c     80 00 06 F1 | 	add	_var01, #128
27110     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
27114                 | LR__3963
27114                 | LR__3964
27114                 | ' 			c = (c + 0x80) & 0xFF;
27114                 | ' 		}
27114                 | ' 	}
27114                 | ' 
27114                 | ' 	return c;
27114     00 FB 01 F6 | 	mov	result1, _var01
27118                 | _fatfs_cc_ff_uni2oem_ret
27118     2D 00 64 FD | 	ret
2711c                 | 
2711c                 | _fatfs_cc_ff_oem2uni
2711c     00 00 06 F6 | 	mov	_var01, #0
27120     09 FB 31 F9 | 	getword	result1, arg01, #0
27124     80 FA 15 F2 | 	cmp	result1, #128 wc
27128     09 01 02 C6 |  if_b	mov	_var01, arg01
2712c     2C 00 90 CD |  if_b	jmp	#LR__3971
27130     0A 15 32 F9 | 	getword	arg02, arg02, #0
27134     01 00 00 FF 
27138     52 15 0E F2 | 	cmp	arg02, ##850 wz
2713c     1C 00 90 5D |  if_ne	jmp	#LR__3970
27140     09 FB 31 F9 | 	getword	result1, arg01, #0
27144     00 FB 15 F2 | 	cmp	result1, #256 wc
27148     09 13 32 C9 |  if_b	getword	arg01, arg01, #0
2714c     80 12 86 C1 |  if_b	sub	arg01, #128
27150     01 12 66 C0 |  if_b	shl	arg01, #1
27154     F6 12 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
27158     09 01 E2 CA |  if_b	rdword	_var01, arg01
2715c                 | LR__3970
2715c                 | LR__3971
2715c                 | ' 		}
2715c                 | ' 	}
2715c                 | ' 
2715c                 | ' 	return c;
2715c     00 FB 01 F6 | 	mov	result1, _var01
27160                 | _fatfs_cc_ff_oem2uni_ret
27160     2D 00 64 FD | 	ret
27164                 | 
27164                 | _fatfs_cc_ff_wtoupper
27164     09 01 02 F6 | 	mov	_var01, arg01
27168     80 00 00 FF 
2716c     00 00 16 F2 | 	cmp	_var01, ##65536 wc
27170     60 01 90 3D |  if_ae	jmp	#LR__3993
27174     00 03 02 F6 | 	mov	_var02, _var01
27178     01 01 32 F9 | 	getword	_var01, _var02, #0
2717c     08 00 00 FF 
27180     00 00 16 F2 | 	cmp	_var01, ##4096 wc
27184     00 ED 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
27188     F6 04 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
2718c     00 ED 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
27190     01 00 00 3F 
27194     F2 EC 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
27198     F6 04 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
2719c     01 00 00 3F 
271a0     F2 EC 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
271a4     02 07 02 F6 | 	mov	_var04, _var03
271a8                 | ' 		uc = (WORD)uni;
271a8                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
271a8                 | ' 		for (;;) {
271a8                 | LR__3980
271a8     03 09 E2 FA | 	rdword	_var05, _var04
271ac     04 05 02 F6 | 	mov	_var03, _var05
271b0     0F 04 4E F7 | 	zerox	_var03, #15 wz
271b4     02 06 06 F1 | 	add	_var04, #2
271b8     14 01 90 AD |  if_e	jmp	#LR__3992
271bc     01 05 32 F9 | 	getword	_var03, _var02, #0
271c0     04 01 32 F9 | 	getword	_var01, _var05, #0
271c4     00 05 12 F2 | 	cmp	_var03, _var01 wc
271c8     04 01 90 CD |  if_b	jmp	#LR__3992
271cc     03 0B E2 FA | 	rdword	_var06, _var04
271d0     05 0D 32 F9 | 	getword	_var07, _var06, #0
271d4     08 0C 46 F0 | 	shr	_var07, #8
271d8     05 0B 32 F9 | 	getword	_var06, _var06, #0
271dc     05 0B E2 F8 | 	getbyte	_var06, _var06, #0
271e0     01 05 32 F9 | 	getword	_var03, _var02, #0
271e4     04 0F 32 F9 | 	getword	_var08, _var05, #0
271e8     05 01 32 F9 | 	getword	_var01, _var06, #0
271ec     00 0F 02 F1 | 	add	_var08, _var01
271f0     07 05 52 F2 | 	cmps	_var03, _var08 wc
271f4     02 06 06 F1 | 	add	_var04, #2
271f8     C4 00 90 3D |  if_ae	jmp	#LR__3991
271fc                 | ' 				switch (cmd) {
271fc     06 11 32 F9 | 	getword	_var09, _var07, #0
27200     09 10 26 F3 | 	fle	_var09, #9
27204     30 10 62 FD | 	jmprel	_var09
27208                 | LR__3981
27208     24 00 90 FD | 	jmp	#LR__3982
2720c     3C 00 90 FD | 	jmp	#LR__3983
27210     54 00 90 FD | 	jmp	#LR__3984
27214     5C 00 90 FD | 	jmp	#LR__3985
27218     64 00 90 FD | 	jmp	#LR__3986
2721c     6C 00 90 FD | 	jmp	#LR__3987
27220     74 00 90 FD | 	jmp	#LR__3988
27224     7C 00 90 FD | 	jmp	#LR__3989
27228     84 00 90 FD | 	jmp	#LR__3990
2722c     A0 00 90 FD | 	jmp	#LR__3992
27230                 | LR__3982
27230     01 03 32 F9 | 	getword	_var02, _var02, #0
27234     04 09 32 F9 | 	getword	_var05, _var05, #0
27238     04 03 82 F1 | 	sub	_var02, _var05
2723c     01 02 66 F0 | 	shl	_var02, #1
27240     03 03 02 F1 | 	add	_var02, _var04
27244     01 03 E2 FA | 	rdword	_var02, _var02
27248     84 00 90 FD | 	jmp	#LR__3992
2724c                 | LR__3983
2724c     01 05 32 F9 | 	getword	_var03, _var02, #0
27250     01 03 32 F9 | 	getword	_var02, _var02, #0
27254     04 09 32 F9 | 	getword	_var05, _var05, #0
27258     04 03 82 F1 | 	sub	_var02, _var05
2725c     01 02 06 F5 | 	and	_var02, #1
27260     02 03 C2 F2 | 	subr	_var02, _var03
27264     68 00 90 FD | 	jmp	#LR__3992
27268                 | LR__3984
27268     01 03 32 F9 | 	getword	_var02, _var02, #0
2726c     10 02 86 F1 | 	sub	_var02, #16
27270     5C 00 90 FD | 	jmp	#LR__3992
27274                 | LR__3985
27274     01 03 32 F9 | 	getword	_var02, _var02, #0
27278     20 02 86 F1 | 	sub	_var02, #32
2727c     50 00 90 FD | 	jmp	#LR__3992
27280                 | LR__3986
27280     01 03 32 F9 | 	getword	_var02, _var02, #0
27284     30 02 86 F1 | 	sub	_var02, #48
27288     44 00 90 FD | 	jmp	#LR__3992
2728c                 | LR__3987
2728c     01 03 32 F9 | 	getword	_var02, _var02, #0
27290     1A 02 86 F1 | 	sub	_var02, #26
27294     38 00 90 FD | 	jmp	#LR__3992
27298                 | LR__3988
27298     01 03 32 F9 | 	getword	_var02, _var02, #0
2729c     08 02 06 F1 | 	add	_var02, #8
272a0     2C 00 90 FD | 	jmp	#LR__3992
272a4                 | LR__3989
272a4     01 03 32 F9 | 	getword	_var02, _var02, #0
272a8     50 02 86 F1 | 	sub	_var02, #80
272ac     20 00 90 FD | 	jmp	#LR__3992
272b0                 | LR__3990
272b0     01 03 32 F9 | 	getword	_var02, _var02, #0
272b4     0E 00 00 FF 
272b8     60 02 86 F1 | 	sub	_var02, ##7264
272bc                 | ' 				}
272bc                 | ' 				break;
272bc     10 00 90 FD | 	jmp	#LR__3992
272c0                 | LR__3991
272c0     0F 0C 4E F7 | 	zerox	_var07, #15 wz
272c4     02 0A 06 AA |  if_e	mul	_var06, #2
272c8     05 07 02 A1 |  if_e	add	_var04, _var06
272cc     D8 FE 9F FD | 	jmp	#LR__3980
272d0                 | LR__3992
272d0     01 01 32 F9 | 	getword	_var01, _var02, #0
272d4                 | LR__3993
272d4                 | ' 		}
272d4                 | ' 		uni = uc;
272d4                 | ' 	}
272d4                 | ' 
272d4                 | ' 	return uni;
272d4     00 FB 01 F6 | 	mov	result1, _var01
272d8                 | _fatfs_cc_ff_wtoupper_ret
272d8     2D 00 64 FD | 	ret
272dc                 | 
272dc                 | _fatfs_cc_strncpy
272dc     09 01 02 F6 | 	mov	_var01, arg01
272e0     97 12 48 FB | 	callpa	#(@LR__4001-@LR__4000)>>2,fcache_load_ptr_
272e4                 | ' 
272e4                 | ' 	dscan = dst;
272e4                 | ' 	sscan = src;
272e4                 | ' 	count = n;
272e4                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
272e4                 | LR__4000
272e4     01 16 86 F1 | 	sub	arg03, #1
272e8     00 16 56 F2 | 	cmps	arg03, #0 wc
272ec     18 00 90 CD |  if_b	jmp	#LR__4002
272f0     0A FB C1 FA | 	rdbyte	result1, arg02
272f4     00 FB 41 FC | 	wrbyte	result1, _var01
272f8     01 14 06 F1 | 	add	arg02, #1
272fc     00 FB C9 FA | 	rdbyte	result1, _var01 wz
27300                 | ' 		continue;
27300     01 00 06 F1 | 	add	_var01, #1
27304     DC FF 9F 5D |  if_ne	jmp	#LR__4000
27308                 | LR__4001
27308                 | LR__4002
27308     97 0C 48 FB | 	callpa	#(@LR__4004-@LR__4003)>>2,fcache_load_ptr_
2730c                 | ' 	while (--count >= 0)
2730c                 | LR__4003
2730c     01 16 86 F1 | 	sub	arg03, #1
27310     00 16 56 F2 | 	cmps	arg03, #0 wc
27314     00 03 02 36 |  if_ae	mov	_var02, _var01
27318     01 00 06 31 |  if_ae	add	_var01, #1
2731c     01 01 48 3C |  if_ae	wrbyte	#0, _var02
27320     E8 FF 9F 3D |  if_ae	jmp	#LR__4003
27324                 | LR__4004
27324                 | ' 		*dscan++ = '\0';
27324                 | ' 	return(dst);
27324     09 FB 01 F6 | 	mov	result1, arg01
27328                 | _fatfs_cc_strncpy_ret
27328     2D 00 64 FD | 	ret
2732c                 | 
2732c                 | _fatfs_cc_memcmp
2732c                 | ' 	for (n = size; n > 0; n--)
2732c     00 16 0E F2 | 	cmp	arg03, #0 wz
27330     28 00 90 AD |  if_e	jmp	#LR__4011
27334                 | LR__4010
27334     09 01 C2 FA | 	rdbyte	_var01, arg01
27338     0A 03 C2 FA | 	rdbyte	_var02, arg02
2733c     01 01 0A F2 | 	cmp	_var01, _var02 wz
27340     01 12 06 A1 |  if_e	add	arg01, #1
27344     01 14 06 A1 |  if_e	add	arg02, #1
27348                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
27348     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
2734c     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
27350     01 FB 81 51 |  if_ne	sub	result1, _var02
27354     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
27358     F6 17 6E FB | 	djnz	arg03, #LR__4010
2735c                 | LR__4011
2735c                 | ' 
2735c                 | ' 	return(0);
2735c     00 FA 05 F6 | 	mov	result1, #0
27360                 | _fatfs_cc_memcmp_ret
27360     2D 00 64 FD | 	ret
27364                 | 
27364                 | _fatfs_cc_strncmp
27364     09 01 0A F6 | 	mov	_var01, arg01 wz
27368     14 00 90 5D |  if_ne	jmp	#LR__4020
2736c                 | ' 		return scan2 ? -1 : 0;
2736c     00 14 0E F2 | 	cmp	arg02, #0 wz
27370     01 02 66 56 |  if_ne	neg	_var02, #1
27374     00 02 06 A6 |  if_e	mov	_var02, #0
27378     01 FB 01 F6 | 	mov	result1, _var02
2737c     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
27380                 | LR__4020
27380     00 14 0E F2 | 	cmp	arg02, #0 wz
27384     01 FA 05 A6 |  if_e	mov	result1, #1
27388     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2738c     0B 05 02 F6 | 	mov	_var03, arg03
27390     97 16 48 FB | 	callpa	#(@LR__4022-@LR__4021)>>2,fcache_load_ptr_
27394                 | ' 	count = n;
27394                 | ' 	do {
27394                 | LR__4021
27394     00 07 C2 FA | 	rdbyte	_var04, _var01
27398     0A 09 02 F6 | 	mov	_var05, arg02
2739c     04 0B C2 FA | 	rdbyte	_var06, _var05
273a0     01 04 86 F1 | 	sub	_var03, #1
273a4     00 04 56 F2 | 	cmps	_var03, #0 wc
273a8     01 00 06 F1 | 	add	_var01, #1
273ac     01 14 06 F1 | 	add	arg02, #1
273b0     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
273b4     08 00 90 2D |  if_nc_and_z	jmp	#LR__4023
273b8     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
273bc     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__4021
273c0                 | LR__4022
273c0                 | LR__4023
273c0     00 04 56 F2 | 	cmps	_var03, #0 wc
273c4                 | ' 		return(0);
273c4     00 FA 05 C6 |  if_b	mov	result1, #0
273c8     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
273cc     05 07 0A F2 | 	cmp	_var04, _var06 wz
273d0                 | ' 		return(0);
273d0     00 FA 05 A6 |  if_e	mov	result1, #0
273d4     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
273d8     00 06 0E F2 | 	cmp	_var04, #0 wz
273dc                 | ' 		return(-1);
273dc     01 FA 65 A6 |  if_e	neg	result1, #1
273e0     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
273e4     00 0A 0E F2 | 	cmp	_var06, #0 wz
273e8                 | ' 		return(1);
273e8     01 FA 05 A6 |  if_e	mov	result1, #1
273ec                 | ' 		return(c1 - c2);
273ec     03 FB 01 56 |  if_ne	mov	result1, _var04
273f0     05 FB 81 51 |  if_ne	sub	result1, _var06
273f4                 | _fatfs_cc_strncmp_ret
273f4     2D 00 64 FD | 	ret
273f8                 | 
273f8                 | _fatfs_cc_strchr
273f8                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/libc/string/strchr.c"
273f8                 | ' 	while ((c = *s++) != (char) charwanted)
273f8                 | LR__4030
273f8     09 01 02 F6 | 	mov	_var01, arg01
273fc     00 03 C2 FA | 	rdbyte	_var02, _var01
27400     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
27404     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
27408     03 05 0A F2 | 	cmp	_var03, _var04 wz
2740c     01 12 06 F1 | 	add	arg01, #1
27410     14 00 90 AD |  if_e	jmp	#LR__4031
27414     01 05 02 F6 | 	mov	_var03, _var02
27418     07 04 4E F7 | 	zerox	_var03, #7 wz
2741c     00 FA 05 A6 |  if_e	mov	result1, #0
27420     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
27424     D0 FF 9F FD | 	jmp	#LR__4030
27428                 | LR__4031
27428                 | ' 	return((char *)--s);
27428     01 12 86 F1 | 	sub	arg01, #1
2742c     09 FB 01 F6 | 	mov	result1, arg01
27430                 | _fatfs_cc_strchr_ret
27430     2D 00 64 FD | 	ret
27434                 | 
27434                 | _fatfs_cc_disk_initialize
27434     04 4A 05 F6 | 	mov	COUNT_, #4
27438     A8 00 A0 FD | 	call	#pushregs_
2743c     40 F0 07 F1 | 	add	ptra, #64
27440     04 4E 05 F1 | 	add	fp, #4
27444     A7 12 42 FC | 	wrbyte	arg01, fp
27448     01 00 00 FF 
2744c     14 E4 05 F1 | 	add	objptr, ##532
27450     F2 18 02 FB | 	rdlong	arg04, objptr
27454     2C 4E 05 F1 | 	add	fp, #44
27458     A7 18 62 FC | 	wrlong	arg04, fp
2745c     04 E4 85 F1 | 	sub	objptr, #4
27460     F2 18 02 FB | 	rdlong	arg04, objptr
27464     04 4E 05 F1 | 	add	fp, #4
27468     A7 18 62 FC | 	wrlong	arg04, fp
2746c     08 E4 05 F1 | 	add	objptr, #8
27470     F2 18 02 FB | 	rdlong	arg04, objptr
27474     04 4E 05 F1 | 	add	fp, #4
27478     A7 18 62 FC | 	wrlong	arg04, fp
2747c     04 E4 05 F1 | 	add	objptr, #4
27480     F2 18 02 FB | 	rdlong	arg04, objptr
27484     04 4E 05 F1 | 	add	fp, #4
27488     A7 18 62 FC | 	wrlong	arg04, fp
2748c     04 E4 05 F1 | 	add	objptr, #4
27490     F2 02 48 FC | 	wrbyte	#1, objptr
27494     01 00 00 FF 
27498     20 E4 85 F1 | 	sub	objptr, ##544
2749c     38 4E 85 F1 | 	sub	fp, #56
274a0     A7 18 CA FA | 	rdbyte	arg04, fp wz
274a4     04 4E 85 F1 | 	sub	fp, #4
274a8                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
274a8                 | '             return RES_NOTRDY;
274a8     03 FA 05 56 |  if_ne	mov	result1, #3
274ac     D8 05 90 5D |  if_ne	jmp	#LR__4058
274b0     13 00 00 FF 
274b4     10 13 06 F6 | 	mov	arg01, ##10000
274b8     08 98 BF FD | 	call	#__system___waitus
274bc     30 4E 05 F1 | 	add	fp, #48
274c0     A7 12 02 FB | 	rdlong	arg01, fp
274c4     09 01 08 FC | 	wrpin	#0, arg01
274c8     04 4E 05 F1 | 	add	fp, #4
274cc     A7 12 02 FB | 	rdlong	arg01, fp
274d0     09 01 08 FC | 	wrpin	#0, arg01
274d4     04 4E 05 F1 | 	add	fp, #4
274d8     A7 12 02 FB | 	rdlong	arg01, fp
274dc     09 01 08 FC | 	wrpin	#0, arg01
274e0     04 4E 05 F1 | 	add	fp, #4
274e4     A7 12 02 FB | 	rdlong	arg01, fp
274e8     09 00 80 FF 
274ec     09 01 08 FC | 	wrpin	##4608, arg01
274f0     0C 4E 85 F1 | 	sub	fp, #12
274f4     A7 12 02 FB | 	rdlong	arg01, fp
274f8     59 12 62 FD | 	drvh	arg01
274fc     04 4E 05 F1 | 	add	fp, #4
27500     A7 12 02 FB | 	rdlong	arg01, fp
27504     59 12 62 FD | 	drvh	arg01
27508     04 4E 05 F1 | 	add	fp, #4
2750c     A7 12 02 FB | 	rdlong	arg01, fp
27510     59 12 62 FD | 	drvh	arg01
27514     04 4E 05 F1 | 	add	fp, #4
27518     A7 12 02 FB | 	rdlong	arg01, fp
2751c     59 12 62 FD | 	drvh	arg01
27520     20 4E 85 F1 | 	sub	fp, #32
27524     00 04 80 FF 
27528     A7 20 68 FC | 	wrlong	##524304, fp
2752c     04 4E 05 F1 | 	add	fp, #4
27530     20 03 80 FF 
27534     A7 90 68 FC | 	wrlong	##409672, fp
27538     14 4E 05 F1 | 	add	fp, #20
2753c     A7 1E 02 FB | 	rdlong	local01, fp
27540     18 4E 85 F1 | 	sub	fp, #24
27544     A7 16 02 FB | 	rdlong	arg03, fp
27548     40 1E 62 FD | 	dirl	local01
2754c     A0 03 80 FF 
27550     0F 91 08 FC | 	wrpin	##475208, local01
27554     0F 17 12 FC | 	wxpin	arg03, local01
27558     0F 01 28 FC | 	wypin	#0, local01
2755c     41 1E 62 FD | 	dirh	local01
27560     1C 4E 05 F1 | 	add	fp, #28
27564     A7 20 02 FB | 	rdlong	local02, fp
27568     10 1F 82 F1 | 	sub	local01, local02
2756c     07 1E 06 F5 | 	and	local01, #7
27570     18 1E 66 F0 | 	shl	local01, #24
27574     78 14 06 F6 | 	mov	arg02, #120
27578     0F 15 42 F5 | 	or	arg02, local01
2757c     14 4E 85 F1 | 	sub	fp, #20
27580     A7 14 62 FC | 	wrlong	arg02, fp
27584     14 4E 05 F1 | 	add	fp, #20
27588     A7 12 02 FB | 	rdlong	arg01, fp
2758c     10 14 26 F4 | 	bith	arg02, #16
27590     40 12 62 FD | 	dirl	arg01
27594     09 15 02 FC | 	wrpin	arg02, arg01
27598     09 3F 18 FC | 	wxpin	#31, arg01
2759c     FF FF FF FF 
275a0     09 FF 2B FC | 	wypin	##-1, arg01
275a4     41 12 62 FD | 	dirh	arg01
275a8     04 4E 85 F1 | 	sub	fp, #4
275ac     A7 14 02 FB | 	rdlong	arg02, fp
275b0     08 4E 05 F1 | 	add	fp, #8
275b4     A7 22 02 FB | 	rdlong	local03, fp
275b8     11 15 82 F1 | 	sub	arg02, local03
275bc     07 14 06 F5 | 	and	arg02, #7
275c0     18 14 66 F0 | 	shl	arg02, #24
275c4     14 4E 85 F1 | 	sub	fp, #20
275c8     A7 14 62 FC | 	wrlong	arg02, fp
275cc     29 00 00 FF 
275d0     7A 14 46 F5 | 	or	arg02, ##21114
275d4     A7 14 62 FC | 	wrlong	arg02, fp
275d8     14 4E 05 F1 | 	add	fp, #20
275dc     A7 12 02 FB | 	rdlong	arg01, fp
275e0     40 12 62 FD | 	dirl	arg01
275e4     09 15 02 FC | 	wrpin	arg02, arg01
275e8     09 4F 18 FC | 	wxpin	#39, arg01
275ec     09 01 28 FC | 	wypin	#0, arg01
275f0     41 12 62 FD | 	dirh	arg01
275f4     28 4E 85 F1 | 	sub	fp, #40
275f8     A7 12 02 F6 | 	mov	arg01, fp
275fc     14 4E 85 F1 | 	sub	fp, #20
27600     0A 14 06 F6 | 	mov	arg02, #10
27604     20 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1116
27608     00 12 06 F6 | 	mov	arg01, #0
2760c     00 14 06 F6 | 	mov	arg02, #0
27610     EC 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1140
27614     28 80 B0 FD | 	call	#_fatfs_cc_deselect_1126
27618     64 12 06 F6 | 	mov	arg01, #100
2761c     A4 96 BF FD | 	call	#__system___waitus
27620     14 4E 05 F1 | 	add	fp, #20
27624     A7 12 02 F6 | 	mov	arg01, fp
27628     14 4E 85 F1 | 	sub	fp, #20
2762c     0A 14 06 F6 | 	mov	arg02, #10
27630     F4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1116
27634     0C 4E 05 F1 | 	add	fp, #12
27638     A7 00 48 FC | 	wrbyte	#0, fp
2763c     0C 4E 85 F1 | 	sub	fp, #12
27640     00 12 06 F6 | 	mov	arg01, #0
27644     00 14 06 F6 | 	mov	arg02, #0
27648     B4 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1140
2764c     FD 18 E2 F8 | 	getbyte	arg04, result1, #0
27650     01 18 0E F2 | 	cmp	arg04, #1 wz
27654     B8 03 90 5D |  if_ne	jmp	#LR__4057
27658     08 12 06 F6 | 	mov	arg01, #8
2765c     AA 15 06 F6 | 	mov	arg02, #426
27660     9C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1140
27664     FD FA E1 F8 | 	getbyte	result1, result1, #0
27668     01 FA 0D F2 | 	cmp	result1, #1 wz
2766c     98 01 90 5D |  if_ne	jmp	#LR__4043
27670     14 4E 05 F1 | 	add	fp, #20
27674     A7 12 02 F6 | 	mov	arg01, fp
27678     14 4E 85 F1 | 	sub	fp, #20
2767c     04 14 06 F6 | 	mov	arg02, #4
27680     A4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1116
27684     16 4E 05 F1 | 	add	fp, #22
27688     A7 24 C2 FA | 	rdbyte	local04, fp
2768c     16 4E 85 F1 | 	sub	fp, #22
27690     01 24 0E F2 | 	cmp	local04, #1 wz
27694     17 4E 05 A1 |  if_e	add	fp, #23
27698     A7 22 C2 AA |  if_e	rdbyte	local03, fp
2769c     17 4E 85 A1 |  if_e	sub	fp, #23
276a0     AA 22 0E A2 |  if_e	cmp	local03, #170 wz
276a4     68 03 90 5D |  if_ne	jmp	#LR__4056
276a8                 | ' 				for (tmr = 1000; tmr; tmr--) {
276a8     18 4E 05 F1 | 	add	fp, #24
276ac     01 00 80 FF 
276b0     A7 D0 6B FC | 	wrlong	##1000, fp
276b4     18 4E 85 F1 | 	sub	fp, #24
276b8                 | LR__4040
276b8     18 4E 05 F1 | 	add	fp, #24
276bc     A7 1E 0A FB | 	rdlong	local01, fp wz
276c0     18 4E 85 F1 | 	sub	fp, #24
276c4     3C 00 90 AD |  if_e	jmp	#LR__4041
276c8     A9 12 06 F6 | 	mov	arg01, #169
276cc     1E 14 C6 F9 | 	decod	arg02, #30
276d0     2C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1140
276d4     FD 24 02 F6 | 	mov	local04, result1
276d8     07 24 4E F7 | 	zerox	local04, #7 wz
276dc     24 00 90 AD |  if_e	jmp	#LR__4041
276e0     01 00 00 FF 
276e4     E8 13 06 F6 | 	mov	arg01, ##1000
276e8     D8 95 BF FD | 	call	#__system___waitus
276ec     18 4E 05 F1 | 	add	fp, #24
276f0     A7 24 02 FB | 	rdlong	local04, fp
276f4     01 24 86 F1 | 	sub	local04, #1
276f8     A7 24 62 FC | 	wrlong	local04, fp
276fc     18 4E 85 F1 | 	sub	fp, #24
27700     B4 FF 9F FD | 	jmp	#LR__4040
27704                 | LR__4041
27704     18 4E 05 F1 | 	add	fp, #24
27708     A7 24 0A FB | 	rdlong	local04, fp wz
2770c     18 4E 85 F1 | 	sub	fp, #24
27710     4C 00 90 AD |  if_e	jmp	#LR__4042
27714     3A 12 06 F6 | 	mov	arg01, #58
27718     00 14 06 F6 | 	mov	arg02, #0
2771c     E0 81 B0 FD | 	call	#_fatfs_cc_send_cmd_1140
27720     FD 22 02 F6 | 	mov	local03, result1
27724     07 22 4E F7 | 	zerox	local03, #7 wz
27728     34 00 90 5D |  if_ne	jmp	#LR__4042
2772c     14 4E 05 F1 | 	add	fp, #20
27730     A7 12 02 F6 | 	mov	arg01, fp
27734     14 4E 85 F1 | 	sub	fp, #20
27738     04 14 06 F6 | 	mov	arg02, #4
2773c     E8 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1116
27740     14 4E 05 F1 | 	add	fp, #20
27744     A7 1E C2 FA | 	rdbyte	local01, fp
27748     40 1E CE F7 | 	test	local01, #64 wz
2774c     0C 24 06 56 |  if_ne	mov	local04, #12
27750     04 24 06 A6 |  if_e	mov	local04, #4
27754     08 4E 85 F1 | 	sub	fp, #8
27758     A7 24 42 FC | 	wrbyte	local04, fp
2775c     0C 4E 85 F1 | 	sub	fp, #12
27760                 | LR__4042
27760     14 24 06 FB | 	rdlong	local04, #20
27764     18 4E 05 F1 | 	add	fp, #24
27768     A7 24 62 FC | 	wrlong	local04, fp
2776c     0C 4E 05 F1 | 	add	fp, #12
27770     A7 24 02 FB | 	rdlong	local04, fp
27774     1B 24 26 F4 | 	bith	local04, #27
27778     A7 24 62 FC | 	wrlong	local04, fp
2777c     0C 4E 85 F1 | 	sub	fp, #12
27780     A7 24 02 FB | 	rdlong	local04, fp
27784     18 4E 85 F1 | 	sub	fp, #24
27788     68 78 04 FF 
2778c     81 25 16 F2 | 	cmp	local04, ##150000001 wc
27790     1C 4E 05 C1 |  if_b	add	fp, #28
27794     00 01 80 CF 
27798     A7 08 68 CC |  if_b	wrlong	##131076, fp
2779c     1C 4E 85 C1 |  if_b	sub	fp, #28
277a0     6C 02 90 CD |  if_b	jmp	#LR__4056
277a4     18 4E 05 F1 | 	add	fp, #24
277a8     A7 24 02 FB | 	rdlong	local04, fp
277ac     18 4E 85 F1 | 	sub	fp, #24
277b0     E1 F5 05 FF 
277b4     01 24 16 F2 | 	cmp	local04, ##200000001 wc
277b8     1C 4E 05 C1 |  if_b	add	fp, #28
277bc     00 01 80 CF 
277c0     A7 0A 68 CC |  if_b	wrlong	##131077, fp
277c4     1C 4E 85 C1 |  if_b	sub	fp, #28
277c8     44 02 90 CD |  if_b	jmp	#LR__4056
277cc     18 4E 05 F1 | 	add	fp, #24
277d0     A7 24 02 FB | 	rdlong	local04, fp
277d4     18 4E 85 F1 | 	sub	fp, #24
277d8     3B 58 08 FF 
277dc     01 24 16 F2 | 	cmp	local04, ##280000001 wc
277e0     1C 4E 05 C1 |  if_b	add	fp, #28
277e4     00 01 80 CF 
277e8     A7 0C 68 CC |  if_b	wrlong	##131078, fp
277ec     1C 4E 85 C1 |  if_b	sub	fp, #28
277f0     1C 02 90 CD |  if_b	jmp	#LR__4056
277f4     1C 4E 05 F1 | 	add	fp, #28
277f8     80 01 80 FF 
277fc     A7 10 68 FC | 	wrlong	##196616, fp
27800     1C 4E 85 F1 | 	sub	fp, #28
27804     08 02 90 FD | 	jmp	#LR__4056
27808                 | LR__4043
27808     A9 12 06 F6 | 	mov	arg01, #169
2780c     00 14 06 F6 | 	mov	arg02, #0
27810     EC 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1140
27814     FD 24 E2 F8 | 	getbyte	local04, result1, #0
27818     02 24 16 F2 | 	cmp	local04, #2 wc
2781c     18 00 90 3D |  if_ae	jmp	#LR__4044
27820     0C 4E 05 F1 | 	add	fp, #12
27824     A7 04 48 FC | 	wrbyte	#2, fp
27828     04 4E 05 F1 | 	add	fp, #4
2782c     A7 52 49 FC | 	wrbyte	#169, fp
27830     10 4E 85 F1 | 	sub	fp, #16
27834     14 00 90 FD | 	jmp	#LR__4045
27838                 | LR__4044
27838     0C 4E 05 F1 | 	add	fp, #12
2783c     A7 02 48 FC | 	wrbyte	#1, fp
27840     04 4E 05 F1 | 	add	fp, #4
27844     A7 02 48 FC | 	wrbyte	#1, fp
27848     10 4E 85 F1 | 	sub	fp, #16
2784c                 | LR__4045
2784c                 | ' 				ty =  0x01 ; cmd =  (1) ;
2784c                 | ' 			}
2784c                 | ' 			for (tmr = 1000; tmr; tmr--) {
2784c     18 4E 05 F1 | 	add	fp, #24
27850     01 00 80 FF 
27854     A7 D0 6B FC | 	wrlong	##1000, fp
27858     18 4E 85 F1 | 	sub	fp, #24
2785c                 | LR__4046
2785c     18 4E 05 F1 | 	add	fp, #24
27860     A7 22 0A FB | 	rdlong	local03, fp wz
27864     18 4E 85 F1 | 	sub	fp, #24
27868     44 00 90 AD |  if_e	jmp	#LR__4047
2786c     10 4E 05 F1 | 	add	fp, #16
27870     A7 12 C2 FA | 	rdbyte	arg01, fp
27874     10 4E 85 F1 | 	sub	fp, #16
27878     00 14 06 F6 | 	mov	arg02, #0
2787c     80 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1140
27880     FD 24 02 F6 | 	mov	local04, result1
27884     07 24 4E F7 | 	zerox	local04, #7 wz
27888     24 00 90 AD |  if_e	jmp	#LR__4047
2788c     01 00 00 FF 
27890     E8 13 06 F6 | 	mov	arg01, ##1000
27894     2C 94 BF FD | 	call	#__system___waitus
27898     18 4E 05 F1 | 	add	fp, #24
2789c     A7 24 02 FB | 	rdlong	local04, fp
278a0     01 24 86 F1 | 	sub	local04, #1
278a4     A7 24 62 FC | 	wrlong	local04, fp
278a8     18 4E 85 F1 | 	sub	fp, #24
278ac     AC FF 9F FD | 	jmp	#LR__4046
278b0                 | LR__4047
278b0     18 4E 05 F1 | 	add	fp, #24
278b4     A7 24 0A FB | 	rdlong	local04, fp wz
278b8     18 4E 85 F1 | 	sub	fp, #24
278bc     14 00 90 AD |  if_e	jmp	#LR__4048
278c0     10 12 06 F6 | 	mov	arg01, #16
278c4     09 14 C6 F9 | 	decod	arg02, #9
278c8     34 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1140
278cc     07 FA 4D F7 | 	zerox	result1, #7 wz
278d0     0C 00 90 AD |  if_e	jmp	#LR__4049
278d4                 | LR__4048
278d4     0C 4E 05 F1 | 	add	fp, #12
278d8     A7 00 48 FC | 	wrbyte	#0, fp
278dc     0C 4E 85 F1 | 	sub	fp, #12
278e0                 | LR__4049
278e0     14 24 06 FB | 	rdlong	local04, #20
278e4     18 4E 05 F1 | 	add	fp, #24
278e8     A7 24 62 FC | 	wrlong	local04, fp
278ec     18 4E 85 F1 | 	sub	fp, #24
278f0     F0 FA 02 FF 
278f4     01 25 16 F2 | 	cmp	local04, ##100000001 wc
278f8     18 00 90 3D |  if_ae	jmp	#LR__4050
278fc     24 4E 05 F1 | 	add	fp, #36
27900     A7 24 02 FB | 	rdlong	local04, fp
27904     1B 24 26 F4 | 	bith	local04, #27
27908     A7 24 62 FC | 	wrlong	local04, fp
2790c     24 4E 85 F1 | 	sub	fp, #36
27910     2C 00 90 FD | 	jmp	#LR__4051
27914                 | LR__4050
27914     18 4E 05 F1 | 	add	fp, #24
27918     A7 24 02 FB | 	rdlong	local04, fp
2791c     18 4E 85 F1 | 	sub	fp, #24
27920     E1 F5 05 FF 
27924     01 24 16 F2 | 	cmp	local04, ##200000001 wc
27928     24 4E 05 C1 |  if_b	add	fp, #36
2792c     A7 24 02 CB |  if_b	rdlong	local04, fp
27930     80 00 04 CF 
27934     00 24 46 C5 |  if_b	or	local04, ##134283264
27938     A7 24 62 CC |  if_b	wrlong	local04, fp
2793c     24 4E 85 C1 |  if_b	sub	fp, #36
27940                 | LR__4051
27940     18 4E 05 F1 | 	add	fp, #24
27944     A7 24 02 FB | 	rdlong	local04, fp
27948     18 4E 85 F1 | 	sub	fp, #24
2794c     F0 FA 02 FF 
27950     01 25 16 F2 | 	cmp	local04, ##100000001 wc
27954     1C 4E 05 C1 |  if_b	add	fp, #28
27958     00 01 80 CF 
2795c     A7 08 68 CC |  if_b	wrlong	##131076, fp
27960     1C 4E 85 C1 |  if_b	sub	fp, #28
27964     A8 00 90 CD |  if_b	jmp	#LR__4055
27968     18 4E 05 F1 | 	add	fp, #24
2796c     A7 24 02 FB | 	rdlong	local04, fp
27970     18 4E 85 F1 | 	sub	fp, #24
27974     68 78 04 FF 
27978     81 25 16 F2 | 	cmp	local04, ##150000001 wc
2797c     1C 4E 05 C1 |  if_b	add	fp, #28
27980     80 01 80 CF 
27984     A7 0C 68 CC |  if_b	wrlong	##196614, fp
27988     1C 4E 85 C1 |  if_b	sub	fp, #28
2798c     80 00 90 CD |  if_b	jmp	#LR__4054
27990     18 4E 05 F1 | 	add	fp, #24
27994     A7 24 02 FB | 	rdlong	local04, fp
27998     18 4E 85 F1 | 	sub	fp, #24
2799c     E1 F5 05 FF 
279a0     01 24 16 F2 | 	cmp	local04, ##200000001 wc
279a4     1C 4E 05 C1 |  if_b	add	fp, #28
279a8     00 02 80 CF 
279ac     A7 10 68 CC |  if_b	wrlong	##262152, fp
279b0     1C 4E 85 C1 |  if_b	sub	fp, #28
279b4     58 00 90 CD |  if_b	jmp	#LR__4053
279b8     18 4E 05 F1 | 	add	fp, #24
279bc     A7 24 02 FB | 	rdlong	local04, fp
279c0     18 4E 85 F1 | 	sub	fp, #24
279c4     59 73 07 FF 
279c8     81 24 16 F2 | 	cmp	local04, ##250000001 wc
279cc     1C 4E 05 C1 |  if_b	add	fp, #28
279d0     80 02 80 CF 
279d4     A7 14 68 CC |  if_b	wrlong	##327690, fp
279d8     1C 4E 85 C1 |  if_b	sub	fp, #28
279dc     30 00 90 CD |  if_b	jmp	#LR__4052
279e0     18 4E 05 F1 | 	add	fp, #24
279e4     A7 24 02 FB | 	rdlong	local04, fp
279e8     18 4E 85 F1 | 	sub	fp, #24
279ec     D1 F0 08 FF 
279f0     01 25 16 F2 | 	cmp	local04, ##300000001 wc
279f4     1C 4E 05 C1 |  if_b	add	fp, #28
279f8     00 03 80 CF 
279fc     A7 18 68 CC |  if_b	wrlong	##393228, fp
27a00     1C 4E 85 F3 | 	sumc	fp, #28
27a04     80 03 80 3F 
27a08     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
27a0c     1C 4E 85 31 |  if_ae	sub	fp, #28
27a10                 | LR__4052
27a10                 | LR__4053
27a10                 | LR__4054
27a10                 | LR__4055
27a10                 | LR__4056
27a10                 | LR__4057
27a10     0C 4E 05 F1 | 	add	fp, #12
27a14     A7 24 C2 FA | 	rdbyte	local04, fp
27a18     01 00 00 FF 
27a1c     21 E4 05 F1 | 	add	objptr, ##545
27a20     F2 24 42 FC | 	wrbyte	local04, objptr
27a24     A7 1E CA FA | 	rdbyte	local01, fp wz
27a28     00 24 06 56 |  if_ne	mov	local04, #0
27a2c     01 24 06 A6 |  if_e	mov	local04, #1
27a30     20 4E 05 F1 | 	add	fp, #32
27a34     A7 24 42 FC | 	wrbyte	local04, fp
27a38     A7 24 C2 FA | 	rdbyte	local04, fp
27a3c     2C 4E 85 F1 | 	sub	fp, #44
27a40     01 E4 85 F1 | 	sub	objptr, #1
27a44     F2 24 42 FC | 	wrbyte	local04, objptr
27a48     01 00 00 FF 
27a4c     20 E4 85 F1 | 	sub	objptr, ##544
27a50     EC 7B B0 FD | 	call	#_fatfs_cc_deselect_1126
27a54     34 4E 05 F1 | 	add	fp, #52
27a58     A7 12 02 FB | 	rdlong	arg01, fp
27a5c     18 4E 85 F1 | 	sub	fp, #24
27a60     A7 14 02 FB | 	rdlong	arg02, fp
27a64     09 15 12 FC | 	wxpin	arg02, arg01
27a68     1C 4E 05 F1 | 	add	fp, #28
27a6c     A7 12 02 FB | 	rdlong	arg01, fp
27a70     14 4E 85 F1 | 	sub	fp, #20
27a74     A7 14 02 FB | 	rdlong	arg02, fp
27a78     09 15 02 FC | 	wrpin	arg02, arg01
27a7c                 | ' 
27a7c                 | ' 		}
27a7c                 | ' 	}
27a7c                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
27a7c                 | ' 	CardType = ty;
27a7c                 | ' 	s = ty ? 0 :  0x01 ;
27a7c                 | ' 	Stat = s;
27a7c                 | ' 
27a7c                 | ' 	deselect();
27a7c                 | ' 
27a7c                 | ' 
27a7c                 | ' 	_wxpin( PIN_CLK, ck_div );
27a7c                 | ' 	_wrpin( PIN_DI, spm_tx );
27a7c                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
27a7c                 | ' 	return s;
27a7c     08 4E 05 F1 | 	add	fp, #8
27a80     A7 FA C1 FA | 	rdbyte	result1, fp
27a84     2C 4E 85 F1 | 	sub	fp, #44
27a88                 | LR__4058
27a88     A7 F0 03 F6 | 	mov	ptra, fp
27a8c     B2 00 A0 FD | 	call	#popregs_
27a90                 | _fatfs_cc_disk_initialize_ret
27a90     2D 00 64 FD | 	ret
27a94                 | 
27a94                 | _fatfs_cc_disk_read
27a94     05 4A 05 F6 | 	mov	COUNT_, #5
27a98     A8 00 A0 FD | 	call	#pushregs_
27a9c     0A 1F 02 F6 | 	mov	local01, arg02
27aa0     0B 21 02 F6 | 	mov	local02, arg03
27aa4     0C 23 02 F6 | 	mov	local03, arg04
27aa8     00 12 0E F2 | 	cmp	arg01, #0 wz
27aac     01 FA 05 56 |  if_ne	mov	result1, #1
27ab0                 | ' 
27ab0                 | ' 	return Stat;
27ab0     01 00 00 AF 
27ab4     20 E4 05 A1 |  if_e	add	objptr, ##544
27ab8     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
27abc     01 00 00 AF 
27ac0     20 E4 85 A1 |  if_e	sub	objptr, ##544
27ac4     FD FA E1 F8 | 	getbyte	result1, result1, #0
27ac8     01 FA CD F7 | 	test	result1, #1 wz
27acc     03 FA 05 56 |  if_ne	mov	result1, #3
27ad0     84 00 90 5D |  if_ne	jmp	#LR__4062
27ad4     01 00 00 FF 
27ad8     21 E4 05 F1 | 	add	objptr, ##545
27adc     F2 24 C2 FA | 	rdbyte	local04, objptr
27ae0     01 00 00 FF 
27ae4     21 E4 85 F1 | 	sub	objptr, ##545
27ae8     08 24 CE F7 | 	test	local04, #8 wz
27aec     09 20 66 A0 |  if_e	shl	local02, #9
27af0     02 22 16 F2 | 	cmp	local03, #2 wc
27af4     12 24 06 36 |  if_ae	mov	local04, #18
27af8     11 24 06 C6 |  if_b	mov	local04, #17
27afc     10 15 02 F6 | 	mov	arg02, local02
27b00     12 13 02 F6 | 	mov	arg01, local04
27b04     F8 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1140
27b08     FD 26 02 F6 | 	mov	local05, result1
27b0c     07 26 4E F7 | 	zerox	local05, #7 wz
27b10     30 00 90 5D |  if_ne	jmp	#LR__4061
27b14                 | ' 		do {
27b14                 | LR__4060
27b14     0F 13 02 F6 | 	mov	arg01, local01
27b18     09 14 C6 F9 | 	decod	arg02, #9
27b1c     34 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1134
27b20     00 FA 0D F2 | 	cmp	result1, #0 wz
27b24     01 00 00 5F 
27b28     00 1E 06 51 |  if_ne	add	local01, ##512
27b2c     F9 23 6E 5B |  if_ne	djnz	local03, #LR__4060
27b30     12 25 E2 F8 | 	getbyte	local04, local04, #0
27b34     12 24 0E F2 | 	cmp	local04, #18 wz
27b38     0C 12 06 A6 |  if_e	mov	arg01, #12
27b3c     00 14 06 A6 |  if_e	mov	arg02, #0
27b40     BC 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_1140
27b44                 | LR__4061
27b44     F8 7A B0 FD | 	call	#_fatfs_cc_deselect_1126
27b48                 | ' 	}
27b48                 | ' 	deselect();
27b48                 | ' 
27b48                 | ' 	return count ? RES_ERROR : RES_OK;
27b48     00 22 0E F2 | 	cmp	local03, #0 wz
27b4c     01 26 06 56 |  if_ne	mov	local05, #1
27b50     00 26 06 A6 |  if_e	mov	local05, #0
27b54     13 FB 01 F6 | 	mov	result1, local05
27b58                 | LR__4062
27b58     A7 F0 03 F6 | 	mov	ptra, fp
27b5c     B2 00 A0 FD | 	call	#popregs_
27b60                 | _fatfs_cc_disk_read_ret
27b60     2D 00 64 FD | 	ret
27b64                 | 
27b64                 | _fatfs_cc_disk_write
27b64     04 4A 05 F6 | 	mov	COUNT_, #4
27b68     A8 00 A0 FD | 	call	#pushregs_
27b6c     0A 1F 02 F6 | 	mov	local01, arg02
27b70     0C 21 02 F6 | 	mov	local02, arg04
27b74     0B 23 02 F6 | 	mov	local03, arg03
27b78     00 12 0E F2 | 	cmp	arg01, #0 wz
27b7c     01 FA 05 56 |  if_ne	mov	result1, #1
27b80                 | ' 
27b80                 | ' 	return Stat;
27b80     01 00 00 AF 
27b84     20 E4 05 A1 |  if_e	add	objptr, ##544
27b88     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
27b8c     01 00 00 AF 
27b90     20 E4 85 A1 |  if_e	sub	objptr, ##544
27b94     FD FA E1 F8 | 	getbyte	result1, result1, #0
27b98     01 FA CD F7 | 	test	result1, #1 wz
27b9c     03 FA 05 56 |  if_ne	mov	result1, #3
27ba0     D4 00 90 5D |  if_ne	jmp	#LR__4074
27ba4     01 00 00 FF 
27ba8     21 E4 05 F1 | 	add	objptr, ##545
27bac     F2 16 C2 FA | 	rdbyte	arg03, objptr
27bb0     01 00 00 FF 
27bb4     21 E4 85 F1 | 	sub	objptr, ##545
27bb8     08 16 CE F7 | 	test	arg03, #8 wz
27bbc     09 22 66 A0 |  if_e	shl	local03, #9
27bc0     01 20 0E F2 | 	cmp	local02, #1 wz
27bc4     30 00 90 5D |  if_ne	jmp	#LR__4070
27bc8     18 12 06 F6 | 	mov	arg01, #24
27bcc     11 15 02 F6 | 	mov	arg02, local03
27bd0     2C 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1140
27bd4     FD 24 02 F6 | 	mov	local04, result1
27bd8     07 24 4E F7 | 	zerox	local04, #7 wz
27bdc     84 00 90 5D |  if_ne	jmp	#LR__4073
27be0     0F 13 02 F6 | 	mov	arg01, local01
27be4     FE 14 06 F6 | 	mov	arg02, #254
27be8     48 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_1136
27bec     00 FA 0D F2 | 	cmp	result1, #0 wz
27bf0     00 20 06 56 |  if_ne	mov	local02, #0
27bf4     6C 00 90 FD | 	jmp	#LR__4073
27bf8                 | LR__4070
27bf8     01 00 00 FF 
27bfc     21 E4 05 F1 | 	add	objptr, ##545
27c00     F2 24 C2 FA | 	rdbyte	local04, objptr
27c04     01 00 00 FF 
27c08     21 E4 85 F1 | 	sub	objptr, ##545
27c0c     06 24 CE F7 | 	test	local04, #6 wz
27c10     97 12 06 56 |  if_ne	mov	arg01, #151
27c14     10 15 02 56 |  if_ne	mov	arg02, local02
27c18     E4 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_1140
27c1c     11 15 02 F6 | 	mov	arg02, local03
27c20     19 12 06 F6 | 	mov	arg01, #25
27c24     D8 7C B0 FD | 	call	#_fatfs_cc_send_cmd_1140
27c28     FD 24 02 F6 | 	mov	local04, result1
27c2c     07 24 4E F7 | 	zerox	local04, #7 wz
27c30     30 00 90 5D |  if_ne	jmp	#LR__4072
27c34                 | ' 			do {
27c34                 | LR__4071
27c34     0F 13 02 F6 | 	mov	arg01, local01
27c38     FC 14 06 F6 | 	mov	arg02, #252
27c3c     F4 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1136
27c40     00 FA 0D F2 | 	cmp	result1, #0 wz
27c44     01 00 00 5F 
27c48     00 1E 06 51 |  if_ne	add	local01, ##512
27c4c     F9 21 6E 5B |  if_ne	djnz	local02, #LR__4071
27c50     00 12 06 F6 | 	mov	arg01, #0
27c54     FD 14 06 F6 | 	mov	arg02, #253
27c58     D8 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1136
27c5c     00 FA 0D F2 | 	cmp	result1, #0 wz
27c60     01 20 06 A6 |  if_e	mov	local02, #1
27c64                 | LR__4072
27c64                 | LR__4073
27c64     D8 79 B0 FD | 	call	#_fatfs_cc_deselect_1126
27c68                 | ' 				count = 1;
27c68                 | ' 		}
27c68                 | ' 	}
27c68                 | ' 	deselect();
27c68                 | ' 
27c68                 | ' 	return count ? RES_ERROR : RES_OK;
27c68     00 20 0E F2 | 	cmp	local02, #0 wz
27c6c     01 24 06 56 |  if_ne	mov	local04, #1
27c70     00 24 06 A6 |  if_e	mov	local04, #0
27c74     12 FB 01 F6 | 	mov	result1, local04
27c78                 | LR__4074
27c78     A7 F0 03 F6 | 	mov	ptra, fp
27c7c     B2 00 A0 FD | 	call	#popregs_
27c80                 | _fatfs_cc_disk_write_ret
27c80     2D 00 64 FD | 	ret
27c84                 | 
27c84                 | _fatfs_cc_disk_ioctl
27c84     01 4A 05 F6 | 	mov	COUNT_, #1
27c88     A8 00 A0 FD | 	call	#pushregs_
27c8c     30 F0 07 F1 | 	add	ptra, #48
27c90     04 4E 05 F1 | 	add	fp, #4
27c94     A7 12 42 FC | 	wrbyte	arg01, fp
27c98     04 4E 05 F1 | 	add	fp, #4
27c9c     A7 14 42 FC | 	wrbyte	arg02, fp
27ca0     04 4E 05 F1 | 	add	fp, #4
27ca4     A7 16 62 FC | 	wrlong	arg03, fp
27ca8     08 4E 85 F1 | 	sub	fp, #8
27cac     A7 12 CA FA | 	rdbyte	arg01, fp wz
27cb0     04 4E 85 F1 | 	sub	fp, #4
27cb4     01 FA 05 56 |  if_ne	mov	result1, #1
27cb8                 | ' 
27cb8                 | ' 	return Stat;
27cb8     01 00 00 AF 
27cbc     20 E4 05 A1 |  if_e	add	objptr, ##544
27cc0     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
27cc4     01 00 00 AF 
27cc8     20 E4 85 A1 |  if_e	sub	objptr, ##544
27ccc     FD FA E1 F8 | 	getbyte	result1, result1, #0
27cd0     01 FA CD F7 | 	test	result1, #1 wz
27cd4     03 FA 05 56 |  if_ne	mov	result1, #3
27cd8     E4 01 90 5D |  if_ne	jmp	#LR__4088
27cdc     10 4E 05 F1 | 	add	fp, #16
27ce0     A7 02 68 FC | 	wrlong	#1, fp
27ce4                 | ' 
27ce4                 | ' 	res = RES_ERROR;
27ce4                 | ' 	switch (ctrl) {
27ce4     08 4E 85 F1 | 	sub	fp, #8
27ce8     A7 1E C2 FA | 	rdbyte	local01, fp
27cec     08 4E 85 F1 | 	sub	fp, #8
27cf0     04 1E 26 F3 | 	fle	local01, #4
27cf4     30 1E 62 FD | 	jmprel	local01
27cf8                 | LR__4080
27cf8     10 00 90 FD | 	jmp	#LR__4081
27cfc     24 00 90 FD | 	jmp	#LR__4082
27d00     A0 01 90 FD | 	jmp	#LR__4086
27d04     80 01 90 FD | 	jmp	#LR__4085
27d08     98 01 90 FD | 	jmp	#LR__4086
27d0c                 | LR__4081
27d0c     B4 79 B0 FD | 	call	#_fatfs_cc_select_1130
27d10     00 FA 0D F2 | 	cmp	result1, #0 wz
27d14     10 4E 05 51 |  if_ne	add	fp, #16
27d18     A7 00 68 5C |  if_ne	wrlong	#0, fp
27d1c     10 4E 85 51 |  if_ne	sub	fp, #16
27d20                 | ' 			break;
27d20     8C 01 90 FD | 	jmp	#LR__4087
27d24                 | LR__4082
27d24     09 12 06 F6 | 	mov	arg01, #9
27d28     00 14 06 F6 | 	mov	arg02, #0
27d2c     D0 7B B0 FD | 	call	#_fatfs_cc_send_cmd_1140
27d30     FD 1E 02 F6 | 	mov	local01, result1
27d34     07 1E 4E F7 | 	zerox	local01, #7 wz
27d38     74 01 90 5D |  if_ne	jmp	#LR__4087
27d3c     18 4E 05 F1 | 	add	fp, #24
27d40     A7 12 02 F6 | 	mov	arg01, fp
27d44     18 4E 85 F1 | 	sub	fp, #24
27d48     10 14 06 F6 | 	mov	arg02, #16
27d4c     04 7A B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1134
27d50     00 FA 0D F2 | 	cmp	result1, #0 wz
27d54     58 01 90 AD |  if_e	jmp	#LR__4087
27d58     18 4E 05 F1 | 	add	fp, #24
27d5c     A7 1E C2 FA | 	rdbyte	local01, fp
27d60     18 4E 85 F1 | 	sub	fp, #24
27d64     06 1E 46 F0 | 	shr	local01, #6
27d68     01 1E 0E F2 | 	cmp	local01, #1 wz
27d6c     5C 00 90 5D |  if_ne	jmp	#LR__4083
27d70     21 4E 05 F1 | 	add	fp, #33
27d74     A7 1E C2 FA | 	rdbyte	local01, fp
27d78     01 4E 85 F1 | 	sub	fp, #1
27d7c     A7 FA C1 FA | 	rdbyte	result1, fp
27d80     FD FA 31 F9 | 	getword	result1, result1, #0
27d84     08 FA 65 F0 | 	shl	result1, #8
27d88     FD 1E 02 F1 | 	add	local01, result1
27d8c     01 4E 85 F1 | 	sub	fp, #1
27d90     A7 FA C1 FA | 	rdbyte	result1, fp
27d94     3F FA 05 F5 | 	and	result1, #63
27d98     10 FA 65 F0 | 	shl	result1, #16
27d9c     FD 1E 02 F1 | 	add	local01, result1
27da0     01 1E 06 F1 | 	add	local01, #1
27da4     09 4E 05 F1 | 	add	fp, #9
27da8     A7 1E 62 FC | 	wrlong	local01, fp
27dac     1C 4E 85 F1 | 	sub	fp, #28
27db0     A7 1E 02 FB | 	rdlong	local01, fp
27db4     1C 4E 05 F1 | 	add	fp, #28
27db8     A7 FA 01 FB | 	rdlong	result1, fp
27dbc     28 4E 85 F1 | 	sub	fp, #40
27dc0     0A FA 65 F0 | 	shl	result1, #10
27dc4     0F FB 61 FC | 	wrlong	result1, local01
27dc8     AC 00 90 FD | 	jmp	#LR__4084
27dcc                 | LR__4083
27dcc     1D 4E 05 F1 | 	add	fp, #29
27dd0     A7 1E C2 FA | 	rdbyte	local01, fp
27dd4     0F 1F 42 F8 | 	getnib	local01, local01, #0
27dd8     05 4E 05 F1 | 	add	fp, #5
27ddc     A7 FA C1 FA | 	rdbyte	result1, fp
27de0     80 FA 05 F5 | 	and	result1, #128
27de4     07 FA C5 F0 | 	sar	result1, #7
27de8     FD 1E 02 F1 | 	add	local01, result1
27dec     01 4E 85 F1 | 	sub	fp, #1
27df0     A7 FA C1 FA | 	rdbyte	result1, fp
27df4     03 FA 05 F5 | 	and	result1, #3
27df8     01 FA 65 F0 | 	shl	result1, #1
27dfc     FD 1E 02 F1 | 	add	local01, result1
27e00     02 1E 06 F1 | 	add	local01, #2
27e04     0D 4E 85 F1 | 	sub	fp, #13
27e08     A7 1E 42 FC | 	wrbyte	local01, fp
27e0c     0C 4E 05 F1 | 	add	fp, #12
27e10     A7 1E C2 FA | 	rdbyte	local01, fp
27e14     06 1E 46 F0 | 	shr	local01, #6
27e18     01 4E 85 F1 | 	sub	fp, #1
27e1c     A7 FA C1 FA | 	rdbyte	result1, fp
27e20     FD FA 31 F9 | 	getword	result1, result1, #0
27e24     02 FA 65 F0 | 	shl	result1, #2
27e28     FD 1E 02 F1 | 	add	local01, result1
27e2c     01 4E 85 F1 | 	sub	fp, #1
27e30     A7 FA C1 FA | 	rdbyte	result1, fp
27e34     03 FA 05 F5 | 	and	result1, #3
27e38     FD FA 31 F9 | 	getword	result1, result1, #0
27e3c     0A FA 65 F0 | 	shl	result1, #10
27e40     FD 1E 02 F1 | 	add	local01, result1
27e44     01 1E 06 F1 | 	add	local01, #1
27e48     0A 4E 05 F1 | 	add	fp, #10
27e4c     A7 1E 62 FC | 	wrlong	local01, fp
27e50     1C 4E 85 F1 | 	sub	fp, #28
27e54     A7 1E 02 FB | 	rdlong	local01, fp
27e58     1C 4E 05 F1 | 	add	fp, #28
27e5c     A7 FA 01 FB | 	rdlong	result1, fp
27e60     14 4E 85 F1 | 	sub	fp, #20
27e64     A7 16 C2 FA | 	rdbyte	arg03, fp
27e68     14 4E 85 F1 | 	sub	fp, #20
27e6c     09 16 86 F1 | 	sub	arg03, #9
27e70     0B FB 61 F0 | 	shl	result1, arg03
27e74     0F FB 61 FC | 	wrlong	result1, local01
27e78                 | LR__4084
27e78     10 4E 05 F1 | 	add	fp, #16
27e7c     A7 00 68 FC | 	wrlong	#0, fp
27e80     10 4E 85 F1 | 	sub	fp, #16
27e84                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
27e84                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
27e84                 | ' 					*(LBA_t*)buff = cs << (n - 9);
27e84                 | ' 				}
27e84                 | ' 				res = RES_OK;
27e84                 | ' 			}
27e84                 | ' 			break;
27e84     28 00 90 FD | 	jmp	#LR__4087
27e88                 | LR__4085
27e88     0C 4E 05 F1 | 	add	fp, #12
27e8c     A7 1E 02 FB | 	rdlong	local01, fp
27e90     0F 01 69 FC | 	wrlong	#128, local01
27e94     04 4E 05 F1 | 	add	fp, #4
27e98     A7 00 68 FC | 	wrlong	#0, fp
27e9c     10 4E 85 F1 | 	sub	fp, #16
27ea0                 | ' 			*(DWORD*)buff = 128;
27ea0                 | ' 			res = RES_OK;
27ea0                 | ' 			break;
27ea0     0C 00 90 FD | 	jmp	#LR__4087
27ea4                 | LR__4086
27ea4     10 4E 05 F1 | 	add	fp, #16
27ea8     A7 08 68 FC | 	wrlong	#4, fp
27eac     10 4E 85 F1 | 	sub	fp, #16
27eb0                 | LR__4087
27eb0     8C 77 B0 FD | 	call	#_fatfs_cc_deselect_1126
27eb4                 | ' 			res = RES_PARERR;
27eb4                 | ' 	}
27eb4                 | ' 
27eb4                 | ' 	deselect();
27eb4                 | ' 
27eb4                 | ' 	return res;
27eb4     10 4E 05 F1 | 	add	fp, #16
27eb8     A7 FA 01 FB | 	rdlong	result1, fp
27ebc     10 4E 85 F1 | 	sub	fp, #16
27ec0                 | LR__4088
27ec0     A7 F0 03 F6 | 	mov	ptra, fp
27ec4     B2 00 A0 FD | 	call	#popregs_
27ec8                 | _fatfs_cc_disk_ioctl_ret
27ec8     2D 00 64 FD | 	ret
27ecc                 | 
27ecc                 | _fatfs_cc_disk_setpins
27ecc     00 12 0E F2 | 	cmp	arg01, #0 wz
27ed0     01 FA 65 56 |  if_ne	neg	result1, #1
27ed4     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
27ed8     01 00 00 FF 
27edc     10 E4 05 F1 | 	add	objptr, ##528
27ee0     F2 14 62 FC | 	wrlong	arg02, objptr
27ee4     04 E4 05 F1 | 	add	objptr, #4
27ee8     F2 16 62 FC | 	wrlong	arg03, objptr
27eec     04 E4 05 F1 | 	add	objptr, #4
27ef0     F2 18 62 FC | 	wrlong	arg04, objptr
27ef4     04 E4 05 F1 | 	add	objptr, #4
27ef8     F2 1A 62 FC | 	wrlong	arg05, objptr
27efc     01 00 00 FF 
27f00     1C E4 85 F1 | 	sub	objptr, ##540
27f04     00 FA 05 F6 | 	mov	result1, #0
27f08                 | _fatfs_cc_disk_setpins_ret
27f08     2D 00 64 FD | 	ret
27f0c                 | 
27f0c                 | _fatfs_cc_tchar2uni
27f0c     09 01 02 FB | 	rdlong	_var01, arg01
27f10     00 03 02 F6 | 	mov	_var02, _var01
27f14     01 00 06 F1 | 	add	_var01, #1
27f18     00 05 02 F6 | 	mov	_var03, _var01
27f1c     01 07 C2 FA | 	rdbyte	_var04, _var02
27f20     80 06 CE F7 | 	test	_var04, #128 wz
27f24     E8 00 90 AD |  if_e	jmp	#LR__4097
27f28     03 09 02 F6 | 	mov	_var05, _var04
27f2c     E0 08 06 F5 | 	and	_var05, #224
27f30     C0 08 0E F2 | 	cmp	_var05, #192 wz
27f34     1F 06 06 A5 |  if_e	and	_var04, #31
27f38     01 0A 06 A6 |  if_e	mov	_var06, #1
27f3c     34 00 90 AD |  if_e	jmp	#LR__4091
27f40     03 09 02 F6 | 	mov	_var05, _var04
27f44     F0 08 06 F5 | 	and	_var05, #240
27f48     E0 08 0E F2 | 	cmp	_var05, #224 wz
27f4c     03 07 42 A8 |  if_e	getnib	_var04, _var04, #0
27f50     02 0A 06 A6 |  if_e	mov	_var06, #2
27f54     1C 00 90 AD |  if_e	jmp	#LR__4090
27f58     03 09 02 F6 | 	mov	_var05, _var04
27f5c     F8 08 06 F5 | 	and	_var05, #248
27f60     F0 08 0E F2 | 	cmp	_var05, #240 wz
27f64     07 06 06 A5 |  if_e	and	_var04, #7
27f68     03 0A 06 A6 |  if_e	mov	_var06, #3
27f6c                 | ' 			return 0xFFFFFFFF;
27f6c     01 FA 65 56 |  if_ne	neg	result1, #1
27f70     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
27f74                 | LR__4090
27f74                 | LR__4091
27f74                 | ' 		}
27f74                 | ' 		do {
27f74                 | LR__4092
27f74     02 0D C2 FA | 	rdbyte	_var07, _var03
27f78     06 09 E2 F8 | 	getbyte	_var05, _var07, #0
27f7c     C0 08 06 F5 | 	and	_var05, #192
27f80     80 08 0E F2 | 	cmp	_var05, #128 wz
27f84     01 04 06 F1 | 	add	_var03, #1
27f88     01 FA 65 56 |  if_ne	neg	result1, #1
27f8c     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
27f90     06 06 66 F0 | 	shl	_var04, #6
27f94     06 03 E2 F8 | 	getbyte	_var02, _var07, #0
27f98     3F 02 06 F5 | 	and	_var02, #63
27f9c     01 07 42 F5 | 	or	_var04, _var02
27fa0     F4 0B 6E FB | 	djnz	_var06, #LR__4092
27fa4     80 06 16 F2 | 	cmp	_var04, #128 wc
27fa8     24 00 90 CD |  if_b	jmp	#LR__4094
27fac     6C 00 00 FF 
27fb0     00 06 16 F2 | 	cmp	_var04, ##55296 wc
27fb4     0C 00 90 CD |  if_b	jmp	#LR__4093
27fb8     70 00 00 FF 
27fbc     00 06 16 F2 | 	cmp	_var04, ##57344 wc
27fc0     0C 00 90 CD |  if_b	jmp	#LR__4094
27fc4                 | LR__4093
27fc4     80 08 00 FF 
27fc8     00 06 16 F2 | 	cmp	_var04, ##1114112 wc
27fcc     08 00 90 CD |  if_b	jmp	#LR__4095
27fd0                 | LR__4094
27fd0     01 FA 65 F6 | 	neg	result1, #1
27fd4     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
27fd8                 | LR__4095
27fd8     80 00 00 FF 
27fdc     00 06 16 F2 | 	cmp	_var04, ##65536 wc
27fe0     2C 00 90 CD |  if_b	jmp	#LR__4096
27fe4     03 03 02 F6 | 	mov	_var02, _var04
27fe8     80 00 00 FF 
27fec     00 02 86 F1 | 	sub	_var02, ##65536
27ff0     06 02 66 F0 | 	shl	_var02, #6
27ff4     80 FF 01 FF 
27ff8     00 02 06 F5 | 	and	_var02, ##67043328
27ffc     6E 00 6C FF 
28000     00 08 06 F6 | 	mov	_var05, ##-671032320
28004     01 09 42 F5 | 	or	_var05, _var02
28008     09 06 46 F7 | 	zerox	_var04, #9
2800c     04 07 42 F5 | 	or	_var04, _var05
28010                 | LR__4096
28010                 | LR__4097
28010     09 05 62 FC | 	wrlong	_var03, arg01
28014                 | ' 	}
28014                 | ' #line 811 "ff.c"
28014                 | ' 	*str = p;
28014                 | ' 	return uc;
28014     03 FB 01 F6 | 	mov	result1, _var04
28018                 | _fatfs_cc_tchar2uni_ret
28018     2D 00 64 FD | 	ret
2801c                 | 
2801c                 | _fatfs_cc_put_utf
2801c     80 12 16 F2 | 	cmp	arg01, #128 wc
28020     18 00 90 3D |  if_ae	jmp	#LR__4100
28024     01 16 16 F2 | 	cmp	arg03, #1 wc
28028     00 FA 05 C6 |  if_b	mov	result1, #0
2802c     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
28030     0A 13 42 FC | 	wrbyte	arg01, arg02
28034                 | ' 		*buf = (TCHAR)chr;
28034                 | ' 		return 1;
28034     01 FA 05 F6 | 	mov	result1, #1
28038     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2803c                 | LR__4100
2803c     04 00 00 FF 
28040     00 12 16 F2 | 	cmp	arg01, ##2048 wc
28044     40 00 90 3D |  if_ae	jmp	#LR__4101
28048     02 16 16 F2 | 	cmp	arg03, #2 wc
2804c     00 FA 05 C6 |  if_b	mov	result1, #0
28050     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
28054     09 FB 01 F6 | 	mov	result1, arg01
28058     06 FA 45 F0 | 	shr	result1, #6
2805c     1F FA 05 F5 | 	and	result1, #31
28060     C0 16 06 F6 | 	mov	arg03, #192
28064     FD 16 42 F5 | 	or	arg03, result1
28068     0A 17 42 FC | 	wrbyte	arg03, arg02
2806c     01 14 06 F1 | 	add	arg02, #1
28070     3F 12 06 F5 | 	and	arg01, #63
28074     80 FA 05 F6 | 	mov	result1, #128
28078     09 FB 41 F5 | 	or	result1, arg01
2807c     0A FB 41 FC | 	wrbyte	result1, arg02
28080                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
28080                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
28080                 | ' 		return 2;
28080     02 FA 05 F6 | 	mov	result1, #2
28084     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
28088                 | LR__4101
28088     80 00 00 FF 
2808c     00 12 16 F2 | 	cmp	arg01, ##65536 wc
28090     70 00 90 3D |  if_ae	jmp	#LR__4104
28094     03 16 16 F2 | 	cmp	arg03, #3 wc
28098     18 00 90 CD |  if_b	jmp	#LR__4102
2809c     6C 00 00 FF 
280a0     00 12 16 F2 | 	cmp	arg01, ##55296 wc
280a4     14 00 90 CD |  if_b	jmp	#LR__4103
280a8     70 00 00 FF 
280ac     00 12 16 F2 | 	cmp	arg01, ##57344 wc
280b0     08 00 90 3D |  if_ae	jmp	#LR__4103
280b4                 | LR__4102
280b4     00 FA 05 F6 | 	mov	result1, #0
280b8     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
280bc                 | LR__4103
280bc     09 FB 59 F8 | 	getnib	result1, arg01, #3
280c0     E0 16 06 F6 | 	mov	arg03, #224
280c4     FD 16 42 F5 | 	or	arg03, result1
280c8     0A 17 42 FC | 	wrbyte	arg03, arg02
280cc     01 14 06 F1 | 	add	arg02, #1
280d0     09 FB 01 F6 | 	mov	result1, arg01
280d4     06 FA 45 F0 | 	shr	result1, #6
280d8     3F FA 05 F5 | 	and	result1, #63
280dc     80 16 06 F6 | 	mov	arg03, #128
280e0     FD 16 42 F5 | 	or	arg03, result1
280e4     0A 17 42 FC | 	wrbyte	arg03, arg02
280e8     01 14 06 F1 | 	add	arg02, #1
280ec     3F 12 06 F5 | 	and	arg01, #63
280f0     80 FA 05 F6 | 	mov	result1, #128
280f4     09 FB 41 F5 | 	or	result1, arg01
280f8     0A FB 41 FC | 	wrbyte	result1, arg02
280fc                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
280fc                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
280fc                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
280fc                 | ' 		return 3;
280fc     03 FA 05 F6 | 	mov	result1, #3
28100     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
28104                 | LR__4104
28104     04 16 16 F2 | 	cmp	arg03, #4 wc
28108     00 FA 05 C6 |  if_b	mov	result1, #0
2810c     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
28110     09 01 02 F6 | 	mov	_var01, arg01
28114     E0 01 06 F4 | 	bitl	_var01, #480
28118     00 00 6C FF 
2811c     00 00 86 F1 | 	sub	_var01, ##-671088640
28120     06 00 46 F0 | 	shr	_var01, #6
28124     09 13 32 F9 | 	getword	arg01, arg01, #0
28128     6E 00 00 FF 
2812c     00 12 86 F1 | 	sub	arg01, ##56320
28130     00 08 00 FF 
28134     00 00 16 F2 | 	cmp	_var01, ##1048576 wc
28138     02 00 00 CF 
2813c     00 12 16 C2 |  if_b	cmp	arg01, ##1024 wc
28140     00 FA 05 36 |  if_ae	mov	result1, #0
28144     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
28148     09 01 42 F5 | 	or	_var01, arg01
2814c     80 00 00 FF 
28150     00 00 06 F1 | 	add	_var01, ##65536
28154     00 FB 01 F6 | 	mov	result1, _var01
28158     12 FA 45 F0 | 	shr	result1, #18
2815c     07 FA 05 F5 | 	and	result1, #7
28160     F0 16 06 F6 | 	mov	arg03, #240
28164     FD 16 42 F5 | 	or	arg03, result1
28168     0A 17 42 FC | 	wrbyte	arg03, arg02
2816c     01 14 06 F1 | 	add	arg02, #1
28170     00 FB 01 F6 | 	mov	result1, _var01
28174     0C FA 45 F0 | 	shr	result1, #12
28178     3F FA 05 F5 | 	and	result1, #63
2817c     80 16 06 F6 | 	mov	arg03, #128
28180     FD 16 42 F5 | 	or	arg03, result1
28184     0A 17 42 FC | 	wrbyte	arg03, arg02
28188     01 14 06 F1 | 	add	arg02, #1
2818c     00 FB 01 F6 | 	mov	result1, _var01
28190     06 FA 45 F0 | 	shr	result1, #6
28194     3F FA 05 F5 | 	and	result1, #63
28198     80 16 06 F6 | 	mov	arg03, #128
2819c     FD 16 42 F5 | 	or	arg03, result1
281a0     0A 17 42 FC | 	wrbyte	arg03, arg02
281a4     01 14 06 F1 | 	add	arg02, #1
281a8     3F 00 06 F5 | 	and	_var01, #63
281ac     80 FA 05 F6 | 	mov	result1, #128
281b0     00 FB 41 F5 | 	or	result1, _var01
281b4     0A FB 41 FC | 	wrbyte	result1, arg02
281b8                 | ' 	chr = (hc | chr) + 0x10000;
281b8                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
281b8                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
281b8                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
281b8                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
281b8                 | ' 	return 4;
281b8     04 FA 05 F6 | 	mov	result1, #4
281bc                 | _fatfs_cc_put_utf_ret
281bc     2D 00 64 FD | 	ret
281c0                 | 
281c0                 | _fatfs_cc_sync_window
281c0     02 4A 05 F6 | 	mov	COUNT_, #2
281c4     A8 00 A0 FD | 	call	#pushregs_
281c8     09 1F 02 F6 | 	mov	local01, arg01
281cc     00 20 06 F6 | 	mov	local02, #0
281d0     03 1E 06 F1 | 	add	local01, #3
281d4     0F FB C9 FA | 	rdbyte	result1, local01 wz
281d8     03 1E 86 F1 | 	sub	local01, #3
281dc     A4 00 90 AD |  if_e	jmp	#LR__4112
281e0     01 1E 06 F1 | 	add	local01, #1
281e4     0F 13 C2 FA | 	rdbyte	arg01, local01
281e8     33 1E 06 F1 | 	add	local01, #51
281ec     0F 15 02 F6 | 	mov	arg02, local01
281f0     04 1E 86 F1 | 	sub	local01, #4
281f4     0F 17 02 FB | 	rdlong	arg03, local01
281f8     30 1E 86 F1 | 	sub	local01, #48
281fc     01 18 06 F6 | 	mov	arg04, #1
28200     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
28204     00 FA 0D F2 | 	cmp	result1, #0 wz
28208     74 00 90 5D |  if_ne	jmp	#LR__4110
2820c     03 1E 06 F1 | 	add	local01, #3
28210     0F 01 48 FC | 	wrbyte	#0, local01
28214     2D 1E 06 F1 | 	add	local01, #45
28218     0F FB 01 FB | 	rdlong	result1, local01
2821c     0C 1E 86 F1 | 	sub	local01, #12
28220     0F 19 02 FB | 	rdlong	arg04, local01
28224     0C FB 81 F1 | 	sub	result1, arg04
28228     08 1E 86 F1 | 	sub	local01, #8
2822c     0F 19 02 FB | 	rdlong	arg04, local01
28230     1C 1E 86 F1 | 	sub	local01, #28
28234     0C FB 11 F2 | 	cmp	result1, arg04 wc
28238     48 00 90 3D |  if_ae	jmp	#LR__4111
2823c     02 1E 06 F1 | 	add	local01, #2
28240     0F 19 C2 FA | 	rdbyte	arg04, local01
28244     02 1E 86 F1 | 	sub	local01, #2
28248     02 18 0E F2 | 	cmp	arg04, #2 wz
2824c     34 00 90 5D |  if_ne	jmp	#LR__4111
28250     01 1E 06 F1 | 	add	local01, #1
28254     0F 13 C2 FA | 	rdbyte	arg01, local01
28258     33 1E 06 F1 | 	add	local01, #51
2825c     0F 15 02 F6 | 	mov	arg02, local01
28260     04 1E 86 F1 | 	sub	local01, #4
28264     0F 17 02 FB | 	rdlong	arg03, local01
28268     14 1E 86 F1 | 	sub	local01, #20
2826c     0F 1F 02 FB | 	rdlong	local01, local01
28270     0F 17 02 F1 | 	add	arg03, local01
28274     01 18 06 F6 | 	mov	arg04, #1
28278     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
2827c     04 00 90 FD | 	jmp	#LR__4111
28280                 | LR__4110
28280     01 20 06 F6 | 	mov	local02, #1
28284                 | LR__4111
28284                 | LR__4112
28284                 | ' 			res = FR_DISK_ERR;
28284                 | ' 		}
28284                 | ' 	}
28284                 | ' 	return res;
28284     10 FB 01 F6 | 	mov	result1, local02
28288     A7 F0 03 F6 | 	mov	ptra, fp
2828c     B2 00 A0 FD | 	call	#popregs_
28290                 | _fatfs_cc_sync_window_ret
28290     2D 00 64 FD | 	ret
28294                 | 
28294                 | _fatfs_cc_move_window
28294     03 4A 05 F6 | 	mov	COUNT_, #3
28298     A8 00 A0 FD | 	call	#pushregs_
2829c     09 1F 02 F6 | 	mov	local01, arg01
282a0     0A 21 02 F6 | 	mov	local02, arg02
282a4     00 22 06 F6 | 	mov	local03, #0
282a8     30 1E 06 F1 | 	add	local01, #48
282ac     0F 19 02 FB | 	rdlong	arg04, local01
282b0     30 1E 86 F1 | 	sub	local01, #48
282b4     0C 21 0A F2 | 	cmp	local02, arg04 wz
282b8     40 00 90 AD |  if_e	jmp	#LR__4121
282bc     0F 13 02 F6 | 	mov	arg01, local01
282c0     FC FE BF FD | 	call	#_fatfs_cc_sync_window
282c4     FD 22 0A F6 | 	mov	local03, result1 wz
282c8     30 00 90 5D |  if_ne	jmp	#LR__4120
282cc     01 1E 06 F1 | 	add	local01, #1
282d0     0F 13 C2 FA | 	rdbyte	arg01, local01
282d4     33 1E 06 F1 | 	add	local01, #51
282d8     0F 15 02 F6 | 	mov	arg02, local01
282dc     10 17 02 F6 | 	mov	arg03, local02
282e0     01 18 06 F6 | 	mov	arg04, #1
282e4     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
282e8     00 FA 0D F2 | 	cmp	result1, #0 wz
282ec     01 20 66 56 |  if_ne	neg	local02, #1
282f0     01 22 06 56 |  if_ne	mov	local03, #1
282f4     04 1E 86 F1 | 	sub	local01, #4
282f8     0F 21 62 FC | 	wrlong	local02, local01
282fc                 | LR__4120
282fc                 | LR__4121
282fc                 | ' 				sect = (LBA_t)0 - 1;
282fc                 | ' 				res = FR_DISK_ERR;
282fc                 | ' 			}
282fc                 | ' 			fs->winsect = sect;
282fc                 | ' 		}
282fc                 | ' 	}
282fc                 | ' 	return res;
282fc     11 FB 01 F6 | 	mov	result1, local03
28300     A7 F0 03 F6 | 	mov	ptra, fp
28304     B2 00 A0 FD | 	call	#popregs_
28308                 | _fatfs_cc_move_window_ret
28308     2D 00 64 FD | 	ret
2830c                 | 
2830c                 | _fatfs_cc_sync_fs
2830c     02 4A 05 F6 | 	mov	COUNT_, #2
28310     A8 00 A0 FD | 	call	#pushregs_
28314     09 1F 02 F6 | 	mov	local01, arg01
28318     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
2831c     FD 20 0A F6 | 	mov	local02, result1 wz
28320     D8 00 90 5D |  if_ne	jmp	#LR__4131
28324     0F 19 C2 FA | 	rdbyte	arg04, local01
28328     03 18 0E F2 | 	cmp	arg04, #3 wz
2832c     04 1E 06 A1 |  if_e	add	local01, #4
28330     0F 19 C2 AA |  if_e	rdbyte	arg04, local01
28334     04 1E 86 A1 |  if_e	sub	local01, #4
28338     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
2833c     A0 00 90 5D |  if_ne	jmp	#LR__4130
28340     34 1E 06 F1 | 	add	local01, #52
28344     0F 13 02 F6 | 	mov	arg01, local01
28348     00 14 06 F6 | 	mov	arg02, #0
2834c     09 16 C6 F9 | 	decod	arg03, #9
28350     98 00 A0 FD | 	call	#\builtin_bytefill_
28354     0F 13 02 F6 | 	mov	arg01, local01
28358     FE 13 06 F1 | 	add	arg01, #510
2835c     55 00 80 FF 
28360     09 AB 58 FC | 	wrword	##43605, arg01
28364     A9 B0 A0 FF 
28368     0F A5 68 FC | 	wrlong	##1096897106, local01
2836c     0F 13 02 F6 | 	mov	arg01, local01
28370     E4 13 06 F1 | 	add	arg01, #484
28374     B9 A0 B0 FF 
28378     09 E5 68 FC | 	wrlong	##1631679090, arg01
2837c     0F 13 02 F6 | 	mov	arg01, local01
28380     E8 13 06 F1 | 	add	arg01, #488
28384     20 1E 86 F1 | 	sub	local01, #32
28388     0F 15 02 FB | 	rdlong	arg02, local01
2838c     09 15 62 FC | 	wrlong	arg02, arg01
28390     20 1E 06 F1 | 	add	local01, #32
28394     0F 13 02 F6 | 	mov	arg01, local01
28398     EC 13 06 F1 | 	add	arg01, #492
2839c     24 1E 86 F1 | 	sub	local01, #36
283a0     0F 15 02 FB | 	rdlong	arg02, local01
283a4     09 15 62 FC | 	wrlong	arg02, arg01
283a8     10 1E 06 F1 | 	add	local01, #16
283ac     0F 17 02 FB | 	rdlong	arg03, local01
283b0     01 16 06 F1 | 	add	arg03, #1
283b4     10 1E 06 F1 | 	add	local01, #16
283b8     0F 17 62 FC | 	wrlong	arg03, local01
283bc     2F 1E 86 F1 | 	sub	local01, #47
283c0     0F 13 C2 FA | 	rdbyte	arg01, local01
283c4     33 1E 06 F1 | 	add	local01, #51
283c8     0F 15 02 F6 | 	mov	arg02, local01
283cc     01 18 06 F6 | 	mov	arg04, #1
283d0     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
283d4     30 1E 86 F1 | 	sub	local01, #48
283d8     0F 01 48 FC | 	wrbyte	#0, local01
283dc     04 1E 86 F1 | 	sub	local01, #4
283e0                 | LR__4130
283e0     01 1E 06 F1 | 	add	local01, #1
283e4     0F 13 C2 FA | 	rdbyte	arg01, local01
283e8     00 14 06 F6 | 	mov	arg02, #0
283ec     00 16 06 F6 | 	mov	arg03, #0
283f0     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
283f4     00 FA 0D F2 | 	cmp	result1, #0 wz
283f8     01 20 06 56 |  if_ne	mov	local02, #1
283fc                 | LR__4131
283fc                 | ' 	}
283fc                 | ' 
283fc                 | ' 	return res;
283fc     10 FB 01 F6 | 	mov	result1, local02
28400     A7 F0 03 F6 | 	mov	ptra, fp
28404     B2 00 A0 FD | 	call	#popregs_
28408                 | _fatfs_cc_sync_fs_ret
28408     2D 00 64 FD | 	ret
2840c                 | 
2840c                 | _fatfs_cc_clst2sect
2840c     02 14 86 F1 | 	sub	arg02, #2
28410     18 12 06 F1 | 	add	arg01, #24
28414     09 01 02 FB | 	rdlong	_var01, arg01
28418     18 12 86 F1 | 	sub	arg01, #24
2841c     02 00 86 F1 | 	sub	_var01, #2
28420     00 15 12 F2 | 	cmp	arg02, _var01 wc
28424     00 FA 05 36 |  if_ae	mov	result1, #0
28428     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
2842c     0A 12 06 F1 | 	add	arg01, #10
28430     09 01 E2 FA | 	rdword	_var01, arg01
28434     0A 01 02 FD | 	qmul	_var01, arg02
28438                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
28438     22 12 06 F1 | 	add	arg01, #34
2843c     09 FB 01 FB | 	rdlong	result1, arg01
28440     18 00 62 FD | 	getqx	_var01
28444     00 FB 01 F1 | 	add	result1, _var01
28448                 | _fatfs_cc_clst2sect_ret
28448     2D 00 64 FD | 	ret
2844c                 | 
2844c                 | _fatfs_cc_get_fat
2844c     07 4A 05 F6 | 	mov	COUNT_, #7
28450     A8 00 A0 FD | 	call	#pushregs_
28454     0A 1F 02 F6 | 	mov	local01, arg02
28458     09 21 02 FB | 	rdlong	local02, arg01
2845c     02 1E 16 F2 | 	cmp	local01, #2 wc
28460     14 00 90 CD |  if_b	jmp	#LR__4140
28464     18 20 06 F1 | 	add	local02, #24
28468     10 23 02 FB | 	rdlong	local03, local02
2846c     18 20 86 F1 | 	sub	local02, #24
28470     11 1F 12 F2 | 	cmp	local01, local03 wc
28474     08 00 90 CD |  if_b	jmp	#LR__4141
28478                 | LR__4140
28478     01 24 06 F6 | 	mov	local04, #1
2847c     60 01 90 FD | 	jmp	#LR__4148
28480                 | LR__4141
28480     01 24 66 F6 | 	neg	local04, #1
28484                 | ' 		val = 0xFFFFFFFF;
28484                 | ' 
28484                 | ' 		switch (fs->fs_type) {
28484     10 27 C2 FA | 	rdbyte	local05, local02
28488     01 26 86 F1 | 	sub	local05, #1
2848c     03 26 26 F3 | 	fle	local05, #3
28490     30 26 62 FD | 	jmprel	local05
28494                 | LR__4142
28494     0C 00 90 FD | 	jmp	#LR__4143
28498     B8 00 90 FD | 	jmp	#LR__4144
2849c     F8 00 90 FD | 	jmp	#LR__4145
284a0     38 01 90 FD | 	jmp	#LR__4146
284a4                 | LR__4143
284a4     0F 27 02 F6 | 	mov	local05, local01
284a8     0F 13 02 F6 | 	mov	arg01, local01
284ac     01 12 46 F0 | 	shr	arg01, #1
284b0     09 27 02 F1 | 	add	local05, arg01
284b4     10 13 02 F6 | 	mov	arg01, local02
284b8     13 29 02 F6 | 	mov	local06, local05
284bc     09 28 46 F0 | 	shr	local06, #9
284c0     24 20 06 F1 | 	add	local02, #36
284c4     10 15 02 FB | 	rdlong	arg02, local02
284c8     24 20 86 F1 | 	sub	local02, #36
284cc     14 15 02 F1 | 	add	arg02, local06
284d0     C0 FD BF FD | 	call	#_fatfs_cc_move_window
284d4     00 FA 0D F2 | 	cmp	result1, #0 wz
284d8     04 01 90 5D |  if_ne	jmp	#LR__4147
284dc     13 29 02 F6 | 	mov	local06, local05
284e0     FF 29 06 F5 | 	and	local06, #511
284e4     34 20 06 F1 | 	add	local02, #52
284e8     10 29 02 F1 | 	add	local06, local02
284ec     14 2B C2 FA | 	rdbyte	local07, local06
284f0     34 20 86 F1 | 	sub	local02, #52
284f4     10 13 02 F6 | 	mov	arg01, local02
284f8     01 26 06 F1 | 	add	local05, #1
284fc     13 29 02 F6 | 	mov	local06, local05
28500     09 28 46 F0 | 	shr	local06, #9
28504     24 20 06 F1 | 	add	local02, #36
28508     10 15 02 FB | 	rdlong	arg02, local02
2850c     24 20 86 F1 | 	sub	local02, #36
28510     14 15 02 F1 | 	add	arg02, local06
28514     7C FD BF FD | 	call	#_fatfs_cc_move_window
28518     00 FA 0D F2 | 	cmp	result1, #0 wz
2851c     C0 00 90 5D |  if_ne	jmp	#LR__4147
28520     FF 27 06 F5 | 	and	local05, #511
28524     34 20 06 F1 | 	add	local02, #52
28528     10 27 02 F1 | 	add	local05, local02
2852c     13 29 C2 FA | 	rdbyte	local06, local05
28530     08 28 66 F0 | 	shl	local06, #8
28534     14 2B 42 F5 | 	or	local07, local06
28538     01 1E CE F7 | 	test	local01, #1 wz
2853c     04 2A 46 50 |  if_ne	shr	local07, #4
28540     15 23 02 56 |  if_ne	mov	local03, local07
28544     0B 2A 46 A7 |  if_e	zerox	local07, #11
28548     15 23 02 A6 |  if_e	mov	local03, local07
2854c     11 25 02 F6 | 	mov	local04, local03
28550                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
28550                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
28550                 | ' 			break;
28550     8C 00 90 FD | 	jmp	#LR__4147
28554                 | LR__4144
28554     10 13 02 F6 | 	mov	arg01, local02
28558     0F 29 02 F6 | 	mov	local06, local01
2855c     08 28 46 F0 | 	shr	local06, #8
28560     24 20 06 F1 | 	add	local02, #36
28564     10 15 02 FB | 	rdlong	arg02, local02
28568     24 20 86 F1 | 	sub	local02, #36
2856c     14 15 02 F1 | 	add	arg02, local06
28570     20 FD BF FD | 	call	#_fatfs_cc_move_window
28574     00 FA 0D F2 | 	cmp	result1, #0 wz
28578     64 00 90 5D |  if_ne	jmp	#LR__4147
2857c     34 20 06 F1 | 	add	local02, #52
28580     01 1E 66 F0 | 	shl	local01, #1
28584     FF 1F 06 F5 | 	and	local01, #511
28588     0F 21 02 F1 | 	add	local02, local01
2858c                 | ' {
2858c                 | ' 
2858c                 | ' 	return *((WORD*)ptr);
2858c     10 FB E1 FA | 	rdword	result1, local02
28590     FD 24 32 F9 | 	getword	local04, result1, #0
28594                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
28594                 | ' 			break;
28594     48 00 90 FD | 	jmp	#LR__4147
28598                 | LR__4145
28598     10 13 02 F6 | 	mov	arg01, local02
2859c     0F 29 02 F6 | 	mov	local06, local01
285a0     07 28 46 F0 | 	shr	local06, #7
285a4     24 20 06 F1 | 	add	local02, #36
285a8     10 15 02 FB | 	rdlong	arg02, local02
285ac     24 20 86 F1 | 	sub	local02, #36
285b0     14 15 02 F1 | 	add	arg02, local06
285b4     DC FC BF FD | 	call	#_fatfs_cc_move_window
285b8     00 FA 0D F2 | 	cmp	result1, #0 wz
285bc     20 00 90 5D |  if_ne	jmp	#LR__4147
285c0     34 20 06 F1 | 	add	local02, #52
285c4     02 1E 66 F0 | 	shl	local01, #2
285c8     FF 1F 06 F5 | 	and	local01, #511
285cc     0F 21 02 F1 | 	add	local02, local01
285d0                 | ' {
285d0                 | ' 
285d0                 | ' 	return *((DWORD*)ptr);
285d0     10 25 02 FB | 	rdlong	local04, local02
285d4     7C 24 06 F4 | 	bitl	local04, #124
285d8                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
285d8                 | ' 			break;
285d8     04 00 90 FD | 	jmp	#LR__4147
285dc                 | LR__4146
285dc     01 24 06 F6 | 	mov	local04, #1
285e0                 | LR__4147
285e0                 | LR__4148
285e0                 | ' 			val = 1;
285e0                 | ' 		}
285e0                 | ' 	}
285e0                 | ' 
285e0                 | ' 	return val;
285e0     12 FB 01 F6 | 	mov	result1, local04
285e4     A7 F0 03 F6 | 	mov	ptra, fp
285e8     B2 00 A0 FD | 	call	#popregs_
285ec                 | _fatfs_cc_get_fat_ret
285ec     2D 00 64 FD | 	ret
285f0                 | 
285f0                 | _fatfs_cc_put_fat
285f0     08 4A 05 F6 | 	mov	COUNT_, #8
285f4     A8 00 A0 FD | 	call	#pushregs_
285f8     09 1F 02 F6 | 	mov	local01, arg01
285fc     0A 21 02 F6 | 	mov	local02, arg02
28600     0B 23 02 F6 | 	mov	local03, arg03
28604     02 24 06 F6 | 	mov	local04, #2
28608     02 20 16 F2 | 	cmp	local02, #2 wc
2860c     E0 01 90 CD |  if_b	jmp	#LR__4157
28610     18 1E 06 F1 | 	add	local01, #24
28614     0F 27 02 FB | 	rdlong	local05, local01
28618     18 1E 86 F1 | 	sub	local01, #24
2861c     13 21 12 F2 | 	cmp	local02, local05 wc
28620     CC 01 90 3D |  if_ae	jmp	#LR__4157
28624                 | ' 		switch (fs->fs_type) {
28624     0F 29 C2 FA | 	rdbyte	local06, local01
28628     01 28 86 F1 | 	sub	local06, #1
2862c     03 28 26 F3 | 	fle	local06, #3
28630     30 28 62 FD | 	jmprel	local06
28634                 | LR__4150
28634     0C 00 90 FD | 	jmp	#LR__4151
28638     F8 00 90 FD | 	jmp	#LR__4154
2863c     40 01 90 FD | 	jmp	#LR__4155
28640     AC 01 90 FD | 	jmp	#LR__4156
28644                 | LR__4151
28644     10 2B 02 F6 | 	mov	local07, local02
28648     10 27 02 F6 | 	mov	local05, local02
2864c     01 26 46 F0 | 	shr	local05, #1
28650     13 2B 02 F1 | 	add	local07, local05
28654     0F 13 02 F6 | 	mov	arg01, local01
28658     15 29 02 F6 | 	mov	local06, local07
2865c     09 28 46 F0 | 	shr	local06, #9
28660     24 1E 06 F1 | 	add	local01, #36
28664     0F 15 02 FB | 	rdlong	arg02, local01
28668     24 1E 86 F1 | 	sub	local01, #36
2866c     14 15 02 F1 | 	add	arg02, local06
28670     20 FC BF FD | 	call	#_fatfs_cc_move_window
28674     FD 24 0A F6 | 	mov	local04, result1 wz
28678     74 01 90 5D |  if_ne	jmp	#LR__4156
2867c     34 1E 06 F1 | 	add	local01, #52
28680     0F 2D 02 F6 | 	mov	local08, local01
28684     15 27 02 F6 | 	mov	local05, local07
28688     FF 27 06 F5 | 	and	local05, #511
2868c     13 2D 02 F1 | 	add	local08, local05
28690     01 20 CE F7 | 	test	local02, #1 wz
28694     34 1E 86 F1 | 	sub	local01, #52
28698     01 2A 06 F1 | 	add	local07, #1
2869c     18 00 90 AD |  if_e	jmp	#LR__4152
286a0     16 27 C2 FA | 	rdbyte	local05, local08
286a4     13 27 42 F8 | 	getnib	local05, local05, #0
286a8     11 29 E2 F8 | 	getbyte	local06, local03, #0
286ac     04 28 66 F0 | 	shl	local06, #4
286b0     14 27 42 F5 | 	or	local05, local06
286b4     04 00 90 FD | 	jmp	#LR__4153
286b8                 | LR__4152
286b8     11 27 02 F6 | 	mov	local05, local03
286bc                 | LR__4153
286bc     16 27 42 FC | 	wrbyte	local05, local08
286c0     03 1E 06 F1 | 	add	local01, #3
286c4     0F 03 48 FC | 	wrbyte	#1, local01
286c8     03 1E 86 F1 | 	sub	local01, #3
286cc     0F 13 02 F6 | 	mov	arg01, local01
286d0     15 2D 02 F6 | 	mov	local08, local07
286d4     09 2C 46 F0 | 	shr	local08, #9
286d8     24 1E 06 F1 | 	add	local01, #36
286dc     0F 15 02 FB | 	rdlong	arg02, local01
286e0     24 1E 86 F1 | 	sub	local01, #36
286e4     16 15 02 F1 | 	add	arg02, local08
286e8     A8 FB BF FD | 	call	#_fatfs_cc_move_window
286ec     FD 24 0A F6 | 	mov	local04, result1 wz
286f0     FC 00 90 5D |  if_ne	jmp	#LR__4156
286f4     34 1E 06 F1 | 	add	local01, #52
286f8     0F 2D 02 F6 | 	mov	local08, local01
286fc     FF 2B 06 F5 | 	and	local07, #511
28700     15 2D 02 F1 | 	add	local08, local07
28704     01 20 CE F7 | 	test	local02, #1 wz
28708     04 22 46 50 |  if_ne	shr	local03, #4
2870c     11 27 02 56 |  if_ne	mov	local05, local03
28710     16 27 C2 AA |  if_e	rdbyte	local05, local08
28714     F0 26 06 A5 |  if_e	and	local05, #240
28718     11 23 EA A8 |  if_e	getbyte	local03, local03, #1
2871c     11 23 42 A8 |  if_e	getnib	local03, local03, #0
28720     11 27 42 A5 |  if_e	or	local05, local03
28724     16 27 42 FC | 	wrbyte	local05, local08
28728     31 1E 86 F1 | 	sub	local01, #49
2872c     0F 03 48 FC | 	wrbyte	#1, local01
28730                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
28730                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
28730                 | ' 			fs->wflag = 1;
28730                 | ' 			break;
28730     BC 00 90 FD | 	jmp	#LR__4156
28734                 | LR__4154
28734     0F 13 02 F6 | 	mov	arg01, local01
28738     10 2D 02 F6 | 	mov	local08, local02
2873c     08 2C 46 F0 | 	shr	local08, #8
28740     24 1E 06 F1 | 	add	local01, #36
28744     0F 15 02 FB | 	rdlong	arg02, local01
28748     24 1E 86 F1 | 	sub	local01, #36
2874c     16 15 02 F1 | 	add	arg02, local08
28750     40 FB BF FD | 	call	#_fatfs_cc_move_window
28754     FD 24 0A F6 | 	mov	local04, result1 wz
28758     94 00 90 5D |  if_ne	jmp	#LR__4156
2875c     34 1E 06 F1 | 	add	local01, #52
28760     0F 13 02 F6 | 	mov	arg01, local01
28764     01 20 66 F0 | 	shl	local02, #1
28768     FF 21 06 F5 | 	and	local02, #511
2876c     10 13 02 F1 | 	add	arg01, local02
28770     09 23 52 FC | 	wrword	local03, arg01
28774     31 1E 86 F1 | 	sub	local01, #49
28778     0F 03 48 FC | 	wrbyte	#1, local01
2877c                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
2877c                 | ' 			fs->wflag = 1;
2877c                 | ' 			break;
2877c     70 00 90 FD | 	jmp	#LR__4156
28780                 | LR__4155
28780     0F 13 02 F6 | 	mov	arg01, local01
28784     10 2D 02 F6 | 	mov	local08, local02
28788     07 2C 46 F0 | 	shr	local08, #7
2878c     24 1E 06 F1 | 	add	local01, #36
28790     0F 15 02 FB | 	rdlong	arg02, local01
28794     24 1E 86 F1 | 	sub	local01, #36
28798     16 15 02 F1 | 	add	arg02, local08
2879c     F4 FA BF FD | 	call	#_fatfs_cc_move_window
287a0     FD 24 0A F6 | 	mov	local04, result1 wz
287a4     48 00 90 5D |  if_ne	jmp	#LR__4156
287a8     7C 22 06 F4 | 	bitl	local03, #124
287ac     34 1E 06 F1 | 	add	local01, #52
287b0     10 2D 02 F6 | 	mov	local08, local02
287b4     02 2C 66 F0 | 	shl	local08, #2
287b8     FF 2D 06 F5 | 	and	local08, #511
287bc     0F 13 02 F6 | 	mov	arg01, local01
287c0     16 13 02 F1 | 	add	arg01, local08
287c4                 | ' {
287c4                 | ' 
287c4                 | ' 	return *((DWORD*)ptr);
287c4     09 2D 02 FB | 	rdlong	local08, arg01
287c8     00 00 78 FF 
287cc     00 2C 06 F5 | 	and	local08, ##-268435456
287d0     16 23 42 F5 | 	or	local03, local08
287d4     0F 13 02 F6 | 	mov	arg01, local01
287d8     02 20 66 F0 | 	shl	local02, #2
287dc     FF 21 06 F5 | 	and	local02, #511
287e0     10 13 02 F1 | 	add	arg01, local02
287e4     09 23 62 FC | 	wrlong	local03, arg01
287e8     31 1E 86 F1 | 	sub	local01, #49
287ec     0F 03 48 FC | 	wrbyte	#1, local01
287f0                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
287f0                 | ' 			}
287f0                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
287f0                 | ' 			fs->wflag = 1;
287f0                 | ' 			break;
287f0                 | LR__4156
287f0                 | LR__4157
287f0                 | ' 		}
287f0                 | ' 	}
287f0                 | ' 	return res;
287f0     12 FB 01 F6 | 	mov	result1, local04
287f4     A7 F0 03 F6 | 	mov	ptra, fp
287f8     B2 00 A0 FD | 	call	#popregs_
287fc                 | _fatfs_cc_put_fat_ret
287fc     2D 00 64 FD | 	ret
28800                 | 
28800                 | _fatfs_cc_remove_chain
28800     05 4A 05 F6 | 	mov	COUNT_, #5
28804     A8 00 A0 FD | 	call	#pushregs_
28808     09 1F 02 F6 | 	mov	local01, arg01
2880c     0A 21 02 F6 | 	mov	local02, arg02
28810     0B 23 02 F6 | 	mov	local03, arg03
28814     0F 25 02 FB | 	rdlong	local04, local01
28818     02 20 16 F2 | 	cmp	local02, #2 wc
2881c     14 00 90 CD |  if_b	jmp	#LR__4160
28820     18 24 06 F1 | 	add	local04, #24
28824     12 FB 01 FB | 	rdlong	result1, local04
28828     18 24 86 F1 | 	sub	local04, #24
2882c     FD 20 12 F2 | 	cmp	local02, result1 wc
28830     08 00 90 CD |  if_b	jmp	#LR__4161
28834                 | LR__4160
28834     02 FA 05 F6 | 	mov	result1, #2
28838     CC 00 90 FD | 	jmp	#LR__4166
2883c                 | LR__4161
2883c     00 22 0E F2 | 	cmp	local03, #0 wz
28840     18 00 90 AD |  if_e	jmp	#LR__4162
28844     11 15 02 F6 | 	mov	arg02, local03
28848     12 13 02 F6 | 	mov	arg01, local04
2884c     01 16 66 F6 | 	neg	arg03, #1
28850     9C FD BF FD | 	call	#_fatfs_cc_put_fat
28854     00 FA 0D F2 | 	cmp	result1, #0 wz
28858     AC 00 90 5D |  if_ne	jmp	#LR__4166
2885c                 | LR__4162
2885c                 | ' 	}
2885c                 | ' 
2885c                 | ' 
2885c                 | ' 	do {
2885c                 | LR__4163
2885c     10 15 02 F6 | 	mov	arg02, local02
28860     0F 13 02 F6 | 	mov	arg01, local01
28864     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
28868     FD 26 0A F6 | 	mov	local05, result1 wz
2886c     94 00 90 AD |  if_e	jmp	#LR__4165
28870     01 26 0E F2 | 	cmp	local05, #1 wz
28874     02 FA 05 A6 |  if_e	mov	result1, #2
28878     8C 00 90 AD |  if_e	jmp	#LR__4166
2887c     FF FF 7F FF 
28880     FF 27 0E F2 | 	cmp	local05, ##-1 wz
28884     01 FA 05 A6 |  if_e	mov	result1, #1
28888     7C 00 90 AD |  if_e	jmp	#LR__4166
2888c     10 15 02 F6 | 	mov	arg02, local02
28890     12 13 02 F6 | 	mov	arg01, local04
28894     00 16 06 F6 | 	mov	arg03, #0
28898     54 FD BF FD | 	call	#_fatfs_cc_put_fat
2889c     FD 22 0A F6 | 	mov	local03, result1 wz
288a0     11 FB 01 56 |  if_ne	mov	result1, local03
288a4     60 00 90 5D |  if_ne	jmp	#LR__4166
288a8     18 24 06 F1 | 	add	local04, #24
288ac     12 23 02 FB | 	rdlong	local03, local04
288b0     02 22 86 F1 | 	sub	local03, #2
288b4     04 24 86 F1 | 	sub	local04, #4
288b8     12 21 02 FB | 	rdlong	local02, local04
288bc     14 24 86 F1 | 	sub	local04, #20
288c0     11 21 12 F2 | 	cmp	local02, local03 wc
288c4     24 00 90 3D |  if_ae	jmp	#LR__4164
288c8     14 24 06 F1 | 	add	local04, #20
288cc     12 23 02 FB | 	rdlong	local03, local04
288d0     01 22 06 F1 | 	add	local03, #1
288d4     12 23 62 FC | 	wrlong	local03, local04
288d8     10 24 86 F1 | 	sub	local04, #16
288dc     12 23 C2 FA | 	rdbyte	local03, local04
288e0     01 22 46 F5 | 	or	local03, #1
288e4     12 23 42 FC | 	wrbyte	local03, local04
288e8     04 24 86 F1 | 	sub	local04, #4
288ec                 | LR__4164
288ec     13 21 02 F6 | 	mov	local02, local05
288f0     18 24 06 F1 | 	add	local04, #24
288f4     12 27 02 FB | 	rdlong	local05, local04
288f8     18 24 86 F1 | 	sub	local04, #24
288fc     13 21 12 F2 | 	cmp	local02, local05 wc
28900     58 FF 9F CD |  if_b	jmp	#LR__4163
28904                 | LR__4165
28904                 | ' #line 1500 "ff.c"
28904                 | ' 	return FR_OK;
28904     00 FA 05 F6 | 	mov	result1, #0
28908                 | LR__4166
28908     A7 F0 03 F6 | 	mov	ptra, fp
2890c     B2 00 A0 FD | 	call	#popregs_
28910                 | _fatfs_cc_remove_chain_ret
28910     2D 00 64 FD | 	ret
28914                 | 
28914                 | _fatfs_cc_create_chain
28914     09 4A 05 F6 | 	mov	COUNT_, #9
28918     A8 00 A0 FD | 	call	#pushregs_
2891c     09 1F 02 F6 | 	mov	local01, arg01
28920     0A 21 0A F6 | 	mov	local02, arg02 wz
28924     0F 23 02 FB | 	rdlong	local03, local01
28928     28 00 90 5D |  if_ne	jmp	#LR__4170
2892c     10 22 06 F1 | 	add	local03, #16
28930     11 25 0A FB | 	rdlong	local04, local03 wz
28934     10 22 86 F1 | 	sub	local03, #16
28938     18 22 06 51 |  if_ne	add	local03, #24
2893c     11 27 02 5B |  if_ne	rdlong	local05, local03
28940     18 22 86 51 |  if_ne	sub	local03, #24
28944     13 25 12 52 |  if_ne	cmp	local04, local05 wc
28948     50 00 90 4D |  if_c_and_nz	jmp	#LR__4171
2894c     01 24 06 F6 | 	mov	local04, #1
28950     48 00 90 FD | 	jmp	#LR__4171
28954                 | LR__4170
28954     10 15 02 F6 | 	mov	arg02, local02
28958     0F 13 02 F6 | 	mov	arg01, local01
2895c     EC FA BF FD | 	call	#_fatfs_cc_get_fat
28960     FD 24 02 F6 | 	mov	local04, result1
28964     02 24 16 F2 | 	cmp	local04, #2 wc
28968     01 FA 05 C6 |  if_b	mov	result1, #1
2896c     BC 01 90 CD |  if_b	jmp	#LR__4181
28970     FF FF 7F FF 
28974     FF 25 0E F2 | 	cmp	local04, ##-1 wz
28978     12 FB 01 A6 |  if_e	mov	result1, local04
2897c     AC 01 90 AD |  if_e	jmp	#LR__4181
28980     18 22 06 F1 | 	add	local03, #24
28984     11 27 02 FB | 	rdlong	local05, local03
28988     18 22 86 F1 | 	sub	local03, #24
2898c     13 25 12 F2 | 	cmp	local04, local05 wc
28990     12 FB 01 C6 |  if_b	mov	result1, local04
28994     94 01 90 CD |  if_b	jmp	#LR__4181
28998     10 25 02 F6 | 	mov	local04, local02
2899c                 | LR__4171
2899c     14 22 06 F1 | 	add	local03, #20
289a0     11 27 0A FB | 	rdlong	local05, local03 wz
289a4     14 22 86 F1 | 	sub	local03, #20
289a8     00 FA 05 A6 |  if_e	mov	result1, #0
289ac     7C 01 90 AD |  if_e	jmp	#LR__4181
289b0     00 28 06 F6 | 	mov	local06, #0
289b4     10 25 0A F2 | 	cmp	local04, local02 wz
289b8     74 00 90 5D |  if_ne	jmp	#LR__4174
289bc     12 29 02 F6 | 	mov	local06, local04
289c0     01 28 06 F1 | 	add	local06, #1
289c4     18 22 06 F1 | 	add	local03, #24
289c8     11 27 02 FB | 	rdlong	local05, local03
289cc     18 22 86 F1 | 	sub	local03, #24
289d0     13 29 12 F2 | 	cmp	local06, local05 wc
289d4     02 28 06 36 |  if_ae	mov	local06, #2
289d8     14 15 02 F6 | 	mov	arg02, local06
289dc     0F 13 02 F6 | 	mov	arg01, local01
289e0     68 FA BF FD | 	call	#_fatfs_cc_get_fat
289e4     FD 26 02 F6 | 	mov	local05, result1
289e8     01 26 0E F2 | 	cmp	local05, #1 wz
289ec     FF FF 7F 5F 
289f0     FF 27 0E 52 |  if_ne	cmp	local05, ##-1 wz
289f4     13 FB 01 A6 |  if_e	mov	result1, local05
289f8     30 01 90 AD |  if_e	jmp	#LR__4181
289fc     00 26 0E F2 | 	cmp	local05, #0 wz
28a00     2C 00 90 AD |  if_e	jmp	#LR__4173
28a04     10 22 06 F1 | 	add	local03, #16
28a08     11 2B 02 FB | 	rdlong	local07, local03
28a0c     10 22 86 F1 | 	sub	local03, #16
28a10     02 2A 16 F2 | 	cmp	local07, #2 wc
28a14     14 00 90 CD |  if_b	jmp	#LR__4172
28a18     18 22 06 F1 | 	add	local03, #24
28a1c     11 27 02 FB | 	rdlong	local05, local03
28a20     18 22 86 F1 | 	sub	local03, #24
28a24     13 2B 12 F2 | 	cmp	local07, local05 wc
28a28     15 25 02 C6 |  if_b	mov	local04, local07
28a2c                 | LR__4172
28a2c     00 28 06 F6 | 	mov	local06, #0
28a30                 | LR__4173
28a30                 | LR__4174
28a30     00 28 0E F2 | 	cmp	local06, #0 wz
28a34     60 00 90 5D |  if_ne	jmp	#LR__4177
28a38     12 29 02 F6 | 	mov	local06, local04
28a3c                 | ' 			ncl = scl;
28a3c                 | ' 			for (;;) {
28a3c                 | LR__4175
28a3c     01 28 06 F1 | 	add	local06, #1
28a40     18 22 06 F1 | 	add	local03, #24
28a44     11 27 02 FB | 	rdlong	local05, local03
28a48     18 22 86 F1 | 	sub	local03, #24
28a4c     13 29 12 F2 | 	cmp	local06, local05 wc
28a50     02 28 06 36 |  if_ae	mov	local06, #2
28a54     12 29 1A 32 |  if_ae	cmp	local06, local04 wcz
28a58     00 FA 05 16 |  if_a	mov	result1, #0
28a5c     CC 00 90 1D |  if_a	jmp	#LR__4181
28a60     14 15 02 F6 | 	mov	arg02, local06
28a64     0F 13 02 F6 | 	mov	arg01, local01
28a68     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
28a6c     FD 2A 0A F6 | 	mov	local07, result1 wz
28a70     24 00 90 AD |  if_e	jmp	#LR__4176
28a74     01 2A 0E F2 | 	cmp	local07, #1 wz
28a78     FF FF 7F 5F 
28a7c     FF 2B 0E 52 |  if_ne	cmp	local07, ##-1 wz
28a80     15 FB 01 A6 |  if_e	mov	result1, local07
28a84     A4 00 90 AD |  if_e	jmp	#LR__4181
28a88     12 29 0A F2 | 	cmp	local06, local04 wz
28a8c     00 FA 05 A6 |  if_e	mov	result1, #0
28a90     98 00 90 AD |  if_e	jmp	#LR__4181
28a94     A4 FF 9F FD | 	jmp	#LR__4175
28a98                 | LR__4176
28a98                 | LR__4177
28a98     11 13 02 F6 | 	mov	arg01, local03
28a9c     14 15 02 F6 | 	mov	arg02, local06
28aa0     01 16 66 F6 | 	neg	arg03, #1
28aa4     48 FB BF FD | 	call	#_fatfs_cc_put_fat
28aa8     FD 2C 0A F6 | 	mov	local08, result1 wz
28aac     1C 00 90 5D |  if_ne	jmp	#LR__4178
28ab0     00 20 0E F2 | 	cmp	local02, #0 wz
28ab4     14 00 90 AD |  if_e	jmp	#LR__4178
28ab8     11 13 02 F6 | 	mov	arg01, local03
28abc     10 15 02 F6 | 	mov	arg02, local02
28ac0     14 17 02 F6 | 	mov	arg03, local06
28ac4     28 FB BF FD | 	call	#_fatfs_cc_put_fat
28ac8     FD 2C 02 F6 | 	mov	local08, result1
28acc                 | LR__4178
28acc     00 2C 0E F2 | 	cmp	local08, #0 wz
28ad0     4C 00 90 5D |  if_ne	jmp	#LR__4179
28ad4     10 22 06 F1 | 	add	local03, #16
28ad8     11 29 62 FC | 	wrlong	local06, local03
28adc     08 22 06 F1 | 	add	local03, #8
28ae0     11 27 02 FB | 	rdlong	local05, local03
28ae4     02 26 86 F1 | 	sub	local05, #2
28ae8     04 22 86 F1 | 	sub	local03, #4
28aec     11 2F 02 FB | 	rdlong	local09, local03
28af0     14 22 86 F1 | 	sub	local03, #20
28af4     13 2F 1A F2 | 	cmp	local09, local05 wcz
28af8     14 22 06 E1 |  if_be	add	local03, #20
28afc     11 2F 02 EB |  if_be	rdlong	local09, local03
28b00     01 2E 86 E1 |  if_be	sub	local09, #1
28b04     11 2F 62 EC |  if_be	wrlong	local09, local03
28b08     14 22 86 E1 |  if_be	sub	local03, #20
28b0c     04 22 06 F1 | 	add	local03, #4
28b10     11 27 C2 FA | 	rdbyte	local05, local03
28b14     01 26 46 F5 | 	or	local05, #1
28b18     11 27 42 FC | 	wrbyte	local05, local03
28b1c     08 00 90 FD | 	jmp	#LR__4180
28b20                 | LR__4179
28b20     01 2C 0E F2 | 	cmp	local08, #1 wz
28b24     01 28 C6 F6 | 	negz	local06, #1
28b28                 | LR__4180
28b28                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
28b28                 | ' 	}
28b28                 | ' 
28b28                 | ' 	return ncl;
28b28     14 FB 01 F6 | 	mov	result1, local06
28b2c                 | LR__4181
28b2c     A7 F0 03 F6 | 	mov	ptra, fp
28b30     B2 00 A0 FD | 	call	#popregs_
28b34                 | _fatfs_cc_create_chain_ret
28b34     2D 00 64 FD | 	ret
28b38                 | 
28b38                 | _fatfs_cc_dir_clear
28b38     06 4A 05 F6 | 	mov	COUNT_, #6
28b3c     A8 00 A0 FD | 	call	#pushregs_
28b40     09 1F 02 F6 | 	mov	local01, arg01
28b44     0A 21 02 F6 | 	mov	local02, arg02
28b48     0F 13 02 F6 | 	mov	arg01, local01
28b4c     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
28b50     00 FA 0D F2 | 	cmp	result1, #0 wz
28b54     01 FA 05 56 |  if_ne	mov	result1, #1
28b58     90 00 90 5D |  if_ne	jmp	#LR__4192
28b5c     0F 13 02 F6 | 	mov	arg01, local01
28b60     10 15 02 F6 | 	mov	arg02, local02
28b64     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
28b68     FD 22 02 F6 | 	mov	local03, result1
28b6c     30 1E 06 F1 | 	add	local01, #48
28b70     0F 23 62 FC | 	wrlong	local03, local01
28b74     04 1E 06 F1 | 	add	local01, #4
28b78     0F 13 02 F6 | 	mov	arg01, local01
28b7c     00 14 06 F6 | 	mov	arg02, #0
28b80     09 16 C6 F9 | 	decod	arg03, #9
28b84     98 00 A0 FD | 	call	#\builtin_bytefill_
28b88     0F 25 02 F6 | 	mov	local04, local01
28b8c                 | ' #line 1667 "ff.c"
28b8c                 | ' 	{
28b8c                 | ' 		ibuf = fs->win; szb = 1;
28b8c                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
28b8c     00 26 06 F6 | 	mov	local05, #0
28b90     34 1E 86 F1 | 	sub	local01, #52
28b94                 | LR__4190
28b94     0A 1E 06 F1 | 	add	local01, #10
28b98     0F 29 E2 FA | 	rdword	local06, local01
28b9c     0A 1E 86 F1 | 	sub	local01, #10
28ba0     14 27 12 F2 | 	cmp	local05, local06 wc
28ba4     2C 00 90 3D |  if_ae	jmp	#LR__4191
28ba8     01 1E 06 F1 | 	add	local01, #1
28bac     0F 13 C2 FA | 	rdbyte	arg01, local01
28bb0     01 1E 86 F1 | 	sub	local01, #1
28bb4     12 15 02 F6 | 	mov	arg02, local04
28bb8     11 17 02 F6 | 	mov	arg03, local03
28bbc     13 17 02 F1 | 	add	arg03, local05
28bc0     01 18 06 F6 | 	mov	arg04, #1
28bc4     9C EF BF FD | 	call	#_fatfs_cc_disk_write
28bc8     00 FA 0D F2 | 	cmp	result1, #0 wz
28bcc     01 26 06 A1 |  if_e	add	local05, #1
28bd0     C0 FF 9F AD |  if_e	jmp	#LR__4190
28bd4                 | LR__4191
28bd4                 | ' 	}
28bd4                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
28bd4     0A 1E 06 F1 | 	add	local01, #10
28bd8     0F 25 E2 FA | 	rdword	local04, local01
28bdc     12 27 0A F2 | 	cmp	local05, local04 wz
28be0     00 28 06 A6 |  if_e	mov	local06, #0
28be4     01 28 06 56 |  if_ne	mov	local06, #1
28be8     14 FB 01 F6 | 	mov	result1, local06
28bec                 | LR__4192
28bec     A7 F0 03 F6 | 	mov	ptra, fp
28bf0     B2 00 A0 FD | 	call	#popregs_
28bf4                 | _fatfs_cc_dir_clear_ret
28bf4     2D 00 64 FD | 	ret
28bf8                 | 
28bf8                 | _fatfs_cc_dir_sdi
28bf8     06 4A 05 F6 | 	mov	COUNT_, #6
28bfc     A8 00 A0 FD | 	call	#pushregs_
28c00     09 1F 02 F6 | 	mov	local01, arg01
28c04     0A 21 02 F6 | 	mov	local02, arg02
28c08     0F 23 02 FB | 	rdlong	local03, local01
28c0c     00 10 00 FF 
28c10     00 20 16 F2 | 	cmp	local02, ##2097152 wc
28c14     1F 20 CE C7 |  if_b	test	local02, #31 wz
28c18                 | ' 		return FR_INT_ERR;
28c18     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
28c1c     34 01 90 7D |  if_nc_or_nz	jmp	#LR__4206
28c20     10 1E 06 F1 | 	add	local01, #16
28c24     0F 21 62 FC | 	wrlong	local02, local01
28c28     08 1E 86 F1 | 	sub	local01, #8
28c2c     0F 25 0A FB | 	rdlong	local04, local01 wz
28c30     08 1E 86 F1 | 	sub	local01, #8
28c34     11 27 C2 AA |  if_e	rdbyte	local05, local03
28c38     03 26 16 A2 |  if_e	cmp	local05, #3 wc
28c3c     28 22 06 21 |  if_nc_and_z	add	local03, #40
28c40     11 25 02 2B |  if_nc_and_z	rdlong	local04, local03
28c44     28 22 86 21 |  if_nc_and_z	sub	local03, #40
28c48     00 24 0E F2 | 	cmp	local04, #0 wz
28c4c     3C 00 90 5D |  if_ne	jmp	#LR__4200
28c50     10 27 02 F6 | 	mov	local05, local02
28c54     05 26 46 F0 | 	shr	local05, #5
28c58     08 22 06 F1 | 	add	local03, #8
28c5c     11 15 E2 FA | 	rdword	arg02, local03
28c60     08 22 86 F1 | 	sub	local03, #8
28c64     0A 27 12 F2 | 	cmp	local05, arg02 wc
28c68     02 FA 05 36 |  if_ae	mov	result1, #2
28c6c     E4 00 90 3D |  if_ae	jmp	#LR__4206
28c70     28 22 06 F1 | 	add	local03, #40
28c74     11 27 02 FB | 	rdlong	local05, local03
28c78     28 22 86 F1 | 	sub	local03, #40
28c7c     18 1E 06 F1 | 	add	local01, #24
28c80     0F 27 62 FC | 	wrlong	local05, local01
28c84     18 1E 86 F1 | 	sub	local01, #24
28c88     7C 00 90 FD | 	jmp	#LR__4205
28c8c                 | LR__4200
28c8c     0A 22 06 F1 | 	add	local03, #10
28c90     11 29 E2 FA | 	rdword	local06, local03
28c94     0A 22 86 F1 | 	sub	local03, #10
28c98     09 28 66 F0 | 	shl	local06, #9
28c9c                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
28c9c                 | ' 		while (ofs >= csz) {
28c9c                 | LR__4201
28c9c     14 21 12 F2 | 	cmp	local02, local06 wc
28ca0     4C 00 90 CD |  if_b	jmp	#LR__4204
28ca4     0F 13 02 F6 | 	mov	arg01, local01
28ca8     12 15 02 F6 | 	mov	arg02, local04
28cac     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
28cb0     FD 24 02 F6 | 	mov	local04, result1
28cb4     FF FF 7F FF 
28cb8     FF 25 0E F2 | 	cmp	local04, ##-1 wz
28cbc     01 FA 05 A6 |  if_e	mov	result1, #1
28cc0     90 00 90 AD |  if_e	jmp	#LR__4206
28cc4     02 24 16 F2 | 	cmp	local04, #2 wc
28cc8     14 00 90 CD |  if_b	jmp	#LR__4202
28ccc     18 22 06 F1 | 	add	local03, #24
28cd0     11 27 02 FB | 	rdlong	local05, local03
28cd4     18 22 86 F1 | 	sub	local03, #24
28cd8     13 25 12 F2 | 	cmp	local04, local05 wc
28cdc     08 00 90 CD |  if_b	jmp	#LR__4203
28ce0                 | LR__4202
28ce0     02 FA 05 F6 | 	mov	result1, #2
28ce4     6C 00 90 FD | 	jmp	#LR__4206
28ce8                 | LR__4203
28ce8     14 21 82 F1 | 	sub	local02, local06
28cec     AC FF 9F FD | 	jmp	#LR__4201
28cf0                 | LR__4204
28cf0     11 13 02 F6 | 	mov	arg01, local03
28cf4     12 15 02 F6 | 	mov	arg02, local04
28cf8     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
28cfc     18 1E 06 F1 | 	add	local01, #24
28d00     0F FB 61 FC | 	wrlong	result1, local01
28d04     18 1E 86 F1 | 	sub	local01, #24
28d08                 | LR__4205
28d08     14 1E 06 F1 | 	add	local01, #20
28d0c     0F 25 62 FC | 	wrlong	local04, local01
28d10     04 1E 06 F1 | 	add	local01, #4
28d14     0F 27 0A FB | 	rdlong	local05, local01 wz
28d18     18 1E 86 F1 | 	sub	local01, #24
28d1c     02 FA 05 A6 |  if_e	mov	result1, #2
28d20     30 00 90 AD |  if_e	jmp	#LR__4206
28d24     10 29 02 F6 | 	mov	local06, local02
28d28     09 28 46 F0 | 	shr	local06, #9
28d2c     18 1E 06 F1 | 	add	local01, #24
28d30     0F 27 02 FB | 	rdlong	local05, local01
28d34     14 27 02 F1 | 	add	local05, local06
28d38     0F 27 62 FC | 	wrlong	local05, local01
28d3c     34 22 06 F1 | 	add	local03, #52
28d40     FF 21 06 F5 | 	and	local02, #511
28d44     10 23 02 F1 | 	add	local03, local02
28d48     04 1E 06 F1 | 	add	local01, #4
28d4c     0F 23 62 FC | 	wrlong	local03, local01
28d50                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
28d50                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
28d50                 | ' 
28d50                 | ' 	return FR_OK;
28d50     00 FA 05 F6 | 	mov	result1, #0
28d54                 | LR__4206
28d54     A7 F0 03 F6 | 	mov	ptra, fp
28d58     B2 00 A0 FD | 	call	#popregs_
28d5c                 | _fatfs_cc_dir_sdi_ret
28d5c     2D 00 64 FD | 	ret
28d60                 | 
28d60                 | _fatfs_cc_dir_next
28d60     05 4A 05 F6 | 	mov	COUNT_, #5
28d64     A8 00 A0 FD | 	call	#pushregs_
28d68     09 1F 02 F6 | 	mov	local01, arg01
28d6c     0A 21 02 F6 | 	mov	local02, arg02
28d70     0F 23 02 FB | 	rdlong	local03, local01
28d74     10 1E 06 F1 | 	add	local01, #16
28d78     0F 25 02 FB | 	rdlong	local04, local01
28d7c     10 1E 86 F1 | 	sub	local01, #16
28d80     20 24 06 F1 | 	add	local04, #32
28d84     00 10 00 FF 
28d88     00 24 16 F2 | 	cmp	local04, ##2097152 wc
28d8c     18 1E 06 31 |  if_ae	add	local01, #24
28d90     0F 01 68 3C |  if_ae	wrlong	#0, local01
28d94     18 1E 86 31 |  if_ae	sub	local01, #24
28d98     18 1E 06 F1 | 	add	local01, #24
28d9c     0F 15 0A FB | 	rdlong	arg02, local01 wz
28da0     18 1E 86 F1 | 	sub	local01, #24
28da4     04 FA 05 A6 |  if_e	mov	result1, #4
28da8     64 01 90 AD |  if_e	jmp	#LR__4215
28dac     FF 25 CE F7 | 	test	local04, #511 wz
28db0     3C 01 90 5D |  if_ne	jmp	#LR__4214
28db4     18 1E 06 F1 | 	add	local01, #24
28db8     0F 15 02 FB | 	rdlong	arg02, local01
28dbc     01 14 06 F1 | 	add	arg02, #1
28dc0     0F 15 62 FC | 	wrlong	arg02, local01
28dc4     04 1E 86 F1 | 	sub	local01, #4
28dc8     0F 15 0A FB | 	rdlong	arg02, local01 wz
28dcc     14 1E 86 F1 | 	sub	local01, #20
28dd0     2C 00 90 5D |  if_ne	jmp	#LR__4210
28dd4     12 15 02 F6 | 	mov	arg02, local04
28dd8     05 14 46 F0 | 	shr	arg02, #5
28ddc     08 22 06 F1 | 	add	local03, #8
28de0     11 21 E2 FA | 	rdword	local02, local03
28de4     08 22 86 F1 | 	sub	local03, #8
28de8     10 15 12 F2 | 	cmp	arg02, local02 wc
28dec     18 1E 06 31 |  if_ae	add	local01, #24
28df0     0F 01 68 3C |  if_ae	wrlong	#0, local01
28df4                 | ' 				dp->sect = 0; return FR_NO_FILE;
28df4     04 FA 05 36 |  if_ae	mov	result1, #4
28df8     14 01 90 3D |  if_ae	jmp	#LR__4215
28dfc     F0 00 90 FD | 	jmp	#LR__4213
28e00                 | LR__4210
28e00     12 13 02 F6 | 	mov	arg01, local04
28e04     09 12 46 F0 | 	shr	arg01, #9
28e08     0A 22 06 F1 | 	add	local03, #10
28e0c     11 15 E2 FA | 	rdword	arg02, local03
28e10     0A 22 86 F1 | 	sub	local03, #10
28e14     01 14 86 F1 | 	sub	arg02, #1
28e18     0A 13 CA F7 | 	test	arg01, arg02 wz
28e1c     D0 00 90 5D |  if_ne	jmp	#LR__4212
28e20     0F 13 02 F6 | 	mov	arg01, local01
28e24     14 1E 06 F1 | 	add	local01, #20
28e28     0F 15 02 FB | 	rdlong	arg02, local01
28e2c     14 1E 86 F1 | 	sub	local01, #20
28e30     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
28e34     FD 26 02 F6 | 	mov	local05, result1
28e38     02 26 16 F2 | 	cmp	local05, #2 wc
28e3c     02 FA 05 C6 |  if_b	mov	result1, #2
28e40     CC 00 90 CD |  if_b	jmp	#LR__4215
28e44     FF FF 7F FF 
28e48     FF 27 0E F2 | 	cmp	local05, ##-1 wz
28e4c     01 FA 05 A6 |  if_e	mov	result1, #1
28e50     BC 00 90 AD |  if_e	jmp	#LR__4215
28e54     18 22 06 F1 | 	add	local03, #24
28e58     11 15 02 FB | 	rdlong	arg02, local03
28e5c     18 22 86 F1 | 	sub	local03, #24
28e60     0A 27 12 F2 | 	cmp	local05, arg02 wc
28e64     68 00 90 CD |  if_b	jmp	#LR__4211
28e68     00 20 0E F2 | 	cmp	local02, #0 wz
28e6c     18 1E 06 A1 |  if_e	add	local01, #24
28e70     0F 01 68 AC |  if_e	wrlong	#0, local01
28e74                 | ' 						dp->sect = 0; return FR_NO_FILE;
28e74     04 FA 05 A6 |  if_e	mov	result1, #4
28e78     94 00 90 AD |  if_e	jmp	#LR__4215
28e7c     0F 13 02 F6 | 	mov	arg01, local01
28e80     14 1E 06 F1 | 	add	local01, #20
28e84     0F 15 02 FB | 	rdlong	arg02, local01
28e88     14 1E 86 F1 | 	sub	local01, #20
28e8c     84 FA BF FD | 	call	#_fatfs_cc_create_chain
28e90     FD 26 0A F6 | 	mov	local05, result1 wz
28e94     07 FA 05 A6 |  if_e	mov	result1, #7
28e98     74 00 90 AD |  if_e	jmp	#LR__4215
28e9c     01 26 0E F2 | 	cmp	local05, #1 wz
28ea0     02 FA 05 A6 |  if_e	mov	result1, #2
28ea4     68 00 90 AD |  if_e	jmp	#LR__4215
28ea8     FF FF 7F FF 
28eac     FF 27 0E F2 | 	cmp	local05, ##-1 wz
28eb0     01 FA 05 A6 |  if_e	mov	result1, #1
28eb4     58 00 90 AD |  if_e	jmp	#LR__4215
28eb8     13 15 02 F6 | 	mov	arg02, local05
28ebc     11 13 02 F6 | 	mov	arg01, local03
28ec0     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
28ec4     00 FA 0D F2 | 	cmp	result1, #0 wz
28ec8     01 FA 05 56 |  if_ne	mov	result1, #1
28ecc     40 00 90 5D |  if_ne	jmp	#LR__4215
28ed0                 | LR__4211
28ed0     14 1E 06 F1 | 	add	local01, #20
28ed4     0F 27 62 FC | 	wrlong	local05, local01
28ed8     11 13 02 F6 | 	mov	arg01, local03
28edc     13 15 02 F6 | 	mov	arg02, local05
28ee0     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
28ee4     04 1E 06 F1 | 	add	local01, #4
28ee8     0F FB 61 FC | 	wrlong	result1, local01
28eec     18 1E 86 F1 | 	sub	local01, #24
28ef0                 | LR__4212
28ef0                 | LR__4213
28ef0                 | LR__4214
28ef0     10 1E 06 F1 | 	add	local01, #16
28ef4     0F 25 62 FC | 	wrlong	local04, local01
28ef8     34 22 06 F1 | 	add	local03, #52
28efc     FF 25 06 F5 | 	and	local04, #511
28f00     12 23 02 F1 | 	add	local03, local04
28f04     0C 1E 06 F1 | 	add	local01, #12
28f08     0F 23 62 FC | 	wrlong	local03, local01
28f0c                 | ' #line 1771 "ff.c"
28f0c                 | ' 				}
28f0c                 | ' 				dp->clust = clst;
28f0c                 | ' 				dp->sect = clst2sect(fs, clst);
28f0c                 | ' 			}
28f0c                 | ' 		}
28f0c                 | ' 	}
28f0c                 | ' 	dp->dptr = ofs;
28f0c                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
28f0c                 | ' 
28f0c                 | ' 	return FR_OK;
28f0c     00 FA 05 F6 | 	mov	result1, #0
28f10                 | LR__4215
28f10     A7 F0 03 F6 | 	mov	ptra, fp
28f14     B2 00 A0 FD | 	call	#popregs_
28f18                 | _fatfs_cc_dir_next_ret
28f18     2D 00 64 FD | 	ret
28f1c                 | 
28f1c                 | _fatfs_cc_dir_alloc
28f1c     08 4A 05 F6 | 	mov	COUNT_, #8
28f20     A8 00 A0 FD | 	call	#pushregs_
28f24     09 1F 02 F6 | 	mov	local01, arg01
28f28     0A 21 02 F6 | 	mov	local02, arg02
28f2c     0F 23 02 FB | 	rdlong	local03, local01
28f30     0F 13 02 F6 | 	mov	arg01, local01
28f34     00 14 06 F6 | 	mov	arg02, #0
28f38     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
28f3c     FD 24 0A F6 | 	mov	local04, result1 wz
28f40     70 00 90 5D |  if_ne	jmp	#LR__4224
28f44     00 26 06 F6 | 	mov	local05, #0
28f48                 | ' 		n = 0;
28f48                 | ' 		do {
28f48                 | LR__4220
28f48     18 1E 06 F1 | 	add	local01, #24
28f4c     0F 15 02 FB | 	rdlong	arg02, local01
28f50     18 1E 86 F1 | 	sub	local01, #24
28f54     11 13 02 F6 | 	mov	arg01, local03
28f58     38 F3 BF FD | 	call	#_fatfs_cc_move_window
28f5c     FD 24 0A F6 | 	mov	local04, result1 wz
28f60     50 00 90 5D |  if_ne	jmp	#LR__4223
28f64     1C 1E 06 F1 | 	add	local01, #28
28f68     0F 29 02 FB | 	rdlong	local06, local01
28f6c     1C 1E 86 F1 | 	sub	local01, #28
28f70     14 29 C2 FA | 	rdbyte	local06, local06
28f74     E5 28 0E F2 | 	cmp	local06, #229 wz
28f78     1C 1E 06 51 |  if_ne	add	local01, #28
28f7c     0F 2B 02 5B |  if_ne	rdlong	local07, local01
28f80     1C 1E 86 51 |  if_ne	sub	local01, #28
28f84     15 2D CA 5A |  if_ne	rdbyte	local08, local07 wz
28f88     10 00 90 5D |  if_ne	jmp	#LR__4221
28f8c     01 26 06 F1 | 	add	local05, #1
28f90     10 27 0A F2 | 	cmp	local05, local02 wz
28f94     1C 00 90 AD |  if_e	jmp	#LR__4223
28f98     04 00 90 FD | 	jmp	#LR__4222
28f9c                 | LR__4221
28f9c     00 26 06 F6 | 	mov	local05, #0
28fa0                 | LR__4222
28fa0     0F 13 02 F6 | 	mov	arg01, local01
28fa4     01 14 06 F6 | 	mov	arg02, #1
28fa8     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
28fac     FD 24 0A F6 | 	mov	local04, result1 wz
28fb0     94 FF 9F AD |  if_e	jmp	#LR__4220
28fb4                 | LR__4223
28fb4                 | LR__4224
28fb4     04 24 0E F2 | 	cmp	local04, #4 wz
28fb8     07 24 06 A6 |  if_e	mov	local04, #7
28fbc                 | ' 	return res;
28fbc     12 FB 01 F6 | 	mov	result1, local04
28fc0     A7 F0 03 F6 | 	mov	ptra, fp
28fc4     B2 00 A0 FD | 	call	#popregs_
28fc8                 | _fatfs_cc_dir_alloc_ret
28fc8     2D 00 64 FD | 	ret
28fcc                 | 
28fcc                 | _fatfs_cc_ld_clust
28fcc     09 01 02 F6 | 	mov	_var01, arg01
28fd0     0A 13 02 F6 | 	mov	arg01, arg02
28fd4     1A 12 06 F1 | 	add	arg01, #26
28fd8                 | ' {
28fd8                 | ' 
28fd8                 | ' 	return *((WORD*)ptr);
28fd8     09 FB E1 FA | 	rdword	result1, arg01
28fdc     FD 12 32 F9 | 	getword	arg01, result1, #0
28fe0     00 01 C2 FA | 	rdbyte	_var01, _var01
28fe4     03 00 0E F2 | 	cmp	_var01, #3 wz
28fe8     14 14 06 A1 |  if_e	add	arg02, #20
28fec                 | ' {
28fec                 | ' 
28fec                 | ' 	return *((WORD*)ptr);
28fec     0A FB E1 AA |  if_e	rdword	result1, arg02
28ff0     10 FA 65 A0 |  if_e	shl	result1, #16
28ff4     FD 12 42 A5 |  if_e	or	arg01, result1
28ff8                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
28ff8                 | ' 	}
28ff8                 | ' 
28ff8                 | ' 	return cl;
28ff8     09 FB 01 F6 | 	mov	result1, arg01
28ffc                 | _fatfs_cc_ld_clust_ret
28ffc     2D 00 64 FD | 	ret
29000                 | 
29000                 | _fatfs_cc_st_clust
29000     09 01 02 F6 | 	mov	_var01, arg01
29004     0A 13 02 F6 | 	mov	arg01, arg02
29008     1A 12 06 F1 | 	add	arg01, #26
2900c     09 17 52 FC | 	wrword	arg03, arg01
29010     00 01 C2 FA | 	rdbyte	_var01, _var01
29014     03 00 0E F2 | 	cmp	_var01, #3 wz
29018     14 14 06 A1 |  if_e	add	arg02, #20
2901c     10 16 46 A0 |  if_e	shr	arg03, #16
29020     0A 17 52 AC |  if_e	wrword	arg03, arg02
29024                 | _fatfs_cc_st_clust_ret
29024     2D 00 64 FD | 	ret
29028                 | 
29028                 | _fatfs_cc_cmp_lfn
29028     07 4A 05 F6 | 	mov	COUNT_, #7
2902c     A8 00 A0 FD | 	call	#pushregs_
29030     09 1F 02 F6 | 	mov	local01, arg01
29034     0A 13 02 F6 | 	mov	arg01, arg02
29038     1A 12 06 F1 | 	add	arg01, #26
2903c                 | ' {
2903c                 | ' 
2903c                 | ' 	return *((WORD*)ptr);
2903c     09 FB E9 FA | 	rdword	result1, arg01 wz
29040     00 FA 05 56 |  if_ne	mov	result1, #0
29044     E0 00 90 5D |  if_ne	jmp	#LR__4236
29048     0A 21 C2 FA | 	rdbyte	local02, arg02
2904c     3F 20 06 F5 | 	and	local02, #63
29050     01 20 86 F1 | 	sub	local02, #1
29054     0D 20 06 FD | 	qmul	local02, #13
29058                 | ' 
29058                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
29058                 | ' 
29058                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
29058     01 22 06 F6 | 	mov	local03, #1
2905c     00 24 06 F6 | 	mov	local04, #0
29060     18 26 62 FD | 	getqx	local05
29064                 | LR__4230
29064     0D 24 16 F2 | 	cmp	local04, #13 wc
29068     9C 00 90 3D |  if_ae	jmp	#LR__4235
2906c     0A 13 02 F6 | 	mov	arg01, arg02
29070     12 21 02 F6 | 	mov	local02, local04
29074     01 00 00 FF 
29078     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2907c     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
29080     10 21 C2 FA | 	rdbyte	local02, local02
29084     01 20 06 FA | 	mul	local02, #1
29088     10 13 02 F1 | 	add	arg01, local02
2908c     01 00 00 FF 
29090     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
29094                 | ' {
29094                 | ' 
29094                 | ' 	return *((WORD*)ptr);
29094     09 FB E1 FA | 	rdword	result1, arg01
29098     FD 28 02 F6 | 	mov	local06, result1
2909c     11 21 02 F6 | 	mov	local02, local03
290a0     0F 20 4E F7 | 	zerox	local02, #15 wz
290a4     44 00 90 AD |  if_e	jmp	#LR__4233
290a8     00 27 16 F2 | 	cmp	local05, #256 wc
290ac     2C 00 90 3D |  if_ae	jmp	#LR__4231
290b0     14 13 32 F9 | 	getword	arg01, local06, #0
290b4     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
290b8     FD 20 02 F6 | 	mov	local02, result1
290bc     13 23 02 F6 | 	mov	local03, local05
290c0     01 22 66 F0 | 	shl	local03, #1
290c4     0F 23 02 F1 | 	add	local03, local01
290c8     11 13 E2 FA | 	rdword	arg01, local03
290cc     01 26 06 F1 | 	add	local05, #1
290d0     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
290d4     FD 20 0A F2 | 	cmp	local02, result1 wz
290d8     08 00 90 AD |  if_e	jmp	#LR__4232
290dc                 | LR__4231
290dc                 | ' 				return 0;
290dc     00 FA 05 F6 | 	mov	result1, #0
290e0     44 00 90 FD | 	jmp	#LR__4236
290e4                 | LR__4232
290e4     14 23 02 F6 | 	mov	local03, local06
290e8     14 00 90 FD | 	jmp	#LR__4234
290ec                 | LR__4233
290ec     14 29 32 F9 | 	getword	local06, local06, #0
290f0     7F 00 00 FF 
290f4     FF 29 0E F2 | 	cmp	local06, ##65535 wz
290f8     00 FA 05 56 |  if_ne	mov	result1, #0
290fc     28 00 90 5D |  if_ne	jmp	#LR__4236
29100                 | LR__4234
29100     01 24 06 F1 | 	add	local04, #1
29104     5C FF 9F FD | 	jmp	#LR__4230
29108                 | LR__4235
29108     0A 21 C2 FA | 	rdbyte	local02, arg02
2910c     40 20 CE F7 | 	test	local02, #64 wz
29110     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
29114     01 26 66 50 |  if_ne	shl	local05, #1
29118     0F 27 02 51 |  if_ne	add	local05, local01
2911c     13 2B EA 5A |  if_ne	rdword	local07, local05 wz
29120     00 FA 05 56 |  if_ne	mov	result1, #0
29124                 | ' 
29124                 | ' 	return 1;
29124     01 FA 05 A6 |  if_e	mov	result1, #1
29128                 | LR__4236
29128     A7 F0 03 F6 | 	mov	ptra, fp
2912c     B2 00 A0 FD | 	call	#popregs_
29130                 | _fatfs_cc_cmp_lfn_ret
29130     2D 00 64 FD | 	ret
29134                 | 
29134                 | _fatfs_cc_pick_lfn
29134     09 01 02 F6 | 	mov	_var01, arg01
29138     0A 13 02 F6 | 	mov	arg01, arg02
2913c     1A 12 06 F1 | 	add	arg01, #26
29140                 | ' {
29140                 | ' 
29140                 | ' 	return *((WORD*)ptr);
29140     09 FB E9 FA | 	rdword	result1, arg01 wz
29144     00 FA 05 56 |  if_ne	mov	result1, #0
29148     D4 00 90 5D |  if_ne	jmp	#LR__4245
2914c     0A 03 C2 FA | 	rdbyte	_var02, arg02
29150     40 02 26 F5 | 	andn	_var02, #64
29154     01 02 86 F1 | 	sub	_var02, #1
29158     0D 02 06 FD | 	qmul	_var02, #13
2915c                 | ' 
2915c                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
2915c                 | ' 
2915c                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
2915c     01 04 06 F6 | 	mov	_var03, #1
29160     00 06 06 F6 | 	mov	_var04, #0
29164     18 08 62 FD | 	getqx	_var05
29168                 | LR__4240
29168     0D 06 16 F2 | 	cmp	_var04, #13 wc
2916c     80 00 90 3D |  if_ae	jmp	#LR__4243
29170     0A 13 02 F6 | 	mov	arg01, arg02
29174     03 03 02 F6 | 	mov	_var02, _var04
29178     01 00 00 FF 
2917c     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
29180     F6 02 02 F1 | 	add	_var02, ptr__fatfs_cc_dat__
29184     01 03 C2 FA | 	rdbyte	_var02, _var02
29188     01 02 06 FA | 	mul	_var02, #1
2918c     01 13 02 F1 | 	add	arg01, _var02
29190     01 00 00 FF 
29194     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
29198                 | ' {
29198                 | ' 
29198                 | ' 	return *((WORD*)ptr);
29198     09 FB E1 FA | 	rdword	result1, arg01
2919c     FD 0A 02 F6 | 	mov	_var06, result1
291a0     02 03 02 F6 | 	mov	_var02, _var03
291a4     0F 02 4E F7 | 	zerox	_var02, #15 wz
291a8     28 00 90 AD |  if_e	jmp	#LR__4241
291ac     00 09 16 F2 | 	cmp	_var05, #256 wc
291b0     00 FA 05 36 |  if_ae	mov	result1, #0
291b4     68 00 90 3D |  if_ae	jmp	#LR__4245
291b8     04 03 02 F6 | 	mov	_var02, _var05
291bc     01 02 66 F0 | 	shl	_var02, #1
291c0     00 03 02 F1 | 	add	_var02, _var01
291c4     05 05 02 F6 | 	mov	_var03, _var06
291c8     01 05 52 FC | 	wrword	_var03, _var02
291cc     01 08 06 F1 | 	add	_var05, #1
291d0     14 00 90 FD | 	jmp	#LR__4242
291d4                 | LR__4241
291d4     05 0B 32 F9 | 	getword	_var06, _var06, #0
291d8     7F 00 00 FF 
291dc     FF 0B 0E F2 | 	cmp	_var06, ##65535 wz
291e0     00 FA 05 56 |  if_ne	mov	result1, #0
291e4     38 00 90 5D |  if_ne	jmp	#LR__4245
291e8                 | LR__4242
291e8     01 06 06 F1 | 	add	_var04, #1
291ec     78 FF 9F FD | 	jmp	#LR__4240
291f0                 | LR__4243
291f0     0A 03 C2 FA | 	rdbyte	_var02, arg02
291f4     40 02 CE F7 | 	test	_var02, #64 wz
291f8     02 0D 02 56 |  if_ne	mov	_var07, _var03
291fc     0F 0C 4E 57 |  if_ne	zerox	_var07, #15 wz
29200     18 00 90 AD |  if_e	jmp	#LR__4244
29204     00 09 16 F2 | 	cmp	_var05, #256 wc
29208     00 FA 05 36 |  if_ae	mov	result1, #0
2920c     10 00 90 3D |  if_ae	jmp	#LR__4245
29210     01 08 66 F0 | 	shl	_var05, #1
29214     00 09 02 F1 | 	add	_var05, _var01
29218     04 01 58 FC | 	wrword	#0, _var05
2921c                 | LR__4244
2921c                 | ' 		lfnbuf[i] = 0;
2921c                 | ' 	}
2921c                 | ' 
2921c                 | ' 	return 1;
2921c     01 FA 05 F6 | 	mov	result1, #1
29220                 | LR__4245
29220                 | _fatfs_cc_pick_lfn_ret
29220     2D 00 64 FD | 	ret
29224                 | 
29224                 | _fatfs_cc_put_lfn
29224     0D 14 06 F1 | 	add	arg02, #13
29228     0A 19 42 FC | 	wrbyte	arg04, arg02
2922c     0B 19 E2 F8 | 	getbyte	arg04, arg03, #0
29230     01 18 86 F1 | 	sub	arg04, #1
29234     0D 18 06 FD | 	qmul	arg04, #13
29238     09 01 02 F6 | 	mov	_var01, arg01
2923c     02 14 86 F1 | 	sub	arg02, #2
29240     0A 1F 48 FC | 	wrbyte	#15, arg02
29244     01 14 06 F1 | 	add	arg02, #1
29248     0A 01 48 FC | 	wrbyte	#0, arg02
2924c     0C 14 86 F1 | 	sub	arg02, #12
29250     0A 13 02 F6 | 	mov	arg01, arg02
29254     1A 12 06 F1 | 	add	arg01, #26
29258     09 01 58 FC | 	wrword	#0, arg01
2925c     00 02 06 F6 | 	mov	_var02, #0
29260     00 04 06 F6 | 	mov	_var03, #0
29264                 | ' 	BYTE* dir,
29264                 | ' 	BYTE ord,
29264                 | ' 	BYTE sum
29264                 | ' )
29264                 | ' {
29264                 | ' 	UINT i, s;
29264                 | ' 	WCHAR wc;
29264                 | ' 
29264                 | ' 
29264                 | ' 	dir[ 13 ] = sum;
29264                 | ' 	dir[ 11 ] =  0x0F ;
29264                 | ' 	dir[ 12 ] = 0;
29264                 | ' 	st_word(dir +  26 , 0);
29264                 | ' 
29264                 | ' 	i = (ord - 1) * 13;
29264                 | ' 	s = wc = 0;
29264                 | ' 	do {
29264     01 00 00 FF 
29268     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2926c     18 06 62 FD | 	getqx	_var04
29270     97 2A 48 FB | 	callpa	#(@LR__4251-@LR__4250)>>2,fcache_load_ptr_
29274                 | LR__4250
29274     01 19 32 F9 | 	getword	arg04, _var02, #0
29278     7F 00 00 FF 
2927c     FF 19 0E F2 | 	cmp	arg04, ##65535 wz
29280     03 13 02 56 |  if_ne	mov	arg01, _var04
29284     01 06 06 51 |  if_ne	add	_var04, #1
29288     01 12 66 50 |  if_ne	shl	arg01, #1
2928c     00 13 02 51 |  if_ne	add	arg01, _var01
29290     09 03 E2 5A |  if_ne	rdword	_var02, arg01
29294     0A 13 02 F6 | 	mov	arg01, arg02
29298     02 19 02 F6 | 	mov	arg04, _var03
2929c     F6 18 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
292a0     0C 19 C2 FA | 	rdbyte	arg04, arg04
292a4     01 18 06 FA | 	mul	arg04, #1
292a8     0C 13 02 F1 | 	add	arg01, arg04
292ac     09 03 52 FC | 	wrword	_var02, arg01
292b0     01 19 02 F6 | 	mov	arg04, _var02
292b4     0F 18 4E F7 | 	zerox	arg04, #15 wz
292b8     0F 02 CE A9 |  if_e	bmask	_var02, #15
292bc     01 04 06 F1 | 	add	_var03, #1
292c0     0D 04 16 F2 | 	cmp	_var03, #13 wc
292c4     AC FF 9F CD |  if_b	jmp	#LR__4250
292c8                 | LR__4251
292c8     01 00 00 FF 
292cc     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
292d0     01 03 32 F9 | 	getword	_var02, _var02, #0
292d4     7F 00 00 FF 
292d8     FF 03 0E F2 | 	cmp	_var02, ##65535 wz
292dc     01 06 66 50 |  if_ne	shl	_var04, #1
292e0     00 07 02 51 |  if_ne	add	_var04, _var01
292e4     03 07 EA 5A |  if_ne	rdword	_var04, _var04 wz
292e8     0B 17 E2 A8 |  if_e	getbyte	arg03, arg03, #0
292ec     40 16 46 A5 |  if_e	or	arg03, #64
292f0     0A 17 42 FC | 	wrbyte	arg03, arg02
292f4                 | _fatfs_cc_put_lfn_ret
292f4     2D 00 64 FD | 	ret
292f8                 | 
292f8                 | _fatfs_cc_gen_numname
292f8     08 4A 05 F6 | 	mov	COUNT_, #8
292fc     A8 00 A0 FD | 	call	#pushregs_
29300     2C F0 07 F1 | 	add	ptra, #44
29304     09 1F 02 F6 | 	mov	local01, arg01
29308     0A 21 02 F6 | 	mov	local02, arg02
2930c     0B 23 02 F6 | 	mov	local03, arg03
29310     0C 25 02 F6 | 	mov	local04, arg04
29314     0F 13 02 F6 | 	mov	arg01, local01
29318     10 15 02 F6 | 	mov	arg02, local02
2931c     0B 16 06 F6 | 	mov	arg03, #11
29320     60 75 BF FD | 	call	#__system____builtin_memmove
29324     06 24 16 F2 | 	cmp	local04, #6 wc
29328     48 00 90 CD |  if_b	jmp	#LR__4265
2932c     12 27 02 F6 | 	mov	local05, local04
29330     97 1E 48 FB | 	callpa	#(@LR__4263-@LR__4260)>>2,fcache_load_ptr_
29334                 | ' 		sreg = seq;
29334                 | ' 		while (*lfn) {
29334                 | LR__4260
29334     11 29 EA FA | 	rdword	local06, local03 wz
29338     34 00 90 AD |  if_e	jmp	#LR__4264
2933c     11 2B E2 FA | 	rdword	local07, local03
29340                 | ' 			wc = *lfn++;
29340                 | ' 			for (i = 0; i < 16; i++) {
29340     02 22 06 F1 | 	add	local03, #2
29344     10 12 DC FC | 	rep	@LR__4262, #16
29348                 | LR__4261
29348     01 26 66 F0 | 	shl	local05, #1
2934c     15 29 32 F9 | 	getword	local06, local07, #0
29350     01 28 06 F5 | 	and	local06, #1
29354     14 27 02 F1 | 	add	local05, local06
29358     15 2B 32 F9 | 	getword	local07, local07, #0
2935c     01 2A 46 F0 | 	shr	local07, #1
29360     10 26 2E F4 | 	testbn	local05, #16 wz
29364     88 00 00 5F 
29368     21 26 66 55 |  if_ne	xor	local05, ##69665
2936c                 | LR__4262
2936c     C4 FF 9F FD | 	jmp	#LR__4260
29370                 | LR__4263
29370                 | LR__4264
29370     13 25 02 F6 | 	mov	local04, local05
29374                 | LR__4265
29374     07 2A 06 F6 | 	mov	local07, #7
29378                 | ' 			}
29378                 | ' 		}
29378                 | ' 		seq = (UINT)sreg;
29378                 | ' 	}
29378                 | ' 
29378                 | ' 
29378                 | ' 	i = 7;
29378                 | ' 	do {
29378     10 4E 05 F1 | 	add	fp, #16
2937c     97 1A 48 FB | 	callpa	#(@LR__4267-@LR__4266)>>2,fcache_load_ptr_
29380                 | LR__4266
29380     12 27 42 F8 | 	getnib	local05, local04, #0
29384     30 26 06 F1 | 	add	local05, #48
29388     04 24 46 F0 | 	shr	local04, #4
2938c     13 29 E2 F8 | 	getbyte	local06, local05, #0
29390     3A 28 16 F2 | 	cmp	local06, #58 wc
29394     13 27 E2 38 |  if_ae	getbyte	local05, local05, #0
29398     07 26 06 31 |  if_ae	add	local05, #7
2939c     15 29 02 F6 | 	mov	local06, local07
293a0     01 2A 8E F1 | 	sub	local07, #1 wz
293a4     A7 28 02 F1 | 	add	local06, fp
293a8     14 27 42 FC | 	wrbyte	local05, local06
293ac     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
293b0     CC FF 9F 5D |  if_ne	jmp	#LR__4266
293b4                 | LR__4267
293b4     15 29 02 F6 | 	mov	local06, local07
293b8     A7 28 02 F1 | 	add	local06, fp
293bc     14 FD 48 FC | 	wrbyte	#126, local06
293c0                 | ' 	ns[i] = '~';
293c0                 | ' 
293c0                 | ' 
293c0                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
293c0     00 26 06 F6 | 	mov	local05, #0
293c4     10 4E 85 F1 | 	sub	fp, #16
293c8     97 2A 48 FB | 	callpa	#(@LR__4270-@LR__4268)>>2,fcache_load_ptr_
293cc                 | LR__4268
293cc     15 27 12 F2 | 	cmp	local05, local07 wc
293d0     4C 00 90 3D |  if_ae	jmp	#LR__4271
293d4     13 29 02 F6 | 	mov	local06, local05
293d8     0F 29 02 F1 | 	add	local06, local01
293dc     14 29 C2 FA | 	rdbyte	local06, local06
293e0     20 28 0E F2 | 	cmp	local06, #32 wz
293e4     38 00 90 AD |  if_e	jmp	#LR__4271
293e8     13 13 02 F6 | 	mov	arg01, local05
293ec     0F 13 02 F1 | 	add	arg01, local01
293f0     09 13 CA FA | 	rdbyte	arg01, arg01 wz
293f4     00 FA 05 56 |  if_ne	mov	result1, #0
293f8                 | ' 
293f8                 | ' 	return 0;
293f8     00 FA 05 A6 |  if_e	mov	result1, #0
293fc     00 FA 0D F2 | 	cmp	result1, #0 wz
29400     14 00 90 AD |  if_e	jmp	#LR__4269
29404     15 29 02 F6 | 	mov	local06, local07
29408     01 28 86 F1 | 	sub	local06, #1
2940c     14 27 0A F2 | 	cmp	local05, local06 wz
29410     0C 00 90 AD |  if_e	jmp	#LR__4271
29414     01 26 06 F1 | 	add	local05, #1
29418                 | LR__4269
29418     01 26 06 F1 | 	add	local05, #1
2941c     AC FF 9F FD | 	jmp	#LR__4268
29420                 | LR__4270
29420                 | LR__4271
29420     97 20 48 FB | 	callpa	#(@LR__4275-@LR__4272)>>2,fcache_load_ptr_
29424                 | ' 			j++;
29424                 | ' 		}
29424                 | ' 	}
29424                 | ' 	do {
29424                 | LR__4272
29424     13 29 02 F6 | 	mov	local06, local05
29428     0F 29 02 F1 | 	add	local06, local01
2942c     08 2A 16 F2 | 	cmp	local07, #8 wc
29430     01 26 06 F1 | 	add	local05, #1
29434     1C 00 90 3D |  if_ae	jmp	#LR__4273
29438     15 25 02 F6 | 	mov	local04, local07
2943c     10 4E 05 F1 | 	add	fp, #16
29440     A7 24 02 F1 | 	add	local04, fp
29444     12 2D C2 FA | 	rdbyte	local08, local04
29448     01 2A 06 F1 | 	add	local07, #1
2944c     10 4E 85 F1 | 	sub	fp, #16
29450     04 00 90 FD | 	jmp	#LR__4274
29454                 | LR__4273
29454     20 2C 06 F6 | 	mov	local08, #32
29458                 | LR__4274
29458     14 2D 42 FC | 	wrbyte	local08, local06
2945c     08 26 16 F2 | 	cmp	local05, #8 wc
29460     C0 FF 9F CD |  if_b	jmp	#LR__4272
29464                 | LR__4275
29464     A7 F0 03 F6 | 	mov	ptra, fp
29468     B2 00 A0 FD | 	call	#popregs_
2946c                 | _fatfs_cc_gen_numname_ret
2946c     2D 00 64 FD | 	ret
29470                 | 
29470                 | _fatfs_cc_sum_sfn
29470     00 00 06 F6 | 	mov	_var01, #0
29474                 | ' )
29474                 | ' {
29474                 | ' 	BYTE sum = 0;
29474                 | ' 	UINT n = 11;
29474                 | ' 
29474                 | ' 	do {
29474     97 12 48 FB | 	callpa	#(@LR__4282-@LR__4280)>>2,fcache_load_ptr_
29478                 | LR__4280
29478     0B 10 DC FC | 	rep	@LR__4283, #11
2947c                 | LR__4281
2947c     00 FB E1 F8 | 	getbyte	result1, _var01, #0
29480     01 FA 45 F0 | 	shr	result1, #1
29484     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
29488     07 00 66 F0 | 	shl	_var01, #7
2948c     00 FB 01 F1 | 	add	result1, _var01
29490     09 01 C2 FA | 	rdbyte	_var01, arg01
29494     FD 00 02 F1 | 	add	_var01, result1
29498     01 12 06 F1 | 	add	arg01, #1
2949c                 | LR__4282
2949c                 | LR__4283
2949c                 | ' 	return sum;
2949c     00 FB 01 F6 | 	mov	result1, _var01
294a0                 | _fatfs_cc_sum_sfn_ret
294a0     2D 00 64 FD | 	ret
294a4                 | 
294a4                 | _fatfs_cc_dir_read
294a4     0C 4A 05 F6 | 	mov	COUNT_, #12
294a8     A8 00 A0 FD | 	call	#pushregs_
294ac     09 1F 02 F6 | 	mov	local01, arg01
294b0     0A 21 02 F6 | 	mov	local02, arg02
294b4     04 22 06 F6 | 	mov	local03, #4
294b8     0F 25 02 FB | 	rdlong	local04, local01
294bc     FF 26 06 F6 | 	mov	local05, #255
294c0     FF 28 06 F6 | 	mov	local06, #255
294c4                 | ' )
294c4                 | ' {
294c4                 | ' 	FRESULT res = FR_NO_FILE;
294c4                 | ' 	FATFS *fs = dp->obj.fs;
294c4                 | ' 	BYTE attr, b;
294c4                 | ' 
294c4                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
294c4                 | ' 
294c4                 | ' 
294c4                 | ' 	while (dp->sect) {
294c4                 | LR__4290
294c4     18 1E 06 F1 | 	add	local01, #24
294c8     0F FB 09 FB | 	rdlong	result1, local01 wz
294cc     18 1E 86 F1 | 	sub	local01, #24
294d0     AC 01 90 AD |  if_e	jmp	#LR__4300
294d4     18 1E 06 F1 | 	add	local01, #24
294d8     0F 15 02 FB | 	rdlong	arg02, local01
294dc     18 1E 86 F1 | 	sub	local01, #24
294e0     12 13 02 F6 | 	mov	arg01, local04
294e4     AC ED BF FD | 	call	#_fatfs_cc_move_window
294e8     FD 22 0A F6 | 	mov	local03, result1 wz
294ec     90 01 90 5D |  if_ne	jmp	#LR__4300
294f0     1C 1E 06 F1 | 	add	local01, #28
294f4     0F FB 01 FB | 	rdlong	result1, local01
294f8     1C 1E 86 F1 | 	sub	local01, #28
294fc     FD 2A C2 FA | 	rdbyte	local07, result1
29500     15 FB 01 F6 | 	mov	result1, local07
29504     07 FA 4D F7 | 	zerox	result1, #7 wz
29508     04 22 06 A6 |  if_e	mov	local03, #4
2950c                 | ' 			res = FR_NO_FILE; break;
2950c     70 01 90 AD |  if_e	jmp	#LR__4300
29510     1C 1E 06 F1 | 	add	local01, #28
29514     0F 2D 02 FB | 	rdlong	local08, local01
29518     0B 2C 06 F1 | 	add	local08, #11
2951c     16 2F C2 FA | 	rdbyte	local09, local08
29520     3F 2E 06 F5 | 	and	local09, #63
29524     16 1E 86 F1 | 	sub	local01, #22
29528     0F 2F 42 FC | 	wrbyte	local09, local01
2952c     06 1E 86 F1 | 	sub	local01, #6
29530     15 FB E1 F8 | 	getbyte	result1, local07, #0
29534     E5 FA 0D F2 | 	cmp	result1, #229 wz
29538     15 2D 02 56 |  if_ne	mov	local08, local07
2953c     16 2D E2 58 |  if_ne	getbyte	local08, local08, #0
29540     2E 2C 0E 52 |  if_ne	cmp	local08, #46 wz
29544     1C 00 90 AD |  if_e	jmp	#LR__4291
29548     00 30 06 F6 | 	mov	local10, #0
2954c     17 2D E2 F8 | 	getbyte	local08, local09, #0
29550     20 2C 26 F5 | 	andn	local08, #32
29554     08 2C 0E F2 | 	cmp	local08, #8 wz
29558     01 30 06 A6 |  if_e	mov	local10, #1
2955c     10 31 0A F2 | 	cmp	local10, local02 wz
29560     08 00 90 AD |  if_e	jmp	#LR__4292
29564                 | LR__4291
29564     FF 26 06 F6 | 	mov	local05, #255
29568     00 01 90 FD | 	jmp	#LR__4299
2956c                 | LR__4292
2956c     17 2F E2 F8 | 	getbyte	local09, local09, #0
29570     0F 2E 0E F2 | 	cmp	local09, #15 wz
29574     B4 00 90 5D |  if_ne	jmp	#LR__4296
29578     15 33 E2 F8 | 	getbyte	local11, local07, #0
2957c     40 32 CE F7 | 	test	local11, #64 wz
29580     30 00 90 AD |  if_e	jmp	#LR__4293
29584     1C 1E 06 F1 | 	add	local01, #28
29588     0F 33 02 FB | 	rdlong	local11, local01
2958c     0D 32 06 F1 | 	add	local11, #13
29590     19 29 C2 FA | 	rdbyte	local06, local11
29594     15 2B E2 F8 | 	getbyte	local07, local07, #0
29598     BF 2A 06 F5 | 	and	local07, #191
2959c     15 27 02 F6 | 	mov	local05, local07
295a0     0C 1E 86 F1 | 	sub	local01, #12
295a4     0F 33 02 FB | 	rdlong	local11, local01
295a8     1C 1E 06 F1 | 	add	local01, #28
295ac     0F 33 62 FC | 	wrlong	local11, local01
295b0     2C 1E 86 F1 | 	sub	local01, #44
295b4                 | LR__4293
295b4     15 2D E2 F8 | 	getbyte	local08, local07, #0
295b8     13 31 E2 F8 | 	getbyte	local10, local05, #0
295bc     18 2D 0A F2 | 	cmp	local08, local10 wz
295c0     5C 00 90 5D |  if_ne	jmp	#LR__4294
295c4     14 31 E2 F8 | 	getbyte	local10, local06, #0
295c8     1C 1E 06 F1 | 	add	local01, #28
295cc     0F 2F 02 FB | 	rdlong	local09, local01
295d0     1C 1E 86 F1 | 	sub	local01, #28
295d4     0D 2E 06 F1 | 	add	local09, #13
295d8     17 2D C2 FA | 	rdbyte	local08, local09
295dc     16 2F E2 F8 | 	getbyte	local09, local08, #0
295e0     17 31 0A F2 | 	cmp	local10, local09 wz
295e4     38 00 90 5D |  if_ne	jmp	#LR__4294
295e8     0C 24 06 F1 | 	add	local04, #12
295ec     12 13 02 FB | 	rdlong	arg01, local04
295f0     0C 24 86 F1 | 	sub	local04, #12
295f4     1C 1E 06 F1 | 	add	local01, #28
295f8     0F 35 02 FB | 	rdlong	local12, local01
295fc     1C 1E 86 F1 | 	sub	local01, #28
29600     1A 15 02 F6 | 	mov	arg02, local12
29604     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
29608     00 FA 4D F2 | 	cmps	result1, #0 wz
2960c     13 35 02 56 |  if_ne	mov	local12, local05
29610     1A 35 E2 58 |  if_ne	getbyte	local12, local12, #0
29614     01 34 86 51 |  if_ne	sub	local12, #1
29618     1A 33 02 56 |  if_ne	mov	local11, local12
2961c     04 00 90 5D |  if_ne	jmp	#LR__4295
29620                 | LR__4294
29620     FF 32 06 F6 | 	mov	local11, #255
29624                 | LR__4295
29624     19 27 02 F6 | 	mov	local05, local11
29628     40 00 90 FD | 	jmp	#LR__4298
2962c                 | LR__4296
2962c     13 33 02 F6 | 	mov	local11, local05
29630     07 32 4E F7 | 	zerox	local11, #7 wz
29634     20 00 90 5D |  if_ne	jmp	#LR__4297
29638     14 29 E2 F8 | 	getbyte	local06, local06, #0
2963c     1C 1E 06 F1 | 	add	local01, #28
29640     0F 13 02 FB | 	rdlong	arg01, local01
29644     1C 1E 86 F1 | 	sub	local01, #28
29648     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
2964c     FD FA E1 F8 | 	getbyte	result1, result1, #0
29650     FD 28 0A F2 | 	cmp	local06, result1 wz
29654     28 00 90 AD |  if_e	jmp	#LR__4300
29658                 | LR__4297
29658     2C 1E 06 F1 | 	add	local01, #44
2965c     FF FF FF FF 
29660     0F FF 6B FC | 	wrlong	##-1, local01
29664     2C 1E 86 F1 | 	sub	local01, #44
29668                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
29668                 | ' 					}
29668                 | ' 					break;
29668     14 00 90 FD | 	jmp	#LR__4300
2966c                 | LR__4298
2966c                 | LR__4299
2966c     0F 13 02 F6 | 	mov	arg01, local01
29670     00 14 06 F6 | 	mov	arg02, #0
29674     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
29678     FD 22 0A F6 | 	mov	local03, result1 wz
2967c     44 FE 9F AD |  if_e	jmp	#LR__4290
29680                 | LR__4300
29680     00 22 0E F2 | 	cmp	local03, #0 wz
29684     18 1E 06 51 |  if_ne	add	local01, #24
29688     0F 01 68 5C |  if_ne	wrlong	#0, local01
2968c                 | ' 	return res;
2968c     11 FB 01 F6 | 	mov	result1, local03
29690     A7 F0 03 F6 | 	mov	ptra, fp
29694     B2 00 A0 FD | 	call	#popregs_
29698                 | _fatfs_cc_dir_read_ret
29698     2D 00 64 FD | 	ret
2969c                 | 
2969c                 | _fatfs_cc_dir_find
2969c     0B 4A 05 F6 | 	mov	COUNT_, #11
296a0     A8 00 A0 FD | 	call	#pushregs_
296a4     09 1F 02 F6 | 	mov	local01, arg01
296a8     0F 21 02 FB | 	rdlong	local02, local01
296ac     0F 13 02 F6 | 	mov	arg01, local01
296b0     00 14 06 F6 | 	mov	arg02, #0
296b4     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
296b8     00 FA 0D F2 | 	cmp	result1, #0 wz
296bc     18 02 90 5D |  if_ne	jmp	#LR__4322
296c0     FF 22 06 F6 | 	mov	local03, #255
296c4     FF 24 06 F6 | 	mov	local04, #255
296c8     2C 1E 06 F1 | 	add	local01, #44
296cc     FF FF FF FF 
296d0     0F FF 6B FC | 	wrlong	##-1, local01
296d4     2C 1E 86 F1 | 	sub	local01, #44
296d8                 | ' #line 2404 "ff.c"
296d8                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
296d8                 | ' 
296d8                 | ' 	do {
296d8                 | LR__4310
296d8     18 1E 06 F1 | 	add	local01, #24
296dc     0F 15 02 FB | 	rdlong	arg02, local01
296e0     18 1E 86 F1 | 	sub	local01, #24
296e4     10 13 02 F6 | 	mov	arg01, local02
296e8     A8 EB BF FD | 	call	#_fatfs_cc_move_window
296ec     FD 26 0A F6 | 	mov	local05, result1 wz
296f0     E0 01 90 5D |  if_ne	jmp	#LR__4321
296f4     1C 1E 06 F1 | 	add	local01, #28
296f8     0F 17 02 FB | 	rdlong	arg03, local01
296fc     1C 1E 86 F1 | 	sub	local01, #28
29700     0B 29 C2 FA | 	rdbyte	local06, arg03
29704     14 17 02 F6 | 	mov	arg03, local06
29708     07 16 4E F7 | 	zerox	arg03, #7 wz
2970c     04 26 06 A6 |  if_e	mov	local05, #4
29710     C0 01 90 AD |  if_e	jmp	#LR__4321
29714     1C 1E 06 F1 | 	add	local01, #28
29718     0F 2B 02 FB | 	rdlong	local07, local01
2971c     15 17 02 F6 | 	mov	arg03, local07
29720     0B 16 06 F1 | 	add	arg03, #11
29724     0B 2D C2 FA | 	rdbyte	local08, arg03
29728     3F 2C 06 F5 | 	and	local08, #63
2972c     16 1E 86 F1 | 	sub	local01, #22
29730     0F 2D 42 FC | 	wrbyte	local08, local01
29734     06 1E 86 F1 | 	sub	local01, #6
29738     14 17 E2 F8 | 	getbyte	arg03, local06, #0
2973c     E5 16 0E F2 | 	cmp	arg03, #229 wz
29740     18 00 90 AD |  if_e	jmp	#LR__4311
29744     16 17 E2 F8 | 	getbyte	arg03, local08, #0
29748     08 16 CE F7 | 	test	arg03, #8 wz
2974c     16 2B 02 56 |  if_ne	mov	local07, local08
29750     15 2B E2 58 |  if_ne	getbyte	local07, local07, #0
29754     0F 2A 0E 52 |  if_ne	cmp	local07, #15 wz
29758     18 00 90 AD |  if_e	jmp	#LR__4312
2975c                 | LR__4311
2975c     FF 24 06 F6 | 	mov	local04, #255
29760     2C 1E 06 F1 | 	add	local01, #44
29764     FF FF FF FF 
29768     0F FF 6B FC | 	wrlong	##-1, local01
2976c     2C 1E 86 F1 | 	sub	local01, #44
29770     4C 01 90 FD | 	jmp	#LR__4320
29774                 | LR__4312
29774     16 2D E2 F8 | 	getbyte	local08, local08, #0
29778     0F 2C 0E F2 | 	cmp	local08, #15 wz
2977c     C8 00 90 5D |  if_ne	jmp	#LR__4316
29780     2B 1E 06 F1 | 	add	local01, #43
29784     0F 2D C2 FA | 	rdbyte	local08, local01
29788     2B 1E 86 F1 | 	sub	local01, #43
2978c     40 2C CE F7 | 	test	local08, #64 wz
29790     2C 01 90 5D |  if_ne	jmp	#LR__4319
29794     14 2F E2 F8 | 	getbyte	local09, local06, #0
29798     40 2E CE F7 | 	test	local09, #64 wz
2979c     30 00 90 AD |  if_e	jmp	#LR__4313
297a0     1C 1E 06 F1 | 	add	local01, #28
297a4     0F 2F 02 FB | 	rdlong	local09, local01
297a8     0D 2E 06 F1 | 	add	local09, #13
297ac     17 23 C2 FA | 	rdbyte	local03, local09
297b0     14 29 E2 F8 | 	getbyte	local06, local06, #0
297b4     BF 28 06 F5 | 	and	local06, #191
297b8     14 25 02 F6 | 	mov	local04, local06
297bc     0C 1E 86 F1 | 	sub	local01, #12
297c0     0F 2F 02 FB | 	rdlong	local09, local01
297c4     1C 1E 06 F1 | 	add	local01, #28
297c8     0F 2F 62 FC | 	wrlong	local09, local01
297cc     2C 1E 86 F1 | 	sub	local01, #44
297d0                 | LR__4313
297d0     14 31 E2 F8 | 	getbyte	local10, local06, #0
297d4     12 2B E2 F8 | 	getbyte	local07, local04, #0
297d8     15 31 0A F2 | 	cmp	local10, local07 wz
297dc     5C 00 90 5D |  if_ne	jmp	#LR__4314
297e0     11 2D E2 F8 | 	getbyte	local08, local03, #0
297e4     1C 1E 06 F1 | 	add	local01, #28
297e8     0F 2B 02 FB | 	rdlong	local07, local01
297ec     1C 1E 86 F1 | 	sub	local01, #28
297f0     0D 2A 06 F1 | 	add	local07, #13
297f4     15 29 C2 FA | 	rdbyte	local06, local07
297f8     14 2B E2 F8 | 	getbyte	local07, local06, #0
297fc     15 2D 0A F2 | 	cmp	local08, local07 wz
29800     38 00 90 5D |  if_ne	jmp	#LR__4314
29804     0C 20 06 F1 | 	add	local02, #12
29808     10 13 02 FB | 	rdlong	arg01, local02
2980c     0C 20 86 F1 | 	sub	local02, #12
29810     1C 1E 06 F1 | 	add	local01, #28
29814     0F 33 02 FB | 	rdlong	local11, local01
29818     1C 1E 86 F1 | 	sub	local01, #28
2981c     19 15 02 F6 | 	mov	arg02, local11
29820     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
29824     00 FA 4D F2 | 	cmps	result1, #0 wz
29828     12 33 02 56 |  if_ne	mov	local11, local04
2982c     19 33 E2 58 |  if_ne	getbyte	local11, local11, #0
29830     01 32 86 51 |  if_ne	sub	local11, #1
29834     19 2F 02 56 |  if_ne	mov	local09, local11
29838     04 00 90 5D |  if_ne	jmp	#LR__4315
2983c                 | LR__4314
2983c     FF 2E 06 F6 | 	mov	local09, #255
29840                 | LR__4315
29840     17 25 02 F6 | 	mov	local04, local09
29844     78 00 90 FD | 	jmp	#LR__4319
29848                 | LR__4316
29848     12 2F 02 F6 | 	mov	local09, local04
2984c     07 2E 4E F7 | 	zerox	local09, #7 wz
29850     20 00 90 5D |  if_ne	jmp	#LR__4317
29854     11 31 E2 F8 | 	getbyte	local10, local03, #0
29858     1C 1E 06 F1 | 	add	local01, #28
2985c     0F 13 02 FB | 	rdlong	arg01, local01
29860     1C 1E 86 F1 | 	sub	local01, #28
29864     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
29868     FD FA E1 F8 | 	getbyte	result1, result1, #0
2986c     FD 30 0A F2 | 	cmp	local10, result1 wz
29870     60 00 90 AD |  if_e	jmp	#LR__4321
29874                 | LR__4317
29874     2B 1E 06 F1 | 	add	local01, #43
29878     0F 2F C2 FA | 	rdbyte	local09, local01
2987c     2B 1E 86 F1 | 	sub	local01, #43
29880     01 2E CE F7 | 	test	local09, #1 wz
29884     24 00 90 5D |  if_ne	jmp	#LR__4318
29888     1C 1E 06 F1 | 	add	local01, #28
2988c     0F 13 02 FB | 	rdlong	arg01, local01
29890     04 1E 06 F1 | 	add	local01, #4
29894     0F 15 02 F6 | 	mov	arg02, local01
29898     20 1E 86 F1 | 	sub	local01, #32
2989c     0B 16 06 F6 | 	mov	arg03, #11
298a0     88 DA BF FD | 	call	#_fatfs_cc_memcmp
298a4     00 FA 0D F2 | 	cmp	result1, #0 wz
298a8     28 00 90 AD |  if_e	jmp	#LR__4321
298ac                 | LR__4318
298ac     FF 24 06 F6 | 	mov	local04, #255
298b0     2C 1E 06 F1 | 	add	local01, #44
298b4     FF FF FF FF 
298b8     0F FF 6B FC | 	wrlong	##-1, local01
298bc     2C 1E 86 F1 | 	sub	local01, #44
298c0                 | LR__4319
298c0                 | LR__4320
298c0     0F 13 02 F6 | 	mov	arg01, local01
298c4     00 14 06 F6 | 	mov	arg02, #0
298c8     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
298cc     FD 26 0A F6 | 	mov	local05, result1 wz
298d0     04 FE 9F AD |  if_e	jmp	#LR__4310
298d4                 | LR__4321
298d4                 | ' 
298d4                 | ' 	return res;
298d4     13 FB 01 F6 | 	mov	result1, local05
298d8                 | LR__4322
298d8     A7 F0 03 F6 | 	mov	ptra, fp
298dc     B2 00 A0 FD | 	call	#popregs_
298e0                 | _fatfs_cc_dir_find_ret
298e0     2D 00 64 FD | 	ret
298e4                 | 
298e4                 | _fatfs_cc_dir_register
298e4     0A 4A 05 F6 | 	mov	COUNT_, #10
298e8     A8 00 A0 FD | 	call	#pushregs_
298ec     2C F0 07 F1 | 	add	ptra, #44
298f0     04 4E 05 F1 | 	add	fp, #4
298f4     A7 12 62 FC | 	wrlong	arg01, fp
298f8     09 1F 02 FB | 	rdlong	local01, arg01
298fc     08 4E 05 F1 | 	add	fp, #8
29900     A7 1E 62 FC | 	wrlong	local01, fp
29904     08 4E 85 F1 | 	sub	fp, #8
29908     A7 20 02 FB | 	rdlong	local02, fp
2990c     04 4E 85 F1 | 	sub	fp, #4
29910     2B 20 06 F1 | 	add	local02, #43
29914     10 21 C2 FA | 	rdbyte	local02, local02
29918     A0 20 CE F7 | 	test	local02, #160 wz
2991c     06 FA 05 56 |  if_ne	mov	result1, #6
29920     F8 03 90 5D |  if_ne	jmp	#LR__4345
29924                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
29924     14 4E 05 F1 | 	add	fp, #20
29928     A7 00 68 FC | 	wrlong	#0, fp
2992c     14 4E 85 F1 | 	sub	fp, #20
29930     97 28 48 FB | 	callpa	#(@LR__4331-@LR__4330)>>2,fcache_load_ptr_
29934                 | LR__4330
29934     0C 4E 05 F1 | 	add	fp, #12
29938     A7 20 02 FB | 	rdlong	local02, fp
2993c     0C 20 06 F1 | 	add	local02, #12
29940     10 23 02 FB | 	rdlong	local03, local02
29944     08 4E 05 F1 | 	add	fp, #8
29948     A7 24 02 FB | 	rdlong	local04, fp
2994c     14 4E 85 F1 | 	sub	fp, #20
29950     01 24 66 F0 | 	shl	local04, #1
29954     11 25 02 F1 | 	add	local04, local03
29958     12 21 EA FA | 	rdword	local02, local04 wz
2995c     24 00 90 AD |  if_e	jmp	#LR__4332
29960     14 4E 05 F1 | 	add	fp, #20
29964     A7 26 02 FB | 	rdlong	local05, fp
29968     13 29 02 F6 | 	mov	local06, local05
2996c     13 2B 02 F6 | 	mov	local07, local05
29970     15 2D 02 F6 | 	mov	local08, local07
29974     01 2C 06 F1 | 	add	local08, #1
29978     A7 2C 62 FC | 	wrlong	local08, fp
2997c     14 4E 85 F1 | 	sub	fp, #20
29980     B0 FF 9F FD | 	jmp	#LR__4330
29984                 | LR__4331
29984                 | LR__4332
29984     1C 4E 05 F1 | 	add	fp, #28
29988     A7 12 02 F6 | 	mov	arg01, fp
2998c     18 4E 85 F1 | 	sub	fp, #24
29990     A7 14 02 FB | 	rdlong	arg02, fp
29994     04 4E 85 F1 | 	sub	fp, #4
29998     20 14 06 F1 | 	add	arg02, #32
2999c     0C 16 06 F6 | 	mov	arg03, #12
299a0     E0 6E BF FD | 	call	#__system____builtin_memmove
299a4     27 4E 05 F1 | 	add	fp, #39
299a8     A7 2E C2 FA | 	rdbyte	local09, fp
299ac     27 4E 85 F1 | 	sub	fp, #39
299b0     01 2E CE F7 | 	test	local09, #1 wz
299b4     F4 00 90 AD |  if_e	jmp	#LR__4335
299b8     04 4E 05 F1 | 	add	fp, #4
299bc     A7 30 02 FB | 	rdlong	local10, fp
299c0     2B 30 06 F1 | 	add	local10, #43
299c4     18 81 48 FC | 	wrbyte	#64, local10
299c8                 | ' 		dp->fn[ 11 ] =  0x40 ;
299c8                 | ' 		for (n = 1; n < 100; n++) {
299c8     0C 4E 05 F1 | 	add	fp, #12
299cc     A7 02 68 FC | 	wrlong	#1, fp
299d0     10 4E 85 F1 | 	sub	fp, #16
299d4                 | LR__4333
299d4     10 4E 05 F1 | 	add	fp, #16
299d8     A7 20 02 FB | 	rdlong	local02, fp
299dc     10 4E 85 F1 | 	sub	fp, #16
299e0     64 20 16 F2 | 	cmp	local02, #100 wc
299e4     70 00 90 3D |  if_ae	jmp	#LR__4334
299e8     04 4E 05 F1 | 	add	fp, #4
299ec     A7 12 02 FB | 	rdlong	arg01, fp
299f0     20 12 06 F1 | 	add	arg01, #32
299f4     18 4E 05 F1 | 	add	fp, #24
299f8     A7 14 02 F6 | 	mov	arg02, fp
299fc     10 4E 85 F1 | 	sub	fp, #16
29a00     A7 30 02 FB | 	rdlong	local10, fp
29a04     0C 30 06 F1 | 	add	local10, #12
29a08     18 17 02 FB | 	rdlong	arg03, local10
29a0c     04 4E 05 F1 | 	add	fp, #4
29a10     A7 18 02 FB | 	rdlong	arg04, fp
29a14     10 4E 85 F1 | 	sub	fp, #16
29a18     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
29a1c     04 4E 05 F1 | 	add	fp, #4
29a20     A7 12 02 FB | 	rdlong	arg01, fp
29a24     04 4E 85 F1 | 	sub	fp, #4
29a28     70 FC BF FD | 	call	#_fatfs_cc_dir_find
29a2c     08 4E 05 F1 | 	add	fp, #8
29a30     A7 FA 61 FC | 	wrlong	result1, fp
29a34     00 FA 4D F2 | 	cmps	result1, #0 wz
29a38     08 4E 85 F1 | 	sub	fp, #8
29a3c     18 00 90 5D |  if_ne	jmp	#LR__4334
29a40     10 4E 05 F1 | 	add	fp, #16
29a44     A7 30 02 FB | 	rdlong	local10, fp
29a48     01 30 06 F1 | 	add	local10, #1
29a4c     A7 30 62 FC | 	wrlong	local10, fp
29a50     10 4E 85 F1 | 	sub	fp, #16
29a54     7C FF 9F FD | 	jmp	#LR__4333
29a58                 | LR__4334
29a58     10 4E 05 F1 | 	add	fp, #16
29a5c     A7 30 02 FB | 	rdlong	local10, fp
29a60     10 4E 85 F1 | 	sub	fp, #16
29a64     64 30 0E F2 | 	cmp	local10, #100 wz
29a68     07 FA 05 A6 |  if_e	mov	result1, #7
29a6c     AC 02 90 AD |  if_e	jmp	#LR__4345
29a70     08 4E 05 F1 | 	add	fp, #8
29a74     A7 30 02 FB | 	rdlong	local10, fp
29a78     08 4E 85 F1 | 	sub	fp, #8
29a7c     04 30 0E F2 | 	cmp	local10, #4 wz
29a80     08 4E 05 51 |  if_ne	add	fp, #8
29a84     A7 FA 01 5B |  if_ne	rdlong	result1, fp
29a88     08 4E 85 51 |  if_ne	sub	fp, #8
29a8c     8C 02 90 5D |  if_ne	jmp	#LR__4345
29a90     04 4E 05 F1 | 	add	fp, #4
29a94     A7 30 02 FB | 	rdlong	local10, fp
29a98     23 4E 05 F1 | 	add	fp, #35
29a9c     A7 1E C2 FA | 	rdbyte	local01, fp
29aa0     27 4E 85 F1 | 	sub	fp, #39
29aa4     2B 30 06 F1 | 	add	local10, #43
29aa8     18 1F 42 FC | 	wrbyte	local01, local10
29aac                 | LR__4335
29aac     27 4E 05 F1 | 	add	fp, #39
29ab0     A7 20 C2 FA | 	rdbyte	local02, fp
29ab4     27 4E 85 F1 | 	sub	fp, #39
29ab8     02 20 CE F7 | 	test	local02, #2 wz
29abc     20 00 90 AD |  if_e	jmp	#LR__4336
29ac0     14 4E 05 F1 | 	add	fp, #20
29ac4     A7 30 02 FB | 	rdlong	local10, fp
29ac8     0C 30 06 F1 | 	add	local10, #12
29acc     0D 30 16 FD | 	qdiv	local10, #13
29ad0     14 4E 85 F1 | 	sub	fp, #20
29ad4     18 30 62 FD | 	getqx	local10
29ad8     01 30 06 F1 | 	add	local10, #1
29adc     04 00 90 FD | 	jmp	#LR__4337
29ae0                 | LR__4336
29ae0     01 30 06 F6 | 	mov	local10, #1
29ae4                 | LR__4337
29ae4     18 4E 05 F1 | 	add	fp, #24
29ae8     A7 30 62 FC | 	wrlong	local10, fp
29aec     14 4E 85 F1 | 	sub	fp, #20
29af0     A7 12 02 FB | 	rdlong	arg01, fp
29af4     18 15 02 F6 | 	mov	arg02, local10
29af8     04 4E 85 F1 | 	sub	fp, #4
29afc     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
29b00     08 4E 05 F1 | 	add	fp, #8
29b04     A7 FA 61 FC | 	wrlong	result1, fp
29b08     08 4E 85 F1 | 	sub	fp, #8
29b0c     00 FA 0D F2 | 	cmp	result1, #0 wz
29b10     38 01 90 5D |  if_ne	jmp	#LR__4342
29b14     18 4E 05 F1 | 	add	fp, #24
29b18     A7 30 02 FB | 	rdlong	local10, fp
29b1c     01 30 8E F1 | 	sub	local10, #1 wz
29b20     A7 30 62 FC | 	wrlong	local10, fp
29b24     18 4E 85 F1 | 	sub	fp, #24
29b28     20 01 90 AD |  if_e	jmp	#LR__4342
29b2c     04 4E 05 F1 | 	add	fp, #4
29b30     A7 30 02 FB | 	rdlong	local10, fp
29b34     18 13 02 F6 | 	mov	arg01, local10
29b38     14 4E 05 F1 | 	add	fp, #20
29b3c     A7 18 02 FB | 	rdlong	arg04, fp
29b40     18 4E 85 F1 | 	sub	fp, #24
29b44     05 18 66 F0 | 	shl	arg04, #5
29b48     10 30 06 F1 | 	add	local10, #16
29b4c     18 15 02 FB | 	rdlong	arg02, local10
29b50     0C 15 82 F1 | 	sub	arg02, arg04
29b54     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
29b58     08 4E 05 F1 | 	add	fp, #8
29b5c     A7 FA 61 FC | 	wrlong	result1, fp
29b60     08 4E 85 F1 | 	sub	fp, #8
29b64     00 FA 0D F2 | 	cmp	result1, #0 wz
29b68     E0 00 90 5D |  if_ne	jmp	#LR__4341
29b6c     04 4E 05 F1 | 	add	fp, #4
29b70     A7 12 02 FB | 	rdlong	arg01, fp
29b74     04 4E 85 F1 | 	sub	fp, #4
29b78     20 12 06 F1 | 	add	arg01, #32
29b7c     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
29b80     FD 30 02 F6 | 	mov	local10, result1
29b84     28 4E 05 F1 | 	add	fp, #40
29b88     A7 30 42 FC | 	wrbyte	local10, fp
29b8c     28 4E 85 F1 | 	sub	fp, #40
29b90                 | ' 			sum = sum_sfn(dp->fn);
29b90                 | ' 			do {
29b90                 | LR__4338
29b90     0C 4E 05 F1 | 	add	fp, #12
29b94     A7 12 02 FB | 	rdlong	arg01, fp
29b98     08 4E 85 F1 | 	sub	fp, #8
29b9c     A7 1E 02 FB | 	rdlong	local01, fp
29ba0     04 4E 85 F1 | 	sub	fp, #4
29ba4     18 1E 06 F1 | 	add	local01, #24
29ba8     0F 15 02 FB | 	rdlong	arg02, local01
29bac     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
29bb0     08 4E 05 F1 | 	add	fp, #8
29bb4     A7 FA 61 FC | 	wrlong	result1, fp
29bb8     00 FA 4D F2 | 	cmps	result1, #0 wz
29bbc     08 4E 85 F1 | 	sub	fp, #8
29bc0     88 00 90 5D |  if_ne	jmp	#LR__4340
29bc4     0C 4E 05 F1 | 	add	fp, #12
29bc8     A7 20 02 FB | 	rdlong	local02, fp
29bcc     0C 20 06 F1 | 	add	local02, #12
29bd0     10 13 02 FB | 	rdlong	arg01, local02
29bd4     08 4E 85 F1 | 	sub	fp, #8
29bd8     A7 1E 02 FB | 	rdlong	local01, fp
29bdc     1C 1E 06 F1 | 	add	local01, #28
29be0     0F 15 02 FB | 	rdlong	arg02, local01
29be4     14 4E 05 F1 | 	add	fp, #20
29be8     A7 16 02 FB | 	rdlong	arg03, fp
29bec     10 4E 05 F1 | 	add	fp, #16
29bf0     A7 18 C2 FA | 	rdbyte	arg04, fp
29bf4     28 4E 85 F1 | 	sub	fp, #40
29bf8     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
29bfc     0C 4E 05 F1 | 	add	fp, #12
29c00     A7 30 02 FB | 	rdlong	local10, fp
29c04     03 30 06 F1 | 	add	local10, #3
29c08     18 03 48 FC | 	wrbyte	#1, local10
29c0c     08 4E 85 F1 | 	sub	fp, #8
29c10     A7 12 02 FB | 	rdlong	arg01, fp
29c14     04 4E 85 F1 | 	sub	fp, #4
29c18     00 14 06 F6 | 	mov	arg02, #0
29c1c     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
29c20     08 4E 05 F1 | 	add	fp, #8
29c24     A7 FA 61 FC | 	wrlong	result1, fp
29c28     00 FA 4D F2 | 	cmps	result1, #0 wz
29c2c     08 4E 85 F1 | 	sub	fp, #8
29c30     18 00 90 5D |  if_ne	jmp	#LR__4339
29c34     18 4E 05 F1 | 	add	fp, #24
29c38     A7 30 02 FB | 	rdlong	local10, fp
29c3c     01 30 8E F1 | 	sub	local10, #1 wz
29c40     A7 30 62 FC | 	wrlong	local10, fp
29c44     18 4E 85 F1 | 	sub	fp, #24
29c48     44 FF 9F 5D |  if_ne	jmp	#LR__4338
29c4c                 | LR__4339
29c4c                 | LR__4340
29c4c                 | LR__4341
29c4c                 | LR__4342
29c4c     08 4E 05 F1 | 	add	fp, #8
29c50     A7 30 0A FB | 	rdlong	local10, fp wz
29c54     08 4E 85 F1 | 	sub	fp, #8
29c58     B4 00 90 5D |  if_ne	jmp	#LR__4344
29c5c     0C 4E 05 F1 | 	add	fp, #12
29c60     A7 12 02 FB | 	rdlong	arg01, fp
29c64     08 4E 85 F1 | 	sub	fp, #8
29c68     A7 1E 02 FB | 	rdlong	local01, fp
29c6c     04 4E 85 F1 | 	sub	fp, #4
29c70     18 1E 06 F1 | 	add	local01, #24
29c74     0F 15 02 FB | 	rdlong	arg02, local01
29c78     18 E6 BF FD | 	call	#_fatfs_cc_move_window
29c7c     08 4E 05 F1 | 	add	fp, #8
29c80     A7 FA 61 FC | 	wrlong	result1, fp
29c84     08 4E 85 F1 | 	sub	fp, #8
29c88     00 FA 0D F2 | 	cmp	result1, #0 wz
29c8c     80 00 90 5D |  if_ne	jmp	#LR__4343
29c90     04 4E 05 F1 | 	add	fp, #4
29c94     A7 20 02 FB | 	rdlong	local02, fp
29c98     04 4E 85 F1 | 	sub	fp, #4
29c9c     1C 20 06 F1 | 	add	local02, #28
29ca0     10 13 02 FB | 	rdlong	arg01, local02
29ca4     00 14 06 F6 | 	mov	arg02, #0
29ca8     20 16 06 F6 | 	mov	arg03, #32
29cac     98 00 A0 FD | 	call	#\builtin_bytefill_
29cb0     04 4E 05 F1 | 	add	fp, #4
29cb4     A7 14 02 FB | 	rdlong	arg02, fp
29cb8     0A 1F 02 F6 | 	mov	local01, arg02
29cbc     1C 1E 06 F1 | 	add	local01, #28
29cc0     0F 13 02 FB | 	rdlong	arg01, local01
29cc4     04 4E 85 F1 | 	sub	fp, #4
29cc8     20 14 06 F1 | 	add	arg02, #32
29ccc     0B 16 06 F6 | 	mov	arg03, #11
29cd0     B0 6B BF FD | 	call	#__system____builtin_memmove
29cd4     04 4E 05 F1 | 	add	fp, #4
29cd8     A7 2E 02 FB | 	rdlong	local09, fp
29cdc     17 31 02 F6 | 	mov	local10, local09
29ce0     1C 30 06 F1 | 	add	local10, #28
29ce4     18 1F 02 FB | 	rdlong	local01, local10
29ce8     2B 2E 06 F1 | 	add	local09, #43
29cec     17 31 C2 FA | 	rdbyte	local10, local09
29cf0     18 30 06 F5 | 	and	local10, #24
29cf4     0C 1E 06 F1 | 	add	local01, #12
29cf8     0F 31 42 FC | 	wrbyte	local10, local01
29cfc     08 4E 05 F1 | 	add	fp, #8
29d00     A7 30 02 FB | 	rdlong	local10, fp
29d04     0C 4E 85 F1 | 	sub	fp, #12
29d08     03 30 06 F1 | 	add	local10, #3
29d0c     18 03 48 FC | 	wrbyte	#1, local10
29d10                 | LR__4343
29d10                 | LR__4344
29d10                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
29d10                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
29d10                 | ' 
29d10                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
29d10                 | ' 
29d10                 | ' 			fs->wflag = 1;
29d10                 | ' 		}
29d10                 | ' 	}
29d10                 | ' 
29d10                 | ' 	return res;
29d10     08 4E 05 F1 | 	add	fp, #8
29d14     A7 FA 01 FB | 	rdlong	result1, fp
29d18     08 4E 85 F1 | 	sub	fp, #8
29d1c                 | LR__4345
29d1c     A7 F0 03 F6 | 	mov	ptra, fp
29d20     B2 00 A0 FD | 	call	#popregs_
29d24                 | _fatfs_cc_dir_register_ret
29d24     2D 00 64 FD | 	ret
29d28                 | 
29d28                 | _fatfs_cc_dir_remove
29d28     05 4A 05 F6 | 	mov	COUNT_, #5
29d2c     A8 00 A0 FD | 	call	#pushregs_
29d30     09 1F 02 F6 | 	mov	local01, arg01
29d34     0F 21 02 FB | 	rdlong	local02, local01
29d38     10 1E 06 F1 | 	add	local01, #16
29d3c     0F 23 02 FB | 	rdlong	local03, local01
29d40     1C 1E 06 F1 | 	add	local01, #28
29d44     0F 15 02 FB | 	rdlong	arg02, local01
29d48     2C 1E 86 F1 | 	sub	local01, #44
29d4c     FF FF 7F FF 
29d50     FF 15 0E F2 | 	cmp	arg02, ##-1 wz
29d54     00 24 06 A6 |  if_e	mov	local04, #0
29d58     18 00 90 AD |  if_e	jmp	#LR__4350
29d5c     0F 13 02 F6 | 	mov	arg01, local01
29d60     2C 1E 06 F1 | 	add	local01, #44
29d64     0F 15 02 FB | 	rdlong	arg02, local01
29d68     2C 1E 86 F1 | 	sub	local01, #44
29d6c     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
29d70     FD 24 02 F6 | 	mov	local04, result1
29d74                 | LR__4350
29d74     12 27 0A F6 | 	mov	local05, local04 wz
29d78     64 00 90 5D |  if_ne	jmp	#LR__4353
29d7c                 | ' 		do {
29d7c                 | LR__4351
29d7c     18 1E 06 F1 | 	add	local01, #24
29d80     0F 15 02 FB | 	rdlong	arg02, local01
29d84     18 1E 86 F1 | 	sub	local01, #24
29d88     10 13 02 F6 | 	mov	arg01, local02
29d8c     04 E5 BF FD | 	call	#_fatfs_cc_move_window
29d90     FD 26 0A F6 | 	mov	local05, result1 wz
29d94     40 00 90 5D |  if_ne	jmp	#LR__4352
29d98     1C 1E 06 F1 | 	add	local01, #28
29d9c     0F 25 02 FB | 	rdlong	local04, local01
29da0     12 CB 49 FC | 	wrbyte	#229, local04
29da4     03 20 06 F1 | 	add	local02, #3
29da8     10 03 48 FC | 	wrbyte	#1, local02
29dac     03 20 86 F1 | 	sub	local02, #3
29db0     0C 1E 86 F1 | 	sub	local01, #12
29db4     0F 25 02 FB | 	rdlong	local04, local01
29db8     10 1E 86 F1 | 	sub	local01, #16
29dbc     11 25 12 F2 | 	cmp	local04, local03 wc
29dc0     14 00 90 3D |  if_ae	jmp	#LR__4352
29dc4     0F 13 02 F6 | 	mov	arg01, local01
29dc8     00 14 06 F6 | 	mov	arg02, #0
29dcc     90 EF BF FD | 	call	#_fatfs_cc_dir_next
29dd0     FD 26 0A F6 | 	mov	local05, result1 wz
29dd4     A4 FF 9F AD |  if_e	jmp	#LR__4351
29dd8                 | LR__4352
29dd8     04 26 0E F2 | 	cmp	local05, #4 wz
29ddc     02 26 06 A6 |  if_e	mov	local05, #2
29de0                 | LR__4353
29de0                 | ' 	}
29de0                 | ' #line 2590 "ff.c"
29de0                 | ' 	return res;
29de0     13 FB 01 F6 | 	mov	result1, local05
29de4     A7 F0 03 F6 | 	mov	ptra, fp
29de8     B2 00 A0 FD | 	call	#popregs_
29dec                 | _fatfs_cc_dir_remove_ret
29dec     2D 00 64 FD | 	ret
29df0                 | 
29df0                 | _fatfs_cc_get_fileinfo
29df0     0F 4A 05 F6 | 	mov	COUNT_, #15
29df4     A8 00 A0 FD | 	call	#pushregs_
29df8     09 1F 02 F6 | 	mov	local01, arg01
29dfc     0A 21 02 F6 | 	mov	local02, arg02
29e00     0F 23 02 FB | 	rdlong	local03, local01
29e04     1C 20 06 F1 | 	add	local02, #28
29e08     10 01 48 FC | 	wrbyte	#0, local02
29e0c     1C 20 86 F1 | 	sub	local02, #28
29e10     18 1E 06 F1 | 	add	local01, #24
29e14     0F 25 0A FB | 	rdlong	local04, local01 wz
29e18     18 1E 86 F1 | 	sub	local01, #24
29e1c     90 03 90 AD |  if_e	jmp	#LR__4374
29e20     2C 1E 06 F1 | 	add	local01, #44
29e24     0F 25 02 FB | 	rdlong	local04, local01
29e28     2C 1E 86 F1 | 	sub	local01, #44
29e2c     FF FF 7F FF 
29e30     FF 25 0E F2 | 	cmp	local04, ##-1 wz
29e34     D8 00 90 AD |  if_e	jmp	#LR__4363
29e38     00 26 06 F6 | 	mov	local05, #0
29e3c     00 28 06 F6 | 	mov	local06, #0
29e40     00 2A 06 F6 | 	mov	local07, #0
29e44                 | ' 			si = di = 0;
29e44                 | ' 			hs = 0;
29e44                 | ' 			while (fs->lfnbuf[si] != 0) {
29e44                 | LR__4360
29e44     0C 22 06 F1 | 	add	local03, #12
29e48     11 25 02 FB | 	rdlong	local04, local03
29e4c     0C 22 86 F1 | 	sub	local03, #12
29e50     14 2D 02 F6 | 	mov	local08, local06
29e54     01 2C 66 F0 | 	shl	local08, #1
29e58     12 2D 02 F1 | 	add	local08, local04
29e5c     16 25 EA FA | 	rdword	local04, local08 wz
29e60     90 00 90 AD |  if_e	jmp	#LR__4362
29e64     0C 22 06 F1 | 	add	local03, #12
29e68     11 2F 02 FB | 	rdlong	local09, local03
29e6c     0C 22 86 F1 | 	sub	local03, #12
29e70     14 31 02 F6 | 	mov	local10, local06
29e74     01 30 66 F0 | 	shl	local10, #1
29e78     17 31 02 F1 | 	add	local10, local09
29e7c     18 33 E2 FA | 	rdword	local11, local10
29e80     15 25 02 F6 | 	mov	local04, local07
29e84     0F 24 4E F7 | 	zerox	local04, #15 wz
29e88     01 28 06 F1 | 	add	local06, #1
29e8c     24 00 90 5D |  if_ne	jmp	#LR__4361
29e90     19 35 32 F9 | 	getword	local12, local11, #0
29e94     6C 00 00 FF 
29e98     00 34 16 F2 | 	cmp	local12, ##55296 wc
29e9c     14 00 90 CD |  if_b	jmp	#LR__4361
29ea0     19 37 32 F9 | 	getword	local13, local11, #0
29ea4     70 00 00 FF 
29ea8     00 36 16 F2 | 	cmp	local13, ##57344 wc
29eac     19 2B 02 C6 |  if_b	mov	local07, local11
29eb0                 | ' 					hs = wc; continue;
29eb0     90 FF 9F CD |  if_b	jmp	#LR__4360
29eb4                 | LR__4361
29eb4     15 13 32 F9 | 	getword	arg01, local07, #0
29eb8     10 12 66 F0 | 	shl	arg01, #16
29ebc     19 33 32 F9 | 	getword	local11, local11, #0
29ec0     19 13 42 F5 | 	or	arg01, local11
29ec4     13 15 02 F6 | 	mov	arg02, local05
29ec8     1C 20 06 F1 | 	add	local02, #28
29ecc     10 15 02 F1 | 	add	arg02, local02
29ed0     FF 16 06 F6 | 	mov	arg03, #255
29ed4     13 17 82 F1 | 	sub	arg03, local05
29ed8     1C 20 86 F1 | 	sub	local02, #28
29edc     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
29ee0     FD 38 0A F6 | 	mov	local14, result1 wz
29ee4     00 26 06 A6 |  if_e	mov	local05, #0
29ee8     1C 27 02 51 |  if_ne	add	local05, local14
29eec     00 2A 06 56 |  if_ne	mov	local07, #0
29ef0     50 FF 9F 5D |  if_ne	jmp	#LR__4360
29ef4                 | LR__4362
29ef4     15 25 02 F6 | 	mov	local04, local07
29ef8     0F 24 4E F7 | 	zerox	local04, #15 wz
29efc     00 26 06 56 |  if_ne	mov	local05, #0
29f00     1C 20 06 F1 | 	add	local02, #28
29f04     10 27 02 F1 | 	add	local05, local02
29f08     13 01 48 FC | 	wrbyte	#0, local05
29f0c     1C 20 86 F1 | 	sub	local02, #28
29f10                 | LR__4363
29f10     00 26 06 F6 | 	mov	local05, #0
29f14     00 28 06 F6 | 	mov	local06, #0
29f18                 | ' 			fno->fname[di] = 0;
29f18                 | ' 		}
29f18                 | ' 	}
29f18                 | ' 
29f18                 | ' 	si = di = 0;
29f18                 | ' 	while (si < 11) {
29f18                 | LR__4364
29f18     0B 28 16 F2 | 	cmp	local06, #11 wc
29f1c     20 01 90 3D |  if_ae	jmp	#LR__4367
29f20     1C 1E 06 F1 | 	add	local01, #28
29f24     0F 2F 02 FB | 	rdlong	local09, local01
29f28     1C 1E 86 F1 | 	sub	local01, #28
29f2c     14 31 02 F6 | 	mov	local10, local06
29f30     17 31 02 F1 | 	add	local10, local09
29f34     18 33 C2 FA | 	rdbyte	local11, local10
29f38     19 25 32 F9 | 	getword	local04, local11, #0
29f3c     20 24 0E F2 | 	cmp	local04, #32 wz
29f40     01 28 06 F1 | 	add	local06, #1
29f44     D0 FF 9F AD |  if_e	jmp	#LR__4364
29f48     19 25 32 F9 | 	getword	local04, local11, #0
29f4c     05 24 0E F2 | 	cmp	local04, #5 wz
29f50     E5 32 06 A6 |  if_e	mov	local11, #229
29f54     09 28 0E F2 | 	cmp	local06, #9 wz
29f58     20 00 90 5D |  if_ne	jmp	#LR__4365
29f5c     0C 26 16 F2 | 	cmp	local05, #12 wc
29f60     18 00 90 3D |  if_ae	jmp	#LR__4365
29f64     13 37 02 F6 | 	mov	local13, local05
29f68     0C 20 06 F1 | 	add	local02, #12
29f6c     10 37 02 F1 | 	add	local13, local02
29f70     1B 5D 48 FC | 	wrbyte	#46, local13
29f74     01 26 06 F1 | 	add	local05, #1
29f78     0C 20 86 F1 | 	sub	local02, #12
29f7c                 | LR__4365
29f7c     19 13 32 F9 | 	getword	arg01, local11, #0
29f80     07 12 4E F7 | 	zerox	arg01, #7 wz
29f84     00 FA 05 56 |  if_ne	mov	result1, #0
29f88                 | ' 
29f88                 | ' 	return 0;
29f88     00 FA 05 A6 |  if_e	mov	result1, #0
29f8c     00 FA 0D F2 | 	cmp	result1, #0 wz
29f90     08 28 0E 52 |  if_ne	cmp	local06, #8 wz
29f94     0B 28 0E 52 |  if_ne	cmp	local06, #11 wz
29f98     50 00 90 AD |  if_e	jmp	#LR__4366
29f9c     1C 1E 06 F1 | 	add	local01, #28
29fa0     0F 31 02 FB | 	rdlong	local10, local01
29fa4     1C 1E 86 F1 | 	sub	local01, #28
29fa8     14 2D 02 F6 | 	mov	local08, local06
29fac     18 2D 02 F1 | 	add	local08, local10
29fb0     16 13 CA FA | 	rdbyte	arg01, local08 wz
29fb4     00 FA 05 56 |  if_ne	mov	result1, #0
29fb8                 | ' 
29fb8                 | ' 	return 0;
29fb8     00 FA 05 A6 |  if_e	mov	result1, #0
29fbc     00 FA 0D F2 | 	cmp	result1, #0 wz
29fc0     28 00 90 AD |  if_e	jmp	#LR__4366
29fc4     19 33 32 F9 | 	getword	local11, local11, #0
29fc8     08 32 66 F0 | 	shl	local11, #8
29fcc     1C 1E 06 F1 | 	add	local01, #28
29fd0     0F 39 02 FB | 	rdlong	local14, local01
29fd4     1C 1E 86 F1 | 	sub	local01, #28
29fd8     14 2F 02 F6 | 	mov	local09, local06
29fdc     1C 2F 02 F1 | 	add	local09, local14
29fe0     17 35 C2 FA | 	rdbyte	local12, local09
29fe4     1A 33 42 F5 | 	or	local11, local12
29fe8     01 28 06 F1 | 	add	local06, #1
29fec                 | LR__4366
29fec     19 13 02 F6 | 	mov	arg01, local11
29ff0     01 00 00 FF 
29ff4     52 15 06 F6 | 	mov	arg02, ##850
29ff8     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
29ffc     FD 32 02 F6 | 	mov	local11, result1
2a000     19 25 02 F6 | 	mov	local04, local11
2a004     0F 24 4E F7 | 	zerox	local04, #15 wz
2a008     00 26 06 A6 |  if_e	mov	local05, #0
2a00c     30 00 90 AD |  if_e	jmp	#LR__4367
2a010     19 13 32 F9 | 	getword	arg01, local11, #0
2a014     13 15 02 F6 | 	mov	arg02, local05
2a018     0C 20 06 F1 | 	add	local02, #12
2a01c     10 15 02 F1 | 	add	arg02, local02
2a020     0C 16 06 F6 | 	mov	arg03, #12
2a024     13 17 82 F1 | 	sub	arg03, local05
2a028     0C 20 86 F1 | 	sub	local02, #12
2a02c     EC DF BF FD | 	call	#_fatfs_cc_put_utf
2a030     FD 38 0A F6 | 	mov	local14, result1 wz
2a034     00 26 06 A6 |  if_e	mov	local05, #0
2a038     1C 27 02 51 |  if_ne	add	local05, local14
2a03c     D8 FE 9F 5D |  if_ne	jmp	#LR__4364
2a040                 | LR__4367
2a040     13 25 02 F6 | 	mov	local04, local05
2a044     0C 20 06 F1 | 	add	local02, #12
2a048     10 25 02 F1 | 	add	local04, local02
2a04c     12 01 48 FC | 	wrbyte	#0, local04
2a050     10 20 06 F1 | 	add	local02, #16
2a054     10 25 CA FA | 	rdbyte	local04, local02 wz
2a058     1C 20 86 F1 | 	sub	local02, #28
2a05c     F8 00 90 5D |  if_ne	jmp	#LR__4373
2a060     00 26 0E F2 | 	cmp	local05, #0 wz
2a064     1C 00 90 5D |  if_ne	jmp	#LR__4368
2a068     13 37 02 F6 | 	mov	local13, local05
2a06c     1C 20 06 F1 | 	add	local02, #28
2a070     10 37 02 F1 | 	add	local13, local02
2a074     1B 7F 48 FC | 	wrbyte	#63, local13
2a078     01 26 06 F1 | 	add	local05, #1
2a07c     1C 20 86 F1 | 	sub	local02, #28
2a080     A4 00 90 FD | 	jmp	#LR__4372
2a084                 | LR__4368
2a084                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
2a084     00 26 06 F6 | 	mov	local05, #0
2a088     00 28 06 F6 | 	mov	local06, #0
2a08c     08 3A 06 F6 | 	mov	local15, #8
2a090                 | LR__4369
2a090     14 25 02 F6 | 	mov	local04, local06
2a094     0C 20 06 F1 | 	add	local02, #12
2a098     10 25 02 F1 | 	add	local04, local02
2a09c     12 37 CA FA | 	rdbyte	local13, local04 wz
2a0a0     0C 20 86 F1 | 	sub	local02, #12
2a0a4     80 00 90 AD |  if_e	jmp	#LR__4371
2a0a8     14 2D 02 F6 | 	mov	local08, local06
2a0ac     0C 20 06 F1 | 	add	local02, #12
2a0b0     10 2D 02 F1 | 	add	local08, local02
2a0b4     16 33 C2 FA | 	rdbyte	local11, local08
2a0b8     19 39 32 F9 | 	getword	local14, local11, #0
2a0bc     2E 38 0E F2 | 	cmp	local14, #46 wz
2a0c0     0C 20 86 F1 | 	sub	local02, #12
2a0c4     10 3A 06 A6 |  if_e	mov	local15, #16
2a0c8     19 39 32 F9 | 	getword	local14, local11, #0
2a0cc     41 38 16 F2 | 	cmp	local14, #65 wc
2a0d0     30 00 90 CD |  if_b	jmp	#LR__4370
2a0d4     19 2D 32 F9 | 	getword	local08, local11, #0
2a0d8     5B 2C 16 F2 | 	cmp	local08, #91 wc
2a0dc     24 00 90 3D |  if_ae	jmp	#LR__4370
2a0e0     1C 1E 06 F1 | 	add	local01, #28
2a0e4     0F 2F 02 FB | 	rdlong	local09, local01
2a0e8     1C 1E 86 F1 | 	sub	local01, #28
2a0ec     0C 2E 06 F1 | 	add	local09, #12
2a0f0     17 31 C2 FA | 	rdbyte	local10, local09
2a0f4     1D 39 E2 F8 | 	getbyte	local14, local15, #0
2a0f8     1C 31 CA F7 | 	test	local10, local14 wz
2a0fc     19 33 32 59 |  if_ne	getword	local11, local11, #0
2a100     20 32 06 51 |  if_ne	add	local11, #32
2a104                 | LR__4370
2a104     13 39 02 F6 | 	mov	local14, local05
2a108     1C 20 06 F1 | 	add	local02, #28
2a10c     10 39 02 F1 | 	add	local14, local02
2a110     19 33 32 F9 | 	getword	local11, local11, #0
2a114     1C 33 42 FC | 	wrbyte	local11, local14
2a118     01 28 06 F1 | 	add	local06, #1
2a11c     01 26 06 F1 | 	add	local05, #1
2a120     1C 20 86 F1 | 	sub	local02, #28
2a124     68 FF 9F FD | 	jmp	#LR__4369
2a128                 | LR__4371
2a128                 | LR__4372
2a128     1C 20 06 F1 | 	add	local02, #28
2a12c     10 27 02 F1 | 	add	local05, local02
2a130     13 01 48 FC | 	wrbyte	#0, local05
2a134     1C 1E 06 F1 | 	add	local01, #28
2a138     0F 25 02 FB | 	rdlong	local04, local01
2a13c     1C 1E 86 F1 | 	sub	local01, #28
2a140     0C 24 06 F1 | 	add	local04, #12
2a144     12 37 CA FA | 	rdbyte	local13, local04 wz
2a148     1C 20 86 F1 | 	sub	local02, #28
2a14c     0C 20 06 A1 |  if_e	add	local02, #12
2a150     10 01 48 AC |  if_e	wrbyte	#0, local02
2a154     0C 20 86 A1 |  if_e	sub	local02, #12
2a158                 | LR__4373
2a158     1C 1E 06 F1 | 	add	local01, #28
2a15c     0F 35 02 FB | 	rdlong	local12, local01
2a160     0B 34 06 F1 | 	add	local12, #11
2a164     1A 25 C2 FA | 	rdbyte	local04, local12
2a168     3F 24 06 F5 | 	and	local04, #63
2a16c     08 20 06 F1 | 	add	local02, #8
2a170     10 25 42 FC | 	wrbyte	local04, local02
2a174     08 20 86 F1 | 	sub	local02, #8
2a178     0F 13 02 FB | 	rdlong	arg01, local01
2a17c     1C 12 06 F1 | 	add	arg01, #28
2a180                 | ' {
2a180                 | ' 
2a180                 | ' 	return *((DWORD*)ptr);
2a180     09 FB 01 FB | 	rdlong	result1, arg01
2a184     10 FB 61 FC | 	wrlong	result1, local02
2a188     0F 13 02 FB | 	rdlong	arg01, local01
2a18c     16 12 06 F1 | 	add	arg01, #22
2a190                 | ' {
2a190                 | ' 
2a190                 | ' 	return *((WORD*)ptr);
2a190     09 FB E1 FA | 	rdword	result1, arg01
2a194     06 20 06 F1 | 	add	local02, #6
2a198     10 FB 51 FC | 	wrword	result1, local02
2a19c     0F 13 02 FB | 	rdlong	arg01, local01
2a1a0     18 12 06 F1 | 	add	arg01, #24
2a1a4                 | ' {
2a1a4                 | ' 
2a1a4                 | ' 	return *((WORD*)ptr);
2a1a4     09 FB E1 FA | 	rdword	result1, arg01
2a1a8     02 20 86 F1 | 	sub	local02, #2
2a1ac     10 FB 51 FC | 	wrword	result1, local02
2a1b0                 | LR__4374
2a1b0     A7 F0 03 F6 | 	mov	ptra, fp
2a1b4     B2 00 A0 FD | 	call	#popregs_
2a1b8                 | _fatfs_cc_get_fileinfo_ret
2a1b8     2D 00 64 FD | 	ret
2a1bc                 | 
2a1bc                 | _fatfs_cc_create_name
2a1bc     0D 4A 05 F6 | 	mov	COUNT_, #13
2a1c0     A8 00 A0 FD | 	call	#pushregs_
2a1c4     34 F0 07 F1 | 	add	ptra, #52
2a1c8     04 4E 05 F1 | 	add	fp, #4
2a1cc     A7 12 62 FC | 	wrlong	arg01, fp
2a1d0     04 4E 05 F1 | 	add	fp, #4
2a1d4     A7 14 62 FC | 	wrlong	arg02, fp
2a1d8     0A FB 01 FB | 	rdlong	result1, arg02
2a1dc     28 4E 05 F1 | 	add	fp, #40
2a1e0     A7 FA 61 FC | 	wrlong	result1, fp
2a1e4     2C 4E 85 F1 | 	sub	fp, #44
2a1e8     A7 FA 01 FB | 	rdlong	result1, fp
2a1ec     FD 1E 02 FB | 	rdlong	local01, result1
2a1f0     0C 1E 06 F1 | 	add	local01, #12
2a1f4     0F 21 02 FB | 	rdlong	local02, local01
2a1f8     14 4E 05 F1 | 	add	fp, #20
2a1fc     A7 20 62 FC | 	wrlong	local02, fp
2a200     14 4E 05 F1 | 	add	fp, #20
2a204     A7 00 68 FC | 	wrlong	#0, fp
2a208     2C 4E 85 F1 | 	sub	fp, #44
2a20c                 | ' 
2a20c                 | ' 
2a20c                 | ' 
2a20c                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
2a20c                 | ' 	for (;;) {
2a20c                 | LR__4380
2a20c     30 4E 05 F1 | 	add	fp, #48
2a210     A7 12 02 F6 | 	mov	arg01, fp
2a214     30 4E 85 F1 | 	sub	fp, #48
2a218     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
2a21c     1C 4E 05 F1 | 	add	fp, #28
2a220     A7 FA 61 FC | 	wrlong	result1, fp
2a224     1C 4E 85 F1 | 	sub	fp, #28
2a228     FF FF 7F FF 
2a22c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2a230     06 FA 05 A6 |  if_e	mov	result1, #6
2a234     74 08 90 AD |  if_e	jmp	#LR__4420
2a238     1C 4E 05 F1 | 	add	fp, #28
2a23c     A7 1E 02 FB | 	rdlong	local01, fp
2a240     1C 4E 85 F1 | 	sub	fp, #28
2a244     80 00 00 FF 
2a248     00 1E 16 F2 | 	cmp	local01, ##65536 wc
2a24c     3C 00 90 CD |  if_b	jmp	#LR__4381
2a250     18 4E 05 F1 | 	add	fp, #24
2a254     A7 22 02 FB | 	rdlong	local03, fp
2a258     14 4E 05 F1 | 	add	fp, #20
2a25c     A7 1E 02 FB | 	rdlong	local01, fp
2a260     0F 25 02 F6 | 	mov	local04, local01
2a264     01 24 06 F1 | 	add	local04, #1
2a268     A7 24 62 FC | 	wrlong	local04, fp
2a26c     01 1E 66 F0 | 	shl	local01, #1
2a270     11 1F 02 F1 | 	add	local01, local03
2a274     10 4E 85 F1 | 	sub	fp, #16
2a278     A7 26 02 FB | 	rdlong	local05, fp
2a27c     1C 4E 85 F1 | 	sub	fp, #28
2a280     13 29 02 F6 | 	mov	local06, local05
2a284     10 28 46 F0 | 	shr	local06, #16
2a288     0F 29 52 FC | 	wrword	local06, local01
2a28c                 | LR__4381
2a28c     1C 4E 05 F1 | 	add	fp, #28
2a290     A7 1E 02 FB | 	rdlong	local01, fp
2a294     08 4E 85 F1 | 	sub	fp, #8
2a298     A7 1E 52 FC | 	wrword	local01, fp
2a29c     A7 1E E2 FA | 	rdword	local01, fp
2a2a0     14 4E 85 F1 | 	sub	fp, #20
2a2a4     20 1E 16 F2 | 	cmp	local01, #32 wc
2a2a8     B0 00 90 CD |  if_b	jmp	#LR__4383
2a2ac     14 4E 05 F1 | 	add	fp, #20
2a2b0     A7 1E E2 FA | 	rdword	local01, fp
2a2b4     14 4E 85 F1 | 	sub	fp, #20
2a2b8     2F 1E 0E F2 | 	cmp	local01, #47 wz
2a2bc     14 4E 05 51 |  if_ne	add	fp, #20
2a2c0     A7 24 E2 5A |  if_ne	rdword	local04, fp
2a2c4     14 4E 85 51 |  if_ne	sub	fp, #20
2a2c8     5C 24 0E 52 |  if_ne	cmp	local04, #92 wz
2a2cc     8C 00 90 AD |  if_e	jmp	#LR__4383
2a2d0     14 4E 05 F1 | 	add	fp, #20
2a2d4     A7 12 E2 FA | 	rdword	arg01, fp
2a2d8     14 4E 85 F1 | 	sub	fp, #20
2a2dc     80 12 16 F2 | 	cmp	arg01, #128 wc
2a2e0     24 00 90 3D |  if_ae	jmp	#LR__4382
2a2e4     81 01 00 FF 
2a2e8     20 12 06 F6 | 	mov	arg01, ##@LR__5042
2a2ec     14 4E 05 F1 | 	add	fp, #20
2a2f0     A7 14 E2 FA | 	rdword	arg02, fp
2a2f4     14 4E 85 F1 | 	sub	fp, #20
2a2f8     FC D0 BF FD | 	call	#_fatfs_cc_strchr
2a2fc     00 FA 0D F2 | 	cmp	result1, #0 wz
2a300     06 FA 05 56 |  if_ne	mov	result1, #6
2a304     A4 07 90 5D |  if_ne	jmp	#LR__4420
2a308                 | LR__4382
2a308     2C 4E 05 F1 | 	add	fp, #44
2a30c     A7 28 02 FB | 	rdlong	local06, fp
2a310     2C 4E 85 F1 | 	sub	fp, #44
2a314     FF 28 16 F2 | 	cmp	local06, #255 wc
2a318     06 FA 05 36 |  if_ae	mov	result1, #6
2a31c     8C 07 90 3D |  if_ae	jmp	#LR__4420
2a320     18 4E 05 F1 | 	add	fp, #24
2a324     A7 22 02 FB | 	rdlong	local03, fp
2a328     14 4E 05 F1 | 	add	fp, #20
2a32c     A7 20 02 FB | 	rdlong	local02, fp
2a330     10 25 02 F6 | 	mov	local04, local02
2a334     01 24 06 F1 | 	add	local04, #1
2a338     A7 24 62 FC | 	wrlong	local04, fp
2a33c     10 1F 02 F6 | 	mov	local01, local02
2a340     01 1E 66 F0 | 	shl	local01, #1
2a344     11 1F 02 F1 | 	add	local01, local03
2a348     18 4E 85 F1 | 	sub	fp, #24
2a34c     A7 28 E2 FA | 	rdword	local06, fp
2a350     14 4E 85 F1 | 	sub	fp, #20
2a354     0F 29 52 FC | 	wrword	local06, local01
2a358     B0 FE 9F FD | 	jmp	#LR__4380
2a35c                 | LR__4383
2a35c     14 4E 05 F1 | 	add	fp, #20
2a360     A7 2A E2 FA | 	rdword	local07, fp
2a364     14 4E 85 F1 | 	sub	fp, #20
2a368     20 2A 16 F2 | 	cmp	local07, #32 wc
2a36c     10 4E 05 C1 |  if_b	add	fp, #16
2a370     A7 08 48 CC |  if_b	wrbyte	#4, fp
2a374     10 4E 85 C1 |  if_b	sub	fp, #16
2a378     74 00 90 CD |  if_b	jmp	#LR__4388
2a37c     97 24 48 FB | 	callpa	#(@LR__4386-@LR__4384)>>2,fcache_load_ptr_
2a380                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
2a380                 | LR__4384
2a380     30 4E 05 F1 | 	add	fp, #48
2a384     A7 24 02 FB | 	rdlong	local04, fp
2a388     30 4E 85 F1 | 	sub	fp, #48
2a38c     12 2B C2 FA | 	rdbyte	local07, local04
2a390     2F 2A 0E F2 | 	cmp	local07, #47 wz
2a394     18 00 90 AD |  if_e	jmp	#LR__4385
2a398     30 4E 05 F1 | 	add	fp, #48
2a39c     A7 24 02 FB | 	rdlong	local04, fp
2a3a0     30 4E 85 F1 | 	sub	fp, #48
2a3a4     12 21 C2 FA | 	rdbyte	local02, local04
2a3a8     5C 20 0E F2 | 	cmp	local02, #92 wz
2a3ac     18 00 90 5D |  if_ne	jmp	#LR__4387
2a3b0                 | LR__4385
2a3b0     30 4E 05 F1 | 	add	fp, #48
2a3b4     A7 1E 02 FB | 	rdlong	local01, fp
2a3b8     01 1E 06 F1 | 	add	local01, #1
2a3bc     A7 1E 62 FC | 	wrlong	local01, fp
2a3c0     30 4E 85 F1 | 	sub	fp, #48
2a3c4     B8 FF 9F FD | 	jmp	#LR__4384
2a3c8                 | LR__4386
2a3c8                 | LR__4387
2a3c8     10 4E 05 F1 | 	add	fp, #16
2a3cc     A7 00 48 FC | 	wrbyte	#0, fp
2a3d0     20 4E 05 F1 | 	add	fp, #32
2a3d4     A7 28 02 FB | 	rdlong	local06, fp
2a3d8     30 4E 85 F1 | 	sub	fp, #48
2a3dc     14 2B C2 FA | 	rdbyte	local07, local06
2a3e0     20 2A 16 F2 | 	cmp	local07, #32 wc
2a3e4     10 4E 05 C1 |  if_b	add	fp, #16
2a3e8     A7 08 48 CC |  if_b	wrbyte	#4, fp
2a3ec     10 4E 85 C1 |  if_b	sub	fp, #16
2a3f0                 | LR__4388
2a3f0     08 4E 05 F1 | 	add	fp, #8
2a3f4     A7 2A 02 FB | 	rdlong	local07, fp
2a3f8     28 4E 05 F1 | 	add	fp, #40
2a3fc     A7 1E 02 FB | 	rdlong	local01, fp
2a400     30 4E 85 F1 | 	sub	fp, #48
2a404     15 1F 62 FC | 	wrlong	local01, local07
2a408     97 38 48 FB | 	callpa	#(@LR__4390-@LR__4389)>>2,fcache_load_ptr_
2a40c                 | ' 	}
2a40c                 | ' 	*path = p;
2a40c                 | ' #line 2862 "ff.c"
2a40c                 | ' 	while (di) {
2a40c                 | LR__4389
2a40c     2C 4E 05 F1 | 	add	fp, #44
2a410     A7 2A 0A FB | 	rdlong	local07, fp wz
2a414     2C 4E 85 F1 | 	sub	fp, #44
2a418     60 00 90 AD |  if_e	jmp	#LR__4391
2a41c     18 4E 05 F1 | 	add	fp, #24
2a420     A7 28 02 FB | 	rdlong	local06, fp
2a424     14 4E 05 F1 | 	add	fp, #20
2a428     A7 24 02 FB | 	rdlong	local04, fp
2a42c     01 24 86 F1 | 	sub	local04, #1
2a430     01 24 66 F0 | 	shl	local04, #1
2a434     14 25 02 F1 | 	add	local04, local06
2a438     12 29 E2 FA | 	rdword	local06, local04
2a43c     18 4E 85 F1 | 	sub	fp, #24
2a440     A7 28 52 FC | 	wrword	local06, fp
2a444     A7 2A E2 FA | 	rdword	local07, fp
2a448     14 4E 85 F1 | 	sub	fp, #20
2a44c     20 2A 0E F2 | 	cmp	local07, #32 wz
2a450     14 4E 05 51 |  if_ne	add	fp, #20
2a454     A7 1E E2 5A |  if_ne	rdword	local01, fp
2a458     14 4E 85 51 |  if_ne	sub	fp, #20
2a45c     2E 1E 0E 52 |  if_ne	cmp	local01, #46 wz
2a460     18 00 90 5D |  if_ne	jmp	#LR__4391
2a464     2C 4E 05 F1 | 	add	fp, #44
2a468     A7 1E 02 FB | 	rdlong	local01, fp
2a46c     01 1E 86 F1 | 	sub	local01, #1
2a470     A7 1E 62 FC | 	wrlong	local01, fp
2a474     2C 4E 85 F1 | 	sub	fp, #44
2a478     90 FF 9F FD | 	jmp	#LR__4389
2a47c                 | LR__4390
2a47c                 | LR__4391
2a47c     18 4E 05 F1 | 	add	fp, #24
2a480     A7 2C 02 FB | 	rdlong	local08, fp
2a484     14 4E 05 F1 | 	add	fp, #20
2a488     A7 24 02 FB | 	rdlong	local04, fp
2a48c     01 24 66 F0 | 	shl	local04, #1
2a490     16 25 02 F1 | 	add	local04, local08
2a494     12 01 58 FC | 	wrword	#0, local04
2a498     A7 2A 0A FB | 	rdlong	local07, fp wz
2a49c     2C 4E 85 F1 | 	sub	fp, #44
2a4a0     06 FA 05 A6 |  if_e	mov	result1, #6
2a4a4     04 06 90 AD |  if_e	jmp	#LR__4420
2a4a8                 | ' 
2a4a8                 | ' 
2a4a8                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
2a4a8     28 4E 05 F1 | 	add	fp, #40
2a4ac     A7 00 68 FC | 	wrlong	#0, fp
2a4b0     28 4E 85 F1 | 	sub	fp, #40
2a4b4     97 22 48 FB | 	callpa	#(@LR__4393-@LR__4392)>>2,fcache_load_ptr_
2a4b8                 | LR__4392
2a4b8     18 4E 05 F1 | 	add	fp, #24
2a4bc     A7 2E 02 FB | 	rdlong	local09, fp
2a4c0     10 4E 05 F1 | 	add	fp, #16
2a4c4     A7 30 02 FB | 	rdlong	local10, fp
2a4c8     28 4E 85 F1 | 	sub	fp, #40
2a4cc     01 30 66 F0 | 	shl	local10, #1
2a4d0     17 31 02 F1 | 	add	local10, local09
2a4d4     18 33 E2 FA | 	rdword	local11, local10
2a4d8     20 32 0E F2 | 	cmp	local11, #32 wz
2a4dc     1C 00 90 5D |  if_ne	jmp	#LR__4394
2a4e0     28 4E 05 F1 | 	add	fp, #40
2a4e4     A7 34 02 FB | 	rdlong	local12, fp
2a4e8     1A 27 02 F6 | 	mov	local05, local12
2a4ec     01 26 06 F1 | 	add	local05, #1
2a4f0     A7 26 62 FC | 	wrlong	local05, fp
2a4f4     28 4E 85 F1 | 	sub	fp, #40
2a4f8     BC FF 9F FD | 	jmp	#LR__4392
2a4fc                 | LR__4393
2a4fc                 | LR__4394
2a4fc     28 4E 05 F1 | 	add	fp, #40
2a500     A7 2A 02 FB | 	rdlong	local07, fp
2a504     28 4E 85 F1 | 	sub	fp, #40
2a508     01 2A 16 F2 | 	cmp	local07, #1 wc
2a50c     28 00 90 3D |  if_ae	jmp	#LR__4395
2a510     18 4E 05 F1 | 	add	fp, #24
2a514     A7 22 02 FB | 	rdlong	local03, fp
2a518     10 4E 05 F1 | 	add	fp, #16
2a51c     A7 2E 02 FB | 	rdlong	local09, fp
2a520     28 4E 85 F1 | 	sub	fp, #40
2a524     01 2E 66 F0 | 	shl	local09, #1
2a528     11 2F 02 F1 | 	add	local09, local03
2a52c     17 1F E2 FA | 	rdword	local01, local09
2a530     2E 1E 0E F2 | 	cmp	local01, #46 wz
2a534     14 00 90 5D |  if_ne	jmp	#LR__4396
2a538                 | LR__4395
2a538     10 4E 05 F1 | 	add	fp, #16
2a53c     A7 2A C2 FA | 	rdbyte	local07, fp
2a540     03 2A 46 F5 | 	or	local07, #3
2a544     A7 2A 42 FC | 	wrbyte	local07, fp
2a548     10 4E 85 F1 | 	sub	fp, #16
2a54c                 | LR__4396
2a54c     97 2C 48 FB | 	callpa	#(@LR__4398-@LR__4397)>>2,fcache_load_ptr_
2a550                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
2a550                 | LR__4397
2a550     2C 4E 05 F1 | 	add	fp, #44
2a554     A7 2A 02 FB | 	rdlong	local07, fp
2a558     2C 4E 85 F1 | 	sub	fp, #44
2a55c     01 2A 16 F2 | 	cmp	local07, #1 wc
2a560     44 00 90 CD |  if_b	jmp	#LR__4399
2a564     18 4E 05 F1 | 	add	fp, #24
2a568     A7 28 02 FB | 	rdlong	local06, fp
2a56c     14 4E 05 F1 | 	add	fp, #20
2a570     A7 22 02 FB | 	rdlong	local03, fp
2a574     2C 4E 85 F1 | 	sub	fp, #44
2a578     01 22 86 F1 | 	sub	local03, #1
2a57c     01 22 66 F0 | 	shl	local03, #1
2a580     14 23 02 F1 | 	add	local03, local06
2a584     11 1F E2 FA | 	rdword	local01, local03
2a588     2E 1E 0E F2 | 	cmp	local01, #46 wz
2a58c     18 00 90 AD |  if_e	jmp	#LR__4399
2a590     2C 4E 05 F1 | 	add	fp, #44
2a594     A7 1E 02 FB | 	rdlong	local01, fp
2a598     01 1E 86 F1 | 	sub	local01, #1
2a59c     A7 1E 62 FC | 	wrlong	local01, fp
2a5a0     2C 4E 85 F1 | 	sub	fp, #44
2a5a4     A8 FF 9F FD | 	jmp	#LR__4397
2a5a8                 | LR__4398
2a5a8                 | LR__4399
2a5a8     04 4E 05 F1 | 	add	fp, #4
2a5ac     A7 12 02 FB | 	rdlong	arg01, fp
2a5b0     04 4E 85 F1 | 	sub	fp, #4
2a5b4     20 12 06 F1 | 	add	arg01, #32
2a5b8     20 14 06 F6 | 	mov	arg02, #32
2a5bc     0B 16 06 F6 | 	mov	arg03, #11
2a5c0     09 37 02 F6 | 	mov	local13, arg01
2a5c4     98 00 A0 FD | 	call	#\builtin_bytefill_
2a5c8     1B FB 01 F6 | 	mov	result1, local13
2a5cc     0C 4E 05 F1 | 	add	fp, #12
2a5d0     A7 00 48 FC | 	wrbyte	#0, fp
2a5d4     A7 2A C2 FA | 	rdbyte	local07, fp
2a5d8     14 4E 05 F1 | 	add	fp, #20
2a5dc     A7 2A 62 FC | 	wrlong	local07, fp
2a5e0     04 4E 05 F1 | 	add	fp, #4
2a5e4     A7 10 68 FC | 	wrlong	#8, fp
2a5e8     24 4E 85 F1 | 	sub	fp, #36
2a5ec                 | ' 
2a5ec                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
2a5ec                 | ' 	i = b = 0; ni = 8;
2a5ec                 | ' 	for (;;) {
2a5ec                 | LR__4400
2a5ec     18 4E 05 F1 | 	add	fp, #24
2a5f0     A7 22 02 FB | 	rdlong	local03, fp
2a5f4     10 4E 05 F1 | 	add	fp, #16
2a5f8     A7 2E 02 FB | 	rdlong	local09, fp
2a5fc     17 25 02 F6 | 	mov	local04, local09
2a600     01 24 06 F1 | 	add	local04, #1
2a604     A7 24 62 FC | 	wrlong	local04, fp
2a608     01 2E 66 F0 | 	shl	local09, #1
2a60c     11 2F 02 F1 | 	add	local09, local03
2a610     17 29 E2 FA | 	rdword	local06, local09
2a614     14 4E 85 F1 | 	sub	fp, #20
2a618     A7 28 52 FC | 	wrword	local06, fp
2a61c     A7 2A EA FA | 	rdword	local07, fp wz
2a620     14 4E 85 F1 | 	sub	fp, #20
2a624     74 03 90 AD |  if_e	jmp	#LR__4416
2a628     14 4E 05 F1 | 	add	fp, #20
2a62c     A7 2A E2 FA | 	rdword	local07, fp
2a630     14 4E 85 F1 | 	sub	fp, #20
2a634     20 2A 0E F2 | 	cmp	local07, #32 wz
2a638     30 00 90 AD |  if_e	jmp	#LR__4401
2a63c     14 4E 05 F1 | 	add	fp, #20
2a640     A7 1E E2 FA | 	rdword	local01, fp
2a644     14 4E 85 F1 | 	sub	fp, #20
2a648     2E 1E 0E F2 | 	cmp	local01, #46 wz
2a64c     34 00 90 5D |  if_ne	jmp	#LR__4402
2a650     28 4E 05 F1 | 	add	fp, #40
2a654     A7 24 02 FB | 	rdlong	local04, fp
2a658     04 4E 05 F1 | 	add	fp, #4
2a65c     A7 30 02 FB | 	rdlong	local10, fp
2a660     2C 4E 85 F1 | 	sub	fp, #44
2a664     18 25 0A F2 | 	cmp	local04, local10 wz
2a668     18 00 90 AD |  if_e	jmp	#LR__4402
2a66c                 | LR__4401
2a66c     10 4E 05 F1 | 	add	fp, #16
2a670     A7 2A C2 FA | 	rdbyte	local07, fp
2a674     03 2A 46 F5 | 	or	local07, #3
2a678     A7 2A 42 FC | 	wrbyte	local07, fp
2a67c     10 4E 85 F1 | 	sub	fp, #16
2a680                 | ' 			cf |=  0x01  |  0x02 ;
2a680                 | ' 			continue;
2a680     68 FF 9F FD | 	jmp	#LR__4400
2a684                 | LR__4402
2a684     20 4E 05 F1 | 	add	fp, #32
2a688     A7 2A 02 FB | 	rdlong	local07, fp
2a68c     04 4E 05 F1 | 	add	fp, #4
2a690     A7 1E 02 FB | 	rdlong	local01, fp
2a694     24 4E 85 F1 | 	sub	fp, #36
2a698     0F 2B 12 F2 | 	cmp	local07, local01 wc
2a69c     1C 00 90 3D |  if_ae	jmp	#LR__4403
2a6a0     28 4E 05 F1 | 	add	fp, #40
2a6a4     A7 2C 02 FB | 	rdlong	local08, fp
2a6a8     04 4E 05 F1 | 	add	fp, #4
2a6ac     A7 30 02 FB | 	rdlong	local10, fp
2a6b0     2C 4E 85 F1 | 	sub	fp, #44
2a6b4     18 2D 0A F2 | 	cmp	local08, local10 wz
2a6b8     B0 00 90 5D |  if_ne	jmp	#LR__4405
2a6bc                 | LR__4403
2a6bc     24 4E 05 F1 | 	add	fp, #36
2a6c0     A7 2A 02 FB | 	rdlong	local07, fp
2a6c4     24 4E 85 F1 | 	sub	fp, #36
2a6c8     0B 2A 0E F2 | 	cmp	local07, #11 wz
2a6cc     18 00 90 5D |  if_ne	jmp	#LR__4404
2a6d0     10 4E 05 F1 | 	add	fp, #16
2a6d4     A7 2A C2 FA | 	rdbyte	local07, fp
2a6d8     03 2A 46 F5 | 	or	local07, #3
2a6dc     A7 2A 42 FC | 	wrbyte	local07, fp
2a6e0     10 4E 85 F1 | 	sub	fp, #16
2a6e4                 | ' 				cf |=  0x01  |  0x02 ;
2a6e4                 | ' 				break;
2a6e4     B4 02 90 FD | 	jmp	#LR__4416
2a6e8                 | LR__4404
2a6e8     28 4E 05 F1 | 	add	fp, #40
2a6ec     A7 2A 02 FB | 	rdlong	local07, fp
2a6f0     04 4E 05 F1 | 	add	fp, #4
2a6f4     A7 1E 02 FB | 	rdlong	local01, fp
2a6f8     2C 4E 85 F1 | 	sub	fp, #44
2a6fc     0F 2B 0A F2 | 	cmp	local07, local01 wz
2a700     10 4E 05 51 |  if_ne	add	fp, #16
2a704     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
2a708     03 2A 46 55 |  if_ne	or	local07, #3
2a70c     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
2a710     10 4E 85 51 |  if_ne	sub	fp, #16
2a714     28 4E 05 F1 | 	add	fp, #40
2a718     A7 2A 02 FB | 	rdlong	local07, fp
2a71c     04 4E 05 F1 | 	add	fp, #4
2a720     A7 20 02 FB | 	rdlong	local02, fp
2a724     2C 4E 85 F1 | 	sub	fp, #44
2a728     10 2B 1A F2 | 	cmp	local07, local02 wcz
2a72c     6C 02 90 1D |  if_a	jmp	#LR__4416
2a730     2C 4E 05 F1 | 	add	fp, #44
2a734     A7 2A 02 FB | 	rdlong	local07, fp
2a738     04 4E 85 F1 | 	sub	fp, #4
2a73c     A7 2A 62 FC | 	wrlong	local07, fp
2a740     08 4E 85 F1 | 	sub	fp, #8
2a744     A7 10 68 FC | 	wrlong	#8, fp
2a748     04 4E 05 F1 | 	add	fp, #4
2a74c     A7 16 68 FC | 	wrlong	#11, fp
2a750     18 4E 85 F1 | 	sub	fp, #24
2a754     A7 32 C2 FA | 	rdbyte	local11, fp
2a758     19 2B E2 F8 | 	getbyte	local07, local11, #0
2a75c     02 2A 66 F0 | 	shl	local07, #2
2a760     A7 2A 42 FC | 	wrbyte	local07, fp
2a764     0C 4E 85 F1 | 	sub	fp, #12
2a768                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
2a768                 | ' 			continue;
2a768     80 FE 9F FD | 	jmp	#LR__4400
2a76c                 | LR__4405
2a76c     14 4E 05 F1 | 	add	fp, #20
2a770     A7 2A E2 FA | 	rdword	local07, fp
2a774     14 4E 85 F1 | 	sub	fp, #20
2a778     80 2A 16 F2 | 	cmp	local07, #128 wc
2a77c     6C 00 90 CD |  if_b	jmp	#LR__4407
2a780     10 4E 05 F1 | 	add	fp, #16
2a784     A7 2A C2 FA | 	rdbyte	local07, fp
2a788     02 2A 46 F5 | 	or	local07, #2
2a78c     A7 2A 42 FC | 	wrbyte	local07, fp
2a790     04 4E 05 F1 | 	add	fp, #4
2a794     A7 12 E2 FA | 	rdword	arg01, fp
2a798     14 4E 85 F1 | 	sub	fp, #20
2a79c     01 00 00 FF 
2a7a0     52 15 06 F6 | 	mov	arg02, ##850
2a7a4     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
2a7a8     14 4E 05 F1 | 	add	fp, #20
2a7ac     A7 FA 51 FC | 	wrword	result1, fp
2a7b0     A7 2A E2 FA | 	rdword	local07, fp
2a7b4     14 4E 85 F1 | 	sub	fp, #20
2a7b8     80 2A CE F7 | 	test	local07, #128 wz
2a7bc     2C 00 90 AD |  if_e	jmp	#LR__4406
2a7c0     14 4E 05 F1 | 	add	fp, #20
2a7c4     A7 20 E2 FA | 	rdword	local02, fp
2a7c8     7F 20 06 F5 | 	and	local02, #127
2a7cc     01 00 00 FF 
2a7d0     BB ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
2a7d4     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
2a7d8     10 2B C2 FA | 	rdbyte	local07, local02
2a7dc     A7 2A 52 FC | 	wrword	local07, fp
2a7e0     14 4E 85 F1 | 	sub	fp, #20
2a7e4     01 00 00 FF 
2a7e8     BB ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
2a7ec                 | LR__4406
2a7ec                 | LR__4407
2a7ec     14 4E 05 F1 | 	add	fp, #20
2a7f0     A7 2A E2 FA | 	rdword	local07, fp
2a7f4     14 4E 85 F1 | 	sub	fp, #20
2a7f8     00 2B 16 F2 | 	cmp	local07, #256 wc
2a7fc     88 00 90 CD |  if_b	jmp	#LR__4409
2a800     24 4E 05 F1 | 	add	fp, #36
2a804     A7 2A 02 FB | 	rdlong	local07, fp
2a808     01 2A 86 F1 | 	sub	local07, #1
2a80c     04 4E 85 F1 | 	sub	fp, #4
2a810     A7 20 02 FB | 	rdlong	local02, fp
2a814     20 4E 85 F1 | 	sub	fp, #32
2a818     15 21 12 F2 | 	cmp	local02, local07 wc
2a81c     2C 00 90 CD |  if_b	jmp	#LR__4408
2a820     10 4E 05 F1 | 	add	fp, #16
2a824     A7 32 C2 FA | 	rdbyte	local11, fp
2a828     19 2B E2 F8 | 	getbyte	local07, local11, #0
2a82c     03 2A 46 F5 | 	or	local07, #3
2a830     A7 2A 42 FC | 	wrbyte	local07, fp
2a834     14 4E 05 F1 | 	add	fp, #20
2a838     A7 2A 02 FB | 	rdlong	local07, fp
2a83c     04 4E 85 F1 | 	sub	fp, #4
2a840     A7 2A 62 FC | 	wrlong	local07, fp
2a844     20 4E 85 F1 | 	sub	fp, #32
2a848                 | ' 				cf |=  0x01  |  0x02 ;
2a848                 | ' 				i = ni; continue;
2a848     A0 FD 9F FD | 	jmp	#LR__4400
2a84c                 | LR__4408
2a84c     04 4E 05 F1 | 	add	fp, #4
2a850     A7 2E 02 FB | 	rdlong	local09, fp
2a854     1C 4E 05 F1 | 	add	fp, #28
2a858     A7 30 02 FB | 	rdlong	local10, fp
2a85c     18 25 02 F6 | 	mov	local04, local10
2a860     01 24 06 F1 | 	add	local04, #1
2a864     A7 24 62 FC | 	wrlong	local04, fp
2a868     20 2E 06 F1 | 	add	local09, #32
2a86c     17 31 02 F1 | 	add	local10, local09
2a870     0C 4E 85 F1 | 	sub	fp, #12
2a874     A7 22 E2 FA | 	rdword	local03, fp
2a878     14 4E 85 F1 | 	sub	fp, #20
2a87c     08 22 46 F0 | 	shr	local03, #8
2a880     18 23 42 FC | 	wrbyte	local03, local10
2a884     D4 00 90 FD | 	jmp	#LR__4415
2a888                 | LR__4409
2a888     14 4E 05 F1 | 	add	fp, #20
2a88c     A7 2A EA FA | 	rdword	local07, fp wz
2a890     14 4E 85 F1 | 	sub	fp, #20
2a894     20 00 90 AD |  if_e	jmp	#LR__4410
2a898     81 01 00 FF 
2a89c     29 12 06 F6 | 	mov	arg01, ##@LR__5043
2a8a0     14 4E 05 F1 | 	add	fp, #20
2a8a4     A7 14 E2 FA | 	rdword	arg02, fp
2a8a8     14 4E 85 F1 | 	sub	fp, #20
2a8ac     48 CB BF FD | 	call	#_fatfs_cc_strchr
2a8b0     00 FA 0D F2 | 	cmp	result1, #0 wz
2a8b4     20 00 90 AD |  if_e	jmp	#LR__4411
2a8b8                 | LR__4410
2a8b8     14 4E 05 F1 | 	add	fp, #20
2a8bc     A7 BE 58 FC | 	wrword	#95, fp
2a8c0     04 4E 85 F1 | 	sub	fp, #4
2a8c4     A7 2A C2 FA | 	rdbyte	local07, fp
2a8c8     03 2A 46 F5 | 	or	local07, #3
2a8cc     A7 2A 42 FC | 	wrbyte	local07, fp
2a8d0     10 4E 85 F1 | 	sub	fp, #16
2a8d4     84 00 90 FD | 	jmp	#LR__4414
2a8d8                 | LR__4411
2a8d8     14 4E 05 F1 | 	add	fp, #20
2a8dc     A7 2A E2 FA | 	rdword	local07, fp
2a8e0     14 4E 85 F1 | 	sub	fp, #20
2a8e4     41 2A 16 F2 | 	cmp	local07, #65 wc
2a8e8     24 00 90 CD |  if_b	jmp	#LR__4412
2a8ec     14 4E 05 F1 | 	add	fp, #20
2a8f0     A7 1E E2 FA | 	rdword	local01, fp
2a8f4     14 4E 85 F1 | 	sub	fp, #20
2a8f8     5B 1E 16 F2 | 	cmp	local01, #91 wc
2a8fc     0C 4E 05 C1 |  if_b	add	fp, #12
2a900     A7 2A C2 CA |  if_b	rdbyte	local07, fp
2a904     02 2A 46 C5 |  if_b	or	local07, #2
2a908     A7 2A 42 CC |  if_b	wrbyte	local07, fp
2a90c     0C 4E 85 C1 |  if_b	sub	fp, #12
2a910                 | LR__4412
2a910     14 4E 05 F1 | 	add	fp, #20
2a914     A7 2A E2 FA | 	rdword	local07, fp
2a918     14 4E 85 F1 | 	sub	fp, #20
2a91c     61 2A 16 F2 | 	cmp	local07, #97 wc
2a920     38 00 90 CD |  if_b	jmp	#LR__4413
2a924     14 4E 05 F1 | 	add	fp, #20
2a928     A7 1E E2 FA | 	rdword	local01, fp
2a92c     14 4E 85 F1 | 	sub	fp, #20
2a930     7B 1E 16 F2 | 	cmp	local01, #123 wc
2a934     24 00 90 3D |  if_ae	jmp	#LR__4413
2a938     0C 4E 05 F1 | 	add	fp, #12
2a93c     A7 2A C2 FA | 	rdbyte	local07, fp
2a940     01 2A 46 F5 | 	or	local07, #1
2a944     A7 2A 42 FC | 	wrbyte	local07, fp
2a948     08 4E 05 F1 | 	add	fp, #8
2a94c     A7 2A E2 FA | 	rdword	local07, fp
2a950     20 2A 86 F1 | 	sub	local07, #32
2a954     A7 2A 52 FC | 	wrword	local07, fp
2a958     14 4E 85 F1 | 	sub	fp, #20
2a95c                 | LR__4413
2a95c                 | LR__4414
2a95c                 | LR__4415
2a95c     04 4E 05 F1 | 	add	fp, #4
2a960     A7 32 02 FB | 	rdlong	local11, fp
2a964     19 2F 02 F6 | 	mov	local09, local11
2a968     1C 4E 05 F1 | 	add	fp, #28
2a96c     A7 20 02 FB | 	rdlong	local02, fp
2a970     10 25 02 F6 | 	mov	local04, local02
2a974     01 24 06 F1 | 	add	local04, #1
2a978     A7 24 62 FC | 	wrlong	local04, fp
2a97c     10 31 02 F6 | 	mov	local10, local02
2a980     20 2E 06 F1 | 	add	local09, #32
2a984     17 31 02 F1 | 	add	local10, local09
2a988     0C 4E 85 F1 | 	sub	fp, #12
2a98c     A7 22 E2 FA | 	rdword	local03, fp
2a990     14 4E 85 F1 | 	sub	fp, #20
2a994     18 23 42 FC | 	wrbyte	local03, local10
2a998     50 FC 9F FD | 	jmp	#LR__4400
2a99c                 | LR__4416
2a99c     04 4E 05 F1 | 	add	fp, #4
2a9a0     A7 32 02 FB | 	rdlong	local11, fp
2a9a4     04 4E 85 F1 | 	sub	fp, #4
2a9a8     20 32 06 F1 | 	add	local11, #32
2a9ac     19 2B C2 FA | 	rdbyte	local07, local11
2a9b0     E5 2A 0E F2 | 	cmp	local07, #229 wz
2a9b4     04 4E 05 A1 |  if_e	add	fp, #4
2a9b8     A7 2A 02 AB |  if_e	rdlong	local07, fp
2a9bc     04 4E 85 A1 |  if_e	sub	fp, #4
2a9c0     20 2A 06 A1 |  if_e	add	local07, #32
2a9c4     15 0B 48 AC |  if_e	wrbyte	#5, local07
2a9c8     24 4E 05 F1 | 	add	fp, #36
2a9cc     A7 2A 02 FB | 	rdlong	local07, fp
2a9d0     24 4E 85 F1 | 	sub	fp, #36
2a9d4     08 2A 0E F2 | 	cmp	local07, #8 wz
2a9d8     0C 4E 05 A1 |  if_e	add	fp, #12
2a9dc     A7 2A C2 AA |  if_e	rdbyte	local07, fp
2a9e0     02 2A 66 A0 |  if_e	shl	local07, #2
2a9e4     A7 2A 42 AC |  if_e	wrbyte	local07, fp
2a9e8     0C 4E 85 A1 |  if_e	sub	fp, #12
2a9ec     0C 4E 05 F1 | 	add	fp, #12
2a9f0     A7 2A C2 FA | 	rdbyte	local07, fp
2a9f4     0C 4E 85 F1 | 	sub	fp, #12
2a9f8     0C 2A 06 F5 | 	and	local07, #12
2a9fc     0C 2A 0E F2 | 	cmp	local07, #12 wz
2aa00     18 00 90 AD |  if_e	jmp	#LR__4417
2aa04     0C 4E 05 F1 | 	add	fp, #12
2aa08     A7 1E C2 FA | 	rdbyte	local01, fp
2aa0c     0C 4E 85 F1 | 	sub	fp, #12
2aa10     03 1E 06 F5 | 	and	local01, #3
2aa14     03 1E 0E F2 | 	cmp	local01, #3 wz
2aa18     14 00 90 5D |  if_ne	jmp	#LR__4418
2aa1c                 | LR__4417
2aa1c     10 4E 05 F1 | 	add	fp, #16
2aa20     A7 2A C2 FA | 	rdbyte	local07, fp
2aa24     02 2A 46 F5 | 	or	local07, #2
2aa28     A7 2A 42 FC | 	wrbyte	local07, fp
2aa2c     10 4E 85 F1 | 	sub	fp, #16
2aa30                 | LR__4418
2aa30     10 4E 05 F1 | 	add	fp, #16
2aa34     A7 2A C2 FA | 	rdbyte	local07, fp
2aa38     10 4E 85 F1 | 	sub	fp, #16
2aa3c     02 2A CE F7 | 	test	local07, #2 wz
2aa40     48 00 90 5D |  if_ne	jmp	#LR__4419
2aa44     0C 4E 05 F1 | 	add	fp, #12
2aa48     A7 2A C2 FA | 	rdbyte	local07, fp
2aa4c     0C 4E 85 F1 | 	sub	fp, #12
2aa50     01 2A CE F7 | 	test	local07, #1 wz
2aa54     10 4E 05 51 |  if_ne	add	fp, #16
2aa58     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
2aa5c     10 2A 46 55 |  if_ne	or	local07, #16
2aa60     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
2aa64     10 4E 85 51 |  if_ne	sub	fp, #16
2aa68     0C 4E 05 F1 | 	add	fp, #12
2aa6c     A7 2A C2 FA | 	rdbyte	local07, fp
2aa70     0C 4E 85 F1 | 	sub	fp, #12
2aa74     04 2A CE F7 | 	test	local07, #4 wz
2aa78     10 4E 05 51 |  if_ne	add	fp, #16
2aa7c     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
2aa80     08 2A 46 55 |  if_ne	or	local07, #8
2aa84     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
2aa88     10 4E 85 51 |  if_ne	sub	fp, #16
2aa8c                 | LR__4419
2aa8c     04 4E 05 F1 | 	add	fp, #4
2aa90     A7 2A 02 FB | 	rdlong	local07, fp
2aa94     0C 4E 05 F1 | 	add	fp, #12
2aa98     A7 1E C2 FA | 	rdbyte	local01, fp
2aa9c     10 4E 85 F1 | 	sub	fp, #16
2aaa0     2B 2A 06 F1 | 	add	local07, #43
2aaa4     15 1F 42 FC | 	wrbyte	local01, local07
2aaa8                 | ' 	}
2aaa8                 | ' 
2aaa8                 | ' 	dp->fn[ 11 ] = cf;
2aaa8                 | ' 
2aaa8                 | ' 	return FR_OK;
2aaa8     00 FA 05 F6 | 	mov	result1, #0
2aaac                 | LR__4420
2aaac     A7 F0 03 F6 | 	mov	ptra, fp
2aab0     B2 00 A0 FD | 	call	#popregs_
2aab4                 | _fatfs_cc_create_name_ret
2aab4     2D 00 64 FD | 	ret
2aab8                 | 
2aab8                 | _fatfs_cc_follow_path
2aab8     02 4A 05 F6 | 	mov	COUNT_, #2
2aabc     A8 00 A0 FD | 	call	#pushregs_
2aac0     18 F0 07 F1 | 	add	ptra, #24
2aac4     04 4E 05 F1 | 	add	fp, #4
2aac8     A7 12 62 FC | 	wrlong	arg01, fp
2aacc     04 4E 05 F1 | 	add	fp, #4
2aad0     A7 14 62 FC | 	wrlong	arg02, fp
2aad4     04 4E 85 F1 | 	sub	fp, #4
2aad8     A7 FA 01 FB | 	rdlong	result1, fp
2aadc     FD 1E 02 FB | 	rdlong	local01, result1
2aae0     10 4E 05 F1 | 	add	fp, #16
2aae4     A7 1E 62 FC | 	wrlong	local01, fp
2aae8     14 4E 85 F1 | 	sub	fp, #20
2aaec     97 24 48 FB | 	callpa	#(@LR__4432-@LR__4430)>>2,fcache_load_ptr_
2aaf0                 | ' )
2aaf0                 | ' {
2aaf0                 | ' 	FRESULT res;
2aaf0                 | ' 	BYTE ns;
2aaf0                 | ' 	FATFS *fs = dp->obj.fs;
2aaf0                 | ' #line 3034 "ff.c"
2aaf0                 | ' 	{
2aaf0                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
2aaf0                 | LR__4430
2aaf0     08 4E 05 F1 | 	add	fp, #8
2aaf4     A7 1E 02 FB | 	rdlong	local01, fp
2aaf8     08 4E 85 F1 | 	sub	fp, #8
2aafc     0F 1F C2 FA | 	rdbyte	local01, local01
2ab00     2F 1E 0E F2 | 	cmp	local01, #47 wz
2ab04     18 00 90 AD |  if_e	jmp	#LR__4431
2ab08     08 4E 05 F1 | 	add	fp, #8
2ab0c     A7 1E 02 FB | 	rdlong	local01, fp
2ab10     08 4E 85 F1 | 	sub	fp, #8
2ab14     0F 1F C2 FA | 	rdbyte	local01, local01
2ab18     5C 1E 0E F2 | 	cmp	local01, #92 wz
2ab1c     18 00 90 5D |  if_ne	jmp	#LR__4433
2ab20                 | LR__4431
2ab20     08 4E 05 F1 | 	add	fp, #8
2ab24     A7 1E 02 FB | 	rdlong	local01, fp
2ab28     01 1E 06 F1 | 	add	local01, #1
2ab2c     A7 1E 62 FC | 	wrlong	local01, fp
2ab30     08 4E 85 F1 | 	sub	fp, #8
2ab34     B8 FF 9F FD | 	jmp	#LR__4430
2ab38                 | LR__4432
2ab38                 | LR__4433
2ab38     04 4E 05 F1 | 	add	fp, #4
2ab3c     A7 1E 02 FB | 	rdlong	local01, fp
2ab40     08 1E 06 F1 | 	add	local01, #8
2ab44     0F 01 68 FC | 	wrlong	#0, local01
2ab48     04 4E 05 F1 | 	add	fp, #4
2ab4c     A7 1E 02 FB | 	rdlong	local01, fp
2ab50     08 4E 85 F1 | 	sub	fp, #8
2ab54     0F 1F C2 FA | 	rdbyte	local01, local01
2ab58     20 1E 16 F2 | 	cmp	local01, #32 wc
2ab5c     30 00 90 3D |  if_ae	jmp	#LR__4434
2ab60     04 4E 05 F1 | 	add	fp, #4
2ab64     A7 1E 02 FB | 	rdlong	local01, fp
2ab68     2B 1E 06 F1 | 	add	local01, #43
2ab6c     0F 01 49 FC | 	wrbyte	#128, local01
2ab70     A7 12 02 FB | 	rdlong	arg01, fp
2ab74     04 4E 85 F1 | 	sub	fp, #4
2ab78     00 14 06 F6 | 	mov	arg02, #0
2ab7c     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
2ab80     0C 4E 05 F1 | 	add	fp, #12
2ab84     A7 FA 61 FC | 	wrlong	result1, fp
2ab88     0C 4E 85 F1 | 	sub	fp, #12
2ab8c     1C 01 90 FD | 	jmp	#LR__4438
2ab90                 | LR__4434
2ab90                 | ' 		for (;;) {
2ab90                 | LR__4435
2ab90     04 4E 05 F1 | 	add	fp, #4
2ab94     A7 12 02 FB | 	rdlong	arg01, fp
2ab98     04 4E 05 F1 | 	add	fp, #4
2ab9c     A7 14 02 F6 | 	mov	arg02, fp
2aba0     08 4E 85 F1 | 	sub	fp, #8
2aba4     14 F6 BF FD | 	call	#_fatfs_cc_create_name
2aba8     0C 4E 05 F1 | 	add	fp, #12
2abac     A7 FA 61 FC | 	wrlong	result1, fp
2abb0     00 FA 4D F2 | 	cmps	result1, #0 wz
2abb4     0C 4E 85 F1 | 	sub	fp, #12
2abb8     F0 00 90 5D |  if_ne	jmp	#LR__4437
2abbc     04 4E 05 F1 | 	add	fp, #4
2abc0     A7 12 02 FB | 	rdlong	arg01, fp
2abc4     04 4E 85 F1 | 	sub	fp, #4
2abc8     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
2abcc     0C 4E 05 F1 | 	add	fp, #12
2abd0     A7 FA 61 FC | 	wrlong	result1, fp
2abd4     08 4E 85 F1 | 	sub	fp, #8
2abd8     A7 1E 02 FB | 	rdlong	local01, fp
2abdc     2B 1E 06 F1 | 	add	local01, #43
2abe0     0F 1F C2 FA | 	rdbyte	local01, local01
2abe4     0C 4E 05 F1 | 	add	fp, #12
2abe8     A7 1E 42 FC | 	wrbyte	local01, fp
2abec     04 4E 85 F1 | 	sub	fp, #4
2abf0     A7 1E 0A FB | 	rdlong	local01, fp wz
2abf4     0C 4E 85 F1 | 	sub	fp, #12
2abf8     34 00 90 AD |  if_e	jmp	#LR__4436
2abfc     0C 4E 05 F1 | 	add	fp, #12
2ac00     A7 1E 02 FB | 	rdlong	local01, fp
2ac04     0C 4E 85 F1 | 	sub	fp, #12
2ac08     04 1E 0E F2 | 	cmp	local01, #4 wz
2ac0c     9C 00 90 5D |  if_ne	jmp	#LR__4437
2ac10     10 4E 05 F1 | 	add	fp, #16
2ac14     A7 1E C2 FA | 	rdbyte	local01, fp
2ac18     10 4E 85 F1 | 	sub	fp, #16
2ac1c     04 1E CE F7 | 	test	local01, #4 wz
2ac20     0C 4E 05 A1 |  if_e	add	fp, #12
2ac24     A7 0A 68 AC |  if_e	wrlong	#5, fp
2ac28     0C 4E 85 A1 |  if_e	sub	fp, #12
2ac2c                 | ' 					}
2ac2c                 | ' 				}
2ac2c                 | ' 				break;
2ac2c     7C 00 90 FD | 	jmp	#LR__4437
2ac30                 | LR__4436
2ac30     10 4E 05 F1 | 	add	fp, #16
2ac34     A7 1E C2 FA | 	rdbyte	local01, fp
2ac38     10 4E 85 F1 | 	sub	fp, #16
2ac3c     04 1E CE F7 | 	test	local01, #4 wz
2ac40     68 00 90 5D |  if_ne	jmp	#LR__4437
2ac44     04 4E 05 F1 | 	add	fp, #4
2ac48     A7 1E 02 FB | 	rdlong	local01, fp
2ac4c     04 4E 85 F1 | 	sub	fp, #4
2ac50     06 1E 06 F1 | 	add	local01, #6
2ac54     0F 1F C2 FA | 	rdbyte	local01, local01
2ac58     10 1E CE F7 | 	test	local01, #16 wz
2ac5c     0C 4E 05 A1 |  if_e	add	fp, #12
2ac60     A7 0A 68 AC |  if_e	wrlong	#5, fp
2ac64     0C 4E 85 A1 |  if_e	sub	fp, #12
2ac68                 | ' 				res = FR_NO_PATH; break;
2ac68     40 00 90 AD |  if_e	jmp	#LR__4437
2ac6c     04 4E 05 F1 | 	add	fp, #4
2ac70     A7 20 02 FB | 	rdlong	local02, fp
2ac74     10 1F 02 F6 | 	mov	local01, local02
2ac78     10 4E 05 F1 | 	add	fp, #16
2ac7c     A7 14 02 FB | 	rdlong	arg02, fp
2ac80     0A 13 02 F6 | 	mov	arg01, arg02
2ac84     34 14 06 F1 | 	add	arg02, #52
2ac88     14 4E 85 F1 | 	sub	fp, #20
2ac8c     10 20 06 F1 | 	add	local02, #16
2ac90     10 21 02 FB | 	rdlong	local02, local02
2ac94     FF 21 06 F5 | 	and	local02, #511
2ac98     10 15 02 F1 | 	add	arg02, local02
2ac9c     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
2aca0     08 1E 06 F1 | 	add	local01, #8
2aca4     0F FB 61 FC | 	wrlong	result1, local01
2aca8     E4 FE 9F FD | 	jmp	#LR__4435
2acac                 | LR__4437
2acac                 | LR__4438
2acac                 | ' 			}
2acac                 | ' #line 3090 "ff.c"
2acac                 | ' 			{
2acac                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
2acac                 | ' 			}
2acac                 | ' 		}
2acac                 | ' 	}
2acac                 | ' 
2acac                 | ' 	return res;
2acac     0C 4E 05 F1 | 	add	fp, #12
2acb0     A7 FA 01 FB | 	rdlong	result1, fp
2acb4     0C 4E 85 F1 | 	sub	fp, #12
2acb8     A7 F0 03 F6 | 	mov	ptra, fp
2acbc     B2 00 A0 FD | 	call	#popregs_
2acc0                 | _fatfs_cc_follow_path_ret
2acc0     2D 00 64 FD | 	ret
2acc4                 | 
2acc4                 | _fatfs_cc_get_ldnumber
2acc4     01 00 66 F6 | 	neg	_var01, #1
2acc8     09 03 0A FB | 	rdlong	_var02, arg01 wz
2accc     01 05 02 F6 | 	mov	_var03, _var02
2acd0     01 FA 65 A6 |  if_e	neg	result1, #1
2acd4     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
2acd8     97 10 48 FB | 	callpa	#(@LR__4441-@LR__4440)>>2,fcache_load_ptr_
2acdc                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
2acdc                 | LR__4440
2acdc     02 07 C2 FA | 	rdbyte	_var04, _var03
2ace0     03 FB E1 F8 | 	getbyte	result1, _var04, #0
2ace4     20 FA 15 F2 | 	cmp	result1, #32 wc
2ace8     01 04 06 F1 | 	add	_var03, #1
2acec     03 09 02 36 |  if_ae	mov	_var05, _var04
2acf0     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
2acf4     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
2acf8     E0 FF 9F 1D |  if_a	jmp	#LR__4440
2acfc                 | LR__4441
2acfc     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
2ad00     3A 06 0E F2 | 	cmp	_var04, #58 wz
2ad04     40 00 90 5D |  if_ne	jmp	#LR__4443
2ad08     01 0A 06 F6 | 	mov	_var06, #1
2ad0c     01 09 C2 FA | 	rdbyte	_var05, _var02
2ad10     30 08 16 F2 | 	cmp	_var05, #48 wc
2ad14     1C 00 90 CD |  if_b	jmp	#LR__4442
2ad18     01 09 C2 FA | 	rdbyte	_var05, _var02
2ad1c     3A 08 16 F2 | 	cmp	_var05, #58 wc
2ad20     01 0D 02 C6 |  if_b	mov	_var07, _var02
2ad24     02 0C 06 C1 |  if_b	add	_var07, #2
2ad28     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
2ad2c     01 0B C2 8A |  if_c_and_z	rdbyte	_var06, _var02
2ad30     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
2ad34                 | LR__4442
2ad34     01 0A 56 F2 | 	cmps	_var06, #1 wc
2ad38     05 01 02 C6 |  if_b	mov	_var01, _var06
2ad3c     09 05 62 CC |  if_b	wrlong	_var03, arg01
2ad40                 | ' 			vol = i;
2ad40                 | ' 			*path = tt;
2ad40                 | ' 		}
2ad40                 | ' 		return vol;
2ad40     00 FB 01 F6 | 	mov	result1, _var01
2ad44     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
2ad48                 | LR__4443
2ad48                 | ' 	}
2ad48                 | ' #line 3170 "ff.c"
2ad48                 | ' 	vol = 0;
2ad48                 | ' 
2ad48                 | ' 	return vol;
2ad48     00 FA 05 F6 | 	mov	result1, #0
2ad4c                 | _fatfs_cc_get_ldnumber_ret
2ad4c     2D 00 64 FD | 	ret
2ad50                 | 
2ad50                 | _fatfs_cc_check_fs
2ad50     04 4A 05 F6 | 	mov	COUNT_, #4
2ad54     A8 00 A0 FD | 	call	#pushregs_
2ad58     09 1F 02 F6 | 	mov	local01, arg01
2ad5c     03 1E 06 F1 | 	add	local01, #3
2ad60     0F 01 48 FC | 	wrbyte	#0, local01
2ad64     2D 1E 06 F1 | 	add	local01, #45
2ad68     FF FF FF FF 
2ad6c     0F FF 6B FC | 	wrlong	##-1, local01
2ad70     30 1E 86 F1 | 	sub	local01, #48
2ad74     0F 13 02 F6 | 	mov	arg01, local01
2ad78     18 D5 BF FD | 	call	#_fatfs_cc_move_window
2ad7c     00 FA 0D F2 | 	cmp	result1, #0 wz
2ad80     04 FA 05 56 |  if_ne	mov	result1, #4
2ad84     94 01 90 5D |  if_ne	jmp	#LR__4454
2ad88     34 1E 06 F1 | 	add	local01, #52
2ad8c     0F 13 02 F6 | 	mov	arg01, local01
2ad90     FE 13 06 F1 | 	add	arg01, #510
2ad94                 | ' {
2ad94                 | ' 
2ad94                 | ' 	return *((WORD*)ptr);
2ad94     09 21 E2 FA | 	rdword	local02, arg01
2ad98     0F 23 C2 FA | 	rdbyte	local03, local01
2ad9c     34 1E 86 F1 | 	sub	local01, #52
2ada0     11 25 E2 F8 | 	getbyte	local04, local03, #0
2ada4     EB 24 0E F2 | 	cmp	local04, #235 wz
2ada8     11 17 02 56 |  if_ne	mov	arg03, local03
2adac     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
2adb0     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
2adb4     11 23 E2 58 |  if_ne	getbyte	local03, local03, #0
2adb8     E8 22 0E 52 |  if_ne	cmp	local03, #232 wz
2adbc     44 01 90 5D |  if_ne	jmp	#LR__4453
2adc0     10 25 32 F9 | 	getword	local04, local02, #0
2adc4     55 00 00 FF 
2adc8     55 24 0E F2 | 	cmp	local04, ##43605 wz
2adcc     2C 00 90 5D |  if_ne	jmp	#LR__4450
2add0     34 1E 06 F1 | 	add	local01, #52
2add4     0F 13 02 F6 | 	mov	arg01, local01
2add8     34 1E 86 F1 | 	sub	local01, #52
2addc     52 12 06 F1 | 	add	arg01, #82
2ade0     81 01 00 FF 
2ade4     30 14 06 F6 | 	mov	arg02, ##@LR__5044
2ade8     08 16 06 F6 | 	mov	arg03, #8
2adec     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
2adf0     00 FA 0D F2 | 	cmp	result1, #0 wz
2adf4                 | ' 			return 0;
2adf4     00 FA 05 A6 |  if_e	mov	result1, #0
2adf8     20 01 90 AD |  if_e	jmp	#LR__4454
2adfc                 | LR__4450
2adfc     34 1E 06 F1 | 	add	local01, #52
2ae00     0F 13 02 F6 | 	mov	arg01, local01
2ae04     0B 12 06 F1 | 	add	arg01, #11
2ae08                 | ' {
2ae08                 | ' 
2ae08                 | ' 	return *((WORD*)ptr);
2ae08     09 FB E1 FA | 	rdword	result1, arg01
2ae0c     0D 1E 06 F1 | 	add	local01, #13
2ae10     0F 23 C2 FA | 	rdbyte	local03, local01
2ae14     41 1E 86 F1 | 	sub	local01, #65
2ae18     FD 24 32 F9 | 	getword	local04, result1, #0
2ae1c     FD 14 32 F9 | 	getword	arg02, result1, #0
2ae20     01 14 86 F1 | 	sub	arg02, #1
2ae24     0A 25 CA F7 | 	test	local04, arg02 wz
2ae28     D8 00 90 5D |  if_ne	jmp	#LR__4452
2ae2c     FD 14 32 F9 | 	getword	arg02, result1, #0
2ae30     01 00 00 FF 
2ae34     00 14 16 F2 | 	cmp	arg02, ##512 wc
2ae38     C8 00 90 CD |  if_b	jmp	#LR__4452
2ae3c     FD 14 32 F9 | 	getword	arg02, result1, #0
2ae40     01 00 00 FF 
2ae44     01 14 16 F2 | 	cmp	arg02, ##513 wc
2ae48     B8 00 90 3D |  if_ae	jmp	#LR__4452
2ae4c     11 13 02 F6 | 	mov	arg01, local03
2ae50     07 12 4E F7 | 	zerox	arg01, #7 wz
2ae54     AC 00 90 AD |  if_e	jmp	#LR__4452
2ae58     11 13 E2 F8 | 	getbyte	arg01, local03, #0
2ae5c     11 23 E2 F8 | 	getbyte	local03, local03, #0
2ae60     01 22 86 F1 | 	sub	local03, #1
2ae64     11 13 CA F7 | 	test	arg01, local03 wz
2ae68     98 00 90 5D |  if_ne	jmp	#LR__4452
2ae6c     34 1E 06 F1 | 	add	local01, #52
2ae70     0F 13 02 F6 | 	mov	arg01, local01
2ae74     34 1E 86 F1 | 	sub	local01, #52
2ae78     0E 12 06 F1 | 	add	arg01, #14
2ae7c                 | ' {
2ae7c                 | ' 
2ae7c                 | ' 	return *((WORD*)ptr);
2ae7c     09 FB E9 FA | 	rdword	result1, arg01 wz
2ae80     80 00 90 AD |  if_e	jmp	#LR__4452
2ae84     44 1E 06 F1 | 	add	local01, #68
2ae88     0F 13 C2 FA | 	rdbyte	arg01, local01
2ae8c     44 1E 86 F1 | 	sub	local01, #68
2ae90     01 12 86 F1 | 	sub	arg01, #1
2ae94     02 12 16 F2 | 	cmp	arg01, #2 wc
2ae98     68 00 90 3D |  if_ae	jmp	#LR__4452
2ae9c     34 1E 06 F1 | 	add	local01, #52
2aea0     0F 13 02 F6 | 	mov	arg01, local01
2aea4     34 1E 86 F1 | 	sub	local01, #52
2aea8     11 12 06 F1 | 	add	arg01, #17
2aeac                 | ' {
2aeac                 | ' 
2aeac                 | ' 	return *((WORD*)ptr);
2aeac     09 FB E9 FA | 	rdword	result1, arg01 wz
2aeb0     50 00 90 AD |  if_e	jmp	#LR__4452
2aeb4     34 1E 06 F1 | 	add	local01, #52
2aeb8     0F 13 02 F6 | 	mov	arg01, local01
2aebc     34 1E 86 F1 | 	sub	local01, #52
2aec0     13 12 06 F1 | 	add	arg01, #19
2aec4                 | ' {
2aec4                 | ' 
2aec4                 | ' 	return *((WORD*)ptr);
2aec4     09 FB E1 FA | 	rdword	result1, arg01
2aec8     FD 22 32 F9 | 	getword	local03, result1, #0
2aecc     80 22 16 F2 | 	cmp	local03, #128 wc
2aed0     20 00 90 3D |  if_ae	jmp	#LR__4451
2aed4     34 1E 06 F1 | 	add	local01, #52
2aed8     0F 13 02 F6 | 	mov	arg01, local01
2aedc     34 1E 86 F1 | 	sub	local01, #52
2aee0     20 12 06 F1 | 	add	arg01, #32
2aee4                 | ' {
2aee4                 | ' 
2aee4                 | ' 	return *((DWORD*)ptr);
2aee4     09 FB 01 FB | 	rdlong	result1, arg01
2aee8     80 00 00 FF 
2aeec     00 FA 15 F2 | 	cmp	result1, ##65536 wc
2aef0     10 00 90 CD |  if_b	jmp	#LR__4452
2aef4                 | LR__4451
2aef4     4A 1E 06 F1 | 	add	local01, #74
2aef8                 | ' {
2aef8                 | ' 
2aef8                 | ' 	return *((WORD*)ptr);
2aef8     0F FB E9 FA | 	rdword	result1, local01 wz
2aefc                 | ' 			&& b != 0 && (b & (b - 1)) == 0
2aefc                 | ' 			&& ld_word(fs->win +  14 ) != 0
2aefc                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
2aefc                 | ' 			&& ld_word(fs->win +  17 ) != 0
2aefc                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
2aefc                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
2aefc                 | ' 				return 0;
2aefc     00 FA 05 56 |  if_ne	mov	result1, #0
2af00     18 00 90 5D |  if_ne	jmp	#LR__4454
2af04                 | LR__4452
2af04                 | LR__4453
2af04                 | ' 		}
2af04                 | ' 	}
2af04                 | ' 	return sign == 0xAA55 ? 2 : 3;
2af04     10 23 32 F9 | 	getword	local03, local02, #0
2af08     55 00 00 FF 
2af0c     55 22 0E F2 | 	cmp	local03, ##43605 wz
2af10     02 24 06 A6 |  if_e	mov	local04, #2
2af14     03 24 06 56 |  if_ne	mov	local04, #3
2af18     12 FB 01 F6 | 	mov	result1, local04
2af1c                 | LR__4454
2af1c     A7 F0 03 F6 | 	mov	ptra, fp
2af20     B2 00 A0 FD | 	call	#popregs_
2af24                 | _fatfs_cc_check_fs_ret
2af24     2D 00 64 FD | 	ret
2af28                 | 
2af28                 | _fatfs_cc_find_volume
2af28     05 4A 05 F6 | 	mov	COUNT_, #5
2af2c     A8 00 A0 FD | 	call	#pushregs_
2af30     24 F0 07 F1 | 	add	ptra, #36
2af34     09 1F 02 F6 | 	mov	local01, arg01
2af38     0A 21 02 F6 | 	mov	local02, arg02
2af3c     0F 13 02 F6 | 	mov	arg01, local01
2af40     00 14 06 F6 | 	mov	arg02, #0
2af44     08 FE BF FD | 	call	#_fatfs_cc_check_fs
2af48     02 FA 0D F2 | 	cmp	result1, #2 wz
2af4c     0C 00 90 AD |  if_e	jmp	#LR__4460
2af50     03 FA 15 F2 | 	cmp	result1, #3 wc
2af54     00 20 0E C2 |  if_b	cmp	local02, #0 wz
2af58     D0 00 90 BD |  if_nc_or_z	jmp	#LR__4468
2af5c                 | LR__4460
2af5c                 | ' 	for (i = 0; i < 4; i++) {
2af5c     00 22 06 F6 | 	mov	local03, #0
2af60     97 26 48 FB | 	callpa	#(@LR__4462-@LR__4461)>>2,fcache_load_ptr_
2af64                 | LR__4461
2af64     04 22 16 F2 | 	cmp	local03, #4 wc
2af68     44 00 90 3D |  if_ae	jmp	#LR__4463
2af6c     11 25 02 F6 | 	mov	local04, local03
2af70     02 24 66 F0 | 	shl	local04, #2
2af74     14 4E 05 F1 | 	add	fp, #20
2af78     A7 24 02 F1 | 	add	local04, fp
2af7c     34 1E 06 F1 | 	add	local01, #52
2af80     0F 13 02 F6 | 	mov	arg01, local01
2af84     34 1E 86 F1 | 	sub	local01, #52
2af88     BE 13 06 F1 | 	add	arg01, #446
2af8c     11 15 02 F6 | 	mov	arg02, local03
2af90     04 14 66 F0 | 	shl	arg02, #4
2af94     0A 13 02 F1 | 	add	arg01, arg02
2af98     08 12 06 F1 | 	add	arg01, #8
2af9c                 | ' {
2af9c                 | ' 
2af9c                 | ' 	return *((DWORD*)ptr);
2af9c     09 FB 01 FB | 	rdlong	result1, arg01
2afa0     14 4E 85 F1 | 	sub	fp, #20
2afa4     12 FB 61 FC | 	wrlong	result1, local04
2afa8     01 22 06 F1 | 	add	local03, #1
2afac     B4 FF 9F FD | 	jmp	#LR__4461
2afb0                 | LR__4462
2afb0                 | LR__4463
2afb0     00 20 0E F2 | 	cmp	local02, #0 wz
2afb4     10 25 02 56 |  if_ne	mov	local04, local02
2afb8     01 24 86 51 |  if_ne	sub	local04, #1
2afbc     00 24 06 A6 |  if_e	mov	local04, #0
2afc0     12 23 02 F6 | 	mov	local03, local04
2afc4                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
2afc4                 | ' 	}
2afc4                 | ' 	i = part ? part - 1 : 0;
2afc4                 | ' 	do {
2afc4                 | LR__4464
2afc4     11 25 02 F6 | 	mov	local04, local03
2afc8     02 24 66 F0 | 	shl	local04, #2
2afcc     14 4E 05 F1 | 	add	fp, #20
2afd0     A7 24 02 F1 | 	add	local04, fp
2afd4     12 25 0A FB | 	rdlong	local04, local04 wz
2afd8     14 4E 85 F1 | 	sub	fp, #20
2afdc     28 00 90 AD |  if_e	jmp	#LR__4465
2afe0     11 25 02 F6 | 	mov	local04, local03
2afe4     02 24 66 F0 | 	shl	local04, #2
2afe8     14 4E 05 F1 | 	add	fp, #20
2afec     A7 24 02 F1 | 	add	local04, fp
2aff0     12 15 02 FB | 	rdlong	arg02, local04
2aff4     0F 13 02 F6 | 	mov	arg01, local01
2aff8     14 4E 85 F1 | 	sub	fp, #20
2affc     50 FD BF FD | 	call	#_fatfs_cc_check_fs
2b000     FD 24 02 F6 | 	mov	local04, result1
2b004     04 00 90 FD | 	jmp	#LR__4466
2b008                 | LR__4465
2b008     03 24 06 F6 | 	mov	local04, #3
2b00c                 | LR__4466
2b00c     12 27 02 F6 | 	mov	local05, local04
2b010     00 20 0E F2 | 	cmp	local02, #0 wz
2b014     02 26 16 A2 |  if_e	cmp	local05, #2 wc
2b018     0C 00 90 8D |  if_c_and_z	jmp	#LR__4467
2b01c     01 22 06 A1 |  if_e	add	local03, #1
2b020     04 22 16 A2 |  if_e	cmp	local03, #4 wc
2b024     9C FF 9F 8D |  if_c_and_z	jmp	#LR__4464
2b028                 | LR__4467
2b028                 | ' 	return fmt;
2b028     13 FB 01 F6 | 	mov	result1, local05
2b02c                 | LR__4468
2b02c     A7 F0 03 F6 | 	mov	ptra, fp
2b030     B2 00 A0 FD | 	call	#popregs_
2b034                 | _fatfs_cc_find_volume_ret
2b034     2D 00 64 FD | 	ret
2b038                 | 
2b038                 | _fatfs_cc_mount_volume
2b038     0B 4A 05 F6 | 	mov	COUNT_, #11
2b03c     A8 00 A0 FD | 	call	#pushregs_
2b040     0A 1F 02 F6 | 	mov	local01, arg02
2b044     0B 21 02 F6 | 	mov	local02, arg03
2b048     0F 01 68 FC | 	wrlong	#0, local01
2b04c     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
2b050     FD 22 02 F6 | 	mov	local03, result1
2b054     00 22 56 F2 | 	cmps	local03, #0 wc
2b058     0B FA 05 C6 |  if_b	mov	result1, #11
2b05c     3C 05 90 CD |  if_b	jmp	#LR__4480
2b060     11 17 02 F6 | 	mov	arg03, local03
2b064     02 16 66 F0 | 	shl	arg03, #2
2b068     F2 16 02 F1 | 	add	arg03, objptr
2b06c     0B 25 0A FB | 	rdlong	local04, arg03 wz
2b070     0C FA 05 A6 |  if_e	mov	result1, #12
2b074     24 05 90 AD |  if_e	jmp	#LR__4480
2b078     0F 25 62 FC | 	wrlong	local04, local01
2b07c     10 21 E2 F8 | 	getbyte	local02, local02, #0
2b080     FE 20 06 F5 | 	and	local02, #254
2b084     12 17 CA FA | 	rdbyte	arg03, local04 wz
2b088     4C 00 90 AD |  if_e	jmp	#LR__4471
2b08c     01 24 06 F1 | 	add	local04, #1
2b090     12 13 CA FA | 	rdbyte	arg01, local04 wz
2b094     01 24 86 F1 | 	sub	local04, #1
2b098     01 FA 05 56 |  if_ne	mov	result1, #1
2b09c                 | ' 
2b09c                 | ' 	return Stat;
2b09c     01 00 00 AF 
2b0a0     20 E4 05 A1 |  if_e	add	objptr, ##544
2b0a4     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2b0a8     01 00 00 AF 
2b0ac     20 E4 85 A1 |  if_e	sub	objptr, ##544
2b0b0     FD 16 E2 F8 | 	getbyte	arg03, result1, #0
2b0b4     01 16 CE F7 | 	test	arg03, #1 wz
2b0b8     1C 00 90 5D |  if_ne	jmp	#LR__4470
2b0bc     00 20 0E F2 | 	cmp	local02, #0 wz
2b0c0     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
2b0c4     04 FA CD 57 |  if_ne	test	result1, #4 wz
2b0c8                 | ' 				return FR_WRITE_PROTECTED;
2b0c8     0A FA 05 56 |  if_ne	mov	result1, #10
2b0cc     CC 04 90 5D |  if_ne	jmp	#LR__4480
2b0d0                 | ' 			}
2b0d0                 | ' 			return FR_OK;
2b0d0     00 FA 05 F6 | 	mov	result1, #0
2b0d4     C4 04 90 FD | 	jmp	#LR__4480
2b0d8                 | LR__4470
2b0d8                 | LR__4471
2b0d8     12 01 48 FC | 	wrbyte	#0, local04
2b0dc     01 24 06 F1 | 	add	local04, #1
2b0e0     12 23 42 FC | 	wrbyte	local03, local04
2b0e4     12 13 C2 FA | 	rdbyte	arg01, local04
2b0e8     01 24 86 F1 | 	sub	local04, #1
2b0ec     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
2b0f0     FD 16 02 F6 | 	mov	arg03, result1
2b0f4     0B 27 E2 F8 | 	getbyte	local05, arg03, #0
2b0f8     01 26 CE F7 | 	test	local05, #1 wz
2b0fc                 | ' 		return FR_NOT_READY;
2b0fc     03 FA 05 56 |  if_ne	mov	result1, #3
2b100     98 04 90 5D |  if_ne	jmp	#LR__4480
2b104     00 20 0E F2 | 	cmp	local02, #0 wz
2b108     0B 27 02 56 |  if_ne	mov	local05, arg03
2b10c     13 27 E2 58 |  if_ne	getbyte	local05, local05, #0
2b110     04 26 CE 57 |  if_ne	test	local05, #4 wz
2b114                 | ' 		return FR_WRITE_PROTECTED;
2b114     0A FA 05 56 |  if_ne	mov	result1, #10
2b118     80 04 90 5D |  if_ne	jmp	#LR__4480
2b11c     12 13 02 F6 | 	mov	arg01, local04
2b120     00 14 06 F6 | 	mov	arg02, #0
2b124     00 FE BF FD | 	call	#_fatfs_cc_find_volume
2b128     FD 12 02 F6 | 	mov	arg01, result1
2b12c     04 12 0E F2 | 	cmp	arg01, #4 wz
2b130     01 FA 05 A6 |  if_e	mov	result1, #1
2b134     64 04 90 AD |  if_e	jmp	#LR__4480
2b138     02 12 16 F2 | 	cmp	arg01, #2 wc
2b13c     0D FA 05 36 |  if_ae	mov	result1, #13
2b140     58 04 90 3D |  if_ae	jmp	#LR__4480
2b144     30 24 06 F1 | 	add	local04, #48
2b148     12 29 02 FB | 	rdlong	local06, local04
2b14c     04 24 06 F1 | 	add	local04, #4
2b150     12 13 02 F6 | 	mov	arg01, local04
2b154     34 24 86 F1 | 	sub	local04, #52
2b158     0B 12 06 F1 | 	add	arg01, #11
2b15c                 | ' {
2b15c                 | ' 
2b15c                 | ' 	return *((WORD*)ptr);
2b15c     09 FB E1 FA | 	rdword	result1, arg01
2b160     01 00 00 FF 
2b164     00 FA 0D F2 | 	cmp	result1, ##512 wz
2b168     0D FA 05 56 |  if_ne	mov	result1, #13
2b16c     2C 04 90 5D |  if_ne	jmp	#LR__4480
2b170     34 24 06 F1 | 	add	local04, #52
2b174     12 13 02 F6 | 	mov	arg01, local04
2b178     34 24 86 F1 | 	sub	local04, #52
2b17c     16 12 06 F1 | 	add	arg01, #22
2b180                 | ' {
2b180                 | ' 
2b180                 | ' 	return *((WORD*)ptr);
2b180     09 FB E1 FA | 	rdword	result1, arg01
2b184     FD 2A 0A F6 | 	mov	local07, result1 wz
2b188     18 00 90 5D |  if_ne	jmp	#LR__4472
2b18c     34 24 06 F1 | 	add	local04, #52
2b190     12 13 02 F6 | 	mov	arg01, local04
2b194     34 24 86 F1 | 	sub	local04, #52
2b198     24 12 06 F1 | 	add	arg01, #36
2b19c                 | ' {
2b19c                 | ' 
2b19c                 | ' 	return *((DWORD*)ptr);
2b19c     09 FB 01 FB | 	rdlong	result1, arg01
2b1a0     FD 2A 02 F6 | 	mov	local07, result1
2b1a4                 | LR__4472
2b1a4     1C 24 06 F1 | 	add	local04, #28
2b1a8     12 2B 62 FC | 	wrlong	local07, local04
2b1ac     28 24 06 F1 | 	add	local04, #40
2b1b0     12 27 C2 FA | 	rdbyte	local05, local04
2b1b4     42 24 86 F1 | 	sub	local04, #66
2b1b8     12 27 42 FC | 	wrbyte	local05, local04
2b1bc     12 27 C2 FA | 	rdbyte	local05, local04
2b1c0     02 24 86 F1 | 	sub	local04, #2
2b1c4     01 26 0E F2 | 	cmp	local05, #1 wz
2b1c8     02 24 06 51 |  if_ne	add	local04, #2
2b1cc     12 27 C2 5A |  if_ne	rdbyte	local05, local04
2b1d0     02 24 86 51 |  if_ne	sub	local04, #2
2b1d4     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
2b1d8     0D FA 05 56 |  if_ne	mov	result1, #13
2b1dc     BC 03 90 5D |  if_ne	jmp	#LR__4480
2b1e0     02 24 06 F1 | 	add	local04, #2
2b1e4     12 27 C2 FA | 	rdbyte	local05, local04
2b1e8     13 2B 02 FD | 	qmul	local07, local05
2b1ec     3F 24 06 F1 | 	add	local04, #63
2b1f0     12 27 C2 FA | 	rdbyte	local05, local04
2b1f4     37 24 86 F1 | 	sub	local04, #55
2b1f8     12 27 52 FC | 	wrword	local05, local04
2b1fc     12 27 EA FA | 	rdword	local05, local04 wz
2b200     0A 24 86 F1 | 	sub	local04, #10
2b204     18 2A 62 FD | 	getqx	local07
2b208     20 00 90 AD |  if_e	jmp	#LR__4473
2b20c     0A 24 06 F1 | 	add	local04, #10
2b210     12 27 E2 FA | 	rdword	local05, local04
2b214     13 23 32 F9 | 	getword	local03, local05, #0
2b218     0A 24 86 F1 | 	sub	local04, #10
2b21c     13 27 32 F9 | 	getword	local05, local05, #0
2b220     01 26 86 F1 | 	sub	local05, #1
2b224     13 23 CA F7 | 	test	local03, local05 wz
2b228     08 00 90 AD |  if_e	jmp	#LR__4474
2b22c                 | LR__4473
2b22c     0D FA 05 F6 | 	mov	result1, #13
2b230     68 03 90 FD | 	jmp	#LR__4480
2b234                 | LR__4474
2b234     34 24 06 F1 | 	add	local04, #52
2b238     12 13 02 F6 | 	mov	arg01, local04
2b23c     11 12 06 F1 | 	add	arg01, #17
2b240                 | ' {
2b240                 | ' 
2b240                 | ' 	return *((WORD*)ptr);
2b240     09 FB E1 FA | 	rdword	result1, arg01
2b244     2C 24 86 F1 | 	sub	local04, #44
2b248     12 FB 51 FC | 	wrword	result1, local04
2b24c     12 27 E2 FA | 	rdword	local05, local04
2b250     08 24 86 F1 | 	sub	local04, #8
2b254     13 13 52 F6 | 	abs	arg01, local05 wc
2b258     09 13 42 F8 | 	getnib	arg01, arg01, #0
2b25c     09 13 8A F6 | 	negc	arg01, arg01 wz
2b260     0D FA 05 56 |  if_ne	mov	result1, #13
2b264     34 03 90 5D |  if_ne	jmp	#LR__4480
2b268     34 24 06 F1 | 	add	local04, #52
2b26c     12 13 02 F6 | 	mov	arg01, local04
2b270     34 24 86 F1 | 	sub	local04, #52
2b274     13 12 06 F1 | 	add	arg01, #19
2b278                 | ' {
2b278                 | ' 
2b278                 | ' 	return *((WORD*)ptr);
2b278     09 FB E1 FA | 	rdword	result1, arg01
2b27c     FD 2C 0A F6 | 	mov	local08, result1 wz
2b280     34 24 06 A1 |  if_e	add	local04, #52
2b284     12 13 02 A6 |  if_e	mov	arg01, local04
2b288     34 24 86 A1 |  if_e	sub	local04, #52
2b28c     20 12 06 A1 |  if_e	add	arg01, #32
2b290                 | ' {
2b290                 | ' 
2b290                 | ' 	return *((DWORD*)ptr);
2b290     09 2D 02 AB |  if_e	rdlong	local08, arg01
2b294     34 24 06 F1 | 	add	local04, #52
2b298     12 13 02 F6 | 	mov	arg01, local04
2b29c     34 24 86 F1 | 	sub	local04, #52
2b2a0     0E 12 06 F1 | 	add	arg01, #14
2b2a4                 | ' {
2b2a4                 | ' 
2b2a4                 | ' 	return *((WORD*)ptr);
2b2a4     09 FB E1 FA | 	rdword	result1, arg01
2b2a8     FD 12 02 F6 | 	mov	arg01, result1
2b2ac     09 27 02 F6 | 	mov	local05, arg01
2b2b0     0F 26 4E F7 | 	zerox	local05, #15 wz
2b2b4     0D FA 05 A6 |  if_e	mov	result1, #13
2b2b8     E0 02 90 AD |  if_e	jmp	#LR__4480
2b2bc     09 2F 32 F9 | 	getword	local09, arg01, #0
2b2c0     15 2F 02 F1 | 	add	local09, local07
2b2c4     08 24 06 F1 | 	add	local04, #8
2b2c8     12 27 E2 FA | 	rdword	local05, local04
2b2cc     08 24 86 F1 | 	sub	local04, #8
2b2d0     13 27 52 F6 | 	abs	local05, local05 wc
2b2d4     04 26 46 F0 | 	shr	local05, #4
2b2d8     13 2F 82 F3 | 	sumc	local09, local05
2b2dc     17 2D 12 F2 | 	cmp	local08, local09 wc
2b2e0     0D FA 05 C6 |  if_b	mov	result1, #13
2b2e4     B4 02 90 CD |  if_b	jmp	#LR__4480
2b2e8     17 2D 82 F1 | 	sub	local08, local09
2b2ec     0A 24 06 F1 | 	add	local04, #10
2b2f0     12 27 E2 FA | 	rdword	local05, local04
2b2f4     13 2D 12 FD | 	qdiv	local08, local05
2b2f8     0A 24 86 F1 | 	sub	local04, #10
2b2fc     18 26 62 FD | 	getqx	local05
2b300     00 26 0E F2 | 	cmp	local05, #0 wz
2b304     0D FA 05 A6 |  if_e	mov	result1, #13
2b308     90 02 90 AD |  if_e	jmp	#LR__4480
2b30c     00 30 06 F6 | 	mov	local10, #0
2b310     FF FF 07 FF 
2b314     F6 27 16 F2 | 	cmp	local05, ##268435446 wc
2b318     03 30 06 C6 |  if_b	mov	local10, #3
2b31c     7F 00 00 FF 
2b320     F6 27 16 F2 | 	cmp	local05, ##65526 wc
2b324     02 30 06 C6 |  if_b	mov	local10, #2
2b328     07 00 00 FF 
2b32c     F6 27 16 F2 | 	cmp	local05, ##4086 wc
2b330     01 30 06 C6 |  if_b	mov	local10, #1
2b334     00 30 0E F2 | 	cmp	local10, #0 wz
2b338     0D FA 05 A6 |  if_e	mov	result1, #13
2b33c     5C 02 90 AD |  if_e	jmp	#LR__4480
2b340     02 26 06 F1 | 	add	local05, #2
2b344     18 24 06 F1 | 	add	local04, #24
2b348     12 27 62 FC | 	wrlong	local05, local04
2b34c     08 24 06 F1 | 	add	local04, #8
2b350     12 29 62 FC | 	wrlong	local06, local04
2b354     14 27 02 F6 | 	mov	local05, local06
2b358     09 13 32 F9 | 	getword	arg01, arg01, #0
2b35c     09 27 02 F1 | 	add	local05, arg01
2b360     04 24 06 F1 | 	add	local04, #4
2b364     12 27 62 FC | 	wrlong	local05, local04
2b368     14 27 02 F6 | 	mov	local05, local06
2b36c     17 27 02 F1 | 	add	local05, local09
2b370     08 24 06 F1 | 	add	local04, #8
2b374     12 27 62 FC | 	wrlong	local05, local04
2b378     2C 24 86 F1 | 	sub	local04, #44
2b37c     03 30 0E F2 | 	cmp	local10, #3 wz
2b380     5C 00 90 5D |  if_ne	jmp	#LR__4475
2b384     34 24 06 F1 | 	add	local04, #52
2b388     12 13 02 F6 | 	mov	arg01, local04
2b38c     34 24 86 F1 | 	sub	local04, #52
2b390     2A 12 06 F1 | 	add	arg01, #42
2b394                 | ' {
2b394                 | ' 
2b394                 | ' 	return *((WORD*)ptr);
2b394     09 FB E9 FA | 	rdword	result1, arg01 wz
2b398     0D FA 05 56 |  if_ne	mov	result1, #13
2b39c     FC 01 90 5D |  if_ne	jmp	#LR__4480
2b3a0     08 24 06 F1 | 	add	local04, #8
2b3a4     12 27 EA FA | 	rdword	local05, local04 wz
2b3a8     08 24 86 F1 | 	sub	local04, #8
2b3ac     0D FA 05 56 |  if_ne	mov	result1, #13
2b3b0     E8 01 90 5D |  if_ne	jmp	#LR__4480
2b3b4     34 24 06 F1 | 	add	local04, #52
2b3b8     12 13 02 F6 | 	mov	arg01, local04
2b3bc     2C 12 06 F1 | 	add	arg01, #44
2b3c0                 | ' {
2b3c0                 | ' 
2b3c0                 | ' 	return *((DWORD*)ptr);
2b3c0     09 FB 01 FB | 	rdlong	result1, arg01
2b3c4     0C 24 86 F1 | 	sub	local04, #12
2b3c8     12 FB 61 FC | 	wrlong	result1, local04
2b3cc     10 24 86 F1 | 	sub	local04, #16
2b3d0     12 33 02 FB | 	rdlong	local11, local04
2b3d4     18 24 86 F1 | 	sub	local04, #24
2b3d8     02 32 66 F0 | 	shl	local11, #2
2b3dc     6C 00 90 FD | 	jmp	#LR__4477
2b3e0                 | LR__4475
2b3e0     08 24 06 F1 | 	add	local04, #8
2b3e4     12 27 EA FA | 	rdword	local05, local04 wz
2b3e8     08 24 86 F1 | 	sub	local04, #8
2b3ec     0D FA 05 A6 |  if_e	mov	result1, #13
2b3f0     A8 01 90 AD |  if_e	jmp	#LR__4480
2b3f4     24 24 06 F1 | 	add	local04, #36
2b3f8     12 27 02 FB | 	rdlong	local05, local04
2b3fc     15 27 02 F1 | 	add	local05, local07
2b400     04 24 06 F1 | 	add	local04, #4
2b404     12 27 62 FC | 	wrlong	local05, local04
2b408     28 24 86 F1 | 	sub	local04, #40
2b40c     02 30 0E F2 | 	cmp	local10, #2 wz
2b410     18 24 06 A1 |  if_e	add	local04, #24
2b414     12 27 02 AB |  if_e	rdlong	local05, local04
2b418     18 24 86 A1 |  if_e	sub	local04, #24
2b41c     01 26 66 A0 |  if_e	shl	local05, #1
2b420     24 00 90 AD |  if_e	jmp	#LR__4476
2b424     18 24 06 F1 | 	add	local04, #24
2b428     12 33 02 FB | 	rdlong	local11, local04
2b42c     19 27 02 F6 | 	mov	local05, local11
2b430     01 26 66 F0 | 	shl	local05, #1
2b434     19 27 02 F1 | 	add	local05, local11
2b438     01 26 46 F0 | 	shr	local05, #1
2b43c     18 24 86 F1 | 	sub	local04, #24
2b440     01 32 06 F5 | 	and	local11, #1
2b444     19 27 02 F1 | 	add	local05, local11
2b448                 | LR__4476
2b448     13 33 02 F6 | 	mov	local11, local05
2b44c                 | LR__4477
2b44c     FF 33 06 F1 | 	add	local11, #511
2b450     09 32 46 F0 | 	shr	local11, #9
2b454     1C 24 06 F1 | 	add	local04, #28
2b458     12 17 02 FB | 	rdlong	arg03, local04
2b45c     1C 24 86 F1 | 	sub	local04, #28
2b460     19 17 12 F2 | 	cmp	arg03, local11 wc
2b464     0D FA 05 C6 |  if_b	mov	result1, #13
2b468     30 01 90 CD |  if_b	jmp	#LR__4480
2b46c     14 24 06 F1 | 	add	local04, #20
2b470     FF FF FF FF 
2b474     12 FF 6B FC | 	wrlong	##-1, local04
2b478     04 24 86 F1 | 	sub	local04, #4
2b47c     FF FF FF FF 
2b480     12 FF 6B FC | 	wrlong	##-1, local04
2b484     0C 24 86 F1 | 	sub	local04, #12
2b488     12 01 49 FC | 	wrbyte	#128, local04
2b48c     04 24 86 F1 | 	sub	local04, #4
2b490     03 30 0E F2 | 	cmp	local10, #3 wz
2b494     D0 00 90 5D |  if_ne	jmp	#LR__4479
2b498     34 24 06 F1 | 	add	local04, #52
2b49c     12 13 02 F6 | 	mov	arg01, local04
2b4a0     34 24 86 F1 | 	sub	local04, #52
2b4a4     30 12 06 F1 | 	add	arg01, #48
2b4a8                 | ' {
2b4a8                 | ' 
2b4a8                 | ' 	return *((WORD*)ptr);
2b4a8     09 FB E1 FA | 	rdword	result1, arg01
2b4ac     FD 26 32 F9 | 	getword	local05, result1, #0
2b4b0     01 26 0E F2 | 	cmp	local05, #1 wz
2b4b4     B0 00 90 5D |  if_ne	jmp	#LR__4479
2b4b8     01 28 06 F1 | 	add	local06, #1
2b4bc     12 13 02 F6 | 	mov	arg01, local04
2b4c0     14 15 02 F6 | 	mov	arg02, local06
2b4c4     CC CD BF FD | 	call	#_fatfs_cc_move_window
2b4c8     00 FA 0D F2 | 	cmp	result1, #0 wz
2b4cc     98 00 90 5D |  if_ne	jmp	#LR__4479
2b4d0     04 24 06 F1 | 	add	local04, #4
2b4d4     12 01 48 FC | 	wrbyte	#0, local04
2b4d8     30 24 06 F1 | 	add	local04, #48
2b4dc     12 13 02 F6 | 	mov	arg01, local04
2b4e0     34 24 86 F1 | 	sub	local04, #52
2b4e4     FE 13 06 F1 | 	add	arg01, #510
2b4e8                 | ' {
2b4e8                 | ' 
2b4e8                 | ' 	return *((WORD*)ptr);
2b4e8     09 FB E1 FA | 	rdword	result1, arg01
2b4ec     FD 26 32 F9 | 	getword	local05, result1, #0
2b4f0     55 00 00 FF 
2b4f4     55 26 0E F2 | 	cmp	local05, ##43605 wz
2b4f8     34 24 06 A1 |  if_e	add	local04, #52
2b4fc     12 13 02 A6 |  if_e	mov	arg01, local04
2b500     34 24 86 A1 |  if_e	sub	local04, #52
2b504                 | ' {
2b504                 | ' 
2b504                 | ' 	return *((DWORD*)ptr);
2b504     09 FB 01 AB |  if_e	rdlong	result1, arg01
2b508     A9 B0 20 AF 
2b50c     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
2b510     54 00 90 5D |  if_ne	jmp	#LR__4478
2b514     34 24 06 F1 | 	add	local04, #52
2b518     12 13 02 F6 | 	mov	arg01, local04
2b51c     34 24 86 F1 | 	sub	local04, #52
2b520     E4 13 06 F1 | 	add	arg01, #484
2b524                 | ' {
2b524                 | ' 
2b524                 | ' 	return *((DWORD*)ptr);
2b524     09 FB 01 FB | 	rdlong	result1, arg01
2b528     B9 A0 30 FF 
2b52c     72 FA 0D F2 | 	cmp	result1, ##1631679090 wz
2b530     34 00 90 5D |  if_ne	jmp	#LR__4478
2b534     34 24 06 F1 | 	add	local04, #52
2b538     12 13 02 F6 | 	mov	arg01, local04
2b53c     E8 13 06 F1 | 	add	arg01, #488
2b540                 | ' {
2b540                 | ' 
2b540                 | ' 	return *((DWORD*)ptr);
2b540     09 FB 01 FB | 	rdlong	result1, arg01
2b544     20 24 86 F1 | 	sub	local04, #32
2b548     12 FB 61 FC | 	wrlong	result1, local04
2b54c     20 24 06 F1 | 	add	local04, #32
2b550     12 13 02 F6 | 	mov	arg01, local04
2b554     EC 13 06 F1 | 	add	arg01, #492
2b558                 | ' {
2b558                 | ' 
2b558                 | ' 	return *((DWORD*)ptr);
2b558     09 FB 01 FB | 	rdlong	result1, arg01
2b55c     24 24 86 F1 | 	sub	local04, #36
2b560     12 FB 61 FC | 	wrlong	result1, local04
2b564     10 24 86 F1 | 	sub	local04, #16
2b568                 | LR__4478
2b568                 | LR__4479
2b568     12 31 42 FC | 	wrbyte	local10, local04
2b56c     04 E4 05 F1 | 	add	objptr, #4
2b570     F2 26 E2 FA | 	rdword	local05, objptr
2b574     01 26 06 F1 | 	add	local05, #1
2b578     F2 26 52 FC | 	wrword	local05, objptr
2b57c     F2 32 E2 FA | 	rdword	local11, objptr
2b580     06 24 06 F1 | 	add	local04, #6
2b584     12 33 52 FC | 	wrword	local11, local04
2b588     04 E4 05 F1 | 	add	objptr, #4
2b58c     06 24 06 F1 | 	add	local04, #6
2b590     12 E5 61 FC | 	wrlong	objptr, local04
2b594                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
2b594                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
2b594                 | ' 			{
2b594                 | ' 
2b594                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
2b594                 | ' 
2b594                 | ' 
2b594                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
2b594                 | ' 
2b594                 | ' 			}
2b594                 | ' 		}
2b594                 | ' 
2b594                 | ' 
2b594                 | ' 	}
2b594                 | ' 
2b594                 | ' 	fs->fs_type = (BYTE)fmt;
2b594                 | ' 	fs->id = ++Fsid;
2b594                 | ' 
2b594                 | ' 	fs->lfnbuf = LfnBuf;
2b594                 | ' #line 3567 "ff.c"
2b594                 | ' 	return FR_OK;
2b594     00 FA 05 F6 | 	mov	result1, #0
2b598     08 E4 85 F1 | 	sub	objptr, #8
2b59c                 | LR__4480
2b59c     A7 F0 03 F6 | 	mov	ptra, fp
2b5a0     B2 00 A0 FD | 	call	#popregs_
2b5a4                 | _fatfs_cc_mount_volume_ret
2b5a4     2D 00 64 FD | 	ret
2b5a8                 | 
2b5a8                 | _fatfs_cc_validate
2b5a8     09 01 0A F6 | 	mov	_var01, arg01 wz
2b5ac     09 02 06 F6 | 	mov	_var02, #9
2b5b0     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
2b5b4     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
2b5b8     50 00 90 AD |  if_e	jmp	#LR__4490
2b5bc     04 00 06 F1 | 	add	_var01, #4
2b5c0     00 07 E2 FA | 	rdword	_var04, _var01
2b5c4     04 00 86 F1 | 	sub	_var01, #4
2b5c8     00 13 02 FB | 	rdlong	arg01, _var01
2b5cc     06 12 06 F1 | 	add	arg01, #6
2b5d0     09 FB E1 FA | 	rdword	result1, arg01
2b5d4     FD 06 0A F2 | 	cmp	_var04, result1 wz
2b5d8     30 00 90 5D |  if_ne	jmp	#LR__4490
2b5dc     00 07 02 FB | 	rdlong	_var04, _var01
2b5e0     01 06 06 F1 | 	add	_var04, #1
2b5e4     03 13 CA FA | 	rdbyte	arg01, _var04 wz
2b5e8     01 FA 05 56 |  if_ne	mov	result1, #1
2b5ec                 | ' 
2b5ec                 | ' 	return Stat;
2b5ec     01 00 00 AF 
2b5f0     20 E4 05 A1 |  if_e	add	objptr, ##544
2b5f4     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2b5f8     01 00 00 AF 
2b5fc     20 E4 85 A1 |  if_e	sub	objptr, ##544
2b600     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
2b604     01 04 CE F7 | 	test	_var03, #1 wz
2b608     00 02 06 A6 |  if_e	mov	_var02, #0
2b60c                 | LR__4490
2b60c     00 02 0E F2 | 	cmp	_var02, #0 wz
2b610     00 05 02 AB |  if_e	rdlong	_var03, _var01
2b614     00 04 06 56 |  if_ne	mov	_var03, #0
2b618     0A 05 62 FC | 	wrlong	_var03, arg02
2b61c                 | ' 			res = FR_OK;
2b61c                 | ' 		}
2b61c                 | ' 
2b61c                 | ' 	}
2b61c                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
2b61c                 | ' 	return res;
2b61c     01 FB 01 F6 | 	mov	result1, _var02
2b620                 | _fatfs_cc_validate_ret
2b620     2D 00 64 FD | 	ret
2b624                 | 
2b624                 | _fatfs_cc_f_mount
2b624     01 4A 05 F6 | 	mov	COUNT_, #1
2b628     A8 00 A0 FD | 	call	#pushregs_
2b62c     20 F0 07 F1 | 	add	ptra, #32
2b630     04 4E 05 F1 | 	add	fp, #4
2b634     A7 12 62 FC | 	wrlong	arg01, fp
2b638     04 4E 05 F1 | 	add	fp, #4
2b63c     A7 14 62 FC | 	wrlong	arg02, fp
2b640     04 4E 05 F1 | 	add	fp, #4
2b644     A7 16 42 FC | 	wrbyte	arg03, fp
2b648     04 4E 85 F1 | 	sub	fp, #4
2b64c     A7 16 02 FB | 	rdlong	arg03, fp
2b650     14 4E 05 F1 | 	add	fp, #20
2b654     A7 16 62 FC | 	wrlong	arg03, fp
2b658     A7 12 02 F6 | 	mov	arg01, fp
2b65c     1C 4E 85 F1 | 	sub	fp, #28
2b660     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
2b664     14 4E 05 F1 | 	add	fp, #20
2b668     A7 FA 61 FC | 	wrlong	result1, fp
2b66c     14 4E 85 F1 | 	sub	fp, #20
2b670     00 FA 55 F2 | 	cmps	result1, #0 wc
2b674     0B FA 05 C6 |  if_b	mov	result1, #11
2b678     C0 00 90 CD |  if_b	jmp	#LR__4501
2b67c     14 4E 05 F1 | 	add	fp, #20
2b680     A7 16 02 FB | 	rdlong	arg03, fp
2b684     02 16 66 F0 | 	shl	arg03, #2
2b688     F2 16 02 F1 | 	add	arg03, objptr
2b68c     0B 17 0A FB | 	rdlong	arg03, arg03 wz
2b690     04 4E 85 F1 | 	sub	fp, #4
2b694     A7 16 62 FC | 	wrlong	arg03, fp
2b698     10 4E 85 F1 | 	sub	fp, #16
2b69c     28 00 90 AD |  if_e	jmp	#LR__4500
2b6a0     10 4E 05 F1 | 	add	fp, #16
2b6a4     A7 16 02 FB | 	rdlong	arg03, fp
2b6a8     10 4E 85 F1 | 	sub	fp, #16
2b6ac     01 16 06 F1 | 	add	arg03, #1
2b6b0     0B 13 C2 FA | 	rdbyte	arg01, arg03
2b6b4     34 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
2b6b8     10 4E 05 F1 | 	add	fp, #16
2b6bc     A7 16 02 FB | 	rdlong	arg03, fp
2b6c0     10 4E 85 F1 | 	sub	fp, #16
2b6c4     0B 01 48 FC | 	wrbyte	#0, arg03
2b6c8                 | LR__4500
2b6c8     04 4E 05 F1 | 	add	fp, #4
2b6cc     A7 1E 0A FB | 	rdlong	local01, fp wz
2b6d0     04 4E 85 F1 | 	sub	fp, #4
2b6d4     04 4E 05 51 |  if_ne	add	fp, #4
2b6d8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
2b6dc     04 4E 85 51 |  if_ne	sub	fp, #4
2b6e0     0F 01 48 5C |  if_ne	wrbyte	#0, local01
2b6e4     14 4E 05 F1 | 	add	fp, #20
2b6e8     A7 1E 02 FB | 	rdlong	local01, fp
2b6ec     02 1E 66 F0 | 	shl	local01, #2
2b6f0     F2 1E 02 F1 | 	add	local01, objptr
2b6f4     10 4E 85 F1 | 	sub	fp, #16
2b6f8     A7 16 02 FB | 	rdlong	arg03, fp
2b6fc     0F 17 62 FC | 	wrlong	arg03, local01
2b700     08 4E 05 F1 | 	add	fp, #8
2b704     A7 1E CA FA | 	rdbyte	local01, fp wz
2b708     0C 4E 85 F1 | 	sub	fp, #12
2b70c     00 FA 05 A6 |  if_e	mov	result1, #0
2b710     28 00 90 AD |  if_e	jmp	#LR__4501
2b714     08 4E 05 F1 | 	add	fp, #8
2b718     A7 12 02 F6 | 	mov	arg01, fp
2b71c     04 4E 85 F1 | 	sub	fp, #4
2b720     A7 14 02 F6 | 	mov	arg02, fp
2b724     04 4E 85 F1 | 	sub	fp, #4
2b728     00 16 06 F6 | 	mov	arg03, #0
2b72c     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
2b730     18 4E 05 F1 | 	add	fp, #24
2b734     A7 FA 61 FC | 	wrlong	result1, fp
2b738                 | ' 
2b738                 | ' 	res = mount_volume(&path, &fs, 0);
2b738                 | ' 	return res ;
2b738     18 4E 85 F1 | 	sub	fp, #24
2b73c                 | LR__4501
2b73c     A7 F0 03 F6 | 	mov	ptra, fp
2b740     B2 00 A0 FD | 	call	#popregs_
2b744                 | _fatfs_cc_f_mount_ret
2b744     2D 00 64 FD | 	ret
2b748                 | 
2b748                 | _fatfs_cc_f_open
2b748     02 4A 05 F6 | 	mov	COUNT_, #2
2b74c     A8 00 A0 FD | 	call	#pushregs_
2b750     60 F0 07 F1 | 	add	ptra, #96
2b754     04 4E 05 F1 | 	add	fp, #4
2b758     A7 12 62 FC | 	wrlong	arg01, fp
2b75c     04 4E 05 F1 | 	add	fp, #4
2b760     A7 14 62 FC | 	wrlong	arg02, fp
2b764     04 4E 05 F1 | 	add	fp, #4
2b768     A7 16 42 FC | 	wrbyte	arg03, fp
2b76c     08 4E 85 F1 | 	sub	fp, #8
2b770     A7 18 0A FB | 	rdlong	arg04, fp wz
2b774     04 4E 85 F1 | 	sub	fp, #4
2b778     09 FA 05 A6 |  if_e	mov	result1, #9
2b77c     98 06 90 AD |  if_e	jmp	#LR__4527
2b780     0C 4E 05 F1 | 	add	fp, #12
2b784     A7 18 C2 FA | 	rdbyte	arg04, fp
2b788     3F 18 06 F5 | 	and	arg04, #63
2b78c     A7 18 42 FC | 	wrbyte	arg04, fp
2b790     04 4E 85 F1 | 	sub	fp, #4
2b794     A7 12 02 F6 | 	mov	arg01, fp
2b798     3C 4E 05 F1 | 	add	fp, #60
2b79c     A7 14 02 F6 | 	mov	arg02, fp
2b7a0     38 4E 85 F1 | 	sub	fp, #56
2b7a4     A7 16 C2 FA | 	rdbyte	arg03, fp
2b7a8     0C 4E 85 F1 | 	sub	fp, #12
2b7ac     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
2b7b0     10 4E 05 F1 | 	add	fp, #16
2b7b4     A7 FA 61 FC | 	wrlong	result1, fp
2b7b8     10 4E 85 F1 | 	sub	fp, #16
2b7bc     00 FA 0D F2 | 	cmp	result1, #0 wz
2b7c0     2C 06 90 5D |  if_ne	jmp	#LR__4526
2b7c4     44 4E 05 F1 | 	add	fp, #68
2b7c8     A7 18 02 FB | 	rdlong	arg04, fp
2b7cc     30 4E 85 F1 | 	sub	fp, #48
2b7d0     A7 18 62 FC | 	wrlong	arg04, fp
2b7d4     A7 12 02 F6 | 	mov	arg01, fp
2b7d8     0C 4E 85 F1 | 	sub	fp, #12
2b7dc     A7 1E 02 FB | 	rdlong	local01, fp
2b7e0     08 4E 85 F1 | 	sub	fp, #8
2b7e4     0F 15 02 F6 | 	mov	arg02, local01
2b7e8     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
2b7ec     10 4E 05 F1 | 	add	fp, #16
2b7f0     A7 FA 61 FC | 	wrlong	result1, fp
2b7f4     10 4E 85 F1 | 	sub	fp, #16
2b7f8     00 FA 0D F2 | 	cmp	result1, #0 wz
2b7fc     1C 00 90 5D |  if_ne	jmp	#LR__4510
2b800     3F 4E 05 F1 | 	add	fp, #63
2b804     A7 18 C2 FA | 	rdbyte	arg04, fp
2b808     3F 4E 85 F1 | 	sub	fp, #63
2b80c     80 18 CE F7 | 	test	arg04, #128 wz
2b810     10 4E 05 51 |  if_ne	add	fp, #16
2b814     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2b818     10 4E 85 51 |  if_ne	sub	fp, #16
2b81c                 | LR__4510
2b81c     0C 4E 05 F1 | 	add	fp, #12
2b820     A7 18 C2 FA | 	rdbyte	arg04, fp
2b824     0C 4E 85 F1 | 	sub	fp, #12
2b828     1C 18 CE F7 | 	test	arg04, #28 wz
2b82c     F0 01 90 AD |  if_e	jmp	#LR__4515
2b830     10 4E 05 F1 | 	add	fp, #16
2b834     A7 1E 0A FB | 	rdlong	local01, fp wz
2b838     10 4E 85 F1 | 	sub	fp, #16
2b83c     48 00 90 AD |  if_e	jmp	#LR__4512
2b840     10 4E 05 F1 | 	add	fp, #16
2b844     A7 18 02 FB | 	rdlong	arg04, fp
2b848     10 4E 85 F1 | 	sub	fp, #16
2b84c     04 18 0E F2 | 	cmp	arg04, #4 wz
2b850     1C 00 90 5D |  if_ne	jmp	#LR__4511
2b854     14 4E 05 F1 | 	add	fp, #20
2b858     A7 12 02 F6 | 	mov	arg01, fp
2b85c     14 4E 85 F1 | 	sub	fp, #20
2b860     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
2b864     10 4E 05 F1 | 	add	fp, #16
2b868     A7 FA 61 FC | 	wrlong	result1, fp
2b86c     10 4E 85 F1 | 	sub	fp, #16
2b870                 | LR__4511
2b870     0C 4E 05 F1 | 	add	fp, #12
2b874     A7 1E C2 FA | 	rdbyte	local01, fp
2b878     08 1E 46 F5 | 	or	local01, #8
2b87c     A7 1E 42 FC | 	wrbyte	local01, fp
2b880     0C 4E 85 F1 | 	sub	fp, #12
2b884     3C 00 90 FD | 	jmp	#LR__4514
2b888                 | LR__4512
2b888     1A 4E 05 F1 | 	add	fp, #26
2b88c     A7 1E C2 FA | 	rdbyte	local01, fp
2b890     1A 4E 85 F1 | 	sub	fp, #26
2b894     11 1E CE F7 | 	test	local01, #17 wz
2b898     10 4E 05 51 |  if_ne	add	fp, #16
2b89c     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2b8a0     10 4E 85 51 |  if_ne	sub	fp, #16
2b8a4     1C 00 90 5D |  if_ne	jmp	#LR__4513
2b8a8     0C 4E 05 F1 | 	add	fp, #12
2b8ac     A7 1E C2 FA | 	rdbyte	local01, fp
2b8b0     0C 4E 85 F1 | 	sub	fp, #12
2b8b4     04 1E CE F7 | 	test	local01, #4 wz
2b8b8     10 4E 05 51 |  if_ne	add	fp, #16
2b8bc     A7 10 68 5C |  if_ne	wrlong	#8, fp
2b8c0     10 4E 85 51 |  if_ne	sub	fp, #16
2b8c4                 | LR__4513
2b8c4                 | LR__4514
2b8c4     10 4E 05 F1 | 	add	fp, #16
2b8c8     A7 1E 0A FB | 	rdlong	local01, fp wz
2b8cc     10 4E 85 F1 | 	sub	fp, #16
2b8d0     A8 01 90 5D |  if_ne	jmp	#LR__4518
2b8d4     0C 4E 05 F1 | 	add	fp, #12
2b8d8     A7 1E C2 FA | 	rdbyte	local01, fp
2b8dc     0C 4E 85 F1 | 	sub	fp, #12
2b8e0     08 1E CE F7 | 	test	local01, #8 wz
2b8e4     94 01 90 AD |  if_e	jmp	#LR__4518
2b8e8     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
2b8ec     54 4E 05 F1 | 	add	fp, #84
2b8f0     A7 FA 61 FC | 	wrlong	result1, fp
2b8f4     24 4E 85 F1 | 	sub	fp, #36
2b8f8     A7 12 02 FB | 	rdlong	arg01, fp
2b8fc     0E 12 06 F1 | 	add	arg01, #14
2b900     09 FB 61 FC | 	wrlong	result1, arg01
2b904     A7 12 02 FB | 	rdlong	arg01, fp
2b908     16 12 06 F1 | 	add	arg01, #22
2b90c     24 4E 05 F1 | 	add	fp, #36
2b910     A7 14 02 FB | 	rdlong	arg02, fp
2b914     09 15 62 FC | 	wrlong	arg02, arg01
2b918     10 4E 85 F1 | 	sub	fp, #16
2b91c     A7 12 02 FB | 	rdlong	arg01, fp
2b920     14 4E 85 F1 | 	sub	fp, #20
2b924     A7 14 02 FB | 	rdlong	arg02, fp
2b928     30 4E 85 F1 | 	sub	fp, #48
2b92c     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
2b930     48 4E 05 F1 | 	add	fp, #72
2b934     A7 FA 61 FC | 	wrlong	result1, fp
2b938     18 4E 85 F1 | 	sub	fp, #24
2b93c     A7 1E 02 FB | 	rdlong	local01, fp
2b940     0B 1E 06 F1 | 	add	local01, #11
2b944     0F 41 48 FC | 	wrbyte	#32, local01
2b948     14 4E 05 F1 | 	add	fp, #20
2b94c     A7 12 02 FB | 	rdlong	arg01, fp
2b950     14 4E 85 F1 | 	sub	fp, #20
2b954     A7 14 02 FB | 	rdlong	arg02, fp
2b958     30 4E 85 F1 | 	sub	fp, #48
2b95c     00 16 06 F6 | 	mov	arg03, #0
2b960     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
2b964     30 4E 05 F1 | 	add	fp, #48
2b968     A7 12 02 FB | 	rdlong	arg01, fp
2b96c     1C 12 06 F1 | 	add	arg01, #28
2b970     09 01 68 FC | 	wrlong	#0, arg01
2b974     14 4E 05 F1 | 	add	fp, #20
2b978     A7 1E 02 FB | 	rdlong	local01, fp
2b97c     03 1E 06 F1 | 	add	local01, #3
2b980     0F 03 48 FC | 	wrbyte	#1, local01
2b984     04 4E 05 F1 | 	add	fp, #4
2b988     A7 1E 0A FB | 	rdlong	local01, fp wz
2b98c     48 4E 85 F1 | 	sub	fp, #72
2b990     E8 00 90 AD |  if_e	jmp	#LR__4518
2b994     44 4E 05 F1 | 	add	fp, #68
2b998     A7 1E 02 FB | 	rdlong	local01, fp
2b99c     30 1E 06 F1 | 	add	local01, #48
2b9a0     0F 1F 02 FB | 	rdlong	local01, local01
2b9a4     14 4E 05 F1 | 	add	fp, #20
2b9a8     A7 1E 62 FC | 	wrlong	local01, fp
2b9ac     44 4E 85 F1 | 	sub	fp, #68
2b9b0     A7 12 02 F6 | 	mov	arg01, fp
2b9b4     34 4E 05 F1 | 	add	fp, #52
2b9b8     A7 14 02 FB | 	rdlong	arg02, fp
2b9bc     48 4E 85 F1 | 	sub	fp, #72
2b9c0     00 16 06 F6 | 	mov	arg03, #0
2b9c4     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
2b9c8     10 4E 05 F1 | 	add	fp, #16
2b9cc     A7 FA 61 FC | 	wrlong	result1, fp
2b9d0     10 4E 85 F1 | 	sub	fp, #16
2b9d4     00 FA 0D F2 | 	cmp	result1, #0 wz
2b9d8     A0 00 90 5D |  if_ne	jmp	#LR__4518
2b9dc     44 4E 05 F1 | 	add	fp, #68
2b9e0     A7 12 02 FB | 	rdlong	arg01, fp
2b9e4     14 4E 05 F1 | 	add	fp, #20
2b9e8     A7 14 02 FB | 	rdlong	arg02, fp
2b9ec     58 4E 85 F1 | 	sub	fp, #88
2b9f0     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
2b9f4     10 4E 05 F1 | 	add	fp, #16
2b9f8     A7 FA 61 FC | 	wrlong	result1, fp
2b9fc     34 4E 05 F1 | 	add	fp, #52
2ba00     A7 18 02 FB | 	rdlong	arg04, fp
2ba04     04 4E 05 F1 | 	add	fp, #4
2ba08     A7 1E 02 FB | 	rdlong	local01, fp
2ba0c     48 4E 85 F1 | 	sub	fp, #72
2ba10     01 1E 86 F1 | 	sub	local01, #1
2ba14     10 18 06 F1 | 	add	arg04, #16
2ba18     0C 1F 62 FC | 	wrlong	local01, arg04
2ba1c     5C 00 90 FD | 	jmp	#LR__4518
2ba20                 | LR__4515
2ba20     10 4E 05 F1 | 	add	fp, #16
2ba24     A7 18 0A FB | 	rdlong	arg04, fp wz
2ba28     10 4E 85 F1 | 	sub	fp, #16
2ba2c     4C 00 90 5D |  if_ne	jmp	#LR__4517
2ba30     1A 4E 05 F1 | 	add	fp, #26
2ba34     A7 18 C2 FA | 	rdbyte	arg04, fp
2ba38     1A 4E 85 F1 | 	sub	fp, #26
2ba3c     10 18 CE F7 | 	test	arg04, #16 wz
2ba40     10 4E 05 51 |  if_ne	add	fp, #16
2ba44     A7 08 68 5C |  if_ne	wrlong	#4, fp
2ba48     10 4E 85 51 |  if_ne	sub	fp, #16
2ba4c     2C 00 90 5D |  if_ne	jmp	#LR__4516
2ba50     0C 4E 05 F1 | 	add	fp, #12
2ba54     A7 18 C2 FA | 	rdbyte	arg04, fp
2ba58     0C 4E 85 F1 | 	sub	fp, #12
2ba5c     02 18 CE F7 | 	test	arg04, #2 wz
2ba60     1A 4E 05 51 |  if_ne	add	fp, #26
2ba64     A7 1E C2 5A |  if_ne	rdbyte	local01, fp
2ba68     1A 4E 85 51 |  if_ne	sub	fp, #26
2ba6c     01 1E CE 57 |  if_ne	test	local01, #1 wz
2ba70     10 4E 05 51 |  if_ne	add	fp, #16
2ba74     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2ba78     10 4E 85 51 |  if_ne	sub	fp, #16
2ba7c                 | LR__4516
2ba7c                 | LR__4517
2ba7c                 | LR__4518
2ba7c     10 4E 05 F1 | 	add	fp, #16
2ba80     A7 1E 0A FB | 	rdlong	local01, fp wz
2ba84     10 4E 85 F1 | 	sub	fp, #16
2ba88     60 00 90 5D |  if_ne	jmp	#LR__4519
2ba8c     0C 4E 05 F1 | 	add	fp, #12
2ba90     A7 20 C2 FA | 	rdbyte	local02, fp
2ba94     0C 4E 85 F1 | 	sub	fp, #12
2ba98     08 20 CE F7 | 	test	local02, #8 wz
2ba9c     0C 4E 05 51 |  if_ne	add	fp, #12
2baa0     A7 20 C2 5A |  if_ne	rdbyte	local02, fp
2baa4     40 20 46 55 |  if_ne	or	local02, #64
2baa8     A7 20 42 5C |  if_ne	wrbyte	local02, fp
2baac     0C 4E 85 51 |  if_ne	sub	fp, #12
2bab0     04 4E 05 F1 | 	add	fp, #4
2bab4     A7 20 02 FB | 	rdlong	local02, fp
2bab8     40 4E 05 F1 | 	add	fp, #64
2babc     A7 1E 02 FB | 	rdlong	local01, fp
2bac0     30 1E 06 F1 | 	add	local01, #48
2bac4     0F 1F 02 FB | 	rdlong	local01, local01
2bac8     20 20 06 F1 | 	add	local02, #32
2bacc     10 1F 62 FC | 	wrlong	local01, local02
2bad0     40 4E 85 F1 | 	sub	fp, #64
2bad4     A7 20 02 FB | 	rdlong	local02, fp
2bad8     2C 4E 05 F1 | 	add	fp, #44
2badc     A7 1E 02 FB | 	rdlong	local01, fp
2bae0     30 4E 85 F1 | 	sub	fp, #48
2bae4     24 20 06 F1 | 	add	local02, #36
2bae8     10 1F 62 FC | 	wrlong	local01, local02
2baec                 | LR__4519
2baec     10 4E 05 F1 | 	add	fp, #16
2baf0     A7 20 0A FB | 	rdlong	local02, fp wz
2baf4     10 4E 85 F1 | 	sub	fp, #16
2baf8     F4 02 90 5D |  if_ne	jmp	#LR__4525
2bafc     04 4E 05 F1 | 	add	fp, #4
2bb00     A7 20 02 FB | 	rdlong	local02, fp
2bb04     40 4E 05 F1 | 	add	fp, #64
2bb08     A7 12 02 FB | 	rdlong	arg01, fp
2bb0c     14 4E 85 F1 | 	sub	fp, #20
2bb10     A7 14 02 FB | 	rdlong	arg02, fp
2bb14     30 4E 85 F1 | 	sub	fp, #48
2bb18     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
2bb1c     08 20 06 F1 | 	add	local02, #8
2bb20     10 FB 61 FC | 	wrlong	result1, local02
2bb24     04 4E 05 F1 | 	add	fp, #4
2bb28     A7 20 02 FB | 	rdlong	local02, fp
2bb2c     2C 4E 05 F1 | 	add	fp, #44
2bb30     A7 12 02 FB | 	rdlong	arg01, fp
2bb34     1C 12 06 F1 | 	add	arg01, #28
2bb38                 | ' {
2bb38                 | ' 
2bb38                 | ' 	return *((DWORD*)ptr);
2bb38     09 FB 01 FB | 	rdlong	result1, arg01
2bb3c     0C 20 06 F1 | 	add	local02, #12
2bb40     10 FB 61 FC | 	wrlong	result1, local02
2bb44     2C 4E 85 F1 | 	sub	fp, #44
2bb48     A7 20 02 FB | 	rdlong	local02, fp
2bb4c     40 4E 05 F1 | 	add	fp, #64
2bb50     A7 1E 02 FB | 	rdlong	local01, fp
2bb54     10 1F 62 FC | 	wrlong	local01, local02
2bb58     40 4E 85 F1 | 	sub	fp, #64
2bb5c     A7 20 02 FB | 	rdlong	local02, fp
2bb60     40 4E 05 F1 | 	add	fp, #64
2bb64     A7 1E 02 FB | 	rdlong	local01, fp
2bb68     06 1E 06 F1 | 	add	local01, #6
2bb6c     0F 1F E2 FA | 	rdword	local01, local01
2bb70     04 20 06 F1 | 	add	local02, #4
2bb74     10 1F 52 FC | 	wrword	local01, local02
2bb78     40 4E 85 F1 | 	sub	fp, #64
2bb7c     A7 20 02 FB | 	rdlong	local02, fp
2bb80     08 4E 05 F1 | 	add	fp, #8
2bb84     A7 1E C2 FA | 	rdbyte	local01, fp
2bb88     10 20 06 F1 | 	add	local02, #16
2bb8c     10 1F 42 FC | 	wrbyte	local01, local02
2bb90     08 4E 85 F1 | 	sub	fp, #8
2bb94     A7 20 02 FB | 	rdlong	local02, fp
2bb98     11 20 06 F1 | 	add	local02, #17
2bb9c     10 01 48 FC | 	wrbyte	#0, local02
2bba0     A7 20 02 FB | 	rdlong	local02, fp
2bba4     1C 20 06 F1 | 	add	local02, #28
2bba8     10 01 68 FC | 	wrlong	#0, local02
2bbac     A7 20 02 FB | 	rdlong	local02, fp
2bbb0     14 20 06 F1 | 	add	local02, #20
2bbb4     10 01 68 FC | 	wrlong	#0, local02
2bbb8     A7 12 02 FB | 	rdlong	arg01, fp
2bbbc     04 4E 85 F1 | 	sub	fp, #4
2bbc0     28 12 06 F1 | 	add	arg01, #40
2bbc4     00 14 06 F6 | 	mov	arg02, #0
2bbc8     09 16 C6 F9 | 	decod	arg03, #9
2bbcc     98 00 A0 FD | 	call	#\builtin_bytefill_
2bbd0     0C 4E 05 F1 | 	add	fp, #12
2bbd4     A7 20 C2 FA | 	rdbyte	local02, fp
2bbd8     0C 4E 85 F1 | 	sub	fp, #12
2bbdc     20 20 CE F7 | 	test	local02, #32 wz
2bbe0     0C 02 90 AD |  if_e	jmp	#LR__4524
2bbe4     04 4E 05 F1 | 	add	fp, #4
2bbe8     A7 1E 02 FB | 	rdlong	local01, fp
2bbec     04 4E 85 F1 | 	sub	fp, #4
2bbf0     0C 1E 06 F1 | 	add	local01, #12
2bbf4     0F 21 02 FB | 	rdlong	local02, local01
2bbf8     01 20 16 F2 | 	cmp	local02, #1 wc
2bbfc     F0 01 90 CD |  if_b	jmp	#LR__4524
2bc00     04 4E 05 F1 | 	add	fp, #4
2bc04     A7 1E 02 FB | 	rdlong	local01, fp
2bc08     0F 21 02 F6 | 	mov	local02, local01
2bc0c     0C 1E 06 F1 | 	add	local01, #12
2bc10     0F 1F 02 FB | 	rdlong	local01, local01
2bc14     14 20 06 F1 | 	add	local02, #20
2bc18     10 1F 62 FC | 	wrlong	local01, local02
2bc1c     40 4E 05 F1 | 	add	fp, #64
2bc20     A7 20 02 FB | 	rdlong	local02, fp
2bc24     0A 20 06 F1 | 	add	local02, #10
2bc28     10 21 E2 FA | 	rdword	local02, local02
2bc2c     09 20 66 F0 | 	shl	local02, #9
2bc30     08 4E 05 F1 | 	add	fp, #8
2bc34     A7 20 62 FC | 	wrlong	local02, fp
2bc38     48 4E 85 F1 | 	sub	fp, #72
2bc3c     A7 20 02 FB | 	rdlong	local02, fp
2bc40     08 20 06 F1 | 	add	local02, #8
2bc44     10 1F 02 FB | 	rdlong	local01, local02
2bc48     4C 4E 05 F1 | 	add	fp, #76
2bc4c     A7 1E 62 FC | 	wrlong	local01, fp
2bc50                 | ' 				fp->fptr = fp->obj.objsize;
2bc50                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
2bc50                 | ' 				clst = fp->obj.sclust;
2bc50                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
2bc50     4C 4E 85 F1 | 	sub	fp, #76
2bc54     A7 20 02 FB | 	rdlong	local02, fp
2bc58     0C 20 06 F1 | 	add	local02, #12
2bc5c     10 1F 02 FB | 	rdlong	local01, local02
2bc60     58 4E 05 F1 | 	add	fp, #88
2bc64     A7 1E 62 FC | 	wrlong	local01, fp
2bc68     5C 4E 85 F1 | 	sub	fp, #92
2bc6c                 | LR__4520
2bc6c     10 4E 05 F1 | 	add	fp, #16
2bc70     A7 20 0A FB | 	rdlong	local02, fp wz
2bc74     10 4E 85 F1 | 	sub	fp, #16
2bc78     94 00 90 5D |  if_ne	jmp	#LR__4521
2bc7c     5C 4E 05 F1 | 	add	fp, #92
2bc80     A7 20 02 FB | 	rdlong	local02, fp
2bc84     10 4E 85 F1 | 	sub	fp, #16
2bc88     A7 1E 02 FB | 	rdlong	local01, fp
2bc8c     4C 4E 85 F1 | 	sub	fp, #76
2bc90     0F 21 1A F2 | 	cmp	local02, local01 wcz
2bc94     78 00 90 ED |  if_be	jmp	#LR__4521
2bc98     04 4E 05 F1 | 	add	fp, #4
2bc9c     A7 12 02 FB | 	rdlong	arg01, fp
2bca0     4C 4E 05 F1 | 	add	fp, #76
2bca4     A7 14 02 FB | 	rdlong	arg02, fp
2bca8     50 4E 85 F1 | 	sub	fp, #80
2bcac     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
2bcb0     50 4E 05 F1 | 	add	fp, #80
2bcb4     A7 FA 61 FC | 	wrlong	result1, fp
2bcb8     50 4E 85 F1 | 	sub	fp, #80
2bcbc     02 FA 15 F2 | 	cmp	result1, #2 wc
2bcc0     10 4E 05 C1 |  if_b	add	fp, #16
2bcc4     A7 04 68 CC |  if_b	wrlong	#2, fp
2bcc8     10 4E 85 C1 |  if_b	sub	fp, #16
2bccc     50 4E 05 F1 | 	add	fp, #80
2bcd0     A7 20 02 FB | 	rdlong	local02, fp
2bcd4     50 4E 85 F1 | 	sub	fp, #80
2bcd8     FF FF 7F FF 
2bcdc     FF 21 0E F2 | 	cmp	local02, ##-1 wz
2bce0     10 4E 05 A1 |  if_e	add	fp, #16
2bce4     A7 02 68 AC |  if_e	wrlong	#1, fp
2bce8     10 4E 85 A1 |  if_e	sub	fp, #16
2bcec     5C 4E 05 F1 | 	add	fp, #92
2bcf0     A7 20 02 FB | 	rdlong	local02, fp
2bcf4     10 4E 85 F1 | 	sub	fp, #16
2bcf8     A7 1E 02 FB | 	rdlong	local01, fp
2bcfc     0F 21 82 F1 | 	sub	local02, local01
2bd00     10 4E 05 F1 | 	add	fp, #16
2bd04     A7 20 62 FC | 	wrlong	local02, fp
2bd08     5C 4E 85 F1 | 	sub	fp, #92
2bd0c     5C FF 9F FD | 	jmp	#LR__4520
2bd10                 | LR__4521
2bd10     04 4E 05 F1 | 	add	fp, #4
2bd14     A7 20 02 FB | 	rdlong	local02, fp
2bd18     4C 4E 05 F1 | 	add	fp, #76
2bd1c     A7 1E 02 FB | 	rdlong	local01, fp
2bd20     18 20 06 F1 | 	add	local02, #24
2bd24     10 1F 62 FC | 	wrlong	local01, local02
2bd28     40 4E 85 F1 | 	sub	fp, #64
2bd2c     A7 20 0A FB | 	rdlong	local02, fp wz
2bd30     10 4E 85 F1 | 	sub	fp, #16
2bd34     B8 00 90 5D |  if_ne	jmp	#LR__4523
2bd38     5C 4E 05 F1 | 	add	fp, #92
2bd3c     A7 1E 02 FB | 	rdlong	local01, fp
2bd40     5C 4E 85 F1 | 	sub	fp, #92
2bd44     FF 1F CE F7 | 	test	local01, #511 wz
2bd48     A4 00 90 AD |  if_e	jmp	#LR__4523
2bd4c     44 4E 05 F1 | 	add	fp, #68
2bd50     A7 12 02 FB | 	rdlong	arg01, fp
2bd54     0C 4E 05 F1 | 	add	fp, #12
2bd58     A7 14 02 FB | 	rdlong	arg02, fp
2bd5c     50 4E 85 F1 | 	sub	fp, #80
2bd60     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
2bd64     58 4E 05 F1 | 	add	fp, #88
2bd68     A7 FA 61 FC | 	wrlong	result1, fp
2bd6c     00 FA 4D F2 | 	cmps	result1, #0 wz
2bd70     58 4E 85 F1 | 	sub	fp, #88
2bd74     10 4E 05 A1 |  if_e	add	fp, #16
2bd78     A7 04 68 AC |  if_e	wrlong	#2, fp
2bd7c     10 4E 85 A1 |  if_e	sub	fp, #16
2bd80     6C 00 90 AD |  if_e	jmp	#LR__4522
2bd84     04 4E 05 F1 | 	add	fp, #4
2bd88     A7 20 02 FB | 	rdlong	local02, fp
2bd8c     54 4E 05 F1 | 	add	fp, #84
2bd90     A7 1E 02 FB | 	rdlong	local01, fp
2bd94     04 4E 05 F1 | 	add	fp, #4
2bd98     A7 18 02 FB | 	rdlong	arg04, fp
2bd9c     09 18 46 F0 | 	shr	arg04, #9
2bda0     0C 1F 02 F1 | 	add	local01, arg04
2bda4     1C 20 06 F1 | 	add	local02, #28
2bda8     10 1F 62 FC | 	wrlong	local01, local02
2bdac     18 4E 85 F1 | 	sub	fp, #24
2bdb0     A7 20 02 FB | 	rdlong	local02, fp
2bdb4     01 20 06 F1 | 	add	local02, #1
2bdb8     10 13 C2 FA | 	rdbyte	arg01, local02
2bdbc     40 4E 85 F1 | 	sub	fp, #64
2bdc0     A7 20 02 FB | 	rdlong	local02, fp
2bdc4     10 15 02 F6 | 	mov	arg02, local02
2bdc8     28 14 06 F1 | 	add	arg02, #40
2bdcc     04 4E 85 F1 | 	sub	fp, #4
2bdd0     1C 20 06 F1 | 	add	local02, #28
2bdd4     10 17 02 FB | 	rdlong	arg03, local02
2bdd8     01 18 06 F6 | 	mov	arg04, #1
2bddc     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
2bde0     00 FA 0D F2 | 	cmp	result1, #0 wz
2bde4     10 4E 05 51 |  if_ne	add	fp, #16
2bde8     A7 02 68 5C |  if_ne	wrlong	#1, fp
2bdec     10 4E 85 51 |  if_ne	sub	fp, #16
2bdf0                 | LR__4522
2bdf0                 | LR__4523
2bdf0                 | LR__4524
2bdf0                 | LR__4525
2bdf0                 | LR__4526
2bdf0     10 4E 05 F1 | 	add	fp, #16
2bdf4     A7 20 0A FB | 	rdlong	local02, fp wz
2bdf8     10 4E 85 F1 | 	sub	fp, #16
2bdfc     04 4E 05 51 |  if_ne	add	fp, #4
2be00     A7 20 02 5B |  if_ne	rdlong	local02, fp
2be04     04 4E 85 51 |  if_ne	sub	fp, #4
2be08     10 01 68 5C |  if_ne	wrlong	#0, local02
2be0c                 | ' 
2be0c                 | ' 	return res ;
2be0c     10 4E 05 F1 | 	add	fp, #16
2be10     A7 FA 01 FB | 	rdlong	result1, fp
2be14     10 4E 85 F1 | 	sub	fp, #16
2be18                 | LR__4527
2be18     A7 F0 03 F6 | 	mov	ptra, fp
2be1c     B2 00 A0 FD | 	call	#popregs_
2be20                 | _fatfs_cc_f_open_ret
2be20     2D 00 64 FD | 	ret
2be24                 | 
2be24                 | _fatfs_cc_f_read
2be24     0E 4A 05 F6 | 	mov	COUNT_, #14
2be28     A8 00 A0 FD | 	call	#pushregs_
2be2c     38 F0 07 F1 | 	add	ptra, #56
2be30     04 4E 05 F1 | 	add	fp, #4
2be34     A7 12 62 FC | 	wrlong	arg01, fp
2be38     04 4E 05 F1 | 	add	fp, #4
2be3c     A7 14 62 FC | 	wrlong	arg02, fp
2be40     04 4E 05 F1 | 	add	fp, #4
2be44     A7 16 62 FC | 	wrlong	arg03, fp
2be48     04 4E 05 F1 | 	add	fp, #4
2be4c     A7 18 62 FC | 	wrlong	arg04, fp
2be50     08 4E 85 F1 | 	sub	fp, #8
2be54     A7 FA 01 FB | 	rdlong	result1, fp
2be58     2C 4E 05 F1 | 	add	fp, #44
2be5c     A7 FA 61 FC | 	wrlong	result1, fp
2be60     24 4E 85 F1 | 	sub	fp, #36
2be64     A7 FA 01 FB | 	rdlong	result1, fp
2be68     FD 00 68 FC | 	wrlong	#0, result1
2be6c     0C 4E 85 F1 | 	sub	fp, #12
2be70     A7 12 02 FB | 	rdlong	arg01, fp
2be74     14 4E 05 F1 | 	add	fp, #20
2be78     A7 14 02 F6 | 	mov	arg02, fp
2be7c     18 4E 85 F1 | 	sub	fp, #24
2be80     24 F7 BF FD | 	call	#_fatfs_cc_validate
2be84     14 4E 05 F1 | 	add	fp, #20
2be88     A7 FA 61 FC | 	wrlong	result1, fp
2be8c     00 FA 4D F2 | 	cmps	result1, #0 wz
2be90     14 4E 85 F1 | 	sub	fp, #20
2be94     20 00 90 5D |  if_ne	jmp	#LR__4530
2be98     04 4E 05 F1 | 	add	fp, #4
2be9c     A7 14 02 FB | 	rdlong	arg02, fp
2bea0     11 14 06 F1 | 	add	arg02, #17
2bea4     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
2bea8     10 4E 05 F1 | 	add	fp, #16
2beac     A7 14 62 FC | 	wrlong	arg02, fp
2beb0     14 4E 85 F1 | 	sub	fp, #20
2beb4     10 00 90 AD |  if_e	jmp	#LR__4531
2beb8                 | LR__4530
2beb8     14 4E 05 F1 | 	add	fp, #20
2bebc     A7 FA 01 FB | 	rdlong	result1, fp
2bec0     14 4E 85 F1 | 	sub	fp, #20
2bec4     EC 05 90 FD | 	jmp	#LR__4550
2bec8                 | LR__4531
2bec8     04 4E 05 F1 | 	add	fp, #4
2becc     A7 18 02 FB | 	rdlong	arg04, fp
2bed0     04 4E 85 F1 | 	sub	fp, #4
2bed4     10 18 06 F1 | 	add	arg04, #16
2bed8     0C 19 C2 FA | 	rdbyte	arg04, arg04
2bedc     01 18 CE F7 | 	test	arg04, #1 wz
2bee0     07 FA 05 A6 |  if_e	mov	result1, #7
2bee4     CC 05 90 AD |  if_e	jmp	#LR__4550
2bee8     04 4E 05 F1 | 	add	fp, #4
2beec     A7 1E 02 FB | 	rdlong	local01, fp
2bef0     0F 21 02 F6 | 	mov	local02, local01
2bef4     0C 20 06 F1 | 	add	local02, #12
2bef8     10 23 02 FB | 	rdlong	local03, local02
2befc     14 1E 06 F1 | 	add	local01, #20
2bf00     0F 1F 02 FB | 	rdlong	local01, local01
2bf04     0F 23 82 F1 | 	sub	local03, local01
2bf08     20 4E 05 F1 | 	add	fp, #32
2bf0c     A7 22 62 FC | 	wrlong	local03, fp
2bf10     18 4E 85 F1 | 	sub	fp, #24
2bf14     A7 24 02 FB | 	rdlong	local04, fp
2bf18     0C 4E 85 F1 | 	sub	fp, #12
2bf1c     11 25 1A F2 | 	cmp	local04, local03 wcz
2bf20     24 4E 05 11 |  if_a	add	fp, #36
2bf24     A7 24 02 1B |  if_a	rdlong	local04, fp
2bf28     18 4E 85 11 |  if_a	sub	fp, #24
2bf2c     A7 24 62 1C |  if_a	wrlong	local04, fp
2bf30     0C 4E 85 11 |  if_a	sub	fp, #12
2bf34                 | ' 
2bf34                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
2bf34                 | LR__4532
2bf34     0C 4E 05 F1 | 	add	fp, #12
2bf38     A7 20 02 FB | 	rdlong	local02, fp
2bf3c     0C 4E 85 F1 | 	sub	fp, #12
2bf40     10 25 02 F6 | 	mov	local04, local02
2bf44     01 24 16 F2 | 	cmp	local04, #1 wc
2bf48     64 05 90 CD |  if_b	jmp	#LR__4549
2bf4c     04 4E 05 F1 | 	add	fp, #4
2bf50     A7 22 02 FB | 	rdlong	local03, fp
2bf54     04 4E 85 F1 | 	sub	fp, #4
2bf58     14 22 06 F1 | 	add	local03, #20
2bf5c     11 23 02 FB | 	rdlong	local03, local03
2bf60     FF 23 CE F7 | 	test	local03, #511 wz
2bf64     3C 04 90 5D |  if_ne	jmp	#LR__4547
2bf68     04 4E 05 F1 | 	add	fp, #4
2bf6c     A7 1E 02 FB | 	rdlong	local01, fp
2bf70     14 1E 06 F1 | 	add	local01, #20
2bf74     0F 23 02 FB | 	rdlong	local03, local01
2bf78     09 22 46 F0 | 	shr	local03, #9
2bf7c     14 4E 05 F1 | 	add	fp, #20
2bf80     A7 26 02 FB | 	rdlong	local05, fp
2bf84     13 29 02 F6 | 	mov	local06, local05
2bf88     0A 28 06 F1 | 	add	local06, #10
2bf8c     14 2B E2 FA | 	rdword	local07, local06
2bf90     0A 28 86 F1 | 	sub	local06, #10
2bf94     15 2D 32 F9 | 	getword	local08, local07, #0
2bf98     01 2C 86 F1 | 	sub	local08, #1
2bf9c     16 23 0A F5 | 	and	local03, local08 wz
2bfa0     18 4E 05 F1 | 	add	fp, #24
2bfa4     A7 22 62 FC | 	wrlong	local03, fp
2bfa8     30 4E 85 F1 | 	sub	fp, #48
2bfac     E0 00 90 5D |  if_ne	jmp	#LR__4537
2bfb0     04 4E 05 F1 | 	add	fp, #4
2bfb4     A7 22 02 FB | 	rdlong	local03, fp
2bfb8     04 4E 85 F1 | 	sub	fp, #4
2bfbc     14 22 06 F1 | 	add	local03, #20
2bfc0     11 23 0A FB | 	rdlong	local03, local03 wz
2bfc4     20 00 90 5D |  if_ne	jmp	#LR__4533
2bfc8     04 4E 05 F1 | 	add	fp, #4
2bfcc     A7 22 02 FB | 	rdlong	local03, fp
2bfd0     08 22 06 F1 | 	add	local03, #8
2bfd4     11 23 02 FB | 	rdlong	local03, local03
2bfd8     18 4E 05 F1 | 	add	fp, #24
2bfdc     A7 22 62 FC | 	wrlong	local03, fp
2bfe0     1C 4E 85 F1 | 	sub	fp, #28
2bfe4     28 00 90 FD | 	jmp	#LR__4534
2bfe8                 | LR__4533
2bfe8     04 4E 05 F1 | 	add	fp, #4
2bfec     A7 2C 02 FB | 	rdlong	local08, fp
2bff0     16 13 02 F6 | 	mov	arg01, local08
2bff4     04 4E 85 F1 | 	sub	fp, #4
2bff8     18 2C 06 F1 | 	add	local08, #24
2bffc     16 15 02 FB | 	rdlong	arg02, local08
2c000     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
2c004     1C 4E 05 F1 | 	add	fp, #28
2c008     A7 FA 61 FC | 	wrlong	result1, fp
2c00c     1C 4E 85 F1 | 	sub	fp, #28
2c010                 | LR__4534
2c010     1C 4E 05 F1 | 	add	fp, #28
2c014     A7 22 02 FB | 	rdlong	local03, fp
2c018     1C 4E 85 F1 | 	sub	fp, #28
2c01c     02 22 16 F2 | 	cmp	local03, #2 wc
2c020     1C 00 90 3D |  if_ae	jmp	#LR__4535
2c024     04 4E 05 F1 | 	add	fp, #4
2c028     A7 22 02 FB | 	rdlong	local03, fp
2c02c     04 4E 85 F1 | 	sub	fp, #4
2c030     11 22 06 F1 | 	add	local03, #17
2c034     11 05 48 FC | 	wrbyte	#2, local03
2c038     02 FA 05 F6 | 	mov	result1, #2
2c03c     74 04 90 FD | 	jmp	#LR__4550
2c040                 | LR__4535
2c040     1C 4E 05 F1 | 	add	fp, #28
2c044     A7 22 02 FB | 	rdlong	local03, fp
2c048     1C 4E 85 F1 | 	sub	fp, #28
2c04c     FF FF 7F FF 
2c050     FF 23 0E F2 | 	cmp	local03, ##-1 wz
2c054     1C 00 90 5D |  if_ne	jmp	#LR__4536
2c058     04 4E 05 F1 | 	add	fp, #4
2c05c     A7 22 02 FB | 	rdlong	local03, fp
2c060     04 4E 85 F1 | 	sub	fp, #4
2c064     11 22 06 F1 | 	add	local03, #17
2c068     11 03 48 FC | 	wrbyte	#1, local03
2c06c     01 FA 05 F6 | 	mov	result1, #1
2c070     40 04 90 FD | 	jmp	#LR__4550
2c074                 | LR__4536
2c074     04 4E 05 F1 | 	add	fp, #4
2c078     A7 22 02 FB | 	rdlong	local03, fp
2c07c     18 4E 05 F1 | 	add	fp, #24
2c080     A7 2C 02 FB | 	rdlong	local08, fp
2c084     1C 4E 85 F1 | 	sub	fp, #28
2c088     18 22 06 F1 | 	add	local03, #24
2c08c     11 2D 62 FC | 	wrlong	local08, local03
2c090                 | LR__4537
2c090     18 4E 05 F1 | 	add	fp, #24
2c094     A7 12 02 FB | 	rdlong	arg01, fp
2c098     14 4E 85 F1 | 	sub	fp, #20
2c09c     A7 22 02 FB | 	rdlong	local03, fp
2c0a0     04 4E 85 F1 | 	sub	fp, #4
2c0a4     18 22 06 F1 | 	add	local03, #24
2c0a8     11 15 02 FB | 	rdlong	arg02, local03
2c0ac     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
2c0b0     20 4E 05 F1 | 	add	fp, #32
2c0b4     A7 FA 61 FC | 	wrlong	result1, fp
2c0b8     20 4E 85 F1 | 	sub	fp, #32
2c0bc     00 FA 0D F2 | 	cmp	result1, #0 wz
2c0c0     1C 00 90 5D |  if_ne	jmp	#LR__4538
2c0c4     04 4E 05 F1 | 	add	fp, #4
2c0c8     A7 22 02 FB | 	rdlong	local03, fp
2c0cc     04 4E 85 F1 | 	sub	fp, #4
2c0d0     11 22 06 F1 | 	add	local03, #17
2c0d4     11 05 48 FC | 	wrbyte	#2, local03
2c0d8     02 FA 05 F6 | 	mov	result1, #2
2c0dc     D4 03 90 FD | 	jmp	#LR__4550
2c0e0                 | LR__4538
2c0e0     20 4E 05 F1 | 	add	fp, #32
2c0e4     A7 22 02 FB | 	rdlong	local03, fp
2c0e8     10 4E 05 F1 | 	add	fp, #16
2c0ec     A7 2C 02 FB | 	rdlong	local08, fp
2c0f0     16 23 02 F1 | 	add	local03, local08
2c0f4     10 4E 85 F1 | 	sub	fp, #16
2c0f8     A7 22 62 FC | 	wrlong	local03, fp
2c0fc     14 4E 85 F1 | 	sub	fp, #20
2c100     A7 22 02 FB | 	rdlong	local03, fp
2c104     09 22 46 F0 | 	shr	local03, #9
2c108     20 4E 05 F1 | 	add	fp, #32
2c10c     A7 22 62 FC | 	wrlong	local03, fp
2c110     2C 4E 85 F1 | 	sub	fp, #44
2c114     01 22 16 F2 | 	cmp	local03, #1 wc
2c118     5C 01 90 CD |  if_b	jmp	#LR__4542
2c11c     30 4E 05 F1 | 	add	fp, #48
2c120     A7 22 02 FB | 	rdlong	local03, fp
2c124     04 4E 85 F1 | 	sub	fp, #4
2c128     A7 2C 02 FB | 	rdlong	local08, fp
2c12c     16 23 02 F1 | 	add	local03, local08
2c130     14 4E 85 F1 | 	sub	fp, #20
2c134     A7 2C 02 FB | 	rdlong	local08, fp
2c138     18 4E 85 F1 | 	sub	fp, #24
2c13c     0A 2C 06 F1 | 	add	local08, #10
2c140     16 2D E2 FA | 	rdword	local08, local08
2c144     16 23 1A F2 | 	cmp	local03, local08 wcz
2c148     28 00 90 ED |  if_be	jmp	#LR__4539
2c14c     18 4E 05 F1 | 	add	fp, #24
2c150     A7 1E 02 FB | 	rdlong	local01, fp
2c154     0A 1E 06 F1 | 	add	local01, #10
2c158     0F 23 E2 FA | 	rdword	local03, local01
2c15c     18 4E 05 F1 | 	add	fp, #24
2c160     A7 2C 02 FB | 	rdlong	local08, fp
2c164     16 23 82 F1 | 	sub	local03, local08
2c168     04 4E 85 F1 | 	sub	fp, #4
2c16c     A7 22 62 FC | 	wrlong	local03, fp
2c170     2C 4E 85 F1 | 	sub	fp, #44
2c174                 | LR__4539
2c174     18 4E 05 F1 | 	add	fp, #24
2c178     A7 1E 02 FB | 	rdlong	local01, fp
2c17c     01 1E 06 F1 | 	add	local01, #1
2c180     0F 13 C2 FA | 	rdbyte	arg01, local01
2c184     1C 4E 05 F1 | 	add	fp, #28
2c188     A7 14 02 FB | 	rdlong	arg02, fp
2c18c     14 4E 85 F1 | 	sub	fp, #20
2c190     A7 16 02 FB | 	rdlong	arg03, fp
2c194     0C 4E 05 F1 | 	add	fp, #12
2c198     A7 18 02 FB | 	rdlong	arg04, fp
2c19c     2C 4E 85 F1 | 	sub	fp, #44
2c1a0     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
2c1a4     00 FA 0D F2 | 	cmp	result1, #0 wz
2c1a8     1C 00 90 AD |  if_e	jmp	#LR__4540
2c1ac     04 4E 05 F1 | 	add	fp, #4
2c1b0     A7 22 02 FB | 	rdlong	local03, fp
2c1b4     04 4E 85 F1 | 	sub	fp, #4
2c1b8     11 22 06 F1 | 	add	local03, #17
2c1bc     11 03 48 FC | 	wrbyte	#1, local03
2c1c0     01 FA 05 F6 | 	mov	result1, #1
2c1c4     EC 02 90 FD | 	jmp	#LR__4550
2c1c8                 | LR__4540
2c1c8     04 4E 05 F1 | 	add	fp, #4
2c1cc     A7 1E 02 FB | 	rdlong	local01, fp
2c1d0     04 4E 85 F1 | 	sub	fp, #4
2c1d4     10 1E 06 F1 | 	add	local01, #16
2c1d8     0F 23 C2 FA | 	rdbyte	local03, local01
2c1dc     80 22 CE F7 | 	test	local03, #128 wz
2c1e0     78 00 90 AD |  if_e	jmp	#LR__4541
2c1e4     04 4E 05 F1 | 	add	fp, #4
2c1e8     A7 2C 02 FB | 	rdlong	local08, fp
2c1ec     1C 2C 06 F1 | 	add	local08, #28
2c1f0     16 2D 02 FB | 	rdlong	local08, local08
2c1f4     1C 4E 05 F1 | 	add	fp, #28
2c1f8     A7 2E 02 FB | 	rdlong	local09, fp
2c1fc     17 2D 82 F1 | 	sub	local08, local09
2c200     0C 4E 05 F1 | 	add	fp, #12
2c204     A7 30 02 FB | 	rdlong	local10, fp
2c208     2C 4E 85 F1 | 	sub	fp, #44
2c20c     18 33 02 F6 | 	mov	local11, local10
2c210     19 2D 12 F2 | 	cmp	local08, local11 wc
2c214     44 00 90 3D |  if_ae	jmp	#LR__4541
2c218     34 4E 05 F1 | 	add	fp, #52
2c21c     A7 12 02 FB | 	rdlong	arg01, fp
2c220     30 4E 85 F1 | 	sub	fp, #48
2c224     A7 14 02 FB | 	rdlong	arg02, fp
2c228     0A 33 02 F6 | 	mov	local11, arg02
2c22c     1C 32 06 F1 | 	add	local11, #28
2c230     19 2F 02 FB | 	rdlong	local09, local11
2c234     1C 4E 05 F1 | 	add	fp, #28
2c238     A7 26 02 FB | 	rdlong	local05, fp
2c23c     13 2F 82 F1 | 	sub	local09, local05
2c240     09 2E 66 F0 | 	shl	local09, #9
2c244     17 33 02 F6 | 	mov	local11, local09
2c248     17 13 02 F1 | 	add	arg01, local09
2c24c     20 4E 85 F1 | 	sub	fp, #32
2c250     28 14 06 F1 | 	add	arg02, #40
2c254     09 16 C6 F9 | 	decod	arg03, #9
2c258     28 46 BF FD | 	call	#__system____builtin_memmove
2c25c                 | LR__4541
2c25c     2C 4E 05 F1 | 	add	fp, #44
2c260     A7 22 02 FB | 	rdlong	local03, fp
2c264     09 22 66 F0 | 	shl	local03, #9
2c268     04 4E 85 F1 | 	sub	fp, #4
2c26c     A7 22 62 FC | 	wrlong	local03, fp
2c270     28 4E 85 F1 | 	sub	fp, #40
2c274                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
2c274                 | ' 				}
2c274                 | ' 
2c274                 | ' 
2c274                 | ' 				rcnt =  ((UINT) 512 )  * cc;
2c274                 | ' 				continue;
2c274     B4 01 90 FD | 	jmp	#LR__4548
2c278                 | LR__4542
2c278     04 4E 05 F1 | 	add	fp, #4
2c27c     A7 22 02 FB | 	rdlong	local03, fp
2c280     1C 22 06 F1 | 	add	local03, #28
2c284     11 23 02 FB | 	rdlong	local03, local03
2c288     1C 4E 05 F1 | 	add	fp, #28
2c28c     A7 1E 02 FB | 	rdlong	local01, fp
2c290     20 4E 85 F1 | 	sub	fp, #32
2c294     0F 23 0A F2 | 	cmp	local03, local01 wz
2c298     EC 00 90 AD |  if_e	jmp	#LR__4546
2c29c     04 4E 05 F1 | 	add	fp, #4
2c2a0     A7 1E 02 FB | 	rdlong	local01, fp
2c2a4     04 4E 85 F1 | 	sub	fp, #4
2c2a8     10 1E 06 F1 | 	add	local01, #16
2c2ac     0F 23 C2 FA | 	rdbyte	local03, local01
2c2b0     80 22 CE F7 | 	test	local03, #128 wz
2c2b4     7C 00 90 AD |  if_e	jmp	#LR__4544
2c2b8     18 4E 05 F1 | 	add	fp, #24
2c2bc     A7 1E 02 FB | 	rdlong	local01, fp
2c2c0     01 1E 06 F1 | 	add	local01, #1
2c2c4     0F 13 C2 FA | 	rdbyte	arg01, local01
2c2c8     14 4E 85 F1 | 	sub	fp, #20
2c2cc     A7 22 02 FB | 	rdlong	local03, fp
2c2d0     11 15 02 F6 | 	mov	arg02, local03
2c2d4     28 14 06 F1 | 	add	arg02, #40
2c2d8     04 4E 85 F1 | 	sub	fp, #4
2c2dc     1C 22 06 F1 | 	add	local03, #28
2c2e0     11 17 02 FB | 	rdlong	arg03, local03
2c2e4     01 18 06 F6 | 	mov	arg04, #1
2c2e8     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
2c2ec     00 FA 0D F2 | 	cmp	result1, #0 wz
2c2f0     1C 00 90 AD |  if_e	jmp	#LR__4543
2c2f4     04 4E 05 F1 | 	add	fp, #4
2c2f8     A7 22 02 FB | 	rdlong	local03, fp
2c2fc     04 4E 85 F1 | 	sub	fp, #4
2c300     11 22 06 F1 | 	add	local03, #17
2c304     11 03 48 FC | 	wrbyte	#1, local03
2c308     01 FA 05 F6 | 	mov	result1, #1
2c30c     A4 01 90 FD | 	jmp	#LR__4550
2c310                 | LR__4543
2c310     04 4E 05 F1 | 	add	fp, #4
2c314     A7 32 02 FB | 	rdlong	local11, fp
2c318     19 23 02 F6 | 	mov	local03, local11
2c31c     04 4E 85 F1 | 	sub	fp, #4
2c320     10 32 06 F1 | 	add	local11, #16
2c324     19 33 C2 FA | 	rdbyte	local11, local11
2c328     7F 32 06 F5 | 	and	local11, #127
2c32c     10 22 06 F1 | 	add	local03, #16
2c330     11 33 42 FC | 	wrbyte	local11, local03
2c334                 | LR__4544
2c334     18 4E 05 F1 | 	add	fp, #24
2c338     A7 1E 02 FB | 	rdlong	local01, fp
2c33c     01 1E 06 F1 | 	add	local01, #1
2c340     0F 13 C2 FA | 	rdbyte	arg01, local01
2c344     14 4E 85 F1 | 	sub	fp, #20
2c348     A7 14 02 FB | 	rdlong	arg02, fp
2c34c     28 14 06 F1 | 	add	arg02, #40
2c350     1C 4E 05 F1 | 	add	fp, #28
2c354     A7 16 02 FB | 	rdlong	arg03, fp
2c358     20 4E 85 F1 | 	sub	fp, #32
2c35c     01 18 06 F6 | 	mov	arg04, #1
2c360     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
2c364     00 FA 0D F2 | 	cmp	result1, #0 wz
2c368     1C 00 90 AD |  if_e	jmp	#LR__4545
2c36c     04 4E 05 F1 | 	add	fp, #4
2c370     A7 22 02 FB | 	rdlong	local03, fp
2c374     04 4E 85 F1 | 	sub	fp, #4
2c378     11 22 06 F1 | 	add	local03, #17
2c37c     11 03 48 FC | 	wrbyte	#1, local03
2c380     01 FA 05 F6 | 	mov	result1, #1
2c384     2C 01 90 FD | 	jmp	#LR__4550
2c388                 | LR__4545
2c388                 | LR__4546
2c388     04 4E 05 F1 | 	add	fp, #4
2c38c     A7 22 02 FB | 	rdlong	local03, fp
2c390     1C 4E 05 F1 | 	add	fp, #28
2c394     A7 32 02 FB | 	rdlong	local11, fp
2c398     20 4E 85 F1 | 	sub	fp, #32
2c39c     1C 22 06 F1 | 	add	local03, #28
2c3a0     11 33 62 FC | 	wrlong	local11, local03
2c3a4                 | LR__4547
2c3a4     04 4E 05 F1 | 	add	fp, #4
2c3a8     A7 1E 02 FB | 	rdlong	local01, fp
2c3ac     14 1E 06 F1 | 	add	local01, #20
2c3b0     0F 33 02 FB | 	rdlong	local11, local01
2c3b4     FF 33 06 F5 | 	and	local11, #511
2c3b8     09 22 C6 F9 | 	decod	local03, #9
2c3bc     19 23 82 F1 | 	sub	local03, local11
2c3c0     24 4E 05 F1 | 	add	fp, #36
2c3c4     A7 22 62 FC | 	wrlong	local03, fp
2c3c8     1C 4E 85 F1 | 	sub	fp, #28
2c3cc     A7 32 02 FB | 	rdlong	local11, fp
2c3d0     0C 4E 85 F1 | 	sub	fp, #12
2c3d4     19 23 1A F2 | 	cmp	local03, local11 wcz
2c3d8     0C 4E 05 11 |  if_a	add	fp, #12
2c3dc     A7 22 02 1B |  if_a	rdlong	local03, fp
2c3e0     1C 4E 05 11 |  if_a	add	fp, #28
2c3e4     A7 22 62 1C |  if_a	wrlong	local03, fp
2c3e8     28 4E 85 11 |  if_a	sub	fp, #40
2c3ec     34 4E 05 F1 | 	add	fp, #52
2c3f0     A7 12 02 FB | 	rdlong	arg01, fp
2c3f4     30 4E 85 F1 | 	sub	fp, #48
2c3f8     A7 28 02 FB | 	rdlong	local06, fp
2c3fc     14 15 02 F6 | 	mov	arg02, local06
2c400     28 14 06 F1 | 	add	arg02, #40
2c404     14 28 06 F1 | 	add	local06, #20
2c408     14 33 02 FB | 	rdlong	local11, local06
2c40c     19 2F 02 F6 | 	mov	local09, local11
2c410     17 31 02 F6 | 	mov	local10, local09
2c414     FF 31 06 F5 | 	and	local10, #511
2c418     18 15 02 F1 | 	add	arg02, local10
2c41c     24 4E 05 F1 | 	add	fp, #36
2c420     A7 16 02 FB | 	rdlong	arg03, fp
2c424     28 4E 85 F1 | 	sub	fp, #40
2c428     58 44 BF FD | 	call	#__system____builtin_memmove
2c42c                 | LR__4548
2c42c     0C 4E 05 F1 | 	add	fp, #12
2c430     A7 22 02 FB | 	rdlong	local03, fp
2c434     1C 4E 05 F1 | 	add	fp, #28
2c438     A7 2C 02 FB | 	rdlong	local08, fp
2c43c     16 23 82 F1 | 	sub	local03, local08
2c440     1C 4E 85 F1 | 	sub	fp, #28
2c444     A7 22 62 FC | 	wrlong	local03, fp
2c448     04 4E 05 F1 | 	add	fp, #4
2c44c     A7 1E 02 FB | 	rdlong	local01, fp
2c450     0F 2B 02 FB | 	rdlong	local07, local01
2c454     18 4E 05 F1 | 	add	fp, #24
2c458     A7 2C 02 FB | 	rdlong	local08, fp
2c45c     16 2B 02 F1 | 	add	local07, local08
2c460     0F 2B 62 FC | 	wrlong	local07, local01
2c464     0C 4E 05 F1 | 	add	fp, #12
2c468     A7 22 02 FB | 	rdlong	local03, fp
2c46c     0C 4E 85 F1 | 	sub	fp, #12
2c470     A7 34 02 FB | 	rdlong	local12, fp
2c474     1A 23 02 F1 | 	add	local03, local12
2c478     0C 4E 05 F1 | 	add	fp, #12
2c47c     A7 22 62 FC | 	wrlong	local03, fp
2c480     30 4E 85 F1 | 	sub	fp, #48
2c484     A7 36 02 FB | 	rdlong	local13, fp
2c488     1B 23 02 F6 | 	mov	local03, local13
2c48c     14 36 06 F1 | 	add	local13, #20
2c490     1B 39 02 FB | 	rdlong	local14, local13
2c494     24 4E 05 F1 | 	add	fp, #36
2c498     A7 28 02 FB | 	rdlong	local06, fp
2c49c     28 4E 85 F1 | 	sub	fp, #40
2c4a0     14 39 02 F1 | 	add	local14, local06
2c4a4     14 22 06 F1 | 	add	local03, #20
2c4a8     11 39 62 FC | 	wrlong	local14, local03
2c4ac     84 FA 9F FD | 	jmp	#LR__4532
2c4b0                 | LR__4549
2c4b0                 | ' 
2c4b0                 | ' 
2c4b0                 | ' 
2c4b0                 | ' 
2c4b0                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
2c4b0                 | ' 
2c4b0                 | ' 	}
2c4b0                 | ' 
2c4b0                 | ' 	return FR_OK ;
2c4b0     00 FA 05 F6 | 	mov	result1, #0
2c4b4                 | LR__4550
2c4b4     A7 F0 03 F6 | 	mov	ptra, fp
2c4b8     B2 00 A0 FD | 	call	#popregs_
2c4bc                 | _fatfs_cc_f_read_ret
2c4bc     2D 00 64 FD | 	ret
2c4c0                 | 
2c4c0                 | _fatfs_cc_f_write
2c4c0     15 4A 05 F6 | 	mov	COUNT_, #21
2c4c4     A8 00 A0 FD | 	call	#pushregs_
2c4c8     34 F0 07 F1 | 	add	ptra, #52
2c4cc     04 4E 05 F1 | 	add	fp, #4
2c4d0     A7 12 62 FC | 	wrlong	arg01, fp
2c4d4     04 4E 05 F1 | 	add	fp, #4
2c4d8     A7 14 62 FC | 	wrlong	arg02, fp
2c4dc     04 4E 05 F1 | 	add	fp, #4
2c4e0     A7 16 62 FC | 	wrlong	arg03, fp
2c4e4     04 4E 05 F1 | 	add	fp, #4
2c4e8     A7 18 62 FC | 	wrlong	arg04, fp
2c4ec     08 4E 85 F1 | 	sub	fp, #8
2c4f0     A7 FA 01 FB | 	rdlong	result1, fp
2c4f4     28 4E 05 F1 | 	add	fp, #40
2c4f8     A7 FA 61 FC | 	wrlong	result1, fp
2c4fc     20 4E 85 F1 | 	sub	fp, #32
2c500     A7 FA 01 FB | 	rdlong	result1, fp
2c504     FD 00 68 FC | 	wrlong	#0, result1
2c508     0C 4E 85 F1 | 	sub	fp, #12
2c50c     A7 12 02 FB | 	rdlong	arg01, fp
2c510     14 4E 05 F1 | 	add	fp, #20
2c514     A7 14 02 F6 | 	mov	arg02, fp
2c518     18 4E 85 F1 | 	sub	fp, #24
2c51c     88 F0 BF FD | 	call	#_fatfs_cc_validate
2c520     14 4E 05 F1 | 	add	fp, #20
2c524     A7 FA 61 FC | 	wrlong	result1, fp
2c528     00 FA 4D F2 | 	cmps	result1, #0 wz
2c52c     14 4E 85 F1 | 	sub	fp, #20
2c530     20 00 90 5D |  if_ne	jmp	#LR__4560
2c534     04 4E 05 F1 | 	add	fp, #4
2c538     A7 14 02 FB | 	rdlong	arg02, fp
2c53c     11 14 06 F1 | 	add	arg02, #17
2c540     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
2c544     10 4E 05 F1 | 	add	fp, #16
2c548     A7 14 62 FC | 	wrlong	arg02, fp
2c54c     14 4E 85 F1 | 	sub	fp, #20
2c550     10 00 90 AD |  if_e	jmp	#LR__4561
2c554                 | LR__4560
2c554     14 4E 05 F1 | 	add	fp, #20
2c558     A7 FA 01 FB | 	rdlong	result1, fp
2c55c     14 4E 85 F1 | 	sub	fp, #20
2c560     44 07 90 FD | 	jmp	#LR__4583
2c564                 | LR__4561
2c564     04 4E 05 F1 | 	add	fp, #4
2c568     A7 14 02 FB | 	rdlong	arg02, fp
2c56c     04 4E 85 F1 | 	sub	fp, #4
2c570     10 14 06 F1 | 	add	arg02, #16
2c574     0A 15 C2 FA | 	rdbyte	arg02, arg02
2c578     02 14 CE F7 | 	test	arg02, #2 wz
2c57c     07 FA 05 A6 |  if_e	mov	result1, #7
2c580     24 07 90 AD |  if_e	jmp	#LR__4583
2c584     04 4E 05 F1 | 	add	fp, #4
2c588     A7 14 02 FB | 	rdlong	arg02, fp
2c58c     0A 13 02 F6 | 	mov	arg01, arg02
2c590     14 12 06 F1 | 	add	arg01, #20
2c594     09 13 02 FB | 	rdlong	arg01, arg01
2c598     08 4E 05 F1 | 	add	fp, #8
2c59c     A7 FA 01 FB | 	rdlong	result1, fp
2c5a0     FD 12 02 F1 | 	add	arg01, result1
2c5a4     0C 4E 85 F1 | 	sub	fp, #12
2c5a8     14 14 06 F1 | 	add	arg02, #20
2c5ac     0A FB 01 FB | 	rdlong	result1, arg02
2c5b0     FD 12 12 F2 | 	cmp	arg01, result1 wc
2c5b4     24 00 90 3D |  if_ae	jmp	#LR__4562
2c5b8     04 4E 05 F1 | 	add	fp, #4
2c5bc     A7 14 02 FB | 	rdlong	arg02, fp
2c5c0     01 FA 65 F6 | 	neg	result1, #1
2c5c4     14 14 06 F1 | 	add	arg02, #20
2c5c8     0A 15 02 FB | 	rdlong	arg02, arg02
2c5cc     0A FB 81 F1 | 	sub	result1, arg02
2c5d0     08 4E 05 F1 | 	add	fp, #8
2c5d4     A7 FA 61 FC | 	wrlong	result1, fp
2c5d8     0C 4E 85 F1 | 	sub	fp, #12
2c5dc                 | LR__4562
2c5dc                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
2c5dc                 | ' 	}
2c5dc                 | ' 
2c5dc                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
2c5dc                 | LR__4563
2c5dc     0C 4E 05 F1 | 	add	fp, #12
2c5e0     A7 FA 01 FB | 	rdlong	result1, fp
2c5e4     0C 4E 85 F1 | 	sub	fp, #12
2c5e8     01 FA 15 F2 | 	cmp	result1, #1 wc
2c5ec     90 06 90 CD |  if_b	jmp	#LR__4582
2c5f0     04 4E 05 F1 | 	add	fp, #4
2c5f4     A7 FA 01 FB | 	rdlong	result1, fp
2c5f8     04 4E 85 F1 | 	sub	fp, #4
2c5fc     14 FA 05 F1 | 	add	result1, #20
2c600     FD FA 01 FB | 	rdlong	result1, result1
2c604     FF FB CD F7 | 	test	result1, #511 wz
2c608     D8 04 90 5D |  if_ne	jmp	#LR__4578
2c60c     04 4E 05 F1 | 	add	fp, #4
2c610     A7 FA 01 FB | 	rdlong	result1, fp
2c614     14 FA 05 F1 | 	add	result1, #20
2c618     FD FA 01 FB | 	rdlong	result1, result1
2c61c     09 FA 45 F0 | 	shr	result1, #9
2c620     14 4E 05 F1 | 	add	fp, #20
2c624     A7 14 02 FB | 	rdlong	arg02, fp
2c628     0A 14 06 F1 | 	add	arg02, #10
2c62c     0A 19 E2 FA | 	rdword	arg04, arg02
2c630     0C 15 32 F9 | 	getword	arg02, arg04, #0
2c634     01 14 86 F1 | 	sub	arg02, #1
2c638     0A FB 09 F5 | 	and	result1, arg02 wz
2c63c     14 4E 05 F1 | 	add	fp, #20
2c640     A7 FA 61 FC | 	wrlong	result1, fp
2c644     2C 4E 85 F1 | 	sub	fp, #44
2c648     44 01 90 5D |  if_ne	jmp	#LR__4569
2c64c     04 4E 05 F1 | 	add	fp, #4
2c650     A7 FA 01 FB | 	rdlong	result1, fp
2c654     04 4E 85 F1 | 	sub	fp, #4
2c658     14 FA 05 F1 | 	add	result1, #20
2c65c     FD 14 0A FB | 	rdlong	arg02, result1 wz
2c660     44 00 90 5D |  if_ne	jmp	#LR__4564
2c664     04 4E 05 F1 | 	add	fp, #4
2c668     A7 14 02 FB | 	rdlong	arg02, fp
2c66c     08 14 06 F1 | 	add	arg02, #8
2c670     0A 15 0A FB | 	rdlong	arg02, arg02 wz
2c674     18 4E 05 F1 | 	add	fp, #24
2c678     A7 14 62 FC | 	wrlong	arg02, fp
2c67c     1C 4E 85 F1 | 	sub	fp, #28
2c680     4C 00 90 5D |  if_ne	jmp	#LR__4565
2c684     04 4E 05 F1 | 	add	fp, #4
2c688     A7 12 02 FB | 	rdlong	arg01, fp
2c68c     04 4E 85 F1 | 	sub	fp, #4
2c690     00 14 06 F6 | 	mov	arg02, #0
2c694     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
2c698     1C 4E 05 F1 | 	add	fp, #28
2c69c     A7 FA 61 FC | 	wrlong	result1, fp
2c6a0     1C 4E 85 F1 | 	sub	fp, #28
2c6a4     28 00 90 FD | 	jmp	#LR__4565
2c6a8                 | LR__4564
2c6a8     04 4E 05 F1 | 	add	fp, #4
2c6ac     A7 18 02 FB | 	rdlong	arg04, fp
2c6b0     0C 13 02 F6 | 	mov	arg01, arg04
2c6b4     04 4E 85 F1 | 	sub	fp, #4
2c6b8     18 18 06 F1 | 	add	arg04, #24
2c6bc     0C 15 02 FB | 	rdlong	arg02, arg04
2c6c0     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
2c6c4     1C 4E 05 F1 | 	add	fp, #28
2c6c8     A7 FA 61 FC | 	wrlong	result1, fp
2c6cc     1C 4E 85 F1 | 	sub	fp, #28
2c6d0                 | LR__4565
2c6d0     1C 4E 05 F1 | 	add	fp, #28
2c6d4     A7 FA 09 FB | 	rdlong	result1, fp wz
2c6d8     1C 4E 85 F1 | 	sub	fp, #28
2c6dc     A0 05 90 AD |  if_e	jmp	#LR__4582
2c6e0     1C 4E 05 F1 | 	add	fp, #28
2c6e4     A7 FA 01 FB | 	rdlong	result1, fp
2c6e8     1C 4E 85 F1 | 	sub	fp, #28
2c6ec     01 FA 0D F2 | 	cmp	result1, #1 wz
2c6f0     1C 00 90 5D |  if_ne	jmp	#LR__4566
2c6f4     04 4E 05 F1 | 	add	fp, #4
2c6f8     A7 FA 01 FB | 	rdlong	result1, fp
2c6fc     04 4E 85 F1 | 	sub	fp, #4
2c700     11 FA 05 F1 | 	add	result1, #17
2c704     FD 04 48 FC | 	wrbyte	#2, result1
2c708     02 FA 05 F6 | 	mov	result1, #2
2c70c     98 05 90 FD | 	jmp	#LR__4583
2c710                 | LR__4566
2c710     1C 4E 05 F1 | 	add	fp, #28
2c714     A7 FA 01 FB | 	rdlong	result1, fp
2c718     1C 4E 85 F1 | 	sub	fp, #28
2c71c     FF FF 7F FF 
2c720     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2c724     1C 00 90 5D |  if_ne	jmp	#LR__4567
2c728     04 4E 05 F1 | 	add	fp, #4
2c72c     A7 FA 01 FB | 	rdlong	result1, fp
2c730     04 4E 85 F1 | 	sub	fp, #4
2c734     11 FA 05 F1 | 	add	result1, #17
2c738     FD 02 48 FC | 	wrbyte	#1, result1
2c73c     01 FA 05 F6 | 	mov	result1, #1
2c740     64 05 90 FD | 	jmp	#LR__4583
2c744                 | LR__4567
2c744     04 4E 05 F1 | 	add	fp, #4
2c748     A7 FA 01 FB | 	rdlong	result1, fp
2c74c     18 4E 05 F1 | 	add	fp, #24
2c750     A7 18 02 FB | 	rdlong	arg04, fp
2c754     18 FA 05 F1 | 	add	result1, #24
2c758     FD 18 62 FC | 	wrlong	arg04, result1
2c75c     18 4E 85 F1 | 	sub	fp, #24
2c760     A7 FA 01 FB | 	rdlong	result1, fp
2c764     04 4E 85 F1 | 	sub	fp, #4
2c768     08 FA 05 F1 | 	add	result1, #8
2c76c     FD FA 09 FB | 	rdlong	result1, result1 wz
2c770     1C 00 90 5D |  if_ne	jmp	#LR__4568
2c774     04 4E 05 F1 | 	add	fp, #4
2c778     A7 18 02 FB | 	rdlong	arg04, fp
2c77c     18 4E 05 F1 | 	add	fp, #24
2c780     A7 FA 01 FB | 	rdlong	result1, fp
2c784     1C 4E 85 F1 | 	sub	fp, #28
2c788     08 18 06 F1 | 	add	arg04, #8
2c78c     0C FB 61 FC | 	wrlong	result1, arg04
2c790                 | LR__4568
2c790                 | LR__4569
2c790     04 4E 05 F1 | 	add	fp, #4
2c794     A7 18 02 FB | 	rdlong	arg04, fp
2c798     04 4E 85 F1 | 	sub	fp, #4
2c79c     10 18 06 F1 | 	add	arg04, #16
2c7a0     0C 19 C2 FA | 	rdbyte	arg04, arg04
2c7a4     80 18 CE F7 | 	test	arg04, #128 wz
2c7a8     7C 00 90 AD |  if_e	jmp	#LR__4571
2c7ac     18 4E 05 F1 | 	add	fp, #24
2c7b0     A7 18 02 FB | 	rdlong	arg04, fp
2c7b4     01 18 06 F1 | 	add	arg04, #1
2c7b8     0C 13 C2 FA | 	rdbyte	arg01, arg04
2c7bc     14 4E 85 F1 | 	sub	fp, #20
2c7c0     A7 18 02 FB | 	rdlong	arg04, fp
2c7c4     0C 15 02 F6 | 	mov	arg02, arg04
2c7c8     28 14 06 F1 | 	add	arg02, #40
2c7cc     04 4E 85 F1 | 	sub	fp, #4
2c7d0     1C 18 06 F1 | 	add	arg04, #28
2c7d4     0C 17 02 FB | 	rdlong	arg03, arg04
2c7d8     01 18 06 F6 | 	mov	arg04, #1
2c7dc     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
2c7e0     00 FA 0D F2 | 	cmp	result1, #0 wz
2c7e4     1C 00 90 AD |  if_e	jmp	#LR__4570
2c7e8     04 4E 05 F1 | 	add	fp, #4
2c7ec     A7 FA 01 FB | 	rdlong	result1, fp
2c7f0     04 4E 85 F1 | 	sub	fp, #4
2c7f4     11 FA 05 F1 | 	add	result1, #17
2c7f8     FD 02 48 FC | 	wrbyte	#1, result1
2c7fc     01 FA 05 F6 | 	mov	result1, #1
2c800     A4 04 90 FD | 	jmp	#LR__4583
2c804                 | LR__4570
2c804     04 4E 05 F1 | 	add	fp, #4
2c808     A7 18 02 FB | 	rdlong	arg04, fp
2c80c     0C FB 01 F6 | 	mov	result1, arg04
2c810     04 4E 85 F1 | 	sub	fp, #4
2c814     10 18 06 F1 | 	add	arg04, #16
2c818     0C 19 C2 FA | 	rdbyte	arg04, arg04
2c81c     7F 18 06 F5 | 	and	arg04, #127
2c820     10 FA 05 F1 | 	add	result1, #16
2c824     FD 18 42 FC | 	wrbyte	arg04, result1
2c828                 | LR__4571
2c828     18 4E 05 F1 | 	add	fp, #24
2c82c     A7 12 02 FB | 	rdlong	arg01, fp
2c830     14 4E 85 F1 | 	sub	fp, #20
2c834     A7 14 02 FB | 	rdlong	arg02, fp
2c838     04 4E 85 F1 | 	sub	fp, #4
2c83c     18 14 06 F1 | 	add	arg02, #24
2c840     0A 15 02 FB | 	rdlong	arg02, arg02
2c844     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
2c848     20 4E 05 F1 | 	add	fp, #32
2c84c     A7 FA 61 FC | 	wrlong	result1, fp
2c850     20 4E 85 F1 | 	sub	fp, #32
2c854     00 FA 0D F2 | 	cmp	result1, #0 wz
2c858     1C 00 90 5D |  if_ne	jmp	#LR__4572
2c85c     04 4E 05 F1 | 	add	fp, #4
2c860     A7 FA 01 FB | 	rdlong	result1, fp
2c864     04 4E 85 F1 | 	sub	fp, #4
2c868     11 FA 05 F1 | 	add	result1, #17
2c86c     FD 04 48 FC | 	wrbyte	#2, result1
2c870     02 FA 05 F6 | 	mov	result1, #2
2c874     30 04 90 FD | 	jmp	#LR__4583
2c878                 | LR__4572
2c878     20 4E 05 F1 | 	add	fp, #32
2c87c     A7 FA 01 FB | 	rdlong	result1, fp
2c880     0C 4E 05 F1 | 	add	fp, #12
2c884     A7 1E 02 FB | 	rdlong	local01, fp
2c888     0F FB 01 F1 | 	add	result1, local01
2c88c     0C 4E 85 F1 | 	sub	fp, #12
2c890     A7 FA 61 FC | 	wrlong	result1, fp
2c894     14 4E 85 F1 | 	sub	fp, #20
2c898     A7 FA 01 FB | 	rdlong	result1, fp
2c89c     09 FA 45 F0 | 	shr	result1, #9
2c8a0     1C 4E 05 F1 | 	add	fp, #28
2c8a4     A7 FA 61 FC | 	wrlong	result1, fp
2c8a8     28 4E 85 F1 | 	sub	fp, #40
2c8ac     01 FA 15 F2 | 	cmp	result1, #1 wc
2c8b0     60 01 90 CD |  if_b	jmp	#LR__4576
2c8b4     2C 4E 05 F1 | 	add	fp, #44
2c8b8     A7 FA 01 FB | 	rdlong	result1, fp
2c8bc     04 4E 85 F1 | 	sub	fp, #4
2c8c0     A7 18 02 FB | 	rdlong	arg04, fp
2c8c4     0C FB 01 F1 | 	add	result1, arg04
2c8c8     10 4E 85 F1 | 	sub	fp, #16
2c8cc     A7 18 02 FB | 	rdlong	arg04, fp
2c8d0     18 4E 85 F1 | 	sub	fp, #24
2c8d4     0A 18 06 F1 | 	add	arg04, #10
2c8d8     0C 19 E2 FA | 	rdword	arg04, arg04
2c8dc     0C FB 19 F2 | 	cmp	result1, arg04 wcz
2c8e0     28 00 90 ED |  if_be	jmp	#LR__4573
2c8e4     18 4E 05 F1 | 	add	fp, #24
2c8e8     A7 FA 01 FB | 	rdlong	result1, fp
2c8ec     0A FA 05 F1 | 	add	result1, #10
2c8f0     FD FA E1 FA | 	rdword	result1, result1
2c8f4     14 4E 05 F1 | 	add	fp, #20
2c8f8     A7 18 02 FB | 	rdlong	arg04, fp
2c8fc     0C FB 81 F1 | 	sub	result1, arg04
2c900     04 4E 85 F1 | 	sub	fp, #4
2c904     A7 FA 61 FC | 	wrlong	result1, fp
2c908     28 4E 85 F1 | 	sub	fp, #40
2c90c                 | LR__4573
2c90c     18 4E 05 F1 | 	add	fp, #24
2c910     A7 18 02 FB | 	rdlong	arg04, fp
2c914     01 18 06 F1 | 	add	arg04, #1
2c918     0C 13 C2 FA | 	rdbyte	arg01, arg04
2c91c     18 4E 05 F1 | 	add	fp, #24
2c920     A7 14 02 FB | 	rdlong	arg02, fp
2c924     10 4E 85 F1 | 	sub	fp, #16
2c928     A7 16 02 FB | 	rdlong	arg03, fp
2c92c     08 4E 05 F1 | 	add	fp, #8
2c930     A7 18 02 FB | 	rdlong	arg04, fp
2c934     28 4E 85 F1 | 	sub	fp, #40
2c938     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
2c93c     00 FA 0D F2 | 	cmp	result1, #0 wz
2c940     1C 00 90 AD |  if_e	jmp	#LR__4574
2c944     04 4E 05 F1 | 	add	fp, #4
2c948     A7 1E 02 FB | 	rdlong	local01, fp
2c94c     04 4E 85 F1 | 	sub	fp, #4
2c950     11 1E 06 F1 | 	add	local01, #17
2c954     0F 03 48 FC | 	wrbyte	#1, local01
2c958     01 FA 05 F6 | 	mov	result1, #1
2c95c     48 03 90 FD | 	jmp	#LR__4583
2c960                 | LR__4574
2c960     04 4E 05 F1 | 	add	fp, #4
2c964     A7 FA 01 FB | 	rdlong	result1, fp
2c968     1C FA 05 F1 | 	add	result1, #28
2c96c     FD FA 01 FB | 	rdlong	result1, result1
2c970     1C 4E 05 F1 | 	add	fp, #28
2c974     A7 20 02 FB | 	rdlong	local02, fp
2c978     10 FB 81 F1 | 	sub	result1, local02
2c97c     08 4E 05 F1 | 	add	fp, #8
2c980     A7 18 02 FB | 	rdlong	arg04, fp
2c984     28 4E 85 F1 | 	sub	fp, #40
2c988     0C FB 11 F2 | 	cmp	result1, arg04 wc
2c98c     68 00 90 3D |  if_ae	jmp	#LR__4575
2c990     04 4E 05 F1 | 	add	fp, #4
2c994     A7 12 02 FB | 	rdlong	arg01, fp
2c998     28 12 06 F1 | 	add	arg01, #40
2c99c     2C 4E 05 F1 | 	add	fp, #44
2c9a0     A7 14 02 FB | 	rdlong	arg02, fp
2c9a4     2C 4E 85 F1 | 	sub	fp, #44
2c9a8     A7 FA 01 FB | 	rdlong	result1, fp
2c9ac     1C FA 05 F1 | 	add	result1, #28
2c9b0     FD 22 02 FB | 	rdlong	local03, result1
2c9b4     1C 4E 05 F1 | 	add	fp, #28
2c9b8     A7 18 02 FB | 	rdlong	arg04, fp
2c9bc     20 4E 85 F1 | 	sub	fp, #32
2c9c0     0C 23 82 F1 | 	sub	local03, arg04
2c9c4     09 22 66 F0 | 	shl	local03, #9
2c9c8     11 15 02 F1 | 	add	arg02, local03
2c9cc     09 16 C6 F9 | 	decod	arg03, #9
2c9d0     B0 3E BF FD | 	call	#__system____builtin_memmove
2c9d4     04 4E 05 F1 | 	add	fp, #4
2c9d8     A7 18 02 FB | 	rdlong	arg04, fp
2c9dc     0C FB 01 F6 | 	mov	result1, arg04
2c9e0     04 4E 85 F1 | 	sub	fp, #4
2c9e4     10 18 06 F1 | 	add	arg04, #16
2c9e8     0C 19 C2 FA | 	rdbyte	arg04, arg04
2c9ec     7F 18 06 F5 | 	and	arg04, #127
2c9f0     10 FA 05 F1 | 	add	result1, #16
2c9f4     FD 18 42 FC | 	wrbyte	arg04, result1
2c9f8                 | LR__4575
2c9f8     28 4E 05 F1 | 	add	fp, #40
2c9fc     A7 FA 01 FB | 	rdlong	result1, fp
2ca00     09 FA 65 F0 | 	shl	result1, #9
2ca04     04 4E 85 F1 | 	sub	fp, #4
2ca08     A7 FA 61 FC | 	wrlong	result1, fp
2ca0c     24 4E 85 F1 | 	sub	fp, #36
2ca10                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
2ca10                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
2ca10                 | ' 				}
2ca10                 | ' 
2ca10                 | ' 
2ca10                 | ' 				wcnt =  ((UINT) 512 )  * cc;
2ca10                 | ' 				continue;
2ca10     74 01 90 FD | 	jmp	#LR__4579
2ca14                 | LR__4576
2ca14     04 4E 05 F1 | 	add	fp, #4
2ca18     A7 20 02 FB | 	rdlong	local02, fp
2ca1c     1C 20 06 F1 | 	add	local02, #28
2ca20     10 FB 01 FB | 	rdlong	result1, local02
2ca24     1C 4E 05 F1 | 	add	fp, #28
2ca28     A7 20 02 FB | 	rdlong	local02, fp
2ca2c     20 4E 85 F1 | 	sub	fp, #32
2ca30     10 FB 09 F2 | 	cmp	result1, local02 wz
2ca34     90 00 90 AD |  if_e	jmp	#LR__4577
2ca38     04 4E 05 F1 | 	add	fp, #4
2ca3c     A7 FA 01 FB | 	rdlong	result1, fp
2ca40     FD 22 02 F6 | 	mov	local03, result1
2ca44     04 4E 85 F1 | 	sub	fp, #4
2ca48     14 22 06 F1 | 	add	local03, #20
2ca4c     11 23 02 FB | 	rdlong	local03, local03
2ca50     0C FA 05 F1 | 	add	result1, #12
2ca54     FD 24 02 FB | 	rdlong	local04, result1
2ca58     12 27 02 F6 | 	mov	local05, local04
2ca5c     13 23 12 F2 | 	cmp	local03, local05 wc
2ca60     64 00 90 3D |  if_ae	jmp	#LR__4577
2ca64     18 4E 05 F1 | 	add	fp, #24
2ca68     A7 18 02 FB | 	rdlong	arg04, fp
2ca6c     01 18 06 F1 | 	add	arg04, #1
2ca70     0C 13 C2 FA | 	rdbyte	arg01, arg04
2ca74     14 4E 85 F1 | 	sub	fp, #20
2ca78     A7 28 02 FB | 	rdlong	local06, fp
2ca7c     28 28 06 F1 | 	add	local06, #40
2ca80     14 2B 02 F6 | 	mov	local07, local06
2ca84     1C 4E 05 F1 | 	add	fp, #28
2ca88     A7 2C 02 FB | 	rdlong	local08, fp
2ca8c     20 4E 85 F1 | 	sub	fp, #32
2ca90     01 2E 06 F6 | 	mov	local09, #1
2ca94     15 15 02 F6 | 	mov	arg02, local07
2ca98     16 17 02 F6 | 	mov	arg03, local08
2ca9c     01 18 06 F6 | 	mov	arg04, #1
2caa0     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
2caa4     FD 30 0A F6 | 	mov	local10, result1 wz
2caa8     1C 00 90 AD |  if_e	jmp	#LR__4577
2caac     04 4E 05 F1 | 	add	fp, #4
2cab0     A7 30 02 FB | 	rdlong	local10, fp
2cab4     04 4E 85 F1 | 	sub	fp, #4
2cab8     11 30 06 F1 | 	add	local10, #17
2cabc     18 03 48 FC | 	wrbyte	#1, local10
2cac0                 | ' 				fp->fptr < fp->obj.objsize &&
2cac0                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
2cac0                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
2cac0     01 FA 05 F6 | 	mov	result1, #1
2cac4     E0 01 90 FD | 	jmp	#LR__4583
2cac8                 | LR__4577
2cac8     04 4E 05 F1 | 	add	fp, #4
2cacc     A7 18 02 FB | 	rdlong	arg04, fp
2cad0     1C 4E 05 F1 | 	add	fp, #28
2cad4     A7 FA 01 FB | 	rdlong	result1, fp
2cad8     20 4E 85 F1 | 	sub	fp, #32
2cadc     1C 18 06 F1 | 	add	arg04, #28
2cae0     0C FB 61 FC | 	wrlong	result1, arg04
2cae4                 | LR__4578
2cae4     04 4E 05 F1 | 	add	fp, #4
2cae8     A7 FA 01 FB | 	rdlong	result1, fp
2caec     14 FA 05 F1 | 	add	result1, #20
2caf0     FD FA 01 FB | 	rdlong	result1, result1
2caf4     FF FB 05 F5 | 	and	result1, #511
2caf8     09 32 C6 F9 | 	decod	local11, #9
2cafc     FD 32 82 F1 | 	sub	local11, result1
2cb00     20 4E 05 F1 | 	add	fp, #32
2cb04     A7 32 62 FC | 	wrlong	local11, fp
2cb08     18 4E 85 F1 | 	sub	fp, #24
2cb0c     A7 FA 01 FB | 	rdlong	result1, fp
2cb10     0C 4E 85 F1 | 	sub	fp, #12
2cb14     FD 32 1A F2 | 	cmp	local11, result1 wcz
2cb18     0C 4E 05 11 |  if_a	add	fp, #12
2cb1c     A7 32 02 1B |  if_a	rdlong	local11, fp
2cb20     18 4E 05 11 |  if_a	add	fp, #24
2cb24     A7 32 62 1C |  if_a	wrlong	local11, fp
2cb28     24 4E 85 11 |  if_a	sub	fp, #36
2cb2c     04 4E 05 F1 | 	add	fp, #4
2cb30     A7 32 02 FB | 	rdlong	local11, fp
2cb34     19 13 02 F6 | 	mov	arg01, local11
2cb38     28 12 06 F1 | 	add	arg01, #40
2cb3c     14 32 06 F1 | 	add	local11, #20
2cb40     19 33 02 FB | 	rdlong	local11, local11
2cb44     FF 33 06 F5 | 	and	local11, #511
2cb48     19 13 02 F1 | 	add	arg01, local11
2cb4c     2C 4E 05 F1 | 	add	fp, #44
2cb50     A7 14 02 FB | 	rdlong	arg02, fp
2cb54     0C 4E 85 F1 | 	sub	fp, #12
2cb58     A7 16 02 FB | 	rdlong	arg03, fp
2cb5c     24 4E 85 F1 | 	sub	fp, #36
2cb60     20 3D BF FD | 	call	#__system____builtin_memmove
2cb64     04 4E 05 F1 | 	add	fp, #4
2cb68     A7 FA 01 FB | 	rdlong	result1, fp
2cb6c     FD 32 02 F6 | 	mov	local11, result1
2cb70     04 4E 85 F1 | 	sub	fp, #4
2cb74     10 FA 05 F1 | 	add	result1, #16
2cb78     FD FA C1 FA | 	rdbyte	result1, result1
2cb7c     80 FA 45 F5 | 	or	result1, #128
2cb80     10 32 06 F1 | 	add	local11, #16
2cb84     19 FB 41 FC | 	wrbyte	result1, local11
2cb88                 | LR__4579
2cb88     0C 4E 05 F1 | 	add	fp, #12
2cb8c     A7 32 02 FB | 	rdlong	local11, fp
2cb90     18 4E 05 F1 | 	add	fp, #24
2cb94     A7 FA 01 FB | 	rdlong	result1, fp
2cb98     FD 32 82 F1 | 	sub	local11, result1
2cb9c     18 4E 85 F1 | 	sub	fp, #24
2cba0     A7 32 62 FC | 	wrlong	local11, fp
2cba4     04 4E 05 F1 | 	add	fp, #4
2cba8     A7 34 02 FB | 	rdlong	local12, fp
2cbac     1A 33 02 FB | 	rdlong	local11, local12
2cbb0     14 4E 05 F1 | 	add	fp, #20
2cbb4     A7 36 02 FB | 	rdlong	local13, fp
2cbb8     1B 33 02 F1 | 	add	local11, local13
2cbbc     1A 33 62 FC | 	wrlong	local11, local12
2cbc0     0C 4E 05 F1 | 	add	fp, #12
2cbc4     A7 32 02 FB | 	rdlong	local11, fp
2cbc8     0C 4E 85 F1 | 	sub	fp, #12
2cbcc     A7 38 02 FB | 	rdlong	local14, fp
2cbd0     1C 33 02 F1 | 	add	local11, local14
2cbd4     0C 4E 05 F1 | 	add	fp, #12
2cbd8     A7 32 62 FC | 	wrlong	local11, fp
2cbdc     2C 4E 85 F1 | 	sub	fp, #44
2cbe0     A7 3A 02 FB | 	rdlong	local15, fp
2cbe4     1D 33 02 F6 | 	mov	local11, local15
2cbe8     14 3A 06 F1 | 	add	local15, #20
2cbec     1D 3B 02 FB | 	rdlong	local15, local15
2cbf0     20 4E 05 F1 | 	add	fp, #32
2cbf4     A7 3C 02 FB | 	rdlong	local16, fp
2cbf8     1E 3B 02 F1 | 	add	local15, local16
2cbfc     14 32 06 F1 | 	add	local11, #20
2cc00     19 3B 62 FC | 	wrlong	local15, local11
2cc04     20 4E 85 F1 | 	sub	fp, #32
2cc08     A7 3E 02 FB | 	rdlong	local17, fp
2cc0c     1F 33 02 F6 | 	mov	local11, local17
2cc10     1F 41 02 F6 | 	mov	local18, local17
2cc14     04 4E 85 F1 | 	sub	fp, #4
2cc18     14 3E 06 F1 | 	add	local17, #20
2cc1c     1F 43 02 FB | 	rdlong	local19, local17
2cc20     0C 40 06 F1 | 	add	local18, #12
2cc24     20 45 02 FB | 	rdlong	local20, local18
2cc28     22 43 1A F2 | 	cmp	local19, local20 wcz
2cc2c     24 00 90 ED |  if_be	jmp	#LR__4580
2cc30     04 4E 05 F1 | 	add	fp, #4
2cc34     A7 26 02 FB | 	rdlong	local05, fp
2cc38     04 4E 85 F1 | 	sub	fp, #4
2cc3c     13 23 02 F6 | 	mov	local03, local05
2cc40     14 22 06 F1 | 	add	local03, #20
2cc44     11 25 02 FB | 	rdlong	local04, local03
2cc48     14 22 86 F1 | 	sub	local03, #20
2cc4c     12 47 02 F6 | 	mov	local21, local04
2cc50     20 00 90 FD | 	jmp	#LR__4581
2cc54                 | LR__4580
2cc54     04 4E 05 F1 | 	add	fp, #4
2cc58     A7 2A 02 FB | 	rdlong	local07, fp
2cc5c     04 4E 85 F1 | 	sub	fp, #4
2cc60     15 31 02 F6 | 	mov	local10, local07
2cc64     0C 30 06 F1 | 	add	local10, #12
2cc68     18 2D 02 FB | 	rdlong	local08, local10
2cc6c     0C 30 86 F1 | 	sub	local10, #12
2cc70     16 47 02 F6 | 	mov	local21, local08
2cc74                 | LR__4581
2cc74     0C 32 06 F1 | 	add	local11, #12
2cc78     19 47 62 FC | 	wrlong	local21, local11
2cc7c     5C F9 9F FD | 	jmp	#LR__4563
2cc80                 | LR__4582
2cc80     04 4E 05 F1 | 	add	fp, #4
2cc84     A7 34 02 FB | 	rdlong	local12, fp
2cc88     1A 1F 02 F6 | 	mov	local01, local12
2cc8c     04 4E 85 F1 | 	sub	fp, #4
2cc90     10 34 06 F1 | 	add	local12, #16
2cc94     1A 33 C2 FA | 	rdbyte	local11, local12
2cc98     40 32 46 F5 | 	or	local11, #64
2cc9c     10 1E 06 F1 | 	add	local01, #16
2cca0     0F 33 42 FC | 	wrbyte	local11, local01
2cca4                 | ' 
2cca4                 | ' 
2cca4                 | ' 
2cca4                 | ' 
2cca4                 | ' 
2cca4                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
2cca4                 | ' 		fp->flag |=  0x80 ;
2cca4                 | ' 
2cca4                 | ' 	}
2cca4                 | ' 
2cca4                 | ' 	fp->flag |=  0x40 ;
2cca4                 | ' 
2cca4                 | ' 	return FR_OK ;
2cca4     00 FA 05 F6 | 	mov	result1, #0
2cca8                 | LR__4583
2cca8     A7 F0 03 F6 | 	mov	ptra, fp
2ccac     B2 00 A0 FD | 	call	#popregs_
2ccb0                 | _fatfs_cc_f_write_ret
2ccb0     2D 00 64 FD | 	ret
2ccb4                 | 
2ccb4                 | _fatfs_cc_f_sync
2ccb4     00 4A 05 F6 | 	mov	COUNT_, #0
2ccb8     A8 00 A0 FD | 	call	#pushregs_
2ccbc     18 F0 07 F1 | 	add	ptra, #24
2ccc0     04 4E 05 F1 | 	add	fp, #4
2ccc4     A7 12 62 FC | 	wrlong	arg01, fp
2ccc8     08 4E 05 F1 | 	add	fp, #8
2cccc     A7 14 02 F6 | 	mov	arg02, fp
2ccd0     0C 4E 85 F1 | 	sub	fp, #12
2ccd4     D0 E8 BF FD | 	call	#_fatfs_cc_validate
2ccd8     08 4E 05 F1 | 	add	fp, #8
2ccdc     A7 FA 61 FC | 	wrlong	result1, fp
2cce0     08 4E 85 F1 | 	sub	fp, #8
2cce4     00 FA 0D F2 | 	cmp	result1, #0 wz
2cce8     C0 01 90 5D |  if_ne	jmp	#LR__4593
2ccec     04 4E 05 F1 | 	add	fp, #4
2ccf0     A7 18 02 FB | 	rdlong	arg04, fp
2ccf4     04 4E 85 F1 | 	sub	fp, #4
2ccf8     10 18 06 F1 | 	add	arg04, #16
2ccfc     0C 19 C2 FA | 	rdbyte	arg04, arg04
2cd00     40 18 CE F7 | 	test	arg04, #64 wz
2cd04     A4 01 90 AD |  if_e	jmp	#LR__4592
2cd08     04 4E 05 F1 | 	add	fp, #4
2cd0c     A7 18 02 FB | 	rdlong	arg04, fp
2cd10     04 4E 85 F1 | 	sub	fp, #4
2cd14     10 18 06 F1 | 	add	arg04, #16
2cd18     0C 19 C2 FA | 	rdbyte	arg04, arg04
2cd1c     80 18 CE F7 | 	test	arg04, #128 wz
2cd20     64 00 90 AD |  if_e	jmp	#LR__4590
2cd24     0C 4E 05 F1 | 	add	fp, #12
2cd28     A7 18 02 FB | 	rdlong	arg04, fp
2cd2c     01 18 06 F1 | 	add	arg04, #1
2cd30     0C 13 C2 FA | 	rdbyte	arg01, arg04
2cd34     08 4E 85 F1 | 	sub	fp, #8
2cd38     A7 18 02 FB | 	rdlong	arg04, fp
2cd3c     0C 15 02 F6 | 	mov	arg02, arg04
2cd40     28 14 06 F1 | 	add	arg02, #40
2cd44     04 4E 85 F1 | 	sub	fp, #4
2cd48     1C 18 06 F1 | 	add	arg04, #28
2cd4c     0C 17 02 FB | 	rdlong	arg03, arg04
2cd50     01 18 06 F6 | 	mov	arg04, #1
2cd54     0C AE BF FD | 	call	#_fatfs_cc_disk_write
2cd58     00 FA 0D F2 | 	cmp	result1, #0 wz
2cd5c     01 FA 05 56 |  if_ne	mov	result1, #1
2cd60     54 01 90 5D |  if_ne	jmp	#LR__4594
2cd64     04 4E 05 F1 | 	add	fp, #4
2cd68     A7 18 02 FB | 	rdlong	arg04, fp
2cd6c     0C 17 02 F6 | 	mov	arg03, arg04
2cd70     04 4E 85 F1 | 	sub	fp, #4
2cd74     10 18 06 F1 | 	add	arg04, #16
2cd78     0C 19 C2 FA | 	rdbyte	arg04, arg04
2cd7c     7F 18 06 F5 | 	and	arg04, #127
2cd80     10 16 06 F1 | 	add	arg03, #16
2cd84     0B 19 42 FC | 	wrbyte	arg04, arg03
2cd88                 | LR__4590
2cd88     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
2cd8c     10 4E 05 F1 | 	add	fp, #16
2cd90     A7 FA 61 FC | 	wrlong	result1, fp
2cd94     04 4E 85 F1 | 	sub	fp, #4
2cd98     A7 12 02 FB | 	rdlong	arg01, fp
2cd9c     08 4E 85 F1 | 	sub	fp, #8
2cda0     A7 18 02 FB | 	rdlong	arg04, fp
2cda4     04 4E 85 F1 | 	sub	fp, #4
2cda8     20 18 06 F1 | 	add	arg04, #32
2cdac     0C 15 02 FB | 	rdlong	arg02, arg04
2cdb0     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
2cdb4     08 4E 05 F1 | 	add	fp, #8
2cdb8     A7 FA 61 FC | 	wrlong	result1, fp
2cdbc     08 4E 85 F1 | 	sub	fp, #8
2cdc0     00 FA 0D F2 | 	cmp	result1, #0 wz
2cdc4     E4 00 90 5D |  if_ne	jmp	#LR__4591
2cdc8     04 4E 05 F1 | 	add	fp, #4
2cdcc     A7 18 02 FB | 	rdlong	arg04, fp
2cdd0     24 18 06 F1 | 	add	arg04, #36
2cdd4     0C 19 02 FB | 	rdlong	arg04, arg04
2cdd8     10 4E 05 F1 | 	add	fp, #16
2cddc     A7 18 62 FC | 	wrlong	arg04, fp
2cde0     0C 17 02 F6 | 	mov	arg03, arg04
2cde4     0B 16 06 F1 | 	add	arg03, #11
2cde8     0B 17 C2 FA | 	rdbyte	arg03, arg03
2cdec     20 16 46 F5 | 	or	arg03, #32
2cdf0     0B 18 06 F1 | 	add	arg04, #11
2cdf4     0C 17 42 FC | 	wrbyte	arg03, arg04
2cdf8     10 4E 85 F1 | 	sub	fp, #16
2cdfc     A7 18 02 FB | 	rdlong	arg04, fp
2ce00     0C 13 02 FB | 	rdlong	arg01, arg04
2ce04     10 4E 05 F1 | 	add	fp, #16
2ce08     A7 14 02 FB | 	rdlong	arg02, fp
2ce0c     14 4E 85 F1 | 	sub	fp, #20
2ce10     08 18 06 F1 | 	add	arg04, #8
2ce14     0C 17 02 FB | 	rdlong	arg03, arg04
2ce18     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
2ce1c     14 4E 05 F1 | 	add	fp, #20
2ce20     A7 12 02 FB | 	rdlong	arg01, fp
2ce24     1C 12 06 F1 | 	add	arg01, #28
2ce28     10 4E 85 F1 | 	sub	fp, #16
2ce2c     A7 18 02 FB | 	rdlong	arg04, fp
2ce30     0C 18 06 F1 | 	add	arg04, #12
2ce34     0C 15 02 FB | 	rdlong	arg02, arg04
2ce38     09 15 62 FC | 	wrlong	arg02, arg01
2ce3c     10 4E 05 F1 | 	add	fp, #16
2ce40     A7 12 02 FB | 	rdlong	arg01, fp
2ce44     16 12 06 F1 | 	add	arg01, #22
2ce48     04 4E 85 F1 | 	sub	fp, #4
2ce4c     A7 14 02 FB | 	rdlong	arg02, fp
2ce50     09 15 62 FC | 	wrlong	arg02, arg01
2ce54     04 4E 05 F1 | 	add	fp, #4
2ce58     A7 12 02 FB | 	rdlong	arg01, fp
2ce5c     12 12 06 F1 | 	add	arg01, #18
2ce60     09 01 58 FC | 	wrword	#0, arg01
2ce64     08 4E 85 F1 | 	sub	fp, #8
2ce68     A7 18 02 FB | 	rdlong	arg04, fp
2ce6c     03 18 06 F1 | 	add	arg04, #3
2ce70     0C 03 48 FC | 	wrbyte	#1, arg04
2ce74     A7 12 02 FB | 	rdlong	arg01, fp
2ce78     0C 4E 85 F1 | 	sub	fp, #12
2ce7c     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
2ce80     08 4E 05 F1 | 	add	fp, #8
2ce84     A7 FA 61 FC | 	wrlong	result1, fp
2ce88     04 4E 85 F1 | 	sub	fp, #4
2ce8c     A7 18 02 FB | 	rdlong	arg04, fp
2ce90     0C 17 02 F6 | 	mov	arg03, arg04
2ce94     04 4E 85 F1 | 	sub	fp, #4
2ce98     10 18 06 F1 | 	add	arg04, #16
2ce9c     0C 19 C2 FA | 	rdbyte	arg04, arg04
2cea0     BF 18 06 F5 | 	and	arg04, #191
2cea4     10 16 06 F1 | 	add	arg03, #16
2cea8     0B 19 42 FC | 	wrbyte	arg04, arg03
2ceac                 | LR__4591
2ceac                 | LR__4592
2ceac                 | LR__4593
2ceac                 | ' 					dir = fp->dir_ptr;
2ceac                 | ' 					dir[ 11 ] |=  0x20 ;
2ceac                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
2ceac                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
2ceac                 | ' 					st_dword(dir +  22 , tm);
2ceac                 | ' 					st_word(dir +  18 , 0);
2ceac                 | ' 					fs->wflag = 1;
2ceac                 | ' 					res = sync_fs(fs);
2ceac                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
2ceac                 | ' 				}
2ceac                 | ' 			}
2ceac                 | ' 		}
2ceac                 | ' 	}
2ceac                 | ' 
2ceac                 | ' 	return res ;
2ceac     08 4E 05 F1 | 	add	fp, #8
2ceb0     A7 FA 01 FB | 	rdlong	result1, fp
2ceb4     08 4E 85 F1 | 	sub	fp, #8
2ceb8                 | LR__4594
2ceb8     A7 F0 03 F6 | 	mov	ptra, fp
2cebc     B2 00 A0 FD | 	call	#popregs_
2cec0                 | _fatfs_cc_f_sync_ret
2cec0     2D 00 64 FD | 	ret
2cec4                 | 
2cec4                 | _fatfs_cc_f_close
2cec4     01 4A 05 F6 | 	mov	COUNT_, #1
2cec8     A8 00 A0 FD | 	call	#pushregs_
2cecc     10 F0 07 F1 | 	add	ptra, #16
2ced0     04 4E 05 F1 | 	add	fp, #4
2ced4     A7 12 62 FC | 	wrlong	arg01, fp
2ced8     04 4E 85 F1 | 	sub	fp, #4
2cedc     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
2cee0     08 4E 05 F1 | 	add	fp, #8
2cee4     A7 FA 61 FC | 	wrlong	result1, fp
2cee8     08 4E 85 F1 | 	sub	fp, #8
2ceec     00 FA 0D F2 | 	cmp	result1, #0 wz
2cef0     38 00 90 5D |  if_ne	jmp	#LR__4600
2cef4     04 4E 05 F1 | 	add	fp, #4
2cef8     A7 12 02 FB | 	rdlong	arg01, fp
2cefc     08 4E 05 F1 | 	add	fp, #8
2cf00     A7 14 02 F6 | 	mov	arg02, fp
2cf04     0C 4E 85 F1 | 	sub	fp, #12
2cf08     9C E6 BF FD | 	call	#_fatfs_cc_validate
2cf0c     08 4E 05 F1 | 	add	fp, #8
2cf10     A7 FA 61 FC | 	wrlong	result1, fp
2cf14     08 4E 85 F1 | 	sub	fp, #8
2cf18     00 FA 0D F2 | 	cmp	result1, #0 wz
2cf1c     04 4E 05 A1 |  if_e	add	fp, #4
2cf20     A7 1E 02 AB |  if_e	rdlong	local01, fp
2cf24     04 4E 85 A1 |  if_e	sub	fp, #4
2cf28     0F 01 68 AC |  if_e	wrlong	#0, local01
2cf2c                 | LR__4600
2cf2c                 | ' 
2cf2c                 | ' 
2cf2c                 | ' 
2cf2c                 | ' 
2cf2c                 | ' 			fp->obj.fs = 0;
2cf2c                 | ' #line 4192 "ff.c"
2cf2c                 | ' 		}
2cf2c                 | ' 	}
2cf2c                 | ' 	return res;
2cf2c     08 4E 05 F1 | 	add	fp, #8
2cf30     A7 FA 01 FB | 	rdlong	result1, fp
2cf34     08 4E 85 F1 | 	sub	fp, #8
2cf38     A7 F0 03 F6 | 	mov	ptra, fp
2cf3c     B2 00 A0 FD | 	call	#popregs_
2cf40                 | _fatfs_cc_f_close_ret
2cf40     2D 00 64 FD | 	ret
2cf44                 | 
2cf44                 | _fatfs_cc_f_lseek
2cf44     00 4A 05 F6 | 	mov	COUNT_, #0
2cf48     A8 00 A0 FD | 	call	#pushregs_
2cf4c     24 F0 07 F1 | 	add	ptra, #36
2cf50     04 4E 05 F1 | 	add	fp, #4
2cf54     A7 12 62 FC | 	wrlong	arg01, fp
2cf58     04 4E 05 F1 | 	add	fp, #4
2cf5c     A7 14 62 FC | 	wrlong	arg02, fp
2cf60     04 4E 85 F1 | 	sub	fp, #4
2cf64     A7 12 02 FB | 	rdlong	arg01, fp
2cf68     0C 4E 05 F1 | 	add	fp, #12
2cf6c     A7 14 02 F6 | 	mov	arg02, fp
2cf70     10 4E 85 F1 | 	sub	fp, #16
2cf74     30 E6 BF FD | 	call	#_fatfs_cc_validate
2cf78     0C 4E 05 F1 | 	add	fp, #12
2cf7c     A7 FA 61 FC | 	wrlong	result1, fp
2cf80     0C 4E 85 F1 | 	sub	fp, #12
2cf84     00 FA 0D F2 | 	cmp	result1, #0 wz
2cf88     1C 00 90 5D |  if_ne	jmp	#LR__4610
2cf8c     04 4E 05 F1 | 	add	fp, #4
2cf90     A7 18 02 FB | 	rdlong	arg04, fp
2cf94     11 18 06 F1 | 	add	arg04, #17
2cf98     0C 19 C2 FA | 	rdbyte	arg04, arg04
2cf9c     08 4E 05 F1 | 	add	fp, #8
2cfa0     A7 18 62 FC | 	wrlong	arg04, fp
2cfa4     0C 4E 85 F1 | 	sub	fp, #12
2cfa8                 | LR__4610
2cfa8     0C 4E 05 F1 | 	add	fp, #12
2cfac     A7 18 0A FB | 	rdlong	arg04, fp wz
2cfb0     0C 4E 85 F1 | 	sub	fp, #12
2cfb4     0C 4E 05 51 |  if_ne	add	fp, #12
2cfb8     A7 FA 01 5B |  if_ne	rdlong	result1, fp
2cfbc     0C 4E 85 51 |  if_ne	sub	fp, #12
2cfc0     40 06 90 5D |  if_ne	jmp	#LR__4633
2cfc4     04 4E 05 F1 | 	add	fp, #4
2cfc8     A7 18 02 FB | 	rdlong	arg04, fp
2cfcc     04 4E 05 F1 | 	add	fp, #4
2cfd0     A7 16 02 FB | 	rdlong	arg03, fp
2cfd4     08 4E 85 F1 | 	sub	fp, #8
2cfd8     0C 18 06 F1 | 	add	arg04, #12
2cfdc     0C 19 02 FB | 	rdlong	arg04, arg04
2cfe0     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
2cfe4     3C 00 90 ED |  if_be	jmp	#LR__4611
2cfe8     04 4E 05 F1 | 	add	fp, #4
2cfec     A7 16 02 FB | 	rdlong	arg03, fp
2cff0     04 4E 85 F1 | 	sub	fp, #4
2cff4     10 16 06 F1 | 	add	arg03, #16
2cff8     0B 17 C2 FA | 	rdbyte	arg03, arg03
2cffc     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
2d000     02 16 CE F7 | 	test	arg03, #2 wz
2d004     1C 00 90 5D |  if_ne	jmp	#LR__4611
2d008     04 4E 05 F1 | 	add	fp, #4
2d00c     A7 16 02 FB | 	rdlong	arg03, fp
2d010     0C 16 06 F1 | 	add	arg03, #12
2d014     0B 17 02 FB | 	rdlong	arg03, arg03
2d018     04 4E 05 F1 | 	add	fp, #4
2d01c     A7 16 62 FC | 	wrlong	arg03, fp
2d020     08 4E 85 F1 | 	sub	fp, #8
2d024                 | LR__4611
2d024     04 4E 05 F1 | 	add	fp, #4
2d028     A7 16 02 FB | 	rdlong	arg03, fp
2d02c     14 16 06 F1 | 	add	arg03, #20
2d030     0B 17 02 FB | 	rdlong	arg03, arg03
2d034     1C 4E 05 F1 | 	add	fp, #28
2d038     A7 16 62 FC | 	wrlong	arg03, fp
2d03c     1C 4E 85 F1 | 	sub	fp, #28
2d040     A7 16 02 FB | 	rdlong	arg03, fp
2d044     18 4E 05 F1 | 	add	fp, #24
2d048     A7 00 68 FC | 	wrlong	#0, fp
2d04c     14 16 06 F1 | 	add	arg03, #20
2d050     0B 01 68 FC | 	wrlong	#0, arg03
2d054     14 4E 85 F1 | 	sub	fp, #20
2d058     A7 16 02 FB | 	rdlong	arg03, fp
2d05c     08 4E 85 F1 | 	sub	fp, #8
2d060     01 16 16 F2 | 	cmp	arg03, #1 wc
2d064     E4 03 90 CD |  if_b	jmp	#LR__4627
2d068     10 4E 05 F1 | 	add	fp, #16
2d06c     A7 16 02 FB | 	rdlong	arg03, fp
2d070     0A 16 06 F1 | 	add	arg03, #10
2d074     0B 19 E2 FA | 	rdword	arg04, arg03
2d078     09 18 66 F0 | 	shl	arg04, #9
2d07c     08 4E 05 F1 | 	add	fp, #8
2d080     A7 18 62 FC | 	wrlong	arg04, fp
2d084     08 4E 05 F1 | 	add	fp, #8
2d088     A7 18 02 FB | 	rdlong	arg04, fp
2d08c     20 4E 85 F1 | 	sub	fp, #32
2d090     01 18 16 F2 | 	cmp	arg04, #1 wc
2d094     AC 00 90 CD |  if_b	jmp	#LR__4612
2d098     08 4E 05 F1 | 	add	fp, #8
2d09c     A7 18 02 FB | 	rdlong	arg04, fp
2d0a0     01 18 86 F1 | 	sub	arg04, #1
2d0a4     10 4E 05 F1 | 	add	fp, #16
2d0a8     A7 16 02 FB | 	rdlong	arg03, fp
2d0ac     0B 19 12 FD | 	qdiv	arg04, arg03
2d0b0     08 4E 05 F1 | 	add	fp, #8
2d0b4     A7 FA 01 FB | 	rdlong	result1, fp
2d0b8     01 FA 85 F1 | 	sub	result1, #1
2d0bc     18 18 62 FD | 	getqx	arg04
2d0c0     0B FB 11 FD | 	qdiv	result1, arg03
2d0c4     20 4E 85 F1 | 	sub	fp, #32
2d0c8     18 16 62 FD | 	getqx	arg03
2d0cc     0B 19 12 F2 | 	cmp	arg04, arg03 wc
2d0d0     70 00 90 CD |  if_b	jmp	#LR__4612
2d0d4     04 4E 05 F1 | 	add	fp, #4
2d0d8     A7 16 02 FB | 	rdlong	arg03, fp
2d0dc     1C 4E 05 F1 | 	add	fp, #28
2d0e0     A7 FA 01 FB | 	rdlong	result1, fp
2d0e4     01 FA 85 F1 | 	sub	result1, #1
2d0e8     08 4E 85 F1 | 	sub	fp, #8
2d0ec     A7 18 02 FB | 	rdlong	arg04, fp
2d0f0     01 18 86 F1 | 	sub	arg04, #1
2d0f4     0C FB 21 F5 | 	andn	result1, arg04
2d0f8     14 16 06 F1 | 	add	arg03, #20
2d0fc     0B FB 61 FC | 	wrlong	result1, arg03
2d100     10 4E 85 F1 | 	sub	fp, #16
2d104     A7 16 02 FB | 	rdlong	arg03, fp
2d108     04 4E 85 F1 | 	sub	fp, #4
2d10c     A7 18 02 FB | 	rdlong	arg04, fp
2d110     14 18 06 F1 | 	add	arg04, #20
2d114     0C 19 02 FB | 	rdlong	arg04, arg04
2d118     0C 17 82 F1 | 	sub	arg03, arg04
2d11c     04 4E 05 F1 | 	add	fp, #4
2d120     A7 16 62 FC | 	wrlong	arg03, fp
2d124     04 4E 85 F1 | 	sub	fp, #4
2d128     A7 16 02 FB | 	rdlong	arg03, fp
2d12c     18 16 06 F1 | 	add	arg03, #24
2d130     0B 17 02 FB | 	rdlong	arg03, arg03
2d134     10 4E 05 F1 | 	add	fp, #16
2d138     A7 16 62 FC | 	wrlong	arg03, fp
2d13c     14 4E 85 F1 | 	sub	fp, #20
2d140     D0 00 90 FD | 	jmp	#LR__4616
2d144                 | LR__4612
2d144     04 4E 05 F1 | 	add	fp, #4
2d148     A7 16 02 FB | 	rdlong	arg03, fp
2d14c     08 16 06 F1 | 	add	arg03, #8
2d150     0B 17 0A FB | 	rdlong	arg03, arg03 wz
2d154     10 4E 05 F1 | 	add	fp, #16
2d158     A7 16 62 FC | 	wrlong	arg03, fp
2d15c     14 4E 85 F1 | 	sub	fp, #20
2d160     94 00 90 5D |  if_ne	jmp	#LR__4615
2d164     04 4E 05 F1 | 	add	fp, #4
2d168     A7 12 02 FB | 	rdlong	arg01, fp
2d16c     04 4E 85 F1 | 	sub	fp, #4
2d170     00 14 06 F6 | 	mov	arg02, #0
2d174     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
2d178     14 4E 05 F1 | 	add	fp, #20
2d17c     A7 FA 61 FC | 	wrlong	result1, fp
2d180     14 4E 85 F1 | 	sub	fp, #20
2d184     01 FA 0D F2 | 	cmp	result1, #1 wz
2d188     1C 00 90 5D |  if_ne	jmp	#LR__4613
2d18c     04 4E 05 F1 | 	add	fp, #4
2d190     A7 16 02 FB | 	rdlong	arg03, fp
2d194     04 4E 85 F1 | 	sub	fp, #4
2d198     11 16 06 F1 | 	add	arg03, #17
2d19c     0B 05 48 FC | 	wrbyte	#2, arg03
2d1a0     02 FA 05 F6 | 	mov	result1, #2
2d1a4     5C 04 90 FD | 	jmp	#LR__4633
2d1a8                 | LR__4613
2d1a8     14 4E 05 F1 | 	add	fp, #20
2d1ac     A7 FA 01 FB | 	rdlong	result1, fp
2d1b0     14 4E 85 F1 | 	sub	fp, #20
2d1b4     FF FF 7F FF 
2d1b8     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2d1bc     1C 00 90 5D |  if_ne	jmp	#LR__4614
2d1c0     04 4E 05 F1 | 	add	fp, #4
2d1c4     A7 16 02 FB | 	rdlong	arg03, fp
2d1c8     04 4E 85 F1 | 	sub	fp, #4
2d1cc     11 16 06 F1 | 	add	arg03, #17
2d1d0     0B 03 48 FC | 	wrbyte	#1, arg03
2d1d4     01 FA 05 F6 | 	mov	result1, #1
2d1d8     28 04 90 FD | 	jmp	#LR__4633
2d1dc                 | LR__4614
2d1dc     04 4E 05 F1 | 	add	fp, #4
2d1e0     A7 16 02 FB | 	rdlong	arg03, fp
2d1e4     10 4E 05 F1 | 	add	fp, #16
2d1e8     A7 18 02 FB | 	rdlong	arg04, fp
2d1ec     14 4E 85 F1 | 	sub	fp, #20
2d1f0     08 16 06 F1 | 	add	arg03, #8
2d1f4     0B 19 62 FC | 	wrlong	arg04, arg03
2d1f8                 | LR__4615
2d1f8     04 4E 05 F1 | 	add	fp, #4
2d1fc     A7 16 02 FB | 	rdlong	arg03, fp
2d200     10 4E 05 F1 | 	add	fp, #16
2d204     A7 18 02 FB | 	rdlong	arg04, fp
2d208     14 4E 85 F1 | 	sub	fp, #20
2d20c     18 16 06 F1 | 	add	arg03, #24
2d210     0B 19 62 FC | 	wrlong	arg04, arg03
2d214                 | LR__4616
2d214     14 4E 05 F1 | 	add	fp, #20
2d218     A7 16 0A FB | 	rdlong	arg03, fp wz
2d21c     14 4E 85 F1 | 	sub	fp, #20
2d220     28 02 90 AD |  if_e	jmp	#LR__4626
2d224                 | ' 				while (ofs > bcs) {
2d224                 | LR__4617
2d224     08 4E 05 F1 | 	add	fp, #8
2d228     A7 18 02 FB | 	rdlong	arg04, fp
2d22c     10 4E 05 F1 | 	add	fp, #16
2d230     A7 16 02 FB | 	rdlong	arg03, fp
2d234     18 4E 85 F1 | 	sub	fp, #24
2d238     0B 19 1A F2 | 	cmp	arg04, arg03 wcz
2d23c     68 01 90 ED |  if_be	jmp	#LR__4623
2d240     08 4E 05 F1 | 	add	fp, #8
2d244     A7 18 02 FB | 	rdlong	arg04, fp
2d248     10 4E 05 F1 | 	add	fp, #16
2d24c     A7 16 02 FB | 	rdlong	arg03, fp
2d250     0B 19 82 F1 | 	sub	arg04, arg03
2d254     10 4E 85 F1 | 	sub	fp, #16
2d258     A7 18 62 FC | 	wrlong	arg04, fp
2d25c     04 4E 85 F1 | 	sub	fp, #4
2d260     A7 18 02 FB | 	rdlong	arg04, fp
2d264     0C FB 01 F6 | 	mov	result1, arg04
2d268     14 18 06 F1 | 	add	arg04, #20
2d26c     0C 19 02 FB | 	rdlong	arg04, arg04
2d270     14 4E 05 F1 | 	add	fp, #20
2d274     A7 16 02 FB | 	rdlong	arg03, fp
2d278     0B 19 02 F1 | 	add	arg04, arg03
2d27c     14 FA 05 F1 | 	add	result1, #20
2d280     FD 18 62 FC | 	wrlong	arg04, result1
2d284     14 4E 85 F1 | 	sub	fp, #20
2d288     A7 16 02 FB | 	rdlong	arg03, fp
2d28c     04 4E 85 F1 | 	sub	fp, #4
2d290     10 16 06 F1 | 	add	arg03, #16
2d294     0B 17 C2 FA | 	rdbyte	arg03, arg03
2d298     02 16 CE F7 | 	test	arg03, #2 wz
2d29c     3C 00 90 AD |  if_e	jmp	#LR__4618
2d2a0     04 4E 05 F1 | 	add	fp, #4
2d2a4     A7 12 02 FB | 	rdlong	arg01, fp
2d2a8     10 4E 05 F1 | 	add	fp, #16
2d2ac     A7 14 02 FB | 	rdlong	arg02, fp
2d2b0     14 4E 85 F1 | 	sub	fp, #20
2d2b4     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
2d2b8     14 4E 05 F1 | 	add	fp, #20
2d2bc     A7 FA 61 FC | 	wrlong	result1, fp
2d2c0     00 FA 4D F2 | 	cmps	result1, #0 wz
2d2c4     14 4E 85 F1 | 	sub	fp, #20
2d2c8     08 4E 05 A1 |  if_e	add	fp, #8
2d2cc     A7 00 68 AC |  if_e	wrlong	#0, fp
2d2d0     08 4E 85 A1 |  if_e	sub	fp, #8
2d2d4                 | ' 							ofs = 0; break;
2d2d4     D0 00 90 AD |  if_e	jmp	#LR__4623
2d2d8     24 00 90 FD | 	jmp	#LR__4619
2d2dc                 | LR__4618
2d2dc     04 4E 05 F1 | 	add	fp, #4
2d2e0     A7 12 02 FB | 	rdlong	arg01, fp
2d2e4     10 4E 05 F1 | 	add	fp, #16
2d2e8     A7 14 02 FB | 	rdlong	arg02, fp
2d2ec     14 4E 85 F1 | 	sub	fp, #20
2d2f0     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
2d2f4     14 4E 05 F1 | 	add	fp, #20
2d2f8     A7 FA 61 FC | 	wrlong	result1, fp
2d2fc     14 4E 85 F1 | 	sub	fp, #20
2d300                 | LR__4619
2d300     14 4E 05 F1 | 	add	fp, #20
2d304     A7 16 02 FB | 	rdlong	arg03, fp
2d308     14 4E 85 F1 | 	sub	fp, #20
2d30c     FF FF 7F FF 
2d310     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
2d314     1C 00 90 5D |  if_ne	jmp	#LR__4620
2d318     04 4E 05 F1 | 	add	fp, #4
2d31c     A7 16 02 FB | 	rdlong	arg03, fp
2d320     04 4E 85 F1 | 	sub	fp, #4
2d324     11 16 06 F1 | 	add	arg03, #17
2d328     0B 03 48 FC | 	wrbyte	#1, arg03
2d32c     01 FA 05 F6 | 	mov	result1, #1
2d330     D0 02 90 FD | 	jmp	#LR__4633
2d334                 | LR__4620
2d334     14 4E 05 F1 | 	add	fp, #20
2d338     A7 16 02 FB | 	rdlong	arg03, fp
2d33c     14 4E 85 F1 | 	sub	fp, #20
2d340     02 16 16 F2 | 	cmp	arg03, #2 wc
2d344     24 00 90 CD |  if_b	jmp	#LR__4621
2d348     10 4E 05 F1 | 	add	fp, #16
2d34c     A7 18 02 FB | 	rdlong	arg04, fp
2d350     04 4E 05 F1 | 	add	fp, #4
2d354     A7 16 02 FB | 	rdlong	arg03, fp
2d358     14 4E 85 F1 | 	sub	fp, #20
2d35c     18 18 06 F1 | 	add	arg04, #24
2d360     0C 19 02 FB | 	rdlong	arg04, arg04
2d364     0C 17 12 F2 | 	cmp	arg03, arg04 wc
2d368     1C 00 90 CD |  if_b	jmp	#LR__4622
2d36c                 | LR__4621
2d36c     04 4E 05 F1 | 	add	fp, #4
2d370     A7 16 02 FB | 	rdlong	arg03, fp
2d374     04 4E 85 F1 | 	sub	fp, #4
2d378     11 16 06 F1 | 	add	arg03, #17
2d37c     0B 05 48 FC | 	wrbyte	#2, arg03
2d380     02 FA 05 F6 | 	mov	result1, #2
2d384     7C 02 90 FD | 	jmp	#LR__4633
2d388                 | LR__4622
2d388     04 4E 05 F1 | 	add	fp, #4
2d38c     A7 18 02 FB | 	rdlong	arg04, fp
2d390     10 4E 05 F1 | 	add	fp, #16
2d394     A7 16 02 FB | 	rdlong	arg03, fp
2d398     14 4E 85 F1 | 	sub	fp, #20
2d39c     18 18 06 F1 | 	add	arg04, #24
2d3a0     0C 17 62 FC | 	wrlong	arg03, arg04
2d3a4     7C FE 9F FD | 	jmp	#LR__4617
2d3a8                 | LR__4623
2d3a8     04 4E 05 F1 | 	add	fp, #4
2d3ac     A7 16 02 FB | 	rdlong	arg03, fp
2d3b0     0B 13 02 F6 | 	mov	arg01, arg03
2d3b4     14 16 06 F1 | 	add	arg03, #20
2d3b8     0B 15 02 FB | 	rdlong	arg02, arg03
2d3bc     04 4E 05 F1 | 	add	fp, #4
2d3c0     A7 16 02 FB | 	rdlong	arg03, fp
2d3c4     0B 15 02 F1 | 	add	arg02, arg03
2d3c8     14 12 06 F1 | 	add	arg01, #20
2d3cc     09 15 62 FC | 	wrlong	arg02, arg01
2d3d0     A7 16 02 FB | 	rdlong	arg03, fp
2d3d4     08 4E 85 F1 | 	sub	fp, #8
2d3d8     FF 17 CE F7 | 	test	arg03, #511 wz
2d3dc     6C 00 90 AD |  if_e	jmp	#LR__4625
2d3e0     10 4E 05 F1 | 	add	fp, #16
2d3e4     A7 12 02 FB | 	rdlong	arg01, fp
2d3e8     04 4E 05 F1 | 	add	fp, #4
2d3ec     A7 14 02 FB | 	rdlong	arg02, fp
2d3f0     14 4E 85 F1 | 	sub	fp, #20
2d3f4     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
2d3f8     1C 4E 05 F1 | 	add	fp, #28
2d3fc     A7 FA 61 FC | 	wrlong	result1, fp
2d400     1C 4E 85 F1 | 	sub	fp, #28
2d404     00 FA 0D F2 | 	cmp	result1, #0 wz
2d408     1C 00 90 5D |  if_ne	jmp	#LR__4624
2d40c     04 4E 05 F1 | 	add	fp, #4
2d410     A7 16 02 FB | 	rdlong	arg03, fp
2d414     04 4E 85 F1 | 	sub	fp, #4
2d418     11 16 06 F1 | 	add	arg03, #17
2d41c     0B 05 48 FC | 	wrbyte	#2, arg03
2d420     02 FA 05 F6 | 	mov	result1, #2
2d424     DC 01 90 FD | 	jmp	#LR__4633
2d428                 | LR__4624
2d428     1C 4E 05 F1 | 	add	fp, #28
2d42c     A7 18 02 FB | 	rdlong	arg04, fp
2d430     14 4E 85 F1 | 	sub	fp, #20
2d434     A7 16 02 FB | 	rdlong	arg03, fp
2d438     09 16 46 F0 | 	shr	arg03, #9
2d43c     0B 19 02 F1 | 	add	arg04, arg03
2d440     14 4E 05 F1 | 	add	fp, #20
2d444     A7 18 62 FC | 	wrlong	arg04, fp
2d448     1C 4E 85 F1 | 	sub	fp, #28
2d44c                 | LR__4625
2d44c                 | LR__4626
2d44c                 | LR__4627
2d44c     04 4E 05 F1 | 	add	fp, #4
2d450     A7 18 02 FB | 	rdlong	arg04, fp
2d454     0C 17 02 F6 | 	mov	arg03, arg04
2d458     04 4E 85 F1 | 	sub	fp, #4
2d45c     14 16 06 F1 | 	add	arg03, #20
2d460     0B 17 02 FB | 	rdlong	arg03, arg03
2d464     0C 18 06 F1 | 	add	arg04, #12
2d468     0C 19 02 FB | 	rdlong	arg04, arg04
2d46c     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
2d470     3C 00 90 ED |  if_be	jmp	#LR__4628
2d474     04 4E 05 F1 | 	add	fp, #4
2d478     A7 18 02 FB | 	rdlong	arg04, fp
2d47c     0C 17 02 F6 | 	mov	arg03, arg04
2d480     14 18 06 F1 | 	add	arg04, #20
2d484     0C 19 02 FB | 	rdlong	arg04, arg04
2d488     0C 16 06 F1 | 	add	arg03, #12
2d48c     0B 19 62 FC | 	wrlong	arg04, arg03
2d490     A7 18 02 FB | 	rdlong	arg04, fp
2d494     0C 17 02 F6 | 	mov	arg03, arg04
2d498     04 4E 85 F1 | 	sub	fp, #4
2d49c     10 18 06 F1 | 	add	arg04, #16
2d4a0     0C 19 C2 FA | 	rdbyte	arg04, arg04
2d4a4     40 18 46 F5 | 	or	arg04, #64
2d4a8     10 16 06 F1 | 	add	arg03, #16
2d4ac     0B 19 42 FC | 	wrbyte	arg04, arg03
2d4b0                 | LR__4628
2d4b0     04 4E 05 F1 | 	add	fp, #4
2d4b4     A7 16 02 FB | 	rdlong	arg03, fp
2d4b8     04 4E 85 F1 | 	sub	fp, #4
2d4bc     14 16 06 F1 | 	add	arg03, #20
2d4c0     0B 17 02 FB | 	rdlong	arg03, arg03
2d4c4     FF 17 CE F7 | 	test	arg03, #511 wz
2d4c8     2C 01 90 AD |  if_e	jmp	#LR__4632
2d4cc     04 4E 05 F1 | 	add	fp, #4
2d4d0     A7 18 02 FB | 	rdlong	arg04, fp
2d4d4     18 4E 05 F1 | 	add	fp, #24
2d4d8     A7 16 02 FB | 	rdlong	arg03, fp
2d4dc     1C 4E 85 F1 | 	sub	fp, #28
2d4e0     1C 18 06 F1 | 	add	arg04, #28
2d4e4     0C 19 02 FB | 	rdlong	arg04, arg04
2d4e8     0C 17 0A F2 | 	cmp	arg03, arg04 wz
2d4ec     08 01 90 AD |  if_e	jmp	#LR__4632
2d4f0     04 4E 05 F1 | 	add	fp, #4
2d4f4     A7 16 02 FB | 	rdlong	arg03, fp
2d4f8     04 4E 85 F1 | 	sub	fp, #4
2d4fc     10 16 06 F1 | 	add	arg03, #16
2d500     0B 17 C2 FA | 	rdbyte	arg03, arg03
2d504     80 16 CE F7 | 	test	arg03, #128 wz
2d508     7C 00 90 AD |  if_e	jmp	#LR__4630
2d50c     10 4E 05 F1 | 	add	fp, #16
2d510     A7 16 02 FB | 	rdlong	arg03, fp
2d514     01 16 06 F1 | 	add	arg03, #1
2d518     0B 13 C2 FA | 	rdbyte	arg01, arg03
2d51c     0C 4E 85 F1 | 	sub	fp, #12
2d520     A7 16 02 FB | 	rdlong	arg03, fp
2d524     0B 15 02 F6 | 	mov	arg02, arg03
2d528     28 14 06 F1 | 	add	arg02, #40
2d52c     04 4E 85 F1 | 	sub	fp, #4
2d530     1C 16 06 F1 | 	add	arg03, #28
2d534     0B 17 02 FB | 	rdlong	arg03, arg03
2d538     01 18 06 F6 | 	mov	arg04, #1
2d53c     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
2d540     00 FA 0D F2 | 	cmp	result1, #0 wz
2d544     1C 00 90 AD |  if_e	jmp	#LR__4629
2d548     04 4E 05 F1 | 	add	fp, #4
2d54c     A7 16 02 FB | 	rdlong	arg03, fp
2d550     04 4E 85 F1 | 	sub	fp, #4
2d554     11 16 06 F1 | 	add	arg03, #17
2d558     0B 03 48 FC | 	wrbyte	#1, arg03
2d55c     01 FA 05 F6 | 	mov	result1, #1
2d560     A0 00 90 FD | 	jmp	#LR__4633
2d564                 | LR__4629
2d564     04 4E 05 F1 | 	add	fp, #4
2d568     A7 18 02 FB | 	rdlong	arg04, fp
2d56c     0C 17 02 F6 | 	mov	arg03, arg04
2d570     04 4E 85 F1 | 	sub	fp, #4
2d574     10 18 06 F1 | 	add	arg04, #16
2d578     0C 19 C2 FA | 	rdbyte	arg04, arg04
2d57c     7F 18 06 F5 | 	and	arg04, #127
2d580     10 16 06 F1 | 	add	arg03, #16
2d584     0B 19 42 FC | 	wrbyte	arg04, arg03
2d588                 | LR__4630
2d588     10 4E 05 F1 | 	add	fp, #16
2d58c     A7 16 02 FB | 	rdlong	arg03, fp
2d590     01 16 06 F1 | 	add	arg03, #1
2d594     0B 13 C2 FA | 	rdbyte	arg01, arg03
2d598     0C 4E 85 F1 | 	sub	fp, #12
2d59c     A7 14 02 FB | 	rdlong	arg02, fp
2d5a0     28 14 06 F1 | 	add	arg02, #40
2d5a4     18 4E 05 F1 | 	add	fp, #24
2d5a8     A7 16 02 FB | 	rdlong	arg03, fp
2d5ac     1C 4E 85 F1 | 	sub	fp, #28
2d5b0     01 18 06 F6 | 	mov	arg04, #1
2d5b4     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
2d5b8     00 FA 0D F2 | 	cmp	result1, #0 wz
2d5bc     1C 00 90 AD |  if_e	jmp	#LR__4631
2d5c0     04 4E 05 F1 | 	add	fp, #4
2d5c4     A7 16 02 FB | 	rdlong	arg03, fp
2d5c8     04 4E 85 F1 | 	sub	fp, #4
2d5cc     11 16 06 F1 | 	add	arg03, #17
2d5d0     0B 03 48 FC | 	wrbyte	#1, arg03
2d5d4     01 FA 05 F6 | 	mov	result1, #1
2d5d8     28 00 90 FD | 	jmp	#LR__4633
2d5dc                 | LR__4631
2d5dc     04 4E 05 F1 | 	add	fp, #4
2d5e0     A7 18 02 FB | 	rdlong	arg04, fp
2d5e4     18 4E 05 F1 | 	add	fp, #24
2d5e8     A7 16 02 FB | 	rdlong	arg03, fp
2d5ec     1C 4E 85 F1 | 	sub	fp, #28
2d5f0     1C 18 06 F1 | 	add	arg04, #28
2d5f4     0C 17 62 FC | 	wrlong	arg03, arg04
2d5f8                 | LR__4632
2d5f8                 | ' 
2d5f8                 | ' 			fp->sect = nsect;
2d5f8                 | ' 		}
2d5f8                 | ' 	}
2d5f8                 | ' 
2d5f8                 | ' 	return res ;
2d5f8     0C 4E 05 F1 | 	add	fp, #12
2d5fc     A7 FA 01 FB | 	rdlong	result1, fp
2d600     0C 4E 85 F1 | 	sub	fp, #12
2d604                 | LR__4633
2d604     A7 F0 03 F6 | 	mov	ptra, fp
2d608     B2 00 A0 FD | 	call	#popregs_
2d60c                 | _fatfs_cc_f_lseek_ret
2d60c     2D 00 64 FD | 	ret
2d610                 | 
2d610                 | _fatfs_cc_f_opendir
2d610     01 4A 05 F6 | 	mov	COUNT_, #1
2d614     A8 00 A0 FD | 	call	#pushregs_
2d618     14 F0 07 F1 | 	add	ptra, #20
2d61c     04 4E 05 F1 | 	add	fp, #4
2d620     A7 12 62 FC | 	wrlong	arg01, fp
2d624     04 4E 05 F1 | 	add	fp, #4
2d628     A7 14 62 FC | 	wrlong	arg02, fp
2d62c     04 4E 85 F1 | 	sub	fp, #4
2d630     A7 16 0A FB | 	rdlong	arg03, fp wz
2d634     04 4E 85 F1 | 	sub	fp, #4
2d638     09 FA 05 A6 |  if_e	mov	result1, #9
2d63c     78 01 90 AD |  if_e	jmp	#LR__4646
2d640     08 4E 05 F1 | 	add	fp, #8
2d644     A7 12 02 F6 | 	mov	arg01, fp
2d648     08 4E 05 F1 | 	add	fp, #8
2d64c     A7 14 02 F6 | 	mov	arg02, fp
2d650     10 4E 85 F1 | 	sub	fp, #16
2d654     00 16 06 F6 | 	mov	arg03, #0
2d658     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
2d65c     0C 4E 05 F1 | 	add	fp, #12
2d660     A7 FA 61 FC | 	wrlong	result1, fp
2d664     0C 4E 85 F1 | 	sub	fp, #12
2d668     00 FA 0D F2 | 	cmp	result1, #0 wz
2d66c     20 01 90 5D |  if_ne	jmp	#LR__4645
2d670     04 4E 05 F1 | 	add	fp, #4
2d674     A7 16 02 FB | 	rdlong	arg03, fp
2d678     0C 4E 05 F1 | 	add	fp, #12
2d67c     A7 FA 01 FB | 	rdlong	result1, fp
2d680     0B FB 61 FC | 	wrlong	result1, arg03
2d684     0C 4E 85 F1 | 	sub	fp, #12
2d688     A7 12 02 FB | 	rdlong	arg01, fp
2d68c     04 4E 05 F1 | 	add	fp, #4
2d690     A7 14 02 FB | 	rdlong	arg02, fp
2d694     08 4E 85 F1 | 	sub	fp, #8
2d698     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
2d69c     0C 4E 05 F1 | 	add	fp, #12
2d6a0     A7 FA 61 FC | 	wrlong	result1, fp
2d6a4     0C 4E 85 F1 | 	sub	fp, #12
2d6a8     00 FA 0D F2 | 	cmp	result1, #0 wz
2d6ac     C4 00 90 5D |  if_ne	jmp	#LR__4644
2d6b0     04 4E 05 F1 | 	add	fp, #4
2d6b4     A7 16 02 FB | 	rdlong	arg03, fp
2d6b8     04 4E 85 F1 | 	sub	fp, #4
2d6bc     2B 16 06 F1 | 	add	arg03, #43
2d6c0     0B 17 C2 FA | 	rdbyte	arg03, arg03
2d6c4     80 16 CE F7 | 	test	arg03, #128 wz
2d6c8     58 00 90 5D |  if_ne	jmp	#LR__4642
2d6cc     04 4E 05 F1 | 	add	fp, #4
2d6d0     A7 16 02 FB | 	rdlong	arg03, fp
2d6d4     04 4E 85 F1 | 	sub	fp, #4
2d6d8     06 16 06 F1 | 	add	arg03, #6
2d6dc     0B 17 C2 FA | 	rdbyte	arg03, arg03
2d6e0     10 16 CE F7 | 	test	arg03, #16 wz
2d6e4     30 00 90 AD |  if_e	jmp	#LR__4640
2d6e8     04 4E 05 F1 | 	add	fp, #4
2d6ec     A7 16 02 FB | 	rdlong	arg03, fp
2d6f0     0B 1F 02 F6 | 	mov	local01, arg03
2d6f4     0C 4E 05 F1 | 	add	fp, #12
2d6f8     A7 12 02 FB | 	rdlong	arg01, fp
2d6fc     10 4E 85 F1 | 	sub	fp, #16
2d700     1C 16 06 F1 | 	add	arg03, #28
2d704     0B 15 02 FB | 	rdlong	arg02, arg03
2d708     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
2d70c     08 1E 06 F1 | 	add	local01, #8
2d710     0F FB 61 FC | 	wrlong	result1, local01
2d714     0C 00 90 FD | 	jmp	#LR__4641
2d718                 | LR__4640
2d718     0C 4E 05 F1 | 	add	fp, #12
2d71c     A7 0A 68 FC | 	wrlong	#5, fp
2d720     0C 4E 85 F1 | 	sub	fp, #12
2d724                 | LR__4641
2d724                 | LR__4642
2d724     0C 4E 05 F1 | 	add	fp, #12
2d728     A7 1E 0A FB | 	rdlong	local01, fp wz
2d72c     0C 4E 85 F1 | 	sub	fp, #12
2d730     40 00 90 5D |  if_ne	jmp	#LR__4643
2d734     04 4E 05 F1 | 	add	fp, #4
2d738     A7 1E 02 FB | 	rdlong	local01, fp
2d73c     0C 4E 05 F1 | 	add	fp, #12
2d740     A7 16 02 FB | 	rdlong	arg03, fp
2d744     06 16 06 F1 | 	add	arg03, #6
2d748     0B 17 E2 FA | 	rdword	arg03, arg03
2d74c     04 1E 06 F1 | 	add	local01, #4
2d750     0F 17 52 FC | 	wrword	arg03, local01
2d754     0C 4E 85 F1 | 	sub	fp, #12
2d758     A7 12 02 FB | 	rdlong	arg01, fp
2d75c     04 4E 85 F1 | 	sub	fp, #4
2d760     00 14 06 F6 | 	mov	arg02, #0
2d764     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
2d768     0C 4E 05 F1 | 	add	fp, #12
2d76c     A7 FA 61 FC | 	wrlong	result1, fp
2d770     0C 4E 85 F1 | 	sub	fp, #12
2d774                 | LR__4643
2d774                 | LR__4644
2d774     0C 4E 05 F1 | 	add	fp, #12
2d778     A7 1E 02 FB | 	rdlong	local01, fp
2d77c     0C 4E 85 F1 | 	sub	fp, #12
2d780     04 1E 0E F2 | 	cmp	local01, #4 wz
2d784     0C 4E 05 A1 |  if_e	add	fp, #12
2d788     A7 0A 68 AC |  if_e	wrlong	#5, fp
2d78c     0C 4E 85 A1 |  if_e	sub	fp, #12
2d790                 | LR__4645
2d790     0C 4E 05 F1 | 	add	fp, #12
2d794     A7 1E 0A FB | 	rdlong	local01, fp wz
2d798     0C 4E 85 F1 | 	sub	fp, #12
2d79c     04 4E 05 51 |  if_ne	add	fp, #4
2d7a0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
2d7a4     04 4E 85 51 |  if_ne	sub	fp, #4
2d7a8     0F 01 68 5C |  if_ne	wrlong	#0, local01
2d7ac                 | ' 
2d7ac                 | ' 	return res ;
2d7ac     0C 4E 05 F1 | 	add	fp, #12
2d7b0     A7 FA 01 FB | 	rdlong	result1, fp
2d7b4     0C 4E 85 F1 | 	sub	fp, #12
2d7b8                 | LR__4646
2d7b8     A7 F0 03 F6 | 	mov	ptra, fp
2d7bc     B2 00 A0 FD | 	call	#popregs_
2d7c0                 | _fatfs_cc_f_opendir_ret
2d7c0     2D 00 64 FD | 	ret
2d7c4                 | 
2d7c4                 | _fatfs_cc_f_closedir
2d7c4     00 4A 05 F6 | 	mov	COUNT_, #0
2d7c8     A8 00 A0 FD | 	call	#pushregs_
2d7cc     10 F0 07 F1 | 	add	ptra, #16
2d7d0     04 4E 05 F1 | 	add	fp, #4
2d7d4     A7 12 62 FC | 	wrlong	arg01, fp
2d7d8     08 4E 05 F1 | 	add	fp, #8
2d7dc     A7 14 02 F6 | 	mov	arg02, fp
2d7e0     0C 4E 85 F1 | 	sub	fp, #12
2d7e4     C0 DD BF FD | 	call	#_fatfs_cc_validate
2d7e8     08 4E 05 F1 | 	add	fp, #8
2d7ec     A7 FA 61 FC | 	wrlong	result1, fp
2d7f0     08 4E 85 F1 | 	sub	fp, #8
2d7f4     00 FA 0D F2 | 	cmp	result1, #0 wz
2d7f8     04 4E 05 A1 |  if_e	add	fp, #4
2d7fc     A7 FA 01 AB |  if_e	rdlong	result1, fp
2d800     04 4E 85 A1 |  if_e	sub	fp, #4
2d804     FD 00 68 AC |  if_e	wrlong	#0, result1
2d808                 | ' 
2d808                 | ' 
2d808                 | ' 
2d808                 | ' 
2d808                 | ' 		dp->obj.fs = 0;
2d808                 | ' #line 4633 "ff.c"
2d808                 | ' 	}
2d808                 | ' 	return res;
2d808     08 4E 05 F1 | 	add	fp, #8
2d80c     A7 FA 01 FB | 	rdlong	result1, fp
2d810     08 4E 85 F1 | 	sub	fp, #8
2d814     A7 F0 03 F6 | 	mov	ptra, fp
2d818     B2 00 A0 FD | 	call	#popregs_
2d81c                 | _fatfs_cc_f_closedir_ret
2d81c     2D 00 64 FD | 	ret
2d820                 | 
2d820                 | _fatfs_cc_f_readdir
2d820     00 4A 05 F6 | 	mov	COUNT_, #0
2d824     A8 00 A0 FD | 	call	#pushregs_
2d828     14 F0 07 F1 | 	add	ptra, #20
2d82c     04 4E 05 F1 | 	add	fp, #4
2d830     A7 12 62 FC | 	wrlong	arg01, fp
2d834     04 4E 05 F1 | 	add	fp, #4
2d838     A7 14 62 FC | 	wrlong	arg02, fp
2d83c     04 4E 85 F1 | 	sub	fp, #4
2d840     A7 12 02 FB | 	rdlong	arg01, fp
2d844     0C 4E 05 F1 | 	add	fp, #12
2d848     A7 14 02 F6 | 	mov	arg02, fp
2d84c     10 4E 85 F1 | 	sub	fp, #16
2d850     54 DD BF FD | 	call	#_fatfs_cc_validate
2d854     0C 4E 05 F1 | 	add	fp, #12
2d858     A7 FA 61 FC | 	wrlong	result1, fp
2d85c     0C 4E 85 F1 | 	sub	fp, #12
2d860     00 FA 0D F2 | 	cmp	result1, #0 wz
2d864     BC 00 90 5D |  if_ne	jmp	#LR__4653
2d868     08 4E 05 F1 | 	add	fp, #8
2d86c     A7 FA 09 FB | 	rdlong	result1, fp wz
2d870     08 4E 85 F1 | 	sub	fp, #8
2d874     24 00 90 5D |  if_ne	jmp	#LR__4650
2d878     04 4E 05 F1 | 	add	fp, #4
2d87c     A7 12 02 FB | 	rdlong	arg01, fp
2d880     04 4E 85 F1 | 	sub	fp, #4
2d884     00 14 06 F6 | 	mov	arg02, #0
2d888     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
2d88c     0C 4E 05 F1 | 	add	fp, #12
2d890     A7 FA 61 FC | 	wrlong	result1, fp
2d894     0C 4E 85 F1 | 	sub	fp, #12
2d898     88 00 90 FD | 	jmp	#LR__4652
2d89c                 | LR__4650
2d89c     04 4E 05 F1 | 	add	fp, #4
2d8a0     A7 12 02 FB | 	rdlong	arg01, fp
2d8a4     04 4E 85 F1 | 	sub	fp, #4
2d8a8     00 14 06 F6 | 	mov	arg02, #0
2d8ac     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
2d8b0     0C 4E 05 F1 | 	add	fp, #12
2d8b4     A7 FA 61 FC | 	wrlong	result1, fp
2d8b8     0C 4E 85 F1 | 	sub	fp, #12
2d8bc     04 FA 0D F2 | 	cmp	result1, #4 wz
2d8c0     0C 4E 05 A1 |  if_e	add	fp, #12
2d8c4     A7 00 68 AC |  if_e	wrlong	#0, fp
2d8c8     0C 4E 85 A1 |  if_e	sub	fp, #12
2d8cc     0C 4E 05 F1 | 	add	fp, #12
2d8d0     A7 FA 09 FB | 	rdlong	result1, fp wz
2d8d4     0C 4E 85 F1 | 	sub	fp, #12
2d8d8     48 00 90 5D |  if_ne	jmp	#LR__4651
2d8dc     04 4E 05 F1 | 	add	fp, #4
2d8e0     A7 12 02 FB | 	rdlong	arg01, fp
2d8e4     04 4E 05 F1 | 	add	fp, #4
2d8e8     A7 14 02 FB | 	rdlong	arg02, fp
2d8ec     08 4E 85 F1 | 	sub	fp, #8
2d8f0     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
2d8f4     04 4E 05 F1 | 	add	fp, #4
2d8f8     A7 12 02 FB | 	rdlong	arg01, fp
2d8fc     04 4E 85 F1 | 	sub	fp, #4
2d900     00 14 06 F6 | 	mov	arg02, #0
2d904     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
2d908     0C 4E 05 F1 | 	add	fp, #12
2d90c     A7 FA 61 FC | 	wrlong	result1, fp
2d910     0C 4E 85 F1 | 	sub	fp, #12
2d914     04 FA 0D F2 | 	cmp	result1, #4 wz
2d918     0C 4E 05 A1 |  if_e	add	fp, #12
2d91c     A7 00 68 AC |  if_e	wrlong	#0, fp
2d920     0C 4E 85 A1 |  if_e	sub	fp, #12
2d924                 | LR__4651
2d924                 | LR__4652
2d924                 | LR__4653
2d924                 | ' 			}
2d924                 | ' 			;
2d924                 | ' 		}
2d924                 | ' 	}
2d924                 | ' 	return res ;
2d924     0C 4E 05 F1 | 	add	fp, #12
2d928     A7 FA 01 FB | 	rdlong	result1, fp
2d92c     0C 4E 85 F1 | 	sub	fp, #12
2d930     A7 F0 03 F6 | 	mov	ptra, fp
2d934     B2 00 A0 FD | 	call	#popregs_
2d938                 | _fatfs_cc_f_readdir_ret
2d938     2D 00 64 FD | 	ret
2d93c                 | 
2d93c                 | _fatfs_cc_f_stat
2d93c     00 4A 05 F6 | 	mov	COUNT_, #0
2d940     A8 00 A0 FD | 	call	#pushregs_
2d944     40 F0 07 F1 | 	add	ptra, #64
2d948     04 4E 05 F1 | 	add	fp, #4
2d94c     A7 12 62 FC | 	wrlong	arg01, fp
2d950     04 4E 05 F1 | 	add	fp, #4
2d954     A7 14 62 FC | 	wrlong	arg02, fp
2d958     04 4E 85 F1 | 	sub	fp, #4
2d95c     A7 12 02 F6 | 	mov	arg01, fp
2d960     0C 4E 05 F1 | 	add	fp, #12
2d964     A7 14 02 F6 | 	mov	arg02, fp
2d968     10 4E 85 F1 | 	sub	fp, #16
2d96c     00 16 06 F6 | 	mov	arg03, #0
2d970     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
2d974     0C 4E 05 F1 | 	add	fp, #12
2d978     A7 FA 61 FC | 	wrlong	result1, fp
2d97c     0C 4E 85 F1 | 	sub	fp, #12
2d980     00 FA 0D F2 | 	cmp	result1, #0 wz
2d984     74 00 90 5D |  if_ne	jmp	#LR__4663
2d988     10 4E 05 F1 | 	add	fp, #16
2d98c     A7 12 02 F6 | 	mov	arg01, fp
2d990     0C 4E 85 F1 | 	sub	fp, #12
2d994     A7 14 02 FB | 	rdlong	arg02, fp
2d998     04 4E 85 F1 | 	sub	fp, #4
2d99c     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
2d9a0     0C 4E 05 F1 | 	add	fp, #12
2d9a4     A7 FA 61 FC | 	wrlong	result1, fp
2d9a8     0C 4E 85 F1 | 	sub	fp, #12
2d9ac     00 FA 0D F2 | 	cmp	result1, #0 wz
2d9b0     48 00 90 5D |  if_ne	jmp	#LR__4662
2d9b4     3B 4E 05 F1 | 	add	fp, #59
2d9b8     A7 FA C1 FA | 	rdbyte	result1, fp
2d9bc     3B 4E 85 F1 | 	sub	fp, #59
2d9c0     80 FA CD F7 | 	test	result1, #128 wz
2d9c4     0C 4E 05 51 |  if_ne	add	fp, #12
2d9c8     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2d9cc     0C 4E 85 51 |  if_ne	sub	fp, #12
2d9d0     28 00 90 5D |  if_ne	jmp	#LR__4661
2d9d4     08 4E 05 F1 | 	add	fp, #8
2d9d8     A7 FA 09 FB | 	rdlong	result1, fp wz
2d9dc     08 4E 85 F1 | 	sub	fp, #8
2d9e0     18 00 90 AD |  if_e	jmp	#LR__4660
2d9e4     10 4E 05 F1 | 	add	fp, #16
2d9e8     A7 12 02 F6 | 	mov	arg01, fp
2d9ec     08 4E 85 F1 | 	sub	fp, #8
2d9f0     A7 14 02 FB | 	rdlong	arg02, fp
2d9f4     08 4E 85 F1 | 	sub	fp, #8
2d9f8     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
2d9fc                 | LR__4660
2d9fc                 | LR__4661
2d9fc                 | LR__4662
2d9fc                 | LR__4663
2d9fc                 | ' 			}
2d9fc                 | ' 		}
2d9fc                 | ' 		;
2d9fc                 | ' 	}
2d9fc                 | ' 
2d9fc                 | ' 	return res ;
2d9fc     0C 4E 05 F1 | 	add	fp, #12
2da00     A7 FA 01 FB | 	rdlong	result1, fp
2da04     0C 4E 85 F1 | 	sub	fp, #12
2da08     A7 F0 03 F6 | 	mov	ptra, fp
2da0c     B2 00 A0 FD | 	call	#popregs_
2da10                 | _fatfs_cc_f_stat_ret
2da10     2D 00 64 FD | 	ret
2da14                 | 
2da14                 | _fatfs_cc_f_unlink
2da14     00 4A 05 F6 | 	mov	COUNT_, #0
2da18     A8 00 A0 FD | 	call	#pushregs_
2da1c     74 F0 07 F1 | 	add	ptra, #116
2da20     04 4E 05 F1 | 	add	fp, #4
2da24     A7 12 62 FC | 	wrlong	arg01, fp
2da28     68 4E 05 F1 | 	add	fp, #104
2da2c     A7 00 68 FC | 	wrlong	#0, fp
2da30     68 4E 85 F1 | 	sub	fp, #104
2da34     A7 12 02 F6 | 	mov	arg01, fp
2da38     6C 4E 05 F1 | 	add	fp, #108
2da3c     A7 14 02 F6 | 	mov	arg02, fp
2da40     70 4E 85 F1 | 	sub	fp, #112
2da44     02 16 06 F6 | 	mov	arg03, #2
2da48     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
2da4c     08 4E 05 F1 | 	add	fp, #8
2da50     A7 FA 61 FC | 	wrlong	result1, fp
2da54     08 4E 85 F1 | 	sub	fp, #8
2da58     00 FA 0D F2 | 	cmp	result1, #0 wz
2da5c     E4 01 90 5D |  if_ne	jmp	#LR__4678
2da60     70 4E 05 F1 | 	add	fp, #112
2da64     A7 16 02 FB | 	rdlong	arg03, fp
2da68     64 4E 85 F1 | 	sub	fp, #100
2da6c     A7 16 62 FC | 	wrlong	arg03, fp
2da70     A7 12 02 F6 | 	mov	arg01, fp
2da74     08 4E 85 F1 | 	sub	fp, #8
2da78     A7 14 02 FB | 	rdlong	arg02, fp
2da7c     04 4E 85 F1 | 	sub	fp, #4
2da80     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
2da84     08 4E 05 F1 | 	add	fp, #8
2da88     A7 FA 61 FC | 	wrlong	result1, fp
2da8c     00 FA 4D F2 | 	cmps	result1, #0 wz
2da90     08 4E 85 F1 | 	sub	fp, #8
2da94     AC 01 90 5D |  if_ne	jmp	#LR__4677
2da98     37 4E 05 F1 | 	add	fp, #55
2da9c     A7 FA C1 FA | 	rdbyte	result1, fp
2daa0     37 4E 85 F1 | 	sub	fp, #55
2daa4     80 FA CD F7 | 	test	result1, #128 wz
2daa8     08 4E 05 51 |  if_ne	add	fp, #8
2daac     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2dab0     08 4E 85 51 |  if_ne	sub	fp, #8
2dab4     1C 00 90 5D |  if_ne	jmp	#LR__4670
2dab8     12 4E 05 F1 | 	add	fp, #18
2dabc     A7 FA C1 FA | 	rdbyte	result1, fp
2dac0     12 4E 85 F1 | 	sub	fp, #18
2dac4     01 FA CD F7 | 	test	result1, #1 wz
2dac8     08 4E 05 51 |  if_ne	add	fp, #8
2dacc     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2dad0     08 4E 85 51 |  if_ne	sub	fp, #8
2dad4                 | LR__4670
2dad4     08 4E 05 F1 | 	add	fp, #8
2dad8     A7 FA 09 FB | 	rdlong	result1, fp wz
2dadc     08 4E 85 F1 | 	sub	fp, #8
2dae0     C8 00 90 5D |  if_ne	jmp	#LR__4673
2dae4     70 4E 05 F1 | 	add	fp, #112
2dae8     A7 12 02 FB | 	rdlong	arg01, fp
2daec     48 4E 85 F1 | 	sub	fp, #72
2daf0     A7 14 02 FB | 	rdlong	arg02, fp
2daf4     28 4E 85 F1 | 	sub	fp, #40
2daf8     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
2dafc     6C 4E 05 F1 | 	add	fp, #108
2db00     A7 FA 61 FC | 	wrlong	result1, fp
2db04     5A 4E 85 F1 | 	sub	fp, #90
2db08     A7 FA C1 FA | 	rdbyte	result1, fp
2db0c     12 4E 85 F1 | 	sub	fp, #18
2db10     10 FA CD F7 | 	test	result1, #16 wz
2db14     94 00 90 AD |  if_e	jmp	#LR__4672
2db18     70 4E 05 F1 | 	add	fp, #112
2db1c     A7 FA 01 FB | 	rdlong	result1, fp
2db20     34 4E 85 F1 | 	sub	fp, #52
2db24     A7 FA 61 FC | 	wrlong	result1, fp
2db28     30 4E 05 F1 | 	add	fp, #48
2db2c     A7 16 02 FB | 	rdlong	arg03, fp
2db30     28 4E 85 F1 | 	sub	fp, #40
2db34     A7 16 62 FC | 	wrlong	arg03, fp
2db38     08 4E 85 F1 | 	sub	fp, #8
2db3c     A7 12 02 F6 | 	mov	arg01, fp
2db40     3C 4E 85 F1 | 	sub	fp, #60
2db44     00 14 06 F6 | 	mov	arg02, #0
2db48     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
2db4c     08 4E 05 F1 | 	add	fp, #8
2db50     A7 FA 61 FC | 	wrlong	result1, fp
2db54     08 4E 85 F1 | 	sub	fp, #8
2db58     00 FA 0D F2 | 	cmp	result1, #0 wz
2db5c     4C 00 90 5D |  if_ne	jmp	#LR__4671
2db60     3C 4E 05 F1 | 	add	fp, #60
2db64     A7 12 02 F6 | 	mov	arg01, fp
2db68     3C 4E 85 F1 | 	sub	fp, #60
2db6c     00 14 06 F6 | 	mov	arg02, #0
2db70     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
2db74     08 4E 05 F1 | 	add	fp, #8
2db78     A7 FA 61 FC | 	wrlong	result1, fp
2db7c     00 FA 4D F2 | 	cmps	result1, #0 wz
2db80     08 4E 85 F1 | 	sub	fp, #8
2db84     08 4E 05 A1 |  if_e	add	fp, #8
2db88     A7 0E 68 AC |  if_e	wrlong	#7, fp
2db8c     08 4E 85 A1 |  if_e	sub	fp, #8
2db90     08 4E 05 F1 | 	add	fp, #8
2db94     A7 FA 01 FB | 	rdlong	result1, fp
2db98     08 4E 85 F1 | 	sub	fp, #8
2db9c     04 FA 0D F2 | 	cmp	result1, #4 wz
2dba0     08 4E 05 A1 |  if_e	add	fp, #8
2dba4     A7 00 68 AC |  if_e	wrlong	#0, fp
2dba8     08 4E 85 A1 |  if_e	sub	fp, #8
2dbac                 | LR__4671
2dbac                 | LR__4672
2dbac                 | LR__4673
2dbac     08 4E 05 F1 | 	add	fp, #8
2dbb0     A7 FA 09 FB | 	rdlong	result1, fp wz
2dbb4     08 4E 85 F1 | 	sub	fp, #8
2dbb8     88 00 90 5D |  if_ne	jmp	#LR__4676
2dbbc     0C 4E 05 F1 | 	add	fp, #12
2dbc0     A7 12 02 F6 | 	mov	arg01, fp
2dbc4     0C 4E 85 F1 | 	sub	fp, #12
2dbc8     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
2dbcc     08 4E 05 F1 | 	add	fp, #8
2dbd0     A7 FA 61 FC | 	wrlong	result1, fp
2dbd4     08 4E 85 F1 | 	sub	fp, #8
2dbd8     00 FA 0D F2 | 	cmp	result1, #0 wz
2dbdc     38 00 90 5D |  if_ne	jmp	#LR__4674
2dbe0     6C 4E 05 F1 | 	add	fp, #108
2dbe4     A7 FA 09 FB | 	rdlong	result1, fp wz
2dbe8     6C 4E 85 F1 | 	sub	fp, #108
2dbec     28 00 90 AD |  if_e	jmp	#LR__4674
2dbf0     0C 4E 05 F1 | 	add	fp, #12
2dbf4     A7 12 02 F6 | 	mov	arg01, fp
2dbf8     60 4E 05 F1 | 	add	fp, #96
2dbfc     A7 14 02 FB | 	rdlong	arg02, fp
2dc00     6C 4E 85 F1 | 	sub	fp, #108
2dc04     00 16 06 F6 | 	mov	arg03, #0
2dc08     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
2dc0c     08 4E 05 F1 | 	add	fp, #8
2dc10     A7 FA 61 FC | 	wrlong	result1, fp
2dc14     08 4E 85 F1 | 	sub	fp, #8
2dc18                 | LR__4674
2dc18     08 4E 05 F1 | 	add	fp, #8
2dc1c     A7 FA 09 FB | 	rdlong	result1, fp wz
2dc20     08 4E 85 F1 | 	sub	fp, #8
2dc24     1C 00 90 5D |  if_ne	jmp	#LR__4675
2dc28     70 4E 05 F1 | 	add	fp, #112
2dc2c     A7 12 02 FB | 	rdlong	arg01, fp
2dc30     70 4E 85 F1 | 	sub	fp, #112
2dc34     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
2dc38     08 4E 05 F1 | 	add	fp, #8
2dc3c     A7 FA 61 FC | 	wrlong	result1, fp
2dc40     08 4E 85 F1 | 	sub	fp, #8
2dc44                 | LR__4675
2dc44                 | LR__4676
2dc44                 | LR__4677
2dc44                 | LR__4678
2dc44                 | ' 			}
2dc44                 | ' 		}
2dc44                 | ' 		;
2dc44                 | ' 	}
2dc44                 | ' 
2dc44                 | ' 	return res ;
2dc44     08 4E 05 F1 | 	add	fp, #8
2dc48     A7 FA 01 FB | 	rdlong	result1, fp
2dc4c     08 4E 85 F1 | 	sub	fp, #8
2dc50     A7 F0 03 F6 | 	mov	ptra, fp
2dc54     B2 00 A0 FD | 	call	#popregs_
2dc58                 | _fatfs_cc_f_unlink_ret
2dc58     2D 00 64 FD | 	ret
2dc5c                 | 
2dc5c                 | _fatfs_cc_f_mkdir
2dc5c     00 4A 05 F6 | 	mov	COUNT_, #0
2dc60     A8 00 A0 FD | 	call	#pushregs_
2dc64     5C F0 07 F1 | 	add	ptra, #92
2dc68     04 4E 05 F1 | 	add	fp, #4
2dc6c     A7 12 62 FC | 	wrlong	arg01, fp
2dc70     A7 12 02 F6 | 	mov	arg01, fp
2dc74     48 4E 05 F1 | 	add	fp, #72
2dc78     A7 14 02 F6 | 	mov	arg02, fp
2dc7c     4C 4E 85 F1 | 	sub	fp, #76
2dc80     02 16 06 F6 | 	mov	arg03, #2
2dc84     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
2dc88     08 4E 05 F1 | 	add	fp, #8
2dc8c     A7 FA 61 FC | 	wrlong	result1, fp
2dc90     08 4E 85 F1 | 	sub	fp, #8
2dc94     00 FA 0D F2 | 	cmp	result1, #0 wz
2dc98     C4 02 90 5D |  if_ne	jmp	#LR__4685
2dc9c     4C 4E 05 F1 | 	add	fp, #76
2dca0     A7 16 02 FB | 	rdlong	arg03, fp
2dca4     40 4E 85 F1 | 	sub	fp, #64
2dca8     A7 16 62 FC | 	wrlong	arg03, fp
2dcac     A7 12 02 F6 | 	mov	arg01, fp
2dcb0     08 4E 85 F1 | 	sub	fp, #8
2dcb4     A7 14 02 FB | 	rdlong	arg02, fp
2dcb8     04 4E 85 F1 | 	sub	fp, #4
2dcbc     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
2dcc0     08 4E 05 F1 | 	add	fp, #8
2dcc4     A7 FA 61 FC | 	wrlong	result1, fp
2dcc8     00 FA 4D F2 | 	cmps	result1, #0 wz
2dccc     08 4E 85 F1 | 	sub	fp, #8
2dcd0     08 4E 05 A1 |  if_e	add	fp, #8
2dcd4     A7 10 68 AC |  if_e	wrlong	#8, fp
2dcd8     08 4E 85 A1 |  if_e	sub	fp, #8
2dcdc     08 4E 05 F1 | 	add	fp, #8
2dce0     A7 FA 01 FB | 	rdlong	result1, fp
2dce4     08 4E 85 F1 | 	sub	fp, #8
2dce8     04 FA 0D F2 | 	cmp	result1, #4 wz
2dcec     70 02 90 5D |  if_ne	jmp	#LR__4684
2dcf0     4C 4E 05 F1 | 	add	fp, #76
2dcf4     A7 16 02 FB | 	rdlong	arg03, fp
2dcf8     10 4E 85 F1 | 	sub	fp, #16
2dcfc     A7 16 62 FC | 	wrlong	arg03, fp
2dd00     A7 12 02 F6 | 	mov	arg01, fp
2dd04     3C 4E 85 F1 | 	sub	fp, #60
2dd08     00 14 06 F6 | 	mov	arg02, #0
2dd0c     04 AC BF FD | 	call	#_fatfs_cc_create_chain
2dd10     50 4E 05 F1 | 	add	fp, #80
2dd14     A7 FA 61 FC | 	wrlong	result1, fp
2dd18     48 4E 85 F1 | 	sub	fp, #72
2dd1c     A7 00 68 FC | 	wrlong	#0, fp
2dd20     48 4E 05 F1 | 	add	fp, #72
2dd24     A7 FA 09 FB | 	rdlong	result1, fp wz
2dd28     50 4E 85 F1 | 	sub	fp, #80
2dd2c     08 4E 05 A1 |  if_e	add	fp, #8
2dd30     A7 0E 68 AC |  if_e	wrlong	#7, fp
2dd34     08 4E 85 A1 |  if_e	sub	fp, #8
2dd38     50 4E 05 F1 | 	add	fp, #80
2dd3c     A7 FA 01 FB | 	rdlong	result1, fp
2dd40     50 4E 85 F1 | 	sub	fp, #80
2dd44     01 FA 0D F2 | 	cmp	result1, #1 wz
2dd48     08 4E 05 A1 |  if_e	add	fp, #8
2dd4c     A7 04 68 AC |  if_e	wrlong	#2, fp
2dd50     08 4E 85 A1 |  if_e	sub	fp, #8
2dd54     50 4E 05 F1 | 	add	fp, #80
2dd58     A7 16 02 FB | 	rdlong	arg03, fp
2dd5c     50 4E 85 F1 | 	sub	fp, #80
2dd60     FF FF 7F FF 
2dd64     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
2dd68     08 4E 05 A1 |  if_e	add	fp, #8
2dd6c     A7 02 68 AC |  if_e	wrlong	#1, fp
2dd70     08 4E 85 A1 |  if_e	sub	fp, #8
2dd74     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
2dd78     58 4E 05 F1 | 	add	fp, #88
2dd7c     A7 FA 61 FC | 	wrlong	result1, fp
2dd80     50 4E 85 F1 | 	sub	fp, #80
2dd84     A7 FA 09 FB | 	rdlong	result1, fp wz
2dd88     08 4E 85 F1 | 	sub	fp, #8
2dd8c     1C 01 90 5D |  if_ne	jmp	#LR__4681
2dd90     4C 4E 05 F1 | 	add	fp, #76
2dd94     A7 12 02 FB | 	rdlong	arg01, fp
2dd98     04 4E 05 F1 | 	add	fp, #4
2dd9c     A7 14 02 FB | 	rdlong	arg02, fp
2dda0     50 4E 85 F1 | 	sub	fp, #80
2dda4     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
2dda8     08 4E 05 F1 | 	add	fp, #8
2ddac     A7 FA 61 FC | 	wrlong	result1, fp
2ddb0     00 FA 4D F2 | 	cmps	result1, #0 wz
2ddb4     08 4E 85 F1 | 	sub	fp, #8
2ddb8     F0 00 90 5D |  if_ne	jmp	#LR__4680
2ddbc     4C 4E 05 F1 | 	add	fp, #76
2ddc0     A7 12 02 FB | 	rdlong	arg01, fp
2ddc4     4C 4E 85 F1 | 	sub	fp, #76
2ddc8     34 12 06 F1 | 	add	arg01, #52
2ddcc     20 14 06 F6 | 	mov	arg02, #32
2ddd0     0B 16 06 F6 | 	mov	arg03, #11
2ddd4     98 00 A0 FD | 	call	#\builtin_bytefill_
2ddd8     4C 4E 05 F1 | 	add	fp, #76
2dddc     A7 FA 01 FB | 	rdlong	result1, fp
2dde0     34 FA 05 F1 | 	add	result1, #52
2dde4     FD 5C 48 FC | 	wrbyte	#46, result1
2dde8     A7 16 02 FB | 	rdlong	arg03, fp
2ddec     3F 16 06 F1 | 	add	arg03, #63
2ddf0     0B 21 48 FC | 	wrbyte	#16, arg03
2ddf4     A7 12 02 FB | 	rdlong	arg01, fp
2ddf8     4A 12 06 F1 | 	add	arg01, #74
2ddfc     0C 4E 05 F1 | 	add	fp, #12
2de00     A7 14 02 FB | 	rdlong	arg02, fp
2de04     09 15 62 FC | 	wrlong	arg02, arg01
2de08     0C 4E 85 F1 | 	sub	fp, #12
2de0c     A7 14 02 FB | 	rdlong	arg02, fp
2de10     0A 13 02 F6 | 	mov	arg01, arg02
2de14     34 14 06 F1 | 	add	arg02, #52
2de18     04 4E 05 F1 | 	add	fp, #4
2de1c     A7 16 02 FB | 	rdlong	arg03, fp
2de20     50 4E 85 F1 | 	sub	fp, #80
2de24     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
2de28     4C 4E 05 F1 | 	add	fp, #76
2de2c     A7 14 02 FB | 	rdlong	arg02, fp
2de30     0A 13 02 F6 | 	mov	arg01, arg02
2de34     54 12 06 F1 | 	add	arg01, #84
2de38     4C 4E 85 F1 | 	sub	fp, #76
2de3c     34 14 06 F1 | 	add	arg02, #52
2de40     20 16 06 F6 | 	mov	arg03, #32
2de44     3C 2A BF FD | 	call	#__system____builtin_memmove
2de48     4C 4E 05 F1 | 	add	fp, #76
2de4c     A7 16 02 FB | 	rdlong	arg03, fp
2de50     55 16 06 F1 | 	add	arg03, #85
2de54     0B 5D 48 FC | 	wrbyte	#46, arg03
2de58     38 4E 85 F1 | 	sub	fp, #56
2de5c     A7 16 02 FB | 	rdlong	arg03, fp
2de60     40 4E 05 F1 | 	add	fp, #64
2de64     A7 16 62 FC | 	wrlong	arg03, fp
2de68     08 4E 85 F1 | 	sub	fp, #8
2de6c     A7 14 02 FB | 	rdlong	arg02, fp
2de70     0A 13 02 F6 | 	mov	arg01, arg02
2de74     54 14 06 F1 | 	add	arg02, #84
2de78     4C 4E 85 F1 | 	sub	fp, #76
2de7c     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
2de80     4C 4E 05 F1 | 	add	fp, #76
2de84     A7 16 02 FB | 	rdlong	arg03, fp
2de88     03 16 06 F1 | 	add	arg03, #3
2de8c     0B 03 48 FC | 	wrbyte	#1, arg03
2de90     40 4E 85 F1 | 	sub	fp, #64
2de94     A7 12 02 F6 | 	mov	arg01, fp
2de98     0C 4E 85 F1 | 	sub	fp, #12
2de9c     44 BA BF FD | 	call	#_fatfs_cc_dir_register
2dea0     08 4E 05 F1 | 	add	fp, #8
2dea4     A7 FA 61 FC | 	wrlong	result1, fp
2dea8     08 4E 85 F1 | 	sub	fp, #8
2deac                 | LR__4680
2deac                 | LR__4681
2deac     08 4E 05 F1 | 	add	fp, #8
2deb0     A7 FA 09 FB | 	rdlong	result1, fp wz
2deb4     08 4E 85 F1 | 	sub	fp, #8
2deb8     88 00 90 5D |  if_ne	jmp	#LR__4682
2debc     28 4E 05 F1 | 	add	fp, #40
2dec0     A7 12 02 FB | 	rdlong	arg01, fp
2dec4     16 12 06 F1 | 	add	arg01, #22
2dec8     30 4E 05 F1 | 	add	fp, #48
2decc     A7 14 02 FB | 	rdlong	arg02, fp
2ded0     09 15 62 FC | 	wrlong	arg02, arg01
2ded4     0C 4E 85 F1 | 	sub	fp, #12
2ded8     A7 12 02 FB | 	rdlong	arg01, fp
2dedc     24 4E 85 F1 | 	sub	fp, #36
2dee0     A7 14 02 FB | 	rdlong	arg02, fp
2dee4     28 4E 05 F1 | 	add	fp, #40
2dee8     A7 16 02 FB | 	rdlong	arg03, fp
2deec     50 4E 85 F1 | 	sub	fp, #80
2def0     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
2def4     28 4E 05 F1 | 	add	fp, #40
2def8     A7 FA 01 FB | 	rdlong	result1, fp
2defc     0B FA 05 F1 | 	add	result1, #11
2df00     FD 20 48 FC | 	wrbyte	#16, result1
2df04     24 4E 05 F1 | 	add	fp, #36
2df08     A7 FA 01 FB | 	rdlong	result1, fp
2df0c     03 FA 05 F1 | 	add	result1, #3
2df10     FD 02 48 FC | 	wrbyte	#1, result1
2df14     44 4E 85 F1 | 	sub	fp, #68
2df18     A7 FA 09 FB | 	rdlong	result1, fp wz
2df1c     08 4E 85 F1 | 	sub	fp, #8
2df20     3C 00 90 5D |  if_ne	jmp	#LR__4683
2df24     4C 4E 05 F1 | 	add	fp, #76
2df28     A7 12 02 FB | 	rdlong	arg01, fp
2df2c     4C 4E 85 F1 | 	sub	fp, #76
2df30     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
2df34     08 4E 05 F1 | 	add	fp, #8
2df38     A7 FA 61 FC | 	wrlong	result1, fp
2df3c     08 4E 85 F1 | 	sub	fp, #8
2df40     1C 00 90 FD | 	jmp	#LR__4683
2df44                 | LR__4682
2df44     3C 4E 05 F1 | 	add	fp, #60
2df48     A7 12 02 F6 | 	mov	arg01, fp
2df4c     14 4E 05 F1 | 	add	fp, #20
2df50     A7 14 02 FB | 	rdlong	arg02, fp
2df54     50 4E 85 F1 | 	sub	fp, #80
2df58     00 16 06 F6 | 	mov	arg03, #0
2df5c     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
2df60                 | LR__4683
2df60                 | LR__4684
2df60                 | LR__4685
2df60                 | ' 				remove_chain(&sobj, dcl, 0);
2df60                 | ' 			}
2df60                 | ' 		}
2df60                 | ' 		;
2df60                 | ' 	}
2df60                 | ' 
2df60                 | ' 	return res ;
2df60     08 4E 05 F1 | 	add	fp, #8
2df64     A7 FA 01 FB | 	rdlong	result1, fp
2df68     08 4E 85 F1 | 	sub	fp, #8
2df6c     A7 F0 03 F6 | 	mov	ptra, fp
2df70     B2 00 A0 FD | 	call	#popregs_
2df74                 | _fatfs_cc_f_mkdir_ret
2df74     2D 00 64 FD | 	ret
2df78                 | 
2df78                 | _fatfs_cc_f_rename
2df78     01 4A 05 F6 | 	mov	COUNT_, #1
2df7c     A8 00 A0 FD | 	call	#pushregs_
2df80     9C F0 07 F1 | 	add	ptra, #156
2df84     04 4E 05 F1 | 	add	fp, #4
2df88     A7 12 62 FC | 	wrlong	arg01, fp
2df8c     04 4E 05 F1 | 	add	fp, #4
2df90     A7 14 62 FC | 	wrlong	arg02, fp
2df94     A7 12 02 F6 | 	mov	arg01, fp
2df98     08 4E 85 F1 | 	sub	fp, #8
2df9c     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
2dfa0     04 4E 05 F1 | 	add	fp, #4
2dfa4     A7 12 02 F6 | 	mov	arg01, fp
2dfa8     6C 4E 05 F1 | 	add	fp, #108
2dfac     A7 14 02 F6 | 	mov	arg02, fp
2dfb0     70 4E 85 F1 | 	sub	fp, #112
2dfb4     02 16 06 F6 | 	mov	arg03, #2
2dfb8     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
2dfbc     0C 4E 05 F1 | 	add	fp, #12
2dfc0     A7 FA 61 FC | 	wrlong	result1, fp
2dfc4     0C 4E 85 F1 | 	sub	fp, #12
2dfc8     00 FA 0D F2 | 	cmp	result1, #0 wz
2dfcc     44 03 90 5D |  if_ne	jmp	#LR__4703
2dfd0     70 4E 05 F1 | 	add	fp, #112
2dfd4     A7 16 02 FB | 	rdlong	arg03, fp
2dfd8     60 4E 85 F1 | 	sub	fp, #96
2dfdc     A7 16 62 FC | 	wrlong	arg03, fp
2dfe0     A7 12 02 F6 | 	mov	arg01, fp
2dfe4     0C 4E 85 F1 | 	sub	fp, #12
2dfe8     A7 14 02 FB | 	rdlong	arg02, fp
2dfec     04 4E 85 F1 | 	sub	fp, #4
2dff0     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
2dff4     0C 4E 05 F1 | 	add	fp, #12
2dff8     A7 FA 61 FC | 	wrlong	result1, fp
2dffc     00 FA 4D F2 | 	cmps	result1, #0 wz
2e000     0C 4E 85 F1 | 	sub	fp, #12
2e004     1C 00 90 5D |  if_ne	jmp	#LR__4690
2e008     3B 4E 05 F1 | 	add	fp, #59
2e00c     A7 FA C1 FA | 	rdbyte	result1, fp
2e010     3B 4E 85 F1 | 	sub	fp, #59
2e014     A0 FA CD F7 | 	test	result1, #160 wz
2e018     0C 4E 05 51 |  if_ne	add	fp, #12
2e01c     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2e020     0C 4E 85 51 |  if_ne	sub	fp, #12
2e024                 | LR__4690
2e024     0C 4E 05 F1 | 	add	fp, #12
2e028     A7 1E 0A FB | 	rdlong	local01, fp wz
2e02c     0C 4E 85 F1 | 	sub	fp, #12
2e030     E0 02 90 5D |  if_ne	jmp	#LR__4702
2e034     74 4E 05 F1 | 	add	fp, #116
2e038     A7 12 02 F6 | 	mov	arg01, fp
2e03c     48 4E 85 F1 | 	sub	fp, #72
2e040     A7 14 02 FB | 	rdlong	arg02, fp
2e044     2C 4E 85 F1 | 	sub	fp, #44
2e048     20 16 06 F6 | 	mov	arg03, #32
2e04c     34 28 BF FD | 	call	#__system____builtin_memmove
2e050     40 4E 05 F1 | 	add	fp, #64
2e054     A7 12 02 F6 | 	mov	arg01, fp
2e058     30 4E 85 F1 | 	sub	fp, #48
2e05c     A7 14 02 F6 | 	mov	arg02, fp
2e060     10 4E 85 F1 | 	sub	fp, #16
2e064     30 16 06 F6 | 	mov	arg03, #48
2e068     18 28 BF FD | 	call	#__system____builtin_memmove
2e06c     40 4E 05 F1 | 	add	fp, #64
2e070     A7 12 02 F6 | 	mov	arg01, fp
2e074     38 4E 85 F1 | 	sub	fp, #56
2e078     A7 14 02 FB | 	rdlong	arg02, fp
2e07c     08 4E 85 F1 | 	sub	fp, #8
2e080     34 CA BF FD | 	call	#_fatfs_cc_follow_path
2e084     0C 4E 05 F1 | 	add	fp, #12
2e088     A7 FA 61 FC | 	wrlong	result1, fp
2e08c     0C 4E 85 F1 | 	sub	fp, #12
2e090     00 FA 0D F2 | 	cmp	result1, #0 wz
2e094     4C 00 90 5D |  if_ne	jmp	#LR__4693
2e098     48 4E 05 F1 | 	add	fp, #72
2e09c     A7 FA 01 FB | 	rdlong	result1, fp
2e0a0     30 4E 85 F1 | 	sub	fp, #48
2e0a4     A7 16 02 FB | 	rdlong	arg03, fp
2e0a8     18 4E 85 F1 | 	sub	fp, #24
2e0ac     0B FB 09 F2 | 	cmp	result1, arg03 wz
2e0b0     20 00 90 5D |  if_ne	jmp	#LR__4691
2e0b4     50 4E 05 F1 | 	add	fp, #80
2e0b8     A7 FA 01 FB | 	rdlong	result1, fp
2e0bc     30 4E 85 F1 | 	sub	fp, #48
2e0c0     A7 16 02 FB | 	rdlong	arg03, fp
2e0c4     20 4E 85 F1 | 	sub	fp, #32
2e0c8     0B FB 09 F2 | 	cmp	result1, arg03 wz
2e0cc     04 1E 06 A6 |  if_e	mov	local01, #4
2e0d0     04 00 90 AD |  if_e	jmp	#LR__4692
2e0d4                 | LR__4691
2e0d4     08 1E 06 F6 | 	mov	local01, #8
2e0d8                 | LR__4692
2e0d8     0C 4E 05 F1 | 	add	fp, #12
2e0dc     A7 1E 62 FC | 	wrlong	local01, fp
2e0e0     0C 4E 85 F1 | 	sub	fp, #12
2e0e4                 | LR__4693
2e0e4     0C 4E 05 F1 | 	add	fp, #12
2e0e8     A7 1E 02 FB | 	rdlong	local01, fp
2e0ec     0C 4E 85 F1 | 	sub	fp, #12
2e0f0     04 1E 0E F2 | 	cmp	local01, #4 wz
2e0f4     CC 01 90 5D |  if_ne	jmp	#LR__4699
2e0f8     40 4E 05 F1 | 	add	fp, #64
2e0fc     A7 12 02 F6 | 	mov	arg01, fp
2e100     40 4E 85 F1 | 	sub	fp, #64
2e104     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
2e108     0C 4E 05 F1 | 	add	fp, #12
2e10c     A7 FA 61 FC | 	wrlong	result1, fp
2e110     0C 4E 85 F1 | 	sub	fp, #12
2e114     00 FA 0D F2 | 	cmp	result1, #0 wz
2e118     A8 01 90 5D |  if_ne	jmp	#LR__4698
2e11c     5C 4E 05 F1 | 	add	fp, #92
2e120     A7 12 02 FB | 	rdlong	arg01, fp
2e124     38 4E 05 F1 | 	add	fp, #56
2e128     A7 12 62 FC | 	wrlong	arg01, fp
2e12c     0D 12 06 F1 | 	add	arg01, #13
2e130     20 4E 85 F1 | 	sub	fp, #32
2e134     A7 14 02 F6 | 	mov	arg02, fp
2e138     74 4E 85 F1 | 	sub	fp, #116
2e13c     0D 14 06 F1 | 	add	arg02, #13
2e140     13 16 06 F6 | 	mov	arg03, #19
2e144     3C 27 BF FD | 	call	#__system____builtin_memmove
2e148     94 4E 05 F1 | 	add	fp, #148
2e14c     A7 1E 02 FB | 	rdlong	local01, fp
2e150     15 4E 85 F1 | 	sub	fp, #21
2e154     A7 FA C1 FA | 	rdbyte	result1, fp
2e158     0B 1E 06 F1 | 	add	local01, #11
2e15c     0F FB 41 FC | 	wrbyte	result1, local01
2e160     15 4E 05 F1 | 	add	fp, #21
2e164     A7 1E 02 FB | 	rdlong	local01, fp
2e168     94 4E 85 F1 | 	sub	fp, #148
2e16c     0B 1E 06 F1 | 	add	local01, #11
2e170     0F 1F C2 FA | 	rdbyte	local01, local01
2e174     10 1E CE F7 | 	test	local01, #16 wz
2e178     24 00 90 5D |  if_ne	jmp	#LR__4694
2e17c     94 4E 05 F1 | 	add	fp, #148
2e180     A7 FA 01 FB | 	rdlong	result1, fp
2e184     FD 1E 02 F6 | 	mov	local01, result1
2e188     94 4E 85 F1 | 	sub	fp, #148
2e18c     0B FA 05 F1 | 	add	result1, #11
2e190     FD FA C1 FA | 	rdbyte	result1, result1
2e194     20 FA 45 F5 | 	or	result1, #32
2e198     0B 1E 06 F1 | 	add	local01, #11
2e19c     0F FB 41 FC | 	wrbyte	result1, local01
2e1a0                 | LR__4694
2e1a0     70 4E 05 F1 | 	add	fp, #112
2e1a4     A7 1E 02 FB | 	rdlong	local01, fp
2e1a8     03 1E 06 F1 | 	add	local01, #3
2e1ac     0F 03 48 FC | 	wrbyte	#1, local01
2e1b0     24 4E 05 F1 | 	add	fp, #36
2e1b4     A7 1E 02 FB | 	rdlong	local01, fp
2e1b8     94 4E 85 F1 | 	sub	fp, #148
2e1bc     0B 1E 06 F1 | 	add	local01, #11
2e1c0     0F 1F C2 FA | 	rdbyte	local01, local01
2e1c4     10 1E CE F7 | 	test	local01, #16 wz
2e1c8     F8 00 90 AD |  if_e	jmp	#LR__4697
2e1cc     18 4E 05 F1 | 	add	fp, #24
2e1d0     A7 16 02 FB | 	rdlong	arg03, fp
2e1d4     30 4E 05 F1 | 	add	fp, #48
2e1d8     A7 1E 02 FB | 	rdlong	local01, fp
2e1dc     48 4E 85 F1 | 	sub	fp, #72
2e1e0     0F 17 0A F2 | 	cmp	arg03, local01 wz
2e1e4     DC 00 90 AD |  if_e	jmp	#LR__4697
2e1e8     70 4E 05 F1 | 	add	fp, #112
2e1ec     A7 12 02 FB | 	rdlong	arg01, fp
2e1f0     09 1F 02 F6 | 	mov	local01, arg01
2e1f4     24 4E 05 F1 | 	add	fp, #36
2e1f8     A7 14 02 FB | 	rdlong	arg02, fp
2e1fc     94 4E 85 F1 | 	sub	fp, #148
2e200     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
2e204     FD 14 02 F6 | 	mov	arg02, result1
2e208     0F 13 02 F6 | 	mov	arg01, local01
2e20c     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
2e210     98 4E 05 F1 | 	add	fp, #152
2e214     A7 FA 61 FC | 	wrlong	result1, fp
2e218     00 FA 4D F2 | 	cmps	result1, #0 wz
2e21c     98 4E 85 F1 | 	sub	fp, #152
2e220     0C 4E 05 A1 |  if_e	add	fp, #12
2e224     A7 04 68 AC |  if_e	wrlong	#2, fp
2e228     0C 4E 85 A1 |  if_e	sub	fp, #12
2e22c     94 00 90 AD |  if_e	jmp	#LR__4696
2e230     70 4E 05 F1 | 	add	fp, #112
2e234     A7 12 02 FB | 	rdlong	arg01, fp
2e238     28 4E 05 F1 | 	add	fp, #40
2e23c     A7 14 02 FB | 	rdlong	arg02, fp
2e240     98 4E 85 F1 | 	sub	fp, #152
2e244     4C A0 BF FD | 	call	#_fatfs_cc_move_window
2e248     0C 4E 05 F1 | 	add	fp, #12
2e24c     A7 FA 61 FC | 	wrlong	result1, fp
2e250     64 4E 05 F1 | 	add	fp, #100
2e254     A7 1E 02 FB | 	rdlong	local01, fp
2e258     54 1E 06 F1 | 	add	local01, #84
2e25c     24 4E 05 F1 | 	add	fp, #36
2e260     A7 1E 62 FC | 	wrlong	local01, fp
2e264     88 4E 85 F1 | 	sub	fp, #136
2e268     A7 1E 0A FB | 	rdlong	local01, fp wz
2e26c     0C 4E 85 F1 | 	sub	fp, #12
2e270     50 00 90 5D |  if_ne	jmp	#LR__4695
2e274     94 4E 05 F1 | 	add	fp, #148
2e278     A7 1E 02 FB | 	rdlong	local01, fp
2e27c     94 4E 85 F1 | 	sub	fp, #148
2e280     01 1E 06 F1 | 	add	local01, #1
2e284     0F 1F C2 FA | 	rdbyte	local01, local01
2e288     2E 1E 0E F2 | 	cmp	local01, #46 wz
2e28c     34 00 90 5D |  if_ne	jmp	#LR__4695
2e290     70 4E 05 F1 | 	add	fp, #112
2e294     A7 12 02 FB | 	rdlong	arg01, fp
2e298     24 4E 05 F1 | 	add	fp, #36
2e29c     A7 14 02 FB | 	rdlong	arg02, fp
2e2a0     4C 4E 85 F1 | 	sub	fp, #76
2e2a4     A7 16 02 FB | 	rdlong	arg03, fp
2e2a8     48 4E 85 F1 | 	sub	fp, #72
2e2ac     50 AD BF FD | 	call	#_fatfs_cc_st_clust
2e2b0     70 4E 05 F1 | 	add	fp, #112
2e2b4     A7 1E 02 FB | 	rdlong	local01, fp
2e2b8     70 4E 85 F1 | 	sub	fp, #112
2e2bc     03 1E 06 F1 | 	add	local01, #3
2e2c0     0F 03 48 FC | 	wrbyte	#1, local01
2e2c4                 | LR__4695
2e2c4                 | LR__4696
2e2c4                 | LR__4697
2e2c4                 | LR__4698
2e2c4                 | LR__4699
2e2c4     0C 4E 05 F1 | 	add	fp, #12
2e2c8     A7 1E 0A FB | 	rdlong	local01, fp wz
2e2cc     0C 4E 85 F1 | 	sub	fp, #12
2e2d0     40 00 90 5D |  if_ne	jmp	#LR__4701
2e2d4     10 4E 05 F1 | 	add	fp, #16
2e2d8     A7 12 02 F6 | 	mov	arg01, fp
2e2dc     10 4E 85 F1 | 	sub	fp, #16
2e2e0     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
2e2e4     0C 4E 05 F1 | 	add	fp, #12
2e2e8     A7 FA 61 FC | 	wrlong	result1, fp
2e2ec     0C 4E 85 F1 | 	sub	fp, #12
2e2f0     00 FA 0D F2 | 	cmp	result1, #0 wz
2e2f4     1C 00 90 5D |  if_ne	jmp	#LR__4700
2e2f8     70 4E 05 F1 | 	add	fp, #112
2e2fc     A7 12 02 FB | 	rdlong	arg01, fp
2e300     70 4E 85 F1 | 	sub	fp, #112
2e304     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
2e308     0C 4E 05 F1 | 	add	fp, #12
2e30c     A7 FA 61 FC | 	wrlong	result1, fp
2e310     0C 4E 85 F1 | 	sub	fp, #12
2e314                 | LR__4700
2e314                 | LR__4701
2e314                 | LR__4702
2e314                 | LR__4703
2e314                 | ' 					res = sync_fs(fs);
2e314                 | ' 				}
2e314                 | ' 			}
2e314                 | ' 
2e314                 | ' 		}
2e314                 | ' 		;
2e314                 | ' 	}
2e314                 | ' 
2e314                 | ' 	return res ;
2e314     0C 4E 05 F1 | 	add	fp, #12
2e318     A7 FA 01 FB | 	rdlong	result1, fp
2e31c     0C 4E 85 F1 | 	sub	fp, #12
2e320     A7 F0 03 F6 | 	mov	ptra, fp
2e324     B2 00 A0 FD | 	call	#popregs_
2e328                 | _fatfs_cc_f_rename_ret
2e328     2D 00 64 FD | 	ret
2e32c                 | 
2e32c                 | _fatfs_cc_time
2e32c     00 4A 05 F6 | 	mov	COUNT_, #0
2e330     A8 00 A0 FD | 	call	#pushregs_
2e334     14 F0 07 F1 | 	add	ptra, #20
2e338     04 4E 05 F1 | 	add	fp, #4
2e33c     A7 12 62 FC | 	wrlong	arg01, fp
2e340     04 4E 05 F1 | 	add	fp, #4
2e344     A7 12 02 F6 | 	mov	arg01, fp
2e348     08 4E 85 F1 | 	sub	fp, #8
2e34c     00 14 06 F6 | 	mov	arg02, #0
2e350     10 18 B0 FD | 	call	#_fatfs_cc_gettimeofday
2e354     08 4E 05 F1 | 	add	fp, #8
2e358     A7 FA 01 FB | 	rdlong	result1, fp
2e35c     08 4E 05 F1 | 	add	fp, #8
2e360     A7 FA 61 FC | 	wrlong	result1, fp
2e364     0C 4E 85 F1 | 	sub	fp, #12
2e368     A7 FA 09 FB | 	rdlong	result1, fp wz
2e36c     04 4E 85 F1 | 	sub	fp, #4
2e370     18 00 90 AD |  if_e	jmp	#LR__4710
2e374     04 4E 05 F1 | 	add	fp, #4
2e378     A7 FA 01 FB | 	rdlong	result1, fp
2e37c     0C 4E 05 F1 | 	add	fp, #12
2e380     A7 14 02 FB | 	rdlong	arg02, fp
2e384     10 4E 85 F1 | 	sub	fp, #16
2e388     FD 14 62 FC | 	wrlong	arg02, result1
2e38c                 | LR__4710
2e38c                 | '         *tp = now;
2e38c                 | '     return now;
2e38c     10 4E 05 F1 | 	add	fp, #16
2e390     A7 FA 01 FB | 	rdlong	result1, fp
2e394     10 4E 85 F1 | 	sub	fp, #16
2e398     A7 F0 03 F6 | 	mov	ptra, fp
2e39c     B2 00 A0 FD | 	call	#popregs_
2e3a0                 | _fatfs_cc_time_ret
2e3a0     2D 00 64 FD | 	ret
2e3a4                 | 
2e3a4                 | _fatfs_cc_mktime
2e3a4     06 4A 05 F6 | 	mov	COUNT_, #6
2e3a8     A8 00 A0 FD | 	call	#pushregs_
2e3ac     09 1F 02 F6 | 	mov	local01, arg01
2e3b0     14 1E 06 F1 | 	add	local01, #20
2e3b4     0F 13 02 FB | 	rdlong	arg01, local01
2e3b8     14 1E 86 F1 | 	sub	local01, #20
2e3bc     46 12 56 F2 | 	cmps	arg01, #70 wc
2e3c0                 | '                 return (time_t) -1;
2e3c0     01 FA 65 C6 |  if_b	neg	result1, #1
2e3c4     7C 01 90 CD |  if_b	jmp	#LR__4724
2e3c8     03 00 00 FF 
2e3cc     6C 21 06 F6 | 	mov	local02, ##1900
2e3d0     14 1E 06 F1 | 	add	local01, #20
2e3d4     0F FB 01 FB | 	rdlong	result1, local01
2e3d8     FD 20 02 F1 | 	add	local02, result1
2e3dc     08 1E 86 F1 | 	sub	local01, #8
2e3e0     0F 23 02 FB | 	rdlong	local03, local01
2e3e4     01 22 86 F1 | 	sub	local03, #1
2e3e8     04 1E 06 F1 | 	add	local01, #4
2e3ec     0F 13 02 FB | 	rdlong	arg01, local01
2e3f0     10 1E 86 F1 | 	sub	local01, #16
2e3f4     02 12 66 F0 | 	shl	arg01, #2
2e3f8     02 00 00 FF 
2e3fc     C8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
2e400     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2e404     09 FB 01 FB | 	rdlong	result1, arg01
2e408     FD 22 02 F1 | 	add	local03, result1
2e40c     10 13 02 F6 | 	mov	arg01, local02
2e410     02 00 00 FF 
2e414     C8 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
2e418     F0 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
2e41c     00 FA 0D F2 | 	cmp	result1, #0 wz
2e420     1C 00 90 AD |  if_e	jmp	#LR__4720
2e424     00 24 06 F6 | 	mov	local04, #0
2e428     10 1E 06 F1 | 	add	local01, #16
2e42c     0F FB 01 FB | 	rdlong	result1, local01
2e430     10 1E 86 F1 | 	sub	local01, #16
2e434     02 FA 55 F2 | 	cmps	result1, #2 wc
2e438     01 24 06 36 |  if_ae	mov	local04, #1
2e43c     04 00 90 FD | 	jmp	#LR__4721
2e440                 | LR__4720
2e440     00 24 06 F6 | 	mov	local04, #0
2e444                 | LR__4721
2e444     04 1E 06 F1 | 	add	local01, #4
2e448     0F FB 01 FB | 	rdlong	result1, local01
2e44c     04 1E 86 F1 | 	sub	local01, #4
2e450     0F 27 02 FB | 	rdlong	local05, local01
2e454     08 1E 06 F1 | 	add	local01, #8
2e458     0F 13 02 FB | 	rdlong	arg01, local01
2e45c     07 00 00 FF 
2e460     10 12 06 FD | 	qmul	arg01, ##3600
2e464     12 23 02 F1 | 	add	local03, local04
2e468     FD 24 02 F6 | 	mov	local04, result1
2e46c     04 24 66 F0 | 	shl	local04, #4
2e470     FD 24 82 F1 | 	sub	local04, result1
2e474     02 24 66 F0 | 	shl	local04, #2
2e478     12 27 02 F1 | 	add	local05, local04
2e47c     08 1E 86 F1 | 	sub	local01, #8
2e480     18 24 62 FD | 	getqx	local04
2e484     A8 00 00 FF 
2e488     80 23 06 FD | 	qmul	local03, ##86400
2e48c     12 27 02 F1 | 	add	local05, local04
2e490     10 23 02 F6 | 	mov	local03, local02
2e494     03 00 00 FF 
2e498     B2 23 86 F1 | 	sub	local03, ##1970
2e49c     18 24 62 FD | 	getqx	local04
2e4a0     99 F0 00 FF 
2e4a4     80 23 06 FD | 	qmul	local03, ##31536000
2e4a8     12 27 02 F1 | 	add	local05, local04
2e4ac     10 23 02 F6 | 	mov	local03, local02
2e4b0     03 00 00 FF 
2e4b4     B1 23 86 F1 | 	sub	local03, ##1969
2e4b8     11 29 52 F6 | 	abs	local06, local03 wc
2e4bc     02 28 46 F0 | 	shr	local06, #2
2e4c0     14 29 82 F6 | 	negc	local06, local06
2e4c4     03 00 00 FF 
2e4c8     D1 21 56 F2 | 	cmps	local02, ##2001 wc
2e4cc     18 24 62 FD | 	getqx	local04
2e4d0     12 27 02 F1 | 	add	local05, local04
2e4d4     18 00 90 CD |  if_b	jmp	#LR__4722
2e4d8     03 00 00 FF 
2e4dc     D0 21 86 F1 | 	sub	local02, ##2000
2e4e0     10 25 52 F6 | 	abs	local04, local02 wc
2e4e4     64 24 16 FD | 	qdiv	local04, #100
2e4e8     18 24 62 FD | 	getqx	local04
2e4ec     12 29 A2 F3 | 	sumnc	local06, local04
2e4f0                 | LR__4722
2e4f0     A8 00 00 FF 
2e4f4     80 29 06 FD | 	qmul	local06, ##86400
2e4f8     18 28 62 FD | 	getqx	local06
2e4fc     14 27 02 F1 | 	add	local05, local06
2e500     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
2e504     02 00 00 FF 
2e508     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
2e50c     F6 28 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
2e510     14 27 02 F1 | 	add	local05, local06
2e514     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
2e518     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
2e51c     02 00 00 FF 
2e520     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
2e524     01 22 0E F2 | 	cmp	local03, #1 wz
2e528     14 00 90 5D |  if_ne	jmp	#LR__4723
2e52c     0F 13 02 F6 | 	mov	arg01, local01
2e530     DC 19 B0 FD | 	call	#_fatfs_cc___indst
2e534     00 FA 0D F2 | 	cmp	result1, #0 wz
2e538     07 00 00 5F 
2e53c     10 26 86 51 |  if_ne	sub	local05, ##3600
2e540                 | LR__4723
2e540                 | '                 s -=  (3600L) ;
2e540                 | ' 
2e540                 | '         return s;
2e540     13 FB 01 F6 | 	mov	result1, local05
2e544                 | LR__4724
2e544     A7 F0 03 F6 | 	mov	ptra, fp
2e548     B2 00 A0 FD | 	call	#popregs_
2e54c                 | _fatfs_cc_mktime_ret
2e54c     2D 00 64 FD | 	ret
2e550                 | 
2e550                 | _fatfs_cc__gmtime_r
2e550     03 4A 05 F6 | 	mov	COUNT_, #3
2e554     A8 00 A0 FD | 	call	#pushregs_
2e558     09 1F 02 FB | 	rdlong	local01, arg01
2e55c     A8 00 00 FF 
2e560     80 1F 16 FD | 	qdiv	local01, ##86400
2e564     18 FA 61 FD | 	getqx	result1
2e568     04 FA 05 F1 | 	add	result1, #4
2e56c     07 FA 15 FD | 	qdiv	result1, #7
2e570     18 14 06 F1 | 	add	arg02, #24
2e574     D1 7F 27 FF 
2e578     00 1E 16 F2 | 	cmp	local01, ##1325376000 wc
2e57c     D1 7F 27 3F 
2e580     00 1E 86 31 |  if_ae	sub	local01, ##1325376000
2e584     03 00 00 3F 
2e588     DC 21 06 36 |  if_ae	mov	local02, ##2012
2e58c     03 00 00 CF 
2e590     B2 21 06 C6 |  if_b	mov	local02, ##1970
2e594                 | ' 	  year = 1970;
2e594                 | ' 	}
2e594                 | ' 
2e594                 | ' 	for(;;) {
2e594     19 FA 61 FD | 	getqy	result1
2e598     0A FB 61 FC | 	wrlong	result1, arg02
2e59c     18 14 86 F1 | 	sub	arg02, #24
2e5a0                 | LR__4730
2e5a0     10 13 02 F6 | 	mov	arg01, local02
2e5a4     64 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
2e5a8     00 FA 0D F2 | 	cmp	result1, #0 wz
2e5ac     42 F1 00 5F 
2e5b0     00 23 06 56 |  if_ne	mov	local03, ##31622400
2e5b4     99 F0 00 AF 
2e5b8     80 23 06 A6 |  if_e	mov	local03, ##31536000
2e5bc     11 1F 12 F2 | 	cmp	local01, local03 wc
2e5c0                 | ' 	    break;
2e5c0     01 20 06 31 |  if_ae	add	local02, #1
2e5c4     11 1F 82 31 |  if_ae	sub	local01, local03
2e5c8     D4 FF 9F 3D |  if_ae	jmp	#LR__4730
2e5cc     A8 00 00 FF 
2e5d0     80 1F 16 FD | 	qdiv	local01, ##86400
2e5d4     10 23 02 F6 | 	mov	local03, local02
2e5d8     03 00 00 FF 
2e5dc     6C 23 86 F1 | 	sub	local03, ##1900
2e5e0     14 14 06 F1 | 	add	arg02, #20
2e5e4     0A 23 62 FC | 	wrlong	local03, arg02
2e5e8     08 14 06 F1 | 	add	arg02, #8
2e5ec     10 13 02 F6 | 	mov	arg01, local02
2e5f0     18 20 62 FD | 	getqx	local02
2e5f4     0A 21 62 FC | 	wrlong	local02, arg02
2e5f8     1C 14 86 F1 | 	sub	arg02, #28
2e5fc     0C 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
2e600     00 FA 0D F2 | 	cmp	result1, #0 wz
2e604     1D 22 06 56 |  if_ne	mov	local03, #29
2e608     1C 22 06 A6 |  if_e	mov	local03, #28
2e60c     02 00 00 FF 
2e610     9C EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
2e614     F6 22 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
2e618     02 00 00 FF 
2e61c     9C EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
2e620                 | ' 
2e620                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
2e620                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
2e620     00 12 06 F6 | 	mov	arg01, #0
2e624     97 2A 48 FB | 	callpa	#(@LR__4732-@LR__4731)>>2,fcache_load_ptr_
2e628                 | LR__4731
2e628     09 23 02 F6 | 	mov	local03, arg01
2e62c     02 22 66 F0 | 	shl	local03, #2
2e630     02 00 00 FF 
2e634     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
2e638     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
2e63c     11 23 02 FB | 	rdlong	local03, local03
2e640     11 21 52 F2 | 	cmps	local02, local03 wc
2e644     02 00 00 FF 
2e648     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
2e64c     2C 00 90 CD |  if_b	jmp	#LR__4733
2e650     09 23 02 F6 | 	mov	local03, arg01
2e654     02 22 66 F0 | 	shl	local03, #2
2e658     02 00 00 FF 
2e65c     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
2e660     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
2e664     11 23 02 FB | 	rdlong	local03, local03
2e668     11 21 82 F1 | 	sub	local02, local03
2e66c     01 12 06 F1 | 	add	arg01, #1
2e670     02 00 00 FF 
2e674     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
2e678     AC FF 9F FD | 	jmp	#LR__4731
2e67c                 | LR__4732
2e67c                 | LR__4733
2e67c     A8 00 00 FF 
2e680     80 1F 16 FD | 	qdiv	local01, ##86400
2e684     10 14 06 F1 | 	add	arg02, #16
2e688     0A 13 62 FC | 	wrlong	arg01, arg02
2e68c     01 20 06 F1 | 	add	local02, #1
2e690     04 14 86 F1 | 	sub	arg02, #4
2e694     0A 21 62 FC | 	wrlong	local02, arg02
2e698     19 1E 62 FD | 	getqy	local01
2e69c     07 00 00 FF 
2e6a0     10 1E 16 FD | 	qdiv	local01, ##3600
2e6a4     18 22 62 FD | 	getqx	local03
2e6a8     07 00 00 FF 
2e6ac     10 1E 16 FD | 	qdiv	local01, ##3600
2e6b0     04 14 86 F1 | 	sub	arg02, #4
2e6b4     0A 23 62 FC | 	wrlong	local03, arg02
2e6b8     19 1E 62 FD | 	getqy	local01
2e6bc     3C 1E 16 FD | 	qdiv	local01, #60
2e6c0     18 22 62 FD | 	getqx	local03
2e6c4     3C 1E 16 FD | 	qdiv	local01, #60
2e6c8     04 14 86 F1 | 	sub	arg02, #4
2e6cc     0A 23 62 FC | 	wrlong	local03, arg02
2e6d0     04 14 86 F1 | 	sub	arg02, #4
2e6d4                 | '         stm->tm_isdst = 0;
2e6d4                 | ' 
2e6d4                 | ' ;
2e6d4                 | '         return stm;
2e6d4     0A FB 01 F6 | 	mov	result1, arg02
2e6d8     19 22 62 FD | 	getqy	local03
2e6dc     0A 23 62 FC | 	wrlong	local03, arg02
2e6e0     20 14 06 F1 | 	add	arg02, #32
2e6e4     0A 01 68 FC | 	wrlong	#0, arg02
2e6e8     A7 F0 03 F6 | 	mov	ptra, fp
2e6ec     B2 00 A0 FD | 	call	#popregs_
2e6f0                 | _fatfs_cc__gmtime_r_ret
2e6f0     2D 00 64 FD | 	ret
2e6f4                 | 
2e6f4                 | _fatfs_cc__tzset
2e6f4     81 01 00 FF 
2e6f8     39 12 06 F6 | 	mov	arg01, ##@LR__5045
2e6fc     34 00 B0 FD | 	call	#_fatfs_cc_getenv
2e700     FD 12 02 F6 | 	mov	arg01, result1
2e704     02 00 00 FF 
2e708     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
2e70c     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
2e710     02 00 00 FF 
2e714     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
2e718     40 15 B0 FD | 	call	#_fatfs_cc___tzoffset
2e71c     02 00 00 FF 
2e720     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
2e724     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
2e728     02 00 00 FF 
2e72c     94 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
2e730                 | _fatfs_cc__tzset_ret
2e730     2D 00 64 FD | 	ret
2e734                 | 
2e734                 | _fatfs_cc_getenv
2e734     06 4A 05 F6 | 	mov	COUNT_, #6
2e738     A8 00 A0 FD | 	call	#pushregs_
2e73c     09 1F 02 F6 | 	mov	local01, arg01
2e740     09 21 02 F6 | 	mov	local02, arg01
2e744     97 06 48 FB | 	callpa	#(@LR__4741-@LR__4740)>>2,fcache_load_ptr_
2e748                 | LR__4740
2e748     10 FB C9 FA | 	rdbyte	result1, local02 wz
2e74c     01 20 06 51 |  if_ne	add	local02, #1
2e750     F4 FF 9F 5D |  if_ne	jmp	#LR__4740
2e754                 | LR__4741
2e754     09 21 82 F1 | 	sub	local02, arg01
2e758     10 FB 01 F6 | 	mov	result1, local02
2e75c     02 00 00 FF 
2e760     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
2e764     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
2e768     02 00 00 FF 
2e76c     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
2e770                 | '             return 0;
2e770     00 FA 05 A6 |  if_e	mov	result1, #0
2e774     5C 00 90 AD |  if_e	jmp	#LR__4744
2e778                 | ' 
2e778                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
2e778     02 00 00 FF 
2e77c     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
2e780     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
2e784     02 00 00 FF 
2e788     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
2e78c                 | LR__4742
2e78c     11 25 0A FB | 	rdlong	local04, local03 wz
2e790     3C 00 90 AD |  if_e	jmp	#LR__4743
2e794     12 13 02 F6 | 	mov	arg01, local04
2e798     0F 15 02 F6 | 	mov	arg02, local01
2e79c     10 17 02 F6 | 	mov	arg03, local02
2e7a0     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
2e7a4     00 FA 0D F2 | 	cmp	result1, #0 wz
2e7a8     10 27 02 A6 |  if_e	mov	local05, local02
2e7ac     12 27 02 A1 |  if_e	add	local05, local04
2e7b0     13 29 C2 AA |  if_e	rdbyte	local06, local05
2e7b4     3D 28 0E A2 |  if_e	cmp	local06, #61 wz
2e7b8                 | ' 			return name+len+1;
2e7b8     10 25 02 A1 |  if_e	add	local04, local02
2e7bc     01 24 06 A1 |  if_e	add	local04, #1
2e7c0     12 FB 01 A6 |  if_e	mov	result1, local04
2e7c4     0C 00 90 AD |  if_e	jmp	#LR__4744
2e7c8     04 22 06 F1 | 	add	local03, #4
2e7cc     BC FF 9F FD | 	jmp	#LR__4742
2e7d0                 | LR__4743
2e7d0                 | ' 	}
2e7d0                 | ' 	return 0;
2e7d0     00 FA 05 F6 | 	mov	result1, #0
2e7d4                 | LR__4744
2e7d4     A7 F0 03 F6 | 	mov	ptra, fp
2e7d8     B2 00 A0 FD | 	call	#popregs_
2e7dc                 | _fatfs_cc_getenv_ret
2e7dc     2D 00 64 FD | 	ret
2e7e0                 | 
2e7e0                 | _fatfs_cc__get_fattime
2e7e0     00 4A 05 F6 | 	mov	COUNT_, #0
2e7e4     A8 00 A0 FD | 	call	#pushregs_
2e7e8     34 F0 07 F1 | 	add	ptra, #52
2e7ec     00 12 06 F6 | 	mov	arg01, #0
2e7f0     38 FB BF FD | 	call	#_fatfs_cc_time
2e7f4     04 4E 05 F1 | 	add	fp, #4
2e7f8     A7 FA 61 FC | 	wrlong	result1, fp
2e7fc     A7 12 02 F6 | 	mov	arg01, fp
2e800     0C 4E 05 F1 | 	add	fp, #12
2e804     A7 14 02 F6 | 	mov	arg02, fp
2e808     10 4E 85 F1 | 	sub	fp, #16
2e80c     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
2e810     24 4E 05 F1 | 	add	fp, #36
2e814     A7 14 02 FB | 	rdlong	arg02, fp
2e818     50 14 86 F1 | 	sub	arg02, #80
2e81c     09 14 66 F0 | 	shl	arg02, #9
2e820     04 4E 85 F1 | 	sub	fp, #4
2e824     A7 FA 01 FB | 	rdlong	result1, fp
2e828     01 FA 05 F1 | 	add	result1, #1
2e82c     05 FA 65 F0 | 	shl	result1, #5
2e830     FD 14 42 F5 | 	or	arg02, result1
2e834     04 4E 85 F1 | 	sub	fp, #4
2e838     A7 FA 01 FB | 	rdlong	result1, fp
2e83c     FD 14 42 F5 | 	or	arg02, result1
2e840     14 4E 85 F1 | 	sub	fp, #20
2e844     A7 14 62 FC | 	wrlong	arg02, fp
2e848     10 4E 05 F1 | 	add	fp, #16
2e84c     A7 14 02 FB | 	rdlong	arg02, fp
2e850     0B 14 66 F0 | 	shl	arg02, #11
2e854     04 4E 85 F1 | 	sub	fp, #4
2e858     A7 FA 01 FB | 	rdlong	result1, fp
2e85c     05 FA 65 F0 | 	shl	result1, #5
2e860     FD 14 42 F5 | 	or	arg02, result1
2e864     04 4E 85 F1 | 	sub	fp, #4
2e868     A7 FA 01 FB | 	rdlong	result1, fp
2e86c     FD 14 42 F5 | 	or	arg02, result1
2e870     04 4E 85 F1 | 	sub	fp, #4
2e874     A7 14 62 FC | 	wrlong	arg02, fp
2e878                 | ' 
2e878                 | '     now = time(0);
2e878                 | '     _gmtime_r (&now, &date);
2e878                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
2e878                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
2e878                 | '     return (ffdate << 16) | fftime;
2e878     04 4E 85 F1 | 	sub	fp, #4
2e87c     A7 FA 01 FB | 	rdlong	result1, fp
2e880     10 FA 65 F0 | 	shl	result1, #16
2e884     08 4E 85 F1 | 	sub	fp, #8
2e888     0A FB 41 F5 | 	or	result1, arg02
2e88c     A7 F0 03 F6 | 	mov	ptra, fp
2e890     B2 00 A0 FD | 	call	#popregs_
2e894                 | _fatfs_cc__get_fattime_ret
2e894     2D 00 64 FD | 	ret
2e898                 | 
2e898                 | _fatfs_cc_unixtime_0960
2e898     00 4A 05 F6 | 	mov	COUNT_, #0
2e89c     A8 00 A0 FD | 	call	#pushregs_
2e8a0     34 F0 07 F1 | 	add	ptra, #52
2e8a4     04 4E 05 F1 | 	add	fp, #4
2e8a8     A7 12 62 FC | 	wrlong	arg01, fp
2e8ac     04 4E 05 F1 | 	add	fp, #4
2e8b0     A7 14 62 FC | 	wrlong	arg02, fp
2e8b4     04 4E 85 F1 | 	sub	fp, #4
2e8b8     A7 14 02 FB | 	rdlong	arg02, fp
2e8bc     09 14 46 F0 | 	shr	arg02, #9
2e8c0     7F 14 06 F5 | 	and	arg02, #127
2e8c4     50 FA 05 F6 | 	mov	result1, #80
2e8c8     0A FB 01 F1 | 	add	result1, arg02
2e8cc     20 4E 05 F1 | 	add	fp, #32
2e8d0     A7 FA 61 FC | 	wrlong	result1, fp
2e8d4     20 4E 85 F1 | 	sub	fp, #32
2e8d8     A7 FA 01 FB | 	rdlong	result1, fp
2e8dc     05 FA 45 F0 | 	shr	result1, #5
2e8e0     FD FA 41 F8 | 	getnib	result1, result1, #0
2e8e4     01 FA 85 F1 | 	sub	result1, #1
2e8e8     1C 4E 05 F1 | 	add	fp, #28
2e8ec     A7 FA 61 FC | 	wrlong	result1, fp
2e8f0     1C 4E 85 F1 | 	sub	fp, #28
2e8f4     A7 FA 01 FB | 	rdlong	result1, fp
2e8f8     1F FA 05 F5 | 	and	result1, #31
2e8fc     18 4E 05 F1 | 	add	fp, #24
2e900     A7 FA 61 FC | 	wrlong	result1, fp
2e904     14 4E 85 F1 | 	sub	fp, #20
2e908     A7 FA 01 FB | 	rdlong	result1, fp
2e90c     0B FA 45 F0 | 	shr	result1, #11
2e910     1F FA 05 F5 | 	and	result1, #31
2e914     10 4E 05 F1 | 	add	fp, #16
2e918     A7 FA 61 FC | 	wrlong	result1, fp
2e91c     10 4E 85 F1 | 	sub	fp, #16
2e920     A7 FA 01 FB | 	rdlong	result1, fp
2e924     05 FA 45 F0 | 	shr	result1, #5
2e928     3F FA 05 F5 | 	and	result1, #63
2e92c     0C 4E 05 F1 | 	add	fp, #12
2e930     A7 FA 61 FC | 	wrlong	result1, fp
2e934     0C 4E 85 F1 | 	sub	fp, #12
2e938     A7 14 02 FB | 	rdlong	arg02, fp
2e93c     1F 14 06 F5 | 	and	arg02, #31
2e940     01 14 66 F0 | 	shl	arg02, #1
2e944     08 4E 05 F1 | 	add	fp, #8
2e948     A7 14 62 FC | 	wrlong	arg02, fp
2e94c     A7 12 02 F6 | 	mov	arg01, fp
2e950     10 4E 85 F1 | 	sub	fp, #16
2e954     4C FA BF FD | 	call	#_fatfs_cc_mktime
2e958     0C 4E 05 F1 | 	add	fp, #12
2e95c     A7 FA 61 FC | 	wrlong	result1, fp
2e960                 | ' 
2e960                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
2e960                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
2e960                 | '     date.tm_mday = (dosdate & 0x1f);
2e960                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
2e960                 | '     date.tm_min = (dostime >> 5) & 0x3f;
2e960                 | '     date.tm_sec = (dostime & 0x1f) << 1;
2e960                 | ' 
2e960                 | '     t = mktime(&date);
2e960                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
2e960                 | '     return t;
2e960     0C 4E 85 F1 | 	sub	fp, #12
2e964     A7 F0 03 F6 | 	mov	ptra, fp
2e968     B2 00 A0 FD | 	call	#popregs_
2e96c                 | _fatfs_cc_unixtime_0960_ret
2e96c     2D 00 64 FD | 	ret
2e970                 | 
2e970                 | _fatfs_cc__set_dos_error_0962
2e970     09 01 02 F6 | 	mov	_var01, arg01
2e974                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
2e974                 | '     switch (derr) {
2e974     14 00 26 F3 | 	fle	_var01, #20
2e978     30 00 62 FD | 	jmprel	_var01
2e97c                 | LR__4750
2e97c     50 00 90 FD | 	jmp	#LR__4751
2e980     84 00 90 FD | 	jmp	#LR__4765
2e984     80 00 90 FD | 	jmp	#LR__4766
2e988     7C 00 90 FD | 	jmp	#LR__4767
2e98c     48 00 90 FD | 	jmp	#LR__4752
2e990     44 00 90 FD | 	jmp	#LR__4753
2e994     40 00 90 FD | 	jmp	#LR__4754
2e998     44 00 90 FD | 	jmp	#LR__4755
2e99c     48 00 90 FD | 	jmp	#LR__4757
2e9a0     54 00 90 FD | 	jmp	#LR__4760
2e9a4     38 00 90 FD | 	jmp	#LR__4756
2e9a8     4C 00 90 FD | 	jmp	#LR__4761
2e9ac     48 00 90 FD | 	jmp	#LR__4762
2e9b0     44 00 90 FD | 	jmp	#LR__4763
2e9b4     50 00 90 FD | 	jmp	#LR__4768
2e9b8     4C 00 90 FD | 	jmp	#LR__4768
2e9bc     48 00 90 FD | 	jmp	#LR__4768
2e9c0     2C 00 90 FD | 	jmp	#LR__4758
2e9c4     38 00 90 FD | 	jmp	#LR__4764
2e9c8     2C 00 90 FD | 	jmp	#LR__4759
2e9cc     38 00 90 FD | 	jmp	#LR__4768
2e9d0                 | LR__4751
2e9d0     00 02 06 F6 | 	mov	_var02, #0
2e9d4                 | '         r = 0;
2e9d4                 | '         break;
2e9d4     34 00 90 FD | 	jmp	#LR__4769
2e9d8                 | LR__4752
2e9d8                 | LR__4753
2e9d8                 | LR__4754
2e9d8     04 02 06 F6 | 	mov	_var02, #4
2e9dc                 | '         r =  4 ;
2e9dc                 | '         break;
2e9dc     2C 00 90 FD | 	jmp	#LR__4769
2e9e0                 | LR__4755
2e9e0                 | LR__4756
2e9e0     06 02 06 F6 | 	mov	_var02, #6
2e9e4                 | '         r =  6 ;
2e9e4                 | '         break;
2e9e4     24 00 90 FD | 	jmp	#LR__4769
2e9e8                 | LR__4757
2e9e8     09 02 06 F6 | 	mov	_var02, #9
2e9ec                 | '         r =  9 ;
2e9ec                 | '         break;
2e9ec     1C 00 90 FD | 	jmp	#LR__4769
2e9f0                 | LR__4758
2e9f0     07 02 06 F6 | 	mov	_var02, #7
2e9f4                 | '         r =  7 ;
2e9f4                 | '         break;
2e9f4     14 00 90 FD | 	jmp	#LR__4769
2e9f8                 | LR__4759
2e9f8                 | LR__4760
2e9f8                 | LR__4761
2e9f8                 | LR__4762
2e9f8                 | LR__4763
2e9f8     0A 02 06 F6 | 	mov	_var02, #10
2e9fc                 | '         r =  10 ;
2e9fc                 | '         break;
2e9fc     0C 00 90 FD | 	jmp	#LR__4769
2ea00                 | LR__4764
2ea00     0B 02 06 F6 | 	mov	_var02, #11
2ea04                 | '         r =  11 ;
2ea04                 | '         break;
2ea04     04 00 90 FD | 	jmp	#LR__4769
2ea08                 | LR__4765
2ea08                 | LR__4766
2ea08                 | LR__4767
2ea08                 | LR__4768
2ea08     0C 02 06 F6 | 	mov	_var02, #12
2ea0c                 | '         r =  12 ;
2ea0c                 | '         break;
2ea0c                 | LR__4769
2ea0c                 | '     }
2ea0c                 | '     return _seterror(r);
2ea0c     00 02 4E F2 | 	cmps	_var02, #0 wz
2ea10     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2ea14     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
2ea18     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2ea1c     01 FA 65 56 |  if_ne	neg	result1, #1
2ea20     00 FA 05 A6 |  if_e	mov	result1, #0
2ea24                 | _fatfs_cc__set_dos_error_0962_ret
2ea24     2D 00 64 FD | 	ret
2ea28                 | 
2ea28                 | _fatfs_cc_v_creat
2ea28     04 4A 05 F6 | 	mov	COUNT_, #4
2ea2c     A8 00 A0 FD | 	call	#pushregs_
2ea30     09 1F 02 F6 | 	mov	local01, arg01
2ea34     0A 21 02 F6 | 	mov	local02, arg02
2ea38     03 00 00 FF 
2ea3c     3C 12 06 F6 | 	mov	arg01, ##1596
2ea40                 | '     return _gc_alloc(size);
2ea40     10 14 06 F6 | 	mov	arg02, #16
2ea44     28 5E BF FD | 	call	#__system___gc_doalloc
2ea48     FD 22 0A F6 | 	mov	local03, result1 wz
2ea4c                 | '       return _seterror( 7 );
2ea4c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2ea50     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2ea54     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2ea58     01 FA 65 A6 |  if_e	neg	result1, #1
2ea5c     58 00 90 AD |  if_e	jmp	#LR__4771
2ea60     11 13 02 F6 | 	mov	arg01, local03
2ea64     00 14 06 F6 | 	mov	arg02, #0
2ea68     03 00 00 FF 
2ea6c     3C 16 06 F6 | 	mov	arg03, ##1596
2ea70     98 00 A0 FD | 	call	#\builtin_bytefill_
2ea74     02 00 00 FF 
2ea78     14 22 06 F1 | 	add	local03, ##1044
2ea7c     11 13 02 F6 | 	mov	arg01, local03
2ea80     02 00 00 FF 
2ea84     14 22 86 F1 | 	sub	local03, ##1044
2ea88     10 15 02 F6 | 	mov	arg02, local02
2ea8c     07 16 06 F6 | 	mov	arg03, #7
2ea90     B4 CC BF FD | 	call	#_fatfs_cc_f_open
2ea94     FD 24 0A F6 | 	mov	local04, result1 wz
2ea98     14 00 90 AD |  if_e	jmp	#LR__4770
2ea9c     11 13 02 F6 | 	mov	arg01, local03
2eaa0                 | '     return _gc_free(ptr);
2eaa0     D8 5E BF FD | 	call	#__system___gc_free
2eaa4                 | '     free(f);
2eaa4                 | '     return _set_dos_error(r);
2eaa4     12 13 02 F6 | 	mov	arg01, local04
2eaa8     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2eaac     08 00 90 FD | 	jmp	#LR__4771
2eab0                 | LR__4770
2eab0     0F 23 62 FC | 	wrlong	local03, local01
2eab4                 | '   }
2eab4                 | '   fil->vfsdata = f;
2eab4                 | '   return 0;
2eab4     00 FA 05 F6 | 	mov	result1, #0
2eab8                 | LR__4771
2eab8     A7 F0 03 F6 | 	mov	ptra, fp
2eabc     B2 00 A0 FD | 	call	#popregs_
2eac0                 | _fatfs_cc_v_creat_ret
2eac0     2D 00 64 FD | 	ret
2eac4                 | 
2eac4                 | _fatfs_cc_v_close
2eac4     02 4A 05 F6 | 	mov	COUNT_, #2
2eac8     A8 00 A0 FD | 	call	#pushregs_
2eacc     09 1F 02 FB | 	rdlong	local01, arg01
2ead0     02 00 00 FF 
2ead4     14 1E 06 F1 | 	add	local01, ##1044
2ead8     0F 13 02 F6 | 	mov	arg01, local01
2eadc     02 00 00 FF 
2eae0     14 1E 86 F1 | 	sub	local01, ##1044
2eae4     DC E3 BF FD | 	call	#_fatfs_cc_f_close
2eae8     FD 20 02 F6 | 	mov	local02, result1
2eaec     0F 13 02 F6 | 	mov	arg01, local01
2eaf0                 | '     return _gc_free(ptr);
2eaf0     88 5E BF FD | 	call	#__system___gc_free
2eaf4                 | '     FAT_FIL *f = fil->vfsdata;
2eaf4                 | '     r=f_close(&f->fil);
2eaf4                 | '     free(f);
2eaf4                 | '     return _set_dos_error(r);
2eaf4     10 13 02 F6 | 	mov	arg01, local02
2eaf8     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2eafc     A7 F0 03 F6 | 	mov	ptra, fp
2eb00     B2 00 A0 FD | 	call	#popregs_
2eb04                 | _fatfs_cc_v_close_ret
2eb04     2D 00 64 FD | 	ret
2eb08                 | 
2eb08                 | _fatfs_cc_v_opendir
2eb08     04 4A 05 F6 | 	mov	COUNT_, #4
2eb0c     A8 00 A0 FD | 	call	#pushregs_
2eb10     09 1F 02 F6 | 	mov	local01, arg01
2eb14     0A 21 02 F6 | 	mov	local02, arg02
2eb18     30 12 06 F6 | 	mov	arg01, #48
2eb1c                 | '     return _gc_alloc(size);
2eb1c     10 14 06 F6 | 	mov	arg02, #16
2eb20     4C 5D BF FD | 	call	#__system___gc_doalloc
2eb24     FD 22 0A F6 | 	mov	local03, result1 wz
2eb28                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
2eb28                 | '       return _seterror( 7 );
2eb28     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2eb2c     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2eb30     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2eb34     01 FA 65 A6 |  if_e	neg	result1, #1
2eb38     34 00 90 AD |  if_e	jmp	#LR__4781
2eb3c     10 15 02 F6 | 	mov	arg02, local02
2eb40     11 13 02 F6 | 	mov	arg01, local03
2eb44     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
2eb48     FD 24 0A F6 | 	mov	local04, result1 wz
2eb4c     14 00 90 AD |  if_e	jmp	#LR__4780
2eb50     11 13 02 F6 | 	mov	arg01, local03
2eb54                 | '     return _gc_free(ptr);
2eb54     24 5E BF FD | 	call	#__system___gc_free
2eb58                 | '         free(f);
2eb58                 | '         return _set_dos_error(r);
2eb58     12 13 02 F6 | 	mov	arg01, local04
2eb5c     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2eb60     0C 00 90 FD | 	jmp	#LR__4781
2eb64                 | LR__4780
2eb64     04 1E 06 F1 | 	add	local01, #4
2eb68     0F 23 62 FC | 	wrlong	local03, local01
2eb6c                 | '     }
2eb6c                 | '     dir->vfsdata = f;
2eb6c                 | '     return 0;
2eb6c     00 FA 05 F6 | 	mov	result1, #0
2eb70                 | LR__4781
2eb70     A7 F0 03 F6 | 	mov	ptra, fp
2eb74     B2 00 A0 FD | 	call	#popregs_
2eb78                 | _fatfs_cc_v_opendir_ret
2eb78     2D 00 64 FD | 	ret
2eb7c                 | 
2eb7c                 | _fatfs_cc_v_closedir
2eb7c     02 4A 05 F6 | 	mov	COUNT_, #2
2eb80     A8 00 A0 FD | 	call	#pushregs_
2eb84     04 12 06 F1 | 	add	arg01, #4
2eb88     09 1F 02 FB | 	rdlong	local01, arg01
2eb8c     0F 13 02 F6 | 	mov	arg01, local01
2eb90     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
2eb94     FD 20 02 F6 | 	mov	local02, result1
2eb98     0F 13 02 F6 | 	mov	arg01, local01
2eb9c                 | '     return _gc_free(ptr);
2eb9c     DC 5D BF FD | 	call	#__system___gc_free
2eba0     00 20 0E F2 | 	cmp	local02, #0 wz
2eba4     10 13 02 56 |  if_ne	mov	arg01, local02
2eba8     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_0962
2ebac                 | '     return r;
2ebac     10 FB 01 F6 | 	mov	result1, local02
2ebb0     A7 F0 03 F6 | 	mov	ptra, fp
2ebb4     B2 00 A0 FD | 	call	#popregs_
2ebb8                 | _fatfs_cc_v_closedir_ret
2ebb8     2D 00 64 FD | 	ret
2ebbc                 | 
2ebbc                 | _fatfs_cc_v_readdir
2ebbc     01 4A 05 F6 | 	mov	COUNT_, #1
2ebc0     A8 00 A0 FD | 	call	#pushregs_
2ebc4     2C F1 07 F1 | 	add	ptra, #300
2ebc8     04 4E 05 F1 | 	add	fp, #4
2ebcc     A7 12 62 FC | 	wrlong	arg01, fp
2ebd0     04 4E 05 F1 | 	add	fp, #4
2ebd4     A7 14 62 FC | 	wrlong	arg02, fp
2ebd8     04 4E 85 F1 | 	sub	fp, #4
2ebdc     A7 16 02 FB | 	rdlong	arg03, fp
2ebe0     04 16 06 F1 | 	add	arg03, #4
2ebe4     0B 13 02 FB | 	rdlong	arg01, arg03
2ebe8     08 4E 05 F1 | 	add	fp, #8
2ebec     A7 14 02 F6 | 	mov	arg02, fp
2ebf0     0C 4E 85 F1 | 	sub	fp, #12
2ebf4     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
2ebf8     28 4F 05 F1 | 	add	fp, #296
2ebfc     A7 FA 61 FC | 	wrlong	result1, fp
2ec00     28 4F 85 F1 | 	sub	fp, #296
2ec04     00 FA 0D F2 | 	cmp	result1, #0 wz
2ec08     14 00 90 AD |  if_e	jmp	#LR__4790
2ec0c                 | '         return _set_dos_error(r);
2ec0c     28 4F 05 F1 | 	add	fp, #296
2ec10     A7 12 02 FB | 	rdlong	arg01, fp
2ec14     28 4F 85 F1 | 	sub	fp, #296
2ec18     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2ec1c     C4 00 90 FD | 	jmp	#LR__4793
2ec20                 | LR__4790
2ec20     28 4E 05 F1 | 	add	fp, #40
2ec24     A7 16 CA FA | 	rdbyte	arg03, fp wz
2ec28     28 4E 85 F1 | 	sub	fp, #40
2ec2c                 | '         return -1;
2ec2c     01 FA 65 A6 |  if_e	neg	result1, #1
2ec30     B0 00 90 AD |  if_e	jmp	#LR__4793
2ec34     08 4E 05 F1 | 	add	fp, #8
2ec38     A7 12 02 FB | 	rdlong	arg01, fp
2ec3c     20 4E 05 F1 | 	add	fp, #32
2ec40     A7 14 02 F6 | 	mov	arg02, fp
2ec44     28 4E 85 F1 | 	sub	fp, #40
2ec48     3F 16 06 F6 | 	mov	arg03, #63
2ec4c     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
2ec50     08 4E 05 F1 | 	add	fp, #8
2ec54     A7 16 02 FB | 	rdlong	arg03, fp
2ec58     3F 16 06 F1 | 	add	arg03, #63
2ec5c     0B 01 48 FC | 	wrbyte	#0, arg03
2ec60     0C 4E 05 F1 | 	add	fp, #12
2ec64     A7 16 C2 FA | 	rdbyte	arg03, fp
2ec68     14 4E 85 F1 | 	sub	fp, #20
2ec6c     10 16 CE F7 | 	test	arg03, #16 wz
2ec70     18 00 90 AD |  if_e	jmp	#LR__4791
2ec74     08 4E 05 F1 | 	add	fp, #8
2ec78     A7 16 02 FB | 	rdlong	arg03, fp
2ec7c     08 4E 85 F1 | 	sub	fp, #8
2ec80     50 16 06 F1 | 	add	arg03, #80
2ec84     0B 03 48 FC | 	wrbyte	#1, arg03
2ec88     14 00 90 FD | 	jmp	#LR__4792
2ec8c                 | LR__4791
2ec8c     08 4E 05 F1 | 	add	fp, #8
2ec90     A7 16 02 FB | 	rdlong	arg03, fp
2ec94     08 4E 85 F1 | 	sub	fp, #8
2ec98     50 16 06 F1 | 	add	arg03, #80
2ec9c     0B 01 48 FC | 	wrbyte	#0, arg03
2eca0                 | LR__4792
2eca0     08 4E 05 F1 | 	add	fp, #8
2eca4     A7 16 02 FB | 	rdlong	arg03, fp
2eca8     04 4E 05 F1 | 	add	fp, #4
2ecac     A7 14 02 FB | 	rdlong	arg02, fp
2ecb0     48 16 06 F1 | 	add	arg03, #72
2ecb4     0B 15 62 FC | 	wrlong	arg02, arg03
2ecb8     04 4E 85 F1 | 	sub	fp, #4
2ecbc     A7 1E 02 FB | 	rdlong	local01, fp
2ecc0     08 4E 05 F1 | 	add	fp, #8
2ecc4     A7 12 E2 FA | 	rdword	arg01, fp
2ecc8     02 4E 05 F1 | 	add	fp, #2
2eccc     A7 14 E2 FA | 	rdword	arg02, fp
2ecd0     12 4E 85 F1 | 	sub	fp, #18
2ecd4     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_0960
2ecd8     4C 1E 06 F1 | 	add	local01, #76
2ecdc     0F FB 61 FC | 	wrlong	result1, local01
2ece0                 | '         ent->d_type =  (0) ;
2ece0                 | '     }
2ece0                 | '     ent->d_size = finfo.fsize;
2ece0                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
2ece0                 | '     return 0;
2ece0     00 FA 05 F6 | 	mov	result1, #0
2ece4                 | LR__4793
2ece4     A7 F0 03 F6 | 	mov	ptra, fp
2ece8     B2 00 A0 FD | 	call	#popregs_
2ecec                 | _fatfs_cc_v_readdir_ret
2ecec     2D 00 64 FD | 	ret
2ecf0                 | 
2ecf0                 | _fatfs_cc_v_stat
2ecf0     03 4A 05 F6 | 	mov	COUNT_, #3
2ecf4     A8 00 A0 FD | 	call	#pushregs_
2ecf8     30 F1 07 F1 | 	add	ptra, #304
2ecfc     04 4E 05 F1 | 	add	fp, #4
2ed00     A7 12 62 FC | 	wrlong	arg01, fp
2ed04     04 4E 05 F1 | 	add	fp, #4
2ed08     A7 14 62 FC | 	wrlong	arg02, fp
2ed0c     08 4E 85 F1 | 	sub	fp, #8
2ed10     0A 13 02 F6 | 	mov	arg01, arg02
2ed14     00 14 06 F6 | 	mov	arg02, #0
2ed18     30 16 06 F6 | 	mov	arg03, #48
2ed1c     98 00 A0 FD | 	call	#\builtin_bytefill_
2ed20     04 4E 05 F1 | 	add	fp, #4
2ed24     A7 FA 01 FB | 	rdlong	result1, fp
2ed28     04 4E 85 F1 | 	sub	fp, #4
2ed2c     FD FA C9 FA | 	rdbyte	result1, result1 wz
2ed30     2C 00 90 AD |  if_e	jmp	#LR__4800
2ed34     04 4E 05 F1 | 	add	fp, #4
2ed38     A7 FA 01 FB | 	rdlong	result1, fp
2ed3c     04 4E 85 F1 | 	sub	fp, #4
2ed40     FD FA C1 FA | 	rdbyte	result1, result1
2ed44     2E FA 0D F2 | 	cmp	result1, #46 wz
2ed48     04 4E 05 A1 |  if_e	add	fp, #4
2ed4c     A7 1E 02 AB |  if_e	rdlong	local01, fp
2ed50     04 4E 85 A1 |  if_e	sub	fp, #4
2ed54     01 1E 06 A1 |  if_e	add	local01, #1
2ed58     0F 21 CA AA |  if_e	rdbyte	local02, local01 wz
2ed5c     18 00 90 5D |  if_ne	jmp	#LR__4801
2ed60                 | LR__4800
2ed60     18 4E 05 F1 | 	add	fp, #24
2ed64     A7 20 48 FC | 	wrbyte	#16, fp
2ed68     0C 4E 85 F1 | 	sub	fp, #12
2ed6c     A7 00 68 FC | 	wrlong	#0, fp
2ed70     0C 4E 85 F1 | 	sub	fp, #12
2ed74     24 00 90 FD | 	jmp	#LR__4802
2ed78                 | LR__4801
2ed78     04 4E 05 F1 | 	add	fp, #4
2ed7c     A7 12 02 FB | 	rdlong	arg01, fp
2ed80     0C 4E 05 F1 | 	add	fp, #12
2ed84     A7 14 02 F6 | 	mov	arg02, fp
2ed88     10 4E 85 F1 | 	sub	fp, #16
2ed8c     AC EB BF FD | 	call	#_fatfs_cc_f_stat
2ed90     0C 4E 05 F1 | 	add	fp, #12
2ed94     A7 FA 61 FC | 	wrlong	result1, fp
2ed98     0C 4E 85 F1 | 	sub	fp, #12
2ed9c                 | LR__4802
2ed9c     0C 4E 05 F1 | 	add	fp, #12
2eda0     A7 20 0A FB | 	rdlong	local02, fp wz
2eda4     0C 4E 85 F1 | 	sub	fp, #12
2eda8     14 00 90 AD |  if_e	jmp	#LR__4803
2edac                 | '         return _set_dos_error(r);
2edac     0C 4E 05 F1 | 	add	fp, #12
2edb0     A7 12 02 FB | 	rdlong	arg01, fp
2edb4     0C 4E 85 F1 | 	sub	fp, #12
2edb8     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2edbc     14 01 90 FD | 	jmp	#LR__4804
2edc0                 | LR__4803
2edc0     2C 4F 05 F1 | 	add	fp, #300
2edc4     A7 48 6A FC | 	wrlong	#292, fp
2edc8     14 4F 85 F1 | 	sub	fp, #276
2edcc     A7 22 C2 FA | 	rdbyte	local03, fp
2edd0     18 4E 85 F1 | 	sub	fp, #24
2edd4     01 22 CE F7 | 	test	local03, #1 wz
2edd8     2C 4F 05 A1 |  if_e	add	fp, #300
2eddc     A7 22 02 AB |  if_e	rdlong	local03, fp
2ede0     92 22 46 A5 |  if_e	or	local03, #146
2ede4     A7 22 62 AC |  if_e	wrlong	local03, fp
2ede8     2C 4F 85 A1 |  if_e	sub	fp, #300
2edec     18 4E 05 F1 | 	add	fp, #24
2edf0     A7 22 C2 FA | 	rdbyte	local03, fp
2edf4     18 4E 85 F1 | 	sub	fp, #24
2edf8     10 22 CE F7 | 	test	local03, #16 wz
2edfc     2C 4F 05 51 |  if_ne	add	fp, #300
2ee00     A7 22 02 5B |  if_ne	rdlong	local03, fp
2ee04     08 00 00 5F 
2ee08     49 22 46 55 |  if_ne	or	local03, ##4169
2ee0c     A7 22 62 5C |  if_ne	wrlong	local03, fp
2ee10     2C 4F 85 51 |  if_ne	sub	fp, #300
2ee14     08 4E 05 F1 | 	add	fp, #8
2ee18     A7 22 02 FB | 	rdlong	local03, fp
2ee1c     24 4F 05 F1 | 	add	fp, #292
2ee20     A7 20 02 FB | 	rdlong	local02, fp
2ee24     08 22 06 F1 | 	add	local03, #8
2ee28     11 21 62 FC | 	wrlong	local02, local03
2ee2c     24 4F 85 F1 | 	sub	fp, #292
2ee30     A7 22 02 FB | 	rdlong	local03, fp
2ee34     0C 22 06 F1 | 	add	local03, #12
2ee38     11 03 68 FC | 	wrlong	#1, local03
2ee3c     A7 22 02 FB | 	rdlong	local03, fp
2ee40     08 4E 05 F1 | 	add	fp, #8
2ee44     A7 20 02 FB | 	rdlong	local02, fp
2ee48     18 22 06 F1 | 	add	local03, #24
2ee4c     11 21 62 FC | 	wrlong	local02, local03
2ee50     08 4E 85 F1 | 	sub	fp, #8
2ee54     A7 22 02 FB | 	rdlong	local03, fp
2ee58     1C 22 06 F1 | 	add	local03, #28
2ee5c     01 00 80 FF 
2ee60     11 01 68 FC | 	wrlong	##512, local03
2ee64     A7 20 02 FB | 	rdlong	local02, fp
2ee68     10 23 02 F6 | 	mov	local03, local02
2ee6c     18 20 06 F1 | 	add	local02, #24
2ee70     10 21 02 FB | 	rdlong	local02, local02
2ee74     FF 21 06 F1 | 	add	local02, #511
2ee78     10 21 52 F6 | 	abs	local02, local02 wc
2ee7c     09 20 46 F0 | 	shr	local02, #9
2ee80     10 21 82 F6 | 	negc	local02, local02
2ee84     20 22 06 F1 | 	add	local03, #32
2ee88     11 21 62 FC | 	wrlong	local02, local03
2ee8c     A7 20 02 FB | 	rdlong	local02, fp
2ee90     10 23 02 F6 | 	mov	local03, local02
2ee94     10 1F 02 F6 | 	mov	local01, local02
2ee98     0C 4E 05 F1 | 	add	fp, #12
2ee9c     A7 12 E2 FA | 	rdword	arg01, fp
2eea0     02 4E 05 F1 | 	add	fp, #2
2eea4     A7 14 E2 FA | 	rdword	arg02, fp
2eea8     16 4E 85 F1 | 	sub	fp, #22
2eeac     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_0960
2eeb0     2C 1E 06 F1 | 	add	local01, #44
2eeb4     0F FB 61 FC | 	wrlong	result1, local01
2eeb8     28 20 06 F1 | 	add	local02, #40
2eebc     10 FB 61 FC | 	wrlong	result1, local02
2eec0     24 22 06 F1 | 	add	local03, #36
2eec4     11 FB 61 FC | 	wrlong	result1, local03
2eec8                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
2eec8                 | '     }
2eec8                 | '     buf->st_mode = mode;
2eec8                 | '     buf->st_nlink = 1;
2eec8                 | '     buf->st_size = finfo.fsize;
2eec8                 | '     buf->st_blksize = 512;
2eec8                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
2eec8                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
2eec8                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
2eec8                 | '     return r;
2eec8     0C 4E 05 F1 | 	add	fp, #12
2eecc     A7 FA 01 FB | 	rdlong	result1, fp
2eed0     0C 4E 85 F1 | 	sub	fp, #12
2eed4                 | LR__4804
2eed4     A7 F0 03 F6 | 	mov	ptra, fp
2eed8     B2 00 A0 FD | 	call	#popregs_
2eedc                 | _fatfs_cc_v_stat_ret
2eedc     2D 00 64 FD | 	ret
2eee0                 | 
2eee0                 | _fatfs_cc_v_read
2eee0     00 4A 05 F6 | 	mov	COUNT_, #0
2eee4     A8 00 A0 FD | 	call	#pushregs_
2eee8     1C F0 07 F1 | 	add	ptra, #28
2eeec     04 4E 05 F1 | 	add	fp, #4
2eef0     A7 12 62 FC | 	wrlong	arg01, fp
2eef4     04 4E 05 F1 | 	add	fp, #4
2eef8     A7 14 62 FC | 	wrlong	arg02, fp
2eefc     04 4E 05 F1 | 	add	fp, #4
2ef00     A7 16 62 FC | 	wrlong	arg03, fp
2ef04     08 4E 85 F1 | 	sub	fp, #8
2ef08     A7 12 02 FB | 	rdlong	arg01, fp
2ef0c     09 13 0A FB | 	rdlong	arg01, arg01 wz
2ef10     0C 4E 05 F1 | 	add	fp, #12
2ef14     A7 12 62 FC | 	wrlong	arg01, fp
2ef18     10 4E 85 F1 | 	sub	fp, #16
2ef1c                 | '         return _seterror( 5 );
2ef1c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2ef20     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2ef24     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2ef28     01 FA 65 A6 |  if_e	neg	result1, #1
2ef2c     B8 00 90 AD |  if_e	jmp	#LR__4812
2ef30     10 4E 05 F1 | 	add	fp, #16
2ef34     A7 12 02 FB | 	rdlong	arg01, fp
2ef38     02 00 00 FF 
2ef3c     14 12 06 F1 | 	add	arg01, ##1044
2ef40     08 4E 85 F1 | 	sub	fp, #8
2ef44     A7 14 02 FB | 	rdlong	arg02, fp
2ef48     04 4E 05 F1 | 	add	fp, #4
2ef4c     A7 16 02 FB | 	rdlong	arg03, fp
2ef50     0C 4E 05 F1 | 	add	fp, #12
2ef54     A7 18 02 F6 | 	mov	arg04, fp
2ef58     18 4E 85 F1 | 	sub	fp, #24
2ef5c     C4 CE BF FD | 	call	#_fatfs_cc_f_read
2ef60     14 4E 05 F1 | 	add	fp, #20
2ef64     A7 FA 61 FC | 	wrlong	result1, fp
2ef68     14 4E 85 F1 | 	sub	fp, #20
2ef6c     00 FA 0D F2 | 	cmp	result1, #0 wz
2ef70     34 00 90 AD |  if_e	jmp	#LR__4810
2ef74     04 4E 05 F1 | 	add	fp, #4
2ef78     A7 18 02 FB | 	rdlong	arg04, fp
2ef7c     0C 17 02 F6 | 	mov	arg03, arg04
2ef80     08 18 06 F1 | 	add	arg04, #8
2ef84     0C 19 02 FB | 	rdlong	arg04, arg04
2ef88     20 18 46 F5 | 	or	arg04, #32
2ef8c     08 16 06 F1 | 	add	arg03, #8
2ef90     0B 19 62 FC | 	wrlong	arg04, arg03
2ef94                 | '         fil->state |=  (0x20) ;
2ef94                 | '         return _set_dos_error(r);
2ef94     10 4E 05 F1 | 	add	fp, #16
2ef98     A7 12 02 FB | 	rdlong	arg01, fp
2ef9c     14 4E 85 F1 | 	sub	fp, #20
2efa0     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2efa4     40 00 90 FD | 	jmp	#LR__4812
2efa8                 | LR__4810
2efa8     18 4E 05 F1 | 	add	fp, #24
2efac     A7 FA 09 FB | 	rdlong	result1, fp wz
2efb0     18 4E 85 F1 | 	sub	fp, #24
2efb4     24 00 90 5D |  if_ne	jmp	#LR__4811
2efb8     04 4E 05 F1 | 	add	fp, #4
2efbc     A7 FA 01 FB | 	rdlong	result1, fp
2efc0     FD 18 02 F6 | 	mov	arg04, result1
2efc4     04 4E 85 F1 | 	sub	fp, #4
2efc8     08 FA 05 F1 | 	add	result1, #8
2efcc     FD FA 01 FB | 	rdlong	result1, result1
2efd0     10 FA 45 F5 | 	or	result1, #16
2efd4     08 18 06 F1 | 	add	arg04, #8
2efd8     0C FB 61 FC | 	wrlong	result1, arg04
2efdc                 | LR__4811
2efdc                 | '         fil->state |=  (0x10) ;
2efdc                 | '     }
2efdc                 | '     return x;
2efdc     18 4E 05 F1 | 	add	fp, #24
2efe0     A7 FA 01 FB | 	rdlong	result1, fp
2efe4     18 4E 85 F1 | 	sub	fp, #24
2efe8                 | LR__4812
2efe8     A7 F0 03 F6 | 	mov	ptra, fp
2efec     B2 00 A0 FD | 	call	#popregs_
2eff0                 | _fatfs_cc_v_read_ret
2eff0     2D 00 64 FD | 	ret
2eff4                 | 
2eff4                 | _fatfs_cc_v_write
2eff4     00 4A 05 F6 | 	mov	COUNT_, #0
2eff8     A8 00 A0 FD | 	call	#pushregs_
2effc     1C F0 07 F1 | 	add	ptra, #28
2f000     04 4E 05 F1 | 	add	fp, #4
2f004     A7 12 62 FC | 	wrlong	arg01, fp
2f008     04 4E 05 F1 | 	add	fp, #4
2f00c     A7 14 62 FC | 	wrlong	arg02, fp
2f010     04 4E 05 F1 | 	add	fp, #4
2f014     A7 16 62 FC | 	wrlong	arg03, fp
2f018     08 4E 85 F1 | 	sub	fp, #8
2f01c     A7 12 02 FB | 	rdlong	arg01, fp
2f020     09 13 0A FB | 	rdlong	arg01, arg01 wz
2f024     0C 4E 05 F1 | 	add	fp, #12
2f028     A7 12 62 FC | 	wrlong	arg01, fp
2f02c     10 4E 85 F1 | 	sub	fp, #16
2f030                 | '         return _seterror( 5 );
2f030     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2f034     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2f038     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2f03c     01 FA 65 A6 |  if_e	neg	result1, #1
2f040     84 00 90 AD |  if_e	jmp	#LR__4821
2f044     10 4E 05 F1 | 	add	fp, #16
2f048     A7 12 02 FB | 	rdlong	arg01, fp
2f04c     02 00 00 FF 
2f050     14 12 06 F1 | 	add	arg01, ##1044
2f054     08 4E 85 F1 | 	sub	fp, #8
2f058     A7 14 02 FB | 	rdlong	arg02, fp
2f05c     04 4E 05 F1 | 	add	fp, #4
2f060     A7 16 02 FB | 	rdlong	arg03, fp
2f064     0C 4E 05 F1 | 	add	fp, #12
2f068     A7 18 02 F6 | 	mov	arg04, fp
2f06c     18 4E 85 F1 | 	sub	fp, #24
2f070     4C D4 BF FD | 	call	#_fatfs_cc_f_write
2f074     14 4E 05 F1 | 	add	fp, #20
2f078     A7 FA 61 FC | 	wrlong	result1, fp
2f07c     14 4E 85 F1 | 	sub	fp, #20
2f080     00 FA 0D F2 | 	cmp	result1, #0 wz
2f084     34 00 90 AD |  if_e	jmp	#LR__4820
2f088     04 4E 05 F1 | 	add	fp, #4
2f08c     A7 18 02 FB | 	rdlong	arg04, fp
2f090     0C 17 02 F6 | 	mov	arg03, arg04
2f094     08 18 06 F1 | 	add	arg04, #8
2f098     0C 19 02 FB | 	rdlong	arg04, arg04
2f09c     20 18 46 F5 | 	or	arg04, #32
2f0a0     08 16 06 F1 | 	add	arg03, #8
2f0a4     0B 19 62 FC | 	wrlong	arg04, arg03
2f0a8                 | '         fil->state |=  (0x20) ;
2f0a8                 | '         return _set_dos_error(r);
2f0a8     10 4E 05 F1 | 	add	fp, #16
2f0ac     A7 12 02 FB | 	rdlong	arg01, fp
2f0b0     14 4E 85 F1 | 	sub	fp, #20
2f0b4     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2f0b8     0C 00 90 FD | 	jmp	#LR__4821
2f0bc                 | LR__4820
2f0bc                 | '     }
2f0bc                 | '     return x;
2f0bc     18 4E 05 F1 | 	add	fp, #24
2f0c0     A7 FA 01 FB | 	rdlong	result1, fp
2f0c4     18 4E 85 F1 | 	sub	fp, #24
2f0c8                 | LR__4821
2f0c8     A7 F0 03 F6 | 	mov	ptra, fp
2f0cc     B2 00 A0 FD | 	call	#popregs_
2f0d0                 | _fatfs_cc_v_write_ret
2f0d0     2D 00 64 FD | 	ret
2f0d4                 | 
2f0d4                 | _fatfs_cc_v_lseek
2f0d4     04 4A 05 F6 | 	mov	COUNT_, #4
2f0d8     A8 00 A0 FD | 	call	#pushregs_
2f0dc     0A 1F 02 F6 | 	mov	local01, arg02
2f0e0     0B 21 02 F6 | 	mov	local02, arg03
2f0e4     09 23 02 FB | 	rdlong	local03, arg01
2f0e8     02 00 00 FF 
2f0ec     14 22 0E F1 | 	add	local03, ##1044 wz
2f0f0                 | '         return _seterror( 5 );
2f0f0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2f0f4     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2f0f8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2f0fc     01 FA 65 A6 |  if_e	neg	result1, #1
2f100     4C 00 90 AD |  if_e	jmp	#LR__4832
2f104     00 20 0E F2 | 	cmp	local02, #0 wz
2f108     24 00 90 AD |  if_e	jmp	#LR__4830
2f10c     01 20 0E F2 | 	cmp	local02, #1 wz
2f110     14 22 06 A1 |  if_e	add	local03, #20
2f114     11 25 02 AB |  if_e	rdlong	local04, local03
2f118     14 22 86 A1 |  if_e	sub	local03, #20
2f11c     12 1F 02 A1 |  if_e	add	local01, local04
2f120     0C 22 06 51 |  if_ne	add	local03, #12
2f124     11 25 02 5B |  if_ne	rdlong	local04, local03
2f128     0C 22 86 51 |  if_ne	sub	local03, #12
2f12c     12 1F 02 51 |  if_ne	add	local01, local04
2f130                 | LR__4830
2f130     0F 15 02 F6 | 	mov	arg02, local01
2f134     11 13 02 F6 | 	mov	arg01, local03
2f138     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
2f13c     FD 12 0A F6 | 	mov	arg01, result1 wz
2f140     08 00 90 AD |  if_e	jmp	#LR__4831
2f144                 | '         return _set_dos_error(result);
2f144     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2f148     04 00 90 FD | 	jmp	#LR__4832
2f14c                 | LR__4831
2f14c                 | '     }
2f14c                 | '     return offset;
2f14c     0F FB 01 F6 | 	mov	result1, local01
2f150                 | LR__4832
2f150     A7 F0 03 F6 | 	mov	ptra, fp
2f154     B2 00 A0 FD | 	call	#popregs_
2f158                 | _fatfs_cc_v_lseek_ret
2f158     2D 00 64 FD | 	ret
2f15c                 | 
2f15c                 | _fatfs_cc_v_ioctl
2f15c                 | ' {
2f15c                 | '     return _seterror( 10 );
2f15c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2f160     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
2f164     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2f168     01 FA 65 F6 | 	neg	result1, #1
2f16c                 | _fatfs_cc_v_ioctl_ret
2f16c     2D 00 64 FD | 	ret
2f170                 | 
2f170                 | _fatfs_cc_v_mkdir
2f170     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
2f174     FD 12 02 F6 | 	mov	arg01, result1
2f178                 | ' 
2f178                 | '     r = f_mkdir(name);
2f178                 | '     return _set_dos_error(r);
2f178     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2f17c                 | _fatfs_cc_v_mkdir_ret
2f17c     2D 00 64 FD | 	ret
2f180                 | 
2f180                 | _fatfs_cc_v_remove
2f180     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
2f184     FD 12 02 F6 | 	mov	arg01, result1
2f188                 | ' 
2f188                 | '     r = f_unlink(name);
2f188                 | '     return _set_dos_error(r);
2f188     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2f18c                 | _fatfs_cc_v_remove_ret
2f18c     2D 00 64 FD | 	ret
2f190                 | 
2f190                 | _fatfs_cc_v_rmdir
2f190     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
2f194     FD 12 02 F6 | 	mov	arg01, result1
2f198                 | ' 
2f198                 | '     r = f_unlink(name);
2f198                 | '     return _set_dos_error(r);
2f198     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2f19c                 | _fatfs_cc_v_rmdir_ret
2f19c     2D 00 64 FD | 	ret
2f1a0                 | 
2f1a0                 | _fatfs_cc_v_rename
2f1a0     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
2f1a4     FD 12 02 F6 | 	mov	arg01, result1
2f1a8                 | '     return _set_dos_error(r);
2f1a8     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2f1ac                 | _fatfs_cc_v_rename_ret
2f1ac     2D 00 64 FD | 	ret
2f1b0                 | 
2f1b0                 | _fatfs_cc_v_open
2f1b0     07 4A 05 F6 | 	mov	COUNT_, #7
2f1b4     A8 00 A0 FD | 	call	#pushregs_
2f1b8     09 1F 02 F6 | 	mov	local01, arg01
2f1bc     0A 21 02 F6 | 	mov	local02, arg02
2f1c0     0B 23 02 F6 | 	mov	local03, arg03
2f1c4     03 00 00 FF 
2f1c8     3C 12 06 F6 | 	mov	arg01, ##1596
2f1cc                 | '     return _gc_alloc(size);
2f1cc     10 14 06 F6 | 	mov	arg02, #16
2f1d0     9C 56 BF FD | 	call	#__system___gc_doalloc
2f1d4     FD 24 0A F6 | 	mov	local04, result1 wz
2f1d8                 | '       return _seterror( 7 );
2f1d8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2f1dc     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2f1e0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2f1e4     01 FA 65 A6 |  if_e	neg	result1, #1
2f1e8     98 00 90 AD |  if_e	jmp	#LR__4846
2f1ec     12 13 02 F6 | 	mov	arg01, local04
2f1f0     00 14 06 F6 | 	mov	arg02, #0
2f1f4     03 00 00 FF 
2f1f8     3C 16 06 F6 | 	mov	arg03, ##1596
2f1fc     98 00 A0 FD | 	call	#\builtin_bytefill_
2f200                 | '   switch (flags & 3) {
2f200     11 27 02 F6 | 	mov	local05, local03
2f204     03 26 0E F5 | 	and	local05, #3 wz
2f208     0C 00 90 AD |  if_e	jmp	#LR__4840
2f20c     01 26 0E F2 | 	cmp	local05, #1 wz
2f210     0C 00 90 AD |  if_e	jmp	#LR__4841
2f214     10 00 90 FD | 	jmp	#LR__4842
2f218                 | LR__4840
2f218     01 28 06 F6 | 	mov	local06, #1
2f21c                 | '       fs_flags =  0x01 ;
2f21c                 | '       break;
2f21c     0C 00 90 FD | 	jmp	#LR__4843
2f220                 | LR__4841
2f220     02 28 06 F6 | 	mov	local06, #2
2f224                 | '       fs_flags =  0x02 ;
2f224                 | '       break;
2f224     04 00 90 FD | 	jmp	#LR__4843
2f228                 | LR__4842
2f228     03 28 06 F6 | 	mov	local06, #3
2f22c                 | '       fs_flags =  0x01  |  0x02 ;
2f22c                 | '       break;
2f22c                 | LR__4843
2f22c     08 22 CE F7 | 	test	local03, #8 wz
2f230     18 28 46 55 |  if_ne	or	local06, #24
2f234     08 00 90 5D |  if_ne	jmp	#LR__4844
2f238     20 22 CE F7 | 	test	local03, #32 wz
2f23c     30 28 46 55 |  if_ne	or	local06, #48
2f240                 | LR__4844
2f240     02 00 00 FF 
2f244     14 24 06 F1 | 	add	local04, ##1044
2f248     12 13 02 F6 | 	mov	arg01, local04
2f24c     02 00 00 FF 
2f250     14 24 86 F1 | 	sub	local04, ##1044
2f254     10 15 02 F6 | 	mov	arg02, local02
2f258     14 17 02 F6 | 	mov	arg03, local06
2f25c     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
2f260     FD 2A 0A F6 | 	mov	local07, result1 wz
2f264     14 00 90 AD |  if_e	jmp	#LR__4845
2f268     12 13 02 F6 | 	mov	arg01, local04
2f26c                 | '     return _gc_free(ptr);
2f26c     0C 57 BF FD | 	call	#__system___gc_free
2f270                 | '     free(f);
2f270                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
2f270                 | '     return _set_dos_error(r);
2f270     15 13 02 F6 | 	mov	arg01, local07
2f274     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2f278     08 00 90 FD | 	jmp	#LR__4846
2f27c                 | LR__4845
2f27c     0F 25 62 FC | 	wrlong	local04, local01
2f280                 | '   }
2f280                 | '   fil->vfsdata = f;
2f280                 | '   return 0;
2f280     00 FA 05 F6 | 	mov	result1, #0
2f284                 | LR__4846
2f284     A7 F0 03 F6 | 	mov	ptra, fp
2f288     B2 00 A0 FD | 	call	#popregs_
2f28c                 | _fatfs_cc_v_open_ret
2f28c     2D 00 64 FD | 	ret
2f290                 | 
2f290                 | _fatfs_cc_v_flush
2f290     09 13 02 FB | 	rdlong	arg01, arg01
2f294     02 00 00 FF 
2f298     14 12 0E F1 | 	add	arg01, ##1044 wz
2f29c                 | '         return _seterror( 5 );
2f29c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2f2a0     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2f2a4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2f2a8     01 FA 65 A6 |  if_e	neg	result1, #1
2f2ac     0C 00 90 AD |  if_e	jmp	#LR__4850
2f2b0     00 DA BF FD | 	call	#_fatfs_cc_f_sync
2f2b4     FD 12 02 F6 | 	mov	arg01, result1
2f2b8                 | '     }
2f2b8                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
2f2b8                 | '     result = f_sync(f);
2f2b8                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
2f2b8                 | '     return _set_dos_error(result);
2f2b8     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2f2bc                 | LR__4850
2f2bc                 | _fatfs_cc_v_flush_ret
2f2bc     2D 00 64 FD | 	ret
2f2c0                 | 
2f2c0                 | _fatfs_cc_v_init
2f2c0                 | ' {
2f2c0                 | '     return 0;
2f2c0     00 FA 05 F6 | 	mov	result1, #0
2f2c4                 | _fatfs_cc_v_init_ret
2f2c4     2D 00 64 FD | 	ret
2f2c8                 | 
2f2c8                 | _fatfs_cc_v_deinit
2f2c8     81 01 00 FF 
2f2cc     3C 14 06 F6 | 	mov	arg02, ##@LR__5046
2f2d0     00 12 06 F6 | 	mov	arg01, #0
2f2d4     00 16 06 F6 | 	mov	arg03, #0
2f2d8     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
2f2dc     01 00 00 FF 
2f2e0     08 E4 05 F1 | 	add	objptr, ##520
2f2e4     F2 12 02 FB | 	rdlong	arg01, objptr
2f2e8     04 E4 05 F1 | 	add	objptr, #4
2f2ec     F2 14 02 FB | 	rdlong	arg02, objptr
2f2f0     01 00 00 FF 
2f2f4     0C E4 85 F1 | 	sub	objptr, ##524
2f2f8     F0 3D BF FD | 	call	#__system___freepins
2f2fc                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
2f2fc                 | '     _freepins(f_pinmask);
2f2fc                 | '     return 0;
2f2fc     00 FA 05 F6 | 	mov	result1, #0
2f300                 | _fatfs_cc_v_deinit_ret
2f300     2D 00 64 FD | 	ret
2f304                 | 
2f304                 | _fatfs_cc_get_vfs
2f304     01 4A 05 F6 | 	mov	COUNT_, #1
2f308     A8 00 A0 FD | 	call	#pushregs_
2f30c     09 1F 02 F6 | 	mov	local01, arg01
2f310     50 12 06 F6 | 	mov	arg01, #80
2f314     28 55 BF FD | 	call	#__system___gc_alloc_managed
2f318     FD 12 02 F6 | 	mov	arg01, result1
2f31c     F2 FA 01 F6 | 	mov	result1, objptr
2f320     00 E0 04 FF 
2f324     00 FA 45 F5 | 	or	result1, ##163577856
2f328     09 FB 61 FC | 	wrlong	result1, arg01
2f32c     F2 FA 01 F6 | 	mov	result1, objptr
2f330     00 E8 04 FF 
2f334     00 FA 45 F5 | 	or	result1, ##164626432
2f338     04 12 06 F1 | 	add	arg01, #4
2f33c     09 FB 61 FC | 	wrlong	result1, arg01
2f340     F2 FA 01 F6 | 	mov	result1, objptr
2f344     00 F0 04 FF 
2f348     00 FA 45 F5 | 	or	result1, ##165675008
2f34c     04 12 06 F1 | 	add	arg01, #4
2f350     09 FB 61 FC | 	wrlong	result1, arg01
2f354     F2 FA 01 F6 | 	mov	result1, objptr
2f358     00 F8 04 FF 
2f35c     00 FA 45 F5 | 	or	result1, ##166723584
2f360     04 12 06 F1 | 	add	arg01, #4
2f364     09 FB 61 FC | 	wrlong	result1, arg01
2f368     F2 FA 01 F6 | 	mov	result1, objptr
2f36c     00 00 05 FF 
2f370     00 FA 45 F5 | 	or	result1, ##167772160
2f374     04 12 06 F1 | 	add	arg01, #4
2f378     09 FB 61 FC | 	wrlong	result1, arg01
2f37c     04 12 06 F1 | 	add	arg01, #4
2f380     09 01 68 FC | 	wrlong	#0, arg01
2f384     04 12 06 F1 | 	add	arg01, #4
2f388     09 1F 62 FC | 	wrlong	local01, arg01
2f38c     04 12 06 F1 | 	add	arg01, #4
2f390     09 01 68 FC | 	wrlong	#0, arg01
2f394     F2 FA 01 F6 | 	mov	result1, objptr
2f398     00 08 05 FF 
2f39c     00 FA 45 F5 | 	or	result1, ##168820736
2f3a0     04 12 06 F1 | 	add	arg01, #4
2f3a4     09 FB 61 FC | 	wrlong	result1, arg01
2f3a8     F2 FA 01 F6 | 	mov	result1, objptr
2f3ac     00 10 05 FF 
2f3b0     00 FA 45 F5 | 	or	result1, ##169869312
2f3b4     04 12 06 F1 | 	add	arg01, #4
2f3b8     09 FB 61 FC | 	wrlong	result1, arg01
2f3bc     F2 FA 01 F6 | 	mov	result1, objptr
2f3c0     00 18 05 FF 
2f3c4     00 FA 45 F5 | 	or	result1, ##170917888
2f3c8     04 12 06 F1 | 	add	arg01, #4
2f3cc     09 FB 61 FC | 	wrlong	result1, arg01
2f3d0     F2 FA 01 F6 | 	mov	result1, objptr
2f3d4     00 20 05 FF 
2f3d8     00 FA 45 F5 | 	or	result1, ##171966464
2f3dc     04 12 06 F1 | 	add	arg01, #4
2f3e0     09 FB 61 FC | 	wrlong	result1, arg01
2f3e4     F2 FA 01 F6 | 	mov	result1, objptr
2f3e8     00 28 05 FF 
2f3ec     00 FA 45 F5 | 	or	result1, ##173015040
2f3f0     04 12 06 F1 | 	add	arg01, #4
2f3f4     09 FB 61 FC | 	wrlong	result1, arg01
2f3f8     F2 FA 01 F6 | 	mov	result1, objptr
2f3fc     00 30 05 FF 
2f400     00 FA 45 F5 | 	or	result1, ##174063616
2f404     04 12 06 F1 | 	add	arg01, #4
2f408     09 FB 61 FC | 	wrlong	result1, arg01
2f40c     F2 FA 01 F6 | 	mov	result1, objptr
2f410     00 38 05 FF 
2f414     00 FA 45 F5 | 	or	result1, ##175112192
2f418     04 12 06 F1 | 	add	arg01, #4
2f41c     09 FB 61 FC | 	wrlong	result1, arg01
2f420     F2 FA 01 F6 | 	mov	result1, objptr
2f424     00 40 05 FF 
2f428     00 FA 45 F5 | 	or	result1, ##176160768
2f42c     04 12 06 F1 | 	add	arg01, #4
2f430     09 FB 61 FC | 	wrlong	result1, arg01
2f434     F2 FA 01 F6 | 	mov	result1, objptr
2f438     00 48 05 FF 
2f43c     00 FA 45 F5 | 	or	result1, ##177209344
2f440     04 12 06 F1 | 	add	arg01, #4
2f444     09 FB 61 FC | 	wrlong	result1, arg01
2f448     F2 FA 01 F6 | 	mov	result1, objptr
2f44c     00 50 05 FF 
2f450     00 FA 45 F5 | 	or	result1, ##178257920
2f454     04 12 06 F1 | 	add	arg01, #4
2f458     09 FB 61 FC | 	wrlong	result1, arg01
2f45c     F2 FA 01 F6 | 	mov	result1, objptr
2f460     00 58 05 FF 
2f464     00 FA 45 F5 | 	or	result1, ##179306496
2f468     04 12 06 F1 | 	add	arg01, #4
2f46c     09 FB 61 FC | 	wrlong	result1, arg01
2f470     F2 FA 01 F6 | 	mov	result1, objptr
2f474     00 60 05 FF 
2f478     00 FA 45 F5 | 	or	result1, ##180355072
2f47c     04 12 06 F1 | 	add	arg01, #4
2f480     09 FB 61 FC | 	wrlong	result1, arg01
2f484     4C 12 86 F1 | 	sub	arg01, #76
2f488                 | ' 
2f488                 | '     v->close = &v_close;
2f488                 | '     v->read = &v_read;
2f488                 | '     v->write = &v_write;
2f488                 | '     v->lseek = &v_lseek;
2f488                 | '     v->ioctl = &v_ioctl;
2f488                 | '     v->flush = 0;
2f488                 | '     v->vfs_data = ptr;
2f488                 | '     v->reserved = 0;
2f488                 | ' 
2f488                 | '     v->open = &v_open;
2f488                 | '     v->creat = &v_creat;
2f488                 | '     v->opendir = &v_opendir;
2f488                 | '     v->closedir = &v_closedir;
2f488                 | '     v->readdir = &v_readdir;
2f488                 | '     v->stat = &v_stat;
2f488                 | ' 
2f488                 | '     v->mkdir = &v_mkdir;
2f488                 | '     v->rmdir = &v_rmdir;
2f488                 | ' 
2f488                 | '     v->remove = &v_remove;
2f488                 | '     v->rename = &v_rename;
2f488                 | ' 
2f488                 | '     v->init = &v_init;
2f488                 | '     v->deinit = &v_deinit;
2f488                 | ' 
2f488                 | '     return v;
2f488     09 FB 01 F6 | 	mov	result1, arg01
2f48c     A7 F0 03 F6 | 	mov	ptra, fp
2f490     B2 00 A0 FD | 	call	#popregs_
2f494                 | _fatfs_cc_get_vfs_ret
2f494     2D 00 64 FD | 	ret
2f498                 | 
2f498                 | _fatfs_cc_xmit_mmc_1109
2f498     01 00 00 FF 
2f49c     10 E4 05 F1 | 	add	objptr, ##528
2f4a0     F2 00 02 FB | 	rdlong	_var01, objptr
2f4a4     08 E4 05 F1 | 	add	objptr, #8
2f4a8     F2 02 02 FB | 	rdlong	_var02, objptr
2f4ac     01 00 00 FF 
2f4b0     18 E4 85 F1 | 	sub	objptr, ##536
2f4b4     40 02 62 FD | 	dirl	_var02
2f4b8     28 02 64 FD | 	setq	#1
2f4bc     09 05 02 FB | 	rdlong	_var03, arg01
2f4c0     69 04 62 FD | 	rev	_var03
2f4c4     1B 04 FE F9 | 	movbyts	_var03, #27
2f4c8     01 05 22 FC | 	wypin	_var03, _var02
2f4cc     0A 05 02 F6 | 	mov	_var03, arg02
2f4d0     02 14 4E F0 | 	shr	arg02, #2 wz
2f4d4     03 04 66 F0 | 	shl	_var03, #3
2f4d8     00 05 22 FC | 	wypin	_var03, _var01
2f4dc     41 02 62 FD | 	dirh	_var02
2f4e0     08 12 06 F1 | 	add	arg01, #8
2f4e4     69 06 62 FD | 	rev	_var04
2f4e8     1B 06 FE F9 | 	movbyts	_var04, #27
2f4ec                 | LR__4860
2f4ec     01 07 22 5C |  if_ne	wypin	_var04, _var02
2f4f0     09 07 02 5B |  if_ne	rdlong	_var04, arg01
2f4f4     04 12 06 51 |  if_ne	add	arg01, #4
2f4f8     69 06 62 5D |  if_ne	rev	_var04
2f4fc     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
2f500                 | LR__4861
2f500     40 02 72 5D |  if_ne	testp	_var02 wc
2f504     F8 FF 9F 1D |  if_a	jmp	#LR__4861
2f508     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__4860
2f50c                 | LR__4862
2f50c     40 00 72 FD | 	testp	_var01 wc
2f510     F8 FF 9F 3D |  if_ae	jmp	#LR__4862
2f514     40 02 62 FD | 	dirl	_var02
2f518     FF FF FF FF 
2f51c     01 FF 2B FC | 	wypin	##-1, _var02
2f520     41 02 62 FD | 	dirh	_var02
2f524                 | _fatfs_cc_xmit_mmc_1109_ret
2f524     2D 00 64 FD | 	ret
2f528                 | 
2f528                 | _fatfs_cc_rcvr_mmc_1116
2f528     01 00 00 FF 
2f52c     10 E4 05 F1 | 	add	objptr, ##528
2f530     F2 00 02 FB | 	rdlong	_var01, objptr
2f534     0C E4 05 F1 | 	add	objptr, #12
2f538     F2 02 02 FB | 	rdlong	_var02, objptr
2f53c     01 00 00 FF 
2f540     1C E4 85 F1 | 	sub	objptr, ##540
2f544     01 03 08 FC | 	akpin	_var02
2f548     0A 05 0A F6 | 	mov	_var03, arg02 wz
2f54c     02 04 4E F0 | 	shr	_var03, #2 wz
2f550     30 00 90 AD |  if_e	jmp	#LR__4872
2f554     02 07 02 F6 | 	mov	_var04, _var03
2f558     05 06 66 F0 | 	shl	_var04, #5
2f55c     00 07 22 FC | 	wypin	_var04, _var01
2f560     01 7F 18 FC | 	wxpin	#63, _var02
2f564                 | LR__4870
2f564                 | LR__4871
2f564     40 02 72 FD | 	testp	_var02 wc
2f568     F8 FF 9F 3D |  if_ae	jmp	#LR__4871
2f56c     01 07 8A FA | 	rdpin	_var04, _var02
2f570     69 06 62 FD | 	rev	_var04
2f574     1B 06 FE F9 | 	movbyts	_var04, #27
2f578     09 07 62 FC | 	wrlong	_var04, arg01
2f57c     04 12 06 F1 | 	add	arg01, #4
2f580     F8 05 6E FB | 	djnz	_var03, #LR__4870
2f584                 | LR__4872
2f584     03 14 0E F5 | 	and	arg02, #3 wz
2f588     24 00 90 AD |  if_e	jmp	#LR__4875
2f58c     01 4F 18 FC | 	wxpin	#39, _var02
2f590                 | LR__4873
2f590     00 11 28 FC | 	wypin	#8, _var01
2f594                 | LR__4874
2f594     40 02 72 FD | 	testp	_var02 wc
2f598     F8 FF 9F 3D |  if_ae	jmp	#LR__4874
2f59c     01 07 8A FA | 	rdpin	_var04, _var02
2f5a0     69 06 62 FD | 	rev	_var04
2f5a4     09 07 42 FC | 	wrbyte	_var04, arg01
2f5a8     01 12 06 F1 | 	add	arg01, #1
2f5ac     F8 15 6E FB | 	djnz	arg02, #LR__4873
2f5b0                 | LR__4875
2f5b0                 | _fatfs_cc_rcvr_mmc_1116_ret
2f5b0     2D 00 64 FD | 	ret
2f5b4                 | 
2f5b4                 | _fatfs_cc_wait_ready_1120
2f5b4     01 4A 05 F6 | 	mov	COUNT_, #1
2f5b8     A8 00 A0 FD | 	call	#pushregs_
2f5bc     10 F0 07 F1 | 	add	ptra, #16
2f5c0     1A FA 61 FD | 	getct	result1
2f5c4     08 4E 05 F1 | 	add	fp, #8
2f5c8     A7 FA 61 FC | 	wrlong	result1, fp
2f5cc     14 1E 06 FB | 	rdlong	local01, #20
2f5d0     01 1E 46 F0 | 	shr	local01, #1
2f5d4     04 4E 05 F1 | 	add	fp, #4
2f5d8     A7 1E 62 FC | 	wrlong	local01, fp
2f5dc     0C 4E 85 F1 | 	sub	fp, #12
2f5e0                 | ' {
2f5e0                 | ' 	BYTE d;
2f5e0                 | ' 	UINT tmr, tmout;
2f5e0                 | ' 
2f5e0                 | ' 	tmr = _cnt();
2f5e0                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
2f5e0                 | ' 	for(;;) {
2f5e0                 | LR__4880
2f5e0     04 4E 05 F1 | 	add	fp, #4
2f5e4     A7 12 02 F6 | 	mov	arg01, fp
2f5e8     04 4E 85 F1 | 	sub	fp, #4
2f5ec     01 14 06 F6 | 	mov	arg02, #1
2f5f0     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2f5f4     04 4E 05 F1 | 	add	fp, #4
2f5f8     A7 1E C2 FA | 	rdbyte	local01, fp
2f5fc     04 4E 85 F1 | 	sub	fp, #4
2f600     FF 1E 0E F2 | 	cmp	local01, #255 wz
2f604     01 FA 05 A6 |  if_e	mov	result1, #1
2f608     28 00 90 AD |  if_e	jmp	#LR__4881
2f60c     1A FA 61 FD | 	getct	result1
2f610     08 4E 05 F1 | 	add	fp, #8
2f614     A7 1E 02 FB | 	rdlong	local01, fp
2f618     0F FB 81 F1 | 	sub	result1, local01
2f61c     04 4E 05 F1 | 	add	fp, #4
2f620     A7 1E 02 FB | 	rdlong	local01, fp
2f624     0C 4E 85 F1 | 	sub	fp, #12
2f628     0F FB 11 F2 | 	cmp	result1, local01 wc
2f62c     00 FA 05 36 |  if_ae	mov	result1, #0
2f630     AC FF 9F CD |  if_b	jmp	#LR__4880
2f634                 | LR__4881
2f634     A7 F0 03 F6 | 	mov	ptra, fp
2f638     B2 00 A0 FD | 	call	#popregs_
2f63c                 | _fatfs_cc_wait_ready_1120_ret
2f63c     2D 00 64 FD | 	ret
2f640                 | 
2f640                 | _fatfs_cc_deselect_1126
2f640     00 4A 05 F6 | 	mov	COUNT_, #0
2f644     A8 00 A0 FD | 	call	#pushregs_
2f648     14 F0 07 F1 | 	add	ptra, #20
2f64c     01 00 00 FF 
2f650     14 E4 05 F1 | 	add	objptr, ##532
2f654     F2 14 02 FB | 	rdlong	arg02, objptr
2f658     04 4E 05 F1 | 	add	fp, #4
2f65c     A7 14 62 FC | 	wrlong	arg02, fp
2f660     04 E4 85 F1 | 	sub	objptr, #4
2f664     F2 14 02 FB | 	rdlong	arg02, objptr
2f668     04 4E 05 F1 | 	add	fp, #4
2f66c     A7 14 62 FC | 	wrlong	arg02, fp
2f670     08 E4 05 F1 | 	add	objptr, #8
2f674     F2 14 02 FB | 	rdlong	arg02, objptr
2f678     04 4E 05 F1 | 	add	fp, #4
2f67c     A7 14 62 FC | 	wrlong	arg02, fp
2f680     04 E4 05 F1 | 	add	objptr, #4
2f684     F2 14 02 FB | 	rdlong	arg02, objptr
2f688     01 00 00 FF 
2f68c     1C E4 85 F1 | 	sub	objptr, ##540
2f690     04 4E 05 F1 | 	add	fp, #4
2f694     A7 14 62 FC | 	wrlong	arg02, fp
2f698     0C 4E 85 F1 | 	sub	fp, #12
2f69c     A7 12 02 FB | 	rdlong	arg01, fp
2f6a0     04 4E 85 F1 | 	sub	fp, #4
2f6a4     59 12 62 FD | 	drvh	arg01
2f6a8     1F 20 64 FD | 	waitx	#16
2f6ac     A7 12 02 F6 | 	mov	arg01, fp
2f6b0     01 14 06 F6 | 	mov	arg02, #1
2f6b4     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2f6b8     A7 F0 03 F6 | 	mov	ptra, fp
2f6bc     B2 00 A0 FD | 	call	#popregs_
2f6c0                 | _fatfs_cc_deselect_1126_ret
2f6c0     2D 00 64 FD | 	ret
2f6c4                 | 
2f6c4                 | _fatfs_cc_select_1130
2f6c4     00 4A 05 F6 | 	mov	COUNT_, #0
2f6c8     A8 00 A0 FD | 	call	#pushregs_
2f6cc     10 F0 07 F1 | 	add	ptra, #16
2f6d0     01 00 00 FF 
2f6d4     14 E4 05 F1 | 	add	objptr, ##532
2f6d8     F2 14 02 FB | 	rdlong	arg02, objptr
2f6dc     08 4E 05 F1 | 	add	fp, #8
2f6e0     A7 14 62 FC | 	wrlong	arg02, fp
2f6e4     08 E4 05 F1 | 	add	objptr, #8
2f6e8     F2 12 02 FB | 	rdlong	arg01, objptr
2f6ec     01 00 00 FF 
2f6f0     1C E4 85 F1 | 	sub	objptr, ##540
2f6f4     04 4E 05 F1 | 	add	fp, #4
2f6f8     A7 12 62 FC | 	wrlong	arg01, fp
2f6fc     50 12 62 FD | 	fltl	arg01
2f700     04 4E 85 F1 | 	sub	fp, #4
2f704     A7 12 02 FB | 	rdlong	arg01, fp
2f708     58 12 62 FD | 	drvl	arg01
2f70c     1F 20 64 FD | 	waitx	#16
2f710     04 4E 05 F1 | 	add	fp, #4
2f714     A7 12 02 FB | 	rdlong	arg01, fp
2f718     41 12 62 FD | 	dirh	arg01
2f71c     08 4E 85 F1 | 	sub	fp, #8
2f720     A7 12 02 F6 | 	mov	arg01, fp
2f724     04 4E 85 F1 | 	sub	fp, #4
2f728     01 14 06 F6 | 	mov	arg02, #1
2f72c     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2f730     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_1120
2f734     00 FA 0D F2 | 	cmp	result1, #0 wz
2f738     01 FA 05 56 |  if_ne	mov	result1, #1
2f73c     08 00 90 5D |  if_ne	jmp	#LR__4890
2f740     FC FE BF FD | 	call	#_fatfs_cc_deselect_1126
2f744                 | ' 
2f744                 | ' 	deselect();
2f744                 | ' 	return 0;
2f744     00 FA 05 F6 | 	mov	result1, #0
2f748                 | LR__4890
2f748     A7 F0 03 F6 | 	mov	ptra, fp
2f74c     B2 00 A0 FD | 	call	#popregs_
2f750                 | _fatfs_cc_select_1130_ret
2f750     2D 00 64 FD | 	ret
2f754                 | 
2f754                 | _fatfs_cc_rcvr_datablock_1134
2f754     01 4A 05 F6 | 	mov	COUNT_, #1
2f758     A8 00 A0 FD | 	call	#pushregs_
2f75c     18 F0 07 F1 | 	add	ptra, #24
2f760     04 4E 05 F1 | 	add	fp, #4
2f764     A7 12 62 FC | 	wrlong	arg01, fp
2f768     04 4E 05 F1 | 	add	fp, #4
2f76c     A7 14 62 FC | 	wrlong	arg02, fp
2f770     1A FA 61 FD | 	getct	result1
2f774     08 4E 05 F1 | 	add	fp, #8
2f778     A7 FA 61 FC | 	wrlong	result1, fp
2f77c     14 1E 06 FB | 	rdlong	local01, #20
2f780     03 1E 46 F0 | 	shr	local01, #3
2f784     04 4E 05 F1 | 	add	fp, #4
2f788     A7 1E 62 FC | 	wrlong	local01, fp
2f78c     14 4E 85 F1 | 	sub	fp, #20
2f790                 | ' 	BYTE *buff,
2f790                 | ' 	UINT btr
2f790                 | ' )
2f790                 | ' {
2f790                 | ' 	BYTE d[2];
2f790                 | ' 	UINT tmr, tmout;
2f790                 | ' 
2f790                 | ' 	tmr = _cnt();
2f790                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
2f790                 | ' 	for(;;) {
2f790                 | LR__4900
2f790     0C 4E 05 F1 | 	add	fp, #12
2f794     A7 12 02 F6 | 	mov	arg01, fp
2f798     0C 4E 85 F1 | 	sub	fp, #12
2f79c     01 14 06 F6 | 	mov	arg02, #1
2f7a0     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2f7a4     0C 4E 05 F1 | 	add	fp, #12
2f7a8     A7 1E C2 FA | 	rdbyte	local01, fp
2f7ac     0C 4E 85 F1 | 	sub	fp, #12
2f7b0     FF 1E 0E F2 | 	cmp	local01, #255 wz
2f7b4     28 00 90 5D |  if_ne	jmp	#LR__4901
2f7b8     1A FA 61 FD | 	getct	result1
2f7bc     FD 1E 02 F6 | 	mov	local01, result1
2f7c0     10 4E 05 F1 | 	add	fp, #16
2f7c4     A7 14 02 FB | 	rdlong	arg02, fp
2f7c8     0A 1F 82 F1 | 	sub	local01, arg02
2f7cc     04 4E 05 F1 | 	add	fp, #4
2f7d0     A7 14 02 FB | 	rdlong	arg02, fp
2f7d4     14 4E 85 F1 | 	sub	fp, #20
2f7d8     0A 1F 12 F2 | 	cmp	local01, arg02 wc
2f7dc     B0 FF 9F CD |  if_b	jmp	#LR__4900
2f7e0                 | LR__4901
2f7e0     0C 4E 05 F1 | 	add	fp, #12
2f7e4     A7 1E C2 FA | 	rdbyte	local01, fp
2f7e8     0C 4E 85 F1 | 	sub	fp, #12
2f7ec     FE 1E 0E F2 | 	cmp	local01, #254 wz
2f7f0     00 FA 05 56 |  if_ne	mov	result1, #0
2f7f4     30 00 90 5D |  if_ne	jmp	#LR__4902
2f7f8     04 4E 05 F1 | 	add	fp, #4
2f7fc     A7 12 02 FB | 	rdlong	arg01, fp
2f800     04 4E 05 F1 | 	add	fp, #4
2f804     A7 14 02 FB | 	rdlong	arg02, fp
2f808     08 4E 85 F1 | 	sub	fp, #8
2f80c     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2f810     0C 4E 05 F1 | 	add	fp, #12
2f814     A7 12 02 F6 | 	mov	arg01, fp
2f818     0C 4E 85 F1 | 	sub	fp, #12
2f81c     02 14 06 F6 | 	mov	arg02, #2
2f820     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2f824                 | ' 
2f824                 | ' 	rcvr_mmc(buff, btr);
2f824                 | ' 	rcvr_mmc(d, 2);
2f824                 | ' 
2f824                 | ' 	return 1;
2f824     01 FA 05 F6 | 	mov	result1, #1
2f828                 | LR__4902
2f828     A7 F0 03 F6 | 	mov	ptra, fp
2f82c     B2 00 A0 FD | 	call	#popregs_
2f830                 | _fatfs_cc_rcvr_datablock_1134_ret
2f830     2D 00 64 FD | 	ret
2f834                 | 
2f834                 | _fatfs_cc_xmit_datablock_1136
2f834     00 4A 05 F6 | 	mov	COUNT_, #0
2f838     A8 00 A0 FD | 	call	#pushregs_
2f83c     10 F0 07 F1 | 	add	ptra, #16
2f840     04 4E 05 F1 | 	add	fp, #4
2f844     A7 12 62 FC | 	wrlong	arg01, fp
2f848     04 4E 05 F1 | 	add	fp, #4
2f84c     A7 14 42 FC | 	wrbyte	arg02, fp
2f850     08 4E 85 F1 | 	sub	fp, #8
2f854     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_1120
2f858     00 FA 0D F2 | 	cmp	result1, #0 wz
2f85c     00 FA 05 A6 |  if_e	mov	result1, #0
2f860     90 00 90 AD |  if_e	jmp	#LR__4911
2f864     08 4E 05 F1 | 	add	fp, #8
2f868     A7 14 C2 FA | 	rdbyte	arg02, fp
2f86c     04 4E 05 F1 | 	add	fp, #4
2f870     A7 14 42 FC | 	wrbyte	arg02, fp
2f874     A7 12 02 F6 | 	mov	arg01, fp
2f878     0C 4E 85 F1 | 	sub	fp, #12
2f87c     01 14 06 F6 | 	mov	arg02, #1
2f880     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_1109
2f884     08 4E 05 F1 | 	add	fp, #8
2f888     A7 14 C2 FA | 	rdbyte	arg02, fp
2f88c     08 4E 85 F1 | 	sub	fp, #8
2f890     FD 14 0E F2 | 	cmp	arg02, #253 wz
2f894     58 00 90 AD |  if_e	jmp	#LR__4910
2f898     04 4E 05 F1 | 	add	fp, #4
2f89c     A7 12 02 FB | 	rdlong	arg01, fp
2f8a0     04 4E 85 F1 | 	sub	fp, #4
2f8a4     09 14 C6 F9 | 	decod	arg02, #9
2f8a8     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_1109
2f8ac     0C 4E 05 F1 | 	add	fp, #12
2f8b0     A7 12 02 F6 | 	mov	arg01, fp
2f8b4     0C 4E 85 F1 | 	sub	fp, #12
2f8b8     02 14 06 F6 | 	mov	arg02, #2
2f8bc     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2f8c0     0C 4E 05 F1 | 	add	fp, #12
2f8c4     A7 12 02 F6 | 	mov	arg01, fp
2f8c8     0C 4E 85 F1 | 	sub	fp, #12
2f8cc     01 14 06 F6 | 	mov	arg02, #1
2f8d0     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2f8d4     0C 4E 05 F1 | 	add	fp, #12
2f8d8     A7 14 C2 FA | 	rdbyte	arg02, fp
2f8dc     0C 4E 85 F1 | 	sub	fp, #12
2f8e0     1F 14 06 F5 | 	and	arg02, #31
2f8e4     05 14 0E F2 | 	cmp	arg02, #5 wz
2f8e8                 | ' 			return 0;
2f8e8     00 FA 05 56 |  if_ne	mov	result1, #0
2f8ec     04 00 90 5D |  if_ne	jmp	#LR__4911
2f8f0                 | LR__4910
2f8f0                 | ' 	}
2f8f0                 | ' 
2f8f0                 | ' 	return 1;
2f8f0     01 FA 05 F6 | 	mov	result1, #1
2f8f4                 | LR__4911
2f8f4     A7 F0 03 F6 | 	mov	ptra, fp
2f8f8     B2 00 A0 FD | 	call	#popregs_
2f8fc                 | _fatfs_cc_xmit_datablock_1136_ret
2f8fc     2D 00 64 FD | 	ret
2f900                 | 
2f900                 | _fatfs_cc_send_cmd_1140
2f900     01 4A 05 F6 | 	mov	COUNT_, #1
2f904     A8 00 A0 FD | 	call	#pushregs_
2f908     1C F0 07 F1 | 	add	ptra, #28
2f90c                 | _fatfs_cc_send_cmd_1140_enter
2f90c     04 4E 05 F1 | 	add	fp, #4
2f910     A7 12 42 FC | 	wrbyte	arg01, fp
2f914     04 4E 05 F1 | 	add	fp, #4
2f918     A7 14 62 FC | 	wrlong	arg02, fp
2f91c     04 4E 85 F1 | 	sub	fp, #4
2f920     A7 FA C1 FA | 	rdbyte	result1, fp
2f924     04 4E 85 F1 | 	sub	fp, #4
2f928     80 FA CD F7 | 	test	result1, #128 wz
2f92c     44 00 90 AD |  if_e	jmp	#LR__4920
2f930     04 4E 05 F1 | 	add	fp, #4
2f934     A7 14 C2 FA | 	rdbyte	arg02, fp
2f938     7F 14 06 F5 | 	and	arg02, #127
2f93c     A7 14 42 FC | 	wrbyte	arg02, fp
2f940     04 4E 85 F1 | 	sub	fp, #4
2f944     37 12 06 F6 | 	mov	arg01, #55
2f948     00 14 06 F6 | 	mov	arg02, #0
2f94c     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_1140
2f950     0C 4E 05 F1 | 	add	fp, #12
2f954     A7 FA 41 FC | 	wrbyte	result1, fp
2f958     A7 14 C2 FA | 	rdbyte	arg02, fp
2f95c     0C 4E 85 F1 | 	sub	fp, #12
2f960     02 14 16 F2 | 	cmp	arg02, #2 wc
2f964     0C 4E 05 31 |  if_ae	add	fp, #12
2f968     A7 FA C1 3A |  if_ae	rdbyte	result1, fp
2f96c     0C 4E 85 31 |  if_ae	sub	fp, #12
2f970     6C 01 90 3D |  if_ae	jmp	#LR__4924
2f974                 | LR__4920
2f974     04 4E 05 F1 | 	add	fp, #4
2f978     A7 14 C2 FA | 	rdbyte	arg02, fp
2f97c     04 4E 85 F1 | 	sub	fp, #4
2f980     0C 14 0E F2 | 	cmp	arg02, #12 wz
2f984     14 00 90 AD |  if_e	jmp	#LR__4921
2f988     B4 FC BF FD | 	call	#_fatfs_cc_deselect_1126
2f98c     34 FD BF FD | 	call	#_fatfs_cc_select_1130
2f990     00 FA 0D F2 | 	cmp	result1, #0 wz
2f994     FF FA 05 A6 |  if_e	mov	result1, #255
2f998     44 01 90 AD |  if_e	jmp	#LR__4924
2f99c                 | LR__4921
2f99c     04 4E 05 F1 | 	add	fp, #4
2f9a0     A7 14 C2 FA | 	rdbyte	arg02, fp
2f9a4     40 FA 05 F6 | 	mov	result1, #64
2f9a8     0A FB 41 F5 | 	or	result1, arg02
2f9ac     10 4E 05 F1 | 	add	fp, #16
2f9b0     A7 FA 41 FC | 	wrbyte	result1, fp
2f9b4     0C 4E 85 F1 | 	sub	fp, #12
2f9b8     A7 FA 01 FB | 	rdlong	result1, fp
2f9bc     18 FA 45 F0 | 	shr	result1, #24
2f9c0     0D 4E 05 F1 | 	add	fp, #13
2f9c4     A7 FA 41 FC | 	wrbyte	result1, fp
2f9c8     0D 4E 85 F1 | 	sub	fp, #13
2f9cc     A7 FA 01 FB | 	rdlong	result1, fp
2f9d0     10 FA 45 F0 | 	shr	result1, #16
2f9d4     0E 4E 05 F1 | 	add	fp, #14
2f9d8     A7 FA 41 FC | 	wrbyte	result1, fp
2f9dc     0E 4E 85 F1 | 	sub	fp, #14
2f9e0     A7 FA 01 FB | 	rdlong	result1, fp
2f9e4     08 FA 45 F0 | 	shr	result1, #8
2f9e8     0F 4E 05 F1 | 	add	fp, #15
2f9ec     A7 FA 41 FC | 	wrbyte	result1, fp
2f9f0     0F 4E 85 F1 | 	sub	fp, #15
2f9f4     A7 FA 01 FB | 	rdlong	result1, fp
2f9f8     10 4E 05 F1 | 	add	fp, #16
2f9fc     A7 FA 41 FC | 	wrbyte	result1, fp
2fa00     0C 4E 85 F1 | 	sub	fp, #12
2fa04     A7 02 48 FC | 	wrbyte	#1, fp
2fa08     08 4E 85 F1 | 	sub	fp, #8
2fa0c     A7 FA C9 FA | 	rdbyte	result1, fp wz
2fa10     04 4E 85 F1 | 	sub	fp, #4
2fa14     0C 4E 05 A1 |  if_e	add	fp, #12
2fa18     A7 2A 49 AC |  if_e	wrbyte	#149, fp
2fa1c     0C 4E 85 A1 |  if_e	sub	fp, #12
2fa20     04 4E 05 F1 | 	add	fp, #4
2fa24     A7 FA C1 FA | 	rdbyte	result1, fp
2fa28     04 4E 85 F1 | 	sub	fp, #4
2fa2c     08 FA 0D F2 | 	cmp	result1, #8 wz
2fa30     0C 4E 05 A1 |  if_e	add	fp, #12
2fa34     A7 0E 49 AC |  if_e	wrbyte	#135, fp
2fa38     0C 4E 85 A1 |  if_e	sub	fp, #12
2fa3c     0C 4E 05 F1 | 	add	fp, #12
2fa40     A7 14 C2 FA | 	rdbyte	arg02, fp
2fa44     0D 4E 05 F1 | 	add	fp, #13
2fa48     A7 14 42 FC | 	wrbyte	arg02, fp
2fa4c     05 4E 85 F1 | 	sub	fp, #5
2fa50     A7 12 02 F6 | 	mov	arg01, fp
2fa54     14 4E 85 F1 | 	sub	fp, #20
2fa58     06 14 06 F6 | 	mov	arg02, #6
2fa5c     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_1109
2fa60     04 4E 05 F1 | 	add	fp, #4
2fa64     A7 1E C2 FA | 	rdbyte	local01, fp
2fa68     04 4E 85 F1 | 	sub	fp, #4
2fa6c     0C 1E 0E F2 | 	cmp	local01, #12 wz
2fa70     10 4E 05 A1 |  if_e	add	fp, #16
2fa74     A7 12 02 A6 |  if_e	mov	arg01, fp
2fa78     10 4E 85 A1 |  if_e	sub	fp, #16
2fa7c     01 14 06 A6 |  if_e	mov	arg02, #1
2fa80     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_1116
2fa84     0C 4E 05 F1 | 	add	fp, #12
2fa88     A7 14 48 FC | 	wrbyte	#10, fp
2fa8c     0C 4E 85 F1 | 	sub	fp, #12
2fa90                 | ' 	n = 10;
2fa90                 | ' 	do
2fa90                 | LR__4922
2fa90     10 4E 05 F1 | 	add	fp, #16
2fa94     A7 12 02 F6 | 	mov	arg01, fp
2fa98     10 4E 85 F1 | 	sub	fp, #16
2fa9c     01 14 06 F6 | 	mov	arg02, #1
2faa0     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2faa4     10 4E 05 F1 | 	add	fp, #16
2faa8     A7 1E C2 FA | 	rdbyte	local01, fp
2faac     10 4E 85 F1 | 	sub	fp, #16
2fab0     80 1E CE F7 | 	test	local01, #128 wz
2fab4     1C 00 90 AD |  if_e	jmp	#LR__4923
2fab8     0C 4E 05 F1 | 	add	fp, #12
2fabc     A7 1E C2 FA | 	rdbyte	local01, fp
2fac0     01 1E 86 F1 | 	sub	local01, #1
2fac4     A7 1E 42 FC | 	wrbyte	local01, fp
2fac8     A7 1E CA FA | 	rdbyte	local01, fp wz
2facc     0C 4E 85 F1 | 	sub	fp, #12
2fad0     BC FF 9F 5D |  if_ne	jmp	#LR__4922
2fad4                 | LR__4923
2fad4                 | ' 
2fad4                 | ' 	return d;
2fad4     10 4E 05 F1 | 	add	fp, #16
2fad8     A7 FA C1 FA | 	rdbyte	result1, fp
2fadc     10 4E 85 F1 | 	sub	fp, #16
2fae0                 | LR__4924
2fae0     A7 F0 03 F6 | 	mov	ptra, fp
2fae4     B2 00 A0 FD | 	call	#popregs_
2fae8                 | _fatfs_cc_send_cmd_1140_ret
2fae8     2D 00 64 FD | 	ret
2faec                 | 
2faec                 | _fatfs_cc_disk_deinitialize
2faec     03 4A 05 F6 | 	mov	COUNT_, #3
2faf0     A8 00 A0 FD | 	call	#pushregs_
2faf4     00 12 4E F2 | 	cmps	arg01, #0 wz
2faf8     01 00 00 FF 
2fafc     14 E4 05 F1 | 	add	objptr, ##532
2fb00     F2 12 02 FB | 	rdlong	arg01, objptr
2fb04     04 E4 85 F1 | 	sub	objptr, #4
2fb08     F2 1E 02 FB | 	rdlong	local01, objptr
2fb0c     08 E4 05 F1 | 	add	objptr, #8
2fb10     F2 20 02 FB | 	rdlong	local02, objptr
2fb14     04 E4 05 F1 | 	add	objptr, #4
2fb18     F2 22 02 FB | 	rdlong	local03, objptr
2fb1c     01 00 00 FF 
2fb20     1C E4 85 F1 | 	sub	objptr, ##540
2fb24                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
2fb24                 | '         return RES_NOTRDY;
2fb24     03 FA 05 56 |  if_ne	mov	result1, #3
2fb28     2C 00 90 5D |  if_ne	jmp	#LR__4930
2fb2c     50 12 62 FD | 	fltl	arg01
2fb30     09 01 08 FC | 	wrpin	#0, arg01
2fb34     50 1E 62 FD | 	fltl	local01
2fb38     0F 01 08 FC | 	wrpin	#0, local01
2fb3c     50 20 62 FD | 	fltl	local02
2fb40     10 01 08 FC | 	wrpin	#0, local02
2fb44     50 22 62 FD | 	fltl	local03
2fb48     11 01 08 FC | 	wrpin	#0, local03
2fb4c     0A 12 06 F6 | 	mov	arg01, #10
2fb50     04 11 BF FD | 	call	#__system___waitms
2fb54                 | '     }
2fb54                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
2fb54                 | '     _pinclear(PIN_SS);
2fb54                 | '     _pinclear(PIN_CLK);
2fb54                 | '     _pinclear(PIN_DI);
2fb54                 | '     _pinclear(PIN_DO);
2fb54                 | ' 
2fb54                 | '     _waitms(10);
2fb54                 | ' 
2fb54                 | '     return 0;
2fb54     00 FA 05 F6 | 	mov	result1, #0
2fb58                 | LR__4930
2fb58     A7 F0 03 F6 | 	mov	ptra, fp
2fb5c     B2 00 A0 FD | 	call	#popregs_
2fb60                 | _fatfs_cc_disk_deinitialize_ret
2fb60     2D 00 64 FD | 	ret
2fb64                 | 
2fb64                 | _fatfs_cc_gettimeofday
2fb64     04 4A 05 F6 | 	mov	COUNT_, #4
2fb68     A8 00 A0 FD | 	call	#pushregs_
2fb6c     09 1F 02 F6 | 	mov	local01, arg01
2fb70     C0 0C BF FD | 	call	#__system___getus
2fb74     FD 12 02 F6 | 	mov	arg01, result1
2fb78     02 00 00 FF 
2fb7c     58 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
2fb80     F6 20 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
2fb84     09 FB 01 F6 | 	mov	result1, arg01
2fb88     10 FB 81 F1 | 	sub	result1, local02
2fb8c     A1 07 00 FF 
2fb90     40 FA 15 FD | 	qdiv	result1, ##1000000
2fb94     02 00 00 FF 
2fb98     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
2fb9c     18 20 62 FD | 	getqx	local02
2fba0     A1 07 00 FF 
2fba4     40 FA 15 FD | 	qdiv	result1, ##1000000
2fba8     00 20 0E F2 | 	cmp	local02, #0 wz
2fbac     19 22 62 FD | 	getqy	local03
2fbb0     28 00 90 AD |  if_e	jmp	#LR__4940
2fbb4     02 00 00 FF 
2fbb8     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
2fbbc     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
2fbc0     10 25 02 F1 | 	add	local04, local02
2fbc4     F6 24 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
2fbc8     11 13 82 F1 | 	sub	arg01, local03
2fbcc     04 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
2fbd0     F6 12 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
2fbd4     02 00 00 FF 
2fbd8     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
2fbdc                 | LR__4940
2fbdc     02 00 00 FF 
2fbe0     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
2fbe4     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
2fbe8     02 00 00 FF 
2fbec     54 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
2fbf0     0F 25 62 FC | 	wrlong	local04, local01
2fbf4     04 1E 06 F1 | 	add	local01, #4
2fbf8     0F 23 62 FC | 	wrlong	local03, local01
2fbfc                 | '         lastsec += secs;
2fbfc                 | '         lastus = now - leftover;
2fbfc                 | '     }
2fbfc                 | '     tv->tv_sec = lastsec;
2fbfc                 | '     tv->tv_usec = leftover;
2fbfc                 | '     return 0;
2fbfc     00 FA 05 F6 | 	mov	result1, #0
2fc00     A7 F0 03 F6 | 	mov	ptra, fp
2fc04     B2 00 A0 FD | 	call	#popregs_
2fc08                 | _fatfs_cc_gettimeofday_ret
2fc08     2D 00 64 FD | 	ret
2fc0c                 | 
2fc0c                 | _fatfs_cc__is_leap_year
2fc0c     09 FB 51 F6 | 	abs	result1, arg01 wc
2fc10     03 FA 05 F5 | 	and	result1, #3
2fc14     FD FA 89 F6 | 	negc	result1, result1 wz
2fc18     38 00 90 5D |  if_ne	jmp	#LR__4951
2fc1c     09 FB 51 F6 | 	abs	result1, arg01 wc
2fc20     64 FA 15 FD | 	qdiv	result1, #100
2fc24     19 FA 61 FD | 	getqy	result1
2fc28     FD FA 89 F6 | 	negc	result1, result1 wz
2fc2c     1C 00 90 5D |  if_ne	jmp	#LR__4950
2fc30     09 FB 51 F6 | 	abs	result1, arg01 wc
2fc34     90 FB 15 FD | 	qdiv	result1, #400
2fc38                 | '       return (0 == y % 400);
2fc38     00 FA 05 F6 | 	mov	result1, #0
2fc3c     19 00 62 FD | 	getqy	_var01
2fc40     00 01 8A F6 | 	negc	_var01, _var01 wz
2fc44     01 FA 05 A6 |  if_e	mov	result1, #1
2fc48     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
2fc4c                 | LR__4950
2fc4c                 | '     return 1;
2fc4c     01 FA 05 F6 | 	mov	result1, #1
2fc50     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
2fc54                 | LR__4951
2fc54                 | '   }
2fc54                 | '   return 0;
2fc54     00 FA 05 F6 | 	mov	result1, #0
2fc58                 | _fatfs_cc__is_leap_year_ret
2fc58     2D 00 64 FD | 	ret
2fc5c                 | 
2fc5c                 | _fatfs_cc___tzoffset
2fc5c     09 01 0A F6 | 	mov	_var01, arg01 wz
2fc60     FF FF FF FF 
2fc64     0A FF 6B FC | 	wrlong	##-1, arg02
2fc68     01 02 06 F6 | 	mov	_var02, #1
2fc6c     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
2fc70                 | '                 return 0;
2fc70     00 FA 05 A6 |  if_e	mov	result1, #0
2fc74     94 02 90 AD |  if_e	jmp	#LR__4977
2fc78     0A 01 68 FC | 	wrlong	#0, arg02
2fc7c     02 00 00 FF 
2fc80     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2fc84     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
2fc88                 | ' 
2fc88                 | '        *hasdst = 0;
2fc88                 | ' 
2fc88                 | ' 	n = stdname;
2fc88                 | '         while (*s && isalpha(*s)) {
2fc88     02 00 00 FF 
2fc8c     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
2fc90     97 28 48 FB | 	callpa	#(@LR__4961-@LR__4960)>>2,fcache_load_ptr_
2fc94                 | LR__4960
2fc94     00 05 CA FA | 	rdbyte	_var03, _var01 wz
2fc98     48 00 90 AD |  if_e	jmp	#LR__4962
2fc9c     00 13 C2 FA | 	rdbyte	arg01, _var01
2fca0                 | ' {
2fca0                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2fca0     80 12 36 F3 | 	fle	arg01, #128 wc
2fca4                 | '     return __ctype[c];
2fca4     02 00 00 FF 
2fca8     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2fcac     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2fcb0     09 FB C1 FA | 	rdbyte	result1, arg01
2fcb4     02 00 00 FF 
2fcb8     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2fcbc     0C FA CD F7 | 	test	result1, #12 wz
2fcc0     20 00 90 AD |  if_e	jmp	#LR__4962
2fcc4     00 09 02 F6 | 	mov	_var05, _var01
2fcc8     00 0B 02 F6 | 	mov	_var06, _var01
2fccc     01 0A 06 F1 | 	add	_var06, #1
2fcd0     04 0D C2 FA | 	rdbyte	_var07, _var05
2fcd4     05 01 02 F6 | 	mov	_var01, _var06
2fcd8     03 0D 42 FC | 	wrbyte	_var07, _var04
2fcdc     01 06 06 F1 | 	add	_var04, #1
2fce0     B0 FF 9F FD | 	jmp	#LR__4960
2fce4                 | LR__4961
2fce4                 | LR__4962
2fce4     03 01 48 FC | 	wrbyte	#0, _var04
2fce8     00 0E 06 F6 | 	mov	_var08, #0
2fcec     00 05 C2 FA | 	rdbyte	_var03, _var01
2fcf0     2D 04 0E F2 | 	cmp	_var03, #45 wz
2fcf4     01 02 66 A6 |  if_e	neg	_var02, #1
2fcf8     01 00 06 A1 |  if_e	add	_var01, #1
2fcfc     97 28 48 FB | 	callpa	#(@LR__4964-@LR__4963)>>2,fcache_load_ptr_
2fd00                 | '                 sgn = -1;
2fd00                 | '                 s++;
2fd00                 | '         }
2fd00                 | '         while (isdigit(*s)) {
2fd00                 | LR__4963
2fd00     00 13 C2 FA | 	rdbyte	arg01, _var01
2fd04                 | ' {
2fd04                 | '   return  (__ctype_get(c) & 0x02 ) ;
2fd04     80 12 36 F3 | 	fle	arg01, #128 wc
2fd08                 | '     return __ctype[c];
2fd08     02 00 00 FF 
2fd0c     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2fd10     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2fd14     09 FB C1 FA | 	rdbyte	result1, arg01
2fd18     02 00 00 FF 
2fd1c     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2fd20     02 FA CD F7 | 	test	result1, #2 wz
2fd24     28 00 90 AD |  if_e	jmp	#LR__4965
2fd28     07 05 02 F6 | 	mov	_var03, _var08
2fd2c     02 04 66 F0 | 	shl	_var03, #2
2fd30     07 05 02 F1 | 	add	_var03, _var08
2fd34     01 04 66 F0 | 	shl	_var03, #1
2fd38     00 09 C2 FA | 	rdbyte	_var05, _var01
2fd3c     30 08 86 F1 | 	sub	_var05, #48
2fd40     04 05 02 F1 | 	add	_var03, _var05
2fd44     02 0F 02 F6 | 	mov	_var08, _var03
2fd48     01 00 06 F1 | 	add	_var01, #1
2fd4c     B0 FF 9F FD | 	jmp	#LR__4963
2fd50                 | LR__4964
2fd50                 | LR__4965
2fd50     07 00 00 FF 
2fd54     10 0E 06 FD | 	qmul	_var08, ##3600
2fd58     00 05 C2 FA | 	rdbyte	_var03, _var01
2fd5c     3A 04 0E F2 | 	cmp	_var03, #58 wz
2fd60     18 10 62 FD | 	getqx	_var09
2fd64     70 00 90 5D |  if_ne	jmp	#LR__4969
2fd68     00 0E 06 F6 | 	mov	_var08, #0
2fd6c     01 00 06 F1 | 	add	_var01, #1
2fd70     97 28 48 FB | 	callpa	#(@LR__4967-@LR__4966)>>2,fcache_load_ptr_
2fd74                 | '                 x = 0;
2fd74                 | '                 s++;
2fd74                 | '                 while (isdigit(*s)) {
2fd74                 | LR__4966
2fd74     00 13 C2 FA | 	rdbyte	arg01, _var01
2fd78                 | ' {
2fd78                 | '   return  (__ctype_get(c) & 0x02 ) ;
2fd78     80 12 36 F3 | 	fle	arg01, #128 wc
2fd7c                 | '     return __ctype[c];
2fd7c     02 00 00 FF 
2fd80     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2fd84     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2fd88     09 FB C1 FA | 	rdbyte	result1, arg01
2fd8c     02 00 00 FF 
2fd90     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2fd94     02 FA CD F7 | 	test	result1, #2 wz
2fd98     28 00 90 AD |  if_e	jmp	#LR__4968
2fd9c     07 05 02 F6 | 	mov	_var03, _var08
2fda0     02 04 66 F0 | 	shl	_var03, #2
2fda4     07 05 02 F1 | 	add	_var03, _var08
2fda8     01 04 66 F0 | 	shl	_var03, #1
2fdac     00 09 C2 FA | 	rdbyte	_var05, _var01
2fdb0     30 08 86 F1 | 	sub	_var05, #48
2fdb4     04 05 02 F1 | 	add	_var03, _var05
2fdb8     02 0F 02 F6 | 	mov	_var08, _var03
2fdbc     01 00 06 F1 | 	add	_var01, #1
2fdc0     B0 FF 9F FD | 	jmp	#LR__4966
2fdc4                 | LR__4967
2fdc4                 | LR__4968
2fdc4     07 0D 02 F6 | 	mov	_var07, _var08
2fdc8     04 0C 66 F0 | 	shl	_var07, #4
2fdcc     07 0D 82 F1 | 	sub	_var07, _var08
2fdd0     02 0C 66 F0 | 	shl	_var07, #2
2fdd4     06 11 02 F1 | 	add	_var09, _var07
2fdd8                 | LR__4969
2fdd8     02 00 00 FF 
2fddc     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
2fde0     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
2fde4     00 13 C2 FA | 	rdbyte	arg01, _var01
2fde8                 | ' {
2fde8                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2fde8     80 12 36 F3 | 	fle	arg01, #128 wc
2fdec                 | '     return __ctype[c];
2fdec     27 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
2fdf0     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2fdf4     09 FB C1 FA | 	rdbyte	result1, arg01
2fdf8     02 00 00 FF 
2fdfc     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2fe00     0C FA CD F7 | 	test	result1, #12 wz
2fe04     50 00 90 AD |  if_e	jmp	#LR__4972
2fe08     0A 03 68 FC | 	wrlong	#1, arg02
2fe0c                 | '                 *hasdst = 1;
2fe0c                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
2fe0c                 | LR__4970
2fe0c     00 05 CA FA | 	rdbyte	_var03, _var01 wz
2fe10     44 00 90 AD |  if_e	jmp	#LR__4971
2fe14     00 13 C2 FA | 	rdbyte	arg01, _var01
2fe18                 | ' {
2fe18                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2fe18     80 12 36 F3 | 	fle	arg01, #128 wc
2fe1c                 | '     return __ctype[c];
2fe1c     02 00 00 FF 
2fe20     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2fe24     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2fe28     09 FB C1 FA | 	rdbyte	result1, arg01
2fe2c     02 00 00 FF 
2fe30     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2fe34     0C FA CD F7 | 	test	result1, #12 wz
2fe38     1C 00 90 AD |  if_e	jmp	#LR__4971
2fe3c     00 0B 02 F6 | 	mov	_var06, _var01
2fe40     01 0A 06 F1 | 	add	_var06, #1
2fe44     00 0D C2 FA | 	rdbyte	_var07, _var01
2fe48     05 01 02 F6 | 	mov	_var01, _var06
2fe4c     03 0D 42 FC | 	wrbyte	_var07, _var04
2fe50     01 06 06 F1 | 	add	_var04, #1
2fe54     B4 FF 9F FD | 	jmp	#LR__4970
2fe58                 | LR__4971
2fe58                 | LR__4972
2fe58     03 01 48 FC | 	wrbyte	#0, _var04
2fe5c     02 00 00 FF 
2fe60     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2fe64     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
2fe68     02 00 00 FF 
2fe6c     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
2fe70     20 00 90 AD |  if_e	jmp	#LR__4973
2fe74     02 00 00 FF 
2fe78     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2fe7c     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2fe80     08 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
2fe84     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2fe88     02 00 00 FF 
2fe8c     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
2fe90     1C 00 90 FD | 	jmp	#LR__4974
2fe94                 | LR__4973
2fe94     02 00 00 FF 
2fe98     3E ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
2fe9c     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2fea0     1A EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
2fea4     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2fea8     02 00 00 FF 
2feac     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
2feb0                 | LR__4974
2feb0     02 00 00 FF 
2feb4     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
2feb8     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
2febc     02 00 00 FF 
2fec0     35 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
2fec4     20 00 90 AD |  if_e	jmp	#LR__4975
2fec8     02 00 00 FF 
2fecc     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
2fed0     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2fed4     0D EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
2fed8     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2fedc     02 00 00 FF 
2fee0     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
2fee4     1C 00 90 FD | 	jmp	#LR__4976
2fee8                 | LR__4975
2fee8     02 00 00 FF 
2feec     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2fef0     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2fef4     04 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
2fef8     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2fefc     02 00 00 FF 
2ff00     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
2ff04                 | LR__4976
2ff04     08 03 02 FD | 	qmul	_var02, _var09
2ff08                 | ' 		_tzname[1] = stdname;
2ff08                 | ' 
2ff08                 | '         return sgn * off;
2ff08     18 FA 61 FD | 	getqx	result1
2ff0c                 | LR__4977
2ff0c                 | _fatfs_cc___tzoffset_ret
2ff0c     2D 00 64 FD | 	ret
2ff10                 | 
2ff10                 | _fatfs_cc___indst
2ff10     10 12 06 F1 | 	add	arg01, #16
2ff14     09 01 02 FB | 	rdlong	_var01, arg01
2ff18     10 12 86 F1 | 	sub	arg01, #16
2ff1c     02 00 0E F2 | 	cmp	_var01, #2 wz
2ff20     30 00 90 5D |  if_ne	jmp	#LR__4980
2ff24     07 00 06 F6 | 	mov	_var01, #7
2ff28     18 12 06 F1 | 	add	arg01, #24
2ff2c     09 03 02 FB | 	rdlong	_var02, arg01
2ff30     01 01 02 F1 | 	add	_var01, _var02
2ff34     0C 12 86 F1 | 	sub	arg01, #12
2ff38     09 05 02 FB | 	rdlong	_var03, arg01
2ff3c     02 01 82 F1 | 	sub	_var01, _var03
2ff40     00 00 56 F2 | 	cmps	_var01, #0 wc
2ff44                 | '                         return 1;
2ff44     01 FA 05 C6 |  if_b	mov	result1, #1
2ff48     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
2ff4c                 | '                 return 0;
2ff4c     00 FA 05 F6 | 	mov	result1, #0
2ff50     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
2ff54                 | LR__4980
2ff54     10 12 06 F1 | 	add	arg01, #16
2ff58     09 01 02 FB | 	rdlong	_var01, arg01
2ff5c     10 12 86 F1 | 	sub	arg01, #16
2ff60     0A 00 0E F2 | 	cmp	_var01, #10 wz
2ff64     28 00 90 5D |  if_ne	jmp	#LR__4981
2ff68     18 12 06 F1 | 	add	arg01, #24
2ff6c     09 01 02 FB | 	rdlong	_var01, arg01
2ff70     0C 12 86 F1 | 	sub	arg01, #12
2ff74     09 07 02 FB | 	rdlong	_var04, arg01
2ff78     03 01 82 F1 | 	sub	_var01, _var04
2ff7c     00 00 56 F2 | 	cmps	_var01, #0 wc
2ff80                 | '                         return 0;
2ff80     00 FA 05 C6 |  if_b	mov	result1, #0
2ff84     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
2ff88                 | '                 return 1;
2ff88     01 FA 05 F6 | 	mov	result1, #1
2ff8c     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
2ff90                 | LR__4981
2ff90                 | '         }
2ff90                 | ' 
2ff90                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
2ff90     00 00 06 F6 | 	mov	_var01, #0
2ff94     10 12 06 F1 | 	add	arg01, #16
2ff98     09 03 02 FB | 	rdlong	_var02, arg01
2ff9c     10 12 86 F1 | 	sub	arg01, #16
2ffa0     03 02 56 F2 | 	cmps	_var02, #3 wc
2ffa4     10 00 90 CD |  if_b	jmp	#LR__4982
2ffa8     10 12 06 F1 | 	add	arg01, #16
2ffac     09 05 02 FB | 	rdlong	_var03, arg01
2ffb0     0A 04 56 F2 | 	cmps	_var03, #10 wc
2ffb4     01 00 06 C6 |  if_b	mov	_var01, #1
2ffb8                 | LR__4982
2ffb8     00 FB 01 F6 | 	mov	result1, _var01
2ffbc                 | _fatfs_cc___indst_ret
2ffbc     2D 00 64 FD | 	ret
2ffc0                 | 
2ffc0                 | ' 	
2ffc0                 | ' 	FUNCTION pfunc(c as integer) as integer
2ffc0                 | ___strs_cl_pfunc
2ffc0                 | ' 		if (i < 16) then
2ffc0     04 E4 05 F1 | 	add	objptr, #4
2ffc4     F2 FA 01 FB | 	rdlong	result1, objptr
2ffc8     04 E4 85 F1 | 	sub	objptr, #4
2ffcc     10 FA 55 F2 | 	cmps	result1, #16 wc
2ffd0     2C 00 90 3D |  if_ae	jmp	#LR__4990
2ffd4     F2 FA 01 FB | 	rdlong	result1, objptr
2ffd8     04 E4 05 F1 | 	add	objptr, #4
2ffdc     F2 00 02 FB | 	rdlong	_var01, objptr
2ffe0     FD 00 02 F1 | 	add	_var01, result1
2ffe4     00 13 42 FC | 	wrbyte	arg01, _var01
2ffe8     F2 FA 01 FB | 	rdlong	result1, objptr
2ffec     01 FA 05 F1 | 	add	result1, #1
2fff0     F2 FA 61 FC | 	wrlong	result1, objptr
2fff4     04 E4 85 F1 | 	sub	objptr, #4
2fff8                 | ' 			p(i) = c
2fff8                 | ' 			i = i+1
2fff8                 | ' 			return 1
2fff8     01 FA 05 F6 | 	mov	result1, #1
2fffc     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
30000                 | LR__4990
30000                 | ' 			return -1
30000     01 FA 65 F6 | 	neg	result1, #1
30004                 | ___strs_cl_pfunc_ret
30004     2D 00 64 FD | 	ret
30008                 | 
30008                 | __struct__s_vfs_file_t_putchar
30008     04 4A 05 F6 | 	mov	COUNT_, #4
3000c     A8 00 A0 FD | 	call	#pushregs_
30010     1C E4 05 F1 | 	add	objptr, #28
30014     F2 1E 0A FB | 	rdlong	local01, objptr wz
30018     1C E4 85 F1 | 	sub	objptr, #28
3001c     00 FA 05 A6 |  if_e	mov	result1, #0
30020     48 00 90 AD |  if_e	jmp	#LR__5000
30024     1C E4 05 F1 | 	add	objptr, #28
30028     F2 20 02 FB | 	rdlong	local02, objptr
3002c     10 23 02 F6 | 	mov	local03, local02
30030     1C E4 85 F1 | 	sub	objptr, #28
30034     13 22 46 F7 | 	zerox	local03, #19
30038     14 20 46 F0 | 	shr	local02, #20
3003c     02 20 66 F0 | 	shl	local02, #2
30040     ED 20 02 F1 | 	add	local02, __methods__
30044     10 21 02 FB | 	rdlong	local02, local02
30048     F2 14 02 F6 | 	mov	arg02, objptr
3004c     F2 24 02 F6 | 	mov	local04, objptr
30050     11 E5 01 F6 | 	mov	objptr, local03
30054     2D 20 62 FD | 	call	local02
30058     12 E5 01 F6 | 	mov	objptr, local04
3005c                 | '     return (i < 0) ? 0 : 1;
3005c     00 FA 55 F2 | 	cmps	result1, #0 wc
30060     00 1E 06 C6 |  if_b	mov	local01, #0
30064     01 1E 06 36 |  if_ae	mov	local01, #1
30068     0F FB 01 F6 | 	mov	result1, local01
3006c                 | LR__5000
3006c     A7 F0 03 F6 | 	mov	ptra, fp
30070     B2 00 A0 FD | 	call	#popregs_
30074                 | __struct__s_vfs_file_t_putchar_ret
30074     2D 00 64 FD | 	ret
30078                 | 
30078                 | __struct__s_vfs_file_t_getchar
30078     03 4A 05 F6 | 	mov	COUNT_, #3
3007c     A8 00 A0 FD | 	call	#pushregs_
30080     20 E4 05 F1 | 	add	objptr, #32
30084     F2 12 0A FB | 	rdlong	arg01, objptr wz
30088     20 E4 85 F1 | 	sub	objptr, #32
3008c     01 FA 65 A6 |  if_e	neg	result1, #1
30090     38 00 90 AD |  if_e	jmp	#LR__5010
30094                 | '     return getcf(__this);
30094     20 E4 05 F1 | 	add	objptr, #32
30098     F2 1E 02 FB | 	rdlong	local01, objptr
3009c     0F 21 02 F6 | 	mov	local02, local01
300a0     20 E4 85 F1 | 	sub	objptr, #32
300a4     13 20 46 F7 | 	zerox	local02, #19
300a8     14 1E 46 F0 | 	shr	local01, #20
300ac     02 1E 66 F0 | 	shl	local01, #2
300b0     ED 1E 02 F1 | 	add	local01, __methods__
300b4     0F 1F 02 FB | 	rdlong	local01, local01
300b8     F2 12 02 F6 | 	mov	arg01, objptr
300bc     F2 22 02 F6 | 	mov	local03, objptr
300c0     10 E5 01 F6 | 	mov	objptr, local02
300c4     2D 1E 62 FD | 	call	local01
300c8     11 E5 01 F6 | 	mov	objptr, local03
300cc                 | LR__5010
300cc     A7 F0 03 F6 | 	mov	ptra, fp
300d0     B2 00 A0 FD | 	call	#popregs_
300d4                 | __struct__s_vfs_file_t_getchar_ret
300d4     2D 00 64 FD | 	ret
300d8                 | 
300d8                 | __struct___bas_wrap_sender_tx
300d8     03 4A 05 F6 | 	mov	COUNT_, #3
300dc     A8 00 A0 FD | 	call	#pushregs_
300e0     F2 1E 02 FB | 	rdlong	local01, objptr
300e4     0F 21 02 F6 | 	mov	local02, local01
300e8     13 1E 46 F7 | 	zerox	local01, #19
300ec     14 20 46 F0 | 	shr	local02, #20
300f0     02 20 66 F0 | 	shl	local02, #2
300f4     ED 20 02 F1 | 	add	local02, __methods__
300f8     10 21 02 FB | 	rdlong	local02, local02
300fc     F2 22 02 F6 | 	mov	local03, objptr
30100     0F E5 01 F6 | 	mov	objptr, local01
30104     2D 20 62 FD | 	call	local02
30108     11 E5 01 F6 | 	mov	objptr, local03
3010c     01 FA 05 F6 | 	mov	result1, #1
30110     A7 F0 03 F6 | 	mov	ptra, fp
30114     B2 00 A0 FD | 	call	#popregs_
30118                 | __struct___bas_wrap_sender_tx_ret
30118     2D 00 64 FD | 	ret
3011c                 | 
3011c                 | __struct___bas_wrap_sender_rx
3011c     03 4A 05 F6 | 	mov	COUNT_, #3
30120     A8 00 A0 FD | 	call	#pushregs_
30124     04 E4 05 F1 | 	add	objptr, #4
30128     F2 1E 02 FB | 	rdlong	local01, objptr
3012c     0F 21 02 F6 | 	mov	local02, local01
30130     04 E4 85 F1 | 	sub	objptr, #4
30134     13 20 46 F7 | 	zerox	local02, #19
30138     14 1E 46 F0 | 	shr	local01, #20
3013c     02 1E 66 F0 | 	shl	local01, #2
30140     ED 1E 02 F1 | 	add	local01, __methods__
30144     0F 1F 02 FB | 	rdlong	local01, local01
30148     F2 22 02 F6 | 	mov	local03, objptr
3014c     10 E5 01 F6 | 	mov	objptr, local02
30150     2D 1E 62 FD | 	call	local01
30154     11 E5 01 F6 | 	mov	objptr, local03
30158     A7 F0 03 F6 | 	mov	ptra, fp
3015c     B2 00 A0 FD | 	call	#popregs_
30160                 | __struct___bas_wrap_sender_rx_ret
30160     2D 00 64 FD | 	ret
30164                 | 
30164                 | __struct___bas_wrap_sender_close
30164     03 4A 05 F6 | 	mov	COUNT_, #3
30168     A8 00 A0 FD | 	call	#pushregs_
3016c     08 E4 05 F1 | 	add	objptr, #8
30170     F2 1E 02 FB | 	rdlong	local01, objptr
30174     0F 21 02 F6 | 	mov	local02, local01
30178     08 E4 85 F1 | 	sub	objptr, #8
3017c     13 20 46 F7 | 	zerox	local02, #19
30180     14 1E 46 F0 | 	shr	local01, #20
30184     02 1E 66 F0 | 	shl	local01, #2
30188     ED 1E 02 F1 | 	add	local01, __methods__
3018c     0F 1F 02 FB | 	rdlong	local01, local01
30190     F2 22 02 F6 | 	mov	local03, objptr
30194     10 E5 01 F6 | 	mov	objptr, local02
30198     2D 1E 62 FD | 	call	local01
3019c     11 E5 01 F6 | 	mov	objptr, local03
301a0     A7 F0 03 F6 | 	mov	ptra, fp
301a4     B2 00 A0 FD | 	call	#popregs_
301a8                 | __struct___bas_wrap_sender_close_ret
301a8     2D 00 64 FD | 	ret
301ac                 | 
301ac                 | LR__5020
301ac     2F          | 	byte	"/"
301ad     00          | 	byte	0
301ae                 | LR__5021
301ae     69 6E 66    | 	byte	"inf"
301b1     00          | 	byte	0
301b2                 | LR__5022
301b2     6E 61 6E    | 	byte	"nan"
301b5     00          | 	byte	0
301b6                 | LR__5023
301b6                 | 	byte	
301b6     00          | 	byte	0
301b7                 | LR__5024
301b7                 | 	byte	
301b7     00          | 	byte	0
301b8                 | LR__5025
301b8                 | 	byte	
301b8     00          | 	byte	0
301b9                 | LR__5026
301b9                 | 	byte	
301b9     00          | 	byte	0
301ba                 | LR__5027
301ba                 | 	byte	
301ba     00          | 	byte	0
301bb                 | LR__5028
301bb                 | 	byte	
301bb     00          | 	byte	0
301bc                 | LR__5029
301bc                 | 	byte	
301bc     00          | 	byte	0
301bd                 | LR__5030
301bd                 | 	byte	
301bd     00          | 	byte	0
301be                 | LR__5031
301be     00          | 	byte	0
301bf     00          | 	byte	0
301c0                 | LR__5032
301c0     00          | 	byte	0
301c1     00          | 	byte	0
301c2                 | LR__5033
301c2     00          | 	byte	0
301c3     00          | 	byte	0
301c4                 | LR__5034
301c4     20 21 21 21 
301c8     20 63 6F 72 
301cc     72 75 70 74 
301d0     65 64 20 68 
301d4     65 61 70 3F 
301d8     3F 3F 20 21 
301dc     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
301df     00          | 	byte	0
301e0                 | LR__5035
301e0     20 21 21 21 
301e4     20 6F 75 74 
301e8     20 6F 66 20 
301ec     68 65 61 70 
301f0     20 6D 65 6D 
301f4     6F 72 79 20 
301f8     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
301fc     00          | 	byte	0
301fd                 | LR__5036
301fd     20 21 21 21 
30201     20 63 6F 72 
30205     72 75 70 74 
30209     65 64 20 68 
3020d     65 61 70 20 
30211     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
30215     00          | 	byte	0
30216                 | LR__5037
30216     00          | 	byte	0
30217     00          | 	byte	0
30218                 | LR__5038
30218     2E          | 	byte	"."
30219     00          | 	byte	0
3021a                 | LR__5039
3021a     00          | 	byte	0
3021b     00          | 	byte	0
3021c                 | LR__5040
3021c     00          | 	byte	0
3021d     00          | 	byte	0
3021e                 | LR__5041
3021e     00          | 	byte	0
3021f     00          | 	byte	0
30220                 | LR__5042
30220     2A 3A 3C 3E 
30224     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
30228     00          | 	byte	0
30229                 | LR__5043
30229     2B 2C 3B 3D 
3022d     5B 5D       | 	byte	"+,;=[]"
3022f     00          | 	byte	0
30230                 | LR__5044
30230     46 41 54 33 
30234     32 20 20 20 | 	byte	"FAT32   "
30238     00          | 	byte	0
30239                 | LR__5045
30239     54 5A       | 	byte	"TZ"
3023b     00          | 	byte	0
3023c                 | LR__5046
3023c     00          | 	byte	0
3023d     00          | 	byte	0
3023e                 | LR__5047
3023e                 | 	byte	
3023e     00          | 	byte	0
3023f                 | LR__5048
3023f                 | 	byte	
3023f     00          | 	byte	0
30240                 | LR__5049
30240                 | 	byte	
30240     00          | 	byte	0
30241                 | LR__5050
30241                 | 	byte	
30241     00          | 	byte	0
30242                 | LR__5051
30242     22          | 	byte	34
30243     00          | 	byte	0
30244                 | LR__5052
30244     22          | 	byte	34
30245     00          | 	byte	0
30246                 | LR__5053
30246     3A          | 	byte	":"
30247     00          | 	byte	0
30248                 | LR__5054
30248                 | 	byte	
30248     00          | 	byte	0
30249                 | LR__5055
30249                 | 	byte	
30249     00          | 	byte	0
3024a                 | LR__5056
3024a                 | 	byte	
3024a     00          | 	byte	0
3024b                 | LR__5057
3024b                 | 	byte	
3024b     00          | 	byte	0
3024c                 | LR__5058
3024c                 | 	byte	
3024c     00          | 	byte	0
3024d                 | LR__5059
3024d                 | 	byte	
3024d     00          | 	byte	0
3024e                 | LR__5060
3024e                 | 	byte	
3024e     00          | 	byte	0
3024f                 | LR__5061
3024f     30          | 	byte	"0"
30250     00          | 	byte	0
30251                 | LR__5062
30251     22          | 	byte	34
30252     00          | 	byte	0
30253                 | LR__5063
30253     22          | 	byte	34
30254     00          | 	byte	0
30255                 | LR__5064
30255     22          | 	byte	34
30256     00          | 	byte	0
30257                 | LR__5065
30257     22          | 	byte	34
30258     00          | 	byte	0
30259                 | LR__5066
30259     22          | 	byte	34
3025a     00          | 	byte	0
3025b                 | LR__5067
3025b     3E          | 	byte	">"
3025c     00          | 	byte	0
3025d                 | LR__5068
3025d     3C          | 	byte	"<"
3025e     00          | 	byte	0
3025f                 | LR__5069
3025f     2B          | 	byte	"+"
30260     00          | 	byte	0
30261                 | LR__5070
30261     2D          | 	byte	"-"
30262     00          | 	byte	0
30263                 | LR__5071
30263     2A          | 	byte	"*"
30264     00          | 	byte	0
30265                 | LR__5072
30265     2F          | 	byte	"/"
30266     00          | 	byte	0
30267                 | LR__5073
30267     5E          | 	byte	"^"
30268     00          | 	byte	0
30269                 | LR__5074
30269     3D          | 	byte	"="
3026a     00          | 	byte	0
3026b                 | LR__5075
3026b     2B          | 	byte	"+"
3026c     00          | 	byte	0
3026d                 | LR__5076
3026d     2B          | 	byte	"+"
3026e     00          | 	byte	0
3026f                 | LR__5077
3026f     2D          | 	byte	"-"
30270     00          | 	byte	0
30271                 | LR__5078
30271     2D          | 	byte	"-"
30272     00          | 	byte	0
30273                 | LR__5079
30273     3C          | 	byte	"<"
30274     00          | 	byte	0
30275                 | LR__5080
30275     3E          | 	byte	">"
30276     00          | 	byte	0
30277                 | LR__5081
30277     22          | 	byte	34
30278     00          | 	byte	0
30279                 | LR__5082
30279     22          | 	byte	34
3027a     00          | 	byte	0
3027b                 | LR__5083
3027b     65 6C 73 65 | 	byte	"else"
3027f     00          | 	byte	0
30280                 | LR__5084
30280     74 68 65 6E | 	byte	"then"
30284     00          | 	byte	0
30285                 | LR__5085
30285     2E          | 	byte	"."
30286     00          | 	byte	0
30287                 | LR__5086
30287     3F          | 	byte	"?"
30288     00          | 	byte	0
30289                 | LR__5087
30289     3F          | 	byte	"?"
3028a     00          | 	byte	0
3028b                 | LR__5088
3028b     6D 6F 75 73 
3028f     65          | 	byte	"mouse"
30290     00          | 	byte	0
30291                 | LR__5089
30291     63 75 72 73 
30295     6F 72       | 	byte	"cursor"
30297     00          | 	byte	0
30298                 | LR__5090
30298     63 6C 69 63 
3029c     6B          | 	byte	"click"
3029d     00          | 	byte	0
3029e                 | LR__5091
3029e     6F 6E       | 	byte	"on"
302a0     00          | 	byte	0
302a1                 | LR__5092
302a1     31          | 	byte	"1"
302a2     00          | 	byte	0
302a3                 | LR__5093
302a3     6F 66 66    | 	byte	"off"
302a6     00          | 	byte	0
302a7                 | LR__5094
302a7     30          | 	byte	"0"
302a8     00          | 	byte	0
302a9                 | LR__5095
302a9     6D 6F 64 65 | 	byte	"mode"
302ad     00          | 	byte	0
302ae                 | LR__5096
302ae     6D 2E       | 	byte	"m."
302b0     00          | 	byte	0
302b1                 | LR__5097
302b1     61 74 61 72 
302b5     69          | 	byte	"atari"
302b6     00          | 	byte	0
302b7                 | LR__5098
302b7     30          | 	byte	"0"
302b8     00          | 	byte	0
302b9                 | LR__5099
302b9     70 63 5F 61 
302bd     6D 62 65 72 | 	byte	"pc_amber"
302c1     00          | 	byte	0
302c2                 | LR__5100
302c2     31          | 	byte	"1"
302c3     00          | 	byte	0
302c4                 | LR__5101
302c4     70 63 5F 67 
302c8     72 65 65 6E | 	byte	"pc_green"
302cc     00          | 	byte	0
302cd                 | LR__5102
302cd     32          | 	byte	"2"
302ce     00          | 	byte	0
302cf                 | LR__5103
302cf     70 63 5F 77 
302d3     68 69 74 65 | 	byte	"pc_white"
302d7     00          | 	byte	0
302d8                 | LR__5104
302d8     33          | 	byte	"3"
302d9     00          | 	byte	0
302da                 | LR__5105
302da     73 74       | 	byte	"st"
302dc     00          | 	byte	0
302dd                 | LR__5106
302dd     34          | 	byte	"4"
302de     00          | 	byte	0
302df                 | LR__5107
302df                 | 	byte	
302df     00          | 	byte	0
302e0                 | LR__5108
302e0     6C 6F 61 64 | 	byte	"load"
302e4     00          | 	byte	0
302e5                 | LR__5109
302e5     73 61 76 65 | 	byte	"save"
302e9     00          | 	byte	0
302ea                 | LR__5110
302ea     62 72 75 6E | 	byte	"brun"
302ee     00          | 	byte	0
302ef                 | LR__5111
302ef     72 75 6E    | 	byte	"run"
302f2     00          | 	byte	0
302f3                 | LR__5112
302f3     6C 6F 2E    | 	byte	"lo."
302f6     00          | 	byte	0
302f7                 | LR__5113
302f7     73 2E       | 	byte	"s."
302f9     00          | 	byte	0
302fa                 | LR__5114
302fa     62 72 2E    | 	byte	"br."
302fd     00          | 	byte	0
302fe                 | LR__5115
302fe     65 6E 74 65 
30302     72          | 	byte	"enter"
30303     00          | 	byte	0
30304                 | LR__5116
30304     65 2E       | 	byte	"e."
30306     00          | 	byte	0
30307                 | LR__5117
30307                 | 	byte	
30307     00          | 	byte	0
30308                 | LR__5118
30308                 | 	byte	
30308     00          | 	byte	0
30309                 | LR__5119
30309                 | 	byte	
30309     00          | 	byte	0
3030a                 | LR__5120
3030a                 | 	byte	
3030a     00          | 	byte	0
3030b                 | LR__5121
3030b                 | 	byte	
3030b     00          | 	byte	0
3030c                 | LR__5122
3030c     52 65 61 64 
30310     79          | 	byte	"Ready"
30311     00          | 	byte	0
30312                 | LR__5123
30312     2B          | 	byte	"+"
30313     00          | 	byte	0
30314                 | LR__5124
30314     2D          | 	byte	"-"
30315     00          | 	byte	0
30316                 | LR__5125
30316     6F 72       | 	byte	"or"
30318     00          | 	byte	0
30319                 | LR__5126
30319     78 6F 72    | 	byte	"xor"
3031c     00          | 	byte	0
3031d                 | LR__5127
3031d     2A          | 	byte	"*"
3031e     00          | 	byte	0
3031f                 | LR__5128
3031f     2F          | 	byte	"/"
30320     00          | 	byte	0
30321                 | LR__5129
30321     61 6E 64    | 	byte	"and"
30324     00          | 	byte	0
30325                 | LR__5130
30325     64 69 76    | 	byte	"div"
30328     00          | 	byte	0
30329                 | LR__5131
30329     6D 6F 64    | 	byte	"mod"
3032c     00          | 	byte	0
3032d                 | LR__5132
3032d     73 68 6C    | 	byte	"shl"
30330     00          | 	byte	0
30331                 | LR__5133
30331     73 68 72    | 	byte	"shr"
30334     00          | 	byte	0
30335                 | LR__5134
30335     5E          | 	byte	"^"
30336     00          | 	byte	0
30337                 | LR__5135
30337     6E 6F 74    | 	byte	"not"
3033a     00          | 	byte	0
3033b                 | LR__5136
3033b     40          | 	byte	"@"
3033c     00          | 	byte	0
3033d                 | LR__5137
3033d     3D          | 	byte	"="
3033e     00          | 	byte	0
3033f                 | LR__5138
3033f     3E 3D       | 	byte	">="
30341     00          | 	byte	0
30342                 | LR__5139
30342     3C 3D       | 	byte	"<="
30344     00          | 	byte	0
30345                 | LR__5140
30345     3C          | 	byte	"<"
30346     00          | 	byte	0
30347                 | LR__5141
30347     3E          | 	byte	">"
30348     00          | 	byte	0
30349                 | LR__5142
30349     3C 3E       | 	byte	"<>"
3034b     00          | 	byte	0
3034c                 | LR__5143
3034c     2B 2B       | 	byte	"++"
3034e     00          | 	byte	0
3034f                 | LR__5144
3034f     2D 2D       | 	byte	"--"
30351     00          | 	byte	0
30352                 | LR__5145
30352     23          | 	byte	"#"
30353     00          | 	byte	0
30354                 | LR__5146
30354     30          | 	byte	"0"
30355     00          | 	byte	0
30356                 | LR__5147
30356     39          | 	byte	"9"
30357     00          | 	byte	0
30358                 | LR__5148
30358     23 72 65 61 
3035c     64          | 	byte	"#read"
3035d     00          | 	byte	0
3035e                 | LR__5149
3035e     23 77 72 69 
30362     74 65       | 	byte	"#write"
30364     00          | 	byte	0
30365                 | LR__5150
30365     23 61 70 70 
30369     65 6E 64    | 	byte	"#append"
3036c     00          | 	byte	0
3036d                 | LR__5151
3036d     23          | 	byte	"#"
3036e     00          | 	byte	0
3036f                 | LR__5152
3036f     23          | 	byte	"#"
30370     00          | 	byte	0
30371                 | LR__5153
30371     2D          | 	byte	"-"
30372     00          | 	byte	0
30373                 | LR__5154
30373     30          | 	byte	"0"
30374     00          | 	byte	0
30375                 | LR__5155
30375     63          | 	byte	"c"
30376     00          | 	byte	0
30377                 | LR__5156
30377     63 23       | 	byte	"c#"
30379     00          | 	byte	0
3037a                 | LR__5157
3037a     64          | 	byte	"d"
3037b     00          | 	byte	0
3037c                 | LR__5158
3037c     64 23       | 	byte	"d#"
3037e     00          | 	byte	0
3037f                 | LR__5159
3037f     65          | 	byte	"e"
30380     00          | 	byte	0
30381                 | LR__5160
30381     66          | 	byte	"f"
30382     00          | 	byte	0
30383                 | LR__5161
30383     66 23       | 	byte	"f#"
30385     00          | 	byte	0
30386                 | LR__5162
30386     67          | 	byte	"g"
30387     00          | 	byte	0
30388                 | LR__5163
30388     67 23       | 	byte	"g#"
3038a     00          | 	byte	0
3038b                 | LR__5164
3038b     61          | 	byte	"a"
3038c     00          | 	byte	0
3038d                 | LR__5165
3038d     61 23       | 	byte	"a#"
3038f     00          | 	byte	0
30390                 | LR__5166
30390     68          | 	byte	"h"
30391     00          | 	byte	0
30392                 | LR__5167
30392     62          | 	byte	"b"
30393     00          | 	byte	0
30394                 | LR__5168
30394     2B          | 	byte	"+"
30395     00          | 	byte	0
30396                 | LR__5169
30396     2D          | 	byte	"-"
30397     00          | 	byte	0
30398                 | LR__5170
30398     3D          | 	byte	"="
30399     00          | 	byte	0
3039a                 | LR__5171
3039a     2C          | 	byte	","
3039b     00          | 	byte	0
3039c                 | LR__5172
3039c     2A          | 	byte	"*"
3039d     00          | 	byte	0
3039e                 | LR__5173
3039e     2F          | 	byte	"/"
3039f     00          | 	byte	0
303a0                 | LR__5174
303a0     3B          | 	byte	";"
303a1     00          | 	byte	0
303a2                 | LR__5175
303a2     22          | 	byte	34
303a3     00          | 	byte	0
303a4                 | LR__5176
303a4     5E          | 	byte	"^"
303a5     00          | 	byte	0
303a6                 | LR__5177
303a6     29          | 	byte	")"
303a7     00          | 	byte	0
303a8                 | LR__5178
303a8     28          | 	byte	"("
303a9     00          | 	byte	0
303aa                 | LR__5179
303aa     3A          | 	byte	":"
303ab     00          | 	byte	0
303ac                 | LR__5180
303ac     20          | 	byte	" "
303ad     00          | 	byte	0
303ae                 | LR__5181
303ae     3E          | 	byte	">"
303af     00          | 	byte	0
303b0                 | LR__5182
303b0     3C          | 	byte	"<"
303b1     00          | 	byte	0
303b2                 | LR__5183
303b2     3D          | 	byte	"="
303b3     00          | 	byte	0
303b4                 | LR__5184
303b4     62 65 65 70 | 	byte	"beep"
303b8     00          | 	byte	0
303b9                 | LR__5185
303b9     62 2E       | 	byte	"b."
303bb     00          | 	byte	0
303bc                 | LR__5186
303bc     62 6F 78    | 	byte	"box"
303bf     00          | 	byte	0
303c0                 | LR__5187
303c0     62 72 75 6E | 	byte	"brun"
303c4     00          | 	byte	0
303c5                 | LR__5188
303c5     62 72 2E    | 	byte	"br."
303c8     00          | 	byte	0
303c9                 | LR__5189
303c9     63 68 61 6E 
303cd     67 65 66 72 
303d1     65 71       | 	byte	"changefreq"
303d3     00          | 	byte	0
303d4                 | LR__5190
303d4     63 66 2E    | 	byte	"cf."
303d7     00          | 	byte	0
303d8                 | LR__5191
303d8     63 68 61 6E 
303dc     67 65 70 61 
303e0     6E          | 	byte	"changepan"
303e1     00          | 	byte	0
303e2                 | LR__5192
303e2     63 70 2E    | 	byte	"cp."
303e5     00          | 	byte	0
303e6                 | LR__5193
303e6     63 68 61 6E 
303ea     67 65 76 6F 
303ee     6C          | 	byte	"changevol"
303ef     00          | 	byte	0
303f0                 | LR__5194
303f0     63 76 2E    | 	byte	"cv."
303f3     00          | 	byte	0
303f4                 | LR__5195
303f4     63 68 61 6E 
303f8     67 65 77 61 
303fc     76 65       | 	byte	"changewave"
303fe     00          | 	byte	0
303ff                 | LR__5196
303ff     63 77 2E    | 	byte	"cw."
30402     00          | 	byte	0
30403                 | LR__5197
30403     63 69 72 63 
30407     6C 65       | 	byte	"circle"
30409     00          | 	byte	0
3040a                 | LR__5198
3040a     63 69 2E    | 	byte	"ci."
3040d     00          | 	byte	0
3040e                 | LR__5199
3040e     63 6C 69 63 
30412     6B          | 	byte	"click"
30413     00          | 	byte	0
30414                 | LR__5200
30414     63 6C 6F 73 
30418     65          | 	byte	"close"
30419     00          | 	byte	0
3041a                 | LR__5201
3041a     63 6C 73    | 	byte	"cls"
3041d     00          | 	byte	0
3041e                 | LR__5202
3041e     63 6F 6C 6F 
30422     72          | 	byte	"color"
30423     00          | 	byte	0
30424                 | LR__5203
30424     63 2E       | 	byte	"c."
30426     00          | 	byte	0
30427                 | LR__5204
30427     63 73 61 76 
3042b     65          | 	byte	"csave"
3042c     00          | 	byte	0
3042d                 | LR__5205
3042d     63 73 2E    | 	byte	"cs."
30430     00          | 	byte	0
30431                 | LR__5206
30431     63 75 72 73 
30435     6F 72       | 	byte	"cursor"
30437     00          | 	byte	0
30438                 | LR__5207
30438     64 65 66 73 
3043c     6E 64       | 	byte	"defsnd"
3043e     00          | 	byte	0
3043f                 | LR__5208
3043f     64 65 66 65 
30443     6E 76       | 	byte	"defenv"
30445     00          | 	byte	0
30446                 | LR__5209
30446     64 65 66 73 
3044a     70 72 69 74 
3044e     65          | 	byte	"defsprite"
3044f     00          | 	byte	0
30450                 | LR__5210
30450     64 73 2E    | 	byte	"ds."
30453     00          | 	byte	0
30454                 | LR__5211
30454     64 65 67    | 	byte	"deg"
30457     00          | 	byte	0
30458                 | LR__5212
30458     64 69 6D    | 	byte	"dim"
3045b     00          | 	byte	0
3045c                 | LR__5213
3045c     64 69 72    | 	byte	"dir"
3045f     00          | 	byte	0
30460                 | LR__5214
30460     64 70 6F 6B 
30464     65          | 	byte	"dpoke"
30465     00          | 	byte	0
30466                 | LR__5215
30466     64 72 61 77 | 	byte	"draw"
3046a     00          | 	byte	0
3046b                 | LR__5216
3046b     64 72 2E    | 	byte	"dr."
3046e     00          | 	byte	0
3046f                 | LR__5217
3046f     65 6C 73 65 | 	byte	"else"
30473     00          | 	byte	0
30474                 | LR__5218
30474     65 6E 64    | 	byte	"end"
30477     00          | 	byte	0
30478                 | LR__5219
30478     65 6E 74 65 
3047c     72          | 	byte	"enter"
3047d     00          | 	byte	0
3047e                 | LR__5220
3047e     65 2E       | 	byte	"e."
30480     00          | 	byte	0
30481                 | LR__5221
30481     66 63 69 72 
30485     63 6C 65    | 	byte	"fcircle"
30488     00          | 	byte	0
30489                 | LR__5222
30489     66 63 2E    | 	byte	"fc."
3048c     00          | 	byte	0
3048d                 | LR__5223
3048d     66 69 6C 6C | 	byte	"fill"
30491     00          | 	byte	0
30492                 | LR__5224
30492     66 69 2E    | 	byte	"fi."
30495     00          | 	byte	0
30496                 | LR__5225
30496     66 6F 6E 74 | 	byte	"font"
3049a     00          | 	byte	0
3049b                 | LR__5226
3049b     66 6F 72    | 	byte	"for"
3049e     00          | 	byte	0
3049f                 | LR__5227
3049f     66 2E       | 	byte	"f."
304a1     00          | 	byte	0
304a2                 | LR__5228
304a2     66 72 61 6D 
304a6     65          | 	byte	"frame"
304a7     00          | 	byte	0
304a8                 | LR__5229
304a8     66 72 2E    | 	byte	"fr."
304ab     00          | 	byte	0
304ac                 | LR__5230
304ac     67 65 74    | 	byte	"get"
304af     00          | 	byte	0
304b0                 | LR__5231
304b0     67 6F 73 75 
304b4     62          | 	byte	"gosub"
304b5     00          | 	byte	0
304b6                 | LR__5232
304b6     67 6F 74 6F | 	byte	"goto"
304ba     00          | 	byte	0
304bb                 | LR__5233
304bb     67 2E       | 	byte	"g."
304bd     00          | 	byte	0
304be                 | LR__5234
304be     69 66       | 	byte	"if"
304c0     00          | 	byte	0
304c1                 | LR__5235
304c1     69 6E 6B    | 	byte	"ink"
304c4     00          | 	byte	0
304c5                 | LR__5236
304c5     69 2E       | 	byte	"i."
304c7     00          | 	byte	0
304c8                 | LR__5237
304c8     6C 69 73 74 | 	byte	"list"
304cc     00          | 	byte	0
304cd                 | LR__5238
304cd     6C 2E       | 	byte	"l."
304cf     00          | 	byte	0
304d0                 | LR__5239
304d0     6C 6F 61 64 | 	byte	"load"
304d4     00          | 	byte	0
304d5                 | LR__5240
304d5     6C 6F 2E    | 	byte	"lo."
304d8     00          | 	byte	0
304d9                 | LR__5241
304d9     6C 70 6F 6B 
304dd     65          | 	byte	"lpoke"
304de     00          | 	byte	0
304df                 | LR__5242
304df     6D 6F 64 65 | 	byte	"mode"
304e3     00          | 	byte	0
304e4                 | LR__5243
304e4     6D 2E       | 	byte	"m."
304e6     00          | 	byte	0
304e7                 | LR__5244
304e7     6D 6F 75 73 
304eb     65          | 	byte	"mouse"
304ec     00          | 	byte	0
304ed                 | LR__5245
304ed     6E 65 77    | 	byte	"new"
304f0     00          | 	byte	0
304f1                 | LR__5246
304f1     6E 65 78 74 | 	byte	"next"
304f5     00          | 	byte	0
304f6                 | LR__5247
304f6     6E 2E       | 	byte	"n."
304f8     00          | 	byte	0
304f9                 | LR__5248
304f9     6F 70 65 6E | 	byte	"open"
304fd     00          | 	byte	0
304fe                 | LR__5249
304fe     70 61 70 65 
30502     72          | 	byte	"paper"
30503     00          | 	byte	0
30504                 | LR__5250
30504     70 61 2E    | 	byte	"pa."
30507     00          | 	byte	0
30508                 | LR__5251
30508     70 69 6E 66 
3050c     6C 6F 61 74 | 	byte	"pinfloat"
30510     00          | 	byte	0
30511                 | LR__5252
30511     70 69 6E 68 
30515     69          | 	byte	"pinhi"
30516     00          | 	byte	0
30517                 | LR__5253
30517     70 69 6E 6C 
3051b     6F          | 	byte	"pinlo"
3051c     00          | 	byte	0
3051d                 | LR__5254
3051d     70 69 6E 73 
30521     74 61 72 74 | 	byte	"pinstart"
30525     00          | 	byte	0
30526                 | LR__5255
30526     70 69 6E 74 
3052a     6F 67 67 6C 
3052e     65          | 	byte	"pintoggle"
3052f     00          | 	byte	0
30530                 | LR__5256
30530     70 69 6E 77 
30534     72 69 74 65 | 	byte	"pinwrite"
30538     00          | 	byte	0
30539                 | LR__5257
30539     70 6C 61 79 | 	byte	"play"
3053d     00          | 	byte	0
3053e                 | LR__5258
3053e     70 2E       | 	byte	"p."
30540     00          | 	byte	0
30541                 | LR__5259
30541     70 6C 6F 74 | 	byte	"plot"
30545     00          | 	byte	0
30546                 | LR__5260
30546     70 6C 2E    | 	byte	"pl."
30549     00          | 	byte	0
3054a                 | LR__5261
3054a     70 6F 6B 65 | 	byte	"poke"
3054e     00          | 	byte	0
3054f                 | LR__5262
3054f     70 6F 70    | 	byte	"pop"
30552     00          | 	byte	0
30553                 | LR__5263
30553     70 6F 73 69 
30557     74 69 6F 6E | 	byte	"position"
3055b     00          | 	byte	0
3055c                 | LR__5264
3055c     70 6F 73 2E | 	byte	"pos."
30560     00          | 	byte	0
30561                 | LR__5265
30561     70 72 69 6E 
30565     74          | 	byte	"print"
30566     00          | 	byte	0
30567                 | LR__5266
30567     3F          | 	byte	"?"
30568     00          | 	byte	0
30569                 | LR__5267
30569     70 75 74    | 	byte	"put"
3056c     00          | 	byte	0
3056d                 | LR__5268
3056d     72 61 64    | 	byte	"rad"
30570     00          | 	byte	0
30571                 | LR__5269
30571     72 65 6C 65 
30575     61 73 65    | 	byte	"release"
30578     00          | 	byte	0
30579                 | LR__5270
30579     72 65 6D    | 	byte	"rem"
3057c     00          | 	byte	0
3057d                 | LR__5271
3057d     27          | 	byte	"'"
3057e     00          | 	byte	0
3057f                 | LR__5272
3057f     72 65 74 75 
30583     72 6E       | 	byte	"return"
30585     00          | 	byte	0
30586                 | LR__5273
30586     72 75 6E    | 	byte	"run"
30589     00          | 	byte	0
3058a                 | LR__5274
3058a     73 61 76 65 | 	byte	"save"
3058e     00          | 	byte	0
3058f                 | LR__5275
3058f     73 2E       | 	byte	"s."
30591     00          | 	byte	0
30592                 | LR__5276
30592     73 65 74 64 
30596     65 6C 61 79 | 	byte	"setdelay"
3059a     00          | 	byte	0
3059b                 | LR__5277
3059b     73 64 2E    | 	byte	"sd."
3059e     00          | 	byte	0
3059f                 | LR__5278
3059f     73 65 74 65 
305a3     6E 76       | 	byte	"setenv"
305a5     00          | 	byte	0
305a6                 | LR__5279
305a6     73 65 2E    | 	byte	"se."
305a9     00          | 	byte	0
305aa                 | LR__5280
305aa     73 65 74 6C 
305ae     65 6E       | 	byte	"setlen"
305b0     00          | 	byte	0
305b1                 | LR__5281
305b1     73 6C 2E    | 	byte	"sl."
305b4     00          | 	byte	0
305b5                 | LR__5282
305b5     73 65 74 70 
305b9     61 6E       | 	byte	"setpan"
305bb     00          | 	byte	0
305bc                 | LR__5283
305bc     73 70       | 	byte	"sp"
305be     00          | 	byte	0
305bf                 | LR__5284
305bf     73 65 74 73 
305c3     75 73 74 61 
305c7     69 6E       | 	byte	"setsustain"
305c9     00          | 	byte	0
305ca                 | LR__5285
305ca     73 73 2E    | 	byte	"ss."
305cd     00          | 	byte	0
305ce                 | LR__5286
305ce     73 65 74 76 
305d2     6F 6C       | 	byte	"setvol"
305d4     00          | 	byte	0
305d5                 | LR__5287
305d5     73 76 2E    | 	byte	"sv."
305d8     00          | 	byte	0
305d9                 | LR__5288
305d9     73 65 74 77 
305dd     61 76 65    | 	byte	"setwave"
305e0     00          | 	byte	0
305e1                 | LR__5289
305e1     73 77 2E    | 	byte	"sw."
305e4     00          | 	byte	0
305e5                 | LR__5290
305e5     73 65 74 77 
305e9     61 76       | 	byte	"setwav"
305eb     00          | 	byte	0
305ec                 | LR__5291
305ec     73 68 75 74 
305f0     75 70       | 	byte	"shutup"
305f2     00          | 	byte	0
305f3                 | LR__5292
305f3     73 68 2E    | 	byte	"sh."
305f6     00          | 	byte	0
305f7                 | LR__5293
305f7     73 6F 75 6E 
305fb     64          | 	byte	"sound"
305fc     00          | 	byte	0
305fd                 | LR__5294
305fd     73 6F 2E    | 	byte	"so."
30600     00          | 	byte	0
30601                 | LR__5295
30601     73 70 72 69 
30605     74 65       | 	byte	"sprite"
30607     00          | 	byte	0
30608                 | LR__5296
30608     73 70 72 2E | 	byte	"spr."
3060c     00          | 	byte	0
3060d                 | LR__5297
3060d     74 68 65 6E | 	byte	"then"
30611     00          | 	byte	0
30612                 | LR__5298
30612     77 61 69 74 
30616     6D 73       | 	byte	"waitms"
30618     00          | 	byte	0
30619                 | LR__5299
30619     77 61 69 74 
3061d     63 6C 6F 63 
30621     6B          | 	byte	"waitclock"
30622     00          | 	byte	0
30623                 | LR__5300
30623     77 63 2E    | 	byte	"wc."
30626     00          | 	byte	0
30627                 | LR__5301
30627     77 61 69 74 
3062b     76 62 6C    | 	byte	"waitvbl"
3062e     00          | 	byte	0
3062f                 | LR__5302
3062f     77 76 2E    | 	byte	"wv."
30632     00          | 	byte	0
30633                 | LR__5303
30633     77 78 70 69 
30637     6E          | 	byte	"wxpin"
30638     00          | 	byte	0
30639                 | LR__5304
30639     77 79 70 69 
3063d     6E          | 	byte	"wypin"
3063e     00          | 	byte	0
3063f                 | LR__5305
3063f     61 62 73    | 	byte	"abs"
30642     00          | 	byte	0
30643                 | LR__5306
30643     61 63 6F 73 | 	byte	"acos"
30647     00          | 	byte	0
30648                 | LR__5307
30648     61 64 72    | 	byte	"adr"
3064b     00          | 	byte	0
3064c                 | LR__5308
3064c     61 64 64 72 | 	byte	"addr"
30650     00          | 	byte	0
30651                 | LR__5309
30651     61 73 63    | 	byte	"asc"
30654     00          | 	byte	0
30655                 | LR__5310
30655     61 73 69 6E | 	byte	"asin"
30659     00          | 	byte	0
3065a                 | LR__5311
3065a     61 74 6E    | 	byte	"atn"
3065d     00          | 	byte	0
3065e                 | LR__5312
3065e     62 69 6E 24 | 	byte	"bin$"
30662     00          | 	byte	0
30663                 | LR__5313
30663     63 68 72 24 | 	byte	"chr$"
30667     00          | 	byte	0
30668                 | LR__5314
30668     63 6F 73    | 	byte	"cos"
3066b     00          | 	byte	0
3066c                 | LR__5315
3066c     64 70 65 65 
30670     6B          | 	byte	"dpeek"
30671     00          | 	byte	0
30672                 | LR__5316
30672     66 72 65    | 	byte	"fre"
30675     00          | 	byte	0
30676                 | LR__5317
30676     67 65 74 70 
3067a     69 78 65 6C | 	byte	"getpixel"
3067e     00          | 	byte	0
3067f                 | LR__5318
3067f     67 65 2E    | 	byte	"ge."
30682     00          | 	byte	0
30683                 | LR__5319
30683     67 65 74 65 
30687     6E 76 73 75 
3068b     73 74 61 69 
3068f     6E          | 	byte	"getenvsustain"
30690     00          | 	byte	0
30691                 | LR__5320
30691     67 65 74 6E 
30695     6F 74 65 76 
30699     61 6C 75 65 | 	byte	"getnotevalue"
3069d     00          | 	byte	0
3069e                 | LR__5321
3069e     67 65 74 74 
306a2     69 6D 65    | 	byte	"gettime"
306a5     00          | 	byte	0
306a6                 | LR__5322
306a6     68 65 78 24 | 	byte	"hex$"
306aa     00          | 	byte	0
306ab                 | LR__5323
306ab     69 6E 6B 65 
306af     79 24       | 	byte	"inkey$"
306b1     00          | 	byte	0
306b2                 | LR__5324
306b2     69 6E 74    | 	byte	"int"
306b5     00          | 	byte	0
306b6                 | LR__5325
306b6     6C 65 66 74 
306ba     24          | 	byte	"left$"
306bb     00          | 	byte	0
306bc                 | LR__5326
306bc     6C 65 6E    | 	byte	"len"
306bf     00          | 	byte	0
306c0                 | LR__5327
306c0     6C 6F 67    | 	byte	"log"
306c3     00          | 	byte	0
306c4                 | LR__5328
306c4     6C 70 65 65 
306c8     6B          | 	byte	"lpeek"
306c9     00          | 	byte	0
306ca                 | LR__5329
306ca     6D 69 64 24 | 	byte	"mid$"
306ce     00          | 	byte	0
306cf                 | LR__5330
306cf     6D 6F 75 73 
306d3     65 6B       | 	byte	"mousek"
306d5     00          | 	byte	0
306d6                 | LR__5331
306d6     6D 6F 75 73 
306da     65 77       | 	byte	"mousew"
306dc     00          | 	byte	0
306dd                 | LR__5332
306dd     6D 6F 75 73 
306e1     65 78       | 	byte	"mousex"
306e3     00          | 	byte	0
306e4                 | LR__5333
306e4     6D 6F 75 73 
306e8     65 79       | 	byte	"mousey"
306ea     00          | 	byte	0
306eb                 | LR__5334
306eb     70 65 65 6B | 	byte	"peek"
306ef     00          | 	byte	0
306f0                 | LR__5335
306f0     70 69 6E 72 
306f4     65 61 64    | 	byte	"pinread"
306f7     00          | 	byte	0
306f8                 | LR__5336
306f8     72 64 70 69 
306fc     6E          | 	byte	"rdpin"
306fd     00          | 	byte	0
306fe                 | LR__5337
306fe     72 69 67 68 
30702     74 24       | 	byte	"right$"
30704     00          | 	byte	0
30705                 | LR__5338
30705     72 71 70 69 
30709     6E          | 	byte	"rqpin"
3070a     00          | 	byte	0
3070b                 | LR__5339
3070b     72 6F 75 6E 
3070f     64          | 	byte	"round"
30710     00          | 	byte	0
30711                 | LR__5340
30711     72 6E 64    | 	byte	"rnd"
30714     00          | 	byte	0
30715                 | LR__5341
30715     73 69 6E    | 	byte	"sin"
30718     00          | 	byte	0
30719                 | LR__5342
30719     73 71 72    | 	byte	"sqr"
3071c     00          | 	byte	0
3071d                 | LR__5343
3071d     73 74 69 63 
30721     6B          | 	byte	"stick"
30722     00          | 	byte	0
30723                 | LR__5344
30723     73 74 72 69 
30727     67          | 	byte	"strig"
30728     00          | 	byte	0
30729                 | LR__5345
30729     73 74 72 24 | 	byte	"str$"
3072d     00          | 	byte	0
3072e                 | LR__5346
3072e     74 61 6E    | 	byte	"tan"
30731     00          | 	byte	0
30732                 | LR__5347
30732     76 61 6C    | 	byte	"val"
30735     00          | 	byte	0
30736                 | LR__5348
30736     76 61 72 70 
3073a     74 72       | 	byte	"varptr"
3073c     00          | 	byte	0
3073d                 | LR__5349
3073d     61          | 	byte	"a"
3073e     00          | 	byte	0
3073f                 | LR__5350
3073f     7A          | 	byte	"z"
30740     00          | 	byte	0
30741                 | LR__5351
30741     5F          | 	byte	"_"
30742     00          | 	byte	0
30743                 | LR__5352
30743     61          | 	byte	"a"
30744     00          | 	byte	0
30745                 | LR__5353
30745     7A          | 	byte	"z"
30746     00          | 	byte	0
30747                 | LR__5354
30747     30          | 	byte	"0"
30748     00          | 	byte	0
30749                 | LR__5355
30749     39          | 	byte	"9"
3074a     00          | 	byte	0
3074b                 | LR__5356
3074b     5F          | 	byte	"_"
3074c     00          | 	byte	0
3074d                 | LR__5357
3074d     2E          | 	byte	"."
3074e     00          | 	byte	0
3074f                 | LR__5358
3074f     61          | 	byte	"a"
30750     00          | 	byte	0
30751                 | LR__5359
30751     7A          | 	byte	"z"
30752     00          | 	byte	0
30753                 | LR__5360
30753     30          | 	byte	"0"
30754     00          | 	byte	0
30755                 | LR__5361
30755     39          | 	byte	"9"
30756     00          | 	byte	0
30757                 | LR__5362
30757     5F          | 	byte	"_"
30758     00          | 	byte	0
30759                 | LR__5363
30759     24          | 	byte	"$"
3075a     00          | 	byte	0
3075b                 | LR__5364
3075b     25          | 	byte	"%"
3075c     00          | 	byte	0
3075d                 | LR__5365
3075d     21          | 	byte	"!"
3075e     00          | 	byte	0
3075f                 | LR__5366
3075f     30          | 	byte	"0"
30760     00          | 	byte	0
30761                 | LR__5367
30761     39          | 	byte	"9"
30762     00          | 	byte	0
30763                 | LR__5368
30763     2E          | 	byte	"."
30764     00          | 	byte	0
30765                 | LR__5369
30765     24          | 	byte	"$"
30766     00          | 	byte	0
30767                 | LR__5370
30767     25          | 	byte	"%"
30768     00          | 	byte	0
30769                 | LR__5371
30769     2D          | 	byte	"-"
3076a     00          | 	byte	0
3076b                 | LR__5372
3076b     2E          | 	byte	"."
3076c     00          | 	byte	0
3076d                 | LR__5373
3076d     24          | 	byte	"$"
3076e     00          | 	byte	0
3076f                 | LR__5374
3076f     25          | 	byte	"%"
30770     00          | 	byte	0
30771                 | LR__5375
30771     30          | 	byte	"0"
30772     00          | 	byte	0
30773                 | LR__5376
30773     39          | 	byte	"9"
30774     00          | 	byte	0
30775                 | LR__5377
30775     5F          | 	byte	"_"
30776     00          | 	byte	0
30777                 | LR__5378
30777     2E          | 	byte	"."
30778     00          | 	byte	0
30779                 | LR__5379
30779     45          | 	byte	"E"
3077a     00          | 	byte	0
3077b                 | LR__5380
3077b     65          | 	byte	"e"
3077c     00          | 	byte	0
3077d                 | LR__5381
3077d     2D          | 	byte	"-"
3077e     00          | 	byte	0
3077f                 | LR__5382
3077f     61          | 	byte	"a"
30780     00          | 	byte	0
30781                 | LR__5383
30781     66          | 	byte	"f"
30782     00          | 	byte	0
30783                 | LR__5384
30783     30          | 	byte	"0"
30784     00          | 	byte	0
30785                 | LR__5385
30785     31          | 	byte	"1"
30786     00          | 	byte	0
30787                 | LR__5386
30787     5F          | 	byte	"_"
30788     00          | 	byte	0
30789                 | LR__5387
30789     2D          | 	byte	"-"
3078a     00          | 	byte	0
3078b                 | LR__5388
3078b     65          | 	byte	"e"
3078c     00          | 	byte	0
3078d                 | LR__5389
3078d     2E          | 	byte	"."
3078e     00          | 	byte	0
3078f                 | LR__5390
3078f     45          | 	byte	"E"
30790     00          | 	byte	0
30791                 | LR__5391
30791     65          | 	byte	"e"
30792     00          | 	byte	0
30793                 | LR__5392
30793     30          | 	byte	"0"
30794     00          | 	byte	0
30795                 | LR__5393
30795     39          | 	byte	"9"
30796     00          | 	byte	0
30797                 | LR__5394
30797     24          | 	byte	"$"
30798     00          | 	byte	0
30799                 | LR__5395
30799     25          | 	byte	"%"
3079a     00          | 	byte	0
3079b                 | LR__5396
3079b     2D          | 	byte	"-"
3079c     00          | 	byte	0
3079d                 | LR__5397
3079d     24          | 	byte	"$"
3079e     00          | 	byte	0
3079f                 | LR__5398
3079f     25          | 	byte	"%"
307a0     00          | 	byte	0
307a1                 | LR__5399
307a1     30          | 	byte	"0"
307a2     00          | 	byte	0
307a3                 | LR__5400
307a3     39          | 	byte	"9"
307a4     00          | 	byte	0
307a5                 | LR__5401
307a5     5F          | 	byte	"_"
307a6     00          | 	byte	0
307a7                 | LR__5402
307a7     30          | 	byte	"0"
307a8     00          | 	byte	0
307a9                 | LR__5403
307a9     39          | 	byte	"9"
307aa     00          | 	byte	0
307ab                 | LR__5404
307ab     61          | 	byte	"a"
307ac     00          | 	byte	0
307ad                 | LR__5405
307ad     66          | 	byte	"f"
307ae     00          | 	byte	0
307af                 | LR__5406
307af     5F          | 	byte	"_"
307b0     00          | 	byte	0
307b1                 | LR__5407
307b1     30          | 	byte	"0"
307b2     00          | 	byte	0
307b3                 | LR__5408
307b3     31          | 	byte	"1"
307b4     00          | 	byte	0
307b5                 | LR__5409
307b5     5F          | 	byte	"_"
307b6     00          | 	byte	0
307b7                 | LR__5410
307b7     30          | 	byte	"0"
307b8     00          | 	byte	0
307b9                 | LR__5411
307b9     39          | 	byte	"9"
307ba     00          | 	byte	0
307bb                 | LR__5412
307bb     5F          | 	byte	"_"
307bc     00          | 	byte	0
307bd                 | LR__5413
307bd     22          | 	byte	34
307be     00          | 	byte	0
307bf                 | LR__5414
307bf     22          | 	byte	34
307c0     00          | 	byte	0
307c1                 | LR__5415
307c1     44 69 6D 3A 
307c5     20 61 74 20 
307c9     6C 69 6E 65 
307cd     20          | 	byte	"Dim: at line "
307ce     00          | 	byte	0
307cf                 | LR__5416
307cf     3A 20 77 61 
307d3     72 6E 69 6E 
307d7     67 3A 20 74 
307db     68 65 20 76 
307df     61 72 69 61 
307e3     62 6C 65 20 
307e7     65 78 69 73 
307eb     74 65 64 2E | 	byte	": warning: the variable existed."
307ef     00          | 	byte	0
307f0                 | LR__5417
307f0     28          | 	byte	"("
307f1     00          | 	byte	0
307f2                 | LR__5418
307f2     61 73       | 	byte	"as"
307f4     00          | 	byte	0
307f5                 | LR__5419
307f5     61 73       | 	byte	"as"
307f7     00          | 	byte	0
307f8                 | LR__5420
307f8     2C          | 	byte	","
307f9     00          | 	byte	0
307fa                 | LR__5421
307fa     29          | 	byte	")"
307fb     00          | 	byte	0
307fc                 | LR__5422
307fc     29          | 	byte	")"
307fd     00          | 	byte	0
307fe                 | LR__5423
307fe     61 73       | 	byte	"as"
30800     00          | 	byte	0
30801                 | LR__5424
30801     62 79 74 65 | 	byte	"byte"
30805     00          | 	byte	0
30806                 | LR__5425
30806     75 62 79 74 
3080a     65          | 	byte	"ubyte"
3080b     00          | 	byte	0
3080c                 | LR__5426
3080c     73 68 6F 72 
30810     74          | 	byte	"short"
30811     00          | 	byte	0
30812                 | LR__5427
30812     75 73 68 6F 
30816     72 74       | 	byte	"ushort"
30818     00          | 	byte	0
30819                 | LR__5428
30819     6C 6F 6E 67 | 	byte	"long"
3081d     00          | 	byte	0
3081e                 | LR__5429
3081e     69 6E 74 65 
30822     67 65 72    | 	byte	"integer"
30825     00          | 	byte	0
30826                 | LR__5430
30826     75 6C 6F 6E 
3082a     67          | 	byte	"ulong"
3082b     00          | 	byte	0
3082c                 | LR__5431
3082c     69 6E 74 36 
30830     34          | 	byte	"int64"
30831     00          | 	byte	0
30832                 | LR__5432
30832     75 69 6E 74 
30836     36 34       | 	byte	"uint64"
30838     00          | 	byte	0
30839                 | LR__5433
30839     73 69 6E 67 
3083d     6C 65       | 	byte	"single"
3083f     00          | 	byte	0
30840                 | LR__5434
30840     64 6F 75 62 
30844     6C 65       | 	byte	"double"
30846     00          | 	byte	0
30847                 | LR__5435
30847     73 74 72 69 
3084b     6E 67       | 	byte	"string"
3084d     00          | 	byte	0
3084e                 | LR__5436
3084e     74 6F       | 	byte	"to"
30850     00          | 	byte	0
30851                 | LR__5437
30851     73 74 65 70 | 	byte	"step"
30855     00          | 	byte	0
30856                 | LR__5438
30856     73 2E       | 	byte	"s."
30858     00          | 	byte	0
30859                 | LR__5439
30859     24          | 	byte	"$"
3085a     00          | 	byte	0
3085b                 | LR__5440
3085b     26 68       | 	byte	"&h"
3085d     00          | 	byte	0
3085e                 | LR__5441
3085e     25          | 	byte	"%"
3085f     00          | 	byte	0
30860                 | LR__5442
30860     26 62       | 	byte	"&b"
30862     00          | 	byte	0
30863                 | LR__5443
30863                 | 	byte	
30863     00          | 	byte	0
30864                 | LR__5444
30864     61 63 6F 73 
30868     3A 20       | 	byte	"acos: "
3086a     00          | 	byte	0
3086b                 | LR__5445
3086b     61 73 63 3A 
3086f     20          | 	byte	"asc: "
30870     00          | 	byte	0
30871                 | LR__5446
30871     61 73 63 3A 
30875     20          | 	byte	"asc: "
30876     00          | 	byte	0
30877                 | LR__5447
30877     61 73 69 6E 
3087b     3A 20       | 	byte	"asin: "
3087d     00          | 	byte	0
3087e                 | LR__5448
3087e     61 74 6E 3A 
30882     20          | 	byte	"atn: "
30883     00          | 	byte	0
30884                 | LR__5449
30884     62 69 6E 24 
30888     3A 20       | 	byte	"bin$: "
3088a     00          | 	byte	0
3088b                 | LR__5450
3088b     2F          | 	byte	"/"
3088c     00          | 	byte	0
3088d                 | LR__5451
3088d     2F 73 64 2F 
30891     62 69 6E 2F | 	byte	"/sd/bin/"
30895     00          | 	byte	0
30896                 | LR__5452
30896     53 79 73 74 
3089a     65 6D 20 65 
3089e     72 72 6F 72 
308a2     20          | 	byte	"System error "
308a3     00          | 	byte	0
308a4                 | LR__5453
308a4     3A 20       | 	byte	": "
308a6     00          | 	byte	0
308a7                 | LR__5454
308a7     63 68 72 24 
308ab     3A 20       | 	byte	"chr$: "
308ad     00          | 	byte	0
308ae                 | LR__5455
308ae     63 68 61 6E 
308b2     6E 65 6C 23 
308b6     20 65 78 70 
308ba     65 63 74 65 
308be     64          | 	byte	"channel# expected"
308bf     00          | 	byte	0
308c0                 | LR__5456
308c0     63 6F 73 3A 
308c4     20          | 	byte	"cos: "
308c5     00          | 	byte	0
308c6                 | LR__5457
308c6                 | 	byte	
308c6     00          | 	byte	0
308c7                 | LR__5458
308c7                 | 	byte	
308c7     00          | 	byte	0
308c8                 | LR__5459
308c8     2F 73 64 2F 
308cc     6D 65 64 69 
308d0     61 2F 68 2F | 	byte	"/sd/media/h/"
308d4     00          | 	byte	0
308d5                 | LR__5460
308d5     53 79 73 74 
308d9     65 6D 20 65 
308dd     72 72 6F 72 
308e1     20          | 	byte	"System error "
308e2     00          | 	byte	0
308e3                 | LR__5461
308e3     3A 20       | 	byte	": "
308e5     00          | 	byte	0
308e6                 | LR__5462
308e6                 | 	byte	
308e6     00          | 	byte	0
308e7                 | LR__5463
308e7                 | 	byte	
308e7     00          | 	byte	0
308e8                 | LR__5464
308e8     2F 73 64 2F 
308ec     6D 65 64 69 
308f0     61 2F 73 2F | 	byte	"/sd/media/s/"
308f4     00          | 	byte	0
308f5                 | LR__5465
308f5     53 79 73 74 
308f9     65 6D 20 65 
308fd     72 72 6F 72 
30901     20          | 	byte	"System error "
30902     00          | 	byte	0
30903                 | LR__5466
30903     3A 20       | 	byte	": "
30905     00          | 	byte	0
30906                 | LR__5467
30906     2F 73 64 2F 
3090a     62 61 73    | 	byte	"/sd/bas"
3090d     00          | 	byte	0
3090e                 | LR__5468
3090e     57 6F 72 6B 
30912     69 6E 67 20 
30916     64 69 72 65 
3091a     63 74 6F 72 
3091e     79 3A 20    | 	byte	"Working directory: "
30921     00          | 	byte	0
30922                 | LR__5469
30922                 | 	byte	
30922     00          | 	byte	0
30923                 | LR__5470
30923     2A          | 	byte	"*"
30924     00          | 	byte	0
30925                 | LR__5471
30925                 | 	byte	
30925     00          | 	byte	0
30926                 | LR__5472
30926     5B 64 69 72 
3092a     5D 20       | 	byte	"[dir] "
3092c     00          | 	byte	0
3092d                 | LR__5473
3092d     4D 6F 72 65 
30931     20 74 68 61 
30935     6E 20 31 32 
30939     38 20 65 6E 
3093d     74 72 69 65 
30941     73 20 66 6F 
30945     75 6E 64 3A 
30949     20 63 6C 65 
3094d     61 6E 20 79 
30951     6F 75 72 20 
30955     64 69 72 65 
30959     63 74 6F 72 
3095d     79          | 	byte	"More than 128 entries found: clean your directory"
3095e     00          | 	byte	0
3095f                 | LR__5474
3095f     2A          | 	byte	"*"
30960     00          | 	byte	0
30961                 | LR__5475
30961                 | 	byte	
30961     00          | 	byte	0
30962                 | LR__5476
30962     4D 6F 72 65 
30966     20 74 68 61 
3096a     6E 20 31 32 
3096e     38 20 65 6E 
30972     74 72 69 65 
30976     73 20 66 6F 
3097a     75 6E 64 3A 
3097e     20 63 6C 65 
30982     61 6E 20 79 
30986     6F 75 72 20 
3098a     64 69 72 65 
3098e     63 74 6F 72 
30992     79          | 	byte	"More than 128 entries found: clean your directory"
30993     00          | 	byte	0
30994                 | LR__5477
30994     45 72 72 6F 
30998     72 20       | 	byte	"Error "
3099a     00          | 	byte	0
3099b                 | LR__5478
3099b     3A 20       | 	byte	": "
3099d     00          | 	byte	0
3099e                 | LR__5479
3099e     67 65 74 65 
309a2     6E 76 73 75 
309a6     73 74 61 69 
309aa     6E 3A 20    | 	byte	"getenvsustain: "
309ad     00          | 	byte	0
309ae                 | LR__5480
309ae     67 65 74 70 
309b2     69 78 65 6C 
309b6     3A 20       | 	byte	"getpixel: "
309b8     00          | 	byte	0
309b9                 | LR__5481
309b9     68 65 78 24 
309bd     3A 20       | 	byte	"hex$: "
309bf     00          | 	byte	0
309c0                 | LR__5482
309c0                 | 	byte	
309c0     00          | 	byte	0
309c1                 | LR__5483
309c1     6C 65 66 74 
309c5     24 3A 20    | 	byte	"left$: "
309c8     00          | 	byte	0
309c9                 | LR__5484
309c9     6C 65 66 74 
309cd     24 3A 20    | 	byte	"left$: "
309d0     00          | 	byte	0
309d1                 | LR__5485
309d1     6C 65 6E 3A 
309d5     20          | 	byte	"len: "
309d6     00          | 	byte	0
309d7                 | LR__5486
309d7     6C 65 6E 3A 
309db     20          | 	byte	"len: "
309dc     00          | 	byte	0
309dd                 | LR__5487
309dd                 | 	byte	
309dd     00          | 	byte	0
309de                 | LR__5488
309de     2F          | 	byte	"/"
309df     00          | 	byte	0
309e0                 | LR__5489
309e0     2F          | 	byte	"/"
309e1     00          | 	byte	0
309e2                 | LR__5490
309e2     2E 62 61 73 | 	byte	".bas"
309e6     00          | 	byte	0
309e7                 | LR__5491
309e7     53 79 73 74 
309eb     65 6D 20 65 
309ef     72 72 6F 72 
309f3     20          | 	byte	"System error "
309f4     00          | 	byte	0
309f5                 | LR__5492
309f5     3A 20       | 	byte	": "
309f7     00          | 	byte	0
309f8                 | LR__5493
309f8     2E 62 61 73 | 	byte	".bas"
309fc     00          | 	byte	0
309fd                 | LR__5494
309fd     2F          | 	byte	"/"
309fe     00          | 	byte	0
309ff                 | LR__5495
309ff                 | 	byte	
309ff     00          | 	byte	0
30a00                 | LR__5496
30a00     4C 6F 61 64 
30a04     65 64 20    | 	byte	"Loaded "
30a07     00          | 	byte	0
30a08                 | LR__5497
30a08     2F          | 	byte	"/"
30a09     00          | 	byte	0
30a0a                 | LR__5498
30a0a     6C 6F 67 3A 
30a0e     20          | 	byte	"log: "
30a0f     00          | 	byte	0
30a10                 | LR__5499
30a10     6D 69 64 24 
30a14     3A 20       | 	byte	"mid$: "
30a16     00          | 	byte	0
30a17                 | LR__5500
30a17     6D 69 64 24 
30a1b     3A 20       | 	byte	"mid$: "
30a1d     00          | 	byte	0
30a1e                 | LR__5501
30a1e                 | 	byte	
30a1e     00          | 	byte	0
30a1f                 | LR__5502
30a1f     6E 6F 6E 61 
30a23     6D 65 2E 62 
30a27     61 73       | 	byte	"noname.bas"
30a29     00          | 	byte	0
30a2a                 | LR__5503
30a2a     66 69 6C 65 
30a2e     6E 61 6D 65 
30a32     20 65 78 70 
30a36     65 63 74 65 
30a3a     64          | 	byte	"filename expected"
30a3b     00          | 	byte	0
30a3c                 | LR__5504
30a3c     72 65 61 64 | 	byte	"read"
30a40     00          | 	byte	0
30a41                 | LR__5505
30a41     77 72 69 74 
30a45     65          | 	byte	"write"
30a46     00          | 	byte	0
30a47                 | LR__5506
30a47     61 70 70 65 
30a4b     6E 64       | 	byte	"append"
30a4d     00          | 	byte	0
30a4e                 | LR__5507
30a4e     63 68 61 6E 
30a52     6E 65 6C 23 
30a56     20 65 78 70 
30a5a     65 63 74 65 
30a5e     64          | 	byte	"channel# expected"
30a5f     00          | 	byte	0
30a60                 | LR__5508
30a60     4F 70 65 6E 
30a64     3A 20 69 6E 
30a68     76 61 6C 69 
30a6c     64 20 6D 6F 
30a70     64 65       | 	byte	"Open: invalid mode"
30a72     00          | 	byte	0
30a73                 | LR__5509
30a73     50 72 69 6E 
30a77     74 20 74 6F 
30a7b     20 63 68 61 
30a7f     6E 6E 65 6C 
30a83     20 28 6E 6F 
30a87     74 20 79 65 
30a8b     74 20 69 6D 
30a8f     70 6C 65 6D 
30a93     65 6E 74 65 
30a97     64 29       | 	byte	"Print to channel (not yet implemented)"
30a99     00          | 	byte	0
30a9a                 | LR__5510
30a9a     72 69 67 68 
30a9e     74 24 3A 20 | 	byte	"right$: "
30aa2     00          | 	byte	0
30aa3                 | LR__5511
30aa3     72 69 67 68 
30aa7     74 24 3A 20 | 	byte	"right$: "
30aab     00          | 	byte	0
30aac                 | LR__5512
30aac     72 6E 64 3A 
30ab0     20          | 	byte	"rnd: "
30ab1     00          | 	byte	0
30ab2                 | LR__5513
30ab2     72 6E 64 3A 
30ab6     20          | 	byte	"rnd: "
30ab7     00          | 	byte	0
30ab8                 | LR__5514
30ab8     53 74 6F 70 
30abc     70 65 64 20 
30ac0     61 74 20 6C 
30ac4     69 6E 65 20 | 	byte	"Stopped at line "
30ac8     00          | 	byte	0
30ac9                 | LR__5515
30ac9                 | 	byte	
30ac9     00          | 	byte	0
30aca                 | LR__5516
30aca     2F          | 	byte	"/"
30acb     00          | 	byte	0
30acc                 | LR__5517
30acc                 | 	byte	
30acc     00          | 	byte	0
30acd                 | LR__5518
30acd     53 61 76 65 
30ad1     64 20 61 73 
30ad5     20          | 	byte	"Saved as "
30ad6     00          | 	byte	0
30ad7                 | LR__5519
30ad7     2F          | 	byte	"/"
30ad8     00          | 	byte	0
30ad9                 | LR__5520
30ad9     73 69 6E 3A 
30add     20          | 	byte	"sin: "
30ade     00          | 	byte	0
30adf                 | LR__5521
30adf     73 71 72 3A 
30ae3     20          | 	byte	"sqr: "
30ae4     00          | 	byte	0
30ae5                 | LR__5522
30ae5     73 74 69 63 
30ae9     6B 3A 20    | 	byte	"stick: "
30aec     00          | 	byte	0
30aed                 | LR__5523
30aed     73 74 72 69 
30af1     67 3A 20    | 	byte	"strig: "
30af4     00          | 	byte	0
30af5                 | LR__5524
30af5     74 61 6E 3A 
30af9     20          | 	byte	"tan: "
30afa     00          | 	byte	0
30afb                 | LR__5525
30afb     76 61 6C 3A 
30aff     20          | 	byte	"val: "
30b00     00          | 	byte	0
30b01                 | LR__5526
30b01     76 61 6C 3A 
30b05     20          | 	byte	"val: "
30b06     00          | 	byte	0
30b07                 | LR__5527
30b07     24          | 	byte	"$"
30b08     00          | 	byte	0
30b09                 | LR__5528
30b09     26 68       | 	byte	"&h"
30b0b     00          | 	byte	0
30b0c                 | LR__5529
30b0c     25          | 	byte	"%"
30b0d     00          | 	byte	0
30b0e                 | LR__5530
30b0e     26 62       | 	byte	"&b"
30b10     00          | 	byte	0
30b11                 | LR__5531
30b11     20 42 41 53 
30b15     49 43 20 62 
30b19     79 74 65 73 
30b1d     20 66 72 65 
30b21     65          | 	byte	" BASIC bytes free"
30b22     00          | 	byte	0
30b23                 | LR__5532
30b23                 | 	byte	
30b23     00          | 	byte	0
30b24                 | LR__5533
30b24                 | 	byte	
30b24     00          | 	byte	0
30b25                 | LR__5534
30b25     45 78 70 65 
30b29     63 74 65 64 
30b2d     20 6E 75 6D 
30b31     62 65 72 2C 
30b35     20 67 6F 74 
30b39     20 73 6F 6D 
30b3d     65 74 68 69 
30b41     6E 67 20 65 
30b45     6C 73 65 2E | 	byte	"Expected number, got something else."
30b49     00          | 	byte	0
30b4a                 | LR__5535
30b4a     43 61 6E 6E 
30b4e     6F 74 20 61 
30b52     64 64 20 61 
30b56     20 6E 75 6D 
30b5a     62 65 72 20 
30b5e     74 6F 20 61 
30b62     20 73 74 72 
30b66     69 6E 67 2E | 	byte	"Cannot add a number to a string."
30b6a     00          | 	byte	0
30b6b                 | LR__5536
30b6b     43 61 6E 6E 
30b6f     6F 74 20 73 
30b73     75 62 73 74 
30b77     72 61 63 74 
30b7b     20 73 74 72 
30b7f     69 6E 67 73 
30b83     2E          | 	byte	"Cannot substract strings."
30b84     00          | 	byte	0
30b85                 | LR__5537
30b85     55 6E 6B 6E 
30b89     6F 77 6E 20 
30b8d     65 72 72 6F 
30b91     72 20 77 68 
30b95     69 6C 65 20 
30b99     61 64 64 69 
30b9d     6E 67 2E    | 	byte	"Unknown error while adding."
30ba0     00          | 	byte	0
30ba1                 | LR__5538
30ba1     55 6E 6B 6E 
30ba5     6F 77 6E 20 
30ba9     65 72 72 6F 
30bad     72 20 77 68 
30bb1     69 6C 65 20 
30bb5     73 75 62 73 
30bb9     74 72 61 63 
30bbd     74 69 6E 67 
30bc1     2E          | 	byte	"Unknown error while substracting."
30bc2     00          | 	byte	0
30bc3                 | LR__5539
30bc3     43 61 6E 6E 
30bc7     6F 74 20 64 
30bcb     6F 20 6C 6F 
30bcf     67 69 63 20 
30bd3     6F 70 65 72 
30bd7     61 74 69 6F 
30bdb     6E 20 6F 6E 
30bdf     20 73 74 72 
30be3     69 6E 67 20 
30be7     6F 72 20 66 
30beb     6C 6F 61 74 
30bef     2E          | 	byte	"Cannot do logic operation on string or float."
30bf0     00          | 	byte	0
30bf1                 | LR__5540
30bf1     55 6E 6B 6E 
30bf5     6F 77 6E 20 
30bf9     65 72 72 6F 
30bfd     72 20 77 68 
30c01     69 6C 65 20 
30c05     64 6F 69 6E 
30c09     67 20 6C 6F 
30c0d     67 69 63 20 
30c11     6F 70 65 72 
30c15     61 74 69 6F 
30c19     6E 2E       | 	byte	"Unknown error while doing logic operation."
30c1b     00          | 	byte	0
30c1c                 | LR__5541
30c1c     43 61 6E 6E 
30c20     6F 74 20 6D 
30c24     75 6C 74 69 
30c28     70 6C 79 20 
30c2c     73 74 72 69 
30c30     6E 67 73 2E | 	byte	"Cannot multiply strings."
30c34     00          | 	byte	0
30c35                 | LR__5542
30c35     55 6E 6B 6E 
30c39     6F 77 6E 20 
30c3d     65 72 72 6F 
30c41     72 20 77 68 
30c45     69 6C 65 20 
30c49     6D 75 6C 74 
30c4d     69 70 6C 79 
30c51     69 6E 67 2E | 	byte	"Unknown error while multiplying."
30c55     00          | 	byte	0
30c56                 | LR__5543
30c56     43 61 6E 6E 
30c5a     6F 74 20 64 
30c5e     69 76 69 64 
30c62     65 20 73 74 
30c66     72 69 6E 67 
30c6a     73 2E       | 	byte	"Cannot divide strings."
30c6c     00          | 	byte	0
30c6d                 | LR__5544
30c6d     55 6E 6B 6E 
30c71     6F 77 6E 20 
30c75     65 72 72 6F 
30c79     72 20 77 68 
30c7d     69 6C 65 20 
30c81     64 69 76 69 
30c85     64 69 6E 67 
30c89     2E          | 	byte	"Unknown error while dividing."
30c8a     00          | 	byte	0
30c8b                 | LR__5545
30c8b     43 61 6E 6E 
30c8f     6F 74 20 63 
30c93     6F 6D 70 75 
30c97     74 65 20 61 
30c9b     20 70 6F 77 
30c9f     65 72 20 6F 
30ca3     66 20 61 20 
30ca7     73 74 72 69 
30cab     6E 67 2E    | 	byte	"Cannot compute a power of a string."
30cae     00          | 	byte	0
30caf                 | LR__5546
30caf     55 6E 6B 6E 
30cb3     6F 77 6E 20 
30cb7     65 72 72 6F 
30cbb     72 20 77 68 
30cbf     69 6C 65 20 
30cc3     63 6F 6D 70 
30cc7     75 74 69 6E 
30ccb     67 20 61 20 
30ccf     70 6F 77 65 
30cd3     72 2E       | 	byte	"Unknown error while computing a power."
30cd5     00          | 	byte	0
30cd6                 | LR__5547
30cd6     52 69 67 68 
30cda     74 20 70 61 
30cde     72 65 6E 74 
30ce2     68 65 73 69 
30ce6     73 20 65 78 
30cea     70 65 63 74 
30cee     65 64 2E    | 	byte	"Right parenthesis expected."
30cf1     00          | 	byte	0
30cf2                 | LR__5548
30cf2     45 78 70 65 
30cf6     63 74 65 64 
30cfa     20 73 74 72 
30cfe     69 6E 67 2E | 	byte	"Expected string."
30d02     00          | 	byte	0
30d03                 | LR__5549
30d03     45 78 70 65 
30d07     63 74 65 64 
30d0b     20 66 6C 6F 
30d0f     61 74 2E    | 	byte	"Expected float."
30d12     00          | 	byte	0
30d13                 | LR__5550
30d13     45 78 70 65 
30d17     63 74 65 64 
30d1b     20 75 6E 73 
30d1f     69 67 6E 65 
30d23     64 20 69 6E 
30d27     74 65 67 65 
30d2b     72 2E       | 	byte	"Expected unsigned integer."
30d2d     00          | 	byte	0
30d2e                 | LR__5551
30d2e     45 78 70 65 
30d32     63 74 65 64 
30d36     20 69 6E 74 
30d3a     65 67 65 72 
30d3e     2E          | 	byte	"Expected integer."
30d3f     00          | 	byte	0
30d40                 | LR__5552
30d40     4E 6F 20 6D 
30d44     6F 72 65 20 
30d48     76 61 72 69 
30d4c     61 62 6C 65 
30d50     20 73 6C 6F 
30d54     74 73 2E    | 	byte	"No more variable slots."
30d57     00          | 	byte	0
30d58                 | LR__5553
30d58     56 61 72 69 
30d5c     61 62 6C 65 
30d60     20 6E 6F 74 
30d64     20 66 6F 75 
30d68     6E 64 2E    | 	byte	"Variable not found."
30d6b     00          | 	byte	0
30d6c                 | LR__5554
30d6c     43 6F 6D 6D 
30d70     61 20 65 78 
30d74     70 65 63 74 
30d78     65 64 2E    | 	byte	"Comma expected."
30d7b     00          | 	byte	0
30d7c                 | LR__5555
30d7c     43 6F 6D 6D 
30d80     61 20 6F 72 
30d84     20 73 65 6D 
30d88     69 63 6F 6C 
30d8c     6F 6E 20 65 
30d90     78 70 65 63 
30d94     74 65 64 2E | 	byte	"Comma or semicolon expected."
30d98     00          | 	byte	0
30d99                 | LR__5556
30d99     55 6E 6B 6E 
30d9d     6F 77 6E 20 
30da1     63 6F 6D 6D 
30da5     61 6E 64 2E | 	byte	"Unknown command."
30da9     00          | 	byte	0
30daa                 | LR__5557
30daa     53 74 61 63 
30dae     6B 20 75 6E 
30db2     64 65 72 66 
30db6     6C 6F 77 2E | 	byte	"Stack underflow."
30dba     00          | 	byte	0
30dbb                 | LR__5558
30dbb     43 61 6E 6E 
30dbf     6F 74 20 65 
30dc3     78 65 63 75 
30dc7     74 65 20 67 
30dcb     6F 74 6F 20 
30dcf     6F 72 20 67 
30dd3     6F 73 75 62 
30dd7     20 69 6E 20 
30ddb     74 68 65 20 
30ddf     69 6D 6D 65 
30de3     64 69 61 74 
30de7     65 20 6D 6F 
30deb     64 65 2E    | 	byte	"Cannot execute goto or gosub in the immediate mode."
30dee     00          | 	byte	0
30def                 | LR__5559
30def     43 61 6E 6E 
30df3     6F 74 20 6C 
30df7     6F 61 64 20 
30dfb     66 72 6F 6D 
30dff     20 74 68 69 
30e03     73 20 66 69 
30e07     6C 65 2E    | 	byte	"Cannot load from this file."
30e0a     00          | 	byte	0
30e0b                 | LR__5560
30e0b     54 68 65 20 
30e0f     70 72 6F 67 
30e13     72 61 6D 20 
30e17     69 73 20 65 
30e1b     6D 70 74 79 
30e1f     2E          | 	byte	"The program is empty."
30e20     00          | 	byte	0
30e21                 | LR__5561
30e21     49 66 20 61 
30e25     66 74 65 72 
30e29     20 69 66 2E | 	byte	"If after if."
30e2d     00          | 	byte	0
30e2e                 | LR__5562
30e2e     45 6D 70 74 
30e32     79 20 65 78 
30e36     70 72 65 73 
30e3a     73 69 6F 6E 
30e3e     2E          | 	byte	"Empty expression."
30e3f     00          | 	byte	0
30e40                 | LR__5563
30e40     53 74 72 69 
30e44     6E 67 20 65 
30e48     78 70 65 63 
30e4c     74 65 64 2E | 	byte	"String expected."
30e50     00          | 	byte	0
30e51                 | LR__5564
30e51     49 6E 74 65 
30e55     72 70 72 65 
30e59     74 65 72 20 
30e5d     69 6E 74 65 
30e61     72 6E 61 6C 
30e65     20 65 72 72 
30e69     6F 72 2E    | 	byte	"Interpreter internal error."
30e6c     00          | 	byte	0
30e6d                 | LR__5565
30e6d     45 78 70 65 
30e71     63 74 65 64 
30e75     20 61 73 73 
30e79     69 67 6E 2E | 	byte	"Expected assign."
30e7d     00          | 	byte	0
30e7e                 | LR__5566
30e7e     45 78 70 65 
30e82     63 74 65 64 
30e86     20 27 74 6F 
30e8a     27 2E       | 	byte	"Expected 'to'."
30e8c     00          | 	byte	0
30e8d                 | LR__5567
30e8d     45 78 70 65 
30e91     63 74 65 64 
30e95     20 69 6E 74 
30e99     65 67 65 72 
30e9d     20 76 61 72 
30ea1     69 61 62 6C 
30ea5     65 2E       | 	byte	"Expected integer variable."
30ea7     00          | 	byte	0
30ea8                 | LR__5568
30ea8     55 6E 69 6E 
30eac     69 74 69 61 
30eb0     6C 69 7A 65 
30eb4     64 20 76 61 
30eb8     72 69 61 62 
30ebc     6C 65 20 69 
30ec0     6E 20 27 6E 
30ec4     65 78 74 27 
30ec8     2C 20 75 73 
30ecc     65 20 27 66 
30ed0     6F 72 27 20 
30ed4     62 65 66 6F 
30ed8     72 65 2E    | 	byte	"Uninitialized variable in 'next', use 'for' before."
30edb     00          | 	byte	0
30edc                 | LR__5569
30edc     4E 6F 20 6D 
30ee0     6F 72 65 20 
30ee4     73 6C 6F 74 
30ee8     73 20 66 6F 
30eec     72 20 27 66 
30ef0     6F 72 27 2E | 	byte	"No more slots for 'for'."
30ef4     00          | 	byte	0
30ef5                 | LR__5570
30ef5     27 4E 65 78 
30ef9     74 27 20 64 
30efd     6F 65 73 6E 
30f01     27 74 20 6D 
30f05     61 74 63 68 
30f09     20 27 66 6F 
30f0d     72 27 2E    | 	byte	"'Next' doesn't match 'for'."
30f10     00          | 	byte	0
30f11                 | LR__5571
30f11     27 47 6F 74 
30f15     6F 27 20 74 
30f19     61 72 67 65 
30f1d     74 20 6C 69 
30f21     6E 65 20 6E 
30f25     6F 74 20 66 
30f29     6F 75 6E 64 
30f2d     2E          | 	byte	"'Goto' target line not found."
30f2e     00          | 	byte	0
30f2f                 | LR__5572
30f2f     42 61 64 20 
30f33     6E 75 6D 62 
30f37     65 72 20 6F 
30f3b     66 20 70 61 
30f3f     72 61 6D 65 
30f43     74 65 72 73 | 	byte	"Bad number of parameters"
30f47     00          | 	byte	0
30f48                 | LR__5573
30f48     46 75 6E 63 
30f4c     74 69 6F 6E 
30f50     20 75 6E 64 
30f54     65 66 69 6E 
30f58     65 64 20 66 
30f5c     6F 72 20 73 
30f60     74 72 69 6E 
30f64     67 73       | 	byte	"Function undefined for strings"
30f66     00          | 	byte	0
30f67                 | LR__5574
30f67     42 61 64 20 
30f6b     70 61 72 61 
30f6f     6D 65 74 65 
30f73     72 2E       | 	byte	"Bad parameter."
30f75     00          | 	byte	0
30f76                 | LR__5575
30f76     43 61 6E 6E 
30f7a     6F 74 20 64 
30f7e     65 63 6C 61 
30f82     72 65 20 61 
30f86     6E 20 61 72 
30f8a     72 61 79 3A 
30f8e     20 74 68 65 
30f92     20 76 61 72 
30f96     69 61 62 6C 
30f9a     65 20 65 78 
30f9e     69 73 74 73 
30fa2     2E          | 	byte	"Cannot declare an array: the variable exists."
30fa3     00          | 	byte	0
30fa4                 | LR__5576
30fa4     45 78 70 65 
30fa8     63 74 65 64 
30fac     20 27 28 27 
30fb0     2E          | 	byte	"Expected '('."
30fb1     00          | 	byte	0
30fb2                 | LR__5577
30fb2     45 78 70 65 
30fb6     63 74 65 64 
30fba     20 27 29 27 
30fbe     20 6F 72 20 
30fc2     27 2C 27 2E | 	byte	"Expected ')' or ','."
30fc6     00          | 	byte	0
30fc7                 | LR__5578
30fc7     4E 6F 20 6D 
30fcb     6F 72 65 20 
30fcf     74 68 61 6E 
30fd3     20 33 20 64 
30fd7     69 6D 65 6E 
30fdb     73 69 6F 6E 
30fdf     73 20 73 75 
30fe3     70 70 6F 72 
30fe7     74 65 64    | 	byte	"No more than 3 dimensions supported"
30fea     00          | 	byte	0
30feb                 | LR__5579
30feb     56 61 72 69 
30fef     61 62 6C 65 
30ff3     20 6E 61 6D 
30ff7     65 20 65 78 
30ffb     70 65 63 74 
30fff     65 64       | 	byte	"Variable name expected"
31001     00          | 	byte	0
31002                 | LR__5580
31002     54 79 70 65 
31006     20 6E 61 6D 
3100a     65 20 65 78 
3100e     70 65 63 74 
31012     65 64       | 	byte	"Type name expected"
31014     00          | 	byte	0
31015                 | LR__5581
31015     54 79 70 65 
31019     20 6E 6F 74 
3101d     20 73 75 70 
31021     70 6F 72 74 
31025     65 64 20 79 
31029     65 74       | 	byte	"Type not supported yet"
3102b     00          | 	byte	0
3102c                 | LR__5582
3102c     41 72 72 61 
31030     79 20 69 6E 
31034     64 65 78 20 
31038     6F 75 74 20 
3103c     6F 66 20 72 
31040     61 6E 67 65 | 	byte	"Array index out of range"
31044     00          | 	byte	0
31045                 | LR__5583
31045     42 61 64 20 
31049     74 79 70 65 
3104d     20 77 68 69 
31051     6C 65 20 61 
31055     73 73 69 67 
31059     6E 69 6E 67 
3105d     20 74 6F 20 
31061     61 72 72 61 
31065     79          | 	byte	"Bad type while assigning to array"
31066     00          | 	byte	0
31067                 | LR__5584
31067     54 6F 6F 20 
3106b     6D 61 6E 79 
3106f     20 76 61 72 
31073     69 61 62 6C 
31077     65 73       | 	byte	"Too many variables"
31079     00          | 	byte	0
3107a                 | LR__5585
3107a     27 54 68 65 
3107e     6E 27 20 65 
31082     78 70 65 63 
31086     74 65 64    | 	byte	"'Then' expected"
31089     00          | 	byte	0
3108a                 | LR__5586
3108a     45 72 72 6F 
3108e     72 20       | 	byte	"Error "
31090     00          | 	byte	0
31091                 | LR__5587
31091     3A 20       | 	byte	": "
31093     00          | 	byte	0
31094                 | LR__5588
31094     2F 73 64    | 	byte	"/sd"
31097     00          | 	byte	0
31098                 | LR__5589
31098     2F 73 64 2F 
3109c     62 61 73    | 	byte	"/sd/bas"
3109f     00          | 	byte	0
310a0                 | LR__5590
310a0     2F 73 64 2F 
310a4     62 61 73    | 	byte	"/sd/bas"
310a7     00          | 	byte	0
310a8                 | LR__5591
310a8     20 42 41 53 
310ac     49 43 20 62 
310b0     79 74 65 73 
310b4     20 66 72 65 
310b8     65          | 	byte	" BASIC bytes free"
310b9     00          | 	byte	0
310ba                 | LR__5592
310ba     52 65 61 64 
310be     79          | 	byte	"Ready"
310bf     00          | 	byte	0
310c0                 | LR__5593
310c0     6E 6F 6E 61 
310c4     6D 65 2E 62 
310c8     61 73       | 	byte	"noname.bas"
310ca     00          | 	byte	0
310cb                 | LR__5594
310cb                 | 	byte	
310cb     00          | 	byte	0
310cc                 | 	alignl
310cc                 | _dat_
310cc     00 00 00 00 
310d0     00 00 00 00 
310d4     00 00 00 00 
310d8     00 00 00 00 | 	byte	$00[16]
310dc     61 41 17 0E 
310e0     62 42 00 00 
310e4     63 43 19 10 
310e8     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
310ec     65 45 18 0F 
310f0     66 46 00 00 
310f4     67 47 00 00 
310f8     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
310fc     69 49 00 00 
31100     6A 4A 00 00 
31104     6B 4B 00 00 
31108     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
3110c     6D 4D 00 00 
31110     6E 4E 1A 11 
31114     6F 4F 1E 15 
31118     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
3111c     71 51 00 00 
31120     72 52 00 00 
31124     73 53 1B 12 
31128     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
3112c     75 55 00 00 
31130     76 56 00 00 
31134     77 57 00 00 
31138     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
3113c     79 59 00 00 
31140     7A 5A 1D 14 
31144     31 21 04 00 
31148     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
3114c     33 23 06 00 
31150     34 24 07 00 
31154     35 25 08 00 
31158     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
3115c     37 26 0A 00 
31160     38 2A 0B 00 
31164     39 28 0C 00 
31168     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
3116c     8D 8D 00 00 
31170     9B 9B 00 00 
31174     88 88 00 00 
31178     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
3117c     20 20 00 00 
31180     2D 5F 00 00 
31184     3D 2B 00 00 
31188     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
3118c     5D 7D 00 00 
31190     5C 7C 00 00 
31194     23 7E 00 00 
31198     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
3119c     27 22 00 00 
311a0     60 7E 03 00 
311a4     2C 3C 00 00 
311a8     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
311ac     2F 3F 00 00 
311b0     B9 B9 00 00 
311b4     BA 00 00 00 
311b8     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
311bc     BC 00 00 00 
311c0     BD 00 00 00 
311c4     BE 00 00 00 
311c8     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
311cc     C0 00 00 00 
311d0     C1 00 00 00 
311d4     C2 00 00 00 
311d8     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
311dc     C4 00 00 00 
311e0     C5 00 00 00 
311e4     C6 00 00 00 
311e8     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
311ec     C8 00 00 00 
311f0     C9 00 00 00 
311f4     CA 00 00 00 
311f8     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
311fc     7F 7F 00 00 
31200     CC 00 00 00 
31204     CD 00 00 00 
31208     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
3120c     CF 00 00 00 
31210     D0 00 00 00 
31214     D1 00 00 00 
31218     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
3121c     2F 2F 00 00 
31220     2A 2A 00 00 
31224     2D 2D 00 00 
31228     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
3122c     8D 8D 00 00 
31230     31 31 00 00 
31234     32 32 00 00 
31238     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
3123c     34 34 00 00 
31240     35 35 00 00 
31244     36 36 00 00 
31248     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
3124c     38 38 00 00 
31250     39 39 00 00 
31254     30 30 00 00 
31258     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
3125c     5C 7C 00 00 
31260     00 00 00 00 
31264     00 00 00 00 
31268     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
3126c     00 00 00 00 
      ...             
312c4     00 00 00 00 
312c8     00 00 00 00 | 	byte	$00[96]
312cc     2B 00 A6 F2 
312d0     24 A7 09 80 
312d4     5B 88 4D 89 
312d8     80 88 A5 88 | atari_spl file "atari.spl"
312dc     6D 88 B8 88 
312e0     80 88 CB 88 
312e4     92 88 A5 88 
312e8     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
312ec     A5 88 CA 88 
312f0     A6 88 DD 88 
312f4     B8 88 AB 89 
312f8     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
312fc     C8 AD C6 F1 
31300     91 06 B6 FF 
31304     13 00 4A 00 
31308     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
3130c     5D 00 5E 00 
31310     5D 00 5E 00 
31314     5E 00 5D 00 
31318     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
3131c     38 00 83 00 
31320     25 00 83 00 
31324     C3 FE D1 04 
31328     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
3132c     48 88 38 85 
31330     41 8A CB 88 
31334     28 89 B8 88 
31338     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
3133c     15 89 03 89 
31340     02 89 15 89 
31344     16 89 15 89 
31348     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
3134c     15 89 3A 89 
31350     72 89 E3 89 
31354     52 83 AD 97 
31358     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
3135c     0C 02 B6 FF 
31360     E1 00 A8 00 
31364     F3 00 A8 00 
31368     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
3136c     CE 00 CD 00 
31370     CD 00 BA 00 
31374     E1 00 BB 00 
31378     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
3137c     DF 00 C9 FF 
31380     E6 01 B6 06 
31384     EE DD 8D 98 
31388     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
3138c     97 89 73 89 
31390     3B 89 60 89 
31394     60 89 60 89 
31398     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
3139c     73 89 72 89 
313a0     85 89 73 89 
313a4     AA 89 60 89 
313a8     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
313ac     E8 8A 18 86 
313b0     92 88 A5 C2 
313b4     E0 00 C3 05 
313b8     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
313bc     F2 00 64 01 
313c0     06 01 3E 01 
313c4     2B 01 2B 01 
313c8     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
313cc     2B 01 2A 01 
313d0     2B 01 2B 01 
313d4     2B 01 18 01 
313d8     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
313dc     39 07 61 F3 
313e0     C0 AF 37 85 
313e4     0F 88 8B 8A 
313e8     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
313ec     AB 89 D0 89 
313f0     AB 89 D0 89 
313f4     D0 89 CF 89 
313f8     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
313fc     D0 89 F5 89 
31400     BD 89 08 8A 
31404     CF 89 E8 8A 
31408     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
3140c     53 B3 0D F8 
31410     F4 07 38 00 
31414     63 01 63 01 
31418     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
3141c     88 01 88 01 
31420     76 01 88 01 
31424     88 01 89 01 
31428     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
3142c     75 01 AE 01 
31430     76 01 88 01 
31434     4A 00 46 06 
31438     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
3143c     08 8A 9A 86 
31440     33 8B 08 8A 
31444     2D 8A F5 89 
31448     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
3144c     2D 8A 2D 8A 
31450     2E 8A 1B 8A 
31454     40 8A 2D 8A 
31458     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
3145c     2E 8A 79 8A 
31460     66 8A C8 8B 
31464     72 82 2B 97 
31468     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
3146c     1D 02 05 01 
31470     F8 01 C0 01 
31474     0B 02 C0 01 
31478     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
3147c     F9 01 D3 01 
31480     F8 01 D3 01 
31484     F8 01 D2 01 
31488     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
3148c     E6 01 2B 01 
31490     8E 02 5F 07 
31494     F7 E2 ED 9C 
31498     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
3149c     E8 8A 78 8A 
314a0     78 8A 65 8A 
314a4     8B 8A 78 8A 
314a8     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
314ac     8B 8A 9D 8A 
314b0     9D 8A 8B 8A 
314b4     C2 8A 78 8A 
314b8     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
314bc     70 8C 18 86 
314c0     8B 8A 23 C9 
314c4     CB 03 C4 05 
314c8     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
314cc     0B 02 7B 02 
314d0     1E 02 55 02 
314d4     30 02 43 02 
314d8     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
314dc     43 02 44 02 
314e0     43 02 30 02 
314e4     68 02 31 02 
314e8     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
314ec     07 08 3F F7 
314f0     73 B2 13 85 
314f4     15 89 ED 8B 
314f8     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
314fc     B0 8A FB 8A 
31500     D5 8A FA 8A 
31504     E8 8A FB 8A 
31508     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
3150c     E8 8A 21 8B 
31510     E7 8A 33 8B 
31514     E8 8A 26 8C 
31518     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
3151c     8D B0 27 F6 
31520     9C 08 AD 01 
31524     7B 02 8D 02 
31528     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
3152c     A1 02 A0 02 
31530     A1 02 A0 02 
31534     A0 02 A0 02 
31538     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
3153c     7B 02 D8 02 
31540     7B 02 C6 02 
31544     3E 01 C3 05 
31548     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
3154c     00 8C 2A 86 
31550     E0 8C FA 8A 
31554     6A 8B FB 8A 
31558     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
3155c     45 8B 45 8B 
31560     45 8B 6B 8B 
31564     46 8B 59 8B 
31568     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
3156c     6B 8B 6B 8B 
31570     6B 8B 6B 8B 
31574     7D 8B 7D 8B 
31578     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
3157c     90 8B 91 8B 
31580     90 8B 90 8B 
31584     A3 8B A3 8B 
31588     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
3158c     B5 8B B6 8B 
31590     B5 8B B5 8B 
31594     B6 8B C8 8B 
31598     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
3159c     C8 8B DA 8B 
315a0     DB 8B DB 8B 
315a4     DB 8B DC 8B 
315a8     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
315ac     EE 8B EE 8B 
315b0     00 8C 01 8C 
315b4     00 8C 01 8C 
315b8     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
315bc     12 8C 13 8C 
315c0     13 8C 26 8C 
315c4     26 8C 26 8C 
315c8     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
315cc     38 8C 38 8C 
315d0     38 8C 38 8C 
315d4     4B 8C 4B 8C 
315d8     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
315dc     5E 8C 5E 8C 
315e0     5E 8C 5E 8C 
315e4     70 8C 70 8C 
315e8     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
315ec     70 8C 83 8C 
315f0     83 8C 83 8C 
315f4     83 8C 96 8C 
315f8     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
315fc     95 8C A9 8C 
31600     A9 8C A8 8C 
31604     A8 8C A8 8C 
31608     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
3160c     BB 8C BB 8C 
31610     BB 8C CE 8C 
31614     CE 8C CE 8C 
31618     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
3161c     E0 8C E1 8C 
31620     E1 8C E0 8C 
31624     F4 8C F2 8C 
31628     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
3162c     05 8D 05 8D 
31630     06 8D 06 8D 
31634     19 8D 19 8D 
31638     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
3163c     18 8D 2B 8D 
31640     2B 8D 2B 8D 
31644     2A 8D 3E 8D 
31648     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
3164c     3E 8D 51 8D 
31650     50 8D 50 8D 
31654     50 8D 51 8D 
31658     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
3165c     63 8D 64 8D 
31660     76 8D 75 8D 
31664     75 8D 76 8D 
31668     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
3166c     88 8D 88 8D 
31670     89 8D 9B 8D 
31674     9A 8D 9B 8D 
31678     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
3167c     AD 8D AE 8D 
31680     AD 8D AE 8D 
31684     C1 8D C1 8D 
31688     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
3168c     D3 8D D3 8D 
31690     D3 8D D3 8D 
31694     D3 8D E6 8D 
31698     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
3169c     E6 8D E6 8D 
316a0     F9 8D F9 8D 
316a4     F9 8D F8 8D 
316a8     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
316ac     0B 8E 0B 8E 
316b0     1D 8E 1D 8E 
316b4     1E 8E 1E 8E 
316b8     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
316bc     31 8E 31 8E 
316c0     31 8E 42 8E 
316c4     43 8E 43 8E 
316c8     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
316cc     56 8E 56 8E 
316d0     55 8E 56 8E 
316d4     68 8E 69 8E 
316d8     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
316dc     69 8E 7B 8E 
316e0     7C 8E 7B 8E 
316e4     7B 8E 8D 8E 
316e8     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
316ec     8D 8E A1 8E 
316f0     A0 8E A1 8E 
316f4     A1 8E A0 8E 
316f8     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
316fc     B3 8E B3 8E 
31700     C6 8E C5 8E 
31704     C6 8E C6 8E 
31708     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
3170c     D8 8E D9 8E 
31710     D8 8E EC 8E 
31714     EB 8E EC 8E 
31718     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
3171c     FE 8E FE 8E 
31720     FE 8E FE 8E 
31724     10 8F 10 8F 
31728     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
3172c     11 8F 23 8F 
31730     24 8F 23 8F 
31734     24 8F 37 8F 
31738     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
3173c     36 8F 36 8F 
31740     48 8F 49 8F 
31744     49 8F 49 8F 
31748     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
3174c     5B 8F 5C 8F 
31750     5B 8F 6E 8F 
31754     6E 8F 6E 8F 
31758     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
3175c     81 8F 81 8F 
31760     81 8F 81 8F 
31764     93 8F 93 8F 
31768     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
3176c     93 8F A6 8F 
31770     A6 8F A6 8F 
31774     A6 8F B9 8F 
31778     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
3177c     B9 8F B9 8F 
31780     CC 8F CB 8F 
31784     CB 8F CC 8F 
31788     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
3178c     DF 8F DE 8F 
31790     DE 8F F1 8F 
31794     F1 8F F1 8F 
31798     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
3179c     03 90 04 90 
317a0     04 90 04 90 
317a4     16 90 17 90 
317a8     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
317ac     29 90 28 90 
317b0     29 90 28 90 
317b4     29 90 3C 90 
317b8     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
317bc     3C 90 4F 90 
317c0     4E 90 4E 90 
317c4     4E 90 4E 90 
317c8     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
317cc     61 90 61 90 
317d0     73 90 74 90 
317d4     74 90 74 90 
317d8     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
317dc     87 90 86 90 
317e0     87 90 86 90 
317e4     99 90 99 90 
317e8     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
317ec     AB 90 AB 90 
317f0     AC 90 AB 90 
317f4     AB 90 BF 90 
317f8     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
317fc     BE 90 D1 90 
31800     D0 90 D1 90 
31804     D1 90 D1 90 
31808     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
3180c     E3 90 E4 90 
31810     F6 90 F6 90 
31814     F6 90 F6 90 
31818     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
3181c     09 91 0A 91 
31820     0A 91 1C 91 
31824     1C 91 1C 91 
31828     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
3182c     2F 91 2E 91 
31830     2F 91 2F 91 
31834     2E 91 41 91 
31838     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
3183c     41 91 53 91 
31840     54 91 54 91 
31844     53 91 54 91 
31848     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
3184c     67 91 67 91 
31850     79 91 7A 91 
31854     79 91 78 91 
31858     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
3185c     8C 91 8B 91 
31860     8C 91 8C 91 
31864     9E 91 9E 91 
31868     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
3186c     B1 91 B1 91 
31870     B2 91 B1 91 
31874     B1 91 C4 91 
31878     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
3187c     C4 91 D6 91 
31880     D7 91 D7 91 
31884     D7 91 D6 91 
31888     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
3188c     EA 91 EA 91 
31890     EA 91 FC 91 
31894     FC 91 FB 91 
31898     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
3189c     0E 92 0F 92 
318a0     0F 92 0E 92 
318a4     21 92 21 92 
318a8     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
318ac     21 92 34 92 
318b0     33 92 34 92 
318b4     34 92 47 92 
318b8     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
318bc     46 92 47 92 
318c0     59 92 59 92 
318c4     59 92 59 92 
318c8     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
318cc     6C 92 6C 92 
318d0     6B 92 7E 92 
318d4     7E 92 7E 92 
318d8     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
318dc     92 92 91 92 
318e0     91 92 90 92 
318e4     91 92 A4 92 
318e8     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
318ec     A3 92 B6 92 
318f0     B6 92 B7 92 
318f4     B7 92 B6 92 
318f8     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
318fc     CA 92 C9 92 
31900     CA 92 DC 92 
31904     DC 92 DC 92 
31908     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
3190c     EF 92 EF 92 
31910     EF 92 EF 92 
31914     01 93 01 93 
31918     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
3191c     15 93 14 93 
31920     14 93 14 93 
31924     14 93 27 93 
31928     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
3192c     27 93 39 93 
31930     3A 93 39 93 
31934     39 93 39 93 
31938     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
3193c     4B 93 4C 93 
31940     5F 93 5F 93 
31944     5F 93 5E 93 
31948     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
3194c     5F 93 84 93 
31950     4C 93 96 93 
31954     5F 93 AE 94 
31958     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
3195c     7B C1 00 00 
31960     00 00 00 00 
31964     00 00 00 00 
31968     00 00 00 00 | 	byte	$7b, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3196c     00 00 00 00 | 	byte	$00, $00, $00, $00
31970     00 00 00 00 | zero long 0
31974     7A D7 00 80 
31978     87 8A 48 8F 
3197c     EC 8C 76 8D 
31980     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
31984     3C 8D 82 8D 
31988     42 8D 88 8D 
3198c     8C 8D 8E 8D 
31990     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
31994     97 8D DE 8D 
31998     E1 8D F1 8E 
3199c     D8 8C A3 83 
319a0     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
319a4     65 71 C9 65 
319a8     FC 64 C4 65 
319ac     C1 65 BF 65 
319b0     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
319b4     B6 65 B4 65 
319b8     B2 65 AE 65 
319bc     AC 65 ED 65 
319c0     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
319c4     5E 65 25 66 
319c8     FA 62 23 6B 
319cc     B5 6C 61 0A 
319d0     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
319d4     5D 90 BE 8D 
319d8     47 8E C3 8D 
319dc     09 8E C9 8D 
319e0     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
319e4     15 8E 19 8E 
319e8     1B 8E 62 8E 
319ec     64 8E 68 8E 
319f0     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
319f4     B5 8E 4C 90 
319f8     FA 84 3C 9D 
319fc     98 13 79 6D 
31a00     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
31a04     D9 66 50 66 
31a08     D4 66 4B 66 
31a0c     8C 66 46 66 
31a10     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
31a14     81 66 3A 66 
31a18     7C 66 36 66 
31a1c     76 66 30 66 
31a20     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
31a24     6B 66 88 72 
31a28     BF 37 E7 B7 
31a2c     75 83 8B 8E 
31a30     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
31a34     94 8E 96 8E 
31a38     DD 8E 9C 8E 
31a3c     E2 8E A2 8E 
31a40     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
31a44     EE 8E AE 8E 
31a48     38 8F B5 8E 
31a4c     3F 8F FD 8E 
31a50     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
31a54     A5 87 1E E3 
31a58     6D 5D FA 71 
31a5c     41 64 25 67 
31a60     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
31a64     D9 66 1A 67 
31a68     18 67 15 67 
31a6c     12 67 0F 67 
31a70     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
31a74     07 67 C0 66 
31a78     01 67 BC 66 
31a7c     B8 66 DE 64 
31a80     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
31a84     43 E5 1F 8B 
31a88     14 8A F1 90 
31a8c     1C 8F 63 8F 
31a90     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
31a94     29 8F 6E 8F 
31a98     72 8F 75 8F 
31a9c     34 8F BE 8F 
31aa0     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
31aa4     84 8F 87 8F 
31aa8     CC 8F 56 90 
31aac     67 91 49 80 
31ab0     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
31ab4     46 77 A6 66 
31ab8     E8 66 B0 67 
31abc     AD 67 ED 67 
31ac0     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
31ac4     A2 67 E3 67 
31ac8     9D 67 9A 67 
31acc     98 67 94 67 
31ad0     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
31ad4     49 67 CD 67 
31ad8     28 65 5F 6E 
31adc     82 67 3A 01 
31ae0     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
31ae4     C2 91 A9 8F 
31ae8     EF 8F AE 8F 
31aec     F4 8F B5 8F 
31af0     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
31af4     01 90 03 90 
31af8     07 90 09 90 
31afc     0C 90 53 90 
31b00     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
31b04     18 90 44 93 
31b08     85 84 D6 9D 
31b0c     87 1F 2F 75 
31b10     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
31b14     C4 68 F6 67 
31b18     BE 68 F1 67 
31b1c     76 68 2E 68 
31b20     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
31b24     27 68 24 68 
31b28     64 68 1E 68 
31b2c     5F 68 19 68 
31b30     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
31b34     DC 68 56 72 
31b38     7E 36 C2 B8 
31b3c     D7 84 73 90 
31b40     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
31b44     7B 90 7F 90 
31b48     82 90 84 90 
31b4c     CB 90 8B 90 
31b50     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
31b54     D7 90 96 90 
31b58     20 91 59 90 
31b5c     25 91 A2 90 
31b60     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
31b64     D0 89 40 EE 
31b68     12 64 C4 71 
31b6c     29 66 0C 69 
31b70     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
31b74     C0 68 02 69 
31b78     FE 68 FB 68 
31b7c     F9 68 F6 68 
31b80     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
31b84     EE 68 A8 68 
31b88     2C 69 5F 68 
31b8c     E2 68 81 66 
31b90     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
31b94     1E EB A6 8A 
31b98     73 8B 5E 93 
31b9c     7B 90 48 91 
31ba0     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
31ba4     0D 91 11 91 
31ba8     14 91 16 91 
31bac     5C 91 1C 91 
31bb0     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
31bb4     68 91 AF 91 
31bb8     2A 91 B5 91 
31bbc     75 91 1A 94 
31bc0     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
31bc4     70 0E CB 6C 
31bc8     5D 6E C4 67 
31bcc     99 69 54 69 
31bd0     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
31bd4     D2 69 49 69 
31bd8     89 69 86 69 
31bdc     40 69 C4 69 
31be0     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
31be4     35 69 76 69 
31be8     58 67 EB 6D 
31bec     E9 6D 89 0F 
31bf0     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
31bf4     33 94 94 91 
31bf8     D9 91 56 91 
31bfc     E0 91 9F 91 
31c00     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
31c04     EC 91 EE 91 
31c08     F1 91 F4 91 
31c0c     F7 91 3D 92 
31c10     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
31c14     46 92 21 94 
31c18     11 89 A4 9D 
31c1c     FD 0E 8F 6C 
31c20     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
31c24     28 6A E1 69 
31c28     65 6A 1F 6A 
31c2c     5F 6A 1A 6A 
31c30     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
31c34     54 6A 0F 6A 
31c38     4F 6A 09 6A 
31c3c     06 6A 03 6A 
31c40     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
31c44     23 68 69 77 
31c48     3A 4D 38 CA 
31c4c     38 86 4E 91 
31c50     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
31c54     64 92 24 92 
31c58     6A 92 2A 92 
31c5c     70 92 30 92 
31c60     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
31c64     7B 92 7E 92 
31c68     C5 92 84 92 
31c6c     CB 92 8A 92 
31c70     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
31c74     4D 8D F9 E2 
31c78     97 59 FE 74 
31c7c     DB 68 6D 6A 
31c80     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
31c84     A8 6A A5 6A 
31c88     A3 6A 9F 6A 
31c8c     9D 6A 9B 6A 
31c90     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
31c94     D6 6A 8F 6A 
31c98     CF 6A 46 6A 
31c9c     CA 6A E1 67 
31ca0     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
31ca4     D3 F7 15 92 
31ca8     90 8C BF 94 
31cac     A6 92 EB 92 
31cb0     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
31cb4     B1 92 F7 92 
31cb8     FA 92 FD 92 
31cbc     00 93 02 93 
31cc0     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
31cc4     4F 93 52 93 
31cc8     54 93 22 94 
31ccc     5A 93 8F 88 
31cd0     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
31cd4     1C 77 07 6C 
31cd8     E8 69 7A 6B 
31cdc     34 6B 75 6B 
31ce0     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
31ce4     29 6B 26 6B 
31ce8     24 6B 21 6B 
31cec     1D 6B 5E 6B 
31cf0     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
31cf4     12 6B 52 6B 
31cf8     34 69 34 6E 
31cfc     BA 73 A4 24 
31d00     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
31d04     7A 94 B3 93 
31d08     72 93 31 93 
31d0c     78 93 7A 93 
31d10     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
31d14     83 93 86 93 
31d18     89 93 D0 93 
31d1c     D2 93 D5 93 
31d20     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
31d24     DD 93 40 96 
31d28     30 8B 99 9C 
31d2c     52 10 94 71 
31d30     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
31d34     46 6C 79 6B 
31d38     40 6C B7 6B 
31d3c     F7 6B B1 6B 
31d40     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
31d44     EC 6B A5 6B 
31d48     A2 6B 9F 6B 
31d4c     9D 6B 9A 6B 
31d50     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
31d54     C8 6A E4 76 
31d58     20 4B F9 CE 
31d5c     2E 8A 1A 92 
31d60     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
31d64     FB 93 BA 93 
31d68     01 94 03 94 
31d6c     4A 94 09 94 
31d70     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
31d74     55 94 14 94 
31d78     9E 94 1A 94 
31d7c     61 94 20 94 
31d80     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
31d84     3E 87 E5 CD 
31d88     5F 50 6C 78 
31d8c     B5 6A 04 6C 
31d90     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
31d94     83 6C 7F 6C 
31d98     7C 6C 36 6C 
31d9c     76 6C 74 6C 
31da0     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
31da4     6B 6C 25 6C 
31da8     66 6C 1F 6C 
31dac     1D 6C 41 6A 
31db0     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
31db4     BA FA FC 94 
31db8     5B 8D 97 96 
31dbc     3B 94 C5 94 
31dc0     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
31dc4     89 94 8C 94 
31dc8     8F 94 92 94 
31dcc     94 94 DB 94 
31dd0     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
31dd4     E4 94 E7 94 
31dd8     2D 95 74 95 
31ddc     C8 96 15 89 
31de0     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
31de4     CB 75 31 6F 
31de8     7E 6B 10 6D 
31dec     C9 6C 0A 6D 
31df0     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
31df4     BD 6C FF 6C 
31df8     FB 6C F9 6C 
31dfc     B2 6C F3 6C 
31e00     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
31e04     A7 6C E8 6C 
31e08     0D 6B 85 6F 
31e0c     C7 74 10 28 
31e10     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
31e14     96 96 47 95 
31e18     06 95 0A 95 
31e1c     0C 95 0F 95 
31e20     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
31e24     17 95 5E 95 
31e28     61 95 63 95 
31e2c     22 95 AC 95 
31e30     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
31e34     72 95 17 98 
31e38     59 8E 01 96 
31e3c     CF FC 5A 68 
31e40     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
31e44     96 6D 50 6D 
31e48     D5 6D 4A 6D 
31e4c     8C 6D 89 6D 
31e50     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
31e54     80 6D 3A 6D 
31e58     7A 6D 77 6D 
31e5c     75 6D 71 6D 
31e60     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
31e64     18 6C BC 78 
31e68     9A 4F 7E CF 
31e6c     1F 89 F1 93 
31e70     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
31e74     D2 95 4E 95 
31e78     D7 95 53 95 
31e7c     DD 95 E0 95 
31e80     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
31e84     A5 95 EB 95 
31e88     EE 95 F0 95 
31e8c     37 96 B3 95 
31e90     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
31e94     1A 98 D5 8D 
31e98     C5 9F CD 0F 
31e9c     0F 71 F3 73 
31ea0     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
31ea4     D9 6D 5E 6E 
31ea8     D3 6D 58 6E 
31eac     12 6E 0F 6E 
31eb0     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
31eb4     49 6E BF 6D 
31eb8     87 6E 76 6D 
31ebc     81 6E 11 6B 
31ec0     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
31ec4     3F 09 44 95 
31ec8     E5 8D 3F 99 
31ecc     D4 95 A2 96 
31ed0     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
31ed4     23 96 69 96 
31ed8     6B 96 6E 96 
31edc     71 96 74 96 
31ee0     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
31ee4     BF 96 3C 96 
31ee8     C6 96 C8 96 
31eec     A3 98 51 8D 
31ef0     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
31ef4     CF 75 29 73 
31ef8     90 6C EC 6E 
31efc     62 6E E7 6E 
31f00     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
31f04     9A 6E 98 6E 
31f08     95 6E 91 6E 
31f0c     8E 6E CF 6E 
31f10     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
31f14     40 6E C3 6E 
31f18     E8 6C 45 6F 
31f1c     A5 7B C9 35 
31f20     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
31f24     2D 98 23 97 
31f28     E1 96 A0 96 
31f2c     A4 96 EA 96 
31f30     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
31f34     AF 96 F4 96 
31f38     F8 96 3E 97 
31f3c     FD 96 43 97 
31f40     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
31f44     08 97 6B 99 
31f48     D6 92 88 91 
31f4c     D8 EE 84 66 
31f50     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
31f54     2E 6F E7 6E 
31f58     6C 6F 24 6F 
31f5c     21 6F 1F 6F 
31f60     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
31f64     17 6F 13 6F 
31f68     54 6F 0E 6F 
31f6c     0B 6F 4B 6F 
31f70     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
31f74     27 6D 1C 7B 
31f78     19 59 9F DB 
31f7c     66 8E BC 94 
31f80     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
31f84     67 97 26 97 
31f88     6D 97 2B 97 
31f8c     72 97 32 97 
31f90     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
31f94     C1 97 7F 97 
31f98     C6 97 85 97 
31f9c     CB 97 CE 97 
31fa0     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
31fa4     EC 8A C4 C6 
31fa8     68 4C F4 7D 
31fac     63 6E E8 6E 
31fb0     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
31fb4     ED 6F A7 6F 
31fb8     E7 6F A0 6F 
31fbc     E1 6F 9B 6F 
31fc0     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
31fc4     D5 6F 8F 6F 
31fc8     CE 6F 45 6F 
31fcc     86 6F 68 6D 
31fd0     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
31fd4     C0 13 AD A2 
31fd8     A7 8E 79 99 
31fdc     E6 97 E8 97 
31fe0     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
31fe4     F1 97 F3 97 
31fe8     F6 97 F9 97 
31fec     FB 97 FE 97 
31ff0     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
31ff4     4A 98 0A 98 
31ff8     93 98 0F 98 
31ffc     7F 9B BF 8C 
32000     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
32004     91 7B 62 73 
32008     1A 6E B9 70 
3200c     EB 6F B3 70 
32010     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
32014     25 70 20 70 
32018     1E 70 1B 70 
3201c     18 70 15 70 
32020     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
32024     0D 70 09 70 
32028     07 70 03 70 
3202c     01 70 FD 6F 
32030     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
32034     F6 6F F2 6F 
32038     EF 6F EC 6F 
3203c     2C 70 E6 6F 
32040     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
32044     DD 6F 97 6F 
32048     D7 6F 84 6E 
3204c     8F 6F 3F 7D 
32050     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
32052     00 00 00 00 | zero1 long 0
32056     FF FF FF FF 
3205a     FF FF       | atarist_spl file "atarist.spl" '512
3205c     00 00 00 00 
32060     00 00 00 00 
32064     00 00       | 	byte	$00[10]
32066     17 7F F2 7F 
3206a     B2 7F 72 7F 
3206e     33 7F F4 7E 
32072     B4 7E 75 7E | 	byte	$17, $7f, $f2, $7f, $b2, $7f, $72, $7f, $33, $7f, $f4, $7e, $b4, $7e, $75, $7e
32076     36 7E F5 7D 
3207a     E9 51 F2 0D 
3207e     8E 00 F3 FD 
32082     72 FD 5A FD | 	byte	$36, $7e, $f5, $7d, $e9, $51, $f2, $0d, $8e, $00, $f3, $fd, $72, $fd, $5a, $fd
32086     57 FD 58 FD 
3208a     5B FD 5C FD 
3208e     5C FD 60 7D 
32092     52 7D 14 7D | 	byte	$57, $fd, $58, $fd, $5b, $fd, $5c, $fd, $5c, $fd, $60, $7d, $52, $7d, $14, $7d
32096     D6 7C 98 7C 
3209a     59 7C 1A 7C 
3209e     DC 7B 9E 7B 
320a2     61 7B 72 34 | 	byte	$d6, $7c, $98, $7c, $59, $7c, $1a, $7c, $dc, $7b, $9e, $7b, $61, $7b, $72, $34
320a6     F3 05 00 FD 
320aa     41 FB EA FA 
320ae     D9 FA DB FA 
320b2     DE FA E1 FA | 	byte	$f3, $05, $00, $fd, $41, $fb, $ea, $fa, $d9, $fa, $db, $fa, $de, $fa, $e1, $fa
320b6     E4 FA 9B 36 
320ba     F8 7A C0 7A 
320be     84 7A 45 7A 
320c2     08 7A CD 79 | 	byte	$e4, $fa, $9b, $36, $f8, $7a, $c0, $7a, $84, $7a, $45, $7a, $08, $7a, $cd, $79
320c6     8E 79 51 79 
320ca     15 79 D7 78 
320ce     3C 1F EB FF 
320d2     CF F9 A5 F8 | 	byte	$8e, $79, $51, $79, $15, $79, $d7, $78, $3c, $1f, $eb, $ff, $cf, $f9, $a5, $f8
320d6     6D F8 65 F8 
320da     68 F8 6D F8 
320de     70 F8 74 F8 
320e2     84 57 DB 60 | 	byte	$6d, $f8, $65, $f8, $68, $f8, $6d, $f8, $70, $f8, $74, $f8, $84, $57, $db, $60
320e6     AB 60 79 60 
320ea     4B 60 1A 60 
320ee     E9 5F B9 5F 
320f2     89 5F 5A 5F | 	byte	$ab, $60, $79, $60, $4b, $60, $1a, $60, $e9, $5f, $b9, $5f, $89, $5f, $5a, $5f
320f6     FB 59 B2 0B 
320fa     92 FA 3A F7 
320fe     96 F6 79 F6 
32102     79 F6 7C F6 | 	byte	$fb, $59, $b2, $0b, $92, $fa, $3a, $f7, $96, $f6, $79, $f6, $79, $f6, $7c, $f6
32106     82 F6 86 F6 
3210a     8C F6 DB 5D 
3210e     F1 5E C1 5E 
32112     92 5E 63 5E | 	byte	$82, $f6, $86, $f6, $8c, $f6, $db, $5d, $f1, $5e, $c1, $5e, $92, $5e, $63, $5e
32116     34 5E 04 5E 
3211a     D6 5D A6 5D 
3211e     78 5D D4 3E 
32122     11 03 63 F7 | 	byte	$34, $5e, $04, $5e, $d6, $5d, $a6, $5d, $78, $5d, $d4, $3e, $11, $03, $63, $f7
32126     27 F5 BA F4 
3212a     AB F4 AD F4 
3212e     B2 F4 B8 F4 
32132     BE F4 C3 F4 | 	byte	$27, $f5, $ba, $f4, $ab, $f4, $ad, $f4, $b2, $f4, $b8, $f4, $be, $f4, $c3, $f4
32136     26 5D 2B 5D 
3213a     FC 5C CD 5C 
3213e     9F 5C 70 5C 
32142     42 5C 15 5C | 	byte	$26, $5d, $2b, $5d, $fc, $5c, $cd, $5c, $9f, $5c, $70, $5c, $42, $5c, $15, $5c
32146     E5 5B B8 5B 
3214a     DB 24 A7 FC 
3214e     D1 F4 4D F3 
32152     05 F3 FD F2 | 	byte	$e5, $5b, $b8, $5b, $db, $24, $a7, $fc, $d1, $f4, $4d, $f3, $05, $f3, $fd, $f2
32156     04 F3 0B F3 
3215a     11 F3 16 F3 
3215e     DE 18 98 5B 
32162     73 5B 99 54 | 	byte	$04, $f3, $0b, $f3, $11, $f3, $16, $f3, $de, $18, $98, $5b, $73, $5b, $99, $54
32166     4E 4A 29 48 
3216a     A0 47 6A 47 
3216e     43 47 20 47 
32172     FD 46 35 0D | 	byte	$4e, $4a, $29, $48, $a0, $47, $6a, $47, $43, $47, $20, $47, $fd, $46, $35, $0d
32176     E2 F6 98 F2 
3217a     C5 F1 A3 F1 
3217e     A3 F1 A8 F1 
32182     B0 F1 B8 F1 | 	byte	$e2, $f6, $98, $f2, $c5, $f1, $a3, $f1, $a3, $f1, $a8, $f1, $b0, $f1, $b8, $f1
32186     BF F1 00 3D 
3218a     EF 46 CD 46 
3218e     AA 46 86 46 
32192     63 46 3F 46 | 	byte	$bf, $f1, $00, $3d, $ef, $46, $cd, $46, $aa, $46, $86, $46, $63, $46, $3f, $46
32196     1C 46 F9 45 
3219a     D7 45 EE 43 
3219e     DE 02 E8 F3 
321a2     01 F1 76 F0 | 	byte	$1c, $46, $f9, $45, $d7, $45, $ee, $43, $de, $02, $e8, $f3, $01, $f1, $76, $f0
321a6     61 F0 65 F0 
321aa     6D F0 74 F0 
321ae     7C F0 84 F0 
321b2     39 44 B1 45 | 	byte	$61, $f0, $65, $f0, $6d, $f0, $74, $f0, $7c, $f0, $84, $f0, $39, $44, $b1, $45
321b6     8E 45 6D 45 
321ba     49 45 27 45 
321be     05 45 E1 44 
321c2     BF 44 9D 44 | 	byte	$8e, $45, $6d, $45, $49, $45, $27, $45, $05, $45, $e1, $44, $bf, $44, $9d, $44
321c6     F1 2F A9 FB 
321ca     8B F1 9B EF 
321ce     40 EF 36 EF 
321d2     3D EF 46 EF | 	byte	$f1, $2f, $a9, $fb, $8b, $f1, $9b, $ef, $40, $ef, $36, $ef, $3d, $ef, $46, $ef
321d6     4D EF 56 EF 
321da     5E EF 7B 44 
321de     8C 44 69 44 
321e2     47 44 26 44 | 	byte	$4d, $ef, $56, $ef, $5e, $ef, $7b, $44, $8c, $44, $69, $44, $47, $44, $26, $44
321e6     03 44 E1 43 
321ea     C0 43 F5 37 
321ee     69 33 0F 11 
321f2     F0 F4 70 EF | 	byte	$03, $44, $e1, $43, $c0, $43, $f5, $37, $69, $33, $0f, $11, $f0, $f4, $70, $ef
321f6     66 EE 37 EE 
321fa     38 EE 40 EE 
321fe     48 EE 51 EE 
32202     5B EE 18 01 | 	byte	$66, $ee, $37, $ee, $38, $ee, $40, $ee, $48, $ee, $51, $ee, $5b, $ee, $18, $01
32206     7D 32 6A 32 
3220a     51 32 37 32 
3220e     1F 32 05 32 
32212     EB 31 D2 31 | 	byte	$7d, $32, $6a, $32, $51, $32, $37, $32, $1f, $32, $05, $32, $eb, $31, $d2, $31
32216     B9 31 A1 31 
3221a     F1 04 F4 F1 
3221e     50 EE A0 ED 
32222     85 ED 88 ED | 	byte	$b9, $31, $a1, $31, $f1, $04, $f4, $f1, $50, $ee, $a0, $ed, $85, $ed, $88, $ed
32226     93 ED 9A ED 
3222a     A4 ED AD ED 
3222e     F4 27 C1 31 
32232     A9 31 90 31 | 	byte	$93, $ed, $9a, $ed, $a4, $ed, $ad, $ed, $f4, $27, $c1, $31, $a9, $31, $90, $31
32236     78 31 5F 31 
3223a     46 31 2E 31 
3223e     15 31 FC 30 
32242     E4 30 9B FC | 	byte	$78, $31, $5f, $31, $46, $31, $2e, $31, $15, $31, $fc, $30, $e4, $30, $9b, $fc
32246     C4 EF 4A ED 
3224a     DC EC CB EC 
3224e     D2 EC DA EC 
32252     E6 EC EF EC | 	byte	$c4, $ef, $4a, $ed, $dc, $ec, $cb, $ec, $d2, $ec, $da, $ec, $e6, $ec, $ef, $ec
32256     F9 EC 64 2F 
3225a     0A 31 F1 30 
3225e     D9 30 C0 30 
32262     A7 30 91 30 | 	byte	$f9, $ec, $64, $2f, $0a, $31, $f1, $30, $d9, $30, $c0, $30, $a7, $30, $91, $30
32266     78 30 5F 30 
3226a     46 30 38 23 
3226e     A6 F6 19 EE 
32272     70 EC 25 EC | 	byte	$78, $30, $5f, $30, $46, $30, $38, $23, $a6, $f6, $19, $ee, $70, $ec, $25, $ec
32276     20 EC 28 EC 
3227a     32 EC 3C EC 
3227e     47 EC 51 EC 
32282     93 22 B5 22 | 	byte	$20, $ec, $28, $ec, $32, $ec, $3c, $ec, $47, $ec, $51, $ec, $93, $22, $b5, $22
32286     A3 22 93 22 
3228a     7F 22 6E 22 
3228e     5D 22 4C 22 
32292     3C 22 2B 22 | 	byte	$a3, $22, $93, $22, $7f, $22, $6e, $22, $5d, $22, $4c, $22, $3c, $22, $2b, $22
32296     77 09 76 F1 
3229a     CC EC F0 EB 
3229e     CD EB CE EB 
322a2     D7 EB E3 EB | 	byte	$77, $09, $76, $f1, $cc, $ec, $f0, $eb, $cd, $eb, $ce, $eb, $d7, $eb, $e3, $eb
322a6     ED EB F5 EB 
322aa     3E F6 6B 22 
322ae     5F 22 4E 22 
322b2     3D 22 2C 22 | 	byte	$ed, $eb, $f5, $eb, $3e, $f6, $6b, $22, $5f, $22, $4e, $22, $3d, $22, $2c, $22
322b6     1B 22 0B 22 
322ba     FA 21 E9 21 
322be     D8 21 4D FF 
322c2     44 EF 25 EC | 	byte	$1b, $22, $0b, $22, $fa, $21, $e9, $21, $d8, $21, $4d, $ff, $44, $ef, $25, $ec
322c6     92 EB 7B EB 
322ca     82 EB 8C EB 
322ce     97 EB A1 EB 
322d2     AB EB 2E 16 | 	byte	$92, $eb, $7b, $eb, $82, $eb, $8c, $eb, $97, $eb, $a1, $eb, $ab, $eb, $2e, $16
322d6     15 22 04 22 
322da     F3 21 E3 21 
322de     D2 21 C0 21 
322e2     AF 21 9E 21 | 	byte	$15, $22, $04, $22, $f3, $21, $e3, $21, $d2, $21, $c0, $21, $af, $21, $9e, $21
322e6     8E 21 7D 21 
322ea     9A F8 A4 ED 
322ee     8E EB 2F EB 
322f2     24 EB 2D EB | 	byte	$8e, $21, $7d, $21, $9a, $f8, $a4, $ed, $8e, $eb, $2f, $eb, $24, $eb, $2d, $eb
322f6     37 EB 42 EB 
322fa     4C EB 57 EB 
322fe     B2 17 22 19 
32302     15 19 0A 19 | 	byte	$37, $eb, $42, $eb, $4c, $eb, $57, $eb, $b2, $17, $22, $19, $15, $19, $0a, $19
32306     FD 18 EF 18 
3230a     E3 18 D6 18 
3230e     CA 18 BD 18 
32312     49 12 92 F2 | 	byte	$fd, $18, $ef, $18, $e3, $18, $d6, $18, $ca, $18, $bd, $18, $49, $12, $92, $f2
32316     60 EC 35 EB 
3231a     01 EB 01 EB 
3231e     0C EB 16 EB 
32322     20 EB 2B EB | 	byte	$60, $ec, $35, $eb, $01, $eb, $01, $eb, $0c, $eb, $16, $eb, $20, $eb, $2b, $eb
32326     34 EB D0 18 
3232a     00 19 F4 18 
3232e     E8 18 DA 18 
32332     CF 18 C2 18 | 	byte	$34, $eb, $d0, $18, $00, $19, $f4, $18, $e8, $18, $da, $18, $cf, $18, $c2, $18
32336     B6 18 A9 18 
3233a     9D 18 91 05 
3233e     F0 EF CA EB 
32342     02 EB E6 EA | 	byte	$b6, $18, $a9, $18, $9d, $18, $91, $05, $f0, $ef, $ca, $eb, $02, $eb, $e6, $ea
32346     E8 EA F2 EA 
3234a     FE EA 07 EB 
3234e     12 EB C2 EF 
32352     E9 18 E6 18 | 	byte	$e8, $ea, $f2, $ea, $fe, $ea, $07, $eb, $12, $eb, $c2, $ef, $e9, $18, $e6, $18
32356     D9 18 CD 18 
3235a     C0 18 B3 18 
3235e     A7 18 9B 18 
32362     8E 18 83 18 | 	byte	$d9, $18, $cd, $18, $c0, $18, $b3, $18, $a7, $18, $9b, $18, $8e, $18, $83, $18
32366     B8 FC 30 EE 
3236a     61 EB DC EA 
3236e     CD EA D2 EA 
32372     DE EA E7 EA | 	byte	$b8, $fc, $30, $ee, $61, $eb, $dc, $ea, $cd, $ea, $d2, $ea, $de, $ea, $e7, $ea
32376     F3 EA FE EA 
3237a     D2 09 D1 18 
3237e     C3 18 17 18 
32382     C7 12 A5 11 | 	byte	$f3, $ea, $fe, $ea, $d2, $09, $d1, $18, $c3, $18, $17, $18, $c7, $12, $a5, $11
32386     66 11 52 11 
3238a     49 11 41 11 
3238e     38 11 E0 F4 
32392     A5 EC 13 EB | 	byte	$66, $11, $52, $11, $49, $11, $41, $11, $38, $11, $e0, $f4, $a5, $ec, $13, $eb
32396     C9 EA C5 EA 
3239a     CF EA DB EA 
3239e     E6 EA EF EA 
323a2     FB EA 0E 10 | 	byte	$c9, $ea, $c5, $ea, $cf, $ea, $db, $ea, $e6, $ea, $ef, $ea, $fb, $ea, $0e, $10
323a6     89 11 80 11 
323aa     78 11 6E 11 
323ae     67 11 5D 11 
323b2     54 11 4C 11 | 	byte	$89, $11, $80, $11, $78, $11, $6e, $11, $67, $11, $5d, $11, $54, $11, $4c, $11
323b6     43 11 32 0D 
323ba     9C F1 07 EC 
323be     F8 EA CD EA 
323c2     CC EA D8 EA | 	byte	$43, $11, $32, $0d, $9c, $f1, $07, $ec, $f8, $ea, $cd, $ea, $cc, $ea, $d8, $ea
323c6     E4 EA ED EA 
323ca     F8 EA 02 EB 
323ce     55 11 91 11 
323d2     89 11 80 11 | 	byte	$e4, $ea, $ed, $ea, $f8, $ea, $02, $eb, $55, $11, $91, $11, $89, $11, $80, $11
323d6     75 11 6E 11 
323da     64 11 5E 11 
323de     54 11 4A 11 
323e2     BC 02 5E EF | 	byte	$75, $11, $6e, $11, $64, $11, $5e, $11, $54, $11, $4a, $11, $bc, $02, $5e, $ef
323e6     A8 EB F1 EA 
323ea     D9 EA DC EA 
323ee     E8 EA F1 EA 
323f2     FC EA 06 EB | 	byte	$a8, $eb, $f1, $ea, $d9, $ea, $dc, $ea, $e8, $ea, $f1, $ea, $fc, $ea, $06, $eb
323f6     A6 EB 9E 11 
323fa     A0 11 96 11 
323fe     8D 11 85 11 
32402     7B 11 72 11 | 	byte	$a6, $eb, $9e, $11, $a0, $11, $96, $11, $8d, $11, $85, $11, $7b, $11, $72, $11
32406     6A 11 CA 0D 
3240a     36 0B 57 F8 
3240e     6C ED 57 EB 
32412     F8 EA EE EA | 	byte	$6a, $11, $ca, $0d, $36, $0b, $57, $f8, $6c, $ed, $57, $eb, $f8, $ea, $ee, $ea
32416     F4 EA FF EA 
3241a     09 EB 15 EB 
3241e     1E EB 1A FD 
32422     F9 0A F2 0A | 	byte	$f4, $ea, $ff, $ea, $09, $eb, $15, $eb, $1e, $eb, $1a, $fd, $f9, $0a, $f2, $0a
32426     ED 0A E8 0A 
3242a     E2 0A DC 0A 
3242e     D6 0A D1 0A 
32432     CD 0A C7 0A | 	byte	$ed, $0a, $e8, $0a, $e2, $0a, $dc, $0a, $d6, $0a, $d1, $0a, $cd, $0a, $c7, $0a
32436     F8 F3 BC EC 
3243a     57 EB 1E EB 
3243e     18 EB 24 EB 
32442     2D EB 39 EB | 	byte	$f8, $f3, $bc, $ec, $57, $eb, $1e, $eb, $18, $eb, $24, $eb, $2d, $eb, $39, $eb
32446     42 EB 4D EB 
3244a     08 09 20 0B 
3244e     1A 0B 14 0B 
32452     0F 0B 09 0B | 	byte	$42, $eb, $4d, $eb, $08, $09, $20, $0b, $1a, $0b, $14, $0b, $0f, $0b, $09, $0b
32456     04 0B FE 0A 
3245a     F9 0A F2 0A 
3245e     84 08 3A F1 
32462     4F EC 66 EB | 	byte	$04, $0b, $fe, $0a, $f9, $0a, $f2, $0a, $84, $08, $3a, $f1, $4f, $ec, $66, $eb
32466     42 EB 42 EB 
3246a     4E EB 57 EB 
3246e     62 EB 6B EB 
32472     77 EB 06 0B | 	byte	$42, $eb, $42, $eb, $4e, $eb, $57, $eb, $62, $eb, $6b, $eb, $77, $eb, $06, $0b
32476     48 0B 43 0B 
3247a     3C 0B 36 0B 
3247e     31 0B 2C 0B 
32482     26 0B 20 0B | 	byte	$48, $0b, $43, $0b, $3c, $0b, $36, $0b, $31, $0b, $2c, $0b, $26, $0b, $20, $0b
32486     1B 0B 5C 00 
3248a     6A EF 1B EC 
3248e     81 EB 6A EB 
32492     6F EB 79 EB | 	byte	$1b, $0b, $5c, $00, $6a, $ef, $1b, $ec, $81, $eb, $6a, $eb, $6f, $eb, $79, $eb
32496     85 EB 8E EB 
3249a     99 EB A3 EB 
3249e     DD 05 E5 05 
324a2     E1 05 DF 05 | 	byte	$85, $eb, $8e, $eb, $99, $eb, $a3, $eb, $dd, $05, $e5, $05, $e1, $05, $df, $05
324a6     DB 05 D8 05 
324aa     D5 05 D1 05 
324ae     D0 05 CB 05 
324b2     63 F7 DA ED | 	byte	$db, $05, $d8, $05, $d5, $05, $d1, $05, $d0, $05, $cb, $05, $63, $f7, $da, $ed
324b6     0C EC BB EB 
324ba     B3 EB BB EB 
324be     C5 EB D0 EB 
324c2     D9 EB E3 EB | 	byte	$0c, $ec, $bb, $eb, $b3, $eb, $bb, $eb, $c5, $eb, $d0, $eb, $d9, $eb, $e3, $eb
324c6     E4 F7 2C 06 
324ca     28 06 24 06 
324ce     22 06 1F 06 
324d2     1C 06 1A 06 | 	byte	$e4, $f7, $2c, $06, $28, $06, $24, $06, $22, $06, $1f, $06, $1c, $06, $1a, $06
324d6     16 06 14 06 
324da     0F 06 D0 F3 
324de     65 ED 2D EC 
324e2     F9 EB F6 EB | 	byte	$16, $06, $14, $06, $0f, $06, $d0, $f3, $65, $ed, $2d, $ec, $f9, $eb, $f6, $eb
324e6     01 EC 0A EC 
324ea     14 EC 1E EC 
324ee     29 EC FB 03 
324f2     6A 06 67 06 | 	byte	$01, $ec, $0a, $ec, $14, $ec, $1e, $ec, $29, $ec, $fb, $03, $6a, $06, $67, $06
324f6     63 06 60 06 
324fa     5E 06 59 06 
324fe     58 06 54 06 
32502     50 06 12 05 | 	byte	$63, $06, $60, $06, $5e, $06, $59, $06, $58, $06, $54, $06, $50, $06, $12, $05
32506     69 F1 21 ED 
3250a     55 EC 33 EC 
3250e     36 EC 40 EC 
32512     49 EC 53 EC | 	byte	$69, $f1, $21, $ed, $55, $ec, $33, $ec, $36, $ec, $40, $ec, $49, $ec, $53, $ec
32516     5C EC 68 EC 
3251a     92 02 D9 02 
3251e     D7 02 D7 02 
32522     D5 02 D3 02 | 	byte	$5c, $ec, $68, $ec, $92, $02, $d9, $02, $d7, $02, $d7, $02, $d5, $02, $d3, $02
32526     D1 02 D1 02 
3252a     CE 02 CD 02 
3252e     5D FC 80 EF 
32532     07 ED 90 EC | 	byte	$d1, $02, $d1, $02, $ce, $02, $cd, $02, $5d, $fc, $80, $ef, $07, $ed, $90, $ec
32536     83 EC 8A EC 
3253a     93 EC 9C EC 
3253e     A5 EC B1 EC 
32542     BA EC 24 03 | 	byte	$83, $ec, $8a, $ec, $93, $ec, $9c, $ec, $a5, $ec, $b1, $ec, $ba, $ec, $24, $03
32546     2B 03 2A 03 
3254a     29 03 26 03 
3254e     25 03 24 03 
32552     22 03 20 03 | 	byte	$2b, $03, $2a, $03, $29, $03, $26, $03, $25, $03, $24, $03, $22, $03, $20, $03
32556     1F 03 70 F7 
3255a     D0 EE 27 ED 
3255e     DB EC D4 EC 
32562     DD EC E7 EC | 	byte	$1f, $03, $70, $f7, $d0, $ee, $27, $ed, $db, $ec, $d4, $ec, $dd, $ec, $e7, $ec
32566     F0 EC FA EC 
3256a     02 ED F9 F4 
3256e     7B 03 7C 03 
32572     7A 03 78 03 | 	byte	$f0, $ec, $fa, $ec, $02, $ed, $f9, $f4, $7b, $03, $7c, $03, $7a, $03, $78, $03
32576     75 03 73 03 
3257a     72 03 70 03 
3257e     6D 03 6C 03 
32582     4F F4 70 EE | 	byte	$75, $03, $73, $03, $72, $03, $70, $03, $6d, $03, $6c, $03, $4f, $f4, $70, $ee
32586     54 ED 22 ED 
3258a     22 ED 2C ED 
3258e     35 ED 3F ED 
32592     48 ED 52 ED | 	byte	$54, $ed, $22, $ed, $22, $ed, $2c, $ed, $35, $ed, $3f, $ed, $48, $ed, $52, $ed
32596     14 01 C3 03 
3259a     C1 03 C0 03 
3259e     5F 01 A5 00 
325a2     82 00 7B 00 | 	byte	$14, $01, $c3, $03, $c1, $03, $c0, $03, $5f, $01, $a5, $00, $82, $00, $7b, $00
325a6     7B 00 7C 00 
325aa     20 00 85 F1 
325ae     2A EE 89 ED 
325b2     73 ED 76 ED | 	byte	$7b, $00, $7c, $00, $20, $00, $85, $f1, $2a, $ee, $89, $ed, $73, $ed, $76, $ed
325b6     80 ED 87 ED 
325ba     90 ED 9A ED 
325be     A3 ED 73 00 
325c2     D2 00 D2 00 | 	byte	$80, $ed, $87, $ed, $90, $ed, $9a, $ed, $a3, $ed, $73, $00, $d2, $00, $d2, $00
325c6     D0 00 D0 00 
325ca     D0 00 D0 00 
325ce     D0 00 CF 00 
325d2     CE 00 48 FC | 	byte	$d0, $00, $d0, $00, $d0, $00, $d0, $00, $d0, $00, $cf, $00, $ce, $00, $48, $fc
325d6     80 F0 3D EE 
325da     D5 ED C7 ED 
325de     CD ED D6 ED 
325e2     DF ED E9 ED | 	byte	$80, $f0, $3d, $ee, $d5, $ed, $c7, $ed, $cd, $ed, $d6, $ed, $df, $ed, $e9, $ed
325e6     F2 ED FA ED 
325ea     1D 01 29 01 
325ee     27 01 27 01 
325f2     27 01 25 01 | 	byte	$f2, $ed, $fa, $ed, $1d, $01, $29, $01, $27, $01, $27, $01, $27, $01, $25, $01
325f6     25 01 26 01 
325fa     26 01 23 01 
325fe     D0 F7 EC EF 
32602     65 EE 23 EE | 	byte	$25, $01, $26, $01, $26, $01, $23, $01, $d0, $f7, $ec, $ef, $65, $ee, $23, $ee
32606     1C EE 24 EE 
3260a     2D EE 37 EE 
3260e     40 EE 47 EE 
32612     6E F3 7A 01 | 	byte	$1c, $ee, $24, $ee, $2d, $ee, $37, $ee, $40, $ee, $47, $ee, $6e, $f3, $7a, $01
32616     7D 01 7B 01 
3261a     7A 01 7A 01 
3261e     79 01 78 01 
32622     79 01 62 00 | 	byte	$7d, $01, $7b, $01, $7a, $01, $7a, $01, $79, $01, $78, $01, $79, $01, $62, $00
32626     84 FE DE F3 
3262a     6C EF 93 EE 
3262e     72 EE 72 EE 
32632     7A EE 85 EE | 	byte	$84, $fe, $de, $f3, $6c, $ef, $93, $ee, $72, $ee, $72, $ee, $7a, $ee, $85, $ee
32636     8B EE 95 EE 
3263a     9E EE 15 FC 
3263e     67 FE 67 FE 
32642     69 FE 69 FE | 	byte	$8b, $ee, $95, $ee, $9e, $ee, $15, $fc, $67, $fe, $67, $fe, $69, $fe, $69, $fe
32646     6B FE 6B FE 
3264a     6D FE 6D FE 
3264e     6D FE 6F FE 
32652     63 F2 6D EF | 	byte	$6b, $fe, $6b, $fe, $6d, $fe, $6d, $fe, $6d, $fe, $6f, $fe, $63, $f2, $6d, $ef
32656     DF EE CC EE 
3265a     CF EE D9 EE 
3265e     E1 EE EA EE 
32662     F2 EE FC EE | 	byte	$df, $ee, $cc, $ee, $cf, $ee, $d9, $ee, $e1, $ee, $ea, $ee, $f2, $ee, $fc, $ee
32666     5A FE C4 FE 
3266a     C3 FE C5 FE 
3266e     C6 FE C6 FE 
32672     C6 FE C7 FE | 	byte	$5a, $fe, $c4, $fe, $c3, $fe, $c5, $fe, $c6, $fe, $c6, $fe, $c6, $fe, $c7, $fe
32676     C8 FE C7 FE 
3267a     DA FB 85 F1 
3267e     8D EF 31 EF 
32682     25 EF 2D EF | 	byte	$c8, $fe, $c7, $fe, $da, $fb, $85, $f1, $8d, $ef, $31, $ef, $25, $ef, $2d, $ef
32686     34 EF 3E EF 
3268a     46 EF 4F EF 
3268e     57 EF 0D FF 
32692     1F FF 1F FF | 	byte	$34, $ef, $3e, $ef, $46, $ef, $4f, $ef, $57, $ef, $0d, $ff, $1f, $ff, $1f, $ff
32696     1F FF 1F FF 
3269a     21 FF 21 FF 
3269e     21 FF 21 FF 
326a2     23 FF 10 F8 | 	byte	$1f, $ff, $1f, $ff, $21, $ff, $21, $ff, $21, $ff, $21, $ff, $23, $ff, $10, $f8
326a6     15 F1 BE EF 
326aa     84 EF 7E EF 
326ae     88 EF 8F EF 
326b2     97 EF A0 EF | 	byte	$15, $f1, $be, $ef, $84, $ef, $7e, $ef, $88, $ef, $8f, $ef, $97, $ef, $a0, $ef
326b6     A9 EF 06 F2 
326ba     A6 FC AB FC 
326be     AD FC AE FC 
326c2     B0 FC B2 FC | 	byte	$a9, $ef, $06, $f2, $a6, $fc, $ab, $fc, $ad, $fc, $ae, $fc, $b0, $fc, $b2, $fc
326c6     B2 FC B4 FC 
326ca     B6 FC B7 FC 
326ce     8B F4 BD F0 
326d2     01 F0 E3 EF | 	byte	$b2, $fc, $b4, $fc, $b6, $fc, $b7, $fc, $8b, $f4, $bd, $f0, $01, $f0, $e3, $ef
326d6     E4 EF EE EF 
326da     F6 EF FD EF 
326de     04 F0 0E F0 
326e2     11 FA 09 FD | 	byte	$e4, $ef, $ee, $ef, $f6, $ef, $fd, $ef, $04, $f0, $0e, $f0, $11, $fa, $09, $fd
326e6     0B FD 0D FD 
326ea     0F FD 11 FD 
326ee     11 FD 13 FD 
326f2     14 FD 17 FD | 	byte	$0b, $fd, $0d, $fd, $0f, $fd, $11, $fd, $11, $fd, $13, $fd, $14, $fd, $17, $fd
326f6     17 FD 64 F3 
326fa     CD F0 52 F0 
326fe     41 F0 45 F0 
32702     4C F0 55 F0 | 	byte	$17, $fd, $64, $f3, $cd, $f0, $52, $f0, $41, $f0, $45, $f0, $4c, $f0, $55, $f0
32706     5B F0 64 F0 
3270a     6D F0 FB FC 
3270e     65 FD 68 FD 
32712     69 FD 6C FD | 	byte	$5b, $f0, $64, $f0, $6d, $f0, $fb, $fc, $65, $fd, $68, $fd, $69, $fd, $6c, $fd
32716     6C FD 6D FD 
3271a     6F FD 70 FD 
3271e     72 FD B3 FB 
32722     B1 F2 F4 F0 | 	byte	$6c, $fd, $6d, $fd, $6f, $fd, $70, $fd, $72, $fd, $b3, $fb, $b1, $f2, $f4, $f0
32726     A4 F0 99 F0 
3272a     A0 F0 A8 F0 
3272e     AE F0 B9 F0 
32732     C1 F0 C8 F0 | 	byte	$a4, $f0, $99, $f0, $a0, $f0, $a8, $f0, $ae, $f0, $b9, $f0, $c1, $f0, $c8, $f0
32736     CB FB DD FB 
3273a     DE FB E0 FB 
3273e     E3 FB E3 FB 
32742     E5 FB E8 FB | 	byte	$cb, $fb, $dd, $fb, $de, $fb, $e0, $fb, $e3, $fb, $e3, $fb, $e5, $fb, $e8, $fb
32746     E9 FB EC FB 
3274a     62 F7 27 F2 
3274e     2A F1 FF F0 
32752     FD F0 05 F1 | 	byte	$e9, $fb, $ec, $fb, $62, $f7, $27, $f2, $2a, $f1, $ff, $f0, $fd, $f0, $05, $f1
32756     0C F1 13 F1 
3275a     1B F1 23 F1 
3275e     33 F2 3C FC 
32762     3E FC 40 FC | 	byte	$0c, $f1, $13, $f1, $1b, $f1, $23, $f1, $33, $f2, $3c, $fc, $3e, $fc, $40, $fc
32766     42 FC 45 FC 
3276a     47 FC 48 FC 
3276e     4A FC 4C FC 
32772     4E FC A5 F5 | 	byte	$42, $fc, $45, $fc, $47, $fc, $48, $fc, $4a, $fc, $4c, $fc, $4e, $fc, $a5, $f5
32776     20 F2 77 F1 
3277a     5C F1 5F F1 
3277e     64 F1 6C F1 
32782     73 F1 7C F1 | 	byte	$20, $f2, $77, $f1, $5c, $f1, $5f, $f1, $64, $f1, $6c, $f1, $73, $f1, $7c, $f1
32786     83 F1 DC F8 
3278a     9A FC 9A FC 
3278e     9B FC 9E FC 
32792     9F FC A1 FC | 	byte	$83, $f1, $dc, $f8, $9a, $fc, $9a, $fc, $9b, $fc, $9e, $fc, $9f, $fc, $a1, $fc
32796     A3 FC A4 FC 
3279a     A6 FC A9 FC 
3279e     90 F4 33 F2 
327a2     C5 F1 B6 F1 | 	byte	$a3, $fc, $a4, $fc, $a6, $fc, $a9, $fc, $90, $f4, $33, $f2, $c5, $f1, $b6, $f1
327a6     BA F1 BF F1 
327aa     C7 F1 CE F1 
327ae     D6 F1 DC F1 
327b2     79 FC F0 FC | 	byte	$ba, $f1, $bf, $f1, $c7, $f1, $ce, $f1, $d6, $f1, $dc, $f1, $79, $fc, $f0, $fc
327b6     F3 FC F5 FC 
327ba     FE FB 79 FB 
327be     62 FB 5F FB 
327c2     61 FB 63 FB | 	byte	$f3, $fc, $f5, $fc, $fe, $fb, $79, $fb, $62, $fb, $5f, $fb, $61, $fb, $63, $fb
327c6     6F FA AF F3 
327ca     53 F2 12 F2 
327ce     0F F2 15 F2 
327d2     1D F2 24 F2 | 	byte	$6f, $fa, $af, $f3, $53, $f2, $12, $f2, $0f, $f2, $15, $f2, $1d, $f2, $24, $f2
327d6     2A F2 32 F2 
327da     38 F2 9A FB 
327de     AF FB B1 FB 
327e2     B3 FB B4 FB | 	byte	$2a, $f2, $32, $f2, $38, $f2, $9a, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
327e6     B7 FB B8 FB 
327ea     BA FB BC FB 
327ee     C1 FB 3B F8 
327f2     7E F3 96 F2 | 	byte	$b7, $fb, $b8, $fb, $ba, $fb, $bc, $fb, $c1, $fb, $3b, $f8, $7e, $f3, $96, $f2
327f6     6E F2 6C F2 
327fa     74 F2 7A F2 
327fe     81 F2 87 F2 
32802     8E F2 A7 F2 | 	byte	$6e, $f2, $6c, $f2, $74, $f2, $7a, $f2, $81, $f2, $87, $f2, $8e, $f2, $a7, $f2
32806     06 FC 09 FC 
3280a     0C FC 0E FC 
3280e     0F FC 12 FC 
32812     13 FC 16 FC | 	byte	$06, $fc, $09, $fc, $0c, $fc, $0e, $fc, $0f, $fc, $12, $fc, $13, $fc, $16, $fc
32816     17 FC 1A FC 
3281a     B2 F6 7B F3 
3281e     DD F2 C5 F2 
32822     C7 F2 CF F2 | 	byte	$17, $fc, $1a, $fc, $b2, $f6, $7b, $f3, $dd, $f2, $c5, $f2, $c7, $f2, $cf, $f2
32826     D4 F2 DB F2 
3282a     E0 F2 E8 F2 
3282e     28 F8 60 FC 
32832     61 FC 62 FC | 	byte	$d4, $f2, $db, $f2, $e0, $f2, $e8, $f2, $28, $f8, $60, $fc, $61, $fc, $62, $fc
32836     64 FC 66 FC 
3283a     68 FC 6A FC 
3283e     6D FC 52 FC 
32842     19 FB 4A F5 | 	byte	$64, $fc, $66, $fc, $68, $fc, $6a, $fc, $6d, $fc, $52, $fc, $19, $fb, $4a, $f5
32846     78 F3 24 F3 
3284a     1A F3 1E F3 
3284e     24 F3 2A F3 
32852     31 F3 38 F3 | 	byte	$78, $f3, $24, $f3, $1a, $f3, $1e, $f3, $24, $f3, $2a, $f3, $31, $f3, $38, $f3
32856     3D F3 80 FA 
3285a     0C FB 0F FB 
3285e     10 FB 14 FB 
32862     15 FB 17 FB | 	byte	$3d, $f3, $80, $fa, $0c, $fb, $0f, $fb, $10, $fb, $14, $fb, $15, $fb, $17, $fb
32866     1B FB 1D FB 
3286a     1F FB 92 FA 
3286e     DE F4 AE F3 
32872     79 F3 72 F3 | 	byte	$1b, $fb, $1d, $fb, $1f, $fb, $92, $fa, $de, $f4, $ae, $f3, $79, $f3, $72, $f3
32876     79 F3 7E F3 
3287a     84 F3 8C F3 
3287e     92 F3 97 F3 
32882     52 FB 65 FB | 	byte	$79, $f3, $7e, $f3, $84, $f3, $8c, $f3, $92, $f3, $97, $f3, $52, $fb, $65, $fb
32886     67 FB 69 FB 
3288a     6B FB 6F FB 
3288e     71 FB 72 FB 
32892     74 FB 76 FB | 	byte	$67, $fb, $69, $fb, $6b, $fb, $6f, $fb, $71, $fb, $72, $fb, $74, $fb, $76, $fb
32896     E3 F8 BA F4 
3289a     EE F3 CC F3 
3289e     CA F3 CF F3 
328a2     D5 F3 DD F3 | 	byte	$e3, $f8, $ba, $f4, $ee, $f3, $cc, $f3, $ca, $f3, $cf, $f3, $d5, $f3, $dd, $f3
328a6     E2 F3 E8 F3 
328aa     ED F3 B7 FB 
328ae     BC FB BE FB 
328b2     C0 FB C1 FB | 	byte	$e2, $f3, $e8, $f3, $ed, $f3, $b7, $fb, $bc, $fb, $be, $fb, $c0, $fb, $c1, $fb
328b6     C4 FB C6 FB 
328ba     C8 FB C9 FB 
328be     CC FB 8F F7 
328c2     B9 F4 33 F4 | 	byte	$c4, $fb, $c6, $fb, $c8, $fb, $c9, $fb, $cc, $fb, $8f, $f7, $b9, $f4, $33, $f4
328c6     1E F4 1E F4 
328ca     24 F4 2A F4 
328ce     30 F4 38 F4 
328d2     3E F4 1F F7 | 	byte	$1e, $f4, $1e, $f4, $24, $f4, $2a, $f4, $30, $f4, $38, $f4, $3e, $f4, $1f, $f7
328d6     AD FA B1 FA 
328da     B4 FA B6 FA 
328de     BA FA BB FA 
328e2     BE FA C1 FA | 	byte	$ad, $fa, $b1, $fa, $b4, $fa, $b6, $fa, $ba, $fa, $bb, $fa, $be, $fa, $c1, $fa
328e6     C2 FA C6 FA 
328ea     55 F6 C6 F4 
328ee     7D F4 72 F4 
328f2     78 F4 7E F4 | 	byte	$c2, $fa, $c6, $fa, $55, $f6, $c6, $f4, $7d, $f4, $72, $f4, $78, $f4, $7e, $f4
328f6     83 F4 89 F4 
328fa     8F F4 94 F4 
328fe     66 FA 03 FB 
32902     07 FB 08 FB | 	byte	$83, $f4, $89, $f4, $8f, $f4, $94, $f4, $66, $fa, $03, $fb, $07, $fb, $08, $fb
32906     0A FB 0E FB 
3290a     10 FB 11 FB 
3290e     16 FB 18 FB 
32912     D0 FA 02 F6 | 	byte	$0a, $fb, $0e, $fb, $10, $fb, $11, $fb, $16, $fb, $18, $fb, $d0, $fa, $02, $f6
32916     F9 F4 CA F4 
3291a     C5 F4 CB F4 
3291e     D1 F4 D7 F4 
32922     DC F4 E1 F4 | 	byte	$f9, $f4, $ca, $f4, $c5, $f4, $cb, $f4, $d1, $f4, $d7, $f4, $dc, $f4, $e1, $f4
32926     E8 F4 3F FB 
3292a     56 FB 58 FB 
3292e     5A FB 5E FB 
32932     5F FB 61 FB | 	byte	$e8, $f4, $3f, $fb, $56, $fb, $58, $fb, $5a, $fb, $5e, $fb, $5f, $fb, $61, $fb
32936     64 FB 64 FB 
3293a     69 FB 99 F9 
3293e     E9 F5 33 F5 
32942     17 F5 17 F5 | 	byte	$64, $fb, $64, $fb, $69, $fb, $99, $f9, $e9, $f5, $33, $f5, $17, $f5, $17, $f5
32946     1D F5 22 F5 
3294a     27 F5 2E F5 
3294e     32 F5 37 F5 
32952     B3 FA B6 FA | 	byte	$1d, $f5, $22, $f5, $27, $f5, $2e, $f5, $32, $f5, $37, $f5, $b3, $fa, $b6, $fa
32956     BC FA BC FA 
3295a     C1 FA C2 FA 
3295e     C4 FA C8 FA 
32962     CA FA CE FA | 	byte	$bc, $fa, $bc, $fa, $c1, $fa, $c2, $fa, $c4, $fa, $c8, $fa, $ca, $fa, $ce, $fa
32966     F9 F7 DB F5 
3296a     78 F5 69 F5 
3296e     6A F5 70 F5 
32972     75 F5 7B F5 | 	byte	$f9, $f7, $db, $f5, $78, $f5, $69, $f5, $6a, $f5, $70, $f5, $75, $f5, $7b, $f5
32976     7F F5 85 F5 
3297a     6E F7 06 FB 
3297e     0A FB 0B FB 
32982     0D FB 12 FB | 	byte	$7f, $f5, $85, $f5, $6e, $f7, $06, $fb, $0a, $fb, $0b, $fb, $0d, $fb, $12, $fb
32986     14 FB 15 FB 
3298a     18 FB 1B FB 
3298e     1D FB 70 F7 
32992     01 F6 C0 F5 | 	byte	$14, $fb, $15, $fb, $18, $fb, $1b, $fb, $1d, $fb, $70, $f7, $01, $f6, $c0, $f5
32996     B6 F5 BB F5 
3299a     C0 F5 C6 F5 
3299e     CA F5 CF F5 
329a2     D4 F5 A8 FA | 	byte	$b6, $f5, $bb, $f5, $c0, $f5, $c6, $f5, $ca, $f5, $cf, $f5, $d4, $f5, $a8, $fa
329a6     54 FB 56 FB 
329aa     5A FB 5B FB 
329ae     5E FB 5F FB 
329b2     63 FB 65 FB | 	byte	$54, $fb, $56, $fb, $5a, $fb, $5b, $fb, $5e, $fb, $5f, $fb, $63, $fb, $65, $fb
329b6     67 FB 52 FB 
329ba     29 F7 33 F6 
329be     06 F6 02 F6 
329c2     08 F6 0B F6 | 	byte	$67, $fb, $52, $fb, $29, $f7, $33, $f6, $06, $f6, $02, $f6, $08, $f6, $0b, $f6
329c6     10 F6 16 F6 
329ca     1A F6 1F F6 
329ce     81 FB 9F FB 
329d2     A2 FB A4 FB | 	byte	$10, $f6, $16, $f6, $1a, $f6, $1f, $f6, $81, $fb, $9f, $fb, $a2, $fb, $a4, $fb
329d6     51 FB F2 FA 
329da     E3 FA E3 FA 
329de     E5 FA E9 FA 
329e2     D2 F9 F0 F6 | 	byte	$51, $fb, $f2, $fa, $e3, $fa, $e3, $fa, $e5, $fa, $e9, $fa, $d2, $f9, $f0, $f6
329e6     64 F6 4D F6 
329ea     4D F6 53 F6 
329ee     57 F6 5C F6 
329f2     60 F6 66 F6 | 	byte	$64, $f6, $4d, $f6, $4d, $f6, $53, $f6, $57, $f6, $5c, $f6, $60, $f6, $66, $f6
329f6     6A F6 19 FB 
329fa     1E FB 22 FB 
329fe     23 FB 24 FB 
32a02     26 FB 2A FB | 	byte	$6a, $f6, $19, $fb, $1e, $fb, $22, $fb, $23, $fb, $24, $fb, $26, $fb, $2a, $fb
32a06     2C FB 2E FB 
32a0a     32 FB F0 F8 
32a0e     01 F7 A5 F6 
32a12     98 F6 9A F6 | 	byte	$2c, $fb, $2e, $fb, $32, $fb, $f0, $f8, $01, $f7, $a5, $f6, $98, $f6, $9a, $f6
32a16     9F F6 A3 F6 
32a1a     A6 F6 AC F6 
32a1e     B0 F6 EB F7 
32a22     65 FB 68 FB | 	byte	$9f, $f6, $a3, $f6, $a6, $f6, $ac, $f6, $b0, $f6, $eb, $f7, $65, $fb, $68, $fb
32a26     68 FB 6C FB 
32a2a     6E FB 71 FB 
32a2e     72 FB 74 FB 
32a32     78 FB 7A FB | 	byte	$68, $fb, $6c, $fb, $6e, $fb, $71, $fb, $72, $fb, $74, $fb, $78, $fb, $7a, $fb
32a36     71 F8 21 F7 
32a3a     E5 F6 DD F6 
32a3e     E1 F6 E6 F6 
32a42     EA F6 EF F6 | 	byte	$71, $f8, $21, $f7, $e5, $f6, $dd, $f6, $e1, $f6, $e6, $f6, $ea, $f6, $ef, $f6
32a46     F5 F6 F7 F6 
32a4a     F7 FA AB FB 
32a4e     AD FB AF FB 
32a52     B0 FB B5 FB | 	byte	$f5, $f6, $f7, $f6, $f7, $fa, $ab, $fb, $ad, $fb, $af, $fb, $b0, $fb, $b5, $fb
32a56     B6 FB B9 FB 
32a5a     BB FB BC FB 
32a5e     21 FB 07 F8 
32a62     46 F7 23 F7 | 	byte	$b6, $fb, $b9, $fb, $bb, $fb, $bc, $fb, $21, $fb, $07, $f8, $46, $f7, $23, $f7
32a66     22 F7 26 F7 
32a6a     2B F7 2E F7 
32a6e     34 F7 38 F7 
32a72     3C F7 F7 FA | 	byte	$22, $f7, $26, $f7, $2b, $f7, $2e, $f7, $34, $f7, $38, $f7, $3c, $f7, $f7, $fa
32a76     13 FB 16 FB 
32a7a     17 FB 1B FB 
32a7e     1E FB 20 FB 
32a82     23 FB 25 FB | 	byte	$13, $fb, $16, $fb, $17, $fb, $1b, $fb, $1e, $fb, $20, $fb, $23, $fb, $25, $fb
32a86     26 FB 77 FA 
32a8a     F3 F7 7C F7 
32a8e     67 F7 6A F7 
32a92     6D F7 70 F7 | 	byte	$26, $fb, $77, $fa, $f3, $f7, $7c, $f7, $67, $f7, $6a, $f7, $6d, $f7, $70, $f7
32a96     74 F7 7A F7 
32a9a     7E F7 82 F7 
32a9e     53 FB 5A FB 
32aa2     5B FB 5D FB | 	byte	$74, $f7, $7a, $f7, $7e, $f7, $82, $f7, $53, $fb, $5a, $fb, $5b, $fb, $5d, $fb
32aa6     5F FB 63 FB 
32aaa     65 FB 67 FB 
32aae     69 FB 6A FB 
32ab2     B9 F9 03 F8 | 	byte	$5f, $fb, $63, $fb, $65, $fb, $67, $fb, $69, $fb, $6a, $fb, $b9, $f9, $03, $f8
32ab6     B5 F7 A9 F7 
32aba     AD F7 B0 F7 
32abe     B5 F7 B8 F7 
32ac2     BE F7 C3 F7 | 	byte	$b5, $f7, $a9, $f7, $ad, $f7, $b0, $f7, $b5, $f7, $b8, $f7, $be, $f7, $c3, $f7
32ac6     6E F8 99 FB 
32aca     9C FB 9D FB 
32ace     9F FB A4 FB 
32ad2     A5 FB A8 FB | 	byte	$6e, $f8, $99, $fb, $9c, $fb, $9d, $fb, $9f, $fb, $a4, $fb, $a5, $fb, $a8, $fb
32ad6     A9 FB AB FB 
32ada     AD FB 46 F9 
32ade     26 F8 F0 F7 
32ae2     EA F7 F0 F7 | 	byte	$a9, $fb, $ab, $fb, $ad, $fb, $46, $f9, $26, $f8, $f0, $f7, $ea, $f7, $f0, $f7
32ae6     F4 F7 F8 F7 
32aea     FB F7 FF F7 
32aee     03 F8 65 FA 
32af2     26 FB 29 FB | 	byte	$f4, $f7, $f8, $f7, $fb, $f7, $ff, $f7, $03, $f8, $65, $fa, $26, $fb, $29, $fb
32af6     2B FB 2F FB 
32afa     30 FB 32 FB 
32afe     34 FB 38 FB 
32b02     39 FB 3B FB | 	byte	$2b, $fb, $2f, $fb, $30, $fb, $32, $fb, $34, $fb, $38, $fb, $39, $fb, $3b, $fb
32b06     E9 F8 4A F8 
32b0a     2E F8 2C F8 
32b0e     2F F8 36 F8 
32b12     3A F8 3E F8 | 	byte	$e9, $f8, $4a, $f8, $2e, $f8, $2c, $f8, $2f, $f8, $36, $f8, $3a, $f8, $3e, $f8
32b16     41 F8 44 F8 
32b1a     4A FB 67 FB 
32b1e     68 FB 6B FB 
32b22     6F FB 70 FB | 	byte	$41, $f8, $44, $f8, $4a, $fb, $67, $fb, $68, $fb, $6b, $fb, $6f, $fb, $70, $fb
32b26     73 FB 74 FB 
32b2a     78 FB 7A FB 
32b2e     14 FB E7 F8 
32b32     7D F8 6D F8 | 	byte	$73, $fb, $74, $fb, $78, $fb, $7a, $fb, $14, $fb, $e7, $f8, $7d, $f8, $6d, $f8
32b36     6D F8 70 F8 
32b3a     73 F8 78 F8 
32b3e     7C F8 80 F8 
32b42     84 F8 9F FB | 	byte	$6d, $f8, $70, $f8, $73, $f8, $78, $f8, $7c, $f8, $80, $f8, $84, $f8, $9f, $fb
32b46     A6 FB A7 FB 
32b4a     A9 FB AC FB 
32b4e     AF FB B1 FB 
32b52     B3 FB B4 FB | 	byte	$a6, $fb, $a7, $fb, $a9, $fb, $ac, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
32b56     B7 FB 73 FA 
32b5a     F8 F8 B4 F8 
32b5e     A9 F8 AB F8 
32b62     AF F8 B1 F8 | 	byte	$b7, $fb, $73, $fa, $f8, $f8, $b4, $f8, $a9, $f8, $ab, $f8, $af, $f8, $b1, $f8
32b66     B4 F8 B8 F8 
32b6a     BB F8 FA F8 
32b6e     64 FB 65 FB 
32b72     67 FB 6B FB | 	byte	$b4, $f8, $b8, $f8, $bb, $f8, $fa, $f8, $64, $fb, $65, $fb, $67, $fb, $6b, $fb
32b76     6D FB 6F FB 
32b7a     70 FB 74 FB 
32b7e     77 FB 77 FB 
32b82     E4 F9 0F F9 | 	byte	$6d, $fb, $6f, $fb, $70, $fb, $74, $fb, $77, $fb, $77, $fb, $e4, $f9, $0f, $f9
32b86     E9 F8 E4 F8 
32b8a     E8 F8 EB F8 
32b8e     EE F8 F2 F8 
32b92     F7 F8 FB F8 | 	byte	$e9, $f8, $e4, $f8, $e8, $f8, $eb, $f8, $ee, $f8, $f2, $f8, $f7, $f8, $fb, $f8
32b96     B5 FA 9F FB 
32b9a     A1 FB A4 FB 
32b9e     A5 FB A9 FB 
32ba2     AB FB AE FB | 	byte	$b5, $fa, $9f, $fb, $a1, $fb, $a4, $fb, $a5, $fb, $a9, $fb, $ab, $fb, $ae, $fb
32ba6     AE FB B1 FB 
32baa     B2 FB C7 F9 
32bae     39 F9 22 F9 
32bb2     20 F9 22 F9 | 	byte	$ae, $fb, $b1, $fb, $b2, $fb, $c7, $f9, $39, $f9, $22, $f9, $20, $f9, $22, $f9
32bb6     26 F9 2A F9 
32bba     2E F9 32 F9 
32bbe     33 F9 BA FB 
32bc2     D8 FB DB FB | 	byte	$26, $f9, $2a, $f9, $2e, $f9, $32, $f9, $33, $f9, $ba, $fb, $d8, $fb, $db, $fb
32bc6     DE FB E1 FB 
32bca     E2 FB E4 FB 
32bce     E5 FB E7 FB 
32bd2     E9 FB A7 FB | 	byte	$de, $fb, $e1, $fb, $e2, $fb, $e4, $fb, $e5, $fb, $e7, $fb, $e9, $fb, $a7, $fb
32bd6     C5 F9 67 F9 
32bda     57 F9 56 F9 
32bde     5B F9 5F F9 
32be2     62 F9 66 F9 | 	byte	$c5, $f9, $67, $f9, $57, $f9, $56, $f9, $5b, $f9, $5f, $f9, $62, $f9, $66, $f9
32be6     68 F9 6C F9 
32bea     0B FC 11 FC 
32bee     14 FC 15 FC 
32bf2     07 FC C2 FB | 	byte	$68, $f9, $6c, $f9, $0b, $fc, $11, $fc, $14, $fc, $15, $fc, $07, $fc, $c2, $fb
32bf6     B5 FB B5 FB 
32bfa     B6 FB B8 FB 
32bfe     E9 FA C8 F9 
32c02     94 F9 8D F9 | 	byte	$b5, $fb, $b5, $fb, $b6, $fb, $b8, $fb, $e9, $fa, $c8, $f9, $94, $f9, $8d, $f9
32c06     90 F9 94 F9 
32c0a     95 F9 99 F9 
32c0e     9D F9 9F F9 
32c12     A3 F9 DD FB | 	byte	$90, $f9, $94, $f9, $95, $f9, $99, $f9, $9d, $f9, $9f, $f9, $a3, $f9, $dd, $fb
32c16     DE FB DF FB 
32c1a     E2 FB E4 FB 
32c1e     E6 FB E8 FB 
32c22     E9 FB ED FB | 	byte	$de, $fb, $df, $fb, $e2, $fb, $e4, $fb, $e6, $fb, $e8, $fb, $e9, $fb, $ed, $fb
32c26     EF FB AC FA 
32c2a     E9 F9 C7 F9 
32c2e     C3 F9 C8 F9 
32c32     CA F9 CC F9 | 	byte	$ef, $fb, $ac, $fa, $e9, $f9, $c7, $f9, $c3, $f9, $c8, $f9, $ca, $f9, $cc, $f9
32c36     D0 F9 D4 F9 
32c3a     D6 F9 0E FB 
32c3e     11 FC 13 FC 
32c42     16 FC 17 FC | 	byte	$d0, $f9, $d4, $f9, $d6, $f9, $0e, $fb, $11, $fc, $13, $fc, $16, $fc, $17, $fc
32c46     19 FC 1B FC 
32c4a     1D FC 1E FC 
32c4e     21 FC 22 FC 
32c52     8D FA 0F FA | 	byte	$19, $fc, $1b, $fc, $1d, $fc, $1e, $fc, $21, $fc, $22, $fc, $8d, $fa, $0f, $fa
32c56     F7 F9 F7 F9 
32c5a     FB F9 FE F9 
32c5e     00 FA 03 FA 
32c62     07 FA 0B FA | 	byte	$f7, $f9, $f7, $f9, $fb, $f9, $fe, $f9, $00, $fa, $03, $fa, $07, $fa, $0b, $fa
32c66     1B FC 45 FC 
32c6a     46 FC 48 FC 
32c6e     4A FC 4B FC 
32c72     4E FC 50 FC | 	byte	$1b, $fc, $45, $fc, $46, $fc, $48, $fc, $4a, $fc, $4b, $fc, $4e, $fc, $50, $fc
32c76     52 FC 54 FC 
32c7a     F3 FB 82 FA 
32c7e     35 FA 28 FA 
32c82     2A FA 2D FA | 	byte	$52, $fc, $54, $fc, $f3, $fb, $82, $fa, $35, $fa, $28, $fa, $2a, $fa, $2d, $fa
32c86     31 FA 32 FA 
32c8a     37 FA 37 FA 
32c8e     3C FA 00 FC 
32c92     06 FC 09 FC | 	byte	$31, $fa, $32, $fa, $37, $fa, $37, $fa, $3c, $fa, $00, $fc, $06, $fc, $09, $fc
32c96     09 FC 0B FC 
32c9a     0F FC 12 FC 
32c9e     12 FC 15 FC 
32ca2     17 FC 84 FB | 	byte	$09, $fc, $0b, $fc, $0f, $fc, $12, $fc, $12, $fc, $15, $fc, $17, $fc, $84, $fb
32ca6     8D FA 60 FA 
32caa     5B FA 5C FA 
32cae     60 FA 61 FA 
32cb2     66 FA 67 FA | 	byte	$8d, $fa, $60, $fa, $5b, $fa, $5c, $fa, $60, $fa, $61, $fa, $66, $fa, $67, $fa
32cb6     6C FA 6D FA 
32cba     37 FC 3A FC 
32cbe     3B FC 3D FC 
32cc2     3E FC 41 FC | 	byte	$6c, $fa, $6d, $fa, $37, $fc, $3a, $fc, $3b, $fc, $3d, $fc, $3e, $fc, $41, $fc
32cc6     43 FC 44 FC 
32cca     45 FC 47 FC 
32cce     51 FB AB FA 
32cd2     8E FA 8B FA | 	byte	$43, $fc, $44, $fc, $45, $fc, $47, $fc, $51, $fb, $ab, $fa, $8e, $fa, $8b, $fa
32cd6     8E FA 91 FA 
32cda     93 FA 95 FA 
32cde     98 FA 9B FA 
32ce2     64 FB 67 FC | 	byte	$8e, $fa, $91, $fa, $93, $fa, $95, $fa, $98, $fa, $9b, $fa, $64, $fb, $67, $fc
32ce6     68 FC 6A FC 
32cea     6C FC 6E FC 
32cee     70 FC 72 FC 
32cf2     74 FC 74 FC | 	byte	$68, $fc, $6a, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc, $74, $fc, $74, $fc
32cf6     76 FC 3B FB 
32cfa     D0 FA BB FA 
32cfe     B9 FA BD FA 
32d02     BF FA C2 FA | 	byte	$76, $fc, $3b, $fb, $d0, $fa, $bb, $fa, $b9, $fa, $bd, $fa, $bf, $fa, $c2, $fa
32d06     C4 FA C6 FA 
32d0a     CA FA 13 FC 
32d0e     3A FC 3A FC 
32d12     3E FC 3E FC | 	byte	$c4, $fa, $c6, $fa, $ca, $fa, $13, $fc, $3a, $fc, $3a, $fc, $3e, $fc, $3e, $fc
32d16     41 FC 43 FC 
32d1a     44 FC 47 FC 
32d1e     48 FC 3C FC 
32d22     2B FB F0 FA | 	byte	$41, $fc, $43, $fc, $44, $fc, $47, $fc, $48, $fc, $3c, $fc, $2b, $fb, $f0, $fa
32d26     E6 FA E8 FA 
32d2a     EB FA EE FA 
32d2e     F0 FA F2 FA 
32d32     F6 FA F7 FA | 	byte	$e6, $fa, $e8, $fa, $eb, $fa, $ee, $fa, $f0, $fa, $f2, $fa, $f6, $fa, $f7, $fa
32d36     61 FC 66 FC 
32d3a     68 FC 6B FC 
32d3e     6C FC 6E FC 
32d42     70 FC 72 FC | 	byte	$61, $fc, $66, $fc, $68, $fc, $6b, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc
32d46     73 FC 75 FC 
32d4a     13 FC 3F FB 
32d4e     17 FB 12 FB 
32d52     16 FB 18 FB | 	byte	$73, $fc, $75, $fc, $13, $fc, $3f, $fb, $17, $fb, $12, $fb, $16, $fb, $18, $fb
32d56     1A FB 1D FB 
32d5a     1F FB 20 FB 
32d5e     23 FB 92 FC 
32d62     94 FC 96 FC | 	byte	$1a, $fb, $1d, $fb, $1f, $fb, $20, $fb, $23, $fb, $92, $fc, $94, $fc, $96, $fc
32d66     96 FC 97 FC 
32d6a     9A FC 9C FC 
32d6e     9E FC 9F FC 
32d72     A1 FC E7 FB | 	byte	$96, $fc, $97, $fc, $9a, $fc, $9c, $fc, $9e, $fc, $9f, $fc, $a1, $fc, $e7, $fb
32d76     5A FB 41 FB 
32d7a     3E FB 41 FB | 	byte	$5a, $fb, $41, $fb, $3e, $fb, $41, $fb
32d7e     00 00 00 00 | zero2 long 0
32d82     01 00 00 00 
32d86     00 00 00 00 
32d8a     00 00 00 00 
32d8e     00 00 00 00 | mouse  file "mouse2.def"
32d92     00 00 00 00 
32d96     00 00 00 00 
32d9a     00 00 00 00 
32d9e     00 00 00 00 | 	byte	$00[16]
32da2     01 01 00 00 
32da6     00 00 00 00 
32daa     00 00 00 00 
32dae     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32db2     00 00 00 00 
32db6     00 00 00 00 
32dba     00 00 00 00 
32dbe     00 00 00 00 | 	byte	$00[16]
32dc2     01 0D 01 00 
32dc6     00 00 00 00 
32dca     00 00 00 00 
32dce     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32dd2     00 00 00 00 
32dd6     00 00 00 00 
32dda     00 00 00 00 
32dde     00 00 00 00 | 	byte	$00[16]
32de2     01 0D 0D 01 
32de6     00 00 00 00 
32dea     00 00 00 00 
32dee     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32df2     00 00 00 00 
32df6     00 00 00 00 
32dfa     00 00 00 00 
32dfe     00 00 00 00 | 	byte	$00[16]
32e02     01 0D 0D 0D 
32e06     01 00 00 00 
32e0a     00 00 00 00 
32e0e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32e12     00 00 00 00 
32e16     00 00 00 00 
32e1a     00 00 00 00 
32e1e     00 00 00 00 | 	byte	$00[16]
32e22     01 0D 0D 0D 
32e26     0D 01 00 00 
32e2a     00 00 00 00 
32e2e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32e32     00 00 00 00 
32e36     00 00 00 00 
32e3a     00 00 00 00 
32e3e     00 00 00 00 | 	byte	$00[16]
32e42     01 0D 0D 0D 
32e46     0D 0D 01 00 
32e4a     00 00 00 00 
32e4e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
32e52     00 00 00 00 
32e56     00 00 00 00 
32e5a     00 00 00 00 
32e5e     00 00 00 00 | 	byte	$00[16]
32e62     01 0D 0D 0D 
32e66     0D 0D 0D 01 
32e6a     00 00 00 00 
32e6e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
32e72     00 00 00 00 
32e76     00 00 00 00 
32e7a     00 00 00 00 
32e7e     00 00 00 00 | 	byte	$00[16]
32e82     01 0D 0D 0D 
32e86     0D 0D 0D 0C 
32e8a     01 00 00 00 
32e8e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
32e92     00 00 00 00 
32e96     00 00 00 00 
32e9a     00 00 00 00 
32e9e     00 00 00 00 | 	byte	$00[16]
32ea2     01 0D 0D 0D 
32ea6     0D 0D 0D 0D 
32eaa     0C 01 00 00 
32eae     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
32eb2     00 00 00 00 
32eb6     00 00 00 00 
32eba     00 00 00 00 
32ebe     00 00 00 00 | 	byte	$00[16]
32ec2     01 0D 0D 0D 
32ec6     0D 0D 0D 0D 
32eca     0D 0C 01 00 
32ece     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
32ed2     00 00 00 00 
32ed6     00 00 00 00 
32eda     00 00 00 00 
32ede     00 00 00 00 | 	byte	$00[16]
32ee2     01 0D 0D 0D 
32ee6     0D 0D 0D 0D 
32eea     0D 0D 0B 01 
32eee     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
32ef2     00 00 00 00 
32ef6     00 00 00 00 
32efa     00 00 00 00 
32efe     00 00 00 00 | 	byte	$00[16]
32f02     01 0D 0D 0D 
32f06     0C 0D 0D 03 
32f0a     01 01 01 01 
32f0e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
32f12     00 00 00 00 
32f16     00 00 00 00 
32f1a     00 00 00 00 
32f1e     00 00 00 00 | 	byte	$00[16]
32f22     01 0D 0D 0C 
32f26     01 09 0D 03 
32f2a     00 00 00 00 
32f2e     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
32f32     00 00 00 00 
32f36     00 00 00 00 
32f3a     00 00 00 00 
32f3e     00 00 00 00 | 	byte	$00[16]
32f42     01 0D 0C 01 
32f46     00 01 0D 0B 
32f4a     01 00 00 00 
32f4e     00 00 00 00 | 	byte	$01, $0d, $0c, $01, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
32f52     00 00 00 00 
32f56     00 00 00 00 
32f5a     00 00 00 00 
32f5e     00 00 00 00 | 	byte	$00[16]
32f62     01 0C 01 00 
32f66     00 01 0A 0D 
32f6a     01 00 00 00 
32f6e     00 00 00 00 | 	byte	$01, $0c, $01, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
32f72     00 00 00 00 
32f76     00 00 00 00 
32f7a     00 00 00 00 
32f7e     00 00 00 00 | 	byte	$00[16]
32f82     01 01 00 00 
32f86     00 00 01 0D 
32f8a     0B 01 00 00 
32f8e     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
32f92     00 00 00 00 
32f96     00 00 00 00 
32f9a     00 00 00 00 
32f9e     00 00 00 00 
32fa2     00 00 00 00 
32fa6     00 00       | 	byte	$00[22]
32fa8     01 0B 0D 01 
32fac     00 00 00 00 
32fb0     00 00 00 00 
32fb4     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32fb8     00 00 00 00 
32fbc     00 00 00 00 
32fc0     00 00 00 00 
32fc4     00 00 00 00 
32fc8     00          | 	byte	$00[17]
32fc9     01 01 00 00 
32fcd     00 00 00 00 
32fd1     00 00 00 00 
32fd5     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32fd9     00 00 00 00 
      ...             
3317d     00 00 00 00 
33181     00          | 	byte	$00[425]
33182     73 32 00 04 
33186     00 00 10 00 
3318a     00 00 00 00 
3318e     00 00 00 00 | atari2 file "atari2.s2"
33192     43 87 43 87 
33196     43 87 44 87 
3319a     43 87 44 87 
3319e     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
331a2     43 87 43 87 
331a6     43 87 44 87 
331aa     43 87 43 87 
331ae     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
331b2     44 87 43 87 
331b6     44 87 43 87 
331ba     43 87 43 87 
331be     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
331c2     43 87 43 87 
331c6     44 87 43 87 
331ca     44 87 44 87 
331ce     44 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87, $43, $87
331d2     43 87 43 87 
331d6     44 87 43 87 
331da     43 87 42 87 
331de     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
331e2     43 87 43 87 
331e6     43 87 43 87 
331ea     44 87 43 87 
331ee     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
331f2     44 87 44 87 
331f6     43 87 44 87 
331fa     43 87 44 87 
331fe     44 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $43, $87
33202     44 87 43 87 
33206     44 87 44 87 
3320a     43 87 43 87 
3320e     43 87 44 87 | 	byte	$44, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
33212     43 87 44 87 
33216     44 87 43 87 
3321a     43 87 44 87 
3321e     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
33222     43 87 43 87 
33226     43 87 43 87 
3322a     43 87 43 87 
3322e     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87
33232     42 87 43 87 
33236     44 87 42 87 
3323a     43 87 43 87 
3323e     43 87 43 87 | 	byte	$42, $87, $43, $87, $44, $87, $42, $87, $43, $87, $43, $87, $43, $87, $43, $87
33242     43 87 44 87 
33246     44 87 43 87 
3324a     43 87 43 87 
3324e     43 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
33252     43 87 5C 87 
33256     EE 86 AC 87 
3325a     4C 7C A3 78 
3325e     BB 78 BC 78 | 	byte	$43, $87, $5c, $87, $ee, $86, $ac, $87, $4c, $7c, $a3, $78, $bb, $78, $bc, $78
33262     BC 78 BB 78 
33266     BD 78 BC 78 
3326a     BB 78 BD 78 
3326e     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bd, $78, $bc, $78, $bb, $78, $bd, $78, $bb, $78, $bc, $78
33272     BB 78 BB 78 
33276     BC 78 BC 78 
3327a     BC 78 BB 78 
3327e     BC 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33282     BC 78 BC 78 
33286     BC 78 BC 78 
3328a     BC 78 BC 78 
3328e     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
33292     BB 78 BC 78 
33296     A0 78 4C 7C 
3329a     11 7A 29 89 
3329e     5F 87 44 87 | 	byte	$bb, $78, $bc, $78, $a0, $78, $4c, $7c, $11, $7a, $29, $89, $5f, $87, $44, $87
332a2     44 87 43 87 
332a6     44 87 43 87 
332aa     43 87 42 87 
332ae     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
332b2     43 87 43 87 
332b6     44 87 ED 85 
332ba     71 85 52 79 
332be     43 7A B9 78 | 	byte	$43, $87, $43, $87, $44, $87, $ed, $85, $71, $85, $52, $79, $43, $7a, $b9, $78
332c2     BC 78 BC 78 
332c6     BC 78 BC 78 
332ca     BC 78 BC 78 
332ce     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
332d2     BC 78 BC 78 
332d6     BC 78 A0 78 
332da     CF 7A B9 81 
332de     9D 80 5F 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $a0, $78, $cf, $7a, $b9, $81, $9d, $80, $5f, $87
332e2     44 87 43 87 
332e6     43 87 44 87 
332ea     43 87 44 87 
332ee     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
332f2     43 87 43 87 
332f6     43 87 43 87 
332fa     44 87 43 87 
332fe     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
33302     43 87 43 87 
33306     44 87 43 87 
3330a     44 87 43 87 
3330e     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
33312     44 87 43 87 
33316     43 87 43 87 
3331a     5A 87 39 81 
3331e     F4 83 52 79 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $5a, $87, $39, $81, $f4, $83, $52, $79
33322     A5 78 BC 78 
33326     BB 78 BC 78 
3332a     BB 78 BC 78 
3332e     BC 78 BD 78 | 	byte	$a5, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78
33332     BC 78 BC 78 
33336     BC 78 BC 78 
3333a     BC 78 8F 79 
3333e     17 77 AC 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $8f, $79, $17, $77, $ac, $87
33342     09 85 47 87 
33346     43 87 43 87 
3334a     42 87 42 87 
3334e     43 87 43 87 | 	byte	$09, $85, $47, $87, $43, $87, $43, $87, $42, $87, $42, $87, $43, $87, $43, $87
33352     43 87 43 87 
33356     43 87 43 87 
3335a     43 87 44 87 
3335e     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
33362     43 87 43 87 
33366     44 87 43 87 
3336a     42 87 43 87 
3336e     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $42, $87, $43, $87, $43, $87, $43, $87
33372     44 87 43 87 
33376     43 87 43 87 
3337a     44 87 44 87 
3337e     FD 85 2F 86 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $fd, $85, $2f, $86
33382     94 78 55 7A 
33386     B9 78 BC 78 
3338a     BC 78 BC 78 
3338e     BC 78 BB 78 | 	byte	$94, $78, $55, $7a, $b9, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
33392     BC 78 BB 78 
33396     BC 78 BC 78 
3339a     BC 78 BC 78 
3339e     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
333a2     BB 78 BC 78 
333a6     BC 78 BC 78 
333aa     BB 78 BC 78 
333ae     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
333b2     BC 78 BC 78 
333b6     BD 78 BC 78 
333ba     BC 78 BB 78 
333be     BC 78 2F 79 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $2f, $79
333c2     94 78 B3 84 
333c6     36 84 4A 87 
333ca     43 87 43 87 
333ce     44 87 43 87 | 	byte	$94, $78, $b3, $84, $36, $84, $4a, $87, $43, $87, $43, $87, $44, $87, $43, $87
333d2     43 87 44 87 
333d6     43 87 43 87 
333da     43 87 43 87 
333de     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
333e2     43 87 44 87 
333e6     43 87 44 87 
333ea     43 87 43 87 
333ee     44 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
333f2     43 87 43 87 
333f6     43 87 45 87 
333fa     43 87 43 87 
333fe     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $45, $87, $43, $87, $43, $87, $43, $87, $43, $87
33402     43 87 44 87 
33406     44 87 44 87 
3340a     43 87 43 87 
3340e     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
33412     43 87 42 87 
33416     43 87 43 87 
3341a     44 87 43 87 
3341e     43 87 44 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
33422     54 87 3C 82 
33426     36 83 52 79 
3342a     C6 78 BC 78 
3342e     BC 78 BC 78 | 	byte	$54, $87, $3c, $82, $36, $83, $52, $79, $c6, $78, $bc, $78, $bc, $78, $bc, $78
33432     BB 78 BB 78 
33436     BC 78 BC 78 
3343a     BC 78 BC 78 
3343e     BB 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
33442     BD 78 ED 78 
33446     1B 79 F4 83 
3344a     4D 83 4E 87 
3344e     42 87 44 87 | 	byte	$bd, $78, $ed, $78, $1b, $79, $f4, $83, $4d, $83, $4e, $87, $42, $87, $44, $87
33452     44 87 43 87 
33456     42 87 44 87 
3345a     43 87 42 87 
3345e     44 87 43 87 | 	byte	$44, $87, $43, $87, $42, $87, $44, $87, $43, $87, $42, $87, $44, $87, $43, $87
33462     43 87 54 87 
33466     26 82 B3 84 
3346a     D6 77 BB 78 
3346e     BB 78 BC 78 | 	byte	$43, $87, $54, $87, $26, $82, $b3, $84, $d6, $77, $bb, $78, $bb, $78, $bc, $78
33472     BC 78 BB 78 
33476     BB 78 BB 78 
3347a     BB 78 BB 78 
3347e     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78
33482     BC 78 BC 78 
33486     26 79 18 75 
3348a     36 83 1F 84 
3348e     4A 87 43 87 | 	byte	$bc, $78, $bc, $78, $26, $79, $18, $75, $36, $83, $1f, $84, $4a, $87, $43, $87
33492     43 87 43 87 
33496     43 87 43 87 
3349a     43 87 44 87 
3349e     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
334a2     43 87 44 87 
334a6     44 87 43 87 
334aa     43 87 43 87 
334ae     42 87 44 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87, $44, $87
334b2     43 87 43 87 
334b6     43 87 43 87 
334ba     44 87 44 87 
334be     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $44, $87
334c2     44 87 43 87 
334c6     43 87 43 87 
334ca     43 87 44 87 
334ce     44 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
334d2     44 87 44 87 
334d6     44 87 43 87 
334da     44 87 43 87 
334de     43 87 43 87 | 	byte	$44, $87, $44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
334e2     43 87 43 87 
334e6     43 87 44 87 
334ea     44 87 43 87 
334ee     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
334f2     43 87 43 87 
334f6     43 87 43 87 
334fa     43 87 44 87 
334fe     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
33502     43 87 44 87 
33506     43 87 44 87 
3350a     19 87 7D 86 
3350e     AC 87 CB 7C | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $19, $87, $7d, $86, $ac, $87, $cb, $7c
33512     B1 78 BC 78 
33516     BC 78 BC 78 
3351a     BC 78 BC 78 
3351e     BC 78 BB 78 | 	byte	$b1, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
33522     BC 78 BC 78 
33526     BD 78 BC 78 
3352a     B7 78 3B 7B 
3352e     CF 7A 6A 88 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $b7, $78, $3b, $7b, $cf, $7a, $6a, $88
33532     96 86 44 87 
33536     43 87 43 87 
3353a     43 87 43 87 
3353e     43 87 44 87 | 	byte	$96, $86, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87
33542     44 87 44 87 
33546     43 87 44 87 
3354a     43 87 44 87 
3354e     44 87 44 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87
33552     43 87 44 87 
33556     43 87 44 87 
3355a     43 87 44 87 
3355e     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
33562     43 87 44 87 
33566     43 87 43 87 
3356a     44 87 43 87 
3356e     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
33572     44 87 44 87 
33576     43 87 43 87 
3357a     43 87 44 87 
3357e     43 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
33582     43 87 43 87 
33586     43 87 43 87 
3358a     44 87 44 87 
3358e     40 87 76 83 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $40, $87, $76, $83
33592     36 83 CF 7A 
33596     AB 78 BB 78 
3359a     BC 78 BC 78 
3359e     BB 78 BB 78 | 	byte	$36, $83, $cf, $7a, $ab, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78
335a2     BB 78 BC 78 
335a6     BC 78 BC 78 
335aa     BC 78 BC 78 
335ae     BC 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
335b2     BC 78 BC 78 
335b6     BC 78 BB 78 
335ba     BC 78 BC 78 
335be     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
335c2     BB 78 BC 78 
335c6     BB 78 BC 78 
335ca     BC 78 BD 78 
335ce     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78
335d2     BC 78 BC 78 
335d6     BC 78 BC 78 
335da     BC 78 BD 78 
335de     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78
335e2     BC 78 BB 78 
335e6     BC 78 BB 78 
335ea     BB 78 BC 78 
335ee     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78
335f2     BC 78 BC 78 
335f6     BC 78 BC 78 
335fa     BC 78 BB 78 
335fe     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78
33602     BC 78 BC 78 
33606     BC 78 BD 78 
3360a     BB 78 BC 78 
3360e     BB 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
33612     BC 78 BC 78 
33616     BC 78 BB 78 
3361a     BC 78 BB 78 
3361e     BC 78 BD 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
33622     BB 78 BC 78 
33626     BC 78 BC 78 
3362a     BC 78 BB 78 
3362e     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33632     BC 78 BC 78 
33636     BC 78 BB 78 
3363a     BC 78 BB 78 
3363e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33642     BC 78 BC 78 
33646     BC 78 BC 78 
3364a     BB 78 BC 78 
3364e     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
33652     BC 78 9F 78 
33656     52 79 B3 84 
3365a     2F 86 60 87 
3365e     44 87 43 87 | 	byte	$bc, $78, $9f, $78, $52, $79, $b3, $84, $2f, $86, $60, $87, $44, $87, $43, $87
33662     44 87 43 87 
33666     43 87 43 87 
3366a     43 87 43 87 
3366e     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
33672     43 87 43 87 
33676     43 87 44 87 
3367a     43 87 43 87 
3367e     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
33682     43 87 43 87 
33686     43 87 43 87 
3368a     43 87 44 87 
3368e     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
33692     44 87 44 87 
33696     5E 87 BC 80 
3369a     FB 80 94 78 
3369e     A2 78 BB 78 | 	byte	$44, $87, $44, $87, $5e, $87, $bc, $80, $fb, $80, $94, $78, $a2, $78, $bb, $78
336a2     BD 78 BC 78 
336a6     BB 78 BC 78 
336aa     BB 78 BB 78 
336ae     BC 78 BC 78 | 	byte	$bd, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78
336b2     BC 78 BB 78 
336b6     BB 78 6B 79 
336ba     D6 77 AC 87 
336be     C6 84 48 87 | 	byte	$bc, $78, $bb, $78, $bb, $78, $6b, $79, $d6, $77, $ac, $87, $c6, $84, $48, $87
336c2     43 87 44 87 
336c6     43 87 43 87 
336ca     44 87 43 87 
336ce     43 87 44 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
336d2     43 87 44 87 
336d6     43 87 5C 87 
336da     E7 80 00 80 
336de     52 79 A1 78 | 	byte	$43, $87, $44, $87, $43, $87, $5c, $87, $e7, $80, $00, $80, $52, $79, $a1, $78
336e2     BC 78 BD 78 
336e6     BC 78 BC 78 
336ea     BC 78 BB 78 
336ee     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
336f2     BC 78 BC 78 
336f6     BB 78 BC 78 
336fa     BB 78 BC 78 
336fe     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
33702     BB 78 BC 78 
33706     BC 78 BC 78 
3370a     BC 78 BC 78 
3370e     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
33712     BC 78 BC 78 
33716     BC 78 BC 78 
3371a     A0 78 8D 7B 
3371e     11 7A 29 89 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $a0, $78, $8d, $7b, $11, $7a, $29, $89
33722     60 87 43 87 
33726     44 87 44 87 
3372a     43 87 43 87 
3372e     43 87 43 87 | 	byte	$60, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87
33732     44 87 43 87 
33736     43 87 43 87 
3373a     44 87 73 86 
3373e     0E 91 11 7A | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $73, $86, $0e, $91, $11, $7a
33742     51 7B B6 78 
33746     BC 78 BD 78 
3374a     BC 78 BC 78 
3374e     BB 78 BC 78 | 	byte	$51, $7b, $b6, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
33752     BB 78 BC 78 
33756     BD 78 BB 78 
3375a     BC 78 BB 78 
3375e     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
33762     BC 78 BC 78 
33766     BC 78 BC 78 
3376a     BB 78 BC 78 
3376e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
33772     BC 78 BB 78 
33776     BB 78 BC 78 
3377a     BC 78 BB 78 
3377e     60 79 51 71 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $60, $79, $51, $71
33782     22 8C AF 84 
33786     48 87 43 87 
3378a     44 87 43 87 
3378e     44 87 44 87 | 	byte	$22, $8c, $af, $84, $48, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87
33792     43 87 42 87 
33796     43 87 43 87 
3379a     44 87 43 87 
3379e     43 87 43 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
337a2     43 87 43 87 
337a6     44 87 44 87 
337aa     43 87 43 87 
337ae     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
337b2     43 87 43 87 
337b6     43 87 43 87 
337ba     44 87 43 87 
337be     44 87 C8 86 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $c8, $86
337c2     9F 8B D6 77 
337c6     16 7C B3 78 
337ca     BC 78 BB 78 
337ce     BB 78 BB 78 | 	byte	$9f, $8b, $d6, $77, $16, $7c, $b3, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
337d2     BB 78 BC 78 
337d6     BB 78 BC 78 
337da     BC 78 BC 78 
337de     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
337e2     BC 78 BB 78 
337e6     BB 78 BC 78 
337ea     BB 78 BC 78 
337ee     BB 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
337f2     BB 78 BB 78 
337f6     BC 78 BC 78 
337fa     BC 78 BB 78 
337fe     BC 78 BD 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
33802     BC 78 BC 78 
33806     BC 78 BD 78 
3380a     BB 78 BC 78 
3380e     BB 78 BA 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $ba, $78
33812     BC 78 BC 78 
33816     BC 78 BB 78 
3381a     BC 78 BC 78 
3381e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
33822     A8 78 54 7E 
33826     F4 83 17 82 
3382a     50 87 43 87 
3382e     43 87 43 87 | 	byte	$a8, $78, $54, $7e, $f4, $83, $17, $82, $50, $87, $43, $87, $43, $87, $43, $87
33832     44 87 43 87 
33836     44 87 43 87 
3383a     43 87 44 87 
3383e     44 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
33842     43 87 28 87 
33846     20 85 CF 7A 
3384a     70 7D AD 78 
3384e     BD 78 BC 78 | 	byte	$43, $87, $28, $87, $20, $85, $cf, $7a, $70, $7d, $ad, $78, $bd, $78, $bc, $78
33852     BB 78 BC 78 
33856     BC 78 BC 78 
3385a     BB 78 BB 78 
3385e     BB 78 BD 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78, $bd, $78
33862     BB 78 B2 78 
33866     9A 7C CF 7A 
3386a     4A 87 0D 87 
3386e     43 87 43 87 | 	byte	$bb, $78, $b2, $78, $9a, $7c, $cf, $7a, $4a, $87, $0d, $87, $43, $87, $43, $87
33872     43 87 44 87 
33876     43 87 44 87 
3387a     43 87 43 87 
3387e     43 87 42 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87
33882     44 87 43 87 
33886     28 87 51 85 
3388a     11 7A 1E 7D 
3388e     AF 78 BB 78 | 	byte	$44, $87, $43, $87, $28, $87, $51, $85, $11, $7a, $1e, $7d, $af, $78, $bb, $78
33892     BC 78 BB 78 
33896     BC 78 BC 78 
3389a     BC 78 BC 78 
3389e     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
338a2     BB 78 BC 78 
338a6     BB 78 BC 78 
338aa     BC 78 BC 78 
338ae     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
338b2     BB 78 BC 78 
338b6     BC 78 BC 78 
338ba     BD 78 BB 78 
338be     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bb, $78, $bb, $78
338c2     BC 78 BB 78 
338c6     BC 78 BC 78 
338ca     BC 78 BB 78 
338ce     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
338d2     BC 78 BC 78 
338d6     BC 78 BC 78 
338da     BB 78 BC 78 
338de     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
338e2     BC 78 BD 78 
338e6     BC 78 BC 78 
338ea     BC 78 BB 78 
338ee     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
338f2     BC 78 BB 78 
338f6     BB 78 BC 78 
338fa     BC 78 BB 78 
338fe     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33902     BB 78 BB 78 
33906     BB 78 BC 78 
3390a     B6 78 48 7D 
3390e     78 82 F7 81 | 	byte	$bb, $78, $bb, $78, $bb, $78, $bc, $78, $b6, $78, $48, $7d, $78, $82, $f7, $81
33912     56 87 43 87 
33916     42 87 44 87 
3391a     44 87 43 87 
3391e     43 87 43 87 | 	byte	$56, $87, $43, $87, $42, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
33922     43 87 44 87 
33926     43 87 44 87 
3392a     4C 87 7E 83 
3392e     F4 83 47 78 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $4c, $87, $7e, $83, $f4, $83, $47, $78
33932     F7 78 BC 78 
33936     BC 78 BB 78 
3393a     BB 78 BC 78 
3393e     BC 78 BC 78 | 	byte	$f7, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
33942     BC 78 BB 78 
33946     BC 78 BC 78 
3394a     BB 78 BC 78 
3394e     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
33952     BB 78 BC 78 
33956     BC 78 BC 78 
3395a     BC 78 BB 78 
3395e     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33962     BC 78 BC 78 
33966     BC 78 BC 78 
3396a     BC 78 BB 78 
3396e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33972     BC 78 BB 78 
33976     BB 78 BC 78 
3397a     BC 78 BB 78 
3397e     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33982     BC 78 BC 78 
33986     BB 78 BC 78 
3398a     BC 78 BC 78 
3398e     B0 78 C1 7B | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $b0, $78, $c1, $7b
33992     73 32 00 04 
33996     00 00 10 00 
3399a     00 00 00 00 
3399e     00 00 00 00 | atari12 file "atari12.s2"
339a2     00 6D 00 6D 
339a6     00 6D 00 6D 
339aa     00 6D 00 6D 
339ae     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
339b2     00 6D 00 6D 
339b6     00 6D 00 6D 
339ba     00 6D 00 6D 
339be     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
339c2     00 6D 00 6D 
339c6     00 6D 00 6D 
339ca     00 6D 00 6D 
339ce     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
339d2     00 6D 00 6D 
339d6     00 6D 00 6D 
339da     00 6D 00 6D 
339de     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
339e2     00 6D 00 6D 
339e6     00 6D 00 6D 
339ea     00 6D 00 6D 
339ee     00 6D 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6c
339f2     00 6C 00 6C 
339f6     00 6C 00 6C 
339fa     00 6C 00 6C 
339fe     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33a02     00 6C 00 6C 
33a06     00 6C 00 6C 
33a0a     00 6C 00 6C 
33a0e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33a12     00 6C 00 6C 
33a16     00 6C 00 6C 
33a1a     00 6C 00 6C 
33a1e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33a22     00 6C 00 6C 
33a26     00 6C 00 6C 
33a2a     00 6C 00 6C 
33a2e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33a32     00 6C 00 6C 
33a36     00 6C 00 6C 
33a3a     00 6C 00 6C 
33a3e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33a42     00 6C 00 6C 
33a46     00 6C 00 6C 
33a4a     00 6C 00 6C 
33a4e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33a52     00 6C 00 6C 
33a56     00 6C 00 6C 
33a5a     00 6C 00 6C 
33a5e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33a62     00 6C 00 6C 
33a66     00 6C 00 6C 
33a6a     00 6C 00 6C 
33a6e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33a72     00 6C 00 6C 
33a76     00 6C 00 6C 
33a7a     00 6C 00 6C 
33a7e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33a82     00 6C 00 6C 
33a86     00 6C 00 6C 
33a8a     00 6C 00 6C 
33a8e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33a92     00 6C 00 6C 
33a96     00 6C 00 6C 
33a9a     00 6C 00 6C 
33a9e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33aa2     00 6C 00 6B 
33aa6     00 6B 00 6B 
33aaa     00 6B 00 6B 
33aae     00 6B 00 6B | 	byte	$00, $6c, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33ab2     00 6B 00 6B 
33ab6     00 6B 00 6B 
33aba     00 6B 00 6B 
33abe     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33ac2     00 6B 00 6B 
33ac6     00 6B 00 6B 
33aca     00 6B 00 6B 
33ace     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33ad2     00 6B 00 6B 
33ad6     00 6B 00 6B 
33ada     00 6B 00 6B 
33ade     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33ae2     00 6B 00 6B 
33ae6     00 6B 00 6B 
33aea     00 6B 00 6B 
33aee     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33af2     00 6B 00 6B 
33af6     00 6B 00 6B 
33afa     00 6B 00 6B 
33afe     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33b02     00 6B 00 6B 
33b06     00 6B 00 6B 
33b0a     00 6B 00 6B 
33b0e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33b12     00 6B 00 6B 
33b16     00 6B 00 6B 
33b1a     00 6B 00 6B 
33b1e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33b22     00 6B 00 6B 
33b26     00 6B 00 6B 
33b2a     00 6B 00 6B 
33b2e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33b32     00 6B 00 6B 
33b36     00 6B 00 6B 
33b3a     00 6A 00 9D 
33b3e     00 9D 00 9E | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6a, $00, $9d, $00, $9d, $00, $9e
33b42     00 9E 00 9E 
33b46     00 9E 00 9E 
33b4a     00 9E 00 9E 
33b4e     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33b52     00 9E 00 9E 
33b56     00 9E 00 9E 
33b5a     00 9E 00 9E 
33b5e     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33b62     00 9E 00 9E 
33b66     00 9E 00 9E 
33b6a     00 9E 00 9E 
33b6e     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33b72     00 9E 00 9E 
33b76     00 9E 00 9E 
33b7a     00 9E 00 9E 
33b7e     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33b82     00 9E 00 9E 
33b86     00 9E 00 9E 
33b8a     00 9E 00 9E 
33b8e     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33b92     00 9E 00 9E 
33b96     00 9E 00 9E 
33b9a     00 9E 00 9E 
33b9e     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33ba2     00 9E 00 9E 
33ba6     00 9E 00 9E 
33baa     00 9E 00 9E 
33bae     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33bb2     00 9E 00 9E 
33bb6     00 9E 00 9E 
33bba     00 9E 00 9E 
33bbe     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33bc2     00 9E 00 9E 
33bc6     00 9E 00 9E 
33bca     00 9E 00 9E 
33bce     00 9F 00 9F | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9f, $00, $9f
33bd2     00 9F 00 9F 
33bd6     00 9F 00 9F 
33bda     00 9F 00 9F 
33bde     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33be2     00 9F 00 9F 
33be6     00 9F 00 9F 
33bea     00 9F 00 9F 
33bee     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33bf2     00 9F 00 9F 
33bf6     00 9F 00 9F 
33bfa     00 9F 00 9F 
33bfe     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33c02     00 9F 00 9F 
33c06     00 9F 00 9F 
33c0a     00 9F 00 9F 
33c0e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33c12     00 9F 00 9F 
33c16     00 9F 00 9F 
33c1a     00 9F 00 9F 
33c1e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33c22     00 9F 00 9F 
33c26     00 9F 00 9F 
33c2a     00 9F 00 9F 
33c2e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33c32     00 9F 00 9F 
33c36     00 9F 00 9F 
33c3a     00 9F 00 9F 
33c3e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33c42     00 9F 00 9F 
33c46     00 9F 00 9F 
33c4a     00 9F 00 9F 
33c4e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33c52     00 9F 00 9F 
33c56     00 9F 00 9F 
33c5a     00 9F 00 9F 
33c5e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33c62     00 9F 00 9F 
33c66     00 9F 00 9F 
33c6a     00 9F 00 9F 
33c6e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33c72     00 9F 00 9F 
33c76     00 9F 00 9F 
33c7a     00 9F 00 9F 
33c7e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33c82     00 9F 00 9F 
33c86     00 9F 00 9F 
33c8a     00 9F 00 9F 
33c8e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33c92     00 9F 00 9F 
33c96     00 9F 00 A0 
33c9a     00 A0 00 A0 
33c9e     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33ca2     00 A0 00 A0 
33ca6     00 A0 00 A0 
33caa     00 A0 00 A0 
33cae     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33cb2     00 A0 00 A0 
33cb6     00 A0 00 A0 
33cba     00 A0 00 A0 
33cbe     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33cc2     00 A0 00 A0 
33cc6     00 A0 00 A0 
33cca     00 A0 00 A0 
33cce     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33cd2     00 A0 00 A0 
33cd6     00 A0 00 A0 
33cda     00 A0 00 A0 
33cde     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33ce2     00 A0 00 A0 
33ce6     00 A0 00 A0 
33cea     00 A0 00 A0 
33cee     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33cf2     00 A0 00 A0 
33cf6     00 A0 00 A0 
33cfa     00 A0 00 A0 
33cfe     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33d02     00 A0 00 A0 
33d06     00 A0 00 A0 
33d0a     00 A0 00 A0 
33d0e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33d12     00 A0 00 A0 
33d16     00 A0 00 A0 
33d1a     00 A0 00 A0 
33d1e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33d22     00 A0 00 A0 
33d26     00 A0 00 A0 
33d2a     00 A0 00 A0 
33d2e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33d32     00 A0 00 A0 
33d36     00 A0 00 A0 
33d3a     00 A0 00 A0 
33d3e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33d42     00 A0 00 A0 
33d46     00 A0 00 A0 
33d4a     00 A0 00 A0 
33d4e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33d52     00 A0 00 A0 
33d56     00 A0 00 A0 
33d5a     00 A0 00 A0 
33d5e     00 6E 00 6E | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $6e, $00, $6e
33d62     00 6D 00 6D 
33d66     00 6D 00 6D 
33d6a     00 6D 00 6D 
33d6e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33d72     00 6D 00 6D 
33d76     00 6D 00 6D 
33d7a     00 6D 00 6D 
33d7e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33d82     00 6D 00 6D 
33d86     00 6D 00 6D 
33d8a     00 6D 00 6D 
33d8e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33d92     00 6D 00 6D 
33d96     00 6D 00 6D 
33d9a     00 6D 00 6D 
33d9e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33da2     00 6D 00 6D 
33da6     00 6D 00 6D 
33daa     00 6D 00 6D 
33dae     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33db2     00 6D 00 6D 
33db6     00 6D 00 6D 
33dba     00 6D 00 6D 
33dbe     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33dc2     00 6D 00 6D 
33dc6     00 6D 00 6D 
33dca     00 6D 00 6D 
33dce     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33dd2     00 6D 00 6D 
33dd6     00 6D 00 6D 
33dda     00 6D 00 6D 
33dde     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33de2     00 6D 00 6D 
33de6     00 A0 00 A0 
33dea     00 A0 00 A0 
33dee     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33df2     00 A0 00 A0 
33df6     00 A0 00 A0 
33dfa     00 A0 00 A0 
33dfe     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33e02     00 A0 00 A0 
33e06     00 A0 00 A0 
33e0a     00 A0 00 A0 
33e0e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33e12     00 A0 00 A0 
33e16     00 A0 00 A0 
33e1a     00 A0 00 A0 
33e1e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33e22     00 A0 00 A0 
33e26     00 A0 00 A0 
33e2a     00 A0 00 A0 
33e2e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33e32     00 A0 00 A0 
33e36     00 A0 00 A0 
33e3a     00 A0 00 A0 
33e3e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33e42     00 A0 00 A0 
33e46     00 A0 00 A0 
33e4a     00 A0 00 A0 
33e4e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33e52     00 A0 00 A0 
33e56     00 A0 00 A0 
33e5a     00 A0 00 A0 
33e5e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33e62     00 A0 00 A0 
33e66     00 A0 00 A0 
33e6a     00 A0 00 A0 
33e6e     00 A1 00 6D | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $6d
33e72     00 6D 00 6D 
33e76     00 6D 00 6D 
33e7a     00 6D 00 6D 
33e7e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33e82     00 6D 00 6D 
33e86     00 6D 00 6D 
33e8a     00 6D 00 6D 
33e8e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33e92     00 6D 00 6D 
33e96     00 6D 00 6D 
33e9a     00 6D 00 6D 
33e9e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33ea2     00 6D 00 6D 
33ea6     00 6D 00 6D 
33eaa     00 6D 00 6D 
33eae     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33eb2     00 6D 00 6D 
33eb6     00 6D 00 6D 
33eba     00 6D 00 6D 
33ebe     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33ec2     00 6D 00 6D 
33ec6     00 6D 00 6D 
33eca     00 6D 00 6D 
33ece     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33ed2     00 6D 00 6D 
33ed6     00 6D 00 6D 
33eda     00 6D 00 6D 
33ede     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33ee2     00 6D 00 6D 
33ee6     00 6D 00 6D 
33eea     00 6D 00 6D 
33eee     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33ef2     00 6D 00 6D 
33ef6     00 6C 00 A0 
33efa     00 9F 00 A0 
33efe     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $a0, $00, $9f, $00, $a0, $00, $a0, $00, $a0
33f02     00 A0 00 A0 
33f06     00 A0 00 A0 
33f0a     00 A0 00 A0 
33f0e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33f12     00 A0 00 A0 
33f16     00 A0 00 A0 
33f1a     00 A0 00 A0 
33f1e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33f22     00 A0 00 A0 
33f26     00 A0 00 A0 
33f2a     00 A0 00 A0 
33f2e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33f32     00 A0 00 A0 
33f36     00 A0 00 A0 
33f3a     00 A0 00 A0 
33f3e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33f42     00 A0 00 A0 
33f46     00 A0 00 A0 
33f4a     00 A0 00 A0 
33f4e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33f52     00 A0 00 A0 
33f56     00 A0 00 A0 
33f5a     00 A0 00 A0 
33f5e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33f62     00 A0 00 A0 
33f66     00 A0 00 A0 
33f6a     00 A0 00 A0 
33f6e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33f72     00 A0 00 A0 
33f76     00 A0 00 A0 
33f7a     00 A0 00 A0 
33f7e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33f82     00 A0 00 A0 
33f86     00 A0 00 A0 
33f8a     00 A0 00 A0 
33f8e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33f92     00 A0 00 A0 
33f96     00 A0 00 A0 
33f9a     00 A0 00 A0 
33f9e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33fa2     00 A0 00 A0 
33fa6     00 A0 00 A0 
33faa     00 A0 00 A0 
33fae     00 A1 00 A1 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $a1
33fb2     00 A1 00 A1 
33fb6     00 A1 00 A1 
33fba     00 A1 00 A1 
33fbe     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
33fc2     00 A1 00 A1 
33fc6     00 A1 00 A1 
33fca     00 A1 00 A1 
33fce     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
33fd2     00 A1 00 A1 
33fd6     00 A1 00 A1 
33fda     00 A1 00 A1 
33fde     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
33fe2     00 A1 00 A1 
33fe6     00 A1 00 A1 
33fea     00 A1 00 A1 
33fee     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
33ff2     00 A1 00 A1 
33ff6     00 A1 00 A1 
33ffa     00 A1 00 A1 
33ffe     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
34002     00 A1 00 A1 
34006     00 A1 00 A1 
3400a     00 6E 00 6E 
3400e     00 6E 00 6E | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $6e, $00, $6e, $00, $6e, $00, $6e
34012     00 6E 00 6E 
34016     00 6E 00 6E 
3401a     00 6E 00 6E 
3401e     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
34022     00 6E 00 6E 
34026     00 6E 00 6E 
3402a     00 6E 00 6E 
3402e     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
34032     00 6E 00 6E 
34036     00 6E 00 6E 
3403a     00 6E 00 6E 
3403e     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
34042     00 6E 00 6D 
34046     00 6D 00 6D 
3404a     00 6D 00 6D 
3404e     00 6D 00 6D | 	byte	$00, $6e, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34052     00 6D 00 6D 
34056     00 6D 00 6D 
3405a     00 6D 00 6D 
3405e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34062     00 6D 00 6D 
34066     00 6D 00 6D 
3406a     00 6D 00 6D 
3406e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34072     00 6D 00 6D 
34076     00 6D 00 6D 
3407a     00 6D 00 6D 
3407e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34082     00 6D 00 6D 
34086     00 6D 00 6D 
3408a     00 6D 00 6D 
3408e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34092     00 6D 00 6D 
34096     00 6D 00 6D 
3409a     00 6D 00 6D 
3409e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
340a2     00 6D 00 6D 
340a6     00 6D 00 6D 
340aa     00 6D 00 6D 
340ae     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
340b2     00 6D 00 6D 
340b6     00 6D 00 6D 
340ba     00 6D 00 6D 
340be     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
340c2     00 6D 00 6D 
340c6     00 6D 00 6D 
340ca     00 6D 00 6D 
340ce     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
340d2     00 6D 00 6D 
340d6     00 6D 00 6D 
340da     00 6D 00 6D 
340de     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
340e2     00 6D 00 6D 
340e6     00 6D 00 6D 
340ea     00 6D 00 6D 
340ee     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
340f2     00 6D 00 6D 
340f6     00 6C 00 6C 
340fa     00 6C 00 6C 
340fe     00 6C 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
34102     00 6C 00 6C 
34106     00 6C 00 6C 
3410a     00 6C 00 6C 
3410e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
34112     00 6C 00 6C 
34116     00 6C 00 6C 
3411a     00 9D 00 9F 
3411e     00 9F 00 9F | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $9d, $00, $9f, $00, $9f, $00, $9f
34122     00 9F 00 9F 
34126     00 9F 00 9F 
3412a     00 A0 00 A0 
3412e     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34132     00 A0 00 A0 
34136     00 A0 00 A0 
3413a     00 A0 00 A0 
3413e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34142     00 A0 00 A0 
34146     00 A0 00 A0 
3414a     00 A0 00 A0 
3414e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34152     00 A0 00 A0 
34156     00 A0 00 A0 
3415a     00 A0 00 A0 
3415e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34162     00 A0 00 A0 
34166     00 A0 00 A0 
3416a     00 A0 00 A0 
3416e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34172     00 A0 00 A0 
34176     00 A0 00 A0 
3417a     00 A0 00 A0 
3417e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34182     00 A0 00 A0 
34186     00 A0 00 A0 
3418a     00 A0 00 A0 
3418e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34192     00 A0 00 A0 
34196     00 A0 00 A0 
3419a     00 A0 00 A0 
3419e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
341a2                 | 
341a2     00 00       |              	org
341a4 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
341a8 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
341ac 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
341b0 003             | 
341b0 003 00 30 04 F6 |                 mov     psramaddr,#0
341b4 004             | 
341b4 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
341b8 005 20 00 00 FF 
341bc 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
341c0 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
341c4 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
341c8 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
341cc 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
341d0 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
341d4 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
341d8 00d             | 
341d8 00d 20 00 00 FF 
341dc 00e 00 30 04 F1 |                 add 	psramaddr,##16384
341e0 00f E0 03 00 FF 
341e4 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
341e8 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
341ec 012             | 
341ec 012             |                 
341ec 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
341f0 013             |     
341f0 013 01 2C 60 FD |                 cogid 	t11				' get id
341f4 014 00 00 EC FC |                 coginit #0,#0				' start the new program
341f8 015 03 2C 60 FD |                 cogstop t11				' stop the loader
341fc 016             | 
341fc 016 00 00 00 00 | t11 		long 	0
34200 017 00 FF 07 00 | mailbox 	long 	$7FF00
34204 018 00 00 00 00 | psramaddr 	long 	0
34208 019 00 00 00 00 | pslockval	long 	0
3420c 01a 00 00 00 00 | cmd             long    0
34210 01b 00 00 00 00 | buf1            long    0
34214 01c 00 40 00 00 | buf2            long    16384
34218 01d 1C 42 03 00 | 	long	@@@_dat_ + 12624
3421c 01e 50 32 20 52 
34220 01f 65 74 72 6F 
34224 020 6D 61 63 68 
34228 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
3422c 022 42 41 53 49 
34230 023 43 20 76 65 
34234 024 72 73 69 6F 
34238 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
3423c 026 33 31 00 00 | 	byte	$33, $31, $00, $00
34240 027             | 	alignl
34240 027             | _hg010b_spin2_dat_
34240 027             | 
34240 027 00 00 00 00 
34244 028 00 00 00 00 
34248 029 00 00 00 00 
3424c 02a 00 00 00 00 
34250 02b 00 00 00    | vga_font       file "vgafont.def"
34253 02b 7E 81 A5 81 
34257 02c 81 BD 99 81 
3425b 02d 81 7E 00 00 
3425f 02e 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
34263 02f 7E FF DB FF 
34267 030 FF C3 E7 FF 
3426b 031 FF 7E 00 00 
3426f 032 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
34273 033 00 36 7F 7F 
34277 034 7F 7F 3E 1C 
3427b 035 08 00 00 00 
3427f 036 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
34283 037 00 08 1C 3E 
34287 038 7F 3E 1C 08 
3428b 039 00 00 00 00 
3428f 03a 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
34293 03b 18 3C 3C E7 
34297 03c E7 E7 18 18 
3429b 03d 3C 00 00 00 
3429f 03e 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
342a3 03f 18 3C 7E FF 
342a7 040 FF 7E 18 18 
342ab 041 3C 00 00 00 
342af 042 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
342b3 043 00 00 00 18 
342b7 044 3C 3C 18 00 
342bb 045 00 00 00 00 
342bf 046 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
342c3 047 FF FF FF E7 
342c7 048 C3 C3 E7 FF 
342cb 049 FF FF FF FF 
342cf 04a FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
342d3 04b 00 00 3C 66 
342d7 04c 42 42 66 3C 
342db 04d 00 00 00 00 
342df 04e 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
342e3 04f FF FF C3 99 
342e7 050 BD BD 99 C3 
342eb 051 FF FF FF FF 
342ef 052 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
342f3 053 78 70 58 4C 
342f7 054 1E 33 33 33 
342fb 055 33 1E 00 00 
342ff 056 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
34303 057 3C 66 66 66 
34307 058 66 3C 18 7E 
3430b 059 18 18 00 00 
3430f 05a 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
34313 05b FC CC FC 0C 
34317 05c 0C 0C 0C 0E 
3431b 05d 0F 07 00 00 
3431f 05e 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
34323 05f FE C6 FE C6 
34327 060 C6 C6 C6 E6 
3432b 061 E7 67 03 00 
3432f 062 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
34333 063 18 18 DB 3C 
34337 064 E7 3C DB 18 
3433b 065 18 00 00 00 
3433f 066 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
34343 067 03 07 0F 1F 
34347 068 7F 1F 0F 07 
3434b 069 03 01 00 00 
3434f 06a 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
34353 06b 60 70 78 7C 
34357 06c 7F 7C 78 70 
3435b 06d 60 40 00 00 
3435f 06e 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
34363 06f 18 3C 7E 18 
34367 070 18 18 7E 3C 
3436b 071 18 00 00 00 
3436f 072 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
34373 073 66 66 66 66 
34377 074 66 66 66    | 	byte	$66[7]
3437a 075 00 66 66 00 
3437e 076 00 00 00 00 
34382 077 00 FE DB DB 
34386 078 DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
3438a 079 D8 D8 D8 00 
3438e 07a 00 00 00 3E 
34392 07b 63 06 1C 36 
34396 07c 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
3439a 07d 30 63 3E 00 
3439e 07e 00 00 00 00 
343a2 07f 00 00 00 00 
343a6 080 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
343aa 081 7F 7F 7F 00 
343ae 082 00 00 00 00 
343b2 083 00 18 3C 7E 
343b6 084 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
343ba 085 3C 18 7E 00 
343be 086 00 00 00 00 
343c2 087 00 18 3C 7E 
343c6 088 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
343ca 089 18 18 18 00 
343ce 08a 00 00 00 00 
343d2 08b 00 18 18 18 
343d6 08c 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
343da 08d 7E 3C 18 00 
343de 08e 00 00 00 00 
343e2 08f 00 00 00 18 
343e6 090 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
343ea 091 00 00 00 00 
343ee 092 00 00 00 00 
343f2 093 00 00 00    | 	byte	$00[11]
343f5 094 0C 06 7F 06 
343f9 095 0C 00 00 00 
343fd 096 00 00 00 00 
34401 097 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34405 098 00 03 03 03 
34409 099 7F 00 00 00 
3440d 09a 00 00 00 00 
34411 09b 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34415 09c 14 36 7F 36 
34419 09d 14 00 00 00 
3441d 09e 00 00 00 00 
34421 09f 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
34425 0a0 1C 1C 3E 3E 
34429 0a1 7F 7F 00 00 
3442d 0a2 00 00 00 00 
34431 0a3 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
34435 0a4 7F 3E 3E 1C 
34439 0a5 1C 08 00 00 
3443d 0a6 00 00 00 00 
34441 0a7 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34445 0a8 00 00 00 00 
34449 0a9 00 00 00 00 
3444d 0aa 00 00 00 00 
34451 0ab 00 00       | 	byte	$00[14]
34453 0ab 18 3C 3C 3C 
34457 0ac 18 18 18 00 
3445b 0ad 18 18 00 00 
3445f 0ae 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
34463 0af 66 24 00 00 
34467 0b0 00 00 00 00 
3446b 0b1 00 00 00 00 
3446f 0b2 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34473 0b3 00 36 36 7F 
34477 0b4 36 36 36 7F 
3447b 0b5 36 36 00 00 
3447f 0b6 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
34483 0b7 3E 63 43 03 
34487 0b8 3E 60 60 61 
3448b 0b9 63 3E 18 18 
3448f 0ba 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
34493 0bb 00 00 43 63 
34497 0bc 30 18 0C 06 
3449b 0bd 63 61 00 00 
3449f 0be 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
344a3 0bf 1C 36 36 1C 
344a7 0c0 6E 3B 33 33 
344ab 0c1 33 6E 00 00 
344af 0c2 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
344b3 0c3 0C 0C 0C 06 
344b7 0c4 00 00 00 00 
344bb 0c5 00 00 00 00 
344bf 0c6 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
344c3 0c7 30 18 0C 0C 
344c7 0c8 0C 0C 0C 0C 
344cb 0c9 18 30 00 00 
344cf 0ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
344d3 0cb 0C 18 30 30 
344d7 0cc 30 30 30 30 
344db 0cd 18 0C 00 00 
344df 0ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
344e3 0cf 00 00 00 66 
344e7 0d0 3C FF 3C 66 
344eb 0d1 00 00 00 00 
344ef 0d2 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
344f3 0d3 00 00 00 18 
344f7 0d4 18 7E 18 18 
344fb 0d5 00 00 00 00 
344ff 0d6 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
34503 0d7 00 00 00 00 
34507 0d8 00 00 00 00 | 	byte	$00[8]
3450b 0d9 18 18 18 0C 
3450f 0da 00 00 00 00 
34513 0db 00 00 00 00 
34517 0dc 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
3451b 0dd 00 00 00 00 
3451f 0de 00 00 00 00 
34523 0df 00 00 00 00 
34527 0e0 00 00 00 00 | 	byte	$00[16]
3452b 0e1 18 18 00 00 
3452f 0e2 00 00 00 00 
34533 0e3 00 00 40 60 
34537 0e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
3453b 0e5 03 01 00 00 
3453f 0e6 00 00 00 00 
34543 0e7 1C 36 63 63 
34547 0e8 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
3454b 0e9 36 1C 00 00 
3454f 0ea 00 00 00 00 
34553 0eb 18 1C 1E 18 
34557 0ec 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
3455b 0ed 18 7E 00 00 
3455f 0ee 00 00 00 00 
34563 0ef 3E 63 60 30 
34567 0f0 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
3456b 0f1 63 7F 00 00 
3456f 0f2 00 00 00 00 
34573 0f3 3E 63 60 60 
34577 0f4 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
3457b 0f5 63 3E 00 00 
3457f 0f6 00 00 00 00 
34583 0f7 30 38 3C 36 
34587 0f8 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
3458b 0f9 30 78 00 00 
3458f 0fa 00 00 00 00 
34593 0fb 7F 03 03 03 
34597 0fc 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
3459b 0fd 63 3E 00 00 
3459f 0fe 00 00 00 00 
345a3 0ff 1C 06 03 03 
345a7 100 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
345ab 101 63 3E 00 00 
345af 102 00 00 00 00 
345b3 103 7F 63 60 60 
345b7 104 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
345bb 105 0C 0C 00 00 
345bf 106 00 00 00 00 
345c3 107 3E 63 63 63 
345c7 108 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
345cb 109 63 3E 00 00 
345cf 10a 00 00 00 00 
345d3 10b 3E 63 63 63 
345d7 10c 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
345db 10d 30 1E 00 00 
345df 10e 00 00 00 00 
345e3 10f 00 00 00 18 
345e7 110 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
345eb 111 18 18 00 00 
345ef 112 00 00 00 00 
345f3 113 00 00 00 18 
345f7 114 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
345fb 115 18 18 0C 00 
345ff 116 00 00 00 00 
34603 117 00 60 30 18 
34607 118 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
3460b 119 30 60 00 00 
3460f 11a 00 00 00 00 
34613 11b 00 00 00 7E 
34617 11c 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
3461b 11d 00 00 00 00 
3461f 11e 00 00 00 00 
34623 11f 00          | 	byte	$00[9]
34624 120 06 0C 18 30 
34628 121 60 30 18 0C 
3462c 122 06 00 00 00 
34630 123 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
34634 124 63 63 30 18 
34638 125 18 18 00 18 
3463c 126 18 00 00 00 
34640 127 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
34644 128 3E 63 63 7B 
34648 129 7B 7B 3B 03 
3464c 12a 3E 00 00 00 
34650 12b 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
34654 12c 1C 36 63 63 
34658 12d 7F 63 63 63 
3465c 12e 63 00 00 00 
34660 12f 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
34664 130 66 66 66 3E 
34668 131 66 66 66 66 
3466c 132 3F 00 00 00 
34670 133 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
34674 134 66 43 03 03 
34678 135 03 03 43 66 
3467c 136 3C 00 00 00 
34680 137 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
34684 138 36 66 66 66 
34688 139 66 66 66 36 
3468c 13a 1F 00 00 00 
34690 13b 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
34694 13c 66 46 16 1E 
34698 13d 16 06 46 66 
3469c 13e 7F 00 00 00 
346a0 13f 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
346a4 140 66 46 16 1E 
346a8 141 16 06 06 06 
346ac 142 0F 00 00 00 
346b0 143 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
346b4 144 66 43 03 03 
346b8 145 7B 63 63 66 
346bc 146 5C 00 00 00 
346c0 147 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
346c4 148 63 63 63 7F 
346c8 149 63 63 63 63 
346cc 14a 63 00 00 00 
346d0 14b 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
346d4 14c 18 18 18 18 
346d8 14d 18 18 18 18 | 	byte	$18[8]
346dc 14e 3C 00 00 00 
346e0 14f 00 00 00 78 
346e4 150 30 30 30 30 
346e8 151 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
346ec 152 1E 00 00 00 
346f0 153 00 00 00 67 
346f4 154 66 66 36 1E 
346f8 155 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
346fc 156 67 00 00 00 
34700 157 00 00 00 0F 
34704 158 06 06 06 06 
34708 159 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
3470c 15a 7F 00 00 00 
34710 15b 00 00 00 63 
34714 15c 77 7F 7F 6B 
34718 15d 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
3471c 15e 63 00 00 00 
34720 15f 00 00 00 63 
34724 160 67 6F 7F 7B 
34728 161 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
3472c 162 63 00 00 00 
34730 163 00 00 00 3E 
34734 164 63 63 63 63 
34738 165 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
3473c 166 3E 00 00 00 
34740 167 00 00 00 3F 
34744 168 66 66 66 3E 
34748 169 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
3474c 16a 0F 00 00 00 
34750 16b 00 00 00 3E 
34754 16c 63 63 63 63 
34758 16d 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
3475c 16e 3E 30 70 00 
34760 16f 00 00 00 3F 
34764 170 66 66 66 3E 
34768 171 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
3476c 172 67 00 00 00 
34770 173 00 00 00 3E 
34774 174 63 63 06 1C 
34778 175 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
3477c 176 3E 00 00 00 
34780 177 00 00 00 7E 
34784 178 7E 5A 18 18 
34788 179 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
3478c 17a 3C 00 00 00 
34790 17b 00 00 00 63 
34794 17c 63 63 63 63 
34798 17d 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
3479c 17e 3E 00 00 00 
347a0 17f 00 00 00 63 
347a4 180 63 63 63 63 
347a8 181 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
347ac 182 08 00 00 00 
347b0 183 00 00 00 63 
347b4 184 63 63 63 6B 
347b8 185 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
347bc 186 36 00 00 00 
347c0 187 00 00 00 63 
347c4 188 63 36 3E 1C 
347c8 189 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
347cc 18a 63 00 00 00 
347d0 18b 00 00 00 66 
347d4 18c 66 66 66 3C 
347d8 18d 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
347dc 18e 3C 00 00 00 
347e0 18f 00 00 00 7F 
347e4 190 63 61 30 18 
347e8 191 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
347ec 192 7F 00 00 00 
347f0 193 00 00 00 3C 
347f4 194 0C 0C 0C 0C 
347f8 195 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
347fc 196 3C 00 00 00 
34800 197 00 00 00 00 
34804 198 01 03 07 0E 
34808 199 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
3480c 19a 40 00 00 00 
34810 19b 00 00 00 3C 
34814 19c 30 30 30 30 
34818 19d 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
3481c 19e 3C 00 00 00 
34820 19f 1C 36 00 00 
34824 1a0 00 00 00 00 
34828 1a1 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3482c 1a2 00 00 00 00 
34830 1a3 00 00 00 00 
34834 1a4 00 00 00 00 
34838 1a5 00 00 00 00 
3483c 1a6 00          | 	byte	$00[17]
3483d 1a6 FF 00 00 0C 
34841 1a7 18 00 00 00 
34845 1a8 00 00 00 00 
34849 1a9 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3484d 1aa 00 00 00 00 
34851 1ab 00 00 00 00 
34855 1ac 00          | 	byte	$00[9]
34856 1ac 1E 30 3E 33 
3485a 1ad 33 33 6E 00 
3485e 1ae 00 00 00 00 
34862 1af 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
34866 1b0 1E 36 66 66 
3486a 1b1 66 66 3E 00 
3486e 1b2 00 00 00 00 
34872 1b3 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
34876 1b4 3E 63 03 03 
3487a 1b5 03 63 3E 00 
3487e 1b6 00 00 00 00 
34882 1b7 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
34886 1b8 3C 36 33 33 
3488a 1b9 33 33 6E 00 
3488e 1ba 00 00 00 00 
34892 1bb 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
34896 1bc 3E 63 7F 03 
3489a 1bd 03 63 3E 00 
3489e 1be 00 00 00 00 
348a2 1bf 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
348a6 1c0 0C 1E 0C 0C 
348aa 1c1 0C 0C 1E 00 
348ae 1c2 00 00 00 00 
348b2 1c3 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
348b6 1c4 6E 33 33 33 
348ba 1c5 33 33 3E 30 
348be 1c6 33 1E 00 00 
348c2 1c7 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
348c6 1c8 36 6E 66 66 
348ca 1c9 66 66 67 00 
348ce 1ca 00 00 00 00 
348d2 1cb 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
348d6 1cc 1C 18 18 18 
348da 1cd 18 18 3C 00 
348de 1ce 00 00 00 00 
348e2 1cf 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
348e6 1d0 70 60 60 60 
348ea 1d1 60 60 60 66 
348ee 1d2 66 3C 00 00 
348f2 1d3 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
348f6 1d4 66 36 1E 1E 
348fa 1d5 36 66 67 00 
348fe 1d6 00 00 00 00 
34902 1d7 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
34906 1d8 18 18 18 18 
3490a 1d9 18 18       | 	byte	$18[6]
3490c 1da 3C 00 00 00 
34910 1db 00 00 00 00 
34914 1dc 00 00 37 7F 
34918 1dd 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
3491c 1de 63 00 00 00 
34920 1df 00 00 00 00 
34924 1e0 00 00 3B 66 
34928 1e1 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
3492c 1e2 66 00 00 00 
34930 1e3 00 00 00 00 
34934 1e4 00 00 3E 63 
34938 1e5 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
3493c 1e6 3E 00 00 00 
34940 1e7 00 00 00 00 
34944 1e8 00 00 3B 66 
34948 1e9 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
3494c 1ea 3E 06 06 0F 
34950 1eb 00 00 00 00 
34954 1ec 00 00 6E 33 
34958 1ed 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
3495c 1ee 3E 30 30 78 
34960 1ef 00 00 00 00 
34964 1f0 00 00 3B 6E 
34968 1f1 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
3496c 1f2 0F 00 00 00 
34970 1f3 00 00 00 00 
34974 1f4 00 00 3E 63 
34978 1f5 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
3497c 1f6 3E 00 00 00 
34980 1f7 00 00 00 08 
34984 1f8 0C 0C 3F 0C 
34988 1f9 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
3498c 1fa 38 00 00 00 
34990 1fb 00 00 00 00 
34994 1fc 00 00 33 33 
34998 1fd 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
3499c 1fe 6E 00 00 00 
349a0 1ff 00 00 00 00 
349a4 200 00 00 63 63 
349a8 201 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
349ac 202 1C 00 00 00 
349b0 203 00 00 00 00 
349b4 204 00 00 63 63 
349b8 205 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
349bc 206 36 00 00 00 
349c0 207 00 00 00 00 
349c4 208 00 00 63 36 
349c8 209 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
349cc 20a 63 00 00 00 
349d0 20b 00 00 00 00 
349d4 20c 00 00 63 63 
349d8 20d 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
349dc 20e 7E 60 30 1F 
349e0 20f 00 00 00 00 
349e4 210 00 00 7F 33 
349e8 211 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
349ec 212 7F 00 00 00 
349f0 213 00 00 00 70 
349f4 214 18 18 18 0E 
349f8 215 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
349fc 216 70 00 00 00 
34a00 217 00 00 00 18 
34a04 218 18 18 18 18 
34a08 219 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
34a0c 21a 18 00 00 00 
34a10 21b 00 00 00 0E 
34a14 21c 18 18 18 70 
34a18 21d 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
34a1c 21e 0E 00 00 00 
34a20 21f 6E 3B 00 00 
34a24 220 00 00 00 00 
34a28 221 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34a2c 222 00 00 00 00 
34a30 223 00 00 00 00 
34a34 224 00 00       | 	byte	$00[10]
34a36 224 08 1C 36 63 
34a3a 225 63 63 7F 00 
34a3e 226 00 00 00 00 
34a42 227 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
34a46 228 03 03 03 03 
34a4a 229 43 66 3C 18 
34a4e 22a 30 1E 00 00 
34a52 22b 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
34a56 22c 33 33 33 33 
34a5a 22d 33 33       | 	byte	$33[6]
34a5c 22e 6E 00 00 00 
34a60 22f 00 00 60 30 
34a64 230 18 00 3E 63 
34a68 231 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
34a6c 232 3E 00 00 00 
34a70 233 00 00 08 1C 
34a74 234 36 00 1E 30 
34a78 235 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
34a7c 236 6E 00 00 00 
34a80 237 00 00 00 00 
34a84 238 33 00 1E 30 
34a88 239 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
34a8c 23a 6E 00 00 00 
34a90 23b 00 00 1C 36 
34a94 23c 1C 00 33 33 
34a98 23d 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
34a9c 23e 6E 00 00 00 
34aa0 23f 00 00 60 30 
34aa4 240 18 00 3E 63 
34aa8 241 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
34aac 242 3E 00 00 00 
34ab0 243 00 00 00 00 
34ab4 244 00 00 3E 63 
34ab8 245 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
34abc 246 3E 18 30 1E 
34ac0 247 00 00 00 1C 
34ac4 248 58 78 38 18 
34ac8 249 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
34acc 24a 3C 00 00 00 
34ad0 24b 00 00 00 00 
34ad4 24c 63 00 3E 63 
34ad8 24d 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
34adc 24e 3E 00 00 00 
34ae0 24f 66 33 00 3E 
34ae4 250 63 63 63 63 
34ae8 251 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
34aec 252 3E 00 00 00 
34af0 253 00 00 CC 66 
34af4 254 33 00 3E 63 
34af8 255 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
34afc 256 3E 00 00 00 
34b00 257 00 00 18 3C 
34b04 258 66 00 1C 18 
34b08 259 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
34b0c 25a 3C 00 00 00 
34b10 25b 30 18 00 7F 
34b14 25c 63 61 30 18 
34b18 25d 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
34b1c 25e 7F 00 00 00 
34b20 25f 00 63 00 08 
34b24 260 1C 36 63 63 
34b28 261 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
34b2c 262 63 00 00 00 
34b30 263 30 18 00 3C 
34b34 264 66 43 03 03 
34b38 265 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
34b3c 266 3C 00 00 00 
34b40 267 30 18 00 7F 
34b44 268 66 46 16 1E 
34b48 269 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
34b4c 26a 7F 00 00 00 
34b50 26b 0C 06 00 0F 
34b54 26c 06 06 06 06 
34b58 26d 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
34b5c 26e 7F 00 00 00 
34b60 26f 30 18 00 1C 
34b64 270 18 18 18 18 
34b68 271 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
34b6c 272 3C 00 00 00 
34b70 273 00 00 08 1C 
34b74 274 36 00 3E 63 
34b78 275 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
34b7c 276 3E 00 00 00 
34b80 277 00 00 00 00 
34b84 278 63 00 3E 63 
34b88 279 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
34b8c 27a 3E 00 00 00 
34b90 27b 00 00 00 6F 
34b94 27c 46 26 06 06 
34b98 27d 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
34b9c 27e 7F 00 00 00 
34ba0 27f 00 00 00 6E 
34ba4 280 4C 2C 0C 0C 
34ba8 281 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
34bac 282 1E 00 00 00 
34bb0 283 30 18 00 3E 
34bb4 284 63 63 06 1C 
34bb8 285 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
34bbc 286 3E 00 00 00 
34bc0 287 00 00 60 30 
34bc4 288 18 00 3E 63 
34bc8 289 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
34bcc 28a 3E 00 00 00 
34bd0 28b 00 63 00 3E 
34bd4 28c 63 63 63 63 
34bd8 28d 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
34bdc 28e 3E 00 00 00 
34be0 28f 00 63 00 63 
34be4 290 63 63 63 63 
34be8 291 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
34bec 292 3E 00 00 00 
34bf0 293 6C 38 00 7E 
34bf4 294 7E 5A 18 18 
34bf8 295 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
34bfc 296 3C 00 00 00 
34c00 297 00 00 60 48 
34c04 298 2C 0C 3F 0C 
34c08 299 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
34c0c 29a 38 00 00 00 
34c10 29b 00 00 00 0F 
34c14 29c 26 36 1E 0E 
34c18 29d 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
34c1c 29e 7F 00 00 00 
34c20 29f 00 00 00 00 
34c24 2a0 00 63 36 1C 
34c28 2a1 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
34c2c 2a2 00 00 00 00 
34c30 2a3 00 00       | 	byte	$00[6]
34c32 2a3 36 1C 08 00 
34c36 2a4 3E 63 03 03 
34c3a 2a5 03 63 3E 00 
34c3e 2a6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
34c42 2a7 30 18 0C 00 
34c46 2a8 1E 30 3E 33 
34c4a 2a9 33 33 6E 00 
34c4e 2aa 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
34c52 2ab 60 30 18 00 
34c56 2ac 1C 18 18 18 
34c5a 2ad 18 18 3C 00 
34c5e 2ae 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
34c62 2af 60 30 18 00 
34c66 2b0 3E 63 63 63 
34c6a 2b1 63 63 3E 00 
34c6e 2b2 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
34c72 2b3 30 18 0C 00 
34c76 2b4 33 33 33 33 
34c7a 2b5 33 33 6E 00 
34c7e 2b6 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
34c82 2b7 00 08 1C 36 
34c86 2b8 63 63 7F 63 
34c8a 2b9 63 63 63 18 
34c8e 2ba 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
34c92 2bb 00 00 00 00 
34c96 2bc 1E 30 3E 33 
34c9a 2bd 33 33 6E 18 
34c9e 2be 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
34ca2 2bf 00 7F 63 61 
34ca6 2c0 30 18 0C 06 
34caa 2c1 43 63 7F 00 
34cae 2c2 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
34cb2 2c3 36 1C 08 00 
34cb6 2c4 7F 33 18 0C 
34cba 2c5 06 63 7F 00 
34cbe 2c6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
34cc2 2c7 00 7F 66 46 
34cc6 2c8 16 1E 16 06 
34cca 2c9 46 66 7F 18 
34cce 2ca 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
34cd2 2cb 00 00 00 00 
34cd6 2cc 3E 63 7F 03 
34cda 2cd 03 63 3E 18 
34cde 2ce 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
34ce2 2cf 00 3C 66 03 
34ce6 2d0 1F 03 0F 03 
34cea 2d1 03 66 3C 00 
34cee 2d2 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
34cf2 2d3 60 30 18 00 
34cf6 2d4 7F 33 18 0C 
34cfa 2d5 06 63 7F 00 
34cfe 2d6 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
34d02 2d7 00 3C 66 43 
34d06 2d8 03 03 03 03 
34d0a 2d9 43 66 3C 00 
34d0e 2da 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
34d12 2db 00 00 00 00 
34d16 2dc 3E 63 06 1C 
34d1a 2dd 30 63 3E 18 
34d1e 2de 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
34d22 2df 00 00 00 00 
34d26 2e0 00 00       | 	byte	$00[6]
34d28 2e1 6C 36 1B 36 
34d2c 2e2 6C 00 00 00 
34d30 2e3 00 00 00 00 
34d34 2e4 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34d38 2e5 1B 36 6C 36 
34d3c 2e6 1B 00 00 00 
34d40 2e7 88 22 88 22 
34d44 2e8 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
34d48 2e9 88 22 88 22 
34d4c 2ea 88 22 88 22 
34d50 2eb AA 55 AA 55 
34d54 2ec AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
34d58 2ed AA 55 AA 55 
34d5c 2ee AA 55 AA 55 
34d60 2ef BB EE BB EE 
34d64 2f0 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
34d68 2f1 BB EE BB EE 
34d6c 2f2 BB EE BB EE 
34d70 2f3 18 18 18 18 
34d74 2f4 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
34d78 2f5 18 18 18 18 
34d7c 2f6 18 18 18 18 
34d80 2f7 18 18 18 18 
34d84 2f8 18 18 18    | 	byte	$18[15]
34d87 2f8 1F 18 18 18 
34d8b 2f9 18 18 18 18 
34d8f 2fa 18 30 18 00 
34d93 2fb 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
34d97 2fc 63 7F 63 63 
34d9b 2fd 63 63 00 00 
34d9f 2fe 00 1C 36 00 
34da3 2ff 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
34da7 300 63 7F 63 63 
34dab 301 63 63 00 00 
34daf 302 00 36 1C 00 
34db3 303 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
34db7 304 1E 16 06 46 
34dbb 305 66 7F 00 00 
34dbf 306 00 00 00 00 
34dc3 307 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
34dc7 308 1C 30 60 63 
34dcb 309 63 3E 18 30 
34dcf 30a 1E 6C 6C 6C 
34dd3 30b 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
34dd7 30c 6F 6C 6C 6C 
34ddb 30d 6C 6C 6C 6C 
34ddf 30e 6C 6C 6C 6C 
34de3 30f 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
34de7 310 6C 6C 6C 6C 
34deb 311 6C 6C 6C 6C 
34def 312 6C          | 	byte	$6c[9]
34df0 313 00 00 00 00 
34df4 314 00          | 	byte	$00[5]
34df5 314 7F 60 6F 6C 
34df9 315 6C 6C 6C 6C 
34dfd 316 6C 6C 6C 6C 
34e01 317 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
34e05 318 6F 60 7F 00 
34e09 319 00 00 00 00 
34e0d 31a 00 00 00 18 
34e11 31b 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
34e15 31c 61 30 18 0C 
34e19 31d 06 43 63 7F 
34e1d 31e 00 00 00 00 
34e21 31f 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
34e25 320 00 7F 33 18 
34e29 321 0C 06 63 7F 
34e2d 322 00 00 00 00 
34e31 323 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
34e35 324 00 00 1F 18 
34e39 325 18 18 18 18 
34e3d 326 18 18 18 18 
34e41 327 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
34e45 328 18 18 F8 00 
34e49 329 00 00 00 00 
34e4d 32a 00 00 00 18 
34e51 32b 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
34e55 32c 18 18 FF 00 
34e59 32d 00 00 00 00 
34e5d 32e 00 00 00 00 
34e61 32f 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34e65 330 00 00 FF 18 
34e69 331 18 18 18 18 
34e6d 332 18 18 18 18 
34e71 333 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
34e75 334 18 18 F8 18 
34e79 335 18 18 18 18 
34e7d 336 18 18 18 00 
34e81 337 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
34e85 338 00 00 FF 00 
34e89 339 00 00 00 00 
34e8d 33a 00 00 00 18 
34e91 33b 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
34e95 33c 18 18 FF 18 
34e99 33d 18 18 18 18 
34e9d 33e 18 18 18 63 
34ea1 33f 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
34ea5 340 36 63 63 7F 
34ea9 341 63 63 63 63 
34ead 342 00 00 00 00 
34eb1 343 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
34eb5 344 00 1E 30 3E 
34eb9 345 33 33 33 6E 
34ebd 346 00 00 00 6C 
34ec1 347 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
34ec5 348 EC 0C FC 00 
34ec9 349 00 00 00 00 
34ecd 34a 00 00 00 00 
34ed1 34b 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34ed5 34c FC 0C EC 6C 
34ed9 34d 6C 6C 6C 6C 
34edd 34e 6C 6C 6C 6C 
34ee1 34f 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
34ee5 350 EF 00 FF 00 
34ee9 351 00 00 00 00 
34eed 352 00 00 00 00 
34ef1 353 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34ef5 354 FF 00 EF 6C 
34ef9 355 6C 6C 6C 6C 
34efd 356 6C 6C 6C 6C 
34f01 357 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
34f05 358 EC 0C EC 6C 
34f09 359 6C 6C 6C 6C 
34f0d 35a 6C 6C 6C 00 
34f11 35b 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
34f15 35c FF 00 FF 00 
34f19 35d 00 00 00 00 
34f1d 35e 00 00 00 6C 
34f21 35f 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
34f25 360 EF 00 EF 6C 
34f29 361 6C 6C 6C 6C 
34f2d 362 6C 6C 6C 00 
34f31 363 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
34f35 364 63 3E 63 63 
34f39 365 63 63 3E 63 
34f3d 366 00 00 00 00 
34f41 367 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
34f45 368 30 3C 36 33 
34f49 369 33 33 33 6E 
34f4d 36a 00 00 00 00 
34f51 36b 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
34f55 36c 66 66 6F 66 
34f59 36d 66 66 36 1F 
34f5d 36e 00 00 00 36 
34f61 36f 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
34f65 370 66 66 66 66 
34f69 371 66 66       | 	byte	$66[6]
34f6b 371 36 1F 00 00 
34f6f 372 00 00 63 00 
34f73 373 7F 66 46 16 
34f77 374 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
34f7b 375 66 7F 00 00 
34f7f 376 00 6C 38 00 
34f83 377 38 30 30 3C 
34f87 378 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
34f8b 379 33 6E 00 00 
34f8f 37a 00 36 1C 00 
34f93 37b 63 67 6F 7F 
34f97 37c 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
34f9b 37d 63 63 00 00 
34f9f 37e 00 30 18 00 
34fa3 37f 3C 18 18 18 
34fa7 380 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
34fab 381 18 3C 00 00 
34faf 382 00 3C 66 00 
34fb3 383 3C 18 18 18 
34fb7 384 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
34fbb 385 18 3C 00 00 
34fbf 386 00 00 00 36 
34fc3 387 1C 08 00 3E 
34fc7 388 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
34fcb 389 63 3E 00 00 
34fcf 38a 00 18 18 18 
34fd3 38b 18 18 18 18 
34fd7 38c 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
34fdb 38d 00 00 00 00 
34fdf 38e 00 00 00 00 
34fe3 38f 00 00 00 00 | 	byte	$00[12]
34fe7 390 F8 18 18 18 
34feb 391 18 18 18 18 
34fef 392 18 FF FF FF 
34ff3 393 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
34ff7 394 FF FF FF FF 
34ffb 395 FF FF FF FF 
34fff 396 FF          | 	byte	$ff[9]
35000 397 00 00 00 00 
35004 398 00 00 00    | 	byte	$00[7]
35007 398 FF FF FF FF 
3500b 399 FF FF FF FF 
3500f 39a FF          | 	byte	$ff[9]
35010 39b 00 00 00 7E 
35014 39c 7E 5A 18 18 
35018 39d 18 18 18 18 
3501c 39e 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
35020 39f 1C 36 1C 63 
35024 3a0 63 63 63 63 
35028 3a1 63 63 63 63 
3502c 3a2 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
35030 3a3 FF FF FF FF 
35034 3a4 FF FF FF    | 	byte	$ff[7]
35037 3a4 00 00 00 00 
3503b 3a5 00 00 00 00 
3503f 3a6 00          | 	byte	$00[9]
35040 3a7 30 18 00 3E 
35044 3a8 63 63 63 63 
35048 3a9 63 63 63 63 
3504c 3aa 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
35050 3ab 00 00 00 1E 
35054 3ac 33 33 33 1B 
35058 3ad 33 63 63 63 
3505c 3ae 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
35060 3af 1C 36 00 3E 
35064 3b0 63 63 63 63 
35068 3b1 63 63 63 63 
3506c 3b2 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
35070 3b3 30 18 00 63 
35074 3b4 67 6F 7F 7B 
35078 3b5 73 63 63 63 
3507c 3b6 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
35080 3b7 00 00 60 30 
35084 3b8 18 00 3B 66 
35088 3b9 66 66 66 66 
3508c 3ba 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
35090 3bb 00 00 36 1C 
35094 3bc 08 00 3B 66 
35098 3bd 66 66 66 66 
3509c 3be 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
350a0 3bf 36 1C 00 3E 
350a4 3c0 63 63 06 1C 
350a8 3c1 30 60 63 63 
350ac 3c2 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
350b0 3c3 00 00 36 1C 
350b4 3c4 08 00 3E 63 
350b8 3c5 06 1C 30 63 
350bc 3c6 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
350c0 3c7 30 18 00 3F 
350c4 3c8 66 66 66 3E 
350c8 3c9 36 66 66 66 
350cc 3ca 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
350d0 3cb 30 18 00 63 
350d4 3cc 63 63 63 63 
350d8 3cd 63 63 63 63 
350dc 3ce 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
350e0 3cf 00 00 60 30 
350e4 3d0 18 00 3B 6E 
350e8 3d1 66 06 06 06 
350ec 3d2 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
350f0 3d3 66 33 00 63 
350f4 3d4 63 63 63 63 
350f8 3d5 63 63 63 63 
350fc 3d6 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
35100 3d7 00 00 60 30 
35104 3d8 18 00 63 63 
35108 3d9 63 63 63 63 
3510c 3da 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
35110 3db 30 18 00 66 
35114 3dc 66 66 66 3C 
35118 3dd 18 18 18 18 
3511c 3de 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
35120 3df 00 00 00 08 
35124 3e0 0C 0C 3F 0C 
35128 3e1 0C 0C 0C 6C 
3512c 3e2 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
35130 3e3 30 18 00 00 
35134 3e4 00 00 00 00 
35138 3e5 00 00 00 00 
3513c 3e6 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35140 3e7 00 00 00 00 
35144 3e8 00 00 00 00 | 	byte	$00[8]
35148 3e9 7F 00 00 00 
3514c 3ea 00 00 00 00 
35150 3eb 66 33 00 00 
35154 3ec 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
35158 3ed 00 00 00 00 
3515c 3ee 00 00 00 00 
35160 3ef 00 00 00 00 
35164 3f0 00 00 00 00 
35168 3f1 00 00 00 00 
3516c 3f2 00          | 	byte	$00[21]
3516d 3f2 0C 06 3C 36 
35171 3f3 1C 00 00 00 
35175 3f4 00 00 00 00 
35179 3f5 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3517d 3f6 00 00 00 63 
35181 3f7 3E 00 00 00 
35185 3f8 00 00 00 00 
35189 3f9 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3518d 3fa 00 00 00 00 
35191 3fb 3E 63 06 1C 
35195 3fc 36 63 63 36 
35199 3fd 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
3519d 3fe 00 00 00 00 
351a1 3ff 00 00 00 00 | 	byte	$00[8]
351a5 400 18 00 7E 00 
351a9 401 18 00 00 00 
351ad 402 00 00 00 00 
351b1 403 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
351b5 404 00 00 00 00 
351b9 405 00 00 00 00 | 	byte	$00[8]
351bd 406 18 30 1E 00 
351c1 407 00 00 1C 36 
351c5 408 36 1C 00 00 
351c9 409 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
351cd 40a 00 00 00 00 
351d1 40b 63 00 00 00 
351d5 40c 00 00 00 00 
351d9 40d 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
351dd 40e 00 00 00 18 
351e1 40f 18 00 00 00 
351e5 410 00 00 00 00 
351e9 411 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
351ed 412 00 00 00 00 
351f1 413 00          | 	byte	$00[5]
351f2 413 CC 66 33 00 
351f6 414 33 33 33 33 
351fa 415 33 33 6E 00 
351fe 416 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
35202 417 00 3F 66 66 
35206 418 66 3E 36 66 
3520a 419 66 66 6F 00 
3520e 41a 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
35212 41b 36 1C 08 00 
35216 41c 3B 6E 66 06 
3521a 41d 06 06 0F 00 
3521e 41e 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
35222 41f 00 00 00 7E 
35226 420 7E 7E 7E 7E 
3522a 421 7E 7E 00 00 
3522e 422 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
35232 423 00 00 00 00 
35236 424 00 00 00 00 
3523a 425 00 00 00 00 
3523e 426 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35240 427             | 'vga_font       file "vgafont.def"
35240 427 00 00 00 00 
      ...             
35270 433 00 00 00 00 
35274 434 00 00 00    | st_font        file "st4font.def"
35277 434 FF FF 00 00 
3527b 435 00 00 00 00 
3527f 436 00 18 18 18 
35283 437 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
35287 438 18 18 18 18 
3528b 439 18 18 18 18 
3528f 43a 18          | 	byte	$18[9]
35290 43b 00 00 00 00 
35294 43c 00 00 00    | 	byte	$00[7]
35297 43c FF FF 18 18 
3529b 43d 18 18 18 18 
3529f 43e 18 18 18 18 
352a3 43f 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
352a7 440 FF FF 00 00 
352ab 441 00 00 00 00 
352af 442 00 18 18 18 
352b3 443 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
352b7 444 1F 1F 18 18 
352bb 445 18 18 18 18 
352bf 446 18 18 18 18 
352c3 447 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
352c7 448 F8 F8 18 18 
352cb 449 18 18 18 18 
352cf 44a 18 00 00 00 
352d3 44b 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
352d7 44c 1F 1F 18 18 
352db 44d 18 18 18 18 
352df 44e 18 00 00 00 
352e3 44f 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
352e7 450 F8 F8 18 18 
352eb 451 18 18 18 18 
352ef 452 18 18 18 18 
352f3 453 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
352f7 454 1F 1F 00 00 
352fb 455 00 00 00 00 
352ff 456 00 18 18 18 
35303 457 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
35307 458 F8 F8 00 00 
3530b 459 00 00 00 00 
3530f 45a 00 18 18 18 
35313 45b 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
35317 45c FF FF 18 18 
3531b 45d 18 18 18 18 
3531f 45e 18 00 00 18 
35323 45f 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
35327 460 66 7E 7E 66 
3532b 461 66 66 66 30 
3532f 462 18 00 00 7E 
35333 463 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
35337 464 3E 06 06 06 
3533b 465 06 7E 7E 18 
3533f 466 0C 30 18 3C 
35343 467 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
35347 468 06 06 06 66 
3534b 469 66 7E 3C 00 
3534f 46a 00 30 18 66 
35353 46b 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
35357 46c 7E 7E 76 76 
3535b 46d 66 66 66 00 
3535f 46e 00 30 18 7C 
35363 46f 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
35367 470 1C 38 70 60 
3536b 471 60 7E 3E 00 
3536f 472 00 30 18 7E 
35373 473 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
35377 474 18 0C 0C 06 
3537b 475 06 7E 7E 00 
3537f 476 00 18 18 00 
35383 477 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
35387 478 18 18 0C 0C 
3538b 479 06 7E 7E 00 
3538f 47a 00 30 18 3C 
35393 47b 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
35397 47c 66 66 66 66 
3539b 47d 66          | 	byte	$66[5]
3539c 47e 7E 3C 00 00 
353a0 47f 00 00 06 06 
353a4 480 06 06 16 1E 
353a8 481 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
353ac 482 7E 7E 00 00 
353b0 483 00 00 00 00 
353b4 484 00 3C 7C 60 
353b8 485 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
353bc 486 7E 7C 30 18 
353c0 487 00 00 00 00 
353c4 488 00 3C 7E 66 
353c8 489 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
353cc 48a 7E 7C 18 0C 
353d0 48b 00 00 30 18 
353d4 48c 00 3C 3E 06 
353d8 48d 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
353dc 48e 7E 7C 00 00 
353e0 48f 00 00 30 18 
353e4 490 00 3E 7E 66 
353e8 491 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
353ec 492 66 66 00 00 
353f0 493 00 00 30 18 
353f4 494 00 7C 7E 06 
353f8 495 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
353fc 496 7E 3E 00 00 
35400 497 00 00 30 18 
35404 498 00 7E 7E 30 
35408 499 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
3540c 49a 7E 7E 00 00 
35410 49b 00 00 18 18 
35414 49c 00 7E 7E 30 
35418 49d 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
3541c 49e 7E 7E 00 00 
35420 49f 00 00 30 18 
35424 4a0 00 3C 7E 66 
35428 4a1 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
3542c 4a2 7E 3C 00 00 
35430 4a3 00 00 1C 1C 
35434 4a4 18 18 38 3C 
35438 4a5 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
3543c 4a6 3C 3C 00 00 
35440 4a7 00 00 00 00 
35444 4a8 00 00 00 00 
35448 4a9 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3544c 4aa 00 00 00 00 
35450 4ab 00 00       | 	byte	$00[6]
35452 4ab 18 18 18 18 
35456 4ac 18 18 18 18 | 	byte	$18[8]
3545a 4ad 00 00 18 18 
3545e 4ae 00 00 00 00 
35462 4af 66 66 66 66 
35466 4b0 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
3546a 4b1 00 00 00 00 
3546e 4b2 00 00 00 00 
35472 4b3 00          | 	byte	$00[9]
35473 4b3 66 66 FF FF 
35477 4b4 66 66 FF FF 
3547b 4b5 66 66 00 00 
3547f 4b6 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
35483 4b7 7C 7E 06 06 
35487 4b8 3E 7C 60 60 
3548b 4b9 7E 3E 18 18 
3548f 4ba 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
35493 4bb 66 30 30 18 
35497 4bc 18 0C 0C 66 
3549b 4bd 66 00 00 00 
3549f 4be 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
354a3 4bf 66 66 3C 1C 
354a7 4c0 1C FC FE 66 
354ab 4c1 66 FE FC 00 
354af 4c2 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
354b3 4c3 18 18 18 18 
354b7 4c4 00 00 00 00 
354bb 4c5 00 00 00 00 
354bf 4c6 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
354c3 4c7 18 1C 0C 0C 
354c7 4c8 0C 0C 0C 0C 
354cb 4c9 1C 18 30 00 
354cf 4ca 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
354d3 4cb 18 38 30 30 
354d7 4cc 30 30 30 30 
354db 4cd 38 18 0C 00 
354df 4ce 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
354e3 4cf 66 66 3C 3C 
354e7 4d0 FF FF 3C 3C 
354eb 4d1 66 66 00 00 
354ef 4d2 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
354f3 4d3 00 18 18 18 
354f7 4d4 7E 7E 18 18 
354fb 4d5 18 00 00 00 
354ff 4d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
35503 4d7 00 00 00 00 
35507 4d8 00 00       | 	byte	$00[6]
35509 4d9 18 18 18 18 
3550d 4da 18          | 	byte	$18[5]
3550e 4da 0C 04 00 00 
35512 4db 00 00 00 00 
35516 4dc 7E 7E 00 00 
3551a 4dd 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
3551e 4de 00 00 00 00 
35522 4df 00 00 00 00 
35526 4e0 00 00 00 00 
3552a 4e1 00          | 	byte	$00[13]
3552b 4e1 18 18 18 00 
3552f 4e2 00 00 00 60 
35533 4e3 60 60 30 30 
35537 4e4 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
3553b 4e5 06 06 06 00 
3553f 4e6 00 00 00 3C 
35543 4e7 7E 66 66 66 
35547 4e8 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
3554b 4e9 66 7E 3C 00 
3554f 4ea 00 00 00 18 
35553 4eb 18 1C 1C 18 
35557 4ec 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
3555b 4ed 18 7E 7E 00 
3555f 4ee 00 00 00 3C 
35563 4ef 7E 66 66 30 
35567 4f0 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
3556b 4f1 0C 7E 7E 00 
3556f 4f2 00 00 00 7E 
35573 4f3 7E 30 30 18 
35577 4f4 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
3557b 4f5 66 7E 3C 00 
3557f 4f6 00 00 00 30 
35583 4f7 30 38 38 3C 
35587 4f8 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
3558b 4f9 7E 30 30 00 
3558f 4fa 00 00 00 7E 
35593 4fb 7E 06 06 3E 
35597 4fc 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
3559b 4fd 66 7E 3C 00 
3559f 4fe 00 00 00 38 
355a3 4ff 3C 0E 06 06 
355a7 500 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
355ab 501 66 7E 3C 00 
355af 502 00 00 00 7E 
355b3 503 7E 60 60 30 
355b7 504 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
355bb 505 0C 0C 0C 00 
355bf 506 00 00 00 3C 
355c3 507 7E 66 66 3C 
355c7 508 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
355cb 509 66 7E 3C 00 
355cf 50a 00 00 00 3C 
355d3 50b 7E 66 66 7E 
355d7 50c 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
355db 50d 70 3C 1C 00 
355df 50e 00 00 00 00 
355e3 50f 00 00 18 18 
355e7 510 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
355eb 511 18 18 18 00 
355ef 512 00 00 00 00 
355f3 513 00 00 18 18 
355f7 514 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
355fb 515 18 18 18 0C 
355ff 516 04 00 00 00 
35603 517 70 38 1C 0E 
35607 518 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
3560b 519 70 00 00 00 
3560f 51a 00 00 00 00 
35613 51b 00 00 7E 7E 
35617 51c 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
3561b 51d 00 00 00 00 
3561f 51e 00 00 00 00 | 	byte	$00[8]
35623 51f 0E 1C 38 70 
35627 520 E0 70 38 1C 
3562b 521 0E 00 00 00 
3562f 522 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
35633 523 7E 66 66 30 
35637 524 30 18 18 18 
3563b 525 00 18 18 00 
3563f 526 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
35643 527 7E 66 66 66 
35647 528 66 36 06 66 
3564b 529 66 7E 3C 00 
3564f 52a 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
35653 52b 3C 7E 66 66 
35657 52c 66 7E 7E 66 
3565b 52d 66 66 66 00 
3565f 52e 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
35663 52f 7E 66 66 7E 
35667 530 3E 66 66 66 
3566b 531 66 7E 3E 00 
3566f 532 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
35673 533 7E 66 66 06 
35677 534 06 06 06 66 
3567b 535 66 7E 3C 00 
3567f 536 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
35683 537 7E 66 66 66 
35687 538 66 66 66 66 
3568b 539 66 7E 3E 00 
3568f 53a 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
35693 53b 7E 06 06 3E 
35697 53c 3E 06 06 06 
3569b 53d 06 7E 7E 00 
3569f 53e 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
356a3 53f 7E 06 06 3E 
356a7 540 3E 06 06 06 
356ab 541 06 06 06 00 
356af 542 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
356b3 543 7E 06 06 76 
356b7 544 76 66 66 66 
356bb 545 66 7E 3C 00 
356bf 546 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
356c3 547 66 66 66 7E 
356c7 548 7E 66 66 66 
356cb 549 66 66 66 00 
356cf 54a 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
356d3 54b 7E 18 18 18 
356d7 54c 18 18 18 18 
356db 54d 18 7E 7E 00 
356df 54e 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
356e3 54f 60 60 60 60 
356e7 550 60 60 60    | 	byte	$60[7]
356ea 551 66 66 7E 3C 
356ee 552 00 00 00 00 
356f2 553 66 66 36 36 
356f6 554 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
356fa 555 66 66 C6 C6 
356fe 556 00 00 00 00 
35702 557 06 06 06 06 
35706 558 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
3570a 559 06 06 7E 7E 
3570e 55a 00 00 00 00 
35712 55b C6 C6 EE EE 
35716 55c FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
3571a 55d C6 C6 C6 C6 
3571e 55e 00 00 00 00 
35722 55f 66 66 66 6E 
35726 560 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
3572a 561 76 66 66 66 
3572e 562 00 00 00 00 
35732 563 3C 7E 66 66 
35736 564 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
3573a 565 66 66 7E 3C 
3573e 566 00 00 00 00 
35742 567 3E 7E 66 66 
35746 568 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
3574a 569 06 06 06 06 
3574e 56a 00 00 00 00 
35752 56b 3C 7E 66 66 
35756 56c 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
3575a 56d 66 56 3E 6C 
3575e 56e 00 00 00 00 
35762 56f 3E 7E 66 66 
35766 570 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
3576a 571 66 66 C6 C6 
3576e 572 00 00 00 00 
35772 573 7C 7E 06 06 
35776 574 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
3577a 575 60 60 7E 3E 
3577e 576 00 00 00 00 
35782 577 7E 7E 18 18 
35786 578 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
3578a 579 18 18 18 18 
3578e 57a 00 00 00 00 
35792 57b 66 66 66 66 
35796 57c 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
3579a 57d 66 66 7E 3C 
3579e 57e 00 00 00 00 
357a2 57f 66 66 66 66 
357a6 580 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
357aa 581 3C 3C 18 18 
357ae 582 00 00 00 00 
357b2 583 C6 C6 C6 C6 
357b6 584 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
357ba 585 FE EE C6 82 
357be 586 00 00 00 00 
357c2 587 66 66 66 3C 
357c6 588 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
357ca 589 3C 66 66 66 
357ce 58a 00 00 00 00 
357d2 58b 66 66 66 66 
357d6 58c 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
357da 58d 18 18 18 18 
357de 58e 00 00 00 00 
357e2 58f 7E 7E 30 30 
357e6 590 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
357ea 591 06 06 7E 7E 
357ee 592 00 00 00 00 
357f2 593 3C 3C 0C 0C 
357f6 594 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
357fa 595 0C 0C 3C 3C 
357fe 596 00 00 00 00 
35802 597 06 06 0C 0C 
35806 598 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
3580a 599 60 60 C0 C0 
3580e 59a 00 00 00 00 
35812 59b 3C 3C 30 30 
35816 59c 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
3581a 59d 30 30 3C 3C 
3581e 59e 00 00 00 00 
35822 59f 18 18 3C 3C 
35826 5a0 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
3582a 5a1 00 00 00 00 
3582e 5a2 00 00 00 00 
35832 5a3 00 00 00 00 
35836 5a4 00 00 00 00 
3583a 5a5 00 00       | 	byte	$00[18]
3583c 5a6 FE FE 00 00 
35840 5a7 00 00 0C 0C 
35844 5a8 18 18 00 00 
35848 5a9 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
3584c 5aa 00 00 00 00 
35850 5ab 00 00 00 00 
35854 5ac 00          | 	byte	$00[9]
35855 5ac 3C 7C 60 7C 
35859 5ad 7E 66 66 7E 
3585d 5ae 7C 00 00 00 
35861 5af 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
35865 5b0 3E 7E 66 66 
35869 5b1 66 66 66 7E 
3586d 5b2 3E 00 00 00 
35871 5b3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
35875 5b4 3C 3E 06 06 
35879 5b5 06 06 06 7E 
3587d 5b6 7C 00 00 00 
35881 5b7 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
35885 5b8 7C 7E 66 66 
35889 5b9 66 66 66 7E 
3588d 5ba 7C 00 00 00 
35891 5bb 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
35895 5bc 3C 7E 66 66 
35899 5bd 7E 06 06 7E 
3589d 5be 7C 00 00 00 
358a1 5bf 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
358a5 5c0 18 7E 7E 18 
358a9 5c1 18 18 18 18 
358ad 5c2 18 00 00 00 
358b1 5c3 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
358b5 5c4 7C 7E 66 66 
358b9 5c5 66 66 7E 7C 
358bd 5c6 60 7E 3E 00 
358c1 5c7 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
358c5 5c8 3E 7E 66 66 
358c9 5c9 66 66 66 66 
358cd 5ca 66 00 00 00 
358d1 5cb 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
358d5 5cc 1C 1C 18 18 
358d9 5cd 18 18 18 3C 
358dd 5ce 3C 00 00 00 
358e1 5cf 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
358e5 5d0 30 30 30 30 
358e9 5d1 30 30 30 30 
358ed 5d2 30          | 	byte	$30[9]
358ee 5d2 3E 1E 00 00 
358f2 5d3 06 06 06 36 
358f6 5d4 36 1E 1E 1E 
358fa 5d5 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
358fe 5d6 00 00 00 00 
35902 5d7 1C 1C 18 18 
35906 5d8 18 18 18 18 
3590a 5d9 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
3590e 5da 00 00 00 00 
35912 5db 00 00 00    | 	byte	$00[7]
35915 5dc 6C FE FE D6 
35919 5dd D6 C6 C6 C6 
3591d 5de C6 00 00 00 
35921 5df 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
35925 5e0 3E 7E 66 66 
35929 5e1 66 66 66 66 
3592d 5e2 66 00 00 00 
35931 5e3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
35935 5e4 3C 7E 66 66 
35939 5e5 66 66 66 7E 
3593d 5e6 3C 00 00 00 
35941 5e7 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
35945 5e8 3E 7E 66 66 
35949 5e9 66 66 66 7E 
3594d 5ea 3E 06 06 00 
35951 5eb 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
35955 5ec 7C 7E 66 66 
35959 5ed 66 66 66 7E 
3595d 5ee 7C 60 60 00 
35961 5ef 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
35965 5f0 3E 7E 66 06 
35969 5f1 06 06 06 06 
3596d 5f2 06 00 00 00 
35971 5f3 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
35975 5f4 7C 7E 06 0E 
35979 5f5 3C 70 60 7E 
3597d 5f6 3E 00 00 00 
35981 5f7 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
35985 5f8 7E 7E 18 18 
35989 5f9 18 18 18 78 
3598d 5fa 70 00 00 00 
35991 5fb 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
35995 5fc 66 66 66 66 
35999 5fd 66 66 66    | 	byte	$66[7]
3599c 5fe 7E 7C 00 00 
359a0 5ff 00 00 00 00 
359a4 600 00 66 66 66 
359a8 601 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
359ac 602 18 18 00 00 
359b0 603 00 00 00 00 
359b4 604 00 C6 C6 D6 
359b8 605 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
359bc 606 C6 82 00 00 
359c0 607 00 00 00 00 
359c4 608 00 66 66 3C 
359c8 609 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
359cc 60a 66 66 00 00 
359d0 60b 00 00 00 00 
359d4 60c 00 66 66 66 
359d8 60d 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
359dc 60e 7C 60 7E 3E 
359e0 60f 00 00 00 00 
359e4 610 00 7E 7E 30 
359e8 611 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
359ec 612 7E 7E 00 00 
359f0 613 00 00 30 18 
359f4 614 18 18 18 0C 
359f8 615 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
359fc 616 18 30 00 00 
35a00 617 00 00 18 18 
35a04 618 18 18 18 18 
35a08 619 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
35a0c 61a 18 18 00 00 
35a10 61b 00 00 0C 18 
35a14 61c 18 18 18 30 
35a18 61d 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
35a1c 61e 18 0C 00 00 
35a20 61f 00 00 6C 7E 
35a24 620 36 00 00 00 
35a28 621 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
35a2c 622 00 00 00 00 
35a30 623 00 00 00 00 
35a34 624 00          | 	byte	$00[9]
35a35 624 18 18 18 18 
35a39 625 18 18 00 00 
35a3d 626 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
35a40 627             | 'amiga_font     file "amigafont.def"
35a40 627 00 6C FE FE 
35a44 628 7C 38 10 00 
35a48 629 18 18 18 F8 
35a4c 62a F8 18 18 18 | a8_font        file "atari8.fnt"
35a50 62b C0 C0 C0 C0 
35a54 62c C0 C0 C0 C0 | 	byte	$c0[8]
35a58 62d 18 18 18 1F 
35a5c 62e 1F 00 00 00 
35a60 62f 18 18 18 1F 
35a64 630 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
35a68 631 00 00 00 1F 
35a6c 632 1F 18 18 18 
35a70 633 C0 E0 70 38 
35a74 634 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
35a78 635 03 07 0E 1C 
35a7c 636 38 70 E0 C0 
35a80 637 80 C0 E0 F0 
35a84 638 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
35a88 639 00 00 00 00 
35a8c 63a F0 F0 F0 F0 
35a90 63b 01 03 07 0F 
35a94 63c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
35a98 63d F0 F0 F0 F0 
35a9c 63e 00 00 00 00 
35aa0 63f 0F 0F 0F 0F 
35aa4 640 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
35aa8 641 FF FF 00 00 
35aac 642 00 00 00 00 
35ab0 643 00 00 00 00 
35ab4 644 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
35ab8 645 00 00 00 00 
35abc 646 0F 0F 0F 0F 
35ac0 647 00 38 38 EE 
35ac4 648 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
35ac8 649 00 00 00 F8 
35acc 64a F8 18 18 18 
35ad0 64b 00 00 00 FF 
35ad4 64c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
35ad8 64d 18 18 18 FF 
35adc 64e FF 18 18 18 
35ae0 64f 00 00 3C 7E 
35ae4 650 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
35ae8 651 00 00 00 00 
35aec 652 FF FF FF FF 
35af0 653 03 03 03 03 
35af4 654 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
35af8 655 00 00 00 FF 
35afc 656 FF 18 18 18 
35b00 657 18 18 18 FF 
35b04 658 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
35b08 659 0F 0F 0F 0F 
35b0c 65a 0F 0F 0F 0F | 	byte	$0f[8]
35b10 65b 18 18 18 F8 
35b14 65c F8 00 00 00 
35b18 65d 1E 06 1E 06 
35b1c 65e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
35b20 65f 00 18 3C 7E 
35b24 660 18 18 18 00 
35b28 661 00 18 18 18 
35b2c 662 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
35b30 663 00 18 0C 7E 
35b34 664 0C 18 00 00 
35b38 665 00 18 30 7E 
35b3c 666 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
35b40 667 00 00 00 00 
35b44 668 00 00 00 00 
35b48 669 00          | 	byte	$00[9]
35b49 669 18 18 18 18 
35b4d 66a 00 18 00 00 
35b51 66b 66 66 66 00 
35b55 66c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
35b59 66d 66 FF 66 66 
35b5d 66e FF 66 00 18 
35b61 66f 7C 06 3C 60 
35b65 670 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
35b69 671 66 36 18 0C 
35b6d 672 66 62 00 38 
35b71 673 6C 38 1C F6 
35b75 674 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
35b79 675 18 18 18 00 
35b7d 676 00 00 00 00 
35b81 677 70 38 18 18 
35b85 678 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
35b89 679 0E 1C 18 18 
35b8d 67a 1C 0E 00 00 
35b91 67b 66 3C FF 3C 
35b95 67c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
35b99 67d 18 18 7E 18 
35b9d 67e 18 00 00 00 
35ba1 67f 00 00 00 00 
35ba5 680 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
35ba9 681 00 00 7E 00 
35bad 682 00 00 00 00 
35bb1 683 00 00 00 00 
35bb5 684 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
35bb9 685 60 30 18 0C 
35bbd 686 06 02 00 00 
35bc1 687 3C 66 76 6E 
35bc5 688 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
35bc9 689 18 1C 18 18 
35bcd 68a 18 7E 00 00 
35bd1 68b 3C 66 30 18 
35bd5 68c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
35bd9 68d 7E 30 18 30 
35bdd 68e 66 3C 00 00 
35be1 68f 30 38 3C 36 
35be5 690 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
35be9 691 7E 06 3E 60 
35bed 692 66 3C 00 00 
35bf1 693 3C 06 3E 66 
35bf5 694 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
35bf9 695 7E 60 30 18 
35bfd 696 0C 0C 00 00 
35c01 697 3C 66 3C 66 
35c05 698 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
35c09 699 3C 66 7C 60 
35c0d 69a 30 1C 00 00 
35c11 69b 00 18 18 00 
35c15 69c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
35c19 69d 00 18 18 00 
35c1d 69e 18 18 0C 60 
35c21 69f 30 18 0C 18 
35c25 6a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
35c29 6a1 00 7E 00 00 
35c2d 6a2 7E 00 00 06 
35c31 6a3 0C 18 30 18 
35c35 6a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
35c39 6a5 3C 66 30 18 
35c3d 6a6 00 18 00 00 
35c41 6a7 3C 66 76 76 
35c45 6a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
35c49 6a9 18 3C 66 66 
35c4d 6aa 7E 66 00 00 
35c51 6ab 3E 66 3E 66 
35c55 6ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
35c59 6ad 3C 66 06 06 
35c5d 6ae 66 3C 00 00 
35c61 6af 1E 36 66 66 
35c65 6b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
35c69 6b1 7E 06 3E 06 
35c6d 6b2 06 7E 00 00 
35c71 6b3 7E 06 3E 06 
35c75 6b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
35c79 6b5 7C 06 06 76 
35c7d 6b6 66 7C 00 00 
35c81 6b7 66 66 7E 66 
35c85 6b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
35c89 6b9 7E 18 18 18 
35c8d 6ba 18 7E 00 00 
35c91 6bb 60 60 60 60 
35c95 6bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
35c99 6bd 66 36 1E 1E 
35c9d 6be 36 66 00 00 
35ca1 6bf 06 06 06 06 
35ca5 6c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
35ca9 6c1 C6 EE FE D6 
35cad 6c2 C6 C6 00 00 
35cb1 6c3 66 6E 7E 7E 
35cb5 6c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
35cb9 6c5 3C 66 66 66 
35cbd 6c6 66 3C 00 00 
35cc1 6c7 3E 66 66 3E 
35cc5 6c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
35cc9 6c9 3C 66 66 66 
35ccd 6ca 36 6C 00 00 
35cd1 6cb 3E 66 66 3E 
35cd5 6cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
35cd9 6cd 3C 06 3C 60 
35cdd 6ce 60 3C 00 00 
35ce1 6cf 7E 18 18 18 
35ce5 6d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
35ce9 6d1 66 66 66 66 
35ced 6d2 66          | 	byte	$66[5]
35cee 6d2 7E 00 00 66 
35cf2 6d3 66 66 66 3C 
35cf6 6d4 18 00 00 C6 
35cfa 6d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
35cfe 6d6 C6 00 00 66 
35d02 6d7 66 3C 3C 66 
35d06 6d8 66 00 00 66 
35d0a 6d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
35d0e 6da 18 00 00 7E 
35d12 6db 30 18 0C 06 
35d16 6dc 7E 00 00 78 
35d1a 6dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
35d1e 6de 78 00 00 02 
35d22 6df 06 0C 18 30 
35d26 6e0 60 00 00 1E 
35d2a 6e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
35d2e 6e2 1E 00 00 10 
35d32 6e3 38 6C C6 00 
35d36 6e4 00 00 00 00 
35d3a 6e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
35d3e 6e6 FF 00 00 18 
35d42 6e7 3C 7E 7E 3C 
35d46 6e8 18 00 00 00 
35d4a 6e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
35d4e 6ea 7C 00 00 06 
35d52 6eb 06 3E 66 66 
35d56 6ec 3E 00 00 00 
35d5a 6ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
35d5e 6ee 3C 00 00 60 
35d62 6ef 60 7C 66 66 
35d66 6f0 7C 00 00 00 
35d6a 6f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
35d6e 6f2 3C 00 00 70 
35d72 6f3 18 7C 18 18 
35d76 6f4 18 00 00 00 
35d7a 6f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
35d7e 6f6 60 3E 00 06 
35d82 6f7 06 3E 66 66 
35d86 6f8 66 00 00 18 
35d8a 6f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
35d8e 6fa 3C 00 00 60 
35d92 6fb 00 60 60 60 
35d96 6fc 60 3C 00 06 
35d9a 6fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
35d9e 6fe 66 00 00 1C 
35da2 6ff 18 18 18 18 
35da6 700 3C 00 00 00 
35daa 701 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
35dae 702 C6 00 00 00 
35db2 703 3E 66 66 66 
35db6 704 66 00 00 00 
35dba 705 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
35dbe 706 3C 00 00 00 
35dc2 707 3E 66 66 3E 
35dc6 708 06 06 00 00 
35dca 709 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
35dce 70a 60 60 00 00 
35dd2 70b 3E 66 06 06 
35dd6 70c 06 00 00 00 
35dda 70d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
35dde 70e 3E 00 00 18 
35de2 70f 7E 18 18 18 
35de6 710 70 00 00 00 
35dea 711 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
35dee 712 7C 00 00 00 
35df2 713 66 66 66 3C 
35df6 714 18 00 00 00 
35dfa 715 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
35dfe 716 6C 00 00 00 
35e02 717 66 3C 18 3C 
35e06 718 66 00 00 00 
35e0a 719 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
35e0e 71a 30 1E 00 00 
35e12 71b 7E 30 18 0C 
35e16 71c 7E 00 00 18 
35e1a 71d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
35e1e 71e 3C 00 18 18 
35e22 71f 18 18 18 18 
35e26 720 18 18 00 7E 
35e2a 721 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
35e2e 722 60 00 10 18 
35e32 723 1C 1E 1C 18 
35e36 724 10 00 08 18 
35e3a 725 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
35e3e 726 08 00       | 	byte	$08, $00
35e40 727 00 00 00 00 
35e44 728 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
35e45 728 80 00 00 00 
35e49 729 00 80 00 00 
35e4d 72a 80 80 00 00 
35e51 72b 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
35e55 72c 80 00 80 00 
35e59 72d 00 40 80 00 
35e5d 72e AA AA AA 00 
35e61 72f 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
35e65 730 FF 00 00 00 
35e69 731 00 FF 00 00 
35e6d 732 FF FF 00 00 
35e71 733 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
35e75 734 FF 00 FF 00 
35e79 735 00 FF FF 00 
35e7d 736 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
35e80 737 00 00 00 00 
35e84 738 00          | ataripalette   file "ataripalettep2.def"
35e85 738 11 11 11 00 
35e89 739 22 22 22 00 
35e8d 73a 33 33 33 00 
35e91 73b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
35e95 73c 55 55 55 00 
35e99 73d 66 66 66 00 
35e9d 73e 77 77 77 00 
35ea1 73f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
35ea5 740 99 99 99 00 
35ea9 741 AA AA AA 00 
35ead 742 BB BB BB 00 
35eb1 743 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
35eb5 744 DD DD DD 00 
35eb9 745 EE EE EE 00 
35ebd 746 FF FF FF 00 
35ec1 747 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
35ec5 748 00 14 40 00 
35ec9 749 00 1E 60 00 
35ecd 74a 00 28 80 00 
35ed1 74b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
35ed5 74c 00 3C BF 00 
35ed9 74d 00 46 DF 00 
35edd 74e 00 50 FF 00 
35ee1 74f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
35ee5 750 39 77 FF 00 
35ee9 751 55 8A FF 00 
35eed 752 71 9E FF 00 
35ef1 753 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
35ef5 754 AA C5 FF 00 
35ef9 755 C6 D8 FF 00 
35efd 756 E3 EC FF 00 
35f01 757 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
35f05 758 00 00 40 00 
35f09 759 00 00 60 00 
35f0d 75a 00 00 80 00 
35f11 75b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
35f15 75c 00 00 BF 00 
35f19 75d 00 00 DF 00 
35f1d 75e 00 00 FF 00 
35f21 75f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
35f25 760 39 39 FF 00 
35f29 761 55 55 FF 00 
35f2d 762 71 71 FF 00 
35f31 763 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
35f35 764 AA AA FF 00 
35f39 765 C6 C6 FF 00 
35f3d 766 E3 E3 FF 00 
35f41 767 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
35f45 768 20 00 40 00 
35f49 769 30 00 60 00 
35f4d 76a 40 00 80 00 
35f51 76b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
35f55 76c 60 00 BF 00 
35f59 76d 70 00 DF 00 
35f5d 76e 80 00 FF 00 
35f61 76f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
35f65 770 9C 39 FF 00 
35f69 771 AA 55 FF 00 
35f6d 772 B8 71 FF 00 
35f71 773 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
35f75 774 D5 AA FF 00 
35f79 775 E3 C6 FF 00 
35f7d 776 F1 E3 FF 00 
35f81 777 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
35f85 778 40 00 40 00 
35f89 779 60 00 60 00 
35f8d 77a 80 00 80 00 
35f91 77b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
35f95 77c BF 00 BF 00 
35f99 77d DF 00 DF 00 
35f9d 77e FF 00 FF 00 
35fa1 77f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
35fa5 780 FF 39 FF 00 
35fa9 781 FF 55 FF 00 
35fad 782 FF 71 FF 00 
35fb1 783 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
35fb5 784 FF AA FF 00 
35fb9 785 FF C6 FF 00 
35fbd 786 FF E3 FF 00 
35fc1 787 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
35fc5 788 40 00 20 00 
35fc9 789 60 00 30 00 
35fcd 78a 80 00 40 00 
35fd1 78b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
35fd5 78c BF 00 60 00 
35fd9 78d DF 00 70 00 
35fdd 78e FF 00 80 00 
35fe1 78f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
35fe5 790 FF 39 9C 00 
35fe9 791 FF 55 AA 00 
35fed 792 FF 71 B8 00 
35ff1 793 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
35ff5 794 FF AA D5 00 
35ff9 795 FF C6 E3 00 
35ffd 796 FF E3 F1 00 
36001 797 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
36005 798 40 00 00 00 
36009 799 60 00 00 00 
3600d 79a 80 00 00 00 
36011 79b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
36015 79c BF 00 00 00 
36019 79d DF 00 00 00 
3601d 79e FF 00 00 00 
36021 79f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
36025 7a0 FF 39 39 00 
36029 7a1 FF 55 55 00 
3602d 7a2 FF 71 71 00 
36031 7a3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
36035 7a4 FF AA AA 00 
36039 7a5 FF C6 C6 00 
3603d 7a6 FF E3 E3 00 
36041 7a7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
36045 7a8 40 10 00 00 
36049 7a9 60 18 00 00 
3604d 7aa 80 20 00 00 
36051 7ab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
36055 7ac BF 30 00 00 
36059 7ad DF 38 00 00 
3605d 7ae FF 40 00 00 
36061 7af FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
36065 7b0 FF 6A 39 00 
36069 7b1 FF 80 55 00 
3606d 7b2 FF 95 71 00 
36071 7b3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
36075 7b4 FF BF AA 00 
36079 7b5 FF D5 C6 00 
3607d 7b6 FF EA E3 00 
36081 7b7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
36085 7b8 40 20 00 00 
36089 7b9 60 30 00 00 
3608d 7ba 80 40 00 00 
36091 7bb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
36095 7bc BF 60 00 00 
36099 7bd DF 70 00 00 
3609d 7be FF 80 00 00 
360a1 7bf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
360a5 7c0 FF 9C 39 00 
360a9 7c1 FF AA 55 00 
360ad 7c2 FF B8 71 00 
360b1 7c3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
360b5 7c4 FF D5 AA 00 
360b9 7c5 FF E3 C6 00 
360bd 7c6 FF F1 E3 00 
360c1 7c7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
360c5 7c8 40 30 00 00 
360c9 7c9 60 48 00 00 
360cd 7ca 80 60 00 00 
360d1 7cb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
360d5 7cc BF 90 00 00 
360d9 7cd DF A8 00 00 
360dd 7ce FF C0 00 00 
360e1 7cf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
360e5 7d0 FF CE 39 00 
360e9 7d1 FF D5 55 00 
360ed 7d2 FF DC 71 00 
360f1 7d3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
360f5 7d4 FF EA AA 00 
360f9 7d5 FF F1 C6 00 
360fd 7d6 FF F8 E3 00 
36101 7d7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
36105 7d8 30 40 00 00 
36109 7d9 48 60 00 00 
3610d 7da 60 80 00 00 
36111 7db 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
36115 7dc 90 BF 00 00 
36119 7dd A8 DF 00 00 
3611d 7de C0 FF 00 00 
36121 7df C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
36125 7e0 CE FF 39 00 
36129 7e1 D5 FF 55 00 
3612d 7e2 DC FF 71 00 
36131 7e3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
36135 7e4 EA FF AA 00 
36139 7e5 F1 FF C6 00 
3613d 7e6 F8 FF E3 00 
36141 7e7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
36145 7e8 00 40 00 00 
36149 7e9 00 60 00 00 
3614d 7ea 00 80 00 00 
36151 7eb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
36155 7ec 00 BF 00 00 
36159 7ed 00 DF 00 00 
3615d 7ee 00 FF 00 00 
36161 7ef 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
36165 7f0 39 FF 39 00 
36169 7f1 55 FF 55 00 
3616d 7f2 71 FF 71 00 
36171 7f3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
36175 7f4 AA FF AA 00 
36179 7f5 C6 FF C6 00 
3617d 7f6 E3 FF E3 00 
36181 7f7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
36185 7f8 00 40 14 00 
36189 7f9 00 60 1E 00 
3618d 7fa 00 80 28 00 
36191 7fb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
36195 7fc 00 BF 3C 00 
36199 7fd 00 DF 46 00 
3619d 7fe 00 FF 50 00 
361a1 7ff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
361a5 800 39 FF 77 00 
361a9 801 55 FF 8A 00 
361ad 802 71 FF 9E 00 
361b1 803 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
361b5 804 AA FF C5 00 
361b9 805 C6 FF D8 00 
361bd 806 E3 FF EC 00 
361c1 807 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
361c5 808 00 40 28 00 
361c9 809 00 60 3C 00 
361cd 80a 00 80 50 00 
361d1 80b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
361d5 80c 00 BF 78 00 
361d9 80d 00 DF 8C 00 
361dd 80e 00 FF A0 00 
361e1 80f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
361e5 810 39 FF B5 00 
361e9 811 55 FF C0 00 
361ed 812 71 FF CA 00 
361f1 813 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
361f5 814 AA FF DF 00 
361f9 815 C6 FF EA 00 
361fd 816 E3 FF F4 00 
36201 817 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
36205 818 00 40 40 00 
36209 819 00 60 60 00 
3620d 81a 00 80 80 00 
36211 81b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
36215 81c 00 BF BF 00 
36219 81d 00 DF DF 00 
3621d 81e 00 FF FF 00 
36221 81f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
36225 820 39 FF FF 00 
36229 821 55 FF FF 00 
3622d 822 71 FF FF 00 
36231 823 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
36235 824 AA FF FF 00 
36239 825 C6 FF FF 00 
3623d 826 E3 FF FF 00 
36241 827 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
36245 828 00 28 40 00 
36249 829 00 3C 60 00 
3624d 82a 00 50 80 00 
36251 82b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
36255 82c 00 78 BF 00 
36259 82d 00 8C DF 00 
3625d 82e 00 A0 FF 00 
36261 82f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
36265 830 39 B5 FF 00 
36269 831 55 C0 FF 00 
3626d 832 71 CA FF 00 
36271 833 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
36275 834 AA DF FF 00 
36279 835 C6 EA FF 00 
3627d 836 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
36280 837             | 
36280 837             | '**********************************************************************************
36280 837             | '
36280 837             | '        Timings and colors definitions
36280 837             | '
36280 837             | '**********************************************************************************
36280 837             | 
36280 837             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
36280 837 08 00 00 00 
36284 838 3C 00 00 00 
36288 839 08 00 00 00 
3628c 83a 00 04 00 00 | timings         long   8,     60,  8,       1024,   7,     4,     1,        128, 600,         340500000,   %1_100111__10_1010_1000__1111_1011,   600,        0,     192, 0, 0
36290 83b 07 00 00 00 
36294 83c 04 00 00 00 
36298 83d 01 00 00 00 
3629c 83e 80 00 00 00 | 	byte	$07, $00, $00, $00, $04, $00, $00, $00, $01, $00, $00, $00, $80, $00, $00, $00
362a0 83f 58 02 00 00 
362a4 840 20 9E 4B 14 
362a8 841 FB A8 9E 01 
362ac 842 58 02 00 00 | 	byte	$58, $02, $00, $00, $20, $9e, $4b, $14, $fb, $a8, $9e, $01, $58, $02, $00, $00
362b0 843 00 00 00 00 
362b4 844 C0 00 00 00 
362b8 845 00 00 00 00 
362bc 846 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
362c0 847             | 'timings        long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
362c0 847 00 75 C7 97 
362c4 848 27 47 F6 0A 
362c8 849 05 79 CB 9B 
362cc 84a 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
362d0 84b             | 
362d0 84b             | ''--------  Initialization  ----------------------------------------------------------------
362d0 84b             | 
362d0 84b 28 0C 64 FD | hdmi            setq    #6
362d4 84c 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
362d8 84d 28 10 64 FD |                 setq    #8
362dc 84e D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
362e0 84f             | 
362e0 84f 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
362e4 850 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
362e8 851 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
362ec 852 D6 C6 01 F1 |                 add     t1,hbase
362f0 853 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
362f4 854 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
362f8 855 7B 0B 80 5F 
362fc 856 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
36300 857 66 66 86 FF 
36304 858 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
36308 859             | '
36308 859 D6 C6 01 F6 |                 mov 	t1,hbase			   '
3630c 85a 11 C6 65 F0 |                 shl 	t1,#17                             '
36310 85b E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
36314 85c 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
36318 85d             | 
36318 85d 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
3631c 85e 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
36320 85f E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
36324 860             | 
36324 860             | ''--------  frame rendering main loop  ---------------------------------------------------
36324 860             | 
36324 860 28 06 64 FD | p101            setq 	#3
36328 861 00 A5 05 FB | 		rdlong  vblankptr,ptra
3632c 862 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
36330 863 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
36334 864 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
36338 865 00 A0 05 F6 |                 mov     dlinum, #0
3633c 866 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
36340 867 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
36344 868             | 
36344 868             | 
36344 868 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
36348 869 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
3634c 86a ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
36350 86b             |                 
36350 86b             | 
36350 86b             | 
36350 86b             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
36350 86b             |   
36350 86b 1F A8 15 F4 |                 testb   paletteptr,#31 wc
36354 86c 29 FE 65 3D |          if_nc  setq2   #255
36358 86d D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
3635c 86e             | 
3635c 86e             | '' -----   up porch (before the picture)
3635c 86e             | 
3635c 86e C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
36360 86f C1 C4 01 F6 |                 mov     hsync1,sync_001	
36364 870 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
36368 871 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
3636c 872             |  
3636c 872             |    
3636c 872             |  
3636c 872 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
36370 873 E2 8C B1 FC |                 xzero   m_sn,hsync1
36374 874 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
36378 875 E1 8E C1 FC |                 xcont   m_bv,hsync0     
3637c 876 E1 90 C1 FC |                 xcont   m_vi,hsync0
36380 877 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
36384 878             | 
36384 878 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
36388 879 E2 8C B1 FC |                 xzero   m_sn,hsync1
3638c 87a 48 00 B0 FD | 		call    #dli
36390 87b E1 8E C1 FC |                 xcont   m_bv,hsync0     
36394 87c E1 90 C1 FC |                 xcont   m_vi,hsync0
36398 87d 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
3639c 87e             |                 	
3639c 87e             |                 
3639c 87e             | 
3639c 87e             |  
3639c 87e             | '' ------- the main screen drawing starts here
3639c 87e             | 
3639c 87e E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
363a0 87f E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
363a4 880 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
363a8 881 E1 8E C1 FC |                 xcont   m_bv,hsync0
363ac 882 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
363b0 883 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
363b4 884 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
363b8 885             |               
363b8 885             | 
363b8 885 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
363bc 886 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
363c0 887             | 
363c0 887             | ' ---------------- All visible lines displayed now, start vblank  
363c0 887             | 
363c0 887 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
363c4 888 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
363c8 889 C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
363cc 88a C3 C4 01 F6 |                 mov     hsync1,sync_223
363d0 88b 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
363d4 88c 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
363d8 88d             | 
363d8 88d             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
363d8 88d             | 
363d8 88d             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
363d8 88d             | 
363d8 88d 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
363dc 88e             | 
363dc 88e DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
363e0 88f 04 B8 05 A1 |     if_z        add     dlptr2,#4
363e4 890 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
363e8 891             | 
363e8 891 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
363ec 892 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
363f0 893 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
363f4 894 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
363f8 895 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
363fc 896             | 
363fc 896 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
36400 897 DD C6 41 F8 |                 getnib  t1,dl,#0
36404 898 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
36408 899 70 00 90 AD |     if_z        jmp     #preload
3640c 89a 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
36410 89b 94 00 90 AD |     if_z        jmp     #preload2
36414 89c 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
36418 89d 0C 00 90 AD |     if_z        jmp     #p390
3641c 89e 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
36420 89f 28 00 90 AD |     if_z        jmp     #p391  
36424 8a0             | 
36424 8a0 2D 00 64 FD | p308            ret
36428 8a1             |    
36428 8a1 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
3642c 8a2 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
36430 8a3 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
36434 8a4 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
36438 8a5 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
3643c 8a6 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
36440 8a7 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
36444 8a8 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
36448 8a9 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
3644c 8aa             |  
3644c 8aa             | '' --------  Reload palette. To do 
3644c 8aa             | 
3644c 8aa E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
36450 8ab 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
36454 8ac 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
36458 8ad 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
3645c 8ae 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
36460 8af E0 00 00 FB |         	rdlong  $000, framebuf2         	
36464 8b0 70 FF 9F FD |         	jmp     #dli                
36468 8b1             |       
36468 8b1             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
36468 8b1             | 
36468 8b1             | 
36468 8b1             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
36468 8b1             | 
36468 8b1 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
3646c 8b2 E2 8C B1 FC |                 xzero   m_sn,hsync1
36470 8b3 E1 8E C1 FC |                 xcont   m_bv,hsync0     
36474 8b4 E1 90 C1 FC |                 xcont   m_vi,hsync0
36478 8b5 FB ED 6F 0B |         _ret_   djnz    pa,#blank
3647c 8b6             |         
3647c 8b6             | '' -------------- Preload a line from PSRAM        
3647c 8b6             |         
3647c 8b6 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
36480 8b7 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
36484 8b8 DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
36488 8b9 DE B4 01 F6 |                 mov     buf1,buf1c
3648c 8ba 03 A0 05 F7 |                 incmod  dlinum,#3
36490 8bb             | 
36490 8bb 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
36494 8bc 32 B7 01 F6 |                 mov     buf2,a1024
36498 8bd E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
3649c 8be 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
364a0 8bf 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
364a4 8c0 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
364a8 8c1             |  
364a8 8c1             |  
364a8 8c1             | preload2      '  incmod  dlinum,#3
364a8 8c1 04 C0 45 F0 |                 shr 	framebuf2,#4
364ac 8c2 ED B2 01 F6 |                 mov 	cmd,affffffff
364b0 8c3 E0 B4 01 F6 |                 mov 	buf1,framebuf2
364b4 8c4 28 02 64 FD |                 setq	#1
364b8 8c5 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
364bc 8c6             |                 
364bc 8c6             | 
364bc 8c6             | '' -------------- Draw sprites
364bc 8c6             | 
364bc 8c6 CF 5C 02 F6 | sprite          mov t8,frames
364c0 8c7 10 5C 0E F5 | 		and t8,#16 wz
364c4 8c8 11 48 06 F6 |                 mov     spritenum,#17			' 16 +2 sprites. Todo: this should be a parameter
364c8 8c9 10 48 06 A6 | 	if_z    mov spritenum, #16	
364cc 8ca             | 		
364cc 8ca             | 
364cc 8ca 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
364d0 8cb 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
364d4 8cc EF 56 96 F9 |                 alts    t5,#sprite1xy
364d8 8cd 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
364dc 8ce 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
364e0 8cf EF 56 96 F9 |                 alts    t5,#sprite1xy
364e4 8d0 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
364e8 8d1 0F 4C 66 F7 |                 signx	sprite_x,#15
364ec 8d2 F0 56 96 F9 |                 alts    t5,#sprite1wh
364f0 8d3 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
364f4 8d4 01 52 86 F1 |                 sub     sprite_h,#1
364f8 8d5 F0 56 96 F9 |                 alts    t5,#sprite1wh
364fc 8d6 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
36500 8d7             | 
36500 8d7             | 
36500 8d7 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
36504 8d8 BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
36508 8d9 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
3650c 8da B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
36510 8db 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
36514 8dc AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
36518 8dd 00 5E 06 F6 |                 mov 	t9,#0
3651c 8de 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
36520 8df 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
36524 8e0 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
36528 8e1             |      
36528 8e1 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
3652c 8e2 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
36530 8e3 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
36534 8e4 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
36538 8e5 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
3653c 8e6             |                 
3653c 8e6 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
36540 8e7 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
36544 8e8 DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
36548 8e9             |   		
36548 8e9 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
3654c 8ea 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
36550 8eb             | 
36550 8eb 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
36554 8ec 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
36558 8ed 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
3655c 8ee             |  
3655c 8ee EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
36560 8ef 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
36564 8f0 10 00 90 CD |      if_c 	jmp     #p899		
36568 8f1             | 	
36568 8f1             | 	
36568 8f1 26 CD 01 F6 | 		mov 	t4,sprite_x	'
3656c 8f2 28 CD 01 F1 | 		add	t4,sprite_w
36570 8f3 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
36574 8f4             | 
36574 8f4 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
36578 8f5             | 
36578 8f5 28 59 02 F6 | p899		mov 	t6,sprite_w
3657c 8f6 01 58 86 F1 | 	 	sub     t6,#1
36580 8f7 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
36584 8f8             | 
36584 8f8 28 58 62 FD |                 setq   	t6
36588 8f9 E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
3658c 8fa 28 5D 02 F6 |                 mov t8,sprite_w
36590 8fb 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
36594 8fc 24 00 90 AD |         if_z    jmp #p898
36598 8fd             |          
36598 8fd             |         
36598 8fd 70 5F 06 F6 |                 mov  t9,#368
3659c 8fe 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
365a0 8ff             | 
365a0 8ff 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
365a4 900 08 5C 06 FA |                 mul t8,#8				' bits to shr
365a8 901 FF FF 7F FF 
365ac 902 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
365b0 903 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
365b4 904 00 5E 8E F9 |                 altd t9,#0				' and mask 
365b8 905 2D 01 00 F5 |                 and 0-0, t7
365bc 906             |                
365bc 906             | 
365bc 906 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
365c0 907 E5 E0 7A FA |                 wmlong 368,t3				
365c4 908             |                 
365c4 908 C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
365c8 909 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
365cc 90a 2D 00 64 FD |                 ret
365d0 90b             | 	
365d0 90b             | 	
365d0 90b             |                
365d0 90b             |  
365d0 90b             | '' -------------- Graphics line ------------------------------------------------------------
365d0 90b             |  
365d0 90b             | 
365d0 90b             | '' consts and vars
365d0 90b             | 
365d0 90b 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
365d4 90c AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
365d8 90d 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
365dc 90e AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
365e0 90f             | 
365e0 90f 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
365e4 910             | 
365e4 910             | '------ these longs will be set by setmode function
365e4 910             | 
365e4 910 00 00 00 00 | m_bs            long    0        'blanks before sync
365e8 911 00 00 00 00 | m_sn            long    0        'sync
365ec 912 00 00 00 00 | m_bv            long    0        'blanks before visible
365f0 913 00 00 00 00 | m_vi            long    0        'visible pixels #
365f4 914             | 'm_border        long    0        'left/right borders
365f4 914 00 00 00 00 | i_upporch       long    0        'up porch lines
365f8 915 00 00 00 00 | i_vsync         long    0        'vsync lines
365fc 916 00 00 00 00 | i_downporch     long    0        'down porch lines
36600 917 00 00 00 00 | i_cpl           long    0        'chars/longs per line
36604 918 00 00 00 00 | i_totalvis      long    0
36608 919             | 
36608 919             | '-------------------------------------
36608 919             |  
36608 919 00 00 00 00 | linenum         long    0
3660c 91a 00 00 00 00 | frames          long    0
36610 91b 00 00 00 00 | dlinum long 0
36614 91c 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
36618 91d             | 
36618 91d 00 00 00 00 | vblankptr       long    0
3661c 91e 00 00 00 00 | modeptr         long    0
36620 91f 00 00 00 00 | paletteptr      long    0
36624 920 00 00 00 00 | dlptr           long    0
36628 921 01 00 00 00 | hbase           long    1
3662c 922 00 00 00 00 | mailbox         long    0
36630 923 00 00 00 00 | spriteptr          long 0
36634 924             | 
36634 924 00 00 00 00 | cmd             long    0
36638 925 00 B0 07 00 | buf1            long    $80000-16384-4096
3663c 926 00 04 00 00 | buf2            long    1024
36640 927 01 00 00 00 | dlptr2          long    1
36644 928 01 00 00 00 | dl              long    1
36648 929             | 
36648 929 00 00 00 00 | buf1c long 0
3664c 92a 00 B0 07 00 | buf1d            long    $80000-16384-4096
36650 92b 01 00 00 00 | framebuf2       long    1
36654 92c 01 00 00 00 | hsync0          long    1
36658 92d 01 00 00 00 | hsync1          long    1
3665c 92e             | 
3665c 92e 01 00 00 00 | t1              long    1
36660 92f 00 00 00 00 | t2 long 0
36664 930 00 00 00 00 | t3 long 0
36668 931 00 00 00 00 | t4 long 0
3666c 932             | 
3666c 932 00 00 00 00 | rcnt            long    0  'dl repeat count
36670 933 00 00 00 00 | rcnt2           long    0
36674 934 00 00 00 00 | rcnt2a          long    0
36678 935 00 00 00 00 | roffset         long    0
3667c 936 00 00 00 00 | rdl             long    0  'dl repeat line
36680 937 00 00 00 00 | dlc             long    0  'dl command
36684 938             | 
36684 938 FF FF FF FF | affffffff       long    $ffffffff
36688 939 00 00 00 00 | sprite1pointer long 0
3668c 93a 00 00 00 00 | sprite1xy      long 0
36690 93b 00 00 00 00 | sprite1wh      long 0
36694 93c 00 00 00 00 | sprite2pointer long 0
36698 93d 00 00 00 00 | sprite2xy      long 0
3669c 93e 00 00 00 00 | sprite2wh      long 0
366a0 93f 00 00 00 00 | sprite3pointer long 0
366a4 940 00 00 00 00 | sprite3xy      long 0
366a8 941 00 00 00 00 | sprite3wh      long 0
366ac 942 00 00 00 00 | sprite4pointer long 0
366b0 943 00 00 00 00 | sprite4xy      long 0
366b4 944 00 00 00 00 | sprite4wh      long 0
366b8 945 00 00 00 00 | sprite5pointer long 0
366bc 946 00 00 00 00 | sprite5xy      long 0
366c0 947 00 00 00 00 | sprite5wh      long 0
366c4 948 00 00 00 00 | sprite6pointer long 0
366c8 949 00 00 00 00 | sprite6xy      long 0
366cc 94a 00 00 00 00 | sprite6wh      long 0
366d0 94b 00 00 00 00 | sprite7pointer long 0
366d4 94c 00 00 00 00 | sprite7xy      long 0
366d8 94d 00 00 00 00 | sprite7wh      long 0
366dc 94e 00 00 00 00 | sprite8pointer long 0
366e0 94f 00 00 00 00 | sprite8xy      long 0
366e4 950 00 00 00 00 | sprite8wh      long 0
366e8 951 00 00 00 00 | sprite9pointer long 0
366ec 952 00 00 00 00 | sprite9xy      long 0
366f0 953 00 00 00 00 | sprite9wh      long 0
366f4 954 00 00 00 00 | sprite10pointer long 0
366f8 955 00 00 00 00 | sprite10xy      long 0
366fc 956 00 00 00 00 | sprite10wh      long 0
36700 957 00 00 00 00 | sprite11pointer long 0
36704 958 00 00 00 00 | sprite11xy      long 0
36708 959 00 00 00 00 | sprite11wh      long 0
3670c 95a 00 00 00 00 | sprite12pointer long 0
36710 95b 00 00 00 00 | sprite12xy      long 0
36714 95c 00 00 00 00 | sprite12wh      long 0
36718 95d 00 00 00 00 | sprite13pointer long 0
3671c 95e 00 00 00 00 | sprite13xy      long 0
36720 95f 00 00 00 00 | sprite13wh      long 0
36724 960 00 00 00 00 | sprite14pointer long 0
36728 961 00 00 00 00 | sprite14xy      long 0
3672c 962 00 00 00 00 | sprite14wh      long 0
36730 963 00 00 00 00 | sprite15pointer long 0
36734 964 00 00 00 00 | sprite15xy      long 0
36738 965 00 00 00 00 | sprite15wh      long 0
3673c 966 00 00 00 00 | sprite16pointer long 0
36740 967 00 00 00 00 | sprite16xy      long 0
36744 968 00 00 00 00 | sprite16wh      long 0
36748 969 00 00 00 00 | sprite17pointer long 0
3674c 96a 00 00 00 00 | sprite17xy      long 0
36750 96b 00 00 00 00 | sprite17wh      long 0
36754 96c 00 00 00 00 | sprite18pointer long 0
36758 96d 00 00 00 00 | sprite18xy      long 0
3675c 96e 00 00 00 00 | sprite18wh      long 0
36760 96f 00 00 00 00 | spritenum long 0
36764 970             | 
36764 970 00 00 00 00 | spriteline long 0
36768 971 84 03 00 00 | sprite_x long 900
3676c 972 00 00 00 00 | sprite_y long 0
36770 973 10 00 00 00 | sprite_w long 16
36774 974 40 00 00 00 | sprite_h long 64
36778 975 00 00 00 00 | l2 long 0
3677c 976 00 00 00 00 | t5 long 0
36780 977 00 00 00 00 | t6 long 0
36784 978 00 00 00 00 | t7 long 0
36788 979 00 00 00 00 | t8 long 0
3678c 97a 00 00 00 00 | t9 long 0
36790 97b 00 00 00 00 | preloadaddr long 0
36794 97c 00 00 00 00 | preloadlineaddr long 0
36798 97d 00 04 00 00 | a1024 long 1024
3679c 97e             | 
3679c 97e E0 03 00 00 | aa long 992
367a0 97f FF 03 00 00 | a1023 long 1023
367a4 980 00 10 00 00 | a4096 long 4096
367a8 981             |  fit 368
367a8 981             | _psram_spin2_dat_
367a8 981 00 00 00 00 
      ...             
368a0 9bf 00 00 00 00 
368a4 9c0 00 00 00 00 |     listdata long 0[8*8]
368a8 9c1             |             orgh
368a8                 | 
368a8                 | ' driver state
368a8     FF FF FF FF | drivercog   long    -1  ' COG id of driver
368ac     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
368b0                 | 
368b0                 | ' delay profile
368b0     07 00 00 00 
368b4     00 CF 7B 05 
368b8     80 D1 F0 08 
368bc     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
368c0     80 C4 60 0F 
368c4     80 39 7A 12 
368c8     40 2D D9 13 
368cc     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
368d0                 | 
368d0                 | ' data to be passed to driver when starting it
368d0                 | startupData
368d0     00 00 00 00 |     long    0           ' current frequency
368d4     00 00 00 00 |     long    FLAGS       ' optional flags for driver
368d8     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
368dc     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
368e0     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
368e4     F0 68 03 00 |     long    deviceData  ' address of devices data structure in HUBRAM
368e8     70 69 03 00 |     long    qosData     ' address of QoS data structure in HUBRAM
368ec     90 69 03 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
368f0                 | 
368f0                 | ' data for memory
368f0                 | deviceData
368f0                 |     ' 16 bank parameters follow (16MB per bank)
368f0     00 00 00 00 
      ...             
36928     00 00 00 00 
3692c     00 00 00 00 |     long    0[16]                               ' banks 0-15
36930                 |     ' 16 banks of pin parameters follow
36930     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
36934     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
36938     FF FF FF FF 
      ...             
36968     FF FF FF FF 
3696c     FF FF FF FF |     long    -1[14]                              ' banks 2-15
36970                 | 
36970                 | ' data for COG polling
36970                 | qosData 
36970     00 00 FF FF 
36974     00 00 FF FF 
36978     00 00 FF FF 
3697c     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
36980     00 00 FF FF 
36984     00 00 FF FF 
36988     00 00 FF FF 
3698c     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
36990                 |     
36990                 | ' mailbox storage
36990                 | 
36990                 | mailboxes
36990     00 00 00 00 
      ...             
369e8     00 00 00 00 
369ec     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
369f0                 | 	alignl
369f0                 | _psram16drv_spin2_dat_
369f0                 |                             orgh
369f0     00 00 00 00 
      ...             
36a08     00 00 00 00 
36a0c     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
36a10                 | 
36a10                 | driver_start
36a10                 |                             org
36a10 000             | '..................................................................................................
36a10 000             | ' Memory layout for COG RAM once operational:
36a10 000             | '
36a10 000             | '  COG RAM address      Usage
36a10 000             | '  ---------------      ----
36a10 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
36a10 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
36a10 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
36a10 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
36a10 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
36a10 000             | '  ~$198-$1F3           State and register variables
36a10 000             | '
36a10 000             | ' Also during driver COG startup:
36a10 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
36a10 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
36a10 000             | '..................................................................................................
36a10 000             |                             
36a10 000             | ' Mailbox storage after vector initialization
36a10 000             | 
36a10 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
36a14 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
36a18 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
36a1c 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
36a20 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
36a24 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
36a28 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
36a2c 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
36a30 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
36a34 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
36a38 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
36a3c 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
36a40 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
36a44 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
36a48 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
36a4c 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
36a50 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
36a54 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
36a58 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
36a5c 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
36a60 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
36a64 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
36a68 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
36a6c 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
36a70 018             | 
36a70 018             | ' Mailbox parameter addresses per COG once patched
36a70 018             |                             
36a70 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
36a74 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
36a78 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
36a7c 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
36a80 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
36a84 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
36a88 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
36a8c 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
36a90 020             | 
36a90 020             | '..................................................................................................
36a90 020             | ' Per COG request and state setup and service branching
36a90 020             |         
36a90 020             | cog0                 
36a90 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
36a94 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
36a98 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
36a9c 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
36aa0 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36aa4 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36aa8 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
36aac 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
36ab0 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
36ab4 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36ab8 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36abc 02b 33 CA 63 FD |                             execf   request-0               'jump to service
36ac0 02c             | cog1                        
36ac0 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
36ac4 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
36ac8 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
36acc 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
36ad0 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36ad4 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36ad8 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
36adc 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
36ae0 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
36ae4 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36ae8 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36aec 037 33 CA 63 FD |                             execf   request-0               'jump to service
36af0 038             | cog2                         
36af0 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
36af4 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
36af8 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
36afc 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
36b00 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36b04 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36b08 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
36b0c 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
36b10 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
36b14 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36b18 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36b1c 043 33 CA 63 FD |                             execf   request-0               'jump to service
36b20 044             | cog3                        
36b20 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
36b24 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
36b28 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
36b2c 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
36b30 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36b34 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36b38 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
36b3c 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
36b40 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
36b44 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36b48 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36b4c 04f 33 CA 63 FD |                             execf   request-0               'jump to service
36b50 050             | cog4                        
36b50 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
36b54 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
36b58 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
36b5c 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
36b60 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36b64 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36b68 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
36b6c 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
36b70 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
36b74 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36b78 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36b7c 05b 33 CA 63 FD |                             execf   request-0               'jump to service
36b80 05c             | cog5                        
36b80 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
36b84 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
36b88 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
36b8c 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
36b90 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36b94 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36b98 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
36b9c 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
36ba0 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
36ba4 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36ba8 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36bac 067 33 CA 63 FD |                             execf   request-0               'jump to service
36bb0 068             | cog6                        
36bb0 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
36bb4 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
36bb8 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
36bbc 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
36bc0 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36bc4 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36bc8 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
36bcc 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
36bd0 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
36bd4 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36bd8 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36bdc 073 33 CA 63 FD |                             execf   request-0               'jump to service
36be0 074             | cog7                        
36be0 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
36be4 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
36be8 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
36bec 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
36bf0 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36bf4 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36bf8 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
36bfc 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
36c00 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
36c04 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36c08 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36c0c 07f 33 CA 63 FD |                             execf   request-0               'jump to service
36c10 080             |                             fit     128
36c10 080             | 
36c10 080             |                             fit     128
36c10 080             | pad                         long    0[128-$]                'align init code to $80
36c10 080             | 
36c10 080             | '..................................................................................................
36c10 080             | 
36c10 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
36c10 080             | 
36c10 080             | init                        
36c10 080             |                             ' get driver scratch long address in hub
36c10 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
36c14 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
36c18 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
36c1c 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
36c20 084             |                     
36c20 084             |                             ' read in the additional LUT RAM code
36c20 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
36c24 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
36c28 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
36c2c 087             | 
36c2c 087             |                             ' read the startup parameters
36c2c 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
36c30 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
36c34 089             | 
36c34 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
36c34 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
36c38 08a             | 
36c38 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
36c3c 08b 01 00 00 5F 
36c40 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
36c44 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
36c48 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
36c4c 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
36c50 090             | 
36c50 090             |                             ' setup data pin modes and data bus pin group in streamer commands
36c50 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
36c54 091 01 00 00 FF 
36c58 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
36c5c 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
36c60 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
36c64 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
36c68 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
36c6c 097 08 DE 47 F5 |                             or      a, #8
36c70 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
36c74 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
36c78 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
36c7c 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
36c80 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
36c84 09d 01 DE 07 F1 |                             add     a, #1
36c88 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
36c8c 09f             |  
36c8c 09f             |                             ' setup device control pin states
36c8c 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
36c90 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
36c94 0a1 01 00 00 FF 
36c98 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
36c9c 0a3             | 
36c9c 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
36ca0 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
36ca4 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
36ca8 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
36cac 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
36cb0 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
36cb4 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
36cb8 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
36cbc 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
36cc0 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
36cc4 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
36cc8 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
36ccc 0af             | pinloop
36ccc 0af             |                             ' generate minimum CE high time before access
36ccc 0af A1 07 00 FF 
36cd0 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
36cd4 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
36cd8 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
36cdc 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
36ce0 0b4 1F DE 63 FD |                             waitx   a                       'delay
36ce4 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
36ce8 0b6             | 
36ce8 0b6             |                             ' setup the COG mailboxes and addresses 
36ce8 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
36cec 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
36cf0 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
36cf4 0b9             | 
36cf4 0b9 28 2E 64 FD |                             setq    #24-1
36cf8 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
36cfc 0bb             | 
36cfc 0bb             |                             ' setup the polling loop for active COGs 
36cfc 0bb 01 C2 63 FD |                             cogid   id
36d00 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
36d04 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
36d08 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
36d0c 0bf 0A F0 07 F6 |                             mov     ptra, #10
36d10 0c0 E1 F1 03 FA |                             mul     ptra, id
36d14 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
36d18 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
36d1c 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
36d20 0c4 03 C2 07 FA |                             mul     id, #3
36d24 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
36d28 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
36d2c 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
36d30 0c8 D8 01 B0 FD |                             call    #reloadcogs
36d34 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
36d38 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
36d3c 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
36d3c 0cb D8 E5 B7 F9 |                             setd    d, #addr1
36d40 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
36d44 0cd 08 04 DC FC |                             rep     #2, #8
36d48 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
36d4c 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
36d50 0d0             | 
36d50 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
36d50 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
36d50 0d0 01 C2 63 FD |                             cogid   id
36d54 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
36d58 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
36d5c 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
36d60 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
36d64 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
36d68 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
36d6c 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
36d70 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
36d74 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
36d78 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
36d7c 0db 3F E4 A7 F9 |                             alti    d, #%111_111
36d80 0dc 00 00 00 F6 |                             mov     0-0, 0-0
36d84 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
36d88 0de A5 E5 03 F1 |                             add     d, const512
36d8c 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
36d90 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
36d94 0e1 00 00 00 F6 |                             mov     0-0, 0-0
36d98 0e2             |                             
36d98 0e2             |                             ' setup register values for control vector loop setup after we return
36d98 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
36d9c 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
36da0 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
36da4 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
36da8 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
36dac 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
36db0 0e8 D0 C3 8F F9 |                             altd    id, #id0
36db4 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
36db8 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
36dbc 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
36dc0 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
36dc4 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
36dc8 0ee             |  
36dc8 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
36dcc 0ef 07 CA 07 F5 |                             and     request, #7
36dd0 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
36dd4 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
36dd8 0f2             |                             fit     $100                    'ensure all init code fits this space
36dd8 0f2             | 
36dd8 0f2             |                             fit     $100                    'ensure all init code fits this space
36dd8 0f2             | 
36dd8 0f2 00 00 00 00 
      ...             
36e08 0fe 00 00 00 00 
36e0c 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
36e10 100             | 
36e10 100             | '..................................................................................................
36e10 100             | ' Error result handling and COG notification of request completion
36e10 100             | 
36e10 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
36e14 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
36e18 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
36e1c 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
36e20 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
36e24 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
36e28 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
36e2c 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
36e30 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
36e34 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
36e38 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
36e3c 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
36e40 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
36e44 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
36e48 10e             | ' Poller re-starts here after a COG is serviced
36e48 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
36e4c 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
36e50 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
36e54 111             | ' Main dynamic polling loop repeats until a request arrives
36e54 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
36e58 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
36e5c 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
36e60 114             | 
36e60 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
36e64 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
36e68 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
36e6c 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
36e70 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
36e74 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
36e78 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
36e7c 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
36e80 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
36e84 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
36e88 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
36e8c 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
36e90 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
36e94 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
36e98 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
36e9c 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
36ea0 124             | 
36ea0 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
36ea4 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
36ea8 126             |  
36ea8 126             | '..................................................................................................
36ea8 126             | ' List handler                               
36ea8 126             | 
36ea8 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
36eac 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
36eb0 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
36eb4 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
36eb8 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
36ebc 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
36ec0 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
36ec4 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
36ec8 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
36ecc 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
36ed0 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
36ed4 131 33 00 60 FD |                             execf   0-0                     'process the request 
36ed8 132             | 
36ed8 132             | '..................................................................................................
36ed8 132             | ' Restoring per COG state and resuming where we left off
36ed8 132             | 
36ed8 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
36edc 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
36ee0 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
36ee4 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
36ee8 136 D8 CB FB F8 |                             getbyte request, addr1, #3
36eec 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
36ef0 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
36ef4 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
36ef8 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
36efc 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
36f00 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
36f04 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
36f08 13e             |                    
36f08 13e             | '..................................................................................................
36f08 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
36f08 13e             | 
36f08 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
36f0c 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
36f10 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
36f14 141 D0 DF B7 F9 |                             setd    a, #id0
36f18 142 D8 DF BF F9 |                             sets    a, #addr1
36f1c 143 FE FF FF FF 
36f20 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
36f24 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
36f28 146 3F DE A7 F9 |                             alti    a, #%111_111 
36f2c 147 00 00 F0 F9 |                             muxq    0-0, 0-0
36f30 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
36f34 149 01 E2 63 FD |                             cogid   c
36f38 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
36f3c 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
36f40 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
36f44 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
36f48 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
36f4c 14f 00 E0 03 F6 |                             mov     b, 0-0
36f50 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
36f54 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
36f58 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
36f5c 153 0C 00 90 AD |             if_z            jmp     #excluded               
36f60 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
36f64 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
36f68 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
36f6c 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
36f70 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
36f74 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
36f78 15a             | 
36f78 15a             | 'determine priority cogs and build instructions for the polling sequence
36f78 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
36f7c 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
36f80 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
36f84 15d             | 
36f84 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
36f88 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
36f8c 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
36f90 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
36f94 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
36f98 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
36f9c 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
36fa0 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
36fa4 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
36fa8 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
36fac 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
36fb0 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
36fb4 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
36fb8 16a             | endprioloop
36fb8 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
36fbc 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
36fc0 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
36fc4 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
36fc8 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
36fcc 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
36fd0 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
36fd4 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
36fd8 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
36fdc 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
36fe0 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
36fe4 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
36fe8 176             | 
36fe8 176             | ' populate the round robin COG polling instructions
36fe8 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
36fec 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
36ff0 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
36ff4 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
36ff8 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
36ffc 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
37000 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
37004 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
37008 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
3700c 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
37010 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
37014 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
37018 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
3701c 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
37020 184             | '..................................................................................................
37020 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
37020 184             | 
37020 184             | set_latency                                                 '            (a) set latency
37020 184             | get_latency                                                 '            (b) get latency
37020 184             | set_burst                                                   '            (c) set burst size of bank
37020 184             | get_burst                                                   '            (d) get burst size of bank
37020 184             |                                                             '            (e) dump state
37020 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
37024 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
37028 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
3702c 187             |                                                             ' | | | | e  account for following AUGS
3702c 187 04 00 00 FF 
37030 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
37034 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
37038 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
3703c 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
37040 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
37044 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
37048 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
3704c 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
37050 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
37054 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
37058 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
3705c 193             | 
3705c 193             | '..................................................................................................
3705c 193             | ' Misc EXECF code
3705c 193             | 
3705c 193 33 72 63 FD | start_read_exec             execf   newburstr
37060 194 33 7C 63 FD | start_write_exec            execf   resumewrites
37064 195 33 78 63 FD | continue_read_exec          execf   lockedreads
37068 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
3706c 197             | 
3706c 197             | '..................................................................................................
3706c 197             | ' Variables
3706c 197             | 
3706c 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
37070 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
37074 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
37078 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
3707c 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
37080 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
37084 19d             | 
37084 19d 00 00 00 80 | xfreq1          long    $80000000
37088 19e 00 00 00 40 | xfreq2          long    $40000000
3708c 19f 03 00 00 00 | delay           long    3
37090 1a0             | 
37090 1a0             | lutcodeaddr                 
37090 1a0             | startupparams
37090 1a0             | excludedcogs                                    'careful: shared register use!
37090 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
37094 1a1 00 00 00 00 | flags           long    0
37098 1a2             | mask                                            'careful: shared register use!
37098 1a2 00 00 00 00 | resetmaskA      long    0
3709c 1a3             | limit                                           'careful: shared register use!
3709c 1a3 00 00 00 00 | resetmaskB      long    0
370a0 1a4 00 00 00 00 | datapins        long    0
370a4 1a5             | const512                                        'careful: shared register use!
370a4 1a5 00 00 00 00 | devicelist      long    0
370a8 1a6 00 00 00 00 | coglist         long    0
370ac 1a7 00 00 00 00 | mbox            long    0 
370b0 1a8             | 
370b0 1a8             | clkpin                                          'shared with code patched during init
370b0 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
370b4 1a9             | cspin                                           'shared with code patched during init
370b4 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
370b8 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
370bc 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
370c0 1ac 01 00 00 00 | clkdelay        long    1
370c4 1ad 00 00 00 00 | regdatabus      long    0
370c8 1ae             | 
370c8 1ae 10 00 00 00 | deviceaddr      long    $10
370cc 1af             | rrcounter
370cc 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
370d0 1b0             | 
370d0 1b0             | ' jump addresses for the per COG handlers
370d0 1b0 20 00 00 00 | cog0_handler    long    cog0
370d4 1b1 2C 00 00 00 | cog1_handler    long    cog1
370d8 1b2 38 00 00 00 | cog2_handler    long    cog2
370dc 1b3 44 00 00 00 | cog3_handler    long    cog3
370e0 1b4 50 00 00 00 | cog4_handler    long    cog4
370e4 1b5 5C 00 00 00 | cog5_handler    long    cog5
370e8 1b6 68 00 00 00 | cog6_handler    long    cog6
370ec 1b7 74 00 00 00 | cog7_handler    long    cog7
370f0 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
370f4 1b9             | 
370f4 1b9             | ' EXECF sequences
370f4 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
370f8 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
370fc 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
37100 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
37104 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
37108 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
3710c 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
37110 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
37110 1c0             | 
37110 1c0             | 
37110 1c0             | ' SKIPF sequences
37110 1c0             | skiptable
37110 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
37114 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
37118 1c2 00 00 00 00 |                 long    0                      ' read modify write long
3711c 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
37120 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
37124 1c5 00 00 00 00 | pattern2        long    0
37128 1c6 00 00 00 00 | pattern3        long    0
3712c 1c7 77 02 00 00 | singlelong      long    %1001110111  
37130 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
37134 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
37138 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
3713c 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
37140 1cc             | 
37140 1cc             | ' LUT RAM address values
37140 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
37144 1cd DD 02 00 00 | continue_read   long    continue_read_lut
37148 1ce DB 02 00 00 | continue_write  long    continue_write_lut
3714c 1cf F6 02 00 00 | noread          long    noread_lut
37150 1d0             | 
37150 1d0 00 00 00 00 | id0             long    0
37154 1d1 01 00 00 00 | id1             long    1
37158 1d2 02 00 00 00 | id2             long    2
3715c 1d3 03 00 00 00 | id3             long    3
37160 1d4 04 00 00 00 | id4             long    4
37164 1d5 05 00 00 00 | id5             long    5
37168 1d6 06 00 00 00 | id6             long    6
3716c 1d7 07 00 00 00 | id7             long    7
37170 1d8             | 
37170 1d8             | 'These next 10 request registers below are also temporarily reused during init 
37170 1d8             | 'and COG updates and need to follow immediately after id0-id7
37170 1d8 00 00 00 00 | addr1           long    0
37174 1d9 00 00 00 00 | hubdata         long    0
37178 1da 00 00 00 00 | count           long    0
3717c 1db 00 00 00 00 | addr2           long    0
37180 1dc 00 00 00 00 | total           long    0
37184 1dd 00 00 00 00 | offset1         long    0
37188 1de 00 00 00 00 | offset2         long    0
3718c 1df 00 00 00 00 | link            long    0
37190 1e0             | 
37190 1e0             | burstwrite                                      'note shared register use during init
37190 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
37194 1e1 00 00 00 00 | id              long    0
37198 1e2             | 
37198 1e2 00 00 00 00 | header          long    0
3719c 1e3 00 00 00 00 | trailer         long    0
371a0 1e4 00 00 00 00 | cmdaddr         long    0
371a4 1e5 00 00 00 00 | request         long    0
371a8 1e6 00 00 00 00 | rrlimit         long    0
371ac 1e7 00 00 00 00 | pinconfig       long    0
371b0 1e8 00 00 00 00 | clks            long    0
371b4 1e9 00 00 00 00 | resume          long    0
371b8 1ea 00 00 00 00 | orighubsize     long    0
371bc 1eb 00 00 00 00 | wrclks          long    0
371c0 1ec             | 
371c0 1ec 00 00 00 00 | pattern         long    0
371c4 1ed 00 00 00 00 | hubscratch      long    0
371c8 1ee 00 10 00 00 | val4k           long    4096
371cc 1ef             | 
371cc 1ef             | ' temporary general purpose regs
371cc 1ef 00 00 00 00 | a               long    0
371d0 1f0 00 00 00 00 | b               long    0
371d4 1f1 00 00 00 00 | c               long    0
371d8 1f2 00 00 00 00 | d               long    0
371dc 1f3             |                 fit     502
371dc 1f3             | 
371dc 1f3             |                 fit     502
371dc 1f3             | 
371dc 1f3             | '..................................................................................................
371dc 1f3             | 
371dc 1f3             |             orgh
371dc                 | 
371dc                 | lut_code
371dc                 | 'HW init code up to 80 longs
371dc                 | 
371dc                 | '..................................................................................................
371dc                 | ' Memory layout for LUT RAM once operational:
371dc                 | '
371dc                 | '  LUT RAM address      Usage
371dc                 | '  ---------------      ----
371dc                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
371dc                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
371dc                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
371dc                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
371dc                 | '
371dc                 | ' Also during driver COG startup:
371dc                 | ' $230-$24F is used for HW init setup
371dc                 | ' $250-$26F is used as temporary vector storage 
371dc                 | '..................................................................................................
371dc                 | 
371dc                 |                 org $230    
371dc 230             | 
371dc 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
371dc 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
371e0 231 24 16 60 FD |                             pollxfi
371e4 232 FF AA 2A FF 
371e8 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
371ec 234 28 00 B0 FD |                             call    #sendqspi
371f0 235 07 F8 07 FF 
371f4 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
371f8 237 28 00 B0 FD |                             call    #sendspi
371fc 238 F8 07 78 FF 
37200 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
37204 23a 1C 00 B0 FD |                             call    #sendspi
37208 23b 7F 78 78 FF 
3720c 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
37210 23d 10 00 B0 FD |                             call    #sendspi 
37214 23e 2D 00 64 FD |                             ret
37218 23f             | 
37218 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
3721c 240 32 0C 64 FD |                             skipf   #%110
37220 241 9C EF 03 F6 |                             mov     pb, xsendimm
37224 242             | 
37224 242 10 D0 07 F6 | sendspi                     mov     clks, #16
37228 243 97 EF 03 F6 |                             mov     pb, ximm8lut
3722c 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
37230 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
37234 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
37238 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
3723c 248 24 36 60 FD |                             waitxfi                         'wait for the completion
37240 249 50 48 63 FD |                             fltl    datapins                'float data bus
37244 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
37248 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
3724c 24c             | 
3724c 24c 00 00 00 00 
37250 24d 00 00 00 00 
37254 24e 00 00 00 00 
37258 24f 00 00 00 00 |                 long    0[$270-32-$]
3725c 250             |                 fit     $270-32  ' keep room for 32 vector longs
3725c 250             |     
3725c 250             |                 fit     $270-32  ' keep room for 32 vector longs
3725c 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
3725c 250             | rw_vect ' PSRAM jump vectors
3725c 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
37260 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
37264 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
37268 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
3726c 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
37270 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
37274 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
37278 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
3727c 258             | ro_vect ' R/O PSRAM jump vectors
3727c 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
37280 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
37284 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
37288 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
3728c 25c 00 01 00 00 |                 long    unsupported
37290 25d 00 01 00 00 |                 long    unsupported
37294 25e 00 01 00 00 |                 long    unsupported
37298 25f 00 01 00 00 |                 long    unsupported
3729c 260             | ctrl_vect ' Control jump vectors
3729c 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
372a0 261 00 01 00 00 |                 long    unsupported
372a4 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
372a8 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
372ac 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
372b0 265 00 01 00 00 |                 long    unsupported
372b4 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
372b8 267 3E 01 00 00 |                 long    reconfig 
372bc 268             | no_vect ' Invalid bank jump vectors
372bc 268 01 01 00 00 |                 long    invalidbank
372c0 269 01 01 00 00 |                 long    invalidbank
372c4 26a 01 01 00 00 |                 long    invalidbank
372c8 26b 01 01 00 00 |                 long    invalidbank
372cc 26c 01 01 00 00 |                 long    invalidbank
372d0 26d 01 01 00 00 |                 long    invalidbank
372d4 26e 01 01 00 00 |                 long    invalidbank
372d8 26f 01 01 00 00 |                 long    invalidbank
372dc 270             |                 fit     $270
372dc 270             | 
372dc 270             |                 fit     $270
372dc 270             | '..................................................................................................
372dc 270             | ' PSRAM READS
372dc 270             |                                                             ' a b c d e f
372dc 270             |                                                             ' B W L B R L  (a) byte read
372dc 270             |                                                             ' Y O O U E O  (b) word read
372dc 270             |                                                             ' T R N R S C  (c) long read
372dc 270             |                                                             ' E D G S U K  (d) new burst read
372dc 270             |                                                             '       T M E  (e) resumed sub-burst
372dc 270             |                                                             '         E D  (f) locked sub-burst
372dc 270             | 
372dc 270             | 
372dc 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
372e0 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
372e4 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
372e8 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
372ec 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
372f0 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
372f4 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
372f8 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
372fc 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
37300 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
37304 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
37308 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
3730c 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
37310 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
37314 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
37318 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
3731c 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
37320 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
37324 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
37328 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
3732c 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
37330 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
37334 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
37338 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
3733c 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
37340 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
37344 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
37348 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
3734c 28c             | 
3734c 28c             |                             ' fall through to read bursts
3734c 28c             |                         
3734c 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
3734c 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
37350 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
37354 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
37358 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
3735c 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
37360 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
37364 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
37368 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
3736c 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
37370 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
37374 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
37378 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
3737c 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
37380 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
37384 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
37388 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
3738c 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
37390 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
37394 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
37398 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
3739c 2a0 E8 D1 03 F1 |                             add     clks, clks
373a0 2a1             | readcommon
373a0 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
373a4 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
373a8 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
373ac 2a4             | 
373ac 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
373b0 2a5 69 C8 63 FD |                             rev     cmdaddr
373b4 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
373b8 2a7 61 C8 63 FD |                             mergeb  cmdaddr
373bc 2a8             | 
373bc 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
373c0 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
373c4 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
373c4 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
373c8 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
373cc 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
373d0 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
373d4 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
373d4 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
373d8 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
373dc 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
373e0 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
373e4 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
373e8 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
373ec 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
373ec 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
373f0 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
373f4 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
373f8 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
373fc 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
37400 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
37404 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
37408 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
3740c 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
37410 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
37414 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
37418 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
3741c 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
37420 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
37424 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
37424 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
37428 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
3742c 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
37430 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
37434 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
37438 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
3743c 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
37440 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
37444 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
37448 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
3744c 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
37450 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
37454 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
37458 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
3745c 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
37460 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
37464 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
37468 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
3746c 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
37470 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
37474 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
37478 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
3747c 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
37480 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
37484 2da 10 03 90 FD |                             jmp     #writecommon
37488 2db             | 
37488 2db             | '..................................................................................................
37488 2db             | ' Burst continuation testing
37488 2db             | 
37488 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
3748c 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
37490 2dd             | continue_read_lut          
37490 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
37494 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
37498 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
3749c 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
374a0 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
374a4 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
374a8 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
374ac 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
374b0 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
374b4 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
374b8 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
374bc 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
374c0 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
374c4 2ea             | 
374c4 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
374c8 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
374cc 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
374d0 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
374d4 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
374d8 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
374dc 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
374e0 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
374e4 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
374e8 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
374ec 2f4 2A 1C 66 0D |             _ret_           push    #poller
374f0 2f5             | 
374f0 2f5             | 
374f0 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
374f4 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
374f4 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
374f8 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
374fc 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
37500 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
37504 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
37508 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
3750c 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
37510 2fd 2D 00 64 FD |                             ret                             ' | continue processing
37514 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
37518 2ff             | '..................................................................................................
37518 2ff             | ' Completion of requests
37518 2ff             | 
37518 2ff             | complete_rw_lut             
37518 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
3751c 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
37520 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
37524 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
37528 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
3752c 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
37530 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
37534 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
37538 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
3753c 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
37540 309 32 62 64 AD |             if_z            skipf   #%110001
37544 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
37548 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
3754c 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
37550 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
37554 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
37558 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
3755c 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
37560 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
37564 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
37568 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
3756c 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
37570 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
37574 316             |                                                             ' skipcase (a) gfx copy to/from hub
37574 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
37574 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
37574 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
37578 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
3757c 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
37580 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
37584 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
37588 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
3758c 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
37590 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
37594 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
37598 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
3759c 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
375a0 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
375a4 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
375a8 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
375ac 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
375b0 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
375b4 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
375b8 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
375bc 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
375c0 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
375c4 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
375c8 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
375cc 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
375d0 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
375d4 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
375d8 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
375dc 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
375e0 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
375e4 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
375e8 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
375ec 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
375f0 335 DF B7 03 A6 |             if_z            mov     addr2, link
375f4 336 34 FF 9F AD |             if_z            jmp     #checknext
375f8 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
375fc 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
37600 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
37604 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
37608 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
3760c 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
37610 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
37614 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
37618 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
3761c 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
37620 341             | 
37620 341             | '..................................................................................................
37620 341             | ' PSRAM WRITES
37620 341             |                                                             '  a b c d e f g h
37620 341             | 
37620 341             |                                                             '  B W L F B R L L (a) byte write(s)
37620 341             |                                                             '  Y O O I U E O O (b) word write(s)
37620 341             |                                                             '  T R N L R S C C (c) long write(s)
37620 341             |                                                             '  E D G L S U K K (d) resumed fill
37620 341             |                                                             '          T M E E (e) new burst write
37620 341             |                                                             '            E D D (f) resumed burst
37620 341             |                                                             '              F B (g) locked fill
37620 341             |                                                             '              I U (h) locked burst write
37620 341             |                                                             '              L R 
37620 341             |                                                             '              L S 
37620 341             |                                                             '                T 
37620 341             | 
37620 341             | w_single                   
37620 341             | w_fill_cont           
37620 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
37624 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
37628 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
3762c 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
37630 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
37634 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
37638 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
3763c 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
37640 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
37644 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
37648 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
3764c 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
37650 34d             |                ' disable call to r_resume_burst for single longs when z=0
37650 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
37654 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
37658 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
3765c 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
37660 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
37664 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
37668 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
3766c 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
37670 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
37674 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
37678 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
3767c 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
37680 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
37684 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
37688 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
3768c 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
37690 35d             |         
37690 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
37690 35d             |             '
37690 35d             |             '  At least one of these 3 optional components will be sent
37690 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
37690 35d             |             '     body - N x full longs of data
37690 35d             |             '     trailer - last partial long of data
37690 35d             |             '
37690 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
37690 35d             |             '
37690 35d             |             'Case    Type                           Sends
37690 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
37690 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
37690 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
37690 35d             |             ' 4)     Multiple long fill             body only
37690 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
37690 35d             | 
37690 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
37690 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
37694 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
37698 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
3769c 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
376a0 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
376a4 362 13 8C 07 F6 |                             mov     pattern3, #%10011
376a8 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
376ac 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
376b0 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
376b4 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
376b8 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
376bc 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
376c0 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
376c4 36a             |                             
376c4 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
376c8 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
376cc 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
376d0 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
376d4 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
376d8 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
376dc 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
376e0 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
376e4 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
376e8 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
376ec 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
376f0 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
376f4 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
376f8 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
376fc 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
37700 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
37704 37a             | 
37704 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
37708 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
3770c 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
37710 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
37714 37e             |                  
37714 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
37718 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
3771c 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
37720 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
37724 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
37728 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
3772c 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
37730 385             | 
37730 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
37734 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
37738 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
3773c 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
37740 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
37744 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
37748 38b             | 
37748 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
37748 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
3774c 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
37750 38d 2A B0 63 FD |                             push    addr1                   'save address
37754 38e             | 
37754 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
37754 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
37758 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
3775c 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
37760 391             |             
37760 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
37764 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
37768 393 2B B0 63 FD |                             pop     addr1                   'restore address
3776c 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
37770 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
37774 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
37778 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
3777c 398             | 
3777c 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
37780 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
37784 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
37788 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
3778c 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
37790 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
37794 39e             | 
37794 39e             |                             'trailer is done
37794 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
37798 39f             | 
37798 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
3779c 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
377a0 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
377a4 3a2             | 
377a4 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
377a8 3a3 69 C8 63 FD |                             rev     cmdaddr                 
377ac 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
377b0 3a5 61 C8 63 FD |                             mergeb  cmdaddr
377b4 3a6             |                             
377b4 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
377b8 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
377bc 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
377c0 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
377c4 3aa             |                                                          
377c4 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
377c8 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
377cc 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
377d0 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
377d4 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
377d8 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
377dc 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
377e0 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
377e4 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
377e8 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
377ec 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
377f0 3b5             |  
377f0 3b5 59 52 63 FD |                             drvh    cspin
377f4 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
377f8 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
377fc 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
37800 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
37804 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
37808 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
3780c 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
37810 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
37814 3be EA E5 03 F6 |                             mov     d, orighubsize
37818 3bf EF E5 63 F0 |                             shl     d, a
3781c 3c0 F2 E3 83 F1 |                             sub     c, d
37820 3c1 DD E3 03 F1 |                             add     c, offset1
37824 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
37828 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
3782c 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
37830 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
37834 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
37838 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
3783c 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
37840 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
37844 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
37848 3cb BB D3 03 F6 |                             mov     resume, restorefill
3784c 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
37850 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
37854 3ce 6C FC BF CD |             if_c            call    #yield
37858 3cf 2D 00 64 FD |                             ret
3785c 3d0             |                            
3785c 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
3785c 3d0             |                       '     rczl    pa                      'rotate left into address offset
3785c 3d0             |                       '     rczl    c wcz                   'restore count and flags
3785c 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
37860 3d1 02 EC 67 F0 |                             shl     pa, #2
37864 3d2 28 06 64 AD |             if_z            setq    #3
37868 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
3786c 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
37870 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
37874 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
37878 3d7             | 
37878 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
3787c 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
37880 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
37884 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
37888 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
3788c 3dc             |                 fit 1024-32
3788c 3dc             |         
3788c 3dc             | 
3788c 3dc             | '..................................................................................................
3788c 3dc             | 
3788c 3dc             |                 fit 1024-32
3788c 3dc 00 00 00 00 
37890 3dd 00 00 00 00 
37894 3de 00 00 00 00 
37898 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
3789c 3e0             |                 org 1024-32
3789c 000             | 
3789c 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
3789c 000 00 00 00 00 |                 long $0000
378a0 001 11 11 00 00 |                 long $1111
378a4 002 22 22 00 00 |                 long $2222
378a8 003 33 33 00 00 |                 long $3333
378ac 004 44 44 00 00 |                 long $4444
378b0 005 55 55 00 00 |                 long $5555
378b4 006 66 66 00 00 |                 long $6666
378b8 007 77 77 00 00 |                 long $7777
378bc 008 88 88 00 00 |                 long $8888
378c0 009 99 99 00 00 |                 long $9999
378c4 00a AA AA 00 00 |                 long $aaaa
378c8 00b BB BB 00 00 |                 long $bbbb
378cc 00c CC CC 00 00 |                 long $cccc
378d0 00d DD DD 00 00 |                 long $dddd
378d4 00e EE EE 00 00 |                 long $eeee
378d8 00f FF FF 00 00 |                 long $ffff
378dc 010             | 
378dc 010             | 'masks
378dc 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
378e0 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
378e4 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
378e8 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
378ec 014             | 
378ec 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
378f0 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
378f4 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
378f8 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
378fc 018             | 
378fc 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
37900 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
37904 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
37908 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
3790c 01c             | 
3790c 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
37910 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
37914 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
37918 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
3791c 020             |         fit 1024
3791c 020             | 
3791c 020             |         fit 1024
3791c 020             | 
3791c 020             | '--------------------------------------------------------------------------------------------------
3791c 020             |         orgh
3791c                 | 
3791c                 | gfxexpansion
3791c                 |                             'simple line drawing graphics expansion of memory driver
3791c                 |                             'jmp     #donerepeats                'just return for now
3791c                 | 
3791c     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
37920     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
37924     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
37928     DD E1 03 F6 |                             mov     b, offset1              'get error term
3792c     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
37930     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
37934     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
37938     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
3793c     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
37940     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
37944     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
37948     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
3794c     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
37950     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
37954     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
37958     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
3795c     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
37960     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
37964     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
37968     DC E5 33 F9 |                             getword d, total, #0            'get line width
3796c     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
37970     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
37974     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
37978     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
3797c     C3 03 80 FD |                             jmp     #readmask               'continue filling
37980                 | 	alignl
37980                 | _usbnew_spin2_dat_
37980                 |                 org     $000
37980 000             | 
37980 000             | usb_host_start
37980 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
37984 001             | 
37984 001 03 00 00 FF 
37988 002 D0 70 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
3798c 003 02 70 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
37990 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
37994 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
37998 006 29 70 63 FD |                 setq2   htmp
3799c 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
379a0 008             | 
379a0 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
379a4 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
379a8 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
379ac 00b             | 
379ac 00b             | '------------------------------------------------------------------------------
379ac 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
379ac 00b             | ' special because the receiving function must not respond with either STALL or
379ac 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
379ac 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
379ac 00b             | ' corrupt packet, it must ignore the transaction
379ac 00b             | '------------------------------------------------------------------------------
379ac 00b             | ' On entry:
379ac 00b             | '   PTRA - start address of the SETUP data struct.
379ac 00b             | ' On exit:
379ac 00b             | '   retval - PID_ACK on success, otherwise error code.
379ac 00b             | '------------------------------------------------------------------------------
379ac 00b             | txn_setup
379ac 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
379b0 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
379b4 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
379b8 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
379bc 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
379c0 010             | .setup
379c0 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
379c4 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
379c8 012 2D 00 64 AD |         if_z    ret
379cc 013 7C 0B B0 FD |                 call    #retry_wait
379d0 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
379d4 015 2D 00 64 AD |         if_z    ret
379d8 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
379dc 017 E0 FF 9F FD |                 jmp     #.setup
379e0 018             | 
379e0 018             | '------------------------------------------------------------------------------
379e0 018             | ' IN/INTERRUPT transaction.
379e0 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
379e0 018             | '------------------------------------------------------------------------------
379e0 018             | ' On entry:
379e0 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
379e0 018             | '     CRC(b19..23).
379e0 018             | ' On exit:
379e0 018             | '------------------------------------------------------------------------------
379e0 018             | txn_in
379e0 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
379e4 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
379e8 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
379ec 01b             | 
379ec 01b             |                 ' Fall through to urx_packet
379ec 01b             | 
379ec 01b             | '------------------------------------------------------------------------------
379ec 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
379ec 01b             | ' received are handshakes and IN DATAx.
379ec 01b             | '------------------------------------------------------------------------------
379ec 01b             | ' On entry:
379ec 01b             | ' On exit:
379ec 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
379ec 01b             | '     returned.
379ec 01b             | '------------------------------------------------------------------------------
379ec 01b             | urx_packet
379ec 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
379f0 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
379f4 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
379f8 01e 1A 92 63 FD |                 getct   hct2
379fc 01f 4E 93 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
37a00 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
37a04 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
37a08 022             | .wait_sop
37a08 022 22 A7 8A FA |                 rdpin   urx, dm
37a0c 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
37a10 024 08 00 90 CD |         if_c    jmp     #.get_pid
37a14 025 FC 25 CC FB |                 jnct2   #.wait_sop
37a18 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
37a1c 027             | .get_pid
37a1c 027 28 02 B0 FD |                 call    #urx_next
37a20 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
37a24 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
37a28 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
37a2c 02b             | .chk_pid
37a2c 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37a30 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
37a34 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
37a38 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
37a3c 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
37a40 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
37a44 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
37a48 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
37a4c 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
37a50 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
37a54 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
37a58 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
37a5c 037             | .ack_resend
37a5c 037 22 A7 82 FA |                 rqpin   urx, dm
37a60 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
37a64 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
37a68 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
37a6c 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
37a70 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
37a74 03d             | .chk_eop
37a74 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
37a78 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
37a7c 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
37a80 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
37a84 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
37a88 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
37a8c 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
37a90 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
37a94 045 2D 00 64 FD |                 ret
37a98 046             | .idle
37a98 046 22 A7 82 FA |                 rqpin   urx, dm
37a9c 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
37aa0 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
37aa4 049 2D 00 64 FD |                 ret
37aa8 04a             | 
37aa8 04a             | '------------------------------------------------------------------------------
37aa8 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
37aa8 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
37aa8 04a             | ' if one is required.
37aa8 04a             | '------------------------------------------------------------------------------
37aa8 04a             | ' On entry:
37aa8 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
37aa8 04a             | ' On exit:
37aa8 04a             | '------------------------------------------------------------------------------
37aa8 04a             | utx_token
37aa8 04a 22 A7 82 FA |                 rqpin   urx, dm
37aac 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
37ab0 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
37ab4 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
37ab8 04e 34 0D B0 CD |         if_c    call    #utx_pre
37abc 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
37ac0 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
37ac4 051 5E 71 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
37ac8 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
37acc 053             | .next_byte
37acc 053 B8 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
37ad0 054 08 70 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
37ad4 055             | .wait
37ad4 055 40 46 72 FD |                 testp   dp                      wc
37ad8 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
37adc 057 23 03 08 FC |                 akpin   dp
37ae0 058 22 A5 22 FC |                 wypin   utx, dm
37ae4 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
37ae8 05a             | 
37ae8 05a             | '------------------------------------------------------------------------------
37ae8 05a             | ' SETUP/OUT/INTERRUPT transaction.
37ae8 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
37ae8 05a             | '------------------------------------------------------------------------------
37ae8 05a             | ' On entry:
37ae8 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
37ae8 05a             | '     CRC(b19..23).
37ae8 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
37ae8 05a             | '   pkt_data - count of DATAx payload bytes to send.
37ae8 05a             | ' On exit:
37ae8 05a             | '------------------------------------------------------------------------------
37ae8 05a             | txn_out
37ae8 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
37aec 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
37af0 05c 00 00 C0 FF 
37af4 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
37af8 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
37afc 05f             | 
37afc 05f             |                 ' Fall through to utx_data
37afc 05f             | 
37afc 05f             | '------------------------------------------------------------------------------
37afc 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
37afc 05f             | ' calculated while the data byte is being shifted out. Since data stage
37afc 05f             | ' success/fail is not determined until the status stage of the transaction,
37afc 05f             | ' this routine is only concerned about the current DATAx packet.
37afc 05f             | '------------------------------------------------------------------------------
37afc 05f             | ' On entry:
37afc 05f             | '   PTRA - hub start address of the data to read.
37afc 05f             | '   pkt_cnt - data payload size.
37afc 05f             | ' On exit:
37afc 05f             | '------------------------------------------------------------------------------
37afc 05f             | utx_data
37afc 05f 22 A7 82 FA |                 rqpin   urx, dm
37b00 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
37b04 061 F4 FF 9F CD |         if_c    jmp     #utx_data
37b08 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
37b0c 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
37b10 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
37b14 065 D8 0C B0 CD |         if_c    call    #utx_pre
37b18 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
37b1c 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
37b20 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
37b24 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
37b28 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
37b2c 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
37b30 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
37b34 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
37b38 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
37b3c 06f             | .read_byte
37b3c 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
37b40 070 F0 00 B0 FD |                 call    #utx_byte
37b44 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
37b48 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
37b4c 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
37b50 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
37b54 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
37b58 076             | .send_crc
37b58 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
37b5c 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
37b60 078 D0 00 B0 FD |                 call    #utx_byte
37b64 079 5D A5 EA F8 |                 getbyte utx, crc, #1
37b68 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
37b6c 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
37b70 07c             | 
37b70 07c             | '------------------------------------------------------------------------------
37b70 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
37b70 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
37b70 07c             | ' expects that the packet includes at least the CRC word.
37b70 07c             | '
37b70 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
37b70 07c             | ' was requested, which makes it difficult to determine where the data stops
37b70 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
37b70 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
37b70 07c             | ' USB-16 expected residual value of 0xB001.
37b70 07c             | '
37b70 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
37b70 07c             | ' so the caller can verify IN success before writing the data to its final
37b70 07c             | ' destination.
37b70 07c             | '------------------------------------------------------------------------------
37b70 07c             | ' On entry:
37b70 07c             | '   pkt_data - max byte count expected to be in the packet.
37b70 07c             | '   newb_flg - signals new byte ready when toggled.
37b70 07c             | ' On exit:
37b70 07c             | '   pkt_cnt - actual number of bytes read.
37b70 07c             | '------------------------------------------------------------------------------
37b70 07c             | urx_data
37b70 07c F7 75 03 F6 |                 mov     htmp2, pb
37b74 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
37b78 07e 00 00 C0 FF 
37b7c 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
37b80 080 BA EF 03 F6 |                 mov     pb, htmp2
37b84 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
37b88 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
37b8c 083 58 83 03 F6 |                 mov     pkt_tmp, pkt_data
37b90 084 02 82 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
37b94 085             | .wait_byte
37b94 085             | ' In-line rx for max speed
37b94 085 22 A7 82 FA |                 rqpin   urx, dm
37b98 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
37b9c 087 53 A5 02 F5 |                 and     utx, urx
37ba0 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
37ba4 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
37ba8 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
37bac 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
37bb0 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
37bb4 08d DC FF 9F FD |                 jmp     #.wait_byte
37bb8 08e             | .get_byte
37bb8 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
37bbc 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
37bc0 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
37bc4 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
37bc8 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
37bcc 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
37bd0 094             | .end_crc
37bd0 094 01 B8 06 F1 |                 add     pkt_cnt, #1
37bd4 095 C1 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
37bd8 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
37bdc 097 2D 00 64 1D |         if_a    ret
37be0 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
37be0 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
37be0 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
37be0 098             | ' to miss it, so cheat a bit and look for SOP clear here.
37be0 098 22 A7 82 FA |                 rqpin   urx, dm
37be4 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
37be8 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
37bec 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
37bec 09b             | .chk_crc
37bec 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
37bf0 09c 58 00 00 FF 
37bf4 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
37bf8 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
37bfc 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
37c00 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
37c04 0a1 34 09 B0 FD |                 call    #poll_waitx
37c08 0a2             | 
37c08 0a2             |                 ' Fall through to utx_handshake
37c08 0a2             | 
37c08 0a2             | '------------------------------------------------------------------------------
37c08 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
37c08 0a2             | ' the appropriate IP delay has been inserted.
37c08 0a2             | '------------------------------------------------------------------------------
37c08 0a2             | ' On entry:
37c08 0a2             | '   retval - handshake PID to send.
37c08 0a2             | ' On exit:
37c08 0a2             | '   retval unchanged.
37c08 0a2             | '------------------------------------------------------------------------------
37c08 0a2             | utx_handshake
37c08 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
37c0c 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
37c10 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
37c14 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
37c18 0a6 5F A5 02 F6 |                 mov     utx, retval
37c1c 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
37c20 0a8             | .idle
37c20 0a8 22 A7 82 FA |                 rqpin   urx, dm
37c24 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
37c28 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
37c2c 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
37c30 0ac 08 09 90 FD |                 jmp     #poll_waitx
37c34 0ad             | 
37c34 0ad             | '------------------------------------------------------------------------------
37c34 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
37c34 0ad             | '------------------------------------------------------------------------------
37c34 0ad             | ' On entry:
37c34 0ad             | '   utx - byte to transmit.
37c34 0ad             | ' On exit:
37c34 0ad             | '------------------------------------------------------------------------------
37c34 0ad             | utx_byte
37c34 0ad 40 46 72 FD |                 testp   dp                      wc
37c38 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
37c3c 0af 23 03 08 FC |                 akpin   dp
37c40 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
37c44 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
37c48 0b2             | 
37c48 0b2             | '------------------------------------------------------------------------------
37c48 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
37c48 0b2             | '------------------------------------------------------------------------------
37c48 0b2             | ' On entry:
37c48 0b2             | ' On exit:
37c48 0b2             | '   retval - the byte read.
37c48 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
37c48 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
37c48 0b2             | '     received.
37c48 0b2             | '------------------------------------------------------------------------------
37c48 0b2             | urx_next
37c48 0b2 22 A7 8A FA |                 rdpin   urx, dm
37c4c 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
37c50 0b4 53 A5 02 F5 |                 and     utx, urx
37c54 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
37c58 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
37c5c 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
37c60 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
37c64 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
37c68 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
37c6c 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
37c70 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
37c74 0bd 2D 00 64 FD |                 ret
37c78 0be             | 
37c78 0be             | '------------------------------------------------------------------------------
37c78 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
37c78 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
37c78 0be             | ' length, and the PID is not included in the CRC calculation:
37c78 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
37c78 0be             | '  CRC5  ENDP ADDRESS PID
37c78 0be             | ' %00000_1111_1111111_xxxxxxxx
37c78 0be             | '------------------------------------------------------------------------------
37c78 0be             | ' On entry:
37c78 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
37c78 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
37c78 0be             | ' On exit:
37c78 0be             | '   ep_addr_pid - CRC value appended to the packet.
37c78 0be             | '------------------------------------------------------------------------------
37c78 0be             | calc_crc5
37c78 0be FF 03 00 FF 
37c7c 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
37c80 0c0 5E 71 03 F6 |                 mov     htmp, ep_addr_pid
37c84 0c1 08 70 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
37c88 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
37c8c 0c3 69 70 63 FD |                 rev     htmp                            ' Input data reflected
37c90 0c4 28 70 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
37c94 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
37c98 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
37c9c 0c7 09 70 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
37ca0 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
37ca4 0c9 01 70 77 F0 |                 shl     htmp, #1                wc
37ca8 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
37cac 0cb 01 70 77 F0 |                 shl     htmp, #1                wc
37cb0 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
37cb4 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
37cb8 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
37cbc 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
37cc0 0d0             | 
37cc0 0d0             | '------------------------------------------------------------------------------
37cc0 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
37cc0 0d0             | '------------------------------------------------------------------------------
37cc0 0d0             | isr1_fsframe
37cc0 0d0 1A 92 62 FD |                 getct   iframe_ct_base
37cc4 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
37cc8 0d2 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
37ccc 0d3 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
37cd0 0d4             | .wait
37cd0 0d4 40 46 72 FD |                 testp   dp                      wc
37cd4 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
37cd8 0d6 23 03 08 FC |                 akpin   dp
37cdc 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
37ce0 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
37ce4 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
37ce8 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
37cec 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
37cf0 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
37cf4 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
37cf8 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
37cfc 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
37d00 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
37d04 0e1 2C FF BF FD |                 call    #utx_byte
37d08 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
37d0c 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
37d10 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
37d14 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
37d18 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
37d1c 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
37d20 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
37d24 0e9 5B A5 42 F5 |                 or      utx, icrc
37d28 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
37d2c 0eb A3 81 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
37d30 0ec 20 00 90 FD |                 jmp     #isr1_wait
37d34 0ed             | isr1_lsframe
37d34 0ed 1A 92 62 FD |                 getct   iframe_ct_base
37d38 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
37d3c 0ef B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
37d40 0f0             | .wait
37d40 0f0 40 46 72 FD |                 testp   dp                      wc
37d44 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
37d48 0f2 23 03 08 FC |                 akpin   dp
37d4c 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
37d50 0f4 A2 81 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
37d54 0f5             | isr1_wait
37d54 0f5 22 A5 82 FA |                 rqpin   utx, dm
37d58 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
37d5c 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
37d60 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
37d64 0f9 03 00 00 FF 
37d68 0fa FF B3 06 F5 |                 and     frame, ##$7ff
37d6c 0fb 1F 80 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
37d70 0fc F5 FF 3B FB |                 reti1
37d74 0fd             | 
37d74 0fd             | '------------------------------------------------------------------------------
37d74 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
37d74 0fd             | ' transaction will complete before the next frame is triggered.
37d74 0fd             | '------------------------------------------------------------------------------
37d74 0fd             | ' On entry:
37d74 0fd             | ' On exit:
37d74 0fd             | '------------------------------------------------------------------------------
37d74 0fd             | wait_txn_ok
37d74 0fd 1A 74 63 FD |                 getct   htmp2
37d78 0fe 49 75 83 F1 |                 sub     htmp2, iframe_ct_base
37d7c 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
37d80 100 A0 75 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
37d84 101 A1 75 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
37d88 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
37d8c 103 2D 00 64 FD |                 ret
37d90 104             | 
37d90 104             | '------------------------------------------------------------------------------
37d90 104             | ' A device connection was detected, or a bus reset was requested by the USB
37d90 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
37d90 104             | ' and perform a reset sequence prior to device enumeration.
37d90 104             | '------------------------------------------------------------------------------
37d90 104             | dev_reset
37d90 104 22 A7 82 FA |                 rqpin   urx, dm
37d94 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
37d98 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
37d9c 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
37da0 108             | reset
37da0 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
37da4 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
37da8 10a 1F 5A 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
37dac 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
37db0 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
37db4 10d 1A 92 62 FD |                 getct   iframe_ct_base
37db8 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
37dbc 10f B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
37dc0 110 59 71 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
37dc4 111 24 70 07 F1 |                 add     htmp, #36
37dc8 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
37dcc 113             | .framewait
37dcc 113 B8 B3 1A F2 |                 cmp     frame, htmp             wcz
37dd0 114 F8 FF 9F CD |         if_b    jmp     #.framewait
37dd4 115 2D 00 64 FD |                 ret
37dd8 116             | 
37dd8 116             | '------------------------------------------------------------------------------
37dd8 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
37dd8 116             | '------------------------------------------------------------------------------
37dd8 116             | ' On entry:
37dd8 116             | '   PTRA - source address.
37dd8 116             | '   PB - destination address.
37dd8 116             | '   hr0 - length of copy, in bytes.
37dd8 116             | ' On exit:
37dd8 116             | '------------------------------------------------------------------------------
37dd8 116             | hmemcpy
37dd8 116 61 71 C7 FA |                 rdbyte  htmp, ptra++
37ddc 117 F7 71 43 FC |                 wrbyte  htmp, pb
37de0 118 01 EE 07 F1 |                 add     pb, #1
37de4 119 FC 85 6F 0B |         _ret_   djnz    hr0, #hmemcpy
37de8 11a             | 
37de8 11a             | '------------------------------------------------------------------------------
37de8 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
37de8 11a             | ' loop until the errant device is disconnected.
37de8 11a             | '------------------------------------------------------------------------------
37de8 11a             | ' On entry:
37de8 11a             | ' On exit:
37de8 11a             | '------------------------------------------------------------------------------
37de8 11a             | host_error
37de8 11a             |           if ERROR_LED >= 0
37de8 11a             |           end
37de8 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
37dec 11b             | 
37dec 11b             | '------------------------------------------------------------------------------
37dec 11b             | ' Get HID descriptor buffer for current port
37dec 11b             | '------------------------------------------------------------------------------
37dec 11b             | ' On entry:
37dec 11b             | ' On exit:
37dec 11b             | '   PB - HID descriptor buffer pointer
37dec 11b             | '------------------------------------------------------------------------------
37dec 11b             | get_hid_descr_buffer
37dec 11b 2D EF 03 F6 |                 mov     pb, hdev_port
37df0 11c 01 EE E7 F2 |                 cmpsub  pb, #1
37df4 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
37df8 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
37dfc 11f             | 
37dfc 11f             | 
37dfc 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
37e00 120             | 
37e00 120             | ' USB commands and error codes
37e00 120 00 00 00 00 | cmd_data        long    0
37e04 121 00 00 00 00 | usb_err_code    long    ERR_NONE
37e08 122             | 
37e08 122             | ' Parameters block assigned at cog startup
37e08 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
37e0c 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
37e10 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
37e14 125             | if ACTIVITY_LED >= 0
37e14 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
37e14 125             | end
37e14 125             | if ERROR_LED >= 0
37e14 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
37e14 125             | end
37e14 125 00 00 00 00 | hid_descr_p     long    0
37e18 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
37e18 126             | 'hkbd_report_p   long    0
37e18 126 00 00 00 00 | hub_descr_p     long    0
37e1c 127 00 00 00 00 | urx_buff_p      long    0
37e20 128 00 00 00 00 | dev_desc_buff_p long    0
37e24 129 00 00 00 00 | con_desc_buff_p long    0
37e28 12a 00 00 00 00 | cache_start_p   long    0
37e2c 12b 00 00 00 00 | cache_end_p     long    0
37e30 12c             | if EMUPAD_MAX_PLAYER > 0
37e30 12c             | emupad_out_ptr  long    0
37e30 12c             | end
37e30 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
37e34 12d             | 
37e34 12d             | hdev_init_start
37e34 12d             | hdev_port       res     1
37e34 12d             | hdev_port       res     1
37e34 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
37e34 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
37e34 12d             | kbm_next_datax  res     1
37e34 12d             | kbm_next_datax  res     1
37e34 12d             | hub_intf_num    res     1
37e34 12d             | hub_intf_num    res     1
37e34 12d             | hub_next_datax  res     1
37e34 12d             | hub_next_datax  res     1
37e34 12d             | hub_status_chg  res     1
37e34 12d             | hub_status_chg  res     1
37e34 12d             | hub_port_status res     1
37e34 12d             | hub_port_status res     1
37e34 12d             | if HAVE_MOUSE
37e34 12d             | ms_intf_num     res     1
37e34 12d             | ms_intf_num     res     1
37e34 12d             | ms_in_max_pkt   res     1
37e34 12d             | ms_in_max_pkt   res     1
37e34 12d             | end
37e34 12d             | kb_intf_num     res     1
37e34 12d             | kb_intf_num     res     1
37e34 12d             | kb_interval     res     1
37e34 12d             | kb_interval     res     1
37e34 12d             | kb_in_max_pkt   res     1
37e34 12d             | kb_in_max_pkt   res     1
37e34 12d             | kb_max_index    res     1
37e34 12d             | kb_max_index    res     1
37e34 12d             | kb_led_states   res     1
37e34 12d             | kb_led_states   res     1
37e34 12d             | gp_intf_num     res     1
37e34 12d             | gp_intf_num     res     1
37e34 12d             | gp_interval     res     1
37e34 12d             | gp_interval     res     1
37e34 12d             | gp_max_index    res     1
37e34 12d             | gp_max_index    res     1
37e34 12d             | gp_descr_len    res     1+MAX_DEVICES
37e34 12d             | gp_descr_len    res     1+MAX_DEVICES
37e34 12d             | hdev_init_end
37e34 12d             | 
37e34 12d             | ' Initialized at cog startup:
37e34 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
37e34 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
37e34 12d             | iframe_ct_new   res     1
37e34 12d             | iframe_ct_new   res     1
37e34 12d             | iframe_ct_base  res     1
37e34 12d             | iframe_ct_base  res     1
37e34 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
37e34 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
37e34 12d             | 
37e34 12d             | ' This register block is reset to zero when a USB device connects
37e34 12d             | hreg_init_start
37e34 12d             | hstatus         res     1         ' Host status flags
37e34 12d             | hstatus         res     1         ' Host status flags
37e34 12d             | hctwait         res     1         ' Poll-based wait clocks
37e34 12d             | hctwait         res     1         ' Poll-based wait clocks
37e34 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
37e34 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
37e34 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
37e34 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
37e34 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
37e34 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
37e34 12d             | xfer_retry      res     1         ' Control transfer retry count
37e34 12d             | xfer_retry      res     1         ' Control transfer retry count
37e34 12d             | retry           res     1         ' Transaction retry count
37e34 12d             | retry           res     1         ' Transaction retry count
37e34 12d             | utx             res     1         ' Byte to transmit on USB
37e34 12d             | utx             res     1         ' Byte to transmit on USB
37e34 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
37e34 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
37e34 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
37e34 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
37e34 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
37e34 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
37e34 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
37e34 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
37e34 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
37e34 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
37e34 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
37e34 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
37e34 12d             | frame           res     1         ' USB 1ms frame counter value
37e34 12d             | frame           res     1         ' USB 1ms frame counter value
37e34 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
37e34 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
37e34 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
37e34 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
37e34 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
37e34 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
37e34 12d             | crc             res     1         ' Used for CRC16 calculation
37e34 12d             | crc             res     1         ' Used for CRC16 calculation
37e34 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
37e34 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
37e34 12d             | retval          res     1         ' Global success/fail return parameter
37e34 12d             | retval          res     1         ' Global success/fail return parameter
37e34 12d             | context_retval  res     1         ' Operation contextual return parameter
37e34 12d             | context_retval  res     1         ' Operation contextual return parameter
37e34 12d             | ' Device stuff
37e34 12d             | hdev_id         res     1+MAX_DEVICES
37e34 12d             | hdev_id         res     1+MAX_DEVICES
37e34 12d             | hdev_bcd        res     1
37e34 12d             | hdev_bcd        res     1
37e34 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
37e34 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
37e34 12d             | ' Keyboard/mouse stuff
37e34 12d             | hctrl_ep_addr   res     1
37e34 12d             | hctrl_ep_addr   res     1
37e34 12d             | hctrl_max_pkt   res     1
37e34 12d             | hctrl_max_pkt   res     1
37e34 12d             | hconfig_base    res     1
37e34 12d             | hconfig_base    res     1
37e34 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
37e34 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
37e34 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
37e34 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
37e34 12d             | hdev_class      res     1
37e34 12d             | hdev_class      res     1
37e34 12d             | hdev_subclass   res     1
37e34 12d             | hdev_subclass   res     1
37e34 12d             | hdev_protocol   res     1
37e34 12d             | hdev_protocol   res     1
37e34 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
37e34 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
37e34 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
37e34 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
37e34 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
37e34 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
37e34 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
37e34 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
37e34 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
37e34 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
37e34 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
37e34 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
37e34 12d             | if HAVE_MOUSE
37e34 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
37e34 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
37e34 12d             | end
37e34 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
37e34 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
37e34 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
37e34 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
37e34 12d             | hdev_ep_addr    res     1+MAX_DEVICES
37e34 12d             | hdev_ep_addr    res     1+MAX_DEVICES
37e34 12d             | hdev_out_addr   res     1
37e34 12d             | hdev_out_addr   res     1
37e34 12d             | 
37e34 12d             | if EMUPAD_MAX_PLAYER > 0
37e34 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
37e34 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
37e34 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
37e34 12d             | end
37e34 12d             | 
37e34 12d             | hreg_init_end
37e34 12d             | 
37e34 12d             | hidr_start
37e34 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
37e34 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
37e34 12d             | hidr_flags      res     1
37e34 12d             | hidr_flags      res     1
37e34 12d             | hidr_axis       res     3
37e34 12d             | hidr_axis       res     3
37e34 12d             | hidr_buttons    res     1
37e34 12d             | hidr_buttons    res     1
37e34 12d             | hidr_hats       res     1
37e34 12d             | hidr_hats       res     1
37e34 12d             | '' Above are actually useful values, 6 longs
37e34 12d             | hidr_id         res     1
37e34 12d             | hidr_id         res     1
37e34 12d             | hidr_state      res     1
37e34 12d             | hidr_state      res     1
37e34 12d             | hidr_size       res     1
37e34 12d             | hidr_size       res     1
37e34 12d             | hidr_count      res     1
37e34 12d             | hidr_count      res     1
37e34 12d             | hidr_offset     res     1
37e34 12d             | hidr_offset     res     1
37e34 12d             | hidr_usage_idx  res     1
37e34 12d             | hidr_usage_idx  res     1
37e34 12d             | hidr_lminmax    res     1
37e34 12d             | hidr_lminmax    res     1
37e34 12d             | hidr_pminmax    res     1
37e34 12d             | hidr_pminmax    res     1
37e34 12d             | hidr_type       res     1
37e34 12d             | hidr_type       res     1
37e34 12d             | hidr_end
37e34 12d             | 
37e34 12d             | ' Variables dependent on the system freqency
37e34 12d             | _var_64_lower_  res     1
37e34 12d             | _var_64_lower_  res     1
37e34 12d             | _var_64_upper_  res     1
37e34 12d             | _var_64_upper_  res     1
37e34 12d             | _12Mbps_        res     1
37e34 12d             | _12Mbps_        res     1
37e34 12d             | _1_5Mbps_       res     1
37e34 12d             | _1_5Mbps_       res     1
37e34 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
37e34 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
37e34 12d             | _1us_           res     1         ' 1us
37e34 12d             | _1us_           res     1         ' 1us
37e34 12d             | _10us_          res     1         ' 10us
37e34 12d             | _10us_          res     1         ' 10us
37e34 12d             | _33us_          res     1         ' 33us
37e34 12d             | _33us_          res     1         ' 33us
37e34 12d             | _txn_err_       res     1         ' 250us
37e34 12d             | _txn_err_       res     1         ' 250us
37e34 12d             | _500us_         res     1         ' 500us
37e34 12d             | _500us_         res     1         ' 500us
37e34 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
37e34 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
37e34 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
37e34 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
37e34 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
37e34 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
37e34 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
37e34 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
37e34 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
37e34 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
37e34 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
37e34 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
37e34 12d             | _preamble_wait_ res     1
37e34 12d             | _preamble_wait_ res     1
37e34 12d             | _1ms_           res     1         ' 1ms
37e34 12d             | _1ms_           res     1         ' 1ms
37e34 12d             | _2ms_           res     1         ' 2ms
37e34 12d             | _2ms_           res     1         ' 2ms
37e34 12d             | _suspend_wait_  res     1         ' 3ms
37e34 12d             | _suspend_wait_  res     1         ' 3ms
37e34 12d             | _4ms_           res     1         ' 4ms
37e34 12d             | _4ms_           res     1         ' 4ms
37e34 12d             | _xfer_wait_     res     1         ' 5ms
37e34 12d             | _xfer_wait_     res     1         ' 5ms
37e34 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
37e34 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
37e34 12d             | _reset_hold_    res     1         ' 15ms
37e34 12d             | _reset_hold_    res     1         ' 15ms
37e34 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
37e34 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
37e34 12d             | _21ms_          res     1         ' 21ms
37e34 12d             | _21ms_          res     1         ' 21ms
37e34 12d             | _100ms_         res     1         ' 100ms
37e34 12d             | _100ms_         res     1         ' 100ms
37e34 12d             | _500ms_         res     1         ' 500ms
37e34 12d             | _500ms_         res     1         ' 500ms
37e34 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
37e34 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
37e34 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
37e34 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
37e34 12d             | '------------------------------------------------------------------------------
37e34 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
37e34 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
37e34 12d             | _usb_d_ls_nco_  res     1
37e34 12d             | _usb_d_ls_nco_  res     1
37e34 12d             | _usb_h_fs_nco_  res     1
37e34 12d             | _usb_h_fs_nco_  res     1
37e34 12d             | _usb_d_fs_nco_  res     1
37e34 12d             | _usb_d_fs_nco_  res     1
37e34 12d             | '------------------------------------------------------------------------------
37e34 12d             | ' Scratch registers
37e34 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
37e34 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
37e34 12d             | htmp1           res     1
37e34 12d             | htmp1           res     1
37e34 12d             | htmp2           res     1
37e34 12d             | htmp2           res     1
37e34 12d             | htmp3           res     1
37e34 12d             | htmp3           res     1
37e34 12d             | hrep            res     1         ' Repeat count
37e34 12d             | hrep            res     1         ' Repeat count
37e34 12d             | hsave0          res     1         ' Subroutine parameter saves
37e34 12d             | hsave0          res     1         ' Subroutine parameter saves
37e34 12d             | hsave1          res     1
37e34 12d             | hsave1          res     1
37e34 12d             | hsave2          res     1
37e34 12d             | hsave2          res     1
37e34 12d             | isrtmp1         res     1
37e34 12d             | isrtmp1         res     1
37e34 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
37e34 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
37e34 12d             | hr0             res     1         ' Multi-purpose registers
37e34 12d             | hr0             res     1         ' Multi-purpose registers
37e34 12d             | hr1             res     1
37e34 12d             | hr1             res     1
37e34 12d             | hr2             res     1
37e34 12d             | hr2             res     1
37e34 12d             | hr3             res     1
37e34 12d             | hr3             res     1
37e34 12d             | hpar1           res     1         ' Routine entry/exit parameters
37e34 12d             | hpar1           res     1         ' Routine entry/exit parameters
37e34 12d             | hpar2           res     1
37e34 12d             | hpar2           res     1
37e34 12d             | hpar3           res     1
37e34 12d             | hpar3           res     1
37e34 12d             | hct2            res     1         ' Function response bus turn-around timer
37e34 12d             | hct2            res     1         ' Function response bus turn-around timer
37e34 12d             | hct3            res     1         ' Keyboard/mouse poll timer
37e34 12d             | hct3            res     1         ' Keyboard/mouse poll timer
37e34 12d             | mod_cnt         res     1         ' Used in idle loops
37e34 12d             | mod_cnt         res     1         ' Used in idle loops
37e34 12d             |                 fit     $1F0
37e34 12d             |                 org     $200
37e34 200             | hlut_start
37e34 200             | 
37e34 200             | '------------------------------------------------------------------------------
37e34 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
37e34 200             | ' settings to startup defaults.
37e34 200             | '------------------------------------------------------------------------------
37e34 200             | ' On entry:
37e34 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
37e34 200             | '------------------------------------------------------------------------------
37e34 200             | set_speed_full
37e34 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
37e38 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
37e3c 202 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
37e40 203 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
37e44 204             | '                ret                             wcz     ' Restore caller flags on exit
37e44 204             | 
37e44 204             | '------------------------------------------------------------------------------
37e44 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
37e44 204             | ' is a downstream hub connected (not yet implemented), the baud generator
37e44 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
37e44 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
37e44 204             | ' putting the smart pins into reset.
37e44 204             | '------------------------------------------------------------------------------
37e44 204             | ' On entry:
37e44 204             | ' On exit: CZ flags restored to caller states
37e44 204             | '------------------------------------------------------------------------------
37e44 204             | set_speed_low
37e44 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
37e48 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
37e4c 206 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
37e50 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
37e54 208 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
37e58 209 A2 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
37e5c 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
37e60 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
37e64 20c             | 
37e64 20c             | '------------------------------------------------------------------------------
37e64 20c             | ' Perform configuration stuff required when a device intitially connects.
37e64 20c             | '------------------------------------------------------------------------------
37e64 20c             | ' On entry:
37e64 20c             | ' On exit:
37e64 20c             | '------------------------------------------------------------------------------
37e64 20c             | on_connect
37e64 20c 02 84 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
37e68 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
37e6c 20e             | .retry
37e6c 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
37e70 20f 01 8C 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
37e74 210 02 8C 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
37e78 211 00 08 00 FF 
37e7c 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
37e80 213 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
37e84 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
37e88 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
37e8c 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
37e90 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
37e94 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37e98 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
37e9c 21a B1 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
37ea0 21b 4C 03 B0 FD |                 call    #poll_waitx
37ea4 21c 01 84 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
37ea8 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
37eac 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
37eb0 21f B8 FF 9F FD |                 jmp     #.retry
37eb4 220             | .get_dev_desc
37eb4 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
37eb8 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
37ebc 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
37ec0 223 A7 99 02 F6 |                 mov     hctwait, _1ms_
37ec4 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
37ec8 225 88 FB BF FD |                 call    #reset
37ecc 226 34 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
37ed0 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
37ed4 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
37ed8 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
37edc 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37ee0 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
37ee4 22c AC 99 02 F6 |                 mov     hctwait, _8ms_
37ee8 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
37eec 22e 04 00 00 FF 
37ef0 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
37ef4 230 34 FA BF FD |                 call    #calc_crc5
37ef8 231 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
37efc 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
37f00 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
37f04 234 F7 AD C2 FA |                 rdbyte  total_data, pb
37f08 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
37f0c 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
37f10 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37f14 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
37f18 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
37f1c 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
37f20 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
37f24 23c 9F 99 02 F6 |                 mov     hctwait, _500us_
37f28 23d C4 02 B0 FD |                 call    #poll_waitx
37f2c 23e 24 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
37f30 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
37f34 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
37f38 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
37f3c 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
37f40 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37f44 244 2D 00 64 5D |         if_nz   ret
37f48 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
37f4c 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
37f50 247 61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
37f54 248 61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
37f58 249 00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
37f5c 24a 09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
37f60 24b 02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
37f64 24c 56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
37f68 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
37f6c 24e 2C FB 9F CD |         if_b    jmp     #host_error
37f70 24f 14 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
37f74 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
37f78 251 2D EC 63 FD |                 call    pa
37f7c 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
37f80 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
37f84 254 2C EC 63 FD |                 jmp     pa
37f88 255             | 
37f88 255             | '------------------------------------------------------------------------------
37f88 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
37f88 255             | ' Status reporting is always in the function-to-host direction.
37f88 255             | '------------------------------------------------------------------------------
37f88 255             | ' On entry:
37f88 255             | '   PTRA - start address of the SETUP data in hub.
37f88 255             | '   PB - start address of the buffer/struct to be written to during the IN data
37f88 255             | '     stage.
37f88 255             | '   ep_addr_pid - device address, endpoint and CRC5.
37f88 255             | ' On exit:
37f88 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
37f88 255             | '     contains the count of data stage bytes actually received, which must
37f88 255             | '     always be <= the count requested.
37f88 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
37f88 255             | '     more specific USB operation error code.
37f88 255             | '------------------------------------------------------------------------------
37f88 255             | control_read
37f88 255 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
37f8c 256 F8 8F 03 F6 |                 mov     hpar2, ptra
37f90 257 F7 91 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
37f94 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
37f98 259             | .xfer_start
37f98 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
37f9c 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
37fa0 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37fa4 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
37fa8 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
37fac 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
37fb0 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
37fb4 260 61 00 00 FF 
37fb8 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
37fbc 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
37fc0 263             | .data
37fc0 263 56 B1 02 F6 |                 mov     pkt_data, total_data
37fc4 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
37fc8 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
37fcc 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
37fd0 267             | .nak_retry
37fd0 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
37fd4 268             | .in_retry
37fd4 268 BC F6 BF FD |                 call    #txn_in
37fd8 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
37fdc 26a 28 00 90 AD |         if_z    jmp     #.commit
37fe0 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
37fe4 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
37fe8 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
37fec 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
37ff0 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
37ff4 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
37ff8 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
37ffc 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
38000 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
38004 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
38008 275             | .commit
38008 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
3800c 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
38010 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
38014 278 5C 85 03 F6 |                 mov     hr0, pkt_cnt
38018 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
3801c 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
38020 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
38024 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
38028 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
3802c 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
38030 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
38034 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
38038 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
3803c 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
38040 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
38044 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
38048 285             | .pre_status
38048 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
3804c 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
38050 287 00 B0 06 F6 |                 mov     pkt_data, #0
38054 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
38058 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3805c 28a 61 00 00 FF 
38060 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
38064 28c             | .out_retry
38064 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
38068 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3806c 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
38070 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
38074 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
38078 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
3807c 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
38080 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
38084 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
38088 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
3808c 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
38090 297             | ' I've encountered transfer STALL, even though the data looks correct, and
38090 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
38090 297             | ' ControlRead() transfer gets things unstuck most of the time...
38090 297             | .xfer_retry
38090 297 AB 99 02 F6 |                 mov     hctwait, _xfer_wait_
38094 298 58 01 B0 FD |                 call    #poll_waitx
38098 299 8C F9 BF FD |                 call    #wait_txn_ok
3809c 29a C6 BD 02 F6 |                 mov     ep_addr_pid, hpar1
380a0 29b C7 F1 03 F6 |                 mov     ptra, hpar2
380a4 29c C8 EF 03 F6 |                 mov     pb, hpar3
380a8 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
380ac 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
380b0 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
380b4 2a0             | 
380b4 2a0             | '------------------------------------------------------------------------------
380b4 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
380b4 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
380b4 2a0             | ' the SETUP data struct is filled with the required values.
380b4 2a0             | '------------------------------------------------------------------------------
380b4 2a0             | ' On entry:
380b4 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
380b4 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
380b4 2a0             | '     stage.
380b4 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
380b4 2a0             | ' On exit:
380b4 2a0             | '   retval - used to convey the success/failure of each stage.
380b4 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
380b4 2a0             | '     more specific USB operation error code.
380b4 2a0             | '------------------------------------------------------------------------------
380b4 2a0             | control_write
380b4 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
380b8 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
380bc 2a2 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
380c0 2a3             | 
380c0 2a3 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
380c4 2a4 F8 8F 03 F6 |                 mov     hpar2, ptra
380c8 2a5 F7 91 03 F6 |                 mov     hpar3, pb
380cc 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
380d0 2a7             | .xfer_start
380d0 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
380d4 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
380d8 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
380dc 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
380e0 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
380e4 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
380e8 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
380ec 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
380f0 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
380f4 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
380f8 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
380fc 2b2             | .data
380fc 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
38100 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
38104 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
38108 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
3810c 2b6             | .out_retry
3810c 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
38110 2b7 88 F6 BF FD |                 call    #txn_out
38114 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38118 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
3811c 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
38120 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
38124 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
38128 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
3812c 2be             | .commit
3812c 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
38130 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
38134 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
38138 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
3813c 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
38140 2c3             | pre_status_in
38140 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
38144 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
38148 2c5             | .status_retry
38148 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
3814c 2c6 44 F5 BF FD |                 call    #txn_in
38150 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
38154 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
38158 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
3815c 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
38160 2cb 2D 00 64 AD |         if_z    ret
38164 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
38168 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3816c 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
38170 2cf             | '               ret                                     ' Caller must handle transfer retirement
38170 2cf             | 
38170 2cf             | '------------------------------------------------------------------------------
38170 2cf             | ' Execute an IN interrupt transaction.
38170 2cf             | '------------------------------------------------------------------------------
38170 2cf             | ' On entry:
38170 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
38170 2cf             | '   hpar2 - Address of the IN data buffer
38170 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
38170 2cf             | ' On exit:
38170 2cf             | '   retval - the result of the operation.
38170 2cf             | '   hpar3 - the count of IN data bytes actually received.
38170 2cf             | '------------------------------------------------------------------------------
38170 2cf             | do_int_in
38170 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
38174 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
38178 2d1 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3817c 2d2             | 
3817c 2d2 C8 71 33 F9 |                 getword htmp, hpar3, #0
38180 2d3 C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz
38184 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
38188 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
3818c 2d6             | .retry
3818c 2d6 C8 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
38190 2d7 00 F5 BF FD |                 call    #txn_in
38194 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
38198 2d9 1C 00 90 AD |         if_z    jmp     #.commit
3819c 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
381a0 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
381a4 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
381a8 2dd 54 00 B0 FD |                 call    #retry_wait
381ac 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
381b0 2df 18 00 90 AD |         if_z    jmp     #.post_ret
381b4 2e0 D4 FF 9F FD |                 jmp     #.retry
381b8 2e1             | .commit
381b8 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
381bc 2e2 C7 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
381c0 2e3 5C 85 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
381c4 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
381c8 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
381cc 2e6             | .post_ret
381cc 2e6 5C 91 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
381d0 2e7             | 
381d0 2e7             | 
381d0 2e7             | '------------------------------------------------------------------------------
381d0 2e7             | ' Resets the downstream hub port to FS
381d0 2e7             | '------------------------------------------------------------------------------
381d0 2e7             | dwnstream_reset
381d0 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
381d4 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
381d8 2e9             | 
381d8 2e9 0E 68 07 F4 |                 bitl    _usb_h_ls_nco_, #14
381dc 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
381e0 2eb 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
381e4 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
381e8 2ed A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
381ec 2ee A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
381f0 2ef             | 
381f0 2ef             | '------------------------------------------------------------------------------
381f0 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
381f0 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
381f0 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
381f0 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
381f0 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
381f0 2ef             | '------------------------------------------------------------------------------
381f0 2ef             | ' On entry:
381f0 2ef             | '   hctwait - wait interval in sysclocks.
381f0 2ef             | ' On exit:
381f0 2ef             | '------------------------------------------------------------------------------
381f0 2ef             | poll_waitx
381f0 2ef 1A 92 63 FD |                 getct   hct2
381f4 2f0 4C 93 6B FA |                 addct2  hct2, hctwait
381f8 2f1             | .wait
381f8 2f1 FF 25 CC FB |                 jnct2   #.wait
381fc 2f2 2D 00 64 FD |                 ret
38200 2f3             | 
38200 2f3             | '------------------------------------------------------------------------------
38200 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
38200 2f3             | '------------------------------------------------------------------------------
38200 2f3             | ' On entry:
38200 2f3             | '   retval - transaction response PID or error code.
38200 2f3             | ' On exit:
38200 2f3             | '------------------------------------------------------------------------------
38200 2f3             | retry_wait
38200 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
38204 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
38208 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3820c 2f6 14 00 90 AD |         if_z    jmp     #.nak
38210 2f7 9E 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
38214 2f8 D8 FF BF FD |                 call    #poll_waitx
38218 2f9             | .dec
38218 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
3821c 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
38220 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
38224 2fc             | .nak
38224 2fc 9D 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
38228 2fd C4 FF BF FD |                 call    #poll_waitx
3822c 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
38230 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
38234 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
38238 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
3823c 302 2D 00 64 FD |                 ret
38240 303             | 
38240 303             | host_reset
38240 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
38244 304 14 70 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
38248 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
38248 305 BD 01 05 FF 
3824c 306 00 70 1F F2 |                 cmp     htmp, ##168_000_000     wcz
38250 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
38254 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
38258 309             | ' Check to see if the system clock has been changed.
38258 309 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
3825c 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
38260 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
38264 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
38268 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3826c 30e 40 46 62 FD |                 dirl    dp
38270 30f             | 
38270 30f 28 02 64 FD |                 setq    #1
38274 310 80 00 80 FF 
38278 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
3827c 312 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
38280 313             | .enable
38280 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
38284 314 41 46 62 FD |                 dirh    dp
38288 315 1F 36 63 FD |                 waitx   _1us_
3828c 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
38290 317             | 
38290 317             |                 ' Handle Port protection enable and startup delay
38290 317 00 48 16 F2 |                 cmp     usb_enable_pin, #0      wc
38294 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
38298 319 1F 5E 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
3829c 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
382a0 31b 1F 5E 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
382a4 31c             | 
382a4 31c 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
382a8 31d 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
382ac 31e 38 EC A7 F9 |                 alti    pa, #%000_111_000
382b0 31f 00 00 04 F6 |                 mov     0-0, #0
382b4 320             | .regloop
382b4 320             | 
382b4 320             |                 'call #dev_reset ' TODO THINK ABOUT THIS
382b4 320             | 
382b4 320             | discon_entry
382b4 320 03 96 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
382b8 321             | 
382b8 321             |               
382b8 321             |         if HAVE_HIDPAD
382b8 321 D8 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
382bc 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
382c0 323 28 60 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
382c4 324 F7 01 68 FC |                 wrlong  #0,pb
382c8 325             |         end
382c8 325             |         if EMUPAD_MAX_PLAYER > 0
382c8 325             |         end
382c8 325             | 
382c8 325             |                 ' Fall through to disconnected loop
382c8 325             | 
382c8 325             | '-----------------------------------------------------------------------------------------------------------------
382c8 325             | ' Device connect handling (Section 7.1.7.3).
382c8 325             | '-----------------------------------------------------------------------------------------------------------------
382c8 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
382c8 325             | ' device to connect (Section 7.1.7.3).
382c8 325             | '-----------------------------------------------------------------------------------------------------------------
382c8 325             | disconnected
382c8 325 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
382cc 326 2C 87 0B F2 |                 cmp     hr1, save_sysclk        wz
382d0 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
382d4 328 03 86 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
382d8 329 1F 86 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
382dc 32a             |         if ACTIVITY_LED >= 0
382dc 32a             |         end
382dc 32a 22 A7 82 FA |                 rqpin   urx, dm
382e0 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
382e4 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
382e8 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
382ec 32e             | .se1_test
382ec 32e B0 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
382f0 32f FC FE BF FD |                 call    #poll_waitx
382f4 330 22 A7 82 FA |                 rqpin   urx, dm
382f8 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
382fc 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
38300 333 B0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
38304 334             | .se1            'SE1 is a fatal error condition
38304 334 B0 99 02 F6 |                 mov     hctwait, _100ms_
38308 335 E4 FE BF FD |                 call    #poll_waitx
3830c 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
38310 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
38314 338             | .connect_test                                           ' Test lines until stable J/K state seen
38314 338 1F 60 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
38318 339 22 A7 82 FA |                 rqpin   urx, dm
3831c 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
38320 33b 90 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
38324 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
38328 33d             | connected
38328 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
3832c 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
38330 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
38334 340 7C FF 9F 5D |         if_nz   jmp     #discon_entry
38338 341             | .set_pulse
38338 341 1A 64 63 FD |                 getct   _pulse_time_
3833c 342 B1 65 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
38340 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
38340 343             | ' of 1ms and make a correction, if necessary.
38340 343             | '                mov     htmp, _1ms_
38340 343             | '                subs    htmp, iframe_delta
38340 343             | '                adds    _frame1ms_clks_, htmp
38340 343             | '                debug(udec(_frame1ms_clks_))
38340 343             | 
38340 343             |                 ' Fall through to idle/processing loop
38340 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
38344 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
38348 345             | 
38348 345             | hidle
38348 345 22 A7 82 FA |                 rqpin   urx, dm
3834c 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
38350 347 98 00 90 CD |         if_c    jmp     #.se0_test
38354 348 24 06 70 FD |                 pollct3                         wc
38358 349 68 00 90 3D |         if_nc   jmp     #.nopoll
3835c 34a 1A 94 63 FD |                 getct   hct3
38360 34b A7 95 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
38364 34c             | 
38364 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
38368 34d 00 70 E3 F8 |                 getbyte htmp
3836c 34e             | 
3836c 34e 09 70 0F F2 |                 cmp     htmp, #HUB_READY        wz
38370 34f 88 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
38374 350 40 00 90 AD |         if_z    jmp     #.poll
38378 351             | 
38378 351             |         if _HAVE_GAMEPAD
38378 351 06 70 0F F2 |                 cmp     htmp, #HID_READY        wz
3837c 352 08 70 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
38380 353 07 70 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
38384 354 10 16 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
38388 355 2C 00 90 AD |         if_z    jmp     #.poll
3838c 356             |         end
3838c 356             | 
3838c 356             |         if HAVE_MOUSE
3838c 356 04 70 0F F2 |                 cmp     htmp, #M_READY          wz
38390 357 34 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
38394 358 20 00 90 AD |         if_z    jmp     #.poll
38398 359             |         end
38398 359             | 
38398 359 03 70 0F F2 |                 cmp     htmp, #KB_READY         wz
3839c 35a 9C 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
383a0 35b 14 00 90 AD |         if_z    jmp     #.poll
383a4 35c             | 
383a4 35c 05 70 0F F2 |                 cmp     htmp, #KBM_READY        wz
383a8 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
383ac 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
383b0 35f 9C 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
383b4 360             |         if HAVE_MOUSE
383b4 360 34 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
383b8 361             |         else
383b8 361             |         end
383b8 361             | 
383b8 361             | .poll
383b8 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
383bc 362 2D EC 63 FD |                 call    pa
383c0 363             | .skip_poll
383c0 363             | 
383c0 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
383c4 364             | 
383c4 364             | .nopoll
383c4 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
383c8 365 44 00 90 AD |         if_z    jmp     #hsuspend
383cc 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
383d0 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
383d4 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
383d8 369 1A 84 63 FD |                 getct   hr0
383dc 36a B2 85 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
383e0 36b             |         if ACTIVITY_LED >= 0
383e0 36b             |         end
383e0 36b 1A 64 63 3D |         if_ae   getct   _pulse_time_
383e4 36c B1 65 03 31 |         if_ae   add     _pulse_time_, _500ms_
383e8 36d 5C FF 9F FD |                 jmp     #hidle
383ec 36e             | ' Check for extended SE0 state on the bus
383ec 36e             | .se0_test
383ec 36e A7 99 02 F6 |                 mov     hctwait, _1ms_
383f0 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
383f4 370 22 A7 82 FA |                 rqpin   urx, dm
383f8 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
383fc 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
38400 373 24 F6 BF FD |                 call    #wait_txn_ok
38404 374 00 00 80 FF 
38408 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
3840c 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
3840c 376 30 FE 9F FD |                 jmp     #host_reset                     ' Device disconnected
38410 377             | 
38410 377             | hsuspend
38410 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
38414 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
38418 379 1F 52 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
3841c 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
38420 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
38424 37c 00 96 07 F6 |                 mov     mod_cnt, #0
38428 37d             | 
38428 37d             |                 ' Fall through to resume wait loop
38428 37d             | 
38428 37d             | hwait_resume
38428 37d 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
3842c 37e 02 86 47 F0 |                 shr     hr1, #2
38430 37f 1F 86 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
38434 380             |         if ACTIVITY_LED >= 0
38434 380             |         end
38434 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
38438 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
3843c 382 14 70 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
38440 383 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
38444 384 18 00 90 AD |         if_z    jmp     #.resume
38448 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
3844c 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
38450 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
38454 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
38458 389 22 6D 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
3845c 38a 22 69 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
38460 38b             | .resume
38460 38b 22 05 28 FC |                 wypin   #OUT_K, dm
38464 38c 1F 5C 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
38468 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
3846c 38e A2 71 03 F6 |                 mov     htmp, _ip_delay_ls_
38470 38f 01 70 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
38474 390 1F 70 63 FD |                 waitx   htmp
38478 391 22 07 28 FC |                 wypin   #OUT_J, dm
3847c 392 01 70 47 F0 |                 shr     htmp, #1
38480 393 1F 70 63 FD |                 waitx   htmp
38484 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
38488 395 1A 92 62 FD |                 getct   iframe_ct_base
3848c 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
38490 397 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
38494 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
38498 399 AA 99 02 F6 |                 mov     hctwait, _4ms_
3849c 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
384a0 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
384a4 39c             | 
384a4 39c             | '------------------------------------------------------------------------------
384a4 39c             | ' Send preamble to enable low-speed HUB ports
384a4 39c             | '------------------------------------------------------------------------------
384a4 39c             | ' On entry:
384a4 39c             | ' On exit:
384a4 39c             | '   USB baud rate set to low-speed
384a4 39c             | '------------------------------------------------------------------------------
384a4 39c             | utx_pre
384a4 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
384a8 39d 40 46 62 FD |                 dirl    dp
384ac 39e 28 02 64 FD |                 setq    #1
384b0 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
384b4 3a0 58 44 62 FD |                 drvl    dm
384b8 3a1 59 46 62 FD |                 drvh    dp
384bc 3a2             | 
384bc 3a2 1E 00 00 FF 
384c0 3a3 80 70 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
384c4 3a4             | 
384c4 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
384c8 3a5 01 70 57 F0 |                 shr     htmp, #1        wc
384cc 3a6 28 02 64 3D |         if_nc   setq    #1
384d0 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
384d4 3a8 1F 4C 63 FD |                 waitx   _preamble_wait_
384d8 3a9             | .l1
384d8 3a9             | 
384d8 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
384dc 3aa 40 46 62 FD |                 dirl    dp
384e0 3ab 28 02 64 FD |                 setq    #1
384e4 3ac 80 00 80 FF 
384e8 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
384ec 3ae 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
384f0 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
384f4 3b0 41 46 62 FD |                 dirh    dp
384f8 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
384fc 3b2             | 
384fc 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
38500 3b3 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
38504 3b4 A2 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
38508 3b5             | 
38508 3b5             | hlut_end
38508 3b5             |                 fit     $400
38508 3b5             |                 orgh
38508                 | if OVERLAP_MEMORY
38508                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
38508                 | end
38508                 | '------------------------------------------------------------------------------
38508                 | ' Routines called from cog space.
38508                 | '------------------------------------------------------------------------------
38508                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
38508                 | '------------------------------------------------------------------------------
38508                 | 
38508                 | '------------------------------------------------------------------------------
38508                 | ' USB host cog initialization.
38508                 | '------------------------------------------------------------------------------
38508                 | usb_host_init
38508                 |                 ' Initialize buffer pointers
38508                 |         if OVERLAP_MEMORY
38508                 |         else
38508     40 15 B0 FE |                 loc     pb, #hid_descr
3850c                 |         end
3850c     F7 4B 02 F6 |                 mov     hid_descr_p, pb
38510                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
38510                 |                 {
38510                 |                 }
38510                 |         
38510                 |                 {
38510                 |                 }
38510                 |                 'loc     pb,#hkbd_report
38510                 |                 'mov     hkbd_report_p,pb
38510                 | 
38510     08 1D B0 FE |                 loc     pb, #hub_descr
38514     F7 4D 02 F6 |                 mov     hub_descr_p, pb
38518     1D 1D B0 FE |                 loc     pb, #urx_buff
3851c     F7 4F 02 F6 |                 mov     urx_buff_p, pb
38520     95 1D B0 FE |                 loc     pb, #dev_desc_buff
38524     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
38528     9F 1D B0 FE |                 loc     pb, #con_desc_buff
3852c     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
38530     18 15 B0 FE |                 loc     pb, #usb_cache_start
38534     F7 55 02 F6 |                 mov     cache_start_p, pb
38538     E9 1C B0 FE |                 loc     pb, #usb_cache_end
3853c     F7 57 02 F6 |                 mov     cache_end_p, pb
38540                 | 
38540                 |         if ERROR_LED >= 0
38540                 |         end
38540                 | 
38540                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
38540                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
38540                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
38540                 | ' Configure and enable the Serial Host USB port.
38540     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
38544                 | 
38544                 | '------------------------------------------------------------------------------
38544                 | ' Timing calculations happen before any interrupt(s) are enabled.
38544                 | '------------------------------------------------------------------------------
38544                 | ' On entry:
38544                 | '   htmp - current CLKFREQ value.
38544                 | '------------------------------------------------------------------------------
38544                 | hinit_usb_timings
38544                 | '                getct   htmp2
38544     B8 59 02 F6 |                 mov     save_sysclk, htmp
38548     8D 5B 80 FF 
3854c     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
38550     18 30 63 FD |                 getqx   _12Mbps_
38554     10 30 57 F0 |                 shr     _12Mbps_, #16           wc
38558     00 30 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
3855c     03 6C 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
38560     0E 6C 67 F0 |                 shl     _usb_h_fs_nco_, #14
38564     98 6D 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
38568     01 6E 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
3856c     0E 6E 67 F0 |                 shl     _usb_d_fs_nco_, #14
38570     98 6F 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
38574     98 33 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
38578     03 32 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
3857c     02 68 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
38580     0E 68 67 F0 |                 shl     _usb_h_ls_nco_, #14
38584     99 69 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
38588     99 6B 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
3858c     80 00 00 FF 
38590     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
38594     18 2C 63 FD |                 getqx   _var_64_lower_
38598     19 2E 63 FD |                 getqy   _var_64_upper_
3859c     28 2C 63 FD |                 setq    _var_64_lower_
385a0     65 CD 1D FF 
385a4     00 2E 27 FD |                 qfrac   _var_64_upper_, ##_1b
385a8     18 34 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
385ac     01 00 00 FF 
385b0     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
385b4     18 2C 63 FD |                 getqx   _var_64_lower_
385b8     19 2E 63 FD |                 getqy   _var_64_upper_
385bc     28 2C 63 FD |                 setq    _var_64_lower_
385c0     A1 07 00 FF 
385c4     40 2E 27 FD |                 qfrac   _var_64_upper_, ##_1m
385c8     18 36 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
385cc     9B 7B 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
385d0     09 36 57 F0 |                 shr     _1us_, #9               wc
385d4     00 36 27 F1 |                 addx    _1us_, #0                       ' Round to final value
385d8     0A 7A 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
385dc     18 38 63 FD |                 getqx   _10us_
385e0     09 38 57 F0 |                 shr     _10us_, #9              wc
385e4     00 38 27 F1 |                 addx    _10us_, #0                      ' 10us
385e8     21 7A 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
385ec     18 3A 63 FD |                 getqx   _33us_
385f0     09 3A 57 F0 |                 shr     _33us_, #9              wc
385f4     00 3A 27 F1 |                 addx    _33us_, #0                      ' 33us
385f8     FA 7A 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
385fc     18 3C 63 FD |                 getqx   _txn_err_
38600     09 3C 57 F0 |                 shr     _txn_err_, #9           wc
38604     00 3C 27 F1 |                 addx    _txn_err_, #0                   ' 250us
38608     F4 7B 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
3860c     18 3E 63 FD |                 getqx   _500us_
38610     09 3E 57 F0 |                 shr     _500us_, #9             wc
38614     00 3E 27 F1 |                 addx    _500us_, #0                     ' 500us
38618     01 00 00 FF 
3861c     9A 7A 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
38620     18 40 63 FD |                 getqx   _txn_ok_ls_
38624     09 40 57 F0 |                 shr     _txn_ok_ls_, #9         wc
38628     00 40 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
3862c     01 00 00 FF 
38630     52 7B 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
38634     18 42 63 FD |                 getqx   _txn_ok_fs_
38638     09 42 57 F0 |                 shr     _txn_ok_fs_, #9         wc
3863c     00 42 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
38640     9A 45 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
38644     05 00 00 FF 
38648     80 44 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
3864c     10 44 57 F0 |                 shr     _ip_delay_ls_, #16      wc
38650     00 44 27 F1 |                 addx    _ip_delay_ls_, #0
38654     9A 49 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
38658     1C 00 00 FF 
3865c     C0 49 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
38660     10 48 57 F0 |                 shr     _tat_wait_ls_, #16      wc
38664     00 48 27 F1 |                 addx    _tat_wait_ls_, #0
38668     9A 47 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
3866c     00 00 00 FF 
38670     4E 47 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
38674     10 46 57 F0 |                 shr     _ip_delay_fs_, #16      wc
38678     00 46 27 F1 |                 addx    _ip_delay_fs_, #0
3867c     9A 4B 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
38680     04 00 00 FF 
38684     23 4B 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
38688     10 4A 57 F0 |                 shr     _tat_wait_fs_, #16      wc
3868c     00 4A 27 F1 |                 addx    _tat_wait_fs_, #0
38690     8D 5B 00 FF 
38694     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
38698     18 4C 63 FD |                 getqx   _preamble_wait_
3869c     08 4C 87 F1 |                 sub     _preamble_wait_,# 9 - 1
386a0     01 00 00 FF 
386a4     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
386a8     18 2C 63 FD |                 getqx   _var_64_lower_
386ac     19 2E 63 FD |                 getqy   _var_64_upper_
386b0     28 2C 63 FD |                 setq    _var_64_lower_
386b4     01 00 00 FF 
386b8     E8 2F 27 FD |                 qfrac   _var_64_upper_, ##_1thou
386bc     18 4E 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
386c0     09 4E 57 F0 |                 shr     _1ms_, #9               wc
386c4     00 4E 27 F1 |                 addx    _1ms_, #0                       ' 1ms
386c8     FF FF 7F FF 
386cc     F2 67 07 F6 |                 mov     _frame1ms_clks_, ##-14
386d0     A7 67 43 F1 |                 adds    _frame1ms_clks_, _1ms_
386d4     A7 51 03 F6 |                 mov     _2ms_, _1ms_
386d8     01 50 67 F0 |                 shl     _2ms_, #1                       ' 2ms
386dc     A7 53 03 F6 |                 mov     _suspend_wait_, _1ms_
386e0     A7 53 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
386e4     A7 55 03 F6 |                 mov     _4ms_, _1ms_
386e8     02 54 67 F0 |                 shl     _4ms_, #2                       ' 4ms
386ec     AA 57 03 F6 |                 mov     _xfer_wait_, _4ms_
386f0     A7 57 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
386f4     AB 5B 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
386f8     AD 5D 03 F6 |                 mov     _resume_hold_, _reset_hold_
386fc     02 5C 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
38700     AE 61 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
38704     01 60 67 F0 |                 shl     _100ms_, #1                     ' 40ms
38708     A7 59 03 F6 |                 mov     _8ms_, _1ms_
3870c     03 58 67 F0 |                 shl     _8ms_, #3                       ' 8ms
38710     01 5A 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
38714     AD 61 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
38718     AB 5B 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
3871c     AB 5F 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
38720     02 5E 67 F0 |                 shl     _21ms_, #2                      ' 20ms
38724     A7 5F 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
38728     B0 63 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
3872c     01 60 67 F0 |                 shl     _100ms_, #1                     ' 100ms
38730     03 62 67 F0 |                 shl     _500ms_, #3                     ' 400ms
38734     B0 63 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
38738                 | '        _ret_   mov     _1sec_, save_sysclk
38738                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
38738                 | '                ret
38738                 | {
38738                 | }
38738                 | 
38738                 | '------------------------------------------------------------------------------
38738                 | ' Parse a configuration descriptor chain to see if the device is a recognized
38738                 | ' one. If it is, start the task progression that will configure the device for
38738                 | ' use.
38738                 | '------------------------------------------------------------------------------
38738                 | ' On entry:
38738                 | '   hconfig_base - start address of the cached config descriptor chain.
38738                 | ' On exit:
38738                 | '------------------------------------------------------------------------------
38738                 | hparse_con_desc
38738     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
3873c     82 71 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
38740     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
38744     4E 70 FF F9 |                 movbyts htmp,#%%1032
38748     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
3874c                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
3874c                 | 
3874c     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
38750     6E ED 03 F1 |                 add     pa, hconfig_base
38754     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
38758                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
38758                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
38758                 | ' that defines a keyboard and/or mouse.
38758     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
3875c                 | .next_intf
3875c     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
38760     BC 01 90 3D |         if_ae   jmp     #hset_config
38764     6E F3 03 F6 |                 mov     ptrb, hconfig_base
38768     75 F3 03 F1 |                 add     ptrb, hnext_desc
3876c     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
38770     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
38774     0C 00 90 AD |         if_z    jmp     #.intf
38778     80 71 C7 FA |                 rdbyte  htmp, ptrb
3877c     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
38780     D8 FF 9F FD |                 jmp     #.next_intf
38784                 | .intf
38784     00 8E 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
38788     00 90 07 F6 |                 mov     hpar3, #0
3878c     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
38790     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
38794     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
38798     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
3879c                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
3879c                 | 
3879c                 | .endp
3879c     80 71 C7 FA |                 rdbyte  htmp, ptrb
387a0     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
387a4     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
387a8     78 00 90 3D |         if_ae   jmp     #.get_device
387ac     6E F3 03 F6 |                 mov     ptrb, hconfig_base
387b0     75 F3 03 F1 |                 add     ptrb, hnext_desc
387b4     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
387b8     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
387bc     64 00 90 AD |         if_z    jmp     #.get_device
387c0     05 70 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
387c4     04 00 90 AD |         if_z    jmp     #.get_ep
387c8     D0 FF 9F FD |                 jmp     #.endp
387cc                 | .get_ep
387cc     82 87 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
387d0     07 86 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
387d4     0F 86 67 F0 |                 shl     hr1, #8 + 7
387d8     6C 71 03 F6 |                 mov     htmp, hctrl_ep_addr
387dc     3F 00 00 FF 
387e0     00 71 07 F5 |                 and     htmp, ##ADDR_MASK
387e4     C3 71 43 F5 |                 or      htmp, hr1                       ' endpoint address
387e8     00 8E 0F F2 |                 cmp     hpar2, #0               wz
387ec     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
387f0     00 90 0F F2 |                 cmp     hpar3, #0               wz
387f4     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
387f8     A0 FF 9F FD |                 jmp     #.endp
387fc                 | .in_ep
387fc     B8 8F 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
38800     84 89 C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
38804                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
38804     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
38808     C2 89 DB F8 |                 setbyte hr2, hr0, #3
3880c     8C FF 9F FD |                 jmp     #.endp
38810                 | .out_ep
38810     B8 91 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
38814     84 8B C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
38818                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
38818     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
3881c     C2 8B DB F8 |                 setbyte hr3, hr0, #3
38820     78 FF 9F FD |                 jmp     #.endp
38824                 | 
38824                 | .get_device
38824     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
38828     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
3882c     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
38830     68 00 90 AD |         if_z    jmp     #.gamepad
38834     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
38838     AC 00 90 AD |         if_z    jmp     #.hub
3883c     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
38840     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
38844     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
38848     00 E6 0E A2 |         if_z    cmp     hdev_protocol, #INTF_PROTO_NONE     wz
3884c     4C 00 90 AD |         if_z    jmp     #.gamepad
38850     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
38854     04 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
38858                 | .keyboard
38858     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
3885c                 |         if HAVE_MOUSE
3885c     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
38860                 |         else
38860                 |         end
38860     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
38864     F4 FE 9F 5D |         if_nz   jmp     #.next_intf
38868     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3886c     C4 71 FA F8 |                 getbyte kb_interval, hr2, #3
38870     C4 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
38874     C7 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
38878                 |                 'debug(udec(kb_intf_num))
38878                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
38878     E0 FE 9F FD |                 jmp     #.next_intf
3887c                 | if HAVE_MOUSE
3887c                 | .mouse
3887c     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
38880     D8 FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
38884     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
38888     D0 FE 9F 5D |         if_nz   jmp     #.next_intf
3888c     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
38890                 |                 'getbyte ms_interval, hr2, #3
38890     C4 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
38894     C7 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
38898                 |                 'debug(udec(kb_intf_num))
38898                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
38898     C0 FE 9F FD |                 jmp     #.next_intf
3889c                 | end
3889c                 | .gamepad
3889c     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
388a0     C7 71 63 F5 |                 xor     htmp, hpar2
388a4     3F 00 00 FF 
388a8     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
388ac     AC FE 9F AD |         if_z    jmp     #.next_intf
388b0                 |         if HAVE_MOUSE
388b0     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
388b4     C7 71 63 F5 |                 xor     htmp, hpar2
388b8     3F 00 00 FF 
388bc     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
388c0     98 FE 9F AD |         if_z    jmp     #.next_intf
388c4                 |         end
388c4     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
388c8     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
388cc     8C FE 9F 5D |         if_nz   jmp     #.next_intf
388d0                 | 
388d0     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
388d4     C4 7B FA F8 |                 getbyte gp_interval, hr2, #3
388d8     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
388dc     C7 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
388e0     C8 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
388e4                 |                 'debug(udec(gp_intf_num))
388e4                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
388e4     74 FE 9F FD |                 jmp     #.next_intf
388e8                 | .hub
388e8     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
388ec     6C FE 9F 5D |         if_nz   jmp     #.next_intf
388f0     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
388f4     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
388f8     60 FE 9F 5D |         if_nz   jmp     #.next_intf
388fc     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
38900     58 FE 9F 5D |         if_nz   jmp     #.next_intf
38904     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
38908     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
3890c     C7 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
38910     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
38914     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
38918     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
3891c                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
3891c     3C FE 9F FD |                 jmp     #.next_intf
38920                 | 
38920                 | '------------------------------------------------------------------------------
38920                 | ' If a newly-connected device is recognized, do whatever is needed to configure
38920                 | ' it according to its function, or functions. In the case of this boot protocol
38920                 | ' keyboard/mouse class driver:
38920                 | ' - SetConfiguration(config_num)
38920                 | ' - SetProtocol(boot)
38920                 | ' - SetIdle(indefinite)
38920                 | ' - Enter the device interrupt IN polling task stage.
38920                 | '------------------------------------------------------------------------------
38920                 | ' On entry:
38920                 | ' On exit:
38920                 | '------------------------------------------------------------------------------
38920                 | hset_config
38920                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
38920                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
38920     02 74 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
38924     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
38928     00 00 0C F2 |                 cmp     0-0, #0                 wz
3892c     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
38930                 |         if HAVE_MOUSE
38930     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
38934                 |         end
38934     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
38938     4C 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
3893c                 | .set_config
3893c     6C 0E D0 FE |                 loc     ptra, #set_config
38940     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
38944     6E ED 03 F1 |                 add     pa, hconfig_base
38948     F6 8D C3 FA |                 rdbyte  hpar1, pa
3894c     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
38950     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
38954     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
38958     A0 02 A0 FD |                 call    #control_write
3895c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38960     2D 00 64 5D |         if_nz   ret
38964                 | .kbd_config
38964     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
38968     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
3896c                 | 
3896c     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
38970     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
38974     3F 00 00 FF 
38978     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3897c     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
38980                 | 
38980     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
38984     34 0E D0 FE |                 loc     ptra, #set_protocol
38988     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
3898c     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
38990     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
38994     A0 02 A0 FD |                 call    #control_write
38998     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3899c     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
389a0     E4 02 90 5D |         if_nz   jmp     #.notify_client
389a4     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
389a8     37 8F E3 F8 |                 getbyte hpar2, kb_intf_num, #0
389ac     30 03 B0 FD |                 call    #hset_idle
389b0                 |                 'cmp     retval, #PID_ACK        wz
389b0                 |         'if_nz   mov     hkbd_ep_addr, #0
389b0                 |         'if_nz   jmp     #.notify_client
389b0     A8 99 02 F6 |                 mov     hctwait, _2ms_
389b4     EF 02 A0 FD |                 call    #poll_waitx
389b8     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
389bc     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
389c0     90 17 90 FE |                 loc     pa, #hkbd_led_rep
389c4     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
389c8     2C 03 B0 FD |                 call    #hset_kbdled_report
389cc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
389d0     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
389d4     B0 02 90 5D |         if_nz   jmp     #.notify_client
389d8     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
389dc     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
389e0     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
389e4     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
389e8     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
389ec     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
389f0     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
389f4     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
389f8     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
389fc     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
38a00     03 74 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
38a04                 |         if !!HAVE_MOUSE
38a04                 |         end
38a04                 | 
38a04                 | .mouse_config
38a04                 | if HAVE_MOUSE
38a04     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
38a08     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
38a0c     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
38a10     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
38a14     3F 00 00 FF 
38a18     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
38a1c     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
38a20                 | 
38a20                 |                 debug("mouse passed addr check")
38a20                 | 
38a20     B0 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
38a24     00 00 80 FF 
38a28     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
38a2c     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
38a30     1B 01 A0 FD |                 call    #get_hid_descr_buffer
38a34     55 02 A0 FD |                 call    #control_read
38a38     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38a3c     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
38a40     44 02 90 5D |         if_nz   jmp     #.notify_client
38a44     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
38a48     56 01 00 F6 |                 mov     0-0, total_data
38a4c     1B 01 A0 FD |                 call    #get_hid_descr_buffer
38a50                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
38a50                 | 
38a50     35 71 E3 F8 |                 getbyte htmp, ms_intf_num, #0
38a54     64 0D D0 FE |                 loc     ptra, #set_protocol
38a58     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
38a5c     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
38a60     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
38a64     A0 02 A0 FD |                 call    #control_write
38a68     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38a6c     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
38a70     14 02 90 5D |         if_nz   jmp     #.notify_client
38a74                 |                 debug("mouse passed SetProtocol")
38a74     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
38a78     35 8F E3 F8 |                 getbyte hpar2, ms_intf_num, #0
38a7c     60 02 B0 FD |                 call    #hset_idle
38a80                 |                 'cmp     retval, #PID_ACK        wz
38a80                 |         'if_nz   mov     hmouse_ep_addr, #0
38a80                 |         'if_nz   jmp     #.notify_client
38a80                 |                 debug("mouse passed SetIdle")
38a80     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
38a84     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
38a88     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
38a8c     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
38a90     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
38a94     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
38a98     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
38a9c     79 75 03 F6 |                 mov     htmp2, hkbd_ep_addr
38aa0     7A 75 63 F5 |                 xor     htmp2, hmouse_ep_addr
38aa4     3F 00 00 FF 
38aa8     00 75 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
38aac     05 74 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
38ab0     04 74 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
38ab4     D0 01 90 FD |                 jmp     #.notify_client
38ab8                 | end
38ab8                 | .gamepad_config
38ab8                 | if _HAVE_GAMEPAD
38ab8     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
38abc     00 00 0C F2 |                 cmp     0-0, #0                 wz
38ac0     58 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
38ac4     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
38ac8     00 70 03 F6 |                 mov     htmp, 0-0
38acc     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
38ad0     3F 00 00 FF 
38ad4     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
38ad8     40 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
38adc                 | 
38adc     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
38ae0     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
38ae4     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
38ae8     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
38aec     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
38af0     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
38af4     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
38af8     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
38afc     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
38b00     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
38b04     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
38b08     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
38b0c     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
38b10     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
38b14                 | 
38b14                 |                 if EMUPAD_MAX_PLAYER > 0
38b14                 |                 
38b14                 | .rule_loop           
38b14                 |                 end
38b14                 | 
38b14     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
38b18     5C 00 90 AD |         if_e    jmp     #.xinput
38b1c     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
38b20     00 70 03 F6 |                 mov     htmp,0-0
38b24     01 A6 02 FF 
38b28     68 70 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
38b2c     7C 00 90 AD |         if_e    jmp     #.ps3
38b30                 | 
38b30     A0 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
38b34     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
38b38     00 00 80 5F 
38b3c     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
38b40     03 00 80 AF 
38b44     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
38b48     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
38b4c     1B 01 A0 FD |                 call    #get_hid_descr_buffer
38b50     55 02 A0 FD |                 call    #control_read
38b54     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38b58     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
38b5c     00 00 04 56 |         if_nz   mov     0-0, #0
38b60     24 01 90 5D |         if_nz   jmp     #.notify_client
38b64     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
38b68     56 01 00 F6 |                 mov     0-0, total_data
38b6c     1B 01 A0 FD |                 call    #get_hid_descr_buffer
38b70                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
38b70                 | 
38b70     06 74 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
38b74     10 01 90 FD |                 jmp     #.notify_client
38b78                 | .xinput
38b78     B4 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
38b7c     2D EF 03 F6 |                 mov     pb,hdev_port
38b80     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
38b84     03 EE 27 F3 |                 fle     pb,#3
38b88     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
38b8c     02 EF 47 FC |                 wrbyte  pb, ptra[2]
38b90                 | 
38b90     03 B0 06 F6 |                 mov     pkt_data, #3
38b94     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
38b98     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
38b9c     5A 00 A0 FD |                 call    #txn_out
38ba0     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
38ba4                 | 
38ba4     07 74 07 F6 |                 mov     htmp2, #XINPUT_READY
38ba8     DC 00 90 FD |                 jmp     #.notify_client
38bac                 | .ps3
38bac     50 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
38bb0     2D EF 03 F6 |                 mov     pb,hdev_port
38bb4     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
38bb8     04 EE 27 F3 |                 fle     pb,#4
38bbc     F7 EF C3 F9 |                 decod   pb
38bc0     09 EF 47 FC |                 wrbyte  pb, ptra[9]
38bc4                 | 
38bc4     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
38bc8     00 0C D0 FE |                 loc     ptra, #set_report
38bcc     01 00 80 FF 
38bd0     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
38bd4     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
38bd8     03 61 5C FC |                 wrword  #48, ptra[wLength]
38bdc     20 0C B0 FE |                 loc     pb, #ps3_command_buff
38be0     A0 02 A0 FD |                 call    #control_write
38be4                 | 
38be4     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
38be8     E0 0B D0 FE |                 loc     ptra, #set_report
38bec     01 00 80 FF 
38bf0     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
38bf4     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
38bf8     03 09 5C FC |                 wrword  #4, ptra[wLength]
38bfc     FC 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
38c00     A0 02 A0 FD |                 call    #control_write
38c04     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
38c08     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
38c0c     00 00 04 56 |         if_nz   mov     0-0, #0
38c10     74 00 90 5D |         if_nz   jmp     #.notify_client
38c14                 | 
38c14     08 74 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
38c18     6C 00 90 FD |                 jmp     #.notify_client
38c1c                 | end
38c1c                 | 
38c1c                 | .hub_config
38c1c     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
38c20     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
38c24     77 71 03 F6 |                 mov     htmp, hhub_ep_addr
38c28     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
38c2c     3F 00 00 FF 
38c30     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
38c34     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
38c38                 | 
38c38     A0 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
38c3c     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
38c40     26 EF 03 F6 |                 mov     pb, hub_descr_p
38c44     55 02 A0 FD |                 call    #control_read
38c48     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38c4c     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
38c50     34 00 90 5D |         if_nz   jmp     #.notify_client
38c54                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
38c54                 | 
38c54     26 F1 03 F6 |                 mov     ptra, hub_descr_p
38c58     02 77 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
38c5c     07 76 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
38c60                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
38c60                 | .pwr_loop
38c60     80 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
38c64     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
38c68     02 77 57 FC |                 wrword  htmp3, ptra[wIndex]
38c6c     A0 02 A0 FD |                 call    #control_write
38c70     FB 77 6F FB |                 djnz    htmp3, #.pwr_loop
38c74                 | 
38c74     B1 99 02 F6 |                 mov     hctwait, _500ms_
38c78     B0 99 02 F1 |                 add     hctwait, _100ms_
38c7c     EF 02 A0 FD |                 call    #poll_waitx
38c80                 | 
38c80     09 74 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
38c84     00 00 90 FD |                 jmp     #.notify_client
38c88                 | 
38c88                 | .notify_client
38c88     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
38c8c     BA 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
38c90                 |                 debug(uhex_long(hdev_type,hdev_type+1))
38c90                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
38c90     2D 00 64 FD |                 ret
38c94                 | 
38c94                 | '------------------------------------------------------------------------------
38c94                 | ' Initialize the keyboard/mouse data area to start-up values.
38c94                 | '------------------------------------------------------------------------------
38c94                 | ' On entry:
38c94                 | ' On exit:
38c94                 | '------------------------------------------------------------------------------
38c94                 | init_kbdm_data
38c94     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
38c98     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
38c9c                 | 
38c9c     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
38ca0     2B ED 03 F6 |                 mov     pa, cache_end_p
38ca4                 | .loop
38ca4     61 01 4C FC |                 wrbyte  #0, ptra++
38ca8     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
38cac     F4 FF 9F CD |         if_b    jmp     #.loop
38cb0                 |         
38cb0                 |         if EMUPAD_MAX_PLAYER > 0
38cb0                 |         end
38cb0                 | 
38cb0                 | 
38cb0     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
38cb4                 | .regloop
38cb4     00 EC 8F F9 |                 altd    pa
38cb8     00 00 04 F6 |                 mov     0-0, #0
38cbc     01 EC 07 F1 |                 add     pa, #1
38cc0     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
38cc4     EC FF 9F 5D |         if_nz   jmp     #.regloop
38cc8                 | 
38cc8     E1 E1 61 FF 
38ccc     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
38cd0     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
38cd4     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
38cd8     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
38cdc                 | 
38cdc     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
38ce0                 | 
38ce0                 | '------------------------------------------------------------------------------
38ce0                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
38ce0                 | ' function.
38ce0                 | '------------------------------------------------------------------------------
38ce0                 | ' On entry:
38ce0                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
38ce0                 | '   hpar2 - index number of the target interface.
38ce0                 | ' On exit:
38ce0                 | '------------------------------------------------------------------------------
38ce0                 | hset_idle
38ce0     A8 99 02 F6 |                 mov     hctwait, _2ms_
38ce4     EF 02 A0 FD |                 call    #poll_waitx
38ce8     D8 0A D0 FE |                 loc     ptra, #set_idle
38cec     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]
38cf0     02 8F 57 FC |                 wrword  hpar2, ptra[wIndex]
38cf4     A0 02 80 FD |                 jmp     #control_write
38cf8                 | 
38cf8                 | '------------------------------------------------------------------------------
38cf8                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
38cf8                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
38cf8                 | '------------------------------------------------------------------------------
38cf8                 | ' On entry:
38cf8                 | '   ep_addr_pid - device address and enpoint for the request.
38cf8                 | ' On exit:
38cf8                 | '   retval - transaction result.
38cf8                 | '------------------------------------------------------------------------------
38cf8                 | hset_kbdled_report
38cf8     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
38cfc     CC 0A D0 FE |                 loc     ptra, #set_report
38d00     01 00 80 FF 
38d04     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
38d08     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
38d0c     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
38d10     27 EF 03 F6 |                 mov     pb, urx_buff_p
38d14     F7 77 42 FC |                 wrbyte  kb_led_states, pb
38d18     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
38d1c                 | 
38d1c                 | '------------------------------------------------------------------------------
38d1c                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
38d1c                 | '------------------------------------------------------------------------------
38d1c                 | ' On entry:
38d1c                 | ' On exit:
38d1c                 | '------------------------------------------------------------------------------
38d1c                 | hget_kbd_in_report
38d1c     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
38d20     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
38d24     30 91 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
38d28     39 91 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
38d2c     CF 02 A0 FD |                 call    #do_int_in
38d30     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38d34     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
38d38                 | 
38d38     00 90 0F F2 |                 cmp     hpar3, #0               wz
38d3c     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
38d40                 | 
38d40     30 71 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
38d44     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
38d48     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
38d4c     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
38d50                 | 
38d50     C8 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
38d54     18 00 B0 FD |                 call    #hkbd_compare
38d58                 |         if EMUPAD_MAX_PLAYER > 0
38d58                 |         end
38d58                 | 
38d58                 | .led_check
38d58     3B 71 03 F6 |                 mov     htmp, kb_led_states
38d5c     B8 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
38d60     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
38d64     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
38d68     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
38d6c     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
38d70                 | 
38d70                 | '------------------------------------------------------------------------------
38d70                 | ' Compare current and previous keyboard data buffers for keypress changes.
38d70                 | '------------------------------------------------------------------------------
38d70                 | hkbd_compare
38d70     27 F1 03 F6 |                 mov     ptra, urx_buff_p
38d74     D4 13 F0 FE |                 loc     ptrb, #hkbd_report
38d78     61 73 07 FB |                 rdlong  htmp1, ptra++
38d7c     E1 75 07 FB |                 rdlong  htmp2, ptrb++
38d80     BA 73 0B F2 |                 cmp     htmp1, htmp2    wz
38d84     61 73 07 FB |                 rdlong  htmp1, ptra++
38d88     E1 75 07 FB |                 rdlong  htmp2, ptrb++
38d8c     BA 73 0B A2 |         if_z    cmp     htmp1, htmp2    wz
38d90     2D 00 64 AD |         if_z    ret
38d94                 | 
38d94     B4 13 D0 FE |                 loc     ptra, #hkbd_report
38d98                 | 
38d98                 |                 ' Handle modifiers
38d98     27 8F C3 FA |                 rdbyte  hpar2, urx_buff_p
38d9c     00 87 C7 FA |                 rdbyte  hr1, ptra
38da0     C7 87 43 F9 |                 rolword hr1,hpar2,#0
38da4     63 86 63 FD |                 mergew  hr1
38da8     08 EC 07 F6 |                 mov     pa,#8
38dac                 | .modloop
38dac     6A 86 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
38db0     E8 8C 07 F6 |                 mov     hpar1,#$E8
38db4     F6 8D 83 F1 |                 sub     hpar1,pa
38db8     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
38dbc     FB ED 6F FB |                 djnz    pa,#.modloop
38dc0                 | 
38dc0     6F E0 75 FD | .release        modc    _set    wc
38dc4                 |                 'alts    hdev_port, #hid_report_p
38dc4                 |                 'mov     ptra, hid_report_p
38dc4     02 F0 07 F1 |                 add     ptra, #2
38dc8     06 EC 07 F6 |                 mov     pa, #6
38dcc     61 8D CF FA | .rl1            rdbyte  hpar1, ptra++   wz
38dd0     20 00 90 AD |         if_z    jmp     #.rl3
38dd4     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
38dd8     02 F2 07 F1 |                 add     ptrb, #2
38ddc     06 EE 07 F6 |                 mov     pb, #6
38de0     E1 71 C7 FA | .rl2            rdbyte  htmp, ptrb++
38de4     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
38de8     08 00 90 AD |         if_z    jmp     #.rl3
38dec     FC EF 6F FB |                 djnz    pb, #.rl2
38df0     68 00 B0 FD |                 call    #hkbd_translate
38df4     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
38df8                 | 
38df8     00 90 07 F6 |                 mov     hpar3, #0
38dfc     1F 90 27 F4 |                 bith    hpar3, #31
38e00                 | 
38e00     6F 00 74 FD | .press          modc    _clr    wc
38e04     27 F1 03 F6 |                 mov     ptra, urx_buff_p
38e08     02 F0 07 F1 |                 add     ptra, #2
38e0c     06 EC 07 F6 |                 mov     pa, #6
38e10     61 8D CF FA | .pl1            rdbyte  hpar1, ptra++   wz
38e14     20 00 90 AD |         if_z    jmp     #.pl3
38e18     30 13 F0 FE |                 loc     ptrb, #hkbd_report
38e1c     02 F2 07 F1 |                 add     ptrb, #2
38e20     06 EE 07 F6 |                 mov     pb, #6
38e24     E1 71 C7 FA | .pl2            rdbyte  htmp, ptrb++
38e28     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
38e2c     08 00 90 AD |         if_z    jmp     #.pl3
38e30     FC EF 6F FB |                 djnz    pb, #.pl2
38e34     24 00 B0 FD |                 call    #hkbd_translate
38e38     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
38e3c                 | 
38e3c     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
38e40     08 13 F0 FE |                 loc     ptrb, #hkbd_report
38e44     28 02 64 FD |                 setq #1
38e48     61 73 07 FB |                 rdlong  htmp1, ptra++
38e4c     28 02 64 FD |                 setq #1
38e50     E1 73 67 FC |                 wrlong  htmp1, ptrb++
38e54     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
38e58                 | 
38e58     2D 00 64 FD |                 ret
38e5c                 | 
38e5c                 | '------------------------------------------------------------------------------
38e5c                 | ' Translate keyboard scancode to ASCII
38e5c                 | '------------------------------------------------------------------------------
38e5c                 | ' On entry:
38e5c                 | '   hpar1 - scancode
38e5c                 | '   hpar2 - key modifiers state
38e5c                 | '       c - pressed (0) or released (1) flag
38e5c                 | ' On exit:
38e5c                 | '   hpar1 - bit     31 = 0 pressed, 1 released
38e5c                 | '               30..17 = unused
38e5c                 | '                   18 = scroll-lock state 
38e5c                 | '                   17 = caps-lock state
38e5c                 | '                   16 = num-lock state 
38e5c                 | '                15..8 = key modifiers state
38e5c                 | '                 7..0 = scancode
38e5c                 | '------------------------------------------------------------------------------
38e5c                 | hkbd_translate
38e5c     39 8C 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
38e60     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
38e64     53 8C 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
38e68     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
38e6c     47 8C 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
38e70     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
38e74                 | 
38e74                 |         if EMUPAD_MAX_PLAYER > 0
38e74                 | 
38e74                 |         if EMUPAD_BT0_BIT >= 0
38e74                 |         end
38e74                 |         if EMUPAD_BT1_BIT >= 0
38e74                 |         end
38e74                 |         if EMUPAD_BT2_BIT >= 0
38e74                 |         end
38e74                 |         if EMUPAD_BT3_BIT >= 0
38e74                 |         end
38e74                 |         if EMUPAD_BT4_BIT >= 0
38e74                 |         end
38e74                 |         if EMUPAD_BT5_BIT >= 0
38e74                 |         end
38e74                 |         if EMUPAD_BT6_BIT >= 0
38e74                 |         end
38e74                 |         if EMUPAD_BT7_BIT >= 0
38e74                 |         end
38e74                 |         if EMUPAD_BT8_BIT >= 0
38e74                 |         end
38e74                 |         if EMUPAD_BT9_BIT >= 0
38e74                 |         end
38e74                 | 
38e74                 |         end
38e74     C7 8D CB F8 |                 setbyte hpar1, hpar2, #1
38e78     7C 8D D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
38e7c     1F 8C 47 F4 |                 bitc    hpar1, #31
38e80                 |         if KEYQUEUE_SIZE > 0
38e80     C4 09 B0 FE |                 loc pb,#keyq_head
38e84     F7 71 E3 FA |                 rdword htmp,pb
38e88     B8 73 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
38e8c     B8 71 E3 F8 |                 getbyte htmp,htmp,#0 ' head
38e90     B8 75 03 F6 |                 mov htmp2,htmp
38e94     04 74 07 FA |                 mul htmp2,#4
38e98     F7 75 03 F1 |                 add htmp2,pb
38e9c     02 74 07 F1 |                 add htmp2,#2
38ea0     7F 70 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
38ea4     B8 73 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
38ea8     BA 8D 63 5C |         if_nz   wrlong hpar1,htmp2
38eac     F7 71 43 5C |         if_nz   wrbyte htmp,pb
38eb0                 |         end
38eb0     2D 00 7C FD |                 ret wcz
38eb4                 | 
38eb4                 | if HAVE_MOUSE
38eb4                 | '------------------------------------------------------------------------------
38eb4                 | ' Execute an IN interrupt transaction to poll for mouse activity.
38eb4                 | '------------------------------------------------------------------------------
38eb4                 | ' On entry:
38eb4                 | ' On exit:
38eb4                 | '------------------------------------------------------------------------------
38eb4                 | hget_mouse_in_report
38eb4     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
38eb8     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
38ebc     30 91 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
38ec0     36 91 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
38ec4     CF 02 A0 FD |                 call    #do_int_in
38ec8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38ecc     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
38ed0                 | 
38ed0     00 90 0F F2 |                 cmp     hpar3, #0               wz
38ed4     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
38ed8                 | 
38ed8     30 71 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
38edc     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
38ee0     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
38ee4     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
38ee8                 | 
38ee8     27 F1 03 F6 |                 mov     ptra, urx_buff_p
38eec     05 90 1F F2 |                 cmp     hpar3, #5               wcz     ' Hack: Combo PS/2-USB adapters adds report-id
38ef0     01 F0 07 31 |         if_ae   add     ptra, #1                        ' | skip
38ef4     01 90 87 31 |         if_ae   sub     hpar3, #1
38ef8                 | 
38ef8     40 09 90 FE |                 loc     pa, #mouse_limits
38efc     25 13 F0 FE |                 loc     ptrb, #mouse_xacc
38f00                 | 
38f00                 |                 ' load xacc,yacc,zacc
38f00     28 04 64 FD |                 setq    #3-1
38f04     80 87 07 FB |                 rdlong  hr1,ptrb
38f08                 |                 ' load limits and outptr
38f08     28 04 64 FD |                 setq    #3-1
38f0c     F6 73 03 FB |                 rdlong  htmp1,pa
38f10                 | 
38f10     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Button flags
38f14     8C 71 47 FC |                 wrbyte  htmp, ptrb[12]                    ' write verbatim into extra byte
38f18     00 70 17 F4 |                 testb   htmp,#0                 wc       ' left button flag
38f1c     8D 03 4C CC |         if_c    wrbyte  #1,ptrb[13]
38f20     01 70 17 F4 |                 testb   htmp,#1                 wc       ' left button flag
38f24     8E 03 4C CC |         if_c    wrbyte  #1,ptrb[14]
38f28     02 70 17 F4 |                 testb   htmp,#2                 wc       ' left button flag
38f2c     8F 03 4C CC |         if_c    wrbyte  #1,ptrb[15]
38f30                 |               
38f30                 | 
38f30     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' X direction and velocity is 8-bit signed
38f34     07 70 67 F7 |                 signx   htmp, #7
38f38     B8 87 03 F1 |                 add     hr1,htmp
38f3c     00 72 0F F2 |                 cmp     htmp1,#0 wz
38f40     B9 87 63 53 |         if_ne   fles    hr1,htmp1
38f44     00 86 47 53 |         if_ne   fges    hr1,#0
38f48                 | 
38f48     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Y direction and velocity is 8-bit signed
38f4c     07 70 67 F7 |                 signx   htmp, #7
38f50     B8 89 03 F1 |                 add     hr2,htmp
38f54     00 74 0F F2 |                 cmp     htmp2,#0 wz
38f58     BA 89 63 53 |         if_ne   fles    hr2,htmp2
38f5c     00 88 47 53 |         if_ne   fges    hr2,#0
38f60                 |                 
38f60                 | 
38f60     04 90 0F F2 |                 cmp     hpar3, #4               wz      ' Very few mice send +/- scroll wheel data in boot protocol
38f64     00 71 C7 AA |         if_z    rdbyte  htmp, ptra
38f68     07 70 67 A7 |         if_z    signx   htmp, #7                        ' If it's there, use it
38f6c     B8 8B 03 A1 |         if_z    add     hr3,htmp
38f70                 | 
38f70     90 71 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
38f74     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
38f78                 | 
38f78                 |                 ' write back accumulators
38f78     28 04 64 FD |                 setq    #3-1
38f7c     80 87 67 FC |                 wrlong  hr1,ptrb
38f80                 |                 ' if outptr set, write X/Y words
38f80     00 76 0F F2 |                 cmp htmp3,#0                    wz
38f84     C4 87 2B 59 |         if_nz   setword hr1,hr2,#1
38f88     BB 87 63 5C |         if_nz   wrlong hr1,htmp3
38f8c     2D 00 64 FD |                 ret
38f90                 | end
38f90                 | 
38f90                 | '------------------------------------------------------------------------------
38f90                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
38f90                 | '------------------------------------------------------------------------------
38f90                 | ' On entry:
38f90                 | ' On exit:
38f90                 | '------------------------------------------------------------------------------
38f90                 | if _HAVE_GAMEPAD
38f90                 | hget_gp_in_report
38f90     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
38f94     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
38f98                 | 
38f98     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
38f9c     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
38fa0     00 90 E3 F8 |                 getbyte hpar3
38fa4     FF 90 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
38fa8     CF 02 A0 FD |                 call    #do_int_in
38fac     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38fb0     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
38fb4                 | 
38fb4     00 90 0F F2 |                 cmp     hpar3, #0               wz
38fb8     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
38fbc                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
38fbc                 | 
38fbc     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
38fc0     00 70 E3 F8 |                 getbyte htmp                            ' |
38fc4     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
38fc8     4B 70 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
38fcc     C3 70 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
38fd0     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
38fd4     B8 01 C0 F8 |                 setbyte htmp                            ' |
38fd8                 | 
38fd8                 | ' Note: the following code compares the current and previous reports
38fd8                 | ' and process the data if there are changes to ease the debug output.
38fd8                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
38fd8                 | ' gpPreReport buffer.
38fd8                 | 
38fd8                 |                 ' ----- start of block to remove
38fd8                 |                 {
38fd8                 |                 }
38fd8                 |                 ' ----- end of block to remove
38fd8     F4 04 90 FE |                 loc pa,#hpad_translate
38fdc     2A EC 63 FD |                 push pa
38fe0                 | 
38fe0                 |                 ' FALL THROUGH !!!!
38fe0                 | 
38fe0                 | '------------------------------------------------------------------------------
38fe0                 | ' Decode controller report
38fe0                 | '------------------------------------------------------------------------------
38fe0                 | hid_decode
38fe0                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
38fe0     28 1E 64 FD |                 setq #(hidr_end-hidr_start)-1
38fe4     00 04 00 FF 
38fe8     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
38fec                 | 
38fec     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
38ff0                 | 
38ff0     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
38ff4     00 2A E3 F8 |                 getbyte hidr_type
38ff8     07 2A 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
38ffc     34 02 90 AD |         if_z    jmp     #hpad_xinput
39000     08 2A 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
39004     1C 03 90 AD |         if_z    jmp     #hpad_ps3
39008     05 2A 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
3900c     04 2A 07 A6 |         if_z    mov     hidr_type,#M_READY
39010     04 2A 0F F2 |                 cmp     hidr_type, #M_READY             wz
39014                 |                 
39014                 | 
39014                 | '------------------------------------------------------------------------------
39014                 | ' Handle HID controller (or mouse now
39014                 | ' On entry:
39014                 | '   ptrb - controller report
39014                 | '------------------------------------------------------------------------------
39014                 | hpad_hid
39014     1B 01 A0 FD |                 call    #get_hid_descr_buffer
39018     F7 F1 03 F6 |                 mov     ptra, pb
3901c     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
39020     00 EC 03 F6 |                 mov     pa, 0-0
39024                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
39024     19 2A 3B FF 
39028     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
3902c                 | 
3902c                 | .next
3902c     00 EC 5F F2 |                 cmps    pa, #0      wcz
39030     2D 00 7C ED |         if_be   ret     wcz
39034                 | 
39034     61 8D C7 FA |                 rdbyte  hpar1, ptra++
39038     01 EC 87 F1 |                 sub     pa, #1
3903c     00 8E 07 F6 |                 mov     hpar2, #0
39040                 | 
39040     C6 71 03 F6 |                 mov     htmp, hpar1
39044     03 70 07 F5 |                 and     htmp, #$03
39048     01 70 0F F2 |                 cmp     htmp, #1    wz
3904c     61 8F C7 AA |         if_z    rdbyte  hpar2, ptra++
39050     07 8E 67 A7 |         if_z    signx   hpar2,#7
39054     01 EC 87 A1 |         if_z    sub     pa, #1
39058     02 70 0F F2 |                 cmp     htmp, #2    wz
3905c     61 8F E7 AA |         if_z    rdword  hpar2, ptra++
39060     0F 8E 67 A7 |         if_z    signx   hpar2,#15
39064     02 EC 87 A1 |         if_z    sub     pa, #2
39068     03 70 0F F2 |                 cmp     htmp, #3    wz
3906c     61 8F 07 AB |         if_z    rdlong  hpar2, ptra++
39070     04 EC 87 A1 |         if_z    sub     pa, #4
39074                 | 
39074     FC 8C 07 F5 |                 and     hpar1, #$FC
39078                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
39078                 | 
39078     84 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
3907c     0C 01 90 AD |         if_z    jmp     #.report_id
39080     04 8C 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
39084     24 01 90 AD |         if_z    jmp     #.usage_page
39088     08 8C 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
3908c     2C 01 90 AD |         if_z    jmp     #.usage
39090     14 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
39094     C7 27 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
39098     24 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
3909c     C7 27 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
390a0     34 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
390a4     C7 29 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
390a8     44 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
390ac     C7 29 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
390b0     74 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
390b4     C7 1F 03 A6 |         if_z    mov     hidr_size, hpar2
390b8     94 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
390bc     C7 21 03 A6 |         if_z    mov     hidr_count, hpar2
390c0     80 8C 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
390c4     64 FF 9F 5D |         if_nz   jmp     #.next
390c8                 | 
390c8     D8 1D A7 FB |                 tjf     hidr_state,#.next
390cc                 | 
390cc     03 8E 07 F5 |                 and     hpar2, #$03
390d0     02 8E 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
390d4     18 00 90 5D |         if_nz   jmp     #.skip
390d8                 | 
390d8     02 1C 0F F2 |                 cmp     hidr_state, #2  wz
390dc     20 00 90 AD |         if_z    jmp     #.axes
390e0     03 1C 0F F2 |                 cmp     hidr_state, #3  wz
390e4     5C 00 90 AD |         if_z    jmp     #.hats
390e8     04 1C 0F F2 |                 cmp     hidr_state, #4  wz
390ec     70 00 90 AD |         if_z    jmp     #.buttons
390f0                 | .skip
390f0     8F 71 03 F6 |                 mov     htmp, hidr_size
390f4     90 71 03 FA |                 mul     htmp, hidr_count
390f8     B8 23 03 F1 |                 add     hidr_offset, htmp
390fc     2C FF 9F FD |                 jmp     #.next
39100                 | .axes
39100                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count))
39100     87 85 53 F8 |                 getnib  hr0, hidr_flags, #2
39104     90 87 03 F6 |                 mov     hr1, hidr_count
39108                 | .l1
39108     91 8D 03 F6 |                 mov     hpar1, hidr_offset
3910c     8F 8F 03 F6 |                 mov     hpar2, hidr_size
39110     04 03 B0 FD |                 call    #hpad_getbits
39114     64 03 B0 FD |                 call    #hpad_normalize
39118     06 84 1F F2 |                 cmp     hr0, #6         wcz
3911c     86 85 5F C9 |         if_b    altgn   hr0, #hidr_usage
39120     00 88 43 C8 |         if_b    getnib  hr2
39124     88 89 77 C9 |         if_b    altsw   hr2, #hidr_axis
39128     5F 01 20 C9 |         if_b    setword retval
3912c     01 84 07 C1 |         if_b    add     hr0, #1
39130     8F 23 03 F1 |                 add     hidr_offset, hidr_size
39134     F4 87 6F FB |                 djnz    hr1, #.l1
39138                 | 
39138     C2 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
3913c     01 1C 07 F6 |                 mov     hidr_state, #1
39140     E8 FE 9F FD |                 jmp     #.next
39144                 | .hats
39144                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
39144     91 8D 03 F6 |                 mov     hpar1, hidr_offset
39148     8F 8F 03 F6 |                 mov     hpar2, hidr_size
3914c     C8 02 B0 FD |                 call    #hpad_getbits
39150     5F 19 C3 F8 |                 setbyte hidr_hats, retval, #0
39154     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
39158     01 1C 07 F6 |                 mov     hidr_state, #1
3915c     90 FF 9F FD |                 jmp     #.skip
39160                 | .buttons
39160                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
39160     91 8D 03 F6 |                 mov     hpar1, hidr_offset
39164     8F 8F 03 F6 |                 mov     hpar2, hidr_size
39168     90 8F 03 FA |                 mul     hpar2, hidr_count
3916c     A8 02 B0 FD |                 call    #hpad_getbits
39170     87 71 E3 F8 |                 getbyte htmp, hidr_flags, #0
39174     B8 BF 62 F0 |                 shl     retval, htmp
39178     5F 17 43 F5 |                 or      hidr_buttons, retval
3917c     90 71 03 F1 |                 add     htmp, hidr_count
39180     B8 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
39184     01 1C 07 F6 |                 mov     hidr_state, #1
39188     64 FF 9F FD |                 jmp     #.skip
3918c                 | .report_id
3918c     00 1A 0F F2 |                 cmp     hidr_id, #0     wz
39190     2D 00 7C 5D |         if_nz   ret     wcz
39194     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
39198     C7 71 0B F2 |                 cmp     htmp, hpar2     wz
3919c     B8 1B 03 A6 |         if_z    mov     hidr_id, htmp
391a0     01 1C 67 56 |         if_nz   neg     hidr_state,#1
391a4     01 F2 87 51 |         if_nz   sub     ptrb,#1
391a8     80 FE 9F FD |                 jmp     #.next
391ac                 | .usage_page
391ac     09 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
391b0     01 1C 0F A2 |         if_z    cmp     hidr_state, #1  wz
391b4     04 1C 07 A6 |         if_z    mov     hidr_state, #4
391b8     70 FE 9F FD |                 jmp     #.next
391bc                 | .usage
391bc     04 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
391c0     05 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
391c4     06 2A 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
391c8     01 1C 07 A6 |         if_z    mov     hidr_state, #1
391cc     5C FE 9F AD |         if_z    jmp     #.next
391d0     02 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
391d4     04 2A 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
391d8     01 1C 07 A6 |         if_z    mov     hidr_state, #1
391dc     4C FE 9F AD |         if_z    jmp     #.next
391e0     30 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_X     wz
391e4     31 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Y     wz
391e8     32 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Z     wz
391ec     33 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RX    wz
391f0     34 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RY    wz
391f4     35 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RZ    wz
391f8     10 00 90 AD |         if_z    jmp     #.usage_axis
391fc     39 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
39200     01 1C 0F A2 |         if_z    cmp     hidr_state, #1      wz
39204     03 1C 07 A6 |         if_z    mov     hidr_state, #3
39208     20 FE 9F FD |                 jmp     #.next
3920c                 | .usage_axis
3920c     01 1C 57 F2 |                 cmps    hidr_state, #1          wc
39210     18 FE 9F CD |         if_b    jmp     #.next
39214     86 25 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
39218     C7 01 00 F8 |                 setnib  hpar2
3921c                 | 
3921c     20 8E 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
39220     C7 8F C3 F9 |                 decod   hpar2
39224     C7 0F 43 F5 |                 or      hidr_flags, hpar2
39228                 | 
39228     01 24 07 F1 |                 add     hidr_usage_idx, #1
3922c     02 1C 07 F6 |                 mov     hidr_state, #2
39230     F8 FD 9F FD |                 jmp     #.next
39234                 | 
39234                 | '------------------------------------------------------------------------------
39234                 | ' Handle XInput controller
39234                 | ' On entry:
39234                 | '   ptrb - controller report
39234                 | '------------------------------------------------------------------------------
39234                 | '   Default implementation translates the report to a pseudo-defacto hid
39234                 | '   standard and jumps to hpad_translate for actions.
39234                 | '   Implementors may take specific actions for this kind of controller.
39234                 | '------------------------------------------------------------------------------
39234                 | hpad_xinput
39234     80 71 CF FA |                 rdbyte  htmp, ptrb      wz
39238     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
3923c     81 71 C7 FA |                 rdbyte  htmp, ptrb[1]
39240     14 70 0F F2 |                 cmp     htmp, #$14      wz
39244     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
39248                 | 
39248                 |                 debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
39248                 | 
39248     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
3924c     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
39250                 | 
39250     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
39254     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
39258     5F BF 22 F6 |                 not     retval
3925c     5F 11 2B F9 |                 setword hidr_axis, retval, #1
39260     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
39264     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
39268     5F BF 22 F6 |                 not     retval
3926c     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
39270                 | 
39270     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
39274     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
39278     C0 BE 1E F2 |                 cmp     retval, #192    wcz
3927c     06 16 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
39280     F8 01 B0 FD |                 call    #hpad_normalize
39284     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
39288     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
3928c     C0 BE 1E F2 |                 cmp     retval, #192    wcz
39290     07 16 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
39294     E4 01 B0 FD |                 call    #hpad_normalize
39298     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
3929c                 | 
3929c     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
392a0     81 BF E6 FA |                 rdword  retval, ptrb[1]
392a4     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
392a8     00 16 47 F4 |                 bitc    hidr_buttons, #0
392ac     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
392b0     01 16 47 F4 |                 bitc    hidr_buttons, #1
392b4     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
392b8     02 16 47 F4 |                 bitc    hidr_buttons, #2
392bc     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
392c0     03 16 47 F4 |                 bitc    hidr_buttons, #3
392c4     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
392c8     04 16 47 F4 |                 bitc    hidr_buttons, #4
392cc     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
392d0     05 16 47 F4 |                 bitc    hidr_buttons, #5
392d4     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
392d8     08 16 47 F4 |                 bitc    hidr_buttons, #8
392dc     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
392e0     09 16 47 F4 |                 bitc    hidr_buttons, #9
392e4     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
392e8     0A 16 47 F4 |                 bitc    hidr_buttons, #10
392ec     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
392f0     0B 16 47 F4 |                 bitc    hidr_buttons, #11
392f4     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
392f8     0C 16 47 F4 |                 bitc    hidr_buttons, #12
392fc                 | 
392fc     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
39300     5F 71 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
39304     7A BB 7A FF 
39308     0F 72 07 F6 |                 mov     htmp1, ##$F576_F40F
3930c     F9 FF 7F FF 
39310     12 75 07 F6 |                 mov     htmp2, ##$FFFF_F312
39314     B9 71 5F F9 |                 altgn   htmp, #htmp1
39318     00 70 43 F8 |                 getnib  htmp
3931c     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
39320                 | 
39320     AC 01 90 FD |                 jmp     #hpad_translate
39324                 | 
39324                 | '------------------------------------------------------------------------------
39324                 | ' Handle PS3 controller
39324                 | ' On entry:
39324                 | '   ptrb - controller report
39324                 | '------------------------------------------------------------------------------
39324                 | '   Default implementation translates the report to a pseudo-defacto hid
39324                 | '   standard and jumps to hpad_translate for actions.
39324                 | '   Implementors may take specific actions for this kind of controller.
39324                 | '------------------------------------------------------------------------------
39324                 | hpad_ps3
39324     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
39328     01 70 0F F2 |                 cmp     htmp, #$01      wz
3932c     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
39330                 | 
39330                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
39330                 | 
39330     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
39334     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
39338     40 01 B0 FD |                 call    #hpad_normalize
3933c     5F 11 23 F9 |                 setword hidr_axis, retval, #0
39340     10 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X
39344     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
39348     30 01 B0 FD |                 call    #hpad_normalize
3934c     5F 11 2B F9 |                 setword hidr_axis, retval, #1
39350     11 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Y
39354     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
39358     20 01 B0 FD |                 call    #hpad_normalize
3935c     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
39360     12 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Z
39364     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
39368     10 01 B0 FD |                 call    #hpad_normalize
3936c     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
39370     15 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_RZ
39374     04 0E 17 F8 |                 setnib  hidr_flags, #4, #2
39378                 | 
39378     08 8C 07 F6 |                 mov     hpar1, #8
3937c     13 8E 07 F6 |                 mov     hpar2, #19
39380     94 00 B0 FD |                 call    #hpad_getbits
39384                 | 
39384     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
39388     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
3938c     00 16 47 F4 |                 bitc    hidr_buttons, #0
39390     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
39394     01 16 47 F4 |                 bitc    hidr_buttons, #1
39398     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
3939c     02 16 47 F4 |                 bitc    hidr_buttons, #2
393a0     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
393a4     03 16 47 F4 |                 bitc    hidr_buttons, #3
393a8     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
393ac     04 16 47 F4 |                 bitc    hidr_buttons, #4
393b0     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
393b4     05 16 47 F4 |                 bitc    hidr_buttons, #5
393b8     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
393bc     06 16 47 F4 |                 bitc    hidr_buttons, #6
393c0     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
393c4     07 16 47 F4 |                 bitc    hidr_buttons, #7
393c8     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
393cc     08 16 47 F4 |                 bitc    hidr_buttons, #8
393d0     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
393d4     09 16 47 F4 |                 bitc    hidr_buttons, #9
393d8     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
393dc     0A 16 47 F4 |                 bitc    hidr_buttons, #10
393e0     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
393e4     0B 16 47 F4 |                 bitc    hidr_buttons, #11
393e8     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
393ec     0C 16 47 F4 |                 bitc    hidr_buttons, #12
393f0                 | 
393f0     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
393f4     5F 71 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
393f8     09 FA 79 FF 
393fc     0F 72 07 F6 |                 mov     htmp1, ##$F3F4_120F
39400     FF FA 7F FF 
39404     76 75 07 F6 |                 mov     htmp2, ##$FFF5_FF76
39408     B9 71 5F F9 |                 altgn   htmp, #htmp1
3940c     00 70 43 F8 |                 getnib  htmp
39410     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
39414                 | 
39414     B8 00 90 FD |                 jmp     #hpad_translate
39418                 | 
39418                 | '------------------------------------------------------------------------------
39418                 | ' Read bits from report data buffer
39418                 | '------------------------------------------------------------------------------
39418                 | ' On entry:
39418                 | '   PTRB - report buffer
39418                 | '   hpar1 - start bit
39418                 | '   hpar2 - number of bits
39418                 | ' On exit:
39418                 | '   retval - bits
39418                 | '------------------------------------------------------------------------------
39418                 | hpad_getbits
39418     C6 71 03 F6 |                 mov     htmp, hpar1
3941c     03 70 47 F0 |                 shr     htmp, #3        ' byte offset
39420     F9 71 03 F1 |                 add     htmp, ptrb
39424     B8 BF 02 FB |                 rdlong  retval, htmp
39428                 | 
39428     C6 73 03 F6 |                 mov     htmp1, hpar1
3942c     07 72 07 F5 |                 and     htmp1, #$07     ' shift
39430     B9 BF 42 F0 |                 shr     retval, htmp1
39434                 | 
39434     18 8E 1F F2 |                 cmp     hpar2, #24      wcz
39438     10 00 90 1D |         if_a    jmp     #.l1
3943c                 | 
3943c     C7 8F C3 F9 |                 decod   hpar2
39440     01 8E 87 F1 |                 sub     hpar2, #1
39444     C7 BF 02 F5 |                 and     retval, hpar2
39448     2D 00 64 FD |                 ret
3944c                 | .l1
3944c     FF 7F 00 FF 
39450     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
39454     03 70 07 F1 |                 add     htmp, #3
39458     B8 75 03 FB |                 rdlong  htmp2, htmp
3945c     18 8E 87 F1 |                 sub     hpar2, #24
39460     C7 8F C3 F9 |                 decod   hpar2
39464     01 8E 87 F1 |                 sub     hpar2, #1
39468     B9 75 43 F0 |                 shr     htmp2, htmp1
3946c     C7 75 03 F5 |                 and     htmp2, hpar2
39470     18 74 67 F0 |                 shl     htmp2, #24
39474     BA BF 42 F5 |                 or      retval, htmp2
39478     2D 00 64 FD |                 ret
3947c                 | 
3947c                 | '------------------------------------------------------------------------------
3947c                 | ' Normalize value to signed word (-32768 / 32767)
3947c                 | '------------------------------------------------------------------------------
3947c                 | ' On entry:
3947c                 | '   retval - value to normalize
3947c                 | '   hidr_lminmax - min (word 1) max (word 0) value range
3947c                 | '   - or -
3947c                 | '   hidr_pminmax - min (word 1) max (word 0) value range
3947c                 | '   hidr_size - value bits length
3947c                 | ' On exit:
3947c                 | '   retval - normalized value
3947c                 | '------------------------------------------------------------------------------
3947c                 | hpad_normalize
3947c     93 71 0B F6 |                 mov     htmp, hidr_lminmax  wz
39480     94 71 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
39484     2D 00 64 AD |         if_z    ret
39488     B8 73 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
3948c     B8 71 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
39490     0F 72 77 F7 |                 signx   htmp1, #15      wc
39494     FF 1F 97 C9 |         if_c    alts    hidr_size, #511
39498     00 BE 66 C7 |         if_c    signx   retval, #0-0
3949c     B9 71 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
394a0     B9 BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
394a4     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
394a8     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
394ac     B8 71 53 F6 |                 abs     htmp            wc
394b0     1F BE 0E F4 |                 testb   retval, #31     wz
394b4     5F BF 42 F6 |                 abs     retval
394b8     B8 BF 12 FD |                 qdiv    retval, htmp
394bc     18 BE 62 FD |                 getqx   retval
394c0     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
394c4     C0 FF 7F FF 
394c8     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
394cc     2D 00 64 FD |                 ret
394d0                 | 
394d0                 | '------------------------------------------------------------------------------
394d0                 | ' Perform controller actions
394d0                 | ' On entry:
394d0                 | '    hidr_id        report id
394d0                 | '    hidr_axis      axis value (signed word, 2 axes per long)
394d0                 | '                      X = hidr_axis+0, #0
394d0                 | '                      Y = hidr_axis+0, #1
394d0                 | '                      Z = hidr_axis+1, #0
394d0                 | '                     RX = hidr_axis+1, #1
394d0                 | '                     RY = hidr_axis+2, #0
394d0                 | '                     RZ = hidr_axis+2, #1
394d0                 | '    hidr_buttons   buttons state (bits 0 to 31)
394d0                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
394d0                 | '
394d0                 | '                     -------3 -------2 -------1 -------0 byte
394d0                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
394d0                 | '    hidr_flags       xxxxxxxx_xxrrrzyx_hhhhaaaa_bbbbbbbb
394d0                 | '                                zyx||| |||||||| ++++++++ n. buttons
394d0                 | '                                |||||| ||||++++--------- n. axes
394d0                 | '                                |||||| ++++------------- n. hats
394d0                 | '                                ++++++------------------ valid axes
394d0                 | '------------------------------------------------------------------------------
394d0                 | hpad_translate
394d0                 | 
394d0                 | 
394d0                 |         if HAVE_HIDPAD
394d0     84 0C F0 FE |                 loc     ptrb,#hidpad_report
394d4     2D 71 0B F6 |                 mov     htmp,hdev_port          wz
394d8     8D 71 03 A6 |         if_z    mov     htmp,hidr_id
394dc     01 70 E7 F2 |                 cmpsub  htmp,#1
394e0     07 1A 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
394e4     02 1A 17 52 |         if_nz   cmp     hidr_id, #2             wc
394e8     2D 00 7C 3D |         if_ae   ret     wcz
394ec     1C 70 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
394f0     B8 F3 03 F1 |                 add     ptrb,htmp
394f4     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
394f8     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
394fc     28 0C 64 FD |                 setq    #7-1
39500     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
39504                 |         end
39504                 | 
39504                 | 
39504                 |         if EMUPAD_MAX_PLAYER > 0
39504                 | .emupad_no_hat
39504                 |         if EMUPAD_BT0_BIT >= 0
39504                 |         end
39504                 |         if EMUPAD_BT1_BIT >= 0
39504                 |         end
39504                 |         if EMUPAD_BT2_BIT >= 0
39504                 |         end
39504                 |         if EMUPAD_BT3_BIT >= 0
39504                 |         end
39504                 |         if EMUPAD_BT4_BIT >= 0
39504                 |         end
39504                 |         if EMUPAD_BT5_BIT >= 0
39504                 |         end
39504                 |         if EMUPAD_BT6_BIT >= 0
39504                 |         end
39504                 |         if EMUPAD_BT7_BIT >= 0
39504                 |         end
39504                 |         if EMUPAD_BT8_BIT >= 0
39504                 |         end
39504                 |         if EMUPAD_BT9_BIT >= 0
39504                 |         end
39504                 | .emupad_slot_over
39504                 |         end
39504                 | 
39504                 |         if 0
39504                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
39504                 | 
39504                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
39504                 | 
39504                 |         end
39504     2D 00 64 FD |                 ret
39508                 | end
39508                 | 
39508                 | if EMUPAD_MAX_PLAYER > 0
39508                 | '------------------------------------------------------------------------------
39508                 | ' Clear EmuPad state
39508                 | '------------------------------------------------------------------------------
39508                 | emupad_reset
39508                 | 
39508                 | '------------------------------------------------------------------------------
39508                 | ' Get EmuPad Player number for current device (into retval)
39508                 | ' Z flag is also set if current device is valid
39508                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
39508                 | '------------------------------------------------------------------------------
39508                 | emupad_getnum
39508                 | .loop
39508                 | '------------------------------------------------------------------------------
39508                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
39508                 | '------------------------------------------------------------------------------
39508                 | emupad_discon
39508                 | .loop         
39508                 |         
39508                 |         ' FALL THROUGH!!!
39508                 | 
39508                 | '------------------------------------------------------------------------------
39508                 | ' Update EmuPad reports (all of them...)
39508                 | '------------------------------------------------------------------------------
39508                 | emupad_write_reports
39508                 | .devloop
39508                 | 
39508                 | end
39508                 | 
39508                 | 
39508                 | '------------------------------------------------------------------------------
39508                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
39508                 | '------------------------------------------------------------------------------
39508                 | ' On entry:
39508                 | ' On exit:
39508                 | '------------------------------------------------------------------------------
39508                 | hget_hub_status
39508     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
3950c     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
39510     32 91 23 F9 |                 setword hpar3, hub_next_datax, #0
39514     01 90 2F F9 |                 setword hpar3, #1, #1
39518     CF 02 A0 FD |                 call    #do_int_in
3951c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39520     0C 00 90 AD |         if_z    jmp     #.data
39524     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
39528     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
3952c     2D 00 64 FD |                 ret
39530                 | .data
39530     00 90 0F F2 |                 cmp     hpar3, #0               wz
39534     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
39538                 | 
39538     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
3953c     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
39540     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
39544     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
39548                 |                 debug(ubin_long(hub_status_chg))
39548                 | 
39548     01 5A 06 F6 |                 mov     hdev_port, #1
3954c                 | .loop
3954c     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
39550     0C 00 B0 AD |         if_x1   call    #hub_port_handler
39554     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
39558     F0 FF 9F 3D |         if_nc   jmp     #.loop
3955c     2D 00 64 FD |                 ret
39560                 | 
39560                 | hub_port_handler
39560     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
39564     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
39568     27 EF 03 F6 |                 mov     pb, urx_buff_p
3956c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
39570     55 02 A0 FD |                 call    #control_read
39574     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
39578                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
39578                 | 
39578     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
3957c     50 01 90 5D |         if_x0   jmp     #.other
39580     68 02 D0 FE |                 loc     ptra, #clr_port_feat
39584     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
39588     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3958c     A0 02 A0 FD |                 call    #control_write
39590     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
39594     7C 01 90 5D |         if_x0   jmp     #.disconnect
39598     B0 99 02 F6 |                 mov     hctwait, _100ms_
3959c     EF 02 A0 FD |                 call    #poll_waitx
395a0                 | 
395a0     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
395a4     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
395a8     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
395ac     A0 02 A0 FD |                 call    #control_write
395b0                 | 
395b0     02 76 07 F6 |                 mov     htmp3, #2
395b4                 | .wait_reset
395b4     AC 99 02 F6 |                 mov     hctwait, _8ms_
395b8     EF 02 A0 FD |                 call    #poll_waitx
395bc     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
395c0     27 EF 03 F6 |                 mov     pb, urx_buff_p
395c4     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
395c8     55 02 A0 FD |                 call    #control_read
395cc     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
395d0     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
395d4     F7 77 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
395d8                 | 
395d8     10 02 D0 FE |                 loc     ptra, #clr_port_feat
395dc     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
395e0     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
395e4     A0 02 A0 FD |                 call    #control_write
395e8                 | 
395e8     24 70 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
395ec                 | .wait_recover
395ec     A7 99 02 F6 |                 mov     hctwait, _1ms_
395f0     EF 02 A0 FD |                 call    #poll_waitx
395f4     FD 71 6F FB |                 djnz    htmp,#.wait_recover
395f8                 | 
395f8     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
395fc     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
39600     0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
39604                 | 
39604     00 08 00 FF 
39608     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
3960c     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
39610     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
39614     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
39618     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
3961c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39620     48 01 90 5D |         if_nz   jmp     #.done
39624                 | .get_dev_desc
39624     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
39628     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
3962c     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
39630     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
39634     2D 71 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
39638     01 71 57 FC |                 wrword  htmp, ptra[wValue]
3963c     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
39640     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39644     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
39648     AC 99 02 F6 |                 mov     hctwait, _8ms_
3964c     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
39650     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
39654     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
39658     BE 00 A0 FD |                 call    #calc_crc5
3965c     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
39660     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
39664     F7 AD C2 FA |                 rdbyte  total_data, pb
39668     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
3966c     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
39670     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39674     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
39678     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
3967c     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
39680                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
39680     9F 99 02 F6 |                 mov     hctwait, _500us_
39684     EF 02 A0 FD |                 call    #poll_waitx
39688     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
3968c     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
39690     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
39694     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
39698     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3969c     CC 00 90 5D |         if_nz   jmp     #.done
396a0     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
396a4     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
396a8     61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
396ac     61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
396b0     00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
396b4     09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
396b8     02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
396bc     56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
396c0     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
396c4     A4 00 90 CD |         if_b    jmp     #.done
396c8     6C F0 BF FD |                 call    #hparse_con_desc
396cc     9C 00 90 FD |                 jmp     #.done
396d0                 | 
396d0                 | .other
396d0     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
396d4     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
396d8     28 00 90 AD |         if_x1   jmp     #.reset_feature
396dc     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
396e0     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
396e4     1C 00 90 AD |         if_x1   jmp     #.reset_feature
396e8     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
396ec     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
396f0     10 00 90 AD |         if_x1   jmp     #.reset_feature
396f4     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
396f8     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
396fc     04 00 90 AD |         if_x1   jmp     #.reset_feature
39700     68 00 90 FD |                 jmp     #.done
39704                 | .reset_feature
39704     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
39708     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3970c     A0 02 A0 FD |                 call    #control_write
39710     58 00 90 FD |                 jmp     #.done
39714                 | .disconnect
39714                 | 
39714     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
39718     00 70 E3 F8 |                 getbyte htmp
3971c     03 70 0F F2 |                 cmp     htmp,#KB_READY wz
39720     05 70 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
39724     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
39728     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
3972c     00 76 06 A6 |         if_z    mov     kb_led_states, #0
39730     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
39734                 |         if EMUPAD_MAX_PLAYER > 0
39734                 |         end
39734                 |         if HAVE_MOUSE
39734     04 70 0F F2 |                 cmp     htmp, #M_READY          wz
39738     05 70 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
3973c     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
39740                 |         end
39740                 |         if HAVE_HIDPAD
39740     14 0A F0 FE |                 loc ptrb,#hidpad_report
39744     2D 71 03 F6 |                 mov htmp,hdev_port
39748     01 70 E7 F2 |                 cmpsub htmp,#1
3974c     1C 70 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
39750     B8 F3 03 F1 |                 add ptrb,htmp
39754     28 0C 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
39758     80 01 6C FC |                 wrlong #0,ptrb
3975c                 |         end
3975c                 | 
3975c     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
39760     00 00 C4 F8 |                 setbyte #0
39764     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
39768     00 00 04 F6 |                 mov     0-0, #0
3976c                 | 
3976c                 | .done
3976c     0E 68 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
39770     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
39774     22 6D 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
39778     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
3977c     A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
39780     A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
39784                 | 
39784     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
39788     27 EF 03 F6 |                 mov     pb, urx_buff_p
3978c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
39790     55 02 A0 FD |                 call    #control_read
39794     00 69 06 FB |                 rdlong  hub_port_status, ptra
39798                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
39798     2D 00 64 FD |                 ret
3979c                 | 
3979c                 | '------------------------------------------------------------------------------
3979c                 | ' Partially populated SETUP packets
3979c                 | '------------------------------------------------------------------------------
3979c     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
3979d     06          |                 byte    REQ_GET_DESC
3979e     00 01       |                 word    TYPE_DEVICE << 8
397a0     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
397a2     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
397a4     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
397a5     06          |                 byte    REQ_GET_DESC
397a6     00 02       |                 word    TYPE_CONFIG << 8
397a8     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
397aa     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
397ac     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
397ad     09          |                 byte    REQ_SET_CONFIG
397ae     00 00       |                 word    0       ' Configuration value
397b0     00 00       |                 word    0       ' Zero
397b2     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
397b4     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
397b5     05          |                 byte    REQ_SET_ADDR
397b6     00 00       |                 word    0       ' Zero
397b8     00 00       |                 word    0       ' Zero
397ba     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
397bc                 | '------------------------------------------------------------------------------
397bc                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
397bc                 | ' wValue field dictates which protocol should be used.
397bc                 | '
397bc                 | ' When initialized, all devices default to report protocol. However the host
397bc                 | ' should not make any assumptions about the device state and should set the
397bc                 | ' desired protocol whenever initializing a device.
397bc                 | '------------------------------------------------------------------------------
397bc     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
397bd     0B          |                 byte    HID_SET_PROTO
397be     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
397c0                 |                                                 ' (HID 1.11 Section 7.2.6).
397c0     00 00       |                 word    0               ' Interface index number.
397c2     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
397c4                 | '------------------------------------------------------------------------------
397c4     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
397c5     0A          |                 byte    HID_SET_IDLE
397c6     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
397c8                 |                                         ' reporting until a change is detected in the report data
397c8                 | 
397c8                 |                                         ' (HID 1.11 Section 7.2.4).
397c8     00 00       |                 word    0       ' Interface index number.
397ca     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
397cc     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
397cd     09          |                 byte    HID_SET_REPORT
397ce     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
397d0                 |                                         ' (HID 1.11 Section 7.2.2).
397d0     00 00       |                 word    0       ' Interface index number.
397d2     00 00       |                 word    0       ' Size of the report, in bytes.
397d4     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
397d5     06          |                 byte    REQ_GET_DESC
397d6     00 22       |                 word    TYPE_REPORT << 8
397d8     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
397da     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
397dc                 | '------------------------------------------------------------------------------
397dc     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
397dd     06          |                 byte    REQ_GET_DESC
397de     00 29       |                 word    TYPE_HUB << 8
397e0     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
397e2     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
397e4     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
397e5     03          |                 byte    REQ_SET_FEATURE
397e6     00 00       |                 word    0       ' port power
397e8     01 00       |                 word    1       ' Port index number (1+)
397ea     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
397ec     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
397ed     01          |                 byte    REQ_CLEAR_FEATURE
397ee     00 00       |                 word    0       ' port power
397f0     01 00       |                 word    1       ' Port index number (1+)
397f2     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
397f4     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
397f5     00          |                 byte    REQ_GET_STATUS
397f6     00 00       |                 word    0
397f8     01 00       |                 word    1       ' Port index number (1+)
397fa     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
397fc                 | '------------------------------------------------------------------------------
397fc                 | if _HAVE_GAMEPAD
397fc     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
39800                 | ps3_command_buff
39800     00 00 00 00 
39804     00          |                 byte    $00, $00, $00, $00, $00
39805     00 00 00 00 
39809     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
3980a     FF 27 10 00 
3980e     32          |                 byte    $FF, $27, $10, $00, $32
3980f     FF 27 10 00 
39813     32          |                 byte    $FF, $27, $10, $00, $32
39814     FF 27 10 00 
39818     32          |                 byte    $FF, $27, $10, $00, $32
39819     FF 27 10 00 
3981d     32          |                 byte    $FF, $27, $10, $00, $32
3981e     00 00 00 00 
39822     00          |                 byte    $00, $00, $00, $00, $00
39823     00 00 00 00 
39827     00          |                 byte    $00, $00, $00, $00, $00
39828     00 00 00 00 
3982c     00          |                 byte    $00, $00, $00, $00, $00
3982d     00 00 00    |                 byte    $00, $00, $00
39830                 | '------------------------------------------------------------------------------
39830     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
39833                 |                                         ' 0x01 All blinking
39833                 |                                         ' 0x02 1 flashes, then on
39833                 |                                         ' 0x03 2 flashes, then on
39833                 |                                         ' 0x04 3 flashes, then on
39833                 |                                         ' 0x05 4 flashes, then on
39833                 |                                         ' 0x06 1 on
39833                 |                                         ' 0x07 2 on
39833                 |                                         ' 0x08 3 on
39833                 |                                         ' 0x09 4 on
39833                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
39833                 |                                         ' 0x0B Blinking*
39833                 |                                         ' 0x0C Slow blinking*
39833                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
39833     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
39836     00          |                 byte    $00             ' Left rumble
39837     00          |                 byte    $00             ' Right rumble
39838     00 00 00    |                 byte    $00, $00, $00
3983b     00          | end
3983c                 | alignl
3983c                 | 
3983c                 | if HAVE_MOUSE
3983c     00 00 00 00 
39840     00 00 00 00 | mouse_limits long 0[2]
39844     00 00 00 00 | mouse_outptr long 0
39848                 | end
39848                 | 
39848                 | if KEYQUEUE_SIZE > 0
39848     00          | keyq_head byte 0
39849     00          | keyq_tail byte 0
3984a     00 00 00 00 
      ...             
39a46     00 00 00 00 
39a4a     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
39a4c                 | alignl
39a4c                 | end
39a4c                 | 
39a4c                 | if EMUPAD_MAX_PLAYER > 0
39a4c                 | emupad_rule_buffer
39a4c                 | if EMUPAD_BUILTIN_RULES
39a4c                 | file "padmap_builtin.dat"
39a4c                 | end
39a4c                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
39a4c                 | '' Default rule directly follows!
39a4c                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
39a4c                 | end
39a4c                 | 
39a4c                 | '------------------------------------------------------------------------------
39a4c                 | ' The USB data cache area gets zero-filled at every device disconnect
39a4c                 | '------------------------------------------------------------------------------
39a4c                 | usb_cache_start
39a4c                 | 
39a4c                 | ' HID descriptor and report buffers
39a4c                 | if !!OVERLAP_MEMORY
39a4c     00 00 00 00 
      ...             
3a144     00 00 00 00 
3a148     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
3a14c                 | end
3a14c     00 00 00 00 
3a150     00 00 00 00 | hkbd_report     byte    0[8]
3a154     00 00 00 00 | hkbd_led_rep    byte    0
3a158                 | alignl
3a158                 | 
3a158                 | if HAVE_HIDPAD
3a158     00 00 00 00 
      ...             
3a214     00 00 00 00 
3a218     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
3a21c                 | end
3a21c                 | 
3a21c                 | ' HUB descriptor
3a21c     00          | hub_descr       byte    0   ' bDescLength
3a21d     00          |                 byte    0   ' bDescriptorType
3a21e     00          |                 byte    0   ' bNbrPorts
3a21f     00 00       |                 word    0   ' wHubCharacteristics
3a221     00          |                 byte    0   ' bPwrOn2PwrGood
3a222     00          |                 byte    0   ' bHubContrCurrent
3a223     00          |                 byte    0   ' DeviceRemoveable
3a224     00          |                 byte    0   ' PortPwrCtrlMask
3a225                 | 
3a225                 | usb_cache_end
3a225                 | 
3a225                 | if HAVE_MOUSE
3a225     00 00 00 00 | mouse_xacc      long 0
3a229     00 00 00 00 | mouse_yacc      long 0
3a22d     00 00 00 00 | mouse_zacc      long 0
3a231     00          | mouse_bstate    byte 0
3a232     00          | mouse_lpending  byte 0
3a233     00          | mouse_rpending  byte 0
3a234     00          | mouse_mpending  byte 0
3a235     00          | mouse_lock      byte 0
3a236     00 00 00    |                 byte 0[3] ' padding
3a239                 | end
3a239                 | 
3a239     00 00 00 00 
      ...             
3a2b1     00 00 00 00 
3a2b5     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
3a2b9     00 00 00 00 
3a2bd     00 00 00 00 
3a2c1     00 00 00 00 
3a2c5     00 00 00 00 
3a2c9     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
3a2cb     00 00 00 00 
      ...             
3a3c3     00 00 00 00 
3a3c7     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
3a3cb                 | 
3a3cb     00          | driver_cog      byte    0                       ' Current driver cog + 1
3a3cc                 | 	alignl
3a3cc                 | _audio096_spin2_dat_
3a3cc                 | 
3a3cc                 | audio       org     0
3a3cc                 | 
3a3cc     61 CD 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
3a3d0     61 1B 06 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
3a3d4     61 27 06 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
3a3d8                 |  
3a3d8     01 EC 63 FD |             cogid   pa                   ' compute cogid
3a3dc     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
3a3e0     F6 CD 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
3a3e4     E6 CA 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
3a3e8                 | 
3a3e8     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
3a3ec     0E 24 06 FC |             wrpin   dac2,#left            ' Noise dither DACs at clk/95
3a3f0     0E 00 1E FC |             wxpin   #256,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
3a3f4     0F 24 06 FC |             wrpin   dac2,#right
3a3f8     0F 00 1E FC |             wxpin   #256,#right    
3a3fc     41 9C 64 FD |             dirh    #left addpins 1
3a400     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
3a404     CD E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
3a408     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
3a40c                 |             
3a40c                 | '---------------------------------------------------------------------------------        
3a40c                 | '----------------- The main loop -------------------------------------------------
3a40c                 | '---------------------------------------------------------------------------------
3a40c                 | 
3a40c     D6 AE 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
3a410     10 00 90 CD |       if_c  jmp     #loop1
3a414                 |   
3a414     09 00 06 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
3a418     D6 00 8E F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
3a41c     D5 00 80 F1 |             sub     0-0,a40000000
3a420     FD 01 6E FB |             djnz    cn,#p402
3a424                 |     
3a424     00 00 06 F6 | loop1       mov     cn,#0               ' Find the channel to compute
3a428     D8 02 02 F6 |             mov     ct,time1            ' with the lowest next sample time
3a42c     D9 02 3A F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
3a430     01 00 06 C6 |     if_c    mov     cn,#1
3a434     DA 02 3A F3 |             fle     ct,time3 wcz
3a438     02 00 06 C6 |     if_c    mov     cn,#2     
3a43c     DB 02 3A F3 |             fle     ct,time4 wcz
3a440     03 00 06 C6 |     if_c    mov     cn,#3
3a444     DC 02 3A F3 |             fle     ct,time5 wcz
3a448     04 00 06 C6 |     if_c    mov     cn,#4
3a44c     DD 02 3A F3 |             fle     ct,time6 wcz
3a450     05 00 06 C6 |     if_c    mov     cn,#5
3a454     DE 02 3A F3 |             fle     ct,time7 wcz
3a458     06 00 06 C6 |     if_c    mov     cn,#6
3a45c     DF 02 3A F3 |             fle     ct,time8 wcz
3a460     07 00 06 C6 |     if_c    mov     cn,#7
3a464                 | 
3a464                 | 
3a464                 | '----------------------------------------------------------------------------------
3a464                 | '------------- Compute channel samples --------------------------------------------
3a464                 | '----------------------------------------------------------------------------------
3a464                 | 
3a464                 | 
3a464     00 C1 01 F6 | p401        mov     channeladd,cn             	' compute the pointer to channel parameters block
3a468     06 C0 65 F0 |             shl     channeladd,#6
3a46c     E0 F0 03 F1 |             add     ptra,channeladd
3a470                 | 
3a470     28 16 64 FD |             setq    #11                        	' read parameters
3a474     00 D7 05 FB |             rdlong  pointer0,ptra
3a478                 |     	    
3a478     1F E4 0D F4 | p408        testb   command0,#31 wz	      	' bit #31 command - set the DAC sample rate
3a47c     18 00 90 5D |     if_nz   jmp     #p404                     	' if not set, proceed
3a480     F2 C4 31 F9 |             getword qq,command0,#0            	' get the new rate
3a484     4E C4 15 FC |             wxpin   qq,#left addpins 1        	' and program the pins
3a488     E2 C4 E1 F8 |             getbyte qq,qq,#0 		      	' check if the rate is n*256
3a48c     00 C4 0D F2 |             cmp     qq,#0 wz                         
3a490     4E 24 06 AC |     if_z    wrpin   dac2,#left addpins 1      	' if yes, set PWM DAC mode
3a494     4E 22 06 5C |     if_nz   wrpin   dac,#left addpins 1       	' else set noise DAC mode
3a498                 |             
3a498     1E E4 1D F4 | p404        bitl    command0,#30 wcz          	' bit #30: select PSRAM/HUB
3a49c     E6 CA 01 56 |     if_nz   mov     mailbox,mailbox2            ' if not set, use PSRAM
3a4a0     00 CA 05 A6 |     if_z    mov     mailbox,#0                  ' if set, use HUB 
3a4a4                 | 
3a4a4     EC 06 32 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
3a4a8     EC 08 3A F9 |             getword oldrs,sample0,#1
3a4ac     F0 FC 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
3a4b0     F0 FA 31 F9 |     	    getword avol0,volpan0,#0
3a4b4     F1 F8 39 F9 |             getword askip0,freqskip0,#1    	    
3a4b8     F1 F6 31 F9 |             getword afreq0,freqskip0,#0
3a4bc                 | 
3a4bc     D8 00 96 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
3a4c0     00 04 02 F6 |             mov     dt0,0-0    
3a4c4     D7 04 82 F1 |             sub     dt0,time0
3a4c8                 |             
3a4c8     D8 00 8E F9 |             altd    cn, #time1                ' add channel period to channel time
3a4cc     FB 00 00 F1 |             add     0-0,afreq0  	
3a4d0                 |             
3a4d0                 | '---- envelopes
3a4d0                 |             
3a4d0     00 E8 1D F2 |             cmp     envptr0,#0 wcz    		' read the pointer
3a4d4     20 00 00 AF 
3a4d8     00 48 06 A6 |     if_z    mov     envs1,##$4000		' if 0, no envelope, load $4000=1 for scas
3a4dc     5C 00 90 AD |     if_z    jmp     #p410			' and run away	
3a4e0                 | 
3a4e0     FB 48 02 F6 |             mov     envs1,afreq0
3a4e4     F5 48 02 FA |             mul     envs1,envspd0
3a4e8     24 E7 01 F1 |             add     envph0,envs1 
3a4ec                 | 
3a4ec     F3 44 02 F6 |       	    mov     envhi, envph0		' move phase acc to high part of env pointer
3a4f0     06 44 46 F0 | 	    shr     envhi,#6			' leave 10 bits in hi
3a4f4     22 47 32 F9 | 	    getword envlo,envhi,#0              ' and 16 bit in lo
3a4f8     10 44 46 F0 | 	    shr     envhi,#16			' move 10 bits of hi to the lower word
3a4fc     F6 44 1A F2 | 	    cmp     envhi,envlen0 wcz		' compare this to envelope length
3a500     F6 44 02 36 |     if_ge   mov     envhi,envlen0		' if greater than, set it at envlen
3a504     00 46 06 36 |     if_ge   mov     envlo,#0
3a508     F6 E6 01 36 |     if_ge   mov     envph0,envlen0
3a50c     16 E6 65 30 |     if_ge   shl     envph0,#22
3a510                 | 
3a510     22 49 02 F6 |             mov     envs1,envhi			' get the phase acc
3a514     01 48 66 F0 |             shl     envs1,#1			' env defs are words, so phase acc*=2
3a518     F4 48 02 F1 |             add     envs1,envptr0		' and add the pointer
3a51c     24 49 02 FB |             rdlong  envs1,envs1			' then read 2 entries
3a520     24 4B 3A F9 |             getword envs2,envs1,#1		' next value
3a524     24 49 32 F9 |             getword envs1,envs1,#0		' current value
3a528     23 4B 02 FA |             mul     envs2,envlo			' linear interpolate : new val x envlo
3a52c     23 47 22 F6 |             not     envlo			' sum of envlo and not envlo is always $FFFF
3a530     23 49 02 FA |             mul     envs1,envlo
3a534     25 49 02 F1 |             add     envs1,envs2
3a538     12 48 46 F0 |             shr     envs1,#18			' normalize it to $4000
3a53c                 |             
3a53c     1B DA 0D F4 | p410        testb   sstart0, #27 wz
3a540     1B C6 61 AD |     if_z    getrnd  spl
3a544     58 00 90 AD |     if_z    jmp     #p406
3a548                 |  
3a548     FC D6 01 F1 |             add     pointer0,askip0           	' compute the pointer to the next sample       
3a54c     EB 42 C2 F8 |             setbyte pointer00,pointer0,#0
3a550     08 D6 45 F0 |             shr     pointer0,#8
3a554                 |          
3a554     1F DA 0D F4 |             testb   sstart0,#31 wz            
3a558     01 D6 65 A0 |     if_z    shl     pointer0,#1        
3a55c     1C DA 0D F4 |             testb   sstart0,#28 wz            
3a560     01 D6 65 A0 |     if_z    shl     pointer0,#1        
3a564                 |         
3a564     EF D6 19 F2 |             cmp     pointer0,lend0 wcz
3a568     EF D6 81 31 |     if_ge   sub     pointer0,lend0	      	' and loop if needed     
3a56c     EE D6 01 31 |     if_ge   add     pointer0,lstart0       
3a570                 |             
3a570     EB C4 01 F6 |             mov     qq,pointer0               	' compute place in the memory from where the sample will be loaded
3a574     ED C4 01 F1 |             add     qq,sstart0            
3a578                 | 
3a578     FF CB 5D F2 |             cmps    mailbox,#$1FF wcz          	' the mailbox has to point somewhere not at the start of HUB RAM
3a57c     E2 C6 E1 EA |     if_le   rdword  spl,qq                     	' if not, use HUB RAM for samples
3a580     1C 01 B0 1D |     if_gt   call    #cache_read
3a584                 |          
3a584     1F DA 0D F4 |             testb   sstart0,#31 wz 
3a588     08 C6 65 50 |     if_nz   shl     spl,#8
3a58c     08 D6 65 50 |     if_nz   shl     pointer0,#8
3a590     07 D6 65 A0 |     if_z    shl     pointer0,#7
3a594     1C DA 0D F4 |             testb   sstart0,#28 wz            
3a598     01 D6 45 A0 |     if_z    shr     pointer0,#1    
3a59c     21 D7 C1 F8 | 	    setbyte pointer0,pointer00,#0       
3a5a0                 | 
3a5a0                 | 
3a5a0     24 C7 31 FA | p406        scas    spl,envs1			' apply envelope
3a5a4     00 C6 01 F6 |             mov     spl,0-0
3a5a8     FD C6 31 FA |             scas    spl,avol0                 	' apply volume
3a5ac     00 C6 01 F6 |             mov     spl,0-0
3a5b0                 | 
3a5b0     FE C6 31 FA |             scas    spl,apan0                 	' apply pan
3a5b4     00 0A 02 F6 |             mov     ls0,0-0
3a5b8     20 00 00 FF 
3a5bc     00 C4 05 F6 |             mov     qq,##16384
3a5c0     FE C4 81 F1 |             sub     qq,apan0
3a5c4     E2 C6 31 FA |             scas    spl,qq
3a5c8     00 0C 02 F6 |             mov     rs0, 0-0
3a5cc                 | 
3a5cc     04 11 82 F1 |             sub     rs,oldrs 		      	' replace the old sample with the new one in the mix
3a5d0     06 11 02 F1 |             add     rs,rs0
3a5d4     03 0F 82 F1 |             sub     ls,oldls
3a5d8     05 0F 02 F1 |             add     ls,ls0
3a5dc                 |    
3a5dc     06 D9 29 F9 |             setword sample0,rs0,#1           	' pack samples into long
3a5e0     05 D9 21 F9 |             setword sample0,ls0,#0
3a5e4                 |             
3a5e4     1E DA 1D F4 |             bitl    sstart0, #30 wcz          	' if bit #30 of start pointer is set, the current pointers needs resetting  
3a5e8     00 D6 05 A6 |     if_z    mov     pointer0, #0  		
3a5ec     00 E6 05 A6 |     if_z    mov     envph0, #0  		' reset also envelope pha and sample value
3a5f0                 |   '  if_z    mov     sample0,#0
3a5f0     02 DB 65 AC |     if_z    wrlong  sstart0, ptra[2]          	' reset bit #30 in hub
3a5f4     1D DA 1D F4 |             bitl    sstart0, #29 wcz	      	' if bit #29 is set, synchronize stereo at channels 1 and 2
3a5f8     04 00 00 AF 
3a5fc     00 B0 05 A1 |     if_z    add     time1,##2048
3a600     D8 B2 01 A6 |     if_z    mov     time2,time1
3a604     02 DB 65 AC |     if_z    wrlong  sstart0,ptra[2]
3a608                 | 
3a608     28 02 64 FD | p403        setq    #1                         	' write new pointer and sample value to the hub
3a60c     00 D7 65 FC |             wrlong  pointer0,ptra
3a610     08 E7 65 FC |             wrlong  envph0,ptra[8]
3a614     E0 F0 83 F1 |             sub     ptra, channeladd         	' reset the pointer to channel parameters
3a618                 |                       
3a618     D7 FE 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
3a61c     FF C3 25 A7 |     if_z    decmod  front, #511          
3a620                 |          
3a620     07 07 32 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
3a624     08 09 32 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
3a628     0F 06 E6 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
3a62c     0F 08 E6 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
3a630                 | 	    
3a630                 | 		    
3a630     03 09 2A F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
3a634     0A 13 02 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
3a638     04 15 02 F6 |             mov     newsample, oldrs       
3a63c                 | 
3a63c     D7 FE 01 F6 |             mov     oldt0,time0              ' update global time
3a640     02 AF 01 F1 |             add     time0,dt0    
3a644                 |                                      
3a644     00 04 0E F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
3a648     D8 FD 9F AD |     if_z    jmp     #loop1
3a64c     02 C5 01 F6 |             mov     qq,dt0
3a650                 | 
3a650                 |     
3a650                 |             
3a650     01 4E 36 F0 | p301        rol     dropper,#1 wc
3a654     40 00 90 3D |     if_nc   jmp     #p399
3a658     FF F3 97 F9 | p398        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
3a65c     00 C2 9D F2 |             cmpr    front, #0-0 wcz
3a660     F4 FF 9F AD |     if_e    jmp     #p398   
3a664                 | 		
3a664     00 1A 0E F2 | 	    cmp     scbase,#0 wz
3a668     20 00 90 AD |     if_z    jmp     #p302	   
3a66c                 |   
3a66c     3F 20 16 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
3a670     0E 1F 02 C6 |     if_c    mov     scptr2,scptr
3a674     02 1E 66 C0 |     if_c    shl     scptr2,#2
3a678     0D 1F 02 C1 |     if_c    add     scptr2,scbase     
3a67c     60 1E 66 FC |             wrlong  scptr2,#$60
3a680     0F 13 62 CC |     if_c    wrlong  oldsample,scptr2
3a684     01 00 00 CF 
3a688     7F 1C 06 C7 |     if_c    incmod  scptr,##639
3a68c                 | 			    
3a68c     E1 12 32 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
3a690     00 00 00 FF 
3a694     FF C3 05 F7 |             incmod  front, ##511
3a698     ED C5 6D FB | p399        djnz    qq,#p301
3a69c                 |             
3a69c     6C FD 9F FD |             jmp     #loop            'loop
3a6a0                 | 
3a6a0                 | '----------------------------------------------------------------------------------
3a6a0                 | '------------- This is the end of the main loop -----------------------------------
3a6a0                 | '----------------------------------------------------------------------------------
3a6a0                 | 
3a6a0                 | '----------------------------------------------------------------------------------
3a6a0                 | '------------- PSRAM cache ----------- --------------------------------------------
3a6a0                 | '----------------------------------------------------------------------------------
3a6a0                 | 
3a6a0                 | ' There are 8 cache pointers for 8 channels
3a6a0                 | ' if 24 higher bits of address=cache, then get a word from the cache
3a6a0                 | ' else load the cache from PSRAM, update the pointer, then read a sample
3a6a0                 | 
3a6a0                 | 
3a6a0     E2 3E E2 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
3a6a4                 |             
3a6a4     E2 40 02 F6 | 	    mov     addrhi,qq		
3a6a8     08 40 46 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
3a6ac     14 01 96 F9 | 	    alts    cn,#cache1            
3a6b0     00 40 0A F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
3a6b4     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
3a6b8                 | 	
3a6b8     14 01 8E F9 | p702	    altd    cn,#cache1			' cache miss. 
3a6bc     20 01 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
3a6c0     20 39 02 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
3a6c4     08 38 66 F0 | 	    shl     cmd,#8
3a6c8     0B 38 3E F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
3a6cc     00 3B 02 F6 |             mov     hubaddr,cn                  ' to the channel cache
3a6d0     08 3A 66 F0 |             shl     hubaddr,#8                  '
3a6d4     13 3B 02 F1 |             add     hubaddr,hubptr 
3a6d8     00 3D 06 F6 |             mov     count,#256                  ' 256 bytes
3a6dc     28 04 64 FD |             setq    #2                          ' write 3 longs
3a6e0     E5 38 62 FC |             wrlong  cmd, mailbox                ' run it
3a6e4     E5 38 02 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
3a6e8     FE 39 B6 FB |             tjs     cmd, #poll1                 ' retry until valid 
3a6ec                 |             
3a6ec                 | 	
3a6ec     00 C5 01 F6 | p701	    mov     qq,cn			' cache hit
3a6f0     08 C4 65 F0 | 	    shl     qq,#8			' compute the cache start
3a6f4     13 C5 01 F1 | 	    add     qq,hubptr
3a6f8     1F C5 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
3a6fc     E2 C6 E1 0A |     _ret_   rdword  spl,qq                      ' read a word
3a700                 |           
3a700                 | 
3a700                 | '--------------------------------------------------------------------------
3a700                 | '------ Interrupt service -------------------------------------------------
3a700                 | '------ Output the sample, get the next one if exists ---------------------
3a700                 | '--------------------------------------------------------------------------
3a700                 | 
3a700     0E CE 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 95 cycles     
3a704     0F D0 25 FC |             wypin   rsample,#right       '4
3a708     E1 F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
3a70c     80 D3 A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
3a710     FF F3 07 57 |     if_ne   incmod  ptrb,#511
3a714     E9 D0 39 59 |     if_ne   getword rsample,lsnext,#1    '13
3a718     E9 CE 31 59 |     if_ne   getword lsample,lsnext,#0    '15
3a71c                 |     
3a71c     F5 FF 3B FB |             reti1                        '17/19 
3a720                 |           
3a720                 | '---------------------------------------------------------------------------
3a720                 | '-------- End of interrupt -------------------------------------------------
3a720                 | '---------------------------------------------------------------------------    
3a720                 | 
3a720                 | 
3a720                 | '---------------------------------------------------------------------------
3a720                 | '------- Variables ---------------------------------------------------------
3a720                 | '---------------------------------------------------------------------------
3a720                 | 
3a720                 | ' constants
3a720                 | 
3a720     00 00 00 40 | a40000000   long $40000000
3a724     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
3a728                 | 
3a728                 | ' Time variables
3a728                 | 
3a728     00 00 00 00 | time0       long 0    ' Global sample computing time
3a72c     01 00 00 00 | time1       long 1    ' Local channels time
3a730     02 00 00 00 | time2       long 2
3a734     03 00 00 00 | time3       long 3
3a738     04 00 00 00 | time4       long 4
3a73c     05 00 00 00 | time5       long 5
3a740     06 00 00 00 | time6       long 6
3a744     07 00 00 00 | time7       long 7
3a748     08 00 00 00 | time8       long 8
3a74c                 | 
3a74c     00 00 00 00 | channeladd long 0
3a750                 | 
3a750     00 00 00 00 | front       long 0
3a754                 | 
3a754                 | ' temporary variables 
3a754     00 00 00 00 | qq          long 0
3a758     00 00 00 00 | spl         long 0
3a75c     00 00 00 00 | zero        long 0
3a760     00 00 00 00 | mailbox     long 0
3a764     00 00 00 00 | mailbox2 long 0
3a768                 | 
3a768                 | ' Interrupt ISR variables
3a768                 | 
3a768     00 00 00 00 | lsample     long 0
3a76c     00 00 00 00 | rsample     long 0
3a770     00 00 00 00 | lsnext      long 0
3a774     00 00 00 00 | rsnext      long 0 
3a778                 | 
3a778                 | ' channel parameter block
3a778                 | 
3a778     00 00 00 00 | pointer0    long 0     
3a77c     00 00 00 00 | sample0     long 0
3a780     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
3a784     00 00 00 00 | lstart0     long 0
3a788     00 00 00 00 | lend0       long 0
3a78c     00 00 00 00 | volpan0     long 0
3a790     00 00 00 00 | freqskip0   long 0
3a794     00 00 00 00 | command0    long 0
3a798     00 00 00 00 | envph0	    long 0
3a79c     00 00 00 00 | envptr0	    long 0
3a7a0     00 00 00 00 | envspd0	    long 0
3a7a4     00 00 00 00 | envlen0	    long 0
3a7a8     00 00 00 00 | res5	    long 0
3a7ac     00 00 00 00 | res6	    long 0
3a7b0     00 00 00 00 | res7	    long 0
3a7b4     00 00 00 00 | res8	    long 0
3a7b8                 | 
3a7b8     00 00 00 00 | afreq0      long 0
3a7bc     00 00 00 00 | askip0      long 0
3a7c0     00 00 00 00 | avol0       long 0
3a7c4     00 00 00 00 | apan0       long 0
3a7c8                 | 
3a7c8     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
3a7cc     00 00 00 00 | cn          long 0
3a7d0     00 00 00 00 | ct          long 0
3a7d4     00 00 00 00 | dt0         long 0
3a7d8                 | 
3a7d8                 | ' Samples
3a7d8     00 00 00 00 | oldls       long 0
3a7dc     00 00 00 00 | oldrs       long 0
3a7e0                 | 
3a7e0     00 00 00 00 | ls0         long 0
3a7e4     00 00 00 00 | rs0         long 0
3a7e8                 | 
3a7e8     00 00 00 00 | ls          long 0    
3a7ec     00 00 00 00 | rs          long 0
3a7f0                 | 
3a7f0     00 00 00 00 | oldsample   long 0
3a7f4     00 00 00 00 | newsample   long 0
3a7f8                 | 
3a7f8     00 00 00 00 | nrsample    long 0
3a7fc     00 00 00 00 | nlsample    long 0
3a800                 | 
3a800     00 00 00 00 | scbase long 0
3a804     00 00 00 00 | scptr long 0
3a808     00 00 00 00 | scptr2 long 0
3a80c     00 00 00 00 | scope long 0
3a810                 | 
3a810     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
3a814     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
3a818                 | 
3a818     00 18 07 00 | hubptr      long $71800
3a81c     00 00 00 00 | cache1      long 0
3a820     00 00 00 00 | cache2      long 0
3a824     00 00 00 00 | cache3      long 0
3a828     00 00 00 00 | cache4      long 0
3a82c     00 00 00 00 | cache5      long 0
3a830     00 00 00 00 | cache6      long 0
3a834     00 00 00 00 | cache7      long 0
3a838     00 00 00 00 | cache8      long 0
3a83c                 | 
3a83c                 | 
3a83c     00 00 00 00 | cmd         long 0
3a840     00 00 00 00 | hubaddr     long 0
3a844     00 01 00 00 | count       long 256
3a848     00 00 00 00 | addrlo long 0
3a84c     00 00 00 00 | addrhi long 0
3a850     00 00 00 00 | pointer00 long 0
3a854     00 00 00 00 | envhi long 0
3a858     00 00 00 00 | envlo long 0
3a85c     00 00 00 00 | envs1 long 0
3a860     00 00 00 00 | envs2 long 0
3a864     00 00 00 00 | noise0 long 0
3a868     92 92 92 92 | dropper long %10010010_10010010_10010010_10010010
3a86c     00 00 00 00 
3a870     00 00 00 00 | null  			long 	0,0           ' for channel reset
3a874                 | 	alignl
3a874                 | __system__dat_
3a874     00 00 00 00 
3a878     00 00 00 00 | 	byte	$00[8]
3a87c     03 00 00 00 
3a880     00 00 00 00 
3a884     00 00 00 00 
3a888     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a88c     00 00 00 00 
      ...             
3ab18     00 00 00 00 
3ab1c     00 00 00 00 | 	byte	$00[660]
3ab20     00 00 50 09 | 	long	(149 {__system____root_opendir})<<20
3ab24     00 00 60 09 | 	long	(150 {__system____root_closedir})<<20
3ab28     00 00 70 09 | 	long	(151 {__system____root_readdir})<<20
3ab2c     00 00 80 09 | 	long	(152 {__system____root_stat})<<20
3ab30     00 00 00 00 
3ab34     00 00 00 00 
3ab38     00 00 00 00 
3ab3c     00 00 00 00 
3ab40     00 00 00 00 
3ab44     00 00 00 00 
3ab48     00 00 00 00 | 	byte	$00[28]
3ab4c     B4 AB 03 00 | 	long	@@@__system__dat_ + 832
3ab50     B7 AB 03 00 | 	long	@@@__system__dat_ + 835
3ab54     D8 AB 03 00 | 	long	@@@__system__dat_ + 868
3ab58     F1 AB 03 00 | 	long	@@@__system__dat_ + 893
3ab5c     0C AC 03 00 | 	long	@@@__system__dat_ + 920
3ab60     26 AC 03 00 | 	long	@@@__system__dat_ + 946
3ab64     36 AC 03 00 | 	long	@@@__system__dat_ + 962
3ab68     48 AC 03 00 | 	long	@@@__system__dat_ + 980
3ab6c     5A AC 03 00 | 	long	@@@__system__dat_ + 998
3ab70     6C AC 03 00 | 	long	@@@__system__dat_ + 1016
3ab74     78 AC 03 00 | 	long	@@@__system__dat_ + 1028
3ab78     89 AC 03 00 | 	long	@@@__system__dat_ + 1045
3ab7c     9D AC 03 00 | 	long	@@@__system__dat_ + 1065
3ab80     A7 AC 03 00 | 	long	@@@__system__dat_ + 1075
3ab84     B7 AC 03 00 | 	long	@@@__system__dat_ + 1091
3ab88     C6 AC 03 00 | 	long	@@@__system__dat_ + 1106
3ab8c     DC AC 03 00 | 	long	@@@__system__dat_ + 1128
3ab90     F5 AC 03 00 | 	long	@@@__system__dat_ + 1153
3ab94     09 AD 03 00 | 	long	@@@__system__dat_ + 1173
3ab98     17 AD 03 00 | 	long	@@@__system__dat_ + 1187
3ab9c     2B AD 03 00 | 	long	@@@__system__dat_ + 1207
3aba0     37 AD 03 00 | 	long	@@@__system__dat_ + 1219
3aba4     49 AD 03 00 | 	long	@@@__system__dat_ + 1237
3aba8     61 AD 03 00 | 	long	@@@__system__dat_ + 1261
3abac     73 AD 03 00 | 	long	@@@__system__dat_ + 1279
3abb0     86 AD 03 00 | 	long	@@@__system__dat_ + 1298
3abb4     4F 4B 00 4E 
3abb8     75 6D 65 72 
3abbc     69 63 61 6C 
3abc0     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
3abc4     75 6D 65 6E 
3abc8     74 20 6F 75 
3abcc     74 20 6F 66 
3abd0     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
3abd4     61 69 6E 00 
3abd8     52 65 73 75 
3abdc     6C 74 20 6E 
3abe0     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
3abe4     65 70 72 65 
3abe8     73 65 6E 74 
3abec     61 62 6C 65 
3abf0     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
3abf4     65 67 61 6C 
3abf8     20 6D 75 6C 
3abfc     74 69 62 79 
3ac00     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
3ac04     65 71 75 65 
3ac08     6E 63 65 00 
3ac0c     4E 6F 20 73 
3ac10     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
3ac14     66 69 6C 65 
3ac18     20 6F 72 20 
3ac1c     64 69 72 65 
3ac20     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
3ac24     79 00 42 61 
3ac28     64 20 66 69 
3ac2c     6C 65 20 6E 
3ac30     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
3ac34     72 00 50 65 
3ac38     72 6D 69 73 
3ac3c     73 69 6F 6E 
3ac40     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
3ac44     69 65 64 00 
3ac48     4E 6F 74 20 
3ac4c     65 6E 6F 75 
3ac50     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
3ac54     65 6D 6F 72 
3ac58     79 00 54 65 
3ac5c     6D 70 6F 72 
3ac60     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
3ac64     66 61 69 6C 
3ac68     75 72 65 00 
3ac6c     46 69 6C 65 
3ac70     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
3ac74     73 74 73 00 
3ac78     49 6E 76 61 
3ac7c     6C 69 64 20 
3ac80     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
3ac84     6D 65 6E 74 
3ac88     00 54 6F 6F 
3ac8c     20 6D 61 6E 
3ac90     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
3ac94     65 6E 20 66 
3ac98     69 6C 65 73 
3ac9c     00 49 2F 4F 
3aca0     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
3aca4     6F 72 00 4E 
3aca8     6F 74 20 61 
3acac     20 64 69 72 
3acb0     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
3acb4     72 79 00 49 
3acb8     73 20 61 20 
3acbc     64 69 72 65 
3acc0     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
3acc4     79 00 52 65 
3acc8     61 64 20 6F 
3accc     6E 6C 79 20 
3acd0     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
3acd4     20 73 79 73 
3acd8     74 65 6D 00 
3acdc     46 75 6E 63 
3ace0     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
3ace4     20 6E 6F 74 
3ace8     20 69 6D 70 
3acec     6C 65 6D 65 
3acf0     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
3acf4     00 44 69 72 
3acf8     65 63 74 6F 
3acfc     72 79 20 6E 
3ad00     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
3ad04     6D 70 74 79 
3ad08     00 4E 61 6D 
3ad0c     65 20 74 6F 
3ad10     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
3ad14     6E 67 00 44 
3ad18     65 76 69 63 
3ad1c     65 20 6E 6F 
3ad20     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
3ad24     65 6B 61 62 
3ad28     6C 65 00 42 
3ad2c     61 64 20 61 
3ad30     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
3ad34     73 73 00 42 
3ad38     72 6F 6B 65 
3ad3c     6E 20 63 6F 
3ad40     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
3ad44     74 69 6F 6E 
3ad48     00 44 65 76 
3ad4c     69 63 65 20 
3ad50     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
3ad54     65 73 6F 75 
3ad58     72 63 65 20 
3ad5c     62 75 73 79 
3ad60     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
3ad64     73 73 20 64 
3ad68     65 76 69 63 
3ad6c     65 20 6C 69 
3ad70     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
3ad74     6F 20 73 70 
3ad78     61 63 65 20 
3ad7c     6F 6E 20 64 
3ad80     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
3ad84     65 00 55 6E 
3ad88     6B 6E 6F 77 
3ad8c     6E 20 65 72 
3ad90     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
3ad94     00 00 00 00 
3ad98     00 00 00 00 | 	byte	$00[8]
3ad9c     05 00 00 00 
3ada0     00 00 00 00 
3ada4     00 00 00 00 
3ada8     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3adac     00 00 00 00 | 	byte	$00, $00, $00, $00
3adb0     00 00 D0 0A | 	long	(173 {__system___tx})<<20
3adb4     00 00 E0 0A | 	long	(174 {__system___rx})<<20
3adb8     00 00 00 00 | 	byte	$00, $00, $00, $00
3adbc     00 00 F0 0A | 	long	(175 {__system___rxtxioctl_0696})<<20
3adc0     00 00 00 0B | 	long	(176 {__system____dummy_flush_0697})<<20
3adc4     00 00 00 00 
3adc8     00 00 00 00 | 	byte	$00[8]
3adcc     01 00 00 00 
3add0     06 00 00 00 
3add4     00 00 00 00 
3add8     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3addc     00 00 00 00 
3ade0     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3ade4     00 00 D0 0A | 	long	(173 {__system___tx})<<20
3ade8     00 00 E0 0A | 	long	(174 {__system___rx})<<20
3adec     00 00 00 00 | 	byte	$00, $00, $00, $00
3adf0     00 00 F0 0A | 	long	(175 {__system___rxtxioctl_0696})<<20
3adf4     00 00 00 0B | 	long	(176 {__system____dummy_flush_0697})<<20
3adf8     00 00 00 00 
3adfc     00 00 00 00 | 	byte	$00[8]
3ae00     01 00 00 00 
3ae04     06 00 00 00 
3ae08     00 00 00 00 
3ae0c     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ae10     00 00 00 00 
3ae14     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3ae18     00 00 D0 0A | 	long	(173 {__system___tx})<<20
3ae1c     00 00 E0 0A | 	long	(174 {__system___rx})<<20
3ae20     00 00 00 00 | 	byte	$00, $00, $00, $00
3ae24     00 00 F0 0A | 	long	(175 {__system___rxtxioctl_0696})<<20
3ae28     00 00 00 0B | 	long	(176 {__system____dummy_flush_0697})<<20
3ae2c     00 00 00 00 
      ...             
3af9c     00 00 00 00 
3afa0     00 00 00 00 | 	byte	$00[376]
3afa4     A8 AF 03 00 | 	long	@@@__system__dat_ + 1844
3afa8     00 00 00 00 
3afac     00 00 00 00 
3afb0     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3afb4                 | 	alignl
3afb4                 | _fatfs_cc_dat_
3afb4     C7 00 FC 00 
3afb8     E9 00 E2 00 
3afbc     E4 00 E0 00 
3afc0     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
3afc4     EA 00 EB 00 
3afc8     E8 00 EF 00 
3afcc     EE 00 EC 00 
3afd0     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
3afd4     C9 00 E6 00 
3afd8     C6 00 F4 00 
3afdc     F6 00 F2 00 
3afe0     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
3afe4     FF 00 D6 00 
3afe8     DC 00 F8 00 
3afec     A3 00 D8 00 
3aff0     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
3aff4     E1 00 ED 00 
3aff8     F3 00 FA 00 
3affc     F1 00 D1 00 
3b000     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
3b004     BF 00 AE 00 
3b008     AC 00 BD 00 
3b00c     BC 00 A1 00 
3b010     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
3b014     91 25 92 25 
3b018     93 25 02 25 
3b01c     24 25 C1 00 
3b020     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
3b024     A9 00 63 25 
3b028     51 25 57 25 
3b02c     5D 25 A2 00 
3b030     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
3b034     14 25 34 25 
3b038     2C 25 1C 25 
3b03c     00 25 3C 25 
3b040     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
3b044     5A 25 54 25 
3b048     69 25 66 25 
3b04c     60 25 50 25 
3b050     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
3b054     F0 00 D0 00 
3b058     CA 00 CB 00 
3b05c     C8 00 31 01 
3b060     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
3b064     CF 00 18 25 
3b068     0C 25 88 25 
3b06c     84 25 A6 00 
3b070     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
3b074     D3 00 DF 00 
3b078     D4 00 D2 00 
3b07c     F5 00 D5 00 
3b080     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
3b084     DE 00 DA 00 
3b088     DB 00 D9 00 
3b08c     FD 00 DD 00 
3b090     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
3b094     AD 00 B1 00 
3b098     17 20 BE 00 
3b09c     B6 00 A7 00 
3b0a0     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
3b0a4     B0 00 A8 00 
3b0a8     B7 00 B9 00 
3b0ac     B3 00 B2 00 
3b0b0     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
3b0b4     61 00 1A 03 
3b0b8     E0 00 17 03 
3b0bc     F8 00 07 03 
3b0c0     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
3b0c4     78 01 00 01 
3b0c8     30 01 32 01 
3b0cc     06 01 39 01 
3b0d0     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
3b0d4     2E 01 79 01 
3b0d8     06 01 80 01 
3b0dc     4D 00 43 02 
3b0e0     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
3b0e4     82 01 84 01 
3b0e8     84 01 86 01 
3b0ec     87 01 87 01 
3b0f0     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
3b0f4     8B 01 8B 01 
3b0f8     8D 01 8E 01 
3b0fc     8F 01 90 01 
3b100     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
3b104     93 01 94 01 
3b108     F6 01 96 01 
3b10c     97 01 98 01 
3b110     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
3b114     9B 01 9C 01 
3b118     9D 01 20 02 
3b11c     9F 01 A0 01 
3b120     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
3b124     A2 01 A4 01 
3b128     A4 01 A6 01 
3b12c     A7 01 A7 01 
3b130     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
3b134     AB 01 AC 01 
3b138     AC 01 AE 01 
3b13c     AF 01 AF 01 
3b140     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
3b144     B3 01 B3 01 
3b148     B5 01 B5 01 
3b14c     B7 01 B8 01 
3b150     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
3b154     BB 01 BC 01 
3b158     BC 01 BE 01 
3b15c     F7 01 C0 01 
3b160     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
3b164     C3 01 C4 01 
3b168     C5 01 C4 01 
3b16c     C7 01 C8 01 
3b170     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
3b174     CB 01 CA 01 
3b178     CD 01 10 01 
3b17c     DD 01 01 00 
3b180     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
3b184     12 01 F3 01 
3b188     03 00 F1 01 
3b18c     F4 01 F4 01 
3b190     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
3b194     22 02 12 01 
3b198     3A 02 09 00 
3b19c     65 2C 3B 02 
3b1a0     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
3b1a4     66 2C 3F 02 
3b1a8     40 02 41 02 
3b1ac     41 02 46 02 
3b1b0     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
3b1b4     40 00 81 01 
3b1b8     86 01 55 02 
3b1bc     89 01 8A 01 
3b1c0     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
3b1c4     5A 02 90 01 
3b1c8     5C 02 5D 02 
3b1cc     5E 02 5F 02 
3b1d0     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
3b1d4     62 02 94 01 
3b1d8     64 02 65 02 
3b1dc     66 02 67 02 
3b1e0     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
3b1e4     6A 02 62 2C 
3b1e8     6C 02 6D 02 
3b1ec     6E 02 9C 01 
3b1f0     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
3b1f4     9D 01 73 02 
3b1f8     74 02 9F 01 
3b1fc     76 02 77 02 
3b200     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
3b204     7A 02 7B 02 
3b208     7C 02 64 2C 
3b20c     7E 02 7F 02 
3b210     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
3b214     82 02 A9 01 
3b218     84 02 85 02 
3b21c     86 02 87 02 
3b220     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
3b224     B1 01 B2 01 
3b228     45 02 8D 02 
3b22c     8E 02 8F 02 
3b230     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
3b234     B7 01 7B 03 
3b238     03 00 FD 03 
3b23c     FE 03 FF 03 
3b240     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
3b244     86 03 88 03 
3b248     89 03 8A 03 
3b24c     B1 03 11 03 
3b250     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
3b254     A3 03 A3 03 
3b258     C4 03 08 03 
3b25c     CC 03 03 00 
3b260     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
3b264     8F 03 D8 03 
3b268     18 01 F2 03 
3b26c     0A 00 F9 03 
3b270     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
3b274     F5 03 F6 03 
3b278     F7 03 F7 03 
3b27c     F9 03 FA 03 
3b280     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
3b284     20 03 50 04 
3b288     10 07 60 04 
3b28c     22 01 8A 04 
3b290     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
3b294     0E 01 CF 04 
3b298     01 00 C0 04 
3b29c     D0 04 44 01 
3b2a0     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
3b2a4     00 00 7D 1D 
3b2a8     01 00 63 2C 
3b2ac     00 1E 96 01 
3b2b0     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
3b2b4     00 1F 08 06 
3b2b8     10 1F 06 06 
3b2bc     20 1F 08 06 
3b2c0     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
3b2c4     40 1F 06 06 
3b2c8     51 1F 07 00 
3b2cc     59 1F 52 1F 
3b2d0     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
3b2d4     5D 1F 56 1F 
3b2d8     5F 1F 60 1F 
3b2dc     08 06 70 1F 
3b2e0     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
3b2e4     BB 1F C8 1F 
3b2e8     C9 1F CA 1F 
3b2ec     CB 1F DA 1F 
3b2f0     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
3b2f4     F9 1F EA 1F 
3b2f8     EB 1F FA 1F 
3b2fc     FB 1F 80 1F 
3b300     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
3b304     08 06 A0 1F 
3b308     08 06 B0 1F 
3b30c     04 00 B8 1F 
3b310     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
3b314     BC 1F CC 1F 
3b318     01 00 C3 1F 
3b31c     D0 1F 02 06 
3b320     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
3b324     E5 1F 01 00 
3b328     EC 1F F3 1F 
3b32c     01 00 FC 1F 
3b330     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
3b334     32 21 70 21 
3b338     10 02 84 21 
3b33c     01 00 83 21 
3b340     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
3b344     30 2C 2F 04 
3b348     60 2C 02 01 
3b34c     67 2C 06 01 
3b350     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
3b354     80 2C 64 01 
3b358     00 2D 26 08 
3b35c     41 FF 1A 03 
3b360     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
3b364     05 07 09 0E 
3b368     10 12 14 16 
3b36c     18 1C 1E 43 
3b370     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
3b374     41 41 43 45 
3b378     45 45 49 49 
3b37c     49 41 41 45 
3b380     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
3b384     4F 55 55 59 
3b388     4F 55 4F 9C 
3b38c     4F 9E 9F 41 
3b390     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
3b394     A5 A6 A7 A8 
3b398     A9 AA AB AC 
3b39c     AD AE AF B0 
3b3a0     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
3b3a4     41 41 41 B8 
3b3a8     B9 BA BB BC 
3b3ac     BD BE BF C0 
3b3b0     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
3b3b4     C5 41 41 C8 
3b3b8     C9 CA CB CC 
3b3bc     CD CE CF D1 
3b3c0     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
3b3c4     49 49 49 49 
3b3c8     D9 DA DB DC 
3b3cc     DD 49 DF 4F 
3b3d0     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
3b3d4     4F E6 E8 E8 
3b3d8     55 55 55 59 
3b3dc     59 EE EF F0 
3b3e0     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
3b3e4     F5 F6 F7 F8 
3b3e8     F9 FA FB FC 
3b3ec     FD FE FF 00 
3b3f0     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
3b3f4     00 00 00 00 | 	byte	$00, $00, $00, $00
3b3f8     00 00 C0 09 | 	long	(156 {_fatfs_cc_v_close})<<20
3b3fc     00 00 D0 09 | 	long	(157 {_fatfs_cc_v_read})<<20
3b400     00 00 E0 09 | 	long	(158 {_fatfs_cc_v_write})<<20
3b404     00 00 F0 09 | 	long	(159 {_fatfs_cc_v_lseek})<<20
3b408     00 00 00 0A | 	long	(160 {_fatfs_cc_v_ioctl})<<20
3b40c     00 00 10 0B | 	long	(177 {_fatfs_cc_v_flush})<<20
3b410     00 00 00 00 
3b414     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3b418     00 00 10 0A | 	long	(161 {_fatfs_cc_v_open})<<20
3b41c     00 00 20 0A | 	long	(162 {_fatfs_cc_v_creat})<<20
3b420     00 00 30 0A | 	long	(163 {_fatfs_cc_v_opendir})<<20
3b424     00 00 40 0A | 	long	(164 {_fatfs_cc_v_closedir})<<20
3b428     00 00 50 0A | 	long	(165 {_fatfs_cc_v_readdir})<<20
3b42c     00 00 60 0A | 	long	(166 {_fatfs_cc_v_stat})<<20
3b430     00 00 70 0A | 	long	(167 {_fatfs_cc_v_mkdir})<<20
3b434     00 00 80 0A | 	long	(168 {_fatfs_cc_v_rmdir})<<20
3b438     00 00 90 0A | 	long	(169 {_fatfs_cc_v_remove})<<20
3b43c     00 00 A0 0A | 	long	(170 {_fatfs_cc_v_rename})<<20
3b440     00 00 B0 0A | 	long	(171 {_fatfs_cc_v_init})<<20
3b444     00 00 C0 0A | 	long	(172 {_fatfs_cc_v_deinit})<<20
3b448     FF FF FF FF 
3b44c     1F 00 00 00 
3b450     1C 00 00 00 
3b454     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
3b458     1E 00 00 00 
3b45c     1F 00 00 00 
3b460     1E 00 00 00 
3b464     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
3b468     1F 00 00 00 
3b46c     1E 00 00 00 
3b470     1F 00 00 00 
3b474     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
3b478     1F 00 00 00 
3b47c     00 00 00 00 
3b480     1F 00 00 00 
3b484     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
3b488     5A 00 00 00 
3b48c     78 00 00 00 
3b490     97 00 00 00 
3b494     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
3b498     D4 00 00 00 
3b49c     F3 00 00 00 
3b4a0     11 01 00 00 
3b4a4     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
3b4a8     4E 01 00 00 
3b4ac     6D 01 00 00 
3b4b0     FF FF FF FF 
3b4b4     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
3b4b8     00 00 00 00 
      ...             
3b4d0     00 00 00 00 
3b4d4     00 00 00 00 | 	byte	$00[32]
3b4d8     F6 B4 03 00 | 	long	@@@_fatfs_cc_dat_ + 1346
3b4dc     FA B4 03 00 | 	long	@@@_fatfs_cc_dat_ + 1350
3b4e0     00 00 00 00 
3b4e4     00 00 00 00 
3b4e8     00 00 00 00 
3b4ec     00 00 00 00 
3b4f0     00 00       | 	byte	$00[18]
3b4f2     3F 3F 3F 00 
3b4f6     55 43 54 00 
3b4fa     55 43 54 00 
3b4fe     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
3b502     00 00 00 00 
3b506     00 00 00    | 	byte	$00[7]
3b509     CA 9A 3B 00 
3b50d     00 00 00 01 
3b511     01 01 01 01 
3b515     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
3b519     91 11 11 11 
3b51d     11 01 01 01 
3b521     01 01 01 01 
3b525     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
3b529     01 01 01 01 
3b52d     01 01 01    | 	byte	$01[7]
3b530     90 20 20 20 
3b534     20 20 20 20 
3b538     20 20 20 20 
3b53c     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
3b540     42 42 42 42 
3b544     42 42 42 42 
3b548     42 42       | 	byte	$42[10]
3b54a     20 20 20 20 
3b54e     20 20 20    | 	byte	$20[7]
3b551     44 44 44 44 
3b555     44 44       | 	byte	$44[6]
3b557     04 04 04 04 
3b55b     04 04 04 04 
3b55f     04 04 04 04 
3b563     04 04 04 04 
3b567     04 04 04 04 | 	byte	$04[20]
3b56b     20 20 20 20 
3b56f     20 20       | 	byte	$20[6]
3b571     48 48 48 48 
3b575     48 48       | 	byte	$48[6]
3b577     08 08 08 08 
3b57b     08 08 08 08 
3b57f     08 08 08 08 
3b583     08 08 08 08 
3b587     08 08 08 08 | 	byte	$08[20]
3b58b     20 20 20 20 
3b58f     01 00 00 00 
3b593     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
3b594                 | __methodtable__
3b594     8C 1F 01 00 | 	long	@_do_no_command
3b598     AC 7C 01 00 | 	long	@_do_plus
3b59c     A8 71 01 00 | 	long	@_do_minus
3b5a0     94 7B 01 00 | 	long	@_do_or
3b5a4     28 78 01 00 | 	long	@_do_mul
3b5a8     E0 6F 01 00 | 	long	@_do_fdiv
3b5ac     A8 6C 01 00 | 	long	@_do_and
3b5b0     C0 6D 01 00 | 	long	@_do_div
3b5b4     08 76 01 00 | 	long	@_do_mod
3b5b8     98 81 01 00 | 	long	@_do_shl
3b5bc     B0 82 01 00 | 	long	@_do_shr
3b5c0     C8 83 01 00 | 	long	@_do_power
3b5c4     00 63 01 00 | 	long	@_do_getvar
3b5c8     64 38 01 00 | 	long	@_do_push
3b5cc     00 5D 01 00 | 	long	@_do_assign
3b5d0     68 D3 00 00 | 	long	@_do_cls
3b5d4     A8 19 01 00 | 	long	@_do_new
3b5d8     0C 32 01 00 | 	long	@_do_plot
3b5dc     88 F2 00 00 | 	long	@_do_draw
3b5e0     14 33 01 00 | 	long	@_do_print
3b5e4     48 D1 00 00 | 	long	@_do_circle
3b5e8     90 A2 01 00 | 	long	@_do_fcircle
3b5ec     F4 C5 00 00 | 	long	@_do_box
3b5f0     C8 A5 01 00 | 	long	@_do_frame
3b5f4     A8 D3 00 00 | 	long	@_do_color
3b5f8     98 F4 00 00 | 	long	@_do_for
3b5fc     C8 1B 01 00 | 	long	@_do_next
3b600     00 0E 01 00 | 	long	@_do_list
3b604     84 44 01 00 | 	long	@_do_run
3b608     C0 F3 00 00 | 	long	@_do_error
3b60c     8C 01 01 00 | 	long	@_do_fast_goto
3b610     7C 02 01 00 | 	long	@_do_find_goto
3b614     8C 04 01 00 | 	long	@_do_slow_goto
3b618     98 1F 01 00 | 	long	@_do_nothing
3b61c     18 BB 00 00 | 	long	@_test_csave
3b620     38 48 01 00 | 	long	@_do_save
3b624     9C 10 01 00 | 	long	@_do_load
3b628     48 25 01 00 | 	long	@_do_pinwrite
3b62c     78 B2 01 00 | 	long	@_do_waitms
3b630     B4 B3 01 00 | 	long	@_do_waitvbl
3b634     E4 B3 01 00 | 	long	@_do_if
3b638     C8 B4 01 00 | 	long	@_do_else
3b63c     90 85 01 00 | 	long	@_do_eq
3b640     08 94 01 00 | 	long	@_do_ge
3b644     E0 98 01 00 | 	long	@_do_le
3b648     68 8A 01 00 | 	long	@_do_gt
3b64c     40 8F 01 00 | 	long	@_do_lt
3b650     B8 9D 01 00 | 	long	@_do_ne
3b654     F4 41 01 00 | 	long	@_do_rnd
3b658     DC C7 00 00 | 	long	@_do_brun
3b65c     80 C3 00 00 | 	long	@_do_beep
3b660     90 EC 00 00 | 	long	@_do_dir
3b664     B0 A7 01 00 | 	long	@_do_paper
3b668     38 A8 01 00 | 	long	@_do_ink
3b66c     D4 A8 01 00 | 	long	@_do_font
3b670     50 A9 01 00 | 	long	@_do_mode
3b674     64 18 01 00 | 	long	@_do_mouse
3b678     0C 00 01 00 | 	long	@_do_gettime
3b67c     00 D5 00 00 | 	long	@_do_cursor
3b680     C0 D2 00 00 | 	long	@_do_click
3b684     20 19 01 00 | 	long	@_do_mousex
3b688     64 19 01 00 | 	long	@_do_mousey
3b68c     98 18 01 00 | 	long	@_do_mousek
3b690     DC 18 01 00 | 	long	@_do_mousew
3b694     80 51 01 00 | 	long	@_do_sin
3b698     68 54 01 00 | 	long	@_do_stick
3b69c     EC 55 01 00 | 	long	@_do_strig
3b6a0     8C 52 01 00 | 	long	@_do_sprite
3b6a4     1C E9 00 00 | 	long	@_do_defsprite
3b6a8     BC FE 00 00 | 	long	@_do_getpixel
3b6ac     C0 B3 01 00 | 	long	@_do_waitclock
3b6b0     58 75 01 00 | 	long	@_do_negative
3b6b4     C0 3E 01 00 | 	long	@_do_rdpin
3b6b8     10 44 01 00 | 	long	@_do_rqpin
3b6bc     74 23 01 00 | 	long	@_do_pinread
3b6c0     80 5B 01 00 | 	long	@_do_wrpin
3b6c4     00 5C 01 00 | 	long	@_do_wxpin
3b6c8     80 5C 01 00 | 	long	@_do_wypin
3b6cc     B4 22 01 00 | 	long	@_do_pinfloat
3b6d0     34 23 01 00 | 	long	@_do_pinlo
3b6d4     F4 22 01 00 | 	long	@_do_pinhi
3b6d8     F8 23 01 00 | 	long	@_do_pinstart
3b6dc     08 25 01 00 | 	long	@_do_pintoggle
3b6e0     FC AC 01 00 | 	long	@_do_position
3b6e4     E0 D3 00 00 | 	long	@_do_cos
3b6e8     70 57 01 00 | 	long	@_do_tan
3b6ec     6C C2 00 00 | 	long	@_do_atn
3b6f0     60 C1 00 00 | 	long	@_do_asin
3b6f4     FC BE 00 00 | 	long	@_do_acos
3b6f8     78 53 01 00 | 	long	@_do_sqr
3b6fc     08 A4 01 00 | 	long	@_do_fill
3b700     30 E0 00 00 | 	long	@_do_defsnd
3b704     34 D5 00 00 | 	long	@_do_defenv
3b708     EC B4 01 00 | 	long	@_do_rad
3b70c     14 B5 01 00 | 	long	@_do_deg
3b710     54 0A 01 00 | 	long	@_do_int
3b714     D0 25 01 00 | 	long	@_do_play
3b718     D8 4B 01 00 | 	long	@_do_setdelay
3b71c     80 4C 01 00 | 	long	@_do_setenv
3b720     28 4D 01 00 | 	long	@_do_setlen
3b724     D0 4D 01 00 | 	long	@_do_setpan
3b728     20 4F 01 00 | 	long	@_do_setvol
3b72c     C8 4F 01 00 | 	long	@_do_setwave
3b730     78 4E 01 00 | 	long	@_do_setsustain
3b734     2C 3F 01 00 | 	long	@_do_release
3b738     AC FC 00 00 | 	long	@_do_getenvsustain
3b73c     84 AD 01 00 | 	long	@_do_poke
3b740     5C AE 01 00 | 	long	@_do_dpoke
3b744     34 AF 01 00 | 	long	@_do_lpoke
3b748     0C B0 01 00 | 	long	@_do_peek
3b74c     BC B0 01 00 | 	long	@_do_dpeek
3b750     68 B1 01 00 | 	long	@_do_lpeek
3b754     14 B2 01 00 | 	long	@_do_fre
3b758     B8 FD 00 00 | 	long	@_do_getnotevalue
3b75c     B8 68 01 00 | 	long	@_do_getaddr
3b760     7C 07 01 00 | 	long	@_do_inkey
3b764     7C BE 00 00 | 	long	@_do_abs
3b768     1C 06 01 00 | 	long	@_do_hex
3b76c     94 C4 00 00 | 	long	@_do_bin
3b770     7C 58 01 00 | 	long	@_do_val
3b774     4C D0 00 00 | 	long	@_do_chr
3b778     08 C0 00 00 | 	long	@_do_asc
3b77c     10 0B 01 00 | 	long	@_do_left
3b780     70 40 01 00 | 	long	@_do_right
3b784     A0 16 01 00 | 	long	@_do_mid
3b788     94 0C 01 00 | 	long	@_do_len
3b78c     74 00 01 00 | 	long	@_do_gosub
3b790     C4 3F 01 00 | 	long	@_do_return
3b794     7C F3 00 00 | 	long	@_do_end
3b798     DC 32 01 00 | 	long	@_do_pop
3b79c     28 15 01 00 | 	long	@_do_log
3b7a0     40 CE 00 00 | 	long	@_do_changevol
3b7a4     20 CF 00 00 | 	long	@_do_changewav
3b7a8     30 CD 00 00 | 	long	@_do_changepan
3b7ac     14 CA 00 00 | 	long	@_do_changefreq
3b7b0     70 50 01 00 | 	long	@_do_shutup
3b7b4     BC 43 01 00 | 	long	@_do_round
3b7b8     B0 F3 00 00 | 	long	@_do_enter
3b7bc     9C 1F 01 00 | 	long	@_do_open
3b7c0     EC D2 00 00 | 	long	@_do_close
3b7c4     08 F7 00 00 | 	long	@_do_get
3b7c8     80 39 01 00 | 	long	@_do_put
3b7cc     5C F1 01 00 | 	long	@_hg010b_spin2_putchar
3b7d0     D8 00 03 00 | 	long	@__struct___bas_wrap_sender_tx
3b7d4     1C 01 03 00 | 	long	@__struct___bas_wrap_sender_rx
3b7d8     64 01 03 00 | 	long	@__struct___bas_wrap_sender_close
3b7dc     08 00 03 00 | 	long	@__struct__s_vfs_file_t_putchar
3b7e0     78 00 03 00 | 	long	@__struct__s_vfs_file_t_getchar
3b7e4     C0 FF 02 00 | 	long	@___strs_cl_pfunc
3b7e8     54 5D 02 00 | 	long	@__system____root_opendir
3b7ec     F0 5D 02 00 | 	long	@__system____root_closedir
3b7f0     6C 5D 02 00 | 	long	@__system____root_readdir
3b7f4     F8 5D 02 00 | 	long	@__system____root_stat
3b7f8     44 56 02 00 | 	long	@__system____default_putc
3b7fc     C8 55 02 00 | 	long	@__system____default_getc
3b800     EC 56 02 00 | 	long	@__system____default_flush
3b804     C4 EA 02 00 | 	long	@_fatfs_cc_v_close
3b808     E0 EE 02 00 | 	long	@_fatfs_cc_v_read
3b80c     F4 EF 02 00 | 	long	@_fatfs_cc_v_write
3b810     D4 F0 02 00 | 	long	@_fatfs_cc_v_lseek
3b814     5C F1 02 00 | 	long	@_fatfs_cc_v_ioctl
3b818     B0 F1 02 00 | 	long	@_fatfs_cc_v_open
3b81c     28 EA 02 00 | 	long	@_fatfs_cc_v_creat
3b820     08 EB 02 00 | 	long	@_fatfs_cc_v_opendir
3b824     7C EB 02 00 | 	long	@_fatfs_cc_v_closedir
3b828     BC EB 02 00 | 	long	@_fatfs_cc_v_readdir
3b82c     F0 EC 02 00 | 	long	@_fatfs_cc_v_stat
3b830     70 F1 02 00 | 	long	@_fatfs_cc_v_mkdir
3b834     90 F1 02 00 | 	long	@_fatfs_cc_v_rmdir
3b838     80 F1 02 00 | 	long	@_fatfs_cc_v_remove
3b83c     A0 F1 02 00 | 	long	@_fatfs_cc_v_rename
3b840     C0 F2 02 00 | 	long	@_fatfs_cc_v_init
3b844     C8 F2 02 00 | 	long	@_fatfs_cc_v_deinit
3b848     5C 0A 02 00 | 	long	@__system___tx
3b84c     9C 0A 02 00 | 	long	@__system___rx
3b850     64 69 02 00 | 	long	@__system___rxtxioctl_0696
3b854     BC 69 02 00 | 	long	@__system____dummy_flush_0697
3b858     90 F2 02 00 | 	long	@_fatfs_cc_v_flush
3b85c                 | __heap_base
3b85c     00 00 00 00 
      ...             
6a65c     00 00 00 00 
6a660     00 00 00 00 | 	long	0[48002]
6a664                 | objmem
6a664     00 00 00 00 
      ...             
74a80     00 00 00 00 
74a84     00 00 00 00 | 	long	0[10505]
74a88                 | stackspace
74a88     00 00 00 00 | 	long	0[1]
74a8c 100             | 	org	COG_BSS_START
74a8c 100             | _var01
74a8c 100             | 	res	1
74a8c 101             | _var02
74a8c 101             | 	res	1
74a8c 102             | _var03
74a8c 102             | 	res	1
74a8c 103             | _var04
74a8c 103             | 	res	1
74a8c 104             | _var05
74a8c 104             | 	res	1
74a8c 105             | _var06
74a8c 105             | 	res	1
74a8c 106             | _var07
74a8c 106             | 	res	1
74a8c 107             | _var08
74a8c 107             | 	res	1
74a8c 108             | _var09
74a8c 108             | 	res	1
74a8c 109             | arg01
74a8c 109             | 	res	1
74a8c 10a             | arg02
74a8c 10a             | 	res	1
74a8c 10b             | arg03
74a8c 10b             | 	res	1
74a8c 10c             | arg04
74a8c 10c             | 	res	1
74a8c 10d             | arg05
74a8c 10d             | 	res	1
74a8c 10e             | arg06
74a8c 10e             | 	res	1
74a8c 10f             | local01
74a8c 10f             | 	res	1
74a8c 110             | local02
74a8c 110             | 	res	1
74a8c 111             | local03
74a8c 111             | 	res	1
74a8c 112             | local04
74a8c 112             | 	res	1
74a8c 113             | local05
74a8c 113             | 	res	1
74a8c 114             | local06
74a8c 114             | 	res	1
74a8c 115             | local07
74a8c 115             | 	res	1
74a8c 116             | local08
74a8c 116             | 	res	1
74a8c 117             | local09
74a8c 117             | 	res	1
74a8c 118             | local10
74a8c 118             | 	res	1
74a8c 119             | local11
74a8c 119             | 	res	1
74a8c 11a             | local12
74a8c 11a             | 	res	1
74a8c 11b             | local13
74a8c 11b             | 	res	1
74a8c 11c             | local14
74a8c 11c             | 	res	1
74a8c 11d             | local15
74a8c 11d             | 	res	1
74a8c 11e             | local16
74a8c 11e             | 	res	1
74a8c 11f             | local17
74a8c 11f             | 	res	1
74a8c 120             | local18
74a8c 120             | 	res	1
74a8c 121             | local19
74a8c 121             | 	res	1
74a8c 122             | local20
74a8c 122             | 	res	1
74a8c 123             | local21
74a8c 123             | 	res	1
74a8c 124             | local22
74a8c 124             | 	res	1
74a8c 125             | local23
74a8c 125             | 	res	1
74a8c 126             | local24
74a8c 126             | 	res	1
74a8c 127             | local25
74a8c 127             | 	res	1
74a8c 128             | local26
74a8c 128             | 	res	1
74a8c 129             | local27
74a8c 129             | 	res	1
74a8c 12a             | local28
74a8c 12a             | 	res	1
74a8c 12b             | local29
74a8c 12b             | 	res	1
74a8c 12c             | local30
74a8c 12c             | 	res	1
74a8c 12d             | local31
74a8c 12d             | 	res	1
74a8c 12e             | local32
74a8c 12e             | 	res	1
74a8c 12f             | local33
74a8c 12f             | 	res	1
74a8c 130             | local34
74a8c 130             | 	res	1
74a8c 131             | local35
74a8c 131             | 	res	1
74a8c 132             | local36
74a8c 132             | 	res	1
74a8c 133             | local37
74a8c 133             | 	res	1
74a8c 134             | local38
74a8c 134             | 	res	1
74a8c 135             | local39
74a8c 135             | 	res	1
74a8c 136             | local40
74a8c 136             | 	res	1
74a8c 137             | local41
74a8c 137             | 	res	1
74a8c 138             | local42
74a8c 138             | 	res	1
74a8c 139             | local43
74a8c 139             | 	res	1
74a8c 13a             | local44
74a8c 13a             | 	res	1
74a8c 13b             | local45
74a8c 13b             | 	res	1
74a8c 13c             | local46
74a8c 13c             | 	res	1
74a8c 13d             | local47
74a8c 13d             | 	res	1
74a8c 13e             | muldiva_
74a8c 13e             | 	res	1
74a8c 13f             | muldivb_
74a8c 13f             | 	res	1
74a8c 140             | 	fit	480
74a8c 140             | 
