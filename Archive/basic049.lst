00000                 | 
00000                 | #line 1 "D:/programowanie/P2-Retromachine-Basic/basic049.p2asm"
00000                 | con
00000                 | 	_clkfreq = 340500000
00000                 | 	_clkmode = 27175163
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	HEAPSIZE = 96000
00000                 | 	ver = 49
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getaddr = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_channel = 44
00000                 | 	token_skip = 45
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_defsnd = 115
00000                 | 	token_defenv = 116
00000                 | 	token_play = 117
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_position = 129
00000                 | 	token_cos = 130
00000                 | 	token_tan = 131
00000                 | 	token_asin = 132
00000                 | 	token_acos = 133
00000                 | 	token_atn = 134
00000                 | 	token_sqr = 135
00000                 | 	token_rad = 136
00000                 | 	token_deg = 137
00000                 | 	token_int = 138
00000                 | 	token_setvol = 139
00000                 | 	token_setpan = 140
00000                 | 	token_setlen = 141
00000                 | 	token_setdelay = 142
00000                 | 	token_setwave = 143
00000                 | 	token_setenv = 144
00000                 | 	token_setsustain = 145
00000                 | 	token_release = 146
00000                 | 	token_getenvsustain = 147
00000                 | 	token_getnotevalue = 148
00000                 | 	token_poke = 149
00000                 | 	token_dpoke = 150
00000                 | 	token_lpoke = 151
00000                 | 	token_peek = 152
00000                 | 	token_dpeek = 153
00000                 | 	token_lpeek = 154
00000                 | 	token_adr = 155
00000                 | 	token_fre = 156
00000                 | 	token_inkey = 157
00000                 | 	token_abs = 158
00000                 | 	token_chr = 159
00000                 | 	token_val = 160
00000                 | 	token_str = 161
00000                 | 	token_bin = 162
00000                 | 	token_hex = 163
00000                 | 	token_left = 164
00000                 | 	token_right = 165
00000                 | 	token_mid = 166
00000                 | 	token_asc = 167
00000                 | 	token_len = 168
00000                 | 	token_gosub = 169
00000                 | 	token_return = 170
00000                 | 	token_progend = 171
00000                 | 	token_pop = 172
00000                 | 	token_log = 173
00000                 | 	token_changefreq = 174
00000                 | 	token_changevol = 175
00000                 | 	token_changewave = 176
00000                 | 	token_changepan = 177
00000                 | 	token_shutup = 178
00000                 | 	token_open = 179
00000                 | 	token_close = 180
00000                 | 	token_input = 181
00000                 | 	token_read = 182
00000                 | 	token_data = 183
00000                 | 	token_blit = 185
00000                 | 	token_get = 187
00000                 | 	token_put = 188
00000                 | 	token_enter = 189
00000                 | 	token_rem = 190
00000                 | 	token_round = 191
00000                 | 	token_coginit = 192
00000                 | 	token_on = 193
00000                 | 	token_delete = 194
00000                 | 	token_cd = 195
00000                 | 	token_copy = 196
00000                 | 	token_framebuf = 197
00000                 | 	token_mkdir = 198
00000                 | 	token_restore = 199
00000                 | 	token_padx = 200
00000                 | 	token_pady = 201
00000                 | 	token_padz = 202
00000                 | 	token_padh = 203
00000                 | 	token_padrx = 204
00000                 | 	token_padry = 205
00000                 | 	token_padrz = 206
00000                 | 	token_cogstop = 207
00000                 | 	token_memlo = 208
00000                 | 	token_memtop = 209
00000                 | 	token_setcolor = 210
00000                 | 	token_getcolor = 211
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	token_notename = 768
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	result_channel = 44
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1024
00000                 | 	maxstack = 512
00000                 | 	maxfor = 64
00000                 | 	maxgosub = 64
00000                 | 	memlo = 524288
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 340500000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $19ea8fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 54 CF 80 FF 
00420 007 00 F0 65 FD | 	hubset	##27175160
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a 54 CF 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##27175163
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e CF 25 8A FF 
00440 00f 14 40 6C FC | 	wrlong	##340500000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 58 38 A2 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 27 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 27 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 49 93 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 48 91 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 49 91 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 92 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 90 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 48 91 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 49 93 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec 40 23 04 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed 1C 20 04 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 48 9A 05 00 | 	long	@objmem
007d0 0f3             | ptr___system__dat__
007d0 0f3 FC 12 04 00 | 	long	@__system__dat_
007d4 0f4             | ptr__audio096_spin2_dat__
007d4 0f4 54 0E 04 00 | 	long	@_audio096_spin2_dat_
007d8 0f5             | ptr__dat__
007d8 0f5 5C 7B 03 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 3C 1A 04 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 CC AC 03 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 30 15 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 7C D4 03 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa 34 D2 03 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb 0C E4 03 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc 68 3F 06 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' '-------------------------------------------------------------------------------------------------------- 
00804                 | ' '------------------------------------ MAIN LOOP END -----------------------------------------------------
00804                 | ' '--------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' '                     A full screen editor for programming and entering data
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' function edit() as string
00804                 | _edit
00804     1A 4A 05 F6 | 	mov	COUNT_, #26
00808     A8 00 A0 FD | 	call	#pushregs_
0080c     00 26 06 F6 | 	mov	local01, #0
00810     00 28 06 F6 | 	mov	local02, #0
00814     00 2A 06 F6 | 	mov	local03, #0
00818     00 2C 06 F6 | 	mov	local04, #0
0081c                 | ' rpt=0 : rptcnt=0 : key=0 : key2=0 : key3=0 : key4=0 
0081c                 | ' do
0081c                 | LR__0001
0081c     01 12 06 F6 | 	mov	arg01, #1
00820     08 49 B2 FD | 	call	#_hg010b_spin2_waitvbl
00824     CC 5D B2 FD | 	call	#_usbnew_spin2_get_key
00828     FD 2E 02 F6 | 	mov	local05, result1
0082c                 | '   return hkbd_led_rep
0082c     13 00 00 FF 
00830     D0 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10192
00834     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
00838     13 00 00 FF 
0083c     D0 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10192
00840     52 00 00 FF 
00844     E0 E4 05 F1 | 	add	objptr, ##42208
00848     F2 FA 61 FC | 	wrlong	result1, objptr
0084c     52 00 00 FF 
00850     E0 E4 85 F1 | 	sub	objptr, ##42208
00854                 | ' if key>0 andalso key<4 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(10): paula.stop(7)
00854     01 2E 16 F2 | 	cmp	local05, #1 wc
00858     A4 00 90 CD |  if_b	jmp	#LR__0002
0085c     04 2E 16 F2 | 	cmp	local05, #4 wc
00860     9C 00 90 3D |  if_ae	jmp	#LR__0002
00864     50 00 00 FF 
00868     3C E5 05 F1 | 	add	objptr, ##41276
0086c     F2 30 02 FB | 	rdlong	local06, objptr
00870     50 00 00 FF 
00874     3C E5 85 F1 | 	sub	objptr, ##41276
00878     01 30 0E F2 | 	cmp	local06, #1 wz
0087c     80 00 90 5D |  if_ne	jmp	#LR__0002
00880     04 00 00 FF 
00884     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00888     56 00 00 FF 
0088c     44 32 06 F6 | 	mov	local07, ##44100
00890     0C 34 C6 F9 | 	decod	local08, #12
00894     00 36 06 F6 | 	mov	local09, #0
00898     03 00 00 FF 
0089c     DE 38 06 F6 | 	mov	local10, ##1758
008a0     07 12 06 F6 | 	mov	arg01, #7
008a4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
008a8     56 00 00 FF 
008ac     44 16 06 F6 | 	mov	arg03, ##44100
008b0     0C 18 C6 F9 | 	decod	arg04, #12
008b4     00 1A 06 F6 | 	mov	arg05, #0
008b8     03 00 00 FF 
008bc     DE 1C 06 F6 | 	mov	arg06, ##1758
008c0     0B 00 00 FF 
008c4     CC E4 05 F1 | 	add	objptr, ##5836
008c8     04 00 00 FF 
008cc     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
008d0     0C 61 B2 FD | 	call	#_audio096_spin2_play
008d4     0B 00 00 FF 
008d8     CC E4 85 F1 | 	sub	objptr, ##5836
008dc     0A 12 06 F6 | 	mov	arg01, #10
008e0     60 68 B2 FD | 	call	#__system___waitms
008e4     07 30 06 F6 | 	mov	local06, #7
008e8     07 12 06 F6 | 	mov	arg01, #7
008ec     0B 00 00 FF 
008f0     CC E4 05 F1 | 	add	objptr, ##5836
008f4     58 62 B2 FD | 	call	#_audio096_spin2_stop
008f8     0B 00 00 FF 
008fc     CC E4 85 F1 | 	sub	objptr, ##5836
00900                 | LR__0002
00900                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then key2=key : rpt=1 : key3=key2 
00900     04 2E 16 F2 | 	cmp	local05, #4 wc
00904     20 00 90 CD |  if_b	jmp	#LR__0003
00908     00 00 40 FF 
0090c     00 2E 16 F2 | 	cmp	local05, ##-2147483648 wc
00910     17 31 02 C6 |  if_b	mov	local06, local05
00914     18 31 E2 C8 |  if_b	getbyte	local06, local06, #0
00918     E0 30 16 C2 |  if_b	cmp	local06, #224 wc
0091c     17 2B 02 C6 |  if_b	mov	local03, local05
00920     01 26 06 C6 |  if_b	mov	local01, #1
00924     15 2D 02 C6 |  if_b	mov	local04, local03
00928                 | LR__0003
00928                 | ' if key>$80000000 then rptcnt=0 : rpt=0
00928     00 00 40 FF 
0092c     01 2E 16 F2 | 	cmp	local05, ##-2147483647 wc
00930     00 28 06 36 |  if_ae	mov	local02, #0
00934     00 26 06 36 |  if_ae	mov	local01, #0
00938                 | ' if key=0 andalso rpt=1 then rptcnt+=1
00938     00 2E 0E F2 | 	cmp	local05, #0 wz
0093c     01 26 0E A2 |  if_e	cmp	local01, #1 wz
00940     01 28 06 A1 |  if_e	add	local02, #1
00944                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
00944     00 00 40 FF 
00948     00 2E 16 F2 | 	cmp	local05, ##-2147483648 wc
0094c     19 28 0E C2 |  if_b	cmp	local02, #25 wz
00950     15 2D 02 86 |  if_c_and_z	mov	local04, local03
00954     15 28 06 86 |  if_c_and_z	mov	local02, #21
00958                 | ' 
00958                 | ' '' there is a key pressed and it needs to be processed
00958                 | ' 
00958                 | ' if key3<>0 then
00958     00 2C 0E F2 | 	cmp	local04, #0 wz
0095c     BC FE 9F AD |  if_e	jmp	#LR__0001
00960                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len)     	' make a click
00960     50 00 00 FF 
00964     3C E5 05 F1 | 	add	objptr, ##41276
00968     F2 30 02 FB | 	rdlong	local06, objptr
0096c     50 00 00 FF 
00970     3C E5 85 F1 | 	sub	objptr, ##41276
00974     01 30 0E F2 | 	cmp	local06, #1 wz
00978     50 00 90 5D |  if_ne	jmp	#LR__0004
0097c     52 00 00 FF 
00980     A4 E4 05 F1 | 	add	objptr, ##42148
00984     F2 14 02 FB | 	rdlong	arg02, objptr
00988     56 00 00 FF 
0098c     44 32 06 F6 | 	mov	local07, ##44100
00990     0C 34 C6 F9 | 	decod	local08, #12
00994     04 E4 85 F1 | 	sub	objptr, #4
00998     F2 36 02 FB | 	rdlong	local09, objptr
0099c     01 38 66 F6 | 	neg	local10, #1
009a0     07 12 06 F6 | 	mov	arg01, #7
009a4     56 00 00 FF 
009a8     44 16 06 F6 | 	mov	arg03, ##44100
009ac     0C 18 C6 F9 | 	decod	arg04, #12
009b0     1B 1B 02 F6 | 	mov	arg05, local09
009b4     01 1C 66 F6 | 	neg	arg06, #1
009b8     46 00 00 FF 
009bc     D4 E5 85 F1 | 	sub	objptr, ##36308
009c0     1C 60 B2 FD | 	call	#_audio096_spin2_play
009c4     0B 00 00 FF 
009c8     CC E4 85 F1 | 	sub	objptr, ##5836
009cc                 | LR__0004
009cc     16 13 02 F6 | 	mov	arg01, local04
009d0     E0 2D B2 FD | 	call	#_scantochar
009d4     FD 3A 02 F6 | 	mov	local11, result1
009d8                 | '   if leds and 2 = 2 then 						' caps lock
009d8     52 00 00 FF 
009dc     E0 E4 05 F1 | 	add	objptr, ##42208
009e0     F2 3C 02 FB | 	rdlong	local12, objptr
009e4     52 00 00 FF 
009e8     E0 E4 85 F1 | 	sub	objptr, ##42208
009ec     1E 31 0A F6 | 	mov	local06, local12 wz
009f0     4C 00 90 AD |  if_e	jmp	#LR__0012
009f4                 | '     if key4>96 andalso key4<123 then                 
009f4     61 3A 16 F2 | 	cmp	local11, #97 wc
009f8     0C 00 90 CD |  if_b	jmp	#LR__0005
009fc     7B 3A 16 F2 | 	cmp	local11, #123 wc
00a00     20 3A 86 C1 |  if_b	sub	local11, #32
00a04     38 00 90 CD |  if_b	jmp	#LR__0011
00a08                 | LR__0005
00a08     41 3A 16 F2 | 	cmp	local11, #65 wc
00a0c     0C 00 90 CD |  if_b	jmp	#LR__0006
00a10     5B 3A 16 F2 | 	cmp	local11, #91 wc
00a14     20 3A 06 C1 |  if_b	add	local11, #32
00a18     24 00 90 CD |  if_b	jmp	#LR__0010
00a1c                 | LR__0006
00a1c     17 3A 16 F2 | 	cmp	local11, #23 wc
00a20     0C 00 90 CD |  if_b	jmp	#LR__0007
00a24     20 3A 16 F2 | 	cmp	local11, #32 wc
00a28     09 3A 86 C1 |  if_b	sub	local11, #9
00a2c     10 00 90 CD |  if_b	jmp	#LR__0009
00a30                 | LR__0007
00a30     0E 3A 16 F2 | 	cmp	local11, #14 wc
00a34     08 00 90 CD |  if_b	jmp	#LR__0008
00a38     17 3A 16 F2 | 	cmp	local11, #23 wc
00a3c     27 3A 06 C1 |  if_b	add	local11, #39
00a40                 | LR__0008
00a40                 | LR__0009
00a40                 | LR__0010
00a40                 | LR__0011
00a40                 | LR__0012
00a40                 | '  
00a40                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then		' put the char on the screen 
00a40     01 3A 16 F2 | 	cmp	local11, #1 wc
00a44     BC 01 90 CD |  if_b	jmp	#LR__0017
00a48     7F 3A 16 F2 | 	cmp	local11, #127 wc
00a4c     3C E4 05 C1 |  if_b	add	objptr, #60
00a50     F2 30 E2 CA |  if_b	rdword	local06, objptr
00a54     3C E4 85 C1 |  if_b	sub	objptr, #60
00a58     FE 30 16 C2 |  if_b	cmp	local06, #254 wc
00a5c     A4 01 90 3D |  if_ae	jmp	#LR__0017
00a60                 | '     if do_insert then							' move the characters right
00a60     52 00 00 FF 
00a64     C8 E4 05 F1 | 	add	objptr, ##42184
00a68     F2 30 0A FB | 	rdlong	local06, objptr wz
00a6c     52 00 00 FF 
00a70     C8 E4 85 F1 | 	sub	objptr, ##42184
00a74     84 01 90 AD |  if_e	jmp	#LR__0016
00a78                 | '       for i=  v.textbuf_ptr+128*v.cursor_y+127 to v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2)+1 step -1 : pspoke i,pspeek(i-1) : next i 
00a78     3E E4 05 F1 | 	add	objptr, #62
00a7c     F2 32 C2 FA | 	rdbyte	local07, objptr
00a80     19 35 E2 F8 | 	getbyte	local08, local07, #0
00a84     80 34 06 FA | 	mul	local08, #128
00a88     3A E4 85 F1 | 	sub	objptr, #58
00a8c     F2 3E 02 FB | 	rdlong	local13, objptr
00a90     1F 41 02 F6 | 	mov	local14, local13
00a94     1A 41 02 F1 | 	add	local14, local08
00a98     7F 40 06 F1 | 	add	local14, #127
00a9c     19 33 E2 F8 | 	getbyte	local07, local07, #0
00aa0     80 32 06 FA | 	mul	local07, #128
00aa4     19 3F 02 F1 | 	add	local13, local07
00aa8     38 E4 05 F1 | 	add	objptr, #56
00aac     F2 36 E2 FA | 	rdword	local09, objptr
00ab0     3C E4 85 F1 | 	sub	objptr, #60
00ab4     1B 43 52 F6 | 	abs	local15, local09 wc
00ab8     01 42 46 F0 | 	shr	local15, #1
00abc     21 3F 82 F3 | 	sumc	local13, local15
00ac0     01 3E 06 F1 | 	add	local13, #1
00ac4                 | LR__0013
00ac4     20 45 02 F6 | 	mov	local16, local14
00ac8     01 44 86 F1 | 	sub	local16, #1
00acc     22 13 02 F6 | 	mov	arg01, local16
00ad0     D8 2B B2 FD | 	call	#_pspeek
00ad4     FD 46 02 F6 | 	mov	local17, result1
00ad8     23 49 E2 F8 | 	getbyte	local18, local17, #0
00adc     24 4B 02 F6 | 	mov	local19, local18
00ae0     20 13 02 F6 | 	mov	arg01, local14
00ae4     25 15 02 F6 | 	mov	arg02, local19
00ae8     78 2B B2 FD | 	call	#_pspoke
00aec     01 40 86 F1 | 	sub	local14, #1
00af0     1F 41 52 F2 | 	cmps	local14, local13 wc
00af4     CC FF 9F 3D |  if_ae	jmp	#LR__0013
00af8     52 00 00 FF 
00afc     E8 E4 05 F1 | 	add	objptr, ##42216
00b00     F2 00 68 FC | 	wrlong	#0, objptr
00b04     52 00 00 FF 
00b08     AA E4 85 F1 | 	sub	objptr, ##42154
00b0c     F2 32 C2 FA | 	rdbyte	local07, objptr
00b10     19 35 E2 F8 | 	getbyte	local08, local07, #0
00b14     80 34 06 FA | 	mul	local08, #128
00b18     3A E4 85 F1 | 	sub	objptr, #58
00b1c     F2 36 02 FB | 	rdlong	local09, objptr
00b20     1B 41 02 F6 | 	mov	local14, local09
00b24     1A 41 02 F1 | 	add	local14, local08
00b28     38 E4 05 F1 | 	add	objptr, #56
00b2c     F2 42 E2 FA | 	rdword	local15, objptr
00b30     21 39 32 F9 | 	getword	local10, local15, #0
00b34     1C 4D 52 F6 | 	abs	local20, local10 wc
00b38     01 4C 46 F0 | 	shr	local20, #1
00b3c     26 4D 82 F6 | 	negc	local20, local20
00b40     26 41 02 F1 | 	add	local14, local20
00b44     19 33 E2 F8 | 	getbyte	local07, local07, #0
00b48     80 32 06 FA | 	mul	local07, #128
00b4c     1B 35 02 F6 | 	mov	local08, local09
00b50     3C E4 85 F1 | 	sub	objptr, #60
00b54     1A 4F 02 F6 | 	mov	local21, local08
00b58     19 4F 02 F1 | 	add	local21, local07
00b5c     80 4E 06 F1 | 	add	local21, #128
00b60                 | LR__0014
00b60     27 41 52 F2 | 	cmps	local14, local21 wc
00b64     94 00 90 3D |  if_ae	jmp	#LR__0015
00b68     3C E4 05 F1 | 	add	objptr, #60
00b6c     F2 30 E2 FA | 	rdword	local06, objptr
00b70     52 00 00 FF 
00b74     AC E4 05 F1 | 	add	objptr, ##42156
00b78     F2 34 02 FB | 	rdlong	local08, objptr
00b7c     01 34 66 F0 | 	shl	local08, #1
00b80     1A 31 02 F1 | 	add	local06, local08
00b84     52 00 00 FF 
00b88     AA E4 85 F1 | 	sub	objptr, ##42154
00b8c     F2 3C C2 FA | 	rdbyte	local12, objptr
00b90     3E E4 85 F1 | 	sub	objptr, #62
00b94     10 3C 06 FA | 	mul	local12, #16
00b98     04 3C 06 F1 | 	add	local12, #4
00b9c     20 13 02 F6 | 	mov	arg01, local14
00ba0     08 2B B2 FD | 	call	#_pspeek
00ba4     FD 32 E2 F8 | 	getbyte	local07, result1, #0
00ba8     41 E4 05 F1 | 	add	objptr, #65
00bac     F2 34 02 FB | 	rdlong	local08, objptr
00bb0     04 E4 05 F1 | 	add	objptr, #4
00bb4     F2 38 02 FB | 	rdlong	local10, objptr
00bb8     45 E4 85 F1 | 	sub	objptr, #69
00bbc     1C 37 02 F6 | 	mov	local09, local10
00bc0     18 13 02 F6 | 	mov	arg01, local06
00bc4     1E 15 02 F6 | 	mov	arg02, local12
00bc8     19 17 02 F6 | 	mov	arg03, local07
00bcc     1A 19 02 F6 | 	mov	arg04, local08
00bd0     1B 1B 02 F6 | 	mov	arg05, local09
00bd4     50 43 B2 FD | 	call	#_hg010b_spin2_putcharxycgf
00bd8     52 00 00 FF 
00bdc     E8 E4 05 F1 | 	add	objptr, ##42216
00be0     F2 30 02 FB | 	rdlong	local06, objptr
00be4     01 30 06 F1 | 	add	local06, #1
00be8     F2 30 62 FC | 	wrlong	local06, objptr
00bec     52 00 00 FF 
00bf0     E8 E4 85 F1 | 	sub	objptr, ##42216
00bf4     01 40 06 F1 | 	add	local14, #1
00bf8     64 FF 9F FD | 	jmp	#LR__0014
00bfc                 | LR__0015
00bfc                 | LR__0016
00bfc     1D 13 02 F6 | 	mov	arg01, local11
00c00     9C 46 B2 FD | 	call	#_hg010b_spin2_putchar
00c04                 | LR__0017
00c04                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(300): paula.stop(7) 'end of line reached
00c04     01 3A 16 F2 | 	cmp	local11, #1 wc
00c08     B4 00 90 CD |  if_b	jmp	#LR__0018
00c0c     7F 3A 16 F2 | 	cmp	local11, #127 wc
00c10     AC 00 90 3D |  if_ae	jmp	#LR__0018
00c14     3C E4 05 F1 | 	add	objptr, #60
00c18     F2 30 E2 FA | 	rdword	local06, objptr
00c1c     3C E4 85 F1 | 	sub	objptr, #60
00c20     FE 30 0E F2 | 	cmp	local06, #254 wz
00c24     50 00 00 AF 
00c28     3C E5 05 A1 |  if_e	add	objptr, ##41276
00c2c     F2 34 02 AB |  if_e	rdlong	local08, objptr
00c30     50 00 00 AF 
00c34     3C E5 85 A1 |  if_e	sub	objptr, ##41276
00c38     1A 33 02 A6 |  if_e	mov	local07, local08
00c3c     01 32 0E A2 |  if_e	cmp	local07, #1 wz
00c40     7C 00 90 5D |  if_ne	jmp	#LR__0018
00c44     04 00 00 FF 
00c48     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00c4c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00c50     04 00 00 FF 
00c54     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
00c58     56 00 00 FF 
00c5c     44 32 06 F6 | 	mov	local07, ##44100
00c60     0C 34 C6 F9 | 	decod	local08, #12
00c64     00 36 06 F6 | 	mov	local09, #0
00c68     03 00 00 FF 
00c6c     DE 38 06 F6 | 	mov	local10, ##1758
00c70     07 12 06 F6 | 	mov	arg01, #7
00c74     56 00 00 FF 
00c78     44 16 06 F6 | 	mov	arg03, ##44100
00c7c     0C 18 C6 F9 | 	decod	arg04, #12
00c80     00 1A 06 F6 | 	mov	arg05, #0
00c84     03 00 00 FF 
00c88     DE 1C 06 F6 | 	mov	arg06, ##1758
00c8c     0B 00 00 FF 
00c90     CC E4 05 F1 | 	add	objptr, ##5836
00c94     48 5D B2 FD | 	call	#_audio096_spin2_play
00c98     0B 00 00 FF 
00c9c     CC E4 85 F1 | 	sub	objptr, ##5836
00ca0     2C 13 06 F6 | 	mov	arg01, #300
00ca4     9C 64 B2 FD | 	call	#__system___waitms
00ca8     07 12 06 F6 | 	mov	arg01, #7
00cac     0B 00 00 FF 
00cb0     CC E4 05 F1 | 	add	objptr, ##5836
00cb4     98 5E B2 FD | 	call	#_audio096_spin2_stop
00cb8     0B 00 00 FF 
00cbc     CC E4 85 F1 | 	sub	objptr, ##5836
00cc0                 | LR__0018
00cc0                 | '  
00cc0                 | '   if key4=key_enter then 						' get the line from the  screen and return it
00cc0     8D 3A 0E F2 | 	cmp	local11, #141 wz
00cc4     B0 00 90 5D |  if_ne	jmp	#LR__0022
00cc8     B4 01 00 FF 
00ccc     EA 51 06 F6 | 	mov	local22, ##@LR__5417
00cd0                 | '     line$="" 
00cd0                 | '     for i=editor_spaces to 127
00cd0     37 00 00 FF 
00cd4     34 E4 05 F1 | 	add	objptr, ##28212
00cd8     F2 40 02 FB | 	rdlong	local14, objptr
00cdc     37 00 00 FF 
00ce0     34 E4 85 F1 | 	sub	objptr, ##28212
00ce4                 | LR__0019
00ce4     80 40 56 F2 | 	cmps	local14, #128 wc
00ce8     44 00 90 3D |  if_ae	jmp	#LR__0020
00cec     3E E4 05 F1 | 	add	objptr, #62
00cf0     F2 42 C2 FA | 	rdbyte	local15, objptr
00cf4     80 42 06 FA | 	mul	local15, #128
00cf8     3A E4 85 F1 | 	sub	objptr, #58
00cfc     F2 12 02 FB | 	rdlong	arg01, objptr
00d00     04 E4 85 F1 | 	sub	objptr, #4
00d04     21 13 02 F1 | 	add	arg01, local15
00d08     20 13 02 F1 | 	add	arg01, local14
00d0c     9C 29 B2 FD | 	call	#_pspeek
00d10     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
00d14     78 83 B2 FD | 	call	#__system__Chr_S
00d18     FD 14 02 F6 | 	mov	arg02, result1
00d1c     28 13 02 F6 | 	mov	arg01, local22
00d20     88 61 B2 FD | 	call	#__system___string_concat
00d24     FD 50 02 F6 | 	mov	local22, result1
00d28     01 40 06 F1 | 	add	local14, #1
00d2c     B4 FF 9F FD | 	jmp	#LR__0019
00d30                 | LR__0020
00d30                 | '     if do_insert andalso v.cursor_y<35 then v.scrolldown(v.cursor_y+1)
00d30     52 00 00 FF 
00d34     C8 E4 05 F1 | 	add	objptr, ##42184
00d38     F2 30 0A FB | 	rdlong	local06, objptr wz
00d3c     52 00 00 FF 
00d40     C8 E4 85 F1 | 	sub	objptr, ##42184
00d44     24 00 90 AD |  if_e	jmp	#LR__0021
00d48     3E E4 05 F1 | 	add	objptr, #62
00d4c     F2 32 C2 FA | 	rdbyte	local07, objptr
00d50     3E E4 85 F1 | 	sub	objptr, #62
00d54     23 32 16 F2 | 	cmp	local07, #35 wc
00d58     3E E4 05 C1 |  if_b	add	objptr, #62
00d5c     F2 12 C2 CA |  if_b	rdbyte	arg01, objptr
00d60     3E E4 85 C1 |  if_b	sub	objptr, #62
00d64     01 12 06 C1 |  if_b	add	arg01, #1
00d68     EC 4A B2 CD |  if_b	call	#_hg010b_spin2_scrolldown
00d6c                 | LR__0021
00d6c     1C 4D B2 FD | 	call	#_hg010b_spin2_crlf
00d70                 | '     v.crlf() 
00d70                 | '     return  line$
00d70     28 FB 01 F6 | 	mov	result1, local22
00d74     AC 07 90 FD | 	jmp	#LR__0049
00d78                 | LR__0022
00d78     16 3B E2 F8 | 	getbyte	local11, local04, #0
00d7c                 | '   
00d7c                 | '   if key4 = 43 andalso v.cursor_x>=240 andalso keyclick=1 then paula.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0)  	' tab
00d7c     2B 3A 0E F2 | 	cmp	local11, #43 wz
00d80     B0 00 90 5D |  if_ne	jmp	#LR__0023
00d84     3C E4 05 F1 | 	add	objptr, #60
00d88     F2 30 E2 FA | 	rdword	local06, objptr
00d8c     3C E4 85 F1 | 	sub	objptr, #60
00d90     F0 30 16 F2 | 	cmp	local06, #240 wc
00d94     9C 00 90 CD |  if_b	jmp	#LR__0023
00d98     50 00 00 FF 
00d9c     3C E5 05 F1 | 	add	objptr, ##41276
00da0     F2 34 02 FB | 	rdlong	local08, objptr
00da4     50 00 00 FF 
00da8     3C E5 85 F1 | 	sub	objptr, ##41276
00dac     1A 33 02 F6 | 	mov	local07, local08
00db0     01 32 0E F2 | 	cmp	local07, #1 wz
00db4     7C 00 90 5D |  if_ne	jmp	#LR__0023
00db8     04 00 00 FF 
00dbc     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00dc0     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00dc4     04 00 00 FF 
00dc8     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
00dcc     56 00 00 FF 
00dd0     44 32 06 F6 | 	mov	local07, ##44100
00dd4     0E 34 C6 F9 | 	decod	local08, #14
00dd8     00 36 06 F6 | 	mov	local09, #0
00ddc     03 00 00 FF 
00de0     DE 38 06 F6 | 	mov	local10, ##1758
00de4     00 12 06 F6 | 	mov	arg01, #0
00de8     56 00 00 FF 
00dec     44 16 06 F6 | 	mov	arg03, ##44100
00df0     0E 18 C6 F9 | 	decod	arg04, #14
00df4     00 1A 06 F6 | 	mov	arg05, #0
00df8     03 00 00 FF 
00dfc     DE 1C 06 F6 | 	mov	arg06, ##1758
00e00     0B 00 00 FF 
00e04     CC E4 05 F1 | 	add	objptr, ##5836
00e08     D4 5B B2 FD | 	call	#_audio096_spin2_play
00e0c     0B 00 00 FF 
00e10     CC E4 85 F1 | 	sub	objptr, ##5836
00e14     2C 13 06 F6 | 	mov	arg01, #300
00e18     28 63 B2 FD | 	call	#__system___waitms
00e1c     00 12 06 F6 | 	mov	arg01, #0
00e20     0B 00 00 FF 
00e24     CC E4 05 F1 | 	add	objptr, ##5836
00e28     24 5D B2 FD | 	call	#_audio096_spin2_stop
00e2c     0B 00 00 FF 
00e30     CC E4 85 F1 | 	sub	objptr, ##5836
00e34                 | LR__0023
00e34                 | '   if key4=77 then i=127 : do: 															' end
00e34     4D 3A 0E F2 | 	cmp	local11, #77 wz
00e38     90 00 90 5D |  if_ne	jmp	#LR__0028
00e3c     7F 40 06 F6 | 	mov	local14, #127
00e40                 | LR__0024
00e40                 | '     if pspeek(v.textbuf_ptr+128*v.cursor_y+i)<>32 then 
00e40     3E E4 05 F1 | 	add	objptr, #62
00e44     F2 36 C2 FA | 	rdbyte	local09, objptr
00e48     1B 35 E2 F8 | 	getbyte	local08, local09, #0
00e4c     1A 39 02 F6 | 	mov	local10, local08
00e50     80 38 06 FA | 	mul	local10, #128
00e54     3A E4 85 F1 | 	sub	objptr, #58
00e58     F2 42 02 FB | 	rdlong	local15, objptr
00e5c     04 E4 85 F1 | 	sub	objptr, #4
00e60     21 33 02 F6 | 	mov	local07, local15
00e64     1C 33 02 F1 | 	add	local07, local10
00e68     20 33 02 F1 | 	add	local07, local14
00e6c     19 13 02 F6 | 	mov	arg01, local07
00e70     38 28 B2 FD | 	call	#_pspeek
00e74     FD 30 E2 F8 | 	getbyte	local06, result1, #0
00e78     20 30 0E F2 | 	cmp	local06, #32 wz
00e7c     2C 00 90 AD |  if_e	jmp	#LR__0026
00e80                 | '       if i<127 then v.setcursorx(2*i+2) else v.setcursorx(254)
00e80     7F 40 56 F2 | 	cmps	local14, #127 wc
00e84     18 00 90 3D |  if_ae	jmp	#LR__0025
00e88     20 33 02 F6 | 	mov	local07, local14
00e8c     01 32 66 F0 | 	shl	local07, #1
00e90     19 13 02 F6 | 	mov	arg01, local07
00e94     02 12 06 F1 | 	add	arg01, #2
00e98     2C 42 B2 FD | 	call	#_hg010b_spin2_setcursorx
00e9c     2C 00 90 FD | 	jmp	#LR__0027
00ea0                 | LR__0025
00ea0     FE 12 06 F6 | 	mov	arg01, #254
00ea4     20 42 B2 FD | 	call	#_hg010b_spin2_setcursorx
00ea8     20 00 90 FD | 	jmp	#LR__0027
00eac                 | LR__0026
00eac     01 40 86 F1 | 	sub	local14, #1
00eb0     37 00 00 FF 
00eb4     34 E4 05 F1 | 	add	objptr, ##28212
00eb8     F2 30 02 FB | 	rdlong	local06, objptr
00ebc     37 00 00 FF 
00ec0     34 E4 85 F1 | 	sub	objptr, ##28212
00ec4     18 41 0A F2 | 	cmp	local14, local06 wz
00ec8     74 FF 9F 5D |  if_ne	jmp	#LR__0024
00ecc                 | LR__0027
00ecc                 | LR__0028
00ecc                 | '   if i=editor_spaces then v.setcursorx(2*editor_spaces)
00ecc     37 00 00 FF 
00ed0     34 E4 05 F1 | 	add	objptr, ##28212
00ed4     F2 3C 02 FB | 	rdlong	local12, objptr
00ed8     37 00 00 FF 
00edc     34 E4 85 F1 | 	sub	objptr, ##28212
00ee0     1E 31 02 F6 | 	mov	local06, local12
00ee4     18 41 0A F2 | 	cmp	local14, local06 wz
00ee8     2C 00 90 5D |  if_ne	jmp	#LR__0029
00eec     37 00 00 FF 
00ef0     34 E4 05 F1 | 	add	objptr, ##28212
00ef4     F2 34 02 FB | 	rdlong	local08, objptr
00ef8     37 00 00 FF 
00efc     34 E4 85 F1 | 	sub	objptr, ##28212
00f00     1A 33 02 F6 | 	mov	local07, local08
00f04     19 3D 02 F6 | 	mov	local12, local07
00f08     01 3C 66 F0 | 	shl	local12, #1
00f0c     1E 31 02 F6 | 	mov	local06, local12
00f10     18 13 02 F6 | 	mov	arg01, local06
00f14     B0 41 B2 FD | 	call	#_hg010b_spin2_setcursorx
00f18                 | LR__0029
00f18                 | '     
00f18                 | '   if key4=74 then v.setcursorx(editor_spaces*2)													' home
00f18     4A 3A 0E F2 | 	cmp	local11, #74 wz
00f1c     2C 00 90 5D |  if_ne	jmp	#LR__0030
00f20     37 00 00 FF 
00f24     34 E4 05 F1 | 	add	objptr, ##28212
00f28     F2 34 02 FB | 	rdlong	local08, objptr
00f2c     37 00 00 FF 
00f30     34 E4 85 F1 | 	sub	objptr, ##28212
00f34     1A 33 02 F6 | 	mov	local07, local08
00f38     19 3D 02 F6 | 	mov	local12, local07
00f3c     01 3C 66 F0 | 	shl	local12, #1
00f40     1E 31 02 F6 | 	mov	local06, local12
00f44     18 13 02 F6 | 	mov	arg01, local06
00f48     7C 41 B2 FD | 	call	#_hg010b_spin2_setcursorx
00f4c                 | LR__0030
00f4c                 | '   if key4=75 then v.setcursory(0)														' pgup
00f4c     4B 3A 0E F2 | 	cmp	local11, #75 wz
00f50     00 30 06 A6 |  if_e	mov	local06, #0
00f54     00 12 06 A6 |  if_e	mov	arg01, #0
00f58     9C 41 B2 AD |  if_e	call	#_hg010b_spin2_setcursory
00f5c                 | '   if key4=78 then v.setcursory(36) 														' pgdn, todo: parameter instead 36
00f5c     4E 3A 0E F2 | 	cmp	local11, #78 wz
00f60     24 30 06 A6 |  if_e	mov	local06, #36
00f64     24 12 06 A6 |  if_e	mov	arg01, #36
00f68     8C 41 B2 AD |  if_e	call	#_hg010b_spin2_setcursory
00f6c                 | '   if key4=76 then 																' del
00f6c     4C 3A 0E F2 | 	cmp	local11, #76 wz
00f70     AC 01 90 5D |  if_ne	jmp	#LR__0035
00f74                 | '     for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
00f74     3E E4 05 F1 | 	add	objptr, #62
00f78     F2 32 C2 FA | 	rdbyte	local07, objptr
00f7c     19 35 E2 F8 | 	getbyte	local08, local07, #0
00f80     80 34 06 FA | 	mul	local08, #128
00f84     3A E4 85 F1 | 	sub	objptr, #58
00f88     F2 52 02 FB | 	rdlong	local23, objptr
00f8c     29 41 02 F6 | 	mov	local14, local23
00f90     1A 41 02 F1 | 	add	local14, local08
00f94     38 E4 05 F1 | 	add	objptr, #56
00f98     F2 38 E2 FA | 	rdword	local10, objptr
00f9c     1C 4D 52 F6 | 	abs	local20, local10 wc
00fa0     01 4C 46 F0 | 	shr	local20, #1
00fa4     26 41 82 F3 | 	sumc	local14, local20
00fa8     19 33 E2 F8 | 	getbyte	local07, local07, #0
00fac     80 32 06 FA | 	mul	local07, #128
00fb0     3C E4 85 F1 | 	sub	objptr, #60
00fb4     19 53 02 F1 | 	add	local23, local07
00fb8     80 52 06 F1 | 	add	local23, #128
00fbc                 | LR__0031
00fbc     29 41 52 F2 | 	cmps	local14, local23 wc
00fc0     20 00 90 3D |  if_ae	jmp	#LR__0032
00fc4     20 13 02 F6 | 	mov	arg01, local14
00fc8     01 12 06 F1 | 	add	arg01, #1
00fcc     DC 26 B2 FD | 	call	#_pspeek
00fd0     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
00fd4     20 13 02 F6 | 	mov	arg01, local14
00fd8     88 26 B2 FD | 	call	#_pspoke
00fdc     01 40 06 F1 | 	add	local14, #1
00fe0     D8 FF 9F FD | 	jmp	#LR__0031
00fe4                 | LR__0032
00fe4     3E E4 05 F1 | 	add	objptr, #62
00fe8     F2 36 C2 FA | 	rdbyte	local09, objptr
00fec     80 36 06 FA | 	mul	local09, #128
00ff0     3A E4 85 F1 | 	sub	objptr, #58
00ff4     F2 12 02 FB | 	rdlong	arg01, objptr
00ff8     04 E4 85 F1 | 	sub	objptr, #4
00ffc     1B 13 02 F1 | 	add	arg01, local09
01000     7F 12 06 F1 | 	add	arg01, #127
01004     20 14 06 F6 | 	mov	arg02, #32
01008     58 26 B2 FD | 	call	#_pspoke
0100c     52 00 00 FF 
01010     E8 E4 05 F1 | 	add	objptr, ##42216
01014     F2 00 68 FC | 	wrlong	#0, objptr
01018     52 00 00 FF 
0101c     AA E4 85 F1 | 	sub	objptr, ##42154
01020     F2 3C C2 FA | 	rdbyte	local12, objptr
01024     1E 35 E2 F8 | 	getbyte	local08, local12, #0
01028     80 34 06 FA | 	mul	local08, #128
0102c     3A E4 85 F1 | 	sub	objptr, #58
01030     F2 36 02 FB | 	rdlong	local09, objptr
01034     1B 41 02 F6 | 	mov	local14, local09
01038     1A 41 02 F1 | 	add	local14, local08
0103c     38 E4 05 F1 | 	add	objptr, #56
01040     F2 42 E2 FA | 	rdword	local15, objptr
01044     21 39 32 F9 | 	getword	local10, local15, #0
01048     1C 4D 52 F6 | 	abs	local20, local10 wc
0104c     01 4C 46 F0 | 	shr	local20, #1
01050     26 4D 82 F6 | 	negc	local20, local20
01054     26 41 02 F1 | 	add	local14, local20
01058     1E 31 E2 F8 | 	getbyte	local06, local12, #0
0105c     18 33 02 F6 | 	mov	local07, local06
01060     80 32 06 FA | 	mul	local07, #128
01064     1B 35 02 F6 | 	mov	local08, local09
01068     3C E4 85 F1 | 	sub	objptr, #60
0106c     1A 55 02 F6 | 	mov	local24, local08
01070     19 55 02 F1 | 	add	local24, local07
01074     80 54 06 F1 | 	add	local24, #128
01078                 | LR__0033
01078     2A 41 52 F2 | 	cmps	local14, local24 wc
0107c     A0 00 90 3D |  if_ae	jmp	#LR__0034
01080     3C E4 05 F1 | 	add	objptr, #60
01084     F2 30 E2 FA | 	rdword	local06, objptr
01088     52 00 00 FF 
0108c     AC E4 05 F1 | 	add	objptr, ##42156
01090     F2 34 02 FB | 	rdlong	local08, objptr
01094     01 34 66 F0 | 	shl	local08, #1
01098     1A 31 02 F1 | 	add	local06, local08
0109c     52 00 00 FF 
010a0     AA E4 85 F1 | 	sub	objptr, ##42154
010a4     F2 3C C2 FA | 	rdbyte	local12, objptr
010a8     3E E4 85 F1 | 	sub	objptr, #62
010ac     10 3C 06 FA | 	mul	local12, #16
010b0     04 3C 06 F1 | 	add	local12, #4
010b4     20 13 02 F6 | 	mov	arg01, local14
010b8     F0 25 B2 FD | 	call	#_pspeek
010bc     FD 32 E2 F8 | 	getbyte	local07, result1, #0
010c0     41 E4 05 F1 | 	add	objptr, #65
010c4     F2 34 02 FB | 	rdlong	local08, objptr
010c8     04 E4 05 F1 | 	add	objptr, #4
010cc     F2 38 02 FB | 	rdlong	local10, objptr
010d0     45 E4 85 F1 | 	sub	objptr, #69
010d4     1C 37 02 F6 | 	mov	local09, local10
010d8     18 13 02 F6 | 	mov	arg01, local06
010dc     1E 15 02 F6 | 	mov	arg02, local12
010e0     19 17 02 F6 | 	mov	arg03, local07
010e4     1A 19 02 F6 | 	mov	arg04, local08
010e8     1B 1B 02 F6 | 	mov	arg05, local09
010ec     38 3E B2 FD | 	call	#_hg010b_spin2_putcharxycgf
010f0     52 00 00 FF 
010f4     E8 E4 05 F1 | 	add	objptr, ##42216
010f8     F2 30 02 FB | 	rdlong	local06, objptr
010fc     01 30 06 F1 | 	add	local06, #1
01100     F2 30 62 FC | 	wrlong	local06, objptr
01104     52 00 00 FF 
01108     E8 E4 85 F1 | 	sub	objptr, ##42216
0110c     20 31 02 F6 | 	mov	local06, local14
01110     20 3D 02 F6 | 	mov	local12, local14
01114     01 3C 06 F1 | 	add	local12, #1
01118     1E 41 02 F6 | 	mov	local14, local12
0111c     58 FF 9F FD | 	jmp	#LR__0033
01120                 | LR__0034
01120                 | LR__0035
01120                 | ' 
01120                 | '   if key4 = 42 then  'backspace
01120     2A 3A 0E F2 | 	cmp	local11, #42 wz
01124     14 02 90 5D |  if_ne	jmp	#LR__0041
01128                 | '     if v.cursor_x>editor_spaces*2 then 
01128     3C E4 05 F1 | 	add	objptr, #60
0112c     F2 3C E2 FA | 	rdword	local12, objptr
01130     1E 31 32 F9 | 	getword	local06, local12, #0
01134     36 00 00 FF 
01138     F8 E5 05 F1 | 	add	objptr, ##28152
0113c     F2 36 02 FB | 	rdlong	local09, objptr
01140     37 00 00 FF 
01144     34 E4 85 F1 | 	sub	objptr, ##28212
01148     1B 35 02 F6 | 	mov	local08, local09
0114c     1A 33 02 F6 | 	mov	local07, local08
01150     01 32 66 F0 | 	shl	local07, #1
01154     19 31 5A F2 | 	cmps	local06, local07 wcz
01158     C8 01 90 ED |  if_be	jmp	#LR__0039
0115c     3C E4 05 F1 | 	add	objptr, #60
01160     F2 12 E2 FA | 	rdword	arg01, objptr
01164     02 12 86 F1 | 	sub	arg01, #2
01168     02 E4 05 F1 | 	add	objptr, #2
0116c     F2 14 C2 FA | 	rdbyte	arg02, objptr
01170     3E E4 85 F1 | 	sub	objptr, #62
01174     14 3F B2 FD | 	call	#_hg010b_spin2_setcursorpos
01178                 | '       position v.cursor_x-2,v.cursor_y
01178                 | '       for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
01178     3E E4 05 F1 | 	add	objptr, #62
0117c     F2 32 C2 FA | 	rdbyte	local07, objptr
01180     19 35 E2 F8 | 	getbyte	local08, local07, #0
01184     80 34 06 FA | 	mul	local08, #128
01188     3A E4 85 F1 | 	sub	objptr, #58
0118c     F2 56 02 FB | 	rdlong	local25, objptr
01190     2B 41 02 F6 | 	mov	local14, local25
01194     1A 41 02 F1 | 	add	local14, local08
01198     38 E4 05 F1 | 	add	objptr, #56
0119c     F2 38 E2 FA | 	rdword	local10, objptr
011a0     1C 4D 52 F6 | 	abs	local20, local10 wc
011a4     01 4C 46 F0 | 	shr	local20, #1
011a8     26 41 82 F3 | 	sumc	local14, local20
011ac     19 33 E2 F8 | 	getbyte	local07, local07, #0
011b0     80 32 06 FA | 	mul	local07, #128
011b4     3C E4 85 F1 | 	sub	objptr, #60
011b8     19 57 02 F1 | 	add	local25, local07
011bc     80 56 06 F1 | 	add	local25, #128
011c0                 | LR__0036
011c0     2B 41 52 F2 | 	cmps	local14, local25 wc
011c4     20 00 90 3D |  if_ae	jmp	#LR__0037
011c8     20 13 02 F6 | 	mov	arg01, local14
011cc     01 12 06 F1 | 	add	arg01, #1
011d0     D8 24 B2 FD | 	call	#_pspeek
011d4     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
011d8     20 13 02 F6 | 	mov	arg01, local14
011dc     84 24 B2 FD | 	call	#_pspoke
011e0     01 40 06 F1 | 	add	local14, #1
011e4     D8 FF 9F FD | 	jmp	#LR__0036
011e8                 | LR__0037
011e8     3E E4 05 F1 | 	add	objptr, #62
011ec     F2 36 C2 FA | 	rdbyte	local09, objptr
011f0     80 36 06 FA | 	mul	local09, #128
011f4     3A E4 85 F1 | 	sub	objptr, #58
011f8     F2 12 02 FB | 	rdlong	arg01, objptr
011fc     04 E4 85 F1 | 	sub	objptr, #4
01200     1B 13 02 F1 | 	add	arg01, local09
01204     7F 12 06 F1 | 	add	arg01, #127
01208     20 14 06 F6 | 	mov	arg02, #32
0120c     54 24 B2 FD | 	call	#_pspoke
01210     52 00 00 FF 
01214     E8 E4 05 F1 | 	add	objptr, ##42216
01218     F2 00 68 FC | 	wrlong	#0, objptr
0121c     52 00 00 FF 
01220     AA E4 85 F1 | 	sub	objptr, ##42154
01224     F2 3C C2 FA | 	rdbyte	local12, objptr
01228     1E 35 E2 F8 | 	getbyte	local08, local12, #0
0122c     80 34 06 FA | 	mul	local08, #128
01230     3A E4 85 F1 | 	sub	objptr, #58
01234     F2 36 02 FB | 	rdlong	local09, objptr
01238     1B 41 02 F6 | 	mov	local14, local09
0123c     1A 41 02 F1 | 	add	local14, local08
01240     38 E4 05 F1 | 	add	objptr, #56
01244     F2 42 E2 FA | 	rdword	local15, objptr
01248     21 39 32 F9 | 	getword	local10, local15, #0
0124c     1C 4D 52 F6 | 	abs	local20, local10 wc
01250     01 4C 46 F0 | 	shr	local20, #1
01254     26 4D 82 F6 | 	negc	local20, local20
01258     26 41 02 F1 | 	add	local14, local20
0125c     1E 31 E2 F8 | 	getbyte	local06, local12, #0
01260     18 33 02 F6 | 	mov	local07, local06
01264     80 32 06 FA | 	mul	local07, #128
01268     1B 35 02 F6 | 	mov	local08, local09
0126c     3C E4 85 F1 | 	sub	objptr, #60
01270     1A 59 02 F6 | 	mov	local26, local08
01274     19 59 02 F1 | 	add	local26, local07
01278     80 58 06 F1 | 	add	local26, #128
0127c                 | LR__0038
0127c     2C 41 52 F2 | 	cmps	local14, local26 wc
01280     B8 00 90 3D |  if_ae	jmp	#LR__0040
01284     3C E4 05 F1 | 	add	objptr, #60
01288     F2 30 E2 FA | 	rdword	local06, objptr
0128c     52 00 00 FF 
01290     AC E4 05 F1 | 	add	objptr, ##42156
01294     F2 34 02 FB | 	rdlong	local08, objptr
01298     01 34 66 F0 | 	shl	local08, #1
0129c     1A 31 02 F1 | 	add	local06, local08
012a0     52 00 00 FF 
012a4     AA E4 85 F1 | 	sub	objptr, ##42154
012a8     F2 3C C2 FA | 	rdbyte	local12, objptr
012ac     3E E4 85 F1 | 	sub	objptr, #62
012b0     10 3C 06 FA | 	mul	local12, #16
012b4     04 3C 06 F1 | 	add	local12, #4
012b8     20 13 02 F6 | 	mov	arg01, local14
012bc     EC 23 B2 FD | 	call	#_pspeek
012c0     FD 32 E2 F8 | 	getbyte	local07, result1, #0
012c4     41 E4 05 F1 | 	add	objptr, #65
012c8     F2 34 02 FB | 	rdlong	local08, objptr
012cc     04 E4 05 F1 | 	add	objptr, #4
012d0     F2 38 02 FB | 	rdlong	local10, objptr
012d4     45 E4 85 F1 | 	sub	objptr, #69
012d8     1C 37 02 F6 | 	mov	local09, local10
012dc     18 13 02 F6 | 	mov	arg01, local06
012e0     1E 15 02 F6 | 	mov	arg02, local12
012e4     19 17 02 F6 | 	mov	arg03, local07
012e8     1A 19 02 F6 | 	mov	arg04, local08
012ec     1B 1B 02 F6 | 	mov	arg05, local09
012f0     34 3C B2 FD | 	call	#_hg010b_spin2_putcharxycgf
012f4     52 00 00 FF 
012f8     E8 E4 05 F1 | 	add	objptr, ##42216
012fc     F2 30 02 FB | 	rdlong	local06, objptr
01300     01 30 06 F1 | 	add	local06, #1
01304     F2 30 62 FC | 	wrlong	local06, objptr
01308     52 00 00 FF 
0130c     E8 E4 85 F1 | 	sub	objptr, ##42216
01310     20 31 02 F6 | 	mov	local06, local14
01314     20 3D 02 F6 | 	mov	local12, local14
01318     01 3C 06 F1 | 	add	local12, #1
0131c     1E 41 02 F6 | 	mov	local14, local12
01320     58 FF 9F FD | 	jmp	#LR__0038
01324                 | LR__0039
01324     B4 01 00 FF 
01328     EB 51 06 F6 | 	mov	local22, ##@LR__5418
0132c     04 30 06 F6 | 	mov	local06, #4
01330     3C E4 05 F1 | 	add	objptr, #60
01334     F2 08 58 FC | 	wrword	#4, objptr
01338     3C E4 85 F1 | 	sub	objptr, #60
0133c                 | LR__0040
0133c                 | LR__0041
0133c                 | ' 
0133c                 | '   if key4=82 then 						' arrow up
0133c     52 3A 0E F2 | 	cmp	local11, #82 wz
01340     58 00 90 5D |  if_ne	jmp	#LR__0042
01344                 | ' return cursor_y
01344     3E E4 05 F1 | 	add	objptr, #62
01348     F2 FA C1 FA | 	rdbyte	result1, objptr
0134c     01 FA 85 F1 | 	sub	result1, #1
01350     52 00 00 FF 
01354     8E E4 05 F1 | 	add	objptr, ##42126
01358     F2 FA 61 FC | 	wrlong	result1, objptr
0135c                 | '     cy=v.getcursory()-1 : if cy<0 then cy=0 
0135c     52 00 00 FF 
01360     CC E4 85 F1 | 	sub	objptr, ##42188
01364     00 FA 55 F2 | 	cmps	result1, #0 wc
01368     52 00 00 CF 
0136c     CC E4 05 C1 |  if_b	add	objptr, ##42188
01370     F2 00 68 CC |  if_b	wrlong	#0, objptr
01374     52 00 00 CF 
01378     CC E4 85 C1 |  if_b	sub	objptr, ##42188
0137c     52 00 00 FF 
01380     CC E4 05 F1 | 	add	objptr, ##42188
01384     F2 3C 02 FB | 	rdlong	local12, objptr
01388     52 00 00 FF 
0138c     CC E4 85 F1 | 	sub	objptr, ##42188
01390     1E 31 02 F6 | 	mov	local06, local12
01394     18 13 02 F6 | 	mov	arg01, local06
01398     5C 3D B2 FD | 	call	#_hg010b_spin2_setcursory
0139c                 | LR__0042
0139c                 | '   if key4=81 then						' arrow down,  todo: remove hardcoded 36
0139c     51 3A 0E F2 | 	cmp	local11, #81 wz
013a0     58 00 90 5D |  if_ne	jmp	#LR__0043
013a4                 | ' return cursor_y
013a4     3E E4 05 F1 | 	add	objptr, #62
013a8     F2 FA C1 FA | 	rdbyte	result1, objptr
013ac     01 FA 05 F1 | 	add	result1, #1
013b0     52 00 00 FF 
013b4     8E E4 05 F1 | 	add	objptr, ##42126
013b8     F2 FA 61 FC | 	wrlong	result1, objptr
013bc                 | '     cy=v.getcursory()+1 : if cy>36  then cy=36
013bc     52 00 00 FF 
013c0     CC E4 85 F1 | 	sub	objptr, ##42188
013c4     25 FA 55 F2 | 	cmps	result1, #37 wc
013c8     52 00 00 3F 
013cc     CC E4 05 31 |  if_ae	add	objptr, ##42188
013d0     F2 48 68 3C |  if_ae	wrlong	#36, objptr
013d4     52 00 00 3F 
013d8     CC E4 85 31 |  if_ae	sub	objptr, ##42188
013dc     52 00 00 FF 
013e0     CC E4 05 F1 | 	add	objptr, ##42188
013e4     F2 3C 02 FB | 	rdlong	local12, objptr
013e8     52 00 00 FF 
013ec     CC E4 85 F1 | 	sub	objptr, ##42188
013f0     1E 31 02 F6 | 	mov	local06, local12
013f4     18 13 02 F6 | 	mov	arg01, local06
013f8     FC 3C B2 FD | 	call	#_hg010b_spin2_setcursory
013fc                 | LR__0043
013fc                 | '   if key4=80 then
013fc     50 3A 0E F2 | 	cmp	local11, #80 wz
01400     74 00 90 5D |  if_ne	jmp	#LR__0044
01404                 | ' return cursor_x
01404     3C E4 05 F1 | 	add	objptr, #60
01408     F2 30 E2 FA | 	rdword	local06, objptr
0140c     02 30 86 F1 | 	sub	local06, #2
01410     52 00 00 FF 
01414     94 E4 05 F1 | 	add	objptr, ##42132
01418     F2 30 62 FC | 	wrlong	local06, objptr
0141c                 | '     cx=v.getcursorx()-2 					' arrow left
0141c                 | '     if cx<editor_spaces then cx=editor_spaces			
0141c     1B 00 00 FF 
01420     9C E4 85 F1 | 	sub	objptr, ##13980
01424     F2 34 02 FB | 	rdlong	local08, objptr
01428     37 00 00 FF 
0142c     34 E4 85 F1 | 	sub	objptr, ##28212
01430     1A 33 02 F6 | 	mov	local07, local08
01434     19 31 52 F2 | 	cmps	local06, local07 wc
01438     37 00 00 CF 
0143c     34 E4 05 C1 |  if_b	add	objptr, ##28212
01440     F2 30 02 CB |  if_b	rdlong	local06, objptr
01444     1B 00 00 CF 
01448     9C E4 05 C1 |  if_b	add	objptr, ##13980
0144c     F2 30 62 CC |  if_b	wrlong	local06, objptr
01450     52 00 00 CF 
01454     D0 E4 85 C1 |  if_b	sub	objptr, ##42192
01458     52 00 00 FF 
0145c     D0 E4 05 F1 | 	add	objptr, ##42192
01460     F2 3C 02 FB | 	rdlong	local12, objptr
01464     52 00 00 FF 
01468     D0 E4 85 F1 | 	sub	objptr, ##42192
0146c     1E 31 02 F6 | 	mov	local06, local12
01470     18 13 02 F6 | 	mov	arg01, local06
01474     50 3C B2 FD | 	call	#_hg010b_spin2_setcursorx
01478                 | LR__0044
01478                 | '   if key4=79 then						' arrow right
01478     4F 3A 0E F2 | 	cmp	local11, #79 wz
0147c     54 00 90 5D |  if_ne	jmp	#LR__0045
01480                 | ' return cursor_x
01480     3C E4 05 F1 | 	add	objptr, #60
01484     F2 FA E1 FA | 	rdword	result1, objptr
01488     02 FA 05 F1 | 	add	result1, #2
0148c     52 00 00 FF 
01490     94 E4 05 F1 | 	add	objptr, ##42132
01494     F2 FA 61 FC | 	wrlong	result1, objptr
01498                 | '     cx=v.getcursorx()+2 
01498                 | '     if cx>254  then cx=254 
01498     52 00 00 FF 
0149c     D0 E4 85 F1 | 	sub	objptr, ##42192
014a0     FF FA 55 F2 | 	cmps	result1, #255 wc
014a4     52 00 00 3F 
014a8     D0 E4 05 31 |  if_ae	add	objptr, ##42192
014ac     F2 FC 69 3C |  if_ae	wrlong	#254, objptr
014b0     52 00 00 3F 
014b4     D0 E4 85 31 |  if_ae	sub	objptr, ##42192
014b8     52 00 00 FF 
014bc     D0 E4 05 F1 | 	add	objptr, ##42192
014c0     F2 30 02 FB | 	rdlong	local06, objptr
014c4     52 00 00 FF 
014c8     D0 E4 85 F1 | 	sub	objptr, ##42192
014cc     18 13 02 F6 | 	mov	arg01, local06
014d0     F4 3B B2 FD | 	call	#_hg010b_spin2_setcursorx
014d4                 | LR__0045
014d4                 | ' 
014d4                 | '   if key4=73 then 						' ins
014d4     49 3A 0E F2 | 	cmp	local11, #73 wz
014d8     40 00 90 5D |  if_ne	jmp	#LR__0048
014dc     52 00 00 FF 
014e0     C8 E4 05 F1 | 	add	objptr, ##42184
014e4     F2 30 02 FB | 	rdlong	local06, objptr
014e8     18 3D 22 F6 | 	not	local12, local06
014ec     F2 3C 62 FC | 	wrlong	local12, objptr
014f0                 | '     if do_insert then v.setcursorshape(14) else  v.setcursorshape(0)
014f0     52 00 00 FF 
014f4     C8 E4 85 F1 | 	sub	objptr, ##42184
014f8     00 3C 0E F2 | 	cmp	local12, #0 wz
014fc     10 00 90 AD |  if_e	jmp	#LR__0046
01500     0E 30 06 F6 | 	mov	local06, #14
01504     0E 12 06 F6 | 	mov	arg01, #14
01508     40 2A B2 FD | 	call	#_hg010b_spin2_setcursorshape
0150c     0C 00 90 FD | 	jmp	#LR__0047
01510                 | LR__0046
01510     00 30 06 F6 | 	mov	local06, #0
01514     00 12 06 F6 | 	mov	arg01, #0
01518     30 2A B2 FD | 	call	#_hg010b_spin2_setcursorshape
0151c                 | LR__0047
0151c                 | LR__0048
0151c     00 2C 06 F6 | 	mov	local04, #0
01520     F8 F2 9F FD | 	jmp	#LR__0001
01524                 | LR__0049
01524     A7 F0 03 F6 | 	mov	ptra, fp
01528     B2 00 A0 FD | 	call	#popregs_
0152c                 | _edit_ret
0152c     2D 00 64 FD | 	ret
01530                 | 
01530                 | ' 
01530                 | ' ''-----------------------------------------------------------------------------------------------------------
01530                 | ' ' 					A housekeepeer.
01530                 | ' ' A dedicated cog that is intended to do things in the background, for example tracking GUI elements
01530                 | ' ' or playing audio tracks in  the background.  In the current version it reads the mouse pointer and
01530                 | ' ' a digital joystick position. It also implements a 200 Hz clock that's ticks are synchronized with vblanks 
01530                 | ' ''-----------------------------------------------------------------------------------------------------------
01530                 | ' 
01530                 | ' sub housekeeper
01530                 | _housekeeper
01530                 | ' 
01530                 | ' do
01530                 | LR__0050
01530                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
01530     49 E4 05 F1 | 	add	objptr, #73
01534                 | LR__0051
01534     F2 12 02 FB | 	rdlong	arg01, objptr
01538     01 12 0E F2 | 	cmp	arg01, #1 wz
0153c     F4 FF 9F 5D |  if_ne	jmp	#LR__0051
01540     52 00 00 FF 
01544     4B E4 05 F1 | 	add	objptr, ##42059
01548     F2 12 02 FB | 	rdlong	arg01, objptr
0154c     01 12 06 F1 | 	add	arg01, #1
01550     F2 12 62 FC | 	wrlong	arg01, objptr
01554     52 00 00 FF 
01558     94 E4 85 F1 | 	sub	objptr, ##42132
0155c     80 00 B0 FD | 	call	#_gethdi
01560     05 12 06 F6 | 	mov	arg01, #5
01564     DC 5B B2 FD | 	call	#__system___waitms
01568     52 00 00 FF 
0156c     94 E4 05 F1 | 	add	objptr, ##42132
01570     F2 12 02 FB | 	rdlong	arg01, objptr
01574     01 12 06 F1 | 	add	arg01, #1
01578     F2 12 62 FC | 	wrlong	arg01, objptr
0157c     52 00 00 FF 
01580     94 E4 85 F1 | 	sub	objptr, ##42132
01584     58 00 B0 FD | 	call	#_gethdi
01588     05 12 06 F6 | 	mov	arg01, #5
0158c     B4 5B B2 FD | 	call	#__system___waitms
01590     52 00 00 FF 
01594     94 E4 05 F1 | 	add	objptr, ##42132
01598     F2 12 02 FB | 	rdlong	arg01, objptr
0159c     01 12 06 F1 | 	add	arg01, #1
015a0     F2 12 62 FC | 	wrlong	arg01, objptr
015a4     52 00 00 FF 
015a8     94 E4 85 F1 | 	sub	objptr, ##42132
015ac     30 00 B0 FD | 	call	#_gethdi
015b0     05 12 06 F6 | 	mov	arg01, #5
015b4     8C 5B B2 FD | 	call	#__system___waitms
015b8     52 00 00 FF 
015bc     94 E4 05 F1 | 	add	objptr, ##42132
015c0     F2 12 02 FB | 	rdlong	arg01, objptr
015c4     01 12 06 F1 | 	add	arg01, #1
015c8     F2 12 62 FC | 	wrlong	arg01, objptr
015cc     52 00 00 FF 
015d0     94 E4 85 F1 | 	sub	objptr, ##42132
015d4     08 00 B0 FD | 	call	#_gethdi
015d8     54 FF 9F FD | 	jmp	#LR__0050
015dc                 | _housekeeper_ret
015dc     2D 00 64 FD | 	ret
015e0                 | 
015e0                 | ' 
015e0                 | ' '----------------------------------------------------------------------------------------------------------
015e0                 | ' ' gethdi is called from the houseekeeper to read HDI related values
015e0                 | ' '----------------------------------------------------------------------------------------------------------
015e0                 | ' 
015e0                 | ' sub gethdi
015e0                 | _gethdi
015e0     08 4A 05 F6 | 	mov	COUNT_, #8
015e4     A8 00 A0 FD | 	call	#pushregs_
015e8                 | '   x := mouse_xacc
015e8     14 00 00 FF 
015ec     A1 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10401
015f0     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
015f4                 | '   y := mouse_yacc
015f4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
015f8     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
015fc     51 00 00 FF 
01600     48 E5 05 F1 | 	add	objptr, ##41800
01604     F2 14 62 FC | 	wrlong	arg02, objptr
01608     04 E4 05 F1 | 	add	objptr, #4
0160c     F2 12 62 FC | 	wrlong	arg01, objptr
01610                 | '   x := 0
01610                 | '   y := mouse_zacc
01610     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01614     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
01618     08 E4 05 F1 | 	add	objptr, #8
0161c     F2 FA 61 FC | 	wrlong	result1, objptr
01620                 | '   return mouse_bstate&7
01620     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01624     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
01628     14 00 00 FF 
0162c     AD F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10413
01630     07 FA 05 F5 | 	and	result1, #7
01634     04 E4 85 F1 | 	sub	objptr, #4
01638     F2 FA 61 FC | 	wrlong	result1, objptr
0163c     51 00 00 FF 
01640     50 E5 85 F1 | 	sub	objptr, ##41808
01644     00 26 06 F6 | 	mov	local01, #0
01648                 | ' 
01648                 | ' mousex,mousey=kbm.mouse_xy()
01648                 | ' dummy,mousew=kbm.mouse_scroll()
01648                 | ' mousek=kbm.mouse_buttons()
01648                 | ' i=0
01648                 | ' for j=0 to 6
01648     00 28 06 F6 | 	mov	local02, #0
0164c                 | LR__0060
0164c                 | '   if kbm.hidpad_id(j)>0 then
0164c     14 13 02 F6 | 	mov	arg01, local02
01650     9C 50 B2 FD | 	call	#_usbnew_spin2_hidpad_id
01654     01 FA 55 F2 | 	cmps	result1, #1 wc
01658     6C 01 90 CD |  if_b	jmp	#LR__0061
0165c     14 13 02 F6 | 	mov	arg01, local02
01660     00 14 06 F6 | 	mov	arg02, #0
01664     EC 50 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
01668     FD 2A 02 F6 | 	mov	local03, result1
0166c     14 13 02 F6 | 	mov	arg01, local02
01670     01 14 06 F6 | 	mov	arg02, #1
01674     DC 50 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
01678     FD 2C 02 F6 | 	mov	local04, result1
0167c     14 13 02 F6 | 	mov	arg01, local02
01680     02 14 06 F6 | 	mov	arg02, #2
01684     CC 50 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
01688     FD 2E 02 F6 | 	mov	local05, result1
0168c     14 13 02 F6 | 	mov	arg01, local02
01690     00 14 06 F6 | 	mov	arg02, #0
01694     0C 51 B2 FD | 	call	#_usbnew_spin2_hidpad_hat
01698     FD 30 02 F6 | 	mov	local06, result1
0169c     14 13 02 F6 | 	mov	arg01, local02
016a0     03 14 06 F6 | 	mov	arg02, #3
016a4     AC 50 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
016a8     FD 32 02 F6 | 	mov	local07, result1
016ac     14 13 02 F6 | 	mov	arg01, local02
016b0     04 14 06 F6 | 	mov	arg02, #4
016b4     9C 50 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
016b8     FD 34 02 F6 | 	mov	local08, result1
016bc     14 13 02 F6 | 	mov	arg01, local02
016c0     05 14 06 F6 | 	mov	arg02, #5
016c4     8C 50 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
016c8     FD 14 02 F6 | 	mov	arg02, result1
016cc     13 FB 01 F6 | 	mov	result1, local01
016d0     02 FA 65 F0 | 	shl	result1, #2
016d4     51 00 00 FF 
016d8     58 E5 05 F1 | 	add	objptr, ##41816
016dc     F2 FA 01 F1 | 	add	result1, objptr
016e0     FD 2A 62 FC | 	wrlong	local03, result1
016e4     13 FB 01 F6 | 	mov	result1, local01
016e8     02 FA 65 F0 | 	shl	result1, #2
016ec     1C E4 05 F1 | 	add	objptr, #28
016f0     F2 FA 01 F1 | 	add	result1, objptr
016f4     FD 2C 62 FC | 	wrlong	local04, result1
016f8     13 FB 01 F6 | 	mov	result1, local01
016fc     02 FA 65 F0 | 	shl	result1, #2
01700     1C E4 05 F1 | 	add	objptr, #28
01704     F2 FA 01 F1 | 	add	result1, objptr
01708     FD 2E 62 FC | 	wrlong	local05, result1
0170c     13 2F 02 F6 | 	mov	local05, local01
01710     02 2E 66 F0 | 	shl	local05, #2
01714     1C E4 05 F1 | 	add	objptr, #28
01718     F2 2E 02 F1 | 	add	local05, objptr
0171c     17 31 62 FC | 	wrlong	local06, local05
01720     13 31 02 F6 | 	mov	local06, local01
01724     02 30 66 F0 | 	shl	local06, #2
01728     1C E4 05 F1 | 	add	objptr, #28
0172c     F2 30 02 F1 | 	add	local06, objptr
01730     18 33 62 FC | 	wrlong	local07, local06
01734     13 33 02 F6 | 	mov	local07, local01
01738     02 32 66 F0 | 	shl	local07, #2
0173c     1C E4 05 F1 | 	add	objptr, #28
01740     F2 32 02 F1 | 	add	local07, objptr
01744     19 35 62 FC | 	wrlong	local08, local07
01748     13 35 02 F6 | 	mov	local08, local01
0174c     02 34 66 F0 | 	shl	local08, #2
01750     1C E4 05 F1 | 	add	objptr, #28
01754     F2 34 02 F1 | 	add	local08, objptr
01758     1A 15 62 FC | 	wrlong	arg02, local08
0175c     60 00 00 FF 
01760     00 2A 06 F1 | 	add	local03, ##49152
01764     0F 2A 46 F0 | 	shr	local03, #15
01768     01 34 06 F6 | 	mov	local08, #1
0176c     15 35 02 F1 | 	add	local08, local03
01770     60 00 00 FF 
01774     00 2C 06 F1 | 	add	local04, ##49152
01778     0F 2C 46 F0 | 	shr	local04, #15
0177c     01 32 06 F6 | 	mov	local07, #1
01780     16 33 02 F1 | 	add	local07, local04
01784     13 31 02 F6 | 	mov	local06, local01
01788     02 30 66 F0 | 	shl	local06, #2
0178c     1C E4 05 F1 | 	add	objptr, #28
01790     F2 30 02 F1 | 	add	local06, objptr
01794     02 32 66 F0 | 	shl	local07, #2
01798     19 35 02 F1 | 	add	local08, local07
0179c     18 35 62 FC | 	wrlong	local08, local06
017a0     13 35 02 F6 | 	mov	local08, local01
017a4     02 34 66 F0 | 	shl	local08, #2
017a8     1C E4 05 F1 | 	add	objptr, #28
017ac     F2 34 02 F1 | 	add	local08, objptr
017b0     14 13 02 F6 | 	mov	arg01, local02
017b4     52 00 00 FF 
017b8     38 E4 85 F1 | 	sub	objptr, ##42040
017bc     60 4F B2 FD | 	call	#_usbnew_spin2_hidpad_buttons
017c0     1A FB 61 FC | 	wrlong	result1, local08
017c4     01 26 06 F1 | 	add	local01, #1
017c8                 | LR__0061
017c8     01 28 06 F1 | 	add	local02, #1
017cc     07 28 16 F2 | 	cmp	local02, #7 wc
017d0     78 FE 9F CD |  if_b	jmp	#LR__0060
017d4     97 22 48 FB | 	callpa	#(@LR__0063-@LR__0062)>>2,fcache_load_ptr_
017d8                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
017d8                 | LR__0062
017d8     07 26 16 F2 | 	cmp	local01, #7 wc
017dc     3C 00 90 3D |  if_ae	jmp	#LR__0064
017e0     13 35 02 F6 | 	mov	local08, local01
017e4     02 34 66 F0 | 	shl	local08, #2
017e8     52 00 00 FF 
017ec     1C E4 05 F1 | 	add	objptr, ##42012
017f0     F2 34 02 F1 | 	add	local08, objptr
017f4     1A 01 68 FC | 	wrlong	#0, local08
017f8     13 35 02 F6 | 	mov	local08, local01
017fc     02 34 66 F0 | 	shl	local08, #2
01800     1C E4 05 F1 | 	add	objptr, #28
01804     F2 34 02 F1 | 	add	local08, objptr
01808     1A 01 68 FC | 	wrlong	#0, local08
0180c     01 26 06 F1 | 	add	local01, #1
01810     52 00 00 FF 
01814     38 E4 85 F1 | 	sub	objptr, ##42040
01818     BC FF 9F FD | 	jmp	#LR__0062
0181c                 | LR__0063
0181c                 | LR__0064
0181c     A7 F0 03 F6 | 	mov	ptra, fp
01820     B2 00 A0 FD | 	call	#popregs_
01824                 | _gethdi_ret
01824     2D 00 64 FD | 	ret
01828                 | 
01828                 | ' 
01828                 | ' '-------------------------------------------------------------------------------------------------------------
01828                 | ' '---------------------------------- Housekeeper stuff ends here ----------------------------------------------
01828                 | ' '-------------------------------------------------------------------------------------------------------------
01828                 | ' 
01828                 | ' '-------------------------------------------------------------------------------------------------------------
01828                 | ' '
01828                 | ' '                                     LINE INTERPRETER/TOKENIZER
01828                 | ' '
01828                 | ' '-------------------------------------------------------------------------------------------------------------
01828                 | ' 
01828                 | ' 
01828                 | ' sub interpret
01828                 | _interpret
01828     35 4A 05 F6 | 	mov	COUNT_, #53
0182c     A8 00 A0 FD | 	call	#pushregs_
01830     01 00 00 FF 
01834     84 F0 07 F1 | 	add	ptra, ##644
01838     37 00 00 FF 
0183c     1C E4 05 F1 | 	add	objptr, ##28188
01840     F2 12 02 FB | 	rdlong	arg01, objptr
01844     37 00 00 FF 
01848     1C E4 85 F1 | 	sub	objptr, ##28188
0184c     0C 7B B2 FD | 	call	#__system__RTrim_S
01850     FD 12 02 F6 | 	mov	arg01, result1
01854     44 7A B2 FD | 	call	#__system__LTrim_S
01858     37 00 00 FF 
0185c     20 E4 05 F1 | 	add	objptr, ##28192
01860     F2 FA 61 FC | 	wrlong	result1, objptr
01864     04 E4 05 F1 | 	add	objptr, #4
01868     FF FF FF FF 
0186c     F2 FE 6B FC | 	wrlong	##-1, objptr
01870     1B 00 00 FF 
01874     8C E4 05 F1 | 	add	objptr, ##13964
01878     F2 00 68 FC | 	wrlong	#0, objptr
0187c     08 00 00 FF 
01880     34 E4 85 F1 | 	sub	objptr, ##4148
01884     F2 00 68 FC | 	wrlong	#0, objptr
01888     4A 00 00 FF 
0188c     7C E4 85 F1 | 	sub	objptr, ##38012
01890     00 26 06 F6 | 	mov	local01, #0
01894                 | LR__0070
01894                 | ' 
01894                 | ' ' -------------------------    Pass 1: Split the line to parts, strip unneded spaces, lowercase parts, detect and concatenate strings
01894                 | ' 
01894                 | ' fullline$=trim$(line$): cont=-1  : linenum=0 : lineptr=0 : err=0
01894                 | ' 
01894                 | ' 108 
01894                 | ' for i=0 to 125: separators(i)=0 :next i
01894     00 28 06 F6 | 	mov	local02, #0
01898     38 4E 05 F1 | 	add	fp, #56
0189c     97 0E 48 FB | 	callpa	#(@LR__0072-@LR__0071)>>2,fcache_load_ptr_
018a0                 | LR__0071
018a0     14 2B 02 F6 | 	mov	local03, local02
018a4     02 2A 66 F0 | 	shl	local03, #2
018a8     A7 2A 02 F1 | 	add	local03, fp
018ac     15 01 68 FC | 	wrlong	#0, local03
018b0     01 28 06 F1 | 	add	local02, #1
018b4     7E 28 56 F2 | 	cmps	local02, #126 wc
018b8     E4 FF 9F CD |  if_b	jmp	#LR__0071
018bc                 | LR__0072
018bc     38 4E 85 F1 | 	sub	fp, #56
018c0                 | ' for i=0 to 125: lparts(i).part$="": lparts(i).token=0: next i
018c0     00 28 06 F6 | 	mov	local02, #0
018c4     35 00 00 FF 
018c8     0C E4 05 F1 | 	add	objptr, ##27148
018cc     97 20 48 FB | 	callpa	#(@LR__0074-@LR__0073)>>2,fcache_load_ptr_
018d0                 | LR__0073
018d0     14 2D 02 F6 | 	mov	local04, local02
018d4     03 2C 66 F0 | 	shl	local04, #3
018d8     F2 2C 02 F1 | 	add	local04, objptr
018dc     B4 01 00 FF 
018e0     EC 17 06 F6 | 	mov	arg03, ##@LR__5419
018e4     16 17 62 FC | 	wrlong	arg03, local04
018e8     14 2D 02 F6 | 	mov	local04, local02
018ec     03 2C 66 F0 | 	shl	local04, #3
018f0     F2 2E 02 F6 | 	mov	local05, objptr
018f4     F2 2C 02 F1 | 	add	local04, objptr
018f8     00 30 06 F6 | 	mov	local06, #0
018fc     04 2C 06 F1 | 	add	local04, #4
01900     16 01 68 FC | 	wrlong	#0, local04
01904     01 28 06 F1 | 	add	local02, #1
01908     7E 28 56 F2 | 	cmps	local02, #126 wc
0190c     C0 FF 9F CD |  if_b	jmp	#LR__0073
01910                 | LR__0074
01910     02 00 00 FF 
01914     10 E4 05 F1 | 	add	objptr, ##1040
01918     F2 12 02 FB | 	rdlong	arg01, objptr
0191c     37 00 00 FF 
01920     1C E4 85 F1 | 	sub	objptr, ##28188
01924     34 7A B2 FD | 	call	#__system__RTrim_S
01928     FD 12 02 F6 | 	mov	arg01, result1
0192c     6C 79 B2 FD | 	call	#__system__LTrim_S
01930     37 00 00 FF 
01934     1C E4 05 F1 | 	add	objptr, ##28188
01938     F2 FA 61 FC | 	wrlong	result1, objptr
0193c     B4 01 00 FF 
01940     ED 2D 06 F6 | 	mov	local04, ##@LR__5420
01944     1B 00 00 FF 
01948     D0 E4 05 F1 | 	add	objptr, ##14032
0194c     F2 2C 62 FC | 	wrlong	local04, objptr
01950     1B 00 00 FF 
01954     D0 E4 85 F1 | 	sub	objptr, ##14032
01958     F2 12 02 FB | 	rdlong	arg01, objptr
0195c     37 00 00 FF 
01960     1C E4 85 F1 | 	sub	objptr, ##28188
01964     09 33 02 F6 | 	mov	local07, arg01
01968     97 06 48 FB | 	callpa	#(@LR__0076-@LR__0075)>>2,fcache_load_ptr_
0196c                 | LR__0075
0196c     19 FB C9 FA | 	rdbyte	result1, local07 wz
01970     01 32 06 51 |  if_ne	add	local07, #1
01974     F4 FF 9F 5D |  if_ne	jmp	#LR__0075
01978                 | LR__0076
01978     09 33 8A F1 | 	sub	local07, arg01 wz
0197c     52 00 00 FF 
01980     F0 E4 05 F1 | 	add	objptr, ##42224
01984     F2 32 62 FC | 	wrlong	local07, objptr
01988                 | ' if l=0 then goto 101					' empty line,  nothing to do except print "ready"
01988     52 00 00 FF 
0198c     F0 E4 85 F1 | 	sub	objptr, ##42224
01990     DC 29 90 AD |  if_e	jmp	#LR__0209
01994     00 34 06 F6 | 	mov	local08, #0
01998                 | ' d=0							' before we split the line, we have to find colons that are inside a string, 
01998                 | ' for i=1 to len(line$)
01998     01 28 06 F6 | 	mov	local02, #1
0199c     37 00 00 FF 
019a0     1C E4 05 F1 | 	add	objptr, ##28188
019a4     F2 12 02 FB | 	rdlong	arg01, objptr
019a8     37 00 00 FF 
019ac     1C E4 85 F1 | 	sub	objptr, ##28188
019b0     09 33 02 F6 | 	mov	local07, arg01
019b4     97 06 48 FB | 	callpa	#(@LR__0078-@LR__0077)>>2,fcache_load_ptr_
019b8                 | LR__0077
019b8     19 FB C9 FA | 	rdbyte	result1, local07 wz
019bc     01 32 06 51 |  if_ne	add	local07, #1
019c0     F4 FF 9F 5D |  if_ne	jmp	#LR__0077
019c4                 | LR__0078
019c4     09 33 82 F1 | 	sub	local07, arg01
019c8     19 37 02 F6 | 	mov	local09, local07
019cc     01 36 06 F1 | 	add	local09, #1
019d0                 | LR__0079
019d0     1B 29 52 F2 | 	cmps	local02, local09 wc
019d4     AC 00 90 3D |  if_ae	jmp	#LR__0081
019d8                 | '   if mid$(line$,i,1)="""" andalso d=0 then 		' they are inside a string if there is an odd number of " before :
019d8     37 00 00 FF 
019dc     1C E4 05 F1 | 	add	objptr, ##28188
019e0     F2 12 02 FB | 	rdlong	arg01, objptr
019e4     37 00 00 FF 
019e8     1C E4 85 F1 | 	sub	objptr, ##28188
019ec     14 15 02 F6 | 	mov	arg02, local02
019f0     01 16 06 F6 | 	mov	arg03, #1
019f4     EC 75 B2 FD | 	call	#__system__Mid_S
019f8     FD 12 02 F6 | 	mov	arg01, result1
019fc     B4 01 00 FF 
01a00     EE 15 06 F6 | 	mov	arg02, ##@LR__5421
01a04     70 54 B2 FD | 	call	#__system___string_cmp
01a08     00 FA 0D F2 | 	cmp	result1, #0 wz
01a0c     00 34 0E A2 |  if_e	cmp	local08, #0 wz
01a10     01 34 06 A6 |  if_e	mov	local08, #1
01a14     3C 00 90 AD |  if_e	jmp	#LR__0080
01a18     37 00 00 FF 
01a1c     1C E4 05 F1 | 	add	objptr, ##28188
01a20     F2 12 02 FB | 	rdlong	arg01, objptr
01a24     37 00 00 FF 
01a28     1C E4 85 F1 | 	sub	objptr, ##28188
01a2c     14 15 02 F6 | 	mov	arg02, local02
01a30     01 16 06 F6 | 	mov	arg03, #1
01a34     AC 75 B2 FD | 	call	#__system__Mid_S
01a38     FD 12 02 F6 | 	mov	arg01, result1
01a3c     B4 01 00 FF 
01a40     F0 15 06 F6 | 	mov	arg02, ##@LR__5422
01a44     30 54 B2 FD | 	call	#__system___string_cmp
01a48     00 FA 0D F2 | 	cmp	result1, #0 wz
01a4c     01 34 0E A2 |  if_e	cmp	local08, #1 wz
01a50     00 34 06 A6 |  if_e	mov	local08, #0
01a54                 | LR__0080
01a54     14 2D 02 F6 | 	mov	local04, local02
01a58     03 2C 66 F0 | 	shl	local04, #3
01a5c     35 00 00 FF 
01a60     0C E4 05 F1 | 	add	objptr, ##27148
01a64     F2 2E 02 F6 | 	mov	local05, objptr
01a68     F2 2C 02 F1 | 	add	local04, objptr
01a6c     04 2C 06 F1 | 	add	local04, #4
01a70     16 35 62 FC | 	wrlong	local08, local04
01a74     01 28 06 F1 | 	add	local02, #1
01a78     35 00 00 FF 
01a7c     0C E4 85 F1 | 	sub	objptr, ##27148
01a80     4C FF 9F FD | 	jmp	#LR__0079
01a84                 | LR__0081
01a84     01 28 06 F6 | 	mov	local02, #1
01a88                 | ' i=1: do until (mid$(line$,i,1)=":" andalso lparts(i).token=0)  orelse i>=l : i=i+1 : loop 		' find the first : that is not in a string
01a88                 | LR__0082
01a88     37 00 00 FF 
01a8c     1C E4 05 F1 | 	add	objptr, ##28188
01a90     F2 12 02 FB | 	rdlong	arg01, objptr
01a94     37 00 00 FF 
01a98     1C E4 85 F1 | 	sub	objptr, ##28188
01a9c     14 15 02 F6 | 	mov	arg02, local02
01aa0     01 16 06 F6 | 	mov	arg03, #1
01aa4     3C 75 B2 FD | 	call	#__system__Mid_S
01aa8     FD 12 02 F6 | 	mov	arg01, result1
01aac     B4 01 00 FF 
01ab0     F2 39 06 F6 | 	mov	local10, ##@LR__5423
01ab4     1C 15 02 F6 | 	mov	arg02, local10
01ab8     BC 53 B2 FD | 	call	#__system___string_cmp
01abc     00 FA 0D F2 | 	cmp	result1, #0 wz
01ac0     34 00 90 5D |  if_ne	jmp	#LR__0083
01ac4     14 2F 02 F6 | 	mov	local05, local02
01ac8     03 2E 66 F0 | 	shl	local05, #3
01acc     35 00 00 FF 
01ad0     0C E4 05 F1 | 	add	objptr, ##27148
01ad4     F2 30 02 F6 | 	mov	local06, objptr
01ad8     F2 2E 02 F1 | 	add	local05, objptr
01adc     04 2E 06 F1 | 	add	local05, #4
01ae0     17 3B 02 FB | 	rdlong	local11, local05
01ae4     04 2E 86 F1 | 	sub	local05, #4
01ae8     1D 3D 0A F6 | 	mov	local12, local11 wz
01aec     35 00 00 FF 
01af0     0C E4 85 F1 | 	sub	objptr, ##27148
01af4     24 00 90 AD |  if_e	jmp	#LR__0084
01af8                 | LR__0083
01af8     52 00 00 FF 
01afc     F0 E4 05 F1 | 	add	objptr, ##42224
01b00     F2 3E 02 FB | 	rdlong	local13, objptr
01b04     52 00 00 FF 
01b08     F0 E4 85 F1 | 	sub	objptr, ##42224
01b0c     1F 41 02 F6 | 	mov	local14, local13
01b10     20 29 52 F2 | 	cmps	local02, local14 wc
01b14     01 28 06 C1 |  if_b	add	local02, #1
01b18     6C FF 9F CD |  if_b	jmp	#LR__0082
01b1c                 | LR__0084
01b1c                 | ' if i<l then let rest$=trim$(right$(line$,len(line$)-i)):line$=trim$(left$(line$,i-1)) else rest$="" 	' and separate the part of the line before the first : from the rest
01b1c     52 00 00 FF 
01b20     F0 E4 05 F1 | 	add	objptr, ##42224
01b24     F2 2C 02 FB | 	rdlong	local04, objptr
01b28     52 00 00 FF 
01b2c     F0 E4 85 F1 | 	sub	objptr, ##42224
01b30     16 29 52 F2 | 	cmps	local02, local04 wc
01b34     A8 00 90 3D |  if_ae	jmp	#LR__0087
01b38     37 00 00 FF 
01b3c     1C E4 05 F1 | 	add	objptr, ##28188
01b40     F2 30 02 FB | 	rdlong	local06, objptr
01b44     37 00 00 FF 
01b48     1C E4 85 F1 | 	sub	objptr, ##28188
01b4c     18 13 02 F6 | 	mov	arg01, local06
01b50     09 33 02 F6 | 	mov	local07, arg01
01b54     97 06 48 FB | 	callpa	#(@LR__0086-@LR__0085)>>2,fcache_load_ptr_
01b58                 | LR__0085
01b58     19 FB C9 FA | 	rdbyte	result1, local07 wz
01b5c     01 32 06 51 |  if_ne	add	local07, #1
01b60     F4 FF 9F 5D |  if_ne	jmp	#LR__0085
01b64                 | LR__0086
01b64     09 33 82 F1 | 	sub	local07, arg01
01b68     19 2F 02 F6 | 	mov	local05, local07
01b6c     17 15 02 F6 | 	mov	arg02, local05
01b70     14 15 82 F1 | 	sub	arg02, local02
01b74     18 13 02 F6 | 	mov	arg01, local06
01b78     D8 73 B2 FD | 	call	#__system__Right_S
01b7c     FD 12 02 F6 | 	mov	arg01, result1
01b80     D8 77 B2 FD | 	call	#__system__RTrim_S
01b84     FD 12 02 F6 | 	mov	arg01, result1
01b88     10 77 B2 FD | 	call	#__system__LTrim_S
01b8c     52 00 00 FF 
01b90     F4 E4 05 F1 | 	add	objptr, ##42228
01b94     F2 FA 61 FC | 	wrlong	result1, objptr
01b98     1B 00 00 FF 
01b9c     D8 E4 85 F1 | 	sub	objptr, ##14040
01ba0     F2 12 02 FB | 	rdlong	arg01, objptr
01ba4     37 00 00 FF 
01ba8     1C E4 85 F1 | 	sub	objptr, ##28188
01bac     01 28 86 F1 | 	sub	local02, #1
01bb0     14 15 02 F6 | 	mov	arg02, local02
01bb4     14 73 B2 FD | 	call	#__system__Left_S
01bb8     FD 12 02 F6 | 	mov	arg01, result1
01bbc     9C 77 B2 FD | 	call	#__system__RTrim_S
01bc0     FD 12 02 F6 | 	mov	arg01, result1
01bc4     D4 76 B2 FD | 	call	#__system__LTrim_S
01bc8     37 00 00 FF 
01bcc     1C E4 05 F1 | 	add	objptr, ##28188
01bd0     F2 FA 61 FC | 	wrlong	result1, objptr
01bd4     37 00 00 FF 
01bd8     1C E4 85 F1 | 	sub	objptr, ##28188
01bdc     1C 00 90 FD | 	jmp	#LR__0088
01be0                 | LR__0087
01be0     B4 01 00 FF 
01be4     F4 2D 06 F6 | 	mov	local04, ##@LR__5424
01be8     52 00 00 FF 
01bec     F4 E4 05 F1 | 	add	objptr, ##42228
01bf0     F2 2C 62 FC | 	wrlong	local04, objptr
01bf4     52 00 00 FF 
01bf8     F4 E4 85 F1 | 	sub	objptr, ##42228
01bfc                 | LR__0088
01bfc                 | ' 
01bfc                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not the last part
01bfc     37 00 00 FF 
01c00     24 E4 05 F1 | 	add	objptr, ##28196
01c04     F2 2C 02 FB | 	rdlong	local04, objptr
01c08     37 00 00 FF 
01c0c     24 E4 85 F1 | 	sub	objptr, ##28196
01c10     FF FF 7F FF 
01c14     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
01c18     40 00 90 5D |  if_ne	jmp	#LR__0089
01c1c     52 00 00 FF 
01c20     F4 E4 05 F1 | 	add	objptr, ##42228
01c24     F2 12 02 FB | 	rdlong	arg01, objptr
01c28     52 00 00 FF 
01c2c     F4 E4 85 F1 | 	sub	objptr, ##42228
01c30     B4 01 00 FF 
01c34     F5 31 06 F6 | 	mov	local06, ##@LR__5425
01c38     18 15 02 F6 | 	mov	arg02, local06
01c3c     38 52 B2 FD | 	call	#__system___string_cmp
01c40     00 FA 0D F2 | 	cmp	result1, #0 wz
01c44     37 00 00 5F 
01c48     24 E4 05 51 |  if_ne	add	objptr, ##28196
01c4c     F2 00 68 5C |  if_ne	wrlong	#0, objptr
01c50     37 00 00 5F 
01c54     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01c58     08 01 90 5D |  if_ne	jmp	#LR__0093
01c5c                 | LR__0089
01c5c                 | ' if cont=-1 andalso rest$= "" then cont=3 : goto 107		' this is the first AND the last part
01c5c     37 00 00 FF 
01c60     24 E4 05 F1 | 	add	objptr, ##28196
01c64     F2 2C 02 FB | 	rdlong	local04, objptr
01c68     37 00 00 FF 
01c6c     24 E4 85 F1 | 	sub	objptr, ##28196
01c70     FF FF 7F FF 
01c74     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
01c78     3C 00 90 5D |  if_ne	jmp	#LR__0090
01c7c     52 00 00 FF 
01c80     F4 E4 05 F1 | 	add	objptr, ##42228
01c84     F2 12 02 FB | 	rdlong	arg01, objptr
01c88     52 00 00 FF 
01c8c     F4 E4 85 F1 | 	sub	objptr, ##42228
01c90     B4 01 00 FF 
01c94     F6 15 06 F6 | 	mov	arg02, ##@LR__5426
01c98     DC 51 B2 FD | 	call	#__system___string_cmp
01c9c     00 FA 0D F2 | 	cmp	result1, #0 wz
01ca0     37 00 00 AF 
01ca4     24 E4 05 A1 |  if_e	add	objptr, ##28196
01ca8     F2 06 68 AC |  if_e	wrlong	#3, objptr
01cac     37 00 00 AF 
01cb0     24 E4 85 A1 |  if_e	sub	objptr, ##28196
01cb4     AC 00 90 AD |  if_e	jmp	#LR__0093
01cb8                 | LR__0090
01cb8                 | ' if cont=4  andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
01cb8     37 00 00 FF 
01cbc     24 E4 05 F1 | 	add	objptr, ##28196
01cc0     F2 2C 02 FB | 	rdlong	local04, objptr
01cc4     37 00 00 FF 
01cc8     24 E4 85 F1 | 	sub	objptr, ##28196
01ccc     04 2C 0E F2 | 	cmp	local04, #4 wz
01cd0     3C 00 90 5D |  if_ne	jmp	#LR__0091
01cd4     52 00 00 FF 
01cd8     F4 E4 05 F1 | 	add	objptr, ##42228
01cdc     F2 12 02 FB | 	rdlong	arg01, objptr
01ce0     52 00 00 FF 
01ce4     F4 E4 85 F1 | 	sub	objptr, ##42228
01ce8     B4 01 00 FF 
01cec     F7 15 06 F6 | 	mov	arg02, ##@LR__5427
01cf0     84 51 B2 FD | 	call	#__system___string_cmp
01cf4     00 FA 0D F2 | 	cmp	result1, #0 wz
01cf8     37 00 00 5F 
01cfc     24 E4 05 51 |  if_ne	add	objptr, ##28196
01d00     F2 02 68 5C |  if_ne	wrlong	#1, objptr
01d04     37 00 00 5F 
01d08     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01d0c     54 00 90 5D |  if_ne	jmp	#LR__0093
01d10                 | LR__0091
01d10                 | ' if cont=4  andalso rest$= "" then cont=2 : goto 107		' this is the last, and not the first, part
01d10     37 00 00 FF 
01d14     24 E4 05 F1 | 	add	objptr, ##28196
01d18     F2 2C 02 FB | 	rdlong	local04, objptr
01d1c     37 00 00 FF 
01d20     24 E4 85 F1 | 	sub	objptr, ##28196
01d24     04 2C 0E F2 | 	cmp	local04, #4 wz
01d28     38 00 90 5D |  if_ne	jmp	#LR__0092
01d2c     52 00 00 FF 
01d30     F4 E4 05 F1 | 	add	objptr, ##42228
01d34     F2 12 02 FB | 	rdlong	arg01, objptr
01d38     52 00 00 FF 
01d3c     F4 E4 85 F1 | 	sub	objptr, ##42228
01d40     B4 01 00 FF 
01d44     F8 15 06 F6 | 	mov	arg02, ##@LR__5428
01d48     2C 51 B2 FD | 	call	#__system___string_cmp
01d4c     00 FA 0D F2 | 	cmp	result1, #0 wz
01d50     37 00 00 AF 
01d54     24 E4 05 A1 |  if_e	add	objptr, ##28196
01d58     F2 04 68 AC |  if_e	wrlong	#2, objptr
01d5c     37 00 00 AF 
01d60     24 E4 85 A1 |  if_e	sub	objptr, ##28196
01d64                 | LR__0092
01d64                 | LR__0093
01d64     38 4E 05 F1 | 	add	fp, #56
01d68     A7 00 68 FC | 	wrlong	#0, fp
01d6c     38 4E 85 F1 | 	sub	fp, #56
01d70     00 28 06 F6 | 	mov	local02, #0
01d74     01 42 06 F6 | 	mov	local15, #1
01d78                 | ' 
01d78                 | ' ' 1b: find separators
01d78                 | ' 
01d78                 | ' 107
01d78                 | ' separators(0)=0
01d78                 | ' i=0: j=1
01d78                 | ' do: 
01d78                 | LR__0094
01d78     01 28 06 F1 | 	add	local02, #1
01d7c     37 00 00 FF 
01d80     1C E4 05 F1 | 	add	objptr, ##28188
01d84     F2 12 02 FB | 	rdlong	arg01, objptr
01d88     37 00 00 FF 
01d8c     1C E4 85 F1 | 	sub	objptr, ##28188
01d90     14 15 02 F6 | 	mov	arg02, local02
01d94     01 16 06 F6 | 	mov	arg03, #1
01d98     48 72 B2 FD | 	call	#__system__Mid_S
01d9c     FD 44 02 F6 | 	mov	local16, result1
01da0                 | '   i+=1 : c$=mid$(line$,i,1) : if isseparator(c$) then separators(j)=i: j+=1 
01da0     22 13 02 F6 | 	mov	arg01, local16
01da4     30 2E B0 FD | 	call	#_isseparator
01da8     00 FA 0D F2 | 	cmp	result1, #0 wz
01dac     1C 00 90 AD |  if_e	jmp	#LR__0095
01db0     21 2B 02 F6 | 	mov	local03, local15
01db4     02 2A 66 F0 | 	shl	local03, #2
01db8     38 4E 05 F1 | 	add	fp, #56
01dbc     A7 2A 02 F1 | 	add	local03, fp
01dc0     15 29 62 FC | 	wrlong	local02, local03
01dc4     01 42 06 F1 | 	add	local15, #1
01dc8     38 4E 85 F1 | 	sub	fp, #56
01dcc                 | LR__0095
01dcc     52 00 00 FF 
01dd0     F0 E4 05 F1 | 	add	objptr, ##42224
01dd4     F2 2C 02 FB | 	rdlong	local04, objptr
01dd8     52 00 00 FF 
01ddc     F0 E4 85 F1 | 	sub	objptr, ##42224
01de0     16 29 5A F2 | 	cmps	local02, local04 wcz
01de4     90 FF 9F ED |  if_be	jmp	#LR__0094
01de8     21 2B 02 F6 | 	mov	local03, local15
01dec     02 2A 66 F0 | 	shl	local03, #2
01df0     38 4E 05 F1 | 	add	fp, #56
01df4     A7 38 02 F6 | 	mov	local10, fp
01df8     A7 2A 02 F1 | 	add	local03, fp
01dfc     15 29 62 FC | 	wrlong	local02, local03
01e00     00 46 06 F6 | 	mov	local17, #0
01e04                 | ' for i=0 to j-1 
01e04     00 28 06 F6 | 	mov	local02, #0
01e08     21 49 02 F6 | 	mov	local18, local15
01e0c     38 4E 85 F1 | 	sub	fp, #56
01e10                 | LR__0096
01e10     24 29 52 F2 | 	cmps	local02, local18 wc
01e14     50 01 90 3D |  if_ae	jmp	#LR__0100
01e18     14 2B 02 F6 | 	mov	local03, local02
01e1c     02 2A 66 F0 | 	shl	local03, #2
01e20     38 4E 05 F1 | 	add	fp, #56
01e24     A7 2A 02 F1 | 	add	local03, fp
01e28     15 2F 02 FB | 	rdlong	local05, local03
01e2c     52 00 00 FF 
01e30     FC E4 05 F1 | 	add	objptr, ##42236
01e34     F2 2E 62 FC | 	wrlong	local05, objptr
01e38     14 2B 02 F6 | 	mov	local03, local02
01e3c     01 2A 06 F1 | 	add	local03, #1
01e40     02 2A 66 F0 | 	shl	local03, #2
01e44     A7 38 02 F6 | 	mov	local10, fp
01e48     A7 2A 02 F1 | 	add	local03, fp
01e4c     15 2F 02 FB | 	rdlong	local05, local03
01e50     04 E4 05 F1 | 	add	objptr, #4
01e54     F2 2E 62 FC | 	wrlong	local05, objptr
01e58                 | '   if p1>0 then let p$=mid$(line$,p1,1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01e58     04 E4 85 F1 | 	sub	objptr, #4
01e5c     F2 2C 02 FB | 	rdlong	local04, objptr
01e60     52 00 00 FF 
01e64     FC E4 85 F1 | 	sub	objptr, ##42236
01e68     01 2C 56 F2 | 	cmps	local04, #1 wc
01e6c     38 4E 85 F1 | 	sub	fp, #56
01e70     68 00 90 CD |  if_b	jmp	#LR__0098
01e74     37 00 00 FF 
01e78     1C E4 05 F1 | 	add	objptr, ##28188
01e7c     F2 12 02 FB | 	rdlong	arg01, objptr
01e80     1B 00 00 FF 
01e84     E0 E4 05 F1 | 	add	objptr, ##14048
01e88     F2 14 02 FB | 	rdlong	arg02, objptr
01e8c     52 00 00 FF 
01e90     FC E4 85 F1 | 	sub	objptr, ##42236
01e94     01 16 06 F6 | 	mov	arg03, #1
01e98     48 71 B2 FD | 	call	#__system__Mid_S
01e9c     FD 4A 02 F6 | 	mov	local19, result1
01ea0     B4 01 00 FF 
01ea4     F9 15 06 F6 | 	mov	arg02, ##@LR__5429
01ea8     25 13 02 F6 | 	mov	arg01, local19
01eac     C8 4F B2 FD | 	call	#__system___string_cmp
01eb0     00 FA 0D F2 | 	cmp	result1, #0 wz
01eb4     24 00 90 AD |  if_e	jmp	#LR__0097
01eb8     23 39 02 F6 | 	mov	local10, local17
01ebc     03 38 66 F0 | 	shl	local10, #3
01ec0     35 00 00 FF 
01ec4     0C E4 05 F1 | 	add	objptr, ##27148
01ec8     F2 38 02 F1 | 	add	local10, objptr
01ecc     1C 4B 62 FC | 	wrlong	local19, local10
01ed0     01 46 06 F1 | 	add	local17, #1
01ed4     35 00 00 FF 
01ed8     0C E4 85 F1 | 	sub	objptr, ##27148
01edc                 | LR__0097
01edc                 | LR__0098
01edc     37 00 00 FF 
01ee0     1C E4 05 F1 | 	add	objptr, ##28188
01ee4     F2 12 02 FB | 	rdlong	arg01, objptr
01ee8     1B 00 00 FF 
01eec     E0 E4 05 F1 | 	add	objptr, ##14048
01ef0     F2 14 02 FB | 	rdlong	arg02, objptr
01ef4     01 14 06 F1 | 	add	arg02, #1
01ef8     04 E4 05 F1 | 	add	objptr, #4
01efc     F2 16 02 FB | 	rdlong	arg03, objptr
01f00     04 E4 85 F1 | 	sub	objptr, #4
01f04     F2 3A 02 FB | 	rdlong	local11, objptr
01f08     52 00 00 FF 
01f0c     FC E4 85 F1 | 	sub	objptr, ##42236
01f10     1D 3D 02 F6 | 	mov	local12, local11
01f14     1E 17 82 F1 | 	sub	arg03, local12
01f18     01 16 86 F1 | 	sub	arg03, #1
01f1c     C4 70 B2 FD | 	call	#__system__Mid_S
01f20     FD 4A 02 F6 | 	mov	local19, result1
01f24                 | '   p$=mid$(line$,p1+1,p2-p1-1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01f24     B4 01 00 FF 
01f28     FA 15 06 F6 | 	mov	arg02, ##@LR__5430
01f2c     25 13 02 F6 | 	mov	arg01, local19
01f30     44 4F B2 FD | 	call	#__system___string_cmp
01f34     00 FA 0D F2 | 	cmp	result1, #0 wz
01f38     24 00 90 AD |  if_e	jmp	#LR__0099
01f3c     23 39 02 F6 | 	mov	local10, local17
01f40     03 38 66 F0 | 	shl	local10, #3
01f44     35 00 00 FF 
01f48     0C E4 05 F1 | 	add	objptr, ##27148
01f4c     F2 38 02 F1 | 	add	local10, objptr
01f50     1C 4B 62 FC | 	wrlong	local19, local10
01f54     01 46 06 F1 | 	add	local17, #1
01f58     35 00 00 FF 
01f5c     0C E4 85 F1 | 	sub	objptr, ##27148
01f60                 | LR__0099
01f60     01 28 06 F1 | 	add	local02, #1
01f64     A8 FE 9F FD | 	jmp	#LR__0096
01f68                 | LR__0100
01f68                 | ' 
01f68                 | ' ' 1d  : first part has to have a line number, if not, add 0 for the immediate line
01f68                 | ' 
01f68                 | ' if (cont=0 orelse cont=3) andalso (not isdec(lparts(0).part$))  then for i=k to 1 step -1: lparts(i)=lparts(i-1) : next i: lparts(0).part$="0" : k+=1
01f68     37 00 00 FF 
01f6c     24 E4 05 F1 | 	add	objptr, ##28196
01f70     F2 2C 0A FB | 	rdlong	local04, objptr wz
01f74     37 00 00 FF 
01f78     24 E4 85 F1 | 	sub	objptr, ##28196
01f7c     37 00 00 5F 
01f80     24 E4 05 51 |  if_ne	add	objptr, ##28196
01f84     F2 38 02 5B |  if_ne	rdlong	local10, objptr
01f88     37 00 00 5F 
01f8c     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01f90     03 38 0E 52 |  if_ne	cmp	local10, #3 wz
01f94     B8 00 90 5D |  if_ne	jmp	#LR__0103
01f98     35 00 00 FF 
01f9c     0C E4 05 F1 | 	add	objptr, ##27148
01fa0     F2 3A 02 FB | 	rdlong	local11, objptr
01fa4     35 00 00 FF 
01fa8     0C E4 85 F1 | 	sub	objptr, ##27148
01fac     1D 13 02 F6 | 	mov	arg01, local11
01fb0     88 4F B0 FD | 	call	#_isdec
01fb4     FD 3C 02 F6 | 	mov	local12, result1
01fb8     1E 31 22 F6 | 	not	local06, local12
01fbc     00 30 0E F2 | 	cmp	local06, #0 wz
01fc0     8C 00 90 AD |  if_e	jmp	#LR__0103
01fc4     23 29 02 F6 | 	mov	local02, local17
01fc8     35 00 00 FF 
01fcc     0C E4 05 F1 | 	add	objptr, ##27148
01fd0     97 32 48 FB | 	callpa	#(@LR__0102-@LR__0101)>>2,fcache_load_ptr_
01fd4                 | LR__0101
01fd4     14 2F 02 F6 | 	mov	local05, local02
01fd8     01 2E 86 F1 | 	sub	local05, #1
01fdc     03 2E 66 F0 | 	shl	local05, #3
01fe0     F2 2E 02 F1 | 	add	local05, objptr
01fe4     17 2D 02 FB | 	rdlong	local04, local05
01fe8     14 31 02 F6 | 	mov	local06, local02
01fec     01 30 86 F1 | 	sub	local06, #1
01ff0     03 30 66 F0 | 	shl	local06, #3
01ff4     F2 30 02 F1 | 	add	local06, objptr
01ff8     04 30 06 F1 | 	add	local06, #4
01ffc     18 2B 02 FB | 	rdlong	local03, local06
02000     14 31 02 F6 | 	mov	local06, local02
02004     03 30 66 F0 | 	shl	local06, #3
02008     F2 3C 02 F6 | 	mov	local12, objptr
0200c     F2 30 02 F1 | 	add	local06, objptr
02010     18 2D 62 FC | 	wrlong	local04, local06
02014     14 3B 02 F6 | 	mov	local11, local02
02018     1D 3F 02 F6 | 	mov	local13, local11
0201c     03 3E 66 F0 | 	shl	local13, #3
02020     F2 3E 02 F1 | 	add	local13, objptr
02024     04 3E 06 F1 | 	add	local13, #4
02028     1F 2B 62 FC | 	wrlong	local03, local13
0202c     01 28 86 F1 | 	sub	local02, #1
02030     01 28 56 F2 | 	cmps	local02, #1 wc
02034     9C FF 9F 3D |  if_ae	jmp	#LR__0101
02038                 | LR__0102
02038     B4 01 00 FF 
0203c     FB 2D 06 F6 | 	mov	local04, ##@LR__5431
02040     F2 2C 62 FC | 	wrlong	local04, objptr
02044     35 00 00 FF 
02048     0C E4 85 F1 | 	sub	objptr, ##27148
0204c     01 46 06 F1 | 	add	local17, #1
02050                 | LR__0103
02050     00 28 06 F6 | 	mov	local02, #0
02054                 | ' 
02054                 | ' ' 1e : find strings
02054                 | ' 
02054                 | ' i=0
02054                 | ' do
02054                 | LR__0104
02054                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
02054     14 2F 02 F6 | 	mov	local05, local02
02058     03 2E 66 F0 | 	shl	local05, #3
0205c     35 00 00 FF 
02060     0C E4 05 F1 | 	add	objptr, ##27148
02064     F2 2E 02 F1 | 	add	local05, objptr
02068     17 13 02 FB | 	rdlong	arg01, local05
0206c     B4 01 00 FF 
02070     FD 15 06 F6 | 	mov	arg02, ##@LR__5432
02074     35 00 00 FF 
02078     0C E4 85 F1 | 	sub	objptr, ##27148
0207c     F8 4D B2 FD | 	call	#__system___string_cmp
02080     00 FA 0D F2 | 	cmp	result1, #0 wz
02084     01 28 06 51 |  if_ne	add	local02, #1
02088     20 01 90 5D |  if_ne	jmp	#LR__0109
0208c     14 4D 02 F6 | 	mov	local20, local02
02090                 | LR__0105
02090     14 39 02 F6 | 	mov	local10, local02
02094     01 38 06 F1 | 	add	local10, #1
02098     03 38 66 F0 | 	shl	local10, #3
0209c     35 00 00 FF 
020a0     0C E4 05 F1 | 	add	objptr, ##27148
020a4     F2 38 02 F1 | 	add	local10, objptr
020a8     1C 4B 02 FB | 	rdlong	local19, local10
020ac     26 39 02 F6 | 	mov	local10, local20
020b0     03 38 66 F0 | 	shl	local10, #3
020b4     F2 38 02 F1 | 	add	local10, objptr
020b8     26 3B 02 F6 | 	mov	local11, local20
020bc     1D 41 02 F6 | 	mov	local14, local11
020c0     03 40 66 F0 | 	shl	local14, #3
020c4     F2 40 02 F1 | 	add	local14, objptr
020c8     20 13 02 FB | 	rdlong	arg01, local14
020cc     25 3D 02 F6 | 	mov	local12, local19
020d0     1E 15 02 F6 | 	mov	arg02, local12
020d4     35 00 00 FF 
020d8     0C E4 85 F1 | 	sub	objptr, ##27148
020dc     CC 4D B2 FD | 	call	#__system___string_concat
020e0     1C FB 61 FC | 	wrlong	result1, local10
020e4     14 43 02 F6 | 	mov	local15, local02
020e8     01 42 06 F1 | 	add	local15, #1
020ec     23 4F 02 F6 | 	mov	local21, local17
020f0     01 4E 06 F1 | 	add	local21, #1
020f4     97 3C 48 FB | 	callpa	#(@LR__0107-@LR__0106)>>2,fcache_load_ptr_
020f8                 | LR__0106
020f8     27 43 52 F2 | 	cmps	local15, local21 wc
020fc     70 00 90 3D |  if_ae	jmp	#LR__0108
02100     21 2F 02 F6 | 	mov	local05, local15
02104     01 2E 06 F1 | 	add	local05, #1
02108     03 2E 66 F0 | 	shl	local05, #3
0210c     35 00 00 FF 
02110     0C E4 05 F1 | 	add	objptr, ##27148
02114     F2 2E 02 F1 | 	add	local05, objptr
02118     17 2D 02 FB | 	rdlong	local04, local05
0211c     21 31 02 F6 | 	mov	local06, local15
02120     01 30 06 F1 | 	add	local06, #1
02124     03 30 66 F0 | 	shl	local06, #3
02128     F2 30 02 F1 | 	add	local06, objptr
0212c     04 30 06 F1 | 	add	local06, #4
02130     18 2B 02 FB | 	rdlong	local03, local06
02134     21 31 02 F6 | 	mov	local06, local15
02138     03 30 66 F0 | 	shl	local06, #3
0213c     F2 3C 02 F6 | 	mov	local12, objptr
02140     F2 30 02 F1 | 	add	local06, objptr
02144     18 2D 62 FC | 	wrlong	local04, local06
02148     21 3B 02 F6 | 	mov	local11, local15
0214c     1D 3F 02 F6 | 	mov	local13, local11
02150     03 3E 66 F0 | 	shl	local13, #3
02154     F2 3E 02 F1 | 	add	local13, objptr
02158     04 3E 06 F1 | 	add	local13, #4
0215c     1F 2B 62 FC | 	wrlong	local03, local13
02160     01 42 06 F1 | 	add	local15, #1
02164     35 00 00 FF 
02168     0C E4 85 F1 | 	sub	objptr, ##27148
0216c     88 FF 9F FD | 	jmp	#LR__0106
02170                 | LR__0107
02170                 | LR__0108
02170     01 46 86 F1 | 	sub	local17, #1
02174     B4 01 00 FF 
02178     FF 15 06 F6 | 	mov	arg02, ##@LR__5433
0217c     25 13 02 F6 | 	mov	arg01, local19
02180     F4 4C B2 FD | 	call	#__system___string_cmp
02184     00 FA 0D F2 | 	cmp	result1, #0 wz
02188     23 29 52 52 |  if_ne	cmps	local02, local17 wc
0218c     00 FF 9F 4D |  if_c_and_nz	jmp	#LR__0105
02190                 | '   if p$<>"""" then k+=1:i+=1
02190     B5 01 00 FF 
02194     01 14 06 F6 | 	mov	arg02, ##@LR__5434
02198     25 13 02 F6 | 	mov	arg01, local19
0219c     D8 4C B2 FD | 	call	#__system___string_cmp
021a0     00 FA 0D F2 | 	cmp	result1, #0 wz
021a4     01 46 06 51 |  if_ne	add	local17, #1
021a8     01 28 06 51 |  if_ne	add	local02, #1
021ac                 | LR__0109
021ac     23 29 52 F2 | 	cmps	local02, local17 wc
021b0     A0 FE 9F CD |  if_b	jmp	#LR__0104
021b4     00 28 06 F6 | 	mov	local02, #0
021b8                 | ' 
021b8                 | ' ' 1f : concatenate strings if "" detected between
021b8                 | '  
021b8                 | ' i=0
021b8                 | ' do
021b8                 | LR__0110
021b8                 | '   if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
021b8     14 2F 02 F6 | 	mov	local05, local02
021bc     03 2E 66 F0 | 	shl	local05, #3
021c0     35 00 00 FF 
021c4     0C E4 05 F1 | 	add	objptr, ##27148
021c8     F2 30 02 F6 | 	mov	local06, objptr
021cc     F2 2E 02 F1 | 	add	local05, objptr
021d0     17 13 02 FB | 	rdlong	arg01, local05
021d4     01 14 06 F6 | 	mov	arg02, #1
021d8     35 00 00 FF 
021dc     0C E4 85 F1 | 	sub	objptr, ##27148
021e0     70 6D B2 FD | 	call	#__system__Right_S
021e4     FD 12 02 F6 | 	mov	arg01, result1
021e8     B5 01 00 FF 
021ec     03 14 06 F6 | 	mov	arg02, ##@LR__5435
021f0     84 4C B2 FD | 	call	#__system___string_cmp
021f4     00 FA 0D F2 | 	cmp	result1, #0 wz
021f8     7C 01 90 5D |  if_ne	jmp	#LR__0116
021fc     14 31 02 F6 | 	mov	local06, local02
02200     01 30 06 F1 | 	add	local06, #1
02204     03 30 66 F0 | 	shl	local06, #3
02208     35 00 00 FF 
0220c     0C E4 05 F1 | 	add	objptr, ##27148
02210     F2 3C 02 F6 | 	mov	local12, objptr
02214     F2 30 02 F1 | 	add	local06, objptr
02218     18 13 02 FB | 	rdlong	arg01, local06
0221c     01 14 06 F6 | 	mov	arg02, #1
02220     35 00 00 FF 
02224     0C E4 85 F1 | 	sub	objptr, ##27148
02228     A0 6C B2 FD | 	call	#__system__Left_S
0222c     FD 12 02 F6 | 	mov	arg01, result1
02230     B5 01 00 FF 
02234     05 14 06 F6 | 	mov	arg02, ##@LR__5436
02238     3C 4C B2 FD | 	call	#__system___string_cmp
0223c     00 FA 0D F2 | 	cmp	result1, #0 wz
02240     34 01 90 5D |  if_ne	jmp	#LR__0116
02244     14 39 02 F6 | 	mov	local10, local02
02248     03 38 66 F0 | 	shl	local10, #3
0224c     35 00 00 FF 
02250     0C E4 05 F1 | 	add	objptr, ##27148
02254     F2 38 02 F1 | 	add	local10, objptr
02258     14 41 02 F6 | 	mov	local14, local02
0225c     03 40 66 F0 | 	shl	local14, #3
02260     F2 40 02 F1 | 	add	local14, objptr
02264     20 31 02 FB | 	rdlong	local06, local14
02268     14 3F 02 F6 | 	mov	local13, local02
0226c     01 3E 06 F1 | 	add	local13, #1
02270     03 3E 66 F0 | 	shl	local13, #3
02274     F2 3E 02 F1 | 	add	local13, objptr
02278     1F 3D 02 FB | 	rdlong	local12, local13
0227c     14 51 02 F6 | 	mov	local22, local02
02280     01 50 06 F1 | 	add	local22, #1
02284     28 53 02 F6 | 	mov	local23, local22
02288     03 52 66 F0 | 	shl	local23, #3
0228c     F2 54 02 F6 | 	mov	local24, objptr
02290     F2 52 02 F1 | 	add	local23, objptr
02294     29 13 02 FB | 	rdlong	arg01, local23
02298     35 00 00 FF 
0229c     0C E4 85 F1 | 	sub	objptr, ##27148
022a0     09 33 02 F6 | 	mov	local07, arg01
022a4     97 06 48 FB | 	callpa	#(@LR__0112-@LR__0111)>>2,fcache_load_ptr_
022a8                 | LR__0111
022a8     19 FB C9 FA | 	rdbyte	result1, local07 wz
022ac     01 32 06 51 |  if_ne	add	local07, #1
022b0     F4 FF 9F 5D |  if_ne	jmp	#LR__0111
022b4                 | LR__0112
022b4     09 33 82 F1 | 	sub	local07, arg01
022b8     19 3B 02 F6 | 	mov	local11, local07
022bc     01 3A 86 F1 | 	sub	local11, #1
022c0     1E 13 02 F6 | 	mov	arg01, local12
022c4     1D 15 02 F6 | 	mov	arg02, local11
022c8     88 6C B2 FD | 	call	#__system__Right_S
022cc     FD 3C 02 F6 | 	mov	local12, result1
022d0     18 13 02 F6 | 	mov	arg01, local06
022d4     1E 15 02 F6 | 	mov	arg02, local12
022d8     D0 4B B2 FD | 	call	#__system___string_concat
022dc     FD 30 02 F6 | 	mov	local06, result1
022e0     1C 31 62 FC | 	wrlong	local06, local10
022e4                 | '     for j=i+1 to k: lparts(j)=lparts(j+1): next j  
022e4     14 43 02 F6 | 	mov	local15, local02
022e8     01 42 06 F1 | 	add	local15, #1
022ec     23 57 02 F6 | 	mov	local25, local17
022f0     01 56 06 F1 | 	add	local25, #1
022f4     97 3C 48 FB | 	callpa	#(@LR__0114-@LR__0113)>>2,fcache_load_ptr_
022f8                 | LR__0113
022f8     2B 43 52 F2 | 	cmps	local15, local25 wc
022fc     70 00 90 3D |  if_ae	jmp	#LR__0115
02300     21 2F 02 F6 | 	mov	local05, local15
02304     01 2E 06 F1 | 	add	local05, #1
02308     03 2E 66 F0 | 	shl	local05, #3
0230c     35 00 00 FF 
02310     0C E4 05 F1 | 	add	objptr, ##27148
02314     F2 2E 02 F1 | 	add	local05, objptr
02318     17 2D 02 FB | 	rdlong	local04, local05
0231c     21 31 02 F6 | 	mov	local06, local15
02320     01 30 06 F1 | 	add	local06, #1
02324     03 30 66 F0 | 	shl	local06, #3
02328     F2 30 02 F1 | 	add	local06, objptr
0232c     04 30 06 F1 | 	add	local06, #4
02330     18 2B 02 FB | 	rdlong	local03, local06
02334     21 31 02 F6 | 	mov	local06, local15
02338     03 30 66 F0 | 	shl	local06, #3
0233c     F2 3C 02 F6 | 	mov	local12, objptr
02340     F2 30 02 F1 | 	add	local06, objptr
02344     18 2D 62 FC | 	wrlong	local04, local06
02348     21 3B 02 F6 | 	mov	local11, local15
0234c     1D 3F 02 F6 | 	mov	local13, local11
02350     03 3E 66 F0 | 	shl	local13, #3
02354     F2 3E 02 F1 | 	add	local13, objptr
02358     04 3E 06 F1 | 	add	local13, #4
0235c     1F 2B 62 FC | 	wrlong	local03, local13
02360     01 42 06 F1 | 	add	local15, #1
02364     35 00 00 FF 
02368     0C E4 85 F1 | 	sub	objptr, ##27148
0236c     88 FF 9F FD | 	jmp	#LR__0113
02370                 | LR__0114
02370                 | LR__0115
02370     01 28 86 F1 | 	sub	local02, #1
02374     01 46 86 F1 | 	sub	local17, #1
02378                 | LR__0116
02378     01 28 06 F1 | 	add	local02, #1
0237c     23 29 52 F2 | 	cmps	local02, local17 wc
02380     34 FE 9F CD |  if_b	jmp	#LR__0110
02384     00 28 06 F6 | 	mov	local02, #0
02388                 | '  
02388                 | ' ' 1g: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
02388                 | '  
02388                 | ' i=0 
02388                 | ' do
02388                 | LR__0117
02388     14 39 02 F6 | 	mov	local10, local02
0238c     03 38 66 F0 | 	shl	local10, #3
02390     35 00 00 FF 
02394     0C E4 05 F1 | 	add	objptr, ##27148
02398     F2 38 02 F1 | 	add	local10, objptr
0239c     1C 59 02 FB | 	rdlong	local26, local10
023a0     14 39 02 F6 | 	mov	local10, local02
023a4     01 38 06 F1 | 	add	local10, #1
023a8     03 38 66 F0 | 	shl	local10, #3
023ac     F2 38 02 F1 | 	add	local10, objptr
023b0     1C 5B 02 FB | 	rdlong	local27, local10
023b4                 | '   s1$=lparts(i).part$ : s2$=lparts(i+1).part$
023b4                 | '   if ((s1$=">" orelse s1$="<" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
023b4     B5 01 00 FF 
023b8     07 14 06 F6 | 	mov	arg02, ##@LR__5437
023bc     2C 13 02 F6 | 	mov	arg01, local26
023c0     35 00 00 FF 
023c4     0C E4 85 F1 | 	sub	objptr, ##27148
023c8     AC 4A B2 FD | 	call	#__system___string_cmp
023cc     00 FA 0D F2 | 	cmp	result1, #0 wz
023d0     A8 00 90 AD |  if_e	jmp	#LR__0118
023d4     B5 01 00 FF 
023d8     09 14 06 F6 | 	mov	arg02, ##@LR__5438
023dc     2C 13 02 F6 | 	mov	arg01, local26
023e0     94 4A B2 FD | 	call	#__system___string_cmp
023e4     FD 2A 0A F6 | 	mov	local03, result1 wz
023e8     90 00 90 AD |  if_e	jmp	#LR__0118
023ec     B5 01 00 FF 
023f0     0B 30 06 F6 | 	mov	local06, ##@LR__5439
023f4     2C 13 02 F6 | 	mov	arg01, local26
023f8     18 15 02 F6 | 	mov	arg02, local06
023fc     78 4A B2 FD | 	call	#__system___string_cmp
02400     00 FA 0D F2 | 	cmp	result1, #0 wz
02404     74 00 90 AD |  if_e	jmp	#LR__0118
02408     B5 01 00 FF 
0240c     0D 3C 06 F6 | 	mov	local12, ##@LR__5440
02410     2C 13 02 F6 | 	mov	arg01, local26
02414     1E 15 02 F6 | 	mov	arg02, local12
02418     5C 4A B2 FD | 	call	#__system___string_cmp
0241c     00 FA 0D F2 | 	cmp	result1, #0 wz
02420     58 00 90 AD |  if_e	jmp	#LR__0118
02424     B5 01 00 FF 
02428     0F 3A 06 F6 | 	mov	local11, ##@LR__5441
0242c     1D 3D 02 F6 | 	mov	local12, local11
02430     2C 13 02 F6 | 	mov	arg01, local26
02434     1E 15 02 F6 | 	mov	arg02, local12
02438     3C 4A B2 FD | 	call	#__system___string_cmp
0243c     FD 30 0A F6 | 	mov	local06, result1 wz
02440     38 00 90 AD |  if_e	jmp	#LR__0118
02444     B5 01 00 FF 
02448     11 3A 06 F6 | 	mov	local11, ##@LR__5442
0244c     2C 13 02 F6 | 	mov	arg01, local26
02450     1D 15 02 F6 | 	mov	arg02, local11
02454     20 4A B2 FD | 	call	#__system___string_cmp
02458     FD 3C 0A F6 | 	mov	local12, result1 wz
0245c     1C 00 90 AD |  if_e	jmp	#LR__0118
02460     B5 01 00 FF 
02464     13 40 06 F6 | 	mov	local14, ##@LR__5443
02468     2C 13 02 F6 | 	mov	arg01, local26
0246c     20 15 02 F6 | 	mov	arg02, local14
02470     04 4A B2 FD | 	call	#__system___string_cmp
02474     FD 3A 0A F6 | 	mov	local11, result1 wz
02478     20 00 90 5D |  if_ne	jmp	#LR__0119
0247c                 | LR__0118
0247c     B5 01 00 FF 
02480     15 5C 06 F6 | 	mov	local28, ##@LR__5444
02484     2E 3F 02 F6 | 	mov	local13, local28
02488     2D 13 02 F6 | 	mov	arg01, local27
0248c     1F 15 02 F6 | 	mov	arg02, local13
02490     E4 49 B2 FD | 	call	#__system___string_cmp
02494     FD 40 0A F6 | 	mov	local14, result1 wz
02498     B8 00 90 AD |  if_e	jmp	#LR__0122
0249c                 | LR__0119
0249c     B5 01 00 FF 
024a0     17 5C 06 F6 | 	mov	local28, ##@LR__5445
024a4     2C 13 02 F6 | 	mov	arg01, local26
024a8     2E 15 02 F6 | 	mov	arg02, local28
024ac     C8 49 B2 FD | 	call	#__system___string_cmp
024b0     FD 3E 0A F6 | 	mov	local13, result1 wz
024b4     20 00 90 5D |  if_ne	jmp	#LR__0120
024b8     B5 01 00 FF 
024bc     19 52 06 F6 | 	mov	local23, ##@LR__5446
024c0     29 51 02 F6 | 	mov	local22, local23
024c4     2D 13 02 F6 | 	mov	arg01, local27
024c8     28 15 02 F6 | 	mov	arg02, local22
024cc     A8 49 B2 FD | 	call	#__system___string_cmp
024d0     FD 5C 0A F6 | 	mov	local28, result1 wz
024d4     7C 00 90 AD |  if_e	jmp	#LR__0122
024d8                 | LR__0120
024d8     B5 01 00 FF 
024dc     1B 52 06 F6 | 	mov	local23, ##@LR__5447
024e0     2C 13 02 F6 | 	mov	arg01, local26
024e4     29 15 02 F6 | 	mov	arg02, local23
024e8     8C 49 B2 FD | 	call	#__system___string_cmp
024ec     FD 50 0A F6 | 	mov	local22, result1 wz
024f0     20 00 90 5D |  if_ne	jmp	#LR__0121
024f4     B5 01 00 FF 
024f8     1D 5E 06 F6 | 	mov	local29, ##@LR__5448
024fc     2F 55 02 F6 | 	mov	local24, local29
02500     2D 13 02 F6 | 	mov	arg01, local27
02504     2A 15 02 F6 | 	mov	arg02, local24
02508     6C 49 B2 FD | 	call	#__system___string_cmp
0250c     FD 52 0A F6 | 	mov	local23, result1 wz
02510     40 00 90 AD |  if_e	jmp	#LR__0122
02514                 | LR__0121
02514     B5 01 00 FF 
02518     1F 60 06 F6 | 	mov	local30, ##@LR__5449
0251c     30 5F 02 F6 | 	mov	local29, local30
02520     2C 13 02 F6 | 	mov	arg01, local26
02524     2F 15 02 F6 | 	mov	arg02, local29
02528     4C 49 B2 FD | 	call	#__system___string_cmp
0252c     FD 54 0A F6 | 	mov	local24, result1 wz
02530     F0 00 90 5D |  if_ne	jmp	#LR__0126
02534     B5 01 00 FF 
02538     21 62 06 F6 | 	mov	local31, ##@LR__5450
0253c     31 61 02 F6 | 	mov	local30, local31
02540     2D 13 02 F6 | 	mov	arg01, local27
02544     30 15 02 F6 | 	mov	arg02, local30
02548     2C 49 B2 FD | 	call	#__system___string_cmp
0254c     FD 5E 0A F6 | 	mov	local29, result1 wz
02550     D0 00 90 5D |  if_ne	jmp	#LR__0126
02554                 | LR__0122
02554     14 39 02 F6 | 	mov	local10, local02
02558     03 38 66 F0 | 	shl	local10, #3
0255c     35 00 00 FF 
02560     0C E4 05 F1 | 	add	objptr, ##27148
02564     F2 38 02 F1 | 	add	local10, objptr
02568     2D 3D 02 F6 | 	mov	local12, local27
0256c     2C 13 02 F6 | 	mov	arg01, local26
02570     1E 15 02 F6 | 	mov	arg02, local12
02574     35 00 00 FF 
02578     0C E4 85 F1 | 	sub	objptr, ##27148
0257c     2C 49 B2 FD | 	call	#__system___string_concat
02580     1C FB 61 FC | 	wrlong	result1, local10
02584                 | '     lparts(i).part$=s1$+s2$
02584                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
02584     14 43 02 F6 | 	mov	local15, local02
02588     01 42 06 F1 | 	add	local15, #1
0258c     23 65 02 F6 | 	mov	local32, local17
02590     01 64 06 F1 | 	add	local32, #1
02594     97 42 48 FB | 	callpa	#(@LR__0124-@LR__0123)>>2,fcache_load_ptr_
02598                 | LR__0123
02598     32 43 52 F2 | 	cmps	local15, local32 wc
0259c     7C 00 90 3D |  if_ae	jmp	#LR__0125
025a0     21 2F 02 F6 | 	mov	local05, local15
025a4     01 2E 06 F1 | 	add	local05, #1
025a8     03 2E 66 F0 | 	shl	local05, #3
025ac     35 00 00 FF 
025b0     0C E4 05 F1 | 	add	objptr, ##27148
025b4     F2 2E 02 F1 | 	add	local05, objptr
025b8     17 2D 02 FB | 	rdlong	local04, local05
025bc     21 31 02 F6 | 	mov	local06, local15
025c0     01 30 06 F1 | 	add	local06, #1
025c4     03 30 66 F0 | 	shl	local06, #3
025c8     F2 30 02 F1 | 	add	local06, objptr
025cc     04 30 06 F1 | 	add	local06, #4
025d0     18 2B 02 FB | 	rdlong	local03, local06
025d4     21 31 02 F6 | 	mov	local06, local15
025d8     03 30 66 F0 | 	shl	local06, #3
025dc     F2 3C 02 F6 | 	mov	local12, objptr
025e0     F2 30 02 F1 | 	add	local06, objptr
025e4     18 2D 62 FC | 	wrlong	local04, local06
025e8     21 3B 02 F6 | 	mov	local11, local15
025ec     1D 41 02 F6 | 	mov	local14, local11
025f0     20 3F 02 F6 | 	mov	local13, local14
025f4     03 3E 66 F0 | 	shl	local13, #3
025f8     F2 5C 02 F6 | 	mov	local28, objptr
025fc     F2 3E 02 F1 | 	add	local13, objptr
02600     04 3E 06 F1 | 	add	local13, #4
02604     1F 2B 62 FC | 	wrlong	local03, local13
02608     04 3E 86 F1 | 	sub	local13, #4
0260c     01 42 06 F1 | 	add	local15, #1
02610     35 00 00 FF 
02614     0C E4 85 F1 | 	sub	objptr, ##27148
02618     7C FF 9F FD | 	jmp	#LR__0123
0261c                 | LR__0124
0261c                 | LR__0125
0261c     01 28 86 F1 | 	sub	local02, #1
02620     01 46 86 F1 | 	sub	local17, #1
02624                 | LR__0126
02624     01 28 06 F1 | 	add	local02, #1
02628     23 29 52 F2 | 	cmps	local02, local17 wc
0262c     58 FD 9F CD |  if_b	jmp	#LR__0117
02630                 | '  
02630                 | ' ' 1h : now remove parts that are spaces
02630                 | ' 
02630                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
02630     00 28 06 F6 | 	mov	local02, #0
02634     23 67 02 F6 | 	mov	local33, local17
02638     01 66 06 F1 | 	add	local33, #1
0263c                 | LR__0127
0263c     33 29 52 F2 | 	cmps	local02, local33 wc
02640     50 00 90 3D |  if_ae	jmp	#LR__0128
02644     14 39 02 F6 | 	mov	local10, local02
02648     03 38 66 F0 | 	shl	local10, #3
0264c     35 00 00 FF 
02650     0C E4 05 F1 | 	add	objptr, ##27148
02654     F2 38 02 F1 | 	add	local10, objptr
02658     14 3D 02 F6 | 	mov	local12, local02
0265c     1E 3B 02 F6 | 	mov	local11, local12
02660     1D 41 02 F6 | 	mov	local14, local11
02664     03 40 66 F0 | 	shl	local14, #3
02668     F2 3E 02 F6 | 	mov	local13, objptr
0266c     F2 40 02 F1 | 	add	local14, objptr
02670     20 13 02 FB | 	rdlong	arg01, local14
02674     35 00 00 FF 
02678     0C E4 85 F1 | 	sub	objptr, ##27148
0267c     DC 6C B2 FD | 	call	#__system__RTrim_S
02680     FD 12 02 F6 | 	mov	arg01, result1
02684     14 6C B2 FD | 	call	#__system__LTrim_S
02688     1C FB 61 FC | 	wrlong	result1, local10
0268c     01 28 06 F1 | 	add	local02, #1
02690     A8 FF 9F FD | 	jmp	#LR__0127
02694                 | LR__0128
02694     00 28 06 F6 | 	mov	local02, #0
02698     97 88 48 FB | 	callpa	#(@LR__0135-@LR__0129)>>2,fcache_load_ptr_
0269c                 | ' i=0
0269c                 | ' do 
0269c                 | LR__0129
0269c                 | '   if len(lparts(i).part$)=0 then 
0269c     14 2F 02 F6 | 	mov	local05, local02
026a0     03 2E 66 F0 | 	shl	local05, #3
026a4     35 00 00 FF 
026a8     0C E4 05 F1 | 	add	objptr, ##27148
026ac     F2 2E 02 F1 | 	add	local05, objptr
026b0     17 13 02 FB | 	rdlong	arg01, local05
026b4     35 00 00 FF 
026b8     0C E4 85 F1 | 	sub	objptr, ##27148
026bc     09 33 02 F6 | 	mov	local07, arg01
026c0                 | LR__0130
026c0     19 FB C9 FA | 	rdbyte	result1, local07 wz
026c4     01 32 06 51 |  if_ne	add	local07, #1
026c8     F4 FF 9F 5D |  if_ne	jmp	#LR__0130
026cc     09 33 8A F1 | 	sub	local07, arg01 wz
026d0     C4 00 90 5D |  if_ne	jmp	#LR__0134
026d4                 | '     if i=k-1 then k-=1  :  exit
026d4     23 2D 02 F6 | 	mov	local04, local17
026d8     01 2C 86 F1 | 	sub	local04, #1
026dc     16 29 0A F2 | 	cmp	local02, local04 wz
026e0     01 46 86 A1 |  if_e	sub	local17, #1
026e4     C4 00 90 AD |  if_e	jmp	#LR__0136
026e8                 | '     if i<k-1 then 
026e8     23 2D 02 F6 | 	mov	local04, local17
026ec     01 2C 86 F1 | 	sub	local04, #1
026f0     16 29 52 F2 | 	cmps	local02, local04 wc
026f4     A0 00 90 3D |  if_ae	jmp	#LR__0133
026f8                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
026f8     14 43 02 F6 | 	mov	local15, local02
026fc     23 69 02 F6 | 	mov	local34, local17
02700     01 68 86 F1 | 	sub	local34, #1
02704                 | LR__0131
02704     34 43 52 F2 | 	cmps	local15, local34 wc
02708     80 00 90 3D |  if_ae	jmp	#LR__0132
0270c     21 2F 02 F6 | 	mov	local05, local15
02710     01 2E 06 F1 | 	add	local05, #1
02714     03 2E 66 F0 | 	shl	local05, #3
02718     35 00 00 FF 
0271c     0C E4 05 F1 | 	add	objptr, ##27148
02720     F2 2E 02 F1 | 	add	local05, objptr
02724     17 2D 02 FB | 	rdlong	local04, local05
02728     21 31 02 F6 | 	mov	local06, local15
0272c     01 30 06 F1 | 	add	local06, #1
02730     03 30 66 F0 | 	shl	local06, #3
02734     F2 30 02 F1 | 	add	local06, objptr
02738     04 30 06 F1 | 	add	local06, #4
0273c     18 2B 02 FB | 	rdlong	local03, local06
02740     21 39 02 F6 | 	mov	local10, local15
02744     1C 31 02 F6 | 	mov	local06, local10
02748     03 30 66 F0 | 	shl	local06, #3
0274c     F2 3C 02 F6 | 	mov	local12, objptr
02750     F2 30 02 F1 | 	add	local06, objptr
02754     18 2D 62 FC | 	wrlong	local04, local06
02758     21 3B 02 F6 | 	mov	local11, local15
0275c     1D 41 02 F6 | 	mov	local14, local11
02760     20 3F 02 F6 | 	mov	local13, local14
02764     03 3E 66 F0 | 	shl	local13, #3
02768     F2 5C 02 F6 | 	mov	local28, objptr
0276c     F2 3E 02 F1 | 	add	local13, objptr
02770     04 3E 06 F1 | 	add	local13, #4
02774     1F 2B 62 FC | 	wrlong	local03, local13
02778     04 3E 86 F1 | 	sub	local13, #4
0277c     01 42 06 F1 | 	add	local15, #1
02780     35 00 00 FF 
02784     0C E4 85 F1 | 	sub	objptr, ##27148
02788     78 FF 9F FD | 	jmp	#LR__0131
0278c                 | LR__0132
0278c     01 46 86 F1 | 	sub	local17, #1
02790                 | '       if i>0 then i-=1 
02790     01 28 56 F2 | 	cmps	local02, #1 wc
02794     01 28 86 31 |  if_ae	sub	local02, #1
02798                 | LR__0133
02798                 | LR__0134
02798     01 28 06 F1 | 	add	local02, #1
0279c     23 2D 02 F6 | 	mov	local04, local17
027a0     01 2C 86 F1 | 	sub	local04, #1
027a4     16 29 5A F2 | 	cmps	local02, local04 wcz
027a8     F0 FE 9F ED |  if_be	jmp	#LR__0129
027ac                 | LR__0135
027ac                 | LR__0136
027ac                 | ' 
027ac                 | ' ' 1i: lowercase all that is not a string
027ac                 | ' 
027ac                 | ' for j=0 to k-1
027ac     00 42 06 F6 | 	mov	local15, #0
027b0     23 6B 02 F6 | 	mov	local35, local17
027b4                 | LR__0137
027b4     35 43 52 F2 | 	cmps	local15, local35 wc
027b8     CC 00 90 3D |  if_ae	jmp	#LR__0140
027bc                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
027bc     21 2F 02 F6 | 	mov	local05, local15
027c0     03 2E 66 F0 | 	shl	local05, #3
027c4     35 00 00 FF 
027c8     0C E4 05 F1 | 	add	objptr, ##27148
027cc     F2 2E 02 F1 | 	add	local05, objptr
027d0     17 13 02 FB | 	rdlong	arg01, local05
027d4     01 14 06 F6 | 	mov	arg02, #1
027d8     35 00 00 FF 
027dc     0C E4 85 F1 | 	sub	objptr, ##27148
027e0     E8 66 B2 FD | 	call	#__system__Left_S
027e4     FD 12 02 F6 | 	mov	arg01, result1
027e8     B5 01 00 FF 
027ec     23 14 06 F6 | 	mov	arg02, ##@LR__5451
027f0     84 46 B2 FD | 	call	#__system___string_cmp
027f4     00 FA 0D F2 | 	cmp	result1, #0 wz
027f8     44 00 90 5D |  if_ne	jmp	#LR__0138
027fc     21 31 02 F6 | 	mov	local06, local15
02800     03 30 66 F0 | 	shl	local06, #3
02804     35 00 00 FF 
02808     0C E4 05 F1 | 	add	objptr, ##27148
0280c     F2 3C 02 F6 | 	mov	local12, objptr
02810     F2 30 02 F1 | 	add	local06, objptr
02814     18 13 02 FB | 	rdlong	arg01, local06
02818     01 14 06 F6 | 	mov	arg02, #1
0281c     35 00 00 FF 
02820     0C E4 85 F1 | 	sub	objptr, ##27148
02824     2C 67 B2 FD | 	call	#__system__Right_S
02828     FD 12 02 F6 | 	mov	arg01, result1
0282c     B5 01 00 FF 
02830     25 14 06 F6 | 	mov	arg02, ##@LR__5452
02834     40 46 B2 FD | 	call	#__system___string_cmp
02838     00 FA 0D F2 | 	cmp	result1, #0 wz
0283c     40 00 90 AD |  if_e	jmp	#LR__0139
02840                 | LR__0138
02840     21 39 02 F6 | 	mov	local10, local15
02844     03 38 66 F0 | 	shl	local10, #3
02848     35 00 00 FF 
0284c     0C E4 05 F1 | 	add	objptr, ##27148
02850     F2 38 02 F1 | 	add	local10, objptr
02854     21 3D 02 F6 | 	mov	local12, local15
02858     1E 3B 02 F6 | 	mov	local11, local12
0285c     1D 41 02 F6 | 	mov	local14, local11
02860     03 40 66 F0 | 	shl	local14, #3
02864     F2 3E 02 F6 | 	mov	local13, objptr
02868     F2 40 02 F1 | 	add	local14, objptr
0286c     20 13 02 FB | 	rdlong	arg01, local14
02870     35 00 00 FF 
02874     0C E4 85 F1 | 	sub	objptr, ##27148
02878     60 69 B2 FD | 	call	#__system__LCase_S
0287c     1C FB 61 FC | 	wrlong	result1, local10
02880                 | LR__0139
02880     01 42 06 F1 | 	add	local15, #1
02884     2C FF 9F FD | 	jmp	#LR__0137
02888                 | LR__0140
02888                 | ' 
02888                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
02888                 | ' 
02888                 | ' for i=0 to k: lparts(i).token=-1: next i					' initialize all tokens to -1=invalid
02888     00 28 06 F6 | 	mov	local02, #0
0288c     23 6D 02 F6 | 	mov	local36, local17
02890     01 6C 06 F1 | 	add	local36, #1
02894     97 1C 48 FB | 	callpa	#(@LR__0142-@LR__0141)>>2,fcache_load_ptr_
02898                 | LR__0141
02898     36 29 52 F2 | 	cmps	local02, local36 wc
0289c     30 00 90 3D |  if_ae	jmp	#LR__0143
028a0     14 39 02 F6 | 	mov	local10, local02
028a4     03 38 66 F0 | 	shl	local10, #3
028a8     35 00 00 FF 
028ac     0C E4 05 F1 | 	add	objptr, ##27148
028b0     F2 38 02 F1 | 	add	local10, objptr
028b4     04 38 06 F1 | 	add	local10, #4
028b8     FF FF FF FF 
028bc     1C FF 6B FC | 	wrlong	##-1, local10
028c0     01 28 06 F1 | 	add	local02, #1
028c4     35 00 00 FF 
028c8     0C E4 85 F1 | 	sub	objptr, ##27148
028cc     C8 FF 9F FD | 	jmp	#LR__0141
028d0                 | LR__0142
028d0                 | LR__0143
028d0                 | ' 
028d0                 | ' if isdec(lparts(0).part$) then addptr=1 else addptr=0				' check if the abbreviated command are on the line start, or after linenum, 'then' or 'else'
028d0     35 00 00 FF 
028d4     0C E4 05 F1 | 	add	objptr, ##27148
028d8     F2 12 02 FB | 	rdlong	arg01, objptr
028dc     35 00 00 FF 
028e0     0C E4 85 F1 | 	sub	objptr, ##27148
028e4     54 46 B0 FD | 	call	#_isdec
028e8     00 FA 0D F2 | 	cmp	result1, #0 wz
028ec     01 6E 06 56 |  if_ne	mov	local37, #1
028f0     00 6E 06 A6 |  if_e	mov	local37, #0
028f4                 | ' if lparts(0).part$="else" then addptr=1 					' else is always the first
028f4     35 00 00 FF 
028f8     0C E4 05 F1 | 	add	objptr, ##27148
028fc     F2 12 02 FB | 	rdlong	arg01, objptr
02900     35 00 00 FF 
02904     0C E4 85 F1 | 	sub	objptr, ##27148
02908     B5 01 00 FF 
0290c     27 14 06 F6 | 	mov	arg02, ##@LR__5453
02910     64 45 B2 FD | 	call	#__system___string_cmp
02914     00 FA 0D F2 | 	cmp	result1, #0 wz
02918     01 6E 06 A6 |  if_e	mov	local37, #1
0291c     00 28 06 F6 | 	mov	local02, #0
02920                 | ' i=0 : do 
02920                 | LR__0144
02920                 | '   if lparts(i).part$="then" then exit loop 					' try to find 'then'
02920     14 2F 02 F6 | 	mov	local05, local02
02924     03 2E 66 F0 | 	shl	local05, #3
02928     35 00 00 FF 
0292c     0C E4 05 F1 | 	add	objptr, ##27148
02930     F2 2E 02 F1 | 	add	local05, objptr
02934     17 13 02 FB | 	rdlong	arg01, local05
02938     B5 01 00 FF 
0293c     2C 14 06 F6 | 	mov	arg02, ##@LR__5454
02940     35 00 00 FF 
02944     0C E4 85 F1 | 	sub	objptr, ##27148
02948     2C 45 B2 FD | 	call	#__system___string_cmp
0294c     00 FA 0D F2 | 	cmp	result1, #0 wz
02950     0C 00 90 AD |  if_e	jmp	#LR__0145
02954     01 28 06 F1 | 	add	local02, #1
02958     23 29 5A F2 | 	cmps	local02, local17 wcz
0295c     C0 FF 9F ED |  if_be	jmp	#LR__0144
02960                 | LR__0145
02960                 | ' if i<k then addptr=i+1	 							' then found
02960     23 29 52 F2 | 	cmps	local02, local17 wc
02964     14 6F 02 C6 |  if_b	mov	local37, local02
02968     01 6E 06 C1 |  if_b	add	local37, #1
0296c     35 00 00 FF 
02970     0C E4 05 F1 | 	add	objptr, ##27148
02974                 | ' lp$=lparts(addptr).part$ 
02974                 | ' 
02974                 | ' if left$(lparts(addptr).part$,1)="?" andalso len(lparts(addptr).part$)>1 then ' ? is abbreviation of print, but it has no dots, so it has to be treated here
02974     37 2F 02 F6 | 	mov	local05, local37
02978     03 2E 66 F0 | 	shl	local05, #3
0297c     F2 2E 02 F1 | 	add	local05, objptr
02980     17 13 02 FB | 	rdlong	arg01, local05
02984     01 14 06 F6 | 	mov	arg02, #1
02988     35 00 00 FF 
0298c     0C E4 85 F1 | 	sub	objptr, ##27148
02990     38 65 B2 FD | 	call	#__system__Left_S
02994     FD 12 02 F6 | 	mov	arg01, result1
02998     B5 01 00 FF 
0299c     31 14 06 F6 | 	mov	arg02, ##@LR__5455
029a0     D4 44 B2 FD | 	call	#__system___string_cmp
029a4     00 FA 0D F2 | 	cmp	result1, #0 wz
029a8     60 01 90 5D |  if_ne	jmp	#LR__0152
029ac     37 31 02 F6 | 	mov	local06, local37
029b0     03 30 66 F0 | 	shl	local06, #3
029b4     35 00 00 FF 
029b8     0C E4 05 F1 | 	add	objptr, ##27148
029bc     F2 30 02 F1 | 	add	local06, objptr
029c0     18 13 02 FB | 	rdlong	arg01, local06
029c4     35 00 00 FF 
029c8     0C E4 85 F1 | 	sub	objptr, ##27148
029cc     09 33 02 F6 | 	mov	local07, arg01
029d0     97 06 48 FB | 	callpa	#(@LR__0147-@LR__0146)>>2,fcache_load_ptr_
029d4                 | LR__0146
029d4     19 FB C9 FA | 	rdbyte	result1, local07 wz
029d8     01 32 06 51 |  if_ne	add	local07, #1
029dc     F4 FF 9F 5D |  if_ne	jmp	#LR__0146
029e0                 | LR__0147
029e0     09 33 82 F1 | 	sub	local07, arg01
029e4     02 32 56 F2 | 	cmps	local07, #2 wc
029e8     20 01 90 CD |  if_b	jmp	#LR__0152
029ec     01 46 06 F1 | 	add	local17, #1
029f0                 | '   k+=1
029f0                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
029f0     23 29 02 F6 | 	mov	local02, local17
029f4     37 71 02 F6 | 	mov	local38, local37
029f8     01 70 06 F1 | 	add	local38, #1
029fc     35 00 00 FF 
02a00     0C E4 05 F1 | 	add	objptr, ##27148
02a04     97 2E 48 FB | 	callpa	#(@LR__0149-@LR__0148)>>2,fcache_load_ptr_
02a08                 | LR__0148
02a08     14 2F 02 F6 | 	mov	local05, local02
02a0c     01 2E 86 F1 | 	sub	local05, #1
02a10     03 2E 66 F0 | 	shl	local05, #3
02a14     F2 2E 02 F1 | 	add	local05, objptr
02a18     17 2D 02 FB | 	rdlong	local04, local05
02a1c     14 31 02 F6 | 	mov	local06, local02
02a20     01 30 86 F1 | 	sub	local06, #1
02a24     03 30 66 F0 | 	shl	local06, #3
02a28     F2 30 02 F1 | 	add	local06, objptr
02a2c     04 30 06 F1 | 	add	local06, #4
02a30     18 2B 02 FB | 	rdlong	local03, local06
02a34     14 31 02 F6 | 	mov	local06, local02
02a38     03 30 66 F0 | 	shl	local06, #3
02a3c     F2 30 02 F1 | 	add	local06, objptr
02a40     18 2D 62 FC | 	wrlong	local04, local06
02a44     14 3F 02 F6 | 	mov	local13, local02
02a48     03 3E 66 F0 | 	shl	local13, #3
02a4c     F2 3E 02 F1 | 	add	local13, objptr
02a50     04 3E 06 F1 | 	add	local13, #4
02a54     1F 2B 62 FC | 	wrlong	local03, local13
02a58     01 28 86 F1 | 	sub	local02, #1
02a5c     38 29 52 F2 | 	cmps	local02, local38 wc
02a60     A4 FF 9F 3D |  if_ae	jmp	#LR__0148
02a64                 | LR__0149
02a64     37 39 02 F6 | 	mov	local10, local37
02a68     01 38 06 F1 | 	add	local10, #1
02a6c     03 38 66 F0 | 	shl	local10, #3
02a70     F2 38 02 F1 | 	add	local10, objptr
02a74     37 41 02 F6 | 	mov	local14, local37
02a78     03 40 66 F0 | 	shl	local14, #3
02a7c     F2 40 02 F1 | 	add	local14, objptr
02a80     20 31 02 FB | 	rdlong	local06, local14
02a84     37 3F 02 F6 | 	mov	local13, local37
02a88     1F 5D 02 F6 | 	mov	local28, local13
02a8c     2E 51 02 F6 | 	mov	local22, local28
02a90     03 50 66 F0 | 	shl	local22, #3
02a94     F2 52 02 F6 | 	mov	local23, objptr
02a98     F2 50 02 F1 | 	add	local22, objptr
02a9c     28 13 02 FB | 	rdlong	arg01, local22
02aa0     35 00 00 FF 
02aa4     0C E4 85 F1 | 	sub	objptr, ##27148
02aa8     09 33 02 F6 | 	mov	local07, arg01
02aac     97 06 48 FB | 	callpa	#(@LR__0151-@LR__0150)>>2,fcache_load_ptr_
02ab0                 | LR__0150
02ab0     19 FB C9 FA | 	rdbyte	result1, local07 wz
02ab4     01 32 06 51 |  if_ne	add	local07, #1
02ab8     F4 FF 9F 5D |  if_ne	jmp	#LR__0150
02abc                 | LR__0151
02abc     09 33 82 F1 | 	sub	local07, arg01
02ac0     19 41 02 F6 | 	mov	local14, local07
02ac4     20 3B 02 F6 | 	mov	local11, local14
02ac8     01 3A 86 F1 | 	sub	local11, #1
02acc     1D 3D 02 F6 | 	mov	local12, local11
02ad0     18 13 02 F6 | 	mov	arg01, local06
02ad4     1E 15 02 F6 | 	mov	arg02, local12
02ad8     78 64 B2 FD | 	call	#__system__Right_S
02adc     1C FB 61 FC | 	wrlong	result1, local10
02ae0     37 39 02 F6 | 	mov	local10, local37
02ae4     03 38 66 F0 | 	shl	local10, #3
02ae8     35 00 00 FF 
02aec     0C E4 05 F1 | 	add	objptr, ##27148
02af0     F2 38 02 F1 | 	add	local10, objptr
02af4     B5 01 00 FF 
02af8     33 30 06 F6 | 	mov	local06, ##@LR__5456
02afc     1C 31 62 FC | 	wrlong	local06, local10
02b00     35 00 00 FF 
02b04     0C E4 85 F1 | 	sub	objptr, ##27148
02b08     A8 01 90 FD | 	jmp	#LR__0160
02b0c                 | LR__0152
02b0c     37 31 02 F6 | 	mov	local06, local37
02b10     03 30 66 F0 | 	shl	local06, #3
02b14     35 00 00 FF 
02b18     0C E4 05 F1 | 	add	objptr, ##27148
02b1c     F2 3C 02 F6 | 	mov	local12, objptr
02b20     F2 30 02 F1 | 	add	local06, objptr
02b24     18 15 02 FB | 	rdlong	arg02, local06
02b28     B5 01 00 FF 
02b2c     35 16 06 F6 | 	mov	arg03, ##@LR__5457
02b30     01 12 06 F6 | 	mov	arg01, #1
02b34     35 00 00 FF 
02b38     0C E4 85 F1 | 	sub	objptr, ##27148
02b3c     D4 68 B2 FD | 	call	#__system__Instr
02b40     FD 72 02 F6 | 	mov	local39, result1
02b44                 | ' 
02b44                 | ' dot=instr(1,lparts(addptr).part$,".")						' find a dot	
02b44                 | ' if dot>0 andalso dot<len(lparts(addptr).part$) then 				' split the part
02b44     01 72 56 F2 | 	cmps	local39, #1 wc
02b48     68 01 90 CD |  if_b	jmp	#LR__0159
02b4c     37 2F 02 F6 | 	mov	local05, local37
02b50     03 2E 66 F0 | 	shl	local05, #3
02b54     35 00 00 FF 
02b58     0C E4 05 F1 | 	add	objptr, ##27148
02b5c     F2 2E 02 F1 | 	add	local05, objptr
02b60     17 13 02 FB | 	rdlong	arg01, local05
02b64     35 00 00 FF 
02b68     0C E4 85 F1 | 	sub	objptr, ##27148
02b6c     09 33 02 F6 | 	mov	local07, arg01
02b70     97 06 48 FB | 	callpa	#(@LR__0154-@LR__0153)>>2,fcache_load_ptr_
02b74                 | LR__0153
02b74     19 FB C9 FA | 	rdbyte	result1, local07 wz
02b78     01 32 06 51 |  if_ne	add	local07, #1
02b7c     F4 FF 9F 5D |  if_ne	jmp	#LR__0153
02b80                 | LR__0154
02b80     09 33 82 F1 | 	sub	local07, arg01
02b84     19 73 52 F2 | 	cmps	local39, local07 wc
02b88     28 01 90 3D |  if_ae	jmp	#LR__0159
02b8c     01 46 06 F1 | 	add	local17, #1
02b90                 | '   k+=1
02b90                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
02b90     23 29 02 F6 | 	mov	local02, local17
02b94     37 75 02 F6 | 	mov	local40, local37
02b98     01 74 06 F1 | 	add	local40, #1
02b9c     35 00 00 FF 
02ba0     0C E4 05 F1 | 	add	objptr, ##27148
02ba4     97 2E 48 FB | 	callpa	#(@LR__0156-@LR__0155)>>2,fcache_load_ptr_
02ba8                 | LR__0155
02ba8     14 2F 02 F6 | 	mov	local05, local02
02bac     01 2E 86 F1 | 	sub	local05, #1
02bb0     03 2E 66 F0 | 	shl	local05, #3
02bb4     F2 2E 02 F1 | 	add	local05, objptr
02bb8     17 2D 02 FB | 	rdlong	local04, local05
02bbc     14 31 02 F6 | 	mov	local06, local02
02bc0     01 30 86 F1 | 	sub	local06, #1
02bc4     03 30 66 F0 | 	shl	local06, #3
02bc8     F2 30 02 F1 | 	add	local06, objptr
02bcc     04 30 06 F1 | 	add	local06, #4
02bd0     18 2B 02 FB | 	rdlong	local03, local06
02bd4     14 31 02 F6 | 	mov	local06, local02
02bd8     03 30 66 F0 | 	shl	local06, #3
02bdc     F2 30 02 F1 | 	add	local06, objptr
02be0     18 2D 62 FC | 	wrlong	local04, local06
02be4     14 3F 02 F6 | 	mov	local13, local02
02be8     03 3E 66 F0 | 	shl	local13, #3
02bec     F2 3E 02 F1 | 	add	local13, objptr
02bf0     04 3E 06 F1 | 	add	local13, #4
02bf4     1F 2B 62 FC | 	wrlong	local03, local13
02bf8     01 28 86 F1 | 	sub	local02, #1
02bfc     3A 29 52 F2 | 	cmps	local02, local40 wc
02c00     A4 FF 9F 3D |  if_ae	jmp	#LR__0155
02c04                 | LR__0156
02c04     37 39 02 F6 | 	mov	local10, local37
02c08     01 38 06 F1 | 	add	local10, #1
02c0c     03 38 66 F0 | 	shl	local10, #3
02c10     F2 38 02 F1 | 	add	local10, objptr
02c14     37 41 02 F6 | 	mov	local14, local37
02c18     03 40 66 F0 | 	shl	local14, #3
02c1c     F2 40 02 F1 | 	add	local14, objptr
02c20     20 31 02 FB | 	rdlong	local06, local14
02c24     37 5D 02 F6 | 	mov	local28, local37
02c28     2E 51 02 F6 | 	mov	local22, local28
02c2c     03 50 66 F0 | 	shl	local22, #3
02c30     F2 52 02 F6 | 	mov	local23, objptr
02c34     F2 50 02 F1 | 	add	local22, objptr
02c38     28 13 02 FB | 	rdlong	arg01, local22
02c3c     35 00 00 FF 
02c40     0C E4 85 F1 | 	sub	objptr, ##27148
02c44     09 33 02 F6 | 	mov	local07, arg01
02c48     97 06 48 FB | 	callpa	#(@LR__0158-@LR__0157)>>2,fcache_load_ptr_
02c4c                 | LR__0157
02c4c     19 FB C9 FA | 	rdbyte	result1, local07 wz
02c50     01 32 06 51 |  if_ne	add	local07, #1
02c54     F4 FF 9F 5D |  if_ne	jmp	#LR__0157
02c58                 | LR__0158
02c58     09 33 82 F1 | 	sub	local07, arg01
02c5c     19 15 02 F6 | 	mov	arg02, local07
02c60     39 15 82 F1 | 	sub	arg02, local39
02c64     18 13 02 F6 | 	mov	arg01, local06
02c68     E8 62 B2 FD | 	call	#__system__Right_S
02c6c     1C FB 61 FC | 	wrlong	result1, local10
02c70     37 39 02 F6 | 	mov	local10, local37
02c74     03 38 66 F0 | 	shl	local10, #3
02c78     35 00 00 FF 
02c7c     0C E4 05 F1 | 	add	objptr, ##27148
02c80     F2 38 02 F1 | 	add	local10, objptr
02c84     37 3B 02 F6 | 	mov	local11, local37
02c88     1D 41 02 F6 | 	mov	local14, local11
02c8c     03 40 66 F0 | 	shl	local14, #3
02c90     F2 3E 02 F6 | 	mov	local13, objptr
02c94     F2 40 02 F1 | 	add	local14, objptr
02c98     20 13 02 FB | 	rdlong	arg01, local14
02c9c     39 3D 02 F6 | 	mov	local12, local39
02ca0     1E 15 02 F6 | 	mov	arg02, local12
02ca4     35 00 00 FF 
02ca8     0C E4 85 F1 | 	sub	objptr, ##27148
02cac     1C 62 B2 FD | 	call	#__system__Left_S
02cb0     1C FB 61 FC | 	wrlong	result1, local10
02cb4                 | LR__0159
02cb4                 | LR__0160
02cb4     37 39 02 F6 | 	mov	local10, local37
02cb8     03 38 66 F0 | 	shl	local10, #3
02cbc     35 00 00 FF 
02cc0     0C E4 05 F1 | 	add	objptr, ##27148
02cc4     F2 38 02 F1 | 	add	local10, objptr
02cc8     1C 77 02 FB | 	rdlong	local41, local10
02ccc                 | ' 
02ccc                 | ' 825
02ccc                 | ' lp$=lparts(addptr).part$ 
02ccc                 | ' 
02ccc                 | ' ' process mouse/cursor/click on/off
02ccc                 | ' 
02ccc                 | ' if (lp$="mouse" orelse lp$="cursor" orelse lp$="click") then 
02ccc     B5 01 00 FF 
02cd0     37 14 06 F6 | 	mov	arg02, ##@LR__5458
02cd4     3B 13 02 F6 | 	mov	arg01, local41
02cd8     35 00 00 FF 
02cdc     0C E4 85 F1 | 	sub	objptr, ##27148
02ce0     94 41 B2 FD | 	call	#__system___string_cmp
02ce4     00 FA 0D F2 | 	cmp	result1, #0 wz
02ce8     30 00 90 AD |  if_e	jmp	#LR__0161
02cec     B5 01 00 FF 
02cf0     3D 14 06 F6 | 	mov	arg02, ##@LR__5459
02cf4     3B 13 02 F6 | 	mov	arg01, local41
02cf8     7C 41 B2 FD | 	call	#__system___string_cmp
02cfc     00 FA 0D F2 | 	cmp	result1, #0 wz
02d00     18 00 90 AD |  if_e	jmp	#LR__0161
02d04     B5 01 00 FF 
02d08     44 14 06 F6 | 	mov	arg02, ##@LR__5460
02d0c     3B 13 02 F6 | 	mov	arg01, local41
02d10     64 41 B2 FD | 	call	#__system___string_cmp
02d14     00 FA 0D F2 | 	cmp	result1, #0 wz
02d18     E0 00 90 5D |  if_ne	jmp	#LR__0164
02d1c                 | LR__0161
02d1c                 | '   if lparts(addptr+1).part$="on" then lparts(addptr+1).part$="1" :lparts(2).token=token_decimal
02d1c     37 2F 02 F6 | 	mov	local05, local37
02d20     01 2E 06 F1 | 	add	local05, #1
02d24     03 2E 66 F0 | 	shl	local05, #3
02d28     35 00 00 FF 
02d2c     0C E4 05 F1 | 	add	objptr, ##27148
02d30     F2 2E 02 F1 | 	add	local05, objptr
02d34     17 13 02 FB | 	rdlong	arg01, local05
02d38     B5 01 00 FF 
02d3c     4A 14 06 F6 | 	mov	arg02, ##@LR__5461
02d40     35 00 00 FF 
02d44     0C E4 85 F1 | 	sub	objptr, ##27148
02d48     2C 41 B2 FD | 	call	#__system___string_cmp
02d4c     00 FA 0D F2 | 	cmp	result1, #0 wz
02d50     38 00 90 5D |  if_ne	jmp	#LR__0162
02d54     37 39 02 F6 | 	mov	local10, local37
02d58     01 38 06 F1 | 	add	local10, #1
02d5c     03 38 66 F0 | 	shl	local10, #3
02d60     35 00 00 FF 
02d64     0C E4 05 F1 | 	add	objptr, ##27148
02d68     F2 38 02 F1 | 	add	local10, objptr
02d6c     B5 01 00 FF 
02d70     4D 30 06 F6 | 	mov	local06, ##@LR__5462
02d74     1C 31 62 FC | 	wrlong	local06, local10
02d78     14 E4 05 F1 | 	add	objptr, #20
02d7c     01 00 80 FF 
02d80     F2 00 68 FC | 	wrlong	##512, objptr
02d84     35 00 00 FF 
02d88     20 E4 85 F1 | 	sub	objptr, ##27168
02d8c                 | LR__0162
02d8c                 | '   if lparts(addptr+1).part$="off" then lparts(addptr+1).part$="0" :lparts(2).token=token_decimal
02d8c     37 2F 02 F6 | 	mov	local05, local37
02d90     01 2E 06 F1 | 	add	local05, #1
02d94     03 2E 66 F0 | 	shl	local05, #3
02d98     35 00 00 FF 
02d9c     0C E4 05 F1 | 	add	objptr, ##27148
02da0     F2 2E 02 F1 | 	add	local05, objptr
02da4     17 13 02 FB | 	rdlong	arg01, local05
02da8     B5 01 00 FF 
02dac     4F 14 06 F6 | 	mov	arg02, ##@LR__5463
02db0     35 00 00 FF 
02db4     0C E4 85 F1 | 	sub	objptr, ##27148
02db8     BC 40 B2 FD | 	call	#__system___string_cmp
02dbc     00 FA 0D F2 | 	cmp	result1, #0 wz
02dc0     38 00 90 5D |  if_ne	jmp	#LR__0163
02dc4     37 39 02 F6 | 	mov	local10, local37
02dc8     01 38 06 F1 | 	add	local10, #1
02dcc     03 38 66 F0 | 	shl	local10, #3
02dd0     35 00 00 FF 
02dd4     0C E4 05 F1 | 	add	objptr, ##27148
02dd8     F2 38 02 F1 | 	add	local10, objptr
02ddc     B5 01 00 FF 
02de0     53 30 06 F6 | 	mov	local06, ##@LR__5464
02de4     1C 31 62 FC | 	wrlong	local06, local10
02de8     14 E4 05 F1 | 	add	objptr, #20
02dec     01 00 80 FF 
02df0     F2 00 68 FC | 	wrlong	##512, objptr
02df4     35 00 00 FF 
02df8     20 E4 85 F1 | 	sub	objptr, ##27168
02dfc                 | LR__0163
02dfc                 | LR__0164
02dfc                 | ' 		
02dfc                 | ' ' process text constant for 'mode' - TO DO all predefined constants should have # before				
02dfc                 | ' 
02dfc                 | ' if (lp$="mode" orelse lp$="m.") then 
02dfc     B5 01 00 FF 
02e00     55 14 06 F6 | 	mov	arg02, ##@LR__5465
02e04     3B 13 02 F6 | 	mov	arg01, local41
02e08     6C 40 B2 FD | 	call	#__system___string_cmp
02e0c     00 FA 0D F2 | 	cmp	result1, #0 wz
02e10     18 00 90 AD |  if_e	jmp	#LR__0165
02e14     B5 01 00 FF 
02e18     5A 14 06 F6 | 	mov	arg02, ##@LR__5466
02e1c     3B 13 02 F6 | 	mov	arg01, local41
02e20     54 40 B2 FD | 	call	#__system___string_cmp
02e24     00 FA 0D F2 | 	cmp	result1, #0 wz
02e28     F4 01 90 5D |  if_ne	jmp	#LR__0171
02e2c                 | LR__0165
02e2c                 | '   if lparts(addptr+1).part$="atari" then lparts(addptr+1).part$="0"       
02e2c     37 2F 02 F6 | 	mov	local05, local37
02e30     01 2E 06 F1 | 	add	local05, #1
02e34     03 2E 66 F0 | 	shl	local05, #3
02e38     35 00 00 FF 
02e3c     0C E4 05 F1 | 	add	objptr, ##27148
02e40     F2 2E 02 F1 | 	add	local05, objptr
02e44     17 13 02 FB | 	rdlong	arg01, local05
02e48     B5 01 00 FF 
02e4c     5D 14 06 F6 | 	mov	arg02, ##@LR__5467
02e50     35 00 00 FF 
02e54     0C E4 85 F1 | 	sub	objptr, ##27148
02e58     1C 40 B2 FD | 	call	#__system___string_cmp
02e5c     00 FA 0D F2 | 	cmp	result1, #0 wz
02e60     2C 00 90 5D |  if_ne	jmp	#LR__0166
02e64     37 39 02 F6 | 	mov	local10, local37
02e68     01 38 06 F1 | 	add	local10, #1
02e6c     03 38 66 F0 | 	shl	local10, #3
02e70     35 00 00 FF 
02e74     0C E4 05 F1 | 	add	objptr, ##27148
02e78     F2 38 02 F1 | 	add	local10, objptr
02e7c     B5 01 00 FF 
02e80     63 30 06 F6 | 	mov	local06, ##@LR__5468
02e84     1C 31 62 FC | 	wrlong	local06, local10
02e88     35 00 00 FF 
02e8c     0C E4 85 F1 | 	sub	objptr, ##27148
02e90                 | LR__0166
02e90                 | '   if lparts(addptr+1).part$="pc_amber" then lparts(addptr+1).part$="1"  
02e90     37 2F 02 F6 | 	mov	local05, local37
02e94     01 2E 06 F1 | 	add	local05, #1
02e98     03 2E 66 F0 | 	shl	local05, #3
02e9c     35 00 00 FF 
02ea0     0C E4 05 F1 | 	add	objptr, ##27148
02ea4     F2 2E 02 F1 | 	add	local05, objptr
02ea8     17 13 02 FB | 	rdlong	arg01, local05
02eac     B5 01 00 FF 
02eb0     65 14 06 F6 | 	mov	arg02, ##@LR__5469
02eb4     35 00 00 FF 
02eb8     0C E4 85 F1 | 	sub	objptr, ##27148
02ebc     B8 3F B2 FD | 	call	#__system___string_cmp
02ec0     00 FA 0D F2 | 	cmp	result1, #0 wz
02ec4     2C 00 90 5D |  if_ne	jmp	#LR__0167
02ec8     37 39 02 F6 | 	mov	local10, local37
02ecc     01 38 06 F1 | 	add	local10, #1
02ed0     03 38 66 F0 | 	shl	local10, #3
02ed4     35 00 00 FF 
02ed8     0C E4 05 F1 | 	add	objptr, ##27148
02edc     F2 38 02 F1 | 	add	local10, objptr
02ee0     B5 01 00 FF 
02ee4     6E 30 06 F6 | 	mov	local06, ##@LR__5470
02ee8     1C 31 62 FC | 	wrlong	local06, local10
02eec     35 00 00 FF 
02ef0     0C E4 85 F1 | 	sub	objptr, ##27148
02ef4                 | LR__0167
02ef4                 | '   if lparts(addptr+1).part$="pc_green" then lparts(addptr+1).part$="2"  
02ef4     37 2F 02 F6 | 	mov	local05, local37
02ef8     01 2E 06 F1 | 	add	local05, #1
02efc     03 2E 66 F0 | 	shl	local05, #3
02f00     35 00 00 FF 
02f04     0C E4 05 F1 | 	add	objptr, ##27148
02f08     F2 2E 02 F1 | 	add	local05, objptr
02f0c     17 13 02 FB | 	rdlong	arg01, local05
02f10     B5 01 00 FF 
02f14     70 14 06 F6 | 	mov	arg02, ##@LR__5471
02f18     35 00 00 FF 
02f1c     0C E4 85 F1 | 	sub	objptr, ##27148
02f20     54 3F B2 FD | 	call	#__system___string_cmp
02f24     00 FA 0D F2 | 	cmp	result1, #0 wz
02f28     2C 00 90 5D |  if_ne	jmp	#LR__0168
02f2c     37 39 02 F6 | 	mov	local10, local37
02f30     01 38 06 F1 | 	add	local10, #1
02f34     03 38 66 F0 | 	shl	local10, #3
02f38     35 00 00 FF 
02f3c     0C E4 05 F1 | 	add	objptr, ##27148
02f40     F2 38 02 F1 | 	add	local10, objptr
02f44     B5 01 00 FF 
02f48     79 30 06 F6 | 	mov	local06, ##@LR__5472
02f4c     1C 31 62 FC | 	wrlong	local06, local10
02f50     35 00 00 FF 
02f54     0C E4 85 F1 | 	sub	objptr, ##27148
02f58                 | LR__0168
02f58                 | '   if lparts(addptr+1).part$="pc_white" then lparts(addptr+1).part$="3"  
02f58     37 2F 02 F6 | 	mov	local05, local37
02f5c     01 2E 06 F1 | 	add	local05, #1
02f60     03 2E 66 F0 | 	shl	local05, #3
02f64     35 00 00 FF 
02f68     0C E4 05 F1 | 	add	objptr, ##27148
02f6c     F2 2E 02 F1 | 	add	local05, objptr
02f70     17 13 02 FB | 	rdlong	arg01, local05
02f74     B5 01 00 FF 
02f78     7B 14 06 F6 | 	mov	arg02, ##@LR__5473
02f7c     35 00 00 FF 
02f80     0C E4 85 F1 | 	sub	objptr, ##27148
02f84     F0 3E B2 FD | 	call	#__system___string_cmp
02f88     00 FA 0D F2 | 	cmp	result1, #0 wz
02f8c     2C 00 90 5D |  if_ne	jmp	#LR__0169
02f90     37 39 02 F6 | 	mov	local10, local37
02f94     01 38 06 F1 | 	add	local10, #1
02f98     03 38 66 F0 | 	shl	local10, #3
02f9c     35 00 00 FF 
02fa0     0C E4 05 F1 | 	add	objptr, ##27148
02fa4     F2 38 02 F1 | 	add	local10, objptr
02fa8     B5 01 00 FF 
02fac     84 30 06 F6 | 	mov	local06, ##@LR__5474
02fb0     1C 31 62 FC | 	wrlong	local06, local10
02fb4     35 00 00 FF 
02fb8     0C E4 85 F1 | 	sub	objptr, ##27148
02fbc                 | LR__0169
02fbc                 | '   if lparts(addptr+1).part$="st" then lparts(addptr+1).part$="4"  
02fbc     37 2F 02 F6 | 	mov	local05, local37
02fc0     01 2E 06 F1 | 	add	local05, #1
02fc4     03 2E 66 F0 | 	shl	local05, #3
02fc8     35 00 00 FF 
02fcc     0C E4 05 F1 | 	add	objptr, ##27148
02fd0     F2 2E 02 F1 | 	add	local05, objptr
02fd4     17 13 02 FB | 	rdlong	arg01, local05
02fd8     B5 01 00 FF 
02fdc     86 14 06 F6 | 	mov	arg02, ##@LR__5475
02fe0     35 00 00 FF 
02fe4     0C E4 85 F1 | 	sub	objptr, ##27148
02fe8     8C 3E B2 FD | 	call	#__system___string_cmp
02fec     00 FA 0D F2 | 	cmp	result1, #0 wz
02ff0     2C 00 90 5D |  if_ne	jmp	#LR__0170
02ff4     37 39 02 F6 | 	mov	local10, local37
02ff8     01 38 06 F1 | 	add	local10, #1
02ffc     03 38 66 F0 | 	shl	local10, #3
03000     35 00 00 FF 
03004     0C E4 05 F1 | 	add	objptr, ##27148
03008     F2 38 02 F1 | 	add	local10, objptr
0300c     B5 01 00 FF 
03010     89 30 06 F6 | 	mov	local06, ##@LR__5476
03014     1C 31 62 FC | 	wrlong	local06, local10
03018     35 00 00 FF 
0301c     0C E4 85 F1 | 	sub	objptr, ##27148
03020                 | LR__0170
03020                 | LR__0171
03020                 | ' 
03020                 | ' ' find part types 
03020                 | ' 
03020                 | ' for i=0 to k-1
03020     00 28 06 F6 | 	mov	local02, #0
03024     23 79 02 F6 | 	mov	local42, local17
03028                 | LR__0172
03028     3C 29 52 F2 | 	cmps	local02, local42 wc
0302c     A4 07 90 3D |  if_ae	jmp	#LR__0184
03030     14 39 02 F6 | 	mov	local10, local02
03034     03 38 66 F0 | 	shl	local10, #3
03038     35 00 00 FF 
0303c     0C E4 05 F1 | 	add	objptr, ##27148
03040     F2 38 02 F1 | 	add	local10, objptr
03044     14 3B 02 F6 | 	mov	local11, local02
03048     1D 41 02 F6 | 	mov	local14, local11
0304c     20 3F 02 F6 | 	mov	local13, local14
03050     03 3E 66 F0 | 	shl	local13, #3
03054     F2 3E 02 F1 | 	add	local13, objptr
03058     1F 13 02 FB | 	rdlong	arg01, local13
0305c     35 00 00 FF 
03060     0C E4 85 F1 | 	sub	objptr, ##27148
03064     70 1B B0 FD | 	call	#_isseparator
03068     FD FA E1 F8 | 	getbyte	result1, result1, #0
0306c     04 38 06 F1 | 	add	local10, #4
03070     1C FB 61 FC | 	wrlong	result1, local10
03074                 | ' lparts(i).token=isseparator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
03074     14 39 02 F6 | 	mov	local10, local02
03078     03 38 66 F0 | 	shl	local10, #3
0307c     35 00 00 FF 
03080     0C E4 05 F1 | 	add	objptr, ##27148
03084     F2 38 02 F1 | 	add	local10, objptr
03088     04 38 06 F1 | 	add	local10, #4
0308c     1C 3D 02 FB | 	rdlong	local12, local10
03090     01 3C 56 F2 | 	cmps	local12, #1 wc
03094     35 00 00 FF 
03098     0C E4 85 F1 | 	sub	objptr, ##27148
0309c     2C 07 90 3D |  if_ae	jmp	#LR__0183
030a0     14 39 02 F6 | 	mov	local10, local02
030a4     03 38 66 F0 | 	shl	local10, #3
030a8     35 00 00 FF 
030ac     0C E4 05 F1 | 	add	objptr, ##27148
030b0     F2 38 02 F1 | 	add	local10, objptr
030b4     14 3B 02 F6 | 	mov	local11, local02
030b8     1D 41 02 F6 | 	mov	local14, local11
030bc     20 3F 02 F6 | 	mov	local13, local14
030c0     03 3E 66 F0 | 	shl	local13, #3
030c4     F2 3E 02 F1 | 	add	local13, objptr
030c8     1F 13 02 FB | 	rdlong	arg01, local13
030cc     35 00 00 FF 
030d0     0C E4 85 F1 | 	sub	objptr, ##27148
030d4     4C 13 B0 FD | 	call	#_isoperator
030d8     FD FA E1 F8 | 	getbyte	result1, result1, #0
030dc     04 38 06 F1 | 	add	local10, #4
030e0     1C FB 61 FC | 	wrlong	result1, local10
030e4                 | ' lparts(i).token=isoperator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
030e4     14 39 02 F6 | 	mov	local10, local02
030e8     03 38 66 F0 | 	shl	local10, #3
030ec     35 00 00 FF 
030f0     0C E4 05 F1 | 	add	objptr, ##27148
030f4     F2 38 02 F1 | 	add	local10, objptr
030f8     04 38 06 F1 | 	add	local10, #4
030fc     1C 3D 02 FB | 	rdlong	local12, local10
03100     01 3C 56 F2 | 	cmps	local12, #1 wc
03104     35 00 00 FF 
03108     0C E4 85 F1 | 	sub	objptr, ##27148
0310c     BC 06 90 3D |  if_ae	jmp	#LR__0183
03110     14 39 02 F6 | 	mov	local10, local02
03114     03 38 66 F0 | 	shl	local10, #3
03118     35 00 00 FF 
0311c     0C E4 05 F1 | 	add	objptr, ##27148
03120     F2 38 02 F1 | 	add	local10, objptr
03124     14 3B 02 F6 | 	mov	local11, local02
03128     1D 41 02 F6 | 	mov	local14, local11
0312c     20 3F 02 F6 | 	mov	local13, local14
03130     03 3E 66 F0 | 	shl	local13, #3
03134     F2 3E 02 F1 | 	add	local13, objptr
03138     1F 13 02 FB | 	rdlong	arg01, local13
0313c     35 00 00 FF 
03140     0C E4 85 F1 | 	sub	objptr, ##27148
03144                 | ' 
03144                 | ' select case s
03144     B5 01 00 FF 
03148     8E 15 06 F6 | 	mov	arg02, ##@LR__5567
0314c     28 3D B2 FD | 	call	#__system___string_cmp
03150     00 FA 0D F2 | 	cmp	result1, #0 wz
03154     1B FA 05 A6 |  if_e	mov	result1, #27
03158     00 FA 05 56 |  if_ne	mov	result1, #0
0315c     FD FA E1 F8 | 	getbyte	result1, result1, #0
03160     04 38 06 F1 | 	add	local10, #4
03164     1C FB 61 FC | 	wrlong	result1, local10
03168                 | ' lparts(i).token=isassign(lparts(i).part$) 	: if lparts(i).token>0 then goto 102
03168     14 39 02 F6 | 	mov	local10, local02
0316c     03 38 66 F0 | 	shl	local10, #3
03170     35 00 00 FF 
03174     0C E4 05 F1 | 	add	objptr, ##27148
03178     F2 38 02 F1 | 	add	local10, objptr
0317c     04 38 06 F1 | 	add	local10, #4
03180     1C 3D 02 FB | 	rdlong	local12, local10
03184     01 3C 56 F2 | 	cmps	local12, #1 wc
03188     35 00 00 FF 
0318c     0C E4 85 F1 | 	sub	objptr, ##27148
03190     38 06 90 3D |  if_ae	jmp	#LR__0183
03194     14 39 02 F6 | 	mov	local10, local02
03198     03 38 66 F0 | 	shl	local10, #3
0319c     35 00 00 FF 
031a0     0C E4 05 F1 | 	add	objptr, ##27148
031a4     F2 38 02 F1 | 	add	local10, objptr
031a8     14 3B 02 F6 | 	mov	local11, local02
031ac     1D 41 02 F6 | 	mov	local14, local11
031b0     20 3F 02 F6 | 	mov	local13, local14
031b4     03 3E 66 F0 | 	shl	local13, #3
031b8     F2 3E 02 F1 | 	add	local13, objptr
031bc     1F 13 02 FB | 	rdlong	arg01, local13
031c0     35 00 00 FF 
031c4     0C E4 85 F1 | 	sub	objptr, ##27148
031c8     0C 1C B0 FD | 	call	#_iscommand
031cc     FD FA E1 F8 | 	getbyte	result1, result1, #0
031d0     04 38 06 F1 | 	add	local10, #4
031d4     1C FB 61 FC | 	wrlong	result1, local10
031d8                 | ' lparts(i).token=iscommand(lparts(i).part$)	: if lparts(i).token>0 then goto 102
031d8     14 39 02 F6 | 	mov	local10, local02
031dc     03 38 66 F0 | 	shl	local10, #3
031e0     35 00 00 FF 
031e4     0C E4 05 F1 | 	add	objptr, ##27148
031e8     F2 38 02 F1 | 	add	local10, objptr
031ec     04 38 06 F1 | 	add	local10, #4
031f0     1C 3D 02 FB | 	rdlong	local12, local10
031f4     01 3C 56 F2 | 	cmps	local12, #1 wc
031f8     35 00 00 FF 
031fc     0C E4 85 F1 | 	sub	objptr, ##27148
03200     C8 05 90 3D |  if_ae	jmp	#LR__0183
03204     14 39 02 F6 | 	mov	local10, local02
03208     03 38 66 F0 | 	shl	local10, #3
0320c     35 00 00 FF 
03210     0C E4 05 F1 | 	add	objptr, ##27148
03214     F2 38 02 F1 | 	add	local10, objptr
03218     14 3B 02 F6 | 	mov	local11, local02
0321c     1D 41 02 F6 | 	mov	local14, local11
03220     20 3F 02 F6 | 	mov	local13, local14
03224     03 3E 66 F0 | 	shl	local13, #3
03228     F2 5C 02 F6 | 	mov	local28, objptr
0322c     F2 3E 02 F1 | 	add	local13, objptr
03230     1F 13 02 FB | 	rdlong	arg01, local13
03234     35 00 00 FF 
03238     0C E4 85 F1 | 	sub	objptr, ##27148
0323c     98 2C B0 FD | 	call	#_isfunction
03240     FD FA E1 F8 | 	getbyte	result1, result1, #0
03244     04 38 06 F1 | 	add	local10, #4
03248     1C FB 61 FC | 	wrlong	result1, local10
0324c                 | ' lparts(i).token=isfunction(lparts(i).part$)	: if lparts(i).token>0 then goto 102
0324c     14 39 02 F6 | 	mov	local10, local02
03250     03 38 66 F0 | 	shl	local10, #3
03254     35 00 00 FF 
03258     0C E4 05 F1 | 	add	objptr, ##27148
0325c     F2 38 02 F1 | 	add	local10, objptr
03260     04 38 06 F1 | 	add	local10, #4
03264     1C 3D 02 FB | 	rdlong	local12, local10
03268     01 3C 56 F2 | 	cmps	local12, #1 wc
0326c     35 00 00 FF 
03270     0C E4 85 F1 | 	sub	objptr, ##27148
03274     54 05 90 3D |  if_ae	jmp	#LR__0183
03278     14 39 02 F6 | 	mov	local10, local02
0327c     03 38 66 F0 | 	shl	local10, #3
03280     35 00 00 FF 
03284     0C E4 05 F1 | 	add	objptr, ##27148
03288     F2 38 02 F1 | 	add	local10, objptr
0328c     14 3B 02 F6 | 	mov	local11, local02
03290     1D 41 02 F6 | 	mov	local14, local11
03294     03 40 66 F0 | 	shl	local14, #3
03298     F2 3E 02 F6 | 	mov	local13, objptr
0329c     F2 40 02 F1 | 	add	local14, objptr
032a0     20 13 02 FB | 	rdlong	arg01, local14
032a4     35 00 00 FF 
032a8     0C E4 85 F1 | 	sub	objptr, ##27148
032ac     BC 15 B0 FD | 	call	#_isnotename
032b0     04 38 06 F1 | 	add	local10, #4
032b4     1C FB 61 FC | 	wrlong	result1, local10
032b8                 | ' lparts(i).token=isnotename(lparts(i).part$) 
032b8                 | ' if lparts(i).token>0 then 
032b8     14 39 02 F6 | 	mov	local10, local02
032bc     03 38 66 F0 | 	shl	local10, #3
032c0     35 00 00 FF 
032c4     0C E4 05 F1 | 	add	objptr, ##27148
032c8     F2 38 02 F1 | 	add	local10, objptr
032cc     04 38 06 F1 | 	add	local10, #4
032d0     1C 31 02 FB | 	rdlong	local06, local10
032d4     01 30 56 F2 | 	cmps	local06, #1 wc
032d8     35 00 00 FF 
032dc     0C E4 85 F1 | 	sub	objptr, ##27148
032e0     8C 00 90 CD |  if_b	jmp	#LR__0173
032e4     14 2F 02 F6 | 	mov	local05, local02
032e8     03 2E 66 F0 | 	shl	local05, #3
032ec     35 00 00 FF 
032f0     0C E4 05 F1 | 	add	objptr, ##27148
032f4     F2 2E 02 F1 | 	add	local05, objptr
032f8     04 2E 06 F1 | 	add	local05, #4
032fc     17 3D 02 FB | 	rdlong	local12, local05
03300     1E 13 02 F6 | 	mov	arg01, local12
03304     35 00 00 FF 
03308     0C E4 85 F1 | 	sub	objptr, ##27148
0330c     50 3D B0 FD | 	call	#_getnoteval
03310     FD 7A 02 F6 | 	mov	local43, result1
03314     14 39 02 F6 | 	mov	local10, local02
03318     03 38 66 F0 | 	shl	local10, #3
0331c     35 00 00 FF 
03320     0C E4 05 F1 | 	add	objptr, ##27148
03324     F2 38 02 F1 | 	add	local10, objptr
03328     3D 13 02 F6 | 	mov	arg01, local43
0332c     35 00 00 FF 
03330     0C E4 85 F1 | 	sub	objptr, ##27148
03334     8C 5D B2 FD | 	call	#__system__str_S
03338     1C FB 61 FC | 	wrlong	result1, local10
0333c     14 2D 02 F6 | 	mov	local04, local02
03340     16 2B 02 F6 | 	mov	local03, local04
03344     15 39 02 F6 | 	mov	local10, local03
03348     03 38 66 F0 | 	shl	local10, #3
0334c     35 00 00 FF 
03350     0C E4 05 F1 | 	add	objptr, ##27148
03354     F2 38 02 F1 | 	add	local10, objptr
03358     04 38 06 F1 | 	add	local10, #4
0335c     01 00 80 FF 
03360     1C 05 68 FC | 	wrlong	##514, local10
03364     35 00 00 FF 
03368     0C E4 85 F1 | 	sub	objptr, ##27148
0336c     5C 04 90 FD | 	jmp	#LR__0183
03370                 | LR__0173
03370     14 39 02 F6 | 	mov	local10, local02
03374     03 38 66 F0 | 	shl	local10, #3
03378     35 00 00 FF 
0337c     0C E4 05 F1 | 	add	objptr, ##27148
03380     F2 38 02 F1 | 	add	local10, objptr
03384     14 41 02 F6 | 	mov	local14, local02
03388     03 40 66 F0 | 	shl	local14, #3
0338c     F2 40 02 F1 | 	add	local14, objptr
03390     20 13 02 FB | 	rdlong	arg01, local14
03394     35 00 00 FF 
03398     0C E4 85 F1 | 	sub	objptr, ##27148
0339c     64 13 B0 FD | 	call	#_ischannel
033a0     04 38 06 F1 | 	add	local10, #4
033a4     1C FB 61 FC | 	wrlong	result1, local10
033a8                 | ' 
033a8                 | ' ' if it is #channel, make it a number from 0 to 9 while setting a token_channel
033a8                 | ' 
033a8                 | ' lparts(i).token=ischannel(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=right$(lparts(i).part$,1) : lparts(i).token=token_channel : goto 102
033a8     14 39 02 F6 | 	mov	local10, local02
033ac     03 38 66 F0 | 	shl	local10, #3
033b0     35 00 00 FF 
033b4     0C E4 05 F1 | 	add	objptr, ##27148
033b8     F2 38 02 F1 | 	add	local10, objptr
033bc     04 38 06 F1 | 	add	local10, #4
033c0     1C 31 02 FB | 	rdlong	local06, local10
033c4     01 30 56 F2 | 	cmps	local06, #1 wc
033c8     35 00 00 FF 
033cc     0C E4 85 F1 | 	sub	objptr, ##27148
033d0     74 00 90 CD |  if_b	jmp	#LR__0174
033d4     14 39 02 F6 | 	mov	local10, local02
033d8     03 38 66 F0 | 	shl	local10, #3
033dc     35 00 00 FF 
033e0     0C E4 05 F1 | 	add	objptr, ##27148
033e4     F2 38 02 F1 | 	add	local10, objptr
033e8     14 3B 02 F6 | 	mov	local11, local02
033ec     1D 41 02 F6 | 	mov	local14, local11
033f0     03 40 66 F0 | 	shl	local14, #3
033f4     F2 3E 02 F6 | 	mov	local13, objptr
033f8     F2 40 02 F1 | 	add	local14, objptr
033fc     20 13 02 FB | 	rdlong	arg01, local14
03400     01 3C 06 F6 | 	mov	local12, #1
03404     01 14 06 F6 | 	mov	arg02, #1
03408     35 00 00 FF 
0340c     0C E4 85 F1 | 	sub	objptr, ##27148
03410     40 5B B2 FD | 	call	#__system__Right_S
03414     1C FB 61 FC | 	wrlong	result1, local10
03418     14 2D 02 F6 | 	mov	local04, local02
0341c     16 2B 02 F6 | 	mov	local03, local04
03420     15 39 02 F6 | 	mov	local10, local03
03424     03 38 66 F0 | 	shl	local10, #3
03428     35 00 00 FF 
0342c     0C E4 05 F1 | 	add	objptr, ##27148
03430     F2 38 02 F1 | 	add	local10, objptr
03434     04 38 06 F1 | 	add	local10, #4
03438     1C 59 68 FC | 	wrlong	#44, local10
0343c     35 00 00 FF 
03440     0C E4 85 F1 | 	sub	objptr, ##27148
03444     84 03 90 FD | 	jmp	#LR__0183
03448                 | LR__0174
03448     14 39 02 F6 | 	mov	local10, local02
0344c     03 38 66 F0 | 	shl	local10, #3
03450     35 00 00 FF 
03454     0C E4 05 F1 | 	add	objptr, ##27148
03458     F2 38 02 F1 | 	add	local10, objptr
0345c     14 3B 02 F6 | 	mov	local11, local02
03460     1D 41 02 F6 | 	mov	local14, local11
03464     03 40 66 F0 | 	shl	local14, #3
03468     F2 3E 02 F6 | 	mov	local13, objptr
0346c     F2 40 02 F1 | 	add	local14, objptr
03470     20 13 02 FB | 	rdlong	arg01, local14
03474     35 00 00 FF 
03478     0C E4 85 F1 | 	sub	objptr, ##27148
0347c     6C 13 B0 FD | 	call	#_isconstant
03480     04 38 06 F1 | 	add	local10, #4
03484     1C FB 61 FC | 	wrlong	result1, local10
03488                 | ' lparts(i).token=isconstant(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=str$(lparts(i).token) : lparts(i).token=token_integer : goto 102
03488     14 39 02 F6 | 	mov	local10, local02
0348c     03 38 66 F0 | 	shl	local10, #3
03490     35 00 00 FF 
03494     0C E4 05 F1 | 	add	objptr, ##27148
03498     F2 38 02 F1 | 	add	local10, objptr
0349c     04 38 06 F1 | 	add	local10, #4
034a0     1C 3D 02 FB | 	rdlong	local12, local10
034a4     01 3C 56 F2 | 	cmps	local12, #1 wc
034a8     35 00 00 FF 
034ac     0C E4 85 F1 | 	sub	objptr, ##27148
034b0     94 00 90 CD |  if_b	jmp	#LR__0175
034b4     14 39 02 F6 | 	mov	local10, local02
034b8     03 38 66 F0 | 	shl	local10, #3
034bc     35 00 00 FF 
034c0     0C E4 05 F1 | 	add	objptr, ##27148
034c4     F2 38 02 F1 | 	add	local10, objptr
034c8     14 3D 02 F6 | 	mov	local12, local02
034cc     1E 3B 02 F6 | 	mov	local11, local12
034d0     1D 41 02 F6 | 	mov	local14, local11
034d4     03 40 66 F0 | 	shl	local14, #3
034d8     F2 3E 02 F6 | 	mov	local13, objptr
034dc     F2 40 02 F1 | 	add	local14, objptr
034e0     04 40 06 F1 | 	add	local14, #4
034e4     20 13 02 FB | 	rdlong	arg01, local14
034e8     04 40 86 F1 | 	sub	local14, #4
034ec     35 00 00 FF 
034f0     0C E4 85 F1 | 	sub	objptr, ##27148
034f4     09 13 52 F6 | 	abs	arg01, arg01 wc
034f8     1F 7C C6 C9 |  if_b	decod	local44, #31
034fc     00 7C 06 36 |  if_ae	mov	local44, #0
03500     C0 63 B2 FD | 	call	#__system___float_fromuns
03504     3E FB 61 F5 | 	xor	result1, local44
03508     FD 12 02 F6 | 	mov	arg01, result1
0350c     B4 5B B2 FD | 	call	#__system__str_S
03510     1C FB 61 FC | 	wrlong	result1, local10
03514     14 2D 02 F6 | 	mov	local04, local02
03518     16 2B 02 F6 | 	mov	local03, local04
0351c     15 39 02 F6 | 	mov	local10, local03
03520     03 38 66 F0 | 	shl	local10, #3
03524     35 00 00 FF 
03528     0C E4 05 F1 | 	add	objptr, ##27148
0352c     F2 38 02 F1 | 	add	local10, objptr
03530     04 38 06 F1 | 	add	local10, #4
03534     01 00 80 FF 
03538     1C 03 68 FC | 	wrlong	##513, local10
0353c     35 00 00 FF 
03540     0C E4 85 F1 | 	sub	objptr, ##27148
03544     84 02 90 FD | 	jmp	#LR__0183
03548                 | LR__0175
03548     14 2F 02 F6 | 	mov	local05, local02
0354c     03 2E 66 F0 | 	shl	local05, #3
03550     35 00 00 FF 
03554     0C E4 05 F1 | 	add	objptr, ##27148
03558     F2 2E 02 F1 | 	add	local05, objptr
0355c     17 13 02 FB | 	rdlong	arg01, local05
03560     35 00 00 FF 
03564     0C E4 85 F1 | 	sub	objptr, ##27148
03568     40 33 B0 FD | 	call	#_isnum
0356c     FD 7E 02 F6 | 	mov	local45, result1
03570     14 2F 02 F6 | 	mov	local05, local02
03574     03 2E 66 F0 | 	shl	local05, #3
03578     35 00 00 FF 
0357c     0C E4 05 F1 | 	add	objptr, ##27148
03580     F2 2E 02 F1 | 	add	local05, objptr
03584     17 13 02 FB | 	rdlong	arg01, local05
03588     35 00 00 FF 
0358c     0C E4 85 F1 | 	sub	objptr, ##27148
03590     04 37 B0 FD | 	call	#_isint
03594     FD 80 02 F6 | 	mov	local46, result1
03598     14 2F 02 F6 | 	mov	local05, local02
0359c     03 2E 66 F0 | 	shl	local05, #3
035a0     35 00 00 FF 
035a4     0C E4 05 F1 | 	add	objptr, ##27148
035a8     F2 2E 02 F1 | 	add	local05, objptr
035ac     17 13 02 FB | 	rdlong	arg01, local05
035b0     35 00 00 FF 
035b4     0C E4 85 F1 | 	sub	objptr, ##27148
035b8     80 39 B0 FD | 	call	#_isdec
035bc     FD 82 02 F6 | 	mov	local47, result1
035c0                 | ' 
035c0                 | ' b1=isnum(lparts(i).part$) : b2=isint(lparts(i).part$) : b3=isdec(lparts(i).part$)
035c0                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal 			: goto 102 	' pure decimal for line num
035c0     00 7E 0E F2 | 	cmp	local45, #0 wz
035c4     00 80 0E 52 |  if_ne	cmp	local46, #0 wz
035c8     00 82 0E 52 |  if_ne	cmp	local47, #0 wz
035cc     34 00 90 AD |  if_e	jmp	#LR__0176
035d0     14 2D 02 F6 | 	mov	local04, local02
035d4     16 2B 02 F6 | 	mov	local03, local04
035d8     15 39 02 F6 | 	mov	local10, local03
035dc     03 38 66 F0 | 	shl	local10, #3
035e0     35 00 00 FF 
035e4     0C E4 05 F1 | 	add	objptr, ##27148
035e8     F2 38 02 F1 | 	add	local10, objptr
035ec     04 38 06 F1 | 	add	local10, #4
035f0     01 00 80 FF 
035f4     1C 01 68 FC | 	wrlong	##512, local10
035f8     35 00 00 FF 
035fc     0C E4 85 F1 | 	sub	objptr, ##27148
03600     C8 01 90 FD | 	jmp	#LR__0183
03604                 | LR__0176
03604                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer 		: goto 102 	' integer
03604     00 7E 0E F2 | 	cmp	local45, #0 wz
03608     00 80 0E 52 |  if_ne	cmp	local46, #0 wz
0360c     41 2D 22 56 |  if_ne	not	local04, local47
03610     00 2C 0E 52 |  if_ne	cmp	local04, #0 wz
03614     34 00 90 AD |  if_e	jmp	#LR__0177
03618     14 2D 02 F6 | 	mov	local04, local02
0361c     16 2B 02 F6 | 	mov	local03, local04
03620     15 39 02 F6 | 	mov	local10, local03
03624     03 38 66 F0 | 	shl	local10, #3
03628     35 00 00 FF 
0362c     0C E4 05 F1 | 	add	objptr, ##27148
03630     F2 38 02 F1 | 	add	local10, objptr
03634     04 38 06 F1 | 	add	local10, #4
03638     01 00 80 FF 
0363c     1C 03 68 FC | 	wrlong	##513, local10
03640     35 00 00 FF 
03644     0C E4 85 F1 | 	sub	objptr, ##27148
03648     80 01 90 FD | 	jmp	#LR__0183
0364c                 | LR__0177
0364c                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float 	: goto 102 	' float
0364c     00 7E 0E F2 | 	cmp	local45, #0 wz
03650     40 2D 22 56 |  if_ne	not	local04, local46
03654     00 2C 0E 52 |  if_ne	cmp	local04, #0 wz
03658     41 2B 22 56 |  if_ne	not	local03, local47
0365c     00 2A 0E 52 |  if_ne	cmp	local03, #0 wz
03660     34 00 90 AD |  if_e	jmp	#LR__0178
03664     14 2D 02 F6 | 	mov	local04, local02
03668     16 2B 02 F6 | 	mov	local03, local04
0366c     15 39 02 F6 | 	mov	local10, local03
03670     03 38 66 F0 | 	shl	local10, #3
03674     35 00 00 FF 
03678     0C E4 05 F1 | 	add	objptr, ##27148
0367c     F2 38 02 F1 | 	add	local10, objptr
03680     04 38 06 F1 | 	add	local10, #4
03684     01 00 80 FF 
03688     1C 05 68 FC | 	wrlong	##514, local10
0368c     35 00 00 FF 
03690     0C E4 85 F1 | 	sub	objptr, ##27148
03694     34 01 90 FD | 	jmp	#LR__0183
03698                 | LR__0178
03698                 | ' 
03698                 | ' if isstring(lparts(i).part$) then 
03698     14 2F 02 F6 | 	mov	local05, local02
0369c     03 2E 66 F0 | 	shl	local05, #3
036a0     35 00 00 FF 
036a4     0C E4 05 F1 | 	add	objptr, ##27148
036a8     F2 2E 02 F1 | 	add	local05, objptr
036ac     17 13 02 FB | 	rdlong	arg01, local05
036b0     35 00 00 FF 
036b4     0C E4 85 F1 | 	sub	objptr, ##27148
036b8     40 39 B0 FD | 	call	#_isstring
036bc     00 FA 0D F2 | 	cmp	result1, #0 wz
036c0     A8 00 90 AD |  if_e	jmp	#LR__0181
036c4     14 39 02 F6 | 	mov	local10, local02
036c8     03 38 66 F0 | 	shl	local10, #3
036cc     35 00 00 FF 
036d0     0C E4 05 F1 | 	add	objptr, ##27148
036d4     F2 38 02 F1 | 	add	local10, objptr
036d8     04 38 06 F1 | 	add	local10, #4
036dc     01 00 80 FF 
036e0     1C 07 68 FC | 	wrlong	##515, local10
036e4     14 2D 02 F6 | 	mov	local04, local02
036e8     16 2B 02 F6 | 	mov	local03, local04
036ec     15 39 02 F6 | 	mov	local10, local03
036f0     03 38 66 F0 | 	shl	local10, #3
036f4     F2 38 02 F1 | 	add	local10, objptr
036f8     14 41 02 F6 | 	mov	local14, local02
036fc     03 40 66 F0 | 	shl	local14, #3
03700     F2 40 02 F1 | 	add	local14, objptr
03704     20 31 02 FB | 	rdlong	local06, local14
03708     02 3C 06 F6 | 	mov	local12, #2
0370c     14 51 02 F6 | 	mov	local22, local02
03710     28 53 02 F6 | 	mov	local23, local22
03714     03 52 66 F0 | 	shl	local23, #3
03718     F2 54 02 F6 | 	mov	local24, objptr
0371c     F2 52 02 F1 | 	add	local23, objptr
03720     29 13 02 FB | 	rdlong	arg01, local23
03724     35 00 00 FF 
03728     0C E4 85 F1 | 	sub	objptr, ##27148
0372c     09 33 02 F6 | 	mov	local07, arg01
03730     97 06 48 FB | 	callpa	#(@LR__0180-@LR__0179)>>2,fcache_load_ptr_
03734                 | LR__0179
03734     19 FB C9 FA | 	rdbyte	result1, local07 wz
03738     01 32 06 51 |  if_ne	add	local07, #1
0373c     F4 FF 9F 5D |  if_ne	jmp	#LR__0179
03740                 | LR__0180
03740     09 33 82 F1 | 	sub	local07, arg01
03744     19 3F 02 F6 | 	mov	local13, local07
03748     1F 41 02 F6 | 	mov	local14, local13
0374c     02 40 86 F1 | 	sub	local14, #2
03750     20 3B 02 F6 | 	mov	local11, local14
03754     18 13 02 F6 | 	mov	arg01, local06
03758     1E 15 02 F6 | 	mov	arg02, local12
0375c     1D 17 02 F6 | 	mov	arg03, local11
03760     80 58 B2 FD | 	call	#__system__Mid_S
03764     1C FB 61 FC | 	wrlong	result1, local10
03768     60 00 90 FD | 	jmp	#LR__0183
0376c                 | LR__0181
0376c                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
0376c     14 2B 02 F6 | 	mov	local03, local02
03770     15 2F 02 F6 | 	mov	local05, local03
03774     03 2E 66 F0 | 	shl	local05, #3
03778     35 00 00 FF 
0377c     0C E4 05 F1 | 	add	objptr, ##27148
03780     F2 2E 02 F1 | 	add	local05, objptr
03784     17 13 02 FB | 	rdlong	arg01, local05
03788     35 00 00 FF 
0378c     0C E4 85 F1 | 	sub	objptr, ##27148
03790     A4 2E B0 FD | 	call	#_isname
03794     FD 2C 0A F6 | 	mov	local04, result1 wz
03798     30 00 90 AD |  if_e	jmp	#LR__0182
0379c     14 2D 02 F6 | 	mov	local04, local02
037a0     16 2B 02 F6 | 	mov	local03, local04
037a4     15 39 02 F6 | 	mov	local10, local03
037a8     03 38 66 F0 | 	shl	local10, #3
037ac     35 00 00 FF 
037b0     0C E4 05 F1 | 	add	objptr, ##27148
037b4     F2 38 02 F1 | 	add	local10, objptr
037b8     04 38 06 F1 | 	add	local10, #4
037bc     01 00 80 FF 
037c0     1C 09 68 FC | 	wrlong	##516, local10
037c4     35 00 00 FF 
037c8     0C E4 85 F1 | 	sub	objptr, ##27148
037cc                 | LR__0182
037cc                 | LR__0183
037cc     01 28 06 F1 | 	add	local02, #1
037d0     54 F8 9F FD | 	jmp	#LR__0172
037d4                 | LR__0184
037d4     23 39 02 F6 | 	mov	local10, local17
037d8     03 38 66 F0 | 	shl	local10, #3
037dc     35 00 00 FF 
037e0     0C E4 05 F1 | 	add	objptr, ##27148
037e4     F2 38 02 F1 | 	add	local10, objptr
037e8     04 38 06 F1 | 	add	local10, #4
037ec     1C FD 6B FC | 	wrlong	#510, local10
037f0     23 39 02 F6 | 	mov	local10, local17
037f4     03 38 66 F0 | 	shl	local10, #3
037f8     F2 38 02 F1 | 	add	local10, objptr
037fc     B5 01 00 FF 
03800     8B 30 06 F6 | 	mov	local06, ##@LR__5477
03804     1C 31 62 FC | 	wrlong	local06, local10
03808     10 00 00 FF 
0380c     54 E4 05 F1 | 	add	objptr, ##8276
03810     F2 46 62 FC | 	wrlong	local17, objptr
03814     45 00 00 FF 
03818     60 E4 85 F1 | 	sub	objptr, ##35424
0381c                 | ' 
0381c                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
0381c                 | ' 
0381c                 | ' ' process the case when simple load or save is called without "". This cannot be done earlier, as tokens has to be known                                    					 
0381c                 | '  
0381c                 | ' if (lp$="load" orelse lp$="save" orelse lp$="brun" orelse lp$="run" orelse lp$="lo." orelse lp$="s." orelse lp$="br." orelse lp$="enter" orelse lp$="e.") andalso lparts(addptr+1).token=token_name andalso right$(lparts(addptr+1).part$,1)<>"$" then lparts(addptr+1).token=token_string
0381c     B5 01 00 FF 
03820     8C 14 06 F6 | 	mov	arg02, ##@LR__5478
03824     3B 13 02 F6 | 	mov	arg01, local41
03828     4C 36 B2 FD | 	call	#__system___string_cmp
0382c     00 FA 0D F2 | 	cmp	result1, #0 wz
03830     F0 00 90 AD |  if_e	jmp	#LR__0185
03834     B5 01 00 FF 
03838     91 14 06 F6 | 	mov	arg02, ##@LR__5479
0383c     3B 13 02 F6 | 	mov	arg01, local41
03840     34 36 B2 FD | 	call	#__system___string_cmp
03844     00 FA 0D F2 | 	cmp	result1, #0 wz
03848     D8 00 90 AD |  if_e	jmp	#LR__0185
0384c     B5 01 00 FF 
03850     96 30 06 F6 | 	mov	local06, ##@LR__5480
03854     3B 13 02 F6 | 	mov	arg01, local41
03858     18 15 02 F6 | 	mov	arg02, local06
0385c     18 36 B2 FD | 	call	#__system___string_cmp
03860     00 FA 0D F2 | 	cmp	result1, #0 wz
03864     BC 00 90 AD |  if_e	jmp	#LR__0185
03868     B5 01 00 FF 
0386c     9B 3C 06 F6 | 	mov	local12, ##@LR__5481
03870     1E 31 02 F6 | 	mov	local06, local12
03874     3B 13 02 F6 | 	mov	arg01, local41
03878     18 15 02 F6 | 	mov	arg02, local06
0387c     F8 35 B2 FD | 	call	#__system___string_cmp
03880     00 FA 0D F2 | 	cmp	result1, #0 wz
03884     9C 00 90 AD |  if_e	jmp	#LR__0185
03888     B5 01 00 FF 
0388c     9F 3A 06 F6 | 	mov	local11, ##@LR__5482
03890     1D 3D 02 F6 | 	mov	local12, local11
03894     3B 13 02 F6 | 	mov	arg01, local41
03898     1E 15 02 F6 | 	mov	arg02, local12
0389c     D8 35 B2 FD | 	call	#__system___string_cmp
038a0     FD 30 0A F6 | 	mov	local06, result1 wz
038a4     7C 00 90 AD |  if_e	jmp	#LR__0185
038a8     B5 01 00 FF 
038ac     A3 40 06 F6 | 	mov	local14, ##@LR__5483
038b0     20 3B 02 F6 | 	mov	local11, local14
038b4     3B 13 02 F6 | 	mov	arg01, local41
038b8     1D 15 02 F6 | 	mov	arg02, local11
038bc     B8 35 B2 FD | 	call	#__system___string_cmp
038c0     FD 3C 0A F6 | 	mov	local12, result1 wz
038c4     5C 00 90 AD |  if_e	jmp	#LR__0185
038c8     B5 01 00 FF 
038cc     A6 3E 06 F6 | 	mov	local13, ##@LR__5484
038d0     1F 41 02 F6 | 	mov	local14, local13
038d4     3B 13 02 F6 | 	mov	arg01, local41
038d8     20 15 02 F6 | 	mov	arg02, local14
038dc     98 35 B2 FD | 	call	#__system___string_cmp
038e0     FD 3A 0A F6 | 	mov	local11, result1 wz
038e4     3C 00 90 AD |  if_e	jmp	#LR__0185
038e8     B5 01 00 FF 
038ec     AA 3E 06 F6 | 	mov	local13, ##@LR__5485
038f0     3B 13 02 F6 | 	mov	arg01, local41
038f4     1F 15 02 F6 | 	mov	arg02, local13
038f8     7C 35 B2 FD | 	call	#__system___string_cmp
038fc     FD 40 0A F6 | 	mov	local14, result1 wz
03900     20 00 90 AD |  if_e	jmp	#LR__0185
03904     B5 01 00 FF 
03908     B0 50 06 F6 | 	mov	local22, ##@LR__5486
0390c     28 5D 02 F6 | 	mov	local28, local22
03910     3B 13 02 F6 | 	mov	arg01, local41
03914     2E 15 02 F6 | 	mov	arg02, local28
03918     5C 35 B2 FD | 	call	#__system___string_cmp
0391c     FD 3E 0A F6 | 	mov	local13, result1 wz
03920     CC 00 90 5D |  if_ne	jmp	#LR__0186
03924                 | LR__0185
03924     37 5D 02 F6 | 	mov	local28, local37
03928     01 5C 06 F1 | 	add	local28, #1
0392c     2E 51 02 F6 | 	mov	local22, local28
03930     28 53 02 F6 | 	mov	local23, local22
03934     03 52 66 F0 | 	shl	local23, #3
03938     35 00 00 FF 
0393c     0C E4 05 F1 | 	add	objptr, ##27148
03940     F2 54 02 F6 | 	mov	local24, objptr
03944     F2 52 02 F1 | 	add	local23, objptr
03948     04 52 06 F1 | 	add	local23, #4
0394c     29 61 02 FB | 	rdlong	local30, local23
03950     04 52 86 F1 | 	sub	local23, #4
03954     30 5F 02 F6 | 	mov	local29, local30
03958     01 00 00 FF 
0395c     04 5E 0E F2 | 	cmp	local29, ##516 wz
03960     35 00 00 FF 
03964     0C E4 85 F1 | 	sub	objptr, ##27148
03968     84 00 90 5D |  if_ne	jmp	#LR__0186
0396c     37 85 02 F6 | 	mov	local48, local37
03970     01 84 06 F1 | 	add	local48, #1
03974     03 84 66 F0 | 	shl	local48, #3
03978     35 00 00 FF 
0397c     0C E4 05 F1 | 	add	objptr, ##27148
03980     F2 86 02 F6 | 	mov	local49, objptr
03984     F2 84 02 F1 | 	add	local48, objptr
03988     42 13 02 FB | 	rdlong	arg01, local48
0398c     01 14 06 F6 | 	mov	arg02, #1
03990     35 00 00 FF 
03994     0C E4 85 F1 | 	sub	objptr, ##27148
03998     B8 55 B2 FD | 	call	#__system__Right_S
0399c     FD 12 02 F6 | 	mov	arg01, result1
039a0     B5 01 00 FF 
039a4     B3 88 06 F6 | 	mov	local50, ##@LR__5487
039a8     44 8B 02 F6 | 	mov	local51, local50
039ac     45 15 02 F6 | 	mov	arg02, local51
039b0     C4 34 B2 FD | 	call	#__system___string_cmp
039b4     FD 62 0A F6 | 	mov	local31, result1 wz
039b8     34 00 90 AD |  if_e	jmp	#LR__0186
039bc     37 39 02 F6 | 	mov	local10, local37
039c0     01 38 06 F1 | 	add	local10, #1
039c4     03 38 66 F0 | 	shl	local10, #3
039c8     35 00 00 FF 
039cc     0C E4 05 F1 | 	add	objptr, ##27148
039d0     F2 38 02 F1 | 	add	local10, objptr
039d4     01 00 00 FF 
039d8     03 30 06 F6 | 	mov	local06, ##515
039dc     04 38 06 F1 | 	add	local10, #4
039e0     01 00 80 FF 
039e4     1C 07 68 FC | 	wrlong	##515, local10
039e8     35 00 00 FF 
039ec     0C E4 85 F1 | 	sub	objptr, ##27148
039f0                 | LR__0186
039f0                 | ' if (lp$="delete" orelse lp$="mkdir") andalso lparts(addptr+1).token=token_name andalso right$(lparts(addptr+1).part$,1)<>"$" then lparts(addptr+1).token=token_string
039f0     B5 01 00 FF 
039f4     B5 14 06 F6 | 	mov	arg02, ##@LR__5488
039f8     3B 13 02 F6 | 	mov	arg01, local41
039fc     78 34 B2 FD | 	call	#__system___string_cmp
03a00     00 FA 0D F2 | 	cmp	result1, #0 wz
03a04     1C 00 90 AD |  if_e	jmp	#LR__0187
03a08     B5 01 00 FF 
03a0c     BC 2E 06 F6 | 	mov	local05, ##@LR__5489
03a10     3B 13 02 F6 | 	mov	arg01, local41
03a14     17 15 02 F6 | 	mov	arg02, local05
03a18     5C 34 B2 FD | 	call	#__system___string_cmp
03a1c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a20     CC 00 90 5D |  if_ne	jmp	#LR__0188
03a24                 | LR__0187
03a24     37 2F 02 F6 | 	mov	local05, local37
03a28     01 2E 06 F1 | 	add	local05, #1
03a2c     17 31 02 F6 | 	mov	local06, local05
03a30     03 30 66 F0 | 	shl	local06, #3
03a34     35 00 00 FF 
03a38     0C E4 05 F1 | 	add	objptr, ##27148
03a3c     F2 3C 02 F6 | 	mov	local12, objptr
03a40     F2 30 02 F1 | 	add	local06, objptr
03a44     04 30 06 F1 | 	add	local06, #4
03a48     18 41 02 FB | 	rdlong	local14, local06
03a4c     04 30 86 F1 | 	sub	local06, #4
03a50     20 3B 02 F6 | 	mov	local11, local14
03a54     01 00 00 FF 
03a58     04 3A 0E F2 | 	cmp	local11, ##516 wz
03a5c     35 00 00 FF 
03a60     0C E4 85 F1 | 	sub	objptr, ##27148
03a64     88 00 90 5D |  if_ne	jmp	#LR__0188
03a68     37 53 02 F6 | 	mov	local23, local37
03a6c     01 52 06 F1 | 	add	local23, #1
03a70     03 52 66 F0 | 	shl	local23, #3
03a74     35 00 00 FF 
03a78     0C E4 05 F1 | 	add	objptr, ##27148
03a7c     F2 54 02 F6 | 	mov	local24, objptr
03a80     F2 52 02 F1 | 	add	local23, objptr
03a84     29 13 02 FB | 	rdlong	arg01, local23
03a88     01 14 06 F6 | 	mov	arg02, #1
03a8c     35 00 00 FF 
03a90     0C E4 85 F1 | 	sub	objptr, ##27148
03a94     BC 54 B2 FD | 	call	#__system__Right_S
03a98     FD 12 02 F6 | 	mov	arg01, result1
03a9c     B5 01 00 FF 
03aa0     C2 50 06 F6 | 	mov	local22, ##@LR__5490
03aa4     28 5D 02 F6 | 	mov	local28, local22
03aa8     2E 15 02 F6 | 	mov	arg02, local28
03aac     C8 33 B2 FD | 	call	#__system___string_cmp
03ab0     FD 3E 0A F6 | 	mov	local13, result1 wz
03ab4     38 00 90 AD |  if_e	jmp	#LR__0188
03ab8     37 39 02 F6 | 	mov	local10, local37
03abc     01 38 06 F1 | 	add	local10, #1
03ac0     03 38 66 F0 | 	shl	local10, #3
03ac4     35 00 00 FF 
03ac8     0C E4 05 F1 | 	add	objptr, ##27148
03acc     F2 2E 02 F6 | 	mov	local05, objptr
03ad0     F2 38 02 F1 | 	add	local10, objptr
03ad4     01 00 00 FF 
03ad8     03 30 06 F6 | 	mov	local06, ##515
03adc     04 38 06 F1 | 	add	local10, #4
03ae0     01 00 80 FF 
03ae4     1C 07 68 FC | 	wrlong	##515, local10
03ae8     35 00 00 FF 
03aec     0C E4 85 F1 | 	sub	objptr, ##27148
03af0                 | LR__0188
03af0                 | ' if (lp$="copy") andalso lparts(addptr+1).token=token_name andalso right$(lparts(addptr+1).part$,1)<>"$" then lparts(addptr+1).token=token_string
03af0     B5 01 00 FF 
03af4     C4 14 06 F6 | 	mov	arg02, ##@LR__5491
03af8     3B 13 02 F6 | 	mov	arg01, local41
03afc     78 33 B2 FD | 	call	#__system___string_cmp
03b00     00 FA 0D F2 | 	cmp	result1, #0 wz
03b04     C8 00 90 5D |  if_ne	jmp	#LR__0189
03b08     37 2F 02 F6 | 	mov	local05, local37
03b0c     01 2E 06 F1 | 	add	local05, #1
03b10     03 2E 66 F0 | 	shl	local05, #3
03b14     35 00 00 FF 
03b18     0C E4 05 F1 | 	add	objptr, ##27148
03b1c     F2 30 02 F6 | 	mov	local06, objptr
03b20     F2 2E 02 F1 | 	add	local05, objptr
03b24     04 2E 06 F1 | 	add	local05, #4
03b28     17 3B 02 FB | 	rdlong	local11, local05
03b2c     04 2E 86 F1 | 	sub	local05, #4
03b30     1D 3D 02 F6 | 	mov	local12, local11
03b34     01 00 00 FF 
03b38     04 3C 0E F2 | 	cmp	local12, ##516 wz
03b3c     35 00 00 FF 
03b40     0C E4 85 F1 | 	sub	objptr, ##27148
03b44     88 00 90 5D |  if_ne	jmp	#LR__0189
03b48     37 51 02 F6 | 	mov	local22, local37
03b4c     01 50 06 F1 | 	add	local22, #1
03b50     03 50 66 F0 | 	shl	local22, #3
03b54     35 00 00 FF 
03b58     0C E4 05 F1 | 	add	objptr, ##27148
03b5c     F2 52 02 F6 | 	mov	local23, objptr
03b60     F2 50 02 F1 | 	add	local22, objptr
03b64     28 13 02 FB | 	rdlong	arg01, local22
03b68     01 14 06 F6 | 	mov	arg02, #1
03b6c     35 00 00 FF 
03b70     0C E4 85 F1 | 	sub	objptr, ##27148
03b74     DC 53 B2 FD | 	call	#__system__Right_S
03b78     FD 12 02 F6 | 	mov	arg01, result1
03b7c     B5 01 00 FF 
03b80     C9 5C 06 F6 | 	mov	local28, ##@LR__5492
03b84     2E 3F 02 F6 | 	mov	local13, local28
03b88     1F 15 02 F6 | 	mov	arg02, local13
03b8c     E8 32 B2 FD | 	call	#__system___string_cmp
03b90     FD 40 0A F6 | 	mov	local14, result1 wz
03b94     38 00 90 AD |  if_e	jmp	#LR__0189
03b98     37 39 02 F6 | 	mov	local10, local37
03b9c     01 38 06 F1 | 	add	local10, #1
03ba0     03 38 66 F0 | 	shl	local10, #3
03ba4     35 00 00 FF 
03ba8     0C E4 05 F1 | 	add	objptr, ##27148
03bac     F2 2E 02 F6 | 	mov	local05, objptr
03bb0     F2 38 02 F1 | 	add	local10, objptr
03bb4     01 00 00 FF 
03bb8     03 30 06 F6 | 	mov	local06, ##515
03bbc     04 38 06 F1 | 	add	local10, #4
03bc0     01 00 80 FF 
03bc4     1C 07 68 FC | 	wrlong	##515, local10
03bc8     35 00 00 FF 
03bcc     0C E4 85 F1 | 	sub	objptr, ##27148
03bd0                 | LR__0189
03bd0                 | ' if (lp$="copy") andalso lparts(addptr+3).token=token_name andalso right$(lparts(addptr+3).part$,1)<>"$" then lparts(addptr+3).token=token_string
03bd0     B5 01 00 FF 
03bd4     CB 14 06 F6 | 	mov	arg02, ##@LR__5493
03bd8     3B 13 02 F6 | 	mov	arg01, local41
03bdc     98 32 B2 FD | 	call	#__system___string_cmp
03be0     00 FA 0D F2 | 	cmp	result1, #0 wz
03be4     C8 00 90 5D |  if_ne	jmp	#LR__0190
03be8     37 2F 02 F6 | 	mov	local05, local37
03bec     03 2E 06 F1 | 	add	local05, #3
03bf0     03 2E 66 F0 | 	shl	local05, #3
03bf4     35 00 00 FF 
03bf8     0C E4 05 F1 | 	add	objptr, ##27148
03bfc     F2 30 02 F6 | 	mov	local06, objptr
03c00     F2 2E 02 F1 | 	add	local05, objptr
03c04     04 2E 06 F1 | 	add	local05, #4
03c08     17 3B 02 FB | 	rdlong	local11, local05
03c0c     04 2E 86 F1 | 	sub	local05, #4
03c10     1D 3D 02 F6 | 	mov	local12, local11
03c14     01 00 00 FF 
03c18     04 3C 0E F2 | 	cmp	local12, ##516 wz
03c1c     35 00 00 FF 
03c20     0C E4 85 F1 | 	sub	objptr, ##27148
03c24     88 00 90 5D |  if_ne	jmp	#LR__0190
03c28     37 51 02 F6 | 	mov	local22, local37
03c2c     03 50 06 F1 | 	add	local22, #3
03c30     03 50 66 F0 | 	shl	local22, #3
03c34     35 00 00 FF 
03c38     0C E4 05 F1 | 	add	objptr, ##27148
03c3c     F2 52 02 F6 | 	mov	local23, objptr
03c40     F2 50 02 F1 | 	add	local22, objptr
03c44     28 13 02 FB | 	rdlong	arg01, local22
03c48     01 14 06 F6 | 	mov	arg02, #1
03c4c     35 00 00 FF 
03c50     0C E4 85 F1 | 	sub	objptr, ##27148
03c54     FC 52 B2 FD | 	call	#__system__Right_S
03c58     FD 12 02 F6 | 	mov	arg01, result1
03c5c     B5 01 00 FF 
03c60     D0 5C 06 F6 | 	mov	local28, ##@LR__5494
03c64     2E 3F 02 F6 | 	mov	local13, local28
03c68     1F 15 02 F6 | 	mov	arg02, local13
03c6c     08 32 B2 FD | 	call	#__system___string_cmp
03c70     FD 40 0A F6 | 	mov	local14, result1 wz
03c74     38 00 90 AD |  if_e	jmp	#LR__0190
03c78     37 39 02 F6 | 	mov	local10, local37
03c7c     03 38 06 F1 | 	add	local10, #3
03c80     03 38 66 F0 | 	shl	local10, #3
03c84     35 00 00 FF 
03c88     0C E4 05 F1 | 	add	objptr, ##27148
03c8c     F2 2E 02 F6 | 	mov	local05, objptr
03c90     F2 38 02 F1 | 	add	local10, objptr
03c94     01 00 00 FF 
03c98     03 30 06 F6 | 	mov	local06, ##515
03c9c     04 38 06 F1 | 	add	local10, #4
03ca0     01 00 80 FF 
03ca4     1C 07 68 FC | 	wrlong	##515, local10
03ca8     35 00 00 FF 
03cac     0C E4 85 F1 | 	sub	objptr, ##27148
03cb0                 | LR__0190
03cb0                 | ' 
03cb0                 | ' ' cd needs special treatment..
03cb0                 | ' 
03cb0                 | ' if lp$="cd" then lparts(addptr+1).token=token_string
03cb0     B5 01 00 FF 
03cb4     D2 14 06 F6 | 	mov	arg02, ##@LR__5495
03cb8     3B 13 02 F6 | 	mov	arg01, local41
03cbc     B8 31 B2 FD | 	call	#__system___string_cmp
03cc0     00 FA 0D F2 | 	cmp	result1, #0 wz
03cc4     38 00 90 5D |  if_ne	jmp	#LR__0191
03cc8     37 39 02 F6 | 	mov	local10, local37
03ccc     01 38 06 F1 | 	add	local10, #1
03cd0     03 38 66 F0 | 	shl	local10, #3
03cd4     35 00 00 FF 
03cd8     0C E4 05 F1 | 	add	objptr, ##27148
03cdc     F2 2E 02 F6 | 	mov	local05, objptr
03ce0     F2 38 02 F1 | 	add	local10, objptr
03ce4     01 00 00 FF 
03ce8     03 30 06 F6 | 	mov	local06, ##515
03cec     04 38 06 F1 | 	add	local10, #4
03cf0     01 00 80 FF 
03cf4     1C 07 68 FC | 	wrlong	##515, local10
03cf8     35 00 00 FF 
03cfc     0C E4 85 F1 | 	sub	objptr, ##27148
03d00                 | LR__0191
03d00                 | ' if lp$="cd." andalso lparts(addptr+1).part$="." then lparts(addptr+1).token=token_string : lparts(addptr+1).part$=".." : lparts(addptr).token=token_cd
03d00     B5 01 00 FF 
03d04     D5 14 06 F6 | 	mov	arg02, ##@LR__5496
03d08     3B 13 02 F6 | 	mov	arg01, local41
03d0c     68 31 B2 FD | 	call	#__system___string_cmp
03d10     00 FA 0D F2 | 	cmp	result1, #0 wz
03d14     A4 00 90 5D |  if_ne	jmp	#LR__0192
03d18     37 31 02 F6 | 	mov	local06, local37
03d1c     01 30 06 F1 | 	add	local06, #1
03d20     03 30 66 F0 | 	shl	local06, #3
03d24     35 00 00 FF 
03d28     0C E4 05 F1 | 	add	objptr, ##27148
03d2c     F2 3C 02 F6 | 	mov	local12, objptr
03d30     F2 30 02 F1 | 	add	local06, objptr
03d34     18 13 02 FB | 	rdlong	arg01, local06
03d38     B5 01 00 FF 
03d3c     D9 2E 06 F6 | 	mov	local05, ##@LR__5497
03d40     17 15 02 F6 | 	mov	arg02, local05
03d44     35 00 00 FF 
03d48     0C E4 85 F1 | 	sub	objptr, ##27148
03d4c     28 31 B2 FD | 	call	#__system___string_cmp
03d50     00 FA 0D F2 | 	cmp	result1, #0 wz
03d54     64 00 90 5D |  if_ne	jmp	#LR__0192
03d58     37 39 02 F6 | 	mov	local10, local37
03d5c     01 38 06 F1 | 	add	local10, #1
03d60     03 38 66 F0 | 	shl	local10, #3
03d64     35 00 00 FF 
03d68     0C E4 05 F1 | 	add	objptr, ##27148
03d6c     F2 38 02 F1 | 	add	local10, objptr
03d70     04 38 06 F1 | 	add	local10, #4
03d74     01 00 80 FF 
03d78     1C 07 68 FC | 	wrlong	##515, local10
03d7c     37 39 02 F6 | 	mov	local10, local37
03d80     01 38 06 F1 | 	add	local10, #1
03d84     03 38 66 F0 | 	shl	local10, #3
03d88     F2 38 02 F1 | 	add	local10, objptr
03d8c     B5 01 00 FF 
03d90     DB 30 06 F6 | 	mov	local06, ##@LR__5498
03d94     1C 31 62 FC | 	wrlong	local06, local10
03d98     37 39 02 F6 | 	mov	local10, local37
03d9c     03 38 66 F0 | 	shl	local10, #3
03da0     F2 2E 02 F6 | 	mov	local05, objptr
03da4     F2 38 02 F1 | 	add	local10, objptr
03da8     C3 30 06 F6 | 	mov	local06, #195
03dac     04 38 06 F1 | 	add	local10, #4
03db0     1C 87 69 FC | 	wrlong	#195, local10
03db4     35 00 00 FF 
03db8     0C E4 85 F1 | 	sub	objptr, ##27148
03dbc                 | LR__0192
03dbc                 | ' if lp$="cd" andalso lparts(addptr+1).part$="/" then lparts(addptr+1).token=token_string : for i=(addptr+2) to k: lparts(addptr+1).part$+=lparts(i).part$ : next i
03dbc     B5 01 00 FF 
03dc0     DE 38 06 F6 | 	mov	local10, ##@LR__5499
03dc4     3B 13 02 F6 | 	mov	arg01, local41
03dc8     1C 15 02 F6 | 	mov	arg02, local10
03dcc     A8 30 B2 FD | 	call	#__system___string_cmp
03dd0     00 FA 0D F2 | 	cmp	result1, #0 wz
03dd4     04 01 90 5D |  if_ne	jmp	#LR__0195
03dd8     37 31 02 F6 | 	mov	local06, local37
03ddc     01 30 06 F1 | 	add	local06, #1
03de0     03 30 66 F0 | 	shl	local06, #3
03de4     35 00 00 FF 
03de8     0C E4 05 F1 | 	add	objptr, ##27148
03dec     F2 3C 02 F6 | 	mov	local12, objptr
03df0     F2 30 02 F1 | 	add	local06, objptr
03df4     18 13 02 FB | 	rdlong	arg01, local06
03df8     B5 01 00 FF 
03dfc     E1 2E 06 F6 | 	mov	local05, ##@LR__5500
03e00     17 39 02 F6 | 	mov	local10, local05
03e04     1C 15 02 F6 | 	mov	arg02, local10
03e08     35 00 00 FF 
03e0c     0C E4 85 F1 | 	sub	objptr, ##27148
03e10     64 30 B2 FD | 	call	#__system___string_cmp
03e14     00 FA 0D F2 | 	cmp	result1, #0 wz
03e18     C0 00 90 5D |  if_ne	jmp	#LR__0195
03e1c     37 39 02 F6 | 	mov	local10, local37
03e20     01 38 06 F1 | 	add	local10, #1
03e24     03 38 66 F0 | 	shl	local10, #3
03e28     35 00 00 FF 
03e2c     0C E4 05 F1 | 	add	objptr, ##27148
03e30     F2 2E 02 F6 | 	mov	local05, objptr
03e34     F2 38 02 F1 | 	add	local10, objptr
03e38     01 00 00 FF 
03e3c     03 30 06 F6 | 	mov	local06, ##515
03e40     04 38 06 F1 | 	add	local10, #4
03e44     01 00 80 FF 
03e48     1C 07 68 FC | 	wrlong	##515, local10
03e4c     04 38 86 F1 | 	sub	local10, #4
03e50     37 29 02 F6 | 	mov	local02, local37
03e54     02 28 06 F1 | 	add	local02, #2
03e58     23 8D 02 F6 | 	mov	local52, local17
03e5c     01 8C 06 F1 | 	add	local52, #1
03e60     35 00 00 FF 
03e64     0C E4 85 F1 | 	sub	objptr, ##27148
03e68                 | LR__0193
03e68     46 29 52 F2 | 	cmps	local02, local52 wc
03e6c     6C 00 90 3D |  if_ae	jmp	#LR__0194
03e70     14 39 02 F6 | 	mov	local10, local02
03e74     03 38 66 F0 | 	shl	local10, #3
03e78     35 00 00 FF 
03e7c     0C E4 05 F1 | 	add	objptr, ##27148
03e80     F2 38 02 F1 | 	add	local10, objptr
03e84     1C 8F 02 FB | 	rdlong	local53, local10
03e88     37 39 02 F6 | 	mov	local10, local37
03e8c     01 38 06 F1 | 	add	local10, #1
03e90     03 38 66 F0 | 	shl	local10, #3
03e94     F2 2E 02 F6 | 	mov	local05, objptr
03e98     F2 38 02 F1 | 	add	local10, objptr
03e9c     37 3B 02 F6 | 	mov	local11, local37
03ea0     01 3A 06 F1 | 	add	local11, #1
03ea4     1D 41 02 F6 | 	mov	local14, local11
03ea8     03 40 66 F0 | 	shl	local14, #3
03eac     F2 3E 02 F6 | 	mov	local13, objptr
03eb0     F2 40 02 F1 | 	add	local14, objptr
03eb4     20 13 02 FB | 	rdlong	arg01, local14
03eb8     47 3D 02 F6 | 	mov	local12, local53
03ebc     1E 15 02 F6 | 	mov	arg02, local12
03ec0     35 00 00 FF 
03ec4     0C E4 85 F1 | 	sub	objptr, ##27148
03ec8     E0 2F B2 FD | 	call	#__system___string_concat
03ecc     FD 30 02 F6 | 	mov	local06, result1
03ed0     1C 31 62 FC | 	wrlong	local06, local10
03ed4     01 28 06 F1 | 	add	local02, #1
03ed8     8C FF 9F FD | 	jmp	#LR__0193
03edc                 | LR__0194
03edc                 | LR__0195
03edc                 | ' 
03edc                 | ' ' determine a type of the line and compile it
03edc                 | ' 
03edc                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
03edc     35 00 00 FF 
03ee0     0C E4 05 F1 | 	add	objptr, ##27148
03ee4     F2 12 02 FB | 	rdlong	arg01, objptr
03ee8     35 00 00 FF 
03eec     0C E4 85 F1 | 	sub	objptr, ##27148
03ef0     48 30 B0 FD | 	call	#_isdec
03ef4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ef8     30 00 90 AD |  if_e	jmp	#LR__0196
03efc     35 00 00 FF 
03f00     0C E4 05 F1 | 	add	objptr, ##27148
03f04     F2 12 02 FB | 	rdlong	arg01, objptr
03f08     35 00 00 FF 
03f0c     0C E4 85 F1 | 	sub	objptr, ##27148
03f10     00 14 06 F6 | 	mov	arg02, #0
03f14     28 64 B2 FD | 	call	#__system____builtin_atoi
03f18     52 00 00 FF 
03f1c     B0 E4 05 F1 | 	add	objptr, ##42160
03f20     F2 FA 61 FC | 	wrlong	result1, objptr
03f24     52 00 00 FF 
03f28     B0 E4 85 F1 | 	sub	objptr, ##42160
03f2c                 | LR__0196
03f2c                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104   ' this was an empty numbered line, delete it
03f2c     52 00 00 FF 
03f30     B0 E4 05 F1 | 	add	objptr, ##42160
03f34     F2 2C 02 FB | 	rdlong	local04, objptr
03f38     52 00 00 FF 
03f3c     B0 E4 85 F1 | 	sub	objptr, ##42160
03f40     01 2C 16 F2 | 	cmp	local04, #1 wc
03f44     40 00 90 CD |  if_b	jmp	#LR__0197
03f48     01 46 0E F2 | 	cmp	local17, #1 wz
03f4c     37 00 00 AF 
03f50     24 E4 05 A1 |  if_e	add	objptr, ##28196
03f54     F2 2E 02 AB |  if_e	rdlong	local05, objptr
03f58     37 00 00 AF 
03f5c     24 E4 85 A1 |  if_e	sub	objptr, ##28196
03f60     17 39 02 A6 |  if_e	mov	local10, local05
03f64     03 38 0E A2 |  if_e	cmp	local10, #3 wz
03f68     1C 00 90 5D |  if_ne	jmp	#LR__0197
03f6c     52 00 00 FF 
03f70     B0 E4 05 F1 | 	add	objptr, ##42160
03f74     F2 12 02 FB | 	rdlong	arg01, objptr
03f78     52 00 00 FF 
03f7c     B0 E4 85 F1 | 	sub	objptr, ##42160
03f80     64 31 B0 FD | 	call	#_deleteline
03f84     C8 03 90 FD | 	jmp	#LR__0208
03f88                 | LR__0197
03f88                 | ' 
03f88                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  		' first part, commans
03f88     37 00 00 FF 
03f8c     24 E4 05 F1 | 	add	objptr, ##28196
03f90     F2 2C 0A FB | 	rdlong	local04, objptr wz
03f94     37 00 00 FF 
03f98     24 E4 85 F1 | 	sub	objptr, ##28196
03f9c     20 00 90 AD |  if_e	jmp	#LR__0198
03fa0     37 00 00 FF 
03fa4     24 E4 05 F1 | 	add	objptr, ##28196
03fa8     F2 2E 02 FB | 	rdlong	local05, objptr
03fac     37 00 00 FF 
03fb0     24 E4 85 F1 | 	sub	objptr, ##28196
03fb4     17 39 02 F6 | 	mov	local10, local05
03fb8     03 38 0E F2 | 	cmp	local10, #3 wz
03fbc     C0 00 90 5D |  if_ne	jmp	#LR__0200
03fc0                 | LR__0198
03fc0     35 00 00 FF 
03fc4     20 E4 05 F1 | 	add	objptr, ##27168
03fc8     F2 3C 02 FB | 	rdlong	local12, objptr
03fcc     35 00 00 FF 
03fd0     20 E4 85 F1 | 	sub	objptr, ##27168
03fd4     1B 3C 0E F2 | 	cmp	local12, #27 wz
03fd8     A4 00 90 AD |  if_e	jmp	#LR__0200
03fdc     52 00 00 FF 
03fe0     B0 E4 05 F1 | 	add	objptr, ##42160
03fe4     F2 12 02 FB | 	rdlong	arg01, objptr
03fe8     1B 00 00 FF 
03fec     8C E4 85 F1 | 	sub	objptr, ##13964
03ff0     F2 16 02 FB | 	rdlong	arg03, objptr
03ff4     37 00 00 FF 
03ff8     24 E4 85 F1 | 	sub	objptr, ##28196
03ffc     00 14 06 F6 | 	mov	arg02, #0
04000     5C 45 B0 FD | 	call	#_compile
04004     FD 26 0A F6 | 	mov	local01, result1 wz
04008                 | '   err=compile(linenum,0,cont) 
04008                 | '   if err<>0 then printerror(err,linenum): goto 101
04008     20 00 90 AD |  if_e	jmp	#LR__0199
0400c     52 00 00 FF 
04010     B0 E4 05 F1 | 	add	objptr, ##42160
04014     F2 14 02 FB | 	rdlong	arg02, objptr
04018     52 00 00 FF 
0401c     B0 E4 85 F1 | 	sub	objptr, ##42160
04020     13 13 02 F6 | 	mov	arg01, local01
04024     0C F4 B1 FD | 	call	#_printerror
04028     44 03 90 FD | 	jmp	#LR__0209
0402c                 | LR__0199
0402c                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
0402c     52 00 00 FF 
04030     F4 E4 05 F1 | 	add	objptr, ##42228
04034     F2 12 02 FB | 	rdlong	arg01, objptr
04038     52 00 00 FF 
0403c     F4 E4 85 F1 | 	sub	objptr, ##42228
04040     B5 01 00 FF 
04044     E3 14 06 F6 | 	mov	arg02, ##@LR__5501
04048     2C 2E B2 FD | 	call	#__system___string_cmp
0404c     00 FA 0D F2 | 	cmp	result1, #0 wz
04050     FC 02 90 AD |  if_e	jmp	#LR__0208
04054     52 00 00 FF 
04058     F4 E4 05 F1 | 	add	objptr, ##42228
0405c     F2 2C 02 FB | 	rdlong	local04, objptr
04060     1B 00 00 FF 
04064     D8 E4 85 F1 | 	sub	objptr, ##14040
04068     F2 2C 62 FC | 	wrlong	local04, objptr
0406c     08 E4 05 F1 | 	add	objptr, #8
04070     F2 08 68 FC | 	wrlong	#4, objptr
04074     37 00 00 FF 
04078     24 E4 85 F1 | 	sub	objptr, ##28196
0407c     14 D8 9F FD | 	jmp	#LR__0070
04080                 | LR__0200
04080                 | '       							
04080                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 		' not a first part, command
04080     37 00 00 FF 
04084     24 E4 05 F1 | 	add	objptr, ##28196
04088     F2 2C 02 FB | 	rdlong	local04, objptr
0408c     37 00 00 FF 
04090     24 E4 85 F1 | 	sub	objptr, ##28196
04094     01 2C 0E F2 | 	cmp	local04, #1 wz
04098     37 00 00 5F 
0409c     24 E4 05 51 |  if_ne	add	objptr, ##28196
040a0     F2 38 02 5B |  if_ne	rdlong	local10, objptr
040a4     37 00 00 5F 
040a8     24 E4 85 51 |  if_ne	sub	objptr, ##28196
040ac     02 38 0E 52 |  if_ne	cmp	local10, #2 wz
040b0     C0 00 90 5D |  if_ne	jmp	#LR__0202
040b4     35 00 00 FF 
040b8     18 E4 05 F1 | 	add	objptr, ##27160
040bc     F2 3C 02 FB | 	rdlong	local12, objptr
040c0     35 00 00 FF 
040c4     18 E4 85 F1 | 	sub	objptr, ##27160
040c8     1B 3C 0E F2 | 	cmp	local12, #27 wz
040cc     A4 00 90 AD |  if_e	jmp	#LR__0202
040d0     52 00 00 FF 
040d4     B0 E4 05 F1 | 	add	objptr, ##42160
040d8     F2 12 02 FB | 	rdlong	arg01, objptr
040dc     1B 00 00 FF 
040e0     8C E4 85 F1 | 	sub	objptr, ##13964
040e4     F2 16 02 FB | 	rdlong	arg03, objptr
040e8     37 00 00 FF 
040ec     24 E4 85 F1 | 	sub	objptr, ##28196
040f0     00 14 06 F6 | 	mov	arg02, #0
040f4     68 44 B0 FD | 	call	#_compile
040f8     FD 26 0A F6 | 	mov	local01, result1 wz
040fc                 | '   err=compile(linenum,0,cont) 
040fc                 | '   if err<>0 then printerror(err,linenum): goto 101
040fc     20 00 90 AD |  if_e	jmp	#LR__0201
04100     52 00 00 FF 
04104     B0 E4 05 F1 | 	add	objptr, ##42160
04108     F2 14 02 FB | 	rdlong	arg02, objptr
0410c     52 00 00 FF 
04110     B0 E4 85 F1 | 	sub	objptr, ##42160
04114     13 13 02 F6 | 	mov	arg01, local01
04118     18 F3 B1 FD | 	call	#_printerror
0411c     50 02 90 FD | 	jmp	#LR__0209
04120                 | LR__0201
04120                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
04120     52 00 00 FF 
04124     F4 E4 05 F1 | 	add	objptr, ##42228
04128     F2 12 02 FB | 	rdlong	arg01, objptr
0412c     52 00 00 FF 
04130     F4 E4 85 F1 | 	sub	objptr, ##42228
04134     B5 01 00 FF 
04138     E4 14 06 F6 | 	mov	arg02, ##@LR__5502
0413c     38 2D B2 FD | 	call	#__system___string_cmp
04140     00 FA 0D F2 | 	cmp	result1, #0 wz
04144     08 02 90 AD |  if_e	jmp	#LR__0208
04148     52 00 00 FF 
0414c     F4 E4 05 F1 | 	add	objptr, ##42228
04150     F2 2C 02 FB | 	rdlong	local04, objptr
04154     1B 00 00 FF 
04158     D8 E4 85 F1 | 	sub	objptr, ##14040
0415c     F2 2C 62 FC | 	wrlong	local04, objptr
04160     08 E4 05 F1 | 	add	objptr, #8
04164     F2 08 68 FC | 	wrlong	#4, objptr
04168     37 00 00 FF 
0416c     24 E4 85 F1 | 	sub	objptr, ##28196
04170     20 D7 9F FD | 	jmp	#LR__0070
04174                 | LR__0202
04174                 | ' 							 
04174                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  		' first part, assign
04174     37 00 00 FF 
04178     24 E4 05 F1 | 	add	objptr, ##28196
0417c     F2 2C 0A FB | 	rdlong	local04, objptr wz
04180     37 00 00 FF 
04184     24 E4 85 F1 | 	sub	objptr, ##28196
04188     37 00 00 5F 
0418c     24 E4 05 51 |  if_ne	add	objptr, ##28196
04190     F2 38 02 5B |  if_ne	rdlong	local10, objptr
04194     37 00 00 5F 
04198     24 E4 85 51 |  if_ne	sub	objptr, ##28196
0419c     03 38 0E 52 |  if_ne	cmp	local10, #3 wz
041a0     35 00 00 AF 
041a4     20 E4 05 A1 |  if_e	add	objptr, ##27168
041a8     F2 3C 02 AB |  if_e	rdlong	local12, objptr
041ac     35 00 00 AF 
041b0     20 E4 85 A1 |  if_e	sub	objptr, ##27168
041b4     1B 3C 0E A2 |  if_e	cmp	local12, #27 wz
041b8     A4 00 90 5D |  if_ne	jmp	#LR__0204
041bc     52 00 00 FF 
041c0     B0 E4 05 F1 | 	add	objptr, ##42160
041c4     F2 12 02 FB | 	rdlong	arg01, objptr
041c8     1B 00 00 FF 
041cc     8C E4 85 F1 | 	sub	objptr, ##13964
041d0     F2 16 02 FB | 	rdlong	arg03, objptr
041d4     37 00 00 FF 
041d8     24 E4 85 F1 | 	sub	objptr, ##28196
041dc     00 14 06 F6 | 	mov	arg02, #0
041e0     44 44 B0 FD | 	call	#_compile_assign
041e4     FD 26 0A F6 | 	mov	local01, result1 wz
041e8                 | '   err=compile_assign(linenum,0,cont)
041e8                 | '   if err<>0 then printerror(err,linenum): goto 101
041e8     20 00 90 AD |  if_e	jmp	#LR__0203
041ec     52 00 00 FF 
041f0     B0 E4 05 F1 | 	add	objptr, ##42160
041f4     F2 14 02 FB | 	rdlong	arg02, objptr
041f8     52 00 00 FF 
041fc     B0 E4 85 F1 | 	sub	objptr, ##42160
04200     13 13 02 F6 | 	mov	arg01, local01
04204     2C F2 B1 FD | 	call	#_printerror
04208     64 01 90 FD | 	jmp	#LR__0209
0420c                 | LR__0203
0420c                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
0420c     52 00 00 FF 
04210     F4 E4 05 F1 | 	add	objptr, ##42228
04214     F2 12 02 FB | 	rdlong	arg01, objptr
04218     52 00 00 FF 
0421c     F4 E4 85 F1 | 	sub	objptr, ##42228
04220     B5 01 00 FF 
04224     E5 14 06 F6 | 	mov	arg02, ##@LR__5503
04228     4C 2C B2 FD | 	call	#__system___string_cmp
0422c     00 FA 0D F2 | 	cmp	result1, #0 wz
04230     1C 01 90 AD |  if_e	jmp	#LR__0208
04234     52 00 00 FF 
04238     F4 E4 05 F1 | 	add	objptr, ##42228
0423c     F2 2C 02 FB | 	rdlong	local04, objptr
04240     1B 00 00 FF 
04244     D8 E4 85 F1 | 	sub	objptr, ##14040
04248     F2 2C 62 FC | 	wrlong	local04, objptr
0424c     08 E4 05 F1 | 	add	objptr, #8
04250     F2 08 68 FC | 	wrlong	#4, objptr
04254     37 00 00 FF 
04258     24 E4 85 F1 | 	sub	objptr, ##28196
0425c     34 D6 9F FD | 	jmp	#LR__0070
04260                 | LR__0204
04260                 | '     							 
04260                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 		' not a first part, assign
04260     37 00 00 FF 
04264     24 E4 05 F1 | 	add	objptr, ##28196
04268     F2 2C 02 FB | 	rdlong	local04, objptr
0426c     37 00 00 FF 
04270     24 E4 85 F1 | 	sub	objptr, ##28196
04274     01 2C 0E F2 | 	cmp	local04, #1 wz
04278     37 00 00 5F 
0427c     24 E4 05 51 |  if_ne	add	objptr, ##28196
04280     F2 38 02 5B |  if_ne	rdlong	local10, objptr
04284     37 00 00 5F 
04288     24 E4 85 51 |  if_ne	sub	objptr, ##28196
0428c     02 38 0E 52 |  if_ne	cmp	local10, #2 wz
04290     35 00 00 AF 
04294     18 E4 05 A1 |  if_e	add	objptr, ##27160
04298     F2 3C 02 AB |  if_e	rdlong	local12, objptr
0429c     35 00 00 AF 
042a0     18 E4 85 A1 |  if_e	sub	objptr, ##27160
042a4     1B 3C 0E A2 |  if_e	cmp	local12, #27 wz
042a8     A4 00 90 5D |  if_ne	jmp	#LR__0207
042ac     52 00 00 FF 
042b0     B0 E4 05 F1 | 	add	objptr, ##42160
042b4     F2 12 02 FB | 	rdlong	arg01, objptr
042b8     1B 00 00 FF 
042bc     8C E4 85 F1 | 	sub	objptr, ##13964
042c0     F2 16 02 FB | 	rdlong	arg03, objptr
042c4     37 00 00 FF 
042c8     24 E4 85 F1 | 	sub	objptr, ##28196
042cc     00 14 06 F6 | 	mov	arg02, #0
042d0     54 43 B0 FD | 	call	#_compile_assign
042d4     FD 26 0A F6 | 	mov	local01, result1 wz
042d8                 | '   err=compile_assign(linenum,0,cont) 
042d8                 | '   if err<>0 then printerror(err,linenum): goto 101
042d8     20 00 90 AD |  if_e	jmp	#LR__0205
042dc     52 00 00 FF 
042e0     B0 E4 05 F1 | 	add	objptr, ##42160
042e4     F2 14 02 FB | 	rdlong	arg02, objptr
042e8     52 00 00 FF 
042ec     B0 E4 85 F1 | 	sub	objptr, ##42160
042f0     13 13 02 F6 | 	mov	arg01, local01
042f4     3C F1 B1 FD | 	call	#_printerror
042f8     74 00 90 FD | 	jmp	#LR__0209
042fc                 | LR__0205
042fc                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								 
042fc     52 00 00 FF 
04300     F4 E4 05 F1 | 	add	objptr, ##42228
04304     F2 12 02 FB | 	rdlong	arg01, objptr
04308     52 00 00 FF 
0430c     F4 E4 85 F1 | 	sub	objptr, ##42228
04310     B5 01 00 FF 
04314     E6 14 06 F6 | 	mov	arg02, ##@LR__5504
04318     5C 2B B2 FD | 	call	#__system___string_cmp
0431c     00 FA 4D F2 | 	cmps	result1, #0 wz
04320     2C 00 90 AD |  if_e	jmp	#LR__0206
04324     52 00 00 FF 
04328     F4 E4 05 F1 | 	add	objptr, ##42228
0432c     F2 2C 02 FB | 	rdlong	local04, objptr
04330     1B 00 00 FF 
04334     D8 E4 85 F1 | 	sub	objptr, ##14040
04338     F2 2C 62 FC | 	wrlong	local04, objptr
0433c     08 E4 05 F1 | 	add	objptr, #8
04340     F2 08 68 FC | 	wrlong	#4, objptr
04344     37 00 00 FF 
04348     24 E4 85 F1 | 	sub	objptr, ##28196
0434c     44 D5 9F FD | 	jmp	#LR__0070
04350                 | LR__0206
04350                 | LR__0207
04350                 | LR__0208
04350                 | ' 
04350                 | ' 104 if linenum=0 then 								' line 0 is for immediate execution
04350     52 00 00 FF 
04354     B0 E4 05 F1 | 	add	objptr, ##42160
04358     F2 2C 0A FB | 	rdlong	local04, objptr wz
0435c     52 00 00 FF 
04360     B0 E4 85 F1 | 	sub	objptr, ##42160
04364     B0 00 90 5D |  if_ne	jmp	#LR__0212
04368     02 12 06 F6 | 	mov	arg01, #2
0436c     CC 91 B0 FD | 	call	#_execute_line
04370                 | LR__0209
04370                 | '   execute_line(2)
04370                 | ' 101 if inload=0 then v.writeln("") : v.writeln("Ready") 
04370     52 00 00 FF 
04374     D4 E4 05 F1 | 	add	objptr, ##42196
04378     F2 2C 0A FB | 	rdlong	local04, objptr wz
0437c     52 00 00 FF 
04380     D4 E4 85 F1 | 	sub	objptr, ##42196
04384     20 00 90 5D |  if_ne	jmp	#LR__0210
04388     B5 01 00 FF 
0438c     E7 12 06 F6 | 	mov	arg01, ##@LR__5505
04390                 | ' 
04390                 | ' write(text)
04390     F8 11 B2 FD | 	call	#_hg010b_spin2_write
04394                 | ' crlf
04394     F4 16 B2 FD | 	call	#_hg010b_spin2_crlf
04398     B5 01 00 FF 
0439c     E8 12 06 F6 | 	mov	arg01, ##@LR__5506
043a0                 | ' 
043a0                 | ' write(text)
043a0     E8 11 B2 FD | 	call	#_hg010b_spin2_write
043a4                 | ' crlf
043a4     E4 16 B2 FD | 	call	#_hg010b_spin2_crlf
043a8                 | LR__0210
043a8                 | '     if inload=1 andalso err>0 then print fullline$
043a8     52 00 00 FF 
043ac     D4 E4 05 F1 | 	add	objptr, ##42196
043b0     F2 2C 02 FB | 	rdlong	local04, objptr
043b4     52 00 00 FF 
043b8     D4 E4 85 F1 | 	sub	objptr, ##42196
043bc     01 2C 0E F2 | 	cmp	local04, #1 wz
043c0     54 00 90 5D |  if_ne	jmp	#LR__0211
043c4     01 26 56 F2 | 	cmps	local01, #1 wc
043c8     4C 00 90 CD |  if_b	jmp	#LR__0211
043cc     00 12 06 F6 | 	mov	arg01, #0
043d0     A4 87 B2 FD | 	call	#__system___getiolock_0611
043d4     FD 12 02 F6 | 	mov	arg01, result1
043d8     74 2A B2 FD | 	call	#__system___lockmem
043dc     37 00 00 FF 
043e0     20 E4 05 F1 | 	add	objptr, ##28192
043e4     F2 14 02 FB | 	rdlong	arg02, objptr
043e8     37 00 00 FF 
043ec     20 E4 85 F1 | 	sub	objptr, ##28192
043f0     00 12 06 F6 | 	mov	arg01, #0
043f4     00 16 06 F6 | 	mov	arg03, #0
043f8     48 37 B2 FD | 	call	#__system___basic_print_string
043fc     00 12 06 F6 | 	mov	arg01, #0
04400     0A 14 06 F6 | 	mov	arg02, #10
04404     00 16 06 F6 | 	mov	arg03, #0
04408     E0 36 B2 FD | 	call	#__system___basic_print_char
0440c     00 12 06 F6 | 	mov	arg01, #0
04410     64 87 B2 FD | 	call	#__system___getiolock_0611
04414     FD 00 68 FC | 	wrlong	#0, result1
04418                 | LR__0211
04418                 | LR__0212
04418     A7 F0 03 F6 | 	mov	ptra, fp
0441c     B2 00 A0 FD | 	call	#popregs_
04420                 | _interpret_ret
04420     2D 00 64 FD | 	ret
04424                 | 
04424                 | ' 
04424                 | ' '---------------------------------------------------------------------------------------------------------------------
04424                 | ' '
04424                 | ' '                          END OF TOKENIZER MAIN CODE
04424                 | ' '
04424                 | ' '---------------------------------------------------------------------------------------------------------------------
04424                 | ' 
04424                 | ' '---------------------------------------------------------------------------------------------------------------------
04424                 | ' '-------------------- Helper functions for the tokenizer -------------------------------------------------------------
04424                 | ' '---------------------------------------------------------------------------------------------------------------------
04424                 | ' 
04424                 | ' ' Check if the part is an operator, return a token or 0 if not found
04424                 | ' 
04424                 | ' function isoperator(s as string) as ubyte
04424                 | _isoperator
04424     01 4A 05 F6 | 	mov	COUNT_, #1
04428     A8 00 A0 FD | 	call	#pushregs_
0442c                 | ' 
0442c                 | ' select case s
0442c     09 27 02 F6 | 	mov	local01, arg01
04430     B5 01 00 FF 
04434     EE 14 06 F6 | 	mov	arg02, ##@LR__5507
04438     13 13 02 F6 | 	mov	arg01, local01
0443c     38 2A B2 FD | 	call	#__system___string_cmp
04440     00 FA 0D F2 | 	cmp	result1, #0 wz
04444     FC 01 90 AD |  if_e	jmp	#LR__0220
04448     B5 01 00 FF 
0444c     F0 14 06 F6 | 	mov	arg02, ##@LR__5508
04450     13 13 02 F6 | 	mov	arg01, local01
04454     20 2A B2 FD | 	call	#__system___string_cmp
04458     00 FA 0D F2 | 	cmp	result1, #0 wz
0445c     EC 01 90 AD |  if_e	jmp	#LR__0221
04460     B5 01 00 FF 
04464     F2 14 06 F6 | 	mov	arg02, ##@LR__5509
04468     13 13 02 F6 | 	mov	arg01, local01
0446c     08 2A B2 FD | 	call	#__system___string_cmp
04470     00 FA 0D F2 | 	cmp	result1, #0 wz
04474     DC 01 90 AD |  if_e	jmp	#LR__0222
04478     B5 01 00 FF 
0447c     F5 14 06 F6 | 	mov	arg02, ##@LR__5510
04480     13 13 02 F6 | 	mov	arg01, local01
04484     F0 29 B2 FD | 	call	#__system___string_cmp
04488     00 FA 0D F2 | 	cmp	result1, #0 wz
0448c     CC 01 90 AD |  if_e	jmp	#LR__0223
04490     B5 01 00 FF 
04494     F9 14 06 F6 | 	mov	arg02, ##@LR__5511
04498     13 13 02 F6 | 	mov	arg01, local01
0449c     D8 29 B2 FD | 	call	#__system___string_cmp
044a0     00 FA 0D F2 | 	cmp	result1, #0 wz
044a4     BC 01 90 AD |  if_e	jmp	#LR__0224
044a8     B5 01 00 FF 
044ac     FB 14 06 F6 | 	mov	arg02, ##@LR__5512
044b0     13 13 02 F6 | 	mov	arg01, local01
044b4     C0 29 B2 FD | 	call	#__system___string_cmp
044b8     00 FA 0D F2 | 	cmp	result1, #0 wz
044bc     AC 01 90 AD |  if_e	jmp	#LR__0225
044c0     B5 01 00 FF 
044c4     FD 14 06 F6 | 	mov	arg02, ##@LR__5513
044c8     13 13 02 F6 | 	mov	arg01, local01
044cc     A8 29 B2 FD | 	call	#__system___string_cmp
044d0     00 FA 0D F2 | 	cmp	result1, #0 wz
044d4     9C 01 90 AD |  if_e	jmp	#LR__0226
044d8     B5 01 00 FF 
044dc     01 15 06 F6 | 	mov	arg02, ##@LR__5514
044e0     13 13 02 F6 | 	mov	arg01, local01
044e4     90 29 B2 FD | 	call	#__system___string_cmp
044e8     00 FA 0D F2 | 	cmp	result1, #0 wz
044ec     8C 01 90 AD |  if_e	jmp	#LR__0227
044f0     B5 01 00 FF 
044f4     05 15 06 F6 | 	mov	arg02, ##@LR__5515
044f8     13 13 02 F6 | 	mov	arg01, local01
044fc     78 29 B2 FD | 	call	#__system___string_cmp
04500     00 FA 0D F2 | 	cmp	result1, #0 wz
04504     7C 01 90 AD |  if_e	jmp	#LR__0228
04508     B5 01 00 FF 
0450c     09 15 06 F6 | 	mov	arg02, ##@LR__5516
04510     13 13 02 F6 | 	mov	arg01, local01
04514     60 29 B2 FD | 	call	#__system___string_cmp
04518     00 FA 0D F2 | 	cmp	result1, #0 wz
0451c     6C 01 90 AD |  if_e	jmp	#LR__0229
04520     B5 01 00 FF 
04524     0D 15 06 F6 | 	mov	arg02, ##@LR__5517
04528     13 13 02 F6 | 	mov	arg01, local01
0452c     48 29 B2 FD | 	call	#__system___string_cmp
04530     00 FA 0D F2 | 	cmp	result1, #0 wz
04534     5C 01 90 AD |  if_e	jmp	#LR__0230
04538     B5 01 00 FF 
0453c     11 15 06 F6 | 	mov	arg02, ##@LR__5518
04540     13 13 02 F6 | 	mov	arg01, local01
04544     30 29 B2 FD | 	call	#__system___string_cmp
04548     00 FA 0D F2 | 	cmp	result1, #0 wz
0454c     4C 01 90 AD |  if_e	jmp	#LR__0231
04550     B5 01 00 FF 
04554     13 15 06 F6 | 	mov	arg02, ##@LR__5519
04558     13 13 02 F6 | 	mov	arg01, local01
0455c     18 29 B2 FD | 	call	#__system___string_cmp
04560     00 FA 0D F2 | 	cmp	result1, #0 wz
04564     3C 01 90 AD |  if_e	jmp	#LR__0232
04568     B5 01 00 FF 
0456c     17 15 06 F6 | 	mov	arg02, ##@LR__5520
04570     13 13 02 F6 | 	mov	arg01, local01
04574     00 29 B2 FD | 	call	#__system___string_cmp
04578     00 FA 0D F2 | 	cmp	result1, #0 wz
0457c     2C 01 90 AD |  if_e	jmp	#LR__0233
04580     B5 01 00 FF 
04584     19 15 06 F6 | 	mov	arg02, ##@LR__5521
04588     13 13 02 F6 | 	mov	arg01, local01
0458c     E8 28 B2 FD | 	call	#__system___string_cmp
04590     00 FA 0D F2 | 	cmp	result1, #0 wz
04594     1C 01 90 AD |  if_e	jmp	#LR__0234
04598     B5 01 00 FF 
0459c     1B 15 06 F6 | 	mov	arg02, ##@LR__5522
045a0     13 13 02 F6 | 	mov	arg01, local01
045a4     D0 28 B2 FD | 	call	#__system___string_cmp
045a8     00 FA 0D F2 | 	cmp	result1, #0 wz
045ac     0C 01 90 AD |  if_e	jmp	#LR__0235
045b0     B5 01 00 FF 
045b4     1E 15 06 F6 | 	mov	arg02, ##@LR__5523
045b8     13 13 02 F6 | 	mov	arg01, local01
045bc     B8 28 B2 FD | 	call	#__system___string_cmp
045c0     00 FA 0D F2 | 	cmp	result1, #0 wz
045c4     FC 00 90 AD |  if_e	jmp	#LR__0236
045c8     B5 01 00 FF 
045cc     21 15 06 F6 | 	mov	arg02, ##@LR__5524
045d0     13 13 02 F6 | 	mov	arg01, local01
045d4     A0 28 B2 FD | 	call	#__system___string_cmp
045d8     00 FA 0D F2 | 	cmp	result1, #0 wz
045dc     EC 00 90 AD |  if_e	jmp	#LR__0237
045e0     B5 01 00 FF 
045e4     23 15 06 F6 | 	mov	arg02, ##@LR__5525
045e8     13 13 02 F6 | 	mov	arg01, local01
045ec     88 28 B2 FD | 	call	#__system___string_cmp
045f0     00 FA 0D F2 | 	cmp	result1, #0 wz
045f4     DC 00 90 AD |  if_e	jmp	#LR__0238
045f8     B5 01 00 FF 
045fc     25 15 06 F6 | 	mov	arg02, ##@LR__5526
04600     13 13 02 F6 | 	mov	arg01, local01
04604     70 28 B2 FD | 	call	#__system___string_cmp
04608     00 FA 0D F2 | 	cmp	result1, #0 wz
0460c     CC 00 90 AD |  if_e	jmp	#LR__0239
04610     B5 01 00 FF 
04614     28 15 06 F6 | 	mov	arg02, ##@LR__5527
04618     13 13 02 F6 | 	mov	arg01, local01
0461c     58 28 B2 FD | 	call	#__system___string_cmp
04620     00 FA 0D F2 | 	cmp	result1, #0 wz
04624     BC 00 90 AD |  if_e	jmp	#LR__0240
04628     B5 01 00 FF 
0462c     2B 15 06 F6 | 	mov	arg02, ##@LR__5528
04630     13 13 02 F6 | 	mov	arg01, local01
04634     40 28 B2 FD | 	call	#__system___string_cmp
04638     00 FA 0D F2 | 	cmp	result1, #0 wz
0463c     AC 00 90 AD |  if_e	jmp	#LR__0241
04640     B0 00 90 FD | 	jmp	#LR__0242
04644                 | LR__0220
04644     01 FA 05 F6 | 	mov	result1, #1
04648     AC 00 90 FD | 	jmp	#LR__0243
0464c                 | LR__0221
0464c     02 FA 05 F6 | 	mov	result1, #2
04650     A4 00 90 FD | 	jmp	#LR__0243
04654                 | LR__0222
04654     03 FA 05 F6 | 	mov	result1, #3
04658     9C 00 90 FD | 	jmp	#LR__0243
0465c                 | LR__0223
0465c     04 FA 05 F6 | 	mov	result1, #4
04660     94 00 90 FD | 	jmp	#LR__0243
04664                 | LR__0224
04664     05 FA 05 F6 | 	mov	result1, #5
04668     8C 00 90 FD | 	jmp	#LR__0243
0466c                 | LR__0225
0466c     06 FA 05 F6 | 	mov	result1, #6
04670     84 00 90 FD | 	jmp	#LR__0243
04674                 | LR__0226
04674     07 FA 05 F6 | 	mov	result1, #7
04678     7C 00 90 FD | 	jmp	#LR__0243
0467c                 | LR__0227
0467c     08 FA 05 F6 | 	mov	result1, #8
04680     74 00 90 FD | 	jmp	#LR__0243
04684                 | LR__0228
04684     09 FA 05 F6 | 	mov	result1, #9
04688     6C 00 90 FD | 	jmp	#LR__0243
0468c                 | LR__0229
0468c     0A FA 05 F6 | 	mov	result1, #10
04690     64 00 90 FD | 	jmp	#LR__0243
04694                 | LR__0230
04694     0B FA 05 F6 | 	mov	result1, #11
04698     5C 00 90 FD | 	jmp	#LR__0243
0469c                 | LR__0231
0469c     0C FA 05 F6 | 	mov	result1, #12
046a0     54 00 90 FD | 	jmp	#LR__0243
046a4                 | LR__0232
046a4     0D FA 05 F6 | 	mov	result1, #13
046a8     4C 00 90 FD | 	jmp	#LR__0243
046ac                 | LR__0233
046ac     0E FA 05 F6 | 	mov	result1, #14
046b0     44 00 90 FD | 	jmp	#LR__0243
046b4                 | LR__0234
046b4     1B FA 05 F6 | 	mov	result1, #27
046b8     3C 00 90 FD | 	jmp	#LR__0243
046bc                 | LR__0235
046bc     27 FA 05 F6 | 	mov	result1, #39
046c0     34 00 90 FD | 	jmp	#LR__0243
046c4                 | LR__0236
046c4     26 FA 05 F6 | 	mov	result1, #38
046c8     2C 00 90 FD | 	jmp	#LR__0243
046cc                 | LR__0237
046cc     10 FA 05 F6 | 	mov	result1, #16
046d0     24 00 90 FD | 	jmp	#LR__0243
046d4                 | LR__0238
046d4     0F FA 05 F6 | 	mov	result1, #15
046d8     1C 00 90 FD | 	jmp	#LR__0243
046dc                 | LR__0239
046dc     2A FA 05 F6 | 	mov	result1, #42
046e0     14 00 90 FD | 	jmp	#LR__0243
046e4                 | LR__0240
046e4     28 FA 05 F6 | 	mov	result1, #40
046e8     0C 00 90 FD | 	jmp	#LR__0243
046ec                 | LR__0241
046ec     29 FA 05 F6 | 	mov	result1, #41
046f0     04 00 90 FD | 	jmp	#LR__0243
046f4                 | LR__0242
046f4     00 FA 05 F6 | 	mov	result1, #0
046f8                 | LR__0243
046f8     A7 F0 03 F6 | 	mov	ptra, fp
046fc     B2 00 A0 FD | 	call	#popregs_
04700                 | _isoperator_ret
04700     2D 00 64 FD | 	ret
04704                 | 
04704                 | ' 
04704                 | ' ' Check if the part is a channel#, return a token or 0 if not found
04704                 | ' 
04704                 | ' function ischannel(s as string) as ulong
04704                 | _ischannel
04704     02 4A 05 F6 | 	mov	COUNT_, #2
04708     A8 00 A0 FD | 	call	#pushregs_
0470c                 | ' if left$(s,1)<>"#" then return 0
0470c     09 27 02 F6 | 	mov	local01, arg01
04710     01 14 06 F6 | 	mov	arg02, #1
04714     B4 47 B2 FD | 	call	#__system__Left_S
04718     FD 12 02 F6 | 	mov	arg01, result1
0471c     B5 01 00 FF 
04720     2E 15 06 F6 | 	mov	arg02, ##@LR__5529
04724     50 27 B2 FD | 	call	#__system___string_cmp
04728     00 FA 0D F2 | 	cmp	result1, #0 wz
0472c     00 FA 05 56 |  if_ne	mov	result1, #0
04730     AC 00 90 5D |  if_ne	jmp	#LR__0254
04734                 | ' if len(s)<>2 then return 0
04734     13 13 02 F6 | 	mov	arg01, local01
04738     09 29 02 F6 | 	mov	local02, arg01
0473c     97 06 48 FB | 	callpa	#(@LR__0251-@LR__0250)>>2,fcache_load_ptr_
04740                 | LR__0250
04740     14 FB C9 FA | 	rdbyte	result1, local02 wz
04744     01 28 06 51 |  if_ne	add	local02, #1
04748     F4 FF 9F 5D |  if_ne	jmp	#LR__0250
0474c                 | LR__0251
0474c     09 29 82 F1 | 	sub	local02, arg01
04750     14 FB 01 F6 | 	mov	result1, local02
04754     02 FA 0D F2 | 	cmp	result1, #2 wz
04758     00 FA 05 56 |  if_ne	mov	result1, #0
0475c     80 00 90 5D |  if_ne	jmp	#LR__0254
04760                 | ' if right$(s,1)<"0" orelse right$(s,1)>"9" then return 0
04760     13 13 02 F6 | 	mov	arg01, local01
04764     01 14 06 F6 | 	mov	arg02, #1
04768     E8 47 B2 FD | 	call	#__system__Right_S
0476c     FD 12 02 F6 | 	mov	arg01, result1
04770     B5 01 00 FF 
04774     30 15 06 F6 | 	mov	arg02, ##@LR__5530
04778     FC 26 B2 FD | 	call	#__system___string_cmp
0477c     00 FA 55 F2 | 	cmps	result1, #0 wc
04780     24 00 90 CD |  if_b	jmp	#LR__0252
04784     13 13 02 F6 | 	mov	arg01, local01
04788     01 14 06 F6 | 	mov	arg02, #1
0478c     C4 47 B2 FD | 	call	#__system__Right_S
04790     FD 12 02 F6 | 	mov	arg01, result1
04794     B5 01 00 FF 
04798     32 15 06 F6 | 	mov	arg02, ##@LR__5531
0479c     D8 26 B2 FD | 	call	#__system___string_cmp
047a0     01 FA 55 F2 | 	cmps	result1, #1 wc
047a4     08 00 90 CD |  if_b	jmp	#LR__0253
047a8                 | LR__0252
047a8     00 FA 05 F6 | 	mov	result1, #0
047ac     30 00 90 FD | 	jmp	#LR__0254
047b0                 | LR__0253
047b0                 | ' return token_channel+val(right$(s,1))
047b0     13 13 02 F6 | 	mov	arg01, local01
047b4     01 14 06 F6 | 	mov	arg02, #1
047b8     98 47 B2 FD | 	call	#__system__Right_S
047bc     FD 12 02 F6 | 	mov	arg01, result1
047c0     10 5D B2 FD | 	call	#__system____builtin_atof
047c4     FD 14 02 F6 | 	mov	arg02, result1
047c8     00 18 21 FF 
047cc     00 12 06 F6 | 	mov	arg01, ##1110441984
047d0     24 51 B2 FD | 	call	#__system___float_add
047d4     FD 12 02 F6 | 	mov	arg01, result1
047d8     00 14 06 F6 | 	mov	arg02, #0
047dc     B0 59 B2 FD | 	call	#__system___float_tointeger
047e0                 | LR__0254
047e0     A7 F0 03 F6 | 	mov	ptra, fp
047e4     B2 00 A0 FD | 	call	#popregs_
047e8                 | _ischannel_ret
047e8     2D 00 64 FD | 	ret
047ec                 | 
047ec                 | ' 
047ec                 | ' ' Check if the part is a predefined constant, return a constant or 0 if not found
047ec                 | ' ' todo: add spin2/pasm constants for pin control
047ec                 | ' 
047ec                 | ' function isconstant(s as string) as integer
047ec                 | _isconstant
047ec     01 4A 05 F6 | 	mov	COUNT_, #1
047f0     A8 00 A0 FD | 	call	#pushregs_
047f4                 | ' 
047f4                 | ' select case s
047f4     09 27 02 F6 | 	mov	local01, arg01
047f8     B5 01 00 FF 
047fc     34 15 06 F6 | 	mov	arg02, ##@LR__5532
04800     13 13 02 F6 | 	mov	arg01, local01
04804     70 26 B2 FD | 	call	#__system___string_cmp
04808     00 FA 0D F2 | 	cmp	result1, #0 wz
0480c     34 00 90 AD |  if_e	jmp	#LR__0260
04810     B5 01 00 FF 
04814     3A 15 06 F6 | 	mov	arg02, ##@LR__5533
04818     13 13 02 F6 | 	mov	arg01, local01
0481c     58 26 B2 FD | 	call	#__system___string_cmp
04820     00 FA 0D F2 | 	cmp	result1, #0 wz
04824     24 00 90 AD |  if_e	jmp	#LR__0261
04828     B5 01 00 FF 
0482c     41 15 06 F6 | 	mov	arg02, ##@LR__5534
04830     13 13 02 F6 | 	mov	arg01, local01
04834     40 26 B2 FD | 	call	#__system___string_cmp
04838     00 FA 0D F2 | 	cmp	result1, #0 wz
0483c     14 00 90 AD |  if_e	jmp	#LR__0262
04840     18 00 90 FD | 	jmp	#LR__0263
04844                 | LR__0260
04844     01 FA 05 F6 | 	mov	result1, #1
04848     14 00 90 FD | 	jmp	#LR__0264
0484c                 | LR__0261
0484c     02 FA 05 F6 | 	mov	result1, #2
04850     0C 00 90 FD | 	jmp	#LR__0264
04854                 | LR__0262
04854     04 FA 05 F6 | 	mov	result1, #4
04858     04 00 90 FD | 	jmp	#LR__0264
0485c                 | LR__0263
0485c     00 FA 05 F6 | 	mov	result1, #0
04860                 | LR__0264
04860     A7 F0 03 F6 | 	mov	ptra, fp
04864     B2 00 A0 FD | 	call	#popregs_
04868                 | _isconstant_ret
04868     2D 00 64 FD | 	ret
0486c                 | 
0486c                 | ' 
0486c                 | ' ' Check if the part is a predefined music note name, return a token or 0 if not found
0486c                 | ' 
0486c                 | ' function isnotename(s as string) as ulong
0486c                 | _isnotename
0486c     07 4A 05 F6 | 	mov	COUNT_, #7
04870     A8 00 A0 FD | 	call	#pushregs_
04874                 | ' if left$(s,1)<>"#" then return 0
04874     09 27 02 F6 | 	mov	local01, arg01
04878     01 14 06 F6 | 	mov	arg02, #1
0487c     4C 46 B2 FD | 	call	#__system__Left_S
04880     FD 12 02 F6 | 	mov	arg01, result1
04884     B5 01 00 FF 
04888     49 15 06 F6 | 	mov	arg02, ##@LR__5535
0488c     E8 25 B2 FD | 	call	#__system___string_cmp
04890     00 FA 0D F2 | 	cmp	result1, #0 wz
04894     00 FA 05 56 |  if_ne	mov	result1, #0
04898     30 03 90 5D |  if_ne	jmp	#LR__0293
0489c                 | ' if mid$(s,3,1)="#" then s1=mid$(s,2,2) else s1=mid$(s,2,1)
0489c     13 13 02 F6 | 	mov	arg01, local01
048a0     03 14 06 F6 | 	mov	arg02, #3
048a4     01 16 06 F6 | 	mov	arg03, #1
048a8     38 47 B2 FD | 	call	#__system__Mid_S
048ac     FD 12 02 F6 | 	mov	arg01, result1
048b0     B5 01 00 FF 
048b4     4B 15 06 F6 | 	mov	arg02, ##@LR__5536
048b8     BC 25 B2 FD | 	call	#__system___string_cmp
048bc     00 FA 0D F2 | 	cmp	result1, #0 wz
048c0     18 00 90 5D |  if_ne	jmp	#LR__0270
048c4     13 13 02 F6 | 	mov	arg01, local01
048c8     02 14 06 F6 | 	mov	arg02, #2
048cc     02 16 06 F6 | 	mov	arg03, #2
048d0     10 47 B2 FD | 	call	#__system__Mid_S
048d4     FD 28 02 F6 | 	mov	local02, result1
048d8     14 00 90 FD | 	jmp	#LR__0271
048dc                 | LR__0270
048dc     13 13 02 F6 | 	mov	arg01, local01
048e0     02 14 06 F6 | 	mov	arg02, #2
048e4     01 16 06 F6 | 	mov	arg03, #1
048e8     F8 46 B2 FD | 	call	#__system__Mid_S
048ec     FD 28 02 F6 | 	mov	local02, result1
048f0                 | LR__0271
048f0                 | ' if mid$(s,len(s)-1,1)<>"-" then nn=val(right$(s,1)) else nn=-1*val(right$(s,1))
048f0     13 13 02 F6 | 	mov	arg01, local01
048f4     09 2B 02 F6 | 	mov	local03, arg01
048f8     97 06 48 FB | 	callpa	#(@LR__0273-@LR__0272)>>2,fcache_load_ptr_
048fc                 | LR__0272
048fc     15 FB C9 FA | 	rdbyte	result1, local03 wz
04900     01 2A 06 51 |  if_ne	add	local03, #1
04904     F4 FF 9F 5D |  if_ne	jmp	#LR__0272
04908                 | LR__0273
04908     09 2B 82 F1 | 	sub	local03, arg01
0490c     15 15 02 F6 | 	mov	arg02, local03
04910     01 14 86 F1 | 	sub	arg02, #1
04914     13 13 02 F6 | 	mov	arg01, local01
04918     01 16 06 F6 | 	mov	arg03, #1
0491c     C4 46 B2 FD | 	call	#__system__Mid_S
04920     FD 12 02 F6 | 	mov	arg01, result1
04924     B5 01 00 FF 
04928     4D 15 06 F6 | 	mov	arg02, ##@LR__5537
0492c     48 25 B2 FD | 	call	#__system___string_cmp
04930     00 FA 0D F2 | 	cmp	result1, #0 wz
04934     28 00 90 AD |  if_e	jmp	#LR__0274
04938     13 13 02 F6 | 	mov	arg01, local01
0493c     01 14 06 F6 | 	mov	arg02, #1
04940     10 46 B2 FD | 	call	#__system__Right_S
04944     FD 12 02 F6 | 	mov	arg01, result1
04948     88 5B B2 FD | 	call	#__system____builtin_atof
0494c     FD 12 02 F6 | 	mov	arg01, result1
04950     00 14 06 F6 | 	mov	arg02, #0
04954     38 58 B2 FD | 	call	#__system___float_tointeger
04958     FD 2C 02 F6 | 	mov	local04, result1
0495c     34 00 90 FD | 	jmp	#LR__0275
04960                 | LR__0274
04960     13 13 02 F6 | 	mov	arg01, local01
04964     01 14 06 F6 | 	mov	arg02, #1
04968     E8 45 B2 FD | 	call	#__system__Right_S
0496c     FD 12 02 F6 | 	mov	arg01, result1
04970     60 5B B2 FD | 	call	#__system____builtin_atof
04974     FD 14 02 F6 | 	mov	arg02, result1
04978     00 C0 5F FF 
0497c     00 12 06 F6 | 	mov	arg01, ##-1082130432
04980     44 53 B2 FD | 	call	#__system___float_mul
04984     FD 12 02 F6 | 	mov	arg01, result1
04988     00 14 06 F6 | 	mov	arg02, #0
0498c     00 58 B2 FD | 	call	#__system___float_tointeger
04990     FD 2C 02 F6 | 	mov	local04, result1
04994                 | LR__0275
04994                 | ' 
04994                 | ' if nn=0 andalso right$(s,1)<>"0" then nn=4
04994     00 2C 0E F2 | 	cmp	local04, #0 wz
04998     24 00 90 5D |  if_ne	jmp	#LR__0276
0499c     13 13 02 F6 | 	mov	arg01, local01
049a0     01 14 06 F6 | 	mov	arg02, #1
049a4     AC 45 B2 FD | 	call	#__system__Right_S
049a8     FD 12 02 F6 | 	mov	arg01, result1
049ac     B5 01 00 FF 
049b0     4F 15 06 F6 | 	mov	arg02, ##@LR__5538
049b4     C0 24 B2 FD | 	call	#__system___string_cmp
049b8     00 FA 0D F2 | 	cmp	result1, #0 wz
049bc     04 2C 06 56 |  if_ne	mov	local04, #4
049c0                 | LR__0276
049c0                 | ' 
049c0                 | ' select case s1
049c0     14 2F 02 F6 | 	mov	local05, local02
049c4     B5 01 00 FF 
049c8     51 15 06 F6 | 	mov	arg02, ##@LR__5539
049cc     17 13 02 F6 | 	mov	arg01, local05
049d0     A4 24 B2 FD | 	call	#__system___string_cmp
049d4     00 FA 0D F2 | 	cmp	result1, #0 wz
049d8     24 01 90 AD |  if_e	jmp	#LR__0277
049dc     B5 01 00 FF 
049e0     53 15 06 F6 | 	mov	arg02, ##@LR__5540
049e4     17 13 02 F6 | 	mov	arg01, local05
049e8     8C 24 B2 FD | 	call	#__system___string_cmp
049ec     00 FA 0D F2 | 	cmp	result1, #0 wz
049f0     18 01 90 AD |  if_e	jmp	#LR__0278
049f4     B5 01 00 FF 
049f8     56 15 06 F6 | 	mov	arg02, ##@LR__5541
049fc     17 13 02 F6 | 	mov	arg01, local05
04a00     74 24 B2 FD | 	call	#__system___string_cmp
04a04     00 FA 0D F2 | 	cmp	result1, #0 wz
04a08     0C 01 90 AD |  if_e	jmp	#LR__0279
04a0c     B5 01 00 FF 
04a10     58 15 06 F6 | 	mov	arg02, ##@LR__5542
04a14     17 13 02 F6 | 	mov	arg01, local05
04a18     5C 24 B2 FD | 	call	#__system___string_cmp
04a1c     00 FA 0D F2 | 	cmp	result1, #0 wz
04a20     00 01 90 AD |  if_e	jmp	#LR__0280
04a24     B5 01 00 FF 
04a28     5B 15 06 F6 | 	mov	arg02, ##@LR__5543
04a2c     17 13 02 F6 | 	mov	arg01, local05
04a30     44 24 B2 FD | 	call	#__system___string_cmp
04a34     00 FA 0D F2 | 	cmp	result1, #0 wz
04a38     F4 00 90 AD |  if_e	jmp	#LR__0281
04a3c     B5 01 00 FF 
04a40     5D 15 06 F6 | 	mov	arg02, ##@LR__5544
04a44     17 13 02 F6 | 	mov	arg01, local05
04a48     2C 24 B2 FD | 	call	#__system___string_cmp
04a4c     00 FA 0D F2 | 	cmp	result1, #0 wz
04a50     E8 00 90 AD |  if_e	jmp	#LR__0282
04a54     B5 01 00 FF 
04a58     5F 15 06 F6 | 	mov	arg02, ##@LR__5545
04a5c     17 13 02 F6 | 	mov	arg01, local05
04a60     14 24 B2 FD | 	call	#__system___string_cmp
04a64     00 FA 0D F2 | 	cmp	result1, #0 wz
04a68     DC 00 90 AD |  if_e	jmp	#LR__0283
04a6c     B5 01 00 FF 
04a70     62 15 06 F6 | 	mov	arg02, ##@LR__5546
04a74     17 13 02 F6 | 	mov	arg01, local05
04a78     FC 23 B2 FD | 	call	#__system___string_cmp
04a7c     00 FA 0D F2 | 	cmp	result1, #0 wz
04a80     D0 00 90 AD |  if_e	jmp	#LR__0284
04a84     B5 01 00 FF 
04a88     64 15 06 F6 | 	mov	arg02, ##@LR__5547
04a8c     17 13 02 F6 | 	mov	arg01, local05
04a90     E4 23 B2 FD | 	call	#__system___string_cmp
04a94     00 FA 0D F2 | 	cmp	result1, #0 wz
04a98     C4 00 90 AD |  if_e	jmp	#LR__0285
04a9c     B5 01 00 FF 
04aa0     67 15 06 F6 | 	mov	arg02, ##@LR__5548
04aa4     17 13 02 F6 | 	mov	arg01, local05
04aa8     CC 23 B2 FD | 	call	#__system___string_cmp
04aac     00 FA 0D F2 | 	cmp	result1, #0 wz
04ab0     B8 00 90 AD |  if_e	jmp	#LR__0286
04ab4     B5 01 00 FF 
04ab8     69 15 06 F6 | 	mov	arg02, ##@LR__5549
04abc     17 13 02 F6 | 	mov	arg01, local05
04ac0     B4 23 B2 FD | 	call	#__system___string_cmp
04ac4     00 FA 0D F2 | 	cmp	result1, #0 wz
04ac8     AC 00 90 AD |  if_e	jmp	#LR__0287
04acc     B5 01 00 FF 
04ad0     6C 15 06 F6 | 	mov	arg02, ##@LR__5550
04ad4     17 13 02 F6 | 	mov	arg01, local05
04ad8     9C 23 B2 FD | 	call	#__system___string_cmp
04adc     00 FA 0D F2 | 	cmp	result1, #0 wz
04ae0     A0 00 90 AD |  if_e	jmp	#LR__0288
04ae4     B5 01 00 FF 
04ae8     6E 15 06 F6 | 	mov	arg02, ##@LR__5551
04aec     17 13 02 F6 | 	mov	arg01, local05
04af0     84 23 B2 FD | 	call	#__system___string_cmp
04af4     00 FA 0D F2 | 	cmp	result1, #0 wz
04af8     94 00 90 AD |  if_e	jmp	#LR__0289
04afc     9C 00 90 FD | 	jmp	#LR__0290
04b00                 | LR__0277
04b00     01 00 00 FF 
04b04     00 31 06 F6 | 	mov	local06, ##768
04b08     98 00 90 FD | 	jmp	#LR__0291
04b0c                 | LR__0278
04b0c     01 00 00 FF 
04b10     01 31 06 F6 | 	mov	local06, ##769
04b14     8C 00 90 FD | 	jmp	#LR__0291
04b18                 | LR__0279
04b18     01 00 00 FF 
04b1c     02 31 06 F6 | 	mov	local06, ##770
04b20     80 00 90 FD | 	jmp	#LR__0291
04b24                 | LR__0280
04b24     01 00 00 FF 
04b28     03 31 06 F6 | 	mov	local06, ##771
04b2c     74 00 90 FD | 	jmp	#LR__0291
04b30                 | LR__0281
04b30     01 00 00 FF 
04b34     04 31 06 F6 | 	mov	local06, ##772
04b38     68 00 90 FD | 	jmp	#LR__0291
04b3c                 | LR__0282
04b3c     01 00 00 FF 
04b40     05 31 06 F6 | 	mov	local06, ##773
04b44     5C 00 90 FD | 	jmp	#LR__0291
04b48                 | LR__0283
04b48     01 00 00 FF 
04b4c     06 31 06 F6 | 	mov	local06, ##774
04b50     50 00 90 FD | 	jmp	#LR__0291
04b54                 | LR__0284
04b54     01 00 00 FF 
04b58     07 31 06 F6 | 	mov	local06, ##775
04b5c     44 00 90 FD | 	jmp	#LR__0291
04b60                 | LR__0285
04b60     01 00 00 FF 
04b64     08 31 06 F6 | 	mov	local06, ##776
04b68     38 00 90 FD | 	jmp	#LR__0291
04b6c                 | LR__0286
04b6c     01 00 00 FF 
04b70     09 31 06 F6 | 	mov	local06, ##777
04b74     2C 00 90 FD | 	jmp	#LR__0291
04b78                 | LR__0287
04b78     01 00 00 FF 
04b7c     0A 31 06 F6 | 	mov	local06, ##778
04b80     20 00 90 FD | 	jmp	#LR__0291
04b84                 | LR__0288
04b84     01 00 00 FF 
04b88     0B 31 06 F6 | 	mov	local06, ##779
04b8c     14 00 90 FD | 	jmp	#LR__0291
04b90                 | LR__0289
04b90     01 00 00 FF 
04b94     0B 31 06 F6 | 	mov	local06, ##779
04b98     08 00 90 FD | 	jmp	#LR__0291
04b9c                 | LR__0290
04b9c     00 FA 05 F6 | 	mov	result1, #0
04ba0     28 00 90 FD | 	jmp	#LR__0293
04ba4                 | LR__0291
04ba4                 | ' if nn>=-1 andalso nn<10 then token=token+12*nn
04ba4     FF FF 7F FF 
04ba8     FF 2D 56 F2 | 	cmps	local04, ##-1 wc
04bac     18 00 90 CD |  if_b	jmp	#LR__0292
04bb0     0A 2C 56 F2 | 	cmps	local04, #10 wc
04bb4     16 33 02 C6 |  if_b	mov	local07, local04
04bb8     01 32 66 C0 |  if_b	shl	local07, #1
04bbc     16 33 02 C1 |  if_b	add	local07, local04
04bc0     02 32 66 C0 |  if_b	shl	local07, #2
04bc4     19 31 02 C1 |  if_b	add	local06, local07
04bc8                 | LR__0292
04bc8                 | ' return token
04bc8     18 FB 01 F6 | 	mov	result1, local06
04bcc                 | LR__0293
04bcc     A7 F0 03 F6 | 	mov	ptra, fp
04bd0     B2 00 A0 FD | 	call	#popregs_
04bd4                 | _isnotename_ret
04bd4     2D 00 64 FD | 	ret
04bd8                 | 
04bd8                 | ' 
04bd8                 | ' ' Check if the part is a separator, return a token or 0 if not found
04bd8                 | ' 
04bd8                 | ' function isseparator(s as string) as ubyte
04bd8                 | _isseparator
04bd8     01 4A 05 F6 | 	mov	COUNT_, #1
04bdc     A8 00 A0 FD | 	call	#pushregs_
04be0                 | ' 
04be0                 | ' select case s
04be0     09 27 02 F6 | 	mov	local01, arg01
04be4     B5 01 00 FF 
04be8     70 15 06 F6 | 	mov	arg02, ##@LR__5552
04bec     13 13 02 F6 | 	mov	arg01, local01
04bf0     84 22 B2 FD | 	call	#__system___string_cmp
04bf4     00 FA 0D F2 | 	cmp	result1, #0 wz
04bf8     54 01 90 AD |  if_e	jmp	#LR__0300
04bfc     B5 01 00 FF 
04c00     72 15 06 F6 | 	mov	arg02, ##@LR__5553
04c04     13 13 02 F6 | 	mov	arg01, local01
04c08     6C 22 B2 FD | 	call	#__system___string_cmp
04c0c     00 FA 0D F2 | 	cmp	result1, #0 wz
04c10     44 01 90 AD |  if_e	jmp	#LR__0301
04c14     B5 01 00 FF 
04c18     74 15 06 F6 | 	mov	arg02, ##@LR__5554
04c1c     13 13 02 F6 | 	mov	arg01, local01
04c20     54 22 B2 FD | 	call	#__system___string_cmp
04c24     00 FA 0D F2 | 	cmp	result1, #0 wz
04c28     34 01 90 AD |  if_e	jmp	#LR__0302
04c2c     B5 01 00 FF 
04c30     76 15 06 F6 | 	mov	arg02, ##@LR__5555
04c34     13 13 02 F6 | 	mov	arg01, local01
04c38     3C 22 B2 FD | 	call	#__system___string_cmp
04c3c     00 FA 0D F2 | 	cmp	result1, #0 wz
04c40     24 01 90 AD |  if_e	jmp	#LR__0303
04c44     B5 01 00 FF 
04c48     78 15 06 F6 | 	mov	arg02, ##@LR__5556
04c4c     13 13 02 F6 | 	mov	arg01, local01
04c50     24 22 B2 FD | 	call	#__system___string_cmp
04c54     00 FA 0D F2 | 	cmp	result1, #0 wz
04c58     14 01 90 AD |  if_e	jmp	#LR__0304
04c5c     B5 01 00 FF 
04c60     7A 15 06 F6 | 	mov	arg02, ##@LR__5557
04c64     13 13 02 F6 | 	mov	arg01, local01
04c68     0C 22 B2 FD | 	call	#__system___string_cmp
04c6c     00 FA 0D F2 | 	cmp	result1, #0 wz
04c70     04 01 90 AD |  if_e	jmp	#LR__0305
04c74     B5 01 00 FF 
04c78     7C 15 06 F6 | 	mov	arg02, ##@LR__5558
04c7c     13 13 02 F6 | 	mov	arg01, local01
04c80     F4 21 B2 FD | 	call	#__system___string_cmp
04c84     00 FA 0D F2 | 	cmp	result1, #0 wz
04c88     F4 00 90 AD |  if_e	jmp	#LR__0306
04c8c     B5 01 00 FF 
04c90     7E 15 06 F6 | 	mov	arg02, ##@LR__5559
04c94     13 13 02 F6 | 	mov	arg01, local01
04c98     DC 21 B2 FD | 	call	#__system___string_cmp
04c9c     00 FA 0D F2 | 	cmp	result1, #0 wz
04ca0     E4 00 90 AD |  if_e	jmp	#LR__0307
04ca4     B5 01 00 FF 
04ca8     80 15 06 F6 | 	mov	arg02, ##@LR__5560
04cac     13 13 02 F6 | 	mov	arg01, local01
04cb0     C4 21 B2 FD | 	call	#__system___string_cmp
04cb4     00 FA 0D F2 | 	cmp	result1, #0 wz
04cb8     D4 00 90 AD |  if_e	jmp	#LR__0308
04cbc     B5 01 00 FF 
04cc0     82 15 06 F6 | 	mov	arg02, ##@LR__5561
04cc4     13 13 02 F6 | 	mov	arg01, local01
04cc8     AC 21 B2 FD | 	call	#__system___string_cmp
04ccc     00 FA 0D F2 | 	cmp	result1, #0 wz
04cd0     C4 00 90 AD |  if_e	jmp	#LR__0309
04cd4     B5 01 00 FF 
04cd8     84 15 06 F6 | 	mov	arg02, ##@LR__5562
04cdc     13 13 02 F6 | 	mov	arg01, local01
04ce0     94 21 B2 FD | 	call	#__system___string_cmp
04ce4     00 FA 0D F2 | 	cmp	result1, #0 wz
04ce8     B4 00 90 AD |  if_e	jmp	#LR__0310
04cec     B5 01 00 FF 
04cf0     86 15 06 F6 | 	mov	arg02, ##@LR__5563
04cf4     13 13 02 F6 | 	mov	arg01, local01
04cf8     7C 21 B2 FD | 	call	#__system___string_cmp
04cfc     00 FA 0D F2 | 	cmp	result1, #0 wz
04d00     A4 00 90 AD |  if_e	jmp	#LR__0311
04d04     B5 01 00 FF 
04d08     88 15 06 F6 | 	mov	arg02, ##@LR__5564
04d0c     13 13 02 F6 | 	mov	arg01, local01
04d10     64 21 B2 FD | 	call	#__system___string_cmp
04d14     00 FA 0D F2 | 	cmp	result1, #0 wz
04d18     94 00 90 AD |  if_e	jmp	#LR__0312
04d1c     B5 01 00 FF 
04d20     8A 15 06 F6 | 	mov	arg02, ##@LR__5565
04d24     13 13 02 F6 | 	mov	arg01, local01
04d28     4C 21 B2 FD | 	call	#__system___string_cmp
04d2c     00 FA 0D F2 | 	cmp	result1, #0 wz
04d30     84 00 90 AD |  if_e	jmp	#LR__0313
04d34     B5 01 00 FF 
04d38     8C 15 06 F6 | 	mov	arg02, ##@LR__5566
04d3c     13 13 02 F6 | 	mov	arg01, local01
04d40     34 21 B2 FD | 	call	#__system___string_cmp
04d44     00 FA 0D F2 | 	cmp	result1, #0 wz
04d48     74 00 90 AD |  if_e	jmp	#LR__0314
04d4c     78 00 90 FD | 	jmp	#LR__0315
04d50                 | LR__0300
04d50     01 FA 05 F6 | 	mov	result1, #1
04d54     74 00 90 FD | 	jmp	#LR__0316
04d58                 | LR__0301
04d58     02 FA 05 F6 | 	mov	result1, #2
04d5c     6C 00 90 FD | 	jmp	#LR__0316
04d60                 | LR__0302
04d60     1B FA 05 F6 | 	mov	result1, #27
04d64     64 00 90 FD | 	jmp	#LR__0316
04d68                 | LR__0303
04d68     11 FA 05 F6 | 	mov	result1, #17
04d6c     5C 00 90 FD | 	jmp	#LR__0316
04d70                 | LR__0304
04d70     05 FA 05 F6 | 	mov	result1, #5
04d74     54 00 90 FD | 	jmp	#LR__0316
04d78                 | LR__0305
04d78     06 FA 05 F6 | 	mov	result1, #6
04d7c     4C 00 90 FD | 	jmp	#LR__0316
04d80                 | LR__0306
04d80     12 FA 05 F6 | 	mov	result1, #18
04d84     44 00 90 FD | 	jmp	#LR__0316
04d88                 | LR__0307
04d88     13 FA 05 F6 | 	mov	result1, #19
04d8c     3C 00 90 FD | 	jmp	#LR__0316
04d90                 | LR__0308
04d90     0C FA 05 F6 | 	mov	result1, #12
04d94     34 00 90 FD | 	jmp	#LR__0316
04d98                 | LR__0309
04d98     14 FA 05 F6 | 	mov	result1, #20
04d9c     2C 00 90 FD | 	jmp	#LR__0316
04da0                 | LR__0310
04da0     15 FA 05 F6 | 	mov	result1, #21
04da4     24 00 90 FD | 	jmp	#LR__0316
04da8                 | LR__0311
04da8     16 FA 05 F6 | 	mov	result1, #22
04dac     1C 00 90 FD | 	jmp	#LR__0316
04db0                 | LR__0312
04db0     FF FB 05 F6 | 	mov	result1, #511
04db4     14 00 90 FD | 	jmp	#LR__0316
04db8                 | LR__0313
04db8     0F FA 05 F6 | 	mov	result1, #15
04dbc     0C 00 90 FD | 	jmp	#LR__0316
04dc0                 | LR__0314
04dc0     10 FA 05 F6 | 	mov	result1, #16
04dc4     04 00 90 FD | 	jmp	#LR__0316
04dc8                 | LR__0315
04dc8     00 FA 05 F6 | 	mov	result1, #0
04dcc                 | LR__0316
04dcc     A7 F0 03 F6 | 	mov	ptra, fp
04dd0     B2 00 A0 FD | 	call	#popregs_
04dd4                 | _isseparator_ret
04dd4     2D 00 64 FD | 	ret
04dd8                 | 
04dd8                 | ' 
04dd8                 | ' ' Check if the part is a command than doesn't return a value, return a token or 0 if not found
04dd8                 | ' 
04dd8                 | ' function iscommand(s as string) as ubyte
04dd8                 | _iscommand
04dd8     01 4A 05 F6 | 	mov	COUNT_, #1
04ddc     A8 00 A0 FD | 	call	#pushregs_
04de0                 | ' 
04de0                 | ' select case s
04de0     09 27 02 F6 | 	mov	local01, arg01
04de4     B5 01 00 FF 
04de8     90 15 06 F6 | 	mov	arg02, ##@LR__5568
04dec     13 13 02 F6 | 	mov	arg01, local01
04df0     84 20 B2 FD | 	call	#__system___string_cmp
04df4     00 FA 0D F2 | 	cmp	result1, #0 wz
04df8     94 0C 90 AD |  if_e	jmp	#LR__0320
04dfc     B5 01 00 FF 
04e00     95 15 06 F6 | 	mov	arg02, ##@LR__5569
04e04     13 13 02 F6 | 	mov	arg01, local01
04e08     6C 20 B2 FD | 	call	#__system___string_cmp
04e0c     00 FA 0D F2 | 	cmp	result1, #0 wz
04e10     84 0C 90 AD |  if_e	jmp	#LR__0321
04e14     B5 01 00 FF 
04e18     98 15 06 F6 | 	mov	arg02, ##@LR__5570
04e1c     13 13 02 F6 | 	mov	arg01, local01
04e20     54 20 B2 FD | 	call	#__system___string_cmp
04e24     00 FA 0D F2 | 	cmp	result1, #0 wz
04e28     74 0C 90 AD |  if_e	jmp	#LR__0322
04e2c     B5 01 00 FF 
04e30     9D 15 06 F6 | 	mov	arg02, ##@LR__5571
04e34     13 13 02 F6 | 	mov	arg01, local01
04e38     3C 20 B2 FD | 	call	#__system___string_cmp
04e3c     00 FA 0D F2 | 	cmp	result1, #0 wz
04e40     64 0C 90 AD |  if_e	jmp	#LR__0323
04e44     B5 01 00 FF 
04e48     A1 15 06 F6 | 	mov	arg02, ##@LR__5572
04e4c     13 13 02 F6 | 	mov	arg01, local01
04e50     24 20 B2 FD | 	call	#__system___string_cmp
04e54     00 FA 0D F2 | 	cmp	result1, #0 wz
04e58     54 0C 90 AD |  if_e	jmp	#LR__0324
04e5c     B5 01 00 FF 
04e60     A6 15 06 F6 | 	mov	arg02, ##@LR__5573
04e64     13 13 02 F6 | 	mov	arg01, local01
04e68     0C 20 B2 FD | 	call	#__system___string_cmp
04e6c     00 FA 0D F2 | 	cmp	result1, #0 wz
04e70     44 0C 90 AD |  if_e	jmp	#LR__0325
04e74     B5 01 00 FF 
04e78     AA 15 06 F6 | 	mov	arg02, ##@LR__5574
04e7c     13 13 02 F6 | 	mov	arg01, local01
04e80     F4 1F B2 FD | 	call	#__system___string_cmp
04e84     00 FA 0D F2 | 	cmp	result1, #0 wz
04e88     34 0C 90 AD |  if_e	jmp	#LR__0326
04e8c     B5 01 00 FF 
04e90     AD 15 06 F6 | 	mov	arg02, ##@LR__5575
04e94     13 13 02 F6 | 	mov	arg01, local01
04e98     DC 1F B2 FD | 	call	#__system___string_cmp
04e9c     00 FA 0D F2 | 	cmp	result1, #0 wz
04ea0     24 0C 90 AD |  if_e	jmp	#LR__0327
04ea4     B5 01 00 FF 
04ea8     B8 15 06 F6 | 	mov	arg02, ##@LR__5576
04eac     13 13 02 F6 | 	mov	arg01, local01
04eb0     C4 1F B2 FD | 	call	#__system___string_cmp
04eb4     00 FA 0D F2 | 	cmp	result1, #0 wz
04eb8     14 0C 90 AD |  if_e	jmp	#LR__0328
04ebc     B5 01 00 FF 
04ec0     BC 15 06 F6 | 	mov	arg02, ##@LR__5577
04ec4     13 13 02 F6 | 	mov	arg01, local01
04ec8     AC 1F B2 FD | 	call	#__system___string_cmp
04ecc     00 FA 0D F2 | 	cmp	result1, #0 wz
04ed0     04 0C 90 AD |  if_e	jmp	#LR__0329
04ed4     B5 01 00 FF 
04ed8     C6 15 06 F6 | 	mov	arg02, ##@LR__5578
04edc     13 13 02 F6 | 	mov	arg01, local01
04ee0     94 1F B2 FD | 	call	#__system___string_cmp
04ee4     00 FA 0D F2 | 	cmp	result1, #0 wz
04ee8     F4 0B 90 AD |  if_e	jmp	#LR__0330
04eec     B5 01 00 FF 
04ef0     CA 15 06 F6 | 	mov	arg02, ##@LR__5579
04ef4     13 13 02 F6 | 	mov	arg01, local01
04ef8     7C 1F B2 FD | 	call	#__system___string_cmp
04efc     00 FA 0D F2 | 	cmp	result1, #0 wz
04f00     E4 0B 90 AD |  if_e	jmp	#LR__0331
04f04     B5 01 00 FF 
04f08     D4 15 06 F6 | 	mov	arg02, ##@LR__5580
04f0c     13 13 02 F6 | 	mov	arg01, local01
04f10     64 1F B2 FD | 	call	#__system___string_cmp
04f14     00 FA 0D F2 | 	cmp	result1, #0 wz
04f18     D4 0B 90 AD |  if_e	jmp	#LR__0332
04f1c     B5 01 00 FF 
04f20     D8 15 06 F6 | 	mov	arg02, ##@LR__5581
04f24     13 13 02 F6 | 	mov	arg01, local01
04f28     4C 1F B2 FD | 	call	#__system___string_cmp
04f2c     00 FA 0D F2 | 	cmp	result1, #0 wz
04f30     C4 0B 90 AD |  if_e	jmp	#LR__0333
04f34     B5 01 00 FF 
04f38     E3 15 06 F6 | 	mov	arg02, ##@LR__5582
04f3c     13 13 02 F6 | 	mov	arg01, local01
04f40     34 1F B2 FD | 	call	#__system___string_cmp
04f44     00 FA 0D F2 | 	cmp	result1, #0 wz
04f48     B4 0B 90 AD |  if_e	jmp	#LR__0334
04f4c     B5 01 00 FF 
04f50     E7 15 06 F6 | 	mov	arg02, ##@LR__5583
04f54     13 13 02 F6 | 	mov	arg01, local01
04f58     1C 1F B2 FD | 	call	#__system___string_cmp
04f5c     00 FA 0D F2 | 	cmp	result1, #0 wz
04f60     A4 0B 90 AD |  if_e	jmp	#LR__0335
04f64     B5 01 00 FF 
04f68     EE 15 06 F6 | 	mov	arg02, ##@LR__5584
04f6c     13 13 02 F6 | 	mov	arg01, local01
04f70     04 1F B2 FD | 	call	#__system___string_cmp
04f74     00 FA 0D F2 | 	cmp	result1, #0 wz
04f78     94 0B 90 AD |  if_e	jmp	#LR__0336
04f7c     B5 01 00 FF 
04f80     F2 15 06 F6 | 	mov	arg02, ##@LR__5585
04f84     13 13 02 F6 | 	mov	arg01, local01
04f88     EC 1E B2 FD | 	call	#__system___string_cmp
04f8c     00 FA 0D F2 | 	cmp	result1, #0 wz
04f90     84 0B 90 AD |  if_e	jmp	#LR__0337
04f94     B5 01 00 FF 
04f98     F8 15 06 F6 | 	mov	arg02, ##@LR__5586
04f9c     13 13 02 F6 | 	mov	arg01, local01
04fa0     D4 1E B2 FD | 	call	#__system___string_cmp
04fa4     00 FA 0D F2 | 	cmp	result1, #0 wz
04fa8     74 0B 90 AD |  if_e	jmp	#LR__0338
04fac     B5 01 00 FF 
04fb0     FE 15 06 F6 | 	mov	arg02, ##@LR__5587
04fb4     13 13 02 F6 | 	mov	arg01, local01
04fb8     BC 1E B2 FD | 	call	#__system___string_cmp
04fbc     00 FA 0D F2 | 	cmp	result1, #0 wz
04fc0     64 0B 90 AD |  if_e	jmp	#LR__0339
04fc4     B6 01 00 FF 
04fc8     02 14 06 F6 | 	mov	arg02, ##@LR__5588
04fcc     13 13 02 F6 | 	mov	arg01, local01
04fd0     A4 1E B2 FD | 	call	#__system___string_cmp
04fd4     00 FA 0D F2 | 	cmp	result1, #0 wz
04fd8     54 0B 90 AD |  if_e	jmp	#LR__0340
04fdc     B6 01 00 FF 
04fe0     0A 14 06 F6 | 	mov	arg02, ##@LR__5589
04fe4     13 13 02 F6 | 	mov	arg01, local01
04fe8     8C 1E B2 FD | 	call	#__system___string_cmp
04fec     00 FA 0D F2 | 	cmp	result1, #0 wz
04ff0     44 0B 90 AD |  if_e	jmp	#LR__0341
04ff4     B6 01 00 FF 
04ff8     10 14 06 F6 | 	mov	arg02, ##@LR__5590
04ffc     13 13 02 F6 | 	mov	arg01, local01
05000     74 1E B2 FD | 	call	#__system___string_cmp
05004     00 FA 0D F2 | 	cmp	result1, #0 wz
05008     34 0B 90 AD |  if_e	jmp	#LR__0342
0500c     B6 01 00 FF 
05010     13 14 06 F6 | 	mov	arg02, ##@LR__5591
05014     13 13 02 F6 | 	mov	arg01, local01
05018     5C 1E B2 FD | 	call	#__system___string_cmp
0501c     00 FA 0D F2 | 	cmp	result1, #0 wz
05020     24 0B 90 AD |  if_e	jmp	#LR__0343
05024     B6 01 00 FF 
05028     18 14 06 F6 | 	mov	arg02, ##@LR__5592
0502c     13 13 02 F6 | 	mov	arg01, local01
05030     44 1E B2 FD | 	call	#__system___string_cmp
05034     00 FA 0D F2 | 	cmp	result1, #0 wz
05038     14 0B 90 AD |  if_e	jmp	#LR__0344
0503c     B6 01 00 FF 
05040     1F 14 06 F6 | 	mov	arg02, ##@LR__5593
05044     13 13 02 F6 | 	mov	arg01, local01
05048     2C 1E B2 FD | 	call	#__system___string_cmp
0504c     00 FA 0D F2 | 	cmp	result1, #0 wz
05050     04 0B 90 AD |  if_e	jmp	#LR__0345
05054     B6 01 00 FF 
05058     24 14 06 F6 | 	mov	arg02, ##@LR__5594
0505c     13 13 02 F6 | 	mov	arg01, local01
05060     14 1E B2 FD | 	call	#__system___string_cmp
05064     00 FA 0D F2 | 	cmp	result1, #0 wz
05068     F4 0A 90 AD |  if_e	jmp	#LR__0346
0506c     B6 01 00 FF 
05070     2B 14 06 F6 | 	mov	arg02, ##@LR__5595
05074     13 13 02 F6 | 	mov	arg01, local01
05078     FC 1D B2 FD | 	call	#__system___string_cmp
0507c     00 FA 0D F2 | 	cmp	result1, #0 wz
05080     E4 0A 90 AD |  if_e	jmp	#LR__0347
05084     B6 01 00 FF 
05088     32 14 06 F6 | 	mov	arg02, ##@LR__5596
0508c     13 13 02 F6 | 	mov	arg01, local01
05090     E4 1D B2 FD | 	call	#__system___string_cmp
05094     00 FA 0D F2 | 	cmp	result1, #0 wz
05098     D4 0A 90 AD |  if_e	jmp	#LR__0348
0509c     B6 01 00 FF 
050a0     3C 14 06 F6 | 	mov	arg02, ##@LR__5597
050a4     13 13 02 F6 | 	mov	arg01, local01
050a8     CC 1D B2 FD | 	call	#__system___string_cmp
050ac     00 FA 0D F2 | 	cmp	result1, #0 wz
050b0     C4 0A 90 AD |  if_e	jmp	#LR__0349
050b4     B6 01 00 FF 
050b8     40 14 06 F6 | 	mov	arg02, ##@LR__5598
050bc     13 13 02 F6 | 	mov	arg01, local01
050c0     B4 1D B2 FD | 	call	#__system___string_cmp
050c4     00 FA 0D F2 | 	cmp	result1, #0 wz
050c8     B4 0A 90 AD |  if_e	jmp	#LR__0350
050cc     B6 01 00 FF 
050d0     44 14 06 F6 | 	mov	arg02, ##@LR__5599
050d4     13 13 02 F6 | 	mov	arg01, local01
050d8     9C 1D B2 FD | 	call	#__system___string_cmp
050dc     00 FA 0D F2 | 	cmp	result1, #0 wz
050e0     A4 0A 90 AD |  if_e	jmp	#LR__0351
050e4     B6 01 00 FF 
050e8     4B 14 06 F6 | 	mov	arg02, ##@LR__5600
050ec     13 13 02 F6 | 	mov	arg01, local01
050f0     84 1D B2 FD | 	call	#__system___string_cmp
050f4     00 FA 0D F2 | 	cmp	result1, #0 wz
050f8     94 0A 90 AD |  if_e	jmp	#LR__0352
050fc     B6 01 00 FF 
05100     4F 14 06 F6 | 	mov	arg02, ##@LR__5601
05104     13 13 02 F6 | 	mov	arg01, local01
05108     6C 1D B2 FD | 	call	#__system___string_cmp
0510c     00 FA 0D F2 | 	cmp	result1, #0 wz
05110     84 0A 90 AD |  if_e	jmp	#LR__0353
05114     B6 01 00 FF 
05118     53 14 06 F6 | 	mov	arg02, ##@LR__5602
0511c     13 13 02 F6 | 	mov	arg01, local01
05120     54 1D B2 FD | 	call	#__system___string_cmp
05124     00 FA 0D F2 | 	cmp	result1, #0 wz
05128     74 0A 90 AD |  if_e	jmp	#LR__0354
0512c     B6 01 00 FF 
05130     59 14 06 F6 | 	mov	arg02, ##@LR__5603
05134     13 13 02 F6 | 	mov	arg01, local01
05138     3C 1D B2 FD | 	call	#__system___string_cmp
0513c     00 FA 0D F2 | 	cmp	result1, #0 wz
05140     64 0A 90 AD |  if_e	jmp	#LR__0355
05144     B6 01 00 FF 
05148     5E 14 06 F6 | 	mov	arg02, ##@LR__5604
0514c     13 13 02 F6 | 	mov	arg01, local01
05150     24 1D B2 FD | 	call	#__system___string_cmp
05154     00 FA 0D F2 | 	cmp	result1, #0 wz
05158     54 0A 90 AD |  if_e	jmp	#LR__0356
0515c     B6 01 00 FF 
05160     65 14 06 F6 | 	mov	arg02, ##@LR__5605
05164     13 13 02 F6 | 	mov	arg01, local01
05168     0C 1D B2 FD | 	call	#__system___string_cmp
0516c     00 FA 0D F2 | 	cmp	result1, #0 wz
05170     44 0A 90 AD |  if_e	jmp	#LR__0357
05174     B6 01 00 FF 
05178     69 14 06 F6 | 	mov	arg02, ##@LR__5606
0517c     13 13 02 F6 | 	mov	arg01, local01
05180     F4 1C B2 FD | 	call	#__system___string_cmp
05184     00 FA 0D F2 | 	cmp	result1, #0 wz
05188     34 0A 90 AD |  if_e	jmp	#LR__0358
0518c     B6 01 00 FF 
05190     6E 14 06 F6 | 	mov	arg02, ##@LR__5607
05194     13 13 02 F6 | 	mov	arg01, local01
05198     DC 1C B2 FD | 	call	#__system___string_cmp
0519c     00 FA 0D F2 | 	cmp	result1, #0 wz
051a0     24 0A 90 AD |  if_e	jmp	#LR__0359
051a4     B6 01 00 FF 
051a8     72 14 06 F6 | 	mov	arg02, ##@LR__5608
051ac     13 13 02 F6 | 	mov	arg01, local01
051b0     C4 1C B2 FD | 	call	#__system___string_cmp
051b4     00 FA 0D F2 | 	cmp	result1, #0 wz
051b8     14 0A 90 AD |  if_e	jmp	#LR__0360
051bc     B6 01 00 FF 
051c0     78 14 06 F6 | 	mov	arg02, ##@LR__5609
051c4     13 13 02 F6 | 	mov	arg01, local01
051c8     AC 1C B2 FD | 	call	#__system___string_cmp
051cc     00 FA 0D F2 | 	cmp	result1, #0 wz
051d0     04 0A 90 AD |  if_e	jmp	#LR__0361
051d4     B6 01 00 FF 
051d8     7B 14 06 F6 | 	mov	arg02, ##@LR__5610
051dc     13 13 02 F6 | 	mov	arg01, local01
051e0     94 1C B2 FD | 	call	#__system___string_cmp
051e4     00 FA 0D F2 | 	cmp	result1, #0 wz
051e8     F4 09 90 AD |  if_e	jmp	#LR__0362
051ec     B6 01 00 FF 
051f0     83 14 06 F6 | 	mov	arg02, ##@LR__5611
051f4     13 13 02 F6 | 	mov	arg01, local01
051f8     7C 1C B2 FD | 	call	#__system___string_cmp
051fc     00 FA 0D F2 | 	cmp	result1, #0 wz
05200     E4 09 90 AD |  if_e	jmp	#LR__0363
05204     B6 01 00 FF 
05208     87 14 06 F6 | 	mov	arg02, ##@LR__5612
0520c     13 13 02 F6 | 	mov	arg01, local01
05210     64 1C B2 FD | 	call	#__system___string_cmp
05214     00 FA 0D F2 | 	cmp	result1, #0 wz
05218     D4 09 90 AD |  if_e	jmp	#LR__0364
0521c     B6 01 00 FF 
05220     8C 14 06 F6 | 	mov	arg02, ##@LR__5613
05224     13 13 02 F6 | 	mov	arg01, local01
05228     4C 1C B2 FD | 	call	#__system___string_cmp
0522c     00 FA 0D F2 | 	cmp	result1, #0 wz
05230     C4 09 90 AD |  if_e	jmp	#LR__0365
05234     B6 01 00 FF 
05238     90 14 06 F6 | 	mov	arg02, ##@LR__5614
0523c     13 13 02 F6 | 	mov	arg01, local01
05240     34 1C B2 FD | 	call	#__system___string_cmp
05244     00 FA 0D F2 | 	cmp	result1, #0 wz
05248     B4 09 90 AD |  if_e	jmp	#LR__0366
0524c     B6 01 00 FF 
05250     95 14 06 F6 | 	mov	arg02, ##@LR__5615
05254     13 13 02 F6 | 	mov	arg01, local01
05258     1C 1C B2 FD | 	call	#__system___string_cmp
0525c     00 FA 0D F2 | 	cmp	result1, #0 wz
05260     A4 09 90 AD |  if_e	jmp	#LR__0367
05264     B6 01 00 FF 
05268     99 14 06 F6 | 	mov	arg02, ##@LR__5616
0526c     13 13 02 F6 | 	mov	arg01, local01
05270     04 1C B2 FD | 	call	#__system___string_cmp
05274     00 FA 0D F2 | 	cmp	result1, #0 wz
05278     94 09 90 AD |  if_e	jmp	#LR__0368
0527c     B6 01 00 FF 
05280     9C 14 06 F6 | 	mov	arg02, ##@LR__5617
05284     13 13 02 F6 | 	mov	arg01, local01
05288     EC 1B B2 FD | 	call	#__system___string_cmp
0528c     00 FA 0D F2 | 	cmp	result1, #0 wz
05290     84 09 90 AD |  if_e	jmp	#LR__0369
05294     B6 01 00 FF 
05298     A2 14 06 F6 | 	mov	arg02, ##@LR__5618
0529c     13 13 02 F6 | 	mov	arg01, local01
052a0     D4 1B B2 FD | 	call	#__system___string_cmp
052a4     00 FA 0D F2 | 	cmp	result1, #0 wz
052a8     74 09 90 AD |  if_e	jmp	#LR__0370
052ac     B6 01 00 FF 
052b0     A6 14 06 F6 | 	mov	arg02, ##@LR__5619
052b4     13 13 02 F6 | 	mov	arg01, local01
052b8     BC 1B B2 FD | 	call	#__system___string_cmp
052bc     00 FA 0D F2 | 	cmp	result1, #0 wz
052c0     64 09 90 AD |  if_e	jmp	#LR__0371
052c4     B6 01 00 FF 
052c8     AA 14 06 F6 | 	mov	arg02, ##@LR__5620
052cc     13 13 02 F6 | 	mov	arg01, local01
052d0     A4 1B B2 FD | 	call	#__system___string_cmp
052d4     00 FA 0D F2 | 	cmp	result1, #0 wz
052d8     54 09 90 AD |  if_e	jmp	#LR__0372
052dc     B6 01 00 FF 
052e0     B0 14 06 F6 | 	mov	arg02, ##@LR__5621
052e4     13 13 02 F6 | 	mov	arg01, local01
052e8     8C 1B B2 FD | 	call	#__system___string_cmp
052ec     00 FA 0D F2 | 	cmp	result1, #0 wz
052f0     44 09 90 AD |  if_e	jmp	#LR__0373
052f4     B6 01 00 FF 
052f8     B5 14 06 F6 | 	mov	arg02, ##@LR__5622
052fc     13 13 02 F6 | 	mov	arg01, local01
05300     74 1B B2 FD | 	call	#__system___string_cmp
05304     00 FA 0D F2 | 	cmp	result1, #0 wz
05308     34 09 90 AD |  if_e	jmp	#LR__0374
0530c     B6 01 00 FF 
05310     B8 14 06 F6 | 	mov	arg02, ##@LR__5623
05314     13 13 02 F6 | 	mov	arg01, local01
05318     5C 1B B2 FD | 	call	#__system___string_cmp
0531c     00 FA 0D F2 | 	cmp	result1, #0 wz
05320     24 09 90 AD |  if_e	jmp	#LR__0375
05324     B6 01 00 FF 
05328     BB 14 06 F6 | 	mov	arg02, ##@LR__5624
0532c     13 13 02 F6 | 	mov	arg01, local01
05330     44 1B B2 FD | 	call	#__system___string_cmp
05334     00 FA 0D F2 | 	cmp	result1, #0 wz
05338     14 09 90 AD |  if_e	jmp	#LR__0376
0533c     B6 01 00 FF 
05340     BF 14 06 F6 | 	mov	arg02, ##@LR__5625
05344     13 13 02 F6 | 	mov	arg01, local01
05348     2C 1B B2 FD | 	call	#__system___string_cmp
0534c     00 FA 0D F2 | 	cmp	result1, #0 wz
05350     04 09 90 AD |  if_e	jmp	#LR__0377
05354     B6 01 00 FF 
05358     C2 14 06 F6 | 	mov	arg02, ##@LR__5626
0535c     13 13 02 F6 | 	mov	arg01, local01
05360     14 1B B2 FD | 	call	#__system___string_cmp
05364     00 FA 0D F2 | 	cmp	result1, #0 wz
05368     F4 08 90 AD |  if_e	jmp	#LR__0378
0536c     B6 01 00 FF 
05370     C8 14 06 F6 | 	mov	arg02, ##@LR__5627
05374     13 13 02 F6 | 	mov	arg01, local01
05378     FC 1A B2 FD | 	call	#__system___string_cmp
0537c     00 FA 0D F2 | 	cmp	result1, #0 wz
05380     E4 08 90 AD |  if_e	jmp	#LR__0379
05384     B6 01 00 FF 
05388     CD 14 06 F6 | 	mov	arg02, ##@LR__5628
0538c     13 13 02 F6 | 	mov	arg01, local01
05390     E4 1A B2 FD | 	call	#__system___string_cmp
05394     00 FA 0D F2 | 	cmp	result1, #0 wz
05398     D4 08 90 AD |  if_e	jmp	#LR__0380
0539c     B6 01 00 FF 
053a0     D0 14 06 F6 | 	mov	arg02, ##@LR__5629
053a4     13 13 02 F6 | 	mov	arg01, local01
053a8     CC 1A B2 FD | 	call	#__system___string_cmp
053ac     00 FA 0D F2 | 	cmp	result1, #0 wz
053b0     C4 08 90 AD |  if_e	jmp	#LR__0381
053b4     B6 01 00 FF 
053b8     D5 14 06 F6 | 	mov	arg02, ##@LR__5630
053bc     13 13 02 F6 | 	mov	arg01, local01
053c0     B4 1A B2 FD | 	call	#__system___string_cmp
053c4     00 FA 0D F2 | 	cmp	result1, #0 wz
053c8     B4 08 90 AD |  if_e	jmp	#LR__0382
053cc     B6 01 00 FF 
053d0     D9 14 06 F6 | 	mov	arg02, ##@LR__5631
053d4     13 13 02 F6 | 	mov	arg01, local01
053d8     9C 1A B2 FD | 	call	#__system___string_cmp
053dc     00 FA 0D F2 | 	cmp	result1, #0 wz
053e0     A4 08 90 AD |  if_e	jmp	#LR__0383
053e4     B6 01 00 FF 
053e8     DF 14 06 F6 | 	mov	arg02, ##@LR__5632
053ec     13 13 02 F6 | 	mov	arg01, local01
053f0     84 1A B2 FD | 	call	#__system___string_cmp
053f4     00 FA 0D F2 | 	cmp	result1, #0 wz
053f8     94 08 90 AD |  if_e	jmp	#LR__0384
053fc     B6 01 00 FF 
05400     E5 14 06 F6 | 	mov	arg02, ##@LR__5633
05404     13 13 02 F6 | 	mov	arg01, local01
05408     6C 1A B2 FD | 	call	#__system___string_cmp
0540c     00 FA 0D F2 | 	cmp	result1, #0 wz
05410     84 08 90 AD |  if_e	jmp	#LR__0385
05414     B6 01 00 FF 
05418     EA 14 06 F6 | 	mov	arg02, ##@LR__5634
0541c     13 13 02 F6 | 	mov	arg01, local01
05420     54 1A B2 FD | 	call	#__system___string_cmp
05424     00 FA 0D F2 | 	cmp	result1, #0 wz
05428     74 08 90 AD |  if_e	jmp	#LR__0386
0542c     B6 01 00 FF 
05430     ED 14 06 F6 | 	mov	arg02, ##@LR__5635
05434     13 13 02 F6 | 	mov	arg01, local01
05438     3C 1A B2 FD | 	call	#__system___string_cmp
0543c     00 FA 0D F2 | 	cmp	result1, #0 wz
05440     64 08 90 AD |  if_e	jmp	#LR__0387
05444     B6 01 00 FF 
05448     F3 14 06 F6 | 	mov	arg02, ##@LR__5636
0544c     13 13 02 F6 | 	mov	arg01, local01
05450     24 1A B2 FD | 	call	#__system___string_cmp
05454     00 FA 0D F2 | 	cmp	result1, #0 wz
05458     54 08 90 AD |  if_e	jmp	#LR__0388
0545c     B6 01 00 FF 
05460     F7 14 06 F6 | 	mov	arg02, ##@LR__5637
05464     13 13 02 F6 | 	mov	arg01, local01
05468     0C 1A B2 FD | 	call	#__system___string_cmp
0546c     00 FA 0D F2 | 	cmp	result1, #0 wz
05470     44 08 90 AD |  if_e	jmp	#LR__0389
05474     B6 01 00 FF 
05478     FC 14 06 F6 | 	mov	arg02, ##@LR__5638
0547c     13 13 02 F6 | 	mov	arg01, local01
05480     F4 19 B2 FD | 	call	#__system___string_cmp
05484     00 FA 0D F2 | 	cmp	result1, #0 wz
05488     34 08 90 AD |  if_e	jmp	#LR__0390
0548c     B6 01 00 FF 
05490     FF 14 06 F6 | 	mov	arg02, ##@LR__5639
05494     13 13 02 F6 | 	mov	arg01, local01
05498     DC 19 B2 FD | 	call	#__system___string_cmp
0549c     00 FA 0D F2 | 	cmp	result1, #0 wz
054a0     24 08 90 AD |  if_e	jmp	#LR__0391
054a4     B6 01 00 FF 
054a8     02 15 06 F6 | 	mov	arg02, ##@LR__5640
054ac     13 13 02 F6 | 	mov	arg01, local01
054b0     C4 19 B2 FD | 	call	#__system___string_cmp
054b4     00 FA 0D F2 | 	cmp	result1, #0 wz
054b8     14 08 90 AD |  if_e	jmp	#LR__0392
054bc     B6 01 00 FF 
054c0     07 15 06 F6 | 	mov	arg02, ##@LR__5641
054c4     13 13 02 F6 | 	mov	arg01, local01
054c8     AC 19 B2 FD | 	call	#__system___string_cmp
054cc     00 FA 0D F2 | 	cmp	result1, #0 wz
054d0     04 08 90 AD |  if_e	jmp	#LR__0393
054d4     B6 01 00 FF 
054d8     0D 15 06 F6 | 	mov	arg02, ##@LR__5642
054dc     13 13 02 F6 | 	mov	arg01, local01
054e0     94 19 B2 FD | 	call	#__system___string_cmp
054e4     00 FA 0D F2 | 	cmp	result1, #0 wz
054e8     F4 07 90 AD |  if_e	jmp	#LR__0394
054ec     B6 01 00 FF 
054f0     11 15 06 F6 | 	mov	arg02, ##@LR__5643
054f4     13 13 02 F6 | 	mov	arg01, local01
054f8     7C 19 B2 FD | 	call	#__system___string_cmp
054fc     00 FA 0D F2 | 	cmp	result1, #0 wz
05500     E4 07 90 AD |  if_e	jmp	#LR__0395
05504     B6 01 00 FF 
05508     1A 15 06 F6 | 	mov	arg02, ##@LR__5644
0550c     13 13 02 F6 | 	mov	arg01, local01
05510     64 19 B2 FD | 	call	#__system___string_cmp
05514     00 FA 0D F2 | 	cmp	result1, #0 wz
05518     D4 07 90 AD |  if_e	jmp	#LR__0396
0551c     B6 01 00 FF 
05520     20 15 06 F6 | 	mov	arg02, ##@LR__5645
05524     13 13 02 F6 | 	mov	arg01, local01
05528     4C 19 B2 FD | 	call	#__system___string_cmp
0552c     00 FA 0D F2 | 	cmp	result1, #0 wz
05530     C4 07 90 AD |  if_e	jmp	#LR__0397
05534     B6 01 00 FF 
05538     26 15 06 F6 | 	mov	arg02, ##@LR__5646
0553c     13 13 02 F6 | 	mov	arg01, local01
05540     34 19 B2 FD | 	call	#__system___string_cmp
05544     00 FA 0D F2 | 	cmp	result1, #0 wz
05548     B4 07 90 AD |  if_e	jmp	#LR__0398
0554c     B6 01 00 FF 
05550     2F 15 06 F6 | 	mov	arg02, ##@LR__5647
05554     13 13 02 F6 | 	mov	arg01, local01
05558     1C 19 B2 FD | 	call	#__system___string_cmp
0555c     00 FA 0D F2 | 	cmp	result1, #0 wz
05560     A4 07 90 AD |  if_e	jmp	#LR__0399
05564     B6 01 00 FF 
05568     39 15 06 F6 | 	mov	arg02, ##@LR__5648
0556c     13 13 02 F6 | 	mov	arg01, local01
05570     04 19 B2 FD | 	call	#__system___string_cmp
05574     00 FA 0D F2 | 	cmp	result1, #0 wz
05578     94 07 90 AD |  if_e	jmp	#LR__0400
0557c     B6 01 00 FF 
05580     42 15 06 F6 | 	mov	arg02, ##@LR__5649
05584     13 13 02 F6 | 	mov	arg01, local01
05588     EC 18 B2 FD | 	call	#__system___string_cmp
0558c     00 FA 0D F2 | 	cmp	result1, #0 wz
05590     84 07 90 AD |  if_e	jmp	#LR__0401
05594     B6 01 00 FF 
05598     47 15 06 F6 | 	mov	arg02, ##@LR__5650
0559c     13 13 02 F6 | 	mov	arg01, local01
055a0     D4 18 B2 FD | 	call	#__system___string_cmp
055a4     00 FA 0D F2 | 	cmp	result1, #0 wz
055a8     74 07 90 AD |  if_e	jmp	#LR__0402
055ac     B6 01 00 FF 
055b0     4A 15 06 F6 | 	mov	arg02, ##@LR__5651
055b4     13 13 02 F6 | 	mov	arg01, local01
055b8     BC 18 B2 FD | 	call	#__system___string_cmp
055bc     00 FA 0D F2 | 	cmp	result1, #0 wz
055c0     64 07 90 AD |  if_e	jmp	#LR__0403
055c4     B6 01 00 FF 
055c8     4F 15 06 F6 | 	mov	arg02, ##@LR__5652
055cc     13 13 02 F6 | 	mov	arg01, local01
055d0     A4 18 B2 FD | 	call	#__system___string_cmp
055d4     00 FA 0D F2 | 	cmp	result1, #0 wz
055d8     54 07 90 AD |  if_e	jmp	#LR__0404
055dc     B6 01 00 FF 
055e0     53 15 06 F6 | 	mov	arg02, ##@LR__5653
055e4     13 13 02 F6 | 	mov	arg01, local01
055e8     8C 18 B2 FD | 	call	#__system___string_cmp
055ec     00 FA 0D F2 | 	cmp	result1, #0 wz
055f0     44 07 90 AD |  if_e	jmp	#LR__0405
055f4     B6 01 00 FF 
055f8     58 15 06 F6 | 	mov	arg02, ##@LR__5654
055fc     13 13 02 F6 | 	mov	arg01, local01
05600     74 18 B2 FD | 	call	#__system___string_cmp
05604     00 FA 0D F2 | 	cmp	result1, #0 wz
05608     34 07 90 AD |  if_e	jmp	#LR__0406
0560c     B6 01 00 FF 
05610     5C 15 06 F6 | 	mov	arg02, ##@LR__5655
05614     13 13 02 F6 | 	mov	arg01, local01
05618     5C 18 B2 FD | 	call	#__system___string_cmp
0561c     00 FA 0D F2 | 	cmp	result1, #0 wz
05620     24 07 90 AD |  if_e	jmp	#LR__0407
05624     B6 01 00 FF 
05628     65 15 06 F6 | 	mov	arg02, ##@LR__5656
0562c     13 13 02 F6 | 	mov	arg01, local01
05630     44 18 B2 FD | 	call	#__system___string_cmp
05634     00 FA 0D F2 | 	cmp	result1, #0 wz
05638     14 07 90 AD |  if_e	jmp	#LR__0408
0563c     B6 01 00 FF 
05640     6A 15 06 F6 | 	mov	arg02, ##@LR__5657
05644     13 13 02 F6 | 	mov	arg01, local01
05648     2C 18 B2 FD | 	call	#__system___string_cmp
0564c     00 FA 0D F2 | 	cmp	result1, #0 wz
05650     04 07 90 AD |  if_e	jmp	#LR__0409
05654     B6 01 00 FF 
05658     70 15 06 F6 | 	mov	arg02, ##@LR__5658
0565c     13 13 02 F6 | 	mov	arg01, local01
05660     14 18 B2 FD | 	call	#__system___string_cmp
05664     00 FA 0D F2 | 	cmp	result1, #0 wz
05668     F4 06 90 AD |  if_e	jmp	#LR__0410
0566c     B6 01 00 FF 
05670     72 15 06 F6 | 	mov	arg02, ##@LR__5659
05674     13 13 02 F6 | 	mov	arg01, local01
05678     FC 17 B2 FD | 	call	#__system___string_cmp
0567c     00 FA 0D F2 | 	cmp	result1, #0 wz
05680     E4 06 90 AD |  if_e	jmp	#LR__0411
05684     B6 01 00 FF 
05688     76 15 06 F6 | 	mov	arg02, ##@LR__5660
0568c     13 13 02 F6 | 	mov	arg01, local01
05690     E4 17 B2 FD | 	call	#__system___string_cmp
05694     00 FA 0D F2 | 	cmp	result1, #0 wz
05698     D4 06 90 AD |  if_e	jmp	#LR__0412
0569c     B6 01 00 FF 
056a0     7A 15 06 F6 | 	mov	arg02, ##@LR__5661
056a4     13 13 02 F6 | 	mov	arg01, local01
056a8     CC 17 B2 FD | 	call	#__system___string_cmp
056ac     00 FA 0D F2 | 	cmp	result1, #0 wz
056b0     C4 06 90 AD |  if_e	jmp	#LR__0413
056b4     B6 01 00 FF 
056b8     7F 15 06 F6 | 	mov	arg02, ##@LR__5662
056bc     13 13 02 F6 | 	mov	arg01, local01
056c0     B4 17 B2 FD | 	call	#__system___string_cmp
056c4     00 FA 0D F2 | 	cmp	result1, #0 wz
056c8     B4 06 90 AD |  if_e	jmp	#LR__0414
056cc     B6 01 00 FF 
056d0     87 15 06 F6 | 	mov	arg02, ##@LR__5663
056d4     13 13 02 F6 | 	mov	arg01, local01
056d8     9C 17 B2 FD | 	call	#__system___string_cmp
056dc     00 FA 0D F2 | 	cmp	result1, #0 wz
056e0     A4 06 90 AD |  if_e	jmp	#LR__0415
056e4     B6 01 00 FF 
056e8     8B 15 06 F6 | 	mov	arg02, ##@LR__5664
056ec     13 13 02 F6 | 	mov	arg01, local01
056f0     84 17 B2 FD | 	call	#__system___string_cmp
056f4     00 FA 0D F2 | 	cmp	result1, #0 wz
056f8     94 06 90 AD |  if_e	jmp	#LR__0416
056fc     B6 01 00 FF 
05700     8D 15 06 F6 | 	mov	arg02, ##@LR__5665
05704     13 13 02 F6 | 	mov	arg01, local01
05708     6C 17 B2 FD | 	call	#__system___string_cmp
0570c     00 FA 0D F2 | 	cmp	result1, #0 wz
05710     84 06 90 AD |  if_e	jmp	#LR__0417
05714     B6 01 00 FF 
05718     95 15 06 F6 | 	mov	arg02, ##@LR__5666
0571c     13 13 02 F6 | 	mov	arg01, local01
05720     54 17 B2 FD | 	call	#__system___string_cmp
05724     00 FA 0D F2 | 	cmp	result1, #0 wz
05728     74 06 90 AD |  if_e	jmp	#LR__0418
0572c     B6 01 00 FF 
05730     9C 15 06 F6 | 	mov	arg02, ##@LR__5667
05734     13 13 02 F6 | 	mov	arg01, local01
05738     3C 17 B2 FD | 	call	#__system___string_cmp
0573c     00 FA 0D F2 | 	cmp	result1, #0 wz
05740     64 06 90 AD |  if_e	jmp	#LR__0419
05744     B6 01 00 FF 
05748     A0 15 06 F6 | 	mov	arg02, ##@LR__5668
0574c     13 13 02 F6 | 	mov	arg01, local01
05750     24 17 B2 FD | 	call	#__system___string_cmp
05754     00 FA 0D F2 | 	cmp	result1, #0 wz
05758     54 06 90 AD |  if_e	jmp	#LR__0420
0575c     B6 01 00 FF 
05760     A5 15 06 F6 | 	mov	arg02, ##@LR__5669
05764     13 13 02 F6 | 	mov	arg01, local01
05768     0C 17 B2 FD | 	call	#__system___string_cmp
0576c     00 FA 0D F2 | 	cmp	result1, #0 wz
05770     44 06 90 AD |  if_e	jmp	#LR__0421
05774     B6 01 00 FF 
05778     A8 15 06 F6 | 	mov	arg02, ##@LR__5670
0577c     13 13 02 F6 | 	mov	arg01, local01
05780     F4 16 B2 FD | 	call	#__system___string_cmp
05784     00 FA 0D F2 | 	cmp	result1, #0 wz
05788     34 06 90 AD |  if_e	jmp	#LR__0422
0578c     B6 01 00 FF 
05790     B1 15 06 F6 | 	mov	arg02, ##@LR__5671
05794     13 13 02 F6 | 	mov	arg01, local01
05798     DC 16 B2 FD | 	call	#__system___string_cmp
0579c     00 FA 0D F2 | 	cmp	result1, #0 wz
057a0     24 06 90 AD |  if_e	jmp	#LR__0423
057a4     B6 01 00 FF 
057a8     B4 15 06 F6 | 	mov	arg02, ##@LR__5672
057ac     13 13 02 F6 | 	mov	arg01, local01
057b0     C4 16 B2 FD | 	call	#__system___string_cmp
057b4     00 FA 0D F2 | 	cmp	result1, #0 wz
057b8     14 06 90 AD |  if_e	jmp	#LR__0424
057bc     B6 01 00 FF 
057c0     BD 15 06 F6 | 	mov	arg02, ##@LR__5673
057c4     13 13 02 F6 | 	mov	arg01, local01
057c8     AC 16 B2 FD | 	call	#__system___string_cmp
057cc     00 FA 0D F2 | 	cmp	result1, #0 wz
057d0     04 06 90 AD |  if_e	jmp	#LR__0425
057d4     B6 01 00 FF 
057d8     C1 15 06 F6 | 	mov	arg02, ##@LR__5674
057dc     13 13 02 F6 | 	mov	arg01, local01
057e0     94 16 B2 FD | 	call	#__system___string_cmp
057e4     00 FA 0D F2 | 	cmp	result1, #0 wz
057e8     F4 05 90 AD |  if_e	jmp	#LR__0426
057ec     B6 01 00 FF 
057f0     C8 15 06 F6 | 	mov	arg02, ##@LR__5675
057f4     13 13 02 F6 | 	mov	arg01, local01
057f8     7C 16 B2 FD | 	call	#__system___string_cmp
057fc     00 FA 0D F2 | 	cmp	result1, #0 wz
05800     E4 05 90 AD |  if_e	jmp	#LR__0427
05804     B6 01 00 FF 
05808     CC 15 06 F6 | 	mov	arg02, ##@LR__5676
0580c     13 13 02 F6 | 	mov	arg01, local01
05810     64 16 B2 FD | 	call	#__system___string_cmp
05814     00 FA 0D F2 | 	cmp	result1, #0 wz
05818     D4 05 90 AD |  if_e	jmp	#LR__0428
0581c     B6 01 00 FF 
05820     D3 15 06 F6 | 	mov	arg02, ##@LR__5677
05824     13 13 02 F6 | 	mov	arg01, local01
05828     4C 16 B2 FD | 	call	#__system___string_cmp
0582c     00 FA 0D F2 | 	cmp	result1, #0 wz
05830     C4 05 90 AD |  if_e	jmp	#LR__0429
05834     B6 01 00 FF 
05838     D7 15 06 F6 | 	mov	arg02, ##@LR__5678
0583c     13 13 02 F6 | 	mov	arg01, local01
05840     34 16 B2 FD | 	call	#__system___string_cmp
05844     00 FA 0D F2 | 	cmp	result1, #0 wz
05848     B4 05 90 AD |  if_e	jmp	#LR__0430
0584c     B6 01 00 FF 
05850     DE 15 06 F6 | 	mov	arg02, ##@LR__5679
05854     13 13 02 F6 | 	mov	arg01, local01
05858     1C 16 B2 FD | 	call	#__system___string_cmp
0585c     00 FA 0D F2 | 	cmp	result1, #0 wz
05860     A4 05 90 AD |  if_e	jmp	#LR__0431
05864     B6 01 00 FF 
05868     E2 15 06 F6 | 	mov	arg02, ##@LR__5680
0586c     13 13 02 F6 | 	mov	arg01, local01
05870     04 16 B2 FD | 	call	#__system___string_cmp
05874     00 FA 0D F2 | 	cmp	result1, #0 wz
05878     94 05 90 AD |  if_e	jmp	#LR__0432
0587c     B6 01 00 FF 
05880     ED 15 06 F6 | 	mov	arg02, ##@LR__5681
05884     13 13 02 F6 | 	mov	arg01, local01
05888     EC 15 B2 FD | 	call	#__system___string_cmp
0588c     00 FA 0D F2 | 	cmp	result1, #0 wz
05890     84 05 90 AD |  if_e	jmp	#LR__0433
05894     B6 01 00 FF 
05898     F1 15 06 F6 | 	mov	arg02, ##@LR__5682
0589c     13 13 02 F6 | 	mov	arg01, local01
058a0     D4 15 B2 FD | 	call	#__system___string_cmp
058a4     00 FA 0D F2 | 	cmp	result1, #0 wz
058a8     74 05 90 AD |  if_e	jmp	#LR__0434
058ac     B6 01 00 FF 
058b0     F8 15 06 F6 | 	mov	arg02, ##@LR__5683
058b4     13 13 02 F6 | 	mov	arg01, local01
058b8     BC 15 B2 FD | 	call	#__system___string_cmp
058bc     00 FA 0D F2 | 	cmp	result1, #0 wz
058c0     64 05 90 AD |  if_e	jmp	#LR__0435
058c4     B6 01 00 FF 
058c8     FC 15 06 F6 | 	mov	arg02, ##@LR__5684
058cc     13 13 02 F6 | 	mov	arg01, local01
058d0     A4 15 B2 FD | 	call	#__system___string_cmp
058d4     00 FA 0D F2 | 	cmp	result1, #0 wz
058d8     54 05 90 AD |  if_e	jmp	#LR__0436
058dc     B7 01 00 FF 
058e0     04 14 06 F6 | 	mov	arg02, ##@LR__5685
058e4     13 13 02 F6 | 	mov	arg01, local01
058e8     8C 15 B2 FD | 	call	#__system___string_cmp
058ec     00 FA 0D F2 | 	cmp	result1, #0 wz
058f0     44 05 90 AD |  if_e	jmp	#LR__0437
058f4     B7 01 00 FF 
058f8     08 14 06 F6 | 	mov	arg02, ##@LR__5686
058fc     13 13 02 F6 | 	mov	arg01, local01
05900     74 15 B2 FD | 	call	#__system___string_cmp
05904     00 FA 0D F2 | 	cmp	result1, #0 wz
05908     34 05 90 AD |  if_e	jmp	#LR__0438
0590c     B7 01 00 FF 
05910     0F 14 06 F6 | 	mov	arg02, ##@LR__5687
05914     13 13 02 F6 | 	mov	arg01, local01
05918     5C 15 B2 FD | 	call	#__system___string_cmp
0591c     00 FA 0D F2 | 	cmp	result1, #0 wz
05920     24 05 90 AD |  if_e	jmp	#LR__0439
05924     B7 01 00 FF 
05928     16 14 06 F6 | 	mov	arg02, ##@LR__5688
0592c     13 13 02 F6 | 	mov	arg01, local01
05930     44 15 B2 FD | 	call	#__system___string_cmp
05934     00 FA 0D F2 | 	cmp	result1, #0 wz
05938     14 05 90 AD |  if_e	jmp	#LR__0440
0593c     B7 01 00 FF 
05940     1A 14 06 F6 | 	mov	arg02, ##@LR__5689
05944     13 13 02 F6 | 	mov	arg01, local01
05948     2C 15 B2 FD | 	call	#__system___string_cmp
0594c     00 FA 0D F2 | 	cmp	result1, #0 wz
05950     04 05 90 AD |  if_e	jmp	#LR__0441
05954     B7 01 00 FF 
05958     20 14 06 F6 | 	mov	arg02, ##@LR__5690
0595c     13 13 02 F6 | 	mov	arg01, local01
05960     14 15 B2 FD | 	call	#__system___string_cmp
05964     00 FA 0D F2 | 	cmp	result1, #0 wz
05968     F4 04 90 AD |  if_e	jmp	#LR__0442
0596c     B7 01 00 FF 
05970     24 14 06 F6 | 	mov	arg02, ##@LR__5691
05974     13 13 02 F6 | 	mov	arg01, local01
05978     FC 14 B2 FD | 	call	#__system___string_cmp
0597c     00 FA 0D F2 | 	cmp	result1, #0 wz
05980     E4 04 90 AD |  if_e	jmp	#LR__0443
05984     B7 01 00 FF 
05988     2B 14 06 F6 | 	mov	arg02, ##@LR__5692
0598c     13 13 02 F6 | 	mov	arg01, local01
05990     E4 14 B2 FD | 	call	#__system___string_cmp
05994     00 FA 0D F2 | 	cmp	result1, #0 wz
05998     D4 04 90 AD |  if_e	jmp	#LR__0444
0599c     B7 01 00 FF 
059a0     30 14 06 F6 | 	mov	arg02, ##@LR__5693
059a4     13 13 02 F6 | 	mov	arg01, local01
059a8     CC 14 B2 FD | 	call	#__system___string_cmp
059ac     00 FA 0D F2 | 	cmp	result1, #0 wz
059b0     C4 04 90 AD |  if_e	jmp	#LR__0445
059b4     B7 01 00 FF 
059b8     35 14 06 F6 | 	mov	arg02, ##@LR__5694
059bc     13 13 02 F6 | 	mov	arg01, local01
059c0     B4 14 B2 FD | 	call	#__system___string_cmp
059c4     00 FA 0D F2 | 	cmp	result1, #0 wz
059c8     B4 04 90 AD |  if_e	jmp	#LR__0446
059cc     B7 01 00 FF 
059d0     3C 14 06 F6 | 	mov	arg02, ##@LR__5695
059d4     13 13 02 F6 | 	mov	arg01, local01
059d8     9C 14 B2 FD | 	call	#__system___string_cmp
059dc     00 FA 0D F2 | 	cmp	result1, #0 wz
059e0     A4 04 90 AD |  if_e	jmp	#LR__0447
059e4     B7 01 00 FF 
059e8     3F 14 06 F6 | 	mov	arg02, ##@LR__5696
059ec     13 13 02 F6 | 	mov	arg01, local01
059f0     84 14 B2 FD | 	call	#__system___string_cmp
059f4     00 FA 0D F2 | 	cmp	result1, #0 wz
059f8     94 04 90 AD |  if_e	jmp	#LR__0448
059fc     B7 01 00 FF 
05a00     49 14 06 F6 | 	mov	arg02, ##@LR__5697
05a04     13 13 02 F6 | 	mov	arg01, local01
05a08     6C 14 B2 FD | 	call	#__system___string_cmp
05a0c     00 FA 0D F2 | 	cmp	result1, #0 wz
05a10     84 04 90 AD |  if_e	jmp	#LR__0449
05a14     B7 01 00 FF 
05a18     4D 14 06 F6 | 	mov	arg02, ##@LR__5698
05a1c     13 13 02 F6 | 	mov	arg01, local01
05a20     54 14 B2 FD | 	call	#__system___string_cmp
05a24     00 FA 0D F2 | 	cmp	result1, #0 wz
05a28     74 04 90 AD |  if_e	jmp	#LR__0450
05a2c     B7 01 00 FF 
05a30     55 14 06 F6 | 	mov	arg02, ##@LR__5699
05a34     13 13 02 F6 | 	mov	arg01, local01
05a38     3C 14 B2 FD | 	call	#__system___string_cmp
05a3c     00 FA 0D F2 | 	cmp	result1, #0 wz
05a40     64 04 90 AD |  if_e	jmp	#LR__0451
05a44     B7 01 00 FF 
05a48     59 14 06 F6 | 	mov	arg02, ##@LR__5700
05a4c     13 13 02 F6 | 	mov	arg01, local01
05a50     24 14 B2 FD | 	call	#__system___string_cmp
05a54     00 FA 0D F2 | 	cmp	result1, #0 wz
05a58     54 04 90 AD |  if_e	jmp	#LR__0452
05a5c     B7 01 00 FF 
05a60     5F 14 06 F6 | 	mov	arg02, ##@LR__5701
05a64     13 13 02 F6 | 	mov	arg01, local01
05a68     0C 14 B2 FD | 	call	#__system___string_cmp
05a6c     00 FA 0D F2 | 	cmp	result1, #0 wz
05a70     44 04 90 AD |  if_e	jmp	#LR__0453
05a74     B7 01 00 FF 
05a78     65 14 06 F6 | 	mov	arg02, ##@LR__5702
05a7c     13 13 02 F6 | 	mov	arg01, local01
05a80     F4 13 B2 FD | 	call	#__system___string_cmp
05a84     00 FA 0D F2 | 	cmp	result1, #0 wz
05a88     34 04 90 AD |  if_e	jmp	#LR__0454
05a8c     38 04 90 FD | 	jmp	#LR__0455
05a90                 | LR__0320
05a90     5C FA 05 F6 | 	mov	result1, #92
05a94     34 04 90 FD | 	jmp	#LR__0456
05a98                 | LR__0321
05a98     5C FA 05 F6 | 	mov	result1, #92
05a9c     2C 04 90 FD | 	jmp	#LR__0456
05aa0                 | LR__0322
05aa0     B9 FA 05 F6 | 	mov	result1, #185
05aa4     24 04 90 FD | 	jmp	#LR__0456
05aa8                 | LR__0323
05aa8     47 FA 05 F6 | 	mov	result1, #71
05aac     1C 04 90 FD | 	jmp	#LR__0456
05ab0                 | LR__0324
05ab0     59 FA 05 F6 | 	mov	result1, #89
05ab4     14 04 90 FD | 	jmp	#LR__0456
05ab8                 | LR__0325
05ab8     59 FA 05 F6 | 	mov	result1, #89
05abc     0C 04 90 FD | 	jmp	#LR__0456
05ac0                 | LR__0326
05ac0     C3 FA 05 F6 | 	mov	result1, #195
05ac4     04 04 90 FD | 	jmp	#LR__0456
05ac8                 | LR__0327
05ac8     AE FA 05 F6 | 	mov	result1, #174
05acc     FC 03 90 FD | 	jmp	#LR__0456
05ad0                 | LR__0328
05ad0     AE FA 05 F6 | 	mov	result1, #174
05ad4     F4 03 90 FD | 	jmp	#LR__0456
05ad8                 | LR__0329
05ad8     B1 FA 05 F6 | 	mov	result1, #177
05adc     EC 03 90 FD | 	jmp	#LR__0456
05ae0                 | LR__0330
05ae0     B1 FA 05 F6 | 	mov	result1, #177
05ae4     E4 03 90 FD | 	jmp	#LR__0456
05ae8                 | LR__0331
05ae8     AF FA 05 F6 | 	mov	result1, #175
05aec     DC 03 90 FD | 	jmp	#LR__0456
05af0                 | LR__0332
05af0     AF FA 05 F6 | 	mov	result1, #175
05af4     D4 03 90 FD | 	jmp	#LR__0456
05af8                 | LR__0333
05af8     B0 FA 05 F6 | 	mov	result1, #176
05afc     CC 03 90 FD | 	jmp	#LR__0456
05b00                 | LR__0334
05b00     B0 FA 05 F6 | 	mov	result1, #176
05b04     C4 03 90 FD | 	jmp	#LR__0456
05b08                 | LR__0335
05b08     45 FA 05 F6 | 	mov	result1, #69
05b0c     BC 03 90 FD | 	jmp	#LR__0456
05b10                 | LR__0336
05b10     45 FA 05 F6 | 	mov	result1, #69
05b14     B4 03 90 FD | 	jmp	#LR__0456
05b18                 | LR__0337
05b18     69 FA 05 F6 | 	mov	result1, #105
05b1c     AC 03 90 FD | 	jmp	#LR__0456
05b20                 | LR__0338
05b20     B4 FA 05 F6 | 	mov	result1, #180
05b24     A4 03 90 FD | 	jmp	#LR__0456
05b28                 | LR__0339
05b28     40 FA 05 F6 | 	mov	result1, #64
05b2c     9C 03 90 FD | 	jmp	#LR__0456
05b30                 | LR__0340
05b30     CF FA 05 F6 | 	mov	result1, #207
05b34     94 03 90 FD | 	jmp	#LR__0456
05b38                 | LR__0341
05b38     49 FA 05 F6 | 	mov	result1, #73
05b3c     8C 03 90 FD | 	jmp	#LR__0456
05b40                 | LR__0342
05b40     49 FA 05 F6 | 	mov	result1, #73
05b44     84 03 90 FD | 	jmp	#LR__0456
05b48                 | LR__0343
05b48     C4 FA 05 F6 | 	mov	result1, #196
05b4c     7C 03 90 FD | 	jmp	#LR__0456
05b50                 | LR__0344
05b50     68 FA 05 F6 | 	mov	result1, #104
05b54     74 03 90 FD | 	jmp	#LR__0456
05b58                 | LR__0345
05b58     B7 FA 05 F6 | 	mov	result1, #183
05b5c     6C 03 90 FD | 	jmp	#LR__0456
05b60                 | LR__0346
05b60     73 FA 05 F6 | 	mov	result1, #115
05b64     64 03 90 FD | 	jmp	#LR__0456
05b68                 | LR__0347
05b68     74 FA 05 F6 | 	mov	result1, #116
05b6c     5C 03 90 FD | 	jmp	#LR__0456
05b70                 | LR__0348
05b70     6C FA 05 F6 | 	mov	result1, #108
05b74     54 03 90 FD | 	jmp	#LR__0456
05b78                 | LR__0349
05b78     6C FA 05 F6 | 	mov	result1, #108
05b7c     4C 03 90 FD | 	jmp	#LR__0456
05b80                 | LR__0350
05b80     89 FA 05 F6 | 	mov	result1, #137
05b84     44 03 90 FD | 	jmp	#LR__0456
05b88                 | LR__0351
05b88     C2 FA 05 F6 | 	mov	result1, #194
05b8c     3C 03 90 FD | 	jmp	#LR__0456
05b90                 | LR__0352
05b90     72 FA 05 F6 | 	mov	result1, #114
05b94     34 03 90 FD | 	jmp	#LR__0456
05b98                 | LR__0353
05b98     5D FA 05 F6 | 	mov	result1, #93
05b9c     2C 03 90 FD | 	jmp	#LR__0456
05ba0                 | LR__0354
05ba0     96 FA 05 F6 | 	mov	result1, #150
05ba4     24 03 90 FD | 	jmp	#LR__0456
05ba8                 | LR__0355
05ba8     43 FA 05 F6 | 	mov	result1, #67
05bac     1C 03 90 FD | 	jmp	#LR__0456
05bb0                 | LR__0356
05bb0     43 FA 05 F6 | 	mov	result1, #67
05bb4     14 03 90 FD | 	jmp	#LR__0456
05bb8                 | LR__0357
05bb8     43 FA 05 F6 | 	mov	result1, #67
05bbc     0C 03 90 FD | 	jmp	#LR__0456
05bc0                 | LR__0358
05bc0     5A FA 05 F6 | 	mov	result1, #90
05bc4     04 03 90 FD | 	jmp	#LR__0456
05bc8                 | LR__0359
05bc8     AB FA 05 F6 | 	mov	result1, #171
05bcc     FC 02 90 FD | 	jmp	#LR__0456
05bd0                 | LR__0360
05bd0     BD FA 05 F6 | 	mov	result1, #189
05bd4     F4 02 90 FD | 	jmp	#LR__0456
05bd8                 | LR__0361
05bd8     BD FA 05 F6 | 	mov	result1, #189
05bdc     EC 02 90 FD | 	jmp	#LR__0456
05be0                 | LR__0362
05be0     46 FA 05 F6 | 	mov	result1, #70
05be4     E4 02 90 FD | 	jmp	#LR__0456
05be8                 | LR__0363
05be8     46 FA 05 F6 | 	mov	result1, #70
05bec     DC 02 90 FD | 	jmp	#LR__0456
05bf0                 | LR__0364
05bf0     71 FA 05 F6 | 	mov	result1, #113
05bf4     D4 02 90 FD | 	jmp	#LR__0456
05bf8                 | LR__0365
05bf8     71 FA 05 F6 | 	mov	result1, #113
05bfc     CC 02 90 FD | 	jmp	#LR__0456
05c00                 | LR__0366
05c00     60 FA 05 F6 | 	mov	result1, #96
05c04     C4 02 90 FD | 	jmp	#LR__0456
05c08                 | LR__0367
05c08     4A FA 05 F6 | 	mov	result1, #74
05c0c     BC 02 90 FD | 	jmp	#LR__0456
05c10                 | LR__0368
05c10     4A FA 05 F6 | 	mov	result1, #74
05c14     B4 02 90 FD | 	jmp	#LR__0456
05c18                 | LR__0369
05c18     48 FA 05 F6 | 	mov	result1, #72
05c1c     AC 02 90 FD | 	jmp	#LR__0456
05c20                 | LR__0370
05c20     48 FA 05 F6 | 	mov	result1, #72
05c24     A4 02 90 FD | 	jmp	#LR__0456
05c28                 | LR__0371
05c28     BB FA 05 F6 | 	mov	result1, #187
05c2c     9C 02 90 FD | 	jmp	#LR__0456
05c30                 | LR__0372
05c30     A9 FA 05 F6 | 	mov	result1, #169
05c34     94 02 90 FD | 	jmp	#LR__0456
05c38                 | LR__0373
05c38     4E FA 05 F6 | 	mov	result1, #78
05c3c     8C 02 90 FD | 	jmp	#LR__0456
05c40                 | LR__0374
05c40     4E FA 05 F6 | 	mov	result1, #78
05c44     84 02 90 FD | 	jmp	#LR__0456
05c48                 | LR__0375
05c48     58 FA 05 F6 | 	mov	result1, #88
05c4c     7C 02 90 FD | 	jmp	#LR__0456
05c50                 | LR__0376
05c50     5F FA 05 F6 | 	mov	result1, #95
05c54     74 02 90 FD | 	jmp	#LR__0456
05c58                 | LR__0377
05c58     5F FA 05 F6 | 	mov	result1, #95
05c5c     6C 02 90 FD | 	jmp	#LR__0456
05c60                 | LR__0378
05c60     B5 FA 05 F6 | 	mov	result1, #181
05c64     64 02 90 FD | 	jmp	#LR__0456
05c68                 | LR__0379
05c68     4C FA 05 F6 | 	mov	result1, #76
05c6c     5C 02 90 FD | 	jmp	#LR__0456
05c70                 | LR__0380
05c70     4C FA 05 F6 | 	mov	result1, #76
05c74     54 02 90 FD | 	jmp	#LR__0456
05c78                 | LR__0381
05c78     52 FA 05 F6 | 	mov	result1, #82
05c7c     4C 02 90 FD | 	jmp	#LR__0456
05c80                 | LR__0382
05c80     52 FA 05 F6 | 	mov	result1, #82
05c84     44 02 90 FD | 	jmp	#LR__0456
05c88                 | LR__0383
05c88     97 FA 05 F6 | 	mov	result1, #151
05c8c     3C 02 90 FD | 	jmp	#LR__0456
05c90                 | LR__0384
05c90     C6 FA 05 F6 | 	mov	result1, #198
05c94     34 02 90 FD | 	jmp	#LR__0456
05c98                 | LR__0385
05c98     61 FA 05 F6 | 	mov	result1, #97
05c9c     2C 02 90 FD | 	jmp	#LR__0456
05ca0                 | LR__0386
05ca0     61 FA 05 F6 | 	mov	result1, #97
05ca4     24 02 90 FD | 	jmp	#LR__0456
05ca8                 | LR__0387
05ca8     63 FA 05 F6 | 	mov	result1, #99
05cac     1C 02 90 FD | 	jmp	#LR__0456
05cb0                 | LR__0388
05cb0     41 FA 05 F6 | 	mov	result1, #65
05cb4     14 02 90 FD | 	jmp	#LR__0456
05cb8                 | LR__0389
05cb8     4B FA 05 F6 | 	mov	result1, #75
05cbc     0C 02 90 FD | 	jmp	#LR__0456
05cc0                 | LR__0390
05cc0     4B FA 05 F6 | 	mov	result1, #75
05cc4     04 02 90 FD | 	jmp	#LR__0456
05cc8                 | LR__0391
05cc8     C1 FA 05 F6 | 	mov	result1, #193
05ccc     FC 01 90 FD | 	jmp	#LR__0456
05cd0                 | LR__0392
05cd0     B3 FA 05 F6 | 	mov	result1, #179
05cd4     F4 01 90 FD | 	jmp	#LR__0456
05cd8                 | LR__0393
05cd8     5E FA 05 F6 | 	mov	result1, #94
05cdc     EC 01 90 FD | 	jmp	#LR__0456
05ce0                 | LR__0394
05ce0     5E FA 05 F6 | 	mov	result1, #94
05ce4     E4 01 90 FD | 	jmp	#LR__0456
05ce8                 | LR__0395
05ce8     7C FA 05 F6 | 	mov	result1, #124
05cec     DC 01 90 FD | 	jmp	#LR__0456
05cf0                 | LR__0396
05cf0     7E FA 05 F6 | 	mov	result1, #126
05cf4     D4 01 90 FD | 	jmp	#LR__0456
05cf8                 | LR__0397
05cf8     7D FA 05 F6 | 	mov	result1, #125
05cfc     CC 01 90 FD | 	jmp	#LR__0456
05d00                 | LR__0398
05d00     7F FA 05 F6 | 	mov	result1, #127
05d04     C4 01 90 FD | 	jmp	#LR__0456
05d08                 | LR__0399
05d08     80 FA 05 F6 | 	mov	result1, #128
05d0c     BC 01 90 FD | 	jmp	#LR__0456
05d10                 | LR__0400
05d10     55 FA 05 F6 | 	mov	result1, #85
05d14     B4 01 90 FD | 	jmp	#LR__0456
05d18                 | LR__0401
05d18     75 FA 05 F6 | 	mov	result1, #117
05d1c     AC 01 90 FD | 	jmp	#LR__0456
05d20                 | LR__0402
05d20     75 FA 05 F6 | 	mov	result1, #117
05d24     A4 01 90 FD | 	jmp	#LR__0456
05d28                 | LR__0403
05d28     42 FA 05 F6 | 	mov	result1, #66
05d2c     9C 01 90 FD | 	jmp	#LR__0456
05d30                 | LR__0404
05d30     42 FA 05 F6 | 	mov	result1, #66
05d34     94 01 90 FD | 	jmp	#LR__0456
05d38                 | LR__0405
05d38     95 FA 05 F6 | 	mov	result1, #149
05d3c     8C 01 90 FD | 	jmp	#LR__0456
05d40                 | LR__0406
05d40     AC FA 05 F6 | 	mov	result1, #172
05d44     84 01 90 FD | 	jmp	#LR__0456
05d48                 | LR__0407
05d48     81 FA 05 F6 | 	mov	result1, #129
05d4c     7C 01 90 FD | 	jmp	#LR__0456
05d50                 | LR__0408
05d50     81 FA 05 F6 | 	mov	result1, #129
05d54     74 01 90 FD | 	jmp	#LR__0456
05d58                 | LR__0409
05d58     44 FA 05 F6 | 	mov	result1, #68
05d5c     6C 01 90 FD | 	jmp	#LR__0456
05d60                 | LR__0410
05d60     44 FA 05 F6 | 	mov	result1, #68
05d64     64 01 90 FD | 	jmp	#LR__0456
05d68                 | LR__0411
05d68     BC FA 05 F6 | 	mov	result1, #188
05d6c     5C 01 90 FD | 	jmp	#LR__0456
05d70                 | LR__0412
05d70     88 FA 05 F6 | 	mov	result1, #136
05d74     54 01 90 FD | 	jmp	#LR__0456
05d78                 | LR__0413
05d78     B6 FA 05 F6 | 	mov	result1, #182
05d7c     4C 01 90 FD | 	jmp	#LR__0456
05d80                 | LR__0414
05d80     92 FA 05 F6 | 	mov	result1, #146
05d84     44 01 90 FD | 	jmp	#LR__0456
05d88                 | LR__0415
05d88     BE FA 05 F6 | 	mov	result1, #190
05d8c     3C 01 90 FD | 	jmp	#LR__0456
05d90                 | LR__0416
05d90     BE FA 05 F6 | 	mov	result1, #190
05d94     34 01 90 FD | 	jmp	#LR__0456
05d98                 | LR__0417
05d98     C7 FA 05 F6 | 	mov	result1, #199
05d9c     2C 01 90 FD | 	jmp	#LR__0456
05da0                 | LR__0418
05da0     AA FA 05 F6 | 	mov	result1, #170
05da4     24 01 90 FD | 	jmp	#LR__0456
05da8                 | LR__0419
05da8     4D FA 05 F6 | 	mov	result1, #77
05dac     1C 01 90 FD | 	jmp	#LR__0456
05db0                 | LR__0420
05db0     51 FA 05 F6 | 	mov	result1, #81
05db4     14 01 90 FD | 	jmp	#LR__0456
05db8                 | LR__0421
05db8     51 FA 05 F6 | 	mov	result1, #81
05dbc     0C 01 90 FD | 	jmp	#LR__0456
05dc0                 | LR__0422
05dc0     D2 FA 05 F6 | 	mov	result1, #210
05dc4     04 01 90 FD | 	jmp	#LR__0456
05dc8                 | LR__0423
05dc8     D2 FA 05 F6 | 	mov	result1, #210
05dcc     FC 00 90 FD | 	jmp	#LR__0456
05dd0                 | LR__0424
05dd0     8E FA 05 F6 | 	mov	result1, #142
05dd4     F4 00 90 FD | 	jmp	#LR__0456
05dd8                 | LR__0425
05dd8     8E FA 05 F6 | 	mov	result1, #142
05ddc     EC 00 90 FD | 	jmp	#LR__0456
05de0                 | LR__0426
05de0     90 FA 05 F6 | 	mov	result1, #144
05de4     E4 00 90 FD | 	jmp	#LR__0456
05de8                 | LR__0427
05de8     90 FA 05 F6 | 	mov	result1, #144
05dec     DC 00 90 FD | 	jmp	#LR__0456
05df0                 | LR__0428
05df0     8D FA 05 F6 | 	mov	result1, #141
05df4     D4 00 90 FD | 	jmp	#LR__0456
05df8                 | LR__0429
05df8     8D FA 05 F6 | 	mov	result1, #141
05dfc     CC 00 90 FD | 	jmp	#LR__0456
05e00                 | LR__0430
05e00     8C FA 05 F6 | 	mov	result1, #140
05e04     C4 00 90 FD | 	jmp	#LR__0456
05e08                 | LR__0431
05e08     8C FA 05 F6 | 	mov	result1, #140
05e0c     BC 00 90 FD | 	jmp	#LR__0456
05e10                 | LR__0432
05e10     91 FA 05 F6 | 	mov	result1, #145
05e14     B4 00 90 FD | 	jmp	#LR__0456
05e18                 | LR__0433
05e18     91 FA 05 F6 | 	mov	result1, #145
05e1c     AC 00 90 FD | 	jmp	#LR__0456
05e20                 | LR__0434
05e20     8B FA 05 F6 | 	mov	result1, #139
05e24     A4 00 90 FD | 	jmp	#LR__0456
05e28                 | LR__0435
05e28     8B FA 05 F6 | 	mov	result1, #139
05e2c     9C 00 90 FD | 	jmp	#LR__0456
05e30                 | LR__0436
05e30     8F FA 05 F6 | 	mov	result1, #143
05e34     94 00 90 FD | 	jmp	#LR__0456
05e38                 | LR__0437
05e38     8F FA 05 F6 | 	mov	result1, #143
05e3c     8C 00 90 FD | 	jmp	#LR__0456
05e40                 | LR__0438
05e40     8F FA 05 F6 | 	mov	result1, #143
05e44     84 00 90 FD | 	jmp	#LR__0456
05e48                 | LR__0439
05e48     B2 FA 05 F6 | 	mov	result1, #178
05e4c     7C 00 90 FD | 	jmp	#LR__0456
05e50                 | LR__0440
05e50     B2 FA 05 F6 | 	mov	result1, #178
05e54     74 00 90 FD | 	jmp	#LR__0456
05e58                 | LR__0441
05e58     75 FA 05 F6 | 	mov	result1, #117
05e5c     6C 00 90 FD | 	jmp	#LR__0456
05e60                 | LR__0442
05e60     75 FA 05 F6 | 	mov	result1, #117
05e64     64 00 90 FD | 	jmp	#LR__0456
05e68                 | LR__0443
05e68     6D FA 05 F6 | 	mov	result1, #109
05e6c     5C 00 90 FD | 	jmp	#LR__0456
05e70                 | LR__0444
05e70     6D FA 05 F6 | 	mov	result1, #109
05e74     54 00 90 FD | 	jmp	#LR__0456
05e78                 | LR__0445
05e78     5B FA 05 F6 | 	mov	result1, #91
05e7c     4C 00 90 FD | 	jmp	#LR__0456
05e80                 | LR__0446
05e80     56 FA 05 F6 | 	mov	result1, #86
05e84     44 00 90 FD | 	jmp	#LR__0456
05e88                 | LR__0447
05e88     56 FA 05 F6 | 	mov	result1, #86
05e8c     3C 00 90 FD | 	jmp	#LR__0456
05e90                 | LR__0448
05e90     70 FA 05 F6 | 	mov	result1, #112
05e94     34 00 90 FD | 	jmp	#LR__0456
05e98                 | LR__0449
05e98     70 FA 05 F6 | 	mov	result1, #112
05e9c     2C 00 90 FD | 	jmp	#LR__0456
05ea0                 | LR__0450
05ea0     57 FA 05 F6 | 	mov	result1, #87
05ea4     24 00 90 FD | 	jmp	#LR__0456
05ea8                 | LR__0451
05ea8     57 FA 05 F6 | 	mov	result1, #87
05eac     1C 00 90 FD | 	jmp	#LR__0456
05eb0                 | LR__0452
05eb0     79 FA 05 F6 | 	mov	result1, #121
05eb4     14 00 90 FD | 	jmp	#LR__0456
05eb8                 | LR__0453
05eb8     77 FA 05 F6 | 	mov	result1, #119
05ebc     0C 00 90 FD | 	jmp	#LR__0456
05ec0                 | LR__0454
05ec0     78 FA 05 F6 | 	mov	result1, #120
05ec4     04 00 90 FD | 	jmp	#LR__0456
05ec8                 | LR__0455
05ec8     00 FA 05 F6 | 	mov	result1, #0
05ecc                 | LR__0456
05ecc     A7 F0 03 F6 | 	mov	ptra, fp
05ed0     B2 00 A0 FD | 	call	#popregs_
05ed4                 | _iscommand_ret
05ed4     2D 00 64 FD | 	ret
05ed8                 | 
05ed8                 | ' 
05ed8                 | ' ' Check if the part is a function than returns a value, return a token or 0 if not found
05ed8                 | ' 
05ed8                 | ' function isfunction(s as string) as ubyte
05ed8                 | _isfunction
05ed8     01 4A 05 F6 | 	mov	COUNT_, #1
05edc     A8 00 A0 FD | 	call	#pushregs_
05ee0                 | ' 
05ee0                 | ' select case s
05ee0     09 27 02 F6 | 	mov	local01, arg01
05ee4     B7 01 00 FF 
05ee8     6B 14 06 F6 | 	mov	arg02, ##@LR__5703
05eec     13 13 02 F6 | 	mov	arg01, local01
05ef0     84 0F B2 FD | 	call	#__system___string_cmp
05ef4     00 FA 0D F2 | 	cmp	result1, #0 wz
05ef8     5C 05 90 AD |  if_e	jmp	#LR__0460
05efc     B7 01 00 FF 
05f00     6F 14 06 F6 | 	mov	arg02, ##@LR__5704
05f04     13 13 02 F6 | 	mov	arg01, local01
05f08     6C 0F B2 FD | 	call	#__system___string_cmp
05f0c     00 FA 0D F2 | 	cmp	result1, #0 wz
05f10     4C 05 90 AD |  if_e	jmp	#LR__0461
05f14     B7 01 00 FF 
05f18     74 14 06 F6 | 	mov	arg02, ##@LR__5705
05f1c     13 13 02 F6 | 	mov	arg01, local01
05f20     54 0F B2 FD | 	call	#__system___string_cmp
05f24     00 FA 0D F2 | 	cmp	result1, #0 wz
05f28     3C 05 90 AD |  if_e	jmp	#LR__0462
05f2c     B7 01 00 FF 
05f30     78 14 06 F6 | 	mov	arg02, ##@LR__5706
05f34     13 13 02 F6 | 	mov	arg01, local01
05f38     3C 0F B2 FD | 	call	#__system___string_cmp
05f3c     00 FA 0D F2 | 	cmp	result1, #0 wz
05f40     2C 05 90 AD |  if_e	jmp	#LR__0463
05f44     B7 01 00 FF 
05f48     7D 14 06 F6 | 	mov	arg02, ##@LR__5707
05f4c     13 13 02 F6 | 	mov	arg01, local01
05f50     24 0F B2 FD | 	call	#__system___string_cmp
05f54     00 FA 0D F2 | 	cmp	result1, #0 wz
05f58     1C 05 90 AD |  if_e	jmp	#LR__0464
05f5c     B7 01 00 FF 
05f60     81 14 06 F6 | 	mov	arg02, ##@LR__5708
05f64     13 13 02 F6 | 	mov	arg01, local01
05f68     0C 0F B2 FD | 	call	#__system___string_cmp
05f6c     00 FA 0D F2 | 	cmp	result1, #0 wz
05f70     0C 05 90 AD |  if_e	jmp	#LR__0465
05f74     B7 01 00 FF 
05f78     86 14 06 F6 | 	mov	arg02, ##@LR__5709
05f7c     13 13 02 F6 | 	mov	arg01, local01
05f80     F4 0E B2 FD | 	call	#__system___string_cmp
05f84     00 FA 0D F2 | 	cmp	result1, #0 wz
05f88     FC 04 90 AD |  if_e	jmp	#LR__0466
05f8c     B7 01 00 FF 
05f90     8A 14 06 F6 | 	mov	arg02, ##@LR__5710
05f94     13 13 02 F6 | 	mov	arg01, local01
05f98     DC 0E B2 FD | 	call	#__system___string_cmp
05f9c     00 FA 0D F2 | 	cmp	result1, #0 wz
05fa0     EC 04 90 AD |  if_e	jmp	#LR__0467
05fa4     B7 01 00 FF 
05fa8     8F 14 06 F6 | 	mov	arg02, ##@LR__5711
05fac     13 13 02 F6 | 	mov	arg01, local01
05fb0     C4 0E B2 FD | 	call	#__system___string_cmp
05fb4     00 FA 0D F2 | 	cmp	result1, #0 wz
05fb8     DC 04 90 AD |  if_e	jmp	#LR__0468
05fbc     B7 01 00 FF 
05fc0     94 14 06 F6 | 	mov	arg02, ##@LR__5712
05fc4     13 13 02 F6 | 	mov	arg01, local01
05fc8     AC 0E B2 FD | 	call	#__system___string_cmp
05fcc     00 FA 0D F2 | 	cmp	result1, #0 wz
05fd0     CC 04 90 AD |  if_e	jmp	#LR__0469
05fd4     B7 01 00 FF 
05fd8     9C 14 06 F6 | 	mov	arg02, ##@LR__5713
05fdc     13 13 02 F6 | 	mov	arg01, local01
05fe0     94 0E B2 FD | 	call	#__system___string_cmp
05fe4     00 FA 0D F2 | 	cmp	result1, #0 wz
05fe8     BC 04 90 AD |  if_e	jmp	#LR__0470
05fec     B7 01 00 FF 
05ff0     A0 14 06 F6 | 	mov	arg02, ##@LR__5714
05ff4     13 13 02 F6 | 	mov	arg01, local01
05ff8     7C 0E B2 FD | 	call	#__system___string_cmp
05ffc     00 FA 0D F2 | 	cmp	result1, #0 wz
06000     AC 04 90 AD |  if_e	jmp	#LR__0471
06004     B7 01 00 FF 
06008     A6 14 06 F6 | 	mov	arg02, ##@LR__5715
0600c     13 13 02 F6 | 	mov	arg01, local01
06010     64 0E B2 FD | 	call	#__system___string_cmp
06014     00 FA 0D F2 | 	cmp	result1, #0 wz
06018     9C 04 90 AD |  if_e	jmp	#LR__0472
0601c     B7 01 00 FF 
06020     AF 14 06 F6 | 	mov	arg02, ##@LR__5716
06024     13 13 02 F6 | 	mov	arg01, local01
06028     4C 0E B2 FD | 	call	#__system___string_cmp
0602c     00 FA 0D F2 | 	cmp	result1, #0 wz
06030     8C 04 90 AD |  if_e	jmp	#LR__0473
06034     B7 01 00 FF 
06038     B3 14 06 F6 | 	mov	arg02, ##@LR__5717
0603c     13 13 02 F6 | 	mov	arg01, local01
06040     34 0E B2 FD | 	call	#__system___string_cmp
06044     00 FA 0D F2 | 	cmp	result1, #0 wz
06048     7C 04 90 AD |  if_e	jmp	#LR__0474
0604c     B7 01 00 FF 
06050     B7 14 06 F6 | 	mov	arg02, ##@LR__5718
06054     13 13 02 F6 | 	mov	arg01, local01
06058     1C 0E B2 FD | 	call	#__system___string_cmp
0605c     00 FA 0D F2 | 	cmp	result1, #0 wz
06060     6C 04 90 AD |  if_e	jmp	#LR__0475
06064     B7 01 00 FF 
06068     BB 14 06 F6 | 	mov	arg02, ##@LR__5719
0606c     13 13 02 F6 | 	mov	arg01, local01
06070     04 0E B2 FD | 	call	#__system___string_cmp
06074     00 FA 0D F2 | 	cmp	result1, #0 wz
06078     5C 04 90 AD |  if_e	jmp	#LR__0476
0607c     B7 01 00 FF 
06080     C4 14 06 F6 | 	mov	arg02, ##@LR__5720
06084     13 13 02 F6 | 	mov	arg01, local01
06088     EC 0D B2 FD | 	call	#__system___string_cmp
0608c     00 FA 0D F2 | 	cmp	result1, #0 wz
06090     4C 04 90 AD |  if_e	jmp	#LR__0477
06094     B7 01 00 FF 
06098     CD 14 06 F6 | 	mov	arg02, ##@LR__5721
0609c     13 13 02 F6 | 	mov	arg01, local01
060a0     D4 0D B2 FD | 	call	#__system___string_cmp
060a4     00 FA 0D F2 | 	cmp	result1, #0 wz
060a8     3C 04 90 AD |  if_e	jmp	#LR__0478
060ac     B7 01 00 FF 
060b0     D1 14 06 F6 | 	mov	arg02, ##@LR__5722
060b4     13 13 02 F6 | 	mov	arg01, local01
060b8     BC 0D B2 FD | 	call	#__system___string_cmp
060bc     00 FA 0D F2 | 	cmp	result1, #0 wz
060c0     2C 04 90 AD |  if_e	jmp	#LR__0479
060c4     B7 01 00 FF 
060c8     DF 14 06 F6 | 	mov	arg02, ##@LR__5723
060cc     13 13 02 F6 | 	mov	arg01, local01
060d0     A4 0D B2 FD | 	call	#__system___string_cmp
060d4     00 FA 0D F2 | 	cmp	result1, #0 wz
060d8     1C 04 90 AD |  if_e	jmp	#LR__0480
060dc     B7 01 00 FF 
060e0     EC 14 06 F6 | 	mov	arg02, ##@LR__5724
060e4     13 13 02 F6 | 	mov	arg01, local01
060e8     8C 0D B2 FD | 	call	#__system___string_cmp
060ec     00 FA 0D F2 | 	cmp	result1, #0 wz
060f0     0C 04 90 AD |  if_e	jmp	#LR__0481
060f4     B7 01 00 FF 
060f8     F4 14 06 F6 | 	mov	arg02, ##@LR__5725
060fc     13 13 02 F6 | 	mov	arg01, local01
06100     74 0D B2 FD | 	call	#__system___string_cmp
06104     00 FA 0D F2 | 	cmp	result1, #0 wz
06108     FC 03 90 AD |  if_e	jmp	#LR__0482
0610c     B7 01 00 FF 
06110     F9 14 06 F6 | 	mov	arg02, ##@LR__5726
06114     13 13 02 F6 | 	mov	arg01, local01
06118     5C 0D B2 FD | 	call	#__system___string_cmp
0611c     00 FA 0D F2 | 	cmp	result1, #0 wz
06120     EC 03 90 AD |  if_e	jmp	#LR__0483
06124     B7 01 00 FF 
06128     00 15 06 F6 | 	mov	arg02, ##@LR__5727
0612c     13 13 02 F6 | 	mov	arg01, local01
06130     44 0D B2 FD | 	call	#__system___string_cmp
06134     00 FA 0D F2 | 	cmp	result1, #0 wz
06138     DC 03 90 AD |  if_e	jmp	#LR__0484
0613c     B7 01 00 FF 
06140     04 15 06 F6 | 	mov	arg02, ##@LR__5728
06144     13 13 02 F6 | 	mov	arg01, local01
06148     2C 0D B2 FD | 	call	#__system___string_cmp
0614c     00 FA 0D F2 | 	cmp	result1, #0 wz
06150     CC 03 90 AD |  if_e	jmp	#LR__0485
06154     B7 01 00 FF 
06158     0A 15 06 F6 | 	mov	arg02, ##@LR__5729
0615c     13 13 02 F6 | 	mov	arg01, local01
06160     14 0D B2 FD | 	call	#__system___string_cmp
06164     00 FA 0D F2 | 	cmp	result1, #0 wz
06168     BC 03 90 AD |  if_e	jmp	#LR__0486
0616c     B7 01 00 FF 
06170     0E 15 06 F6 | 	mov	arg02, ##@LR__5730
06174     13 13 02 F6 | 	mov	arg01, local01
06178     FC 0C B2 FD | 	call	#__system___string_cmp
0617c     00 FA 0D F2 | 	cmp	result1, #0 wz
06180     AC 03 90 AD |  if_e	jmp	#LR__0487
06184     B7 01 00 FF 
06188     12 15 06 F6 | 	mov	arg02, ##@LR__5731
0618c     13 13 02 F6 | 	mov	arg01, local01
06190     E4 0C B2 FD | 	call	#__system___string_cmp
06194     00 FA 0D F2 | 	cmp	result1, #0 wz
06198     9C 03 90 AD |  if_e	jmp	#LR__0488
0619c     B7 01 00 FF 
061a0     18 15 06 F6 | 	mov	arg02, ##@LR__5732
061a4     13 13 02 F6 | 	mov	arg01, local01
061a8     CC 0C B2 FD | 	call	#__system___string_cmp
061ac     00 FA 0D F2 | 	cmp	result1, #0 wz
061b0     8C 03 90 AD |  if_e	jmp	#LR__0489
061b4     B7 01 00 FF 
061b8     1F 15 06 F6 | 	mov	arg02, ##@LR__5733
061bc     13 13 02 F6 | 	mov	arg01, local01
061c0     B4 0C B2 FD | 	call	#__system___string_cmp
061c4     00 FA 0D F2 | 	cmp	result1, #0 wz
061c8     7C 03 90 AD |  if_e	jmp	#LR__0490
061cc     B7 01 00 FF 
061d0     25 15 06 F6 | 	mov	arg02, ##@LR__5734
061d4     13 13 02 F6 | 	mov	arg01, local01
061d8     9C 0C B2 FD | 	call	#__system___string_cmp
061dc     00 FA 0D F2 | 	cmp	result1, #0 wz
061e0     6C 03 90 AD |  if_e	jmp	#LR__0491
061e4     B7 01 00 FF 
061e8     2A 15 06 F6 | 	mov	arg02, ##@LR__5735
061ec     13 13 02 F6 | 	mov	arg01, local01
061f0     84 0C B2 FD | 	call	#__system___string_cmp
061f4     00 FA 0D F2 | 	cmp	result1, #0 wz
061f8     5C 03 90 AD |  if_e	jmp	#LR__0492
061fc     B7 01 00 FF 
06200     31 15 06 F6 | 	mov	arg02, ##@LR__5736
06204     13 13 02 F6 | 	mov	arg01, local01
06208     6C 0C B2 FD | 	call	#__system___string_cmp
0620c     00 FA 0D F2 | 	cmp	result1, #0 wz
06210     4C 03 90 AD |  if_e	jmp	#LR__0493
06214     B7 01 00 FF 
06218     38 15 06 F6 | 	mov	arg02, ##@LR__5737
0621c     13 13 02 F6 | 	mov	arg01, local01
06220     54 0C B2 FD | 	call	#__system___string_cmp
06224     00 FA 0D F2 | 	cmp	result1, #0 wz
06228     3C 03 90 AD |  if_e	jmp	#LR__0494
0622c     B7 01 00 FF 
06230     3F 15 06 F6 | 	mov	arg02, ##@LR__5738
06234     13 13 02 F6 | 	mov	arg01, local01
06238     3C 0C B2 FD | 	call	#__system___string_cmp
0623c     00 FA 0D F2 | 	cmp	result1, #0 wz
06240     2C 03 90 AD |  if_e	jmp	#LR__0495
06244     B7 01 00 FF 
06248     46 15 06 F6 | 	mov	arg02, ##@LR__5739
0624c     13 13 02 F6 | 	mov	arg01, local01
06250     24 0C B2 FD | 	call	#__system___string_cmp
06254     00 FA 0D F2 | 	cmp	result1, #0 wz
06258     1C 03 90 AD |  if_e	jmp	#LR__0496
0625c     B7 01 00 FF 
06260     4B 15 06 F6 | 	mov	arg02, ##@LR__5740
06264     13 13 02 F6 | 	mov	arg01, local01
06268     0C 0C B2 FD | 	call	#__system___string_cmp
0626c     00 FA 0D F2 | 	cmp	result1, #0 wz
06270     0C 03 90 AD |  if_e	jmp	#LR__0497
06274     B7 01 00 FF 
06278     50 15 06 F6 | 	mov	arg02, ##@LR__5741
0627c     13 13 02 F6 | 	mov	arg01, local01
06280     F4 0B B2 FD | 	call	#__system___string_cmp
06284     00 FA 0D F2 | 	cmp	result1, #0 wz
06288     FC 02 90 AD |  if_e	jmp	#LR__0498
0628c     B7 01 00 FF 
06290     55 15 06 F6 | 	mov	arg02, ##@LR__5742
06294     13 13 02 F6 | 	mov	arg01, local01
06298     DC 0B B2 FD | 	call	#__system___string_cmp
0629c     00 FA 0D F2 | 	cmp	result1, #0 wz
062a0     EC 02 90 AD |  if_e	jmp	#LR__0499
062a4     B7 01 00 FF 
062a8     5B 15 06 F6 | 	mov	arg02, ##@LR__5743
062ac     13 13 02 F6 | 	mov	arg01, local01
062b0     C4 0B B2 FD | 	call	#__system___string_cmp
062b4     00 FA 0D F2 | 	cmp	result1, #0 wz
062b8     DC 02 90 AD |  if_e	jmp	#LR__0500
062bc     B7 01 00 FF 
062c0     61 15 06 F6 | 	mov	arg02, ##@LR__5744
062c4     13 13 02 F6 | 	mov	arg01, local01
062c8     AC 0B B2 FD | 	call	#__system___string_cmp
062cc     00 FA 0D F2 | 	cmp	result1, #0 wz
062d0     CC 02 90 AD |  if_e	jmp	#LR__0501
062d4     B7 01 00 FF 
062d8     67 15 06 F6 | 	mov	arg02, ##@LR__5745
062dc     13 13 02 F6 | 	mov	arg01, local01
062e0     94 0B B2 FD | 	call	#__system___string_cmp
062e4     00 FA 0D F2 | 	cmp	result1, #0 wz
062e8     BC 02 90 AD |  if_e	jmp	#LR__0502
062ec     B7 01 00 FF 
062f0     6C 15 06 F6 | 	mov	arg02, ##@LR__5746
062f4     13 13 02 F6 | 	mov	arg01, local01
062f8     7C 0B B2 FD | 	call	#__system___string_cmp
062fc     00 FA 0D F2 | 	cmp	result1, #0 wz
06300     AC 02 90 AD |  if_e	jmp	#LR__0503
06304     B7 01 00 FF 
06308     71 15 06 F6 | 	mov	arg02, ##@LR__5747
0630c     13 13 02 F6 | 	mov	arg01, local01
06310     64 0B B2 FD | 	call	#__system___string_cmp
06314     00 FA 0D F2 | 	cmp	result1, #0 wz
06318     9C 02 90 AD |  if_e	jmp	#LR__0504
0631c     B7 01 00 FF 
06320     79 15 06 F6 | 	mov	arg02, ##@LR__5748
06324     13 13 02 F6 | 	mov	arg01, local01
06328     4C 0B B2 FD | 	call	#__system___string_cmp
0632c     00 FA 0D F2 | 	cmp	result1, #0 wz
06330     8C 02 90 AD |  if_e	jmp	#LR__0505
06334     B7 01 00 FF 
06338     7F 15 06 F6 | 	mov	arg02, ##@LR__5749
0633c     13 13 02 F6 | 	mov	arg01, local01
06340     34 0B B2 FD | 	call	#__system___string_cmp
06344     00 FA 0D F2 | 	cmp	result1, #0 wz
06348     7C 02 90 AD |  if_e	jmp	#LR__0506
0634c     B7 01 00 FF 
06350     86 15 06 F6 | 	mov	arg02, ##@LR__5750
06354     13 13 02 F6 | 	mov	arg01, local01
06358     1C 0B B2 FD | 	call	#__system___string_cmp
0635c     00 FA 0D F2 | 	cmp	result1, #0 wz
06360     6C 02 90 AD |  if_e	jmp	#LR__0507
06364     B7 01 00 FF 
06368     8C 15 06 F6 | 	mov	arg02, ##@LR__5751
0636c     13 13 02 F6 | 	mov	arg01, local01
06370     04 0B B2 FD | 	call	#__system___string_cmp
06374     00 FA 0D F2 | 	cmp	result1, #0 wz
06378     5C 02 90 AD |  if_e	jmp	#LR__0508
0637c     B7 01 00 FF 
06380     92 15 06 F6 | 	mov	arg02, ##@LR__5752
06384     13 13 02 F6 | 	mov	arg01, local01
06388     EC 0A B2 FD | 	call	#__system___string_cmp
0638c     00 FA 0D F2 | 	cmp	result1, #0 wz
06390     4C 02 90 AD |  if_e	jmp	#LR__0509
06394     B7 01 00 FF 
06398     96 15 06 F6 | 	mov	arg02, ##@LR__5753
0639c     13 13 02 F6 | 	mov	arg01, local01
063a0     D4 0A B2 FD | 	call	#__system___string_cmp
063a4     00 FA 0D F2 | 	cmp	result1, #0 wz
063a8     3C 02 90 AD |  if_e	jmp	#LR__0510
063ac     B7 01 00 FF 
063b0     9A 15 06 F6 | 	mov	arg02, ##@LR__5754
063b4     13 13 02 F6 | 	mov	arg01, local01
063b8     BC 0A B2 FD | 	call	#__system___string_cmp
063bc     00 FA 0D F2 | 	cmp	result1, #0 wz
063c0     2C 02 90 AD |  if_e	jmp	#LR__0511
063c4     B7 01 00 FF 
063c8     9E 15 06 F6 | 	mov	arg02, ##@LR__5755
063cc     13 13 02 F6 | 	mov	arg01, local01
063d0     A4 0A B2 FD | 	call	#__system___string_cmp
063d4     00 FA 0D F2 | 	cmp	result1, #0 wz
063d8     1C 02 90 AD |  if_e	jmp	#LR__0512
063dc     B7 01 00 FF 
063e0     A4 15 06 F6 | 	mov	arg02, ##@LR__5756
063e4     13 13 02 F6 | 	mov	arg01, local01
063e8     8C 0A B2 FD | 	call	#__system___string_cmp
063ec     00 FA 0D F2 | 	cmp	result1, #0 wz
063f0     0C 02 90 AD |  if_e	jmp	#LR__0513
063f4     B7 01 00 FF 
063f8     AA 15 06 F6 | 	mov	arg02, ##@LR__5757
063fc     13 13 02 F6 | 	mov	arg01, local01
06400     74 0A B2 FD | 	call	#__system___string_cmp
06404     00 FA 0D F2 | 	cmp	result1, #0 wz
06408     FC 01 90 AD |  if_e	jmp	#LR__0514
0640c     B7 01 00 FF 
06410     AF 15 06 F6 | 	mov	arg02, ##@LR__5758
06414     13 13 02 F6 | 	mov	arg01, local01
06418     5C 0A B2 FD | 	call	#__system___string_cmp
0641c     00 FA 0D F2 | 	cmp	result1, #0 wz
06420     EC 01 90 AD |  if_e	jmp	#LR__0515
06424     B7 01 00 FF 
06428     B3 15 06 F6 | 	mov	arg02, ##@LR__5759
0642c     13 13 02 F6 | 	mov	arg01, local01
06430     44 0A B2 FD | 	call	#__system___string_cmp
06434     00 FA 0D F2 | 	cmp	result1, #0 wz
06438     DC 01 90 AD |  if_e	jmp	#LR__0516
0643c     B7 01 00 FF 
06440     B7 15 06 F6 | 	mov	arg02, ##@LR__5760
06444     13 13 02 F6 | 	mov	arg01, local01
06448     2C 0A B2 FD | 	call	#__system___string_cmp
0644c     00 FA 0D F2 | 	cmp	result1, #0 wz
06450     CC 01 90 AD |  if_e	jmp	#LR__0517
06454     D0 01 90 FD | 	jmp	#LR__0518
06458                 | LR__0460
06458     9E FA 05 F6 | 	mov	result1, #158
0645c     CC 01 90 FD | 	jmp	#LR__0519
06460                 | LR__0461
06460     85 FA 05 F6 | 	mov	result1, #133
06464     C4 01 90 FD | 	jmp	#LR__0519
06468                 | LR__0462
06468     9B FA 05 F6 | 	mov	result1, #155
0646c     BC 01 90 FD | 	jmp	#LR__0519
06470                 | LR__0463
06470     9B FA 05 F6 | 	mov	result1, #155
06474     B4 01 90 FD | 	jmp	#LR__0519
06478                 | LR__0464
06478     A7 FA 05 F6 | 	mov	result1, #167
0647c     AC 01 90 FD | 	jmp	#LR__0519
06480                 | LR__0465
06480     84 FA 05 F6 | 	mov	result1, #132
06484     A4 01 90 FD | 	jmp	#LR__0519
06488                 | LR__0466
06488     86 FA 05 F6 | 	mov	result1, #134
0648c     9C 01 90 FD | 	jmp	#LR__0519
06490                 | LR__0467
06490     A2 FA 05 F6 | 	mov	result1, #162
06494     94 01 90 FD | 	jmp	#LR__0519
06498                 | LR__0468
06498     9F FA 05 F6 | 	mov	result1, #159
0649c     8C 01 90 FD | 	jmp	#LR__0519
064a0                 | LR__0469
064a0     C0 FA 05 F6 | 	mov	result1, #192
064a4     84 01 90 FD | 	jmp	#LR__0519
064a8                 | LR__0470
064a8     82 FA 05 F6 | 	mov	result1, #130
064ac     7C 01 90 FD | 	jmp	#LR__0519
064b0                 | LR__0471
064b0     99 FA 05 F6 | 	mov	result1, #153
064b4     74 01 90 FD | 	jmp	#LR__0519
064b8                 | LR__0472
064b8     C5 FA 05 F6 | 	mov	result1, #197
064bc     6C 01 90 FD | 	jmp	#LR__0519
064c0                 | LR__0473
064c0     C5 FA 05 F6 | 	mov	result1, #197
064c4     64 01 90 FD | 	jmp	#LR__0519
064c8                 | LR__0474
064c8     9C FA 05 F6 | 	mov	result1, #156
064cc     5C 01 90 FD | 	jmp	#LR__0519
064d0                 | LR__0475
064d0     D3 FA 05 F6 | 	mov	result1, #211
064d4     54 01 90 FD | 	jmp	#LR__0519
064d8                 | LR__0476
064d8     D3 FA 05 F6 | 	mov	result1, #211
064dc     4C 01 90 FD | 	jmp	#LR__0519
064e0                 | LR__0477
064e0     6F FA 05 F6 | 	mov	result1, #111
064e4     44 01 90 FD | 	jmp	#LR__0519
064e8                 | LR__0478
064e8     6F FA 05 F6 | 	mov	result1, #111
064ec     3C 01 90 FD | 	jmp	#LR__0519
064f0                 | LR__0479
064f0     93 FA 05 F6 | 	mov	result1, #147
064f4     34 01 90 FD | 	jmp	#LR__0519
064f8                 | LR__0480
064f8     94 FA 05 F6 | 	mov	result1, #148
064fc     2C 01 90 FD | 	jmp	#LR__0519
06500                 | LR__0481
06500     62 FA 05 F6 | 	mov	result1, #98
06504     24 01 90 FD | 	jmp	#LR__0519
06508                 | LR__0482
06508     A3 FA 05 F6 | 	mov	result1, #163
0650c     1C 01 90 FD | 	jmp	#LR__0519
06510                 | LR__0483
06510     9D FA 05 F6 | 	mov	result1, #157
06514     14 01 90 FD | 	jmp	#LR__0519
06518                 | LR__0484
06518     8A FA 05 F6 | 	mov	result1, #138
0651c     0C 01 90 FD | 	jmp	#LR__0519
06520                 | LR__0485
06520     A4 FA 05 F6 | 	mov	result1, #164
06524     04 01 90 FD | 	jmp	#LR__0519
06528                 | LR__0486
06528     A8 FA 05 F6 | 	mov	result1, #168
0652c     FC 00 90 FD | 	jmp	#LR__0519
06530                 | LR__0487
06530     AD FA 05 F6 | 	mov	result1, #173
06534     F4 00 90 FD | 	jmp	#LR__0519
06538                 | LR__0488
06538     9A FA 05 F6 | 	mov	result1, #154
0653c     EC 00 90 FD | 	jmp	#LR__0519
06540                 | LR__0489
06540     D1 FA 05 F6 | 	mov	result1, #209
06544     E4 00 90 FD | 	jmp	#LR__0519
06548                 | LR__0490
06548     D0 FA 05 F6 | 	mov	result1, #208
0654c     DC 00 90 FD | 	jmp	#LR__0519
06550                 | LR__0491
06550     A6 FA 05 F6 | 	mov	result1, #166
06554     D4 00 90 FD | 	jmp	#LR__0519
06558                 | LR__0492
06558     66 FA 05 F6 | 	mov	result1, #102
0655c     CC 00 90 FD | 	jmp	#LR__0519
06560                 | LR__0493
06560     67 FA 05 F6 | 	mov	result1, #103
06564     C4 00 90 FD | 	jmp	#LR__0519
06568                 | LR__0494
06568     64 FA 05 F6 | 	mov	result1, #100
0656c     BC 00 90 FD | 	jmp	#LR__0519
06570                 | LR__0495
06570     65 FA 05 F6 | 	mov	result1, #101
06574     B4 00 90 FD | 	jmp	#LR__0519
06578                 | LR__0496
06578     C8 FA 05 F6 | 	mov	result1, #200
0657c     AC 00 90 FD | 	jmp	#LR__0519
06580                 | LR__0497
06580     C9 FA 05 F6 | 	mov	result1, #201
06584     A4 00 90 FD | 	jmp	#LR__0519
06588                 | LR__0498
06588     CA FA 05 F6 | 	mov	result1, #202
0658c     9C 00 90 FD | 	jmp	#LR__0519
06590                 | LR__0499
06590     CC FA 05 F6 | 	mov	result1, #204
06594     94 00 90 FD | 	jmp	#LR__0519
06598                 | LR__0500
06598     CD FA 05 F6 | 	mov	result1, #205
0659c     8C 00 90 FD | 	jmp	#LR__0519
065a0                 | LR__0501
065a0     CE FA 05 F6 | 	mov	result1, #206
065a4     84 00 90 FD | 	jmp	#LR__0519
065a8                 | LR__0502
065a8     CB FA 05 F6 | 	mov	result1, #203
065ac     7C 00 90 FD | 	jmp	#LR__0519
065b0                 | LR__0503
065b0     98 FA 05 F6 | 	mov	result1, #152
065b4     74 00 90 FD | 	jmp	#LR__0519
065b8                 | LR__0504
065b8     7B FA 05 F6 | 	mov	result1, #123
065bc     6C 00 90 FD | 	jmp	#LR__0519
065c0                 | LR__0505
065c0     76 FA 05 F6 | 	mov	result1, #118
065c4     64 00 90 FD | 	jmp	#LR__0519
065c8                 | LR__0506
065c8     A5 FA 05 F6 | 	mov	result1, #165
065cc     5C 00 90 FD | 	jmp	#LR__0519
065d0                 | LR__0507
065d0     7A FA 05 F6 | 	mov	result1, #122
065d4     54 00 90 FD | 	jmp	#LR__0519
065d8                 | LR__0508
065d8     BF FA 05 F6 | 	mov	result1, #191
065dc     4C 00 90 FD | 	jmp	#LR__0519
065e0                 | LR__0509
065e0     54 FA 05 F6 | 	mov	result1, #84
065e4     44 00 90 FD | 	jmp	#LR__0519
065e8                 | LR__0510
065e8     6B FA 05 F6 | 	mov	result1, #107
065ec     3C 00 90 FD | 	jmp	#LR__0519
065f0                 | LR__0511
065f0     87 FA 05 F6 | 	mov	result1, #135
065f4     34 00 90 FD | 	jmp	#LR__0519
065f8                 | LR__0512
065f8     6A FA 05 F6 | 	mov	result1, #106
065fc     2C 00 90 FD | 	jmp	#LR__0519
06600                 | LR__0513
06600     6E FA 05 F6 | 	mov	result1, #110
06604     24 00 90 FD | 	jmp	#LR__0519
06608                 | LR__0514
06608     A1 FA 05 F6 | 	mov	result1, #161
0660c     1C 00 90 FD | 	jmp	#LR__0519
06610                 | LR__0515
06610     83 FA 05 F6 | 	mov	result1, #131
06614     14 00 90 FD | 	jmp	#LR__0519
06618                 | LR__0516
06618     A0 FA 05 F6 | 	mov	result1, #160
0661c     0C 00 90 FD | 	jmp	#LR__0519
06620                 | LR__0517
06620     9B FA 05 F6 | 	mov	result1, #155
06624     04 00 90 FD | 	jmp	#LR__0519
06628                 | LR__0518
06628     00 FA 05 F6 | 	mov	result1, #0
0662c                 | LR__0519
0662c     A7 F0 03 F6 | 	mov	ptra, fp
06630     B2 00 A0 FD | 	call	#popregs_
06634                 | _isfunction_ret
06634     2D 00 64 FD | 	ret
06638                 | 
06638                 | ' 
06638                 | ' ' Check if the part is a name
06638                 | ' 
06638                 | ' function isname(s as string) as boolean
06638                 | _isname
06638     0D 4A 05 F6 | 	mov	COUNT_, #13
0663c     A8 00 A0 FD | 	call	#pushregs_
06640     09 27 02 F6 | 	mov	local01, arg01
06644     09 29 02 F6 | 	mov	local02, arg01
06648     97 06 48 FB | 	callpa	#(@LR__0521-@LR__0520)>>2,fcache_load_ptr_
0664c                 | LR__0520
0664c     14 FB C9 FA | 	rdbyte	result1, local02 wz
06650     01 28 06 51 |  if_ne	add	local02, #1
06654     F4 FF 9F 5D |  if_ne	jmp	#LR__0520
06658                 | LR__0521
06658     09 29 82 F1 | 	sub	local02, arg01
0665c     14 FB 01 F6 | 	mov	result1, local02
06660     FD 2A 0A F6 | 	mov	local03, result1 wz
06664     00 FA 05 A6 |  if_e	mov	result1, #0
06668     34 02 90 AD |  if_e	jmp	#LR__0533
0666c     13 13 02 F6 | 	mov	arg01, local01
06670     01 14 06 F6 | 	mov	arg02, #1
06674     01 16 06 F6 | 	mov	arg03, #1
06678     68 29 B2 FD | 	call	#__system__Mid_S
0667c     FD 2C 02 F6 | 	mov	local04, result1
06680                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
06680     B7 01 00 FF 
06684     BE 15 06 F6 | 	mov	arg02, ##@LR__5761
06688     16 13 02 F6 | 	mov	arg01, local04
0668c     E8 07 B2 FD | 	call	#__system___string_cmp
06690     00 FA 55 F2 | 	cmps	result1, #0 wc
06694     18 00 90 CD |  if_b	jmp	#LR__0522
06698     B7 01 00 FF 
0669c     C0 15 06 F6 | 	mov	arg02, ##@LR__5762
066a0     16 13 02 F6 | 	mov	arg01, local04
066a4     D0 07 B2 FD | 	call	#__system___string_cmp
066a8     01 FA 55 F2 | 	cmps	result1, #1 wc
066ac     1C 00 90 CD |  if_b	jmp	#LR__0523
066b0                 | LR__0522
066b0     B7 01 00 FF 
066b4     C2 15 06 F6 | 	mov	arg02, ##@LR__5763
066b8     16 13 02 F6 | 	mov	arg01, local04
066bc     B8 07 B2 FD | 	call	#__system___string_cmp
066c0     00 FA 0D F2 | 	cmp	result1, #0 wz
066c4     00 FA 05 56 |  if_ne	mov	result1, #0
066c8     D4 01 90 5D |  if_ne	jmp	#LR__0533
066cc                 | LR__0523
066cc                 | ' if l>2 then 
066cc     03 2A 56 F2 | 	cmps	local03, #3 wc
066d0     C8 01 90 CD |  if_b	jmp	#LR__0532
066d4                 | '   for i=2 to l
066d4     02 2E 06 F6 | 	mov	local05, #2
066d8     15 31 02 F6 | 	mov	local06, local03
066dc     01 30 06 F1 | 	add	local06, #1
066e0                 | LR__0524
066e0     18 2F 52 F2 | 	cmps	local05, local06 wc
066e4     B4 01 90 3D |  if_ae	jmp	#LR__0531
066e8     13 13 02 F6 | 	mov	arg01, local01
066ec     17 15 02 F6 | 	mov	arg02, local05
066f0     01 16 06 F6 | 	mov	arg03, #1
066f4     EC 28 B2 FD | 	call	#__system__Mid_S
066f8     FD 2C 02 F6 | 	mov	local04, result1
066fc                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false 
066fc     15 2F 52 F2 | 	cmps	local05, local03 wc
06700     9C 00 90 3D |  if_ae	jmp	#LR__0527
06704     B7 01 00 FF 
06708     C4 15 06 F6 | 	mov	arg02, ##@LR__5764
0670c     16 13 02 F6 | 	mov	arg01, local04
06710     64 07 B2 FD | 	call	#__system___string_cmp
06714     00 FA 55 F2 | 	cmps	result1, #0 wc
06718     18 00 90 CD |  if_b	jmp	#LR__0525
0671c     B7 01 00 FF 
06720     C6 15 06 F6 | 	mov	arg02, ##@LR__5765
06724     16 13 02 F6 | 	mov	arg01, local04
06728     4C 07 B2 FD | 	call	#__system___string_cmp
0672c     01 FA 55 F2 | 	cmps	result1, #1 wc
06730     6C 00 90 CD |  if_b	jmp	#LR__0527
06734                 | LR__0525
06734     B7 01 00 FF 
06738     C8 15 06 F6 | 	mov	arg02, ##@LR__5766
0673c     16 13 02 F6 | 	mov	arg01, local04
06740     34 07 B2 FD | 	call	#__system___string_cmp
06744     00 FA 55 F2 | 	cmps	result1, #0 wc
06748     18 00 90 CD |  if_b	jmp	#LR__0526
0674c     B7 01 00 FF 
06750     CA 15 06 F6 | 	mov	arg02, ##@LR__5767
06754     16 13 02 F6 | 	mov	arg01, local04
06758     1C 07 B2 FD | 	call	#__system___string_cmp
0675c     01 FA 55 F2 | 	cmps	result1, #1 wc
06760     3C 00 90 CD |  if_b	jmp	#LR__0527
06764                 | LR__0526
06764     B7 01 00 FF 
06768     CC 33 06 F6 | 	mov	local07, ##@LR__5768
0676c     16 13 02 F6 | 	mov	arg01, local04
06770     19 15 02 F6 | 	mov	arg02, local07
06774     00 07 B2 FD | 	call	#__system___string_cmp
06778     00 FA 0D F2 | 	cmp	result1, #0 wz
0677c     20 00 90 AD |  if_e	jmp	#LR__0527
06780     B7 01 00 FF 
06784     CE 35 06 F6 | 	mov	local08, ##@LR__5769
06788     16 13 02 F6 | 	mov	arg01, local04
0678c     1A 15 02 F6 | 	mov	arg02, local08
06790     E4 06 B2 FD | 	call	#__system___string_cmp
06794     FD 36 0A F6 | 	mov	local09, result1 wz
06798     00 FA 05 56 |  if_ne	mov	result1, #0
0679c     00 01 90 5D |  if_ne	jmp	#LR__0533
067a0                 | LR__0527
067a0                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
067a0     15 2F 0A F2 | 	cmp	local05, local03 wz
067a4     EC 00 90 5D |  if_ne	jmp	#LR__0530
067a8     B7 01 00 FF 
067ac     D0 39 06 F6 | 	mov	local10, ##@LR__5770
067b0     16 13 02 F6 | 	mov	arg01, local04
067b4     1C 15 02 F6 | 	mov	arg02, local10
067b8     BC 06 B2 FD | 	call	#__system___string_cmp
067bc     FD 3A 02 F6 | 	mov	local11, result1
067c0     00 3A 56 F2 | 	cmps	local11, #0 wc
067c4     1C 00 90 CD |  if_b	jmp	#LR__0528
067c8     B7 01 00 FF 
067cc     D2 15 06 F6 | 	mov	arg02, ##@LR__5771
067d0     16 13 02 F6 | 	mov	arg01, local04
067d4     A0 06 B2 FD | 	call	#__system___string_cmp
067d8     FD 38 02 F6 | 	mov	local10, result1
067dc     01 38 56 F2 | 	cmps	local10, #1 wc
067e0     B0 00 90 CD |  if_b	jmp	#LR__0530
067e4                 | LR__0528
067e4     B7 01 00 FF 
067e8     D4 15 06 F6 | 	mov	arg02, ##@LR__5772
067ec     16 13 02 F6 | 	mov	arg01, local04
067f0     84 06 B2 FD | 	call	#__system___string_cmp
067f4     00 FA 55 F2 | 	cmps	result1, #0 wc
067f8     1C 00 90 CD |  if_b	jmp	#LR__0529
067fc     B7 01 00 FF 
06800     D6 37 06 F6 | 	mov	local09, ##@LR__5773
06804     16 13 02 F6 | 	mov	arg01, local04
06808     1B 15 02 F6 | 	mov	arg02, local09
0680c     68 06 B2 FD | 	call	#__system___string_cmp
06810     01 FA 55 F2 | 	cmps	result1, #1 wc
06814     7C 00 90 CD |  if_b	jmp	#LR__0530
06818                 | LR__0529
06818     B7 01 00 FF 
0681c     D8 37 06 F6 | 	mov	local09, ##@LR__5774
06820     16 13 02 F6 | 	mov	arg01, local04
06824     1B 15 02 F6 | 	mov	arg02, local09
06828     4C 06 B2 FD | 	call	#__system___string_cmp
0682c     00 FA 4D F2 | 	cmps	result1, #0 wz
06830     60 00 90 AD |  if_e	jmp	#LR__0530
06834     B7 01 00 FF 
06838     DA 35 06 F6 | 	mov	local08, ##@LR__5775
0683c     16 13 02 F6 | 	mov	arg01, local04
06840     1A 15 02 F6 | 	mov	arg02, local08
06844     30 06 B2 FD | 	call	#__system___string_cmp
06848     FD 36 0A F6 | 	mov	local09, result1 wz
0684c     44 00 90 AD |  if_e	jmp	#LR__0530
06850     B7 01 00 FF 
06854     DC 3D 06 F6 | 	mov	local12, ##@LR__5776
06858     1E 35 02 F6 | 	mov	local08, local12
0685c     16 13 02 F6 | 	mov	arg01, local04
06860     1A 15 02 F6 | 	mov	arg02, local08
06864     10 06 B2 FD | 	call	#__system___string_cmp
06868     FD 32 0A F6 | 	mov	local07, result1 wz
0686c     24 00 90 AD |  if_e	jmp	#LR__0530
06870     B7 01 00 FF 
06874     DE 3F 06 F6 | 	mov	local13, ##@LR__5777
06878     1F 3D 02 F6 | 	mov	local12, local13
0687c     16 13 02 F6 | 	mov	arg01, local04
06880     1E 15 02 F6 | 	mov	arg02, local12
06884     F0 05 B2 FD | 	call	#__system___string_cmp
06888     FD 34 0A F6 | 	mov	local08, result1 wz
0688c     00 FA 05 56 |  if_ne	mov	result1, #0
06890     0C 00 90 5D |  if_ne	jmp	#LR__0533
06894                 | LR__0530
06894     01 2E 06 F1 | 	add	local05, #1
06898     44 FE 9F FD | 	jmp	#LR__0524
0689c                 | LR__0531
0689c                 | LR__0532
0689c                 | ' return true
0689c     01 FA 65 F6 | 	neg	result1, #1
068a0                 | LR__0533
068a0     A7 F0 03 F6 | 	mov	ptra, fp
068a4     B2 00 A0 FD | 	call	#popregs_
068a8                 | _isname_ret
068a8     2D 00 64 FD | 	ret
068ac                 | 
068ac                 | ' 
068ac                 | ' ' Check if the part is a number.  
068ac                 | ' 
068ac                 | ' function isnum(s as string) as boolean 
068ac                 | _isnum
068ac     13 4A 05 F6 | 	mov	COUNT_, #19
068b0     A8 00 A0 FD | 	call	#pushregs_
068b4     09 27 02 F6 | 	mov	local01, arg01
068b8     00 28 06 F6 | 	mov	local02, #0
068bc     00 2A 06 F6 | 	mov	local03, #0
068c0     13 13 02 F6 | 	mov	arg01, local01
068c4     09 2D 02 F6 | 	mov	local04, arg01
068c8     97 06 48 FB | 	callpa	#(@LR__0541-@LR__0540)>>2,fcache_load_ptr_
068cc                 | LR__0540
068cc     16 FB C9 FA | 	rdbyte	result1, local04 wz
068d0     01 2C 06 51 |  if_ne	add	local04, #1
068d4     F4 FF 9F 5D |  if_ne	jmp	#LR__0540
068d8                 | LR__0541
068d8     09 2D 82 F1 | 	sub	local04, arg01
068dc     16 FB 01 F6 | 	mov	result1, local04
068e0     FD 2E 0A F6 | 	mov	local05, result1 wz
068e4     00 FA 05 A6 |  if_e	mov	result1, #0
068e8     A0 03 90 AD |  if_e	jmp	#LR__0556
068ec     13 13 02 F6 | 	mov	arg01, local01
068f0     01 14 06 F6 | 	mov	arg02, #1
068f4     01 16 06 F6 | 	mov	arg03, #1
068f8     E8 26 B2 FD | 	call	#__system__Mid_S
068fc     FD 30 02 F6 | 	mov	local06, result1
06900                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
06900     B7 01 00 FF 
06904     E0 15 06 F6 | 	mov	arg02, ##@LR__5778
06908     18 13 02 F6 | 	mov	arg01, local06
0690c     68 05 B2 FD | 	call	#__system___string_cmp
06910     00 FA 55 F2 | 	cmps	result1, #0 wc
06914     1C 00 90 CD |  if_b	jmp	#LR__0542
06918     B7 01 00 FF 
0691c     E2 33 06 F6 | 	mov	local07, ##@LR__5779
06920     18 13 02 F6 | 	mov	arg01, local06
06924     19 15 02 F6 | 	mov	arg02, local07
06928     4C 05 B2 FD | 	call	#__system___string_cmp
0692c     01 FA 55 F2 | 	cmps	result1, #1 wc
06930     84 00 90 CD |  if_b	jmp	#LR__0543
06934                 | LR__0542
06934     B7 01 00 FF 
06938     E4 35 06 F6 | 	mov	local08, ##@LR__5780
0693c     1A 33 02 F6 | 	mov	local07, local08
06940     18 13 02 F6 | 	mov	arg01, local06
06944     19 15 02 F6 | 	mov	arg02, local07
06948     2C 05 B2 FD | 	call	#__system___string_cmp
0694c     00 FA 0D F2 | 	cmp	result1, #0 wz
06950     64 00 90 AD |  if_e	jmp	#LR__0543
06954     B7 01 00 FF 
06958     E6 37 06 F6 | 	mov	local09, ##@LR__5781
0695c     1B 35 02 F6 | 	mov	local08, local09
06960     18 13 02 F6 | 	mov	arg01, local06
06964     1A 15 02 F6 | 	mov	arg02, local08
06968     0C 05 B2 FD | 	call	#__system___string_cmp
0696c     FD 32 0A F6 | 	mov	local07, result1 wz
06970     44 00 90 AD |  if_e	jmp	#LR__0543
06974     B7 01 00 FF 
06978     E8 39 06 F6 | 	mov	local10, ##@LR__5782
0697c     1C 37 02 F6 | 	mov	local09, local10
06980     18 13 02 F6 | 	mov	arg01, local06
06984     1B 15 02 F6 | 	mov	arg02, local09
06988     EC 04 B2 FD | 	call	#__system___string_cmp
0698c     FD 34 0A F6 | 	mov	local08, result1 wz
06990     24 00 90 AD |  if_e	jmp	#LR__0543
06994     B7 01 00 FF 
06998     EA 3B 06 F6 | 	mov	local11, ##@LR__5783
0699c     1D 39 02 F6 | 	mov	local10, local11
069a0     18 13 02 F6 | 	mov	arg01, local06
069a4     1C 15 02 F6 | 	mov	arg02, local10
069a8     CC 04 B2 FD | 	call	#__system___string_cmp
069ac     FD 36 0A F6 | 	mov	local09, result1 wz
069b0     00 FA 05 56 |  if_ne	mov	result1, #0
069b4     D4 02 90 5D |  if_ne	jmp	#LR__0556
069b8                 | LR__0543
069b8                 | ' if m$="." then ds=1
069b8     B7 01 00 FF 
069bc     EC 15 06 F6 | 	mov	arg02, ##@LR__5784
069c0     18 13 02 F6 | 	mov	arg01, local06
069c4     B0 04 B2 FD | 	call	#__system___string_cmp
069c8     00 FA 0D F2 | 	cmp	result1, #0 wz
069cc     01 28 06 A6 |  if_e	mov	local02, #1
069d0                 | ' if m$="$" then hex=1 else hex=0
069d0     B7 01 00 FF 
069d4     EE 15 06 F6 | 	mov	arg02, ##@LR__5785
069d8     18 13 02 F6 | 	mov	arg01, local06
069dc     98 04 B2 FD | 	call	#__system___string_cmp
069e0     00 FA 0D F2 | 	cmp	result1, #0 wz
069e4     01 3C 06 A6 |  if_e	mov	local12, #1
069e8     00 3C 06 56 |  if_ne	mov	local12, #0
069ec                 | ' if m$="%" then bin=1 else bin=0
069ec     B7 01 00 FF 
069f0     F0 15 06 F6 | 	mov	arg02, ##@LR__5786
069f4     18 13 02 F6 | 	mov	arg01, local06
069f8     7C 04 B2 FD | 	call	#__system___string_cmp
069fc     00 FA 0D F2 | 	cmp	result1, #0 wz
06a00     01 3E 06 A6 |  if_e	mov	local13, #1
06a04     00 3E 06 56 |  if_ne	mov	local13, #0
06a08                 | ' if l>1 then 
06a08     02 2E 56 F2 | 	cmps	local05, #2 wc
06a0c     78 02 90 CD |  if_b	jmp	#LR__0555
06a10                 | '   for i=2 to l
06a10     02 40 06 F6 | 	mov	local14, #2
06a14     17 43 02 F6 | 	mov	local15, local05
06a18     01 42 06 F1 | 	add	local15, #1
06a1c                 | LR__0544
06a1c     21 41 52 F2 | 	cmps	local14, local15 wc
06a20     64 02 90 3D |  if_ae	jmp	#LR__0554
06a24     13 13 02 F6 | 	mov	arg01, local01
06a28     20 15 02 F6 | 	mov	arg02, local14
06a2c     01 16 06 F6 | 	mov	arg03, #1
06a30     B0 25 B2 FD | 	call	#__system__Mid_S
06a34     FD 30 02 F6 | 	mov	local06, result1
06a38     00 44 06 F6 | 	mov	local16, #0
06a3c                 | '     m$=mid$(s,i,1) : b=false
06a3c                 | '     if m$>="0" andalso m$<="9" then b=true  
06a3c     B7 01 00 FF 
06a40     F2 15 06 F6 | 	mov	arg02, ##@LR__5787
06a44     18 13 02 F6 | 	mov	arg01, local06
06a48     2C 04 B2 FD | 	call	#__system___string_cmp
06a4c     00 FA 55 F2 | 	cmps	result1, #0 wc
06a50     1C 00 90 CD |  if_b	jmp	#LR__0545
06a54     B7 01 00 FF 
06a58     F4 33 06 F6 | 	mov	local07, ##@LR__5788
06a5c     18 13 02 F6 | 	mov	arg01, local06
06a60     19 15 02 F6 | 	mov	arg02, local07
06a64     10 04 B2 FD | 	call	#__system___string_cmp
06a68     01 FA 55 F2 | 	cmps	result1, #1 wc
06a6c     01 44 66 C6 |  if_b	neg	local16, #1
06a70                 | LR__0545
06a70                 | '     if m$="_" orelse m$="." orelse m$="E" orelse m$="e" orelse m$="-" then b=true 
06a70     B7 01 00 FF 
06a74     F6 15 06 F6 | 	mov	arg02, ##@LR__5789
06a78     18 13 02 F6 | 	mov	arg01, local06
06a7c     F8 03 B2 FD | 	call	#__system___string_cmp
06a80     00 FA 0D F2 | 	cmp	result1, #0 wz
06a84     7C 00 90 AD |  if_e	jmp	#LR__0546
06a88     B7 01 00 FF 
06a8c     F8 33 06 F6 | 	mov	local07, ##@LR__5790
06a90     18 13 02 F6 | 	mov	arg01, local06
06a94     19 15 02 F6 | 	mov	arg02, local07
06a98     DC 03 B2 FD | 	call	#__system___string_cmp
06a9c     00 FA 0D F2 | 	cmp	result1, #0 wz
06aa0     60 00 90 AD |  if_e	jmp	#LR__0546
06aa4     B7 01 00 FF 
06aa8     FA 35 06 F6 | 	mov	local08, ##@LR__5791
06aac     1A 33 02 F6 | 	mov	local07, local08
06ab0     18 13 02 F6 | 	mov	arg01, local06
06ab4     19 15 02 F6 | 	mov	arg02, local07
06ab8     BC 03 B2 FD | 	call	#__system___string_cmp
06abc     00 FA 0D F2 | 	cmp	result1, #0 wz
06ac0     40 00 90 AD |  if_e	jmp	#LR__0546
06ac4     B7 01 00 FF 
06ac8     FC 37 06 F6 | 	mov	local09, ##@LR__5792
06acc     1B 35 02 F6 | 	mov	local08, local09
06ad0     18 13 02 F6 | 	mov	arg01, local06
06ad4     1A 15 02 F6 | 	mov	arg02, local08
06ad8     9C 03 B2 FD | 	call	#__system___string_cmp
06adc     FD 32 0A F6 | 	mov	local07, result1 wz
06ae0     20 00 90 AD |  if_e	jmp	#LR__0546
06ae4     B7 01 00 FF 
06ae8     FE 39 06 F6 | 	mov	local10, ##@LR__5793
06aec     1C 37 02 F6 | 	mov	local09, local10
06af0     18 13 02 F6 | 	mov	arg01, local06
06af4     1B 15 02 F6 | 	mov	arg02, local09
06af8     7C 03 B2 FD | 	call	#__system___string_cmp
06afc     FD 34 0A F6 | 	mov	local08, result1 wz
06b00     04 00 90 5D |  if_ne	jmp	#LR__0547
06b04                 | LR__0546
06b04     01 44 66 F6 | 	neg	local16, #1
06b08                 | LR__0547
06b08                 | '     if hex=1 andalso m$>="a" andalso m$<="f" then b=true
06b08     01 3C 0E F2 | 	cmp	local12, #1 wz
06b0c     34 00 90 5D |  if_ne	jmp	#LR__0548
06b10     B8 01 00 FF 
06b14     00 14 06 F6 | 	mov	arg02, ##@LR__5794
06b18     18 13 02 F6 | 	mov	arg01, local06
06b1c     58 03 B2 FD | 	call	#__system___string_cmp
06b20     00 FA 55 F2 | 	cmps	result1, #0 wc
06b24     1C 00 90 CD |  if_b	jmp	#LR__0548
06b28     B8 01 00 FF 
06b2c     02 32 06 F6 | 	mov	local07, ##@LR__5795
06b30     18 13 02 F6 | 	mov	arg01, local06
06b34     19 15 02 F6 | 	mov	arg02, local07
06b38     3C 03 B2 FD | 	call	#__system___string_cmp
06b3c     01 FA 55 F2 | 	cmps	result1, #1 wc
06b40     01 44 66 C6 |  if_b	neg	local16, #1
06b44                 | LR__0548
06b44                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_" then return false
06b44     01 3E 0E F2 | 	cmp	local13, #1 wz
06b48     58 00 90 5D |  if_ne	jmp	#LR__0550
06b4c     B8 01 00 FF 
06b50     04 14 06 F6 | 	mov	arg02, ##@LR__5796
06b54     18 13 02 F6 | 	mov	arg01, local06
06b58     1C 03 B2 FD | 	call	#__system___string_cmp
06b5c     00 FA 55 F2 | 	cmps	result1, #0 wc
06b60     1C 00 90 CD |  if_b	jmp	#LR__0549
06b64     B8 01 00 FF 
06b68     06 32 06 F6 | 	mov	local07, ##@LR__5797
06b6c     18 13 02 F6 | 	mov	arg01, local06
06b70     19 15 02 F6 | 	mov	arg02, local07
06b74     00 03 B2 FD | 	call	#__system___string_cmp
06b78     01 FA 55 F2 | 	cmps	result1, #1 wc
06b7c     24 00 90 CD |  if_b	jmp	#LR__0550
06b80                 | LR__0549
06b80     B8 01 00 FF 
06b84     08 34 06 F6 | 	mov	local08, ##@LR__5798
06b88     1A 33 02 F6 | 	mov	local07, local08
06b8c     18 13 02 F6 | 	mov	arg01, local06
06b90     19 15 02 F6 | 	mov	arg02, local07
06b94     E0 02 B2 FD | 	call	#__system___string_cmp
06b98     00 FA 0D F2 | 	cmp	result1, #0 wz
06b9c     00 FA 05 56 |  if_ne	mov	result1, #0
06ba0     E8 00 90 5D |  if_ne	jmp	#LR__0556
06ba4                 | LR__0550
06ba4                 | '     if not b then return false
06ba4     22 45 22 F6 | 	not	local16, local16
06ba8     00 44 0E F2 | 	cmp	local16, #0 wz
06bac     00 FA 05 56 |  if_ne	mov	result1, #0
06bb0     D8 00 90 5D |  if_ne	jmp	#LR__0556
06bb4                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
06bb4     B8 01 00 FF 
06bb8     0A 14 06 F6 | 	mov	arg02, ##@LR__5799
06bbc     18 13 02 F6 | 	mov	arg01, local06
06bc0     B4 02 B2 FD | 	call	#__system___string_cmp
06bc4     00 FA 0D F2 | 	cmp	result1, #0 wz
06bc8     3C 00 90 5D |  if_ne	jmp	#LR__0551
06bcc     20 15 02 F6 | 	mov	arg02, local14
06bd0     01 14 86 F1 | 	sub	arg02, #1
06bd4     13 13 02 F6 | 	mov	arg01, local01
06bd8     01 16 06 F6 | 	mov	arg03, #1
06bdc     04 24 B2 FD | 	call	#__system__Mid_S
06be0     FD 12 02 F6 | 	mov	arg01, result1
06be4     F4 25 B2 FD | 	call	#__system__LCase_S
06be8     FD 12 02 F6 | 	mov	arg01, result1
06bec     B8 01 00 FF 
06bf0     0C 32 06 F6 | 	mov	local07, ##@LR__5800
06bf4     19 15 02 F6 | 	mov	arg02, local07
06bf8     7C 02 B2 FD | 	call	#__system___string_cmp
06bfc     00 FA 0D F2 | 	cmp	result1, #0 wz
06c00     00 FA 05 56 |  if_ne	mov	result1, #0
06c04     84 00 90 5D |  if_ne	jmp	#LR__0556
06c08                 | LR__0551
06c08                 | '     if m$="." then ds+=1: if ds>1 then return false
06c08     B8 01 00 FF 
06c0c     0E 14 06 F6 | 	mov	arg02, ##@LR__5801
06c10     18 13 02 F6 | 	mov	arg01, local06
06c14     60 02 B2 FD | 	call	#__system___string_cmp
06c18     00 FA 0D F2 | 	cmp	result1, #0 wz
06c1c     01 28 06 A1 |  if_e	add	local02, #1
06c20     02 28 56 A2 |  if_e	cmps	local02, #2 wc
06c24     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
06c28     60 00 90 2D |  if_nc_and_z	jmp	#LR__0556
06c2c                 | '     if m$="E" orelse m$="e" then es+=1: if hex=0 andalso es>1 then return false
06c2c     B8 01 00 FF 
06c30     10 46 06 F6 | 	mov	local17, ##@LR__5802
06c34     23 49 02 F6 | 	mov	local18, local17
06c38     18 13 02 F6 | 	mov	arg01, local06
06c3c     24 15 02 F6 | 	mov	arg02, local18
06c40     34 02 B2 FD | 	call	#__system___string_cmp
06c44     FD 4A 0A F6 | 	mov	local19, result1 wz
06c48     20 00 90 AD |  if_e	jmp	#LR__0552
06c4c     B8 01 00 FF 
06c50     12 32 06 F6 | 	mov	local07, ##@LR__5803
06c54     19 47 02 F6 | 	mov	local17, local07
06c58     18 13 02 F6 | 	mov	arg01, local06
06c5c     23 15 02 F6 | 	mov	arg02, local17
06c60     14 02 B2 FD | 	call	#__system___string_cmp
06c64     FD 48 0A F6 | 	mov	local18, result1 wz
06c68     14 00 90 5D |  if_ne	jmp	#LR__0553
06c6c                 | LR__0552
06c6c     01 2A 06 F1 | 	add	local03, #1
06c70     00 3C 0E F2 | 	cmp	local12, #0 wz
06c74     02 2A 56 A2 |  if_e	cmps	local03, #2 wc
06c78     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
06c7c     0C 00 90 2D |  if_nc_and_z	jmp	#LR__0556
06c80                 | LR__0553
06c80     01 40 06 F1 | 	add	local14, #1
06c84     94 FD 9F FD | 	jmp	#LR__0544
06c88                 | LR__0554
06c88                 | LR__0555
06c88                 | ' return true
06c88     01 FA 65 F6 | 	neg	result1, #1
06c8c                 | LR__0556
06c8c     A7 F0 03 F6 | 	mov	ptra, fp
06c90     B2 00 A0 FD | 	call	#popregs_
06c94                 | _isnum_ret
06c94     2D 00 64 FD | 	ret
06c98                 | 
06c98                 | '   
06c98                 | ' ' Check if the part is an integer number.    
06c98                 | '   
06c98                 | ' function isint(s as string) as boolean
06c98                 | _isint
06c98     0E 4A 05 F6 | 	mov	COUNT_, #14
06c9c     A8 00 A0 FD | 	call	#pushregs_
06ca0     09 27 02 F6 | 	mov	local01, arg01
06ca4     09 29 02 F6 | 	mov	local02, arg01
06ca8     97 06 48 FB | 	callpa	#(@LR__0561-@LR__0560)>>2,fcache_load_ptr_
06cac                 | LR__0560
06cac     14 FB C9 FA | 	rdbyte	result1, local02 wz
06cb0     01 28 06 51 |  if_ne	add	local02, #1
06cb4     F4 FF 9F 5D |  if_ne	jmp	#LR__0560
06cb8                 | LR__0561
06cb8     09 29 82 F1 | 	sub	local02, arg01
06cbc     14 FB 01 F6 | 	mov	result1, local02
06cc0     FD 2A 0A F6 | 	mov	local03, result1 wz
06cc4     00 FA 05 A6 |  if_e	mov	result1, #0
06cc8     64 02 90 AD |  if_e	jmp	#LR__0574
06ccc     13 13 02 F6 | 	mov	arg01, local01
06cd0     01 14 06 F6 | 	mov	arg02, #1
06cd4     01 16 06 F6 | 	mov	arg03, #1
06cd8     08 23 B2 FD | 	call	#__system__Mid_S
06cdc     FD 2C 02 F6 | 	mov	local04, result1
06ce0                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
06ce0     B8 01 00 FF 
06ce4     14 14 06 F6 | 	mov	arg02, ##@LR__5804
06ce8     16 13 02 F6 | 	mov	arg01, local04
06cec     88 01 B2 FD | 	call	#__system___string_cmp
06cf0     00 FA 55 F2 | 	cmps	result1, #0 wc
06cf4     1C 00 90 CD |  if_b	jmp	#LR__0562
06cf8     B8 01 00 FF 
06cfc     16 2E 06 F6 | 	mov	local05, ##@LR__5805
06d00     16 13 02 F6 | 	mov	arg01, local04
06d04     17 15 02 F6 | 	mov	arg02, local05
06d08     6C 01 B2 FD | 	call	#__system___string_cmp
06d0c     01 FA 55 F2 | 	cmps	result1, #1 wc
06d10     64 00 90 CD |  if_b	jmp	#LR__0563
06d14                 | LR__0562
06d14     B8 01 00 FF 
06d18     18 30 06 F6 | 	mov	local06, ##@LR__5806
06d1c     18 2F 02 F6 | 	mov	local05, local06
06d20     16 13 02 F6 | 	mov	arg01, local04
06d24     17 15 02 F6 | 	mov	arg02, local05
06d28     4C 01 B2 FD | 	call	#__system___string_cmp
06d2c     00 FA 0D F2 | 	cmp	result1, #0 wz
06d30     44 00 90 AD |  if_e	jmp	#LR__0563
06d34     B8 01 00 FF 
06d38     1A 32 06 F6 | 	mov	local07, ##@LR__5807
06d3c     19 31 02 F6 | 	mov	local06, local07
06d40     16 13 02 F6 | 	mov	arg01, local04
06d44     18 15 02 F6 | 	mov	arg02, local06
06d48     2C 01 B2 FD | 	call	#__system___string_cmp
06d4c     FD 2E 0A F6 | 	mov	local05, result1 wz
06d50     24 00 90 AD |  if_e	jmp	#LR__0563
06d54     B8 01 00 FF 
06d58     1C 34 06 F6 | 	mov	local08, ##@LR__5808
06d5c     1A 33 02 F6 | 	mov	local07, local08
06d60     16 13 02 F6 | 	mov	arg01, local04
06d64     19 15 02 F6 | 	mov	arg02, local07
06d68     0C 01 B2 FD | 	call	#__system___string_cmp
06d6c     FD 30 0A F6 | 	mov	local06, result1 wz
06d70     00 FA 05 56 |  if_ne	mov	result1, #0
06d74     B8 01 90 5D |  if_ne	jmp	#LR__0574
06d78                 | LR__0563
06d78                 | ' if m$="$" then hex=1 else hex=0
06d78     B8 01 00 FF 
06d7c     1E 14 06 F6 | 	mov	arg02, ##@LR__5809
06d80     16 13 02 F6 | 	mov	arg01, local04
06d84     F0 00 B2 FD | 	call	#__system___string_cmp
06d88     00 FA 0D F2 | 	cmp	result1, #0 wz
06d8c     01 36 06 A6 |  if_e	mov	local09, #1
06d90     00 36 06 56 |  if_ne	mov	local09, #0
06d94                 | ' if m$="%" then bin=1 else bin=0
06d94     B8 01 00 FF 
06d98     20 14 06 F6 | 	mov	arg02, ##@LR__5810
06d9c     16 13 02 F6 | 	mov	arg01, local04
06da0     D4 00 B2 FD | 	call	#__system___string_cmp
06da4     00 FA 0D F2 | 	cmp	result1, #0 wz
06da8     01 38 06 A6 |  if_e	mov	local10, #1
06dac     00 38 06 56 |  if_ne	mov	local10, #0
06db0                 | ' if l>1 then 
06db0     02 2A 56 F2 | 	cmps	local03, #2 wc
06db4     74 01 90 CD |  if_b	jmp	#LR__0573
06db8                 | '   for i=2 to l
06db8     02 3A 06 F6 | 	mov	local11, #2
06dbc     15 3D 02 F6 | 	mov	local12, local03
06dc0     01 3C 06 F1 | 	add	local12, #1
06dc4                 | LR__0564
06dc4     1E 3B 52 F2 | 	cmps	local11, local12 wc
06dc8     60 01 90 3D |  if_ae	jmp	#LR__0572
06dcc     13 13 02 F6 | 	mov	arg01, local01
06dd0     1D 15 02 F6 | 	mov	arg02, local11
06dd4     01 16 06 F6 | 	mov	arg03, #1
06dd8     08 22 B2 FD | 	call	#__system__Mid_S
06ddc     FD 2C 02 F6 | 	mov	local04, result1
06de0                 | '     m$=mid$(s,i,1) 
06de0                 | '     if hex=0 andalso (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
06de0     00 36 0E F2 | 	cmp	local09, #0 wz
06de4     50 00 90 5D |  if_ne	jmp	#LR__0566
06de8     B8 01 00 FF 
06dec     22 14 06 F6 | 	mov	arg02, ##@LR__5811
06df0     16 13 02 F6 | 	mov	arg01, local04
06df4     80 00 B2 FD | 	call	#__system___string_cmp
06df8     00 FA 55 F2 | 	cmps	result1, #0 wc
06dfc     18 00 90 CD |  if_b	jmp	#LR__0565
06e00     B8 01 00 FF 
06e04     24 14 06 F6 | 	mov	arg02, ##@LR__5812
06e08     16 13 02 F6 | 	mov	arg01, local04
06e0c     68 00 B2 FD | 	call	#__system___string_cmp
06e10     01 FA 55 F2 | 	cmps	result1, #1 wc
06e14     20 00 90 CD |  if_b	jmp	#LR__0566
06e18                 | LR__0565
06e18     B8 01 00 FF 
06e1c     26 30 06 F6 | 	mov	local06, ##@LR__5813
06e20     16 13 02 F6 | 	mov	arg01, local04
06e24     18 15 02 F6 | 	mov	arg02, local06
06e28     4C 00 B2 FD | 	call	#__system___string_cmp
06e2c     00 FA 0D F2 | 	cmp	result1, #0 wz
06e30     00 FA 05 56 |  if_ne	mov	result1, #0
06e34     F8 00 90 5D |  if_ne	jmp	#LR__0574
06e38                 | LR__0566
06e38                 | '     if hex=1 andalso (m$<"0" orelse m$>"9") andalso (m$<"a" orelse m$>"f") andalso m$<>"_"  then return false
06e38     01 36 0E F2 | 	cmp	local09, #1 wz
06e3c     90 00 90 5D |  if_ne	jmp	#LR__0569
06e40     B8 01 00 FF 
06e44     28 14 06 F6 | 	mov	arg02, ##@LR__5814
06e48     16 13 02 F6 | 	mov	arg01, local04
06e4c     28 00 B2 FD | 	call	#__system___string_cmp
06e50     00 FA 55 F2 | 	cmps	result1, #0 wc
06e54     1C 00 90 CD |  if_b	jmp	#LR__0567
06e58     B8 01 00 FF 
06e5c     2A 14 06 F6 | 	mov	arg02, ##@LR__5815
06e60     16 13 02 F6 | 	mov	arg01, local04
06e64     10 00 B2 FD | 	call	#__system___string_cmp
06e68     FD 3E 02 F6 | 	mov	local13, result1
06e6c     01 3E 56 F2 | 	cmps	local13, #1 wc
06e70     5C 00 90 CD |  if_b	jmp	#LR__0569
06e74                 | LR__0567
06e74     B8 01 00 FF 
06e78     2C 2E 06 F6 | 	mov	local05, ##@LR__5816
06e7c     16 13 02 F6 | 	mov	arg01, local04
06e80     17 15 02 F6 | 	mov	arg02, local05
06e84     F0 FF B1 FD | 	call	#__system___string_cmp
06e88     FD 40 02 F6 | 	mov	local14, result1
06e8c     00 40 56 F2 | 	cmps	local14, #0 wc
06e90     1C 00 90 CD |  if_b	jmp	#LR__0568
06e94     B8 01 00 FF 
06e98     2E 32 06 F6 | 	mov	local07, ##@LR__5817
06e9c     16 13 02 F6 | 	mov	arg01, local04
06ea0     19 15 02 F6 | 	mov	arg02, local07
06ea4     D0 FF B1 FD | 	call	#__system___string_cmp
06ea8     01 FA 55 F2 | 	cmps	result1, #1 wc
06eac     20 00 90 CD |  if_b	jmp	#LR__0569
06eb0                 | LR__0568
06eb0     B8 01 00 FF 
06eb4     30 34 06 F6 | 	mov	local08, ##@LR__5818
06eb8     16 13 02 F6 | 	mov	arg01, local04
06ebc     1A 15 02 F6 | 	mov	arg02, local08
06ec0     B4 FF B1 FD | 	call	#__system___string_cmp
06ec4     00 FA 0D F2 | 	cmp	result1, #0 wz
06ec8     00 FA 05 56 |  if_ne	mov	result1, #0
06ecc     60 00 90 5D |  if_ne	jmp	#LR__0574
06ed0                 | LR__0569
06ed0                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_"  then return false
06ed0     01 38 0E F2 | 	cmp	local10, #1 wz
06ed4     4C 00 90 5D |  if_ne	jmp	#LR__0571
06ed8     B8 01 00 FF 
06edc     32 14 06 F6 | 	mov	arg02, ##@LR__5819
06ee0     16 13 02 F6 | 	mov	arg01, local04
06ee4     90 FF B1 FD | 	call	#__system___string_cmp
06ee8     00 FA 55 F2 | 	cmps	result1, #0 wc
06eec     18 00 90 CD |  if_b	jmp	#LR__0570
06ef0     B8 01 00 FF 
06ef4     34 14 06 F6 | 	mov	arg02, ##@LR__5820
06ef8     16 13 02 F6 | 	mov	arg01, local04
06efc     78 FF B1 FD | 	call	#__system___string_cmp
06f00     01 FA 55 F2 | 	cmps	result1, #1 wc
06f04     1C 00 90 CD |  if_b	jmp	#LR__0571
06f08                 | LR__0570
06f08     B8 01 00 FF 
06f0c     36 14 06 F6 | 	mov	arg02, ##@LR__5821
06f10     16 13 02 F6 | 	mov	arg01, local04
06f14     60 FF B1 FD | 	call	#__system___string_cmp
06f18     00 FA 0D F2 | 	cmp	result1, #0 wz
06f1c     00 FA 05 56 |  if_ne	mov	result1, #0
06f20     0C 00 90 5D |  if_ne	jmp	#LR__0574
06f24                 | LR__0571
06f24     01 3A 06 F1 | 	add	local11, #1
06f28     98 FE 9F FD | 	jmp	#LR__0564
06f2c                 | LR__0572
06f2c                 | LR__0573
06f2c                 | ' return true
06f2c     01 FA 65 F6 | 	neg	result1, #1
06f30                 | LR__0574
06f30     A7 F0 03 F6 | 	mov	ptra, fp
06f34     B2 00 A0 FD | 	call	#popregs_
06f38                 | _isint_ret
06f38     2D 00 64 FD | 	ret
06f3c                 | 
06f3c                 | ' 
06f3c                 | ' ' Check if the part is a positive decimal number.  
06f3c                 | ' 
06f3c                 | ' function isdec(s as string) as boolean
06f3c                 | _isdec
06f3c     05 4A 05 F6 | 	mov	COUNT_, #5
06f40     A8 00 A0 FD | 	call	#pushregs_
06f44     09 27 02 F6 | 	mov	local01, arg01
06f48     09 29 02 F6 | 	mov	local02, arg01
06f4c     97 06 48 FB | 	callpa	#(@LR__0581-@LR__0580)>>2,fcache_load_ptr_
06f50                 | LR__0580
06f50     14 FB C9 FA | 	rdbyte	result1, local02 wz
06f54     01 28 06 51 |  if_ne	add	local02, #1
06f58     F4 FF 9F 5D |  if_ne	jmp	#LR__0580
06f5c                 | LR__0581
06f5c     09 29 82 F1 | 	sub	local02, arg01
06f60     14 FB 01 F6 | 	mov	result1, local02
06f64     FD 28 0A F6 | 	mov	local02, result1 wz
06f68     00 FA 05 A6 |  if_e	mov	result1, #0
06f6c     80 00 90 AD |  if_e	jmp	#LR__0586
06f70                 | ' for i=1 to l
06f70     01 2A 06 F6 | 	mov	local03, #1
06f74     14 2D 02 F6 | 	mov	local04, local02
06f78     01 2C 06 F1 | 	add	local04, #1
06f7c                 | LR__0582
06f7c     16 2B 52 F2 | 	cmps	local03, local04 wc
06f80     68 00 90 3D |  if_ae	jmp	#LR__0585
06f84     13 13 02 F6 | 	mov	arg01, local01
06f88     15 15 02 F6 | 	mov	arg02, local03
06f8c     01 16 06 F6 | 	mov	arg03, #1
06f90     50 20 B2 FD | 	call	#__system__Mid_S
06f94     FD 2E 02 F6 | 	mov	local05, result1
06f98                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
06f98     B8 01 00 FF 
06f9c     38 14 06 F6 | 	mov	arg02, ##@LR__5822
06fa0     17 13 02 F6 | 	mov	arg01, local05
06fa4     D0 FE B1 FD | 	call	#__system___string_cmp
06fa8     00 FA 55 F2 | 	cmps	result1, #0 wc
06fac     18 00 90 CD |  if_b	jmp	#LR__0583
06fb0     B8 01 00 FF 
06fb4     3A 14 06 F6 | 	mov	arg02, ##@LR__5823
06fb8     17 13 02 F6 | 	mov	arg01, local05
06fbc     B8 FE B1 FD | 	call	#__system___string_cmp
06fc0     01 FA 55 F2 | 	cmps	result1, #1 wc
06fc4     1C 00 90 CD |  if_b	jmp	#LR__0584
06fc8                 | LR__0583
06fc8     B8 01 00 FF 
06fcc     3C 14 06 F6 | 	mov	arg02, ##@LR__5824
06fd0     17 13 02 F6 | 	mov	arg01, local05
06fd4     A0 FE B1 FD | 	call	#__system___string_cmp
06fd8     00 FA 0D F2 | 	cmp	result1, #0 wz
06fdc     00 FA 05 56 |  if_ne	mov	result1, #0
06fe0     0C 00 90 5D |  if_ne	jmp	#LR__0586
06fe4                 | LR__0584
06fe4     01 2A 06 F1 | 	add	local03, #1
06fe8     90 FF 9F FD | 	jmp	#LR__0582
06fec                 | LR__0585
06fec                 | ' return true
06fec     01 FA 65 F6 | 	neg	result1, #1
06ff0                 | LR__0586
06ff0     A7 F0 03 F6 | 	mov	ptra, fp
06ff4     B2 00 A0 FD | 	call	#popregs_
06ff8                 | _isdec_ret
06ff8     2D 00 64 FD | 	ret
06ffc                 | 
06ffc                 | ' 
06ffc                 | ' ' Check if the part is a string.  
06ffc                 | ' 
06ffc                 | ' function isstring(s as string) as boolean
06ffc                 | _isstring
06ffc     01 4A 05 F6 | 	mov	COUNT_, #1
07000     A8 00 A0 FD | 	call	#pushregs_
07004                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
07004     09 27 02 F6 | 	mov	local01, arg01
07008     01 14 06 F6 | 	mov	arg02, #1
0700c     BC 1E B2 FD | 	call	#__system__Left_S
07010     FD 12 02 F6 | 	mov	arg01, result1
07014     B8 01 00 FF 
07018     3E 14 06 F6 | 	mov	arg02, ##@LR__5825
0701c     58 FE B1 FD | 	call	#__system___string_cmp
07020     00 FA 4D F2 | 	cmps	result1, #0 wz
07024     28 00 90 5D |  if_ne	jmp	#LR__0590
07028     13 13 02 F6 | 	mov	arg01, local01
0702c     01 14 06 F6 | 	mov	arg02, #1
07030     20 1F B2 FD | 	call	#__system__Right_S
07034     FD 12 02 F6 | 	mov	arg01, result1
07038     B8 01 00 FF 
0703c     40 14 06 F6 | 	mov	arg02, ##@LR__5826
07040     34 FE B1 FD | 	call	#__system___string_cmp
07044     00 FA 4D F2 | 	cmps	result1, #0 wz
07048     01 FA 65 A6 |  if_e	neg	result1, #1
0704c     04 00 90 AD |  if_e	jmp	#LR__0591
07050                 | LR__0590
07050     00 FA 05 F6 | 	mov	result1, #0
07054                 | LR__0591
07054     A7 F0 03 F6 | 	mov	ptra, fp
07058     B2 00 A0 FD | 	call	#popregs_
0705c                 | _isstring_ret
0705c     2D 00 64 FD | 	ret
07060                 | 
07060                 | ' 
07060                 | ' ' getnoteval. Returns the frequency of note token
07060                 | ' 
07060                 | ' function getnoteval(token) as single
07060                 | _getnoteval
07060     02 4A 05 F6 | 	mov	COUNT_, #2
07064     A8 00 A0 FD | 	call	#pushregs_
07068     01 00 00 FF 
0706c     00 13 86 F1 | 	sub	arg01, ##768
07070     09 15 52 F6 | 	abs	arg02, arg01 wc
07074     0C 14 16 FD | 	qdiv	arg02, #12
07078     14 00 00 FF 
0707c     D8 E4 05 F1 | 	add	objptr, ##10456
07080     19 14 62 FD | 	getqy	arg02
07084     0A 15 82 F6 | 	negc	arg02, arg02
07088     02 14 66 F0 | 	shl	arg02, #2
0708c     F2 14 02 F1 | 	add	arg02, objptr
07090     0A 27 02 FB | 	rdlong	local01, arg02
07094     09 15 52 F6 | 	abs	arg02, arg01 wc
07098     0C 14 16 FD | 	qdiv	arg02, #12
0709c     14 00 00 FF 
070a0     D8 E4 85 F1 | 	sub	objptr, ##10456
070a4     01 12 06 F6 | 	mov	arg01, #1
070a8                 | ' noteexp=1+(note/12) 
070a8                 | ' return (2.0^noteexp)*notebase
070a8     18 14 62 FD | 	getqx	arg02
070ac     0A 13 82 F3 | 	sumc	arg01, arg02
070b0     09 13 52 F6 | 	abs	arg01, arg01 wc
070b4     1F 28 C6 C9 |  if_b	decod	local02, #31
070b8     00 28 06 36 |  if_ae	mov	local02, #0
070bc     04 28 B2 FD | 	call	#__system___float_fromuns
070c0     14 FB 61 F5 | 	xor	result1, local02
070c4     FD 14 02 F6 | 	mov	arg02, result1
070c8     1E 12 C6 F9 | 	decod	arg01, #30
070cc     00 3B B2 FD | 	call	#__system____builtin_powf
070d0     FD 12 02 F6 | 	mov	arg01, result1
070d4     13 15 02 F6 | 	mov	arg02, local01
070d8     EC 2B B2 FD | 	call	#__system___float_mul
070dc     A7 F0 03 F6 | 	mov	ptra, fp
070e0     B2 00 A0 FD | 	call	#popregs_
070e4                 | _getnoteval_ret
070e4     2D 00 64 FD | 	ret
070e8                 | 
070e8                 | ' 
070e8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
070e8                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
070e8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
070e8                 | ' 
070e8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
070e8                 | ' '
070e8                 | ' '               		REVERSE POLISH NOTATION PRECOMPILER
070e8                 | ' '
070e8                 | ' ' A precompiler gets the tokenized line at the input, and outputs the precompiled line that uses the reverse Polish notation.
070e8                 | ' ' That means the operation is done by firs placing the arguments on the stack, and then do the operation on a top of this stack.
070e8                 | ' ' The expression a=b*(c+d) is translated to push c, push d, add, push b, mul, push variable#, assign
070e8                 | ' ' If the precompiled line has a number that is >0, then it is added to the program and saved in the PSRAM using the 2-way list structure
070e8                 | ' ' If the line number=0, it is not saved, and instead it is immediately executed in the "interpret" function
070e8                 | ' ' 
070e8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
070e8                 | ' 
070e8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
070e8                 | ' ' Helper functions to manage program lines
070e8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
070e8                 | ' 
070e8                 | ' '----- delete a line from a program
070e8                 | ' 
070e8                 | ' function deleteline(aline as ulong) as integer
070e8                 | _deleteline
070e8     02 4A 05 F6 | 	mov	COUNT_, #2
070ec     A8 00 A0 FD | 	call	#pushregs_
070f0     2C F0 07 F1 | 	add	ptra, #44
070f4     04 4E 05 F1 | 	add	fp, #4
070f8     A7 12 62 FC | 	wrlong	arg01, fp
070fc     4A 00 00 FF 
07100     88 E4 05 F1 | 	add	objptr, ##38024
07104     F2 26 02 FB | 	rdlong	local01, objptr
07108     0C 4E 05 F1 | 	add	fp, #12
0710c     A7 26 62 FC | 	wrlong	local01, fp
07110     10 4E 85 F1 | 	sub	fp, #16
07114                 | ' 
07114                 | ' searchptr=programstart
07114                 | ' do
07114     3E 00 00 FF 
07118     BC E5 85 F1 | 	sub	objptr, ##32188
0711c                 | LR__0600
0711c     14 4E 05 F1 | 	add	fp, #20
07120     A7 12 02 F6 | 	mov	arg01, fp
07124     04 4E 85 F1 | 	sub	fp, #4
07128     A7 14 02 FB | 	rdlong	arg02, fp
0712c     10 4E 85 F1 | 	sub	fp, #16
07130     18 16 06 F6 | 	mov	arg03, #24
07134     90 F0 B1 FD | 	call	#_psram_spin2_read1
07138     10 4E 05 F1 | 	add	fp, #16
0713c     A7 26 02 FB | 	rdlong	local01, fp
07140     08 4E 85 F1 | 	sub	fp, #8
07144     A7 26 62 FC | 	wrlong	local01, fp
07148     20 4E 05 F1 | 	add	fp, #32
0714c     A7 26 02 FB | 	rdlong	local01, fp
07150     18 4E 85 F1 | 	sub	fp, #24
07154     A7 26 62 FC | 	wrlong	local01, fp
07158     04 4E 05 F1 | 	add	fp, #4
0715c     A7 26 02 FB | 	rdlong	local01, fp
07160     10 4E 85 F1 | 	sub	fp, #16
07164     A7 16 02 FB | 	rdlong	arg03, fp
07168     04 4E 85 F1 | 	sub	fp, #4
0716c     0B 27 12 F2 | 	cmp	local01, arg03 wc
07170     28 4E 05 C1 |  if_b	add	fp, #40
07174     A7 28 02 CB |  if_b	rdlong	local02, fp
07178     28 4E 85 C1 |  if_b	sub	fp, #40
0717c     FF FF 3F CF 
07180     FF 29 0E C2 |  if_b	cmp	local02, ##2147483647 wz
07184     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0600
07188     0B 00 00 FF 
0718c     CC E4 85 F1 | 	sub	objptr, ##5836
07190                 | ' if header(0)<>aline then return -1						' if not =, then there is no line, return
07190     14 4E 05 F1 | 	add	fp, #20
07194     A7 26 02 FB | 	rdlong	local01, fp
07198     10 4E 85 F1 | 	sub	fp, #16
0719c     A7 28 02 FB | 	rdlong	local02, fp
071a0     04 4E 85 F1 | 	sub	fp, #4
071a4     14 27 0A F2 | 	cmp	local01, local02 wz
071a8     01 FA 65 56 |  if_ne	neg	result1, #1
071ac     34 02 90 5D |  if_ne	jmp	#LR__0605
071b0     08 4E 05 F1 | 	add	fp, #8
071b4     A7 12 02 FB | 	rdlong	arg01, fp
071b8     08 4E 85 F1 | 	sub	fp, #8
071bc     01 14 66 F6 | 	neg	arg02, #1
071c0     10 C4 B1 FD | 	call	#_pslpoke
071c4                 | ' pslpoke(lineptr2,$FFFF_FFFF) 							' flag the deleted line
071c4                 | ' 
071c4                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then  			' this is one and only line in the program
071c4     28 4E 05 F1 | 	add	fp, #40
071c8     A7 26 02 FB | 	rdlong	local01, fp
071cc     28 4E 85 F1 | 	sub	fp, #40
071d0     FF FF 3F FF 
071d4     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
071d8     24 4E 05 A1 |  if_e	add	fp, #36
071dc     A7 28 02 AB |  if_e	rdlong	local02, fp
071e0     24 4E 85 A1 |  if_e	sub	fp, #36
071e4     FF FF 7F AF 
071e8     FF 29 0E A2 |  if_e	cmp	local02, ##-1 wz
071ec     88 00 90 5D |  if_ne	jmp	#LR__0601
071f0     4A 00 00 FF 
071f4     88 E4 05 F1 | 	add	objptr, ##38024
071f8     00 04 80 FF 
071fc     F2 00 68 FC | 	wrlong	##524288, objptr
07200     07 00 00 FF 
07204     2C E4 85 F1 | 	sub	objptr, ##3628
07208     00 04 80 FF 
0720c     F2 00 68 FC | 	wrlong	##524288, objptr
07210     07 00 00 FF 
07214     30 E4 05 F1 | 	add	objptr, ##3632
07218     F2 00 68 FC | 	wrlong	#0, objptr
0721c     04 E4 05 F1 | 	add	objptr, #4
07220     FF FF FF FF 
07224     F2 FE 6B FC | 	wrlong	##-1, objptr
07228     4A 00 00 FF 
0722c     90 E4 85 F1 | 	sub	objptr, ##38032
07230     00 12 06 F6 | 	mov	arg01, #0
07234     01 14 66 F6 | 	neg	arg02, #1
07238     98 C3 B1 FD | 	call	#_pslpoke
0723c     10 12 06 F6 | 	mov	arg01, #16
07240     01 14 66 F6 | 	neg	arg02, #1
07244     8C C3 B1 FD | 	call	#_pslpoke
07248     14 12 06 F6 | 	mov	arg01, #20
0724c     1E 14 CE F9 | 	bmask	arg02, #30
07250     80 C3 B1 FD | 	call	#_pslpoke
07254     50 00 00 FF 
07258     B8 E4 05 F1 | 	add	objptr, ##41144
0725c     00 04 80 FF 
07260     F2 00 68 FC | 	wrlong	##524288, objptr
07264     04 E4 05 F1 | 	add	objptr, #4
07268     00 04 80 FF 
0726c     F2 00 68 FC | 	wrlong	##524288, objptr
07270     50 00 00 FF 
07274     BC E4 85 F1 | 	sub	objptr, ##41148
07278                 | LR__0601
07278                 | ' 
07278                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' this is the last, and not first, line of the program
07278     28 4E 05 F1 | 	add	fp, #40
0727c     A7 26 02 FB | 	rdlong	local01, fp
07280     28 4E 85 F1 | 	sub	fp, #40
07284     FF FF 3F FF 
07288     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
0728c     74 00 90 5D |  if_ne	jmp	#LR__0602
07290     24 4E 05 F1 | 	add	fp, #36
07294     A7 28 02 FB | 	rdlong	local02, fp
07298     24 4E 85 F1 | 	sub	fp, #36
0729c     FF FF 7F FF 
072a0     FF 29 0E F2 | 	cmp	local02, ##-1 wz
072a4     5C 00 90 AD |  if_e	jmp	#LR__0602
072a8     24 4E 05 F1 | 	add	fp, #36
072ac     A7 12 02 FB | 	rdlong	arg01, fp
072b0     24 4E 85 F1 | 	sub	fp, #36
072b4     14 12 06 F1 | 	add	arg01, #20
072b8     1E 14 CE F9 | 	bmask	arg02, #30
072bc     14 C3 B1 FD | 	call	#_pslpoke
072c0     24 4E 05 F1 | 	add	fp, #36
072c4     A7 26 02 FB | 	rdlong	local01, fp
072c8     4A 00 00 FF 
072cc     90 E4 05 F1 | 	add	objptr, ##38032
072d0     F2 26 62 FC | 	wrlong	local01, objptr
072d4     4A 00 00 FF 
072d8     90 E4 85 F1 | 	sub	objptr, ##38032
072dc     A7 12 02 FB | 	rdlong	arg01, fp
072e0     24 4E 85 F1 | 	sub	fp, #36
072e4     1C C4 B1 FD | 	call	#_pslpeek
072e8     4A 00 00 FF 
072ec     8C E4 05 F1 | 	add	objptr, ##38028
072f0     F2 FA 61 FC | 	wrlong	result1, objptr
072f4     4A 00 00 FF 
072f8     8C E4 85 F1 | 	sub	objptr, ##38028
072fc                 | '   pslpoke(header(4)+20,$7FFF_FFFF) 						' unlink the previous line
072fc                 | '   lastlineptr=header(4)           						' keep the last line pointer to avoid searching while sequentially adding a new line
072fc                 | '   lastline=pslpeek(header(4))
072fc                 | '   return 0
072fc     00 FA 05 F6 | 	mov	result1, #0
07300     E0 00 90 FD | 	jmp	#LR__0605
07304                 | LR__0602
07304                 | ' 
07304                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then 			' this is the first line, but not the last
07304     28 4E 05 F1 | 	add	fp, #40
07308     A7 26 02 FB | 	rdlong	local01, fp
0730c     28 4E 85 F1 | 	sub	fp, #40
07310     FF FF 3F FF 
07314     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
07318     58 00 90 AD |  if_e	jmp	#LR__0603
0731c     24 4E 05 F1 | 	add	fp, #36
07320     A7 28 02 FB | 	rdlong	local02, fp
07324     24 4E 85 F1 | 	sub	fp, #36
07328     FF FF 7F FF 
0732c     FF 29 0E F2 | 	cmp	local02, ##-1 wz
07330     40 00 90 5D |  if_ne	jmp	#LR__0603
07334     28 4E 05 F1 | 	add	fp, #40
07338     A7 12 02 FB | 	rdlong	arg01, fp
0733c     28 4E 85 F1 | 	sub	fp, #40
07340     10 12 06 F1 | 	add	arg01, #16
07344     01 14 66 F6 | 	neg	arg02, #1
07348     88 C2 B1 FD | 	call	#_pslpoke
0734c     28 4E 05 F1 | 	add	fp, #40
07350     A7 26 02 FB | 	rdlong	local01, fp
07354     28 4E 85 F1 | 	sub	fp, #40
07358     4A 00 00 FF 
0735c     88 E4 05 F1 | 	add	objptr, ##38024
07360     F2 26 62 FC | 	wrlong	local01, objptr
07364     4A 00 00 FF 
07368     88 E4 85 F1 | 	sub	objptr, ##38024
0736c                 | ' '   print "deleted first line"
0736c                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
0736c                 | '   programstart=header(5) 							' adjust the program start to point on the first new line
0736c                 | '   return 0
0736c     00 FA 05 F6 | 	mov	result1, #0
07370     70 00 90 FD | 	jmp	#LR__0605
07374                 | LR__0603
07374                 | ' 
07374                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' the line is not first and not last
07374     28 4E 05 F1 | 	add	fp, #40
07378     A7 26 02 FB | 	rdlong	local01, fp
0737c     28 4E 85 F1 | 	sub	fp, #40
07380     FF FF 3F FF 
07384     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
07388     24 4E 05 51 |  if_ne	add	fp, #36
0738c     A7 28 02 5B |  if_ne	rdlong	local02, fp
07390     24 4E 85 51 |  if_ne	sub	fp, #36
07394     FF FF 7F 5F 
07398     FF 29 0E 52 |  if_ne	cmp	local02, ##-1 wz
0739c     40 00 90 AD |  if_e	jmp	#LR__0604
073a0     28 4E 05 F1 | 	add	fp, #40
073a4     A7 12 02 FB | 	rdlong	arg01, fp
073a8     10 12 06 F1 | 	add	arg01, #16
073ac     04 4E 85 F1 | 	sub	fp, #4
073b0     A7 14 02 FB | 	rdlong	arg02, fp
073b4     24 4E 85 F1 | 	sub	fp, #36
073b8     18 C2 B1 FD | 	call	#_pslpoke
073bc     24 4E 05 F1 | 	add	fp, #36
073c0     A7 12 02 FB | 	rdlong	arg01, fp
073c4     14 12 06 F1 | 	add	arg01, #20
073c8     04 4E 05 F1 | 	add	fp, #4
073cc     A7 14 02 FB | 	rdlong	arg02, fp
073d0     28 4E 85 F1 | 	sub	fp, #40
073d4     FC C1 B1 FD | 	call	#_pslpoke
073d8                 | '    pslpoke(header(5)+16,header(4))  
073d8                 | '    pslpoke(header(4)+20, header(5))
073d8                 | '    return 0
073d8     00 FA 05 F6 | 	mov	result1, #0
073dc     04 00 90 FD | 	jmp	#LR__0605
073e0                 | LR__0604
073e0     00 FA 05 F6 | 	mov	result1, #0
073e4                 | LR__0605
073e4     A7 F0 03 F6 | 	mov	ptra, fp
073e8     B2 00 A0 FD | 	call	#popregs_
073ec                 | _deleteline_ret
073ec     2D 00 64 FD | 	ret
073f0                 | 
073f0                 | ' 
073f0                 | ' '----- Save a line to the PSRAM. Called from insertline and add_line_at_end
073f0                 | ' 
073f0                 | ' sub save_line
073f0                 | _save_line
073f0     03 4A 05 F6 | 	mov	COUNT_, #3
073f4     A8 00 A0 FD | 	call	#pushregs_
073f8     4A 00 00 FF 
073fc     7C E4 05 F1 | 	add	objptr, ##38012
07400     F2 16 02 FB | 	rdlong	arg03, objptr
07404     01 16 06 F1 | 	add	arg03, #1
07408     05 00 00 FF 
0740c     18 E4 85 F1 | 	sub	objptr, ##2584
07410     F2 14 02 FB | 	rdlong	arg02, objptr
07414     0B 15 02 FD | 	qmul	arg02, arg03
07418     0E 00 00 FF 
0741c     44 E4 85 F1 | 	sub	objptr, ##7236
07420     F2 12 02 FB | 	rdlong	arg01, objptr
07424     37 00 00 FF 
07428     20 E4 85 F1 | 	sub	objptr, ##28192
0742c     09 27 02 F6 | 	mov	local01, arg01
07430     18 28 62 FD | 	getqx	local02
07434     97 06 48 FB | 	callpa	#(@LR__0611-@LR__0610)>>2,fcache_load_ptr_
07438                 | LR__0610
07438     13 FB C9 FA | 	rdbyte	result1, local01 wz
0743c     01 26 06 51 |  if_ne	add	local01, #1
07440     F4 FF 9F 5D |  if_ne	jmp	#LR__0610
07444                 | LR__0611
07444     09 27 82 F1 | 	sub	local01, arg01
07448     03 26 CE F7 | 	test	local01, #3 wz
0744c     02 26 46 50 |  if_ne	shr	local01, #2
07450     01 26 06 51 |  if_ne	add	local01, #1
07454     02 26 66 50 |  if_ne	shl	local01, #2
07458     14 2B 02 F6 | 	mov	local03, local02
0745c     13 2B 02 F1 | 	add	local03, local01
07460     43 00 00 FF 
07464     5C E4 05 F1 | 	add	objptr, ##34396
07468     F2 16 02 FB | 	rdlong	arg03, objptr
0746c     14 17 02 F1 | 	add	arg03, local02
07470     04 00 00 FF 
07474     28 E4 05 F1 | 	add	objptr, ##2088
07478     F2 16 62 FC | 	wrlong	arg03, objptr
0747c     04 E4 05 F1 | 	add	objptr, #4
07480     F2 26 62 FC | 	wrlong	local01, objptr
07484     0C E4 85 F1 | 	sub	objptr, #12
07488     F2 12 02 F6 | 	mov	arg01, objptr
0748c     04 00 00 FF 
07490     20 E4 85 F1 | 	sub	objptr, ##2080
07494     F2 14 02 FB | 	rdlong	arg02, objptr
07498     14 17 02 F6 | 	mov	arg03, local02
0749c     37 00 00 FF 
074a0     90 E5 85 F1 | 	sub	objptr, ##28560
074a4     BC ED B1 FD | 	call	#_psram_spin2_write
074a8     2B 00 00 FF 
074ac     54 E5 05 F1 | 	add	objptr, ##22356
074b0     F2 12 02 FB | 	rdlong	arg01, objptr
074b4     0C 00 00 FF 
074b8     3C E4 05 F1 | 	add	objptr, ##6204
074bc     F2 14 02 FB | 	rdlong	arg02, objptr
074c0     14 15 02 F1 | 	add	arg02, local02
074c4     13 17 02 F6 | 	mov	arg03, local01
074c8     37 00 00 FF 
074cc     90 E5 85 F1 | 	sub	objptr, ##28560
074d0     90 ED B1 FD | 	call	#_psram_spin2_write
074d4     37 00 00 FF 
074d8     90 E5 05 F1 | 	add	objptr, ##28560
074dc     F2 26 02 FB | 	rdlong	local01, objptr
074e0     15 27 02 F1 | 	add	local01, local03
074e4     F2 26 62 FC | 	wrlong	local01, objptr
074e8     43 00 00 FF 
074ec     5C E4 85 F1 | 	sub	objptr, ##34396
074f0     A7 F0 03 F6 | 	mov	ptra, fp
074f4     B2 00 A0 FD | 	call	#popregs_
074f8                 | _save_line_ret
074f8     2D 00 64 FD | 	ret
074fc                 | 
074fc                 | ' 
074fc                 | ' '----- Insert a new line into the middle of the program
074fc                 | ' 
074fc                 | ' function insertline(aline as ulong) as integer
074fc                 | _insertline
074fc     02 4A 05 F6 | 	mov	COUNT_, #2
07500     A8 00 A0 FD | 	call	#pushregs_
07504     28 F0 07 F1 | 	add	ptra, #40
07508     04 4E 05 F1 | 	add	fp, #4
0750c     A7 12 62 FC | 	wrlong	arg01, fp
07510     4A 00 00 FF 
07514     88 E4 05 F1 | 	add	objptr, ##38024
07518     F2 26 02 FB | 	rdlong	local01, objptr
0751c     04 4E 05 F1 | 	add	fp, #4
07520     A7 26 62 FC | 	wrlong	local01, fp
07524     08 4E 85 F1 | 	sub	fp, #8
07528                 | ' 
07528                 | ' do
07528     3E 00 00 FF 
0752c     BC E5 85 F1 | 	sub	objptr, ##32188
07530                 | LR__0620
07530     10 4E 05 F1 | 	add	fp, #16
07534     A7 12 02 F6 | 	mov	arg01, fp
07538     08 4E 85 F1 | 	sub	fp, #8
0753c     A7 14 02 FB | 	rdlong	arg02, fp
07540     08 4E 85 F1 | 	sub	fp, #8
07544     18 16 06 F6 | 	mov	arg03, #24
07548     7C EC B1 FD | 	call	#_psram_spin2_read1
0754c     08 4E 05 F1 | 	add	fp, #8
07550     A7 26 02 FB | 	rdlong	local01, fp
07554     04 4E 05 F1 | 	add	fp, #4
07558     A7 26 62 FC | 	wrlong	local01, fp
0755c     18 4E 05 F1 | 	add	fp, #24
07560     A7 26 02 FB | 	rdlong	local01, fp
07564     1C 4E 85 F1 | 	sub	fp, #28
07568     A7 26 62 FC | 	wrlong	local01, fp
0756c     08 4E 05 F1 | 	add	fp, #8
07570     A7 26 02 FB | 	rdlong	local01, fp
07574     0C 4E 85 F1 | 	sub	fp, #12
07578     A7 16 02 FB | 	rdlong	arg03, fp
0757c     04 4E 85 F1 | 	sub	fp, #4
07580     0B 27 12 F2 | 	cmp	local01, arg03 wc
07584     24 4E 05 C1 |  if_b	add	fp, #36
07588     A7 28 02 CB |  if_b	rdlong	local02, fp
0758c     24 4E 85 C1 |  if_b	sub	fp, #36
07590     FF FF 3F CF 
07594     FF 29 0E C2 |  if_b	cmp	local02, ##2147483647 wz
07598     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0620
0759c     0B 00 00 FF 
075a0     CC E4 85 F1 | 	sub	objptr, ##5836
075a4                 | ' 
075a4                 | ' if header(0)=aline then return -1 				' delete it first
075a4     10 4E 05 F1 | 	add	fp, #16
075a8     A7 26 02 FB | 	rdlong	local01, fp
075ac     0C 4E 85 F1 | 	sub	fp, #12
075b0     A7 28 02 FB | 	rdlong	local02, fp
075b4     04 4E 85 F1 | 	sub	fp, #4
075b8     14 27 0A F2 | 	cmp	local01, local02 wz
075bc     01 FA 65 A6 |  if_e	neg	result1, #1
075c0     48 01 90 AD |  if_e	jmp	#LR__0623
075c4                 | ' if header(0)<aline then return -2 				' end of program reached
075c4     10 4E 05 F1 | 	add	fp, #16
075c8     A7 26 02 FB | 	rdlong	local01, fp
075cc     0C 4E 85 F1 | 	sub	fp, #12
075d0     A7 16 02 FB | 	rdlong	arg03, fp
075d4     04 4E 85 F1 | 	sub	fp, #4
075d8     0B 27 12 F2 | 	cmp	local01, arg03 wc
075dc     02 FA 65 C6 |  if_b	neg	result1, #2
075e0     28 01 90 CD |  if_b	jmp	#LR__0623
075e4                 | ' 
075e4                 | ' if  header(4)=$FFFF_FFFF then 					' this is the first line in the program so the inserted line will be new first
075e4     20 4E 05 F1 | 	add	fp, #32
075e8     A7 26 02 FB | 	rdlong	local01, fp
075ec     20 4E 85 F1 | 	sub	fp, #32
075f0     FF FF 7F FF 
075f4     FF 27 0E F2 | 	cmp	local01, ##-1 wz
075f8     78 00 90 5D |  if_ne	jmp	#LR__0621
075fc     43 00 00 FF 
07600     5C E4 05 F1 | 	add	objptr, ##34396
07604     F2 26 02 FB | 	rdlong	local01, objptr
07608     07 00 00 FF 
0760c     2C E4 05 F1 | 	add	objptr, ##3628
07610     F2 26 62 FC | 	wrlong	local01, objptr
07614     0C 4E 05 F1 | 	add	fp, #12
07618     A7 12 02 FB | 	rdlong	arg01, fp
0761c     0C 4E 85 F1 | 	sub	fp, #12
07620     10 12 06 F1 | 	add	arg01, #16
07624     07 00 00 FF 
07628     2C E4 85 F1 | 	sub	objptr, ##3628
0762c     F2 14 02 FB | 	rdlong	arg02, objptr
07630     43 00 00 FF 
07634     5C E4 85 F1 | 	sub	objptr, ##34396
07638     98 BF B1 FD | 	call	#_pslpoke
0763c     47 00 00 FF 
07640     8C E4 05 F1 | 	add	objptr, ##36492
07644     FF FF FF FF 
07648     F2 FE 6B FC | 	wrlong	##-1, objptr
0764c     0C 4E 05 F1 | 	add	fp, #12
07650     A7 26 02 FB | 	rdlong	local01, fp
07654     0C 4E 85 F1 | 	sub	fp, #12
07658     04 E4 05 F1 | 	add	objptr, #4
0765c     F2 26 62 FC | 	wrlong	local01, objptr
07660     47 00 00 FF 
07664     90 E4 85 F1 | 	sub	objptr, ##36496
07668     84 FD BF FD | 	call	#_save_line
0766c                 | '   programstart=programptr
0766c                 | '   pslpoke(lineptr2+16,programptr)
0766c                 | '   ucompiledline(4)=$FFFF_FFFF
0766c                 | '   ucompiledline(5)=lineptr2
0766c                 | '   save_line
0766c                 | '   return 0
0766c     00 FA 05 F6 | 	mov	result1, #0
07670     98 00 90 FD | 	jmp	#LR__0623
07674                 | LR__0621
07674                 | ' 
07674                 | ' if header(4)<>$FFFF_FFFF then 					' this is not first line of the program. It doesn't matter if it is last as we will insert a new line before
07674     20 4E 05 F1 | 	add	fp, #32
07678     A7 26 02 FB | 	rdlong	local01, fp
0767c     20 4E 85 F1 | 	sub	fp, #32
07680     FF FF 7F FF 
07684     FF 27 0E F2 | 	cmp	local01, ##-1 wz
07688     7C 00 90 AD |  if_e	jmp	#LR__0622
0768c     20 4E 05 F1 | 	add	fp, #32
07690     A7 26 02 FB | 	rdlong	local01, fp
07694     47 00 00 FF 
07698     8C E4 05 F1 | 	add	objptr, ##36492
0769c     F2 26 62 FC | 	wrlong	local01, objptr
076a0     14 4E 85 F1 | 	sub	fp, #20
076a4     A7 26 02 FB | 	rdlong	local01, fp
076a8     04 E4 05 F1 | 	add	objptr, #4
076ac     F2 26 62 FC | 	wrlong	local01, objptr
076b0     A7 12 02 FB | 	rdlong	arg01, fp
076b4     0C 4E 85 F1 | 	sub	fp, #12
076b8     10 12 06 F1 | 	add	arg01, #16
076bc     04 00 00 FF 
076c0     34 E4 85 F1 | 	sub	objptr, ##2100
076c4     F2 14 02 FB | 	rdlong	arg02, objptr
076c8     43 00 00 FF 
076cc     5C E4 85 F1 | 	sub	objptr, ##34396
076d0     00 BF B1 FD | 	call	#_pslpoke
076d4     20 4E 05 F1 | 	add	fp, #32
076d8     A7 12 02 FB | 	rdlong	arg01, fp
076dc     20 4E 85 F1 | 	sub	fp, #32
076e0     14 12 06 F1 | 	add	arg01, #20
076e4     43 00 00 FF 
076e8     5C E4 05 F1 | 	add	objptr, ##34396
076ec     F2 14 02 FB | 	rdlong	arg02, objptr
076f0     43 00 00 FF 
076f4     5C E4 85 F1 | 	sub	objptr, ##34396
076f8     D8 BE B1 FD | 	call	#_pslpoke
076fc     F0 FC BF FD | 	call	#_save_line
07700                 | '   ucompiledline(4)=header(4)
07700                 | '   ucompiledline(5)=lineptr2
07700                 | '   pslpoke(lineptr2+16,programptr)
07700                 | '   pslpoke(header(4)+20,programptr)
07700                 | '   save_line
07700                 | '   return 0
07700     00 FA 05 F6 | 	mov	result1, #0
07704     04 00 90 FD | 	jmp	#LR__0623
07708                 | LR__0622
07708     00 FA 05 F6 | 	mov	result1, #0
0770c                 | LR__0623
0770c     A7 F0 03 F6 | 	mov	ptra, fp
07710     B2 00 A0 FD | 	call	#popregs_
07714                 | _insertline_ret
07714     2D 00 64 FD | 	ret
07718                 | 
07718                 | ' 
07718                 | ' '----- Adds a new line at the end of the program
07718                 | ' 
07718                 | ' sub add_line_at_end(aline) 
07718                 | _add_line_at_end
07718     4A 00 00 FF 
0771c     8C E4 05 F1 | 	add	objptr, ##38028
07720     F2 12 62 FC | 	wrlong	arg01, objptr
07724     04 E4 05 F1 | 	add	objptr, #4
07728     F2 14 02 FB | 	rdlong	arg02, objptr
0772c     03 00 00 FF 
07730     04 E4 85 F1 | 	sub	objptr, ##1540
07734     F2 14 62 FC | 	wrlong	arg02, objptr
07738     03 00 00 FF 
0773c     04 E4 05 F1 | 	add	objptr, ##1540
07740     F2 12 02 FB | 	rdlong	arg01, objptr
07744     14 12 06 F1 | 	add	arg01, #20
07748     07 00 00 FF 
0774c     34 E4 85 F1 | 	sub	objptr, ##3636
07750     F2 14 02 FB | 	rdlong	arg02, objptr
07754     43 00 00 FF 
07758     5C E4 85 F1 | 	sub	objptr, ##34396
0775c     74 BE B1 FD | 	call	#_pslpoke
07760     43 00 00 FF 
07764     5C E4 05 F1 | 	add	objptr, ##34396
07768     F2 14 02 FB | 	rdlong	arg02, objptr
0776c     07 00 00 FF 
07770     34 E4 05 F1 | 	add	objptr, ##3636
07774     F2 14 62 FC | 	wrlong	arg02, objptr
07778     03 00 00 FF 
0777c     00 E4 85 F1 | 	sub	objptr, ##1536
07780     FF FF BF FF 
07784     F2 FE 6B FC | 	wrlong	##2147483647, objptr
07788                 | ' 
07788                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
07788                 | ' if programptr=memlo then ucompiledline(4)=$FFFFFFFF ' that is the first line
07788     04 00 00 FF 
0778c     34 E4 85 F1 | 	sub	objptr, ##2100
07790     F2 14 02 FB | 	rdlong	arg02, objptr
07794     43 00 00 FF 
07798     5C E4 85 F1 | 	sub	objptr, ##34396
0779c     00 04 00 FF 
077a0     00 14 0E F2 | 	cmp	arg02, ##524288 wz
077a4     47 00 00 AF 
077a8     8C E4 05 A1 |  if_e	add	objptr, ##36492
077ac     FF FF FF AF 
077b0     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
077b4     47 00 00 AF 
077b8     8C E4 85 A1 |  if_e	sub	objptr, ##36492
077bc     30 FC BF FD | 	call	#_save_line
077c0     43 00 00 FF 
077c4     5C E4 05 F1 | 	add	objptr, ##34396
077c8     F2 12 02 FB | 	rdlong	arg01, objptr
077cc     43 00 00 FF 
077d0     5C E4 85 F1 | 	sub	objptr, ##34396
077d4     01 14 66 F6 | 	neg	arg02, #1
077d8     F8 BD B1 FD | 	call	#_pslpoke
077dc                 | _add_line_at_end_ret
077dc     2D 00 64 FD | 	ret
077e0                 | 
077e0                 | ' 
077e0                 | ' '--------------------------------------------------------------------------------------------------------------------------
077e0                 | ' '---------------------------------- End of line managing helper functions -------------------------------------------------
077e0                 | ' '--------------------------------------------------------------------------------------------------------------------------
077e0                 | ' 
077e0                 | ' '--------------------------------------------------------------------------------------------------------------------------
077e0                 | ' '--------------------------------------- Compilers ------------------------------------------------------------------------
077e0                 | ' '--------------------------------------------------------------------------------------------------------------------------
077e0                 | ' 
077e0                 | ' '--- Do a main compilation task for commands, called from compile(), returns an error code
077e0                 | ' 
077e0                 | ' function compile_immediate(linetype as ulong, aline as ulong) as integer
077e0                 | _compile_immediate
077e0     0A 4A 05 F6 | 	mov	COUNT_, #10
077e4     A8 00 A0 FD | 	call	#pushregs_
077e8                 | _compile_immediate_enter
077e8     09 2D 02 F6 | 	mov	local04, arg01
077ec     0A 2F 02 F6 | 	mov	local05, arg02
077f0     00 30 06 F6 | 	mov	local06, #0
077f4     00 32 06 F6 | 	mov	local07, #0
077f8     00 34 06 F6 | 	mov	local08, #0
077fc                 | ' 
077fc                 | ' ' linetype=cont+1
077fc                 | ' ' 1 : this is the first part of the line that will continue
077fc                 | ' ' 2 - this is the continuation of the line
077fc                 | ' ' 3 - this is the last continued line
077fc                 | ' ' 4 - this is the one and only part
077fc                 | ' ' 5 - continued after if/else
077fc                 | ' 
077fc                 | ' err=0
077fc                 | ' cmd=0
077fc                 | ' vars=0
077fc                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 
077fc     02 2C 0E F2 | 	cmp	local04, #2 wz
07800     03 2C 0E 52 |  if_ne	cmp	local04, #3 wz
07804     24 00 90 5D |  if_ne	jmp	#LR__0630
07808     35 00 00 FF 
0780c     10 E4 05 F1 | 	add	objptr, ##27152
07810     F2 32 02 FB | 	rdlong	local07, objptr
07814     01 36 06 F6 | 	mov	local09, #1
07818     02 00 00 FF 
0781c     34 E4 05 F1 | 	add	objptr, ##1076
07820     F2 02 68 FC | 	wrlong	#1, objptr
07824     37 00 00 FF 
07828     44 E4 85 F1 | 	sub	objptr, ##28228
0782c                 | LR__0630
0782c                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
0782c     04 2C 0E F2 | 	cmp	local04, #4 wz
07830     01 2C 0E 52 |  if_ne	cmp	local04, #1 wz
07834     30 00 90 5D |  if_ne	jmp	#LR__0631
07838     35 00 00 FF 
0783c     18 E4 05 F1 | 	add	objptr, ##27160
07840     F2 32 02 FB | 	rdlong	local07, objptr
07844     02 36 06 F6 | 	mov	local09, #2
07848     02 00 00 FF 
0784c     2C E4 05 F1 | 	add	objptr, ##1068
07850     F2 04 68 FC | 	wrlong	#2, objptr
07854     13 00 00 FF 
07858     38 E4 05 F1 | 	add	objptr, ##9784
0785c     F2 04 68 FC | 	wrlong	#2, objptr
07860     4A 00 00 FF 
07864     7C E4 85 F1 | 	sub	objptr, ##38012
07868                 | LR__0631
07868                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 
07868     05 2C 0E F2 | 	cmp	local04, #5 wz
0786c     40 00 90 5D |  if_ne	jmp	#LR__0632
07870     37 00 00 FF 
07874     44 E4 05 F1 | 	add	objptr, ##28228
07878     F2 FC 01 FB | 	rdlong	result2, objptr
0787c     FE 36 02 F6 | 	mov	local09, result2
07880     03 36 66 F0 | 	shl	local09, #3
07884     02 00 00 FF 
07888     38 E4 85 F1 | 	sub	objptr, ##1080
0788c     F2 36 02 F1 | 	add	local09, objptr
07890     04 36 06 F1 | 	add	local09, #4
07894     1B 33 02 FB | 	rdlong	local07, local09
07898     01 FC 05 F1 | 	add	result2, #1
0789c     02 00 00 FF 
078a0     38 E4 05 F1 | 	add	objptr, ##1080
078a4     F2 FC 61 FC | 	wrlong	result2, objptr
078a8     37 00 00 FF 
078ac     44 E4 85 F1 | 	sub	objptr, ##28228
078b0                 | LR__0632
078b0                 | ' 
078b0                 | ' 'print  "In compile_immediate cmd=:", cmd
078b0                 | ' 451 select case cmd
078b0     5C 32 0E F2 | 	cmp	local07, #92 wz
078b4     D4 02 90 AD |  if_e	jmp	#LR__0633
078b8     B9 32 0E F2 | 	cmp	local07, #185 wz
078bc     D8 02 90 AD |  if_e	jmp	#LR__0634
078c0     47 32 0E F2 | 	cmp	local07, #71 wz
078c4     E0 02 90 AD |  if_e	jmp	#LR__0635
078c8     59 32 0E F2 | 	cmp	local07, #89 wz
078cc     E8 02 90 AD |  if_e	jmp	#LR__0636
078d0     C3 32 0E F2 | 	cmp	local07, #195 wz
078d4     F0 02 90 AD |  if_e	jmp	#LR__0637
078d8     45 32 0E F2 | 	cmp	local07, #69 wz
078dc     F4 02 90 AD |  if_e	jmp	#LR__0638
078e0     69 32 0E F2 | 	cmp	local07, #105 wz
078e4     FC 02 90 AD |  if_e	jmp	#LR__0639
078e8     40 32 0E F2 | 	cmp	local07, #64 wz
078ec     EC 06 90 AD |  if_e	jmp	#LR__0714
078f0     B4 32 0E F2 | 	cmp	local07, #180 wz
078f4     F8 02 90 AD |  if_e	jmp	#LR__0640
078f8     49 32 0E F2 | 	cmp	local07, #73 wz
078fc     FC 02 90 AD |  if_e	jmp	#LR__0641
07900     C4 32 0E F2 | 	cmp	local07, #196 wz
07904     00 03 90 AD |  if_e	jmp	#LR__0642
07908     AE 32 0E F2 | 	cmp	local07, #174 wz
0790c     04 03 90 AD |  if_e	jmp	#LR__0643
07910     B0 32 0E F2 | 	cmp	local07, #176 wz
07914     08 03 90 AD |  if_e	jmp	#LR__0644
07918     AF 32 0E F2 | 	cmp	local07, #175 wz
0791c     0C 03 90 AD |  if_e	jmp	#LR__0645
07920     B1 32 0E F2 | 	cmp	local07, #177 wz
07924     10 03 90 AD |  if_e	jmp	#LR__0646
07928     CF 32 0E F2 | 	cmp	local07, #207 wz
0792c     14 03 90 AD |  if_e	jmp	#LR__0647
07930     68 32 0E F2 | 	cmp	local07, #104 wz
07934     18 03 90 AD |  if_e	jmp	#LR__0648
07938     B7 32 0E F2 | 	cmp	local07, #183 wz
0793c     9C 06 90 AD |  if_e	jmp	#LR__0714
07940     74 32 0E F2 | 	cmp	local07, #116 wz
07944     14 03 90 AD |  if_e	jmp	#LR__0649
07948     73 32 0E F2 | 	cmp	local07, #115 wz
0794c     1C 03 90 AD |  if_e	jmp	#LR__0650
07950     6C 32 0E F2 | 	cmp	local07, #108 wz
07954     24 03 90 AD |  if_e	jmp	#LR__0651
07958     89 32 0E F2 | 	cmp	local07, #137 wz
0795c     7C 06 90 AD |  if_e	jmp	#LR__0714
07960     C2 32 0E F2 | 	cmp	local07, #194 wz
07964     24 03 90 AD |  if_e	jmp	#LR__0652
07968     72 32 0E F2 | 	cmp	local07, #114 wz
0796c     28 03 90 AD |  if_e	jmp	#LR__0653
07970     5D 32 0E F2 | 	cmp	local07, #93 wz
07974     2C 03 90 AD |  if_e	jmp	#LR__0654
07978     96 32 0E F2 | 	cmp	local07, #150 wz
0797c     34 03 90 AD |  if_e	jmp	#LR__0655
07980     43 32 0E F2 | 	cmp	local07, #67 wz
07984     38 03 90 AD |  if_e	jmp	#LR__0656
07988     5A 32 0E F2 | 	cmp	local07, #90 wz
0798c     40 03 90 AD |  if_e	jmp	#LR__0657
07990     AB 32 0E F2 | 	cmp	local07, #171 wz
07994     44 06 90 AD |  if_e	jmp	#LR__0714
07998     BD 32 0E F2 | 	cmp	local07, #189 wz
0799c     40 03 90 AD |  if_e	jmp	#LR__0658
079a0     BB 32 0E F2 | 	cmp	local07, #187 wz
079a4     48 03 90 AD |  if_e	jmp	#LR__0659
079a8     4E 32 0E F2 | 	cmp	local07, #78 wz
079ac     50 03 90 AD |  if_e	jmp	#LR__0660
079b0     A9 32 0E F2 | 	cmp	local07, #169 wz
079b4     68 03 90 AD |  if_e	jmp	#LR__0662
079b8     46 32 0E F2 | 	cmp	local07, #70 wz
079bc     80 03 90 AD |  if_e	jmp	#LR__0664
079c0     71 32 0E F2 | 	cmp	local07, #113 wz
079c4     88 03 90 AD |  if_e	jmp	#LR__0665
079c8     60 32 0E F2 | 	cmp	local07, #96 wz
079cc     8C 03 90 AD |  if_e	jmp	#LR__0666
079d0     4A 32 0E F2 | 	cmp	local07, #74 wz
079d4     90 03 90 AD |  if_e	jmp	#LR__0667
079d8     48 32 0E F2 | 	cmp	local07, #72 wz
079dc     94 03 90 AD |  if_e	jmp	#LR__0668
079e0     58 32 0E F2 | 	cmp	local07, #88 wz
079e4     9C 03 90 AD |  if_e	jmp	#LR__0669
079e8     5F 32 0E F2 | 	cmp	local07, #95 wz
079ec     A4 03 90 AD |  if_e	jmp	#LR__0670
079f0     B5 32 0E F2 | 	cmp	local07, #181 wz
079f4     A8 03 90 AD |  if_e	jmp	#LR__0671
079f8     8A 32 0E F2 | 	cmp	local07, #138 wz
079fc     B0 03 90 AD |  if_e	jmp	#LR__0672
07a00     4C 32 0E F2 | 	cmp	local07, #76 wz
07a04     B4 03 90 AD |  if_e	jmp	#LR__0673
07a08     52 32 0E F2 | 	cmp	local07, #82 wz
07a0c     BC 03 90 AD |  if_e	jmp	#LR__0674
07a10     97 32 0E F2 | 	cmp	local07, #151 wz
07a14     C4 03 90 AD |  if_e	jmp	#LR__0675
07a18     C6 32 0E F2 | 	cmp	local07, #198 wz
07a1c     C8 03 90 AD |  if_e	jmp	#LR__0676
07a20     61 32 0E F2 | 	cmp	local07, #97 wz
07a24     CC 03 90 AD |  if_e	jmp	#LR__0677
07a28     63 32 0E F2 | 	cmp	local07, #99 wz
07a2c     D0 03 90 AD |  if_e	jmp	#LR__0678
07a30     41 32 0E F2 | 	cmp	local07, #65 wz
07a34     A4 05 90 AD |  if_e	jmp	#LR__0714
07a38     4B 32 0E F2 | 	cmp	local07, #75 wz
07a3c     CC 03 90 AD |  if_e	jmp	#LR__0679
07a40     C1 32 0E F2 | 	cmp	local07, #193 wz
07a44     D0 03 90 AD |  if_e	jmp	#LR__0680
07a48     B3 32 0E F2 | 	cmp	local07, #179 wz
07a4c     D4 03 90 AD |  if_e	jmp	#LR__0681
07a50     5E 32 0E F2 | 	cmp	local07, #94 wz
07a54     D8 03 90 AD |  if_e	jmp	#LR__0682
07a58     7C 32 0E F2 | 	cmp	local07, #124 wz
07a5c     DC 03 90 AD |  if_e	jmp	#LR__0683
07a60     7D 32 0E F2 | 	cmp	local07, #125 wz
07a64     E0 03 90 AD |  if_e	jmp	#LR__0684
07a68     7E 32 0E F2 | 	cmp	local07, #126 wz
07a6c     E4 03 90 AD |  if_e	jmp	#LR__0685
07a70     7F 32 0E F2 | 	cmp	local07, #127 wz
07a74     E8 03 90 AD |  if_e	jmp	#LR__0686
07a78     80 32 0E F2 | 	cmp	local07, #128 wz
07a7c     EC 03 90 AD |  if_e	jmp	#LR__0687
07a80     55 32 0E F2 | 	cmp	local07, #85 wz
07a84     F0 03 90 AD |  if_e	jmp	#LR__0688
07a88     75 32 0E F2 | 	cmp	local07, #117 wz
07a8c     F4 03 90 AD |  if_e	jmp	#LR__0689
07a90     42 32 0E F2 | 	cmp	local07, #66 wz
07a94     FC 03 90 AD |  if_e	jmp	#LR__0690
07a98     95 32 0E F2 | 	cmp	local07, #149 wz
07a9c     04 04 90 AD |  if_e	jmp	#LR__0691
07aa0     AC 32 0E F2 | 	cmp	local07, #172 wz
07aa4     34 05 90 AD |  if_e	jmp	#LR__0714
07aa8     81 32 0E F2 | 	cmp	local07, #129 wz
07aac     00 04 90 AD |  if_e	jmp	#LR__0692
07ab0     44 32 0E F2 | 	cmp	local07, #68 wz
07ab4     04 04 90 AD |  if_e	jmp	#LR__0693
07ab8     BC 32 0E F2 | 	cmp	local07, #188 wz
07abc     08 04 90 AD |  if_e	jmp	#LR__0694
07ac0     88 32 0E F2 | 	cmp	local07, #136 wz
07ac4     14 05 90 AD |  if_e	jmp	#LR__0714
07ac8     B6 32 0E F2 | 	cmp	local07, #182 wz
07acc     08 04 90 AD |  if_e	jmp	#LR__0695
07ad0     92 32 0E F2 | 	cmp	local07, #146 wz
07ad4     10 04 90 AD |  if_e	jmp	#LR__0696
07ad8     BE 32 0E F2 | 	cmp	local07, #190 wz
07adc     B8 05 90 AD |  if_e	jmp	#LR__0715
07ae0     C7 32 0E F2 | 	cmp	local07, #199 wz
07ae4     AA 32 0E 52 |  if_ne	cmp	local07, #170 wz
07ae8     F0 04 90 AD |  if_e	jmp	#LR__0714
07aec     4D 32 0E F2 | 	cmp	local07, #77 wz
07af0     00 04 90 AD |  if_e	jmp	#LR__0697
07af4     51 32 0E F2 | 	cmp	local07, #81 wz
07af8     08 04 90 AD |  if_e	jmp	#LR__0698
07afc     D2 32 0E F2 | 	cmp	local07, #210 wz
07b00     10 04 90 AD |  if_e	jmp	#LR__0699
07b04     8E 32 0E F2 | 	cmp	local07, #142 wz
07b08     18 04 90 AD |  if_e	jmp	#LR__0700
07b0c     90 32 0E F2 | 	cmp	local07, #144 wz
07b10     1C 04 90 AD |  if_e	jmp	#LR__0701
07b14     8D 32 0E F2 | 	cmp	local07, #141 wz
07b18     20 04 90 AD |  if_e	jmp	#LR__0702
07b1c     8C 32 0E F2 | 	cmp	local07, #140 wz
07b20     24 04 90 AD |  if_e	jmp	#LR__0703
07b24     91 32 0E F2 | 	cmp	local07, #145 wz
07b28     28 04 90 AD |  if_e	jmp	#LR__0704
07b2c     8B 32 0E F2 | 	cmp	local07, #139 wz
07b30     2C 04 90 AD |  if_e	jmp	#LR__0705
07b34     8F 32 0E F2 | 	cmp	local07, #143 wz
07b38     30 04 90 AD |  if_e	jmp	#LR__0706
07b3c     B2 32 0E F2 | 	cmp	local07, #178 wz
07b40     34 04 90 AD |  if_e	jmp	#LR__0707
07b44     6D 32 0E F2 | 	cmp	local07, #109 wz
07b48     3C 04 90 AD |  if_e	jmp	#LR__0708
07b4c     70 32 0E F2 | 	cmp	local07, #112 wz
07b50     88 04 90 AD |  if_e	jmp	#LR__0714
07b54     56 32 0E F2 | 	cmp	local07, #86 wz
07b58     38 04 90 AD |  if_e	jmp	#LR__0709
07b5c     57 32 0E F2 | 	cmp	local07, #87 wz
07b60     78 04 90 AD |  if_e	jmp	#LR__0714
07b64     79 32 0E F2 | 	cmp	local07, #121 wz
07b68     34 04 90 AD |  if_e	jmp	#LR__0710
07b6c     77 32 0E F2 | 	cmp	local07, #119 wz
07b70     38 04 90 AD |  if_e	jmp	#LR__0711
07b74     78 32 0E F2 | 	cmp	local07, #120 wz
07b78     3C 04 90 AD |  if_e	jmp	#LR__0712
07b7c     01 00 00 FF 
07b80     04 32 0E F2 | 	cmp	local07, ##516 wz
07b84     3C 04 90 AD |  if_e	jmp	#LR__0713
07b88     0C 05 90 FD | 	jmp	#LR__0715
07b8c                 | LR__0633
07b8c     58 0B B0 FD | 	call	#_compile_fun_2p
07b90     FD 30 02 F6 | 	mov	local06, result1
07b94     44 04 90 FD | 	jmp	#LR__0714
07b98                 | LR__0634
07b98     1C 0E B0 FD | 	call	#_compile_fun_varp
07b9c     FD 34 02 F6 | 	mov	local08, result1
07ba0     FE 30 02 F6 | 	mov	local06, result2
07ba4     34 04 90 FD | 	jmp	#LR__0714
07ba8                 | LR__0635
07ba8     0C 0E B0 FD | 	call	#_compile_fun_varp
07bac     FD 34 02 F6 | 	mov	local08, result1
07bb0     FE 30 02 F6 | 	mov	local06, result2
07bb4     24 04 90 FD | 	jmp	#LR__0714
07bb8                 | LR__0636
07bb8     FC 0D B0 FD | 	call	#_compile_fun_varp
07bbc     FD 34 02 F6 | 	mov	local08, result1
07bc0     FE 30 02 F6 | 	mov	local06, result2
07bc4     14 04 90 FD | 	jmp	#LR__0714
07bc8                 | LR__0637
07bc8                 | ' return expr()
07bc8     58 42 B0 FD | 	call	#_expr
07bcc     FD 30 02 F6 | 	mov	local06, result1
07bd0     08 04 90 FD | 	jmp	#LR__0714
07bd4                 | LR__0638
07bd4     E0 0D B0 FD | 	call	#_compile_fun_varp
07bd8     FD 34 02 F6 | 	mov	local08, result1
07bdc     FE 30 02 F6 | 	mov	local06, result2
07be0     F8 03 90 FD | 	jmp	#LR__0714
07be4                 | LR__0639
07be4                 | ' return expr()
07be4     3C 42 B0 FD | 	call	#_expr
07be8     FD 30 02 F6 | 	mov	local06, result1
07bec     EC 03 90 FD | 	jmp	#LR__0714
07bf0                 | LR__0640
07bf0                 | ' return expr()
07bf0     30 42 B0 FD | 	call	#_expr
07bf4     FD 30 02 F6 | 	mov	local06, result1
07bf8     E0 03 90 FD | 	jmp	#LR__0714
07bfc                 | LR__0641
07bfc                 | ' return expr()
07bfc     24 42 B0 FD | 	call	#_expr
07c00     FD 30 02 F6 | 	mov	local06, result1
07c04     D4 03 90 FD | 	jmp	#LR__0714
07c08                 | LR__0642
07c08     DC 0A B0 FD | 	call	#_compile_fun_2p
07c0c     FD 30 02 F6 | 	mov	local06, result1
07c10     C8 03 90 FD | 	jmp	#LR__0714
07c14                 | LR__0643
07c14     D0 0A B0 FD | 	call	#_compile_fun_2p
07c18     FD 30 02 F6 | 	mov	local06, result1
07c1c     BC 03 90 FD | 	jmp	#LR__0714
07c20                 | LR__0644
07c20     C4 0A B0 FD | 	call	#_compile_fun_2p
07c24     FD 30 02 F6 | 	mov	local06, result1
07c28     B0 03 90 FD | 	jmp	#LR__0714
07c2c                 | LR__0645
07c2c     B8 0A B0 FD | 	call	#_compile_fun_2p
07c30     FD 30 02 F6 | 	mov	local06, result1
07c34     A4 03 90 FD | 	jmp	#LR__0714
07c38                 | LR__0646
07c38     AC 0A B0 FD | 	call	#_compile_fun_2p
07c3c     FD 30 02 F6 | 	mov	local06, result1
07c40     98 03 90 FD | 	jmp	#LR__0714
07c44                 | LR__0647
07c44                 | ' return expr()
07c44     DC 41 B0 FD | 	call	#_expr
07c48     FD 30 02 F6 | 	mov	local06, result1
07c4c     8C 03 90 FD | 	jmp	#LR__0714
07c50                 | LR__0648
07c50                 | ' return expr()
07c50     D0 41 B0 FD | 	call	#_expr
07c54     FD 30 02 F6 | 	mov	local06, result1
07c58     80 03 90 FD | 	jmp	#LR__0714
07c5c                 | LR__0649
07c5c     58 0D B0 FD | 	call	#_compile_fun_varp
07c60     FD 34 02 F6 | 	mov	local08, result1
07c64     FE 30 02 F6 | 	mov	local06, result2
07c68     70 03 90 FD | 	jmp	#LR__0714
07c6c                 | LR__0650
07c6c     48 0D B0 FD | 	call	#_compile_fun_varp
07c70     FD 34 02 F6 | 	mov	local08, result1
07c74     FE 30 02 F6 | 	mov	local06, result2
07c78     60 03 90 FD | 	jmp	#LR__0714
07c7c                 | LR__0651
07c7c     38 0D B0 FD | 	call	#_compile_fun_varp
07c80     FD 34 02 F6 | 	mov	local08, result1
07c84     FE 30 02 F6 | 	mov	local06, result2
07c88     50 03 90 FD | 	jmp	#LR__0714
07c8c                 | LR__0652
07c8c                 | ' return expr()
07c8c     94 41 B0 FD | 	call	#_expr
07c90     FD 30 02 F6 | 	mov	local06, result1
07c94     44 03 90 FD | 	jmp	#LR__0714
07c98                 | LR__0653
07c98     40 22 B0 FD | 	call	#_compile_dim
07c9c     FD 30 02 F6 | 	mov	local06, result1
07ca0     F4 03 90 FD | 	jmp	#LR__0715
07ca4                 | LR__0654
07ca4     10 0D B0 FD | 	call	#_compile_fun_varp
07ca8     FD 34 02 F6 | 	mov	local08, result1
07cac     FE 30 02 F6 | 	mov	local06, result2
07cb0     28 03 90 FD | 	jmp	#LR__0714
07cb4                 | LR__0655
07cb4     30 0A B0 FD | 	call	#_compile_fun_2p
07cb8     FD 30 02 F6 | 	mov	local06, result1
07cbc     1C 03 90 FD | 	jmp	#LR__0714
07cc0                 | LR__0656
07cc0     F4 0C B0 FD | 	call	#_compile_fun_varp
07cc4     FD 34 02 F6 | 	mov	local08, result1
07cc8     FE 30 02 F6 | 	mov	local06, result2
07ccc     0C 03 90 FD | 	jmp	#LR__0714
07cd0                 | LR__0657
07cd0     17 13 02 F6 | 	mov	arg01, local05
07cd4     CC 20 B0 FD | 	call	#_compile_else
07cd8     FD 30 02 F6 | 	mov	local06, result1
07cdc     B8 03 90 FD | 	jmp	#LR__0715
07ce0                 | LR__0658
07ce0     D4 0C B0 FD | 	call	#_compile_fun_varp
07ce4     FD 34 02 F6 | 	mov	local08, result1
07ce8     FE 30 02 F6 | 	mov	local06, result2
07cec     EC 02 90 FD | 	jmp	#LR__0714
07cf0                 | LR__0659
07cf0     C4 0C B0 FD | 	call	#_compile_fun_varp
07cf4     FD 34 02 F6 | 	mov	local08, result1
07cf8     FE 30 02 F6 | 	mov	local06, result2
07cfc     DC 02 90 FD | 	jmp	#LR__0714
07d00                 | LR__0660
07d00     01 2E 16 F2 | 	cmp	local05, #1 wc
07d04     08 00 90 CD |  if_b	jmp	#LR__0661
07d08     6C 33 B0 FD | 	call	#_compile_goto
07d0c     88 03 90 FD | 	jmp	#LR__0715
07d10                 | LR__0661
07d10     19 12 06 F6 | 	mov	arg01, #25
07d14     00 14 06 F6 | 	mov	arg02, #0
07d18     18 B7 B1 FD | 	call	#_printerror
07d1c     78 03 90 FD | 	jmp	#LR__0715
07d20                 | LR__0662
07d20     01 2E 16 F2 | 	cmp	local05, #1 wc
07d24     08 00 90 CD |  if_b	jmp	#LR__0663
07d28     E8 32 B0 FD | 	call	#_compile_gosub
07d2c     68 03 90 FD | 	jmp	#LR__0715
07d30                 | LR__0663
07d30     19 12 06 F6 | 	mov	arg01, #25
07d34     00 14 06 F6 | 	mov	arg02, #0
07d38     F8 B6 B1 FD | 	call	#_printerror
07d3c     58 03 90 FD | 	jmp	#LR__0715
07d40                 | LR__0664
07d40     74 0C B0 FD | 	call	#_compile_fun_varp
07d44     FD 34 02 F6 | 	mov	local08, result1
07d48     FE 30 02 F6 | 	mov	local06, result2
07d4c     8C 02 90 FD | 	jmp	#LR__0714
07d50                 | LR__0665
07d50     0C 0B B0 FD | 	call	#_compile_fun_4p
07d54     FD 30 02 F6 | 	mov	local06, result1
07d58     80 02 90 FD | 	jmp	#LR__0714
07d5c                 | LR__0666
07d5c                 | ' return expr()
07d5c     C4 40 B0 FD | 	call	#_expr
07d60     FD 30 02 F6 | 	mov	local06, result1
07d64     74 02 90 FD | 	jmp	#LR__0714
07d68                 | LR__0667
07d68     44 28 B0 FD | 	call	#_compile_for
07d6c     FD 30 02 F6 | 	mov	local06, result1
07d70     24 03 90 FD | 	jmp	#LR__0715
07d74                 | LR__0668
07d74     40 0C B0 FD | 	call	#_compile_fun_varp
07d78     FD 34 02 F6 | 	mov	local08, result1
07d7c     FE 30 02 F6 | 	mov	local06, result2
07d80     58 02 90 FD | 	jmp	#LR__0714
07d84                 | LR__0669
07d84     17 13 02 F6 | 	mov	arg01, local05
07d88     90 1E B0 FD | 	call	#_compile_if
07d8c     FD 30 02 F6 | 	mov	local06, result1
07d90     04 03 90 FD | 	jmp	#LR__0715
07d94                 | LR__0670
07d94                 | ' return expr()
07d94     8C 40 B0 FD | 	call	#_expr
07d98     FD 30 02 F6 | 	mov	local06, result1
07d9c     3C 02 90 FD | 	jmp	#LR__0714
07da0                 | LR__0671
07da0     E0 0D B0 FD | 	call	#_compile_input
07da4     FD 34 02 F6 | 	mov	local08, result1
07da8     FE 30 02 F6 | 	mov	local06, result2
07dac     2C 02 90 FD | 	jmp	#LR__0714
07db0                 | LR__0672
07db0                 | ' return expr()
07db0     70 40 B0 FD | 	call	#_expr
07db4     FD 30 02 F6 | 	mov	local06, result1
07db8     20 02 90 FD | 	jmp	#LR__0714
07dbc                 | LR__0673
07dbc     F8 0B B0 FD | 	call	#_compile_fun_varp
07dc0     FD 34 02 F6 | 	mov	local08, result1
07dc4     FE 30 02 F6 | 	mov	local06, result2
07dc8     10 02 90 FD | 	jmp	#LR__0714
07dcc                 | LR__0674
07dcc     E8 0B B0 FD | 	call	#_compile_fun_varp
07dd0     FD 34 02 F6 | 	mov	local08, result1
07dd4     FE 30 02 F6 | 	mov	local06, result2
07dd8     00 02 90 FD | 	jmp	#LR__0714
07ddc                 | LR__0675
07ddc     08 09 B0 FD | 	call	#_compile_fun_2p
07de0     FD 30 02 F6 | 	mov	local06, result1
07de4     F4 01 90 FD | 	jmp	#LR__0714
07de8                 | LR__0676
07de8                 | ' return expr()
07de8     38 40 B0 FD | 	call	#_expr
07dec     FD 30 02 F6 | 	mov	local06, result1
07df0     E8 01 90 FD | 	jmp	#LR__0714
07df4                 | LR__0677
07df4                 | ' return expr()
07df4     2C 40 B0 FD | 	call	#_expr
07df8     FD 30 02 F6 | 	mov	local06, result1
07dfc     DC 01 90 FD | 	jmp	#LR__0714
07e00                 | LR__0678
07e00                 | ' return expr()
07e00     20 40 B0 FD | 	call	#_expr
07e04     FD 30 02 F6 | 	mov	local06, result1
07e08     D0 01 90 FD | 	jmp	#LR__0714
07e0c                 | LR__0679
07e0c     6C 30 B0 FD | 	call	#_compile_next
07e10     FD 30 02 F6 | 	mov	local06, result1
07e14     80 02 90 FD | 	jmp	#LR__0715
07e18                 | LR__0680
07e18     4C 36 B0 FD | 	call	#_compile_on
07e1c     FD 30 02 F6 | 	mov	local06, result1
07e20     74 02 90 FD | 	jmp	#LR__0715
07e24                 | LR__0681
07e24     48 09 B0 FD | 	call	#_compile_fun_3p
07e28     FD 30 02 F6 | 	mov	local06, result1
07e2c     AC 01 90 FD | 	jmp	#LR__0714
07e30                 | LR__0682
07e30                 | ' return expr()
07e30     F0 3F B0 FD | 	call	#_expr
07e34     FD 30 02 F6 | 	mov	local06, result1
07e38     A0 01 90 FD | 	jmp	#LR__0714
07e3c                 | LR__0683
07e3c                 | ' return expr()
07e3c     E4 3F B0 FD | 	call	#_expr
07e40     FD 30 02 F6 | 	mov	local06, result1
07e44     94 01 90 FD | 	jmp	#LR__0714
07e48                 | LR__0684
07e48                 | ' return expr()
07e48     D8 3F B0 FD | 	call	#_expr
07e4c     FD 30 02 F6 | 	mov	local06, result1
07e50     88 01 90 FD | 	jmp	#LR__0714
07e54                 | LR__0685
07e54                 | ' return expr()
07e54     CC 3F B0 FD | 	call	#_expr
07e58     FD 30 02 F6 | 	mov	local06, result1
07e5c     7C 01 90 FD | 	jmp	#LR__0714
07e60                 | LR__0686
07e60     FC 09 B0 FD | 	call	#_compile_fun_4p
07e64     FD 30 02 F6 | 	mov	local06, result1
07e68     70 01 90 FD | 	jmp	#LR__0714
07e6c                 | LR__0687
07e6c                 | ' return expr()
07e6c     B4 3F B0 FD | 	call	#_expr
07e70     FD 30 02 F6 | 	mov	local06, result1
07e74     64 01 90 FD | 	jmp	#LR__0714
07e78                 | LR__0688
07e78     6C 08 B0 FD | 	call	#_compile_fun_2p
07e7c     FD 30 02 F6 | 	mov	local06, result1
07e80     58 01 90 FD | 	jmp	#LR__0714
07e84                 | LR__0689
07e84     30 0B B0 FD | 	call	#_compile_fun_varp
07e88     FD 34 02 F6 | 	mov	local08, result1
07e8c     FE 30 02 F6 | 	mov	local06, result2
07e90     48 01 90 FD | 	jmp	#LR__0714
07e94                 | LR__0690
07e94     20 0B B0 FD | 	call	#_compile_fun_varp
07e98     FD 34 02 F6 | 	mov	local08, result1
07e9c     FE 30 02 F6 | 	mov	local06, result2
07ea0     38 01 90 FD | 	jmp	#LR__0714
07ea4                 | LR__0691
07ea4     40 08 B0 FD | 	call	#_compile_fun_2p
07ea8     FD 30 02 F6 | 	mov	local06, result1
07eac     2C 01 90 FD | 	jmp	#LR__0714
07eb0                 | LR__0692
07eb0     34 08 B0 FD | 	call	#_compile_fun_2p
07eb4     FD 30 02 F6 | 	mov	local06, result1
07eb8     20 01 90 FD | 	jmp	#LR__0714
07ebc                 | LR__0693
07ebc     84 16 B0 FD | 	call	#_compile_print
07ec0     FD 30 02 F6 | 	mov	local06, result1
07ec4     D0 01 90 FD | 	jmp	#LR__0715
07ec8                 | LR__0694
07ec8     EC 0A B0 FD | 	call	#_compile_fun_varp
07ecc     FD 34 02 F6 | 	mov	local08, result1
07ed0     FE 30 02 F6 | 	mov	local06, result2
07ed4     04 01 90 FD | 	jmp	#LR__0714
07ed8                 | LR__0695
07ed8     B8 0B B0 FD | 	call	#_compile_read
07edc     FD 34 02 F6 | 	mov	local08, result1
07ee0     FE 30 02 F6 | 	mov	local06, result2
07ee4     F4 00 90 FD | 	jmp	#LR__0714
07ee8                 | LR__0696
07ee8                 | ' return expr()
07ee8     38 3F B0 FD | 	call	#_expr
07eec     FD 30 02 F6 | 	mov	local06, result1
07ef0     E8 00 90 FD | 	jmp	#LR__0714
07ef4                 | LR__0697
07ef4     C0 0A B0 FD | 	call	#_compile_fun_varp
07ef8     FD 34 02 F6 | 	mov	local08, result1
07efc     FE 30 02 F6 | 	mov	local06, result2
07f00     D8 00 90 FD | 	jmp	#LR__0714
07f04                 | LR__0698
07f04     B0 0A B0 FD | 	call	#_compile_fun_varp
07f08     FD 34 02 F6 | 	mov	local08, result1
07f0c     FE 30 02 F6 | 	mov	local06, result2
07f10     C8 00 90 FD | 	jmp	#LR__0714
07f14                 | LR__0699
07f14     A0 0A B0 FD | 	call	#_compile_fun_varp
07f18     FD 34 02 F6 | 	mov	local08, result1
07f1c     FE 30 02 F6 | 	mov	local06, result2
07f20     B8 00 90 FD | 	jmp	#LR__0714
07f24                 | LR__0700
07f24     C0 07 B0 FD | 	call	#_compile_fun_2p
07f28     FD 30 02 F6 | 	mov	local06, result1
07f2c     AC 00 90 FD | 	jmp	#LR__0714
07f30                 | LR__0701
07f30     B4 07 B0 FD | 	call	#_compile_fun_2p
07f34     FD 30 02 F6 | 	mov	local06, result1
07f38     A0 00 90 FD | 	jmp	#LR__0714
07f3c                 | LR__0702
07f3c     A8 07 B0 FD | 	call	#_compile_fun_2p
07f40     FD 30 02 F6 | 	mov	local06, result1
07f44     94 00 90 FD | 	jmp	#LR__0714
07f48                 | LR__0703
07f48     9C 07 B0 FD | 	call	#_compile_fun_2p
07f4c     FD 30 02 F6 | 	mov	local06, result1
07f50     88 00 90 FD | 	jmp	#LR__0714
07f54                 | LR__0704
07f54     90 07 B0 FD | 	call	#_compile_fun_2p
07f58     FD 30 02 F6 | 	mov	local06, result1
07f5c     7C 00 90 FD | 	jmp	#LR__0714
07f60                 | LR__0705
07f60     84 07 B0 FD | 	call	#_compile_fun_2p
07f64     FD 30 02 F6 | 	mov	local06, result1
07f68     70 00 90 FD | 	jmp	#LR__0714
07f6c                 | LR__0706
07f6c     78 07 B0 FD | 	call	#_compile_fun_2p
07f70     FD 30 02 F6 | 	mov	local06, result1
07f74     64 00 90 FD | 	jmp	#LR__0714
07f78                 | LR__0707
07f78     3C 0A B0 FD | 	call	#_compile_fun_varp
07f7c     FD 34 02 F6 | 	mov	local08, result1
07f80     FE 30 02 F6 | 	mov	local06, result2
07f84     54 00 90 FD | 	jmp	#LR__0714
07f88                 | LR__0708
07f88     E4 07 B0 FD | 	call	#_compile_fun_3p
07f8c     FD 30 02 F6 | 	mov	local06, result1
07f90     48 00 90 FD | 	jmp	#LR__0714
07f94                 | LR__0709
07f94                 | ' return expr()
07f94     8C 3E B0 FD | 	call	#_expr
07f98     FD 30 02 F6 | 	mov	local06, result1
07f9c     3C 00 90 FD | 	jmp	#LR__0714
07fa0                 | LR__0710
07fa0     44 07 B0 FD | 	call	#_compile_fun_2p
07fa4     FD 30 02 F6 | 	mov	local06, result1
07fa8     30 00 90 FD | 	jmp	#LR__0714
07fac                 | LR__0711
07fac     38 07 B0 FD | 	call	#_compile_fun_2p
07fb0     FD 30 02 F6 | 	mov	local06, result1
07fb4     24 00 90 FD | 	jmp	#LR__0714
07fb8                 | LR__0712
07fb8     2C 07 B0 FD | 	call	#_compile_fun_2p
07fbc     FD 30 02 F6 | 	mov	local06, result1
07fc0     18 00 90 FD | 	jmp	#LR__0714
07fc4                 | LR__0713
07fc4     1C 13 B0 FD | 	call	#_compile_array_assign
07fc8     FD 30 02 F6 | 	mov	local06, result1
07fcc     0E 30 0E F2 | 	cmp	local06, #14 wz
07fd0     C4 00 90 5D |  if_ne	jmp	#LR__0715
07fd4                 | ' return 23
07fd4     17 30 06 F6 | 	mov	local06, #23
07fd8     BC 00 90 FD | 	jmp	#LR__0715
07fdc                 | ' return 23
07fdc                 | LR__0714
07fdc     19 2B 02 F6 | 	mov	local03, local07
07fe0     1A 27 02 F6 | 	mov	local01, local08
07fe4     13 37 02 F6 | 	mov	local09, local01
07fe8     14 39 02 F6 | 	mov	local10, local02
07fec     15 33 02 F6 | 	mov	local07, local03
07ff0     4A 00 00 FF 
07ff4     7C E4 05 F1 | 	add	objptr, ##38012
07ff8     F2 26 02 FB | 	rdlong	local01, objptr
07ffc     13 35 02 F6 | 	mov	local08, local01
08000     01 34 66 F0 | 	shl	local08, #1
08004     13 35 02 F1 | 	add	local08, local01
08008     02 34 66 F0 | 	shl	local08, #2
0800c     03 00 00 FF 
08010     00 E4 85 F1 | 	sub	objptr, ##1536
08014     F2 34 02 F1 | 	add	local08, objptr
08018     1A 37 62 FC | 	wrlong	local09, local08
0801c     03 00 00 FF 
08020     00 E4 05 F1 | 	add	objptr, ##1536
08024     F2 26 02 FB | 	rdlong	local01, objptr
08028     13 37 02 F6 | 	mov	local09, local01
0802c     01 36 66 F0 | 	shl	local09, #1
08030     13 37 02 F1 | 	add	local09, local01
08034     02 36 66 F0 | 	shl	local09, #2
08038     03 00 00 FF 
0803c     00 E4 85 F1 | 	sub	objptr, ##1536
08040     F2 36 02 F1 | 	add	local09, objptr
08044     04 36 06 F1 | 	add	local09, #4
08048     1B 39 62 FC | 	wrlong	local10, local09
0804c     03 00 00 FF 
08050     00 E4 05 F1 | 	add	objptr, ##1536
08054     F2 26 02 FB | 	rdlong	local01, objptr
08058     13 39 02 F6 | 	mov	local10, local01
0805c     01 38 66 F0 | 	shl	local10, #1
08060     13 39 02 F1 | 	add	local10, local01
08064     02 38 66 F0 | 	shl	local10, #2
08068     03 00 00 FF 
0806c     00 E4 85 F1 | 	sub	objptr, ##1536
08070     F2 38 02 F1 | 	add	local10, objptr
08074     08 38 06 F1 | 	add	local10, #8
08078     1C 33 62 FC | 	wrlong	local07, local10
0807c     03 00 00 FF 
08080     00 E4 05 F1 | 	add	objptr, ##1536
08084     F2 36 02 FB | 	rdlong	local09, objptr
08088     01 36 06 F1 | 	add	local09, #1
0808c     F2 36 62 FC | 	wrlong	local09, objptr
08090     4A 00 00 FF 
08094     7C E4 85 F1 | 	sub	objptr, ##38012
08098                 | LR__0715
08098                 | ' 
08098                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
08098                 | ' 450 if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end 				' the last part 
08098     03 2C 0E F2 | 	cmp	local04, #3 wz
0809c     04 2C 0E 52 |  if_ne	cmp	local04, #4 wz
080a0     38 00 90 5D |  if_ne	jmp	#LR__0716
080a4     4A 00 00 FF 
080a8     7C E4 05 F1 | 	add	objptr, ##38012
080ac     F2 38 02 FB | 	rdlong	local10, objptr
080b0     1C 27 02 F6 | 	mov	local01, local10
080b4     01 26 66 F0 | 	shl	local01, #1
080b8     1C 27 02 F1 | 	add	local01, local10
080bc     02 26 66 F0 | 	shl	local01, #2
080c0     03 00 00 FF 
080c4     00 E4 85 F1 | 	sub	objptr, ##1536
080c8     F2 26 02 F1 | 	add	local01, objptr
080cc     08 26 06 F1 | 	add	local01, #8
080d0     13 FD 6B FC | 	wrlong	#510, local01
080d4     47 00 00 FF 
080d8     7C E4 85 F1 | 	sub	objptr, ##36476
080dc                 | LR__0716
080dc                 | ' ' if there is token_adr somewhere, change fun_getvar to fun_getaddr
080dc                 | ' for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
080dc     4A 00 00 FF 
080e0     7C E4 05 F1 | 	add	objptr, ##38012
080e4     F2 26 02 FB | 	rdlong	local01, objptr
080e8     4A 00 00 FF 
080ec     7C E4 85 F1 | 	sub	objptr, ##38012
080f0     97 58 48 FB | 	callpa	#(@LR__0719-@LR__0717)>>2,fcache_load_ptr_
080f4                 | LR__0717
080f4     13 39 02 F6 | 	mov	local10, local01
080f8     01 38 66 F0 | 	shl	local10, #1
080fc     13 39 02 F1 | 	add	local10, local01
08100     02 38 66 F0 | 	shl	local10, #2
08104     47 00 00 FF 
08108     7C E4 05 F1 | 	add	objptr, ##36476
0810c     F2 38 02 F1 | 	add	local10, objptr
08110     08 38 06 F1 | 	add	local10, #8
08114     1C 39 02 FB | 	rdlong	local10, local10
08118     9B 38 0E F2 | 	cmp	local10, #155 wz
0811c     47 00 00 FF 
08120     7C E4 85 F1 | 	sub	objptr, ##36476
08124     70 00 90 5D |  if_ne	jmp	#LR__0718
08128     13 37 02 F6 | 	mov	local09, local01
0812c     01 36 86 F1 | 	sub	local09, #1
08130     1B 39 02 F6 | 	mov	local10, local09
08134     01 38 66 F0 | 	shl	local10, #1
08138     1B 39 02 F1 | 	add	local10, local09
0813c     02 38 66 F0 | 	shl	local10, #2
08140     47 00 00 FF 
08144     7C E4 05 F1 | 	add	objptr, ##36476
08148     F2 38 02 F1 | 	add	local10, objptr
0814c     08 38 06 F1 | 	add	local10, #8
08150     1C 39 02 FB | 	rdlong	local10, local10
08154     11 38 0E F2 | 	cmp	local10, #17 wz
08158     47 00 00 FF 
0815c     7C E4 85 F1 | 	sub	objptr, ##36476
08160     34 00 90 5D |  if_ne	jmp	#LR__0718
08164     13 37 02 F6 | 	mov	local09, local01
08168     01 36 86 F1 | 	sub	local09, #1
0816c     1B 39 02 F6 | 	mov	local10, local09
08170     01 38 66 F0 | 	shl	local10, #1
08174     1B 39 02 F1 | 	add	local10, local09
08178     02 38 66 F0 | 	shl	local10, #2
0817c     47 00 00 FF 
08180     7C E4 05 F1 | 	add	objptr, ##36476
08184     F2 38 02 F1 | 	add	local10, objptr
08188     08 38 06 F1 | 	add	local10, #8
0818c     1C 25 68 FC | 	wrlong	#18, local10
08190     47 00 00 FF 
08194     7C E4 85 F1 | 	sub	objptr, ##36476
08198                 | LR__0718
08198     01 26 86 F1 | 	sub	local01, #1
0819c     01 26 56 F2 | 	cmps	local01, #1 wc
081a0     50 FF 9F 3D |  if_ae	jmp	#LR__0717
081a4                 | LR__0719
081a4                 | ' ''''print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
081a4                 | ' return err
081a4     18 FB 01 F6 | 	mov	result1, local06
081a8     A7 F0 03 F6 | 	mov	ptra, fp
081ac     B2 00 A0 FD | 	call	#popregs_
081b0                 | _compile_immediate_ret
081b0     2D 00 64 FD | 	ret
081b4                 | 
081b4                 | ' 
081b4                 | ' '--- Do a main compilation task for assigns, called from compile_assign(), returns an error code
081b4                 | ' 
081b4                 | ' function compile_immediate_assign(linetype as ulong) as ulong
081b4                 | _compile_immediate_assign
081b4     0C 4A 05 F6 | 	mov	COUNT_, #12
081b8     A8 00 A0 FD | 	call	#pushregs_
081bc     09 2D 02 F6 | 	mov	local04, arg01
081c0     FF 2A 06 F6 | 	mov	local03, #255
081c4     01 2E 66 F6 | 	neg	local05, #1
081c8     00 30 06 F6 | 	mov	local06, #0
081cc                 | ' 
081cc                 | ' t1.result_type=result_error : t1.result.uresult=0
081cc                 | ' i=-1: j=-1 : err=0
081cc                 | ' 
081cc                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
081cc     02 2C 0E F2 | 	cmp	local04, #2 wz
081d0     03 2C 0E 52 |  if_ne	cmp	local04, #3 wz
081d4     35 00 00 AF 
081d8     0C E4 05 A1 |  if_e	add	objptr, ##27148
081dc     F2 32 02 AB |  if_e	rdlong	local07, objptr
081e0     02 00 00 AF 
081e4     38 E4 05 A1 |  if_e	add	objptr, ##1080
081e8     F2 04 68 AC |  if_e	wrlong	#2, objptr
081ec     37 00 00 AF 
081f0     44 E4 85 A1 |  if_e	sub	objptr, ##28228
081f4                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
081f4     04 2C 0E F2 | 	cmp	local04, #4 wz
081f8     01 2C 0E 52 |  if_ne	cmp	local04, #1 wz
081fc     2C 00 90 5D |  if_ne	jmp	#LR__0720
08200     35 00 00 FF 
08204     14 E4 05 F1 | 	add	objptr, ##27156
08208     F2 32 02 FB | 	rdlong	local07, objptr
0820c     02 00 00 FF 
08210     30 E4 05 F1 | 	add	objptr, ##1072
08214     F2 06 68 FC | 	wrlong	#3, objptr
08218     13 00 00 FF 
0821c     38 E4 05 F1 | 	add	objptr, ##9784
08220     F2 04 68 FC | 	wrlong	#2, objptr
08224     4A 00 00 FF 
08228     7C E4 85 F1 | 	sub	objptr, ##38012
0822c                 | LR__0720
0822c                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
0822c     05 2C 0E F2 | 	cmp	local04, #5 wz
08230     3C 00 90 5D |  if_ne	jmp	#LR__0721
08234     37 00 00 FF 
08238     44 E4 05 F1 | 	add	objptr, ##28228
0823c     F2 FA 01 FB | 	rdlong	result1, objptr
08240     FD 32 02 F6 | 	mov	local07, result1
08244     03 32 66 F0 | 	shl	local07, #3
08248     02 00 00 FF 
0824c     38 E4 85 F1 | 	sub	objptr, ##1080
08250     F2 32 02 F1 | 	add	local07, objptr
08254     19 33 02 FB | 	rdlong	local07, local07
08258     02 FA 05 F1 | 	add	result1, #2
0825c     02 00 00 FF 
08260     38 E4 05 F1 | 	add	objptr, ##1080
08264     F2 FA 61 FC | 	wrlong	result1, objptr
08268     37 00 00 FF 
0826c     44 E4 85 F1 | 	sub	objptr, ##28228
08270                 | LR__0721
08270     19 13 02 F6 | 	mov	arg01, local07
08274     01 14 06 F6 | 	mov	arg02, #1
08278     D8 0C B2 FD | 	call	#__system__Right_S
0827c     FD 34 02 F6 | 	mov	local08, result1
08280     A0 3B B0 FD | 	call	#_expr
08284                 | ' 
08284                 | ' suffix2$=right$(varname2$,1)
08284                 | ' expr()
08284                 | ' if varnum>0 then					' try to find a variable
08284     35 00 00 FF 
08288     08 E4 05 F1 | 	add	objptr, ##27144
0828c     F2 36 02 FB | 	rdlong	local09, objptr
08290     35 00 00 FF 
08294     08 E4 85 F1 | 	sub	objptr, ##27144
08298     01 36 56 F2 | 	cmps	local09, #1 wc
0829c     58 00 90 CD |  if_b	jmp	#LR__0724
082a0                 | '   for i=0 to varnum-1
082a0     00 38 06 F6 | 	mov	local10, #0
082a4     35 00 00 FF 
082a8     08 E4 05 F1 | 	add	objptr, ##27144
082ac     F2 3A 02 FB | 	rdlong	local11, objptr
082b0     35 00 00 FF 
082b4     08 E4 85 F1 | 	sub	objptr, ##27144
082b8                 | LR__0722
082b8     1D 39 52 F2 | 	cmps	local10, local11 wc
082bc     38 00 90 3D |  if_ae	jmp	#LR__0723
082c0                 | '     if variables(i).name=varname2$ then j=i : exit
082c0     1C 37 02 F6 | 	mov	local09, local10
082c4     04 36 66 F0 | 	shl	local09, #4
082c8     14 00 00 FF 
082cc     F8 E5 05 F1 | 	add	objptr, ##10744
082d0     F2 36 02 F1 | 	add	local09, objptr
082d4     1B 13 02 FB | 	rdlong	arg01, local09
082d8     19 15 02 F6 | 	mov	arg02, local07
082dc     14 00 00 FF 
082e0     F8 E5 85 F1 | 	sub	objptr, ##10744
082e4     90 EB B1 FD | 	call	#__system___string_cmp
082e8     00 FA 0D F2 | 	cmp	result1, #0 wz
082ec     1C 2F 02 A6 |  if_e	mov	local05, local10
082f0     01 38 06 51 |  if_ne	add	local10, #1
082f4     C0 FF 9F 5D |  if_ne	jmp	#LR__0722
082f8                 | LR__0723
082f8                 | LR__0724
082f8                 | ' if  j=-1 andalso varnum<maxvars then   			' not found, add a new one
082f8     FF FF 7F FF 
082fc     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
08300     60 00 90 5D |  if_ne	jmp	#LR__0725
08304     35 00 00 FF 
08308     08 E4 05 F1 | 	add	objptr, ##27144
0830c     F2 36 02 FB | 	rdlong	local09, objptr
08310     35 00 00 FF 
08314     08 E4 85 F1 | 	sub	objptr, ##27144
08318     02 00 00 FF 
0831c     00 36 56 F2 | 	cmps	local09, ##1024 wc
08320     40 00 90 3D |  if_ae	jmp	#LR__0725
08324     35 00 00 FF 
08328     08 E4 05 F1 | 	add	objptr, ##27144
0832c     F2 3A 02 FB | 	rdlong	local11, objptr
08330     04 3A 66 F0 | 	shl	local11, #4
08334     20 00 00 FF 
08338     10 E4 85 F1 | 	sub	objptr, ##16400
0833c     F2 3A 02 F1 | 	add	local11, objptr
08340     1D 33 62 FC | 	wrlong	local07, local11
08344     20 00 00 FF 
08348     10 E4 05 F1 | 	add	objptr, ##16400
0834c     F2 36 02 FB | 	rdlong	local09, objptr
08350     1B 2F 02 F6 | 	mov	local05, local09
08354     01 36 06 F1 | 	add	local09, #1
08358     F2 36 62 FC | 	wrlong	local09, objptr
0835c     35 00 00 FF 
08360     08 E4 85 F1 | 	sub	objptr, ##27144
08364                 | LR__0725
08364                 | ' if varnum>=maxvars then
08364     35 00 00 FF 
08368     08 E4 05 F1 | 	add	objptr, ##27144
0836c     F2 36 02 FB | 	rdlong	local09, objptr
08370     35 00 00 FF 
08374     08 E4 85 F1 | 	sub	objptr, ##27144
08378     02 00 00 FF 
0837c     00 36 56 F2 | 	cmps	local09, ##1024 wc
08380     2D 30 06 36 |  if_ae	mov	local06, #45
08384     C8 01 90 3D |  if_ae	jmp	#LR__0730
08388     17 27 02 F6 | 	mov	local01, local05
0838c     17 2A 06 F6 | 	mov	local03, #23
08390     13 37 02 F6 | 	mov	local09, local01
08394     14 3D 02 F6 | 	mov	local12, local02
08398     15 27 02 F6 | 	mov	local01, local03
0839c     4A 00 00 FF 
083a0     7C E4 05 F1 | 	add	objptr, ##38012
083a4     F2 3A 02 FB | 	rdlong	local11, objptr
083a8     1D 39 02 F6 | 	mov	local10, local11
083ac     01 38 66 F0 | 	shl	local10, #1
083b0     1D 39 02 F1 | 	add	local10, local11
083b4     02 38 66 F0 | 	shl	local10, #2
083b8     03 00 00 FF 
083bc     00 E4 85 F1 | 	sub	objptr, ##1536
083c0     F2 38 02 F1 | 	add	local10, objptr
083c4     1C 37 62 FC | 	wrlong	local09, local10
083c8     03 00 00 FF 
083cc     00 E4 05 F1 | 	add	objptr, ##1536
083d0     F2 36 02 FB | 	rdlong	local09, objptr
083d4     1B 3B 02 F6 | 	mov	local11, local09
083d8     01 3A 66 F0 | 	shl	local11, #1
083dc     1B 3B 02 F1 | 	add	local11, local09
083e0     02 3A 66 F0 | 	shl	local11, #2
083e4     03 00 00 FF 
083e8     00 E4 85 F1 | 	sub	objptr, ##1536
083ec     F2 3A 02 F1 | 	add	local11, objptr
083f0     04 3A 06 F1 | 	add	local11, #4
083f4     1D 3D 62 FC | 	wrlong	local12, local11
083f8     03 00 00 FF 
083fc     00 E4 05 F1 | 	add	objptr, ##1536
08400     F2 36 02 FB | 	rdlong	local09, objptr
08404     1B 3D 02 F6 | 	mov	local12, local09
08408     01 3C 66 F0 | 	shl	local12, #1
0840c     1B 3D 02 F1 | 	add	local12, local09
08410     02 3C 66 F0 | 	shl	local12, #2
08414     03 00 00 FF 
08418     00 E4 85 F1 | 	sub	objptr, ##1536
0841c     F2 3C 02 F1 | 	add	local12, objptr
08420     08 3C 06 F1 | 	add	local12, #8
08424     1E 27 62 FC | 	wrlong	local01, local12
08428     03 00 00 FF 
0842c     00 E4 05 F1 | 	add	objptr, ##1536
08430     F2 36 02 FB | 	rdlong	local09, objptr
08434     01 36 06 F1 | 	add	local09, #1
08438     F2 36 62 FC | 	wrlong	local09, objptr
0843c     4A 00 00 FF 
08440     7C E4 85 F1 | 	sub	objptr, ##38012
08444                 | '   t1.result.uresult=j: t1.result_type=fun_assign  
08444                 | '   compiledline(lineptr)=t1:  lineptr+=1 
08444                 | '   if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
08444     03 2C 0E F2 | 	cmp	local04, #3 wz
08448     04 2C 0E 52 |  if_ne	cmp	local04, #4 wz
0844c     38 00 90 5D |  if_ne	jmp	#LR__0726
08450     4A 00 00 FF 
08454     7C E4 05 F1 | 	add	objptr, ##38012
08458     F2 3C 02 FB | 	rdlong	local12, objptr
0845c     1E 27 02 F6 | 	mov	local01, local12
08460     01 26 66 F0 | 	shl	local01, #1
08464     1E 27 02 F1 | 	add	local01, local12
08468     02 26 66 F0 | 	shl	local01, #2
0846c     03 00 00 FF 
08470     00 E4 85 F1 | 	sub	objptr, ##1536
08474     F2 26 02 F1 | 	add	local01, objptr
08478     08 26 06 F1 | 	add	local01, #8
0847c     13 FD 6B FC | 	wrlong	#510, local01
08480     47 00 00 FF 
08484     7C E4 85 F1 | 	sub	objptr, ##36476
08488                 | LR__0726
08488                 | '   for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
08488     4A 00 00 FF 
0848c     7C E4 05 F1 | 	add	objptr, ##38012
08490     F2 38 02 FB | 	rdlong	local10, objptr
08494     4A 00 00 FF 
08498     7C E4 85 F1 | 	sub	objptr, ##38012
0849c     97 58 48 FB | 	callpa	#(@LR__0729-@LR__0727)>>2,fcache_load_ptr_
084a0                 | LR__0727
084a0     1C 3D 02 F6 | 	mov	local12, local10
084a4     01 3C 66 F0 | 	shl	local12, #1
084a8     1C 3D 02 F1 | 	add	local12, local10
084ac     02 3C 66 F0 | 	shl	local12, #2
084b0     47 00 00 FF 
084b4     7C E4 05 F1 | 	add	objptr, ##36476
084b8     F2 3C 02 F1 | 	add	local12, objptr
084bc     08 3C 06 F1 | 	add	local12, #8
084c0     1E 3D 02 FB | 	rdlong	local12, local12
084c4     9B 3C 0E F2 | 	cmp	local12, #155 wz
084c8     47 00 00 FF 
084cc     7C E4 85 F1 | 	sub	objptr, ##36476
084d0     70 00 90 5D |  if_ne	jmp	#LR__0728
084d4     1C 3D 02 F6 | 	mov	local12, local10
084d8     01 3C 86 F1 | 	sub	local12, #1
084dc     1E 27 02 F6 | 	mov	local01, local12
084e0     01 26 66 F0 | 	shl	local01, #1
084e4     1E 27 02 F1 | 	add	local01, local12
084e8     02 26 66 F0 | 	shl	local01, #2
084ec     47 00 00 FF 
084f0     7C E4 05 F1 | 	add	objptr, ##36476
084f4     F2 26 02 F1 | 	add	local01, objptr
084f8     08 26 06 F1 | 	add	local01, #8
084fc     13 27 02 FB | 	rdlong	local01, local01
08500     11 26 0E F2 | 	cmp	local01, #17 wz
08504     47 00 00 FF 
08508     7C E4 85 F1 | 	sub	objptr, ##36476
0850c     34 00 90 5D |  if_ne	jmp	#LR__0728
08510     1C 3D 02 F6 | 	mov	local12, local10
08514     01 3C 86 F1 | 	sub	local12, #1
08518     1E 27 02 F6 | 	mov	local01, local12
0851c     01 26 66 F0 | 	shl	local01, #1
08520     1E 27 02 F1 | 	add	local01, local12
08524     02 26 66 F0 | 	shl	local01, #2
08528     47 00 00 FF 
0852c     7C E4 05 F1 | 	add	objptr, ##36476
08530     F2 26 02 F1 | 	add	local01, objptr
08534     08 26 06 F1 | 	add	local01, #8
08538     13 25 68 FC | 	wrlong	#18, local01
0853c     47 00 00 FF 
08540     7C E4 85 F1 | 	sub	objptr, ##36476
08544                 | LR__0728
08544     01 38 86 F1 | 	sub	local10, #1
08548     01 38 56 F2 | 	cmps	local10, #1 wc
0854c     50 FF 9F 3D |  if_ae	jmp	#LR__0727
08550                 | LR__0729
08550                 | LR__0730
08550                 | ' return err
08550     18 FB 01 F6 | 	mov	result1, local06
08554     A7 F0 03 F6 | 	mov	ptra, fp
08558     B2 00 A0 FD | 	call	#popregs_
0855c                 | _compile_immediate_assign_ret
0855c     2D 00 64 FD | 	ret
08560                 | 
08560                 | ' 
08560                 | ' ' ------------------ compile the line that is calling a command, and save it if linenum>0, called from the interpreter 
08560                 | ' 
08560                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong) as ulong
08560                 | _compile
08560     03 4A 05 F6 | 	mov	COUNT_, #3
08564     A8 00 A0 FD | 	call	#pushregs_
08568     09 27 02 F6 | 	mov	local01, arg01
0856c     0B 29 02 F6 | 	mov	local02, arg03
08570     47 00 00 FF 
08574     7C E4 05 F1 | 	add	objptr, ##36476
08578     F2 26 62 FC | 	wrlong	local01, objptr
0857c     04 E4 05 F1 | 	add	objptr, #4
08580     F2 14 62 FC | 	wrlong	arg02, objptr
08584     47 00 00 FF 
08588     80 E4 85 F1 | 	sub	objptr, ##36480
0858c     14 13 02 F6 | 	mov	arg01, local02
08590     01 12 06 F1 | 	add	arg01, #1
08594     13 15 02 F6 | 	mov	arg02, local01
08598     44 F2 BF FD | 	call	#_compile_immediate
0859c     FD 2A 0A F6 | 	mov	local03, result1 wz
085a0                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
085a0                 | ' ucompiledline(0)=alinemajor
085a0                 | ' ucompiledline(1)=alineminor		' this is for the future when maybe linenums will be optional.
085a0                 | ' 
085a0                 | ' ' cont: 
085a0                 | ' ' 0 - this is the first part of the line that will continue
085a0                 | ' ' 1 - this is the continuation of the line
085a0                 | ' ' 2 - this is the last continued line
085a0                 | ' ' 3 - this is the one and only part
085a0                 | ' 
085a0                 | ' err=compile_immediate(cont+1,alinemajor) 
085a0                 | ' if err=0 andalso alinemajor>0 then
085a0     74 00 90 5D |  if_ne	jmp	#LR__0745
085a4     01 26 16 F2 | 	cmp	local01, #1 wc
085a8     6C 00 90 CD |  if_b	jmp	#LR__0745
085ac                 | '   if cont=3 orelse cont=2 then 
085ac     03 28 0E F2 | 	cmp	local02, #3 wz
085b0     02 28 0E 52 |  if_ne	cmp	local02, #2 wz
085b4     60 00 90 5D |  if_ne	jmp	#LR__0744
085b8                 | '     if alinemajor >lastline then 
085b8     4A 00 00 FF 
085bc     8C E4 05 F1 | 	add	objptr, ##38028
085c0     F2 14 02 FB | 	rdlong	arg02, objptr
085c4     4A 00 00 FF 
085c8     8C E4 85 F1 | 	sub	objptr, ##38028
085cc     0A 27 1A F2 | 	cmp	local01, arg02 wcz
085d0     0C 00 90 ED |  if_be	jmp	#LR__0740
085d4     13 13 02 F6 | 	mov	arg01, local01
085d8     3C F1 BF FD | 	call	#_add_line_at_end
085dc     38 00 90 FD | 	jmp	#LR__0743
085e0                 | LR__0740
085e0     13 13 02 F6 | 	mov	arg01, local01
085e4     00 EB BF FD | 	call	#_deleteline
085e8                 | '       deleteline(alinemajor)  
085e8                 | '       if alinemajor>lastline then add_line_at_end(alinemajor)  else insertline(alinemajor)   ' TODO: that's not optimal    
085e8     4A 00 00 FF 
085ec     8C E4 05 F1 | 	add	objptr, ##38028
085f0     F2 14 02 FB | 	rdlong	arg02, objptr
085f4     4A 00 00 FF 
085f8     8C E4 85 F1 | 	sub	objptr, ##38028
085fc     0A 27 1A F2 | 	cmp	local01, arg02 wcz
08600     0C 00 90 ED |  if_be	jmp	#LR__0741
08604     13 13 02 F6 | 	mov	arg01, local01
08608     0C F1 BF FD | 	call	#_add_line_at_end
0860c     08 00 90 FD | 	jmp	#LR__0742
08610                 | LR__0741
08610     13 13 02 F6 | 	mov	arg01, local01
08614     E4 EE BF FD | 	call	#_insertline
08618                 | LR__0742
08618                 | LR__0743
08618                 | LR__0744
08618                 | LR__0745
08618                 | ' return err
08618     15 FB 01 F6 | 	mov	result1, local03
0861c     A7 F0 03 F6 | 	mov	ptra, fp
08620     B2 00 A0 FD | 	call	#popregs_
08624                 | _compile_ret
08624     2D 00 64 FD | 	ret
08628                 | 
08628                 | ' 
08628                 | ' ' ------------------ compile the line that is assigning to a variable and save it if linenum>0, called from the interpreter 
08628                 | ' 
08628                 | ' function compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  as ulong
08628                 | _compile_assign
08628     03 4A 05 F6 | 	mov	COUNT_, #3
0862c     A8 00 A0 FD | 	call	#pushregs_
08630     09 27 02 F6 | 	mov	local01, arg01
08634     0B 29 02 F6 | 	mov	local02, arg03
08638     47 00 00 FF 
0863c     7C E4 05 F1 | 	add	objptr, ##36476
08640     F2 26 62 FC | 	wrlong	local01, objptr
08644     04 E4 05 F1 | 	add	objptr, #4
08648     F2 14 62 FC | 	wrlong	arg02, objptr
0864c     47 00 00 FF 
08650     80 E4 85 F1 | 	sub	objptr, ##36480
08654     14 13 02 F6 | 	mov	arg01, local02
08658     01 12 06 F1 | 	add	arg01, #1
0865c     54 FB BF FD | 	call	#_compile_immediate_assign
08660     FD 2A 02 F6 | 	mov	local03, result1
08664                 | ' 
08664                 | ' ucompiledline(0)=alinemajor
08664                 | ' ucompiledline(1)=alineminor
08664                 | ' 
08664                 | ' err=compile_immediate_assign(cont+1) 
08664                 | ' if alinemajor>0 then
08664     01 26 16 F2 | 	cmp	local01, #1 wc
08668     6C 00 90 CD |  if_b	jmp	#LR__0755
0866c                 | '   if cont=3 orelse cont=2 then 
0866c     03 28 0E F2 | 	cmp	local02, #3 wz
08670     02 28 0E 52 |  if_ne	cmp	local02, #2 wz
08674     60 00 90 5D |  if_ne	jmp	#LR__0754
08678                 | '     if alinemajor >lastline then 
08678     4A 00 00 FF 
0867c     8C E4 05 F1 | 	add	objptr, ##38028
08680     F2 14 02 FB | 	rdlong	arg02, objptr
08684     4A 00 00 FF 
08688     8C E4 85 F1 | 	sub	objptr, ##38028
0868c     0A 27 1A F2 | 	cmp	local01, arg02 wcz
08690     0C 00 90 ED |  if_be	jmp	#LR__0750
08694     13 13 02 F6 | 	mov	arg01, local01
08698     7C F0 BF FD | 	call	#_add_line_at_end
0869c     38 00 90 FD | 	jmp	#LR__0753
086a0                 | LR__0750
086a0     13 13 02 F6 | 	mov	arg01, local01
086a4     40 EA BF FD | 	call	#_deleteline
086a8                 | '       deleteline(alinemajor)  
086a8                 | '       if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
086a8     4A 00 00 FF 
086ac     8C E4 05 F1 | 	add	objptr, ##38028
086b0     F2 14 02 FB | 	rdlong	arg02, objptr
086b4     4A 00 00 FF 
086b8     8C E4 85 F1 | 	sub	objptr, ##38028
086bc     0A 27 1A F2 | 	cmp	local01, arg02 wcz
086c0     0C 00 90 ED |  if_be	jmp	#LR__0751
086c4     13 13 02 F6 | 	mov	arg01, local01
086c8     4C F0 BF FD | 	call	#_add_line_at_end
086cc     08 00 90 FD | 	jmp	#LR__0752
086d0                 | LR__0751
086d0     13 13 02 F6 | 	mov	arg01, local01
086d4     24 EE BF FD | 	call	#_insertline
086d8                 | LR__0752
086d8                 | LR__0753
086d8                 | LR__0754
086d8                 | LR__0755
086d8                 | ' return err
086d8     15 FB 01 F6 | 	mov	result1, local03
086dc     A7 F0 03 F6 | 	mov	ptra, fp
086e0     B2 00 A0 FD | 	call	#popregs_
086e4                 | _compile_assign_ret
086e4     2D 00 64 FD | 	ret
086e8                 | 
086e8                 | ' 
086e8                 | ' '----- A function that prepares 2 parameters for a 2-parameter command
086e8                 | ' 
086e8                 | ' function compile_fun_2p() as ulong
086e8                 | _compile_fun_2p
086e8     01 4A 05 F6 | 	mov	COUNT_, #1
086ec     A8 00 A0 FD | 	call	#pushregs_
086f0     30 37 B0 FD | 	call	#_expr
086f4     FD 26 02 F6 | 	mov	local01, result1
086f8                 | ' err=expr() : if err>0 then return err
086f8     01 26 16 F2 | 	cmp	local01, #1 wc
086fc     13 FB 01 36 |  if_ae	mov	result1, local01
08700     60 00 90 3D |  if_ae	jmp	#LR__0760
08704                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
08704     37 00 00 FF 
08708     44 E4 05 F1 | 	add	objptr, ##28228
0870c     F2 26 02 FB | 	rdlong	local01, objptr
08710     03 26 66 F0 | 	shl	local01, #3
08714     02 00 00 FF 
08718     38 E4 85 F1 | 	sub	objptr, ##1080
0871c     F2 26 02 F1 | 	add	local01, objptr
08720     04 26 06 F1 | 	add	local01, #4
08724     13 27 02 FB | 	rdlong	local01, local01
08728     11 26 0E F2 | 	cmp	local01, #17 wz
0872c     35 00 00 FF 
08730     0C E4 85 F1 | 	sub	objptr, ##27148
08734     15 FA 05 56 |  if_ne	mov	result1, #21
08738     28 00 90 5D |  if_ne	jmp	#LR__0760
0873c     37 00 00 FF 
08740     44 E4 05 F1 | 	add	objptr, ##28228
08744     F2 26 02 FB | 	rdlong	local01, objptr
08748     01 26 06 F1 | 	add	local01, #1
0874c     F2 26 62 FC | 	wrlong	local01, objptr
08750     37 00 00 FF 
08754     44 E4 85 F1 | 	sub	objptr, ##28228
08758     C8 36 B0 FD | 	call	#_expr
0875c                 | ' err=expr() : if err>0 then return err
0875c     01 FA 15 F2 | 	cmp	result1, #1 wc
08760                 | ' return 0
08760     00 FA 05 C6 |  if_b	mov	result1, #0
08764                 | LR__0760
08764     A7 F0 03 F6 | 	mov	ptra, fp
08768     B2 00 A0 FD | 	call	#popregs_
0876c                 | _compile_fun_2p_ret
0876c     2D 00 64 FD | 	ret
08770                 | 
08770                 | ' 
08770                 | ' '----- A function that prepares 3 parameters for a 3-parameter command
08770                 | ' 
08770                 | ' function compile_fun_3p() as ulong
08770                 | _compile_fun_3p
08770     01 4A 05 F6 | 	mov	COUNT_, #1
08774     A8 00 A0 FD | 	call	#pushregs_
08778     A8 36 B0 FD | 	call	#_expr
0877c     FD 26 02 F6 | 	mov	local01, result1
08780                 | ' err=expr() : if err>0 then return err
08780     01 26 16 F2 | 	cmp	local01, #1 wc
08784     13 FB 01 36 |  if_ae	mov	result1, local01
08788     C8 00 90 3D |  if_ae	jmp	#LR__0770
0878c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
0878c     37 00 00 FF 
08790     44 E4 05 F1 | 	add	objptr, ##28228
08794     F2 26 02 FB | 	rdlong	local01, objptr
08798     03 26 66 F0 | 	shl	local01, #3
0879c     02 00 00 FF 
087a0     38 E4 85 F1 | 	sub	objptr, ##1080
087a4     F2 26 02 F1 | 	add	local01, objptr
087a8     04 26 06 F1 | 	add	local01, #4
087ac     13 27 02 FB | 	rdlong	local01, local01
087b0     11 26 0E F2 | 	cmp	local01, #17 wz
087b4     35 00 00 FF 
087b8     0C E4 85 F1 | 	sub	objptr, ##27148
087bc     15 FA 05 56 |  if_ne	mov	result1, #21
087c0     90 00 90 5D |  if_ne	jmp	#LR__0770
087c4     37 00 00 FF 
087c8     44 E4 05 F1 | 	add	objptr, ##28228
087cc     F2 26 02 FB | 	rdlong	local01, objptr
087d0     01 26 06 F1 | 	add	local01, #1
087d4     F2 26 62 FC | 	wrlong	local01, objptr
087d8     37 00 00 FF 
087dc     44 E4 85 F1 | 	sub	objptr, ##28228
087e0     40 36 B0 FD | 	call	#_expr
087e4     FD 26 02 F6 | 	mov	local01, result1
087e8                 | ' err=expr() : if err>0 then return err
087e8     01 26 16 F2 | 	cmp	local01, #1 wc
087ec     13 FB 01 36 |  if_ae	mov	result1, local01
087f0     60 00 90 3D |  if_ae	jmp	#LR__0770
087f4                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
087f4     37 00 00 FF 
087f8     44 E4 05 F1 | 	add	objptr, ##28228
087fc     F2 26 02 FB | 	rdlong	local01, objptr
08800     03 26 66 F0 | 	shl	local01, #3
08804     02 00 00 FF 
08808     38 E4 85 F1 | 	sub	objptr, ##1080
0880c     F2 26 02 F1 | 	add	local01, objptr
08810     04 26 06 F1 | 	add	local01, #4
08814     13 27 02 FB | 	rdlong	local01, local01
08818     11 26 0E F2 | 	cmp	local01, #17 wz
0881c     35 00 00 FF 
08820     0C E4 85 F1 | 	sub	objptr, ##27148
08824     15 FA 05 56 |  if_ne	mov	result1, #21
08828     28 00 90 5D |  if_ne	jmp	#LR__0770
0882c     37 00 00 FF 
08830     44 E4 05 F1 | 	add	objptr, ##28228
08834     F2 26 02 FB | 	rdlong	local01, objptr
08838     01 26 06 F1 | 	add	local01, #1
0883c     F2 26 62 FC | 	wrlong	local01, objptr
08840     37 00 00 FF 
08844     44 E4 85 F1 | 	sub	objptr, ##28228
08848     D8 35 B0 FD | 	call	#_expr
0884c                 | ' err=expr() : if err>0 then return err
0884c     01 FA 15 F2 | 	cmp	result1, #1 wc
08850                 | ' return 0
08850     00 FA 05 C6 |  if_b	mov	result1, #0
08854                 | LR__0770
08854     A7 F0 03 F6 | 	mov	ptra, fp
08858     B2 00 A0 FD | 	call	#popregs_
0885c                 | _compile_fun_3p_ret
0885c     2D 00 64 FD | 	ret
08860                 | 
08860                 | ' 
08860                 | ' '----- A function that prepares 4 parameters for a 4-parameter command
08860                 | ' 
08860                 | ' function compile_fun_4p() as ulong
08860                 | _compile_fun_4p
08860     01 4A 05 F6 | 	mov	COUNT_, #1
08864     A8 00 A0 FD | 	call	#pushregs_
08868     B8 35 B0 FD | 	call	#_expr
0886c     FD 26 02 F6 | 	mov	local01, result1
08870                 | ' err=expr() : if err>0 then return err
08870     01 26 16 F2 | 	cmp	local01, #1 wc
08874     13 FB 01 36 |  if_ae	mov	result1, local01
08878     30 01 90 3D |  if_ae	jmp	#LR__0780
0887c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
0887c     37 00 00 FF 
08880     44 E4 05 F1 | 	add	objptr, ##28228
08884     F2 26 02 FB | 	rdlong	local01, objptr
08888     03 26 66 F0 | 	shl	local01, #3
0888c     02 00 00 FF 
08890     38 E4 85 F1 | 	sub	objptr, ##1080
08894     F2 26 02 F1 | 	add	local01, objptr
08898     04 26 06 F1 | 	add	local01, #4
0889c     13 27 02 FB | 	rdlong	local01, local01
088a0     11 26 0E F2 | 	cmp	local01, #17 wz
088a4     35 00 00 FF 
088a8     0C E4 85 F1 | 	sub	objptr, ##27148
088ac     15 FA 05 56 |  if_ne	mov	result1, #21
088b0     F8 00 90 5D |  if_ne	jmp	#LR__0780
088b4     37 00 00 FF 
088b8     44 E4 05 F1 | 	add	objptr, ##28228
088bc     F2 26 02 FB | 	rdlong	local01, objptr
088c0     01 26 06 F1 | 	add	local01, #1
088c4     F2 26 62 FC | 	wrlong	local01, objptr
088c8     37 00 00 FF 
088cc     44 E4 85 F1 | 	sub	objptr, ##28228
088d0     50 35 B0 FD | 	call	#_expr
088d4     FD 26 02 F6 | 	mov	local01, result1
088d8                 | ' err=expr() : if err>0 then return err
088d8     01 26 16 F2 | 	cmp	local01, #1 wc
088dc     13 FB 01 36 |  if_ae	mov	result1, local01
088e0     C8 00 90 3D |  if_ae	jmp	#LR__0780
088e4                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
088e4     37 00 00 FF 
088e8     44 E4 05 F1 | 	add	objptr, ##28228
088ec     F2 26 02 FB | 	rdlong	local01, objptr
088f0     03 26 66 F0 | 	shl	local01, #3
088f4     02 00 00 FF 
088f8     38 E4 85 F1 | 	sub	objptr, ##1080
088fc     F2 26 02 F1 | 	add	local01, objptr
08900     04 26 06 F1 | 	add	local01, #4
08904     13 27 02 FB | 	rdlong	local01, local01
08908     11 26 0E F2 | 	cmp	local01, #17 wz
0890c     35 00 00 FF 
08910     0C E4 85 F1 | 	sub	objptr, ##27148
08914     15 FA 05 56 |  if_ne	mov	result1, #21
08918     90 00 90 5D |  if_ne	jmp	#LR__0780
0891c     37 00 00 FF 
08920     44 E4 05 F1 | 	add	objptr, ##28228
08924     F2 26 02 FB | 	rdlong	local01, objptr
08928     01 26 06 F1 | 	add	local01, #1
0892c     F2 26 62 FC | 	wrlong	local01, objptr
08930     37 00 00 FF 
08934     44 E4 85 F1 | 	sub	objptr, ##28228
08938     E8 34 B0 FD | 	call	#_expr
0893c     FD 26 02 F6 | 	mov	local01, result1
08940                 | ' err=expr() : if err>0 then return err
08940     01 26 16 F2 | 	cmp	local01, #1 wc
08944     13 FB 01 36 |  if_ae	mov	result1, local01
08948     60 00 90 3D |  if_ae	jmp	#LR__0780
0894c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1  
0894c     37 00 00 FF 
08950     44 E4 05 F1 | 	add	objptr, ##28228
08954     F2 26 02 FB | 	rdlong	local01, objptr
08958     03 26 66 F0 | 	shl	local01, #3
0895c     02 00 00 FF 
08960     38 E4 85 F1 | 	sub	objptr, ##1080
08964     F2 26 02 F1 | 	add	local01, objptr
08968     04 26 06 F1 | 	add	local01, #4
0896c     13 27 02 FB | 	rdlong	local01, local01
08970     11 26 0E F2 | 	cmp	local01, #17 wz
08974     35 00 00 FF 
08978     0C E4 85 F1 | 	sub	objptr, ##27148
0897c     15 FA 05 56 |  if_ne	mov	result1, #21
08980     28 00 90 5D |  if_ne	jmp	#LR__0780
08984     37 00 00 FF 
08988     44 E4 05 F1 | 	add	objptr, ##28228
0898c     F2 26 02 FB | 	rdlong	local01, objptr
08990     01 26 06 F1 | 	add	local01, #1
08994     F2 26 62 FC | 	wrlong	local01, objptr
08998     37 00 00 FF 
0899c     44 E4 85 F1 | 	sub	objptr, ##28228
089a0     80 34 B0 FD | 	call	#_expr
089a4                 | ' err=expr() : if err>0 then return err
089a4     01 FA 15 F2 | 	cmp	result1, #1 wc
089a8                 | ' return 0
089a8     00 FA 05 C6 |  if_b	mov	result1, #0
089ac                 | LR__0780
089ac     A7 F0 03 F6 | 	mov	ptra, fp
089b0     B2 00 A0 FD | 	call	#popregs_
089b4                 | _compile_fun_4p_ret
089b4     2D 00 64 FD | 	ret
089b8                 | 
089b8                 | ' 
089b8                 | ' '----  Compile a command that can have variable number of parameters. Return num of params and error code
089b8                 | ' 
089b8                 | ' function compile_fun_varp() as ulong,ulong 
089b8                 | _compile_fun_varp
089b8     03 4A 05 F6 | 	mov	COUNT_, #3
089bc     A8 00 A0 FD | 	call	#pushregs_
089c0     00 26 06 F6 | 	mov	local01, #0
089c4                 | ' 
089c4                 | ' i=0 : err=0
089c4                 | ' if lparts(ct).token<>token_end then
089c4     37 00 00 FF 
089c8     44 E4 05 F1 | 	add	objptr, ##28228
089cc     F2 28 02 FB | 	rdlong	local02, objptr
089d0     03 28 66 F0 | 	shl	local02, #3
089d4     02 00 00 FF 
089d8     38 E4 85 F1 | 	sub	objptr, ##1080
089dc     F2 28 02 F1 | 	add	local02, objptr
089e0     04 28 06 F1 | 	add	local02, #4
089e4     14 29 02 FB | 	rdlong	local02, local02
089e8     FE 29 0E F2 | 	cmp	local02, #510 wz
089ec     35 00 00 FF 
089f0     0C E4 85 F1 | 	sub	objptr, ##27148
089f4     88 00 90 AD |  if_e	jmp	#LR__0791
089f8                 | '   do
089f8                 | LR__0790
089f8     28 34 B0 FD | 	call	#_expr
089fc     01 26 06 F1 | 	add	local01, #1
08a00                 | '     expr()
08a00                 | '     i+=1
08a00                 | '     if lparts(ct).token=token_comma then ct+=1
08a00     37 00 00 FF 
08a04     44 E4 05 F1 | 	add	objptr, ##28228
08a08     F2 28 02 FB | 	rdlong	local02, objptr
08a0c     03 28 66 F0 | 	shl	local02, #3
08a10     02 00 00 FF 
08a14     38 E4 85 F1 | 	sub	objptr, ##1080
08a18     F2 28 02 F1 | 	add	local02, objptr
08a1c     04 28 06 F1 | 	add	local02, #4
08a20     14 29 02 FB | 	rdlong	local02, local02
08a24     11 28 0E F2 | 	cmp	local02, #17 wz
08a28     35 00 00 FF 
08a2c     0C E4 85 F1 | 	sub	objptr, ##27148
08a30     37 00 00 AF 
08a34     44 E4 05 A1 |  if_e	add	objptr, ##28228
08a38     F2 2A 02 AB |  if_e	rdlong	local03, objptr
08a3c     01 2A 06 A1 |  if_e	add	local03, #1
08a40     F2 2A 62 AC |  if_e	wrlong	local03, objptr
08a44     37 00 00 AF 
08a48     44 E4 85 A1 |  if_e	sub	objptr, ##28228
08a4c                 | '     if lparts(ct).token=token_end then exit loop
08a4c     37 00 00 FF 
08a50     44 E4 05 F1 | 	add	objptr, ##28228
08a54     F2 28 02 FB | 	rdlong	local02, objptr
08a58     03 28 66 F0 | 	shl	local02, #3
08a5c     02 00 00 FF 
08a60     38 E4 85 F1 | 	sub	objptr, ##1080
08a64     F2 28 02 F1 | 	add	local02, objptr
08a68     04 28 06 F1 | 	add	local02, #4
08a6c     14 29 02 FB | 	rdlong	local02, local02
08a70     FE 29 0E F2 | 	cmp	local02, #510 wz
08a74     35 00 00 FF 
08a78     0C E4 85 F1 | 	sub	objptr, ##27148
08a7c     78 FF 9F 5D |  if_ne	jmp	#LR__0790
08a80                 | LR__0791
08a80                 | ' return i,err
08a80     13 FB 01 F6 | 	mov	result1, local01
08a84     00 FC 05 F6 | 	mov	result2, #0
08a88     A7 F0 03 F6 | 	mov	ptra, fp
08a8c     B2 00 A0 FD | 	call	#popregs_
08a90                 | _compile_fun_varp_ret
08a90     2D 00 64 FD | 	ret
08a94                 | 
08a94                 | ' 
08a94                 | ' '----  Compile read. The same as compile_input() except printing a prompt
08a94                 | ' 
08a94                 | ' function compile_read() as ulong,ulong 
08a94                 | _compile_read
08a94     04 4A 05 F6 | 	mov	COUNT_, #4
08a98     A8 00 A0 FD | 	call	#pushregs_
08a9c     00 26 06 F6 | 	mov	local01, #0
08aa0                 | ' 
08aa0                 | ' i=0 : err=0
08aa0                 | ' if lparts(ct).token<>token_end then
08aa0     37 00 00 FF 
08aa4     44 E4 05 F1 | 	add	objptr, ##28228
08aa8     F2 28 02 FB | 	rdlong	local02, objptr
08aac     03 28 66 F0 | 	shl	local02, #3
08ab0     02 00 00 FF 
08ab4     38 E4 85 F1 | 	sub	objptr, ##1080
08ab8     F2 28 02 F1 | 	add	local02, objptr
08abc     04 28 06 F1 | 	add	local02, #4
08ac0     14 29 02 FB | 	rdlong	local02, local02
08ac4     FE 29 0E F2 | 	cmp	local02, #510 wz
08ac8     35 00 00 FF 
08acc     0C E4 85 F1 | 	sub	objptr, ##27148
08ad0     98 00 90 AD |  if_e	jmp	#LR__0801
08ad4                 | '   do
08ad4                 | LR__0800
08ad4     B8 2F B0 FD | 	call	#_getaddr
08ad8     FD 2A 02 F6 | 	mov	local03, result1
08adc     37 00 00 FF 
08ae0     44 E4 05 F1 | 	add	objptr, ##28228
08ae4     F2 28 02 FB | 	rdlong	local02, objptr
08ae8     01 28 06 F1 | 	add	local02, #1
08aec     F2 28 62 FC | 	wrlong	local02, objptr
08af0     01 26 06 F1 | 	add	local01, #1
08af4                 | '     err=getaddr() :ct+=1
08af4                 | '     i+=1 
08af4                 | '     if lparts(ct).token=token_comma then ct+=1 
08af4     03 28 66 F0 | 	shl	local02, #3
08af8     02 00 00 FF 
08afc     38 E4 85 F1 | 	sub	objptr, ##1080
08b00     F2 28 02 F1 | 	add	local02, objptr
08b04     04 28 06 F1 | 	add	local02, #4
08b08     14 29 02 FB | 	rdlong	local02, local02
08b0c     11 28 0E F2 | 	cmp	local02, #17 wz
08b10     35 00 00 FF 
08b14     0C E4 85 F1 | 	sub	objptr, ##27148
08b18     37 00 00 AF 
08b1c     44 E4 05 A1 |  if_e	add	objptr, ##28228
08b20     F2 2C 02 AB |  if_e	rdlong	local04, objptr
08b24     01 2C 06 A1 |  if_e	add	local04, #1
08b28     F2 2C 62 AC |  if_e	wrlong	local04, objptr
08b2c     37 00 00 AF 
08b30     44 E4 85 A1 |  if_e	sub	objptr, ##28228
08b34                 | '     if lparts(ct).token=token_end then exit loop
08b34     37 00 00 FF 
08b38     44 E4 05 F1 | 	add	objptr, ##28228
08b3c     F2 28 02 FB | 	rdlong	local02, objptr
08b40     03 28 66 F0 | 	shl	local02, #3
08b44     02 00 00 FF 
08b48     38 E4 85 F1 | 	sub	objptr, ##1080
08b4c     F2 28 02 F1 | 	add	local02, objptr
08b50     04 28 06 F1 | 	add	local02, #4
08b54     14 29 02 FB | 	rdlong	local02, local02
08b58     FE 29 0E F2 | 	cmp	local02, #510 wz
08b5c     35 00 00 FF 
08b60     0C E4 85 F1 | 	sub	objptr, ##27148
08b64     08 00 90 AD |  if_e	jmp	#LR__0802
08b68     68 FF 9F FD | 	jmp	#LR__0800
08b6c                 | LR__0801
08b6c     36 2A 06 F6 | 	mov	local03, #54
08b70                 | LR__0802
08b70                 | ' return i,err
08b70     13 FB 01 F6 | 	mov	result1, local01
08b74     15 FD 01 F6 | 	mov	result2, local03
08b78     A7 F0 03 F6 | 	mov	ptra, fp
08b7c     B2 00 A0 FD | 	call	#popregs_
08b80                 | _compile_read_ret
08b80     2D 00 64 FD | 	ret
08b84                 | 
08b84                 | ' 
08b84                 | ' '----  Compile input. The same as compile_varp() except these has to be variables, and not expressions, and also we need getaddr and not getvar
08b84                 | ' 
08b84                 | ' function compile_input() as ulong,ulong 
08b84                 | _compile_input
08b84     0F 4A 05 F6 | 	mov	COUNT_, #15
08b88     A8 00 A0 FD | 	call	#pushregs_
08b8c                 | ' 
08b8c                 | ' if lparts(ct).token=token_string then
08b8c     37 00 00 FF 
08b90     44 E4 05 F1 | 	add	objptr, ##28228
08b94     F2 16 02 FB | 	rdlong	arg03, objptr
08b98     03 16 66 F0 | 	shl	arg03, #3
08b9c     02 00 00 FF 
08ba0     38 E4 85 F1 | 	sub	objptr, ##1080
08ba4     F2 16 02 F1 | 	add	arg03, objptr
08ba8     04 16 06 F1 | 	add	arg03, #4
08bac     0B FD 01 FB | 	rdlong	result2, arg03
08bb0     01 00 00 FF 
08bb4     03 FC 0D F2 | 	cmp	result2, ##515 wz
08bb8     35 00 00 FF 
08bbc     0C E4 85 F1 | 	sub	objptr, ##27148
08bc0     38 06 90 5D |  if_ne	jmp	#LR__0817
08bc4     37 00 00 FF 
08bc8     44 E4 05 F1 | 	add	objptr, ##28228
08bcc     F2 14 02 FB | 	rdlong	arg02, objptr
08bd0     03 14 66 F0 | 	shl	arg02, #3
08bd4     02 00 00 FF 
08bd8     38 E4 85 F1 | 	sub	objptr, ##1080
08bdc     F2 14 02 F1 | 	add	arg02, objptr
08be0     0A 13 02 FB | 	rdlong	arg01, arg02
08be4     35 00 00 FF 
08be8     0C E4 85 F1 | 	sub	objptr, ##27148
08bec     09 2D 02 F6 | 	mov	local04, arg01
08bf0     97 06 48 FB | 	callpa	#(@LR__0811-@LR__0810)>>2,fcache_load_ptr_
08bf4                 | LR__0810
08bf4     16 FB C9 FA | 	rdbyte	result1, local04 wz
08bf8     01 2C 06 51 |  if_ne	add	local04, #1
08bfc     F4 FF 9F 5D |  if_ne	jmp	#LR__0810
08c00                 | LR__0811
08c00     09 2D 82 F1 | 	sub	local04, arg01
08c04     16 FB 01 F6 | 	mov	result1, local04
08c08     52 00 00 FF 
08c0c     F0 E4 05 F1 | 	add	objptr, ##42224
08c10     F2 FA 61 FC | 	wrlong	result1, objptr
08c14     58 E4 85 F1 | 	sub	objptr, #88
08c18     F2 12 02 FB | 	rdlong	arg01, objptr
08c1c     FD 12 82 F1 | 	sub	arg01, result1
08c20     04 12 86 F1 | 	sub	arg01, #4
08c24     03 12 26 F5 | 	andn	arg01, #3
08c28     F2 12 62 FC | 	wrlong	arg01, objptr
08c2c     58 E4 05 F1 | 	add	objptr, #88
08c30     F2 14 02 FB | 	rdlong	arg02, objptr
08c34     52 00 00 FF 
08c38     F0 E4 85 F1 | 	sub	objptr, ##42224
08c3c     94 A9 B1 FD | 	call	#_pslpoke
08c40                 | '   pslpoke memtop,l
08c40                 | '   for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
08c40     01 2E 06 F6 | 	mov	local05, #1
08c44     52 00 00 FF 
08c48     F0 E4 05 F1 | 	add	objptr, ##42224
08c4c     F2 30 02 FB | 	rdlong	local06, objptr
08c50     52 00 00 FF 
08c54     F0 E4 85 F1 | 	sub	objptr, ##42224
08c58     01 30 06 F1 | 	add	local06, #1
08c5c                 | LR__0812
08c5c     18 2F 52 F2 | 	cmps	local05, local06 wc
08c60     5C 00 90 3D |  if_ae	jmp	#LR__0813
08c64     52 00 00 FF 
08c68     98 E4 05 F1 | 	add	objptr, ##42136
08c6c     F2 32 02 FB | 	rdlong	local07, objptr
08c70     03 32 06 F1 | 	add	local07, #3
08c74     17 33 02 F1 | 	add	local07, local05
08c78     1B 00 00 FF 
08c7c     54 E4 85 F1 | 	sub	objptr, ##13908
08c80     F2 14 02 FB | 	rdlong	arg02, objptr
08c84     03 14 66 F0 | 	shl	arg02, #3
08c88     02 00 00 FF 
08c8c     38 E4 85 F1 | 	sub	objptr, ##1080
08c90     F2 14 02 F1 | 	add	arg02, objptr
08c94     0A 13 02 FB | 	rdlong	arg01, arg02
08c98     17 15 02 F6 | 	mov	arg02, local05
08c9c     01 16 06 F6 | 	mov	arg03, #1
08ca0     35 00 00 FF 
08ca4     0C E4 85 F1 | 	sub	objptr, ##27148
08ca8     38 03 B2 FD | 	call	#__system__Mid_S
08cac     FD 14 C2 FA | 	rdbyte	arg02, result1
08cb0     19 13 02 F6 | 	mov	arg01, local07
08cb4     AC A9 B1 FD | 	call	#_pspoke
08cb8     01 2E 06 F1 | 	add	local05, #1
08cbc     9C FF 9F FD | 	jmp	#LR__0812
08cc0                 | LR__0813
08cc0     52 00 00 FF 
08cc4     98 E4 05 F1 | 	add	objptr, ##42136
08cc8     F2 26 02 FB | 	rdlong	local01, objptr
08ccc     2B 2A 06 F6 | 	mov	local03, #43
08cd0     13 35 02 F6 | 	mov	local08, local01
08cd4     14 33 02 F6 | 	mov	local07, local02
08cd8     15 37 02 F6 | 	mov	local09, local03
08cdc     08 00 00 FF 
08ce0     1C E4 85 F1 | 	sub	objptr, ##4124
08ce4     F2 30 02 FB | 	rdlong	local06, objptr
08ce8     18 2F 02 F6 | 	mov	local05, local06
08cec     01 2E 66 F0 | 	shl	local05, #1
08cf0     18 2F 02 F1 | 	add	local05, local06
08cf4     02 2E 66 F0 | 	shl	local05, #2
08cf8     03 00 00 FF 
08cfc     00 E4 85 F1 | 	sub	objptr, ##1536
08d00     F2 2E 02 F1 | 	add	local05, objptr
08d04     17 35 62 FC | 	wrlong	local08, local05
08d08     03 00 00 FF 
08d0c     00 E4 05 F1 | 	add	objptr, ##1536
08d10     F2 34 02 FB | 	rdlong	local08, objptr
08d14     1A 31 02 F6 | 	mov	local06, local08
08d18     01 30 66 F0 | 	shl	local06, #1
08d1c     1A 31 02 F1 | 	add	local06, local08
08d20     02 30 66 F0 | 	shl	local06, #2
08d24     03 00 00 FF 
08d28     00 E4 85 F1 | 	sub	objptr, ##1536
08d2c     F2 30 02 F1 | 	add	local06, objptr
08d30     04 30 06 F1 | 	add	local06, #4
08d34     18 33 62 FC | 	wrlong	local07, local06
08d38     03 00 00 FF 
08d3c     00 E4 05 F1 | 	add	objptr, ##1536
08d40     F2 34 02 FB | 	rdlong	local08, objptr
08d44     1A 33 02 F6 | 	mov	local07, local08
08d48     01 32 66 F0 | 	shl	local07, #1
08d4c     1A 33 02 F1 | 	add	local07, local08
08d50     02 32 66 F0 | 	shl	local07, #2
08d54     03 00 00 FF 
08d58     00 E4 85 F1 | 	sub	objptr, ##1536
08d5c     F2 32 02 F1 | 	add	local07, objptr
08d60     08 32 06 F1 | 	add	local07, #8
08d64     19 37 62 FC | 	wrlong	local09, local07
08d68     03 00 00 FF 
08d6c     00 E4 05 F1 | 	add	objptr, ##1536
08d70     F2 34 02 FB | 	rdlong	local08, objptr
08d74     01 34 06 F1 | 	add	local08, #1
08d78     F2 34 62 FC | 	wrlong	local08, objptr
08d7c     13 00 00 FF 
08d80     38 E4 85 F1 | 	sub	objptr, ##9784
08d84     F2 34 02 FB | 	rdlong	local08, objptr
08d88     01 34 06 F1 | 	add	local08, #1
08d8c     F2 34 62 FC | 	wrlong	local08, objptr
08d90                 | '   t1.result.uresult=memtop
08d90                 | '   t1.result_type=result_string2  
08d90                 | '   compiledline(lineptr)=t1: lineptr+=1 :ct+=1
08d90                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
08d90     03 34 66 F0 | 	shl	local08, #3
08d94     02 00 00 FF 
08d98     38 E4 85 F1 | 	sub	objptr, ##1080
08d9c     F2 34 02 F1 | 	add	local08, objptr
08da0     04 34 06 F1 | 	add	local08, #4
08da4     1A 35 02 FB | 	rdlong	local08, local08
08da8     11 34 0E F2 | 	cmp	local08, #17 wz
08dac     35 00 00 FF 
08db0     0C E4 85 F1 | 	sub	objptr, ##27148
08db4     60 01 90 5D |  if_ne	jmp	#LR__0814
08db8     21 2A 06 F6 | 	mov	local03, #33
08dbc     13 35 02 F6 | 	mov	local08, local01
08dc0     14 33 02 F6 | 	mov	local07, local02
08dc4     15 39 02 F6 | 	mov	local10, local03
08dc8     4A 00 00 FF 
08dcc     7C E4 05 F1 | 	add	objptr, ##38012
08dd0     F2 3A 02 FB | 	rdlong	local11, objptr
08dd4     1D 3D 02 F6 | 	mov	local12, local11
08dd8     01 3C 66 F0 | 	shl	local12, #1
08ddc     1D 3D 02 F1 | 	add	local12, local11
08de0     02 3C 66 F0 | 	shl	local12, #2
08de4     03 00 00 FF 
08de8     00 E4 85 F1 | 	sub	objptr, ##1536
08dec     F2 3C 02 F1 | 	add	local12, objptr
08df0     1E 35 62 FC | 	wrlong	local08, local12
08df4     03 00 00 FF 
08df8     00 E4 05 F1 | 	add	objptr, ##1536
08dfc     F2 3E 02 FB | 	rdlong	local13, objptr
08e00     1F 35 02 F6 | 	mov	local08, local13
08e04     01 34 66 F0 | 	shl	local08, #1
08e08     1F 35 02 F1 | 	add	local08, local13
08e0c     02 34 66 F0 | 	shl	local08, #2
08e10     03 00 00 FF 
08e14     00 E4 85 F1 | 	sub	objptr, ##1536
08e18     F2 34 02 F1 | 	add	local08, objptr
08e1c     04 34 06 F1 | 	add	local08, #4
08e20     1A 33 62 FC | 	wrlong	local07, local08
08e24     03 00 00 FF 
08e28     00 E4 05 F1 | 	add	objptr, ##1536
08e2c     F2 34 02 FB | 	rdlong	local08, objptr
08e30     1A 41 02 F6 | 	mov	local14, local08
08e34     01 40 66 F0 | 	shl	local14, #1
08e38     1A 41 02 F1 | 	add	local14, local08
08e3c     02 40 66 F0 | 	shl	local14, #2
08e40     03 00 00 FF 
08e44     00 E4 85 F1 | 	sub	objptr, ##1536
08e48     F2 40 02 F1 | 	add	local14, objptr
08e4c     08 40 06 F1 | 	add	local14, #8
08e50     20 39 62 FC | 	wrlong	local10, local14
08e54     03 00 00 FF 
08e58     00 E4 05 F1 | 	add	objptr, ##1536
08e5c     F2 34 02 FB | 	rdlong	local08, objptr
08e60     01 34 06 F1 | 	add	local08, #1
08e64     F2 34 62 FC | 	wrlong	local08, objptr
08e68     44 2A 06 F6 | 	mov	local03, #68
08e6c     13 35 02 F6 | 	mov	local08, local01
08e70     14 33 02 F6 | 	mov	local07, local02
08e74     15 39 02 F6 | 	mov	local10, local03
08e78     F2 40 02 FB | 	rdlong	local14, objptr
08e7c     20 3F 02 F6 | 	mov	local13, local14
08e80     01 3E 66 F0 | 	shl	local13, #1
08e84     20 3F 02 F1 | 	add	local13, local14
08e88     02 3E 66 F0 | 	shl	local13, #2
08e8c     03 00 00 FF 
08e90     00 E4 85 F1 | 	sub	objptr, ##1536
08e94     F2 3E 02 F1 | 	add	local13, objptr
08e98     1F 35 62 FC | 	wrlong	local08, local13
08e9c     03 00 00 FF 
08ea0     00 E4 05 F1 | 	add	objptr, ##1536
08ea4     F2 40 02 FB | 	rdlong	local14, objptr
08ea8     20 3F 02 F6 | 	mov	local13, local14
08eac     01 3E 66 F0 | 	shl	local13, #1
08eb0     20 3F 02 F1 | 	add	local13, local14
08eb4     02 3E 66 F0 | 	shl	local13, #2
08eb8     03 00 00 FF 
08ebc     00 E4 85 F1 | 	sub	objptr, ##1536
08ec0     F2 3E 02 F1 | 	add	local13, objptr
08ec4     04 3E 06 F1 | 	add	local13, #4
08ec8     1F 33 62 FC | 	wrlong	local07, local13
08ecc     03 00 00 FF 
08ed0     00 E4 05 F1 | 	add	objptr, ##1536
08ed4     F2 3E 02 FB | 	rdlong	local13, objptr
08ed8     1F 41 02 F6 | 	mov	local14, local13
08edc     01 40 66 F0 | 	shl	local14, #1
08ee0     1F 41 02 F1 | 	add	local14, local13
08ee4     02 40 66 F0 | 	shl	local14, #2
08ee8     03 00 00 FF 
08eec     00 E4 85 F1 | 	sub	objptr, ##1536
08ef0     F2 40 02 F1 | 	add	local14, objptr
08ef4     08 40 06 F1 | 	add	local14, #8
08ef8     20 39 62 FC | 	wrlong	local10, local14
08efc     03 00 00 FF 
08f00     00 E4 05 F1 | 	add	objptr, ##1536
08f04     F2 34 02 FB | 	rdlong	local08, objptr
08f08     01 34 06 F1 | 	add	local08, #1
08f0c     F2 34 62 FC | 	wrlong	local08, objptr
08f10     4A 00 00 FF 
08f14     7C E4 85 F1 | 	sub	objptr, ##38012
08f18                 | LR__0814
08f18                 | '   if lparts(ct).token=token_semicolon then t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
08f18     37 00 00 FF 
08f1c     44 E4 05 F1 | 	add	objptr, ##28228
08f20     F2 34 02 FB | 	rdlong	local08, objptr
08f24     03 34 66 F0 | 	shl	local08, #3
08f28     02 00 00 FF 
08f2c     38 E4 85 F1 | 	sub	objptr, ##1080
08f30     F2 34 02 F1 | 	add	local08, objptr
08f34     04 34 06 F1 | 	add	local08, #4
08f38     1A 41 02 FB | 	rdlong	local14, local08
08f3c     12 40 0E F2 | 	cmp	local14, #18 wz
08f40     35 00 00 FF 
08f44     0C E4 85 F1 | 	sub	objptr, ##27148
08f48     60 01 90 5D |  if_ne	jmp	#LR__0815
08f4c     22 2A 06 F6 | 	mov	local03, #34
08f50     13 35 02 F6 | 	mov	local08, local01
08f54     14 33 02 F6 | 	mov	local07, local02
08f58     15 39 02 F6 | 	mov	local10, local03
08f5c     4A 00 00 FF 
08f60     7C E4 05 F1 | 	add	objptr, ##38012
08f64     F2 40 02 FB | 	rdlong	local14, objptr
08f68     20 3F 02 F6 | 	mov	local13, local14
08f6c     01 3E 66 F0 | 	shl	local13, #1
08f70     20 3F 02 F1 | 	add	local13, local14
08f74     02 3E 66 F0 | 	shl	local13, #2
08f78     03 00 00 FF 
08f7c     00 E4 85 F1 | 	sub	objptr, ##1536
08f80     F2 3E 02 F1 | 	add	local13, objptr
08f84     1F 35 62 FC | 	wrlong	local08, local13
08f88     03 00 00 FF 
08f8c     00 E4 05 F1 | 	add	objptr, ##1536
08f90     F2 40 02 FB | 	rdlong	local14, objptr
08f94     20 35 02 F6 | 	mov	local08, local14
08f98     01 34 66 F0 | 	shl	local08, #1
08f9c     20 35 02 F1 | 	add	local08, local14
08fa0     02 34 66 F0 | 	shl	local08, #2
08fa4     03 00 00 FF 
08fa8     00 E4 85 F1 | 	sub	objptr, ##1536
08fac     F2 34 02 F1 | 	add	local08, objptr
08fb0     04 34 06 F1 | 	add	local08, #4
08fb4     1A 33 62 FC | 	wrlong	local07, local08
08fb8     03 00 00 FF 
08fbc     00 E4 05 F1 | 	add	objptr, ##1536
08fc0     F2 34 02 FB | 	rdlong	local08, objptr
08fc4     1A 41 02 F6 | 	mov	local14, local08
08fc8     01 40 66 F0 | 	shl	local14, #1
08fcc     1A 41 02 F1 | 	add	local14, local08
08fd0     02 40 66 F0 | 	shl	local14, #2
08fd4     03 00 00 FF 
08fd8     00 E4 85 F1 | 	sub	objptr, ##1536
08fdc     F2 40 02 F1 | 	add	local14, objptr
08fe0     08 40 06 F1 | 	add	local14, #8
08fe4     20 39 62 FC | 	wrlong	local10, local14
08fe8     03 00 00 FF 
08fec     00 E4 05 F1 | 	add	objptr, ##1536
08ff0     F2 34 02 FB | 	rdlong	local08, objptr
08ff4     01 34 06 F1 | 	add	local08, #1
08ff8     F2 34 62 FC | 	wrlong	local08, objptr
08ffc     44 2A 06 F6 | 	mov	local03, #68
09000     13 35 02 F6 | 	mov	local08, local01
09004     14 33 02 F6 | 	mov	local07, local02
09008     15 39 02 F6 | 	mov	local10, local03
0900c     F2 40 02 FB | 	rdlong	local14, objptr
09010     20 3F 02 F6 | 	mov	local13, local14
09014     01 3E 66 F0 | 	shl	local13, #1
09018     20 3F 02 F1 | 	add	local13, local14
0901c     02 3E 66 F0 | 	shl	local13, #2
09020     03 00 00 FF 
09024     00 E4 85 F1 | 	sub	objptr, ##1536
09028     F2 3E 02 F1 | 	add	local13, objptr
0902c     1F 35 62 FC | 	wrlong	local08, local13
09030     03 00 00 FF 
09034     00 E4 05 F1 | 	add	objptr, ##1536
09038     F2 40 02 FB | 	rdlong	local14, objptr
0903c     20 3F 02 F6 | 	mov	local13, local14
09040     01 3E 66 F0 | 	shl	local13, #1
09044     20 3F 02 F1 | 	add	local13, local14
09048     02 3E 66 F0 | 	shl	local13, #2
0904c     03 00 00 FF 
09050     00 E4 85 F1 | 	sub	objptr, ##1536
09054     F2 3E 02 F1 | 	add	local13, objptr
09058     04 3E 06 F1 | 	add	local13, #4
0905c     1F 33 62 FC | 	wrlong	local07, local13
09060     03 00 00 FF 
09064     00 E4 05 F1 | 	add	objptr, ##1536
09068     F2 3E 02 FB | 	rdlong	local13, objptr
0906c     1F 41 02 F6 | 	mov	local14, local13
09070     01 40 66 F0 | 	shl	local14, #1
09074     1F 41 02 F1 | 	add	local14, local13
09078     02 40 66 F0 | 	shl	local14, #2
0907c     03 00 00 FF 
09080     00 E4 85 F1 | 	sub	objptr, ##1536
09084     F2 40 02 F1 | 	add	local14, objptr
09088     08 40 06 F1 | 	add	local14, #8
0908c     20 39 62 FC | 	wrlong	local10, local14
09090     03 00 00 FF 
09094     00 E4 05 F1 | 	add	objptr, ##1536
09098     F2 34 02 FB | 	rdlong	local08, objptr
0909c     01 34 06 F1 | 	add	local08, #1
090a0     F2 34 62 FC | 	wrlong	local08, objptr
090a4     4A 00 00 FF 
090a8     7C E4 85 F1 | 	sub	objptr, ##38012
090ac                 | LR__0815
090ac                 | '   if lparts(ct).token<>token_semicolon  andalso lparts(ct).token<>token_comma then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 : ct-=1
090ac     37 00 00 FF 
090b0     44 E4 05 F1 | 	add	objptr, ##28228
090b4     F2 34 02 FB | 	rdlong	local08, objptr
090b8     03 34 66 F0 | 	shl	local08, #3
090bc     02 00 00 FF 
090c0     38 E4 85 F1 | 	sub	objptr, ##1080
090c4     F2 34 02 F1 | 	add	local08, objptr
090c8     04 34 06 F1 | 	add	local08, #4
090cc     1A 41 02 FB | 	rdlong	local14, local08
090d0     12 40 0E F2 | 	cmp	local14, #18 wz
090d4     35 00 00 FF 
090d8     0C E4 85 F1 | 	sub	objptr, ##27148
090dc     00 01 90 AD |  if_e	jmp	#LR__0816
090e0     37 00 00 FF 
090e4     44 E4 05 F1 | 	add	objptr, ##28228
090e8     F2 34 02 FB | 	rdlong	local08, objptr
090ec     03 34 66 F0 | 	shl	local08, #3
090f0     02 00 00 FF 
090f4     38 E4 85 F1 | 	sub	objptr, ##1080
090f8     F2 34 02 F1 | 	add	local08, objptr
090fc     04 34 06 F1 | 	add	local08, #4
09100     1A 41 02 FB | 	rdlong	local14, local08
09104     11 40 0E F2 | 	cmp	local14, #17 wz
09108     35 00 00 FF 
0910c     0C E4 85 F1 | 	sub	objptr, ##27148
09110     CC 00 90 AD |  if_e	jmp	#LR__0816
09114     44 2A 06 F6 | 	mov	local03, #68
09118     13 35 02 F6 | 	mov	local08, local01
0911c     14 33 02 F6 | 	mov	local07, local02
09120     15 39 02 F6 | 	mov	local10, local03
09124     4A 00 00 FF 
09128     7C E4 05 F1 | 	add	objptr, ##38012
0912c     F2 40 02 FB | 	rdlong	local14, objptr
09130     20 3F 02 F6 | 	mov	local13, local14
09134     01 3E 66 F0 | 	shl	local13, #1
09138     20 3F 02 F1 | 	add	local13, local14
0913c     02 3E 66 F0 | 	shl	local13, #2
09140     03 00 00 FF 
09144     00 E4 85 F1 | 	sub	objptr, ##1536
09148     F2 3E 02 F1 | 	add	local13, objptr
0914c     1F 35 62 FC | 	wrlong	local08, local13
09150     03 00 00 FF 
09154     00 E4 05 F1 | 	add	objptr, ##1536
09158     F2 40 02 FB | 	rdlong	local14, objptr
0915c     20 3F 02 F6 | 	mov	local13, local14
09160     01 3E 66 F0 | 	shl	local13, #1
09164     20 3F 02 F1 | 	add	local13, local14
09168     02 3E 66 F0 | 	shl	local13, #2
0916c     03 00 00 FF 
09170     00 E4 85 F1 | 	sub	objptr, ##1536
09174     F2 3E 02 F1 | 	add	local13, objptr
09178     04 3E 06 F1 | 	add	local13, #4
0917c     1F 33 62 FC | 	wrlong	local07, local13
09180     03 00 00 FF 
09184     00 E4 05 F1 | 	add	objptr, ##1536
09188     F2 3E 02 FB | 	rdlong	local13, objptr
0918c     1F 41 02 F6 | 	mov	local14, local13
09190     01 40 66 F0 | 	shl	local14, #1
09194     1F 41 02 F1 | 	add	local14, local13
09198     02 40 66 F0 | 	shl	local14, #2
0919c     03 00 00 FF 
091a0     00 E4 85 F1 | 	sub	objptr, ##1536
091a4     F2 40 02 F1 | 	add	local14, objptr
091a8     08 40 06 F1 | 	add	local14, #8
091ac     20 39 62 FC | 	wrlong	local10, local14
091b0     03 00 00 FF 
091b4     00 E4 05 F1 | 	add	objptr, ##1536
091b8     F2 34 02 FB | 	rdlong	local08, objptr
091bc     01 34 06 F1 | 	add	local08, #1
091c0     F2 34 62 FC | 	wrlong	local08, objptr
091c4     13 00 00 FF 
091c8     38 E4 85 F1 | 	sub	objptr, ##9784
091cc     F2 34 02 FB | 	rdlong	local08, objptr
091d0     01 34 86 F1 | 	sub	local08, #1
091d4     F2 34 62 FC | 	wrlong	local08, objptr
091d8     37 00 00 FF 
091dc     44 E4 85 F1 | 	sub	objptr, ##28228
091e0                 | LR__0816
091e0     37 00 00 FF 
091e4     44 E4 05 F1 | 	add	objptr, ##28228
091e8     F2 34 02 FB | 	rdlong	local08, objptr
091ec     01 34 06 F1 | 	add	local08, #1
091f0     F2 34 62 FC | 	wrlong	local08, objptr
091f4     37 00 00 FF 
091f8     44 E4 85 F1 | 	sub	objptr, ##28228
091fc                 | LR__0817
091fc     00 2E 06 F6 | 	mov	local05, #0
09200                 | ' i=0 : err=0
09200                 | ' if lparts(ct).token<>token_end then
09200     37 00 00 FF 
09204     44 E4 05 F1 | 	add	objptr, ##28228
09208     F2 40 02 FB | 	rdlong	local14, objptr
0920c     03 40 66 F0 | 	shl	local14, #3
09210     02 00 00 FF 
09214     38 E4 85 F1 | 	sub	objptr, ##1080
09218     F2 40 02 F1 | 	add	local14, objptr
0921c     04 40 06 F1 | 	add	local14, #4
09220     20 41 02 FB | 	rdlong	local14, local14
09224     FE 41 0E F2 | 	cmp	local14, #510 wz
09228     35 00 00 FF 
0922c     0C E4 85 F1 | 	sub	objptr, ##27148
09230     98 00 90 AD |  if_e	jmp	#LR__0819
09234                 | '   do
09234                 | LR__0818
09234     58 28 B0 FD | 	call	#_getaddr
09238     FD 42 02 F6 | 	mov	local15, result1
0923c     37 00 00 FF 
09240     44 E4 05 F1 | 	add	objptr, ##28228
09244     F2 40 02 FB | 	rdlong	local14, objptr
09248     01 40 06 F1 | 	add	local14, #1
0924c     F2 40 62 FC | 	wrlong	local14, objptr
09250     01 2E 06 F1 | 	add	local05, #1
09254                 | '     err=getaddr() :ct+=1
09254                 | '     i+=1 
09254                 | '     if lparts(ct).token=token_comma then ct+=1 
09254     03 40 66 F0 | 	shl	local14, #3
09258     02 00 00 FF 
0925c     38 E4 85 F1 | 	sub	objptr, ##1080
09260     F2 40 02 F1 | 	add	local14, objptr
09264     04 40 06 F1 | 	add	local14, #4
09268     20 41 02 FB | 	rdlong	local14, local14
0926c     11 40 0E F2 | 	cmp	local14, #17 wz
09270     35 00 00 FF 
09274     0C E4 85 F1 | 	sub	objptr, ##27148
09278     37 00 00 AF 
0927c     44 E4 05 A1 |  if_e	add	objptr, ##28228
09280     F2 34 02 AB |  if_e	rdlong	local08, objptr
09284     01 34 06 A1 |  if_e	add	local08, #1
09288     F2 34 62 AC |  if_e	wrlong	local08, objptr
0928c     37 00 00 AF 
09290     44 E4 85 A1 |  if_e	sub	objptr, ##28228
09294                 | '     if lparts(ct).token=token_end then exit loop
09294     37 00 00 FF 
09298     44 E4 05 F1 | 	add	objptr, ##28228
0929c     F2 40 02 FB | 	rdlong	local14, objptr
092a0     03 40 66 F0 | 	shl	local14, #3
092a4     02 00 00 FF 
092a8     38 E4 85 F1 | 	sub	objptr, ##1080
092ac     F2 40 02 F1 | 	add	local14, objptr
092b0     04 40 06 F1 | 	add	local14, #4
092b4     20 41 02 FB | 	rdlong	local14, local14
092b8     FE 41 0E F2 | 	cmp	local14, #510 wz
092bc     35 00 00 FF 
092c0     0C E4 85 F1 | 	sub	objptr, ##27148
092c4     08 00 90 AD |  if_e	jmp	#LR__0820
092c8     68 FF 9F FD | 	jmp	#LR__0818
092cc                 | LR__0819
092cc     36 42 06 F6 | 	mov	local15, #54
092d0                 | LR__0820
092d0                 | ' return i,err
092d0     17 FB 01 F6 | 	mov	result1, local05
092d4     21 FD 01 F6 | 	mov	result2, local15
092d8     A7 F0 03 F6 | 	mov	ptra, fp
092dc     B2 00 A0 FD | 	call	#popregs_
092e0                 | _compile_input_ret
092e0     2D 00 64 FD | 	ret
092e4                 | 
092e4                 | ' 
092e4                 | ' '----- compile assign to an array element
092e4                 | ' 
092e4                 | ' function compile_array_assign() as ulong 
092e4                 | _compile_array_assign
092e4     0B 4A 05 F6 | 	mov	COUNT_, #11
092e8     A8 00 A0 FD | 	call	#pushregs_
092ec     00 2C 06 F6 | 	mov	local04, #0
092f0     00 2E 06 F6 | 	mov	local05, #0
092f4     37 00 00 FF 
092f8     44 E4 05 F1 | 	add	objptr, ##28228
092fc     F2 30 02 FB | 	rdlong	local06, objptr
09300     18 FB 01 F6 | 	mov	result1, local06
09304     01 FA 85 F1 | 	sub	result1, #1
09308     03 FA 65 F0 | 	shl	result1, #3
0930c     02 00 00 FF 
09310     38 E4 85 F1 | 	sub	objptr, ##1080
09314     F2 FA 01 F1 | 	add	result1, objptr
09318     FD 32 02 FB | 	rdlong	local07, result1
0931c                 | ' numpar=0 : err=0
0931c                 | ' varname$=lparts(ct-1).part$
0931c                 | ' if lparts(ct).token=token_lpar then
0931c     03 30 66 F0 | 	shl	local06, #3
09320     F2 30 02 F1 | 	add	local06, objptr
09324     04 30 06 F1 | 	add	local06, #4
09328     18 31 02 FB | 	rdlong	local06, local06
0932c     15 30 0E F2 | 	cmp	local06, #21 wz
09330     35 00 00 FF 
09334     0C E4 85 F1 | 	sub	objptr, ##27148
09338     F4 01 90 5D |  if_ne	jmp	#LR__0834
0933c     37 00 00 FF 
09340     44 E4 05 F1 | 	add	objptr, ##28228
09344     F2 34 02 FB | 	rdlong	local08, objptr
09348     01 34 06 F1 | 	add	local08, #1
0934c     F2 34 62 FC | 	wrlong	local08, objptr
09350     37 00 00 FF 
09354     44 E4 85 F1 | 	sub	objptr, ##28228
09358                 | '   ct+=1 											' omit this lpar, this is for expr list
09358                 | '   do
09358                 | LR__0830
09358     C8 2A B0 FD | 	call	#_expr
0935c     37 00 00 FF 
09360     44 E4 05 F1 | 	add	objptr, ##28228
09364     F2 30 02 FB | 	rdlong	local06, objptr
09368     01 30 06 F1 | 	add	local06, #1
0936c     F2 30 62 FC | 	wrlong	local06, objptr
09370     01 2C 06 F1 | 	add	local04, #1
09374     01 30 86 F1 | 	sub	local06, #1
09378     03 30 66 F0 | 	shl	local06, #3
0937c     02 00 00 FF 
09380     38 E4 85 F1 | 	sub	objptr, ##1080
09384     F2 30 02 F1 | 	add	local06, objptr
09388     04 30 06 F1 | 	add	local06, #4
0938c     18 35 02 FB | 	rdlong	local08, local06
09390     14 34 0E F2 | 	cmp	local08, #20 wz
09394     35 00 00 FF 
09398     0C E4 85 F1 | 	sub	objptr, ##27148
0939c     34 00 90 AD |  if_e	jmp	#LR__0831
093a0     37 00 00 FF 
093a4     44 E4 05 F1 | 	add	objptr, ##28228
093a8     F2 34 02 FB | 	rdlong	local08, objptr
093ac     03 34 66 F0 | 	shl	local08, #3
093b0     02 00 00 FF 
093b4     38 E4 85 F1 | 	sub	objptr, ##1080
093b8     F2 34 02 F1 | 	add	local08, objptr
093bc     04 34 06 F1 | 	add	local08, #4
093c0     1A 35 02 FB | 	rdlong	local08, local08
093c4     FE 35 0E F2 | 	cmp	local08, #510 wz
093c8     35 00 00 FF 
093cc     0C E4 85 F1 | 	sub	objptr, ##27148
093d0     84 FF 9F 5D |  if_ne	jmp	#LR__0830
093d4                 | LR__0831
093d4     37 00 00 FF 
093d8     44 E4 05 F1 | 	add	objptr, ##28228
093dc     F2 34 02 FB | 	rdlong	local08, objptr
093e0     01 34 06 F1 | 	add	local08, #1
093e4     F2 34 62 FC | 	wrlong	local08, objptr
093e8     37 00 00 FF 
093ec     44 E4 85 F1 | 	sub	objptr, ##28228
093f0     30 2A B0 FD | 	call	#_expr
093f4     01 36 66 F6 | 	neg	local09, #1
093f8     00 38 06 F6 | 	mov	local10, #0
093fc                 | '   ct+=1 : expr()
093fc                 | '   j=-1 : i=0 
093fc                 | '   do 
093fc                 | LR__0832
093fc                 | '     if variables(i).name=varname$ then j=i: exit loop
093fc     1C 31 02 F6 | 	mov	local06, local10
09400     04 30 66 F0 | 	shl	local06, #4
09404     14 00 00 FF 
09408     F8 E5 05 F1 | 	add	objptr, ##10744
0940c     F2 30 02 F1 | 	add	local06, objptr
09410     18 13 02 FB | 	rdlong	arg01, local06
09414     19 15 02 F6 | 	mov	arg02, local07
09418     14 00 00 FF 
0941c     F8 E5 85 F1 | 	sub	objptr, ##10744
09420     54 DA B1 FD | 	call	#__system___string_cmp
09424     00 FA 0D F2 | 	cmp	result1, #0 wz
09428     1C 37 02 A6 |  if_e	mov	local09, local10
0942c     20 00 90 AD |  if_e	jmp	#LR__0833
09430     01 38 06 F1 | 	add	local10, #1
09434     35 00 00 FF 
09438     08 E4 05 F1 | 	add	objptr, ##27144
0943c     F2 34 02 FB | 	rdlong	local08, objptr
09440     35 00 00 FF 
09444     08 E4 85 F1 | 	sub	objptr, ##27144
09448     1A 39 5A F2 | 	cmps	local10, local08 wcz
0944c     AC FF 9F ED |  if_be	jmp	#LR__0832
09450                 | LR__0833
09450     1B 27 02 F6 | 	mov	local01, local09
09454     16 29 02 F6 | 	mov	local02, local04
09458     17 2A 06 F6 | 	mov	local03, #23
0945c     13 35 02 F6 | 	mov	local08, local01
09460     14 3B 02 F6 | 	mov	local11, local02
09464     15 33 02 F6 | 	mov	local07, local03
09468     4A 00 00 FF 
0946c     7C E4 05 F1 | 	add	objptr, ##38012
09470     F2 26 02 FB | 	rdlong	local01, objptr
09474     13 37 02 F6 | 	mov	local09, local01
09478     01 36 66 F0 | 	shl	local09, #1
0947c     13 37 02 F1 | 	add	local09, local01
09480     02 36 66 F0 | 	shl	local09, #2
09484     03 00 00 FF 
09488     00 E4 85 F1 | 	sub	objptr, ##1536
0948c     F2 36 02 F1 | 	add	local09, objptr
09490     1B 35 62 FC | 	wrlong	local08, local09
09494     03 00 00 FF 
09498     00 E4 05 F1 | 	add	objptr, ##1536
0949c     F2 26 02 FB | 	rdlong	local01, objptr
094a0     13 37 02 F6 | 	mov	local09, local01
094a4     01 36 66 F0 | 	shl	local09, #1
094a8     13 37 02 F1 | 	add	local09, local01
094ac     02 36 66 F0 | 	shl	local09, #2
094b0     03 00 00 FF 
094b4     00 E4 85 F1 | 	sub	objptr, ##1536
094b8     F2 36 02 F1 | 	add	local09, objptr
094bc     04 36 06 F1 | 	add	local09, #4
094c0     1B 3B 62 FC | 	wrlong	local11, local09
094c4     03 00 00 FF 
094c8     00 E4 05 F1 | 	add	objptr, ##1536
094cc     F2 3A 02 FB | 	rdlong	local11, objptr
094d0     1D 27 02 F6 | 	mov	local01, local11
094d4     01 26 66 F0 | 	shl	local01, #1
094d8     1D 27 02 F1 | 	add	local01, local11
094dc     02 26 66 F0 | 	shl	local01, #2
094e0     03 00 00 FF 
094e4     00 E4 85 F1 | 	sub	objptr, ##1536
094e8     F2 26 02 F1 | 	add	local01, objptr
094ec     08 26 06 F1 | 	add	local01, #8
094f0     13 33 62 FC | 	wrlong	local07, local01
094f4     03 00 00 FF 
094f8     00 E4 05 F1 | 	add	objptr, ##1536
094fc     F2 34 02 FB | 	rdlong	local08, objptr
09500     01 34 06 F1 | 	add	local08, #1
09504     F2 34 62 FC | 	wrlong	local08, objptr
09508                 | '   t1.result.twowords(0)=j: t1.result.twowords(1)=numpar : t1.result_type=fun_assign : compiledline(lineptr)=t1: lineptr +=1 
09508                 | '   if numpar>3 then err=45
09508     04 2C 16 F2 | 	cmp	local04, #4 wc
0950c     2D 2E 06 36 |  if_ae	mov	local05, #45
09510                 | '   if i>varnum then err=20
09510     15 00 00 FF 
09514     74 E4 85 F1 | 	sub	objptr, ##10868
09518     F2 34 02 FB | 	rdlong	local08, objptr
0951c     35 00 00 FF 
09520     08 E4 85 F1 | 	sub	objptr, ##27144
09524     1A 39 5A F2 | 	cmps	local10, local08 wcz
09528     14 2E 06 16 |  if_a	mov	local05, #20
0952c     04 00 90 FD | 	jmp	#LR__0835
09530                 | LR__0834
09530     0E 2E 06 F6 | 	mov	local05, #14
09534                 | LR__0835
09534                 | ' return err
09534     17 FB 01 F6 | 	mov	result1, local05
09538     A7 F0 03 F6 | 	mov	ptra, fp
0953c     B2 00 A0 FD | 	call	#popregs_
09540                 | _compile_array_assign_ret
09540     2D 00 64 FD | 	ret
09544                 | 
09544                 | ' 
09544                 | ' '----- compile print command with its ";" and "," modifiers
09544                 | ' 
09544                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
09544                 | _compile_print
09544     0B 4A 05 F6 | 	mov	COUNT_, #11
09548     A8 00 A0 FD | 	call	#pushregs_
0954c     00 26 06 F6 | 	mov	local01, #0
09550     1D 2A 06 F6 | 	mov	local03, #29
09554                 | ' t1.result.uresult=0 : t1.result_type=result_uint
09554                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
09554     37 00 00 FF 
09558     44 E4 05 F1 | 	add	objptr, ##28228
0955c     F2 2C 02 FB | 	rdlong	local04, objptr
09560     03 2C 66 F0 | 	shl	local04, #3
09564     02 00 00 FF 
09568     38 E4 85 F1 | 	sub	objptr, ##1080
0956c     F2 2C 02 F1 | 	add	local04, objptr
09570     04 2C 06 F1 | 	add	local04, #4
09574     16 2D 02 FB | 	rdlong	local04, local04
09578     FE 2D 0E F2 | 	cmp	local04, #510 wz
0957c     35 00 00 FF 
09580     0C E4 85 F1 | 	sub	objptr, ##27148
09584     68 01 90 5D |  if_ne	jmp	#LR__0840
09588     20 2A 06 F6 | 	mov	local03, #32
0958c     13 2F 02 F6 | 	mov	local05, local01
09590     14 31 02 F6 | 	mov	local06, local02
09594     15 33 02 F6 | 	mov	local07, local03
09598     4A 00 00 FF 
0959c     7C E4 05 F1 | 	add	objptr, ##38012
095a0     F2 34 02 FB | 	rdlong	local08, objptr
095a4     1A 37 02 F6 | 	mov	local09, local08
095a8     01 36 66 F0 | 	shl	local09, #1
095ac     1A 37 02 F1 | 	add	local09, local08
095b0     02 36 66 F0 | 	shl	local09, #2
095b4     03 00 00 FF 
095b8     00 E4 85 F1 | 	sub	objptr, ##1536
095bc     F2 36 02 F1 | 	add	local09, objptr
095c0     1B 2F 62 FC | 	wrlong	local05, local09
095c4     03 00 00 FF 
095c8     00 E4 05 F1 | 	add	objptr, ##1536
095cc     F2 2E 02 FB | 	rdlong	local05, objptr
095d0     17 39 02 F6 | 	mov	local10, local05
095d4     01 38 66 F0 | 	shl	local10, #1
095d8     17 39 02 F1 | 	add	local10, local05
095dc     02 38 66 F0 | 	shl	local10, #2
095e0     03 00 00 FF 
095e4     00 E4 85 F1 | 	sub	objptr, ##1536
095e8     F2 38 02 F1 | 	add	local10, objptr
095ec     04 38 06 F1 | 	add	local10, #4
095f0     1C 31 62 FC | 	wrlong	local06, local10
095f4     03 00 00 FF 
095f8     00 E4 05 F1 | 	add	objptr, ##1536
095fc     F2 2E 02 FB | 	rdlong	local05, objptr
09600     17 3B 02 F6 | 	mov	local11, local05
09604     01 3A 66 F0 | 	shl	local11, #1
09608     17 3B 02 F1 | 	add	local11, local05
0960c     02 3A 66 F0 | 	shl	local11, #2
09610     03 00 00 FF 
09614     00 E4 85 F1 | 	sub	objptr, ##1536
09618     F2 3A 02 F1 | 	add	local11, objptr
0961c     08 3A 06 F1 | 	add	local11, #8
09620     1D 33 62 FC | 	wrlong	local07, local11
09624     03 00 00 FF 
09628     00 E4 05 F1 | 	add	objptr, ##1536
0962c     F2 2E 02 FB | 	rdlong	local05, objptr
09630     01 2E 06 F1 | 	add	local05, #1
09634     F2 2E 62 FC | 	wrlong	local05, objptr
09638     44 2A 06 F6 | 	mov	local03, #68
0963c     13 2F 02 F6 | 	mov	local05, local01
09640     14 31 02 F6 | 	mov	local06, local02
09644     15 33 02 F6 | 	mov	local07, local03
09648     F2 34 02 FB | 	rdlong	local08, objptr
0964c     1A 37 02 F6 | 	mov	local09, local08
09650     01 36 66 F0 | 	shl	local09, #1
09654     1A 37 02 F1 | 	add	local09, local08
09658     02 36 66 F0 | 	shl	local09, #2
0965c     03 00 00 FF 
09660     00 E4 85 F1 | 	sub	objptr, ##1536
09664     F2 36 02 F1 | 	add	local09, objptr
09668     1B 2F 62 FC | 	wrlong	local05, local09
0966c     03 00 00 FF 
09670     00 E4 05 F1 | 	add	objptr, ##1536
09674     F2 3A 02 FB | 	rdlong	local11, objptr
09678     1D 39 02 F6 | 	mov	local10, local11
0967c     01 38 66 F0 | 	shl	local10, #1
09680     1D 39 02 F1 | 	add	local10, local11
09684     02 38 66 F0 | 	shl	local10, #2
09688     03 00 00 FF 
0968c     00 E4 85 F1 | 	sub	objptr, ##1536
09690     F2 38 02 F1 | 	add	local10, objptr
09694     04 38 06 F1 | 	add	local10, #4
09698     1C 31 62 FC | 	wrlong	local06, local10
0969c     03 00 00 FF 
096a0     00 E4 05 F1 | 	add	objptr, ##1536
096a4     F2 38 02 FB | 	rdlong	local10, objptr
096a8     1C 3B 02 F6 | 	mov	local11, local10
096ac     01 3A 66 F0 | 	shl	local11, #1
096b0     1C 3B 02 F1 | 	add	local11, local10
096b4     02 3A 66 F0 | 	shl	local11, #2
096b8     03 00 00 FF 
096bc     00 E4 85 F1 | 	sub	objptr, ##1536
096c0     F2 3A 02 F1 | 	add	local11, objptr
096c4     08 3A 06 F1 | 	add	local11, #8
096c8     1D 33 62 FC | 	wrlong	local07, local11
096cc     03 00 00 FF 
096d0     00 E4 05 F1 | 	add	objptr, ##1536
096d4     F2 2E 02 FB | 	rdlong	local05, objptr
096d8     01 2E 06 F1 | 	add	local05, #1
096dc     F2 2E 62 FC | 	wrlong	local05, objptr
096e0     4A 00 00 FF 
096e4     7C E4 85 F1 | 	sub	objptr, ##38012
096e8     00 FA 05 F6 | 	mov	result1, #0
096ec     20 05 90 FD | 	jmp	#LR__0847
096f0                 | LR__0840
096f0                 | ' do
096f0                 | LR__0841
096f0     30 27 B0 FD | 	call	#_expr
096f4                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
096f4                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
096f4     37 00 00 FF 
096f8     44 E4 05 F1 | 	add	objptr, ##28228
096fc     F2 2C 02 FB | 	rdlong	local04, objptr
09700     03 2C 66 F0 | 	shl	local04, #3
09704     02 00 00 FF 
09708     38 E4 85 F1 | 	sub	objptr, ##1080
0970c     F2 2C 02 F1 | 	add	local04, objptr
09710     04 2C 06 F1 | 	add	local04, #4
09714     16 35 02 FB | 	rdlong	local08, local04
09718     11 34 0E F2 | 	cmp	local08, #17 wz
0971c     35 00 00 FF 
09720     0C E4 85 F1 | 	sub	objptr, ##27148
09724     60 01 90 5D |  if_ne	jmp	#LR__0842
09728     21 2A 06 F6 | 	mov	local03, #33
0972c     13 2F 02 F6 | 	mov	local05, local01
09730     14 31 02 F6 | 	mov	local06, local02
09734     15 33 02 F6 | 	mov	local07, local03
09738     4A 00 00 FF 
0973c     7C E4 05 F1 | 	add	objptr, ##38012
09740     F2 34 02 FB | 	rdlong	local08, objptr
09744     1A 37 02 F6 | 	mov	local09, local08
09748     01 36 66 F0 | 	shl	local09, #1
0974c     1A 37 02 F1 | 	add	local09, local08
09750     02 36 66 F0 | 	shl	local09, #2
09754     03 00 00 FF 
09758     00 E4 85 F1 | 	sub	objptr, ##1536
0975c     F2 36 02 F1 | 	add	local09, objptr
09760     1B 2F 62 FC | 	wrlong	local05, local09
09764     03 00 00 FF 
09768     00 E4 05 F1 | 	add	objptr, ##1536
0976c     F2 3A 02 FB | 	rdlong	local11, objptr
09770     1D 39 02 F6 | 	mov	local10, local11
09774     01 38 66 F0 | 	shl	local10, #1
09778     1D 39 02 F1 | 	add	local10, local11
0977c     02 38 66 F0 | 	shl	local10, #2
09780     03 00 00 FF 
09784     00 E4 85 F1 | 	sub	objptr, ##1536
09788     F2 38 02 F1 | 	add	local10, objptr
0978c     04 38 06 F1 | 	add	local10, #4
09790     1C 31 62 FC | 	wrlong	local06, local10
09794     03 00 00 FF 
09798     00 E4 05 F1 | 	add	objptr, ##1536
0979c     F2 2E 02 FB | 	rdlong	local05, objptr
097a0     17 3B 02 F6 | 	mov	local11, local05
097a4     01 3A 66 F0 | 	shl	local11, #1
097a8     17 3B 02 F1 | 	add	local11, local05
097ac     02 3A 66 F0 | 	shl	local11, #2
097b0     03 00 00 FF 
097b4     00 E4 85 F1 | 	sub	objptr, ##1536
097b8     F2 3A 02 F1 | 	add	local11, objptr
097bc     08 3A 06 F1 | 	add	local11, #8
097c0     1D 33 62 FC | 	wrlong	local07, local11
097c4     03 00 00 FF 
097c8     00 E4 05 F1 | 	add	objptr, ##1536
097cc     F2 2E 02 FB | 	rdlong	local05, objptr
097d0     01 2E 06 F1 | 	add	local05, #1
097d4     F2 2E 62 FC | 	wrlong	local05, objptr
097d8     44 2A 06 F6 | 	mov	local03, #68
097dc     13 2F 02 F6 | 	mov	local05, local01
097e0     14 31 02 F6 | 	mov	local06, local02
097e4     15 33 02 F6 | 	mov	local07, local03
097e8     F2 34 02 FB | 	rdlong	local08, objptr
097ec     1A 37 02 F6 | 	mov	local09, local08
097f0     01 36 66 F0 | 	shl	local09, #1
097f4     1A 37 02 F1 | 	add	local09, local08
097f8     02 36 66 F0 | 	shl	local09, #2
097fc     03 00 00 FF 
09800     00 E4 85 F1 | 	sub	objptr, ##1536
09804     F2 36 02 F1 | 	add	local09, objptr
09808     1B 2F 62 FC | 	wrlong	local05, local09
0980c     03 00 00 FF 
09810     00 E4 05 F1 | 	add	objptr, ##1536
09814     F2 3A 02 FB | 	rdlong	local11, objptr
09818     1D 39 02 F6 | 	mov	local10, local11
0981c     01 38 66 F0 | 	shl	local10, #1
09820     1D 39 02 F1 | 	add	local10, local11
09824     02 38 66 F0 | 	shl	local10, #2
09828     03 00 00 FF 
0982c     00 E4 85 F1 | 	sub	objptr, ##1536
09830     F2 38 02 F1 | 	add	local10, objptr
09834     04 38 06 F1 | 	add	local10, #4
09838     1C 31 62 FC | 	wrlong	local06, local10
0983c     03 00 00 FF 
09840     00 E4 05 F1 | 	add	objptr, ##1536
09844     F2 38 02 FB | 	rdlong	local10, objptr
09848     1C 3B 02 F6 | 	mov	local11, local10
0984c     01 3A 66 F0 | 	shl	local11, #1
09850     1C 3B 02 F1 | 	add	local11, local10
09854     02 3A 66 F0 | 	shl	local11, #2
09858     03 00 00 FF 
0985c     00 E4 85 F1 | 	sub	objptr, ##1536
09860     F2 3A 02 F1 | 	add	local11, objptr
09864     08 3A 06 F1 | 	add	local11, #8
09868     1D 33 62 FC | 	wrlong	local07, local11
0986c     03 00 00 FF 
09870     00 E4 05 F1 | 	add	objptr, ##1536
09874     F2 2E 02 FB | 	rdlong	local05, objptr
09878     01 2E 06 F1 | 	add	local05, #1
0987c     F2 2E 62 FC | 	wrlong	local05, objptr
09880     4A 00 00 FF 
09884     7C E4 85 F1 | 	sub	objptr, ##38012
09888                 | LR__0842
09888                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
09888     37 00 00 FF 
0988c     44 E4 05 F1 | 	add	objptr, ##28228
09890     F2 2C 02 FB | 	rdlong	local04, objptr
09894     03 2C 66 F0 | 	shl	local04, #3
09898     02 00 00 FF 
0989c     38 E4 85 F1 | 	sub	objptr, ##1080
098a0     F2 2C 02 F1 | 	add	local04, objptr
098a4     04 2C 06 F1 | 	add	local04, #4
098a8     16 35 02 FB | 	rdlong	local08, local04
098ac     12 34 0E F2 | 	cmp	local08, #18 wz
098b0     35 00 00 FF 
098b4     0C E4 85 F1 | 	sub	objptr, ##27148
098b8     60 01 90 5D |  if_ne	jmp	#LR__0843
098bc     22 2A 06 F6 | 	mov	local03, #34
098c0     13 2F 02 F6 | 	mov	local05, local01
098c4     14 31 02 F6 | 	mov	local06, local02
098c8     15 33 02 F6 | 	mov	local07, local03
098cc     4A 00 00 FF 
098d0     7C E4 05 F1 | 	add	objptr, ##38012
098d4     F2 34 02 FB | 	rdlong	local08, objptr
098d8     1A 37 02 F6 | 	mov	local09, local08
098dc     01 36 66 F0 | 	shl	local09, #1
098e0     1A 37 02 F1 | 	add	local09, local08
098e4     02 36 66 F0 | 	shl	local09, #2
098e8     03 00 00 FF 
098ec     00 E4 85 F1 | 	sub	objptr, ##1536
098f0     F2 36 02 F1 | 	add	local09, objptr
098f4     1B 2F 62 FC | 	wrlong	local05, local09
098f8     03 00 00 FF 
098fc     00 E4 05 F1 | 	add	objptr, ##1536
09900     F2 3A 02 FB | 	rdlong	local11, objptr
09904     1D 39 02 F6 | 	mov	local10, local11
09908     01 38 66 F0 | 	shl	local10, #1
0990c     1D 39 02 F1 | 	add	local10, local11
09910     02 38 66 F0 | 	shl	local10, #2
09914     03 00 00 FF 
09918     00 E4 85 F1 | 	sub	objptr, ##1536
0991c     F2 38 02 F1 | 	add	local10, objptr
09920     04 38 06 F1 | 	add	local10, #4
09924     1C 31 62 FC | 	wrlong	local06, local10
09928     03 00 00 FF 
0992c     00 E4 05 F1 | 	add	objptr, ##1536
09930     F2 2E 02 FB | 	rdlong	local05, objptr
09934     17 3B 02 F6 | 	mov	local11, local05
09938     01 3A 66 F0 | 	shl	local11, #1
0993c     17 3B 02 F1 | 	add	local11, local05
09940     02 3A 66 F0 | 	shl	local11, #2
09944     03 00 00 FF 
09948     00 E4 85 F1 | 	sub	objptr, ##1536
0994c     F2 3A 02 F1 | 	add	local11, objptr
09950     08 3A 06 F1 | 	add	local11, #8
09954     1D 33 62 FC | 	wrlong	local07, local11
09958     03 00 00 FF 
0995c     00 E4 05 F1 | 	add	objptr, ##1536
09960     F2 2E 02 FB | 	rdlong	local05, objptr
09964     01 2E 06 F1 | 	add	local05, #1
09968     F2 2E 62 FC | 	wrlong	local05, objptr
0996c     44 2A 06 F6 | 	mov	local03, #68
09970     13 2F 02 F6 | 	mov	local05, local01
09974     14 31 02 F6 | 	mov	local06, local02
09978     15 33 02 F6 | 	mov	local07, local03
0997c     F2 34 02 FB | 	rdlong	local08, objptr
09980     1A 37 02 F6 | 	mov	local09, local08
09984     01 36 66 F0 | 	shl	local09, #1
09988     1A 37 02 F1 | 	add	local09, local08
0998c     02 36 66 F0 | 	shl	local09, #2
09990     03 00 00 FF 
09994     00 E4 85 F1 | 	sub	objptr, ##1536
09998     F2 36 02 F1 | 	add	local09, objptr
0999c     1B 2F 62 FC | 	wrlong	local05, local09
099a0     03 00 00 FF 
099a4     00 E4 05 F1 | 	add	objptr, ##1536
099a8     F2 3A 02 FB | 	rdlong	local11, objptr
099ac     1D 39 02 F6 | 	mov	local10, local11
099b0     01 38 66 F0 | 	shl	local10, #1
099b4     1D 39 02 F1 | 	add	local10, local11
099b8     02 38 66 F0 | 	shl	local10, #2
099bc     03 00 00 FF 
099c0     00 E4 85 F1 | 	sub	objptr, ##1536
099c4     F2 38 02 F1 | 	add	local10, objptr
099c8     04 38 06 F1 | 	add	local10, #4
099cc     1C 31 62 FC | 	wrlong	local06, local10
099d0     03 00 00 FF 
099d4     00 E4 05 F1 | 	add	objptr, ##1536
099d8     F2 38 02 FB | 	rdlong	local10, objptr
099dc     1C 3B 02 F6 | 	mov	local11, local10
099e0     01 3A 66 F0 | 	shl	local11, #1
099e4     1C 3B 02 F1 | 	add	local11, local10
099e8     02 3A 66 F0 | 	shl	local11, #2
099ec     03 00 00 FF 
099f0     00 E4 85 F1 | 	sub	objptr, ##1536
099f4     F2 3A 02 F1 | 	add	local11, objptr
099f8     08 3A 06 F1 | 	add	local11, #8
099fc     1D 33 62 FC | 	wrlong	local07, local11
09a00     03 00 00 FF 
09a04     00 E4 05 F1 | 	add	objptr, ##1536
09a08     F2 2E 02 FB | 	rdlong	local05, objptr
09a0c     01 2E 06 F1 | 	add	local05, #1
09a10     F2 2E 62 FC | 	wrlong	local05, objptr
09a14     4A 00 00 FF 
09a18     7C E4 85 F1 | 	sub	objptr, ##38012
09a1c                 | LR__0843
09a1c                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
09a1c     37 00 00 FF 
09a20     44 E4 05 F1 | 	add	objptr, ##28228
09a24     F2 2C 02 FB | 	rdlong	local04, objptr
09a28     03 2C 66 F0 | 	shl	local04, #3
09a2c     02 00 00 FF 
09a30     38 E4 85 F1 | 	sub	objptr, ##1080
09a34     F2 2C 02 F1 | 	add	local04, objptr
09a38     04 2C 06 F1 | 	add	local04, #4
09a3c     16 35 02 FB | 	rdlong	local08, local04
09a40     FE 35 0E F2 | 	cmp	local08, #510 wz
09a44     35 00 00 FF 
09a48     0C E4 85 F1 | 	sub	objptr, ##27148
09a4c     B8 00 90 5D |  if_ne	jmp	#LR__0844
09a50     44 2A 06 F6 | 	mov	local03, #68
09a54     13 2F 02 F6 | 	mov	local05, local01
09a58     14 31 02 F6 | 	mov	local06, local02
09a5c     15 33 02 F6 | 	mov	local07, local03
09a60     4A 00 00 FF 
09a64     7C E4 05 F1 | 	add	objptr, ##38012
09a68     F2 34 02 FB | 	rdlong	local08, objptr
09a6c     1A 37 02 F6 | 	mov	local09, local08
09a70     01 36 66 F0 | 	shl	local09, #1
09a74     1A 37 02 F1 | 	add	local09, local08
09a78     02 36 66 F0 | 	shl	local09, #2
09a7c     03 00 00 FF 
09a80     00 E4 85 F1 | 	sub	objptr, ##1536
09a84     F2 36 02 F1 | 	add	local09, objptr
09a88     1B 2F 62 FC | 	wrlong	local05, local09
09a8c     03 00 00 FF 
09a90     00 E4 05 F1 | 	add	objptr, ##1536
09a94     F2 3A 02 FB | 	rdlong	local11, objptr
09a98     1D 39 02 F6 | 	mov	local10, local11
09a9c     01 38 66 F0 | 	shl	local10, #1
09aa0     1D 39 02 F1 | 	add	local10, local11
09aa4     02 38 66 F0 | 	shl	local10, #2
09aa8     03 00 00 FF 
09aac     00 E4 85 F1 | 	sub	objptr, ##1536
09ab0     F2 38 02 F1 | 	add	local10, objptr
09ab4     04 38 06 F1 | 	add	local10, #4
09ab8     1C 31 62 FC | 	wrlong	local06, local10
09abc     03 00 00 FF 
09ac0     00 E4 05 F1 | 	add	objptr, ##1536
09ac4     F2 38 02 FB | 	rdlong	local10, objptr
09ac8     1C 3B 02 F6 | 	mov	local11, local10
09acc     01 3A 66 F0 | 	shl	local11, #1
09ad0     1C 3B 02 F1 | 	add	local11, local10
09ad4     02 3A 66 F0 | 	shl	local11, #2
09ad8     03 00 00 FF 
09adc     00 E4 85 F1 | 	sub	objptr, ##1536
09ae0     F2 3A 02 F1 | 	add	local11, objptr
09ae4     08 3A 06 F1 | 	add	local11, #8
09ae8     1D 33 62 FC | 	wrlong	local07, local11
09aec     03 00 00 FF 
09af0     00 E4 05 F1 | 	add	objptr, ##1536
09af4     F2 2E 02 FB | 	rdlong	local05, objptr
09af8     01 2E 06 F1 | 	add	local05, #1
09afc     F2 2E 62 FC | 	wrlong	local05, objptr
09b00     4A 00 00 FF 
09b04     7C E4 85 F1 | 	sub	objptr, ##38012
09b08                 | LR__0844
09b08                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then return 22
09b08     37 00 00 FF 
09b0c     44 E4 05 F1 | 	add	objptr, ##28228
09b10     F2 2C 02 FB | 	rdlong	local04, objptr
09b14     03 2C 66 F0 | 	shl	local04, #3
09b18     02 00 00 FF 
09b1c     38 E4 85 F1 | 	sub	objptr, ##1080
09b20     F2 2C 02 F1 | 	add	local04, objptr
09b24     04 2C 06 F1 | 	add	local04, #4
09b28     16 35 02 FB | 	rdlong	local08, local04
09b2c     11 34 0E F2 | 	cmp	local08, #17 wz
09b30     35 00 00 FF 
09b34     0C E4 85 F1 | 	sub	objptr, ##27148
09b38     6C 00 90 AD |  if_e	jmp	#LR__0845
09b3c     37 00 00 FF 
09b40     44 E4 05 F1 | 	add	objptr, ##28228
09b44     F2 34 02 FB | 	rdlong	local08, objptr
09b48     03 34 66 F0 | 	shl	local08, #3
09b4c     02 00 00 FF 
09b50     38 E4 85 F1 | 	sub	objptr, ##1080
09b54     F2 34 02 F1 | 	add	local08, objptr
09b58     04 34 06 F1 | 	add	local08, #4
09b5c     1A 35 02 FB | 	rdlong	local08, local08
09b60     12 34 0E F2 | 	cmp	local08, #18 wz
09b64     35 00 00 FF 
09b68     0C E4 85 F1 | 	sub	objptr, ##27148
09b6c     38 00 90 AD |  if_e	jmp	#LR__0845
09b70     37 00 00 FF 
09b74     44 E4 05 F1 | 	add	objptr, ##28228
09b78     F2 3A 02 FB | 	rdlong	local11, objptr
09b7c     03 3A 66 F0 | 	shl	local11, #3
09b80     02 00 00 FF 
09b84     38 E4 85 F1 | 	sub	objptr, ##1080
09b88     F2 3A 02 F1 | 	add	local11, objptr
09b8c     04 3A 06 F1 | 	add	local11, #4
09b90     1D 3B 02 FB | 	rdlong	local11, local11
09b94     FE 3B 0E F2 | 	cmp	local11, #510 wz
09b98     35 00 00 FF 
09b9c     0C E4 85 F1 | 	sub	objptr, ##27148
09ba0     16 FA 05 56 |  if_ne	mov	result1, #22
09ba4     68 00 90 5D |  if_ne	jmp	#LR__0847
09ba8                 | LR__0845
09ba8     37 00 00 FF 
09bac     44 E4 05 F1 | 	add	objptr, ##28228
09bb0     F2 2C 02 FB | 	rdlong	local04, objptr
09bb4     01 2C 06 F1 | 	add	local04, #1
09bb8     F2 2C 62 FC | 	wrlong	local04, objptr
09bbc     03 2C 66 F0 | 	shl	local04, #3
09bc0     02 00 00 FF 
09bc4     38 E4 85 F1 | 	sub	objptr, ##1080
09bc8     F2 2C 02 F1 | 	add	local04, objptr
09bcc     04 2C 06 F1 | 	add	local04, #4
09bd0     16 35 02 FB | 	rdlong	local08, local04
09bd4     FE 35 0E F2 | 	cmp	local08, #510 wz
09bd8     35 00 00 FF 
09bdc     0C E4 85 F1 | 	sub	objptr, ##27148
09be0     28 00 90 AD |  if_e	jmp	#LR__0846
09be4     37 00 00 FF 
09be8     44 E4 05 F1 | 	add	objptr, ##28228
09bec     F2 3A 02 FB | 	rdlong	local11, objptr
09bf0     0E 00 00 FF 
09bf4     1C E4 05 F1 | 	add	objptr, ##7196
09bf8     F2 38 02 FB | 	rdlong	local10, objptr
09bfc     45 00 00 FF 
09c00     60 E4 85 F1 | 	sub	objptr, ##35424
09c04     1C 3B 52 F2 | 	cmps	local11, local10 wc
09c08     E4 FA 9F CD |  if_b	jmp	#LR__0841
09c0c                 | LR__0846
09c0c                 | ' return 0
09c0c     00 FA 05 F6 | 	mov	result1, #0
09c10                 | LR__0847
09c10     A7 F0 03 F6 | 	mov	ptra, fp
09c14     B2 00 A0 FD | 	call	#popregs_
09c18                 | _compile_print_ret
09c18     2D 00 64 FD | 	ret
09c1c                 | 
09c1c                 | ' 
09c1c                 | ' '----- compile 'if' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
09c1c                 | ' 
09c1c                 | ' function compile_if(aline as ulong) as ulong  
09c1c                 | _compile_if
09c1c     09 4A 05 F6 | 	mov	COUNT_, #9
09c20     A8 00 A0 FD | 	call	#pushregs_
09c24                 | _compile_if_enter
09c24     09 2D 02 F6 | 	mov	local04, arg01
09c28                 | ' return expr()
09c28     F8 21 B0 FD | 	call	#_expr
09c2c     37 00 00 FF 
09c30     44 E4 05 F1 | 	add	objptr, ##28228
09c34     F2 14 02 FB | 	rdlong	arg02, objptr
09c38     0A 2F 02 F6 | 	mov	local05, arg02
09c3c     03 2E 66 F0 | 	shl	local05, #3
09c40     02 00 00 FF 
09c44     38 E4 85 F1 | 	sub	objptr, ##1080
09c48     F2 2E 02 F1 | 	add	local05, objptr
09c4c     04 2E 06 F1 | 	add	local05, #4
09c50     17 2F 02 FB | 	rdlong	local05, local05
09c54     01 14 06 F1 | 	add	arg02, #1
09c58     02 00 00 FF 
09c5c     38 E4 05 F1 | 	add	objptr, ##1080
09c60     F2 14 62 FC | 	wrlong	arg02, objptr
09c64     37 00 00 FF 
09c68     44 E4 85 F1 | 	sub	objptr, ##28228
09c6c                 | ' 
09c6c                 | ' err=compile_fun_1p()
09c6c                 | ' cmd=lparts(ct).token : ct+=1 : if cmd<>token_then then return 52
09c6c     5B 2E 0E F2 | 	cmp	local05, #91 wz
09c70     34 FA 05 56 |  if_ne	mov	result1, #52
09c74     20 01 90 5D |  if_ne	jmp	#LR__0852
09c78     58 2A 06 F6 | 	mov	local03, #88
09c7c     13 31 02 F6 | 	mov	local06, local01
09c80     14 33 02 F6 | 	mov	local07, local02
09c84     15 15 02 F6 | 	mov	arg02, local03
09c88     4A 00 00 FF 
09c8c     7C E4 05 F1 | 	add	objptr, ##38012
09c90     F2 12 02 FB | 	rdlong	arg01, objptr
09c94     09 35 02 F6 | 	mov	local08, arg01
09c98     01 34 66 F0 | 	shl	local08, #1
09c9c     09 35 02 F1 | 	add	local08, arg01
09ca0     02 34 66 F0 | 	shl	local08, #2
09ca4     03 00 00 FF 
09ca8     00 E4 85 F1 | 	sub	objptr, ##1536
09cac     F2 34 02 F1 | 	add	local08, objptr
09cb0     1A 31 62 FC | 	wrlong	local06, local08
09cb4     03 00 00 FF 
09cb8     00 E4 05 F1 | 	add	objptr, ##1536
09cbc     F2 30 02 FB | 	rdlong	local06, objptr
09cc0     18 13 02 F6 | 	mov	arg01, local06
09cc4     01 12 66 F0 | 	shl	arg01, #1
09cc8     18 13 02 F1 | 	add	arg01, local06
09ccc     02 12 66 F0 | 	shl	arg01, #2
09cd0     03 00 00 FF 
09cd4     00 E4 85 F1 | 	sub	objptr, ##1536
09cd8     F2 12 02 F1 | 	add	arg01, objptr
09cdc     04 12 06 F1 | 	add	arg01, #4
09ce0     09 33 62 FC | 	wrlong	local07, arg01
09ce4     03 00 00 FF 
09ce8     00 E4 05 F1 | 	add	objptr, ##1536
09cec     F2 30 02 FB | 	rdlong	local06, objptr
09cf0     18 13 02 F6 | 	mov	arg01, local06
09cf4     01 12 66 F0 | 	shl	arg01, #1
09cf8     18 13 02 F1 | 	add	arg01, local06
09cfc     02 12 66 F0 | 	shl	arg01, #2
09d00     03 00 00 FF 
09d04     00 E4 85 F1 | 	sub	objptr, ##1536
09d08     F2 12 02 F1 | 	add	arg01, objptr
09d0c     08 12 06 F1 | 	add	arg01, #8
09d10     09 15 62 FC | 	wrlong	arg02, arg01
09d14     03 00 00 FF 
09d18     00 E4 05 F1 | 	add	objptr, ##1536
09d1c     F2 30 02 FB | 	rdlong	local06, objptr
09d20     01 30 06 F1 | 	add	local06, #1
09d24     F2 30 62 FC | 	wrlong	local06, objptr
09d28                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
09d28                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
09d28     13 00 00 FF 
09d2c     38 E4 85 F1 | 	sub	objptr, ##9784
09d30     F2 14 02 FB | 	rdlong	arg02, objptr
09d34     01 14 06 F1 | 	add	arg02, #1
09d38     03 14 66 F0 | 	shl	arg02, #3
09d3c     02 00 00 FF 
09d40     38 E4 85 F1 | 	sub	objptr, ##1080
09d44     F2 14 02 F1 | 	add	arg02, objptr
09d48     0A 13 02 FB | 	rdlong	arg01, arg02
09d4c     35 00 00 FF 
09d50     0C E4 85 F1 | 	sub	objptr, ##27148
09d54                 | ' 
09d54                 | ' select case s
09d54     B5 01 00 FF 
09d58     8E 15 06 F6 | 	mov	arg02, ##@LR__5567
09d5c     18 D1 B1 FD | 	call	#__system___string_cmp
09d60     00 FA 0D F2 | 	cmp	result1, #0 wz
09d64     1B FA 05 A6 |  if_e	mov	result1, #27
09d68     00 FA 05 56 |  if_ne	mov	result1, #0
09d6c     00 FA 0D F2 | 	cmp	result1, #0 wz
09d70     10 00 90 AD |  if_e	jmp	#LR__0850
09d74     05 12 06 F6 | 	mov	arg01, #5
09d78     38 E4 BF FD | 	call	#_compile_immediate_assign
09d7c     FD 36 02 F6 | 	mov	local09, result1
09d80     10 00 90 FD | 	jmp	#LR__0851
09d84                 | LR__0850
09d84     05 12 06 F6 | 	mov	arg01, #5
09d88     16 15 02 F6 | 	mov	arg02, local04
09d8c     50 DA BF FD | 	call	#_compile_immediate
09d90     FD 36 02 F6 | 	mov	local09, result1
09d94                 | LR__0851
09d94                 | ' return err
09d94     1B FB 01 F6 | 	mov	result1, local09
09d98                 | LR__0852
09d98     A7 F0 03 F6 | 	mov	ptra, fp
09d9c     B2 00 A0 FD | 	call	#popregs_
09da0                 | _compile_if_ret
09da0     2D 00 64 FD | 	ret
09da4                 | 
09da4                 | ' 
09da4                 | ' '----- compile 'else' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
09da4                 | ' 
09da4                 | ' function compile_else(aline as ulong) as ulong  
09da4                 | _compile_else
09da4     07 4A 05 F6 | 	mov	COUNT_, #7
09da8     A8 00 A0 FD | 	call	#pushregs_
09dac                 | _compile_else_enter
09dac     09 2D 02 F6 | 	mov	local04, arg01
09db0     5A 2A 06 F6 | 	mov	local03, #90
09db4     13 2F 02 F6 | 	mov	local05, local01
09db8     14 31 02 F6 | 	mov	local06, local02
09dbc     15 27 02 F6 | 	mov	local01, local03
09dc0     4A 00 00 FF 
09dc4     7C E4 05 F1 | 	add	objptr, ##38012
09dc8     F2 14 02 FB | 	rdlong	arg02, objptr
09dcc     0A 13 02 F6 | 	mov	arg01, arg02
09dd0     01 12 66 F0 | 	shl	arg01, #1
09dd4     0A 13 02 F1 | 	add	arg01, arg02
09dd8     02 12 66 F0 | 	shl	arg01, #2
09ddc     03 00 00 FF 
09de0     00 E4 85 F1 | 	sub	objptr, ##1536
09de4     F2 12 02 F1 | 	add	arg01, objptr
09de8     09 2F 62 FC | 	wrlong	local05, arg01
09dec     03 00 00 FF 
09df0     00 E4 05 F1 | 	add	objptr, ##1536
09df4     F2 2E 02 FB | 	rdlong	local05, objptr
09df8     17 15 02 F6 | 	mov	arg02, local05
09dfc     01 14 66 F0 | 	shl	arg02, #1
09e00     17 15 02 F1 | 	add	arg02, local05
09e04     02 14 66 F0 | 	shl	arg02, #2
09e08     03 00 00 FF 
09e0c     00 E4 85 F1 | 	sub	objptr, ##1536
09e10     F2 14 02 F1 | 	add	arg02, objptr
09e14     04 14 06 F1 | 	add	arg02, #4
09e18     0A 31 62 FC | 	wrlong	local06, arg02
09e1c     03 00 00 FF 
09e20     00 E4 05 F1 | 	add	objptr, ##1536
09e24     F2 30 02 FB | 	rdlong	local06, objptr
09e28     18 2F 02 F6 | 	mov	local05, local06
09e2c     01 2E 66 F0 | 	shl	local05, #1
09e30     18 2F 02 F1 | 	add	local05, local06
09e34     02 2E 66 F0 | 	shl	local05, #2
09e38     03 00 00 FF 
09e3c     00 E4 85 F1 | 	sub	objptr, ##1536
09e40     F2 2E 02 F1 | 	add	local05, objptr
09e44     08 2E 06 F1 | 	add	local05, #8
09e48     17 27 62 FC | 	wrlong	local01, local05
09e4c     03 00 00 FF 
09e50     00 E4 05 F1 | 	add	objptr, ##1536
09e54     F2 2E 02 FB | 	rdlong	local05, objptr
09e58     01 2E 06 F1 | 	add	local05, #1
09e5c     F2 2E 62 FC | 	wrlong	local05, objptr
09e60                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
09e60                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
09e60     13 00 00 FF 
09e64     38 E4 85 F1 | 	sub	objptr, ##9784
09e68     F2 30 02 FB | 	rdlong	local06, objptr
09e6c     01 30 06 F1 | 	add	local06, #1
09e70     03 30 66 F0 | 	shl	local06, #3
09e74     02 00 00 FF 
09e78     38 E4 85 F1 | 	sub	objptr, ##1080
09e7c     F2 30 02 F1 | 	add	local06, objptr
09e80     18 13 02 FB | 	rdlong	arg01, local06
09e84     35 00 00 FF 
09e88     0C E4 85 F1 | 	sub	objptr, ##27148
09e8c                 | ' 
09e8c                 | ' select case s
09e8c     B5 01 00 FF 
09e90     8E 15 06 F6 | 	mov	arg02, ##@LR__5567
09e94     E0 CF B1 FD | 	call	#__system___string_cmp
09e98     00 FA 0D F2 | 	cmp	result1, #0 wz
09e9c     1B FA 05 A6 |  if_e	mov	result1, #27
09ea0     00 FA 05 56 |  if_ne	mov	result1, #0
09ea4     00 FA 0D F2 | 	cmp	result1, #0 wz
09ea8     10 00 90 AD |  if_e	jmp	#LR__0860
09eac     05 12 06 F6 | 	mov	arg01, #5
09eb0     00 E3 BF FD | 	call	#_compile_immediate_assign
09eb4     FD 32 02 F6 | 	mov	local07, result1
09eb8     10 00 90 FD | 	jmp	#LR__0861
09ebc                 | LR__0860
09ebc     05 12 06 F6 | 	mov	arg01, #5
09ec0     16 15 02 F6 | 	mov	arg02, local04
09ec4     18 D9 BF FD | 	call	#_compile_immediate
09ec8     FD 32 02 F6 | 	mov	local07, result1
09ecc                 | LR__0861
09ecc                 | ' return err
09ecc     19 FB 01 F6 | 	mov	result1, local07
09ed0     A7 F0 03 F6 | 	mov	ptra, fp
09ed4     B2 00 A0 FD | 	call	#popregs_
09ed8                 | _compile_else_ret
09ed8     2D 00 64 FD | 	ret
09edc                 | 
09edc                 | ' 
09edc                 | ' '----- compile 'dim' command. Also it allocates the psram for an aray from the top of the memory
09edc                 | ' 
09edc                 | ' function compile_dim() as ulong  
09edc                 | _compile_dim
09edc     11 4A 05 F6 | 	mov	COUNT_, #17
09ee0     A8 00 A0 FD | 	call	#pushregs_
09ee4     01 26 06 F6 | 	mov	local01, #1
09ee8     01 28 06 F6 | 	mov	local02, #1
09eec     01 2A 06 F6 | 	mov	local03, #1
09ef0                 | ' 
09ef0                 | ' dims(0)=1: dims(1)=1: dims(2)=1
09ef0                 | ' if isname(lparts(ct).part$) then 
09ef0     37 00 00 FF 
09ef4     44 E4 05 F1 | 	add	objptr, ##28228
09ef8     F2 18 02 FB | 	rdlong	arg04, objptr
09efc     03 18 66 F0 | 	shl	arg04, #3
09f00     02 00 00 FF 
09f04     38 E4 85 F1 | 	sub	objptr, ##1080
09f08     F2 18 02 F1 | 	add	arg04, objptr
09f0c     0C 13 02 FB | 	rdlong	arg01, arg04
09f10     35 00 00 FF 
09f14     0C E4 85 F1 | 	sub	objptr, ##27148
09f18     1C C7 BF FD | 	call	#_isname
09f1c     00 FA 0D F2 | 	cmp	result1, #0 wz
09f20     78 05 90 AD |  if_e	jmp	#LR__0893
09f24     37 00 00 FF 
09f28     44 E4 05 F1 | 	add	objptr, ##28228
09f2c     F2 2C 02 FB | 	rdlong	local04, objptr
09f30     03 2C 66 F0 | 	shl	local04, #3
09f34     02 00 00 FF 
09f38     38 E4 85 F1 | 	sub	objptr, ##1080
09f3c     F2 2C 02 F1 | 	add	local04, objptr
09f40     16 2F 02 FB | 	rdlong	local05, local04
09f44     01 30 66 F6 | 	neg	local06, #1
09f48                 | '   varname2$=lparts(ct).part$ 
09f48                 | '   j=-1
09f48                 | '   if varnum>0 then
09f48     04 E4 85 F1 | 	sub	objptr, #4
09f4c     F2 32 02 FB | 	rdlong	local07, objptr
09f50     35 00 00 FF 
09f54     08 E4 85 F1 | 	sub	objptr, ##27144
09f58     01 32 56 F2 | 	cmps	local07, #1 wc
09f5c     58 00 90 CD |  if_b	jmp	#LR__0872
09f60                 | '     for i=0 to varnum-1
09f60     00 34 06 F6 | 	mov	local08, #0
09f64     35 00 00 FF 
09f68     08 E4 05 F1 | 	add	objptr, ##27144
09f6c     F2 36 02 FB | 	rdlong	local09, objptr
09f70     35 00 00 FF 
09f74     08 E4 85 F1 | 	sub	objptr, ##27144
09f78                 | LR__0870
09f78     1B 35 52 F2 | 	cmps	local08, local09 wc
09f7c     38 00 90 3D |  if_ae	jmp	#LR__0871
09f80                 | '       if variables(i).name=varname2$ then j=i : exit
09f80     1A 2D 02 F6 | 	mov	local04, local08
09f84     04 2C 66 F0 | 	shl	local04, #4
09f88     14 00 00 FF 
09f8c     F8 E5 05 F1 | 	add	objptr, ##10744
09f90     F2 2C 02 F1 | 	add	local04, objptr
09f94     16 13 02 FB | 	rdlong	arg01, local04
09f98     17 15 02 F6 | 	mov	arg02, local05
09f9c     14 00 00 FF 
09fa0     F8 E5 85 F1 | 	sub	objptr, ##10744
09fa4     D0 CE B1 FD | 	call	#__system___string_cmp
09fa8     00 FA 0D F2 | 	cmp	result1, #0 wz
09fac     1A 31 02 A6 |  if_e	mov	local06, local08
09fb0     01 34 06 51 |  if_ne	add	local08, #1
09fb4     C0 FF 9F 5D |  if_ne	jmp	#LR__0870
09fb8                 | LR__0871
09fb8                 | LR__0872
09fb8                 | '   if j=-1 then j=varnum else print "Dim: at line ";linenum;": warning: the variable existed."
09fb8     FF FF 7F FF 
09fbc     FF 31 0E F2 | 	cmp	local06, ##-1 wz
09fc0     35 00 00 AF 
09fc4     08 E4 05 A1 |  if_e	add	objptr, ##27144
09fc8     F2 30 02 AB |  if_e	rdlong	local06, objptr
09fcc     35 00 00 AF 
09fd0     08 E4 85 A1 |  if_e	sub	objptr, ##27144
09fd4     78 00 90 AD |  if_e	jmp	#LR__0873
09fd8     00 12 06 F6 | 	mov	arg01, #0
09fdc     98 2B B2 FD | 	call	#__system___getiolock_0611
09fe0     FD 12 02 F6 | 	mov	arg01, result1
09fe4     68 CE B1 FD | 	call	#__system___lockmem
09fe8     B8 01 00 FF 
09fec     42 14 06 F6 | 	mov	arg02, ##@LR__5827
09ff0     00 12 06 F6 | 	mov	arg01, #0
09ff4     00 16 06 F6 | 	mov	arg03, #0
09ff8     48 DB B1 FD | 	call	#__system___basic_print_string
09ffc     52 00 00 FF 
0a000     B0 E4 05 F1 | 	add	objptr, ##42160
0a004     F2 14 02 FB | 	rdlong	arg02, objptr
0a008     52 00 00 FF 
0a00c     B0 E4 85 F1 | 	sub	objptr, ##42160
0a010     00 12 06 F6 | 	mov	arg01, #0
0a014     00 16 06 F6 | 	mov	arg03, #0
0a018     0A 18 06 F6 | 	mov	arg04, #10
0a01c     A8 DB B1 FD | 	call	#__system___basic_print_unsigned
0a020     B8 01 00 FF 
0a024     50 14 06 F6 | 	mov	arg02, ##@LR__5828
0a028     00 12 06 F6 | 	mov	arg01, #0
0a02c     00 16 06 F6 | 	mov	arg03, #0
0a030     10 DB B1 FD | 	call	#__system___basic_print_string
0a034     00 12 06 F6 | 	mov	arg01, #0
0a038     0A 14 06 F6 | 	mov	arg02, #10
0a03c     00 16 06 F6 | 	mov	arg03, #0
0a040     A8 DA B1 FD | 	call	#__system___basic_print_char
0a044     00 12 06 F6 | 	mov	arg01, #0
0a048     2C 2B B2 FD | 	call	#__system___getiolock_0611
0a04c     FD 00 68 FC | 	wrlong	#0, result1
0a050                 | LR__0873
0a050                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then return 43
0a050     37 00 00 FF 
0a054     44 E4 05 F1 | 	add	objptr, ##28228
0a058     F2 14 02 FB | 	rdlong	arg02, objptr
0a05c     01 14 06 F1 | 	add	arg02, #1
0a060     03 14 66 F0 | 	shl	arg02, #3
0a064     02 00 00 FF 
0a068     38 E4 85 F1 | 	sub	objptr, ##1080
0a06c     F2 14 02 F1 | 	add	arg02, objptr
0a070     0A 13 02 FB | 	rdlong	arg01, arg02
0a074     B8 01 00 FF 
0a078     71 14 06 F6 | 	mov	arg02, ##@LR__5829
0a07c     35 00 00 FF 
0a080     0C E4 85 F1 | 	sub	objptr, ##27148
0a084     F0 CD B1 FD | 	call	#__system___string_cmp
0a088     00 FA 0D F2 | 	cmp	result1, #0 wz
0a08c     44 00 90 AD |  if_e	jmp	#LR__0874
0a090     37 00 00 FF 
0a094     44 E4 05 F1 | 	add	objptr, ##28228
0a098     F2 36 02 FB | 	rdlong	local09, objptr
0a09c     01 36 06 F1 | 	add	local09, #1
0a0a0     03 36 66 F0 | 	shl	local09, #3
0a0a4     02 00 00 FF 
0a0a8     38 E4 85 F1 | 	sub	objptr, ##1080
0a0ac     F2 36 02 F1 | 	add	local09, objptr
0a0b0     1B 13 02 FB | 	rdlong	arg01, local09
0a0b4     B8 01 00 FF 
0a0b8     73 14 06 F6 | 	mov	arg02, ##@LR__5830
0a0bc     35 00 00 FF 
0a0c0     0C E4 85 F1 | 	sub	objptr, ##27148
0a0c4     B0 CD B1 FD | 	call	#__system___string_cmp
0a0c8     00 FA 0D F2 | 	cmp	result1, #0 wz
0a0cc     2B FA 05 56 |  if_ne	mov	result1, #43
0a0d0     D0 04 90 5D |  if_ne	jmp	#LR__0895
0a0d4                 | LR__0874
0a0d4                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350	' allocate a typed array
0a0d4     37 00 00 FF 
0a0d8     44 E4 05 F1 | 	add	objptr, ##28228
0a0dc     F2 14 02 FB | 	rdlong	arg02, objptr
0a0e0     01 14 06 F1 | 	add	arg02, #1
0a0e4     03 14 66 F0 | 	shl	arg02, #3
0a0e8     02 00 00 FF 
0a0ec     38 E4 85 F1 | 	sub	objptr, ##1080
0a0f0     F2 14 02 F1 | 	add	arg02, objptr
0a0f4     0A 13 02 FB | 	rdlong	arg01, arg02
0a0f8     B8 01 00 FF 
0a0fc     76 14 06 F6 | 	mov	arg02, ##@LR__5831
0a100     35 00 00 FF 
0a104     0C E4 85 F1 | 	sub	objptr, ##27148
0a108     6C CD B1 FD | 	call	#__system___string_cmp
0a10c     00 FA 0D F2 | 	cmp	result1, #0 wz
0a110     37 00 00 AF 
0a114     44 E4 05 A1 |  if_e	add	objptr, ##28228
0a118     F2 38 02 AB |  if_e	rdlong	local10, objptr
0a11c     37 00 00 AF 
0a120     44 E4 85 A1 |  if_e	sub	objptr, ##28228
0a124     01 38 06 A1 |  if_e	add	local10, #1
0a128     5C 01 90 AD |  if_e	jmp	#LR__0879
0a12c     37 00 00 FF 
0a130     44 E4 05 F1 | 	add	objptr, ##28228
0a134     F2 38 02 FB | 	rdlong	local10, objptr
0a138     37 00 00 FF 
0a13c     44 E4 85 F1 | 	sub	objptr, ##28228
0a140     02 38 06 F1 | 	add	local10, #2
0a144     00 3A 06 F6 | 	mov	local11, #0
0a148                 | '   l=ct+2 : m=0 : do
0a148                 | LR__0875
0a148                 | '   if isdec(lparts(l).part$) then 
0a148     1C 2D 02 F6 | 	mov	local04, local10
0a14c     03 2C 66 F0 | 	shl	local04, #3
0a150     35 00 00 FF 
0a154     0C E4 05 F1 | 	add	objptr, ##27148
0a158     F2 2C 02 F1 | 	add	local04, objptr
0a15c     16 13 02 FB | 	rdlong	arg01, local04
0a160     35 00 00 FF 
0a164     0C E4 85 F1 | 	sub	objptr, ##27148
0a168     D0 CD BF FD | 	call	#_isdec
0a16c     00 FA 0D F2 | 	cmp	result1, #0 wz
0a170     44 00 90 AD |  if_e	jmp	#LR__0876
0a174     1D 3D 02 F6 | 	mov	local12, local11
0a178     13 3D 06 F1 | 	add	local12, #local01
0a17c     1C 37 02 F6 | 	mov	local09, local10
0a180     03 36 66 F0 | 	shl	local09, #3
0a184     35 00 00 FF 
0a188     0C E4 05 F1 | 	add	objptr, ##27148
0a18c     F2 36 02 F1 | 	add	local09, objptr
0a190     1B 13 02 FB | 	rdlong	arg01, local09
0a194     00 14 06 F6 | 	mov	arg02, #0
0a198     35 00 00 FF 
0a19c     0C E4 85 F1 | 	sub	objptr, ##27148
0a1a0     9C 01 B2 FD | 	call	#__system____builtin_atoi
0a1a4     FD 3E 02 F6 | 	mov	local13, result1
0a1a8                 | 	'.live	local13
0a1a8                 | 	'.live	local12
0a1a8     00 3C 8E F9 | 	altd	local12, #0
0a1ac     1F 3D 02 F6 | 	mov	local12, local13
0a1b0     01 3A 06 F1 | 	add	local11, #1
0a1b4     08 00 90 FD | 	jmp	#LR__0877
0a1b8                 | LR__0876
0a1b8                 | '     return(17)
0a1b8     11 FA 05 F6 | 	mov	result1, #17
0a1bc     E4 03 90 FD | 	jmp	#LR__0895
0a1c0                 | LR__0877
0a1c0                 | '   if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then return 44 
0a1c0     1C 2D 02 F6 | 	mov	local04, local10
0a1c4     01 2C 06 F1 | 	add	local04, #1
0a1c8     03 2C 66 F0 | 	shl	local04, #3
0a1cc     35 00 00 FF 
0a1d0     0C E4 05 F1 | 	add	objptr, ##27148
0a1d4     F2 2C 02 F1 | 	add	local04, objptr
0a1d8     16 13 02 FB | 	rdlong	arg01, local04
0a1dc     B8 01 00 FF 
0a1e0     79 14 06 F6 | 	mov	arg02, ##@LR__5832
0a1e4     35 00 00 FF 
0a1e8     0C E4 85 F1 | 	sub	objptr, ##27148
0a1ec     88 CC B1 FD | 	call	#__system___string_cmp
0a1f0     00 FA 0D F2 | 	cmp	result1, #0 wz
0a1f4     3C 00 90 AD |  if_e	jmp	#LR__0878
0a1f8     1C 3F 02 F6 | 	mov	local13, local10
0a1fc     01 3E 06 F1 | 	add	local13, #1
0a200     03 3E 66 F0 | 	shl	local13, #3
0a204     35 00 00 FF 
0a208     0C E4 05 F1 | 	add	objptr, ##27148
0a20c     F2 3E 02 F1 | 	add	local13, objptr
0a210     1F 13 02 FB | 	rdlong	arg01, local13
0a214     B8 01 00 FF 
0a218     7B 14 06 F6 | 	mov	arg02, ##@LR__5833
0a21c     35 00 00 FF 
0a220     0C E4 85 F1 | 	sub	objptr, ##27148
0a224     50 CC B1 FD | 	call	#__system___string_cmp
0a228     00 FA 0D F2 | 	cmp	result1, #0 wz
0a22c     2C FA 05 56 |  if_ne	mov	result1, #44
0a230     70 03 90 5D |  if_ne	jmp	#LR__0895
0a234                 | LR__0878
0a234     02 38 06 F1 | 	add	local10, #2
0a238     1C 2D 02 F6 | 	mov	local04, local10
0a23c     01 2C 86 F1 | 	sub	local04, #1
0a240     03 2C 66 F0 | 	shl	local04, #3
0a244     35 00 00 FF 
0a248     0C E4 05 F1 | 	add	objptr, ##27148
0a24c     F2 2C 02 F1 | 	add	local04, objptr
0a250     16 13 02 FB | 	rdlong	arg01, local04
0a254     B8 01 00 FF 
0a258     7D 14 06 F6 | 	mov	arg02, ##@LR__5834
0a25c     35 00 00 FF 
0a260     0C E4 85 F1 | 	sub	objptr, ##27148
0a264     10 CC B1 FD | 	call	#__system___string_cmp
0a268     00 FA 0D F2 | 	cmp	result1, #0 wz
0a26c     03 3A 56 52 |  if_ne	cmps	local11, #3 wc
0a270     D4 FE 9F 4D |  if_c_and_nz	jmp	#LR__0875
0a274                 | '   if m>3 then return 45
0a274     04 3A 56 F2 | 	cmps	local11, #4 wc
0a278     2D FA 05 36 |  if_ae	mov	result1, #45
0a27c     24 03 90 3D |  if_ae	jmp	#LR__0895
0a280     00 41 06 F6 | 	mov	local14, #256
0a284     0C 42 06 F6 | 	mov	local15, #12
0a288                 | LR__0879
0a288                 | '   arraytype=array_no_type : esize=12
0a288                 | ' 1350 
0a288                 | '   if lparts(l).part$="as" then
0a288     1C 2D 02 F6 | 	mov	local04, local10
0a28c     03 2C 66 F0 | 	shl	local04, #3
0a290     35 00 00 FF 
0a294     0C E4 05 F1 | 	add	objptr, ##27148
0a298     F2 2C 02 F1 | 	add	local04, objptr
0a29c     16 13 02 FB | 	rdlong	arg01, local04
0a2a0     B8 01 00 FF 
0a2a4     7F 14 06 F6 | 	mov	arg02, ##@LR__5835
0a2a8     35 00 00 FF 
0a2ac     0C E4 85 F1 | 	sub	objptr, ##27148
0a2b0     C4 CB B1 FD | 	call	#__system___string_cmp
0a2b4     00 FA 0D F2 | 	cmp	result1, #0 wz
0a2b8     E8 01 90 5D |  if_ne	jmp	#LR__0894
0a2bc                 | '     select case lparts(l+1).part$
0a2bc     1C 3D 02 F6 | 	mov	local12, local10
0a2c0     01 3C 06 F1 | 	add	local12, #1
0a2c4     03 3C 66 F0 | 	shl	local12, #3
0a2c8     35 00 00 FF 
0a2cc     0C E4 05 F1 | 	add	objptr, ##27148
0a2d0     F2 3C 02 F1 | 	add	local12, objptr
0a2d4     1E 45 02 FB | 	rdlong	local16, local12
0a2d8     B8 01 00 FF 
0a2dc     82 14 06 F6 | 	mov	arg02, ##@LR__5836
0a2e0     22 13 02 F6 | 	mov	arg01, local16
0a2e4     35 00 00 FF 
0a2e8     0C E4 85 F1 | 	sub	objptr, ##27148
0a2ec     88 CB B1 FD | 	call	#__system___string_cmp
0a2f0     00 FA 0D F2 | 	cmp	result1, #0 wz
0a2f4     0C 01 90 AD |  if_e	jmp	#LR__0880
0a2f8     B8 01 00 FF 
0a2fc     87 14 06 F6 | 	mov	arg02, ##@LR__5837
0a300     22 13 02 F6 | 	mov	arg01, local16
0a304     70 CB B1 FD | 	call	#__system___string_cmp
0a308     00 FA 0D F2 | 	cmp	result1, #0 wz
0a30c     00 01 90 AD |  if_e	jmp	#LR__0881
0a310     B8 01 00 FF 
0a314     8D 14 06 F6 | 	mov	arg02, ##@LR__5838
0a318     22 13 02 F6 | 	mov	arg01, local16
0a31c     58 CB B1 FD | 	call	#__system___string_cmp
0a320     00 FA 0D F2 | 	cmp	result1, #0 wz
0a324     F4 00 90 AD |  if_e	jmp	#LR__0882
0a328     B8 01 00 FF 
0a32c     93 14 06 F6 | 	mov	arg02, ##@LR__5839
0a330     22 13 02 F6 | 	mov	arg01, local16
0a334     40 CB B1 FD | 	call	#__system___string_cmp
0a338     00 FA 0D F2 | 	cmp	result1, #0 wz
0a33c     E8 00 90 AD |  if_e	jmp	#LR__0883
0a340     B8 01 00 FF 
0a344     9A 14 06 F6 | 	mov	arg02, ##@LR__5840
0a348     22 13 02 F6 | 	mov	arg01, local16
0a34c     28 CB B1 FD | 	call	#__system___string_cmp
0a350     00 FA 0D F2 | 	cmp	result1, #0 wz
0a354     DC 00 90 AD |  if_e	jmp	#LR__0884
0a358     B8 01 00 FF 
0a35c     9F 14 06 F6 | 	mov	arg02, ##@LR__5841
0a360     22 13 02 F6 | 	mov	arg01, local16
0a364     10 CB B1 FD | 	call	#__system___string_cmp
0a368     00 FA 0D F2 | 	cmp	result1, #0 wz
0a36c     D0 00 90 AD |  if_e	jmp	#LR__0885
0a370     B8 01 00 FF 
0a374     A7 14 06 F6 | 	mov	arg02, ##@LR__5842
0a378     22 13 02 F6 | 	mov	arg01, local16
0a37c     F8 CA B1 FD | 	call	#__system___string_cmp
0a380     00 FA 0D F2 | 	cmp	result1, #0 wz
0a384     C4 00 90 AD |  if_e	jmp	#LR__0886
0a388     B8 01 00 FF 
0a38c     AD 14 06 F6 | 	mov	arg02, ##@LR__5843
0a390     22 13 02 F6 | 	mov	arg01, local16
0a394     E0 CA B1 FD | 	call	#__system___string_cmp
0a398     00 FA 0D F2 | 	cmp	result1, #0 wz
0a39c     B8 00 90 AD |  if_e	jmp	#LR__0887
0a3a0     B8 01 00 FF 
0a3a4     B3 14 06 F6 | 	mov	arg02, ##@LR__5844
0a3a8     22 13 02 F6 | 	mov	arg01, local16
0a3ac     C8 CA B1 FD | 	call	#__system___string_cmp
0a3b0     00 FA 0D F2 | 	cmp	result1, #0 wz
0a3b4     AC 00 90 AD |  if_e	jmp	#LR__0888
0a3b8     B8 01 00 FF 
0a3bc     BA 14 06 F6 | 	mov	arg02, ##@LR__5845
0a3c0     22 13 02 F6 | 	mov	arg01, local16
0a3c4     B0 CA B1 FD | 	call	#__system___string_cmp
0a3c8     00 FA 0D F2 | 	cmp	result1, #0 wz
0a3cc     A0 00 90 AD |  if_e	jmp	#LR__0889
0a3d0     B8 01 00 FF 
0a3d4     C1 14 06 F6 | 	mov	arg02, ##@LR__5846
0a3d8     22 13 02 F6 | 	mov	arg01, local16
0a3dc     98 CA B1 FD | 	call	#__system___string_cmp
0a3e0     00 FA 0D F2 | 	cmp	result1, #0 wz
0a3e4     94 00 90 AD |  if_e	jmp	#LR__0890
0a3e8     B8 01 00 FF 
0a3ec     C8 14 06 F6 | 	mov	arg02, ##@LR__5847
0a3f0     22 13 02 F6 | 	mov	arg01, local16
0a3f4     80 CA B1 FD | 	call	#__system___string_cmp
0a3f8     00 FA 0D F2 | 	cmp	result1, #0 wz
0a3fc     88 00 90 AD |  if_e	jmp	#LR__0891
0a400     90 00 90 FD | 	jmp	#LR__0892
0a404                 | LR__0880
0a404     01 41 06 F6 | 	mov	local14, #257
0a408     01 42 06 F6 | 	mov	local15, #1
0a40c     94 00 90 FD | 	jmp	#LR__0894
0a410                 | LR__0881
0a410     02 41 06 F6 | 	mov	local14, #258
0a414     01 42 06 F6 | 	mov	local15, #1
0a418     88 00 90 FD | 	jmp	#LR__0894
0a41c                 | LR__0882
0a41c     03 41 06 F6 | 	mov	local14, #259
0a420     02 42 06 F6 | 	mov	local15, #2
0a424     7C 00 90 FD | 	jmp	#LR__0894
0a428                 | LR__0883
0a428     04 41 06 F6 | 	mov	local14, #260
0a42c     02 42 06 F6 | 	mov	local15, #2
0a430     70 00 90 FD | 	jmp	#LR__0894
0a434                 | LR__0884
0a434     05 41 06 F6 | 	mov	local14, #261
0a438     04 42 06 F6 | 	mov	local15, #4
0a43c     64 00 90 FD | 	jmp	#LR__0894
0a440                 | LR__0885
0a440     05 41 06 F6 | 	mov	local14, #261
0a444     04 42 06 F6 | 	mov	local15, #4
0a448     58 00 90 FD | 	jmp	#LR__0894
0a44c                 | LR__0886
0a44c     06 41 06 F6 | 	mov	local14, #262
0a450     04 42 06 F6 | 	mov	local15, #4
0a454     4C 00 90 FD | 	jmp	#LR__0894
0a458                 | LR__0887
0a458     07 41 06 F6 | 	mov	local14, #263
0a45c     08 42 06 F6 | 	mov	local15, #8
0a460     40 00 90 FD | 	jmp	#LR__0894
0a464                 | LR__0888
0a464     08 41 06 F6 | 	mov	local14, #264
0a468     08 42 06 F6 | 	mov	local15, #8
0a46c     34 00 90 FD | 	jmp	#LR__0894
0a470                 | LR__0889
0a470     09 41 06 F6 | 	mov	local14, #265
0a474     04 42 06 F6 | 	mov	local15, #4
0a478     28 00 90 FD | 	jmp	#LR__0894
0a47c                 | LR__0890
0a47c     0A 41 06 F6 | 	mov	local14, #266
0a480     08 42 06 F6 | 	mov	local15, #8
0a484     1C 00 90 FD | 	jmp	#LR__0894
0a488                 | LR__0891
0a488     0B 41 06 F6 | 	mov	local14, #267
0a48c     04 42 06 F6 | 	mov	local15, #4
0a490     10 00 90 FD | 	jmp	#LR__0894
0a494                 | LR__0892
0a494     2F FA 05 F6 | 	mov	result1, #47
0a498     08 01 90 FD | 	jmp	#LR__0895
0a49c                 | LR__0893
0a49c                 | '   return 46
0a49c     2E FA 05 F6 | 	mov	result1, #46
0a4a0     00 01 90 FD | 	jmp	#LR__0895
0a4a4                 | LR__0894
0a4a4     13 43 02 FD | 	qmul	local15, local01
0a4a8     18 32 62 FD | 	getqx	local07
0a4ac     14 33 02 FD | 	qmul	local07, local02
0a4b0     18 44 62 FD | 	getqx	local16
0a4b4     15 45 02 FD | 	qmul	local16, local03
0a4b8     52 00 00 FF 
0a4bc     98 E4 05 F1 | 	add	objptr, ##42136
0a4c0     F2 46 02 FB | 	rdlong	local17, objptr
0a4c4     20 15 02 F6 | 	mov	arg02, local14
0a4c8     18 44 62 FD | 	getqx	local16
0a4cc     22 47 82 F1 | 	sub	local17, local16
0a4d0     10 46 86 F1 | 	sub	local17, #16
0a4d4     0F 46 26 F5 | 	andn	local17, #15
0a4d8     F2 46 62 FC | 	wrlong	local17, objptr
0a4dc     52 00 00 FF 
0a4e0     98 E4 85 F1 | 	sub	objptr, ##42136
0a4e4     23 13 02 F6 | 	mov	arg01, local17
0a4e8     30 91 B1 FD | 	call	#_psdpoke
0a4ec     23 13 02 F6 | 	mov	arg01, local17
0a4f0     02 12 06 F1 | 	add	arg01, #2
0a4f4     21 15 02 F6 | 	mov	arg02, local15
0a4f8     20 91 B1 FD | 	call	#_psdpoke
0a4fc     23 13 02 F6 | 	mov	arg01, local17
0a500     04 12 06 F1 | 	add	arg01, #4
0a504     13 15 02 F6 | 	mov	arg02, local01
0a508     C8 90 B1 FD | 	call	#_pslpoke
0a50c     23 13 02 F6 | 	mov	arg01, local17
0a510     08 12 06 F1 | 	add	arg01, #8
0a514     14 15 02 F6 | 	mov	arg02, local02
0a518     B8 90 B1 FD | 	call	#_pslpoke
0a51c     23 13 02 F6 | 	mov	arg01, local17
0a520     0C 12 06 F1 | 	add	arg01, #12
0a524     15 15 02 F6 | 	mov	arg02, local03
0a528     A8 90 B1 FD | 	call	#_pslpoke
0a52c     18 3D 02 F6 | 	mov	local12, local06
0a530     04 3C 66 F0 | 	shl	local12, #4
0a534     14 00 00 FF 
0a538     F8 E5 05 F1 | 	add	objptr, ##10744
0a53c     F2 3C 02 F1 | 	add	local12, objptr
0a540     1E 2F 62 FC | 	wrlong	local05, local12
0a544     18 3D 02 F6 | 	mov	local12, local06
0a548     04 3C 66 F0 | 	shl	local12, #4
0a54c     F2 3C 02 F1 | 	add	local12, objptr
0a550     04 3C 06 F1 | 	add	local12, #4
0a554     1E 47 62 FC | 	wrlong	local17, local12
0a558     18 3D 02 F6 | 	mov	local12, local06
0a55c     04 3C 66 F0 | 	shl	local12, #4
0a560     F2 3C 02 F1 | 	add	local12, objptr
0a564     0C 3C 06 F1 | 	add	local12, #12
0a568     1E 41 62 FC | 	wrlong	local14, local12
0a56c                 | ' memtop=arrayptr
0a56c                 | ' psdpoke arrayptr,arraytype 
0a56c                 | ' psdpoke arrayptr+2,esize 
0a56c                 | ' pslpoke arrayptr+4,dims(0)
0a56c                 | ' pslpoke arrayptr+8,dims(1)
0a56c                 | ' pslpoke arrayptr+12,dims(2)
0a56c                 | ' variables(j).name=varname2$
0a56c                 | ' variables(j).value.uresult=arrayptr
0a56c                 | ' variables(j).vartype=arraytype
0a56c                 | ' if j=varnum then varnum+=1
0a56c     20 00 00 FF 
0a570     10 E4 05 F1 | 	add	objptr, ##16400
0a574     F2 32 02 FB | 	rdlong	local07, objptr
0a578     35 00 00 FF 
0a57c     08 E4 85 F1 | 	sub	objptr, ##27144
0a580     19 31 0A F2 | 	cmp	local06, local07 wz
0a584     35 00 00 AF 
0a588     08 E4 05 A1 |  if_e	add	objptr, ##27144
0a58c     F2 32 02 AB |  if_e	rdlong	local07, objptr
0a590     01 32 06 A1 |  if_e	add	local07, #1
0a594     F2 32 62 AC |  if_e	wrlong	local07, objptr
0a598     35 00 00 AF 
0a59c     08 E4 85 A1 |  if_e	sub	objptr, ##27144
0a5a0                 | ' return 0
0a5a0     00 FA 05 F6 | 	mov	result1, #0
0a5a4                 | LR__0895
0a5a4     A7 F0 03 F6 | 	mov	ptra, fp
0a5a8     B2 00 A0 FD | 	call	#popregs_
0a5ac                 | _compile_dim_ret
0a5ac     2D 00 64 FD | 	ret
0a5b0                 | 
0a5b0                 | ' 
0a5b0                 | ' '----- compile 'for' command. 
0a5b0                 | ' 
0a5b0                 | ' function compile_for() as ulong  
0a5b0                 | _compile_for
0a5b0     0E 4A 05 F6 | 	mov	COUNT_, #14
0a5b4     A8 00 A0 FD | 	call	#pushregs_
0a5b8                 | ' 
0a5b8                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else return 32
0a5b8     37 00 00 FF 
0a5bc     44 E4 05 F1 | 	add	objptr, ##28228
0a5c0     F2 14 02 FB | 	rdlong	arg02, objptr
0a5c4     01 14 06 F1 | 	add	arg02, #1
0a5c8     03 14 66 F0 | 	shl	arg02, #3
0a5cc     02 00 00 FF 
0a5d0     38 E4 85 F1 | 	sub	objptr, ##1080
0a5d4     F2 14 02 F1 | 	add	arg02, objptr
0a5d8     0A 13 02 FB | 	rdlong	arg01, arg02
0a5dc     35 00 00 FF 
0a5e0     0C E4 85 F1 | 	sub	objptr, ##27148
0a5e4                 | ' 
0a5e4                 | ' select case s
0a5e4     B5 01 00 FF 
0a5e8     8E 15 06 F6 | 	mov	arg02, ##@LR__5567
0a5ec     88 C8 B1 FD | 	call	#__system___string_cmp
0a5f0     00 FA 0D F2 | 	cmp	result1, #0 wz
0a5f4     1B FA 05 A6 |  if_e	mov	result1, #27
0a5f8     00 FA 05 56 |  if_ne	mov	result1, #0
0a5fc     00 FA 0D F2 | 	cmp	result1, #0 wz
0a600     0C 00 90 AD |  if_e	jmp	#LR__0900
0a604     05 12 06 F6 | 	mov	arg01, #5
0a608     A8 DB BF FD | 	call	#_compile_immediate_assign
0a60c     08 00 90 FD | 	jmp	#LR__0901
0a610                 | LR__0900
0a610     20 FA 05 F6 | 	mov	result1, #32
0a614     58 08 90 FD | 	jmp	#LR__0917
0a618                 | LR__0901
0a618     4A 00 00 FF 
0a61c     7C E4 05 F1 | 	add	objptr, ##38012
0a620     F2 14 02 FB | 	rdlong	arg02, objptr
0a624     0A 13 02 F6 | 	mov	arg01, arg02
0a628     01 12 86 F1 | 	sub	arg01, #1
0a62c     09 2D 02 F6 | 	mov	local04, arg01
0a630     01 2C 66 F0 | 	shl	local04, #1
0a634     09 2D 02 F1 | 	add	local04, arg01
0a638     02 2C 66 F0 | 	shl	local04, #2
0a63c     03 00 00 FF 
0a640     00 E4 85 F1 | 	sub	objptr, ##1536
0a644     F2 2C 02 F1 | 	add	local04, objptr
0a648     16 27 02 FB | 	rdlong	local01, local04
0a64c     04 2C 06 F1 | 	add	local04, #4
0a650     16 2F 02 FB | 	rdlong	local05, local04
0a654     01 14 86 F1 | 	sub	arg02, #1
0a658     0A 2D 02 F6 | 	mov	local04, arg02
0a65c     01 2C 66 F0 | 	shl	local04, #1
0a660     0A 2D 02 F1 | 	add	local04, arg02
0a664     02 2C 66 F0 | 	shl	local04, #2
0a668     F2 30 02 F6 | 	mov	local06, objptr
0a66c     F2 2C 02 F1 | 	add	local04, objptr
0a670     08 2C 06 F1 | 	add	local04, #8
0a674     16 2D 02 FB | 	rdlong	local04, local04
0a678     17 29 02 F6 | 	mov	local02, local05
0a67c     16 2B 02 F6 | 	mov	local03, local04
0a680                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then  return 34'		' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
0a680     17 2A 0E F2 | 	cmp	local03, #23 wz
0a684     47 00 00 FF 
0a688     7C E4 85 F1 | 	sub	objptr, ##36476
0a68c     22 FA 05 56 |  if_ne	mov	result1, #34
0a690     DC 07 90 5D |  if_ne	jmp	#LR__0917
0a694     13 33 02 F6 | 	mov	local07, local01
0a698                 | ' varnum=t1.result.uresult
0a698                 | ' if lparts(ct).part$<>"to" then return 33
0a698     37 00 00 FF 
0a69c     44 E4 05 F1 | 	add	objptr, ##28228
0a6a0     F2 2C 02 FB | 	rdlong	local04, objptr
0a6a4     03 2C 66 F0 | 	shl	local04, #3
0a6a8     02 00 00 FF 
0a6ac     38 E4 85 F1 | 	sub	objptr, ##1080
0a6b0     F2 2C 02 F1 | 	add	local04, objptr
0a6b4     16 13 02 FB | 	rdlong	arg01, local04
0a6b8     B8 01 00 FF 
0a6bc     CF 14 06 F6 | 	mov	arg02, ##@LR__5848
0a6c0     35 00 00 FF 
0a6c4     0C E4 85 F1 | 	sub	objptr, ##27148
0a6c8     AC C7 B1 FD | 	call	#__system___string_cmp
0a6cc     00 FA 0D F2 | 	cmp	result1, #0 wz
0a6d0     21 FA 05 56 |  if_ne	mov	result1, #33
0a6d4     98 07 90 5D |  if_ne	jmp	#LR__0917
0a6d8     37 00 00 FF 
0a6dc     44 E4 05 F1 | 	add	objptr, ##28228
0a6e0     F2 34 02 FB | 	rdlong	local08, objptr
0a6e4     01 34 06 F1 | 	add	local08, #1
0a6e8     F2 34 62 FC | 	wrlong	local08, objptr
0a6ec     37 00 00 FF 
0a6f0     44 E4 85 F1 | 	sub	objptr, ##28228
0a6f4     2C 17 B0 FD | 	call	#_expr
0a6f8                 | ' ct+=1
0a6f8                 | ' expr()  										' there is "to" value pushed on the stack
0a6f8                 | ' if lparts(ct).part$="step" orelse left$(lparts(ct).part$,2)="s." then
0a6f8     37 00 00 FF 
0a6fc     44 E4 05 F1 | 	add	objptr, ##28228
0a700     F2 2C 02 FB | 	rdlong	local04, objptr
0a704     03 2C 66 F0 | 	shl	local04, #3
0a708     02 00 00 FF 
0a70c     38 E4 85 F1 | 	sub	objptr, ##1080
0a710     F2 2C 02 F1 | 	add	local04, objptr
0a714     16 13 02 FB | 	rdlong	arg01, local04
0a718     B8 01 00 FF 
0a71c     D2 14 06 F6 | 	mov	arg02, ##@LR__5849
0a720     35 00 00 FF 
0a724     0C E4 85 F1 | 	sub	objptr, ##27148
0a728     4C C7 B1 FD | 	call	#__system___string_cmp
0a72c     00 FA 0D F2 | 	cmp	result1, #0 wz
0a730     48 00 90 AD |  if_e	jmp	#LR__0902
0a734     37 00 00 FF 
0a738     44 E4 05 F1 | 	add	objptr, ##28228
0a73c     F2 2C 02 FB | 	rdlong	local04, objptr
0a740     03 2C 66 F0 | 	shl	local04, #3
0a744     02 00 00 FF 
0a748     38 E4 85 F1 | 	sub	objptr, ##1080
0a74c     F2 2C 02 F1 | 	add	local04, objptr
0a750     16 13 02 FB | 	rdlong	arg01, local04
0a754     02 14 06 F6 | 	mov	arg02, #2
0a758     35 00 00 FF 
0a75c     0C E4 85 F1 | 	sub	objptr, ##27148
0a760     68 E7 B1 FD | 	call	#__system__Left_S
0a764     FD 12 02 F6 | 	mov	arg01, result1
0a768     B8 01 00 FF 
0a76c     D7 14 06 F6 | 	mov	arg02, ##@LR__5850
0a770     04 C7 B1 FD | 	call	#__system___string_cmp
0a774     00 FA 0D F2 | 	cmp	result1, #0 wz
0a778     9C 05 90 5D |  if_ne	jmp	#LR__0915
0a77c                 | LR__0902
0a77c                 | '   if left$(lparts(ct).part$,2)="s." andalso len(lparts(ct).part$)>2 then ' correct the part
0a77c     37 00 00 FF 
0a780     44 E4 05 F1 | 	add	objptr, ##28228
0a784     F2 2C 02 FB | 	rdlong	local04, objptr
0a788     03 2C 66 F0 | 	shl	local04, #3
0a78c     02 00 00 FF 
0a790     38 E4 85 F1 | 	sub	objptr, ##1080
0a794     F2 2C 02 F1 | 	add	local04, objptr
0a798     16 13 02 FB | 	rdlong	arg01, local04
0a79c     02 14 06 F6 | 	mov	arg02, #2
0a7a0     35 00 00 FF 
0a7a4     0C E4 85 F1 | 	sub	objptr, ##27148
0a7a8     20 E7 B1 FD | 	call	#__system__Left_S
0a7ac     FD 12 02 F6 | 	mov	arg01, result1
0a7b0     B8 01 00 FF 
0a7b4     DA 14 06 F6 | 	mov	arg02, ##@LR__5851
0a7b8     BC C6 B1 FD | 	call	#__system___string_cmp
0a7bc     00 FA 0D F2 | 	cmp	result1, #0 wz
0a7c0     30 05 90 5D |  if_ne	jmp	#LR__0914
0a7c4     37 00 00 FF 
0a7c8     44 E4 05 F1 | 	add	objptr, ##28228
0a7cc     F2 2C 02 FB | 	rdlong	local04, objptr
0a7d0     03 2C 66 F0 | 	shl	local04, #3
0a7d4     02 00 00 FF 
0a7d8     38 E4 85 F1 | 	sub	objptr, ##1080
0a7dc     F2 2C 02 F1 | 	add	local04, objptr
0a7e0     16 13 02 FB | 	rdlong	arg01, local04
0a7e4     35 00 00 FF 
0a7e8     0C E4 85 F1 | 	sub	objptr, ##27148
0a7ec     09 37 02 F6 | 	mov	local09, arg01
0a7f0     97 06 48 FB | 	callpa	#(@LR__0904-@LR__0903)>>2,fcache_load_ptr_
0a7f4                 | LR__0903
0a7f4     1B FB C9 FA | 	rdbyte	result1, local09 wz
0a7f8     01 36 06 51 |  if_ne	add	local09, #1
0a7fc     F4 FF 9F 5D |  if_ne	jmp	#LR__0903
0a800                 | LR__0904
0a800     09 37 82 F1 | 	sub	local09, arg01
0a804     03 36 56 F2 | 	cmps	local09, #3 wc
0a808     E8 04 90 CD |  if_b	jmp	#LR__0914
0a80c     37 00 00 FF 
0a810     44 E4 05 F1 | 	add	objptr, ##28228
0a814     F2 2C 02 FB | 	rdlong	local04, objptr
0a818     16 39 02 F6 | 	mov	local10, local04
0a81c     03 38 66 F0 | 	shl	local10, #3
0a820     02 00 00 FF 
0a824     38 E4 85 F1 | 	sub	objptr, ##1080
0a828     F2 38 02 F1 | 	add	local10, objptr
0a82c     03 2C 66 F0 | 	shl	local04, #3
0a830     F2 2C 02 F1 | 	add	local04, objptr
0a834     16 2D 02 FB | 	rdlong	local04, local04
0a838     02 00 00 FF 
0a83c     38 E4 05 F1 | 	add	objptr, ##1080
0a840     F2 12 02 FB | 	rdlong	arg01, objptr
0a844     03 12 66 F0 | 	shl	arg01, #3
0a848     02 00 00 FF 
0a84c     38 E4 85 F1 | 	sub	objptr, ##1080
0a850     F2 12 02 F1 | 	add	arg01, objptr
0a854     09 13 02 FB | 	rdlong	arg01, arg01
0a858     35 00 00 FF 
0a85c     0C E4 85 F1 | 	sub	objptr, ##27148
0a860     09 37 02 F6 | 	mov	local09, arg01
0a864     97 06 48 FB | 	callpa	#(@LR__0906-@LR__0905)>>2,fcache_load_ptr_
0a868                 | LR__0905
0a868     1B FB C9 FA | 	rdbyte	result1, local09 wz
0a86c     01 36 06 51 |  if_ne	add	local09, #1
0a870     F4 FF 9F 5D |  if_ne	jmp	#LR__0905
0a874                 | LR__0906
0a874     09 37 82 F1 | 	sub	local09, arg01
0a878     1B 15 02 F6 | 	mov	arg02, local09
0a87c     02 14 86 F1 | 	sub	arg02, #2
0a880     16 13 02 F6 | 	mov	arg01, local04
0a884     CC E6 B1 FD | 	call	#__system__Right_S
0a888     1C FB 61 FC | 	wrlong	result1, local10
0a88c     37 00 00 FF 
0a890     44 E4 05 F1 | 	add	objptr, ##28228
0a894     F2 2C 02 FB | 	rdlong	local04, objptr
0a898     16 39 02 F6 | 	mov	local10, local04
0a89c     03 38 66 F0 | 	shl	local10, #3
0a8a0     02 00 00 FF 
0a8a4     38 E4 85 F1 | 	sub	objptr, ##1080
0a8a8     F2 38 02 F1 | 	add	local10, objptr
0a8ac     03 2C 66 F0 | 	shl	local04, #3
0a8b0     F2 2C 02 F1 | 	add	local04, objptr
0a8b4     16 13 02 FB | 	rdlong	arg01, local04
0a8b8     35 00 00 FF 
0a8bc     0C E4 85 F1 | 	sub	objptr, ##27148
0a8c0     14 B6 BF FD | 	call	#_isfunction
0a8c4     FD FA E1 F8 | 	getbyte	result1, result1, #0
0a8c8     04 38 06 F1 | 	add	local10, #4
0a8cc     1C FB 61 FC | 	wrlong	result1, local10
0a8d0                 | '     lparts(ct).token=isfunction(lparts(ct).part$) : if lparts(ct).token>0 then goto 2102
0a8d0     37 00 00 FF 
0a8d4     44 E4 05 F1 | 	add	objptr, ##28228
0a8d8     F2 38 02 FB | 	rdlong	local10, objptr
0a8dc     03 38 66 F0 | 	shl	local10, #3
0a8e0     02 00 00 FF 
0a8e4     38 E4 85 F1 | 	sub	objptr, ##1080
0a8e8     F2 38 02 F1 | 	add	local10, objptr
0a8ec     04 38 06 F1 | 	add	local10, #4
0a8f0     1C 2D 02 FB | 	rdlong	local04, local10
0a8f4     01 2C 56 F2 | 	cmps	local04, #1 wc
0a8f8     35 00 00 FF 
0a8fc     0C E4 85 F1 | 	sub	objptr, ##27148
0a900     D4 03 90 3D |  if_ae	jmp	#LR__0913
0a904     37 00 00 FF 
0a908     44 E4 05 F1 | 	add	objptr, ##28228
0a90c     F2 2C 02 FB | 	rdlong	local04, objptr
0a910     16 39 02 F6 | 	mov	local10, local04
0a914     03 38 66 F0 | 	shl	local10, #3
0a918     02 00 00 FF 
0a91c     38 E4 85 F1 | 	sub	objptr, ##1080
0a920     F2 38 02 F1 | 	add	local10, objptr
0a924     03 2C 66 F0 | 	shl	local04, #3
0a928     F2 2C 02 F1 | 	add	local04, objptr
0a92c     16 13 02 FB | 	rdlong	arg01, local04
0a930     35 00 00 FF 
0a934     0C E4 85 F1 | 	sub	objptr, ##27148
0a938     30 9F BF FD | 	call	#_isnotename
0a93c     04 38 06 F1 | 	add	local10, #4
0a940     1C FB 61 FC | 	wrlong	result1, local10
0a944                 | '     lparts(ct).token=isnotename(lparts(ct).part$) :
0a944                 | '     if lparts(ct).token>0 then 
0a944     37 00 00 FF 
0a948     44 E4 05 F1 | 	add	objptr, ##28228
0a94c     F2 38 02 FB | 	rdlong	local10, objptr
0a950     03 38 66 F0 | 	shl	local10, #3
0a954     02 00 00 FF 
0a958     38 E4 85 F1 | 	sub	objptr, ##1080
0a95c     F2 38 02 F1 | 	add	local10, objptr
0a960     04 38 06 F1 | 	add	local10, #4
0a964     1C 2D 02 FB | 	rdlong	local04, local10
0a968     01 2C 56 F2 | 	cmps	local04, #1 wc
0a96c     35 00 00 FF 
0a970     0C E4 85 F1 | 	sub	objptr, ##27148
0a974     94 00 90 CD |  if_b	jmp	#LR__0907
0a978     37 00 00 FF 
0a97c     44 E4 05 F1 | 	add	objptr, ##28228
0a980     F2 38 02 FB | 	rdlong	local10, objptr
0a984     03 38 66 F0 | 	shl	local10, #3
0a988     02 00 00 FF 
0a98c     38 E4 85 F1 | 	sub	objptr, ##1080
0a990     F2 38 02 F1 | 	add	local10, objptr
0a994     04 38 06 F1 | 	add	local10, #4
0a998     1C 13 02 FB | 	rdlong	arg01, local10
0a99c     35 00 00 FF 
0a9a0     0C E4 85 F1 | 	sub	objptr, ##27148
0a9a4     B8 C6 BF FD | 	call	#_getnoteval
0a9a8     FD 12 02 F6 | 	mov	arg01, result1
0a9ac     37 00 00 FF 
0a9b0     44 E4 05 F1 | 	add	objptr, ##28228
0a9b4     F2 38 02 FB | 	rdlong	local10, objptr
0a9b8     03 38 66 F0 | 	shl	local10, #3
0a9bc     02 00 00 FF 
0a9c0     38 E4 85 F1 | 	sub	objptr, ##1080
0a9c4     F2 38 02 F1 | 	add	local10, objptr
0a9c8     35 00 00 FF 
0a9cc     0C E4 85 F1 | 	sub	objptr, ##27148
0a9d0     F0 E6 B1 FD | 	call	#__system__str_S
0a9d4     1C FB 61 FC | 	wrlong	result1, local10
0a9d8     37 00 00 FF 
0a9dc     44 E4 05 F1 | 	add	objptr, ##28228
0a9e0     F2 38 02 FB | 	rdlong	local10, objptr
0a9e4     03 38 66 F0 | 	shl	local10, #3
0a9e8     02 00 00 FF 
0a9ec     38 E4 85 F1 | 	sub	objptr, ##1080
0a9f0     F2 38 02 F1 | 	add	local10, objptr
0a9f4     04 38 06 F1 | 	add	local10, #4
0a9f8     01 00 80 FF 
0a9fc     1C 05 68 FC | 	wrlong	##514, local10
0aa00     35 00 00 FF 
0aa04     0C E4 85 F1 | 	sub	objptr, ##27148
0aa08     CC 02 90 FD | 	jmp	#LR__0913
0aa0c                 | LR__0907
0aa0c     37 00 00 FF 
0aa10     44 E4 05 F1 | 	add	objptr, ##28228
0aa14     F2 2C 02 FB | 	rdlong	local04, objptr
0aa18     16 39 02 F6 | 	mov	local10, local04
0aa1c     03 38 66 F0 | 	shl	local10, #3
0aa20     02 00 00 FF 
0aa24     38 E4 85 F1 | 	sub	objptr, ##1080
0aa28     F2 38 02 F1 | 	add	local10, objptr
0aa2c     03 2C 66 F0 | 	shl	local04, #3
0aa30     F2 2C 02 F1 | 	add	local04, objptr
0aa34     16 13 02 FB | 	rdlong	arg01, local04
0aa38     35 00 00 FF 
0aa3c     0C E4 85 F1 | 	sub	objptr, ##27148
0aa40     A8 9D BF FD | 	call	#_isconstant
0aa44     04 38 06 F1 | 	add	local10, #4
0aa48     1C FB 61 FC | 	wrlong	result1, local10
0aa4c                 | '     lparts(ct).token=isconstant(lparts(ct).part$) : if lparts(ct).token>0 then lparts(ct).part$=str$(lparts(ct).token) : lparts(ct).token=token_integer : goto 2102
0aa4c     37 00 00 FF 
0aa50     44 E4 05 F1 | 	add	objptr, ##28228
0aa54     F2 38 02 FB | 	rdlong	local10, objptr
0aa58     03 38 66 F0 | 	shl	local10, #3
0aa5c     02 00 00 FF 
0aa60     38 E4 85 F1 | 	sub	objptr, ##1080
0aa64     F2 38 02 F1 | 	add	local10, objptr
0aa68     04 38 06 F1 | 	add	local10, #4
0aa6c     1C 2D 02 FB | 	rdlong	local04, local10
0aa70     01 2C 56 F2 | 	cmps	local04, #1 wc
0aa74     35 00 00 FF 
0aa78     0C E4 85 F1 | 	sub	objptr, ##27148
0aa7c     8C 00 90 CD |  if_b	jmp	#LR__0908
0aa80     37 00 00 FF 
0aa84     44 E4 05 F1 | 	add	objptr, ##28228
0aa88     F2 34 02 FB | 	rdlong	local08, objptr
0aa8c     1A 39 02 F6 | 	mov	local10, local08
0aa90     03 38 66 F0 | 	shl	local10, #3
0aa94     02 00 00 FF 
0aa98     38 E4 85 F1 | 	sub	objptr, ##1080
0aa9c     F2 38 02 F1 | 	add	local10, objptr
0aaa0     03 34 66 F0 | 	shl	local08, #3
0aaa4     F2 34 02 F1 | 	add	local08, objptr
0aaa8     04 34 06 F1 | 	add	local08, #4
0aaac     1A 13 02 FB | 	rdlong	arg01, local08
0aab0     35 00 00 FF 
0aab4     0C E4 85 F1 | 	sub	objptr, ##27148
0aab8     09 13 52 F6 | 	abs	arg01, arg01 wc
0aabc     1F 3A C6 C9 |  if_b	decod	local11, #31
0aac0     00 3A 06 36 |  if_ae	mov	local11, #0
0aac4     FC ED B1 FD | 	call	#__system___float_fromuns
0aac8     1D FB 61 F5 | 	xor	result1, local11
0aacc     FD 12 02 F6 | 	mov	arg01, result1
0aad0     F0 E5 B1 FD | 	call	#__system__str_S
0aad4     1C FB 61 FC | 	wrlong	result1, local10
0aad8     37 00 00 FF 
0aadc     44 E4 05 F1 | 	add	objptr, ##28228
0aae0     F2 38 02 FB | 	rdlong	local10, objptr
0aae4     03 38 66 F0 | 	shl	local10, #3
0aae8     02 00 00 FF 
0aaec     38 E4 85 F1 | 	sub	objptr, ##1080
0aaf0     F2 38 02 F1 | 	add	local10, objptr
0aaf4     04 38 06 F1 | 	add	local10, #4
0aaf8     01 00 80 FF 
0aafc     1C 03 68 FC | 	wrlong	##513, local10
0ab00     35 00 00 FF 
0ab04     0C E4 85 F1 | 	sub	objptr, ##27148
0ab08     CC 01 90 FD | 	jmp	#LR__0913
0ab0c                 | LR__0908
0ab0c     37 00 00 FF 
0ab10     44 E4 05 F1 | 	add	objptr, ##28228
0ab14     F2 38 02 FB | 	rdlong	local10, objptr
0ab18     03 38 66 F0 | 	shl	local10, #3
0ab1c     02 00 00 FF 
0ab20     38 E4 85 F1 | 	sub	objptr, ##1080
0ab24     F2 38 02 F1 | 	add	local10, objptr
0ab28     1C 13 02 FB | 	rdlong	arg01, local10
0ab2c     35 00 00 FF 
0ab30     0C E4 85 F1 | 	sub	objptr, ##27148
0ab34     74 BD BF FD | 	call	#_isnum
0ab38     FD 3C 02 F6 | 	mov	local12, result1
0ab3c     37 00 00 FF 
0ab40     44 E4 05 F1 | 	add	objptr, ##28228
0ab44     F2 38 02 FB | 	rdlong	local10, objptr
0ab48     03 38 66 F0 | 	shl	local10, #3
0ab4c     02 00 00 FF 
0ab50     38 E4 85 F1 | 	sub	objptr, ##1080
0ab54     F2 38 02 F1 | 	add	local10, objptr
0ab58     1C 13 02 FB | 	rdlong	arg01, local10
0ab5c     35 00 00 FF 
0ab60     0C E4 85 F1 | 	sub	objptr, ##27148
0ab64     30 C1 BF FD | 	call	#_isint
0ab68     FD 3E 02 F6 | 	mov	local13, result1
0ab6c     37 00 00 FF 
0ab70     44 E4 05 F1 | 	add	objptr, ##28228
0ab74     F2 38 02 FB | 	rdlong	local10, objptr
0ab78     03 38 66 F0 | 	shl	local10, #3
0ab7c     02 00 00 FF 
0ab80     38 E4 85 F1 | 	sub	objptr, ##1080
0ab84     F2 38 02 F1 | 	add	local10, objptr
0ab88     1C 13 02 FB | 	rdlong	arg01, local10
0ab8c     35 00 00 FF 
0ab90     0C E4 85 F1 | 	sub	objptr, ##27148
0ab94     A4 C3 BF FD | 	call	#_isdec
0ab98     FD 40 02 F6 | 	mov	local14, result1
0ab9c                 | '     b1=isnum(lparts(ct).part$) : b2=isint(lparts(ct).part$) : b3=isdec(lparts(ct).part$)
0ab9c                 | '     if b1 andalso b2 andalso b3 then lparts(ct).token=token_decimal 			: goto 2102 	' pure decimal for line num
0ab9c     00 3C 0E F2 | 	cmp	local12, #0 wz
0aba0     00 3E 0E 52 |  if_ne	cmp	local13, #0 wz
0aba4     00 40 0E 52 |  if_ne	cmp	local14, #0 wz
0aba8     34 00 90 AD |  if_e	jmp	#LR__0909
0abac     37 00 00 FF 
0abb0     44 E4 05 F1 | 	add	objptr, ##28228
0abb4     F2 38 02 FB | 	rdlong	local10, objptr
0abb8     03 38 66 F0 | 	shl	local10, #3
0abbc     02 00 00 FF 
0abc0     38 E4 85 F1 | 	sub	objptr, ##1080
0abc4     F2 38 02 F1 | 	add	local10, objptr
0abc8     04 38 06 F1 | 	add	local10, #4
0abcc     01 00 80 FF 
0abd0     1C 01 68 FC | 	wrlong	##512, local10
0abd4     35 00 00 FF 
0abd8     0C E4 85 F1 | 	sub	objptr, ##27148
0abdc     F8 00 90 FD | 	jmp	#LR__0913
0abe0                 | LR__0909
0abe0                 | '     if b1 andalso b2 andalso (not b3) then lparts(ct).token=token_integer 		: goto 2102 	' integer
0abe0     00 3C 0E F2 | 	cmp	local12, #0 wz
0abe4     00 3E 0E 52 |  if_ne	cmp	local13, #0 wz
0abe8     20 35 22 56 |  if_ne	not	local08, local14
0abec     00 34 0E 52 |  if_ne	cmp	local08, #0 wz
0abf0     34 00 90 AD |  if_e	jmp	#LR__0910
0abf4     37 00 00 FF 
0abf8     44 E4 05 F1 | 	add	objptr, ##28228
0abfc     F2 38 02 FB | 	rdlong	local10, objptr
0ac00     03 38 66 F0 | 	shl	local10, #3
0ac04     02 00 00 FF 
0ac08     38 E4 85 F1 | 	sub	objptr, ##1080
0ac0c     F2 38 02 F1 | 	add	local10, objptr
0ac10     04 38 06 F1 | 	add	local10, #4
0ac14     01 00 80 FF 
0ac18     1C 03 68 FC | 	wrlong	##513, local10
0ac1c     35 00 00 FF 
0ac20     0C E4 85 F1 | 	sub	objptr, ##27148
0ac24     B0 00 90 FD | 	jmp	#LR__0913
0ac28                 | LR__0910
0ac28                 | '     if b1 andalso (not b2) andalso (not b3) then lparts(ct).token=token_float 		: goto 2102 	' float
0ac28     00 3C 0E F2 | 	cmp	local12, #0 wz
0ac2c     1F 3F 22 56 |  if_ne	not	local13, local13
0ac30     00 3E 0E 52 |  if_ne	cmp	local13, #0 wz
0ac34     20 41 22 56 |  if_ne	not	local14, local14
0ac38     00 40 0E 52 |  if_ne	cmp	local14, #0 wz
0ac3c     34 00 90 AD |  if_e	jmp	#LR__0911
0ac40     37 00 00 FF 
0ac44     44 E4 05 F1 | 	add	objptr, ##28228
0ac48     F2 38 02 FB | 	rdlong	local10, objptr
0ac4c     03 38 66 F0 | 	shl	local10, #3
0ac50     02 00 00 FF 
0ac54     38 E4 85 F1 | 	sub	objptr, ##1080
0ac58     F2 38 02 F1 | 	add	local10, objptr
0ac5c     04 38 06 F1 | 	add	local10, #4
0ac60     01 00 80 FF 
0ac64     1C 05 68 FC | 	wrlong	##514, local10
0ac68     35 00 00 FF 
0ac6c     0C E4 85 F1 | 	sub	objptr, ##27148
0ac70     64 00 90 FD | 	jmp	#LR__0913
0ac74                 | LR__0911
0ac74                 | '     if isname(lparts(ct).part$) then lparts(ct).token=token_name : goto 2102	
0ac74     37 00 00 FF 
0ac78     44 E4 05 F1 | 	add	objptr, ##28228
0ac7c     F2 38 02 FB | 	rdlong	local10, objptr
0ac80     03 38 66 F0 | 	shl	local10, #3
0ac84     02 00 00 FF 
0ac88     38 E4 85 F1 | 	sub	objptr, ##1080
0ac8c     F2 38 02 F1 | 	add	local10, objptr
0ac90     1C 13 02 FB | 	rdlong	arg01, local10
0ac94     35 00 00 FF 
0ac98     0C E4 85 F1 | 	sub	objptr, ##27148
0ac9c     98 B9 BF FD | 	call	#_isname
0aca0     00 FA 0D F2 | 	cmp	result1, #0 wz
0aca4     30 00 90 AD |  if_e	jmp	#LR__0912
0aca8     37 00 00 FF 
0acac     44 E4 05 F1 | 	add	objptr, ##28228
0acb0     F2 38 02 FB | 	rdlong	local10, objptr
0acb4     03 38 66 F0 | 	shl	local10, #3
0acb8     02 00 00 FF 
0acbc     38 E4 85 F1 | 	sub	objptr, ##1080
0acc0     F2 38 02 F1 | 	add	local10, objptr
0acc4     04 38 06 F1 | 	add	local10, #4
0acc8     01 00 80 FF 
0accc     1C 09 68 FC | 	wrlong	##516, local10
0acd0     35 00 00 FF 
0acd4     0C E4 85 F1 | 	sub	objptr, ##27148
0acd8                 | LR__0912
0acd8                 | LR__0913
0acd8     37 00 00 FF 
0acdc     44 E4 05 F1 | 	add	objptr, ##28228
0ace0     F2 34 02 FB | 	rdlong	local08, objptr
0ace4     01 34 86 F1 | 	sub	local08, #1
0ace8     F2 34 62 FC | 	wrlong	local08, objptr
0acec     37 00 00 FF 
0acf0     44 E4 85 F1 | 	sub	objptr, ##28228
0acf4                 | LR__0914
0acf4     37 00 00 FF 
0acf8     44 E4 05 F1 | 	add	objptr, ##28228
0acfc     F2 34 02 FB | 	rdlong	local08, objptr
0ad00     01 34 06 F1 | 	add	local08, #1
0ad04     F2 34 62 FC | 	wrlong	local08, objptr
0ad08     37 00 00 FF 
0ad0c     44 E4 85 F1 | 	sub	objptr, ##28228
0ad10     10 11 B0 FD | 	call	#_expr
0ad14     78 00 90 FD | 	jmp	#LR__0916
0ad18                 | LR__0915
0ad18     4A 00 00 FF 
0ad1c     7C E4 05 F1 | 	add	objptr, ##38012
0ad20     F2 40 02 FB | 	rdlong	local14, objptr
0ad24     20 39 02 F6 | 	mov	local10, local14
0ad28     01 38 66 F0 | 	shl	local10, #1
0ad2c     20 39 02 F1 | 	add	local10, local14
0ad30     02 38 66 F0 | 	shl	local10, #2
0ad34     03 00 00 FF 
0ad38     00 E4 85 F1 | 	sub	objptr, ##1536
0ad3c     F2 38 02 F1 | 	add	local10, objptr
0ad40     08 38 06 F1 | 	add	local10, #8
0ad44     1C 39 68 FC | 	wrlong	#28, local10
0ad48     03 00 00 FF 
0ad4c     00 E4 05 F1 | 	add	objptr, ##1536
0ad50     F2 40 02 FB | 	rdlong	local14, objptr
0ad54     20 39 02 F6 | 	mov	local10, local14
0ad58     01 38 66 F0 | 	shl	local10, #1
0ad5c     20 39 02 F1 | 	add	local10, local14
0ad60     02 38 66 F0 | 	shl	local10, #2
0ad64     03 00 00 FF 
0ad68     00 E4 85 F1 | 	sub	objptr, ##1536
0ad6c     F2 38 02 F1 | 	add	local10, objptr
0ad70     1C 03 68 FC | 	wrlong	#1, local10
0ad74     03 00 00 FF 
0ad78     00 E4 05 F1 | 	add	objptr, ##1536
0ad7c     F2 34 02 FB | 	rdlong	local08, objptr
0ad80     01 34 06 F1 | 	add	local08, #1
0ad84     F2 34 62 FC | 	wrlong	local08, objptr
0ad88     4A 00 00 FF 
0ad8c     7C E4 85 F1 | 	sub	objptr, ##38012
0ad90                 | LR__0916
0ad90     4A 00 00 FF 
0ad94     7C E4 05 F1 | 	add	objptr, ##38012
0ad98     F2 40 02 FB | 	rdlong	local14, objptr
0ad9c     20 39 02 F6 | 	mov	local10, local14
0ada0     01 38 66 F0 | 	shl	local10, #1
0ada4     20 39 02 F1 | 	add	local10, local14
0ada8     02 38 66 F0 | 	shl	local10, #2
0adac     03 00 00 FF 
0adb0     00 E4 85 F1 | 	sub	objptr, ##1536
0adb4     F2 38 02 F1 | 	add	local10, objptr
0adb8     08 38 06 F1 | 	add	local10, #8
0adbc     1C 39 68 FC | 	wrlong	#28, local10
0adc0     03 00 00 FF 
0adc4     00 E4 05 F1 | 	add	objptr, ##1536
0adc8     F2 40 02 FB | 	rdlong	local14, objptr
0adcc     20 39 02 F6 | 	mov	local10, local14
0add0     01 38 66 F0 | 	shl	local10, #1
0add4     20 39 02 F1 | 	add	local10, local14
0add8     02 38 66 F0 | 	shl	local10, #2
0addc     03 00 00 FF 
0ade0     00 E4 85 F1 | 	sub	objptr, ##1536
0ade4     F2 38 02 F1 | 	add	local10, objptr
0ade8     1C 33 62 FC | 	wrlong	local07, local10
0adec     03 00 00 FF 
0adf0     00 E4 05 F1 | 	add	objptr, ##1536
0adf4     F2 40 02 FB | 	rdlong	local14, objptr
0adf8     01 40 06 F1 | 	add	local14, #1
0adfc     F2 40 62 FC | 	wrlong	local14, objptr
0ae00     20 39 02 F6 | 	mov	local10, local14
0ae04     01 38 66 F0 | 	shl	local10, #1
0ae08     20 39 02 F1 | 	add	local10, local14
0ae0c     02 38 66 F0 | 	shl	local10, #2
0ae10     03 00 00 FF 
0ae14     00 E4 85 F1 | 	sub	objptr, ##1536
0ae18     F2 38 02 F1 | 	add	local10, objptr
0ae1c     08 38 06 F1 | 	add	local10, #8
0ae20     1C 95 68 FC | 	wrlong	#74, local10
0ae24     03 00 00 FF 
0ae28     00 E4 05 F1 | 	add	objptr, ##1536
0ae2c     F2 40 02 FB | 	rdlong	local14, objptr
0ae30     20 39 02 F6 | 	mov	local10, local14
0ae34     01 38 66 F0 | 	shl	local10, #1
0ae38     20 39 02 F1 | 	add	local10, local14
0ae3c     02 38 66 F0 | 	shl	local10, #2
0ae40     03 00 00 FF 
0ae44     00 E4 85 F1 | 	sub	objptr, ##1536
0ae48     F2 38 02 F1 | 	add	local10, objptr
0ae4c     1C 01 68 FC | 	wrlong	#0, local10
0ae50     03 00 00 FF 
0ae54     00 E4 05 F1 | 	add	objptr, ##1536
0ae58     F2 34 02 FB | 	rdlong	local08, objptr
0ae5c     01 34 06 F1 | 	add	local08, #1
0ae60     F2 34 62 FC | 	wrlong	local08, objptr
0ae64     4A 00 00 FF 
0ae68     7C E4 85 F1 | 	sub	objptr, ##38012
0ae6c                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
0ae6c                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
0ae6c                 | ' return 0
0ae6c     00 FA 05 F6 | 	mov	result1, #0
0ae70                 | LR__0917
0ae70     A7 F0 03 F6 | 	mov	ptra, fp
0ae74     B2 00 A0 FD | 	call	#popregs_
0ae78                 | _compile_for_ret
0ae78     2D 00 64 FD | 	ret
0ae7c                 | 
0ae7c                 | ' 
0ae7c                 | ' '----- compile 'next' command. 
0ae7c                 | ' 
0ae7c                 | ' function compile_next() as ulong
0ae7c                 | _compile_next
0ae7c     04 4A 05 F6 | 	mov	COUNT_, #4
0ae80     A8 00 A0 FD | 	call	#pushregs_
0ae84     37 00 00 FF 
0ae88     44 E4 05 F1 | 	add	objptr, ##28228
0ae8c     F2 14 02 FB | 	rdlong	arg02, objptr
0ae90     03 14 66 F0 | 	shl	arg02, #3
0ae94     02 00 00 FF 
0ae98     38 E4 85 F1 | 	sub	objptr, ##1080
0ae9c     F2 14 02 F1 | 	add	arg02, objptr
0aea0     0A 27 02 FB | 	rdlong	local01, arg02
0aea4                 | ' 
0aea4                 | ' varname$=lparts(ct).part$ 
0aea4                 | ' if varnum=0 then return 35
0aea4     04 E4 85 F1 | 	sub	objptr, #4
0aea8     F2 14 0A FB | 	rdlong	arg02, objptr wz
0aeac     35 00 00 FF 
0aeb0     08 E4 85 F1 | 	sub	objptr, ##27144
0aeb4     23 FA 05 A6 |  if_e	mov	result1, #35
0aeb8     4C 01 90 AD |  if_e	jmp	#LR__0922
0aebc     01 28 66 F6 | 	neg	local02, #1
0aec0                 | ' j=-1
0aec0                 | ' for i=0 to varnum-1
0aec0     00 2A 06 F6 | 	mov	local03, #0
0aec4     35 00 00 FF 
0aec8     08 E4 05 F1 | 	add	objptr, ##27144
0aecc     F2 2C 02 FB | 	rdlong	local04, objptr
0aed0     35 00 00 FF 
0aed4     08 E4 85 F1 | 	sub	objptr, ##27144
0aed8                 | LR__0920
0aed8     16 2B 12 F2 | 	cmp	local03, local04 wc
0aedc     38 00 90 3D |  if_ae	jmp	#LR__0921
0aee0                 | '   if variables(i).name=varname$ then j=i : exit
0aee0     15 15 02 F6 | 	mov	arg02, local03
0aee4     04 14 66 F0 | 	shl	arg02, #4
0aee8     14 00 00 FF 
0aeec     F8 E5 05 F1 | 	add	objptr, ##10744
0aef0     F2 14 02 F1 | 	add	arg02, objptr
0aef4     0A 13 02 FB | 	rdlong	arg01, arg02
0aef8     13 15 02 F6 | 	mov	arg02, local01
0aefc     14 00 00 FF 
0af00     F8 E5 85 F1 | 	sub	objptr, ##10744
0af04     70 BF B1 FD | 	call	#__system___string_cmp
0af08     00 FA 0D F2 | 	cmp	result1, #0 wz
0af0c     15 29 02 A6 |  if_e	mov	local02, local03
0af10     01 2A 06 51 |  if_ne	add	local03, #1
0af14     C0 FF 9F 5D |  if_ne	jmp	#LR__0920
0af18                 | LR__0921
0af18                 | ' if j=-1 then return 35
0af18     FF FF 7F FF 
0af1c     FF 29 0E F2 | 	cmp	local02, ##-1 wz
0af20     23 FA 05 A6 |  if_e	mov	result1, #35
0af24     E0 00 90 AD |  if_e	jmp	#LR__0922
0af28     4A 00 00 FF 
0af2c     7C E4 05 F1 | 	add	objptr, ##38012
0af30     F2 2C 02 FB | 	rdlong	local04, objptr
0af34     16 2B 02 F6 | 	mov	local03, local04
0af38     01 2A 66 F0 | 	shl	local03, #1
0af3c     16 2B 02 F1 | 	add	local03, local04
0af40     02 2A 66 F0 | 	shl	local03, #2
0af44     03 00 00 FF 
0af48     00 E4 85 F1 | 	sub	objptr, ##1536
0af4c     F2 2A 02 F1 | 	add	local03, objptr
0af50     08 2A 06 F1 | 	add	local03, #8
0af54     15 39 68 FC | 	wrlong	#28, local03
0af58     03 00 00 FF 
0af5c     00 E4 05 F1 | 	add	objptr, ##1536
0af60     F2 2C 02 FB | 	rdlong	local04, objptr
0af64     16 2B 02 F6 | 	mov	local03, local04
0af68     01 2A 66 F0 | 	shl	local03, #1
0af6c     16 2B 02 F1 | 	add	local03, local04
0af70     02 2A 66 F0 | 	shl	local03, #2
0af74     03 00 00 FF 
0af78     00 E4 85 F1 | 	sub	objptr, ##1536
0af7c     F2 2A 02 F1 | 	add	local03, objptr
0af80     15 29 62 FC | 	wrlong	local02, local03
0af84     03 00 00 FF 
0af88     00 E4 05 F1 | 	add	objptr, ##1536
0af8c     F2 2C 02 FB | 	rdlong	local04, objptr
0af90     01 2C 06 F1 | 	add	local04, #1
0af94     F2 2C 62 FC | 	wrlong	local04, objptr
0af98     16 2B 02 F6 | 	mov	local03, local04
0af9c     01 2A 66 F0 | 	shl	local03, #1
0afa0     16 2B 02 F1 | 	add	local03, local04
0afa4     02 2A 66 F0 | 	shl	local03, #2
0afa8     03 00 00 FF 
0afac     00 E4 85 F1 | 	sub	objptr, ##1536
0afb0     F2 2A 02 F1 | 	add	local03, objptr
0afb4     08 2A 06 F1 | 	add	local03, #8
0afb8     15 97 68 FC | 	wrlong	#75, local03
0afbc     03 00 00 FF 
0afc0     00 E4 05 F1 | 	add	objptr, ##1536
0afc4     F2 2C 02 FB | 	rdlong	local04, objptr
0afc8     16 2B 02 F6 | 	mov	local03, local04
0afcc     01 2A 66 F0 | 	shl	local03, #1
0afd0     16 2B 02 F1 | 	add	local03, local04
0afd4     02 2A 66 F0 | 	shl	local03, #2
0afd8     03 00 00 FF 
0afdc     00 E4 85 F1 | 	sub	objptr, ##1536
0afe0     F2 2A 02 F1 | 	add	local03, objptr
0afe4     15 01 68 FC | 	wrlong	#0, local03
0afe8     03 00 00 FF 
0afec     00 E4 05 F1 | 	add	objptr, ##1536
0aff0     F2 2C 02 FB | 	rdlong	local04, objptr
0aff4     01 2C 06 F1 | 	add	local04, #1
0aff8     F2 2C 62 FC | 	wrlong	local04, objptr
0affc     4A 00 00 FF 
0b000     7C E4 85 F1 | 	sub	objptr, ##38012
0b004                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
0b004                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
0b004                 | ' return 0
0b004     00 FA 05 F6 | 	mov	result1, #0
0b008                 | LR__0922
0b008     A7 F0 03 F6 | 	mov	ptra, fp
0b00c     B2 00 A0 FD | 	call	#popregs_
0b010                 | _compile_next_ret
0b010     2D 00 64 FD | 	ret
0b014                 | 
0b014                 | ' 
0b014                 | ' '----- compile 'gosub' command. Gosub is "goto" that saves the return address, so add token_gosub, then compile goto
0b014                 | ' 
0b014                 | ' function compile_gosub() as ulong
0b014                 | _compile_gosub
0b014     02 4A 05 F6 | 	mov	COUNT_, #2
0b018     A8 00 A0 FD | 	call	#pushregs_
0b01c     4A 00 00 FF 
0b020     7C E4 05 F1 | 	add	objptr, ##38012
0b024     F2 26 02 FB | 	rdlong	local01, objptr
0b028     13 29 02 F6 | 	mov	local02, local01
0b02c     01 28 66 F0 | 	shl	local02, #1
0b030     13 29 02 F1 | 	add	local02, local01
0b034     02 28 66 F0 | 	shl	local02, #2
0b038     03 00 00 FF 
0b03c     00 E4 85 F1 | 	sub	objptr, ##1536
0b040     F2 28 02 F1 | 	add	local02, objptr
0b044     08 28 06 F1 | 	add	local02, #8
0b048     14 53 69 FC | 	wrlong	#169, local02
0b04c     03 00 00 FF 
0b050     00 E4 05 F1 | 	add	objptr, ##1536
0b054     F2 28 02 FB | 	rdlong	local02, objptr
0b058     01 28 06 F1 | 	add	local02, #1
0b05c     F2 28 62 FC | 	wrlong	local02, objptr
0b060     4A 00 00 FF 
0b064     7C E4 85 F1 | 	sub	objptr, ##38012
0b068     0C 00 B0 FD | 	call	#_compile_goto
0b06c                 | ' compiledline(lineptr).result_type=token_gosub
0b06c                 | ' lineptr+=1
0b06c                 | ' err=compile_goto()
0b06c                 | ' return err
0b06c     A7 F0 03 F6 | 	mov	ptra, fp
0b070     B2 00 A0 FD | 	call	#popregs_
0b074                 | _compile_gosub_ret
0b074     2D 00 64 FD | 	ret
0b078                 | 
0b078                 | ' 
0b078                 | ' '----- compile 'goto' 
0b078                 | ' 
0b078                 | ' function compile_goto() as ulong
0b078                 | _compile_goto
0b078     03 4A 05 F6 | 	mov	COUNT_, #3
0b07c     A8 00 A0 FD | 	call	#pushregs_
0b080     34 F0 07 F1 | 	add	ptra, #52
0b084                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 	' we have a goto to a constant
0b084     37 00 00 FF 
0b088     44 E4 05 F1 | 	add	objptr, ##28228
0b08c     F2 16 02 FB | 	rdlong	arg03, objptr
0b090     03 16 66 F0 | 	shl	arg03, #3
0b094     02 00 00 FF 
0b098     38 E4 85 F1 | 	sub	objptr, ##1080
0b09c     F2 16 02 F1 | 	add	arg03, objptr
0b0a0     04 16 06 F1 | 	add	arg03, #4
0b0a4     0B 17 02 FB | 	rdlong	arg03, arg03
0b0a8     01 00 00 FF 
0b0ac     00 16 0E F2 | 	cmp	arg03, ##512 wz
0b0b0     35 00 00 FF 
0b0b4     0C E4 85 F1 | 	sub	objptr, ##27148
0b0b8     CC 02 90 5D |  if_ne	jmp	#LR__0935
0b0bc     37 00 00 FF 
0b0c0     44 E4 05 F1 | 	add	objptr, ##28228
0b0c4     F2 16 02 FB | 	rdlong	arg03, objptr
0b0c8     01 16 06 F1 | 	add	arg03, #1
0b0cc     03 16 66 F0 | 	shl	arg03, #3
0b0d0     02 00 00 FF 
0b0d4     38 E4 85 F1 | 	sub	objptr, ##1080
0b0d8     F2 16 02 F1 | 	add	arg03, objptr
0b0dc     04 16 06 F1 | 	add	arg03, #4
0b0e0     0B 17 02 FB | 	rdlong	arg03, arg03
0b0e4     FE 17 0E F2 | 	cmp	arg03, #510 wz
0b0e8     35 00 00 FF 
0b0ec     0C E4 85 F1 | 	sub	objptr, ##27148
0b0f0     94 02 90 5D |  if_ne	jmp	#LR__0935
0b0f4     37 00 00 FF 
0b0f8     44 E4 05 F1 | 	add	objptr, ##28228
0b0fc     F2 16 02 FB | 	rdlong	arg03, objptr
0b100     03 16 66 F0 | 	shl	arg03, #3
0b104     02 00 00 FF 
0b108     38 E4 85 F1 | 	sub	objptr, ##1080
0b10c     F2 16 02 F1 | 	add	arg03, objptr
0b110     0B 13 02 FB | 	rdlong	arg01, arg03
0b114     00 14 06 F6 | 	mov	arg02, #0
0b118     35 00 00 FF 
0b11c     0C E4 85 F1 | 	sub	objptr, ##27148
0b120     1C F2 B1 FD | 	call	#__system____builtin_atoi
0b124     04 4E 05 F1 | 	add	fp, #4
0b128     A7 FA 61 FC | 	wrlong	result1, fp
0b12c     4A 00 00 FF 
0b130     7C E4 05 F1 | 	add	objptr, ##38012
0b134     F2 26 02 FB | 	rdlong	local01, objptr
0b138     13 29 02 F6 | 	mov	local02, local01
0b13c     01 28 66 F0 | 	shl	local02, #1
0b140     13 29 02 F1 | 	add	local02, local01
0b144     02 28 66 F0 | 	shl	local02, #2
0b148     03 00 00 FF 
0b14c     00 E4 85 F1 | 	sub	objptr, ##1536
0b150     F2 28 02 F1 | 	add	local02, objptr
0b154     08 28 06 F1 | 	add	local02, #8
0b158     14 9D 68 FC | 	wrlong	#78, local02
0b15c     03 00 00 FF 
0b160     0C E4 05 F1 | 	add	objptr, ##1548
0b164     F2 2A 02 FB | 	rdlong	local03, objptr
0b168     4A 00 00 FF 
0b16c     88 E4 85 F1 | 	sub	objptr, ##38024
0b170     04 4E 05 F1 | 	add	fp, #4
0b174     A7 2A 62 FC | 	wrlong	local03, fp
0b178     08 4E 85 F1 | 	sub	fp, #8
0b17c                 | '   gotoline=val%(lparts(ct).part$) 
0b17c                 | '   compiledline(lineptr).result_type=token_fast_goto
0b17c                 | '   gotoptr=programstart 							    	' now try to find a pointer to goto
0b17c                 | '   do
0b17c                 | LR__0930
0b17c     10 4E 05 F1 | 	add	fp, #16
0b180     A7 12 02 F6 | 	mov	arg01, fp
0b184     08 4E 85 F1 | 	sub	fp, #8
0b188     A7 14 02 FB | 	rdlong	arg02, fp
0b18c     08 4E 85 F1 | 	sub	fp, #8
0b190     18 16 06 F6 | 	mov	arg03, #24
0b194     0B 00 00 FF 
0b198     CC E4 05 F1 | 	add	objptr, ##5836
0b19c     28 B0 B1 FD | 	call	#_psram_spin2_read1
0b1a0     0B 00 00 FF 
0b1a4     CC E4 85 F1 | 	sub	objptr, ##5836
0b1a8                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
0b1a8                 | '     if gotoheader(0)<>$FFFFFFFF then
0b1a8     10 4E 05 F1 | 	add	fp, #16
0b1ac     A7 2A 02 FB | 	rdlong	local03, fp
0b1b0     10 4E 85 F1 | 	sub	fp, #16
0b1b4     FF FF 7F FF 
0b1b8     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
0b1bc     24 00 90 AD |  if_e	jmp	#LR__0931
0b1c0     08 4E 05 F1 | 	add	fp, #8
0b1c4     A7 2A 02 FB | 	rdlong	local03, fp
0b1c8     04 4E 05 F1 | 	add	fp, #4
0b1cc     A7 2A 62 FC | 	wrlong	local03, fp
0b1d0     18 4E 05 F1 | 	add	fp, #24
0b1d4     A7 2A 02 FB | 	rdlong	local03, fp
0b1d8     1C 4E 85 F1 | 	sub	fp, #28
0b1dc     A7 2A 62 FC | 	wrlong	local03, fp
0b1e0     08 4E 85 F1 | 	sub	fp, #8
0b1e4                 | LR__0931
0b1e4     24 4E 05 F1 | 	add	fp, #36
0b1e8     A7 2A 02 FB | 	rdlong	local03, fp
0b1ec     24 4E 85 F1 | 	sub	fp, #36
0b1f0     FF FF 3F FF 
0b1f4     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
0b1f8     10 4E 05 51 |  if_ne	add	fp, #16
0b1fc     A7 26 02 5B |  if_ne	rdlong	local01, fp
0b200     10 4E 85 51 |  if_ne	sub	fp, #16
0b204     FF FF 7F 5F 
0b208     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
0b20c     1C 00 90 AD |  if_e	jmp	#LR__0932
0b210     10 4E 05 F1 | 	add	fp, #16
0b214     A7 2A 02 FB | 	rdlong	local03, fp
0b218     0C 4E 85 F1 | 	sub	fp, #12
0b21c     A7 28 02 FB | 	rdlong	local02, fp
0b220     04 4E 85 F1 | 	sub	fp, #4
0b224     14 2B 0A F2 | 	cmp	local03, local02 wz
0b228     50 FF 9F 5D |  if_ne	jmp	#LR__0930
0b22c                 | LR__0932
0b22c                 | '   if gotoheader(0)=gotoline then
0b22c     10 4E 05 F1 | 	add	fp, #16
0b230     A7 2A 02 FB | 	rdlong	local03, fp
0b234     0C 4E 85 F1 | 	sub	fp, #12
0b238     A7 26 02 FB | 	rdlong	local01, fp
0b23c     04 4E 85 F1 | 	sub	fp, #4
0b240     13 2B 0A F2 | 	cmp	local03, local01 wz
0b244     7C 00 90 5D |  if_ne	jmp	#LR__0933
0b248     4A 00 00 FF 
0b24c     7C E4 05 F1 | 	add	objptr, ##38012
0b250     F2 26 02 FB | 	rdlong	local01, objptr
0b254     13 29 02 F6 | 	mov	local02, local01
0b258     01 28 66 F0 | 	shl	local02, #1
0b25c     13 29 02 F1 | 	add	local02, local01
0b260     02 28 66 F0 | 	shl	local02, #2
0b264     03 00 00 FF 
0b268     00 E4 85 F1 | 	sub	objptr, ##1536
0b26c     F2 28 02 F1 | 	add	local02, objptr
0b270     0C 4E 05 F1 | 	add	fp, #12
0b274     A7 2A 02 FB | 	rdlong	local03, fp
0b278     14 2B 62 FC | 	wrlong	local03, local02
0b27c     03 00 00 FF 
0b280     00 E4 05 F1 | 	add	objptr, ##1536
0b284     F2 26 02 FB | 	rdlong	local01, objptr
0b288     13 29 02 F6 | 	mov	local02, local01
0b28c     01 28 66 F0 | 	shl	local02, #1
0b290     13 29 02 F1 | 	add	local02, local01
0b294     02 28 66 F0 | 	shl	local02, #2
0b298     03 00 00 FF 
0b29c     00 E4 85 F1 | 	sub	objptr, ##1536
0b2a0     F2 28 02 F1 | 	add	local02, objptr
0b2a4     08 4E 85 F1 | 	sub	fp, #8
0b2a8     A7 2A 02 FB | 	rdlong	local03, fp
0b2ac     04 4E 85 F1 | 	sub	fp, #4
0b2b0     04 28 06 F1 | 	add	local02, #4
0b2b4     14 2B 62 FC | 	wrlong	local03, local02
0b2b8     47 00 00 FF 
0b2bc     7C E4 85 F1 | 	sub	objptr, ##36476
0b2c0     A4 00 90 FD | 	jmp	#LR__0934
0b2c4                 | LR__0933
0b2c4     4A 00 00 FF 
0b2c8     7C E4 05 F1 | 	add	objptr, ##38012
0b2cc     F2 26 02 FB | 	rdlong	local01, objptr
0b2d0     13 29 02 F6 | 	mov	local02, local01
0b2d4     01 28 66 F0 | 	shl	local02, #1
0b2d8     13 29 02 F1 | 	add	local02, local01
0b2dc     02 28 66 F0 | 	shl	local02, #2
0b2e0     03 00 00 FF 
0b2e4     00 E4 85 F1 | 	sub	objptr, ##1536
0b2e8     F2 28 02 F1 | 	add	local02, objptr
0b2ec     00 00 C0 FF 
0b2f0     14 01 68 FC | 	wrlong	##-2147483648, local02
0b2f4     03 00 00 FF 
0b2f8     00 E4 05 F1 | 	add	objptr, ##1536
0b2fc     F2 26 02 FB | 	rdlong	local01, objptr
0b300     13 29 02 F6 | 	mov	local02, local01
0b304     01 28 66 F0 | 	shl	local02, #1
0b308     13 29 02 F1 | 	add	local02, local01
0b30c     02 28 66 F0 | 	shl	local02, #2
0b310     03 00 00 FF 
0b314     00 E4 85 F1 | 	sub	objptr, ##1536
0b318     F2 28 02 F1 | 	add	local02, objptr
0b31c     04 4E 05 F1 | 	add	fp, #4
0b320     A7 2A 02 FB | 	rdlong	local03, fp
0b324     04 4E 85 F1 | 	sub	fp, #4
0b328     04 28 06 F1 | 	add	local02, #4
0b32c     14 2B 62 FC | 	wrlong	local03, local02
0b330     03 00 00 FF 
0b334     00 E4 05 F1 | 	add	objptr, ##1536
0b338     F2 26 02 FB | 	rdlong	local01, objptr
0b33c     13 29 02 F6 | 	mov	local02, local01
0b340     01 28 66 F0 | 	shl	local02, #1
0b344     13 29 02 F1 | 	add	local02, local01
0b348     02 28 66 F0 | 	shl	local02, #2
0b34c     03 00 00 FF 
0b350     00 E4 85 F1 | 	sub	objptr, ##1536
0b354     F2 28 02 F1 | 	add	local02, objptr
0b358     08 28 06 F1 | 	add	local02, #8
0b35c     14 A7 68 FC | 	wrlong	#83, local02
0b360     47 00 00 FF 
0b364     7C E4 85 F1 | 	sub	objptr, ##36476
0b368                 | LR__0934
0b368     4A 00 00 FF 
0b36c     7C E4 05 F1 | 	add	objptr, ##38012
0b370     F2 2A 02 FB | 	rdlong	local03, objptr
0b374     01 2A 06 F1 | 	add	local03, #1
0b378     F2 2A 62 FC | 	wrlong	local03, objptr
0b37c     4A 00 00 FF 
0b380     7C E4 85 F1 | 	sub	objptr, ##38012
0b384     D0 00 90 FD | 	jmp	#LR__0936
0b388                 | LR__0935
0b388     98 0A B0 FD | 	call	#_expr
0b38c     30 4E 05 F1 | 	add	fp, #48
0b390     A7 9E 68 FC | 	wrlong	#79, fp
0b394     08 4E 85 F1 | 	sub	fp, #8
0b398     A7 00 68 FC | 	wrlong	#0, fp
0b39c     04 4E 05 F1 | 	add	fp, #4
0b3a0     A7 2A 02 FB | 	rdlong	local03, fp
0b3a4     04 4E 05 F1 | 	add	fp, #4
0b3a8     A7 26 02 FB | 	rdlong	local01, fp
0b3ac     30 4E 85 F1 | 	sub	fp, #48
0b3b0     4A 00 00 FF 
0b3b4     7C E4 05 F1 | 	add	objptr, ##38012
0b3b8     F2 28 02 FB | 	rdlong	local02, objptr
0b3bc     14 17 02 F6 | 	mov	arg03, local02
0b3c0     01 16 66 F0 | 	shl	arg03, #1
0b3c4     14 17 02 F1 | 	add	arg03, local02
0b3c8     02 16 66 F0 | 	shl	arg03, #2
0b3cc     03 00 00 FF 
0b3d0     00 E4 85 F1 | 	sub	objptr, ##1536
0b3d4     F2 16 02 F1 | 	add	arg03, objptr
0b3d8     0B 01 68 FC | 	wrlong	#0, arg03
0b3dc     03 00 00 FF 
0b3e0     00 E4 05 F1 | 	add	objptr, ##1536
0b3e4     F2 28 02 FB | 	rdlong	local02, objptr
0b3e8     14 17 02 F6 | 	mov	arg03, local02
0b3ec     01 16 66 F0 | 	shl	arg03, #1
0b3f0     14 17 02 F1 | 	add	arg03, local02
0b3f4     02 16 66 F0 | 	shl	arg03, #2
0b3f8     03 00 00 FF 
0b3fc     00 E4 85 F1 | 	sub	objptr, ##1536
0b400     F2 16 02 F1 | 	add	arg03, objptr
0b404     04 16 06 F1 | 	add	arg03, #4
0b408     0B 2B 62 FC | 	wrlong	local03, arg03
0b40c     03 00 00 FF 
0b410     00 E4 05 F1 | 	add	objptr, ##1536
0b414     F2 2A 02 FB | 	rdlong	local03, objptr
0b418     15 29 02 F6 | 	mov	local02, local03
0b41c     01 28 66 F0 | 	shl	local02, #1
0b420     15 29 02 F1 | 	add	local02, local03
0b424     02 28 66 F0 | 	shl	local02, #2
0b428     03 00 00 FF 
0b42c     00 E4 85 F1 | 	sub	objptr, ##1536
0b430     F2 28 02 F1 | 	add	local02, objptr
0b434     08 28 06 F1 | 	add	local02, #8
0b438     14 27 62 FC | 	wrlong	local01, local02
0b43c     03 00 00 FF 
0b440     00 E4 05 F1 | 	add	objptr, ##1536
0b444     F2 2A 02 FB | 	rdlong	local03, objptr
0b448     01 2A 06 F1 | 	add	local03, #1
0b44c     F2 2A 62 FC | 	wrlong	local03, objptr
0b450     4A 00 00 FF 
0b454     7C E4 85 F1 | 	sub	objptr, ##38012
0b458                 | LR__0936
0b458                 | ' return 0
0b458     00 FA 05 F6 | 	mov	result1, #0
0b45c     A7 F0 03 F6 | 	mov	ptra, fp
0b460     B2 00 A0 FD | 	call	#popregs_
0b464                 | _compile_goto_ret
0b464     2D 00 64 FD | 	ret
0b468                 | 
0b468                 | ' 
0b468                 | ' '----- compile 'on' (on..goto, on..gosub) 
0b468                 | ' 
0b468                 | ' function compile_on() as ulong
0b468                 | _compile_on
0b468     04 4A 05 F6 | 	mov	COUNT_, #4
0b46c     A8 00 A0 FD | 	call	#pushregs_
0b470     B0 09 B0 FD | 	call	#_expr
0b474     00 26 06 F6 | 	mov	local01, #0
0b478     4A 00 00 FF 
0b47c     7C E4 05 F1 | 	add	objptr, ##38012
0b480     F2 14 02 FB | 	rdlong	arg02, objptr
0b484     0A 13 02 F6 | 	mov	arg01, arg02
0b488     01 12 66 F0 | 	shl	arg01, #1
0b48c     0A 13 02 F1 | 	add	arg01, arg02
0b490     02 12 66 F0 | 	shl	arg01, #2
0b494     03 00 00 FF 
0b498     00 E4 85 F1 | 	sub	objptr, ##1536
0b49c     F2 12 02 F1 | 	add	arg01, objptr
0b4a0     08 12 06 F1 | 	add	arg01, #8
0b4a4     09 83 69 FC | 	wrlong	#193, arg01
0b4a8     03 00 00 FF 
0b4ac     00 E4 05 F1 | 	add	objptr, ##1536
0b4b0     F2 14 02 FB | 	rdlong	arg02, objptr
0b4b4     0A 29 02 F6 | 	mov	local02, arg02
0b4b8     01 14 06 F1 | 	add	arg02, #1
0b4bc     F2 14 62 FC | 	wrlong	arg02, objptr
0b4c0                 | ' expr()
0b4c0                 | ' 'print lparts(ct).part$ 'ok
0b4c0                 | ' numpar=0
0b4c0                 | ' compiledline(lineptr).result_type=token_on : onlineptr=lineptr : lineptr+=1' we need onlineptr to save param# there
0b4c0                 | ' if lparts(ct).part$="goto" then
0b4c0     13 00 00 FF 
0b4c4     38 E4 85 F1 | 	sub	objptr, ##9784
0b4c8     F2 14 02 FB | 	rdlong	arg02, objptr
0b4cc     03 14 66 F0 | 	shl	arg02, #3
0b4d0     02 00 00 FF 
0b4d4     38 E4 85 F1 | 	sub	objptr, ##1080
0b4d8     F2 14 02 F1 | 	add	arg02, objptr
0b4dc     0A 13 02 FB | 	rdlong	arg01, arg02
0b4e0     B8 01 00 FF 
0b4e4     DD 14 06 F6 | 	mov	arg02, ##@LR__5852
0b4e8     35 00 00 FF 
0b4ec     0C E4 85 F1 | 	sub	objptr, ##27148
0b4f0     84 B9 B1 FD | 	call	#__system___string_cmp
0b4f4     00 FA 0D F2 | 	cmp	result1, #0 wz
0b4f8     14 02 90 5D |  if_ne	jmp	#LR__0945
0b4fc     37 00 00 FF 
0b500     44 E4 05 F1 | 	add	objptr, ##28228
0b504     F2 2A 02 FB | 	rdlong	local03, objptr
0b508     37 00 00 FF 
0b50c     44 E4 85 F1 | 	sub	objptr, ##28228
0b510     01 2A 06 F1 | 	add	local03, #1
0b514                 | '   i=ct+1
0b514                 | '   do
0b514                 | LR__0940
0b514                 | '     if lparts(i).token=token_decimal then
0b514     15 FB 01 F6 | 	mov	result1, local03
0b518     03 FA 65 F0 | 	shl	result1, #3
0b51c     35 00 00 FF 
0b520     0C E4 05 F1 | 	add	objptr, ##27148
0b524     F2 FA 01 F1 | 	add	result1, objptr
0b528     04 FA 05 F1 | 	add	result1, #4
0b52c     FD FA 01 FB | 	rdlong	result1, result1
0b530     01 00 00 FF 
0b534     00 FA 0D F2 | 	cmp	result1, ##512 wz
0b538     35 00 00 FF 
0b53c     0C E4 85 F1 | 	sub	objptr, ##27148
0b540     DC 00 90 5D |  if_ne	jmp	#LR__0941
0b544     4A 00 00 FF 
0b548     7C E4 05 F1 | 	add	objptr, ##38012
0b54c     F2 FA 01 FB | 	rdlong	result1, objptr
0b550     FD 14 02 F6 | 	mov	arg02, result1
0b554     01 14 66 F0 | 	shl	arg02, #1
0b558     FD 14 02 F1 | 	add	arg02, result1
0b55c     02 14 66 F0 | 	shl	arg02, #2
0b560     03 00 00 FF 
0b564     00 E4 85 F1 | 	sub	objptr, ##1536
0b568     F2 14 02 F1 | 	add	arg02, objptr
0b56c     00 00 C0 FF 
0b570     0A 01 68 FC | 	wrlong	##-2147483648, arg02
0b574     03 00 00 FF 
0b578     00 E4 05 F1 | 	add	objptr, ##1536
0b57c     F2 14 02 FB | 	rdlong	arg02, objptr
0b580     0A 2D 02 F6 | 	mov	local04, arg02
0b584     01 2C 66 F0 | 	shl	local04, #1
0b588     0A 2D 02 F1 | 	add	local04, arg02
0b58c     02 2C 66 F0 | 	shl	local04, #2
0b590     03 00 00 FF 
0b594     00 E4 85 F1 | 	sub	objptr, ##1536
0b598     F2 2C 02 F1 | 	add	local04, objptr
0b59c     15 15 02 F6 | 	mov	arg02, local03
0b5a0     03 14 66 F0 | 	shl	arg02, #3
0b5a4     12 00 00 FF 
0b5a8     70 E4 85 F1 | 	sub	objptr, ##9328
0b5ac     F2 14 02 F1 | 	add	arg02, objptr
0b5b0     0A 13 02 FB | 	rdlong	arg01, arg02
0b5b4     00 14 06 F6 | 	mov	arg02, #0
0b5b8     35 00 00 FF 
0b5bc     0C E4 85 F1 | 	sub	objptr, ##27148
0b5c0     7C ED B1 FD | 	call	#__system____builtin_atoi
0b5c4     04 2C 06 F1 | 	add	local04, #4
0b5c8     16 FB 61 FC | 	wrlong	result1, local04
0b5cc     4A 00 00 FF 
0b5d0     7C E4 05 F1 | 	add	objptr, ##38012
0b5d4     F2 14 02 FB | 	rdlong	arg02, objptr
0b5d8     0A 2D 02 F6 | 	mov	local04, arg02
0b5dc     01 2C 66 F0 | 	shl	local04, #1
0b5e0     0A 2D 02 F1 | 	add	local04, arg02
0b5e4     02 2C 66 F0 | 	shl	local04, #2
0b5e8     03 00 00 FF 
0b5ec     00 E4 85 F1 | 	sub	objptr, ##1536
0b5f0     F2 2C 02 F1 | 	add	local04, objptr
0b5f4     08 2C 06 F1 | 	add	local04, #8
0b5f8     16 A7 68 FC | 	wrlong	#83, local04
0b5fc     03 00 00 FF 
0b600     00 E4 05 F1 | 	add	objptr, ##1536
0b604     F2 2C 02 FB | 	rdlong	local04, objptr
0b608     01 2C 06 F1 | 	add	local04, #1
0b60c     F2 2C 62 FC | 	wrlong	local04, objptr
0b610     4A 00 00 FF 
0b614     7C E4 85 F1 | 	sub	objptr, ##38012
0b618     01 26 06 F1 | 	add	local01, #1
0b61c     08 00 90 FD | 	jmp	#LR__0942
0b620                 | LR__0941
0b620                 | '       return 17
0b620     11 FA 05 F6 | 	mov	result1, #17
0b624     5C 04 90 FD | 	jmp	#LR__0955
0b628                 | LR__0942
0b628     01 2A 06 F1 | 	add	local03, #1
0b62c                 | '     i+=1
0b62c                 | '     if lparts(i).token<>token_comma andalso lparts(i).token<>token_end then return 21
0b62c     15 2D 02 F6 | 	mov	local04, local03
0b630     03 2C 66 F0 | 	shl	local04, #3
0b634     35 00 00 FF 
0b638     0C E4 05 F1 | 	add	objptr, ##27148
0b63c     F2 2C 02 F1 | 	add	local04, objptr
0b640     04 2C 06 F1 | 	add	local04, #4
0b644     16 2D 02 FB | 	rdlong	local04, local04
0b648     11 2C 0E F2 | 	cmp	local04, #17 wz
0b64c     35 00 00 FF 
0b650     0C E4 85 F1 | 	sub	objptr, ##27148
0b654     30 00 90 AD |  if_e	jmp	#LR__0943
0b658     15 2D 02 F6 | 	mov	local04, local03
0b65c     03 2C 66 F0 | 	shl	local04, #3
0b660     35 00 00 FF 
0b664     0C E4 05 F1 | 	add	objptr, ##27148
0b668     F2 2C 02 F1 | 	add	local04, objptr
0b66c     04 2C 06 F1 | 	add	local04, #4
0b670     16 2D 02 FB | 	rdlong	local04, local04
0b674     FE 2D 0E F2 | 	cmp	local04, #510 wz
0b678     35 00 00 FF 
0b67c     0C E4 85 F1 | 	sub	objptr, ##27148
0b680     15 FA 05 56 |  if_ne	mov	result1, #21
0b684     FC 03 90 5D |  if_ne	jmp	#LR__0955
0b688                 | LR__0943
0b688                 | '     if lparts(i).token=token_end then exit loop
0b688     15 2D 02 F6 | 	mov	local04, local03
0b68c     03 2C 66 F0 | 	shl	local04, #3
0b690     35 00 00 FF 
0b694     0C E4 05 F1 | 	add	objptr, ##27148
0b698     F2 2C 02 F1 | 	add	local04, objptr
0b69c     04 2C 06 F1 | 	add	local04, #4
0b6a0     16 2D 02 FB | 	rdlong	local04, local04
0b6a4     FE 2D 0E F2 | 	cmp	local04, #510 wz
0b6a8     35 00 00 FF 
0b6ac     0C E4 85 F1 | 	sub	objptr, ##27148
0b6b0     30 00 90 AD |  if_e	jmp	#LR__0944
0b6b4     01 2A 06 F1 | 	add	local03, #1
0b6b8     15 2D 02 F6 | 	mov	local04, local03
0b6bc     03 2C 66 F0 | 	shl	local04, #3
0b6c0     35 00 00 FF 
0b6c4     0C E4 05 F1 | 	add	objptr, ##27148
0b6c8     F2 2C 02 F1 | 	add	local04, objptr
0b6cc     04 2C 06 F1 | 	add	local04, #4
0b6d0     16 2D 02 FB | 	rdlong	local04, local04
0b6d4     FE 2D 0E F2 | 	cmp	local04, #510 wz
0b6d8     35 00 00 FF 
0b6dc     0C E4 85 F1 | 	sub	objptr, ##27148
0b6e0     30 FE 9F 5D |  if_ne	jmp	#LR__0940
0b6e4                 | LR__0944
0b6e4     14 2D 02 F6 | 	mov	local04, local02
0b6e8     01 2C 66 F0 | 	shl	local04, #1
0b6ec     14 2D 02 F1 | 	add	local04, local02
0b6f0     02 2C 66 F0 | 	shl	local04, #2
0b6f4     47 00 00 FF 
0b6f8     7C E4 05 F1 | 	add	objptr, ##36476
0b6fc     F2 2C 02 F1 | 	add	local04, objptr
0b700     04 2C 06 F1 | 	add	local04, #4
0b704     16 03 68 FC | 	wrlong	#1, local04
0b708     47 00 00 FF 
0b70c     7C E4 85 F1 | 	sub	objptr, ##36476
0b710                 | LR__0945
0b710                 | ' 
0b710                 | ' if lparts(ct).part$="gosub" then
0b710     37 00 00 FF 
0b714     44 E4 05 F1 | 	add	objptr, ##28228
0b718     F2 2A 02 FB | 	rdlong	local03, objptr
0b71c     03 2A 66 F0 | 	shl	local03, #3
0b720     02 00 00 FF 
0b724     38 E4 85 F1 | 	sub	objptr, ##1080
0b728     F2 2A 02 F1 | 	add	local03, objptr
0b72c     15 13 02 FB | 	rdlong	arg01, local03
0b730     B8 01 00 FF 
0b734     E2 14 06 F6 | 	mov	arg02, ##@LR__5853
0b738     35 00 00 FF 
0b73c     0C E4 85 F1 | 	sub	objptr, ##27148
0b740     34 B7 B1 FD | 	call	#__system___string_cmp
0b744     00 FA 0D F2 | 	cmp	result1, #0 wz
0b748     84 02 90 5D |  if_ne	jmp	#LR__0951
0b74c     37 00 00 FF 
0b750     44 E4 05 F1 | 	add	objptr, ##28228
0b754     F2 2A 02 FB | 	rdlong	local03, objptr
0b758     37 00 00 FF 
0b75c     44 E4 85 F1 | 	sub	objptr, ##28228
0b760     01 2A 06 F1 | 	add	local03, #1
0b764                 | '   i=ct+1
0b764                 | '   do
0b764                 | LR__0946
0b764                 | '     if lparts(i).token=token_decimal then
0b764     15 2D 02 F6 | 	mov	local04, local03
0b768     03 2C 66 F0 | 	shl	local04, #3
0b76c     35 00 00 FF 
0b770     0C E4 05 F1 | 	add	objptr, ##27148
0b774     F2 2C 02 F1 | 	add	local04, objptr
0b778     04 2C 06 F1 | 	add	local04, #4
0b77c     16 2D 02 FB | 	rdlong	local04, local04
0b780     01 00 00 FF 
0b784     00 2C 0E F2 | 	cmp	local04, ##512 wz
0b788     35 00 00 FF 
0b78c     0C E4 85 F1 | 	sub	objptr, ##27148
0b790     4C 01 90 5D |  if_ne	jmp	#LR__0947
0b794     4A 00 00 FF 
0b798     7C E4 05 F1 | 	add	objptr, ##38012
0b79c     F2 FA 01 FB | 	rdlong	result1, objptr
0b7a0     FD 2C 02 F6 | 	mov	local04, result1
0b7a4     01 2C 66 F0 | 	shl	local04, #1
0b7a8     FD 2C 02 F1 | 	add	local04, result1
0b7ac     02 2C 66 F0 | 	shl	local04, #2
0b7b0     03 00 00 FF 
0b7b4     00 E4 85 F1 | 	sub	objptr, ##1536
0b7b8     F2 2C 02 F1 | 	add	local04, objptr
0b7bc     08 2C 06 F1 | 	add	local04, #8
0b7c0     16 53 69 FC | 	wrlong	#169, local04
0b7c4     03 00 00 FF 
0b7c8     00 E4 05 F1 | 	add	objptr, ##1536
0b7cc     F2 FA 01 FB | 	rdlong	result1, objptr
0b7d0     01 FA 05 F1 | 	add	result1, #1
0b7d4     F2 FA 61 FC | 	wrlong	result1, objptr
0b7d8     FD 2C 02 F6 | 	mov	local04, result1
0b7dc     01 2C 66 F0 | 	shl	local04, #1
0b7e0     FD 2C 02 F1 | 	add	local04, result1
0b7e4     02 2C 66 F0 | 	shl	local04, #2
0b7e8     03 00 00 FF 
0b7ec     00 E4 85 F1 | 	sub	objptr, ##1536
0b7f0     F2 2C 02 F1 | 	add	local04, objptr
0b7f4     00 00 C0 FF 
0b7f8     16 01 68 FC | 	wrlong	##-2147483648, local04
0b7fc     03 00 00 FF 
0b800     00 E4 05 F1 | 	add	objptr, ##1536
0b804     F2 FA 01 FB | 	rdlong	result1, objptr
0b808     FD 2C 02 F6 | 	mov	local04, result1
0b80c     01 2C 66 F0 | 	shl	local04, #1
0b810     FD 2C 02 F1 | 	add	local04, result1
0b814     02 2C 66 F0 | 	shl	local04, #2
0b818     03 00 00 FF 
0b81c     00 E4 85 F1 | 	sub	objptr, ##1536
0b820     F2 2C 02 F1 | 	add	local04, objptr
0b824     15 13 02 F6 | 	mov	arg01, local03
0b828     03 12 66 F0 | 	shl	arg01, #3
0b82c     12 00 00 FF 
0b830     70 E4 85 F1 | 	sub	objptr, ##9328
0b834     F2 12 02 F1 | 	add	arg01, objptr
0b838     09 13 02 FB | 	rdlong	arg01, arg01
0b83c     00 14 06 F6 | 	mov	arg02, #0
0b840     35 00 00 FF 
0b844     0C E4 85 F1 | 	sub	objptr, ##27148
0b848     F4 EA B1 FD | 	call	#__system____builtin_atoi
0b84c     04 2C 06 F1 | 	add	local04, #4
0b850     16 FB 61 FC | 	wrlong	result1, local04
0b854     4A 00 00 FF 
0b858     7C E4 05 F1 | 	add	objptr, ##38012
0b85c     F2 12 02 FB | 	rdlong	arg01, objptr
0b860     09 2D 02 F6 | 	mov	local04, arg01
0b864     01 2C 66 F0 | 	shl	local04, #1
0b868     09 2D 02 F1 | 	add	local04, arg01
0b86c     02 2C 66 F0 | 	shl	local04, #2
0b870     03 00 00 FF 
0b874     00 E4 85 F1 | 	sub	objptr, ##1536
0b878     F2 2C 02 F1 | 	add	local04, objptr
0b87c     08 2C 06 F1 | 	add	local04, #8
0b880     16 A7 68 FC | 	wrlong	#83, local04
0b884     03 00 00 FF 
0b888     00 E4 05 F1 | 	add	objptr, ##1536
0b88c     F2 12 02 FB | 	rdlong	arg01, objptr
0b890     01 12 06 F1 | 	add	arg01, #1
0b894     F2 12 62 FC | 	wrlong	arg01, objptr
0b898     01 26 06 F1 | 	add	local01, #1
0b89c     09 2D 02 F6 | 	mov	local04, arg01
0b8a0     01 2C 66 F0 | 	shl	local04, #1
0b8a4     09 2D 02 F1 | 	add	local04, arg01
0b8a8     02 2C 66 F0 | 	shl	local04, #2
0b8ac     03 00 00 FF 
0b8b0     00 E4 85 F1 | 	sub	objptr, ##1536
0b8b4     F2 2C 02 F1 | 	add	local04, objptr
0b8b8     08 2C 06 F1 | 	add	local04, #8
0b8bc     16 5B 68 FC | 	wrlong	#45, local04
0b8c0     03 00 00 FF 
0b8c4     00 E4 05 F1 | 	add	objptr, ##1536
0b8c8     F2 2C 02 FB | 	rdlong	local04, objptr
0b8cc     01 2C 06 F1 | 	add	local04, #1
0b8d0     F2 2C 62 FC | 	wrlong	local04, objptr
0b8d4     4A 00 00 FF 
0b8d8     7C E4 85 F1 | 	sub	objptr, ##38012
0b8dc     08 00 90 FD | 	jmp	#LR__0948
0b8e0                 | LR__0947
0b8e0                 | '       return 17
0b8e0     11 FA 05 F6 | 	mov	result1, #17
0b8e4     9C 01 90 FD | 	jmp	#LR__0955
0b8e8                 | LR__0948
0b8e8     01 2A 06 F1 | 	add	local03, #1
0b8ec                 | '     i+=1
0b8ec                 | '     if lparts(i).token<>token_comma andalso lparts(i).token<>token_end then return 21
0b8ec     15 2D 02 F6 | 	mov	local04, local03
0b8f0     03 2C 66 F0 | 	shl	local04, #3
0b8f4     35 00 00 FF 
0b8f8     0C E4 05 F1 | 	add	objptr, ##27148
0b8fc     F2 2C 02 F1 | 	add	local04, objptr
0b900     04 2C 06 F1 | 	add	local04, #4
0b904     16 2D 02 FB | 	rdlong	local04, local04
0b908     11 2C 0E F2 | 	cmp	local04, #17 wz
0b90c     35 00 00 FF 
0b910     0C E4 85 F1 | 	sub	objptr, ##27148
0b914     30 00 90 AD |  if_e	jmp	#LR__0949
0b918     15 2D 02 F6 | 	mov	local04, local03
0b91c     03 2C 66 F0 | 	shl	local04, #3
0b920     35 00 00 FF 
0b924     0C E4 05 F1 | 	add	objptr, ##27148
0b928     F2 2C 02 F1 | 	add	local04, objptr
0b92c     04 2C 06 F1 | 	add	local04, #4
0b930     16 2D 02 FB | 	rdlong	local04, local04
0b934     FE 2D 0E F2 | 	cmp	local04, #510 wz
0b938     35 00 00 FF 
0b93c     0C E4 85 F1 | 	sub	objptr, ##27148
0b940     15 FA 05 56 |  if_ne	mov	result1, #21
0b944     3C 01 90 5D |  if_ne	jmp	#LR__0955
0b948                 | LR__0949
0b948                 | '     if lparts(i).token=token_end then exit loop
0b948     15 2D 02 F6 | 	mov	local04, local03
0b94c     03 2C 66 F0 | 	shl	local04, #3
0b950     35 00 00 FF 
0b954     0C E4 05 F1 | 	add	objptr, ##27148
0b958     F2 2C 02 F1 | 	add	local04, objptr
0b95c     04 2C 06 F1 | 	add	local04, #4
0b960     16 2D 02 FB | 	rdlong	local04, local04
0b964     FE 2D 0E F2 | 	cmp	local04, #510 wz
0b968     35 00 00 FF 
0b96c     0C E4 85 F1 | 	sub	objptr, ##27148
0b970     30 00 90 AD |  if_e	jmp	#LR__0950
0b974     01 2A 06 F1 | 	add	local03, #1
0b978     15 2D 02 F6 | 	mov	local04, local03
0b97c     03 2C 66 F0 | 	shl	local04, #3
0b980     35 00 00 FF 
0b984     0C E4 05 F1 | 	add	objptr, ##27148
0b988     F2 2C 02 F1 | 	add	local04, objptr
0b98c     04 2C 06 F1 | 	add	local04, #4
0b990     16 2D 02 FB | 	rdlong	local04, local04
0b994     FE 2D 0E F2 | 	cmp	local04, #510 wz
0b998     35 00 00 FF 
0b99c     0C E4 85 F1 | 	sub	objptr, ##27148
0b9a0     C0 FD 9F 5D |  if_ne	jmp	#LR__0946
0b9a4                 | LR__0950
0b9a4     14 2D 02 F6 | 	mov	local04, local02
0b9a8     01 2C 66 F0 | 	shl	local04, #1
0b9ac     14 2D 02 F1 | 	add	local04, local02
0b9b0     02 2C 66 F0 | 	shl	local04, #2
0b9b4     47 00 00 FF 
0b9b8     7C E4 05 F1 | 	add	objptr, ##36476
0b9bc     F2 2C 02 F1 | 	add	local04, objptr
0b9c0     04 2C 06 F1 | 	add	local04, #4
0b9c4     16 07 68 FC | 	wrlong	#3, local04
0b9c8     47 00 00 FF 
0b9cc     7C E4 85 F1 | 	sub	objptr, ##36476
0b9d0                 | LR__0951
0b9d0     14 2B 02 F6 | 	mov	local03, local02
0b9d4     01 2A 66 F0 | 	shl	local03, #1
0b9d8     14 2B 02 F1 | 	add	local03, local02
0b9dc     02 2A 66 F0 | 	shl	local03, #2
0b9e0     47 00 00 FF 
0b9e4     7C E4 05 F1 | 	add	objptr, ##36476
0b9e8     F2 2A 02 F1 | 	add	local03, objptr
0b9ec     15 27 62 FC | 	wrlong	local01, local03
0b9f0                 | ' compiledline(onlineptr).result.uresult=numpar
0b9f0                 | ' for i=lineptr to onlineptr step -1 : if compiledline(i).result_type=token_skip then compiledline(i).result.uresult=lineptr-2
0b9f0     03 00 00 FF 
0b9f4     00 E4 05 F1 | 	add	objptr, ##1536
0b9f8     F2 2A 02 FB | 	rdlong	local03, objptr
0b9fc     4A 00 00 FF 
0ba00     7C E4 85 F1 | 	sub	objptr, ##38012
0ba04     97 3C 48 FB | 	callpa	#(@LR__0954-@LR__0952)>>2,fcache_load_ptr_
0ba08                 | LR__0952
0ba08     15 2D 02 F6 | 	mov	local04, local03
0ba0c     01 2C 66 F0 | 	shl	local04, #1
0ba10     15 2D 02 F1 | 	add	local04, local03
0ba14     02 2C 66 F0 | 	shl	local04, #2
0ba18     47 00 00 FF 
0ba1c     7C E4 05 F1 | 	add	objptr, ##36476
0ba20     F2 2C 02 F1 | 	add	local04, objptr
0ba24     08 2C 06 F1 | 	add	local04, #8
0ba28     16 2D 02 FB | 	rdlong	local04, local04
0ba2c     2D 2C 0E F2 | 	cmp	local04, #45 wz
0ba30     47 00 00 FF 
0ba34     7C E4 85 F1 | 	sub	objptr, ##36476
0ba38     38 00 90 5D |  if_ne	jmp	#LR__0953
0ba3c     15 2D 02 F6 | 	mov	local04, local03
0ba40     01 2C 66 F0 | 	shl	local04, #1
0ba44     15 2D 02 F1 | 	add	local04, local03
0ba48     02 2C 66 F0 | 	shl	local04, #2
0ba4c     47 00 00 FF 
0ba50     7C E4 05 F1 | 	add	objptr, ##36476
0ba54     F2 2C 02 F1 | 	add	local04, objptr
0ba58     03 00 00 FF 
0ba5c     00 E4 05 F1 | 	add	objptr, ##1536
0ba60     F2 26 02 FB | 	rdlong	local01, objptr
0ba64     4A 00 00 FF 
0ba68     7C E4 85 F1 | 	sub	objptr, ##38012
0ba6c     02 26 86 F1 | 	sub	local01, #2
0ba70     16 27 62 FC | 	wrlong	local01, local04
0ba74                 | LR__0953
0ba74     01 2A 86 F1 | 	sub	local03, #1
0ba78     14 2B 52 F2 | 	cmps	local03, local02 wc
0ba7c     88 FF 9F 3D |  if_ae	jmp	#LR__0952
0ba80                 | LR__0954
0ba80                 | ' return 0
0ba80     00 FA 05 F6 | 	mov	result1, #0
0ba84                 | LR__0955
0ba84     A7 F0 03 F6 | 	mov	ptra, fp
0ba88     B2 00 A0 FD | 	call	#popregs_
0ba8c                 | _compile_on_ret
0ba8c     2D 00 64 FD | 	ret
0ba90                 | 
0ba90                 | ' 
0ba90                 | ' '----- A helper for compile_input and compile_read
0ba90                 | '  
0ba90                 | ' function getaddr() as ulong
0ba90                 | _getaddr
0ba90     0B 4A 05 F6 | 	mov	COUNT_, #11
0ba94     A8 00 A0 FD | 	call	#pushregs_
0ba98     37 00 00 FF 
0ba9c     44 E4 05 F1 | 	add	objptr, ##28228
0baa0     F2 2C 02 FB | 	rdlong	local04, objptr
0baa4     03 2C 66 F0 | 	shl	local04, #3
0baa8     02 00 00 FF 
0baac     38 E4 85 F1 | 	sub	objptr, ##1080
0bab0     F2 2C 02 F1 | 	add	local04, objptr
0bab4     16 2F 02 FB | 	rdlong	local05, local04
0bab8     01 30 66 F6 | 	neg	local06, #1
0babc                 | ' 
0babc                 | ' varname$=lparts(ct).part$
0babc                 | ' j=-1
0babc                 | ' 
0babc                 | ' for i=0 to varnum-1
0babc     00 32 06 F6 | 	mov	local07, #0
0bac0     04 E4 85 F1 | 	sub	objptr, #4
0bac4     F2 34 02 FB | 	rdlong	local08, objptr
0bac8     35 00 00 FF 
0bacc     08 E4 85 F1 | 	sub	objptr, ##27144
0bad0                 | LR__0960
0bad0     1A 33 52 F2 | 	cmps	local07, local08 wc
0bad4     38 00 90 3D |  if_ae	jmp	#LR__0961
0bad8                 | '   if variables(i).name=varname$ then j=i : exit
0bad8     19 2D 02 F6 | 	mov	local04, local07
0badc     04 2C 66 F0 | 	shl	local04, #4
0bae0     14 00 00 FF 
0bae4     F8 E5 05 F1 | 	add	objptr, ##10744
0bae8     F2 2C 02 F1 | 	add	local04, objptr
0baec     16 13 02 FB | 	rdlong	arg01, local04
0baf0     17 15 02 F6 | 	mov	arg02, local05
0baf4     14 00 00 FF 
0baf8     F8 E5 85 F1 | 	sub	objptr, ##10744
0bafc     78 B3 B1 FD | 	call	#__system___string_cmp
0bb00     00 FA 0D F2 | 	cmp	result1, #0 wz
0bb04     19 31 02 A6 |  if_e	mov	local06, local07
0bb08     01 32 06 51 |  if_ne	add	local07, #1
0bb0c     C0 FF 9F 5D |  if_ne	jmp	#LR__0960
0bb10                 | LR__0961
0bb10                 | ' if  j=-1 andalso varnum<maxvars then   
0bb10     FF FF 7F FF 
0bb14     FF 31 0E F2 | 	cmp	local06, ##-1 wz
0bb18     A8 00 90 5D |  if_ne	jmp	#LR__0962
0bb1c     35 00 00 FF 
0bb20     08 E4 05 F1 | 	add	objptr, ##27144
0bb24     F2 34 02 FB | 	rdlong	local08, objptr
0bb28     35 00 00 FF 
0bb2c     08 E4 85 F1 | 	sub	objptr, ##27144
0bb30     02 00 00 FF 
0bb34     00 34 56 F2 | 	cmps	local08, ##1024 wc
0bb38     88 00 90 3D |  if_ae	jmp	#LR__0962
0bb3c     35 00 00 FF 
0bb40     08 E4 05 F1 | 	add	objptr, ##27144
0bb44     F2 2C 02 FB | 	rdlong	local04, objptr
0bb48     04 2C 66 F0 | 	shl	local04, #4
0bb4c     20 00 00 FF 
0bb50     10 E4 85 F1 | 	sub	objptr, ##16400
0bb54     F2 2C 02 F1 | 	add	local04, objptr
0bb58     16 2F 62 FC | 	wrlong	local05, local04
0bb5c     20 00 00 FF 
0bb60     10 E4 05 F1 | 	add	objptr, ##16400
0bb64     F2 2C 02 FB | 	rdlong	local04, objptr
0bb68     04 2C 66 F0 | 	shl	local04, #4
0bb6c     20 00 00 FF 
0bb70     10 E4 85 F1 | 	sub	objptr, ##16400
0bb74     F2 2C 02 F1 | 	add	local04, objptr
0bb78     04 2C 06 F1 | 	add	local04, #4
0bb7c     16 01 68 FC | 	wrlong	#0, local04
0bb80     20 00 00 FF 
0bb84     10 E4 05 F1 | 	add	objptr, ##16400
0bb88     F2 2C 02 FB | 	rdlong	local04, objptr
0bb8c     04 2C 66 F0 | 	shl	local04, #4
0bb90     20 00 00 FF 
0bb94     10 E4 85 F1 | 	sub	objptr, ##16400
0bb98     F2 2C 02 F1 | 	add	local04, objptr
0bb9c     0C 2C 06 F1 | 	add	local04, #12
0bba0     16 39 68 FC | 	wrlong	#28, local04
0bba4     20 00 00 FF 
0bba8     10 E4 05 F1 | 	add	objptr, ##16400
0bbac     F2 34 02 FB | 	rdlong	local08, objptr
0bbb0     1A 31 02 F6 | 	mov	local06, local08
0bbb4     01 34 06 F1 | 	add	local08, #1
0bbb8     F2 34 62 FC | 	wrlong	local08, objptr
0bbbc     35 00 00 FF 
0bbc0     08 E4 85 F1 | 	sub	objptr, ##27144
0bbc4                 | LR__0962
0bbc4     00 34 06 F6 | 	mov	local08, #0
0bbc8                 | ' numpar=0
0bbc8                 | ' if lparts(ct+1).token=token_lpar then								' check if it is an array
0bbc8     37 00 00 FF 
0bbcc     44 E4 05 F1 | 	add	objptr, ##28228
0bbd0     F2 2C 02 FB | 	rdlong	local04, objptr
0bbd4     01 2C 06 F1 | 	add	local04, #1
0bbd8     03 2C 66 F0 | 	shl	local04, #3
0bbdc     02 00 00 FF 
0bbe0     38 E4 85 F1 | 	sub	objptr, ##1080
0bbe4     F2 2C 02 F1 | 	add	local04, objptr
0bbe8     04 2C 06 F1 | 	add	local04, #4
0bbec     16 33 02 FB | 	rdlong	local07, local04
0bbf0     15 32 0E F2 | 	cmp	local07, #21 wz
0bbf4     35 00 00 FF 
0bbf8     0C E4 85 F1 | 	sub	objptr, ##27148
0bbfc     54 01 90 5D |  if_ne	jmp	#LR__0967
0bc00     37 00 00 FF 
0bc04     44 E4 05 F1 | 	add	objptr, ##28228
0bc08     F2 36 02 FB | 	rdlong	local09, objptr
0bc0c     01 36 06 F1 | 	add	local09, #1
0bc10     F2 36 62 FC | 	wrlong	local09, objptr
0bc14     37 00 00 FF 
0bc18     44 E4 85 F1 | 	sub	objptr, ##28228
0bc1c                 | '   ct+=1 											' omit this lpar, this is for expr list
0bc1c                 | '   do
0bc1c                 | LR__0963
0bc1c     37 00 00 FF 
0bc20     44 E4 05 F1 | 	add	objptr, ##28228
0bc24     F2 2C 02 FB | 	rdlong	local04, objptr
0bc28     01 2C 06 F1 | 	add	local04, #1
0bc2c     F2 2C 62 FC | 	wrlong	local04, objptr
0bc30                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0bc30                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0bc30     03 2C 66 F0 | 	shl	local04, #3
0bc34     02 00 00 FF 
0bc38     38 E4 85 F1 | 	sub	objptr, ##1080
0bc3c     F2 2C 02 F1 | 	add	local04, objptr
0bc40     04 2C 06 F1 | 	add	local04, #4
0bc44     16 37 02 FB | 	rdlong	local09, local04
0bc48     15 36 0E F2 | 	cmp	local09, #21 wz
0bc4c     35 00 00 FF 
0bc50     0C E4 85 F1 | 	sub	objptr, ##27148
0bc54     44 00 90 5D |  if_ne	jmp	#LR__0964
0bc58     37 00 00 FF 
0bc5c     44 E4 05 F1 | 	add	objptr, ##28228
0bc60     F2 36 02 FB | 	rdlong	local09, objptr
0bc64     01 36 06 F1 | 	add	local09, #1
0bc68     F2 36 62 FC | 	wrlong	local09, objptr
0bc6c     37 00 00 FF 
0bc70     44 E4 85 F1 | 	sub	objptr, ##28228
0bc74     AC 01 B0 FD | 	call	#_expr
0bc78     FD 38 02 F6 | 	mov	local10, result1
0bc7c     37 00 00 FF 
0bc80     44 E4 05 F1 | 	add	objptr, ##28228
0bc84     F2 36 02 FB | 	rdlong	local09, objptr
0bc88     01 36 06 F1 | 	add	local09, #1
0bc8c     F2 36 62 FC | 	wrlong	local09, objptr
0bc90     37 00 00 FF 
0bc94     44 E4 85 F1 | 	sub	objptr, ##28228
0bc98     08 00 90 FD | 	jmp	#LR__0965
0bc9c                 | LR__0964
0bc9c     84 01 B0 FD | 	call	#_expr
0bca0     FD 38 02 F6 | 	mov	local10, result1
0bca4                 | LR__0965
0bca4                 | '     if err>0 then return err
0bca4     01 38 56 F2 | 	cmps	local10, #1 wc
0bca8     1C FB 01 36 |  if_ae	mov	result1, local10
0bcac     68 01 90 3D |  if_ae	jmp	#LR__0968
0bcb0     01 34 06 F1 | 	add	local08, #1
0bcb4     37 00 00 FF 
0bcb8     44 E4 05 F1 | 	add	objptr, ##28228
0bcbc     F2 2C 02 FB | 	rdlong	local04, objptr
0bcc0     03 2C 66 F0 | 	shl	local04, #3
0bcc4     02 00 00 FF 
0bcc8     38 E4 85 F1 | 	sub	objptr, ##1080
0bccc     F2 2C 02 F1 | 	add	local04, objptr
0bcd0     04 2C 06 F1 | 	add	local04, #4
0bcd4     16 39 02 FB | 	rdlong	local10, local04
0bcd8     14 38 0E F2 | 	cmp	local10, #20 wz
0bcdc     35 00 00 FF 
0bce0     0C E4 85 F1 | 	sub	objptr, ##27148
0bce4     34 00 90 AD |  if_e	jmp	#LR__0966
0bce8     37 00 00 FF 
0bcec     44 E4 05 F1 | 	add	objptr, ##28228
0bcf0     F2 38 02 FB | 	rdlong	local10, objptr
0bcf4     03 38 66 F0 | 	shl	local10, #3
0bcf8     02 00 00 FF 
0bcfc     38 E4 85 F1 | 	sub	objptr, ##1080
0bd00     F2 38 02 F1 | 	add	local10, objptr
0bd04     04 38 06 F1 | 	add	local10, #4
0bd08     1C 39 02 FB | 	rdlong	local10, local10
0bd0c     FE 39 0E F2 | 	cmp	local10, #510 wz
0bd10     35 00 00 FF 
0bd14     0C E4 85 F1 | 	sub	objptr, ##27148
0bd18     00 FF 9F 5D |  if_ne	jmp	#LR__0963
0bd1c                 | LR__0966
0bd1c                 | '     if lparts(ct).token=token_end then return 14
0bd1c     37 00 00 FF 
0bd20     44 E4 05 F1 | 	add	objptr, ##28228
0bd24     F2 2C 02 FB | 	rdlong	local04, objptr
0bd28     03 2C 66 F0 | 	shl	local04, #3
0bd2c     02 00 00 FF 
0bd30     38 E4 85 F1 | 	sub	objptr, ##1080
0bd34     F2 2C 02 F1 | 	add	local04, objptr
0bd38     04 2C 06 F1 | 	add	local04, #4
0bd3c     16 39 02 FB | 	rdlong	local10, local04
0bd40     FE 39 0E F2 | 	cmp	local10, #510 wz
0bd44     35 00 00 FF 
0bd48     0C E4 85 F1 | 	sub	objptr, ##27148
0bd4c     0E FA 05 A6 |  if_e	mov	result1, #14
0bd50     C4 00 90 AD |  if_e	jmp	#LR__0968
0bd54                 | LR__0967
0bd54     1A 29 02 F6 | 	mov	local02, local08
0bd58     12 2A 06 F6 | 	mov	local03, #18
0bd5c     18 27 02 F6 | 	mov	local01, local06
0bd60     13 37 02 F6 | 	mov	local09, local01
0bd64     14 3B 02 F6 | 	mov	local11, local02
0bd68     15 27 02 F6 | 	mov	local01, local03
0bd6c     4A 00 00 FF 
0bd70     7C E4 05 F1 | 	add	objptr, ##38012
0bd74     F2 38 02 FB | 	rdlong	local10, objptr
0bd78     1C 35 02 F6 | 	mov	local08, local10
0bd7c     01 34 66 F0 | 	shl	local08, #1
0bd80     1C 35 02 F1 | 	add	local08, local10
0bd84     02 34 66 F0 | 	shl	local08, #2
0bd88     03 00 00 FF 
0bd8c     00 E4 85 F1 | 	sub	objptr, ##1536
0bd90     F2 34 02 F1 | 	add	local08, objptr
0bd94     1A 37 62 FC | 	wrlong	local09, local08
0bd98     03 00 00 FF 
0bd9c     00 E4 05 F1 | 	add	objptr, ##1536
0bda0     F2 38 02 FB | 	rdlong	local10, objptr
0bda4     1C 37 02 F6 | 	mov	local09, local10
0bda8     01 36 66 F0 | 	shl	local09, #1
0bdac     1C 37 02 F1 | 	add	local09, local10
0bdb0     02 36 66 F0 | 	shl	local09, #2
0bdb4     03 00 00 FF 
0bdb8     00 E4 85 F1 | 	sub	objptr, ##1536
0bdbc     F2 36 02 F1 | 	add	local09, objptr
0bdc0     04 36 06 F1 | 	add	local09, #4
0bdc4     1B 3B 62 FC | 	wrlong	local11, local09
0bdc8     03 00 00 FF 
0bdcc     00 E4 05 F1 | 	add	objptr, ##1536
0bdd0     F2 3A 02 FB | 	rdlong	local11, objptr
0bdd4     1D 39 02 F6 | 	mov	local10, local11
0bdd8     01 38 66 F0 | 	shl	local10, #1
0bddc     1D 39 02 F1 | 	add	local10, local11
0bde0     02 38 66 F0 | 	shl	local10, #2
0bde4     03 00 00 FF 
0bde8     00 E4 85 F1 | 	sub	objptr, ##1536
0bdec     F2 38 02 F1 | 	add	local10, objptr
0bdf0     08 38 06 F1 | 	add	local10, #8
0bdf4     1C 27 62 FC | 	wrlong	local01, local10
0bdf8     03 00 00 FF 
0bdfc     00 E4 05 F1 | 	add	objptr, ##1536
0be00     F2 36 02 FB | 	rdlong	local09, objptr
0be04     01 36 06 F1 | 	add	local09, #1
0be08     F2 36 62 FC | 	wrlong	local09, objptr
0be0c     4A 00 00 FF 
0be10     7C E4 85 F1 | 	sub	objptr, ##38012
0be14                 | ' t2.result.twowords(1)=numpar
0be14                 | ' t2.result_type=fun_getaddr:t2.result.twowords(0)=j
0be14                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0be14                 | ' return 0
0be14     00 FA 05 F6 | 	mov	result1, #0
0be18                 | LR__0968
0be18     A7 F0 03 F6 | 	mov	ptra, fp
0be1c     B2 00 A0 FD | 	call	#popregs_
0be20                 | _getaddr_ret
0be20     2D 00 64 FD | 	ret
0be24                 | 
0be24                 | ' 
0be24                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0be24                 | ' '--------------------------------------------- 
0be24                 | ' 
0be24                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0be24                 | ' '------------------------------------------ The end of the precompiler  ----------------------------------------------------------------
0be24                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0be24                 | ' 
0be24                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0be24                 | ' '
0be24                 | ' '     			   	    COMPILE TIME EXPRESSION DECODER/EVALUATOR
0be24                 | ' '
0be24                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0be24                 | ' 
0be24                 | ' function expr() as ulong 
0be24                 | _expr
0be24     07 4A 05 F6 | 	mov	COUNT_, #7
0be28     A8 00 A0 FD | 	call	#pushregs_
0be2c                 | _expr_enter
0be2c     37 00 00 FF 
0be30     44 E4 05 F1 | 	add	objptr, ##28228
0be34     F2 2C 02 FB | 	rdlong	local04, objptr
0be38     03 2C 66 F0 | 	shl	local04, #3
0be3c     02 00 00 FF 
0be40     38 E4 85 F1 | 	sub	objptr, ##1080
0be44     F2 2C 02 F1 | 	add	local04, objptr
0be48     04 2C 06 F1 | 	add	local04, #4
0be4c     16 2F 02 FB | 	rdlong	local05, local04
0be50                 | ' 
0be50                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
0be50     FE 2F 0E F2 | 	cmp	local05, #510 wz
0be54     35 00 00 FF 
0be58     0C E4 85 F1 | 	sub	objptr, ##27148
0be5c     C4 00 90 5D |  if_ne	jmp	#LR__0970
0be60     1D 26 06 F6 | 	mov	local01, #29
0be64     FF 2A 06 F6 | 	mov	local03, #255
0be68     13 31 02 F6 | 	mov	local06, local01
0be6c     14 33 02 F6 | 	mov	local07, local02
0be70     15 27 02 F6 | 	mov	local01, local03
0be74     4A 00 00 FF 
0be78     7C E4 05 F1 | 	add	objptr, ##38012
0be7c     F2 2E 02 FB | 	rdlong	local05, objptr
0be80     17 2D 02 F6 | 	mov	local04, local05
0be84     01 2C 66 F0 | 	shl	local04, #1
0be88     17 2D 02 F1 | 	add	local04, local05
0be8c     02 2C 66 F0 | 	shl	local04, #2
0be90     03 00 00 FF 
0be94     00 E4 85 F1 | 	sub	objptr, ##1536
0be98     F2 2C 02 F1 | 	add	local04, objptr
0be9c     16 31 62 FC | 	wrlong	local06, local04
0bea0     03 00 00 FF 
0bea4     00 E4 05 F1 | 	add	objptr, ##1536
0bea8     F2 30 02 FB | 	rdlong	local06, objptr
0beac     18 2F 02 F6 | 	mov	local05, local06
0beb0     01 2E 66 F0 | 	shl	local05, #1
0beb4     18 2F 02 F1 | 	add	local05, local06
0beb8     02 2E 66 F0 | 	shl	local05, #2
0bebc     03 00 00 FF 
0bec0     00 E4 85 F1 | 	sub	objptr, ##1536
0bec4     F2 2E 02 F1 | 	add	local05, objptr
0bec8     04 2E 06 F1 | 	add	local05, #4
0becc     17 33 62 FC | 	wrlong	local07, local05
0bed0     03 00 00 FF 
0bed4     00 E4 05 F1 | 	add	objptr, ##1536
0bed8     F2 32 02 FB | 	rdlong	local07, objptr
0bedc     19 31 02 F6 | 	mov	local06, local07
0bee0     01 30 66 F0 | 	shl	local06, #1
0bee4     19 31 02 F1 | 	add	local06, local07
0bee8     02 30 66 F0 | 	shl	local06, #2
0beec     03 00 00 FF 
0bef0     00 E4 85 F1 | 	sub	objptr, ##1536
0bef4     F2 30 02 F1 | 	add	local06, objptr
0bef8     08 30 06 F1 | 	add	local06, #8
0befc     18 27 62 FC | 	wrlong	local01, local06
0bf00     03 00 00 FF 
0bf04     00 E4 05 F1 | 	add	objptr, ##1536
0bf08     F2 30 02 FB | 	rdlong	local06, objptr
0bf0c     01 30 06 F1 | 	add	local06, #1
0bf10     F2 30 62 FC | 	wrlong	local06, objptr
0bf14     4A 00 00 FF 
0bf18     7C E4 85 F1 | 	sub	objptr, ##38012
0bf1c     1D FA 05 F6 | 	mov	result1, #29
0bf20     64 01 90 FD | 	jmp	#LR__0973
0bf24                 | LR__0970
0bf24     00 26 06 F6 | 	mov	local01, #0
0bf28     68 01 B0 FD | 	call	#_addsub
0bf2c                 | ' t3.result.uresult=0
0bf2c                 | ' err=addsub()             			' call higher priority operator check. It will itself call muldiv, which then calls getval/getvar 
0bf2c                 | ' if err>0 then return err
0bf2c     01 FA 15 F2 | 	cmp	result1, #1 wc
0bf30     54 01 90 3D |  if_ae	jmp	#LR__0973
0bf34     37 00 00 FF 
0bf38     44 E4 05 F1 | 	add	objptr, ##28228
0bf3c     F2 2C 02 FB | 	rdlong	local04, objptr
0bf40     03 2C 66 F0 | 	shl	local04, #3
0bf44     02 00 00 FF 
0bf48     38 E4 85 F1 | 	sub	objptr, ##1080
0bf4c     F2 2C 02 F1 | 	add	local04, objptr
0bf50     04 2C 06 F1 | 	add	local04, #4
0bf54     16 2F 02 FB | 	rdlong	local05, local04
0bf58                 | ' op = lparts(ct).token				' Lowest priority : comparison operators
0bf58                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
0bf58     35 00 00 FF 
0bf5c     0C E4 85 F1 | 	sub	objptr, ##27148
0bf60                 | LR__0971
0bf60     1B 2E 0E F2 | 	cmp	local05, #27 wz
0bf64     0F 2E 0E 52 |  if_ne	cmp	local05, #15 wz
0bf68     10 2E 0E 52 |  if_ne	cmp	local05, #16 wz
0bf6c     27 2E 0E 52 |  if_ne	cmp	local05, #39 wz
0bf70     26 2E 0E 52 |  if_ne	cmp	local05, #38 wz
0bf74     2A 2E 0E 52 |  if_ne	cmp	local05, #42 wz
0bf78     08 01 90 5D |  if_ne	jmp	#LR__0972
0bf7c     37 00 00 FF 
0bf80     44 E4 05 F1 | 	add	objptr, ##28228
0bf84     F2 30 02 FB | 	rdlong	local06, objptr
0bf88     01 30 06 F1 | 	add	local06, #1
0bf8c     F2 30 62 FC | 	wrlong	local06, objptr
0bf90     37 00 00 FF 
0bf94     44 E4 85 F1 | 	sub	objptr, ##28228
0bf98     F8 00 B0 FD | 	call	#_addsub
0bf9c                 | '   ct+=1
0bf9c                 | '   err=addsub() : if err>0 then return err
0bf9c     01 FA 15 F2 | 	cmp	result1, #1 wc
0bfa0     E4 00 90 3D |  if_ae	jmp	#LR__0973
0bfa4     17 2B 02 F6 | 	mov	local03, local05
0bfa8     13 31 02 F6 | 	mov	local06, local01
0bfac     14 33 02 F6 | 	mov	local07, local02
0bfb0     15 2F 02 F6 | 	mov	local05, local03
0bfb4     4A 00 00 FF 
0bfb8     7C E4 05 F1 | 	add	objptr, ##38012
0bfbc     F2 2C 02 FB | 	rdlong	local04, objptr
0bfc0     16 FB 01 F6 | 	mov	result1, local04
0bfc4     01 FA 65 F0 | 	shl	result1, #1
0bfc8     16 FB 01 F1 | 	add	result1, local04
0bfcc     02 FA 65 F0 | 	shl	result1, #2
0bfd0     03 00 00 FF 
0bfd4     00 E4 85 F1 | 	sub	objptr, ##1536
0bfd8     F2 FA 01 F1 | 	add	result1, objptr
0bfdc     FD 30 62 FC | 	wrlong	local06, result1
0bfe0     03 00 00 FF 
0bfe4     00 E4 05 F1 | 	add	objptr, ##1536
0bfe8     F2 30 02 FB | 	rdlong	local06, objptr
0bfec     18 2D 02 F6 | 	mov	local04, local06
0bff0     01 2C 66 F0 | 	shl	local04, #1
0bff4     18 2D 02 F1 | 	add	local04, local06
0bff8     02 2C 66 F0 | 	shl	local04, #2
0bffc     03 00 00 FF 
0c000     00 E4 85 F1 | 	sub	objptr, ##1536
0c004     F2 2C 02 F1 | 	add	local04, objptr
0c008     04 2C 06 F1 | 	add	local04, #4
0c00c     16 33 62 FC | 	wrlong	local07, local04
0c010     03 00 00 FF 
0c014     00 E4 05 F1 | 	add	objptr, ##1536
0c018     F2 32 02 FB | 	rdlong	local07, objptr
0c01c     19 31 02 F6 | 	mov	local06, local07
0c020     01 30 66 F0 | 	shl	local06, #1
0c024     19 31 02 F1 | 	add	local06, local07
0c028     02 30 66 F0 | 	shl	local06, #2
0c02c     03 00 00 FF 
0c030     00 E4 85 F1 | 	sub	objptr, ##1536
0c034     F2 30 02 F1 | 	add	local06, objptr
0c038     08 30 06 F1 | 	add	local06, #8
0c03c     18 2F 62 FC | 	wrlong	local05, local06
0c040     03 00 00 FF 
0c044     00 E4 05 F1 | 	add	objptr, ##1536
0c048     F2 30 02 FB | 	rdlong	local06, objptr
0c04c     01 30 06 F1 | 	add	local06, #1
0c050     F2 30 62 FC | 	wrlong	local06, objptr
0c054     13 00 00 FF 
0c058     38 E4 85 F1 | 	sub	objptr, ##9784
0c05c     F2 2C 02 FB | 	rdlong	local04, objptr
0c060     03 2C 66 F0 | 	shl	local04, #3
0c064     02 00 00 FF 
0c068     38 E4 85 F1 | 	sub	objptr, ##1080
0c06c     F2 2C 02 F1 | 	add	local04, objptr
0c070     04 2C 06 F1 | 	add	local04, #4
0c074     16 2F 02 FB | 	rdlong	local05, local04
0c078     35 00 00 FF 
0c07c     0C E4 85 F1 | 	sub	objptr, ##27148
0c080     DC FE 9F FD | 	jmp	#LR__0971
0c084                 | LR__0972
0c084                 | ' return 0  
0c084     00 FA 05 F6 | 	mov	result1, #0
0c088                 | LR__0973
0c088     A7 F0 03 F6 | 	mov	ptra, fp
0c08c     B2 00 A0 FD | 	call	#popregs_
0c090                 | _expr_ret
0c090     2D 00 64 FD | 	ret
0c094                 | 
0c094                 | ' 
0c094                 | ' ' Second level operators : add, sub, logic
0c094                 | ' 
0c094                 | ' function addsub() as ulong
0c094                 | _addsub
0c094     07 4A 05 F6 | 	mov	COUNT_, #7
0c098     A8 00 A0 FD | 	call	#pushregs_
0c09c                 | _addsub_enter
0c09c     00 26 06 F6 | 	mov	local01, #0
0c0a0     60 01 B0 FD | 	call	#_muldiv
0c0a4                 | ' 
0c0a4                 | ' t3.result.uresult=0
0c0a4                 | ' err=muldiv() : if err>0 then return err           			 
0c0a4     01 FA 15 F2 | 	cmp	result1, #1 wc
0c0a8     4C 01 90 3D |  if_ae	jmp	#LR__0982
0c0ac     37 00 00 FF 
0c0b0     44 E4 05 F1 | 	add	objptr, ##28228
0c0b4     F2 2C 02 FB | 	rdlong	local04, objptr
0c0b8     03 2C 66 F0 | 	shl	local04, #3
0c0bc     02 00 00 FF 
0c0c0     38 E4 85 F1 | 	sub	objptr, ##1080
0c0c4     F2 2C 02 F1 | 	add	local04, objptr
0c0c8     04 2C 06 F1 | 	add	local04, #4
0c0cc     16 2F 02 FB | 	rdlong	local05, local04
0c0d0                 | ' op = lparts(ct).token				 
0c0d0                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
0c0d0     35 00 00 FF 
0c0d4     0C E4 85 F1 | 	sub	objptr, ##27148
0c0d8                 | LR__0980
0c0d8     01 2E 0E F2 | 	cmp	local05, #1 wz
0c0dc     02 2E 0E 52 |  if_ne	cmp	local05, #2 wz
0c0e0     07 2E 0E 52 |  if_ne	cmp	local05, #7 wz
0c0e4     03 2E 0E 52 |  if_ne	cmp	local05, #3 wz
0c0e8     08 01 90 5D |  if_ne	jmp	#LR__0981
0c0ec     37 00 00 FF 
0c0f0     44 E4 05 F1 | 	add	objptr, ##28228
0c0f4     F2 2C 02 FB | 	rdlong	local04, objptr
0c0f8     01 2C 06 F1 | 	add	local04, #1
0c0fc     F2 2C 62 FC | 	wrlong	local04, objptr
0c100     37 00 00 FF 
0c104     44 E4 85 F1 | 	sub	objptr, ##28228
0c108     F8 00 B0 FD | 	call	#_muldiv
0c10c                 | '   ct+=1
0c10c                 | '   err=muldiv() : if err>0 then return err   
0c10c     01 FA 15 F2 | 	cmp	result1, #1 wc
0c110     E4 00 90 3D |  if_ae	jmp	#LR__0982
0c114     17 2B 02 F6 | 	mov	local03, local05
0c118     13 31 02 F6 | 	mov	local06, local01
0c11c     14 33 02 F6 | 	mov	local07, local02
0c120     15 2F 02 F6 | 	mov	local05, local03
0c124     4A 00 00 FF 
0c128     7C E4 05 F1 | 	add	objptr, ##38012
0c12c     F2 2C 02 FB | 	rdlong	local04, objptr
0c130     16 FB 01 F6 | 	mov	result1, local04
0c134     01 FA 65 F0 | 	shl	result1, #1
0c138     16 FB 01 F1 | 	add	result1, local04
0c13c     02 FA 65 F0 | 	shl	result1, #2
0c140     03 00 00 FF 
0c144     00 E4 85 F1 | 	sub	objptr, ##1536
0c148     F2 FA 01 F1 | 	add	result1, objptr
0c14c     FD 30 62 FC | 	wrlong	local06, result1
0c150     03 00 00 FF 
0c154     00 E4 05 F1 | 	add	objptr, ##1536
0c158     F2 30 02 FB | 	rdlong	local06, objptr
0c15c     18 2D 02 F6 | 	mov	local04, local06
0c160     01 2C 66 F0 | 	shl	local04, #1
0c164     18 2D 02 F1 | 	add	local04, local06
0c168     02 2C 66 F0 | 	shl	local04, #2
0c16c     03 00 00 FF 
0c170     00 E4 85 F1 | 	sub	objptr, ##1536
0c174     F2 2C 02 F1 | 	add	local04, objptr
0c178     04 2C 06 F1 | 	add	local04, #4
0c17c     16 33 62 FC | 	wrlong	local07, local04
0c180     03 00 00 FF 
0c184     00 E4 05 F1 | 	add	objptr, ##1536
0c188     F2 32 02 FB | 	rdlong	local07, objptr
0c18c     19 31 02 F6 | 	mov	local06, local07
0c190     01 30 66 F0 | 	shl	local06, #1
0c194     19 31 02 F1 | 	add	local06, local07
0c198     02 30 66 F0 | 	shl	local06, #2
0c19c     03 00 00 FF 
0c1a0     00 E4 85 F1 | 	sub	objptr, ##1536
0c1a4     F2 30 02 F1 | 	add	local06, objptr
0c1a8     08 30 06 F1 | 	add	local06, #8
0c1ac     18 2F 62 FC | 	wrlong	local05, local06
0c1b0     03 00 00 FF 
0c1b4     00 E4 05 F1 | 	add	objptr, ##1536
0c1b8     F2 30 02 FB | 	rdlong	local06, objptr
0c1bc     01 30 06 F1 | 	add	local06, #1
0c1c0     F2 30 62 FC | 	wrlong	local06, objptr
0c1c4     13 00 00 FF 
0c1c8     38 E4 85 F1 | 	sub	objptr, ##9784
0c1cc     F2 2C 02 FB | 	rdlong	local04, objptr
0c1d0     03 2C 66 F0 | 	shl	local04, #3
0c1d4     02 00 00 FF 
0c1d8     38 E4 85 F1 | 	sub	objptr, ##1080
0c1dc     F2 2C 02 F1 | 	add	local04, objptr
0c1e0     04 2C 06 F1 | 	add	local04, #4
0c1e4     16 2F 02 FB | 	rdlong	local05, local04
0c1e8     35 00 00 FF 
0c1ec     0C E4 85 F1 | 	sub	objptr, ##27148
0c1f0     E4 FE 9F FD | 	jmp	#LR__0980
0c1f4                 | LR__0981
0c1f4                 | ' return 0
0c1f4     00 FA 05 F6 | 	mov	result1, #0
0c1f8                 | LR__0982
0c1f8     A7 F0 03 F6 | 	mov	ptra, fp
0c1fc     B2 00 A0 FD | 	call	#popregs_
0c200                 | _addsub_ret
0c200     2D 00 64 FD | 	ret
0c204                 | 
0c204                 | ' 
0c204                 | ' ' Third level operators : mul,div,shift,power
0c204                 | ' 
0c204                 | ' function muldiv() as ulong
0c204                 | _muldiv
0c204     07 4A 05 F6 | 	mov	COUNT_, #7
0c208     A8 00 A0 FD | 	call	#pushregs_
0c20c                 | _muldiv_enter
0c20c     00 26 06 F6 | 	mov	local01, #0
0c210     6C 01 B0 FD | 	call	#_getvalue
0c214                 | ' 
0c214                 | ' t3.result.uresult=0
0c214                 | ' err=getvalue() : if err>0 then return err     
0c214     01 FA 15 F2 | 	cmp	result1, #1 wc
0c218     58 01 90 3D |  if_ae	jmp	#LR__0992
0c21c     37 00 00 FF 
0c220     44 E4 05 F1 | 	add	objptr, ##28228
0c224     F2 2C 02 FB | 	rdlong	local04, objptr
0c228     03 2C 66 F0 | 	shl	local04, #3
0c22c     02 00 00 FF 
0c230     38 E4 85 F1 | 	sub	objptr, ##1080
0c234     F2 2C 02 F1 | 	add	local04, objptr
0c238     04 2C 06 F1 | 	add	local04, #4
0c23c     16 2F 02 FB | 	rdlong	local05, local04
0c240                 | ' op = lparts(ct).token
0c240                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
0c240     35 00 00 FF 
0c244     0C E4 85 F1 | 	sub	objptr, ##27148
0c248                 | LR__0990
0c248     05 2E 0E F2 | 	cmp	local05, #5 wz
0c24c     08 2E 0E 52 |  if_ne	cmp	local05, #8 wz
0c250     06 2E 0E 52 |  if_ne	cmp	local05, #6 wz
0c254     09 2E 0E 52 |  if_ne	cmp	local05, #9 wz
0c258     0A 2E 0E 52 |  if_ne	cmp	local05, #10 wz
0c25c     0B 2E 0E 52 |  if_ne	cmp	local05, #11 wz
0c260     0C 2E 0E 52 |  if_ne	cmp	local05, #12 wz
0c264     08 01 90 5D |  if_ne	jmp	#LR__0991
0c268     37 00 00 FF 
0c26c     44 E4 05 F1 | 	add	objptr, ##28228
0c270     F2 2C 02 FB | 	rdlong	local04, objptr
0c274     01 2C 06 F1 | 	add	local04, #1
0c278     F2 2C 62 FC | 	wrlong	local04, objptr
0c27c     37 00 00 FF 
0c280     44 E4 85 F1 | 	sub	objptr, ##28228
0c284     F8 00 B0 FD | 	call	#_getvalue
0c288                 | '   ct+=1
0c288                 | '   err=getvalue() :if err>0 then return err   
0c288     01 FA 15 F2 | 	cmp	result1, #1 wc
0c28c     E4 00 90 3D |  if_ae	jmp	#LR__0992
0c290     17 2B 02 F6 | 	mov	local03, local05
0c294     13 31 02 F6 | 	mov	local06, local01
0c298     14 33 02 F6 | 	mov	local07, local02
0c29c     15 2F 02 F6 | 	mov	local05, local03
0c2a0     4A 00 00 FF 
0c2a4     7C E4 05 F1 | 	add	objptr, ##38012
0c2a8     F2 2C 02 FB | 	rdlong	local04, objptr
0c2ac     16 FB 01 F6 | 	mov	result1, local04
0c2b0     01 FA 65 F0 | 	shl	result1, #1
0c2b4     16 FB 01 F1 | 	add	result1, local04
0c2b8     02 FA 65 F0 | 	shl	result1, #2
0c2bc     03 00 00 FF 
0c2c0     00 E4 85 F1 | 	sub	objptr, ##1536
0c2c4     F2 FA 01 F1 | 	add	result1, objptr
0c2c8     FD 30 62 FC | 	wrlong	local06, result1
0c2cc     03 00 00 FF 
0c2d0     00 E4 05 F1 | 	add	objptr, ##1536
0c2d4     F2 30 02 FB | 	rdlong	local06, objptr
0c2d8     18 2D 02 F6 | 	mov	local04, local06
0c2dc     01 2C 66 F0 | 	shl	local04, #1
0c2e0     18 2D 02 F1 | 	add	local04, local06
0c2e4     02 2C 66 F0 | 	shl	local04, #2
0c2e8     03 00 00 FF 
0c2ec     00 E4 85 F1 | 	sub	objptr, ##1536
0c2f0     F2 2C 02 F1 | 	add	local04, objptr
0c2f4     04 2C 06 F1 | 	add	local04, #4
0c2f8     16 33 62 FC | 	wrlong	local07, local04
0c2fc     03 00 00 FF 
0c300     00 E4 05 F1 | 	add	objptr, ##1536
0c304     F2 32 02 FB | 	rdlong	local07, objptr
0c308     19 31 02 F6 | 	mov	local06, local07
0c30c     01 30 66 F0 | 	shl	local06, #1
0c310     19 31 02 F1 | 	add	local06, local07
0c314     02 30 66 F0 | 	shl	local06, #2
0c318     03 00 00 FF 
0c31c     00 E4 85 F1 | 	sub	objptr, ##1536
0c320     F2 30 02 F1 | 	add	local06, objptr
0c324     08 30 06 F1 | 	add	local06, #8
0c328     18 2F 62 FC | 	wrlong	local05, local06
0c32c     03 00 00 FF 
0c330     00 E4 05 F1 | 	add	objptr, ##1536
0c334     F2 30 02 FB | 	rdlong	local06, objptr
0c338     01 30 06 F1 | 	add	local06, #1
0c33c     F2 30 62 FC | 	wrlong	local06, objptr
0c340     13 00 00 FF 
0c344     38 E4 85 F1 | 	sub	objptr, ##9784
0c348     F2 2C 02 FB | 	rdlong	local04, objptr
0c34c     03 2C 66 F0 | 	shl	local04, #3
0c350     02 00 00 FF 
0c354     38 E4 85 F1 | 	sub	objptr, ##1080
0c358     F2 2C 02 F1 | 	add	local04, objptr
0c35c     04 2C 06 F1 | 	add	local04, #4
0c360     16 2F 02 FB | 	rdlong	local05, local04
0c364     35 00 00 FF 
0c368     0C E4 85 F1 | 	sub	objptr, ##27148
0c36c     D8 FE 9F FD | 	jmp	#LR__0990
0c370                 | LR__0991
0c370                 | ' return 0
0c370     00 FA 05 F6 | 	mov	result1, #0
0c374                 | LR__0992
0c374     A7 F0 03 F6 | 	mov	ptra, fp
0c378     B2 00 A0 FD | 	call	#popregs_
0c37c                 | _muldiv_ret
0c37c     2D 00 64 FD | 	ret
0c380                 | 
0c380                 | ' 
0c380                 | ' ' Get a value for operations
0c380                 | ' 
0c380                 | ' function getvalue()  as ulong
0c380                 | _getvalue
0c380     0B 4A 05 F6 | 	mov	COUNT_, #11
0c384     A8 00 A0 FD | 	call	#pushregs_
0c388                 | _getvalue_enter
0c388     01 2C 06 F6 | 	mov	local04, #1
0c38c     00 26 06 F6 | 	mov	local01, #0
0c390     1D 2A 06 F6 | 	mov	local03, #29
0c394     37 00 00 FF 
0c398     44 E4 05 F1 | 	add	objptr, ##28228
0c39c     F2 16 02 FB | 	rdlong	arg03, objptr
0c3a0     03 16 66 F0 | 	shl	arg03, #3
0c3a4     02 00 00 FF 
0c3a8     38 E4 85 F1 | 	sub	objptr, ##1080
0c3ac     F2 16 02 F1 | 	add	arg03, objptr
0c3b0     04 16 06 F1 | 	add	arg03, #4
0c3b4     0B 2F 02 FB | 	rdlong	local05, arg03
0c3b8                 | ' 
0c3b8                 | ' m=1											' for negative numbers
0c3b8                 | ' t1.result.uresult=0: t1.result_type=result_uint
0c3b8                 | ' op=lparts(ct).token
0c3b8                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token				' '-' operator found
0c3b8     02 2E 0E F2 | 	cmp	local05, #2 wz
0c3bc     35 00 00 FF 
0c3c0     0C E4 85 F1 | 	sub	objptr, ##27148
0c3c4     38 00 90 5D |  if_ne	jmp	#LR__1000
0c3c8     01 2C 66 F6 | 	neg	local04, #1
0c3cc     37 00 00 FF 
0c3d0     44 E4 05 F1 | 	add	objptr, ##28228
0c3d4     F2 2E 02 FB | 	rdlong	local05, objptr
0c3d8     01 2E 06 F1 | 	add	local05, #1
0c3dc     F2 2E 62 FC | 	wrlong	local05, objptr
0c3e0     03 2E 66 F0 | 	shl	local05, #3
0c3e4     02 00 00 FF 
0c3e8     38 E4 85 F1 | 	sub	objptr, ##1080
0c3ec     F2 2E 02 F1 | 	add	local05, objptr
0c3f0     04 2E 06 F1 | 	add	local05, #4
0c3f4     17 2F 02 FB | 	rdlong	local05, local05
0c3f8     35 00 00 FF 
0c3fc     0C E4 85 F1 | 	sub	objptr, ##27148
0c400                 | LR__1000
0c400                 | ' select case op
0c400     01 00 00 FF 
0c404     00 2E 0E F2 | 	cmp	local05, ##512 wz
0c408     44 00 90 AD |  if_e	jmp	#LR__1001
0c40c     01 00 00 FF 
0c410     01 2E 0E F2 | 	cmp	local05, ##513 wz
0c414     90 01 90 AD |  if_e	jmp	#LR__1004
0c418     01 00 00 FF 
0c41c     02 2E 0E F2 | 	cmp	local05, ##514 wz
0c420     44 04 90 AD |  if_e	jmp	#LR__1011
0c424     01 00 00 FF 
0c428     03 2E 0E F2 | 	cmp	local05, ##515 wz
0c42c     A8 05 90 AD |  if_e	jmp	#LR__1014
0c430     2C 2E 0E F2 | 	cmp	local05, #44 wz
0c434     78 07 90 AD |  if_e	jmp	#LR__1019
0c438     01 00 00 FF 
0c43c     04 2E 0E F2 | 	cmp	local05, ##516 wz
0c440     70 08 90 AD |  if_e	jmp	#LR__1020
0c444     15 2E 0E F2 | 	cmp	local05, #21 wz
0c448     98 08 90 AD |  if_e	jmp	#LR__1021
0c44c     10 09 90 FD | 	jmp	#LR__1022
0c450                 | LR__1001
0c450                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_int  
0c450     01 2C 0E F2 | 	cmp	local04, #1 wz
0c454     3C 00 90 5D |  if_ne	jmp	#LR__1002
0c458     37 00 00 FF 
0c45c     44 E4 05 F1 | 	add	objptr, ##28228
0c460     F2 2E 02 FB | 	rdlong	local05, objptr
0c464     03 2E 66 F0 | 	shl	local05, #3
0c468     02 00 00 FF 
0c46c     38 E4 85 F1 | 	sub	objptr, ##1080
0c470     F2 2E 02 F1 | 	add	local05, objptr
0c474     17 13 02 FB | 	rdlong	arg01, local05
0c478     00 14 06 F6 | 	mov	arg02, #0
0c47c     35 00 00 FF 
0c480     0C E4 85 F1 | 	sub	objptr, ##27148
0c484     B8 DE B1 FD | 	call	#__system____builtin_atoi
0c488     FD 2C 02 FD | 	qmul	local04, result1
0c48c     18 26 62 FD | 	getqx	local01
0c490     1C 2A 06 F6 | 	mov	local03, #28
0c494                 | LR__1002
0c494                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int 	' todo token_int64?
0c494     FF FF 7F FF 
0c498     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0c49c     3C 00 90 5D |  if_ne	jmp	#LR__1003
0c4a0     37 00 00 FF 
0c4a4     44 E4 05 F1 | 	add	objptr, ##28228
0c4a8     F2 2E 02 FB | 	rdlong	local05, objptr
0c4ac     03 2E 66 F0 | 	shl	local05, #3
0c4b0     02 00 00 FF 
0c4b4     38 E4 85 F1 | 	sub	objptr, ##1080
0c4b8     F2 2E 02 F1 | 	add	local05, objptr
0c4bc     17 13 02 FB | 	rdlong	arg01, local05
0c4c0     00 14 06 F6 | 	mov	arg02, #0
0c4c4     35 00 00 FF 
0c4c8     0C E4 85 F1 | 	sub	objptr, ##27148
0c4cc     70 DE B1 FD | 	call	#__system____builtin_atoi
0c4d0     FD 2C 02 FD | 	qmul	local04, result1
0c4d4     18 26 62 FD | 	getqx	local01
0c4d8     1C 2A 06 F6 | 	mov	local03, #28
0c4dc                 | LR__1003
0c4dc     13 31 02 F6 | 	mov	local06, local01
0c4e0     14 33 02 F6 | 	mov	local07, local02
0c4e4     15 2F 02 F6 | 	mov	local05, local03
0c4e8     4A 00 00 FF 
0c4ec     7C E4 05 F1 | 	add	objptr, ##38012
0c4f0     F2 26 02 FB | 	rdlong	local01, objptr
0c4f4     13 2D 02 F6 | 	mov	local04, local01
0c4f8     01 2C 66 F0 | 	shl	local04, #1
0c4fc     13 2D 02 F1 | 	add	local04, local01
0c500     02 2C 66 F0 | 	shl	local04, #2
0c504     03 00 00 FF 
0c508     00 E4 85 F1 | 	sub	objptr, ##1536
0c50c     F2 2C 02 F1 | 	add	local04, objptr
0c510     16 31 62 FC | 	wrlong	local06, local04
0c514     03 00 00 FF 
0c518     00 E4 05 F1 | 	add	objptr, ##1536
0c51c     F2 30 02 FB | 	rdlong	local06, objptr
0c520     18 27 02 F6 | 	mov	local01, local06
0c524     01 26 66 F0 | 	shl	local01, #1
0c528     18 27 02 F1 | 	add	local01, local06
0c52c     02 26 66 F0 | 	shl	local01, #2
0c530     03 00 00 FF 
0c534     00 E4 85 F1 | 	sub	objptr, ##1536
0c538     F2 26 02 F1 | 	add	local01, objptr
0c53c     04 26 06 F1 | 	add	local01, #4
0c540     13 33 62 FC | 	wrlong	local07, local01
0c544     03 00 00 FF 
0c548     00 E4 05 F1 | 	add	objptr, ##1536
0c54c     F2 32 02 FB | 	rdlong	local07, objptr
0c550     19 31 02 F6 | 	mov	local06, local07
0c554     01 30 66 F0 | 	shl	local06, #1
0c558     19 31 02 F1 | 	add	local06, local07
0c55c     02 30 66 F0 | 	shl	local06, #2
0c560     03 00 00 FF 
0c564     00 E4 85 F1 | 	sub	objptr, ##1536
0c568     F2 30 02 F1 | 	add	local06, objptr
0c56c     08 30 06 F1 | 	add	local06, #8
0c570     18 2F 62 FC | 	wrlong	local05, local06
0c574     03 00 00 FF 
0c578     00 E4 05 F1 | 	add	objptr, ##1536
0c57c     F2 30 02 FB | 	rdlong	local06, objptr
0c580     01 30 06 F1 | 	add	local06, #1
0c584     F2 30 62 FC | 	wrlong	local06, objptr
0c588     13 00 00 FF 
0c58c     38 E4 85 F1 | 	sub	objptr, ##9784
0c590     F2 30 02 FB | 	rdlong	local06, objptr
0c594     01 30 06 F1 | 	add	local06, #1
0c598     F2 30 62 FC | 	wrlong	local06, objptr
0c59c     37 00 00 FF 
0c5a0     44 E4 85 F1 | 	sub	objptr, ##28228
0c5a4     E4 07 90 FD | 	jmp	#LR__1023
0c5a8                 | LR__1004
0c5a8                 | '     if left$(lparts(ct).part$,1)="$" then lparts(ct).part$="&h"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0c5a8     37 00 00 FF 
0c5ac     44 E4 05 F1 | 	add	objptr, ##28228
0c5b0     F2 16 02 FB | 	rdlong	arg03, objptr
0c5b4     03 16 66 F0 | 	shl	arg03, #3
0c5b8     02 00 00 FF 
0c5bc     38 E4 85 F1 | 	sub	objptr, ##1080
0c5c0     F2 16 02 F1 | 	add	arg03, objptr
0c5c4     0B 13 02 FB | 	rdlong	arg01, arg03
0c5c8     01 14 06 F6 | 	mov	arg02, #1
0c5cc     35 00 00 FF 
0c5d0     0C E4 85 F1 | 	sub	objptr, ##27148
0c5d4     F4 C8 B1 FD | 	call	#__system__Left_S
0c5d8     FD 12 02 F6 | 	mov	arg01, result1
0c5dc     B8 01 00 FF 
0c5e0     E8 14 06 F6 | 	mov	arg02, ##@LR__5854
0c5e4     90 A8 B1 FD | 	call	#__system___string_cmp
0c5e8     00 FA 0D F2 | 	cmp	result1, #0 wz
0c5ec     94 00 90 5D |  if_ne	jmp	#LR__1007
0c5f0     37 00 00 FF 
0c5f4     44 E4 05 F1 | 	add	objptr, ##28228
0c5f8     F2 32 02 FB | 	rdlong	local07, objptr
0c5fc     19 31 02 F6 | 	mov	local06, local07
0c600     03 30 66 F0 | 	shl	local06, #3
0c604     02 00 00 FF 
0c608     38 E4 85 F1 | 	sub	objptr, ##1080
0c60c     F2 30 02 F1 | 	add	local06, objptr
0c610     B8 01 00 FF 
0c614     EA 2E 06 F6 | 	mov	local05, ##@LR__5855
0c618     03 32 66 F0 | 	shl	local07, #3
0c61c     F2 32 02 F1 | 	add	local07, objptr
0c620     19 33 02 FB | 	rdlong	local07, local07
0c624     02 00 00 FF 
0c628     38 E4 05 F1 | 	add	objptr, ##1080
0c62c     F2 26 02 FB | 	rdlong	local01, objptr
0c630     03 26 66 F0 | 	shl	local01, #3
0c634     02 00 00 FF 
0c638     38 E4 85 F1 | 	sub	objptr, ##1080
0c63c     F2 26 02 F1 | 	add	local01, objptr
0c640     13 13 02 FB | 	rdlong	arg01, local01
0c644     35 00 00 FF 
0c648     0C E4 85 F1 | 	sub	objptr, ##27148
0c64c     09 35 02 F6 | 	mov	local08, arg01
0c650     97 06 48 FB | 	callpa	#(@LR__1006-@LR__1005)>>2,fcache_load_ptr_
0c654                 | LR__1005
0c654     1A FB C9 FA | 	rdbyte	result1, local08 wz
0c658     01 34 06 51 |  if_ne	add	local08, #1
0c65c     F4 FF 9F 5D |  if_ne	jmp	#LR__1005
0c660                 | LR__1006
0c660     09 35 82 F1 | 	sub	local08, arg01
0c664     1A 15 02 F6 | 	mov	arg02, local08
0c668     01 14 86 F1 | 	sub	arg02, #1
0c66c     19 13 02 F6 | 	mov	arg01, local07
0c670     E0 C8 B1 FD | 	call	#__system__Right_S
0c674     FD 14 02 F6 | 	mov	arg02, result1
0c678     17 13 02 F6 | 	mov	arg01, local05
0c67c     2C A8 B1 FD | 	call	#__system___string_concat
0c680     18 FB 61 FC | 	wrlong	result1, local06
0c684                 | LR__1007
0c684                 | '     if left$(lparts(ct).part$,1)="%" then lparts(ct).part$="&b"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0c684     37 00 00 FF 
0c688     44 E4 05 F1 | 	add	objptr, ##28228
0c68c     F2 16 02 FB | 	rdlong	arg03, objptr
0c690     03 16 66 F0 | 	shl	arg03, #3
0c694     02 00 00 FF 
0c698     38 E4 85 F1 | 	sub	objptr, ##1080
0c69c     F2 16 02 F1 | 	add	arg03, objptr
0c6a0     0B 13 02 FB | 	rdlong	arg01, arg03
0c6a4     01 14 06 F6 | 	mov	arg02, #1
0c6a8     35 00 00 FF 
0c6ac     0C E4 85 F1 | 	sub	objptr, ##27148
0c6b0     18 C8 B1 FD | 	call	#__system__Left_S
0c6b4     FD 12 02 F6 | 	mov	arg01, result1
0c6b8     B8 01 00 FF 
0c6bc     ED 14 06 F6 | 	mov	arg02, ##@LR__5856
0c6c0     B4 A7 B1 FD | 	call	#__system___string_cmp
0c6c4     00 FA 0D F2 | 	cmp	result1, #0 wz
0c6c8     94 00 90 5D |  if_ne	jmp	#LR__1010
0c6cc     37 00 00 FF 
0c6d0     44 E4 05 F1 | 	add	objptr, ##28228
0c6d4     F2 32 02 FB | 	rdlong	local07, objptr
0c6d8     19 31 02 F6 | 	mov	local06, local07
0c6dc     03 30 66 F0 | 	shl	local06, #3
0c6e0     02 00 00 FF 
0c6e4     38 E4 85 F1 | 	sub	objptr, ##1080
0c6e8     F2 30 02 F1 | 	add	local06, objptr
0c6ec     B8 01 00 FF 
0c6f0     EF 2E 06 F6 | 	mov	local05, ##@LR__5857
0c6f4     03 32 66 F0 | 	shl	local07, #3
0c6f8     F2 32 02 F1 | 	add	local07, objptr
0c6fc     19 33 02 FB | 	rdlong	local07, local07
0c700     02 00 00 FF 
0c704     38 E4 05 F1 | 	add	objptr, ##1080
0c708     F2 26 02 FB | 	rdlong	local01, objptr
0c70c     03 26 66 F0 | 	shl	local01, #3
0c710     02 00 00 FF 
0c714     38 E4 85 F1 | 	sub	objptr, ##1080
0c718     F2 26 02 F1 | 	add	local01, objptr
0c71c     13 13 02 FB | 	rdlong	arg01, local01
0c720     35 00 00 FF 
0c724     0C E4 85 F1 | 	sub	objptr, ##27148
0c728     09 35 02 F6 | 	mov	local08, arg01
0c72c     97 06 48 FB | 	callpa	#(@LR__1009-@LR__1008)>>2,fcache_load_ptr_
0c730                 | LR__1008
0c730     1A FB C9 FA | 	rdbyte	result1, local08 wz
0c734     01 34 06 51 |  if_ne	add	local08, #1
0c738     F4 FF 9F 5D |  if_ne	jmp	#LR__1008
0c73c                 | LR__1009
0c73c     09 35 82 F1 | 	sub	local08, arg01
0c740     1A 15 02 F6 | 	mov	arg02, local08
0c744     01 14 86 F1 | 	sub	arg02, #1
0c748     19 13 02 F6 | 	mov	arg01, local07
0c74c     04 C8 B1 FD | 	call	#__system__Right_S
0c750     FD 14 02 F6 | 	mov	arg02, result1
0c754     17 13 02 F6 | 	mov	arg01, local05
0c758     50 A7 B1 FD | 	call	#__system___string_concat
0c75c     18 FB 61 FC | 	wrlong	result1, local06
0c760                 | LR__1010
0c760     37 00 00 FF 
0c764     44 E4 05 F1 | 	add	objptr, ##28228
0c768     F2 30 02 FB | 	rdlong	local06, objptr
0c76c     03 30 66 F0 | 	shl	local06, #3
0c770     02 00 00 FF 
0c774     38 E4 85 F1 | 	sub	objptr, ##1080
0c778     F2 30 02 F1 | 	add	local06, objptr
0c77c     18 13 02 FB | 	rdlong	arg01, local06
0c780     00 14 06 F6 | 	mov	arg02, #0
0c784     35 00 00 FF 
0c788     0C E4 85 F1 | 	sub	objptr, ##27148
0c78c     B0 DB B1 FD | 	call	#__system____builtin_atoi
0c790     FD 2C 02 FD | 	qmul	local04, result1
0c794     4A 00 00 FF 
0c798     7C E4 05 F1 | 	add	objptr, ##38012
0c79c     F2 30 02 FB | 	rdlong	local06, objptr
0c7a0     18 37 02 F6 | 	mov	local09, local06
0c7a4     01 36 66 F0 | 	shl	local09, #1
0c7a8     18 37 02 F1 | 	add	local09, local06
0c7ac     02 36 66 F0 | 	shl	local09, #2
0c7b0     03 00 00 FF 
0c7b4     00 E4 85 F1 | 	sub	objptr, ##1536
0c7b8     F2 36 02 F1 | 	add	local09, objptr
0c7bc     03 00 00 FF 
0c7c0     00 E4 05 F1 | 	add	objptr, ##1536
0c7c4     18 26 62 FD | 	getqx	local01
0c7c8     1C 2A 06 F6 | 	mov	local03, #28
0c7cc     13 31 02 F6 | 	mov	local06, local01
0c7d0     14 33 02 F6 | 	mov	local07, local02
0c7d4     1B 31 62 FC | 	wrlong	local06, local09
0c7d8     15 37 02 F6 | 	mov	local09, local03
0c7dc     F2 30 02 FB | 	rdlong	local06, objptr
0c7e0     18 2F 02 F6 | 	mov	local05, local06
0c7e4     01 2E 66 F0 | 	shl	local05, #1
0c7e8     18 2F 02 F1 | 	add	local05, local06
0c7ec     02 2E 66 F0 | 	shl	local05, #2
0c7f0     03 00 00 FF 
0c7f4     00 E4 85 F1 | 	sub	objptr, ##1536
0c7f8     F2 2E 02 F1 | 	add	local05, objptr
0c7fc     04 2E 06 F1 | 	add	local05, #4
0c800     17 33 62 FC | 	wrlong	local07, local05
0c804     03 00 00 FF 
0c808     00 E4 05 F1 | 	add	objptr, ##1536
0c80c     F2 32 02 FB | 	rdlong	local07, objptr
0c810     19 31 02 F6 | 	mov	local06, local07
0c814     01 30 66 F0 | 	shl	local06, #1
0c818     19 31 02 F1 | 	add	local06, local07
0c81c     02 30 66 F0 | 	shl	local06, #2
0c820     03 00 00 FF 
0c824     00 E4 85 F1 | 	sub	objptr, ##1536
0c828     F2 30 02 F1 | 	add	local06, objptr
0c82c     08 30 06 F1 | 	add	local06, #8
0c830     18 37 62 FC | 	wrlong	local09, local06
0c834     03 00 00 FF 
0c838     00 E4 05 F1 | 	add	objptr, ##1536
0c83c     F2 30 02 FB | 	rdlong	local06, objptr
0c840     01 30 06 F1 | 	add	local06, #1
0c844     F2 30 62 FC | 	wrlong	local06, objptr
0c848     13 00 00 FF 
0c84c     38 E4 85 F1 | 	sub	objptr, ##9784
0c850     F2 30 02 FB | 	rdlong	local06, objptr
0c854     01 30 06 F1 | 	add	local06, #1
0c858     F2 30 62 FC | 	wrlong	local06, objptr
0c85c     37 00 00 FF 
0c860     44 E4 85 F1 | 	sub	objptr, ##28228
0c864     24 05 90 FD | 	jmp	#LR__1023
0c868                 | LR__1011
0c868                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
0c868     01 2C 0E F2 | 	cmp	local04, #1 wz
0c86c     48 00 90 5D |  if_ne	jmp	#LR__1012
0c870     00 C0 1F FF 
0c874     00 30 06 F6 | 	mov	local06, ##1065353216
0c878     37 00 00 FF 
0c87c     44 E4 05 F1 | 	add	objptr, ##28228
0c880     F2 36 02 FB | 	rdlong	local09, objptr
0c884     03 36 66 F0 | 	shl	local09, #3
0c888     02 00 00 FF 
0c88c     38 E4 85 F1 | 	sub	objptr, ##1080
0c890     F2 36 02 F1 | 	add	local09, objptr
0c894     1B 13 02 FB | 	rdlong	arg01, local09
0c898     35 00 00 FF 
0c89c     0C E4 85 F1 | 	sub	objptr, ##27148
0c8a0     30 DC B1 FD | 	call	#__system____builtin_atof
0c8a4     FD 14 02 F6 | 	mov	arg02, result1
0c8a8     18 13 02 F6 | 	mov	arg01, local06
0c8ac     18 D4 B1 FD | 	call	#__system___float_mul
0c8b0     FD 26 02 F6 | 	mov	local01, result1
0c8b4     1E 2A 06 F6 | 	mov	local03, #30
0c8b8                 | LR__1012
0c8b8                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
0c8b8     FF FF 7F FF 
0c8bc     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0c8c0     48 00 90 5D |  if_ne	jmp	#LR__1013
0c8c4     00 C0 5F FF 
0c8c8     00 30 06 F6 | 	mov	local06, ##-1082130432
0c8cc     37 00 00 FF 
0c8d0     44 E4 05 F1 | 	add	objptr, ##28228
0c8d4     F2 36 02 FB | 	rdlong	local09, objptr
0c8d8     03 36 66 F0 | 	shl	local09, #3
0c8dc     02 00 00 FF 
0c8e0     38 E4 85 F1 | 	sub	objptr, ##1080
0c8e4     F2 36 02 F1 | 	add	local09, objptr
0c8e8     1B 13 02 FB | 	rdlong	arg01, local09
0c8ec     35 00 00 FF 
0c8f0     0C E4 85 F1 | 	sub	objptr, ##27148
0c8f4     DC DB B1 FD | 	call	#__system____builtin_atof
0c8f8     FD 14 02 F6 | 	mov	arg02, result1
0c8fc     18 13 02 F6 | 	mov	arg01, local06
0c900     C4 D3 B1 FD | 	call	#__system___float_mul
0c904     FD 26 02 F6 | 	mov	local01, result1
0c908     1E 2A 06 F6 | 	mov	local03, #30
0c90c                 | LR__1013
0c90c     13 31 02 F6 | 	mov	local06, local01
0c910     14 33 02 F6 | 	mov	local07, local02
0c914     15 2F 02 F6 | 	mov	local05, local03
0c918     4A 00 00 FF 
0c91c     7C E4 05 F1 | 	add	objptr, ##38012
0c920     F2 26 02 FB | 	rdlong	local01, objptr
0c924     13 37 02 F6 | 	mov	local09, local01
0c928     01 36 66 F0 | 	shl	local09, #1
0c92c     13 37 02 F1 | 	add	local09, local01
0c930     02 36 66 F0 | 	shl	local09, #2
0c934     03 00 00 FF 
0c938     00 E4 85 F1 | 	sub	objptr, ##1536
0c93c     F2 36 02 F1 | 	add	local09, objptr
0c940     1B 31 62 FC | 	wrlong	local06, local09
0c944     03 00 00 FF 
0c948     00 E4 05 F1 | 	add	objptr, ##1536
0c94c     F2 36 02 FB | 	rdlong	local09, objptr
0c950     1B 31 02 F6 | 	mov	local06, local09
0c954     01 30 66 F0 | 	shl	local06, #1
0c958     1B 31 02 F1 | 	add	local06, local09
0c95c     02 30 66 F0 | 	shl	local06, #2
0c960     03 00 00 FF 
0c964     00 E4 85 F1 | 	sub	objptr, ##1536
0c968     F2 30 02 F1 | 	add	local06, objptr
0c96c     04 30 06 F1 | 	add	local06, #4
0c970     18 33 62 FC | 	wrlong	local07, local06
0c974     03 00 00 FF 
0c978     00 E4 05 F1 | 	add	objptr, ##1536
0c97c     F2 36 02 FB | 	rdlong	local09, objptr
0c980     1B 33 02 F6 | 	mov	local07, local09
0c984     01 32 66 F0 | 	shl	local07, #1
0c988     1B 33 02 F1 | 	add	local07, local09
0c98c     02 32 66 F0 | 	shl	local07, #2
0c990     03 00 00 FF 
0c994     00 E4 85 F1 | 	sub	objptr, ##1536
0c998     F2 32 02 F1 | 	add	local07, objptr
0c99c     08 32 06 F1 | 	add	local07, #8
0c9a0     19 2F 62 FC | 	wrlong	local05, local07
0c9a4     03 00 00 FF 
0c9a8     00 E4 05 F1 | 	add	objptr, ##1536
0c9ac     F2 30 02 FB | 	rdlong	local06, objptr
0c9b0     01 30 06 F1 | 	add	local06, #1
0c9b4     F2 30 62 FC | 	wrlong	local06, objptr
0c9b8     13 00 00 FF 
0c9bc     38 E4 85 F1 | 	sub	objptr, ##9784
0c9c0     F2 30 02 FB | 	rdlong	local06, objptr
0c9c4     01 30 06 F1 | 	add	local06, #1
0c9c8     F2 30 62 FC | 	wrlong	local06, objptr
0c9cc     37 00 00 FF 
0c9d0     44 E4 85 F1 | 	sub	objptr, ##28228
0c9d4     B4 03 90 FD | 	jmp	#LR__1023
0c9d8                 | LR__1014
0c9d8     37 00 00 FF 
0c9dc     44 E4 05 F1 | 	add	objptr, ##28228
0c9e0     F2 16 02 FB | 	rdlong	arg03, objptr
0c9e4     03 16 66 F0 | 	shl	arg03, #3
0c9e8     02 00 00 FF 
0c9ec     38 E4 85 F1 | 	sub	objptr, ##1080
0c9f0     F2 16 02 F1 | 	add	arg03, objptr
0c9f4     0B 13 02 FB | 	rdlong	arg01, arg03
0c9f8     35 00 00 FF 
0c9fc     0C E4 85 F1 | 	sub	objptr, ##27148
0ca00     09 35 02 F6 | 	mov	local08, arg01
0ca04     97 06 48 FB | 	callpa	#(@LR__1016-@LR__1015)>>2,fcache_load_ptr_
0ca08                 | LR__1015
0ca08     1A FB C9 FA | 	rdbyte	result1, local08 wz
0ca0c     01 34 06 51 |  if_ne	add	local08, #1
0ca10     F4 FF 9F 5D |  if_ne	jmp	#LR__1015
0ca14                 | LR__1016
0ca14     09 35 82 F1 | 	sub	local08, arg01
0ca18     1A FB 01 F6 | 	mov	result1, local08
0ca1c     52 00 00 FF 
0ca20     F0 E4 05 F1 | 	add	objptr, ##42224
0ca24     F2 FA 61 FC | 	wrlong	result1, objptr
0ca28     58 E4 85 F1 | 	sub	objptr, #88
0ca2c     F2 12 02 FB | 	rdlong	arg01, objptr
0ca30     FD 12 82 F1 | 	sub	arg01, result1
0ca34     04 12 86 F1 | 	sub	arg01, #4
0ca38     03 12 26 F5 | 	andn	arg01, #3
0ca3c     F2 12 62 FC | 	wrlong	arg01, objptr
0ca40     58 E4 05 F1 | 	add	objptr, #88
0ca44     F2 14 02 FB | 	rdlong	arg02, objptr
0ca48     52 00 00 FF 
0ca4c     F0 E4 85 F1 | 	sub	objptr, ##42224
0ca50     80 6B B1 FD | 	call	#_pslpoke
0ca54                 | '     pslpoke memtop,l
0ca54                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
0ca54     01 38 06 F6 | 	mov	local10, #1
0ca58     52 00 00 FF 
0ca5c     F0 E4 05 F1 | 	add	objptr, ##42224
0ca60     F2 3A 02 FB | 	rdlong	local11, objptr
0ca64     52 00 00 FF 
0ca68     F0 E4 85 F1 | 	sub	objptr, ##42224
0ca6c     01 3A 06 F1 | 	add	local11, #1
0ca70                 | LR__1017
0ca70     1D 39 52 F2 | 	cmps	local10, local11 wc
0ca74     5C 00 90 3D |  if_ae	jmp	#LR__1018
0ca78     52 00 00 FF 
0ca7c     98 E4 05 F1 | 	add	objptr, ##42136
0ca80     F2 32 02 FB | 	rdlong	local07, objptr
0ca84     03 32 06 F1 | 	add	local07, #3
0ca88     1C 33 02 F1 | 	add	local07, local10
0ca8c     1B 00 00 FF 
0ca90     54 E4 85 F1 | 	sub	objptr, ##13908
0ca94     F2 36 02 FB | 	rdlong	local09, objptr
0ca98     03 36 66 F0 | 	shl	local09, #3
0ca9c     02 00 00 FF 
0caa0     38 E4 85 F1 | 	sub	objptr, ##1080
0caa4     F2 36 02 F1 | 	add	local09, objptr
0caa8     1B 13 02 FB | 	rdlong	arg01, local09
0caac     1C 15 02 F6 | 	mov	arg02, local10
0cab0     01 16 06 F6 | 	mov	arg03, #1
0cab4     35 00 00 FF 
0cab8     0C E4 85 F1 | 	sub	objptr, ##27148
0cabc     24 C5 B1 FD | 	call	#__system__Mid_S
0cac0     FD 14 C2 FA | 	rdbyte	arg02, result1
0cac4     19 13 02 F6 | 	mov	arg01, local07
0cac8     98 6B B1 FD | 	call	#_pspoke
0cacc     01 38 06 F1 | 	add	local10, #1
0cad0     9C FF 9F FD | 	jmp	#LR__1017
0cad4                 | LR__1018
0cad4     52 00 00 FF 
0cad8     98 E4 05 F1 | 	add	objptr, ##42136
0cadc     F2 26 02 FB | 	rdlong	local01, objptr
0cae0     2B 2A 06 F6 | 	mov	local03, #43
0cae4     13 31 02 F6 | 	mov	local06, local01
0cae8     14 33 02 F6 | 	mov	local07, local02
0caec     15 3B 02 F6 | 	mov	local11, local03
0caf0     08 00 00 FF 
0caf4     1C E4 85 F1 | 	sub	objptr, ##4124
0caf8     F2 38 02 FB | 	rdlong	local10, objptr
0cafc     1C 37 02 F6 | 	mov	local09, local10
0cb00     01 36 66 F0 | 	shl	local09, #1
0cb04     1C 37 02 F1 | 	add	local09, local10
0cb08     02 36 66 F0 | 	shl	local09, #2
0cb0c     03 00 00 FF 
0cb10     00 E4 85 F1 | 	sub	objptr, ##1536
0cb14     F2 36 02 F1 | 	add	local09, objptr
0cb18     1B 31 62 FC | 	wrlong	local06, local09
0cb1c     03 00 00 FF 
0cb20     00 E4 05 F1 | 	add	objptr, ##1536
0cb24     F2 38 02 FB | 	rdlong	local10, objptr
0cb28     1C 37 02 F6 | 	mov	local09, local10
0cb2c     01 36 66 F0 | 	shl	local09, #1
0cb30     1C 37 02 F1 | 	add	local09, local10
0cb34     02 36 66 F0 | 	shl	local09, #2
0cb38     03 00 00 FF 
0cb3c     00 E4 85 F1 | 	sub	objptr, ##1536
0cb40     F2 36 02 F1 | 	add	local09, objptr
0cb44     04 36 06 F1 | 	add	local09, #4
0cb48     1B 33 62 FC | 	wrlong	local07, local09
0cb4c     03 00 00 FF 
0cb50     00 E4 05 F1 | 	add	objptr, ##1536
0cb54     F2 38 02 FB | 	rdlong	local10, objptr
0cb58     1C 37 02 F6 | 	mov	local09, local10
0cb5c     01 36 66 F0 | 	shl	local09, #1
0cb60     1C 37 02 F1 | 	add	local09, local10
0cb64     02 36 66 F0 | 	shl	local09, #2
0cb68     03 00 00 FF 
0cb6c     00 E4 85 F1 | 	sub	objptr, ##1536
0cb70     F2 36 02 F1 | 	add	local09, objptr
0cb74     08 36 06 F1 | 	add	local09, #8
0cb78     1B 3B 62 FC | 	wrlong	local11, local09
0cb7c     03 00 00 FF 
0cb80     00 E4 05 F1 | 	add	objptr, ##1536
0cb84     F2 30 02 FB | 	rdlong	local06, objptr
0cb88     01 30 06 F1 | 	add	local06, #1
0cb8c     F2 30 62 FC | 	wrlong	local06, objptr
0cb90     13 00 00 FF 
0cb94     38 E4 85 F1 | 	sub	objptr, ##9784
0cb98     F2 30 02 FB | 	rdlong	local06, objptr
0cb9c     01 30 06 F1 | 	add	local06, #1
0cba0     F2 30 62 FC | 	wrlong	local06, objptr
0cba4     37 00 00 FF 
0cba8     44 E4 85 F1 | 	sub	objptr, ##28228
0cbac     DC 01 90 FD | 	jmp	#LR__1023
0cbb0                 | LR__1019
0cbb0     2C 2A 06 F6 | 	mov	local03, #44
0cbb4     37 00 00 FF 
0cbb8     44 E4 05 F1 | 	add	objptr, ##28228
0cbbc     F2 30 02 FB | 	rdlong	local06, objptr
0cbc0     03 30 66 F0 | 	shl	local06, #3
0cbc4     02 00 00 FF 
0cbc8     38 E4 85 F1 | 	sub	objptr, ##1080
0cbcc     F2 30 02 F1 | 	add	local06, objptr
0cbd0     18 13 02 FB | 	rdlong	arg01, local06
0cbd4     00 14 06 F6 | 	mov	arg02, #0
0cbd8     35 00 00 FF 
0cbdc     0C E4 85 F1 | 	sub	objptr, ##27148
0cbe0     5C D7 B1 FD | 	call	#__system____builtin_atoi
0cbe4     FD 26 02 F6 | 	mov	local01, result1
0cbe8     13 31 02 F6 | 	mov	local06, local01
0cbec     14 33 02 F6 | 	mov	local07, local02
0cbf0     15 3B 02 F6 | 	mov	local11, local03
0cbf4     4A 00 00 FF 
0cbf8     7C E4 05 F1 | 	add	objptr, ##38012
0cbfc     F2 38 02 FB | 	rdlong	local10, objptr
0cc00     1C 37 02 F6 | 	mov	local09, local10
0cc04     01 36 66 F0 | 	shl	local09, #1
0cc08     1C 37 02 F1 | 	add	local09, local10
0cc0c     02 36 66 F0 | 	shl	local09, #2
0cc10     03 00 00 FF 
0cc14     00 E4 85 F1 | 	sub	objptr, ##1536
0cc18     F2 36 02 F1 | 	add	local09, objptr
0cc1c     1B 31 62 FC | 	wrlong	local06, local09
0cc20     03 00 00 FF 
0cc24     00 E4 05 F1 | 	add	objptr, ##1536
0cc28     F2 38 02 FB | 	rdlong	local10, objptr
0cc2c     1C 37 02 F6 | 	mov	local09, local10
0cc30     01 36 66 F0 | 	shl	local09, #1
0cc34     1C 37 02 F1 | 	add	local09, local10
0cc38     02 36 66 F0 | 	shl	local09, #2
0cc3c     03 00 00 FF 
0cc40     00 E4 85 F1 | 	sub	objptr, ##1536
0cc44     F2 36 02 F1 | 	add	local09, objptr
0cc48     04 36 06 F1 | 	add	local09, #4
0cc4c     1B 33 62 FC | 	wrlong	local07, local09
0cc50     03 00 00 FF 
0cc54     00 E4 05 F1 | 	add	objptr, ##1536
0cc58     F2 38 02 FB | 	rdlong	local10, objptr
0cc5c     1C 37 02 F6 | 	mov	local09, local10
0cc60     01 36 66 F0 | 	shl	local09, #1
0cc64     1C 37 02 F1 | 	add	local09, local10
0cc68     02 36 66 F0 | 	shl	local09, #2
0cc6c     03 00 00 FF 
0cc70     00 E4 85 F1 | 	sub	objptr, ##1536
0cc74     F2 36 02 F1 | 	add	local09, objptr
0cc78     08 36 06 F1 | 	add	local09, #8
0cc7c     1B 3B 62 FC | 	wrlong	local11, local09
0cc80     03 00 00 FF 
0cc84     00 E4 05 F1 | 	add	objptr, ##1536
0cc88     F2 30 02 FB | 	rdlong	local06, objptr
0cc8c     01 30 06 F1 | 	add	local06, #1
0cc90     F2 30 62 FC | 	wrlong	local06, objptr
0cc94     13 00 00 FF 
0cc98     38 E4 85 F1 | 	sub	objptr, ##9784
0cc9c     F2 30 02 FB | 	rdlong	local06, objptr
0cca0     01 30 06 F1 | 	add	local06, #1
0cca4     F2 30 62 FC | 	wrlong	local06, objptr
0cca8     37 00 00 FF 
0ccac     44 E4 85 F1 | 	sub	objptr, ##28228
0ccb0     D8 00 90 FD | 	jmp	#LR__1023
0ccb4                 | LR__1020
0ccb4     16 13 02 F6 | 	mov	arg01, local04
0ccb8     24 04 B0 FD | 	call	#_getvar
0ccbc     37 00 00 FF 
0ccc0     44 E4 05 F1 | 	add	objptr, ##28228
0ccc4     F2 30 02 FB | 	rdlong	local06, objptr
0ccc8     01 30 06 F1 | 	add	local06, #1
0cccc     F2 30 62 FC | 	wrlong	local06, objptr
0ccd0     37 00 00 FF 
0ccd4     44 E4 85 F1 | 	sub	objptr, ##28228
0ccd8                 | '     err=getvar(m) : ct+=1 : if err>0 then return err 
0ccd8     01 FA 55 F2 | 	cmps	result1, #1 wc
0ccdc     B0 00 90 3D |  if_ae	jmp	#LR__1024
0cce0     A8 00 90 FD | 	jmp	#LR__1023
0cce4                 | LR__1021
0cce4     37 00 00 FF 
0cce8     44 E4 05 F1 | 	add	objptr, ##28228
0ccec     F2 30 02 FB | 	rdlong	local06, objptr
0ccf0     01 30 06 F1 | 	add	local06, #1
0ccf4     F2 30 62 FC | 	wrlong	local06, objptr
0ccf8     37 00 00 FF 
0ccfc     44 E4 85 F1 | 	sub	objptr, ##28228
0cd00     20 F1 BF FD | 	call	#_expr
0cd04                 | '     ct+=1
0cd04                 | '     err=expr() : if err>0 then return err 
0cd04     01 FA 55 F2 | 	cmps	result1, #1 wc
0cd08     84 00 90 3D |  if_ae	jmp	#LR__1024
0cd0c                 | '     if lparts(ct).token=token_rpar then ct+=1
0cd0c     37 00 00 FF 
0cd10     44 E4 05 F1 | 	add	objptr, ##28228
0cd14     F2 3A 02 FB | 	rdlong	local11, objptr
0cd18     03 3A 66 F0 | 	shl	local11, #3
0cd1c     02 00 00 FF 
0cd20     38 E4 85 F1 | 	sub	objptr, ##1080
0cd24     F2 3A 02 F1 | 	add	local11, objptr
0cd28     04 3A 06 F1 | 	add	local11, #4
0cd2c     1D 3B 02 FB | 	rdlong	local11, local11
0cd30     14 3A 0E F2 | 	cmp	local11, #20 wz
0cd34     35 00 00 FF 
0cd38     0C E4 85 F1 | 	sub	objptr, ##27148
0cd3c     4C 00 90 5D |  if_ne	jmp	#LR__1023
0cd40     37 00 00 FF 
0cd44     44 E4 05 F1 | 	add	objptr, ##28228
0cd48     F2 30 02 FB | 	rdlong	local06, objptr
0cd4c     01 30 06 F1 | 	add	local06, #1
0cd50     F2 30 62 FC | 	wrlong	local06, objptr
0cd54     37 00 00 FF 
0cd58     44 E4 85 F1 | 	sub	objptr, ##28228
0cd5c     2C 00 90 FD | 	jmp	#LR__1023
0cd60                 | LR__1022
0cd60     16 13 02 F6 | 	mov	arg01, local04
0cd64     34 00 B0 FD | 	call	#_getfun
0cd68     37 00 00 FF 
0cd6c     44 E4 05 F1 | 	add	objptr, ##28228
0cd70     F2 30 02 FB | 	rdlong	local06, objptr
0cd74     01 30 06 F1 | 	add	local06, #1
0cd78     F2 30 62 FC | 	wrlong	local06, objptr
0cd7c     37 00 00 FF 
0cd80     44 E4 85 F1 | 	sub	objptr, ##28228
0cd84                 | '     err=getfun(m) : ct+=1 : if err>0 then return err 
0cd84     01 FA 55 F2 | 	cmps	result1, #1 wc
0cd88     04 00 90 3D |  if_ae	jmp	#LR__1024
0cd8c                 | LR__1023
0cd8c                 | ' return 0  
0cd8c     00 FA 05 F6 | 	mov	result1, #0
0cd90                 | LR__1024
0cd90     A7 F0 03 F6 | 	mov	ptra, fp
0cd94     B2 00 A0 FD | 	call	#popregs_
0cd98                 | _getvalue_ret
0cd98     2D 00 64 FD | 	ret
0cd9c                 | 
0cd9c                 | ' 
0cd9c                 | ' ' Get a function result 
0cd9c                 | ' 
0cd9c                 | ' function getfun(m as integer) as ulong
0cd9c                 | _getfun
0cd9c     0F 4A 05 F6 | 	mov	COUNT_, #15
0cda0     A8 00 A0 FD | 	call	#pushregs_
0cda4                 | _getfun_enter
0cda4     09 2D 02 F6 | 	mov	local04, arg01
0cda8     37 00 00 FF 
0cdac     44 E4 05 F1 | 	add	objptr, ##28228
0cdb0     F2 2E 02 FB | 	rdlong	local05, objptr
0cdb4     17 31 02 F6 | 	mov	local06, local05
0cdb8     00 32 06 F6 | 	mov	local07, #0
0cdbc                 | ' oldct=ct
0cdbc                 | ' numpar=0
0cdbc                 | ' if lparts(ct+1).token=token_lpar then
0cdbc     01 2E 06 F1 | 	add	local05, #1
0cdc0     03 2E 66 F0 | 	shl	local05, #3
0cdc4     02 00 00 FF 
0cdc8     38 E4 85 F1 | 	sub	objptr, ##1080
0cdcc     F2 2E 02 F1 | 	add	local05, objptr
0cdd0     04 2E 06 F1 | 	add	local05, #4
0cdd4     17 2F 02 FB | 	rdlong	local05, local05
0cdd8     15 2E 0E F2 | 	cmp	local05, #21 wz
0cddc     35 00 00 FF 
0cde0     0C E4 85 F1 | 	sub	objptr, ##27148
0cde4     54 01 90 5D |  if_ne	jmp	#LR__1034
0cde8     37 00 00 FF 
0cdec     44 E4 05 F1 | 	add	objptr, ##28228
0cdf0     F2 34 02 FB | 	rdlong	local08, objptr
0cdf4     01 34 06 F1 | 	add	local08, #1
0cdf8     F2 34 62 FC | 	wrlong	local08, objptr
0cdfc     37 00 00 FF 
0ce00     44 E4 85 F1 | 	sub	objptr, ##28228
0ce04                 | '   ct+=1 											' omit this lpar, this is for expr list
0ce04                 | '   do
0ce04                 | LR__1030
0ce04     37 00 00 FF 
0ce08     44 E4 05 F1 | 	add	objptr, ##28228
0ce0c     F2 2E 02 FB | 	rdlong	local05, objptr
0ce10     01 2E 06 F1 | 	add	local05, #1
0ce14     F2 2E 62 FC | 	wrlong	local05, objptr
0ce18                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0ce18                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0ce18     03 2E 66 F0 | 	shl	local05, #3
0ce1c     02 00 00 FF 
0ce20     38 E4 85 F1 | 	sub	objptr, ##1080
0ce24     F2 2E 02 F1 | 	add	local05, objptr
0ce28     04 2E 06 F1 | 	add	local05, #4
0ce2c     17 35 02 FB | 	rdlong	local08, local05
0ce30     15 34 0E F2 | 	cmp	local08, #21 wz
0ce34     35 00 00 FF 
0ce38     0C E4 85 F1 | 	sub	objptr, ##27148
0ce3c     44 00 90 5D |  if_ne	jmp	#LR__1031
0ce40     37 00 00 FF 
0ce44     44 E4 05 F1 | 	add	objptr, ##28228
0ce48     F2 34 02 FB | 	rdlong	local08, objptr
0ce4c     01 34 06 F1 | 	add	local08, #1
0ce50     F2 34 62 FC | 	wrlong	local08, objptr
0ce54     37 00 00 FF 
0ce58     44 E4 85 F1 | 	sub	objptr, ##28228
0ce5c     C4 EF BF FD | 	call	#_expr
0ce60     FD 36 02 F6 | 	mov	local09, result1
0ce64     37 00 00 FF 
0ce68     44 E4 05 F1 | 	add	objptr, ##28228
0ce6c     F2 34 02 FB | 	rdlong	local08, objptr
0ce70     01 34 06 F1 | 	add	local08, #1
0ce74     F2 34 62 FC | 	wrlong	local08, objptr
0ce78     37 00 00 FF 
0ce7c     44 E4 85 F1 | 	sub	objptr, ##28228
0ce80     08 00 90 FD | 	jmp	#LR__1032
0ce84                 | LR__1031
0ce84     9C EF BF FD | 	call	#_expr
0ce88     FD 36 02 F6 | 	mov	local09, result1
0ce8c                 | LR__1032
0ce8c                 | '     if err>0 then return err
0ce8c     01 36 16 F2 | 	cmp	local09, #1 wc
0ce90     1B FB 01 36 |  if_ae	mov	result1, local09
0ce94     3C 02 90 3D |  if_ae	jmp	#LR__1036
0ce98     01 32 06 F1 | 	add	local07, #1
0ce9c     37 00 00 FF 
0cea0     44 E4 05 F1 | 	add	objptr, ##28228
0cea4     F2 2E 02 FB | 	rdlong	local05, objptr
0cea8     03 2E 66 F0 | 	shl	local05, #3
0ceac     02 00 00 FF 
0ceb0     38 E4 85 F1 | 	sub	objptr, ##1080
0ceb4     F2 2E 02 F1 | 	add	local05, objptr
0ceb8     04 2E 06 F1 | 	add	local05, #4
0cebc     17 37 02 FB | 	rdlong	local09, local05
0cec0     14 36 0E F2 | 	cmp	local09, #20 wz
0cec4     35 00 00 FF 
0cec8     0C E4 85 F1 | 	sub	objptr, ##27148
0cecc     34 00 90 AD |  if_e	jmp	#LR__1033
0ced0     37 00 00 FF 
0ced4     44 E4 05 F1 | 	add	objptr, ##28228
0ced8     F2 36 02 FB | 	rdlong	local09, objptr
0cedc     03 36 66 F0 | 	shl	local09, #3
0cee0     02 00 00 FF 
0cee4     38 E4 85 F1 | 	sub	objptr, ##1080
0cee8     F2 36 02 F1 | 	add	local09, objptr
0ceec     04 36 06 F1 | 	add	local09, #4
0cef0     1B 37 02 FB | 	rdlong	local09, local09
0cef4     FE 37 0E F2 | 	cmp	local09, #510 wz
0cef8     35 00 00 FF 
0cefc     0C E4 85 F1 | 	sub	objptr, ##27148
0cf00     00 FF 9F 5D |  if_ne	jmp	#LR__1030
0cf04                 | LR__1033
0cf04                 | '   if lparts(ct).token=token_end then return 14
0cf04     37 00 00 FF 
0cf08     44 E4 05 F1 | 	add	objptr, ##28228
0cf0c     F2 2E 02 FB | 	rdlong	local05, objptr
0cf10     03 2E 66 F0 | 	shl	local05, #3
0cf14     02 00 00 FF 
0cf18     38 E4 85 F1 | 	sub	objptr, ##1080
0cf1c     F2 2E 02 F1 | 	add	local05, objptr
0cf20     04 2E 06 F1 | 	add	local05, #4
0cf24     17 37 02 FB | 	rdlong	local09, local05
0cf28     FE 37 0E F2 | 	cmp	local09, #510 wz
0cf2c     35 00 00 FF 
0cf30     0C E4 85 F1 | 	sub	objptr, ##27148
0cf34     0E FA 05 A6 |  if_e	mov	result1, #14
0cf38     98 01 90 AD |  if_e	jmp	#LR__1036
0cf3c                 | LR__1034
0cf3c     19 27 02 F6 | 	mov	local01, local07
0cf40     03 30 66 F0 | 	shl	local06, #3
0cf44     35 00 00 FF 
0cf48     0C E4 05 F1 | 	add	objptr, ##27148
0cf4c     F2 30 02 F1 | 	add	local06, objptr
0cf50     04 30 06 F1 | 	add	local06, #4
0cf54     18 2B 02 FB | 	rdlong	local03, local06
0cf58     13 35 02 F6 | 	mov	local08, local01
0cf5c     14 39 02 F6 | 	mov	local10, local02
0cf60     15 3B 02 F6 | 	mov	local11, local03
0cf64     15 00 00 FF 
0cf68     70 E4 05 F1 | 	add	objptr, ##10864
0cf6c     F2 3C 02 FB | 	rdlong	local12, objptr
0cf70     1E 3F 02 F6 | 	mov	local13, local12
0cf74     01 3E 66 F0 | 	shl	local13, #1
0cf78     1E 3F 02 F1 | 	add	local13, local12
0cf7c     02 3E 66 F0 | 	shl	local13, #2
0cf80     03 00 00 FF 
0cf84     00 E4 85 F1 | 	sub	objptr, ##1536
0cf88     F2 3E 02 F1 | 	add	local13, objptr
0cf8c     1F 35 62 FC | 	wrlong	local08, local13
0cf90     03 00 00 FF 
0cf94     00 E4 05 F1 | 	add	objptr, ##1536
0cf98     F2 34 02 FB | 	rdlong	local08, objptr
0cf9c     1A 41 02 F6 | 	mov	local14, local08
0cfa0     01 40 66 F0 | 	shl	local14, #1
0cfa4     1A 41 02 F1 | 	add	local14, local08
0cfa8     02 40 66 F0 | 	shl	local14, #2
0cfac     03 00 00 FF 
0cfb0     00 E4 85 F1 | 	sub	objptr, ##1536
0cfb4     F2 40 02 F1 | 	add	local14, objptr
0cfb8     04 40 06 F1 | 	add	local14, #4
0cfbc     20 39 62 FC | 	wrlong	local10, local14
0cfc0     03 00 00 FF 
0cfc4     00 E4 05 F1 | 	add	objptr, ##1536
0cfc8     F2 34 02 FB | 	rdlong	local08, objptr
0cfcc     1A 43 02 F6 | 	mov	local15, local08
0cfd0     01 42 66 F0 | 	shl	local15, #1
0cfd4     1A 43 02 F1 | 	add	local15, local08
0cfd8     02 42 66 F0 | 	shl	local15, #2
0cfdc     03 00 00 FF 
0cfe0     00 E4 85 F1 | 	sub	objptr, ##1536
0cfe4     F2 42 02 F1 | 	add	local15, objptr
0cfe8     08 42 06 F1 | 	add	local15, #8
0cfec     21 3B 62 FC | 	wrlong	local11, local15
0cff0     03 00 00 FF 
0cff4     00 E4 05 F1 | 	add	objptr, ##1536
0cff8     F2 34 02 FB | 	rdlong	local08, objptr
0cffc     01 34 06 F1 | 	add	local08, #1
0d000     F2 34 62 FC | 	wrlong	local08, objptr
0d004     4A 00 00 FF 
0d008     7C E4 85 F1 | 	sub	objptr, ##38012
0d00c                 | ' t2.result.uresult=numpar
0d00c                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
0d00c                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0d00c                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0d00c     FF FF 7F FF 
0d010     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0d014     B8 00 90 5D |  if_ne	jmp	#LR__1035
0d018     15 2A 06 F6 | 	mov	local03, #21
0d01c     13 35 02 F6 | 	mov	local08, local01
0d020     14 39 02 F6 | 	mov	local10, local02
0d024     15 3B 02 F6 | 	mov	local11, local03
0d028     4A 00 00 FF 
0d02c     7C E4 05 F1 | 	add	objptr, ##38012
0d030     F2 3C 02 FB | 	rdlong	local12, objptr
0d034     1E 3F 02 F6 | 	mov	local13, local12
0d038     01 3E 66 F0 | 	shl	local13, #1
0d03c     1E 3F 02 F1 | 	add	local13, local12
0d040     02 3E 66 F0 | 	shl	local13, #2
0d044     03 00 00 FF 
0d048     00 E4 85 F1 | 	sub	objptr, ##1536
0d04c     F2 3E 02 F1 | 	add	local13, objptr
0d050     1F 35 62 FC | 	wrlong	local08, local13
0d054     03 00 00 FF 
0d058     00 E4 05 F1 | 	add	objptr, ##1536
0d05c     F2 42 02 FB | 	rdlong	local15, objptr
0d060     21 41 02 F6 | 	mov	local14, local15
0d064     01 40 66 F0 | 	shl	local14, #1
0d068     21 41 02 F1 | 	add	local14, local15
0d06c     02 40 66 F0 | 	shl	local14, #2
0d070     03 00 00 FF 
0d074     00 E4 85 F1 | 	sub	objptr, ##1536
0d078     F2 40 02 F1 | 	add	local14, objptr
0d07c     04 40 06 F1 | 	add	local14, #4
0d080     20 39 62 FC | 	wrlong	local10, local14
0d084     03 00 00 FF 
0d088     00 E4 05 F1 | 	add	objptr, ##1536
0d08c     F2 40 02 FB | 	rdlong	local14, objptr
0d090     20 43 02 F6 | 	mov	local15, local14
0d094     01 42 66 F0 | 	shl	local15, #1
0d098     20 43 02 F1 | 	add	local15, local14
0d09c     02 42 66 F0 | 	shl	local15, #2
0d0a0     03 00 00 FF 
0d0a4     00 E4 85 F1 | 	sub	objptr, ##1536
0d0a8     F2 42 02 F1 | 	add	local15, objptr
0d0ac     08 42 06 F1 | 	add	local15, #8
0d0b0     21 3B 62 FC | 	wrlong	local11, local15
0d0b4     03 00 00 FF 
0d0b8     00 E4 05 F1 | 	add	objptr, ##1536
0d0bc     F2 34 02 FB | 	rdlong	local08, objptr
0d0c0     01 34 06 F1 | 	add	local08, #1
0d0c4     F2 34 62 FC | 	wrlong	local08, objptr
0d0c8     4A 00 00 FF 
0d0cc     7C E4 85 F1 | 	sub	objptr, ##38012
0d0d0                 | LR__1035
0d0d0                 | ' return 0
0d0d0     00 FA 05 F6 | 	mov	result1, #0
0d0d4                 | LR__1036
0d0d4     A7 F0 03 F6 | 	mov	ptra, fp
0d0d8     B2 00 A0 FD | 	call	#popregs_
0d0dc                 | _getfun_ret
0d0dc     2D 00 64 FD | 	ret
0d0e0                 | 
0d0e0                 | '   
0d0e0                 | '   
0d0e0                 | ' function getvar(m as integer) as ulong
0d0e0                 | _getvar
0d0e0     11 4A 05 F6 | 	mov	COUNT_, #17
0d0e4     A8 00 A0 FD | 	call	#pushregs_
0d0e8                 | _getvar_enter
0d0e8     09 2D 02 F6 | 	mov	local04, arg01
0d0ec     37 00 00 FF 
0d0f0     44 E4 05 F1 | 	add	objptr, ##28228
0d0f4     F2 2E 02 FB | 	rdlong	local05, objptr
0d0f8     03 2E 66 F0 | 	shl	local05, #3
0d0fc     02 00 00 FF 
0d100     38 E4 85 F1 | 	sub	objptr, ##1080
0d104     F2 2E 02 F1 | 	add	local05, objptr
0d108     17 31 02 FB | 	rdlong	local06, local05
0d10c     01 32 66 F6 | 	neg	local07, #1
0d110                 | ' 
0d110                 | ' varname$=lparts(ct).part$
0d110                 | ' j=-1
0d110                 | ' 
0d110                 | ' for i=0 to varnum-1
0d110     00 34 06 F6 | 	mov	local08, #0
0d114     04 E4 85 F1 | 	sub	objptr, #4
0d118     F2 36 02 FB | 	rdlong	local09, objptr
0d11c     35 00 00 FF 
0d120     08 E4 85 F1 | 	sub	objptr, ##27144
0d124                 | LR__1040
0d124     1B 35 52 F2 | 	cmps	local08, local09 wc
0d128     38 00 90 3D |  if_ae	jmp	#LR__1041
0d12c                 | '   if variables(i).name=varname$ then j=i : exit
0d12c     1A 2F 02 F6 | 	mov	local05, local08
0d130     04 2E 66 F0 | 	shl	local05, #4
0d134     14 00 00 FF 
0d138     F8 E5 05 F1 | 	add	objptr, ##10744
0d13c     F2 2E 02 F1 | 	add	local05, objptr
0d140     17 13 02 FB | 	rdlong	arg01, local05
0d144     18 15 02 F6 | 	mov	arg02, local06
0d148     14 00 00 FF 
0d14c     F8 E5 85 F1 | 	sub	objptr, ##10744
0d150     24 9D B1 FD | 	call	#__system___string_cmp
0d154     00 FA 0D F2 | 	cmp	result1, #0 wz
0d158     1A 33 02 A6 |  if_e	mov	local07, local08
0d15c     01 34 06 51 |  if_ne	add	local08, #1
0d160     C0 FF 9F 5D |  if_ne	jmp	#LR__1040
0d164                 | LR__1041
0d164                 | ' if  j=-1 andalso varnum<maxvars then   
0d164     FF FF 7F FF 
0d168     FF 33 0E F2 | 	cmp	local07, ##-1 wz
0d16c     A8 00 90 5D |  if_ne	jmp	#LR__1042
0d170     35 00 00 FF 
0d174     08 E4 05 F1 | 	add	objptr, ##27144
0d178     F2 36 02 FB | 	rdlong	local09, objptr
0d17c     35 00 00 FF 
0d180     08 E4 85 F1 | 	sub	objptr, ##27144
0d184     02 00 00 FF 
0d188     00 36 56 F2 | 	cmps	local09, ##1024 wc
0d18c     88 00 90 3D |  if_ae	jmp	#LR__1042
0d190     35 00 00 FF 
0d194     08 E4 05 F1 | 	add	objptr, ##27144
0d198     F2 2E 02 FB | 	rdlong	local05, objptr
0d19c     04 2E 66 F0 | 	shl	local05, #4
0d1a0     20 00 00 FF 
0d1a4     10 E4 85 F1 | 	sub	objptr, ##16400
0d1a8     F2 2E 02 F1 | 	add	local05, objptr
0d1ac     17 31 62 FC | 	wrlong	local06, local05
0d1b0     20 00 00 FF 
0d1b4     10 E4 05 F1 | 	add	objptr, ##16400
0d1b8     F2 2E 02 FB | 	rdlong	local05, objptr
0d1bc     04 2E 66 F0 | 	shl	local05, #4
0d1c0     20 00 00 FF 
0d1c4     10 E4 85 F1 | 	sub	objptr, ##16400
0d1c8     F2 2E 02 F1 | 	add	local05, objptr
0d1cc     04 2E 06 F1 | 	add	local05, #4
0d1d0     17 01 68 FC | 	wrlong	#0, local05
0d1d4     20 00 00 FF 
0d1d8     10 E4 05 F1 | 	add	objptr, ##16400
0d1dc     F2 2E 02 FB | 	rdlong	local05, objptr
0d1e0     04 2E 66 F0 | 	shl	local05, #4
0d1e4     20 00 00 FF 
0d1e8     10 E4 85 F1 | 	sub	objptr, ##16400
0d1ec     F2 2E 02 F1 | 	add	local05, objptr
0d1f0     0C 2E 06 F1 | 	add	local05, #12
0d1f4     17 39 68 FC | 	wrlong	#28, local05
0d1f8     20 00 00 FF 
0d1fc     10 E4 05 F1 | 	add	objptr, ##16400
0d200     F2 36 02 FB | 	rdlong	local09, objptr
0d204     1B 33 02 F6 | 	mov	local07, local09
0d208     01 36 06 F1 | 	add	local09, #1
0d20c     F2 36 62 FC | 	wrlong	local09, objptr
0d210     35 00 00 FF 
0d214     08 E4 85 F1 | 	sub	objptr, ##27144
0d218                 | LR__1042
0d218     00 36 06 F6 | 	mov	local09, #0
0d21c                 | ' numpar=0
0d21c                 | ' if lparts(ct+1).token=token_lpar then								' check if it is an array
0d21c     37 00 00 FF 
0d220     44 E4 05 F1 | 	add	objptr, ##28228
0d224     F2 2E 02 FB | 	rdlong	local05, objptr
0d228     01 2E 06 F1 | 	add	local05, #1
0d22c     03 2E 66 F0 | 	shl	local05, #3
0d230     02 00 00 FF 
0d234     38 E4 85 F1 | 	sub	objptr, ##1080
0d238     F2 2E 02 F1 | 	add	local05, objptr
0d23c     04 2E 06 F1 | 	add	local05, #4
0d240     17 35 02 FB | 	rdlong	local08, local05
0d244     15 34 0E F2 | 	cmp	local08, #21 wz
0d248     35 00 00 FF 
0d24c     0C E4 85 F1 | 	sub	objptr, ##27148
0d250     54 01 90 5D |  if_ne	jmp	#LR__1047
0d254     37 00 00 FF 
0d258     44 E4 05 F1 | 	add	objptr, ##28228
0d25c     F2 38 02 FB | 	rdlong	local10, objptr
0d260     01 38 06 F1 | 	add	local10, #1
0d264     F2 38 62 FC | 	wrlong	local10, objptr
0d268     37 00 00 FF 
0d26c     44 E4 85 F1 | 	sub	objptr, ##28228
0d270                 | '   ct+=1 											' omit this lpar, this is for expr list
0d270                 | '   do
0d270                 | LR__1043
0d270     37 00 00 FF 
0d274     44 E4 05 F1 | 	add	objptr, ##28228
0d278     F2 2E 02 FB | 	rdlong	local05, objptr
0d27c     01 2E 06 F1 | 	add	local05, #1
0d280     F2 2E 62 FC | 	wrlong	local05, objptr
0d284                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0d284                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0d284     03 2E 66 F0 | 	shl	local05, #3
0d288     02 00 00 FF 
0d28c     38 E4 85 F1 | 	sub	objptr, ##1080
0d290     F2 2E 02 F1 | 	add	local05, objptr
0d294     04 2E 06 F1 | 	add	local05, #4
0d298     17 39 02 FB | 	rdlong	local10, local05
0d29c     15 38 0E F2 | 	cmp	local10, #21 wz
0d2a0     35 00 00 FF 
0d2a4     0C E4 85 F1 | 	sub	objptr, ##27148
0d2a8     44 00 90 5D |  if_ne	jmp	#LR__1044
0d2ac     37 00 00 FF 
0d2b0     44 E4 05 F1 | 	add	objptr, ##28228
0d2b4     F2 38 02 FB | 	rdlong	local10, objptr
0d2b8     01 38 06 F1 | 	add	local10, #1
0d2bc     F2 38 62 FC | 	wrlong	local10, objptr
0d2c0     37 00 00 FF 
0d2c4     44 E4 85 F1 | 	sub	objptr, ##28228
0d2c8     58 EB BF FD | 	call	#_expr
0d2cc     FD 3A 02 F6 | 	mov	local11, result1
0d2d0     37 00 00 FF 
0d2d4     44 E4 05 F1 | 	add	objptr, ##28228
0d2d8     F2 38 02 FB | 	rdlong	local10, objptr
0d2dc     01 38 06 F1 | 	add	local10, #1
0d2e0     F2 38 62 FC | 	wrlong	local10, objptr
0d2e4     37 00 00 FF 
0d2e8     44 E4 85 F1 | 	sub	objptr, ##28228
0d2ec     08 00 90 FD | 	jmp	#LR__1045
0d2f0                 | LR__1044
0d2f0     30 EB BF FD | 	call	#_expr
0d2f4     FD 3A 02 F6 | 	mov	local11, result1
0d2f8                 | LR__1045
0d2f8                 | '     if err>0 then return err
0d2f8     01 3A 56 F2 | 	cmps	local11, #1 wc
0d2fc     1D FB 01 36 |  if_ae	mov	result1, local11
0d300     2C 02 90 3D |  if_ae	jmp	#LR__1049
0d304     01 36 06 F1 | 	add	local09, #1
0d308     37 00 00 FF 
0d30c     44 E4 05 F1 | 	add	objptr, ##28228
0d310     F2 2E 02 FB | 	rdlong	local05, objptr
0d314     03 2E 66 F0 | 	shl	local05, #3
0d318     02 00 00 FF 
0d31c     38 E4 85 F1 | 	sub	objptr, ##1080
0d320     F2 2E 02 F1 | 	add	local05, objptr
0d324     04 2E 06 F1 | 	add	local05, #4
0d328     17 3B 02 FB | 	rdlong	local11, local05
0d32c     14 3A 0E F2 | 	cmp	local11, #20 wz
0d330     35 00 00 FF 
0d334     0C E4 85 F1 | 	sub	objptr, ##27148
0d338     34 00 90 AD |  if_e	jmp	#LR__1046
0d33c     37 00 00 FF 
0d340     44 E4 05 F1 | 	add	objptr, ##28228
0d344     F2 3A 02 FB | 	rdlong	local11, objptr
0d348     03 3A 66 F0 | 	shl	local11, #3
0d34c     02 00 00 FF 
0d350     38 E4 85 F1 | 	sub	objptr, ##1080
0d354     F2 3A 02 F1 | 	add	local11, objptr
0d358     04 3A 06 F1 | 	add	local11, #4
0d35c     1D 3B 02 FB | 	rdlong	local11, local11
0d360     FE 3B 0E F2 | 	cmp	local11, #510 wz
0d364     35 00 00 FF 
0d368     0C E4 85 F1 | 	sub	objptr, ##27148
0d36c     00 FF 9F 5D |  if_ne	jmp	#LR__1043
0d370                 | LR__1046
0d370                 | '     if lparts(ct).token=token_end then return 14
0d370     37 00 00 FF 
0d374     44 E4 05 F1 | 	add	objptr, ##28228
0d378     F2 2E 02 FB | 	rdlong	local05, objptr
0d37c     03 2E 66 F0 | 	shl	local05, #3
0d380     02 00 00 FF 
0d384     38 E4 85 F1 | 	sub	objptr, ##1080
0d388     F2 2E 02 F1 | 	add	local05, objptr
0d38c     04 2E 06 F1 | 	add	local05, #4
0d390     17 3B 02 FB | 	rdlong	local11, local05
0d394     FE 3B 0E F2 | 	cmp	local11, #510 wz
0d398     35 00 00 FF 
0d39c     0C E4 85 F1 | 	sub	objptr, ##27148
0d3a0     0E FA 05 A6 |  if_e	mov	result1, #14
0d3a4     88 01 90 AD |  if_e	jmp	#LR__1049
0d3a8                 | LR__1047
0d3a8     1B 29 02 F6 | 	mov	local02, local09
0d3ac     11 2A 06 F6 | 	mov	local03, #17
0d3b0     19 27 02 F6 | 	mov	local01, local07
0d3b4     13 39 02 F6 | 	mov	local10, local01
0d3b8     14 3D 02 F6 | 	mov	local12, local02
0d3bc     15 3F 02 F6 | 	mov	local13, local03
0d3c0     4A 00 00 FF 
0d3c4     7C E4 05 F1 | 	add	objptr, ##38012
0d3c8     F2 40 02 FB | 	rdlong	local14, objptr
0d3cc     20 43 02 F6 | 	mov	local15, local14
0d3d0     01 42 66 F0 | 	shl	local15, #1
0d3d4     20 43 02 F1 | 	add	local15, local14
0d3d8     02 42 66 F0 | 	shl	local15, #2
0d3dc     03 00 00 FF 
0d3e0     00 E4 85 F1 | 	sub	objptr, ##1536
0d3e4     F2 42 02 F1 | 	add	local15, objptr
0d3e8     21 39 62 FC | 	wrlong	local10, local15
0d3ec     03 00 00 FF 
0d3f0     00 E4 05 F1 | 	add	objptr, ##1536
0d3f4     F2 38 02 FB | 	rdlong	local10, objptr
0d3f8     1C 45 02 F6 | 	mov	local16, local10
0d3fc     01 44 66 F0 | 	shl	local16, #1
0d400     1C 45 02 F1 | 	add	local16, local10
0d404     02 44 66 F0 | 	shl	local16, #2
0d408     03 00 00 FF 
0d40c     00 E4 85 F1 | 	sub	objptr, ##1536
0d410     F2 44 02 F1 | 	add	local16, objptr
0d414     04 44 06 F1 | 	add	local16, #4
0d418     22 3D 62 FC | 	wrlong	local12, local16
0d41c     03 00 00 FF 
0d420     00 E4 05 F1 | 	add	objptr, ##1536
0d424     F2 38 02 FB | 	rdlong	local10, objptr
0d428     1C 47 02 F6 | 	mov	local17, local10
0d42c     01 46 66 F0 | 	shl	local17, #1
0d430     1C 47 02 F1 | 	add	local17, local10
0d434     02 46 66 F0 | 	shl	local17, #2
0d438     03 00 00 FF 
0d43c     00 E4 85 F1 | 	sub	objptr, ##1536
0d440     F2 46 02 F1 | 	add	local17, objptr
0d444     08 46 06 F1 | 	add	local17, #8
0d448     23 3F 62 FC | 	wrlong	local13, local17
0d44c     03 00 00 FF 
0d450     00 E4 05 F1 | 	add	objptr, ##1536
0d454     F2 38 02 FB | 	rdlong	local10, objptr
0d458     01 38 06 F1 | 	add	local10, #1
0d45c     F2 38 62 FC | 	wrlong	local10, objptr
0d460     4A 00 00 FF 
0d464     7C E4 85 F1 | 	sub	objptr, ##38012
0d468                 | ' t2.result.twowords(1)=numpar
0d468                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
0d468                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0d468                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0d468     FF FF 7F FF 
0d46c     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0d470     B8 00 90 5D |  if_ne	jmp	#LR__1048
0d474     15 2A 06 F6 | 	mov	local03, #21
0d478     13 39 02 F6 | 	mov	local10, local01
0d47c     14 3D 02 F6 | 	mov	local12, local02
0d480     15 3F 02 F6 | 	mov	local13, local03
0d484     4A 00 00 FF 
0d488     7C E4 05 F1 | 	add	objptr, ##38012
0d48c     F2 40 02 FB | 	rdlong	local14, objptr
0d490     20 43 02 F6 | 	mov	local15, local14
0d494     01 42 66 F0 | 	shl	local15, #1
0d498     20 43 02 F1 | 	add	local15, local14
0d49c     02 42 66 F0 | 	shl	local15, #2
0d4a0     03 00 00 FF 
0d4a4     00 E4 85 F1 | 	sub	objptr, ##1536
0d4a8     F2 42 02 F1 | 	add	local15, objptr
0d4ac     21 39 62 FC | 	wrlong	local10, local15
0d4b0     03 00 00 FF 
0d4b4     00 E4 05 F1 | 	add	objptr, ##1536
0d4b8     F2 46 02 FB | 	rdlong	local17, objptr
0d4bc     23 45 02 F6 | 	mov	local16, local17
0d4c0     01 44 66 F0 | 	shl	local16, #1
0d4c4     23 45 02 F1 | 	add	local16, local17
0d4c8     02 44 66 F0 | 	shl	local16, #2
0d4cc     03 00 00 FF 
0d4d0     00 E4 85 F1 | 	sub	objptr, ##1536
0d4d4     F2 44 02 F1 | 	add	local16, objptr
0d4d8     04 44 06 F1 | 	add	local16, #4
0d4dc     22 3D 62 FC | 	wrlong	local12, local16
0d4e0     03 00 00 FF 
0d4e4     00 E4 05 F1 | 	add	objptr, ##1536
0d4e8     F2 44 02 FB | 	rdlong	local16, objptr
0d4ec     22 47 02 F6 | 	mov	local17, local16
0d4f0     01 46 66 F0 | 	shl	local17, #1
0d4f4     22 47 02 F1 | 	add	local17, local16
0d4f8     02 46 66 F0 | 	shl	local17, #2
0d4fc     03 00 00 FF 
0d500     00 E4 85 F1 | 	sub	objptr, ##1536
0d504     F2 46 02 F1 | 	add	local17, objptr
0d508     08 46 06 F1 | 	add	local17, #8
0d50c     23 3F 62 FC | 	wrlong	local13, local17
0d510     03 00 00 FF 
0d514     00 E4 05 F1 | 	add	objptr, ##1536
0d518     F2 38 02 FB | 	rdlong	local10, objptr
0d51c     01 38 06 F1 | 	add	local10, #1
0d520     F2 38 62 FC | 	wrlong	local10, objptr
0d524     4A 00 00 FF 
0d528     7C E4 85 F1 | 	sub	objptr, ##38012
0d52c                 | LR__1048
0d52c                 | ' return 0
0d52c     00 FA 05 F6 | 	mov	result1, #0
0d530                 | LR__1049
0d530     A7 F0 03 F6 | 	mov	ptra, fp
0d534     B2 00 A0 FD | 	call	#popregs_
0d538                 | _getvar_ret
0d538     2D 00 64 FD | 	ret
0d53c                 | 
0d53c                 | ' 
0d53c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d53c                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
0d53c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d53c                 | ' 
0d53c                 | ' 
0d53c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d53c                 | ' '                                                                                                                                       -
0d53c                 | ' '                                              RUNTIME STARTS HERE                                                                      - 
0d53c                 | ' '                                                                                                                                       -
0d53c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d53c                 | ' 
0d53c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0d53c                 | ' '----------------------------------------- A main execute line function ----------------------------------------------------------------
0d53c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0d53c                 | ' 
0d53c                 | ' function execute_line (astart=0 as integer) as integer
0d53c                 | _execute_line
0d53c     04 4A 05 F6 | 	mov	COUNT_, #4
0d540     A8 00 A0 FD | 	call	#pushregs_
0d544     50 00 00 FF 
0d548     BC E4 05 F1 | 	add	objptr, ##41148
0d54c     F2 00 68 FC | 	wrlong	#0, objptr
0d550                 | ' 
0d550                 | ' runptr2=0
0d550                 | ' for lineptr_e=astart to lineptr-1
0d550     06 00 00 FF 
0d554     3C E4 85 F1 | 	sub	objptr, ##3132
0d558     F2 12 62 FC | 	wrlong	arg01, objptr
0d55c     04 E4 85 F1 | 	sub	objptr, #4
0d560     F2 26 02 FB | 	rdlong	local01, objptr
0d564     4A 00 00 FF 
0d568     7C E4 85 F1 | 	sub	objptr, ##38012
0d56c                 | LR__1050
0d56c     4A 00 00 FF 
0d570     80 E4 05 F1 | 	add	objptr, ##38016
0d574     F2 FA 01 FB | 	rdlong	result1, objptr
0d578     4A 00 00 FF 
0d57c     80 E4 85 F1 | 	sub	objptr, ##38016
0d580     13 FB 51 F2 | 	cmps	result1, local01 wc
0d584     98 00 90 3D |  if_ae	jmp	#LR__1051
0d588     4A 00 00 FF 
0d58c     80 E4 05 F1 | 	add	objptr, ##38016
0d590     F2 FA 01 FB | 	rdlong	result1, objptr
0d594     FD 28 02 F6 | 	mov	local02, result1
0d598     01 28 66 F0 | 	shl	local02, #1
0d59c     FD 28 02 F1 | 	add	local02, result1
0d5a0     02 28 66 F0 | 	shl	local02, #2
0d5a4     03 00 00 FF 
0d5a8     04 E4 85 F1 | 	sub	objptr, ##1540
0d5ac     F2 28 02 F1 | 	add	local02, objptr
0d5b0     08 28 06 F1 | 	add	local02, #8
0d5b4     14 29 02 FB | 	rdlong	local02, local02
0d5b8     14 29 E2 F8 | 	getbyte	local02, local02, #0
0d5bc     02 28 66 F0 | 	shl	local02, #2
0d5c0     04 00 00 FF 
0d5c4     1C E4 85 F1 | 	sub	objptr, ##2076
0d5c8     F2 28 02 F1 | 	add	local02, objptr
0d5cc     14 29 02 FB | 	rdlong	local02, local02
0d5d0     14 2B 02 F6 | 	mov	local03, local02
0d5d4     13 28 46 F7 | 	zerox	local02, #19
0d5d8     14 2A 46 F0 | 	shr	local03, #20
0d5dc     02 2A 66 F0 | 	shl	local03, #2
0d5e0     ED 2A 02 F1 | 	add	local03, __methods__
0d5e4     15 2B 02 FB | 	rdlong	local03, local03
0d5e8     43 00 00 FF 
0d5ec     60 E4 85 F1 | 	sub	objptr, ##34400
0d5f0     F2 2C 02 F6 | 	mov	local04, objptr
0d5f4     14 E5 01 F6 | 	mov	objptr, local02
0d5f8     2D 2A 62 FD | 	call	local03
0d5fc     16 E5 01 F6 | 	mov	objptr, local04
0d600     4A 00 00 FF 
0d604     80 E4 05 F1 | 	add	objptr, ##38016
0d608     F2 2C 02 FB | 	rdlong	local04, objptr
0d60c     01 2C 06 F1 | 	add	local04, #1
0d610     F2 2C 62 FC | 	wrlong	local04, objptr
0d614     4A 00 00 FF 
0d618     80 E4 85 F1 | 	sub	objptr, ##38016
0d61c     4C FF 9F FD | 	jmp	#LR__1050
0d620                 | LR__1051
0d620                 | ' return runptr2
0d620     50 00 00 FF 
0d624     BC E4 05 F1 | 	add	objptr, ##41148
0d628     F2 FA 01 FB | 	rdlong	result1, objptr
0d62c     50 00 00 FF 
0d630     BC E4 85 F1 | 	sub	objptr, ##41148
0d634     A7 F0 03 F6 | 	mov	ptra, fp
0d638     B2 00 A0 FD | 	call	#popregs_
0d63c                 | _execute_line_ret
0d63c     2D 00 64 FD | 	ret
0d640                 | 
0d640                 | ' 
0d640                 | ' 
0d640                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d640                 | ' '--------------------------------------- Runtime helper functions -----------------------------------------------------------------------
0d640                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d640                 | ' 
0d640                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
0d640                 | ' 
0d640                 | ' function pop() as expr_result
0d640                 | _pop
0d640                 | ' if stackpointer=0 then
0d640     43 00 00 FF 
0d644     58 E4 05 F1 | 	add	objptr, ##34392
0d648     F2 FA 09 FB | 	rdlong	result1, objptr wz
0d64c     43 00 00 FF 
0d650     58 E4 85 F1 | 	sub	objptr, ##34392
0d654     FF 04 06 A6 |  if_e	mov	_var03, #255
0d658     18 00 06 A6 |  if_e	mov	_var01, #24
0d65c     68 00 90 AD |  if_e	jmp	#LR__1060
0d660     43 00 00 FF 
0d664     58 E4 05 F1 | 	add	objptr, ##34392
0d668     F2 FA 01 FB | 	rdlong	result1, objptr
0d66c     01 FA 85 F1 | 	sub	result1, #1
0d670     F2 FA 61 FC | 	wrlong	result1, objptr
0d674     FD FE 01 F6 | 	mov	result3, result1
0d678     01 FE 65 F0 | 	shl	result3, #1
0d67c     FD FE 01 F1 | 	add	result3, result1
0d680     02 FE 65 F0 | 	shl	result3, #2
0d684     0C 00 00 FF 
0d688     0C E4 85 F1 | 	sub	objptr, ##6156
0d68c     F2 FE 01 F1 | 	add	result3, objptr
0d690     FF 00 02 FB | 	rdlong	_var01, result3
0d694     04 FE 05 F1 | 	add	result3, #4
0d698     FF FE 01 FB | 	rdlong	result3, result3
0d69c     FD FC 01 F6 | 	mov	result2, result1
0d6a0     01 FC 65 F0 | 	shl	result2, #1
0d6a4     FD FC 01 F1 | 	add	result2, result1
0d6a8     02 FC 65 F0 | 	shl	result2, #2
0d6ac     F2 FC 01 F1 | 	add	result2, objptr
0d6b0     08 FC 05 F1 | 	add	result2, #8
0d6b4     FE FA 01 FB | 	rdlong	result1, result2
0d6b8     FF 02 02 F6 | 	mov	_var02, result3
0d6bc     FD 04 02 F6 | 	mov	_var03, result1
0d6c0     37 00 00 FF 
0d6c4     4C E4 85 F1 | 	sub	objptr, ##28236
0d6c8                 | LR__1060
0d6c8                 | ' return t1
0d6c8     01 FD 01 F6 | 	mov	result2, _var02
0d6cc     02 FF 01 F6 | 	mov	result3, _var03
0d6d0     00 FB 01 F6 | 	mov	result1, _var01
0d6d4                 | _pop_ret
0d6d4     2D 00 64 FD | 	ret
0d6d8                 | 
0d6d8                 | ' 
0d6d8                 | ' sub push(t1 as expr_result )
0d6d8                 | _push
0d6d8                 | ' if stackpointer<maxstack then 
0d6d8     43 00 00 FF 
0d6dc     58 E4 05 F1 | 	add	objptr, ##34392
0d6e0     F2 00 02 FB | 	rdlong	_var01, objptr
0d6e4     43 00 00 FF 
0d6e8     58 E4 85 F1 | 	sub	objptr, ##34392
0d6ec     01 00 00 FF 
0d6f0     00 00 56 F2 | 	cmps	_var01, ##512 wc
0d6f4     BC 00 90 3D |  if_ae	jmp	#LR__1070
0d6f8     09 01 02 FB | 	rdlong	_var01, arg01
0d6fc     04 12 06 F1 | 	add	arg01, #4
0d700     09 03 02 FB | 	rdlong	_var02, arg01
0d704     04 12 06 F1 | 	add	arg01, #4
0d708     09 13 02 FB | 	rdlong	arg01, arg01
0d70c     43 00 00 FF 
0d710     58 E4 05 F1 | 	add	objptr, ##34392
0d714     F2 04 02 FB | 	rdlong	_var03, objptr
0d718     02 07 02 F6 | 	mov	_var04, _var03
0d71c     01 06 66 F0 | 	shl	_var04, #1
0d720     02 07 02 F1 | 	add	_var04, _var03
0d724     02 06 66 F0 | 	shl	_var04, #2
0d728     0C 00 00 FF 
0d72c     0C E4 85 F1 | 	sub	objptr, ##6156
0d730     F2 06 02 F1 | 	add	_var04, objptr
0d734     03 01 62 FC | 	wrlong	_var01, _var04
0d738     0C 00 00 FF 
0d73c     0C E4 05 F1 | 	add	objptr, ##6156
0d740     F2 06 02 FB | 	rdlong	_var04, objptr
0d744     03 05 02 F6 | 	mov	_var03, _var04
0d748     01 04 66 F0 | 	shl	_var03, #1
0d74c     03 05 02 F1 | 	add	_var03, _var04
0d750     02 04 66 F0 | 	shl	_var03, #2
0d754     0C 00 00 FF 
0d758     0C E4 85 F1 | 	sub	objptr, ##6156
0d75c     F2 04 02 F1 | 	add	_var03, objptr
0d760     04 04 06 F1 | 	add	_var03, #4
0d764     02 03 62 FC | 	wrlong	_var02, _var03
0d768     0C 00 00 FF 
0d76c     0C E4 05 F1 | 	add	objptr, ##6156
0d770     F2 06 02 FB | 	rdlong	_var04, objptr
0d774     03 05 02 F6 | 	mov	_var03, _var04
0d778     01 04 66 F0 | 	shl	_var03, #1
0d77c     03 05 02 F1 | 	add	_var03, _var04
0d780     02 04 66 F0 | 	shl	_var03, #2
0d784     0C 00 00 FF 
0d788     0C E4 85 F1 | 	sub	objptr, ##6156
0d78c     F2 04 02 F1 | 	add	_var03, objptr
0d790     08 04 06 F1 | 	add	_var03, #8
0d794     02 13 62 FC | 	wrlong	arg01, _var03
0d798     0C 00 00 FF 
0d79c     0C E4 05 F1 | 	add	objptr, ##6156
0d7a0     F2 00 02 FB | 	rdlong	_var01, objptr
0d7a4     01 00 06 F1 | 	add	_var01, #1
0d7a8     F2 00 62 FC | 	wrlong	_var01, objptr
0d7ac     43 00 00 FF 
0d7b0     58 E4 85 F1 | 	sub	objptr, ##34392
0d7b4                 | LR__1070
0d7b4                 | _push_ret
0d7b4     2D 00 64 FD | 	ret
0d7b8                 | 
0d7b8                 | ' 
0d7b8                 | ' ' -------------------------------- Runtime converting functions
0d7b8                 | ' 
0d7b8                 | ' ' converts the PSRAM based string to 'normal' string. A PSRAM pointer at input, a string at output
0d7b8                 | ' 
0d7b8                 | ' function  convertstring(psaddr as ulong) as string
0d7b8                 | _convertstring
0d7b8     04 4A 05 F6 | 	mov	COUNT_, #4
0d7bc     A8 00 A0 FD | 	call	#pushregs_
0d7c0     09 27 02 F6 | 	mov	local01, arg01
0d7c4     3C 5F B1 FD | 	call	#_pslpeek
0d7c8     FD 28 02 F6 | 	mov	local02, result1
0d7cc     B8 01 00 FF 
0d7d0     F2 2A 06 F6 | 	mov	local03, ##@LR__5858
0d7d4                 | ' l=pslpeek(psaddr) 
0d7d4                 | ' s="" 
0d7d4                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
0d7d4     01 2C 06 F6 | 	mov	local04, #1
0d7d8     01 28 06 F1 | 	add	local02, #1
0d7dc                 | LR__1080
0d7dc     14 2D 52 F2 | 	cmps	local04, local02 wc
0d7e0     30 00 90 3D |  if_ae	jmp	#LR__1081
0d7e4     13 13 02 F6 | 	mov	arg01, local01
0d7e8     03 12 06 F1 | 	add	arg01, #3
0d7ec     16 13 02 F1 | 	add	arg01, local04
0d7f0     B8 5E B1 FD | 	call	#_pspeek
0d7f4     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
0d7f8     94 B8 B1 FD | 	call	#__system__Chr_S
0d7fc     FD 14 02 F6 | 	mov	arg02, result1
0d800     15 13 02 F6 | 	mov	arg01, local03
0d804     A4 96 B1 FD | 	call	#__system___string_concat
0d808     FD 2A 02 F6 | 	mov	local03, result1
0d80c     01 2C 06 F1 | 	add	local04, #1
0d810     C8 FF 9F FD | 	jmp	#LR__1080
0d814                 | LR__1081
0d814                 | ' return s
0d814     15 FB 01 F6 | 	mov	result1, local03
0d818     A7 F0 03 F6 | 	mov	ptra, fp
0d81c     B2 00 A0 FD | 	call	#popregs_
0d820                 | _convertstring_ret
0d820     2D 00 64 FD | 	ret
0d824                 | 
0d824                 | ' 
0d824                 | ' ' converts a variable to an integer
0d824                 | ' 
0d824                 | ' function converttoint (t1 as expr_result) as integer 
0d824                 | _converttoint
0d824     02 4A 05 F6 | 	mov	COUNT_, #2
0d828     A8 00 A0 FD | 	call	#pushregs_
0d82c     09 27 02 F6 | 	mov	local01, arg01
0d830                 | ' 
0d830                 | ' select case t1.result_type
0d830     08 26 06 F1 | 	add	local01, #8
0d834     13 29 02 FB | 	rdlong	local02, local01
0d838     08 26 86 F1 | 	sub	local01, #8
0d83c     1C 28 0E F2 | 	cmp	local02, #28 wz
0d840     2C 00 90 AD |  if_e	jmp	#LR__1090
0d844     1D 28 0E F2 | 	cmp	local02, #29 wz
0d848     2C 00 90 AD |  if_e	jmp	#LR__1091
0d84c     1E 28 0E F2 | 	cmp	local02, #30 wz
0d850     2C 00 90 AD |  if_e	jmp	#LR__1092
0d854     1F 28 0E F2 | 	cmp	local02, #31 wz
0d858     34 00 90 AD |  if_e	jmp	#LR__1093
0d85c     2B 28 0E F2 | 	cmp	local02, #43 wz
0d860     44 00 90 AD |  if_e	jmp	#LR__1094
0d864     2C 28 0E F2 | 	cmp	local02, #44 wz
0d868     5C 00 90 AD |  if_e	jmp	#LR__1095
0d86c     60 00 90 FD | 	jmp	#LR__1096
0d870                 | LR__1090
0d870     13 FB 01 FB | 	rdlong	result1, local01
0d874     5C 00 90 FD | 	jmp	#LR__1097
0d878                 | LR__1091
0d878     13 FB 01 FB | 	rdlong	result1, local01
0d87c     54 00 90 FD | 	jmp	#LR__1097
0d880                 | LR__1092
0d880     13 13 02 FB | 	rdlong	arg01, local01
0d884     01 14 06 F6 | 	mov	arg02, #1
0d888     04 C9 B1 FD | 	call	#__system___float_tointeger
0d88c     44 00 90 FD | 	jmp	#LR__1097
0d890                 | LR__1093
0d890     13 13 02 FB | 	rdlong	arg01, local01
0d894     3C CC B1 FD | 	call	#__system____builtin_atof
0d898     FD 12 02 F6 | 	mov	arg01, result1
0d89c     01 14 06 F6 | 	mov	arg02, #1
0d8a0     EC C8 B1 FD | 	call	#__system___float_tointeger
0d8a4     2C 00 90 FD | 	jmp	#LR__1097
0d8a8                 | LR__1094
0d8a8     13 13 02 FB | 	rdlong	arg01, local01
0d8ac     08 FF BF FD | 	call	#_convertstring
0d8b0     FD 12 02 F6 | 	mov	arg01, result1
0d8b4     1C CC B1 FD | 	call	#__system____builtin_atof
0d8b8     FD 12 02 F6 | 	mov	arg01, result1
0d8bc     01 14 06 F6 | 	mov	arg02, #1
0d8c0     CC C8 B1 FD | 	call	#__system___float_tointeger
0d8c4     0C 00 90 FD | 	jmp	#LR__1097
0d8c8                 | LR__1095
0d8c8     13 FB 01 FB | 	rdlong	result1, local01
0d8cc     04 00 90 FD | 	jmp	#LR__1097
0d8d0                 | LR__1096
0d8d0     00 FA 05 F6 | 	mov	result1, #0
0d8d4                 | LR__1097
0d8d4     A7 F0 03 F6 | 	mov	ptra, fp
0d8d8     B2 00 A0 FD | 	call	#popregs_
0d8dc                 | _converttoint_ret
0d8dc     2D 00 64 FD | 	ret
0d8e0                 | 
0d8e0                 | ' 
0d8e0                 | ' ' converts a variable to float
0d8e0                 | ' 
0d8e0                 | ' function converttofloat (t1 as expr_result) as single
0d8e0                 | _converttofloat
0d8e0     03 4A 05 F6 | 	mov	COUNT_, #3
0d8e4     A8 00 A0 FD | 	call	#pushregs_
0d8e8     09 27 02 F6 | 	mov	local01, arg01
0d8ec                 | ' 
0d8ec                 | ' select case t1.result_type
0d8ec     08 26 06 F1 | 	add	local01, #8
0d8f0     13 29 02 FB | 	rdlong	local02, local01
0d8f4     08 26 86 F1 | 	sub	local01, #8
0d8f8     1C 28 0E F2 | 	cmp	local02, #28 wz
0d8fc     24 00 90 AD |  if_e	jmp	#LR__1100
0d900     1D 28 0E F2 | 	cmp	local02, #29 wz
0d904     38 00 90 AD |  if_e	jmp	#LR__1101
0d908     1E 28 0E F2 | 	cmp	local02, #30 wz
0d90c     3C 00 90 AD |  if_e	jmp	#LR__1102
0d910     1F 28 0E F2 | 	cmp	local02, #31 wz
0d914     3C 00 90 AD |  if_e	jmp	#LR__1103
0d918     2B 28 0E F2 | 	cmp	local02, #43 wz
0d91c     40 00 90 AD |  if_e	jmp	#LR__1104
0d920     50 00 90 FD | 	jmp	#LR__1105
0d924                 | LR__1100
0d924     13 13 02 FB | 	rdlong	arg01, local01
0d928     09 13 52 F6 | 	abs	arg01, arg01 wc
0d92c     1F 2A C6 C9 |  if_b	decod	local03, #31
0d930     00 2A 06 36 |  if_ae	mov	local03, #0
0d934     8C BF B1 FD | 	call	#__system___float_fromuns
0d938     15 FB 61 F5 | 	xor	result1, local03
0d93c     38 00 90 FD | 	jmp	#LR__1106
0d940                 | LR__1101
0d940     13 13 02 FB | 	rdlong	arg01, local01
0d944     7C BF B1 FD | 	call	#__system___float_fromuns
0d948     2C 00 90 FD | 	jmp	#LR__1106
0d94c                 | LR__1102
0d94c     13 FB 01 FB | 	rdlong	result1, local01
0d950     24 00 90 FD | 	jmp	#LR__1106
0d954                 | LR__1103
0d954     13 13 02 FB | 	rdlong	arg01, local01
0d958     78 CB B1 FD | 	call	#__system____builtin_atof
0d95c     18 00 90 FD | 	jmp	#LR__1106
0d960                 | LR__1104
0d960     13 13 02 FB | 	rdlong	arg01, local01
0d964     50 FE BF FD | 	call	#_convertstring
0d968     FD 12 02 F6 | 	mov	arg01, result1
0d96c     64 CB B1 FD | 	call	#__system____builtin_atof
0d970     04 00 90 FD | 	jmp	#LR__1106
0d974                 | LR__1105
0d974     00 FA 05 F6 | 	mov	result1, #0
0d978                 | LR__1106
0d978     A7 F0 03 F6 | 	mov	ptra, fp
0d97c     B2 00 A0 FD | 	call	#popregs_
0d980                 | _converttofloat_ret
0d980     2D 00 64 FD | 	ret
0d984                 | 
0d984                 | ' 
0d984                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d984                 | ' '----- End of cassette procedures -------------------------------------------------------------------------------------------------------
0d984                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d984                 | ' 
0d984                 | ' 
0d984                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d984                 | ' '--------------------------------------- Runtime functions ------------------------------------------------------------------------------
0d984                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d984                 | ' 
0d984                 | ' '-------------------- abs
0d984                 | ' 
0d984                 | ' sub do_abs
0d984                 | _do_abs
0d984     01 4A 05 F6 | 	mov	COUNT_, #1
0d988     A8 00 A0 FD | 	call	#pushregs_
0d98c     0C F0 07 F1 | 	add	ptra, #12
0d990     AC FC BF FD | 	call	#_pop
0d994     FF 26 02 F6 | 	mov	local01, result3
0d998     A7 FA 61 FC | 	wrlong	result1, fp
0d99c     04 4E 05 F1 | 	add	fp, #4
0d9a0     A7 FC 61 FC | 	wrlong	result2, fp
0d9a4     04 4E 05 F1 | 	add	fp, #4
0d9a8     A7 26 62 FC | 	wrlong	local01, fp
0d9ac                 | ' 
0d9ac                 | ' t1=pop()
0d9ac                 | ' if t1.result_type=result_int then 
0d9ac     08 4E 85 F1 | 	sub	fp, #8
0d9b0     1C 26 0E F2 | 	cmp	local01, #28 wz
0d9b4     A7 12 02 AB |  if_e	rdlong	arg01, fp
0d9b8     09 27 42 A6 |  if_e	abs	local01, arg01
0d9bc     A7 26 62 AC |  if_e	wrlong	local01, fp
0d9c0     2C 00 90 AD |  if_e	jmp	#LR__1110
0d9c4     08 4E 05 F1 | 	add	fp, #8
0d9c8     A7 26 02 FB | 	rdlong	local01, fp
0d9cc     08 4E 85 F1 | 	sub	fp, #8
0d9d0     1E 26 0E F2 | 	cmp	local01, #30 wz
0d9d4     A7 FA 01 AB |  if_e	rdlong	result1, fp
0d9d8     1F FA 05 A4 |  if_e	bitl	result1, #31
0d9dc     A7 FA 61 AC |  if_e	wrlong	result1, fp
0d9e0     08 4E 05 51 |  if_ne	add	fp, #8
0d9e4     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0d9e8     08 4E 85 51 |  if_ne	sub	fp, #8
0d9ec     A7 50 68 5C |  if_ne	wrlong	#40, fp
0d9f0                 | LR__1110
0d9f0     A7 12 02 F6 | 	mov	arg01, fp
0d9f4     E0 FC BF FD | 	call	#_push
0d9f8     A7 F0 03 F6 | 	mov	ptra, fp
0d9fc     B2 00 A0 FD | 	call	#popregs_
0da00                 | _do_abs_ret
0da00     2D 00 64 FD | 	ret
0da04                 | 
0da04                 | ' 
0da04                 | ' '-------------------- acos
0da04                 | ' 
0da04                 | ' sub do_acos
0da04                 | _do_acos
0da04     01 4A 05 F6 | 	mov	COUNT_, #1
0da08     A8 00 A0 FD | 	call	#pushregs_
0da0c     10 F0 07 F1 | 	add	ptra, #16
0da10     4A 00 00 FF 
0da14     80 E4 05 F1 | 	add	objptr, ##38016
0da18     F2 26 02 FB | 	rdlong	local01, objptr
0da1c     13 17 02 F6 | 	mov	arg03, local01
0da20     01 16 66 F0 | 	shl	arg03, #1
0da24     13 17 02 F1 | 	add	arg03, local01
0da28     02 16 66 F0 | 	shl	arg03, #2
0da2c     03 00 00 FF 
0da30     04 E4 85 F1 | 	sub	objptr, ##1540
0da34     F2 16 02 F1 | 	add	arg03, objptr
0da38     0B 17 02 FB | 	rdlong	arg03, arg03
0da3c     0C 4E 05 F1 | 	add	fp, #12
0da40     A7 16 62 FC | 	wrlong	arg03, fp
0da44                 | ' 
0da44                 | ' numpar=compiledline(lineptr_e).result.uresult
0da44                 | ' if numpar>1 orelse numpar=0 then print "acos: "; : printerror(39) : return
0da44     0C 4E 85 F1 | 	sub	fp, #12
0da48     02 16 16 F2 | 	cmp	arg03, #2 wc
0da4c     47 00 00 FF 
0da50     7C E4 85 F1 | 	sub	objptr, ##36476
0da54     0C 4E 05 C1 |  if_b	add	fp, #12
0da58     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0da5c     0C 4E 85 C1 |  if_b	sub	fp, #12
0da60     40 00 90 4D |  if_c_and_nz	jmp	#LR__1120
0da64     00 12 06 F6 | 	mov	arg01, #0
0da68     0C F1 B1 FD | 	call	#__system___getiolock_0611
0da6c     FD 12 02 F6 | 	mov	arg01, result1
0da70     DC 93 B1 FD | 	call	#__system___lockmem
0da74     B8 01 00 FF 
0da78     F3 14 06 F6 | 	mov	arg02, ##@LR__5859
0da7c     00 12 06 F6 | 	mov	arg01, #0
0da80     00 16 06 F6 | 	mov	arg03, #0
0da84     BC A0 B1 FD | 	call	#__system___basic_print_string
0da88     00 12 06 F6 | 	mov	arg01, #0
0da8c     E8 F0 B1 FD | 	call	#__system___getiolock_0611
0da90     FD 00 68 FC | 	wrlong	#0, result1
0da94     27 12 06 F6 | 	mov	arg01, #39
0da98     00 14 06 F6 | 	mov	arg02, #0
0da9c     94 59 B1 FD | 	call	#_printerror
0daa0     64 00 90 FD | 	jmp	#LR__1121
0daa4                 | LR__1120
0daa4     98 FB BF FD | 	call	#_pop
0daa8     FF 26 02 F6 | 	mov	local01, result3
0daac     A7 FA 61 FC | 	wrlong	result1, fp
0dab0     04 4E 05 F1 | 	add	fp, #4
0dab4     A7 FC 61 FC | 	wrlong	result2, fp
0dab8     04 4E 05 F1 | 	add	fp, #4
0dabc     A7 26 62 FC | 	wrlong	local01, fp
0dac0     08 4E 85 F1 | 	sub	fp, #8
0dac4     A7 12 02 F6 | 	mov	arg01, fp
0dac8     14 FE BF FD | 	call	#_converttofloat
0dacc     FD 12 02 F6 | 	mov	arg01, result1
0dad0     34 CD B1 FD | 	call	#__system____builtin_acosf
0dad4     FD 12 02 F6 | 	mov	arg01, result1
0dad8     52 00 00 FF 
0dadc     AC E4 05 F1 | 	add	objptr, ##42156
0dae0     F2 14 02 FB | 	rdlong	arg02, objptr
0dae4     52 00 00 FF 
0dae8     AC E4 85 F1 | 	sub	objptr, ##42156
0daec     D8 C1 B1 FD | 	call	#__system___float_mul
0daf0     A7 FA 61 FC | 	wrlong	result1, fp
0daf4     08 4E 05 F1 | 	add	fp, #8
0daf8     A7 3C 68 FC | 	wrlong	#30, fp
0dafc     08 4E 85 F1 | 	sub	fp, #8
0db00     A7 12 02 F6 | 	mov	arg01, fp
0db04     D0 FB BF FD | 	call	#_push
0db08                 | LR__1121
0db08     A7 F0 03 F6 | 	mov	ptra, fp
0db0c     B2 00 A0 FD | 	call	#popregs_
0db10                 | _do_acos_ret
0db10     2D 00 64 FD | 	ret
0db14                 | 
0db14                 | ' 
0db14                 | ' '-------------------- asc
0db14                 | ' 
0db14                 | ' sub do_asc
0db14                 | _do_asc
0db14     01 4A 05 F6 | 	mov	COUNT_, #1
0db18     A8 00 A0 FD | 	call	#pushregs_
0db1c     14 F0 07 F1 | 	add	ptra, #20
0db20     4A 00 00 FF 
0db24     80 E4 05 F1 | 	add	objptr, ##38016
0db28     F2 26 02 FB | 	rdlong	local01, objptr
0db2c     13 17 02 F6 | 	mov	arg03, local01
0db30     01 16 66 F0 | 	shl	arg03, #1
0db34     13 17 02 F1 | 	add	arg03, local01
0db38     02 16 66 F0 | 	shl	arg03, #2
0db3c     03 00 00 FF 
0db40     04 E4 85 F1 | 	sub	objptr, ##1540
0db44     F2 16 02 F1 | 	add	arg03, objptr
0db48     0B 17 02 FB | 	rdlong	arg03, arg03
0db4c     0C 4E 05 F1 | 	add	fp, #12
0db50     A7 16 62 FC | 	wrlong	arg03, fp
0db54                 | ' 
0db54                 | ' numpar=compiledline(lineptr_e).result.uresult
0db54                 | ' if numpar>1 orelse numpar=0 then print "asc: "; : printerror(39) : return
0db54     0C 4E 85 F1 | 	sub	fp, #12
0db58     02 16 16 F2 | 	cmp	arg03, #2 wc
0db5c     47 00 00 FF 
0db60     7C E4 85 F1 | 	sub	objptr, ##36476
0db64     0C 4E 05 C1 |  if_b	add	fp, #12
0db68     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0db6c     0C 4E 85 C1 |  if_b	sub	fp, #12
0db70     40 00 90 4D |  if_c_and_nz	jmp	#LR__1130
0db74     00 12 06 F6 | 	mov	arg01, #0
0db78     FC EF B1 FD | 	call	#__system___getiolock_0611
0db7c     FD 12 02 F6 | 	mov	arg01, result1
0db80     CC 92 B1 FD | 	call	#__system___lockmem
0db84     B8 01 00 FF 
0db88     FA 14 06 F6 | 	mov	arg02, ##@LR__5860
0db8c     00 12 06 F6 | 	mov	arg01, #0
0db90     00 16 06 F6 | 	mov	arg03, #0
0db94     AC 9F B1 FD | 	call	#__system___basic_print_string
0db98     00 12 06 F6 | 	mov	arg01, #0
0db9c     D8 EF B1 FD | 	call	#__system___getiolock_0611
0dba0     FD 00 68 FC | 	wrlong	#0, result1
0dba4     27 12 06 F6 | 	mov	arg01, #39
0dba8     00 14 06 F6 | 	mov	arg02, #0
0dbac     84 58 B1 FD | 	call	#_printerror
0dbb0     B4 00 90 FD | 	jmp	#LR__1133
0dbb4                 | LR__1130
0dbb4     88 FA BF FD | 	call	#_pop
0dbb8     FF 16 02 F6 | 	mov	arg03, result3
0dbbc     A7 FA 61 FC | 	wrlong	result1, fp
0dbc0     04 4E 05 F1 | 	add	fp, #4
0dbc4     A7 FC 61 FC | 	wrlong	result2, fp
0dbc8     04 4E 05 F1 | 	add	fp, #4
0dbcc     A7 16 62 FC | 	wrlong	arg03, fp
0dbd0                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0dbd0     08 4E 85 F1 | 	sub	fp, #8
0dbd4     2B 16 0E F2 | 	cmp	arg03, #43 wz
0dbd8     18 00 90 5D |  if_ne	jmp	#LR__1131
0dbdc     A7 12 02 FB | 	rdlong	arg01, fp
0dbe0     D4 FB BF FD | 	call	#_convertstring
0dbe4     A7 FA 61 FC | 	wrlong	result1, fp
0dbe8     08 4E 05 F1 | 	add	fp, #8
0dbec     A7 3E 68 FC | 	wrlong	#31, fp
0dbf0     08 4E 85 F1 | 	sub	fp, #8
0dbf4                 | LR__1131
0dbf4                 | ' if t1.result_type<>result_string then print "asc: "; : printerror(15) : return 
0dbf4     08 4E 05 F1 | 	add	fp, #8
0dbf8     A7 16 02 FB | 	rdlong	arg03, fp
0dbfc     08 4E 85 F1 | 	sub	fp, #8
0dc00     1F 16 0E F2 | 	cmp	arg03, #31 wz
0dc04     40 00 90 AD |  if_e	jmp	#LR__1132
0dc08     00 12 06 F6 | 	mov	arg01, #0
0dc0c     68 EF B1 FD | 	call	#__system___getiolock_0611
0dc10     FD 12 02 F6 | 	mov	arg01, result1
0dc14     38 92 B1 FD | 	call	#__system___lockmem
0dc18     B8 01 00 FF 
0dc1c     00 15 06 F6 | 	mov	arg02, ##@LR__5861
0dc20     00 12 06 F6 | 	mov	arg01, #0
0dc24     00 16 06 F6 | 	mov	arg03, #0
0dc28     18 9F B1 FD | 	call	#__system___basic_print_string
0dc2c     00 12 06 F6 | 	mov	arg01, #0
0dc30     44 EF B1 FD | 	call	#__system___getiolock_0611
0dc34     FD 00 68 FC | 	wrlong	#0, result1
0dc38     0F 12 06 F6 | 	mov	arg01, #15
0dc3c     00 14 06 F6 | 	mov	arg02, #0
0dc40     F0 57 B1 FD | 	call	#_printerror
0dc44     20 00 90 FD | 	jmp	#LR__1133
0dc48                 | LR__1132
0dc48     A7 26 02 FB | 	rdlong	local01, fp
0dc4c     13 27 C2 FA | 	rdbyte	local01, local01
0dc50     A7 26 62 FC | 	wrlong	local01, fp
0dc54     08 4E 05 F1 | 	add	fp, #8
0dc58     A7 38 68 FC | 	wrlong	#28, fp
0dc5c     08 4E 85 F1 | 	sub	fp, #8
0dc60     A7 12 02 F6 | 	mov	arg01, fp
0dc64     70 FA BF FD | 	call	#_push
0dc68                 | LR__1133
0dc68     A7 F0 03 F6 | 	mov	ptra, fp
0dc6c     B2 00 A0 FD | 	call	#popregs_
0dc70                 | _do_asc_ret
0dc70     2D 00 64 FD | 	ret
0dc74                 | 
0dc74                 | ' 
0dc74                 | ' '-------------------- asin
0dc74                 | ' 
0dc74                 | ' sub do_asin
0dc74                 | _do_asin
0dc74     01 4A 05 F6 | 	mov	COUNT_, #1
0dc78     A8 00 A0 FD | 	call	#pushregs_
0dc7c     10 F0 07 F1 | 	add	ptra, #16
0dc80     4A 00 00 FF 
0dc84     80 E4 05 F1 | 	add	objptr, ##38016
0dc88     F2 26 02 FB | 	rdlong	local01, objptr
0dc8c     13 17 02 F6 | 	mov	arg03, local01
0dc90     01 16 66 F0 | 	shl	arg03, #1
0dc94     13 17 02 F1 | 	add	arg03, local01
0dc98     02 16 66 F0 | 	shl	arg03, #2
0dc9c     03 00 00 FF 
0dca0     04 E4 85 F1 | 	sub	objptr, ##1540
0dca4     F2 16 02 F1 | 	add	arg03, objptr
0dca8     0B 17 02 FB | 	rdlong	arg03, arg03
0dcac     0C 4E 05 F1 | 	add	fp, #12
0dcb0     A7 16 62 FC | 	wrlong	arg03, fp
0dcb4                 | ' 
0dcb4                 | ' numpar=compiledline(lineptr_e).result.uresult
0dcb4                 | ' if numpar>1 orelse numpar=0 then print "asin: "; : printerror(39) : return
0dcb4     0C 4E 85 F1 | 	sub	fp, #12
0dcb8     02 16 16 F2 | 	cmp	arg03, #2 wc
0dcbc     47 00 00 FF 
0dcc0     7C E4 85 F1 | 	sub	objptr, ##36476
0dcc4     0C 4E 05 C1 |  if_b	add	fp, #12
0dcc8     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0dccc     0C 4E 85 C1 |  if_b	sub	fp, #12
0dcd0     40 00 90 4D |  if_c_and_nz	jmp	#LR__1140
0dcd4     00 12 06 F6 | 	mov	arg01, #0
0dcd8     9C EE B1 FD | 	call	#__system___getiolock_0611
0dcdc     FD 12 02 F6 | 	mov	arg01, result1
0dce0     6C 91 B1 FD | 	call	#__system___lockmem
0dce4     B8 01 00 FF 
0dce8     06 15 06 F6 | 	mov	arg02, ##@LR__5862
0dcec     00 12 06 F6 | 	mov	arg01, #0
0dcf0     00 16 06 F6 | 	mov	arg03, #0
0dcf4     4C 9E B1 FD | 	call	#__system___basic_print_string
0dcf8     00 12 06 F6 | 	mov	arg01, #0
0dcfc     78 EE B1 FD | 	call	#__system___getiolock_0611
0dd00     FD 00 68 FC | 	wrlong	#0, result1
0dd04     27 12 06 F6 | 	mov	arg01, #39
0dd08     00 14 06 F6 | 	mov	arg02, #0
0dd0c     24 57 B1 FD | 	call	#_printerror
0dd10     64 00 90 FD | 	jmp	#LR__1141
0dd14                 | LR__1140
0dd14     28 F9 BF FD | 	call	#_pop
0dd18     FF 26 02 F6 | 	mov	local01, result3
0dd1c     A7 FA 61 FC | 	wrlong	result1, fp
0dd20     04 4E 05 F1 | 	add	fp, #4
0dd24     A7 FC 61 FC | 	wrlong	result2, fp
0dd28     04 4E 05 F1 | 	add	fp, #4
0dd2c     A7 26 62 FC | 	wrlong	local01, fp
0dd30     08 4E 85 F1 | 	sub	fp, #8
0dd34     A7 12 02 F6 | 	mov	arg01, fp
0dd38     A4 FB BF FD | 	call	#_converttofloat
0dd3c     FD 12 02 F6 | 	mov	arg01, result1
0dd40     78 CA B1 FD | 	call	#__system____builtin_asinf
0dd44     FD 12 02 F6 | 	mov	arg01, result1
0dd48     52 00 00 FF 
0dd4c     AC E4 05 F1 | 	add	objptr, ##42156
0dd50     F2 14 02 FB | 	rdlong	arg02, objptr
0dd54     52 00 00 FF 
0dd58     AC E4 85 F1 | 	sub	objptr, ##42156
0dd5c     68 BF B1 FD | 	call	#__system___float_mul
0dd60     A7 FA 61 FC | 	wrlong	result1, fp
0dd64     08 4E 05 F1 | 	add	fp, #8
0dd68     A7 3C 68 FC | 	wrlong	#30, fp
0dd6c     08 4E 85 F1 | 	sub	fp, #8
0dd70     A7 12 02 F6 | 	mov	arg01, fp
0dd74     60 F9 BF FD | 	call	#_push
0dd78                 | LR__1141
0dd78     A7 F0 03 F6 | 	mov	ptra, fp
0dd7c     B2 00 A0 FD | 	call	#popregs_
0dd80                 | _do_asin_ret
0dd80     2D 00 64 FD | 	ret
0dd84                 | 
0dd84                 | ' 
0dd84                 | ' '-------------------- atn
0dd84                 | ' 
0dd84                 | ' sub do_atn
0dd84                 | _do_atn
0dd84     01 4A 05 F6 | 	mov	COUNT_, #1
0dd88     A8 00 A0 FD | 	call	#pushregs_
0dd8c     10 F0 07 F1 | 	add	ptra, #16
0dd90     4A 00 00 FF 
0dd94     80 E4 05 F1 | 	add	objptr, ##38016
0dd98     F2 26 02 FB | 	rdlong	local01, objptr
0dd9c     13 17 02 F6 | 	mov	arg03, local01
0dda0     01 16 66 F0 | 	shl	arg03, #1
0dda4     13 17 02 F1 | 	add	arg03, local01
0dda8     02 16 66 F0 | 	shl	arg03, #2
0ddac     03 00 00 FF 
0ddb0     04 E4 85 F1 | 	sub	objptr, ##1540
0ddb4     F2 16 02 F1 | 	add	arg03, objptr
0ddb8     0B 17 02 FB | 	rdlong	arg03, arg03
0ddbc     0C 4E 05 F1 | 	add	fp, #12
0ddc0     A7 16 62 FC | 	wrlong	arg03, fp
0ddc4                 | ' 
0ddc4                 | ' numpar=compiledline(lineptr_e).result.uresult
0ddc4                 | ' if numpar>1 orelse numpar=0 then print "atn: "; : printerror(39) : return
0ddc4     0C 4E 85 F1 | 	sub	fp, #12
0ddc8     02 16 16 F2 | 	cmp	arg03, #2 wc
0ddcc     47 00 00 FF 
0ddd0     7C E4 85 F1 | 	sub	objptr, ##36476
0ddd4     0C 4E 05 C1 |  if_b	add	fp, #12
0ddd8     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0dddc     0C 4E 85 C1 |  if_b	sub	fp, #12
0dde0     40 00 90 4D |  if_c_and_nz	jmp	#LR__1150
0dde4     00 12 06 F6 | 	mov	arg01, #0
0dde8     8C ED B1 FD | 	call	#__system___getiolock_0611
0ddec     FD 12 02 F6 | 	mov	arg01, result1
0ddf0     5C 90 B1 FD | 	call	#__system___lockmem
0ddf4     B8 01 00 FF 
0ddf8     0D 15 06 F6 | 	mov	arg02, ##@LR__5863
0ddfc     00 12 06 F6 | 	mov	arg01, #0
0de00     00 16 06 F6 | 	mov	arg03, #0
0de04     3C 9D B1 FD | 	call	#__system___basic_print_string
0de08     00 12 06 F6 | 	mov	arg01, #0
0de0c     68 ED B1 FD | 	call	#__system___getiolock_0611
0de10     FD 00 68 FC | 	wrlong	#0, result1
0de14     27 12 06 F6 | 	mov	arg01, #39
0de18     00 14 06 F6 | 	mov	arg02, #0
0de1c     14 56 B1 FD | 	call	#_printerror
0de20     6C 00 90 FD | 	jmp	#LR__1151
0de24                 | LR__1150
0de24     18 F8 BF FD | 	call	#_pop
0de28     FF 26 02 F6 | 	mov	local01, result3
0de2c     A7 FA 61 FC | 	wrlong	result1, fp
0de30     04 4E 05 F1 | 	add	fp, #4
0de34     A7 FC 61 FC | 	wrlong	result2, fp
0de38     04 4E 05 F1 | 	add	fp, #4
0de3c     A7 26 62 FC | 	wrlong	local01, fp
0de40     08 4E 85 F1 | 	sub	fp, #8
0de44     A7 12 02 F6 | 	mov	arg01, fp
0de48     94 FA BF FD | 	call	#_converttofloat
0de4c     FD 12 02 F6 | 	mov	arg01, result1
0de50     00 C0 1F FF 
0de54     00 14 06 F6 | 	mov	arg02, ##1065353216
0de58     F8 C9 B1 FD | 	call	#__system____builtin_atan2f
0de5c     FD 12 02 F6 | 	mov	arg01, result1
0de60     52 00 00 FF 
0de64     AC E4 05 F1 | 	add	objptr, ##42156
0de68     F2 14 02 FB | 	rdlong	arg02, objptr
0de6c     52 00 00 FF 
0de70     AC E4 85 F1 | 	sub	objptr, ##42156
0de74     50 BE B1 FD | 	call	#__system___float_mul
0de78     A7 FA 61 FC | 	wrlong	result1, fp
0de7c     08 4E 05 F1 | 	add	fp, #8
0de80     A7 3C 68 FC | 	wrlong	#30, fp
0de84     08 4E 85 F1 | 	sub	fp, #8
0de88     A7 12 02 F6 | 	mov	arg01, fp
0de8c     48 F8 BF FD | 	call	#_push
0de90                 | LR__1151
0de90     A7 F0 03 F6 | 	mov	ptra, fp
0de94     B2 00 A0 FD | 	call	#popregs_
0de98                 | _do_atn_ret
0de98     2D 00 64 FD | 	ret
0de9c                 | 
0de9c                 | ' 
0de9c                 | ' '-------------------- beep
0de9c                 | ' 
0de9c                 | ' sub do_beep
0de9c                 | _do_beep
0de9c     02 4A 05 F6 | 	mov	COUNT_, #2
0dea0     A8 00 A0 FD | 	call	#pushregs_
0dea4     20 F0 07 F1 | 	add	ptra, #32
0dea8     94 F7 BF FD | 	call	#_pop
0deac     FD 26 02 F6 | 	mov	local01, result1
0deb0     FE 1C 02 F6 | 	mov	arg06, result2
0deb4     FF 28 02 F6 | 	mov	local02, result3
0deb8     0C 4E 05 F1 | 	add	fp, #12
0debc     A7 26 62 FC | 	wrlong	local01, fp
0dec0     04 4E 05 F1 | 	add	fp, #4
0dec4     A7 1C 62 FC | 	wrlong	arg06, fp
0dec8     04 4E 05 F1 | 	add	fp, #4
0decc     A7 28 62 FC | 	wrlong	local02, fp
0ded0     14 4E 85 F1 | 	sub	fp, #20
0ded4     68 F7 BF FD | 	call	#_pop
0ded8     A7 FA 61 FC | 	wrlong	result1, fp
0dedc     04 4E 05 F1 | 	add	fp, #4
0dee0     A7 FC 61 FC | 	wrlong	result2, fp
0dee4     04 4E 05 F1 | 	add	fp, #4
0dee8     A7 FE 61 FC | 	wrlong	result3, fp
0deec                 | ' 
0deec                 | ' t2=pop()
0deec                 | ' t1=pop()
0deec                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
0deec     08 4E 85 F1 | 	sub	fp, #8
0def0     1C FE 0D F2 | 	cmp	result3, #28 wz
0def4     08 4E 05 51 |  if_ne	add	fp, #8
0def8     A7 28 02 5B |  if_ne	rdlong	local02, fp
0defc     08 4E 85 51 |  if_ne	sub	fp, #8
0df00     1D 28 0E 52 |  if_ne	cmp	local02, #29 wz
0df04     A7 26 02 AB |  if_e	rdlong	local01, fp
0df08     18 4E 05 A1 |  if_e	add	fp, #24
0df0c     A7 26 62 AC |  if_e	wrlong	local01, fp
0df10     18 4E 85 A1 |  if_e	sub	fp, #24
0df14     14 00 90 AD |  if_e	jmp	#LR__1160
0df18     A7 12 02 F6 | 	mov	arg01, fp
0df1c     04 F9 BF FD | 	call	#_converttoint
0df20     18 4E 05 F1 | 	add	fp, #24
0df24     A7 FA 61 FC | 	wrlong	result1, fp
0df28     18 4E 85 F1 | 	sub	fp, #24
0df2c                 | LR__1160
0df2c     1C 4E 05 F1 | 	add	fp, #28
0df30     A7 FE 48 FC | 	wrbyte	#127, fp
0df34     01 4E 05 F1 | 	add	fp, #1
0df38     A7 00 49 FC | 	wrbyte	#128, fp
0df3c     01 4E 85 F1 | 	sub	fp, #1
0df40     A7 14 02 F6 | 	mov	arg02, fp
0df44     04 4E 85 F1 | 	sub	fp, #4
0df48     A7 16 02 FB | 	rdlong	arg03, fp
0df4c     18 4E 85 F1 | 	sub	fp, #24
0df50     01 16 66 F0 | 	shl	arg03, #1
0df54     07 12 06 F6 | 	mov	arg01, #7
0df58     0E 18 C6 F9 | 	decod	arg04, #14
0df5c     02 1A 06 F6 | 	mov	arg05, #2
0df60     00 1C 06 F6 | 	mov	arg06, #0
0df64     0B 00 00 FF 
0df68     CC E4 05 F1 | 	add	objptr, ##5836
0df6c     3C 8B B1 FD | 	call	#_audio096_spin2_play8
0df70     0B 00 00 FF 
0df74     CC E4 85 F1 | 	sub	objptr, ##5836
0df78     0C 4E 05 F1 | 	add	fp, #12
0df7c     A7 12 02 F6 | 	mov	arg01, fp
0df80     0C 4E 85 F1 | 	sub	fp, #12
0df84     50 F7 BF FD | 	call	#_push
0df88     BC E9 B0 FD | 	call	#_do_waitms
0df8c     07 12 06 F6 | 	mov	arg01, #7
0df90     0B 00 00 FF 
0df94     CC E4 05 F1 | 	add	objptr, ##5836
0df98     B4 8B B1 FD | 	call	#_audio096_spin2_stop
0df9c     0B 00 00 FF 
0dfa0     CC E4 85 F1 | 	sub	objptr, ##5836
0dfa4     A7 F0 03 F6 | 	mov	ptra, fp
0dfa8     B2 00 A0 FD | 	call	#popregs_
0dfac                 | _do_beep_ret
0dfac     2D 00 64 FD | 	ret
0dfb0                 | 
0dfb0                 | ' 
0dfb0                 | ' '-------------------- blit
0dfb0                 | ' 
0dfb0                 | ' ' blit buf1,x1,y1,x2,y2,s1,buf2,x2,y2,s2
0dfb0                 | ' sub do_blit
0dfb0                 | _do_blit
0dfb0     02 4A 05 F6 | 	mov	COUNT_, #2
0dfb4     A8 00 A0 FD | 	call	#pushregs_
0dfb8     3C F0 07 F1 | 	add	ptra, #60
0dfbc     4A 00 00 FF 
0dfc0     80 E4 05 F1 | 	add	objptr, ##38016
0dfc4     F2 26 02 FB | 	rdlong	local01, objptr
0dfc8     13 25 02 F6 | 	mov	arg10, local01
0dfcc     01 24 66 F0 | 	shl	arg10, #1
0dfd0     13 25 02 F1 | 	add	arg10, local01
0dfd4     02 24 66 F0 | 	shl	arg10, #2
0dfd8     03 00 00 FF 
0dfdc     04 E4 85 F1 | 	sub	objptr, ##1540
0dfe0     F2 24 02 F1 | 	add	arg10, objptr
0dfe4     12 25 02 FB | 	rdlong	arg10, arg10
0dfe8     38 4E 05 F1 | 	add	fp, #56
0dfec     A7 24 62 FC | 	wrlong	arg10, fp
0dff0                 | ' 
0dff0                 | ' numpar=compiledline(lineptr_e).result.uresult
0dff0                 | ' if numpar<>10 andalso numpar<>6 then print "blit: "; : printerror (39,runheader(0)) : return
0dff0     38 4E 85 F1 | 	sub	fp, #56
0dff4     0A 24 0E F2 | 	cmp	arg10, #10 wz
0dff8     47 00 00 FF 
0dffc     7C E4 85 F1 | 	sub	objptr, ##36476
0e000     38 4E 05 51 |  if_ne	add	fp, #56
0e004     A7 26 02 5B |  if_ne	rdlong	local01, fp
0e008     38 4E 85 51 |  if_ne	sub	fp, #56
0e00c     06 26 0E 52 |  if_ne	cmp	local01, #6 wz
0e010     50 00 90 AD |  if_e	jmp	#LR__1170
0e014     00 12 06 F6 | 	mov	arg01, #0
0e018     5C EB B1 FD | 	call	#__system___getiolock_0611
0e01c     FD 12 02 F6 | 	mov	arg01, result1
0e020     2C 8E B1 FD | 	call	#__system___lockmem
0e024     B8 01 00 FF 
0e028     13 15 06 F6 | 	mov	arg02, ##@LR__5864
0e02c     00 12 06 F6 | 	mov	arg01, #0
0e030     00 16 06 F6 | 	mov	arg03, #0
0e034     0C 9B B1 FD | 	call	#__system___basic_print_string
0e038     00 12 06 F6 | 	mov	arg01, #0
0e03c     38 EB B1 FD | 	call	#__system___getiolock_0611
0e040     FD 00 68 FC | 	wrlong	#0, result1
0e044     50 00 00 FF 
0e048     F0 E4 05 F1 | 	add	objptr, ##41200
0e04c     F2 14 02 FB | 	rdlong	arg02, objptr
0e050     50 00 00 FF 
0e054     F0 E4 85 F1 | 	sub	objptr, ##41200
0e058     27 12 06 F6 | 	mov	arg01, #39
0e05c     D4 53 B1 FD | 	call	#_printerror
0e060     44 01 90 FD | 	jmp	#LR__1175
0e064                 | LR__1170
0e064                 | ' for i=numpar-1 to 0 step -1: t1=pop() : p(i)=converttoint(t1): next i
0e064     38 4E 05 F1 | 	add	fp, #56
0e068     A7 28 02 FB | 	rdlong	local02, fp
0e06c     01 28 86 F1 | 	sub	local02, #1
0e070     04 4E 85 F1 | 	sub	fp, #4
0e074     A7 28 62 FC | 	wrlong	local02, fp
0e078     34 4E 85 F1 | 	sub	fp, #52
0e07c                 | LR__1171
0e07c     38 4E 05 F1 | 	add	fp, #56
0e080     A7 26 02 FB | 	rdlong	local01, fp
0e084     01 26 86 F1 | 	sub	local01, #1
0e088     04 4E 85 F1 | 	sub	fp, #4
0e08c     A7 24 02 FB | 	rdlong	arg10, fp
0e090     34 4E 85 F1 | 	sub	fp, #52
0e094     13 25 1A F2 | 	cmp	arg10, local01 wcz
0e098     54 00 90 1D |  if_a	jmp	#LR__1172
0e09c     A0 F5 BF FD | 	call	#_pop
0e0a0     A7 FA 61 FC | 	wrlong	result1, fp
0e0a4     04 4E 05 F1 | 	add	fp, #4
0e0a8     A7 FC 61 FC | 	wrlong	result2, fp
0e0ac     04 4E 05 F1 | 	add	fp, #4
0e0b0     A7 FE 61 FC | 	wrlong	result3, fp
0e0b4     2C 4E 05 F1 | 	add	fp, #44
0e0b8     A7 28 02 FB | 	rdlong	local02, fp
0e0bc     02 28 66 F0 | 	shl	local02, #2
0e0c0     28 4E 85 F1 | 	sub	fp, #40
0e0c4     A7 28 02 F1 | 	add	local02, fp
0e0c8     0C 4E 85 F1 | 	sub	fp, #12
0e0cc     A7 12 02 F6 | 	mov	arg01, fp
0e0d0     50 F7 BF FD | 	call	#_converttoint
0e0d4     14 FB 61 FC | 	wrlong	result1, local02
0e0d8     34 4E 05 F1 | 	add	fp, #52
0e0dc     A7 28 02 FB | 	rdlong	local02, fp
0e0e0     01 28 86 F1 | 	sub	local02, #1
0e0e4     A7 28 62 FC | 	wrlong	local02, fp
0e0e8     34 4E 85 F1 | 	sub	fp, #52
0e0ec     8C FF 9F FD | 	jmp	#LR__1171
0e0f0                 | LR__1172
0e0f0                 | ' if numpar=10 then 
0e0f0     38 4E 05 F1 | 	add	fp, #56
0e0f4     A7 28 02 FB | 	rdlong	local02, fp
0e0f8     38 4E 85 F1 | 	sub	fp, #56
0e0fc     0A 28 0E F2 | 	cmp	local02, #10 wz
0e100     5C 00 90 5D |  if_ne	jmp	#LR__1173
0e104     0C 4E 05 F1 | 	add	fp, #12
0e108     A7 12 02 FB | 	rdlong	arg01, fp
0e10c     04 4E 05 F1 | 	add	fp, #4
0e110     A7 14 02 FB | 	rdlong	arg02, fp
0e114     04 4E 05 F1 | 	add	fp, #4
0e118     A7 16 02 FB | 	rdlong	arg03, fp
0e11c     04 4E 05 F1 | 	add	fp, #4
0e120     A7 18 02 FB | 	rdlong	arg04, fp
0e124     04 4E 05 F1 | 	add	fp, #4
0e128     A7 1A 02 FB | 	rdlong	arg05, fp
0e12c     04 4E 05 F1 | 	add	fp, #4
0e130     A7 1C 02 FB | 	rdlong	arg06, fp
0e134     04 4E 05 F1 | 	add	fp, #4
0e138     A7 1E 02 FB | 	rdlong	arg07, fp
0e13c     04 4E 05 F1 | 	add	fp, #4
0e140     A7 20 02 FB | 	rdlong	arg08, fp
0e144     04 4E 05 F1 | 	add	fp, #4
0e148     A7 22 02 FB | 	rdlong	arg09, fp
0e14c     04 4E 05 F1 | 	add	fp, #4
0e150     A7 24 02 FB | 	rdlong	arg10, fp
0e154     30 4E 85 F1 | 	sub	fp, #48
0e158     E0 7A B1 FD | 	call	#_hg010b_spin2_blit
0e15c     48 00 90 FD | 	jmp	#LR__1174
0e160                 | LR__1173
0e160     F2 1E 02 FB | 	rdlong	arg07, objptr
0e164     0C 4E 05 F1 | 	add	fp, #12
0e168     A7 14 02 FB | 	rdlong	arg02, fp
0e16c     04 4E 05 F1 | 	add	fp, #4
0e170     A7 16 02 FB | 	rdlong	arg03, fp
0e174     04 4E 05 F1 | 	add	fp, #4
0e178     A7 18 02 FB | 	rdlong	arg04, fp
0e17c     04 4E 05 F1 | 	add	fp, #4
0e180     A7 1A 02 FB | 	rdlong	arg05, fp
0e184     04 4E 05 F1 | 	add	fp, #4
0e188     A7 20 02 FB | 	rdlong	arg08, fp
0e18c     04 4E 05 F1 | 	add	fp, #4
0e190     A7 22 02 FB | 	rdlong	arg09, fp
0e194     20 4E 85 F1 | 	sub	fp, #32
0e198     0F 13 02 F6 | 	mov	arg01, arg07
0e19c     0A 1C C6 F9 | 	decod	arg06, #10
0e1a0     0A 24 C6 F9 | 	decod	arg10, #10
0e1a4     94 7A B1 FD | 	call	#_hg010b_spin2_blit
0e1a8                 | LR__1174
0e1a8                 | LR__1175
0e1a8     A7 F0 03 F6 | 	mov	ptra, fp
0e1ac     B2 00 A0 FD | 	call	#popregs_
0e1b0                 | _do_blit_ret
0e1b0     2D 00 64 FD | 	ret
0e1b4                 | 
0e1b4                 | ' 
0e1b4                 | ' 
0e1b4                 | ' '-------------------- bin$
0e1b4                 | ' 
0e1b4                 | ' sub do_bin
0e1b4                 | _do_bin
0e1b4     01 4A 05 F6 | 	mov	COUNT_, #1
0e1b8     A8 00 A0 FD | 	call	#pushregs_
0e1bc     18 F0 07 F1 | 	add	ptra, #24
0e1c0     4A 00 00 FF 
0e1c4     80 E4 05 F1 | 	add	objptr, ##38016
0e1c8     F2 26 02 FB | 	rdlong	local01, objptr
0e1cc     13 17 02 F6 | 	mov	arg03, local01
0e1d0     01 16 66 F0 | 	shl	arg03, #1
0e1d4     13 17 02 F1 | 	add	arg03, local01
0e1d8     02 16 66 F0 | 	shl	arg03, #2
0e1dc     03 00 00 FF 
0e1e0     04 E4 85 F1 | 	sub	objptr, ##1540
0e1e4     F2 16 02 F1 | 	add	arg03, objptr
0e1e8     0B 17 02 FB | 	rdlong	arg03, arg03
0e1ec     0C 4E 05 F1 | 	add	fp, #12
0e1f0     A7 16 62 FC | 	wrlong	arg03, fp
0e1f4                 | ' 
0e1f4                 | ' numpar=compiledline(lineptr_e).result.uresult
0e1f4                 | ' if numpar>2 orelse numpar=0 then print "bin$: "; : printerror(39) : return
0e1f4     0C 4E 85 F1 | 	sub	fp, #12
0e1f8     03 16 16 F2 | 	cmp	arg03, #3 wc
0e1fc     47 00 00 FF 
0e200     7C E4 85 F1 | 	sub	objptr, ##36476
0e204     0C 4E 05 C1 |  if_b	add	fp, #12
0e208     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0e20c     0C 4E 85 C1 |  if_b	sub	fp, #12
0e210     40 00 90 4D |  if_c_and_nz	jmp	#LR__1180
0e214     00 12 06 F6 | 	mov	arg01, #0
0e218     5C E9 B1 FD | 	call	#__system___getiolock_0611
0e21c     FD 12 02 F6 | 	mov	arg01, result1
0e220     2C 8C B1 FD | 	call	#__system___lockmem
0e224     B8 01 00 FF 
0e228     1A 15 06 F6 | 	mov	arg02, ##@LR__5865
0e22c     00 12 06 F6 | 	mov	arg01, #0
0e230     00 16 06 F6 | 	mov	arg03, #0
0e234     0C 99 B1 FD | 	call	#__system___basic_print_string
0e238     00 12 06 F6 | 	mov	arg01, #0
0e23c     38 E9 B1 FD | 	call	#__system___getiolock_0611
0e240     FD 00 68 FC | 	wrlong	#0, result1
0e244     27 12 06 F6 | 	mov	arg01, #39
0e248     00 14 06 F6 | 	mov	arg02, #0
0e24c     E4 51 B1 FD | 	call	#_printerror
0e250     B8 00 90 FD | 	jmp	#LR__1183
0e254                 | LR__1180
0e254                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=0
0e254     0C 4E 05 F1 | 	add	fp, #12
0e258     A7 26 02 FB | 	rdlong	local01, fp
0e25c     0C 4E 85 F1 | 	sub	fp, #12
0e260     02 26 0E F2 | 	cmp	local01, #2 wz
0e264     38 00 90 5D |  if_ne	jmp	#LR__1181
0e268     D4 F3 BF FD | 	call	#_pop
0e26c     FF 26 02 F6 | 	mov	local01, result3
0e270     A7 FA 61 FC | 	wrlong	result1, fp
0e274     04 4E 05 F1 | 	add	fp, #4
0e278     A7 FC 61 FC | 	wrlong	result2, fp
0e27c     04 4E 05 F1 | 	add	fp, #4
0e280     A7 26 62 FC | 	wrlong	local01, fp
0e284     08 4E 85 F1 | 	sub	fp, #8
0e288     A7 12 02 F6 | 	mov	arg01, fp
0e28c     94 F5 BF FD | 	call	#_converttoint
0e290     14 4E 05 F1 | 	add	fp, #20
0e294     A7 FA 61 FC | 	wrlong	result1, fp
0e298     14 4E 85 F1 | 	sub	fp, #20
0e29c     0C 00 90 FD | 	jmp	#LR__1182
0e2a0                 | LR__1181
0e2a0     14 4E 05 F1 | 	add	fp, #20
0e2a4     A7 00 68 FC | 	wrlong	#0, fp
0e2a8     14 4E 85 F1 | 	sub	fp, #20
0e2ac                 | LR__1182
0e2ac     90 F3 BF FD | 	call	#_pop
0e2b0     FF 26 02 F6 | 	mov	local01, result3
0e2b4     A7 FA 61 FC | 	wrlong	result1, fp
0e2b8     04 4E 05 F1 | 	add	fp, #4
0e2bc     A7 FC 61 FC | 	wrlong	result2, fp
0e2c0     04 4E 05 F1 | 	add	fp, #4
0e2c4     A7 26 62 FC | 	wrlong	local01, fp
0e2c8     08 4E 85 F1 | 	sub	fp, #8
0e2cc     A7 12 02 F6 | 	mov	arg01, fp
0e2d0     50 F5 BF FD | 	call	#_converttoint
0e2d4     10 4E 05 F1 | 	add	fp, #16
0e2d8     A7 FA 61 FC | 	wrlong	result1, fp
0e2dc     FD 12 02 F6 | 	mov	arg01, result1
0e2e0     04 4E 05 F1 | 	add	fp, #4
0e2e4     A7 14 02 FB | 	rdlong	arg02, fp
0e2e8     14 4E 85 F1 | 	sub	fp, #20
0e2ec     02 16 06 F6 | 	mov	arg03, #2
0e2f0     2C AE B1 FD | 	call	#__system__Number_S
0e2f4     A7 FA 61 FC | 	wrlong	result1, fp
0e2f8     08 4E 05 F1 | 	add	fp, #8
0e2fc     A7 3E 68 FC | 	wrlong	#31, fp
0e300     08 4E 85 F1 | 	sub	fp, #8
0e304     A7 12 02 F6 | 	mov	arg01, fp
0e308     CC F3 BF FD | 	call	#_push
0e30c                 | LR__1183
0e30c     A7 F0 03 F6 | 	mov	ptra, fp
0e310     B2 00 A0 FD | 	call	#popregs_
0e314                 | _do_bin_ret
0e314     2D 00 64 FD | 	ret
0e318                 | 
0e318                 | ' 
0e318                 | ' '-------------------- box
0e318                 | ' 
0e318                 | ' sub do_box
0e318                 | _do_box
0e318     03 4A 05 F6 | 	mov	COUNT_, #3
0e31c     A8 00 A0 FD | 	call	#pushregs_
0e320     30 F0 07 F1 | 	add	ptra, #48
0e324     18 F3 BF FD | 	call	#_pop
0e328     FD 1A 02 F6 | 	mov	arg05, result1
0e32c     FE 18 02 F6 | 	mov	arg04, result2
0e330     FF 16 02 F6 | 	mov	arg03, result3
0e334     24 4E 05 F1 | 	add	fp, #36
0e338     A7 1A 62 FC | 	wrlong	arg05, fp
0e33c     04 4E 05 F1 | 	add	fp, #4
0e340     A7 18 62 FC | 	wrlong	arg04, fp
0e344     04 4E 05 F1 | 	add	fp, #4
0e348     A7 16 62 FC | 	wrlong	arg03, fp
0e34c     2C 4E 85 F1 | 	sub	fp, #44
0e350     EC F2 BF FD | 	call	#_pop
0e354     FD 1A 02 F6 | 	mov	arg05, result1
0e358     FE 18 02 F6 | 	mov	arg04, result2
0e35c     FF 16 02 F6 | 	mov	arg03, result3
0e360     18 4E 05 F1 | 	add	fp, #24
0e364     A7 1A 62 FC | 	wrlong	arg05, fp
0e368     04 4E 05 F1 | 	add	fp, #4
0e36c     A7 18 62 FC | 	wrlong	arg04, fp
0e370     04 4E 05 F1 | 	add	fp, #4
0e374     A7 16 62 FC | 	wrlong	arg03, fp
0e378     20 4E 85 F1 | 	sub	fp, #32
0e37c     C0 F2 BF FD | 	call	#_pop
0e380     FD 1A 02 F6 | 	mov	arg05, result1
0e384     FE 18 02 F6 | 	mov	arg04, result2
0e388     FF 26 02 F6 | 	mov	local01, result3
0e38c     0C 4E 05 F1 | 	add	fp, #12
0e390     A7 1A 62 FC | 	wrlong	arg05, fp
0e394     04 4E 05 F1 | 	add	fp, #4
0e398     A7 18 62 FC | 	wrlong	arg04, fp
0e39c     04 4E 05 F1 | 	add	fp, #4
0e3a0     A7 26 62 FC | 	wrlong	local01, fp
0e3a4     14 4E 85 F1 | 	sub	fp, #20
0e3a8     94 F2 BF FD | 	call	#_pop
0e3ac     A7 FA 61 FC | 	wrlong	result1, fp
0e3b0     04 4E 05 F1 | 	add	fp, #4
0e3b4     A7 FC 61 FC | 	wrlong	result2, fp
0e3b8     04 4E 05 F1 | 	add	fp, #4
0e3bc     A7 FE 61 FC | 	wrlong	result3, fp
0e3c0                 | ' 
0e3c0                 | ' t4=pop()
0e3c0                 | ' t3=pop()
0e3c0                 | ' t2=pop()
0e3c0                 | ' t1=pop()
0e3c0                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
0e3c0     FF 1A 02 F6 | 	mov	arg05, result3
0e3c4     08 4E 85 F1 | 	sub	fp, #8
0e3c8     1C 1A 0E F2 | 	cmp	arg05, #28 wz
0e3cc     08 4E 05 51 |  if_ne	add	fp, #8
0e3d0     A7 26 02 5B |  if_ne	rdlong	local01, fp
0e3d4     08 4E 85 51 |  if_ne	sub	fp, #8
0e3d8     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
0e3dc     A8 00 90 5D |  if_ne	jmp	#LR__1190
0e3e0     14 4E 05 F1 | 	add	fp, #20
0e3e4     A7 26 02 FB | 	rdlong	local01, fp
0e3e8     14 4E 85 F1 | 	sub	fp, #20
0e3ec     1C 26 0E F2 | 	cmp	local01, #28 wz
0e3f0     14 4E 05 51 |  if_ne	add	fp, #20
0e3f4     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0e3f8     14 4E 85 51 |  if_ne	sub	fp, #20
0e3fc     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e400     84 00 90 5D |  if_ne	jmp	#LR__1190
0e404     20 4E 05 F1 | 	add	fp, #32
0e408     A7 26 02 FB | 	rdlong	local01, fp
0e40c     20 4E 85 F1 | 	sub	fp, #32
0e410     1C 26 0E F2 | 	cmp	local01, #28 wz
0e414     20 4E 05 51 |  if_ne	add	fp, #32
0e418     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0e41c     20 4E 85 51 |  if_ne	sub	fp, #32
0e420     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e424     60 00 90 5D |  if_ne	jmp	#LR__1190
0e428     2C 4E 05 F1 | 	add	fp, #44
0e42c     A7 26 02 FB | 	rdlong	local01, fp
0e430     2C 4E 85 F1 | 	sub	fp, #44
0e434     1C 26 0E F2 | 	cmp	local01, #28 wz
0e438     2C 4E 05 51 |  if_ne	add	fp, #44
0e43c     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0e440     2C 4E 85 51 |  if_ne	sub	fp, #44
0e444     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e448     3C 00 90 5D |  if_ne	jmp	#LR__1190
0e44c     A7 12 02 FB | 	rdlong	arg01, fp
0e450     0C 4E 05 F1 | 	add	fp, #12
0e454     A7 14 02 FB | 	rdlong	arg02, fp
0e458     0C 4E 05 F1 | 	add	fp, #12
0e45c     A7 16 02 FB | 	rdlong	arg03, fp
0e460     0C 4E 05 F1 | 	add	fp, #12
0e464     A7 18 02 FB | 	rdlong	arg04, fp
0e468     24 4E 85 F1 | 	sub	fp, #36
0e46c     37 00 00 FF 
0e470     28 E4 05 F1 | 	add	objptr, ##28200
0e474     F2 1A 02 FB | 	rdlong	arg05, objptr
0e478     37 00 00 FF 
0e47c     28 E4 85 F1 | 	sub	objptr, ##28200
0e480     50 6A B1 FD | 	call	#_hg010b_spin2_box
0e484                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
0e484     6C 00 90 FD | 	jmp	#LR__1191
0e488                 | LR__1190
0e488     A7 12 02 F6 | 	mov	arg01, fp
0e48c     94 F3 BF FD | 	call	#_converttoint
0e490     FD 28 02 F6 | 	mov	local02, result1
0e494     0C 4E 05 F1 | 	add	fp, #12
0e498     A7 12 02 F6 | 	mov	arg01, fp
0e49c     0C 4E 85 F1 | 	sub	fp, #12
0e4a0     80 F3 BF FD | 	call	#_converttoint
0e4a4     FD 2A 02 F6 | 	mov	local03, result1
0e4a8     18 4E 05 F1 | 	add	fp, #24
0e4ac     A7 12 02 F6 | 	mov	arg01, fp
0e4b0     18 4E 85 F1 | 	sub	fp, #24
0e4b4     6C F3 BF FD | 	call	#_converttoint
0e4b8     FD 26 02 F6 | 	mov	local01, result1
0e4bc     24 4E 05 F1 | 	add	fp, #36
0e4c0     A7 12 02 F6 | 	mov	arg01, fp
0e4c4     24 4E 85 F1 | 	sub	fp, #36
0e4c8     58 F3 BF FD | 	call	#_converttoint
0e4cc     FD 18 02 F6 | 	mov	arg04, result1
0e4d0     37 00 00 FF 
0e4d4     28 E4 05 F1 | 	add	objptr, ##28200
0e4d8     F2 1A 02 FB | 	rdlong	arg05, objptr
0e4dc     37 00 00 FF 
0e4e0     28 E4 85 F1 | 	sub	objptr, ##28200
0e4e4     14 13 02 F6 | 	mov	arg01, local02
0e4e8     15 15 02 F6 | 	mov	arg02, local03
0e4ec     13 17 02 F6 | 	mov	arg03, local01
0e4f0     E0 69 B1 FD | 	call	#_hg010b_spin2_box
0e4f4                 | LR__1191
0e4f4     A7 F0 03 F6 | 	mov	ptra, fp
0e4f8     B2 00 A0 FD | 	call	#popregs_
0e4fc                 | _do_box_ret
0e4fc     2D 00 64 FD | 	ret
0e500                 | 
0e500                 | ' 
0e500                 | ' '-------------------- brun
0e500                 | ' 
0e500                 | ' sub do_brun
0e500                 | _do_brun
0e500     08 4A 05 F6 | 	mov	COUNT_, #8
0e504     A8 00 A0 FD | 	call	#pushregs_
0e508     34 F1 BF FD | 	call	#_pop
0e50c     FE 1A 02 F6 | 	mov	arg05, result2
0e510     FF 18 02 F6 | 	mov	arg04, result3
0e514     FD 26 02 F6 | 	mov	local01, result1
0e518     0D 29 02 F6 | 	mov	local02, arg05
0e51c     0C 2B 02 F6 | 	mov	local03, arg04
0e520                 | ' 
0e520                 | ' t1=pop() 
0e520                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
0e520     2B 2A 0E F2 | 	cmp	local03, #43 wz
0e524     10 00 90 5D |  if_ne	jmp	#LR__1200
0e528     13 13 02 F6 | 	mov	arg01, local01
0e52c     88 F2 BF FD | 	call	#_convertstring
0e530     FD 26 02 F6 | 	mov	local01, result1
0e534     1F 2A 06 F6 | 	mov	local03, #31
0e538                 | LR__1200
0e538                 | ' if t1.result_type=result_string then
0e538     1F 2A 0E F2 | 	cmp	local03, #31 wz
0e53c     EC 01 90 5D |  if_ne	jmp	#LR__1204
0e540     13 2D 02 F6 | 	mov	local04, local01
0e544                 | '   filename=t1.result.sresult
0e544                 | '   if left$(filename,1)="/" then 
0e544     16 13 02 F6 | 	mov	arg01, local04
0e548     01 14 06 F6 | 	mov	arg02, #1
0e54c     7C A9 B1 FD | 	call	#__system__Left_S
0e550     FD 12 02 F6 | 	mov	arg01, result1
0e554     B8 01 00 FF 
0e558     21 15 06 F6 | 	mov	arg02, ##@LR__5866
0e55c     18 89 B1 FD | 	call	#__system___string_cmp
0e560     00 FA 0D F2 | 	cmp	result1, #0 wz
0e564     16 2F 02 A6 |  if_e	mov	local05, local04
0e568     14 00 90 AD |  if_e	jmp	#LR__1201
0e56c     B8 01 00 FF 
0e570     23 13 06 F6 | 	mov	arg01, ##@LR__5867
0e574     16 15 02 F6 | 	mov	arg02, local04
0e578     30 89 B1 FD | 	call	#__system___string_concat
0e57c     FD 2E 02 F6 | 	mov	local05, result1
0e580                 | LR__1201
0e580                 | '   open fullfilename for input as #9
0e580     09 12 06 F6 | 	mov	arg01, #9
0e584     17 15 02 F6 | 	mov	arg02, local05
0e588     00 16 06 F6 | 	mov	arg03, #0
0e58c     C4 94 B1 FD | 	call	#__system___basic_open_string
0e590     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0e594     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0e598     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0e59c     FD 30 0A F6 | 	mov	local06, result1 wz
0e5a0                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
0e5a0     8C 00 90 AD |  if_e	jmp	#LR__1202
0e5a4     00 12 06 F6 | 	mov	arg01, #0
0e5a8     CC E5 B1 FD | 	call	#__system___getiolock_0611
0e5ac     FD 12 02 F6 | 	mov	arg01, result1
0e5b0     9C 88 B1 FD | 	call	#__system___lockmem
0e5b4     B8 01 00 FF 
0e5b8     2C 15 06 F6 | 	mov	arg02, ##@LR__5868
0e5bc     00 12 06 F6 | 	mov	arg01, #0
0e5c0     00 16 06 F6 | 	mov	arg03, #0
0e5c4     7C 95 B1 FD | 	call	#__system___basic_print_string
0e5c8     00 12 06 F6 | 	mov	arg01, #0
0e5cc     18 15 02 F6 | 	mov	arg02, local06
0e5d0     00 16 06 F6 | 	mov	arg03, #0
0e5d4     0A 18 06 F6 | 	mov	arg04, #10
0e5d8     AC 95 B1 FD | 	call	#__system___basic_print_integer
0e5dc     B8 01 00 FF 
0e5e0     3A 15 06 F6 | 	mov	arg02, ##@LR__5869
0e5e4     00 12 06 F6 | 	mov	arg01, #0
0e5e8     00 16 06 F6 | 	mov	arg03, #0
0e5ec     54 95 B1 FD | 	call	#__system___basic_print_string
0e5f0     18 13 02 F6 | 	mov	arg01, local06
0e5f4     E4 B1 B1 FD | 	call	#__system___strerror
0e5f8     FD 14 02 F6 | 	mov	arg02, result1
0e5fc     00 12 06 F6 | 	mov	arg01, #0
0e600     00 16 06 F6 | 	mov	arg03, #0
0e604     3C 95 B1 FD | 	call	#__system___basic_print_string
0e608     00 12 06 F6 | 	mov	arg01, #0
0e60c     0A 14 06 F6 | 	mov	arg02, #10
0e610     00 16 06 F6 | 	mov	arg03, #0
0e614     D4 94 B1 FD | 	call	#__system___basic_print_char
0e618     00 12 06 F6 | 	mov	arg01, #0
0e61c     58 E5 B1 FD | 	call	#__system___getiolock_0611
0e620     FD 00 68 FC | 	wrlong	#0, result1
0e624     09 12 06 F6 | 	mov	arg01, #9
0e628     7C DB B1 FD | 	call	#__system__close
0e62c     FC 00 90 FD | 	jmp	#LR__1205
0e630                 | LR__1202
0e630     01 32 06 F6 | 	mov	local07, #1
0e634     00 34 06 F6 | 	mov	local08, #0
0e638                 | '   do
0e638                 | LR__1203
0e638                 | '     get #9,pos,block(0),1024,r : pos+=r	
0e638     4E 00 00 FF 
0e63c     B4 E4 05 F1 | 	add	objptr, ##40116
0e640     F2 16 02 F6 | 	mov	arg03, objptr
0e644     4E 00 00 FF 
0e648     B4 E4 85 F1 | 	sub	objptr, ##40116
0e64c     09 12 06 F6 | 	mov	arg01, #9
0e650     19 15 02 F6 | 	mov	arg02, local07
0e654     0A 18 C6 F9 | 	decod	arg04, #10
0e658     01 1A 06 F6 | 	mov	arg05, #1
0e65c     60 96 B1 FD | 	call	#__system___basic_get
0e660     FD 30 02 F6 | 	mov	local06, result1
0e664     FD 32 02 F1 | 	add	local07, result1
0e668     4E 00 00 FF 
0e66c     B4 E4 05 F1 | 	add	objptr, ##40116
0e670     F2 12 02 F6 | 	mov	arg01, objptr
0e674     1A 15 02 F6 | 	mov	arg02, local08
0e678     0A 16 C6 F9 | 	decod	arg03, #10
0e67c     42 00 00 FF 
0e680     E8 E5 85 F1 | 	sub	objptr, ##34280
0e684     DC 7B B1 FD | 	call	#_psram_spin2_write
0e688     0B 00 00 FF 
0e68c     CC E4 85 F1 | 	sub	objptr, ##5836
0e690     18 35 02 F1 | 	add	local08, local06
0e694     02 00 00 FF 
0e698     00 30 0E F2 | 	cmp	local06, ##1024 wz
0e69c     E0 03 00 AF 
0e6a0     00 34 56 A2 |  if_e	cmps	local08, ##507904 wc
0e6a4     90 FF 9F 8D |  if_c_and_z	jmp	#LR__1203
0e6a8     36 00 00 FF 
0e6ac     FC E5 05 F1 | 	add	objptr, ##28156
0e6b0     F2 12 02 FB | 	rdlong	arg01, objptr
0e6b4     03 12 62 FD | 	cogstop	arg01
0e6b8     04 E4 05 F1 | 	add	objptr, #4
0e6bc     F2 12 02 FB | 	rdlong	arg01, objptr
0e6c0     03 12 62 FD | 	cogstop	arg01
0e6c4     04 E4 05 F1 | 	add	objptr, #4
0e6c8     F2 12 02 FB | 	rdlong	arg01, objptr
0e6cc     03 12 62 FD | 	cogstop	arg01
0e6d0     19 00 00 FF 
0e6d4     3C E5 05 F1 | 	add	objptr, ##13116
0e6d8     F2 12 02 FB | 	rdlong	arg01, objptr
0e6dc     03 12 62 FD | 	cogstop	arg01
0e6e0     18 00 00 FF 
0e6e4     CC EA 05 F1 | 	add	ptr__dat__, ##12492
0e6e8     F5 14 02 F6 | 	mov	arg02, ptr__dat__
0e6ec     18 00 00 FF 
0e6f0     CC EA 85 F1 | 	sub	ptr__dat__, ##12492
0e6f4     19 00 00 FF 
0e6f8     34 E5 85 F1 | 	sub	objptr, ##13108
0e6fc     1E 34 06 F6 | 	mov	local08, #30
0e700     28 E4 61 FD | 	setq	objptr
0e704     0A 35 F2 FC | 	coginit	local08, arg02 wc
0e708     01 34 66 C6 |  if_b	neg	local08, #1
0e70c     1B 00 00 FF 
0e710     0C E5 05 F1 | 	add	objptr, ##14092
0e714     F2 34 62 FC | 	wrlong	local08, objptr
0e718     52 00 00 FF 
0e71c     18 E5 85 F1 | 	sub	objptr, ##42264
0e720     00 12 06 F6 | 	mov	arg01, #0
0e724     01 12 62 FD | 	cogid	arg01
0e728     03 12 62 FD | 	cogstop	arg01
0e72c                 | LR__1204
0e72c                 | LR__1205
0e72c     A7 F0 03 F6 | 	mov	ptra, fp
0e730     B2 00 A0 FD | 	call	#popregs_
0e734                 | _do_brun_ret
0e734     2D 00 64 FD | 	ret
0e738                 | 
0e738                 | ' 
0e738                 | ' '-------------------- cd
0e738                 | ' 
0e738                 | ' sub do_cd
0e738                 | _do_cd
0e738     06 4A 05 F6 | 	mov	COUNT_, #6
0e73c     A8 00 A0 FD | 	call	#pushregs_
0e740     B8 01 00 FF 
0e744     3D 13 06 F6 | 	mov	arg01, ##@LR__5870
0e748     31 14 06 F6 | 	mov	arg02, #49
0e74c     60 E5 B1 FD | 	call	#__system___basic_dir
0e750     EC EE BF FD | 	call	#_pop
0e754     FE 18 02 F6 | 	mov	arg04, result2
0e758     FF 16 02 F6 | 	mov	arg03, result3
0e75c     FD 26 02 F6 | 	mov	local01, result1
0e760     0C 29 02 F6 | 	mov	local02, arg04
0e764     0B 2B 02 F6 | 	mov	local03, arg03
0e768                 | ' t1=pop()
0e768                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0e768     2B 2A 0E F2 | 	cmp	local03, #43 wz
0e76c     10 00 90 5D |  if_ne	jmp	#LR__1210
0e770     13 13 02 F6 | 	mov	arg01, local01
0e774     40 F0 BF FD | 	call	#_convertstring
0e778     FD 26 02 F6 | 	mov	local01, result1
0e77c     1F 2A 06 F6 | 	mov	local03, #31
0e780                 | LR__1210
0e780                 | ' if t1.result_type<>result_string then printerror(15): return
0e780     1F 2A 0E F2 | 	cmp	local03, #31 wz
0e784     10 00 90 AD |  if_e	jmp	#LR__1211
0e788     0F 12 06 F6 | 	mov	arg01, #15
0e78c     00 14 06 F6 | 	mov	arg02, #0
0e790     A0 4C B1 FD | 	call	#_printerror
0e794     48 05 90 FD | 	jmp	#LR__1229
0e798                 | LR__1211
0e798     13 2D 02 F6 | 	mov	local04, local01
0e79c                 | ' newdir$=t1.result.sresult
0e79c                 | ' if newdir$=".." then 
0e79c     B8 01 00 FF 
0e7a0     3F 15 06 F6 | 	mov	arg02, ##@LR__5871
0e7a4     16 13 02 F6 | 	mov	arg01, local04
0e7a8     CC 86 B1 FD | 	call	#__system___string_cmp
0e7ac     00 FA 0D F2 | 	cmp	result1, #0 wz
0e7b0     C4 01 90 5D |  if_ne	jmp	#LR__1218
0e7b4     4A 00 00 FF 
0e7b8     94 E4 05 F1 | 	add	objptr, ##38036
0e7bc     F2 12 02 FB | 	rdlong	arg01, objptr
0e7c0     4A 00 00 FF 
0e7c4     94 E4 85 F1 | 	sub	objptr, ##38036
0e7c8     09 2F 02 F6 | 	mov	local05, arg01
0e7cc     97 06 48 FB | 	callpa	#(@LR__1213-@LR__1212)>>2,fcache_load_ptr_
0e7d0                 | LR__1212
0e7d0     17 FB C9 FA | 	rdbyte	result1, local05 wz
0e7d4     01 2E 06 51 |  if_ne	add	local05, #1
0e7d8     F4 FF 9F 5D |  if_ne	jmp	#LR__1212
0e7dc                 | LR__1213
0e7dc     17 13 C2 F2 | 	subr	arg01, local05
0e7e0     4A 00 00 FF 
0e7e4     94 E4 05 F1 | 	add	objptr, ##38036
0e7e8     F2 14 02 FB | 	rdlong	arg02, objptr
0e7ec     4A 00 00 FF 
0e7f0     94 E4 85 F1 | 	sub	objptr, ##38036
0e7f4     B8 01 00 FF 
0e7f8     42 17 06 F6 | 	mov	arg03, ##@LR__5872
0e7fc     18 AD B1 FD | 	call	#__system__InstrRev
0e800     FD 2C 02 F6 | 	mov	local04, result1
0e804                 | '   if slash>1 then newdir$=left$(currentdir$,slash-1) else newdir$="/"
0e804     02 2C 56 F2 | 	cmps	local04, #2 wc
0e808     28 00 90 CD |  if_b	jmp	#LR__1214
0e80c     4A 00 00 FF 
0e810     94 E4 05 F1 | 	add	objptr, ##38036
0e814     F2 12 02 FB | 	rdlong	arg01, objptr
0e818     4A 00 00 FF 
0e81c     94 E4 85 F1 | 	sub	objptr, ##38036
0e820     01 2C 86 F1 | 	sub	local04, #1
0e824     16 15 02 F6 | 	mov	arg02, local04
0e828     A0 A6 B1 FD | 	call	#__system__Left_S
0e82c     FD 2C 02 F6 | 	mov	local04, result1
0e830     08 00 90 FD | 	jmp	#LR__1215
0e834                 | LR__1214
0e834     B8 01 00 FF 
0e838     44 2D 06 F6 | 	mov	local04, ##@LR__5873
0e83c                 | LR__1215
0e83c     16 13 02 F6 | 	mov	arg01, local04
0e840     98 8C B1 FD | 	call	#__system___chdir
0e844     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0e848     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0e84c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0e850     FD 30 0A F6 | 	mov	local06, result1 wz
0e854                 | '   chdir newdir$
0e854                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0e854     05 30 0E 52 |  if_ne	cmp	local06, #5 wz
0e858     A4 00 90 AD |  if_e	jmp	#LR__1216
0e85c     00 12 06 F6 | 	mov	arg01, #0
0e860     14 E3 B1 FD | 	call	#__system___getiolock_0611
0e864     FD 12 02 F6 | 	mov	arg01, result1
0e868     E4 85 B1 FD | 	call	#__system___lockmem
0e86c     B8 01 00 FF 
0e870     46 15 06 F6 | 	mov	arg02, ##@LR__5874
0e874     00 12 06 F6 | 	mov	arg01, #0
0e878     00 16 06 F6 | 	mov	arg03, #0
0e87c     C4 92 B1 FD | 	call	#__system___basic_print_string
0e880     00 12 06 F6 | 	mov	arg01, #0
0e884     18 15 02 F6 | 	mov	arg02, local06
0e888     00 16 06 F6 | 	mov	arg03, #0
0e88c     0A 18 06 F6 | 	mov	arg04, #10
0e890     F4 92 B1 FD | 	call	#__system___basic_print_integer
0e894     B8 01 00 FF 
0e898     54 15 06 F6 | 	mov	arg02, ##@LR__5875
0e89c     00 12 06 F6 | 	mov	arg01, #0
0e8a0     00 16 06 F6 | 	mov	arg03, #0
0e8a4     9C 92 B1 FD | 	call	#__system___basic_print_string
0e8a8     45 00 00 FF 
0e8ac     50 E5 05 F1 | 	add	objptr, ##35664
0e8b0     F2 14 02 FB | 	rdlong	arg02, objptr
0e8b4     45 00 00 FF 
0e8b8     50 E5 85 F1 | 	sub	objptr, ##35664
0e8bc     00 12 06 F6 | 	mov	arg01, #0
0e8c0     00 16 06 F6 | 	mov	arg03, #0
0e8c4     7C 92 B1 FD | 	call	#__system___basic_print_string
0e8c8     00 12 06 F6 | 	mov	arg01, #0
0e8cc     0A 14 06 F6 | 	mov	arg02, #10
0e8d0     00 16 06 F6 | 	mov	arg03, #0
0e8d4     14 92 B1 FD | 	call	#__system___basic_print_char
0e8d8     00 12 06 F6 | 	mov	arg01, #0
0e8dc     98 E2 B1 FD | 	call	#__system___getiolock_0611
0e8e0     FD 00 68 FC | 	wrlong	#0, result1
0e8e4     4A 00 00 FF 
0e8e8     94 E4 05 F1 | 	add	objptr, ##38036
0e8ec     F2 12 02 FB | 	rdlong	arg01, objptr
0e8f0     4A 00 00 FF 
0e8f4     94 E4 85 F1 | 	sub	objptr, ##38036
0e8f8     E0 8B B1 FD | 	call	#__system___chdir
0e8fc     14 00 90 FD | 	jmp	#LR__1217
0e900                 | LR__1216
0e900     4A 00 00 FF 
0e904     94 E4 05 F1 | 	add	objptr, ##38036
0e908     F2 2C 62 FC | 	wrlong	local04, objptr
0e90c     4A 00 00 FF 
0e910     94 E4 85 F1 | 	sub	objptr, ##38036
0e914                 | LR__1217
0e914                 | '   print "Current directory: ";currentdir$
0e914     00 12 06 F6 | 	mov	arg01, #0
0e918     5C E2 B1 FD | 	call	#__system___getiolock_0611
0e91c     FD 12 02 F6 | 	mov	arg01, result1
0e920     2C 85 B1 FD | 	call	#__system___lockmem
0e924     B8 01 00 FF 
0e928     57 15 06 F6 | 	mov	arg02, ##@LR__5876
0e92c     00 12 06 F6 | 	mov	arg01, #0
0e930     00 16 06 F6 | 	mov	arg03, #0
0e934     0C 92 B1 FD | 	call	#__system___basic_print_string
0e938     4A 00 00 FF 
0e93c     94 E4 05 F1 | 	add	objptr, ##38036
0e940     F2 14 02 FB | 	rdlong	arg02, objptr
0e944     4A 00 00 FF 
0e948     94 E4 85 F1 | 	sub	objptr, ##38036
0e94c     00 12 06 F6 | 	mov	arg01, #0
0e950     00 16 06 F6 | 	mov	arg03, #0
0e954     EC 91 B1 FD | 	call	#__system___basic_print_string
0e958     00 12 06 F6 | 	mov	arg01, #0
0e95c     0A 14 06 F6 | 	mov	arg02, #10
0e960     00 16 06 F6 | 	mov	arg03, #0
0e964     84 91 B1 FD | 	call	#__system___basic_print_char
0e968     00 12 06 F6 | 	mov	arg01, #0
0e96c     08 E2 B1 FD | 	call	#__system___getiolock_0611
0e970     FD 00 68 FC | 	wrlong	#0, result1
0e974                 | '   return
0e974     68 03 90 FD | 	jmp	#LR__1229
0e978                 | LR__1218
0e978                 | ' if left$(newdir$,1)="/" then 
0e978     16 13 02 F6 | 	mov	arg01, local04
0e97c     01 14 06 F6 | 	mov	arg02, #1
0e980     48 A5 B1 FD | 	call	#__system__Left_S
0e984     FD 12 02 F6 | 	mov	arg01, result1
0e988     B8 01 00 FF 
0e98c     6B 15 06 F6 | 	mov	arg02, ##@LR__5877
0e990     E4 84 B1 FD | 	call	#__system___string_cmp
0e994     00 FA 0D F2 | 	cmp	result1, #0 wz
0e998     3C 01 90 5D |  if_ne	jmp	#LR__1221
0e99c     16 13 02 F6 | 	mov	arg01, local04
0e9a0     38 8B B1 FD | 	call	#__system___chdir
0e9a4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0e9a8     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0e9ac     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0e9b0     FD 30 0A F6 | 	mov	local06, result1 wz
0e9b4                 | '   chdir(newdir$)
0e9b4                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0e9b4     05 30 0E 52 |  if_ne	cmp	local06, #5 wz
0e9b8     A4 00 90 AD |  if_e	jmp	#LR__1219
0e9bc     00 12 06 F6 | 	mov	arg01, #0
0e9c0     B4 E1 B1 FD | 	call	#__system___getiolock_0611
0e9c4     FD 12 02 F6 | 	mov	arg01, result1
0e9c8     84 84 B1 FD | 	call	#__system___lockmem
0e9cc     B8 01 00 FF 
0e9d0     6D 15 06 F6 | 	mov	arg02, ##@LR__5878
0e9d4     00 12 06 F6 | 	mov	arg01, #0
0e9d8     00 16 06 F6 | 	mov	arg03, #0
0e9dc     64 91 B1 FD | 	call	#__system___basic_print_string
0e9e0     00 12 06 F6 | 	mov	arg01, #0
0e9e4     18 15 02 F6 | 	mov	arg02, local06
0e9e8     00 16 06 F6 | 	mov	arg03, #0
0e9ec     0A 18 06 F6 | 	mov	arg04, #10
0e9f0     94 91 B1 FD | 	call	#__system___basic_print_integer
0e9f4     B8 01 00 FF 
0e9f8     7B 15 06 F6 | 	mov	arg02, ##@LR__5879
0e9fc     00 12 06 F6 | 	mov	arg01, #0
0ea00     00 16 06 F6 | 	mov	arg03, #0
0ea04     3C 91 B1 FD | 	call	#__system___basic_print_string
0ea08     45 00 00 FF 
0ea0c     50 E5 05 F1 | 	add	objptr, ##35664
0ea10     F2 14 02 FB | 	rdlong	arg02, objptr
0ea14     45 00 00 FF 
0ea18     50 E5 85 F1 | 	sub	objptr, ##35664
0ea1c     00 12 06 F6 | 	mov	arg01, #0
0ea20     00 16 06 F6 | 	mov	arg03, #0
0ea24     1C 91 B1 FD | 	call	#__system___basic_print_string
0ea28     00 12 06 F6 | 	mov	arg01, #0
0ea2c     0A 14 06 F6 | 	mov	arg02, #10
0ea30     00 16 06 F6 | 	mov	arg03, #0
0ea34     B4 90 B1 FD | 	call	#__system___basic_print_char
0ea38     00 12 06 F6 | 	mov	arg01, #0
0ea3c     38 E1 B1 FD | 	call	#__system___getiolock_0611
0ea40     FD 00 68 FC | 	wrlong	#0, result1
0ea44     4A 00 00 FF 
0ea48     94 E4 05 F1 | 	add	objptr, ##38036
0ea4c     F2 12 02 FB | 	rdlong	arg01, objptr
0ea50     4A 00 00 FF 
0ea54     94 E4 85 F1 | 	sub	objptr, ##38036
0ea58     80 8A B1 FD | 	call	#__system___chdir
0ea5c     14 00 90 FD | 	jmp	#LR__1220
0ea60                 | LR__1219
0ea60     4A 00 00 FF 
0ea64     94 E4 05 F1 | 	add	objptr, ##38036
0ea68     F2 2C 62 FC | 	wrlong	local04, objptr
0ea6c     4A 00 00 FF 
0ea70     94 E4 85 F1 | 	sub	objptr, ##38036
0ea74                 | LR__1220
0ea74                 | '   print "Current directory: ";currentdir$
0ea74     00 12 06 F6 | 	mov	arg01, #0
0ea78     FC E0 B1 FD | 	call	#__system___getiolock_0611
0ea7c     FD 12 02 F6 | 	mov	arg01, result1
0ea80     CC 83 B1 FD | 	call	#__system___lockmem
0ea84     B8 01 00 FF 
0ea88     7E 15 06 F6 | 	mov	arg02, ##@LR__5880
0ea8c     00 12 06 F6 | 	mov	arg01, #0
0ea90     00 16 06 F6 | 	mov	arg03, #0
0ea94     AC 90 B1 FD | 	call	#__system___basic_print_string
0ea98     4A 00 00 FF 
0ea9c     94 E4 05 F1 | 	add	objptr, ##38036
0eaa0     F2 14 02 FB | 	rdlong	arg02, objptr
0eaa4     4A 00 00 FF 
0eaa8     94 E4 85 F1 | 	sub	objptr, ##38036
0eaac     00 12 06 F6 | 	mov	arg01, #0
0eab0     00 16 06 F6 | 	mov	arg03, #0
0eab4     8C 90 B1 FD | 	call	#__system___basic_print_string
0eab8     00 12 06 F6 | 	mov	arg01, #0
0eabc     0A 14 06 F6 | 	mov	arg02, #10
0eac0     00 16 06 F6 | 	mov	arg03, #0
0eac4     24 90 B1 FD | 	call	#__system___basic_print_char
0eac8     00 12 06 F6 | 	mov	arg01, #0
0eacc     A8 E0 B1 FD | 	call	#__system___getiolock_0611
0ead0     FD 00 68 FC | 	wrlong	#0, result1
0ead4                 | '   return
0ead4     08 02 90 FD | 	jmp	#LR__1229
0ead8                 | LR__1221
0ead8                 | '   if currentdir$<>"/" then newdir$=currentdir$+"/"+newdir$ else newdir$=currentdir$+newdir$ 
0ead8     4A 00 00 FF 
0eadc     94 E4 05 F1 | 	add	objptr, ##38036
0eae0     F2 12 02 FB | 	rdlong	arg01, objptr
0eae4     4A 00 00 FF 
0eae8     94 E4 85 F1 | 	sub	objptr, ##38036
0eaec     B8 01 00 FF 
0eaf0     92 15 06 F6 | 	mov	arg02, ##@LR__5881
0eaf4     80 83 B1 FD | 	call	#__system___string_cmp
0eaf8     00 FA 0D F2 | 	cmp	result1, #0 wz
0eafc     34 00 90 AD |  if_e	jmp	#LR__1222
0eb00     4A 00 00 FF 
0eb04     94 E4 05 F1 | 	add	objptr, ##38036
0eb08     F2 12 02 FB | 	rdlong	arg01, objptr
0eb0c     4A 00 00 FF 
0eb10     94 E4 85 F1 | 	sub	objptr, ##38036
0eb14     B8 01 00 FF 
0eb18     94 15 06 F6 | 	mov	arg02, ##@LR__5882
0eb1c     8C 83 B1 FD | 	call	#__system___string_concat
0eb20     FD 12 02 F6 | 	mov	arg01, result1
0eb24     16 15 02 F6 | 	mov	arg02, local04
0eb28     80 83 B1 FD | 	call	#__system___string_concat
0eb2c     FD 2C 02 F6 | 	mov	local04, result1
0eb30     20 00 90 FD | 	jmp	#LR__1223
0eb34                 | LR__1222
0eb34     4A 00 00 FF 
0eb38     94 E4 05 F1 | 	add	objptr, ##38036
0eb3c     F2 12 02 FB | 	rdlong	arg01, objptr
0eb40     4A 00 00 FF 
0eb44     94 E4 85 F1 | 	sub	objptr, ##38036
0eb48     16 15 02 F6 | 	mov	arg02, local04
0eb4c     5C 83 B1 FD | 	call	#__system___string_concat
0eb50     FD 2C 02 F6 | 	mov	local04, result1
0eb54                 | LR__1223
0eb54                 | '   if right$(newdir$,1)="/" then newdir$=left$(newdir$,len(newdir$)-1)
0eb54     16 13 02 F6 | 	mov	arg01, local04
0eb58     01 14 06 F6 | 	mov	arg02, #1
0eb5c     F4 A3 B1 FD | 	call	#__system__Right_S
0eb60     FD 12 02 F6 | 	mov	arg01, result1
0eb64     B8 01 00 FF 
0eb68     96 15 06 F6 | 	mov	arg02, ##@LR__5883
0eb6c     08 83 B1 FD | 	call	#__system___string_cmp
0eb70     00 FA 0D F2 | 	cmp	result1, #0 wz
0eb74     30 00 90 5D |  if_ne	jmp	#LR__1226
0eb78     16 13 02 F6 | 	mov	arg01, local04
0eb7c     09 2F 02 F6 | 	mov	local05, arg01
0eb80     97 06 48 FB | 	callpa	#(@LR__1225-@LR__1224)>>2,fcache_load_ptr_
0eb84                 | LR__1224
0eb84     17 FB C9 FA | 	rdbyte	result1, local05 wz
0eb88     01 2E 06 51 |  if_ne	add	local05, #1
0eb8c     F4 FF 9F 5D |  if_ne	jmp	#LR__1224
0eb90                 | LR__1225
0eb90     09 2F 82 F1 | 	sub	local05, arg01
0eb94     17 15 02 F6 | 	mov	arg02, local05
0eb98     01 14 86 F1 | 	sub	arg02, #1
0eb9c     16 13 02 F6 | 	mov	arg01, local04
0eba0     28 A3 B1 FD | 	call	#__system__Left_S
0eba4     FD 2C 02 F6 | 	mov	local04, result1
0eba8                 | LR__1226
0eba8     16 13 02 F6 | 	mov	arg01, local04
0ebac     2C 89 B1 FD | 	call	#__system___chdir
0ebb0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0ebb4     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0ebb8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0ebbc     FD 30 0A F6 | 	mov	local06, result1 wz
0ebc0                 | '   chdir(newdir$)
0ebc0                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0ebc0     05 30 0E 52 |  if_ne	cmp	local06, #5 wz
0ebc4     A4 00 90 AD |  if_e	jmp	#LR__1227
0ebc8     00 12 06 F6 | 	mov	arg01, #0
0ebcc     A8 DF B1 FD | 	call	#__system___getiolock_0611
0ebd0     FD 12 02 F6 | 	mov	arg01, result1
0ebd4     78 82 B1 FD | 	call	#__system___lockmem
0ebd8     B8 01 00 FF 
0ebdc     98 15 06 F6 | 	mov	arg02, ##@LR__5884
0ebe0     00 12 06 F6 | 	mov	arg01, #0
0ebe4     00 16 06 F6 | 	mov	arg03, #0
0ebe8     58 8F B1 FD | 	call	#__system___basic_print_string
0ebec     00 12 06 F6 | 	mov	arg01, #0
0ebf0     18 15 02 F6 | 	mov	arg02, local06
0ebf4     00 16 06 F6 | 	mov	arg03, #0
0ebf8     0A 18 06 F6 | 	mov	arg04, #10
0ebfc     88 8F B1 FD | 	call	#__system___basic_print_integer
0ec00     B8 01 00 FF 
0ec04     A6 15 06 F6 | 	mov	arg02, ##@LR__5885
0ec08     00 12 06 F6 | 	mov	arg01, #0
0ec0c     00 16 06 F6 | 	mov	arg03, #0
0ec10     30 8F B1 FD | 	call	#__system___basic_print_string
0ec14     45 00 00 FF 
0ec18     50 E5 05 F1 | 	add	objptr, ##35664
0ec1c     F2 14 02 FB | 	rdlong	arg02, objptr
0ec20     45 00 00 FF 
0ec24     50 E5 85 F1 | 	sub	objptr, ##35664
0ec28     00 12 06 F6 | 	mov	arg01, #0
0ec2c     00 16 06 F6 | 	mov	arg03, #0
0ec30     10 8F B1 FD | 	call	#__system___basic_print_string
0ec34     00 12 06 F6 | 	mov	arg01, #0
0ec38     0A 14 06 F6 | 	mov	arg02, #10
0ec3c     00 16 06 F6 | 	mov	arg03, #0
0ec40     A8 8E B1 FD | 	call	#__system___basic_print_char
0ec44     00 12 06 F6 | 	mov	arg01, #0
0ec48     2C DF B1 FD | 	call	#__system___getiolock_0611
0ec4c     FD 00 68 FC | 	wrlong	#0, result1
0ec50     4A 00 00 FF 
0ec54     94 E4 05 F1 | 	add	objptr, ##38036
0ec58     F2 12 02 FB | 	rdlong	arg01, objptr
0ec5c     4A 00 00 FF 
0ec60     94 E4 85 F1 | 	sub	objptr, ##38036
0ec64     74 88 B1 FD | 	call	#__system___chdir
0ec68     14 00 90 FD | 	jmp	#LR__1228
0ec6c                 | LR__1227
0ec6c     4A 00 00 FF 
0ec70     94 E4 05 F1 | 	add	objptr, ##38036
0ec74     F2 2C 62 FC | 	wrlong	local04, objptr
0ec78     4A 00 00 FF 
0ec7c     94 E4 85 F1 | 	sub	objptr, ##38036
0ec80                 | LR__1228
0ec80                 | '   print "Current directory: ";currentdir$
0ec80     00 12 06 F6 | 	mov	arg01, #0
0ec84     F0 DE B1 FD | 	call	#__system___getiolock_0611
0ec88     FD 12 02 F6 | 	mov	arg01, result1
0ec8c     C0 81 B1 FD | 	call	#__system___lockmem
0ec90     B8 01 00 FF 
0ec94     A9 15 06 F6 | 	mov	arg02, ##@LR__5886
0ec98     00 12 06 F6 | 	mov	arg01, #0
0ec9c     00 16 06 F6 | 	mov	arg03, #0
0eca0     A0 8E B1 FD | 	call	#__system___basic_print_string
0eca4     4A 00 00 FF 
0eca8     94 E4 05 F1 | 	add	objptr, ##38036
0ecac     F2 14 02 FB | 	rdlong	arg02, objptr
0ecb0     4A 00 00 FF 
0ecb4     94 E4 85 F1 | 	sub	objptr, ##38036
0ecb8     00 12 06 F6 | 	mov	arg01, #0
0ecbc     00 16 06 F6 | 	mov	arg03, #0
0ecc0     80 8E B1 FD | 	call	#__system___basic_print_string
0ecc4     00 12 06 F6 | 	mov	arg01, #0
0ecc8     0A 14 06 F6 | 	mov	arg02, #10
0eccc     00 16 06 F6 | 	mov	arg03, #0
0ecd0     18 8E B1 FD | 	call	#__system___basic_print_char
0ecd4     00 12 06 F6 | 	mov	arg01, #0
0ecd8     9C DE B1 FD | 	call	#__system___getiolock_0611
0ecdc     FD 00 68 FC | 	wrlong	#0, result1
0ece0                 | LR__1229
0ece0     A7 F0 03 F6 | 	mov	ptra, fp
0ece4     B2 00 A0 FD | 	call	#popregs_
0ece8                 | _do_cd_ret
0ece8     2D 00 64 FD | 	ret
0ecec                 | 
0ecec                 | ' 
0ecec                 | ' '-------------------- changefreq
0ecec                 | ' 
0ecec                 | ' sub do_changefreq
0ecec                 | _do_changefreq
0ecec     04 4A 05 F6 | 	mov	COUNT_, #4
0ecf0     A8 00 A0 FD | 	call	#pushregs_
0ecf4     28 F0 07 F1 | 	add	ptra, #40
0ecf8     44 E9 BF FD | 	call	#_pop
0ecfc     FF 14 02 F6 | 	mov	arg02, result3
0ed00     A7 FA 61 FC | 	wrlong	result1, fp
0ed04     04 4E 05 F1 | 	add	fp, #4
0ed08     A7 FC 61 FC | 	wrlong	result2, fp
0ed0c     04 4E 05 F1 | 	add	fp, #4
0ed10     A7 14 62 FC | 	wrlong	arg02, fp
0ed14     08 4E 85 F1 | 	sub	fp, #8
0ed18     A7 12 02 F6 | 	mov	arg01, fp
0ed1c     C0 EB BF FD | 	call	#_converttofloat
0ed20     24 4E 05 F1 | 	add	fp, #36
0ed24     A7 FA 61 FC | 	wrlong	result1, fp
0ed28     24 4E 85 F1 | 	sub	fp, #36
0ed2c     FD 14 02 F6 | 	mov	arg02, result1
0ed30     FC 16 20 FF 
0ed34     54 12 06 F6 | 	mov	arg01, ##1076754516
0ed38     5C BF B1 FD | 	call	#__system____builtin_logbase
0ed3c     FD 26 02 F6 | 	mov	local01, result1
0ed40     1E 14 C6 F9 | 	decod	arg02, #30
0ed44     FC 16 20 FF 
0ed48     54 12 06 F6 | 	mov	arg01, ##1076754516
0ed4c     48 BF B1 FD | 	call	#__system____builtin_logbase
0ed50     FD 14 02 F6 | 	mov	arg02, result1
0ed54     13 13 02 F6 | 	mov	arg01, local01
0ed58     70 B1 B1 FD | 	call	#__system___float_div
0ed5c     FD 12 02 F6 | 	mov	arg01, result1
0ed60     00 14 06 F6 | 	mov	arg02, #0
0ed64     28 B4 B1 FD | 	call	#__system___float_tointeger
0ed68     10 4E 05 F1 | 	add	fp, #16
0ed6c     A7 FA 61 FC | 	wrlong	result1, fp
0ed70     1E 26 C6 F9 | 	decod	local01, #30
0ed74     FD 12 02 F6 | 	mov	arg01, result1
0ed78     10 4E 85 F1 | 	sub	fp, #16
0ed7c     05 12 06 F1 | 	add	arg01, #5
0ed80     09 13 52 F6 | 	abs	arg01, arg01 wc
0ed84     1F 28 C6 C9 |  if_b	decod	local02, #31
0ed88     00 28 06 36 |  if_ae	mov	local02, #0
0ed8c     34 AB B1 FD | 	call	#__system___float_fromuns
0ed90     14 FB 61 F5 | 	xor	result1, local02
0ed94     FD 14 02 F6 | 	mov	arg02, result1
0ed98     13 13 02 F6 | 	mov	arg01, local01
0ed9c     30 BE B1 FD | 	call	#__system____builtin_powf
0eda0     FD 12 02 F6 | 	mov	arg01, result1
0eda4     01 14 06 F6 | 	mov	arg02, #1
0eda8     E4 B3 B1 FD | 	call	#__system___float_tointeger
0edac     14 4E 05 F1 | 	add	fp, #20
0edb0     A7 FA 61 FC | 	wrlong	result1, fp
0edb4                 | ' skip=round(2^(lfreq+5))
0edb4                 | ' if skip>32768 then i=skip/32768: skip=32768 else i=1
0edb4     14 4E 85 F1 | 	sub	fp, #20
0edb8     40 00 00 FF 
0edbc     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0edc0     30 00 90 CD |  if_b	jmp	#LR__1230
0edc4     14 4E 05 F1 | 	add	fp, #20
0edc8     A7 26 02 FB | 	rdlong	local01, fp
0edcc     13 27 52 F6 | 	abs	local01, local01 wc
0edd0     0F 26 46 F0 | 	shr	local01, #15
0edd4     13 27 82 F6 | 	negc	local01, local01
0edd8     04 4E 05 F1 | 	add	fp, #4
0eddc     A7 26 62 FC | 	wrlong	local01, fp
0ede0     04 4E 85 F1 | 	sub	fp, #4
0ede4     40 00 80 FF 
0ede8     A7 00 68 FC | 	wrlong	##32768, fp
0edec     14 4E 85 F1 | 	sub	fp, #20
0edf0     0C 00 90 FD | 	jmp	#LR__1231
0edf4                 | LR__1230
0edf4     18 4E 05 F1 | 	add	fp, #24
0edf8     A7 02 68 FC | 	wrlong	#1, fp
0edfc     18 4E 85 F1 | 	sub	fp, #24
0ee00                 | LR__1231
0ee00     24 4E 05 F1 | 	add	fp, #36
0ee04     A7 14 02 FB | 	rdlong	arg02, fp
0ee08     24 4E 85 F1 | 	sub	fp, #36
0ee0c     3E 2C 25 FF 
0ee10     3C 12 06 F6 | 	mov	arg01, ##1247312956
0ee14     B4 B0 B1 FD | 	call	#__system___float_div
0ee18     FD 26 02 F6 | 	mov	local01, result1
0ee1c     18 4E 05 F1 | 	add	fp, #24
0ee20     A7 12 02 FB | 	rdlong	arg01, fp
0ee24     18 4E 85 F1 | 	sub	fp, #24
0ee28     09 13 52 F6 | 	abs	arg01, arg01 wc
0ee2c     1F 28 C6 C9 |  if_b	decod	local02, #31
0ee30     00 28 06 36 |  if_ae	mov	local02, #0
0ee34     8C AA B1 FD | 	call	#__system___float_fromuns
0ee38     14 FB 61 F5 | 	xor	result1, local02
0ee3c     FD 2A 02 F6 | 	mov	local03, result1
0ee40     1E 2C C6 F9 | 	decod	local04, #30
0ee44     0D 12 06 F6 | 	mov	arg01, #13
0ee48     10 4E 05 F1 | 	add	fp, #16
0ee4c     A7 14 02 FB | 	rdlong	arg02, fp
0ee50     10 4E 85 F1 | 	sub	fp, #16
0ee54     0A 13 82 F1 | 	sub	arg01, arg02
0ee58     09 13 52 F6 | 	abs	arg01, arg01 wc
0ee5c     1F 28 C6 C9 |  if_b	decod	local02, #31
0ee60     00 28 06 36 |  if_ae	mov	local02, #0
0ee64     5C AA B1 FD | 	call	#__system___float_fromuns
0ee68     14 FB 61 F5 | 	xor	result1, local02
0ee6c     FD 14 02 F6 | 	mov	arg02, result1
0ee70     16 13 02 F6 | 	mov	arg01, local04
0ee74     58 BD B1 FD | 	call	#__system____builtin_powf
0ee78     FD 14 02 F6 | 	mov	arg02, result1
0ee7c     15 13 02 F6 | 	mov	arg01, local03
0ee80     44 AE B1 FD | 	call	#__system___float_mul
0ee84     FD 14 02 F6 | 	mov	arg02, result1
0ee88     13 13 02 F6 | 	mov	arg01, local01
0ee8c     3C B0 B1 FD | 	call	#__system___float_div
0ee90     FD 12 02 F6 | 	mov	arg01, result1
0ee94     01 14 06 F6 | 	mov	arg02, #1
0ee98     F4 B2 B1 FD | 	call	#__system___float_tointeger
0ee9c     FD 26 02 F6 | 	mov	local01, result1
0eea0     1C 4E 05 F1 | 	add	fp, #28
0eea4     A7 26 62 FC | 	wrlong	local01, fp
0eea8     1C 4E 85 F1 | 	sub	fp, #28
0eeac     90 E7 BF FD | 	call	#_pop
0eeb0     FF 2C 02 F6 | 	mov	local04, result3
0eeb4     A7 FA 61 FC | 	wrlong	result1, fp
0eeb8     04 4E 05 F1 | 	add	fp, #4
0eebc     A7 FC 61 FC | 	wrlong	result2, fp
0eec0     04 4E 05 F1 | 	add	fp, #4
0eec4     A7 2C 62 FC | 	wrlong	local04, fp
0eec8     08 4E 85 F1 | 	sub	fp, #8
0eecc     A7 12 02 F6 | 	mov	arg01, fp
0eed0     50 E9 BF FD | 	call	#_converttoint
0eed4     FD 2A 52 F6 | 	abs	local03, result1 wc
0eed8     07 2A 06 F5 | 	and	local03, #7
0eedc     15 2B 82 F6 | 	negc	local03, local03
0eee0     0C 4E 05 F1 | 	add	fp, #12
0eee4     A7 2A 62 FC | 	wrlong	local03, fp
0eee8     08 4E 05 F1 | 	add	fp, #8
0eeec     A7 26 02 FB | 	rdlong	local01, fp
0eef0     10 26 66 F0 | 	shl	local01, #16
0eef4     08 4E 05 F1 | 	add	fp, #8
0eef8     A7 2C 02 FB | 	rdlong	local04, fp
0eefc     16 27 02 F1 | 	add	local01, local04
0ef00     04 4E 05 F1 | 	add	fp, #4
0ef04     A7 26 62 FC | 	wrlong	local01, fp
0ef08                 | ' if (lpeek(base+64*channel+8) and $0800_0000)=0 then 
0ef08     37 00 00 FF 
0ef0c     10 E4 05 F1 | 	add	objptr, ##28176
0ef10     F2 12 02 FB | 	rdlong	arg01, objptr
0ef14     37 00 00 FF 
0ef18     10 E4 85 F1 | 	sub	objptr, ##28176
0ef1c     14 4E 85 F1 | 	sub	fp, #20
0ef20     A7 2C 02 FB | 	rdlong	local04, fp
0ef24     0C 4E 85 F1 | 	sub	fp, #12
0ef28     06 2C 66 F0 | 	shl	local04, #6
0ef2c     16 13 02 F1 | 	add	arg01, local04
0ef30     08 12 06 F1 | 	add	arg01, #8
0ef34     09 FB 01 FB | 	rdlong	result1, arg01
0ef38     1B FA 2D F4 | 	testbn	result1, #27 wz
0ef3c     3C 00 90 5D |  if_ne	jmp	#LR__1232
0ef40     37 00 00 FF 
0ef44     10 E4 05 F1 | 	add	objptr, ##28176
0ef48     F2 12 02 FB | 	rdlong	arg01, objptr
0ef4c     37 00 00 FF 
0ef50     10 E4 85 F1 | 	sub	objptr, ##28176
0ef54     0C 4E 05 F1 | 	add	fp, #12
0ef58     A7 2C 02 FB | 	rdlong	local04, fp
0ef5c     06 2C 66 F0 | 	shl	local04, #6
0ef60     16 13 02 F1 | 	add	arg01, local04
0ef64     18 12 06 F1 | 	add	arg01, #24
0ef68     14 4E 05 F1 | 	add	fp, #20
0ef6c     A7 14 02 FB | 	rdlong	arg02, fp
0ef70     20 4E 85 F1 | 	sub	fp, #32
0ef74     09 15 62 FC | 	wrlong	arg02, arg01
0ef78     80 00 90 FD | 	jmp	#LR__1233
0ef7c                 | LR__1232
0ef7c     37 00 00 FF 
0ef80     10 E4 05 F1 | 	add	objptr, ##28176
0ef84     F2 26 02 FB | 	rdlong	local01, objptr
0ef88     37 00 00 FF 
0ef8c     10 E4 85 F1 | 	sub	objptr, ##28176
0ef90     0C 4E 05 F1 | 	add	fp, #12
0ef94     A7 2C 02 FB | 	rdlong	local04, fp
0ef98     06 2C 66 F0 | 	shl	local04, #6
0ef9c     16 27 02 F1 | 	add	local01, local04
0efa0     18 26 06 F1 | 	add	local01, #24
0efa4     18 4E 05 F1 | 	add	fp, #24
0efa8     A7 14 02 FB | 	rdlong	arg02, fp
0efac     24 4E 85 F1 | 	sub	fp, #36
0efb0     3E 2C 25 FF 
0efb4     3C 12 06 F6 | 	mov	arg01, ##1247312956
0efb8     10 AF B1 FD | 	call	#__system___float_div
0efbc     FD 12 02 F6 | 	mov	arg01, result1
0efc0     01 14 06 F6 | 	mov	arg02, #1
0efc4     C8 B1 B1 FD | 	call	#__system___float_tointeger
0efc8     13 FB 51 FC | 	wrword	result1, local01
0efcc     37 00 00 FF 
0efd0     10 E4 05 F1 | 	add	objptr, ##28176
0efd4     F2 12 02 FB | 	rdlong	arg01, objptr
0efd8     37 00 00 FF 
0efdc     10 E4 85 F1 | 	sub	objptr, ##28176
0efe0     0C 4E 05 F1 | 	add	fp, #12
0efe4     A7 2C 02 FB | 	rdlong	local04, fp
0efe8     0C 4E 85 F1 | 	sub	fp, #12
0efec     06 2C 66 F0 | 	shl	local04, #6
0eff0     16 13 02 F1 | 	add	arg01, local04
0eff4     1A 12 06 F1 | 	add	arg01, #26
0eff8     09 01 5A FC | 	wrword	#256, arg01
0effc                 | LR__1233
0effc     A7 F0 03 F6 | 	mov	ptra, fp
0f000     B2 00 A0 FD | 	call	#popregs_
0f004                 | _do_changefreq_ret
0f004     2D 00 64 FD | 	ret
0f008                 | 
0f008                 | ' 
0f008                 | ' '-------------------- changepan
0f008                 | ' 
0f008                 | ' sub do_changepan
0f008                 | _do_changepan
0f008     01 4A 05 F6 | 	mov	COUNT_, #1
0f00c     A8 00 A0 FD | 	call	#pushregs_
0f010     14 F0 07 F1 | 	add	ptra, #20
0f014     28 E6 BF FD | 	call	#_pop
0f018     A7 FA 61 FC | 	wrlong	result1, fp
0f01c     04 4E 05 F1 | 	add	fp, #4
0f020     A7 FC 61 FC | 	wrlong	result2, fp
0f024     04 4E 05 F1 | 	add	fp, #4
0f028     A7 FE 61 FC | 	wrlong	result3, fp
0f02c     08 4E 85 F1 | 	sub	fp, #8
0f030     00 00 23 FF 
0f034     00 26 06 F6 | 	mov	local01, ##1174405120
0f038     A7 12 02 F6 | 	mov	arg01, fp
0f03c     A0 E8 BF FD | 	call	#_converttofloat
0f040     FD 14 02 F6 | 	mov	arg02, result1
0f044     13 13 02 F6 | 	mov	arg01, local01
0f048     7C AC B1 FD | 	call	#__system___float_mul
0f04c     FD 12 02 F6 | 	mov	arg01, result1
0f050     01 14 06 F6 | 	mov	arg02, #1
0f054     38 B1 B1 FD | 	call	#__system___float_tointeger
0f058     0D 26 C6 F9 | 	decod	local01, #13
0f05c     FD 26 02 F1 | 	add	local01, result1
0f060     10 4E 05 F1 | 	add	fp, #16
0f064     A7 26 62 FC | 	wrlong	local01, fp
0f068                 | ' 
0f068                 | ' t1=pop()
0f068                 | ' pan=8192+round(8192*converttofloat(t1)) 
0f068                 | ' if pan<0 then pan=0
0f068     10 4E 85 F1 | 	sub	fp, #16
0f06c     00 26 56 F2 | 	cmps	local01, #0 wc
0f070     10 4E 05 C1 |  if_b	add	fp, #16
0f074     A7 00 68 CC |  if_b	wrlong	#0, fp
0f078     10 4E 85 C1 |  if_b	sub	fp, #16
0f07c                 | ' if pan>16384 then pan=16384
0f07c     10 4E 05 F1 | 	add	fp, #16
0f080     A7 26 02 FB | 	rdlong	local01, fp
0f084     10 4E 85 F1 | 	sub	fp, #16
0f088     20 00 00 FF 
0f08c     01 26 56 F2 | 	cmps	local01, ##16385 wc
0f090     10 4E 05 31 |  if_ae	add	fp, #16
0f094     20 00 80 3F 
0f098     A7 00 68 3C |  if_ae	wrlong	##16384, fp
0f09c     10 4E 85 31 |  if_ae	sub	fp, #16
0f0a0     9C E5 BF FD | 	call	#_pop
0f0a4     FF 26 02 F6 | 	mov	local01, result3
0f0a8     A7 FA 61 FC | 	wrlong	result1, fp
0f0ac     04 4E 05 F1 | 	add	fp, #4
0f0b0     A7 FC 61 FC | 	wrlong	result2, fp
0f0b4     04 4E 05 F1 | 	add	fp, #4
0f0b8     A7 26 62 FC | 	wrlong	local01, fp
0f0bc     08 4E 85 F1 | 	sub	fp, #8
0f0c0     A7 12 02 F6 | 	mov	arg01, fp
0f0c4     5C E7 BF FD | 	call	#_converttoint
0f0c8     FD 26 52 F6 | 	abs	local01, result1 wc
0f0cc     07 26 06 F5 | 	and	local01, #7
0f0d0     13 27 82 F6 | 	negc	local01, local01
0f0d4     0C 4E 05 F1 | 	add	fp, #12
0f0d8     A7 26 62 FC | 	wrlong	local01, fp
0f0dc     37 00 00 FF 
0f0e0     10 E4 05 F1 | 	add	objptr, ##28176
0f0e4     F2 12 02 FB | 	rdlong	arg01, objptr
0f0e8     37 00 00 FF 
0f0ec     10 E4 85 F1 | 	sub	objptr, ##28176
0f0f0     06 26 66 F0 | 	shl	local01, #6
0f0f4     13 13 02 F1 | 	add	arg01, local01
0f0f8     16 12 06 F1 | 	add	arg01, #22
0f0fc     04 4E 05 F1 | 	add	fp, #4
0f100     A7 14 02 FB | 	rdlong	arg02, fp
0f104     10 4E 85 F1 | 	sub	fp, #16
0f108     09 15 52 FC | 	wrword	arg02, arg01
0f10c     A7 F0 03 F6 | 	mov	ptra, fp
0f110     B2 00 A0 FD | 	call	#popregs_
0f114                 | _do_changepan_ret
0f114     2D 00 64 FD | 	ret
0f118                 | 
0f118                 | ' 
0f118                 | ' '-------------------- changevol
0f118                 | ' 
0f118                 | ' sub do_changevol
0f118                 | _do_changevol
0f118     00 4A 05 F6 | 	mov	COUNT_, #0
0f11c     A8 00 A0 FD | 	call	#pushregs_
0f120     14 F0 07 F1 | 	add	ptra, #20
0f124     18 E5 BF FD | 	call	#_pop
0f128     FF 14 02 F6 | 	mov	arg02, result3
0f12c     A7 FA 61 FC | 	wrlong	result1, fp
0f130     04 4E 05 F1 | 	add	fp, #4
0f134     A7 FC 61 FC | 	wrlong	result2, fp
0f138     04 4E 05 F1 | 	add	fp, #4
0f13c     A7 14 62 FC | 	wrlong	arg02, fp
0f140     08 4E 85 F1 | 	sub	fp, #8
0f144     A7 12 02 F6 | 	mov	arg01, fp
0f148     94 E7 BF FD | 	call	#_converttofloat
0f14c     FD 12 02 F6 | 	mov	arg01, result1
0f150     00 3D 22 FF 
0f154     00 14 06 F6 | 	mov	arg02, ##1148846080
0f158     6C AB B1 FD | 	call	#__system___float_mul
0f15c     FD 12 02 F6 | 	mov	arg01, result1
0f160     01 14 06 F6 | 	mov	arg02, #1
0f164     28 B0 B1 FD | 	call	#__system___float_tointeger
0f168     FD 14 52 F6 | 	abs	arg02, result1 wc
0f16c     0D 14 46 F7 | 	zerox	arg02, #13
0f170     0A 15 82 F6 | 	negc	arg02, arg02
0f174     10 4E 05 F1 | 	add	fp, #16
0f178     A7 14 62 FC | 	wrlong	arg02, fp
0f17c     10 4E 85 F1 | 	sub	fp, #16
0f180     BC E4 BF FD | 	call	#_pop
0f184     FF 14 02 F6 | 	mov	arg02, result3
0f188     A7 FA 61 FC | 	wrlong	result1, fp
0f18c     04 4E 05 F1 | 	add	fp, #4
0f190     A7 FC 61 FC | 	wrlong	result2, fp
0f194     04 4E 05 F1 | 	add	fp, #4
0f198     A7 14 62 FC | 	wrlong	arg02, fp
0f19c     08 4E 85 F1 | 	sub	fp, #8
0f1a0     A7 12 02 F6 | 	mov	arg01, fp
0f1a4     7C E6 BF FD | 	call	#_converttoint
0f1a8     FD 14 52 F6 | 	abs	arg02, result1 wc
0f1ac     07 14 06 F5 | 	and	arg02, #7
0f1b0     0A 15 82 F6 | 	negc	arg02, arg02
0f1b4     0C 4E 05 F1 | 	add	fp, #12
0f1b8     A7 14 62 FC | 	wrlong	arg02, fp
0f1bc     37 00 00 FF 
0f1c0     10 E4 05 F1 | 	add	objptr, ##28176
0f1c4     F2 12 02 FB | 	rdlong	arg01, objptr
0f1c8     37 00 00 FF 
0f1cc     10 E4 85 F1 | 	sub	objptr, ##28176
0f1d0     06 14 66 F0 | 	shl	arg02, #6
0f1d4     0A 13 02 F1 | 	add	arg01, arg02
0f1d8     14 12 06 F1 | 	add	arg01, #20
0f1dc     04 4E 05 F1 | 	add	fp, #4
0f1e0     A7 14 02 FB | 	rdlong	arg02, fp
0f1e4     10 4E 85 F1 | 	sub	fp, #16
0f1e8     09 15 52 FC | 	wrword	arg02, arg01
0f1ec     A7 F0 03 F6 | 	mov	ptra, fp
0f1f0     B2 00 A0 FD | 	call	#popregs_
0f1f4                 | _do_changevol_ret
0f1f4     2D 00 64 FD | 	ret
0f1f8                 | 
0f1f8                 | ' 
0f1f8                 | ' '-------------------- changewav
0f1f8                 | ' 
0f1f8                 | ' sub do_changewav
0f1f8                 | _do_changewav
0f1f8     00 4A 05 F6 | 	mov	COUNT_, #0
0f1fc     A8 00 A0 FD | 	call	#pushregs_
0f200     14 F0 07 F1 | 	add	ptra, #20
0f204     38 E4 BF FD | 	call	#_pop
0f208     FF 14 02 F6 | 	mov	arg02, result3
0f20c     A7 FA 61 FC | 	wrlong	result1, fp
0f210     04 4E 05 F1 | 	add	fp, #4
0f214     A7 FC 61 FC | 	wrlong	result2, fp
0f218     04 4E 05 F1 | 	add	fp, #4
0f21c     A7 14 62 FC | 	wrlong	arg02, fp
0f220     08 4E 85 F1 | 	sub	fp, #8
0f224     A7 12 02 F6 | 	mov	arg01, fp
0f228     F8 E5 BF FD | 	call	#_converttoint
0f22c     10 4E 05 F1 | 	add	fp, #16
0f230     A7 FA 61 FC | 	wrlong	result1, fp
0f234                 | ' 
0f234                 | ' t1=pop()
0f234                 | ' wave=converttoint(t1)
0f234                 | ' if wave<0 then wave=0
0f234     FD 14 02 F6 | 	mov	arg02, result1
0f238     10 4E 85 F1 | 	sub	fp, #16
0f23c     00 14 56 F2 | 	cmps	arg02, #0 wc
0f240     10 4E 05 C1 |  if_b	add	fp, #16
0f244     A7 00 68 CC |  if_b	wrlong	#0, fp
0f248     10 4E 85 C1 |  if_b	sub	fp, #16
0f24c     F0 E3 BF FD | 	call	#_pop
0f250     FF 14 02 F6 | 	mov	arg02, result3
0f254     A7 FA 61 FC | 	wrlong	result1, fp
0f258     04 4E 05 F1 | 	add	fp, #4
0f25c     A7 FC 61 FC | 	wrlong	result2, fp
0f260     04 4E 05 F1 | 	add	fp, #4
0f264     A7 14 62 FC | 	wrlong	arg02, fp
0f268     08 4E 85 F1 | 	sub	fp, #8
0f26c     A7 12 02 F6 | 	mov	arg01, fp
0f270     B0 E5 BF FD | 	call	#_converttoint
0f274     FD 14 52 F6 | 	abs	arg02, result1 wc
0f278     07 14 06 F5 | 	and	arg02, #7
0f27c     0A 15 82 F6 | 	negc	arg02, arg02
0f280     0C 4E 05 F1 | 	add	fp, #12
0f284     A7 14 62 FC | 	wrlong	arg02, fp
0f288                 | ' if wave <32 then 
0f288     04 4E 05 F1 | 	add	fp, #4
0f28c     A7 14 02 FB | 	rdlong	arg02, fp
0f290     10 4E 85 F1 | 	sub	fp, #16
0f294     20 14 56 F2 | 	cmps	arg02, #32 wc
0f298     48 00 90 3D |  if_ae	jmp	#LR__1240
0f29c     37 00 00 FF 
0f2a0     10 E4 05 F1 | 	add	objptr, ##28176
0f2a4     F2 12 02 FB | 	rdlong	arg01, objptr
0f2a8     37 00 00 FF 
0f2ac     10 E4 85 F1 | 	sub	objptr, ##28176
0f2b0     0C 4E 05 F1 | 	add	fp, #12
0f2b4     A7 14 02 FB | 	rdlong	arg02, fp
0f2b8     06 14 66 F0 | 	shl	arg02, #6
0f2bc     0A 13 02 F1 | 	add	arg01, arg02
0f2c0     08 12 06 F1 | 	add	arg01, #8
0f2c4     04 4E 05 F1 | 	add	fp, #4
0f2c8     A7 14 02 FB | 	rdlong	arg02, fp
0f2cc     10 4E 85 F1 | 	sub	fp, #16
0f2d0     0B 14 66 F0 | 	shl	arg02, #11
0f2d4     00 00 40 FF 
0f2d8     00 14 06 F1 | 	add	arg02, ##-2147483648
0f2dc     09 15 62 FC | 	wrlong	arg02, arg01
0f2e0     34 00 90 FD | 	jmp	#LR__1241
0f2e4                 | LR__1240
0f2e4     37 00 00 FF 
0f2e8     10 E4 05 F1 | 	add	objptr, ##28176
0f2ec     F2 12 02 FB | 	rdlong	arg01, objptr
0f2f0     37 00 00 FF 
0f2f4     10 E4 85 F1 | 	sub	objptr, ##28176
0f2f8     0C 4E 05 F1 | 	add	fp, #12
0f2fc     A7 14 02 FB | 	rdlong	arg02, fp
0f300     0C 4E 85 F1 | 	sub	fp, #12
0f304     06 14 66 F0 | 	shl	arg02, #6
0f308     0A 13 02 F1 | 	add	arg01, arg02
0f30c     08 12 06 F1 | 	add	arg01, #8
0f310     00 00 C4 FF 
0f314     09 01 68 FC | 	wrlong	##-2013265920, arg01
0f318                 | LR__1241
0f318     A7 F0 03 F6 | 	mov	ptra, fp
0f31c     B2 00 A0 FD | 	call	#popregs_
0f320                 | _do_changewav_ret
0f320     2D 00 64 FD | 	ret
0f324                 | 
0f324                 | ' 
0f324                 | ' '-------------------- chr$
0f324                 | ' 
0f324                 | ' sub do_chr
0f324                 | _do_chr
0f324     01 4A 05 F6 | 	mov	COUNT_, #1
0f328     A8 00 A0 FD | 	call	#pushregs_
0f32c     14 F0 07 F1 | 	add	ptra, #20
0f330     4A 00 00 FF 
0f334     80 E4 05 F1 | 	add	objptr, ##38016
0f338     F2 26 02 FB | 	rdlong	local01, objptr
0f33c     13 17 02 F6 | 	mov	arg03, local01
0f340     01 16 66 F0 | 	shl	arg03, #1
0f344     13 17 02 F1 | 	add	arg03, local01
0f348     02 16 66 F0 | 	shl	arg03, #2
0f34c     03 00 00 FF 
0f350     04 E4 85 F1 | 	sub	objptr, ##1540
0f354     F2 16 02 F1 | 	add	arg03, objptr
0f358     0B 17 02 FB | 	rdlong	arg03, arg03
0f35c     0C 4E 05 F1 | 	add	fp, #12
0f360     A7 16 62 FC | 	wrlong	arg03, fp
0f364                 | ' 
0f364                 | ' numpar=compiledline(lineptr_e).result.uresult
0f364                 | ' if numpar>1 orelse numpar=0 then print "chr$: "; : printerror(39) : return
0f364     0C 4E 85 F1 | 	sub	fp, #12
0f368     02 16 16 F2 | 	cmp	arg03, #2 wc
0f36c     47 00 00 FF 
0f370     7C E4 85 F1 | 	sub	objptr, ##36476
0f374     0C 4E 05 C1 |  if_b	add	fp, #12
0f378     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0f37c     0C 4E 85 C1 |  if_b	sub	fp, #12
0f380     40 00 90 4D |  if_c_and_nz	jmp	#LR__1250
0f384     00 12 06 F6 | 	mov	arg01, #0
0f388     EC D7 B1 FD | 	call	#__system___getiolock_0611
0f38c     FD 12 02 F6 | 	mov	arg01, result1
0f390     BC 7A B1 FD | 	call	#__system___lockmem
0f394     B8 01 00 FF 
0f398     BD 15 06 F6 | 	mov	arg02, ##@LR__5887
0f39c     00 12 06 F6 | 	mov	arg01, #0
0f3a0     00 16 06 F6 | 	mov	arg03, #0
0f3a4     9C 87 B1 FD | 	call	#__system___basic_print_string
0f3a8     00 12 06 F6 | 	mov	arg01, #0
0f3ac     C8 D7 B1 FD | 	call	#__system___getiolock_0611
0f3b0     FD 00 68 FC | 	wrlong	#0, result1
0f3b4     27 12 06 F6 | 	mov	arg01, #39
0f3b8     00 14 06 F6 | 	mov	arg02, #0
0f3bc     74 40 B1 FD | 	call	#_printerror
0f3c0     54 00 90 FD | 	jmp	#LR__1251
0f3c4                 | LR__1250
0f3c4     78 E2 BF FD | 	call	#_pop
0f3c8     FF 26 02 F6 | 	mov	local01, result3
0f3cc     A7 FA 61 FC | 	wrlong	result1, fp
0f3d0     04 4E 05 F1 | 	add	fp, #4
0f3d4     A7 FC 61 FC | 	wrlong	result2, fp
0f3d8     04 4E 05 F1 | 	add	fp, #4
0f3dc     A7 26 62 FC | 	wrlong	local01, fp
0f3e0     08 4E 85 F1 | 	sub	fp, #8
0f3e4     A7 12 02 F6 | 	mov	arg01, fp
0f3e8     38 E4 BF FD | 	call	#_converttoint
0f3ec     10 4E 05 F1 | 	add	fp, #16
0f3f0     A7 FA 61 FC | 	wrlong	result1, fp
0f3f4     FD 12 02 F6 | 	mov	arg01, result1
0f3f8     10 4E 85 F1 | 	sub	fp, #16
0f3fc     90 9C B1 FD | 	call	#__system__Chr_S
0f400     A7 FA 61 FC | 	wrlong	result1, fp
0f404     08 4E 05 F1 | 	add	fp, #8
0f408     A7 3E 68 FC | 	wrlong	#31, fp
0f40c     08 4E 85 F1 | 	sub	fp, #8
0f410     A7 12 02 F6 | 	mov	arg01, fp
0f414     C0 E2 BF FD | 	call	#_push
0f418                 | LR__1251
0f418     A7 F0 03 F6 | 	mov	ptra, fp
0f41c     B2 00 A0 FD | 	call	#popregs_
0f420                 | _do_chr_ret
0f420     2D 00 64 FD | 	ret
0f424                 | 
0f424                 | ' 
0f424                 | ' '-------------------- circle
0f424                 | ' 
0f424                 | ' sub do_circle
0f424                 | _do_circle
0f424     02 4A 05 F6 | 	mov	COUNT_, #2
0f428     A8 00 A0 FD | 	call	#pushregs_
0f42c     24 F0 07 F1 | 	add	ptra, #36
0f430     0C E2 BF FD | 	call	#_pop
0f434     FD 18 02 F6 | 	mov	arg04, result1
0f438     FE 16 02 F6 | 	mov	arg03, result2
0f43c     FF 14 02 F6 | 	mov	arg02, result3
0f440     18 4E 05 F1 | 	add	fp, #24
0f444     A7 18 62 FC | 	wrlong	arg04, fp
0f448     04 4E 05 F1 | 	add	fp, #4
0f44c     A7 16 62 FC | 	wrlong	arg03, fp
0f450     04 4E 05 F1 | 	add	fp, #4
0f454     A7 14 62 FC | 	wrlong	arg02, fp
0f458     20 4E 85 F1 | 	sub	fp, #32
0f45c     E0 E1 BF FD | 	call	#_pop
0f460     FD 18 02 F6 | 	mov	arg04, result1
0f464     FE 16 02 F6 | 	mov	arg03, result2
0f468     FF 26 02 F6 | 	mov	local01, result3
0f46c     0C 4E 05 F1 | 	add	fp, #12
0f470     A7 18 62 FC | 	wrlong	arg04, fp
0f474     04 4E 05 F1 | 	add	fp, #4
0f478     A7 16 62 FC | 	wrlong	arg03, fp
0f47c     04 4E 05 F1 | 	add	fp, #4
0f480     A7 26 62 FC | 	wrlong	local01, fp
0f484     14 4E 85 F1 | 	sub	fp, #20
0f488     B4 E1 BF FD | 	call	#_pop
0f48c     A7 FA 61 FC | 	wrlong	result1, fp
0f490     04 4E 05 F1 | 	add	fp, #4
0f494     A7 FC 61 FC | 	wrlong	result2, fp
0f498     04 4E 05 F1 | 	add	fp, #4
0f49c     A7 FE 61 FC | 	wrlong	result3, fp
0f4a0                 | ' 
0f4a0                 | ' t3=pop()
0f4a0                 | ' t2=pop()
0f4a0                 | ' t1=pop()
0f4a0                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
0f4a0     FF 18 02 F6 | 	mov	arg04, result3
0f4a4     08 4E 85 F1 | 	sub	fp, #8
0f4a8     1C 18 0E F2 | 	cmp	arg04, #28 wz
0f4ac     08 4E 05 51 |  if_ne	add	fp, #8
0f4b0     A7 26 02 5B |  if_ne	rdlong	local01, fp
0f4b4     08 4E 85 51 |  if_ne	sub	fp, #8
0f4b8     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
0f4bc     7C 00 90 5D |  if_ne	jmp	#LR__1260
0f4c0     14 4E 05 F1 | 	add	fp, #20
0f4c4     A7 26 02 FB | 	rdlong	local01, fp
0f4c8     14 4E 85 F1 | 	sub	fp, #20
0f4cc     1C 26 0E F2 | 	cmp	local01, #28 wz
0f4d0     14 4E 05 51 |  if_ne	add	fp, #20
0f4d4     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f4d8     14 4E 85 51 |  if_ne	sub	fp, #20
0f4dc     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f4e0     58 00 90 5D |  if_ne	jmp	#LR__1260
0f4e4     20 4E 05 F1 | 	add	fp, #32
0f4e8     A7 26 02 FB | 	rdlong	local01, fp
0f4ec     20 4E 85 F1 | 	sub	fp, #32
0f4f0     1C 26 0E F2 | 	cmp	local01, #28 wz
0f4f4     20 4E 05 51 |  if_ne	add	fp, #32
0f4f8     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f4fc     20 4E 85 51 |  if_ne	sub	fp, #32
0f500     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f504     34 00 90 5D |  if_ne	jmp	#LR__1260
0f508     A7 12 02 FB | 	rdlong	arg01, fp
0f50c     0C 4E 05 F1 | 	add	fp, #12
0f510     A7 14 02 FB | 	rdlong	arg02, fp
0f514     0C 4E 05 F1 | 	add	fp, #12
0f518     A7 16 02 FB | 	rdlong	arg03, fp
0f51c     18 4E 85 F1 | 	sub	fp, #24
0f520     37 00 00 FF 
0f524     28 E4 05 F1 | 	add	objptr, ##28200
0f528     F2 18 02 FB | 	rdlong	arg04, objptr
0f52c     37 00 00 FF 
0f530     28 E4 85 F1 | 	sub	objptr, ##28200
0f534     D0 57 B1 FD | 	call	#_hg010b_spin2_circle
0f538                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
0f538     54 00 90 FD | 	jmp	#LR__1261
0f53c                 | LR__1260
0f53c     A7 12 02 F6 | 	mov	arg01, fp
0f540     E0 E2 BF FD | 	call	#_converttoint
0f544     FD 26 02 F6 | 	mov	local01, result1
0f548     0C 4E 05 F1 | 	add	fp, #12
0f54c     A7 12 02 F6 | 	mov	arg01, fp
0f550     0C 4E 85 F1 | 	sub	fp, #12
0f554     CC E2 BF FD | 	call	#_converttoint
0f558     FD 28 02 F6 | 	mov	local02, result1
0f55c     18 4E 05 F1 | 	add	fp, #24
0f560     A7 12 02 F6 | 	mov	arg01, fp
0f564     18 4E 85 F1 | 	sub	fp, #24
0f568     B8 E2 BF FD | 	call	#_converttoint
0f56c     FD 16 02 F6 | 	mov	arg03, result1
0f570     37 00 00 FF 
0f574     28 E4 05 F1 | 	add	objptr, ##28200
0f578     F2 18 02 FB | 	rdlong	arg04, objptr
0f57c     37 00 00 FF 
0f580     28 E4 85 F1 | 	sub	objptr, ##28200
0f584     13 13 02 F6 | 	mov	arg01, local01
0f588     14 15 02 F6 | 	mov	arg02, local02
0f58c     78 57 B1 FD | 	call	#_hg010b_spin2_circle
0f590                 | LR__1261
0f590     A7 F0 03 F6 | 	mov	ptra, fp
0f594     B2 00 A0 FD | 	call	#popregs_
0f598                 | _do_circle_ret
0f598     2D 00 64 FD | 	ret
0f59c                 | 
0f59c                 | ' 
0f59c                 | ' '-------------------- click
0f59c                 | ' 
0f59c                 | ' sub do_click
0f59c                 | _do_click
0f59c     A0 E0 BF FD | 	call	#_pop
0f5a0     00 FA 4D F2 | 	cmps	result1, #0 wz
0f5a4                 | ' 
0f5a4                 | ' t1=pop()
0f5a4                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
0f5a4     50 00 00 AF 
0f5a8     3C E5 05 A1 |  if_e	add	objptr, ##41276
0f5ac     F2 00 68 AC |  if_e	wrlong	#0, objptr
0f5b0     50 00 00 FF 
0f5b4     3C E5 C5 F3 | 	sumz	objptr, ##41276
0f5b8     F2 02 68 5C |  if_ne	wrlong	#1, objptr
0f5bc     50 00 00 5F 
0f5c0     3C E5 85 51 |  if_ne	sub	objptr, ##41276
0f5c4                 | _do_click_ret
0f5c4     2D 00 64 FD | 	ret
0f5c8                 | 
0f5c8                 | ' 
0f5c8                 | ' '-------------------- close
0f5c8                 | ' 
0f5c8                 | ' sub do_close
0f5c8                 | _do_close
0f5c8     03 4A 05 F6 | 	mov	COUNT_, #3
0f5cc     A8 00 A0 FD | 	call	#pushregs_
0f5d0     6C E0 BF FD | 	call	#_pop
0f5d4     FD 26 02 F6 | 	mov	local01, result1
0f5d8     FF 16 02 F6 | 	mov	arg03, result3
0f5dc     FE 28 02 F6 | 	mov	local02, result2
0f5e0     0B 2B 02 F6 | 	mov	local03, arg03
0f5e4                 | ' 
0f5e4                 | ' numpar=compiledline(lineptr_e).result.uresult
0f5e4                 | ' t1=pop()
0f5e4                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
0f5e4     2C 2A 0E F2 | 	cmp	local03, #44 wz
0f5e8     44 00 90 AD |  if_e	jmp	#LR__1270
0f5ec     00 12 06 F6 | 	mov	arg01, #0
0f5f0     84 D5 B1 FD | 	call	#__system___getiolock_0611
0f5f4     FD 12 02 F6 | 	mov	arg01, result1
0f5f8     54 78 B1 FD | 	call	#__system___lockmem
0f5fc     B8 01 00 FF 
0f600     C4 15 06 F6 | 	mov	arg02, ##@LR__5888
0f604     00 12 06 F6 | 	mov	arg01, #0
0f608     00 16 06 F6 | 	mov	arg03, #0
0f60c     34 85 B1 FD | 	call	#__system___basic_print_string
0f610     00 12 06 F6 | 	mov	arg01, #0
0f614     0A 14 06 F6 | 	mov	arg02, #10
0f618     00 16 06 F6 | 	mov	arg03, #0
0f61c     CC 84 B1 FD | 	call	#__system___basic_print_char
0f620     00 12 06 F6 | 	mov	arg01, #0
0f624     50 D5 B1 FD | 	call	#__system___getiolock_0611
0f628     FD 00 68 FC | 	wrlong	#0, result1
0f62c     08 00 90 FD | 	jmp	#LR__1271
0f630                 | LR__1270
0f630                 | ' channel  = t1.result.iresult
0f630                 | ' close #channel
0f630     13 13 02 F6 | 	mov	arg01, local01
0f634     70 CB B1 FD | 	call	#__system__close
0f638                 | LR__1271
0f638     A7 F0 03 F6 | 	mov	ptra, fp
0f63c     B2 00 A0 FD | 	call	#popregs_
0f640                 | _do_close_ret
0f640     2D 00 64 FD | 	ret
0f644                 | 
0f644                 | ' 
0f644                 | ' '-------------------- cls
0f644                 | ' 
0f644                 | ' sub do_cls
0f644                 | _do_cls
0f644     37 00 00 FF 
0f648     3C E4 05 F1 | 	add	objptr, ##28220
0f64c     F2 12 02 FB | 	rdlong	arg01, objptr
0f650     04 E4 85 F1 | 	sub	objptr, #4
0f654     F2 14 02 FB | 	rdlong	arg02, objptr
0f658     37 00 00 FF 
0f65c     38 E4 85 F1 | 	sub	objptr, ##28216
0f660     68 5B B1 FD | 	call	#_hg010b_spin2_cls
0f664     37 00 00 FF 
0f668     3C E4 05 F1 | 	add	objptr, ##28220
0f66c     F2 14 02 FB | 	rdlong	arg02, objptr
0f670     14 E4 85 F1 | 	sub	objptr, #20
0f674     F2 14 62 FC | 	wrlong	arg02, objptr
0f678     37 00 00 FF 
0f67c     28 E4 85 F1 | 	sub	objptr, ##28200
0f680                 | _do_cls_ret
0f680     2D 00 64 FD | 	ret
0f684                 | 
0f684                 | ' 
0f684                 | ' sub do_coginit
0f684                 | _do_coginit
0f684     00 4A 05 F6 | 	mov	COUNT_, #0
0f688     A8 00 A0 FD | 	call	#pushregs_
0f68c     08 00 00 FF 
0f690     1C F0 07 F1 | 	add	ptra, ##4124
0f694     4A 00 00 FF 
0f698     80 E4 05 F1 | 	add	objptr, ##38016
0f69c     F2 FA 01 FB | 	rdlong	result1, objptr
0f6a0     FD FC 01 F6 | 	mov	result2, result1
0f6a4     01 FC 65 F0 | 	shl	result2, #1
0f6a8     FD FC 01 F1 | 	add	result2, result1
0f6ac     02 FC 65 F0 | 	shl	result2, #2
0f6b0     03 00 00 FF 
0f6b4     04 E4 85 F1 | 	sub	objptr, ##1540
0f6b8     F2 FC 01 F1 | 	add	result2, objptr
0f6bc     FE FC 01 FB | 	rdlong	result2, result2
0f6c0     A7 FC 61 FC | 	wrlong	result2, fp
0f6c4                 | ' numpar=compiledline(lineptr_e).result.uresult
0f6c4                 | ' if numpar<2 orelse numpar>3 then print "coginit: "; : printerror(39) : return
0f6c4     02 FC 55 F2 | 	cmps	result2, #2 wc
0f6c8     47 00 00 FF 
0f6cc     7C E4 85 F1 | 	sub	objptr, ##36476
0f6d0     0C 00 90 CD |  if_b	jmp	#LR__1280
0f6d4     A7 FA 01 FB | 	rdlong	result1, fp
0f6d8     04 FA 55 F2 | 	cmps	result1, #4 wc
0f6dc     40 00 90 CD |  if_b	jmp	#LR__1281
0f6e0                 | LR__1280
0f6e0     00 12 06 F6 | 	mov	arg01, #0
0f6e4     90 D4 B1 FD | 	call	#__system___getiolock_0611
0f6e8     FD 12 02 F6 | 	mov	arg01, result1
0f6ec     60 77 B1 FD | 	call	#__system___lockmem
0f6f0     B8 01 00 FF 
0f6f4     D6 15 06 F6 | 	mov	arg02, ##@LR__5889
0f6f8     00 12 06 F6 | 	mov	arg01, #0
0f6fc     00 16 06 F6 | 	mov	arg03, #0
0f700     40 84 B1 FD | 	call	#__system___basic_print_string
0f704     00 12 06 F6 | 	mov	arg01, #0
0f708     6C D4 B1 FD | 	call	#__system___getiolock_0611
0f70c     FD 00 68 FC | 	wrlong	#0, result1
0f710     27 12 06 F6 | 	mov	arg01, #39
0f714     00 14 06 F6 | 	mov	arg02, #0
0f718     18 3D B1 FD | 	call	#_printerror
0f71c     94 01 90 FD | 	jmp	#LR__1285
0f720                 | LR__1281
0f720     1C DF BF FD | 	call	#_pop
0f724     FF 16 02 F6 | 	mov	arg03, result3
0f728     08 00 00 FF 
0f72c     10 4E 05 F1 | 	add	fp, ##4112
0f730     A7 FA 61 FC | 	wrlong	result1, fp
0f734     04 4E 05 F1 | 	add	fp, #4
0f738     A7 FC 61 FC | 	wrlong	result2, fp
0f73c     04 4E 05 F1 | 	add	fp, #4
0f740     A7 16 62 FC | 	wrlong	arg03, fp
0f744     08 4E 85 F1 | 	sub	fp, #8
0f748     A7 12 02 F6 | 	mov	arg01, fp
0f74c     08 00 00 FF 
0f750     10 4E 85 F1 | 	sub	fp, ##4112
0f754     CC E0 BF FD | 	call	#_converttoint
0f758     FD 16 02 F6 | 	mov	arg03, result1
0f75c     04 4E 05 F1 | 	add	fp, #4
0f760     A7 16 62 FC | 	wrlong	arg03, fp
0f764     04 4E 85 F1 | 	sub	fp, #4
0f768     D4 DE BF FD | 	call	#_pop
0f76c     FF 16 02 F6 | 	mov	arg03, result3
0f770     08 00 00 FF 
0f774     10 4E 05 F1 | 	add	fp, ##4112
0f778     A7 FA 61 FC | 	wrlong	result1, fp
0f77c     04 4E 05 F1 | 	add	fp, #4
0f780     A7 FC 61 FC | 	wrlong	result2, fp
0f784     04 4E 05 F1 | 	add	fp, #4
0f788     A7 16 62 FC | 	wrlong	arg03, fp
0f78c     08 4E 85 F1 | 	sub	fp, #8
0f790     A7 12 02 F6 | 	mov	arg01, fp
0f794     08 00 00 FF 
0f798     10 4E 85 F1 | 	sub	fp, ##4112
0f79c     84 E0 BF FD | 	call	#_converttoint
0f7a0     08 4E 05 F1 | 	add	fp, #8
0f7a4     A7 FA 61 FC | 	wrlong	result1, fp
0f7a8     08 4E 85 F1 | 	sub	fp, #8
0f7ac                 | ' t1=pop()
0f7ac                 | ' ptra_val=converttoint(t1)
0f7ac                 | ' t1=pop()
0f7ac                 | ' addrval=converttoint(t1)
0f7ac                 | ' if numpar=3 then 
0f7ac     A7 FA 01 FB | 	rdlong	result1, fp
0f7b0     03 FA 0D F2 | 	cmp	result1, #3 wz
0f7b4     48 00 90 5D |  if_ne	jmp	#LR__1282
0f7b8     84 DE BF FD | 	call	#_pop
0f7bc     FF 16 02 F6 | 	mov	arg03, result3
0f7c0     08 00 00 FF 
0f7c4     10 4E 05 F1 | 	add	fp, ##4112
0f7c8     A7 FA 61 FC | 	wrlong	result1, fp
0f7cc     04 4E 05 F1 | 	add	fp, #4
0f7d0     A7 FC 61 FC | 	wrlong	result2, fp
0f7d4     04 4E 05 F1 | 	add	fp, #4
0f7d8     A7 16 62 FC | 	wrlong	arg03, fp
0f7dc     08 4E 85 F1 | 	sub	fp, #8
0f7e0     A7 12 02 F6 | 	mov	arg01, fp
0f7e4     08 00 00 FF 
0f7e8     10 4E 85 F1 | 	sub	fp, ##4112
0f7ec     34 E0 BF FD | 	call	#_converttoint
0f7f0     0C 4E 05 F1 | 	add	fp, #12
0f7f4     A7 FA 61 FC | 	wrlong	result1, fp
0f7f8     0C 4E 85 F1 | 	sub	fp, #12
0f7fc     0C 00 90 FD | 	jmp	#LR__1283
0f800                 | LR__1282
0f800     0C 4E 05 F1 | 	add	fp, #12
0f804     A7 20 68 FC | 	wrlong	#16, fp
0f808     0C 4E 85 F1 | 	sub	fp, #12
0f80c                 | LR__1283
0f80c                 | '     
0f80c                 | ' if addrval>$80000 then psram.read1(varptr(tempbuf(0)),addrval,4096) : addrval=varptr(tempbuf(0))
0f80c     08 4E 05 F1 | 	add	fp, #8
0f810     A7 16 02 FB | 	rdlong	arg03, fp
0f814     08 4E 85 F1 | 	sub	fp, #8
0f818     00 04 00 FF 
0f81c     01 16 56 F2 | 	cmps	arg03, ##524289 wc
0f820     40 00 90 CD |  if_b	jmp	#LR__1284
0f824     10 4E 05 F1 | 	add	fp, #16
0f828     A7 12 02 F6 | 	mov	arg01, fp
0f82c     08 4E 85 F1 | 	sub	fp, #8
0f830     A7 14 02 FB | 	rdlong	arg02, fp
0f834     08 4E 85 F1 | 	sub	fp, #8
0f838     0C 16 C6 F9 | 	decod	arg03, #12
0f83c     0B 00 00 FF 
0f840     CC E4 05 F1 | 	add	objptr, ##5836
0f844     80 69 B1 FD | 	call	#_psram_spin2_read1
0f848     0B 00 00 FF 
0f84c     CC E4 85 F1 | 	sub	objptr, ##5836
0f850     10 4E 05 F1 | 	add	fp, #16
0f854     A7 FA 01 F6 | 	mov	result1, fp
0f858     08 4E 85 F1 | 	sub	fp, #8
0f85c     A7 FA 61 FC | 	wrlong	result1, fp
0f860     08 4E 85 F1 | 	sub	fp, #8
0f864                 | LR__1284
0f864     0C 4E 05 F1 | 	add	fp, #12
0f868     A7 FA 01 FB | 	rdlong	result1, fp
0f86c     04 4E 85 F1 | 	sub	fp, #4
0f870     A7 14 02 FB | 	rdlong	arg02, fp
0f874     04 4E 85 F1 | 	sub	fp, #4
0f878     A7 16 02 FB | 	rdlong	arg03, fp
0f87c                 | ' 
0f87c                 | '  asm
0f87c     28 16 62 FD | 	setq	arg03
0f880     0A FB F1 FC | 	coginit	result1, arg02 wc
0f884                 | '  
0f884                 | ' return cog 
0f884     08 4E 05 F1 | 	add	fp, #8
0f888     A7 FA 61 FC | 	wrlong	result1, fp
0f88c     08 00 00 FF 
0f890     04 4E 05 F1 | 	add	fp, ##4100
0f894     A7 FA 61 FC | 	wrlong	result1, fp
0f898     08 4E 05 F1 | 	add	fp, #8
0f89c     A7 38 68 FC | 	wrlong	#28, fp
0f8a0     08 4E 85 F1 | 	sub	fp, #8
0f8a4     A7 12 02 F6 | 	mov	arg01, fp
0f8a8     08 00 00 FF 
0f8ac     10 4E 85 F1 | 	sub	fp, ##4112
0f8b0     24 DE BF FD | 	call	#_push
0f8b4                 | LR__1285
0f8b4     A7 F0 03 F6 | 	mov	ptra, fp
0f8b8     B2 00 A0 FD | 	call	#popregs_
0f8bc                 | _do_coginit_ret
0f8bc     2D 00 64 FD | 	ret
0f8c0                 | 
0f8c0                 | ' 
0f8c0                 | ' '-------------------- cogstop
0f8c0                 | ' 
0f8c0                 | ' sub do_cogstop
0f8c0                 | _do_cogstop
0f8c0     00 4A 05 F6 | 	mov	COUNT_, #0
0f8c4     A8 00 A0 FD | 	call	#pushregs_
0f8c8     0C F0 07 F1 | 	add	ptra, #12
0f8cc     70 DD BF FD | 	call	#_pop
0f8d0     A7 FA 61 FC | 	wrlong	result1, fp
0f8d4     04 4E 05 F1 | 	add	fp, #4
0f8d8     A7 FC 61 FC | 	wrlong	result2, fp
0f8dc     04 4E 05 F1 | 	add	fp, #4
0f8e0     A7 FE 61 FC | 	wrlong	result3, fp
0f8e4     08 4E 85 F1 | 	sub	fp, #8
0f8e8     A7 12 02 F6 | 	mov	arg01, fp
0f8ec     34 DF BF FD | 	call	#_converttoint
0f8f0     03 FA 61 FD | 	cogstop	result1
0f8f4     A7 F0 03 F6 | 	mov	ptra, fp
0f8f8     B2 00 A0 FD | 	call	#popregs_
0f8fc                 | _do_cogstop_ret
0f8fc     2D 00 64 FD | 	ret
0f900                 | 
0f900                 | ' 
0f900                 | ' '-------------------- color
0f900                 | ' 
0f900                 | ' sub do_color
0f900                 | _do_color
0f900     03 4A 05 F6 | 	mov	COUNT_, #3
0f904     A8 00 A0 FD | 	call	#pushregs_
0f908     34 DD BF FD | 	call	#_pop
0f90c     FD 26 02 F6 | 	mov	local01, result1
0f910     FE 28 02 F6 | 	mov	local02, result2
0f914     FF 2A 02 F6 | 	mov	local03, result3
0f918     37 00 00 FF 
0f91c     28 E4 05 F1 | 	add	objptr, ##28200
0f920     F2 26 62 FC | 	wrlong	local01, objptr
0f924     37 00 00 FF 
0f928     28 E4 85 F1 | 	sub	objptr, ##28200
0f92c     A7 F0 03 F6 | 	mov	ptra, fp
0f930     B2 00 A0 FD | 	call	#popregs_
0f934                 | _do_color_ret
0f934     2D 00 64 FD | 	ret
0f938                 | 
0f938                 | ' 
0f938                 | ' '-------------------- copy
0f938                 | ' 
0f938                 | ' sub do_copy
0f938                 | _do_copy
0f938     08 4A 05 F6 | 	mov	COUNT_, #8
0f93c     A8 00 A0 FD | 	call	#pushregs_
0f940     FC DC BF FD | 	call	#_pop
0f944     FD 26 02 F6 | 	mov	local01, result1
0f948     FE 1A 02 F6 | 	mov	arg05, result2
0f94c     FF 18 02 F6 | 	mov	arg04, result3
0f950     0D 29 02 F6 | 	mov	local02, arg05
0f954     0C 2B 02 F6 | 	mov	local03, arg04
0f958     E4 DC BF FD | 	call	#_pop
0f95c     FE 1A 02 F6 | 	mov	arg05, result2
0f960     FF 18 02 F6 | 	mov	arg04, result3
0f964     FD 2C 02 F6 | 	mov	local04, result1
0f968     0D 2F 02 F6 | 	mov	local05, arg05
0f96c     0C 31 02 F6 | 	mov	local06, arg04
0f970                 | ' 
0f970                 | ' t1=pop()
0f970                 | ' t2=pop()
0f970                 | ' if t2.result_type=result_string2 then 
0f970     2B 30 0E F2 | 	cmp	local06, #43 wz
0f974     10 00 90 5D |  if_ne	jmp	#LR__1290
0f978     16 13 02 F6 | 	mov	arg01, local04
0f97c     38 DE BF FD | 	call	#_convertstring
0f980     FD 32 02 F6 | 	mov	local07, result1
0f984     2C 00 90 FD | 	jmp	#LR__1292
0f988                 | LR__1290
0f988     1F 30 0E F2 | 	cmp	local06, #31 wz
0f98c     16 33 02 A6 |  if_e	mov	local07, local04
0f990     20 00 90 AD |  if_e	jmp	#LR__1291
0f994     50 00 00 FF 
0f998     F0 E4 05 F1 | 	add	objptr, ##41200
0f99c     F2 14 02 FB | 	rdlong	arg02, objptr
0f9a0     50 00 00 FF 
0f9a4     F0 E4 85 F1 | 	sub	objptr, ##41200
0f9a8     0F 12 06 F6 | 	mov	arg01, #15
0f9ac     84 3A B1 FD | 	call	#_printerror
0f9b0                 | '   printerror(15,runheader(0)) : return
0f9b0     50 03 90 FD | 	jmp	#LR__1299
0f9b4                 | LR__1291
0f9b4                 | LR__1292
0f9b4                 | ' if t1.result_type=result_string2 then 
0f9b4     2B 2A 0E F2 | 	cmp	local03, #43 wz
0f9b8     10 00 90 5D |  if_ne	jmp	#LR__1293
0f9bc     13 13 02 F6 | 	mov	arg01, local01
0f9c0     F4 DD BF FD | 	call	#_convertstring
0f9c4     FD 34 02 F6 | 	mov	local08, result1
0f9c8     2C 00 90 FD | 	jmp	#LR__1295
0f9cc                 | LR__1293
0f9cc     1F 2A 0E F2 | 	cmp	local03, #31 wz
0f9d0     13 35 02 A6 |  if_e	mov	local08, local01
0f9d4     20 00 90 AD |  if_e	jmp	#LR__1294
0f9d8     50 00 00 FF 
0f9dc     F0 E4 05 F1 | 	add	objptr, ##41200
0f9e0     F2 14 02 FB | 	rdlong	arg02, objptr
0f9e4     50 00 00 FF 
0f9e8     F0 E4 85 F1 | 	sub	objptr, ##41200
0f9ec     0F 12 06 F6 | 	mov	arg01, #15
0f9f0     40 3A B1 FD | 	call	#_printerror
0f9f4                 | '   printerror(15,runheader(0)) : return
0f9f4     0C 03 90 FD | 	jmp	#LR__1299
0f9f8                 | LR__1294
0f9f8                 | LR__1295
0f9f8                 | ' 
0f9f8                 | ' open filename_1 for input as #9 : err=geterr(): if err<>0 then print "System error - ";err; " in line ";runheader(0);": ";strerror$(err);", file name: ";filename_1 : close #9 : return
0f9f8     09 12 06 F6 | 	mov	arg01, #9
0f9fc     19 15 02 F6 | 	mov	arg02, local07
0fa00     00 16 06 F6 | 	mov	arg03, #0
0fa04     4C 80 B1 FD | 	call	#__system___basic_open_string
0fa08     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0fa0c     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0fa10     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0fa14     52 00 00 FF 
0fa18     D8 E4 05 F1 | 	add	objptr, ##42200
0fa1c     F2 FA 61 FC | 	wrlong	result1, objptr
0fa20     52 00 00 FF 
0fa24     D8 E4 85 F1 | 	sub	objptr, ##42200
0fa28     0C 01 90 AD |  if_e	jmp	#LR__1296
0fa2c     00 12 06 F6 | 	mov	arg01, #0
0fa30     44 D1 B1 FD | 	call	#__system___getiolock_0611
0fa34     FD 12 02 F6 | 	mov	arg01, result1
0fa38     14 74 B1 FD | 	call	#__system___lockmem
0fa3c     B8 01 00 FF 
0fa40     E0 15 06 F6 | 	mov	arg02, ##@LR__5890
0fa44     00 12 06 F6 | 	mov	arg01, #0
0fa48     00 16 06 F6 | 	mov	arg03, #0
0fa4c     F4 80 B1 FD | 	call	#__system___basic_print_string
0fa50     52 00 00 FF 
0fa54     D8 E4 05 F1 | 	add	objptr, ##42200
0fa58     F2 14 02 FB | 	rdlong	arg02, objptr
0fa5c     52 00 00 FF 
0fa60     D8 E4 85 F1 | 	sub	objptr, ##42200
0fa64     00 12 06 F6 | 	mov	arg01, #0
0fa68     00 16 06 F6 | 	mov	arg03, #0
0fa6c     0A 18 06 F6 | 	mov	arg04, #10
0fa70     14 81 B1 FD | 	call	#__system___basic_print_integer
0fa74     B8 01 00 FF 
0fa78     F0 15 06 F6 | 	mov	arg02, ##@LR__5891
0fa7c     00 12 06 F6 | 	mov	arg01, #0
0fa80     00 16 06 F6 | 	mov	arg03, #0
0fa84     BC 80 B1 FD | 	call	#__system___basic_print_string
0fa88     50 00 00 FF 
0fa8c     F0 E4 05 F1 | 	add	objptr, ##41200
0fa90     F2 14 02 FB | 	rdlong	arg02, objptr
0fa94     50 00 00 FF 
0fa98     F0 E4 85 F1 | 	sub	objptr, ##41200
0fa9c     00 12 06 F6 | 	mov	arg01, #0
0faa0     00 16 06 F6 | 	mov	arg03, #0
0faa4     0A 18 06 F6 | 	mov	arg04, #10
0faa8     1C 81 B1 FD | 	call	#__system___basic_print_unsigned
0faac     B8 01 00 FF 
0fab0     FA 15 06 F6 | 	mov	arg02, ##@LR__5892
0fab4     00 12 06 F6 | 	mov	arg01, #0
0fab8     00 16 06 F6 | 	mov	arg03, #0
0fabc     84 80 B1 FD | 	call	#__system___basic_print_string
0fac0     00 34 06 F6 | 	mov	local08, #0
0fac4     52 00 00 FF 
0fac8     D8 E4 05 F1 | 	add	objptr, ##42200
0facc     F2 12 02 FB | 	rdlong	arg01, objptr
0fad0     52 00 00 FF 
0fad4     D8 E4 85 F1 | 	sub	objptr, ##42200
0fad8     00 9D B1 FD | 	call	#__system___strerror
0fadc     FD 14 02 F6 | 	mov	arg02, result1
0fae0     1A 13 02 F6 | 	mov	arg01, local08
0fae4     00 16 06 F6 | 	mov	arg03, #0
0fae8     58 80 B1 FD | 	call	#__system___basic_print_string
0faec     B8 01 00 FF 
0faf0     FD 15 06 F6 | 	mov	arg02, ##@LR__5893
0faf4     00 12 06 F6 | 	mov	arg01, #0
0faf8     00 16 06 F6 | 	mov	arg03, #0
0fafc     44 80 B1 FD | 	call	#__system___basic_print_string
0fb00     00 12 06 F6 | 	mov	arg01, #0
0fb04     19 15 02 F6 | 	mov	arg02, local07
0fb08     00 16 06 F6 | 	mov	arg03, #0
0fb0c     34 80 B1 FD | 	call	#__system___basic_print_string
0fb10     00 12 06 F6 | 	mov	arg01, #0
0fb14     0A 14 06 F6 | 	mov	arg02, #10
0fb18     00 16 06 F6 | 	mov	arg03, #0
0fb1c     CC 7F B1 FD | 	call	#__system___basic_print_char
0fb20     00 12 06 F6 | 	mov	arg01, #0
0fb24     50 D0 B1 FD | 	call	#__system___getiolock_0611
0fb28     FD 00 68 FC | 	wrlong	#0, result1
0fb2c     09 12 06 F6 | 	mov	arg01, #9
0fb30     74 C6 B1 FD | 	call	#__system__close
0fb34     CC 01 90 FD | 	jmp	#LR__1299
0fb38                 | LR__1296
0fb38                 | ' open filename_2 for output as #8 : err=geterr(): if err<>0 then print "System error - ";err; " in line ";runheader(0);": ";strerror$(err);", file name: ";filename_2  : close #8 : return
0fb38     08 12 06 F6 | 	mov	arg01, #8
0fb3c     1A 15 02 F6 | 	mov	arg02, local08
0fb40     0D 16 06 F6 | 	mov	arg03, #13
0fb44     0C 7F B1 FD | 	call	#__system___basic_open_string
0fb48     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0fb4c     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0fb50     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0fb54     52 00 00 FF 
0fb58     D8 E4 05 F1 | 	add	objptr, ##42200
0fb5c     F2 FA 61 FC | 	wrlong	result1, objptr
0fb60     52 00 00 FF 
0fb64     D8 E4 85 F1 | 	sub	objptr, ##42200
0fb68     0C 01 90 AD |  if_e	jmp	#LR__1297
0fb6c     00 12 06 F6 | 	mov	arg01, #0
0fb70     04 D0 B1 FD | 	call	#__system___getiolock_0611
0fb74     FD 12 02 F6 | 	mov	arg01, result1
0fb78     D4 72 B1 FD | 	call	#__system___lockmem
0fb7c     B9 01 00 FF 
0fb80     0B 14 06 F6 | 	mov	arg02, ##@LR__5894
0fb84     00 12 06 F6 | 	mov	arg01, #0
0fb88     00 16 06 F6 | 	mov	arg03, #0
0fb8c     B4 7F B1 FD | 	call	#__system___basic_print_string
0fb90     52 00 00 FF 
0fb94     D8 E4 05 F1 | 	add	objptr, ##42200
0fb98     F2 14 02 FB | 	rdlong	arg02, objptr
0fb9c     52 00 00 FF 
0fba0     D8 E4 85 F1 | 	sub	objptr, ##42200
0fba4     00 12 06 F6 | 	mov	arg01, #0
0fba8     00 16 06 F6 | 	mov	arg03, #0
0fbac     0A 18 06 F6 | 	mov	arg04, #10
0fbb0     D4 7F B1 FD | 	call	#__system___basic_print_integer
0fbb4     B9 01 00 FF 
0fbb8     1B 14 06 F6 | 	mov	arg02, ##@LR__5895
0fbbc     00 12 06 F6 | 	mov	arg01, #0
0fbc0     00 16 06 F6 | 	mov	arg03, #0
0fbc4     7C 7F B1 FD | 	call	#__system___basic_print_string
0fbc8     50 00 00 FF 
0fbcc     F0 E4 05 F1 | 	add	objptr, ##41200
0fbd0     F2 14 02 FB | 	rdlong	arg02, objptr
0fbd4     50 00 00 FF 
0fbd8     F0 E4 85 F1 | 	sub	objptr, ##41200
0fbdc     00 12 06 F6 | 	mov	arg01, #0
0fbe0     00 16 06 F6 | 	mov	arg03, #0
0fbe4     0A 18 06 F6 | 	mov	arg04, #10
0fbe8     DC 7F B1 FD | 	call	#__system___basic_print_unsigned
0fbec     B9 01 00 FF 
0fbf0     25 14 06 F6 | 	mov	arg02, ##@LR__5896
0fbf4     00 12 06 F6 | 	mov	arg01, #0
0fbf8     00 16 06 F6 | 	mov	arg03, #0
0fbfc     44 7F B1 FD | 	call	#__system___basic_print_string
0fc00     00 32 06 F6 | 	mov	local07, #0
0fc04     52 00 00 FF 
0fc08     D8 E4 05 F1 | 	add	objptr, ##42200
0fc0c     F2 12 02 FB | 	rdlong	arg01, objptr
0fc10     52 00 00 FF 
0fc14     D8 E4 85 F1 | 	sub	objptr, ##42200
0fc18     C0 9B B1 FD | 	call	#__system___strerror
0fc1c     FD 14 02 F6 | 	mov	arg02, result1
0fc20     19 13 02 F6 | 	mov	arg01, local07
0fc24     00 16 06 F6 | 	mov	arg03, #0
0fc28     18 7F B1 FD | 	call	#__system___basic_print_string
0fc2c     B9 01 00 FF 
0fc30     28 14 06 F6 | 	mov	arg02, ##@LR__5897
0fc34     00 12 06 F6 | 	mov	arg01, #0
0fc38     00 16 06 F6 | 	mov	arg03, #0
0fc3c     04 7F B1 FD | 	call	#__system___basic_print_string
0fc40     00 12 06 F6 | 	mov	arg01, #0
0fc44     1A 15 02 F6 | 	mov	arg02, local08
0fc48     00 16 06 F6 | 	mov	arg03, #0
0fc4c     F4 7E B1 FD | 	call	#__system___basic_print_string
0fc50     00 12 06 F6 | 	mov	arg01, #0
0fc54     0A 14 06 F6 | 	mov	arg02, #10
0fc58     00 16 06 F6 | 	mov	arg03, #0
0fc5c     8C 7E B1 FD | 	call	#__system___basic_print_char
0fc60     00 12 06 F6 | 	mov	arg01, #0
0fc64     10 CF B1 FD | 	call	#__system___getiolock_0611
0fc68     FD 00 68 FC | 	wrlong	#0, result1
0fc6c     08 12 06 F6 | 	mov	arg01, #8
0fc70     34 C5 B1 FD | 	call	#__system__close
0fc74     8C 00 90 FD | 	jmp	#LR__1299
0fc78                 | LR__1297
0fc78                 | ' 
0fc78                 | ' do
0fc78                 | LR__1298
0fc78                 | '   get #9,,block(0),1024,r
0fc78     4E 00 00 FF 
0fc7c     B4 E4 05 F1 | 	add	objptr, ##40116
0fc80     F2 16 02 F6 | 	mov	arg03, objptr
0fc84     4E 00 00 FF 
0fc88     B4 E4 85 F1 | 	sub	objptr, ##40116
0fc8c     09 12 06 F6 | 	mov	arg01, #9
0fc90     00 14 06 F6 | 	mov	arg02, #0
0fc94     0A 18 C6 F9 | 	decod	arg04, #10
0fc98     01 1A 06 F6 | 	mov	arg05, #1
0fc9c     20 80 B1 FD | 	call	#__system___basic_get
0fca0     52 00 00 FF 
0fca4     10 E5 05 F1 | 	add	objptr, ##42256
0fca8     F2 FA 61 FC | 	wrlong	result1, objptr
0fcac                 | '   put #8,,block(0),r
0fcac     04 00 00 FF 
0fcb0     5C E4 85 F1 | 	sub	objptr, ##2140
0fcb4     F2 16 02 F6 | 	mov	arg03, objptr
0fcb8     FD 18 02 F6 | 	mov	arg04, result1
0fcbc     4E 00 00 FF 
0fcc0     B4 E4 85 F1 | 	sub	objptr, ##40116
0fcc4     08 12 06 F6 | 	mov	arg01, #8
0fcc8     00 14 06 F6 | 	mov	arg02, #0
0fccc     01 1A 06 F6 | 	mov	arg05, #1
0fcd0     80 7F B1 FD | 	call	#__system___basic_put
0fcd4     52 00 00 FF 
0fcd8     10 E5 05 F1 | 	add	objptr, ##42256
0fcdc     F2 34 02 FB | 	rdlong	local08, objptr
0fce0     52 00 00 FF 
0fce4     10 E5 85 F1 | 	sub	objptr, ##42256
0fce8     02 00 00 FF 
0fcec     00 34 0E F2 | 	cmp	local08, ##1024 wz
0fcf0     84 FF 9F AD |  if_e	jmp	#LR__1298
0fcf4                 | ' close #8
0fcf4     08 12 06 F6 | 	mov	arg01, #8
0fcf8     AC C4 B1 FD | 	call	#__system__close
0fcfc                 | ' close #9
0fcfc     09 12 06 F6 | 	mov	arg01, #9
0fd00     A4 C4 B1 FD | 	call	#__system__close
0fd04                 | LR__1299
0fd04     A7 F0 03 F6 | 	mov	ptra, fp
0fd08     B2 00 A0 FD | 	call	#popregs_
0fd0c                 | _do_copy_ret
0fd0c     2D 00 64 FD | 	ret
0fd10                 | 
0fd10                 | ' 
0fd10                 | ' '-------------------- cos
0fd10                 | ' 
0fd10                 | ' sub do_cos
0fd10                 | _do_cos
0fd10     01 4A 05 F6 | 	mov	COUNT_, #1
0fd14     A8 00 A0 FD | 	call	#pushregs_
0fd18     10 F0 07 F1 | 	add	ptra, #16
0fd1c     4A 00 00 FF 
0fd20     80 E4 05 F1 | 	add	objptr, ##38016
0fd24     F2 26 02 FB | 	rdlong	local01, objptr
0fd28     13 17 02 F6 | 	mov	arg03, local01
0fd2c     01 16 66 F0 | 	shl	arg03, #1
0fd30     13 17 02 F1 | 	add	arg03, local01
0fd34     02 16 66 F0 | 	shl	arg03, #2
0fd38     03 00 00 FF 
0fd3c     04 E4 85 F1 | 	sub	objptr, ##1540
0fd40     F2 16 02 F1 | 	add	arg03, objptr
0fd44     0B 17 02 FB | 	rdlong	arg03, arg03
0fd48     0C 4E 05 F1 | 	add	fp, #12
0fd4c     A7 16 62 FC | 	wrlong	arg03, fp
0fd50                 | ' 
0fd50                 | ' numpar=compiledline(lineptr_e).result.uresult
0fd50                 | ' if numpar>1 orelse numpar=0 then print "cos: "; : printerror(39) : return
0fd50     0C 4E 85 F1 | 	sub	fp, #12
0fd54     02 16 16 F2 | 	cmp	arg03, #2 wc
0fd58     47 00 00 FF 
0fd5c     7C E4 85 F1 | 	sub	objptr, ##36476
0fd60     0C 4E 05 C1 |  if_b	add	fp, #12
0fd64     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0fd68     0C 4E 85 C1 |  if_b	sub	fp, #12
0fd6c     40 00 90 4D |  if_c_and_nz	jmp	#LR__1300
0fd70     00 12 06 F6 | 	mov	arg01, #0
0fd74     00 CE B1 FD | 	call	#__system___getiolock_0611
0fd78     FD 12 02 F6 | 	mov	arg01, result1
0fd7c     D0 70 B1 FD | 	call	#__system___lockmem
0fd80     B9 01 00 FF 
0fd84     36 14 06 F6 | 	mov	arg02, ##@LR__5898
0fd88     00 12 06 F6 | 	mov	arg01, #0
0fd8c     00 16 06 F6 | 	mov	arg03, #0
0fd90     B0 7D B1 FD | 	call	#__system___basic_print_string
0fd94     00 12 06 F6 | 	mov	arg01, #0
0fd98     DC CD B1 FD | 	call	#__system___getiolock_0611
0fd9c     FD 00 68 FC | 	wrlong	#0, result1
0fda0     27 12 06 F6 | 	mov	arg01, #39
0fda4     00 14 06 F6 | 	mov	arg02, #0
0fda8     88 36 B1 FD | 	call	#_printerror
0fdac     78 00 90 FD | 	jmp	#LR__1301
0fdb0                 | LR__1300
0fdb0     8C D8 BF FD | 	call	#_pop
0fdb4     A7 FA 61 FC | 	wrlong	result1, fp
0fdb8     04 4E 05 F1 | 	add	fp, #4
0fdbc     A7 FC 61 FC | 	wrlong	result2, fp
0fdc0     04 4E 05 F1 | 	add	fp, #4
0fdc4     A7 FE 61 FC | 	wrlong	result3, fp
0fdc8     08 4E 85 F1 | 	sub	fp, #8
0fdcc     52 00 00 FF 
0fdd0     A8 E4 05 F1 | 	add	objptr, ##42152
0fdd4     F2 26 02 FB | 	rdlong	local01, objptr
0fdd8     52 00 00 FF 
0fddc     A8 E4 85 F1 | 	sub	objptr, ##42152
0fde0     A7 12 02 F6 | 	mov	arg01, fp
0fde4     F8 DA BF FD | 	call	#_converttofloat
0fde8     FD 14 02 F6 | 	mov	arg02, result1
0fdec     13 13 02 F6 | 	mov	arg01, local01
0fdf0     D4 9E B1 FD | 	call	#__system___float_mul
0fdf4     FD 14 02 F6 | 	mov	arg02, result1
0fdf8     87 E4 1F FF 
0fdfc     DB 13 06 F6 | 	mov	arg01, ##1070141403
0fe00     1F 14 E6 F4 | 	bitnot	arg02, #31
0fe04     F0 9A B1 FD | 	call	#__system___float_add
0fe08     FD 12 02 F6 | 	mov	arg01, result1
0fe0c     18 A8 B1 FD | 	call	#__system____builtin_sinf
0fe10     A7 FA 61 FC | 	wrlong	result1, fp
0fe14     08 4E 05 F1 | 	add	fp, #8
0fe18     A7 3C 68 FC | 	wrlong	#30, fp
0fe1c     08 4E 85 F1 | 	sub	fp, #8
0fe20     A7 12 02 F6 | 	mov	arg01, fp
0fe24     B0 D8 BF FD | 	call	#_push
0fe28                 | LR__1301
0fe28     A7 F0 03 F6 | 	mov	ptra, fp
0fe2c     B2 00 A0 FD | 	call	#popregs_
0fe30                 | _do_cos_ret
0fe30     2D 00 64 FD | 	ret
0fe34                 | 
0fe34                 | ' 
0fe34                 | ' '-------------------- cursor
0fe34                 | ' 
0fe34                 | ' sub do_cursor
0fe34                 | _do_cursor
0fe34     08 D8 BF FD | 	call	#_pop
0fe38     00 FA 4D F2 | 	cmps	result1, #0 wz
0fe3c                 | ' t1=pop()
0fe3c                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
0fe3c     14 00 90 5D |  if_ne	jmp	#LR__1310
0fe40     11 12 06 F6 | 	mov	arg01, #17
0fe44     00 14 06 F6 | 	mov	arg02, #0
0fe48     00 16 06 F6 | 	mov	arg03, #0
0fe4c     2C 46 B1 FD | 	call	#_hg010b_spin2_setspritesize
0fe50     10 00 90 FD | 	jmp	#LR__1311
0fe54                 | LR__1310
0fe54     11 12 06 F6 | 	mov	arg01, #17
0fe58     08 14 06 F6 | 	mov	arg02, #8
0fe5c     10 16 06 F6 | 	mov	arg03, #16
0fe60     18 46 B1 FD | 	call	#_hg010b_spin2_setspritesize
0fe64                 | LR__1311
0fe64                 | _do_cursor_ret
0fe64     2D 00 64 FD | 	ret
0fe68                 | 
0fe68                 | ' 
0fe68                 | ' '-------------------- defenv
0fe68                 | ' 
0fe68                 | ' sub do_defenv
0fe68                 | _do_defenv
0fe68     08 4A 05 F6 | 	mov	COUNT_, #8
0fe6c     A8 00 A0 FD | 	call	#pushregs_
0fe70     58 F0 07 F1 | 	add	ptra, #88
0fe74     4A 00 00 FF 
0fe78     80 E4 05 F1 | 	add	objptr, ##38016
0fe7c     F2 26 02 FB | 	rdlong	local01, objptr
0fe80     13 1B 02 F6 | 	mov	arg05, local01
0fe84     01 1A 66 F0 | 	shl	arg05, #1
0fe88     13 1B 02 F1 | 	add	arg05, local01
0fe8c     02 1A 66 F0 | 	shl	arg05, #2
0fe90     03 00 00 FF 
0fe94     04 E4 85 F1 | 	sub	objptr, ##1540
0fe98     F2 1A 02 F1 | 	add	arg05, objptr
0fe9c     0D 1B 02 FB | 	rdlong	arg05, arg05
0fea0     10 4E 05 F1 | 	add	fp, #16
0fea4     A7 1A 62 FC | 	wrlong	arg05, fp
0fea8                 | ' 
0fea8                 | ' numpar=compiledline(lineptr_e).result.uresult
0fea8                 | ' if numpar<>2 andalso numpar<>5 then return 			' TODO and print error
0fea8     10 4E 85 F1 | 	sub	fp, #16
0feac     02 1A 0E F2 | 	cmp	arg05, #2 wz
0feb0     47 00 00 FF 
0feb4     7C E4 85 F1 | 	sub	objptr, ##36476
0feb8     10 4E 05 51 |  if_ne	add	fp, #16
0febc     A7 26 02 5B |  if_ne	rdlong	local01, fp
0fec0     10 4E 85 51 |  if_ne	sub	fp, #16
0fec4     05 26 0E 52 |  if_ne	cmp	local01, #5 wz
0fec8     8C 0A 90 5D |  if_ne	jmp	#LR__1341
0fecc                 | ' 
0fecc                 | ' if numpar=2 then						' env from .h2 or from a pointer
0fecc     10 4E 05 F1 | 	add	fp, #16
0fed0     A7 26 02 FB | 	rdlong	local01, fp
0fed4     10 4E 85 F1 | 	sub	fp, #16
0fed8     02 26 0E F2 | 	cmp	local01, #2 wz
0fedc     24 04 90 5D |  if_ne	jmp	#LR__1333
0fee0     5C D7 BF FD | 	call	#_pop
0fee4     FF 1A 02 F6 | 	mov	arg05, result3
0fee8     40 4E 05 F1 | 	add	fp, #64
0feec     A7 FA 61 FC | 	wrlong	result1, fp
0fef0     04 4E 05 F1 | 	add	fp, #4
0fef4     A7 FC 61 FC | 	wrlong	result2, fp
0fef8     04 4E 05 F1 | 	add	fp, #4
0fefc     A7 1A 62 FC | 	wrlong	arg05, fp
0ff00                 | '   t1=pop()
0ff00                 | '   if t1.result_type=result_string2 then 
0ff00     48 4E 85 F1 | 	sub	fp, #72
0ff04     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0ff08     20 00 90 5D |  if_ne	jmp	#LR__1320
0ff0c     40 4E 05 F1 | 	add	fp, #64
0ff10     A7 12 02 FB | 	rdlong	arg01, fp
0ff14     40 4E 85 F1 | 	sub	fp, #64
0ff18     9C D8 BF FD | 	call	#_convertstring
0ff1c     4C 4E 05 F1 | 	add	fp, #76
0ff20     A7 FA 61 FC | 	wrlong	result1, fp
0ff24     4C 4E 85 F1 | 	sub	fp, #76
0ff28     58 00 90 FD | 	jmp	#LR__1323
0ff2c                 | LR__1320
0ff2c     48 4E 05 F1 | 	add	fp, #72
0ff30     A7 26 02 FB | 	rdlong	local01, fp
0ff34     48 4E 85 F1 | 	sub	fp, #72
0ff38     1F 26 0E F2 | 	cmp	local01, #31 wz
0ff3c     18 00 90 5D |  if_ne	jmp	#LR__1321
0ff40     40 4E 05 F1 | 	add	fp, #64
0ff44     A7 26 02 FB | 	rdlong	local01, fp
0ff48     0C 4E 05 F1 | 	add	fp, #12
0ff4c     A7 26 62 FC | 	wrlong	local01, fp
0ff50     4C 4E 85 F1 | 	sub	fp, #76
0ff54     2C 00 90 FD | 	jmp	#LR__1322
0ff58                 | LR__1321
0ff58     B9 01 00 FF 
0ff5c     3C 26 06 F6 | 	mov	local01, ##@LR__5899
0ff60     4C 4E 05 F1 | 	add	fp, #76
0ff64     A7 26 62 FC | 	wrlong	local01, fp
0ff68     0C 4E 85 F1 | 	sub	fp, #12
0ff6c     A7 12 02 F6 | 	mov	arg01, fp
0ff70     40 4E 85 F1 | 	sub	fp, #64
0ff74     AC D8 BF FD | 	call	#_converttoint
0ff78     1C 4E 05 F1 | 	add	fp, #28
0ff7c     A7 FA 61 FC | 	wrlong	result1, fp
0ff80     1C 4E 85 F1 | 	sub	fp, #28
0ff84                 | LR__1322
0ff84                 | LR__1323
0ff84                 | '   if s1<>"" then 
0ff84     4C 4E 05 F1 | 	add	fp, #76
0ff88     A7 12 02 FB | 	rdlong	arg01, fp
0ff8c     4C 4E 85 F1 | 	sub	fp, #76
0ff90     B9 01 00 FF 
0ff94     3D 14 06 F6 | 	mov	arg02, ##@LR__5900
0ff98     DC 6E B1 FD | 	call	#__system___string_cmp
0ff9c     00 FA 0D F2 | 	cmp	result1, #0 wz
0ffa0     24 02 90 AD |  if_e	jmp	#LR__1327
0ffa4     98 D6 BF FD | 	call	#_pop
0ffa8     FF 26 02 F6 | 	mov	local01, result3
0ffac     40 4E 05 F1 | 	add	fp, #64
0ffb0     A7 FA 61 FC | 	wrlong	result1, fp
0ffb4     04 4E 05 F1 | 	add	fp, #4
0ffb8     A7 FC 61 FC | 	wrlong	result2, fp
0ffbc     04 4E 05 F1 | 	add	fp, #4
0ffc0     A7 26 62 FC | 	wrlong	local01, fp
0ffc4     08 4E 85 F1 | 	sub	fp, #8
0ffc8     A7 12 02 F6 | 	mov	arg01, fp
0ffcc     40 4E 85 F1 | 	sub	fp, #64
0ffd0     50 D8 BF FD | 	call	#_converttoint
0ffd4     18 4E 05 F1 | 	add	fp, #24
0ffd8     A7 FA 61 FC | 	wrlong	result1, fp
0ffdc     18 4E 85 F1 | 	sub	fp, #24
0ffe0                 | '     t1=pop()
0ffe0                 | '     channel=converttoint(t1) 
0ffe0                 | '     close #9 : open "/sd/media/h/"+s1 for input as #9
0ffe0     09 12 06 F6 | 	mov	arg01, #9
0ffe4     C0 C1 B1 FD | 	call	#__system__close
0ffe8     09 26 06 F6 | 	mov	local01, #9
0ffec     B9 01 00 FF 
0fff0     3E 12 06 F6 | 	mov	arg01, ##@LR__5901
0fff4     4C 4E 05 F1 | 	add	fp, #76
0fff8     A7 14 02 FB | 	rdlong	arg02, fp
0fffc     4C 4E 85 F1 | 	sub	fp, #76
10000     A8 6E B1 FD | 	call	#__system___string_concat
10004     FD 14 02 F6 | 	mov	arg02, result1
10008     13 13 02 F6 | 	mov	arg01, local01
1000c     00 16 06 F6 | 	mov	arg03, #0
10010     40 7A B1 FD | 	call	#__system___basic_open_string
10014     20 E6 05 F1 | 	add	ptr___system__dat__, #32
10018     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
1001c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
10020     0C 4E 05 F1 | 	add	fp, #12
10024     A7 FA 61 FC | 	wrlong	result1, fp
10028                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
10028     0C 4E 85 F1 | 	sub	fp, #12
1002c     A0 00 90 AD |  if_e	jmp	#LR__1324
10030     00 12 06 F6 | 	mov	arg01, #0
10034     40 CB B1 FD | 	call	#__system___getiolock_0611
10038     FD 12 02 F6 | 	mov	arg01, result1
1003c     10 6E B1 FD | 	call	#__system___lockmem
10040     B9 01 00 FF 
10044     4B 14 06 F6 | 	mov	arg02, ##@LR__5902
10048     00 12 06 F6 | 	mov	arg01, #0
1004c     00 16 06 F6 | 	mov	arg03, #0
10050     F0 7A B1 FD | 	call	#__system___basic_print_string
10054     0C 4E 05 F1 | 	add	fp, #12
10058     A7 14 02 FB | 	rdlong	arg02, fp
1005c     0C 4E 85 F1 | 	sub	fp, #12
10060     00 12 06 F6 | 	mov	arg01, #0
10064     00 16 06 F6 | 	mov	arg03, #0
10068     0A 18 06 F6 | 	mov	arg04, #10
1006c     18 7B B1 FD | 	call	#__system___basic_print_integer
10070     B9 01 00 FF 
10074     59 14 06 F6 | 	mov	arg02, ##@LR__5903
10078     00 12 06 F6 | 	mov	arg01, #0
1007c     00 16 06 F6 | 	mov	arg03, #0
10080     C0 7A B1 FD | 	call	#__system___basic_print_string
10084     00 26 06 F6 | 	mov	local01, #0
10088     0C 4E 05 F1 | 	add	fp, #12
1008c     A7 12 02 FB | 	rdlong	arg01, fp
10090     0C 4E 85 F1 | 	sub	fp, #12
10094     44 97 B1 FD | 	call	#__system___strerror
10098     FD 14 02 F6 | 	mov	arg02, result1
1009c     13 13 02 F6 | 	mov	arg01, local01
100a0     00 16 06 F6 | 	mov	arg03, #0
100a4     9C 7A B1 FD | 	call	#__system___basic_print_string
100a8     00 12 06 F6 | 	mov	arg01, #0
100ac     0A 14 06 F6 | 	mov	arg02, #10
100b0     00 16 06 F6 | 	mov	arg03, #0
100b4     34 7A B1 FD | 	call	#__system___basic_print_char
100b8     00 12 06 F6 | 	mov	arg01, #0
100bc     B8 CA B1 FD | 	call	#__system___getiolock_0611
100c0     FD 00 68 FC | 	wrlong	#0, result1
100c4     09 12 06 F6 | 	mov	arg01, #9
100c8     DC C0 B1 FD | 	call	#__system__close
100cc     88 08 90 FD | 	jmp	#LR__1341
100d0                 | LR__1324
100d0                 | '     get #9,17,envbuf8(channel,0),256
100d0     18 4E 05 F1 | 	add	fp, #24
100d4     A7 1A 02 FB | 	rdlong	arg05, fp
100d8     18 4E 85 F1 | 	sub	fp, #24
100dc     0D 17 02 F6 | 	mov	arg03, arg05
100e0     09 16 66 F0 | 	shl	arg03, #9
100e4     0D 17 02 F1 | 	add	arg03, arg05
100e8     0C 00 00 FF 
100ec     D8 E4 05 F1 | 	add	objptr, ##6360
100f0     F2 16 02 F1 | 	add	arg03, objptr
100f4     09 12 06 F6 | 	mov	arg01, #9
100f8     11 14 06 F6 | 	mov	arg02, #17
100fc     00 19 06 F6 | 	mov	arg04, #256
10100     01 1A 06 F6 | 	mov	arg05, #1
10104     0C 00 00 FF 
10108     D8 E4 85 F1 | 	sub	objptr, ##6360
1010c     B0 7B B1 FD | 	call	#__system___basic_get
10110                 | '     for i=255 to 0 step -1 : envbuf(channel,i)=envbuf8(channel,i)*256 : next i
10110     14 4E 05 F1 | 	add	fp, #20
10114     A7 FE 69 FC | 	wrlong	#255, fp
10118     14 4E 85 F1 | 	sub	fp, #20
1011c     0C 00 00 FF 
10120     D8 E4 05 F1 | 	add	objptr, ##6360
10124     97 30 48 FB | 	callpa	#(@LR__1326-@LR__1325)>>2,fcache_load_ptr_
10128                 | LR__1325
10128     18 4E 05 F1 | 	add	fp, #24
1012c     A7 16 02 FB | 	rdlong	arg03, fp
10130     0B 27 02 F6 | 	mov	local01, arg03
10134     09 26 66 F0 | 	shl	local01, #9
10138     F2 26 02 F1 | 	add	local01, objptr
1013c     04 4E 85 F1 | 	sub	fp, #4
10140     A7 1A 02 FB | 	rdlong	arg05, fp
10144     0D 19 02 F6 | 	mov	arg04, arg05
10148     01 18 66 F0 | 	shl	arg04, #1
1014c     13 19 02 F1 | 	add	arg04, local01
10150     0B 27 02 F6 | 	mov	local01, arg03
10154     09 26 66 F0 | 	shl	local01, #9
10158     0B 27 02 F1 | 	add	local01, arg03
1015c     F2 26 02 F1 | 	add	local01, objptr
10160     13 1B 02 F1 | 	add	arg05, local01
10164     0D 27 C2 FA | 	rdbyte	local01, arg05
10168     00 27 06 FA | 	mul	local01, #256
1016c     0C 27 52 FC | 	wrword	local01, arg04
10170     A7 26 02 FB | 	rdlong	local01, fp
10174     01 26 86 F1 | 	sub	local01, #1
10178     A7 26 62 FC | 	wrlong	local01, fp
1017c     14 4E 85 F1 | 	sub	fp, #20
10180     00 26 56 F2 | 	cmps	local01, #0 wc
10184     A0 FF 9F 3D |  if_ae	jmp	#LR__1325
10188                 | LR__1326
10188     0C 00 00 FF 
1018c     D8 E4 85 F1 | 	sub	objptr, ##6360
10190                 | '     close #9
10190     09 12 06 F6 | 	mov	arg01, #9
10194     10 C0 B1 FD | 	call	#__system__close
10198     18 4E 05 F1 | 	add	fp, #24
1019c     A7 26 02 FB | 	rdlong	local01, fp
101a0     18 4E 85 F1 | 	sub	fp, #24
101a4     09 26 66 F0 | 	shl	local01, #9
101a8     0C 00 00 FF 
101ac     D8 E4 05 F1 | 	add	objptr, ##6360
101b0     F2 26 02 F1 | 	add	local01, objptr
101b4     FE 27 06 F1 | 	add	local01, #510
101b8     13 01 58 FC | 	wrword	#0, local01
101bc                 | '     envbuf(channel,255)=0                                                              
101bc                 | '     return
101bc     0C 00 00 FF 
101c0     D8 E4 85 F1 | 	sub	objptr, ##6360
101c4     90 07 90 FD | 	jmp	#LR__1341
101c8                 | LR__1327
101c8                 | '     if wptr < $80000 then 
101c8     1C 4E 05 F1 | 	add	fp, #28
101cc     A7 28 02 FB | 	rdlong	local02, fp
101d0     1C 4E 85 F1 | 	sub	fp, #28
101d4     00 04 00 FF 
101d8     00 28 56 F2 | 	cmps	local02, ##524288 wc
101dc     7C 00 90 3D |  if_ae	jmp	#LR__1330
101e0                 | '       for i=0 to 255: envbuf(channel,i)=dpeek(wptr+2*i): next i
101e0     14 4E 05 F1 | 	add	fp, #20
101e4     A7 00 68 FC | 	wrlong	#0, fp
101e8     14 4E 85 F1 | 	sub	fp, #20
101ec     0C 00 00 FF 
101f0     D8 E4 05 F1 | 	add	objptr, ##6360
101f4     97 2C 48 FB | 	callpa	#(@LR__1329-@LR__1328)>>2,fcache_load_ptr_
101f8                 | LR__1328
101f8     18 4E 05 F1 | 	add	fp, #24
101fc     A7 28 02 FB | 	rdlong	local02, fp
10200     09 28 66 F0 | 	shl	local02, #9
10204     F2 28 02 F1 | 	add	local02, objptr
10208     04 4E 85 F1 | 	sub	fp, #4
1020c     A7 26 02 FB | 	rdlong	local01, fp
10210     13 1B 02 F6 | 	mov	arg05, local01
10214     01 1A 66 F0 | 	shl	arg05, #1
10218     14 1B 02 F1 | 	add	arg05, local02
1021c     08 4E 05 F1 | 	add	fp, #8
10220     A7 12 02 FB | 	rdlong	arg01, fp
10224     01 26 66 F0 | 	shl	local01, #1
10228     13 13 02 F1 | 	add	arg01, local01
1022c     09 FB E1 FA | 	rdword	result1, arg01
10230     0D FB 51 FC | 	wrword	result1, arg05
10234     08 4E 85 F1 | 	sub	fp, #8
10238     A7 28 02 FB | 	rdlong	local02, fp
1023c     01 28 06 F1 | 	add	local02, #1
10240     A7 28 62 FC | 	wrlong	local02, fp
10244     14 4E 85 F1 | 	sub	fp, #20
10248     00 29 56 F2 | 	cmps	local02, #256 wc
1024c     A8 FF 9F CD |  if_b	jmp	#LR__1328
10250                 | LR__1329
10250     0C 00 00 FF 
10254     D8 E4 85 F1 | 	sub	objptr, ##6360
10258     78 00 90 FD | 	jmp	#LR__1332
1025c                 | LR__1330
1025c                 | '       for i=0 to 255: envbuf(channel,i)=psdpeek(wptr+2*i) : next i
1025c     14 4E 05 F1 | 	add	fp, #20
10260     A7 00 68 FC | 	wrlong	#0, fp
10264     14 4E 85 F1 | 	sub	fp, #20
10268                 | LR__1331
10268     18 4E 05 F1 | 	add	fp, #24
1026c     A7 28 02 FB | 	rdlong	local02, fp
10270     09 28 66 F0 | 	shl	local02, #9
10274     0C 00 00 FF 
10278     D8 E4 05 F1 | 	add	objptr, ##6360
1027c     F2 28 02 F1 | 	add	local02, objptr
10280     04 4E 85 F1 | 	sub	fp, #4
10284     A7 26 02 FB | 	rdlong	local01, fp
10288     13 2B 02 F6 | 	mov	local03, local01
1028c     01 2A 66 F0 | 	shl	local03, #1
10290     14 2B 02 F1 | 	add	local03, local02
10294     08 4E 05 F1 | 	add	fp, #8
10298     A7 12 02 FB | 	rdlong	arg01, fp
1029c     1C 4E 85 F1 | 	sub	fp, #28
102a0     01 26 66 F0 | 	shl	local01, #1
102a4     13 13 02 F1 | 	add	arg01, local01
102a8     0C 00 00 FF 
102ac     D8 E4 85 F1 | 	sub	objptr, ##6360
102b0     A8 34 B1 FD | 	call	#_psdpeek
102b4     15 FB 51 FC | 	wrword	result1, local03
102b8     14 4E 05 F1 | 	add	fp, #20
102bc     A7 2A 02 FB | 	rdlong	local03, fp
102c0     01 2A 06 F1 | 	add	local03, #1
102c4     A7 2A 62 FC | 	wrlong	local03, fp
102c8     14 4E 85 F1 | 	sub	fp, #20
102cc     00 2B 56 F2 | 	cmps	local03, #256 wc
102d0     94 FF 9F CD |  if_b	jmp	#LR__1331
102d4                 | LR__1332
102d4     18 4E 05 F1 | 	add	fp, #24
102d8     A7 2A 02 FB | 	rdlong	local03, fp
102dc     18 4E 85 F1 | 	sub	fp, #24
102e0     09 2A 66 F0 | 	shl	local03, #9
102e4     0C 00 00 FF 
102e8     D8 E4 05 F1 | 	add	objptr, ##6360
102ec     F2 2A 02 F1 | 	add	local03, objptr
102f0     FE 2B 06 F1 | 	add	local03, #510
102f4     15 01 58 FC | 	wrword	#0, local03
102f8                 | '     envbuf(channel,255)=0
102f8                 | '     return   
102f8     0C 00 00 FF 
102fc     D8 E4 85 F1 | 	sub	objptr, ##6360
10300     54 06 90 FD | 	jmp	#LR__1341
10304                 | LR__1333
10304                 | ' 
10304                 | ' if numpar=5 then   						 'simple adsr
10304     10 4E 05 F1 | 	add	fp, #16
10308     A7 28 02 FB | 	rdlong	local02, fp
1030c     10 4E 85 F1 | 	sub	fp, #16
10310     05 28 0E F2 | 	cmp	local02, #5 wz
10314     14 06 90 5D |  if_ne	jmp	#LR__1340
10318     24 D3 BF FD | 	call	#_pop
1031c     FF 26 02 F6 | 	mov	local01, result3
10320     40 4E 05 F1 | 	add	fp, #64
10324     A7 FA 61 FC | 	wrlong	result1, fp
10328     04 4E 05 F1 | 	add	fp, #4
1032c     A7 FC 61 FC | 	wrlong	result2, fp
10330     04 4E 05 F1 | 	add	fp, #4
10334     A7 26 62 FC | 	wrlong	local01, fp
10338     08 4E 85 F1 | 	sub	fp, #8
1033c     A7 12 02 F6 | 	mov	arg01, fp
10340     40 4E 85 F1 | 	sub	fp, #64
10344     98 D5 BF FD | 	call	#_converttofloat
10348     FD 28 02 F6 | 	mov	local02, result1
1034c     2C 4E 05 F1 | 	add	fp, #44
10350     A7 28 62 FC | 	wrlong	local02, fp
10354     2C 4E 85 F1 | 	sub	fp, #44
10358     E4 D2 BF FD | 	call	#_pop
1035c     FF 26 02 F6 | 	mov	local01, result3
10360     40 4E 05 F1 | 	add	fp, #64
10364     A7 FA 61 FC | 	wrlong	result1, fp
10368     04 4E 05 F1 | 	add	fp, #4
1036c     A7 FC 61 FC | 	wrlong	result2, fp
10370     04 4E 05 F1 | 	add	fp, #4
10374     A7 26 62 FC | 	wrlong	local01, fp
10378     08 4E 85 F1 | 	sub	fp, #8
1037c     A7 12 02 F6 | 	mov	arg01, fp
10380     40 4E 85 F1 | 	sub	fp, #64
10384     58 D5 BF FD | 	call	#_converttofloat
10388     FD 28 02 F6 | 	mov	local02, result1
1038c     28 4E 05 F1 | 	add	fp, #40
10390     A7 28 62 FC | 	wrlong	local02, fp
10394     28 4E 85 F1 | 	sub	fp, #40
10398     A4 D2 BF FD | 	call	#_pop
1039c     FF 26 02 F6 | 	mov	local01, result3
103a0     40 4E 05 F1 | 	add	fp, #64
103a4     A7 FA 61 FC | 	wrlong	result1, fp
103a8     04 4E 05 F1 | 	add	fp, #4
103ac     A7 FC 61 FC | 	wrlong	result2, fp
103b0     04 4E 05 F1 | 	add	fp, #4
103b4     A7 26 62 FC | 	wrlong	local01, fp
103b8     08 4E 85 F1 | 	sub	fp, #8
103bc     A7 12 02 F6 | 	mov	arg01, fp
103c0     40 4E 85 F1 | 	sub	fp, #64
103c4     18 D5 BF FD | 	call	#_converttofloat
103c8     FD 28 02 F6 | 	mov	local02, result1
103cc     24 4E 05 F1 | 	add	fp, #36
103d0     A7 28 62 FC | 	wrlong	local02, fp
103d4     24 4E 85 F1 | 	sub	fp, #36
103d8     64 D2 BF FD | 	call	#_pop
103dc     FF 26 02 F6 | 	mov	local01, result3
103e0     40 4E 05 F1 | 	add	fp, #64
103e4     A7 FA 61 FC | 	wrlong	result1, fp
103e8     04 4E 05 F1 | 	add	fp, #4
103ec     A7 FC 61 FC | 	wrlong	result2, fp
103f0     04 4E 05 F1 | 	add	fp, #4
103f4     A7 26 62 FC | 	wrlong	local01, fp
103f8     08 4E 85 F1 | 	sub	fp, #8
103fc     A7 12 02 F6 | 	mov	arg01, fp
10400     40 4E 85 F1 | 	sub	fp, #64
10404     D8 D4 BF FD | 	call	#_converttofloat
10408     FD 28 02 F6 | 	mov	local02, result1
1040c     20 4E 05 F1 | 	add	fp, #32
10410     A7 28 62 FC | 	wrlong	local02, fp
10414     20 4E 85 F1 | 	sub	fp, #32
10418     24 D2 BF FD | 	call	#_pop
1041c     FF 26 02 F6 | 	mov	local01, result3
10420     40 4E 05 F1 | 	add	fp, #64
10424     A7 FA 61 FC | 	wrlong	result1, fp
10428     04 4E 05 F1 | 	add	fp, #4
1042c     A7 FC 61 FC | 	wrlong	result2, fp
10430     04 4E 05 F1 | 	add	fp, #4
10434     A7 26 62 FC | 	wrlong	local01, fp
10438     08 4E 85 F1 | 	sub	fp, #8
1043c     A7 12 02 F6 | 	mov	arg01, fp
10440     40 4E 85 F1 | 	sub	fp, #64
10444     DC D3 BF FD | 	call	#_converttoint
10448     18 4E 05 F1 | 	add	fp, #24
1044c     A7 FA 61 FC | 	wrlong	result1, fp
10450                 | '   t1=pop() : rr=converttofloat(t1)
10450                 | '   t1=pop() : ss=converttofloat(t1) 
10450                 | '   t1=pop() : dd=converttofloat(t1)
10450                 | '   t1=pop() : aa=converttofloat(t1)
10450                 | '   t1=pop() : channel=converttoint(t1)
10450                 | '   if ss<0.0 then ss=0.0 
10450     10 4E 05 F1 | 	add	fp, #16
10454     A7 12 02 FB | 	rdlong	arg01, fp
10458     28 4E 85 F1 | 	sub	fp, #40
1045c     00 14 06 F6 | 	mov	arg02, #0
10460     01 16 06 F6 | 	mov	arg03, #1
10464     94 9C B1 FD | 	call	#__system___float_cmp
10468     00 FA 55 F2 | 	cmps	result1, #0 wc
1046c     28 4E 05 C1 |  if_b	add	fp, #40
10470     A7 00 68 CC |  if_b	wrlong	#0, fp
10474     28 4E 85 C1 |  if_b	sub	fp, #40
10478                 | '   if ss>1.0 then ss=1.0
10478     28 4E 05 F1 | 	add	fp, #40
1047c     A7 12 02 FB | 	rdlong	arg01, fp
10480     28 4E 85 F1 | 	sub	fp, #40
10484     00 C0 1F FF 
10488     00 14 06 F6 | 	mov	arg02, ##1065353216
1048c     01 16 66 F6 | 	neg	arg03, #1
10490     68 9C B1 FD | 	call	#__system___float_cmp
10494     01 FA 55 F2 | 	cmps	result1, #1 wc
10498     28 4E 05 31 |  if_ae	add	fp, #40
1049c     00 C0 9F 3F 
104a0     A7 00 68 3C |  if_ae	wrlong	##1065353216, fp
104a4     28 4E 85 31 |  if_ae	sub	fp, #40
104a8     20 4E 05 F1 | 	add	fp, #32
104ac     A7 12 02 FB | 	rdlong	arg01, fp
104b0     04 4E 05 F1 | 	add	fp, #4
104b4     A7 14 02 FB | 	rdlong	arg02, fp
104b8     24 4E 85 F1 | 	sub	fp, #36
104bc     38 94 B1 FD | 	call	#__system___float_add
104c0     FD 12 02 F6 | 	mov	arg01, result1
104c4     2C 4E 05 F1 | 	add	fp, #44
104c8     A7 14 02 FB | 	rdlong	arg02, fp
104cc     2C 4E 85 F1 | 	sub	fp, #44
104d0     24 94 B1 FD | 	call	#__system___float_add
104d4     30 4E 05 F1 | 	add	fp, #48
104d8     A7 FA 61 FC | 	wrlong	result1, fp
104dc     FD 14 02 F6 | 	mov	arg02, result1
104e0     30 4E 85 F1 | 	sub	fp, #48
104e4     00 C0 21 FF 
104e8     00 12 06 F6 | 	mov	arg01, ##1132462080
104ec     DC 99 B1 FD | 	call	#__system___float_div
104f0     34 4E 05 F1 | 	add	fp, #52
104f4     A7 FA 61 FC | 	wrlong	result1, fp
104f8     14 4E 85 F1 | 	sub	fp, #20
104fc     A7 12 02 FB | 	rdlong	arg01, fp
10500     FD 14 02 F6 | 	mov	arg02, result1
10504     20 4E 85 F1 | 	sub	fp, #32
10508     BC 97 B1 FD | 	call	#__system___float_mul
1050c     FD 12 02 F6 | 	mov	arg01, result1
10510     01 14 06 F6 | 	mov	arg02, #1
10514     78 9C B1 FD | 	call	#__system___float_tointeger
10518     A7 FA 61 FC | 	wrlong	result1, fp
1051c     24 4E 05 F1 | 	add	fp, #36
10520     A7 12 02 FB | 	rdlong	arg01, fp
10524     10 4E 05 F1 | 	add	fp, #16
10528     A7 14 02 FB | 	rdlong	arg02, fp
1052c     34 4E 85 F1 | 	sub	fp, #52
10530     94 97 B1 FD | 	call	#__system___float_mul
10534     FD 12 02 F6 | 	mov	arg01, result1
10538     01 14 06 F6 | 	mov	arg02, #1
1053c     50 9C B1 FD | 	call	#__system___float_tointeger
10540     04 4E 05 F1 | 	add	fp, #4
10544     A7 FA 61 FC | 	wrlong	result1, fp
10548     28 4E 05 F1 | 	add	fp, #40
1054c     A7 12 02 FB | 	rdlong	arg01, fp
10550     08 4E 05 F1 | 	add	fp, #8
10554     A7 14 02 FB | 	rdlong	arg02, fp
10558     34 4E 85 F1 | 	sub	fp, #52
1055c     68 97 B1 FD | 	call	#__system___float_mul
10560     FD 12 02 F6 | 	mov	arg01, result1
10564     01 14 06 F6 | 	mov	arg02, #1
10568     24 9C B1 FD | 	call	#__system___float_tointeger
1056c     0C 4E 05 F1 | 	add	fp, #12
10570     A7 FA 61 FC | 	wrlong	result1, fp
10574     0C 4E 85 F1 | 	sub	fp, #12
10578     F8 BF 23 FF 
1057c     00 28 06 F6 | 	mov	local02, ##1199566848
10580     A7 12 02 FB | 	rdlong	arg01, fp
10584     09 13 52 F6 | 	abs	arg01, arg01 wc
10588     1F 2C C6 C9 |  if_b	decod	local04, #31
1058c     00 2C 06 36 |  if_ae	mov	local04, #0
10590     30 93 B1 FD | 	call	#__system___float_fromuns
10594     16 FB 61 F5 | 	xor	result1, local04
10598     FD 14 02 F6 | 	mov	arg02, result1
1059c     14 13 02 F6 | 	mov	arg01, local02
105a0     28 99 B1 FD | 	call	#__system___float_div
105a4     38 4E 05 F1 | 	add	fp, #56
105a8     A7 FA 61 FC | 	wrlong	result1, fp
105ac     F8 BF 23 FF 
105b0     00 28 06 F6 | 	mov	local02, ##1199566848
105b4     10 4E 85 F1 | 	sub	fp, #16
105b8     A7 14 02 FB | 	rdlong	arg02, fp
105bc     28 4E 85 F1 | 	sub	fp, #40
105c0     F8 BF 23 FF 
105c4     00 12 06 F6 | 	mov	arg01, ##1199566848
105c8     FC 96 B1 FD | 	call	#__system___float_mul
105cc     FD 14 02 F6 | 	mov	arg02, result1
105d0     14 13 02 F6 | 	mov	arg01, local02
105d4     1F 14 E6 F4 | 	bitnot	arg02, #31
105d8     1C 93 B1 FD | 	call	#__system___float_add
105dc     FD 28 02 F6 | 	mov	local02, result1
105e0     04 4E 05 F1 | 	add	fp, #4
105e4     A7 12 02 FB | 	rdlong	arg01, fp
105e8     04 4E 85 F1 | 	sub	fp, #4
105ec     09 13 52 F6 | 	abs	arg01, arg01 wc
105f0     1F 2C C6 C9 |  if_b	decod	local04, #31
105f4     00 2C 06 36 |  if_ae	mov	local04, #0
105f8     C8 92 B1 FD | 	call	#__system___float_fromuns
105fc     16 FB 61 F5 | 	xor	result1, local04
10600     FD 14 02 F6 | 	mov	arg02, result1
10604     14 13 02 F6 | 	mov	arg01, local02
10608     C0 98 B1 FD | 	call	#__system___float_div
1060c     24 4E 05 F1 | 	add	fp, #36
10610     A7 FA 61 FC | 	wrlong	result1, fp
10614     04 4E 05 F1 | 	add	fp, #4
10618     A7 14 02 FB | 	rdlong	arg02, fp
1061c     28 4E 85 F1 | 	sub	fp, #40
10620     F8 BF 23 FF 
10624     00 12 06 F6 | 	mov	arg01, ##1199566848
10628     9C 96 B1 FD | 	call	#__system___float_mul
1062c     FD 28 02 F6 | 	mov	local02, result1
10630     0C 4E 05 F1 | 	add	fp, #12
10634     A7 12 02 FB | 	rdlong	arg01, fp
10638     0C 4E 85 F1 | 	sub	fp, #12
1063c     09 13 52 F6 | 	abs	arg01, arg01 wc
10640     1F 2C C6 C9 |  if_b	decod	local04, #31
10644     00 2C 06 36 |  if_ae	mov	local04, #0
10648     78 92 B1 FD | 	call	#__system___float_fromuns
1064c     16 FB 61 F5 | 	xor	result1, local04
10650     FD 14 02 F6 | 	mov	arg02, result1
10654     14 13 02 F6 | 	mov	arg01, local02
10658     70 98 B1 FD | 	call	#__system___float_div
1065c     3C 4E 05 F1 | 	add	fp, #60
10660     A7 FA 61 FC | 	wrlong	result1, fp
10664     24 4E 85 F1 | 	sub	fp, #36
10668     A7 2E 02 FB | 	rdlong	local05, fp
1066c     18 4E 85 F1 | 	sub	fp, #24
10670     01 2E 66 F0 | 	shl	local05, #1
10674     52 00 00 FF 
10678     B4 E4 05 F1 | 	add	objptr, ##42164
1067c     F2 2E 02 F1 | 	add	local05, objptr
10680     A7 30 02 FB | 	rdlong	local06, fp
10684     04 4E 05 F1 | 	add	fp, #4
10688     A7 2A 02 FB | 	rdlong	local03, fp
1068c     15 31 02 F1 | 	add	local06, local03
10690     17 31 52 FC | 	wrword	local06, local05
10694     1C 4E 05 F1 | 	add	fp, #28
10698     A7 00 68 FC | 	wrlong	#0, fp
1069c                 | '   fulltime=aa+dd+rr
1069c                 | '   timeunit=256/fulltime : a=round(aa*timeunit) : d=round(dd*timeunit) : r=round(rr*timeunit)  
1069c                 | '   da=65520.0/a : dd=(65520.0-65520.0*ss)/d : dr=(65520.0*ss)/r  
1069c                 | '   suspoints(channel)=a+d
1069c                 | '   aa=0.0 : for i=0 to a-1  : envbuf(channel,i)=round(aa): aa+=da : next i
1069c     0C 4E 85 F1 | 	sub	fp, #12
106a0     A7 00 68 FC | 	wrlong	#0, fp
106a4     14 4E 85 F1 | 	sub	fp, #20
106a8     A7 32 02 FB | 	rdlong	local07, fp
106ac     52 00 00 FF 
106b0     B4 E4 85 F1 | 	sub	objptr, ##42164
106b4                 | LR__1334
106b4     14 4E 05 F1 | 	add	fp, #20
106b8     A7 28 02 FB | 	rdlong	local02, fp
106bc     14 4E 85 F1 | 	sub	fp, #20
106c0     19 29 52 F2 | 	cmps	local02, local07 wc
106c4     80 00 90 3D |  if_ae	jmp	#LR__1335
106c8     18 4E 05 F1 | 	add	fp, #24
106cc     A7 30 02 FB | 	rdlong	local06, fp
106d0     09 30 66 F0 | 	shl	local06, #9
106d4     0C 00 00 FF 
106d8     D8 E4 05 F1 | 	add	objptr, ##6360
106dc     F2 30 02 F1 | 	add	local06, objptr
106e0     04 4E 85 F1 | 	sub	fp, #4
106e4     A7 2E 02 FB | 	rdlong	local05, fp
106e8     01 2E 66 F0 | 	shl	local05, #1
106ec     18 2F 02 F1 | 	add	local05, local06
106f0     0C 4E 05 F1 | 	add	fp, #12
106f4     A7 12 02 FB | 	rdlong	arg01, fp
106f8     20 4E 85 F1 | 	sub	fp, #32
106fc     0C 00 00 FF 
10700     D8 E4 85 F1 | 	sub	objptr, ##6360
10704     01 14 06 F6 | 	mov	arg02, #1
10708     84 9A B1 FD | 	call	#__system___float_tointeger
1070c     17 FB 51 FC | 	wrword	result1, local05
10710     20 4E 05 F1 | 	add	fp, #32
10714     A7 12 02 FB | 	rdlong	arg01, fp
10718     18 4E 05 F1 | 	add	fp, #24
1071c     A7 14 02 FB | 	rdlong	arg02, fp
10720     38 4E 85 F1 | 	sub	fp, #56
10724     D0 91 B1 FD | 	call	#__system___float_add
10728     20 4E 05 F1 | 	add	fp, #32
1072c     A7 FA 61 FC | 	wrlong	result1, fp
10730     0C 4E 85 F1 | 	sub	fp, #12
10734     A7 30 02 FB | 	rdlong	local06, fp
10738     01 30 06 F1 | 	add	local06, #1
1073c     A7 30 62 FC | 	wrlong	local06, fp
10740     14 4E 85 F1 | 	sub	fp, #20
10744     6C FF 9F FD | 	jmp	#LR__1334
10748                 | LR__1335
10748                 | '   for i=a to (a+d-1) : envbuf(channel,i)=round(aa) : aa=aa-dd : if aa<0.0 then aa=0.0
10748     A7 28 02 FB | 	rdlong	local02, fp
1074c     14 4E 05 F1 | 	add	fp, #20
10750     A7 28 62 FC | 	wrlong	local02, fp
10754     14 4E 85 F1 | 	sub	fp, #20
10758     A7 34 02 FB | 	rdlong	local08, fp
1075c     04 4E 05 F1 | 	add	fp, #4
10760     A7 28 02 FB | 	rdlong	local02, fp
10764     04 4E 85 F1 | 	sub	fp, #4
10768     14 35 02 F1 | 	add	local08, local02
1076c                 | LR__1336
1076c     14 4E 05 F1 | 	add	fp, #20
10770     A7 28 02 FB | 	rdlong	local02, fp
10774     14 4E 85 F1 | 	sub	fp, #20
10778     1A 29 52 F2 | 	cmps	local02, local08 wc
1077c     A8 00 90 3D |  if_ae	jmp	#LR__1337
10780     18 4E 05 F1 | 	add	fp, #24
10784     A7 32 02 FB | 	rdlong	local07, fp
10788     09 32 66 F0 | 	shl	local07, #9
1078c     0C 00 00 FF 
10790     D8 E4 05 F1 | 	add	objptr, ##6360
10794     F2 32 02 F1 | 	add	local07, objptr
10798     04 4E 85 F1 | 	sub	fp, #4
1079c     A7 30 02 FB | 	rdlong	local06, fp
107a0     01 30 66 F0 | 	shl	local06, #1
107a4     19 31 02 F1 | 	add	local06, local07
107a8     0C 4E 05 F1 | 	add	fp, #12
107ac     A7 12 02 FB | 	rdlong	arg01, fp
107b0     20 4E 85 F1 | 	sub	fp, #32
107b4     0C 00 00 FF 
107b8     D8 E4 85 F1 | 	sub	objptr, ##6360
107bc     01 14 06 F6 | 	mov	arg02, #1
107c0     CC 99 B1 FD | 	call	#__system___float_tointeger
107c4     18 FB 51 FC | 	wrword	result1, local06
107c8     20 4E 05 F1 | 	add	fp, #32
107cc     A7 12 02 FB | 	rdlong	arg01, fp
107d0     04 4E 05 F1 | 	add	fp, #4
107d4     A7 14 02 FB | 	rdlong	arg02, fp
107d8     24 4E 85 F1 | 	sub	fp, #36
107dc     1F 14 E6 F4 | 	bitnot	arg02, #31
107e0     14 91 B1 FD | 	call	#__system___float_add
107e4     20 4E 05 F1 | 	add	fp, #32
107e8     A7 FA 61 FC | 	wrlong	result1, fp
107ec     20 4E 85 F1 | 	sub	fp, #32
107f0     FD 12 02 F6 | 	mov	arg01, result1
107f4     00 14 06 F6 | 	mov	arg02, #0
107f8     01 16 06 F6 | 	mov	arg03, #1
107fc     FC 98 B1 FD | 	call	#__system___float_cmp
10800     00 FA 55 F2 | 	cmps	result1, #0 wc
10804     20 4E 05 C1 |  if_b	add	fp, #32
10808     A7 00 68 CC |  if_b	wrlong	#0, fp
1080c     20 4E 85 C1 |  if_b	sub	fp, #32
10810     14 4E 05 F1 | 	add	fp, #20
10814     A7 32 02 FB | 	rdlong	local07, fp
10818     01 32 06 F1 | 	add	local07, #1
1081c     A7 32 62 FC | 	wrlong	local07, fp
10820     14 4E 85 F1 | 	sub	fp, #20
10824     44 FF 9F FD | 	jmp	#LR__1336
10828                 | LR__1337
10828                 | '   for i=(a+d) to 255 : envbuf(channel,i)=round(aa): aa=aa-dr : if aa<0.0 then aa=0.0
10828     A7 28 02 FB | 	rdlong	local02, fp
1082c     04 4E 05 F1 | 	add	fp, #4
10830     A7 34 02 FB | 	rdlong	local08, fp
10834     1A 29 02 F1 | 	add	local02, local08
10838     10 4E 05 F1 | 	add	fp, #16
1083c     A7 28 62 FC | 	wrlong	local02, fp
10840     14 4E 85 F1 | 	sub	fp, #20
10844                 | LR__1338
10844     14 4E 05 F1 | 	add	fp, #20
10848     A7 2E 02 FB | 	rdlong	local05, fp
1084c     14 4E 85 F1 | 	sub	fp, #20
10850     00 2F 56 F2 | 	cmps	local05, #256 wc
10854     A8 00 90 3D |  if_ae	jmp	#LR__1339
10858     18 4E 05 F1 | 	add	fp, #24
1085c     A7 34 02 FB | 	rdlong	local08, fp
10860     09 34 66 F0 | 	shl	local08, #9
10864     0C 00 00 FF 
10868     D8 E4 05 F1 | 	add	objptr, ##6360
1086c     F2 34 02 F1 | 	add	local08, objptr
10870     04 4E 85 F1 | 	sub	fp, #4
10874     A7 32 02 FB | 	rdlong	local07, fp
10878     01 32 66 F0 | 	shl	local07, #1
1087c     1A 33 02 F1 | 	add	local07, local08
10880     0C 4E 05 F1 | 	add	fp, #12
10884     A7 12 02 FB | 	rdlong	arg01, fp
10888     20 4E 85 F1 | 	sub	fp, #32
1088c     0C 00 00 FF 
10890     D8 E4 85 F1 | 	sub	objptr, ##6360
10894     01 14 06 F6 | 	mov	arg02, #1
10898     F4 98 B1 FD | 	call	#__system___float_tointeger
1089c     19 FB 51 FC | 	wrword	result1, local07
108a0     20 4E 05 F1 | 	add	fp, #32
108a4     A7 12 02 FB | 	rdlong	arg01, fp
108a8     1C 4E 05 F1 | 	add	fp, #28
108ac     A7 14 02 FB | 	rdlong	arg02, fp
108b0     3C 4E 85 F1 | 	sub	fp, #60
108b4     1F 14 E6 F4 | 	bitnot	arg02, #31
108b8     3C 90 B1 FD | 	call	#__system___float_add
108bc     20 4E 05 F1 | 	add	fp, #32
108c0     A7 FA 61 FC | 	wrlong	result1, fp
108c4     20 4E 85 F1 | 	sub	fp, #32
108c8     FD 12 02 F6 | 	mov	arg01, result1
108cc     00 14 06 F6 | 	mov	arg02, #0
108d0     01 16 06 F6 | 	mov	arg03, #1
108d4     24 98 B1 FD | 	call	#__system___float_cmp
108d8     00 FA 55 F2 | 	cmps	result1, #0 wc
108dc     20 4E 05 C1 |  if_b	add	fp, #32
108e0     A7 00 68 CC |  if_b	wrlong	#0, fp
108e4     20 4E 85 C1 |  if_b	sub	fp, #32
108e8     14 4E 05 F1 | 	add	fp, #20
108ec     A7 34 02 FB | 	rdlong	local08, fp
108f0     01 34 06 F1 | 	add	local08, #1
108f4     A7 34 62 FC | 	wrlong	local08, fp
108f8     14 4E 85 F1 | 	sub	fp, #20
108fc     44 FF 9F FD | 	jmp	#LR__1338
10900                 | LR__1339
10900     18 4E 05 F1 | 	add	fp, #24
10904     A7 2E 02 FB | 	rdlong	local05, fp
10908     18 4E 85 F1 | 	sub	fp, #24
1090c     09 2E 66 F0 | 	shl	local05, #9
10910     0C 00 00 FF 
10914     D8 E4 05 F1 | 	add	objptr, ##6360
10918     F2 2E 02 F1 | 	add	local05, objptr
1091c     FE 2F 06 F1 | 	add	local05, #510
10920     17 01 58 FC | 	wrword	#0, local05
10924     0C 00 00 FF 
10928     D8 E4 85 F1 | 	sub	objptr, ##6360
1092c                 | LR__1340
1092c     18 4E 05 F1 | 	add	fp, #24
10930     A7 2E 02 FB | 	rdlong	local05, fp
10934     18 4E 85 F1 | 	sub	fp, #24
10938     09 2E 66 F0 | 	shl	local05, #9
1093c     0C 00 00 FF 
10940     D8 E4 05 F1 | 	add	objptr, ##6360
10944     F2 2E 02 F1 | 	add	local05, objptr
10948     FE 2F 06 F1 | 	add	local05, #510
1094c     17 01 58 FC | 	wrword	#0, local05
10950     0C 00 00 FF 
10954     D8 E4 85 F1 | 	sub	objptr, ##6360
10958                 | LR__1341
10958     A7 F0 03 F6 | 	mov	ptra, fp
1095c     B2 00 A0 FD | 	call	#popregs_
10960                 | _do_defenv_ret
10960     2D 00 64 FD | 	ret
10964                 | 
10964                 | ' 
10964                 | ' '-------------------- defsnd
10964                 | ' 
10964                 | ' sub do_defsnd
10964                 | _do_defsnd
10964     04 4A 05 F6 | 	mov	COUNT_, #4
10968     A8 00 A0 FD | 	call	#pushregs_
1096c     88 F0 07 F1 | 	add	ptra, #136
10970     4A 00 00 FF 
10974     80 E4 05 F1 | 	add	objptr, ##38016
10978     F2 1A 02 FB | 	rdlong	arg05, objptr
1097c     0D 19 02 F6 | 	mov	arg04, arg05
10980     01 18 66 F0 | 	shl	arg04, #1
10984     0D 19 02 F1 | 	add	arg04, arg05
10988     02 18 66 F0 | 	shl	arg04, #2
1098c     03 00 00 FF 
10990     04 E4 85 F1 | 	sub	objptr, ##1540
10994     F2 18 02 F1 | 	add	arg04, objptr
10998     0C 1B 02 FB | 	rdlong	arg05, arg04
1099c     A7 1A 62 FC | 	wrlong	arg05, fp
109a0                 | ' 
109a0                 | ' numpar=compiledline(lineptr_e).result.uresult
109a0                 | ' 
109a0                 | ' ' defsnd channel, string - tries to load from /media/s an s2 file from PC-Softsynth
109a0                 | ' ' defsnd channel, h1,h2.... h15 - defines harmonics
109a0                 | ' ' defsnd channel, negfloat, negfloat - defines even and odd harmonics dampening
109a0                 | ' ' defsnd channel, oneint - loads the wave from the pointer
109a0                 | ' 
109a0                 | ' if numpar<2 then return
109a0     02 1A 56 F2 | 	cmps	arg05, #2 wc
109a4     47 00 00 FF 
109a8     7C E4 85 F1 | 	sub	objptr, ##36476
109ac     94 08 90 CD |  if_b	jmp	#LR__1373
109b0                 | '  
109b0                 | ' if numpar=2 then
109b0     A7 1A 02 FB | 	rdlong	arg05, fp
109b4     02 1A 0E F2 | 	cmp	arg05, #2 wz
109b8     A0 03 90 5D |  if_ne	jmp	#LR__1360
109bc     80 CC BF FD | 	call	#_pop
109c0     FF 1A 02 F6 | 	mov	arg05, result3
109c4     2C 4E 05 F1 | 	add	fp, #44
109c8     A7 FA 61 FC | 	wrlong	result1, fp
109cc     04 4E 05 F1 | 	add	fp, #4
109d0     A7 FC 61 FC | 	wrlong	result2, fp
109d4     04 4E 05 F1 | 	add	fp, #4
109d8     A7 1A 62 FC | 	wrlong	arg05, fp
109dc                 | '   t1=pop()
109dc                 | '   if t1.result_type=result_string2 then 
109dc     34 4E 85 F1 | 	sub	fp, #52
109e0     2B 1A 0E F2 | 	cmp	arg05, #43 wz
109e4     20 00 90 5D |  if_ne	jmp	#LR__1350
109e8     2C 4E 05 F1 | 	add	fp, #44
109ec     A7 12 02 FB | 	rdlong	arg01, fp
109f0     2C 4E 85 F1 | 	sub	fp, #44
109f4     C0 CD BF FD | 	call	#_convertstring
109f8     38 4E 05 F1 | 	add	fp, #56
109fc     A7 FA 61 FC | 	wrlong	result1, fp
10a00     38 4E 85 F1 | 	sub	fp, #56
10a04     58 00 90 FD | 	jmp	#LR__1353
10a08                 | LR__1350
10a08     34 4E 05 F1 | 	add	fp, #52
10a0c     A7 1A 02 FB | 	rdlong	arg05, fp
10a10     34 4E 85 F1 | 	sub	fp, #52
10a14     1F 1A 0E F2 | 	cmp	arg05, #31 wz
10a18     18 00 90 5D |  if_ne	jmp	#LR__1351
10a1c     2C 4E 05 F1 | 	add	fp, #44
10a20     A7 1A 02 FB | 	rdlong	arg05, fp
10a24     0C 4E 05 F1 | 	add	fp, #12
10a28     A7 1A 62 FC | 	wrlong	arg05, fp
10a2c     38 4E 85 F1 | 	sub	fp, #56
10a30     2C 00 90 FD | 	jmp	#LR__1352
10a34                 | LR__1351
10a34     B9 01 00 FF 
10a38     5C 1A 06 F6 | 	mov	arg05, ##@LR__5904
10a3c     38 4E 05 F1 | 	add	fp, #56
10a40     A7 1A 62 FC | 	wrlong	arg05, fp
10a44     0C 4E 85 F1 | 	sub	fp, #12
10a48     A7 12 02 F6 | 	mov	arg01, fp
10a4c     2C 4E 85 F1 | 	sub	fp, #44
10a50     D0 CD BF FD | 	call	#_converttoint
10a54     14 4E 05 F1 | 	add	fp, #20
10a58     A7 FA 61 FC | 	wrlong	result1, fp
10a5c     14 4E 85 F1 | 	sub	fp, #20
10a60                 | LR__1352
10a60                 | LR__1353
10a60                 | '   if s<>"" then 
10a60     38 4E 05 F1 | 	add	fp, #56
10a64     A7 12 02 FB | 	rdlong	arg01, fp
10a68     38 4E 85 F1 | 	sub	fp, #56
10a6c     B9 01 00 FF 
10a70     5D 14 06 F6 | 	mov	arg02, ##@LR__5905
10a74     00 64 B1 FD | 	call	#__system___string_cmp
10a78     00 FA 0D F2 | 	cmp	result1, #0 wz
10a7c     E0 01 90 AD |  if_e	jmp	#LR__1356
10a80     BC CB BF FD | 	call	#_pop
10a84     FF 1A 02 F6 | 	mov	arg05, result3
10a88     2C 4E 05 F1 | 	add	fp, #44
10a8c     A7 FA 61 FC | 	wrlong	result1, fp
10a90     04 4E 05 F1 | 	add	fp, #4
10a94     A7 FC 61 FC | 	wrlong	result2, fp
10a98     04 4E 05 F1 | 	add	fp, #4
10a9c     A7 1A 62 FC | 	wrlong	arg05, fp
10aa0     08 4E 85 F1 | 	sub	fp, #8
10aa4     A7 12 02 F6 | 	mov	arg01, fp
10aa8     2C 4E 85 F1 | 	sub	fp, #44
10aac     74 CD BF FD | 	call	#_converttoint
10ab0     10 4E 05 F1 | 	add	fp, #16
10ab4     A7 FA 61 FC | 	wrlong	result1, fp
10ab8                 | '     t1=pop()
10ab8                 | '     channel=converttoint(t1) : if channel>31 then return
10ab8     FD 1A 02 F6 | 	mov	arg05, result1
10abc     10 4E 85 F1 | 	sub	fp, #16
10ac0     20 1A 56 F2 | 	cmps	arg05, #32 wc
10ac4     7C 07 90 3D |  if_ae	jmp	#LR__1373
10ac8                 | '     close #9 : open "/sd/media/s/"+s for input as #9
10ac8     09 12 06 F6 | 	mov	arg01, #9
10acc     D8 B6 B1 FD | 	call	#__system__close
10ad0     09 26 06 F6 | 	mov	local01, #9
10ad4     B9 01 00 FF 
10ad8     5E 12 06 F6 | 	mov	arg01, ##@LR__5906
10adc     38 4E 05 F1 | 	add	fp, #56
10ae0     A7 14 02 FB | 	rdlong	arg02, fp
10ae4     38 4E 85 F1 | 	sub	fp, #56
10ae8     C0 63 B1 FD | 	call	#__system___string_concat
10aec     FD 14 02 F6 | 	mov	arg02, result1
10af0     13 13 02 F6 | 	mov	arg01, local01
10af4     00 16 06 F6 | 	mov	arg03, #0
10af8     58 6F B1 FD | 	call	#__system___basic_open_string
10afc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
10b00     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
10b04     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
10b08     52 00 00 FF 
10b0c     10 E5 05 F1 | 	add	objptr, ##42256
10b10     F2 FA 61 FC | 	wrlong	result1, objptr
10b14                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
10b14     52 00 00 FF 
10b18     10 E5 85 F1 | 	sub	objptr, ##42256
10b1c     B0 00 90 AD |  if_e	jmp	#LR__1354
10b20     00 12 06 F6 | 	mov	arg01, #0
10b24     50 C0 B1 FD | 	call	#__system___getiolock_0611
10b28     FD 12 02 F6 | 	mov	arg01, result1
10b2c     20 63 B1 FD | 	call	#__system___lockmem
10b30     B9 01 00 FF 
10b34     6B 14 06 F6 | 	mov	arg02, ##@LR__5907
10b38     00 12 06 F6 | 	mov	arg01, #0
10b3c     00 16 06 F6 | 	mov	arg03, #0
10b40     00 70 B1 FD | 	call	#__system___basic_print_string
10b44     52 00 00 FF 
10b48     10 E5 05 F1 | 	add	objptr, ##42256
10b4c     F2 14 02 FB | 	rdlong	arg02, objptr
10b50     52 00 00 FF 
10b54     10 E5 85 F1 | 	sub	objptr, ##42256
10b58     00 12 06 F6 | 	mov	arg01, #0
10b5c     00 16 06 F6 | 	mov	arg03, #0
10b60     0A 18 06 F6 | 	mov	arg04, #10
10b64     20 70 B1 FD | 	call	#__system___basic_print_integer
10b68     B9 01 00 FF 
10b6c     79 14 06 F6 | 	mov	arg02, ##@LR__5908
10b70     00 12 06 F6 | 	mov	arg01, #0
10b74     00 16 06 F6 | 	mov	arg03, #0
10b78     C8 6F B1 FD | 	call	#__system___basic_print_string
10b7c     00 26 06 F6 | 	mov	local01, #0
10b80     52 00 00 FF 
10b84     10 E5 05 F1 | 	add	objptr, ##42256
10b88     F2 12 02 FB | 	rdlong	arg01, objptr
10b8c     52 00 00 FF 
10b90     10 E5 85 F1 | 	sub	objptr, ##42256
10b94     44 8C B1 FD | 	call	#__system___strerror
10b98     FD 14 02 F6 | 	mov	arg02, result1
10b9c     13 13 02 F6 | 	mov	arg01, local01
10ba0     00 16 06 F6 | 	mov	arg03, #0
10ba4     9C 6F B1 FD | 	call	#__system___basic_print_string
10ba8     00 12 06 F6 | 	mov	arg01, #0
10bac     0A 14 06 F6 | 	mov	arg02, #10
10bb0     00 16 06 F6 | 	mov	arg03, #0
10bb4     34 6F B1 FD | 	call	#__system___basic_print_char
10bb8     00 12 06 F6 | 	mov	arg01, #0
10bbc     B8 BF B1 FD | 	call	#__system___getiolock_0611
10bc0     FD 00 68 FC | 	wrlong	#0, result1
10bc4     09 12 06 F6 | 	mov	arg01, #9
10bc8     DC B5 B1 FD | 	call	#__system__close
10bcc     74 06 90 FD | 	jmp	#LR__1373
10bd0                 | LR__1354
10bd0                 | '     for i=0 to 1024 : get #9,17+2*i,sample,1 : psdpoke 2048*channel+2*i, sample : next i
10bd0     04 4E 05 F1 | 	add	fp, #4
10bd4     A7 00 68 FC | 	wrlong	#0, fp
10bd8                 | LR__1355
10bd8     A7 26 02 FB | 	rdlong	local01, fp
10bdc     01 26 66 F0 | 	shl	local01, #1
10be0     11 14 06 F6 | 	mov	arg02, #17
10be4     13 15 02 F1 | 	add	arg02, local01
10be8     78 4E 05 F1 | 	add	fp, #120
10bec     A7 16 02 F6 | 	mov	arg03, fp
10bf0     7C 4E 85 F1 | 	sub	fp, #124
10bf4     09 12 06 F6 | 	mov	arg01, #9
10bf8     01 18 06 F6 | 	mov	arg04, #1
10bfc     02 1A 06 F6 | 	mov	arg05, #2
10c00     BC 70 B1 FD | 	call	#__system___basic_get
10c04     10 4E 05 F1 | 	add	fp, #16
10c08     A7 12 02 FB | 	rdlong	arg01, fp
10c0c     0B 12 66 F0 | 	shl	arg01, #11
10c10     0C 4E 85 F1 | 	sub	fp, #12
10c14     A7 26 02 FB | 	rdlong	local01, fp
10c18     01 26 66 F0 | 	shl	local01, #1
10c1c     13 13 02 F1 | 	add	arg01, local01
10c20     78 4E 05 F1 | 	add	fp, #120
10c24     A7 14 E2 FA | 	rdword	arg02, fp
10c28     7C 4E 85 F1 | 	sub	fp, #124
10c2c     0F 14 66 F7 | 	signx	arg02, #15
10c30     E8 29 B1 FD | 	call	#_psdpoke
10c34     04 4E 05 F1 | 	add	fp, #4
10c38     A7 26 02 FB | 	rdlong	local01, fp
10c3c     01 26 06 F1 | 	add	local01, #1
10c40     A7 26 62 FC | 	wrlong	local01, fp
10c44     02 00 00 FF 
10c48     01 26 56 F2 | 	cmps	local01, ##1025 wc
10c4c     88 FF 9F CD |  if_b	jmp	#LR__1355
10c50     04 4E 85 F1 | 	sub	fp, #4
10c54                 | '     close #9
10c54     09 12 06 F6 | 	mov	arg01, #9
10c58     4C B5 B1 FD | 	call	#__system__close
10c5c                 | '     return
10c5c     E4 05 90 FD | 	jmp	#LR__1373
10c60                 | LR__1356
10c60                 | '     if wptr < ($80000 - 2048) then 
10c60     14 4E 05 F1 | 	add	fp, #20
10c64     A7 26 02 FB | 	rdlong	local01, fp
10c68     14 4E 85 F1 | 	sub	fp, #20
10c6c     FC 03 00 FF 
10c70     00 26 56 F2 | 	cmps	local01, ##522240 wc
10c74     70 00 90 3D |  if_ae	jmp	#LR__1358
10c78                 | '       for i=0 to 1023: psdpoke 2048*channel+2*i,dpeek(wptr+2*i): next i
10c78     04 4E 05 F1 | 	add	fp, #4
10c7c     A7 00 68 FC | 	wrlong	#0, fp
10c80     04 4E 85 F1 | 	sub	fp, #4
10c84                 | LR__1357
10c84     10 4E 05 F1 | 	add	fp, #16
10c88     A7 26 02 FB | 	rdlong	local01, fp
10c8c     0B 26 66 F0 | 	shl	local01, #11
10c90     0C 4E 85 F1 | 	sub	fp, #12
10c94     A7 1A 02 FB | 	rdlong	arg05, fp
10c98     0D 19 02 F6 | 	mov	arg04, arg05
10c9c     01 18 66 F0 | 	shl	arg04, #1
10ca0     0C 27 02 F1 | 	add	local01, arg04
10ca4     10 4E 05 F1 | 	add	fp, #16
10ca8     A7 12 02 FB | 	rdlong	arg01, fp
10cac     14 4E 85 F1 | 	sub	fp, #20
10cb0     01 1A 66 F0 | 	shl	arg05, #1
10cb4     0D 13 02 F1 | 	add	arg01, arg05
10cb8     09 15 E2 FA | 	rdword	arg02, arg01
10cbc     13 13 02 F6 | 	mov	arg01, local01
10cc0     58 29 B1 FD | 	call	#_psdpoke
10cc4     04 4E 05 F1 | 	add	fp, #4
10cc8     A7 26 02 FB | 	rdlong	local01, fp
10ccc     01 26 06 F1 | 	add	local01, #1
10cd0     A7 26 62 FC | 	wrlong	local01, fp
10cd4     04 4E 85 F1 | 	sub	fp, #4
10cd8     02 00 00 FF 
10cdc     00 26 56 F2 | 	cmps	local01, ##1024 wc
10ce0     A0 FF 9F CD |  if_b	jmp	#LR__1357
10ce4     5C 05 90 FD | 	jmp	#LR__1373
10ce8                 | LR__1358
10ce8                 | '       for i=0 to 1023 : psdpoke 2048*channel+2*i,psdpeek(wptr+2*i) : next i
10ce8     04 4E 05 F1 | 	add	fp, #4
10cec     A7 00 68 FC | 	wrlong	#0, fp
10cf0     04 4E 85 F1 | 	sub	fp, #4
10cf4                 | LR__1359
10cf4     10 4E 05 F1 | 	add	fp, #16
10cf8     A7 26 02 FB | 	rdlong	local01, fp
10cfc     0B 26 66 F0 | 	shl	local01, #11
10d00     0C 4E 85 F1 | 	sub	fp, #12
10d04     A7 1A 02 FB | 	rdlong	arg05, fp
10d08     0D 19 02 F6 | 	mov	arg04, arg05
10d0c     01 18 66 F0 | 	shl	arg04, #1
10d10     0C 27 02 F1 | 	add	local01, arg04
10d14     10 4E 05 F1 | 	add	fp, #16
10d18     A7 12 02 FB | 	rdlong	arg01, fp
10d1c     14 4E 85 F1 | 	sub	fp, #20
10d20     01 1A 66 F0 | 	shl	arg05, #1
10d24     0D 13 02 F1 | 	add	arg01, arg05
10d28     30 2A B1 FD | 	call	#_psdpeek
10d2c     FD 14 02 F6 | 	mov	arg02, result1
10d30     13 13 02 F6 | 	mov	arg01, local01
10d34     E4 28 B1 FD | 	call	#_psdpoke
10d38     04 4E 05 F1 | 	add	fp, #4
10d3c     A7 26 02 FB | 	rdlong	local01, fp
10d40     01 26 06 F1 | 	add	local01, #1
10d44     A7 26 62 FC | 	wrlong	local01, fp
10d48     04 4E 85 F1 | 	sub	fp, #4
10d4c     02 00 00 FF 
10d50     00 26 56 F2 | 	cmps	local01, ##1024 wc
10d54     9C FF 9F CD |  if_b	jmp	#LR__1359
10d58                 | '     return 
10d58     E8 04 90 FD | 	jmp	#LR__1373
10d5c                 | '   return
10d5c                 | LR__1360
10d5c                 | ' for i=0 to 15 : harm(i)=0: next i  
10d5c     04 4E 05 F1 | 	add	fp, #4
10d60     A7 00 68 FC | 	wrlong	#0, fp
10d64     97 16 48 FB | 	callpa	#(@LR__1362-@LR__1361)>>2,fcache_load_ptr_
10d68                 | LR__1361
10d68     A7 26 02 FB | 	rdlong	local01, fp
10d6c     02 26 66 F0 | 	shl	local01, #2
10d70     38 4E 05 F1 | 	add	fp, #56
10d74     A7 26 02 F1 | 	add	local01, fp
10d78     13 01 68 FC | 	wrlong	#0, local01
10d7c     38 4E 85 F1 | 	sub	fp, #56
10d80     A7 26 02 FB | 	rdlong	local01, fp
10d84     01 26 06 F1 | 	add	local01, #1
10d88     A7 26 62 FC | 	wrlong	local01, fp
10d8c     10 26 56 F2 | 	cmps	local01, #16 wc
10d90     D4 FF 9F CD |  if_b	jmp	#LR__1361
10d94                 | LR__1362
10d94     04 4E 85 F1 | 	sub	fp, #4
10d98                 | ' for i=numpar to 2 step -1 
10d98     A7 26 02 FB | 	rdlong	local01, fp
10d9c     04 4E 05 F1 | 	add	fp, #4
10da0     A7 26 62 FC | 	wrlong	local01, fp
10da4     04 4E 85 F1 | 	sub	fp, #4
10da8                 | LR__1363
10da8     94 C8 BF FD | 	call	#_pop
10dac     2C 4E 05 F1 | 	add	fp, #44
10db0     A7 FA 61 FC | 	wrlong	result1, fp
10db4     04 4E 05 F1 | 	add	fp, #4
10db8     A7 FC 61 FC | 	wrlong	result2, fp
10dbc     04 4E 05 F1 | 	add	fp, #4
10dc0     A7 FE 61 FC | 	wrlong	result3, fp
10dc4     30 4E 85 F1 | 	sub	fp, #48
10dc8     A7 26 02 FB | 	rdlong	local01, fp
10dcc     02 26 86 F1 | 	sub	local01, #2
10dd0     02 26 66 F0 | 	shl	local01, #2
10dd4     38 4E 05 F1 | 	add	fp, #56
10dd8     A7 26 02 F1 | 	add	local01, fp
10ddc     10 4E 85 F1 | 	sub	fp, #16
10de0     A7 12 02 F6 | 	mov	arg01, fp
10de4     2C 4E 85 F1 | 	sub	fp, #44
10de8     F4 CA BF FD | 	call	#_converttofloat
10dec     13 FB 61 FC | 	wrlong	result1, local01
10df0     04 4E 05 F1 | 	add	fp, #4
10df4     A7 26 02 FB | 	rdlong	local01, fp
10df8     01 26 86 F1 | 	sub	local01, #1
10dfc     A7 26 62 FC | 	wrlong	local01, fp
10e00     04 4E 85 F1 | 	sub	fp, #4
10e04     02 26 56 F2 | 	cmps	local01, #2 wc
10e08     9C FF 9F 3D |  if_ae	jmp	#LR__1363
10e0c     30 C8 BF FD | 	call	#_pop
10e10     FF 26 02 F6 | 	mov	local01, result3
10e14     2C 4E 05 F1 | 	add	fp, #44
10e18     A7 FA 61 FC | 	wrlong	result1, fp
10e1c     04 4E 05 F1 | 	add	fp, #4
10e20     A7 FC 61 FC | 	wrlong	result2, fp
10e24     04 4E 05 F1 | 	add	fp, #4
10e28     A7 26 62 FC | 	wrlong	local01, fp
10e2c     08 4E 85 F1 | 	sub	fp, #8
10e30     A7 12 02 F6 | 	mov	arg01, fp
10e34     2C 4E 85 F1 | 	sub	fp, #44
10e38     E8 C9 BF FD | 	call	#_converttoint
10e3c     10 4E 05 F1 | 	add	fp, #16
10e40     A7 FA 61 FC | 	wrlong	result1, fp
10e44                 | ' t1=pop()
10e44                 | ' channel=converttoint(t1) : : if channel>31 then return
10e44     FD 26 02 F6 | 	mov	local01, result1
10e48     10 4E 85 F1 | 	sub	fp, #16
10e4c     20 26 56 F2 | 	cmps	local01, #32 wc
10e50     F0 03 90 3D |  if_ae	jmp	#LR__1373
10e54     20 4E 05 F1 | 	add	fp, #32
10e58     A7 00 68 FC | 	wrlong	#0, fp
10e5c                 | ' max=0
10e5c                 | ' if harm(0)<0 then
10e5c     1C 4E 05 F1 | 	add	fp, #28
10e60     A7 12 02 FB | 	rdlong	arg01, fp
10e64     3C 4E 85 F1 | 	sub	fp, #60
10e68     00 14 06 F6 | 	mov	arg02, #0
10e6c     01 16 06 F6 | 	mov	arg03, #1
10e70     88 92 B1 FD | 	call	#__system___float_cmp
10e74     00 FA 55 F2 | 	cmps	result1, #0 wc
10e78     04 01 90 3D |  if_ae	jmp	#LR__1366
10e7c     3C 4E 05 F1 | 	add	fp, #60
10e80     A7 FA 01 FB | 	rdlong	result1, fp
10e84     1F FA 05 F4 | 	bitl	result1, #31
10e88     24 4E 85 F1 | 	sub	fp, #36
10e8c     A7 FA 61 FC | 	wrlong	result1, fp
10e90     28 4E 05 F1 | 	add	fp, #40
10e94     A7 FA 01 FB | 	rdlong	result1, fp
10e98     1F FA 05 F4 | 	bitl	result1, #31
10e9c     24 4E 85 F1 | 	sub	fp, #36
10ea0     A7 FA 61 FC | 	wrlong	result1, fp
10ea4     20 4E 05 F1 | 	add	fp, #32
10ea8     00 C0 9F FF 
10eac     A7 00 68 FC | 	wrlong	##1065353216, fp
10eb0     24 4E 85 F1 | 	sub	fp, #36
10eb4     A7 26 02 FB | 	rdlong	local01, fp
10eb8     28 4E 05 F1 | 	add	fp, #40
10ebc     A7 26 62 FC | 	wrlong	local01, fp
10ec0     24 4E 85 F1 | 	sub	fp, #36
10ec4     A7 26 02 FB | 	rdlong	local01, fp
10ec8     28 4E 05 F1 | 	add	fp, #40
10ecc     A7 26 62 FC | 	wrlong	local01, fp
10ed0                 | '   harm(0)=1
10ed0                 | '   harm(1)=even
10ed0                 | '   harm(2)=odd
10ed0                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
10ed0     40 4E 85 F1 | 	sub	fp, #64
10ed4     A7 06 68 FC | 	wrlong	#3, fp
10ed8                 | LR__1364
10ed8     A7 1A 02 FB | 	rdlong	arg05, fp
10edc     0D 29 02 F6 | 	mov	local02, arg05
10ee0     02 28 66 F0 | 	shl	local02, #2
10ee4     38 4E 05 F1 | 	add	fp, #56
10ee8     A7 28 02 F1 | 	add	local02, fp
10eec     02 1A 86 F1 | 	sub	arg05, #2
10ef0     02 1A 66 F0 | 	shl	arg05, #2
10ef4     A7 1A 02 F1 | 	add	arg05, fp
10ef8     0D 13 02 FB | 	rdlong	arg01, arg05
10efc     24 4E 85 F1 | 	sub	fp, #36
10f00     A7 14 02 FB | 	rdlong	arg02, fp
10f04     18 4E 85 F1 | 	sub	fp, #24
10f08     BC 8D B1 FD | 	call	#__system___float_mul
10f0c     14 FB 61 FC | 	wrlong	result1, local02
10f10     04 4E 05 F1 | 	add	fp, #4
10f14     A7 2A 02 FB | 	rdlong	local03, fp
10f18     02 2A 06 F1 | 	add	local03, #2
10f1c     A7 2A 62 FC | 	wrlong	local03, fp
10f20     10 2A 56 F2 | 	cmps	local03, #16 wc
10f24     B0 FF 9F CD |  if_b	jmp	#LR__1364
10f28                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
10f28     A7 08 68 FC | 	wrlong	#4, fp
10f2c                 | LR__1365
10f2c     A7 2A 02 FB | 	rdlong	local03, fp
10f30     15 29 02 F6 | 	mov	local02, local03
10f34     02 28 66 F0 | 	shl	local02, #2
10f38     38 4E 05 F1 | 	add	fp, #56
10f3c     A7 28 02 F1 | 	add	local02, fp
10f40     02 2A 86 F1 | 	sub	local03, #2
10f44     02 2A 66 F0 | 	shl	local03, #2
10f48     A7 2A 02 F1 | 	add	local03, fp
10f4c     15 13 02 FB | 	rdlong	arg01, local03
10f50     20 4E 85 F1 | 	sub	fp, #32
10f54     A7 14 02 FB | 	rdlong	arg02, fp
10f58     1C 4E 85 F1 | 	sub	fp, #28
10f5c     68 8D B1 FD | 	call	#__system___float_mul
10f60     14 FB 61 FC | 	wrlong	result1, local02
10f64     04 4E 05 F1 | 	add	fp, #4
10f68     A7 2A 02 FB | 	rdlong	local03, fp
10f6c     02 2A 06 F1 | 	add	local03, #2
10f70     A7 2A 62 FC | 	wrlong	local03, fp
10f74     0F 2A 56 F2 | 	cmps	local03, #15 wc
10f78     B0 FF 9F CD |  if_b	jmp	#LR__1365
10f7c     04 4E 85 F1 | 	sub	fp, #4
10f80                 | LR__1366
10f80                 | ' if harm(0)>=0 then ' synthesize with harmonics
10f80     3C 4E 05 F1 | 	add	fp, #60
10f84     A7 12 02 FB | 	rdlong	arg01, fp
10f88     3C 4E 85 F1 | 	sub	fp, #60
10f8c     00 14 06 F6 | 	mov	arg02, #0
10f90     01 16 66 F6 | 	neg	arg03, #1
10f94     64 91 B1 FD | 	call	#__system___float_cmp
10f98     00 FA 55 F2 | 	cmps	result1, #0 wc
10f9c     A4 02 90 CD |  if_b	jmp	#LR__1372
10fa0                 | '   for i=0 to 1023
10fa0     04 4E 05 F1 | 	add	fp, #4
10fa4     A7 00 68 FC | 	wrlong	#0, fp
10fa8     04 4E 85 F1 | 	sub	fp, #4
10fac                 | LR__1367
10fac     24 4E 05 F1 | 	add	fp, #36
10fb0     A7 00 68 FC | 	wrlong	#0, fp
10fb4                 | '     spl=0
10fb4                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
10fb4     1C 4E 85 F1 | 	sub	fp, #28
10fb8     A7 00 68 FC | 	wrlong	#0, fp
10fbc                 | LR__1368
10fbc     A7 28 02 FB | 	rdlong	local02, fp
10fc0     02 28 66 F0 | 	shl	local02, #2
10fc4     34 4E 05 F1 | 	add	fp, #52
10fc8     A7 28 02 F1 | 	add	local02, fp
10fcc     14 2B 02 FB | 	rdlong	local03, local02
10fd0     87 E4 1D FF 
10fd4     DB 29 06 F6 | 	mov	local02, ##1003032539
10fd8     38 4E 85 F1 | 	sub	fp, #56
10fdc     A7 12 02 FB | 	rdlong	arg01, fp
10fe0     04 4E 85 F1 | 	sub	fp, #4
10fe4     09 13 52 F6 | 	abs	arg01, arg01 wc
10fe8     1F 2C C6 C9 |  if_b	decod	local04, #31
10fec     00 2C 06 36 |  if_ae	mov	local04, #0
10ff0     D0 88 B1 FD | 	call	#__system___float_fromuns
10ff4     16 FB 61 F5 | 	xor	result1, local04
10ff8     FD 14 02 F6 | 	mov	arg02, result1
10ffc     14 13 02 F6 | 	mov	arg01, local02
11000     C4 8C B1 FD | 	call	#__system___float_mul
11004     FD 28 02 F6 | 	mov	local02, result1
11008     08 4E 05 F1 | 	add	fp, #8
1100c     A7 12 02 FB | 	rdlong	arg01, fp
11010     08 4E 85 F1 | 	sub	fp, #8
11014     01 12 06 F1 | 	add	arg01, #1
11018     09 13 52 F6 | 	abs	arg01, arg01 wc
1101c     1F 2C C6 C9 |  if_b	decod	local04, #31
11020     00 2C 06 36 |  if_ae	mov	local04, #0
11024     9C 88 B1 FD | 	call	#__system___float_fromuns
11028     16 FB 61 F5 | 	xor	result1, local04
1102c     FD 14 02 F6 | 	mov	arg02, result1
11030     14 13 02 F6 | 	mov	arg01, local02
11034     90 8C B1 FD | 	call	#__system___float_mul
11038     FD 12 02 F6 | 	mov	arg01, result1
1103c     E8 95 B1 FD | 	call	#__system____builtin_sinf
11040     FD 14 02 F6 | 	mov	arg02, result1
11044     15 13 02 F6 | 	mov	arg01, local03
11048     7C 8C B1 FD | 	call	#__system___float_mul
1104c     FD 14 02 F6 | 	mov	arg02, result1
11050     24 4E 05 F1 | 	add	fp, #36
11054     A7 12 02 FB | 	rdlong	arg01, fp
11058     24 4E 85 F1 | 	sub	fp, #36
1105c     98 88 B1 FD | 	call	#__system___float_add
11060     24 4E 05 F1 | 	add	fp, #36
11064     A7 FA 61 FC | 	wrlong	result1, fp
11068     1C 4E 85 F1 | 	sub	fp, #28
1106c     A7 16 02 FB | 	rdlong	arg03, fp
11070     01 16 06 F1 | 	add	arg03, #1
11074     A7 16 62 FC | 	wrlong	arg03, fp
11078     10 16 56 F2 | 	cmps	arg03, #16 wc
1107c     3C FF 9F CD |  if_b	jmp	#LR__1368
11080                 | '     if abs(spl)>max then max=abs(spl)  
11080     1C 4E 05 F1 | 	add	fp, #28
11084     A7 12 02 FB | 	rdlong	arg01, fp
11088     1F 12 06 F4 | 	bitl	arg01, #31
1108c     04 4E 85 F1 | 	sub	fp, #4
11090     A7 14 02 FB | 	rdlong	arg02, fp
11094     20 4E 85 F1 | 	sub	fp, #32
11098     01 16 66 F6 | 	neg	arg03, #1
1109c     5C 90 B1 FD | 	call	#__system___float_cmp
110a0     01 FA 55 F2 | 	cmps	result1, #1 wc
110a4     18 00 90 CD |  if_b	jmp	#LR__1369
110a8     24 4E 05 F1 | 	add	fp, #36
110ac     A7 FA 01 FB | 	rdlong	result1, fp
110b0     1F FA 05 F4 | 	bitl	result1, #31
110b4     04 4E 85 F1 | 	sub	fp, #4
110b8     A7 FA 61 FC | 	wrlong	result1, fp
110bc     20 4E 85 F1 | 	sub	fp, #32
110c0                 | LR__1369
110c0     04 4E 05 F1 | 	add	fp, #4
110c4     A7 2A 02 FB | 	rdlong	local03, fp
110c8     01 2A 06 F1 | 	add	local03, #1
110cc     A7 2A 62 FC | 	wrlong	local03, fp
110d0     04 4E 85 F1 | 	sub	fp, #4
110d4     02 00 00 FF 
110d8     00 2A 56 F2 | 	cmps	local03, ##1024 wc
110dc     CC FE 9F CD |  if_b	jmp	#LR__1367
110e0                 | '   for i=0 to 1023
110e0     04 4E 05 F1 | 	add	fp, #4
110e4     A7 00 68 FC | 	wrlong	#0, fp
110e8     04 4E 85 F1 | 	sub	fp, #4
110ec                 | LR__1370
110ec     24 4E 05 F1 | 	add	fp, #36
110f0     A7 00 68 FC | 	wrlong	#0, fp
110f4                 | '     spl=0
110f4                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j 
110f4     1C 4E 85 F1 | 	sub	fp, #28
110f8     A7 00 68 FC | 	wrlong	#0, fp
110fc                 | LR__1371
110fc     A7 2A 02 FB | 	rdlong	local03, fp
11100     02 2A 66 F0 | 	shl	local03, #2
11104     34 4E 05 F1 | 	add	fp, #52
11108     A7 2A 02 F1 | 	add	local03, fp
1110c     15 2B 02 FB | 	rdlong	local03, local03
11110     1C 4E 85 F1 | 	sub	fp, #28
11114     A7 14 02 FB | 	rdlong	arg02, fp
11118     20 4E 85 F1 | 	sub	fp, #32
1111c     58 7F 23 FF 
11120     00 12 06 F6 | 	mov	arg01, ##1191096320
11124     A4 8D B1 FD | 	call	#__system___float_div
11128     FD 14 02 F6 | 	mov	arg02, result1
1112c     15 13 02 F6 | 	mov	arg01, local03
11130     94 8B B1 FD | 	call	#__system___float_mul
11134     FD 2A 02 F6 | 	mov	local03, result1
11138     87 E4 1D FF 
1113c     DB 29 06 F6 | 	mov	local02, ##1003032539
11140     04 4E 05 F1 | 	add	fp, #4
11144     A7 12 02 FB | 	rdlong	arg01, fp
11148     04 4E 85 F1 | 	sub	fp, #4
1114c     09 13 52 F6 | 	abs	arg01, arg01 wc
11150     1F 2C C6 C9 |  if_b	decod	local04, #31
11154     00 2C 06 36 |  if_ae	mov	local04, #0
11158     68 87 B1 FD | 	call	#__system___float_fromuns
1115c     16 FB 61 F5 | 	xor	result1, local04
11160     FD 14 02 F6 | 	mov	arg02, result1
11164     14 13 02 F6 | 	mov	arg01, local02
11168     5C 8B B1 FD | 	call	#__system___float_mul
1116c     FD 28 02 F6 | 	mov	local02, result1
11170     08 4E 05 F1 | 	add	fp, #8
11174     A7 12 02 FB | 	rdlong	arg01, fp
11178     08 4E 85 F1 | 	sub	fp, #8
1117c     01 12 06 F1 | 	add	arg01, #1
11180     09 13 52 F6 | 	abs	arg01, arg01 wc
11184     1F 2C C6 C9 |  if_b	decod	local04, #31
11188     00 2C 06 36 |  if_ae	mov	local04, #0
1118c     34 87 B1 FD | 	call	#__system___float_fromuns
11190     16 FB 61 F5 | 	xor	result1, local04
11194     FD 14 02 F6 | 	mov	arg02, result1
11198     14 13 02 F6 | 	mov	arg01, local02
1119c     28 8B B1 FD | 	call	#__system___float_mul
111a0     FD 12 02 F6 | 	mov	arg01, result1
111a4     80 94 B1 FD | 	call	#__system____builtin_sinf
111a8     FD 14 02 F6 | 	mov	arg02, result1
111ac     15 13 02 F6 | 	mov	arg01, local03
111b0     14 8B B1 FD | 	call	#__system___float_mul
111b4     FD 14 02 F6 | 	mov	arg02, result1
111b8     24 4E 05 F1 | 	add	fp, #36
111bc     A7 12 02 FB | 	rdlong	arg01, fp
111c0     24 4E 85 F1 | 	sub	fp, #36
111c4     30 87 B1 FD | 	call	#__system___float_add
111c8     24 4E 05 F1 | 	add	fp, #36
111cc     A7 FA 61 FC | 	wrlong	result1, fp
111d0     1C 4E 85 F1 | 	sub	fp, #28
111d4     A7 2A 02 FB | 	rdlong	local03, fp
111d8     01 2A 06 F1 | 	add	local03, #1
111dc     A7 2A 62 FC | 	wrlong	local03, fp
111e0     10 2A 56 F2 | 	cmps	local03, #16 wc
111e4     14 FF 9F CD |  if_b	jmp	#LR__1371
111e8     08 4E 05 F1 | 	add	fp, #8
111ec     A7 2A 02 FB | 	rdlong	local03, fp
111f0     0B 2A 66 F0 | 	shl	local03, #11
111f4     0C 4E 85 F1 | 	sub	fp, #12
111f8     A7 28 02 FB | 	rdlong	local02, fp
111fc     01 28 66 F0 | 	shl	local02, #1
11200     14 2B 02 F1 | 	add	local03, local02
11204     20 4E 05 F1 | 	add	fp, #32
11208     A7 12 02 FB | 	rdlong	arg01, fp
1120c     24 4E 85 F1 | 	sub	fp, #36
11210     01 14 06 F6 | 	mov	arg02, #1
11214     78 8F B1 FD | 	call	#__system___float_tointeger
11218     FD 14 02 F6 | 	mov	arg02, result1
1121c     15 13 02 F6 | 	mov	arg01, local03
11220     F8 23 B1 FD | 	call	#_psdpoke
11224     04 4E 05 F1 | 	add	fp, #4
11228     A7 2A 02 FB | 	rdlong	local03, fp
1122c     01 2A 06 F1 | 	add	local03, #1
11230     A7 2A 62 FC | 	wrlong	local03, fp
11234     04 4E 85 F1 | 	sub	fp, #4
11238     02 00 00 FF 
1123c     00 2A 56 F2 | 	cmps	local03, ##1024 wc
11240     A8 FE 9F CD |  if_b	jmp	#LR__1370
11244                 | LR__1372
11244                 | LR__1373
11244     A7 F0 03 F6 | 	mov	ptra, fp
11248     B2 00 A0 FD | 	call	#popregs_
1124c                 | _do_defsnd_ret
1124c     2D 00 64 FD | 	ret
11250                 | 
11250                 | ' 
11250                 | ' '-------------------- defsprite
11250                 | ' 
11250                 | ' sub do_defsprite
11250                 | _do_defsprite
11250     07 4A 05 F6 | 	mov	COUNT_, #7
11254     A8 00 A0 FD | 	call	#pushregs_
11258     60 F0 07 F1 | 	add	ptra, #96
1125c     E0 C3 BF FD | 	call	#_pop
11260     FD 16 02 F6 | 	mov	arg03, result1
11264     FE 14 02 F6 | 	mov	arg02, result2
11268     FF 12 02 F6 | 	mov	arg01, result3
1126c     30 4E 05 F1 | 	add	fp, #48
11270     A7 16 62 FC | 	wrlong	arg03, fp
11274     04 4E 05 F1 | 	add	fp, #4
11278     A7 14 62 FC | 	wrlong	arg02, fp
1127c     04 4E 05 F1 | 	add	fp, #4
11280     A7 12 62 FC | 	wrlong	arg01, fp
11284     38 4E 85 F1 | 	sub	fp, #56
11288     B4 C3 BF FD | 	call	#_pop
1128c     FD 16 02 F6 | 	mov	arg03, result1
11290     FE 14 02 F6 | 	mov	arg02, result2
11294     FF 12 02 F6 | 	mov	arg01, result3
11298     24 4E 05 F1 | 	add	fp, #36
1129c     A7 16 62 FC | 	wrlong	arg03, fp
112a0     04 4E 05 F1 | 	add	fp, #4
112a4     A7 14 62 FC | 	wrlong	arg02, fp
112a8     04 4E 05 F1 | 	add	fp, #4
112ac     A7 12 62 FC | 	wrlong	arg01, fp
112b0     2C 4E 85 F1 | 	sub	fp, #44
112b4     88 C3 BF FD | 	call	#_pop
112b8     FD 16 02 F6 | 	mov	arg03, result1
112bc     FE 14 02 F6 | 	mov	arg02, result2
112c0     FF 12 02 F6 | 	mov	arg01, result3
112c4     18 4E 05 F1 | 	add	fp, #24
112c8     A7 16 62 FC | 	wrlong	arg03, fp
112cc     04 4E 05 F1 | 	add	fp, #4
112d0     A7 14 62 FC | 	wrlong	arg02, fp
112d4     04 4E 05 F1 | 	add	fp, #4
112d8     A7 12 62 FC | 	wrlong	arg01, fp
112dc     20 4E 85 F1 | 	sub	fp, #32
112e0     5C C3 BF FD | 	call	#_pop
112e4     FD 16 02 F6 | 	mov	arg03, result1
112e8     FE 14 02 F6 | 	mov	arg02, result2
112ec     FF 12 02 F6 | 	mov	arg01, result3
112f0     0C 4E 05 F1 | 	add	fp, #12
112f4     A7 16 62 FC | 	wrlong	arg03, fp
112f8     04 4E 05 F1 | 	add	fp, #4
112fc     A7 14 62 FC | 	wrlong	arg02, fp
11300     04 4E 05 F1 | 	add	fp, #4
11304     A7 12 62 FC | 	wrlong	arg01, fp
11308     14 4E 85 F1 | 	sub	fp, #20
1130c     30 C3 BF FD | 	call	#_pop
11310     FF 16 02 F6 | 	mov	arg03, result3
11314     A7 FA 61 FC | 	wrlong	result1, fp
11318     04 4E 05 F1 | 	add	fp, #4
1131c     A7 FC 61 FC | 	wrlong	result2, fp
11320     04 4E 05 F1 | 	add	fp, #4
11324     A7 16 62 FC | 	wrlong	arg03, fp
11328     08 4E 85 F1 | 	sub	fp, #8
1132c     A7 12 02 F6 | 	mov	arg01, fp
11330     F0 C4 BF FD | 	call	#_converttoint
11334     3C 4E 05 F1 | 	add	fp, #60
11338     A7 FA 61 FC | 	wrlong	result1, fp
1133c     30 4E 85 F1 | 	sub	fp, #48
11340     A7 12 02 F6 | 	mov	arg01, fp
11344     0C 4E 85 F1 | 	sub	fp, #12
11348     D8 C4 BF FD | 	call	#_converttoint
1134c     40 4E 05 F1 | 	add	fp, #64
11350     A7 FA 61 FC | 	wrlong	result1, fp
11354     28 4E 85 F1 | 	sub	fp, #40
11358     A7 12 02 F6 | 	mov	arg01, fp
1135c     18 4E 85 F1 | 	sub	fp, #24
11360     C0 C4 BF FD | 	call	#_converttoint
11364     44 4E 05 F1 | 	add	fp, #68
11368     A7 FA 61 FC | 	wrlong	result1, fp
1136c     20 4E 85 F1 | 	sub	fp, #32
11370     A7 12 02 F6 | 	mov	arg01, fp
11374     24 4E 85 F1 | 	sub	fp, #36
11378     A8 C4 BF FD | 	call	#_converttoint
1137c     48 4E 05 F1 | 	add	fp, #72
11380     A7 FA 61 FC | 	wrlong	result1, fp
11384     18 4E 85 F1 | 	sub	fp, #24
11388     A7 12 02 F6 | 	mov	arg01, fp
1138c     30 4E 85 F1 | 	sub	fp, #48
11390     90 C4 BF FD | 	call	#_converttoint
11394     4C 4E 05 F1 | 	add	fp, #76
11398     A7 FA 61 FC | 	wrlong	result1, fp
1139c                 | ' 
1139c                 | ' t5=pop()
1139c                 | ' t4=pop()
1139c                 | ' t3=pop()
1139c                 | ' t2=pop()
1139c                 | ' t1=pop()
1139c                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5) ' do convert, defsprite is not a racing command
1139c                 | ' if sprite(a1)<> nil then delete(sprite(a1))	' todo: check parameters for limits
1139c     10 4E 85 F1 | 	sub	fp, #16
113a0     A7 16 02 FB | 	rdlong	arg03, fp
113a4     3C 4E 85 F1 | 	sub	fp, #60
113a8     02 16 66 F0 | 	shl	arg03, #2
113ac     52 00 00 FF 
113b0     54 E4 05 F1 | 	add	objptr, ##42068
113b4     F2 16 02 F1 | 	add	arg03, objptr
113b8     0B 17 0A FB | 	rdlong	arg03, arg03 wz
113bc     52 00 00 FF 
113c0     54 E4 85 F1 | 	sub	objptr, ##42068
113c4     2C 00 90 AD |  if_e	jmp	#LR__1380
113c8     3C 4E 05 F1 | 	add	fp, #60
113cc     A7 16 02 FB | 	rdlong	arg03, fp
113d0     3C 4E 85 F1 | 	sub	fp, #60
113d4     02 16 66 F0 | 	shl	arg03, #2
113d8     52 00 00 FF 
113dc     54 E4 05 F1 | 	add	objptr, ##42068
113e0     F2 16 02 F1 | 	add	arg03, objptr
113e4     0B 13 02 FB | 	rdlong	arg01, arg03
113e8     52 00 00 FF 
113ec     54 E4 85 F1 | 	sub	objptr, ##42068
113f0     38 9D B1 FD | 	call	#__system___gc_free
113f4                 | LR__1380
113f4     3C 4E 05 F1 | 	add	fp, #60
113f8     A7 26 02 FB | 	rdlong	local01, fp
113fc     0C 4E 05 F1 | 	add	fp, #12
11400     A7 16 02 FB | 	rdlong	arg03, fp
11404     04 4E 05 F1 | 	add	fp, #4
11408     A7 14 02 FB | 	rdlong	arg02, fp
1140c     0A 17 02 FD | 	qmul	arg03, arg02
11410     02 26 66 F0 | 	shl	local01, #2
11414     52 00 00 FF 
11418     54 E4 05 F1 | 	add	objptr, ##42068
1141c     F2 26 02 F1 | 	add	local01, objptr
11420     4C 4E 85 F1 | 	sub	fp, #76
11424     52 00 00 FF 
11428     54 E4 85 F1 | 	sub	objptr, ##42068
1142c     18 12 62 FD | 	getqx	arg01
11430     BC 9B B1 FD | 	call	#__system___gc_alloc_managed
11434     13 FB 61 FC | 	wrlong	result1, local01
11438                 | ' for y=a3 to a3+a5-1
11438     44 4E 05 F1 | 	add	fp, #68
1143c     A7 28 02 FB | 	rdlong	local02, fp
11440     0C 4E 05 F1 | 	add	fp, #12
11444     A7 28 62 FC | 	wrlong	local02, fp
11448     0C 4E 85 F1 | 	sub	fp, #12
1144c     A7 2A 02 FB | 	rdlong	local03, fp
11450     08 4E 05 F1 | 	add	fp, #8
11454     A7 2C 02 FB | 	rdlong	local04, fp
11458     4C 4E 85 F1 | 	sub	fp, #76
1145c     16 2B 02 F1 | 	add	local03, local04
11460                 | LR__1381
11460     50 4E 05 F1 | 	add	fp, #80
11464     A7 28 02 FB | 	rdlong	local02, fp
11468     50 4E 85 F1 | 	sub	fp, #80
1146c     15 29 52 F2 | 	cmps	local02, local03 wc
11470     F4 00 90 3D |  if_ae	jmp	#LR__1384
11474                 | '   for x=a2 to a4+a2-1
11474     40 4E 05 F1 | 	add	fp, #64
11478     A7 26 02 FB | 	rdlong	local01, fp
1147c     14 4E 05 F1 | 	add	fp, #20
11480     A7 26 62 FC | 	wrlong	local01, fp
11484     0C 4E 85 F1 | 	sub	fp, #12
11488     A7 2E 02 FB | 	rdlong	local05, fp
1148c     08 4E 85 F1 | 	sub	fp, #8
11490     A7 30 02 FB | 	rdlong	local06, fp
11494     40 4E 85 F1 | 	sub	fp, #64
11498     18 2F 02 F1 | 	add	local05, local06
1149c                 | LR__1382
1149c     54 4E 05 F1 | 	add	fp, #84
114a0     A7 26 02 FB | 	rdlong	local01, fp
114a4     54 4E 85 F1 | 	sub	fp, #84
114a8     17 27 52 F2 | 	cmps	local01, local05 wc
114ac     A0 00 90 3D |  if_ae	jmp	#LR__1383
114b0     3C 4E 05 F1 | 	add	fp, #60
114b4     A7 30 02 FB | 	rdlong	local06, fp
114b8     18 4E 05 F1 | 	add	fp, #24
114bc     A7 2C 02 FB | 	rdlong	local04, fp
114c0     14 4E 85 F1 | 	sub	fp, #20
114c4     A7 28 02 FB | 	rdlong	local02, fp
114c8     10 4E 05 F1 | 	add	fp, #16
114cc     A7 26 02 FB | 	rdlong	local01, fp
114d0     13 17 02 F6 | 	mov	arg03, local01
114d4     0C 4E 85 F1 | 	sub	fp, #12
114d8     A7 14 02 FB | 	rdlong	arg02, fp
114dc     0A 17 82 F1 | 	sub	arg03, arg02
114e0     04 4E 05 F1 | 	add	fp, #4
114e4     A7 14 02 FB | 	rdlong	arg02, fp
114e8     0A 17 02 FD | 	qmul	arg03, arg02
114ec     02 30 66 F0 | 	shl	local06, #2
114f0     52 00 00 FF 
114f4     54 E4 05 F1 | 	add	objptr, ##42068
114f8     F2 30 02 F1 | 	add	local06, objptr
114fc     18 31 02 FB | 	rdlong	local06, local06
11500     16 33 02 F6 | 	mov	local07, local04
11504     14 33 82 F1 | 	sub	local07, local02
11508     52 00 00 FF 
1150c     54 E4 85 F1 | 	sub	objptr, ##42068
11510     F2 12 02 FB | 	rdlong	arg01, objptr
11514     16 13 02 F1 | 	add	arg01, local04
11518     48 4E 85 F1 | 	sub	fp, #72
1151c     0A 26 66 F0 | 	shl	local01, #10
11520     13 13 02 F1 | 	add	arg01, local01
11524     18 2C 62 FD | 	getqx	local04
11528     16 33 02 F1 | 	add	local07, local04
1152c     18 33 02 F1 | 	add	local07, local06
11530     78 21 B1 FD | 	call	#_pspeek
11534     19 FB 41 FC | 	wrbyte	result1, local07
11538     54 4E 05 F1 | 	add	fp, #84
1153c     A7 32 02 FB | 	rdlong	local07, fp
11540     01 32 06 F1 | 	add	local07, #1
11544     A7 32 62 FC | 	wrlong	local07, fp
11548     54 4E 85 F1 | 	sub	fp, #84
1154c     4C FF 9F FD | 	jmp	#LR__1382
11550                 | LR__1383
11550     50 4E 05 F1 | 	add	fp, #80
11554     A7 32 02 FB | 	rdlong	local07, fp
11558     01 32 06 F1 | 	add	local07, #1
1155c     A7 32 62 FC | 	wrlong	local07, fp
11560     50 4E 85 F1 | 	sub	fp, #80
11564     F8 FE 9F FD | 	jmp	#LR__1381
11568                 | LR__1384
11568     3C 4E 05 F1 | 	add	fp, #60
1156c     A7 32 02 FB | 	rdlong	local07, fp
11570     19 13 02 F6 | 	mov	arg01, local07
11574     3C 4E 85 F1 | 	sub	fp, #60
11578     02 32 66 F0 | 	shl	local07, #2
1157c     52 00 00 FF 
11580     54 E4 05 F1 | 	add	objptr, ##42068
11584     F2 32 02 F1 | 	add	local07, objptr
11588     19 15 02 FB | 	rdlong	arg02, local07
1158c     52 00 00 FF 
11590     54 E4 85 F1 | 	sub	objptr, ##42068
11594     54 2E B1 FD | 	call	#_hg010b_spin2_setspriteptr
11598     3C 4E 05 F1 | 	add	fp, #60
1159c     A7 12 02 FB | 	rdlong	arg01, fp
115a0     0C 4E 05 F1 | 	add	fp, #12
115a4     A7 14 02 FB | 	rdlong	arg02, fp
115a8     04 4E 05 F1 | 	add	fp, #4
115ac     A7 16 02 FB | 	rdlong	arg03, fp
115b0     4C 4E 85 F1 | 	sub	fp, #76
115b4     C4 2E B1 FD | 	call	#_hg010b_spin2_setspritesize
115b8     A7 F0 03 F6 | 	mov	ptra, fp
115bc     B2 00 A0 FD | 	call	#popregs_
115c0                 | _do_defsprite_ret
115c0     2D 00 64 FD | 	ret
115c4                 | 
115c4                 | ' 
115c4                 | ' '-------------------- deg
115c4                 | ' 
115c4                 | ' sub do_deg
115c4                 | _do_deg
115c4     52 00 00 FF 
115c8     A8 E4 05 F1 | 	add	objptr, ##42152
115cc     7D 47 9E FF 
115d0     F2 6A 68 FC | 	wrlong	##1016003125, objptr
115d4     04 E4 05 F1 | 	add	objptr, #4
115d8     97 32 A1 FF 
115dc     F2 C2 69 FC | 	wrlong	##1113927393, objptr
115e0     52 00 00 FF 
115e4     AC E4 85 F1 | 	sub	objptr, ##42156
115e8                 | _do_deg_ret
115e8     2D 00 64 FD | 	ret
115ec                 | 
115ec                 | ' 
115ec                 | ' '-------------------- delete
115ec                 | ' 
115ec                 | ' sub do_delete
115ec                 | _do_delete
115ec     05 4A 05 F6 | 	mov	COUNT_, #5
115f0     A8 00 A0 FD | 	call	#pushregs_
115f4     48 C0 BF FD | 	call	#_pop
115f8     FE 18 02 F6 | 	mov	arg04, result2
115fc     FF 16 02 F6 | 	mov	arg03, result3
11600     FD 26 02 F6 | 	mov	local01, result1
11604     0C 29 02 F6 | 	mov	local02, arg04
11608     0B 2B 02 F6 | 	mov	local03, arg03
1160c                 | ' 
1160c                 | ' t1=pop()
1160c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
1160c     2B 2A 0E F2 | 	cmp	local03, #43 wz
11610     10 00 90 5D |  if_ne	jmp	#LR__1390
11614     13 13 02 F6 | 	mov	arg01, local01
11618     9C C1 BF FD | 	call	#_convertstring
1161c     FD 26 02 F6 | 	mov	local01, result1
11620     1F 2A 06 F6 | 	mov	local03, #31
11624                 | LR__1390
11624                 | ' if t1.result_type<>result_string then printerror(15): return
11624     1F 2A 0E F2 | 	cmp	local03, #31 wz
11628     10 00 90 AD |  if_e	jmp	#LR__1391
1162c     0F 12 06 F6 | 	mov	arg01, #15
11630     00 14 06 F6 | 	mov	arg02, #0
11634     FC 1D B1 FD | 	call	#_printerror
11638     E0 00 90 FD | 	jmp	#LR__1395
1163c                 | LR__1391
1163c                 | ' if currentdir$<>"/" then filename$=currentdir$+"/"+t1.result.sresult else filename$="/"+t1.result.sresult
1163c     4A 00 00 FF 
11640     94 E4 05 F1 | 	add	objptr, ##38036
11644     F2 12 02 FB | 	rdlong	arg01, objptr
11648     4A 00 00 FF 
1164c     94 E4 85 F1 | 	sub	objptr, ##38036
11650     B9 01 00 FF 
11654     7C 14 06 F6 | 	mov	arg02, ##@LR__5909
11658     1C 58 B1 FD | 	call	#__system___string_cmp
1165c     00 FA 0D F2 | 	cmp	result1, #0 wz
11660     34 00 90 AD |  if_e	jmp	#LR__1392
11664     4A 00 00 FF 
11668     94 E4 05 F1 | 	add	objptr, ##38036
1166c     F2 12 02 FB | 	rdlong	arg01, objptr
11670     4A 00 00 FF 
11674     94 E4 85 F1 | 	sub	objptr, ##38036
11678     B9 01 00 FF 
1167c     7E 14 06 F6 | 	mov	arg02, ##@LR__5910
11680     28 58 B1 FD | 	call	#__system___string_concat
11684     FD 12 02 F6 | 	mov	arg01, result1
11688     13 15 02 F6 | 	mov	arg02, local01
1168c     1C 58 B1 FD | 	call	#__system___string_concat
11690     FD 2C 02 F6 | 	mov	local04, result1
11694     14 00 90 FD | 	jmp	#LR__1393
11698                 | LR__1392
11698     B9 01 00 FF 
1169c     80 12 06 F6 | 	mov	arg01, ##@LR__5911
116a0     13 15 02 F6 | 	mov	arg02, local01
116a4     04 58 B1 FD | 	call	#__system___string_concat
116a8     FD 2C 02 F6 | 	mov	local04, result1
116ac                 | LR__1393
116ac     16 13 02 F6 | 	mov	arg01, local04
116b0     68 7F B1 FD | 	call	#__system___remove
116b4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
116b8     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
116bc     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
116c0     FD 2E 0A F6 | 	mov	local05, result1 wz
116c4                 | ' kill filename$
116c4                 | ' err=geterr() : if err<>0 then print "Cannot delete file or file doesn't exist: system error "; err
116c4     54 00 90 AD |  if_e	jmp	#LR__1394
116c8     00 12 06 F6 | 	mov	arg01, #0
116cc     A8 B4 B1 FD | 	call	#__system___getiolock_0611
116d0     FD 12 02 F6 | 	mov	arg01, result1
116d4     78 57 B1 FD | 	call	#__system___lockmem
116d8     B9 01 00 FF 
116dc     82 14 06 F6 | 	mov	arg02, ##@LR__5912
116e0     00 12 06 F6 | 	mov	arg01, #0
116e4     00 16 06 F6 | 	mov	arg03, #0
116e8     58 64 B1 FD | 	call	#__system___basic_print_string
116ec     00 12 06 F6 | 	mov	arg01, #0
116f0     17 15 02 F6 | 	mov	arg02, local05
116f4     00 16 06 F6 | 	mov	arg03, #0
116f8     0A 18 06 F6 | 	mov	arg04, #10
116fc     88 64 B1 FD | 	call	#__system___basic_print_integer
11700     00 12 06 F6 | 	mov	arg01, #0
11704     0A 14 06 F6 | 	mov	arg02, #10
11708     00 16 06 F6 | 	mov	arg03, #0
1170c     DC 63 B1 FD | 	call	#__system___basic_print_char
11710     00 12 06 F6 | 	mov	arg01, #0
11714     60 B4 B1 FD | 	call	#__system___getiolock_0611
11718     FD 00 68 FC | 	wrlong	#0, result1
1171c                 | LR__1394
1171c                 | LR__1395
1171c     A7 F0 03 F6 | 	mov	ptra, fp
11720     B2 00 A0 FD | 	call	#popregs_
11724                 | _do_delete_ret
11724     2D 00 64 FD | 	ret
11728                 | 
11728                 | ' 
11728                 | ' '-------------------- dir
11728                 | ' 
11728                 | ' sub do_dir
11728                 | _do_dir
11728     13 4A 05 F6 | 	mov	COUNT_, #19
1172c     A8 00 A0 FD | 	call	#pushregs_
11730     01 00 00 FF 
11734     38 F0 07 F1 | 	add	ptra, ##568
11738                 | ' 
11738                 | ' print "Current directory: "; currentdir$ 
11738     00 12 06 F6 | 	mov	arg01, #0
1173c     38 B4 B1 FD | 	call	#__system___getiolock_0611
11740     FD 12 02 F6 | 	mov	arg01, result1
11744     08 57 B1 FD | 	call	#__system___lockmem
11748     B9 01 00 FF 
1174c     BA 14 06 F6 | 	mov	arg02, ##@LR__5913
11750     00 12 06 F6 | 	mov	arg01, #0
11754     00 16 06 F6 | 	mov	arg03, #0
11758     E8 63 B1 FD | 	call	#__system___basic_print_string
1175c     4A 00 00 FF 
11760     94 E4 05 F1 | 	add	objptr, ##38036
11764     F2 14 02 FB | 	rdlong	arg02, objptr
11768     4A 00 00 FF 
1176c     94 E4 85 F1 | 	sub	objptr, ##38036
11770     00 12 06 F6 | 	mov	arg01, #0
11774     00 16 06 F6 | 	mov	arg03, #0
11778     C8 63 B1 FD | 	call	#__system___basic_print_string
1177c     00 12 06 F6 | 	mov	arg01, #0
11780     0A 14 06 F6 | 	mov	arg02, #10
11784     00 16 06 F6 | 	mov	arg03, #0
11788     60 63 B1 FD | 	call	#__system___basic_print_char
1178c     01 26 06 F6 | 	mov	local01, #1
11790     00 12 06 F6 | 	mov	arg01, #0
11794     E0 B3 B1 FD | 	call	#__system___getiolock_0611
11798     FD 00 68 FC | 	wrlong	#0, result1
1179c     00 28 06 F6 | 	mov	local02, #0
117a0     00 2A 06 F6 | 	mov	local03, #0
117a4                 | ' px=0
117a4                 | ' for i=0 to 127: filelist(i)="" : next i
117a4     00 2C 06 F6 | 	mov	local04, #0
117a8     1C 4E 05 F1 | 	add	fp, #28
117ac     97 12 48 FB | 	callpa	#(@LR__1401-@LR__1400)>>2,fcache_load_ptr_
117b0                 | LR__1400
117b0     16 2F 02 F6 | 	mov	local05, local04
117b4     02 2E 66 F0 | 	shl	local05, #2
117b8     A7 2E 02 F1 | 	add	local05, fp
117bc     B9 01 00 FF 
117c0     CE 30 06 F6 | 	mov	local06, ##@LR__5914
117c4     17 31 62 FC | 	wrlong	local06, local05
117c8     01 2C 06 F1 | 	add	local04, #1
117cc     80 2C 56 F2 | 	cmps	local04, #128 wc
117d0     DC FF 9F CD |  if_b	jmp	#LR__1400
117d4                 | LR__1401
117d4     1C 4E 85 F1 | 	sub	fp, #28
117d8     B9 01 00 FF 
117dc     CF 12 06 F6 | 	mov	arg01, ##@LR__5915
117e0     10 14 06 F6 | 	mov	arg02, #16
117e4     C8 B4 B1 FD | 	call	#__system___basic_dir
117e8     FD 32 02 F6 | 	mov	local07, result1
117ec     00 34 06 F6 | 	mov	local08, #0
117f0                 | ' filename=dir$("*", fbDirectory)
117f0                 | ' n=0
117f0                 | ' while filename <> "" andalso filename <> nil andalso n<128
117f0                 | LR__1402
117f0     B9 01 00 FF 
117f4     D1 36 06 F6 | 	mov	local09, ##@LR__5916
117f8     19 13 02 F6 | 	mov	arg01, local07
117fc     1B 15 02 F6 | 	mov	arg02, local09
11800     74 56 B1 FD | 	call	#__system___string_cmp
11804     00 FA 0D F2 | 	cmp	result1, #0 wz
11808     68 00 90 AD |  if_e	jmp	#LR__1403
1180c     00 36 06 F6 | 	mov	local09, #0
11810     19 13 02 F6 | 	mov	arg01, local07
11814     00 14 06 F6 | 	mov	arg02, #0
11818     5C 56 B1 FD | 	call	#__system___string_cmp
1181c     00 FA 0D F2 | 	cmp	result1, #0 wz
11820     50 00 90 AD |  if_e	jmp	#LR__1403
11824     80 34 56 F2 | 	cmps	local08, #128 wc
11828     48 00 90 3D |  if_ae	jmp	#LR__1403
1182c     B9 01 00 FF 
11830     D2 12 06 F6 | 	mov	arg01, ##@LR__5917
11834     19 15 02 F6 | 	mov	arg02, local07
11838     70 56 B1 FD | 	call	#__system___string_concat
1183c     FD 32 02 F6 | 	mov	local07, result1
11840     1A 2F 02 F6 | 	mov	local05, local08
11844     02 2E 66 F0 | 	shl	local05, #2
11848     1C 4E 05 F1 | 	add	fp, #28
1184c     A7 2E 02 F1 | 	add	local05, fp
11850     17 33 62 FC | 	wrlong	local07, local05
11854     01 34 06 F1 | 	add	local08, #1
11858     00 2E 06 F6 | 	mov	local05, #0
1185c     00 12 06 F6 | 	mov	arg01, #0
11860     00 14 06 F6 | 	mov	arg02, #0
11864     1C 4E 85 F1 | 	sub	fp, #28
11868     44 B4 B1 FD | 	call	#__system___basic_dir
1186c     FD 32 02 F6 | 	mov	local07, result1
11870     7C FF 9F FD | 	jmp	#LR__1402
11874                 | LR__1403
11874                 | ' for i=0 to n-1			' now sort this
11874     00 2C 06 F6 | 	mov	local04, #0
11878     1A 39 02 F6 | 	mov	local10, local08
1187c                 | LR__1404
1187c     1C 2D 52 F2 | 	cmps	local04, local10 wc
11880     DC 00 90 3D |  if_ae	jmp	#LR__1408
11884     00 3A 06 F6 | 	mov	local11, #0
11888                 | '   swapped=false
11888                 | '   for j=0 to n-i-2
11888     00 3C 06 F6 | 	mov	local12, #0
1188c     1A 3F 02 F6 | 	mov	local13, local08
11890     16 3F 82 F1 | 	sub	local13, local04
11894     01 3E 86 F1 | 	sub	local13, #1
11898                 | LR__1405
11898     1F 3D 52 F2 | 	cmps	local12, local13 wc
1189c     B0 00 90 3D |  if_ae	jmp	#LR__1407
118a0                 | '     if filelist(j) > filelist(j+1) then
118a0     1E 37 02 F6 | 	mov	local09, local12
118a4     02 36 66 F0 | 	shl	local09, #2
118a8     1C 4E 05 F1 | 	add	fp, #28
118ac     A7 36 02 F1 | 	add	local09, fp
118b0     1B 13 02 FB | 	rdlong	arg01, local09
118b4     1E 37 02 F6 | 	mov	local09, local12
118b8     01 36 06 F1 | 	add	local09, #1
118bc     1B 31 02 F6 | 	mov	local06, local09
118c0     02 30 66 F0 | 	shl	local06, #2
118c4     A7 26 02 F6 | 	mov	local01, fp
118c8     A7 30 02 F1 | 	add	local06, fp
118cc     18 2F 02 FB | 	rdlong	local05, local06
118d0     17 15 02 F6 | 	mov	arg02, local05
118d4     1C 4E 85 F1 | 	sub	fp, #28
118d8     9C 55 B1 FD | 	call	#__system___string_cmp
118dc     01 FA 55 F2 | 	cmps	result1, #1 wc
118e0     64 00 90 CD |  if_b	jmp	#LR__1406
118e4     1E 37 02 F6 | 	mov	local09, local12
118e8     01 36 06 F1 | 	add	local09, #1
118ec     02 36 66 F0 | 	shl	local09, #2
118f0     1C 4E 05 F1 | 	add	fp, #28
118f4     A7 36 02 F1 | 	add	local09, fp
118f8     1B 3B 02 FB | 	rdlong	local11, local09
118fc     1E 31 02 F6 | 	mov	local06, local12
11900     02 30 66 F0 | 	shl	local06, #2
11904     A7 30 02 F1 | 	add	local06, fp
11908     18 2F 02 FB | 	rdlong	local05, local06
1190c     1E 37 02 F6 | 	mov	local09, local12
11910     1B 31 02 F6 | 	mov	local06, local09
11914     02 30 66 F0 | 	shl	local06, #2
11918     A7 26 02 F6 | 	mov	local01, fp
1191c     A7 30 02 F1 | 	add	local06, fp
11920     18 3B 62 FC | 	wrlong	local11, local06
11924     1E 29 02 F6 | 	mov	local02, local12
11928     01 28 06 F1 | 	add	local02, #1
1192c     14 41 02 F6 | 	mov	local14, local02
11930     02 40 66 F0 | 	shl	local14, #2
11934     A7 42 02 F6 | 	mov	local15, fp
11938     A7 40 02 F1 | 	add	local14, fp
1193c     20 2F 62 FC | 	wrlong	local05, local14
11940     01 3A 66 F6 | 	neg	local11, #1
11944     1C 4E 85 F1 | 	sub	fp, #28
11948                 | LR__1406
11948     01 3C 06 F1 | 	add	local12, #1
1194c     48 FF 9F FD | 	jmp	#LR__1405
11950                 | LR__1407
11950                 | ' if not swapped then exit for
11950     1D 45 22 F6 | 	not	local16, local11
11954     00 44 0E F2 | 	cmp	local16, #0 wz
11958     01 2C 06 A1 |  if_e	add	local04, #1
1195c     1C FF 9F AD |  if_e	jmp	#LR__1404
11960                 | LR__1408
11960                 | ' for i=0 to n-1
11960     00 2C 06 F6 | 	mov	local04, #0
11964     1A 47 02 F6 | 	mov	local17, local08
11968                 | LR__1409
11968     23 2D 52 F2 | 	cmps	local04, local17 wc
1196c     94 00 90 3D |  if_ae	jmp	#LR__1411
11970                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
11970     00 12 06 F6 | 	mov	arg01, #0
11974     00 B2 B1 FD | 	call	#__system___getiolock_0611
11978     FD 12 02 F6 | 	mov	arg01, result1
1197c     D0 54 B1 FD | 	call	#__system___lockmem
11980     16 29 02 F6 | 	mov	local02, local04
11984     02 28 66 F0 | 	shl	local02, #2
11988     1C 4E 05 F1 | 	add	fp, #28
1198c     A7 40 02 F6 | 	mov	local14, fp
11990     A7 28 02 F1 | 	add	local02, fp
11994     14 15 02 FB | 	rdlong	arg02, local02
11998     00 26 06 F6 | 	mov	local01, #0
1199c     00 12 06 F6 | 	mov	arg01, #0
119a0     00 16 06 F6 | 	mov	arg03, #0
119a4     1C 4E 85 F1 | 	sub	fp, #28
119a8     98 61 B1 FD | 	call	#__system___basic_print_string
119ac     00 12 06 F6 | 	mov	arg01, #0
119b0     C4 B1 B1 FD | 	call	#__system___getiolock_0611
119b4     FD 00 68 FC | 	wrlong	#0, result1
119b8     40 2A 06 F1 | 	add	local03, #64
119bc     15 13 02 F6 | 	mov	arg01, local03
119c0     04 37 B1 FD | 	call	#_hg010b_spin2_setcursorx
119c4     00 2B 56 F2 | 	cmps	local03, #256 wc
119c8     30 00 90 CD |  if_b	jmp	#LR__1410
119cc     00 2A 06 F6 | 	mov	local03, #0
119d0     00 12 06 F6 | 	mov	arg01, #0
119d4     A0 B1 B1 FD | 	call	#__system___getiolock_0611
119d8     FD 12 02 F6 | 	mov	arg01, result1
119dc     70 54 B1 FD | 	call	#__system___lockmem
119e0     00 12 06 F6 | 	mov	arg01, #0
119e4     0A 14 06 F6 | 	mov	arg02, #10
119e8     00 16 06 F6 | 	mov	arg03, #0
119ec     FC 60 B1 FD | 	call	#__system___basic_print_char
119f0     00 12 06 F6 | 	mov	arg01, #0
119f4     80 B1 B1 FD | 	call	#__system___getiolock_0611
119f8     FD 00 68 FC | 	wrlong	#0, result1
119fc                 | LR__1410
119fc     01 2C 06 F1 | 	add	local04, #1
11a00     64 FF 9F FD | 	jmp	#LR__1409
11a04                 | LR__1411
11a04                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
11a04     80 34 56 F2 | 	cmps	local08, #128 wc
11a08     44 00 90 CD |  if_b	jmp	#LR__1412
11a0c     00 12 06 F6 | 	mov	arg01, #0
11a10     64 B1 B1 FD | 	call	#__system___getiolock_0611
11a14     FD 12 02 F6 | 	mov	arg01, result1
11a18     34 54 B1 FD | 	call	#__system___lockmem
11a1c     B9 01 00 FF 
11a20     D9 14 06 F6 | 	mov	arg02, ##@LR__5918
11a24     00 12 06 F6 | 	mov	arg01, #0
11a28     00 16 06 F6 | 	mov	arg03, #0
11a2c     14 61 B1 FD | 	call	#__system___basic_print_string
11a30     00 12 06 F6 | 	mov	arg01, #0
11a34     0A 14 06 F6 | 	mov	arg02, #10
11a38     00 16 06 F6 | 	mov	arg03, #0
11a3c     AC 60 B1 FD | 	call	#__system___basic_print_char
11a40     00 12 06 F6 | 	mov	arg01, #0
11a44     30 B1 B1 FD | 	call	#__system___getiolock_0611
11a48     FD 00 68 FC | 	wrlong	#0, result1
11a4c     00 26 06 F6 | 	mov	local01, #0
11a50                 | LR__1412
11a50                 | ' print
11a50     00 12 06 F6 | 	mov	arg01, #0
11a54     20 B1 B1 FD | 	call	#__system___getiolock_0611
11a58     FD 12 02 F6 | 	mov	arg01, result1
11a5c     F0 53 B1 FD | 	call	#__system___lockmem
11a60     00 12 06 F6 | 	mov	arg01, #0
11a64     0A 14 06 F6 | 	mov	arg02, #10
11a68     00 16 06 F6 | 	mov	arg03, #0
11a6c     7C 60 B1 FD | 	call	#__system___basic_print_char
11a70     00 12 06 F6 | 	mov	arg01, #0
11a74     00 B1 B1 FD | 	call	#__system___getiolock_0611
11a78     FD 00 68 FC | 	wrlong	#0, result1
11a7c     00 30 06 F6 | 	mov	local06, #0
11a80     00 34 06 F6 | 	mov	local08, #0
11a84     00 2A 06 F6 | 	mov	local03, #0
11a88                 | ' return cursor_y
11a88     3E E4 05 F1 | 	add	objptr, #62
11a8c     F2 48 C2 FA | 	rdbyte	local18, objptr
11a90     3E E4 85 F1 | 	sub	objptr, #62
11a94     B9 01 00 FF 
11a98     0B 13 06 F6 | 	mov	arg01, ##@LR__5919
11a9c     21 14 06 F6 | 	mov	arg02, #33
11aa0     0C B2 B1 FD | 	call	#__system___basic_dir
11aa4     FD 32 02 F6 | 	mov	local07, result1
11aa8                 | ' n=0
11aa8                 | ' px=0: py=v.getcursory()
11aa8                 | ' filename = dir$("*", fbNormal )   
11aa8                 | ' do while filename <> "" andalso filename <> nil andalso n<128
11aa8                 | LR__1413
11aa8     B9 01 00 FF 
11aac     0D 37 06 F6 | 	mov	local09, ##@LR__5920
11ab0     19 13 02 F6 | 	mov	arg01, local07
11ab4     1B 15 02 F6 | 	mov	arg02, local09
11ab8     BC 53 B1 FD | 	call	#__system___string_cmp
11abc     00 FA 0D F2 | 	cmp	result1, #0 wz
11ac0     54 00 90 AD |  if_e	jmp	#LR__1414
11ac4     00 36 06 F6 | 	mov	local09, #0
11ac8     19 13 02 F6 | 	mov	arg01, local07
11acc     00 14 06 F6 | 	mov	arg02, #0
11ad0     A4 53 B1 FD | 	call	#__system___string_cmp
11ad4     00 FA 0D F2 | 	cmp	result1, #0 wz
11ad8     3C 00 90 AD |  if_e	jmp	#LR__1414
11adc     80 34 56 F2 | 	cmps	local08, #128 wc
11ae0     34 00 90 3D |  if_ae	jmp	#LR__1414
11ae4     1A 2F 02 F6 | 	mov	local05, local08
11ae8     02 2E 66 F0 | 	shl	local05, #2
11aec     1C 4E 05 F1 | 	add	fp, #28
11af0     A7 2E 02 F1 | 	add	local05, fp
11af4     17 33 62 FC | 	wrlong	local07, local05
11af8     01 34 06 F1 | 	add	local08, #1
11afc     00 2E 06 F6 | 	mov	local05, #0
11b00     00 12 06 F6 | 	mov	arg01, #0
11b04     00 14 06 F6 | 	mov	arg02, #0
11b08     1C 4E 85 F1 | 	sub	fp, #28
11b0c     A0 B1 B1 FD | 	call	#__system___basic_dir
11b10     FD 32 02 F6 | 	mov	local07, result1
11b14     90 FF 9F FD | 	jmp	#LR__1413
11b18                 | LR__1414
11b18                 | ' for i =0 to n-1
11b18     00 2C 06 F6 | 	mov	local04, #0
11b1c                 | LR__1415
11b1c     1A 2D 52 F2 | 	cmps	local04, local08 wc
11b20     D8 00 90 3D |  if_ae	jmp	#LR__1419
11b24     00 3A 06 F6 | 	mov	local11, #0
11b28                 | '   swapped=false
11b28                 | '   for j=0 to n-i-2
11b28     00 3C 06 F6 | 	mov	local12, #0
11b2c     1A 4B 02 F6 | 	mov	local19, local08
11b30     16 4B 82 F1 | 	sub	local19, local04
11b34     01 4A 86 F1 | 	sub	local19, #1
11b38                 | LR__1416
11b38     25 3D 52 F2 | 	cmps	local12, local19 wc
11b3c     AC 00 90 3D |  if_ae	jmp	#LR__1418
11b40                 | '     if filelist(j) > filelist(j+1) then
11b40     1E 37 02 F6 | 	mov	local09, local12
11b44     02 36 66 F0 | 	shl	local09, #2
11b48     1C 4E 05 F1 | 	add	fp, #28
11b4c     A7 36 02 F1 | 	add	local09, fp
11b50     1B 13 02 FB | 	rdlong	arg01, local09
11b54     1E 37 02 F6 | 	mov	local09, local12
11b58     01 36 06 F1 | 	add	local09, #1
11b5c     1B 31 02 F6 | 	mov	local06, local09
11b60     02 30 66 F0 | 	shl	local06, #2
11b64     A7 26 02 F6 | 	mov	local01, fp
11b68     A7 30 02 F1 | 	add	local06, fp
11b6c     18 2F 02 FB | 	rdlong	local05, local06
11b70     17 15 02 F6 | 	mov	arg02, local05
11b74     1C 4E 85 F1 | 	sub	fp, #28
11b78     FC 52 B1 FD | 	call	#__system___string_cmp
11b7c     01 FA 55 F2 | 	cmps	result1, #1 wc
11b80     60 00 90 CD |  if_b	jmp	#LR__1417
11b84     1E 37 02 F6 | 	mov	local09, local12
11b88     01 36 06 F1 | 	add	local09, #1
11b8c     02 36 66 F0 | 	shl	local09, #2
11b90     1C 4E 05 F1 | 	add	fp, #28
11b94     A7 36 02 F1 | 	add	local09, fp
11b98     1B 45 02 FB | 	rdlong	local16, local09
11b9c     1E 31 02 F6 | 	mov	local06, local12
11ba0     02 30 66 F0 | 	shl	local06, #2
11ba4     A7 30 02 F1 | 	add	local06, fp
11ba8     18 2F 02 FB | 	rdlong	local05, local06
11bac     1E 37 02 F6 | 	mov	local09, local12
11bb0     1B 31 02 F6 | 	mov	local06, local09
11bb4     02 30 66 F0 | 	shl	local06, #2
11bb8     A7 26 02 F6 | 	mov	local01, fp
11bbc     A7 30 02 F1 | 	add	local06, fp
11bc0     18 45 62 FC | 	wrlong	local16, local06
11bc4     1E 41 02 F6 | 	mov	local14, local12
11bc8     01 40 06 F1 | 	add	local14, #1
11bcc     02 40 66 F0 | 	shl	local14, #2
11bd0     A7 42 02 F6 | 	mov	local15, fp
11bd4     A7 40 02 F1 | 	add	local14, fp
11bd8     20 2F 62 FC | 	wrlong	local05, local14
11bdc     01 3A 66 F6 | 	neg	local11, #1
11be0     1C 4E 85 F1 | 	sub	fp, #28
11be4                 | LR__1417
11be4     01 3C 06 F1 | 	add	local12, #1
11be8     4C FF 9F FD | 	jmp	#LR__1416
11bec                 | LR__1418
11bec                 | ' if not swapped then exit for
11bec     1D 45 22 F6 | 	not	local16, local11
11bf0     00 44 0E F2 | 	cmp	local16, #0 wz
11bf4     01 2C 06 A1 |  if_e	add	local04, #1
11bf8     20 FF 9F AD |  if_e	jmp	#LR__1415
11bfc                 | LR__1419
11bfc                 | ' for i=0 to n-1
11bfc     00 2C 06 F6 | 	mov	local04, #0
11c00                 | LR__1420
11c00     1A 2D 52 F2 | 	cmps	local04, local08 wc
11c04     8C 00 90 3D |  if_ae	jmp	#LR__1422
11c08                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
11c08     00 12 06 F6 | 	mov	arg01, #0
11c0c     68 AF B1 FD | 	call	#__system___getiolock_0611
11c10     FD 12 02 F6 | 	mov	arg01, result1
11c14     38 52 B1 FD | 	call	#__system___lockmem
11c18     16 29 02 F6 | 	mov	local02, local04
11c1c     02 28 66 F0 | 	shl	local02, #2
11c20     1C 4E 05 F1 | 	add	fp, #28
11c24     A7 28 02 F1 | 	add	local02, fp
11c28     14 15 02 FB | 	rdlong	arg02, local02
11c2c     00 12 06 F6 | 	mov	arg01, #0
11c30     00 16 06 F6 | 	mov	arg03, #0
11c34     1C 4E 85 F1 | 	sub	fp, #28
11c38     08 5F B1 FD | 	call	#__system___basic_print_string
11c3c     00 12 06 F6 | 	mov	arg01, #0
11c40     34 AF B1 FD | 	call	#__system___getiolock_0611
11c44     FD 00 68 FC | 	wrlong	#0, result1
11c48     40 2A 06 F1 | 	add	local03, #64
11c4c     15 13 02 F6 | 	mov	arg01, local03
11c50     74 34 B1 FD | 	call	#_hg010b_spin2_setcursorx
11c54     00 2B 56 F2 | 	cmps	local03, #256 wc
11c58     30 00 90 CD |  if_b	jmp	#LR__1421
11c5c     00 2A 06 F6 | 	mov	local03, #0
11c60     00 12 06 F6 | 	mov	arg01, #0
11c64     10 AF B1 FD | 	call	#__system___getiolock_0611
11c68     FD 12 02 F6 | 	mov	arg01, result1
11c6c     E0 51 B1 FD | 	call	#__system___lockmem
11c70     00 12 06 F6 | 	mov	arg01, #0
11c74     0A 14 06 F6 | 	mov	arg02, #10
11c78     00 16 06 F6 | 	mov	arg03, #0
11c7c     6C 5E B1 FD | 	call	#__system___basic_print_char
11c80     00 12 06 F6 | 	mov	arg01, #0
11c84     F0 AE B1 FD | 	call	#__system___getiolock_0611
11c88     FD 00 68 FC | 	wrlong	#0, result1
11c8c                 | LR__1421
11c8c     01 2C 06 F1 | 	add	local04, #1
11c90     6C FF 9F FD | 	jmp	#LR__1420
11c94                 | LR__1422
11c94                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
11c94     80 34 56 F2 | 	cmps	local08, #128 wc
11c98     40 00 90 CD |  if_b	jmp	#LR__1423
11c9c     00 12 06 F6 | 	mov	arg01, #0
11ca0     D4 AE B1 FD | 	call	#__system___getiolock_0611
11ca4     FD 12 02 F6 | 	mov	arg01, result1
11ca8     A4 51 B1 FD | 	call	#__system___lockmem
11cac     B9 01 00 FF 
11cb0     0E 15 06 F6 | 	mov	arg02, ##@LR__5921
11cb4     00 12 06 F6 | 	mov	arg01, #0
11cb8     00 16 06 F6 | 	mov	arg03, #0
11cbc     84 5E B1 FD | 	call	#__system___basic_print_string
11cc0     00 12 06 F6 | 	mov	arg01, #0
11cc4     0A 14 06 F6 | 	mov	arg02, #10
11cc8     00 16 06 F6 | 	mov	arg03, #0
11ccc     1C 5E B1 FD | 	call	#__system___basic_print_char
11cd0     00 12 06 F6 | 	mov	arg01, #0
11cd4     A0 AE B1 FD | 	call	#__system___getiolock_0611
11cd8     FD 00 68 FC | 	wrlong	#0, result1
11cdc                 | LR__1423
11cdc                 | ' print
11cdc     00 12 06 F6 | 	mov	arg01, #0
11ce0     94 AE B1 FD | 	call	#__system___getiolock_0611
11ce4     FD 12 02 F6 | 	mov	arg01, result1
11ce8     64 51 B1 FD | 	call	#__system___lockmem
11cec     00 12 06 F6 | 	mov	arg01, #0
11cf0     0A 14 06 F6 | 	mov	arg02, #10
11cf4     00 16 06 F6 | 	mov	arg03, #0
11cf8     F0 5D B1 FD | 	call	#__system___basic_print_char
11cfc     00 12 06 F6 | 	mov	arg01, #0
11d00     74 AE B1 FD | 	call	#__system___getiolock_0611
11d04     FD 00 68 FC | 	wrlong	#0, result1
11d08     A7 F0 03 F6 | 	mov	ptra, fp
11d0c     B2 00 A0 FD | 	call	#popregs_
11d10                 | _do_dir_ret
11d10     2D 00 64 FD | 	ret
11d14                 | 
11d14                 | ' 
11d14                 | ' '-------------------- dpeek
11d14                 | ' 
11d14                 | ' sub do_dpeek
11d14                 | _do_dpeek
11d14     00 4A 05 F6 | 	mov	COUNT_, #0
11d18     A8 00 A0 FD | 	call	#pushregs_
11d1c     14 F0 07 F1 | 	add	ptra, #20
11d20     1C B9 BF FD | 	call	#_pop
11d24     A7 FA 61 FC | 	wrlong	result1, fp
11d28     04 4E 05 F1 | 	add	fp, #4
11d2c     A7 FC 61 FC | 	wrlong	result2, fp
11d30     04 4E 05 F1 | 	add	fp, #4
11d34     A7 FE 61 FC | 	wrlong	result3, fp
11d38     08 4E 85 F1 | 	sub	fp, #8
11d3c     A7 12 02 F6 | 	mov	arg01, fp
11d40     E0 BA BF FD | 	call	#_converttoint
11d44     0C 4E 05 F1 | 	add	fp, #12
11d48     A7 FA 61 FC | 	wrlong	result1, fp
11d4c                 | ' 
11d4c                 | ' t1=pop()
11d4c                 | ' a=converttoint(t1)
11d4c                 | ' if a<$80000 then r=dpeek(a) else r=psdpeek(a)
11d4c     0C 4E 85 F1 | 	sub	fp, #12
11d50     00 04 00 FF 
11d54     00 FA 15 F2 | 	cmp	result1, ##524288 wc
11d58     1C 00 90 3D |  if_ae	jmp	#LR__1430
11d5c     0C 4E 05 F1 | 	add	fp, #12
11d60     A7 12 02 FB | 	rdlong	arg01, fp
11d64     09 FB E1 FA | 	rdword	result1, arg01
11d68     04 4E 05 F1 | 	add	fp, #4
11d6c     A7 FA 61 FC | 	wrlong	result1, fp
11d70     10 4E 85 F1 | 	sub	fp, #16
11d74     1C 00 90 FD | 	jmp	#LR__1431
11d78                 | LR__1430
11d78     0C 4E 05 F1 | 	add	fp, #12
11d7c     A7 12 02 FB | 	rdlong	arg01, fp
11d80     0C 4E 85 F1 | 	sub	fp, #12
11d84     D4 19 B1 FD | 	call	#_psdpeek
11d88     10 4E 05 F1 | 	add	fp, #16
11d8c     A7 FA 61 FC | 	wrlong	result1, fp
11d90     10 4E 85 F1 | 	sub	fp, #16
11d94                 | LR__1431
11d94     08 4E 05 F1 | 	add	fp, #8
11d98     A7 3A 68 FC | 	wrlong	#29, fp
11d9c     08 4E 05 F1 | 	add	fp, #8
11da0     A7 12 02 FB | 	rdlong	arg01, fp
11da4     10 4E 85 F1 | 	sub	fp, #16
11da8     A7 12 62 FC | 	wrlong	arg01, fp
11dac     A7 12 02 F6 | 	mov	arg01, fp
11db0     24 B9 BF FD | 	call	#_push
11db4     A7 F0 03 F6 | 	mov	ptra, fp
11db8     B2 00 A0 FD | 	call	#popregs_
11dbc                 | _do_dpeek_ret
11dbc     2D 00 64 FD | 	ret
11dc0                 | 
11dc0                 | ' 
11dc0                 | ' '-------------------- dpoke
11dc0                 | ' 
11dc0                 | ' sub do_dpoke
11dc0                 | _do_dpoke
11dc0     01 4A 05 F6 | 	mov	COUNT_, #1
11dc4     A8 00 A0 FD | 	call	#pushregs_
11dc8     20 F0 07 F1 | 	add	ptra, #32
11dcc     70 B8 BF FD | 	call	#_pop
11dd0     FD 14 02 F6 | 	mov	arg02, result1
11dd4     FE 12 02 F6 | 	mov	arg01, result2
11dd8     FF 26 02 F6 | 	mov	local01, result3
11ddc     A7 14 62 FC | 	wrlong	arg02, fp
11de0     04 4E 05 F1 | 	add	fp, #4
11de4     A7 12 62 FC | 	wrlong	arg01, fp
11de8     04 4E 05 F1 | 	add	fp, #4
11dec     A7 26 62 FC | 	wrlong	local01, fp
11df0     08 4E 85 F1 | 	sub	fp, #8
11df4     48 B8 BF FD | 	call	#_pop
11df8     FF 26 02 F6 | 	mov	local01, result3
11dfc     0C 4E 05 F1 | 	add	fp, #12
11e00     A7 FA 61 FC | 	wrlong	result1, fp
11e04     04 4E 05 F1 | 	add	fp, #4
11e08     A7 FC 61 FC | 	wrlong	result2, fp
11e0c     04 4E 05 F1 | 	add	fp, #4
11e10     A7 26 62 FC | 	wrlong	local01, fp
11e14     08 4E 85 F1 | 	sub	fp, #8
11e18     A7 12 02 F6 | 	mov	arg01, fp
11e1c     0C 4E 85 F1 | 	sub	fp, #12
11e20     00 BA BF FD | 	call	#_converttoint
11e24     18 4E 05 F1 | 	add	fp, #24
11e28     A7 FA 61 FC | 	wrlong	result1, fp
11e2c     18 4E 85 F1 | 	sub	fp, #24
11e30     A7 12 02 F6 | 	mov	arg01, fp
11e34     EC B9 BF FD | 	call	#_converttoint
11e38     1C 4E 05 F1 | 	add	fp, #28
11e3c     A7 FA 61 FC | 	wrlong	result1, fp
11e40                 | ' 
11e40                 | ' t1=pop() 'value
11e40                 | ' t2=pop() 
11e40                 | ' a=converttoint(t2) : v=converttoint(t1)
11e40                 | ' if a<$80000 then dpoke a,v else psdpoke a,v
11e40     04 4E 85 F1 | 	sub	fp, #4
11e44     A7 26 02 FB | 	rdlong	local01, fp
11e48     18 4E 85 F1 | 	sub	fp, #24
11e4c     00 04 00 FF 
11e50     00 26 16 F2 | 	cmp	local01, ##524288 wc
11e54     1C 00 90 3D |  if_ae	jmp	#LR__1440
11e58     18 4E 05 F1 | 	add	fp, #24
11e5c     A7 12 02 FB | 	rdlong	arg01, fp
11e60     04 4E 05 F1 | 	add	fp, #4
11e64     A7 14 02 FB | 	rdlong	arg02, fp
11e68     1C 4E 85 F1 | 	sub	fp, #28
11e6c     09 15 52 FC | 	wrword	arg02, arg01
11e70     18 00 90 FD | 	jmp	#LR__1441
11e74                 | LR__1440
11e74     18 4E 05 F1 | 	add	fp, #24
11e78     A7 12 02 FB | 	rdlong	arg01, fp
11e7c     04 4E 05 F1 | 	add	fp, #4
11e80     A7 14 02 FB | 	rdlong	arg02, fp
11e84     1C 4E 85 F1 | 	sub	fp, #28
11e88     90 17 B1 FD | 	call	#_psdpoke
11e8c                 | LR__1441
11e8c     A7 F0 03 F6 | 	mov	ptra, fp
11e90     B2 00 A0 FD | 	call	#popregs_
11e94                 | _do_dpoke_ret
11e94     2D 00 64 FD | 	ret
11e98                 | 
11e98                 | ' '-------------------- draw
11e98                 | ' 
11e98                 | ' sub do_draw
11e98                 | _do_draw
11e98     00 4A 05 F6 | 	mov	COUNT_, #0
11e9c     A8 00 A0 FD | 	call	#pushregs_
11ea0     20 F0 07 F1 | 	add	ptra, #32
11ea4     98 B7 BF FD | 	call	#_pop
11ea8     FD 1A 02 F6 | 	mov	arg05, result1
11eac     FE 18 02 F6 | 	mov	arg04, result2
11eb0     FF 16 02 F6 | 	mov	arg03, result3
11eb4     0C 4E 05 F1 | 	add	fp, #12
11eb8     A7 1A 62 FC | 	wrlong	arg05, fp
11ebc     04 4E 05 F1 | 	add	fp, #4
11ec0     A7 18 62 FC | 	wrlong	arg04, fp
11ec4     04 4E 05 F1 | 	add	fp, #4
11ec8     A7 16 62 FC | 	wrlong	arg03, fp
11ecc     14 4E 85 F1 | 	sub	fp, #20
11ed0     6C B7 BF FD | 	call	#_pop
11ed4     FF 1A 02 F6 | 	mov	arg05, result3
11ed8     A7 FA 61 FC | 	wrlong	result1, fp
11edc     04 4E 05 F1 | 	add	fp, #4
11ee0     A7 FC 61 FC | 	wrlong	result2, fp
11ee4     04 4E 05 F1 | 	add	fp, #4
11ee8     A7 1A 62 FC | 	wrlong	arg05, fp
11eec     08 4E 85 F1 | 	sub	fp, #8
11ef0     A7 12 02 F6 | 	mov	arg01, fp
11ef4     2C B9 BF FD | 	call	#_converttoint
11ef8     18 4E 05 F1 | 	add	fp, #24
11efc     A7 FA 61 FC | 	wrlong	result1, fp
11f00     0C 4E 85 F1 | 	sub	fp, #12
11f04     A7 12 02 F6 | 	mov	arg01, fp
11f08     0C 4E 85 F1 | 	sub	fp, #12
11f0c     14 B9 BF FD | 	call	#_converttoint
11f10     1C 4E 05 F1 | 	add	fp, #28
11f14     A7 FA 61 FC | 	wrlong	result1, fp
11f18     37 00 00 FF 
11f1c     2C E4 05 F1 | 	add	objptr, ##28204
11f20     F2 12 02 FB | 	rdlong	arg01, objptr
11f24     04 E4 05 F1 | 	add	objptr, #4
11f28     F2 14 02 FB | 	rdlong	arg02, objptr
11f2c     04 4E 85 F1 | 	sub	fp, #4
11f30     A7 16 02 FB | 	rdlong	arg03, fp
11f34     FD 18 02 F6 | 	mov	arg04, result1
11f38     18 4E 85 F1 | 	sub	fp, #24
11f3c     08 E4 85 F1 | 	sub	objptr, #8
11f40     F2 1A 02 FB | 	rdlong	arg05, objptr
11f44     37 00 00 FF 
11f48     28 E4 85 F1 | 	sub	objptr, ##28200
11f4c     28 28 B1 FD | 	call	#_hg010b_spin2_draw
11f50     18 4E 05 F1 | 	add	fp, #24
11f54     A7 1A 02 FB | 	rdlong	arg05, fp
11f58     37 00 00 FF 
11f5c     2C E4 05 F1 | 	add	objptr, ##28204
11f60     F2 1A 62 FC | 	wrlong	arg05, objptr
11f64     04 4E 05 F1 | 	add	fp, #4
11f68     A7 1A 02 FB | 	rdlong	arg05, fp
11f6c     1C 4E 85 F1 | 	sub	fp, #28
11f70     04 E4 05 F1 | 	add	objptr, #4
11f74     F2 1A 62 FC | 	wrlong	arg05, objptr
11f78     37 00 00 FF 
11f7c     30 E4 85 F1 | 	sub	objptr, ##28208
11f80     A7 F0 03 F6 | 	mov	ptra, fp
11f84     B2 00 A0 FD | 	call	#popregs_
11f88                 | _do_draw_ret
11f88     2D 00 64 FD | 	ret
11f8c                 | 
11f8c                 | ' 
11f8c                 | ' '-------------------- else
11f8c                 | ' 
11f8c                 | ' sub do_else
11f8c                 | _do_else
11f8c     4A 00 00 FF 
11f90     7C E4 05 F1 | 	add	objptr, ##38012
11f94     F2 00 02 FB | 	rdlong	_var01, objptr
11f98     01 00 86 F1 | 	sub	_var01, #1
11f9c     04 E4 05 F1 | 	add	objptr, #4
11fa0     F2 00 62 FC | 	wrlong	_var01, objptr
11fa4     4A 00 00 FF 
11fa8     80 E4 85 F1 | 	sub	objptr, ##38016
11fac                 | _do_else_ret
11fac     2D 00 64 FD | 	ret
11fb0                 | 
11fb0                 | ' 
11fb0                 | ' '-------------------- end
11fb0                 | ' 
11fb0                 | ' sub do_end
11fb0                 | _do_end
11fb0     4A 00 00 FF 
11fb4     7C E4 05 F1 | 	add	objptr, ##38012
11fb8     F2 00 02 FB | 	rdlong	_var01, objptr
11fbc     01 00 86 F1 | 	sub	_var01, #1
11fc0     04 E4 05 F1 | 	add	objptr, #4
11fc4     F2 00 62 FC | 	wrlong	_var01, objptr
11fc8     06 00 00 FF 
11fcc     38 E4 05 F1 | 	add	objptr, ##3128
11fd0     FF FF BF FF 
11fd4     F2 FE 6B FC | 	wrlong	##2147483647, objptr
11fd8     50 00 00 FF 
11fdc     B8 E4 85 F1 | 	sub	objptr, ##41144
11fe0                 | _do_end_ret
11fe0     2D 00 64 FD | 	ret
11fe4                 | 
11fe4                 | ' 
11fe4                 | ' '-------------------- enter
11fe4                 | ' 
11fe4                 | ' sub do_enter
11fe4                 | _do_enter
11fe4     02 00 00 FF 
11fe8     D2 12 06 F6 | 	mov	arg01, ##1234
11fec     AC 2F B0 FD | 	call	#_do_load
11ff0                 | _do_enter_ret
11ff0     2D 00 64 FD | 	ret
11ff4                 | 
11ff4                 | ' 
11ff4                 | ' '------------------- error processing
11ff4                 | ' 
11ff4                 | ' sub do_error
11ff4                 | _do_error
11ff4     01 4A 05 F6 | 	mov	COUNT_, #1
11ff8     A8 00 A0 FD | 	call	#pushregs_
11ffc     4A 00 00 FF 
12000     80 E4 05 F1 | 	add	objptr, ##38016
12004     F2 18 02 FB | 	rdlong	arg04, objptr
12008     0C 17 02 F6 | 	mov	arg03, arg04
1200c     01 16 66 F0 | 	shl	arg03, #1
12010     0C 17 02 F1 | 	add	arg03, arg04
12014     02 16 66 F0 | 	shl	arg03, #2
12018     03 00 00 FF 
1201c     04 E4 85 F1 | 	sub	objptr, ##1540
12020     F2 16 02 F1 | 	add	arg03, objptr
12024     0B 27 02 FB | 	rdlong	local01, arg03
12028                 | ' r=compiledline(lineptr_e).result.uresult
12028                 | ' print "Error ";r;": ";errors$(r)
12028     00 12 06 F6 | 	mov	arg01, #0
1202c     47 00 00 FF 
12030     7C E4 85 F1 | 	sub	objptr, ##36476
12034     40 AB B1 FD | 	call	#__system___getiolock_0611
12038     FD 12 02 F6 | 	mov	arg01, result1
1203c     10 4E B1 FD | 	call	#__system___lockmem
12040     B9 01 00 FF 
12044     40 15 06 F6 | 	mov	arg02, ##@LR__5922
12048     00 12 06 F6 | 	mov	arg01, #0
1204c     00 16 06 F6 | 	mov	arg03, #0
12050     F0 5A B1 FD | 	call	#__system___basic_print_string
12054     00 12 06 F6 | 	mov	arg01, #0
12058     13 15 02 F6 | 	mov	arg02, local01
1205c     00 16 06 F6 | 	mov	arg03, #0
12060     0A 18 06 F6 | 	mov	arg04, #10
12064     60 5B B1 FD | 	call	#__system___basic_print_unsigned
12068     B9 01 00 FF 
1206c     47 15 06 F6 | 	mov	arg02, ##@LR__5923
12070     00 12 06 F6 | 	mov	arg01, #0
12074     00 16 06 F6 | 	mov	arg03, #0
12078     C8 5A B1 FD | 	call	#__system___basic_print_string
1207c     02 26 66 F0 | 	shl	local01, #2
12080     45 00 00 FF 
12084     7C E4 05 F1 | 	add	objptr, ##35452
12088     F2 26 02 F1 | 	add	local01, objptr
1208c     13 15 02 FB | 	rdlong	arg02, local01
12090     00 12 06 F6 | 	mov	arg01, #0
12094     00 16 06 F6 | 	mov	arg03, #0
12098     45 00 00 FF 
1209c     7C E4 85 F1 | 	sub	objptr, ##35452
120a0     A0 5A B1 FD | 	call	#__system___basic_print_string
120a4     00 12 06 F6 | 	mov	arg01, #0
120a8     0A 14 06 F6 | 	mov	arg02, #10
120ac     00 16 06 F6 | 	mov	arg03, #0
120b0     38 5A B1 FD | 	call	#__system___basic_print_char
120b4     00 12 06 F6 | 	mov	arg01, #0
120b8     BC AA B1 FD | 	call	#__system___getiolock_0611
120bc     FD 00 68 FC | 	wrlong	#0, result1
120c0     A7 F0 03 F6 | 	mov	ptra, fp
120c4     B2 00 A0 FD | 	call	#popregs_
120c8                 | _do_error_ret
120c8     2D 00 64 FD | 	ret
120cc                 | 
120cc                 | ' 
120cc                 | ' '-------------------- fcircle
120cc                 | ' 
120cc                 | ' sub do_fcircle
120cc                 | _do_fcircle
120cc     02 4A 05 F6 | 	mov	COUNT_, #2
120d0     A8 00 A0 FD | 	call	#pushregs_
120d4     24 F0 07 F1 | 	add	ptra, #36
120d8     64 B5 BF FD | 	call	#_pop
120dc     FD 14 02 F6 | 	mov	arg02, result1
120e0     FE 18 02 F6 | 	mov	arg04, result2
120e4     FF 16 02 F6 | 	mov	arg03, result3
120e8     18 4E 05 F1 | 	add	fp, #24
120ec     A7 14 62 FC | 	wrlong	arg02, fp
120f0     04 4E 05 F1 | 	add	fp, #4
120f4     A7 18 62 FC | 	wrlong	arg04, fp
120f8     04 4E 05 F1 | 	add	fp, #4
120fc     A7 16 62 FC | 	wrlong	arg03, fp
12100     20 4E 85 F1 | 	sub	fp, #32
12104     38 B5 BF FD | 	call	#_pop
12108     FD 14 02 F6 | 	mov	arg02, result1
1210c     FE 18 02 F6 | 	mov	arg04, result2
12110     FF 16 02 F6 | 	mov	arg03, result3
12114     0C 4E 05 F1 | 	add	fp, #12
12118     A7 14 62 FC | 	wrlong	arg02, fp
1211c     04 4E 05 F1 | 	add	fp, #4
12120     A7 18 62 FC | 	wrlong	arg04, fp
12124     04 4E 05 F1 | 	add	fp, #4
12128     A7 16 62 FC | 	wrlong	arg03, fp
1212c     14 4E 85 F1 | 	sub	fp, #20
12130     0C B5 BF FD | 	call	#_pop
12134     FF 14 02 F6 | 	mov	arg02, result3
12138     A7 FA 61 FC | 	wrlong	result1, fp
1213c     04 4E 05 F1 | 	add	fp, #4
12140     A7 FC 61 FC | 	wrlong	result2, fp
12144     04 4E 05 F1 | 	add	fp, #4
12148     A7 14 62 FC | 	wrlong	arg02, fp
1214c     08 4E 85 F1 | 	sub	fp, #8
12150     A7 12 02 F6 | 	mov	arg01, fp
12154     CC B6 BF FD | 	call	#_converttoint
12158     FD 26 02 F6 | 	mov	local01, result1
1215c     0C 4E 05 F1 | 	add	fp, #12
12160     A7 12 02 F6 | 	mov	arg01, fp
12164     0C 4E 85 F1 | 	sub	fp, #12
12168     B8 B6 BF FD | 	call	#_converttoint
1216c     FD 28 02 F6 | 	mov	local02, result1
12170     18 4E 05 F1 | 	add	fp, #24
12174     A7 12 02 F6 | 	mov	arg01, fp
12178     18 4E 85 F1 | 	sub	fp, #24
1217c     A4 B6 BF FD | 	call	#_converttoint
12180     FD 16 02 F6 | 	mov	arg03, result1
12184     37 00 00 FF 
12188     28 E4 05 F1 | 	add	objptr, ##28200
1218c     F2 18 02 FB | 	rdlong	arg04, objptr
12190     37 00 00 FF 
12194     28 E4 85 F1 | 	sub	objptr, ##28200
12198     13 13 02 F6 | 	mov	arg01, local01
1219c     14 15 02 F6 | 	mov	arg02, local02
121a0     58 2A B1 FD | 	call	#_hg010b_spin2_fcircle
121a4     A7 F0 03 F6 | 	mov	ptra, fp
121a8     B2 00 A0 FD | 	call	#popregs_
121ac                 | _do_fcircle_ret
121ac     2D 00 64 FD | 	ret
121b0                 | 
121b0                 | ' 
121b0                 | ' '-------------------- fill
121b0                 | ' 
121b0                 | ' sub do_fill
121b0                 | _do_fill
121b0     03 4A 05 F6 | 	mov	COUNT_, #3
121b4     A8 00 A0 FD | 	call	#pushregs_
121b8     30 F0 07 F1 | 	add	ptra, #48
121bc     80 B4 BF FD | 	call	#_pop
121c0     FD 16 02 F6 | 	mov	arg03, result1
121c4     FE 14 02 F6 | 	mov	arg02, result2
121c8     FF 18 02 F6 | 	mov	arg04, result3
121cc     24 4E 05 F1 | 	add	fp, #36
121d0     A7 16 62 FC | 	wrlong	arg03, fp
121d4     04 4E 05 F1 | 	add	fp, #4
121d8     A7 14 62 FC | 	wrlong	arg02, fp
121dc     04 4E 05 F1 | 	add	fp, #4
121e0     A7 18 62 FC | 	wrlong	arg04, fp
121e4     2C 4E 85 F1 | 	sub	fp, #44
121e8     54 B4 BF FD | 	call	#_pop
121ec     FD 16 02 F6 | 	mov	arg03, result1
121f0     FE 14 02 F6 | 	mov	arg02, result2
121f4     FF 18 02 F6 | 	mov	arg04, result3
121f8     18 4E 05 F1 | 	add	fp, #24
121fc     A7 16 62 FC | 	wrlong	arg03, fp
12200     04 4E 05 F1 | 	add	fp, #4
12204     A7 14 62 FC | 	wrlong	arg02, fp
12208     04 4E 05 F1 | 	add	fp, #4
1220c     A7 18 62 FC | 	wrlong	arg04, fp
12210     20 4E 85 F1 | 	sub	fp, #32
12214     28 B4 BF FD | 	call	#_pop
12218     FD 16 02 F6 | 	mov	arg03, result1
1221c     FE 14 02 F6 | 	mov	arg02, result2
12220     FF 18 02 F6 | 	mov	arg04, result3
12224     0C 4E 05 F1 | 	add	fp, #12
12228     A7 16 62 FC | 	wrlong	arg03, fp
1222c     04 4E 05 F1 | 	add	fp, #4
12230     A7 14 62 FC | 	wrlong	arg02, fp
12234     04 4E 05 F1 | 	add	fp, #4
12238     A7 18 62 FC | 	wrlong	arg04, fp
1223c     14 4E 85 F1 | 	sub	fp, #20
12240     FC B3 BF FD | 	call	#_pop
12244     FF 16 02 F6 | 	mov	arg03, result3
12248     A7 FA 61 FC | 	wrlong	result1, fp
1224c     04 4E 05 F1 | 	add	fp, #4
12250     A7 FC 61 FC | 	wrlong	result2, fp
12254     04 4E 05 F1 | 	add	fp, #4
12258     A7 16 62 FC | 	wrlong	arg03, fp
1225c     08 4E 85 F1 | 	sub	fp, #8
12260     A7 12 02 F6 | 	mov	arg01, fp
12264     BC B5 BF FD | 	call	#_converttoint
12268     FD 26 02 F6 | 	mov	local01, result1
1226c     0C 4E 05 F1 | 	add	fp, #12
12270     A7 12 02 F6 | 	mov	arg01, fp
12274     0C 4E 85 F1 | 	sub	fp, #12
12278     A8 B5 BF FD | 	call	#_converttoint
1227c     FD 28 02 F6 | 	mov	local02, result1
12280     18 4E 05 F1 | 	add	fp, #24
12284     A7 12 02 F6 | 	mov	arg01, fp
12288     18 4E 85 F1 | 	sub	fp, #24
1228c     94 B5 BF FD | 	call	#_converttoint
12290     FD 2A 02 F6 | 	mov	local03, result1
12294     24 4E 05 F1 | 	add	fp, #36
12298     A7 12 02 F6 | 	mov	arg01, fp
1229c     24 4E 85 F1 | 	sub	fp, #36
122a0     80 B5 BF FD | 	call	#_converttoint
122a4     FD 18 02 F6 | 	mov	arg04, result1
122a8     13 13 02 F6 | 	mov	arg01, local01
122ac     14 15 02 F6 | 	mov	arg02, local02
122b0     15 17 02 F6 | 	mov	arg03, local03
122b4     B0 26 B1 FD | 	call	#_hg010b_spin2_fill
122b8     A7 F0 03 F6 | 	mov	ptra, fp
122bc     B2 00 A0 FD | 	call	#popregs_
122c0                 | _do_fill_ret
122c0     2D 00 64 FD | 	ret
122c4                 | 
122c4                 | ' 
122c4                 | ' '-------------------- font
122c4                 | ' 
122c4                 | ' sub do_font
122c4                 | _do_font
122c4     03 4A 05 F6 | 	mov	COUNT_, #3
122c8     A8 00 A0 FD | 	call	#pushregs_
122cc     70 B3 BF FD | 	call	#_pop
122d0     FD 26 02 F6 | 	mov	local01, result1
122d4     FE 28 02 F6 | 	mov	local02, result2
122d8     FF 2A 02 F6 | 	mov	local03, result3
122dc                 | ' 
122dc                 | ' t1=pop() 
122dc                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
122dc     1E 2A 0E F2 | 	cmp	local03, #30 wz
122e0     10 00 90 5D |  if_ne	jmp	#LR__1450
122e4     13 13 02 F6 | 	mov	arg01, local01
122e8     00 14 06 F6 | 	mov	arg02, #0
122ec     A0 7E B1 FD | 	call	#__system___float_tointeger
122f0     FD 26 02 F6 | 	mov	local01, result1
122f4                 | LR__1450
122f4                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
122f4     1F 2A 0E F2 | 	cmp	local03, #31 wz
122f8     18 00 90 5D |  if_ne	jmp	#LR__1451
122fc     13 13 02 F6 | 	mov	arg01, local01
12300     D0 81 B1 FD | 	call	#__system____builtin_atof
12304     FD 12 02 F6 | 	mov	arg01, result1
12308     00 14 06 F6 | 	mov	arg02, #0
1230c     80 7E B1 FD | 	call	#__system___float_tointeger
12310     FD 26 02 F6 | 	mov	local01, result1
12314                 | LR__1451
12314     37 00 00 FF 
12318     40 E4 05 F1 | 	add	objptr, ##28224
1231c     F2 26 62 FC | 	wrlong	local01, objptr
12320     37 00 00 FF 
12324     40 E4 85 F1 | 	sub	objptr, ##28224
12328     02 26 66 F0 | 	shl	local01, #2
1232c     13 13 02 F6 | 	mov	arg01, local01
12330     18 2D B1 FD | 	call	#_hg010b_spin2_setfontfamily
12334     A7 F0 03 F6 | 	mov	ptra, fp
12338     B2 00 A0 FD | 	call	#popregs_
1233c                 | _do_font_ret
1233c     2D 00 64 FD | 	ret
12340                 | 
12340                 | ' 
12340                 | ' '-------------------- for
12340                 | ' 
12340                 | ' sub do_for()
12340                 | _do_for
12340     01 4A 05 F6 | 	mov	COUNT_, #1
12344     A8 00 A0 FD | 	call	#pushregs_
12348     10 F0 07 F1 | 	add	ptra, #16
1234c     50 00 00 FF 
12350     30 E5 05 F1 | 	add	objptr, ##41264
12354     F2 12 02 FB | 	rdlong	arg01, objptr
12358     01 12 06 F1 | 	add	arg01, #1
1235c     F2 12 62 FC | 	wrlong	arg01, objptr
12360     50 00 00 FF 
12364     30 E5 85 F1 | 	sub	objptr, ##41264
12368     D4 B2 BF FD | 	call	#_pop
1236c     A7 FA 61 FC | 	wrlong	result1, fp
12370     04 4E 05 F1 | 	add	fp, #4
12374     A7 FC 61 FC | 	wrlong	result2, fp
12378     04 4E 05 F1 | 	add	fp, #4
1237c     A7 FE 61 FC | 	wrlong	result3, fp
12380     08 4E 85 F1 | 	sub	fp, #8
12384     50 00 00 FF 
12388     30 E5 05 F1 | 	add	objptr, ##41264
1238c     F2 12 02 FB | 	rdlong	arg01, objptr
12390     09 27 02 F6 | 	mov	local01, arg01
12394     02 26 66 F0 | 	shl	local01, #2
12398     09 27 02 F1 | 	add	local01, arg01
1239c     02 26 66 F0 | 	shl	local01, #2
123a0     06 00 00 FF 
123a4     98 E4 85 F1 | 	sub	objptr, ##3224
123a8     F2 26 02 F1 | 	add	local01, objptr
123ac     A7 12 02 FB | 	rdlong	arg01, fp
123b0     08 26 06 F1 | 	add	local01, #8
123b4     13 13 62 FC | 	wrlong	arg01, local01
123b8     4A 00 00 FF 
123bc     98 E4 85 F1 | 	sub	objptr, ##38040
123c0     7C B2 BF FD | 	call	#_pop
123c4     A7 FA 61 FC | 	wrlong	result1, fp
123c8     04 4E 05 F1 | 	add	fp, #4
123cc     A7 FC 61 FC | 	wrlong	result2, fp
123d0     04 4E 05 F1 | 	add	fp, #4
123d4     A7 FE 61 FC | 	wrlong	result3, fp
123d8     08 4E 85 F1 | 	sub	fp, #8
123dc     50 00 00 FF 
123e0     30 E5 05 F1 | 	add	objptr, ##41264
123e4     F2 12 02 FB | 	rdlong	arg01, objptr
123e8     09 27 02 F6 | 	mov	local01, arg01
123ec     02 26 66 F0 | 	shl	local01, #2
123f0     09 27 02 F1 | 	add	local01, arg01
123f4     02 26 66 F0 | 	shl	local01, #2
123f8     06 00 00 FF 
123fc     98 E4 85 F1 | 	sub	objptr, ##3224
12400     F2 26 02 F1 | 	add	local01, objptr
12404     A7 12 02 F6 | 	mov	arg01, fp
12408     4A 00 00 FF 
1240c     98 E4 85 F1 | 	sub	objptr, ##38040
12410     10 B4 BF FD | 	call	#_converttoint
12414     FD 12 02 F6 | 	mov	arg01, result1
12418     0C 26 06 F1 | 	add	local01, #12
1241c     13 13 62 FC | 	wrlong	arg01, local01
12420     1C B2 BF FD | 	call	#_pop
12424     A7 FA 61 FC | 	wrlong	result1, fp
12428     04 4E 05 F1 | 	add	fp, #4
1242c     A7 FC 61 FC | 	wrlong	result2, fp
12430     04 4E 05 F1 | 	add	fp, #4
12434     A7 FE 61 FC | 	wrlong	result3, fp
12438     08 4E 85 F1 | 	sub	fp, #8
1243c     50 00 00 FF 
12440     30 E5 05 F1 | 	add	objptr, ##41264
12444     F2 12 02 FB | 	rdlong	arg01, objptr
12448     09 27 02 F6 | 	mov	local01, arg01
1244c     02 26 66 F0 | 	shl	local01, #2
12450     09 27 02 F1 | 	add	local01, arg01
12454     02 26 66 F0 | 	shl	local01, #2
12458     06 00 00 FF 
1245c     98 E4 85 F1 | 	sub	objptr, ##3224
12460     F2 26 02 F1 | 	add	local01, objptr
12464     A7 12 02 F6 | 	mov	arg01, fp
12468     4A 00 00 FF 
1246c     98 E4 85 F1 | 	sub	objptr, ##38040
12470     B0 B3 BF FD | 	call	#_converttoint
12474     10 26 06 F1 | 	add	local01, #16
12478     13 FB 61 FC | 	wrlong	result1, local01
1247c                 | ' fortop+=1
1247c                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
1247c                 | ' t1=pop() : fortable(fortop).stepval=converttoint(t1)
1247c                 | ' t1=pop() : fortable(fortop).endval=converttoint(t1)
1247c                 | ' if compiledline(lineptr_e).result_type=token_end then	' end of line after for, set the pointer to the start of the next line
1247c     4A 00 00 FF 
12480     80 E4 05 F1 | 	add	objptr, ##38016
12484     F2 12 02 FB | 	rdlong	arg01, objptr
12488     09 27 02 F6 | 	mov	local01, arg01
1248c     01 26 66 F0 | 	shl	local01, #1
12490     09 27 02 F1 | 	add	local01, arg01
12494     02 26 66 F0 | 	shl	local01, #2
12498     03 00 00 FF 
1249c     04 E4 85 F1 | 	sub	objptr, ##1540
124a0     F2 26 02 F1 | 	add	local01, objptr
124a4     08 26 06 F1 | 	add	local01, #8
124a8     13 27 02 FB | 	rdlong	local01, local01
124ac     FE 27 0E F2 | 	cmp	local01, #510 wz
124b0     47 00 00 FF 
124b4     7C E4 85 F1 | 	sub	objptr, ##36476
124b8     70 00 90 5D |  if_ne	jmp	#LR__1460
124bc     50 00 00 FF 
124c0     30 E5 05 F1 | 	add	objptr, ##41264
124c4     F2 12 02 FB | 	rdlong	arg01, objptr
124c8     09 27 02 F6 | 	mov	local01, arg01
124cc     02 26 66 F0 | 	shl	local01, #2
124d0     09 27 02 F1 | 	add	local01, arg01
124d4     02 26 66 F0 | 	shl	local01, #2
124d8     06 00 00 FF 
124dc     98 E4 85 F1 | 	sub	objptr, ##3224
124e0     F2 26 02 F1 | 	add	local01, objptr
124e4     06 00 00 FF 
124e8     20 E4 05 F1 | 	add	objptr, ##3104
124ec     F2 12 02 FB | 	rdlong	arg01, objptr
124f0     13 13 62 FC | 	wrlong	arg01, local01
124f4     78 E4 05 F1 | 	add	objptr, #120
124f8     F2 12 02 FB | 	rdlong	arg01, objptr
124fc     09 27 02 F6 | 	mov	local01, arg01
12500     02 26 66 F0 | 	shl	local01, #2
12504     09 27 02 F1 | 	add	local01, arg01
12508     02 26 66 F0 | 	shl	local01, #2
1250c     06 00 00 FF 
12510     98 E4 85 F1 | 	sub	objptr, ##3224
12514     F2 26 02 F1 | 	add	local01, objptr
12518     04 26 06 F1 | 	add	local01, #4
1251c     13 01 68 FC | 	wrlong	#0, local01
12520     4A 00 00 FF 
12524     98 E4 85 F1 | 	sub	objptr, ##38040
12528     78 00 90 FD | 	jmp	#LR__1461
1252c                 | LR__1460
1252c     50 00 00 FF 
12530     30 E5 05 F1 | 	add	objptr, ##41264
12534     F2 12 02 FB | 	rdlong	arg01, objptr
12538     09 27 02 F6 | 	mov	local01, arg01
1253c     02 26 66 F0 | 	shl	local01, #2
12540     09 27 02 F1 | 	add	local01, arg01
12544     02 26 66 F0 | 	shl	local01, #2
12548     06 00 00 FF 
1254c     98 E4 85 F1 | 	sub	objptr, ##3224
12550     F2 26 02 F1 | 	add	local01, objptr
12554     06 00 00 FF 
12558     28 E4 05 F1 | 	add	objptr, ##3112
1255c     F2 12 02 FB | 	rdlong	arg01, objptr
12560     13 13 62 FC | 	wrlong	arg01, local01
12564     70 E4 05 F1 | 	add	objptr, #112
12568     F2 12 02 FB | 	rdlong	arg01, objptr
1256c     09 27 02 F6 | 	mov	local01, arg01
12570     02 26 66 F0 | 	shl	local01, #2
12574     09 27 02 F1 | 	add	local01, arg01
12578     02 26 66 F0 | 	shl	local01, #2
1257c     06 00 00 FF 
12580     98 E4 85 F1 | 	sub	objptr, ##3224
12584     F2 26 02 F1 | 	add	local01, objptr
12588     18 E4 85 F1 | 	sub	objptr, #24
1258c     F2 12 02 FB | 	rdlong	arg01, objptr
12590     4A 00 00 FF 
12594     80 E4 85 F1 | 	sub	objptr, ##38016
12598     01 12 06 F1 | 	add	arg01, #1
1259c     04 26 06 F1 | 	add	local01, #4
125a0     13 13 62 FC | 	wrlong	arg01, local01
125a4                 | LR__1461
125a4     A7 F0 03 F6 | 	mov	ptra, fp
125a8     B2 00 A0 FD | 	call	#popregs_
125ac                 | _do_for_ret
125ac     2D 00 64 FD | 	ret
125b0                 | 
125b0                 | ' 
125b0                 | ' '-------------------- frame
125b0                 | ' 
125b0                 | ' sub do_frame
125b0                 | _do_frame
125b0     03 4A 05 F6 | 	mov	COUNT_, #3
125b4     A8 00 A0 FD | 	call	#pushregs_
125b8     30 F0 07 F1 | 	add	ptra, #48
125bc     80 B0 BF FD | 	call	#_pop
125c0     FD 16 02 F6 | 	mov	arg03, result1
125c4     FE 14 02 F6 | 	mov	arg02, result2
125c8     FF 1A 02 F6 | 	mov	arg05, result3
125cc     24 4E 05 F1 | 	add	fp, #36
125d0     A7 16 62 FC | 	wrlong	arg03, fp
125d4     04 4E 05 F1 | 	add	fp, #4
125d8     A7 14 62 FC | 	wrlong	arg02, fp
125dc     04 4E 05 F1 | 	add	fp, #4
125e0     A7 1A 62 FC | 	wrlong	arg05, fp
125e4     2C 4E 85 F1 | 	sub	fp, #44
125e8     54 B0 BF FD | 	call	#_pop
125ec     FD 16 02 F6 | 	mov	arg03, result1
125f0     FE 14 02 F6 | 	mov	arg02, result2
125f4     FF 1A 02 F6 | 	mov	arg05, result3
125f8     18 4E 05 F1 | 	add	fp, #24
125fc     A7 16 62 FC | 	wrlong	arg03, fp
12600     04 4E 05 F1 | 	add	fp, #4
12604     A7 14 62 FC | 	wrlong	arg02, fp
12608     04 4E 05 F1 | 	add	fp, #4
1260c     A7 1A 62 FC | 	wrlong	arg05, fp
12610     20 4E 85 F1 | 	sub	fp, #32
12614     28 B0 BF FD | 	call	#_pop
12618     FD 16 02 F6 | 	mov	arg03, result1
1261c     FE 14 02 F6 | 	mov	arg02, result2
12620     FF 1A 02 F6 | 	mov	arg05, result3
12624     0C 4E 05 F1 | 	add	fp, #12
12628     A7 16 62 FC | 	wrlong	arg03, fp
1262c     04 4E 05 F1 | 	add	fp, #4
12630     A7 14 62 FC | 	wrlong	arg02, fp
12634     04 4E 05 F1 | 	add	fp, #4
12638     A7 1A 62 FC | 	wrlong	arg05, fp
1263c     14 4E 85 F1 | 	sub	fp, #20
12640     FC AF BF FD | 	call	#_pop
12644     FF 16 02 F6 | 	mov	arg03, result3
12648     A7 FA 61 FC | 	wrlong	result1, fp
1264c     04 4E 05 F1 | 	add	fp, #4
12650     A7 FC 61 FC | 	wrlong	result2, fp
12654     04 4E 05 F1 | 	add	fp, #4
12658     A7 16 62 FC | 	wrlong	arg03, fp
1265c     08 4E 85 F1 | 	sub	fp, #8
12660     A7 12 02 F6 | 	mov	arg01, fp
12664     BC B1 BF FD | 	call	#_converttoint
12668     FD 26 02 F6 | 	mov	local01, result1
1266c     0C 4E 05 F1 | 	add	fp, #12
12670     A7 12 02 F6 | 	mov	arg01, fp
12674     0C 4E 85 F1 | 	sub	fp, #12
12678     A8 B1 BF FD | 	call	#_converttoint
1267c     FD 28 02 F6 | 	mov	local02, result1
12680     18 4E 05 F1 | 	add	fp, #24
12684     A7 12 02 F6 | 	mov	arg01, fp
12688     18 4E 85 F1 | 	sub	fp, #24
1268c     94 B1 BF FD | 	call	#_converttoint
12690     FD 2A 02 F6 | 	mov	local03, result1
12694     24 4E 05 F1 | 	add	fp, #36
12698     A7 12 02 F6 | 	mov	arg01, fp
1269c     24 4E 85 F1 | 	sub	fp, #36
126a0     80 B1 BF FD | 	call	#_converttoint
126a4     FD 18 02 F6 | 	mov	arg04, result1
126a8     37 00 00 FF 
126ac     28 E4 05 F1 | 	add	objptr, ##28200
126b0     F2 1A 02 FB | 	rdlong	arg05, objptr
126b4     37 00 00 FF 
126b8     28 E4 85 F1 | 	sub	objptr, ##28200
126bc     13 13 02 F6 | 	mov	arg01, local01
126c0     14 15 02 F6 | 	mov	arg02, local02
126c4     15 17 02 F6 | 	mov	arg03, local03
126c8     88 27 B1 FD | 	call	#_hg010b_spin2_frame
126cc     A7 F0 03 F6 | 	mov	ptra, fp
126d0     B2 00 A0 FD | 	call	#popregs_
126d4                 | _do_frame_ret
126d4     2D 00 64 FD | 	ret
126d8                 | 
126d8                 | ' 
126d8                 | ' '-------------------- framebuf
126d8                 | ' 
126d8                 | ' sub do_framebuf
126d8                 | _do_framebuf
126d8     00 4A 05 F6 | 	mov	COUNT_, #0
126dc     A8 00 A0 FD | 	call	#pushregs_
126e0     0C F0 07 F1 | 	add	ptra, #12
126e4     08 4E 05 F1 | 	add	fp, #8
126e8     A7 3A 68 FC | 	wrlong	#29, fp
126ec     F2 12 02 FB | 	rdlong	arg01, objptr
126f0     08 4E 85 F1 | 	sub	fp, #8
126f4     A7 12 62 FC | 	wrlong	arg01, fp
126f8     A7 12 02 F6 | 	mov	arg01, fp
126fc     D8 AF BF FD | 	call	#_push
12700     A7 F0 03 F6 | 	mov	ptra, fp
12704     B2 00 A0 FD | 	call	#popregs_
12708                 | _do_framebuf_ret
12708     2D 00 64 FD | 	ret
1270c                 | 
1270c                 | ' '-------------------- fre
1270c                 | ' 
1270c                 | ' sub do_fre
1270c                 | _do_fre
1270c     01 4A 05 F6 | 	mov	COUNT_, #1
12710     A8 00 A0 FD | 	call	#pushregs_
12714     0C F0 07 F1 | 	add	ptra, #12
12718     52 00 00 FF 
1271c     98 E4 05 F1 | 	add	objptr, ##42136
12720     F2 12 02 FB | 	rdlong	arg01, objptr
12724     0F 00 00 FF 
12728     3C E4 85 F1 | 	sub	objptr, ##7740
1272c     F2 26 02 FB | 	rdlong	local01, objptr
12730     13 13 82 F1 | 	sub	arg01, local01
12734     0F 00 00 FF 
12738     B4 E4 05 F1 | 	add	objptr, ##7860
1273c     F2 12 62 FC | 	wrlong	arg01, objptr
12740     08 4E 05 F1 | 	add	fp, #8
12744     A7 3A 68 FC | 	wrlong	#29, fp
12748     08 4E 85 F1 | 	sub	fp, #8
1274c     F2 26 02 FB | 	rdlong	local01, objptr
12750     52 00 00 FF 
12754     10 E5 85 F1 | 	sub	objptr, ##42256
12758     A7 26 62 FC | 	wrlong	local01, fp
1275c     A7 12 02 F6 | 	mov	arg01, fp
12760     74 AF BF FD | 	call	#_push
12764     A7 F0 03 F6 | 	mov	ptra, fp
12768     B2 00 A0 FD | 	call	#popregs_
1276c                 | _do_fre_ret
1276c     2D 00 64 FD | 	ret
12770                 | 
12770                 | ' 
12770                 | ' '-------------------- get
12770                 | ' 
12770                 | ' sub do_get		' get  #chn,addr,(amount,(pos))
12770                 | _do_get
12770     09 4A 05 F6 | 	mov	COUNT_, #9
12774     A8 00 A0 FD | 	call	#pushregs_
12778     40 F0 07 F1 | 	add	ptra, #64
1277c     4A 00 00 FF 
12780     80 E4 05 F1 | 	add	objptr, ##38016
12784     F2 1A 02 FB | 	rdlong	arg05, objptr
12788     0D 19 02 F6 | 	mov	arg04, arg05
1278c     01 18 66 F0 | 	shl	arg04, #1
12790     0D 19 02 F1 | 	add	arg04, arg05
12794     02 18 66 F0 | 	shl	arg04, #2
12798     03 00 00 FF 
1279c     04 E4 85 F1 | 	sub	objptr, ##1540
127a0     F2 18 02 F1 | 	add	arg04, objptr
127a4     0C 1B 02 FB | 	rdlong	arg05, arg04
127a8     A7 1A 62 FC | 	wrlong	arg05, fp
127ac                 | ' 
127ac                 | ' numpar=compiledline(lineptr_e).result.uresult
127ac                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
127ac     04 1A 0E F2 | 	cmp	arg05, #4 wz
127b0     47 00 00 FF 
127b4     7C E4 85 F1 | 	sub	objptr, ##36476
127b8     48 00 90 5D |  if_ne	jmp	#LR__1470
127bc     80 AE BF FD | 	call	#_pop
127c0     FF 1A 02 F6 | 	mov	arg05, result3
127c4     1C 4E 05 F1 | 	add	fp, #28
127c8     A7 FA 61 FC | 	wrlong	result1, fp
127cc     04 4E 05 F1 | 	add	fp, #4
127d0     A7 FC 61 FC | 	wrlong	result2, fp
127d4     04 4E 05 F1 | 	add	fp, #4
127d8     A7 1A 62 FC | 	wrlong	arg05, fp
127dc     08 4E 85 F1 | 	sub	fp, #8
127e0     A7 12 02 F6 | 	mov	arg01, fp
127e4     1C 4E 85 F1 | 	sub	fp, #28
127e8     38 B0 BF FD | 	call	#_converttoint
127ec     52 00 00 FF 
127f0     0C E5 05 F1 | 	add	objptr, ##42252
127f4     F2 FA 61 FC | 	wrlong	result1, objptr
127f8     52 00 00 FF 
127fc     0C E5 85 F1 | 	sub	objptr, ##42252
12800     18 00 90 FD | 	jmp	#LR__1471
12804                 | LR__1470
12804     52 00 00 FF 
12808     0C E5 05 F1 | 	add	objptr, ##42252
1280c     FF FF FF FF 
12810     F2 FE 6B FC | 	wrlong	##-1, objptr
12814     52 00 00 FF 
12818     0C E5 85 F1 | 	sub	objptr, ##42252
1281c                 | LR__1471
1281c                 | ' if numpar>=3  then t1=pop() : amount=converttoint(t1) else amount=1
1281c     A7 16 02 FB | 	rdlong	arg03, fp
12820     03 16 56 F2 | 	cmps	arg03, #3 wc
12824     40 00 90 CD |  if_b	jmp	#LR__1472
12828     14 AE BF FD | 	call	#_pop
1282c     FF 16 02 F6 | 	mov	arg03, result3
12830     1C 4E 05 F1 | 	add	fp, #28
12834     A7 FA 61 FC | 	wrlong	result1, fp
12838     04 4E 05 F1 | 	add	fp, #4
1283c     A7 FC 61 FC | 	wrlong	result2, fp
12840     04 4E 05 F1 | 	add	fp, #4
12844     A7 16 62 FC | 	wrlong	arg03, fp
12848     08 4E 85 F1 | 	sub	fp, #8
1284c     A7 12 02 F6 | 	mov	arg01, fp
12850     1C 4E 85 F1 | 	sub	fp, #28
12854     CC AF BF FD | 	call	#_converttoint
12858     08 4E 05 F1 | 	add	fp, #8
1285c     A7 FA 61 FC | 	wrlong	result1, fp
12860     08 4E 85 F1 | 	sub	fp, #8
12864     0C 00 90 FD | 	jmp	#LR__1473
12868                 | LR__1472
12868     08 4E 05 F1 | 	add	fp, #8
1286c     A7 02 68 FC | 	wrlong	#1, fp
12870     08 4E 85 F1 | 	sub	fp, #8
12874                 | LR__1473
12874                 | ' if numpar>=2  then t1=pop() : adr=converttoint(t1)
12874     A7 16 02 FB | 	rdlong	arg03, fp
12878     02 16 56 F2 | 	cmps	arg03, #2 wc
1287c     3C 00 90 CD |  if_b	jmp	#LR__1474
12880     BC AD BF FD | 	call	#_pop
12884     FF 16 02 F6 | 	mov	arg03, result3
12888     1C 4E 05 F1 | 	add	fp, #28
1288c     A7 FA 61 FC | 	wrlong	result1, fp
12890     04 4E 05 F1 | 	add	fp, #4
12894     A7 FC 61 FC | 	wrlong	result2, fp
12898     04 4E 05 F1 | 	add	fp, #4
1289c     A7 16 62 FC | 	wrlong	arg03, fp
128a0     08 4E 85 F1 | 	sub	fp, #8
128a4     A7 12 02 F6 | 	mov	arg01, fp
128a8     1C 4E 85 F1 | 	sub	fp, #28
128ac     74 AF BF FD | 	call	#_converttoint
128b0     0C 4E 05 F1 | 	add	fp, #12
128b4     A7 FA 61 FC | 	wrlong	result1, fp
128b8     0C 4E 85 F1 | 	sub	fp, #12
128bc                 | LR__1474
128bc     80 AD BF FD | 	call	#_pop
128c0     FF 16 02 F6 | 	mov	arg03, result3
128c4     1C 4E 05 F1 | 	add	fp, #28
128c8     A7 FA 61 FC | 	wrlong	result1, fp
128cc     04 4E 05 F1 | 	add	fp, #4
128d0     A7 FC 61 FC | 	wrlong	result2, fp
128d4     04 4E 05 F1 | 	add	fp, #4
128d8     A7 16 62 FC | 	wrlong	arg03, fp
128dc     08 4E 85 F1 | 	sub	fp, #8
128e0     A7 12 02 F6 | 	mov	arg01, fp
128e4     1C 4E 85 F1 | 	sub	fp, #28
128e8     38 AF BF FD | 	call	#_converttoint
128ec     04 4E 05 F1 | 	add	fp, #4
128f0     A7 FA 61 FC | 	wrlong	result1, fp
128f4     10 4E 05 F1 | 	add	fp, #16
128f8     A7 16 02 FB | 	rdlong	arg03, fp
128fc     14 4E 85 F1 | 	sub	fp, #20
12900     02 16 66 F0 | 	shl	arg03, #2
12904     50 00 00 FF 
12908     C4 E4 05 F1 | 	add	objptr, ##41156
1290c     F2 26 02 F6 | 	mov	local01, objptr
12910     F2 16 02 F1 | 	add	arg03, objptr
12914     0B 01 68 FC | 	wrlong	#0, arg03
12918                 | ' t1=pop() : channel=converttoint(t1)
12918                 | ' getres(j)=0
12918                 | ' if pos>=0 then
12918     02 00 00 FF 
1291c     48 E4 05 F1 | 	add	objptr, ##1096
12920     F2 28 02 FB | 	rdlong	local02, objptr
12924     52 00 00 FF 
12928     0C E5 85 F1 | 	sub	objptr, ##42252
1292c     00 28 56 F2 | 	cmps	local02, #0 wc
12930     F0 01 90 CD |  if_b	jmp	#LR__1481
12934                 | '   for i=0 to  amount/1024
12934     10 4E 05 F1 | 	add	fp, #16
12938     A7 00 68 FC | 	wrlong	#0, fp
1293c     08 4E 85 F1 | 	sub	fp, #8
12940     A7 2A 02 FB | 	rdlong	local03, fp
12944     08 4E 85 F1 | 	sub	fp, #8
12948     15 2D 52 F6 | 	abs	local04, local03 wc
1294c     0A 2C 46 F0 | 	shr	local04, #10
12950     16 2D 82 F6 | 	negc	local04, local04
12954     01 2C 06 F1 | 	add	local04, #1
12958                 | LR__1475
12958     10 4E 05 F1 | 	add	fp, #16
1295c     A7 2A 02 FB | 	rdlong	local03, fp
12960     10 4E 85 F1 | 	sub	fp, #16
12964     16 2B 52 F2 | 	cmps	local03, local04 wc
12968     9C 03 90 3D |  if_ae	jmp	#LR__1489
1296c                 | '     get #channel,pos+1,block(0),amount,r
1296c     04 4E 05 F1 | 	add	fp, #4
12970     A7 12 02 FB | 	rdlong	arg01, fp
12974     52 00 00 FF 
12978     0C E5 05 F1 | 	add	objptr, ##42252
1297c     F2 14 02 FB | 	rdlong	arg02, objptr
12980     01 14 06 F1 | 	add	arg02, #1
12984     04 00 00 FF 
12988     58 E4 85 F1 | 	sub	objptr, ##2136
1298c     F2 16 02 F6 | 	mov	arg03, objptr
12990     4E 00 00 FF 
12994     B4 E4 85 F1 | 	sub	objptr, ##40116
12998     04 4E 05 F1 | 	add	fp, #4
1299c     A7 18 02 FB | 	rdlong	arg04, fp
129a0     08 4E 85 F1 | 	sub	fp, #8
129a4     01 1A 06 F6 | 	mov	arg05, #1
129a8     14 53 B1 FD | 	call	#__system___basic_get
129ac     18 4E 05 F1 | 	add	fp, #24
129b0     A7 FA 61 FC | 	wrlong	result1, fp
129b4                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
129b4     0C 4E 85 F1 | 	sub	fp, #12
129b8     A7 28 02 FB | 	rdlong	local02, fp
129bc     0C 4E 85 F1 | 	sub	fp, #12
129c0     00 04 00 FF 
129c4     00 28 56 F2 | 	cmps	local02, ##524288 wc
129c8     7C 00 90 3D |  if_ae	jmp	#LR__1477
129cc     14 4E 05 F1 | 	add	fp, #20
129d0     A7 00 68 FC | 	wrlong	#0, fp
129d4     04 4E 05 F1 | 	add	fp, #4
129d8     A7 2E 02 FB | 	rdlong	local05, fp
129dc     18 4E 85 F1 | 	sub	fp, #24
129e0                 | LR__1476
129e0     14 4E 05 F1 | 	add	fp, #20
129e4     A7 28 02 FB | 	rdlong	local02, fp
129e8     14 4E 85 F1 | 	sub	fp, #20
129ec     17 29 52 F2 | 	cmps	local02, local05 wc
129f0     D8 00 90 3D |  if_ae	jmp	#LR__1480
129f4     0C 4E 05 F1 | 	add	fp, #12
129f8     A7 12 02 FB | 	rdlong	arg01, fp
129fc     04 4E 05 F1 | 	add	fp, #4
12a00     A7 2A 02 FB | 	rdlong	local03, fp
12a04     0A 2A 66 F0 | 	shl	local03, #10
12a08     15 13 02 F1 | 	add	arg01, local03
12a0c     04 4E 05 F1 | 	add	fp, #4
12a10     A7 2A 02 FB | 	rdlong	local03, fp
12a14     15 13 02 F1 | 	add	arg01, local03
12a18     4E 00 00 FF 
12a1c     B4 E4 05 F1 | 	add	objptr, ##40116
12a20     F2 2A 02 F1 | 	add	local03, objptr
12a24     15 15 C2 FA | 	rdbyte	arg02, local03
12a28     09 15 42 FC | 	wrbyte	arg02, arg01
12a2c     4E 00 00 FF 
12a30     B4 E4 85 F1 | 	sub	objptr, ##40116
12a34     A7 2A 02 FB | 	rdlong	local03, fp
12a38     01 2A 06 F1 | 	add	local03, #1
12a3c     A7 2A 62 FC | 	wrlong	local03, fp
12a40     14 4E 85 F1 | 	sub	fp, #20
12a44     98 FF 9F FD | 	jmp	#LR__1476
12a48                 | LR__1477
12a48     14 4E 05 F1 | 	add	fp, #20
12a4c     A7 00 68 FC | 	wrlong	#0, fp
12a50     04 4E 05 F1 | 	add	fp, #4
12a54     A7 30 02 FB | 	rdlong	local06, fp
12a58     18 4E 85 F1 | 	sub	fp, #24
12a5c                 | LR__1478
12a5c     14 4E 05 F1 | 	add	fp, #20
12a60     A7 28 02 FB | 	rdlong	local02, fp
12a64     14 4E 85 F1 | 	sub	fp, #20
12a68     18 29 52 F2 | 	cmps	local02, local06 wc
12a6c     5C 00 90 3D |  if_ae	jmp	#LR__1479
12a70     0C 4E 05 F1 | 	add	fp, #12
12a74     A7 12 02 FB | 	rdlong	arg01, fp
12a78     04 4E 05 F1 | 	add	fp, #4
12a7c     A7 2E 02 FB | 	rdlong	local05, fp
12a80     0A 2E 66 F0 | 	shl	local05, #10
12a84     17 13 02 F1 | 	add	arg01, local05
12a88     04 4E 05 F1 | 	add	fp, #4
12a8c     A7 2E 02 FB | 	rdlong	local05, fp
12a90     17 13 02 F1 | 	add	arg01, local05
12a94     14 4E 85 F1 | 	sub	fp, #20
12a98     4E 00 00 FF 
12a9c     B4 E4 05 F1 | 	add	objptr, ##40116
12aa0     F2 2E 02 F1 | 	add	local05, objptr
12aa4     17 15 C2 FA | 	rdbyte	arg02, local05
12aa8     4E 00 00 FF 
12aac     B4 E4 85 F1 | 	sub	objptr, ##40116
12ab0     B0 0B B1 FD | 	call	#_pspoke
12ab4     14 4E 05 F1 | 	add	fp, #20
12ab8     A7 2E 02 FB | 	rdlong	local05, fp
12abc     01 2E 06 F1 | 	add	local05, #1
12ac0     A7 2E 62 FC | 	wrlong	local05, fp
12ac4     14 4E 85 F1 | 	sub	fp, #20
12ac8     90 FF 9F FD | 	jmp	#LR__1478
12acc                 | LR__1479
12acc                 | LR__1480
12acc     14 4E 05 F1 | 	add	fp, #20
12ad0     A7 30 02 FB | 	rdlong	local06, fp
12ad4     18 2B 02 F6 | 	mov	local03, local06
12ad8     02 2A 66 F0 | 	shl	local03, #2
12adc     50 00 00 FF 
12ae0     C4 E4 05 F1 | 	add	objptr, ##41156
12ae4     F2 2A 02 F1 | 	add	local03, objptr
12ae8     02 30 66 F0 | 	shl	local06, #2
12aec     F2 30 02 F1 | 	add	local06, objptr
12af0     18 31 02 FB | 	rdlong	local06, local06
12af4     04 4E 05 F1 | 	add	fp, #4
12af8     A7 2E 02 FB | 	rdlong	local05, fp
12afc     17 31 02 F1 | 	add	local06, local05
12b00     15 31 62 FC | 	wrlong	local06, local03
12b04     08 4E 85 F1 | 	sub	fp, #8
12b08     A7 30 02 FB | 	rdlong	local06, fp
12b0c     01 30 06 F1 | 	add	local06, #1
12b10     A7 30 62 FC | 	wrlong	local06, fp
12b14     10 4E 85 F1 | 	sub	fp, #16
12b18     50 00 00 FF 
12b1c     C4 E4 85 F1 | 	sub	objptr, ##41156
12b20     34 FE 9F FD | 	jmp	#LR__1475
12b24                 | LR__1481
12b24                 | '   for i=0 to  amount/1024
12b24     10 4E 05 F1 | 	add	fp, #16
12b28     A7 00 68 FC | 	wrlong	#0, fp
12b2c     08 4E 85 F1 | 	sub	fp, #8
12b30     A7 2A 02 FB | 	rdlong	local03, fp
12b34     08 4E 85 F1 | 	sub	fp, #8
12b38     15 33 52 F6 | 	abs	local07, local03 wc
12b3c     0A 32 46 F0 | 	shr	local07, #10
12b40     19 33 82 F6 | 	negc	local07, local07
12b44     01 32 06 F1 | 	add	local07, #1
12b48                 | LR__1482
12b48     10 4E 05 F1 | 	add	fp, #16
12b4c     A7 2A 02 FB | 	rdlong	local03, fp
12b50     10 4E 85 F1 | 	sub	fp, #16
12b54     19 2B 52 F2 | 	cmps	local03, local07 wc
12b58     AC 01 90 3D |  if_ae	jmp	#LR__1488
12b5c                 | '     get #channel,,block(0),amount,r
12b5c     04 4E 05 F1 | 	add	fp, #4
12b60     A7 12 02 FB | 	rdlong	arg01, fp
12b64     4E 00 00 FF 
12b68     B4 E4 05 F1 | 	add	objptr, ##40116
12b6c     F2 16 02 F6 | 	mov	arg03, objptr
12b70     4E 00 00 FF 
12b74     B4 E4 85 F1 | 	sub	objptr, ##40116
12b78     04 4E 05 F1 | 	add	fp, #4
12b7c     A7 18 02 FB | 	rdlong	arg04, fp
12b80     08 4E 85 F1 | 	sub	fp, #8
12b84     00 14 06 F6 | 	mov	arg02, #0
12b88     01 1A 06 F6 | 	mov	arg05, #1
12b8c     30 51 B1 FD | 	call	#__system___basic_get
12b90     18 4E 05 F1 | 	add	fp, #24
12b94     A7 FA 61 FC | 	wrlong	result1, fp
12b98                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
12b98     0C 4E 85 F1 | 	sub	fp, #12
12b9c     A7 28 02 FB | 	rdlong	local02, fp
12ba0     0C 4E 85 F1 | 	sub	fp, #12
12ba4     00 04 00 FF 
12ba8     00 28 56 F2 | 	cmps	local02, ##524288 wc
12bac     7C 00 90 3D |  if_ae	jmp	#LR__1484
12bb0     14 4E 05 F1 | 	add	fp, #20
12bb4     A7 00 68 FC | 	wrlong	#0, fp
12bb8     04 4E 05 F1 | 	add	fp, #4
12bbc     A7 34 02 FB | 	rdlong	local08, fp
12bc0     18 4E 85 F1 | 	sub	fp, #24
12bc4                 | LR__1483
12bc4     14 4E 05 F1 | 	add	fp, #20
12bc8     A7 28 02 FB | 	rdlong	local02, fp
12bcc     14 4E 85 F1 | 	sub	fp, #20
12bd0     1A 29 52 F2 | 	cmps	local02, local08 wc
12bd4     D8 00 90 3D |  if_ae	jmp	#LR__1487
12bd8     0C 4E 05 F1 | 	add	fp, #12
12bdc     A7 12 02 FB | 	rdlong	arg01, fp
12be0     04 4E 05 F1 | 	add	fp, #4
12be4     A7 30 02 FB | 	rdlong	local06, fp
12be8     0A 30 66 F0 | 	shl	local06, #10
12bec     18 13 02 F1 | 	add	arg01, local06
12bf0     04 4E 05 F1 | 	add	fp, #4
12bf4     A7 30 02 FB | 	rdlong	local06, fp
12bf8     18 13 02 F1 | 	add	arg01, local06
12bfc     4E 00 00 FF 
12c00     B4 E4 05 F1 | 	add	objptr, ##40116
12c04     F2 30 02 F1 | 	add	local06, objptr
12c08     18 15 C2 FA | 	rdbyte	arg02, local06
12c0c     09 15 42 FC | 	wrbyte	arg02, arg01
12c10     4E 00 00 FF 
12c14     B4 E4 85 F1 | 	sub	objptr, ##40116
12c18     A7 30 02 FB | 	rdlong	local06, fp
12c1c     01 30 06 F1 | 	add	local06, #1
12c20     A7 30 62 FC | 	wrlong	local06, fp
12c24     14 4E 85 F1 | 	sub	fp, #20
12c28     98 FF 9F FD | 	jmp	#LR__1483
12c2c                 | LR__1484
12c2c     14 4E 05 F1 | 	add	fp, #20
12c30     A7 00 68 FC | 	wrlong	#0, fp
12c34     04 4E 05 F1 | 	add	fp, #4
12c38     A7 36 02 FB | 	rdlong	local09, fp
12c3c     18 4E 85 F1 | 	sub	fp, #24
12c40                 | LR__1485
12c40     14 4E 05 F1 | 	add	fp, #20
12c44     A7 28 02 FB | 	rdlong	local02, fp
12c48     14 4E 85 F1 | 	sub	fp, #20
12c4c     1B 29 52 F2 | 	cmps	local02, local09 wc
12c50     5C 00 90 3D |  if_ae	jmp	#LR__1486
12c54     0C 4E 05 F1 | 	add	fp, #12
12c58     A7 12 02 FB | 	rdlong	arg01, fp
12c5c     04 4E 05 F1 | 	add	fp, #4
12c60     A7 34 02 FB | 	rdlong	local08, fp
12c64     0A 34 66 F0 | 	shl	local08, #10
12c68     1A 13 02 F1 | 	add	arg01, local08
12c6c     04 4E 05 F1 | 	add	fp, #4
12c70     A7 34 02 FB | 	rdlong	local08, fp
12c74     1A 13 02 F1 | 	add	arg01, local08
12c78     14 4E 85 F1 | 	sub	fp, #20
12c7c     4E 00 00 FF 
12c80     B4 E4 05 F1 | 	add	objptr, ##40116
12c84     F2 34 02 F1 | 	add	local08, objptr
12c88     1A 15 C2 FA | 	rdbyte	arg02, local08
12c8c     4E 00 00 FF 
12c90     B4 E4 85 F1 | 	sub	objptr, ##40116
12c94     CC 09 B1 FD | 	call	#_pspoke
12c98     14 4E 05 F1 | 	add	fp, #20
12c9c     A7 34 02 FB | 	rdlong	local08, fp
12ca0     01 34 06 F1 | 	add	local08, #1
12ca4     A7 34 62 FC | 	wrlong	local08, fp
12ca8     14 4E 85 F1 | 	sub	fp, #20
12cac     90 FF 9F FD | 	jmp	#LR__1485
12cb0                 | LR__1486
12cb0                 | LR__1487
12cb0     14 4E 05 F1 | 	add	fp, #20
12cb4     A7 36 02 FB | 	rdlong	local09, fp
12cb8     1B 31 02 F6 | 	mov	local06, local09
12cbc     02 30 66 F0 | 	shl	local06, #2
12cc0     50 00 00 FF 
12cc4     C4 E4 05 F1 | 	add	objptr, ##41156
12cc8     F2 30 02 F1 | 	add	local06, objptr
12ccc     02 36 66 F0 | 	shl	local09, #2
12cd0     F2 36 02 F1 | 	add	local09, objptr
12cd4     1B 37 02 FB | 	rdlong	local09, local09
12cd8     04 4E 05 F1 | 	add	fp, #4
12cdc     A7 34 02 FB | 	rdlong	local08, fp
12ce0     1A 37 02 F1 | 	add	local09, local08
12ce4     18 37 62 FC | 	wrlong	local09, local06
12ce8     08 4E 85 F1 | 	sub	fp, #8
12cec     A7 36 02 FB | 	rdlong	local09, fp
12cf0     01 36 06 F1 | 	add	local09, #1
12cf4     A7 36 62 FC | 	wrlong	local09, fp
12cf8     10 4E 85 F1 | 	sub	fp, #16
12cfc     50 00 00 FF 
12d00     C4 E4 85 F1 | 	sub	objptr, ##41156
12d04     40 FE 9F FD | 	jmp	#LR__1482
12d08                 | LR__1488
12d08                 | LR__1489
12d08     A7 F0 03 F6 | 	mov	ptra, fp
12d0c     B2 00 A0 FD | 	call	#popregs_
12d10                 | _do_get_ret
12d10     2D 00 64 FD | 	ret
12d14                 | 
12d14                 | ' 
12d14                 | ' '-------------------- getcolor
12d14                 | ' 
12d14                 | ' sub do_getcolor
12d14                 | _do_getcolor
12d14     01 4A 05 F6 | 	mov	COUNT_, #1
12d18     A8 00 A0 FD | 	call	#pushregs_
12d1c     10 F0 07 F1 | 	add	ptra, #16
12d20     4A 00 00 FF 
12d24     80 E4 05 F1 | 	add	objptr, ##38016
12d28     F2 26 02 FB | 	rdlong	local01, objptr
12d2c     13 17 02 F6 | 	mov	arg03, local01
12d30     01 16 66 F0 | 	shl	arg03, #1
12d34     13 17 02 F1 | 	add	arg03, local01
12d38     02 16 66 F0 | 	shl	arg03, #2
12d3c     03 00 00 FF 
12d40     04 E4 85 F1 | 	sub	objptr, ##1540
12d44     F2 16 02 F1 | 	add	arg03, objptr
12d48     0B 17 02 FB | 	rdlong	arg03, arg03
12d4c     0C 4E 05 F1 | 	add	fp, #12
12d50     A7 16 62 FC | 	wrlong	arg03, fp
12d54                 | ' 
12d54                 | ' numpar=compiledline(lineptr_e).result.uresult
12d54                 | ' if numpar>1 orelse numpar=0 then print "getcolor "; : printerror(39) : return
12d54     0C 4E 85 F1 | 	sub	fp, #12
12d58     02 16 16 F2 | 	cmp	arg03, #2 wc
12d5c     47 00 00 FF 
12d60     7C E4 85 F1 | 	sub	objptr, ##36476
12d64     0C 4E 05 C1 |  if_b	add	fp, #12
12d68     A7 26 0A CB |  if_b	rdlong	local01, fp wz
12d6c     0C 4E 85 C1 |  if_b	sub	fp, #12
12d70     40 00 90 4D |  if_c_and_nz	jmp	#LR__1490
12d74     00 12 06 F6 | 	mov	arg01, #0
12d78     FC 9D B1 FD | 	call	#__system___getiolock_0611
12d7c     FD 12 02 F6 | 	mov	arg01, result1
12d80     CC 40 B1 FD | 	call	#__system___lockmem
12d84     B9 01 00 FF 
12d88     4A 15 06 F6 | 	mov	arg02, ##@LR__5924
12d8c     00 12 06 F6 | 	mov	arg01, #0
12d90     00 16 06 F6 | 	mov	arg03, #0
12d94     AC 4D B1 FD | 	call	#__system___basic_print_string
12d98     00 12 06 F6 | 	mov	arg01, #0
12d9c     D8 9D B1 FD | 	call	#__system___getiolock_0611
12da0     FD 00 68 FC | 	wrlong	#0, result1
12da4     27 12 06 F6 | 	mov	arg01, #39
12da8     00 14 06 F6 | 	mov	arg02, #0
12dac     84 06 B1 FD | 	call	#_printerror
12db0     60 00 90 FD | 	jmp	#LR__1491
12db4                 | LR__1490
12db4     88 A8 BF FD | 	call	#_pop
12db8     A7 FA 61 FC | 	wrlong	result1, fp
12dbc     04 4E 05 F1 | 	add	fp, #4
12dc0     A7 FC 61 FC | 	wrlong	result2, fp
12dc4     04 4E 05 F1 | 	add	fp, #4
12dc8     A7 FE 61 FC | 	wrlong	result3, fp
12dcc     08 4E 85 F1 | 	sub	fp, #8
12dd0     A7 12 02 F6 | 	mov	arg01, fp
12dd4     4C AA BF FD | 	call	#_converttoint
12dd8     FD 12 02 F6 | 	mov	arg01, result1
12ddc                 | ' 
12ddc                 | ' return long[palette_ptr+4*color]
12ddc     1C E4 05 F1 | 	add	objptr, #28
12de0     F2 FA 01 FB | 	rdlong	result1, objptr
12de4     1C E4 85 F1 | 	sub	objptr, #28
12de8     02 12 66 F0 | 	shl	arg01, #2
12dec     09 FB 01 F1 | 	add	result1, arg01
12df0     FD FA 01 FB | 	rdlong	result1, result1
12df4     08 FA C5 F0 | 	sar	result1, #8
12df8     F8 FA 05 F4 | 	bitl	result1, #248
12dfc     A7 FA 61 FC | 	wrlong	result1, fp
12e00     08 4E 05 F1 | 	add	fp, #8
12e04     A7 3A 68 FC | 	wrlong	#29, fp
12e08     08 4E 85 F1 | 	sub	fp, #8
12e0c     A7 12 02 F6 | 	mov	arg01, fp
12e10     C4 A8 BF FD | 	call	#_push
12e14                 | LR__1491
12e14     A7 F0 03 F6 | 	mov	ptra, fp
12e18     B2 00 A0 FD | 	call	#popregs_
12e1c                 | _do_getcolor_ret
12e1c     2D 00 64 FD | 	ret
12e20                 | 
12e20                 | ' 
12e20                 | ' '-------------------- getenvsustain
12e20                 | ' 
12e20                 | ' sub do_getenvsustain
12e20                 | _do_getenvsustain
12e20     01 4A 05 F6 | 	mov	COUNT_, #1
12e24     A8 00 A0 FD | 	call	#pushregs_
12e28     10 F0 07 F1 | 	add	ptra, #16
12e2c     4A 00 00 FF 
12e30     80 E4 05 F1 | 	add	objptr, ##38016
12e34     F2 26 02 FB | 	rdlong	local01, objptr
12e38     13 17 02 F6 | 	mov	arg03, local01
12e3c     01 16 66 F0 | 	shl	arg03, #1
12e40     13 17 02 F1 | 	add	arg03, local01
12e44     02 16 66 F0 | 	shl	arg03, #2
12e48     03 00 00 FF 
12e4c     04 E4 85 F1 | 	sub	objptr, ##1540
12e50     F2 16 02 F1 | 	add	arg03, objptr
12e54     0B 17 02 FB | 	rdlong	arg03, arg03
12e58     0C 4E 05 F1 | 	add	fp, #12
12e5c     A7 16 62 FC | 	wrlong	arg03, fp
12e60                 | ' 
12e60                 | ' numpar=compiledline(lineptr_e).result.uresult
12e60                 | ' if numpar>1 orelse numpar=0 then print "getenvsustain: "; : printerror(39) : return
12e60     0C 4E 85 F1 | 	sub	fp, #12
12e64     02 16 16 F2 | 	cmp	arg03, #2 wc
12e68     47 00 00 FF 
12e6c     7C E4 85 F1 | 	sub	objptr, ##36476
12e70     0C 4E 05 C1 |  if_b	add	fp, #12
12e74     A7 26 0A CB |  if_b	rdlong	local01, fp wz
12e78     0C 4E 85 C1 |  if_b	sub	fp, #12
12e7c     40 00 90 4D |  if_c_and_nz	jmp	#LR__1500
12e80     00 12 06 F6 | 	mov	arg01, #0
12e84     F0 9C B1 FD | 	call	#__system___getiolock_0611
12e88     FD 12 02 F6 | 	mov	arg01, result1
12e8c     C0 3F B1 FD | 	call	#__system___lockmem
12e90     B9 01 00 FF 
12e94     54 15 06 F6 | 	mov	arg02, ##@LR__5925
12e98     00 12 06 F6 | 	mov	arg01, #0
12e9c     00 16 06 F6 | 	mov	arg03, #0
12ea0     A0 4C B1 FD | 	call	#__system___basic_print_string
12ea4     00 12 06 F6 | 	mov	arg01, #0
12ea8     CC 9C B1 FD | 	call	#__system___getiolock_0611
12eac     FD 00 68 FC | 	wrlong	#0, result1
12eb0     27 12 06 F6 | 	mov	arg01, #39
12eb4     00 14 06 F6 | 	mov	arg02, #0
12eb8     78 05 B1 FD | 	call	#_printerror
12ebc     64 00 90 FD | 	jmp	#LR__1501
12ec0                 | LR__1500
12ec0     7C A7 BF FD | 	call	#_pop
12ec4     FD 26 02 F6 | 	mov	local01, result1
12ec8     FE 16 02 F6 | 	mov	arg03, result2
12ecc     A7 26 62 FC | 	wrlong	local01, fp
12ed0     04 4E 05 F1 | 	add	fp, #4
12ed4     A7 16 62 FC | 	wrlong	arg03, fp
12ed8     04 4E 05 F1 | 	add	fp, #4
12edc     A7 FE 61 FC | 	wrlong	result3, fp
12ee0     08 4E 85 F1 | 	sub	fp, #8
12ee4     A7 12 02 F6 | 	mov	arg01, fp
12ee8     38 A9 BF FD | 	call	#_converttoint
12eec     FD 26 02 F6 | 	mov	local01, result1
12ef0     01 26 66 F0 | 	shl	local01, #1
12ef4     52 00 00 FF 
12ef8     B4 E4 05 F1 | 	add	objptr, ##42164
12efc     F2 26 02 F1 | 	add	local01, objptr
12f00     13 27 E2 FA | 	rdword	local01, local01
12f04     A7 26 62 FC | 	wrlong	local01, fp
12f08     08 4E 05 F1 | 	add	fp, #8
12f0c     A7 38 68 FC | 	wrlong	#28, fp
12f10     08 4E 85 F1 | 	sub	fp, #8
12f14     A7 12 02 F6 | 	mov	arg01, fp
12f18     52 00 00 FF 
12f1c     B4 E4 85 F1 | 	sub	objptr, ##42164
12f20     B4 A7 BF FD | 	call	#_push
12f24                 | LR__1501
12f24     A7 F0 03 F6 | 	mov	ptra, fp
12f28     B2 00 A0 FD | 	call	#popregs_
12f2c                 | _do_getenvsustain_ret
12f2c     2D 00 64 FD | 	ret
12f30                 | 
12f30                 | ' 
12f30                 | ' '-------------------- getnotevalue
12f30                 | ' 
12f30                 | ' sub do_getnotevalue
12f30                 | _do_getnotevalue
12f30     01 4A 05 F6 | 	mov	COUNT_, #1
12f34     A8 00 A0 FD | 	call	#pushregs_
12f38     1C F0 07 F1 | 	add	ptra, #28
12f3c     00 A7 BF FD | 	call	#_pop
12f40     FF 14 02 F6 | 	mov	arg02, result3
12f44     10 4E 05 F1 | 	add	fp, #16
12f48     A7 FA 61 FC | 	wrlong	result1, fp
12f4c     04 4E 05 F1 | 	add	fp, #4
12f50     A7 FC 61 FC | 	wrlong	result2, fp
12f54     04 4E 05 F1 | 	add	fp, #4
12f58     A7 14 62 FC | 	wrlong	arg02, fp
12f5c     08 4E 85 F1 | 	sub	fp, #8
12f60     A7 12 02 F6 | 	mov	arg01, fp
12f64     10 4E 85 F1 | 	sub	fp, #16
12f68     B8 A8 BF FD | 	call	#_converttoint
12f6c     FD 14 52 F6 | 	abs	arg02, result1 wc
12f70     0C 14 16 FD | 	qdiv	arg02, #12
12f74     0C 4E 05 F1 | 	add	fp, #12
12f78     A7 FA 61 FC | 	wrlong	result1, fp
12f7c     14 00 00 FF 
12f80     D8 E4 05 F1 | 	add	objptr, ##10456
12f84     08 4E 85 F1 | 	sub	fp, #8
12f88     19 14 62 FD | 	getqy	arg02
12f8c     0A 15 82 F6 | 	negc	arg02, arg02
12f90     02 14 66 F0 | 	shl	arg02, #2
12f94     F2 14 02 F1 | 	add	arg02, objptr
12f98     0A 15 02 FB | 	rdlong	arg02, arg02
12f9c     A7 14 62 FC | 	wrlong	arg02, fp
12fa0     08 4E 05 F1 | 	add	fp, #8
12fa4     A7 14 02 FB | 	rdlong	arg02, fp
12fa8     0A 15 52 F6 | 	abs	arg02, arg02 wc
12fac     0C 14 16 FD | 	qdiv	arg02, #12
12fb0     0C 4E 85 F1 | 	sub	fp, #12
12fb4     14 00 00 FF 
12fb8     D8 E4 85 F1 | 	sub	objptr, ##10456
12fbc     18 14 62 FD | 	getqx	arg02
12fc0     0A 13 82 F6 | 	negc	arg01, arg02
12fc4     09 13 52 F6 | 	abs	arg01, arg01 wc
12fc8     1F 26 C6 C9 |  if_b	decod	local01, #31
12fcc     00 26 06 36 |  if_ae	mov	local01, #0
12fd0     F0 68 B1 FD | 	call	#__system___float_fromuns
12fd4     13 FB 61 F5 | 	xor	result1, local01
12fd8     08 4E 05 F1 | 	add	fp, #8
12fdc     A7 FA 61 FC | 	wrlong	result1, fp
12fe0     FD 14 02 F6 | 	mov	arg02, result1
12fe4     08 4E 85 F1 | 	sub	fp, #8
12fe8     1E 12 C6 F9 | 	decod	arg01, #30
12fec     E0 7B B1 FD | 	call	#__system____builtin_powf
12ff0     FD 12 02 F6 | 	mov	arg01, result1
12ff4     04 4E 05 F1 | 	add	fp, #4
12ff8     A7 14 02 FB | 	rdlong	arg02, fp
12ffc     04 4E 85 F1 | 	sub	fp, #4
13000     C4 6C B1 FD | 	call	#__system___float_mul
13004     A7 FA 61 FC | 	wrlong	result1, fp
13008     10 4E 05 F1 | 	add	fp, #16
1300c     A7 FA 61 FC | 	wrlong	result1, fp
13010     08 4E 05 F1 | 	add	fp, #8
13014     A7 3C 68 FC | 	wrlong	#30, fp
13018     08 4E 85 F1 | 	sub	fp, #8
1301c     A7 12 02 F6 | 	mov	arg01, fp
13020     10 4E 85 F1 | 	sub	fp, #16
13024     B0 A6 BF FD | 	call	#_push
13028     A7 F0 03 F6 | 	mov	ptra, fp
1302c     B2 00 A0 FD | 	call	#popregs_
13030                 | _do_getnotevalue_ret
13030     2D 00 64 FD | 	ret
13034                 | 
13034                 | ' 
13034                 | ' '-------------------- getpixel
13034                 | ' 
13034                 | ' sub do_getpixel
13034                 | _do_getpixel
13034     00 4A 05 F6 | 	mov	COUNT_, #0
13038     A8 00 A0 FD | 	call	#pushregs_
1303c     24 F0 07 F1 | 	add	ptra, #36
13040     4A 00 00 FF 
13044     80 E4 05 F1 | 	add	objptr, ##38016
13048     F2 16 02 FB | 	rdlong	arg03, objptr
1304c     0B 15 02 F6 | 	mov	arg02, arg03
13050     01 14 66 F0 | 	shl	arg02, #1
13054     0B 15 02 F1 | 	add	arg02, arg03
13058     02 14 66 F0 | 	shl	arg02, #2
1305c     03 00 00 FF 
13060     04 E4 85 F1 | 	sub	objptr, ##1540
13064     F2 14 02 F1 | 	add	arg02, objptr
13068     0A 17 02 FB | 	rdlong	arg03, arg02
1306c     18 4E 05 F1 | 	add	fp, #24
13070     A7 16 62 FC | 	wrlong	arg03, fp
13074                 | ' 
13074                 | ' numpar=compiledline(lineptr_e).result.uresult
13074                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
13074     18 4E 85 F1 | 	sub	fp, #24
13078     02 16 0E F2 | 	cmp	arg03, #2 wz
1307c     47 00 00 FF 
13080     7C E4 85 F1 | 	sub	objptr, ##36476
13084     40 00 90 AD |  if_e	jmp	#LR__1510
13088     00 12 06 F6 | 	mov	arg01, #0
1308c     E8 9A B1 FD | 	call	#__system___getiolock_0611
13090     FD 12 02 F6 | 	mov	arg01, result1
13094     B8 3D B1 FD | 	call	#__system___lockmem
13098     B9 01 00 FF 
1309c     64 15 06 F6 | 	mov	arg02, ##@LR__5926
130a0     00 12 06 F6 | 	mov	arg01, #0
130a4     00 16 06 F6 | 	mov	arg03, #0
130a8     98 4A B1 FD | 	call	#__system___basic_print_string
130ac     00 12 06 F6 | 	mov	arg01, #0
130b0     C4 9A B1 FD | 	call	#__system___getiolock_0611
130b4     FD 00 68 FC | 	wrlong	#0, result1
130b8     27 12 06 F6 | 	mov	arg01, #39
130bc     00 14 06 F6 | 	mov	arg02, #0
130c0     70 03 B1 FD | 	call	#_printerror
130c4     B4 00 90 FD | 	jmp	#LR__1511
130c8                 | LR__1510
130c8     74 A5 BF FD | 	call	#_pop
130cc     FD 16 02 F6 | 	mov	arg03, result1
130d0     FE 14 02 F6 | 	mov	arg02, result2
130d4     FF 12 02 F6 | 	mov	arg01, result3
130d8     0C 4E 05 F1 | 	add	fp, #12
130dc     A7 16 62 FC | 	wrlong	arg03, fp
130e0     04 4E 05 F1 | 	add	fp, #4
130e4     A7 14 62 FC | 	wrlong	arg02, fp
130e8     04 4E 05 F1 | 	add	fp, #4
130ec     A7 12 62 FC | 	wrlong	arg01, fp
130f0     14 4E 85 F1 | 	sub	fp, #20
130f4     48 A5 BF FD | 	call	#_pop
130f8     FF 16 02 F6 | 	mov	arg03, result3
130fc     A7 FA 61 FC | 	wrlong	result1, fp
13100     04 4E 05 F1 | 	add	fp, #4
13104     A7 FC 61 FC | 	wrlong	result2, fp
13108     04 4E 05 F1 | 	add	fp, #4
1310c     A7 16 62 FC | 	wrlong	arg03, fp
13110     08 4E 85 F1 | 	sub	fp, #8
13114     A7 12 02 F6 | 	mov	arg01, fp
13118     08 A7 BF FD | 	call	#_converttoint
1311c     1C 4E 05 F1 | 	add	fp, #28
13120     A7 FA 61 FC | 	wrlong	result1, fp
13124     10 4E 85 F1 | 	sub	fp, #16
13128     A7 12 02 F6 | 	mov	arg01, fp
1312c     0C 4E 85 F1 | 	sub	fp, #12
13130     F0 A6 BF FD | 	call	#_converttoint
13134     FD 16 02 F6 | 	mov	arg03, result1
13138     20 4E 05 F1 | 	add	fp, #32
1313c     A7 16 62 FC | 	wrlong	arg03, fp
13140     F2 12 02 FB | 	rdlong	arg01, objptr
13144     04 4E 85 F1 | 	sub	fp, #4
13148     A7 FE 01 FB | 	rdlong	result3, fp
1314c     FF 12 02 F1 | 	add	arg01, result3
13150     1C 4E 85 F1 | 	sub	fp, #28
13154     0A 16 66 F0 | 	shl	arg03, #10
13158     0B 13 02 F1 | 	add	arg01, arg03
1315c     4C 05 B1 FD | 	call	#_pspeek
13160     FD FA E1 F8 | 	getbyte	result1, result1, #0
13164     A7 FA 61 FC | 	wrlong	result1, fp
13168     08 4E 05 F1 | 	add	fp, #8
1316c     A7 3A 68 FC | 	wrlong	#29, fp
13170     08 4E 85 F1 | 	sub	fp, #8
13174     A7 12 02 F6 | 	mov	arg01, fp
13178     5C A5 BF FD | 	call	#_push
1317c                 | LR__1511
1317c     A7 F0 03 F6 | 	mov	ptra, fp
13180     B2 00 A0 FD | 	call	#popregs_
13184                 | _do_getpixel_ret
13184     2D 00 64 FD | 	ret
13188                 | 
13188                 | ' 
13188                 | ' '-------------------- gettime
13188                 | ' 
13188                 | ' sub do_gettime
13188                 | _do_gettime
13188     02 4A 05 F6 | 	mov	COUNT_, #2
1318c     A8 00 A0 FD | 	call	#pushregs_
13190     14 F0 07 F1 | 	add	ptra, #20
13194                 | ' 
13194                 | ' const asm 
13194     1A 26 72 FD | 	getct	local01 wc
13198     1A 28 62 FD | 	getct	local02
1319c                 | ' return hi1, lo1
1319c     14 FD 01 F6 | 	mov	result2, local02
131a0     A7 26 62 FC | 	wrlong	local01, fp
131a4     04 4E 05 F1 | 	add	fp, #4
131a8     A7 FC 61 FC | 	wrlong	result2, fp
131ac     0C 4E 05 F1 | 	add	fp, #12
131b0     A7 3A 68 FC | 	wrlong	#29, fp
131b4     0C 4E 85 F1 | 	sub	fp, #12
131b8     A7 12 02 FB | 	rdlong	arg01, fp
131bc     04 4E 05 F1 | 	add	fp, #4
131c0     A7 12 62 FC | 	wrlong	arg01, fp
131c4     08 4E 85 F1 | 	sub	fp, #8
131c8     A7 12 02 FB | 	rdlong	arg01, fp
131cc     0C 4E 05 F1 | 	add	fp, #12
131d0     A7 12 62 FC | 	wrlong	arg01, fp
131d4     04 4E 85 F1 | 	sub	fp, #4
131d8     A7 12 02 F6 | 	mov	arg01, fp
131dc     08 4E 85 F1 | 	sub	fp, #8
131e0     F4 A4 BF FD | 	call	#_push
131e4     A7 F0 03 F6 | 	mov	ptra, fp
131e8     B2 00 A0 FD | 	call	#popregs_
131ec                 | _do_gettime_ret
131ec     2D 00 64 FD | 	ret
131f0                 | 
131f0                 | ' 
131f0                 | ' '-------------------- gosub
131f0                 | ' 
131f0                 | ' sub do_gosub()
131f0                 | _do_gosub
131f0     50 00 00 FF 
131f4     34 E5 05 F1 | 	add	objptr, ##41268
131f8     F2 00 02 FB | 	rdlong	_var01, objptr
131fc     01 00 06 F1 | 	add	_var01, #1
13200     F2 00 62 FC | 	wrlong	_var01, objptr
13204                 | ' gosubtop+=1
13204                 | ' if compiledline(lineptr_e+1).result_type=token_end then
13204     06 00 00 FF 
13208     B4 E4 85 F1 | 	sub	objptr, ##3252
1320c     F2 00 02 FB | 	rdlong	_var01, objptr
13210     01 00 06 F1 | 	add	_var01, #1
13214     00 03 02 F6 | 	mov	_var02, _var01
13218     01 02 66 F0 | 	shl	_var02, #1
1321c     00 03 02 F1 | 	add	_var02, _var01
13220     02 02 66 F0 | 	shl	_var02, #2
13224     03 00 00 FF 
13228     04 E4 85 F1 | 	sub	objptr, ##1540
1322c     F2 02 02 F1 | 	add	_var02, objptr
13230     08 02 06 F1 | 	add	_var02, #8
13234     01 03 02 FB | 	rdlong	_var02, _var02
13238     FE 03 0E F2 | 	cmp	_var02, #510 wz
1323c     47 00 00 FF 
13240     7C E4 85 F1 | 	sub	objptr, ##36476
13244     58 00 90 5D |  if_ne	jmp	#LR__1520
13248     50 00 00 FF 
1324c     34 E5 05 F1 | 	add	objptr, ##41268
13250     F2 02 02 FB | 	rdlong	_var02, objptr
13254     03 02 66 F0 | 	shl	_var02, #3
13258     03 00 00 FF 
1325c     88 E5 85 F1 | 	sub	objptr, ##1928
13260     F2 02 02 F1 | 	add	_var02, objptr
13264     03 00 00 FF 
13268     0C E5 05 F1 | 	add	objptr, ##1804
1326c     F2 00 02 FB | 	rdlong	_var01, objptr
13270     01 01 62 FC | 	wrlong	_var01, _var02
13274     7C E4 05 F1 | 	add	objptr, #124
13278     F2 02 02 FB | 	rdlong	_var02, objptr
1327c     03 02 66 F0 | 	shl	_var02, #3
13280     03 00 00 FF 
13284     88 E5 85 F1 | 	sub	objptr, ##1928
13288     F2 02 02 F1 | 	add	_var02, objptr
1328c     04 02 06 F1 | 	add	_var02, #4
13290     01 01 68 FC | 	wrlong	#0, _var02
13294     4C 00 00 FF 
13298     AC E5 85 F1 | 	sub	objptr, ##39340
1329c     64 00 90 FD | 	jmp	#LR__1521
132a0                 | LR__1520
132a0     50 00 00 FF 
132a4     34 E5 05 F1 | 	add	objptr, ##41268
132a8     F2 02 02 FB | 	rdlong	_var02, objptr
132ac     03 02 66 F0 | 	shl	_var02, #3
132b0     03 00 00 FF 
132b4     88 E5 85 F1 | 	sub	objptr, ##1928
132b8     F2 02 02 F1 | 	add	_var02, objptr
132bc     03 00 00 FF 
132c0     14 E5 05 F1 | 	add	objptr, ##1812
132c4     F2 00 02 FB | 	rdlong	_var01, objptr
132c8     01 01 62 FC | 	wrlong	_var01, _var02
132cc     74 E4 05 F1 | 	add	objptr, #116
132d0     F2 02 02 FB | 	rdlong	_var02, objptr
132d4     03 02 66 F0 | 	shl	_var02, #3
132d8     03 00 00 FF 
132dc     88 E5 85 F1 | 	sub	objptr, ##1928
132e0     F2 02 02 F1 | 	add	_var02, objptr
132e4     02 00 00 FF 
132e8     2C E5 85 F1 | 	sub	objptr, ##1324
132ec     F2 00 02 FB | 	rdlong	_var01, objptr
132f0     4A 00 00 FF 
132f4     80 E4 85 F1 | 	sub	objptr, ##38016
132f8     02 00 06 F1 | 	add	_var01, #2
132fc     04 02 06 F1 | 	add	_var02, #4
13300     01 01 62 FC | 	wrlong	_var01, _var02
13304                 | LR__1521
13304                 | _do_gosub_ret
13304     2D 00 64 FD | 	ret
13308                 | 
13308                 | ' 
13308                 | ' '--------------------- goto
13308                 | ' 
13308                 | ' '------- fast goto
13308                 | ' 
13308                 | ' sub do_fast_goto
13308                 | _do_fast_goto
13308     02 4A 05 F6 | 	mov	COUNT_, #2
1330c     A8 00 A0 FD | 	call	#pushregs_
13310                 | _do_fast_goto_enter
13310     4A 00 00 FF 
13314     80 E4 05 F1 | 	add	objptr, ##38016
13318     F2 12 02 FB | 	rdlong	arg01, objptr
1331c     09 27 02 F6 | 	mov	local01, arg01
13320     01 26 66 F0 | 	shl	local01, #1
13324     09 27 02 F1 | 	add	local01, arg01
13328     02 26 66 F0 | 	shl	local01, #2
1332c     03 00 00 FF 
13330     04 E4 85 F1 | 	sub	objptr, ##1540
13334     F2 26 02 F1 | 	add	local01, objptr
13338     13 29 02 FB | 	rdlong	local02, local01
1333c     14 13 02 F6 | 	mov	arg01, local02
13340     47 00 00 FF 
13344     7C E4 85 F1 | 	sub	objptr, ##36476
13348     B8 03 B1 FD | 	call	#_pslpeek
1334c     FD 12 02 F6 | 	mov	arg01, result1
13350                 | ' 
13350                 | ' testptr=compiledline(lineptr_e).result.uresult
13350                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
13350                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
13350     4A 00 00 FF 
13354     80 E4 05 F1 | 	add	objptr, ##38016
13358     F2 FA 01 FB | 	rdlong	result1, objptr
1335c     FD 26 02 F6 | 	mov	local01, result1
13360     01 26 66 F0 | 	shl	local01, #1
13364     FD 26 02 F1 | 	add	local01, result1
13368     02 26 66 F0 | 	shl	local01, #2
1336c     03 00 00 FF 
13370     04 E4 85 F1 | 	sub	objptr, ##1540
13374     F2 26 02 F1 | 	add	local01, objptr
13378     04 26 06 F1 | 	add	local01, #4
1337c     13 27 02 FB | 	rdlong	local01, local01
13380     13 13 0A F2 | 	cmp	arg01, local01 wz
13384     47 00 00 FF 
13388     7C E4 85 F1 | 	sub	objptr, ##36476
1338c     58 00 90 5D |  if_ne	jmp	#LR__1530
13390     50 00 00 FF 
13394     B8 E4 05 F1 | 	add	objptr, ##41144
13398     F2 28 62 FC | 	wrlong	local02, objptr
1339c     06 00 00 FF 
133a0     3C E4 85 F1 | 	sub	objptr, ##3132
133a4     F2 28 02 FB | 	rdlong	local02, objptr
133a8     01 28 86 F1 | 	sub	local02, #1
133ac     04 E4 05 F1 | 	add	objptr, #4
133b0     F2 28 62 FC | 	wrlong	local02, objptr
133b4                 | '   runptr=testptr
133b4                 | '   lineptr_e=lineptr-1
133b4                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
133b4     06 00 00 FF 
133b8     84 E4 05 F1 | 	add	objptr, ##3204
133bc     F2 28 02 FB | 	rdlong	local02, objptr
133c0     50 00 00 FF 
133c4     04 E5 85 F1 | 	sub	objptr, ##41220
133c8     FF FF 3F FF 
133cc     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
133d0     50 00 00 AF 
133d4     04 E5 05 A1 |  if_e	add	objptr, ##41220
133d8     F2 00 68 AC |  if_e	wrlong	#0, objptr
133dc     50 00 00 AF 
133e0     04 E5 85 A1 |  if_e	sub	objptr, ##41220
133e4     04 00 90 FD | 	jmp	#LR__1531
133e8                 | LR__1530
133e8     0C 00 B0 FD | 	call	#_do_find_goto
133ec                 | LR__1531
133ec     A7 F0 03 F6 | 	mov	ptra, fp
133f0     B2 00 A0 FD | 	call	#popregs_
133f4                 | _do_fast_goto_ret
133f4     2D 00 64 FD | 	ret
133f8                 | 
133f8                 | ' 
133f8                 | ' '------- find goto  
133f8                 | ' 
133f8                 | ' sub do_find_goto
133f8                 | _do_find_goto
133f8     03 4A 05 F6 | 	mov	COUNT_, #3
133fc     A8 00 A0 FD | 	call	#pushregs_
13400     24 F0 07 F1 | 	add	ptra, #36
13404                 | _do_find_goto_enter
13404     4A 00 00 FF 
13408     80 E4 05 F1 | 	add	objptr, ##38016
1340c     F2 26 02 FB | 	rdlong	local01, objptr
13410     13 29 02 F6 | 	mov	local02, local01
13414     01 28 66 F0 | 	shl	local02, #1
13418     13 29 02 F1 | 	add	local02, local01
1341c     02 28 66 F0 | 	shl	local02, #2
13420     03 00 00 FF 
13424     04 E4 85 F1 | 	sub	objptr, ##1540
13428     F2 28 02 F1 | 	add	local02, objptr
1342c     04 28 06 F1 | 	add	local02, #4
13430     14 29 02 FB | 	rdlong	local02, local02
13434     A7 28 62 FC | 	wrlong	local02, fp
13438     03 00 00 FF 
1343c     0C E4 05 F1 | 	add	objptr, ##1548
13440     F2 2A 02 FB | 	rdlong	local03, objptr
13444     4A 00 00 FF 
13448     88 E4 85 F1 | 	sub	objptr, ##38024
1344c     04 4E 05 F1 | 	add	fp, #4
13450     A7 2A 62 FC | 	wrlong	local03, fp
13454     04 4E 85 F1 | 	sub	fp, #4
13458                 | ' 
13458                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
13458                 | ' gotoptr=programstart
13458                 | ' do
13458                 | LR__1540
13458     0C 4E 05 F1 | 	add	fp, #12
1345c     A7 12 02 F6 | 	mov	arg01, fp
13460     08 4E 85 F1 | 	sub	fp, #8
13464     A7 14 02 FB | 	rdlong	arg02, fp
13468     04 4E 85 F1 | 	sub	fp, #4
1346c     18 16 06 F6 | 	mov	arg03, #24
13470     0B 00 00 FF 
13474     CC E4 05 F1 | 	add	objptr, ##5836
13478     4C 2D B1 FD | 	call	#_psram_spin2_read1
1347c     0B 00 00 FF 
13480     CC E4 85 F1 | 	sub	objptr, ##5836
13484                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
13484                 | '   if gotoheader(0)<>$FFFFFFFF then
13484     0C 4E 05 F1 | 	add	fp, #12
13488     A7 2A 02 FB | 	rdlong	local03, fp
1348c     0C 4E 85 F1 | 	sub	fp, #12
13490     FF FF 7F FF 
13494     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
13498     24 00 90 AD |  if_e	jmp	#LR__1541
1349c     04 4E 05 F1 | 	add	fp, #4
134a0     A7 2A 02 FB | 	rdlong	local03, fp
134a4     04 4E 05 F1 | 	add	fp, #4
134a8     A7 2A 62 FC | 	wrlong	local03, fp
134ac     18 4E 05 F1 | 	add	fp, #24
134b0     A7 2A 02 FB | 	rdlong	local03, fp
134b4     1C 4E 85 F1 | 	sub	fp, #28
134b8     A7 2A 62 FC | 	wrlong	local03, fp
134bc     04 4E 85 F1 | 	sub	fp, #4
134c0                 | LR__1541
134c0     20 4E 05 F1 | 	add	fp, #32
134c4     A7 2A 02 FB | 	rdlong	local03, fp
134c8     20 4E 85 F1 | 	sub	fp, #32
134cc     FF FF 3F FF 
134d0     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
134d4     0C 4E 05 51 |  if_ne	add	fp, #12
134d8     A7 26 02 5B |  if_ne	rdlong	local01, fp
134dc     0C 4E 85 51 |  if_ne	sub	fp, #12
134e0     FF FF 7F 5F 
134e4     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
134e8     18 00 90 AD |  if_e	jmp	#LR__1542
134ec     0C 4E 05 F1 | 	add	fp, #12
134f0     A7 2A 02 FB | 	rdlong	local03, fp
134f4     0C 4E 85 F1 | 	sub	fp, #12
134f8     A7 28 02 FB | 	rdlong	local02, fp
134fc     14 2B 0A F2 | 	cmp	local03, local02 wz
13500     54 FF 9F 5D |  if_ne	jmp	#LR__1540
13504                 | LR__1542
13504                 | ' 
13504                 | ' if gotoheader(0)=gotoline then
13504     0C 4E 05 F1 | 	add	fp, #12
13508     A7 2A 02 FB | 	rdlong	local03, fp
1350c     0C 4E 85 F1 | 	sub	fp, #12
13510     A7 26 02 FB | 	rdlong	local01, fp
13514     13 2B 0A F2 | 	cmp	local03, local01 wz
13518     D8 00 90 5D |  if_ne	jmp	#LR__1543
1351c     4A 00 00 FF 
13520     80 E4 05 F1 | 	add	objptr, ##38016
13524     F2 26 02 FB | 	rdlong	local01, objptr
13528     13 29 02 F6 | 	mov	local02, local01
1352c     01 28 66 F0 | 	shl	local02, #1
13530     13 29 02 F1 | 	add	local02, local01
13534     02 28 66 F0 | 	shl	local02, #2
13538     03 00 00 FF 
1353c     04 E4 85 F1 | 	sub	objptr, ##1540
13540     F2 28 02 F1 | 	add	local02, objptr
13544     08 4E 05 F1 | 	add	fp, #8
13548     A7 2A 02 FB | 	rdlong	local03, fp
1354c     14 2B 62 FC | 	wrlong	local03, local02
13550     03 00 00 FF 
13554     04 E4 05 F1 | 	add	objptr, ##1540
13558     F2 26 02 FB | 	rdlong	local01, objptr
1355c     13 29 02 F6 | 	mov	local02, local01
13560     01 28 66 F0 | 	shl	local02, #1
13564     13 29 02 F1 | 	add	local02, local01
13568     02 28 66 F0 | 	shl	local02, #2
1356c     03 00 00 FF 
13570     04 E4 85 F1 | 	sub	objptr, ##1540
13574     F2 28 02 F1 | 	add	local02, objptr
13578     08 28 06 F1 | 	add	local02, #8
1357c     14 9D 68 FC | 	wrlong	#78, local02
13580     03 00 00 FF 
13584     04 E4 05 F1 | 	add	objptr, ##1540
13588     F2 28 02 FB | 	rdlong	local02, objptr
1358c     14 13 02 F6 | 	mov	arg01, local02
13590     01 12 66 F0 | 	shl	arg01, #1
13594     14 13 02 F1 | 	add	arg01, local02
13598     02 12 66 F0 | 	shl	arg01, #2
1359c     03 00 00 FF 
135a0     04 E4 85 F1 | 	sub	objptr, ##1540
135a4     F2 12 02 F1 | 	add	arg01, objptr
135a8     09 00 00 FF 
135ac     44 E4 05 F1 | 	add	objptr, ##4676
135b0     F2 14 02 FB | 	rdlong	arg02, objptr
135b4     02 2A 06 F6 | 	mov	local03, #2
135b8     14 2B 02 F1 | 	add	local03, local02
135bc     0B 00 00 FF 
135c0     5C E4 85 F1 | 	sub	objptr, ##5724
135c4     F2 16 02 FB | 	rdlong	arg03, objptr
135c8     0B 2B 02 FD | 	qmul	local03, arg03
135cc     08 4E 85 F1 | 	sub	fp, #8
135d0     39 00 00 FF 
135d4     98 E5 85 F1 | 	sub	objptr, ##29592
135d8     18 2A 62 FD | 	getqx	local03
135dc     15 15 02 F1 | 	add	arg02, local03
135e0     80 2C B1 FD | 	call	#_psram_spin2_write
135e4     0B 00 00 FF 
135e8     CC E4 85 F1 | 	sub	objptr, ##5836
135ec     18 FD BF FD | 	call	#_do_fast_goto
135f0     0C 00 90 FD | 	jmp	#LR__1544
135f4                 | LR__1543
135f4     26 12 06 F6 | 	mov	arg01, #38
135f8     00 14 06 F6 | 	mov	arg02, #0
135fc     34 FE B0 FD | 	call	#_printerror
13600                 | LR__1544
13600     A7 F0 03 F6 | 	mov	ptra, fp
13604     B2 00 A0 FD | 	call	#popregs_
13608                 | _do_find_goto_ret
13608     2D 00 64 FD | 	ret
1360c                 | 
1360c                 | ' 
1360c                 | ' '------- slow goto  
1360c                 | ' 
1360c                 | ' sub do_slow_goto
1360c                 | _do_slow_goto
1360c     02 4A 05 F6 | 	mov	COUNT_, #2
13610     A8 00 A0 FD | 	call	#pushregs_
13614     30 F0 07 F1 | 	add	ptra, #48
13618     24 A0 BF FD | 	call	#_pop
1361c     FF 26 02 F6 | 	mov	local01, result3
13620     24 4E 05 F1 | 	add	fp, #36
13624     A7 FA 61 FC | 	wrlong	result1, fp
13628     04 4E 05 F1 | 	add	fp, #4
1362c     A7 FC 61 FC | 	wrlong	result2, fp
13630     04 4E 05 F1 | 	add	fp, #4
13634     A7 26 62 FC | 	wrlong	local01, fp
13638     08 4E 85 F1 | 	sub	fp, #8
1363c     A7 12 02 F6 | 	mov	arg01, fp
13640     24 4E 85 F1 | 	sub	fp, #36
13644     DC A1 BF FD | 	call	#_converttoint
13648     A7 FA 61 FC | 	wrlong	result1, fp
1364c     4A 00 00 FF 
13650     88 E4 05 F1 | 	add	objptr, ##38024
13654     F2 28 02 FB | 	rdlong	local02, objptr
13658     4A 00 00 FF 
1365c     88 E4 85 F1 | 	sub	objptr, ##38024
13660     04 4E 05 F1 | 	add	fp, #4
13664     A7 28 62 FC | 	wrlong	local02, fp
13668     04 4E 85 F1 | 	sub	fp, #4
1366c                 | ' 
1366c                 | ' t1=pop() : gotoline=converttoint(t1)
1366c                 | ' gotoptr=programstart
1366c                 | ' do
1366c                 | LR__1550
1366c     0C 4E 05 F1 | 	add	fp, #12
13670     A7 12 02 F6 | 	mov	arg01, fp
13674     08 4E 85 F1 | 	sub	fp, #8
13678     A7 14 02 FB | 	rdlong	arg02, fp
1367c     04 4E 85 F1 | 	sub	fp, #4
13680     18 16 06 F6 | 	mov	arg03, #24
13684     0B 00 00 FF 
13688     CC E4 05 F1 | 	add	objptr, ##5836
1368c     38 2B B1 FD | 	call	#_psram_spin2_read1
13690     0B 00 00 FF 
13694     CC E4 85 F1 | 	sub	objptr, ##5836
13698                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
13698                 | '   if gotoheader(0)<>$FFFFFFFF then
13698     0C 4E 05 F1 | 	add	fp, #12
1369c     A7 28 02 FB | 	rdlong	local02, fp
136a0     0C 4E 85 F1 | 	sub	fp, #12
136a4     FF FF 7F FF 
136a8     FF 29 0E F2 | 	cmp	local02, ##-1 wz
136ac     24 00 90 AD |  if_e	jmp	#LR__1551
136b0     04 4E 05 F1 | 	add	fp, #4
136b4     A7 28 02 FB | 	rdlong	local02, fp
136b8     04 4E 05 F1 | 	add	fp, #4
136bc     A7 28 62 FC | 	wrlong	local02, fp
136c0     18 4E 05 F1 | 	add	fp, #24
136c4     A7 28 02 FB | 	rdlong	local02, fp
136c8     1C 4E 85 F1 | 	sub	fp, #28
136cc     A7 28 62 FC | 	wrlong	local02, fp
136d0     04 4E 85 F1 | 	sub	fp, #4
136d4                 | LR__1551
136d4     20 4E 05 F1 | 	add	fp, #32
136d8     A7 28 02 FB | 	rdlong	local02, fp
136dc     20 4E 85 F1 | 	sub	fp, #32
136e0     FF FF 3F FF 
136e4     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
136e8     0C 4E 05 51 |  if_ne	add	fp, #12
136ec     A7 26 02 5B |  if_ne	rdlong	local01, fp
136f0     0C 4E 85 51 |  if_ne	sub	fp, #12
136f4     FF FF 7F 5F 
136f8     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
136fc     18 00 90 AD |  if_e	jmp	#LR__1552
13700     0C 4E 05 F1 | 	add	fp, #12
13704     A7 28 02 FB | 	rdlong	local02, fp
13708     0C 4E 85 F1 | 	sub	fp, #12
1370c     A7 16 02 FB | 	rdlong	arg03, fp
13710     0B 29 0A F2 | 	cmp	local02, arg03 wz
13714     54 FF 9F 5D |  if_ne	jmp	#LR__1550
13718                 | LR__1552
13718                 | ' if gotoheader(0)=gotoline then  
13718     0C 4E 05 F1 | 	add	fp, #12
1371c     A7 28 02 FB | 	rdlong	local02, fp
13720     0C 4E 85 F1 | 	sub	fp, #12
13724     A7 26 02 FB | 	rdlong	local01, fp
13728     13 29 0A F2 | 	cmp	local02, local01 wz
1372c     60 00 90 5D |  if_ne	jmp	#LR__1553
13730     08 4E 05 F1 | 	add	fp, #8
13734     A7 28 02 FB | 	rdlong	local02, fp
13738     08 4E 85 F1 | 	sub	fp, #8
1373c     50 00 00 FF 
13740     B8 E4 05 F1 | 	add	objptr, ##41144
13744     F2 28 62 FC | 	wrlong	local02, objptr
13748     06 00 00 FF 
1374c     3C E4 85 F1 | 	sub	objptr, ##3132
13750     F2 28 02 FB | 	rdlong	local02, objptr
13754     01 28 86 F1 | 	sub	local02, #1
13758     04 E4 05 F1 | 	add	objptr, #4
1375c     F2 28 62 FC | 	wrlong	local02, objptr
13760                 | '    runptr=oldgotoptr
13760                 | '    lineptr_e=lineptr-1
13760                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0 
13760     06 00 00 FF 
13764     84 E4 05 F1 | 	add	objptr, ##3204
13768     F2 28 02 FB | 	rdlong	local02, objptr
1376c     50 00 00 FF 
13770     04 E5 85 F1 | 	sub	objptr, ##41220
13774     FF FF 3F FF 
13778     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
1377c     50 00 00 AF 
13780     04 E5 05 A1 |  if_e	add	objptr, ##41220
13784     F2 00 68 AC |  if_e	wrlong	#0, objptr
13788     50 00 00 AF 
1378c     04 E5 85 A1 |  if_e	sub	objptr, ##41220
13790                 | LR__1553
13790     A7 F0 03 F6 | 	mov	ptra, fp
13794     B2 00 A0 FD | 	call	#popregs_
13798                 | _do_slow_goto_ret
13798     2D 00 64 FD | 	ret
1379c                 | 
1379c                 | ' 
1379c                 | ' ' ----------------  hex$
1379c                 | ' 
1379c                 | ' sub do_hex
1379c                 | _do_hex
1379c     01 4A 05 F6 | 	mov	COUNT_, #1
137a0     A8 00 A0 FD | 	call	#pushregs_
137a4     18 F0 07 F1 | 	add	ptra, #24
137a8     4A 00 00 FF 
137ac     80 E4 05 F1 | 	add	objptr, ##38016
137b0     F2 26 02 FB | 	rdlong	local01, objptr
137b4     13 17 02 F6 | 	mov	arg03, local01
137b8     01 16 66 F0 | 	shl	arg03, #1
137bc     13 17 02 F1 | 	add	arg03, local01
137c0     02 16 66 F0 | 	shl	arg03, #2
137c4     03 00 00 FF 
137c8     04 E4 85 F1 | 	sub	objptr, ##1540
137cc     F2 16 02 F1 | 	add	arg03, objptr
137d0     0B 17 02 FB | 	rdlong	arg03, arg03
137d4     0C 4E 05 F1 | 	add	fp, #12
137d8     A7 16 62 FC | 	wrlong	arg03, fp
137dc                 | ' 
137dc                 | ' numpar=compiledline(lineptr_e).result.uresult
137dc                 | ' if numpar>2 orelse numpar=0 then print "hex$: "; : printerror(39) : return
137dc     0C 4E 85 F1 | 	sub	fp, #12
137e0     03 16 16 F2 | 	cmp	arg03, #3 wc
137e4     47 00 00 FF 
137e8     7C E4 85 F1 | 	sub	objptr, ##36476
137ec     0C 4E 05 C1 |  if_b	add	fp, #12
137f0     A7 26 0A CB |  if_b	rdlong	local01, fp wz
137f4     0C 4E 85 C1 |  if_b	sub	fp, #12
137f8     40 00 90 4D |  if_c_and_nz	jmp	#LR__1560
137fc     00 12 06 F6 | 	mov	arg01, #0
13800     74 93 B1 FD | 	call	#__system___getiolock_0611
13804     FD 12 02 F6 | 	mov	arg01, result1
13808     44 36 B1 FD | 	call	#__system___lockmem
1380c     B9 01 00 FF 
13810     6F 15 06 F6 | 	mov	arg02, ##@LR__5927
13814     00 12 06 F6 | 	mov	arg01, #0
13818     00 16 06 F6 | 	mov	arg03, #0
1381c     24 43 B1 FD | 	call	#__system___basic_print_string
13820     00 12 06 F6 | 	mov	arg01, #0
13824     50 93 B1 FD | 	call	#__system___getiolock_0611
13828     FD 00 68 FC | 	wrlong	#0, result1
1382c     27 12 06 F6 | 	mov	arg01, #39
13830     00 14 06 F6 | 	mov	arg02, #0
13834     FC FB B0 FD | 	call	#_printerror
13838     B8 00 90 FD | 	jmp	#LR__1563
1383c                 | LR__1560
1383c                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=8
1383c     0C 4E 05 F1 | 	add	fp, #12
13840     A7 26 02 FB | 	rdlong	local01, fp
13844     0C 4E 85 F1 | 	sub	fp, #12
13848     02 26 0E F2 | 	cmp	local01, #2 wz
1384c     38 00 90 5D |  if_ne	jmp	#LR__1561
13850     EC 9D BF FD | 	call	#_pop
13854     FF 26 02 F6 | 	mov	local01, result3
13858     A7 FA 61 FC | 	wrlong	result1, fp
1385c     04 4E 05 F1 | 	add	fp, #4
13860     A7 FC 61 FC | 	wrlong	result2, fp
13864     04 4E 05 F1 | 	add	fp, #4
13868     A7 26 62 FC | 	wrlong	local01, fp
1386c     08 4E 85 F1 | 	sub	fp, #8
13870     A7 12 02 F6 | 	mov	arg01, fp
13874     AC 9F BF FD | 	call	#_converttoint
13878     14 4E 05 F1 | 	add	fp, #20
1387c     A7 FA 61 FC | 	wrlong	result1, fp
13880     14 4E 85 F1 | 	sub	fp, #20
13884     0C 00 90 FD | 	jmp	#LR__1562
13888                 | LR__1561
13888     14 4E 05 F1 | 	add	fp, #20
1388c     A7 10 68 FC | 	wrlong	#8, fp
13890     14 4E 85 F1 | 	sub	fp, #20
13894                 | LR__1562
13894     A8 9D BF FD | 	call	#_pop
13898     FF 26 02 F6 | 	mov	local01, result3
1389c     A7 FA 61 FC | 	wrlong	result1, fp
138a0     04 4E 05 F1 | 	add	fp, #4
138a4     A7 FC 61 FC | 	wrlong	result2, fp
138a8     04 4E 05 F1 | 	add	fp, #4
138ac     A7 26 62 FC | 	wrlong	local01, fp
138b0     08 4E 85 F1 | 	sub	fp, #8
138b4     A7 12 02 F6 | 	mov	arg01, fp
138b8     68 9F BF FD | 	call	#_converttoint
138bc     10 4E 05 F1 | 	add	fp, #16
138c0     A7 FA 61 FC | 	wrlong	result1, fp
138c4     FD 12 02 F6 | 	mov	arg01, result1
138c8     04 4E 05 F1 | 	add	fp, #4
138cc     A7 14 02 FB | 	rdlong	arg02, fp
138d0     14 4E 85 F1 | 	sub	fp, #20
138d4     10 16 06 F6 | 	mov	arg03, #16
138d8     44 58 B1 FD | 	call	#__system__Number_S
138dc     A7 FA 61 FC | 	wrlong	result1, fp
138e0     08 4E 05 F1 | 	add	fp, #8
138e4     A7 3E 68 FC | 	wrlong	#31, fp
138e8     08 4E 85 F1 | 	sub	fp, #8
138ec     A7 12 02 F6 | 	mov	arg01, fp
138f0     E4 9D BF FD | 	call	#_push
138f4                 | LR__1563
138f4     A7 F0 03 F6 | 	mov	ptra, fp
138f8     B2 00 A0 FD | 	call	#popregs_
138fc                 | _do_hex_ret
138fc     2D 00 64 FD | 	ret
13900                 | 
13900                 | ' 
13900                 | ' ' ----------------  if
13900                 | ' 
13900                 | ' sub do_if
13900                 | _do_if
13900     05 4A 05 F6 | 	mov	COUNT_, #5
13904     A8 00 A0 FD | 	call	#pushregs_
13908     34 9D BF FD | 	call	#_pop
1390c     FD 26 0A F6 | 	mov	local01, result1 wz
13910     FE 28 02 F6 | 	mov	local02, result2
13914     FF 2A 02 F6 | 	mov	local03, result3
13918                 | ' t1=pop()
13918                 | ' ' if uresult=0, jump over else
13918                 | ' if t1.result.uresult = 0 then 
13918     BC 00 90 5D |  if_ne	jmp	#LR__1572
1391c                 | '   for i=lineptr_e to lineptr-1
1391c     4A 00 00 FF 
13920     80 E4 05 F1 | 	add	objptr, ##38016
13924     F2 2C 02 FB | 	rdlong	local04, objptr
13928     04 E4 85 F1 | 	sub	objptr, #4
1392c     F2 2E 02 FB | 	rdlong	local05, objptr
13930     4A 00 00 FF 
13934     7C E4 85 F1 | 	sub	objptr, ##38012
13938                 | LR__1570
13938     17 2D 52 F2 | 	cmps	local04, local05 wc
1393c     78 00 90 3D |  if_ae	jmp	#LR__1571
13940     16 FF 01 F6 | 	mov	result3, local04
13944     01 FE 65 F0 | 	shl	result3, #1
13948     16 FF 01 F1 | 	add	result3, local04
1394c     02 FE 65 F0 | 	shl	result3, #2
13950     47 00 00 FF 
13954     7C E4 05 F1 | 	add	objptr, ##36476
13958     F2 FE 01 F1 | 	add	result3, objptr
1395c     FF 26 02 FB | 	rdlong	local01, result3
13960     04 FE 05 F1 | 	add	result3, #4
13964     FF FC 01 FB | 	rdlong	result2, result3
13968     16 FF 01 F6 | 	mov	result3, local04
1396c     01 FE 65 F0 | 	shl	result3, #1
13970     16 FF 01 F1 | 	add	result3, local04
13974     02 FE 65 F0 | 	shl	result3, #2
13978     F2 FE 01 F1 | 	add	result3, objptr
1397c     08 FE 05 F1 | 	add	result3, #8
13980     FF FE 01 FB | 	rdlong	result3, result3
13984     FE 28 02 F6 | 	mov	local02, result2
13988     FF 2A 02 F6 | 	mov	local03, result3
1398c                 | '     t1=compiledline(i)
1398c                 | '     if t1.result_type=token_else then lineptr_e=i : return
1398c     5A 2A 0E F2 | 	cmp	local03, #90 wz
13990     47 00 00 FF 
13994     7C E4 85 F1 | 	sub	objptr, ##36476
13998     4A 00 00 AF 
1399c     80 E4 05 A1 |  if_e	add	objptr, ##38016
139a0     F2 2C 62 AC |  if_e	wrlong	local04, objptr
139a4     4A 00 00 AF 
139a8     80 E4 85 A1 |  if_e	sub	objptr, ##38016
139ac     28 00 90 AD |  if_e	jmp	#LR__1573
139b0     01 2C 06 F1 | 	add	local04, #1
139b4     80 FF 9F FD | 	jmp	#LR__1570
139b8                 | LR__1571
139b8     4A 00 00 FF 
139bc     7C E4 05 F1 | 	add	objptr, ##38012
139c0     F2 2E 02 FB | 	rdlong	local05, objptr
139c4     01 2E 86 F1 | 	sub	local05, #1
139c8     04 E4 05 F1 | 	add	objptr, #4
139cc     F2 2E 62 FC | 	wrlong	local05, objptr
139d0     4A 00 00 FF 
139d4     80 E4 85 F1 | 	sub	objptr, ##38016
139d8                 | LR__1572
139d8                 | LR__1573
139d8     A7 F0 03 F6 | 	mov	ptra, fp
139dc     B2 00 A0 FD | 	call	#popregs_
139e0                 | _do_if_ret
139e0     2D 00 64 FD | 	ret
139e4                 | 
139e4                 | ' 
139e4                 | ' ' ----------------  inkey$
139e4                 | ' 
139e4                 | ' sub do_inkey
139e4                 | _do_inkey
139e4     02 4A 05 F6 | 	mov	COUNT_, #2
139e8     A8 00 A0 FD | 	call	#pushregs_
139ec     0C F0 07 F1 | 	add	ptra, #12
139f0     00 2C B1 FD | 	call	#_usbnew_spin2_get_key
139f4     45 00 00 FF 
139f8     74 E4 05 F1 | 	add	objptr, ##35444
139fc     F2 FA 61 FC | 	wrlong	result1, objptr
13a00                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then  
13a00     45 00 00 FF 
13a04     74 E4 85 F1 | 	sub	objptr, ##35444
13a08     00 FA 0D F2 | 	cmp	result1, #0 wz
13a0c     94 00 90 AD |  if_e	jmp	#LR__1581
13a10     45 00 00 FF 
13a14     74 E4 05 F1 | 	add	objptr, ##35444
13a18     F2 1C 02 FB | 	rdlong	arg06, objptr
13a1c     45 00 00 FF 
13a20     74 E4 85 F1 | 	sub	objptr, ##35444
13a24     00 00 40 FF 
13a28     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
13a2c     45 00 00 CF 
13a30     74 E4 05 C1 |  if_b	add	objptr, ##35444
13a34     F2 26 02 CB |  if_b	rdlong	local01, objptr
13a38     45 00 00 CF 
13a3c     74 E4 85 C1 |  if_b	sub	objptr, ##35444
13a40     13 27 E2 C8 |  if_b	getbyte	local01, local01, #0
13a44     E0 26 16 C2 |  if_b	cmp	local01, #224 wc
13a48     58 00 90 3D |  if_ae	jmp	#LR__1581
13a4c                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len) 
13a4c     50 00 00 FF 
13a50     3C E5 05 F1 | 	add	objptr, ##41276
13a54     F2 1C 02 FB | 	rdlong	arg06, objptr
13a58     50 00 00 FF 
13a5c     3C E5 85 F1 | 	sub	objptr, ##41276
13a60     01 1C 0E F2 | 	cmp	arg06, #1 wz
13a64     3C 00 90 5D |  if_ne	jmp	#LR__1580
13a68     52 00 00 FF 
13a6c     A4 E4 05 F1 | 	add	objptr, ##42148
13a70     F2 14 02 FB | 	rdlong	arg02, objptr
13a74     04 E4 85 F1 | 	sub	objptr, #4
13a78     F2 1A 02 FB | 	rdlong	arg05, objptr
13a7c     07 12 06 F6 | 	mov	arg01, #7
13a80     56 00 00 FF 
13a84     44 16 06 F6 | 	mov	arg03, ##44100
13a88     0C 18 C6 F9 | 	decod	arg04, #12
13a8c     01 1C 66 F6 | 	neg	arg06, #1
13a90     46 00 00 FF 
13a94     D4 E5 85 F1 | 	sub	objptr, ##36308
13a98     44 2F B1 FD | 	call	#_audio096_spin2_play
13a9c     0B 00 00 FF 
13aa0     CC E4 85 F1 | 	sub	objptr, ##5836
13aa4                 | LR__1580
13aa4                 | LR__1581
13aa4                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then
13aa4     45 00 00 FF 
13aa8     74 E4 05 F1 | 	add	objptr, ##35444
13aac     F2 1C 0A FB | 	rdlong	arg06, objptr wz
13ab0     45 00 00 FF 
13ab4     74 E4 85 F1 | 	sub	objptr, ##35444
13ab8     D4 01 90 AD |  if_e	jmp	#LR__1590
13abc     45 00 00 FF 
13ac0     74 E4 05 F1 | 	add	objptr, ##35444
13ac4     F2 1C 02 FB | 	rdlong	arg06, objptr
13ac8     45 00 00 FF 
13acc     74 E4 85 F1 | 	sub	objptr, ##35444
13ad0     00 00 40 FF 
13ad4     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
13ad8     45 00 00 CF 
13adc     74 E4 05 C1 |  if_b	add	objptr, ##35444
13ae0     F2 26 02 CB |  if_b	rdlong	local01, objptr
13ae4     45 00 00 CF 
13ae8     74 E4 85 C1 |  if_b	sub	objptr, ##35444
13aec     13 27 E2 C8 |  if_b	getbyte	local01, local01, #0
13af0     E0 26 16 C2 |  if_b	cmp	local01, #224 wc
13af4     98 01 90 3D |  if_ae	jmp	#LR__1590
13af8                 | '   if leds and 2 = 2 then 
13af8     52 00 00 FF 
13afc     E0 E4 05 F1 | 	add	objptr, ##42208
13b00     F2 26 0A FB | 	rdlong	local01, objptr wz
13b04     52 00 00 FF 
13b08     E0 E4 85 F1 | 	sub	objptr, ##42208
13b0c     58 01 90 AD |  if_e	jmp	#LR__1589
13b10                 | '     if key>96 andalso key<123 then
13b10     45 00 00 FF 
13b14     74 E4 05 F1 | 	add	objptr, ##35444
13b18     F2 26 02 FB | 	rdlong	local01, objptr
13b1c     45 00 00 FF 
13b20     74 E4 85 F1 | 	sub	objptr, ##35444
13b24     61 26 16 F2 | 	cmp	local01, #97 wc
13b28     3C 00 90 CD |  if_b	jmp	#LR__1582
13b2c     45 00 00 FF 
13b30     74 E4 05 F1 | 	add	objptr, ##35444
13b34     F2 26 02 FB | 	rdlong	local01, objptr
13b38     45 00 00 FF 
13b3c     74 E4 85 F1 | 	sub	objptr, ##35444
13b40     7B 26 16 F2 | 	cmp	local01, #123 wc
13b44     20 00 90 3D |  if_ae	jmp	#LR__1582
13b48     45 00 00 FF 
13b4c     74 E4 05 F1 | 	add	objptr, ##35444
13b50     F2 26 02 FB | 	rdlong	local01, objptr
13b54     20 26 86 F1 | 	sub	local01, #32
13b58     F2 26 62 FC | 	wrlong	local01, objptr
13b5c     45 00 00 FF 
13b60     74 E4 85 F1 | 	sub	objptr, ##35444
13b64     00 01 90 FD | 	jmp	#LR__1588
13b68                 | LR__1582
13b68     45 00 00 FF 
13b6c     74 E4 05 F1 | 	add	objptr, ##35444
13b70     F2 26 02 FB | 	rdlong	local01, objptr
13b74     45 00 00 FF 
13b78     74 E4 85 F1 | 	sub	objptr, ##35444
13b7c     41 26 16 F2 | 	cmp	local01, #65 wc
13b80     3C 00 90 CD |  if_b	jmp	#LR__1583
13b84     45 00 00 FF 
13b88     74 E4 05 F1 | 	add	objptr, ##35444
13b8c     F2 26 02 FB | 	rdlong	local01, objptr
13b90     45 00 00 FF 
13b94     74 E4 85 F1 | 	sub	objptr, ##35444
13b98     5B 26 16 F2 | 	cmp	local01, #91 wc
13b9c     20 00 90 3D |  if_ae	jmp	#LR__1583
13ba0     45 00 00 FF 
13ba4     74 E4 05 F1 | 	add	objptr, ##35444
13ba8     F2 26 02 FB | 	rdlong	local01, objptr
13bac     20 26 06 F1 | 	add	local01, #32
13bb0     F2 26 62 FC | 	wrlong	local01, objptr
13bb4     45 00 00 FF 
13bb8     74 E4 85 F1 | 	sub	objptr, ##35444
13bbc     A8 00 90 FD | 	jmp	#LR__1587
13bc0                 | LR__1583
13bc0     45 00 00 FF 
13bc4     74 E4 05 F1 | 	add	objptr, ##35444
13bc8     F2 26 02 FB | 	rdlong	local01, objptr
13bcc     45 00 00 FF 
13bd0     74 E4 85 F1 | 	sub	objptr, ##35444
13bd4     17 26 16 F2 | 	cmp	local01, #23 wc
13bd8     3C 00 90 CD |  if_b	jmp	#LR__1584
13bdc     45 00 00 FF 
13be0     74 E4 05 F1 | 	add	objptr, ##35444
13be4     F2 26 02 FB | 	rdlong	local01, objptr
13be8     45 00 00 FF 
13bec     74 E4 85 F1 | 	sub	objptr, ##35444
13bf0     20 26 16 F2 | 	cmp	local01, #32 wc
13bf4     20 00 90 3D |  if_ae	jmp	#LR__1584
13bf8     45 00 00 FF 
13bfc     74 E4 05 F1 | 	add	objptr, ##35444
13c00     F2 26 02 FB | 	rdlong	local01, objptr
13c04     09 26 86 F1 | 	sub	local01, #9
13c08     F2 26 62 FC | 	wrlong	local01, objptr
13c0c     45 00 00 FF 
13c10     74 E4 85 F1 | 	sub	objptr, ##35444
13c14     50 00 90 FD | 	jmp	#LR__1586
13c18                 | LR__1584
13c18     45 00 00 FF 
13c1c     74 E4 05 F1 | 	add	objptr, ##35444
13c20     F2 28 02 FB | 	rdlong	local02, objptr
13c24     45 00 00 FF 
13c28     74 E4 85 F1 | 	sub	objptr, ##35444
13c2c     0E 28 16 F2 | 	cmp	local02, #14 wc
13c30     34 00 90 CD |  if_b	jmp	#LR__1585
13c34     45 00 00 FF 
13c38     74 E4 05 F1 | 	add	objptr, ##35444
13c3c     F2 26 02 FB | 	rdlong	local01, objptr
13c40     45 00 00 FF 
13c44     74 E4 85 F1 | 	sub	objptr, ##35444
13c48     17 26 16 F2 | 	cmp	local01, #23 wc
13c4c     52 00 00 CF 
13c50     E4 E4 05 C1 |  if_b	add	objptr, ##42212
13c54     F2 28 02 CB |  if_b	rdlong	local02, objptr
13c58     27 28 06 C1 |  if_b	add	local02, #39
13c5c     F2 28 62 CC |  if_b	wrlong	local02, objptr
13c60     52 00 00 CF 
13c64     E4 E4 85 C1 |  if_b	sub	objptr, ##42212
13c68                 | LR__1585
13c68                 | LR__1586
13c68                 | LR__1587
13c68                 | LR__1588
13c68                 | LR__1589
13c68     45 00 00 FF 
13c6c     74 E4 05 F1 | 	add	objptr, ##35444
13c70     F2 12 02 FB | 	rdlong	arg01, objptr
13c74     45 00 00 FF 
13c78     74 E4 85 F1 | 	sub	objptr, ##35444
13c7c     34 FB B0 FD | 	call	#_scantochar
13c80     FD 12 02 F6 | 	mov	arg01, result1
13c84     08 54 B1 FD | 	call	#__system__Chr_S
13c88     A7 FA 61 FC | 	wrlong	result1, fp
13c8c     0C 00 90 FD | 	jmp	#LR__1591
13c90                 | LR__1590
13c90     B9 01 00 FF 
13c94     76 29 06 F6 | 	mov	local02, ##@LR__5928
13c98     A7 28 62 FC | 	wrlong	local02, fp
13c9c                 | LR__1591
13c9c     08 4E 05 F1 | 	add	fp, #8
13ca0     A7 3E 68 FC | 	wrlong	#31, fp
13ca4     08 4E 85 F1 | 	sub	fp, #8
13ca8     A7 12 02 F6 | 	mov	arg01, fp
13cac     28 9A BF FD | 	call	#_push
13cb0     A7 F0 03 F6 | 	mov	ptra, fp
13cb4     B2 00 A0 FD | 	call	#popregs_
13cb8                 | _do_inkey_ret
13cb8     2D 00 64 FD | 	ret
13cbc                 | 
13cbc                 | ' 
13cbc                 | ' ' ----------------  ink
13cbc                 | ' 
13cbc                 | ' sub do_ink
13cbc                 | _do_ink
13cbc     00 4A 05 F6 | 	mov	COUNT_, #0
13cc0     A8 00 A0 FD | 	call	#pushregs_
13cc4     0C F0 07 F1 | 	add	ptra, #12
13cc8     74 99 BF FD | 	call	#_pop
13ccc     FF 14 02 F6 | 	mov	arg02, result3
13cd0     A7 FA 61 FC | 	wrlong	result1, fp
13cd4     04 4E 05 F1 | 	add	fp, #4
13cd8     A7 FC 61 FC | 	wrlong	result2, fp
13cdc     04 4E 05 F1 | 	add	fp, #4
13ce0     A7 14 62 FC | 	wrlong	arg02, fp
13ce4     08 4E 85 F1 | 	sub	fp, #8
13ce8     A7 12 02 F6 | 	mov	arg01, fp
13cec     34 9B BF FD | 	call	#_converttoint
13cf0     37 00 00 FF 
13cf4     3C E4 05 F1 | 	add	objptr, ##28220
13cf8     F2 FA 61 FC | 	wrlong	result1, objptr
13cfc     04 E4 85 F1 | 	sub	objptr, #4
13d00     F2 14 02 FB | 	rdlong	arg02, objptr
13d04                 | ' 
13d04                 | ' write_color:=ff
13d04     36 00 00 FF 
13d08     F7 E5 85 F1 | 	sub	objptr, ##28151
13d0c     F2 FA 61 FC | 	wrlong	result1, objptr
13d10                 | ' write_background:=bb
13d10     04 E4 05 F1 | 	add	objptr, #4
13d14     F2 14 62 FC | 	wrlong	arg02, objptr
13d18     36 00 00 FF 
13d1c     F7 E5 05 F1 | 	add	objptr, ##28151
13d20     F2 12 02 FB | 	rdlong	arg01, objptr
13d24     37 00 00 FF 
13d28     3C E4 85 F1 | 	sub	objptr, ##28220
13d2c     D8 02 B1 FD | 	call	#_hg010b_spin2_setcursorcolor
13d30     A7 F0 03 F6 | 	mov	ptra, fp
13d34     B2 00 A0 FD | 	call	#popregs_
13d38                 | _do_ink_ret
13d38     2D 00 64 FD | 	ret
13d3c                 | 
13d3c                 | ' 
13d3c                 | ' ' ----------------  int
13d3c                 | ' 
13d3c                 | ' sub do_int
13d3c                 | _do_int
13d3c     02 4A 05 F6 | 	mov	COUNT_, #2
13d40     A8 00 A0 FD | 	call	#pushregs_
13d44     10 F0 07 F1 | 	add	ptra, #16
13d48     F4 98 BF FD | 	call	#_pop
13d4c     FE 26 02 F6 | 	mov	local01, result2
13d50     FF 28 02 F6 | 	mov	local02, result3
13d54     A7 FA 61 FC | 	wrlong	result1, fp
13d58     04 4E 05 F1 | 	add	fp, #4
13d5c     A7 26 62 FC | 	wrlong	local01, fp
13d60     04 4E 05 F1 | 	add	fp, #4
13d64     A7 28 62 FC | 	wrlong	local02, fp
13d68                 | ' 
13d68                 | ' t1=pop()
13d68                 | ' select case t1.result_type
13d68     08 4E 85 F1 | 	sub	fp, #8
13d6c     1E 28 0E F2 | 	cmp	local02, #30 wz
13d70     14 00 90 AD |  if_e	jmp	#LR__1600
13d74     1F 28 0E F2 | 	cmp	local02, #31 wz
13d78     20 00 90 AD |  if_e	jmp	#LR__1601
13d7c     2B 28 0E F2 | 	cmp	local02, #43 wz
13d80     34 00 90 AD |  if_e	jmp	#LR__1602
13d84     50 00 90 FD | 	jmp	#LR__1603
13d88                 | LR__1600
13d88     A7 12 02 FB | 	rdlong	arg01, fp
13d8c     00 14 06 F6 | 	mov	arg02, #0
13d90     FC 63 B1 FD | 	call	#__system___float_tointeger
13d94     A7 FA 61 FC | 	wrlong	result1, fp
13d98     3C 00 90 FD | 	jmp	#LR__1603
13d9c                 | LR__1601
13d9c     A7 12 02 FB | 	rdlong	arg01, fp
13da0     30 67 B1 FD | 	call	#__system____builtin_atof
13da4     FD 12 02 F6 | 	mov	arg01, result1
13da8     00 14 06 F6 | 	mov	arg02, #0
13dac     E0 63 B1 FD | 	call	#__system___float_tointeger
13db0     A7 FA 61 FC | 	wrlong	result1, fp
13db4     20 00 90 FD | 	jmp	#LR__1603
13db8                 | LR__1602
13db8     A7 12 02 FB | 	rdlong	arg01, fp
13dbc     F8 99 BF FD | 	call	#_convertstring
13dc0     FD 12 02 F6 | 	mov	arg01, result1
13dc4     0C 67 B1 FD | 	call	#__system____builtin_atof
13dc8     FD 12 02 F6 | 	mov	arg01, result1
13dcc     00 14 06 F6 | 	mov	arg02, #0
13dd0     BC 63 B1 FD | 	call	#__system___float_tointeger
13dd4     A7 FA 61 FC | 	wrlong	result1, fp
13dd8                 | LR__1603
13dd8     08 4E 05 F1 | 	add	fp, #8
13ddc     A7 38 68 FC | 	wrlong	#28, fp
13de0     08 4E 85 F1 | 	sub	fp, #8
13de4     A7 12 02 F6 | 	mov	arg01, fp
13de8     EC 98 BF FD | 	call	#_push
13dec     A7 F0 03 F6 | 	mov	ptra, fp
13df0     B2 00 A0 FD | 	call	#popregs_
13df4                 | _do_int_ret
13df4     2D 00 64 FD | 	ret
13df8                 | 
13df8                 | ' 
13df8                 | ' ' ----------------  input
13df8                 | ' 
13df8                 | ' sub do_input
13df8                 | _do_input
13df8     11 4A 05 F6 | 	mov	COUNT_, #17
13dfc     A8 00 A0 FD | 	call	#pushregs_
13e00     50 F1 07 F1 | 	add	ptra, #336
13e04     4A 00 00 FF 
13e08     80 E4 05 F1 | 	add	objptr, ##38016
13e0c     F2 FE 01 FB | 	rdlong	result3, objptr
13e10     FF FC 01 F6 | 	mov	result2, result3
13e14     01 FC 65 F0 | 	shl	result2, #1
13e18     FF FC 01 F1 | 	add	result2, result3
13e1c     02 FC 65 F0 | 	shl	result2, #2
13e20     03 00 00 FF 
13e24     04 E4 85 F1 | 	sub	objptr, ##1540
13e28     F2 FC 01 F1 | 	add	result2, objptr
13e2c     FE FC 01 FB | 	rdlong	result2, result2
13e30     08 4E 05 F1 | 	add	fp, #8
13e34     A7 FC 61 FC | 	wrlong	result2, fp
13e38                 | ' 
13e38                 | ' numpar=compiledline(lineptr_e).result.uresult
13e38                 | ' if numpar<1 orelse numpar>64 then print "In input: ";: printerror(39,runheader(0)) : return
13e38     08 4E 85 F1 | 	sub	fp, #8
13e3c     01 FC 15 F2 | 	cmp	result2, #1 wc
13e40     47 00 00 FF 
13e44     7C E4 85 F1 | 	sub	objptr, ##36476
13e48     14 00 90 CD |  if_b	jmp	#LR__1610
13e4c     08 4E 05 F1 | 	add	fp, #8
13e50     A7 FC 01 FB | 	rdlong	result2, fp
13e54     08 4E 85 F1 | 	sub	fp, #8
13e58     41 FC 15 F2 | 	cmp	result2, #65 wc
13e5c     50 00 90 CD |  if_b	jmp	#LR__1611
13e60                 | LR__1610
13e60     00 12 06 F6 | 	mov	arg01, #0
13e64     10 8D B1 FD | 	call	#__system___getiolock_0611
13e68     FD 12 02 F6 | 	mov	arg01, result1
13e6c     E0 2F B1 FD | 	call	#__system___lockmem
13e70     B9 01 00 FF 
13e74     77 15 06 F6 | 	mov	arg02, ##@LR__5929
13e78     00 12 06 F6 | 	mov	arg01, #0
13e7c     00 16 06 F6 | 	mov	arg03, #0
13e80     C0 3C B1 FD | 	call	#__system___basic_print_string
13e84     00 12 06 F6 | 	mov	arg01, #0
13e88     EC 8C B1 FD | 	call	#__system___getiolock_0611
13e8c     FD 00 68 FC | 	wrlong	#0, result1
13e90     50 00 00 FF 
13e94     F0 E4 05 F1 | 	add	objptr, ##41200
13e98     F2 14 02 FB | 	rdlong	arg02, objptr
13e9c     50 00 00 FF 
13ea0     F0 E4 85 F1 | 	sub	objptr, ##41200
13ea4     27 12 06 F6 | 	mov	arg01, #39
13ea8     88 F5 B0 FD | 	call	#_printerror
13eac     44 0B 90 FD | 	jmp	#LR__1660
13eb0                 | LR__1611
13eb0     08 4E 05 F1 | 	add	fp, #8
13eb4     A7 FC 01 FB | 	rdlong	result2, fp
13eb8     01 FC 85 F1 | 	sub	result2, #1
13ebc     28 4F 05 F1 | 	add	fp, #296
13ec0     A7 FC 61 FC | 	wrlong	result2, fp
13ec4     3C E4 05 F1 | 	add	objptr, #60
13ec8     F2 FC E1 FA | 	rdword	result2, objptr
13ecc     FE FC 51 F6 | 	abs	result2, result2 wc
13ed0     01 FC 45 F0 | 	shr	result2, #1
13ed4     FE FC 81 F6 | 	negc	result2, result2
13ed8     0C 4E 05 F1 | 	add	fp, #12
13edc     A7 FC 61 FC | 	wrlong	result2, fp
13ee0     02 E4 05 F1 | 	add	objptr, #2
13ee4     F2 26 C2 FA | 	rdbyte	local01, objptr
13ee8     3E E4 85 F1 | 	sub	objptr, #62
13eec     04 4E 05 F1 | 	add	fp, #4
13ef0     A7 26 62 FC | 	wrlong	local01, fp
13ef4     40 4F 85 F1 | 	sub	fp, #320
13ef8                 | ' i=numpar-1
13ef8                 | ' cpx=v.cursor_x/2 : cpy=v.cursor_y
13ef8                 | ' do
13ef8                 | LR__1612
13ef8     08 C9 BE FD | 	call	#_edit
13efc     A7 FA 61 FC | 	wrlong	result1, fp
13f00                 | ' 
13f00                 | '   line$=edit()
13f00                 | ' 
13f00                 | '   if v.cursor_y=cpy+1 then
13f00     3E E4 05 F1 | 	add	objptr, #62
13f04     F2 26 C2 FA | 	rdbyte	local01, objptr
13f08     3E E4 85 F1 | 	sub	objptr, #62
13f0c     40 4F 05 F1 | 	add	fp, #320
13f10     A7 16 02 FB | 	rdlong	arg03, fp
13f14     40 4F 85 F1 | 	sub	fp, #320
13f18     01 16 06 F1 | 	add	arg03, #1
13f1c     0B 27 0A F2 | 	cmp	local01, arg03 wz
13f20     6C 00 90 5D |  if_ne	jmp	#LR__1615
13f24     A7 26 02 FB | 	rdlong	local01, fp
13f28     13 13 02 F6 | 	mov	arg01, local01
13f2c     09 29 02 F6 | 	mov	local02, arg01
13f30     97 06 48 FB | 	callpa	#(@LR__1614-@LR__1613)>>2,fcache_load_ptr_
13f34                 | LR__1613
13f34     14 FB C9 FA | 	rdbyte	result1, local02 wz
13f38     01 28 06 51 |  if_ne	add	local02, #1
13f3c     F4 FF 9F 5D |  if_ne	jmp	#LR__1613
13f40                 | LR__1614
13f40     09 29 82 F1 | 	sub	local02, arg01
13f44     14 15 02 F6 | 	mov	arg02, local02
13f48     3C 4F 05 F1 | 	add	fp, #316
13f4c     A7 16 02 FB | 	rdlong	arg03, fp
13f50     3C 4F 85 F1 | 	sub	fp, #316
13f54     0B 15 82 F1 | 	sub	arg02, arg03
13f58     37 00 00 FF 
13f5c     34 E4 05 F1 | 	add	objptr, ##28212
13f60     F2 16 02 FB | 	rdlong	arg03, objptr
13f64     37 00 00 FF 
13f68     34 E4 85 F1 | 	sub	objptr, ##28212
13f6c     0B 15 02 F1 | 	add	arg02, arg03
13f70     13 13 02 F6 | 	mov	arg01, local01
13f74     DC 4F B1 FD | 	call	#__system__Right_S
13f78     FD 12 02 F6 | 	mov	arg01, result1
13f7c     DC 53 B1 FD | 	call	#__system__RTrim_S
13f80     FD 12 02 F6 | 	mov	arg01, result1
13f84     14 53 B1 FD | 	call	#__system__LTrim_S
13f88     A7 FA 61 FC | 	wrlong	result1, fp
13f8c     14 00 90 FD | 	jmp	#LR__1616
13f90                 | LR__1615
13f90     A7 12 02 FB | 	rdlong	arg01, fp
13f94     C4 53 B1 FD | 	call	#__system__RTrim_S
13f98     FD 12 02 F6 | 	mov	arg01, result1
13f9c     FC 52 B1 FD | 	call	#__system__LTrim_S
13fa0     A7 FA 61 FC | 	wrlong	result1, fp
13fa4                 | LR__1616
13fa4                 | '   do
13fa4                 | LR__1617
13fa4     A7 14 02 FB | 	rdlong	arg02, fp
13fa8     B9 01 00 FF 
13fac     82 17 06 F6 | 	mov	arg03, ##@LR__5930
13fb0     01 12 06 F6 | 	mov	arg01, #1
13fb4     5C 54 B1 FD | 	call	#__system__Instr
13fb8     0C 4E 05 F1 | 	add	fp, #12
13fbc     A7 FA 61 FC | 	wrlong	result1, fp
13fc0                 | '    comma=instr(1,line$,",")  
13fc0                 | '    if comma>0  then 
13fc0     0C 4E 85 F1 | 	sub	fp, #12
13fc4     01 FA 15 F2 | 	cmp	result1, #1 wc
13fc8     68 00 90 CD |  if_b	jmp	#LR__1620
13fcc     A7 12 02 FB | 	rdlong	arg01, fp
13fd0     0C 4E 05 F1 | 	add	fp, #12
13fd4     A7 14 02 FB | 	rdlong	arg02, fp
13fd8     0C 4E 85 F1 | 	sub	fp, #12
13fdc     01 14 86 F1 | 	sub	arg02, #1
13fe0     E8 4E B1 FD | 	call	#__system__Left_S
13fe4     04 4E 05 F1 | 	add	fp, #4
13fe8     A7 FA 61 FC | 	wrlong	result1, fp
13fec     04 4E 85 F1 | 	sub	fp, #4
13ff0     A7 26 02 FB | 	rdlong	local01, fp
13ff4     13 13 02 F6 | 	mov	arg01, local01
13ff8     09 29 02 F6 | 	mov	local02, arg01
13ffc     97 06 48 FB | 	callpa	#(@LR__1619-@LR__1618)>>2,fcache_load_ptr_
14000                 | LR__1618
14000     14 FB C9 FA | 	rdbyte	result1, local02 wz
14004     01 28 06 51 |  if_ne	add	local02, #1
14008     F4 FF 9F 5D |  if_ne	jmp	#LR__1618
1400c                 | LR__1619
1400c     09 29 82 F1 | 	sub	local02, arg01
14010     14 15 02 F6 | 	mov	arg02, local02
14014     0C 4E 05 F1 | 	add	fp, #12
14018     A7 16 02 FB | 	rdlong	arg03, fp
1401c     0C 4E 85 F1 | 	sub	fp, #12
14020     0B 15 82 F1 | 	sub	arg02, arg03
14024     13 13 02 F6 | 	mov	arg01, local01
14028     28 4F B1 FD | 	call	#__system__Right_S
1402c     A7 FA 61 FC | 	wrlong	result1, fp
14030     28 00 90 FD | 	jmp	#LR__1621
14034                 | LR__1620
14034     A7 12 02 FB | 	rdlong	arg01, fp
14038     20 53 B1 FD | 	call	#__system__RTrim_S
1403c     FD 12 02 F6 | 	mov	arg01, result1
14040     58 52 B1 FD | 	call	#__system__LTrim_S
14044     04 4E 05 F1 | 	add	fp, #4
14048     A7 FA 61 FC | 	wrlong	result1, fp
1404c     04 4E 85 F1 | 	sub	fp, #4
14050     B9 01 00 FF 
14054     84 27 06 F6 | 	mov	local01, ##@LR__5931
14058     A7 26 62 FC | 	wrlong	local01, fp
1405c                 | LR__1621
1405c     30 4F 05 F1 | 	add	fp, #304
14060     A7 26 02 FB | 	rdlong	local01, fp
14064     02 26 66 F0 | 	shl	local01, #2
14068     04 4F 85 F1 | 	sub	fp, #260
1406c     A7 26 02 F1 | 	add	local01, fp
14070     28 4E 85 F1 | 	sub	fp, #40
14074     A7 FA 01 FB | 	rdlong	result1, fp
14078     13 FB 61 FC | 	wrlong	result1, local01
1407c     2C 4F 05 F1 | 	add	fp, #300
14080     A7 26 02 FB | 	rdlong	local01, fp
14084     01 26 86 F1 | 	sub	local01, #1
14088     A7 26 62 FC | 	wrlong	local01, fp
1408c     30 4F 85 F1 | 	sub	fp, #304
14090     00 26 56 F2 | 	cmps	local01, #0 wc
14094     18 00 90 CD |  if_b	jmp	#LR__1622
14098     A7 12 02 FB | 	rdlong	arg01, fp
1409c     B9 01 00 FF 
140a0     85 15 06 F6 | 	mov	arg02, ##@LR__5932
140a4     D0 2D B1 FD | 	call	#__system___string_cmp
140a8     00 FA 0D F2 | 	cmp	result1, #0 wz
140ac     F4 FE 9F 5D |  if_ne	jmp	#LR__1617
140b0                 | LR__1622
140b0     30 4F 05 F1 | 	add	fp, #304
140b4     A7 26 02 FB | 	rdlong	local01, fp
140b8     30 4F 85 F1 | 	sub	fp, #304
140bc     00 26 56 F2 | 	cmps	local01, #0 wc
140c0     34 FE 9F 3D |  if_ae	jmp	#LR__1612
140c4                 | ' 
140c4                 | ' for i=0 to numpar-1
140c4     30 4F 05 F1 | 	add	fp, #304
140c8     A7 00 68 FC | 	wrlong	#0, fp
140cc     28 4F 85 F1 | 	sub	fp, #296
140d0     A7 2A 02 FB | 	rdlong	local03, fp
140d4     08 4E 85 F1 | 	sub	fp, #8
140d8                 | LR__1623
140d8     30 4F 05 F1 | 	add	fp, #304
140dc     A7 2C 02 FB | 	rdlong	local04, fp
140e0     30 4F 85 F1 | 	sub	fp, #304
140e4     16 27 02 F6 | 	mov	local01, local04
140e8     15 27 52 F2 | 	cmps	local01, local03 wc
140ec     04 09 90 3D |  if_ae	jmp	#LR__1659
140f0                 | ' 
140f0                 | '   if isnum(args(i)) and not isint(args(i)) then r=result_float 
140f0     30 4F 05 F1 | 	add	fp, #304
140f4     A7 16 02 FB | 	rdlong	arg03, fp
140f8     02 16 66 F0 | 	shl	arg03, #2
140fc     04 4F 85 F1 | 	sub	fp, #260
14100     A7 16 02 F1 | 	add	arg03, fp
14104     0B 13 02 FB | 	rdlong	arg01, arg03
14108     2C 4E 85 F1 | 	sub	fp, #44
1410c     9C 27 BF FD | 	call	#_isnum
14110     FD 2E 02 F6 | 	mov	local05, result1
14114     30 4F 05 F1 | 	add	fp, #304
14118     A7 16 02 FB | 	rdlong	arg03, fp
1411c     02 16 66 F0 | 	shl	arg03, #2
14120     04 4F 85 F1 | 	sub	fp, #260
14124     A7 30 02 F6 | 	mov	local06, fp
14128     A7 16 02 F1 | 	add	arg03, fp
1412c     0B 13 02 FB | 	rdlong	arg01, arg03
14130     2C 4E 85 F1 | 	sub	fp, #44
14134     60 2B BF FD | 	call	#_isint
14138     FD 2E 2A F5 | 	andn	local05, result1 wz
1413c     52 00 00 5F 
14140     10 E5 05 51 |  if_ne	add	objptr, ##42256
14144     F2 3C 68 5C |  if_ne	wrlong	#30, objptr
14148     52 00 00 5F 
1414c     10 E5 85 51 |  if_ne	sub	objptr, ##42256
14150                 | '   if isint(args(i)) then r=result_int 
14150     30 4F 05 F1 | 	add	fp, #304
14154     A7 2E 02 FB | 	rdlong	local05, fp
14158     02 2E 66 F0 | 	shl	local05, #2
1415c     04 4F 85 F1 | 	sub	fp, #260
14160     A7 2E 02 F1 | 	add	local05, fp
14164     17 13 02 FB | 	rdlong	arg01, local05
14168     2C 4E 85 F1 | 	sub	fp, #44
1416c     28 2B BF FD | 	call	#_isint
14170     00 FA 0D F2 | 	cmp	result1, #0 wz
14174     52 00 00 5F 
14178     10 E5 05 51 |  if_ne	add	objptr, ##42256
1417c     F2 38 68 5C |  if_ne	wrlong	#28, objptr
14180     52 00 00 5F 
14184     10 E5 85 51 |  if_ne	sub	objptr, ##42256
14188                 | '   if isdec(args(i)) then r=result_uint 
14188     30 4F 05 F1 | 	add	fp, #304
1418c     A7 2E 02 FB | 	rdlong	local05, fp
14190     02 2E 66 F0 | 	shl	local05, #2
14194     04 4F 85 F1 | 	sub	fp, #260
14198     A7 2E 02 F1 | 	add	local05, fp
1419c     17 13 02 FB | 	rdlong	arg01, local05
141a0     2C 4E 85 F1 | 	sub	fp, #44
141a4     94 2D BF FD | 	call	#_isdec
141a8     00 FA 0D F2 | 	cmp	result1, #0 wz
141ac     52 00 00 5F 
141b0     10 E5 05 51 |  if_ne	add	objptr, ##42256
141b4     F2 3A 68 5C |  if_ne	wrlong	#29, objptr
141b8     52 00 00 5F 
141bc     10 E5 85 51 |  if_ne	sub	objptr, ##42256
141c0                 | '   if not isnum(args(i)) then 
141c0     30 4F 05 F1 | 	add	fp, #304
141c4     A7 32 02 FB | 	rdlong	local07, fp
141c8     19 35 02 F6 | 	mov	local08, local07
141cc     02 34 66 F0 | 	shl	local08, #2
141d0     04 4F 85 F1 | 	sub	fp, #260
141d4     A7 36 02 F6 | 	mov	local09, fp
141d8     A7 34 02 F1 | 	add	local08, fp
141dc     1A 13 02 FB | 	rdlong	arg01, local08
141e0     2C 4E 85 F1 | 	sub	fp, #44
141e4     C4 26 BF FD | 	call	#_isnum
141e8     FD 2E 22 F6 | 	not	local05, result1
141ec     00 2E 0E F2 | 	cmp	local05, #0 wz
141f0     44 01 90 AD |  if_e	jmp	#LR__1628
141f4     52 00 00 FF 
141f8     10 E5 05 F1 | 	add	objptr, ##42256
141fc     F2 56 68 FC | 	wrlong	#43, objptr
14200     52 00 00 FF 
14204     10 E5 85 F1 | 	sub	objptr, ##42256
14208     04 4E 05 F1 | 	add	fp, #4
1420c     A7 12 02 FB | 	rdlong	arg01, fp
14210     04 4E 85 F1 | 	sub	fp, #4
14214     09 29 02 F6 | 	mov	local02, arg01
14218     97 06 48 FB | 	callpa	#(@LR__1625-@LR__1624)>>2,fcache_load_ptr_
1421c                 | LR__1624
1421c     14 FB C9 FA | 	rdbyte	result1, local02 wz
14220     01 28 06 51 |  if_ne	add	local02, #1
14224     F4 FF 9F 5D |  if_ne	jmp	#LR__1624
14228                 | LR__1625
14228     09 29 82 F1 | 	sub	local02, arg01
1422c     14 33 02 F6 | 	mov	local07, local02
14230     38 4F 05 F1 | 	add	fp, #312
14234     A7 32 62 FC | 	wrlong	local07, fp
14238     52 00 00 FF 
1423c     98 E4 05 F1 | 	add	objptr, ##42136
14240     F2 12 02 FB | 	rdlong	arg01, objptr
14244     19 13 82 F1 | 	sub	arg01, local07
14248     04 12 86 F1 | 	sub	arg01, #4
1424c     03 12 26 F5 | 	andn	arg01, #3
14250     F2 12 62 FC | 	wrlong	arg01, objptr
14254     52 00 00 FF 
14258     98 E4 85 F1 | 	sub	objptr, ##42136
1425c     A7 14 02 FB | 	rdlong	arg02, fp
14260     38 4F 85 F1 | 	sub	fp, #312
14264     6C F3 B0 FD | 	call	#_pslpoke
14268                 | '     pslpoke memtop,l
14268                 | '     for j=1 to l : pspoke memtop+3+j, asc(mid$(args(i),j,1)) : next j
14268     34 4F 05 F1 | 	add	fp, #308
1426c     A7 02 68 FC | 	wrlong	#1, fp
14270     04 4E 05 F1 | 	add	fp, #4
14274     A7 38 02 FB | 	rdlong	local10, fp
14278     38 4F 85 F1 | 	sub	fp, #312
1427c     01 38 06 F1 | 	add	local10, #1
14280                 | LR__1626
14280     34 4F 05 F1 | 	add	fp, #308
14284     A7 2E 02 FB | 	rdlong	local05, fp
14288     34 4F 85 F1 | 	sub	fp, #308
1428c     1C 2F 52 F2 | 	cmps	local05, local10 wc
14290     84 00 90 3D |  if_ae	jmp	#LR__1627
14294     52 00 00 FF 
14298     98 E4 05 F1 | 	add	objptr, ##42136
1429c     F2 32 02 FB | 	rdlong	local07, objptr
142a0     52 00 00 FF 
142a4     98 E4 85 F1 | 	sub	objptr, ##42136
142a8     03 32 06 F1 | 	add	local07, #3
142ac     34 4F 05 F1 | 	add	fp, #308
142b0     A7 3A 02 FB | 	rdlong	local11, fp
142b4     1D 33 02 F1 | 	add	local07, local11
142b8     04 4E 85 F1 | 	sub	fp, #4
142bc     A7 3C 02 FB | 	rdlong	local12, fp
142c0     02 3C 66 F0 | 	shl	local12, #2
142c4     04 4F 85 F1 | 	sub	fp, #260
142c8     A7 3E 02 F6 | 	mov	local13, fp
142cc     A7 3C 02 F1 | 	add	local12, fp
142d0     1E 13 02 FB | 	rdlong	arg01, local12
142d4     2C 4E 85 F1 | 	sub	fp, #44
142d8     01 40 06 F6 | 	mov	local14, #1
142dc     1D 15 02 F6 | 	mov	arg02, local11
142e0     01 16 06 F6 | 	mov	arg03, #1
142e4     FC 4C B1 FD | 	call	#__system__Mid_S
142e8     FD 14 C2 FA | 	rdbyte	arg02, result1
142ec     19 13 02 F6 | 	mov	arg01, local07
142f0     70 F3 B0 FD | 	call	#_pspoke
142f4     34 4F 05 F1 | 	add	fp, #308
142f8     A7 34 02 FB | 	rdlong	local08, fp
142fc     1A 33 02 F6 | 	mov	local07, local08
14300     1A 31 02 F6 | 	mov	local06, local08
14304     18 37 02 F6 | 	mov	local09, local06
14308     01 36 06 F1 | 	add	local09, #1
1430c     A7 36 62 FC | 	wrlong	local09, fp
14310     34 4F 85 F1 | 	sub	fp, #308
14314     68 FF 9F FD | 	jmp	#LR__1626
14318                 | LR__1627
14318     52 00 00 FF 
1431c     98 E4 05 F1 | 	add	objptr, ##42136
14320     F2 2E 02 FB | 	rdlong	local05, objptr
14324     52 00 00 FF 
14328     98 E4 85 F1 | 	sub	objptr, ##42136
1432c     10 4E 05 F1 | 	add	fp, #16
14330     A7 2E 62 FC | 	wrlong	local05, fp
14334     10 4E 85 F1 | 	sub	fp, #16
14338                 | LR__1628
14338     04 93 BF FD | 	call	#_pop
1433c     FE 2E 02 F6 | 	mov	local05, result2
14340     FF 42 02 F6 | 	mov	local15, result3
14344     1C 4E 05 F1 | 	add	fp, #28
14348     A7 FA 61 FC | 	wrlong	result1, fp
1434c     04 4E 05 F1 | 	add	fp, #4
14350     A7 2E 62 FC | 	wrlong	local05, fp
14354     04 4E 05 F1 | 	add	fp, #4
14358     A7 42 62 FC | 	wrlong	local15, fp
1435c     04 4E 85 F1 | 	sub	fp, #4
14360     A7 44 02 FB | 	rdlong	local16, fp
14364     0C 4E 85 F1 | 	sub	fp, #12
14368     A7 44 62 FC | 	wrlong	local16, fp
1436c                 | '   t1=pop() : vartype=t1.result.twowords(1)
1436c                 | '   select case vartype
1436c     14 4E 85 F1 | 	sub	fp, #20
14370     22 47 0A F6 | 	mov	local17, local16 wz
14374     64 00 90 AD |  if_e	jmp	#LR__1629
14378     00 47 0E F2 | 	cmp	local17, #256 wz
1437c     6C 00 90 AD |  if_e	jmp	#LR__1630
14380     01 47 0E F2 | 	cmp	local17, #257 wz
14384     74 00 90 AD |  if_e	jmp	#LR__1631
14388     02 47 0E F2 | 	cmp	local17, #258 wz
1438c     7C 00 90 AD |  if_e	jmp	#LR__1632
14390     03 47 0E F2 | 	cmp	local17, #259 wz
14394     84 00 90 AD |  if_e	jmp	#LR__1633
14398     04 47 0E F2 | 	cmp	local17, #260 wz
1439c     8C 00 90 AD |  if_e	jmp	#LR__1634
143a0     05 47 0E F2 | 	cmp	local17, #261 wz
143a4     94 00 90 AD |  if_e	jmp	#LR__1635
143a8     06 47 0E F2 | 	cmp	local17, #262 wz
143ac     9C 00 90 AD |  if_e	jmp	#LR__1636
143b0     07 47 0E F2 | 	cmp	local17, #263 wz
143b4     A4 00 90 AD |  if_e	jmp	#LR__1637
143b8     08 47 0E F2 | 	cmp	local17, #264 wz
143bc     AC 00 90 AD |  if_e	jmp	#LR__1638
143c0     09 47 0E F2 | 	cmp	local17, #265 wz
143c4     B4 00 90 AD |  if_e	jmp	#LR__1639
143c8     0A 47 0E F2 | 	cmp	local17, #266 wz
143cc     BC 00 90 AD |  if_e	jmp	#LR__1640
143d0     0B 47 0E F2 | 	cmp	local17, #267 wz
143d4     C4 00 90 AD |  if_e	jmp	#LR__1641
143d8     D0 00 90 FD | 	jmp	#LR__1642
143dc                 | LR__1629
143dc     18 4E 05 F1 | 	add	fp, #24
143e0     A7 18 68 FC | 	wrlong	#12, fp
143e4     18 4E 85 F1 | 	sub	fp, #24
143e8     CC 00 90 FD | 	jmp	#LR__1643
143ec                 | LR__1630
143ec     18 4E 05 F1 | 	add	fp, #24
143f0     A7 18 68 FC | 	wrlong	#12, fp
143f4     18 4E 85 F1 | 	sub	fp, #24
143f8     BC 00 90 FD | 	jmp	#LR__1643
143fc                 | LR__1631
143fc     18 4E 05 F1 | 	add	fp, #24
14400     A7 02 68 FC | 	wrlong	#1, fp
14404     18 4E 85 F1 | 	sub	fp, #24
14408     AC 00 90 FD | 	jmp	#LR__1643
1440c                 | LR__1632
1440c     18 4E 05 F1 | 	add	fp, #24
14410     A7 02 68 FC | 	wrlong	#1, fp
14414     18 4E 85 F1 | 	sub	fp, #24
14418     9C 00 90 FD | 	jmp	#LR__1643
1441c                 | LR__1633
1441c     18 4E 05 F1 | 	add	fp, #24
14420     A7 04 68 FC | 	wrlong	#2, fp
14424     18 4E 85 F1 | 	sub	fp, #24
14428     8C 00 90 FD | 	jmp	#LR__1643
1442c                 | LR__1634
1442c     18 4E 05 F1 | 	add	fp, #24
14430     A7 04 68 FC | 	wrlong	#2, fp
14434     18 4E 85 F1 | 	sub	fp, #24
14438     7C 00 90 FD | 	jmp	#LR__1643
1443c                 | LR__1635
1443c     18 4E 05 F1 | 	add	fp, #24
14440     A7 08 68 FC | 	wrlong	#4, fp
14444     18 4E 85 F1 | 	sub	fp, #24
14448     6C 00 90 FD | 	jmp	#LR__1643
1444c                 | LR__1636
1444c     18 4E 05 F1 | 	add	fp, #24
14450     A7 08 68 FC | 	wrlong	#4, fp
14454     18 4E 85 F1 | 	sub	fp, #24
14458     5C 00 90 FD | 	jmp	#LR__1643
1445c                 | LR__1637
1445c     18 4E 05 F1 | 	add	fp, #24
14460     A7 10 68 FC | 	wrlong	#8, fp
14464     18 4E 85 F1 | 	sub	fp, #24
14468     4C 00 90 FD | 	jmp	#LR__1643
1446c                 | LR__1638
1446c     18 4E 05 F1 | 	add	fp, #24
14470     A7 10 68 FC | 	wrlong	#8, fp
14474     18 4E 85 F1 | 	sub	fp, #24
14478     3C 00 90 FD | 	jmp	#LR__1643
1447c                 | LR__1639
1447c     18 4E 05 F1 | 	add	fp, #24
14480     A7 0C 68 FC | 	wrlong	#6, fp
14484     18 4E 85 F1 | 	sub	fp, #24
14488     2C 00 90 FD | 	jmp	#LR__1643
1448c                 | LR__1640
1448c     18 4E 05 F1 | 	add	fp, #24
14490     A7 10 68 FC | 	wrlong	#8, fp
14494     18 4E 85 F1 | 	sub	fp, #24
14498     1C 00 90 FD | 	jmp	#LR__1643
1449c                 | LR__1641
1449c     18 4E 05 F1 | 	add	fp, #24
144a0     A7 0A 68 FC | 	wrlong	#5, fp
144a4     18 4E 85 F1 | 	sub	fp, #24
144a8     0C 00 90 FD | 	jmp	#LR__1643
144ac                 | LR__1642
144ac     18 4E 05 F1 | 	add	fp, #24
144b0     A7 18 68 FC | 	wrlong	#12, fp
144b4     18 4E 85 F1 | 	sub	fp, #24
144b8                 | LR__1643
144b8                 | '   if esize=12 andalso t1.result.uresult<$80000 then
144b8     18 4E 05 F1 | 	add	fp, #24
144bc     A7 44 02 FB | 	rdlong	local16, fp
144c0     18 4E 85 F1 | 	sub	fp, #24
144c4     0C 44 0E F2 | 	cmp	local16, #12 wz
144c8     74 01 90 5D |  if_ne	jmp	#LR__1648
144cc     1C 4E 05 F1 | 	add	fp, #28
144d0     A7 32 02 FB | 	rdlong	local07, fp
144d4     1C 4E 85 F1 | 	sub	fp, #28
144d8     00 04 00 FF 
144dc     00 32 16 F2 | 	cmp	local07, ##524288 wc
144e0     5C 01 90 3D |  if_ae	jmp	#LR__1648
144e4                 | '     if r=result_int then lpoke t1.result.uresult, val%(args(i))
144e4     52 00 00 FF 
144e8     10 E5 05 F1 | 	add	objptr, ##42256
144ec     F2 44 02 FB | 	rdlong	local16, objptr
144f0     52 00 00 FF 
144f4     10 E5 85 F1 | 	sub	objptr, ##42256
144f8     1C 44 0E F2 | 	cmp	local16, #28 wz
144fc     38 00 90 5D |  if_ne	jmp	#LR__1644
14500     1C 4E 05 F1 | 	add	fp, #28
14504     A7 44 02 FB | 	rdlong	local16, fp
14508     14 4F 05 F1 | 	add	fp, #276
1450c     A7 32 02 FB | 	rdlong	local07, fp
14510     19 35 02 F6 | 	mov	local08, local07
14514     02 34 66 F0 | 	shl	local08, #2
14518     04 4F 85 F1 | 	sub	fp, #260
1451c     A7 36 02 F6 | 	mov	local09, fp
14520     A7 34 02 F1 | 	add	local08, fp
14524     1A 13 02 FB | 	rdlong	arg01, local08
14528     00 14 06 F6 | 	mov	arg02, #0
1452c     2C 4E 85 F1 | 	sub	fp, #44
14530     0C 5E B1 FD | 	call	#__system____builtin_atoi
14534     22 FB 61 FC | 	wrlong	result1, local16
14538                 | LR__1644
14538                 | '     if r=result_uint then lpoke t1.result.uresult, val%(args(i))
14538     52 00 00 FF 
1453c     10 E5 05 F1 | 	add	objptr, ##42256
14540     F2 44 02 FB | 	rdlong	local16, objptr
14544     52 00 00 FF 
14548     10 E5 85 F1 | 	sub	objptr, ##42256
1454c     1D 44 0E F2 | 	cmp	local16, #29 wz
14550     38 00 90 5D |  if_ne	jmp	#LR__1645
14554     1C 4E 05 F1 | 	add	fp, #28
14558     A7 44 02 FB | 	rdlong	local16, fp
1455c     14 4F 05 F1 | 	add	fp, #276
14560     A7 32 02 FB | 	rdlong	local07, fp
14564     19 35 02 F6 | 	mov	local08, local07
14568     02 34 66 F0 | 	shl	local08, #2
1456c     04 4F 85 F1 | 	sub	fp, #260
14570     A7 36 02 F6 | 	mov	local09, fp
14574     A7 34 02 F1 | 	add	local08, fp
14578     1A 13 02 FB | 	rdlong	arg01, local08
1457c     00 14 06 F6 | 	mov	arg02, #0
14580     2C 4E 85 F1 | 	sub	fp, #44
14584     B8 5D B1 FD | 	call	#__system____builtin_atoi
14588     22 FB 61 FC | 	wrlong	result1, local16
1458c                 | LR__1645
1458c                 | '     if r=result_float then fval=val(args(i)): lpoke t1.result.uresult,lpeek(varptr(fval))
1458c     52 00 00 FF 
14590     10 E5 05 F1 | 	add	objptr, ##42256
14594     F2 44 02 FB | 	rdlong	local16, objptr
14598     52 00 00 FF 
1459c     10 E5 85 F1 | 	sub	objptr, ##42256
145a0     1E 44 0E F2 | 	cmp	local16, #30 wz
145a4     3C 00 90 5D |  if_ne	jmp	#LR__1646
145a8     30 4F 05 F1 | 	add	fp, #304
145ac     A7 32 02 FB | 	rdlong	local07, fp
145b0     02 32 66 F0 | 	shl	local07, #2
145b4     04 4F 85 F1 | 	sub	fp, #260
145b8     A7 34 02 F6 | 	mov	local08, fp
145bc     A7 32 02 F1 | 	add	local07, fp
145c0     19 13 02 FB | 	rdlong	arg01, local07
145c4     2C 4E 85 F1 | 	sub	fp, #44
145c8     08 5F B1 FD | 	call	#__system____builtin_atof
145cc     28 4E 05 F1 | 	add	fp, #40
145d0     A7 FA 61 FC | 	wrlong	result1, fp
145d4     0C 4E 85 F1 | 	sub	fp, #12
145d8     A7 44 02 FB | 	rdlong	local16, fp
145dc     1C 4E 85 F1 | 	sub	fp, #28
145e0     22 FB 61 FC | 	wrlong	result1, local16
145e4                 | LR__1646
145e4                 | '     if r=result_string2 then lpoke t1.result.uresult,stringaddr
145e4     52 00 00 FF 
145e8     10 E5 05 F1 | 	add	objptr, ##42256
145ec     F2 44 02 FB | 	rdlong	local16, objptr
145f0     52 00 00 FF 
145f4     10 E5 85 F1 | 	sub	objptr, ##42256
145f8     2B 44 0E F2 | 	cmp	local16, #43 wz
145fc     18 00 90 5D |  if_ne	jmp	#LR__1647
14600     1C 4E 05 F1 | 	add	fp, #28
14604     A7 12 02 FB | 	rdlong	arg01, fp
14608     0C 4E 85 F1 | 	sub	fp, #12
1460c     A7 14 02 FB | 	rdlong	arg02, fp
14610     10 4E 85 F1 | 	sub	fp, #16
14614     09 15 62 FC | 	wrlong	arg02, arg01
14618                 | LR__1647
14618     1C 4E 05 F1 | 	add	fp, #28
1461c     A7 12 02 FB | 	rdlong	arg01, fp
14620     1C 4E 85 F1 | 	sub	fp, #28
14624     08 12 06 F1 | 	add	arg01, #8
14628     52 00 00 FF 
1462c     10 E5 05 F1 | 	add	objptr, ##42256
14630     F2 14 02 FB | 	rdlong	arg02, objptr
14634     52 00 00 FF 
14638     10 E5 85 F1 | 	sub	objptr, ##42256
1463c     09 15 62 FC | 	wrlong	arg02, arg01
14640                 | LR__1648
14640                 | '   if esize=12 andalso t1.result.uresult>=$80000 then
14640     18 4E 05 F1 | 	add	fp, #24
14644     A7 44 02 FB | 	rdlong	local16, fp
14648     18 4E 85 F1 | 	sub	fp, #24
1464c     0C 44 0E F2 | 	cmp	local16, #12 wz
14650     94 01 90 5D |  if_ne	jmp	#LR__1653
14654     1C 4E 05 F1 | 	add	fp, #28
14658     A7 32 02 FB | 	rdlong	local07, fp
1465c     1C 4E 85 F1 | 	sub	fp, #28
14660     00 04 00 FF 
14664     00 32 16 F2 | 	cmp	local07, ##524288 wc
14668     7C 01 90 CD |  if_b	jmp	#LR__1653
1466c                 | '     if r=result_int then pslpoke t1.result.uresult, val%(args(i))
1466c     52 00 00 FF 
14670     10 E5 05 F1 | 	add	objptr, ##42256
14674     F2 44 02 FB | 	rdlong	local16, objptr
14678     52 00 00 FF 
1467c     10 E5 85 F1 | 	sub	objptr, ##42256
14680     1C 44 0E F2 | 	cmp	local16, #28 wz
14684     40 00 90 5D |  if_ne	jmp	#LR__1649
14688     1C 4E 05 F1 | 	add	fp, #28
1468c     A7 44 02 FB | 	rdlong	local16, fp
14690     14 4F 05 F1 | 	add	fp, #276
14694     A7 32 02 FB | 	rdlong	local07, fp
14698     19 35 02 F6 | 	mov	local08, local07
1469c     02 34 66 F0 | 	shl	local08, #2
146a0     04 4F 85 F1 | 	sub	fp, #260
146a4     A7 36 02 F6 | 	mov	local09, fp
146a8     A7 34 02 F1 | 	add	local08, fp
146ac     1A 13 02 FB | 	rdlong	arg01, local08
146b0     00 14 06 F6 | 	mov	arg02, #0
146b4     2C 4E 85 F1 | 	sub	fp, #44
146b8     84 5C B1 FD | 	call	#__system____builtin_atoi
146bc     FD 14 02 F6 | 	mov	arg02, result1
146c0     22 13 02 F6 | 	mov	arg01, local16
146c4     0C EF B0 FD | 	call	#_pslpoke
146c8                 | LR__1649
146c8                 | '     if r=result_uint then pslpoke t1.result.uresult, val%(args(i))
146c8     52 00 00 FF 
146cc     10 E5 05 F1 | 	add	objptr, ##42256
146d0     F2 44 02 FB | 	rdlong	local16, objptr
146d4     52 00 00 FF 
146d8     10 E5 85 F1 | 	sub	objptr, ##42256
146dc     1D 44 0E F2 | 	cmp	local16, #29 wz
146e0     40 00 90 5D |  if_ne	jmp	#LR__1650
146e4     1C 4E 05 F1 | 	add	fp, #28
146e8     A7 44 02 FB | 	rdlong	local16, fp
146ec     14 4F 05 F1 | 	add	fp, #276
146f0     A7 32 02 FB | 	rdlong	local07, fp
146f4     19 35 02 F6 | 	mov	local08, local07
146f8     02 34 66 F0 | 	shl	local08, #2
146fc     04 4F 85 F1 | 	sub	fp, #260
14700     A7 36 02 F6 | 	mov	local09, fp
14704     A7 34 02 F1 | 	add	local08, fp
14708     1A 13 02 FB | 	rdlong	arg01, local08
1470c     00 14 06 F6 | 	mov	arg02, #0
14710     2C 4E 85 F1 | 	sub	fp, #44
14714     28 5C B1 FD | 	call	#__system____builtin_atoi
14718     FD 14 02 F6 | 	mov	arg02, result1
1471c     22 13 02 F6 | 	mov	arg01, local16
14720     B0 EE B0 FD | 	call	#_pslpoke
14724                 | LR__1650
14724                 | '     if r=result_float then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
14724     52 00 00 FF 
14728     10 E5 05 F1 | 	add	objptr, ##42256
1472c     F2 44 02 FB | 	rdlong	local16, objptr
14730     52 00 00 FF 
14734     10 E5 85 F1 | 	sub	objptr, ##42256
14738     1E 44 0E F2 | 	cmp	local16, #30 wz
1473c     4C 00 90 5D |  if_ne	jmp	#LR__1651
14740     30 4F 05 F1 | 	add	fp, #304
14744     A7 32 02 FB | 	rdlong	local07, fp
14748     02 32 66 F0 | 	shl	local07, #2
1474c     04 4F 85 F1 | 	sub	fp, #260
14750     A7 34 02 F6 | 	mov	local08, fp
14754     A7 32 02 F1 | 	add	local07, fp
14758     19 13 02 FB | 	rdlong	arg01, local07
1475c     2C 4E 85 F1 | 	sub	fp, #44
14760     70 5D B1 FD | 	call	#__system____builtin_atof
14764     28 4E 05 F1 | 	add	fp, #40
14768     A7 FA 61 FC | 	wrlong	result1, fp
1476c     0C 4E 85 F1 | 	sub	fp, #12
14770     A7 44 02 FB | 	rdlong	local16, fp
14774     0C 4E 05 F1 | 	add	fp, #12
14778     A7 12 02 F6 | 	mov	arg01, fp
1477c     28 4E 85 F1 | 	sub	fp, #40
14780     09 15 02 FB | 	rdlong	arg02, arg01
14784     22 13 02 F6 | 	mov	arg01, local16
14788     48 EE B0 FD | 	call	#_pslpoke
1478c                 | LR__1651
1478c                 | '     if r=result_string2 then pslpoke t1.result.uresult,stringaddr
1478c     52 00 00 FF 
14790     10 E5 05 F1 | 	add	objptr, ##42256
14794     F2 44 02 FB | 	rdlong	local16, objptr
14798     52 00 00 FF 
1479c     10 E5 85 F1 | 	sub	objptr, ##42256
147a0     2B 44 0E F2 | 	cmp	local16, #43 wz
147a4     18 00 90 5D |  if_ne	jmp	#LR__1652
147a8     1C 4E 05 F1 | 	add	fp, #28
147ac     A7 12 02 FB | 	rdlong	arg01, fp
147b0     0C 4E 85 F1 | 	sub	fp, #12
147b4     A7 14 02 FB | 	rdlong	arg02, fp
147b8     10 4E 85 F1 | 	sub	fp, #16
147bc     14 EE B0 FD | 	call	#_pslpoke
147c0                 | LR__1652
147c0     1C 4E 05 F1 | 	add	fp, #28
147c4     A7 12 02 FB | 	rdlong	arg01, fp
147c8     1C 4E 85 F1 | 	sub	fp, #28
147cc     08 12 06 F1 | 	add	arg01, #8
147d0     52 00 00 FF 
147d4     10 E5 05 F1 | 	add	objptr, ##42256
147d8     F2 14 02 FB | 	rdlong	arg02, objptr
147dc     52 00 00 FF 
147e0     10 E5 85 F1 | 	sub	objptr, ##42256
147e4     EC ED B0 FD | 	call	#_pslpoke
147e8                 | LR__1653
147e8                 | '   if esize=5 andalso r=result_string2 then pslpoke t1.result.uresult,stringaddr
147e8     18 4E 05 F1 | 	add	fp, #24
147ec     A7 44 02 FB | 	rdlong	local16, fp
147f0     18 4E 85 F1 | 	sub	fp, #24
147f4     05 44 0E F2 | 	cmp	local16, #5 wz
147f8     52 00 00 AF 
147fc     10 E5 05 A1 |  if_e	add	objptr, ##42256
14800     F2 42 02 AB |  if_e	rdlong	local15, objptr
14804     52 00 00 AF 
14808     10 E5 85 A1 |  if_e	sub	objptr, ##42256
1480c     2B 42 0E A2 |  if_e	cmp	local15, #43 wz
14810     18 00 90 5D |  if_ne	jmp	#LR__1654
14814     1C 4E 05 F1 | 	add	fp, #28
14818     A7 12 02 FB | 	rdlong	arg01, fp
1481c     0C 4E 85 F1 | 	sub	fp, #12
14820     A7 14 02 FB | 	rdlong	arg02, fp
14824     10 4E 85 F1 | 	sub	fp, #16
14828     A8 ED B0 FD | 	call	#_pslpoke
1482c                 | LR__1654
1482c                 | '   if esize=4 andalso r<>result_string2 then pslpoke t1.result.uresult,val%(args(i))
1482c     18 4E 05 F1 | 	add	fp, #24
14830     A7 44 02 FB | 	rdlong	local16, fp
14834     18 4E 85 F1 | 	sub	fp, #24
14838     04 44 0E F2 | 	cmp	local16, #4 wz
1483c     54 00 90 5D |  if_ne	jmp	#LR__1655
14840     52 00 00 FF 
14844     10 E5 05 F1 | 	add	objptr, ##42256
14848     F2 42 02 FB | 	rdlong	local15, objptr
1484c     52 00 00 FF 
14850     10 E5 85 F1 | 	sub	objptr, ##42256
14854     2B 42 0E F2 | 	cmp	local15, #43 wz
14858     38 00 90 AD |  if_e	jmp	#LR__1655
1485c     1C 4E 05 F1 | 	add	fp, #28
14860     A7 44 02 FB | 	rdlong	local16, fp
14864     14 4F 05 F1 | 	add	fp, #276
14868     A7 34 02 FB | 	rdlong	local08, fp
1486c     02 34 66 F0 | 	shl	local08, #2
14870     04 4F 85 F1 | 	sub	fp, #260
14874     A7 34 02 F1 | 	add	local08, fp
14878     1A 13 02 FB | 	rdlong	arg01, local08
1487c     00 14 06 F6 | 	mov	arg02, #0
14880     2C 4E 85 F1 | 	sub	fp, #44
14884     B8 5A B1 FD | 	call	#__system____builtin_atoi
14888     FD 14 02 F6 | 	mov	arg02, result1
1488c     22 13 02 F6 | 	mov	arg01, local16
14890     40 ED B0 FD | 	call	#_pslpoke
14894                 | LR__1655
14894                 | '   if esize=2 andalso r<>result_string2 then psdpoke t1.result.uresult,val%(args(i))
14894     18 4E 05 F1 | 	add	fp, #24
14898     A7 44 02 FB | 	rdlong	local16, fp
1489c     18 4E 85 F1 | 	sub	fp, #24
148a0     02 44 0E F2 | 	cmp	local16, #2 wz
148a4     54 00 90 5D |  if_ne	jmp	#LR__1656
148a8     52 00 00 FF 
148ac     10 E5 05 F1 | 	add	objptr, ##42256
148b0     F2 42 02 FB | 	rdlong	local15, objptr
148b4     52 00 00 FF 
148b8     10 E5 85 F1 | 	sub	objptr, ##42256
148bc     2B 42 0E F2 | 	cmp	local15, #43 wz
148c0     38 00 90 AD |  if_e	jmp	#LR__1656
148c4     1C 4E 05 F1 | 	add	fp, #28
148c8     A7 44 02 FB | 	rdlong	local16, fp
148cc     14 4F 05 F1 | 	add	fp, #276
148d0     A7 34 02 FB | 	rdlong	local08, fp
148d4     02 34 66 F0 | 	shl	local08, #2
148d8     04 4F 85 F1 | 	sub	fp, #260
148dc     A7 34 02 F1 | 	add	local08, fp
148e0     1A 13 02 FB | 	rdlong	arg01, local08
148e4     00 14 06 F6 | 	mov	arg02, #0
148e8     2C 4E 85 F1 | 	sub	fp, #44
148ec     50 5A B1 FD | 	call	#__system____builtin_atoi
148f0     FD 14 02 F6 | 	mov	arg02, result1
148f4     22 13 02 F6 | 	mov	arg01, local16
148f8     20 ED B0 FD | 	call	#_psdpoke
148fc                 | LR__1656
148fc                 | '   if esize=1 andalso r<>result_string2 then pspoke t1.result.uresult,val%(args(i))
148fc     18 4E 05 F1 | 	add	fp, #24
14900     A7 44 02 FB | 	rdlong	local16, fp
14904     18 4E 85 F1 | 	sub	fp, #24
14908     01 44 0E F2 | 	cmp	local16, #1 wz
1490c     54 00 90 5D |  if_ne	jmp	#LR__1657
14910     52 00 00 FF 
14914     10 E5 05 F1 | 	add	objptr, ##42256
14918     F2 42 02 FB | 	rdlong	local15, objptr
1491c     52 00 00 FF 
14920     10 E5 85 F1 | 	sub	objptr, ##42256
14924     2B 42 0E F2 | 	cmp	local15, #43 wz
14928     38 00 90 AD |  if_e	jmp	#LR__1657
1492c     1C 4E 05 F1 | 	add	fp, #28
14930     A7 44 02 FB | 	rdlong	local16, fp
14934     14 4F 05 F1 | 	add	fp, #276
14938     A7 34 02 FB | 	rdlong	local08, fp
1493c     02 34 66 F0 | 	shl	local08, #2
14940     04 4F 85 F1 | 	sub	fp, #260
14944     A7 34 02 F1 | 	add	local08, fp
14948     1A 13 02 FB | 	rdlong	arg01, local08
1494c     00 14 06 F6 | 	mov	arg02, #0
14950     2C 4E 85 F1 | 	sub	fp, #44
14954     E8 59 B1 FD | 	call	#__system____builtin_atoi
14958     FD 14 02 F6 | 	mov	arg02, result1
1495c     22 13 02 F6 | 	mov	arg01, local16
14960     00 ED B0 FD | 	call	#_pspoke
14964                 | LR__1657
14964                 | '   if esize=6 andalso r<>result_string2 then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
14964     18 4E 05 F1 | 	add	fp, #24
14968     A7 44 02 FB | 	rdlong	local16, fp
1496c     18 4E 85 F1 | 	sub	fp, #24
14970     06 44 0E F2 | 	cmp	local16, #6 wz
14974     64 00 90 5D |  if_ne	jmp	#LR__1658
14978     52 00 00 FF 
1497c     10 E5 05 F1 | 	add	objptr, ##42256
14980     F2 42 02 FB | 	rdlong	local15, objptr
14984     52 00 00 FF 
14988     10 E5 85 F1 | 	sub	objptr, ##42256
1498c     2B 42 0E F2 | 	cmp	local15, #43 wz
14990     48 00 90 AD |  if_e	jmp	#LR__1658
14994     30 4F 05 F1 | 	add	fp, #304
14998     A7 32 02 FB | 	rdlong	local07, fp
1499c     02 32 66 F0 | 	shl	local07, #2
149a0     04 4F 85 F1 | 	sub	fp, #260
149a4     A7 32 02 F1 | 	add	local07, fp
149a8     19 13 02 FB | 	rdlong	arg01, local07
149ac     2C 4E 85 F1 | 	sub	fp, #44
149b0     20 5B B1 FD | 	call	#__system____builtin_atof
149b4     28 4E 05 F1 | 	add	fp, #40
149b8     A7 FA 61 FC | 	wrlong	result1, fp
149bc     0C 4E 85 F1 | 	sub	fp, #12
149c0     A7 44 02 FB | 	rdlong	local16, fp
149c4     0C 4E 05 F1 | 	add	fp, #12
149c8     A7 12 02 F6 | 	mov	arg01, fp
149cc     28 4E 85 F1 | 	sub	fp, #40
149d0     09 15 02 FB | 	rdlong	arg02, arg01
149d4     22 13 02 F6 | 	mov	arg01, local16
149d8     F8 EB B0 FD | 	call	#_pslpoke
149dc                 | LR__1658
149dc     30 4F 05 F1 | 	add	fp, #304
149e0     A7 42 02 FB | 	rdlong	local15, fp
149e4     01 42 06 F1 | 	add	local15, #1
149e8     A7 42 62 FC | 	wrlong	local15, fp
149ec     30 4F 85 F1 | 	sub	fp, #304
149f0     E4 F6 9F FD | 	jmp	#LR__1623
149f4                 | LR__1659
149f4                 | LR__1660
149f4     A7 F0 03 F6 | 	mov	ptra, fp
149f8     B2 00 A0 FD | 	call	#popregs_
149fc                 | _do_input_ret
149fc     2D 00 64 FD | 	ret
14a00                 | 
14a00                 | ' 
14a00                 | ' ' ----------------  left$
14a00                 | ' 
14a00                 | ' sub do_left
14a00                 | _do_left
14a00     00 4A 05 F6 | 	mov	COUNT_, #0
14a04     A8 00 A0 FD | 	call	#pushregs_
14a08     14 F0 07 F1 | 	add	ptra, #20
14a0c     4A 00 00 FF 
14a10     80 E4 05 F1 | 	add	objptr, ##38016
14a14     F2 16 02 FB | 	rdlong	arg03, objptr
14a18     0B 15 02 F6 | 	mov	arg02, arg03
14a1c     01 14 66 F0 | 	shl	arg02, #1
14a20     0B 15 02 F1 | 	add	arg02, arg03
14a24     02 14 66 F0 | 	shl	arg02, #2
14a28     03 00 00 FF 
14a2c     04 E4 85 F1 | 	sub	objptr, ##1540
14a30     F2 14 02 F1 | 	add	arg02, objptr
14a34     0A 17 02 FB | 	rdlong	arg03, arg02
14a38     0C 4E 05 F1 | 	add	fp, #12
14a3c     A7 16 62 FC | 	wrlong	arg03, fp
14a40                 | ' 
14a40                 | ' numpar=compiledline(lineptr_e).result.uresult
14a40                 | ' if numpar<>2  then print "left$: "; : printerror(39) : return
14a40     0C 4E 85 F1 | 	sub	fp, #12
14a44     02 16 0E F2 | 	cmp	arg03, #2 wz
14a48     47 00 00 FF 
14a4c     7C E4 85 F1 | 	sub	objptr, ##36476
14a50     40 00 90 AD |  if_e	jmp	#LR__1670
14a54     00 12 06 F6 | 	mov	arg01, #0
14a58     1C 81 B1 FD | 	call	#__system___getiolock_0611
14a5c     FD 12 02 F6 | 	mov	arg01, result1
14a60     EC 23 B1 FD | 	call	#__system___lockmem
14a64     B9 01 00 FF 
14a68     86 15 06 F6 | 	mov	arg02, ##@LR__5933
14a6c     00 12 06 F6 | 	mov	arg01, #0
14a70     00 16 06 F6 | 	mov	arg03, #0
14a74     CC 30 B1 FD | 	call	#__system___basic_print_string
14a78     00 12 06 F6 | 	mov	arg01, #0
14a7c     F8 80 B1 FD | 	call	#__system___getiolock_0611
14a80     FD 00 68 FC | 	wrlong	#0, result1
14a84     27 12 06 F6 | 	mov	arg01, #39
14a88     00 14 06 F6 | 	mov	arg02, #0
14a8c     A4 E9 B0 FD | 	call	#_printerror
14a90     EC 00 90 FD | 	jmp	#LR__1673
14a94                 | LR__1670
14a94     A8 8B BF FD | 	call	#_pop
14a98     FF 16 02 F6 | 	mov	arg03, result3
14a9c     A7 FA 61 FC | 	wrlong	result1, fp
14aa0     04 4E 05 F1 | 	add	fp, #4
14aa4     A7 FC 61 FC | 	wrlong	result2, fp
14aa8     04 4E 05 F1 | 	add	fp, #4
14aac     A7 16 62 FC | 	wrlong	arg03, fp
14ab0     08 4E 85 F1 | 	sub	fp, #8
14ab4     A7 12 02 F6 | 	mov	arg01, fp
14ab8     68 8D BF FD | 	call	#_converttoint
14abc     FD 16 02 F6 | 	mov	arg03, result1
14ac0     10 4E 05 F1 | 	add	fp, #16
14ac4     A7 16 62 FC | 	wrlong	arg03, fp
14ac8     10 4E 85 F1 | 	sub	fp, #16
14acc     70 8B BF FD | 	call	#_pop
14ad0     FF 16 02 F6 | 	mov	arg03, result3
14ad4     A7 FA 61 FC | 	wrlong	result1, fp
14ad8     04 4E 05 F1 | 	add	fp, #4
14adc     A7 FC 61 FC | 	wrlong	result2, fp
14ae0     04 4E 05 F1 | 	add	fp, #4
14ae4     A7 16 62 FC | 	wrlong	arg03, fp
14ae8                 | ' t1=pop() : arg=converttoint(t1)
14ae8                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
14ae8     08 4E 85 F1 | 	sub	fp, #8
14aec     2B 16 0E F2 | 	cmp	arg03, #43 wz
14af0     18 00 90 5D |  if_ne	jmp	#LR__1671
14af4     A7 12 02 FB | 	rdlong	arg01, fp
14af8     BC 8C BF FD | 	call	#_convertstring
14afc     A7 FA 61 FC | 	wrlong	result1, fp
14b00     08 4E 05 F1 | 	add	fp, #8
14b04     A7 3E 68 FC | 	wrlong	#31, fp
14b08     08 4E 85 F1 | 	sub	fp, #8
14b0c                 | LR__1671
14b0c                 | ' if t1.result_type<>result_string then print "left$: "; : printerror(15) : return 
14b0c     08 4E 05 F1 | 	add	fp, #8
14b10     A7 16 02 FB | 	rdlong	arg03, fp
14b14     08 4E 85 F1 | 	sub	fp, #8
14b18     1F 16 0E F2 | 	cmp	arg03, #31 wz
14b1c     40 00 90 AD |  if_e	jmp	#LR__1672
14b20     00 12 06 F6 | 	mov	arg01, #0
14b24     50 80 B1 FD | 	call	#__system___getiolock_0611
14b28     FD 12 02 F6 | 	mov	arg01, result1
14b2c     20 23 B1 FD | 	call	#__system___lockmem
14b30     B9 01 00 FF 
14b34     8E 15 06 F6 | 	mov	arg02, ##@LR__5934
14b38     00 12 06 F6 | 	mov	arg01, #0
14b3c     00 16 06 F6 | 	mov	arg03, #0
14b40     00 30 B1 FD | 	call	#__system___basic_print_string
14b44     00 12 06 F6 | 	mov	arg01, #0
14b48     2C 80 B1 FD | 	call	#__system___getiolock_0611
14b4c     FD 00 68 FC | 	wrlong	#0, result1
14b50     0F 12 06 F6 | 	mov	arg01, #15
14b54     00 14 06 F6 | 	mov	arg02, #0
14b58     D8 E8 B0 FD | 	call	#_printerror
14b5c     20 00 90 FD | 	jmp	#LR__1673
14b60                 | LR__1672
14b60     A7 12 02 FB | 	rdlong	arg01, fp
14b64     10 4E 05 F1 | 	add	fp, #16
14b68     A7 14 02 FB | 	rdlong	arg02, fp
14b6c     10 4E 85 F1 | 	sub	fp, #16
14b70     58 43 B1 FD | 	call	#__system__Left_S
14b74     A7 FA 61 FC | 	wrlong	result1, fp
14b78     A7 12 02 F6 | 	mov	arg01, fp
14b7c     58 8B BF FD | 	call	#_push
14b80                 | LR__1673
14b80     A7 F0 03 F6 | 	mov	ptra, fp
14b84     B2 00 A0 FD | 	call	#popregs_
14b88                 | _do_left_ret
14b88     2D 00 64 FD | 	ret
14b8c                 | 
14b8c                 | ' 
14b8c                 | ' ' ----------------  len
14b8c                 | ' 
14b8c                 | ' sub do_len
14b8c                 | _do_len
14b8c     02 4A 05 F6 | 	mov	COUNT_, #2
14b90     A8 00 A0 FD | 	call	#pushregs_
14b94     14 F0 07 F1 | 	add	ptra, #20
14b98     4A 00 00 FF 
14b9c     80 E4 05 F1 | 	add	objptr, ##38016
14ba0     F2 26 02 FB | 	rdlong	local01, objptr
14ba4     13 17 02 F6 | 	mov	arg03, local01
14ba8     01 16 66 F0 | 	shl	arg03, #1
14bac     13 17 02 F1 | 	add	arg03, local01
14bb0     02 16 66 F0 | 	shl	arg03, #2
14bb4     03 00 00 FF 
14bb8     04 E4 85 F1 | 	sub	objptr, ##1540
14bbc     F2 16 02 F1 | 	add	arg03, objptr
14bc0     0B 17 02 FB | 	rdlong	arg03, arg03
14bc4     0C 4E 05 F1 | 	add	fp, #12
14bc8     A7 16 62 FC | 	wrlong	arg03, fp
14bcc                 | ' 
14bcc                 | ' numpar=compiledline(lineptr_e).result.uresult
14bcc                 | ' if numpar>1 orelse numpar=0 then print "len: "; : printerror(39) : return
14bcc     0C 4E 85 F1 | 	sub	fp, #12
14bd0     02 16 16 F2 | 	cmp	arg03, #2 wc
14bd4     47 00 00 FF 
14bd8     7C E4 85 F1 | 	sub	objptr, ##36476
14bdc     0C 4E 05 C1 |  if_b	add	fp, #12
14be0     A7 26 0A CB |  if_b	rdlong	local01, fp wz
14be4     0C 4E 85 C1 |  if_b	sub	fp, #12
14be8     40 00 90 4D |  if_c_and_nz	jmp	#LR__1680
14bec     00 12 06 F6 | 	mov	arg01, #0
14bf0     84 7F B1 FD | 	call	#__system___getiolock_0611
14bf4     FD 12 02 F6 | 	mov	arg01, result1
14bf8     54 22 B1 FD | 	call	#__system___lockmem
14bfc     B9 01 00 FF 
14c00     96 15 06 F6 | 	mov	arg02, ##@LR__5935
14c04     00 12 06 F6 | 	mov	arg01, #0
14c08     00 16 06 F6 | 	mov	arg03, #0
14c0c     34 2F B1 FD | 	call	#__system___basic_print_string
14c10     00 12 06 F6 | 	mov	arg01, #0
14c14     60 7F B1 FD | 	call	#__system___getiolock_0611
14c18     FD 00 68 FC | 	wrlong	#0, result1
14c1c     27 12 06 F6 | 	mov	arg01, #39
14c20     00 14 06 F6 | 	mov	arg02, #0
14c24     0C E8 B0 FD | 	call	#_printerror
14c28     C8 00 90 FD | 	jmp	#LR__1685
14c2c                 | LR__1680
14c2c     10 8A BF FD | 	call	#_pop
14c30     FF 16 02 F6 | 	mov	arg03, result3
14c34     A7 FA 61 FC | 	wrlong	result1, fp
14c38     04 4E 05 F1 | 	add	fp, #4
14c3c     A7 FC 61 FC | 	wrlong	result2, fp
14c40     04 4E 05 F1 | 	add	fp, #4
14c44     A7 16 62 FC | 	wrlong	arg03, fp
14c48                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
14c48     08 4E 85 F1 | 	sub	fp, #8
14c4c     2B 16 0E F2 | 	cmp	arg03, #43 wz
14c50     18 00 90 5D |  if_ne	jmp	#LR__1681
14c54     A7 12 02 FB | 	rdlong	arg01, fp
14c58     5C 8B BF FD | 	call	#_convertstring
14c5c     A7 FA 61 FC | 	wrlong	result1, fp
14c60     08 4E 05 F1 | 	add	fp, #8
14c64     A7 3E 68 FC | 	wrlong	#31, fp
14c68     08 4E 85 F1 | 	sub	fp, #8
14c6c                 | LR__1681
14c6c                 | ' if t1.result_type<>result_string then print "len: "; : printerror(15) : return 
14c6c     08 4E 05 F1 | 	add	fp, #8
14c70     A7 16 02 FB | 	rdlong	arg03, fp
14c74     08 4E 85 F1 | 	sub	fp, #8
14c78     1F 16 0E F2 | 	cmp	arg03, #31 wz
14c7c     40 00 90 AD |  if_e	jmp	#LR__1682
14c80     00 12 06 F6 | 	mov	arg01, #0
14c84     F0 7E B1 FD | 	call	#__system___getiolock_0611
14c88     FD 12 02 F6 | 	mov	arg01, result1
14c8c     C0 21 B1 FD | 	call	#__system___lockmem
14c90     B9 01 00 FF 
14c94     9C 15 06 F6 | 	mov	arg02, ##@LR__5936
14c98     00 12 06 F6 | 	mov	arg01, #0
14c9c     00 16 06 F6 | 	mov	arg03, #0
14ca0     A0 2E B1 FD | 	call	#__system___basic_print_string
14ca4     00 12 06 F6 | 	mov	arg01, #0
14ca8     CC 7E B1 FD | 	call	#__system___getiolock_0611
14cac     FD 00 68 FC | 	wrlong	#0, result1
14cb0     0F 12 06 F6 | 	mov	arg01, #15
14cb4     00 14 06 F6 | 	mov	arg02, #0
14cb8     78 E7 B0 FD | 	call	#_printerror
14cbc     34 00 90 FD | 	jmp	#LR__1685
14cc0                 | LR__1682
14cc0     A7 12 02 FB | 	rdlong	arg01, fp
14cc4     09 29 02 F6 | 	mov	local02, arg01
14cc8     97 06 48 FB | 	callpa	#(@LR__1684-@LR__1683)>>2,fcache_load_ptr_
14ccc                 | LR__1683
14ccc     14 FB C9 FA | 	rdbyte	result1, local02 wz
14cd0     01 28 06 51 |  if_ne	add	local02, #1
14cd4     F4 FF 9F 5D |  if_ne	jmp	#LR__1683
14cd8                 | LR__1684
14cd8     09 29 82 F1 | 	sub	local02, arg01
14cdc     A7 28 62 FC | 	wrlong	local02, fp
14ce0     08 4E 05 F1 | 	add	fp, #8
14ce4     A7 38 68 FC | 	wrlong	#28, fp
14ce8     08 4E 85 F1 | 	sub	fp, #8
14cec     A7 12 02 F6 | 	mov	arg01, fp
14cf0     E4 89 BF FD | 	call	#_push
14cf4                 | LR__1685
14cf4     A7 F0 03 F6 | 	mov	ptra, fp
14cf8     B2 00 A0 FD | 	call	#popregs_
14cfc                 | _do_len_ret
14cfc     2D 00 64 FD | 	ret
14d00                 | 
14d00                 | ' 
14d00                 | ' ' ----------------  list
14d00                 | ' 
14d00                 | ' sub do_list
14d00                 | _do_list
14d00     02 4A 05 F6 | 	mov	COUNT_, #2
14d04     A8 00 A0 FD | 	call	#pushregs_
14d08     B8 F0 07 F1 | 	add	ptra, #184
14d0c     04 4E 05 F1 | 	add	fp, #4
14d10     A7 00 68 FC | 	wrlong	#0, fp
14d14     04 4E 05 F1 | 	add	fp, #4
14d18     FF FF BF FF 
14d1c     A7 FE 6B FC | 	wrlong	##2147483647, fp
14d20     08 4E 85 F1 | 	sub	fp, #8
14d24     4A 00 00 FF 
14d28     80 E4 05 F1 | 	add	objptr, ##38016
14d2c     F2 26 02 FB | 	rdlong	local01, objptr
14d30     13 17 02 F6 | 	mov	arg03, local01
14d34     01 16 66 F0 | 	shl	arg03, #1
14d38     13 17 02 F1 | 	add	arg03, local01
14d3c     02 16 66 F0 | 	shl	arg03, #2
14d40     03 00 00 FF 
14d44     04 E4 85 F1 | 	sub	objptr, ##1540
14d48     F2 16 02 F1 | 	add	arg03, objptr
14d4c     0B 17 02 FB | 	rdlong	arg03, arg03
14d50     A7 16 62 FC | 	wrlong	arg03, fp
14d54                 | ' 
14d54                 | ' startline=0 : endline=$7FFFFFFF
14d54                 | ' numpar=compiledline(lineptr_e).result.uresult
14d54                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
14d54     01 16 0E F2 | 	cmp	arg03, #1 wz
14d58     47 00 00 FF 
14d5c     7C E4 85 F1 | 	sub	objptr, ##36476
14d60     3C 00 90 5D |  if_ne	jmp	#LR__1690
14d64     D8 88 BF FD | 	call	#_pop
14d68     FF 26 02 F6 | 	mov	local01, result3
14d6c     0C 4E 05 F1 | 	add	fp, #12
14d70     A7 FA 61 FC | 	wrlong	result1, fp
14d74     04 4E 05 F1 | 	add	fp, #4
14d78     A7 FC 61 FC | 	wrlong	result2, fp
14d7c     04 4E 05 F1 | 	add	fp, #4
14d80     A7 26 62 FC | 	wrlong	local01, fp
14d84     08 4E 85 F1 | 	sub	fp, #8
14d88     A7 12 02 F6 | 	mov	arg01, fp
14d8c     0C 4E 85 F1 | 	sub	fp, #12
14d90     90 8A BF FD | 	call	#_converttoint
14d94     04 4E 05 F1 | 	add	fp, #4
14d98     A7 FA 61 FC | 	wrlong	result1, fp
14d9c     04 4E 85 F1 | 	sub	fp, #4
14da0                 | LR__1690
14da0                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
14da0     A7 16 02 FB | 	rdlong	arg03, fp
14da4     02 16 0E F2 | 	cmp	arg03, #2 wz
14da8     7C 00 90 5D |  if_ne	jmp	#LR__1691
14dac     90 88 BF FD | 	call	#_pop
14db0     FF 26 02 F6 | 	mov	local01, result3
14db4     0C 4E 05 F1 | 	add	fp, #12
14db8     A7 FA 61 FC | 	wrlong	result1, fp
14dbc     04 4E 05 F1 | 	add	fp, #4
14dc0     A7 FC 61 FC | 	wrlong	result2, fp
14dc4     04 4E 05 F1 | 	add	fp, #4
14dc8     A7 26 62 FC | 	wrlong	local01, fp
14dcc     08 4E 85 F1 | 	sub	fp, #8
14dd0     A7 12 02 F6 | 	mov	arg01, fp
14dd4     0C 4E 85 F1 | 	sub	fp, #12
14dd8     48 8A BF FD | 	call	#_converttoint
14ddc     FD 26 02 F6 | 	mov	local01, result1
14de0     08 4E 05 F1 | 	add	fp, #8
14de4     A7 26 62 FC | 	wrlong	local01, fp
14de8     08 4E 85 F1 | 	sub	fp, #8
14dec     50 88 BF FD | 	call	#_pop
14df0     FF 26 02 F6 | 	mov	local01, result3
14df4     0C 4E 05 F1 | 	add	fp, #12
14df8     A7 FA 61 FC | 	wrlong	result1, fp
14dfc     04 4E 05 F1 | 	add	fp, #4
14e00     A7 FC 61 FC | 	wrlong	result2, fp
14e04     04 4E 05 F1 | 	add	fp, #4
14e08     A7 26 62 FC | 	wrlong	local01, fp
14e0c     08 4E 85 F1 | 	sub	fp, #8
14e10     A7 12 02 F6 | 	mov	arg01, fp
14e14     0C 4E 85 F1 | 	sub	fp, #12
14e18     08 8A BF FD | 	call	#_converttoint
14e1c     04 4E 05 F1 | 	add	fp, #4
14e20     A7 FA 61 FC | 	wrlong	result1, fp
14e24     04 4E 85 F1 | 	sub	fp, #4
14e28                 | LR__1691
14e28                 | ' 
14e28                 | ' 
14e28                 | ' print
14e28     00 12 06 F6 | 	mov	arg01, #0
14e2c     48 7D B1 FD | 	call	#__system___getiolock_0611
14e30     FD 12 02 F6 | 	mov	arg01, result1
14e34     18 20 B1 FD | 	call	#__system___lockmem
14e38     00 12 06 F6 | 	mov	arg01, #0
14e3c     0A 14 06 F6 | 	mov	arg02, #10
14e40     00 16 06 F6 | 	mov	arg03, #0
14e44     A4 2C B1 FD | 	call	#__system___basic_print_char
14e48     00 12 06 F6 | 	mov	arg01, #0
14e4c     28 7D B1 FD | 	call	#__system___getiolock_0611
14e50     FD 00 68 FC | 	wrlong	#0, result1
14e54     4A 00 00 FF 
14e58     88 E4 05 F1 | 	add	objptr, ##38024
14e5c     F2 28 02 FB | 	rdlong	local02, objptr
14e60     08 00 00 FF 
14e64     94 E4 05 F1 | 	add	objptr, ##4244
14e68     F2 28 62 FC | 	wrlong	local02, objptr
14e6c     52 00 00 FF 
14e70     1C E5 85 F1 | 	sub	objptr, ##42268
14e74                 | ' do 
14e74                 | LR__1692
14e74     20 4E 05 F1 | 	add	fp, #32
14e78     A7 12 02 F6 | 	mov	arg01, fp
14e7c     20 4E 85 F1 | 	sub	fp, #32
14e80     52 00 00 FF 
14e84     1C E5 05 F1 | 	add	objptr, ##42268
14e88     F2 14 02 FB | 	rdlong	arg02, objptr
14e8c     18 16 06 F6 | 	mov	arg03, #24
14e90     47 00 00 FF 
14e94     50 E4 85 F1 | 	sub	objptr, ##36432
14e98     2C 13 B1 FD | 	call	#_psram_spin2_read1
14e9c     0B 00 00 FF 
14ea0     CC E4 85 F1 | 	sub	objptr, ##5836
14ea4                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart : waitms 7000 : waitms 7000 : waitms 7000
14ea4                 | '   
14ea4                 | '   if header(0)<> $FFFFFFFF then
14ea4     20 4E 05 F1 | 	add	fp, #32
14ea8     A7 28 02 FB | 	rdlong	local02, fp
14eac     20 4E 85 F1 | 	sub	fp, #32
14eb0     FF FF 7F FF 
14eb4     FF 29 0E F2 | 	cmp	local02, ##-1 wz
14eb8     A8 00 90 AD |  if_e	jmp	#LR__1694
14ebc     38 4E 05 F1 | 	add	fp, #56
14ec0     3F 16 06 F6 | 	mov	arg03, #63
14ec4     28 16 62 FD | 	setq	arg03
14ec8     A7 00 68 FC | 	wrlong	#0, fp
14ecc     A7 12 02 F6 | 	mov	arg01, fp
14ed0     10 4E 85 F1 | 	sub	fp, #16
14ed4     A7 14 02 FB | 	rdlong	arg02, fp
14ed8     04 4E 05 F1 | 	add	fp, #4
14edc     A7 16 02 FB | 	rdlong	arg03, fp
14ee0     2C 4E 85 F1 | 	sub	fp, #44
14ee4     0B 00 00 FF 
14ee8     CC E4 05 F1 | 	add	objptr, ##5836
14eec     D8 12 B1 FD | 	call	#_psram_spin2_read1
14ef0     0B 00 00 FF 
14ef4     CC E4 85 F1 | 	sub	objptr, ##5836
14ef8                 | '     longfill(linebuf,0,64)
14ef8                 | '     psram.read1(varptr(linebuf),header(2),header(3))
14ef8                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
14ef8     20 4E 05 F1 | 	add	fp, #32
14efc     A7 28 02 FB | 	rdlong	local02, fp
14f00     1C 4E 85 F1 | 	sub	fp, #28
14f04     A7 26 02 FB | 	rdlong	local01, fp
14f08     04 4E 85 F1 | 	sub	fp, #4
14f0c     13 29 52 F2 | 	cmps	local02, local01 wc
14f10     30 00 90 CD |  if_b	jmp	#LR__1693
14f14     20 4E 05 F1 | 	add	fp, #32
14f18     A7 28 02 FB | 	rdlong	local02, fp
14f1c     18 4E 85 F1 | 	sub	fp, #24
14f20     A7 16 02 FB | 	rdlong	arg03, fp
14f24     08 4E 85 F1 | 	sub	fp, #8
14f28     0B 29 5A F2 | 	cmps	local02, arg03 wcz
14f2c     14 00 90 1D |  if_a	jmp	#LR__1693
14f30     38 4E 05 F1 | 	add	fp, #56
14f34     A7 12 02 F6 | 	mov	arg01, fp
14f38     38 4E 85 F1 | 	sub	fp, #56
14f3c                 | ' 
14f3c                 | ' write(text)
14f3c     4C 06 B1 FD | 	call	#_hg010b_spin2_write
14f40                 | ' crlf
14f40     48 0B B1 FD | 	call	#_hg010b_spin2_crlf
14f44                 | LR__1693
14f44     34 4E 05 F1 | 	add	fp, #52
14f48     A7 28 02 FB | 	rdlong	local02, fp
14f4c     34 4E 85 F1 | 	sub	fp, #52
14f50     52 00 00 FF 
14f54     1C E5 05 F1 | 	add	objptr, ##42268
14f58     F2 28 62 FC | 	wrlong	local02, objptr
14f5c     52 00 00 FF 
14f60     1C E5 85 F1 | 	sub	objptr, ##42268
14f64                 | LR__1694
14f64     34 4E 05 F1 | 	add	fp, #52
14f68     A7 28 02 FB | 	rdlong	local02, fp
14f6c     34 4E 85 F1 | 	sub	fp, #52
14f70     FF FF 3F FF 
14f74     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
14f78     20 4E 05 51 |  if_ne	add	fp, #32
14f7c     A7 26 02 5B |  if_ne	rdlong	local01, fp
14f80     20 4E 85 51 |  if_ne	sub	fp, #32
14f84     FF FF 7F 5F 
14f88     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
14f8c     E4 FE 9F 5D |  if_ne	jmp	#LR__1692
14f90     A7 F0 03 F6 | 	mov	ptra, fp
14f94     B2 00 A0 FD | 	call	#popregs_
14f98                 | _do_list_ret
14f98     2D 00 64 FD | 	ret
14f9c                 | 
14f9c                 | ' 
14f9c                 | ' '-------------------- load
14f9c                 | ' 
14f9c                 | ' sub do_load(amode=0 as integer)  
14f9c                 | _do_load
14f9c     01 4A 05 F6 | 	mov	COUNT_, #1
14fa0     A8 00 A0 FD | 	call	#pushregs_
14fa4     AC F0 07 F1 | 	add	ptra, #172
14fa8     A7 12 62 FC | 	wrlong	arg01, fp
14fac     52 00 00 FF 
14fb0     D4 E4 05 F1 | 	add	objptr, ##42196
14fb4     F2 02 68 FC | 	wrlong	#1, objptr
14fb8     08 00 00 FF 
14fbc     54 E4 85 F1 | 	sub	objptr, ##4180
14fc0     F2 14 02 FB | 	rdlong	arg02, objptr
14fc4     0A 13 02 F6 | 	mov	arg01, arg02
14fc8     01 12 66 F0 | 	shl	arg01, #1
14fcc     0A 13 02 F1 | 	add	arg01, arg02
14fd0     02 12 66 F0 | 	shl	arg01, #2
14fd4     03 00 00 FF 
14fd8     04 E4 85 F1 | 	sub	objptr, ##1540
14fdc     F2 12 02 F1 | 	add	arg01, objptr
14fe0     09 15 02 FB | 	rdlong	arg02, arg01
14fe4     1C 4E 05 F1 | 	add	fp, #28
14fe8     A7 14 62 FC | 	wrlong	arg02, fp
14fec     8C 4E 05 F1 | 	add	fp, #140
14ff0     A7 12 02 F6 | 	mov	arg01, fp
14ff4     47 00 00 FF 
14ff8     7C E4 85 F1 | 	sub	objptr, ##36476
14ffc     80 4E 85 F1 | 	sub	fp, #128
15000     09 4F 61 FC | 	wrlong	fp, arg01
15004                 | ' 
15004                 | ' inload=1
15004                 | ' numpar=compiledline(lineptr_e).result.uresult
15004                 | ' lpoke varptr(line2$),varptr(line2)
15004                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
15004     0C 4E 85 F1 | 	sub	fp, #12
15008     A7 26 02 FB | 	rdlong	local01, fp
1500c     1C 4E 85 F1 | 	sub	fp, #28
15010     01 26 56 F2 | 	cmps	local01, #1 wc
15014     24 00 90 CD |  if_b	jmp	#LR__1700
15018     24 86 BF FD | 	call	#_pop
1501c     04 4E 05 F1 | 	add	fp, #4
15020     A7 FA 61 FC | 	wrlong	result1, fp
15024     04 4E 05 F1 | 	add	fp, #4
15028     A7 FC 61 FC | 	wrlong	result2, fp
1502c     04 4E 05 F1 | 	add	fp, #4
15030     A7 FE 61 FC | 	wrlong	result3, fp
15034     0C 4E 85 F1 | 	sub	fp, #12
15038     28 00 90 FD | 	jmp	#LR__1701
1503c                 | LR__1700
1503c     52 00 00 FF 
15040     C4 E4 05 F1 | 	add	objptr, ##42180
15044     F2 26 02 FB | 	rdlong	local01, objptr
15048     52 00 00 FF 
1504c     C4 E4 85 F1 | 	sub	objptr, ##42180
15050     04 4E 05 F1 | 	add	fp, #4
15054     A7 26 62 FC | 	wrlong	local01, fp
15058     08 4E 05 F1 | 	add	fp, #8
1505c     A7 3E 68 FC | 	wrlong	#31, fp
15060     0C 4E 85 F1 | 	sub	fp, #12
15064                 | LR__1701
15064                 | ' 'print "popped "; t1.result.uresult, t1.result_type
15064                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
15064     0C 4E 05 F1 | 	add	fp, #12
15068     A7 26 02 FB | 	rdlong	local01, fp
1506c     0C 4E 85 F1 | 	sub	fp, #12
15070     2B 26 0E F2 | 	cmp	local01, #43 wz
15074     24 00 90 5D |  if_ne	jmp	#LR__1702
15078     04 4E 05 F1 | 	add	fp, #4
1507c     A7 12 02 FB | 	rdlong	arg01, fp
15080     04 4E 85 F1 | 	sub	fp, #4
15084     30 87 BF FD | 	call	#_convertstring
15088     04 4E 05 F1 | 	add	fp, #4
1508c     A7 FA 61 FC | 	wrlong	result1, fp
15090     08 4E 05 F1 | 	add	fp, #8
15094     A7 3E 68 FC | 	wrlong	#31, fp
15098     0C 4E 85 F1 | 	sub	fp, #12
1509c                 | LR__1702
1509c                 | ' if t1.result_type=result_string then
1509c     0C 4E 05 F1 | 	add	fp, #12
150a0     A7 26 02 FB | 	rdlong	local01, fp
150a4     0C 4E 85 F1 | 	sub	fp, #12
150a8     1F 26 0E F2 | 	cmp	local01, #31 wz
150ac     E0 02 90 5D |  if_ne	jmp	#LR__1708
150b0                 | '   if amode<>1234 then do_new
150b0     A7 26 02 FB | 	rdlong	local01, fp
150b4     02 00 00 FF 
150b8     D2 26 0E F2 | 	cmp	local01, ##1234 wz
150bc     90 0E B0 5D |  if_ne	call	#_do_new
150c0                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
150c0     04 4E 05 F1 | 	add	fp, #4
150c4     A7 12 02 FB | 	rdlong	arg01, fp
150c8     04 4E 85 F1 | 	sub	fp, #4
150cc     B9 01 00 FF 
150d0     A2 15 06 F6 | 	mov	arg02, ##@LR__5937
150d4     A0 1D B1 FD | 	call	#__system___string_cmp
150d8     00 FA 0D F2 | 	cmp	result1, #0 wz
150dc     24 00 90 5D |  if_ne	jmp	#LR__1703
150e0     52 00 00 FF 
150e4     C4 E4 05 F1 | 	add	objptr, ##42180
150e8     F2 26 02 FB | 	rdlong	local01, objptr
150ec     52 00 00 FF 
150f0     C4 E4 85 F1 | 	sub	objptr, ##42180
150f4     04 4E 05 F1 | 	add	fp, #4
150f8     A7 26 62 FC | 	wrlong	local01, fp
150fc     04 4E 85 F1 | 	sub	fp, #4
15100     20 00 90 FD | 	jmp	#LR__1704
15104                 | LR__1703
15104     04 4E 05 F1 | 	add	fp, #4
15108     A7 26 02 FB | 	rdlong	local01, fp
1510c     04 4E 85 F1 | 	sub	fp, #4
15110     52 00 00 FF 
15114     C4 E4 05 F1 | 	add	objptr, ##42180
15118     F2 26 62 FC | 	wrlong	local01, objptr
1511c     52 00 00 FF 
15120     C4 E4 85 F1 | 	sub	objptr, ##42180
15124                 | LR__1704
15124                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
15124     09 12 06 F6 | 	mov	arg01, #9
15128     7C 70 B1 FD | 	call	#__system__close
1512c     09 26 06 F6 | 	mov	local01, #9
15130     4A 00 00 FF 
15134     94 E4 05 F1 | 	add	objptr, ##38036
15138     F2 12 02 FB | 	rdlong	arg01, objptr
1513c     4A 00 00 FF 
15140     94 E4 85 F1 | 	sub	objptr, ##38036
15144     B9 01 00 FF 
15148     A3 15 06 F6 | 	mov	arg02, ##@LR__5938
1514c     5C 1D B1 FD | 	call	#__system___string_concat
15150     FD 12 02 F6 | 	mov	arg01, result1
15154     04 4E 05 F1 | 	add	fp, #4
15158     A7 14 02 FB | 	rdlong	arg02, fp
1515c     04 4E 85 F1 | 	sub	fp, #4
15160     48 1D B1 FD | 	call	#__system___string_concat
15164     FD 14 02 F6 | 	mov	arg02, result1
15168     13 13 02 F6 | 	mov	arg01, local01
1516c     00 16 06 F6 | 	mov	arg03, #0
15170     E0 28 B1 FD | 	call	#__system___basic_open_string
15174     20 E6 05 F1 | 	add	ptr___system__dat__, #32
15178     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
1517c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
15180     14 4E 05 F1 | 	add	fp, #20
15184     A7 FA 61 FC | 	wrlong	result1, fp
15188                 | '   r=geterr() 
15188                 | '   if r then 
15188     14 4E 85 F1 | 	sub	fp, #20
1518c     50 01 90 AD |  if_e	jmp	#LR__1706
15190                 | '     close #9: open currentdir$+"/"+t1.result.sresult+".bas" for input as #9 
15190     09 12 06 F6 | 	mov	arg01, #9
15194     10 70 B1 FD | 	call	#__system__close
15198     09 26 06 F6 | 	mov	local01, #9
1519c     4A 00 00 FF 
151a0     94 E4 05 F1 | 	add	objptr, ##38036
151a4     F2 12 02 FB | 	rdlong	arg01, objptr
151a8     4A 00 00 FF 
151ac     94 E4 85 F1 | 	sub	objptr, ##38036
151b0     B9 01 00 FF 
151b4     A5 15 06 F6 | 	mov	arg02, ##@LR__5939
151b8     F0 1C B1 FD | 	call	#__system___string_concat
151bc     FD 12 02 F6 | 	mov	arg01, result1
151c0     04 4E 05 F1 | 	add	fp, #4
151c4     A7 14 02 FB | 	rdlong	arg02, fp
151c8     04 4E 85 F1 | 	sub	fp, #4
151cc     DC 1C B1 FD | 	call	#__system___string_concat
151d0     FD 12 02 F6 | 	mov	arg01, result1
151d4     B9 01 00 FF 
151d8     A7 15 06 F6 | 	mov	arg02, ##@LR__5940
151dc     CC 1C B1 FD | 	call	#__system___string_concat
151e0     FD 14 02 F6 | 	mov	arg02, result1
151e4     13 13 02 F6 | 	mov	arg01, local01
151e8     00 16 06 F6 | 	mov	arg03, #0
151ec     64 28 B1 FD | 	call	#__system___basic_open_string
151f0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
151f4     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
151f8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
151fc     14 4E 05 F1 | 	add	fp, #20
15200     A7 FA 61 FC | 	wrlong	result1, fp
15204                 | '     r=geterr() 
15204                 | '     if r then 
15204     14 4E 85 F1 | 	sub	fp, #20
15208     A0 00 90 AD |  if_e	jmp	#LR__1705
1520c                 | '       print "System error ";r;": ";strerror$(r) :close #9 : return
1520c     00 12 06 F6 | 	mov	arg01, #0
15210     64 79 B1 FD | 	call	#__system___getiolock_0611
15214     FD 12 02 F6 | 	mov	arg01, result1
15218     34 1C B1 FD | 	call	#__system___lockmem
1521c     B9 01 00 FF 
15220     AC 15 06 F6 | 	mov	arg02, ##@LR__5941
15224     00 12 06 F6 | 	mov	arg01, #0
15228     00 16 06 F6 | 	mov	arg03, #0
1522c     14 29 B1 FD | 	call	#__system___basic_print_string
15230     14 4E 05 F1 | 	add	fp, #20
15234     A7 14 02 FB | 	rdlong	arg02, fp
15238     14 4E 85 F1 | 	sub	fp, #20
1523c     00 12 06 F6 | 	mov	arg01, #0
15240     00 16 06 F6 | 	mov	arg03, #0
15244     0A 18 06 F6 | 	mov	arg04, #10
15248     3C 29 B1 FD | 	call	#__system___basic_print_integer
1524c     B9 01 00 FF 
15250     BA 15 06 F6 | 	mov	arg02, ##@LR__5942
15254     00 12 06 F6 | 	mov	arg01, #0
15258     00 16 06 F6 | 	mov	arg03, #0
1525c     E4 28 B1 FD | 	call	#__system___basic_print_string
15260     00 26 06 F6 | 	mov	local01, #0
15264     14 4E 05 F1 | 	add	fp, #20
15268     A7 12 02 FB | 	rdlong	arg01, fp
1526c     14 4E 85 F1 | 	sub	fp, #20
15270     68 45 B1 FD | 	call	#__system___strerror
15274     FD 14 02 F6 | 	mov	arg02, result1
15278     13 13 02 F6 | 	mov	arg01, local01
1527c     00 16 06 F6 | 	mov	arg03, #0
15280     C0 28 B1 FD | 	call	#__system___basic_print_string
15284     00 12 06 F6 | 	mov	arg01, #0
15288     0A 14 06 F6 | 	mov	arg02, #10
1528c     00 16 06 F6 | 	mov	arg03, #0
15290     58 28 B1 FD | 	call	#__system___basic_print_char
15294     00 12 06 F6 | 	mov	arg01, #0
15298     DC 78 B1 FD | 	call	#__system___getiolock_0611
1529c     FD 00 68 FC | 	wrlong	#0, result1
152a0     09 12 06 F6 | 	mov	arg01, #9
152a4     00 6F B1 FD | 	call	#__system__close
152a8     94 01 90 FD | 	jmp	#LR__1710
152ac                 | LR__1705
152ac     52 00 00 FF 
152b0     C4 E4 05 F1 | 	add	objptr, ##42180
152b4     F2 12 02 FB | 	rdlong	arg01, objptr
152b8     52 00 00 FF 
152bc     C4 E4 85 F1 | 	sub	objptr, ##42180
152c0     B9 01 00 FF 
152c4     BD 15 06 F6 | 	mov	arg02, ##@LR__5943
152c8     E0 1B B1 FD | 	call	#__system___string_concat
152cc     52 00 00 FF 
152d0     C4 E4 05 F1 | 	add	objptr, ##42180
152d4     F2 FA 61 FC | 	wrlong	result1, objptr
152d8     52 00 00 FF 
152dc     C4 E4 85 F1 | 	sub	objptr, ##42180
152e0                 | LR__1706
152e0                 | '   close #9: open currentdir$+"/"+loadname for input as #9
152e0     09 12 06 F6 | 	mov	arg01, #9
152e4     C0 6E B1 FD | 	call	#__system__close
152e8     09 26 06 F6 | 	mov	local01, #9
152ec     4A 00 00 FF 
152f0     94 E4 05 F1 | 	add	objptr, ##38036
152f4     F2 12 02 FB | 	rdlong	arg01, objptr
152f8     4A 00 00 FF 
152fc     94 E4 85 F1 | 	sub	objptr, ##38036
15300     B9 01 00 FF 
15304     C2 15 06 F6 | 	mov	arg02, ##@LR__5944
15308     A0 1B B1 FD | 	call	#__system___string_concat
1530c     FD 12 02 F6 | 	mov	arg01, result1
15310     52 00 00 FF 
15314     C4 E4 05 F1 | 	add	objptr, ##42180
15318     F2 14 02 FB | 	rdlong	arg02, objptr
1531c     52 00 00 FF 
15320     C4 E4 85 F1 | 	sub	objptr, ##42180
15324     84 1B B1 FD | 	call	#__system___string_concat
15328     FD 14 02 F6 | 	mov	arg02, result1
1532c     13 13 02 F6 | 	mov	arg01, local01
15330     00 16 06 F6 | 	mov	arg03, #0
15334     1C 27 B1 FD | 	call	#__system___basic_open_string
15338                 | '   do
15338                 | LR__1707
15338     09 12 06 F6 | 	mov	arg01, #9
1533c     1C 1D B1 FD | 	call	#__system___basic_read_line
15340     FD 26 02 F6 | 	mov	local01, result1
15344     37 00 00 FF 
15348     1C E4 05 F1 | 	add	objptr, ##28188
1534c     F2 26 62 FC | 	wrlong	local01, objptr
15350     37 00 00 FF 
15354     1C E4 85 F1 | 	sub	objptr, ##28188
15358     CC C4 BE FD | 	call	#_interpret
1535c     37 00 00 FF 
15360     1C E4 05 F1 | 	add	objptr, ##28188
15364     F2 12 02 FB | 	rdlong	arg01, objptr
15368     37 00 00 FF 
1536c     1C E4 85 F1 | 	sub	objptr, ##28188
15370     B9 01 00 FF 
15374     C4 15 06 F6 | 	mov	arg02, ##@LR__5945
15378     FC 1A B1 FD | 	call	#__system___string_cmp
1537c     00 FA 0D F2 | 	cmp	result1, #0 wz
15380     B4 FF 9F 5D |  if_ne	jmp	#LR__1707
15384                 | '   close #9   
15384     09 12 06 F6 | 	mov	arg01, #9
15388     1C 6E B1 FD | 	call	#__system__close
1538c     0C 00 90 FD | 	jmp	#LR__1709
15390                 | LR__1708
15390     1E 12 06 F6 | 	mov	arg01, #30
15394     00 14 06 F6 | 	mov	arg02, #0
15398     98 E0 B0 FD | 	call	#_printerror
1539c                 | LR__1709
1539c                 | ' print "Loaded ";currentdir$+"/"+loadname
1539c     00 12 06 F6 | 	mov	arg01, #0
153a0     D4 77 B1 FD | 	call	#__system___getiolock_0611
153a4     FD 12 02 F6 | 	mov	arg01, result1
153a8     A4 1A B1 FD | 	call	#__system___lockmem
153ac     B9 01 00 FF 
153b0     C5 15 06 F6 | 	mov	arg02, ##@LR__5946
153b4     00 12 06 F6 | 	mov	arg01, #0
153b8     00 16 06 F6 | 	mov	arg03, #0
153bc     84 27 B1 FD | 	call	#__system___basic_print_string
153c0     00 26 06 F6 | 	mov	local01, #0
153c4     4A 00 00 FF 
153c8     94 E4 05 F1 | 	add	objptr, ##38036
153cc     F2 12 02 FB | 	rdlong	arg01, objptr
153d0     4A 00 00 FF 
153d4     94 E4 85 F1 | 	sub	objptr, ##38036
153d8     B9 01 00 FF 
153dc     CD 15 06 F6 | 	mov	arg02, ##@LR__5947
153e0     C8 1A B1 FD | 	call	#__system___string_concat
153e4     FD 12 02 F6 | 	mov	arg01, result1
153e8     52 00 00 FF 
153ec     C4 E4 05 F1 | 	add	objptr, ##42180
153f0     F2 14 02 FB | 	rdlong	arg02, objptr
153f4     52 00 00 FF 
153f8     C4 E4 85 F1 | 	sub	objptr, ##42180
153fc     AC 1A B1 FD | 	call	#__system___string_concat
15400     FD 14 02 F6 | 	mov	arg02, result1
15404     13 13 02 F6 | 	mov	arg01, local01
15408     00 16 06 F6 | 	mov	arg03, #0
1540c     34 27 B1 FD | 	call	#__system___basic_print_string
15410     00 12 06 F6 | 	mov	arg01, #0
15414     0A 14 06 F6 | 	mov	arg02, #10
15418     00 16 06 F6 | 	mov	arg03, #0
1541c     CC 26 B1 FD | 	call	#__system___basic_print_char
15420     00 12 06 F6 | 	mov	arg01, #0
15424     50 77 B1 FD | 	call	#__system___getiolock_0611
15428     FD 00 68 FC | 	wrlong	#0, result1
1542c     52 00 00 FF 
15430     D4 E4 05 F1 | 	add	objptr, ##42196
15434     F2 00 68 FC | 	wrlong	#0, objptr
15438     52 00 00 FF 
1543c     D4 E4 85 F1 | 	sub	objptr, ##42196
15440                 | LR__1710
15440     A7 F0 03 F6 | 	mov	ptra, fp
15444     B2 00 A0 FD | 	call	#popregs_
15448                 | _do_load_ret
15448     2D 00 64 FD | 	ret
1544c                 | 
1544c                 | ' 
1544c                 | ' '-------------------- log
1544c                 | ' 
1544c                 | ' sub do_log
1544c                 | _do_log
1544c     01 4A 05 F6 | 	mov	COUNT_, #1
15450     A8 00 A0 FD | 	call	#pushregs_
15454     14 F0 07 F1 | 	add	ptra, #20
15458     4A 00 00 FF 
1545c     80 E4 05 F1 | 	add	objptr, ##38016
15460     F2 26 02 FB | 	rdlong	local01, objptr
15464     13 17 02 F6 | 	mov	arg03, local01
15468     01 16 66 F0 | 	shl	arg03, #1
1546c     13 17 02 F1 | 	add	arg03, local01
15470     02 16 66 F0 | 	shl	arg03, #2
15474     03 00 00 FF 
15478     04 E4 85 F1 | 	sub	objptr, ##1540
1547c     F2 16 02 F1 | 	add	arg03, objptr
15480     0B 17 0A FB | 	rdlong	arg03, arg03 wz
15484     0C 4E 05 F1 | 	add	fp, #12
15488     A7 16 62 FC | 	wrlong	arg03, fp
1548c                 | ' 
1548c                 | ' numpar=compiledline(lineptr_e).result.uresult
1548c                 | ' if numpar=0 orelse numpar>2 then print "log: "; : printerror(39) : return
1548c     0C 4E 85 F1 | 	sub	fp, #12
15490     47 00 00 FF 
15494     7C E4 85 F1 | 	sub	objptr, ##36476
15498     0C 4E 05 51 |  if_ne	add	fp, #12
1549c     A7 26 02 5B |  if_ne	rdlong	local01, fp
154a0     0C 4E 85 51 |  if_ne	sub	fp, #12
154a4     03 26 16 52 |  if_ne	cmp	local01, #3 wc
154a8     40 00 90 4D |  if_c_and_nz	jmp	#LR__1720
154ac     00 12 06 F6 | 	mov	arg01, #0
154b0     C4 76 B1 FD | 	call	#__system___getiolock_0611
154b4     FD 12 02 F6 | 	mov	arg01, result1
154b8     94 19 B1 FD | 	call	#__system___lockmem
154bc     B9 01 00 FF 
154c0     CF 15 06 F6 | 	mov	arg02, ##@LR__5948
154c4     00 12 06 F6 | 	mov	arg01, #0
154c8     00 16 06 F6 | 	mov	arg03, #0
154cc     74 26 B1 FD | 	call	#__system___basic_print_string
154d0     00 12 06 F6 | 	mov	arg01, #0
154d4     A0 76 B1 FD | 	call	#__system___getiolock_0611
154d8     FD 00 68 FC | 	wrlong	#0, result1
154dc     27 12 06 F6 | 	mov	arg01, #39
154e0     00 14 06 F6 | 	mov	arg02, #0
154e4     4C DF B0 FD | 	call	#_printerror
154e8     D0 00 90 FD | 	jmp	#LR__1723
154ec                 | LR__1720
154ec                 | ' if numpar=2 then 
154ec     0C 4E 05 F1 | 	add	fp, #12
154f0     A7 26 02 FB | 	rdlong	local01, fp
154f4     0C 4E 85 F1 | 	sub	fp, #12
154f8     02 26 0E F2 | 	cmp	local01, #2 wz
154fc     48 00 90 5D |  if_ne	jmp	#LR__1721
15500     3C 81 BF FD | 	call	#_pop
15504     FF 26 02 F6 | 	mov	local01, result3
15508     A7 FA 61 FC | 	wrlong	result1, fp
1550c     04 4E 05 F1 | 	add	fp, #4
15510     A7 FC 61 FC | 	wrlong	result2, fp
15514     04 4E 05 F1 | 	add	fp, #4
15518     A7 26 62 FC | 	wrlong	local01, fp
1551c     08 4E 85 F1 | 	sub	fp, #8
15520     A7 12 02 F6 | 	mov	arg01, fp
15524     B8 83 BF FD | 	call	#_converttofloat
15528     FD 14 02 F6 | 	mov	arg02, result1
1552c     FC 16 20 FF 
15530     54 12 06 F6 | 	mov	arg01, ##1076754516
15534     60 57 B1 FD | 	call	#__system____builtin_logbase
15538     10 4E 05 F1 | 	add	fp, #16
1553c     A7 FA 61 FC | 	wrlong	result1, fp
15540     10 4E 85 F1 | 	sub	fp, #16
15544     10 00 90 FD | 	jmp	#LR__1722
15548                 | LR__1721
15548     10 4E 05 F1 | 	add	fp, #16
1554c     00 C0 9F FF 
15550     A7 00 68 FC | 	wrlong	##1065353216, fp
15554     10 4E 85 F1 | 	sub	fp, #16
15558                 | LR__1722
15558     E4 80 BF FD | 	call	#_pop
1555c     FF 26 02 F6 | 	mov	local01, result3
15560     A7 FA 61 FC | 	wrlong	result1, fp
15564     04 4E 05 F1 | 	add	fp, #4
15568     A7 FC 61 FC | 	wrlong	result2, fp
1556c     04 4E 05 F1 | 	add	fp, #4
15570     A7 26 62 FC | 	wrlong	local01, fp
15574     08 4E 85 F1 | 	sub	fp, #8
15578     A7 12 02 F6 | 	mov	arg01, fp
1557c     60 83 BF FD | 	call	#_converttofloat
15580     FD 14 02 F6 | 	mov	arg02, result1
15584     FC 16 20 FF 
15588     54 12 06 F6 | 	mov	arg01, ##1076754516
1558c     08 57 B1 FD | 	call	#__system____builtin_logbase
15590     FD 12 02 F6 | 	mov	arg01, result1
15594     10 4E 05 F1 | 	add	fp, #16
15598     A7 14 02 FB | 	rdlong	arg02, fp
1559c     10 4E 85 F1 | 	sub	fp, #16
155a0     28 49 B1 FD | 	call	#__system___float_div
155a4     A7 FA 61 FC | 	wrlong	result1, fp
155a8     08 4E 05 F1 | 	add	fp, #8
155ac     A7 3C 68 FC | 	wrlong	#30, fp
155b0     08 4E 85 F1 | 	sub	fp, #8
155b4     A7 12 02 F6 | 	mov	arg01, fp
155b8     1C 81 BF FD | 	call	#_push
155bc                 | LR__1723
155bc     A7 F0 03 F6 | 	mov	ptra, fp
155c0     B2 00 A0 FD | 	call	#popregs_
155c4                 | _do_log_ret
155c4     2D 00 64 FD | 	ret
155c8                 | 
155c8                 | ' 
155c8                 | ' '-------------------- lpeek
155c8                 | ' 
155c8                 | ' sub do_lpeek
155c8                 | _do_lpeek
155c8     00 4A 05 F6 | 	mov	COUNT_, #0
155cc     A8 00 A0 FD | 	call	#pushregs_
155d0     14 F0 07 F1 | 	add	ptra, #20
155d4     68 80 BF FD | 	call	#_pop
155d8     A7 FA 61 FC | 	wrlong	result1, fp
155dc     04 4E 05 F1 | 	add	fp, #4
155e0     A7 FC 61 FC | 	wrlong	result2, fp
155e4     04 4E 05 F1 | 	add	fp, #4
155e8     A7 FE 61 FC | 	wrlong	result3, fp
155ec     08 4E 85 F1 | 	sub	fp, #8
155f0     A7 12 02 F6 | 	mov	arg01, fp
155f4     2C 82 BF FD | 	call	#_converttoint
155f8     0C 4E 05 F1 | 	add	fp, #12
155fc     A7 FA 61 FC | 	wrlong	result1, fp
15600                 | ' 
15600                 | ' t1=pop()
15600                 | ' a=converttoint(t1)
15600                 | ' if a<$80000 then r=lpeek(a) else r=pslpeek(a)
15600     0C 4E 85 F1 | 	sub	fp, #12
15604     00 04 00 FF 
15608     00 FA 15 F2 | 	cmp	result1, ##524288 wc
1560c     1C 00 90 3D |  if_ae	jmp	#LR__1730
15610     0C 4E 05 F1 | 	add	fp, #12
15614     A7 12 02 FB | 	rdlong	arg01, fp
15618     09 FB 01 FB | 	rdlong	result1, arg01
1561c     04 4E 05 F1 | 	add	fp, #4
15620     A7 FA 61 FC | 	wrlong	result1, fp
15624     10 4E 85 F1 | 	sub	fp, #16
15628     1C 00 90 FD | 	jmp	#LR__1731
1562c                 | LR__1730
1562c     0C 4E 05 F1 | 	add	fp, #12
15630     A7 12 02 FB | 	rdlong	arg01, fp
15634     0C 4E 85 F1 | 	sub	fp, #12
15638     C8 E0 B0 FD | 	call	#_pslpeek
1563c     10 4E 05 F1 | 	add	fp, #16
15640     A7 FA 61 FC | 	wrlong	result1, fp
15644     10 4E 85 F1 | 	sub	fp, #16
15648                 | LR__1731
15648     08 4E 05 F1 | 	add	fp, #8
1564c     A7 3A 68 FC | 	wrlong	#29, fp
15650     08 4E 05 F1 | 	add	fp, #8
15654     A7 12 02 FB | 	rdlong	arg01, fp
15658     10 4E 85 F1 | 	sub	fp, #16
1565c     A7 12 62 FC | 	wrlong	arg01, fp
15660     A7 12 02 F6 | 	mov	arg01, fp
15664     70 80 BF FD | 	call	#_push
15668     A7 F0 03 F6 | 	mov	ptra, fp
1566c     B2 00 A0 FD | 	call	#popregs_
15670                 | _do_lpeek_ret
15670     2D 00 64 FD | 	ret
15674                 | 
15674                 | ' 
15674                 | ' '-------------------- lpoke
15674                 | ' 
15674                 | ' sub do_lpoke
15674                 | _do_lpoke
15674     01 4A 05 F6 | 	mov	COUNT_, #1
15678     A8 00 A0 FD | 	call	#pushregs_
1567c     20 F0 07 F1 | 	add	ptra, #32
15680     BC 7F BF FD | 	call	#_pop
15684     FD 14 02 F6 | 	mov	arg02, result1
15688     FE 12 02 F6 | 	mov	arg01, result2
1568c     FF 26 02 F6 | 	mov	local01, result3
15690     A7 14 62 FC | 	wrlong	arg02, fp
15694     04 4E 05 F1 | 	add	fp, #4
15698     A7 12 62 FC | 	wrlong	arg01, fp
1569c     04 4E 05 F1 | 	add	fp, #4
156a0     A7 26 62 FC | 	wrlong	local01, fp
156a4     08 4E 85 F1 | 	sub	fp, #8
156a8     94 7F BF FD | 	call	#_pop
156ac     FF 26 02 F6 | 	mov	local01, result3
156b0     0C 4E 05 F1 | 	add	fp, #12
156b4     A7 FA 61 FC | 	wrlong	result1, fp
156b8     04 4E 05 F1 | 	add	fp, #4
156bc     A7 FC 61 FC | 	wrlong	result2, fp
156c0     04 4E 05 F1 | 	add	fp, #4
156c4     A7 26 62 FC | 	wrlong	local01, fp
156c8     08 4E 85 F1 | 	sub	fp, #8
156cc     A7 12 02 F6 | 	mov	arg01, fp
156d0     0C 4E 85 F1 | 	sub	fp, #12
156d4     4C 81 BF FD | 	call	#_converttoint
156d8     18 4E 05 F1 | 	add	fp, #24
156dc     A7 FA 61 FC | 	wrlong	result1, fp
156e0     18 4E 85 F1 | 	sub	fp, #24
156e4     A7 12 02 F6 | 	mov	arg01, fp
156e8     38 81 BF FD | 	call	#_converttoint
156ec     1C 4E 05 F1 | 	add	fp, #28
156f0     A7 FA 61 FC | 	wrlong	result1, fp
156f4                 | ' 
156f4                 | ' t1=pop() 'value
156f4                 | ' t2=pop() 
156f4                 | ' a=converttoint(t2) : v=converttoint(t1)
156f4                 | ' if a<$80000 then lpoke a,v else pslpoke a,v
156f4     04 4E 85 F1 | 	sub	fp, #4
156f8     A7 26 02 FB | 	rdlong	local01, fp
156fc     18 4E 85 F1 | 	sub	fp, #24
15700     00 04 00 FF 
15704     00 26 16 F2 | 	cmp	local01, ##524288 wc
15708     1C 00 90 3D |  if_ae	jmp	#LR__1740
1570c     18 4E 05 F1 | 	add	fp, #24
15710     A7 12 02 FB | 	rdlong	arg01, fp
15714     04 4E 05 F1 | 	add	fp, #4
15718     A7 14 02 FB | 	rdlong	arg02, fp
1571c     1C 4E 85 F1 | 	sub	fp, #28
15720     09 15 62 FC | 	wrlong	arg02, arg01
15724     18 00 90 FD | 	jmp	#LR__1741
15728                 | LR__1740
15728     18 4E 05 F1 | 	add	fp, #24
1572c     A7 12 02 FB | 	rdlong	arg01, fp
15730     04 4E 05 F1 | 	add	fp, #4
15734     A7 14 02 FB | 	rdlong	arg02, fp
15738     1C 4E 85 F1 | 	sub	fp, #28
1573c     94 DE B0 FD | 	call	#_pslpoke
15740                 | LR__1741
15740     A7 F0 03 F6 | 	mov	ptra, fp
15744     B2 00 A0 FD | 	call	#popregs_
15748                 | _do_lpoke_ret
15748     2D 00 64 FD | 	ret
1574c                 | 
1574c                 | ' 
1574c                 | ' '-------------------- memlo
1574c                 | ' 
1574c                 | ' sub do_memlo
1574c                 | _do_memlo
1574c     00 4A 05 F6 | 	mov	COUNT_, #0
15750     A8 00 A0 FD | 	call	#pushregs_
15754     0C F0 07 F1 | 	add	ptra, #12
15758     43 00 00 FF 
1575c     5C E4 05 F1 | 	add	objptr, ##34396
15760     F2 12 02 FB | 	rdlong	arg01, objptr
15764     43 00 00 FF 
15768     5C E4 85 F1 | 	sub	objptr, ##34396
1576c     A7 12 62 FC | 	wrlong	arg01, fp
15770     08 4E 05 F1 | 	add	fp, #8
15774     A7 3A 68 FC | 	wrlong	#29, fp
15778     08 4E 85 F1 | 	sub	fp, #8
1577c     A7 12 02 F6 | 	mov	arg01, fp
15780     54 7F BF FD | 	call	#_push
15784     A7 F0 03 F6 | 	mov	ptra, fp
15788     B2 00 A0 FD | 	call	#popregs_
1578c                 | _do_memlo_ret
1578c     2D 00 64 FD | 	ret
15790                 | 
15790                 | ' 
15790                 | ' '-------------------- memtop
15790                 | ' 
15790                 | ' sub do_memtop
15790                 | _do_memtop
15790     00 4A 05 F6 | 	mov	COUNT_, #0
15794     A8 00 A0 FD | 	call	#pushregs_
15798     0C F0 07 F1 | 	add	ptra, #12
1579c     52 00 00 FF 
157a0     98 E4 05 F1 | 	add	objptr, ##42136
157a4     F2 12 02 FB | 	rdlong	arg01, objptr
157a8     52 00 00 FF 
157ac     98 E4 85 F1 | 	sub	objptr, ##42136
157b0     A7 12 62 FC | 	wrlong	arg01, fp
157b4     08 4E 05 F1 | 	add	fp, #8
157b8     A7 3A 68 FC | 	wrlong	#29, fp
157bc     08 4E 85 F1 | 	sub	fp, #8
157c0     A7 12 02 F6 | 	mov	arg01, fp
157c4     10 7F BF FD | 	call	#_push
157c8     A7 F0 03 F6 | 	mov	ptra, fp
157cc     B2 00 A0 FD | 	call	#popregs_
157d0                 | _do_memtop_ret
157d0     2D 00 64 FD | 	ret
157d4                 | 
157d4                 | ' 
157d4                 | ' '-------------------- mid$
157d4                 | ' 
157d4                 | ' sub do_mid
157d4                 | _do_mid
157d4     00 4A 05 F6 | 	mov	COUNT_, #0
157d8     A8 00 A0 FD | 	call	#pushregs_
157dc     18 F0 07 F1 | 	add	ptra, #24
157e0     4A 00 00 FF 
157e4     80 E4 05 F1 | 	add	objptr, ##38016
157e8     F2 16 02 FB | 	rdlong	arg03, objptr
157ec     0B 15 02 F6 | 	mov	arg02, arg03
157f0     01 14 66 F0 | 	shl	arg02, #1
157f4     0B 15 02 F1 | 	add	arg02, arg03
157f8     02 14 66 F0 | 	shl	arg02, #2
157fc     03 00 00 FF 
15800     04 E4 85 F1 | 	sub	objptr, ##1540
15804     F2 14 02 F1 | 	add	arg02, objptr
15808     0A 17 02 FB | 	rdlong	arg03, arg02
1580c     0C 4E 05 F1 | 	add	fp, #12
15810     A7 16 62 FC | 	wrlong	arg03, fp
15814                 | ' 
15814                 | ' numpar=compiledline(lineptr_e).result.uresult
15814                 | ' if numpar<>3  then print "mid$: "; : printerror(39) : return
15814     0C 4E 85 F1 | 	sub	fp, #12
15818     03 16 0E F2 | 	cmp	arg03, #3 wz
1581c     47 00 00 FF 
15820     7C E4 85 F1 | 	sub	objptr, ##36476
15824     40 00 90 AD |  if_e	jmp	#LR__1750
15828     00 12 06 F6 | 	mov	arg01, #0
1582c     48 73 B1 FD | 	call	#__system___getiolock_0611
15830     FD 12 02 F6 | 	mov	arg01, result1
15834     18 16 B1 FD | 	call	#__system___lockmem
15838     B9 01 00 FF 
1583c     D5 15 06 F6 | 	mov	arg02, ##@LR__5949
15840     00 12 06 F6 | 	mov	arg01, #0
15844     00 16 06 F6 | 	mov	arg03, #0
15848     F8 22 B1 FD | 	call	#__system___basic_print_string
1584c     00 12 06 F6 | 	mov	arg01, #0
15850     24 73 B1 FD | 	call	#__system___getiolock_0611
15854     FD 00 68 FC | 	wrlong	#0, result1
15858     27 12 06 F6 | 	mov	arg01, #39
1585c     00 14 06 F6 | 	mov	arg02, #0
15860     D0 DB B0 FD | 	call	#_printerror
15864     2C 01 90 FD | 	jmp	#LR__1753
15868                 | LR__1750
15868     D4 7D BF FD | 	call	#_pop
1586c     FF 16 02 F6 | 	mov	arg03, result3
15870     A7 FA 61 FC | 	wrlong	result1, fp
15874     04 4E 05 F1 | 	add	fp, #4
15878     A7 FC 61 FC | 	wrlong	result2, fp
1587c     04 4E 05 F1 | 	add	fp, #4
15880     A7 16 62 FC | 	wrlong	arg03, fp
15884     08 4E 85 F1 | 	sub	fp, #8
15888     A7 12 02 F6 | 	mov	arg01, fp
1588c     94 7F BF FD | 	call	#_converttoint
15890     FD 16 02 F6 | 	mov	arg03, result1
15894     14 4E 05 F1 | 	add	fp, #20
15898     A7 16 62 FC | 	wrlong	arg03, fp
1589c     14 4E 85 F1 | 	sub	fp, #20
158a0     9C 7D BF FD | 	call	#_pop
158a4     FF 16 02 F6 | 	mov	arg03, result3
158a8     A7 FA 61 FC | 	wrlong	result1, fp
158ac     04 4E 05 F1 | 	add	fp, #4
158b0     A7 FC 61 FC | 	wrlong	result2, fp
158b4     04 4E 05 F1 | 	add	fp, #4
158b8     A7 16 62 FC | 	wrlong	arg03, fp
158bc     08 4E 85 F1 | 	sub	fp, #8
158c0     A7 12 02 F6 | 	mov	arg01, fp
158c4     5C 7F BF FD | 	call	#_converttoint
158c8     FD 16 02 F6 | 	mov	arg03, result1
158cc     10 4E 05 F1 | 	add	fp, #16
158d0     A7 16 62 FC | 	wrlong	arg03, fp
158d4     10 4E 85 F1 | 	sub	fp, #16
158d8     64 7D BF FD | 	call	#_pop
158dc     FF 16 02 F6 | 	mov	arg03, result3
158e0     A7 FA 61 FC | 	wrlong	result1, fp
158e4     04 4E 05 F1 | 	add	fp, #4
158e8     A7 FC 61 FC | 	wrlong	result2, fp
158ec     04 4E 05 F1 | 	add	fp, #4
158f0     A7 16 62 FC | 	wrlong	arg03, fp
158f4                 | ' t1=pop() : arg2=converttoint(t1)
158f4                 | ' t1=pop() : arg1=converttoint(t1)
158f4                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
158f4     08 4E 85 F1 | 	sub	fp, #8
158f8     2B 16 0E F2 | 	cmp	arg03, #43 wz
158fc     18 00 90 5D |  if_ne	jmp	#LR__1751
15900     A7 12 02 FB | 	rdlong	arg01, fp
15904     B0 7E BF FD | 	call	#_convertstring
15908     A7 FA 61 FC | 	wrlong	result1, fp
1590c     08 4E 05 F1 | 	add	fp, #8
15910     A7 3E 68 FC | 	wrlong	#31, fp
15914     08 4E 85 F1 | 	sub	fp, #8
15918                 | LR__1751
15918                 | ' if t1.result_type<>result_string then print "mid$: "; : printerror(15) : return 
15918     08 4E 05 F1 | 	add	fp, #8
1591c     A7 16 02 FB | 	rdlong	arg03, fp
15920     08 4E 85 F1 | 	sub	fp, #8
15924     1F 16 0E F2 | 	cmp	arg03, #31 wz
15928     40 00 90 AD |  if_e	jmp	#LR__1752
1592c     00 12 06 F6 | 	mov	arg01, #0
15930     44 72 B1 FD | 	call	#__system___getiolock_0611
15934     FD 12 02 F6 | 	mov	arg01, result1
15938     14 15 B1 FD | 	call	#__system___lockmem
1593c     B9 01 00 FF 
15940     DC 15 06 F6 | 	mov	arg02, ##@LR__5950
15944     00 12 06 F6 | 	mov	arg01, #0
15948     00 16 06 F6 | 	mov	arg03, #0
1594c     F4 21 B1 FD | 	call	#__system___basic_print_string
15950     00 12 06 F6 | 	mov	arg01, #0
15954     20 72 B1 FD | 	call	#__system___getiolock_0611
15958     FD 00 68 FC | 	wrlong	#0, result1
1595c     0F 12 06 F6 | 	mov	arg01, #15
15960     00 14 06 F6 | 	mov	arg02, #0
15964     CC DA B0 FD | 	call	#_printerror
15968     28 00 90 FD | 	jmp	#LR__1753
1596c                 | LR__1752
1596c     A7 12 02 FB | 	rdlong	arg01, fp
15970     10 4E 05 F1 | 	add	fp, #16
15974     A7 14 02 FB | 	rdlong	arg02, fp
15978     04 4E 05 F1 | 	add	fp, #4
1597c     A7 16 02 FB | 	rdlong	arg03, fp
15980     14 4E 85 F1 | 	sub	fp, #20
15984     5C 36 B1 FD | 	call	#__system__Mid_S
15988     A7 FA 61 FC | 	wrlong	result1, fp
1598c     A7 12 02 F6 | 	mov	arg01, fp
15990     44 7D BF FD | 	call	#_push
15994                 | LR__1753
15994     A7 F0 03 F6 | 	mov	ptra, fp
15998     B2 00 A0 FD | 	call	#popregs_
1599c                 | _do_mid_ret
1599c     2D 00 64 FD | 	ret
159a0                 | 
159a0                 | ' 
159a0                 | ' '-------------------- mkdir
159a0                 | ' 
159a0                 | ' sub do_mkdir
159a0                 | _do_mkdir
159a0     04 4A 05 F6 | 	mov	COUNT_, #4
159a4     A8 00 A0 FD | 	call	#pushregs_
159a8     94 7C BF FD | 	call	#_pop
159ac     FE 18 02 F6 | 	mov	arg04, result2
159b0     FF 16 02 F6 | 	mov	arg03, result3
159b4     FD 26 02 F6 | 	mov	local01, result1
159b8     0C 29 02 F6 | 	mov	local02, arg04
159bc     0B 2B 02 F6 | 	mov	local03, arg03
159c0                 | ' 
159c0                 | ' t1=pop()
159c0                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
159c0     2B 2A 0E F2 | 	cmp	local03, #43 wz
159c4     10 00 90 5D |  if_ne	jmp	#LR__1760
159c8     13 13 02 F6 | 	mov	arg01, local01
159cc     E8 7D BF FD | 	call	#_convertstring
159d0     FD 26 02 F6 | 	mov	local01, result1
159d4     1F 2A 06 F6 | 	mov	local03, #31
159d8                 | LR__1760
159d8                 | ' if t1.result_type<>result_string then printerror(15): return
159d8     1F 2A 0E F2 | 	cmp	local03, #31 wz
159dc     10 00 90 AD |  if_e	jmp	#LR__1761
159e0     0F 12 06 F6 | 	mov	arg01, #15
159e4     00 14 06 F6 | 	mov	arg02, #0
159e8     48 DA B0 FD | 	call	#_printerror
159ec     64 00 90 FD | 	jmp	#LR__1763
159f0                 | LR__1761
159f0     13 13 02 F6 | 	mov	arg01, local01
159f4     28 3D B1 FD | 	call	#__system___mkdir
159f8     FD 2C 0A F6 | 	mov	local04, result1 wz
159fc                 | ' filename$=t1.result.sresult
159fc                 | ' err=mkdir(filename$)
159fc                 | ' 'err=geterr() : 
159fc                 | ' if err<>0 then print "Cannot create a directory: system error "; err
159fc     54 00 90 AD |  if_e	jmp	#LR__1762
15a00     00 12 06 F6 | 	mov	arg01, #0
15a04     70 71 B1 FD | 	call	#__system___getiolock_0611
15a08     FD 12 02 F6 | 	mov	arg01, result1
15a0c     40 14 B1 FD | 	call	#__system___lockmem
15a10     B9 01 00 FF 
15a14     E3 15 06 F6 | 	mov	arg02, ##@LR__5951
15a18     00 12 06 F6 | 	mov	arg01, #0
15a1c     00 16 06 F6 | 	mov	arg03, #0
15a20     20 21 B1 FD | 	call	#__system___basic_print_string
15a24     00 12 06 F6 | 	mov	arg01, #0
15a28     16 15 02 F6 | 	mov	arg02, local04
15a2c     00 16 06 F6 | 	mov	arg03, #0
15a30     0A 18 06 F6 | 	mov	arg04, #10
15a34     50 21 B1 FD | 	call	#__system___basic_print_integer
15a38     00 12 06 F6 | 	mov	arg01, #0
15a3c     0A 14 06 F6 | 	mov	arg02, #10
15a40     00 16 06 F6 | 	mov	arg03, #0
15a44     A4 20 B1 FD | 	call	#__system___basic_print_char
15a48     00 12 06 F6 | 	mov	arg01, #0
15a4c     28 71 B1 FD | 	call	#__system___getiolock_0611
15a50     FD 00 68 FC | 	wrlong	#0, result1
15a54                 | LR__1762
15a54                 | LR__1763
15a54     A7 F0 03 F6 | 	mov	ptra, fp
15a58     B2 00 A0 FD | 	call	#popregs_
15a5c                 | _do_mkdir_ret
15a5c     2D 00 64 FD | 	ret
15a60                 | 
15a60                 | ' 
15a60                 | ' '-------------------- mode
15a60                 | ' 
15a60                 | ' sub do_mode
15a60                 | _do_mode
15a60     05 4A 05 F6 | 	mov	COUNT_, #5
15a64     A8 00 A0 FD | 	call	#pushregs_
15a68     D4 7B BF FD | 	call	#_pop
15a6c     FD 26 02 F6 | 	mov	local01, result1
15a70     FE 28 02 F6 | 	mov	local02, result2
15a74     FF 2A 02 F6 | 	mov	local03, result3
15a78                 | ' t1=pop() 
15a78                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
15a78     1E 2A 0E F2 | 	cmp	local03, #30 wz
15a7c     10 00 90 5D |  if_ne	jmp	#LR__1770
15a80     13 13 02 F6 | 	mov	arg01, local01
15a84     00 14 06 F6 | 	mov	arg02, #0
15a88     04 47 B1 FD | 	call	#__system___float_tointeger
15a8c     FD 26 02 F6 | 	mov	local01, result1
15a90                 | LR__1770
15a90                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
15a90     1F 2A 0E F2 | 	cmp	local03, #31 wz
15a94     18 00 90 5D |  if_ne	jmp	#LR__1771
15a98     13 13 02 F6 | 	mov	arg01, local01
15a9c     34 4A B1 FD | 	call	#__system____builtin_atof
15aa0     FD 12 02 F6 | 	mov	arg01, result1
15aa4     00 14 06 F6 | 	mov	arg02, #0
15aa8     E4 46 B1 FD | 	call	#__system___float_tointeger
15aac     FD 26 02 F6 | 	mov	local01, result1
15ab0                 | LR__1771
15ab0                 | ' select case t1.result.iresult
15ab0     13 2D 02 F6 | 	mov	local04, local01
15ab4     05 2C 26 F3 | 	fle	local04, #5
15ab8     30 2C 62 FD | 	jmprel	local04
15abc                 | LR__1772
15abc     14 00 90 FD | 	jmp	#LR__1773
15ac0     A8 00 90 FD | 	jmp	#LR__1774
15ac4     10 01 90 FD | 	jmp	#LR__1775
15ac8     78 01 90 FD | 	jmp	#LR__1776
15acc     E0 01 90 FD | 	jmp	#LR__1777
15ad0     70 02 90 FD | 	jmp	#LR__1778
15ad4                 | LR__1773
15ad4     37 00 00 FF 
15ad8     40 E4 05 F1 | 	add	objptr, ##28224
15adc     F2 02 68 FC | 	wrlong	#1, objptr
15ae0     04 E4 85 F1 | 	sub	objptr, #4
15ae4     F2 34 69 FC | 	wrlong	#154, objptr
15ae8     19 00 00 FF 
15aec     00 E5 05 F1 | 	add	objptr, ##13056
15af0     F2 02 68 FC | 	wrlong	#1, objptr
15af4     19 00 00 FF 
15af8     04 E5 85 F1 | 	sub	objptr, ##13060
15afc     F2 26 69 FC | 	wrlong	#147, objptr
15b00     37 00 00 FF 
15b04     38 E4 85 F1 | 	sub	objptr, ##28216
15b08     04 12 06 F6 | 	mov	arg01, #4
15b0c     3C F5 B0 FD | 	call	#_hg010b_spin2_setfontfamily
15b10     37 00 00 FF 
15b14     3C E4 05 F1 | 	add	objptr, ##28220
15b18     F2 12 02 FB | 	rdlong	arg01, objptr
15b1c     04 E4 85 F1 | 	sub	objptr, #4
15b20     F2 14 02 FB | 	rdlong	arg02, objptr
15b24                 | ' 
15b24                 | ' write_color:=ff
15b24     36 00 00 FF 
15b28     F7 E5 85 F1 | 	sub	objptr, ##28151
15b2c     F2 12 62 FC | 	wrlong	arg01, objptr
15b30                 | ' write_background:=bb
15b30     04 E4 05 F1 | 	add	objptr, #4
15b34     F2 14 62 FC | 	wrlong	arg02, objptr
15b38     01 00 00 FF 
15b3c     00 EA 05 F1 | 	add	ptr__dat__, ##512
15b40     52 00 00 FF 
15b44     5F E4 05 F1 | 	add	objptr, ##42079
15b48     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
15b4c     04 E4 85 F1 | 	sub	objptr, #4
15b50     03 00 80 FF 
15b54     F2 30 69 FC | 	wrlong	##1688, objptr
15b58     52 00 00 FF 
15b5c     A0 E4 85 F1 | 	sub	objptr, ##42144
15b60     01 00 00 FF 
15b64     00 EA 85 F1 | 	sub	ptr__dat__, ##512
15b68     D8 01 90 FD | 	jmp	#LR__1778
15b6c                 | LR__1774
15b6c     37 00 00 FF 
15b70     40 E4 05 F1 | 	add	objptr, ##28224
15b74     F2 00 68 FC | 	wrlong	#0, objptr
15b78     04 E4 85 F1 | 	sub	objptr, #4
15b7c     F2 2E 68 FC | 	wrlong	#23, objptr
15b80     19 00 00 FF 
15b84     00 E5 05 F1 | 	add	objptr, ##13056
15b88     F2 00 68 FC | 	wrlong	#0, objptr
15b8c     19 00 00 FF 
15b90     04 E5 85 F1 | 	sub	objptr, ##13060
15b94     F2 00 68 FC | 	wrlong	#0, objptr
15b98     37 00 00 FF 
15b9c     38 E4 85 F1 | 	sub	objptr, ##28216
15ba0     00 12 06 F6 | 	mov	arg01, #0
15ba4     A4 F4 B0 FD | 	call	#_hg010b_spin2_setfontfamily
15ba8     37 00 00 FF 
15bac     3C E4 05 F1 | 	add	objptr, ##28220
15bb0     F2 12 02 FB | 	rdlong	arg01, objptr
15bb4     04 E4 85 F1 | 	sub	objptr, #4
15bb8     F2 14 02 FB | 	rdlong	arg02, objptr
15bbc                 | ' 
15bbc                 | ' write_color:=ff
15bbc     36 00 00 FF 
15bc0     F7 E5 85 F1 | 	sub	objptr, ##28151
15bc4     F2 12 62 FC | 	wrlong	arg01, objptr
15bc8                 | ' write_background:=bb
15bc8     04 E4 05 F1 | 	add	objptr, #4
15bcc     F2 14 62 FC | 	wrlong	arg02, objptr
15bd0     45 E4 85 F1 | 	sub	objptr, #69
15bd4     6C 01 90 FD | 	jmp	#LR__1778
15bd8                 | LR__1775
15bd8     37 00 00 FF 
15bdc     40 E4 05 F1 | 	add	objptr, ##28224
15be0     F2 00 68 FC | 	wrlong	#0, objptr
15be4     04 E4 85 F1 | 	sub	objptr, #4
15be8     F2 6A 69 FC | 	wrlong	#181, objptr
15bec     19 00 00 FF 
15bf0     00 E5 05 F1 | 	add	objptr, ##13056
15bf4     F2 00 68 FC | 	wrlong	#0, objptr
15bf8     19 00 00 FF 
15bfc     04 E5 85 F1 | 	sub	objptr, ##13060
15c00     F2 00 68 FC | 	wrlong	#0, objptr
15c04     37 00 00 FF 
15c08     38 E4 85 F1 | 	sub	objptr, ##28216
15c0c     00 12 06 F6 | 	mov	arg01, #0
15c10     38 F4 B0 FD | 	call	#_hg010b_spin2_setfontfamily
15c14     37 00 00 FF 
15c18     3C E4 05 F1 | 	add	objptr, ##28220
15c1c     F2 12 02 FB | 	rdlong	arg01, objptr
15c20     04 E4 85 F1 | 	sub	objptr, #4
15c24     F2 14 02 FB | 	rdlong	arg02, objptr
15c28                 | ' 
15c28                 | ' write_color:=ff
15c28     36 00 00 FF 
15c2c     F7 E5 85 F1 | 	sub	objptr, ##28151
15c30     F2 12 62 FC | 	wrlong	arg01, objptr
15c34                 | ' write_background:=bb
15c34     04 E4 05 F1 | 	add	objptr, #4
15c38     F2 14 62 FC | 	wrlong	arg02, objptr
15c3c     45 E4 85 F1 | 	sub	objptr, #69
15c40     00 01 90 FD | 	jmp	#LR__1778
15c44                 | LR__1776
15c44     37 00 00 FF 
15c48     40 E4 05 F1 | 	add	objptr, ##28224
15c4c     F2 00 68 FC | 	wrlong	#0, objptr
15c50     04 E4 85 F1 | 	sub	objptr, #4
15c54     F2 1E 68 FC | 	wrlong	#15, objptr
15c58     19 00 00 FF 
15c5c     00 E5 05 F1 | 	add	objptr, ##13056
15c60     F2 00 68 FC | 	wrlong	#0, objptr
15c64     19 00 00 FF 
15c68     04 E5 85 F1 | 	sub	objptr, ##13060
15c6c     F2 00 68 FC | 	wrlong	#0, objptr
15c70     37 00 00 FF 
15c74     38 E4 85 F1 | 	sub	objptr, ##28216
15c78     00 12 06 F6 | 	mov	arg01, #0
15c7c     CC F3 B0 FD | 	call	#_hg010b_spin2_setfontfamily
15c80     37 00 00 FF 
15c84     3C E4 05 F1 | 	add	objptr, ##28220
15c88     F2 12 02 FB | 	rdlong	arg01, objptr
15c8c     04 E4 85 F1 | 	sub	objptr, #4
15c90     F2 14 02 FB | 	rdlong	arg02, objptr
15c94                 | ' 
15c94                 | ' write_color:=ff
15c94     36 00 00 FF 
15c98     F7 E5 85 F1 | 	sub	objptr, ##28151
15c9c     F2 12 62 FC | 	wrlong	arg01, objptr
15ca0                 | ' write_background:=bb
15ca0     04 E4 05 F1 | 	add	objptr, #4
15ca4     F2 14 62 FC | 	wrlong	arg02, objptr
15ca8     45 E4 85 F1 | 	sub	objptr, #69
15cac     94 00 90 FD | 	jmp	#LR__1778
15cb0                 | LR__1777
15cb0     37 00 00 FF 
15cb4     40 E4 05 F1 | 	add	objptr, ##28224
15cb8     F2 02 68 FC | 	wrlong	#1, objptr
15cbc     04 E4 85 F1 | 	sub	objptr, #4
15cc0     F2 02 68 FC | 	wrlong	#1, objptr
15cc4     19 00 00 FF 
15cc8     00 E5 05 F1 | 	add	objptr, ##13056
15ccc     F2 02 68 FC | 	wrlong	#1, objptr
15cd0     19 00 00 FF 
15cd4     04 E5 85 F1 | 	sub	objptr, ##13060
15cd8     F2 1C 68 FC | 	wrlong	#14, objptr
15cdc     37 00 00 FF 
15ce0     38 E4 85 F1 | 	sub	objptr, ##28216
15ce4     04 12 06 F6 | 	mov	arg01, #4
15ce8     60 F3 B0 FD | 	call	#_hg010b_spin2_setfontfamily
15cec     37 00 00 FF 
15cf0     3C E4 05 F1 | 	add	objptr, ##28220
15cf4     F2 12 02 FB | 	rdlong	arg01, objptr
15cf8     04 E4 85 F1 | 	sub	objptr, #4
15cfc     F2 14 02 FB | 	rdlong	arg02, objptr
15d00                 | ' 
15d00                 | ' write_color:=ff
15d00     36 00 00 FF 
15d04     F7 E5 85 F1 | 	sub	objptr, ##28151
15d08     F2 12 62 FC | 	wrlong	arg01, objptr
15d0c                 | ' write_background:=bb
15d0c     04 E4 05 F1 | 	add	objptr, #4
15d10     F2 14 62 FC | 	wrlong	arg02, objptr
15d14     07 00 00 FF 
15d18     82 EB 05 F1 | 	add	ptr__dat__, ##3970
15d1c     52 00 00 FF 
15d20     5F E4 05 F1 | 	add	objptr, ##42079
15d24     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
15d28     04 E4 85 F1 | 	sub	objptr, #4
15d2c     03 00 80 FF 
15d30     F2 30 69 FC | 	wrlong	##1688, objptr
15d34     52 00 00 FF 
15d38     A0 E4 85 F1 | 	sub	objptr, ##42144
15d3c     07 00 00 FF 
15d40     82 EB 85 F1 | 	sub	ptr__dat__, ##3970
15d44                 | LR__1778
15d44     52 00 00 FF 
15d48     9C E4 05 F1 | 	add	objptr, ##42140
15d4c     F2 26 62 FC | 	wrlong	local01, objptr
15d50     04 E4 85 F1 | 	sub	objptr, #4
15d54     F2 12 02 FB | 	rdlong	arg01, objptr
15d58     0F 00 00 FF 
15d5c     3C E4 85 F1 | 	sub	objptr, ##7740
15d60     F2 2E 02 FB | 	rdlong	local05, objptr
15d64     43 00 00 FF 
15d68     5C E4 85 F1 | 	sub	objptr, ##34396
15d6c     17 13 82 F1 | 	sub	arg01, local05
15d70     00 14 06 F6 | 	mov	arg02, #0
15d74     0A 16 06 F6 | 	mov	arg03, #10
15d78     A4 33 B1 FD | 	call	#__system__Number_S
15d7c     FD 12 02 F6 | 	mov	arg01, result1
15d80     BA 01 00 FF 
15d84     0C 14 06 F6 | 	mov	arg02, ##@LR__5952
15d88     20 11 B1 FD | 	call	#__system___string_concat
15d8c     50 00 00 FF 
15d90     38 E5 05 F1 | 	add	objptr, ##41272
15d94     F2 FA 61 FC | 	wrlong	result1, objptr
15d98     19 00 00 FF 
15d9c     FC E4 85 F1 | 	sub	objptr, ##13052
15da0     F2 12 02 FB | 	rdlong	arg01, objptr
15da4     04 E4 85 F1 | 	sub	objptr, #4
15da8     F2 14 02 FB | 	rdlong	arg02, objptr
15dac     37 00 00 FF 
15db0     38 E4 85 F1 | 	sub	objptr, ##28216
15db4     14 F4 B0 FD | 	call	#_hg010b_spin2_cls
15db8     BA 01 00 FF 
15dbc     1E 12 06 F6 | 	mov	arg01, ##@LR__5953
15dc0                 | ' 
15dc0                 | ' write(text)
15dc0     C8 F7 B0 FD | 	call	#_hg010b_spin2_write
15dc4                 | ' crlf
15dc4     C4 FC B0 FD | 	call	#_hg010b_spin2_crlf
15dc8     18 00 00 FF 
15dcc     40 EB 05 F1 | 	add	ptr__dat__, ##12608
15dd0     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
15dd4     18 00 00 FF 
15dd8     40 EB 85 F1 | 	sub	ptr__dat__, ##12608
15ddc                 | ' 
15ddc                 | ' write(text)
15ddc     AC F7 B0 FD | 	call	#_hg010b_spin2_write
15de0                 | ' crlf
15de0     A8 FC B0 FD | 	call	#_hg010b_spin2_crlf
15de4     50 00 00 FF 
15de8     38 E5 05 F1 | 	add	objptr, ##41272
15dec     F2 12 02 FB | 	rdlong	arg01, objptr
15df0     50 00 00 FF 
15df4     38 E5 85 F1 | 	sub	objptr, ##41272
15df8                 | ' 
15df8                 | ' write(text)
15df8     90 F7 B0 FD | 	call	#_hg010b_spin2_write
15dfc                 | ' crlf
15dfc     8C FC B0 FD | 	call	#_hg010b_spin2_crlf
15e00     A7 F0 03 F6 | 	mov	ptra, fp
15e04     B2 00 A0 FD | 	call	#popregs_
15e08                 | _do_mode_ret
15e08     2D 00 64 FD | 	ret
15e0c                 | 
15e0c                 | ' 
15e0c                 | ' '-------------------- mouse
15e0c                 | ' 
15e0c                 | ' sub do_mouse
15e0c                 | _do_mouse
15e0c     30 78 BF FD | 	call	#_pop
15e10     00 FA 4D F2 | 	cmps	result1, #0 wz
15e14                 | ' 
15e14                 | ' t1=pop()
15e14                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
15e14     14 00 90 5D |  if_ne	jmp	#LR__1780
15e18     10 12 06 F6 | 	mov	arg01, #16
15e1c     00 14 06 F6 | 	mov	arg02, #0
15e20     00 16 06 F6 | 	mov	arg03, #0
15e24     54 E6 B0 FD | 	call	#_hg010b_spin2_setspritesize
15e28     10 00 90 FD | 	jmp	#LR__1781
15e2c                 | LR__1780
15e2c     10 12 06 F6 | 	mov	arg01, #16
15e30     20 14 06 F6 | 	mov	arg02, #32
15e34     20 16 06 F6 | 	mov	arg03, #32
15e38     40 E6 B0 FD | 	call	#_hg010b_spin2_setspritesize
15e3c                 | LR__1781
15e3c                 | _do_mouse_ret
15e3c     2D 00 64 FD | 	ret
15e40                 | 
15e40                 | ' 
15e40                 | ' '-------------------- mousek
15e40                 | ' 
15e40                 | ' sub do_mousek
15e40                 | _do_mousek
15e40     00 4A 05 F6 | 	mov	COUNT_, #0
15e44     A8 00 A0 FD | 	call	#pushregs_
15e48     0C F0 07 F1 | 	add	ptra, #12
15e4c     08 4E 05 F1 | 	add	fp, #8
15e50     A7 3A 68 FC | 	wrlong	#29, fp
15e54     08 4E 85 F1 | 	sub	fp, #8
15e58     51 00 00 FF 
15e5c     50 E5 05 F1 | 	add	objptr, ##41808
15e60     F2 12 02 FB | 	rdlong	arg01, objptr
15e64     51 00 00 FF 
15e68     50 E5 85 F1 | 	sub	objptr, ##41808
15e6c     A7 12 62 FC | 	wrlong	arg01, fp
15e70     A7 12 02 F6 | 	mov	arg01, fp
15e74     60 78 BF FD | 	call	#_push
15e78     A7 F0 03 F6 | 	mov	ptra, fp
15e7c     B2 00 A0 FD | 	call	#popregs_
15e80                 | _do_mousek_ret
15e80     2D 00 64 FD | 	ret
15e84                 | 
15e84                 | ' 
15e84                 | ' '-------------------- mousew
15e84                 | ' 
15e84                 | ' sub do_mousew
15e84                 | _do_mousew
15e84     00 4A 05 F6 | 	mov	COUNT_, #0
15e88     A8 00 A0 FD | 	call	#pushregs_
15e8c     0C F0 07 F1 | 	add	ptra, #12
15e90     08 4E 05 F1 | 	add	fp, #8
15e94     A7 38 68 FC | 	wrlong	#28, fp
15e98     08 4E 85 F1 | 	sub	fp, #8
15e9c     51 00 00 FF 
15ea0     54 E5 05 F1 | 	add	objptr, ##41812
15ea4     F2 12 02 FB | 	rdlong	arg01, objptr
15ea8     51 00 00 FF 
15eac     54 E5 85 F1 | 	sub	objptr, ##41812
15eb0     A7 12 62 FC | 	wrlong	arg01, fp
15eb4     A7 12 02 F6 | 	mov	arg01, fp
15eb8     1C 78 BF FD | 	call	#_push
15ebc     A7 F0 03 F6 | 	mov	ptra, fp
15ec0     B2 00 A0 FD | 	call	#popregs_
15ec4                 | _do_mousew_ret
15ec4     2D 00 64 FD | 	ret
15ec8                 | 
15ec8                 | ' 
15ec8                 | ' '-------------------- mousex
15ec8                 | ' 
15ec8                 | ' sub do_mousex
15ec8                 | _do_mousex
15ec8     00 4A 05 F6 | 	mov	COUNT_, #0
15ecc     A8 00 A0 FD | 	call	#pushregs_
15ed0     0C F0 07 F1 | 	add	ptra, #12
15ed4     08 4E 05 F1 | 	add	fp, #8
15ed8     A7 3A 68 FC | 	wrlong	#29, fp
15edc     08 4E 85 F1 | 	sub	fp, #8
15ee0     51 00 00 FF 
15ee4     48 E5 05 F1 | 	add	objptr, ##41800
15ee8     F2 12 02 FB | 	rdlong	arg01, objptr
15eec     51 00 00 FF 
15ef0     48 E5 85 F1 | 	sub	objptr, ##41800
15ef4     A7 12 62 FC | 	wrlong	arg01, fp
15ef8     A7 12 02 F6 | 	mov	arg01, fp
15efc     D8 77 BF FD | 	call	#_push
15f00     A7 F0 03 F6 | 	mov	ptra, fp
15f04     B2 00 A0 FD | 	call	#popregs_
15f08                 | _do_mousex_ret
15f08     2D 00 64 FD | 	ret
15f0c                 | 
15f0c                 | ' 
15f0c                 | ' '-------------------- mousey
15f0c                 | ' 
15f0c                 | ' sub do_mousey
15f0c                 | _do_mousey
15f0c     00 4A 05 F6 | 	mov	COUNT_, #0
15f10     A8 00 A0 FD | 	call	#pushregs_
15f14     0C F0 07 F1 | 	add	ptra, #12
15f18     08 4E 05 F1 | 	add	fp, #8
15f1c     A7 3A 68 FC | 	wrlong	#29, fp
15f20     08 4E 85 F1 | 	sub	fp, #8
15f24     51 00 00 FF 
15f28     4C E5 05 F1 | 	add	objptr, ##41804
15f2c     F2 12 02 FB | 	rdlong	arg01, objptr
15f30     51 00 00 FF 
15f34     4C E5 85 F1 | 	sub	objptr, ##41804
15f38     A7 12 62 FC | 	wrlong	arg01, fp
15f3c     A7 12 02 F6 | 	mov	arg01, fp
15f40     94 77 BF FD | 	call	#_push
15f44     A7 F0 03 F6 | 	mov	ptra, fp
15f48     B2 00 A0 FD | 	call	#popregs_
15f4c                 | _do_mousey_ret
15f4c     2D 00 64 FD | 	ret
15f50                 | 
15f50                 | ' 
15f50                 | ' '------------------ new
15f50                 | ' 
15f50                 | ' sub do_new
15f50                 | _do_new
15f50     03 4A 05 F6 | 	mov	COUNT_, #3
15f54     A8 00 A0 FD | 	call	#pushregs_
15f58                 | ' 
15f58                 | ' if inrun=1 then inrun=2
15f58     50 00 00 FF 
15f5c     EC E4 05 F1 | 	add	objptr, ##41196
15f60     F2 16 02 FB | 	rdlong	arg03, objptr
15f64     50 00 00 FF 
15f68     EC E4 85 F1 | 	sub	objptr, ##41196
15f6c     01 16 0E F2 | 	cmp	arg03, #1 wz
15f70     50 00 00 AF 
15f74     EC E4 05 A1 |  if_e	add	objptr, ##41196
15f78     F2 04 68 AC |  if_e	wrlong	#2, objptr
15f7c     50 00 00 AF 
15f80     EC E4 85 A1 |  if_e	sub	objptr, ##41196
15f84     13 12 C6 F9 | 	decod	arg01, #19
15f88     01 14 66 F6 | 	neg	arg02, #1
15f8c     44 D6 B0 FD | 	call	#_pslpoke
15f90     35 00 00 FF 
15f94     08 E4 05 F1 | 	add	objptr, ##27144
15f98     F2 00 68 FC | 	wrlong	#0, objptr
15f9c                 | ' pslpoke(memlo,$FFFFFFFF)
15f9c                 | ' varnum=0 : for i=0 to maxvars: variables(i).name="" : variables(i).vartype=0: next i
15f9c     00 26 06 F6 | 	mov	local01, #0
15fa0     20 00 00 FF 
15fa4     10 E4 85 F1 | 	sub	objptr, ##16400
15fa8     97 1E 48 FB | 	callpa	#(@LR__1791-@LR__1790)>>2,fcache_load_ptr_
15fac                 | LR__1790
15fac     13 17 02 F6 | 	mov	arg03, local01
15fb0     04 16 66 F0 | 	shl	arg03, #4
15fb4     F2 16 02 F1 | 	add	arg03, objptr
15fb8     BA 01 00 FF 
15fbc     1F 14 06 F6 | 	mov	arg02, ##@LR__5954
15fc0     0B 15 62 FC | 	wrlong	arg02, arg03
15fc4     13 29 02 F6 | 	mov	local02, local01
15fc8     04 28 66 F0 | 	shl	local02, #4
15fcc     F2 28 02 F1 | 	add	local02, objptr
15fd0     0C 28 06 F1 | 	add	local02, #12
15fd4     14 01 68 FC | 	wrlong	#0, local02
15fd8     01 26 06 F1 | 	add	local01, #1
15fdc     02 00 00 FF 
15fe0     01 26 56 F2 | 	cmps	local01, ##1025 wc
15fe4     C4 FF 9F CD |  if_b	jmp	#LR__1790
15fe8                 | LR__1791
15fe8     35 00 00 FF 
15fec     90 E4 05 F1 | 	add	objptr, ##27280
15ff0     00 04 80 FF 
15ff4     F2 00 68 FC | 	wrlong	##524288, objptr
15ff8     06 00 00 FF 
15ffc     30 E4 05 F1 | 	add	objptr, ##3120
16000     00 04 80 FF 
16004     F2 00 68 FC | 	wrlong	##524288, objptr
16008     04 E4 05 F1 | 	add	objptr, #4
1600c     00 04 80 FF 
16010     F2 00 68 FC | 	wrlong	##524288, objptr
16014     0D 00 00 FF 
16018     64 E4 85 F1 | 	sub	objptr, ##6756
1601c     F2 00 68 FC | 	wrlong	#0, objptr
16020     07 00 00 FF 
16024     24 E4 05 F1 | 	add	objptr, ##3620
16028     F2 00 68 FC | 	wrlong	#0, objptr
1602c     07 00 00 FF 
16030     20 E4 85 F1 | 	sub	objptr, ##3616
16034     00 04 80 FF 
16038     F2 00 68 FC | 	wrlong	##524288, objptr
1603c     0D 00 00 FF 
16040     D0 E4 05 F1 | 	add	objptr, ##6864
16044     F2 00 68 FC | 	wrlong	#0, objptr
16048     BA 01 00 FF 
1604c     20 2A 06 F6 | 	mov	local03, ##@LR__5955
16050     01 00 00 FF 
16054     B0 E5 05 F1 | 	add	objptr, ##944
16058     F2 2A 62 FC | 	wrlong	local03, objptr
1605c     08 00 00 FF 
16060     50 E4 85 F1 | 	sub	objptr, ##4176
16064     F2 00 68 FC | 	wrlong	#0, objptr
16068     04 E4 05 F1 | 	add	objptr, #4
1606c     FF FF FF FF 
16070     F2 FE 6B FC | 	wrlong	##-1, objptr
16074     06 00 00 FF 
16078     A0 E4 05 F1 | 	add	objptr, ##3232
1607c     F2 00 68 FC | 	wrlong	#0, objptr
16080     04 E4 05 F1 | 	add	objptr, #4
16084     F2 00 68 FC | 	wrlong	#0, objptr
16088                 | ' programstart=memlo :runptr=memlo : runptr2=memlo
16088                 | ' stackpointer=0
16088                 | ' lineptr=0 
16088                 | ' programptr=memlo ': stringptr=0
16088                 | ' dataptr=0 : readline=""
16088                 | ' lastline=0 : lastlineptr=-1 :fortop=0 :gosubtop=0
16088                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
16088     00 26 06 F6 | 	mov	local01, #0
1608c     06 00 00 FF 
16090     9C E4 85 F1 | 	sub	objptr, ##3228
16094     97 16 48 FB | 	callpa	#(@LR__1793-@LR__1792)>>2,fcache_load_ptr_
16098                 | LR__1792
16098     13 29 02 F6 | 	mov	local02, local01
1609c     02 28 66 F0 | 	shl	local02, #2
160a0     13 29 02 F1 | 	add	local02, local01
160a4     02 28 66 F0 | 	shl	local02, #2
160a8     F2 28 02 F1 | 	add	local02, objptr
160ac     08 28 06 F1 | 	add	local02, #8
160b0     FF FF FF FF 
160b4     14 FF 6B FC | 	wrlong	##-1, local02
160b8     01 26 06 F1 | 	add	local01, #1
160bc     41 26 56 F2 | 	cmps	local01, #65 wc
160c0     D4 FF 9F CD |  if_b	jmp	#LR__1792
160c4                 | LR__1793
160c4     4A 00 00 FF 
160c8     98 E4 85 F1 | 	sub	objptr, ##38040
160cc                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i)) 
160cc     00 26 06 F6 | 	mov	local01, #0
160d0                 | LR__1794
160d0     13 29 02 F6 | 	mov	local02, local01
160d4     02 28 66 F0 | 	shl	local02, #2
160d8     52 00 00 FF 
160dc     54 E4 05 F1 | 	add	objptr, ##42068
160e0     F2 28 02 F1 | 	add	local02, objptr
160e4     14 2B 0A FB | 	rdlong	local03, local02 wz
160e8     52 00 00 FF 
160ec     54 E4 85 F1 | 	sub	objptr, ##42068
160f0     34 00 90 AD |  if_e	jmp	#LR__1795
160f4     13 13 02 F6 | 	mov	arg01, local01
160f8     00 14 06 F6 | 	mov	arg02, #0
160fc     00 16 06 F6 | 	mov	arg03, #0
16100     78 E3 B0 FD | 	call	#_hg010b_spin2_setspritesize
16104     13 29 02 F6 | 	mov	local02, local01
16108     02 28 66 F0 | 	shl	local02, #2
1610c     52 00 00 FF 
16110     54 E4 05 F1 | 	add	objptr, ##42068
16114     F2 28 02 F1 | 	add	local02, objptr
16118     14 13 02 FB | 	rdlong	arg01, local02
1611c     52 00 00 FF 
16120     54 E4 85 F1 | 	sub	objptr, ##42068
16124     04 50 B1 FD | 	call	#__system___gc_free
16128                 | LR__1795
16128     01 26 06 F1 | 	add	local01, #1
1612c     10 26 56 F2 | 	cmps	local01, #16 wc
16130     9C FF 9F CD |  if_b	jmp	#LR__1794
16134     52 00 00 FF 
16138     A8 E4 05 F1 | 	add	objptr, ##42152
1613c     00 C0 9F FF 
16140     F2 00 68 FC | 	wrlong	##1065353216, objptr
16144     04 E4 05 F1 | 	add	objptr, #4
16148     00 C0 9F FF 
1614c     F2 00 68 FC | 	wrlong	##1065353216, objptr
16150     52 00 00 FF 
16154     A8 E4 85 F1 | 	sub	objptr, ##42152
16158     F2 2A 02 FB | 	rdlong	local03, objptr
1615c     52 00 00 FF 
16160     94 E4 05 F1 | 	add	objptr, ##42132
16164     F2 2A 62 FC | 	wrlong	local03, objptr
16168     52 00 00 FF 
1616c     98 E4 85 F1 | 	sub	objptr, ##42136
16170     11 12 06 F6 | 	mov	arg01, #17
16174     08 14 06 F6 | 	mov	arg02, #8
16178     10 16 06 F6 | 	mov	arg03, #16
1617c     FC E2 B0 FD | 	call	#_hg010b_spin2_setspritesize
16180     10 12 06 F6 | 	mov	arg01, #16
16184     20 14 06 F6 | 	mov	arg02, #32
16188     20 16 06 F6 | 	mov	arg03, #32
1618c     EC E2 B0 FD | 	call	#_hg010b_spin2_setspritesize
16190     BA 01 00 FF 
16194     21 2A 06 F6 | 	mov	local03, ##@LR__5956
16198     52 00 00 FF 
1619c     C4 E4 05 F1 | 	add	objptr, ##42180
161a0     F2 2A 62 FC | 	wrlong	local03, objptr
161a4     52 00 00 FF 
161a8     C4 E4 85 F1 | 	sub	objptr, ##42180
161ac     7C C6 B0 FD | 	call	#_init_audio
161b0     A7 F0 03 F6 | 	mov	ptra, fp
161b4     B2 00 A0 FD | 	call	#popregs_
161b8                 | _do_new_ret
161b8     2D 00 64 FD | 	ret
161bc                 | 
161bc                 | ' 
161bc                 | ' '-------------------- next
161bc                 | ' 
161bc                 | ' sub do_next()
161bc                 | _do_next
161bc     04 4A 05 F6 | 	mov	COUNT_, #4
161c0     A8 00 A0 FD | 	call	#pushregs_
161c4     78 74 BF FD | 	call	#_pop
161c8     FD 26 02 F6 | 	mov	local01, result1
161cc     FE 28 02 F6 | 	mov	local02, result2
161d0     FF 2A 02 F6 | 	mov	local03, result3
161d4                 | ' t1=pop() :varnum=t1.result.uresult
161d4                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
161d4     50 00 00 FF 
161d8     30 E5 05 F1 | 	add	objptr, ##41264
161dc     F2 14 02 FB | 	rdlong	arg02, objptr
161e0     0A 13 02 F6 | 	mov	arg01, arg02
161e4     02 12 66 F0 | 	shl	arg01, #2
161e8     0A 13 02 F1 | 	add	arg01, arg02
161ec     02 12 66 F0 | 	shl	arg01, #2
161f0     06 00 00 FF 
161f4     98 E4 85 F1 | 	sub	objptr, ##3224
161f8     F2 12 02 F1 | 	add	arg01, objptr
161fc     08 12 06 F1 | 	add	arg01, #8
16200     09 15 02 FB | 	rdlong	arg02, arg01
16204     13 15 0A F2 | 	cmp	arg02, local01 wz
16208     4A 00 00 FF 
1620c     98 E4 85 F1 | 	sub	objptr, ##38040
16210     10 00 90 AD |  if_e	jmp	#LR__1800
16214     25 12 06 F6 | 	mov	arg01, #37
16218     00 14 06 F6 | 	mov	arg02, #0
1621c     14 D2 B0 FD | 	call	#_printerror
16220     54 03 90 FD | 	jmp	#LR__1807
16224                 | LR__1800
16224                 | ' if variables(varnum).vartype=result_float then variables(varnum).vartype=result_int : variables(varnum).value.iresult=round(variables(varnum).value.fresult)
16224     13 15 02 F6 | 	mov	arg02, local01
16228     04 14 66 F0 | 	shl	arg02, #4
1622c     14 00 00 FF 
16230     F8 E5 05 F1 | 	add	objptr, ##10744
16234     F2 14 02 F1 | 	add	arg02, objptr
16238     0C 14 06 F1 | 	add	arg02, #12
1623c     0A 15 02 FB | 	rdlong	arg02, arg02
16240     1E 14 0E F2 | 	cmp	arg02, #30 wz
16244     14 00 00 FF 
16248     F8 E5 85 F1 | 	sub	objptr, ##10744
1624c     54 00 90 5D |  if_ne	jmp	#LR__1801
16250     13 15 02 F6 | 	mov	arg02, local01
16254     04 14 66 F0 | 	shl	arg02, #4
16258     14 00 00 FF 
1625c     F8 E5 05 F1 | 	add	objptr, ##10744
16260     F2 14 02 F1 | 	add	arg02, objptr
16264     0C 14 06 F1 | 	add	arg02, #12
16268     0A 39 68 FC | 	wrlong	#28, arg02
1626c     13 2D 02 F6 | 	mov	local04, local01
16270     04 2C 66 F0 | 	shl	local04, #4
16274     F2 2C 02 F1 | 	add	local04, objptr
16278     13 15 02 F6 | 	mov	arg02, local01
1627c     04 14 66 F0 | 	shl	arg02, #4
16280     F2 14 02 F1 | 	add	arg02, objptr
16284     04 14 06 F1 | 	add	arg02, #4
16288     0A 13 02 FB | 	rdlong	arg01, arg02
1628c     14 00 00 FF 
16290     F8 E5 85 F1 | 	sub	objptr, ##10744
16294     01 14 06 F6 | 	mov	arg02, #1
16298     F4 3E B1 FD | 	call	#__system___float_tointeger
1629c     04 2C 06 F1 | 	add	local04, #4
162a0     16 FB 61 FC | 	wrlong	result1, local04
162a4                 | LR__1801
162a4     50 00 00 FF 
162a8     30 E5 05 F1 | 	add	objptr, ##41264
162ac     F2 2C 02 FB | 	rdlong	local04, objptr
162b0     16 15 02 F6 | 	mov	arg02, local04
162b4     02 14 66 F0 | 	shl	arg02, #2
162b8     16 15 02 F1 | 	add	arg02, local04
162bc     02 14 66 F0 | 	shl	arg02, #2
162c0     06 00 00 FF 
162c4     98 E4 85 F1 | 	sub	objptr, ##3224
162c8     F2 14 02 F1 | 	add	arg02, objptr
162cc     0C 14 06 F1 | 	add	arg02, #12
162d0     0A FF 01 FB | 	rdlong	result3, arg02
162d4     13 2D 02 F6 | 	mov	local04, local01
162d8     04 2C 66 F0 | 	shl	local04, #4
162dc     35 00 00 FF 
162e0     A0 E4 85 F1 | 	sub	objptr, ##27296
162e4     F2 2C 02 F1 | 	add	local04, objptr
162e8     13 15 02 F6 | 	mov	arg02, local01
162ec     04 14 66 F0 | 	shl	arg02, #4
162f0     F2 14 02 F1 | 	add	arg02, objptr
162f4     04 14 06 F1 | 	add	arg02, #4
162f8     0A 13 02 FB | 	rdlong	arg01, arg02
162fc     FF 12 02 F1 | 	add	arg01, result3
16300     04 2C 06 F1 | 	add	local04, #4
16304     16 13 62 FC | 	wrlong	arg01, local04
16308                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
16308                 | ' if fortable(fortop).stepval>=0 then
16308     3B 00 00 FF 
1630c     38 E5 05 F1 | 	add	objptr, ##30520
16310     F2 2C 02 FB | 	rdlong	local04, objptr
16314     16 13 02 F6 | 	mov	arg01, local04
16318     02 12 66 F0 | 	shl	arg01, #2
1631c     16 13 02 F1 | 	add	arg01, local04
16320     02 12 66 F0 | 	shl	arg01, #2
16324     06 00 00 FF 
16328     98 E4 85 F1 | 	sub	objptr, ##3224
1632c     F2 12 02 F1 | 	add	arg01, objptr
16330     0C 12 06 F1 | 	add	arg01, #12
16334     09 13 02 FB | 	rdlong	arg01, arg01
16338     00 12 56 F2 | 	cmps	arg01, #0 wc
1633c     4A 00 00 FF 
16340     98 E4 85 F1 | 	sub	objptr, ##38040
16344     78 00 90 CD |  if_b	jmp	#LR__1802
16348                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
16348     04 26 66 F0 | 	shl	local01, #4
1634c     14 00 00 FF 
16350     F8 E5 05 F1 | 	add	objptr, ##10744
16354     F2 26 02 F1 | 	add	local01, objptr
16358     3B 00 00 FF 
1635c     38 E5 05 F1 | 	add	objptr, ##30520
16360     F2 12 02 FB | 	rdlong	arg01, objptr
16364     09 2D 02 F6 | 	mov	local04, arg01
16368     02 2C 66 F0 | 	shl	local04, #2
1636c     09 2D 02 F1 | 	add	local04, arg01
16370     02 2C 66 F0 | 	shl	local04, #2
16374     06 00 00 FF 
16378     98 E4 85 F1 | 	sub	objptr, ##3224
1637c     F2 2C 02 F1 | 	add	local04, objptr
16380     04 26 06 F1 | 	add	local01, #4
16384     13 27 02 FB | 	rdlong	local01, local01
16388     10 2C 06 F1 | 	add	local04, #16
1638c     16 2D 02 FB | 	rdlong	local04, local04
16390     16 27 5A F2 | 	cmps	local01, local04 wcz
16394     4A 00 00 FF 
16398     98 E4 85 F1 | 	sub	objptr, ##38040
1639c     9C 00 90 ED |  if_be	jmp	#LR__1804
163a0     50 00 00 FF 
163a4     30 E5 05 F1 | 	add	objptr, ##41264
163a8     F2 2C 02 FB | 	rdlong	local04, objptr
163ac     01 2C 86 F1 | 	sub	local04, #1
163b0     F2 2C 62 FC | 	wrlong	local04, objptr
163b4     50 00 00 FF 
163b8     30 E5 85 F1 | 	sub	objptr, ##41264
163bc     B8 01 90 FD | 	jmp	#LR__1807
163c0                 | LR__1802
163c0                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
163c0     13 2D 02 F6 | 	mov	local04, local01
163c4     04 2C 66 F0 | 	shl	local04, #4
163c8     14 00 00 FF 
163cc     F8 E5 05 F1 | 	add	objptr, ##10744
163d0     F2 2C 02 F1 | 	add	local04, objptr
163d4     3B 00 00 FF 
163d8     38 E5 05 F1 | 	add	objptr, ##30520
163dc     F2 26 02 FB | 	rdlong	local01, objptr
163e0     13 13 02 F6 | 	mov	arg01, local01
163e4     02 12 66 F0 | 	shl	arg01, #2
163e8     13 13 02 F1 | 	add	arg01, local01
163ec     02 12 66 F0 | 	shl	arg01, #2
163f0     06 00 00 FF 
163f4     98 E4 85 F1 | 	sub	objptr, ##3224
163f8     F2 12 02 F1 | 	add	arg01, objptr
163fc     04 2C 06 F1 | 	add	local04, #4
16400     16 2D 02 FB | 	rdlong	local04, local04
16404     10 12 06 F1 | 	add	arg01, #16
16408     09 13 02 FB | 	rdlong	arg01, arg01
1640c     09 2D 52 F2 | 	cmps	local04, arg01 wc
16410     4A 00 00 FF 
16414     98 E4 85 F1 | 	sub	objptr, ##38040
16418     20 00 90 3D |  if_ae	jmp	#LR__1803
1641c     50 00 00 FF 
16420     30 E5 05 F1 | 	add	objptr, ##41264
16424     F2 2C 02 FB | 	rdlong	local04, objptr
16428     01 2C 86 F1 | 	sub	local04, #1
1642c     F2 2C 62 FC | 	wrlong	local04, objptr
16430     50 00 00 FF 
16434     30 E5 85 F1 | 	sub	objptr, ##41264
16438     3C 01 90 FD | 	jmp	#LR__1807
1643c                 | LR__1803
1643c                 | LR__1804
1643c                 | ' ' if not returned, goto pointer 
1643c                 | ' if inrun>0 andalso runptr<>fortable(fortop).lineptr then
1643c     50 00 00 FF 
16440     EC E4 05 F1 | 	add	objptr, ##41196
16444     F2 2C 02 FB | 	rdlong	local04, objptr
16448     50 00 00 FF 
1644c     EC E4 85 F1 | 	sub	objptr, ##41196
16450     01 2C 16 F2 | 	cmp	local04, #1 wc
16454     DC 00 90 CD |  if_b	jmp	#LR__1805
16458     50 00 00 FF 
1645c     30 E5 05 F1 | 	add	objptr, ##41264
16460     F2 2C 02 FB | 	rdlong	local04, objptr
16464     16 27 02 F6 | 	mov	local01, local04
16468     02 26 66 F0 | 	shl	local01, #2
1646c     16 27 02 F1 | 	add	local01, local04
16470     02 26 66 F0 | 	shl	local01, #2
16474     06 00 00 FF 
16478     98 E4 85 F1 | 	sub	objptr, ##3224
1647c     F2 26 02 F1 | 	add	local01, objptr
16480     06 00 00 FF 
16484     20 E4 05 F1 | 	add	objptr, ##3104
16488     F2 2C 02 FB | 	rdlong	local04, objptr
1648c     50 00 00 FF 
16490     B8 E4 85 F1 | 	sub	objptr, ##41144
16494     13 27 02 FB | 	rdlong	local01, local01
16498     13 2D 0A F2 | 	cmp	local04, local01 wz
1649c     94 00 90 AD |  if_e	jmp	#LR__1805
164a0     50 00 00 FF 
164a4     30 E5 05 F1 | 	add	objptr, ##41264
164a8     F2 2C 02 FB | 	rdlong	local04, objptr
164ac     16 27 02 F6 | 	mov	local01, local04
164b0     02 26 66 F0 | 	shl	local01, #2
164b4     16 27 02 F1 | 	add	local01, local04
164b8     02 26 66 F0 | 	shl	local01, #2
164bc     06 00 00 FF 
164c0     98 E4 85 F1 | 	sub	objptr, ##3224
164c4     F2 26 02 F1 | 	add	local01, objptr
164c8     13 27 02 FB | 	rdlong	local01, local01
164cc     06 00 00 FF 
164d0     20 E4 05 F1 | 	add	objptr, ##3104
164d4     F2 26 62 FC | 	wrlong	local01, objptr
164d8     78 E4 05 F1 | 	add	objptr, #120
164dc     F2 2C 02 FB | 	rdlong	local04, objptr
164e0     16 27 02 F6 | 	mov	local01, local04
164e4     02 26 66 F0 | 	shl	local01, #2
164e8     16 27 02 F1 | 	add	local01, local04
164ec     02 26 66 F0 | 	shl	local01, #2
164f0     06 00 00 FF 
164f4     98 E4 85 F1 | 	sub	objptr, ##3224
164f8     F2 26 02 F1 | 	add	local01, objptr
164fc     04 26 06 F1 | 	add	local01, #4
16500     13 27 02 FB | 	rdlong	local01, local01
16504     06 00 00 FF 
16508     24 E4 05 F1 | 	add	objptr, ##3108
1650c     F2 26 62 FC | 	wrlong	local01, objptr
16510     06 00 00 FF 
16514     40 E4 85 F1 | 	sub	objptr, ##3136
16518     F2 2C 02 FB | 	rdlong	local04, objptr
1651c     01 2C 86 F1 | 	sub	local04, #1
16520     04 E4 05 F1 | 	add	objptr, #4
16524     F2 2C 62 FC | 	wrlong	local04, objptr
16528     4A 00 00 FF 
1652c     80 E4 85 F1 | 	sub	objptr, ##38016
16530     44 00 90 FD | 	jmp	#LR__1806
16534                 | LR__1805
16534     50 00 00 FF 
16538     30 E5 05 F1 | 	add	objptr, ##41264
1653c     F2 2C 02 FB | 	rdlong	local04, objptr
16540     16 27 02 F6 | 	mov	local01, local04
16544     02 26 66 F0 | 	shl	local01, #2
16548     16 27 02 F1 | 	add	local01, local04
1654c     02 26 66 F0 | 	shl	local01, #2
16550     06 00 00 FF 
16554     98 E4 85 F1 | 	sub	objptr, ##3224
16558     F2 26 02 F1 | 	add	local01, objptr
1655c     04 26 06 F1 | 	add	local01, #4
16560     13 27 02 FB | 	rdlong	local01, local01
16564     01 26 86 F1 | 	sub	local01, #1
16568     18 E4 85 F1 | 	sub	objptr, #24
1656c     F2 26 62 FC | 	wrlong	local01, objptr
16570     4A 00 00 FF 
16574     80 E4 85 F1 | 	sub	objptr, ##38016
16578                 | LR__1806
16578                 | LR__1807
16578     A7 F0 03 F6 | 	mov	ptra, fp
1657c     B2 00 A0 FD | 	call	#popregs_
16580                 | _do_next_ret
16580     2D 00 64 FD | 	ret
16584                 | 
16584                 | ' 
16584                 | ' '-------------------- no command (print "Unknown command")
16584                 | ' 
16584                 | ' sub do_no_command
16584                 | _do_no_command
16584     50 00 00 FF 
16588     F0 E4 05 F1 | 	add	objptr, ##41200
1658c     F2 14 02 FB | 	rdlong	arg02, objptr
16590     50 00 00 FF 
16594     F0 E4 85 F1 | 	sub	objptr, ##41200
16598     17 12 06 F6 | 	mov	arg01, #23
1659c     94 CE B0 FD | 	call	#_printerror
165a0                 | _do_no_command_ret
165a0     2D 00 64 FD | 	ret
165a4                 | 
165a4                 | ' 
165a4                 | ' '-------------------- nothing
165a4                 | ' 
165a4                 | ' sub do_nothing					' a placeholder for tokens that don't do anything by themselves
165a4                 | _do_nothing
165a4                 | _do_nothing_ret
165a4     2D 00 64 FD | 	ret
165a8                 | 
165a8                 | ' 
165a8                 | ' '-------------------- on
165a8                 | ' 
165a8                 | ' sub do_on
165a8                 | _do_on
165a8     01 4A 05 F6 | 	mov	COUNT_, #1
165ac     A8 00 A0 FD | 	call	#pushregs_
165b0     18 F0 07 F1 | 	add	ptra, #24
165b4     4A 00 00 FF 
165b8     80 E4 05 F1 | 	add	objptr, ##38016
165bc     F2 12 02 FB | 	rdlong	arg01, objptr
165c0     09 FD 01 F6 | 	mov	result2, arg01
165c4     01 FC 65 F0 | 	shl	result2, #1
165c8     09 FD 01 F1 | 	add	result2, arg01
165cc     02 FC 65 F0 | 	shl	result2, #2
165d0     03 00 00 FF 
165d4     04 E4 85 F1 | 	sub	objptr, ##1540
165d8     F2 FC 01 F1 | 	add	result2, objptr
165dc     FE 12 02 FB | 	rdlong	arg01, result2
165e0     14 4E 05 F1 | 	add	fp, #20
165e4     A7 12 62 FC | 	wrlong	arg01, fp
165e8     03 00 00 FF 
165ec     04 E4 05 F1 | 	add	objptr, ##1540
165f0     F2 12 02 FB | 	rdlong	arg01, objptr
165f4     09 27 02 F6 | 	mov	local01, arg01
165f8     01 26 66 F0 | 	shl	local01, #1
165fc     09 27 02 F1 | 	add	local01, arg01
16600     02 26 66 F0 | 	shl	local01, #2
16604     03 00 00 FF 
16608     04 E4 85 F1 | 	sub	objptr, ##1540
1660c     F2 26 02 F1 | 	add	local01, objptr
16610     04 26 06 F1 | 	add	local01, #4
16614     13 27 02 FB | 	rdlong	local01, local01
16618     08 4E 85 F1 | 	sub	fp, #8
1661c     A7 26 62 FC | 	wrlong	local01, fp
16620     0C 4E 85 F1 | 	sub	fp, #12
16624     47 00 00 FF 
16628     7C E4 85 F1 | 	sub	objptr, ##36476
1662c     10 70 BF FD | 	call	#_pop
16630     FF 26 02 F6 | 	mov	local01, result3
16634     A7 FA 61 FC | 	wrlong	result1, fp
16638     04 4E 05 F1 | 	add	fp, #4
1663c     A7 FC 61 FC | 	wrlong	result2, fp
16640     04 4E 05 F1 | 	add	fp, #4
16644     A7 26 62 FC | 	wrlong	local01, fp
16648     08 4E 85 F1 | 	sub	fp, #8
1664c     A7 12 02 F6 | 	mov	arg01, fp
16650     D0 71 BF FD | 	call	#_converttoint
16654     10 4E 05 F1 | 	add	fp, #16
16658     A7 FA 61 FC | 	wrlong	result1, fp
1665c                 | ' 
1665c                 | ' numpar=compiledline(lineptr_e).result.uresult
1665c                 | ' skip=compiledline(lineptr_e).result.twowords(1)
1665c                 | ' t1=pop()
1665c                 | ' t=converttoint(t1)
1665c                 | ' if t<1 orelse t>numpar then return
1665c     10 4E 85 F1 | 	sub	fp, #16
16660     01 FA 55 F2 | 	cmps	result1, #1 wc
16664     58 00 90 CD |  if_b	jmp	#LR__1810
16668     10 4E 05 F1 | 	add	fp, #16
1666c     A7 26 02 FB | 	rdlong	local01, fp
16670     04 4E 05 F1 | 	add	fp, #4
16674     A7 12 02 FB | 	rdlong	arg01, fp
16678     14 4E 85 F1 | 	sub	fp, #20
1667c     09 27 5A F2 | 	cmps	local01, arg01 wcz
16680     3C 00 90 1D |  if_a	jmp	#LR__1810
16684     10 4E 05 F1 | 	add	fp, #16
16688     A7 26 02 FB | 	rdlong	local01, fp
1668c     01 26 86 F1 | 	sub	local01, #1
16690     04 4E 85 F1 | 	sub	fp, #4
16694     A7 12 02 FB | 	rdlong	arg01, fp
16698     13 13 02 FD | 	qmul	arg01, local01
1669c     4A 00 00 FF 
166a0     80 E4 05 F1 | 	add	objptr, ##38016
166a4     F2 26 02 FB | 	rdlong	local01, objptr
166a8     0C 4E 85 F1 | 	sub	fp, #12
166ac     18 12 62 FD | 	getqx	arg01
166b0     09 27 02 F1 | 	add	local01, arg01
166b4     F2 26 62 FC | 	wrlong	local01, objptr
166b8     4A 00 00 FF 
166bc     80 E4 85 F1 | 	sub	objptr, ##38016
166c0                 | LR__1810
166c0     A7 F0 03 F6 | 	mov	ptra, fp
166c4     B2 00 A0 FD | 	call	#popregs_
166c8                 | _do_on_ret
166c8     2D 00 64 FD | 	ret
166cc                 | 
166cc                 | ' 
166cc                 | ' '-------------------- open
166cc                 | ' 
166cc                 | ' sub do_open
166cc                 | _do_open
166cc     02 4A 05 F6 | 	mov	COUNT_, #2
166d0     A8 00 A0 FD | 	call	#pushregs_
166d4     20 F0 07 F1 | 	add	ptra, #32
166d8     4A 00 00 FF 
166dc     80 E4 05 F1 | 	add	objptr, ##38016
166e0     F2 16 02 FB | 	rdlong	arg03, objptr
166e4     0B 15 02 F6 | 	mov	arg02, arg03
166e8     01 14 66 F0 | 	shl	arg02, #1
166ec     0B 15 02 F1 | 	add	arg02, arg03
166f0     02 14 66 F0 | 	shl	arg02, #2
166f4     03 00 00 FF 
166f8     04 E4 85 F1 | 	sub	objptr, ##1540
166fc     F2 14 02 F1 | 	add	arg02, objptr
16700     0A 17 02 FB | 	rdlong	arg03, arg02
16704     10 4E 05 F1 | 	add	fp, #16
16708     A7 16 62 FC | 	wrlong	arg03, fp
1670c     10 4E 85 F1 | 	sub	fp, #16
16710     47 00 00 FF 
16714     7C E4 85 F1 | 	sub	objptr, ##36476
16718     24 6F BF FD | 	call	#_pop
1671c     FF 16 02 F6 | 	mov	arg03, result3
16720     A7 FA 61 FC | 	wrlong	result1, fp
16724     04 4E 05 F1 | 	add	fp, #4
16728     A7 FC 61 FC | 	wrlong	result2, fp
1672c     04 4E 05 F1 | 	add	fp, #4
16730     A7 16 62 FC | 	wrlong	arg03, fp
16734                 | ' 
16734                 | ' numpar=compiledline(lineptr_e).result.uresult
16734                 | ' 
16734                 | ' t1=pop()
16734                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
16734     08 4E 85 F1 | 	sub	fp, #8
16738     2B 16 0E F2 | 	cmp	arg03, #43 wz
1673c     18 00 90 5D |  if_ne	jmp	#LR__1820
16740     A7 12 02 FB | 	rdlong	arg01, fp
16744     70 70 BF FD | 	call	#_convertstring
16748     A7 FA 61 FC | 	wrlong	result1, fp
1674c     08 4E 05 F1 | 	add	fp, #8
16750     A7 3E 68 FC | 	wrlong	#31, fp
16754     08 4E 85 F1 | 	sub	fp, #8
16758                 | LR__1820
16758                 | ' if t1.result_type<>result_string then  print "filename expected" : return  ' error here
16758     08 4E 05 F1 | 	add	fp, #8
1675c     A7 16 02 FB | 	rdlong	arg03, fp
16760     08 4E 85 F1 | 	sub	fp, #8
16764     1F 16 0E F2 | 	cmp	arg03, #31 wz
16768     44 00 90 AD |  if_e	jmp	#LR__1821
1676c     00 12 06 F6 | 	mov	arg01, #0
16770     04 64 B1 FD | 	call	#__system___getiolock_0611
16774     FD 12 02 F6 | 	mov	arg01, result1
16778     D4 06 B1 FD | 	call	#__system___lockmem
1677c     BA 01 00 FF 
16780     2C 14 06 F6 | 	mov	arg02, ##@LR__5957
16784     00 12 06 F6 | 	mov	arg01, #0
16788     00 16 06 F6 | 	mov	arg03, #0
1678c     B4 13 B1 FD | 	call	#__system___basic_print_string
16790     00 12 06 F6 | 	mov	arg01, #0
16794     0A 14 06 F6 | 	mov	arg02, #10
16798     00 16 06 F6 | 	mov	arg03, #0
1679c     4C 13 B1 FD | 	call	#__system___basic_print_char
167a0     00 12 06 F6 | 	mov	arg01, #0
167a4     D0 63 B1 FD | 	call	#__system___getiolock_0611
167a8     FD 00 68 FC | 	wrlong	#0, result1
167ac     28 02 90 FD | 	jmp	#LR__1832
167b0                 | LR__1821
167b0     A7 16 02 FB | 	rdlong	arg03, fp
167b4     0C 4E 05 F1 | 	add	fp, #12
167b8     A7 16 62 FC | 	wrlong	arg03, fp
167bc     0C 4E 85 F1 | 	sub	fp, #12
167c0     7C 6E BF FD | 	call	#_pop
167c4     FF 16 02 F6 | 	mov	arg03, result3
167c8     A7 FA 61 FC | 	wrlong	result1, fp
167cc     04 4E 05 F1 | 	add	fp, #4
167d0     A7 FC 61 FC | 	wrlong	result2, fp
167d4     04 4E 05 F1 | 	add	fp, #4
167d8     A7 16 62 FC | 	wrlong	arg03, fp
167dc                 | ' filename=t1.result.sresult
167dc                 | ' t1=pop()
167dc                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
167dc     08 4E 85 F1 | 	sub	fp, #8
167e0     2B 16 0E F2 | 	cmp	arg03, #43 wz
167e4     18 00 90 5D |  if_ne	jmp	#LR__1822
167e8     A7 12 02 FB | 	rdlong	arg01, fp
167ec     C8 6F BF FD | 	call	#_convertstring
167f0     A7 FA 61 FC | 	wrlong	result1, fp
167f4     08 4E 05 F1 | 	add	fp, #8
167f8     A7 3E 68 FC | 	wrlong	#31, fp
167fc     08 4E 85 F1 | 	sub	fp, #8
16800                 | LR__1822
16800     14 4E 05 F1 | 	add	fp, #20
16804     A7 00 68 FC | 	wrlong	#0, fp
16808                 | ' mode=0
16808                 | ' if t1.result_type=result_string then
16808     0C 4E 85 F1 | 	sub	fp, #12
1680c     A7 14 02 FB | 	rdlong	arg02, fp
16810     08 4E 85 F1 | 	sub	fp, #8
16814     1F 14 0E F2 | 	cmp	arg02, #31 wz
16818     64 00 90 5D |  if_ne	jmp	#LR__1823
1681c                 | '   if t1.result.sresult="read" then mode=1
1681c     A7 12 02 FB | 	rdlong	arg01, fp
16820     BA 01 00 FF 
16824     3E 14 06 F6 | 	mov	arg02, ##@LR__5958
16828     4C 06 B1 FD | 	call	#__system___string_cmp
1682c     00 FA 0D F2 | 	cmp	result1, #0 wz
16830     14 4E 05 A1 |  if_e	add	fp, #20
16834     A7 02 68 AC |  if_e	wrlong	#1, fp
16838     14 4E 85 A1 |  if_e	sub	fp, #20
1683c                 | '   if t1.result.sresult="write" then mode=2
1683c     A7 12 02 FB | 	rdlong	arg01, fp
16840     BA 01 00 FF 
16844     43 14 06 F6 | 	mov	arg02, ##@LR__5959
16848     2C 06 B1 FD | 	call	#__system___string_cmp
1684c     00 FA 0D F2 | 	cmp	result1, #0 wz
16850     14 4E 05 A1 |  if_e	add	fp, #20
16854     A7 04 68 AC |  if_e	wrlong	#2, fp
16858     14 4E 85 A1 |  if_e	sub	fp, #20
1685c                 | '   if t1.result.sresult="append" then mode=4
1685c     A7 12 02 FB | 	rdlong	arg01, fp
16860     BA 01 00 FF 
16864     49 14 06 F6 | 	mov	arg02, ##@LR__5960
16868     0C 06 B1 FD | 	call	#__system___string_cmp
1686c     00 FA 0D F2 | 	cmp	result1, #0 wz
16870     14 4E 05 A1 |  if_e	add	fp, #20
16874     A7 08 68 AC |  if_e	wrlong	#4, fp
16878     14 4E 85 A1 |  if_e	sub	fp, #20
1687c     14 00 90 FD | 	jmp	#LR__1824
16880                 | LR__1823
16880     A7 12 02 F6 | 	mov	arg01, fp
16884     9C 6F BF FD | 	call	#_converttoint
16888     14 4E 05 F1 | 	add	fp, #20
1688c     A7 FA 61 FC | 	wrlong	result1, fp
16890     14 4E 85 F1 | 	sub	fp, #20
16894                 | LR__1824
16894     A8 6D BF FD | 	call	#_pop
16898     FF 16 02 F6 | 	mov	arg03, result3
1689c     A7 FA 61 FC | 	wrlong	result1, fp
168a0     04 4E 05 F1 | 	add	fp, #4
168a4     A7 FC 61 FC | 	wrlong	result2, fp
168a8     04 4E 05 F1 | 	add	fp, #4
168ac     A7 16 62 FC | 	wrlong	arg03, fp
168b0                 | ' t1=pop()
168b0                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
168b0     08 4E 85 F1 | 	sub	fp, #8
168b4     2C 16 0E F2 | 	cmp	arg03, #44 wz
168b8     44 00 90 AD |  if_e	jmp	#LR__1825
168bc     00 12 06 F6 | 	mov	arg01, #0
168c0     B4 62 B1 FD | 	call	#__system___getiolock_0611
168c4     FD 12 02 F6 | 	mov	arg01, result1
168c8     84 05 B1 FD | 	call	#__system___lockmem
168cc     BA 01 00 FF 
168d0     50 14 06 F6 | 	mov	arg02, ##@LR__5961
168d4     00 12 06 F6 | 	mov	arg01, #0
168d8     00 16 06 F6 | 	mov	arg03, #0
168dc     64 12 B1 FD | 	call	#__system___basic_print_string
168e0     00 12 06 F6 | 	mov	arg01, #0
168e4     0A 14 06 F6 | 	mov	arg02, #10
168e8     00 16 06 F6 | 	mov	arg03, #0
168ec     FC 11 B1 FD | 	call	#__system___basic_print_char
168f0     00 12 06 F6 | 	mov	arg01, #0
168f4     80 62 B1 FD | 	call	#__system___getiolock_0611
168f8     FD 00 68 FC | 	wrlong	#0, result1
168fc     D8 00 90 FD | 	jmp	#LR__1832
16900                 | LR__1825
16900     A7 26 02 FB | 	rdlong	local01, fp
16904     18 4E 05 F1 | 	add	fp, #24
16908     A7 26 62 FC | 	wrlong	local01, fp
1690c                 | ' channel  = t1.result.iresult
1690c                 | ' select case  mode
1690c     04 4E 85 F1 | 	sub	fp, #4
16910     A7 28 02 FB | 	rdlong	local02, fp
16914     14 4E 85 F1 | 	sub	fp, #20
16918     01 28 86 F1 | 	sub	local02, #1
1691c     04 28 26 F3 | 	fle	local02, #4
16920     30 28 62 FD | 	jmprel	local02
16924                 | LR__1826
16924     10 00 90 FD | 	jmp	#LR__1827
16928     2C 00 90 FD | 	jmp	#LR__1828
1692c     68 00 90 FD | 	jmp	#LR__1830
16930     44 00 90 FD | 	jmp	#LR__1829
16934     60 00 90 FD | 	jmp	#LR__1830
16938                 | LR__1827
16938     18 4E 05 F1 | 	add	fp, #24
1693c     A7 12 02 FB | 	rdlong	arg01, fp
16940     0C 4E 85 F1 | 	sub	fp, #12
16944     A7 14 02 FB | 	rdlong	arg02, fp
16948     0C 4E 85 F1 | 	sub	fp, #12
1694c     00 16 06 F6 | 	mov	arg03, #0
16950     00 11 B1 FD | 	call	#__system___basic_open_string
16954     80 00 90 FD | 	jmp	#LR__1831
16958                 | LR__1828
16958     18 4E 05 F1 | 	add	fp, #24
1695c     A7 12 02 FB | 	rdlong	arg01, fp
16960     0C 4E 85 F1 | 	sub	fp, #12
16964     A7 14 02 FB | 	rdlong	arg02, fp
16968     0C 4E 85 F1 | 	sub	fp, #12
1696c     0D 16 06 F6 | 	mov	arg03, #13
16970     E0 10 B1 FD | 	call	#__system___basic_open_string
16974     60 00 90 FD | 	jmp	#LR__1831
16978                 | LR__1829
16978     18 4E 05 F1 | 	add	fp, #24
1697c     A7 12 02 FB | 	rdlong	arg01, fp
16980     0C 4E 85 F1 | 	sub	fp, #12
16984     A7 14 02 FB | 	rdlong	arg02, fp
16988     0C 4E 85 F1 | 	sub	fp, #12
1698c     25 16 06 F6 | 	mov	arg03, #37
16990     C0 10 B1 FD | 	call	#__system___basic_open_string
16994     40 00 90 FD | 	jmp	#LR__1831
16998                 | LR__1830
16998     00 12 06 F6 | 	mov	arg01, #0
1699c     D8 61 B1 FD | 	call	#__system___getiolock_0611
169a0     FD 12 02 F6 | 	mov	arg01, result1
169a4     A8 04 B1 FD | 	call	#__system___lockmem
169a8     BA 01 00 FF 
169ac     62 14 06 F6 | 	mov	arg02, ##@LR__5962
169b0     00 12 06 F6 | 	mov	arg01, #0
169b4     00 16 06 F6 | 	mov	arg03, #0
169b8     88 11 B1 FD | 	call	#__system___basic_print_string
169bc     00 12 06 F6 | 	mov	arg01, #0
169c0     0A 14 06 F6 | 	mov	arg02, #10
169c4     00 16 06 F6 | 	mov	arg03, #0
169c8     20 11 B1 FD | 	call	#__system___basic_print_char
169cc     00 12 06 F6 | 	mov	arg01, #0
169d0     A4 61 B1 FD | 	call	#__system___getiolock_0611
169d4     FD 00 68 FC | 	wrlong	#0, result1
169d8                 | LR__1831
169d8                 | LR__1832
169d8     A7 F0 03 F6 | 	mov	ptra, fp
169dc     B2 00 A0 FD | 	call	#popregs_
169e0                 | _do_open_ret
169e0     2D 00 64 FD | 	ret
169e4                 | 
169e4                 | ' 
169e4                 | ' ' ------------------ padh
169e4                 | ' 
169e4                 | ' sub do_padh
169e4                 | _do_padh
169e4     01 4A 05 F6 | 	mov	COUNT_, #1
169e8     A8 00 A0 FD | 	call	#pushregs_
169ec     14 F0 07 F1 | 	add	ptra, #20
169f0     4A 00 00 FF 
169f4     80 E4 05 F1 | 	add	objptr, ##38016
169f8     F2 26 02 FB | 	rdlong	local01, objptr
169fc     13 17 02 F6 | 	mov	arg03, local01
16a00     01 16 66 F0 | 	shl	arg03, #1
16a04     13 17 02 F1 | 	add	arg03, local01
16a08     02 16 66 F0 | 	shl	arg03, #2
16a0c     03 00 00 FF 
16a10     04 E4 85 F1 | 	sub	objptr, ##1540
16a14     F2 16 02 F1 | 	add	arg03, objptr
16a18     0B 17 02 FB | 	rdlong	arg03, arg03
16a1c     0C 4E 05 F1 | 	add	fp, #12
16a20     A7 16 62 FC | 	wrlong	arg03, fp
16a24                 | ' 
16a24                 | ' numpar=compiledline(lineptr_e).result.uresult
16a24                 | ' if numpar>1 then print "padh: "; : printerror(39) : return
16a24     0C 4E 85 F1 | 	sub	fp, #12
16a28     02 16 16 F2 | 	cmp	arg03, #2 wc
16a2c     47 00 00 FF 
16a30     7C E4 85 F1 | 	sub	objptr, ##36476
16a34     40 00 90 CD |  if_b	jmp	#LR__1840
16a38     00 12 06 F6 | 	mov	arg01, #0
16a3c     38 61 B1 FD | 	call	#__system___getiolock_0611
16a40     FD 12 02 F6 | 	mov	arg01, result1
16a44     08 04 B1 FD | 	call	#__system___lockmem
16a48     BA 01 00 FF 
16a4c     75 14 06 F6 | 	mov	arg02, ##@LR__5963
16a50     00 12 06 F6 | 	mov	arg01, #0
16a54     00 16 06 F6 | 	mov	arg03, #0
16a58     E8 10 B1 FD | 	call	#__system___basic_print_string
16a5c     00 12 06 F6 | 	mov	arg01, #0
16a60     14 61 B1 FD | 	call	#__system___getiolock_0611
16a64     FD 00 68 FC | 	wrlong	#0, result1
16a68     27 12 06 F6 | 	mov	arg01, #39
16a6c     00 14 06 F6 | 	mov	arg02, #0
16a70     C0 C9 B0 FD | 	call	#_printerror
16a74     F0 00 90 FD | 	jmp	#LR__1844
16a78                 | LR__1840
16a78                 | ' if numpar=0 then 
16a78     0C 4E 05 F1 | 	add	fp, #12
16a7c     A7 FE 09 FB | 	rdlong	result3, fp wz
16a80     0C 4E 85 F1 | 	sub	fp, #12
16a84     30 00 90 5D |  if_ne	jmp	#LR__1841
16a88     51 00 00 FF 
16a8c     AC E5 05 F1 | 	add	objptr, ##41900
16a90     F2 26 02 FB | 	rdlong	local01, objptr
16a94     51 00 00 FF 
16a98     AC E5 85 F1 | 	sub	objptr, ##41900
16a9c     A7 26 62 FC | 	wrlong	local01, fp
16aa0     08 4E 05 F1 | 	add	fp, #8
16aa4     A7 38 68 FC | 	wrlong	#28, fp
16aa8     08 4E 85 F1 | 	sub	fp, #8
16aac     A7 12 02 F6 | 	mov	arg01, fp
16ab0     24 6C BF FD | 	call	#_push
16ab4                 | '   t1.result.uresult=padh(0): t1.result_type=result_int : push t1 : return
16ab4     B0 00 90 FD | 	jmp	#LR__1844
16ab8                 | LR__1841
16ab8     84 6B BF FD | 	call	#_pop
16abc     A7 FA 61 FC | 	wrlong	result1, fp
16ac0     04 4E 05 F1 | 	add	fp, #4
16ac4     A7 FC 61 FC | 	wrlong	result2, fp
16ac8     04 4E 05 F1 | 	add	fp, #4
16acc     A7 FE 61 FC | 	wrlong	result3, fp
16ad0                 | ' t1=pop()
16ad0                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
16ad0     08 4E 85 F1 | 	sub	fp, #8
16ad4     1C FE 0D F2 | 	cmp	result3, #28 wz
16ad8     08 4E 05 51 |  if_ne	add	fp, #8
16adc     A7 26 02 5B |  if_ne	rdlong	local01, fp
16ae0     08 4E 85 51 |  if_ne	sub	fp, #8
16ae4     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
16ae8     70 00 90 5D |  if_ne	jmp	#LR__1843
16aec     A7 26 02 FB | 	rdlong	local01, fp
16af0     52 00 00 FF 
16af4     08 E5 05 F1 | 	add	objptr, ##42248
16af8     F2 26 62 FC | 	wrlong	local01, objptr
16afc                 | '   q=t1.result.uresult
16afc                 | '   if q<7 then 
16afc     52 00 00 FF 
16b00     08 E5 85 F1 | 	sub	objptr, ##42248
16b04     07 26 56 F2 | 	cmps	local01, #7 wc
16b08     40 00 90 3D |  if_ae	jmp	#LR__1842
16b0c     52 00 00 FF 
16b10     08 E5 05 F1 | 	add	objptr, ##42248
16b14     F2 26 02 FB | 	rdlong	local01, objptr
16b18     02 26 66 F0 | 	shl	local01, #2
16b1c     5C E5 85 F1 | 	sub	objptr, #348
16b20     F2 26 02 F1 | 	add	local01, objptr
16b24     13 27 02 FB | 	rdlong	local01, local01
16b28     A7 26 62 FC | 	wrlong	local01, fp
16b2c     08 4E 05 F1 | 	add	fp, #8
16b30     A7 38 68 FC | 	wrlong	#28, fp
16b34     08 4E 85 F1 | 	sub	fp, #8
16b38     A7 12 02 F6 | 	mov	arg01, fp
16b3c     51 00 00 FF 
16b40     AC E5 85 F1 | 	sub	objptr, ##41900
16b44     90 6B BF FD | 	call	#_push
16b48                 | '     t1.result.uresult=padh(q): t1.result_type=result_int : push t1 : return 
16b48     1C 00 90 FD | 	jmp	#LR__1844
16b4c                 | LR__1842
16b4c     29 12 06 F6 | 	mov	arg01, #41
16b50     00 14 06 F6 | 	mov	arg02, #0
16b54     DC C8 B0 FD | 	call	#_printerror
16b58                 | '      printerror(41) : return
16b58     0C 00 90 FD | 	jmp	#LR__1844
16b5c                 | LR__1843
16b5c     29 12 06 F6 | 	mov	arg01, #41
16b60     00 14 06 F6 | 	mov	arg02, #0
16b64     CC C8 B0 FD | 	call	#_printerror
16b68                 | LR__1844
16b68     A7 F0 03 F6 | 	mov	ptra, fp
16b6c     B2 00 A0 FD | 	call	#popregs_
16b70                 | _do_padh_ret
16b70     2D 00 64 FD | 	ret
16b74                 | 
16b74                 | ' 
16b74                 | ' ' ------------------ padrx
16b74                 | ' 
16b74                 | ' sub do_padrx
16b74                 | _do_padrx
16b74     02 4A 05 F6 | 	mov	COUNT_, #2
16b78     A8 00 A0 FD | 	call	#pushregs_
16b7c     14 F0 07 F1 | 	add	ptra, #20
16b80     4A 00 00 FF 
16b84     80 E4 05 F1 | 	add	objptr, ##38016
16b88     F2 26 02 FB | 	rdlong	local01, objptr
16b8c     13 17 02 F6 | 	mov	arg03, local01
16b90     01 16 66 F0 | 	shl	arg03, #1
16b94     13 17 02 F1 | 	add	arg03, local01
16b98     02 16 66 F0 | 	shl	arg03, #2
16b9c     03 00 00 FF 
16ba0     04 E4 85 F1 | 	sub	objptr, ##1540
16ba4     F2 16 02 F1 | 	add	arg03, objptr
16ba8     0B 17 02 FB | 	rdlong	arg03, arg03
16bac     0C 4E 05 F1 | 	add	fp, #12
16bb0     A7 16 62 FC | 	wrlong	arg03, fp
16bb4                 | ' 
16bb4                 | ' numpar=compiledline(lineptr_e).result.uresult
16bb4                 | ' if numpar>1 then print "padrx: "; : printerror(39) : return
16bb4     0C 4E 85 F1 | 	sub	fp, #12
16bb8     02 16 16 F2 | 	cmp	arg03, #2 wc
16bbc     47 00 00 FF 
16bc0     7C E4 85 F1 | 	sub	objptr, ##36476
16bc4     40 00 90 CD |  if_b	jmp	#LR__1850
16bc8     00 12 06 F6 | 	mov	arg01, #0
16bcc     A8 5F B1 FD | 	call	#__system___getiolock_0611
16bd0     FD 12 02 F6 | 	mov	arg01, result1
16bd4     78 02 B1 FD | 	call	#__system___lockmem
16bd8     BA 01 00 FF 
16bdc     7C 14 06 F6 | 	mov	arg02, ##@LR__5964
16be0     00 12 06 F6 | 	mov	arg01, #0
16be4     00 16 06 F6 | 	mov	arg03, #0
16be8     58 0F B1 FD | 	call	#__system___basic_print_string
16bec     00 12 06 F6 | 	mov	arg01, #0
16bf0     84 5F B1 FD | 	call	#__system___getiolock_0611
16bf4     FD 00 68 FC | 	wrlong	#0, result1
16bf8     27 12 06 F6 | 	mov	arg01, #39
16bfc     00 14 06 F6 | 	mov	arg02, #0
16c00     30 C8 B0 FD | 	call	#_printerror
16c04     E0 01 90 FD | 	jmp	#LR__1854
16c08                 | LR__1850
16c08                 | ' if numpar=0 then 
16c08     0C 4E 05 F1 | 	add	fp, #12
16c0c     A7 FE 09 FB | 	rdlong	result3, fp wz
16c10     0C 4E 85 F1 | 	sub	fp, #12
16c14     A8 00 90 5D |  if_ne	jmp	#LR__1851
16c18     00 C0 1B FF 
16c1c     00 26 06 F6 | 	mov	local01, ##931135488
16c20     51 00 00 FF 
16c24     C8 E5 05 F1 | 	add	objptr, ##41928
16c28     F2 12 02 FB | 	rdlong	arg01, objptr
16c2c     51 00 00 FF 
16c30     C8 E5 85 F1 | 	sub	objptr, ##41928
16c34     09 13 52 F6 | 	abs	arg01, arg01 wc
16c38     1F 28 C6 C9 |  if_b	decod	local02, #31
16c3c     00 28 06 36 |  if_ae	mov	local02, #0
16c40     80 2C B1 FD | 	call	#__system___float_fromuns
16c44     14 FB 61 F5 | 	xor	result1, local02
16c48     FD 12 02 F6 | 	mov	arg01, result1
16c4c     FF 7F 23 FF 
16c50     00 14 06 F6 | 	mov	arg02, ##1191181824
16c54     74 32 B1 FD | 	call	#__system___float_div
16c58     FD 14 02 F6 | 	mov	arg02, result1
16c5c     13 13 02 F6 | 	mov	arg01, local01
16c60     94 2C B1 FD | 	call	#__system___float_add
16c64     10 4E 05 F1 | 	add	fp, #16
16c68     A7 FA 61 FC | 	wrlong	result1, fp
16c6c                 | '   fpad=(1.0/65536.0)+padrx(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16c6c     10 4E 85 F1 | 	sub	fp, #16
16c70     1F FA 05 F4 | 	bitl	result1, #31
16c74     FD 12 02 F6 | 	mov	arg01, result1
16c78     89 41 1D FF 
16c7c     6F 14 06 F6 | 	mov	arg02, ##981668463
16c80     01 16 06 F6 | 	mov	arg03, #1
16c84     74 34 B1 FD | 	call	#__system___float_cmp
16c88     00 FA 55 F2 | 	cmps	result1, #0 wc
16c8c     10 4E 05 C1 |  if_b	add	fp, #16
16c90     A7 00 68 CC |  if_b	wrlong	#0, fp
16c94     10 4E 85 C1 |  if_b	sub	fp, #16
16c98     10 4E 05 F1 | 	add	fp, #16
16c9c     A7 26 02 FB | 	rdlong	local01, fp
16ca0     10 4E 85 F1 | 	sub	fp, #16
16ca4     A7 26 62 FC | 	wrlong	local01, fp
16ca8     08 4E 05 F1 | 	add	fp, #8
16cac     A7 3C 68 FC | 	wrlong	#30, fp
16cb0     08 4E 85 F1 | 	sub	fp, #8
16cb4     A7 12 02 F6 | 	mov	arg01, fp
16cb8     1C 6A BF FD | 	call	#_push
16cbc                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
16cbc     28 01 90 FD | 	jmp	#LR__1854
16cc0                 | LR__1851
16cc0     7C 69 BF FD | 	call	#_pop
16cc4     A7 FA 61 FC | 	wrlong	result1, fp
16cc8     04 4E 05 F1 | 	add	fp, #4
16ccc     A7 FC 61 FC | 	wrlong	result2, fp
16cd0     04 4E 05 F1 | 	add	fp, #4
16cd4     A7 FE 61 FC | 	wrlong	result3, fp
16cd8                 | ' t1=pop()
16cd8                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
16cd8     08 4E 85 F1 | 	sub	fp, #8
16cdc     1C FE 0D F2 | 	cmp	result3, #28 wz
16ce0     08 4E 05 51 |  if_ne	add	fp, #8
16ce4     A7 26 02 5B |  if_ne	rdlong	local01, fp
16ce8     08 4E 85 51 |  if_ne	sub	fp, #8
16cec     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
16cf0     E8 00 90 5D |  if_ne	jmp	#LR__1853
16cf4     A7 26 02 FB | 	rdlong	local01, fp
16cf8     52 00 00 FF 
16cfc     08 E5 05 F1 | 	add	objptr, ##42248
16d00     F2 26 62 FC | 	wrlong	local01, objptr
16d04                 | '   q=t1.result.uresult
16d04                 | '   if q<7 then 
16d04     52 00 00 FF 
16d08     08 E5 85 F1 | 	sub	objptr, ##42248
16d0c     07 26 56 F2 | 	cmps	local01, #7 wc
16d10     B8 00 90 3D |  if_ae	jmp	#LR__1852
16d14     00 C0 1B FF 
16d18     00 26 06 F6 | 	mov	local01, ##931135488
16d1c     52 00 00 FF 
16d20     08 E5 05 F1 | 	add	objptr, ##42248
16d24     F2 16 02 FB | 	rdlong	arg03, objptr
16d28     02 16 66 F0 | 	shl	arg03, #2
16d2c     40 E5 85 F1 | 	sub	objptr, #320
16d30     F2 16 02 F1 | 	add	arg03, objptr
16d34     0B 13 02 FB | 	rdlong	arg01, arg03
16d38     51 00 00 FF 
16d3c     C8 E5 85 F1 | 	sub	objptr, ##41928
16d40     09 13 52 F6 | 	abs	arg01, arg01 wc
16d44     1F 28 C6 C9 |  if_b	decod	local02, #31
16d48     00 28 06 36 |  if_ae	mov	local02, #0
16d4c     74 2B B1 FD | 	call	#__system___float_fromuns
16d50     14 FB 61 F5 | 	xor	result1, local02
16d54     FD 12 02 F6 | 	mov	arg01, result1
16d58     FF 7F 23 FF 
16d5c     00 14 06 F6 | 	mov	arg02, ##1191181824
16d60     68 31 B1 FD | 	call	#__system___float_div
16d64     FD 14 02 F6 | 	mov	arg02, result1
16d68     13 13 02 F6 | 	mov	arg01, local01
16d6c     88 2B B1 FD | 	call	#__system___float_add
16d70     10 4E 05 F1 | 	add	fp, #16
16d74     A7 FA 61 FC | 	wrlong	result1, fp
16d78                 | '     fpad=(1.0/65536.0)+padrx(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16d78     10 4E 85 F1 | 	sub	fp, #16
16d7c     1F FA 05 F4 | 	bitl	result1, #31
16d80     FD 12 02 F6 | 	mov	arg01, result1
16d84     89 41 1D FF 
16d88     6F 14 06 F6 | 	mov	arg02, ##981668463
16d8c     01 16 06 F6 | 	mov	arg03, #1
16d90     68 33 B1 FD | 	call	#__system___float_cmp
16d94     00 FA 55 F2 | 	cmps	result1, #0 wc
16d98     10 4E 05 C1 |  if_b	add	fp, #16
16d9c     A7 00 68 CC |  if_b	wrlong	#0, fp
16da0     10 4E 85 C1 |  if_b	sub	fp, #16
16da4     10 4E 05 F1 | 	add	fp, #16
16da8     A7 26 02 FB | 	rdlong	local01, fp
16dac     10 4E 85 F1 | 	sub	fp, #16
16db0     A7 26 62 FC | 	wrlong	local01, fp
16db4     08 4E 05 F1 | 	add	fp, #8
16db8     A7 3C 68 FC | 	wrlong	#30, fp
16dbc     08 4E 85 F1 | 	sub	fp, #8
16dc0     A7 12 02 F6 | 	mov	arg01, fp
16dc4     10 69 BF FD | 	call	#_push
16dc8                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
16dc8     1C 00 90 FD | 	jmp	#LR__1854
16dcc                 | LR__1852
16dcc     29 12 06 F6 | 	mov	arg01, #41
16dd0     00 14 06 F6 | 	mov	arg02, #0
16dd4     5C C6 B0 FD | 	call	#_printerror
16dd8                 | '      printerror(41) : return
16dd8     0C 00 90 FD | 	jmp	#LR__1854
16ddc                 | LR__1853
16ddc     29 12 06 F6 | 	mov	arg01, #41
16de0     00 14 06 F6 | 	mov	arg02, #0
16de4     4C C6 B0 FD | 	call	#_printerror
16de8                 | LR__1854
16de8     A7 F0 03 F6 | 	mov	ptra, fp
16dec     B2 00 A0 FD | 	call	#popregs_
16df0                 | _do_padrx_ret
16df0     2D 00 64 FD | 	ret
16df4                 | 
16df4                 | ' 
16df4                 | ' ' ------------------ padry
16df4                 | ' 
16df4                 | ' sub do_padry
16df4                 | _do_padry
16df4     02 4A 05 F6 | 	mov	COUNT_, #2
16df8     A8 00 A0 FD | 	call	#pushregs_
16dfc     14 F0 07 F1 | 	add	ptra, #20
16e00     4A 00 00 FF 
16e04     80 E4 05 F1 | 	add	objptr, ##38016
16e08     F2 26 02 FB | 	rdlong	local01, objptr
16e0c     13 17 02 F6 | 	mov	arg03, local01
16e10     01 16 66 F0 | 	shl	arg03, #1
16e14     13 17 02 F1 | 	add	arg03, local01
16e18     02 16 66 F0 | 	shl	arg03, #2
16e1c     03 00 00 FF 
16e20     04 E4 85 F1 | 	sub	objptr, ##1540
16e24     F2 16 02 F1 | 	add	arg03, objptr
16e28     0B 17 02 FB | 	rdlong	arg03, arg03
16e2c     0C 4E 05 F1 | 	add	fp, #12
16e30     A7 16 62 FC | 	wrlong	arg03, fp
16e34                 | ' 
16e34                 | ' numpar=compiledline(lineptr_e).result.uresult
16e34                 | ' if numpar>1 then print "padry: "; : printerror(39) : return
16e34     0C 4E 85 F1 | 	sub	fp, #12
16e38     02 16 16 F2 | 	cmp	arg03, #2 wc
16e3c     47 00 00 FF 
16e40     7C E4 85 F1 | 	sub	objptr, ##36476
16e44     40 00 90 CD |  if_b	jmp	#LR__1860
16e48     00 12 06 F6 | 	mov	arg01, #0
16e4c     28 5D B1 FD | 	call	#__system___getiolock_0611
16e50     FD 12 02 F6 | 	mov	arg01, result1
16e54     F8 FF B0 FD | 	call	#__system___lockmem
16e58     BA 01 00 FF 
16e5c     84 14 06 F6 | 	mov	arg02, ##@LR__5965
16e60     00 12 06 F6 | 	mov	arg01, #0
16e64     00 16 06 F6 | 	mov	arg03, #0
16e68     D8 0C B1 FD | 	call	#__system___basic_print_string
16e6c     00 12 06 F6 | 	mov	arg01, #0
16e70     04 5D B1 FD | 	call	#__system___getiolock_0611
16e74     FD 00 68 FC | 	wrlong	#0, result1
16e78     27 12 06 F6 | 	mov	arg01, #39
16e7c     00 14 06 F6 | 	mov	arg02, #0
16e80     B0 C5 B0 FD | 	call	#_printerror
16e84     E0 01 90 FD | 	jmp	#LR__1864
16e88                 | LR__1860
16e88                 | ' if numpar=0 then 
16e88     0C 4E 05 F1 | 	add	fp, #12
16e8c     A7 FE 09 FB | 	rdlong	result3, fp wz
16e90     0C 4E 85 F1 | 	sub	fp, #12
16e94     A8 00 90 5D |  if_ne	jmp	#LR__1861
16e98     00 C0 1B FF 
16e9c     00 26 06 F6 | 	mov	local01, ##931135488
16ea0     51 00 00 FF 
16ea4     E4 E5 05 F1 | 	add	objptr, ##41956
16ea8     F2 12 02 FB | 	rdlong	arg01, objptr
16eac     51 00 00 FF 
16eb0     E4 E5 85 F1 | 	sub	objptr, ##41956
16eb4     09 13 52 F6 | 	abs	arg01, arg01 wc
16eb8     1F 28 C6 C9 |  if_b	decod	local02, #31
16ebc     00 28 06 36 |  if_ae	mov	local02, #0
16ec0     00 2A B1 FD | 	call	#__system___float_fromuns
16ec4     14 FB 61 F5 | 	xor	result1, local02
16ec8     FD 12 02 F6 | 	mov	arg01, result1
16ecc     FF 7F 23 FF 
16ed0     00 14 06 F6 | 	mov	arg02, ##1191181824
16ed4     F4 2F B1 FD | 	call	#__system___float_div
16ed8     FD 14 02 F6 | 	mov	arg02, result1
16edc     13 13 02 F6 | 	mov	arg01, local01
16ee0     14 2A B1 FD | 	call	#__system___float_add
16ee4     10 4E 05 F1 | 	add	fp, #16
16ee8     A7 FA 61 FC | 	wrlong	result1, fp
16eec                 | '   fpad=(1.0/65536.0)+padry(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16eec     10 4E 85 F1 | 	sub	fp, #16
16ef0     1F FA 05 F4 | 	bitl	result1, #31
16ef4     FD 12 02 F6 | 	mov	arg01, result1
16ef8     89 41 1D FF 
16efc     6F 14 06 F6 | 	mov	arg02, ##981668463
16f00     01 16 06 F6 | 	mov	arg03, #1
16f04     F4 31 B1 FD | 	call	#__system___float_cmp
16f08     00 FA 55 F2 | 	cmps	result1, #0 wc
16f0c     10 4E 05 C1 |  if_b	add	fp, #16
16f10     A7 00 68 CC |  if_b	wrlong	#0, fp
16f14     10 4E 85 C1 |  if_b	sub	fp, #16
16f18     10 4E 05 F1 | 	add	fp, #16
16f1c     A7 26 02 FB | 	rdlong	local01, fp
16f20     10 4E 85 F1 | 	sub	fp, #16
16f24     A7 26 62 FC | 	wrlong	local01, fp
16f28     08 4E 05 F1 | 	add	fp, #8
16f2c     A7 3C 68 FC | 	wrlong	#30, fp
16f30     08 4E 85 F1 | 	sub	fp, #8
16f34     A7 12 02 F6 | 	mov	arg01, fp
16f38     9C 67 BF FD | 	call	#_push
16f3c                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
16f3c     28 01 90 FD | 	jmp	#LR__1864
16f40                 | LR__1861
16f40     FC 66 BF FD | 	call	#_pop
16f44     A7 FA 61 FC | 	wrlong	result1, fp
16f48     04 4E 05 F1 | 	add	fp, #4
16f4c     A7 FC 61 FC | 	wrlong	result2, fp
16f50     04 4E 05 F1 | 	add	fp, #4
16f54     A7 FE 61 FC | 	wrlong	result3, fp
16f58                 | ' t1=pop()
16f58                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
16f58     08 4E 85 F1 | 	sub	fp, #8
16f5c     1C FE 0D F2 | 	cmp	result3, #28 wz
16f60     08 4E 05 51 |  if_ne	add	fp, #8
16f64     A7 26 02 5B |  if_ne	rdlong	local01, fp
16f68     08 4E 85 51 |  if_ne	sub	fp, #8
16f6c     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
16f70     E8 00 90 5D |  if_ne	jmp	#LR__1863
16f74     A7 26 02 FB | 	rdlong	local01, fp
16f78     52 00 00 FF 
16f7c     08 E5 05 F1 | 	add	objptr, ##42248
16f80     F2 26 62 FC | 	wrlong	local01, objptr
16f84                 | '   q=t1.result.uresult
16f84                 | '   if q<7 then 
16f84     52 00 00 FF 
16f88     08 E5 85 F1 | 	sub	objptr, ##42248
16f8c     07 26 56 F2 | 	cmps	local01, #7 wc
16f90     B8 00 90 3D |  if_ae	jmp	#LR__1862
16f94     00 C0 1B FF 
16f98     00 26 06 F6 | 	mov	local01, ##931135488
16f9c     52 00 00 FF 
16fa0     08 E5 05 F1 | 	add	objptr, ##42248
16fa4     F2 16 02 FB | 	rdlong	arg03, objptr
16fa8     02 16 66 F0 | 	shl	arg03, #2
16fac     24 E5 85 F1 | 	sub	objptr, #292
16fb0     F2 16 02 F1 | 	add	arg03, objptr
16fb4     0B 13 02 FB | 	rdlong	arg01, arg03
16fb8     51 00 00 FF 
16fbc     E4 E5 85 F1 | 	sub	objptr, ##41956
16fc0     09 13 52 F6 | 	abs	arg01, arg01 wc
16fc4     1F 28 C6 C9 |  if_b	decod	local02, #31
16fc8     00 28 06 36 |  if_ae	mov	local02, #0
16fcc     F4 28 B1 FD | 	call	#__system___float_fromuns
16fd0     14 FB 61 F5 | 	xor	result1, local02
16fd4     FD 12 02 F6 | 	mov	arg01, result1
16fd8     FF 7F 23 FF 
16fdc     00 14 06 F6 | 	mov	arg02, ##1191181824
16fe0     E8 2E B1 FD | 	call	#__system___float_div
16fe4     FD 14 02 F6 | 	mov	arg02, result1
16fe8     13 13 02 F6 | 	mov	arg01, local01
16fec     08 29 B1 FD | 	call	#__system___float_add
16ff0     10 4E 05 F1 | 	add	fp, #16
16ff4     A7 FA 61 FC | 	wrlong	result1, fp
16ff8                 | '     fpad=(1.0/65536.0)+padry(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16ff8     10 4E 85 F1 | 	sub	fp, #16
16ffc     1F FA 05 F4 | 	bitl	result1, #31
17000     FD 12 02 F6 | 	mov	arg01, result1
17004     89 41 1D FF 
17008     6F 14 06 F6 | 	mov	arg02, ##981668463
1700c     01 16 06 F6 | 	mov	arg03, #1
17010     E8 30 B1 FD | 	call	#__system___float_cmp
17014     00 FA 55 F2 | 	cmps	result1, #0 wc
17018     10 4E 05 C1 |  if_b	add	fp, #16
1701c     A7 00 68 CC |  if_b	wrlong	#0, fp
17020     10 4E 85 C1 |  if_b	sub	fp, #16
17024     10 4E 05 F1 | 	add	fp, #16
17028     A7 26 02 FB | 	rdlong	local01, fp
1702c     10 4E 85 F1 | 	sub	fp, #16
17030     A7 26 62 FC | 	wrlong	local01, fp
17034     08 4E 05 F1 | 	add	fp, #8
17038     A7 3C 68 FC | 	wrlong	#30, fp
1703c     08 4E 85 F1 | 	sub	fp, #8
17040     A7 12 02 F6 | 	mov	arg01, fp
17044     90 66 BF FD | 	call	#_push
17048                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
17048     1C 00 90 FD | 	jmp	#LR__1864
1704c                 | LR__1862
1704c     29 12 06 F6 | 	mov	arg01, #41
17050     00 14 06 F6 | 	mov	arg02, #0
17054     DC C3 B0 FD | 	call	#_printerror
17058                 | '      printerror(41) : return
17058     0C 00 90 FD | 	jmp	#LR__1864
1705c                 | LR__1863
1705c     29 12 06 F6 | 	mov	arg01, #41
17060     00 14 06 F6 | 	mov	arg02, #0
17064     CC C3 B0 FD | 	call	#_printerror
17068                 | LR__1864
17068     A7 F0 03 F6 | 	mov	ptra, fp
1706c     B2 00 A0 FD | 	call	#popregs_
17070                 | _do_padry_ret
17070     2D 00 64 FD | 	ret
17074                 | 
17074                 | ' 
17074                 | ' ' ------------------ padrz
17074                 | ' 
17074                 | ' sub do_padrz
17074                 | _do_padrz
17074     02 4A 05 F6 | 	mov	COUNT_, #2
17078     A8 00 A0 FD | 	call	#pushregs_
1707c     14 F0 07 F1 | 	add	ptra, #20
17080     4A 00 00 FF 
17084     80 E4 05 F1 | 	add	objptr, ##38016
17088     F2 26 02 FB | 	rdlong	local01, objptr
1708c     13 17 02 F6 | 	mov	arg03, local01
17090     01 16 66 F0 | 	shl	arg03, #1
17094     13 17 02 F1 | 	add	arg03, local01
17098     02 16 66 F0 | 	shl	arg03, #2
1709c     03 00 00 FF 
170a0     04 E4 85 F1 | 	sub	objptr, ##1540
170a4     F2 16 02 F1 | 	add	arg03, objptr
170a8     0B 17 02 FB | 	rdlong	arg03, arg03
170ac     0C 4E 05 F1 | 	add	fp, #12
170b0     A7 16 62 FC | 	wrlong	arg03, fp
170b4                 | ' 
170b4                 | ' numpar=compiledline(lineptr_e).result.uresult
170b4                 | ' if numpar>1 then print "padrz: "; : printerror(39) : return
170b4     0C 4E 85 F1 | 	sub	fp, #12
170b8     02 16 16 F2 | 	cmp	arg03, #2 wc
170bc     47 00 00 FF 
170c0     7C E4 85 F1 | 	sub	objptr, ##36476
170c4     40 00 90 CD |  if_b	jmp	#LR__1870
170c8     00 12 06 F6 | 	mov	arg01, #0
170cc     A8 5A B1 FD | 	call	#__system___getiolock_0611
170d0     FD 12 02 F6 | 	mov	arg01, result1
170d4     78 FD B0 FD | 	call	#__system___lockmem
170d8     BA 01 00 FF 
170dc     8C 14 06 F6 | 	mov	arg02, ##@LR__5966
170e0     00 12 06 F6 | 	mov	arg01, #0
170e4     00 16 06 F6 | 	mov	arg03, #0
170e8     58 0A B1 FD | 	call	#__system___basic_print_string
170ec     00 12 06 F6 | 	mov	arg01, #0
170f0     84 5A B1 FD | 	call	#__system___getiolock_0611
170f4     FD 00 68 FC | 	wrlong	#0, result1
170f8     27 12 06 F6 | 	mov	arg01, #39
170fc     00 14 06 F6 | 	mov	arg02, #0
17100     30 C3 B0 FD | 	call	#_printerror
17104     E0 01 90 FD | 	jmp	#LR__1874
17108                 | LR__1870
17108                 | ' if numpar=0 then 
17108     0C 4E 05 F1 | 	add	fp, #12
1710c     A7 FE 09 FB | 	rdlong	result3, fp wz
17110     0C 4E 85 F1 | 	sub	fp, #12
17114     A8 00 90 5D |  if_ne	jmp	#LR__1871
17118     00 C0 1B FF 
1711c     00 26 06 F6 | 	mov	local01, ##931135488
17120     52 00 00 FF 
17124     00 E4 05 F1 | 	add	objptr, ##41984
17128     F2 12 02 FB | 	rdlong	arg01, objptr
1712c     52 00 00 FF 
17130     00 E4 85 F1 | 	sub	objptr, ##41984
17134     09 13 52 F6 | 	abs	arg01, arg01 wc
17138     1F 28 C6 C9 |  if_b	decod	local02, #31
1713c     00 28 06 36 |  if_ae	mov	local02, #0
17140     80 27 B1 FD | 	call	#__system___float_fromuns
17144     14 FB 61 F5 | 	xor	result1, local02
17148     FD 12 02 F6 | 	mov	arg01, result1
1714c     FF 7F 23 FF 
17150     00 14 06 F6 | 	mov	arg02, ##1191181824
17154     74 2D B1 FD | 	call	#__system___float_div
17158     FD 14 02 F6 | 	mov	arg02, result1
1715c     13 13 02 F6 | 	mov	arg01, local01
17160     94 27 B1 FD | 	call	#__system___float_add
17164     10 4E 05 F1 | 	add	fp, #16
17168     A7 FA 61 FC | 	wrlong	result1, fp
1716c                 | '   fpad=(1.0/65536.0)+padrz(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
1716c     10 4E 85 F1 | 	sub	fp, #16
17170     1F FA 05 F4 | 	bitl	result1, #31
17174     FD 12 02 F6 | 	mov	arg01, result1
17178     89 41 1D FF 
1717c     6F 14 06 F6 | 	mov	arg02, ##981668463
17180     01 16 06 F6 | 	mov	arg03, #1
17184     74 2F B1 FD | 	call	#__system___float_cmp
17188     00 FA 55 F2 | 	cmps	result1, #0 wc
1718c     10 4E 05 C1 |  if_b	add	fp, #16
17190     A7 00 68 CC |  if_b	wrlong	#0, fp
17194     10 4E 85 C1 |  if_b	sub	fp, #16
17198     10 4E 05 F1 | 	add	fp, #16
1719c     A7 26 02 FB | 	rdlong	local01, fp
171a0     10 4E 85 F1 | 	sub	fp, #16
171a4     A7 26 62 FC | 	wrlong	local01, fp
171a8     08 4E 05 F1 | 	add	fp, #8
171ac     A7 3C 68 FC | 	wrlong	#30, fp
171b0     08 4E 85 F1 | 	sub	fp, #8
171b4     A7 12 02 F6 | 	mov	arg01, fp
171b8     1C 65 BF FD | 	call	#_push
171bc                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
171bc     28 01 90 FD | 	jmp	#LR__1874
171c0                 | LR__1871
171c0     7C 64 BF FD | 	call	#_pop
171c4     A7 FA 61 FC | 	wrlong	result1, fp
171c8     04 4E 05 F1 | 	add	fp, #4
171cc     A7 FC 61 FC | 	wrlong	result2, fp
171d0     04 4E 05 F1 | 	add	fp, #4
171d4     A7 FE 61 FC | 	wrlong	result3, fp
171d8                 | ' t1=pop()
171d8                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
171d8     08 4E 85 F1 | 	sub	fp, #8
171dc     1C FE 0D F2 | 	cmp	result3, #28 wz
171e0     08 4E 05 51 |  if_ne	add	fp, #8
171e4     A7 26 02 5B |  if_ne	rdlong	local01, fp
171e8     08 4E 85 51 |  if_ne	sub	fp, #8
171ec     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
171f0     E8 00 90 5D |  if_ne	jmp	#LR__1873
171f4     A7 26 02 FB | 	rdlong	local01, fp
171f8     52 00 00 FF 
171fc     08 E5 05 F1 | 	add	objptr, ##42248
17200     F2 26 62 FC | 	wrlong	local01, objptr
17204                 | '   q=t1.result.uresult
17204                 | '   if q<7 then 
17204     52 00 00 FF 
17208     08 E5 85 F1 | 	sub	objptr, ##42248
1720c     07 26 56 F2 | 	cmps	local01, #7 wc
17210     B8 00 90 3D |  if_ae	jmp	#LR__1872
17214     00 C0 1B FF 
17218     00 26 06 F6 | 	mov	local01, ##931135488
1721c     52 00 00 FF 
17220     08 E5 05 F1 | 	add	objptr, ##42248
17224     F2 16 02 FB | 	rdlong	arg03, objptr
17228     02 16 66 F0 | 	shl	arg03, #2
1722c     08 E5 85 F1 | 	sub	objptr, #264
17230     F2 16 02 F1 | 	add	arg03, objptr
17234     0B 13 02 FB | 	rdlong	arg01, arg03
17238     52 00 00 FF 
1723c     00 E4 85 F1 | 	sub	objptr, ##41984
17240     09 13 52 F6 | 	abs	arg01, arg01 wc
17244     1F 28 C6 C9 |  if_b	decod	local02, #31
17248     00 28 06 36 |  if_ae	mov	local02, #0
1724c     74 26 B1 FD | 	call	#__system___float_fromuns
17250     14 FB 61 F5 | 	xor	result1, local02
17254     FD 12 02 F6 | 	mov	arg01, result1
17258     FF 7F 23 FF 
1725c     00 14 06 F6 | 	mov	arg02, ##1191181824
17260     68 2C B1 FD | 	call	#__system___float_div
17264     FD 14 02 F6 | 	mov	arg02, result1
17268     13 13 02 F6 | 	mov	arg01, local01
1726c     88 26 B1 FD | 	call	#__system___float_add
17270     10 4E 05 F1 | 	add	fp, #16
17274     A7 FA 61 FC | 	wrlong	result1, fp
17278                 | '     fpad=(1.0/65536.0)+padrz(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
17278     10 4E 85 F1 | 	sub	fp, #16
1727c     1F FA 05 F4 | 	bitl	result1, #31
17280     FD 12 02 F6 | 	mov	arg01, result1
17284     89 41 1D FF 
17288     6F 14 06 F6 | 	mov	arg02, ##981668463
1728c     01 16 06 F6 | 	mov	arg03, #1
17290     68 2E B1 FD | 	call	#__system___float_cmp
17294     00 FA 55 F2 | 	cmps	result1, #0 wc
17298     10 4E 05 C1 |  if_b	add	fp, #16
1729c     A7 00 68 CC |  if_b	wrlong	#0, fp
172a0     10 4E 85 C1 |  if_b	sub	fp, #16
172a4     10 4E 05 F1 | 	add	fp, #16
172a8     A7 26 02 FB | 	rdlong	local01, fp
172ac     10 4E 85 F1 | 	sub	fp, #16
172b0     A7 26 62 FC | 	wrlong	local01, fp
172b4     08 4E 05 F1 | 	add	fp, #8
172b8     A7 3C 68 FC | 	wrlong	#30, fp
172bc     08 4E 85 F1 | 	sub	fp, #8
172c0     A7 12 02 F6 | 	mov	arg01, fp
172c4     10 64 BF FD | 	call	#_push
172c8                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
172c8     1C 00 90 FD | 	jmp	#LR__1874
172cc                 | LR__1872
172cc     29 12 06 F6 | 	mov	arg01, #41
172d0     00 14 06 F6 | 	mov	arg02, #0
172d4     5C C1 B0 FD | 	call	#_printerror
172d8                 | '      printerror(41) : return
172d8     0C 00 90 FD | 	jmp	#LR__1874
172dc                 | LR__1873
172dc     29 12 06 F6 | 	mov	arg01, #41
172e0     00 14 06 F6 | 	mov	arg02, #0
172e4     4C C1 B0 FD | 	call	#_printerror
172e8                 | LR__1874
172e8     A7 F0 03 F6 | 	mov	ptra, fp
172ec     B2 00 A0 FD | 	call	#popregs_
172f0                 | _do_padrz_ret
172f0     2D 00 64 FD | 	ret
172f4                 | 
172f4                 | ' ' ------------------ padx
172f4                 | ' 
172f4                 | ' sub do_padx
172f4                 | _do_padx
172f4     02 4A 05 F6 | 	mov	COUNT_, #2
172f8     A8 00 A0 FD | 	call	#pushregs_
172fc     14 F0 07 F1 | 	add	ptra, #20
17300     4A 00 00 FF 
17304     80 E4 05 F1 | 	add	objptr, ##38016
17308     F2 26 02 FB | 	rdlong	local01, objptr
1730c     13 17 02 F6 | 	mov	arg03, local01
17310     01 16 66 F0 | 	shl	arg03, #1
17314     13 17 02 F1 | 	add	arg03, local01
17318     02 16 66 F0 | 	shl	arg03, #2
1731c     03 00 00 FF 
17320     04 E4 85 F1 | 	sub	objptr, ##1540
17324     F2 16 02 F1 | 	add	arg03, objptr
17328     0B 17 02 FB | 	rdlong	arg03, arg03
1732c     0C 4E 05 F1 | 	add	fp, #12
17330     A7 16 62 FC | 	wrlong	arg03, fp
17334                 | ' 
17334                 | ' numpar=compiledline(lineptr_e).result.uresult
17334                 | ' if numpar>1 then print "padx: "; : printerror(39) : return
17334     0C 4E 85 F1 | 	sub	fp, #12
17338     02 16 16 F2 | 	cmp	arg03, #2 wc
1733c     47 00 00 FF 
17340     7C E4 85 F1 | 	sub	objptr, ##36476
17344     40 00 90 CD |  if_b	jmp	#LR__1880
17348     00 12 06 F6 | 	mov	arg01, #0
1734c     28 58 B1 FD | 	call	#__system___getiolock_0611
17350     FD 12 02 F6 | 	mov	arg01, result1
17354     F8 FA B0 FD | 	call	#__system___lockmem
17358     BA 01 00 FF 
1735c     94 14 06 F6 | 	mov	arg02, ##@LR__5967
17360     00 12 06 F6 | 	mov	arg01, #0
17364     00 16 06 F6 | 	mov	arg03, #0
17368     D8 07 B1 FD | 	call	#__system___basic_print_string
1736c     00 12 06 F6 | 	mov	arg01, #0
17370     04 58 B1 FD | 	call	#__system___getiolock_0611
17374     FD 00 68 FC | 	wrlong	#0, result1
17378     27 12 06 F6 | 	mov	arg01, #39
1737c     00 14 06 F6 | 	mov	arg02, #0
17380     B0 C0 B0 FD | 	call	#_printerror
17384     E0 01 90 FD | 	jmp	#LR__1884
17388                 | LR__1880
17388                 | ' if numpar=0 then 
17388     0C 4E 05 F1 | 	add	fp, #12
1738c     A7 FE 09 FB | 	rdlong	result3, fp wz
17390     0C 4E 85 F1 | 	sub	fp, #12
17394     A8 00 90 5D |  if_ne	jmp	#LR__1881
17398     00 C0 1B FF 
1739c     00 26 06 F6 | 	mov	local01, ##931135488
173a0     51 00 00 FF 
173a4     58 E5 05 F1 | 	add	objptr, ##41816
173a8     F2 12 02 FB | 	rdlong	arg01, objptr
173ac     51 00 00 FF 
173b0     58 E5 85 F1 | 	sub	objptr, ##41816
173b4     09 13 52 F6 | 	abs	arg01, arg01 wc
173b8     1F 28 C6 C9 |  if_b	decod	local02, #31
173bc     00 28 06 36 |  if_ae	mov	local02, #0
173c0     00 25 B1 FD | 	call	#__system___float_fromuns
173c4     14 FB 61 F5 | 	xor	result1, local02
173c8     FD 12 02 F6 | 	mov	arg01, result1
173cc     FF 7F 23 FF 
173d0     00 14 06 F6 | 	mov	arg02, ##1191181824
173d4     F4 2A B1 FD | 	call	#__system___float_div
173d8     FD 14 02 F6 | 	mov	arg02, result1
173dc     13 13 02 F6 | 	mov	arg01, local01
173e0     14 25 B1 FD | 	call	#__system___float_add
173e4     10 4E 05 F1 | 	add	fp, #16
173e8     A7 FA 61 FC | 	wrlong	result1, fp
173ec                 | '   fpad=(1.0/65536.0)+padx(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
173ec     10 4E 85 F1 | 	sub	fp, #16
173f0     1F FA 05 F4 | 	bitl	result1, #31
173f4     FD 12 02 F6 | 	mov	arg01, result1
173f8     89 41 1D FF 
173fc     6F 14 06 F6 | 	mov	arg02, ##981668463
17400     01 16 06 F6 | 	mov	arg03, #1
17404     F4 2C B1 FD | 	call	#__system___float_cmp
17408     00 FA 55 F2 | 	cmps	result1, #0 wc
1740c     10 4E 05 C1 |  if_b	add	fp, #16
17410     A7 00 68 CC |  if_b	wrlong	#0, fp
17414     10 4E 85 C1 |  if_b	sub	fp, #16
17418     10 4E 05 F1 | 	add	fp, #16
1741c     A7 26 02 FB | 	rdlong	local01, fp
17420     10 4E 85 F1 | 	sub	fp, #16
17424     A7 26 62 FC | 	wrlong	local01, fp
17428     08 4E 05 F1 | 	add	fp, #8
1742c     A7 3C 68 FC | 	wrlong	#30, fp
17430     08 4E 85 F1 | 	sub	fp, #8
17434     A7 12 02 F6 | 	mov	arg01, fp
17438     9C 62 BF FD | 	call	#_push
1743c                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
1743c     28 01 90 FD | 	jmp	#LR__1884
17440                 | LR__1881
17440     FC 61 BF FD | 	call	#_pop
17444     A7 FA 61 FC | 	wrlong	result1, fp
17448     04 4E 05 F1 | 	add	fp, #4
1744c     A7 FC 61 FC | 	wrlong	result2, fp
17450     04 4E 05 F1 | 	add	fp, #4
17454     A7 FE 61 FC | 	wrlong	result3, fp
17458                 | ' t1=pop()
17458                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
17458     08 4E 85 F1 | 	sub	fp, #8
1745c     1C FE 0D F2 | 	cmp	result3, #28 wz
17460     08 4E 05 51 |  if_ne	add	fp, #8
17464     A7 26 02 5B |  if_ne	rdlong	local01, fp
17468     08 4E 85 51 |  if_ne	sub	fp, #8
1746c     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
17470     E8 00 90 5D |  if_ne	jmp	#LR__1883
17474     A7 26 02 FB | 	rdlong	local01, fp
17478     52 00 00 FF 
1747c     08 E5 05 F1 | 	add	objptr, ##42248
17480     F2 26 62 FC | 	wrlong	local01, objptr
17484                 | '   q=t1.result.uresult
17484                 | '   if q<7 then 
17484     52 00 00 FF 
17488     08 E5 85 F1 | 	sub	objptr, ##42248
1748c     07 26 56 F2 | 	cmps	local01, #7 wc
17490     B8 00 90 3D |  if_ae	jmp	#LR__1882
17494     00 C0 1B FF 
17498     00 26 06 F6 | 	mov	local01, ##931135488
1749c     52 00 00 FF 
174a0     08 E5 05 F1 | 	add	objptr, ##42248
174a4     F2 16 02 FB | 	rdlong	arg03, objptr
174a8     02 16 66 F0 | 	shl	arg03, #2
174ac     B0 E5 85 F1 | 	sub	objptr, #432
174b0     F2 16 02 F1 | 	add	arg03, objptr
174b4     0B 13 02 FB | 	rdlong	arg01, arg03
174b8     51 00 00 FF 
174bc     58 E5 85 F1 | 	sub	objptr, ##41816
174c0     09 13 52 F6 | 	abs	arg01, arg01 wc
174c4     1F 28 C6 C9 |  if_b	decod	local02, #31
174c8     00 28 06 36 |  if_ae	mov	local02, #0
174cc     F4 23 B1 FD | 	call	#__system___float_fromuns
174d0     14 FB 61 F5 | 	xor	result1, local02
174d4     FD 12 02 F6 | 	mov	arg01, result1
174d8     FF 7F 23 FF 
174dc     00 14 06 F6 | 	mov	arg02, ##1191181824
174e0     E8 29 B1 FD | 	call	#__system___float_div
174e4     FD 14 02 F6 | 	mov	arg02, result1
174e8     13 13 02 F6 | 	mov	arg01, local01
174ec     08 24 B1 FD | 	call	#__system___float_add
174f0     10 4E 05 F1 | 	add	fp, #16
174f4     A7 FA 61 FC | 	wrlong	result1, fp
174f8                 | '     fpad=(1.0/65536.0)+padx(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
174f8     10 4E 85 F1 | 	sub	fp, #16
174fc     1F FA 05 F4 | 	bitl	result1, #31
17500     FD 12 02 F6 | 	mov	arg01, result1
17504     89 41 1D FF 
17508     6F 14 06 F6 | 	mov	arg02, ##981668463
1750c     01 16 06 F6 | 	mov	arg03, #1
17510     E8 2B B1 FD | 	call	#__system___float_cmp
17514     00 FA 55 F2 | 	cmps	result1, #0 wc
17518     10 4E 05 C1 |  if_b	add	fp, #16
1751c     A7 00 68 CC |  if_b	wrlong	#0, fp
17520     10 4E 85 C1 |  if_b	sub	fp, #16
17524     10 4E 05 F1 | 	add	fp, #16
17528     A7 26 02 FB | 	rdlong	local01, fp
1752c     10 4E 85 F1 | 	sub	fp, #16
17530     A7 26 62 FC | 	wrlong	local01, fp
17534     08 4E 05 F1 | 	add	fp, #8
17538     A7 3C 68 FC | 	wrlong	#30, fp
1753c     08 4E 85 F1 | 	sub	fp, #8
17540     A7 12 02 F6 | 	mov	arg01, fp
17544     90 61 BF FD | 	call	#_push
17548                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
17548     1C 00 90 FD | 	jmp	#LR__1884
1754c                 | LR__1882
1754c     29 12 06 F6 | 	mov	arg01, #41
17550     00 14 06 F6 | 	mov	arg02, #0
17554     DC BE B0 FD | 	call	#_printerror
17558                 | '      printerror(41) : return
17558     0C 00 90 FD | 	jmp	#LR__1884
1755c                 | LR__1883
1755c     29 12 06 F6 | 	mov	arg01, #41
17560     00 14 06 F6 | 	mov	arg02, #0
17564     CC BE B0 FD | 	call	#_printerror
17568                 | LR__1884
17568     A7 F0 03 F6 | 	mov	ptra, fp
1756c     B2 00 A0 FD | 	call	#popregs_
17570                 | _do_padx_ret
17570     2D 00 64 FD | 	ret
17574                 | 
17574                 | ' 
17574                 | ' ' ------------------ pady
17574                 | ' 
17574                 | ' sub do_pady
17574                 | _do_pady
17574     02 4A 05 F6 | 	mov	COUNT_, #2
17578     A8 00 A0 FD | 	call	#pushregs_
1757c     14 F0 07 F1 | 	add	ptra, #20
17580     4A 00 00 FF 
17584     80 E4 05 F1 | 	add	objptr, ##38016
17588     F2 26 02 FB | 	rdlong	local01, objptr
1758c     13 17 02 F6 | 	mov	arg03, local01
17590     01 16 66 F0 | 	shl	arg03, #1
17594     13 17 02 F1 | 	add	arg03, local01
17598     02 16 66 F0 | 	shl	arg03, #2
1759c     03 00 00 FF 
175a0     04 E4 85 F1 | 	sub	objptr, ##1540
175a4     F2 16 02 F1 | 	add	arg03, objptr
175a8     0B 17 02 FB | 	rdlong	arg03, arg03
175ac     0C 4E 05 F1 | 	add	fp, #12
175b0     A7 16 62 FC | 	wrlong	arg03, fp
175b4                 | ' 
175b4                 | ' numpar=compiledline(lineptr_e).result.uresult
175b4                 | ' if numpar>1 then print "pady: "; : printerror(39) : return
175b4     0C 4E 85 F1 | 	sub	fp, #12
175b8     02 16 16 F2 | 	cmp	arg03, #2 wc
175bc     47 00 00 FF 
175c0     7C E4 85 F1 | 	sub	objptr, ##36476
175c4     40 00 90 CD |  if_b	jmp	#LR__1890
175c8     00 12 06 F6 | 	mov	arg01, #0
175cc     A8 55 B1 FD | 	call	#__system___getiolock_0611
175d0     FD 12 02 F6 | 	mov	arg01, result1
175d4     78 F8 B0 FD | 	call	#__system___lockmem
175d8     BA 01 00 FF 
175dc     9B 14 06 F6 | 	mov	arg02, ##@LR__5968
175e0     00 12 06 F6 | 	mov	arg01, #0
175e4     00 16 06 F6 | 	mov	arg03, #0
175e8     58 05 B1 FD | 	call	#__system___basic_print_string
175ec     00 12 06 F6 | 	mov	arg01, #0
175f0     84 55 B1 FD | 	call	#__system___getiolock_0611
175f4     FD 00 68 FC | 	wrlong	#0, result1
175f8     27 12 06 F6 | 	mov	arg01, #39
175fc     00 14 06 F6 | 	mov	arg02, #0
17600     30 BE B0 FD | 	call	#_printerror
17604     E0 01 90 FD | 	jmp	#LR__1894
17608                 | LR__1890
17608                 | ' if numpar=0 then 
17608     0C 4E 05 F1 | 	add	fp, #12
1760c     A7 FE 09 FB | 	rdlong	result3, fp wz
17610     0C 4E 85 F1 | 	sub	fp, #12
17614     A8 00 90 5D |  if_ne	jmp	#LR__1891
17618     00 C0 1B FF 
1761c     00 26 06 F6 | 	mov	local01, ##931135488
17620     51 00 00 FF 
17624     74 E5 05 F1 | 	add	objptr, ##41844
17628     F2 12 02 FB | 	rdlong	arg01, objptr
1762c     51 00 00 FF 
17630     74 E5 85 F1 | 	sub	objptr, ##41844
17634     09 13 52 F6 | 	abs	arg01, arg01 wc
17638     1F 28 C6 C9 |  if_b	decod	local02, #31
1763c     00 28 06 36 |  if_ae	mov	local02, #0
17640     80 22 B1 FD | 	call	#__system___float_fromuns
17644     14 FB 61 F5 | 	xor	result1, local02
17648     FD 12 02 F6 | 	mov	arg01, result1
1764c     FF 7F 23 FF 
17650     00 14 06 F6 | 	mov	arg02, ##1191181824
17654     74 28 B1 FD | 	call	#__system___float_div
17658     FD 14 02 F6 | 	mov	arg02, result1
1765c     13 13 02 F6 | 	mov	arg01, local01
17660     94 22 B1 FD | 	call	#__system___float_add
17664     10 4E 05 F1 | 	add	fp, #16
17668     A7 FA 61 FC | 	wrlong	result1, fp
1766c                 | '   fpad=(1.0/65536.0)+pady(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
1766c     10 4E 85 F1 | 	sub	fp, #16
17670     1F FA 05 F4 | 	bitl	result1, #31
17674     FD 12 02 F6 | 	mov	arg01, result1
17678     89 41 1D FF 
1767c     6F 14 06 F6 | 	mov	arg02, ##981668463
17680     01 16 06 F6 | 	mov	arg03, #1
17684     74 2A B1 FD | 	call	#__system___float_cmp
17688     00 FA 55 F2 | 	cmps	result1, #0 wc
1768c     10 4E 05 C1 |  if_b	add	fp, #16
17690     A7 00 68 CC |  if_b	wrlong	#0, fp
17694     10 4E 85 C1 |  if_b	sub	fp, #16
17698     10 4E 05 F1 | 	add	fp, #16
1769c     A7 26 02 FB | 	rdlong	local01, fp
176a0     10 4E 85 F1 | 	sub	fp, #16
176a4     A7 26 62 FC | 	wrlong	local01, fp
176a8     08 4E 05 F1 | 	add	fp, #8
176ac     A7 3C 68 FC | 	wrlong	#30, fp
176b0     08 4E 85 F1 | 	sub	fp, #8
176b4     A7 12 02 F6 | 	mov	arg01, fp
176b8     1C 60 BF FD | 	call	#_push
176bc                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
176bc     28 01 90 FD | 	jmp	#LR__1894
176c0                 | LR__1891
176c0     7C 5F BF FD | 	call	#_pop
176c4     A7 FA 61 FC | 	wrlong	result1, fp
176c8     04 4E 05 F1 | 	add	fp, #4
176cc     A7 FC 61 FC | 	wrlong	result2, fp
176d0     04 4E 05 F1 | 	add	fp, #4
176d4     A7 FE 61 FC | 	wrlong	result3, fp
176d8                 | ' t1=pop()
176d8                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
176d8     08 4E 85 F1 | 	sub	fp, #8
176dc     1C FE 0D F2 | 	cmp	result3, #28 wz
176e0     08 4E 05 51 |  if_ne	add	fp, #8
176e4     A7 26 02 5B |  if_ne	rdlong	local01, fp
176e8     08 4E 85 51 |  if_ne	sub	fp, #8
176ec     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
176f0     E8 00 90 5D |  if_ne	jmp	#LR__1893
176f4     A7 26 02 FB | 	rdlong	local01, fp
176f8     52 00 00 FF 
176fc     08 E5 05 F1 | 	add	objptr, ##42248
17700     F2 26 62 FC | 	wrlong	local01, objptr
17704                 | '   q=t1.result.uresult
17704                 | '   if q<7 then 
17704     52 00 00 FF 
17708     08 E5 85 F1 | 	sub	objptr, ##42248
1770c     07 26 56 F2 | 	cmps	local01, #7 wc
17710     B8 00 90 3D |  if_ae	jmp	#LR__1892
17714     00 C0 1B FF 
17718     00 26 06 F6 | 	mov	local01, ##931135488
1771c     52 00 00 FF 
17720     08 E5 05 F1 | 	add	objptr, ##42248
17724     F2 16 02 FB | 	rdlong	arg03, objptr
17728     02 16 66 F0 | 	shl	arg03, #2
1772c     94 E5 85 F1 | 	sub	objptr, #404
17730     F2 16 02 F1 | 	add	arg03, objptr
17734     0B 13 02 FB | 	rdlong	arg01, arg03
17738     51 00 00 FF 
1773c     74 E5 85 F1 | 	sub	objptr, ##41844
17740     09 13 52 F6 | 	abs	arg01, arg01 wc
17744     1F 28 C6 C9 |  if_b	decod	local02, #31
17748     00 28 06 36 |  if_ae	mov	local02, #0
1774c     74 21 B1 FD | 	call	#__system___float_fromuns
17750     14 FB 61 F5 | 	xor	result1, local02
17754     FD 12 02 F6 | 	mov	arg01, result1
17758     FF 7F 23 FF 
1775c     00 14 06 F6 | 	mov	arg02, ##1191181824
17760     68 27 B1 FD | 	call	#__system___float_div
17764     FD 14 02 F6 | 	mov	arg02, result1
17768     13 13 02 F6 | 	mov	arg01, local01
1776c     88 21 B1 FD | 	call	#__system___float_add
17770     10 4E 05 F1 | 	add	fp, #16
17774     A7 FA 61 FC | 	wrlong	result1, fp
17778                 | '     fpad=(1.0/65536.0)+pady(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
17778     10 4E 85 F1 | 	sub	fp, #16
1777c     1F FA 05 F4 | 	bitl	result1, #31
17780     FD 12 02 F6 | 	mov	arg01, result1
17784     89 41 1D FF 
17788     6F 14 06 F6 | 	mov	arg02, ##981668463
1778c     01 16 06 F6 | 	mov	arg03, #1
17790     68 29 B1 FD | 	call	#__system___float_cmp
17794     00 FA 55 F2 | 	cmps	result1, #0 wc
17798     10 4E 05 C1 |  if_b	add	fp, #16
1779c     A7 00 68 CC |  if_b	wrlong	#0, fp
177a0     10 4E 85 C1 |  if_b	sub	fp, #16
177a4     10 4E 05 F1 | 	add	fp, #16
177a8     A7 26 02 FB | 	rdlong	local01, fp
177ac     10 4E 85 F1 | 	sub	fp, #16
177b0     A7 26 62 FC | 	wrlong	local01, fp
177b4     08 4E 05 F1 | 	add	fp, #8
177b8     A7 3C 68 FC | 	wrlong	#30, fp
177bc     08 4E 85 F1 | 	sub	fp, #8
177c0     A7 12 02 F6 | 	mov	arg01, fp
177c4     10 5F BF FD | 	call	#_push
177c8                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
177c8     1C 00 90 FD | 	jmp	#LR__1894
177cc                 | LR__1892
177cc     29 12 06 F6 | 	mov	arg01, #41
177d0     00 14 06 F6 | 	mov	arg02, #0
177d4     5C BC B0 FD | 	call	#_printerror
177d8                 | '      printerror(41) : return
177d8     0C 00 90 FD | 	jmp	#LR__1894
177dc                 | LR__1893
177dc     29 12 06 F6 | 	mov	arg01, #41
177e0     00 14 06 F6 | 	mov	arg02, #0
177e4     4C BC B0 FD | 	call	#_printerror
177e8                 | LR__1894
177e8     A7 F0 03 F6 | 	mov	ptra, fp
177ec     B2 00 A0 FD | 	call	#popregs_
177f0                 | _do_pady_ret
177f0     2D 00 64 FD | 	ret
177f4                 | 
177f4                 | ' 
177f4                 | ' ' ------------------ padz
177f4                 | ' 
177f4                 | ' sub do_padz
177f4                 | _do_padz
177f4     02 4A 05 F6 | 	mov	COUNT_, #2
177f8     A8 00 A0 FD | 	call	#pushregs_
177fc     14 F0 07 F1 | 	add	ptra, #20
17800     4A 00 00 FF 
17804     80 E4 05 F1 | 	add	objptr, ##38016
17808     F2 26 02 FB | 	rdlong	local01, objptr
1780c     13 17 02 F6 | 	mov	arg03, local01
17810     01 16 66 F0 | 	shl	arg03, #1
17814     13 17 02 F1 | 	add	arg03, local01
17818     02 16 66 F0 | 	shl	arg03, #2
1781c     03 00 00 FF 
17820     04 E4 85 F1 | 	sub	objptr, ##1540
17824     F2 16 02 F1 | 	add	arg03, objptr
17828     0B 17 02 FB | 	rdlong	arg03, arg03
1782c     0C 4E 05 F1 | 	add	fp, #12
17830     A7 16 62 FC | 	wrlong	arg03, fp
17834                 | ' 
17834                 | ' numpar=compiledline(lineptr_e).result.uresult
17834                 | ' if numpar>1 then print "padz: "; : printerror(39) : return
17834     0C 4E 85 F1 | 	sub	fp, #12
17838     02 16 16 F2 | 	cmp	arg03, #2 wc
1783c     47 00 00 FF 
17840     7C E4 85 F1 | 	sub	objptr, ##36476
17844     40 00 90 CD |  if_b	jmp	#LR__1900
17848     00 12 06 F6 | 	mov	arg01, #0
1784c     28 53 B1 FD | 	call	#__system___getiolock_0611
17850     FD 12 02 F6 | 	mov	arg01, result1
17854     F8 F5 B0 FD | 	call	#__system___lockmem
17858     BA 01 00 FF 
1785c     A2 14 06 F6 | 	mov	arg02, ##@LR__5969
17860     00 12 06 F6 | 	mov	arg01, #0
17864     00 16 06 F6 | 	mov	arg03, #0
17868     D8 02 B1 FD | 	call	#__system___basic_print_string
1786c     00 12 06 F6 | 	mov	arg01, #0
17870     04 53 B1 FD | 	call	#__system___getiolock_0611
17874     FD 00 68 FC | 	wrlong	#0, result1
17878     27 12 06 F6 | 	mov	arg01, #39
1787c     00 14 06 F6 | 	mov	arg02, #0
17880     B0 BB B0 FD | 	call	#_printerror
17884     E0 01 90 FD | 	jmp	#LR__1904
17888                 | LR__1900
17888                 | ' if numpar=0 then 
17888     0C 4E 05 F1 | 	add	fp, #12
1788c     A7 FE 09 FB | 	rdlong	result3, fp wz
17890     0C 4E 85 F1 | 	sub	fp, #12
17894     A8 00 90 5D |  if_ne	jmp	#LR__1901
17898     00 C0 1B FF 
1789c     00 26 06 F6 | 	mov	local01, ##931135488
178a0     51 00 00 FF 
178a4     90 E5 05 F1 | 	add	objptr, ##41872
178a8     F2 12 02 FB | 	rdlong	arg01, objptr
178ac     51 00 00 FF 
178b0     90 E5 85 F1 | 	sub	objptr, ##41872
178b4     09 13 52 F6 | 	abs	arg01, arg01 wc
178b8     1F 28 C6 C9 |  if_b	decod	local02, #31
178bc     00 28 06 36 |  if_ae	mov	local02, #0
178c0     00 20 B1 FD | 	call	#__system___float_fromuns
178c4     14 FB 61 F5 | 	xor	result1, local02
178c8     FD 12 02 F6 | 	mov	arg01, result1
178cc     FF 7F 23 FF 
178d0     00 14 06 F6 | 	mov	arg02, ##1191181824
178d4     F4 25 B1 FD | 	call	#__system___float_div
178d8     FD 14 02 F6 | 	mov	arg02, result1
178dc     13 13 02 F6 | 	mov	arg01, local01
178e0     14 20 B1 FD | 	call	#__system___float_add
178e4     10 4E 05 F1 | 	add	fp, #16
178e8     A7 FA 61 FC | 	wrlong	result1, fp
178ec                 | '   fpad=(1.0/65536.0)+padz(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
178ec     10 4E 85 F1 | 	sub	fp, #16
178f0     1F FA 05 F4 | 	bitl	result1, #31
178f4     FD 12 02 F6 | 	mov	arg01, result1
178f8     89 41 1D FF 
178fc     6F 14 06 F6 | 	mov	arg02, ##981668463
17900     01 16 06 F6 | 	mov	arg03, #1
17904     F4 27 B1 FD | 	call	#__system___float_cmp
17908     00 FA 55 F2 | 	cmps	result1, #0 wc
1790c     10 4E 05 C1 |  if_b	add	fp, #16
17910     A7 00 68 CC |  if_b	wrlong	#0, fp
17914     10 4E 85 C1 |  if_b	sub	fp, #16
17918     10 4E 05 F1 | 	add	fp, #16
1791c     A7 26 02 FB | 	rdlong	local01, fp
17920     10 4E 85 F1 | 	sub	fp, #16
17924     A7 26 62 FC | 	wrlong	local01, fp
17928     08 4E 05 F1 | 	add	fp, #8
1792c     A7 3C 68 FC | 	wrlong	#30, fp
17930     08 4E 85 F1 | 	sub	fp, #8
17934     A7 12 02 F6 | 	mov	arg01, fp
17938     9C 5D BF FD | 	call	#_push
1793c                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
1793c     28 01 90 FD | 	jmp	#LR__1904
17940                 | LR__1901
17940     FC 5C BF FD | 	call	#_pop
17944     A7 FA 61 FC | 	wrlong	result1, fp
17948     04 4E 05 F1 | 	add	fp, #4
1794c     A7 FC 61 FC | 	wrlong	result2, fp
17950     04 4E 05 F1 | 	add	fp, #4
17954     A7 FE 61 FC | 	wrlong	result3, fp
17958                 | ' t1=pop()
17958                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
17958     08 4E 85 F1 | 	sub	fp, #8
1795c     1C FE 0D F2 | 	cmp	result3, #28 wz
17960     08 4E 05 51 |  if_ne	add	fp, #8
17964     A7 26 02 5B |  if_ne	rdlong	local01, fp
17968     08 4E 85 51 |  if_ne	sub	fp, #8
1796c     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
17970     E8 00 90 5D |  if_ne	jmp	#LR__1903
17974     A7 26 02 FB | 	rdlong	local01, fp
17978     52 00 00 FF 
1797c     08 E5 05 F1 | 	add	objptr, ##42248
17980     F2 26 62 FC | 	wrlong	local01, objptr
17984                 | '   q=t1.result.uresult
17984                 | '   if q<7 then 
17984     52 00 00 FF 
17988     08 E5 85 F1 | 	sub	objptr, ##42248
1798c     07 26 56 F2 | 	cmps	local01, #7 wc
17990     B8 00 90 3D |  if_ae	jmp	#LR__1902
17994     00 C0 1B FF 
17998     00 26 06 F6 | 	mov	local01, ##931135488
1799c     52 00 00 FF 
179a0     08 E5 05 F1 | 	add	objptr, ##42248
179a4     F2 16 02 FB | 	rdlong	arg03, objptr
179a8     02 16 66 F0 | 	shl	arg03, #2
179ac     78 E5 85 F1 | 	sub	objptr, #376
179b0     F2 16 02 F1 | 	add	arg03, objptr
179b4     0B 13 02 FB | 	rdlong	arg01, arg03
179b8     51 00 00 FF 
179bc     90 E5 85 F1 | 	sub	objptr, ##41872
179c0     09 13 52 F6 | 	abs	arg01, arg01 wc
179c4     1F 28 C6 C9 |  if_b	decod	local02, #31
179c8     00 28 06 36 |  if_ae	mov	local02, #0
179cc     F4 1E B1 FD | 	call	#__system___float_fromuns
179d0     14 FB 61 F5 | 	xor	result1, local02
179d4     FD 12 02 F6 | 	mov	arg01, result1
179d8     FF 7F 23 FF 
179dc     00 14 06 F6 | 	mov	arg02, ##1191181824
179e0     E8 24 B1 FD | 	call	#__system___float_div
179e4     FD 14 02 F6 | 	mov	arg02, result1
179e8     13 13 02 F6 | 	mov	arg01, local01
179ec     08 1F B1 FD | 	call	#__system___float_add
179f0     10 4E 05 F1 | 	add	fp, #16
179f4     A7 FA 61 FC | 	wrlong	result1, fp
179f8                 | '     fpad=(1.0/65536.0)+padz(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
179f8     10 4E 85 F1 | 	sub	fp, #16
179fc     1F FA 05 F4 | 	bitl	result1, #31
17a00     FD 12 02 F6 | 	mov	arg01, result1
17a04     89 41 1D FF 
17a08     6F 14 06 F6 | 	mov	arg02, ##981668463
17a0c     01 16 06 F6 | 	mov	arg03, #1
17a10     E8 26 B1 FD | 	call	#__system___float_cmp
17a14     00 FA 55 F2 | 	cmps	result1, #0 wc
17a18     10 4E 05 C1 |  if_b	add	fp, #16
17a1c     A7 00 68 CC |  if_b	wrlong	#0, fp
17a20     10 4E 85 C1 |  if_b	sub	fp, #16
17a24     10 4E 05 F1 | 	add	fp, #16
17a28     A7 26 02 FB | 	rdlong	local01, fp
17a2c     10 4E 85 F1 | 	sub	fp, #16
17a30     A7 26 62 FC | 	wrlong	local01, fp
17a34     08 4E 05 F1 | 	add	fp, #8
17a38     A7 3C 68 FC | 	wrlong	#30, fp
17a3c     08 4E 85 F1 | 	sub	fp, #8
17a40     A7 12 02 F6 | 	mov	arg01, fp
17a44     90 5C BF FD | 	call	#_push
17a48                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
17a48     1C 00 90 FD | 	jmp	#LR__1904
17a4c                 | LR__1902
17a4c     29 12 06 F6 | 	mov	arg01, #41
17a50     00 14 06 F6 | 	mov	arg02, #0
17a54     DC B9 B0 FD | 	call	#_printerror
17a58                 | '      printerror(41) : return
17a58     0C 00 90 FD | 	jmp	#LR__1904
17a5c                 | LR__1903
17a5c     29 12 06 F6 | 	mov	arg01, #41
17a60     00 14 06 F6 | 	mov	arg02, #0
17a64     CC B9 B0 FD | 	call	#_printerror
17a68                 | LR__1904
17a68     A7 F0 03 F6 | 	mov	ptra, fp
17a6c     B2 00 A0 FD | 	call	#popregs_
17a70                 | _do_padz_ret
17a70     2D 00 64 FD | 	ret
17a74                 | 
17a74                 | ' 
17a74                 | ' '-------------------- paper
17a74                 | ' 
17a74                 | ' sub do_paper
17a74                 | _do_paper
17a74     03 4A 05 F6 | 	mov	COUNT_, #3
17a78     A8 00 A0 FD | 	call	#pushregs_
17a7c     C0 5B BF FD | 	call	#_pop
17a80     FD 26 02 F6 | 	mov	local01, result1
17a84     FE 28 02 F6 | 	mov	local02, result2
17a88     FF 2A 02 F6 | 	mov	local03, result3
17a8c                 | ' t1=pop() 
17a8c                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
17a8c     1E 2A 0E F2 | 	cmp	local03, #30 wz
17a90     10 00 90 5D |  if_ne	jmp	#LR__1910
17a94     13 13 02 F6 | 	mov	arg01, local01
17a98     00 14 06 F6 | 	mov	arg02, #0
17a9c     F0 26 B1 FD | 	call	#__system___float_tointeger
17aa0     FD 26 02 F6 | 	mov	local01, result1
17aa4                 | LR__1910
17aa4                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
17aa4     1F 2A 0E F2 | 	cmp	local03, #31 wz
17aa8     18 00 90 5D |  if_ne	jmp	#LR__1911
17aac     13 13 02 F6 | 	mov	arg01, local01
17ab0     20 2A B1 FD | 	call	#__system____builtin_atof
17ab4     FD 12 02 F6 | 	mov	arg01, result1
17ab8     00 14 06 F6 | 	mov	arg02, #0
17abc     D0 26 B1 FD | 	call	#__system___float_tointeger
17ac0     FD 26 02 F6 | 	mov	local01, result1
17ac4                 | LR__1911
17ac4     37 00 00 FF 
17ac8     38 E4 05 F1 | 	add	objptr, ##28216
17acc     F2 26 62 FC | 	wrlong	local01, objptr
17ad0     04 E4 05 F1 | 	add	objptr, #4
17ad4     F2 12 02 FB | 	rdlong	arg01, objptr
17ad8                 | ' 
17ad8                 | ' write_color:=ff
17ad8     36 00 00 FF 
17adc     FB E5 85 F1 | 	sub	objptr, ##28155
17ae0     F2 12 62 FC | 	wrlong	arg01, objptr
17ae4                 | ' write_background:=bb
17ae4     04 E4 05 F1 | 	add	objptr, #4
17ae8     F2 26 62 FC | 	wrlong	local01, objptr
17aec     45 E4 85 F1 | 	sub	objptr, #69
17af0     A7 F0 03 F6 | 	mov	ptra, fp
17af4     B2 00 A0 FD | 	call	#popregs_
17af8                 | _do_paper_ret
17af8     2D 00 64 FD | 	ret
17afc                 | 
17afc                 | ' 
17afc                 | ' '-------------------- peek
17afc                 | ' 
17afc                 | ' sub do_peek
17afc                 | _do_peek
17afc     00 4A 05 F6 | 	mov	COUNT_, #0
17b00     A8 00 A0 FD | 	call	#pushregs_
17b04     14 F0 07 F1 | 	add	ptra, #20
17b08     34 5B BF FD | 	call	#_pop
17b0c     A7 FA 61 FC | 	wrlong	result1, fp
17b10     04 4E 05 F1 | 	add	fp, #4
17b14     A7 FC 61 FC | 	wrlong	result2, fp
17b18     04 4E 05 F1 | 	add	fp, #4
17b1c     A7 FE 61 FC | 	wrlong	result3, fp
17b20     08 4E 85 F1 | 	sub	fp, #8
17b24     A7 12 02 F6 | 	mov	arg01, fp
17b28     F8 5C BF FD | 	call	#_converttoint
17b2c     0C 4E 05 F1 | 	add	fp, #12
17b30     A7 FA 61 FC | 	wrlong	result1, fp
17b34                 | ' 
17b34                 | ' t1=pop()
17b34                 | ' a=converttoint(t1)
17b34                 | ' if a<$80000 then r=peek(a) else r=pspeek(a)
17b34     0C 4E 85 F1 | 	sub	fp, #12
17b38     00 04 00 FF 
17b3c     00 FA 15 F2 | 	cmp	result1, ##524288 wc
17b40     1C 00 90 3D |  if_ae	jmp	#LR__1920
17b44     0C 4E 05 F1 | 	add	fp, #12
17b48     A7 12 02 FB | 	rdlong	arg01, fp
17b4c     09 FB C1 FA | 	rdbyte	result1, arg01
17b50     04 4E 05 F1 | 	add	fp, #4
17b54     A7 FA 61 FC | 	wrlong	result1, fp
17b58     10 4E 85 F1 | 	sub	fp, #16
17b5c     20 00 90 FD | 	jmp	#LR__1921
17b60                 | LR__1920
17b60     0C 4E 05 F1 | 	add	fp, #12
17b64     A7 12 02 FB | 	rdlong	arg01, fp
17b68     0C 4E 85 F1 | 	sub	fp, #12
17b6c     3C BB B0 FD | 	call	#_pspeek
17b70     FD FA E1 F8 | 	getbyte	result1, result1, #0
17b74     10 4E 05 F1 | 	add	fp, #16
17b78     A7 FA 61 FC | 	wrlong	result1, fp
17b7c     10 4E 85 F1 | 	sub	fp, #16
17b80                 | LR__1921
17b80     08 4E 05 F1 | 	add	fp, #8
17b84     A7 3A 68 FC | 	wrlong	#29, fp
17b88     08 4E 05 F1 | 	add	fp, #8
17b8c     A7 12 02 FB | 	rdlong	arg01, fp
17b90     10 4E 85 F1 | 	sub	fp, #16
17b94     A7 12 62 FC | 	wrlong	arg01, fp
17b98     A7 12 02 F6 | 	mov	arg01, fp
17b9c     38 5B BF FD | 	call	#_push
17ba0     A7 F0 03 F6 | 	mov	ptra, fp
17ba4     B2 00 A0 FD | 	call	#popregs_
17ba8                 | _do_peek_ret
17ba8     2D 00 64 FD | 	ret
17bac                 | 
17bac                 | ' 
17bac                 | ' '-------------------- pinfloat
17bac                 | ' 
17bac                 | ' sub do_pinfloat
17bac                 | _do_pinfloat
17bac     00 4A 05 F6 | 	mov	COUNT_, #0
17bb0     A8 00 A0 FD | 	call	#pushregs_
17bb4     0C F0 07 F1 | 	add	ptra, #12
17bb8     84 5A BF FD | 	call	#_pop
17bbc     A7 FA 61 FC | 	wrlong	result1, fp
17bc0     04 4E 05 F1 | 	add	fp, #4
17bc4     A7 FC 61 FC | 	wrlong	result2, fp
17bc8     04 4E 05 F1 | 	add	fp, #4
17bcc     A7 FE 61 FC | 	wrlong	result3, fp
17bd0     08 4E 85 F1 | 	sub	fp, #8
17bd4     A7 12 02 F6 | 	mov	arg01, fp
17bd8     48 5C BF FD | 	call	#_converttoint
17bdc     50 FA 61 FD | 	fltl	result1
17be0     A7 F0 03 F6 | 	mov	ptra, fp
17be4     B2 00 A0 FD | 	call	#popregs_
17be8                 | _do_pinfloat_ret
17be8     2D 00 64 FD | 	ret
17bec                 | 
17bec                 | ' 
17bec                 | ' '-------------------- pinhi
17bec                 | ' 
17bec                 | ' sub do_pinhi
17bec                 | _do_pinhi
17bec     00 4A 05 F6 | 	mov	COUNT_, #0
17bf0     A8 00 A0 FD | 	call	#pushregs_
17bf4     0C F0 07 F1 | 	add	ptra, #12
17bf8     44 5A BF FD | 	call	#_pop
17bfc     A7 FA 61 FC | 	wrlong	result1, fp
17c00     04 4E 05 F1 | 	add	fp, #4
17c04     A7 FC 61 FC | 	wrlong	result2, fp
17c08     04 4E 05 F1 | 	add	fp, #4
17c0c     A7 FE 61 FC | 	wrlong	result3, fp
17c10     08 4E 85 F1 | 	sub	fp, #8
17c14     A7 12 02 F6 | 	mov	arg01, fp
17c18     08 5C BF FD | 	call	#_converttoint
17c1c     59 FA 61 FD | 	drvh	result1
17c20     A7 F0 03 F6 | 	mov	ptra, fp
17c24     B2 00 A0 FD | 	call	#popregs_
17c28                 | _do_pinhi_ret
17c28     2D 00 64 FD | 	ret
17c2c                 | 
17c2c                 | ' 
17c2c                 | ' '-------------------- pinlo
17c2c                 | ' 
17c2c                 | ' sub do_pinlo
17c2c                 | _do_pinlo
17c2c     00 4A 05 F6 | 	mov	COUNT_, #0
17c30     A8 00 A0 FD | 	call	#pushregs_
17c34     0C F0 07 F1 | 	add	ptra, #12
17c38     04 5A BF FD | 	call	#_pop
17c3c     A7 FA 61 FC | 	wrlong	result1, fp
17c40     04 4E 05 F1 | 	add	fp, #4
17c44     A7 FC 61 FC | 	wrlong	result2, fp
17c48     04 4E 05 F1 | 	add	fp, #4
17c4c     A7 FE 61 FC | 	wrlong	result3, fp
17c50     08 4E 85 F1 | 	sub	fp, #8
17c54     A7 12 02 F6 | 	mov	arg01, fp
17c58     C8 5B BF FD | 	call	#_converttoint
17c5c     58 FA 61 FD | 	drvl	result1
17c60     A7 F0 03 F6 | 	mov	ptra, fp
17c64     B2 00 A0 FD | 	call	#popregs_
17c68                 | _do_pinlo_ret
17c68     2D 00 64 FD | 	ret
17c6c                 | 
17c6c                 | ' 
17c6c                 | ' '-------------------- pinread
17c6c                 | ' 
17c6c                 | ' sub do_pinread
17c6c                 | _do_pinread
17c6c     00 4A 05 F6 | 	mov	COUNT_, #0
17c70     A8 00 A0 FD | 	call	#pushregs_
17c74     0C F0 07 F1 | 	add	ptra, #12
17c78     C4 59 BF FD | 	call	#_pop
17c7c     A7 FA 61 FC | 	wrlong	result1, fp
17c80     04 4E 05 F1 | 	add	fp, #4
17c84     A7 FC 61 FC | 	wrlong	result2, fp
17c88     04 4E 05 F1 | 	add	fp, #4
17c8c     A7 FE 61 FC | 	wrlong	result3, fp
17c90     08 4E 85 F1 | 	sub	fp, #8
17c94     A7 12 02 F6 | 	mov	arg01, fp
17c98     88 5B BF FD | 	call	#_converttoint
17c9c     FD 12 02 F6 | 	mov	arg01, result1
17ca0     20 12 CE F7 | 	test	arg01, #32 wz
17ca4     FF FB 01 56 |  if_ne	mov	result1, inb
17ca8     FE FB 01 A6 |  if_e	mov	result1, ina
17cac     09 FB 41 F0 | 	shr	result1, arg01
17cb0     06 12 46 F0 | 	shr	arg01, #6
17cb4     09 FB 41 F7 | 	zerox	result1, arg01
17cb8     52 00 00 FF 
17cbc     10 E5 05 F1 | 	add	objptr, ##42256
17cc0     F2 FA 61 FC | 	wrlong	result1, objptr
17cc4     52 00 00 FF 
17cc8     10 E5 85 F1 | 	sub	objptr, ##42256
17ccc     08 4E 05 F1 | 	add	fp, #8
17cd0     A7 3A 68 FC | 	wrlong	#29, fp
17cd4     08 4E 85 F1 | 	sub	fp, #8
17cd8     A7 08 68 FC | 	wrlong	#4, fp
17cdc     A7 12 02 F6 | 	mov	arg01, fp
17ce0     F4 59 BF FD | 	call	#_push
17ce4     A7 F0 03 F6 | 	mov	ptra, fp
17ce8     B2 00 A0 FD | 	call	#popregs_
17cec                 | _do_pinread_ret
17cec     2D 00 64 FD | 	ret
17cf0                 | 
17cf0                 | ' 
17cf0                 | ' '-------------------- pinstart
17cf0                 | ' 
17cf0                 | ' sub do_pinstart
17cf0                 | _do_pinstart
17cf0     03 4A 05 F6 | 	mov	COUNT_, #3
17cf4     A8 00 A0 FD | 	call	#pushregs_
17cf8     30 F0 07 F1 | 	add	ptra, #48
17cfc     40 59 BF FD | 	call	#_pop
17d00     FD 16 02 F6 | 	mov	arg03, result1
17d04     FE 14 02 F6 | 	mov	arg02, result2
17d08     FF 18 02 F6 | 	mov	arg04, result3
17d0c     A7 16 62 FC | 	wrlong	arg03, fp
17d10     04 4E 05 F1 | 	add	fp, #4
17d14     A7 14 62 FC | 	wrlong	arg02, fp
17d18     04 4E 05 F1 | 	add	fp, #4
17d1c     A7 18 62 FC | 	wrlong	arg04, fp
17d20     08 4E 85 F1 | 	sub	fp, #8
17d24     18 59 BF FD | 	call	#_pop
17d28     FD 16 02 F6 | 	mov	arg03, result1
17d2c     FE 14 02 F6 | 	mov	arg02, result2
17d30     FF 18 02 F6 | 	mov	arg04, result3
17d34     0C 4E 05 F1 | 	add	fp, #12
17d38     A7 16 62 FC | 	wrlong	arg03, fp
17d3c     04 4E 05 F1 | 	add	fp, #4
17d40     A7 14 62 FC | 	wrlong	arg02, fp
17d44     04 4E 05 F1 | 	add	fp, #4
17d48     A7 18 62 FC | 	wrlong	arg04, fp
17d4c     14 4E 85 F1 | 	sub	fp, #20
17d50     EC 58 BF FD | 	call	#_pop
17d54     FD 16 02 F6 | 	mov	arg03, result1
17d58     FE 14 02 F6 | 	mov	arg02, result2
17d5c     FF 18 02 F6 | 	mov	arg04, result3
17d60     18 4E 05 F1 | 	add	fp, #24
17d64     A7 16 62 FC | 	wrlong	arg03, fp
17d68     04 4E 05 F1 | 	add	fp, #4
17d6c     A7 14 62 FC | 	wrlong	arg02, fp
17d70     04 4E 05 F1 | 	add	fp, #4
17d74     A7 18 62 FC | 	wrlong	arg04, fp
17d78     20 4E 85 F1 | 	sub	fp, #32
17d7c     C0 58 BF FD | 	call	#_pop
17d80     FF 16 02 F6 | 	mov	arg03, result3
17d84     24 4E 05 F1 | 	add	fp, #36
17d88     A7 FA 61 FC | 	wrlong	result1, fp
17d8c     04 4E 05 F1 | 	add	fp, #4
17d90     A7 FC 61 FC | 	wrlong	result2, fp
17d94     04 4E 05 F1 | 	add	fp, #4
17d98     A7 16 62 FC | 	wrlong	arg03, fp
17d9c     08 4E 85 F1 | 	sub	fp, #8
17da0     A7 12 02 F6 | 	mov	arg01, fp
17da4     24 4E 85 F1 | 	sub	fp, #36
17da8     78 5A BF FD | 	call	#_converttoint
17dac     FD 26 02 F6 | 	mov	local01, result1
17db0     18 4E 05 F1 | 	add	fp, #24
17db4     A7 12 02 F6 | 	mov	arg01, fp
17db8     18 4E 85 F1 | 	sub	fp, #24
17dbc     64 5A BF FD | 	call	#_converttoint
17dc0     FD 28 02 F6 | 	mov	local02, result1
17dc4     0C 4E 05 F1 | 	add	fp, #12
17dc8     A7 12 02 F6 | 	mov	arg01, fp
17dcc     0C 4E 85 F1 | 	sub	fp, #12
17dd0     50 5A BF FD | 	call	#_converttoint
17dd4     FD 2A 02 F6 | 	mov	local03, result1
17dd8     A7 12 02 F6 | 	mov	arg01, fp
17ddc     44 5A BF FD | 	call	#_converttoint
17de0     40 26 62 FD | 	dirl	local01
17de4     13 29 02 FC | 	wrpin	local02, local01
17de8     13 2B 12 FC | 	wxpin	local03, local01
17dec     13 FB 21 FC | 	wypin	result1, local01
17df0     41 26 62 FD | 	dirh	local01
17df4     A7 F0 03 F6 | 	mov	ptra, fp
17df8     B2 00 A0 FD | 	call	#popregs_
17dfc                 | _do_pinstart_ret
17dfc     2D 00 64 FD | 	ret
17e00                 | 
17e00                 | ' 
17e00                 | ' '-------------------- pintoggle
17e00                 | ' 
17e00                 | ' sub do_pintoggle
17e00                 | _do_pintoggle
17e00     00 4A 05 F6 | 	mov	COUNT_, #0
17e04     A8 00 A0 FD | 	call	#pushregs_
17e08     0C F0 07 F1 | 	add	ptra, #12
17e0c     30 58 BF FD | 	call	#_pop
17e10     A7 FA 61 FC | 	wrlong	result1, fp
17e14     04 4E 05 F1 | 	add	fp, #4
17e18     A7 FC 61 FC | 	wrlong	result2, fp
17e1c     04 4E 05 F1 | 	add	fp, #4
17e20     A7 FE 61 FC | 	wrlong	result3, fp
17e24     08 4E 85 F1 | 	sub	fp, #8
17e28     A7 12 02 F6 | 	mov	arg01, fp
17e2c     F4 59 BF FD | 	call	#_converttoint
17e30     5F FA 61 FD | 	drvnot	result1
17e34     A7 F0 03 F6 | 	mov	ptra, fp
17e38     B2 00 A0 FD | 	call	#popregs_
17e3c                 | _do_pintoggle_ret
17e3c     2D 00 64 FD | 	ret
17e40                 | 
17e40                 | ' 
17e40                 | ' '-------------------- pinwrite
17e40                 | ' 
17e40                 | ' sub do_pinwrite
17e40                 | _do_pinwrite
17e40     01 4A 05 F6 | 	mov	COUNT_, #1
17e44     A8 00 A0 FD | 	call	#pushregs_
17e48     18 F0 07 F1 | 	add	ptra, #24
17e4c     F0 57 BF FD | 	call	#_pop
17e50     FD 14 02 F6 | 	mov	arg02, result1
17e54     FE 12 02 F6 | 	mov	arg01, result2
17e58     FF 26 02 F6 | 	mov	local01, result3
17e5c     A7 14 62 FC | 	wrlong	arg02, fp
17e60     04 4E 05 F1 | 	add	fp, #4
17e64     A7 12 62 FC | 	wrlong	arg01, fp
17e68     04 4E 05 F1 | 	add	fp, #4
17e6c     A7 26 62 FC | 	wrlong	local01, fp
17e70     08 4E 85 F1 | 	sub	fp, #8
17e74     C8 57 BF FD | 	call	#_pop
17e78     FF 26 02 F6 | 	mov	local01, result3
17e7c     0C 4E 05 F1 | 	add	fp, #12
17e80     A7 FA 61 FC | 	wrlong	result1, fp
17e84     04 4E 05 F1 | 	add	fp, #4
17e88     A7 FC 61 FC | 	wrlong	result2, fp
17e8c     04 4E 05 F1 | 	add	fp, #4
17e90     A7 26 62 FC | 	wrlong	local01, fp
17e94     08 4E 85 F1 | 	sub	fp, #8
17e98     A7 12 02 F6 | 	mov	arg01, fp
17e9c     0C 4E 85 F1 | 	sub	fp, #12
17ea0     80 59 BF FD | 	call	#_converttoint
17ea4     FD 26 02 F6 | 	mov	local01, result1
17ea8     A7 12 02 F6 | 	mov	arg01, fp
17eac     74 59 BF FD | 	call	#_converttoint
17eb0     FD 14 02 F6 | 	mov	arg02, result1
17eb4     13 13 02 F6 | 	mov	arg01, local01
17eb8     48 F1 B0 FD | 	call	#__system___pinwrite
17ebc     A7 F0 03 F6 | 	mov	ptra, fp
17ec0     B2 00 A0 FD | 	call	#popregs_
17ec4                 | _do_pinwrite_ret
17ec4     2D 00 64 FD | 	ret
17ec8                 | 
17ec8                 | ' 
17ec8                 | ' '-------------------- play
17ec8                 | ' 
17ec8                 | ' sub do_play
17ec8                 | _do_play
17ec8     08 4A 05 F6 | 	mov	COUNT_, #8
17ecc     A8 00 A0 FD | 	call	#pushregs_
17ed0     7C F0 07 F1 | 	add	ptra, #124
17ed4     68 4E 05 F1 | 	add	fp, #104
17ed8     77 CC A1 FF 
17edc     A7 7C 6B FC | 	wrlong	##1134096318, fp
17ee0                 | ' speed_coeff=305.873
17ee0                 | ' 
17ee0                 | ' for i=0 to 8 : params(i)=-2.0 : next i
17ee0     64 4E 85 F1 | 	sub	fp, #100
17ee4     A7 00 68 FC | 	wrlong	#0, fp
17ee8     97 18 48 FB | 	callpa	#(@LR__1931-@LR__1930)>>2,fcache_load_ptr_
17eec                 | LR__1930
17eec     A7 16 02 FB | 	rdlong	arg03, fp
17ef0     02 16 66 F0 | 	shl	arg03, #2
17ef4     34 4E 05 F1 | 	add	fp, #52
17ef8     A7 16 02 F1 | 	add	arg03, fp
17efc     00 00 E0 FF 
17f00     0B 01 68 FC | 	wrlong	##-1073741824, arg03
17f04     34 4E 85 F1 | 	sub	fp, #52
17f08     A7 26 02 FB | 	rdlong	local01, fp
17f0c     01 26 06 F1 | 	add	local01, #1
17f10     A7 26 62 FC | 	wrlong	local01, fp
17f14     09 26 56 F2 | 	cmps	local01, #9 wc
17f18     D0 FF 9F CD |  if_b	jmp	#LR__1930
17f1c                 | LR__1931
17f1c     04 4E 85 F1 | 	sub	fp, #4
17f20     4A 00 00 FF 
17f24     80 E4 05 F1 | 	add	objptr, ##38016
17f28     F2 28 02 FB | 	rdlong	local02, objptr
17f2c     14 2B 02 F6 | 	mov	local03, local02
17f30     01 2A 66 F0 | 	shl	local03, #1
17f34     14 2B 02 F1 | 	add	local03, local02
17f38     02 2A 66 F0 | 	shl	local03, #2
17f3c     03 00 00 FF 
17f40     04 E4 85 F1 | 	sub	objptr, ##1540
17f44     F2 2A 02 F1 | 	add	local03, objptr
17f48     15 2D 02 FB | 	rdlong	local04, local03
17f4c     A7 2C 62 FC | 	wrlong	local04, fp
17f50                 | ' numpar=compiledline(lineptr_e).result.uresult
17f50                 | ' for i=numpar to 1 step -1 
17f50     04 4E 05 F1 | 	add	fp, #4
17f54     A7 2C 62 FC | 	wrlong	local04, fp
17f58     04 4E 85 F1 | 	sub	fp, #4
17f5c     47 00 00 FF 
17f60     7C E4 85 F1 | 	sub	objptr, ##36476
17f64                 | LR__1932
17f64     D8 56 BF FD | 	call	#_pop
17f68     5C 4E 05 F1 | 	add	fp, #92
17f6c     A7 FA 61 FC | 	wrlong	result1, fp
17f70     04 4E 05 F1 | 	add	fp, #4
17f74     A7 FC 61 FC | 	wrlong	result2, fp
17f78     04 4E 05 F1 | 	add	fp, #4
17f7c     A7 FE 61 FC | 	wrlong	result3, fp
17f80     60 4E 85 F1 | 	sub	fp, #96
17f84     A7 2A 02 FB | 	rdlong	local03, fp
17f88     01 2A 86 F1 | 	sub	local03, #1
17f8c     02 2A 66 F0 | 	shl	local03, #2
17f90     34 4E 05 F1 | 	add	fp, #52
17f94     A7 2A 02 F1 | 	add	local03, fp
17f98     24 4E 05 F1 | 	add	fp, #36
17f9c     A7 2E 02 F6 | 	mov	local05, fp
17fa0     17 13 02 F6 | 	mov	arg01, local05
17fa4     5C 4E 85 F1 | 	sub	fp, #92
17fa8     34 59 BF FD | 	call	#_converttofloat
17fac     15 FB 61 FC | 	wrlong	result1, local03
17fb0     04 4E 05 F1 | 	add	fp, #4
17fb4     A7 26 02 FB | 	rdlong	local01, fp
17fb8     01 26 86 F1 | 	sub	local01, #1
17fbc     A7 26 62 FC | 	wrlong	local01, fp
17fc0     04 4E 85 F1 | 	sub	fp, #4
17fc4     01 26 56 F2 | 	cmps	local01, #1 wc
17fc8     98 FF 9F 3D |  if_ae	jmp	#LR__1932
17fcc                 | ' 
17fcc                 | ' if params(0)<0 then channel=0 else channel=round(params(0)) mod 8
17fcc     38 4E 05 F1 | 	add	fp, #56
17fd0     A7 12 02 FB | 	rdlong	arg01, fp
17fd4     38 4E 85 F1 | 	sub	fp, #56
17fd8     00 14 06 F6 | 	mov	arg02, #0
17fdc     01 16 06 F6 | 	mov	arg03, #1
17fe0     18 21 B1 FD | 	call	#__system___float_cmp
17fe4     00 FA 55 F2 | 	cmps	result1, #0 wc
17fe8     0C 4E 05 C1 |  if_b	add	fp, #12
17fec     A7 00 68 CC |  if_b	wrlong	#0, fp
17ff0     0C 4E 85 C1 |  if_b	sub	fp, #12
17ff4     2C 00 90 CD |  if_b	jmp	#LR__1933
17ff8     38 4E 05 F1 | 	add	fp, #56
17ffc     A7 12 02 FB | 	rdlong	arg01, fp
18000     38 4E 85 F1 | 	sub	fp, #56
18004     01 14 06 F6 | 	mov	arg02, #1
18008     84 21 B1 FD | 	call	#__system___float_tointeger
1800c     FD 26 52 F6 | 	abs	local01, result1 wc
18010     07 26 06 F5 | 	and	local01, #7
18014     13 27 82 F6 | 	negc	local01, local01
18018     0C 4E 05 F1 | 	add	fp, #12
1801c     A7 26 62 FC | 	wrlong	local01, fp
18020     0C 4E 85 F1 | 	sub	fp, #12
18024                 | LR__1933
18024                 | ' if params(1)<0 then freq=channels(channel).freq else freq=params(1) : channels(channel).freq=freq
18024     3C 4E 05 F1 | 	add	fp, #60
18028     A7 12 02 FB | 	rdlong	arg01, fp
1802c     3C 4E 85 F1 | 	sub	fp, #60
18030     00 14 06 F6 | 	mov	arg02, #0
18034     01 16 06 F6 | 	mov	arg03, #1
18038     C0 20 B1 FD | 	call	#__system___float_cmp
1803c     00 FA 55 F2 | 	cmps	result1, #0 wc
18040     40 00 90 3D |  if_ae	jmp	#LR__1934
18044     0C 4E 05 F1 | 	add	fp, #12
18048     A7 28 02 FB | 	rdlong	local02, fp
1804c     14 2B 02 F6 | 	mov	local03, local02
18050     01 2A 66 F0 | 	shl	local03, #1
18054     14 2B 02 F1 | 	add	local03, local02
18058     03 2A 66 F0 | 	shl	local03, #3
1805c     14 00 00 FF 
18060     38 E5 05 F1 | 	add	objptr, ##10552
18064     F2 2A 02 F1 | 	add	local03, objptr
18068     15 31 02 FB | 	rdlong	local06, local03
1806c     60 4E 05 F1 | 	add	fp, #96
18070     A7 30 62 FC | 	wrlong	local06, fp
18074     6C 4E 85 F1 | 	sub	fp, #108
18078     14 00 00 FF 
1807c     38 E5 85 F1 | 	sub	objptr, ##10552
18080     44 00 90 FD | 	jmp	#LR__1935
18084                 | LR__1934
18084     3C 4E 05 F1 | 	add	fp, #60
18088     A7 2C 02 FB | 	rdlong	local04, fp
1808c     30 4E 05 F1 | 	add	fp, #48
18090     A7 2C 62 FC | 	wrlong	local04, fp
18094     60 4E 85 F1 | 	sub	fp, #96
18098     A7 28 02 FB | 	rdlong	local02, fp
1809c     14 2B 02 F6 | 	mov	local03, local02
180a0     01 2A 66 F0 | 	shl	local03, #1
180a4     14 2B 02 F1 | 	add	local03, local02
180a8     03 2A 66 F0 | 	shl	local03, #3
180ac     14 00 00 FF 
180b0     38 E5 05 F1 | 	add	objptr, ##10552
180b4     F2 2A 02 F1 | 	add	local03, objptr
180b8     0C 4E 85 F1 | 	sub	fp, #12
180bc     15 2D 62 FC | 	wrlong	local04, local03
180c0     14 00 00 FF 
180c4     38 E5 85 F1 | 	sub	objptr, ##10552
180c8                 | LR__1935
180c8                 | ' if params(2)<0 orelse params(2)>10000.0 then delay=channels(channel).delay else delay=round(params(2)) : channels(channel).delay=delay
180c8     40 4E 05 F1 | 	add	fp, #64
180cc     A7 12 02 FB | 	rdlong	arg01, fp
180d0     40 4E 85 F1 | 	sub	fp, #64
180d4     00 14 06 F6 | 	mov	arg02, #0
180d8     01 16 06 F6 | 	mov	arg03, #1
180dc     1C 20 B1 FD | 	call	#__system___float_cmp
180e0     00 FA 55 F2 | 	cmps	result1, #0 wc
180e4     24 00 90 CD |  if_b	jmp	#LR__1936
180e8     40 4E 05 F1 | 	add	fp, #64
180ec     A7 12 02 FB | 	rdlong	arg01, fp
180f0     40 4E 85 F1 | 	sub	fp, #64
180f4     20 0E 23 FF 
180f8     00 14 06 F6 | 	mov	arg02, ##1176256512
180fc     01 16 66 F6 | 	neg	arg03, #1
18100     F8 1F B1 FD | 	call	#__system___float_cmp
18104     01 FA 55 F2 | 	cmps	result1, #1 wc
18108     48 00 90 CD |  if_b	jmp	#LR__1937
1810c                 | LR__1936
1810c     0C 4E 05 F1 | 	add	fp, #12
18110     A7 2A 02 FB | 	rdlong	local03, fp
18114     15 33 02 F6 | 	mov	local07, local03
18118     01 32 66 F0 | 	shl	local07, #1
1811c     15 33 02 F1 | 	add	local07, local03
18120     03 32 66 F0 | 	shl	local07, #3
18124     14 00 00 FF 
18128     38 E5 05 F1 | 	add	objptr, ##10552
1812c     F2 32 02 F1 | 	add	local07, objptr
18130     06 32 06 F1 | 	add	local07, #6
18134     19 2F E2 FA | 	rdword	local05, local07
18138     17 2D 32 F9 | 	getword	local04, local05, #0
1813c     1C 4E 05 F1 | 	add	fp, #28
18140     A7 2C 62 FC | 	wrlong	local04, fp
18144     28 4E 85 F1 | 	sub	fp, #40
18148     14 00 00 FF 
1814c     38 E5 85 F1 | 	sub	objptr, ##10552
18150     54 00 90 FD | 	jmp	#LR__1938
18154                 | LR__1937
18154     40 4E 05 F1 | 	add	fp, #64
18158     A7 12 02 FB | 	rdlong	arg01, fp
1815c     40 4E 85 F1 | 	sub	fp, #64
18160     01 14 06 F6 | 	mov	arg02, #1
18164     28 20 B1 FD | 	call	#__system___float_tointeger
18168     28 4E 05 F1 | 	add	fp, #40
1816c     A7 FA 61 FC | 	wrlong	result1, fp
18170     1C 4E 85 F1 | 	sub	fp, #28
18174     A7 28 02 FB | 	rdlong	local02, fp
18178     14 2B 02 F6 | 	mov	local03, local02
1817c     01 2A 66 F0 | 	shl	local03, #1
18180     14 2B 02 F1 | 	add	local03, local02
18184     03 2A 66 F0 | 	shl	local03, #3
18188     14 00 00 FF 
1818c     38 E5 05 F1 | 	add	objptr, ##10552
18190     F2 2A 02 F1 | 	add	local03, objptr
18194     0C 4E 85 F1 | 	sub	fp, #12
18198     06 2A 06 F1 | 	add	local03, #6
1819c     15 FB 51 FC | 	wrword	result1, local03
181a0     14 00 00 FF 
181a4     38 E5 85 F1 | 	sub	objptr, ##10552
181a8                 | LR__1938
181a8                 | ' if params(3)<0 orelse params(3)>16.384 then vol=channels(channel).vol else vol=params(3) : channels(channel).vol=vol
181a8     44 4E 05 F1 | 	add	fp, #68
181ac     A7 12 02 FB | 	rdlong	arg01, fp
181b0     44 4E 85 F1 | 	sub	fp, #68
181b4     00 14 06 F6 | 	mov	arg02, #0
181b8     01 16 06 F6 | 	mov	arg03, #1
181bc     3C 1F B1 FD | 	call	#__system___float_cmp
181c0     00 FA 55 F2 | 	cmps	result1, #0 wc
181c4     24 00 90 CD |  if_b	jmp	#LR__1939
181c8     44 4E 05 F1 | 	add	fp, #68
181cc     A7 12 02 FB | 	rdlong	arg01, fp
181d0     44 4E 85 F1 | 	sub	fp, #68
181d4     89 C1 20 FF 
181d8     6F 14 06 F6 | 	mov	arg02, ##1099108975
181dc     01 16 66 F6 | 	neg	arg03, #1
181e0     18 1F B1 FD | 	call	#__system___float_cmp
181e4     01 FA 55 F2 | 	cmps	result1, #1 wc
181e8     44 00 90 CD |  if_b	jmp	#LR__1940
181ec                 | LR__1939
181ec     0C 4E 05 F1 | 	add	fp, #12
181f0     A7 28 02 FB | 	rdlong	local02, fp
181f4     14 2B 02 F6 | 	mov	local03, local02
181f8     01 2A 66 F0 | 	shl	local03, #1
181fc     14 2B 02 F1 | 	add	local03, local02
18200     03 2A 66 F0 | 	shl	local03, #3
18204     14 00 00 FF 
18208     38 E5 05 F1 | 	add	objptr, ##10552
1820c     F2 2A 02 F1 | 	add	local03, objptr
18210     0C 2A 06 F1 | 	add	local03, #12
18214     15 31 02 FB | 	rdlong	local06, local03
18218     68 4E 05 F1 | 	add	fp, #104
1821c     A7 30 62 FC | 	wrlong	local06, fp
18220     74 4E 85 F1 | 	sub	fp, #116
18224     14 00 00 FF 
18228     38 E5 85 F1 | 	sub	objptr, ##10552
1822c     48 00 90 FD | 	jmp	#LR__1941
18230                 | LR__1940
18230     44 4E 05 F1 | 	add	fp, #68
18234     A7 2C 02 FB | 	rdlong	local04, fp
18238     30 4E 05 F1 | 	add	fp, #48
1823c     A7 2C 62 FC | 	wrlong	local04, fp
18240     68 4E 85 F1 | 	sub	fp, #104
18244     A7 28 02 FB | 	rdlong	local02, fp
18248     14 2B 02 F6 | 	mov	local03, local02
1824c     01 2A 66 F0 | 	shl	local03, #1
18250     14 2B 02 F1 | 	add	local03, local02
18254     03 2A 66 F0 | 	shl	local03, #3
18258     14 00 00 FF 
1825c     38 E5 05 F1 | 	add	objptr, ##10552
18260     F2 2A 02 F1 | 	add	local03, objptr
18264     0C 4E 85 F1 | 	sub	fp, #12
18268     0C 2A 06 F1 | 	add	local03, #12
1826c     15 2D 62 FC | 	wrlong	local04, local03
18270     14 00 00 FF 
18274     38 E5 85 F1 | 	sub	objptr, ##10552
18278                 | LR__1941
18278                 | ' if params(4)<0 orelse params(4)>32 then wave=channels(channel).wave else wave=round(params(4)) : channels(channel).wave=wave
18278     48 4E 05 F1 | 	add	fp, #72
1827c     A7 12 02 FB | 	rdlong	arg01, fp
18280     48 4E 85 F1 | 	sub	fp, #72
18284     00 14 06 F6 | 	mov	arg02, #0
18288     01 16 06 F6 | 	mov	arg03, #1
1828c     6C 1E B1 FD | 	call	#__system___float_cmp
18290     00 FA 55 F2 | 	cmps	result1, #0 wc
18294     24 00 90 CD |  if_b	jmp	#LR__1942
18298     48 4E 05 F1 | 	add	fp, #72
1829c     A7 12 02 FB | 	rdlong	arg01, fp
182a0     48 4E 85 F1 | 	sub	fp, #72
182a4     00 00 21 FF 
182a8     00 14 06 F6 | 	mov	arg02, ##1107296256
182ac     01 16 66 F6 | 	neg	arg03, #1
182b0     48 1E B1 FD | 	call	#__system___float_cmp
182b4     01 FA 55 F2 | 	cmps	result1, #1 wc
182b8     48 00 90 CD |  if_b	jmp	#LR__1943
182bc                 | LR__1942
182bc     0C 4E 05 F1 | 	add	fp, #12
182c0     A7 2A 02 FB | 	rdlong	local03, fp
182c4     15 33 02 F6 | 	mov	local07, local03
182c8     01 32 66 F0 | 	shl	local07, #1
182cc     15 33 02 F1 | 	add	local07, local03
182d0     03 32 66 F0 | 	shl	local07, #3
182d4     14 00 00 FF 
182d8     38 E5 05 F1 | 	add	objptr, ##10552
182dc     F2 32 02 F1 | 	add	local07, objptr
182e0     04 32 06 F1 | 	add	local07, #4
182e4     19 2F C2 FA | 	rdbyte	local05, local07
182e8     17 2D E2 F8 | 	getbyte	local04, local05, #0
182ec     14 4E 05 F1 | 	add	fp, #20
182f0     A7 2C 62 FC | 	wrlong	local04, fp
182f4     20 4E 85 F1 | 	sub	fp, #32
182f8     14 00 00 FF 
182fc     38 E5 85 F1 | 	sub	objptr, ##10552
18300     54 00 90 FD | 	jmp	#LR__1944
18304                 | LR__1943
18304     48 4E 05 F1 | 	add	fp, #72
18308     A7 12 02 FB | 	rdlong	arg01, fp
1830c     48 4E 85 F1 | 	sub	fp, #72
18310     01 14 06 F6 | 	mov	arg02, #1
18314     78 1E B1 FD | 	call	#__system___float_tointeger
18318     20 4E 05 F1 | 	add	fp, #32
1831c     A7 FA 61 FC | 	wrlong	result1, fp
18320     14 4E 85 F1 | 	sub	fp, #20
18324     A7 28 02 FB | 	rdlong	local02, fp
18328     14 2B 02 F6 | 	mov	local03, local02
1832c     01 2A 66 F0 | 	shl	local03, #1
18330     14 2B 02 F1 | 	add	local03, local02
18334     03 2A 66 F0 | 	shl	local03, #3
18338     14 00 00 FF 
1833c     38 E5 05 F1 | 	add	objptr, ##10552
18340     F2 2A 02 F1 | 	add	local03, objptr
18344     0C 4E 85 F1 | 	sub	fp, #12
18348     04 2A 06 F1 | 	add	local03, #4
1834c     15 FB 41 FC | 	wrbyte	result1, local03
18350     14 00 00 FF 
18354     38 E5 85 F1 | 	sub	objptr, ##10552
18358                 | LR__1944
18358                 | ' if params(5)<0 orelse params(5)>8.0 then env=channels(channel).env else env=round(params(5)) : channels(channel).env=env
18358     4C 4E 05 F1 | 	add	fp, #76
1835c     A7 12 02 FB | 	rdlong	arg01, fp
18360     4C 4E 85 F1 | 	sub	fp, #76
18364     00 14 06 F6 | 	mov	arg02, #0
18368     01 16 06 F6 | 	mov	arg03, #1
1836c     8C 1D B1 FD | 	call	#__system___float_cmp
18370     00 FA 55 F2 | 	cmps	result1, #0 wc
18374     24 00 90 CD |  if_b	jmp	#LR__1945
18378     4C 4E 05 F1 | 	add	fp, #76
1837c     A7 12 02 FB | 	rdlong	arg01, fp
18380     4C 4E 85 F1 | 	sub	fp, #76
18384     00 80 20 FF 
18388     00 14 06 F6 | 	mov	arg02, ##1090519040
1838c     01 16 66 F6 | 	neg	arg03, #1
18390     68 1D B1 FD | 	call	#__system___float_cmp
18394     01 FA 55 F2 | 	cmps	result1, #1 wc
18398     48 00 90 CD |  if_b	jmp	#LR__1946
1839c                 | LR__1945
1839c     0C 4E 05 F1 | 	add	fp, #12
183a0     A7 2A 02 FB | 	rdlong	local03, fp
183a4     15 33 02 F6 | 	mov	local07, local03
183a8     01 32 66 F0 | 	shl	local07, #1
183ac     15 33 02 F1 | 	add	local07, local03
183b0     03 32 66 F0 | 	shl	local07, #3
183b4     14 00 00 FF 
183b8     38 E5 05 F1 | 	add	objptr, ##10552
183bc     F2 32 02 F1 | 	add	local07, objptr
183c0     05 32 06 F1 | 	add	local07, #5
183c4     19 2F C2 FA | 	rdbyte	local05, local07
183c8     17 2D E2 F8 | 	getbyte	local04, local05, #0
183cc     18 4E 05 F1 | 	add	fp, #24
183d0     A7 2C 62 FC | 	wrlong	local04, fp
183d4     24 4E 85 F1 | 	sub	fp, #36
183d8     14 00 00 FF 
183dc     38 E5 85 F1 | 	sub	objptr, ##10552
183e0     54 00 90 FD | 	jmp	#LR__1947
183e4                 | LR__1946
183e4     4C 4E 05 F1 | 	add	fp, #76
183e8     A7 12 02 FB | 	rdlong	arg01, fp
183ec     4C 4E 85 F1 | 	sub	fp, #76
183f0     01 14 06 F6 | 	mov	arg02, #1
183f4     98 1D B1 FD | 	call	#__system___float_tointeger
183f8     24 4E 05 F1 | 	add	fp, #36
183fc     A7 FA 61 FC | 	wrlong	result1, fp
18400     18 4E 85 F1 | 	sub	fp, #24
18404     A7 28 02 FB | 	rdlong	local02, fp
18408     14 2B 02 F6 | 	mov	local03, local02
1840c     01 2A 66 F0 | 	shl	local03, #1
18410     14 2B 02 F1 | 	add	local03, local02
18414     03 2A 66 F0 | 	shl	local03, #3
18418     14 00 00 FF 
1841c     38 E5 05 F1 | 	add	objptr, ##10552
18420     F2 2A 02 F1 | 	add	local03, objptr
18424     0C 4E 85 F1 | 	sub	fp, #12
18428     05 2A 06 F1 | 	add	local03, #5
1842c     15 FB 41 FC | 	wrbyte	result1, local03
18430     14 00 00 FF 
18434     38 E5 85 F1 | 	sub	objptr, ##10552
18438                 | LR__1947
18438                 | ' if params(6)<0 orelse params(6)>1000.0 then slen=channels(channel).length else slen=params(6) : channels(channel).length=slen
18438     50 4E 05 F1 | 	add	fp, #80
1843c     A7 12 02 FB | 	rdlong	arg01, fp
18440     50 4E 85 F1 | 	sub	fp, #80
18444     00 14 06 F6 | 	mov	arg02, #0
18448     01 16 06 F6 | 	mov	arg03, #1
1844c     AC 1C B1 FD | 	call	#__system___float_cmp
18450     00 FA 55 F2 | 	cmps	result1, #0 wc
18454     24 00 90 CD |  if_b	jmp	#LR__1948
18458     50 4E 05 F1 | 	add	fp, #80
1845c     A7 12 02 FB | 	rdlong	arg01, fp
18460     50 4E 85 F1 | 	sub	fp, #80
18464     00 3D 22 FF 
18468     00 14 06 F6 | 	mov	arg02, ##1148846080
1846c     01 16 66 F6 | 	neg	arg03, #1
18470     88 1C B1 FD | 	call	#__system___float_cmp
18474     01 FA 55 F2 | 	cmps	result1, #1 wc
18478     44 00 90 CD |  if_b	jmp	#LR__1949
1847c                 | LR__1948
1847c     0C 4E 05 F1 | 	add	fp, #12
18480     A7 28 02 FB | 	rdlong	local02, fp
18484     14 2B 02 F6 | 	mov	local03, local02
18488     01 2A 66 F0 | 	shl	local03, #1
1848c     14 2B 02 F1 | 	add	local03, local02
18490     03 2A 66 F0 | 	shl	local03, #3
18494     14 00 00 FF 
18498     38 E5 05 F1 | 	add	objptr, ##10552
1849c     F2 2A 02 F1 | 	add	local03, objptr
184a0     08 2A 06 F1 | 	add	local03, #8
184a4     15 31 02 FB | 	rdlong	local06, local03
184a8     6C 4E 05 F1 | 	add	fp, #108
184ac     A7 30 62 FC | 	wrlong	local06, fp
184b0     78 4E 85 F1 | 	sub	fp, #120
184b4     14 00 00 FF 
184b8     38 E5 85 F1 | 	sub	objptr, ##10552
184bc     48 00 90 FD | 	jmp	#LR__1950
184c0                 | LR__1949
184c0     50 4E 05 F1 | 	add	fp, #80
184c4     A7 30 02 FB | 	rdlong	local06, fp
184c8     28 4E 05 F1 | 	add	fp, #40
184cc     A7 30 62 FC | 	wrlong	local06, fp
184d0     6C 4E 85 F1 | 	sub	fp, #108
184d4     A7 28 02 FB | 	rdlong	local02, fp
184d8     14 2B 02 F6 | 	mov	local03, local02
184dc     01 2A 66 F0 | 	shl	local03, #1
184e0     14 2B 02 F1 | 	add	local03, local02
184e4     03 2A 66 F0 | 	shl	local03, #3
184e8     14 00 00 FF 
184ec     38 E5 05 F1 | 	add	objptr, ##10552
184f0     F2 2A 02 F1 | 	add	local03, objptr
184f4     0C 4E 85 F1 | 	sub	fp, #12
184f8     08 2A 06 F1 | 	add	local03, #8
184fc     15 31 62 FC | 	wrlong	local06, local03
18500     14 00 00 FF 
18504     38 E5 85 F1 | 	sub	objptr, ##10552
18508                 | LR__1950
18508                 | ' if params(7)<-1.0 orelse params(7)>1.0 then pan=channels(channel).pan else pan= params(7) : channels(channel).pan=pan
18508     54 4E 05 F1 | 	add	fp, #84
1850c     A7 12 02 FB | 	rdlong	arg01, fp
18510     54 4E 85 F1 | 	sub	fp, #84
18514     00 C0 5F FF 
18518     00 14 06 F6 | 	mov	arg02, ##-1082130432
1851c     01 16 06 F6 | 	mov	arg03, #1
18520     D8 1B B1 FD | 	call	#__system___float_cmp
18524     00 FA 55 F2 | 	cmps	result1, #0 wc
18528     24 00 90 CD |  if_b	jmp	#LR__1951
1852c     54 4E 05 F1 | 	add	fp, #84
18530     A7 12 02 FB | 	rdlong	arg01, fp
18534     54 4E 85 F1 | 	sub	fp, #84
18538     00 C0 1F FF 
1853c     00 14 06 F6 | 	mov	arg02, ##1065353216
18540     01 16 66 F6 | 	neg	arg03, #1
18544     B4 1B B1 FD | 	call	#__system___float_cmp
18548     01 FA 55 F2 | 	cmps	result1, #1 wc
1854c     44 00 90 CD |  if_b	jmp	#LR__1952
18550                 | LR__1951
18550     0C 4E 05 F1 | 	add	fp, #12
18554     A7 28 02 FB | 	rdlong	local02, fp
18558     14 2B 02 F6 | 	mov	local03, local02
1855c     01 2A 66 F0 | 	shl	local03, #1
18560     14 2B 02 F1 | 	add	local03, local02
18564     03 2A 66 F0 | 	shl	local03, #3
18568     14 00 00 FF 
1856c     38 E5 05 F1 | 	add	objptr, ##10552
18570     F2 2A 02 F1 | 	add	local03, objptr
18574     10 2A 06 F1 | 	add	local03, #16
18578     15 31 02 FB | 	rdlong	local06, local03
1857c     64 4E 05 F1 | 	add	fp, #100
18580     A7 30 62 FC | 	wrlong	local06, fp
18584     70 4E 85 F1 | 	sub	fp, #112
18588     14 00 00 FF 
1858c     38 E5 85 F1 | 	sub	objptr, ##10552
18590     48 00 90 FD | 	jmp	#LR__1953
18594                 | LR__1952
18594     54 4E 05 F1 | 	add	fp, #84
18598     A7 30 02 FB | 	rdlong	local06, fp
1859c     1C 4E 05 F1 | 	add	fp, #28
185a0     A7 30 62 FC | 	wrlong	local06, fp
185a4     64 4E 85 F1 | 	sub	fp, #100
185a8     A7 28 02 FB | 	rdlong	local02, fp
185ac     14 2B 02 F6 | 	mov	local03, local02
185b0     01 2A 66 F0 | 	shl	local03, #1
185b4     14 2B 02 F1 | 	add	local03, local02
185b8     03 2A 66 F0 | 	shl	local03, #3
185bc     14 00 00 FF 
185c0     38 E5 05 F1 | 	add	objptr, ##10552
185c4     F2 2A 02 F1 | 	add	local03, objptr
185c8     0C 4E 85 F1 | 	sub	fp, #12
185cc     10 2A 06 F1 | 	add	local03, #16
185d0     15 31 62 FC | 	wrlong	local06, local03
185d4     14 00 00 FF 
185d8     38 E5 85 F1 | 	sub	objptr, ##10552
185dc                 | LR__1953
185dc                 | ' if params(8)<0 orelse params(8)>255 then sus=channels(channel).sus else sus= round(params(8)) : channels(channel).sus=sus
185dc     58 4E 05 F1 | 	add	fp, #88
185e0     A7 12 02 FB | 	rdlong	arg01, fp
185e4     58 4E 85 F1 | 	sub	fp, #88
185e8     00 14 06 F6 | 	mov	arg02, #0
185ec     01 16 06 F6 | 	mov	arg03, #1
185f0     08 1B B1 FD | 	call	#__system___float_cmp
185f4     00 FA 55 F2 | 	cmps	result1, #0 wc
185f8     24 00 90 CD |  if_b	jmp	#LR__1954
185fc     58 4E 05 F1 | 	add	fp, #88
18600     A7 12 02 FB | 	rdlong	arg01, fp
18604     58 4E 85 F1 | 	sub	fp, #88
18608     80 BF 21 FF 
1860c     00 14 06 F6 | 	mov	arg02, ##1132396544
18610     01 16 66 F6 | 	neg	arg03, #1
18614     E4 1A B1 FD | 	call	#__system___float_cmp
18618     01 FA 55 F2 | 	cmps	result1, #1 wc
1861c     44 00 90 CD |  if_b	jmp	#LR__1955
18620                 | LR__1954
18620     0C 4E 05 F1 | 	add	fp, #12
18624     A7 2A 02 FB | 	rdlong	local03, fp
18628     15 33 02 F6 | 	mov	local07, local03
1862c     01 32 66 F0 | 	shl	local07, #1
18630     15 33 02 F1 | 	add	local07, local03
18634     03 32 66 F0 | 	shl	local07, #3
18638     14 00 00 FF 
1863c     38 E5 05 F1 | 	add	objptr, ##10552
18640     F2 32 02 F1 | 	add	local07, objptr
18644     14 32 06 F1 | 	add	local07, #20
18648     19 2D E2 FA | 	rdword	local04, local07
1864c     20 4E 05 F1 | 	add	fp, #32
18650     A7 2C 62 FC | 	wrlong	local04, fp
18654     2C 4E 85 F1 | 	sub	fp, #44
18658     14 00 00 FF 
1865c     38 E5 85 F1 | 	sub	objptr, ##10552
18660     54 00 90 FD | 	jmp	#LR__1956
18664                 | LR__1955
18664     58 4E 05 F1 | 	add	fp, #88
18668     A7 12 02 FB | 	rdlong	arg01, fp
1866c     58 4E 85 F1 | 	sub	fp, #88
18670     01 14 06 F6 | 	mov	arg02, #1
18674     18 1B B1 FD | 	call	#__system___float_tointeger
18678     2C 4E 05 F1 | 	add	fp, #44
1867c     A7 FA 61 FC | 	wrlong	result1, fp
18680     20 4E 85 F1 | 	sub	fp, #32
18684     A7 28 02 FB | 	rdlong	local02, fp
18688     14 2B 02 F6 | 	mov	local03, local02
1868c     01 2A 66 F0 | 	shl	local03, #1
18690     14 2B 02 F1 | 	add	local03, local02
18694     03 2A 66 F0 | 	shl	local03, #3
18698     14 00 00 FF 
1869c     38 E5 05 F1 | 	add	objptr, ##10552
186a0     F2 2A 02 F1 | 	add	local03, objptr
186a4     0C 4E 85 F1 | 	sub	fp, #12
186a8     14 2A 06 F1 | 	add	local03, #20
186ac     15 FB 51 FC | 	wrword	result1, local03
186b0     14 00 00 FF 
186b4     38 E5 85 F1 | 	sub	objptr, ##10552
186b8                 | LR__1956
186b8     6C 4E 05 F1 | 	add	fp, #108
186bc     A7 14 02 FB | 	rdlong	arg02, fp
186c0     6C 4E 85 F1 | 	sub	fp, #108
186c4     FC 16 20 FF 
186c8     54 12 06 F6 | 	mov	arg01, ##1076754516
186cc     C8 25 B1 FD | 	call	#__system____builtin_logbase
186d0     FD 2C 02 F6 | 	mov	local04, result1
186d4     1E 14 C6 F9 | 	decod	arg02, #30
186d8     FC 16 20 FF 
186dc     54 12 06 F6 | 	mov	arg01, ##1076754516
186e0     B4 25 B1 FD | 	call	#__system____builtin_logbase
186e4     FD 14 02 F6 | 	mov	arg02, result1
186e8     16 13 02 F6 | 	mov	arg01, local04
186ec     DC 17 B1 FD | 	call	#__system___float_div
186f0     FD 12 02 F6 | 	mov	arg01, result1
186f4     00 14 06 F6 | 	mov	arg02, #0
186f8     94 1A B1 FD | 	call	#__system___float_tointeger
186fc     30 4E 05 F1 | 	add	fp, #48
18700     A7 FA 61 FC | 	wrlong	result1, fp
18704     1E 2C C6 F9 | 	decod	local04, #30
18708     FD 12 02 F6 | 	mov	arg01, result1
1870c     30 4E 85 F1 | 	sub	fp, #48
18710     05 12 06 F1 | 	add	arg01, #5
18714     09 13 52 F6 | 	abs	arg01, arg01 wc
18718     1F 34 C6 C9 |  if_b	decod	local08, #31
1871c     00 34 06 36 |  if_ae	mov	local08, #0
18720     A0 11 B1 FD | 	call	#__system___float_fromuns
18724     1A FB 61 F5 | 	xor	result1, local08
18728     FD 14 02 F6 | 	mov	arg02, result1
1872c     16 13 02 F6 | 	mov	arg01, local04
18730     9C 24 B1 FD | 	call	#__system____builtin_powf
18734     FD 12 02 F6 | 	mov	arg01, result1
18738     01 14 06 F6 | 	mov	arg02, #1
1873c     50 1A B1 FD | 	call	#__system___float_tointeger
18740     10 4E 05 F1 | 	add	fp, #16
18744     A7 FA 61 FC | 	wrlong	result1, fp
18748                 | ' skip=round(2^(lfreq+5))
18748                 | ' if skip>32768 then i=skip/32768: skip=32768 else i=1
18748     10 4E 85 F1 | 	sub	fp, #16
1874c     40 00 00 FF 
18750     01 FA 55 F2 | 	cmps	result1, ##32769 wc
18754     30 00 90 CD |  if_b	jmp	#LR__1957
18758     10 4E 05 F1 | 	add	fp, #16
1875c     A7 26 02 FB | 	rdlong	local01, fp
18760     13 2D 52 F6 | 	abs	local04, local01 wc
18764     0F 2C 46 F0 | 	shr	local04, #15
18768     16 2D 82 F6 | 	negc	local04, local04
1876c     0C 4E 85 F1 | 	sub	fp, #12
18770     A7 2C 62 FC | 	wrlong	local04, fp
18774     0C 4E 05 F1 | 	add	fp, #12
18778     40 00 80 FF 
1877c     A7 00 68 FC | 	wrlong	##32768, fp
18780     10 4E 85 F1 | 	sub	fp, #16
18784     0C 00 90 FD | 	jmp	#LR__1958
18788                 | LR__1957
18788     04 4E 05 F1 | 	add	fp, #4
1878c     A7 02 68 FC | 	wrlong	#1, fp
18790     04 4E 85 F1 | 	sub	fp, #4
18794                 | LR__1958
18794     6C 4E 05 F1 | 	add	fp, #108
18798     A7 14 02 FB | 	rdlong	arg02, fp
1879c     6C 4E 85 F1 | 	sub	fp, #108
187a0     3E 2C 25 FF 
187a4     3C 12 06 F6 | 	mov	arg01, ##1247312956
187a8     20 17 B1 FD | 	call	#__system___float_div
187ac     FD 2C 02 F6 | 	mov	local04, result1
187b0     04 4E 05 F1 | 	add	fp, #4
187b4     A7 12 02 FB | 	rdlong	arg01, fp
187b8     04 4E 85 F1 | 	sub	fp, #4
187bc     09 13 52 F6 | 	abs	arg01, arg01 wc
187c0     1F 34 C6 C9 |  if_b	decod	local08, #31
187c4     00 34 06 36 |  if_ae	mov	local08, #0
187c8     F8 10 B1 FD | 	call	#__system___float_fromuns
187cc     1A FB 61 F5 | 	xor	result1, local08
187d0     FD 26 02 F6 | 	mov	local01, result1
187d4     1E 28 C6 F9 | 	decod	local02, #30
187d8     0D 12 06 F6 | 	mov	arg01, #13
187dc     30 4E 05 F1 | 	add	fp, #48
187e0     A7 30 02 FB | 	rdlong	local06, fp
187e4     30 4E 85 F1 | 	sub	fp, #48
187e8     18 13 82 F1 | 	sub	arg01, local06
187ec     09 13 52 F6 | 	abs	arg01, arg01 wc
187f0     1F 34 C6 C9 |  if_b	decod	local08, #31
187f4     00 34 06 36 |  if_ae	mov	local08, #0
187f8     C8 10 B1 FD | 	call	#__system___float_fromuns
187fc     1A FB 61 F5 | 	xor	result1, local08
18800     FD 14 02 F6 | 	mov	arg02, result1
18804     14 13 02 F6 | 	mov	arg01, local02
18808     C4 23 B1 FD | 	call	#__system____builtin_powf
1880c     FD 14 02 F6 | 	mov	arg02, result1
18810     13 13 02 F6 | 	mov	arg01, local01
18814     B0 14 B1 FD | 	call	#__system___float_mul
18818     FD 14 02 F6 | 	mov	arg02, result1
1881c     16 13 02 F6 | 	mov	arg01, local04
18820     A8 16 B1 FD | 	call	#__system___float_div
18824     FD 12 02 F6 | 	mov	arg01, result1
18828     01 14 06 F6 | 	mov	arg02, #1
1882c     60 19 B1 FD | 	call	#__system___float_tointeger
18830     34 4E 05 F1 | 	add	fp, #52
18834     A7 FA 61 FC | 	wrlong	result1, fp
18838     34 4E 05 F1 | 	add	fp, #52
1883c     A7 12 02 FB | 	rdlong	arg01, fp
18840     10 4E 05 F1 | 	add	fp, #16
18844     A7 14 02 FB | 	rdlong	arg02, fp
18848     78 4E 85 F1 | 	sub	fp, #120
1884c     7C 16 B1 FD | 	call	#__system___float_div
18850     FD 12 02 F6 | 	mov	arg01, result1
18854     01 14 06 F6 | 	mov	arg02, #1
18858     34 19 B1 FD | 	call	#__system___float_tointeger
1885c     FD 2C 02 F6 | 	mov	local04, result1
18860     14 4E 05 F1 | 	add	fp, #20
18864     A7 2C 62 FC | 	wrlong	local04, fp
18868     5C 4E 05 F1 | 	add	fp, #92
1886c     A7 14 02 FB | 	rdlong	arg02, fp
18870     70 4E 85 F1 | 	sub	fp, #112
18874     00 00 23 FF 
18878     00 12 06 F6 | 	mov	arg01, ##1174405120
1887c     48 14 B1 FD | 	call	#__system___float_mul
18880     FD 12 02 F6 | 	mov	arg01, result1
18884     01 14 06 F6 | 	mov	arg02, #1
18888     04 19 B1 FD | 	call	#__system___float_tointeger
1888c     0D 2C C6 F9 | 	decod	local04, #13
18890     FD 2C 02 F1 | 	add	local04, result1
18894     18 4E 05 F1 | 	add	fp, #24
18898     A7 2C 62 FC | 	wrlong	local04, fp
1889c     5C 4E 05 F1 | 	add	fp, #92
188a0     A7 14 02 FB | 	rdlong	arg02, fp
188a4     74 4E 85 F1 | 	sub	fp, #116
188a8     00 3D 22 FF 
188ac     00 12 06 F6 | 	mov	arg01, ##1148846080
188b0     14 14 B1 FD | 	call	#__system___float_mul
188b4     FD 12 02 F6 | 	mov	arg01, result1
188b8     01 14 06 F6 | 	mov	arg02, #1
188bc     D0 18 B1 FD | 	call	#__system___float_tointeger
188c0     1C 4E 05 F1 | 	add	fp, #28
188c4     A7 FA 61 FC | 	wrlong	result1, fp
188c8     37 00 00 FF 
188cc     10 E4 05 F1 | 	add	objptr, ##28176
188d0     F2 2C 02 FB | 	rdlong	local04, objptr
188d4     37 00 00 FF 
188d8     10 E4 85 F1 | 	sub	objptr, ##28176
188dc     10 4E 85 F1 | 	sub	fp, #16
188e0     A7 28 02 FB | 	rdlong	local02, fp
188e4     06 28 66 F0 | 	shl	local02, #6
188e8     14 2D 02 F1 | 	add	local04, local02
188ec     04 4E 85 F1 | 	sub	fp, #4
188f0     A7 2C 62 FC | 	wrlong	local04, fp
188f4                 | ' period=round((3546895/freq)/(i*(2^(13-lfreq))))
188f4                 | ' speed=round(speed_coeff/slen)
188f4                 | ' ipan=8192+round(8192*pan)
188f4                 | ' ivol=round(1000.0*vol)
188f4                 | ' base2=base+64*channel
188f4                 | ' if wave <32 then 
188f4     18 4E 05 F1 | 	add	fp, #24
188f8     A7 2C 02 FB | 	rdlong	local04, fp
188fc     20 4E 85 F1 | 	sub	fp, #32
18900     20 2C 56 F2 | 	cmps	local04, #32 wc
18904     2C 00 90 3D |  if_ae	jmp	#LR__1959
18908     08 4E 05 F1 | 	add	fp, #8
1890c     A7 12 02 FB | 	rdlong	arg01, fp
18910     08 12 06 F1 | 	add	arg01, #8
18914     18 4E 05 F1 | 	add	fp, #24
18918     A7 14 02 FB | 	rdlong	arg02, fp
1891c     20 4E 85 F1 | 	sub	fp, #32
18920     0B 14 66 F0 | 	shl	arg02, #11
18924     00 00 60 FF 
18928     00 14 06 F1 | 	add	arg02, ##-1073741824
1892c     09 15 62 FC | 	wrlong	arg02, arg01
18930     18 00 90 FD | 	jmp	#LR__1960
18934                 | LR__1959
18934     08 4E 05 F1 | 	add	fp, #8
18938     A7 12 02 FB | 	rdlong	arg01, fp
1893c     08 4E 85 F1 | 	sub	fp, #8
18940     08 12 06 F1 | 	add	arg01, #8
18944     00 00 E4 FF 
18948     09 01 68 FC | 	wrlong	##-939524096, arg01
1894c                 | LR__1960
1894c     08 4E 05 F1 | 	add	fp, #8
18950     A7 12 02 FB | 	rdlong	arg01, fp
18954     10 12 06 F1 | 	add	arg01, #16
18958     04 00 80 FF 
1895c     09 01 68 FC | 	wrlong	##2048, arg01
18960     A7 12 02 FB | 	rdlong	arg01, fp
18964     0C 12 06 F1 | 	add	arg01, #12
18968     09 01 68 FC | 	wrlong	#0, arg01
1896c     A7 12 02 FB | 	rdlong	arg01, fp
18970     14 12 06 F1 | 	add	arg01, #20
18974     14 4E 05 F1 | 	add	fp, #20
18978     A7 14 02 FB | 	rdlong	arg02, fp
1897c     09 15 52 FC | 	wrword	arg02, arg01
18980     14 4E 85 F1 | 	sub	fp, #20
18984     A7 12 02 FB | 	rdlong	arg01, fp
18988     16 12 06 F1 | 	add	arg01, #22
1898c     10 4E 05 F1 | 	add	fp, #16
18990     A7 14 02 FB | 	rdlong	arg02, fp
18994     09 15 52 FC | 	wrword	arg02, arg01
18998                 | ' lpoke base2+16,2048
18998                 | ' lpoke base2+12,0
18998                 | ' dpoke base2+20,ivol 
18998                 | ' dpoke base2+22,ipan 
18998                 | ' if wave<32 then
18998     08 4E 05 F1 | 	add	fp, #8
1899c     A7 2C 02 FB | 	rdlong	local04, fp
189a0     20 4E 85 F1 | 	sub	fp, #32
189a4     20 2C 56 F2 | 	cmps	local04, #32 wc
189a8     38 00 90 3D |  if_ae	jmp	#LR__1961
189ac     08 4E 05 F1 | 	add	fp, #8
189b0     A7 12 02 FB | 	rdlong	arg01, fp
189b4     18 12 06 F1 | 	add	arg01, #24
189b8     2C 4E 05 F1 | 	add	fp, #44
189bc     A7 14 02 FB | 	rdlong	arg02, fp
189c0     09 15 52 FC | 	wrword	arg02, arg01
189c4     2C 4E 85 F1 | 	sub	fp, #44
189c8     A7 12 02 FB | 	rdlong	arg01, fp
189cc     1A 12 06 F1 | 	add	arg01, #26
189d0     08 4E 05 F1 | 	add	fp, #8
189d4     A7 14 02 FB | 	rdlong	arg02, fp
189d8     10 4E 85 F1 | 	sub	fp, #16
189dc     09 15 52 FC | 	wrword	arg02, arg01
189e0     48 00 90 FD | 	jmp	#LR__1962
189e4                 | LR__1961
189e4     08 4E 05 F1 | 	add	fp, #8
189e8     A7 2C 02 FB | 	rdlong	local04, fp
189ec     18 2C 06 F1 | 	add	local04, #24
189f0     64 4E 05 F1 | 	add	fp, #100
189f4     A7 14 02 FB | 	rdlong	arg02, fp
189f8     6C 4E 85 F1 | 	sub	fp, #108
189fc     3E 2C 25 FF 
18a00     3C 12 06 F6 | 	mov	arg01, ##1247312956
18a04     C4 14 B1 FD | 	call	#__system___float_div
18a08     FD 12 02 F6 | 	mov	arg01, result1
18a0c     01 14 06 F6 | 	mov	arg02, #1
18a10     7C 17 B1 FD | 	call	#__system___float_tointeger
18a14     16 FB 51 FC | 	wrword	result1, local04
18a18     08 4E 05 F1 | 	add	fp, #8
18a1c     A7 12 02 FB | 	rdlong	arg01, fp
18a20     08 4E 85 F1 | 	sub	fp, #8
18a24     1A 12 06 F1 | 	add	arg01, #26
18a28     09 01 5A FC | 	wrword	#256, arg01
18a2c                 | LR__1962
18a2c     08 4E 05 F1 | 	add	fp, #8
18a30     A7 12 02 FB | 	rdlong	arg01, fp
18a34     1C 12 06 F1 | 	add	arg01, #28
18a38     09 01 68 FC | 	wrlong	#0, arg01
18a3c     A7 12 02 FB | 	rdlong	arg01, fp
18a40     20 12 06 F1 | 	add	arg01, #32
18a44     09 01 68 FC | 	wrlong	#0, arg01
18a48                 | ' lpoke base2+28,$0000_0000
18a48                 | ' lpoke base2+32,0 
18a48                 | ' if env=8 then lpoke base2+36,0 else lpoke base2+36,varptr(envbuf(env,0))
18a48     1C 4E 05 F1 | 	add	fp, #28
18a4c     A7 2C 02 FB | 	rdlong	local04, fp
18a50     24 4E 85 F1 | 	sub	fp, #36
18a54     08 2C 0E F2 | 	cmp	local04, #8 wz
18a58     18 00 90 5D |  if_ne	jmp	#LR__1963
18a5c     08 4E 05 F1 | 	add	fp, #8
18a60     A7 12 02 FB | 	rdlong	arg01, fp
18a64     08 4E 85 F1 | 	sub	fp, #8
18a68     24 12 06 F1 | 	add	arg01, #36
18a6c     09 01 68 FC | 	wrlong	#0, arg01
18a70     34 00 90 FD | 	jmp	#LR__1964
18a74                 | LR__1963
18a74     08 4E 05 F1 | 	add	fp, #8
18a78     A7 12 02 FB | 	rdlong	arg01, fp
18a7c     24 12 06 F1 | 	add	arg01, #36
18a80     1C 4E 05 F1 | 	add	fp, #28
18a84     A7 14 02 FB | 	rdlong	arg02, fp
18a88     24 4E 85 F1 | 	sub	fp, #36
18a8c     09 14 66 F0 | 	shl	arg02, #9
18a90     0C 00 00 FF 
18a94     D8 E4 05 F1 | 	add	objptr, ##6360
18a98     F2 14 02 F1 | 	add	arg02, objptr
18a9c     0C 00 00 FF 
18aa0     D8 E4 85 F1 | 	sub	objptr, ##6360
18aa4     09 15 62 FC | 	wrlong	arg02, arg01
18aa8                 | LR__1964
18aa8     08 4E 05 F1 | 	add	fp, #8
18aac     A7 12 02 FB | 	rdlong	arg01, fp
18ab0     28 12 06 F1 | 	add	arg01, #40
18ab4     0C 4E 05 F1 | 	add	fp, #12
18ab8     A7 14 02 FB | 	rdlong	arg02, fp
18abc     09 15 62 FC | 	wrlong	arg02, arg01
18ac0     0C 4E 85 F1 | 	sub	fp, #12
18ac4     A7 12 02 FB | 	rdlong	arg01, fp
18ac8     2C 12 06 F1 | 	add	arg01, #44
18acc     24 4E 05 F1 | 	add	fp, #36
18ad0     A7 14 02 FB | 	rdlong	arg02, fp
18ad4     09 15 62 FC | 	wrlong	arg02, arg01
18ad8                 | ' lpoke base2+40,speed 
18ad8                 | ' lpoke base2+44,sus 
18ad8                 | ' if delay>0 then waitms(delay) 
18ad8     04 4E 85 F1 | 	sub	fp, #4
18adc     A7 2C 02 FB | 	rdlong	local04, fp
18ae0     28 4E 85 F1 | 	sub	fp, #40
18ae4     01 2C 56 F2 | 	cmps	local04, #1 wc
18ae8     28 4E 05 31 |  if_ae	add	fp, #40
18aec     A7 12 02 3B |  if_ae	rdlong	arg01, fp
18af0     28 4E 85 31 |  if_ae	sub	fp, #40
18af4     4C E6 B0 3D |  if_ae	call	#__system___waitms
18af8     A7 F0 03 F6 | 	mov	ptra, fp
18afc     B2 00 A0 FD | 	call	#popregs_
18b00                 | _do_play_ret
18b00     2D 00 64 FD | 	ret
18b04                 | 
18b04                 | ' 
18b04                 | ' '-------------------- plot
18b04                 | ' 
18b04                 | ' sub do_plot
18b04                 | _do_plot
18b04     00 4A 05 F6 | 	mov	COUNT_, #0
18b08     A8 00 A0 FD | 	call	#pushregs_
18b0c     20 F0 07 F1 | 	add	ptra, #32
18b10     2C 4B BF FD | 	call	#_pop
18b14     FD 16 02 F6 | 	mov	arg03, result1
18b18     FE 14 02 F6 | 	mov	arg02, result2
18b1c     FF 12 02 F6 | 	mov	arg01, result3
18b20     0C 4E 05 F1 | 	add	fp, #12
18b24     A7 16 62 FC | 	wrlong	arg03, fp
18b28     04 4E 05 F1 | 	add	fp, #4
18b2c     A7 14 62 FC | 	wrlong	arg02, fp
18b30     04 4E 05 F1 | 	add	fp, #4
18b34     A7 12 62 FC | 	wrlong	arg01, fp
18b38     14 4E 85 F1 | 	sub	fp, #20
18b3c     00 4B BF FD | 	call	#_pop
18b40     FF 16 02 F6 | 	mov	arg03, result3
18b44     A7 FA 61 FC | 	wrlong	result1, fp
18b48     04 4E 05 F1 | 	add	fp, #4
18b4c     A7 FC 61 FC | 	wrlong	result2, fp
18b50     04 4E 05 F1 | 	add	fp, #4
18b54     A7 16 62 FC | 	wrlong	arg03, fp
18b58     08 4E 85 F1 | 	sub	fp, #8
18b5c     A7 12 02 F6 | 	mov	arg01, fp
18b60     C0 4C BF FD | 	call	#_converttoint
18b64     18 4E 05 F1 | 	add	fp, #24
18b68     A7 FA 61 FC | 	wrlong	result1, fp
18b6c     0C 4E 85 F1 | 	sub	fp, #12
18b70     A7 12 02 F6 | 	mov	arg01, fp
18b74     0C 4E 85 F1 | 	sub	fp, #12
18b78     A8 4C BF FD | 	call	#_converttoint
18b7c     1C 4E 05 F1 | 	add	fp, #28
18b80     A7 FA 61 FC | 	wrlong	result1, fp
18b84     04 4E 85 F1 | 	sub	fp, #4
18b88     A7 16 02 FB | 	rdlong	arg03, fp
18b8c     37 00 00 FF 
18b90     2C E4 05 F1 | 	add	objptr, ##28204
18b94     F2 16 62 FC | 	wrlong	arg03, objptr
18b98     04 4E 05 F1 | 	add	fp, #4
18b9c     A7 14 02 FB | 	rdlong	arg02, fp
18ba0     1C 4E 85 F1 | 	sub	fp, #28
18ba4     04 E4 05 F1 | 	add	objptr, #4
18ba8     F2 14 62 FC | 	wrlong	arg02, objptr
18bac     04 E4 85 F1 | 	sub	objptr, #4
18bb0     F2 12 02 FB | 	rdlong	arg01, objptr
18bb4     04 E4 85 F1 | 	sub	objptr, #4
18bb8     F2 16 02 FB | 	rdlong	arg03, objptr
18bbc     37 00 00 FF 
18bc0     28 E4 85 F1 | 	sub	objptr, ##28200
18bc4     00 B9 B0 FD | 	call	#_hg010b_spin2_putpixel
18bc8     A7 F0 03 F6 | 	mov	ptra, fp
18bcc     B2 00 A0 FD | 	call	#popregs_
18bd0                 | _do_plot_ret
18bd0     2D 00 64 FD | 	ret
18bd4                 | 
18bd4                 | ' 
18bd4                 | ' '-------------------- poke
18bd4                 | ' 
18bd4                 | ' sub do_poke
18bd4                 | _do_poke
18bd4     01 4A 05 F6 | 	mov	COUNT_, #1
18bd8     A8 00 A0 FD | 	call	#pushregs_
18bdc     20 F0 07 F1 | 	add	ptra, #32
18be0     5C 4A BF FD | 	call	#_pop
18be4     FD 14 02 F6 | 	mov	arg02, result1
18be8     FE 12 02 F6 | 	mov	arg01, result2
18bec     FF 26 02 F6 | 	mov	local01, result3
18bf0     A7 14 62 FC | 	wrlong	arg02, fp
18bf4     04 4E 05 F1 | 	add	fp, #4
18bf8     A7 12 62 FC | 	wrlong	arg01, fp
18bfc     04 4E 05 F1 | 	add	fp, #4
18c00     A7 26 62 FC | 	wrlong	local01, fp
18c04     08 4E 85 F1 | 	sub	fp, #8
18c08     34 4A BF FD | 	call	#_pop
18c0c     FF 26 02 F6 | 	mov	local01, result3
18c10     0C 4E 05 F1 | 	add	fp, #12
18c14     A7 FA 61 FC | 	wrlong	result1, fp
18c18     04 4E 05 F1 | 	add	fp, #4
18c1c     A7 FC 61 FC | 	wrlong	result2, fp
18c20     04 4E 05 F1 | 	add	fp, #4
18c24     A7 26 62 FC | 	wrlong	local01, fp
18c28     08 4E 85 F1 | 	sub	fp, #8
18c2c     A7 12 02 F6 | 	mov	arg01, fp
18c30     0C 4E 85 F1 | 	sub	fp, #12
18c34     EC 4B BF FD | 	call	#_converttoint
18c38     18 4E 05 F1 | 	add	fp, #24
18c3c     A7 FA 61 FC | 	wrlong	result1, fp
18c40     18 4E 85 F1 | 	sub	fp, #24
18c44     A7 12 02 F6 | 	mov	arg01, fp
18c48     D8 4B BF FD | 	call	#_converttoint
18c4c     1C 4E 05 F1 | 	add	fp, #28
18c50     A7 FA 61 FC | 	wrlong	result1, fp
18c54                 | ' t1=pop() 'value
18c54                 | ' t2=pop() 
18c54                 | ' a=converttoint(t2) : v=converttoint(t1)
18c54                 | ' if a<$80000 then poke a,v else pspoke a,v
18c54     04 4E 85 F1 | 	sub	fp, #4
18c58     A7 26 02 FB | 	rdlong	local01, fp
18c5c     18 4E 85 F1 | 	sub	fp, #24
18c60     00 04 00 FF 
18c64     00 26 16 F2 | 	cmp	local01, ##524288 wc
18c68     1C 00 90 3D |  if_ae	jmp	#LR__1970
18c6c     18 4E 05 F1 | 	add	fp, #24
18c70     A7 12 02 FB | 	rdlong	arg01, fp
18c74     04 4E 05 F1 | 	add	fp, #4
18c78     A7 14 02 FB | 	rdlong	arg02, fp
18c7c     1C 4E 85 F1 | 	sub	fp, #28
18c80     09 15 42 FC | 	wrbyte	arg02, arg01
18c84     18 00 90 FD | 	jmp	#LR__1971
18c88                 | LR__1970
18c88     18 4E 05 F1 | 	add	fp, #24
18c8c     A7 12 02 FB | 	rdlong	arg01, fp
18c90     04 4E 05 F1 | 	add	fp, #4
18c94     A7 14 02 FB | 	rdlong	arg02, fp
18c98     1C 4E 85 F1 | 	sub	fp, #28
18c9c     C4 A9 B0 FD | 	call	#_pspoke
18ca0                 | LR__1971
18ca0     A7 F0 03 F6 | 	mov	ptra, fp
18ca4     B2 00 A0 FD | 	call	#popregs_
18ca8                 | _do_poke_ret
18ca8     2D 00 64 FD | 	ret
18cac                 | 
18cac                 | ' 
18cac                 | ' '-------------------- pop
18cac                 | ' 
18cac                 | ' sub do_pop()
18cac                 | _do_pop
18cac                 | ' if gosubtop>0 then  gosubtop -=1 
18cac     50 00 00 FF 
18cb0     34 E5 05 F1 | 	add	objptr, ##41268
18cb4     F2 00 02 FB | 	rdlong	_var01, objptr
18cb8     50 00 00 FF 
18cbc     34 E5 85 F1 | 	sub	objptr, ##41268
18cc0     01 00 56 F2 | 	cmps	_var01, #1 wc
18cc4     50 00 00 3F 
18cc8     34 E5 05 31 |  if_ae	add	objptr, ##41268
18ccc     F2 00 02 3B |  if_ae	rdlong	_var01, objptr
18cd0     01 00 86 31 |  if_ae	sub	_var01, #1
18cd4     F2 00 62 3C |  if_ae	wrlong	_var01, objptr
18cd8     50 00 00 3F 
18cdc     34 E5 85 31 |  if_ae	sub	objptr, ##41268
18ce0                 | _do_pop_ret
18ce0     2D 00 64 FD | 	ret
18ce4                 | 
18ce4                 | ' 
18ce4                 | ' '-------------------- position
18ce4                 | ' 
18ce4                 | ' sub do_position
18ce4                 | _do_position
18ce4     01 4A 05 F6 | 	mov	COUNT_, #1
18ce8     A8 00 A0 FD | 	call	#pushregs_
18cec     18 F0 07 F1 | 	add	ptra, #24
18cf0     4C 49 BF FD | 	call	#_pop
18cf4     FD 14 02 F6 | 	mov	arg02, result1
18cf8     FE 12 02 F6 | 	mov	arg01, result2
18cfc     FF 26 02 F6 | 	mov	local01, result3
18d00     A7 14 62 FC | 	wrlong	arg02, fp
18d04     04 4E 05 F1 | 	add	fp, #4
18d08     A7 12 62 FC | 	wrlong	arg01, fp
18d0c     04 4E 05 F1 | 	add	fp, #4
18d10     A7 26 62 FC | 	wrlong	local01, fp
18d14     08 4E 85 F1 | 	sub	fp, #8
18d18     24 49 BF FD | 	call	#_pop
18d1c     FF 26 02 F6 | 	mov	local01, result3
18d20     0C 4E 05 F1 | 	add	fp, #12
18d24     A7 FA 61 FC | 	wrlong	result1, fp
18d28     04 4E 05 F1 | 	add	fp, #4
18d2c     A7 FC 61 FC | 	wrlong	result2, fp
18d30     04 4E 05 F1 | 	add	fp, #4
18d34     A7 26 62 FC | 	wrlong	local01, fp
18d38     08 4E 85 F1 | 	sub	fp, #8
18d3c     A7 12 02 F6 | 	mov	arg01, fp
18d40     0C 4E 85 F1 | 	sub	fp, #12
18d44     DC 4A BF FD | 	call	#_converttoint
18d48     FD 26 02 F6 | 	mov	local01, result1
18d4c     A7 12 02 F6 | 	mov	arg01, fp
18d50     D0 4A BF FD | 	call	#_converttoint
18d54     FD 14 02 F6 | 	mov	arg02, result1
18d58     13 13 02 F6 | 	mov	arg01, local01
18d5c     2C C3 B0 FD | 	call	#_hg010b_spin2_setcursorpos
18d60     A7 F0 03 F6 | 	mov	ptra, fp
18d64     B2 00 A0 FD | 	call	#popregs_
18d68                 | _do_position_ret
18d68     2D 00 64 FD | 	ret
18d6c                 | 
18d6c                 | ' 
18d6c                 | ' '-------------------- print
18d6c                 | ' 
18d6c                 | ' sub do_print  
18d6c                 | _do_print
18d6c     0B 4A 05 F6 | 	mov	COUNT_, #11
18d70     A8 00 A0 FD | 	call	#pushregs_
18d74     00 2C 06 F6 | 	mov	local04, #0
18d78     C4 48 BF FD | 	call	#_pop
18d7c     FD 2E 02 F6 | 	mov	local05, result1
18d80     FE 30 02 F6 | 	mov	local06, result2
18d84     FF 32 02 F6 | 	mov	local07, result3
18d88     17 27 02 F6 | 	mov	local01, local05
18d8c     18 29 02 F6 | 	mov	local02, local06
18d90     19 2B 02 F6 | 	mov	local03, local07
18d94                 | '  
18d94                 | ' r=0
18d94                 | ' t1=pop() 
18d94                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
18d94     21 2A 0E F2 | 	cmp	local03, #33 wz
18d98     22 2A 0E 52 |  if_ne	cmp	local03, #34 wz
18d9c     20 00 90 5D |  if_ne	jmp	#LR__1980
18da0     15 2D 02 F6 | 	mov	local04, local03
18da4     98 48 BF FD | 	call	#_pop
18da8     FD 2E 02 F6 | 	mov	local05, result1
18dac     FE 30 02 F6 | 	mov	local06, result2
18db0     FF 32 02 F6 | 	mov	local07, result3
18db4     17 27 02 F6 | 	mov	local01, local05
18db8     18 29 02 F6 | 	mov	local02, local06
18dbc     19 2B 02 F6 | 	mov	local03, local07
18dc0                 | LR__1980
18dc0                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
18dc0     20 2A 0E F2 | 	cmp	local03, #32 wz
18dc4     15 2D 02 A6 |  if_e	mov	local04, local03
18dc8                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
18dc8     FF 2A 0E F2 | 	cmp	local03, #255 wz
18dcc     10 00 90 5D |  if_ne	jmp	#LR__1981
18dd0     13 13 02 F6 | 	mov	arg01, local01
18dd4     00 14 06 F6 | 	mov	arg02, #0
18dd8     58 A6 B0 FD | 	call	#_printerror
18ddc     D4 04 90 FD | 	jmp	#LR__2000
18de0                 | LR__1981
18de0                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)  :  t1.result_type=result_string  
18de0     2B 2A 0E F2 | 	cmp	local03, #43 wz
18de4     14 00 90 5D |  if_ne	jmp	#LR__1982
18de8     13 13 02 F6 | 	mov	arg01, local01
18dec     C8 49 BF FD | 	call	#_convertstring
18df0     FD 2E 02 F6 | 	mov	local05, result1
18df4     17 27 02 F6 | 	mov	local01, local05
18df8     1F 2A 06 F6 | 	mov	local03, #31
18dfc                 | LR__1982
18dfc                 | ' 
18dfc                 | ' if t1.result_type=token_channel then print "Print to channel (not yet implemented)"; t1.result.iresult : t1=pop()
18dfc     2C 2A 0E F2 | 	cmp	local03, #44 wz
18e00     80 00 90 5D |  if_ne	jmp	#LR__1983
18e04     00 12 06 F6 | 	mov	arg01, #0
18e08     6C 3D B1 FD | 	call	#__system___getiolock_0611
18e0c     FD 12 02 F6 | 	mov	arg01, result1
18e10     3C E0 B0 FD | 	call	#__system___lockmem
18e14     BA 01 00 FF 
18e18     A9 14 06 F6 | 	mov	arg02, ##@LR__5970
18e1c     00 12 06 F6 | 	mov	arg01, #0
18e20     00 16 06 F6 | 	mov	arg03, #0
18e24     1C ED B0 FD | 	call	#__system___basic_print_string
18e28     0A 34 06 F6 | 	mov	local08, #10
18e2c     00 12 06 F6 | 	mov	arg01, #0
18e30     13 15 02 F6 | 	mov	arg02, local01
18e34     00 16 06 F6 | 	mov	arg03, #0
18e38     0A 18 06 F6 | 	mov	arg04, #10
18e3c     48 ED B0 FD | 	call	#__system___basic_print_integer
18e40     FD 36 02 F6 | 	mov	local09, result1
18e44     00 12 06 F6 | 	mov	arg01, #0
18e48     0A 14 06 F6 | 	mov	arg02, #10
18e4c     00 16 06 F6 | 	mov	arg03, #0
18e50     98 EC B0 FD | 	call	#__system___basic_print_char
18e54     01 38 06 F6 | 	mov	local10, #1
18e58     00 12 06 F6 | 	mov	arg01, #0
18e5c     18 3D B1 FD | 	call	#__system___getiolock_0611
18e60     FD 00 68 FC | 	wrlong	#0, result1
18e64     00 3A 06 F6 | 	mov	local11, #0
18e68     D4 47 BF FD | 	call	#_pop
18e6c     FD 2E 02 F6 | 	mov	local05, result1
18e70     FE 30 02 F6 | 	mov	local06, result2
18e74     FF 32 02 F6 | 	mov	local07, result3
18e78     17 27 02 F6 | 	mov	local01, local05
18e7c     18 29 02 F6 | 	mov	local02, local06
18e80     19 2B 02 F6 | 	mov	local03, local07
18e84                 | LR__1983
18e84                 | ' 
18e84                 | ' if r=print_mod_comma  then
18e84     21 2C 0E F2 | 	cmp	local04, #33 wz
18e88     AC 01 90 5D |  if_ne	jmp	#LR__1988
18e8c                 | '   if t1.result_type=result_int then print t1.result.iresult,
18e8c     1C 2A 0E F2 | 	cmp	local03, #28 wz
18e90     64 00 90 5D |  if_ne	jmp	#LR__1984
18e94     00 12 06 F6 | 	mov	arg01, #0
18e98     DC 3C B1 FD | 	call	#__system___getiolock_0611
18e9c     FD 12 02 F6 | 	mov	arg01, result1
18ea0     AC DF B0 FD | 	call	#__system___lockmem
18ea4     00 30 06 F6 | 	mov	local06, #0
18ea8     00 12 06 F6 | 	mov	arg01, #0
18eac     13 15 02 F6 | 	mov	arg02, local01
18eb0     00 16 06 F6 | 	mov	arg03, #0
18eb4     0A 18 06 F6 | 	mov	arg04, #10
18eb8     CC EC B0 FD | 	call	#__system___basic_print_integer
18ebc     FD 32 02 F6 | 	mov	local07, result1
18ec0     18 2F 02 F6 | 	mov	local05, local06
18ec4     19 2F 02 F1 | 	add	local05, local07
18ec8     00 3A 06 F6 | 	mov	local11, #0
18ecc     00 12 06 F6 | 	mov	arg01, #0
18ed0     09 14 06 F6 | 	mov	arg02, #9
18ed4     00 16 06 F6 | 	mov	arg03, #0
18ed8     10 EC B0 FD | 	call	#__system___basic_print_char
18edc     FD 36 02 F6 | 	mov	local09, result1
18ee0     FD 2E 02 F1 | 	add	local05, result1
18ee4     00 12 06 F6 | 	mov	arg01, #0
18ee8     8C 3C B1 FD | 	call	#__system___getiolock_0611
18eec     FD 00 68 FC | 	wrlong	#0, result1
18ef0     00 FA 05 F6 | 	mov	result1, #0
18ef4     00 38 06 F6 | 	mov	local10, #0
18ef8                 | LR__1984
18ef8                 | '   if t1.result_type=result_uint then print t1.result.uresult,
18ef8     1D 2A 0E F2 | 	cmp	local03, #29 wz
18efc     64 00 90 5D |  if_ne	jmp	#LR__1985
18f00     00 12 06 F6 | 	mov	arg01, #0
18f04     70 3C B1 FD | 	call	#__system___getiolock_0611
18f08     FD 12 02 F6 | 	mov	arg01, result1
18f0c     40 DF B0 FD | 	call	#__system___lockmem
18f10     00 30 06 F6 | 	mov	local06, #0
18f14     00 12 06 F6 | 	mov	arg01, #0
18f18     13 15 02 F6 | 	mov	arg02, local01
18f1c     00 16 06 F6 | 	mov	arg03, #0
18f20     0A 18 06 F6 | 	mov	arg04, #10
18f24     A0 EC B0 FD | 	call	#__system___basic_print_unsigned
18f28     FD 32 02 F6 | 	mov	local07, result1
18f2c     18 2F 02 F6 | 	mov	local05, local06
18f30     19 2F 02 F1 | 	add	local05, local07
18f34     00 3A 06 F6 | 	mov	local11, #0
18f38     00 12 06 F6 | 	mov	arg01, #0
18f3c     09 14 06 F6 | 	mov	arg02, #9
18f40     00 16 06 F6 | 	mov	arg03, #0
18f44     A4 EB B0 FD | 	call	#__system___basic_print_char
18f48     FD 36 02 F6 | 	mov	local09, result1
18f4c     FD 2E 02 F1 | 	add	local05, result1
18f50     00 12 06 F6 | 	mov	arg01, #0
18f54     20 3C B1 FD | 	call	#__system___getiolock_0611
18f58     FD 00 68 FC | 	wrlong	#0, result1
18f5c     00 FA 05 F6 | 	mov	result1, #0
18f60     00 38 06 F6 | 	mov	local10, #0
18f64                 | LR__1985
18f64                 | '   if t1.result_type=result_float then print t1.result.fresult,
18f64     1E 2A 0E F2 | 	cmp	local03, #30 wz
18f68     64 00 90 5D |  if_ne	jmp	#LR__1986
18f6c     00 12 06 F6 | 	mov	arg01, #0
18f70     04 3C B1 FD | 	call	#__system___getiolock_0611
18f74     FD 12 02 F6 | 	mov	arg01, result1
18f78     D4 DE B0 FD | 	call	#__system___lockmem
18f7c     00 30 06 F6 | 	mov	local06, #0
18f80     00 12 06 F6 | 	mov	arg01, #0
18f84     13 15 02 F6 | 	mov	arg02, local01
18f88     00 16 06 F6 | 	mov	arg03, #0
18f8c     23 18 06 F6 | 	mov	arg04, #35
18f90     4C 13 B1 FD | 	call	#__system___basic_print_float
18f94     FD 32 02 F6 | 	mov	local07, result1
18f98     18 2F 02 F6 | 	mov	local05, local06
18f9c     19 2F 02 F1 | 	add	local05, local07
18fa0     00 3A 06 F6 | 	mov	local11, #0
18fa4     00 12 06 F6 | 	mov	arg01, #0
18fa8     09 14 06 F6 | 	mov	arg02, #9
18fac     00 16 06 F6 | 	mov	arg03, #0
18fb0     38 EB B0 FD | 	call	#__system___basic_print_char
18fb4     FD 36 02 F6 | 	mov	local09, result1
18fb8     FD 2E 02 F1 | 	add	local05, result1
18fbc     00 12 06 F6 | 	mov	arg01, #0
18fc0     B4 3B B1 FD | 	call	#__system___getiolock_0611
18fc4     FD 00 68 FC | 	wrlong	#0, result1
18fc8     00 FA 05 F6 | 	mov	result1, #0
18fcc     00 38 06 F6 | 	mov	local10, #0
18fd0                 | LR__1986
18fd0                 | '   if t1.result_type=result_string then print t1.result.sresult,
18fd0     1F 2A 0E F2 | 	cmp	local03, #31 wz
18fd4     60 00 90 5D |  if_ne	jmp	#LR__1987
18fd8     00 12 06 F6 | 	mov	arg01, #0
18fdc     98 3B B1 FD | 	call	#__system___getiolock_0611
18fe0     FD 12 02 F6 | 	mov	arg01, result1
18fe4     68 DE B0 FD | 	call	#__system___lockmem
18fe8     00 30 06 F6 | 	mov	local06, #0
18fec     00 12 06 F6 | 	mov	arg01, #0
18ff0     13 15 02 F6 | 	mov	arg02, local01
18ff4     00 16 06 F6 | 	mov	arg03, #0
18ff8     48 EB B0 FD | 	call	#__system___basic_print_string
18ffc     FD 32 02 F6 | 	mov	local07, result1
19000     18 2F 02 F6 | 	mov	local05, local06
19004     19 2F 02 F1 | 	add	local05, local07
19008     00 3A 06 F6 | 	mov	local11, #0
1900c     00 12 06 F6 | 	mov	arg01, #0
19010     09 14 06 F6 | 	mov	arg02, #9
19014     00 16 06 F6 | 	mov	arg03, #0
19018     D0 EA B0 FD | 	call	#__system___basic_print_char
1901c     FD 36 02 F6 | 	mov	local09, result1
19020     FD 2E 02 F1 | 	add	local05, result1
19024     00 12 06 F6 | 	mov	arg01, #0
19028     4C 3B B1 FD | 	call	#__system___getiolock_0611
1902c     FD 00 68 FC | 	wrlong	#0, result1
19030     00 FA 05 F6 | 	mov	result1, #0
19034     00 38 06 F6 | 	mov	local10, #0
19038                 | LR__1987
19038                 | LR__1988
19038                 | ' if r=print_mod_semicolon then 
19038     22 2C 0E F2 | 	cmp	local04, #34 wz
1903c     1C 01 90 5D |  if_ne	jmp	#LR__1993
19040                 | '   if t1.result_type=result_int then print t1.result.iresult;
19040     1C 2A 0E F2 | 	cmp	local03, #28 wz
19044     50 00 90 5D |  if_ne	jmp	#LR__1989
19048     00 12 06 F6 | 	mov	arg01, #0
1904c     28 3B B1 FD | 	call	#__system___getiolock_0611
19050     FD 12 02 F6 | 	mov	arg01, result1
19054     F8 DD B0 FD | 	call	#__system___lockmem
19058     00 30 06 F6 | 	mov	local06, #0
1905c     00 38 06 F6 | 	mov	local10, #0
19060     0A 3A 06 F6 | 	mov	local11, #10
19064     00 12 06 F6 | 	mov	arg01, #0
19068     13 15 02 F6 | 	mov	arg02, local01
1906c     00 16 06 F6 | 	mov	arg03, #0
19070     0A 18 06 F6 | 	mov	arg04, #10
19074     10 EB B0 FD | 	call	#__system___basic_print_integer
19078     FD 32 02 F6 | 	mov	local07, result1
1907c     18 2F 02 F6 | 	mov	local05, local06
19080     19 2F 02 F1 | 	add	local05, local07
19084     00 12 06 F6 | 	mov	arg01, #0
19088     EC 3A B1 FD | 	call	#__system___getiolock_0611
1908c     FD 00 68 FC | 	wrlong	#0, result1
19090     00 FA 05 F6 | 	mov	result1, #0
19094     00 36 06 F6 | 	mov	local09, #0
19098                 | LR__1989
19098                 | '   if t1.result_type=result_uint then print t1.result.uresult;
19098     1D 2A 0E F2 | 	cmp	local03, #29 wz
1909c     50 00 90 5D |  if_ne	jmp	#LR__1990
190a0     00 12 06 F6 | 	mov	arg01, #0
190a4     D0 3A B1 FD | 	call	#__system___getiolock_0611
190a8     FD 12 02 F6 | 	mov	arg01, result1
190ac     A0 DD B0 FD | 	call	#__system___lockmem
190b0     00 30 06 F6 | 	mov	local06, #0
190b4     00 38 06 F6 | 	mov	local10, #0
190b8     0A 3A 06 F6 | 	mov	local11, #10
190bc     00 12 06 F6 | 	mov	arg01, #0
190c0     13 15 02 F6 | 	mov	arg02, local01
190c4     00 16 06 F6 | 	mov	arg03, #0
190c8     0A 18 06 F6 | 	mov	arg04, #10
190cc     F8 EA B0 FD | 	call	#__system___basic_print_unsigned
190d0     FD 32 02 F6 | 	mov	local07, result1
190d4     18 2F 02 F6 | 	mov	local05, local06
190d8     19 2F 02 F1 | 	add	local05, local07
190dc     00 12 06 F6 | 	mov	arg01, #0
190e0     94 3A B1 FD | 	call	#__system___getiolock_0611
190e4     FD 00 68 FC | 	wrlong	#0, result1
190e8     00 FA 05 F6 | 	mov	result1, #0
190ec     00 36 06 F6 | 	mov	local09, #0
190f0                 | LR__1990
190f0                 | '   if t1.result_type=result_float then print t1.result.fresult;
190f0     1E 2A 0E F2 | 	cmp	local03, #30 wz
190f4     30 00 90 5D |  if_ne	jmp	#LR__1991
190f8     00 12 06 F6 | 	mov	arg01, #0
190fc     78 3A B1 FD | 	call	#__system___getiolock_0611
19100     FD 12 02 F6 | 	mov	arg01, result1
19104     48 DD B0 FD | 	call	#__system___lockmem
19108     00 12 06 F6 | 	mov	arg01, #0
1910c     13 15 02 F6 | 	mov	arg02, local01
19110     00 16 06 F6 | 	mov	arg03, #0
19114     23 18 06 F6 | 	mov	arg04, #35
19118     C4 11 B1 FD | 	call	#__system___basic_print_float
1911c     00 12 06 F6 | 	mov	arg01, #0
19120     54 3A B1 FD | 	call	#__system___getiolock_0611
19124     FD 00 68 FC | 	wrlong	#0, result1
19128                 | LR__1991
19128                 | '   if t1.result_type=result_string then print t1.result.sresult;
19128     1F 2A 0E F2 | 	cmp	local03, #31 wz
1912c     2C 00 90 5D |  if_ne	jmp	#LR__1992
19130     00 12 06 F6 | 	mov	arg01, #0
19134     40 3A B1 FD | 	call	#__system___getiolock_0611
19138     FD 12 02 F6 | 	mov	arg01, result1
1913c     10 DD B0 FD | 	call	#__system___lockmem
19140     00 12 06 F6 | 	mov	arg01, #0
19144     13 15 02 F6 | 	mov	arg02, local01
19148     00 16 06 F6 | 	mov	arg03, #0
1914c     F4 E9 B0 FD | 	call	#__system___basic_print_string
19150     00 12 06 F6 | 	mov	arg01, #0
19154     20 3A B1 FD | 	call	#__system___getiolock_0611
19158     FD 00 68 FC | 	wrlong	#0, result1
1915c                 | LR__1992
1915c                 | LR__1993
1915c                 | ' if r=0 then 
1915c     00 2C 0E F2 | 	cmp	local04, #0 wz
19160     1C 01 90 5D |  if_ne	jmp	#LR__1998
19164                 | '   if t1.result_type=result_int then print t1.result.iresult
19164     1C 2A 0E F2 | 	cmp	local03, #28 wz
19168     40 00 90 5D |  if_ne	jmp	#LR__1994
1916c     00 12 06 F6 | 	mov	arg01, #0
19170     04 3A B1 FD | 	call	#__system___getiolock_0611
19174     FD 12 02 F6 | 	mov	arg01, result1
19178     D4 DC B0 FD | 	call	#__system___lockmem
1917c     00 12 06 F6 | 	mov	arg01, #0
19180     13 15 02 F6 | 	mov	arg02, local01
19184     00 16 06 F6 | 	mov	arg03, #0
19188     0A 18 06 F6 | 	mov	arg04, #10
1918c     F8 E9 B0 FD | 	call	#__system___basic_print_integer
19190     00 12 06 F6 | 	mov	arg01, #0
19194     0A 14 06 F6 | 	mov	arg02, #10
19198     00 16 06 F6 | 	mov	arg03, #0
1919c     4C E9 B0 FD | 	call	#__system___basic_print_char
191a0     00 12 06 F6 | 	mov	arg01, #0
191a4     D0 39 B1 FD | 	call	#__system___getiolock_0611
191a8     FD 00 68 FC | 	wrlong	#0, result1
191ac                 | LR__1994
191ac                 | '   if t1.result_type=result_uint then print t1.result.uresult
191ac     1D 2A 0E F2 | 	cmp	local03, #29 wz
191b0     40 00 90 5D |  if_ne	jmp	#LR__1995
191b4     00 12 06 F6 | 	mov	arg01, #0
191b8     BC 39 B1 FD | 	call	#__system___getiolock_0611
191bc     FD 12 02 F6 | 	mov	arg01, result1
191c0     8C DC B0 FD | 	call	#__system___lockmem
191c4     00 12 06 F6 | 	mov	arg01, #0
191c8     13 15 02 F6 | 	mov	arg02, local01
191cc     00 16 06 F6 | 	mov	arg03, #0
191d0     0A 18 06 F6 | 	mov	arg04, #10
191d4     F0 E9 B0 FD | 	call	#__system___basic_print_unsigned
191d8     00 12 06 F6 | 	mov	arg01, #0
191dc     0A 14 06 F6 | 	mov	arg02, #10
191e0     00 16 06 F6 | 	mov	arg03, #0
191e4     04 E9 B0 FD | 	call	#__system___basic_print_char
191e8     00 12 06 F6 | 	mov	arg01, #0
191ec     88 39 B1 FD | 	call	#__system___getiolock_0611
191f0     FD 00 68 FC | 	wrlong	#0, result1
191f4                 | LR__1995
191f4                 | '   if t1.result_type=result_float then print t1.result.fresult
191f4     1E 2A 0E F2 | 	cmp	local03, #30 wz
191f8     40 00 90 5D |  if_ne	jmp	#LR__1996
191fc     00 12 06 F6 | 	mov	arg01, #0
19200     74 39 B1 FD | 	call	#__system___getiolock_0611
19204     FD 12 02 F6 | 	mov	arg01, result1
19208     44 DC B0 FD | 	call	#__system___lockmem
1920c     00 12 06 F6 | 	mov	arg01, #0
19210     13 15 02 F6 | 	mov	arg02, local01
19214     00 16 06 F6 | 	mov	arg03, #0
19218     23 18 06 F6 | 	mov	arg04, #35
1921c     C0 10 B1 FD | 	call	#__system___basic_print_float
19220     00 12 06 F6 | 	mov	arg01, #0
19224     0A 14 06 F6 | 	mov	arg02, #10
19228     00 16 06 F6 | 	mov	arg03, #0
1922c     BC E8 B0 FD | 	call	#__system___basic_print_char
19230     00 12 06 F6 | 	mov	arg01, #0
19234     40 39 B1 FD | 	call	#__system___getiolock_0611
19238     FD 00 68 FC | 	wrlong	#0, result1
1923c                 | LR__1996
1923c                 | '   if t1.result_type=result_string then print t1.result.sresult
1923c     1F 2A 0E F2 | 	cmp	local03, #31 wz
19240     3C 00 90 5D |  if_ne	jmp	#LR__1997
19244     00 12 06 F6 | 	mov	arg01, #0
19248     2C 39 B1 FD | 	call	#__system___getiolock_0611
1924c     FD 12 02 F6 | 	mov	arg01, result1
19250     FC DB B0 FD | 	call	#__system___lockmem
19254     00 12 06 F6 | 	mov	arg01, #0
19258     13 15 02 F6 | 	mov	arg02, local01
1925c     00 16 06 F6 | 	mov	arg03, #0
19260     E0 E8 B0 FD | 	call	#__system___basic_print_string
19264     00 12 06 F6 | 	mov	arg01, #0
19268     0A 14 06 F6 | 	mov	arg02, #10
1926c     00 16 06 F6 | 	mov	arg03, #0
19270     78 E8 B0 FD | 	call	#__system___basic_print_char
19274     00 12 06 F6 | 	mov	arg01, #0
19278     FC 38 B1 FD | 	call	#__system___getiolock_0611
1927c     FD 00 68 FC | 	wrlong	#0, result1
19280                 | LR__1997
19280                 | LR__1998
19280                 | ' if r=print_mod_empty then print
19280     20 2C 0E F2 | 	cmp	local04, #32 wz
19284     2C 00 90 5D |  if_ne	jmp	#LR__1999
19288     00 12 06 F6 | 	mov	arg01, #0
1928c     E8 38 B1 FD | 	call	#__system___getiolock_0611
19290     FD 12 02 F6 | 	mov	arg01, result1
19294     B8 DB B0 FD | 	call	#__system___lockmem
19298     00 12 06 F6 | 	mov	arg01, #0
1929c     0A 14 06 F6 | 	mov	arg02, #10
192a0     00 16 06 F6 | 	mov	arg03, #0
192a4     44 E8 B0 FD | 	call	#__system___basic_print_char
192a8     00 12 06 F6 | 	mov	arg01, #0
192ac     C8 38 B1 FD | 	call	#__system___getiolock_0611
192b0     FD 00 68 FC | 	wrlong	#0, result1
192b4                 | LR__1999
192b4                 | LR__2000
192b4     A7 F0 03 F6 | 	mov	ptra, fp
192b8     B2 00 A0 FD | 	call	#popregs_
192bc                 | _do_print_ret
192bc     2D 00 64 FD | 	ret
192c0                 | 
192c0                 | ' 
192c0                 | ' ' ------------------- push a variable on the stack. No command for this, a variable is a command
192c0                 | ' 
192c0                 | ' sub do_push
192c0                 | _do_push
192c0                 | ' if stackpointer<maxstack then 
192c0     43 00 00 FF 
192c4     58 E4 05 F1 | 	add	objptr, ##34392
192c8     F2 00 02 FB | 	rdlong	_var01, objptr
192cc     43 00 00 FF 
192d0     58 E4 85 F1 | 	sub	objptr, ##34392
192d4     01 00 00 FF 
192d8     00 00 56 F2 | 	cmps	_var01, ##512 wc
192dc     F8 00 90 3D |  if_ae	jmp	#LR__2010
192e0     4A 00 00 FF 
192e4     80 E4 05 F1 | 	add	objptr, ##38016
192e8     F2 02 02 FB | 	rdlong	_var02, objptr
192ec     01 05 02 F6 | 	mov	_var03, _var02
192f0     01 04 66 F0 | 	shl	_var03, #1
192f4     01 05 02 F1 | 	add	_var03, _var02
192f8     02 04 66 F0 | 	shl	_var03, #2
192fc     03 00 00 FF 
19300     04 E4 85 F1 | 	sub	objptr, ##1540
19304     F2 04 02 F1 | 	add	_var03, objptr
19308     02 01 02 FB | 	rdlong	_var01, _var03
1930c     04 04 06 F1 | 	add	_var03, #4
19310     02 07 02 FB | 	rdlong	_var04, _var03
19314     01 05 02 F6 | 	mov	_var03, _var02
19318     01 04 66 F0 | 	shl	_var03, #1
1931c     01 05 02 F1 | 	add	_var03, _var02
19320     02 04 66 F0 | 	shl	_var03, #2
19324     F2 04 02 F1 | 	add	_var03, objptr
19328     08 04 06 F1 | 	add	_var03, #8
1932c     02 03 02 FB | 	rdlong	_var02, _var03
19330     04 00 00 FF 
19334     24 E4 85 F1 | 	sub	objptr, ##2084
19338     F2 04 02 FB | 	rdlong	_var03, objptr
1933c     02 09 02 F6 | 	mov	_var05, _var03
19340     01 08 66 F0 | 	shl	_var05, #1
19344     02 09 02 F1 | 	add	_var05, _var03
19348     02 08 66 F0 | 	shl	_var05, #2
1934c     0C 00 00 FF 
19350     0C E4 85 F1 | 	sub	objptr, ##6156
19354     F2 08 02 F1 | 	add	_var05, objptr
19358     04 01 62 FC | 	wrlong	_var01, _var05
1935c     0C 00 00 FF 
19360     0C E4 05 F1 | 	add	objptr, ##6156
19364     F2 08 02 FB | 	rdlong	_var05, objptr
19368     04 05 02 F6 | 	mov	_var03, _var05
1936c     01 04 66 F0 | 	shl	_var03, #1
19370     04 05 02 F1 | 	add	_var03, _var05
19374     02 04 66 F0 | 	shl	_var03, #2
19378     0C 00 00 FF 
1937c     0C E4 85 F1 | 	sub	objptr, ##6156
19380     F2 04 02 F1 | 	add	_var03, objptr
19384     04 04 06 F1 | 	add	_var03, #4
19388     02 07 62 FC | 	wrlong	_var04, _var03
1938c     0C 00 00 FF 
19390     0C E4 05 F1 | 	add	objptr, ##6156
19394     F2 08 02 FB | 	rdlong	_var05, objptr
19398     04 07 02 F6 | 	mov	_var04, _var05
1939c     01 06 66 F0 | 	shl	_var04, #1
193a0     04 07 02 F1 | 	add	_var04, _var05
193a4     02 06 66 F0 | 	shl	_var04, #2
193a8     0C 00 00 FF 
193ac     0C E4 85 F1 | 	sub	objptr, ##6156
193b0     F2 06 02 F1 | 	add	_var04, objptr
193b4     08 06 06 F1 | 	add	_var04, #8
193b8     03 03 62 FC | 	wrlong	_var02, _var04
193bc     0C 00 00 FF 
193c0     0C E4 05 F1 | 	add	objptr, ##6156
193c4     F2 00 02 FB | 	rdlong	_var01, objptr
193c8     01 00 06 F1 | 	add	_var01, #1
193cc     F2 00 62 FC | 	wrlong	_var01, objptr
193d0     43 00 00 FF 
193d4     58 E4 85 F1 | 	sub	objptr, ##34392
193d8                 | LR__2010
193d8                 | _do_push_ret
193d8     2D 00 64 FD | 	ret
193dc                 | 
193dc                 | ' 
193dc                 | ' '-------------------- put
193dc                 | ' 
193dc                 | ' sub do_put			' put  #chn,addr,(amount,(pos))
193dc                 | _do_put
193dc     03 4A 05 F6 | 	mov	COUNT_, #3
193e0     A8 00 A0 FD | 	call	#pushregs_
193e4     28 F0 07 F1 | 	add	ptra, #40
193e8     4A 00 00 FF 
193ec     80 E4 05 F1 | 	add	objptr, ##38016
193f0     F2 1A 02 FB | 	rdlong	arg05, objptr
193f4     0D 19 02 F6 | 	mov	arg04, arg05
193f8     01 18 66 F0 | 	shl	arg04, #1
193fc     0D 19 02 F1 | 	add	arg04, arg05
19400     02 18 66 F0 | 	shl	arg04, #2
19404     03 00 00 FF 
19408     04 E4 85 F1 | 	sub	objptr, ##1540
1940c     F2 18 02 F1 | 	add	arg04, objptr
19410     0C 1B 02 FB | 	rdlong	arg05, arg04
19414     A7 1A 62 FC | 	wrlong	arg05, fp
19418                 | ' 
19418                 | ' numpar=compiledline(lineptr_e).result.uresult
19418                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
19418     04 1A 0E F2 | 	cmp	arg05, #4 wz
1941c     47 00 00 FF 
19420     7C E4 85 F1 | 	sub	objptr, ##36476
19424     48 00 90 5D |  if_ne	jmp	#LR__2020
19428     14 42 BF FD | 	call	#_pop
1942c     FF 1A 02 F6 | 	mov	arg05, result3
19430     1C 4E 05 F1 | 	add	fp, #28
19434     A7 FA 61 FC | 	wrlong	result1, fp
19438     04 4E 05 F1 | 	add	fp, #4
1943c     A7 FC 61 FC | 	wrlong	result2, fp
19440     04 4E 05 F1 | 	add	fp, #4
19444     A7 1A 62 FC | 	wrlong	arg05, fp
19448     08 4E 85 F1 | 	sub	fp, #8
1944c     A7 12 02 F6 | 	mov	arg01, fp
19450     1C 4E 85 F1 | 	sub	fp, #28
19454     CC 43 BF FD | 	call	#_converttoint
19458     52 00 00 FF 
1945c     0C E5 05 F1 | 	add	objptr, ##42252
19460     F2 FA 61 FC | 	wrlong	result1, objptr
19464     52 00 00 FF 
19468     0C E5 85 F1 | 	sub	objptr, ##42252
1946c     18 00 90 FD | 	jmp	#LR__2021
19470                 | LR__2020
19470     52 00 00 FF 
19474     0C E5 05 F1 | 	add	objptr, ##42252
19478     FF FF FF FF 
1947c     F2 FE 6B FC | 	wrlong	##-1, objptr
19480     52 00 00 FF 
19484     0C E5 85 F1 | 	sub	objptr, ##42252
19488                 | LR__2021
19488                 | ' if numpar>=3 then t1=pop() : amount=converttoint(t1) else amount=1
19488     A7 1A 02 FB | 	rdlong	arg05, fp
1948c     03 1A 56 F2 | 	cmps	arg05, #3 wc
19490     40 00 90 CD |  if_b	jmp	#LR__2022
19494     A8 41 BF FD | 	call	#_pop
19498     FF 1A 02 F6 | 	mov	arg05, result3
1949c     1C 4E 05 F1 | 	add	fp, #28
194a0     A7 FA 61 FC | 	wrlong	result1, fp
194a4     04 4E 05 F1 | 	add	fp, #4
194a8     A7 FC 61 FC | 	wrlong	result2, fp
194ac     04 4E 05 F1 | 	add	fp, #4
194b0     A7 1A 62 FC | 	wrlong	arg05, fp
194b4     08 4E 85 F1 | 	sub	fp, #8
194b8     A7 12 02 F6 | 	mov	arg01, fp
194bc     1C 4E 85 F1 | 	sub	fp, #28
194c0     60 43 BF FD | 	call	#_converttoint
194c4     08 4E 05 F1 | 	add	fp, #8
194c8     A7 FA 61 FC | 	wrlong	result1, fp
194cc     08 4E 85 F1 | 	sub	fp, #8
194d0     0C 00 90 FD | 	jmp	#LR__2023
194d4                 | LR__2022
194d4     08 4E 05 F1 | 	add	fp, #8
194d8     A7 02 68 FC | 	wrlong	#1, fp
194dc     08 4E 85 F1 | 	sub	fp, #8
194e0                 | LR__2023
194e0                 | ' if numpar>=2 then t1=pop() : adr=converttoint(t1)
194e0     A7 18 02 FB | 	rdlong	arg04, fp
194e4     02 18 56 F2 | 	cmps	arg04, #2 wc
194e8     3C 00 90 CD |  if_b	jmp	#LR__2024
194ec     50 41 BF FD | 	call	#_pop
194f0     FF 18 02 F6 | 	mov	arg04, result3
194f4     1C 4E 05 F1 | 	add	fp, #28
194f8     A7 FA 61 FC | 	wrlong	result1, fp
194fc     04 4E 05 F1 | 	add	fp, #4
19500     A7 FC 61 FC | 	wrlong	result2, fp
19504     04 4E 05 F1 | 	add	fp, #4
19508     A7 18 62 FC | 	wrlong	arg04, fp
1950c     08 4E 85 F1 | 	sub	fp, #8
19510     A7 12 02 F6 | 	mov	arg01, fp
19514     1C 4E 85 F1 | 	sub	fp, #28
19518     08 43 BF FD | 	call	#_converttoint
1951c     0C 4E 05 F1 | 	add	fp, #12
19520     A7 FA 61 FC | 	wrlong	result1, fp
19524     0C 4E 85 F1 | 	sub	fp, #12
19528                 | LR__2024
19528     14 41 BF FD | 	call	#_pop
1952c     FF 18 02 F6 | 	mov	arg04, result3
19530     1C 4E 05 F1 | 	add	fp, #28
19534     A7 FA 61 FC | 	wrlong	result1, fp
19538     04 4E 05 F1 | 	add	fp, #4
1953c     A7 FC 61 FC | 	wrlong	result2, fp
19540     04 4E 05 F1 | 	add	fp, #4
19544     A7 18 62 FC | 	wrlong	arg04, fp
19548     08 4E 85 F1 | 	sub	fp, #8
1954c     A7 12 02 F6 | 	mov	arg01, fp
19550     1C 4E 85 F1 | 	sub	fp, #28
19554     CC 42 BF FD | 	call	#_converttoint
19558     04 4E 05 F1 | 	add	fp, #4
1955c     A7 FA 61 FC | 	wrlong	result1, fp
19560     10 4E 05 F1 | 	add	fp, #16
19564     A7 26 02 FB | 	rdlong	local01, fp
19568     14 4E 85 F1 | 	sub	fp, #20
1956c     02 26 66 F0 | 	shl	local01, #2
19570     50 00 00 FF 
19574     C4 E4 05 F1 | 	add	objptr, ##41156
19578     F2 26 02 F1 | 	add	local01, objptr
1957c     13 01 68 FC | 	wrlong	#0, local01
19580                 | ' t1=pop() : channel=converttoint(t1)
19580                 | ' getres(j)=0
19580                 | ' if pos>=0 then
19580     02 00 00 FF 
19584     48 E4 05 F1 | 	add	objptr, ##1096
19588     F2 28 02 FB | 	rdlong	local02, objptr
1958c     52 00 00 FF 
19590     0C E5 85 F1 | 	sub	objptr, ##42252
19594     00 28 56 F2 | 	cmps	local02, #0 wc
19598     C0 01 90 CD |  if_b	jmp	#LR__2030
1959c     10 4E 05 F1 | 	add	fp, #16
195a0     A7 00 68 FC | 	wrlong	#0, fp
195a4     10 4E 85 F1 | 	sub	fp, #16
195a8                 | '    i=0: do
195a8                 | LR__2025
195a8     14 4E 05 F1 | 	add	fp, #20
195ac     A7 00 68 FC | 	wrlong	#0, fp
195b0     14 4E 85 F1 | 	sub	fp, #20
195b4                 | '    j=0: do    
195b4                 | LR__2026
195b4                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
195b4     0C 4E 05 F1 | 	add	fp, #12
195b8     A7 28 02 FB | 	rdlong	local02, fp
195bc     0C 4E 85 F1 | 	sub	fp, #12
195c0     00 04 00 FF 
195c4     00 28 56 F2 | 	cmps	local02, ##524288 wc
195c8     4C 00 90 3D |  if_ae	jmp	#LR__2027
195cc     14 4E 05 F1 | 	add	fp, #20
195d0     A7 28 02 FB | 	rdlong	local02, fp
195d4     14 27 02 F6 | 	mov	local01, local02
195d8     4E 00 00 FF 
195dc     B4 E4 05 F1 | 	add	objptr, ##40116
195e0     F2 26 02 F1 | 	add	local01, objptr
195e4     08 4E 85 F1 | 	sub	fp, #8
195e8     A7 12 02 FB | 	rdlong	arg01, fp
195ec     04 4E 05 F1 | 	add	fp, #4
195f0     A7 18 02 FB | 	rdlong	arg04, fp
195f4     0A 18 66 F0 | 	shl	arg04, #10
195f8     0C 13 02 F1 | 	add	arg01, arg04
195fc     10 4E 85 F1 | 	sub	fp, #16
19600     14 13 02 F1 | 	add	arg01, local02
19604     09 FB C1 FA | 	rdbyte	result1, arg01
19608     4E 00 00 FF 
1960c     B4 E4 85 F1 | 	sub	objptr, ##40116
19610     13 FB 41 FC | 	wrbyte	result1, local01
19614     48 00 90 FD | 	jmp	#LR__2028
19618                 | LR__2027
19618     14 4E 05 F1 | 	add	fp, #20
1961c     A7 28 02 FB | 	rdlong	local02, fp
19620     14 27 02 F6 | 	mov	local01, local02
19624     4E 00 00 FF 
19628     B4 E4 05 F1 | 	add	objptr, ##40116
1962c     F2 26 02 F1 | 	add	local01, objptr
19630     08 4E 85 F1 | 	sub	fp, #8
19634     A7 12 02 FB | 	rdlong	arg01, fp
19638     04 4E 05 F1 | 	add	fp, #4
1963c     A7 18 02 FB | 	rdlong	arg04, fp
19640     0A 18 66 F0 | 	shl	arg04, #10
19644     0C 13 02 F1 | 	add	arg01, arg04
19648     10 4E 85 F1 | 	sub	fp, #16
1964c     14 13 02 F1 | 	add	arg01, local02
19650     4E 00 00 FF 
19654     B4 E4 85 F1 | 	sub	objptr, ##40116
19658     50 A0 B0 FD | 	call	#_pspeek
1965c     13 FB 41 FC | 	wrbyte	result1, local01
19660                 | LR__2028
19660     14 4E 05 F1 | 	add	fp, #20
19664     A7 28 02 FB | 	rdlong	local02, fp
19668     01 28 06 F1 | 	add	local02, #1
1966c     A7 28 62 FC | 	wrlong	local02, fp
19670     14 4E 85 F1 | 	sub	fp, #20
19674     02 00 00 FF 
19678     00 28 56 F2 | 	cmps	local02, ##1024 wc
1967c     2C 00 90 3D |  if_ae	jmp	#LR__2029
19680     10 4E 05 F1 | 	add	fp, #16
19684     A7 26 02 FB | 	rdlong	local01, fp
19688     0A 26 66 F0 | 	shl	local01, #10
1968c     04 4E 05 F1 | 	add	fp, #4
19690     A7 28 02 FB | 	rdlong	local02, fp
19694     14 27 02 F1 | 	add	local01, local02
19698     0C 4E 85 F1 | 	sub	fp, #12
1969c     A7 28 02 FB | 	rdlong	local02, fp
196a0     08 4E 85 F1 | 	sub	fp, #8
196a4     14 27 5A F2 | 	cmps	local01, local02 wcz
196a8     08 FF 9F ED |  if_be	jmp	#LR__2026
196ac                 | LR__2029
196ac                 | '    put #channel, pos+1,block(0),amount, r : getres(channel)=r
196ac     04 4E 05 F1 | 	add	fp, #4
196b0     A7 12 02 FB | 	rdlong	arg01, fp
196b4     52 00 00 FF 
196b8     0C E5 05 F1 | 	add	objptr, ##42252
196bc     F2 14 02 FB | 	rdlong	arg02, objptr
196c0     01 14 06 F1 | 	add	arg02, #1
196c4     04 00 00 FF 
196c8     58 E4 85 F1 | 	sub	objptr, ##2136
196cc     F2 16 02 F6 | 	mov	arg03, objptr
196d0     4E 00 00 FF 
196d4     B4 E4 85 F1 | 	sub	objptr, ##40116
196d8     04 4E 05 F1 | 	add	fp, #4
196dc     A7 18 02 FB | 	rdlong	arg04, fp
196e0     08 4E 85 F1 | 	sub	fp, #8
196e4     01 1A 06 F6 | 	mov	arg05, #1
196e8     68 E5 B0 FD | 	call	#__system___basic_put
196ec     18 4E 05 F1 | 	add	fp, #24
196f0     A7 FA 61 FC | 	wrlong	result1, fp
196f4     14 4E 85 F1 | 	sub	fp, #20
196f8     A7 26 02 FB | 	rdlong	local01, fp
196fc     02 26 66 F0 | 	shl	local01, #2
19700     50 00 00 FF 
19704     C4 E4 05 F1 | 	add	objptr, ##41156
19708     F2 26 02 F1 | 	add	local01, objptr
1970c     13 FB 61 FC | 	wrlong	result1, local01
19710                 | '    if 1024*i+j>amount then exit loop
19710     0C 4E 05 F1 | 	add	fp, #12
19714     A7 28 02 FB | 	rdlong	local02, fp
19718     0A 28 66 F0 | 	shl	local02, #10
1971c     04 4E 05 F1 | 	add	fp, #4
19720     A7 26 02 FB | 	rdlong	local01, fp
19724     13 29 02 F1 | 	add	local02, local01
19728     0C 4E 85 F1 | 	sub	fp, #12
1972c     A7 26 02 FB | 	rdlong	local01, fp
19730     08 4E 85 F1 | 	sub	fp, #8
19734     13 29 5A F2 | 	cmps	local02, local01 wcz
19738     50 00 00 FF 
1973c     C4 E4 85 F1 | 	sub	objptr, ##41156
19740     CC 01 90 1D |  if_a	jmp	#LR__2037
19744     10 4E 05 F1 | 	add	fp, #16
19748     A7 28 02 FB | 	rdlong	local02, fp
1974c     01 28 06 F1 | 	add	local02, #1
19750     A7 28 62 FC | 	wrlong	local02, fp
19754     10 4E 85 F1 | 	sub	fp, #16
19758     4C FE 9F FD | 	jmp	#LR__2025
1975c                 | LR__2030
1975c     10 4E 05 F1 | 	add	fp, #16
19760     A7 00 68 FC | 	wrlong	#0, fp
19764     10 4E 85 F1 | 	sub	fp, #16
19768                 | '    i=0: do
19768                 | LR__2031
19768     14 4E 05 F1 | 	add	fp, #20
1976c     A7 00 68 FC | 	wrlong	#0, fp
19770     14 4E 85 F1 | 	sub	fp, #20
19774                 | '    j=0: do  
19774                 | LR__2032
19774                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
19774     0C 4E 05 F1 | 	add	fp, #12
19778     A7 28 02 FB | 	rdlong	local02, fp
1977c     0C 4E 85 F1 | 	sub	fp, #12
19780     00 04 00 FF 
19784     00 28 56 F2 | 	cmps	local02, ##524288 wc
19788     4C 00 90 3D |  if_ae	jmp	#LR__2033
1978c     14 4E 05 F1 | 	add	fp, #20
19790     A7 28 02 FB | 	rdlong	local02, fp
19794     14 27 02 F6 | 	mov	local01, local02
19798     4E 00 00 FF 
1979c     B4 E4 05 F1 | 	add	objptr, ##40116
197a0     F2 26 02 F1 | 	add	local01, objptr
197a4     08 4E 85 F1 | 	sub	fp, #8
197a8     A7 12 02 FB | 	rdlong	arg01, fp
197ac     04 4E 05 F1 | 	add	fp, #4
197b0     A7 18 02 FB | 	rdlong	arg04, fp
197b4     0A 18 66 F0 | 	shl	arg04, #10
197b8     0C 13 02 F1 | 	add	arg01, arg04
197bc     10 4E 85 F1 | 	sub	fp, #16
197c0     14 13 02 F1 | 	add	arg01, local02
197c4     09 FB C1 FA | 	rdbyte	result1, arg01
197c8     4E 00 00 FF 
197cc     B4 E4 85 F1 | 	sub	objptr, ##40116
197d0     13 FB 41 FC | 	wrbyte	result1, local01
197d4     48 00 90 FD | 	jmp	#LR__2034
197d8                 | LR__2033
197d8     14 4E 05 F1 | 	add	fp, #20
197dc     A7 28 02 FB | 	rdlong	local02, fp
197e0     14 27 02 F6 | 	mov	local01, local02
197e4     4E 00 00 FF 
197e8     B4 E4 05 F1 | 	add	objptr, ##40116
197ec     F2 26 02 F1 | 	add	local01, objptr
197f0     08 4E 85 F1 | 	sub	fp, #8
197f4     A7 12 02 FB | 	rdlong	arg01, fp
197f8     04 4E 05 F1 | 	add	fp, #4
197fc     A7 18 02 FB | 	rdlong	arg04, fp
19800     0A 18 66 F0 | 	shl	arg04, #10
19804     0C 13 02 F1 | 	add	arg01, arg04
19808     10 4E 85 F1 | 	sub	fp, #16
1980c     14 13 02 F1 | 	add	arg01, local02
19810     4E 00 00 FF 
19814     B4 E4 85 F1 | 	sub	objptr, ##40116
19818     90 9E B0 FD | 	call	#_pspeek
1981c     13 FB 41 FC | 	wrbyte	result1, local01
19820                 | LR__2034
19820     14 4E 05 F1 | 	add	fp, #20
19824     A7 28 02 FB | 	rdlong	local02, fp
19828     01 28 06 F1 | 	add	local02, #1
1982c     A7 28 62 FC | 	wrlong	local02, fp
19830     14 4E 85 F1 | 	sub	fp, #20
19834     02 00 00 FF 
19838     00 28 56 F2 | 	cmps	local02, ##1024 wc
1983c     2C 00 90 3D |  if_ae	jmp	#LR__2035
19840     10 4E 05 F1 | 	add	fp, #16
19844     A7 26 02 FB | 	rdlong	local01, fp
19848     0A 26 66 F0 | 	shl	local01, #10
1984c     04 4E 05 F1 | 	add	fp, #4
19850     A7 28 02 FB | 	rdlong	local02, fp
19854     14 27 02 F1 | 	add	local01, local02
19858     0C 4E 85 F1 | 	sub	fp, #12
1985c     A7 28 02 FB | 	rdlong	local02, fp
19860     08 4E 85 F1 | 	sub	fp, #8
19864     14 27 5A F2 | 	cmps	local01, local02 wcz
19868     08 FF 9F ED |  if_be	jmp	#LR__2032
1986c                 | LR__2035
1986c                 | '    put #channel,,block(0),amount, r : getres(channel)=r
1986c     04 4E 05 F1 | 	add	fp, #4
19870     A7 12 02 FB | 	rdlong	arg01, fp
19874     4E 00 00 FF 
19878     B4 E4 05 F1 | 	add	objptr, ##40116
1987c     F2 16 02 F6 | 	mov	arg03, objptr
19880     4E 00 00 FF 
19884     B4 E4 85 F1 | 	sub	objptr, ##40116
19888     04 4E 05 F1 | 	add	fp, #4
1988c     A7 18 02 FB | 	rdlong	arg04, fp
19890     08 4E 85 F1 | 	sub	fp, #8
19894     00 14 06 F6 | 	mov	arg02, #0
19898     01 1A 06 F6 | 	mov	arg05, #1
1989c     B4 E3 B0 FD | 	call	#__system___basic_put
198a0     18 4E 05 F1 | 	add	fp, #24
198a4     A7 FA 61 FC | 	wrlong	result1, fp
198a8     14 4E 85 F1 | 	sub	fp, #20
198ac     A7 26 02 FB | 	rdlong	local01, fp
198b0     02 26 66 F0 | 	shl	local01, #2
198b4     50 00 00 FF 
198b8     C4 E4 05 F1 | 	add	objptr, ##41156
198bc     F2 26 02 F1 | 	add	local01, objptr
198c0     13 FB 61 FC | 	wrlong	result1, local01
198c4                 | '    if 1024*i+j>amount then exit loop
198c4     0C 4E 05 F1 | 	add	fp, #12
198c8     A7 28 02 FB | 	rdlong	local02, fp
198cc     0A 28 66 F0 | 	shl	local02, #10
198d0     04 4E 05 F1 | 	add	fp, #4
198d4     A7 26 02 FB | 	rdlong	local01, fp
198d8     13 29 02 F1 | 	add	local02, local01
198dc     0C 4E 85 F1 | 	sub	fp, #12
198e0     A7 2A 02 FB | 	rdlong	local03, fp
198e4     08 4E 85 F1 | 	sub	fp, #8
198e8     15 29 5A F2 | 	cmps	local02, local03 wcz
198ec     50 00 00 FF 
198f0     C4 E4 85 F1 | 	sub	objptr, ##41156
198f4     18 00 90 1D |  if_a	jmp	#LR__2036
198f8     10 4E 05 F1 | 	add	fp, #16
198fc     A7 28 02 FB | 	rdlong	local02, fp
19900     01 28 06 F1 | 	add	local02, #1
19904     A7 28 62 FC | 	wrlong	local02, fp
19908     10 4E 85 F1 | 	sub	fp, #16
1990c     58 FE 9F FD | 	jmp	#LR__2031
19910                 | LR__2036
19910                 | LR__2037
19910     A7 F0 03 F6 | 	mov	ptra, fp
19914     B2 00 A0 FD | 	call	#popregs_
19918                 | _do_put_ret
19918     2D 00 64 FD | 	ret
1991c                 | 
1991c                 | ' 
1991c                 | ' '-------------------- rad
1991c                 | ' 
1991c                 | ' sub do_rad
1991c                 | _do_rad
1991c     52 00 00 FF 
19920     A8 E4 05 F1 | 	add	objptr, ##42152
19924     00 C0 9F FF 
19928     F2 00 68 FC | 	wrlong	##1065353216, objptr
1992c     04 E4 05 F1 | 	add	objptr, #4
19930     00 C0 9F FF 
19934     F2 00 68 FC | 	wrlong	##1065353216, objptr
19938     52 00 00 FF 
1993c     AC E4 85 F1 | 	sub	objptr, ##42156
19940                 | _do_rad_ret
19940     2D 00 64 FD | 	ret
19944                 | 
19944                 | ' 
19944                 | ' '-------------------- rdpin
19944                 | ' 
19944                 | ' sub do_rdpin
19944                 | _do_rdpin
19944     00 4A 05 F6 | 	mov	COUNT_, #0
19948     A8 00 A0 FD | 	call	#pushregs_
1994c     0C F0 07 F1 | 	add	ptra, #12
19950     EC 3C BF FD | 	call	#_pop
19954     A7 FA 61 FC | 	wrlong	result1, fp
19958     04 4E 05 F1 | 	add	fp, #4
1995c     A7 FC 61 FC | 	wrlong	result2, fp
19960     04 4E 05 F1 | 	add	fp, #4
19964     A7 FE 61 FC | 	wrlong	result3, fp
19968     08 4E 85 F1 | 	sub	fp, #8
1996c     A7 12 02 F6 | 	mov	arg01, fp
19970     B0 3E BF FD | 	call	#_converttoint
19974     FD FA 89 FA | 	rdpin	result1, result1
19978     52 00 00 FF 
1997c     10 E5 05 F1 | 	add	objptr, ##42256
19980     F2 FA 61 FC | 	wrlong	result1, objptr
19984     52 00 00 FF 
19988     10 E5 85 F1 | 	sub	objptr, ##42256
1998c     08 4E 05 F1 | 	add	fp, #8
19990     A7 3A 68 FC | 	wrlong	#29, fp
19994     08 4E 85 F1 | 	sub	fp, #8
19998     A7 08 68 FC | 	wrlong	#4, fp
1999c     A7 12 02 F6 | 	mov	arg01, fp
199a0     34 3D BF FD | 	call	#_push
199a4     A7 F0 03 F6 | 	mov	ptra, fp
199a8     B2 00 A0 FD | 	call	#popregs_
199ac                 | _do_rdpin_ret
199ac     2D 00 64 FD | 	ret
199b0                 | 
199b0                 | ' 
199b0                 | ' ' ----------------  read
199b0                 | ' 
199b0                 | ' function read_next_line() as string
199b0                 | _read_next_line
199b0     07 4A 05 F6 | 	mov	COUNT_, #7
199b4     A8 00 A0 FD | 	call	#pushregs_
199b8                 | ' if dataptr=$7FFFFFFF then return("")
199b8     50 00 00 FF 
199bc     2C E5 05 F1 | 	add	objptr, ##41260
199c0     F2 26 02 FB | 	rdlong	local01, objptr
199c4     50 00 00 FF 
199c8     2C E5 85 F1 | 	sub	objptr, ##41260
199cc     FF FF 3F FF 
199d0     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
199d4     BA 01 00 AF 
199d8     D0 FA 05 A6 |  if_e	mov	result1, ##@LR__5971
199dc     BC 01 90 AD |  if_e	jmp	#LR__2047
199e0                 | ' do
199e0                 | LR__2040
199e0     50 00 00 FF 
199e4     08 E5 05 F1 | 	add	objptr, ##41224
199e8     F2 12 02 F6 | 	mov	arg01, objptr
199ec     24 E4 05 F1 | 	add	objptr, #36
199f0     F2 14 02 FB | 	rdlong	arg02, objptr
199f4     24 16 06 F6 | 	mov	arg03, #36
199f8     45 00 00 FF 
199fc     60 E4 85 F1 | 	sub	objptr, ##35424
19a00     C4 C7 B0 FD | 	call	#_psram_spin2_read1
19a04                 | '  ' print dataptr
19a04                 | '   psram.read1(varptr(dataheader),dataptr,36) 
19a04                 | '   if dataheader(0)<>$FFFFFFFF then dataptr=dataheader(5)
19a04     45 00 00 FF 
19a08     3C E4 05 F1 | 	add	objptr, ##35388
19a0c     F2 26 02 FB | 	rdlong	local01, objptr
19a10     50 00 00 FF 
19a14     08 E5 85 F1 | 	sub	objptr, ##41224
19a18     FF FF 7F FF 
19a1c     FF 27 0E F2 | 	cmp	local01, ##-1 wz
19a20     50 00 00 5F 
19a24     1C E5 05 51 |  if_ne	add	objptr, ##41244
19a28     F2 26 02 5B |  if_ne	rdlong	local01, objptr
19a2c     10 E4 05 51 |  if_ne	add	objptr, #16
19a30     F2 26 62 5C |  if_ne	wrlong	local01, objptr
19a34     50 00 00 5F 
19a38     2C E5 85 51 |  if_ne	sub	objptr, ##41260
19a3c     50 00 00 FF 
19a40     1C E5 05 F1 | 	add	objptr, ##41244
19a44     F2 26 02 FB | 	rdlong	local01, objptr
19a48     50 00 00 FF 
19a4c     1C E5 85 F1 | 	sub	objptr, ##41244
19a50     FF FF 3F FF 
19a54     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
19a58     50 00 00 5F 
19a5c     08 E5 05 51 |  if_ne	add	objptr, ##41224
19a60     F2 28 02 5B |  if_ne	rdlong	local02, objptr
19a64     50 00 00 5F 
19a68     08 E5 85 51 |  if_ne	sub	objptr, ##41224
19a6c     FF FF 7F 5F 
19a70     FF 29 0E 52 |  if_ne	cmp	local02, ##-1 wz
19a74     50 00 00 5F 
19a78     28 E5 05 51 |  if_ne	add	objptr, ##41256
19a7c     F2 2A 02 5B |  if_ne	rdlong	local03, objptr
19a80     50 00 00 5F 
19a84     28 E5 85 51 |  if_ne	sub	objptr, ##41256
19a88     B7 2A 0E 52 |  if_ne	cmp	local03, #183 wz
19a8c     50 FF 9F 5D |  if_ne	jmp	#LR__2040
19a90                 | ' if dataheader(8)=token_data then 
19a90     50 00 00 FF 
19a94     28 E5 05 F1 | 	add	objptr, ##41256
19a98     F2 26 02 FB | 	rdlong	local01, objptr
19a9c     50 00 00 FF 
19aa0     28 E5 85 F1 | 	sub	objptr, ##41256
19aa4     B7 26 0E F2 | 	cmp	local01, #183 wz
19aa8     E0 00 90 5D |  if_ne	jmp	#LR__2045
19aac     50 00 00 FF 
19ab0     10 E5 05 F1 | 	add	objptr, ##41232
19ab4     F2 26 02 FB | 	rdlong	local01, objptr
19ab8     01 00 00 FF 
19abc     E0 E5 05 F1 | 	add	objptr, ##992
19ac0     F2 26 62 FC | 	wrlong	local01, objptr
19ac4     01 00 00 FF 
19ac8     DC E5 85 F1 | 	sub	objptr, ##988
19acc     F2 2C 02 FB | 	rdlong	local04, objptr
19ad0     01 00 00 FF 
19ad4     D4 E5 05 F1 | 	add	objptr, ##980
19ad8     F2 2C 62 FC | 	wrlong	local04, objptr
19adc                 | '  'print "data found at line "; dataheader(0)
19adc                 | '   l=dataheader(2) : j=dataheader(3) : for i=0 to j-1: readline+=chr$(pspeek(l+i)): next i 
19adc     00 2E 06 F6 | 	mov	local05, #0
19ae0     52 00 00 FF 
19ae4     E8 E4 85 F1 | 	sub	objptr, ##42216
19ae8                 | LR__2041
19ae8     16 2F 52 F2 | 	cmps	local05, local04 wc
19aec     3C 00 90 3D |  if_ae	jmp	#LR__2042
19af0     52 00 00 FF 
19af4     F0 E4 05 F1 | 	add	objptr, ##42224
19af8     F2 12 02 FB | 	rdlong	arg01, objptr
19afc     52 00 00 FF 
19b00     F0 E4 85 F1 | 	sub	objptr, ##42224
19b04     17 13 02 F1 | 	add	arg01, local05
19b08     A0 9B B0 FD | 	call	#_pspeek
19b0c     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
19b10     7C F5 B0 FD | 	call	#__system__Chr_S
19b14     FD 14 02 F6 | 	mov	arg02, result1
19b18     18 13 02 F6 | 	mov	arg01, local06
19b1c     8C D3 B0 FD | 	call	#__system___string_concat
19b20     FD 30 02 F6 | 	mov	local06, result1
19b24     01 2E 06 F1 | 	add	local05, #1
19b28     BC FF 9F FD | 	jmp	#LR__2041
19b2c                 | LR__2042
19b2c     BA 01 00 FF 
19b30     D1 16 06 F6 | 	mov	arg03, ##@LR__5972
19b34     01 12 06 F6 | 	mov	arg01, #1
19b38     18 15 02 F6 | 	mov	arg02, local06
19b3c     D4 F8 B0 FD | 	call	#__system__Instr
19b40     FD 2E 02 F6 | 	mov	local05, result1
19b44     18 13 02 F6 | 	mov	arg01, local06
19b48     09 33 02 F6 | 	mov	local07, arg01
19b4c     97 06 48 FB | 	callpa	#(@LR__2044-@LR__2043)>>2,fcache_load_ptr_
19b50                 | LR__2043
19b50     19 FB C9 FA | 	rdbyte	result1, local07 wz
19b54     01 32 06 51 |  if_ne	add	local07, #1
19b58     F4 FF 9F 5D |  if_ne	jmp	#LR__2043
19b5c                 | LR__2044
19b5c     09 33 82 F1 | 	sub	local07, arg01
19b60     19 15 02 F6 | 	mov	arg02, local07
19b64     17 15 82 F1 | 	sub	arg02, local05
19b68     04 14 86 F1 | 	sub	arg02, #4
19b6c     18 13 02 F6 | 	mov	arg01, local06
19b70     E0 F3 B0 FD | 	call	#__system__Right_S
19b74     FD 12 02 F6 | 	mov	arg01, result1
19b78     E0 F7 B0 FD | 	call	#__system__RTrim_S
19b7c     FD 12 02 F6 | 	mov	arg01, result1
19b80     18 F7 B0 FD | 	call	#__system__LTrim_S
19b84     FD 30 02 F6 | 	mov	local06, result1
19b88     0C 00 90 FD | 	jmp	#LR__2046
19b8c                 | LR__2045
19b8c                 | '   return ("") 'todo proper err
19b8c     BA 01 00 FF 
19b90     D6 FA 05 F6 | 	mov	result1, ##@LR__5973
19b94     04 00 90 FD | 	jmp	#LR__2047
19b98                 | LR__2046
19b98                 | ' return readline
19b98     18 FB 01 F6 | 	mov	result1, local06
19b9c                 | LR__2047
19b9c     A7 F0 03 F6 | 	mov	ptra, fp
19ba0     B2 00 A0 FD | 	call	#popregs_
19ba4                 | _read_next_line_ret
19ba4     2D 00 64 FD | 	ret
19ba8                 | 
19ba8                 | ' 
19ba8                 | ' sub do_read
19ba8                 | _do_read
19ba8     11 4A 05 F6 | 	mov	COUNT_, #17
19bac     A8 00 A0 FD | 	call	#pushregs_
19bb0     58 F1 07 F1 | 	add	ptra, #344
19bb4     4A 00 00 FF 
19bb8     80 E4 05 F1 | 	add	objptr, ##38016
19bbc     F2 FE 01 FB | 	rdlong	result3, objptr
19bc0     FF FC 01 F6 | 	mov	result2, result3
19bc4     01 FC 65 F0 | 	shl	result2, #1
19bc8     FF FC 01 F1 | 	add	result2, result3
19bcc     02 FC 65 F0 | 	shl	result2, #2
19bd0     03 00 00 FF 
19bd4     04 E4 85 F1 | 	sub	objptr, ##1540
19bd8     F2 FC 01 F1 | 	add	result2, objptr
19bdc     FE FC 01 FB | 	rdlong	result2, result2
19be0     08 4E 05 F1 | 	add	fp, #8
19be4     A7 FC 61 FC | 	wrlong	result2, fp
19be8                 | ' 
19be8                 | ' 
19be8                 | ' numpar=compiledline(lineptr_e).result.uresult
19be8                 | ' if numpar<1 orelse numpar>64 then print "In read: ";: printerror(39,runheader(0)) : return
19be8     08 4E 85 F1 | 	sub	fp, #8
19bec     01 FC 15 F2 | 	cmp	result2, #1 wc
19bf0     47 00 00 FF 
19bf4     7C E4 85 F1 | 	sub	objptr, ##36476
19bf8     14 00 90 CD |  if_b	jmp	#LR__2050
19bfc     08 4E 05 F1 | 	add	fp, #8
19c00     A7 FC 01 FB | 	rdlong	result2, fp
19c04     08 4E 85 F1 | 	sub	fp, #8
19c08     41 FC 15 F2 | 	cmp	result2, #65 wc
19c0c     50 00 90 CD |  if_b	jmp	#LR__2051
19c10                 | LR__2050
19c10     00 12 06 F6 | 	mov	arg01, #0
19c14     60 2F B1 FD | 	call	#__system___getiolock_0611
19c18     FD 12 02 F6 | 	mov	arg01, result1
19c1c     30 D2 B0 FD | 	call	#__system___lockmem
19c20     BA 01 00 FF 
19c24     D7 14 06 F6 | 	mov	arg02, ##@LR__5974
19c28     00 12 06 F6 | 	mov	arg01, #0
19c2c     00 16 06 F6 | 	mov	arg03, #0
19c30     10 DF B0 FD | 	call	#__system___basic_print_string
19c34     00 12 06 F6 | 	mov	arg01, #0
19c38     3C 2F B1 FD | 	call	#__system___getiolock_0611
19c3c     FD 00 68 FC | 	wrlong	#0, result1
19c40     50 00 00 FF 
19c44     F0 E4 05 F1 | 	add	objptr, ##41200
19c48     F2 14 02 FB | 	rdlong	arg02, objptr
19c4c     50 00 00 FF 
19c50     F0 E4 85 F1 | 	sub	objptr, ##41200
19c54     27 12 06 F6 | 	mov	arg01, #39
19c58     D8 97 B0 FD | 	call	#_printerror
19c5c     D0 0C 90 FD | 	jmp	#LR__2101
19c60                 | LR__2051
19c60     08 4E 05 F1 | 	add	fp, #8
19c64     A7 16 02 FB | 	rdlong	arg03, fp
19c68     01 16 86 F1 | 	sub	arg03, #1
19c6c     28 4F 05 F1 | 	add	fp, #296
19c70     A7 16 62 FC | 	wrlong	arg03, fp
19c74     30 4F 85 F1 | 	sub	fp, #304
19c78                 | ' i=numpar-1
19c78                 | ' if readline="" then readline=read_next_line() ': print readline
19c78     52 00 00 FF 
19c7c     DC E4 05 F1 | 	add	objptr, ##42204
19c80     F2 12 02 FB | 	rdlong	arg01, objptr
19c84     52 00 00 FF 
19c88     DC E4 85 F1 | 	sub	objptr, ##42204
19c8c     BA 01 00 FF 
19c90     E1 14 06 F6 | 	mov	arg02, ##@LR__5975
19c94     E0 D1 B0 FD | 	call	#__system___string_cmp
19c98     00 FA 0D F2 | 	cmp	result1, #0 wz
19c9c     18 00 90 5D |  if_ne	jmp	#LR__2052
19ca0     0C FD BF FD | 	call	#_read_next_line
19ca4     52 00 00 FF 
19ca8     DC E4 05 F1 | 	add	objptr, ##42204
19cac     F2 FA 61 FC | 	wrlong	result1, objptr
19cb0     52 00 00 FF 
19cb4     DC E4 85 F1 | 	sub	objptr, ##42204
19cb8                 | LR__2052
19cb8                 | ' if readline="" then printerror(55,runheader(0)) :return
19cb8     52 00 00 FF 
19cbc     DC E4 05 F1 | 	add	objptr, ##42204
19cc0     F2 12 02 FB | 	rdlong	arg01, objptr
19cc4     52 00 00 FF 
19cc8     DC E4 85 F1 | 	sub	objptr, ##42204
19ccc     BA 01 00 FF 
19cd0     E2 14 06 F6 | 	mov	arg02, ##@LR__5976
19cd4     A0 D1 B0 FD | 	call	#__system___string_cmp
19cd8     00 FA 0D F2 | 	cmp	result1, #0 wz
19cdc     20 00 90 5D |  if_ne	jmp	#LR__2053
19ce0     50 00 00 FF 
19ce4     F0 E4 05 F1 | 	add	objptr, ##41200
19ce8     F2 14 02 FB | 	rdlong	arg02, objptr
19cec     50 00 00 FF 
19cf0     F0 E4 85 F1 | 	sub	objptr, ##41200
19cf4     37 12 06 F6 | 	mov	arg01, #55
19cf8     38 97 B0 FD | 	call	#_printerror
19cfc     30 0C 90 FD | 	jmp	#LR__2101
19d00                 | LR__2053
19d00     34 4F 05 F1 | 	add	fp, #308
19d04     A7 00 68 FC | 	wrlong	#0, fp
19d08     2C 4F 85 F1 | 	sub	fp, #300
19d0c     A7 26 02 FB | 	rdlong	local01, fp
19d10     01 26 86 F1 | 	sub	local01, #1
19d14     28 4F 05 F1 | 	add	fp, #296
19d18     A7 26 62 FC | 	wrlong	local01, fp
19d1c     30 4F 85 F1 | 	sub	fp, #304
19d20                 | ' j=0
19d20                 | ' i=numpar-1
19d20                 | ' do
19d20                 | LR__2054
19d20                 | '   do
19d20                 | LR__2055
19d20     52 00 00 FF 
19d24     DC E4 05 F1 | 	add	objptr, ##42204
19d28     F2 14 02 FB | 	rdlong	arg02, objptr
19d2c     52 00 00 FF 
19d30     DC E4 85 F1 | 	sub	objptr, ##42204
19d34     BA 01 00 FF 
19d38     E3 16 06 F6 | 	mov	arg03, ##@LR__5977
19d3c     01 12 06 F6 | 	mov	arg01, #1
19d40     D0 F6 B0 FD | 	call	#__system__Instr
19d44     0C 4E 05 F1 | 	add	fp, #12
19d48     A7 FA 61 FC | 	wrlong	result1, fp
19d4c                 | '     comma=instr(1,readline,"'") : if comma>0 then readline=left$(readline,comma-1) ' allows comments in data
19d4c     0C 4E 85 F1 | 	sub	fp, #12
19d50     01 FA 15 F2 | 	cmp	result1, #1 wc
19d54     3C 00 90 CD |  if_b	jmp	#LR__2056
19d58     52 00 00 FF 
19d5c     DC E4 05 F1 | 	add	objptr, ##42204
19d60     F2 12 02 FB | 	rdlong	arg01, objptr
19d64     52 00 00 FF 
19d68     DC E4 85 F1 | 	sub	objptr, ##42204
19d6c     0C 4E 05 F1 | 	add	fp, #12
19d70     A7 14 02 FB | 	rdlong	arg02, fp
19d74     0C 4E 85 F1 | 	sub	fp, #12
19d78     01 14 86 F1 | 	sub	arg02, #1
19d7c     4C F1 B0 FD | 	call	#__system__Left_S
19d80     52 00 00 FF 
19d84     DC E4 05 F1 | 	add	objptr, ##42204
19d88     F2 FA 61 FC | 	wrlong	result1, objptr
19d8c     52 00 00 FF 
19d90     DC E4 85 F1 | 	sub	objptr, ##42204
19d94                 | LR__2056
19d94     52 00 00 FF 
19d98     DC E4 05 F1 | 	add	objptr, ##42204
19d9c     F2 14 02 FB | 	rdlong	arg02, objptr
19da0     52 00 00 FF 
19da4     DC E4 85 F1 | 	sub	objptr, ##42204
19da8     BA 01 00 FF 
19dac     E5 16 06 F6 | 	mov	arg03, ##@LR__5978
19db0     01 12 06 F6 | 	mov	arg01, #1
19db4     5C F6 B0 FD | 	call	#__system__Instr
19db8     0C 4E 05 F1 | 	add	fp, #12
19dbc     A7 FA 61 FC | 	wrlong	result1, fp
19dc0                 | '     comma=instr(1,readline,",")  
19dc0                 | '       if comma>0  then 
19dc0     0C 4E 85 F1 | 	sub	fp, #12
19dc4     01 FA 15 F2 | 	cmp	result1, #1 wc
19dc8     98 00 90 CD |  if_b	jmp	#LR__2059
19dcc     52 00 00 FF 
19dd0     DC E4 05 F1 | 	add	objptr, ##42204
19dd4     F2 12 02 FB | 	rdlong	arg01, objptr
19dd8     52 00 00 FF 
19ddc     DC E4 85 F1 | 	sub	objptr, ##42204
19de0     0C 4E 05 F1 | 	add	fp, #12
19de4     A7 14 02 FB | 	rdlong	arg02, fp
19de8     0C 4E 85 F1 | 	sub	fp, #12
19dec     01 14 86 F1 | 	sub	arg02, #1
19df0     D8 F0 B0 FD | 	call	#__system__Left_S
19df4     04 4E 05 F1 | 	add	fp, #4
19df8     A7 FA 61 FC | 	wrlong	result1, fp
19dfc     04 4E 85 F1 | 	sub	fp, #4
19e00     52 00 00 FF 
19e04     DC E4 05 F1 | 	add	objptr, ##42204
19e08     F2 12 02 FB | 	rdlong	arg01, objptr
19e0c     09 27 02 F6 | 	mov	local01, arg01
19e10     52 00 00 FF 
19e14     DC E4 85 F1 | 	sub	objptr, ##42204
19e18     09 29 02 F6 | 	mov	local02, arg01
19e1c     97 06 48 FB | 	callpa	#(@LR__2058-@LR__2057)>>2,fcache_load_ptr_
19e20                 | LR__2057
19e20     14 FB C9 FA | 	rdbyte	result1, local02 wz
19e24     01 28 06 51 |  if_ne	add	local02, #1
19e28     F4 FF 9F 5D |  if_ne	jmp	#LR__2057
19e2c                 | LR__2058
19e2c     09 29 82 F1 | 	sub	local02, arg01
19e30     14 15 02 F6 | 	mov	arg02, local02
19e34     0C 4E 05 F1 | 	add	fp, #12
19e38     A7 16 02 FB | 	rdlong	arg03, fp
19e3c     0C 4E 85 F1 | 	sub	fp, #12
19e40     0B 15 82 F1 | 	sub	arg02, arg03
19e44     13 13 02 F6 | 	mov	arg01, local01
19e48     08 F1 B0 FD | 	call	#__system__Right_S
19e4c     52 00 00 FF 
19e50     DC E4 05 F1 | 	add	objptr, ##42204
19e54     F2 FA 61 FC | 	wrlong	result1, objptr
19e58     52 00 00 FF 
19e5c     DC E4 85 F1 | 	sub	objptr, ##42204
19e60     48 00 90 FD | 	jmp	#LR__2060
19e64                 | LR__2059
19e64     52 00 00 FF 
19e68     DC E4 05 F1 | 	add	objptr, ##42204
19e6c     F2 12 02 FB | 	rdlong	arg01, objptr
19e70     52 00 00 FF 
19e74     DC E4 85 F1 | 	sub	objptr, ##42204
19e78     E0 F4 B0 FD | 	call	#__system__RTrim_S
19e7c     FD 12 02 F6 | 	mov	arg01, result1
19e80     18 F4 B0 FD | 	call	#__system__LTrim_S
19e84     04 4E 05 F1 | 	add	fp, #4
19e88     A7 FA 61 FC | 	wrlong	result1, fp
19e8c     04 4E 85 F1 | 	sub	fp, #4
19e90     BA 01 00 FF 
19e94     E7 26 06 F6 | 	mov	local01, ##@LR__5979
19e98     52 00 00 FF 
19e9c     DC E4 05 F1 | 	add	objptr, ##42204
19ea0     F2 26 62 FC | 	wrlong	local01, objptr
19ea4     52 00 00 FF 
19ea8     DC E4 85 F1 | 	sub	objptr, ##42204
19eac                 | LR__2060
19eac                 | '      
19eac                 | '      if part$<>"" then j=j+1
19eac     04 4E 05 F1 | 	add	fp, #4
19eb0     A7 12 02 FB | 	rdlong	arg01, fp
19eb4     04 4E 85 F1 | 	sub	fp, #4
19eb8     BA 01 00 FF 
19ebc     E8 14 06 F6 | 	mov	arg02, ##@LR__5980
19ec0     B4 CF B0 FD | 	call	#__system___string_cmp
19ec4     00 FA 0D F2 | 	cmp	result1, #0 wz
19ec8     34 4F 05 51 |  if_ne	add	fp, #308
19ecc     A7 26 02 5B |  if_ne	rdlong	local01, fp
19ed0     01 26 06 51 |  if_ne	add	local01, #1
19ed4     A7 26 62 5C |  if_ne	wrlong	local01, fp
19ed8     34 4F 85 51 |  if_ne	sub	fp, #308
19edc     30 4F 05 F1 | 	add	fp, #304
19ee0     A7 26 02 FB | 	rdlong	local01, fp
19ee4     02 26 66 F0 | 	shl	local01, #2
19ee8     04 4F 85 F1 | 	sub	fp, #260
19eec     A7 26 02 F1 | 	add	local01, fp
19ef0     28 4E 85 F1 | 	sub	fp, #40
19ef4     A7 FA 01 FB | 	rdlong	result1, fp
19ef8     13 FB 61 FC | 	wrlong	result1, local01
19efc     2C 4F 05 F1 | 	add	fp, #300
19f00     A7 26 02 FB | 	rdlong	local01, fp
19f04     01 26 86 F1 | 	sub	local01, #1
19f08     A7 26 62 FC | 	wrlong	local01, fp
19f0c     30 4F 85 F1 | 	sub	fp, #304
19f10                 | '      args(i)=part$  
19f10                 | '      i=i-1
19f10                 | '     if readline="" then readline=read_next_line() 
19f10     52 00 00 FF 
19f14     DC E4 05 F1 | 	add	objptr, ##42204
19f18     F2 12 02 FB | 	rdlong	arg01, objptr
19f1c     52 00 00 FF 
19f20     DC E4 85 F1 | 	sub	objptr, ##42204
19f24     BA 01 00 FF 
19f28     E9 14 06 F6 | 	mov	arg02, ##@LR__5981
19f2c     48 CF B0 FD | 	call	#__system___string_cmp
19f30     00 FA 0D F2 | 	cmp	result1, #0 wz
19f34     18 00 90 5D |  if_ne	jmp	#LR__2061
19f38     74 FA BF FD | 	call	#_read_next_line
19f3c     52 00 00 FF 
19f40     DC E4 05 F1 | 	add	objptr, ##42204
19f44     F2 FA 61 FC | 	wrlong	result1, objptr
19f48     52 00 00 FF 
19f4c     DC E4 85 F1 | 	sub	objptr, ##42204
19f50                 | LR__2061
19f50     30 4F 05 F1 | 	add	fp, #304
19f54     A7 26 02 FB | 	rdlong	local01, fp
19f58     30 4F 85 F1 | 	sub	fp, #304
19f5c     00 26 56 F2 | 	cmps	local01, #0 wc
19f60     28 00 90 CD |  if_b	jmp	#LR__2062
19f64     52 00 00 FF 
19f68     DC E4 05 F1 | 	add	objptr, ##42204
19f6c     F2 12 02 FB | 	rdlong	arg01, objptr
19f70     52 00 00 FF 
19f74     DC E4 85 F1 | 	sub	objptr, ##42204
19f78     BA 01 00 FF 
19f7c     EA 14 06 F6 | 	mov	arg02, ##@LR__5982
19f80     F4 CE B0 FD | 	call	#__system___string_cmp
19f84     00 FA 0D F2 | 	cmp	result1, #0 wz
19f88     94 FD 9F 5D |  if_ne	jmp	#LR__2055
19f8c                 | LR__2062
19f8c     30 4F 05 F1 | 	add	fp, #304
19f90     A7 26 02 FB | 	rdlong	local01, fp
19f94     30 4F 85 F1 | 	sub	fp, #304
19f98     00 26 56 F2 | 	cmps	local01, #0 wc
19f9c     80 FD 9F 3D |  if_ae	jmp	#LR__2054
19fa0                 | ' if j<numpar then printerror(55,runheader(0))
19fa0     34 4F 05 F1 | 	add	fp, #308
19fa4     A7 26 02 FB | 	rdlong	local01, fp
19fa8     2C 4F 85 F1 | 	sub	fp, #300
19fac     A7 16 02 FB | 	rdlong	arg03, fp
19fb0     08 4E 85 F1 | 	sub	fp, #8
19fb4     0B 27 52 F2 | 	cmps	local01, arg03 wc
19fb8     50 00 00 CF 
19fbc     F0 E4 05 C1 |  if_b	add	objptr, ##41200
19fc0     F2 14 02 CB |  if_b	rdlong	arg02, objptr
19fc4     50 00 00 CF 
19fc8     F0 E4 85 C1 |  if_b	sub	objptr, ##41200
19fcc     37 12 06 C6 |  if_b	mov	arg01, #55
19fd0     60 94 B0 CD |  if_b	call	#_printerror
19fd4                 | ' 
19fd4                 | ' for i=0 to numpar-1
19fd4     30 4F 05 F1 | 	add	fp, #304
19fd8     A7 00 68 FC | 	wrlong	#0, fp
19fdc     28 4F 85 F1 | 	sub	fp, #296
19fe0     A7 2A 02 FB | 	rdlong	local03, fp
19fe4     08 4E 85 F1 | 	sub	fp, #8
19fe8                 | LR__2063
19fe8     30 4F 05 F1 | 	add	fp, #304
19fec     A7 2C 02 FB | 	rdlong	local04, fp
19ff0     30 4F 85 F1 | 	sub	fp, #304
19ff4     16 27 02 F6 | 	mov	local01, local04
19ff8     15 27 52 F2 | 	cmps	local01, local03 wc
19ffc     30 09 90 3D |  if_ae	jmp	#LR__2100
1a000                 | '   if isnum(args(i)) and not isint(args(i)) then r=result_float 
1a000     30 4F 05 F1 | 	add	fp, #304
1a004     A7 16 02 FB | 	rdlong	arg03, fp
1a008     02 16 66 F0 | 	shl	arg03, #2
1a00c     04 4F 85 F1 | 	sub	fp, #260
1a010     A7 16 02 F1 | 	add	arg03, fp
1a014     0B 13 02 FB | 	rdlong	arg01, arg03
1a018     2C 4E 85 F1 | 	sub	fp, #44
1a01c     8C C8 BE FD | 	call	#_isnum
1a020     FD 2E 02 F6 | 	mov	local05, result1
1a024     30 4F 05 F1 | 	add	fp, #304
1a028     A7 16 02 FB | 	rdlong	arg03, fp
1a02c     02 16 66 F0 | 	shl	arg03, #2
1a030     04 4F 85 F1 | 	sub	fp, #260
1a034     A7 30 02 F6 | 	mov	local06, fp
1a038     A7 16 02 F1 | 	add	arg03, fp
1a03c     0B 13 02 FB | 	rdlong	arg01, arg03
1a040     2C 4E 85 F1 | 	sub	fp, #44
1a044     50 CC BE FD | 	call	#_isint
1a048     FD 2E 2A F5 | 	andn	local05, result1 wz
1a04c     52 00 00 5F 
1a050     10 E5 05 51 |  if_ne	add	objptr, ##42256
1a054     F2 3C 68 5C |  if_ne	wrlong	#30, objptr
1a058     52 00 00 5F 
1a05c     10 E5 85 51 |  if_ne	sub	objptr, ##42256
1a060                 | '   if isint(args(i)) then r=result_int 
1a060     30 4F 05 F1 | 	add	fp, #304
1a064     A7 2E 02 FB | 	rdlong	local05, fp
1a068     02 2E 66 F0 | 	shl	local05, #2
1a06c     04 4F 85 F1 | 	sub	fp, #260
1a070     A7 2E 02 F1 | 	add	local05, fp
1a074     17 13 02 FB | 	rdlong	arg01, local05
1a078     2C 4E 85 F1 | 	sub	fp, #44
1a07c     18 CC BE FD | 	call	#_isint
1a080     00 FA 0D F2 | 	cmp	result1, #0 wz
1a084     52 00 00 5F 
1a088     10 E5 05 51 |  if_ne	add	objptr, ##42256
1a08c     F2 38 68 5C |  if_ne	wrlong	#28, objptr
1a090     52 00 00 5F 
1a094     10 E5 85 51 |  if_ne	sub	objptr, ##42256
1a098                 | '   if isdec(args(i)) then r=result_uint 
1a098     30 4F 05 F1 | 	add	fp, #304
1a09c     A7 2E 02 FB | 	rdlong	local05, fp
1a0a0     02 2E 66 F0 | 	shl	local05, #2
1a0a4     04 4F 85 F1 | 	sub	fp, #260
1a0a8     A7 2E 02 F1 | 	add	local05, fp
1a0ac     17 13 02 FB | 	rdlong	arg01, local05
1a0b0     2C 4E 85 F1 | 	sub	fp, #44
1a0b4     84 CE BE FD | 	call	#_isdec
1a0b8     00 FA 0D F2 | 	cmp	result1, #0 wz
1a0bc     52 00 00 5F 
1a0c0     10 E5 05 51 |  if_ne	add	objptr, ##42256
1a0c4     F2 3A 68 5C |  if_ne	wrlong	#29, objptr
1a0c8     52 00 00 5F 
1a0cc     10 E5 85 51 |  if_ne	sub	objptr, ##42256
1a0d0                 | '   if not isnum(args(i)) then 
1a0d0     30 4F 05 F1 | 	add	fp, #304
1a0d4     A7 2E 02 FB | 	rdlong	local05, fp
1a0d8     02 2E 66 F0 | 	shl	local05, #2
1a0dc     04 4F 85 F1 | 	sub	fp, #260
1a0e0     A7 2E 02 F1 | 	add	local05, fp
1a0e4     17 13 02 FB | 	rdlong	arg01, local05
1a0e8     2C 4E 85 F1 | 	sub	fp, #44
1a0ec     BC C7 BE FD | 	call	#_isnum
1a0f0     FD 2E 22 F6 | 	not	local05, result1
1a0f4     00 2E 0E F2 | 	cmp	local05, #0 wz
1a0f8     4C 01 90 AD |  if_e	jmp	#LR__2068
1a0fc     52 00 00 FF 
1a100     10 E5 05 F1 | 	add	objptr, ##42256
1a104     F2 56 68 FC | 	wrlong	#43, objptr
1a108     52 00 00 FF 
1a10c     10 E5 85 F1 | 	sub	objptr, ##42256
1a110     30 4F 05 F1 | 	add	fp, #304
1a114     A7 16 02 FB | 	rdlong	arg03, fp
1a118     02 16 66 F0 | 	shl	arg03, #2
1a11c     04 4F 85 F1 | 	sub	fp, #260
1a120     A7 16 02 F1 | 	add	arg03, fp
1a124     0B 13 02 FB | 	rdlong	arg01, arg03
1a128     2C 4E 85 F1 | 	sub	fp, #44
1a12c     09 29 02 F6 | 	mov	local02, arg01
1a130     97 06 48 FB | 	callpa	#(@LR__2065-@LR__2064)>>2,fcache_load_ptr_
1a134                 | LR__2064
1a134     14 FB C9 FA | 	rdbyte	result1, local02 wz
1a138     01 28 06 51 |  if_ne	add	local02, #1
1a13c     F4 FF 9F 5D |  if_ne	jmp	#LR__2064
1a140                 | LR__2065
1a140     09 29 82 F1 | 	sub	local02, arg01
1a144     14 FB 01 F6 | 	mov	result1, local02
1a148     38 4F 05 F1 | 	add	fp, #312
1a14c     A7 FA 61 FC | 	wrlong	result1, fp
1a150     52 00 00 FF 
1a154     98 E4 05 F1 | 	add	objptr, ##42136
1a158     F2 12 02 FB | 	rdlong	arg01, objptr
1a15c     FD 12 82 F1 | 	sub	arg01, result1
1a160     04 12 86 F1 | 	sub	arg01, #4
1a164     03 12 26 F5 | 	andn	arg01, #3
1a168     F2 12 62 FC | 	wrlong	arg01, objptr
1a16c     52 00 00 FF 
1a170     98 E4 85 F1 | 	sub	objptr, ##42136
1a174     A7 14 02 FB | 	rdlong	arg02, fp
1a178     38 4F 85 F1 | 	sub	fp, #312
1a17c     54 94 B0 FD | 	call	#_pslpoke
1a180                 | '     pslpoke memtop,l
1a180                 | '     for j=1 to l : pspoke memtop+3+j, asc(mid$(args(i),j,1)) : next j
1a180     34 4F 05 F1 | 	add	fp, #308
1a184     A7 02 68 FC | 	wrlong	#1, fp
1a188     04 4E 05 F1 | 	add	fp, #4
1a18c     A7 32 02 FB | 	rdlong	local07, fp
1a190     38 4F 85 F1 | 	sub	fp, #312
1a194     01 32 06 F1 | 	add	local07, #1
1a198                 | LR__2066
1a198     34 4F 05 F1 | 	add	fp, #308
1a19c     A7 2E 02 FB | 	rdlong	local05, fp
1a1a0     34 4F 85 F1 | 	sub	fp, #308
1a1a4     19 2F 52 F2 | 	cmps	local05, local07 wc
1a1a8     7C 00 90 3D |  if_ae	jmp	#LR__2067
1a1ac     52 00 00 FF 
1a1b0     98 E4 05 F1 | 	add	objptr, ##42136
1a1b4     F2 30 02 FB | 	rdlong	local06, objptr
1a1b8     52 00 00 FF 
1a1bc     98 E4 85 F1 | 	sub	objptr, ##42136
1a1c0     03 30 06 F1 | 	add	local06, #3
1a1c4     34 4F 05 F1 | 	add	fp, #308
1a1c8     A7 34 02 FB | 	rdlong	local08, fp
1a1cc     1A 31 02 F1 | 	add	local06, local08
1a1d0     04 4E 85 F1 | 	sub	fp, #4
1a1d4     A7 36 02 FB | 	rdlong	local09, fp
1a1d8     02 36 66 F0 | 	shl	local09, #2
1a1dc     04 4F 85 F1 | 	sub	fp, #260
1a1e0     A7 38 02 F6 | 	mov	local10, fp
1a1e4     A7 36 02 F1 | 	add	local09, fp
1a1e8     1B 13 02 FB | 	rdlong	arg01, local09
1a1ec     2C 4E 85 F1 | 	sub	fp, #44
1a1f0     01 3A 06 F6 | 	mov	local11, #1
1a1f4     1A 15 02 F6 | 	mov	arg02, local08
1a1f8     01 16 06 F6 | 	mov	arg03, #1
1a1fc     E4 ED B0 FD | 	call	#__system__Mid_S
1a200     FD 14 C2 FA | 	rdbyte	arg02, result1
1a204     18 13 02 F6 | 	mov	arg01, local06
1a208     58 94 B0 FD | 	call	#_pspoke
1a20c     34 4F 05 F1 | 	add	fp, #308
1a210     A7 30 02 FB | 	rdlong	local06, fp
1a214     18 2F 02 F6 | 	mov	local05, local06
1a218     01 2E 06 F1 | 	add	local05, #1
1a21c     A7 2E 62 FC | 	wrlong	local05, fp
1a220     34 4F 85 F1 | 	sub	fp, #308
1a224     70 FF 9F FD | 	jmp	#LR__2066
1a228                 | LR__2067
1a228     52 00 00 FF 
1a22c     98 E4 05 F1 | 	add	objptr, ##42136
1a230     F2 2E 02 FB | 	rdlong	local05, objptr
1a234     52 00 00 FF 
1a238     98 E4 85 F1 | 	sub	objptr, ##42136
1a23c     10 4E 05 F1 | 	add	fp, #16
1a240     A7 2E 62 FC | 	wrlong	local05, fp
1a244     10 4E 85 F1 | 	sub	fp, #16
1a248                 | LR__2068
1a248     F4 33 BF FD | 	call	#_pop
1a24c     1C 4E 05 F1 | 	add	fp, #28
1a250     A7 FA 61 FC | 	wrlong	result1, fp
1a254     04 4E 05 F1 | 	add	fp, #4
1a258     A7 FC 61 FC | 	wrlong	result2, fp
1a25c     04 4E 05 F1 | 	add	fp, #4
1a260     A7 FE 61 FC | 	wrlong	result3, fp
1a264                 | '   t1=pop() 
1a264                 | '   if i>=numpar-j then
1a264     1C 4E 85 F1 | 	sub	fp, #28
1a268     A7 2E 02 FB | 	rdlong	local05, fp
1a26c     17 3D 02 F6 | 	mov	local12, local05
1a270     2C 4F 05 F1 | 	add	fp, #300
1a274     A7 3E 02 FB | 	rdlong	local13, fp
1a278     1F 41 02 F6 | 	mov	local14, local13
1a27c     20 3D 82 F1 | 	sub	local12, local14
1a280     04 4E 85 F1 | 	sub	fp, #4
1a284     A7 42 02 FB | 	rdlong	local15, fp
1a288     30 4F 85 F1 | 	sub	fp, #304
1a28c     21 45 02 F6 | 	mov	local16, local15
1a290     1E 45 52 F2 | 	cmps	local16, local12 wc
1a294     80 06 90 CD |  if_b	jmp	#LR__2099
1a298     20 4E 05 F1 | 	add	fp, #32
1a29c     A7 3C 02 FB | 	rdlong	local12, fp
1a2a0     0C 4E 85 F1 | 	sub	fp, #12
1a2a4     A7 3C 62 FC | 	wrlong	local12, fp
1a2a8                 | '     vartype=t1.result.twowords(1)
1a2a8                 | '     select case vartype
1a2a8     14 4E 85 F1 | 	sub	fp, #20
1a2ac     1E 47 0A F6 | 	mov	local17, local12 wz
1a2b0     64 00 90 AD |  if_e	jmp	#LR__2069
1a2b4     00 47 0E F2 | 	cmp	local17, #256 wz
1a2b8     6C 00 90 AD |  if_e	jmp	#LR__2070
1a2bc     01 47 0E F2 | 	cmp	local17, #257 wz
1a2c0     74 00 90 AD |  if_e	jmp	#LR__2071
1a2c4     02 47 0E F2 | 	cmp	local17, #258 wz
1a2c8     7C 00 90 AD |  if_e	jmp	#LR__2072
1a2cc     03 47 0E F2 | 	cmp	local17, #259 wz
1a2d0     84 00 90 AD |  if_e	jmp	#LR__2073
1a2d4     04 47 0E F2 | 	cmp	local17, #260 wz
1a2d8     8C 00 90 AD |  if_e	jmp	#LR__2074
1a2dc     05 47 0E F2 | 	cmp	local17, #261 wz
1a2e0     94 00 90 AD |  if_e	jmp	#LR__2075
1a2e4     06 47 0E F2 | 	cmp	local17, #262 wz
1a2e8     9C 00 90 AD |  if_e	jmp	#LR__2076
1a2ec     07 47 0E F2 | 	cmp	local17, #263 wz
1a2f0     A4 00 90 AD |  if_e	jmp	#LR__2077
1a2f4     08 47 0E F2 | 	cmp	local17, #264 wz
1a2f8     AC 00 90 AD |  if_e	jmp	#LR__2078
1a2fc     09 47 0E F2 | 	cmp	local17, #265 wz
1a300     B4 00 90 AD |  if_e	jmp	#LR__2079
1a304     0A 47 0E F2 | 	cmp	local17, #266 wz
1a308     BC 00 90 AD |  if_e	jmp	#LR__2080
1a30c     0B 47 0E F2 | 	cmp	local17, #267 wz
1a310     C4 00 90 AD |  if_e	jmp	#LR__2081
1a314     D0 00 90 FD | 	jmp	#LR__2082
1a318                 | LR__2069
1a318     18 4E 05 F1 | 	add	fp, #24
1a31c     A7 18 68 FC | 	wrlong	#12, fp
1a320     18 4E 85 F1 | 	sub	fp, #24
1a324     CC 00 90 FD | 	jmp	#LR__2083
1a328                 | LR__2070
1a328     18 4E 05 F1 | 	add	fp, #24
1a32c     A7 18 68 FC | 	wrlong	#12, fp
1a330     18 4E 85 F1 | 	sub	fp, #24
1a334     BC 00 90 FD | 	jmp	#LR__2083
1a338                 | LR__2071
1a338     18 4E 05 F1 | 	add	fp, #24
1a33c     A7 02 68 FC | 	wrlong	#1, fp
1a340     18 4E 85 F1 | 	sub	fp, #24
1a344     AC 00 90 FD | 	jmp	#LR__2083
1a348                 | LR__2072
1a348     18 4E 05 F1 | 	add	fp, #24
1a34c     A7 02 68 FC | 	wrlong	#1, fp
1a350     18 4E 85 F1 | 	sub	fp, #24
1a354     9C 00 90 FD | 	jmp	#LR__2083
1a358                 | LR__2073
1a358     18 4E 05 F1 | 	add	fp, #24
1a35c     A7 04 68 FC | 	wrlong	#2, fp
1a360     18 4E 85 F1 | 	sub	fp, #24
1a364     8C 00 90 FD | 	jmp	#LR__2083
1a368                 | LR__2074
1a368     18 4E 05 F1 | 	add	fp, #24
1a36c     A7 04 68 FC | 	wrlong	#2, fp
1a370     18 4E 85 F1 | 	sub	fp, #24
1a374     7C 00 90 FD | 	jmp	#LR__2083
1a378                 | LR__2075
1a378     18 4E 05 F1 | 	add	fp, #24
1a37c     A7 08 68 FC | 	wrlong	#4, fp
1a380     18 4E 85 F1 | 	sub	fp, #24
1a384     6C 00 90 FD | 	jmp	#LR__2083
1a388                 | LR__2076
1a388     18 4E 05 F1 | 	add	fp, #24
1a38c     A7 08 68 FC | 	wrlong	#4, fp
1a390     18 4E 85 F1 | 	sub	fp, #24
1a394     5C 00 90 FD | 	jmp	#LR__2083
1a398                 | LR__2077
1a398     18 4E 05 F1 | 	add	fp, #24
1a39c     A7 10 68 FC | 	wrlong	#8, fp
1a3a0     18 4E 85 F1 | 	sub	fp, #24
1a3a4     4C 00 90 FD | 	jmp	#LR__2083
1a3a8                 | LR__2078
1a3a8     18 4E 05 F1 | 	add	fp, #24
1a3ac     A7 10 68 FC | 	wrlong	#8, fp
1a3b0     18 4E 85 F1 | 	sub	fp, #24
1a3b4     3C 00 90 FD | 	jmp	#LR__2083
1a3b8                 | LR__2079
1a3b8     18 4E 05 F1 | 	add	fp, #24
1a3bc     A7 0C 68 FC | 	wrlong	#6, fp
1a3c0     18 4E 85 F1 | 	sub	fp, #24
1a3c4     2C 00 90 FD | 	jmp	#LR__2083
1a3c8                 | LR__2080
1a3c8     18 4E 05 F1 | 	add	fp, #24
1a3cc     A7 10 68 FC | 	wrlong	#8, fp
1a3d0     18 4E 85 F1 | 	sub	fp, #24
1a3d4     1C 00 90 FD | 	jmp	#LR__2083
1a3d8                 | LR__2081
1a3d8     18 4E 05 F1 | 	add	fp, #24
1a3dc     A7 0A 68 FC | 	wrlong	#5, fp
1a3e0     18 4E 85 F1 | 	sub	fp, #24
1a3e4     0C 00 90 FD | 	jmp	#LR__2083
1a3e8                 | LR__2082
1a3e8     18 4E 05 F1 | 	add	fp, #24
1a3ec     A7 18 68 FC | 	wrlong	#12, fp
1a3f0     18 4E 85 F1 | 	sub	fp, #24
1a3f4                 | LR__2083
1a3f4                 | '     if esize=12 andalso t1.result.uresult<$80000 then
1a3f4     18 4E 05 F1 | 	add	fp, #24
1a3f8     A7 3C 02 FB | 	rdlong	local12, fp
1a3fc     18 4E 85 F1 | 	sub	fp, #24
1a400     0C 3C 0E F2 | 	cmp	local12, #12 wz
1a404     74 01 90 5D |  if_ne	jmp	#LR__2088
1a408     1C 4E 05 F1 | 	add	fp, #28
1a40c     A7 3E 02 FB | 	rdlong	local13, fp
1a410     1C 4E 85 F1 | 	sub	fp, #28
1a414     00 04 00 FF 
1a418     00 3E 16 F2 | 	cmp	local13, ##524288 wc
1a41c     5C 01 90 3D |  if_ae	jmp	#LR__2088
1a420                 | '       if r=result_int then lpoke t1.result.uresult, val%(args(i))
1a420     52 00 00 FF 
1a424     10 E5 05 F1 | 	add	objptr, ##42256
1a428     F2 3C 02 FB | 	rdlong	local12, objptr
1a42c     52 00 00 FF 
1a430     10 E5 85 F1 | 	sub	objptr, ##42256
1a434     1C 3C 0E F2 | 	cmp	local12, #28 wz
1a438     38 00 90 5D |  if_ne	jmp	#LR__2084
1a43c     1C 4E 05 F1 | 	add	fp, #28
1a440     A7 3C 02 FB | 	rdlong	local12, fp
1a444     14 4F 05 F1 | 	add	fp, #276
1a448     A7 3E 02 FB | 	rdlong	local13, fp
1a44c     1F 45 02 F6 | 	mov	local16, local13
1a450     02 44 66 F0 | 	shl	local16, #2
1a454     04 4F 85 F1 | 	sub	fp, #260
1a458     A7 42 02 F6 | 	mov	local15, fp
1a45c     A7 44 02 F1 | 	add	local16, fp
1a460     22 13 02 FB | 	rdlong	arg01, local16
1a464     00 14 06 F6 | 	mov	arg02, #0
1a468     2C 4E 85 F1 | 	sub	fp, #44
1a46c     D0 FE B0 FD | 	call	#__system____builtin_atoi
1a470     1E FB 61 FC | 	wrlong	result1, local12
1a474                 | LR__2084
1a474                 | '       if r=result_uint then lpoke t1.result.uresult, val%(args(i))
1a474     52 00 00 FF 
1a478     10 E5 05 F1 | 	add	objptr, ##42256
1a47c     F2 3C 02 FB | 	rdlong	local12, objptr
1a480     52 00 00 FF 
1a484     10 E5 85 F1 | 	sub	objptr, ##42256
1a488     1D 3C 0E F2 | 	cmp	local12, #29 wz
1a48c     38 00 90 5D |  if_ne	jmp	#LR__2085
1a490     1C 4E 05 F1 | 	add	fp, #28
1a494     A7 3C 02 FB | 	rdlong	local12, fp
1a498     14 4F 05 F1 | 	add	fp, #276
1a49c     A7 3E 02 FB | 	rdlong	local13, fp
1a4a0     1F 45 02 F6 | 	mov	local16, local13
1a4a4     02 44 66 F0 | 	shl	local16, #2
1a4a8     04 4F 85 F1 | 	sub	fp, #260
1a4ac     A7 42 02 F6 | 	mov	local15, fp
1a4b0     A7 44 02 F1 | 	add	local16, fp
1a4b4     22 13 02 FB | 	rdlong	arg01, local16
1a4b8     00 14 06 F6 | 	mov	arg02, #0
1a4bc     2C 4E 85 F1 | 	sub	fp, #44
1a4c0     7C FE B0 FD | 	call	#__system____builtin_atoi
1a4c4     1E FB 61 FC | 	wrlong	result1, local12
1a4c8                 | LR__2085
1a4c8                 | '       if r=result_float then fval=val(args(i)): lpoke t1.result.uresult,lpeek(varptr(fval))
1a4c8     52 00 00 FF 
1a4cc     10 E5 05 F1 | 	add	objptr, ##42256
1a4d0     F2 3C 02 FB | 	rdlong	local12, objptr
1a4d4     52 00 00 FF 
1a4d8     10 E5 85 F1 | 	sub	objptr, ##42256
1a4dc     1E 3C 0E F2 | 	cmp	local12, #30 wz
1a4e0     3C 00 90 5D |  if_ne	jmp	#LR__2086
1a4e4     30 4F 05 F1 | 	add	fp, #304
1a4e8     A7 3E 02 FB | 	rdlong	local13, fp
1a4ec     02 3E 66 F0 | 	shl	local13, #2
1a4f0     04 4F 85 F1 | 	sub	fp, #260
1a4f4     A7 44 02 F6 | 	mov	local16, fp
1a4f8     A7 3E 02 F1 | 	add	local13, fp
1a4fc     1F 13 02 FB | 	rdlong	arg01, local13
1a500     2C 4E 85 F1 | 	sub	fp, #44
1a504     CC FF B0 FD | 	call	#__system____builtin_atof
1a508     28 4E 05 F1 | 	add	fp, #40
1a50c     A7 FA 61 FC | 	wrlong	result1, fp
1a510     0C 4E 85 F1 | 	sub	fp, #12
1a514     A7 3C 02 FB | 	rdlong	local12, fp
1a518     1C 4E 85 F1 | 	sub	fp, #28
1a51c     1E FB 61 FC | 	wrlong	result1, local12
1a520                 | LR__2086
1a520                 | '       if r=result_string2 then lpoke t1.result.uresult,stringaddr
1a520     52 00 00 FF 
1a524     10 E5 05 F1 | 	add	objptr, ##42256
1a528     F2 3C 02 FB | 	rdlong	local12, objptr
1a52c     52 00 00 FF 
1a530     10 E5 85 F1 | 	sub	objptr, ##42256
1a534     2B 3C 0E F2 | 	cmp	local12, #43 wz
1a538     18 00 90 5D |  if_ne	jmp	#LR__2087
1a53c     1C 4E 05 F1 | 	add	fp, #28
1a540     A7 12 02 FB | 	rdlong	arg01, fp
1a544     0C 4E 85 F1 | 	sub	fp, #12
1a548     A7 14 02 FB | 	rdlong	arg02, fp
1a54c     10 4E 85 F1 | 	sub	fp, #16
1a550     09 15 62 FC | 	wrlong	arg02, arg01
1a554                 | LR__2087
1a554     1C 4E 05 F1 | 	add	fp, #28
1a558     A7 12 02 FB | 	rdlong	arg01, fp
1a55c     1C 4E 85 F1 | 	sub	fp, #28
1a560     08 12 06 F1 | 	add	arg01, #8
1a564     52 00 00 FF 
1a568     10 E5 05 F1 | 	add	objptr, ##42256
1a56c     F2 14 02 FB | 	rdlong	arg02, objptr
1a570     52 00 00 FF 
1a574     10 E5 85 F1 | 	sub	objptr, ##42256
1a578     09 15 62 FC | 	wrlong	arg02, arg01
1a57c                 | LR__2088
1a57c                 | '     if esize=12 andalso t1.result.uresult>=$80000 then
1a57c     18 4E 05 F1 | 	add	fp, #24
1a580     A7 3C 02 FB | 	rdlong	local12, fp
1a584     18 4E 85 F1 | 	sub	fp, #24
1a588     0C 3C 0E F2 | 	cmp	local12, #12 wz
1a58c     94 01 90 5D |  if_ne	jmp	#LR__2093
1a590     1C 4E 05 F1 | 	add	fp, #28
1a594     A7 3E 02 FB | 	rdlong	local13, fp
1a598     1C 4E 85 F1 | 	sub	fp, #28
1a59c     00 04 00 FF 
1a5a0     00 3E 16 F2 | 	cmp	local13, ##524288 wc
1a5a4     7C 01 90 CD |  if_b	jmp	#LR__2093
1a5a8                 | '       if r=result_int then pslpoke t1.result.uresult, val%(args(i))
1a5a8     52 00 00 FF 
1a5ac     10 E5 05 F1 | 	add	objptr, ##42256
1a5b0     F2 3C 02 FB | 	rdlong	local12, objptr
1a5b4     52 00 00 FF 
1a5b8     10 E5 85 F1 | 	sub	objptr, ##42256
1a5bc     1C 3C 0E F2 | 	cmp	local12, #28 wz
1a5c0     40 00 90 5D |  if_ne	jmp	#LR__2089
1a5c4     1C 4E 05 F1 | 	add	fp, #28
1a5c8     A7 3C 02 FB | 	rdlong	local12, fp
1a5cc     14 4F 05 F1 | 	add	fp, #276
1a5d0     A7 3E 02 FB | 	rdlong	local13, fp
1a5d4     1F 45 02 F6 | 	mov	local16, local13
1a5d8     02 44 66 F0 | 	shl	local16, #2
1a5dc     04 4F 85 F1 | 	sub	fp, #260
1a5e0     A7 42 02 F6 | 	mov	local15, fp
1a5e4     A7 44 02 F1 | 	add	local16, fp
1a5e8     22 13 02 FB | 	rdlong	arg01, local16
1a5ec     00 14 06 F6 | 	mov	arg02, #0
1a5f0     2C 4E 85 F1 | 	sub	fp, #44
1a5f4     48 FD B0 FD | 	call	#__system____builtin_atoi
1a5f8     FD 14 02 F6 | 	mov	arg02, result1
1a5fc     1E 13 02 F6 | 	mov	arg01, local12
1a600     D0 8F B0 FD | 	call	#_pslpoke
1a604                 | LR__2089
1a604                 | '       if r=result_uint then pslpoke t1.result.uresult, val%(args(i))
1a604     52 00 00 FF 
1a608     10 E5 05 F1 | 	add	objptr, ##42256
1a60c     F2 3C 02 FB | 	rdlong	local12, objptr
1a610     52 00 00 FF 
1a614     10 E5 85 F1 | 	sub	objptr, ##42256
1a618     1D 3C 0E F2 | 	cmp	local12, #29 wz
1a61c     40 00 90 5D |  if_ne	jmp	#LR__2090
1a620     1C 4E 05 F1 | 	add	fp, #28
1a624     A7 3C 02 FB | 	rdlong	local12, fp
1a628     14 4F 05 F1 | 	add	fp, #276
1a62c     A7 3E 02 FB | 	rdlong	local13, fp
1a630     1F 45 02 F6 | 	mov	local16, local13
1a634     02 44 66 F0 | 	shl	local16, #2
1a638     04 4F 85 F1 | 	sub	fp, #260
1a63c     A7 42 02 F6 | 	mov	local15, fp
1a640     A7 44 02 F1 | 	add	local16, fp
1a644     22 13 02 FB | 	rdlong	arg01, local16
1a648     00 14 06 F6 | 	mov	arg02, #0
1a64c     2C 4E 85 F1 | 	sub	fp, #44
1a650     EC FC B0 FD | 	call	#__system____builtin_atoi
1a654     FD 14 02 F6 | 	mov	arg02, result1
1a658     1E 13 02 F6 | 	mov	arg01, local12
1a65c     74 8F B0 FD | 	call	#_pslpoke
1a660                 | LR__2090
1a660                 | '       if r=result_float then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
1a660     52 00 00 FF 
1a664     10 E5 05 F1 | 	add	objptr, ##42256
1a668     F2 3C 02 FB | 	rdlong	local12, objptr
1a66c     52 00 00 FF 
1a670     10 E5 85 F1 | 	sub	objptr, ##42256
1a674     1E 3C 0E F2 | 	cmp	local12, #30 wz
1a678     4C 00 90 5D |  if_ne	jmp	#LR__2091
1a67c     30 4F 05 F1 | 	add	fp, #304
1a680     A7 3E 02 FB | 	rdlong	local13, fp
1a684     02 3E 66 F0 | 	shl	local13, #2
1a688     04 4F 85 F1 | 	sub	fp, #260
1a68c     A7 44 02 F6 | 	mov	local16, fp
1a690     A7 3E 02 F1 | 	add	local13, fp
1a694     1F 13 02 FB | 	rdlong	arg01, local13
1a698     2C 4E 85 F1 | 	sub	fp, #44
1a69c     34 FE B0 FD | 	call	#__system____builtin_atof
1a6a0     28 4E 05 F1 | 	add	fp, #40
1a6a4     A7 FA 61 FC | 	wrlong	result1, fp
1a6a8     0C 4E 85 F1 | 	sub	fp, #12
1a6ac     A7 3C 02 FB | 	rdlong	local12, fp
1a6b0     0C 4E 05 F1 | 	add	fp, #12
1a6b4     A7 12 02 F6 | 	mov	arg01, fp
1a6b8     28 4E 85 F1 | 	sub	fp, #40
1a6bc     09 15 02 FB | 	rdlong	arg02, arg01
1a6c0     1E 13 02 F6 | 	mov	arg01, local12
1a6c4     0C 8F B0 FD | 	call	#_pslpoke
1a6c8                 | LR__2091
1a6c8                 | '       if r=result_string2 then pslpoke t1.result.uresult,stringaddr
1a6c8     52 00 00 FF 
1a6cc     10 E5 05 F1 | 	add	objptr, ##42256
1a6d0     F2 3C 02 FB | 	rdlong	local12, objptr
1a6d4     52 00 00 FF 
1a6d8     10 E5 85 F1 | 	sub	objptr, ##42256
1a6dc     2B 3C 0E F2 | 	cmp	local12, #43 wz
1a6e0     18 00 90 5D |  if_ne	jmp	#LR__2092
1a6e4     1C 4E 05 F1 | 	add	fp, #28
1a6e8     A7 12 02 FB | 	rdlong	arg01, fp
1a6ec     0C 4E 85 F1 | 	sub	fp, #12
1a6f0     A7 14 02 FB | 	rdlong	arg02, fp
1a6f4     10 4E 85 F1 | 	sub	fp, #16
1a6f8     D8 8E B0 FD | 	call	#_pslpoke
1a6fc                 | LR__2092
1a6fc     1C 4E 05 F1 | 	add	fp, #28
1a700     A7 12 02 FB | 	rdlong	arg01, fp
1a704     1C 4E 85 F1 | 	sub	fp, #28
1a708     08 12 06 F1 | 	add	arg01, #8
1a70c     52 00 00 FF 
1a710     10 E5 05 F1 | 	add	objptr, ##42256
1a714     F2 14 02 FB | 	rdlong	arg02, objptr
1a718     52 00 00 FF 
1a71c     10 E5 85 F1 | 	sub	objptr, ##42256
1a720     B0 8E B0 FD | 	call	#_pslpoke
1a724                 | LR__2093
1a724                 | '     if esize=5 andalso r=result_string2 then pslpoke t1.result.uresult,stringaddr
1a724     18 4E 05 F1 | 	add	fp, #24
1a728     A7 3C 02 FB | 	rdlong	local12, fp
1a72c     18 4E 85 F1 | 	sub	fp, #24
1a730     05 3C 0E F2 | 	cmp	local12, #5 wz
1a734     52 00 00 AF 
1a738     10 E5 05 A1 |  if_e	add	objptr, ##42256
1a73c     F2 40 02 AB |  if_e	rdlong	local14, objptr
1a740     52 00 00 AF 
1a744     10 E5 85 A1 |  if_e	sub	objptr, ##42256
1a748     2B 40 0E A2 |  if_e	cmp	local14, #43 wz
1a74c     18 00 90 5D |  if_ne	jmp	#LR__2094
1a750     1C 4E 05 F1 | 	add	fp, #28
1a754     A7 12 02 FB | 	rdlong	arg01, fp
1a758     0C 4E 85 F1 | 	sub	fp, #12
1a75c     A7 14 02 FB | 	rdlong	arg02, fp
1a760     10 4E 85 F1 | 	sub	fp, #16
1a764     6C 8E B0 FD | 	call	#_pslpoke
1a768                 | LR__2094
1a768                 | '     if esize=4 andalso r<>result_string2 then pslpoke t1.result.uresult,val%(args(i))
1a768     18 4E 05 F1 | 	add	fp, #24
1a76c     A7 3C 02 FB | 	rdlong	local12, fp
1a770     18 4E 85 F1 | 	sub	fp, #24
1a774     04 3C 0E F2 | 	cmp	local12, #4 wz
1a778     54 00 90 5D |  if_ne	jmp	#LR__2095
1a77c     52 00 00 FF 
1a780     10 E5 05 F1 | 	add	objptr, ##42256
1a784     F2 40 02 FB | 	rdlong	local14, objptr
1a788     52 00 00 FF 
1a78c     10 E5 85 F1 | 	sub	objptr, ##42256
1a790     2B 40 0E F2 | 	cmp	local14, #43 wz
1a794     38 00 90 AD |  if_e	jmp	#LR__2095
1a798     1C 4E 05 F1 | 	add	fp, #28
1a79c     A7 3C 02 FB | 	rdlong	local12, fp
1a7a0     14 4F 05 F1 | 	add	fp, #276
1a7a4     A7 44 02 FB | 	rdlong	local16, fp
1a7a8     02 44 66 F0 | 	shl	local16, #2
1a7ac     04 4F 85 F1 | 	sub	fp, #260
1a7b0     A7 44 02 F1 | 	add	local16, fp
1a7b4     22 13 02 FB | 	rdlong	arg01, local16
1a7b8     00 14 06 F6 | 	mov	arg02, #0
1a7bc     2C 4E 85 F1 | 	sub	fp, #44
1a7c0     7C FB B0 FD | 	call	#__system____builtin_atoi
1a7c4     FD 14 02 F6 | 	mov	arg02, result1
1a7c8     1E 13 02 F6 | 	mov	arg01, local12
1a7cc     04 8E B0 FD | 	call	#_pslpoke
1a7d0                 | LR__2095
1a7d0                 | '     if esize=2 andalso r<>result_string2 then psdpoke t1.result.uresult,val%(args(i))
1a7d0     18 4E 05 F1 | 	add	fp, #24
1a7d4     A7 3C 02 FB | 	rdlong	local12, fp
1a7d8     18 4E 85 F1 | 	sub	fp, #24
1a7dc     02 3C 0E F2 | 	cmp	local12, #2 wz
1a7e0     54 00 90 5D |  if_ne	jmp	#LR__2096
1a7e4     52 00 00 FF 
1a7e8     10 E5 05 F1 | 	add	objptr, ##42256
1a7ec     F2 40 02 FB | 	rdlong	local14, objptr
1a7f0     52 00 00 FF 
1a7f4     10 E5 85 F1 | 	sub	objptr, ##42256
1a7f8     2B 40 0E F2 | 	cmp	local14, #43 wz
1a7fc     38 00 90 AD |  if_e	jmp	#LR__2096
1a800     1C 4E 05 F1 | 	add	fp, #28
1a804     A7 3C 02 FB | 	rdlong	local12, fp
1a808     14 4F 05 F1 | 	add	fp, #276
1a80c     A7 44 02 FB | 	rdlong	local16, fp
1a810     02 44 66 F0 | 	shl	local16, #2
1a814     04 4F 85 F1 | 	sub	fp, #260
1a818     A7 44 02 F1 | 	add	local16, fp
1a81c     22 13 02 FB | 	rdlong	arg01, local16
1a820     00 14 06 F6 | 	mov	arg02, #0
1a824     2C 4E 85 F1 | 	sub	fp, #44
1a828     14 FB B0 FD | 	call	#__system____builtin_atoi
1a82c     FD 14 02 F6 | 	mov	arg02, result1
1a830     1E 13 02 F6 | 	mov	arg01, local12
1a834     E4 8D B0 FD | 	call	#_psdpoke
1a838                 | LR__2096
1a838                 | '     if esize=1 andalso r<>result_string2 then pspoke t1.result.uresult,val%(args(i))
1a838     18 4E 05 F1 | 	add	fp, #24
1a83c     A7 3C 02 FB | 	rdlong	local12, fp
1a840     18 4E 85 F1 | 	sub	fp, #24
1a844     01 3C 0E F2 | 	cmp	local12, #1 wz
1a848     54 00 90 5D |  if_ne	jmp	#LR__2097
1a84c     52 00 00 FF 
1a850     10 E5 05 F1 | 	add	objptr, ##42256
1a854     F2 40 02 FB | 	rdlong	local14, objptr
1a858     52 00 00 FF 
1a85c     10 E5 85 F1 | 	sub	objptr, ##42256
1a860     2B 40 0E F2 | 	cmp	local14, #43 wz
1a864     38 00 90 AD |  if_e	jmp	#LR__2097
1a868     1C 4E 05 F1 | 	add	fp, #28
1a86c     A7 3C 02 FB | 	rdlong	local12, fp
1a870     14 4F 05 F1 | 	add	fp, #276
1a874     A7 44 02 FB | 	rdlong	local16, fp
1a878     02 44 66 F0 | 	shl	local16, #2
1a87c     04 4F 85 F1 | 	sub	fp, #260
1a880     A7 44 02 F1 | 	add	local16, fp
1a884     22 13 02 FB | 	rdlong	arg01, local16
1a888     00 14 06 F6 | 	mov	arg02, #0
1a88c     2C 4E 85 F1 | 	sub	fp, #44
1a890     AC FA B0 FD | 	call	#__system____builtin_atoi
1a894     FD 14 02 F6 | 	mov	arg02, result1
1a898     1E 13 02 F6 | 	mov	arg01, local12
1a89c     C4 8D B0 FD | 	call	#_pspoke
1a8a0                 | LR__2097
1a8a0                 | '     if esize=6 andalso r<>result_string2 then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
1a8a0     18 4E 05 F1 | 	add	fp, #24
1a8a4     A7 3C 02 FB | 	rdlong	local12, fp
1a8a8     18 4E 85 F1 | 	sub	fp, #24
1a8ac     06 3C 0E F2 | 	cmp	local12, #6 wz
1a8b0     64 00 90 5D |  if_ne	jmp	#LR__2098
1a8b4     52 00 00 FF 
1a8b8     10 E5 05 F1 | 	add	objptr, ##42256
1a8bc     F2 40 02 FB | 	rdlong	local14, objptr
1a8c0     52 00 00 FF 
1a8c4     10 E5 85 F1 | 	sub	objptr, ##42256
1a8c8     2B 40 0E F2 | 	cmp	local14, #43 wz
1a8cc     48 00 90 AD |  if_e	jmp	#LR__2098
1a8d0     30 4F 05 F1 | 	add	fp, #304
1a8d4     A7 3E 02 FB | 	rdlong	local13, fp
1a8d8     02 3E 66 F0 | 	shl	local13, #2
1a8dc     04 4F 85 F1 | 	sub	fp, #260
1a8e0     A7 3E 02 F1 | 	add	local13, fp
1a8e4     1F 13 02 FB | 	rdlong	arg01, local13
1a8e8     2C 4E 85 F1 | 	sub	fp, #44
1a8ec     E4 FB B0 FD | 	call	#__system____builtin_atof
1a8f0     28 4E 05 F1 | 	add	fp, #40
1a8f4     A7 FA 61 FC | 	wrlong	result1, fp
1a8f8     0C 4E 85 F1 | 	sub	fp, #12
1a8fc     A7 3C 02 FB | 	rdlong	local12, fp
1a900     0C 4E 05 F1 | 	add	fp, #12
1a904     A7 12 02 F6 | 	mov	arg01, fp
1a908     28 4E 85 F1 | 	sub	fp, #40
1a90c     09 15 02 FB | 	rdlong	arg02, arg01
1a910     1E 13 02 F6 | 	mov	arg01, local12
1a914     BC 8C B0 FD | 	call	#_pslpoke
1a918                 | LR__2098
1a918                 | LR__2099
1a918     30 4F 05 F1 | 	add	fp, #304
1a91c     A7 40 02 FB | 	rdlong	local14, fp
1a920     01 40 06 F1 | 	add	local14, #1
1a924     A7 40 62 FC | 	wrlong	local14, fp
1a928     30 4F 85 F1 | 	sub	fp, #304
1a92c     B8 F6 9F FD | 	jmp	#LR__2063
1a930                 | LR__2100
1a930                 | LR__2101
1a930     A7 F0 03 F6 | 	mov	ptra, fp
1a934     B2 00 A0 FD | 	call	#popregs_
1a938                 | _do_read_ret
1a938     2D 00 64 FD | 	ret
1a93c                 | 
1a93c                 | ' 
1a93c                 | ' '------------------- release
1a93c                 | ' 
1a93c                 | ' sub do_release
1a93c                 | _do_release
1a93c     00 4A 05 F6 | 	mov	COUNT_, #0
1a940     A8 00 A0 FD | 	call	#pushregs_
1a944     10 F0 07 F1 | 	add	ptra, #16
1a948     F4 2C BF FD | 	call	#_pop
1a94c     FF 14 02 F6 | 	mov	arg02, result3
1a950     A7 FA 61 FC | 	wrlong	result1, fp
1a954     04 4E 05 F1 | 	add	fp, #4
1a958     A7 FC 61 FC | 	wrlong	result2, fp
1a95c     04 4E 05 F1 | 	add	fp, #4
1a960     A7 14 62 FC | 	wrlong	arg02, fp
1a964     08 4E 85 F1 | 	sub	fp, #8
1a968     A7 12 02 F6 | 	mov	arg01, fp
1a96c     B4 2E BF FD | 	call	#_converttoint
1a970     0C 4E 05 F1 | 	add	fp, #12
1a974     A7 FA 61 FC | 	wrlong	result1, fp
1a978                 | ' 
1a978                 | ' t1=pop()
1a978                 | ' channel=converttoint(t1)
1a978                 | ' if channel>=0 andalso channel<=7 then lpoke base+64*channel+44,255  
1a978     0C 4E 85 F1 | 	sub	fp, #12
1a97c     00 FA 55 F2 | 	cmps	result1, #0 wc
1a980     44 00 90 CD |  if_b	jmp	#LR__2110
1a984     0C 4E 05 F1 | 	add	fp, #12
1a988     A7 14 02 FB | 	rdlong	arg02, fp
1a98c     0C 4E 85 F1 | 	sub	fp, #12
1a990     08 14 56 F2 | 	cmps	arg02, #8 wc
1a994     30 00 90 3D |  if_ae	jmp	#LR__2110
1a998     37 00 00 FF 
1a99c     10 E4 05 F1 | 	add	objptr, ##28176
1a9a0     F2 12 02 FB | 	rdlong	arg01, objptr
1a9a4     37 00 00 FF 
1a9a8     10 E4 85 F1 | 	sub	objptr, ##28176
1a9ac     0C 4E 05 F1 | 	add	fp, #12
1a9b0     A7 14 02 FB | 	rdlong	arg02, fp
1a9b4     0C 4E 85 F1 | 	sub	fp, #12
1a9b8     06 14 66 F0 | 	shl	arg02, #6
1a9bc     0A 13 02 F1 | 	add	arg01, arg02
1a9c0     2C 12 06 F1 | 	add	arg01, #44
1a9c4     09 FF 69 FC | 	wrlong	#255, arg01
1a9c8                 | LR__2110
1a9c8     A7 F0 03 F6 | 	mov	ptra, fp
1a9cc     B2 00 A0 FD | 	call	#popregs_
1a9d0                 | _do_release_ret
1a9d0     2D 00 64 FD | 	ret
1a9d4                 | 
1a9d4                 | ' 
1a9d4                 | ' '------------------- restore
1a9d4                 | ' 
1a9d4                 | ' sub do_restore()
1a9d4                 | _do_restore
1a9d4     4A 00 00 FF 
1a9d8     88 E4 05 F1 | 	add	objptr, ##38024
1a9dc     F2 00 02 FB | 	rdlong	_var01, objptr
1a9e0     06 00 00 FF 
1a9e4     A4 E4 05 F1 | 	add	objptr, ##3236
1a9e8     F2 00 62 FC | 	wrlong	_var01, objptr
1a9ec     BA 01 00 FF 
1a9f0     EB 00 06 F6 | 	mov	_var01, ##@LR__5983
1a9f4     01 00 00 FF 
1a9f8     B0 E5 05 F1 | 	add	objptr, ##944
1a9fc     F2 00 62 FC | 	wrlong	_var01, objptr
1aa00     52 00 00 FF 
1aa04     DC E4 85 F1 | 	sub	objptr, ##42204
1aa08                 | _do_restore_ret
1aa08     2D 00 64 FD | 	ret
1aa0c                 | 
1aa0c                 | ' 
1aa0c                 | ' '------------------- return
1aa0c                 | ' 
1aa0c                 | ' sub do_return()
1aa0c                 | _do_return
1aa0c                 | ' if gosubtop>0 then
1aa0c     50 00 00 FF 
1aa10     34 E5 05 F1 | 	add	objptr, ##41268
1aa14     F2 00 02 FB | 	rdlong	_var01, objptr
1aa18     50 00 00 FF 
1aa1c     34 E5 85 F1 | 	sub	objptr, ##41268
1aa20     01 00 56 F2 | 	cmps	_var01, #1 wc
1aa24     8C 00 90 CD |  if_b	jmp	#LR__2120
1aa28     50 00 00 FF 
1aa2c     34 E5 05 F1 | 	add	objptr, ##41268
1aa30     F2 00 02 FB | 	rdlong	_var01, objptr
1aa34     03 00 66 F0 | 	shl	_var01, #3
1aa38     03 00 00 FF 
1aa3c     88 E5 85 F1 | 	sub	objptr, ##1928
1aa40     F2 00 02 F1 | 	add	_var01, objptr
1aa44     00 01 02 FB | 	rdlong	_var01, _var01
1aa48     03 00 00 FF 
1aa4c     0C E5 05 F1 | 	add	objptr, ##1804
1aa50     F2 00 62 FC | 	wrlong	_var01, objptr
1aa54     7C E4 05 F1 | 	add	objptr, #124
1aa58     F2 00 02 FB | 	rdlong	_var01, objptr
1aa5c     03 00 66 F0 | 	shl	_var01, #3
1aa60     03 00 00 FF 
1aa64     88 E5 85 F1 | 	sub	objptr, ##1928
1aa68     F2 00 02 F1 | 	add	_var01, objptr
1aa6c     04 00 06 F1 | 	add	_var01, #4
1aa70     00 01 02 FB | 	rdlong	_var01, _var01
1aa74     03 00 00 FF 
1aa78     10 E5 05 F1 | 	add	objptr, ##1808
1aa7c     F2 00 62 FC | 	wrlong	_var01, objptr
1aa80     06 00 00 FF 
1aa84     40 E4 85 F1 | 	sub	objptr, ##3136
1aa88     F2 00 02 FB | 	rdlong	_var01, objptr
1aa8c     01 00 86 F1 | 	sub	_var01, #1
1aa90     04 E4 05 F1 | 	add	objptr, #4
1aa94     F2 00 62 FC | 	wrlong	_var01, objptr
1aa98     06 00 00 FF 
1aa9c     B4 E4 05 F1 | 	add	objptr, ##3252
1aaa0     F2 00 02 FB | 	rdlong	_var01, objptr
1aaa4     01 00 86 F1 | 	sub	_var01, #1
1aaa8     F2 00 62 FC | 	wrlong	_var01, objptr
1aaac     50 00 00 FF 
1aab0     34 E5 85 F1 | 	sub	objptr, ##41268
1aab4                 | LR__2120
1aab4                 | _do_return_ret
1aab4     2D 00 64 FD | 	ret
1aab8                 | 
1aab8                 | ' 
1aab8                 | ' '------------------- right$
1aab8                 | ' 
1aab8                 | ' sub do_right
1aab8                 | _do_right
1aab8     00 4A 05 F6 | 	mov	COUNT_, #0
1aabc     A8 00 A0 FD | 	call	#pushregs_
1aac0     14 F0 07 F1 | 	add	ptra, #20
1aac4     4A 00 00 FF 
1aac8     80 E4 05 F1 | 	add	objptr, ##38016
1aacc     F2 16 02 FB | 	rdlong	arg03, objptr
1aad0     0B 15 02 F6 | 	mov	arg02, arg03
1aad4     01 14 66 F0 | 	shl	arg02, #1
1aad8     0B 15 02 F1 | 	add	arg02, arg03
1aadc     02 14 66 F0 | 	shl	arg02, #2
1aae0     03 00 00 FF 
1aae4     04 E4 85 F1 | 	sub	objptr, ##1540
1aae8     F2 14 02 F1 | 	add	arg02, objptr
1aaec     0A 17 02 FB | 	rdlong	arg03, arg02
1aaf0     0C 4E 05 F1 | 	add	fp, #12
1aaf4     A7 16 62 FC | 	wrlong	arg03, fp
1aaf8                 | ' 
1aaf8                 | ' numpar=compiledline(lineptr_e).result.uresult
1aaf8                 | ' if numpar<>2  then print "right$: "; : printerror(39) : return
1aaf8     0C 4E 85 F1 | 	sub	fp, #12
1aafc     02 16 0E F2 | 	cmp	arg03, #2 wz
1ab00     47 00 00 FF 
1ab04     7C E4 85 F1 | 	sub	objptr, ##36476
1ab08     40 00 90 AD |  if_e	jmp	#LR__2130
1ab0c     00 12 06 F6 | 	mov	arg01, #0
1ab10     64 20 B1 FD | 	call	#__system___getiolock_0611
1ab14     FD 12 02 F6 | 	mov	arg01, result1
1ab18     34 C3 B0 FD | 	call	#__system___lockmem
1ab1c     BA 01 00 FF 
1ab20     EC 14 06 F6 | 	mov	arg02, ##@LR__5984
1ab24     00 12 06 F6 | 	mov	arg01, #0
1ab28     00 16 06 F6 | 	mov	arg03, #0
1ab2c     14 D0 B0 FD | 	call	#__system___basic_print_string
1ab30     00 12 06 F6 | 	mov	arg01, #0
1ab34     40 20 B1 FD | 	call	#__system___getiolock_0611
1ab38     FD 00 68 FC | 	wrlong	#0, result1
1ab3c     27 12 06 F6 | 	mov	arg01, #39
1ab40     00 14 06 F6 | 	mov	arg02, #0
1ab44     EC 88 B0 FD | 	call	#_printerror
1ab48     EC 00 90 FD | 	jmp	#LR__2133
1ab4c                 | LR__2130
1ab4c     F0 2A BF FD | 	call	#_pop
1ab50     FF 16 02 F6 | 	mov	arg03, result3
1ab54     A7 FA 61 FC | 	wrlong	result1, fp
1ab58     04 4E 05 F1 | 	add	fp, #4
1ab5c     A7 FC 61 FC | 	wrlong	result2, fp
1ab60     04 4E 05 F1 | 	add	fp, #4
1ab64     A7 16 62 FC | 	wrlong	arg03, fp
1ab68     08 4E 85 F1 | 	sub	fp, #8
1ab6c     A7 12 02 F6 | 	mov	arg01, fp
1ab70     B0 2C BF FD | 	call	#_converttoint
1ab74     FD 16 02 F6 | 	mov	arg03, result1
1ab78     10 4E 05 F1 | 	add	fp, #16
1ab7c     A7 16 62 FC | 	wrlong	arg03, fp
1ab80     10 4E 85 F1 | 	sub	fp, #16
1ab84     B8 2A BF FD | 	call	#_pop
1ab88     FF 16 02 F6 | 	mov	arg03, result3
1ab8c     A7 FA 61 FC | 	wrlong	result1, fp
1ab90     04 4E 05 F1 | 	add	fp, #4
1ab94     A7 FC 61 FC | 	wrlong	result2, fp
1ab98     04 4E 05 F1 | 	add	fp, #4
1ab9c     A7 16 62 FC | 	wrlong	arg03, fp
1aba0                 | ' t1=pop() : arg=converttoint(t1)
1aba0                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
1aba0     08 4E 85 F1 | 	sub	fp, #8
1aba4     2B 16 0E F2 | 	cmp	arg03, #43 wz
1aba8     18 00 90 5D |  if_ne	jmp	#LR__2131
1abac     A7 12 02 FB | 	rdlong	arg01, fp
1abb0     04 2C BF FD | 	call	#_convertstring
1abb4     A7 FA 61 FC | 	wrlong	result1, fp
1abb8     08 4E 05 F1 | 	add	fp, #8
1abbc     A7 3E 68 FC | 	wrlong	#31, fp
1abc0     08 4E 85 F1 | 	sub	fp, #8
1abc4                 | LR__2131
1abc4                 | ' if t1.result_type<>result_string then print "right$: "; : printerror(15) : return 
1abc4     08 4E 05 F1 | 	add	fp, #8
1abc8     A7 16 02 FB | 	rdlong	arg03, fp
1abcc     08 4E 85 F1 | 	sub	fp, #8
1abd0     1F 16 0E F2 | 	cmp	arg03, #31 wz
1abd4     40 00 90 AD |  if_e	jmp	#LR__2132
1abd8     00 12 06 F6 | 	mov	arg01, #0
1abdc     98 1F B1 FD | 	call	#__system___getiolock_0611
1abe0     FD 12 02 F6 | 	mov	arg01, result1
1abe4     68 C2 B0 FD | 	call	#__system___lockmem
1abe8     BA 01 00 FF 
1abec     F5 14 06 F6 | 	mov	arg02, ##@LR__5985
1abf0     00 12 06 F6 | 	mov	arg01, #0
1abf4     00 16 06 F6 | 	mov	arg03, #0
1abf8     48 CF B0 FD | 	call	#__system___basic_print_string
1abfc     00 12 06 F6 | 	mov	arg01, #0
1ac00     74 1F B1 FD | 	call	#__system___getiolock_0611
1ac04     FD 00 68 FC | 	wrlong	#0, result1
1ac08     0F 12 06 F6 | 	mov	arg01, #15
1ac0c     00 14 06 F6 | 	mov	arg02, #0
1ac10     20 88 B0 FD | 	call	#_printerror
1ac14     20 00 90 FD | 	jmp	#LR__2133
1ac18                 | LR__2132
1ac18     A7 12 02 FB | 	rdlong	arg01, fp
1ac1c     10 4E 05 F1 | 	add	fp, #16
1ac20     A7 14 02 FB | 	rdlong	arg02, fp
1ac24     10 4E 85 F1 | 	sub	fp, #16
1ac28     28 E3 B0 FD | 	call	#__system__Right_S
1ac2c     A7 FA 61 FC | 	wrlong	result1, fp
1ac30     A7 12 02 F6 | 	mov	arg01, fp
1ac34     A0 2A BF FD | 	call	#_push
1ac38                 | LR__2133
1ac38     A7 F0 03 F6 | 	mov	ptra, fp
1ac3c     B2 00 A0 FD | 	call	#popregs_
1ac40                 | _do_right_ret
1ac40     2D 00 64 FD | 	ret
1ac44                 | 
1ac44                 | ' 
1ac44                 | ' '------------------- rnd
1ac44                 | ' 
1ac44                 | ' sub do_rnd
1ac44                 | _do_rnd
1ac44     01 4A 05 F6 | 	mov	COUNT_, #1
1ac48     A8 00 A0 FD | 	call	#pushregs_
1ac4c     10 F0 07 F1 | 	add	ptra, #16
1ac50     4A 00 00 FF 
1ac54     80 E4 05 F1 | 	add	objptr, ##38016
1ac58     F2 26 02 FB | 	rdlong	local01, objptr
1ac5c     13 17 02 F6 | 	mov	arg03, local01
1ac60     01 16 66 F0 | 	shl	arg03, #1
1ac64     13 17 02 F1 | 	add	arg03, local01
1ac68     02 16 66 F0 | 	shl	arg03, #2
1ac6c     03 00 00 FF 
1ac70     04 E4 85 F1 | 	sub	objptr, ##1540
1ac74     F2 16 02 F1 | 	add	arg03, objptr
1ac78     0B 17 02 FB | 	rdlong	arg03, arg03
1ac7c     0C 4E 05 F1 | 	add	fp, #12
1ac80     A7 16 62 FC | 	wrlong	arg03, fp
1ac84                 | ' 
1ac84                 | ' numpar=compiledline(lineptr_e).result.uresult
1ac84                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
1ac84     0C 4E 85 F1 | 	sub	fp, #12
1ac88     02 16 16 F2 | 	cmp	arg03, #2 wc
1ac8c     47 00 00 FF 
1ac90     7C E4 85 F1 | 	sub	objptr, ##36476
1ac94     40 00 90 CD |  if_b	jmp	#LR__2140
1ac98     00 12 06 F6 | 	mov	arg01, #0
1ac9c     D8 1E B1 FD | 	call	#__system___getiolock_0611
1aca0     FD 12 02 F6 | 	mov	arg01, result1
1aca4     A8 C1 B0 FD | 	call	#__system___lockmem
1aca8     BA 01 00 FF 
1acac     FE 14 06 F6 | 	mov	arg02, ##@LR__5986
1acb0     00 12 06 F6 | 	mov	arg01, #0
1acb4     00 16 06 F6 | 	mov	arg03, #0
1acb8     88 CE B0 FD | 	call	#__system___basic_print_string
1acbc     00 12 06 F6 | 	mov	arg01, #0
1acc0     B4 1E B1 FD | 	call	#__system___getiolock_0611
1acc4     FD 00 68 FC | 	wrlong	#0, result1
1acc8     27 12 06 F6 | 	mov	arg01, #39
1accc     00 14 06 F6 | 	mov	arg02, #0
1acd0     60 87 B0 FD | 	call	#_printerror
1acd4     30 01 90 FD | 	jmp	#LR__2147
1acd8                 | LR__2140
1acd8                 | ' if numpar=0 then
1acd8     0C 4E 05 F1 | 	add	fp, #12
1acdc     A7 FE 09 FB | 	rdlong	result3, fp wz
1ace0     0C 4E 85 F1 | 	sub	fp, #12
1ace4     20 00 90 5D |  if_ne	jmp	#LR__2141
1ace8     08 4E 05 F1 | 	add	fp, #8
1acec     A7 3A 68 FC | 	wrlong	#29, fp
1acf0     08 4E 85 F1 | 	sub	fp, #8
1acf4     1B FA 61 FD | 	getrnd	result1
1acf8     A7 FA 61 FC | 	wrlong	result1, fp
1acfc     A7 12 02 F6 | 	mov	arg01, fp
1ad00     D4 29 BF FD | 	call	#_push
1ad04     00 01 90 FD | 	jmp	#LR__2146
1ad08                 | LR__2141
1ad08     34 29 BF FD | 	call	#_pop
1ad0c     A7 FA 61 FC | 	wrlong	result1, fp
1ad10     04 4E 05 F1 | 	add	fp, #4
1ad14     A7 FC 61 FC | 	wrlong	result2, fp
1ad18     04 4E 05 F1 | 	add	fp, #4
1ad1c     A7 FE 61 FC | 	wrlong	result3, fp
1ad20                 | '   t1=pop()
1ad20                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
1ad20     08 4E 85 F1 | 	sub	fp, #8
1ad24     1C FE 0D F2 | 	cmp	result3, #28 wz
1ad28     08 4E 05 51 |  if_ne	add	fp, #8
1ad2c     A7 26 02 5B |  if_ne	rdlong	local01, fp
1ad30     08 4E 85 51 |  if_ne	sub	fp, #8
1ad34     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
1ad38     2C 00 90 5D |  if_ne	jmp	#LR__2142
1ad3c     1B FA 61 FD | 	getrnd	result1
1ad40     A7 26 02 FB | 	rdlong	local01, fp
1ad44     13 FB 11 FD | 	qdiv	result1, local01
1ad48     A7 12 02 F6 | 	mov	arg01, fp
1ad4c     19 26 62 FD | 	getqy	local01
1ad50     A7 26 62 FC | 	wrlong	local01, fp
1ad54     08 4E 05 F1 | 	add	fp, #8
1ad58     A7 3A 68 FC | 	wrlong	#29, fp
1ad5c     08 4E 85 F1 | 	sub	fp, #8
1ad60     74 29 BF FD | 	call	#_push
1ad64     A0 00 90 FD | 	jmp	#LR__2145
1ad68                 | LR__2142
1ad68     08 4E 05 F1 | 	add	fp, #8
1ad6c     A7 26 02 FB | 	rdlong	local01, fp
1ad70     08 4E 85 F1 | 	sub	fp, #8
1ad74     1E 26 0E F2 | 	cmp	local01, #30 wz
1ad78     48 00 90 5D |  if_ne	jmp	#LR__2143
1ad7c     A7 12 02 FB | 	rdlong	arg01, fp
1ad80     00 C0 24 FF 
1ad84     00 14 06 F6 | 	mov	arg02, ##1233125376
1ad88     40 F1 B0 FD | 	call	#__system___float_div
1ad8c     FD 26 02 F6 | 	mov	local01, result1
1ad90     1B 12 62 FD | 	getrnd	arg01
1ad94     74 13 06 F4 | 	bitl	arg01, #372
1ad98     28 EB B0 FD | 	call	#__system___float_fromuns
1ad9c     FD 14 02 F6 | 	mov	arg02, result1
1ada0     13 13 02 F6 | 	mov	arg01, local01
1ada4     20 EF B0 FD | 	call	#__system___float_mul
1ada8     A7 FA 61 FC | 	wrlong	result1, fp
1adac     08 4E 05 F1 | 	add	fp, #8
1adb0     A7 3C 68 FC | 	wrlong	#30, fp
1adb4     08 4E 85 F1 | 	sub	fp, #8
1adb8     A7 12 02 F6 | 	mov	arg01, fp
1adbc     18 29 BF FD | 	call	#_push
1adc0     44 00 90 FD | 	jmp	#LR__2144
1adc4                 | LR__2143
1adc4                 | '     print "rnd: "; : printerror(40) 
1adc4     00 12 06 F6 | 	mov	arg01, #0
1adc8     AC 1D B1 FD | 	call	#__system___getiolock_0611
1adcc     FD 12 02 F6 | 	mov	arg01, result1
1add0     7C C0 B0 FD | 	call	#__system___lockmem
1add4     BA 01 00 FF 
1add8     04 15 06 F6 | 	mov	arg02, ##@LR__5987
1addc     00 12 06 F6 | 	mov	arg01, #0
1ade0     00 16 06 F6 | 	mov	arg03, #0
1ade4     5C CD B0 FD | 	call	#__system___basic_print_string
1ade8     00 12 06 F6 | 	mov	arg01, #0
1adec     88 1D B1 FD | 	call	#__system___getiolock_0611
1adf0     FD 00 68 FC | 	wrlong	#0, result1
1adf4     28 12 06 F6 | 	mov	arg01, #40
1adf8     00 14 06 F6 | 	mov	arg02, #0
1adfc     34 86 B0 FD | 	call	#_printerror
1ae00     A7 12 02 F6 | 	mov	arg01, fp
1ae04     D0 28 BF FD | 	call	#_push
1ae08                 | LR__2144
1ae08                 | LR__2145
1ae08                 | LR__2146
1ae08                 | LR__2147
1ae08     A7 F0 03 F6 | 	mov	ptra, fp
1ae0c     B2 00 A0 FD | 	call	#popregs_
1ae10                 | _do_rnd_ret
1ae10     2D 00 64 FD | 	ret
1ae14                 | 
1ae14                 | ' 
1ae14                 | ' '-------------------- round
1ae14                 | ' 
1ae14                 | ' sub do_round
1ae14                 | _do_round
1ae14     00 4A 05 F6 | 	mov	COUNT_, #0
1ae18     A8 00 A0 FD | 	call	#pushregs_
1ae1c     0C F0 07 F1 | 	add	ptra, #12
1ae20     1C 28 BF FD | 	call	#_pop
1ae24     A7 FA 61 FC | 	wrlong	result1, fp
1ae28     04 4E 05 F1 | 	add	fp, #4
1ae2c     A7 FC 61 FC | 	wrlong	result2, fp
1ae30     04 4E 05 F1 | 	add	fp, #4
1ae34     A7 FE 61 FC | 	wrlong	result3, fp
1ae38     08 4E 85 F1 | 	sub	fp, #8
1ae3c     A7 12 02 F6 | 	mov	arg01, fp
1ae40     E0 29 BF FD | 	call	#_converttoint
1ae44     A7 FA 61 FC | 	wrlong	result1, fp
1ae48     08 4E 05 F1 | 	add	fp, #8
1ae4c     A7 38 68 FC | 	wrlong	#28, fp
1ae50     08 4E 85 F1 | 	sub	fp, #8
1ae54     A7 12 02 F6 | 	mov	arg01, fp
1ae58     7C 28 BF FD | 	call	#_push
1ae5c     A7 F0 03 F6 | 	mov	ptra, fp
1ae60     B2 00 A0 FD | 	call	#popregs_
1ae64                 | _do_round_ret
1ae64     2D 00 64 FD | 	ret
1ae68                 | 
1ae68                 | ' 
1ae68                 | ' '-------------------- rqpin
1ae68                 | ' 
1ae68                 | ' sub do_rqpin
1ae68                 | _do_rqpin
1ae68     00 4A 05 F6 | 	mov	COUNT_, #0
1ae6c     A8 00 A0 FD | 	call	#pushregs_
1ae70     0C F0 07 F1 | 	add	ptra, #12
1ae74     C8 27 BF FD | 	call	#_pop
1ae78     A7 FA 61 FC | 	wrlong	result1, fp
1ae7c     04 4E 05 F1 | 	add	fp, #4
1ae80     A7 FC 61 FC | 	wrlong	result2, fp
1ae84     04 4E 05 F1 | 	add	fp, #4
1ae88     A7 FE 61 FC | 	wrlong	result3, fp
1ae8c     08 4E 85 F1 | 	sub	fp, #8
1ae90     A7 12 02 F6 | 	mov	arg01, fp
1ae94     8C 29 BF FD | 	call	#_converttoint
1ae98     FD 12 02 F6 | 	mov	arg01, result1
1ae9c     00 FA 05 F6 | 	mov	result1, #0
1aea0     09 FB 81 FA | 	rqpin	result1, arg01
1aea4     52 00 00 FF 
1aea8     10 E5 05 F1 | 	add	objptr, ##42256
1aeac     F2 FA 61 FC | 	wrlong	result1, objptr
1aeb0     52 00 00 FF 
1aeb4     10 E5 85 F1 | 	sub	objptr, ##42256
1aeb8     08 4E 05 F1 | 	add	fp, #8
1aebc     A7 3A 68 FC | 	wrlong	#29, fp
1aec0     08 4E 85 F1 | 	sub	fp, #8
1aec4     A7 08 68 FC | 	wrlong	#4, fp
1aec8     A7 12 02 F6 | 	mov	arg01, fp
1aecc     08 28 BF FD | 	call	#_push
1aed0     A7 F0 03 F6 | 	mov	ptra, fp
1aed4     B2 00 A0 FD | 	call	#popregs_
1aed8                 | _do_rqpin_ret
1aed8     2D 00 64 FD | 	ret
1aedc                 | 
1aedc                 | ' 
1aedc                 | ' ' ------------------ run
1aedc                 | ' 
1aedc                 | ' sub do_run
1aedc                 | _do_run
1aedc     04 4A 05 F6 | 	mov	COUNT_, #4
1aee0     A8 00 A0 FD | 	call	#pushregs_
1aee4     4A 00 00 FF 
1aee8     80 E4 05 F1 | 	add	objptr, ##38016
1aeec     F2 26 02 FB | 	rdlong	local01, objptr
1aef0     06 00 00 FF 
1aef4     38 E4 05 F1 | 	add	objptr, ##3128
1aef8     F2 28 02 FB | 	rdlong	local02, objptr
1aefc     04 E4 05 F1 | 	add	objptr, #4
1af00     F2 2A 02 FB | 	rdlong	local03, objptr
1af04     13 19 02 F6 | 	mov	arg04, local01
1af08     0C 17 02 F6 | 	mov	arg03, arg04
1af0c     01 16 66 F0 | 	shl	arg03, #1
1af10     0C 17 02 F1 | 	add	arg03, arg04
1af14     02 16 66 F0 | 	shl	arg03, #2
1af18     09 00 00 FF 
1af1c     40 E4 85 F1 | 	sub	objptr, ##4672
1af20     F2 16 02 F1 | 	add	arg03, objptr
1af24     0B 15 02 FB | 	rdlong	arg02, arg03
1af28                 | ' 
1af28                 | ' r_lineptr_e=lineptr_e
1af28                 | ' r_runptr=runptr
1af28                 | ' r_runptr2=runptr2
1af28                 | ' 
1af28                 | ' numpar=compiledline(lineptr_e).result.uresult
1af28                 | ' if numpar=1 then do_load ' todo also run linenum so check the param
1af28     01 14 0E F2 | 	cmp	arg02, #1 wz
1af2c     47 00 00 FF 
1af30     7C E4 85 F1 | 	sub	objptr, ##36476
1af34     00 12 06 A6 |  if_e	mov	arg01, #0
1af38     60 A0 BF AD |  if_e	call	#_do_load
1af3c     4A 00 00 FF 
1af40     88 E4 05 F1 | 	add	objptr, ##38024
1af44     F2 18 02 FB | 	rdlong	arg04, objptr
1af48     06 00 00 FF 
1af4c     30 E4 05 F1 | 	add	objptr, ##3120
1af50     F2 18 62 FC | 	wrlong	arg04, objptr
1af54     04 E4 05 F1 | 	add	objptr, #4
1af58     F2 00 68 FC | 	wrlong	#0, objptr
1af5c     04 E4 05 F1 | 	add	objptr, #4
1af60     FF FF FF FF 
1af64     F2 FE 6B FC | 	wrlong	##-1, objptr
1af68     06 00 00 FF 
1af6c     38 E4 85 F1 | 	sub	objptr, ##3128
1af70     F2 18 02 FB | 	rdlong	arg04, objptr
1af74     06 00 00 FF 
1af78     A4 E4 05 F1 | 	add	objptr, ##3236
1af7c     F2 18 62 FC | 	wrlong	arg04, objptr
1af80     BA 01 00 FF 
1af84     0A 19 06 F6 | 	mov	arg04, ##@LR__5988
1af88     01 00 00 FF 
1af8c     B0 E5 05 F1 | 	add	objptr, ##944
1af90     F2 18 62 FC | 	wrlong	arg04, objptr
1af94                 | ' runptr=programstart : runptr2=0 : oldrunptr=-1 
1af94                 | ' dataptr=programstart : readline="" ' reset the data pointer
1af94                 | ' if inrun>0 then 
1af94     01 00 00 FF 
1af98     F0 E5 85 F1 | 	sub	objptr, ##1008
1af9c     F2 18 02 FB | 	rdlong	arg04, objptr
1afa0     50 00 00 FF 
1afa4     EC E4 85 F1 | 	sub	objptr, ##41196
1afa8     01 18 16 F2 | 	cmp	arg04, #1 wc
1afac     30 00 90 CD |  if_b	jmp	#LR__2150
1afb0     50 00 00 FF 
1afb4     F0 E4 05 F1 | 	add	objptr, ##41200
1afb8     F2 12 02 F6 | 	mov	arg01, objptr
1afbc     38 E4 85 F1 | 	sub	objptr, #56
1afc0     F2 14 02 FB | 	rdlong	arg02, objptr
1afc4     18 16 06 F6 | 	mov	arg03, #24
1afc8     44 00 00 FF 
1afcc     EC E5 85 F1 | 	sub	objptr, ##35308
1afd0     F4 B1 B0 FD | 	call	#_psram_spin2_read1
1afd4     0B 00 00 FF 
1afd8     CC E4 85 F1 | 	sub	objptr, ##5836
1afdc                 | '   psram.read1(varptr(runheader),runptr,24)  
1afdc                 | '   return
1afdc     0C 03 90 FD | 	jmp	#LR__2157
1afe0                 | LR__2150
1afe0     50 00 00 FF 
1afe4     EC E4 05 F1 | 	add	objptr, ##41196
1afe8     F2 02 68 FC | 	wrlong	#1, objptr
1afec     04 E4 05 F1 | 	add	objptr, #4
1aff0     F2 12 02 F6 | 	mov	arg01, objptr
1aff4     38 E4 85 F1 | 	sub	objptr, #56
1aff8     F2 14 02 FB | 	rdlong	arg02, objptr
1affc     18 16 06 F6 | 	mov	arg03, #24
1b000     44 00 00 FF 
1b004     EC E5 85 F1 | 	sub	objptr, ##35308
1b008     BC B1 B0 FD | 	call	#_psram_spin2_read1
1b00c                 | ' inrun=1
1b00c                 | ' psram.read1(varptr(runheader),runptr,24) 
1b00c                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
1b00c     45 00 00 FF 
1b010     24 E4 05 F1 | 	add	objptr, ##35364
1b014     F2 2C 02 FB | 	rdlong	local04, objptr
1b018     50 00 00 FF 
1b01c     F0 E4 85 F1 | 	sub	objptr, ##41200
1b020     FF FF 7F FF 
1b024     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
1b028     50 00 00 AF 
1b02c     EC E4 05 A1 |  if_e	add	objptr, ##41196
1b030     F2 00 68 AC |  if_e	wrlong	#0, objptr
1b034     50 00 00 AF 
1b038     EC E4 85 A1 |  if_e	sub	objptr, ##41196
1b03c     AC 02 90 AD |  if_e	jmp	#LR__2157
1b040                 | ' do 
1b040                 | LR__2151
1b040                 | '   if runptr<>oldrunptr then
1b040     50 00 00 FF 
1b044     B8 E4 05 F1 | 	add	objptr, ##41144
1b048     F2 2C 02 FB | 	rdlong	local04, objptr
1b04c     08 E4 05 F1 | 	add	objptr, #8
1b050     F2 18 02 FB | 	rdlong	arg04, objptr
1b054     50 00 00 FF 
1b058     C0 E4 85 F1 | 	sub	objptr, ##41152
1b05c     0C 2D 0A F2 | 	cmp	local04, arg04 wz
1b060     CC 00 90 AD |  if_e	jmp	#LR__2152
1b064     50 00 00 FF 
1b068     F0 E4 05 F1 | 	add	objptr, ##41200
1b06c     F2 12 02 F6 | 	mov	arg01, objptr
1b070     38 E4 85 F1 | 	sub	objptr, #56
1b074     F2 14 02 FB | 	rdlong	arg02, objptr
1b078     18 16 06 F6 | 	mov	arg03, #24
1b07c     44 00 00 FF 
1b080     EC E5 85 F1 | 	sub	objptr, ##35308
1b084     40 B1 B0 FD | 	call	#_psram_spin2_read1
1b088     3B 00 00 FF 
1b08c     B0 E5 05 F1 | 	add	objptr, ##30640
1b090     F2 12 02 F6 | 	mov	arg01, objptr
1b094     09 00 00 FF 
1b098     3C E4 05 F1 | 	add	objptr, ##4668
1b09c     F2 14 02 FB | 	rdlong	arg02, objptr
1b0a0     0B 00 00 FF 
1b0a4     54 E4 85 F1 | 	sub	objptr, ##5716
1b0a8     F2 2C 02 FB | 	rdlong	local04, objptr
1b0ac     01 2C 66 F0 | 	shl	local04, #1
1b0b0     16 15 02 F1 | 	add	arg02, local04
1b0b4     0B 00 00 FF 
1b0b8     94 E4 05 F1 | 	add	objptr, ##5780
1b0bc     F2 16 02 FB | 	rdlong	arg03, objptr
1b0c0     40 E4 85 F1 | 	sub	objptr, #64
1b0c4     F2 2C 02 FB | 	rdlong	local04, objptr
1b0c8     16 17 82 F1 | 	sub	arg03, local04
1b0cc     44 00 00 FF 
1b0d0     EC E5 85 F1 | 	sub	objptr, ##35308
1b0d4     F0 B0 B0 FD | 	call	#_psram_spin2_read1
1b0d8     45 00 00 FF 
1b0dc     2C E4 05 F1 | 	add	objptr, ##35372
1b0e0     F2 2C 02 FB | 	rdlong	local04, objptr
1b0e4     40 E4 85 F1 | 	sub	objptr, #64
1b0e8     F2 14 02 FB | 	rdlong	arg02, objptr
1b0ec     0A 2D 82 F1 | 	sub	local04, arg02
1b0f0     0B 00 00 FF 
1b0f4     54 E4 85 F1 | 	sub	objptr, ##5716
1b0f8     F2 14 02 FB | 	rdlong	arg02, objptr
1b0fc     0A 2D 12 FD | 	qdiv	local04, arg02
1b100     05 00 00 FF 
1b104     18 E4 05 F1 | 	add	objptr, ##2584
1b108     18 2C 62 FD | 	getqx	local04
1b10c     03 2C 86 F1 | 	sub	local04, #3
1b110     F2 2C 62 FC | 	wrlong	local04, objptr
1b114     06 00 00 FF 
1b118     3C E4 05 F1 | 	add	objptr, ##3132
1b11c     F2 2C 02 FB | 	rdlong	local04, objptr
1b120     08 E4 05 F1 | 	add	objptr, #8
1b124     F2 2C 62 FC | 	wrlong	local04, objptr
1b128     50 00 00 FF 
1b12c     C0 E4 85 F1 | 	sub	objptr, ##41152
1b130                 | LR__2152
1b130     50 00 00 FF 
1b134     04 E5 05 F1 | 	add	objptr, ##41220
1b138     F2 2C 02 FB | 	rdlong	local04, objptr
1b13c     4C E4 85 F1 | 	sub	objptr, #76
1b140     F2 2C 62 FC | 	wrlong	local04, objptr
1b144     04 E4 05 F1 | 	add	objptr, #4
1b148     F2 12 02 FB | 	rdlong	arg01, objptr
1b14c     50 00 00 FF 
1b150     BC E4 85 F1 | 	sub	objptr, ##41148
1b154     E4 23 BF FD | 	call	#_execute_line
1b158     50 00 00 FF 
1b15c     BC E4 05 F1 | 	add	objptr, ##41148
1b160     F2 FA 61 FC | 	wrlong	result1, objptr
1b164     04 E4 85 F1 | 	sub	objptr, #4
1b168     F2 2C 02 FB | 	rdlong	local04, objptr
1b16c     50 00 00 FF 
1b170     B8 E4 85 F1 | 	sub	objptr, ##41144
1b174     FF FF 3F FF 
1b178     FF 2D 0E F2 | 	cmp	local04, ##2147483647 wz
1b17c     4C 00 90 AD |  if_e	jmp	#LR__2155
1b180     E0 12 06 F6 | 	mov	arg01, #224
1b184     D0 B3 B0 FD | 	call	#_usbnew_spin2_keystate
1b188     00 FA 0D F2 | 	cmp	result1, #0 wz
1b18c     10 00 90 5D |  if_ne	jmp	#LR__2153
1b190     E4 12 06 F6 | 	mov	arg01, #228
1b194     C0 B3 B0 FD | 	call	#_usbnew_spin2_keystate
1b198     00 FA 0D F2 | 	cmp	result1, #0 wz
1b19c     10 00 90 AD |  if_e	jmp	#LR__2154
1b1a0                 | LR__2153
1b1a0     06 12 06 F6 | 	mov	arg01, #6
1b1a4     B0 B3 B0 FD | 	call	#_usbnew_spin2_keystate
1b1a8     00 FA 0D F2 | 	cmp	result1, #0 wz
1b1ac     1C 00 90 5D |  if_ne	jmp	#LR__2155
1b1b0                 | LR__2154
1b1b0     50 00 00 FF 
1b1b4     EC E4 05 F1 | 	add	objptr, ##41196
1b1b8     F2 2C 02 FB | 	rdlong	local04, objptr
1b1bc     50 00 00 FF 
1b1c0     EC E4 85 F1 | 	sub	objptr, ##41196
1b1c4     02 2C 0E F2 | 	cmp	local04, #2 wz
1b1c8     74 FE 9F 5D |  if_ne	jmp	#LR__2151
1b1cc                 | LR__2155
1b1cc                 | '   ''do whatever kbm.peek_latest_key()=$106 
1b1cc                 | ' if runptr<>$7FFF_FFFF andalso inrun=1 then 
1b1cc     50 00 00 FF 
1b1d0     B8 E4 05 F1 | 	add	objptr, ##41144
1b1d4     F2 2C 02 FB | 	rdlong	local04, objptr
1b1d8     50 00 00 FF 
1b1dc     B8 E4 85 F1 | 	sub	objptr, ##41144
1b1e0     FF FF 3F FF 
1b1e4     FF 2D 0E F2 | 	cmp	local04, ##2147483647 wz
1b1e8     AC 00 90 AD |  if_e	jmp	#LR__2156
1b1ec     50 00 00 FF 
1b1f0     EC E4 05 F1 | 	add	objptr, ##41196
1b1f4     F2 2C 02 FB | 	rdlong	local04, objptr
1b1f8     50 00 00 FF 
1b1fc     EC E4 85 F1 | 	sub	objptr, ##41196
1b200     01 2C 0E F2 | 	cmp	local04, #1 wz
1b204     90 00 90 5D |  if_ne	jmp	#LR__2156
1b208                 | '   print: print "Stopped at line ";runheader(0) 
1b208     00 12 06 F6 | 	mov	arg01, #0
1b20c     68 19 B1 FD | 	call	#__system___getiolock_0611
1b210     FD 12 02 F6 | 	mov	arg01, result1
1b214     38 BC B0 FD | 	call	#__system___lockmem
1b218     00 12 06 F6 | 	mov	arg01, #0
1b21c     0A 14 06 F6 | 	mov	arg02, #10
1b220     00 16 06 F6 | 	mov	arg03, #0
1b224     C4 C8 B0 FD | 	call	#__system___basic_print_char
1b228     00 12 06 F6 | 	mov	arg01, #0
1b22c     48 19 B1 FD | 	call	#__system___getiolock_0611
1b230     FD 00 68 FC | 	wrlong	#0, result1
1b234     00 12 06 F6 | 	mov	arg01, #0
1b238     3C 19 B1 FD | 	call	#__system___getiolock_0611
1b23c     FD 12 02 F6 | 	mov	arg01, result1
1b240     0C BC B0 FD | 	call	#__system___lockmem
1b244     BA 01 00 FF 
1b248     0B 15 06 F6 | 	mov	arg02, ##@LR__5989
1b24c     00 12 06 F6 | 	mov	arg01, #0
1b250     00 16 06 F6 | 	mov	arg03, #0
1b254     EC C8 B0 FD | 	call	#__system___basic_print_string
1b258     50 00 00 FF 
1b25c     F0 E4 05 F1 | 	add	objptr, ##41200
1b260     F2 14 02 FB | 	rdlong	arg02, objptr
1b264     50 00 00 FF 
1b268     F0 E4 85 F1 | 	sub	objptr, ##41200
1b26c     00 12 06 F6 | 	mov	arg01, #0
1b270     00 16 06 F6 | 	mov	arg03, #0
1b274     0A 18 06 F6 | 	mov	arg04, #10
1b278     4C C9 B0 FD | 	call	#__system___basic_print_unsigned
1b27c     00 12 06 F6 | 	mov	arg01, #0
1b280     0A 14 06 F6 | 	mov	arg02, #10
1b284     00 16 06 F6 | 	mov	arg03, #0
1b288     60 C8 B0 FD | 	call	#__system___basic_print_char
1b28c     00 12 06 F6 | 	mov	arg01, #0
1b290     E4 18 B1 FD | 	call	#__system___getiolock_0611
1b294     FD 00 68 FC | 	wrlong	#0, result1
1b298                 | LR__2156
1b298     50 00 00 FF 
1b29c     EC E4 05 F1 | 	add	objptr, ##41196
1b2a0     F2 00 68 FC | 	wrlong	#0, objptr
1b2a4     06 00 00 FF 
1b2a8     6C E4 85 F1 | 	sub	objptr, ##3180
1b2ac     F2 26 62 FC | 	wrlong	local01, objptr
1b2b0     06 00 00 FF 
1b2b4     38 E4 05 F1 | 	add	objptr, ##3128
1b2b8     F2 28 62 FC | 	wrlong	local02, objptr
1b2bc     04 E4 05 F1 | 	add	objptr, #4
1b2c0     F2 2A 62 FC | 	wrlong	local03, objptr
1b2c4     50 00 00 FF 
1b2c8     BC E4 85 F1 | 	sub	objptr, ##41148
1b2cc     11 12 06 F6 | 	mov	arg01, #17
1b2d0     08 14 06 F6 | 	mov	arg02, #8
1b2d4     10 16 06 F6 | 	mov	arg03, #16
1b2d8     A0 91 B0 FD | 	call	#_hg010b_spin2_setspritesize
1b2dc     10 12 06 F6 | 	mov	arg01, #16
1b2e0     20 14 06 F6 | 	mov	arg02, #32
1b2e4     20 16 06 F6 | 	mov	arg03, #32
1b2e8     90 91 B0 FD | 	call	#_hg010b_spin2_setspritesize
1b2ec                 | LR__2157
1b2ec     A7 F0 03 F6 | 	mov	ptra, fp
1b2f0     B2 00 A0 FD | 	call	#popregs_
1b2f4                 | _do_run_ret
1b2f4     2D 00 64 FD | 	ret
1b2f8                 | 
1b2f8                 | ' 
1b2f8                 | ' ' ------------------ save
1b2f8                 | ' 
1b2f8                 | ' sub do_save                        
1b2f8                 | _do_save
1b2f8     04 4A 05 F6 | 	mov	COUNT_, #4
1b2fc     A8 00 A0 FD | 	call	#pushregs_
1b300     B8 F0 07 F1 | 	add	ptra, #184
1b304     4A 00 00 FF 
1b308     80 E4 05 F1 | 	add	objptr, ##38016
1b30c     F2 26 02 FB | 	rdlong	local01, objptr
1b310     13 29 02 F6 | 	mov	local02, local01
1b314     01 28 66 F0 | 	shl	local02, #1
1b318     13 29 02 F1 | 	add	local02, local01
1b31c     02 28 66 F0 | 	shl	local02, #2
1b320     03 00 00 FF 
1b324     04 E4 85 F1 | 	sub	objptr, ##1540
1b328     F2 28 02 F1 | 	add	local02, objptr
1b32c     14 2B 02 FB | 	rdlong	local03, local02
1b330     10 4E 05 F1 | 	add	fp, #16
1b334     A7 2A 62 FC | 	wrlong	local03, fp
1b338                 | ' 
1b338                 | ' numpar=compiledline(lineptr_e).result.uresult
1b338                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
1b338     10 4E 85 F1 | 	sub	fp, #16
1b33c     01 2A 56 F2 | 	cmps	local03, #1 wc
1b340     47 00 00 FF 
1b344     7C E4 85 F1 | 	sub	objptr, ##36476
1b348     20 00 90 CD |  if_b	jmp	#LR__2160
1b34c     F0 22 BF FD | 	call	#_pop
1b350     A7 FA 61 FC | 	wrlong	result1, fp
1b354     04 4E 05 F1 | 	add	fp, #4
1b358     A7 FC 61 FC | 	wrlong	result2, fp
1b35c     04 4E 05 F1 | 	add	fp, #4
1b360     A7 FE 61 FC | 	wrlong	result3, fp
1b364     08 4E 85 F1 | 	sub	fp, #8
1b368     24 00 90 FD | 	jmp	#LR__2161
1b36c                 | LR__2160
1b36c     52 00 00 FF 
1b370     C4 E4 05 F1 | 	add	objptr, ##42180
1b374     F2 2A 02 FB | 	rdlong	local03, objptr
1b378     52 00 00 FF 
1b37c     C4 E4 85 F1 | 	sub	objptr, ##42180
1b380     A7 2A 62 FC | 	wrlong	local03, fp
1b384     08 4E 05 F1 | 	add	fp, #8
1b388     A7 3E 68 FC | 	wrlong	#31, fp
1b38c     08 4E 85 F1 | 	sub	fp, #8
1b390                 | LR__2161
1b390                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
1b390     4A 00 00 FF 
1b394     88 E4 05 F1 | 	add	objptr, ##38024
1b398     F2 12 02 FB | 	rdlong	arg01, objptr
1b39c     4A 00 00 FF 
1b3a0     88 E4 85 F1 | 	sub	objptr, ##38024
1b3a4     5C 83 B0 FD | 	call	#_pslpeek
1b3a8     FF FF 7F FF 
1b3ac     FF FB 0D F2 | 	cmp	result1, ##-1 wz
1b3b0     10 00 90 5D |  if_ne	jmp	#LR__2162
1b3b4     1B 12 06 F6 | 	mov	arg01, #27
1b3b8     00 14 06 F6 | 	mov	arg02, #0
1b3bc     74 80 B0 FD | 	call	#_printerror
1b3c0     CC 02 90 FD | 	jmp	#LR__2168
1b3c4                 | LR__2162
1b3c4                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
1b3c4     08 4E 05 F1 | 	add	fp, #8
1b3c8     A7 2A 02 FB | 	rdlong	local03, fp
1b3cc     08 4E 85 F1 | 	sub	fp, #8
1b3d0     2B 2A 0E F2 | 	cmp	local03, #43 wz
1b3d4     18 00 90 5D |  if_ne	jmp	#LR__2163
1b3d8     A7 12 02 FB | 	rdlong	arg01, fp
1b3dc     D8 23 BF FD | 	call	#_convertstring
1b3e0     A7 FA 61 FC | 	wrlong	result1, fp
1b3e4     08 4E 05 F1 | 	add	fp, #8
1b3e8     A7 3E 68 FC | 	wrlong	#31, fp
1b3ec     08 4E 85 F1 | 	sub	fp, #8
1b3f0                 | LR__2163
1b3f0                 | ' if t1.result_type=result_string then
1b3f0     08 4E 05 F1 | 	add	fp, #8
1b3f4     A7 2A 02 FB | 	rdlong	local03, fp
1b3f8     08 4E 85 F1 | 	sub	fp, #8
1b3fc     1F 2A 0E F2 | 	cmp	local03, #31 wz
1b400     8C 02 90 5D |  if_ne	jmp	#LR__2167
1b404                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
1b404     A7 12 02 FB | 	rdlong	arg01, fp
1b408     BA 01 00 FF 
1b40c     1C 15 06 F6 | 	mov	arg02, ##@LR__5990
1b410     64 BA B0 FD | 	call	#__system___string_cmp
1b414     00 FA 0D F2 | 	cmp	result1, #0 wz
1b418     52 00 00 AF 
1b41c     C4 E4 05 A1 |  if_e	add	objptr, ##42180
1b420     F2 2A 02 AB |  if_e	rdlong	local03, objptr
1b424     A7 2A 62 AC |  if_e	wrlong	local03, fp
1b428     52 00 00 AF 
1b42c     C4 E4 85 A1 |  if_e	sub	objptr, ##42180
1b430     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1b434     52 00 00 5F 
1b438     C4 E4 05 51 |  if_ne	add	objptr, ##42180
1b43c     F2 2A 62 5C |  if_ne	wrlong	local03, objptr
1b440     52 00 00 5F 
1b444     C4 E4 85 51 |  if_ne	sub	objptr, ##42180
1b448                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
1b448     09 12 06 F6 | 	mov	arg01, #9
1b44c     58 0D B1 FD | 	call	#__system__close
1b450     09 2A 06 F6 | 	mov	local03, #9
1b454     4A 00 00 FF 
1b458     94 E4 05 F1 | 	add	objptr, ##38036
1b45c     F2 12 02 FB | 	rdlong	arg01, objptr
1b460     4A 00 00 FF 
1b464     94 E4 85 F1 | 	sub	objptr, ##38036
1b468     BA 01 00 FF 
1b46c     1D 15 06 F6 | 	mov	arg02, ##@LR__5991
1b470     38 BA B0 FD | 	call	#__system___string_concat
1b474     FD 12 02 F6 | 	mov	arg01, result1
1b478     A7 14 02 FB | 	rdlong	arg02, fp
1b47c     2C BA B0 FD | 	call	#__system___string_concat
1b480     FD 14 02 F6 | 	mov	arg02, result1
1b484     15 13 02 F6 | 	mov	arg01, local03
1b488     0D 16 06 F6 | 	mov	arg03, #13
1b48c     C4 C5 B0 FD | 	call	#__system___basic_open_string
1b490     4A 00 00 FF 
1b494     88 E4 05 F1 | 	add	objptr, ##38024
1b498     F2 2A 02 FB | 	rdlong	local03, objptr
1b49c     4A 00 00 FF 
1b4a0     88 E4 85 F1 | 	sub	objptr, ##38024
1b4a4     B0 4E 05 F1 | 	add	fp, #176
1b4a8     A7 2A 62 FC | 	wrlong	local03, fp
1b4ac     B0 4E 85 F1 | 	sub	fp, #176
1b4b0                 | '   saveptr=programstart
1b4b0                 | '   do
1b4b0                 | LR__2164
1b4b0     14 4E 05 F1 | 	add	fp, #20
1b4b4     A7 12 02 F6 | 	mov	arg01, fp
1b4b8     9C 4E 05 F1 | 	add	fp, #156
1b4bc     A7 14 02 FB | 	rdlong	arg02, fp
1b4c0     B0 4E 85 F1 | 	sub	fp, #176
1b4c4     18 16 06 F6 | 	mov	arg03, #24
1b4c8     0B 00 00 FF 
1b4cc     CC E4 05 F1 | 	add	objptr, ##5836
1b4d0     F4 AC B0 FD | 	call	#_psram_spin2_read1
1b4d4     2C 4E 05 F1 | 	add	fp, #44
1b4d8     A7 12 02 F6 | 	mov	arg01, fp
1b4dc     10 4E 85 F1 | 	sub	fp, #16
1b4e0     A7 14 02 FB | 	rdlong	arg02, fp
1b4e4     04 4E 05 F1 | 	add	fp, #4
1b4e8     A7 16 02 FB | 	rdlong	arg03, fp
1b4ec     20 4E 85 F1 | 	sub	fp, #32
1b4f0     D4 AC B0 FD | 	call	#_psram_spin2_read1
1b4f4     0B 00 00 FF 
1b4f8     CC E4 85 F1 | 	sub	objptr, ##5836
1b4fc     BA 01 00 FF 
1b500     1F 2B 06 F6 | 	mov	local03, ##@LR__5992
1b504     AC 4E 05 F1 | 	add	fp, #172
1b508     A7 2A 62 FC | 	wrlong	local03, fp
1b50c                 | '     psram.read1(varptr(header(0)),saveptr,24)
1b50c                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
1b50c                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
1b50c     A0 4E 85 F1 | 	sub	fp, #160
1b510     A7 02 68 FC | 	wrlong	#1, fp
1b514     14 4E 05 F1 | 	add	fp, #20
1b518     A7 2C 02 FB | 	rdlong	local04, fp
1b51c     20 4E 85 F1 | 	sub	fp, #32
1b520     01 2C 06 F1 | 	add	local04, #1
1b524                 | LR__2165
1b524     0C 4E 05 F1 | 	add	fp, #12
1b528     A7 2A 02 FB | 	rdlong	local03, fp
1b52c     0C 4E 85 F1 | 	sub	fp, #12
1b530     16 2B 52 F2 | 	cmps	local03, local04 wc
1b534     54 00 90 3D |  if_ae	jmp	#LR__2166
1b538     AC 4E 05 F1 | 	add	fp, #172
1b53c     A7 26 02 FB | 	rdlong	local01, fp
1b540     A0 4E 85 F1 | 	sub	fp, #160
1b544     A7 2A 02 FB | 	rdlong	local03, fp
1b548     01 2A 86 F1 | 	sub	local03, #1
1b54c     20 4E 05 F1 | 	add	fp, #32
1b550     A7 2A 02 F1 | 	add	local03, fp
1b554     15 13 C2 FA | 	rdbyte	arg01, local03
1b558     2C 4E 85 F1 | 	sub	fp, #44
1b55c     30 DB B0 FD | 	call	#__system__Chr_S
1b560     FD 14 02 F6 | 	mov	arg02, result1
1b564     13 13 02 F6 | 	mov	arg01, local01
1b568     40 B9 B0 FD | 	call	#__system___string_concat
1b56c     AC 4E 05 F1 | 	add	fp, #172
1b570     A7 FA 61 FC | 	wrlong	result1, fp
1b574     A0 4E 85 F1 | 	sub	fp, #160
1b578     A7 2A 02 FB | 	rdlong	local03, fp
1b57c     01 2A 06 F1 | 	add	local03, #1
1b580     A7 2A 62 FC | 	wrlong	local03, fp
1b584     0C 4E 85 F1 | 	sub	fp, #12
1b588     98 FF 9F FD | 	jmp	#LR__2165
1b58c                 | LR__2166
1b58c                 | '     print #9, saveline$
1b58c     09 12 06 F6 | 	mov	arg01, #9
1b590     E4 15 B1 FD | 	call	#__system___getiolock_0611
1b594     FD 12 02 F6 | 	mov	arg01, result1
1b598     B4 B8 B0 FD | 	call	#__system___lockmem
1b59c     AC 4E 05 F1 | 	add	fp, #172
1b5a0     A7 14 02 FB | 	rdlong	arg02, fp
1b5a4     AC 4E 85 F1 | 	sub	fp, #172
1b5a8     09 12 06 F6 | 	mov	arg01, #9
1b5ac     00 16 06 F6 | 	mov	arg03, #0
1b5b0     90 C5 B0 FD | 	call	#__system___basic_print_string
1b5b4     09 12 06 F6 | 	mov	arg01, #9
1b5b8     0A 14 06 F6 | 	mov	arg02, #10
1b5bc     00 16 06 F6 | 	mov	arg03, #0
1b5c0     28 C5 B0 FD | 	call	#__system___basic_print_char
1b5c4     09 12 06 F6 | 	mov	arg01, #9
1b5c8     AC 15 B1 FD | 	call	#__system___getiolock_0611
1b5cc     FD 00 68 FC | 	wrlong	#0, result1
1b5d0     28 4E 05 F1 | 	add	fp, #40
1b5d4     A7 2A 02 FB | 	rdlong	local03, fp
1b5d8     88 4E 05 F1 | 	add	fp, #136
1b5dc     A7 2A 62 FC | 	wrlong	local03, fp
1b5e0     88 4E 85 F1 | 	sub	fp, #136
1b5e4     A7 2A 02 FB | 	rdlong	local03, fp
1b5e8     28 4E 85 F1 | 	sub	fp, #40
1b5ec     FF FF 3F FF 
1b5f0     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
1b5f4     B8 FE 9F 5D |  if_ne	jmp	#LR__2164
1b5f8                 | '   close #9  
1b5f8     09 12 06 F6 | 	mov	arg01, #9
1b5fc     A8 0B B1 FD | 	call	#__system__close
1b600                 | '   print "Saved as ";currentdir$+"/"+loadname
1b600     00 12 06 F6 | 	mov	arg01, #0
1b604     70 15 B1 FD | 	call	#__system___getiolock_0611
1b608     FD 12 02 F6 | 	mov	arg01, result1
1b60c     40 B8 B0 FD | 	call	#__system___lockmem
1b610     BA 01 00 FF 
1b614     20 15 06 F6 | 	mov	arg02, ##@LR__5993
1b618     00 12 06 F6 | 	mov	arg01, #0
1b61c     00 16 06 F6 | 	mov	arg03, #0
1b620     20 C5 B0 FD | 	call	#__system___basic_print_string
1b624     00 28 06 F6 | 	mov	local02, #0
1b628     4A 00 00 FF 
1b62c     94 E4 05 F1 | 	add	objptr, ##38036
1b630     F2 12 02 FB | 	rdlong	arg01, objptr
1b634     4A 00 00 FF 
1b638     94 E4 85 F1 | 	sub	objptr, ##38036
1b63c     BA 01 00 FF 
1b640     2A 15 06 F6 | 	mov	arg02, ##@LR__5994
1b644     64 B8 B0 FD | 	call	#__system___string_concat
1b648     FD 12 02 F6 | 	mov	arg01, result1
1b64c     52 00 00 FF 
1b650     C4 E4 05 F1 | 	add	objptr, ##42180
1b654     F2 14 02 FB | 	rdlong	arg02, objptr
1b658     52 00 00 FF 
1b65c     C4 E4 85 F1 | 	sub	objptr, ##42180
1b660     48 B8 B0 FD | 	call	#__system___string_concat
1b664     FD 14 02 F6 | 	mov	arg02, result1
1b668     14 13 02 F6 | 	mov	arg01, local02
1b66c     00 16 06 F6 | 	mov	arg03, #0
1b670     D0 C4 B0 FD | 	call	#__system___basic_print_string
1b674     00 12 06 F6 | 	mov	arg01, #0
1b678     0A 14 06 F6 | 	mov	arg02, #10
1b67c     00 16 06 F6 | 	mov	arg03, #0
1b680     68 C4 B0 FD | 	call	#__system___basic_print_char
1b684     00 12 06 F6 | 	mov	arg01, #0
1b688     EC 14 B1 FD | 	call	#__system___getiolock_0611
1b68c     FD 00 68 FC | 	wrlong	#0, result1
1b690                 | LR__2167
1b690                 | LR__2168
1b690     A7 F0 03 F6 | 	mov	ptra, fp
1b694     B2 00 A0 FD | 	call	#popregs_
1b698                 | _do_save_ret
1b698     2D 00 64 FD | 	ret
1b69c                 | 
1b69c                 | ' 
1b69c                 | ' ' ------------------ setcolor
1b69c                 | ' 
1b69c                 | ' sub do_setcolor
1b69c                 | _do_setcolor
1b69c     00 4A 05 F6 | 	mov	COUNT_, #0
1b6a0     A8 00 A0 FD | 	call	#pushregs_
1b6a4     20 F0 07 F1 | 	add	ptra, #32
1b6a8     4A 00 00 FF 
1b6ac     80 E4 05 F1 | 	add	objptr, ##38016
1b6b0     F2 18 02 FB | 	rdlong	arg04, objptr
1b6b4     0C 17 02 F6 | 	mov	arg03, arg04
1b6b8     01 16 66 F0 | 	shl	arg03, #1
1b6bc     0C 17 02 F1 | 	add	arg03, arg04
1b6c0     02 16 66 F0 | 	shl	arg03, #2
1b6c4     03 00 00 FF 
1b6c8     04 E4 85 F1 | 	sub	objptr, ##1540
1b6cc     F2 16 02 F1 | 	add	arg03, objptr
1b6d0     0B 19 02 FB | 	rdlong	arg04, arg03
1b6d4     1C 4E 05 F1 | 	add	fp, #28
1b6d8     A7 18 62 FC | 	wrlong	arg04, fp
1b6dc                 | ' 
1b6dc                 | ' numpar=compiledline(lineptr_e).result.uresult
1b6dc                 | ' 
1b6dc                 | ' if numpar=4 then
1b6dc     1C 4E 85 F1 | 	sub	fp, #28
1b6e0     04 18 0E F2 | 	cmp	arg04, #4 wz
1b6e4     47 00 00 FF 
1b6e8     7C E4 85 F1 | 	sub	objptr, ##36476
1b6ec     E0 00 90 5D |  if_ne	jmp	#LR__2170
1b6f0     4C 1F BF FD | 	call	#_pop
1b6f4     FF 18 02 F6 | 	mov	arg04, result3
1b6f8     A7 FA 61 FC | 	wrlong	result1, fp
1b6fc     04 4E 05 F1 | 	add	fp, #4
1b700     A7 FC 61 FC | 	wrlong	result2, fp
1b704     04 4E 05 F1 | 	add	fp, #4
1b708     A7 18 62 FC | 	wrlong	arg04, fp
1b70c     08 4E 85 F1 | 	sub	fp, #8
1b710     A7 12 02 F6 | 	mov	arg01, fp
1b714     0C 21 BF FD | 	call	#_converttoint
1b718     FD 18 02 F6 | 	mov	arg04, result1
1b71c     14 4E 05 F1 | 	add	fp, #20
1b720     A7 18 62 FC | 	wrlong	arg04, fp
1b724     14 4E 85 F1 | 	sub	fp, #20
1b728     14 1F BF FD | 	call	#_pop
1b72c     FF 18 02 F6 | 	mov	arg04, result3
1b730     A7 FA 61 FC | 	wrlong	result1, fp
1b734     04 4E 05 F1 | 	add	fp, #4
1b738     A7 FC 61 FC | 	wrlong	result2, fp
1b73c     04 4E 05 F1 | 	add	fp, #4
1b740     A7 18 62 FC | 	wrlong	arg04, fp
1b744     08 4E 85 F1 | 	sub	fp, #8
1b748     A7 12 02 F6 | 	mov	arg01, fp
1b74c     D4 20 BF FD | 	call	#_converttoint
1b750     FD 18 02 F6 | 	mov	arg04, result1
1b754     10 4E 05 F1 | 	add	fp, #16
1b758     A7 18 62 FC | 	wrlong	arg04, fp
1b75c     10 4E 85 F1 | 	sub	fp, #16
1b760     DC 1E BF FD | 	call	#_pop
1b764     FF 18 02 F6 | 	mov	arg04, result3
1b768     A7 FA 61 FC | 	wrlong	result1, fp
1b76c     04 4E 05 F1 | 	add	fp, #4
1b770     A7 FC 61 FC | 	wrlong	result2, fp
1b774     04 4E 05 F1 | 	add	fp, #4
1b778     A7 18 62 FC | 	wrlong	arg04, fp
1b77c     08 4E 85 F1 | 	sub	fp, #8
1b780     A7 12 02 F6 | 	mov	arg01, fp
1b784     9C 20 BF FD | 	call	#_converttoint
1b788     FD 18 02 F6 | 	mov	arg04, result1
1b78c     0C 4E 05 F1 | 	add	fp, #12
1b790     A7 18 62 FC | 	wrlong	arg04, fp
1b794     0C 4E 85 F1 | 	sub	fp, #12
1b798     A4 1E BF FD | 	call	#_pop
1b79c     FF 18 02 F6 | 	mov	arg04, result3
1b7a0     A7 FA 61 FC | 	wrlong	result1, fp
1b7a4     04 4E 05 F1 | 	add	fp, #4
1b7a8     A7 FC 61 FC | 	wrlong	result2, fp
1b7ac     04 4E 05 F1 | 	add	fp, #4
1b7b0     A7 18 62 FC | 	wrlong	arg04, fp
1b7b4     08 4E 85 F1 | 	sub	fp, #8
1b7b8     A7 12 02 F6 | 	mov	arg01, fp
1b7bc     64 20 BF FD | 	call	#_converttoint
1b7c0     18 4E 05 F1 | 	add	fp, #24
1b7c4     A7 FA 61 FC | 	wrlong	result1, fp
1b7c8     18 4E 85 F1 | 	sub	fp, #24
1b7cc     04 01 90 FD | 	jmp	#LR__2173
1b7d0                 | LR__2170
1b7d0     1C 4E 05 F1 | 	add	fp, #28
1b7d4     A7 18 02 FB | 	rdlong	arg04, fp
1b7d8     1C 4E 85 F1 | 	sub	fp, #28
1b7dc     02 18 0E F2 | 	cmp	arg04, #2 wz
1b7e0     A0 00 90 5D |  if_ne	jmp	#LR__2171
1b7e4     58 1E BF FD | 	call	#_pop
1b7e8     FF 18 02 F6 | 	mov	arg04, result3
1b7ec     A7 FA 61 FC | 	wrlong	result1, fp
1b7f0     04 4E 05 F1 | 	add	fp, #4
1b7f4     A7 FC 61 FC | 	wrlong	result2, fp
1b7f8     04 4E 05 F1 | 	add	fp, #4
1b7fc     A7 18 62 FC | 	wrlong	arg04, fp
1b800     08 4E 85 F1 | 	sub	fp, #8
1b804     A7 12 02 F6 | 	mov	arg01, fp
1b808     18 20 BF FD | 	call	#_converttoint
1b80c     18 4E 05 F1 | 	add	fp, #24
1b810     A7 FA 61 FC | 	wrlong	result1, fp
1b814     FD FA E1 F8 | 	getbyte	result1, result1, #0
1b818     04 4E 85 F1 | 	sub	fp, #4
1b81c     A7 FA 61 FC | 	wrlong	result1, fp
1b820     04 4E 05 F1 | 	add	fp, #4
1b824     A7 18 02 FB | 	rdlong	arg04, fp
1b828     0C 19 EA F8 | 	getbyte	arg04, arg04, #1
1b82c     08 4E 85 F1 | 	sub	fp, #8
1b830     A7 18 62 FC | 	wrlong	arg04, fp
1b834     08 4E 05 F1 | 	add	fp, #8
1b838     A7 18 02 FB | 	rdlong	arg04, fp
1b83c     0C 19 F2 F8 | 	getbyte	arg04, arg04, #2
1b840     0C 4E 85 F1 | 	sub	fp, #12
1b844     A7 18 62 FC | 	wrlong	arg04, fp
1b848     0C 4E 85 F1 | 	sub	fp, #12
1b84c     F0 1D BF FD | 	call	#_pop
1b850     FF 18 02 F6 | 	mov	arg04, result3
1b854     A7 FA 61 FC | 	wrlong	result1, fp
1b858     04 4E 05 F1 | 	add	fp, #4
1b85c     A7 FC 61 FC | 	wrlong	result2, fp
1b860     04 4E 05 F1 | 	add	fp, #4
1b864     A7 18 62 FC | 	wrlong	arg04, fp
1b868     08 4E 85 F1 | 	sub	fp, #8
1b86c     A7 12 02 F6 | 	mov	arg01, fp
1b870     B0 1F BF FD | 	call	#_converttoint
1b874     18 4E 05 F1 | 	add	fp, #24
1b878     A7 FA 61 FC | 	wrlong	result1, fp
1b87c     18 4E 85 F1 | 	sub	fp, #24
1b880     50 00 90 FD | 	jmp	#LR__2172
1b884                 | LR__2171
1b884                 | '   print "setcolor: "; : printerror(39,runheader(0)) : return  
1b884     00 12 06 F6 | 	mov	arg01, #0
1b888     EC 12 B1 FD | 	call	#__system___getiolock_0611
1b88c     FD 12 02 F6 | 	mov	arg01, result1
1b890     BC B5 B0 FD | 	call	#__system___lockmem
1b894     BA 01 00 FF 
1b898     2C 15 06 F6 | 	mov	arg02, ##@LR__5995
1b89c     00 12 06 F6 | 	mov	arg01, #0
1b8a0     00 16 06 F6 | 	mov	arg03, #0
1b8a4     9C C2 B0 FD | 	call	#__system___basic_print_string
1b8a8     00 12 06 F6 | 	mov	arg01, #0
1b8ac     C8 12 B1 FD | 	call	#__system___getiolock_0611
1b8b0     FD 00 68 FC | 	wrlong	#0, result1
1b8b4     50 00 00 FF 
1b8b8     F0 E4 05 F1 | 	add	objptr, ##41200
1b8bc     F2 14 02 FB | 	rdlong	arg02, objptr
1b8c0     50 00 00 FF 
1b8c4     F0 E4 85 F1 | 	sub	objptr, ##41200
1b8c8     27 12 06 F6 | 	mov	arg01, #39
1b8cc     64 7B B0 FD | 	call	#_printerror
1b8d0     28 00 90 FD | 	jmp	#LR__2174
1b8d4                 | LR__2172
1b8d4                 | LR__2173
1b8d4     18 4E 05 F1 | 	add	fp, #24
1b8d8     A7 12 02 FB | 	rdlong	arg01, fp
1b8dc     0C 4E 85 F1 | 	sub	fp, #12
1b8e0     A7 14 02 FB | 	rdlong	arg02, fp
1b8e4     04 4E 05 F1 | 	add	fp, #4
1b8e8     A7 16 02 FB | 	rdlong	arg03, fp
1b8ec     04 4E 05 F1 | 	add	fp, #4
1b8f0     A7 18 02 FB | 	rdlong	arg04, fp
1b8f4     14 4E 85 F1 | 	sub	fp, #20
1b8f8     A0 98 B0 FD | 	call	#_hg010b_spin2_setcolor
1b8fc                 | LR__2174
1b8fc     A7 F0 03 F6 | 	mov	ptra, fp
1b900     B2 00 A0 FD | 	call	#popregs_
1b904                 | _do_setcolor_ret
1b904     2D 00 64 FD | 	ret
1b908                 | 
1b908                 | ' 
1b908                 | ' ' ------------------ setdelay
1b908                 | ' 
1b908                 | ' sub do_setdelay
1b908                 | _do_setdelay
1b908     02 4A 05 F6 | 	mov	COUNT_, #2
1b90c     A8 00 A0 FD | 	call	#pushregs_
1b910     18 F0 07 F1 | 	add	ptra, #24
1b914     28 1D BF FD | 	call	#_pop
1b918     FD 12 02 F6 | 	mov	arg01, result1
1b91c     FE 26 02 F6 | 	mov	local01, result2
1b920     FF 28 02 F6 | 	mov	local02, result3
1b924     A7 12 62 FC | 	wrlong	arg01, fp
1b928     04 4E 05 F1 | 	add	fp, #4
1b92c     A7 26 62 FC | 	wrlong	local01, fp
1b930     04 4E 05 F1 | 	add	fp, #4
1b934     A7 28 62 FC | 	wrlong	local02, fp
1b938     08 4E 85 F1 | 	sub	fp, #8
1b93c     00 1D BF FD | 	call	#_pop
1b940     FD 28 02 F6 | 	mov	local02, result1
1b944     0C 4E 05 F1 | 	add	fp, #12
1b948     A7 28 62 FC | 	wrlong	local02, fp
1b94c     04 4E 05 F1 | 	add	fp, #4
1b950     A7 FC 61 FC | 	wrlong	result2, fp
1b954     04 4E 05 F1 | 	add	fp, #4
1b958     A7 FE 61 FC | 	wrlong	result3, fp
1b95c     08 4E 85 F1 | 	sub	fp, #8
1b960     A7 12 02 F6 | 	mov	arg01, fp
1b964     0C 4E 85 F1 | 	sub	fp, #12
1b968     B8 1E BF FD | 	call	#_converttoint
1b96c     FD 28 02 F6 | 	mov	local02, result1
1b970     14 27 02 F6 | 	mov	local01, local02
1b974     01 26 66 F0 | 	shl	local01, #1
1b978     14 27 02 F1 | 	add	local01, local02
1b97c     03 26 66 F0 | 	shl	local01, #3
1b980     14 00 00 FF 
1b984     38 E5 05 F1 | 	add	objptr, ##10552
1b988     F2 26 02 F1 | 	add	local01, objptr
1b98c     A7 12 02 F6 | 	mov	arg01, fp
1b990     14 00 00 FF 
1b994     38 E5 85 F1 | 	sub	objptr, ##10552
1b998     88 1E BF FD | 	call	#_converttoint
1b99c     06 26 06 F1 | 	add	local01, #6
1b9a0     13 FB 51 FC | 	wrword	result1, local01
1b9a4     A7 F0 03 F6 | 	mov	ptra, fp
1b9a8     B2 00 A0 FD | 	call	#popregs_
1b9ac                 | _do_setdelay_ret
1b9ac     2D 00 64 FD | 	ret
1b9b0                 | 
1b9b0                 | ' 
1b9b0                 | ' ' ------------------ setenv
1b9b0                 | ' 
1b9b0                 | ' sub do_setenv
1b9b0                 | _do_setenv
1b9b0     02 4A 05 F6 | 	mov	COUNT_, #2
1b9b4     A8 00 A0 FD | 	call	#pushregs_
1b9b8     18 F0 07 F1 | 	add	ptra, #24
1b9bc     80 1C BF FD | 	call	#_pop
1b9c0     FD 12 02 F6 | 	mov	arg01, result1
1b9c4     FE 26 02 F6 | 	mov	local01, result2
1b9c8     FF 28 02 F6 | 	mov	local02, result3
1b9cc     A7 12 62 FC | 	wrlong	arg01, fp
1b9d0     04 4E 05 F1 | 	add	fp, #4
1b9d4     A7 26 62 FC | 	wrlong	local01, fp
1b9d8     04 4E 05 F1 | 	add	fp, #4
1b9dc     A7 28 62 FC | 	wrlong	local02, fp
1b9e0     08 4E 85 F1 | 	sub	fp, #8
1b9e4     58 1C BF FD | 	call	#_pop
1b9e8     FD 28 02 F6 | 	mov	local02, result1
1b9ec     0C 4E 05 F1 | 	add	fp, #12
1b9f0     A7 28 62 FC | 	wrlong	local02, fp
1b9f4     04 4E 05 F1 | 	add	fp, #4
1b9f8     A7 FC 61 FC | 	wrlong	result2, fp
1b9fc     04 4E 05 F1 | 	add	fp, #4
1ba00     A7 FE 61 FC | 	wrlong	result3, fp
1ba04     08 4E 85 F1 | 	sub	fp, #8
1ba08     A7 12 02 F6 | 	mov	arg01, fp
1ba0c     0C 4E 85 F1 | 	sub	fp, #12
1ba10     10 1E BF FD | 	call	#_converttoint
1ba14     FD 28 02 F6 | 	mov	local02, result1
1ba18     14 27 02 F6 | 	mov	local01, local02
1ba1c     01 26 66 F0 | 	shl	local01, #1
1ba20     14 27 02 F1 | 	add	local01, local02
1ba24     03 26 66 F0 | 	shl	local01, #3
1ba28     14 00 00 FF 
1ba2c     38 E5 05 F1 | 	add	objptr, ##10552
1ba30     F2 26 02 F1 | 	add	local01, objptr
1ba34     A7 12 02 F6 | 	mov	arg01, fp
1ba38     14 00 00 FF 
1ba3c     38 E5 85 F1 | 	sub	objptr, ##10552
1ba40     E0 1D BF FD | 	call	#_converttoint
1ba44     05 26 06 F1 | 	add	local01, #5
1ba48     13 FB 41 FC | 	wrbyte	result1, local01
1ba4c     A7 F0 03 F6 | 	mov	ptra, fp
1ba50     B2 00 A0 FD | 	call	#popregs_
1ba54                 | _do_setenv_ret
1ba54     2D 00 64 FD | 	ret
1ba58                 | 
1ba58                 | ' 
1ba58                 | ' ' ------------------ setlen
1ba58                 | ' 
1ba58                 | ' sub do_setlen
1ba58                 | _do_setlen
1ba58     02 4A 05 F6 | 	mov	COUNT_, #2
1ba5c     A8 00 A0 FD | 	call	#pushregs_
1ba60     18 F0 07 F1 | 	add	ptra, #24
1ba64     D8 1B BF FD | 	call	#_pop
1ba68     FD 12 02 F6 | 	mov	arg01, result1
1ba6c     FE 26 02 F6 | 	mov	local01, result2
1ba70     FF 28 02 F6 | 	mov	local02, result3
1ba74     A7 12 62 FC | 	wrlong	arg01, fp
1ba78     04 4E 05 F1 | 	add	fp, #4
1ba7c     A7 26 62 FC | 	wrlong	local01, fp
1ba80     04 4E 05 F1 | 	add	fp, #4
1ba84     A7 28 62 FC | 	wrlong	local02, fp
1ba88     08 4E 85 F1 | 	sub	fp, #8
1ba8c     B0 1B BF FD | 	call	#_pop
1ba90     FD 28 02 F6 | 	mov	local02, result1
1ba94     0C 4E 05 F1 | 	add	fp, #12
1ba98     A7 28 62 FC | 	wrlong	local02, fp
1ba9c     04 4E 05 F1 | 	add	fp, #4
1baa0     A7 FC 61 FC | 	wrlong	result2, fp
1baa4     04 4E 05 F1 | 	add	fp, #4
1baa8     A7 FE 61 FC | 	wrlong	result3, fp
1baac     08 4E 85 F1 | 	sub	fp, #8
1bab0     A7 12 02 F6 | 	mov	arg01, fp
1bab4     0C 4E 85 F1 | 	sub	fp, #12
1bab8     68 1D BF FD | 	call	#_converttoint
1babc     FD 28 02 F6 | 	mov	local02, result1
1bac0     14 27 02 F6 | 	mov	local01, local02
1bac4     01 26 66 F0 | 	shl	local01, #1
1bac8     14 27 02 F1 | 	add	local01, local02
1bacc     03 26 66 F0 | 	shl	local01, #3
1bad0     14 00 00 FF 
1bad4     38 E5 05 F1 | 	add	objptr, ##10552
1bad8     F2 26 02 F1 | 	add	local01, objptr
1badc     A7 12 02 F6 | 	mov	arg01, fp
1bae0     14 00 00 FF 
1bae4     38 E5 85 F1 | 	sub	objptr, ##10552
1bae8     F4 1D BF FD | 	call	#_converttofloat
1baec     08 26 06 F1 | 	add	local01, #8
1baf0     13 FB 61 FC | 	wrlong	result1, local01
1baf4     A7 F0 03 F6 | 	mov	ptra, fp
1baf8     B2 00 A0 FD | 	call	#popregs_
1bafc                 | _do_setlen_ret
1bafc     2D 00 64 FD | 	ret
1bb00                 | 
1bb00                 | ' 
1bb00                 | ' ' ------------------ setpan
1bb00                 | ' 
1bb00                 | ' sub do_setpan
1bb00                 | _do_setpan
1bb00     02 4A 05 F6 | 	mov	COUNT_, #2
1bb04     A8 00 A0 FD | 	call	#pushregs_
1bb08     18 F0 07 F1 | 	add	ptra, #24
1bb0c     30 1B BF FD | 	call	#_pop
1bb10     FD 12 02 F6 | 	mov	arg01, result1
1bb14     FE 26 02 F6 | 	mov	local01, result2
1bb18     FF 28 02 F6 | 	mov	local02, result3
1bb1c     A7 12 62 FC | 	wrlong	arg01, fp
1bb20     04 4E 05 F1 | 	add	fp, #4
1bb24     A7 26 62 FC | 	wrlong	local01, fp
1bb28     04 4E 05 F1 | 	add	fp, #4
1bb2c     A7 28 62 FC | 	wrlong	local02, fp
1bb30     08 4E 85 F1 | 	sub	fp, #8
1bb34     08 1B BF FD | 	call	#_pop
1bb38     FD 28 02 F6 | 	mov	local02, result1
1bb3c     0C 4E 05 F1 | 	add	fp, #12
1bb40     A7 28 62 FC | 	wrlong	local02, fp
1bb44     04 4E 05 F1 | 	add	fp, #4
1bb48     A7 FC 61 FC | 	wrlong	result2, fp
1bb4c     04 4E 05 F1 | 	add	fp, #4
1bb50     A7 FE 61 FC | 	wrlong	result3, fp
1bb54     08 4E 85 F1 | 	sub	fp, #8
1bb58     A7 12 02 F6 | 	mov	arg01, fp
1bb5c     0C 4E 85 F1 | 	sub	fp, #12
1bb60     C0 1C BF FD | 	call	#_converttoint
1bb64     FD 28 02 F6 | 	mov	local02, result1
1bb68     14 27 02 F6 | 	mov	local01, local02
1bb6c     01 26 66 F0 | 	shl	local01, #1
1bb70     14 27 02 F1 | 	add	local01, local02
1bb74     03 26 66 F0 | 	shl	local01, #3
1bb78     14 00 00 FF 
1bb7c     38 E5 05 F1 | 	add	objptr, ##10552
1bb80     F2 26 02 F1 | 	add	local01, objptr
1bb84     A7 12 02 F6 | 	mov	arg01, fp
1bb88     14 00 00 FF 
1bb8c     38 E5 85 F1 | 	sub	objptr, ##10552
1bb90     4C 1D BF FD | 	call	#_converttofloat
1bb94     10 26 06 F1 | 	add	local01, #16
1bb98     13 FB 61 FC | 	wrlong	result1, local01
1bb9c     A7 F0 03 F6 | 	mov	ptra, fp
1bba0     B2 00 A0 FD | 	call	#popregs_
1bba4                 | _do_setpan_ret
1bba4     2D 00 64 FD | 	ret
1bba8                 | 
1bba8                 | ' 
1bba8                 | ' ' ------------------ setsustain
1bba8                 | ' 
1bba8                 | ' sub do_setsustain
1bba8                 | _do_setsustain
1bba8     02 4A 05 F6 | 	mov	COUNT_, #2
1bbac     A8 00 A0 FD | 	call	#pushregs_
1bbb0     18 F0 07 F1 | 	add	ptra, #24
1bbb4     88 1A BF FD | 	call	#_pop
1bbb8     FD 12 02 F6 | 	mov	arg01, result1
1bbbc     FE 26 02 F6 | 	mov	local01, result2
1bbc0     FF 28 02 F6 | 	mov	local02, result3
1bbc4     A7 12 62 FC | 	wrlong	arg01, fp
1bbc8     04 4E 05 F1 | 	add	fp, #4
1bbcc     A7 26 62 FC | 	wrlong	local01, fp
1bbd0     04 4E 05 F1 | 	add	fp, #4
1bbd4     A7 28 62 FC | 	wrlong	local02, fp
1bbd8     08 4E 85 F1 | 	sub	fp, #8
1bbdc     60 1A BF FD | 	call	#_pop
1bbe0     FD 28 02 F6 | 	mov	local02, result1
1bbe4     0C 4E 05 F1 | 	add	fp, #12
1bbe8     A7 28 62 FC | 	wrlong	local02, fp
1bbec     04 4E 05 F1 | 	add	fp, #4
1bbf0     A7 FC 61 FC | 	wrlong	result2, fp
1bbf4     04 4E 05 F1 | 	add	fp, #4
1bbf8     A7 FE 61 FC | 	wrlong	result3, fp
1bbfc     08 4E 85 F1 | 	sub	fp, #8
1bc00     A7 12 02 F6 | 	mov	arg01, fp
1bc04     0C 4E 85 F1 | 	sub	fp, #12
1bc08     18 1C BF FD | 	call	#_converttoint
1bc0c     FD 28 02 F6 | 	mov	local02, result1
1bc10     14 27 02 F6 | 	mov	local01, local02
1bc14     01 26 66 F0 | 	shl	local01, #1
1bc18     14 27 02 F1 | 	add	local01, local02
1bc1c     03 26 66 F0 | 	shl	local01, #3
1bc20     14 00 00 FF 
1bc24     38 E5 05 F1 | 	add	objptr, ##10552
1bc28     F2 26 02 F1 | 	add	local01, objptr
1bc2c     A7 12 02 F6 | 	mov	arg01, fp
1bc30     14 00 00 FF 
1bc34     38 E5 85 F1 | 	sub	objptr, ##10552
1bc38     E8 1B BF FD | 	call	#_converttoint
1bc3c     14 26 06 F1 | 	add	local01, #20
1bc40     13 FB 51 FC | 	wrword	result1, local01
1bc44     A7 F0 03 F6 | 	mov	ptra, fp
1bc48     B2 00 A0 FD | 	call	#popregs_
1bc4c                 | _do_setsustain_ret
1bc4c     2D 00 64 FD | 	ret
1bc50                 | 
1bc50                 | ' 
1bc50                 | ' ' ------------------ setvol
1bc50                 | ' 
1bc50                 | ' sub do_setvol
1bc50                 | _do_setvol
1bc50     02 4A 05 F6 | 	mov	COUNT_, #2
1bc54     A8 00 A0 FD | 	call	#pushregs_
1bc58     18 F0 07 F1 | 	add	ptra, #24
1bc5c     E0 19 BF FD | 	call	#_pop
1bc60     FD 12 02 F6 | 	mov	arg01, result1
1bc64     FE 26 02 F6 | 	mov	local01, result2
1bc68     FF 28 02 F6 | 	mov	local02, result3
1bc6c     A7 12 62 FC | 	wrlong	arg01, fp
1bc70     04 4E 05 F1 | 	add	fp, #4
1bc74     A7 26 62 FC | 	wrlong	local01, fp
1bc78     04 4E 05 F1 | 	add	fp, #4
1bc7c     A7 28 62 FC | 	wrlong	local02, fp
1bc80     08 4E 85 F1 | 	sub	fp, #8
1bc84     B8 19 BF FD | 	call	#_pop
1bc88     FD 28 02 F6 | 	mov	local02, result1
1bc8c     0C 4E 05 F1 | 	add	fp, #12
1bc90     A7 28 62 FC | 	wrlong	local02, fp
1bc94     04 4E 05 F1 | 	add	fp, #4
1bc98     A7 FC 61 FC | 	wrlong	result2, fp
1bc9c     04 4E 05 F1 | 	add	fp, #4
1bca0     A7 FE 61 FC | 	wrlong	result3, fp
1bca4     08 4E 85 F1 | 	sub	fp, #8
1bca8     A7 12 02 F6 | 	mov	arg01, fp
1bcac     0C 4E 85 F1 | 	sub	fp, #12
1bcb0     70 1B BF FD | 	call	#_converttoint
1bcb4     FD 28 02 F6 | 	mov	local02, result1
1bcb8     14 27 02 F6 | 	mov	local01, local02
1bcbc     01 26 66 F0 | 	shl	local01, #1
1bcc0     14 27 02 F1 | 	add	local01, local02
1bcc4     03 26 66 F0 | 	shl	local01, #3
1bcc8     14 00 00 FF 
1bccc     38 E5 05 F1 | 	add	objptr, ##10552
1bcd0     F2 26 02 F1 | 	add	local01, objptr
1bcd4     A7 12 02 F6 | 	mov	arg01, fp
1bcd8     14 00 00 FF 
1bcdc     38 E5 85 F1 | 	sub	objptr, ##10552
1bce0     FC 1B BF FD | 	call	#_converttofloat
1bce4     0C 26 06 F1 | 	add	local01, #12
1bce8     13 FB 61 FC | 	wrlong	result1, local01
1bcec     A7 F0 03 F6 | 	mov	ptra, fp
1bcf0     B2 00 A0 FD | 	call	#popregs_
1bcf4                 | _do_setvol_ret
1bcf4     2D 00 64 FD | 	ret
1bcf8                 | 
1bcf8                 | ' 
1bcf8                 | ' ' ------------------ setwave
1bcf8                 | ' 
1bcf8                 | ' sub do_setwave
1bcf8                 | _do_setwave
1bcf8     02 4A 05 F6 | 	mov	COUNT_, #2
1bcfc     A8 00 A0 FD | 	call	#pushregs_
1bd00     18 F0 07 F1 | 	add	ptra, #24
1bd04     38 19 BF FD | 	call	#_pop
1bd08     FD 12 02 F6 | 	mov	arg01, result1
1bd0c     FE 26 02 F6 | 	mov	local01, result2
1bd10     FF 28 02 F6 | 	mov	local02, result3
1bd14     A7 12 62 FC | 	wrlong	arg01, fp
1bd18     04 4E 05 F1 | 	add	fp, #4
1bd1c     A7 26 62 FC | 	wrlong	local01, fp
1bd20     04 4E 05 F1 | 	add	fp, #4
1bd24     A7 28 62 FC | 	wrlong	local02, fp
1bd28     08 4E 85 F1 | 	sub	fp, #8
1bd2c     10 19 BF FD | 	call	#_pop
1bd30     FD 28 02 F6 | 	mov	local02, result1
1bd34     0C 4E 05 F1 | 	add	fp, #12
1bd38     A7 28 62 FC | 	wrlong	local02, fp
1bd3c     04 4E 05 F1 | 	add	fp, #4
1bd40     A7 FC 61 FC | 	wrlong	result2, fp
1bd44     04 4E 05 F1 | 	add	fp, #4
1bd48     A7 FE 61 FC | 	wrlong	result3, fp
1bd4c     08 4E 85 F1 | 	sub	fp, #8
1bd50     A7 12 02 F6 | 	mov	arg01, fp
1bd54     0C 4E 85 F1 | 	sub	fp, #12
1bd58     C8 1A BF FD | 	call	#_converttoint
1bd5c     FD 28 02 F6 | 	mov	local02, result1
1bd60     14 27 02 F6 | 	mov	local01, local02
1bd64     01 26 66 F0 | 	shl	local01, #1
1bd68     14 27 02 F1 | 	add	local01, local02
1bd6c     03 26 66 F0 | 	shl	local01, #3
1bd70     14 00 00 FF 
1bd74     38 E5 05 F1 | 	add	objptr, ##10552
1bd78     F2 26 02 F1 | 	add	local01, objptr
1bd7c     A7 12 02 F6 | 	mov	arg01, fp
1bd80     14 00 00 FF 
1bd84     38 E5 85 F1 | 	sub	objptr, ##10552
1bd88     98 1A BF FD | 	call	#_converttoint
1bd8c     04 26 06 F1 | 	add	local01, #4
1bd90     13 FB 41 FC | 	wrbyte	result1, local01
1bd94     A7 F0 03 F6 | 	mov	ptra, fp
1bd98     B2 00 A0 FD | 	call	#popregs_
1bd9c                 | _do_setwave_ret
1bd9c     2D 00 64 FD | 	ret
1bda0                 | 
1bda0                 | ' 
1bda0                 | ' ' ------------------ shutup
1bda0                 | ' 
1bda0                 | ' sub do_shutup
1bda0                 | _do_shutup
1bda0     03 4A 05 F6 | 	mov	COUNT_, #3
1bda4     A8 00 A0 FD | 	call	#pushregs_
1bda8     18 F0 07 F1 | 	add	ptra, #24
1bdac     4A 00 00 FF 
1bdb0     80 E4 05 F1 | 	add	objptr, ##38016
1bdb4     F2 26 02 FB | 	rdlong	local01, objptr
1bdb8     13 29 02 F6 | 	mov	local02, local01
1bdbc     01 28 66 F0 | 	shl	local02, #1
1bdc0     13 29 02 F1 | 	add	local02, local01
1bdc4     02 28 66 F0 | 	shl	local02, #2
1bdc8     03 00 00 FF 
1bdcc     04 E4 85 F1 | 	sub	objptr, ##1540
1bdd0     F2 28 02 F1 | 	add	local02, objptr
1bdd4     14 2B 0A FB | 	rdlong	local03, local02 wz
1bdd8     14 4E 05 F1 | 	add	fp, #20
1bddc     A7 2A 62 FC | 	wrlong	local03, fp
1bde0                 | ' 
1bde0                 | ' numpar=compiledline(lineptr_e).result.uresult
1bde0                 | ' if numpar=0 then
1bde0     14 4E 85 F1 | 	sub	fp, #20
1bde4     47 00 00 FF 
1bde8     7C E4 85 F1 | 	sub	objptr, ##36476
1bdec     50 00 90 5D |  if_ne	jmp	#LR__2182
1bdf0                 | '   for i=0 to 7 : dpoke base+64*i+20,0 : next i
1bdf0     10 4E 05 F1 | 	add	fp, #16
1bdf4     A7 00 68 FC | 	wrlong	#0, fp
1bdf8     37 00 00 FF 
1bdfc     10 E4 05 F1 | 	add	objptr, ##28176
1be00     97 16 48 FB | 	callpa	#(@LR__2181-@LR__2180)>>2,fcache_load_ptr_
1be04                 | LR__2180
1be04     F2 12 02 FB | 	rdlong	arg01, objptr
1be08     A7 2A 02 FB | 	rdlong	local03, fp
1be0c     06 2A 66 F0 | 	shl	local03, #6
1be10     15 13 02 F1 | 	add	arg01, local03
1be14     14 12 06 F1 | 	add	arg01, #20
1be18     09 01 58 FC | 	wrword	#0, arg01
1be1c     A7 2A 02 FB | 	rdlong	local03, fp
1be20     01 2A 06 F1 | 	add	local03, #1
1be24     A7 2A 62 FC | 	wrlong	local03, fp
1be28     08 2A 56 F2 | 	cmps	local03, #8 wc
1be2c     D4 FF 9F CD |  if_b	jmp	#LR__2180
1be30                 | LR__2181
1be30     37 00 00 FF 
1be34     10 E4 85 F1 | 	sub	objptr, ##28176
1be38     10 4E 85 F1 | 	sub	fp, #16
1be3c     64 00 90 FD | 	jmp	#LR__2183
1be40                 | LR__2182
1be40     FC 17 BF FD | 	call	#_pop
1be44     FF 26 02 F6 | 	mov	local01, result3
1be48     A7 FA 61 FC | 	wrlong	result1, fp
1be4c     04 4E 05 F1 | 	add	fp, #4
1be50     A7 FC 61 FC | 	wrlong	result2, fp
1be54     04 4E 05 F1 | 	add	fp, #4
1be58     A7 26 62 FC | 	wrlong	local01, fp
1be5c     08 4E 85 F1 | 	sub	fp, #8
1be60     A7 12 02 F6 | 	mov	arg01, fp
1be64     BC 19 BF FD | 	call	#_converttoint
1be68     FD 2A 52 F6 | 	abs	local03, result1 wc
1be6c     07 2A 06 F5 | 	and	local03, #7
1be70     15 29 82 F6 | 	negc	local02, local03
1be74     0C 4E 05 F1 | 	add	fp, #12
1be78     A7 28 62 FC | 	wrlong	local02, fp
1be7c     37 00 00 FF 
1be80     10 E4 05 F1 | 	add	objptr, ##28176
1be84     F2 12 02 FB | 	rdlong	arg01, objptr
1be88     37 00 00 FF 
1be8c     10 E4 85 F1 | 	sub	objptr, ##28176
1be90     0C 4E 85 F1 | 	sub	fp, #12
1be94     06 28 66 F0 | 	shl	local02, #6
1be98     14 13 02 F1 | 	add	arg01, local02
1be9c     14 12 06 F1 | 	add	arg01, #20
1bea0     09 01 58 FC | 	wrword	#0, arg01
1bea4                 | LR__2183
1bea4     A7 F0 03 F6 | 	mov	ptra, fp
1bea8     B2 00 A0 FD | 	call	#popregs_
1beac                 | _do_shutup_ret
1beac     2D 00 64 FD | 	ret
1beb0                 | 
1beb0                 | ' 
1beb0                 | ' ' ------------------ sin
1beb0                 | ' 
1beb0                 | ' sub do_sin
1beb0                 | _do_sin
1beb0     01 4A 05 F6 | 	mov	COUNT_, #1
1beb4     A8 00 A0 FD | 	call	#pushregs_
1beb8     10 F0 07 F1 | 	add	ptra, #16
1bebc     4A 00 00 FF 
1bec0     80 E4 05 F1 | 	add	objptr, ##38016
1bec4     F2 26 02 FB | 	rdlong	local01, objptr
1bec8     13 17 02 F6 | 	mov	arg03, local01
1becc     01 16 66 F0 | 	shl	arg03, #1
1bed0     13 17 02 F1 | 	add	arg03, local01
1bed4     02 16 66 F0 | 	shl	arg03, #2
1bed8     03 00 00 FF 
1bedc     04 E4 85 F1 | 	sub	objptr, ##1540
1bee0     F2 16 02 F1 | 	add	arg03, objptr
1bee4     0B 17 02 FB | 	rdlong	arg03, arg03
1bee8     0C 4E 05 F1 | 	add	fp, #12
1beec     A7 16 62 FC | 	wrlong	arg03, fp
1bef0                 | ' 
1bef0                 | ' numpar=compiledline(lineptr_e).result.uresult
1bef0                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
1bef0     0C 4E 85 F1 | 	sub	fp, #12
1bef4     02 16 16 F2 | 	cmp	arg03, #2 wc
1bef8     47 00 00 FF 
1befc     7C E4 85 F1 | 	sub	objptr, ##36476
1bf00     0C 4E 05 C1 |  if_b	add	fp, #12
1bf04     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1bf08     0C 4E 85 C1 |  if_b	sub	fp, #12
1bf0c     40 00 90 4D |  if_c_and_nz	jmp	#LR__2190
1bf10     00 12 06 F6 | 	mov	arg01, #0
1bf14     60 0C B1 FD | 	call	#__system___getiolock_0611
1bf18     FD 12 02 F6 | 	mov	arg01, result1
1bf1c     30 AF B0 FD | 	call	#__system___lockmem
1bf20     BA 01 00 FF 
1bf24     37 15 06 F6 | 	mov	arg02, ##@LR__5996
1bf28     00 12 06 F6 | 	mov	arg01, #0
1bf2c     00 16 06 F6 | 	mov	arg03, #0
1bf30     10 BC B0 FD | 	call	#__system___basic_print_string
1bf34     00 12 06 F6 | 	mov	arg01, #0
1bf38     3C 0C B1 FD | 	call	#__system___getiolock_0611
1bf3c     FD 00 68 FC | 	wrlong	#0, result1
1bf40     27 12 06 F6 | 	mov	arg01, #39
1bf44     00 14 06 F6 | 	mov	arg02, #0
1bf48     E8 74 B0 FD | 	call	#_printerror
1bf4c     64 00 90 FD | 	jmp	#LR__2191
1bf50                 | LR__2190
1bf50     EC 16 BF FD | 	call	#_pop
1bf54     A7 FA 61 FC | 	wrlong	result1, fp
1bf58     04 4E 05 F1 | 	add	fp, #4
1bf5c     A7 FC 61 FC | 	wrlong	result2, fp
1bf60     04 4E 05 F1 | 	add	fp, #4
1bf64     A7 FE 61 FC | 	wrlong	result3, fp
1bf68     08 4E 85 F1 | 	sub	fp, #8
1bf6c     52 00 00 FF 
1bf70     A8 E4 05 F1 | 	add	objptr, ##42152
1bf74     F2 26 02 FB | 	rdlong	local01, objptr
1bf78     52 00 00 FF 
1bf7c     A8 E4 85 F1 | 	sub	objptr, ##42152
1bf80     A7 12 02 F6 | 	mov	arg01, fp
1bf84     58 19 BF FD | 	call	#_converttofloat
1bf88     FD 14 02 F6 | 	mov	arg02, result1
1bf8c     13 13 02 F6 | 	mov	arg01, local01
1bf90     34 DD B0 FD | 	call	#__system___float_mul
1bf94     FD 12 02 F6 | 	mov	arg01, result1
1bf98     8C E6 B0 FD | 	call	#__system____builtin_sinf
1bf9c     A7 FA 61 FC | 	wrlong	result1, fp
1bfa0     08 4E 05 F1 | 	add	fp, #8
1bfa4     A7 3C 68 FC | 	wrlong	#30, fp
1bfa8     08 4E 85 F1 | 	sub	fp, #8
1bfac     A7 12 02 F6 | 	mov	arg01, fp
1bfb0     24 17 BF FD | 	call	#_push
1bfb4                 | LR__2191
1bfb4     A7 F0 03 F6 | 	mov	ptra, fp
1bfb8     B2 00 A0 FD | 	call	#popregs_
1bfbc                 | _do_sin_ret
1bfbc     2D 00 64 FD | 	ret
1bfc0                 | 
1bfc0                 | ' 
1bfc0                 | ' ' ------------------ skip
1bfc0                 | ' ' A helper token for on-gosub: skips the rest of gosubs
1bfc0                 | ' 
1bfc0                 | ' sub do_skip
1bfc0                 | _do_skip
1bfc0     4A 00 00 FF 
1bfc4     80 E4 05 F1 | 	add	objptr, ##38016
1bfc8     F2 00 02 FB | 	rdlong	_var01, objptr
1bfcc     00 03 02 F6 | 	mov	_var02, _var01
1bfd0     01 02 66 F0 | 	shl	_var02, #1
1bfd4     00 03 02 F1 | 	add	_var02, _var01
1bfd8     02 02 66 F0 | 	shl	_var02, #2
1bfdc     03 00 00 FF 
1bfe0     04 E4 85 F1 | 	sub	objptr, ##1540
1bfe4     F2 02 02 F1 | 	add	_var02, objptr
1bfe8     01 03 02 FB | 	rdlong	_var02, _var02
1bfec     01 02 86 F1 | 	sub	_var02, #1
1bff0     03 00 00 FF 
1bff4     04 E4 05 F1 | 	add	objptr, ##1540
1bff8     F2 02 62 FC | 	wrlong	_var02, objptr
1bffc     4A 00 00 FF 
1c000     80 E4 85 F1 | 	sub	objptr, ##38016
1c004                 | _do_skip_ret
1c004     2D 00 64 FD | 	ret
1c008                 | 
1c008                 | ' 
1c008                 | ' ' ------------------ sprite
1c008                 | ' 
1c008                 | ' sub do_sprite
1c008                 | _do_sprite
1c008     00 4A 05 F6 | 	mov	COUNT_, #0
1c00c     A8 00 A0 FD | 	call	#pushregs_
1c010     30 F0 07 F1 | 	add	ptra, #48
1c014     28 16 BF FD | 	call	#_pop
1c018     FD 16 02 F6 | 	mov	arg03, result1
1c01c     FE 14 02 F6 | 	mov	arg02, result2
1c020     FF 12 02 F6 | 	mov	arg01, result3
1c024     18 4E 05 F1 | 	add	fp, #24
1c028     A7 16 62 FC | 	wrlong	arg03, fp
1c02c     04 4E 05 F1 | 	add	fp, #4
1c030     A7 14 62 FC | 	wrlong	arg02, fp
1c034     04 4E 05 F1 | 	add	fp, #4
1c038     A7 12 62 FC | 	wrlong	arg01, fp
1c03c     20 4E 85 F1 | 	sub	fp, #32
1c040     FC 15 BF FD | 	call	#_pop
1c044     FD 16 02 F6 | 	mov	arg03, result1
1c048     FE 14 02 F6 | 	mov	arg02, result2
1c04c     FF 12 02 F6 | 	mov	arg01, result3
1c050     0C 4E 05 F1 | 	add	fp, #12
1c054     A7 16 62 FC | 	wrlong	arg03, fp
1c058     04 4E 05 F1 | 	add	fp, #4
1c05c     A7 14 62 FC | 	wrlong	arg02, fp
1c060     04 4E 05 F1 | 	add	fp, #4
1c064     A7 12 62 FC | 	wrlong	arg01, fp
1c068     14 4E 85 F1 | 	sub	fp, #20
1c06c     D0 15 BF FD | 	call	#_pop
1c070     FF 16 02 F6 | 	mov	arg03, result3
1c074     A7 FA 61 FC | 	wrlong	result1, fp
1c078     04 4E 05 F1 | 	add	fp, #4
1c07c     A7 FC 61 FC | 	wrlong	result2, fp
1c080     04 4E 05 F1 | 	add	fp, #4
1c084     A7 16 62 FC | 	wrlong	arg03, fp
1c088     08 4E 85 F1 | 	sub	fp, #8
1c08c     A7 12 02 F6 | 	mov	arg01, fp
1c090     90 17 BF FD | 	call	#_converttoint
1c094     24 4E 05 F1 | 	add	fp, #36
1c098     A7 FA 61 FC | 	wrlong	result1, fp
1c09c     18 4E 85 F1 | 	sub	fp, #24
1c0a0     A7 12 02 F6 | 	mov	arg01, fp
1c0a4     0C 4E 85 F1 | 	sub	fp, #12
1c0a8     78 17 BF FD | 	call	#_converttoint
1c0ac     28 4E 05 F1 | 	add	fp, #40
1c0b0     A7 FA 61 FC | 	wrlong	result1, fp
1c0b4     10 4E 85 F1 | 	sub	fp, #16
1c0b8     A7 12 02 F6 | 	mov	arg01, fp
1c0bc     18 4E 85 F1 | 	sub	fp, #24
1c0c0     60 17 BF FD | 	call	#_converttoint
1c0c4     2C 4E 05 F1 | 	add	fp, #44
1c0c8     A7 FA 61 FC | 	wrlong	result1, fp
1c0cc     08 4E 85 F1 | 	sub	fp, #8
1c0d0     A7 12 02 FB | 	rdlong	arg01, fp
1c0d4     04 4E 05 F1 | 	add	fp, #4
1c0d8     A7 14 02 FB | 	rdlong	arg02, fp
1c0dc     FD 16 02 F6 | 	mov	arg03, result1
1c0e0     28 4E 85 F1 | 	sub	fp, #40
1c0e4     2C 83 B0 FD | 	call	#_hg010b_spin2_setspritepos
1c0e8     A7 F0 03 F6 | 	mov	ptra, fp
1c0ec     B2 00 A0 FD | 	call	#popregs_
1c0f0                 | _do_sprite_ret
1c0f0     2D 00 64 FD | 	ret
1c0f4                 | 
1c0f4                 | ' 
1c0f4                 | ' ' ------------------ sqr
1c0f4                 | ' 
1c0f4                 | ' sub do_sqr
1c0f4                 | _do_sqr
1c0f4     01 4A 05 F6 | 	mov	COUNT_, #1
1c0f8     A8 00 A0 FD | 	call	#pushregs_
1c0fc     10 F0 07 F1 | 	add	ptra, #16
1c100     4A 00 00 FF 
1c104     80 E4 05 F1 | 	add	objptr, ##38016
1c108     F2 26 02 FB | 	rdlong	local01, objptr
1c10c     13 17 02 F6 | 	mov	arg03, local01
1c110     01 16 66 F0 | 	shl	arg03, #1
1c114     13 17 02 F1 | 	add	arg03, local01
1c118     02 16 66 F0 | 	shl	arg03, #2
1c11c     03 00 00 FF 
1c120     04 E4 85 F1 | 	sub	objptr, ##1540
1c124     F2 16 02 F1 | 	add	arg03, objptr
1c128     0B 17 02 FB | 	rdlong	arg03, arg03
1c12c     0C 4E 05 F1 | 	add	fp, #12
1c130     A7 16 62 FC | 	wrlong	arg03, fp
1c134                 | ' 
1c134                 | ' numpar=compiledline(lineptr_e).result.uresult
1c134                 | ' if numpar>1 orelse numpar=0 then print "sqr: "; : printerror(39) : return
1c134     0C 4E 85 F1 | 	sub	fp, #12
1c138     02 16 16 F2 | 	cmp	arg03, #2 wc
1c13c     47 00 00 FF 
1c140     7C E4 85 F1 | 	sub	objptr, ##36476
1c144     0C 4E 05 C1 |  if_b	add	fp, #12
1c148     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1c14c     0C 4E 85 C1 |  if_b	sub	fp, #12
1c150     40 00 90 4D |  if_c_and_nz	jmp	#LR__2200
1c154     00 12 06 F6 | 	mov	arg01, #0
1c158     1C 0A B1 FD | 	call	#__system___getiolock_0611
1c15c     FD 12 02 F6 | 	mov	arg01, result1
1c160     EC AC B0 FD | 	call	#__system___lockmem
1c164     BA 01 00 FF 
1c168     3D 15 06 F6 | 	mov	arg02, ##@LR__5997
1c16c     00 12 06 F6 | 	mov	arg01, #0
1c170     00 16 06 F6 | 	mov	arg03, #0
1c174     CC B9 B0 FD | 	call	#__system___basic_print_string
1c178     00 12 06 F6 | 	mov	arg01, #0
1c17c     F8 09 B1 FD | 	call	#__system___getiolock_0611
1c180     FD 00 68 FC | 	wrlong	#0, result1
1c184     27 12 06 F6 | 	mov	arg01, #39
1c188     00 14 06 F6 | 	mov	arg02, #0
1c18c     A4 72 B0 FD | 	call	#_printerror
1c190     48 00 90 FD | 	jmp	#LR__2201
1c194                 | LR__2200
1c194     A8 14 BF FD | 	call	#_pop
1c198     FF 26 02 F6 | 	mov	local01, result3
1c19c     A7 FA 61 FC | 	wrlong	result1, fp
1c1a0     04 4E 05 F1 | 	add	fp, #4
1c1a4     A7 FC 61 FC | 	wrlong	result2, fp
1c1a8     04 4E 05 F1 | 	add	fp, #4
1c1ac     A7 26 62 FC | 	wrlong	local01, fp
1c1b0     08 4E 85 F1 | 	sub	fp, #8
1c1b4     A7 12 02 F6 | 	mov	arg01, fp
1c1b8     24 17 BF FD | 	call	#_converttofloat
1c1bc     FD 12 02 F6 | 	mov	arg01, result1
1c1c0     2C DA B0 FD | 	call	#__system___float_sqrt
1c1c4     A7 FA 61 FC | 	wrlong	result1, fp
1c1c8     08 4E 05 F1 | 	add	fp, #8
1c1cc     A7 3C 68 FC | 	wrlong	#30, fp
1c1d0     08 4E 85 F1 | 	sub	fp, #8
1c1d4     A7 12 02 F6 | 	mov	arg01, fp
1c1d8     FC 14 BF FD | 	call	#_push
1c1dc                 | LR__2201
1c1dc     A7 F0 03 F6 | 	mov	ptra, fp
1c1e0     B2 00 A0 FD | 	call	#popregs_
1c1e4                 | _do_sqr_ret
1c1e4     2D 00 64 FD | 	ret
1c1e8                 | 
1c1e8                 | ' 
1c1e8                 | ' ' ------------------ stick
1c1e8                 | ' 
1c1e8                 | ' sub do_stick
1c1e8                 | _do_stick
1c1e8     01 4A 05 F6 | 	mov	COUNT_, #1
1c1ec     A8 00 A0 FD | 	call	#pushregs_
1c1f0     10 F0 07 F1 | 	add	ptra, #16
1c1f4     4A 00 00 FF 
1c1f8     80 E4 05 F1 | 	add	objptr, ##38016
1c1fc     F2 26 02 FB | 	rdlong	local01, objptr
1c200     13 17 02 F6 | 	mov	arg03, local01
1c204     01 16 66 F0 | 	shl	arg03, #1
1c208     13 17 02 F1 | 	add	arg03, local01
1c20c     02 16 66 F0 | 	shl	arg03, #2
1c210     03 00 00 FF 
1c214     04 E4 85 F1 | 	sub	objptr, ##1540
1c218     F2 16 02 F1 | 	add	arg03, objptr
1c21c     0B 17 02 FB | 	rdlong	arg03, arg03
1c220     0C 4E 05 F1 | 	add	fp, #12
1c224     A7 16 62 FC | 	wrlong	arg03, fp
1c228                 | ' 
1c228                 | ' numpar=compiledline(lineptr_e).result.uresult
1c228                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
1c228     0C 4E 85 F1 | 	sub	fp, #12
1c22c     02 16 16 F2 | 	cmp	arg03, #2 wc
1c230     47 00 00 FF 
1c234     7C E4 85 F1 | 	sub	objptr, ##36476
1c238     40 00 90 CD |  if_b	jmp	#LR__2210
1c23c     00 12 06 F6 | 	mov	arg01, #0
1c240     34 09 B1 FD | 	call	#__system___getiolock_0611
1c244     FD 12 02 F6 | 	mov	arg01, result1
1c248     04 AC B0 FD | 	call	#__system___lockmem
1c24c     BA 01 00 FF 
1c250     43 15 06 F6 | 	mov	arg02, ##@LR__5998
1c254     00 12 06 F6 | 	mov	arg01, #0
1c258     00 16 06 F6 | 	mov	arg03, #0
1c25c     E4 B8 B0 FD | 	call	#__system___basic_print_string
1c260     00 12 06 F6 | 	mov	arg01, #0
1c264     10 09 B1 FD | 	call	#__system___getiolock_0611
1c268     FD 00 68 FC | 	wrlong	#0, result1
1c26c     27 12 06 F6 | 	mov	arg01, #39
1c270     00 14 06 F6 | 	mov	arg02, #0
1c274     BC 71 B0 FD | 	call	#_printerror
1c278     F0 00 90 FD | 	jmp	#LR__2214
1c27c                 | LR__2210
1c27c                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
1c27c     0C 4E 05 F1 | 	add	fp, #12
1c280     A7 FE 09 FB | 	rdlong	result3, fp wz
1c284     0C 4E 85 F1 | 	sub	fp, #12
1c288     30 00 90 5D |  if_ne	jmp	#LR__2211
1c28c     52 00 00 FF 
1c290     1C E4 05 F1 | 	add	objptr, ##42012
1c294     F2 26 02 FB | 	rdlong	local01, objptr
1c298     52 00 00 FF 
1c29c     1C E4 85 F1 | 	sub	objptr, ##42012
1c2a0     A7 26 62 FC | 	wrlong	local01, fp
1c2a4     08 4E 05 F1 | 	add	fp, #8
1c2a8     A7 3A 68 FC | 	wrlong	#29, fp
1c2ac     08 4E 85 F1 | 	sub	fp, #8
1c2b0     A7 12 02 F6 | 	mov	arg01, fp
1c2b4     20 14 BF FD | 	call	#_push
1c2b8     B0 00 90 FD | 	jmp	#LR__2214
1c2bc                 | LR__2211
1c2bc     80 13 BF FD | 	call	#_pop
1c2c0     A7 FA 61 FC | 	wrlong	result1, fp
1c2c4     04 4E 05 F1 | 	add	fp, #4
1c2c8     A7 FC 61 FC | 	wrlong	result2, fp
1c2cc     04 4E 05 F1 | 	add	fp, #4
1c2d0     A7 FE 61 FC | 	wrlong	result3, fp
1c2d4                 | ' t1=pop()
1c2d4                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
1c2d4     08 4E 85 F1 | 	sub	fp, #8
1c2d8     1C FE 0D F2 | 	cmp	result3, #28 wz
1c2dc     08 4E 05 51 |  if_ne	add	fp, #8
1c2e0     A7 26 02 5B |  if_ne	rdlong	local01, fp
1c2e4     08 4E 85 51 |  if_ne	sub	fp, #8
1c2e8     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
1c2ec     70 00 90 5D |  if_ne	jmp	#LR__2213
1c2f0     A7 26 02 FB | 	rdlong	local01, fp
1c2f4     52 00 00 FF 
1c2f8     08 E5 05 F1 | 	add	objptr, ##42248
1c2fc     F2 26 62 FC | 	wrlong	local01, objptr
1c300                 | '   q=t1.result.uresult
1c300                 | '   if q<7 then 
1c300     52 00 00 FF 
1c304     08 E5 85 F1 | 	sub	objptr, ##42248
1c308     07 26 56 F2 | 	cmps	local01, #7 wc
1c30c     40 00 90 3D |  if_ae	jmp	#LR__2212
1c310     52 00 00 FF 
1c314     08 E5 05 F1 | 	add	objptr, ##42248
1c318     F2 26 02 FB | 	rdlong	local01, objptr
1c31c     02 26 66 F0 | 	shl	local01, #2
1c320     EC E4 85 F1 | 	sub	objptr, #236
1c324     F2 26 02 F1 | 	add	local01, objptr
1c328     13 27 02 FB | 	rdlong	local01, local01
1c32c     A7 26 62 FC | 	wrlong	local01, fp
1c330     08 4E 05 F1 | 	add	fp, #8
1c334     A7 3A 68 FC | 	wrlong	#29, fp
1c338     08 4E 85 F1 | 	sub	fp, #8
1c33c     A7 12 02 F6 | 	mov	arg01, fp
1c340     52 00 00 FF 
1c344     1C E4 85 F1 | 	sub	objptr, ##42012
1c348     8C 13 BF FD | 	call	#_push
1c34c                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
1c34c     1C 00 90 FD | 	jmp	#LR__2214
1c350                 | LR__2212
1c350     29 12 06 F6 | 	mov	arg01, #41
1c354     00 14 06 F6 | 	mov	arg02, #0
1c358     D8 70 B0 FD | 	call	#_printerror
1c35c                 | '      printerror(41) : return
1c35c     0C 00 90 FD | 	jmp	#LR__2214
1c360                 | LR__2213
1c360     29 12 06 F6 | 	mov	arg01, #41
1c364     00 14 06 F6 | 	mov	arg02, #0
1c368     C8 70 B0 FD | 	call	#_printerror
1c36c                 | LR__2214
1c36c     A7 F0 03 F6 | 	mov	ptra, fp
1c370     B2 00 A0 FD | 	call	#popregs_
1c374                 | _do_stick_ret
1c374     2D 00 64 FD | 	ret
1c378                 | 
1c378                 | ' 
1c378                 | ' ' ------------------ strig
1c378                 | ' 
1c378                 | ' sub do_strig
1c378                 | _do_strig
1c378     01 4A 05 F6 | 	mov	COUNT_, #1
1c37c     A8 00 A0 FD | 	call	#pushregs_
1c380     10 F0 07 F1 | 	add	ptra, #16
1c384     4A 00 00 FF 
1c388     80 E4 05 F1 | 	add	objptr, ##38016
1c38c     F2 26 02 FB | 	rdlong	local01, objptr
1c390     13 17 02 F6 | 	mov	arg03, local01
1c394     01 16 66 F0 | 	shl	arg03, #1
1c398     13 17 02 F1 | 	add	arg03, local01
1c39c     02 16 66 F0 | 	shl	arg03, #2
1c3a0     03 00 00 FF 
1c3a4     04 E4 85 F1 | 	sub	objptr, ##1540
1c3a8     F2 16 02 F1 | 	add	arg03, objptr
1c3ac     0B 17 02 FB | 	rdlong	arg03, arg03
1c3b0     0C 4E 05 F1 | 	add	fp, #12
1c3b4     A7 16 62 FC | 	wrlong	arg03, fp
1c3b8                 | ' 
1c3b8                 | ' numpar=compiledline(lineptr_e).result.uresult
1c3b8                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
1c3b8     0C 4E 85 F1 | 	sub	fp, #12
1c3bc     02 16 16 F2 | 	cmp	arg03, #2 wc
1c3c0     47 00 00 FF 
1c3c4     7C E4 85 F1 | 	sub	objptr, ##36476
1c3c8     40 00 90 CD |  if_b	jmp	#LR__2220
1c3cc     00 12 06 F6 | 	mov	arg01, #0
1c3d0     A4 07 B1 FD | 	call	#__system___getiolock_0611
1c3d4     FD 12 02 F6 | 	mov	arg01, result1
1c3d8     74 AA B0 FD | 	call	#__system___lockmem
1c3dc     BA 01 00 FF 
1c3e0     4B 15 06 F6 | 	mov	arg02, ##@LR__5999
1c3e4     00 12 06 F6 | 	mov	arg01, #0
1c3e8     00 16 06 F6 | 	mov	arg03, #0
1c3ec     54 B7 B0 FD | 	call	#__system___basic_print_string
1c3f0     00 12 06 F6 | 	mov	arg01, #0
1c3f4     80 07 B1 FD | 	call	#__system___getiolock_0611
1c3f8     FD 00 68 FC | 	wrlong	#0, result1
1c3fc     27 12 06 F6 | 	mov	arg01, #39
1c400     00 14 06 F6 | 	mov	arg02, #0
1c404     2C 70 B0 FD | 	call	#_printerror
1c408     F0 00 90 FD | 	jmp	#LR__2224
1c40c                 | LR__2220
1c40c                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
1c40c     0C 4E 05 F1 | 	add	fp, #12
1c410     A7 FE 09 FB | 	rdlong	result3, fp wz
1c414     0C 4E 85 F1 | 	sub	fp, #12
1c418     30 00 90 5D |  if_ne	jmp	#LR__2221
1c41c     52 00 00 FF 
1c420     38 E4 05 F1 | 	add	objptr, ##42040
1c424     F2 26 02 FB | 	rdlong	local01, objptr
1c428     52 00 00 FF 
1c42c     38 E4 85 F1 | 	sub	objptr, ##42040
1c430     A7 26 62 FC | 	wrlong	local01, fp
1c434     08 4E 05 F1 | 	add	fp, #8
1c438     A7 3A 68 FC | 	wrlong	#29, fp
1c43c     08 4E 85 F1 | 	sub	fp, #8
1c440     A7 12 02 F6 | 	mov	arg01, fp
1c444     90 12 BF FD | 	call	#_push
1c448     B0 00 90 FD | 	jmp	#LR__2224
1c44c                 | LR__2221
1c44c     F0 11 BF FD | 	call	#_pop
1c450     A7 FA 61 FC | 	wrlong	result1, fp
1c454     04 4E 05 F1 | 	add	fp, #4
1c458     A7 FC 61 FC | 	wrlong	result2, fp
1c45c     04 4E 05 F1 | 	add	fp, #4
1c460     A7 FE 61 FC | 	wrlong	result3, fp
1c464                 | ' t1=pop()
1c464                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
1c464     08 4E 85 F1 | 	sub	fp, #8
1c468     1C FE 0D F2 | 	cmp	result3, #28 wz
1c46c     08 4E 05 51 |  if_ne	add	fp, #8
1c470     A7 26 02 5B |  if_ne	rdlong	local01, fp
1c474     08 4E 85 51 |  if_ne	sub	fp, #8
1c478     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
1c47c     70 00 90 5D |  if_ne	jmp	#LR__2223
1c480     A7 26 02 FB | 	rdlong	local01, fp
1c484     52 00 00 FF 
1c488     08 E5 05 F1 | 	add	objptr, ##42248
1c48c     F2 26 62 FC | 	wrlong	local01, objptr
1c490                 | '   q=t1.result.uresult
1c490                 | '   if q<7 then 
1c490     52 00 00 FF 
1c494     08 E5 85 F1 | 	sub	objptr, ##42248
1c498     07 26 56 F2 | 	cmps	local01, #7 wc
1c49c     40 00 90 3D |  if_ae	jmp	#LR__2222
1c4a0     52 00 00 FF 
1c4a4     08 E5 05 F1 | 	add	objptr, ##42248
1c4a8     F2 26 02 FB | 	rdlong	local01, objptr
1c4ac     02 26 66 F0 | 	shl	local01, #2
1c4b0     D0 E4 85 F1 | 	sub	objptr, #208
1c4b4     F2 26 02 F1 | 	add	local01, objptr
1c4b8     13 27 02 FB | 	rdlong	local01, local01
1c4bc     A7 26 62 FC | 	wrlong	local01, fp
1c4c0     08 4E 05 F1 | 	add	fp, #8
1c4c4     A7 3A 68 FC | 	wrlong	#29, fp
1c4c8     08 4E 85 F1 | 	sub	fp, #8
1c4cc     A7 12 02 F6 | 	mov	arg01, fp
1c4d0     52 00 00 FF 
1c4d4     38 E4 85 F1 | 	sub	objptr, ##42040
1c4d8     FC 11 BF FD | 	call	#_push
1c4dc                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
1c4dc     1C 00 90 FD | 	jmp	#LR__2224
1c4e0                 | LR__2222
1c4e0     29 12 06 F6 | 	mov	arg01, #41
1c4e4     00 14 06 F6 | 	mov	arg02, #0
1c4e8     48 6F B0 FD | 	call	#_printerror
1c4ec                 | '      printerror(41) : return
1c4ec     0C 00 90 FD | 	jmp	#LR__2224
1c4f0                 | LR__2223
1c4f0     29 12 06 F6 | 	mov	arg01, #41
1c4f4     00 14 06 F6 | 	mov	arg02, #0
1c4f8     38 6F B0 FD | 	call	#_printerror
1c4fc                 | LR__2224
1c4fc     A7 F0 03 F6 | 	mov	ptra, fp
1c500     B2 00 A0 FD | 	call	#popregs_
1c504                 | _do_strig_ret
1c504     2D 00 64 FD | 	ret
1c508                 | 
1c508                 | ' 
1c508                 | ' ' ------------------ tan
1c508                 | ' 
1c508                 | ' sub do_tan
1c508                 | _do_tan
1c508     01 4A 05 F6 | 	mov	COUNT_, #1
1c50c     A8 00 A0 FD | 	call	#pushregs_
1c510     10 F0 07 F1 | 	add	ptra, #16
1c514     4A 00 00 FF 
1c518     80 E4 05 F1 | 	add	objptr, ##38016
1c51c     F2 26 02 FB | 	rdlong	local01, objptr
1c520     13 17 02 F6 | 	mov	arg03, local01
1c524     01 16 66 F0 | 	shl	arg03, #1
1c528     13 17 02 F1 | 	add	arg03, local01
1c52c     02 16 66 F0 | 	shl	arg03, #2
1c530     03 00 00 FF 
1c534     04 E4 85 F1 | 	sub	objptr, ##1540
1c538     F2 16 02 F1 | 	add	arg03, objptr
1c53c     0B 17 02 FB | 	rdlong	arg03, arg03
1c540     0C 4E 05 F1 | 	add	fp, #12
1c544     A7 16 62 FC | 	wrlong	arg03, fp
1c548                 | ' 
1c548                 | ' numpar=compiledline(lineptr_e).result.uresult
1c548                 | ' if numpar>1 orelse numpar=0 then print "tan: "; : printerror(39) : return
1c548     0C 4E 85 F1 | 	sub	fp, #12
1c54c     02 16 16 F2 | 	cmp	arg03, #2 wc
1c550     47 00 00 FF 
1c554     7C E4 85 F1 | 	sub	objptr, ##36476
1c558     0C 4E 05 C1 |  if_b	add	fp, #12
1c55c     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1c560     0C 4E 85 C1 |  if_b	sub	fp, #12
1c564     40 00 90 4D |  if_c_and_nz	jmp	#LR__2230
1c568     00 12 06 F6 | 	mov	arg01, #0
1c56c     08 06 B1 FD | 	call	#__system___getiolock_0611
1c570     FD 12 02 F6 | 	mov	arg01, result1
1c574     D8 A8 B0 FD | 	call	#__system___lockmem
1c578     BA 01 00 FF 
1c57c     53 15 06 F6 | 	mov	arg02, ##@LR__6000
1c580     00 12 06 F6 | 	mov	arg01, #0
1c584     00 16 06 F6 | 	mov	arg03, #0
1c588     B8 B5 B0 FD | 	call	#__system___basic_print_string
1c58c     00 12 06 F6 | 	mov	arg01, #0
1c590     E4 05 B1 FD | 	call	#__system___getiolock_0611
1c594     FD 00 68 FC | 	wrlong	#0, result1
1c598     27 12 06 F6 | 	mov	arg01, #39
1c59c     00 14 06 F6 | 	mov	arg02, #0
1c5a0     90 6E B0 FD | 	call	#_printerror
1c5a4     64 00 90 FD | 	jmp	#LR__2231
1c5a8                 | LR__2230
1c5a8     94 10 BF FD | 	call	#_pop
1c5ac     A7 FA 61 FC | 	wrlong	result1, fp
1c5b0     04 4E 05 F1 | 	add	fp, #4
1c5b4     A7 FC 61 FC | 	wrlong	result2, fp
1c5b8     04 4E 05 F1 | 	add	fp, #4
1c5bc     A7 FE 61 FC | 	wrlong	result3, fp
1c5c0     08 4E 85 F1 | 	sub	fp, #8
1c5c4     52 00 00 FF 
1c5c8     A8 E4 05 F1 | 	add	objptr, ##42152
1c5cc     F2 26 02 FB | 	rdlong	local01, objptr
1c5d0     52 00 00 FF 
1c5d4     A8 E4 85 F1 | 	sub	objptr, ##42152
1c5d8     A7 12 02 F6 | 	mov	arg01, fp
1c5dc     00 13 BF FD | 	call	#_converttofloat
1c5e0     FD 14 02 F6 | 	mov	arg02, result1
1c5e4     13 13 02 F6 | 	mov	arg01, local01
1c5e8     DC D6 B0 FD | 	call	#__system___float_mul
1c5ec     FD 12 02 F6 | 	mov	arg01, result1
1c5f0     80 E1 B0 FD | 	call	#__system____builtin_tanf
1c5f4     A7 FA 61 FC | 	wrlong	result1, fp
1c5f8     08 4E 05 F1 | 	add	fp, #8
1c5fc     A7 3C 68 FC | 	wrlong	#30, fp
1c600     08 4E 85 F1 | 	sub	fp, #8
1c604     A7 12 02 F6 | 	mov	arg01, fp
1c608     CC 10 BF FD | 	call	#_push
1c60c                 | LR__2231
1c60c     A7 F0 03 F6 | 	mov	ptra, fp
1c610     B2 00 A0 FD | 	call	#popregs_
1c614                 | _do_tan_ret
1c614     2D 00 64 FD | 	ret
1c618                 | 
1c618                 | ' 
1c618                 | ' ' ------------------ val
1c618                 | ' 
1c618                 | ' sub do_val
1c618                 | _do_val
1c618     03 4A 05 F6 | 	mov	COUNT_, #3
1c61c     A8 00 A0 FD | 	call	#pushregs_
1c620     20 F0 07 F1 | 	add	ptra, #32
1c624     4A 00 00 FF 
1c628     80 E4 05 F1 | 	add	objptr, ##38016
1c62c     F2 16 02 FB | 	rdlong	arg03, objptr
1c630     0B 27 02 F6 | 	mov	local01, arg03
1c634     01 26 66 F0 | 	shl	local01, #1
1c638     0B 27 02 F1 | 	add	local01, arg03
1c63c     02 26 66 F0 | 	shl	local01, #2
1c640     03 00 00 FF 
1c644     04 E4 85 F1 | 	sub	objptr, ##1540
1c648     F2 26 02 F1 | 	add	local01, objptr
1c64c     13 17 02 FB | 	rdlong	arg03, local01
1c650     0C 4E 05 F1 | 	add	fp, #12
1c654     A7 16 62 FC | 	wrlong	arg03, fp
1c658                 | ' 
1c658                 | ' numpar=compiledline(lineptr_e).result.uresult
1c658                 | ' if numpar>1 orelse numpar=0 then print "val: "; : printerror(39) : return
1c658     0C 4E 85 F1 | 	sub	fp, #12
1c65c     02 16 16 F2 | 	cmp	arg03, #2 wc
1c660     47 00 00 FF 
1c664     7C E4 85 F1 | 	sub	objptr, ##36476
1c668     0C 4E 05 C1 |  if_b	add	fp, #12
1c66c     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1c670     0C 4E 85 C1 |  if_b	sub	fp, #12
1c674     40 00 90 4D |  if_c_and_nz	jmp	#LR__2240
1c678     00 12 06 F6 | 	mov	arg01, #0
1c67c     F8 04 B1 FD | 	call	#__system___getiolock_0611
1c680     FD 12 02 F6 | 	mov	arg01, result1
1c684     C8 A7 B0 FD | 	call	#__system___lockmem
1c688     BA 01 00 FF 
1c68c     59 15 06 F6 | 	mov	arg02, ##@LR__6001
1c690     00 12 06 F6 | 	mov	arg01, #0
1c694     00 16 06 F6 | 	mov	arg03, #0
1c698     A8 B4 B0 FD | 	call	#__system___basic_print_string
1c69c     00 12 06 F6 | 	mov	arg01, #0
1c6a0     D4 04 B1 FD | 	call	#__system___getiolock_0611
1c6a4     FD 00 68 FC | 	wrlong	#0, result1
1c6a8     27 12 06 F6 | 	mov	arg01, #39
1c6ac     00 14 06 F6 | 	mov	arg02, #0
1c6b0     80 6D B0 FD | 	call	#_printerror
1c6b4     60 02 90 FD | 	jmp	#LR__2253
1c6b8                 | LR__2240
1c6b8     84 0F BF FD | 	call	#_pop
1c6bc     FF 16 02 F6 | 	mov	arg03, result3
1c6c0     A7 FA 61 FC | 	wrlong	result1, fp
1c6c4     04 4E 05 F1 | 	add	fp, #4
1c6c8     A7 FC 61 FC | 	wrlong	result2, fp
1c6cc     04 4E 05 F1 | 	add	fp, #4
1c6d0     A7 16 62 FC | 	wrlong	arg03, fp
1c6d4                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
1c6d4     08 4E 85 F1 | 	sub	fp, #8
1c6d8     2B 16 0E F2 | 	cmp	arg03, #43 wz
1c6dc     18 00 90 5D |  if_ne	jmp	#LR__2241
1c6e0     A7 12 02 FB | 	rdlong	arg01, fp
1c6e4     D0 10 BF FD | 	call	#_convertstring
1c6e8     A7 FA 61 FC | 	wrlong	result1, fp
1c6ec     08 4E 05 F1 | 	add	fp, #8
1c6f0     A7 3E 68 FC | 	wrlong	#31, fp
1c6f4     08 4E 85 F1 | 	sub	fp, #8
1c6f8                 | LR__2241
1c6f8                 | ' if t1.result_type<>result_string then print "val: "; : printerror(15) : return 
1c6f8     08 4E 05 F1 | 	add	fp, #8
1c6fc     A7 16 02 FB | 	rdlong	arg03, fp
1c700     08 4E 85 F1 | 	sub	fp, #8
1c704     1F 16 0E F2 | 	cmp	arg03, #31 wz
1c708     40 00 90 AD |  if_e	jmp	#LR__2242
1c70c     00 12 06 F6 | 	mov	arg01, #0
1c710     64 04 B1 FD | 	call	#__system___getiolock_0611
1c714     FD 12 02 F6 | 	mov	arg01, result1
1c718     34 A7 B0 FD | 	call	#__system___lockmem
1c71c     BA 01 00 FF 
1c720     5F 15 06 F6 | 	mov	arg02, ##@LR__6002
1c724     00 12 06 F6 | 	mov	arg01, #0
1c728     00 16 06 F6 | 	mov	arg03, #0
1c72c     14 B4 B0 FD | 	call	#__system___basic_print_string
1c730     00 12 06 F6 | 	mov	arg01, #0
1c734     40 04 B1 FD | 	call	#__system___getiolock_0611
1c738     FD 00 68 FC | 	wrlong	#0, result1
1c73c     0F 12 06 F6 | 	mov	arg01, #15
1c740     00 14 06 F6 | 	mov	arg02, #0
1c744     EC 6C B0 FD | 	call	#_printerror
1c748     CC 01 90 FD | 	jmp	#LR__2253
1c74c                 | LR__2242
1c74c                 | ' if left$(t1.result.sresult,1)="$" then t1.result.sresult="&h"+right$(t1.result.sresult,len(t1.result.sresult)-1)
1c74c     A7 12 02 FB | 	rdlong	arg01, fp
1c750     01 14 06 F6 | 	mov	arg02, #1
1c754     74 C7 B0 FD | 	call	#__system__Left_S
1c758     FD 12 02 F6 | 	mov	arg01, result1
1c75c     BA 01 00 FF 
1c760     65 15 06 F6 | 	mov	arg02, ##@LR__6003
1c764     10 A7 B0 FD | 	call	#__system___string_cmp
1c768     00 FA 0D F2 | 	cmp	result1, #0 wz
1c76c     48 00 90 5D |  if_ne	jmp	#LR__2245
1c770     BA 01 00 FF 
1c774     67 27 06 F6 | 	mov	local01, ##@LR__6004
1c778     A7 16 02 FB | 	rdlong	arg03, fp
1c77c     0B 13 02 F6 | 	mov	arg01, arg03
1c780     09 29 02 F6 | 	mov	local02, arg01
1c784     97 06 48 FB | 	callpa	#(@LR__2244-@LR__2243)>>2,fcache_load_ptr_
1c788                 | LR__2243
1c788     14 FB C9 FA | 	rdbyte	result1, local02 wz
1c78c     01 28 06 51 |  if_ne	add	local02, #1
1c790     F4 FF 9F 5D |  if_ne	jmp	#LR__2243
1c794                 | LR__2244
1c794     09 29 82 F1 | 	sub	local02, arg01
1c798     14 15 02 F6 | 	mov	arg02, local02
1c79c     01 14 86 F1 | 	sub	arg02, #1
1c7a0     0B 13 02 F6 | 	mov	arg01, arg03
1c7a4     AC C7 B0 FD | 	call	#__system__Right_S
1c7a8     FD 14 02 F6 | 	mov	arg02, result1
1c7ac     13 13 02 F6 | 	mov	arg01, local01
1c7b0     F8 A6 B0 FD | 	call	#__system___string_concat
1c7b4     A7 FA 61 FC | 	wrlong	result1, fp
1c7b8                 | LR__2245
1c7b8                 | ' if left$(t1.result.sresult,1)="%" then t1.result.sresult="&b"+right$(t1.result.sresult,len(t1.result.sresult)-1)
1c7b8     A7 12 02 FB | 	rdlong	arg01, fp
1c7bc     01 14 06 F6 | 	mov	arg02, #1
1c7c0     08 C7 B0 FD | 	call	#__system__Left_S
1c7c4     FD 12 02 F6 | 	mov	arg01, result1
1c7c8     BA 01 00 FF 
1c7cc     6A 15 06 F6 | 	mov	arg02, ##@LR__6005
1c7d0     A4 A6 B0 FD | 	call	#__system___string_cmp
1c7d4     00 FA 0D F2 | 	cmp	result1, #0 wz
1c7d8     48 00 90 5D |  if_ne	jmp	#LR__2248
1c7dc     BA 01 00 FF 
1c7e0     6C 27 06 F6 | 	mov	local01, ##@LR__6006
1c7e4     A7 16 02 FB | 	rdlong	arg03, fp
1c7e8     0B 13 02 F6 | 	mov	arg01, arg03
1c7ec     09 29 02 F6 | 	mov	local02, arg01
1c7f0     97 06 48 FB | 	callpa	#(@LR__2247-@LR__2246)>>2,fcache_load_ptr_
1c7f4                 | LR__2246
1c7f4     14 FB C9 FA | 	rdbyte	result1, local02 wz
1c7f8     01 28 06 51 |  if_ne	add	local02, #1
1c7fc     F4 FF 9F 5D |  if_ne	jmp	#LR__2246
1c800                 | LR__2247
1c800     09 29 82 F1 | 	sub	local02, arg01
1c804     14 15 02 F6 | 	mov	arg02, local02
1c808     01 14 86 F1 | 	sub	arg02, #1
1c80c     0B 13 02 F6 | 	mov	arg01, arg03
1c810     40 C7 B0 FD | 	call	#__system__Right_S
1c814     FD 14 02 F6 | 	mov	arg02, result1
1c818     13 13 02 F6 | 	mov	arg01, local01
1c81c     8C A6 B0 FD | 	call	#__system___string_concat
1c820     A7 FA 61 FC | 	wrlong	result1, fp
1c824                 | LR__2248
1c824     A7 12 02 FB | 	rdlong	arg01, fp
1c828     A8 DC B0 FD | 	call	#__system____builtin_atof
1c82c     1C 4E 05 F1 | 	add	fp, #28
1c830     A7 FA 61 FC | 	wrlong	result1, fp
1c834     1C 4E 85 F1 | 	sub	fp, #28
1c838     A7 12 02 FB | 	rdlong	arg01, fp
1c83c     00 14 06 F6 | 	mov	arg02, #0
1c840     FC DA B0 FD | 	call	#__system____builtin_atoi
1c844     18 4E 05 F1 | 	add	fp, #24
1c848     A7 FA 61 FC | 	wrlong	result1, fp
1c84c                 | ' fval=val(t1.result.sresult)
1c84c                 | ' ival=val%(t1.result.sresult)
1c84c                 | ' if fval=ival then
1c84c     04 4E 05 F1 | 	add	fp, #4
1c850     A7 26 02 FB | 	rdlong	local01, fp
1c854     1C 4E 85 F1 | 	sub	fp, #28
1c858     FD 12 52 F6 | 	abs	arg01, result1 wc
1c85c     1F 2A C6 C9 |  if_b	decod	local03, #31
1c860     00 2A 06 36 |  if_ae	mov	local03, #0
1c864     5C D0 B0 FD | 	call	#__system___float_fromuns
1c868     15 FB 61 F5 | 	xor	result1, local03
1c86c     FD 14 02 F6 | 	mov	arg02, result1
1c870     13 13 02 F6 | 	mov	arg01, local01
1c874     01 16 06 F6 | 	mov	arg03, #1
1c878     80 D8 B0 FD | 	call	#__system___float_cmp
1c87c     00 FA 0D F2 | 	cmp	result1, #0 wz
1c880     20 00 90 5D |  if_ne	jmp	#LR__2249
1c884     18 4E 05 F1 | 	add	fp, #24
1c888     A7 26 02 FB | 	rdlong	local01, fp
1c88c     18 4E 85 F1 | 	sub	fp, #24
1c890     A7 26 62 FC | 	wrlong	local01, fp
1c894     08 4E 05 F1 | 	add	fp, #8
1c898     A7 38 68 FC | 	wrlong	#28, fp
1c89c     08 4E 85 F1 | 	sub	fp, #8
1c8a0     6C 00 90 FD | 	jmp	#LR__2252
1c8a4                 | LR__2249
1c8a4                 | '   if fval=0 andalso ival<>0 then
1c8a4     1C 4E 05 F1 | 	add	fp, #28
1c8a8     A7 12 02 FB | 	rdlong	arg01, fp
1c8ac     1C 4E 85 F1 | 	sub	fp, #28
1c8b0     00 14 06 F6 | 	mov	arg02, #0
1c8b4     01 16 06 F6 | 	mov	arg03, #1
1c8b8     40 D8 B0 FD | 	call	#__system___float_cmp
1c8bc     00 FA 0D F2 | 	cmp	result1, #0 wz
1c8c0     30 00 90 5D |  if_ne	jmp	#LR__2250
1c8c4     18 4E 05 F1 | 	add	fp, #24
1c8c8     A7 26 0A FB | 	rdlong	local01, fp wz
1c8cc     18 4E 85 F1 | 	sub	fp, #24
1c8d0     20 00 90 AD |  if_e	jmp	#LR__2250
1c8d4     18 4E 05 F1 | 	add	fp, #24
1c8d8     A7 26 02 FB | 	rdlong	local01, fp
1c8dc     18 4E 85 F1 | 	sub	fp, #24
1c8e0     A7 26 62 FC | 	wrlong	local01, fp
1c8e4     08 4E 05 F1 | 	add	fp, #8
1c8e8     A7 38 68 FC | 	wrlong	#28, fp
1c8ec     08 4E 85 F1 | 	sub	fp, #8
1c8f0     1C 00 90 FD | 	jmp	#LR__2251
1c8f4                 | LR__2250
1c8f4     1C 4E 05 F1 | 	add	fp, #28
1c8f8     A7 26 02 FB | 	rdlong	local01, fp
1c8fc     1C 4E 85 F1 | 	sub	fp, #28
1c900     A7 26 62 FC | 	wrlong	local01, fp
1c904     08 4E 05 F1 | 	add	fp, #8
1c908     A7 3C 68 FC | 	wrlong	#30, fp
1c90c     08 4E 85 F1 | 	sub	fp, #8
1c910                 | LR__2251
1c910                 | LR__2252
1c910     A7 12 02 F6 | 	mov	arg01, fp
1c914     C0 0D BF FD | 	call	#_push
1c918                 | LR__2253
1c918     A7 F0 03 F6 | 	mov	ptra, fp
1c91c     B2 00 A0 FD | 	call	#popregs_
1c920                 | _do_val_ret
1c920     2D 00 64 FD | 	ret
1c924                 | 
1c924                 | ' 
1c924                 | ' ' ------------------ waitclock
1c924                 | ' 
1c924                 | ' sub do_waitclock
1c924                 | _do_waitclock
1c924     52 00 00 FF 
1c928     94 E4 05 F1 | 	add	objptr, ##42132
1c92c     F2 00 02 FB | 	rdlong	_var01, objptr
1c930                 | ' c=hkcnt
1c930                 | ' do: loop until hkcnt<>c
1c930                 | LR__2260
1c930     F2 02 02 FB | 	rdlong	_var02, objptr
1c934     00 03 0A F2 | 	cmp	_var02, _var01 wz
1c938     F4 FF 9F AD |  if_e	jmp	#LR__2260
1c93c     52 00 00 FF 
1c940     94 E4 85 F1 | 	sub	objptr, ##42132
1c944                 | _do_waitclock_ret
1c944     2D 00 64 FD | 	ret
1c948                 | 
1c948                 | ' 
1c948                 | ' ' ------------------ waitms
1c948                 | ' 
1c948                 | ' sub do_waitms
1c948                 | _do_waitms
1c948     01 4A 05 F6 | 	mov	COUNT_, #1
1c94c     A8 00 A0 FD | 	call	#pushregs_
1c950     18 F0 07 F1 | 	add	ptra, #24
1c954     E8 0C BF FD | 	call	#_pop
1c958     A7 FA 61 FC | 	wrlong	result1, fp
1c95c     04 4E 05 F1 | 	add	fp, #4
1c960     A7 FC 61 FC | 	wrlong	result2, fp
1c964     04 4E 05 F1 | 	add	fp, #4
1c968     A7 FE 61 FC | 	wrlong	result3, fp
1c96c     08 4E 85 F1 | 	sub	fp, #8
1c970     A7 12 02 F6 | 	mov	arg01, fp
1c974     AC 0E BF FD | 	call	#_converttoint
1c978     0C 4E 05 F1 | 	add	fp, #12
1c97c     A7 FA 61 FC | 	wrlong	result1, fp
1c980                 | ' 
1c980                 | ' t1=pop()  
1c980                 | ' t=converttoint(t1)
1c980                 | ' if t<0 then return
1c980     0C 4E 85 F1 | 	sub	fp, #12
1c984     00 FA 55 F2 | 	cmps	result1, #0 wc
1c988     E4 00 90 CD |  if_b	jmp	#LR__2276
1c98c                 | ' if t < 1000 then 
1c98c     0C 4E 05 F1 | 	add	fp, #12
1c990     A7 12 02 FB | 	rdlong	arg01, fp
1c994     0C 4E 85 F1 | 	sub	fp, #12
1c998     01 00 00 FF 
1c99c     E8 13 56 F2 | 	cmps	arg01, ##1000 wc
1c9a0     14 00 90 3D |  if_ae	jmp	#LR__2270
1c9a4     0C 4E 05 F1 | 	add	fp, #12
1c9a8     A7 12 02 FB | 	rdlong	arg01, fp
1c9ac     0C 4E 85 F1 | 	sub	fp, #12
1c9b0     90 A7 B0 FD | 	call	#__system___waitms
1c9b4     B8 00 90 FD | 	jmp	#LR__2275
1c9b8                 | LR__2270
1c9b8     10 4E 05 F1 | 	add	fp, #16
1c9bc     A7 02 68 FC | 	wrlong	#1, fp
1c9c0     04 4E 85 F1 | 	sub	fp, #4
1c9c4     A7 12 02 FB | 	rdlong	arg01, fp
1c9c8     09 13 52 F6 | 	abs	arg01, arg01 wc
1c9cc     01 00 00 FF 
1c9d0     E8 13 16 FD | 	qdiv	arg01, ##1000
1c9d4                 | '   for i=1 to t/1000
1c9d4     0C 4E 85 F1 | 	sub	fp, #12
1c9d8     18 26 62 FD | 	getqx	local01
1c9dc     13 27 82 F6 | 	negc	local01, local01
1c9e0     01 26 06 F1 | 	add	local01, #1
1c9e4                 | LR__2271
1c9e4     10 4E 05 F1 | 	add	fp, #16
1c9e8     A7 12 02 FB | 	rdlong	arg01, fp
1c9ec     10 4E 85 F1 | 	sub	fp, #16
1c9f0     13 13 52 F2 | 	cmps	arg01, local01 wc
1c9f4     54 00 90 3D |  if_ae	jmp	#LR__2274
1c9f8     01 00 00 FF 
1c9fc     E8 13 06 F6 | 	mov	arg01, ##1000
1ca00     40 A7 B0 FD | 	call	#__system___waitms
1ca04                 | '     waitms(1000)
1ca04                 | '     if ((kbm.keystate(kbm.KEY_LCTRL) orelse kbm.keystate(kbm.KEY_RCTRL)) andalso kbm.keystate(kbm.KEY_C)) then return
1ca04     E0 12 06 F6 | 	mov	arg01, #224
1ca08     4C 9B B0 FD | 	call	#_usbnew_spin2_keystate
1ca0c     00 FA 0D F2 | 	cmp	result1, #0 wz
1ca10     10 00 90 5D |  if_ne	jmp	#LR__2272
1ca14     E4 12 06 F6 | 	mov	arg01, #228
1ca18     3C 9B B0 FD | 	call	#_usbnew_spin2_keystate
1ca1c     00 FA 0D F2 | 	cmp	result1, #0 wz
1ca20     10 00 90 AD |  if_e	jmp	#LR__2273
1ca24                 | LR__2272
1ca24     06 12 06 F6 | 	mov	arg01, #6
1ca28     2C 9B B0 FD | 	call	#_usbnew_spin2_keystate
1ca2c     00 FA 0D F2 | 	cmp	result1, #0 wz
1ca30     3C 00 90 5D |  if_ne	jmp	#LR__2276
1ca34                 | LR__2273
1ca34     10 4E 05 F1 | 	add	fp, #16
1ca38     A7 12 02 FB | 	rdlong	arg01, fp
1ca3c     01 12 06 F1 | 	add	arg01, #1
1ca40     A7 12 62 FC | 	wrlong	arg01, fp
1ca44     10 4E 85 F1 | 	sub	fp, #16
1ca48     98 FF 9F FD | 	jmp	#LR__2271
1ca4c                 | LR__2274
1ca4c     0C 4E 05 F1 | 	add	fp, #12
1ca50     A7 26 02 FB | 	rdlong	local01, fp
1ca54     13 27 52 F6 | 	abs	local01, local01 wc
1ca58     01 00 00 FF 
1ca5c     E8 27 16 FD | 	qdiv	local01, ##1000
1ca60     0C 4E 85 F1 | 	sub	fp, #12
1ca64     19 26 62 FD | 	getqy	local01
1ca68     13 13 82 F6 | 	negc	arg01, local01
1ca6c     D4 A6 B0 FD | 	call	#__system___waitms
1ca70                 | LR__2275
1ca70                 | LR__2276
1ca70     A7 F0 03 F6 | 	mov	ptra, fp
1ca74     B2 00 A0 FD | 	call	#popregs_
1ca78                 | _do_waitms_ret
1ca78     2D 00 64 FD | 	ret
1ca7c                 | 
1ca7c                 | ' 
1ca7c                 | ' ' ------------------ waitvbl
1ca7c                 | ' 
1ca7c                 | ' sub do_waitvbl
1ca7c                 | _do_waitvbl
1ca7c     01 12 06 F6 | 	mov	arg01, #1
1ca80     A8 86 B0 FD | 	call	#_hg010b_spin2_waitvbl
1ca84                 | _do_waitvbl_ret
1ca84     2D 00 64 FD | 	ret
1ca88                 | 
1ca88                 | ' 
1ca88                 | ' ' ------------------ wrpin
1ca88                 | ' 
1ca88                 | ' sub do_wrpin
1ca88                 | _do_wrpin
1ca88     01 4A 05 F6 | 	mov	COUNT_, #1
1ca8c     A8 00 A0 FD | 	call	#pushregs_
1ca90     18 F0 07 F1 | 	add	ptra, #24
1ca94     A8 0B BF FD | 	call	#_pop
1ca98     FD 14 02 F6 | 	mov	arg02, result1
1ca9c     FE 12 02 F6 | 	mov	arg01, result2
1caa0     FF 26 02 F6 | 	mov	local01, result3
1caa4     A7 14 62 FC | 	wrlong	arg02, fp
1caa8     04 4E 05 F1 | 	add	fp, #4
1caac     A7 12 62 FC | 	wrlong	arg01, fp
1cab0     04 4E 05 F1 | 	add	fp, #4
1cab4     A7 26 62 FC | 	wrlong	local01, fp
1cab8     08 4E 85 F1 | 	sub	fp, #8
1cabc     80 0B BF FD | 	call	#_pop
1cac0     FF 26 02 F6 | 	mov	local01, result3
1cac4     0C 4E 05 F1 | 	add	fp, #12
1cac8     A7 FA 61 FC | 	wrlong	result1, fp
1cacc     04 4E 05 F1 | 	add	fp, #4
1cad0     A7 FC 61 FC | 	wrlong	result2, fp
1cad4     04 4E 05 F1 | 	add	fp, #4
1cad8     A7 26 62 FC | 	wrlong	local01, fp
1cadc     08 4E 85 F1 | 	sub	fp, #8
1cae0     A7 12 02 F6 | 	mov	arg01, fp
1cae4     0C 4E 85 F1 | 	sub	fp, #12
1cae8     38 0D BF FD | 	call	#_converttoint
1caec     FD 26 02 F6 | 	mov	local01, result1
1caf0     A7 12 02 F6 | 	mov	arg01, fp
1caf4     2C 0D BF FD | 	call	#_converttoint
1caf8     13 FB 01 FC | 	wrpin	result1, local01
1cafc     A7 F0 03 F6 | 	mov	ptra, fp
1cb00     B2 00 A0 FD | 	call	#popregs_
1cb04                 | _do_wrpin_ret
1cb04     2D 00 64 FD | 	ret
1cb08                 | 
1cb08                 | ' 
1cb08                 | ' ' ------------------ wxpin
1cb08                 | ' 
1cb08                 | ' sub do_wxpin
1cb08                 | _do_wxpin
1cb08     01 4A 05 F6 | 	mov	COUNT_, #1
1cb0c     A8 00 A0 FD | 	call	#pushregs_
1cb10     18 F0 07 F1 | 	add	ptra, #24
1cb14     28 0B BF FD | 	call	#_pop
1cb18     FD 14 02 F6 | 	mov	arg02, result1
1cb1c     FE 12 02 F6 | 	mov	arg01, result2
1cb20     FF 26 02 F6 | 	mov	local01, result3
1cb24     A7 14 62 FC | 	wrlong	arg02, fp
1cb28     04 4E 05 F1 | 	add	fp, #4
1cb2c     A7 12 62 FC | 	wrlong	arg01, fp
1cb30     04 4E 05 F1 | 	add	fp, #4
1cb34     A7 26 62 FC | 	wrlong	local01, fp
1cb38     08 4E 85 F1 | 	sub	fp, #8
1cb3c     00 0B BF FD | 	call	#_pop
1cb40     FF 26 02 F6 | 	mov	local01, result3
1cb44     0C 4E 05 F1 | 	add	fp, #12
1cb48     A7 FA 61 FC | 	wrlong	result1, fp
1cb4c     04 4E 05 F1 | 	add	fp, #4
1cb50     A7 FC 61 FC | 	wrlong	result2, fp
1cb54     04 4E 05 F1 | 	add	fp, #4
1cb58     A7 26 62 FC | 	wrlong	local01, fp
1cb5c     08 4E 85 F1 | 	sub	fp, #8
1cb60     A7 12 02 F6 | 	mov	arg01, fp
1cb64     0C 4E 85 F1 | 	sub	fp, #12
1cb68     B8 0C BF FD | 	call	#_converttoint
1cb6c     FD 26 02 F6 | 	mov	local01, result1
1cb70     A7 12 02 F6 | 	mov	arg01, fp
1cb74     AC 0C BF FD | 	call	#_converttoint
1cb78     13 FB 11 FC | 	wxpin	result1, local01
1cb7c     A7 F0 03 F6 | 	mov	ptra, fp
1cb80     B2 00 A0 FD | 	call	#popregs_
1cb84                 | _do_wxpin_ret
1cb84     2D 00 64 FD | 	ret
1cb88                 | 
1cb88                 | ' 
1cb88                 | ' ' ------------------ wypin
1cb88                 | ' 
1cb88                 | ' sub do_wypin
1cb88                 | _do_wypin
1cb88     01 4A 05 F6 | 	mov	COUNT_, #1
1cb8c     A8 00 A0 FD | 	call	#pushregs_
1cb90     18 F0 07 F1 | 	add	ptra, #24
1cb94     A8 0A BF FD | 	call	#_pop
1cb98     FD 14 02 F6 | 	mov	arg02, result1
1cb9c     FE 12 02 F6 | 	mov	arg01, result2
1cba0     FF 26 02 F6 | 	mov	local01, result3
1cba4     A7 14 62 FC | 	wrlong	arg02, fp
1cba8     04 4E 05 F1 | 	add	fp, #4
1cbac     A7 12 62 FC | 	wrlong	arg01, fp
1cbb0     04 4E 05 F1 | 	add	fp, #4
1cbb4     A7 26 62 FC | 	wrlong	local01, fp
1cbb8     08 4E 85 F1 | 	sub	fp, #8
1cbbc     80 0A BF FD | 	call	#_pop
1cbc0     FF 26 02 F6 | 	mov	local01, result3
1cbc4     0C 4E 05 F1 | 	add	fp, #12
1cbc8     A7 FA 61 FC | 	wrlong	result1, fp
1cbcc     04 4E 05 F1 | 	add	fp, #4
1cbd0     A7 FC 61 FC | 	wrlong	result2, fp
1cbd4     04 4E 05 F1 | 	add	fp, #4
1cbd8     A7 26 62 FC | 	wrlong	local01, fp
1cbdc     08 4E 85 F1 | 	sub	fp, #8
1cbe0     A7 12 02 F6 | 	mov	arg01, fp
1cbe4     0C 4E 85 F1 | 	sub	fp, #12
1cbe8     38 0C BF FD | 	call	#_converttoint
1cbec     FD 26 02 F6 | 	mov	local01, result1
1cbf0     A7 12 02 F6 | 	mov	arg01, fp
1cbf4     2C 0C BF FD | 	call	#_converttoint
1cbf8     13 FB 21 FC | 	wypin	result1, local01
1cbfc     A7 F0 03 F6 | 	mov	ptra, fp
1cc00     B2 00 A0 FD | 	call	#popregs_
1cc04                 | _do_wypin_ret
1cc04     2D 00 64 FD | 	ret
1cc08                 | 
1cc08                 | ' 
1cc08                 | ' 
1cc08                 | ' 
1cc08                 | ' 
1cc08                 | ' 
1cc08                 | ' 
1cc08                 | ' 
1cc08                 | ' 
1cc08                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1cc08                 | ' '--------------------------------------- Runtime variable processing--------------------------------------------------------------------- 
1cc08                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1cc08                 | ' 
1cc08                 | ' 
1cc08                 | ' '------------------ Assign
1cc08                 | ' 
1cc08                 | ' sub do_assign
1cc08                 | _do_assign
1cc08     05 4A 05 F6 | 	mov	COUNT_, #5
1cc0c     A8 00 A0 FD | 	call	#pushregs_
1cc10     44 F0 07 F1 | 	add	ptra, #68
1cc14     4A 00 00 FF 
1cc18     80 E4 05 F1 | 	add	objptr, ##38016
1cc1c     F2 16 02 FB | 	rdlong	arg03, objptr
1cc20     0B 15 02 F6 | 	mov	arg02, arg03
1cc24     01 14 66 F0 | 	shl	arg02, #1
1cc28     0B 15 02 F1 | 	add	arg02, arg03
1cc2c     02 14 66 F0 | 	shl	arg02, #2
1cc30     03 00 00 FF 
1cc34     04 E4 85 F1 | 	sub	objptr, ##1540
1cc38     F2 14 02 F1 | 	add	arg02, objptr
1cc3c     0A 15 02 FB | 	rdlong	arg02, arg02
1cc40     18 4E 05 F1 | 	add	fp, #24
1cc44     A7 14 62 FC | 	wrlong	arg02, fp
1cc48                 | ' 
1cc48                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
1cc48                 | ' if variables(varnum).vartype<array_no_type then 
1cc48     18 4E 85 F1 | 	sub	fp, #24
1cc4c     04 14 66 F0 | 	shl	arg02, #4
1cc50     32 00 00 FF 
1cc54     84 E4 85 F1 | 	sub	objptr, ##25732
1cc58     F2 14 02 F1 | 	add	arg02, objptr
1cc5c     0C 14 06 F1 | 	add	arg02, #12
1cc60     0A 17 02 FB | 	rdlong	arg03, arg02
1cc64     00 17 16 F2 | 	cmp	arg03, #256 wc
1cc68     14 00 00 FF 
1cc6c     F8 E5 85 F1 | 	sub	objptr, ##10744
1cc70     18 01 90 3D |  if_ae	jmp	#LR__2280
1cc74     C8 09 BF FD | 	call	#_pop
1cc78     A7 FA 61 FC | 	wrlong	result1, fp
1cc7c     04 4E 05 F1 | 	add	fp, #4
1cc80     A7 FC 61 FC | 	wrlong	result2, fp
1cc84     04 4E 05 F1 | 	add	fp, #4
1cc88     A7 FE 61 FC | 	wrlong	result3, fp
1cc8c     08 4E 85 F1 | 	sub	fp, #8
1cc90     A7 16 02 FB | 	rdlong	arg03, fp
1cc94     04 4E 05 F1 | 	add	fp, #4
1cc98     A7 14 02 FB | 	rdlong	arg02, fp
1cc9c     14 4E 05 F1 | 	add	fp, #20
1cca0     A7 12 02 FB | 	rdlong	arg01, fp
1cca4     04 12 66 F0 | 	shl	arg01, #4
1cca8     14 00 00 FF 
1ccac     F8 E5 05 F1 | 	add	objptr, ##10744
1ccb0     F2 12 02 F1 | 	add	arg01, objptr
1ccb4     04 12 06 F1 | 	add	arg01, #4
1ccb8     09 17 62 FC | 	wrlong	arg03, arg01
1ccbc     A7 16 02 FB | 	rdlong	arg03, fp
1ccc0     04 16 66 F0 | 	shl	arg03, #4
1ccc4     F2 16 02 F1 | 	add	arg03, objptr
1ccc8     08 16 06 F1 | 	add	arg03, #8
1cccc     0B 15 62 FC | 	wrlong	arg02, arg03
1ccd0     A7 16 02 FB | 	rdlong	arg03, fp
1ccd4     04 16 66 F0 | 	shl	arg03, #4
1ccd8     F2 16 02 F1 | 	add	arg03, objptr
1ccdc     10 4E 85 F1 | 	sub	fp, #16
1cce0     A7 14 02 FB | 	rdlong	arg02, fp
1cce4     0C 16 06 F1 | 	add	arg03, #12
1cce8     0B 15 62 FC | 	wrlong	arg02, arg03
1ccec                 | '   t1=pop() 
1ccec                 | '   variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
1ccec                 | '   if variables(varnum).vartype<>result_string2 then return
1ccec     10 4E 05 F1 | 	add	fp, #16
1ccf0     A7 16 02 FB | 	rdlong	arg03, fp
1ccf4     18 4E 85 F1 | 	sub	fp, #24
1ccf8     04 16 66 F0 | 	shl	arg03, #4
1ccfc     F2 16 02 F1 | 	add	arg03, objptr
1cd00     0C 16 06 F1 | 	add	arg03, #12
1cd04     0B 17 02 FB | 	rdlong	arg03, arg03
1cd08     2B 16 0E F2 | 	cmp	arg03, #43 wz
1cd0c     14 00 00 FF 
1cd10     F8 E5 85 F1 | 	sub	objptr, ##10744
1cd14     EC 04 90 5D |  if_ne	jmp	#LR__2303
1cd18     18 4E 05 F1 | 	add	fp, #24
1cd1c     A7 16 02 FB | 	rdlong	arg03, fp
1cd20     0B 27 02 F6 | 	mov	local01, arg03
1cd24     04 26 66 F0 | 	shl	local01, #4
1cd28     14 00 00 FF 
1cd2c     F8 E5 05 F1 | 	add	objptr, ##10744
1cd30     F2 26 02 F1 | 	add	local01, objptr
1cd34     18 4E 85 F1 | 	sub	fp, #24
1cd38     04 16 66 F0 | 	shl	arg03, #4
1cd3c     F2 16 02 F1 | 	add	arg03, objptr
1cd40     04 16 06 F1 | 	add	arg03, #4
1cd44     0B 13 02 FB | 	rdlong	arg01, arg03
1cd48     14 00 00 FF 
1cd4c     F8 E5 85 F1 | 	sub	objptr, ##10744
1cd50     64 0A BF FD | 	call	#_convertstring
1cd54     04 26 06 F1 | 	add	local01, #4
1cd58     13 FB 61 FC | 	wrlong	result1, local01
1cd5c     18 4E 05 F1 | 	add	fp, #24
1cd60     A7 26 02 FB | 	rdlong	local01, fp
1cd64     18 4E 85 F1 | 	sub	fp, #24
1cd68     04 26 66 F0 | 	shl	local01, #4
1cd6c     14 00 00 FF 
1cd70     F8 E5 05 F1 | 	add	objptr, ##10744
1cd74     F2 26 02 F1 | 	add	local01, objptr
1cd78     0C 26 06 F1 | 	add	local01, #12
1cd7c     13 3F 68 FC | 	wrlong	#31, local01
1cd80                 | '   variables(varnum).value.sresult=convertstring(variables(varnum).value.uresult)
1cd80                 | '   variables(varnum).vartype=result_string
1cd80                 | '   return
1cd80     14 00 00 FF 
1cd84     F8 E5 85 F1 | 	sub	objptr, ##10744
1cd88     78 04 90 FD | 	jmp	#LR__2303
1cd8c                 | LR__2280
1cd8c                 | ' for i=0 to 2 : arrid(i)=0 : next i
1cd8c     1C 4E 05 F1 | 	add	fp, #28
1cd90     A7 00 68 FC | 	wrlong	#0, fp
1cd94     97 16 48 FB | 	callpa	#(@LR__2282-@LR__2281)>>2,fcache_load_ptr_
1cd98                 | LR__2281
1cd98     A7 26 02 FB | 	rdlong	local01, fp
1cd9c     02 26 66 F0 | 	shl	local01, #2
1cda0     18 4E 05 F1 | 	add	fp, #24
1cda4     A7 26 02 F1 | 	add	local01, fp
1cda8     13 01 68 FC | 	wrlong	#0, local01
1cdac     18 4E 85 F1 | 	sub	fp, #24
1cdb0     A7 26 02 FB | 	rdlong	local01, fp
1cdb4     01 26 06 F1 | 	add	local01, #1
1cdb8     A7 26 62 FC | 	wrlong	local01, fp
1cdbc     03 26 16 F2 | 	cmp	local01, #3 wc
1cdc0     D4 FF 9F CD |  if_b	jmp	#LR__2281
1cdc4                 | LR__2282
1cdc4     4A 00 00 FF 
1cdc8     80 E4 05 F1 | 	add	objptr, ##38016
1cdcc     F2 16 02 FB | 	rdlong	arg03, objptr
1cdd0     0B 27 02 F6 | 	mov	local01, arg03
1cdd4     01 26 66 F0 | 	shl	local01, #1
1cdd8     0B 27 02 F1 | 	add	local01, arg03
1cddc     02 26 66 F0 | 	shl	local01, #2
1cde0     03 00 00 FF 
1cde4     04 E4 85 F1 | 	sub	objptr, ##1540
1cde8     F2 26 02 F1 | 	add	local01, objptr
1cdec     04 26 06 F1 | 	add	local01, #4
1cdf0     13 29 02 FB | 	rdlong	local02, local01
1cdf4     04 4E 05 F1 | 	add	fp, #4
1cdf8     A7 28 62 FC | 	wrlong	local02, fp
1cdfc     20 4E 85 F1 | 	sub	fp, #32
1ce00     47 00 00 FF 
1ce04     7C E4 85 F1 | 	sub	objptr, ##36476
1ce08     34 08 BF FD | 	call	#_pop
1ce0c     A7 FA 61 FC | 	wrlong	result1, fp
1ce10     04 4E 05 F1 | 	add	fp, #4
1ce14     A7 FC 61 FC | 	wrlong	result2, fp
1ce18     04 4E 05 F1 | 	add	fp, #4
1ce1c     A7 FE 61 FC | 	wrlong	result3, fp
1ce20                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
1ce20                 | ' t1=pop() ' var value
1ce20                 | ' if numpar>0 then
1ce20     18 4E 05 F1 | 	add	fp, #24
1ce24     A7 2A 02 FB | 	rdlong	local03, fp
1ce28     20 4E 85 F1 | 	sub	fp, #32
1ce2c     01 2A 16 F2 | 	cmp	local03, #1 wc
1ce30     78 00 90 CD |  if_b	jmp	#LR__2285
1ce34                 | '   for i=numpar to 1 step -1
1ce34     20 4E 05 F1 | 	add	fp, #32
1ce38     A7 2C 0A FB | 	rdlong	local04, fp wz
1ce3c     04 4E 85 F1 | 	sub	fp, #4
1ce40     A7 2C 62 FC | 	wrlong	local04, fp
1ce44     1C 4E 85 F1 | 	sub	fp, #28
1ce48     60 00 90 AD |  if_e	jmp	#LR__2284
1ce4c                 | LR__2283
1ce4c     F0 07 BF FD | 	call	#_pop
1ce50     0C 4E 05 F1 | 	add	fp, #12
1ce54     A7 FA 61 FC | 	wrlong	result1, fp
1ce58     04 4E 05 F1 | 	add	fp, #4
1ce5c     A7 FC 61 FC | 	wrlong	result2, fp
1ce60     04 4E 05 F1 | 	add	fp, #4
1ce64     A7 FE 61 FC | 	wrlong	result3, fp
1ce68     08 4E 05 F1 | 	add	fp, #8
1ce6c     A7 2A 02 FB | 	rdlong	local03, fp
1ce70     01 2A 86 F1 | 	sub	local03, #1
1ce74     02 2A 66 F0 | 	shl	local03, #2
1ce78     18 4E 05 F1 | 	add	fp, #24
1ce7c     A7 2A 02 F1 | 	add	local03, fp
1ce80     28 4E 85 F1 | 	sub	fp, #40
1ce84     A7 12 02 F6 | 	mov	arg01, fp
1ce88     0C 4E 85 F1 | 	sub	fp, #12
1ce8c     94 09 BF FD | 	call	#_converttoint
1ce90     15 FB 61 FC | 	wrlong	result1, local03
1ce94     1C 4E 05 F1 | 	add	fp, #28
1ce98     A7 2C 02 FB | 	rdlong	local04, fp
1ce9c     01 2C 8E F1 | 	sub	local04, #1 wz
1cea0     A7 2C 62 FC | 	wrlong	local04, fp
1cea4     1C 4E 85 F1 | 	sub	fp, #28
1cea8     A0 FF 9F 5D |  if_ne	jmp	#LR__2283
1ceac                 | LR__2284
1ceac                 | LR__2285
1ceac     18 4E 05 F1 | 	add	fp, #24
1ceb0     A7 26 02 FB | 	rdlong	local01, fp
1ceb4     04 26 66 F0 | 	shl	local01, #4
1ceb8     14 00 00 FF 
1cebc     F8 E5 05 F1 | 	add	objptr, ##10744
1cec0     F2 26 02 F1 | 	add	local01, objptr
1cec4     04 26 06 F1 | 	add	local01, #4
1cec8     13 13 02 FB | 	rdlong	arg01, local01
1cecc     0C 4E 05 F1 | 	add	fp, #12
1ced0     A7 12 62 FC | 	wrlong	arg01, fp
1ced4     24 4E 85 F1 | 	sub	fp, #36
1ced8     14 00 00 FF 
1cedc     F8 E5 85 F1 | 	sub	objptr, ##10744
1cee0     20 68 B0 FD | 	call	#_pslpeek
1cee4     FD 2C 32 F9 | 	getword	local04, result1, #0
1cee8     28 4E 05 F1 | 	add	fp, #40
1ceec     A7 2C 62 FC | 	wrlong	local04, fp
1cef0     04 4E 85 F1 | 	sub	fp, #4
1cef4     A7 12 02 FB | 	rdlong	arg01, fp
1cef8     24 4E 85 F1 | 	sub	fp, #36
1cefc     02 12 06 F1 | 	add	arg01, #2
1cf00     A8 67 B0 FD | 	call	#_pspeek
1cf04     FD FA E1 F8 | 	getbyte	result1, result1, #0
1cf08     2C 4E 05 F1 | 	add	fp, #44
1cf0c     A7 FA 61 FC | 	wrlong	result1, fp
1cf10                 | ' esize=pspeek(arrptr+2)
1cf10                 | ' if arrid(0)>=pslpeek(arrptr+4) orelse arrid(1)>=pslpeek(arrptr+8) orelse arrid(2)>=pslpeek(arrptr+12) then printerror(49) : return
1cf10     08 4E 85 F1 | 	sub	fp, #8
1cf14     A7 12 02 FB | 	rdlong	arg01, fp
1cf18     24 4E 85 F1 | 	sub	fp, #36
1cf1c     04 12 06 F1 | 	add	arg01, #4
1cf20     E0 67 B0 FD | 	call	#_pslpeek
1cf24     FD 2C 02 F6 | 	mov	local04, result1
1cf28     34 4E 05 F1 | 	add	fp, #52
1cf2c     A7 26 02 FB | 	rdlong	local01, fp
1cf30     34 4E 85 F1 | 	sub	fp, #52
1cf34     16 27 12 F2 | 	cmp	local01, local04 wc
1cf38     54 00 90 3D |  if_ae	jmp	#LR__2286
1cf3c     24 4E 05 F1 | 	add	fp, #36
1cf40     A7 12 02 FB | 	rdlong	arg01, fp
1cf44     24 4E 85 F1 | 	sub	fp, #36
1cf48     08 12 06 F1 | 	add	arg01, #8
1cf4c     B4 67 B0 FD | 	call	#_pslpeek
1cf50     FD 26 02 F6 | 	mov	local01, result1
1cf54     38 4E 05 F1 | 	add	fp, #56
1cf58     A7 2C 02 FB | 	rdlong	local04, fp
1cf5c     38 4E 85 F1 | 	sub	fp, #56
1cf60     13 2D 12 F2 | 	cmp	local04, local01 wc
1cf64     28 00 90 3D |  if_ae	jmp	#LR__2286
1cf68     24 4E 05 F1 | 	add	fp, #36
1cf6c     A7 12 02 FB | 	rdlong	arg01, fp
1cf70     24 4E 85 F1 | 	sub	fp, #36
1cf74     0C 12 06 F1 | 	add	arg01, #12
1cf78     88 67 B0 FD | 	call	#_pslpeek
1cf7c     3C 4E 05 F1 | 	add	fp, #60
1cf80     A7 2C 02 FB | 	rdlong	local04, fp
1cf84     3C 4E 85 F1 | 	sub	fp, #60
1cf88     FD 2C 12 F2 | 	cmp	local04, result1 wc
1cf8c     10 00 90 CD |  if_b	jmp	#LR__2287
1cf90                 | LR__2286
1cf90     31 12 06 F6 | 	mov	arg01, #49
1cf94     00 14 06 F6 | 	mov	arg02, #0
1cf98     98 64 B0 FD | 	call	#_printerror
1cf9c     64 02 90 FD | 	jmp	#LR__2303
1cfa0                 | LR__2287
1cfa0     24 4E 05 F1 | 	add	fp, #36
1cfa4     A7 12 02 FB | 	rdlong	arg01, fp
1cfa8     09 2D 02 F6 | 	mov	local04, arg01
1cfac     10 2C 06 F1 | 	add	local04, #16
1cfb0     24 4E 85 F1 | 	sub	fp, #36
1cfb4     04 12 06 F1 | 	add	arg01, #4
1cfb8     48 67 B0 FD | 	call	#_pslpeek
1cfbc     FD 26 02 F6 | 	mov	local01, result1
1cfc0     38 4E 05 F1 | 	add	fp, #56
1cfc4     A7 28 02 FB | 	rdlong	local02, fp
1cfc8     14 27 02 FD | 	qmul	local01, local02
1cfcc     04 4E 85 F1 | 	sub	fp, #4
1cfd0     A7 2A 02 FB | 	rdlong	local03, fp
1cfd4     10 4E 85 F1 | 	sub	fp, #16
1cfd8     A7 12 02 FB | 	rdlong	arg01, fp
1cfdc     24 4E 85 F1 | 	sub	fp, #36
1cfe0     08 12 06 F1 | 	add	arg01, #8
1cfe4     18 28 62 FD | 	getqx	local02
1cfe8     14 2B 02 F1 | 	add	local03, local02
1cfec     14 67 B0 FD | 	call	#_pslpeek
1cff0     FD 28 02 F6 | 	mov	local02, result1
1cff4     24 4E 05 F1 | 	add	fp, #36
1cff8     A7 12 02 FB | 	rdlong	arg01, fp
1cffc     24 4E 85 F1 | 	sub	fp, #36
1d000     04 12 06 F1 | 	add	arg01, #4
1d004     FC 66 B0 FD | 	call	#_pslpeek
1d008     FD 28 02 FD | 	qmul	local02, result1
1d00c     3C 4E 05 F1 | 	add	fp, #60
1d010     A7 28 02 FB | 	rdlong	local02, fp
1d014     18 26 62 FD | 	getqx	local01
1d018     14 27 02 FD | 	qmul	local01, local02
1d01c     10 4E 85 F1 | 	sub	fp, #16
1d020     A7 28 02 FB | 	rdlong	local02, fp
1d024     18 26 62 FD | 	getqx	local01
1d028     13 2B 02 F1 | 	add	local03, local01
1d02c     15 29 02 FD | 	qmul	local02, local03
1d030     04 4E 05 F1 | 	add	fp, #4
1d034                 | ' 
1d034                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
1d034                 | ' select case arrtype
1d034     18 2A 62 FD | 	getqx	local03
1d038     15 2D 02 F1 | 	add	local04, local03
1d03c     A7 2C 62 FC | 	wrlong	local04, fp
1d040     08 4E 85 F1 | 	sub	fp, #8
1d044     A7 2E 02 FB | 	rdlong	local05, fp
1d048     28 4E 85 F1 | 	sub	fp, #40
1d04c     00 2F 86 F1 | 	sub	local05, #256
1d050     0C 2E 26 F3 | 	fle	local05, #12
1d054     30 2E 62 FD | 	jmprel	local05
1d058                 | LR__2288
1d058     30 00 90 FD | 	jmp	#LR__2289
1d05c     58 00 90 FD | 	jmp	#LR__2290
1d060     6C 00 90 FD | 	jmp	#LR__2291
1d064     80 00 90 FD | 	jmp	#LR__2292
1d068     B0 00 90 FD | 	jmp	#LR__2293
1d06c     E0 00 90 FD | 	jmp	#LR__2294
1d070     F4 00 90 FD | 	jmp	#LR__2295
1d074     08 01 90 FD | 	jmp	#LR__2296
1d078     1C 01 90 FD | 	jmp	#LR__2297
1d07c     30 01 90 FD | 	jmp	#LR__2298
1d080     44 01 90 FD | 	jmp	#LR__2299
1d084     58 01 90 FD | 	jmp	#LR__2300
1d088     6C 01 90 FD | 	jmp	#LR__2301
1d08c                 | LR__2289
1d08c     A7 12 02 F6 | 	mov	arg01, fp
1d090     30 4E 05 F1 | 	add	fp, #48
1d094     A7 14 02 FB | 	rdlong	arg02, fp
1d098     30 4E 85 F1 | 	sub	fp, #48
1d09c     0C 16 06 F6 | 	mov	arg03, #12
1d0a0     0B 00 00 FF 
1d0a4     CC E4 05 F1 | 	add	objptr, ##5836
1d0a8     B8 91 B0 FD | 	call	#_psram_spin2_write
1d0ac     0B 00 00 FF 
1d0b0     CC E4 85 F1 | 	sub	objptr, ##5836
1d0b4     4C 01 90 FD | 	jmp	#LR__2302
1d0b8                 | LR__2290
1d0b8     30 4E 05 F1 | 	add	fp, #48
1d0bc     A7 12 02 FB | 	rdlong	arg01, fp
1d0c0     30 4E 85 F1 | 	sub	fp, #48
1d0c4     A7 14 02 FB | 	rdlong	arg02, fp
1d0c8     98 65 B0 FD | 	call	#_pspoke
1d0cc     34 01 90 FD | 	jmp	#LR__2302
1d0d0                 | LR__2291
1d0d0     30 4E 05 F1 | 	add	fp, #48
1d0d4     A7 12 02 FB | 	rdlong	arg01, fp
1d0d8     30 4E 85 F1 | 	sub	fp, #48
1d0dc     A7 14 02 FB | 	rdlong	arg02, fp
1d0e0     80 65 B0 FD | 	call	#_pspoke
1d0e4     1C 01 90 FD | 	jmp	#LR__2302
1d0e8                 | LR__2292
1d0e8     30 4E 05 F1 | 	add	fp, #48
1d0ec     A7 12 02 FB | 	rdlong	arg01, fp
1d0f0     30 4E 85 F1 | 	sub	fp, #48
1d0f4     A7 14 02 FB | 	rdlong	arg02, fp
1d0f8     68 65 B0 FD | 	call	#_pspoke
1d0fc     30 4E 05 F1 | 	add	fp, #48
1d100     A7 12 02 FB | 	rdlong	arg01, fp
1d104     30 4E 85 F1 | 	sub	fp, #48
1d108     01 12 06 F1 | 	add	arg01, #1
1d10c     A7 14 02 FB | 	rdlong	arg02, fp
1d110     08 14 46 F0 | 	shr	arg02, #8
1d114     4C 65 B0 FD | 	call	#_pspoke
1d118     E8 00 90 FD | 	jmp	#LR__2302
1d11c                 | LR__2293
1d11c     30 4E 05 F1 | 	add	fp, #48
1d120     A7 12 02 FB | 	rdlong	arg01, fp
1d124     30 4E 85 F1 | 	sub	fp, #48
1d128     A7 14 02 FB | 	rdlong	arg02, fp
1d12c     34 65 B0 FD | 	call	#_pspoke
1d130     30 4E 05 F1 | 	add	fp, #48
1d134     A7 12 02 FB | 	rdlong	arg01, fp
1d138     30 4E 85 F1 | 	sub	fp, #48
1d13c     01 12 06 F1 | 	add	arg01, #1
1d140     A7 14 02 FB | 	rdlong	arg02, fp
1d144     08 14 46 F0 | 	shr	arg02, #8
1d148     18 65 B0 FD | 	call	#_pspoke
1d14c     B4 00 90 FD | 	jmp	#LR__2302
1d150                 | LR__2294
1d150     30 4E 05 F1 | 	add	fp, #48
1d154     A7 12 02 FB | 	rdlong	arg01, fp
1d158     30 4E 85 F1 | 	sub	fp, #48
1d15c     A7 14 02 FB | 	rdlong	arg02, fp
1d160     70 64 B0 FD | 	call	#_pslpoke
1d164     9C 00 90 FD | 	jmp	#LR__2302
1d168                 | LR__2295
1d168     30 4E 05 F1 | 	add	fp, #48
1d16c     A7 12 02 FB | 	rdlong	arg01, fp
1d170     30 4E 85 F1 | 	sub	fp, #48
1d174     A7 14 02 FB | 	rdlong	arg02, fp
1d178     58 64 B0 FD | 	call	#_pslpoke
1d17c     84 00 90 FD | 	jmp	#LR__2302
1d180                 | LR__2296
1d180     30 4E 05 F1 | 	add	fp, #48
1d184     A7 12 02 FB | 	rdlong	arg01, fp
1d188     30 4E 85 F1 | 	sub	fp, #48
1d18c     A7 14 02 FB | 	rdlong	arg02, fp
1d190     40 64 B0 FD | 	call	#_pslpoke
1d194     6C 00 90 FD | 	jmp	#LR__2302
1d198                 | LR__2297
1d198     30 4E 05 F1 | 	add	fp, #48
1d19c     A7 12 02 FB | 	rdlong	arg01, fp
1d1a0     30 4E 85 F1 | 	sub	fp, #48
1d1a4     A7 14 02 FB | 	rdlong	arg02, fp
1d1a8     28 64 B0 FD | 	call	#_pslpoke
1d1ac     54 00 90 FD | 	jmp	#LR__2302
1d1b0                 | LR__2298
1d1b0     30 4E 05 F1 | 	add	fp, #48
1d1b4     A7 12 02 FB | 	rdlong	arg01, fp
1d1b8     30 4E 85 F1 | 	sub	fp, #48
1d1bc     A7 14 02 FB | 	rdlong	arg02, fp
1d1c0     10 64 B0 FD | 	call	#_pslpoke
1d1c4     3C 00 90 FD | 	jmp	#LR__2302
1d1c8                 | LR__2299
1d1c8     30 4E 05 F1 | 	add	fp, #48
1d1cc     A7 12 02 FB | 	rdlong	arg01, fp
1d1d0     30 4E 85 F1 | 	sub	fp, #48
1d1d4     A7 14 02 FB | 	rdlong	arg02, fp
1d1d8     F8 63 B0 FD | 	call	#_pslpoke
1d1dc     24 00 90 FD | 	jmp	#LR__2302
1d1e0                 | LR__2300
1d1e0     30 4E 05 F1 | 	add	fp, #48
1d1e4     A7 12 02 FB | 	rdlong	arg01, fp
1d1e8     30 4E 85 F1 | 	sub	fp, #48
1d1ec     A7 14 02 FB | 	rdlong	arg02, fp
1d1f0     E0 63 B0 FD | 	call	#_pslpoke
1d1f4     0C 00 90 FD | 	jmp	#LR__2302
1d1f8                 | LR__2301
1d1f8     32 12 06 F6 | 	mov	arg01, #50
1d1fc     00 14 06 F6 | 	mov	arg02, #0
1d200     30 62 B0 FD | 	call	#_printerror
1d204                 | LR__2302
1d204                 | LR__2303
1d204     A7 F0 03 F6 | 	mov	ptra, fp
1d208     B2 00 A0 FD | 	call	#popregs_
1d20c                 | _do_assign_ret
1d20c     2D 00 64 FD | 	ret
1d210                 | 
1d210                 | ' 
1d210                 | ' 
1d210                 | ' '------------------ getvar.  Read a variable and push it to the RPN stack
1d210                 | ' 
1d210                 | ' sub do_getvar
1d210                 | _do_getvar
1d210     04 4A 05 F6 | 	mov	COUNT_, #4
1d214     A8 00 A0 FD | 	call	#pushregs_
1d218     3C F0 07 F1 | 	add	ptra, #60
1d21c                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
1d21c     4A 00 00 FF 
1d220     80 E4 05 F1 | 	add	objptr, ##38016
1d224     F2 26 02 FB | 	rdlong	local01, objptr
1d228     13 17 02 F6 | 	mov	arg03, local01
1d22c     01 16 66 F0 | 	shl	arg03, #1
1d230     13 17 02 F1 | 	add	arg03, local01
1d234     02 16 66 F0 | 	shl	arg03, #2
1d238     03 00 00 FF 
1d23c     04 E4 85 F1 | 	sub	objptr, ##1540
1d240     F2 16 02 F1 | 	add	arg03, objptr
1d244     04 16 06 F1 | 	add	arg03, #4
1d248     0B 17 0A FB | 	rdlong	arg03, arg03 wz
1d24c     47 00 00 FF 
1d250     7C E4 85 F1 | 	sub	objptr, ##36476
1d254     C4 00 90 5D |  if_ne	jmp	#LR__2311
1d258     4A 00 00 FF 
1d25c     80 E4 05 F1 | 	add	objptr, ##38016
1d260     F2 26 02 FB | 	rdlong	local01, objptr
1d264     13 13 02 F6 | 	mov	arg01, local01
1d268     01 12 66 F0 | 	shl	arg01, #1
1d26c     13 13 02 F1 | 	add	arg01, local01
1d270     02 12 66 F0 | 	shl	arg01, #2
1d274     03 00 00 FF 
1d278     04 E4 85 F1 | 	sub	objptr, ##1540
1d27c     F2 12 02 F1 | 	add	arg01, objptr
1d280     09 27 02 FB | 	rdlong	local01, arg01
1d284     04 26 66 F0 | 	shl	local01, #4
1d288     32 00 00 FF 
1d28c     84 E4 85 F1 | 	sub	objptr, ##25732
1d290     F2 26 02 F1 | 	add	local01, objptr
1d294     04 26 06 F1 | 	add	local01, #4
1d298     13 13 02 FB | 	rdlong	arg01, local01
1d29c     04 26 06 F1 | 	add	local01, #4
1d2a0     13 27 02 FB | 	rdlong	local01, local01
1d2a4     A7 12 62 FC | 	wrlong	arg01, fp
1d2a8     04 4E 05 F1 | 	add	fp, #4
1d2ac     A7 26 62 FC | 	wrlong	local01, fp
1d2b0     35 00 00 FF 
1d2b4     88 E4 05 F1 | 	add	objptr, ##27272
1d2b8     F2 26 02 FB | 	rdlong	local01, objptr
1d2bc     13 13 02 F6 | 	mov	arg01, local01
1d2c0     01 12 66 F0 | 	shl	arg01, #1
1d2c4     13 13 02 F1 | 	add	arg01, local01
1d2c8     02 12 66 F0 | 	shl	arg01, #2
1d2cc     03 00 00 FF 
1d2d0     04 E4 85 F1 | 	sub	objptr, ##1540
1d2d4     F2 12 02 F1 | 	add	arg01, objptr
1d2d8     09 27 02 FB | 	rdlong	local01, arg01
1d2dc     04 26 66 F0 | 	shl	local01, #4
1d2e0     32 00 00 FF 
1d2e4     84 E4 85 F1 | 	sub	objptr, ##25732
1d2e8     F2 26 02 F1 | 	add	local01, objptr
1d2ec     0C 26 06 F1 | 	add	local01, #12
1d2f0     13 27 02 FB | 	rdlong	local01, local01
1d2f4     04 4E 05 F1 | 	add	fp, #4
1d2f8     A7 26 62 FC | 	wrlong	local01, fp
1d2fc                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
1d2fc                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
1d2fc                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
1d2fc     08 4E 85 F1 | 	sub	fp, #8
1d300     00 27 16 F2 | 	cmp	local01, #256 wc
1d304     14 00 00 FF 
1d308     F8 E5 85 F1 | 	sub	objptr, ##10744
1d30c     0C 00 90 3D |  if_ae	jmp	#LR__2310
1d310     A7 12 02 F6 | 	mov	arg01, fp
1d314     C0 03 BF FD | 	call	#_push
1d318     A0 04 90 FD | 	jmp	#LR__2332
1d31c                 | LR__2310
1d31c                 | LR__2311
1d31c     4A 00 00 FF 
1d320     80 E4 05 F1 | 	add	objptr, ##38016
1d324     F2 16 02 FB | 	rdlong	arg03, objptr
1d328     0B 15 02 F6 | 	mov	arg02, arg03
1d32c     01 14 66 F0 | 	shl	arg02, #1
1d330     0B 15 02 F1 | 	add	arg02, arg03
1d334     02 14 66 F0 | 	shl	arg02, #2
1d338     03 00 00 FF 
1d33c     04 E4 85 F1 | 	sub	objptr, ##1540
1d340     F2 14 02 F1 | 	add	arg02, objptr
1d344     0A 17 02 FB | 	rdlong	arg03, arg02
1d348     04 16 66 F0 | 	shl	arg03, #4
1d34c     32 00 00 FF 
1d350     84 E4 85 F1 | 	sub	objptr, ##25732
1d354     F2 16 02 F1 | 	add	arg03, objptr
1d358     04 16 06 F1 | 	add	arg03, #4
1d35c     0B 13 02 FB | 	rdlong	arg01, arg03
1d360     0C 4E 05 F1 | 	add	fp, #12
1d364     A7 12 62 FC | 	wrlong	arg01, fp
1d368     0C 4E 85 F1 | 	sub	fp, #12
1d36c     14 00 00 FF 
1d370     F8 E5 85 F1 | 	sub	objptr, ##10744
1d374     8C 63 B0 FD | 	call	#_pslpeek
1d378     FD FA 31 F9 | 	getword	result1, result1, #0
1d37c     10 4E 05 F1 | 	add	fp, #16
1d380     A7 FA 61 FC | 	wrlong	result1, fp
1d384     4A 00 00 FF 
1d388     80 E4 05 F1 | 	add	objptr, ##38016
1d38c     F2 16 02 FB | 	rdlong	arg03, objptr
1d390     0B 15 02 F6 | 	mov	arg02, arg03
1d394     01 14 66 F0 | 	shl	arg02, #1
1d398     0B 15 02 F1 | 	add	arg02, arg03
1d39c     02 14 66 F0 | 	shl	arg02, #2
1d3a0     03 00 00 FF 
1d3a4     04 E4 85 F1 | 	sub	objptr, ##1540
1d3a8     F2 14 02 F1 | 	add	arg02, objptr
1d3ac     04 14 06 F1 | 	add	arg02, #4
1d3b0     0A 17 02 FB | 	rdlong	arg03, arg02
1d3b4     04 4E 05 F1 | 	add	fp, #4
1d3b8     A7 16 62 FC | 	wrlong	arg03, fp
1d3bc     08 4E 85 F1 | 	sub	fp, #8
1d3c0     A7 12 02 FB | 	rdlong	arg01, fp
1d3c4     0C 4E 85 F1 | 	sub	fp, #12
1d3c8     02 12 06 F1 | 	add	arg01, #2
1d3cc     47 00 00 FF 
1d3d0     7C E4 85 F1 | 	sub	objptr, ##36476
1d3d4     D4 62 B0 FD | 	call	#_pspeek
1d3d8     FD FA E1 F8 | 	getbyte	result1, result1, #0
1d3dc     18 4E 05 F1 | 	add	fp, #24
1d3e0     A7 FA 61 FC | 	wrlong	result1, fp
1d3e4     0C 4E 85 F1 | 	sub	fp, #12
1d3e8     A7 12 02 FB | 	rdlong	arg01, fp
1d3ec     0C 4E 85 F1 | 	sub	fp, #12
1d3f0     04 12 06 F1 | 	add	arg01, #4
1d3f4     0C 63 B0 FD | 	call	#_pslpeek
1d3f8     1C 4E 05 F1 | 	add	fp, #28
1d3fc     A7 FA 61 FC | 	wrlong	result1, fp
1d400     10 4E 85 F1 | 	sub	fp, #16
1d404     A7 12 02 FB | 	rdlong	arg01, fp
1d408     0C 4E 85 F1 | 	sub	fp, #12
1d40c     08 12 06 F1 | 	add	arg01, #8
1d410     F0 62 B0 FD | 	call	#_pslpeek
1d414     20 4E 05 F1 | 	add	fp, #32
1d418     A7 FA 61 FC | 	wrlong	result1, fp
1d41c     14 4E 85 F1 | 	sub	fp, #20
1d420     A7 12 02 FB | 	rdlong	arg01, fp
1d424     0C 4E 85 F1 | 	sub	fp, #12
1d428     0C 12 06 F1 | 	add	arg01, #12
1d42c     D4 62 B0 FD | 	call	#_pslpeek
1d430     24 4E 05 F1 | 	add	fp, #36
1d434     A7 FA 61 FC | 	wrlong	result1, fp
1d438                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
1d438                 | ' esize=pspeek(arrptr+2)
1d438                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
1d438                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
1d438                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
1d438                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
1d438     10 4E 85 F1 | 	sub	fp, #16
1d43c     A7 16 02 FB | 	rdlong	arg03, fp
1d440     14 4E 85 F1 | 	sub	fp, #20
1d444     03 16 16 F2 | 	cmp	arg03, #3 wc
1d448     38 00 90 CD |  if_b	jmp	#LR__2312
1d44c     F0 01 BF FD | 	call	#_pop
1d450     FF 16 02 F6 | 	mov	arg03, result3
1d454     A7 FA 61 FC | 	wrlong	result1, fp
1d458     04 4E 05 F1 | 	add	fp, #4
1d45c     A7 FC 61 FC | 	wrlong	result2, fp
1d460     04 4E 05 F1 | 	add	fp, #4
1d464     A7 16 62 FC | 	wrlong	arg03, fp
1d468     08 4E 85 F1 | 	sub	fp, #8
1d46c     A7 12 02 F6 | 	mov	arg01, fp
1d470     B0 03 BF FD | 	call	#_converttoint
1d474     30 4E 05 F1 | 	add	fp, #48
1d478     A7 FA 61 FC | 	wrlong	result1, fp
1d47c     30 4E 85 F1 | 	sub	fp, #48
1d480     0C 00 90 FD | 	jmp	#LR__2313
1d484                 | LR__2312
1d484     30 4E 05 F1 | 	add	fp, #48
1d488     A7 00 68 FC | 	wrlong	#0, fp
1d48c     30 4E 85 F1 | 	sub	fp, #48
1d490                 | LR__2313
1d490                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
1d490     14 4E 05 F1 | 	add	fp, #20
1d494     A7 16 02 FB | 	rdlong	arg03, fp
1d498     14 4E 85 F1 | 	sub	fp, #20
1d49c     02 16 16 F2 | 	cmp	arg03, #2 wc
1d4a0     38 00 90 CD |  if_b	jmp	#LR__2314
1d4a4     98 01 BF FD | 	call	#_pop
1d4a8     FF 16 02 F6 | 	mov	arg03, result3
1d4ac     A7 FA 61 FC | 	wrlong	result1, fp
1d4b0     04 4E 05 F1 | 	add	fp, #4
1d4b4     A7 FC 61 FC | 	wrlong	result2, fp
1d4b8     04 4E 05 F1 | 	add	fp, #4
1d4bc     A7 16 62 FC | 	wrlong	arg03, fp
1d4c0     08 4E 85 F1 | 	sub	fp, #8
1d4c4     A7 12 02 F6 | 	mov	arg01, fp
1d4c8     58 03 BF FD | 	call	#_converttoint
1d4cc     2C 4E 05 F1 | 	add	fp, #44
1d4d0     A7 FA 61 FC | 	wrlong	result1, fp
1d4d4     2C 4E 85 F1 | 	sub	fp, #44
1d4d8     0C 00 90 FD | 	jmp	#LR__2315
1d4dc                 | LR__2314
1d4dc     2C 4E 05 F1 | 	add	fp, #44
1d4e0     A7 00 68 FC | 	wrlong	#0, fp
1d4e4     2C 4E 85 F1 | 	sub	fp, #44
1d4e8                 | LR__2315
1d4e8                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
1d4e8     14 4E 05 F1 | 	add	fp, #20
1d4ec     A7 16 02 FB | 	rdlong	arg03, fp
1d4f0     14 4E 85 F1 | 	sub	fp, #20
1d4f4     01 16 16 F2 | 	cmp	arg03, #1 wc
1d4f8     38 00 90 CD |  if_b	jmp	#LR__2316
1d4fc     40 01 BF FD | 	call	#_pop
1d500     FF 16 02 F6 | 	mov	arg03, result3
1d504     A7 FA 61 FC | 	wrlong	result1, fp
1d508     04 4E 05 F1 | 	add	fp, #4
1d50c     A7 FC 61 FC | 	wrlong	result2, fp
1d510     04 4E 05 F1 | 	add	fp, #4
1d514     A7 16 62 FC | 	wrlong	arg03, fp
1d518     08 4E 85 F1 | 	sub	fp, #8
1d51c     A7 12 02 F6 | 	mov	arg01, fp
1d520     00 03 BF FD | 	call	#_converttoint
1d524     28 4E 05 F1 | 	add	fp, #40
1d528     A7 FA 61 FC | 	wrlong	result1, fp
1d52c     28 4E 85 F1 | 	sub	fp, #40
1d530     0C 00 90 FD | 	jmp	#LR__2317
1d534                 | LR__2316
1d534     28 4E 05 F1 | 	add	fp, #40
1d538     A7 00 68 FC | 	wrlong	#0, fp
1d53c     28 4E 85 F1 | 	sub	fp, #40
1d540                 | LR__2317
1d540     0C 4E 05 F1 | 	add	fp, #12
1d544     A7 28 02 FB | 	rdlong	local02, fp
1d548     1C 4E 05 F1 | 	add	fp, #28
1d54c     A7 2A 02 FB | 	rdlong	local03, fp
1d550     04 4E 05 F1 | 	add	fp, #4
1d554     A7 FC 01 FB | 	rdlong	result2, fp
1d558     10 4E 85 F1 | 	sub	fp, #16
1d55c     A7 FE 01 FB | 	rdlong	result3, fp
1d560     FF FC 01 FD | 	qmul	result2, result3
1d564     10 28 06 F1 | 	add	local02, #16
1d568     14 4E 05 F1 | 	add	fp, #20
1d56c     A7 FC 01 FB | 	rdlong	result2, fp
1d570     18 FA 61 FD | 	getqx	result1
1d574     FF FC 01 FD | 	qmul	result2, result3
1d578     FD 2A 02 F1 | 	add	local03, result1
1d57c     10 4E 85 F1 | 	sub	fp, #16
1d580     A7 FE 01 FB | 	rdlong	result3, fp
1d584     18 FC 61 FD | 	getqx	result2
1d588     FF FC 01 FD | 	qmul	result2, result3
1d58c     08 4E 85 F1 | 	sub	fp, #8
1d590     A7 FE 01 FB | 	rdlong	result3, fp
1d594     18 FC 61 FD | 	getqx	result2
1d598     FE 2A 02 F1 | 	add	local03, result2
1d59c     FF 2A 02 FD | 	qmul	local03, result3
1d5a0     1C 4E 05 F1 | 	add	fp, #28
1d5a4                 | ' 
1d5a4                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize 
1d5a4                 | ' 
1d5a4                 | ' select case vartype
1d5a4     18 FC 61 FD | 	getqx	result2
1d5a8     FE 28 02 F1 | 	add	local02, result2
1d5ac     A7 28 62 FC | 	wrlong	local02, fp
1d5b0     24 4E 85 F1 | 	sub	fp, #36
1d5b4     A7 2C 02 FB | 	rdlong	local04, fp
1d5b8     10 4E 85 F1 | 	sub	fp, #16
1d5bc     00 2D 86 F1 | 	sub	local04, #256
1d5c0     0C 2C 26 F3 | 	fle	local04, #12
1d5c4     30 2C 62 FD | 	jmprel	local04
1d5c8                 | LR__2318
1d5c8     30 00 90 FD | 	jmp	#LR__2319
1d5cc     58 00 90 FD | 	jmp	#LR__2320
1d5d0     8C 00 90 FD | 	jmp	#LR__2321
1d5d4     AC 00 90 FD | 	jmp	#LR__2322
1d5d8     E8 00 90 FD | 	jmp	#LR__2323
1d5dc     08 01 90 FD | 	jmp	#LR__2324
1d5e0     24 01 90 FD | 	jmp	#LR__2325
1d5e4     40 01 90 FD | 	jmp	#LR__2326
1d5e8     50 01 90 FD | 	jmp	#LR__2327
1d5ec     60 01 90 FD | 	jmp	#LR__2328
1d5f0     7C 01 90 FD | 	jmp	#LR__2329
1d5f4     8C 01 90 FD | 	jmp	#LR__2330
1d5f8     B8 01 90 FD | 	jmp	#LR__2331
1d5fc                 | LR__2319
1d5fc     A7 12 02 F6 | 	mov	arg01, fp
1d600     34 4E 05 F1 | 	add	fp, #52
1d604     A7 14 02 FB | 	rdlong	arg02, fp
1d608     34 4E 85 F1 | 	sub	fp, #52
1d60c     0C 16 06 F6 | 	mov	arg03, #12
1d610     0B 00 00 FF 
1d614     CC E4 05 F1 | 	add	objptr, ##5836
1d618     AC 8B B0 FD | 	call	#_psram_spin2_read1
1d61c     0B 00 00 FF 
1d620     CC E4 85 F1 | 	sub	objptr, ##5836
1d624     8C 01 90 FD | 	jmp	#LR__2331
1d628                 | LR__2320
1d628     08 4E 05 F1 | 	add	fp, #8
1d62c     A7 38 68 FC | 	wrlong	#28, fp
1d630     2C 4E 05 F1 | 	add	fp, #44
1d634     A7 12 02 FB | 	rdlong	arg01, fp
1d638     34 4E 85 F1 | 	sub	fp, #52
1d63c     6C 60 B0 FD | 	call	#_pspeek
1d640     FD FA E1 F8 | 	getbyte	result1, result1, #0
1d644     A7 FA 61 FC | 	wrlong	result1, fp
1d648     80 FA 15 F2 | 	cmp	result1, #128 wc
1d64c     00 27 66 36 |  if_ae	neg	local01, #256
1d650     A7 2A 02 3B |  if_ae	rdlong	local03, fp
1d654     15 27 42 35 |  if_ae	or	local01, local03
1d658     A7 26 62 3C |  if_ae	wrlong	local01, fp
1d65c     54 01 90 FD | 	jmp	#LR__2331
1d660                 | LR__2321
1d660     08 4E 05 F1 | 	add	fp, #8
1d664     A7 3A 68 FC | 	wrlong	#29, fp
1d668     2C 4E 05 F1 | 	add	fp, #44
1d66c     A7 12 02 FB | 	rdlong	arg01, fp
1d670     34 4E 85 F1 | 	sub	fp, #52
1d674     34 60 B0 FD | 	call	#_pspeek
1d678     FD FA E1 F8 | 	getbyte	result1, result1, #0
1d67c     A7 FA 61 FC | 	wrlong	result1, fp
1d680     30 01 90 FD | 	jmp	#LR__2331
1d684                 | LR__2322
1d684     08 4E 05 F1 | 	add	fp, #8
1d688     A7 38 68 FC | 	wrlong	#28, fp
1d68c     2C 4E 05 F1 | 	add	fp, #44
1d690     A7 12 02 FB | 	rdlong	arg01, fp
1d694     34 4E 85 F1 | 	sub	fp, #52
1d698     68 60 B0 FD | 	call	#_pslpeek
1d69c     FD FA 31 F9 | 	getword	result1, result1, #0
1d6a0     A7 FA 61 FC | 	wrlong	result1, fp
1d6a4     40 00 00 FF 
1d6a8     00 FA 15 F2 | 	cmp	result1, ##32768 wc
1d6ac     FF 7F 00 3F 
1d6b0     00 27 06 36 |  if_ae	mov	local01, ##16776960
1d6b4     A7 2A 02 3B |  if_ae	rdlong	local03, fp
1d6b8     15 27 42 35 |  if_ae	or	local01, local03
1d6bc     A7 26 62 3C |  if_ae	wrlong	local01, fp
1d6c0     F0 00 90 FD | 	jmp	#LR__2331
1d6c4                 | LR__2323
1d6c4     08 4E 05 F1 | 	add	fp, #8
1d6c8     A7 3A 68 FC | 	wrlong	#29, fp
1d6cc     2C 4E 05 F1 | 	add	fp, #44
1d6d0     A7 12 02 FB | 	rdlong	arg01, fp
1d6d4     34 4E 85 F1 | 	sub	fp, #52
1d6d8     28 60 B0 FD | 	call	#_pslpeek
1d6dc     FD FA 31 F9 | 	getword	result1, result1, #0
1d6e0     A7 FA 61 FC | 	wrlong	result1, fp
1d6e4     CC 00 90 FD | 	jmp	#LR__2331
1d6e8                 | LR__2324
1d6e8     08 4E 05 F1 | 	add	fp, #8
1d6ec     A7 38 68 FC | 	wrlong	#28, fp
1d6f0     2C 4E 05 F1 | 	add	fp, #44
1d6f4     A7 12 02 FB | 	rdlong	arg01, fp
1d6f8     34 4E 85 F1 | 	sub	fp, #52
1d6fc     04 60 B0 FD | 	call	#_pslpeek
1d700     A7 FA 61 FC | 	wrlong	result1, fp
1d704     AC 00 90 FD | 	jmp	#LR__2331
1d708                 | LR__2325
1d708     08 4E 05 F1 | 	add	fp, #8
1d70c     A7 3A 68 FC | 	wrlong	#29, fp
1d710     2C 4E 05 F1 | 	add	fp, #44
1d714     A7 12 02 FB | 	rdlong	arg01, fp
1d718     34 4E 85 F1 | 	sub	fp, #52
1d71c     E4 5F B0 FD | 	call	#_pslpeek
1d720     A7 FA 61 FC | 	wrlong	result1, fp
1d724     8C 00 90 FD | 	jmp	#LR__2331
1d728                 | LR__2326
1d728     08 4E 05 F1 | 	add	fp, #8
1d72c     A7 FE 69 FC | 	wrlong	#255, fp
1d730     08 4E 85 F1 | 	sub	fp, #8
1d734     A7 60 68 FC | 	wrlong	#48, fp
1d738     78 00 90 FD | 	jmp	#LR__2331
1d73c                 | LR__2327
1d73c     08 4E 05 F1 | 	add	fp, #8
1d740     A7 FE 69 FC | 	wrlong	#255, fp
1d744     08 4E 85 F1 | 	sub	fp, #8
1d748     A7 60 68 FC | 	wrlong	#48, fp
1d74c     64 00 90 FD | 	jmp	#LR__2331
1d750                 | LR__2328
1d750     08 4E 05 F1 | 	add	fp, #8
1d754     A7 3C 68 FC | 	wrlong	#30, fp
1d758     2C 4E 05 F1 | 	add	fp, #44
1d75c     A7 12 02 FB | 	rdlong	arg01, fp
1d760     34 4E 85 F1 | 	sub	fp, #52
1d764     9C 5F B0 FD | 	call	#_pslpeek
1d768     A7 FA 61 FC | 	wrlong	result1, fp
1d76c     44 00 90 FD | 	jmp	#LR__2331
1d770                 | LR__2329
1d770     08 4E 05 F1 | 	add	fp, #8
1d774     A7 FE 69 FC | 	wrlong	#255, fp
1d778     08 4E 85 F1 | 	sub	fp, #8
1d77c     A7 60 68 FC | 	wrlong	#48, fp
1d780     30 00 90 FD | 	jmp	#LR__2331
1d784                 | LR__2330
1d784     08 4E 05 F1 | 	add	fp, #8
1d788     A7 3E 68 FC | 	wrlong	#31, fp
1d78c     2C 4E 05 F1 | 	add	fp, #44
1d790     A7 12 02 FB | 	rdlong	arg01, fp
1d794     34 4E 85 F1 | 	sub	fp, #52
1d798     68 5F B0 FD | 	call	#_pslpeek
1d79c     A7 FA 61 FC | 	wrlong	result1, fp
1d7a0     00 04 00 FF 
1d7a4     00 FA 15 F2 | 	cmp	result1, ##524288 wc
1d7a8     08 4E 05 31 |  if_ae	add	fp, #8
1d7ac     A7 56 68 3C |  if_ae	wrlong	#43, fp
1d7b0     08 4E 85 31 |  if_ae	sub	fp, #8
1d7b4                 | LR__2331
1d7b4     A7 12 02 F6 | 	mov	arg01, fp
1d7b8     1C FF BE FD | 	call	#_push
1d7bc                 | LR__2332
1d7bc     A7 F0 03 F6 | 	mov	ptra, fp
1d7c0     B2 00 A0 FD | 	call	#popregs_
1d7c4                 | _do_getvar_ret
1d7c4     2D 00 64 FD | 	ret
1d7c8                 | 
1d7c8                 | ' 
1d7c8                 | ' '------------------ getaddr.  Get a pointer to a variable and push it to the RPN stack
1d7c8                 | ' 
1d7c8                 | ' sub do_getaddr
1d7c8                 | _do_getaddr
1d7c8     01 4A 05 F6 | 	mov	COUNT_, #1
1d7cc     A8 00 A0 FD | 	call	#pushregs_
1d7d0     38 F0 07 F1 | 	add	ptra, #56
1d7d4                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
1d7d4                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
1d7d4     4A 00 00 FF 
1d7d8     80 E4 05 F1 | 	add	objptr, ##38016
1d7dc     F2 12 02 FB | 	rdlong	arg01, objptr
1d7e0     09 FD 01 F6 | 	mov	result2, arg01
1d7e4     01 FC 65 F0 | 	shl	result2, #1
1d7e8     09 FD 01 F1 | 	add	result2, arg01
1d7ec     02 FC 65 F0 | 	shl	result2, #2
1d7f0     03 00 00 FF 
1d7f4     04 E4 85 F1 | 	sub	objptr, ##1540
1d7f8     F2 FC 01 F1 | 	add	result2, objptr
1d7fc     04 FC 05 F1 | 	add	result2, #4
1d800     FE FC 09 FB | 	rdlong	result2, result2 wz
1d804     47 00 00 FF 
1d808     7C E4 85 F1 | 	sub	objptr, ##36476
1d80c     10 01 90 5D |  if_ne	jmp	#LR__2340
1d810     4A 00 00 FF 
1d814     80 E4 05 F1 | 	add	objptr, ##38016
1d818     F2 12 02 FB | 	rdlong	arg01, objptr
1d81c     09 FD 01 F6 | 	mov	result2, arg01
1d820     01 FC 65 F0 | 	shl	result2, #1
1d824     09 FD 01 F1 | 	add	result2, arg01
1d828     02 FC 65 F0 | 	shl	result2, #2
1d82c     03 00 00 FF 
1d830     04 E4 85 F1 | 	sub	objptr, ##1540
1d834     F2 FC 01 F1 | 	add	result2, objptr
1d838     FE 12 02 FB | 	rdlong	arg01, result2
1d83c     04 12 66 F0 | 	shl	arg01, #4
1d840     32 00 00 FF 
1d844     84 E4 85 F1 | 	sub	objptr, ##25732
1d848     F2 12 02 F1 | 	add	arg01, objptr
1d84c     0C 12 06 F1 | 	add	arg01, #12
1d850     09 13 02 FB | 	rdlong	arg01, arg01
1d854     08 4E 05 F1 | 	add	fp, #8
1d858     A7 12 62 FC | 	wrlong	arg01, fp
1d85c                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
1d85c                 | '    if t1.result_type>=array_no_type then goto 2200
1d85c     08 4E 85 F1 | 	sub	fp, #8
1d860     00 13 16 F2 | 	cmp	arg01, #256 wc
1d864     14 00 00 FF 
1d868     F8 E5 85 F1 | 	sub	objptr, ##10744
1d86c     B0 00 90 3D |  if_ae	jmp	#LR__2341
1d870     4A 00 00 FF 
1d874     80 E4 05 F1 | 	add	objptr, ##38016
1d878     F2 12 02 FB | 	rdlong	arg01, objptr
1d87c     09 FF 01 F6 | 	mov	result3, arg01
1d880     01 FE 65 F0 | 	shl	result3, #1
1d884     09 FF 01 F1 | 	add	result3, arg01
1d888     02 FE 65 F0 | 	shl	result3, #2
1d88c     03 00 00 FF 
1d890     04 E4 85 F1 | 	sub	objptr, ##1540
1d894     F2 FE 01 F1 | 	add	result3, objptr
1d898     FF FA 01 FB | 	rdlong	result1, result3
1d89c     04 FA 65 F0 | 	shl	result1, #4
1d8a0     32 00 00 FF 
1d8a4     84 E4 85 F1 | 	sub	objptr, ##25732
1d8a8     F2 FA 01 F1 | 	add	result1, objptr
1d8ac     04 FA 05 F1 | 	add	result1, #4
1d8b0     A7 FA 61 FC | 	wrlong	result1, fp
1d8b4     35 00 00 FF 
1d8b8     88 E4 05 F1 | 	add	objptr, ##27272
1d8bc     F2 FE 01 FB | 	rdlong	result3, objptr
1d8c0     FF 12 02 F6 | 	mov	arg01, result3
1d8c4     01 12 66 F0 | 	shl	arg01, #1
1d8c8     FF 12 02 F1 | 	add	arg01, result3
1d8cc     02 12 66 F0 | 	shl	arg01, #2
1d8d0     03 00 00 FF 
1d8d4     04 E4 85 F1 | 	sub	objptr, ##1540
1d8d8     F2 12 02 F1 | 	add	arg01, objptr
1d8dc     09 13 02 FB | 	rdlong	arg01, arg01
1d8e0     04 12 66 F0 | 	shl	arg01, #4
1d8e4     32 00 00 FF 
1d8e8     84 E4 85 F1 | 	sub	objptr, ##25732
1d8ec     F2 12 02 F1 | 	add	arg01, objptr
1d8f0     0C 12 06 F1 | 	add	arg01, #12
1d8f4     09 13 02 FB | 	rdlong	arg01, arg01
1d8f8     04 4E 05 F1 | 	add	fp, #4
1d8fc     A7 12 62 FC | 	wrlong	arg01, fp
1d900     04 4E 05 F1 | 	add	fp, #4
1d904     A7 3A 68 FC | 	wrlong	#29, fp
1d908     08 4E 85 F1 | 	sub	fp, #8
1d90c     A7 12 02 F6 | 	mov	arg01, fp
1d910     14 00 00 FF 
1d914     F8 E5 85 F1 | 	sub	objptr, ##10744
1d918     BC FD BE FD | 	call	#_push
1d91c                 | '   t1.result.uresult=varptr(variables(compiledline(lineptr_e).result.uresult).value)
1d91c                 | '   t1.result.twowords(1)=variables(compiledline(lineptr_e).result.uresult).vartype
1d91c                 | '   t1.result_type=result_uint
1d91c                 | '   push t1 : return
1d91c     2C 03 90 FD | 	jmp	#LR__2350
1d920                 | LR__2340
1d920                 | LR__2341
1d920     4A 00 00 FF 
1d924     80 E4 05 F1 | 	add	objptr, ##38016
1d928     F2 FE 01 FB | 	rdlong	result3, objptr
1d92c     FF FC 01 F6 | 	mov	result2, result3
1d930     01 FC 65 F0 | 	shl	result2, #1
1d934     FF FC 01 F1 | 	add	result2, result3
1d938     02 FC 65 F0 | 	shl	result2, #2
1d93c     03 00 00 FF 
1d940     04 E4 85 F1 | 	sub	objptr, ##1540
1d944     F2 FC 01 F1 | 	add	result2, objptr
1d948     FE FE 01 FB | 	rdlong	result3, result2
1d94c     04 FE 65 F0 | 	shl	result3, #4
1d950     32 00 00 FF 
1d954     84 E4 85 F1 | 	sub	objptr, ##25732
1d958     F2 FE 01 F1 | 	add	result3, objptr
1d95c     04 FE 05 F1 | 	add	result3, #4
1d960     FF FE 01 FB | 	rdlong	result3, result3
1d964     0C 4E 05 F1 | 	add	fp, #12
1d968     A7 FE 61 FC | 	wrlong	result3, fp
1d96c     35 00 00 FF 
1d970     88 E4 05 F1 | 	add	objptr, ##27272
1d974     F2 FE 01 FB | 	rdlong	result3, objptr
1d978     FF 12 02 F6 | 	mov	arg01, result3
1d97c     01 12 66 F0 | 	shl	arg01, #1
1d980     FF 12 02 F1 | 	add	arg01, result3
1d984     02 12 66 F0 | 	shl	arg01, #2
1d988     03 00 00 FF 
1d98c     04 E4 85 F1 | 	sub	objptr, ##1540
1d990     F2 12 02 F1 | 	add	arg01, objptr
1d994     09 13 02 FB | 	rdlong	arg01, arg01
1d998     04 12 66 F0 | 	shl	arg01, #4
1d99c     32 00 00 FF 
1d9a0     84 E4 85 F1 | 	sub	objptr, ##25732
1d9a4     F2 12 02 F1 | 	add	arg01, objptr
1d9a8     0C 12 06 F1 | 	add	arg01, #12
1d9ac     09 13 02 FB | 	rdlong	arg01, arg01
1d9b0     08 4E 85 F1 | 	sub	fp, #8
1d9b4     A7 12 62 FC | 	wrlong	arg01, fp
1d9b8     08 4E 05 F1 | 	add	fp, #8
1d9bc     A7 12 02 FB | 	rdlong	arg01, fp
1d9c0     0C 4E 85 F1 | 	sub	fp, #12
1d9c4     14 00 00 FF 
1d9c8     F8 E5 85 F1 | 	sub	objptr, ##10744
1d9cc     34 5D B0 FD | 	call	#_pslpeek
1d9d0     FD FA 31 F9 | 	getword	result1, result1, #0
1d9d4     10 4E 05 F1 | 	add	fp, #16
1d9d8     A7 FA 61 FC | 	wrlong	result1, fp
1d9dc     4A 00 00 FF 
1d9e0     80 E4 05 F1 | 	add	objptr, ##38016
1d9e4     F2 FE 01 FB | 	rdlong	result3, objptr
1d9e8     FF 12 02 F6 | 	mov	arg01, result3
1d9ec     01 12 66 F0 | 	shl	arg01, #1
1d9f0     FF 12 02 F1 | 	add	arg01, result3
1d9f4     02 12 66 F0 | 	shl	arg01, #2
1d9f8     03 00 00 FF 
1d9fc     04 E4 85 F1 | 	sub	objptr, ##1540
1da00     F2 12 02 F1 | 	add	arg01, objptr
1da04     04 12 06 F1 | 	add	arg01, #4
1da08     09 13 02 FB | 	rdlong	arg01, arg01
1da0c     04 4E 05 F1 | 	add	fp, #4
1da10     A7 12 62 FC | 	wrlong	arg01, fp
1da14     08 4E 85 F1 | 	sub	fp, #8
1da18     A7 12 02 FB | 	rdlong	arg01, fp
1da1c     0C 4E 85 F1 | 	sub	fp, #12
1da20     02 12 06 F1 | 	add	arg01, #2
1da24     47 00 00 FF 
1da28     7C E4 85 F1 | 	sub	objptr, ##36476
1da2c     7C 5C B0 FD | 	call	#_pspeek
1da30     FD FA E1 F8 | 	getbyte	result1, result1, #0
1da34     18 4E 05 F1 | 	add	fp, #24
1da38     A7 FA 61 FC | 	wrlong	result1, fp
1da3c     0C 4E 85 F1 | 	sub	fp, #12
1da40     A7 12 02 FB | 	rdlong	arg01, fp
1da44     0C 4E 85 F1 | 	sub	fp, #12
1da48     04 12 06 F1 | 	add	arg01, #4
1da4c     B4 5C B0 FD | 	call	#_pslpeek
1da50     1C 4E 05 F1 | 	add	fp, #28
1da54     A7 FA 61 FC | 	wrlong	result1, fp
1da58     10 4E 85 F1 | 	sub	fp, #16
1da5c     A7 12 02 FB | 	rdlong	arg01, fp
1da60     0C 4E 85 F1 | 	sub	fp, #12
1da64     08 12 06 F1 | 	add	arg01, #8
1da68     98 5C B0 FD | 	call	#_pslpeek
1da6c     20 4E 05 F1 | 	add	fp, #32
1da70     A7 FA 61 FC | 	wrlong	result1, fp
1da74     14 4E 85 F1 | 	sub	fp, #20
1da78     A7 12 02 FB | 	rdlong	arg01, fp
1da7c     0C 4E 85 F1 | 	sub	fp, #12
1da80     0C 12 06 F1 | 	add	arg01, #12
1da84     7C 5C B0 FD | 	call	#_pslpeek
1da88     24 4E 05 F1 | 	add	fp, #36
1da8c     A7 FA 61 FC | 	wrlong	result1, fp
1da90                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
1da90                 | ' esize=pspeek(arrptr+2)
1da90                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
1da90                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
1da90                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
1da90                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
1da90     10 4E 85 F1 | 	sub	fp, #16
1da94     A7 12 02 FB | 	rdlong	arg01, fp
1da98     14 4E 85 F1 | 	sub	fp, #20
1da9c     03 12 16 F2 | 	cmp	arg01, #3 wc
1daa0     34 00 90 CD |  if_b	jmp	#LR__2342
1daa4     98 FB BE FD | 	call	#_pop
1daa8     A7 FA 61 FC | 	wrlong	result1, fp
1daac     04 4E 05 F1 | 	add	fp, #4
1dab0     A7 FC 61 FC | 	wrlong	result2, fp
1dab4     04 4E 05 F1 | 	add	fp, #4
1dab8     A7 FE 61 FC | 	wrlong	result3, fp
1dabc     08 4E 85 F1 | 	sub	fp, #8
1dac0     A7 12 02 F6 | 	mov	arg01, fp
1dac4     5C FD BE FD | 	call	#_converttoint
1dac8     30 4E 05 F1 | 	add	fp, #48
1dacc     A7 FA 61 FC | 	wrlong	result1, fp
1dad0     30 4E 85 F1 | 	sub	fp, #48
1dad4     0C 00 90 FD | 	jmp	#LR__2343
1dad8                 | LR__2342
1dad8     30 4E 05 F1 | 	add	fp, #48
1dadc     A7 00 68 FC | 	wrlong	#0, fp
1dae0     30 4E 85 F1 | 	sub	fp, #48
1dae4                 | LR__2343
1dae4                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
1dae4     14 4E 05 F1 | 	add	fp, #20
1dae8     A7 12 02 FB | 	rdlong	arg01, fp
1daec     14 4E 85 F1 | 	sub	fp, #20
1daf0     02 12 16 F2 | 	cmp	arg01, #2 wc
1daf4     34 00 90 CD |  if_b	jmp	#LR__2344
1daf8     44 FB BE FD | 	call	#_pop
1dafc     A7 FA 61 FC | 	wrlong	result1, fp
1db00     04 4E 05 F1 | 	add	fp, #4
1db04     A7 FC 61 FC | 	wrlong	result2, fp
1db08     04 4E 05 F1 | 	add	fp, #4
1db0c     A7 FE 61 FC | 	wrlong	result3, fp
1db10     08 4E 85 F1 | 	sub	fp, #8
1db14     A7 12 02 F6 | 	mov	arg01, fp
1db18     08 FD BE FD | 	call	#_converttoint
1db1c     2C 4E 05 F1 | 	add	fp, #44
1db20     A7 FA 61 FC | 	wrlong	result1, fp
1db24     2C 4E 85 F1 | 	sub	fp, #44
1db28     0C 00 90 FD | 	jmp	#LR__2345
1db2c                 | LR__2344
1db2c     2C 4E 05 F1 | 	add	fp, #44
1db30     A7 00 68 FC | 	wrlong	#0, fp
1db34     2C 4E 85 F1 | 	sub	fp, #44
1db38                 | LR__2345
1db38                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
1db38     14 4E 05 F1 | 	add	fp, #20
1db3c     A7 12 02 FB | 	rdlong	arg01, fp
1db40     14 4E 85 F1 | 	sub	fp, #20
1db44     01 12 16 F2 | 	cmp	arg01, #1 wc
1db48     34 00 90 CD |  if_b	jmp	#LR__2346
1db4c     F0 FA BE FD | 	call	#_pop
1db50     A7 FA 61 FC | 	wrlong	result1, fp
1db54     04 4E 05 F1 | 	add	fp, #4
1db58     A7 FC 61 FC | 	wrlong	result2, fp
1db5c     04 4E 05 F1 | 	add	fp, #4
1db60     A7 FE 61 FC | 	wrlong	result3, fp
1db64     08 4E 85 F1 | 	sub	fp, #8
1db68     A7 12 02 F6 | 	mov	arg01, fp
1db6c     B4 FC BE FD | 	call	#_converttoint
1db70     28 4E 05 F1 | 	add	fp, #40
1db74     A7 FA 61 FC | 	wrlong	result1, fp
1db78     28 4E 85 F1 | 	sub	fp, #40
1db7c     0C 00 90 FD | 	jmp	#LR__2347
1db80                 | LR__2346
1db80     28 4E 05 F1 | 	add	fp, #40
1db84     A7 00 68 FC | 	wrlong	#0, fp
1db88     28 4E 85 F1 | 	sub	fp, #40
1db8c                 | LR__2347
1db8c                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
1db8c                 | ' if numpar>0 then
1db8c     14 4E 05 F1 | 	add	fp, #20
1db90     A7 FE 01 FB | 	rdlong	result3, fp
1db94     14 4E 85 F1 | 	sub	fp, #20
1db98     01 FE 15 F2 | 	cmp	result3, #1 wc
1db9c     8C 00 90 CD |  if_b	jmp	#LR__2348
1dba0     0C 4E 05 F1 | 	add	fp, #12
1dba4     A7 FC 01 FB | 	rdlong	result2, fp
1dba8     1C 4E 05 F1 | 	add	fp, #28
1dbac     A7 FE 01 FB | 	rdlong	result3, fp
1dbb0     04 4E 05 F1 | 	add	fp, #4
1dbb4     A7 12 02 FB | 	rdlong	arg01, fp
1dbb8     10 4E 85 F1 | 	sub	fp, #16
1dbbc     A7 FA 01 FB | 	rdlong	result1, fp
1dbc0     FD 12 02 FD | 	qmul	arg01, result1
1dbc4     10 FC 05 F1 | 	add	result2, #16
1dbc8     14 4E 05 F1 | 	add	fp, #20
1dbcc     A7 26 02 FB | 	rdlong	local01, fp
1dbd0     18 12 62 FD | 	getqx	arg01
1dbd4     FD 26 02 FD | 	qmul	local01, result1
1dbd8     09 FF 01 F1 | 	add	result3, arg01
1dbdc     10 4E 85 F1 | 	sub	fp, #16
1dbe0     A7 26 02 FB | 	rdlong	local01, fp
1dbe4     18 FA 61 FD | 	getqx	result1
1dbe8     13 FB 01 FD | 	qmul	result1, local01
1dbec     08 4E 85 F1 | 	sub	fp, #8
1dbf0     A7 26 02 FB | 	rdlong	local01, fp
1dbf4     18 FA 61 FD | 	getqx	result1
1dbf8     FD FE 01 F1 | 	add	result3, result1
1dbfc     13 FF 01 FD | 	qmul	result3, local01
1dc00     1C 4E 05 F1 | 	add	fp, #28
1dc04     18 26 62 FD | 	getqx	local01
1dc08     13 FD 01 F1 | 	add	result2, local01
1dc0c     A7 FC 61 FC | 	wrlong	result2, fp
1dc10     2C 4E 85 F1 | 	sub	fp, #44
1dc14     A7 3A 68 FC | 	wrlong	#29, fp
1dc18     2C 4E 05 F1 | 	add	fp, #44
1dc1c     A7 26 02 FB | 	rdlong	local01, fp
1dc20     34 4E 85 F1 | 	sub	fp, #52
1dc24     A7 26 62 FC | 	wrlong	local01, fp
1dc28     18 00 90 FD | 	jmp	#LR__2349
1dc2c                 | LR__2348
1dc2c     08 4E 05 F1 | 	add	fp, #8
1dc30     A7 3A 68 FC | 	wrlong	#29, fp
1dc34     04 4E 05 F1 | 	add	fp, #4
1dc38     A7 26 02 FB | 	rdlong	local01, fp
1dc3c     0C 4E 85 F1 | 	sub	fp, #12
1dc40     A7 26 62 FC | 	wrlong	local01, fp
1dc44                 | LR__2349
1dc44     A7 12 02 F6 | 	mov	arg01, fp
1dc48     8C FA BE FD | 	call	#_push
1dc4c                 | LR__2350
1dc4c     A7 F0 03 F6 | 	mov	ptra, fp
1dc50     B2 00 A0 FD | 	call	#popregs_
1dc54                 | _do_getaddr_ret
1dc54     2D 00 64 FD | 	ret
1dc58                 | 
1dc58                 | ' 
1dc58                 | ' 
1dc58                 | ' 
1dc58                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1dc58                 | ' '--------------------------------------- Operators ------------------------------------------------------------------------------------- 
1dc58                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1dc58                 | ' 
1dc58                 | ' '--------------------------------- AND 
1dc58                 | ' 
1dc58                 | ' sub do_and 
1dc58                 | _do_and
1dc58     03 4A 05 F6 | 	mov	COUNT_, #3
1dc5c     A8 00 A0 FD | 	call	#pushregs_
1dc60     18 F0 07 F1 | 	add	ptra, #24
1dc64     D8 F9 BE FD | 	call	#_pop
1dc68     FD 12 02 F6 | 	mov	arg01, result1
1dc6c     FE 26 02 F6 | 	mov	local01, result2
1dc70     FF 28 02 F6 | 	mov	local02, result3
1dc74     0C 4E 05 F1 | 	add	fp, #12
1dc78     A7 12 62 FC | 	wrlong	arg01, fp
1dc7c     04 4E 05 F1 | 	add	fp, #4
1dc80     A7 26 62 FC | 	wrlong	local01, fp
1dc84     04 4E 05 F1 | 	add	fp, #4
1dc88     A7 28 62 FC | 	wrlong	local02, fp
1dc8c     14 4E 85 F1 | 	sub	fp, #20
1dc90     AC F9 BE FD | 	call	#_pop
1dc94     FF 2A 02 F6 | 	mov	local03, result3
1dc98     A7 FA 61 FC | 	wrlong	result1, fp
1dc9c     04 4E 05 F1 | 	add	fp, #4
1dca0     A7 FC 61 FC | 	wrlong	result2, fp
1dca4     04 4E 05 F1 | 	add	fp, #4
1dca8     A7 2A 62 FC | 	wrlong	local03, fp
1dcac                 | ' 
1dcac                 | ' t2=pop()
1dcac                 | ' t1=pop()
1dcac                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1dcac     08 4E 85 F1 | 	sub	fp, #8
1dcb0     1C 2A 0E F2 | 	cmp	local03, #28 wz
1dcb4     A7 2A 02 AB |  if_e	rdlong	local03, fp
1dcb8     A7 2A 62 AC |  if_e	wrlong	local03, fp
1dcbc     08 4E 05 A1 |  if_e	add	fp, #8
1dcc0     A7 3A 68 AC |  if_e	wrlong	#29, fp
1dcc4     08 4E 85 A1 |  if_e	sub	fp, #8
1dcc8                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1dcc8     14 4E 05 F1 | 	add	fp, #20
1dccc     A7 2A 02 FB | 	rdlong	local03, fp
1dcd0     14 4E 85 F1 | 	sub	fp, #20
1dcd4     1C 2A 0E F2 | 	cmp	local03, #28 wz
1dcd8     18 00 90 5D |  if_ne	jmp	#LR__2360
1dcdc     0C 4E 05 F1 | 	add	fp, #12
1dce0     A7 2A 02 FB | 	rdlong	local03, fp
1dce4     A7 2A 62 FC | 	wrlong	local03, fp
1dce8     08 4E 05 F1 | 	add	fp, #8
1dcec     A7 3A 68 FC | 	wrlong	#29, fp
1dcf0     14 4E 85 F1 | 	sub	fp, #20
1dcf4                 | LR__2360
1dcf4                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
1dcf4     08 4E 05 F1 | 	add	fp, #8
1dcf8     A7 2A 02 FB | 	rdlong	local03, fp
1dcfc     08 4E 85 F1 | 	sub	fp, #8
1dd00     1F 2A 0E F2 | 	cmp	local03, #31 wz
1dd04     14 4E 05 51 |  if_ne	add	fp, #20
1dd08     A7 28 02 5B |  if_ne	rdlong	local02, fp
1dd0c     14 4E 85 51 |  if_ne	sub	fp, #20
1dd10     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
1dd14     08 4E 05 51 |  if_ne	add	fp, #8
1dd18     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1dd1c     08 4E 85 51 |  if_ne	sub	fp, #8
1dd20     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
1dd24     14 4E 05 51 |  if_ne	add	fp, #20
1dd28     14 4E 85 51 |  if_ne	sub	fp, #20
1dd2c     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
1dd30     A7 0C 68 AC |  if_e	wrlong	#6, fp
1dd34     08 4E 05 A1 |  if_e	add	fp, #8
1dd38     A7 FE 69 AC |  if_e	wrlong	#255, fp
1dd3c     08 4E 85 A1 |  if_e	sub	fp, #8
1dd40     18 00 90 AD |  if_e	jmp	#LR__2361
1dd44     A7 2A 02 FB | 	rdlong	local03, fp
1dd48     0C 4E 05 F1 | 	add	fp, #12
1dd4c     A7 26 02 FB | 	rdlong	local01, fp
1dd50     0C 4E 85 F1 | 	sub	fp, #12
1dd54     13 2B 02 F5 | 	and	local03, local01
1dd58     A7 2A 62 FC | 	wrlong	local03, fp
1dd5c                 | LR__2361
1dd5c     A7 12 02 F6 | 	mov	arg01, fp
1dd60     74 F9 BE FD | 	call	#_push
1dd64     A7 F0 03 F6 | 	mov	ptra, fp
1dd68     B2 00 A0 FD | 	call	#popregs_
1dd6c                 | _do_and_ret
1dd6c     2D 00 64 FD | 	ret
1dd70                 | 
1dd70                 | ' 
1dd70                 | ' '--------------------------------- DIV (integer divide)
1dd70                 | ' 
1dd70                 | ' sub do_div 
1dd70                 | _do_div
1dd70     01 4A 05 F6 | 	mov	COUNT_, #1
1dd74     A8 00 A0 FD | 	call	#pushregs_
1dd78     18 F0 07 F1 | 	add	ptra, #24
1dd7c     C0 F8 BE FD | 	call	#_pop
1dd80     FD 92 02 F6 | 	mov	muldivb_, result1
1dd84     FE 90 02 F6 | 	mov	muldiva_, result2
1dd88     FF 26 02 F6 | 	mov	local01, result3
1dd8c     0C 4E 05 F1 | 	add	fp, #12
1dd90     A7 92 62 FC | 	wrlong	muldivb_, fp
1dd94     04 4E 05 F1 | 	add	fp, #4
1dd98     A7 90 62 FC | 	wrlong	muldiva_, fp
1dd9c     04 4E 05 F1 | 	add	fp, #4
1dda0     A7 26 62 FC | 	wrlong	local01, fp
1dda4     14 4E 85 F1 | 	sub	fp, #20
1dda8     94 F8 BE FD | 	call	#_pop
1ddac     A7 FA 61 FC | 	wrlong	result1, fp
1ddb0     04 4E 05 F1 | 	add	fp, #4
1ddb4     A7 FC 61 FC | 	wrlong	result2, fp
1ddb8     04 4E 05 F1 | 	add	fp, #4
1ddbc     A7 FE 61 FC | 	wrlong	result3, fp
1ddc0                 | ' 
1ddc0                 | ' t2=pop()
1ddc0                 | ' t1=pop()
1ddc0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
1ddc0     08 4E 85 F1 | 	sub	fp, #8
1ddc4     1F FE 0D F2 | 	cmp	result3, #31 wz
1ddc8     14 4E 05 51 |  if_ne	add	fp, #20
1ddcc     A7 12 02 5B |  if_ne	rdlong	arg01, fp
1ddd0     14 4E 85 51 |  if_ne	sub	fp, #20
1ddd4     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
1ddd8     A7 14 68 AC |  if_e	wrlong	#10, fp
1dddc     08 4E 05 A1 |  if_e	add	fp, #8
1dde0     A7 FE 69 AC |  if_e	wrlong	#255, fp
1dde4     08 4E 85 A1 |  if_e	sub	fp, #8
1dde8     90 01 90 AD |  if_e	jmp	#LR__2376
1ddec                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
1ddec     08 4E 05 F1 | 	add	fp, #8
1ddf0     A7 92 02 FB | 	rdlong	muldivb_, fp
1ddf4     08 4E 85 F1 | 	sub	fp, #8
1ddf8     1E 92 0E F2 | 	cmp	muldivb_, #30 wz
1ddfc     1C 00 90 5D |  if_ne	jmp	#LR__2370
1de00     08 4E 05 F1 | 	add	fp, #8
1de04     A7 38 68 FC | 	wrlong	#28, fp
1de08     08 4E 85 F1 | 	sub	fp, #8
1de0c     A7 12 02 FB | 	rdlong	arg01, fp
1de10     00 14 06 F6 | 	mov	arg02, #0
1de14     78 C3 B0 FD | 	call	#__system___float_tointeger
1de18     A7 FA 61 FC | 	wrlong	result1, fp
1de1c                 | LR__2370
1de1c                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
1de1c     14 4E 05 F1 | 	add	fp, #20
1de20     A7 92 02 FB | 	rdlong	muldivb_, fp
1de24     14 4E 85 F1 | 	sub	fp, #20
1de28     1E 92 0E F2 | 	cmp	muldivb_, #30 wz
1de2c     28 00 90 5D |  if_ne	jmp	#LR__2371
1de30     14 4E 05 F1 | 	add	fp, #20
1de34     A7 38 68 FC | 	wrlong	#28, fp
1de38     08 4E 85 F1 | 	sub	fp, #8
1de3c     A7 12 02 FB | 	rdlong	arg01, fp
1de40     0C 4E 85 F1 | 	sub	fp, #12
1de44     00 14 06 F6 | 	mov	arg02, #0
1de48     44 C3 B0 FD | 	call	#__system___float_tointeger
1de4c     0C 4E 05 F1 | 	add	fp, #12
1de50     A7 FA 61 FC | 	wrlong	result1, fp
1de54     0C 4E 85 F1 | 	sub	fp, #12
1de58                 | LR__2371
1de58                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
1de58     08 4E 05 F1 | 	add	fp, #8
1de5c     A7 92 02 FB | 	rdlong	muldivb_, fp
1de60     08 4E 85 F1 | 	sub	fp, #8
1de64     1D 92 0E F2 | 	cmp	muldivb_, #29 wz
1de68     14 4E 05 A1 |  if_e	add	fp, #20
1de6c     A7 26 02 AB |  if_e	rdlong	local01, fp
1de70     14 4E 85 A1 |  if_e	sub	fp, #20
1de74     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
1de78     20 00 90 5D |  if_ne	jmp	#LR__2372
1de7c     0C 4E 05 F1 | 	add	fp, #12
1de80     A7 26 02 FB | 	rdlong	local01, fp
1de84     0C 4E 85 F1 | 	sub	fp, #12
1de88     A7 92 02 FB | 	rdlong	muldivb_, fp
1de8c     13 93 12 FD | 	qdiv	muldivb_, local01
1de90     18 26 62 FD | 	getqx	local01
1de94     A7 26 62 FC | 	wrlong	local01, fp
1de98     E0 00 90 FD | 	jmp	#LR__2376
1de9c                 | LR__2372
1de9c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
1de9c     08 4E 05 F1 | 	add	fp, #8
1dea0     A7 92 02 FB | 	rdlong	muldivb_, fp
1dea4     08 4E 85 F1 | 	sub	fp, #8
1dea8     1D 92 0E F2 | 	cmp	muldivb_, #29 wz
1deac     14 4E 05 A1 |  if_e	add	fp, #20
1deb0     A7 26 02 AB |  if_e	rdlong	local01, fp
1deb4     14 4E 85 A1 |  if_e	sub	fp, #20
1deb8     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1debc     2C 00 90 5D |  if_ne	jmp	#LR__2373
1dec0     0C 4E 05 F1 | 	add	fp, #12
1dec4     A7 26 02 FB | 	rdlong	local01, fp
1dec8     0C 4E 85 F1 | 	sub	fp, #12
1decc     A7 92 02 FB | 	rdlong	muldivb_, fp
1ded0     13 93 12 FD | 	qdiv	muldivb_, local01
1ded4     18 26 62 FD | 	getqx	local01
1ded8     A7 26 62 FC | 	wrlong	local01, fp
1dedc     08 4E 05 F1 | 	add	fp, #8
1dee0     A7 38 68 FC | 	wrlong	#28, fp
1dee4     08 4E 85 F1 | 	sub	fp, #8
1dee8     90 00 90 FD | 	jmp	#LR__2376
1deec                 | LR__2373
1deec                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
1deec     08 4E 05 F1 | 	add	fp, #8
1def0     A7 92 02 FB | 	rdlong	muldivb_, fp
1def4     08 4E 85 F1 | 	sub	fp, #8
1def8     1C 92 0E F2 | 	cmp	muldivb_, #28 wz
1defc     14 4E 05 A1 |  if_e	add	fp, #20
1df00     A7 26 02 AB |  if_e	rdlong	local01, fp
1df04     14 4E 85 A1 |  if_e	sub	fp, #20
1df08     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
1df0c     1C 00 90 5D |  if_ne	jmp	#LR__2374
1df10     A7 90 02 FB | 	rdlong	muldiva_, fp
1df14     0C 4E 05 F1 | 	add	fp, #12
1df18     A7 92 02 FB | 	rdlong	muldivb_, fp
1df1c     0C 4E 85 F1 | 	sub	fp, #12
1df20     BA 00 A0 FD | 	call	#divide_
1df24     A7 92 62 FC | 	wrlong	muldivb_, fp
1df28     50 00 90 FD | 	jmp	#LR__2376
1df2c                 | LR__2374
1df2c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
1df2c     08 4E 05 F1 | 	add	fp, #8
1df30     A7 92 02 FB | 	rdlong	muldivb_, fp
1df34     08 4E 85 F1 | 	sub	fp, #8
1df38     1C 92 0E F2 | 	cmp	muldivb_, #28 wz
1df3c     14 4E 05 A1 |  if_e	add	fp, #20
1df40     A7 26 02 AB |  if_e	rdlong	local01, fp
1df44     14 4E 85 A1 |  if_e	sub	fp, #20
1df48     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1df4c     1C 00 90 5D |  if_ne	jmp	#LR__2375
1df50     A7 90 02 FB | 	rdlong	muldiva_, fp
1df54     0C 4E 05 F1 | 	add	fp, #12
1df58     A7 92 02 FB | 	rdlong	muldivb_, fp
1df5c     0C 4E 85 F1 | 	sub	fp, #12
1df60     BA 00 A0 FD | 	call	#divide_
1df64     A7 92 62 FC | 	wrlong	muldivb_, fp
1df68     10 00 90 FD | 	jmp	#LR__2376
1df6c                 | LR__2375
1df6c     A7 16 68 FC | 	wrlong	#11, fp
1df70     08 4E 05 F1 | 	add	fp, #8
1df74     A7 FE 69 FC | 	wrlong	#255, fp
1df78     08 4E 85 F1 | 	sub	fp, #8
1df7c                 | LR__2376
1df7c     A7 12 02 F6 | 	mov	arg01, fp
1df80     54 F7 BE FD | 	call	#_push
1df84     A7 F0 03 F6 | 	mov	ptra, fp
1df88     B2 00 A0 FD | 	call	#popregs_
1df8c                 | _do_div_ret
1df8c     2D 00 64 FD | 	ret
1df90                 | 
1df90                 | ' 
1df90                 | ' '--------------------------------- equal (=)
1df90                 | ' 
1df90                 | ' sub do_eq
1df90                 | _do_eq
1df90     05 4A 05 F6 | 	mov	COUNT_, #5
1df94     A8 00 A0 FD | 	call	#pushregs_
1df98     18 F0 07 F1 | 	add	ptra, #24
1df9c     A0 F6 BE FD | 	call	#_pop
1dfa0     FD 26 02 F6 | 	mov	local01, result1
1dfa4     FE 28 02 F6 | 	mov	local02, result2
1dfa8     FF 2A 02 F6 | 	mov	local03, result3
1dfac     0C 4E 05 F1 | 	add	fp, #12
1dfb0     A7 26 62 FC | 	wrlong	local01, fp
1dfb4     04 4E 05 F1 | 	add	fp, #4
1dfb8     A7 28 62 FC | 	wrlong	local02, fp
1dfbc     04 4E 05 F1 | 	add	fp, #4
1dfc0     A7 2A 62 FC | 	wrlong	local03, fp
1dfc4     14 4E 85 F1 | 	sub	fp, #20
1dfc8     74 F6 BE FD | 	call	#_pop
1dfcc     FF 2A 02 F6 | 	mov	local03, result3
1dfd0     A7 FA 61 FC | 	wrlong	result1, fp
1dfd4     04 4E 05 F1 | 	add	fp, #4
1dfd8     A7 FC 61 FC | 	wrlong	result2, fp
1dfdc     04 4E 05 F1 | 	add	fp, #4
1dfe0     A7 2A 62 FC | 	wrlong	local03, fp
1dfe4                 | ' 
1dfe4                 | ' t2=pop()
1dfe4                 | ' t1=pop()
1dfe4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
1dfe4     08 4E 85 F1 | 	sub	fp, #8
1dfe8     1F 2A 0E F2 | 	cmp	local03, #31 wz
1dfec     14 4E 05 A1 |  if_e	add	fp, #20
1dff0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1dff4     14 4E 85 A1 |  if_e	sub	fp, #20
1dff8     16 2B 02 A6 |  if_e	mov	local03, local04
1dffc     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1e000     28 00 90 5D |  if_ne	jmp	#LR__2380
1e004     00 26 06 F6 | 	mov	local01, #0
1e008     A7 12 02 FB | 	rdlong	arg01, fp
1e00c     0C 4E 05 F1 | 	add	fp, #12
1e010     A7 14 02 FB | 	rdlong	arg02, fp
1e014     0C 4E 85 F1 | 	sub	fp, #12
1e018     5C 8E B0 FD | 	call	#__system___string_cmp
1e01c     00 FA 0D F2 | 	cmp	result1, #0 wz
1e020     00 26 26 A6 |  if_e	not	local01, #0
1e024     A7 26 62 FC | 	wrlong	local01, fp
1e028     20 04 90 FD | 	jmp	#LR__2393
1e02c                 | LR__2380
1e02c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
1e02c     08 4E 05 F1 | 	add	fp, #8
1e030     A7 26 02 FB | 	rdlong	local01, fp
1e034     08 4E 85 F1 | 	sub	fp, #8
1e038     1E 26 0E F2 | 	cmp	local01, #30 wz
1e03c     14 4E 05 A1 |  if_e	add	fp, #20
1e040     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e044     14 4E 85 A1 |  if_e	sub	fp, #20
1e048     16 2B 02 A6 |  if_e	mov	local03, local04
1e04c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1e050     2C 00 90 5D |  if_ne	jmp	#LR__2381
1e054     00 26 06 F6 | 	mov	local01, #0
1e058     A7 12 02 FB | 	rdlong	arg01, fp
1e05c     0C 4E 05 F1 | 	add	fp, #12
1e060     A7 14 02 FB | 	rdlong	arg02, fp
1e064     0C 4E 85 F1 | 	sub	fp, #12
1e068     01 16 06 F6 | 	mov	arg03, #1
1e06c     8C C0 B0 FD | 	call	#__system___float_cmp
1e070     00 FA 0D F2 | 	cmp	result1, #0 wz
1e074     00 26 26 A6 |  if_e	not	local01, #0
1e078     A7 26 62 FC | 	wrlong	local01, fp
1e07c     CC 03 90 FD | 	jmp	#LR__2393
1e080                 | LR__2381
1e080                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
1e080     08 4E 05 F1 | 	add	fp, #8
1e084     A7 26 02 FB | 	rdlong	local01, fp
1e088     08 4E 85 F1 | 	sub	fp, #8
1e08c     1E 26 0E F2 | 	cmp	local01, #30 wz
1e090     14 4E 05 A1 |  if_e	add	fp, #20
1e094     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e098     14 4E 85 A1 |  if_e	sub	fp, #20
1e09c     16 2B 02 A6 |  if_e	mov	local03, local04
1e0a0     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e0a4     48 00 90 5D |  if_ne	jmp	#LR__2382
1e0a8     00 26 06 F6 | 	mov	local01, #0
1e0ac     A7 28 02 FB | 	rdlong	local02, fp
1e0b0     0C 4E 05 F1 | 	add	fp, #12
1e0b4     A7 12 02 FB | 	rdlong	arg01, fp
1e0b8     0C 4E 85 F1 | 	sub	fp, #12
1e0bc     09 13 52 F6 | 	abs	arg01, arg01 wc
1e0c0     1F 2E C6 C9 |  if_b	decod	local05, #31
1e0c4     00 2E 06 36 |  if_ae	mov	local05, #0
1e0c8     F8 B7 B0 FD | 	call	#__system___float_fromuns
1e0cc     17 FB 61 F5 | 	xor	result1, local05
1e0d0     FD 14 02 F6 | 	mov	arg02, result1
1e0d4     14 13 02 F6 | 	mov	arg01, local02
1e0d8     01 16 06 F6 | 	mov	arg03, #1
1e0dc     1C C0 B0 FD | 	call	#__system___float_cmp
1e0e0     00 FA 0D F2 | 	cmp	result1, #0 wz
1e0e4     00 26 26 A6 |  if_e	not	local01, #0
1e0e8     A7 26 62 FC | 	wrlong	local01, fp
1e0ec     5C 03 90 FD | 	jmp	#LR__2393
1e0f0                 | LR__2382
1e0f0                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
1e0f0     08 4E 05 F1 | 	add	fp, #8
1e0f4     A7 26 02 FB | 	rdlong	local01, fp
1e0f8     08 4E 85 F1 | 	sub	fp, #8
1e0fc     1E 26 0E F2 | 	cmp	local01, #30 wz
1e100     14 4E 05 A1 |  if_e	add	fp, #20
1e104     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e108     14 4E 85 A1 |  if_e	sub	fp, #20
1e10c     16 2B 02 A6 |  if_e	mov	local03, local04
1e110     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e114     38 00 90 5D |  if_ne	jmp	#LR__2383
1e118     00 26 06 F6 | 	mov	local01, #0
1e11c     A7 28 02 FB | 	rdlong	local02, fp
1e120     0C 4E 05 F1 | 	add	fp, #12
1e124     A7 12 02 FB | 	rdlong	arg01, fp
1e128     0C 4E 85 F1 | 	sub	fp, #12
1e12c     94 B7 B0 FD | 	call	#__system___float_fromuns
1e130     FD 14 02 F6 | 	mov	arg02, result1
1e134     14 13 02 F6 | 	mov	arg01, local02
1e138     01 16 06 F6 | 	mov	arg03, #1
1e13c     BC BF B0 FD | 	call	#__system___float_cmp
1e140     00 FA 0D F2 | 	cmp	result1, #0 wz
1e144     00 26 26 A6 |  if_e	not	local01, #0
1e148     A7 26 62 FC | 	wrlong	local01, fp
1e14c     FC 02 90 FD | 	jmp	#LR__2393
1e150                 | LR__2383
1e150                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
1e150     08 4E 05 F1 | 	add	fp, #8
1e154     A7 26 02 FB | 	rdlong	local01, fp
1e158     08 4E 85 F1 | 	sub	fp, #8
1e15c     1C 26 0E F2 | 	cmp	local01, #28 wz
1e160     14 4E 05 A1 |  if_e	add	fp, #20
1e164     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e168     14 4E 85 A1 |  if_e	sub	fp, #20
1e16c     16 2B 02 A6 |  if_e	mov	local03, local04
1e170     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1e174     44 00 90 5D |  if_ne	jmp	#LR__2384
1e178     00 26 06 F6 | 	mov	local01, #0
1e17c     A7 12 02 FB | 	rdlong	arg01, fp
1e180     09 13 52 F6 | 	abs	arg01, arg01 wc
1e184     1F 2E C6 C9 |  if_b	decod	local05, #31
1e188     00 2E 06 36 |  if_ae	mov	local05, #0
1e18c     34 B7 B0 FD | 	call	#__system___float_fromuns
1e190     17 FB 61 F5 | 	xor	result1, local05
1e194     FD 12 02 F6 | 	mov	arg01, result1
1e198     0C 4E 05 F1 | 	add	fp, #12
1e19c     A7 14 02 FB | 	rdlong	arg02, fp
1e1a0     0C 4E 85 F1 | 	sub	fp, #12
1e1a4     01 16 06 F6 | 	mov	arg03, #1
1e1a8     50 BF B0 FD | 	call	#__system___float_cmp
1e1ac     00 FA 0D F2 | 	cmp	result1, #0 wz
1e1b0     00 26 26 A6 |  if_e	not	local01, #0
1e1b4     A7 26 62 FC | 	wrlong	local01, fp
1e1b8     90 02 90 FD | 	jmp	#LR__2393
1e1bc                 | LR__2384
1e1bc                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
1e1bc     08 4E 05 F1 | 	add	fp, #8
1e1c0     A7 26 02 FB | 	rdlong	local01, fp
1e1c4     08 4E 85 F1 | 	sub	fp, #8
1e1c8     1C 26 0E F2 | 	cmp	local01, #28 wz
1e1cc     14 4E 05 A1 |  if_e	add	fp, #20
1e1d0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e1d4     14 4E 85 A1 |  if_e	sub	fp, #20
1e1d8     16 2B 02 A6 |  if_e	mov	local03, local04
1e1dc     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e1e0     24 00 90 5D |  if_ne	jmp	#LR__2385
1e1e4     00 26 06 F6 | 	mov	local01, #0
1e1e8     A7 28 02 FB | 	rdlong	local02, fp
1e1ec     0C 4E 05 F1 | 	add	fp, #12
1e1f0     A7 2A 02 FB | 	rdlong	local03, fp
1e1f4     0C 4E 85 F1 | 	sub	fp, #12
1e1f8     15 29 0A F2 | 	cmp	local02, local03 wz
1e1fc     01 26 66 A6 |  if_e	neg	local01, #1
1e200     A7 26 62 FC | 	wrlong	local01, fp
1e204     44 02 90 FD | 	jmp	#LR__2393
1e208                 | LR__2385
1e208                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
1e208     08 4E 05 F1 | 	add	fp, #8
1e20c     A7 26 02 FB | 	rdlong	local01, fp
1e210     08 4E 85 F1 | 	sub	fp, #8
1e214     1C 26 0E F2 | 	cmp	local01, #28 wz
1e218     14 4E 05 A1 |  if_e	add	fp, #20
1e21c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e220     14 4E 85 A1 |  if_e	sub	fp, #20
1e224     16 2B 02 A6 |  if_e	mov	local03, local04
1e228     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e22c     24 00 90 5D |  if_ne	jmp	#LR__2386
1e230     00 26 06 F6 | 	mov	local01, #0
1e234     A7 28 02 FB | 	rdlong	local02, fp
1e238     0C 4E 05 F1 | 	add	fp, #12
1e23c     A7 2A 02 FB | 	rdlong	local03, fp
1e240     0C 4E 85 F1 | 	sub	fp, #12
1e244     15 29 0A F2 | 	cmp	local02, local03 wz
1e248     01 26 66 A6 |  if_e	neg	local01, #1
1e24c     A7 26 62 FC | 	wrlong	local01, fp
1e250     F8 01 90 FD | 	jmp	#LR__2393
1e254                 | LR__2386
1e254                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
1e254     08 4E 05 F1 | 	add	fp, #8
1e258     A7 26 02 FB | 	rdlong	local01, fp
1e25c     08 4E 85 F1 | 	sub	fp, #8
1e260     1D 26 0E F2 | 	cmp	local01, #29 wz
1e264     14 4E 05 A1 |  if_e	add	fp, #20
1e268     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e26c     14 4E 85 A1 |  if_e	sub	fp, #20
1e270     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1e274     34 00 90 5D |  if_ne	jmp	#LR__2387
1e278     00 26 06 F6 | 	mov	local01, #0
1e27c     A7 12 02 FB | 	rdlong	arg01, fp
1e280     40 B6 B0 FD | 	call	#__system___float_fromuns
1e284     FD 12 02 F6 | 	mov	arg01, result1
1e288     0C 4E 05 F1 | 	add	fp, #12
1e28c     A7 14 02 FB | 	rdlong	arg02, fp
1e290     0C 4E 85 F1 | 	sub	fp, #12
1e294     01 16 06 F6 | 	mov	arg03, #1
1e298     60 BE B0 FD | 	call	#__system___float_cmp
1e29c     00 FA 0D F2 | 	cmp	result1, #0 wz
1e2a0     00 26 26 A6 |  if_e	not	local01, #0
1e2a4     A7 26 62 FC | 	wrlong	local01, fp
1e2a8     A0 01 90 FD | 	jmp	#LR__2393
1e2ac                 | LR__2387
1e2ac                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
1e2ac     08 4E 05 F1 | 	add	fp, #8
1e2b0     A7 26 02 FB | 	rdlong	local01, fp
1e2b4     08 4E 85 F1 | 	sub	fp, #8
1e2b8     1D 26 0E F2 | 	cmp	local01, #29 wz
1e2bc     14 4E 05 A1 |  if_e	add	fp, #20
1e2c0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e2c4     14 4E 85 A1 |  if_e	sub	fp, #20
1e2c8     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e2cc     24 00 90 5D |  if_ne	jmp	#LR__2388
1e2d0     00 26 06 F6 | 	mov	local01, #0
1e2d4     A7 28 02 FB | 	rdlong	local02, fp
1e2d8     0C 4E 05 F1 | 	add	fp, #12
1e2dc     A7 2A 02 FB | 	rdlong	local03, fp
1e2e0     0C 4E 85 F1 | 	sub	fp, #12
1e2e4     15 29 0A F2 | 	cmp	local02, local03 wz
1e2e8     01 26 66 A6 |  if_e	neg	local01, #1
1e2ec     A7 26 62 FC | 	wrlong	local01, fp
1e2f0     58 01 90 FD | 	jmp	#LR__2393
1e2f4                 | LR__2388
1e2f4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
1e2f4     08 4E 05 F1 | 	add	fp, #8
1e2f8     A7 26 02 FB | 	rdlong	local01, fp
1e2fc     08 4E 85 F1 | 	sub	fp, #8
1e300     1D 26 0E F2 | 	cmp	local01, #29 wz
1e304     14 4E 05 A1 |  if_e	add	fp, #20
1e308     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e30c     14 4E 85 A1 |  if_e	sub	fp, #20
1e310     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e314     24 00 90 5D |  if_ne	jmp	#LR__2389
1e318     00 26 06 F6 | 	mov	local01, #0
1e31c     A7 28 02 FB | 	rdlong	local02, fp
1e320     0C 4E 05 F1 | 	add	fp, #12
1e324     A7 2A 02 FB | 	rdlong	local03, fp
1e328     0C 4E 85 F1 | 	sub	fp, #12
1e32c     15 29 0A F2 | 	cmp	local02, local03 wz
1e330     01 26 66 A6 |  if_e	neg	local01, #1
1e334     A7 26 62 FC | 	wrlong	local01, fp
1e338     10 01 90 FD | 	jmp	#LR__2393
1e33c                 | LR__2389
1e33c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)=t2.result.sresult):goto 1150
1e33c     08 4E 05 F1 | 	add	fp, #8
1e340     A7 26 02 FB | 	rdlong	local01, fp
1e344     08 4E 85 F1 | 	sub	fp, #8
1e348     2B 26 0E F2 | 	cmp	local01, #43 wz
1e34c     14 4E 05 A1 |  if_e	add	fp, #20
1e350     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e354     14 4E 85 A1 |  if_e	sub	fp, #20
1e358     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1e35c     30 00 90 5D |  if_ne	jmp	#LR__2390
1e360     00 26 06 F6 | 	mov	local01, #0
1e364     A7 12 02 FB | 	rdlong	arg01, fp
1e368     4C F4 BE FD | 	call	#_convertstring
1e36c     FD 12 02 F6 | 	mov	arg01, result1
1e370     0C 4E 05 F1 | 	add	fp, #12
1e374     A7 14 02 FB | 	rdlong	arg02, fp
1e378     0C 4E 85 F1 | 	sub	fp, #12
1e37c     F8 8A B0 FD | 	call	#__system___string_cmp
1e380     00 FA 0D F2 | 	cmp	result1, #0 wz
1e384     00 26 26 A6 |  if_e	not	local01, #0
1e388     A7 26 62 FC | 	wrlong	local01, fp
1e38c     BC 00 90 FD | 	jmp	#LR__2393
1e390                 | LR__2390
1e390                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult=convertstring(t2.result.uresult)) :goto 1150
1e390     08 4E 05 F1 | 	add	fp, #8
1e394     A7 26 02 FB | 	rdlong	local01, fp
1e398     08 4E 85 F1 | 	sub	fp, #8
1e39c     1F 26 0E F2 | 	cmp	local01, #31 wz
1e3a0     14 4E 05 A1 |  if_e	add	fp, #20
1e3a4     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e3a8     14 4E 85 A1 |  if_e	sub	fp, #20
1e3ac     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1e3b0     34 00 90 5D |  if_ne	jmp	#LR__2391
1e3b4     00 26 06 F6 | 	mov	local01, #0
1e3b8     A7 28 02 FB | 	rdlong	local02, fp
1e3bc     0C 4E 05 F1 | 	add	fp, #12
1e3c0     A7 12 02 FB | 	rdlong	arg01, fp
1e3c4     0C 4E 85 F1 | 	sub	fp, #12
1e3c8     EC F3 BE FD | 	call	#_convertstring
1e3cc     FD 14 02 F6 | 	mov	arg02, result1
1e3d0     14 13 02 F6 | 	mov	arg01, local02
1e3d4     A0 8A B0 FD | 	call	#__system___string_cmp
1e3d8     00 FA 0D F2 | 	cmp	result1, #0 wz
1e3dc     00 26 26 A6 |  if_e	not	local01, #0
1e3e0     A7 26 62 FC | 	wrlong	local01, fp
1e3e4     64 00 90 FD | 	jmp	#LR__2393
1e3e8                 | LR__2391
1e3e8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)=convertstring(t2.result.uresult)) :goto 1150
1e3e8     08 4E 05 F1 | 	add	fp, #8
1e3ec     A7 26 02 FB | 	rdlong	local01, fp
1e3f0     08 4E 85 F1 | 	sub	fp, #8
1e3f4     2B 26 0E F2 | 	cmp	local01, #43 wz
1e3f8     14 4E 05 A1 |  if_e	add	fp, #20
1e3fc     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e400     14 4E 85 A1 |  if_e	sub	fp, #20
1e404     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1e408     3C 00 90 5D |  if_ne	jmp	#LR__2392
1e40c     00 26 06 F6 | 	mov	local01, #0
1e410     A7 12 02 FB | 	rdlong	arg01, fp
1e414     A0 F3 BE FD | 	call	#_convertstring
1e418     FD 28 02 F6 | 	mov	local02, result1
1e41c     0C 4E 05 F1 | 	add	fp, #12
1e420     A7 12 02 FB | 	rdlong	arg01, fp
1e424     0C 4E 85 F1 | 	sub	fp, #12
1e428     8C F3 BE FD | 	call	#_convertstring
1e42c     FD 14 02 F6 | 	mov	arg02, result1
1e430     14 13 02 F6 | 	mov	arg01, local02
1e434     40 8A B0 FD | 	call	#__system___string_cmp
1e438     00 FA 0D F2 | 	cmp	result1, #0 wz
1e43c     00 26 26 A6 |  if_e	not	local01, #0
1e440     A7 26 62 FC | 	wrlong	local01, fp
1e444     04 00 90 FD | 	jmp	#LR__2393
1e448                 | LR__2392
1e448     A7 00 68 FC | 	wrlong	#0, fp
1e44c                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1e44c                 | LR__2393
1e44c     08 4E 05 F1 | 	add	fp, #8
1e450     A7 38 68 FC | 	wrlong	#28, fp
1e454     08 4E 85 F1 | 	sub	fp, #8
1e458     A7 12 02 F6 | 	mov	arg01, fp
1e45c     78 F2 BE FD | 	call	#_push
1e460     A7 F0 03 F6 | 	mov	ptra, fp
1e464     B2 00 A0 FD | 	call	#popregs_
1e468                 | _do_eq_ret
1e468     2D 00 64 FD | 	ret
1e46c                 | 
1e46c                 | ' 
1e46c                 | ' '--------------------------------- fdiv (/) - float divide
1e46c                 | ' 
1e46c                 | ' sub do_fdiv 
1e46c                 | _do_fdiv
1e46c     02 4A 05 F6 | 	mov	COUNT_, #2
1e470     A8 00 A0 FD | 	call	#pushregs_
1e474     18 F0 07 F1 | 	add	ptra, #24
1e478     C4 F1 BE FD | 	call	#_pop
1e47c     FD 14 02 F6 | 	mov	arg02, result1
1e480     FE 12 02 F6 | 	mov	arg01, result2
1e484     FF 26 02 F6 | 	mov	local01, result3
1e488     0C 4E 05 F1 | 	add	fp, #12
1e48c     A7 14 62 FC | 	wrlong	arg02, fp
1e490     04 4E 05 F1 | 	add	fp, #4
1e494     A7 12 62 FC | 	wrlong	arg01, fp
1e498     04 4E 05 F1 | 	add	fp, #4
1e49c     A7 26 62 FC | 	wrlong	local01, fp
1e4a0     14 4E 85 F1 | 	sub	fp, #20
1e4a4     98 F1 BE FD | 	call	#_pop
1e4a8     A7 FA 61 FC | 	wrlong	result1, fp
1e4ac     04 4E 05 F1 | 	add	fp, #4
1e4b0     A7 FC 61 FC | 	wrlong	result2, fp
1e4b4     04 4E 05 F1 | 	add	fp, #4
1e4b8     A7 FE 61 FC | 	wrlong	result3, fp
1e4bc                 | ' 
1e4bc                 | ' t2=pop()
1e4bc                 | ' t1=pop()
1e4bc                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
1e4bc     08 4E 85 F1 | 	sub	fp, #8
1e4c0     1F FE 0D F2 | 	cmp	result3, #31 wz
1e4c4     14 4E 05 51 |  if_ne	add	fp, #20
1e4c8     A7 26 02 5B |  if_ne	rdlong	local01, fp
1e4cc     14 4E 85 51 |  if_ne	sub	fp, #20
1e4d0     1F 26 0E 52 |  if_ne	cmp	local01, #31 wz
1e4d4     A7 14 68 AC |  if_e	wrlong	#10, fp
1e4d8     08 4E 05 A1 |  if_e	add	fp, #8
1e4dc     A7 FE 69 AC |  if_e	wrlong	#255, fp
1e4e0     08 4E 85 A1 |  if_e	sub	fp, #8
1e4e4     38 01 90 AD |  if_e	jmp	#LR__2405
1e4e8                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
1e4e8     08 4E 05 F1 | 	add	fp, #8
1e4ec     A7 14 02 FB | 	rdlong	arg02, fp
1e4f0     08 4E 85 F1 | 	sub	fp, #8
1e4f4     1C 14 0E F2 | 	cmp	arg02, #28 wz
1e4f8     28 00 90 5D |  if_ne	jmp	#LR__2400
1e4fc     08 4E 05 F1 | 	add	fp, #8
1e500     A7 3C 68 FC | 	wrlong	#30, fp
1e504     08 4E 85 F1 | 	sub	fp, #8
1e508     A7 12 02 FB | 	rdlong	arg01, fp
1e50c     09 13 52 F6 | 	abs	arg01, arg01 wc
1e510     1F 28 C6 C9 |  if_b	decod	local02, #31
1e514     00 28 06 36 |  if_ae	mov	local02, #0
1e518     A8 B3 B0 FD | 	call	#__system___float_fromuns
1e51c     14 FB 61 F5 | 	xor	result1, local02
1e520     A7 FA 61 FC | 	wrlong	result1, fp
1e524                 | LR__2400
1e524                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
1e524     08 4E 05 F1 | 	add	fp, #8
1e528     A7 14 02 FB | 	rdlong	arg02, fp
1e52c     08 4E 85 F1 | 	sub	fp, #8
1e530     1D 14 0E F2 | 	cmp	arg02, #29 wz
1e534     18 00 90 5D |  if_ne	jmp	#LR__2401
1e538     08 4E 05 F1 | 	add	fp, #8
1e53c     A7 3C 68 FC | 	wrlong	#30, fp
1e540     08 4E 85 F1 | 	sub	fp, #8
1e544     A7 12 02 FB | 	rdlong	arg01, fp
1e548     78 B3 B0 FD | 	call	#__system___float_fromuns
1e54c     A7 FA 61 FC | 	wrlong	result1, fp
1e550                 | LR__2401
1e550                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
1e550     14 4E 05 F1 | 	add	fp, #20
1e554     A7 14 02 FB | 	rdlong	arg02, fp
1e558     14 4E 85 F1 | 	sub	fp, #20
1e55c     1C 14 0E F2 | 	cmp	arg02, #28 wz
1e560     34 00 90 5D |  if_ne	jmp	#LR__2402
1e564     14 4E 05 F1 | 	add	fp, #20
1e568     A7 3C 68 FC | 	wrlong	#30, fp
1e56c     08 4E 85 F1 | 	sub	fp, #8
1e570     A7 12 02 FB | 	rdlong	arg01, fp
1e574     0C 4E 85 F1 | 	sub	fp, #12
1e578     09 13 52 F6 | 	abs	arg01, arg01 wc
1e57c     1F 28 C6 C9 |  if_b	decod	local02, #31
1e580     00 28 06 36 |  if_ae	mov	local02, #0
1e584     3C B3 B0 FD | 	call	#__system___float_fromuns
1e588     14 FB 61 F5 | 	xor	result1, local02
1e58c     0C 4E 05 F1 | 	add	fp, #12
1e590     A7 FA 61 FC | 	wrlong	result1, fp
1e594     0C 4E 85 F1 | 	sub	fp, #12
1e598                 | LR__2402
1e598                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
1e598     14 4E 05 F1 | 	add	fp, #20
1e59c     A7 14 02 FB | 	rdlong	arg02, fp
1e5a0     14 4E 85 F1 | 	sub	fp, #20
1e5a4     1D 14 0E F2 | 	cmp	arg02, #29 wz
1e5a8     24 00 90 5D |  if_ne	jmp	#LR__2403
1e5ac     14 4E 05 F1 | 	add	fp, #20
1e5b0     A7 3C 68 FC | 	wrlong	#30, fp
1e5b4     08 4E 85 F1 | 	sub	fp, #8
1e5b8     A7 12 02 FB | 	rdlong	arg01, fp
1e5bc     0C 4E 85 F1 | 	sub	fp, #12
1e5c0     00 B3 B0 FD | 	call	#__system___float_fromuns
1e5c4     0C 4E 05 F1 | 	add	fp, #12
1e5c8     A7 FA 61 FC | 	wrlong	result1, fp
1e5cc     0C 4E 85 F1 | 	sub	fp, #12
1e5d0                 | LR__2403
1e5d0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
1e5d0     08 4E 05 F1 | 	add	fp, #8
1e5d4     A7 14 02 FB | 	rdlong	arg02, fp
1e5d8     08 4E 85 F1 | 	sub	fp, #8
1e5dc     1E 14 0E F2 | 	cmp	arg02, #30 wz
1e5e0     14 4E 05 A1 |  if_e	add	fp, #20
1e5e4     A7 26 02 AB |  if_e	rdlong	local01, fp
1e5e8     14 4E 85 A1 |  if_e	sub	fp, #20
1e5ec     1E 26 0E A2 |  if_e	cmp	local01, #30 wz
1e5f0     1C 00 90 5D |  if_ne	jmp	#LR__2404
1e5f4     A7 12 02 FB | 	rdlong	arg01, fp
1e5f8     0C 4E 05 F1 | 	add	fp, #12
1e5fc     A7 14 02 FB | 	rdlong	arg02, fp
1e600     0C 4E 85 F1 | 	sub	fp, #12
1e604     C4 B8 B0 FD | 	call	#__system___float_div
1e608     A7 FA 61 FC | 	wrlong	result1, fp
1e60c     10 00 90 FD | 	jmp	#LR__2405
1e610                 | LR__2404
1e610     A7 16 68 FC | 	wrlong	#11, fp
1e614     08 4E 05 F1 | 	add	fp, #8
1e618     A7 FE 69 FC | 	wrlong	#255, fp
1e61c     08 4E 85 F1 | 	sub	fp, #8
1e620                 | LR__2405
1e620     A7 12 02 F6 | 	mov	arg01, fp
1e624     B0 F0 BE FD | 	call	#_push
1e628     A7 F0 03 F6 | 	mov	ptra, fp
1e62c     B2 00 A0 FD | 	call	#popregs_
1e630                 | _do_fdiv_ret
1e630     2D 00 64 FD | 	ret
1e634                 | 
1e634                 | ' 
1e634                 | ' '--------------------------------- greater or equal (>=)
1e634                 | ' 
1e634                 | ' sub do_ge
1e634                 | _do_ge
1e634     05 4A 05 F6 | 	mov	COUNT_, #5
1e638     A8 00 A0 FD | 	call	#pushregs_
1e63c     18 F0 07 F1 | 	add	ptra, #24
1e640     FC EF BE FD | 	call	#_pop
1e644     FD 26 02 F6 | 	mov	local01, result1
1e648     FE 28 02 F6 | 	mov	local02, result2
1e64c     FF 2A 02 F6 | 	mov	local03, result3
1e650     0C 4E 05 F1 | 	add	fp, #12
1e654     A7 26 62 FC | 	wrlong	local01, fp
1e658     04 4E 05 F1 | 	add	fp, #4
1e65c     A7 28 62 FC | 	wrlong	local02, fp
1e660     04 4E 05 F1 | 	add	fp, #4
1e664     A7 2A 62 FC | 	wrlong	local03, fp
1e668     14 4E 85 F1 | 	sub	fp, #20
1e66c     D0 EF BE FD | 	call	#_pop
1e670     FF 2A 02 F6 | 	mov	local03, result3
1e674     A7 FA 61 FC | 	wrlong	result1, fp
1e678     04 4E 05 F1 | 	add	fp, #4
1e67c     A7 FC 61 FC | 	wrlong	result2, fp
1e680     04 4E 05 F1 | 	add	fp, #4
1e684     A7 2A 62 FC | 	wrlong	local03, fp
1e688                 | ' 
1e688                 | ' t2=pop()
1e688                 | ' t1=pop()
1e688                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
1e688     08 4E 85 F1 | 	sub	fp, #8
1e68c     1F 2A 0E F2 | 	cmp	local03, #31 wz
1e690     14 4E 05 A1 |  if_e	add	fp, #20
1e694     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e698     14 4E 85 A1 |  if_e	sub	fp, #20
1e69c     16 2B 02 A6 |  if_e	mov	local03, local04
1e6a0     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1e6a4     28 00 90 5D |  if_ne	jmp	#LR__2410
1e6a8     00 26 06 F6 | 	mov	local01, #0
1e6ac     A7 12 02 FB | 	rdlong	arg01, fp
1e6b0     0C 4E 05 F1 | 	add	fp, #12
1e6b4     A7 14 02 FB | 	rdlong	arg02, fp
1e6b8     0C 4E 85 F1 | 	sub	fp, #12
1e6bc     B8 87 B0 FD | 	call	#__system___string_cmp
1e6c0     00 FA 55 F2 | 	cmps	result1, #0 wc
1e6c4     00 26 26 36 |  if_ae	not	local01, #0
1e6c8     A7 26 62 FC | 	wrlong	local01, fp
1e6cc     24 04 90 FD | 	jmp	#LR__2423
1e6d0                 | LR__2410
1e6d0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
1e6d0     08 4E 05 F1 | 	add	fp, #8
1e6d4     A7 26 02 FB | 	rdlong	local01, fp
1e6d8     08 4E 85 F1 | 	sub	fp, #8
1e6dc     1E 26 0E F2 | 	cmp	local01, #30 wz
1e6e0     14 4E 05 A1 |  if_e	add	fp, #20
1e6e4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e6e8     14 4E 85 A1 |  if_e	sub	fp, #20
1e6ec     16 2B 02 A6 |  if_e	mov	local03, local04
1e6f0     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1e6f4     2C 00 90 5D |  if_ne	jmp	#LR__2411
1e6f8     00 26 06 F6 | 	mov	local01, #0
1e6fc     A7 12 02 FB | 	rdlong	arg01, fp
1e700     0C 4E 05 F1 | 	add	fp, #12
1e704     A7 14 02 FB | 	rdlong	arg02, fp
1e708     0C 4E 85 F1 | 	sub	fp, #12
1e70c     01 16 66 F6 | 	neg	arg03, #1
1e710     E8 B9 B0 FD | 	call	#__system___float_cmp
1e714     00 FA 55 F2 | 	cmps	result1, #0 wc
1e718     00 26 26 36 |  if_ae	not	local01, #0
1e71c     A7 26 62 FC | 	wrlong	local01, fp
1e720     D0 03 90 FD | 	jmp	#LR__2423
1e724                 | LR__2411
1e724                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
1e724     08 4E 05 F1 | 	add	fp, #8
1e728     A7 26 02 FB | 	rdlong	local01, fp
1e72c     08 4E 85 F1 | 	sub	fp, #8
1e730     1E 26 0E F2 | 	cmp	local01, #30 wz
1e734     14 4E 05 A1 |  if_e	add	fp, #20
1e738     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e73c     14 4E 85 A1 |  if_e	sub	fp, #20
1e740     16 2B 02 A6 |  if_e	mov	local03, local04
1e744     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e748     48 00 90 5D |  if_ne	jmp	#LR__2412
1e74c     00 26 06 F6 | 	mov	local01, #0
1e750     A7 28 02 FB | 	rdlong	local02, fp
1e754     0C 4E 05 F1 | 	add	fp, #12
1e758     A7 12 02 FB | 	rdlong	arg01, fp
1e75c     0C 4E 85 F1 | 	sub	fp, #12
1e760     09 13 52 F6 | 	abs	arg01, arg01 wc
1e764     1F 2E C6 C9 |  if_b	decod	local05, #31
1e768     00 2E 06 36 |  if_ae	mov	local05, #0
1e76c     54 B1 B0 FD | 	call	#__system___float_fromuns
1e770     17 FB 61 F5 | 	xor	result1, local05
1e774     FD 14 02 F6 | 	mov	arg02, result1
1e778     14 13 02 F6 | 	mov	arg01, local02
1e77c     01 16 66 F6 | 	neg	arg03, #1
1e780     78 B9 B0 FD | 	call	#__system___float_cmp
1e784     00 FA 55 F2 | 	cmps	result1, #0 wc
1e788     00 26 26 36 |  if_ae	not	local01, #0
1e78c     A7 26 62 FC | 	wrlong	local01, fp
1e790     60 03 90 FD | 	jmp	#LR__2423
1e794                 | LR__2412
1e794                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
1e794     08 4E 05 F1 | 	add	fp, #8
1e798     A7 26 02 FB | 	rdlong	local01, fp
1e79c     08 4E 85 F1 | 	sub	fp, #8
1e7a0     1E 26 0E F2 | 	cmp	local01, #30 wz
1e7a4     14 4E 05 A1 |  if_e	add	fp, #20
1e7a8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e7ac     14 4E 85 A1 |  if_e	sub	fp, #20
1e7b0     16 2B 02 A6 |  if_e	mov	local03, local04
1e7b4     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e7b8     38 00 90 5D |  if_ne	jmp	#LR__2413
1e7bc     00 26 06 F6 | 	mov	local01, #0
1e7c0     A7 28 02 FB | 	rdlong	local02, fp
1e7c4     0C 4E 05 F1 | 	add	fp, #12
1e7c8     A7 12 02 FB | 	rdlong	arg01, fp
1e7cc     0C 4E 85 F1 | 	sub	fp, #12
1e7d0     F0 B0 B0 FD | 	call	#__system___float_fromuns
1e7d4     FD 14 02 F6 | 	mov	arg02, result1
1e7d8     14 13 02 F6 | 	mov	arg01, local02
1e7dc     01 16 66 F6 | 	neg	arg03, #1
1e7e0     18 B9 B0 FD | 	call	#__system___float_cmp
1e7e4     00 FA 55 F2 | 	cmps	result1, #0 wc
1e7e8     00 26 26 36 |  if_ae	not	local01, #0
1e7ec     A7 26 62 FC | 	wrlong	local01, fp
1e7f0     00 03 90 FD | 	jmp	#LR__2423
1e7f4                 | LR__2413
1e7f4                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
1e7f4     08 4E 05 F1 | 	add	fp, #8
1e7f8     A7 26 02 FB | 	rdlong	local01, fp
1e7fc     08 4E 85 F1 | 	sub	fp, #8
1e800     1C 26 0E F2 | 	cmp	local01, #28 wz
1e804     14 4E 05 A1 |  if_e	add	fp, #20
1e808     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e80c     14 4E 85 A1 |  if_e	sub	fp, #20
1e810     16 2B 02 A6 |  if_e	mov	local03, local04
1e814     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1e818     44 00 90 5D |  if_ne	jmp	#LR__2414
1e81c     00 26 06 F6 | 	mov	local01, #0
1e820     A7 12 02 FB | 	rdlong	arg01, fp
1e824     09 13 52 F6 | 	abs	arg01, arg01 wc
1e828     1F 2E C6 C9 |  if_b	decod	local05, #31
1e82c     00 2E 06 36 |  if_ae	mov	local05, #0
1e830     90 B0 B0 FD | 	call	#__system___float_fromuns
1e834     17 FB 61 F5 | 	xor	result1, local05
1e838     FD 12 02 F6 | 	mov	arg01, result1
1e83c     0C 4E 05 F1 | 	add	fp, #12
1e840     A7 14 02 FB | 	rdlong	arg02, fp
1e844     0C 4E 85 F1 | 	sub	fp, #12
1e848     01 16 66 F6 | 	neg	arg03, #1
1e84c     AC B8 B0 FD | 	call	#__system___float_cmp
1e850     00 FA 55 F2 | 	cmps	result1, #0 wc
1e854     00 26 26 36 |  if_ae	not	local01, #0
1e858     A7 26 62 FC | 	wrlong	local01, fp
1e85c     94 02 90 FD | 	jmp	#LR__2423
1e860                 | LR__2414
1e860                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
1e860     08 4E 05 F1 | 	add	fp, #8
1e864     A7 26 02 FB | 	rdlong	local01, fp
1e868     08 4E 85 F1 | 	sub	fp, #8
1e86c     1C 26 0E F2 | 	cmp	local01, #28 wz
1e870     14 4E 05 A1 |  if_e	add	fp, #20
1e874     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e878     14 4E 85 A1 |  if_e	sub	fp, #20
1e87c     16 2B 02 A6 |  if_e	mov	local03, local04
1e880     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e884     24 00 90 5D |  if_ne	jmp	#LR__2415
1e888     00 26 06 F6 | 	mov	local01, #0
1e88c     A7 28 02 FB | 	rdlong	local02, fp
1e890     0C 4E 05 F1 | 	add	fp, #12
1e894     A7 2A 02 FB | 	rdlong	local03, fp
1e898     0C 4E 85 F1 | 	sub	fp, #12
1e89c     15 29 52 F2 | 	cmps	local02, local03 wc
1e8a0     01 26 66 36 |  if_ae	neg	local01, #1
1e8a4     A7 26 62 FC | 	wrlong	local01, fp
1e8a8     48 02 90 FD | 	jmp	#LR__2423
1e8ac                 | LR__2415
1e8ac                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
1e8ac     08 4E 05 F1 | 	add	fp, #8
1e8b0     A7 26 02 FB | 	rdlong	local01, fp
1e8b4     08 4E 85 F1 | 	sub	fp, #8
1e8b8     1C 26 0E F2 | 	cmp	local01, #28 wz
1e8bc     14 4E 05 A1 |  if_e	add	fp, #20
1e8c0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e8c4     14 4E 85 A1 |  if_e	sub	fp, #20
1e8c8     16 2B 02 A6 |  if_e	mov	local03, local04
1e8cc     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e8d0     24 00 90 5D |  if_ne	jmp	#LR__2416
1e8d4     00 26 06 F6 | 	mov	local01, #0
1e8d8     A7 28 02 FB | 	rdlong	local02, fp
1e8dc     0C 4E 05 F1 | 	add	fp, #12
1e8e0     A7 2A 02 FB | 	rdlong	local03, fp
1e8e4     0C 4E 85 F1 | 	sub	fp, #12
1e8e8     15 29 52 F2 | 	cmps	local02, local03 wc
1e8ec     01 26 66 36 |  if_ae	neg	local01, #1
1e8f0     A7 26 62 FC | 	wrlong	local01, fp
1e8f4     FC 01 90 FD | 	jmp	#LR__2423
1e8f8                 | LR__2416
1e8f8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
1e8f8     08 4E 05 F1 | 	add	fp, #8
1e8fc     A7 26 02 FB | 	rdlong	local01, fp
1e900     08 4E 85 F1 | 	sub	fp, #8
1e904     1D 26 0E F2 | 	cmp	local01, #29 wz
1e908     14 4E 05 A1 |  if_e	add	fp, #20
1e90c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e910     14 4E 85 A1 |  if_e	sub	fp, #20
1e914     16 2B 02 A6 |  if_e	mov	local03, local04
1e918     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1e91c     34 00 90 5D |  if_ne	jmp	#LR__2417
1e920     00 26 06 F6 | 	mov	local01, #0
1e924     A7 12 02 FB | 	rdlong	arg01, fp
1e928     98 AF B0 FD | 	call	#__system___float_fromuns
1e92c     FD 12 02 F6 | 	mov	arg01, result1
1e930     0C 4E 05 F1 | 	add	fp, #12
1e934     A7 14 02 FB | 	rdlong	arg02, fp
1e938     0C 4E 85 F1 | 	sub	fp, #12
1e93c     01 16 66 F6 | 	neg	arg03, #1
1e940     B8 B7 B0 FD | 	call	#__system___float_cmp
1e944     00 FA 55 F2 | 	cmps	result1, #0 wc
1e948     00 26 26 36 |  if_ae	not	local01, #0
1e94c     A7 26 62 FC | 	wrlong	local01, fp
1e950     A0 01 90 FD | 	jmp	#LR__2423
1e954                 | LR__2417
1e954                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
1e954     08 4E 05 F1 | 	add	fp, #8
1e958     A7 26 02 FB | 	rdlong	local01, fp
1e95c     08 4E 85 F1 | 	sub	fp, #8
1e960     1D 26 0E F2 | 	cmp	local01, #29 wz
1e964     14 4E 05 A1 |  if_e	add	fp, #20
1e968     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e96c     14 4E 85 A1 |  if_e	sub	fp, #20
1e970     1C 2C 0E A2 |  if_e	cmp	local04, #28 wz
1e974     24 00 90 5D |  if_ne	jmp	#LR__2418
1e978     00 26 06 F6 | 	mov	local01, #0
1e97c     A7 28 02 FB | 	rdlong	local02, fp
1e980     0C 4E 05 F1 | 	add	fp, #12
1e984     A7 2A 02 FB | 	rdlong	local03, fp
1e988     0C 4E 85 F1 | 	sub	fp, #12
1e98c     15 29 52 F2 | 	cmps	local02, local03 wc
1e990     01 26 66 36 |  if_ae	neg	local01, #1
1e994     A7 26 62 FC | 	wrlong	local01, fp
1e998     58 01 90 FD | 	jmp	#LR__2423
1e99c                 | LR__2418
1e99c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
1e99c     08 4E 05 F1 | 	add	fp, #8
1e9a0     A7 26 02 FB | 	rdlong	local01, fp
1e9a4     08 4E 85 F1 | 	sub	fp, #8
1e9a8     1D 26 0E F2 | 	cmp	local01, #29 wz
1e9ac     14 4E 05 A1 |  if_e	add	fp, #20
1e9b0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e9b4     14 4E 85 A1 |  if_e	sub	fp, #20
1e9b8     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e9bc     24 00 90 5D |  if_ne	jmp	#LR__2419
1e9c0     00 26 06 F6 | 	mov	local01, #0
1e9c4     A7 28 02 FB | 	rdlong	local02, fp
1e9c8     0C 4E 05 F1 | 	add	fp, #12
1e9cc     A7 2A 02 FB | 	rdlong	local03, fp
1e9d0     0C 4E 85 F1 | 	sub	fp, #12
1e9d4     15 29 12 F2 | 	cmp	local02, local03 wc
1e9d8     01 26 66 36 |  if_ae	neg	local01, #1
1e9dc     A7 26 62 FC | 	wrlong	local01, fp
1e9e0     10 01 90 FD | 	jmp	#LR__2423
1e9e4                 | LR__2419
1e9e4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>=t2.result.sresult):goto 1180
1e9e4     08 4E 05 F1 | 	add	fp, #8
1e9e8     A7 26 02 FB | 	rdlong	local01, fp
1e9ec     08 4E 85 F1 | 	sub	fp, #8
1e9f0     2B 26 0E F2 | 	cmp	local01, #43 wz
1e9f4     14 4E 05 A1 |  if_e	add	fp, #20
1e9f8     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e9fc     14 4E 85 A1 |  if_e	sub	fp, #20
1ea00     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1ea04     30 00 90 5D |  if_ne	jmp	#LR__2420
1ea08     00 26 06 F6 | 	mov	local01, #0
1ea0c     A7 12 02 FB | 	rdlong	arg01, fp
1ea10     A4 ED BE FD | 	call	#_convertstring
1ea14     FD 12 02 F6 | 	mov	arg01, result1
1ea18     0C 4E 05 F1 | 	add	fp, #12
1ea1c     A7 14 02 FB | 	rdlong	arg02, fp
1ea20     0C 4E 85 F1 | 	sub	fp, #12
1ea24     50 84 B0 FD | 	call	#__system___string_cmp
1ea28     00 FA 55 F2 | 	cmps	result1, #0 wc
1ea2c     00 26 26 36 |  if_ae	not	local01, #0
1ea30     A7 26 62 FC | 	wrlong	local01, fp
1ea34     BC 00 90 FD | 	jmp	#LR__2423
1ea38                 | LR__2420
1ea38                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>=convertstring(t2.result.uresult)) :goto 1180
1ea38     08 4E 05 F1 | 	add	fp, #8
1ea3c     A7 26 02 FB | 	rdlong	local01, fp
1ea40     08 4E 85 F1 | 	sub	fp, #8
1ea44     1F 26 0E F2 | 	cmp	local01, #31 wz
1ea48     14 4E 05 A1 |  if_e	add	fp, #20
1ea4c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ea50     14 4E 85 A1 |  if_e	sub	fp, #20
1ea54     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1ea58     34 00 90 5D |  if_ne	jmp	#LR__2421
1ea5c     00 26 06 F6 | 	mov	local01, #0
1ea60     A7 28 02 FB | 	rdlong	local02, fp
1ea64     0C 4E 05 F1 | 	add	fp, #12
1ea68     A7 12 02 FB | 	rdlong	arg01, fp
1ea6c     0C 4E 85 F1 | 	sub	fp, #12
1ea70     44 ED BE FD | 	call	#_convertstring
1ea74     FD 14 02 F6 | 	mov	arg02, result1
1ea78     14 13 02 F6 | 	mov	arg01, local02
1ea7c     F8 83 B0 FD | 	call	#__system___string_cmp
1ea80     00 FA 55 F2 | 	cmps	result1, #0 wc
1ea84     00 26 26 36 |  if_ae	not	local01, #0
1ea88     A7 26 62 FC | 	wrlong	local01, fp
1ea8c     64 00 90 FD | 	jmp	#LR__2423
1ea90                 | LR__2421
1ea90                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>=convertstring(t2.result.uresult)) :goto 1180
1ea90     08 4E 05 F1 | 	add	fp, #8
1ea94     A7 26 02 FB | 	rdlong	local01, fp
1ea98     08 4E 85 F1 | 	sub	fp, #8
1ea9c     2B 26 0E F2 | 	cmp	local01, #43 wz
1eaa0     14 4E 05 A1 |  if_e	add	fp, #20
1eaa4     A7 2A 02 AB |  if_e	rdlong	local03, fp
1eaa8     14 4E 85 A1 |  if_e	sub	fp, #20
1eaac     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1eab0     3C 00 90 5D |  if_ne	jmp	#LR__2422
1eab4     00 26 06 F6 | 	mov	local01, #0
1eab8     A7 12 02 FB | 	rdlong	arg01, fp
1eabc     F8 EC BE FD | 	call	#_convertstring
1eac0     FD 28 02 F6 | 	mov	local02, result1
1eac4     0C 4E 05 F1 | 	add	fp, #12
1eac8     A7 12 02 FB | 	rdlong	arg01, fp
1eacc     0C 4E 85 F1 | 	sub	fp, #12
1ead0     E4 EC BE FD | 	call	#_convertstring
1ead4     FD 14 02 F6 | 	mov	arg02, result1
1ead8     14 13 02 F6 | 	mov	arg01, local02
1eadc     98 83 B0 FD | 	call	#__system___string_cmp
1eae0     00 FA 55 F2 | 	cmps	result1, #0 wc
1eae4     00 26 26 36 |  if_ae	not	local01, #0
1eae8     A7 26 62 FC | 	wrlong	local01, fp
1eaec     04 00 90 FD | 	jmp	#LR__2423
1eaf0                 | LR__2422
1eaf0     A7 00 68 FC | 	wrlong	#0, fp
1eaf4                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1eaf4                 | LR__2423
1eaf4     08 4E 05 F1 | 	add	fp, #8
1eaf8     A7 38 68 FC | 	wrlong	#28, fp
1eafc     08 4E 85 F1 | 	sub	fp, #8
1eb00                 | ' 1180 t1.result_type=result_int : if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1eb00     A7 26 0A FB | 	rdlong	local01, fp wz
1eb04     A7 02 68 5C |  if_ne	wrlong	#1, fp
1eb08     A7 12 02 F6 | 	mov	arg01, fp
1eb0c     C8 EB BE FD | 	call	#_push
1eb10     A7 F0 03 F6 | 	mov	ptra, fp
1eb14     B2 00 A0 FD | 	call	#popregs_
1eb18                 | _do_ge_ret
1eb18     2D 00 64 FD | 	ret
1eb1c                 | 
1eb1c                 | ' 
1eb1c                 | ' '--------------------------------- greater than (>)
1eb1c                 | ' 
1eb1c                 | ' sub do_gt
1eb1c                 | _do_gt
1eb1c     05 4A 05 F6 | 	mov	COUNT_, #5
1eb20     A8 00 A0 FD | 	call	#pushregs_
1eb24     18 F0 07 F1 | 	add	ptra, #24
1eb28     14 EB BE FD | 	call	#_pop
1eb2c     FD 26 02 F6 | 	mov	local01, result1
1eb30     FE 28 02 F6 | 	mov	local02, result2
1eb34     FF 2A 02 F6 | 	mov	local03, result3
1eb38     0C 4E 05 F1 | 	add	fp, #12
1eb3c     A7 26 62 FC | 	wrlong	local01, fp
1eb40     04 4E 05 F1 | 	add	fp, #4
1eb44     A7 28 62 FC | 	wrlong	local02, fp
1eb48     04 4E 05 F1 | 	add	fp, #4
1eb4c     A7 2A 62 FC | 	wrlong	local03, fp
1eb50     14 4E 85 F1 | 	sub	fp, #20
1eb54     E8 EA BE FD | 	call	#_pop
1eb58     FF 2A 02 F6 | 	mov	local03, result3
1eb5c     A7 FA 61 FC | 	wrlong	result1, fp
1eb60     04 4E 05 F1 | 	add	fp, #4
1eb64     A7 FC 61 FC | 	wrlong	result2, fp
1eb68     04 4E 05 F1 | 	add	fp, #4
1eb6c     A7 2A 62 FC | 	wrlong	local03, fp
1eb70                 | ' 
1eb70                 | ' t2=pop()
1eb70                 | ' t1=pop()
1eb70                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
1eb70     08 4E 85 F1 | 	sub	fp, #8
1eb74     1F 2A 0E F2 | 	cmp	local03, #31 wz
1eb78     14 4E 05 A1 |  if_e	add	fp, #20
1eb7c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1eb80     14 4E 85 A1 |  if_e	sub	fp, #20
1eb84     16 2B 02 A6 |  if_e	mov	local03, local04
1eb88     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1eb8c     28 00 90 5D |  if_ne	jmp	#LR__2430
1eb90     00 26 06 F6 | 	mov	local01, #0
1eb94     A7 12 02 FB | 	rdlong	arg01, fp
1eb98     0C 4E 05 F1 | 	add	fp, #12
1eb9c     A7 14 02 FB | 	rdlong	arg02, fp
1eba0     0C 4E 85 F1 | 	sub	fp, #12
1eba4     D0 82 B0 FD | 	call	#__system___string_cmp
1eba8     01 FA 55 F2 | 	cmps	result1, #1 wc
1ebac     00 26 26 36 |  if_ae	not	local01, #0
1ebb0     A7 26 62 FC | 	wrlong	local01, fp
1ebb4     20 04 90 FD | 	jmp	#LR__2443
1ebb8                 | LR__2430
1ebb8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
1ebb8     08 4E 05 F1 | 	add	fp, #8
1ebbc     A7 26 02 FB | 	rdlong	local01, fp
1ebc0     08 4E 85 F1 | 	sub	fp, #8
1ebc4     1E 26 0E F2 | 	cmp	local01, #30 wz
1ebc8     14 4E 05 A1 |  if_e	add	fp, #20
1ebcc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ebd0     14 4E 85 A1 |  if_e	sub	fp, #20
1ebd4     16 2B 02 A6 |  if_e	mov	local03, local04
1ebd8     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1ebdc     2C 00 90 5D |  if_ne	jmp	#LR__2431
1ebe0     00 26 06 F6 | 	mov	local01, #0
1ebe4     A7 12 02 FB | 	rdlong	arg01, fp
1ebe8     0C 4E 05 F1 | 	add	fp, #12
1ebec     A7 14 02 FB | 	rdlong	arg02, fp
1ebf0     0C 4E 85 F1 | 	sub	fp, #12
1ebf4     01 16 66 F6 | 	neg	arg03, #1
1ebf8     00 B5 B0 FD | 	call	#__system___float_cmp
1ebfc     01 FA 55 F2 | 	cmps	result1, #1 wc
1ec00     00 26 26 36 |  if_ae	not	local01, #0
1ec04     A7 26 62 FC | 	wrlong	local01, fp
1ec08     CC 03 90 FD | 	jmp	#LR__2443
1ec0c                 | LR__2431
1ec0c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
1ec0c     08 4E 05 F1 | 	add	fp, #8
1ec10     A7 26 02 FB | 	rdlong	local01, fp
1ec14     08 4E 85 F1 | 	sub	fp, #8
1ec18     1E 26 0E F2 | 	cmp	local01, #30 wz
1ec1c     14 4E 05 A1 |  if_e	add	fp, #20
1ec20     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ec24     14 4E 85 A1 |  if_e	sub	fp, #20
1ec28     16 2B 02 A6 |  if_e	mov	local03, local04
1ec2c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1ec30     48 00 90 5D |  if_ne	jmp	#LR__2432
1ec34     00 26 06 F6 | 	mov	local01, #0
1ec38     A7 28 02 FB | 	rdlong	local02, fp
1ec3c     0C 4E 05 F1 | 	add	fp, #12
1ec40     A7 12 02 FB | 	rdlong	arg01, fp
1ec44     0C 4E 85 F1 | 	sub	fp, #12
1ec48     09 13 52 F6 | 	abs	arg01, arg01 wc
1ec4c     1F 2E C6 C9 |  if_b	decod	local05, #31
1ec50     00 2E 06 36 |  if_ae	mov	local05, #0
1ec54     6C AC B0 FD | 	call	#__system___float_fromuns
1ec58     17 FB 61 F5 | 	xor	result1, local05
1ec5c     FD 14 02 F6 | 	mov	arg02, result1
1ec60     14 13 02 F6 | 	mov	arg01, local02
1ec64     01 16 66 F6 | 	neg	arg03, #1
1ec68     90 B4 B0 FD | 	call	#__system___float_cmp
1ec6c     01 FA 55 F2 | 	cmps	result1, #1 wc
1ec70     00 26 26 36 |  if_ae	not	local01, #0
1ec74     A7 26 62 FC | 	wrlong	local01, fp
1ec78     5C 03 90 FD | 	jmp	#LR__2443
1ec7c                 | LR__2432
1ec7c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
1ec7c     08 4E 05 F1 | 	add	fp, #8
1ec80     A7 26 02 FB | 	rdlong	local01, fp
1ec84     08 4E 85 F1 | 	sub	fp, #8
1ec88     1E 26 0E F2 | 	cmp	local01, #30 wz
1ec8c     14 4E 05 A1 |  if_e	add	fp, #20
1ec90     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ec94     14 4E 85 A1 |  if_e	sub	fp, #20
1ec98     16 2B 02 A6 |  if_e	mov	local03, local04
1ec9c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1eca0     38 00 90 5D |  if_ne	jmp	#LR__2433
1eca4     00 26 06 F6 | 	mov	local01, #0
1eca8     A7 28 02 FB | 	rdlong	local02, fp
1ecac     0C 4E 05 F1 | 	add	fp, #12
1ecb0     A7 12 02 FB | 	rdlong	arg01, fp
1ecb4     0C 4E 85 F1 | 	sub	fp, #12
1ecb8     08 AC B0 FD | 	call	#__system___float_fromuns
1ecbc     FD 14 02 F6 | 	mov	arg02, result1
1ecc0     14 13 02 F6 | 	mov	arg01, local02
1ecc4     01 16 66 F6 | 	neg	arg03, #1
1ecc8     30 B4 B0 FD | 	call	#__system___float_cmp
1eccc     01 FA 55 F2 | 	cmps	result1, #1 wc
1ecd0     00 26 26 36 |  if_ae	not	local01, #0
1ecd4     A7 26 62 FC | 	wrlong	local01, fp
1ecd8     FC 02 90 FD | 	jmp	#LR__2443
1ecdc                 | LR__2433
1ecdc                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
1ecdc     08 4E 05 F1 | 	add	fp, #8
1ece0     A7 26 02 FB | 	rdlong	local01, fp
1ece4     08 4E 85 F1 | 	sub	fp, #8
1ece8     1C 26 0E F2 | 	cmp	local01, #28 wz
1ecec     14 4E 05 A1 |  if_e	add	fp, #20
1ecf0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ecf4     14 4E 85 A1 |  if_e	sub	fp, #20
1ecf8     16 2B 02 A6 |  if_e	mov	local03, local04
1ecfc     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1ed00     44 00 90 5D |  if_ne	jmp	#LR__2434
1ed04     00 26 06 F6 | 	mov	local01, #0
1ed08     A7 12 02 FB | 	rdlong	arg01, fp
1ed0c     09 13 52 F6 | 	abs	arg01, arg01 wc
1ed10     1F 2E C6 C9 |  if_b	decod	local05, #31
1ed14     00 2E 06 36 |  if_ae	mov	local05, #0
1ed18     A8 AB B0 FD | 	call	#__system___float_fromuns
1ed1c     17 FB 61 F5 | 	xor	result1, local05
1ed20     FD 12 02 F6 | 	mov	arg01, result1
1ed24     0C 4E 05 F1 | 	add	fp, #12
1ed28     A7 14 02 FB | 	rdlong	arg02, fp
1ed2c     0C 4E 85 F1 | 	sub	fp, #12
1ed30     01 16 66 F6 | 	neg	arg03, #1
1ed34     C4 B3 B0 FD | 	call	#__system___float_cmp
1ed38     01 FA 55 F2 | 	cmps	result1, #1 wc
1ed3c     00 26 26 36 |  if_ae	not	local01, #0
1ed40     A7 26 62 FC | 	wrlong	local01, fp
1ed44     90 02 90 FD | 	jmp	#LR__2443
1ed48                 | LR__2434
1ed48                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
1ed48     08 4E 05 F1 | 	add	fp, #8
1ed4c     A7 26 02 FB | 	rdlong	local01, fp
1ed50     08 4E 85 F1 | 	sub	fp, #8
1ed54     1C 26 0E F2 | 	cmp	local01, #28 wz
1ed58     14 4E 05 A1 |  if_e	add	fp, #20
1ed5c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ed60     14 4E 85 A1 |  if_e	sub	fp, #20
1ed64     16 2B 02 A6 |  if_e	mov	local03, local04
1ed68     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1ed6c     24 00 90 5D |  if_ne	jmp	#LR__2435
1ed70     00 26 06 F6 | 	mov	local01, #0
1ed74     A7 28 02 FB | 	rdlong	local02, fp
1ed78     0C 4E 05 F1 | 	add	fp, #12
1ed7c     A7 2A 02 FB | 	rdlong	local03, fp
1ed80     0C 4E 85 F1 | 	sub	fp, #12
1ed84     15 29 5A F2 | 	cmps	local02, local03 wcz
1ed88     01 26 66 16 |  if_a	neg	local01, #1
1ed8c     A7 26 62 FC | 	wrlong	local01, fp
1ed90     44 02 90 FD | 	jmp	#LR__2443
1ed94                 | LR__2435
1ed94                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
1ed94     08 4E 05 F1 | 	add	fp, #8
1ed98     A7 26 02 FB | 	rdlong	local01, fp
1ed9c     08 4E 85 F1 | 	sub	fp, #8
1eda0     1C 26 0E F2 | 	cmp	local01, #28 wz
1eda4     14 4E 05 A1 |  if_e	add	fp, #20
1eda8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1edac     14 4E 85 A1 |  if_e	sub	fp, #20
1edb0     16 2B 02 A6 |  if_e	mov	local03, local04
1edb4     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1edb8     24 00 90 5D |  if_ne	jmp	#LR__2436
1edbc     00 26 06 F6 | 	mov	local01, #0
1edc0     A7 28 02 FB | 	rdlong	local02, fp
1edc4     0C 4E 05 F1 | 	add	fp, #12
1edc8     A7 2A 02 FB | 	rdlong	local03, fp
1edcc     0C 4E 85 F1 | 	sub	fp, #12
1edd0     15 29 5A F2 | 	cmps	local02, local03 wcz
1edd4     01 26 66 16 |  if_a	neg	local01, #1
1edd8     A7 26 62 FC | 	wrlong	local01, fp
1eddc     F8 01 90 FD | 	jmp	#LR__2443
1ede0                 | LR__2436
1ede0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
1ede0     08 4E 05 F1 | 	add	fp, #8
1ede4     A7 26 02 FB | 	rdlong	local01, fp
1ede8     08 4E 85 F1 | 	sub	fp, #8
1edec     1D 26 0E F2 | 	cmp	local01, #29 wz
1edf0     14 4E 05 A1 |  if_e	add	fp, #20
1edf4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1edf8     14 4E 85 A1 |  if_e	sub	fp, #20
1edfc     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1ee00     34 00 90 5D |  if_ne	jmp	#LR__2437
1ee04     00 26 06 F6 | 	mov	local01, #0
1ee08     A7 12 02 FB | 	rdlong	arg01, fp
1ee0c     B4 AA B0 FD | 	call	#__system___float_fromuns
1ee10     FD 12 02 F6 | 	mov	arg01, result1
1ee14     0C 4E 05 F1 | 	add	fp, #12
1ee18     A7 14 02 FB | 	rdlong	arg02, fp
1ee1c     0C 4E 85 F1 | 	sub	fp, #12
1ee20     01 16 66 F6 | 	neg	arg03, #1
1ee24     D4 B2 B0 FD | 	call	#__system___float_cmp
1ee28     01 FA 55 F2 | 	cmps	result1, #1 wc
1ee2c     00 26 26 36 |  if_ae	not	local01, #0
1ee30     A7 26 62 FC | 	wrlong	local01, fp
1ee34     A0 01 90 FD | 	jmp	#LR__2443
1ee38                 | LR__2437
1ee38                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
1ee38     08 4E 05 F1 | 	add	fp, #8
1ee3c     A7 26 02 FB | 	rdlong	local01, fp
1ee40     08 4E 85 F1 | 	sub	fp, #8
1ee44     1D 26 0E F2 | 	cmp	local01, #29 wz
1ee48     14 4E 05 A1 |  if_e	add	fp, #20
1ee4c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ee50     14 4E 85 A1 |  if_e	sub	fp, #20
1ee54     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1ee58     24 00 90 5D |  if_ne	jmp	#LR__2438
1ee5c     00 26 06 F6 | 	mov	local01, #0
1ee60     A7 28 02 FB | 	rdlong	local02, fp
1ee64     0C 4E 05 F1 | 	add	fp, #12
1ee68     A7 2A 02 FB | 	rdlong	local03, fp
1ee6c     0C 4E 85 F1 | 	sub	fp, #12
1ee70     15 29 5A F2 | 	cmps	local02, local03 wcz
1ee74     01 26 66 16 |  if_a	neg	local01, #1
1ee78     A7 26 62 FC | 	wrlong	local01, fp
1ee7c     58 01 90 FD | 	jmp	#LR__2443
1ee80                 | LR__2438
1ee80                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
1ee80     08 4E 05 F1 | 	add	fp, #8
1ee84     A7 26 02 FB | 	rdlong	local01, fp
1ee88     08 4E 85 F1 | 	sub	fp, #8
1ee8c     1D 26 0E F2 | 	cmp	local01, #29 wz
1ee90     14 4E 05 A1 |  if_e	add	fp, #20
1ee94     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ee98     14 4E 85 A1 |  if_e	sub	fp, #20
1ee9c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1eea0     24 00 90 5D |  if_ne	jmp	#LR__2439
1eea4     00 26 06 F6 | 	mov	local01, #0
1eea8     A7 28 02 FB | 	rdlong	local02, fp
1eeac     0C 4E 05 F1 | 	add	fp, #12
1eeb0     A7 2A 02 FB | 	rdlong	local03, fp
1eeb4     0C 4E 85 F1 | 	sub	fp, #12
1eeb8     15 29 1A F2 | 	cmp	local02, local03 wcz
1eebc     01 26 66 16 |  if_a	neg	local01, #1
1eec0     A7 26 62 FC | 	wrlong	local01, fp
1eec4     10 01 90 FD | 	jmp	#LR__2443
1eec8                 | LR__2439
1eec8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>t2.result.sresult):goto 1160
1eec8     08 4E 05 F1 | 	add	fp, #8
1eecc     A7 26 02 FB | 	rdlong	local01, fp
1eed0     08 4E 85 F1 | 	sub	fp, #8
1eed4     2B 26 0E F2 | 	cmp	local01, #43 wz
1eed8     14 4E 05 A1 |  if_e	add	fp, #20
1eedc     A7 2A 02 AB |  if_e	rdlong	local03, fp
1eee0     14 4E 85 A1 |  if_e	sub	fp, #20
1eee4     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1eee8     30 00 90 5D |  if_ne	jmp	#LR__2440
1eeec     00 26 06 F6 | 	mov	local01, #0
1eef0     A7 12 02 FB | 	rdlong	arg01, fp
1eef4     C0 E8 BE FD | 	call	#_convertstring
1eef8     FD 12 02 F6 | 	mov	arg01, result1
1eefc     0C 4E 05 F1 | 	add	fp, #12
1ef00     A7 14 02 FB | 	rdlong	arg02, fp
1ef04     0C 4E 85 F1 | 	sub	fp, #12
1ef08     6C 7F B0 FD | 	call	#__system___string_cmp
1ef0c     01 FA 55 F2 | 	cmps	result1, #1 wc
1ef10     00 26 26 36 |  if_ae	not	local01, #0
1ef14     A7 26 62 FC | 	wrlong	local01, fp
1ef18     BC 00 90 FD | 	jmp	#LR__2443
1ef1c                 | LR__2440
1ef1c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>convertstring(t2.result.uresult)) :goto 1160
1ef1c     08 4E 05 F1 | 	add	fp, #8
1ef20     A7 26 02 FB | 	rdlong	local01, fp
1ef24     08 4E 85 F1 | 	sub	fp, #8
1ef28     1F 26 0E F2 | 	cmp	local01, #31 wz
1ef2c     14 4E 05 A1 |  if_e	add	fp, #20
1ef30     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ef34     14 4E 85 A1 |  if_e	sub	fp, #20
1ef38     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1ef3c     34 00 90 5D |  if_ne	jmp	#LR__2441
1ef40     00 26 06 F6 | 	mov	local01, #0
1ef44     A7 28 02 FB | 	rdlong	local02, fp
1ef48     0C 4E 05 F1 | 	add	fp, #12
1ef4c     A7 12 02 FB | 	rdlong	arg01, fp
1ef50     0C 4E 85 F1 | 	sub	fp, #12
1ef54     60 E8 BE FD | 	call	#_convertstring
1ef58     FD 14 02 F6 | 	mov	arg02, result1
1ef5c     14 13 02 F6 | 	mov	arg01, local02
1ef60     14 7F B0 FD | 	call	#__system___string_cmp
1ef64     01 FA 55 F2 | 	cmps	result1, #1 wc
1ef68     00 26 26 36 |  if_ae	not	local01, #0
1ef6c     A7 26 62 FC | 	wrlong	local01, fp
1ef70     64 00 90 FD | 	jmp	#LR__2443
1ef74                 | LR__2441
1ef74                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>convertstring(t2.result.uresult)) :goto 1160
1ef74     08 4E 05 F1 | 	add	fp, #8
1ef78     A7 26 02 FB | 	rdlong	local01, fp
1ef7c     08 4E 85 F1 | 	sub	fp, #8
1ef80     2B 26 0E F2 | 	cmp	local01, #43 wz
1ef84     14 4E 05 A1 |  if_e	add	fp, #20
1ef88     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ef8c     14 4E 85 A1 |  if_e	sub	fp, #20
1ef90     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1ef94     3C 00 90 5D |  if_ne	jmp	#LR__2442
1ef98     00 26 06 F6 | 	mov	local01, #0
1ef9c     A7 12 02 FB | 	rdlong	arg01, fp
1efa0     14 E8 BE FD | 	call	#_convertstring
1efa4     FD 28 02 F6 | 	mov	local02, result1
1efa8     0C 4E 05 F1 | 	add	fp, #12
1efac     A7 12 02 FB | 	rdlong	arg01, fp
1efb0     0C 4E 85 F1 | 	sub	fp, #12
1efb4     00 E8 BE FD | 	call	#_convertstring
1efb8     FD 14 02 F6 | 	mov	arg02, result1
1efbc     14 13 02 F6 | 	mov	arg01, local02
1efc0     B4 7E B0 FD | 	call	#__system___string_cmp
1efc4     01 FA 55 F2 | 	cmps	result1, #1 wc
1efc8     00 26 26 36 |  if_ae	not	local01, #0
1efcc     A7 26 62 FC | 	wrlong	local01, fp
1efd0     04 00 90 FD | 	jmp	#LR__2443
1efd4                 | LR__2442
1efd4     A7 00 68 FC | 	wrlong	#0, fp
1efd8                 | LR__2443
1efd8     08 4E 05 F1 | 	add	fp, #8
1efdc     A7 38 68 FC | 	wrlong	#28, fp
1efe0     08 4E 85 F1 | 	sub	fp, #8
1efe4                 | ' t1.result.uresult=0
1efe4                 | ' 1160 t1.result_type=result_int : if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1efe4     A7 26 0A FB | 	rdlong	local01, fp wz
1efe8     A7 02 68 5C |  if_ne	wrlong	#1, fp
1efec     A7 12 02 F6 | 	mov	arg01, fp
1eff0     E4 E6 BE FD | 	call	#_push
1eff4     A7 F0 03 F6 | 	mov	ptra, fp
1eff8     B2 00 A0 FD | 	call	#popregs_
1effc                 | _do_gt_ret
1effc     2D 00 64 FD | 	ret
1f000                 | 
1f000                 | ' 
1f000                 | ' '--------------------------------- less or equal (<=)
1f000                 | ' 
1f000                 | ' sub do_le
1f000                 | _do_le
1f000     05 4A 05 F6 | 	mov	COUNT_, #5
1f004     A8 00 A0 FD | 	call	#pushregs_
1f008     18 F0 07 F1 | 	add	ptra, #24
1f00c     30 E6 BE FD | 	call	#_pop
1f010     FD 26 02 F6 | 	mov	local01, result1
1f014     FE 28 02 F6 | 	mov	local02, result2
1f018     FF 2A 02 F6 | 	mov	local03, result3
1f01c     0C 4E 05 F1 | 	add	fp, #12
1f020     A7 26 62 FC | 	wrlong	local01, fp
1f024     04 4E 05 F1 | 	add	fp, #4
1f028     A7 28 62 FC | 	wrlong	local02, fp
1f02c     04 4E 05 F1 | 	add	fp, #4
1f030     A7 2A 62 FC | 	wrlong	local03, fp
1f034     14 4E 85 F1 | 	sub	fp, #20
1f038     04 E6 BE FD | 	call	#_pop
1f03c     FF 2A 02 F6 | 	mov	local03, result3
1f040     A7 FA 61 FC | 	wrlong	result1, fp
1f044     04 4E 05 F1 | 	add	fp, #4
1f048     A7 FC 61 FC | 	wrlong	result2, fp
1f04c     04 4E 05 F1 | 	add	fp, #4
1f050     A7 2A 62 FC | 	wrlong	local03, fp
1f054                 | ' 
1f054                 | ' t2=pop()
1f054                 | ' t1=pop()
1f054                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
1f054     08 4E 85 F1 | 	sub	fp, #8
1f058     1F 2A 0E F2 | 	cmp	local03, #31 wz
1f05c     14 4E 05 A1 |  if_e	add	fp, #20
1f060     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f064     14 4E 85 A1 |  if_e	sub	fp, #20
1f068     16 2B 02 A6 |  if_e	mov	local03, local04
1f06c     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1f070     28 00 90 5D |  if_ne	jmp	#LR__2450
1f074     00 26 06 F6 | 	mov	local01, #0
1f078     A7 12 02 FB | 	rdlong	arg01, fp
1f07c     0C 4E 05 F1 | 	add	fp, #12
1f080     A7 14 02 FB | 	rdlong	arg02, fp
1f084     0C 4E 85 F1 | 	sub	fp, #12
1f088     EC 7D B0 FD | 	call	#__system___string_cmp
1f08c     01 FA 55 F2 | 	cmps	result1, #1 wc
1f090     00 26 26 C6 |  if_b	not	local01, #0
1f094     A7 26 62 FC | 	wrlong	local01, fp
1f098     20 04 90 FD | 	jmp	#LR__2463
1f09c                 | LR__2450
1f09c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
1f09c     08 4E 05 F1 | 	add	fp, #8
1f0a0     A7 26 02 FB | 	rdlong	local01, fp
1f0a4     08 4E 85 F1 | 	sub	fp, #8
1f0a8     1E 26 0E F2 | 	cmp	local01, #30 wz
1f0ac     14 4E 05 A1 |  if_e	add	fp, #20
1f0b0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f0b4     14 4E 85 A1 |  if_e	sub	fp, #20
1f0b8     16 2B 02 A6 |  if_e	mov	local03, local04
1f0bc     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1f0c0     2C 00 90 5D |  if_ne	jmp	#LR__2451
1f0c4     00 26 06 F6 | 	mov	local01, #0
1f0c8     A7 12 02 FB | 	rdlong	arg01, fp
1f0cc     0C 4E 05 F1 | 	add	fp, #12
1f0d0     A7 14 02 FB | 	rdlong	arg02, fp
1f0d4     0C 4E 85 F1 | 	sub	fp, #12
1f0d8     01 16 06 F6 | 	mov	arg03, #1
1f0dc     1C B0 B0 FD | 	call	#__system___float_cmp
1f0e0     01 FA 55 F2 | 	cmps	result1, #1 wc
1f0e4     00 26 26 C6 |  if_b	not	local01, #0
1f0e8     A7 26 62 FC | 	wrlong	local01, fp
1f0ec     CC 03 90 FD | 	jmp	#LR__2463
1f0f0                 | LR__2451
1f0f0                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
1f0f0     08 4E 05 F1 | 	add	fp, #8
1f0f4     A7 26 02 FB | 	rdlong	local01, fp
1f0f8     08 4E 85 F1 | 	sub	fp, #8
1f0fc     1E 26 0E F2 | 	cmp	local01, #30 wz
1f100     14 4E 05 A1 |  if_e	add	fp, #20
1f104     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f108     14 4E 85 A1 |  if_e	sub	fp, #20
1f10c     16 2B 02 A6 |  if_e	mov	local03, local04
1f110     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f114     48 00 90 5D |  if_ne	jmp	#LR__2452
1f118     00 26 06 F6 | 	mov	local01, #0
1f11c     A7 28 02 FB | 	rdlong	local02, fp
1f120     0C 4E 05 F1 | 	add	fp, #12
1f124     A7 12 02 FB | 	rdlong	arg01, fp
1f128     0C 4E 85 F1 | 	sub	fp, #12
1f12c     09 13 52 F6 | 	abs	arg01, arg01 wc
1f130     1F 2E C6 C9 |  if_b	decod	local05, #31
1f134     00 2E 06 36 |  if_ae	mov	local05, #0
1f138     88 A7 B0 FD | 	call	#__system___float_fromuns
1f13c     17 FB 61 F5 | 	xor	result1, local05
1f140     FD 14 02 F6 | 	mov	arg02, result1
1f144     14 13 02 F6 | 	mov	arg01, local02
1f148     01 16 06 F6 | 	mov	arg03, #1
1f14c     AC AF B0 FD | 	call	#__system___float_cmp
1f150     01 FA 55 F2 | 	cmps	result1, #1 wc
1f154     00 26 26 C6 |  if_b	not	local01, #0
1f158     A7 26 62 FC | 	wrlong	local01, fp
1f15c     5C 03 90 FD | 	jmp	#LR__2463
1f160                 | LR__2452
1f160                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
1f160     08 4E 05 F1 | 	add	fp, #8
1f164     A7 26 02 FB | 	rdlong	local01, fp
1f168     08 4E 85 F1 | 	sub	fp, #8
1f16c     1E 26 0E F2 | 	cmp	local01, #30 wz
1f170     14 4E 05 A1 |  if_e	add	fp, #20
1f174     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f178     14 4E 85 A1 |  if_e	sub	fp, #20
1f17c     16 2B 02 A6 |  if_e	mov	local03, local04
1f180     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f184     38 00 90 5D |  if_ne	jmp	#LR__2453
1f188     00 26 06 F6 | 	mov	local01, #0
1f18c     A7 28 02 FB | 	rdlong	local02, fp
1f190     0C 4E 05 F1 | 	add	fp, #12
1f194     A7 12 02 FB | 	rdlong	arg01, fp
1f198     0C 4E 85 F1 | 	sub	fp, #12
1f19c     24 A7 B0 FD | 	call	#__system___float_fromuns
1f1a0     FD 14 02 F6 | 	mov	arg02, result1
1f1a4     14 13 02 F6 | 	mov	arg01, local02
1f1a8     01 16 06 F6 | 	mov	arg03, #1
1f1ac     4C AF B0 FD | 	call	#__system___float_cmp
1f1b0     01 FA 55 F2 | 	cmps	result1, #1 wc
1f1b4     00 26 26 C6 |  if_b	not	local01, #0
1f1b8     A7 26 62 FC | 	wrlong	local01, fp
1f1bc     FC 02 90 FD | 	jmp	#LR__2463
1f1c0                 | LR__2453
1f1c0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
1f1c0     08 4E 05 F1 | 	add	fp, #8
1f1c4     A7 26 02 FB | 	rdlong	local01, fp
1f1c8     08 4E 85 F1 | 	sub	fp, #8
1f1cc     1C 26 0E F2 | 	cmp	local01, #28 wz
1f1d0     14 4E 05 A1 |  if_e	add	fp, #20
1f1d4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f1d8     14 4E 85 A1 |  if_e	sub	fp, #20
1f1dc     16 2B 02 A6 |  if_e	mov	local03, local04
1f1e0     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1f1e4     44 00 90 5D |  if_ne	jmp	#LR__2454
1f1e8     00 26 06 F6 | 	mov	local01, #0
1f1ec     A7 12 02 FB | 	rdlong	arg01, fp
1f1f0     09 13 52 F6 | 	abs	arg01, arg01 wc
1f1f4     1F 2E C6 C9 |  if_b	decod	local05, #31
1f1f8     00 2E 06 36 |  if_ae	mov	local05, #0
1f1fc     C4 A6 B0 FD | 	call	#__system___float_fromuns
1f200     17 FB 61 F5 | 	xor	result1, local05
1f204     FD 12 02 F6 | 	mov	arg01, result1
1f208     0C 4E 05 F1 | 	add	fp, #12
1f20c     A7 14 02 FB | 	rdlong	arg02, fp
1f210     0C 4E 85 F1 | 	sub	fp, #12
1f214     01 16 06 F6 | 	mov	arg03, #1
1f218     E0 AE B0 FD | 	call	#__system___float_cmp
1f21c     01 FA 55 F2 | 	cmps	result1, #1 wc
1f220     00 26 26 C6 |  if_b	not	local01, #0
1f224     A7 26 62 FC | 	wrlong	local01, fp
1f228     90 02 90 FD | 	jmp	#LR__2463
1f22c                 | LR__2454
1f22c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
1f22c     08 4E 05 F1 | 	add	fp, #8
1f230     A7 26 02 FB | 	rdlong	local01, fp
1f234     08 4E 85 F1 | 	sub	fp, #8
1f238     1C 26 0E F2 | 	cmp	local01, #28 wz
1f23c     14 4E 05 A1 |  if_e	add	fp, #20
1f240     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f244     14 4E 85 A1 |  if_e	sub	fp, #20
1f248     16 2B 02 A6 |  if_e	mov	local03, local04
1f24c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f250     24 00 90 5D |  if_ne	jmp	#LR__2455
1f254     00 26 06 F6 | 	mov	local01, #0
1f258     A7 28 02 FB | 	rdlong	local02, fp
1f25c     0C 4E 05 F1 | 	add	fp, #12
1f260     A7 2A 02 FB | 	rdlong	local03, fp
1f264     0C 4E 85 F1 | 	sub	fp, #12
1f268     15 29 5A F2 | 	cmps	local02, local03 wcz
1f26c     01 26 66 E6 |  if_be	neg	local01, #1
1f270     A7 26 62 FC | 	wrlong	local01, fp
1f274     44 02 90 FD | 	jmp	#LR__2463
1f278                 | LR__2455
1f278                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
1f278     08 4E 05 F1 | 	add	fp, #8
1f27c     A7 26 02 FB | 	rdlong	local01, fp
1f280     08 4E 85 F1 | 	sub	fp, #8
1f284     1C 26 0E F2 | 	cmp	local01, #28 wz
1f288     14 4E 05 A1 |  if_e	add	fp, #20
1f28c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f290     14 4E 85 A1 |  if_e	sub	fp, #20
1f294     16 2B 02 A6 |  if_e	mov	local03, local04
1f298     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f29c     24 00 90 5D |  if_ne	jmp	#LR__2456
1f2a0     00 26 06 F6 | 	mov	local01, #0
1f2a4     A7 28 02 FB | 	rdlong	local02, fp
1f2a8     0C 4E 05 F1 | 	add	fp, #12
1f2ac     A7 2A 02 FB | 	rdlong	local03, fp
1f2b0     0C 4E 85 F1 | 	sub	fp, #12
1f2b4     15 29 5A F2 | 	cmps	local02, local03 wcz
1f2b8     01 26 66 E6 |  if_be	neg	local01, #1
1f2bc     A7 26 62 FC | 	wrlong	local01, fp
1f2c0     F8 01 90 FD | 	jmp	#LR__2463
1f2c4                 | LR__2456
1f2c4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
1f2c4     08 4E 05 F1 | 	add	fp, #8
1f2c8     A7 26 02 FB | 	rdlong	local01, fp
1f2cc     08 4E 85 F1 | 	sub	fp, #8
1f2d0     1D 26 0E F2 | 	cmp	local01, #29 wz
1f2d4     14 4E 05 A1 |  if_e	add	fp, #20
1f2d8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f2dc     14 4E 85 A1 |  if_e	sub	fp, #20
1f2e0     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1f2e4     34 00 90 5D |  if_ne	jmp	#LR__2457
1f2e8     00 26 06 F6 | 	mov	local01, #0
1f2ec     A7 12 02 FB | 	rdlong	arg01, fp
1f2f0     D0 A5 B0 FD | 	call	#__system___float_fromuns
1f2f4     FD 12 02 F6 | 	mov	arg01, result1
1f2f8     0C 4E 05 F1 | 	add	fp, #12
1f2fc     A7 14 02 FB | 	rdlong	arg02, fp
1f300     0C 4E 85 F1 | 	sub	fp, #12
1f304     01 16 06 F6 | 	mov	arg03, #1
1f308     F0 AD B0 FD | 	call	#__system___float_cmp
1f30c     01 FA 55 F2 | 	cmps	result1, #1 wc
1f310     00 26 26 C6 |  if_b	not	local01, #0
1f314     A7 26 62 FC | 	wrlong	local01, fp
1f318     A0 01 90 FD | 	jmp	#LR__2463
1f31c                 | LR__2457
1f31c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
1f31c     08 4E 05 F1 | 	add	fp, #8
1f320     A7 26 02 FB | 	rdlong	local01, fp
1f324     08 4E 85 F1 | 	sub	fp, #8
1f328     1D 26 0E F2 | 	cmp	local01, #29 wz
1f32c     14 4E 05 A1 |  if_e	add	fp, #20
1f330     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f334     14 4E 85 A1 |  if_e	sub	fp, #20
1f338     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f33c     24 00 90 5D |  if_ne	jmp	#LR__2458
1f340     00 26 06 F6 | 	mov	local01, #0
1f344     A7 28 02 FB | 	rdlong	local02, fp
1f348     0C 4E 05 F1 | 	add	fp, #12
1f34c     A7 2A 02 FB | 	rdlong	local03, fp
1f350     0C 4E 85 F1 | 	sub	fp, #12
1f354     15 29 5A F2 | 	cmps	local02, local03 wcz
1f358     01 26 66 E6 |  if_be	neg	local01, #1
1f35c     A7 26 62 FC | 	wrlong	local01, fp
1f360     58 01 90 FD | 	jmp	#LR__2463
1f364                 | LR__2458
1f364                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
1f364     08 4E 05 F1 | 	add	fp, #8
1f368     A7 26 02 FB | 	rdlong	local01, fp
1f36c     08 4E 85 F1 | 	sub	fp, #8
1f370     1D 26 0E F2 | 	cmp	local01, #29 wz
1f374     14 4E 05 A1 |  if_e	add	fp, #20
1f378     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f37c     14 4E 85 A1 |  if_e	sub	fp, #20
1f380     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f384     24 00 90 5D |  if_ne	jmp	#LR__2459
1f388     00 26 06 F6 | 	mov	local01, #0
1f38c     A7 28 02 FB | 	rdlong	local02, fp
1f390     0C 4E 05 F1 | 	add	fp, #12
1f394     A7 2A 02 FB | 	rdlong	local03, fp
1f398     0C 4E 85 F1 | 	sub	fp, #12
1f39c     15 29 1A F2 | 	cmp	local02, local03 wcz
1f3a0     01 26 66 E6 |  if_be	neg	local01, #1
1f3a4     A7 26 62 FC | 	wrlong	local01, fp
1f3a8     10 01 90 FD | 	jmp	#LR__2463
1f3ac                 | LR__2459
1f3ac                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<=t2.result.sresult):goto 1190
1f3ac     08 4E 05 F1 | 	add	fp, #8
1f3b0     A7 26 02 FB | 	rdlong	local01, fp
1f3b4     08 4E 85 F1 | 	sub	fp, #8
1f3b8     2B 26 0E F2 | 	cmp	local01, #43 wz
1f3bc     14 4E 05 A1 |  if_e	add	fp, #20
1f3c0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f3c4     14 4E 85 A1 |  if_e	sub	fp, #20
1f3c8     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1f3cc     30 00 90 5D |  if_ne	jmp	#LR__2460
1f3d0     00 26 06 F6 | 	mov	local01, #0
1f3d4     A7 12 02 FB | 	rdlong	arg01, fp
1f3d8     DC E3 BE FD | 	call	#_convertstring
1f3dc     FD 12 02 F6 | 	mov	arg01, result1
1f3e0     0C 4E 05 F1 | 	add	fp, #12
1f3e4     A7 14 02 FB | 	rdlong	arg02, fp
1f3e8     0C 4E 85 F1 | 	sub	fp, #12
1f3ec     88 7A B0 FD | 	call	#__system___string_cmp
1f3f0     01 FA 55 F2 | 	cmps	result1, #1 wc
1f3f4     00 26 26 C6 |  if_b	not	local01, #0
1f3f8     A7 26 62 FC | 	wrlong	local01, fp
1f3fc     BC 00 90 FD | 	jmp	#LR__2463
1f400                 | LR__2460
1f400                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<=convertstring(t2.result.uresult)) :goto 1190
1f400     08 4E 05 F1 | 	add	fp, #8
1f404     A7 26 02 FB | 	rdlong	local01, fp
1f408     08 4E 85 F1 | 	sub	fp, #8
1f40c     1F 26 0E F2 | 	cmp	local01, #31 wz
1f410     14 4E 05 A1 |  if_e	add	fp, #20
1f414     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f418     14 4E 85 A1 |  if_e	sub	fp, #20
1f41c     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1f420     34 00 90 5D |  if_ne	jmp	#LR__2461
1f424     00 26 06 F6 | 	mov	local01, #0
1f428     A7 28 02 FB | 	rdlong	local02, fp
1f42c     0C 4E 05 F1 | 	add	fp, #12
1f430     A7 12 02 FB | 	rdlong	arg01, fp
1f434     0C 4E 85 F1 | 	sub	fp, #12
1f438     7C E3 BE FD | 	call	#_convertstring
1f43c     FD 14 02 F6 | 	mov	arg02, result1
1f440     14 13 02 F6 | 	mov	arg01, local02
1f444     30 7A B0 FD | 	call	#__system___string_cmp
1f448     01 FA 55 F2 | 	cmps	result1, #1 wc
1f44c     00 26 26 C6 |  if_b	not	local01, #0
1f450     A7 26 62 FC | 	wrlong	local01, fp
1f454     64 00 90 FD | 	jmp	#LR__2463
1f458                 | LR__2461
1f458                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<=convertstring(t2.result.uresult)) :goto 1190
1f458     08 4E 05 F1 | 	add	fp, #8
1f45c     A7 26 02 FB | 	rdlong	local01, fp
1f460     08 4E 85 F1 | 	sub	fp, #8
1f464     2B 26 0E F2 | 	cmp	local01, #43 wz
1f468     14 4E 05 A1 |  if_e	add	fp, #20
1f46c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f470     14 4E 85 A1 |  if_e	sub	fp, #20
1f474     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1f478     3C 00 90 5D |  if_ne	jmp	#LR__2462
1f47c     00 26 06 F6 | 	mov	local01, #0
1f480     A7 12 02 FB | 	rdlong	arg01, fp
1f484     30 E3 BE FD | 	call	#_convertstring
1f488     FD 28 02 F6 | 	mov	local02, result1
1f48c     0C 4E 05 F1 | 	add	fp, #12
1f490     A7 12 02 FB | 	rdlong	arg01, fp
1f494     0C 4E 85 F1 | 	sub	fp, #12
1f498     1C E3 BE FD | 	call	#_convertstring
1f49c     FD 14 02 F6 | 	mov	arg02, result1
1f4a0     14 13 02 F6 | 	mov	arg01, local02
1f4a4     D0 79 B0 FD | 	call	#__system___string_cmp
1f4a8     01 FA 55 F2 | 	cmps	result1, #1 wc
1f4ac     00 26 26 C6 |  if_b	not	local01, #0
1f4b0     A7 26 62 FC | 	wrlong	local01, fp
1f4b4     04 00 90 FD | 	jmp	#LR__2463
1f4b8                 | LR__2462
1f4b8     A7 00 68 FC | 	wrlong	#0, fp
1f4bc                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1f4bc                 | LR__2463
1f4bc     08 4E 05 F1 | 	add	fp, #8
1f4c0     A7 38 68 FC | 	wrlong	#28, fp
1f4c4     08 4E 85 F1 | 	sub	fp, #8
1f4c8     A7 12 02 F6 | 	mov	arg01, fp
1f4cc     08 E2 BE FD | 	call	#_push
1f4d0     A7 F0 03 F6 | 	mov	ptra, fp
1f4d4     B2 00 A0 FD | 	call	#popregs_
1f4d8                 | _do_le_ret
1f4d8     2D 00 64 FD | 	ret
1f4dc                 | 
1f4dc                 | ' 
1f4dc                 | ' '--------------------------------- less than (<)
1f4dc                 | ' 
1f4dc                 | ' sub do_lt
1f4dc                 | _do_lt
1f4dc     05 4A 05 F6 | 	mov	COUNT_, #5
1f4e0     A8 00 A0 FD | 	call	#pushregs_
1f4e4     18 F0 07 F1 | 	add	ptra, #24
1f4e8     54 E1 BE FD | 	call	#_pop
1f4ec     FD 26 02 F6 | 	mov	local01, result1
1f4f0     FE 28 02 F6 | 	mov	local02, result2
1f4f4     FF 2A 02 F6 | 	mov	local03, result3
1f4f8     0C 4E 05 F1 | 	add	fp, #12
1f4fc     A7 26 62 FC | 	wrlong	local01, fp
1f500     04 4E 05 F1 | 	add	fp, #4
1f504     A7 28 62 FC | 	wrlong	local02, fp
1f508     04 4E 05 F1 | 	add	fp, #4
1f50c     A7 2A 62 FC | 	wrlong	local03, fp
1f510     14 4E 85 F1 | 	sub	fp, #20
1f514     28 E1 BE FD | 	call	#_pop
1f518     FF 2A 02 F6 | 	mov	local03, result3
1f51c     A7 FA 61 FC | 	wrlong	result1, fp
1f520     04 4E 05 F1 | 	add	fp, #4
1f524     A7 FC 61 FC | 	wrlong	result2, fp
1f528     04 4E 05 F1 | 	add	fp, #4
1f52c     A7 2A 62 FC | 	wrlong	local03, fp
1f530                 | ' 
1f530                 | ' t2=pop()
1f530                 | ' t1=pop()
1f530                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
1f530     08 4E 85 F1 | 	sub	fp, #8
1f534     1F 2A 0E F2 | 	cmp	local03, #31 wz
1f538     14 4E 05 A1 |  if_e	add	fp, #20
1f53c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f540     14 4E 85 A1 |  if_e	sub	fp, #20
1f544     16 2B 02 A6 |  if_e	mov	local03, local04
1f548     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1f54c     28 00 90 5D |  if_ne	jmp	#LR__2470
1f550     00 26 06 F6 | 	mov	local01, #0
1f554     A7 12 02 FB | 	rdlong	arg01, fp
1f558     0C 4E 05 F1 | 	add	fp, #12
1f55c     A7 14 02 FB | 	rdlong	arg02, fp
1f560     0C 4E 85 F1 | 	sub	fp, #12
1f564     10 79 B0 FD | 	call	#__system___string_cmp
1f568     00 FA 55 F2 | 	cmps	result1, #0 wc
1f56c     00 26 26 C6 |  if_b	not	local01, #0
1f570     A7 26 62 FC | 	wrlong	local01, fp
1f574     10 04 90 FD | 	jmp	#LR__2483
1f578                 | LR__2470
1f578                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
1f578     08 4E 05 F1 | 	add	fp, #8
1f57c     A7 26 02 FB | 	rdlong	local01, fp
1f580     08 4E 85 F1 | 	sub	fp, #8
1f584     1E 26 0E F2 | 	cmp	local01, #30 wz
1f588     14 4E 05 A1 |  if_e	add	fp, #20
1f58c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f590     14 4E 85 A1 |  if_e	sub	fp, #20
1f594     16 2B 02 A6 |  if_e	mov	local03, local04
1f598     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1f59c     2C 00 90 5D |  if_ne	jmp	#LR__2471
1f5a0     00 26 06 F6 | 	mov	local01, #0
1f5a4     A7 12 02 FB | 	rdlong	arg01, fp
1f5a8     0C 4E 05 F1 | 	add	fp, #12
1f5ac     A7 14 02 FB | 	rdlong	arg02, fp
1f5b0     0C 4E 85 F1 | 	sub	fp, #12
1f5b4     01 16 06 F6 | 	mov	arg03, #1
1f5b8     40 AB B0 FD | 	call	#__system___float_cmp
1f5bc     00 FA 55 F2 | 	cmps	result1, #0 wc
1f5c0     00 26 26 C6 |  if_b	not	local01, #0
1f5c4     A7 26 62 FC | 	wrlong	local01, fp
1f5c8     BC 03 90 FD | 	jmp	#LR__2483
1f5cc                 | LR__2471
1f5cc                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
1f5cc     08 4E 05 F1 | 	add	fp, #8
1f5d0     A7 26 02 FB | 	rdlong	local01, fp
1f5d4     08 4E 85 F1 | 	sub	fp, #8
1f5d8     1E 26 0E F2 | 	cmp	local01, #30 wz
1f5dc     14 4E 05 A1 |  if_e	add	fp, #20
1f5e0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f5e4     14 4E 85 A1 |  if_e	sub	fp, #20
1f5e8     16 2B 02 A6 |  if_e	mov	local03, local04
1f5ec     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f5f0     48 00 90 5D |  if_ne	jmp	#LR__2472
1f5f4     00 26 06 F6 | 	mov	local01, #0
1f5f8     A7 28 02 FB | 	rdlong	local02, fp
1f5fc     0C 4E 05 F1 | 	add	fp, #12
1f600     A7 12 02 FB | 	rdlong	arg01, fp
1f604     0C 4E 85 F1 | 	sub	fp, #12
1f608     09 13 52 F6 | 	abs	arg01, arg01 wc
1f60c     1F 2E C6 C9 |  if_b	decod	local05, #31
1f610     00 2E 06 36 |  if_ae	mov	local05, #0
1f614     AC A2 B0 FD | 	call	#__system___float_fromuns
1f618     17 FB 61 F5 | 	xor	result1, local05
1f61c     FD 14 02 F6 | 	mov	arg02, result1
1f620     14 13 02 F6 | 	mov	arg01, local02
1f624     01 16 06 F6 | 	mov	arg03, #1
1f628     D0 AA B0 FD | 	call	#__system___float_cmp
1f62c     00 FA 55 F2 | 	cmps	result1, #0 wc
1f630     00 26 26 C6 |  if_b	not	local01, #0
1f634     A7 26 62 FC | 	wrlong	local01, fp
1f638     4C 03 90 FD | 	jmp	#LR__2483
1f63c                 | LR__2472
1f63c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
1f63c     08 4E 05 F1 | 	add	fp, #8
1f640     A7 26 02 FB | 	rdlong	local01, fp
1f644     08 4E 85 F1 | 	sub	fp, #8
1f648     1E 26 0E F2 | 	cmp	local01, #30 wz
1f64c     14 4E 05 A1 |  if_e	add	fp, #20
1f650     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f654     14 4E 85 A1 |  if_e	sub	fp, #20
1f658     16 2B 02 A6 |  if_e	mov	local03, local04
1f65c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f660     38 00 90 5D |  if_ne	jmp	#LR__2473
1f664     00 26 06 F6 | 	mov	local01, #0
1f668     A7 28 02 FB | 	rdlong	local02, fp
1f66c     0C 4E 05 F1 | 	add	fp, #12
1f670     A7 12 02 FB | 	rdlong	arg01, fp
1f674     0C 4E 85 F1 | 	sub	fp, #12
1f678     48 A2 B0 FD | 	call	#__system___float_fromuns
1f67c     FD 14 02 F6 | 	mov	arg02, result1
1f680     14 13 02 F6 | 	mov	arg01, local02
1f684     01 16 06 F6 | 	mov	arg03, #1
1f688     70 AA B0 FD | 	call	#__system___float_cmp
1f68c     00 FA 55 F2 | 	cmps	result1, #0 wc
1f690     00 26 26 C6 |  if_b	not	local01, #0
1f694     A7 26 62 FC | 	wrlong	local01, fp
1f698     EC 02 90 FD | 	jmp	#LR__2483
1f69c                 | LR__2473
1f69c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
1f69c     08 4E 05 F1 | 	add	fp, #8
1f6a0     A7 26 02 FB | 	rdlong	local01, fp
1f6a4     08 4E 85 F1 | 	sub	fp, #8
1f6a8     1C 26 0E F2 | 	cmp	local01, #28 wz
1f6ac     14 4E 05 A1 |  if_e	add	fp, #20
1f6b0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f6b4     14 4E 85 A1 |  if_e	sub	fp, #20
1f6b8     16 2B 02 A6 |  if_e	mov	local03, local04
1f6bc     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1f6c0     44 00 90 5D |  if_ne	jmp	#LR__2474
1f6c4     00 26 06 F6 | 	mov	local01, #0
1f6c8     A7 12 02 FB | 	rdlong	arg01, fp
1f6cc     09 13 52 F6 | 	abs	arg01, arg01 wc
1f6d0     1F 2E C6 C9 |  if_b	decod	local05, #31
1f6d4     00 2E 06 36 |  if_ae	mov	local05, #0
1f6d8     E8 A1 B0 FD | 	call	#__system___float_fromuns
1f6dc     17 FB 61 F5 | 	xor	result1, local05
1f6e0     FD 12 02 F6 | 	mov	arg01, result1
1f6e4     0C 4E 05 F1 | 	add	fp, #12
1f6e8     A7 14 02 FB | 	rdlong	arg02, fp
1f6ec     0C 4E 85 F1 | 	sub	fp, #12
1f6f0     01 16 06 F6 | 	mov	arg03, #1
1f6f4     04 AA B0 FD | 	call	#__system___float_cmp
1f6f8     00 FA 55 F2 | 	cmps	result1, #0 wc
1f6fc     00 26 26 C6 |  if_b	not	local01, #0
1f700     A7 26 62 FC | 	wrlong	local01, fp
1f704     80 02 90 FD | 	jmp	#LR__2483
1f708                 | LR__2474
1f708                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
1f708     08 4E 05 F1 | 	add	fp, #8
1f70c     A7 26 02 FB | 	rdlong	local01, fp
1f710     08 4E 85 F1 | 	sub	fp, #8
1f714     1C 26 0E F2 | 	cmp	local01, #28 wz
1f718     14 4E 05 A1 |  if_e	add	fp, #20
1f71c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f720     14 4E 85 A1 |  if_e	sub	fp, #20
1f724     16 2B 02 A6 |  if_e	mov	local03, local04
1f728     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f72c     20 00 90 5D |  if_ne	jmp	#LR__2475
1f730     A7 28 02 FB | 	rdlong	local02, fp
1f734     0C 4E 05 F1 | 	add	fp, #12
1f738     A7 2A 02 FB | 	rdlong	local03, fp
1f73c     0C 4E 85 F1 | 	sub	fp, #12
1f740     15 29 52 F2 | 	cmps	local02, local03 wc
1f744     13 27 A2 F1 | 	subx	local01, local01
1f748     A7 26 62 FC | 	wrlong	local01, fp
1f74c     38 02 90 FD | 	jmp	#LR__2483
1f750                 | LR__2475
1f750                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
1f750     08 4E 05 F1 | 	add	fp, #8
1f754     A7 26 02 FB | 	rdlong	local01, fp
1f758     08 4E 85 F1 | 	sub	fp, #8
1f75c     1C 26 0E F2 | 	cmp	local01, #28 wz
1f760     14 4E 05 A1 |  if_e	add	fp, #20
1f764     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f768     14 4E 85 A1 |  if_e	sub	fp, #20
1f76c     16 2B 02 A6 |  if_e	mov	local03, local04
1f770     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f774     20 00 90 5D |  if_ne	jmp	#LR__2476
1f778     A7 28 02 FB | 	rdlong	local02, fp
1f77c     0C 4E 05 F1 | 	add	fp, #12
1f780     A7 2A 02 FB | 	rdlong	local03, fp
1f784     0C 4E 85 F1 | 	sub	fp, #12
1f788     15 29 52 F2 | 	cmps	local02, local03 wc
1f78c     13 27 A2 F1 | 	subx	local01, local01
1f790     A7 26 62 FC | 	wrlong	local01, fp
1f794     F0 01 90 FD | 	jmp	#LR__2483
1f798                 | LR__2476
1f798                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
1f798     08 4E 05 F1 | 	add	fp, #8
1f79c     A7 26 02 FB | 	rdlong	local01, fp
1f7a0     08 4E 85 F1 | 	sub	fp, #8
1f7a4     1D 26 0E F2 | 	cmp	local01, #29 wz
1f7a8     14 4E 05 A1 |  if_e	add	fp, #20
1f7ac     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f7b0     14 4E 85 A1 |  if_e	sub	fp, #20
1f7b4     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1f7b8     34 00 90 5D |  if_ne	jmp	#LR__2477
1f7bc     00 26 06 F6 | 	mov	local01, #0
1f7c0     A7 12 02 FB | 	rdlong	arg01, fp
1f7c4     FC A0 B0 FD | 	call	#__system___float_fromuns
1f7c8     FD 12 02 F6 | 	mov	arg01, result1
1f7cc     0C 4E 05 F1 | 	add	fp, #12
1f7d0     A7 14 02 FB | 	rdlong	arg02, fp
1f7d4     0C 4E 85 F1 | 	sub	fp, #12
1f7d8     01 16 06 F6 | 	mov	arg03, #1
1f7dc     1C A9 B0 FD | 	call	#__system___float_cmp
1f7e0     00 FA 55 F2 | 	cmps	result1, #0 wc
1f7e4     00 26 26 C6 |  if_b	not	local01, #0
1f7e8     A7 26 62 FC | 	wrlong	local01, fp
1f7ec     98 01 90 FD | 	jmp	#LR__2483
1f7f0                 | LR__2477
1f7f0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
1f7f0     08 4E 05 F1 | 	add	fp, #8
1f7f4     A7 26 02 FB | 	rdlong	local01, fp
1f7f8     08 4E 85 F1 | 	sub	fp, #8
1f7fc     1D 26 0E F2 | 	cmp	local01, #29 wz
1f800     14 4E 05 A1 |  if_e	add	fp, #20
1f804     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f808     14 4E 85 A1 |  if_e	sub	fp, #20
1f80c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f810     20 00 90 5D |  if_ne	jmp	#LR__2478
1f814     A7 28 02 FB | 	rdlong	local02, fp
1f818     0C 4E 05 F1 | 	add	fp, #12
1f81c     A7 2A 02 FB | 	rdlong	local03, fp
1f820     0C 4E 85 F1 | 	sub	fp, #12
1f824     15 29 52 F2 | 	cmps	local02, local03 wc
1f828     13 27 A2 F1 | 	subx	local01, local01
1f82c     A7 26 62 FC | 	wrlong	local01, fp
1f830     54 01 90 FD | 	jmp	#LR__2483
1f834                 | LR__2478
1f834                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
1f834     08 4E 05 F1 | 	add	fp, #8
1f838     A7 26 02 FB | 	rdlong	local01, fp
1f83c     08 4E 85 F1 | 	sub	fp, #8
1f840     1D 26 0E F2 | 	cmp	local01, #29 wz
1f844     14 4E 05 A1 |  if_e	add	fp, #20
1f848     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f84c     14 4E 85 A1 |  if_e	sub	fp, #20
1f850     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f854     20 00 90 5D |  if_ne	jmp	#LR__2479
1f858     A7 28 02 FB | 	rdlong	local02, fp
1f85c     0C 4E 05 F1 | 	add	fp, #12
1f860     A7 2A 02 FB | 	rdlong	local03, fp
1f864     0C 4E 85 F1 | 	sub	fp, #12
1f868     15 29 12 F2 | 	cmp	local02, local03 wc
1f86c     13 27 A2 F1 | 	subx	local01, local01
1f870     A7 26 62 FC | 	wrlong	local01, fp
1f874     10 01 90 FD | 	jmp	#LR__2483
1f878                 | LR__2479
1f878                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<t2.result.sresult):goto 1170
1f878     08 4E 05 F1 | 	add	fp, #8
1f87c     A7 26 02 FB | 	rdlong	local01, fp
1f880     08 4E 85 F1 | 	sub	fp, #8
1f884     2B 26 0E F2 | 	cmp	local01, #43 wz
1f888     14 4E 05 A1 |  if_e	add	fp, #20
1f88c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f890     14 4E 85 A1 |  if_e	sub	fp, #20
1f894     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1f898     30 00 90 5D |  if_ne	jmp	#LR__2480
1f89c     00 26 06 F6 | 	mov	local01, #0
1f8a0     A7 12 02 FB | 	rdlong	arg01, fp
1f8a4     10 DF BE FD | 	call	#_convertstring
1f8a8     FD 12 02 F6 | 	mov	arg01, result1
1f8ac     0C 4E 05 F1 | 	add	fp, #12
1f8b0     A7 14 02 FB | 	rdlong	arg02, fp
1f8b4     0C 4E 85 F1 | 	sub	fp, #12
1f8b8     BC 75 B0 FD | 	call	#__system___string_cmp
1f8bc     00 FA 55 F2 | 	cmps	result1, #0 wc
1f8c0     00 26 26 C6 |  if_b	not	local01, #0
1f8c4     A7 26 62 FC | 	wrlong	local01, fp
1f8c8     BC 00 90 FD | 	jmp	#LR__2483
1f8cc                 | LR__2480
1f8cc                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<convertstring(t2.result.uresult)) :goto 1170
1f8cc     08 4E 05 F1 | 	add	fp, #8
1f8d0     A7 26 02 FB | 	rdlong	local01, fp
1f8d4     08 4E 85 F1 | 	sub	fp, #8
1f8d8     1F 26 0E F2 | 	cmp	local01, #31 wz
1f8dc     14 4E 05 A1 |  if_e	add	fp, #20
1f8e0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f8e4     14 4E 85 A1 |  if_e	sub	fp, #20
1f8e8     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1f8ec     34 00 90 5D |  if_ne	jmp	#LR__2481
1f8f0     00 26 06 F6 | 	mov	local01, #0
1f8f4     A7 28 02 FB | 	rdlong	local02, fp
1f8f8     0C 4E 05 F1 | 	add	fp, #12
1f8fc     A7 12 02 FB | 	rdlong	arg01, fp
1f900     0C 4E 85 F1 | 	sub	fp, #12
1f904     B0 DE BE FD | 	call	#_convertstring
1f908     FD 14 02 F6 | 	mov	arg02, result1
1f90c     14 13 02 F6 | 	mov	arg01, local02
1f910     64 75 B0 FD | 	call	#__system___string_cmp
1f914     00 FA 55 F2 | 	cmps	result1, #0 wc
1f918     00 26 26 C6 |  if_b	not	local01, #0
1f91c     A7 26 62 FC | 	wrlong	local01, fp
1f920     64 00 90 FD | 	jmp	#LR__2483
1f924                 | LR__2481
1f924                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<convertstring(t2.result.uresult)) :goto 1170
1f924     08 4E 05 F1 | 	add	fp, #8
1f928     A7 26 02 FB | 	rdlong	local01, fp
1f92c     08 4E 85 F1 | 	sub	fp, #8
1f930     2B 26 0E F2 | 	cmp	local01, #43 wz
1f934     14 4E 05 A1 |  if_e	add	fp, #20
1f938     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f93c     14 4E 85 A1 |  if_e	sub	fp, #20
1f940     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1f944     3C 00 90 5D |  if_ne	jmp	#LR__2482
1f948     00 26 06 F6 | 	mov	local01, #0
1f94c     A7 12 02 FB | 	rdlong	arg01, fp
1f950     64 DE BE FD | 	call	#_convertstring
1f954     FD 28 02 F6 | 	mov	local02, result1
1f958     0C 4E 05 F1 | 	add	fp, #12
1f95c     A7 12 02 FB | 	rdlong	arg01, fp
1f960     0C 4E 85 F1 | 	sub	fp, #12
1f964     50 DE BE FD | 	call	#_convertstring
1f968     FD 14 02 F6 | 	mov	arg02, result1
1f96c     14 13 02 F6 | 	mov	arg01, local02
1f970     04 75 B0 FD | 	call	#__system___string_cmp
1f974     00 FA 55 F2 | 	cmps	result1, #0 wc
1f978     00 26 26 C6 |  if_b	not	local01, #0
1f97c     A7 26 62 FC | 	wrlong	local01, fp
1f980     04 00 90 FD | 	jmp	#LR__2483
1f984                 | LR__2482
1f984     A7 00 68 FC | 	wrlong	#0, fp
1f988                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1f988                 | LR__2483
1f988     08 4E 05 F1 | 	add	fp, #8
1f98c     A7 38 68 FC | 	wrlong	#28, fp
1f990     08 4E 85 F1 | 	sub	fp, #8
1f994     A7 12 02 F6 | 	mov	arg01, fp
1f998     3C DD BE FD | 	call	#_push
1f99c     A7 F0 03 F6 | 	mov	ptra, fp
1f9a0     B2 00 A0 FD | 	call	#popregs_
1f9a4                 | _do_lt_ret
1f9a4     2D 00 64 FD | 	ret
1f9a8                 | 
1f9a8                 | ' 
1f9a8                 | ' '--------------------------------- minus (-)
1f9a8                 | ' 
1f9a8                 | ' sub do_minus
1f9a8                 | _do_minus
1f9a8     05 4A 05 F6 | 	mov	COUNT_, #5
1f9ac     A8 00 A0 FD | 	call	#pushregs_
1f9b0     18 F0 07 F1 | 	add	ptra, #24
1f9b4     88 DC BE FD | 	call	#_pop
1f9b8     FD 26 02 F6 | 	mov	local01, result1
1f9bc     FE 28 02 F6 | 	mov	local02, result2
1f9c0     FF 2A 02 F6 | 	mov	local03, result3
1f9c4     0C 4E 05 F1 | 	add	fp, #12
1f9c8     A7 26 62 FC | 	wrlong	local01, fp
1f9cc     04 4E 05 F1 | 	add	fp, #4
1f9d0     A7 28 62 FC | 	wrlong	local02, fp
1f9d4     04 4E 05 F1 | 	add	fp, #4
1f9d8     A7 2A 62 FC | 	wrlong	local03, fp
1f9dc     14 4E 85 F1 | 	sub	fp, #20
1f9e0     5C DC BE FD | 	call	#_pop
1f9e4     FF 2A 02 F6 | 	mov	local03, result3
1f9e8     A7 FA 61 FC | 	wrlong	result1, fp
1f9ec     04 4E 05 F1 | 	add	fp, #4
1f9f0     A7 FC 61 FC | 	wrlong	result2, fp
1f9f4     04 4E 05 F1 | 	add	fp, #4
1f9f8     A7 2A 62 FC | 	wrlong	local03, fp
1f9fc                 | ' 
1f9fc                 | ' t2=pop()
1f9fc                 | ' t1=pop()
1f9fc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
1f9fc     08 4E 85 F1 | 	sub	fp, #8
1fa00     1D 2A 0E F2 | 	cmp	local03, #29 wz
1fa04     14 4E 05 A1 |  if_e	add	fp, #20
1fa08     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fa0c     14 4E 85 A1 |  if_e	sub	fp, #20
1fa10     16 2B 02 A6 |  if_e	mov	local03, local04
1fa14     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1fa18     5C 00 90 5D |  if_ne	jmp	#LR__2491
1fa1c                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
1fa1c     0C 4E 05 F1 | 	add	fp, #12
1fa20     A7 26 02 FB | 	rdlong	local01, fp
1fa24     0C 4E 85 F1 | 	sub	fp, #12
1fa28     A7 2A 02 FB | 	rdlong	local03, fp
1fa2c     15 27 12 F2 | 	cmp	local01, local03 wc
1fa30     1C 00 90 3D |  if_ae	jmp	#LR__2490
1fa34     A7 26 02 FB | 	rdlong	local01, fp
1fa38     0C 4E 05 F1 | 	add	fp, #12
1fa3c     A7 28 02 FB | 	rdlong	local02, fp
1fa40     0C 4E 85 F1 | 	sub	fp, #12
1fa44     14 27 82 F1 | 	sub	local01, local02
1fa48     A7 26 62 FC | 	wrlong	local01, fp
1fa4c     F4 02 90 FD | 	jmp	#LR__2500
1fa50                 | LR__2490
1fa50     A7 26 02 FB | 	rdlong	local01, fp
1fa54     0C 4E 05 F1 | 	add	fp, #12
1fa58     A7 28 02 FB | 	rdlong	local02, fp
1fa5c     0C 4E 85 F1 | 	sub	fp, #12
1fa60     14 27 82 F1 | 	sub	local01, local02
1fa64     A7 26 62 FC | 	wrlong	local01, fp
1fa68     08 4E 05 F1 | 	add	fp, #8
1fa6c     A7 38 68 FC | 	wrlong	#28, fp
1fa70     08 4E 85 F1 | 	sub	fp, #8
1fa74     CC 02 90 FD | 	jmp	#LR__2500
1fa78                 | LR__2491
1fa78                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
1fa78     08 4E 05 F1 | 	add	fp, #8
1fa7c     A7 26 02 FB | 	rdlong	local01, fp
1fa80     08 4E 85 F1 | 	sub	fp, #8
1fa84     1D 26 0E F2 | 	cmp	local01, #29 wz
1fa88     14 4E 05 A1 |  if_e	add	fp, #20
1fa8c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fa90     14 4E 85 A1 |  if_e	sub	fp, #20
1fa94     16 2B 02 A6 |  if_e	mov	local03, local04
1fa98     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1fa9c     28 00 90 5D |  if_ne	jmp	#LR__2492
1faa0     A7 26 02 FB | 	rdlong	local01, fp
1faa4     0C 4E 05 F1 | 	add	fp, #12
1faa8     A7 28 02 FB | 	rdlong	local02, fp
1faac     0C 4E 85 F1 | 	sub	fp, #12
1fab0     14 27 82 F1 | 	sub	local01, local02
1fab4     A7 26 62 FC | 	wrlong	local01, fp
1fab8     08 4E 05 F1 | 	add	fp, #8
1fabc     A7 38 68 FC | 	wrlong	#28, fp
1fac0     08 4E 85 F1 | 	sub	fp, #8
1fac4     7C 02 90 FD | 	jmp	#LR__2500
1fac8                 | LR__2492
1fac8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
1fac8     08 4E 05 F1 | 	add	fp, #8
1facc     A7 26 02 FB | 	rdlong	local01, fp
1fad0     08 4E 85 F1 | 	sub	fp, #8
1fad4     1D 26 0E F2 | 	cmp	local01, #29 wz
1fad8     14 4E 05 A1 |  if_e	add	fp, #20
1fadc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fae0     14 4E 85 A1 |  if_e	sub	fp, #20
1fae4     16 2B 02 A6 |  if_e	mov	local03, local04
1fae8     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1faec     34 00 90 5D |  if_ne	jmp	#LR__2493
1faf0     A7 12 02 FB | 	rdlong	arg01, fp
1faf4     CC 9D B0 FD | 	call	#__system___float_fromuns
1faf8     FD 12 02 F6 | 	mov	arg01, result1
1fafc     0C 4E 05 F1 | 	add	fp, #12
1fb00     A7 14 02 FB | 	rdlong	arg02, fp
1fb04     0C 4E 85 F1 | 	sub	fp, #12
1fb08     1F 14 E6 F4 | 	bitnot	arg02, #31
1fb0c     E8 9D B0 FD | 	call	#__system___float_add
1fb10     A7 FA 61 FC | 	wrlong	result1, fp
1fb14     08 4E 05 F1 | 	add	fp, #8
1fb18     A7 3C 68 FC | 	wrlong	#30, fp
1fb1c     08 4E 85 F1 | 	sub	fp, #8
1fb20     20 02 90 FD | 	jmp	#LR__2500
1fb24                 | LR__2493
1fb24                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
1fb24     08 4E 05 F1 | 	add	fp, #8
1fb28     A7 26 02 FB | 	rdlong	local01, fp
1fb2c     08 4E 85 F1 | 	sub	fp, #8
1fb30     1C 26 0E F2 | 	cmp	local01, #28 wz
1fb34     14 4E 05 A1 |  if_e	add	fp, #20
1fb38     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fb3c     14 4E 85 A1 |  if_e	sub	fp, #20
1fb40     16 2B 02 A6 |  if_e	mov	local03, local04
1fb44     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1fb48     1C 00 90 5D |  if_ne	jmp	#LR__2494
1fb4c     A7 26 02 FB | 	rdlong	local01, fp
1fb50     0C 4E 05 F1 | 	add	fp, #12
1fb54     A7 28 02 FB | 	rdlong	local02, fp
1fb58     0C 4E 85 F1 | 	sub	fp, #12
1fb5c     14 27 82 F1 | 	sub	local01, local02
1fb60     A7 26 62 FC | 	wrlong	local01, fp
1fb64     DC 01 90 FD | 	jmp	#LR__2500
1fb68                 | LR__2494
1fb68                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
1fb68     08 4E 05 F1 | 	add	fp, #8
1fb6c     A7 26 02 FB | 	rdlong	local01, fp
1fb70     08 4E 85 F1 | 	sub	fp, #8
1fb74     1C 26 0E F2 | 	cmp	local01, #28 wz
1fb78     14 4E 05 A1 |  if_e	add	fp, #20
1fb7c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fb80     14 4E 85 A1 |  if_e	sub	fp, #20
1fb84     1C 2C 0E A2 |  if_e	cmp	local04, #28 wz
1fb88     1C 00 90 5D |  if_ne	jmp	#LR__2495
1fb8c     A7 26 02 FB | 	rdlong	local01, fp
1fb90     0C 4E 05 F1 | 	add	fp, #12
1fb94     A7 28 02 FB | 	rdlong	local02, fp
1fb98     0C 4E 85 F1 | 	sub	fp, #12
1fb9c     14 27 82 F1 | 	sub	local01, local02
1fba0     A7 26 62 FC | 	wrlong	local01, fp
1fba4     9C 01 90 FD | 	jmp	#LR__2500
1fba8                 | LR__2495
1fba8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
1fba8     08 4E 05 F1 | 	add	fp, #8
1fbac     A7 26 02 FB | 	rdlong	local01, fp
1fbb0     08 4E 85 F1 | 	sub	fp, #8
1fbb4     1C 26 0E F2 | 	cmp	local01, #28 wz
1fbb8     14 4E 05 A1 |  if_e	add	fp, #20
1fbbc     A7 2A 02 AB |  if_e	rdlong	local03, fp
1fbc0     14 4E 85 A1 |  if_e	sub	fp, #20
1fbc4     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1fbc8     44 00 90 5D |  if_ne	jmp	#LR__2496
1fbcc     A7 12 02 FB | 	rdlong	arg01, fp
1fbd0     09 13 52 F6 | 	abs	arg01, arg01 wc
1fbd4     1F 2E C6 C9 |  if_b	decod	local05, #31
1fbd8     00 2E 06 36 |  if_ae	mov	local05, #0
1fbdc     E4 9C B0 FD | 	call	#__system___float_fromuns
1fbe0     17 FB 61 F5 | 	xor	result1, local05
1fbe4     FD 12 02 F6 | 	mov	arg01, result1
1fbe8     0C 4E 05 F1 | 	add	fp, #12
1fbec     A7 14 02 FB | 	rdlong	arg02, fp
1fbf0     0C 4E 85 F1 | 	sub	fp, #12
1fbf4     1F 14 E6 F4 | 	bitnot	arg02, #31
1fbf8     FC 9C B0 FD | 	call	#__system___float_add
1fbfc     A7 FA 61 FC | 	wrlong	result1, fp
1fc00     08 4E 05 F1 | 	add	fp, #8
1fc04     A7 3C 68 FC | 	wrlong	#30, fp
1fc08     08 4E 85 F1 | 	sub	fp, #8
1fc0c     34 01 90 FD | 	jmp	#LR__2500
1fc10                 | LR__2496
1fc10                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
1fc10     08 4E 05 F1 | 	add	fp, #8
1fc14     A7 26 02 FB | 	rdlong	local01, fp
1fc18     08 4E 85 F1 | 	sub	fp, #8
1fc1c     1E 26 0E F2 | 	cmp	local01, #30 wz
1fc20     14 4E 05 A1 |  if_e	add	fp, #20
1fc24     A7 2A 02 AB |  if_e	rdlong	local03, fp
1fc28     14 4E 85 A1 |  if_e	sub	fp, #20
1fc2c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1fc30     2C 00 90 5D |  if_ne	jmp	#LR__2497
1fc34     A7 26 02 FB | 	rdlong	local01, fp
1fc38     0C 4E 05 F1 | 	add	fp, #12
1fc3c     A7 12 02 FB | 	rdlong	arg01, fp
1fc40     0C 4E 85 F1 | 	sub	fp, #12
1fc44     7C 9C B0 FD | 	call	#__system___float_fromuns
1fc48     FD 14 02 F6 | 	mov	arg02, result1
1fc4c     13 13 02 F6 | 	mov	arg01, local01
1fc50     1F 14 E6 F4 | 	bitnot	arg02, #31
1fc54     A0 9C B0 FD | 	call	#__system___float_add
1fc58     A7 FA 61 FC | 	wrlong	result1, fp
1fc5c     E4 00 90 FD | 	jmp	#LR__2500
1fc60                 | LR__2497
1fc60                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
1fc60     08 4E 05 F1 | 	add	fp, #8
1fc64     A7 26 02 FB | 	rdlong	local01, fp
1fc68     08 4E 85 F1 | 	sub	fp, #8
1fc6c     1E 26 0E F2 | 	cmp	local01, #30 wz
1fc70     14 4E 05 A1 |  if_e	add	fp, #20
1fc74     A7 2A 02 AB |  if_e	rdlong	local03, fp
1fc78     14 4E 85 A1 |  if_e	sub	fp, #20
1fc7c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1fc80     3C 00 90 5D |  if_ne	jmp	#LR__2498
1fc84     A7 26 02 FB | 	rdlong	local01, fp
1fc88     0C 4E 05 F1 | 	add	fp, #12
1fc8c     A7 12 02 FB | 	rdlong	arg01, fp
1fc90     0C 4E 85 F1 | 	sub	fp, #12
1fc94     09 13 52 F6 | 	abs	arg01, arg01 wc
1fc98     1F 2E C6 C9 |  if_b	decod	local05, #31
1fc9c     00 2E 06 36 |  if_ae	mov	local05, #0
1fca0     20 9C B0 FD | 	call	#__system___float_fromuns
1fca4     17 FB 61 F5 | 	xor	result1, local05
1fca8     FD 14 02 F6 | 	mov	arg02, result1
1fcac     13 13 02 F6 | 	mov	arg01, local01
1fcb0     1F 14 E6 F4 | 	bitnot	arg02, #31
1fcb4     40 9C B0 FD | 	call	#__system___float_add
1fcb8     A7 FA 61 FC | 	wrlong	result1, fp
1fcbc     84 00 90 FD | 	jmp	#LR__2500
1fcc0                 | LR__2498
1fcc0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
1fcc0     08 4E 05 F1 | 	add	fp, #8
1fcc4     A7 26 02 FB | 	rdlong	local01, fp
1fcc8     08 4E 85 F1 | 	sub	fp, #8
1fccc     1E 26 0E F2 | 	cmp	local01, #30 wz
1fcd0     14 4E 05 A1 |  if_e	add	fp, #20
1fcd4     A7 2A 02 AB |  if_e	rdlong	local03, fp
1fcd8     14 4E 85 A1 |  if_e	sub	fp, #20
1fcdc     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1fce0     20 00 90 5D |  if_ne	jmp	#LR__2499
1fce4     A7 12 02 FB | 	rdlong	arg01, fp
1fce8     0C 4E 05 F1 | 	add	fp, #12
1fcec     A7 14 02 FB | 	rdlong	arg02, fp
1fcf0     0C 4E 85 F1 | 	sub	fp, #12
1fcf4     1F 14 E6 F4 | 	bitnot	arg02, #31
1fcf8     FC 9B B0 FD | 	call	#__system___float_add
1fcfc     A7 FA 61 FC | 	wrlong	result1, fp
1fd00     40 00 90 FD | 	jmp	#LR__2500
1fd04                 | LR__2499
1fd04                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
1fd04     08 4E 05 F1 | 	add	fp, #8
1fd08     A7 26 02 FB | 	rdlong	local01, fp
1fd0c     08 4E 85 F1 | 	sub	fp, #8
1fd10     1F 26 0E F2 | 	cmp	local01, #31 wz
1fd14     14 4E 05 51 |  if_ne	add	fp, #20
1fd18     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1fd1c     14 4E 85 51 |  if_ne	sub	fp, #20
1fd20     1F 2A 0E 52 |  if_ne	cmp	local03, #31 wz
1fd24     A7 06 68 AC |  if_e	wrlong	#3, fp
1fd28     08 4E 05 A1 |  if_e	add	fp, #8
1fd2c     A7 FE 69 AC |  if_e	wrlong	#255, fp
1fd30     08 4E 85 A1 |  if_e	sub	fp, #8
1fd34     A7 0A 68 5C |  if_ne	wrlong	#5, fp
1fd38     08 4E 05 51 |  if_ne	add	fp, #8
1fd3c     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1fd40     08 4E 85 51 |  if_ne	sub	fp, #8
1fd44                 | LR__2500
1fd44     A7 12 02 F6 | 	mov	arg01, fp
1fd48     8C D9 BE FD | 	call	#_push
1fd4c     A7 F0 03 F6 | 	mov	ptra, fp
1fd50     B2 00 A0 FD | 	call	#popregs_
1fd54                 | _do_minus_ret
1fd54     2D 00 64 FD | 	ret
1fd58                 | 
1fd58                 | ' 
1fd58                 | ' '--------------------------------- negative (-), one argument negative
1fd58                 | ' 
1fd58                 | ' sub do_negative
1fd58                 | _do_negative
1fd58     02 4A 05 F6 | 	mov	COUNT_, #2
1fd5c     A8 00 A0 FD | 	call	#pushregs_
1fd60     0C F0 07 F1 | 	add	ptra, #12
1fd64     D8 D8 BE FD | 	call	#_pop
1fd68     FF 26 02 F6 | 	mov	local01, result3
1fd6c     A7 FA 61 FC | 	wrlong	result1, fp
1fd70     04 4E 05 F1 | 	add	fp, #4
1fd74     A7 FC 61 FC | 	wrlong	result2, fp
1fd78     04 4E 05 F1 | 	add	fp, #4
1fd7c     A7 26 62 FC | 	wrlong	local01, fp
1fd80                 | ' 
1fd80                 | ' t1=pop()
1fd80                 | ' if t1.result_type=result_int then 
1fd80     08 4E 85 F1 | 	sub	fp, #8
1fd84     1C 26 0E F2 | 	cmp	local01, #28 wz
1fd88     A7 28 02 AB |  if_e	rdlong	local02, fp
1fd8c     14 27 62 A6 |  if_e	neg	local01, local02
1fd90     A7 26 62 AC |  if_e	wrlong	local01, fp
1fd94     5C 00 90 AD |  if_e	jmp	#LR__2512
1fd98     08 4E 05 F1 | 	add	fp, #8
1fd9c     A7 26 02 FB | 	rdlong	local01, fp
1fda0     08 4E 85 F1 | 	sub	fp, #8
1fda4     1D 26 0E F2 | 	cmp	local01, #29 wz
1fda8     1C 00 90 5D |  if_ne	jmp	#LR__2510
1fdac     A7 28 02 FB | 	rdlong	local02, fp
1fdb0     14 27 62 F6 | 	neg	local01, local02
1fdb4     A7 26 62 FC | 	wrlong	local01, fp
1fdb8     08 4E 05 F1 | 	add	fp, #8
1fdbc     A7 38 68 FC | 	wrlong	#28, fp
1fdc0     08 4E 85 F1 | 	sub	fp, #8
1fdc4     2C 00 90 FD | 	jmp	#LR__2511
1fdc8                 | LR__2510
1fdc8     08 4E 05 F1 | 	add	fp, #8
1fdcc     A7 26 02 FB | 	rdlong	local01, fp
1fdd0     08 4E 85 F1 | 	sub	fp, #8
1fdd4     1E 26 0E F2 | 	cmp	local01, #30 wz
1fdd8     A7 FA 01 AB |  if_e	rdlong	result1, fp
1fddc     1F FA E5 A4 |  if_e	bitnot	result1, #31
1fde0     A7 FA 61 AC |  if_e	wrlong	result1, fp
1fde4     08 4E 05 51 |  if_ne	add	fp, #8
1fde8     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1fdec     08 4E 85 51 |  if_ne	sub	fp, #8
1fdf0     A7 50 68 5C |  if_ne	wrlong	#40, fp
1fdf4                 | LR__2511
1fdf4                 | LR__2512
1fdf4     A7 12 02 F6 | 	mov	arg01, fp
1fdf8     DC D8 BE FD | 	call	#_push
1fdfc     A7 F0 03 F6 | 	mov	ptra, fp
1fe00     B2 00 A0 FD | 	call	#popregs_
1fe04                 | _do_negative_ret
1fe04     2D 00 64 FD | 	ret
1fe08                 | 
1fe08                 | ' 
1fe08                 | ' '--------------------------------- MOD (modulo)
1fe08                 | ' 
1fe08                 | ' sub do_mod 
1fe08                 | _do_mod
1fe08     01 4A 05 F6 | 	mov	COUNT_, #1
1fe0c     A8 00 A0 FD | 	call	#pushregs_
1fe10     18 F0 07 F1 | 	add	ptra, #24
1fe14     28 D8 BE FD | 	call	#_pop
1fe18     FD 92 02 F6 | 	mov	muldivb_, result1
1fe1c     FE 90 02 F6 | 	mov	muldiva_, result2
1fe20     FF 26 02 F6 | 	mov	local01, result3
1fe24     0C 4E 05 F1 | 	add	fp, #12
1fe28     A7 92 62 FC | 	wrlong	muldivb_, fp
1fe2c     04 4E 05 F1 | 	add	fp, #4
1fe30     A7 90 62 FC | 	wrlong	muldiva_, fp
1fe34     04 4E 05 F1 | 	add	fp, #4
1fe38     A7 26 62 FC | 	wrlong	local01, fp
1fe3c     14 4E 85 F1 | 	sub	fp, #20
1fe40     FC D7 BE FD | 	call	#_pop
1fe44     A7 FA 61 FC | 	wrlong	result1, fp
1fe48     04 4E 05 F1 | 	add	fp, #4
1fe4c     A7 FC 61 FC | 	wrlong	result2, fp
1fe50     04 4E 05 F1 | 	add	fp, #4
1fe54     A7 FE 61 FC | 	wrlong	result3, fp
1fe58                 | ' 
1fe58                 | ' t2=pop()
1fe58                 | ' t1=pop()
1fe58                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
1fe58     08 4E 85 F1 | 	sub	fp, #8
1fe5c     1F FE 0D F2 | 	cmp	result3, #31 wz
1fe60     14 4E 05 51 |  if_ne	add	fp, #20
1fe64     A7 12 02 5B |  if_ne	rdlong	arg01, fp
1fe68     14 4E 85 51 |  if_ne	sub	fp, #20
1fe6c     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
1fe70     A7 14 68 AC |  if_e	wrlong	#10, fp
1fe74     08 4E 05 A1 |  if_e	add	fp, #8
1fe78     A7 FE 69 AC |  if_e	wrlong	#255, fp
1fe7c     08 4E 85 A1 |  if_e	sub	fp, #8
1fe80     90 01 90 AD |  if_e	jmp	#LR__2526
1fe84                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
1fe84     08 4E 05 F1 | 	add	fp, #8
1fe88     A7 92 02 FB | 	rdlong	muldivb_, fp
1fe8c     08 4E 85 F1 | 	sub	fp, #8
1fe90     1E 92 0E F2 | 	cmp	muldivb_, #30 wz
1fe94     1C 00 90 5D |  if_ne	jmp	#LR__2520
1fe98     08 4E 05 F1 | 	add	fp, #8
1fe9c     A7 38 68 FC | 	wrlong	#28, fp
1fea0     08 4E 85 F1 | 	sub	fp, #8
1fea4     A7 12 02 FB | 	rdlong	arg01, fp
1fea8     00 14 06 F6 | 	mov	arg02, #0
1feac     E0 A2 B0 FD | 	call	#__system___float_tointeger
1feb0     A7 FA 61 FC | 	wrlong	result1, fp
1feb4                 | LR__2520
1feb4                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
1feb4     14 4E 05 F1 | 	add	fp, #20
1feb8     A7 92 02 FB | 	rdlong	muldivb_, fp
1febc     14 4E 85 F1 | 	sub	fp, #20
1fec0     1E 92 0E F2 | 	cmp	muldivb_, #30 wz
1fec4     28 00 90 5D |  if_ne	jmp	#LR__2521
1fec8     14 4E 05 F1 | 	add	fp, #20
1fecc     A7 38 68 FC | 	wrlong	#28, fp
1fed0     08 4E 85 F1 | 	sub	fp, #8
1fed4     A7 12 02 FB | 	rdlong	arg01, fp
1fed8     0C 4E 85 F1 | 	sub	fp, #12
1fedc     00 14 06 F6 | 	mov	arg02, #0
1fee0     AC A2 B0 FD | 	call	#__system___float_tointeger
1fee4     0C 4E 05 F1 | 	add	fp, #12
1fee8     A7 FA 61 FC | 	wrlong	result1, fp
1feec     0C 4E 85 F1 | 	sub	fp, #12
1fef0                 | LR__2521
1fef0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
1fef0     08 4E 05 F1 | 	add	fp, #8
1fef4     A7 92 02 FB | 	rdlong	muldivb_, fp
1fef8     08 4E 85 F1 | 	sub	fp, #8
1fefc     1D 92 0E F2 | 	cmp	muldivb_, #29 wz
1ff00     14 4E 05 A1 |  if_e	add	fp, #20
1ff04     A7 26 02 AB |  if_e	rdlong	local01, fp
1ff08     14 4E 85 A1 |  if_e	sub	fp, #20
1ff0c     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
1ff10     20 00 90 5D |  if_ne	jmp	#LR__2522
1ff14     0C 4E 05 F1 | 	add	fp, #12
1ff18     A7 26 02 FB | 	rdlong	local01, fp
1ff1c     0C 4E 85 F1 | 	sub	fp, #12
1ff20     A7 92 02 FB | 	rdlong	muldivb_, fp
1ff24     13 93 12 FD | 	qdiv	muldivb_, local01
1ff28     19 26 62 FD | 	getqy	local01
1ff2c     A7 26 62 FC | 	wrlong	local01, fp
1ff30     E0 00 90 FD | 	jmp	#LR__2526
1ff34                 | LR__2522
1ff34                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
1ff34     08 4E 05 F1 | 	add	fp, #8
1ff38     A7 92 02 FB | 	rdlong	muldivb_, fp
1ff3c     08 4E 85 F1 | 	sub	fp, #8
1ff40     1D 92 0E F2 | 	cmp	muldivb_, #29 wz
1ff44     14 4E 05 A1 |  if_e	add	fp, #20
1ff48     A7 26 02 AB |  if_e	rdlong	local01, fp
1ff4c     14 4E 85 A1 |  if_e	sub	fp, #20
1ff50     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1ff54     2C 00 90 5D |  if_ne	jmp	#LR__2523
1ff58     0C 4E 05 F1 | 	add	fp, #12
1ff5c     A7 26 02 FB | 	rdlong	local01, fp
1ff60     0C 4E 85 F1 | 	sub	fp, #12
1ff64     A7 92 02 FB | 	rdlong	muldivb_, fp
1ff68     13 93 12 FD | 	qdiv	muldivb_, local01
1ff6c     19 26 62 FD | 	getqy	local01
1ff70     A7 26 62 FC | 	wrlong	local01, fp
1ff74     08 4E 05 F1 | 	add	fp, #8
1ff78     A7 38 68 FC | 	wrlong	#28, fp
1ff7c     08 4E 85 F1 | 	sub	fp, #8
1ff80     90 00 90 FD | 	jmp	#LR__2526
1ff84                 | LR__2523
1ff84                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
1ff84     08 4E 05 F1 | 	add	fp, #8
1ff88     A7 92 02 FB | 	rdlong	muldivb_, fp
1ff8c     08 4E 85 F1 | 	sub	fp, #8
1ff90     1C 92 0E F2 | 	cmp	muldivb_, #28 wz
1ff94     14 4E 05 A1 |  if_e	add	fp, #20
1ff98     A7 26 02 AB |  if_e	rdlong	local01, fp
1ff9c     14 4E 85 A1 |  if_e	sub	fp, #20
1ffa0     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
1ffa4     1C 00 90 5D |  if_ne	jmp	#LR__2524
1ffa8     A7 90 02 FB | 	rdlong	muldiva_, fp
1ffac     0C 4E 05 F1 | 	add	fp, #12
1ffb0     A7 92 02 FB | 	rdlong	muldivb_, fp
1ffb4     0C 4E 85 F1 | 	sub	fp, #12
1ffb8     BA 00 A0 FD | 	call	#divide_
1ffbc     A7 90 62 FC | 	wrlong	muldiva_, fp
1ffc0     50 00 90 FD | 	jmp	#LR__2526
1ffc4                 | LR__2524
1ffc4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
1ffc4     08 4E 05 F1 | 	add	fp, #8
1ffc8     A7 92 02 FB | 	rdlong	muldivb_, fp
1ffcc     08 4E 85 F1 | 	sub	fp, #8
1ffd0     1C 92 0E F2 | 	cmp	muldivb_, #28 wz
1ffd4     14 4E 05 A1 |  if_e	add	fp, #20
1ffd8     A7 26 02 AB |  if_e	rdlong	local01, fp
1ffdc     14 4E 85 A1 |  if_e	sub	fp, #20
1ffe0     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1ffe4     1C 00 90 5D |  if_ne	jmp	#LR__2525
1ffe8     A7 90 02 FB | 	rdlong	muldiva_, fp
1ffec     0C 4E 05 F1 | 	add	fp, #12
1fff0     A7 92 02 FB | 	rdlong	muldivb_, fp
1fff4     0C 4E 85 F1 | 	sub	fp, #12
1fff8     BA 00 A0 FD | 	call	#divide_
1fffc     A7 90 62 FC | 	wrlong	muldiva_, fp
20000     10 00 90 FD | 	jmp	#LR__2526
20004                 | LR__2525
20004     A7 16 68 FC | 	wrlong	#11, fp
20008     08 4E 05 F1 | 	add	fp, #8
2000c     A7 FE 69 FC | 	wrlong	#255, fp
20010     08 4E 85 F1 | 	sub	fp, #8
20014                 | LR__2526
20014     A7 12 02 F6 | 	mov	arg01, fp
20018     BC D6 BE FD | 	call	#_push
2001c     A7 F0 03 F6 | 	mov	ptra, fp
20020     B2 00 A0 FD | 	call	#popregs_
20024                 | _do_mod_ret
20024     2D 00 64 FD | 	ret
20028                 | 
20028                 | ' 
20028                 | ' '--------------------------------- mul (*)
20028                 | ' 
20028                 | ' sub do_mul
20028                 | _do_mul
20028     05 4A 05 F6 | 	mov	COUNT_, #5
2002c     A8 00 A0 FD | 	call	#pushregs_
20030     18 F0 07 F1 | 	add	ptra, #24
20034     08 D6 BE FD | 	call	#_pop
20038     FD 26 02 F6 | 	mov	local01, result1
2003c     FE 28 02 F6 | 	mov	local02, result2
20040     FF 2A 02 F6 | 	mov	local03, result3
20044     0C 4E 05 F1 | 	add	fp, #12
20048     A7 26 62 FC | 	wrlong	local01, fp
2004c     04 4E 05 F1 | 	add	fp, #4
20050     A7 28 62 FC | 	wrlong	local02, fp
20054     04 4E 05 F1 | 	add	fp, #4
20058     A7 2A 62 FC | 	wrlong	local03, fp
2005c     14 4E 85 F1 | 	sub	fp, #20
20060     DC D5 BE FD | 	call	#_pop
20064     FF 2A 02 F6 | 	mov	local03, result3
20068     A7 FA 61 FC | 	wrlong	result1, fp
2006c     04 4E 05 F1 | 	add	fp, #4
20070     A7 FC 61 FC | 	wrlong	result2, fp
20074     04 4E 05 F1 | 	add	fp, #4
20078     A7 2A 62 FC | 	wrlong	local03, fp
2007c                 | ' 
2007c                 | ' t2=pop()
2007c                 | ' t1=pop()
2007c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
2007c     08 4E 85 F1 | 	sub	fp, #8
20080     1D 2A 0E F2 | 	cmp	local03, #29 wz
20084     14 4E 05 A1 |  if_e	add	fp, #20
20088     A7 2C 02 AB |  if_e	rdlong	local04, fp
2008c     14 4E 85 A1 |  if_e	sub	fp, #20
20090     16 2B 02 A6 |  if_e	mov	local03, local04
20094     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
20098     20 00 90 5D |  if_ne	jmp	#LR__2530
2009c     A7 28 02 FB | 	rdlong	local02, fp
200a0     0C 4E 05 F1 | 	add	fp, #12
200a4     A7 2A 02 FB | 	rdlong	local03, fp
200a8     15 29 02 FD | 	qmul	local02, local03
200ac     0C 4E 85 F1 | 	sub	fp, #12
200b0     18 26 62 FD | 	getqx	local01
200b4     A7 26 62 FC | 	wrlong	local01, fp
200b8     C4 02 90 FD | 	jmp	#LR__2539
200bc                 | LR__2530
200bc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
200bc     08 4E 05 F1 | 	add	fp, #8
200c0     A7 26 02 FB | 	rdlong	local01, fp
200c4     08 4E 85 F1 | 	sub	fp, #8
200c8     1D 26 0E F2 | 	cmp	local01, #29 wz
200cc     14 4E 05 A1 |  if_e	add	fp, #20
200d0     A7 2C 02 AB |  if_e	rdlong	local04, fp
200d4     14 4E 85 A1 |  if_e	sub	fp, #20
200d8     16 2B 02 A6 |  if_e	mov	local03, local04
200dc     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
200e0     2C 00 90 5D |  if_ne	jmp	#LR__2531
200e4     A7 28 02 FB | 	rdlong	local02, fp
200e8     0C 4E 05 F1 | 	add	fp, #12
200ec     A7 2A 02 FB | 	rdlong	local03, fp
200f0     15 29 02 FD | 	qmul	local02, local03
200f4     0C 4E 85 F1 | 	sub	fp, #12
200f8     18 26 62 FD | 	getqx	local01
200fc     A7 26 62 FC | 	wrlong	local01, fp
20100     08 4E 05 F1 | 	add	fp, #8
20104     A7 38 68 FC | 	wrlong	#28, fp
20108     08 4E 85 F1 | 	sub	fp, #8
2010c     70 02 90 FD | 	jmp	#LR__2539
20110                 | LR__2531
20110                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
20110     08 4E 05 F1 | 	add	fp, #8
20114     A7 26 02 FB | 	rdlong	local01, fp
20118     08 4E 85 F1 | 	sub	fp, #8
2011c     1D 26 0E F2 | 	cmp	local01, #29 wz
20120     14 4E 05 A1 |  if_e	add	fp, #20
20124     A7 2C 02 AB |  if_e	rdlong	local04, fp
20128     14 4E 85 A1 |  if_e	sub	fp, #20
2012c     16 2B 02 A6 |  if_e	mov	local03, local04
20130     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
20134     30 00 90 5D |  if_ne	jmp	#LR__2532
20138     A7 12 02 FB | 	rdlong	arg01, fp
2013c     84 97 B0 FD | 	call	#__system___float_fromuns
20140     FD 12 02 F6 | 	mov	arg01, result1
20144     0C 4E 05 F1 | 	add	fp, #12
20148     A7 14 02 FB | 	rdlong	arg02, fp
2014c     0C 4E 85 F1 | 	sub	fp, #12
20150     74 9B B0 FD | 	call	#__system___float_mul
20154     A7 FA 61 FC | 	wrlong	result1, fp
20158     08 4E 05 F1 | 	add	fp, #8
2015c     A7 3C 68 FC | 	wrlong	#30, fp
20160     08 4E 85 F1 | 	sub	fp, #8
20164     18 02 90 FD | 	jmp	#LR__2539
20168                 | LR__2532
20168                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
20168     08 4E 05 F1 | 	add	fp, #8
2016c     A7 26 02 FB | 	rdlong	local01, fp
20170     08 4E 85 F1 | 	sub	fp, #8
20174     1C 26 0E F2 | 	cmp	local01, #28 wz
20178     14 4E 05 A1 |  if_e	add	fp, #20
2017c     A7 2C 02 AB |  if_e	rdlong	local04, fp
20180     14 4E 85 A1 |  if_e	sub	fp, #20
20184     16 2B 02 A6 |  if_e	mov	local03, local04
20188     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
2018c     20 00 90 5D |  if_ne	jmp	#LR__2533
20190     A7 28 02 FB | 	rdlong	local02, fp
20194     0C 4E 05 F1 | 	add	fp, #12
20198     A7 2A 02 FB | 	rdlong	local03, fp
2019c     15 29 02 FD | 	qmul	local02, local03
201a0     0C 4E 85 F1 | 	sub	fp, #12
201a4     18 26 62 FD | 	getqx	local01
201a8     A7 26 62 FC | 	wrlong	local01, fp
201ac     D0 01 90 FD | 	jmp	#LR__2539
201b0                 | LR__2533
201b0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
201b0     08 4E 05 F1 | 	add	fp, #8
201b4     A7 26 02 FB | 	rdlong	local01, fp
201b8     08 4E 85 F1 | 	sub	fp, #8
201bc     1C 26 0E F2 | 	cmp	local01, #28 wz
201c0     14 4E 05 A1 |  if_e	add	fp, #20
201c4     A7 2C 02 AB |  if_e	rdlong	local04, fp
201c8     14 4E 85 A1 |  if_e	sub	fp, #20
201cc     1C 2C 0E A2 |  if_e	cmp	local04, #28 wz
201d0     20 00 90 5D |  if_ne	jmp	#LR__2534
201d4     A7 28 02 FB | 	rdlong	local02, fp
201d8     0C 4E 05 F1 | 	add	fp, #12
201dc     A7 2A 02 FB | 	rdlong	local03, fp
201e0     15 29 02 FD | 	qmul	local02, local03
201e4     0C 4E 85 F1 | 	sub	fp, #12
201e8     18 26 62 FD | 	getqx	local01
201ec     A7 26 62 FC | 	wrlong	local01, fp
201f0     8C 01 90 FD | 	jmp	#LR__2539
201f4                 | LR__2534
201f4                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
201f4     08 4E 05 F1 | 	add	fp, #8
201f8     A7 26 02 FB | 	rdlong	local01, fp
201fc     08 4E 85 F1 | 	sub	fp, #8
20200     1C 26 0E F2 | 	cmp	local01, #28 wz
20204     14 4E 05 A1 |  if_e	add	fp, #20
20208     A7 2A 02 AB |  if_e	rdlong	local03, fp
2020c     14 4E 85 A1 |  if_e	sub	fp, #20
20210     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
20214     40 00 90 5D |  if_ne	jmp	#LR__2535
20218     A7 12 02 FB | 	rdlong	arg01, fp
2021c     09 13 52 F6 | 	abs	arg01, arg01 wc
20220     1F 2E C6 C9 |  if_b	decod	local05, #31
20224     00 2E 06 36 |  if_ae	mov	local05, #0
20228     98 96 B0 FD | 	call	#__system___float_fromuns
2022c     17 FB 61 F5 | 	xor	result1, local05
20230     FD 12 02 F6 | 	mov	arg01, result1
20234     0C 4E 05 F1 | 	add	fp, #12
20238     A7 14 02 FB | 	rdlong	arg02, fp
2023c     0C 4E 85 F1 | 	sub	fp, #12
20240     84 9A B0 FD | 	call	#__system___float_mul
20244     A7 FA 61 FC | 	wrlong	result1, fp
20248     08 4E 05 F1 | 	add	fp, #8
2024c     A7 3C 68 FC | 	wrlong	#30, fp
20250     08 4E 85 F1 | 	sub	fp, #8
20254     28 01 90 FD | 	jmp	#LR__2539
20258                 | LR__2535
20258                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
20258     08 4E 05 F1 | 	add	fp, #8
2025c     A7 26 02 FB | 	rdlong	local01, fp
20260     08 4E 85 F1 | 	sub	fp, #8
20264     1E 26 0E F2 | 	cmp	local01, #30 wz
20268     14 4E 05 A1 |  if_e	add	fp, #20
2026c     A7 2A 02 AB |  if_e	rdlong	local03, fp
20270     14 4E 85 A1 |  if_e	sub	fp, #20
20274     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
20278     28 00 90 5D |  if_ne	jmp	#LR__2536
2027c     A7 26 02 FB | 	rdlong	local01, fp
20280     0C 4E 05 F1 | 	add	fp, #12
20284     A7 12 02 FB | 	rdlong	arg01, fp
20288     0C 4E 85 F1 | 	sub	fp, #12
2028c     34 96 B0 FD | 	call	#__system___float_fromuns
20290     FD 14 02 F6 | 	mov	arg02, result1
20294     13 13 02 F6 | 	mov	arg01, local01
20298     2C 9A B0 FD | 	call	#__system___float_mul
2029c     A7 FA 61 FC | 	wrlong	result1, fp
202a0     DC 00 90 FD | 	jmp	#LR__2539
202a4                 | LR__2536
202a4                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
202a4     08 4E 05 F1 | 	add	fp, #8
202a8     A7 26 02 FB | 	rdlong	local01, fp
202ac     08 4E 85 F1 | 	sub	fp, #8
202b0     1E 26 0E F2 | 	cmp	local01, #30 wz
202b4     14 4E 05 A1 |  if_e	add	fp, #20
202b8     A7 2A 02 AB |  if_e	rdlong	local03, fp
202bc     14 4E 85 A1 |  if_e	sub	fp, #20
202c0     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
202c4     38 00 90 5D |  if_ne	jmp	#LR__2537
202c8     A7 26 02 FB | 	rdlong	local01, fp
202cc     0C 4E 05 F1 | 	add	fp, #12
202d0     A7 12 02 FB | 	rdlong	arg01, fp
202d4     0C 4E 85 F1 | 	sub	fp, #12
202d8     09 13 52 F6 | 	abs	arg01, arg01 wc
202dc     1F 2E C6 C9 |  if_b	decod	local05, #31
202e0     00 2E 06 36 |  if_ae	mov	local05, #0
202e4     DC 95 B0 FD | 	call	#__system___float_fromuns
202e8     17 FB 61 F5 | 	xor	result1, local05
202ec     FD 14 02 F6 | 	mov	arg02, result1
202f0     13 13 02 F6 | 	mov	arg01, local01
202f4     D0 99 B0 FD | 	call	#__system___float_mul
202f8     A7 FA 61 FC | 	wrlong	result1, fp
202fc     80 00 90 FD | 	jmp	#LR__2539
20300                 | LR__2537
20300                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
20300     08 4E 05 F1 | 	add	fp, #8
20304     A7 26 02 FB | 	rdlong	local01, fp
20308     08 4E 85 F1 | 	sub	fp, #8
2030c     1E 26 0E F2 | 	cmp	local01, #30 wz
20310     14 4E 05 A1 |  if_e	add	fp, #20
20314     A7 2A 02 AB |  if_e	rdlong	local03, fp
20318     14 4E 85 A1 |  if_e	sub	fp, #20
2031c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
20320     1C 00 90 5D |  if_ne	jmp	#LR__2538
20324     A7 12 02 FB | 	rdlong	arg01, fp
20328     0C 4E 05 F1 | 	add	fp, #12
2032c     A7 14 02 FB | 	rdlong	arg02, fp
20330     0C 4E 85 F1 | 	sub	fp, #12
20334     90 99 B0 FD | 	call	#__system___float_mul
20338     A7 FA 61 FC | 	wrlong	result1, fp
2033c     40 00 90 FD | 	jmp	#LR__2539
20340                 | LR__2538
20340                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
20340     08 4E 05 F1 | 	add	fp, #8
20344     A7 26 02 FB | 	rdlong	local01, fp
20348     08 4E 85 F1 | 	sub	fp, #8
2034c     1F 26 0E F2 | 	cmp	local01, #31 wz
20350     14 4E 05 51 |  if_ne	add	fp, #20
20354     A7 2A 02 5B |  if_ne	rdlong	local03, fp
20358     14 4E 85 51 |  if_ne	sub	fp, #20
2035c     1F 2A 0E 52 |  if_ne	cmp	local03, #31 wz
20360     A7 10 68 AC |  if_e	wrlong	#8, fp
20364     08 4E 05 A1 |  if_e	add	fp, #8
20368     A7 FE 69 AC |  if_e	wrlong	#255, fp
2036c     08 4E 85 A1 |  if_e	sub	fp, #8
20370     A7 12 68 5C |  if_ne	wrlong	#9, fp
20374     08 4E 05 51 |  if_ne	add	fp, #8
20378     A7 FE 69 5C |  if_ne	wrlong	#255, fp
2037c     08 4E 85 51 |  if_ne	sub	fp, #8
20380                 | LR__2539
20380     A7 12 02 F6 | 	mov	arg01, fp
20384     50 D3 BE FD | 	call	#_push
20388     A7 F0 03 F6 | 	mov	ptra, fp
2038c     B2 00 A0 FD | 	call	#popregs_
20390                 | _do_mul_ret
20390     2D 00 64 FD | 	ret
20394                 | 
20394                 | ' 
20394                 | ' '--------------------------------- not equal (<>)
20394                 | ' 
20394                 | ' sub do_ne
20394                 | _do_ne
20394     05 4A 05 F6 | 	mov	COUNT_, #5
20398     A8 00 A0 FD | 	call	#pushregs_
2039c     18 F0 07 F1 | 	add	ptra, #24
203a0     9C D2 BE FD | 	call	#_pop
203a4     FD 26 02 F6 | 	mov	local01, result1
203a8     FE 28 02 F6 | 	mov	local02, result2
203ac     FF 2A 02 F6 | 	mov	local03, result3
203b0     0C 4E 05 F1 | 	add	fp, #12
203b4     A7 26 62 FC | 	wrlong	local01, fp
203b8     04 4E 05 F1 | 	add	fp, #4
203bc     A7 28 62 FC | 	wrlong	local02, fp
203c0     04 4E 05 F1 | 	add	fp, #4
203c4     A7 2A 62 FC | 	wrlong	local03, fp
203c8     14 4E 85 F1 | 	sub	fp, #20
203cc     70 D2 BE FD | 	call	#_pop
203d0     FF 2A 02 F6 | 	mov	local03, result3
203d4     A7 FA 61 FC | 	wrlong	result1, fp
203d8     04 4E 05 F1 | 	add	fp, #4
203dc     A7 FC 61 FC | 	wrlong	result2, fp
203e0     04 4E 05 F1 | 	add	fp, #4
203e4     A7 2A 62 FC | 	wrlong	local03, fp
203e8                 | ' 
203e8                 | ' t2=pop()
203e8                 | ' t1=pop()
203e8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
203e8     08 4E 85 F1 | 	sub	fp, #8
203ec     1F 2A 0E F2 | 	cmp	local03, #31 wz
203f0     14 4E 05 A1 |  if_e	add	fp, #20
203f4     A7 2C 02 AB |  if_e	rdlong	local04, fp
203f8     14 4E 85 A1 |  if_e	sub	fp, #20
203fc     16 2B 02 A6 |  if_e	mov	local03, local04
20400     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
20404     28 00 90 5D |  if_ne	jmp	#LR__2540
20408     00 26 06 F6 | 	mov	local01, #0
2040c     A7 12 02 FB | 	rdlong	arg01, fp
20410     0C 4E 05 F1 | 	add	fp, #12
20414     A7 14 02 FB | 	rdlong	arg02, fp
20418     0C 4E 85 F1 | 	sub	fp, #12
2041c     58 6A B0 FD | 	call	#__system___string_cmp
20420     00 FA 0D F2 | 	cmp	result1, #0 wz
20424     00 26 26 56 |  if_ne	not	local01, #0
20428     A7 26 62 FC | 	wrlong	local01, fp
2042c     20 04 90 FD | 	jmp	#LR__2553
20430                 | LR__2540
20430                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
20430     08 4E 05 F1 | 	add	fp, #8
20434     A7 26 02 FB | 	rdlong	local01, fp
20438     08 4E 85 F1 | 	sub	fp, #8
2043c     1E 26 0E F2 | 	cmp	local01, #30 wz
20440     14 4E 05 A1 |  if_e	add	fp, #20
20444     A7 2C 02 AB |  if_e	rdlong	local04, fp
20448     14 4E 85 A1 |  if_e	sub	fp, #20
2044c     16 2B 02 A6 |  if_e	mov	local03, local04
20450     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
20454     2C 00 90 5D |  if_ne	jmp	#LR__2541
20458     00 26 06 F6 | 	mov	local01, #0
2045c     A7 12 02 FB | 	rdlong	arg01, fp
20460     0C 4E 05 F1 | 	add	fp, #12
20464     A7 14 02 FB | 	rdlong	arg02, fp
20468     0C 4E 85 F1 | 	sub	fp, #12
2046c     01 16 06 F6 | 	mov	arg03, #1
20470     88 9C B0 FD | 	call	#__system___float_cmp
20474     00 FA 0D F2 | 	cmp	result1, #0 wz
20478     00 26 26 56 |  if_ne	not	local01, #0
2047c     A7 26 62 FC | 	wrlong	local01, fp
20480     CC 03 90 FD | 	jmp	#LR__2553
20484                 | LR__2541
20484                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
20484     08 4E 05 F1 | 	add	fp, #8
20488     A7 26 02 FB | 	rdlong	local01, fp
2048c     08 4E 85 F1 | 	sub	fp, #8
20490     1E 26 0E F2 | 	cmp	local01, #30 wz
20494     14 4E 05 A1 |  if_e	add	fp, #20
20498     A7 2C 02 AB |  if_e	rdlong	local04, fp
2049c     14 4E 85 A1 |  if_e	sub	fp, #20
204a0     16 2B 02 A6 |  if_e	mov	local03, local04
204a4     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
204a8     48 00 90 5D |  if_ne	jmp	#LR__2542
204ac     00 26 06 F6 | 	mov	local01, #0
204b0     A7 28 02 FB | 	rdlong	local02, fp
204b4     0C 4E 05 F1 | 	add	fp, #12
204b8     A7 12 02 FB | 	rdlong	arg01, fp
204bc     0C 4E 85 F1 | 	sub	fp, #12
204c0     09 13 52 F6 | 	abs	arg01, arg01 wc
204c4     1F 2E C6 C9 |  if_b	decod	local05, #31
204c8     00 2E 06 36 |  if_ae	mov	local05, #0
204cc     F4 93 B0 FD | 	call	#__system___float_fromuns
204d0     17 FB 61 F5 | 	xor	result1, local05
204d4     FD 14 02 F6 | 	mov	arg02, result1
204d8     14 13 02 F6 | 	mov	arg01, local02
204dc     01 16 06 F6 | 	mov	arg03, #1
204e0     18 9C B0 FD | 	call	#__system___float_cmp
204e4     00 FA 0D F2 | 	cmp	result1, #0 wz
204e8     00 26 26 56 |  if_ne	not	local01, #0
204ec     A7 26 62 FC | 	wrlong	local01, fp
204f0     5C 03 90 FD | 	jmp	#LR__2553
204f4                 | LR__2542
204f4                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
204f4     08 4E 05 F1 | 	add	fp, #8
204f8     A7 26 02 FB | 	rdlong	local01, fp
204fc     08 4E 85 F1 | 	sub	fp, #8
20500     1E 26 0E F2 | 	cmp	local01, #30 wz
20504     14 4E 05 A1 |  if_e	add	fp, #20
20508     A7 2C 02 AB |  if_e	rdlong	local04, fp
2050c     14 4E 85 A1 |  if_e	sub	fp, #20
20510     16 2B 02 A6 |  if_e	mov	local03, local04
20514     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
20518     38 00 90 5D |  if_ne	jmp	#LR__2543
2051c     00 26 06 F6 | 	mov	local01, #0
20520     A7 28 02 FB | 	rdlong	local02, fp
20524     0C 4E 05 F1 | 	add	fp, #12
20528     A7 12 02 FB | 	rdlong	arg01, fp
2052c     0C 4E 85 F1 | 	sub	fp, #12
20530     90 93 B0 FD | 	call	#__system___float_fromuns
20534     FD 14 02 F6 | 	mov	arg02, result1
20538     14 13 02 F6 | 	mov	arg01, local02
2053c     01 16 06 F6 | 	mov	arg03, #1
20540     B8 9B B0 FD | 	call	#__system___float_cmp
20544     00 FA 0D F2 | 	cmp	result1, #0 wz
20548     00 26 26 56 |  if_ne	not	local01, #0
2054c     A7 26 62 FC | 	wrlong	local01, fp
20550     FC 02 90 FD | 	jmp	#LR__2553
20554                 | LR__2543
20554                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
20554     08 4E 05 F1 | 	add	fp, #8
20558     A7 26 02 FB | 	rdlong	local01, fp
2055c     08 4E 85 F1 | 	sub	fp, #8
20560     1C 26 0E F2 | 	cmp	local01, #28 wz
20564     14 4E 05 A1 |  if_e	add	fp, #20
20568     A7 2C 02 AB |  if_e	rdlong	local04, fp
2056c     14 4E 85 A1 |  if_e	sub	fp, #20
20570     16 2B 02 A6 |  if_e	mov	local03, local04
20574     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
20578     44 00 90 5D |  if_ne	jmp	#LR__2544
2057c     00 26 06 F6 | 	mov	local01, #0
20580     A7 12 02 FB | 	rdlong	arg01, fp
20584     09 13 52 F6 | 	abs	arg01, arg01 wc
20588     1F 2E C6 C9 |  if_b	decod	local05, #31
2058c     00 2E 06 36 |  if_ae	mov	local05, #0
20590     30 93 B0 FD | 	call	#__system___float_fromuns
20594     17 FB 61 F5 | 	xor	result1, local05
20598     FD 12 02 F6 | 	mov	arg01, result1
2059c     0C 4E 05 F1 | 	add	fp, #12
205a0     A7 14 02 FB | 	rdlong	arg02, fp
205a4     0C 4E 85 F1 | 	sub	fp, #12
205a8     01 16 06 F6 | 	mov	arg03, #1
205ac     4C 9B B0 FD | 	call	#__system___float_cmp
205b0     00 FA 0D F2 | 	cmp	result1, #0 wz
205b4     00 26 26 56 |  if_ne	not	local01, #0
205b8     A7 26 62 FC | 	wrlong	local01, fp
205bc     90 02 90 FD | 	jmp	#LR__2553
205c0                 | LR__2544
205c0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
205c0     08 4E 05 F1 | 	add	fp, #8
205c4     A7 26 02 FB | 	rdlong	local01, fp
205c8     08 4E 85 F1 | 	sub	fp, #8
205cc     1C 26 0E F2 | 	cmp	local01, #28 wz
205d0     14 4E 05 A1 |  if_e	add	fp, #20
205d4     A7 2C 02 AB |  if_e	rdlong	local04, fp
205d8     14 4E 85 A1 |  if_e	sub	fp, #20
205dc     16 2B 02 A6 |  if_e	mov	local03, local04
205e0     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
205e4     24 00 90 5D |  if_ne	jmp	#LR__2545
205e8     00 26 06 F6 | 	mov	local01, #0
205ec     A7 28 02 FB | 	rdlong	local02, fp
205f0     0C 4E 05 F1 | 	add	fp, #12
205f4     A7 2A 02 FB | 	rdlong	local03, fp
205f8     0C 4E 85 F1 | 	sub	fp, #12
205fc     15 29 0A F2 | 	cmp	local02, local03 wz
20600     01 26 66 56 |  if_ne	neg	local01, #1
20604     A7 26 62 FC | 	wrlong	local01, fp
20608     44 02 90 FD | 	jmp	#LR__2553
2060c                 | LR__2545
2060c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
2060c     08 4E 05 F1 | 	add	fp, #8
20610     A7 26 02 FB | 	rdlong	local01, fp
20614     08 4E 85 F1 | 	sub	fp, #8
20618     1C 26 0E F2 | 	cmp	local01, #28 wz
2061c     14 4E 05 A1 |  if_e	add	fp, #20
20620     A7 2C 02 AB |  if_e	rdlong	local04, fp
20624     14 4E 85 A1 |  if_e	sub	fp, #20
20628     16 2B 02 A6 |  if_e	mov	local03, local04
2062c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
20630     24 00 90 5D |  if_ne	jmp	#LR__2546
20634     00 26 06 F6 | 	mov	local01, #0
20638     A7 28 02 FB | 	rdlong	local02, fp
2063c     0C 4E 05 F1 | 	add	fp, #12
20640     A7 2A 02 FB | 	rdlong	local03, fp
20644     0C 4E 85 F1 | 	sub	fp, #12
20648     15 29 0A F2 | 	cmp	local02, local03 wz
2064c     01 26 66 56 |  if_ne	neg	local01, #1
20650     A7 26 62 FC | 	wrlong	local01, fp
20654     F8 01 90 FD | 	jmp	#LR__2553
20658                 | LR__2546
20658                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
20658     08 4E 05 F1 | 	add	fp, #8
2065c     A7 26 02 FB | 	rdlong	local01, fp
20660     08 4E 85 F1 | 	sub	fp, #8
20664     1D 26 0E F2 | 	cmp	local01, #29 wz
20668     14 4E 05 A1 |  if_e	add	fp, #20
2066c     A7 2C 02 AB |  if_e	rdlong	local04, fp
20670     14 4E 85 A1 |  if_e	sub	fp, #20
20674     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
20678     34 00 90 5D |  if_ne	jmp	#LR__2547
2067c     00 26 06 F6 | 	mov	local01, #0
20680     A7 12 02 FB | 	rdlong	arg01, fp
20684     3C 92 B0 FD | 	call	#__system___float_fromuns
20688     FD 12 02 F6 | 	mov	arg01, result1
2068c     0C 4E 05 F1 | 	add	fp, #12
20690     A7 14 02 FB | 	rdlong	arg02, fp
20694     0C 4E 85 F1 | 	sub	fp, #12
20698     01 16 06 F6 | 	mov	arg03, #1
2069c     5C 9A B0 FD | 	call	#__system___float_cmp
206a0     00 FA 0D F2 | 	cmp	result1, #0 wz
206a4     00 26 26 56 |  if_ne	not	local01, #0
206a8     A7 26 62 FC | 	wrlong	local01, fp
206ac     A0 01 90 FD | 	jmp	#LR__2553
206b0                 | LR__2547
206b0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
206b0     08 4E 05 F1 | 	add	fp, #8
206b4     A7 26 02 FB | 	rdlong	local01, fp
206b8     08 4E 85 F1 | 	sub	fp, #8
206bc     1D 26 0E F2 | 	cmp	local01, #29 wz
206c0     14 4E 05 A1 |  if_e	add	fp, #20
206c4     A7 2A 02 AB |  if_e	rdlong	local03, fp
206c8     14 4E 85 A1 |  if_e	sub	fp, #20
206cc     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
206d0     24 00 90 5D |  if_ne	jmp	#LR__2548
206d4     00 26 06 F6 | 	mov	local01, #0
206d8     A7 28 02 FB | 	rdlong	local02, fp
206dc     0C 4E 05 F1 | 	add	fp, #12
206e0     A7 2A 02 FB | 	rdlong	local03, fp
206e4     0C 4E 85 F1 | 	sub	fp, #12
206e8     15 29 0A F2 | 	cmp	local02, local03 wz
206ec     01 26 66 56 |  if_ne	neg	local01, #1
206f0     A7 26 62 FC | 	wrlong	local01, fp
206f4     58 01 90 FD | 	jmp	#LR__2553
206f8                 | LR__2548
206f8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
206f8     08 4E 05 F1 | 	add	fp, #8
206fc     A7 26 02 FB | 	rdlong	local01, fp
20700     08 4E 85 F1 | 	sub	fp, #8
20704     1D 26 0E F2 | 	cmp	local01, #29 wz
20708     14 4E 05 A1 |  if_e	add	fp, #20
2070c     A7 2A 02 AB |  if_e	rdlong	local03, fp
20710     14 4E 85 A1 |  if_e	sub	fp, #20
20714     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
20718     24 00 90 5D |  if_ne	jmp	#LR__2549
2071c     00 26 06 F6 | 	mov	local01, #0
20720     A7 28 02 FB | 	rdlong	local02, fp
20724     0C 4E 05 F1 | 	add	fp, #12
20728     A7 2A 02 FB | 	rdlong	local03, fp
2072c     0C 4E 85 F1 | 	sub	fp, #12
20730     15 29 0A F2 | 	cmp	local02, local03 wz
20734     01 26 66 56 |  if_ne	neg	local01, #1
20738     A7 26 62 FC | 	wrlong	local01, fp
2073c     10 01 90 FD | 	jmp	#LR__2553
20740                 | LR__2549
20740                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<>t2.result.sresult):goto 1192
20740     08 4E 05 F1 | 	add	fp, #8
20744     A7 26 02 FB | 	rdlong	local01, fp
20748     08 4E 85 F1 | 	sub	fp, #8
2074c     2B 26 0E F2 | 	cmp	local01, #43 wz
20750     14 4E 05 A1 |  if_e	add	fp, #20
20754     A7 2A 02 AB |  if_e	rdlong	local03, fp
20758     14 4E 85 A1 |  if_e	sub	fp, #20
2075c     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
20760     30 00 90 5D |  if_ne	jmp	#LR__2550
20764     00 26 06 F6 | 	mov	local01, #0
20768     A7 12 02 FB | 	rdlong	arg01, fp
2076c     48 D0 BE FD | 	call	#_convertstring
20770     FD 12 02 F6 | 	mov	arg01, result1
20774     0C 4E 05 F1 | 	add	fp, #12
20778     A7 14 02 FB | 	rdlong	arg02, fp
2077c     0C 4E 85 F1 | 	sub	fp, #12
20780     F4 66 B0 FD | 	call	#__system___string_cmp
20784     00 FA 0D F2 | 	cmp	result1, #0 wz
20788     00 26 26 56 |  if_ne	not	local01, #0
2078c     A7 26 62 FC | 	wrlong	local01, fp
20790     BC 00 90 FD | 	jmp	#LR__2553
20794                 | LR__2550
20794                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<>convertstring(t2.result.uresult)) :goto 1192
20794     08 4E 05 F1 | 	add	fp, #8
20798     A7 26 02 FB | 	rdlong	local01, fp
2079c     08 4E 85 F1 | 	sub	fp, #8
207a0     1F 26 0E F2 | 	cmp	local01, #31 wz
207a4     14 4E 05 A1 |  if_e	add	fp, #20
207a8     A7 2A 02 AB |  if_e	rdlong	local03, fp
207ac     14 4E 85 A1 |  if_e	sub	fp, #20
207b0     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
207b4     34 00 90 5D |  if_ne	jmp	#LR__2551
207b8     00 26 06 F6 | 	mov	local01, #0
207bc     A7 28 02 FB | 	rdlong	local02, fp
207c0     0C 4E 05 F1 | 	add	fp, #12
207c4     A7 12 02 FB | 	rdlong	arg01, fp
207c8     0C 4E 85 F1 | 	sub	fp, #12
207cc     E8 CF BE FD | 	call	#_convertstring
207d0     FD 14 02 F6 | 	mov	arg02, result1
207d4     14 13 02 F6 | 	mov	arg01, local02
207d8     9C 66 B0 FD | 	call	#__system___string_cmp
207dc     00 FA 0D F2 | 	cmp	result1, #0 wz
207e0     00 26 26 56 |  if_ne	not	local01, #0
207e4     A7 26 62 FC | 	wrlong	local01, fp
207e8     64 00 90 FD | 	jmp	#LR__2553
207ec                 | LR__2551
207ec                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<>convertstring(t2.result.uresult)) :goto 1192
207ec     08 4E 05 F1 | 	add	fp, #8
207f0     A7 26 02 FB | 	rdlong	local01, fp
207f4     08 4E 85 F1 | 	sub	fp, #8
207f8     2B 26 0E F2 | 	cmp	local01, #43 wz
207fc     14 4E 05 A1 |  if_e	add	fp, #20
20800     A7 2A 02 AB |  if_e	rdlong	local03, fp
20804     14 4E 85 A1 |  if_e	sub	fp, #20
20808     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
2080c     3C 00 90 5D |  if_ne	jmp	#LR__2552
20810     00 26 06 F6 | 	mov	local01, #0
20814     A7 12 02 FB | 	rdlong	arg01, fp
20818     9C CF BE FD | 	call	#_convertstring
2081c     FD 28 02 F6 | 	mov	local02, result1
20820     0C 4E 05 F1 | 	add	fp, #12
20824     A7 12 02 FB | 	rdlong	arg01, fp
20828     0C 4E 85 F1 | 	sub	fp, #12
2082c     88 CF BE FD | 	call	#_convertstring
20830     FD 14 02 F6 | 	mov	arg02, result1
20834     14 13 02 F6 | 	mov	arg01, local02
20838     3C 66 B0 FD | 	call	#__system___string_cmp
2083c     00 FA 0D F2 | 	cmp	result1, #0 wz
20840     00 26 26 56 |  if_ne	not	local01, #0
20844     A7 26 62 FC | 	wrlong	local01, fp
20848     04 00 90 FD | 	jmp	#LR__2553
2084c                 | LR__2552
2084c     A7 00 68 FC | 	wrlong	#0, fp
20850                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
20850                 | LR__2553
20850     08 4E 05 F1 | 	add	fp, #8
20854     A7 38 68 FC | 	wrlong	#28, fp
20858     08 4E 85 F1 | 	sub	fp, #8
2085c     A7 12 02 F6 | 	mov	arg01, fp
20860     74 CE BE FD | 	call	#_push
20864     A7 F0 03 F6 | 	mov	ptra, fp
20868     B2 00 A0 FD | 	call	#popregs_
2086c                 | _do_ne_ret
2086c     2D 00 64 FD | 	ret
20870                 | 
20870                 | ' 
20870                 | ' '--------------------------------- OR
20870                 | ' 
20870                 | ' sub do_or 
20870                 | _do_or
20870     03 4A 05 F6 | 	mov	COUNT_, #3
20874     A8 00 A0 FD | 	call	#pushregs_
20878     18 F0 07 F1 | 	add	ptra, #24
2087c     C0 CD BE FD | 	call	#_pop
20880     FD 12 02 F6 | 	mov	arg01, result1
20884     FE 26 02 F6 | 	mov	local01, result2
20888     FF 28 02 F6 | 	mov	local02, result3
2088c     0C 4E 05 F1 | 	add	fp, #12
20890     A7 12 62 FC | 	wrlong	arg01, fp
20894     04 4E 05 F1 | 	add	fp, #4
20898     A7 26 62 FC | 	wrlong	local01, fp
2089c     04 4E 05 F1 | 	add	fp, #4
208a0     A7 28 62 FC | 	wrlong	local02, fp
208a4     14 4E 85 F1 | 	sub	fp, #20
208a8     94 CD BE FD | 	call	#_pop
208ac     FF 2A 02 F6 | 	mov	local03, result3
208b0     A7 FA 61 FC | 	wrlong	result1, fp
208b4     04 4E 05 F1 | 	add	fp, #4
208b8     A7 FC 61 FC | 	wrlong	result2, fp
208bc     04 4E 05 F1 | 	add	fp, #4
208c0     A7 2A 62 FC | 	wrlong	local03, fp
208c4                 | ' 
208c4                 | ' t2=pop()
208c4                 | ' t1=pop()
208c4                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
208c4     08 4E 85 F1 | 	sub	fp, #8
208c8     1C 2A 0E F2 | 	cmp	local03, #28 wz
208cc     A7 2A 02 AB |  if_e	rdlong	local03, fp
208d0     A7 2A 62 AC |  if_e	wrlong	local03, fp
208d4     08 4E 05 A1 |  if_e	add	fp, #8
208d8     A7 3A 68 AC |  if_e	wrlong	#29, fp
208dc     08 4E 85 A1 |  if_e	sub	fp, #8
208e0                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
208e0     14 4E 05 F1 | 	add	fp, #20
208e4     A7 2A 02 FB | 	rdlong	local03, fp
208e8     14 4E 85 F1 | 	sub	fp, #20
208ec     1C 2A 0E F2 | 	cmp	local03, #28 wz
208f0     18 00 90 5D |  if_ne	jmp	#LR__2560
208f4     0C 4E 05 F1 | 	add	fp, #12
208f8     A7 2A 02 FB | 	rdlong	local03, fp
208fc     A7 2A 62 FC | 	wrlong	local03, fp
20900     08 4E 05 F1 | 	add	fp, #8
20904     A7 3A 68 FC | 	wrlong	#29, fp
20908     14 4E 85 F1 | 	sub	fp, #20
2090c                 | LR__2560
2090c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
2090c     08 4E 05 F1 | 	add	fp, #8
20910     A7 2A 02 FB | 	rdlong	local03, fp
20914     08 4E 85 F1 | 	sub	fp, #8
20918     1F 2A 0E F2 | 	cmp	local03, #31 wz
2091c     14 4E 05 51 |  if_ne	add	fp, #20
20920     A7 28 02 5B |  if_ne	rdlong	local02, fp
20924     14 4E 85 51 |  if_ne	sub	fp, #20
20928     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
2092c     08 4E 05 51 |  if_ne	add	fp, #8
20930     A7 2A 02 5B |  if_ne	rdlong	local03, fp
20934     08 4E 85 51 |  if_ne	sub	fp, #8
20938     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
2093c     14 4E 05 51 |  if_ne	add	fp, #20
20940     14 4E 85 51 |  if_ne	sub	fp, #20
20944     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
20948     A7 0C 68 AC |  if_e	wrlong	#6, fp
2094c     08 4E 05 A1 |  if_e	add	fp, #8
20950     A7 FE 69 AC |  if_e	wrlong	#255, fp
20954     08 4E 85 A1 |  if_e	sub	fp, #8
20958     18 00 90 AD |  if_e	jmp	#LR__2561
2095c     A7 2A 02 FB | 	rdlong	local03, fp
20960     0C 4E 05 F1 | 	add	fp, #12
20964     A7 26 02 FB | 	rdlong	local01, fp
20968     0C 4E 85 F1 | 	sub	fp, #12
2096c     13 2B 42 F5 | 	or	local03, local01
20970     A7 2A 62 FC | 	wrlong	local03, fp
20974                 | LR__2561
20974     A7 12 02 F6 | 	mov	arg01, fp
20978     5C CD BE FD | 	call	#_push
2097c     A7 F0 03 F6 | 	mov	ptra, fp
20980     B2 00 A0 FD | 	call	#popregs_
20984                 | _do_or_ret
20984     2D 00 64 FD | 	ret
20988                 | 
20988                 | ' 
20988                 | ' '--------------------------------- plus (+)
20988                 | ' 
20988                 | ' sub do_plus 
20988                 | _do_plus
20988     05 4A 05 F6 | 	mov	COUNT_, #5
2098c     A8 00 A0 FD | 	call	#pushregs_
20990     18 F0 07 F1 | 	add	ptra, #24
20994     A8 CC BE FD | 	call	#_pop
20998     FD 26 02 F6 | 	mov	local01, result1
2099c     FE 28 02 F6 | 	mov	local02, result2
209a0     FF 2A 02 F6 | 	mov	local03, result3
209a4     0C 4E 05 F1 | 	add	fp, #12
209a8     A7 26 62 FC | 	wrlong	local01, fp
209ac     04 4E 05 F1 | 	add	fp, #4
209b0     A7 28 62 FC | 	wrlong	local02, fp
209b4     04 4E 05 F1 | 	add	fp, #4
209b8     A7 2A 62 FC | 	wrlong	local03, fp
209bc     14 4E 85 F1 | 	sub	fp, #20
209c0     7C CC BE FD | 	call	#_pop
209c4     FF 2A 02 F6 | 	mov	local03, result3
209c8     A7 FA 61 FC | 	wrlong	result1, fp
209cc     04 4E 05 F1 | 	add	fp, #4
209d0     A7 FC 61 FC | 	wrlong	result2, fp
209d4     04 4E 05 F1 | 	add	fp, #4
209d8     A7 2A 62 FC | 	wrlong	local03, fp
209dc                 | ' 
209dc                 | ' t2=pop()
209dc                 | ' t1=pop()
209dc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
209dc     08 4E 85 F1 | 	sub	fp, #8
209e0     1D 2A 0E F2 | 	cmp	local03, #29 wz
209e4     14 4E 05 A1 |  if_e	add	fp, #20
209e8     A7 2C 02 AB |  if_e	rdlong	local04, fp
209ec     14 4E 85 A1 |  if_e	sub	fp, #20
209f0     16 2B 02 A6 |  if_e	mov	local03, local04
209f4     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
209f8     1C 00 90 5D |  if_ne	jmp	#LR__2570
209fc     A7 26 02 FB | 	rdlong	local01, fp
20a00     0C 4E 05 F1 | 	add	fp, #12
20a04     A7 28 02 FB | 	rdlong	local02, fp
20a08     0C 4E 85 F1 | 	sub	fp, #12
20a0c     14 27 02 F1 | 	add	local01, local02
20a10     A7 26 62 FC | 	wrlong	local01, fp
20a14     48 04 90 FD | 	jmp	#LR__2585
20a18                 | LR__2570
20a18                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
20a18     08 4E 05 F1 | 	add	fp, #8
20a1c     A7 26 02 FB | 	rdlong	local01, fp
20a20     08 4E 85 F1 | 	sub	fp, #8
20a24     1D 26 0E F2 | 	cmp	local01, #29 wz
20a28     14 4E 05 A1 |  if_e	add	fp, #20
20a2c     A7 2C 02 AB |  if_e	rdlong	local04, fp
20a30     14 4E 85 A1 |  if_e	sub	fp, #20
20a34     16 2B 02 A6 |  if_e	mov	local03, local04
20a38     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
20a3c     28 00 90 5D |  if_ne	jmp	#LR__2571
20a40     A7 26 02 FB | 	rdlong	local01, fp
20a44     0C 4E 05 F1 | 	add	fp, #12
20a48     A7 28 02 FB | 	rdlong	local02, fp
20a4c     0C 4E 85 F1 | 	sub	fp, #12
20a50     14 27 02 F1 | 	add	local01, local02
20a54     A7 26 62 FC | 	wrlong	local01, fp
20a58     08 4E 05 F1 | 	add	fp, #8
20a5c     A7 38 68 FC | 	wrlong	#28, fp
20a60     08 4E 85 F1 | 	sub	fp, #8
20a64     F8 03 90 FD | 	jmp	#LR__2585
20a68                 | LR__2571
20a68                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
20a68     08 4E 05 F1 | 	add	fp, #8
20a6c     A7 26 02 FB | 	rdlong	local01, fp
20a70     08 4E 85 F1 | 	sub	fp, #8
20a74     1D 26 0E F2 | 	cmp	local01, #29 wz
20a78     14 4E 05 A1 |  if_e	add	fp, #20
20a7c     A7 2C 02 AB |  if_e	rdlong	local04, fp
20a80     14 4E 85 A1 |  if_e	sub	fp, #20
20a84     16 2B 02 A6 |  if_e	mov	local03, local04
20a88     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
20a8c     30 00 90 5D |  if_ne	jmp	#LR__2572
20a90     A7 12 02 FB | 	rdlong	arg01, fp
20a94     2C 8E B0 FD | 	call	#__system___float_fromuns
20a98     FD 12 02 F6 | 	mov	arg01, result1
20a9c     0C 4E 05 F1 | 	add	fp, #12
20aa0     A7 14 02 FB | 	rdlong	arg02, fp
20aa4     0C 4E 85 F1 | 	sub	fp, #12
20aa8     4C 8E B0 FD | 	call	#__system___float_add
20aac     A7 FA 61 FC | 	wrlong	result1, fp
20ab0     08 4E 05 F1 | 	add	fp, #8
20ab4     A7 3C 68 FC | 	wrlong	#30, fp
20ab8     08 4E 85 F1 | 	sub	fp, #8
20abc     A0 03 90 FD | 	jmp	#LR__2585
20ac0                 | LR__2572
20ac0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
20ac0     08 4E 05 F1 | 	add	fp, #8
20ac4     A7 26 02 FB | 	rdlong	local01, fp
20ac8     08 4E 85 F1 | 	sub	fp, #8
20acc     1C 26 0E F2 | 	cmp	local01, #28 wz
20ad0     14 4E 05 A1 |  if_e	add	fp, #20
20ad4     A7 2C 02 AB |  if_e	rdlong	local04, fp
20ad8     14 4E 85 A1 |  if_e	sub	fp, #20
20adc     16 2B 02 A6 |  if_e	mov	local03, local04
20ae0     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
20ae4     1C 00 90 5D |  if_ne	jmp	#LR__2573
20ae8     A7 26 02 FB | 	rdlong	local01, fp
20aec     0C 4E 05 F1 | 	add	fp, #12
20af0     A7 28 02 FB | 	rdlong	local02, fp
20af4     0C 4E 85 F1 | 	sub	fp, #12
20af8     14 27 02 F1 | 	add	local01, local02
20afc     A7 26 62 FC | 	wrlong	local01, fp
20b00     5C 03 90 FD | 	jmp	#LR__2585
20b04                 | LR__2573
20b04                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
20b04     08 4E 05 F1 | 	add	fp, #8
20b08     A7 26 02 FB | 	rdlong	local01, fp
20b0c     08 4E 85 F1 | 	sub	fp, #8
20b10     1C 26 0E F2 | 	cmp	local01, #28 wz
20b14     14 4E 05 A1 |  if_e	add	fp, #20
20b18     A7 2C 02 AB |  if_e	rdlong	local04, fp
20b1c     14 4E 85 A1 |  if_e	sub	fp, #20
20b20     16 2B 02 A6 |  if_e	mov	local03, local04
20b24     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
20b28     1C 00 90 5D |  if_ne	jmp	#LR__2574
20b2c     A7 26 02 FB | 	rdlong	local01, fp
20b30     0C 4E 05 F1 | 	add	fp, #12
20b34     A7 28 02 FB | 	rdlong	local02, fp
20b38     0C 4E 85 F1 | 	sub	fp, #12
20b3c     14 27 02 F1 | 	add	local01, local02
20b40     A7 26 62 FC | 	wrlong	local01, fp
20b44     18 03 90 FD | 	jmp	#LR__2585
20b48                 | LR__2574
20b48                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
20b48     08 4E 05 F1 | 	add	fp, #8
20b4c     A7 26 02 FB | 	rdlong	local01, fp
20b50     08 4E 85 F1 | 	sub	fp, #8
20b54     1C 26 0E F2 | 	cmp	local01, #28 wz
20b58     14 4E 05 A1 |  if_e	add	fp, #20
20b5c     A7 2C 02 AB |  if_e	rdlong	local04, fp
20b60     14 4E 85 A1 |  if_e	sub	fp, #20
20b64     16 2B 02 A6 |  if_e	mov	local03, local04
20b68     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
20b6c     40 00 90 5D |  if_ne	jmp	#LR__2575
20b70     A7 12 02 FB | 	rdlong	arg01, fp
20b74     09 13 52 F6 | 	abs	arg01, arg01 wc
20b78     1F 2E C6 C9 |  if_b	decod	local05, #31
20b7c     00 2E 06 36 |  if_ae	mov	local05, #0
20b80     40 8D B0 FD | 	call	#__system___float_fromuns
20b84     17 FB 61 F5 | 	xor	result1, local05
20b88     FD 12 02 F6 | 	mov	arg01, result1
20b8c     0C 4E 05 F1 | 	add	fp, #12
20b90     A7 14 02 FB | 	rdlong	arg02, fp
20b94     0C 4E 85 F1 | 	sub	fp, #12
20b98     5C 8D B0 FD | 	call	#__system___float_add
20b9c     A7 FA 61 FC | 	wrlong	result1, fp
20ba0     08 4E 05 F1 | 	add	fp, #8
20ba4     A7 3C 68 FC | 	wrlong	#30, fp
20ba8     08 4E 85 F1 | 	sub	fp, #8
20bac     B0 02 90 FD | 	jmp	#LR__2585
20bb0                 | LR__2575
20bb0                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
20bb0     08 4E 05 F1 | 	add	fp, #8
20bb4     A7 26 02 FB | 	rdlong	local01, fp
20bb8     08 4E 85 F1 | 	sub	fp, #8
20bbc     1E 26 0E F2 | 	cmp	local01, #30 wz
20bc0     14 4E 05 A1 |  if_e	add	fp, #20
20bc4     A7 2C 02 AB |  if_e	rdlong	local04, fp
20bc8     14 4E 85 A1 |  if_e	sub	fp, #20
20bcc     16 2B 02 A6 |  if_e	mov	local03, local04
20bd0     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
20bd4     28 00 90 5D |  if_ne	jmp	#LR__2576
20bd8     A7 26 02 FB | 	rdlong	local01, fp
20bdc     0C 4E 05 F1 | 	add	fp, #12
20be0     A7 12 02 FB | 	rdlong	arg01, fp
20be4     0C 4E 85 F1 | 	sub	fp, #12
20be8     D8 8C B0 FD | 	call	#__system___float_fromuns
20bec     FD 14 02 F6 | 	mov	arg02, result1
20bf0     13 13 02 F6 | 	mov	arg01, local01
20bf4     00 8D B0 FD | 	call	#__system___float_add
20bf8     A7 FA 61 FC | 	wrlong	result1, fp
20bfc     60 02 90 FD | 	jmp	#LR__2585
20c00                 | LR__2576
20c00                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
20c00     08 4E 05 F1 | 	add	fp, #8
20c04     A7 26 02 FB | 	rdlong	local01, fp
20c08     08 4E 85 F1 | 	sub	fp, #8
20c0c     1E 26 0E F2 | 	cmp	local01, #30 wz
20c10     14 4E 05 A1 |  if_e	add	fp, #20
20c14     A7 2C 02 AB |  if_e	rdlong	local04, fp
20c18     14 4E 85 A1 |  if_e	sub	fp, #20
20c1c     16 2B 02 A6 |  if_e	mov	local03, local04
20c20     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
20c24     38 00 90 5D |  if_ne	jmp	#LR__2577
20c28     A7 26 02 FB | 	rdlong	local01, fp
20c2c     0C 4E 05 F1 | 	add	fp, #12
20c30     A7 12 02 FB | 	rdlong	arg01, fp
20c34     0C 4E 85 F1 | 	sub	fp, #12
20c38     09 13 52 F6 | 	abs	arg01, arg01 wc
20c3c     1F 2E C6 C9 |  if_b	decod	local05, #31
20c40     00 2E 06 36 |  if_ae	mov	local05, #0
20c44     7C 8C B0 FD | 	call	#__system___float_fromuns
20c48     17 FB 61 F5 | 	xor	result1, local05
20c4c     FD 14 02 F6 | 	mov	arg02, result1
20c50     13 13 02 F6 | 	mov	arg01, local01
20c54     A0 8C B0 FD | 	call	#__system___float_add
20c58     A7 FA 61 FC | 	wrlong	result1, fp
20c5c     00 02 90 FD | 	jmp	#LR__2585
20c60                 | LR__2577
20c60                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
20c60     08 4E 05 F1 | 	add	fp, #8
20c64     A7 26 02 FB | 	rdlong	local01, fp
20c68     08 4E 85 F1 | 	sub	fp, #8
20c6c     1E 26 0E F2 | 	cmp	local01, #30 wz
20c70     14 4E 05 A1 |  if_e	add	fp, #20
20c74     A7 2C 02 AB |  if_e	rdlong	local04, fp
20c78     14 4E 85 A1 |  if_e	sub	fp, #20
20c7c     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
20c80     1C 00 90 5D |  if_ne	jmp	#LR__2578
20c84     A7 12 02 FB | 	rdlong	arg01, fp
20c88     0C 4E 05 F1 | 	add	fp, #12
20c8c     A7 14 02 FB | 	rdlong	arg02, fp
20c90     0C 4E 85 F1 | 	sub	fp, #12
20c94     60 8C B0 FD | 	call	#__system___float_add
20c98     A7 FA 61 FC | 	wrlong	result1, fp
20c9c     C0 01 90 FD | 	jmp	#LR__2585
20ca0                 | LR__2578
20ca0                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
20ca0     08 4E 05 F1 | 	add	fp, #8
20ca4     A7 26 02 FB | 	rdlong	local01, fp
20ca8     08 4E 85 F1 | 	sub	fp, #8
20cac     1F 26 0E F2 | 	cmp	local01, #31 wz
20cb0     24 00 90 5D |  if_ne	jmp	#LR__2579
20cb4     14 4E 05 F1 | 	add	fp, #20
20cb8     A7 2A 02 FB | 	rdlong	local03, fp
20cbc     14 4E 85 F1 | 	sub	fp, #20
20cc0     1F 2A 0E F2 | 	cmp	local03, #31 wz
20cc4     A7 04 68 5C |  if_ne	wrlong	#2, fp
20cc8     08 4E 05 51 |  if_ne	add	fp, #8
20ccc     A7 FE 69 5C |  if_ne	wrlong	#255, fp
20cd0     08 4E 85 51 |  if_ne	sub	fp, #8
20cd4     88 01 90 5D |  if_ne	jmp	#LR__2585
20cd8                 | LR__2579
20cd8                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
20cd8     14 4E 05 F1 | 	add	fp, #20
20cdc     A7 26 02 FB | 	rdlong	local01, fp
20ce0     14 4E 85 F1 | 	sub	fp, #20
20ce4     1F 26 0E F2 | 	cmp	local01, #31 wz
20ce8     24 00 90 5D |  if_ne	jmp	#LR__2580
20cec     08 4E 05 F1 | 	add	fp, #8
20cf0     A7 2A 02 FB | 	rdlong	local03, fp
20cf4     08 4E 85 F1 | 	sub	fp, #8
20cf8     1F 2A 0E F2 | 	cmp	local03, #31 wz
20cfc     A7 04 68 5C |  if_ne	wrlong	#2, fp
20d00     08 4E 05 51 |  if_ne	add	fp, #8
20d04     A7 FE 69 5C |  if_ne	wrlong	#255, fp
20d08     08 4E 85 51 |  if_ne	sub	fp, #8
20d0c     50 01 90 5D |  if_ne	jmp	#LR__2585
20d10                 | LR__2580
20d10                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
20d10     08 4E 05 F1 | 	add	fp, #8
20d14     A7 26 02 FB | 	rdlong	local01, fp
20d18     08 4E 85 F1 | 	sub	fp, #8
20d1c     1F 26 0E F2 | 	cmp	local01, #31 wz
20d20     14 4E 05 A1 |  if_e	add	fp, #20
20d24     A7 2A 02 AB |  if_e	rdlong	local03, fp
20d28     14 4E 85 A1 |  if_e	sub	fp, #20
20d2c     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
20d30     1C 00 90 5D |  if_ne	jmp	#LR__2581
20d34     A7 12 02 FB | 	rdlong	arg01, fp
20d38     0C 4E 05 F1 | 	add	fp, #12
20d3c     A7 14 02 FB | 	rdlong	arg02, fp
20d40     0C 4E 85 F1 | 	sub	fp, #12
20d44     64 61 B0 FD | 	call	#__system___string_concat
20d48     A7 FA 61 FC | 	wrlong	result1, fp
20d4c     10 01 90 FD | 	jmp	#LR__2585
20d50                 | LR__2581
20d50                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.sresult=convertstring(t1.result.uresult)+t2.result.sresult : t1.result_type=result_string:goto 1040
20d50     08 4E 05 F1 | 	add	fp, #8
20d54     A7 26 02 FB | 	rdlong	local01, fp
20d58     08 4E 85 F1 | 	sub	fp, #8
20d5c     2B 26 0E F2 | 	cmp	local01, #43 wz
20d60     14 4E 05 A1 |  if_e	add	fp, #20
20d64     A7 2A 02 AB |  if_e	rdlong	local03, fp
20d68     14 4E 85 A1 |  if_e	sub	fp, #20
20d6c     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
20d70     30 00 90 5D |  if_ne	jmp	#LR__2582
20d74     A7 12 02 FB | 	rdlong	arg01, fp
20d78     3C CA BE FD | 	call	#_convertstring
20d7c     FD 12 02 F6 | 	mov	arg01, result1
20d80     0C 4E 05 F1 | 	add	fp, #12
20d84     A7 14 02 FB | 	rdlong	arg02, fp
20d88     0C 4E 85 F1 | 	sub	fp, #12
20d8c     1C 61 B0 FD | 	call	#__system___string_concat
20d90     A7 FA 61 FC | 	wrlong	result1, fp
20d94     08 4E 05 F1 | 	add	fp, #8
20d98     A7 3E 68 FC | 	wrlong	#31, fp
20d9c     08 4E 85 F1 | 	sub	fp, #8
20da0     BC 00 90 FD | 	jmp	#LR__2585
20da4                 | LR__2582
20da4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.sresult=t1.result.sresult+convertstring(t2.result.uresult) :goto 1040
20da4     08 4E 05 F1 | 	add	fp, #8
20da8     A7 26 02 FB | 	rdlong	local01, fp
20dac     08 4E 85 F1 | 	sub	fp, #8
20db0     1F 26 0E F2 | 	cmp	local01, #31 wz
20db4     14 4E 05 A1 |  if_e	add	fp, #20
20db8     A7 2A 02 AB |  if_e	rdlong	local03, fp
20dbc     14 4E 85 A1 |  if_e	sub	fp, #20
20dc0     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
20dc4     28 00 90 5D |  if_ne	jmp	#LR__2583
20dc8     A7 26 02 FB | 	rdlong	local01, fp
20dcc     0C 4E 05 F1 | 	add	fp, #12
20dd0     A7 12 02 FB | 	rdlong	arg01, fp
20dd4     0C 4E 85 F1 | 	sub	fp, #12
20dd8     DC C9 BE FD | 	call	#_convertstring
20ddc     FD 14 02 F6 | 	mov	arg02, result1
20de0     13 13 02 F6 | 	mov	arg01, local01
20de4     C4 60 B0 FD | 	call	#__system___string_concat
20de8     A7 FA 61 FC | 	wrlong	result1, fp
20dec     70 00 90 FD | 	jmp	#LR__2585
20df0                 | LR__2583
20df0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)+convertstring(t2.result.uresult) : t1.result_type=result_string :goto 1040
20df0     08 4E 05 F1 | 	add	fp, #8
20df4     A7 26 02 FB | 	rdlong	local01, fp
20df8     08 4E 85 F1 | 	sub	fp, #8
20dfc     2B 26 0E F2 | 	cmp	local01, #43 wz
20e00     14 4E 05 A1 |  if_e	add	fp, #20
20e04     A7 2A 02 AB |  if_e	rdlong	local03, fp
20e08     14 4E 85 A1 |  if_e	sub	fp, #20
20e0c     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
20e10     3C 00 90 5D |  if_ne	jmp	#LR__2584
20e14     A7 12 02 FB | 	rdlong	arg01, fp
20e18     9C C9 BE FD | 	call	#_convertstring
20e1c     FD 26 02 F6 | 	mov	local01, result1
20e20     0C 4E 05 F1 | 	add	fp, #12
20e24     A7 12 02 FB | 	rdlong	arg01, fp
20e28     0C 4E 85 F1 | 	sub	fp, #12
20e2c     88 C9 BE FD | 	call	#_convertstring
20e30     FD 14 02 F6 | 	mov	arg02, result1
20e34     13 13 02 F6 | 	mov	arg01, local01
20e38     70 60 B0 FD | 	call	#__system___string_concat
20e3c     A7 FA 61 FC | 	wrlong	result1, fp
20e40     08 4E 05 F1 | 	add	fp, #8
20e44     A7 3E 68 FC | 	wrlong	#31, fp
20e48     08 4E 85 F1 | 	sub	fp, #8
20e4c     10 00 90 FD | 	jmp	#LR__2585
20e50                 | LR__2584
20e50     A7 08 68 FC | 	wrlong	#4, fp
20e54     08 4E 05 F1 | 	add	fp, #8
20e58     A7 FE 69 FC | 	wrlong	#255, fp
20e5c     08 4E 85 F1 | 	sub	fp, #8
20e60                 | LR__2585
20e60     A7 12 02 F6 | 	mov	arg01, fp
20e64     70 C8 BE FD | 	call	#_push
20e68     A7 F0 03 F6 | 	mov	ptra, fp
20e6c     B2 00 A0 FD | 	call	#popregs_
20e70                 | _do_plus_ret
20e70     2D 00 64 FD | 	ret
20e74                 | 
20e74                 | ' 
20e74                 | ' '--------------------------------- power (^)
20e74                 | ' 
20e74                 | ' sub do_power 
20e74                 | _do_power
20e74     02 4A 05 F6 | 	mov	COUNT_, #2
20e78     A8 00 A0 FD | 	call	#pushregs_
20e7c     18 F0 07 F1 | 	add	ptra, #24
20e80     BC C7 BE FD | 	call	#_pop
20e84     FD 14 02 F6 | 	mov	arg02, result1
20e88     FE 12 02 F6 | 	mov	arg01, result2
20e8c     FF 26 02 F6 | 	mov	local01, result3
20e90     0C 4E 05 F1 | 	add	fp, #12
20e94     A7 14 62 FC | 	wrlong	arg02, fp
20e98     04 4E 05 F1 | 	add	fp, #4
20e9c     A7 12 62 FC | 	wrlong	arg01, fp
20ea0     04 4E 05 F1 | 	add	fp, #4
20ea4     A7 26 62 FC | 	wrlong	local01, fp
20ea8     14 4E 85 F1 | 	sub	fp, #20
20eac     90 C7 BE FD | 	call	#_pop
20eb0     A7 FA 61 FC | 	wrlong	result1, fp
20eb4     04 4E 05 F1 | 	add	fp, #4
20eb8     A7 FC 61 FC | 	wrlong	result2, fp
20ebc     04 4E 05 F1 | 	add	fp, #4
20ec0     A7 FE 61 FC | 	wrlong	result3, fp
20ec4                 | ' 
20ec4                 | ' t2=pop()
20ec4                 | ' t1=pop()
20ec4                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
20ec4     08 4E 85 F1 | 	sub	fp, #8
20ec8     1F FE 0D F2 | 	cmp	result3, #31 wz
20ecc     14 4E 05 51 |  if_ne	add	fp, #20
20ed0     A7 26 02 5B |  if_ne	rdlong	local01, fp
20ed4     14 4E 85 51 |  if_ne	sub	fp, #20
20ed8     1F 26 0E 52 |  if_ne	cmp	local01, #31 wz
20edc     A7 18 68 AC |  if_e	wrlong	#12, fp
20ee0     08 4E 05 A1 |  if_e	add	fp, #8
20ee4     A7 FE 69 AC |  if_e	wrlong	#255, fp
20ee8     08 4E 85 A1 |  if_e	sub	fp, #8
20eec     38 01 90 AD |  if_e	jmp	#LR__2595
20ef0                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
20ef0     08 4E 05 F1 | 	add	fp, #8
20ef4     A7 14 02 FB | 	rdlong	arg02, fp
20ef8     08 4E 85 F1 | 	sub	fp, #8
20efc     1C 14 0E F2 | 	cmp	arg02, #28 wz
20f00     28 00 90 5D |  if_ne	jmp	#LR__2590
20f04     08 4E 05 F1 | 	add	fp, #8
20f08     A7 3C 68 FC | 	wrlong	#30, fp
20f0c     08 4E 85 F1 | 	sub	fp, #8
20f10     A7 12 02 FB | 	rdlong	arg01, fp
20f14     09 13 52 F6 | 	abs	arg01, arg01 wc
20f18     1F 28 C6 C9 |  if_b	decod	local02, #31
20f1c     00 28 06 36 |  if_ae	mov	local02, #0
20f20     A0 89 B0 FD | 	call	#__system___float_fromuns
20f24     14 FB 61 F5 | 	xor	result1, local02
20f28     A7 FA 61 FC | 	wrlong	result1, fp
20f2c                 | LR__2590
20f2c                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
20f2c     08 4E 05 F1 | 	add	fp, #8
20f30     A7 14 02 FB | 	rdlong	arg02, fp
20f34     08 4E 85 F1 | 	sub	fp, #8
20f38     1D 14 0E F2 | 	cmp	arg02, #29 wz
20f3c     18 00 90 5D |  if_ne	jmp	#LR__2591
20f40     08 4E 05 F1 | 	add	fp, #8
20f44     A7 3C 68 FC | 	wrlong	#30, fp
20f48     08 4E 85 F1 | 	sub	fp, #8
20f4c     A7 12 02 FB | 	rdlong	arg01, fp
20f50     70 89 B0 FD | 	call	#__system___float_fromuns
20f54     A7 FA 61 FC | 	wrlong	result1, fp
20f58                 | LR__2591
20f58                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
20f58     14 4E 05 F1 | 	add	fp, #20
20f5c     A7 14 02 FB | 	rdlong	arg02, fp
20f60     14 4E 85 F1 | 	sub	fp, #20
20f64     1C 14 0E F2 | 	cmp	arg02, #28 wz
20f68     34 00 90 5D |  if_ne	jmp	#LR__2592
20f6c     14 4E 05 F1 | 	add	fp, #20
20f70     A7 3C 68 FC | 	wrlong	#30, fp
20f74     08 4E 85 F1 | 	sub	fp, #8
20f78     A7 12 02 FB | 	rdlong	arg01, fp
20f7c     0C 4E 85 F1 | 	sub	fp, #12
20f80     09 13 52 F6 | 	abs	arg01, arg01 wc
20f84     1F 28 C6 C9 |  if_b	decod	local02, #31
20f88     00 28 06 36 |  if_ae	mov	local02, #0
20f8c     34 89 B0 FD | 	call	#__system___float_fromuns
20f90     14 FB 61 F5 | 	xor	result1, local02
20f94     0C 4E 05 F1 | 	add	fp, #12
20f98     A7 FA 61 FC | 	wrlong	result1, fp
20f9c     0C 4E 85 F1 | 	sub	fp, #12
20fa0                 | LR__2592
20fa0                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
20fa0     14 4E 05 F1 | 	add	fp, #20
20fa4     A7 14 02 FB | 	rdlong	arg02, fp
20fa8     14 4E 85 F1 | 	sub	fp, #20
20fac     1D 14 0E F2 | 	cmp	arg02, #29 wz
20fb0     24 00 90 5D |  if_ne	jmp	#LR__2593
20fb4     14 4E 05 F1 | 	add	fp, #20
20fb8     A7 3C 68 FC | 	wrlong	#30, fp
20fbc     08 4E 85 F1 | 	sub	fp, #8
20fc0     A7 12 02 FB | 	rdlong	arg01, fp
20fc4     0C 4E 85 F1 | 	sub	fp, #12
20fc8     F8 88 B0 FD | 	call	#__system___float_fromuns
20fcc     0C 4E 05 F1 | 	add	fp, #12
20fd0     A7 FA 61 FC | 	wrlong	result1, fp
20fd4     0C 4E 85 F1 | 	sub	fp, #12
20fd8                 | LR__2593
20fd8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
20fd8     08 4E 05 F1 | 	add	fp, #8
20fdc     A7 14 02 FB | 	rdlong	arg02, fp
20fe0     08 4E 85 F1 | 	sub	fp, #8
20fe4     1E 14 0E F2 | 	cmp	arg02, #30 wz
20fe8     14 4E 05 A1 |  if_e	add	fp, #20
20fec     A7 26 02 AB |  if_e	rdlong	local01, fp
20ff0     14 4E 85 A1 |  if_e	sub	fp, #20
20ff4     1E 26 0E A2 |  if_e	cmp	local01, #30 wz
20ff8     1C 00 90 5D |  if_ne	jmp	#LR__2594
20ffc     A7 12 02 FB | 	rdlong	arg01, fp
21000     0C 4E 05 F1 | 	add	fp, #12
21004     A7 14 02 FB | 	rdlong	arg02, fp
21008     0C 4E 85 F1 | 	sub	fp, #12
2100c     C0 9B B0 FD | 	call	#__system____builtin_powf
21010     A7 FA 61 FC | 	wrlong	result1, fp
21014     10 00 90 FD | 	jmp	#LR__2595
21018                 | LR__2594
21018     A7 1A 68 FC | 	wrlong	#13, fp
2101c     08 4E 05 F1 | 	add	fp, #8
21020     A7 FE 69 FC | 	wrlong	#255, fp
21024     08 4E 85 F1 | 	sub	fp, #8
21028                 | LR__2595
21028     A7 12 02 F6 | 	mov	arg01, fp
2102c     A8 C6 BE FD | 	call	#_push
21030     A7 F0 03 F6 | 	mov	ptra, fp
21034     B2 00 A0 FD | 	call	#popregs_
21038                 | _do_power_ret
21038     2D 00 64 FD | 	ret
2103c                 | 
2103c                 | ' 
2103c                 | ' '--------------------------------- SHL
2103c                 | ' 
2103c                 | ' sub do_shl 
2103c                 | _do_shl
2103c     03 4A 05 F6 | 	mov	COUNT_, #3
21040     A8 00 A0 FD | 	call	#pushregs_
21044     18 F0 07 F1 | 	add	ptra, #24
21048     F4 C5 BE FD | 	call	#_pop
2104c     FD 12 02 F6 | 	mov	arg01, result1
21050     FE 26 02 F6 | 	mov	local01, result2
21054     FF 28 02 F6 | 	mov	local02, result3
21058     0C 4E 05 F1 | 	add	fp, #12
2105c     A7 12 62 FC | 	wrlong	arg01, fp
21060     04 4E 05 F1 | 	add	fp, #4
21064     A7 26 62 FC | 	wrlong	local01, fp
21068     04 4E 05 F1 | 	add	fp, #4
2106c     A7 28 62 FC | 	wrlong	local02, fp
21070     14 4E 85 F1 | 	sub	fp, #20
21074     C8 C5 BE FD | 	call	#_pop
21078     FF 2A 02 F6 | 	mov	local03, result3
2107c     A7 FA 61 FC | 	wrlong	result1, fp
21080     04 4E 05 F1 | 	add	fp, #4
21084     A7 FC 61 FC | 	wrlong	result2, fp
21088     04 4E 05 F1 | 	add	fp, #4
2108c     A7 2A 62 FC | 	wrlong	local03, fp
21090                 | ' 
21090                 | ' t2=pop()
21090                 | ' t1=pop()
21090                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
21090     08 4E 85 F1 | 	sub	fp, #8
21094     1C 2A 0E F2 | 	cmp	local03, #28 wz
21098     A7 2A 02 AB |  if_e	rdlong	local03, fp
2109c     A7 2A 62 AC |  if_e	wrlong	local03, fp
210a0     08 4E 05 A1 |  if_e	add	fp, #8
210a4     A7 3A 68 AC |  if_e	wrlong	#29, fp
210a8     08 4E 85 A1 |  if_e	sub	fp, #8
210ac                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
210ac     14 4E 05 F1 | 	add	fp, #20
210b0     A7 2A 02 FB | 	rdlong	local03, fp
210b4     14 4E 85 F1 | 	sub	fp, #20
210b8     1C 2A 0E F2 | 	cmp	local03, #28 wz
210bc     18 00 90 5D |  if_ne	jmp	#LR__2600
210c0     0C 4E 05 F1 | 	add	fp, #12
210c4     A7 2A 02 FB | 	rdlong	local03, fp
210c8     A7 2A 62 FC | 	wrlong	local03, fp
210cc     08 4E 05 F1 | 	add	fp, #8
210d0     A7 3A 68 FC | 	wrlong	#29, fp
210d4     14 4E 85 F1 | 	sub	fp, #20
210d8                 | LR__2600
210d8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
210d8     08 4E 05 F1 | 	add	fp, #8
210dc     A7 2A 02 FB | 	rdlong	local03, fp
210e0     08 4E 85 F1 | 	sub	fp, #8
210e4     1F 2A 0E F2 | 	cmp	local03, #31 wz
210e8     14 4E 05 51 |  if_ne	add	fp, #20
210ec     A7 28 02 5B |  if_ne	rdlong	local02, fp
210f0     14 4E 85 51 |  if_ne	sub	fp, #20
210f4     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
210f8     08 4E 05 51 |  if_ne	add	fp, #8
210fc     A7 2A 02 5B |  if_ne	rdlong	local03, fp
21100     08 4E 85 51 |  if_ne	sub	fp, #8
21104     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
21108     14 4E 05 51 |  if_ne	add	fp, #20
2110c     14 4E 85 51 |  if_ne	sub	fp, #20
21110     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
21114     A7 0C 68 AC |  if_e	wrlong	#6, fp
21118     08 4E 05 A1 |  if_e	add	fp, #8
2111c     A7 FE 69 AC |  if_e	wrlong	#255, fp
21120     08 4E 85 A1 |  if_e	sub	fp, #8
21124     18 00 90 AD |  if_e	jmp	#LR__2601
21128     A7 2A 02 FB | 	rdlong	local03, fp
2112c     0C 4E 05 F1 | 	add	fp, #12
21130     A7 26 02 FB | 	rdlong	local01, fp
21134     0C 4E 85 F1 | 	sub	fp, #12
21138     13 2B 62 F0 | 	shl	local03, local01
2113c     A7 2A 62 FC | 	wrlong	local03, fp
21140                 | LR__2601
21140     A7 12 02 F6 | 	mov	arg01, fp
21144     90 C5 BE FD | 	call	#_push
21148     A7 F0 03 F6 | 	mov	ptra, fp
2114c     B2 00 A0 FD | 	call	#popregs_
21150                 | _do_shl_ret
21150     2D 00 64 FD | 	ret
21154                 | 
21154                 | ' 
21154                 | ' '--------------------------------- SHR
21154                 | ' 
21154                 | ' sub do_shr 
21154                 | _do_shr
21154     03 4A 05 F6 | 	mov	COUNT_, #3
21158     A8 00 A0 FD | 	call	#pushregs_
2115c     18 F0 07 F1 | 	add	ptra, #24
21160     DC C4 BE FD | 	call	#_pop
21164     FD 12 02 F6 | 	mov	arg01, result1
21168     FE 26 02 F6 | 	mov	local01, result2
2116c     FF 28 02 F6 | 	mov	local02, result3
21170     0C 4E 05 F1 | 	add	fp, #12
21174     A7 12 62 FC | 	wrlong	arg01, fp
21178     04 4E 05 F1 | 	add	fp, #4
2117c     A7 26 62 FC | 	wrlong	local01, fp
21180     04 4E 05 F1 | 	add	fp, #4
21184     A7 28 62 FC | 	wrlong	local02, fp
21188     14 4E 85 F1 | 	sub	fp, #20
2118c     B0 C4 BE FD | 	call	#_pop
21190     FF 2A 02 F6 | 	mov	local03, result3
21194     A7 FA 61 FC | 	wrlong	result1, fp
21198     04 4E 05 F1 | 	add	fp, #4
2119c     A7 FC 61 FC | 	wrlong	result2, fp
211a0     04 4E 05 F1 | 	add	fp, #4
211a4     A7 2A 62 FC | 	wrlong	local03, fp
211a8                 | ' 
211a8                 | ' t2=pop()
211a8                 | ' t1=pop()
211a8                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
211a8     08 4E 85 F1 | 	sub	fp, #8
211ac     1C 2A 0E F2 | 	cmp	local03, #28 wz
211b0     A7 2A 02 AB |  if_e	rdlong	local03, fp
211b4     A7 2A 62 AC |  if_e	wrlong	local03, fp
211b8     08 4E 05 A1 |  if_e	add	fp, #8
211bc     A7 3A 68 AC |  if_e	wrlong	#29, fp
211c0     08 4E 85 A1 |  if_e	sub	fp, #8
211c4                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
211c4     14 4E 05 F1 | 	add	fp, #20
211c8     A7 2A 02 FB | 	rdlong	local03, fp
211cc     14 4E 85 F1 | 	sub	fp, #20
211d0     1C 2A 0E F2 | 	cmp	local03, #28 wz
211d4     18 00 90 5D |  if_ne	jmp	#LR__2610
211d8     0C 4E 05 F1 | 	add	fp, #12
211dc     A7 2A 02 FB | 	rdlong	local03, fp
211e0     A7 2A 62 FC | 	wrlong	local03, fp
211e4     08 4E 05 F1 | 	add	fp, #8
211e8     A7 3A 68 FC | 	wrlong	#29, fp
211ec     14 4E 85 F1 | 	sub	fp, #20
211f0                 | LR__2610
211f0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
211f0     08 4E 05 F1 | 	add	fp, #8
211f4     A7 2A 02 FB | 	rdlong	local03, fp
211f8     08 4E 85 F1 | 	sub	fp, #8
211fc     1F 2A 0E F2 | 	cmp	local03, #31 wz
21200     14 4E 05 51 |  if_ne	add	fp, #20
21204     A7 28 02 5B |  if_ne	rdlong	local02, fp
21208     14 4E 85 51 |  if_ne	sub	fp, #20
2120c     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
21210     08 4E 05 51 |  if_ne	add	fp, #8
21214     A7 2A 02 5B |  if_ne	rdlong	local03, fp
21218     08 4E 85 51 |  if_ne	sub	fp, #8
2121c     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
21220     14 4E 05 51 |  if_ne	add	fp, #20
21224     14 4E 85 51 |  if_ne	sub	fp, #20
21228     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
2122c     A7 0C 68 AC |  if_e	wrlong	#6, fp
21230     08 4E 05 A1 |  if_e	add	fp, #8
21234     A7 FE 69 AC |  if_e	wrlong	#255, fp
21238     08 4E 85 A1 |  if_e	sub	fp, #8
2123c     18 00 90 AD |  if_e	jmp	#LR__2611
21240     A7 2A 02 FB | 	rdlong	local03, fp
21244     0C 4E 05 F1 | 	add	fp, #12
21248     A7 26 02 FB | 	rdlong	local01, fp
2124c     0C 4E 85 F1 | 	sub	fp, #12
21250     13 2B 42 F0 | 	shr	local03, local01
21254     A7 2A 62 FC | 	wrlong	local03, fp
21258                 | LR__2611
21258     A7 12 02 F6 | 	mov	arg01, fp
2125c     78 C4 BE FD | 	call	#_push
21260     A7 F0 03 F6 | 	mov	ptra, fp
21264     B2 00 A0 FD | 	call	#popregs_
21268                 | _do_shr_ret
21268     2D 00 64 FD | 	ret
2126c                 | 
2126c                 | ' 
2126c                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
2126c                 | ' 
2126c                 | ' ''----------------------------------------------------------------------------------------------------
2126c                 | ' ''------------------ Initialization procedures and helper procedures ---------------------------------
2126c                 | ' ''----------------------------------------------------------------------------------------------------
2126c                 | ' 
2126c                 | ' ''--------------------------- Command function pointers
2126c                 | ' 
2126c                 | ' sub init_commands
2126c                 | _init_commands
2126c                 | ' 
2126c                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
2126c     00 00 06 F6 | 	mov	_var01, #0
21270     97 16 48 FB | 	callpa	#(@LR__2621-@LR__2620)>>2,fcache_load_ptr_
21274                 | LR__2620
21274     00 FB 01 F6 | 	mov	result1, _var01
21278     02 FA 65 F0 | 	shl	result1, #2
2127c     43 00 00 FF 
21280     60 E4 05 F1 | 	add	objptr, ##34400
21284     F2 FA 01 F1 | 	add	result1, objptr
21288     43 00 00 FF 
2128c     60 E4 85 F1 | 	sub	objptr, ##34400
21290     FD E4 61 FC | 	wrlong	objptr, result1
21294     01 00 06 F1 | 	add	_var01, #1
21298     00 01 56 F2 | 	cmps	_var01, #256 wc
2129c     D4 FF 9F CD |  if_b	jmp	#LR__2620
212a0                 | LR__2621
212a0     F2 FA 01 F6 | 	mov	result1, objptr
212a4     14 FA 25 F4 | 	bith	result1, #20
212a8     43 00 00 FF 
212ac     64 E4 05 F1 | 	add	objptr, ##34404
212b0     F2 FA 61 FC | 	wrlong	result1, objptr
212b4     43 00 00 FF 
212b8     64 E4 85 F1 | 	sub	objptr, ##34404
212bc     F2 FA 01 F6 | 	mov	result1, objptr
212c0     15 FA 25 F4 | 	bith	result1, #21
212c4     43 00 00 FF 
212c8     68 E4 05 F1 | 	add	objptr, ##34408
212cc     F2 FA 61 FC | 	wrlong	result1, objptr
212d0     43 00 00 FF 
212d4     68 E4 85 F1 | 	sub	objptr, ##34408
212d8     F2 FA 01 F6 | 	mov	result1, objptr
212dc     34 FA 25 F4 | 	bith	result1, #52
212e0     43 00 00 FF 
212e4     6C E4 05 F1 | 	add	objptr, ##34412
212e8     F2 FA 61 FC | 	wrlong	result1, objptr
212ec     43 00 00 FF 
212f0     6C E4 85 F1 | 	sub	objptr, ##34412
212f4     F2 FA 01 F6 | 	mov	result1, objptr
212f8     16 FA 25 F4 | 	bith	result1, #22
212fc     43 00 00 FF 
21300     74 E4 05 F1 | 	add	objptr, ##34420
21304     F2 FA 61 FC | 	wrlong	result1, objptr
21308     43 00 00 FF 
2130c     74 E4 85 F1 | 	sub	objptr, ##34420
21310     F2 FA 01 F6 | 	mov	result1, objptr
21314     00 28 00 FF 
21318     00 FA 45 F5 | 	or	result1, ##5242880
2131c     43 00 00 FF 
21320     78 E4 05 F1 | 	add	objptr, ##34424
21324     F2 FA 61 FC | 	wrlong	result1, objptr
21328     43 00 00 FF 
2132c     78 E4 85 F1 | 	sub	objptr, ##34424
21330     F2 FA 01 F6 | 	mov	result1, objptr
21334     35 FA 25 F4 | 	bith	result1, #53
21338     43 00 00 FF 
2133c     7C E4 05 F1 | 	add	objptr, ##34428
21340     F2 FA 61 FC | 	wrlong	result1, objptr
21344     43 00 00 FF 
21348     7C E4 85 F1 | 	sub	objptr, ##34428
2134c     F2 FA 01 F6 | 	mov	result1, objptr
21350     54 FA 25 F4 | 	bith	result1, #84
21354     43 00 00 FF 
21358     80 E4 05 F1 | 	add	objptr, ##34432
2135c     F2 FA 61 FC | 	wrlong	result1, objptr
21360     43 00 00 FF 
21364     80 E4 85 F1 | 	sub	objptr, ##34432
21368     F2 FA 01 F6 | 	mov	result1, objptr
2136c     17 FA 25 F4 | 	bith	result1, #23
21370     43 00 00 FF 
21374     84 E4 05 F1 | 	add	objptr, ##34436
21378     F2 FA 61 FC | 	wrlong	result1, objptr
2137c     43 00 00 FF 
21380     84 E4 85 F1 | 	sub	objptr, ##34436
21384     F2 FA 01 F6 | 	mov	result1, objptr
21388     00 48 00 FF 
2138c     00 FA 45 F5 | 	or	result1, ##9437184
21390     43 00 00 FF 
21394     88 E4 05 F1 | 	add	objptr, ##34440
21398     F2 FA 61 FC | 	wrlong	result1, objptr
2139c     43 00 00 FF 
213a0     88 E4 85 F1 | 	sub	objptr, ##34440
213a4     F2 FA 01 F6 | 	mov	result1, objptr
213a8     00 50 00 FF 
213ac     00 FA 45 F5 | 	or	result1, ##10485760
213b0     43 00 00 FF 
213b4     8C E4 05 F1 | 	add	objptr, ##34444
213b8     F2 FA 61 FC | 	wrlong	result1, objptr
213bc     43 00 00 FF 
213c0     8C E4 85 F1 | 	sub	objptr, ##34444
213c4     F2 FA 01 F6 | 	mov	result1, objptr
213c8     00 58 00 FF 
213cc     00 FA 45 F5 | 	or	result1, ##11534336
213d0     43 00 00 FF 
213d4     90 E4 05 F1 | 	add	objptr, ##34448
213d8     F2 FA 61 FC | 	wrlong	result1, objptr
213dc     43 00 00 FF 
213e0     90 E4 85 F1 | 	sub	objptr, ##34448
213e4     F2 FA 01 F6 | 	mov	result1, objptr
213e8     36 FA 25 F4 | 	bith	result1, #54
213ec     43 00 00 FF 
213f0     A4 E4 05 F1 | 	add	objptr, ##34468
213f4     F2 FA 61 FC | 	wrlong	result1, objptr
213f8     43 00 00 FF 
213fc     A4 E4 85 F1 | 	sub	objptr, ##34468
21400     F2 FA 01 F6 | 	mov	result1, objptr
21404     00 68 00 FF 
21408     00 FA 45 F5 | 	or	result1, ##13631488
2140c     43 00 00 FF 
21410     D4 E4 05 F1 | 	add	objptr, ##34516
21414     F2 FA 61 FC | 	wrlong	result1, objptr
21418     43 00 00 FF 
2141c     D4 E4 85 F1 | 	sub	objptr, ##34516
21420     F2 FA 01 F6 | 	mov	result1, objptr
21424     00 68 00 FF 
21428     00 FA 45 F5 | 	or	result1, ##13631488
2142c     43 00 00 FF 
21430     D0 E4 05 F1 | 	add	objptr, ##34512
21434     F2 FA 61 FC | 	wrlong	result1, objptr
21438     43 00 00 FF 
2143c     D0 E4 85 F1 | 	sub	objptr, ##34512
21440     F2 FA 01 F6 | 	mov	result1, objptr
21444     00 68 00 FF 
21448     00 FA 45 F5 | 	or	result1, ##13631488
2144c     43 00 00 FF 
21450     D8 E4 05 F1 | 	add	objptr, ##34520
21454     F2 FA 61 FC | 	wrlong	result1, objptr
21458     43 00 00 FF 
2145c     D8 E4 85 F1 | 	sub	objptr, ##34520
21460     F2 FA 01 F6 | 	mov	result1, objptr
21464     00 68 00 FF 
21468     00 FA 45 F5 | 	or	result1, ##13631488
2146c     43 00 00 FF 
21470     DC E4 05 F1 | 	add	objptr, ##34524
21474     F2 FA 61 FC | 	wrlong	result1, objptr
21478     43 00 00 FF 
2147c     DC E4 85 F1 | 	sub	objptr, ##34524
21480     F2 FA 01 F6 | 	mov	result1, objptr
21484     00 68 00 FF 
21488     00 FA 45 F5 | 	or	result1, ##13631488
2148c     43 00 00 FF 
21490     0C E5 05 F1 | 	add	objptr, ##34572
21494     F2 FA 61 FC | 	wrlong	result1, objptr
21498     43 00 00 FF 
2149c     0C E5 85 F1 | 	sub	objptr, ##34572
214a0     F2 FA 01 F6 | 	mov	result1, objptr
214a4     55 FA 25 F4 | 	bith	result1, #85
214a8     43 00 00 FF 
214ac     BC E4 05 F1 | 	add	objptr, ##34492
214b0     F2 FA 61 FC | 	wrlong	result1, objptr
214b4     43 00 00 FF 
214b8     BC E4 85 F1 | 	sub	objptr, ##34492
214bc     F2 FA 01 F6 | 	mov	result1, objptr
214c0     00 68 00 FF 
214c4     00 FA 45 F5 | 	or	result1, ##13631488
214c8     43 00 00 FF 
214cc     10 E5 05 F1 | 	add	objptr, ##34576
214d0     F2 FA 61 FC | 	wrlong	result1, objptr
214d4     43 00 00 FF 
214d8     10 E5 85 F1 | 	sub	objptr, ##34576
214dc     F2 FA 01 F6 | 	mov	result1, objptr
214e0     00 68 00 FF 
214e4     00 FA 45 F5 | 	or	result1, ##13631488
214e8     43 00 00 FF 
214ec     E0 E4 05 F1 | 	add	objptr, ##34528
214f0     F2 FA 61 FC | 	wrlong	result1, objptr
214f4     43 00 00 FF 
214f8     E0 E4 85 F1 | 	sub	objptr, ##34528
214fc     F2 FA 01 F6 | 	mov	result1, objptr
21500     00 68 00 FF 
21504     00 FA 45 F5 | 	or	result1, ##13631488
21508     43 00 00 FF 
2150c     E4 E4 05 F1 | 	add	objptr, ##34532
21510     F2 FA 61 FC | 	wrlong	result1, objptr
21514     43 00 00 FF 
21518     E4 E4 85 F1 | 	sub	objptr, ##34532
2151c     F2 FA 01 F6 | 	mov	result1, objptr
21520     00 68 00 FF 
21524     00 FA 45 F5 | 	or	result1, ##13631488
21528     43 00 00 FF 
2152c     E8 E4 05 F1 | 	add	objptr, ##34536
21530     F2 FA 61 FC | 	wrlong	result1, objptr
21534     43 00 00 FF 
21538     E8 E4 85 F1 | 	sub	objptr, ##34536
2153c     F2 FA 01 F6 | 	mov	result1, objptr
21540     74 FA 25 F4 | 	bith	result1, #116
21544     43 00 00 FF 
21548     60 E5 05 F1 | 	add	objptr, ##34656
2154c     F2 FA 61 FC | 	wrlong	result1, objptr
21550     43 00 00 FF 
21554     60 E5 85 F1 | 	sub	objptr, ##34656
21558     F2 FA 01 F6 | 	mov	result1, objptr
2155c     18 FA 25 F4 | 	bith	result1, #24
21560     43 00 00 FF 
21564     64 E5 05 F1 | 	add	objptr, ##34660
21568     F2 FA 61 FC | 	wrlong	result1, objptr
2156c     43 00 00 FF 
21570     64 E5 85 F1 | 	sub	objptr, ##34660
21574     F2 FA 01 F6 | 	mov	result1, objptr
21578     00 88 00 FF 
2157c     00 FA 45 F5 | 	or	result1, ##17825792
21580     43 00 00 FF 
21584     68 E5 05 F1 | 	add	objptr, ##34664
21588     F2 FA 61 FC | 	wrlong	result1, objptr
2158c     43 00 00 FF 
21590     68 E5 85 F1 | 	sub	objptr, ##34664
21594     F2 FA 01 F6 | 	mov	result1, objptr
21598     00 90 00 FF 
2159c     00 FA 45 F5 | 	or	result1, ##18874368
215a0     43 00 00 FF 
215a4     6C E5 05 F1 | 	add	objptr, ##34668
215a8     F2 FA 61 FC | 	wrlong	result1, objptr
215ac     43 00 00 FF 
215b0     6C E5 85 F1 | 	sub	objptr, ##34668
215b4     F2 FA 01 F6 | 	mov	result1, objptr
215b8     00 98 00 FF 
215bc     00 FA 45 F5 | 	or	result1, ##19922944
215c0     43 00 00 FF 
215c4     70 E5 05 F1 | 	add	objptr, ##34672
215c8     F2 FA 61 FC | 	wrlong	result1, objptr
215cc     43 00 00 FF 
215d0     70 E5 85 F1 | 	sub	objptr, ##34672
215d4     F2 FA 01 F6 | 	mov	result1, objptr
215d8     00 A0 00 FF 
215dc     00 FA 45 F5 | 	or	result1, ##20971520
215e0     43 00 00 FF 
215e4     74 E5 05 F1 | 	add	objptr, ##34676
215e8     F2 FA 61 FC | 	wrlong	result1, objptr
215ec     43 00 00 FF 
215f0     74 E5 85 F1 | 	sub	objptr, ##34676
215f4     F2 FA 01 F6 | 	mov	result1, objptr
215f8     00 A8 00 FF 
215fc     00 FA 45 F5 | 	or	result1, ##22020096
21600     43 00 00 FF 
21604     78 E5 05 F1 | 	add	objptr, ##34680
21608     F2 FA 61 FC | 	wrlong	result1, objptr
2160c     43 00 00 FF 
21610     78 E5 85 F1 | 	sub	objptr, ##34680
21614     F2 FA 01 F6 | 	mov	result1, objptr
21618     00 B0 00 FF 
2161c     00 FA 45 F5 | 	or	result1, ##23068672
21620     43 00 00 FF 
21624     7C E5 05 F1 | 	add	objptr, ##34684
21628     F2 FA 61 FC | 	wrlong	result1, objptr
2162c     43 00 00 FF 
21630     7C E5 85 F1 | 	sub	objptr, ##34684
21634     F2 FA 01 F6 | 	mov	result1, objptr
21638     00 B8 00 FF 
2163c     00 FA 45 F5 | 	or	result1, ##24117248
21640     43 00 00 FF 
21644     80 E5 05 F1 | 	add	objptr, ##34688
21648     F2 FA 61 FC | 	wrlong	result1, objptr
2164c     43 00 00 FF 
21650     80 E5 85 F1 | 	sub	objptr, ##34688
21654     F2 FA 01 F6 | 	mov	result1, objptr
21658     37 FA 25 F4 | 	bith	result1, #55
2165c     43 00 00 FF 
21660     84 E5 05 F1 | 	add	objptr, ##34692
21664     F2 FA 61 FC | 	wrlong	result1, objptr
21668     43 00 00 FF 
2166c     84 E5 85 F1 | 	sub	objptr, ##34692
21670     F2 FA 01 F6 | 	mov	result1, objptr
21674     00 C8 00 FF 
21678     00 FA 45 F5 | 	or	result1, ##26214400
2167c     43 00 00 FF 
21680     88 E5 05 F1 | 	add	objptr, ##34696
21684     F2 FA 61 FC | 	wrlong	result1, objptr
21688     43 00 00 FF 
2168c     88 E5 85 F1 | 	sub	objptr, ##34696
21690     F2 FA 01 F6 | 	mov	result1, objptr
21694     00 D0 00 FF 
21698     00 FA 45 F5 | 	or	result1, ##27262976
2169c     43 00 00 FF 
216a0     8C E5 05 F1 | 	add	objptr, ##34700
216a4     F2 FA 61 FC | 	wrlong	result1, objptr
216a8     43 00 00 FF 
216ac     8C E5 85 F1 | 	sub	objptr, ##34700
216b0     F2 FA 01 F6 | 	mov	result1, objptr
216b4     00 D8 00 FF 
216b8     00 FA 45 F5 | 	or	result1, ##28311552
216bc     43 00 00 FF 
216c0     90 E5 05 F1 | 	add	objptr, ##34704
216c4     F2 FA 61 FC | 	wrlong	result1, objptr
216c8     43 00 00 FF 
216cc     90 E5 85 F1 | 	sub	objptr, ##34704
216d0     F2 FA 01 F6 | 	mov	result1, objptr
216d4     56 FA 25 F4 | 	bith	result1, #86
216d8     43 00 00 FF 
216dc     94 E5 05 F1 | 	add	objptr, ##34708
216e0     F2 FA 61 FC | 	wrlong	result1, objptr
216e4     43 00 00 FF 
216e8     94 E5 85 F1 | 	sub	objptr, ##34708
216ec     F2 FA 01 F6 | 	mov	result1, objptr
216f0     00 E8 00 FF 
216f4     00 FA 45 F5 | 	or	result1, ##30408704
216f8     45 00 00 FF 
216fc     5C E4 05 F1 | 	add	objptr, ##35420
21700     F2 FA 61 FC | 	wrlong	result1, objptr
21704     45 00 00 FF 
21708     5C E4 85 F1 | 	sub	objptr, ##35420
2170c     F2 FA 01 F6 | 	mov	result1, objptr
21710     75 FA 25 F4 | 	bith	result1, #117
21714     43 00 00 FF 
21718     98 E5 05 F1 | 	add	objptr, ##34712
2171c     F2 FA 61 FC | 	wrlong	result1, objptr
21720     43 00 00 FF 
21724     98 E5 85 F1 | 	sub	objptr, ##34712
21728     F2 FA 01 F6 | 	mov	result1, objptr
2172c     94 FA 25 F4 | 	bith	result1, #148
21730     43 00 00 FF 
21734     AC E5 05 F1 | 	add	objptr, ##34732
21738     F2 FA 61 FC | 	wrlong	result1, objptr
2173c     43 00 00 FF 
21740     AC E5 85 F1 | 	sub	objptr, ##34732
21744     F2 FA 01 F6 | 	mov	result1, objptr
21748     19 FA 25 F4 | 	bith	result1, #25
2174c     43 00 00 FF 
21750     9C E5 05 F1 | 	add	objptr, ##34716
21754     F2 FA 61 FC | 	wrlong	result1, objptr
21758     43 00 00 FF 
2175c     9C E5 85 F1 | 	sub	objptr, ##34716
21760     F2 FA 01 F6 | 	mov	result1, objptr
21764     00 08 01 FF 
21768     00 FA 45 F5 | 	or	result1, ##34603008
2176c     43 00 00 FF 
21770     B8 E4 05 F1 | 	add	objptr, ##34488
21774     F2 FA 61 FC | 	wrlong	result1, objptr
21778     43 00 00 FF 
2177c     B8 E4 85 F1 | 	sub	objptr, ##34488
21780     F2 FA 01 F6 | 	mov	result1, objptr
21784     00 10 01 FF 
21788     00 FA 45 F5 | 	or	result1, ##35651584
2178c     43 00 00 FF 
21790     A4 E5 05 F1 | 	add	objptr, ##34724
21794     F2 FA 61 FC | 	wrlong	result1, objptr
21798     43 00 00 FF 
2179c     A4 E5 85 F1 | 	sub	objptr, ##34724
217a0     F2 FA 01 F6 | 	mov	result1, objptr
217a4     00 18 01 FF 
217a8     00 FA 45 F5 | 	or	result1, ##36700160
217ac     43 00 00 FF 
217b0     A8 E5 05 F1 | 	add	objptr, ##34728
217b4     F2 FA 61 FC | 	wrlong	result1, objptr
217b8     43 00 00 FF 
217bc     A8 E5 85 F1 | 	sub	objptr, ##34728
217c0     F2 FA 01 F6 | 	mov	result1, objptr
217c4     00 20 01 FF 
217c8     00 FA 45 F5 | 	or	result1, ##37748736
217cc     43 00 00 FF 
217d0     B4 E5 05 F1 | 	add	objptr, ##34740
217d4     F2 FA 61 FC | 	wrlong	result1, objptr
217d8     43 00 00 FF 
217dc     B4 E5 85 F1 | 	sub	objptr, ##34740
217e0     F2 FA 01 F6 | 	mov	result1, objptr
217e4     00 28 01 FF 
217e8     00 FA 45 F5 | 	or	result1, ##38797312
217ec     43 00 00 FF 
217f0     B8 E5 05 F1 | 	add	objptr, ##34744
217f4     F2 FA 61 FC | 	wrlong	result1, objptr
217f8     43 00 00 FF 
217fc     B8 E5 85 F1 | 	sub	objptr, ##34744
21800     F2 FA 01 F6 | 	mov	result1, objptr
21804     00 30 01 FF 
21808     00 FA 45 F5 | 	or	result1, ##39845888
2180c     43 00 00 FF 
21810     BC E5 05 F1 | 	add	objptr, ##34748
21814     F2 FA 61 FC | 	wrlong	result1, objptr
21818     43 00 00 FF 
2181c     BC E5 85 F1 | 	sub	objptr, ##34748
21820     F2 FA 01 F6 | 	mov	result1, objptr
21824     00 38 01 FF 
21828     00 FA 45 F5 | 	or	result1, ##40894464
2182c     43 00 00 FF 
21830     C0 E5 05 F1 | 	add	objptr, ##34752
21834     F2 FA 61 FC | 	wrlong	result1, objptr
21838     43 00 00 FF 
2183c     C0 E5 85 F1 | 	sub	objptr, ##34752
21840     F2 FA 01 F6 | 	mov	result1, objptr
21844     00 40 01 FF 
21848     00 FA 45 F5 | 	or	result1, ##41943040
2184c     43 00 00 FF 
21850     C8 E5 05 F1 | 	add	objptr, ##34760
21854     F2 FA 61 FC | 	wrlong	result1, objptr
21858     43 00 00 FF 
2185c     C8 E5 85 F1 | 	sub	objptr, ##34760
21860     F2 FA 01 F6 | 	mov	result1, objptr
21864     00 08 01 FF 
21868     00 FA 45 F5 | 	or	result1, ##34603008
2186c     43 00 00 FF 
21870     CC E5 05 F1 | 	add	objptr, ##34764
21874     F2 FA 61 FC | 	wrlong	result1, objptr
21878     43 00 00 FF 
2187c     CC E5 85 F1 | 	sub	objptr, ##34764
21880     F2 FA 01 F6 | 	mov	result1, objptr
21884     00 48 01 FF 
21888     00 FA 45 F5 | 	or	result1, ##42991616
2188c     43 00 00 FF 
21890     CC E4 05 F1 | 	add	objptr, ##34508
21894     F2 FA 61 FC | 	wrlong	result1, objptr
21898     43 00 00 FF 
2189c     CC E4 85 F1 | 	sub	objptr, ##34508
218a0     F2 FA 01 F6 | 	mov	result1, objptr
218a4     00 50 01 FF 
218a8     00 FA 45 F5 | 	or	result1, ##44040192
218ac     43 00 00 FF 
218b0     FC E4 05 F1 | 	add	objptr, ##34556
218b4     F2 FA 61 FC | 	wrlong	result1, objptr
218b8     43 00 00 FF 
218bc     FC E4 85 F1 | 	sub	objptr, ##34556
218c0     F2 FA 01 F6 | 	mov	result1, objptr
218c4     00 58 01 FF 
218c8     00 FA 45 F5 | 	or	result1, ##45088768
218cc     43 00 00 FF 
218d0     F8 E4 05 F1 | 	add	objptr, ##34552
218d4     F2 FA 61 FC | 	wrlong	result1, objptr
218d8     43 00 00 FF 
218dc     F8 E4 85 F1 | 	sub	objptr, ##34552
218e0     F2 FA 01 F6 | 	mov	result1, objptr
218e4     00 60 01 FF 
218e8     00 FA 45 F5 | 	or	result1, ##46137344
218ec     43 00 00 FF 
218f0     9C E4 05 F1 | 	add	objptr, ##34460
218f4     F2 FA 61 FC | 	wrlong	result1, objptr
218f8     43 00 00 FF 
218fc     9C E4 85 F1 | 	sub	objptr, ##34460
21900     F2 FA 01 F6 | 	mov	result1, objptr
21904     00 68 01 FF 
21908     00 FA 45 F5 | 	or	result1, ##47185920
2190c     43 00 00 FF 
21910     A0 E4 05 F1 | 	add	objptr, ##34464
21914     F2 FA 61 FC | 	wrlong	result1, objptr
21918     43 00 00 FF 
2191c     A0 E4 85 F1 | 	sub	objptr, ##34464
21920     F2 FA 01 F6 | 	mov	result1, objptr
21924     00 70 01 FF 
21928     00 FA 45 F5 | 	or	result1, ##48234496
2192c     43 00 00 FF 
21930     08 E5 05 F1 | 	add	objptr, ##34568
21934     F2 FA 61 FC | 	wrlong	result1, objptr
21938     43 00 00 FF 
2193c     08 E5 85 F1 | 	sub	objptr, ##34568
21940     F2 FA 01 F6 | 	mov	result1, objptr
21944     00 78 01 FF 
21948     00 FA 45 F5 | 	or	result1, ##49283072
2194c     43 00 00 FF 
21950     B0 E5 05 F1 | 	add	objptr, ##34736
21954     F2 FA 61 FC | 	wrlong	result1, objptr
21958     43 00 00 FF 
2195c     B0 E5 85 F1 | 	sub	objptr, ##34736
21960     F2 FA 01 F6 | 	mov	result1, objptr
21964     38 FA 25 F4 | 	bith	result1, #56
21968     43 00 00 FF 
2196c     C4 E5 05 F1 | 	add	objptr, ##34756
21970     F2 FA 61 FC | 	wrlong	result1, objptr
21974     43 00 00 FF 
21978     C4 E5 85 F1 | 	sub	objptr, ##34756
2197c     F2 FA 01 F6 | 	mov	result1, objptr
21980     00 88 01 FF 
21984     00 FA 45 F5 | 	or	result1, ##51380224
21988     43 00 00 FF 
2198c     D0 E5 05 F1 | 	add	objptr, ##34768
21990     F2 FA 61 FC | 	wrlong	result1, objptr
21994     43 00 00 FF 
21998     D0 E5 85 F1 | 	sub	objptr, ##34768
2199c     F2 FA 01 F6 | 	mov	result1, objptr
219a0     00 90 01 FF 
219a4     00 FA 45 F5 | 	or	result1, ##52428800
219a8     43 00 00 FF 
219ac     D4 E5 05 F1 | 	add	objptr, ##34772
219b0     F2 FA 61 FC | 	wrlong	result1, objptr
219b4     43 00 00 FF 
219b8     D4 E5 85 F1 | 	sub	objptr, ##34772
219bc     F2 FA 01 F6 | 	mov	result1, objptr
219c0     00 98 01 FF 
219c4     00 FA 45 F5 | 	or	result1, ##53477376
219c8     43 00 00 FF 
219cc     D8 E5 05 F1 | 	add	objptr, ##34776
219d0     F2 FA 61 FC | 	wrlong	result1, objptr
219d4     43 00 00 FF 
219d8     D8 E5 85 F1 | 	sub	objptr, ##34776
219dc     F2 FA 01 F6 | 	mov	result1, objptr
219e0     00 A0 01 FF 
219e4     00 FA 45 F5 | 	or	result1, ##54525952
219e8     43 00 00 FF 
219ec     DC E5 05 F1 | 	add	objptr, ##34780
219f0     F2 FA 61 FC | 	wrlong	result1, objptr
219f4     43 00 00 FF 
219f8     DC E5 85 F1 | 	sub	objptr, ##34780
219fc     F2 FA 01 F6 | 	mov	result1, objptr
21a00     00 A8 01 FF 
21a04     00 FA 45 F5 | 	or	result1, ##55574528
21a08     43 00 00 FF 
21a0c     E0 E5 05 F1 | 	add	objptr, ##34784
21a10     F2 FA 61 FC | 	wrlong	result1, objptr
21a14     43 00 00 FF 
21a18     E0 E5 85 F1 | 	sub	objptr, ##34784
21a1c     F2 FA 01 F6 | 	mov	result1, objptr
21a20     00 B0 01 FF 
21a24     00 FA 45 F5 | 	or	result1, ##56623104
21a28     43 00 00 FF 
21a2c     E4 E5 05 F1 | 	add	objptr, ##34788
21a30     F2 FA 61 FC | 	wrlong	result1, objptr
21a34     43 00 00 FF 
21a38     E4 E5 85 F1 | 	sub	objptr, ##34788
21a3c     F2 FA 01 F6 | 	mov	result1, objptr
21a40     94 FA 25 F4 | 	bith	result1, #148
21a44     43 00 00 FF 
21a48     AC E5 05 F1 | 	add	objptr, ##34732
21a4c     F2 FA 61 FC | 	wrlong	result1, objptr
21a50     43 00 00 FF 
21a54     AC E5 85 F1 | 	sub	objptr, ##34732
21a58     F2 FA 01 F6 | 	mov	result1, objptr
21a5c     00 B8 01 FF 
21a60     00 FA 45 F5 | 	or	result1, ##57671680
21a64     43 00 00 FF 
21a68     EC E5 05 F1 | 	add	objptr, ##34796
21a6c     F2 FA 61 FC | 	wrlong	result1, objptr
21a70     43 00 00 FF 
21a74     EC E5 85 F1 | 	sub	objptr, ##34796
21a78     F2 FA 01 F6 | 	mov	result1, objptr
21a7c     57 FA 25 F4 | 	bith	result1, #87
21a80     43 00 00 FF 
21a84     E8 E5 05 F1 | 	add	objptr, ##34792
21a88     F2 FA 61 FC | 	wrlong	result1, objptr
21a8c     43 00 00 FF 
21a90     E8 E5 85 F1 | 	sub	objptr, ##34792
21a94     F2 FA 01 F6 | 	mov	result1, objptr
21a98     00 C8 01 FF 
21a9c     00 FA 45 F5 | 	or	result1, ##59768832
21aa0     44 00 00 FF 
21aa4     00 E4 05 F1 | 	add	objptr, ##34816
21aa8     F2 FA 61 FC | 	wrlong	result1, objptr
21aac     44 00 00 FF 
21ab0     00 E4 85 F1 | 	sub	objptr, ##34816
21ab4     F2 FA 01 F6 | 	mov	result1, objptr
21ab8     00 D0 01 FF 
21abc     00 FA 45 F5 | 	or	result1, ##60817408
21ac0     44 00 00 FF 
21ac4     04 E4 05 F1 | 	add	objptr, ##34820
21ac8     F2 FA 61 FC | 	wrlong	result1, objptr
21acc     44 00 00 FF 
21ad0     04 E4 85 F1 | 	sub	objptr, ##34820
21ad4     F2 FA 01 F6 | 	mov	result1, objptr
21ad8     00 D8 01 FF 
21adc     00 FA 45 F5 | 	or	result1, ##61865984
21ae0     43 00 00 FF 
21ae4     F0 E5 05 F1 | 	add	objptr, ##34800
21ae8     F2 FA 61 FC | 	wrlong	result1, objptr
21aec     43 00 00 FF 
21af0     F0 E5 85 F1 | 	sub	objptr, ##34800
21af4     F2 FA 01 F6 | 	mov	result1, objptr
21af8     76 FA 25 F4 | 	bith	result1, #118
21afc     43 00 00 FF 
21b00     F4 E5 05 F1 | 	add	objptr, ##34804
21b04     F2 FA 61 FC | 	wrlong	result1, objptr
21b08     43 00 00 FF 
21b0c     F4 E5 85 F1 | 	sub	objptr, ##34804
21b10     F2 FA 01 F6 | 	mov	result1, objptr
21b14     00 E8 01 FF 
21b18     00 FA 45 F5 | 	or	result1, ##63963136
21b1c     43 00 00 FF 
21b20     F8 E5 05 F1 | 	add	objptr, ##34808
21b24     F2 FA 61 FC | 	wrlong	result1, objptr
21b28     43 00 00 FF 
21b2c     F8 E5 85 F1 | 	sub	objptr, ##34808
21b30     F2 FA 01 F6 | 	mov	result1, objptr
21b34     95 FA 25 F4 | 	bith	result1, #149
21b38     43 00 00 FF 
21b3c     FC E5 05 F1 | 	add	objptr, ##34812
21b40     F2 FA 61 FC | 	wrlong	result1, objptr
21b44     43 00 00 FF 
21b48     FC E5 85 F1 | 	sub	objptr, ##34812
21b4c     F2 FA 01 F6 | 	mov	result1, objptr
21b50     B4 FA 25 F4 | 	bith	result1, #180
21b54     44 00 00 FF 
21b58     0C E4 05 F1 | 	add	objptr, ##34828
21b5c     F2 FA 61 FC | 	wrlong	result1, objptr
21b60     44 00 00 FF 
21b64     0C E4 85 F1 | 	sub	objptr, ##34828
21b68     F2 FA 01 F6 | 	mov	result1, objptr
21b6c     1A FA 25 F4 | 	bith	result1, #26
21b70     44 00 00 FF 
21b74     08 E4 05 F1 | 	add	objptr, ##34824
21b78     F2 FA 61 FC | 	wrlong	result1, objptr
21b7c     44 00 00 FF 
21b80     08 E4 85 F1 | 	sub	objptr, ##34824
21b84     F2 FA 01 F6 | 	mov	result1, objptr
21b88     00 08 02 FF 
21b8c     00 FA 45 F5 | 	or	result1, ##68157440
21b90     44 00 00 FF 
21b94     18 E4 05 F1 | 	add	objptr, ##34840
21b98     F2 FA 61 FC | 	wrlong	result1, objptr
21b9c     44 00 00 FF 
21ba0     18 E4 85 F1 | 	sub	objptr, ##34840
21ba4     F2 FA 01 F6 | 	mov	result1, objptr
21ba8     00 10 02 FF 
21bac     00 FA 45 F5 | 	or	result1, ##69206016
21bb0     44 00 00 FF 
21bb4     14 E4 05 F1 | 	add	objptr, ##34836
21bb8     F2 FA 61 FC | 	wrlong	result1, objptr
21bbc     44 00 00 FF 
21bc0     14 E4 85 F1 | 	sub	objptr, ##34836
21bc4     F2 FA 01 F6 | 	mov	result1, objptr
21bc8     00 18 02 FF 
21bcc     00 FA 45 F5 | 	or	result1, ##70254592
21bd0     44 00 00 FF 
21bd4     10 E4 05 F1 | 	add	objptr, ##34832
21bd8     F2 FA 61 FC | 	wrlong	result1, objptr
21bdc     44 00 00 FF 
21be0     10 E4 85 F1 | 	sub	objptr, ##34832
21be4     F2 FA 01 F6 | 	mov	result1, objptr
21be8     00 20 02 FF 
21bec     00 FA 45 F5 | 	or	result1, ##71303168
21bf0     44 00 00 FF 
21bf4     1C E4 05 F1 | 	add	objptr, ##34844
21bf8     F2 FA 61 FC | 	wrlong	result1, objptr
21bfc     44 00 00 FF 
21c00     1C E4 85 F1 | 	sub	objptr, ##34844
21c04     F2 FA 01 F6 | 	mov	result1, objptr
21c08     00 28 02 FF 
21c0c     00 FA 45 F5 | 	or	result1, ##72351744
21c10     44 00 00 FF 
21c14     20 E4 05 F1 | 	add	objptr, ##34848
21c18     F2 FA 61 FC | 	wrlong	result1, objptr
21c1c     44 00 00 FF 
21c20     20 E4 85 F1 | 	sub	objptr, ##34848
21c24     F2 FA 01 F6 | 	mov	result1, objptr
21c28     00 30 02 FF 
21c2c     00 FA 45 F5 | 	or	result1, ##73400320
21c30     43 00 00 FF 
21c34     B4 E4 05 F1 | 	add	objptr, ##34484
21c38     F2 FA 61 FC | 	wrlong	result1, objptr
21c3c     43 00 00 FF 
21c40     B4 E4 85 F1 | 	sub	objptr, ##34484
21c44     F2 FA 01 F6 | 	mov	result1, objptr
21c48     00 38 02 FF 
21c4c     00 FA 45 F5 | 	or	result1, ##74448896
21c50     44 00 00 FF 
21c54     38 E4 05 F1 | 	add	objptr, ##34872
21c58     F2 FA 61 FC | 	wrlong	result1, objptr
21c5c     44 00 00 FF 
21c60     38 E4 85 F1 | 	sub	objptr, ##34872
21c64     F2 FA 01 F6 | 	mov	result1, objptr
21c68     00 40 02 FF 
21c6c     00 FA 45 F5 | 	or	result1, ##75497472
21c70     44 00 00 FF 
21c74     48 E4 05 F1 | 	add	objptr, ##34888
21c78     F2 FA 61 FC | 	wrlong	result1, objptr
21c7c     44 00 00 FF 
21c80     48 E4 85 F1 | 	sub	objptr, ##34888
21c84     F2 FA 01 F6 | 	mov	result1, objptr
21c88     00 48 02 FF 
21c8c     00 FA 45 F5 | 	or	result1, ##76546048
21c90     44 00 00 FF 
21c94     4C E4 05 F1 | 	add	objptr, ##34892
21c98     F2 FA 61 FC | 	wrlong	result1, objptr
21c9c     44 00 00 FF 
21ca0     4C E4 85 F1 | 	sub	objptr, ##34892
21ca4     F2 FA 01 F6 | 	mov	result1, objptr
21ca8     00 50 02 FF 
21cac     00 FA 45 F5 | 	or	result1, ##77594624
21cb0     44 00 00 FF 
21cb4     44 E4 05 F1 | 	add	objptr, ##34884
21cb8     F2 FA 61 FC | 	wrlong	result1, objptr
21cbc     44 00 00 FF 
21cc0     44 E4 85 F1 | 	sub	objptr, ##34884
21cc4     F2 FA 01 F6 | 	mov	result1, objptr
21cc8     00 58 02 FF 
21ccc     00 FA 45 F5 | 	or	result1, ##78643200
21cd0     44 00 00 FF 
21cd4     3C E4 05 F1 | 	add	objptr, ##34876
21cd8     F2 FA 61 FC | 	wrlong	result1, objptr
21cdc     44 00 00 FF 
21ce0     3C E4 85 F1 | 	sub	objptr, ##34876
21ce4     F2 FA 01 F6 | 	mov	result1, objptr
21ce8     00 60 02 FF 
21cec     00 FA 45 F5 | 	or	result1, ##79691776
21cf0     44 00 00 FF 
21cf4     40 E4 05 F1 | 	add	objptr, ##34880
21cf8     F2 FA 61 FC | 	wrlong	result1, objptr
21cfc     44 00 00 FF 
21d00     40 E4 85 F1 | 	sub	objptr, ##34880
21d04     F2 FA 01 F6 | 	mov	result1, objptr
21d08     00 68 02 FF 
21d0c     00 FA 45 F5 | 	or	result1, ##80740352
21d10     44 00 00 FF 
21d14     50 E4 05 F1 | 	add	objptr, ##34896
21d18     F2 FA 61 FC | 	wrlong	result1, objptr
21d1c     44 00 00 FF 
21d20     50 E4 85 F1 | 	sub	objptr, ##34896
21d24     F2 FA 01 F6 | 	mov	result1, objptr
21d28     00 70 02 FF 
21d2c     00 FA 45 F5 | 	or	result1, ##81788928
21d30     44 00 00 FF 
21d34     54 E4 05 F1 | 	add	objptr, ##34900
21d38     F2 FA 61 FC | 	wrlong	result1, objptr
21d3c     44 00 00 FF 
21d40     54 E4 85 F1 | 	sub	objptr, ##34900
21d44     F2 FA 01 F6 | 	mov	result1, objptr
21d48     00 78 02 FF 
21d4c     00 FA 45 F5 | 	or	result1, ##82837504
21d50     44 00 00 FF 
21d54     58 E4 05 F1 | 	add	objptr, ##34904
21d58     F2 FA 61 FC | 	wrlong	result1, objptr
21d5c     44 00 00 FF 
21d60     58 E4 85 F1 | 	sub	objptr, ##34904
21d64     F2 FA 01 F6 | 	mov	result1, objptr
21d68     00 80 02 FF 
21d6c     00 FA 45 F5 | 	or	result1, ##83886080
21d70     44 00 00 FF 
21d74     5C E4 05 F1 | 	add	objptr, ##34908
21d78     F2 FA 61 FC | 	wrlong	result1, objptr
21d7c     44 00 00 FF 
21d80     5C E4 85 F1 | 	sub	objptr, ##34908
21d84     F2 FA 01 F6 | 	mov	result1, objptr
21d88     00 88 02 FF 
21d8c     00 FA 45 F5 | 	or	result1, ##84934656
21d90     44 00 00 FF 
21d94     60 E4 05 F1 | 	add	objptr, ##34912
21d98     F2 FA 61 FC | 	wrlong	result1, objptr
21d9c     44 00 00 FF 
21da0     60 E4 85 F1 | 	sub	objptr, ##34912
21da4     F2 FA 01 F6 | 	mov	result1, objptr
21da8     00 90 02 FF 
21dac     00 FA 45 F5 | 	or	result1, ##85983232
21db0     44 00 00 FF 
21db4     64 E4 05 F1 | 	add	objptr, ##34916
21db8     F2 FA 61 FC | 	wrlong	result1, objptr
21dbc     44 00 00 FF 
21dc0     64 E4 85 F1 | 	sub	objptr, ##34916
21dc4     F2 FA 01 F6 | 	mov	result1, objptr
21dc8     00 98 02 FF 
21dcc     00 FA 45 F5 | 	or	result1, ##87031808
21dd0     44 00 00 FF 
21dd4     68 E4 05 F1 | 	add	objptr, ##34920
21dd8     F2 FA 61 FC | 	wrlong	result1, objptr
21ddc     44 00 00 FF 
21de0     68 E4 85 F1 | 	sub	objptr, ##34920
21de4     F2 FA 01 F6 | 	mov	result1, objptr
21de8     00 A0 02 FF 
21dec     00 FA 45 F5 | 	or	result1, ##88080384
21df0     44 00 00 FF 
21df4     6C E4 05 F1 | 	add	objptr, ##34924
21df8     F2 FA 61 FC | 	wrlong	result1, objptr
21dfc     44 00 00 FF 
21e00     6C E4 85 F1 | 	sub	objptr, ##34924
21e04     F2 FA 01 F6 | 	mov	result1, objptr
21e08     00 A8 02 FF 
21e0c     00 FA 45 F5 | 	or	result1, ##89128960
21e10     44 00 00 FF 
21e14     78 E4 05 F1 | 	add	objptr, ##34936
21e18     F2 FA 61 FC | 	wrlong	result1, objptr
21e1c     44 00 00 FF 
21e20     78 E4 85 F1 | 	sub	objptr, ##34936
21e24     F2 FA 01 F6 | 	mov	result1, objptr
21e28     00 B0 02 FF 
21e2c     00 FA 45 F5 | 	or	result1, ##90177536
21e30     44 00 00 FF 
21e34     70 E4 05 F1 | 	add	objptr, ##34928
21e38     F2 FA 61 FC | 	wrlong	result1, objptr
21e3c     44 00 00 FF 
21e40     70 E4 85 F1 | 	sub	objptr, ##34928
21e44     F2 FA 01 F6 | 	mov	result1, objptr
21e48     00 B8 02 FF 
21e4c     00 FA 45 F5 | 	or	result1, ##91226112
21e50     44 00 00 FF 
21e54     74 E4 05 F1 | 	add	objptr, ##34932
21e58     F2 FA 61 FC | 	wrlong	result1, objptr
21e5c     44 00 00 FF 
21e60     74 E4 85 F1 | 	sub	objptr, ##34932
21e64     F2 FA 01 F6 | 	mov	result1, objptr
21e68     00 C0 02 FF 
21e6c     00 FA 45 F5 | 	or	result1, ##92274688
21e70     44 00 00 FF 
21e74     7C E4 05 F1 | 	add	objptr, ##34940
21e78     F2 FA 61 FC | 	wrlong	result1, objptr
21e7c     44 00 00 FF 
21e80     7C E4 85 F1 | 	sub	objptr, ##34940
21e84     F2 FA 01 F6 | 	mov	result1, objptr
21e88     00 C8 02 FF 
21e8c     00 FA 45 F5 | 	or	result1, ##93323264
21e90     44 00 00 FF 
21e94     24 E4 05 F1 | 	add	objptr, ##34852
21e98     F2 FA 61 FC | 	wrlong	result1, objptr
21e9c     44 00 00 FF 
21ea0     24 E4 85 F1 | 	sub	objptr, ##34852
21ea4     F2 FA 01 F6 | 	mov	result1, objptr
21ea8     00 D0 02 FF 
21eac     00 FA 45 F5 | 	or	result1, ##94371840
21eb0     44 00 00 FF 
21eb4     2C E4 05 F1 | 	add	objptr, ##34860
21eb8     F2 FA 61 FC | 	wrlong	result1, objptr
21ebc     44 00 00 FF 
21ec0     2C E4 85 F1 | 	sub	objptr, ##34860
21ec4     F2 FA 01 F6 | 	mov	result1, objptr
21ec8     00 D8 02 FF 
21ecc     00 FA 45 F5 | 	or	result1, ##95420416
21ed0     44 00 00 FF 
21ed4     30 E4 05 F1 | 	add	objptr, ##34864
21ed8     F2 FA 61 FC | 	wrlong	result1, objptr
21edc     44 00 00 FF 
21ee0     30 E4 85 F1 | 	sub	objptr, ##34864
21ee4     F2 FA 01 F6 | 	mov	result1, objptr
21ee8     00 E0 02 FF 
21eec     00 FA 45 F5 | 	or	result1, ##96468992
21ef0     44 00 00 FF 
21ef4     80 E4 05 F1 | 	add	objptr, ##34944
21ef8     F2 FA 61 FC | 	wrlong	result1, objptr
21efc     44 00 00 FF 
21f00     80 E4 85 F1 | 	sub	objptr, ##34944
21f04     F2 FA 01 F6 | 	mov	result1, objptr
21f08     00 E8 02 FF 
21f0c     00 FA 45 F5 | 	or	result1, ##97517568
21f10     44 00 00 FF 
21f14     84 E4 05 F1 | 	add	objptr, ##34948
21f18     F2 FA 61 FC | 	wrlong	result1, objptr
21f1c     44 00 00 FF 
21f20     84 E4 85 F1 | 	sub	objptr, ##34948
21f24     F2 FA 01 F6 | 	mov	result1, objptr
21f28     00 F0 02 FF 
21f2c     00 FA 45 F5 | 	or	result1, ##98566144
21f30     44 00 00 FF 
21f34     88 E4 05 F1 | 	add	objptr, ##34952
21f38     F2 FA 61 FC | 	wrlong	result1, objptr
21f3c     44 00 00 FF 
21f40     88 E4 85 F1 | 	sub	objptr, ##34952
21f44     F2 FA 01 F6 | 	mov	result1, objptr
21f48     00 F8 02 FF 
21f4c     00 FA 45 F5 | 	or	result1, ##99614720
21f50     44 00 00 FF 
21f54     34 E4 05 F1 | 	add	objptr, ##34868
21f58     F2 FA 61 FC | 	wrlong	result1, objptr
21f5c     44 00 00 FF 
21f60     34 E4 85 F1 | 	sub	objptr, ##34868
21f64     F2 FA 01 F6 | 	mov	result1, objptr
21f68     39 FA 25 F4 | 	bith	result1, #57
21f6c     44 00 00 FF 
21f70     98 E4 05 F1 | 	add	objptr, ##34968
21f74     F2 FA 61 FC | 	wrlong	result1, objptr
21f78     44 00 00 FF 
21f7c     98 E4 85 F1 | 	sub	objptr, ##34968
21f80     F2 FA 01 F6 | 	mov	result1, objptr
21f84     00 08 03 FF 
21f88     00 FA 45 F5 | 	or	result1, ##101711872
21f8c     44 00 00 FF 
21f90     A0 E4 05 F1 | 	add	objptr, ##34976
21f94     F2 FA 61 FC | 	wrlong	result1, objptr
21f98     44 00 00 FF 
21f9c     A0 E4 85 F1 | 	sub	objptr, ##34976
21fa0     F2 FA 01 F6 | 	mov	result1, objptr
21fa4     00 10 03 FF 
21fa8     00 FA 45 F5 | 	or	result1, ##102760448
21fac     44 00 00 FF 
21fb0     94 E4 05 F1 | 	add	objptr, ##34964
21fb4     F2 FA 61 FC | 	wrlong	result1, objptr
21fb8     44 00 00 FF 
21fbc     94 E4 85 F1 | 	sub	objptr, ##34964
21fc0     F2 FA 01 F6 | 	mov	result1, objptr
21fc4     00 18 03 FF 
21fc8     00 FA 45 F5 | 	or	result1, ##103809024
21fcc     44 00 00 FF 
21fd0     90 E4 05 F1 | 	add	objptr, ##34960
21fd4     F2 FA 61 FC | 	wrlong	result1, objptr
21fd8     44 00 00 FF 
21fdc     90 E4 85 F1 | 	sub	objptr, ##34960
21fe0     F2 FA 01 F6 | 	mov	result1, objptr
21fe4     00 20 03 FF 
21fe8     00 FA 45 F5 | 	or	result1, ##104857600
21fec     44 00 00 FF 
21ff0     8C E4 05 F1 | 	add	objptr, ##34956
21ff4     F2 FA 61 FC | 	wrlong	result1, objptr
21ff8     44 00 00 FF 
21ffc     8C E4 85 F1 | 	sub	objptr, ##34956
22000     F2 FA 01 F6 | 	mov	result1, objptr
22004     00 28 03 FF 
22008     00 FA 45 F5 | 	or	result1, ##105906176
2200c     44 00 00 FF 
22010     9C E4 05 F1 | 	add	objptr, ##34972
22014     F2 FA 61 FC | 	wrlong	result1, objptr
22018     44 00 00 FF 
2201c     9C E4 85 F1 | 	sub	objptr, ##34972
22020     F2 FA 01 F6 | 	mov	result1, objptr
22024     00 30 03 FF 
22028     00 FA 45 F5 | 	or	result1, ##106954752
2202c     44 00 00 FF 
22030     A4 E4 05 F1 | 	add	objptr, ##34980
22034     F2 FA 61 FC | 	wrlong	result1, objptr
22038     44 00 00 FF 
2203c     A4 E4 85 F1 | 	sub	objptr, ##34980
22040     F2 FA 01 F6 | 	mov	result1, objptr
22044     00 38 03 FF 
22048     00 FA 45 F5 | 	or	result1, ##108003328
2204c     44 00 00 FF 
22050     A8 E4 05 F1 | 	add	objptr, ##34984
22054     F2 FA 61 FC | 	wrlong	result1, objptr
22058     44 00 00 FF 
2205c     A8 E4 85 F1 | 	sub	objptr, ##34984
22060     F2 FA 01 F6 | 	mov	result1, objptr
22064     00 40 03 FF 
22068     00 FA 45 F5 | 	or	result1, ##109051904
2206c     44 00 00 FF 
22070     AC E4 05 F1 | 	add	objptr, ##34988
22074     F2 FA 61 FC | 	wrlong	result1, objptr
22078     44 00 00 FF 
2207c     AC E4 85 F1 | 	sub	objptr, ##34988
22080     F2 FA 01 F6 | 	mov	result1, objptr
22084     00 48 03 FF 
22088     00 FA 45 F5 | 	or	result1, ##110100480
2208c     44 00 00 FF 
22090     B4 E4 05 F1 | 	add	objptr, ##34996
22094     F2 FA 61 FC | 	wrlong	result1, objptr
22098     44 00 00 FF 
2209c     B4 E4 85 F1 | 	sub	objptr, ##34996
220a0     F2 FA 01 F6 | 	mov	result1, objptr
220a4     00 50 03 FF 
220a8     00 FA 45 F5 | 	or	result1, ##111149056
220ac     44 00 00 FF 
220b0     B8 E4 05 F1 | 	add	objptr, ##35000
220b4     F2 FA 61 FC | 	wrlong	result1, objptr
220b8     44 00 00 FF 
220bc     B8 E4 85 F1 | 	sub	objptr, ##35000
220c0     F2 FA 01 F6 | 	mov	result1, objptr
220c4     00 58 03 FF 
220c8     00 FA 45 F5 | 	or	result1, ##112197632
220cc     44 00 00 FF 
220d0     BC E4 05 F1 | 	add	objptr, ##35004
220d4     F2 FA 61 FC | 	wrlong	result1, objptr
220d8     44 00 00 FF 
220dc     BC E4 85 F1 | 	sub	objptr, ##35004
220e0     F2 FA 01 F6 | 	mov	result1, objptr
220e4     00 60 03 FF 
220e8     00 FA 45 F5 | 	or	result1, ##113246208
220ec     44 00 00 FF 
220f0     C0 E4 05 F1 | 	add	objptr, ##35008
220f4     F2 FA 61 FC | 	wrlong	result1, objptr
220f8     44 00 00 FF 
220fc     C0 E4 85 F1 | 	sub	objptr, ##35008
22100     F2 FA 01 F6 | 	mov	result1, objptr
22104     00 68 03 FF 
22108     00 FA 45 F5 | 	or	result1, ##114294784
2210c     44 00 00 FF 
22110     C4 E4 05 F1 | 	add	objptr, ##35012
22114     F2 FA 61 FC | 	wrlong	result1, objptr
22118     44 00 00 FF 
2211c     C4 E4 85 F1 | 	sub	objptr, ##35012
22120     F2 FA 01 F6 | 	mov	result1, objptr
22124     00 70 03 FF 
22128     00 FA 45 F5 | 	or	result1, ##115343360
2212c     44 00 00 FF 
22130     C8 E4 05 F1 | 	add	objptr, ##35016
22134     F2 FA 61 FC | 	wrlong	result1, objptr
22138     44 00 00 FF 
2213c     C8 E4 85 F1 | 	sub	objptr, ##35016
22140     F2 FA 01 F6 | 	mov	result1, objptr
22144     00 08 01 FF 
22148     00 FA 45 F5 | 	or	result1, ##34603008
2214c     44 00 00 FF 
22150     CC E4 05 F1 | 	add	objptr, ##35020
22154     F2 FA 61 FC | 	wrlong	result1, objptr
22158     44 00 00 FF 
2215c     CC E4 85 F1 | 	sub	objptr, ##35020
22160     F2 FA 01 F6 | 	mov	result1, objptr
22164     00 78 03 FF 
22168     00 FA 45 F5 | 	or	result1, ##116391936
2216c     44 00 00 FF 
22170     D0 E4 05 F1 | 	add	objptr, ##35024
22174     F2 FA 61 FC | 	wrlong	result1, objptr
22178     44 00 00 FF 
2217c     D0 E4 85 F1 | 	sub	objptr, ##35024
22180     F2 FA 01 F6 | 	mov	result1, objptr
22184     58 FA 25 F4 | 	bith	result1, #88
22188     44 00 00 FF 
2218c     B0 E4 05 F1 | 	add	objptr, ##34992
22190     F2 FA 61 FC | 	wrlong	result1, objptr
22194     44 00 00 FF 
22198     B0 E4 85 F1 | 	sub	objptr, ##34992
2219c     F2 FA 01 F6 | 	mov	result1, objptr
221a0     00 88 03 FF 
221a4     00 FA 45 F5 | 	or	result1, ##118489088
221a8     43 00 00 FF 
221ac     A8 E4 05 F1 | 	add	objptr, ##34472
221b0     F2 FA 61 FC | 	wrlong	result1, objptr
221b4     43 00 00 FF 
221b8     A8 E4 85 F1 | 	sub	objptr, ##34472
221bc     F2 FA 01 F6 | 	mov	result1, objptr
221c0     00 90 03 FF 
221c4     00 FA 45 F5 | 	or	result1, ##119537664
221c8     44 00 00 FF 
221cc     D4 E4 05 F1 | 	add	objptr, ##35028
221d0     F2 FA 61 FC | 	wrlong	result1, objptr
221d4     44 00 00 FF 
221d8     D4 E4 85 F1 | 	sub	objptr, ##35028
221dc     F2 FA 01 F6 | 	mov	result1, objptr
221e0     00 98 03 FF 
221e4     00 FA 45 F5 | 	or	result1, ##120586240
221e8     44 00 00 FF 
221ec     D8 E4 05 F1 | 	add	objptr, ##35032
221f0     F2 FA 61 FC | 	wrlong	result1, objptr
221f4     44 00 00 FF 
221f8     D8 E4 85 F1 | 	sub	objptr, ##35032
221fc     F2 FA 01 F6 | 	mov	result1, objptr
22200     00 A0 03 FF 
22204     00 FA 45 F5 | 	or	result1, ##121634816
22208     44 00 00 FF 
2220c     EC E4 05 F1 | 	add	objptr, ##35052
22210     F2 FA 61 FC | 	wrlong	result1, objptr
22214     44 00 00 FF 
22218     EC E4 85 F1 | 	sub	objptr, ##35052
2221c     F2 FA 01 F6 | 	mov	result1, objptr
22220     00 A8 03 FF 
22224     00 FA 45 F5 | 	or	result1, ##122683392
22228     44 00 00 FF 
2222c     E8 E4 05 F1 | 	add	objptr, ##35048
22230     F2 FA 61 FC | 	wrlong	result1, objptr
22234     44 00 00 FF 
22238     E8 E4 85 F1 | 	sub	objptr, ##35048
2223c     F2 FA 01 F6 | 	mov	result1, objptr
22240     00 B0 03 FF 
22244     00 FA 45 F5 | 	or	result1, ##123731968
22248     44 00 00 FF 
2224c     E0 E4 05 F1 | 	add	objptr, ##35040
22250     F2 FA 61 FC | 	wrlong	result1, objptr
22254     44 00 00 FF 
22258     E0 E4 85 F1 | 	sub	objptr, ##35040
2225c     F2 FA 01 F6 | 	mov	result1, objptr
22260     00 B8 03 FF 
22264     00 FA 45 F5 | 	or	result1, ##124780544
22268     44 00 00 FF 
2226c     DC E4 05 F1 | 	add	objptr, ##35036
22270     F2 FA 61 FC | 	wrlong	result1, objptr
22274     44 00 00 FF 
22278     DC E4 85 F1 | 	sub	objptr, ##35036
2227c     F2 FA 01 F6 | 	mov	result1, objptr
22280     77 FA 25 F4 | 	bith	result1, #119
22284     44 00 00 FF 
22288     FC E4 05 F1 | 	add	objptr, ##35068
2228c     F2 FA 61 FC | 	wrlong	result1, objptr
22290     44 00 00 FF 
22294     FC E4 85 F1 | 	sub	objptr, ##35068
22298     F2 FA 01 F6 | 	mov	result1, objptr
2229c     00 C8 03 FF 
222a0     00 FA 45 F5 | 	or	result1, ##126877696
222a4     44 00 00 FF 
222a8     F0 E4 05 F1 | 	add	objptr, ##35056
222ac     F2 FA 61 FC | 	wrlong	result1, objptr
222b0     44 00 00 FF 
222b4     F0 E4 85 F1 | 	sub	objptr, ##35056
222b8     F2 FA 01 F6 | 	mov	result1, objptr
222bc     00 D0 03 FF 
222c0     00 FA 45 F5 | 	or	result1, ##127926272
222c4     44 00 00 FF 
222c8     F4 E4 05 F1 | 	add	objptr, ##35060
222cc     F2 FA 61 FC | 	wrlong	result1, objptr
222d0     44 00 00 FF 
222d4     F4 E4 85 F1 | 	sub	objptr, ##35060
222d8     F2 FA 01 F6 | 	mov	result1, objptr
222dc     00 D8 03 FF 
222e0     00 FA 45 F5 | 	or	result1, ##128974848
222e4     44 00 00 FF 
222e8     F8 E4 05 F1 | 	add	objptr, ##35064
222ec     F2 FA 61 FC | 	wrlong	result1, objptr
222f0     44 00 00 FF 
222f4     F8 E4 85 F1 | 	sub	objptr, ##35064
222f8     F2 FA 01 F6 | 	mov	result1, objptr
222fc     96 FA 25 F4 | 	bith	result1, #150
22300     44 00 00 FF 
22304     00 E5 05 F1 | 	add	objptr, ##35072
22308     F2 FA 61 FC | 	wrlong	result1, objptr
2230c     44 00 00 FF 
22310     00 E5 85 F1 | 	sub	objptr, ##35072
22314     F2 FA 01 F6 | 	mov	result1, objptr
22318     00 E8 03 FF 
2231c     00 FA 45 F5 | 	or	result1, ##131072000
22320     44 00 00 FF 
22324     04 E5 05 F1 | 	add	objptr, ##35076
22328     F2 FA 61 FC | 	wrlong	result1, objptr
2232c     44 00 00 FF 
22330     04 E5 85 F1 | 	sub	objptr, ##35076
22334     F2 FA 01 F6 | 	mov	result1, objptr
22338     B5 FA 25 F4 | 	bith	result1, #181
2233c     44 00 00 FF 
22340     08 E5 05 F1 | 	add	objptr, ##35080
22344     F2 FA 61 FC | 	wrlong	result1, objptr
22348     44 00 00 FF 
2234c     08 E5 85 F1 | 	sub	objptr, ##35080
22350     F2 FA 01 F6 | 	mov	result1, objptr
22354     D4 FA 25 F4 | 	bith	result1, #212
22358     44 00 00 FF 
2235c     0C E5 05 F1 | 	add	objptr, ##35084
22360     F2 FA 61 FC | 	wrlong	result1, objptr
22364     44 00 00 FF 
22368     0C E5 85 F1 | 	sub	objptr, ##35084
2236c     F2 FA 01 F6 | 	mov	result1, objptr
22370     1B FA 25 F4 | 	bith	result1, #27
22374     44 00 00 FF 
22378     10 E5 05 F1 | 	add	objptr, ##35088
2237c     F2 FA 61 FC | 	wrlong	result1, objptr
22380     44 00 00 FF 
22384     10 E5 85 F1 | 	sub	objptr, ##35088
22388     F2 FA 01 F6 | 	mov	result1, objptr
2238c     00 08 04 FF 
22390     00 FA 45 F5 | 	or	result1, ##135266304
22394     44 00 00 FF 
22398     14 E5 05 F1 | 	add	objptr, ##35092
2239c     F2 FA 61 FC | 	wrlong	result1, objptr
223a0     44 00 00 FF 
223a4     14 E5 85 F1 | 	sub	objptr, ##35092
223a8     F2 FA 01 F6 | 	mov	result1, objptr
223ac     00 10 04 FF 
223b0     00 FA 45 F5 | 	or	result1, ##136314880
223b4     44 00 00 FF 
223b8     1C E5 05 F1 | 	add	objptr, ##35100
223bc     F2 FA 61 FC | 	wrlong	result1, objptr
223c0     44 00 00 FF 
223c4     1C E5 85 F1 | 	sub	objptr, ##35100
223c8     F2 FA 01 F6 | 	mov	result1, objptr
223cc     00 18 04 FF 
223d0     00 FA 45 F5 | 	or	result1, ##137363456
223d4     44 00 00 FF 
223d8     20 E5 05 F1 | 	add	objptr, ##35104
223dc     F2 FA 61 FC | 	wrlong	result1, objptr
223e0     44 00 00 FF 
223e4     20 E5 85 F1 | 	sub	objptr, ##35104
223e8     F2 FA 01 F6 | 	mov	result1, objptr
223ec     00 20 04 FF 
223f0     00 FA 45 F5 | 	or	result1, ##138412032
223f4     44 00 00 FF 
223f8     24 E5 05 F1 | 	add	objptr, ##35108
223fc     F2 FA 61 FC | 	wrlong	result1, objptr
22400     44 00 00 FF 
22404     24 E5 85 F1 | 	sub	objptr, ##35108
22408     F2 FA 01 F6 | 	mov	result1, objptr
2240c     00 28 04 FF 
22410     00 FA 45 F5 | 	or	result1, ##139460608
22414     44 00 00 FF 
22418     18 E5 05 F1 | 	add	objptr, ##35096
2241c     F2 FA 61 FC | 	wrlong	result1, objptr
22420     44 00 00 FF 
22424     18 E5 85 F1 | 	sub	objptr, ##35096
22428     F2 FA 01 F6 | 	mov	result1, objptr
2242c     00 30 04 FF 
22430     00 FA 45 F5 | 	or	result1, ##140509184
22434     44 00 00 FF 
22438     28 E5 05 F1 | 	add	objptr, ##35112
2243c     F2 FA 61 FC | 	wrlong	result1, objptr
22440     44 00 00 FF 
22444     28 E5 85 F1 | 	sub	objptr, ##35112
22448     F2 FA 01 F6 | 	mov	result1, objptr
2244c     00 38 04 FF 
22450     00 FA 45 F5 | 	or	result1, ##141557760
22454     44 00 00 FF 
22458     5C E5 05 F1 | 	add	objptr, ##35164
2245c     F2 FA 61 FC | 	wrlong	result1, objptr
22460     44 00 00 FF 
22464     5C E5 85 F1 | 	sub	objptr, ##35164
22468     F2 FA 01 F6 | 	mov	result1, objptr
2246c     00 40 04 FF 
22470     00 FA 45 F5 | 	or	result1, ##142606336
22474     44 00 00 FF 
22478     54 E5 05 F1 | 	add	objptr, ##35156
2247c     F2 FA 61 FC | 	wrlong	result1, objptr
22480     44 00 00 FF 
22484     54 E5 85 F1 | 	sub	objptr, ##35156
22488     F2 FA 01 F6 | 	mov	result1, objptr
2248c     00 48 04 FF 
22490     00 FA 45 F5 | 	or	result1, ##143654912
22494     44 00 00 FF 
22498     2C E5 05 F1 | 	add	objptr, ##35116
2249c     F2 FA 61 FC | 	wrlong	result1, objptr
224a0     44 00 00 FF 
224a4     2C E5 85 F1 | 	sub	objptr, ##35116
224a8     F2 FA 01 F6 | 	mov	result1, objptr
224ac     00 50 04 FF 
224b0     00 FA 45 F5 | 	or	result1, ##144703488
224b4     44 00 00 FF 
224b8     30 E5 05 F1 | 	add	objptr, ##35120
224bc     F2 FA 61 FC | 	wrlong	result1, objptr
224c0     44 00 00 FF 
224c4     30 E5 85 F1 | 	sub	objptr, ##35120
224c8     F2 FA 01 F6 | 	mov	result1, objptr
224cc     00 58 04 FF 
224d0     00 FA 45 F5 | 	or	result1, ##145752064
224d4     44 00 00 FF 
224d8     4C E5 05 F1 | 	add	objptr, ##35148
224dc     F2 FA 61 FC | 	wrlong	result1, objptr
224e0     44 00 00 FF 
224e4     4C E5 85 F1 | 	sub	objptr, ##35148
224e8     F2 FA 01 F6 | 	mov	result1, objptr
224ec     00 60 04 FF 
224f0     00 FA 45 F5 | 	or	result1, ##146800640
224f4     44 00 00 FF 
224f8     50 E5 05 F1 | 	add	objptr, ##35152
224fc     F2 FA 61 FC | 	wrlong	result1, objptr
22500     44 00 00 FF 
22504     50 E5 85 F1 | 	sub	objptr, ##35152
22508     F2 FA 01 F6 | 	mov	result1, objptr
2250c     00 68 04 FF 
22510     00 FA 45 F5 | 	or	result1, ##147849216
22514     44 00 00 FF 
22518     6C E5 05 F1 | 	add	objptr, ##35180
2251c     F2 FA 61 FC | 	wrlong	result1, objptr
22520     44 00 00 FF 
22524     6C E5 85 F1 | 	sub	objptr, ##35180
22528     F2 FA 01 F6 | 	mov	result1, objptr
2252c     00 70 04 FF 
22530     00 FA 45 F5 | 	or	result1, ##148897792
22534     44 00 00 FF 
22538     68 E5 05 F1 | 	add	objptr, ##35176
2253c     F2 FA 61 FC | 	wrlong	result1, objptr
22540     44 00 00 FF 
22544     68 E5 85 F1 | 	sub	objptr, ##35176
22548     F2 FA 01 F6 | 	mov	result1, objptr
2254c     00 78 04 FF 
22550     00 FA 45 F5 | 	or	result1, ##149946368
22554     44 00 00 FF 
22558     78 E5 05 F1 | 	add	objptr, ##35192
2255c     F2 FA 61 FC | 	wrlong	result1, objptr
22560     44 00 00 FF 
22564     78 E5 85 F1 | 	sub	objptr, ##35192
22568     F2 FA 01 F6 | 	mov	result1, objptr
2256c     00 80 04 FF 
22570     00 FA 45 F5 | 	or	result1, ##150994944
22574     44 00 00 FF 
22578     44 E5 05 F1 | 	add	objptr, ##35140
2257c     F2 FA 61 FC | 	wrlong	result1, objptr
22580     44 00 00 FF 
22584     44 E5 85 F1 | 	sub	objptr, ##35140
22588     F2 FA 01 F6 | 	mov	result1, objptr
2258c     00 88 04 FF 
22590     00 FA 45 F5 | 	or	result1, ##152043520
22594     44 00 00 FF 
22598     74 E5 05 F1 | 	add	objptr, ##35188
2259c     F2 FA 61 FC | 	wrlong	result1, objptr
225a0     44 00 00 FF 
225a4     74 E5 85 F1 | 	sub	objptr, ##35188
225a8     F2 FA 01 F6 | 	mov	result1, objptr
225ac     00 90 04 FF 
225b0     00 FA 45 F5 | 	or	result1, ##153092096
225b4     44 00 00 FF 
225b8     64 E5 05 F1 | 	add	objptr, ##35172
225bc     F2 FA 61 FC | 	wrlong	result1, objptr
225c0     44 00 00 FF 
225c4     64 E5 85 F1 | 	sub	objptr, ##35172
225c8     F2 FA 01 F6 | 	mov	result1, objptr
225cc     00 98 04 FF 
225d0     00 FA 45 F5 | 	or	result1, ##154140672
225d4     43 00 00 FF 
225d8     14 E5 05 F1 | 	add	objptr, ##34580
225dc     F2 FA 61 FC | 	wrlong	result1, objptr
225e0     43 00 00 FF 
225e4     14 E5 85 F1 | 	sub	objptr, ##34580
225e8     F2 FA 01 F6 | 	mov	result1, objptr
225ec     00 A0 04 FF 
225f0     00 FA 45 F5 | 	or	result1, ##155189248
225f4     44 00 00 FF 
225f8     34 E5 05 F1 | 	add	objptr, ##35124
225fc     F2 FA 61 FC | 	wrlong	result1, objptr
22600     44 00 00 FF 
22604     34 E5 85 F1 | 	sub	objptr, ##35124
22608     F2 FA 01 F6 | 	mov	result1, objptr
2260c     00 08 01 FF 
22610     00 FA 45 F5 | 	or	result1, ##34603008
22614     44 00 00 FF 
22618     3C E5 05 F1 | 	add	objptr, ##35132
2261c     F2 FA 61 FC | 	wrlong	result1, objptr
22620     44 00 00 FF 
22624     3C E5 85 F1 | 	sub	objptr, ##35132
22628     F2 FA 01 F6 | 	mov	result1, objptr
2262c     00 A8 04 FF 
22630     00 FA 45 F5 | 	or	result1, ##156237824
22634     44 00 00 FF 
22638     38 E5 05 F1 | 	add	objptr, ##35128
2263c     F2 FA 61 FC | 	wrlong	result1, objptr
22640     44 00 00 FF 
22644     38 E5 85 F1 | 	sub	objptr, ##35128
22648     F2 FA 01 F6 | 	mov	result1, objptr
2264c     00 B0 04 FF 
22650     00 FA 45 F5 | 	or	result1, ##157286400
22654     44 00 00 FF 
22658     7C E5 05 F1 | 	add	objptr, ##35196
2265c     F2 FA 61 FC | 	wrlong	result1, objptr
22660     44 00 00 FF 
22664     7C E5 85 F1 | 	sub	objptr, ##35196
22668     F2 FA 01 F6 | 	mov	result1, objptr
2266c     00 B8 04 FF 
22670     00 FA 45 F5 | 	or	result1, ##158334976
22674     44 00 00 FF 
22678     80 E5 05 F1 | 	add	objptr, ##35200
2267c     F2 FA 61 FC | 	wrlong	result1, objptr
22680     44 00 00 FF 
22684     80 E5 85 F1 | 	sub	objptr, ##35200
22688     F2 FA 01 F6 | 	mov	result1, objptr
2268c     00 C0 04 FF 
22690     00 FA 45 F5 | 	or	result1, ##159383552
22694     44 00 00 FF 
22698     84 E5 05 F1 | 	add	objptr, ##35204
2269c     F2 FA 61 FC | 	wrlong	result1, objptr
226a0     44 00 00 FF 
226a4     84 E5 85 F1 | 	sub	objptr, ##35204
226a8     F2 FA 01 F6 | 	mov	result1, objptr
226ac     00 C8 04 FF 
226b0     00 FA 45 F5 | 	or	result1, ##160432128
226b4     44 00 00 FF 
226b8     88 E5 05 F1 | 	add	objptr, ##35208
226bc     F2 FA 61 FC | 	wrlong	result1, objptr
226c0     44 00 00 FF 
226c4     88 E5 85 F1 | 	sub	objptr, ##35208
226c8     F2 FA 01 F6 | 	mov	result1, objptr
226cc     00 D0 04 FF 
226d0     00 FA 45 F5 | 	or	result1, ##161480704
226d4     44 00 00 FF 
226d8     90 E5 05 F1 | 	add	objptr, ##35216
226dc     F2 FA 61 FC | 	wrlong	result1, objptr
226e0     44 00 00 FF 
226e4     90 E5 85 F1 | 	sub	objptr, ##35216
226e8     F2 FA 01 F6 | 	mov	result1, objptr
226ec     00 D8 04 FF 
226f0     00 FA 45 F5 | 	or	result1, ##162529280
226f4     44 00 00 FF 
226f8     94 E5 05 F1 | 	add	objptr, ##35220
226fc     F2 FA 61 FC | 	wrlong	result1, objptr
22700     44 00 00 FF 
22704     94 E5 85 F1 | 	sub	objptr, ##35220
22708     F2 FA 01 F6 | 	mov	result1, objptr
2270c     00 E0 04 FF 
22710     00 FA 45 F5 | 	or	result1, ##163577856
22714     44 00 00 FF 
22718     98 E5 05 F1 | 	add	objptr, ##35224
2271c     F2 FA 61 FC | 	wrlong	result1, objptr
22720     44 00 00 FF 
22724     98 E5 85 F1 | 	sub	objptr, ##35224
22728     F2 FA 01 F6 | 	mov	result1, objptr
2272c     00 E8 04 FF 
22730     00 FA 45 F5 | 	or	result1, ##164626432
22734     44 00 00 FF 
22738     8C E5 05 F1 | 	add	objptr, ##35212
2273c     F2 FA 61 FC | 	wrlong	result1, objptr
22740     44 00 00 FF 
22744     8C E5 85 F1 | 	sub	objptr, ##35212
22748     F2 FA 01 F6 | 	mov	result1, objptr
2274c     00 F0 04 FF 
22750     00 FA 45 F5 | 	or	result1, ##165675008
22754     44 00 00 FF 
22758     70 E5 05 F1 | 	add	objptr, ##35184
2275c     F2 FA 61 FC | 	wrlong	result1, objptr
22760     44 00 00 FF 
22764     70 E5 85 F1 | 	sub	objptr, ##35184
22768     F2 FA 01 F6 | 	mov	result1, objptr
2276c     00 F8 04 FF 
22770     00 FA 45 F5 | 	or	result1, ##166723584
22774     44 00 00 FF 
22778     60 E5 05 F1 | 	add	objptr, ##35168
2277c     F2 FA 61 FC | 	wrlong	result1, objptr
22780     44 00 00 FF 
22784     60 E5 85 F1 | 	sub	objptr, ##35168
22788     F2 FA 01 F6 | 	mov	result1, objptr
2278c     00 00 05 FF 
22790     00 FA 45 F5 | 	or	result1, ##167772160
22794     44 00 00 FF 
22798     9C E5 05 F1 | 	add	objptr, ##35228
2279c     F2 FA 61 FC | 	wrlong	result1, objptr
227a0     44 00 00 FF 
227a4     9C E5 85 F1 | 	sub	objptr, ##35228
227a8     F2 FA 01 F6 | 	mov	result1, objptr
227ac     00 08 05 FF 
227b0     00 FA 45 F5 | 	or	result1, ##168820736
227b4     44 00 00 FF 
227b8     A0 E5 05 F1 | 	add	objptr, ##35232
227bc     F2 FA 61 FC | 	wrlong	result1, objptr
227c0     44 00 00 FF 
227c4     A0 E5 85 F1 | 	sub	objptr, ##35232
227c8     F2 FA 01 F6 | 	mov	result1, objptr
227cc     00 10 05 FF 
227d0     00 FA 45 F5 | 	or	result1, ##169869312
227d4     44 00 00 FF 
227d8     A4 E5 05 F1 | 	add	objptr, ##35236
227dc     F2 FA 61 FC | 	wrlong	result1, objptr
227e0     44 00 00 FF 
227e4     A4 E5 85 F1 | 	sub	objptr, ##35236
227e8     F2 FA 01 F6 | 	mov	result1, objptr
227ec     00 18 05 FF 
227f0     00 FA 45 F5 | 	or	result1, ##170917888
227f4     44 00 00 FF 
227f8     A8 E5 05 F1 | 	add	objptr, ##35240
227fc     F2 FA 61 FC | 	wrlong	result1, objptr
22800     44 00 00 FF 
22804     A8 E5 85 F1 | 	sub	objptr, ##35240
22808     F2 FA 01 F6 | 	mov	result1, objptr
2280c     00 20 05 FF 
22810     00 FA 45 F5 | 	or	result1, ##171966464
22814     44 00 00 FF 
22818     AC E5 05 F1 | 	add	objptr, ##35244
2281c     F2 FA 61 FC | 	wrlong	result1, objptr
22820     44 00 00 FF 
22824     AC E5 85 F1 | 	sub	objptr, ##35244
22828                 | _init_commands_ret
22828     2D 00 64 FD | 	ret
2282c                 | 
2282c                 | ' 
2282c                 | ' ''-------------------------------- Audio subsystem init  -------------------------------------
2282c                 | ' 
2282c                 | ' sub init_audio
2282c                 | _init_audio
2282c     06 4A 05 F6 | 	mov	COUNT_, #6
22830     A8 00 A0 FD | 	call	#pushregs_
22834     00 C0 1F FF 
22838     00 26 06 F6 | 	mov	local01, ##1065353216
2283c                 | ' 
2283c                 | ' for i=0 to 1023 : psdpoke       2*i,round(32600*sin(i*3.1415926535/512.0)) : next i               		' 0 : sinewave  
2283c     00 28 06 F6 | 	mov	local02, #0
22840                 | LR__2630
22840     14 2B 02 F6 | 	mov	local03, local02
22844     01 2A 66 F0 | 	shl	local03, #1
22848     58 7F 23 FF 
2284c     00 2C 06 F6 | 	mov	local04, ##1191096320
22850     14 13 52 F6 | 	abs	arg01, local02 wc
22854     1F 2E C6 C9 |  if_b	decod	local05, #31
22858     00 2E 06 36 |  if_ae	mov	local05, #0
2285c     64 70 B0 FD | 	call	#__system___float_fromuns
22860     17 FB 61 F5 | 	xor	result1, local05
22864     FD 12 02 F6 | 	mov	arg01, result1
22868     87 24 20 FF 
2286c     DB 15 06 F6 | 	mov	arg02, ##1078530011
22870     54 74 B0 FD | 	call	#__system___float_mul
22874     FD 12 02 F6 | 	mov	arg01, result1
22878     00 00 22 FF 
2287c     00 14 06 F6 | 	mov	arg02, ##1140850688
22880     48 76 B0 FD | 	call	#__system___float_div
22884     FD 12 02 F6 | 	mov	arg01, result1
22888     9C 7D B0 FD | 	call	#__system____builtin_sinf
2288c     FD 14 02 F6 | 	mov	arg02, result1
22890     16 13 02 F6 | 	mov	arg01, local04
22894     30 74 B0 FD | 	call	#__system___float_mul
22898     FD 12 02 F6 | 	mov	arg01, result1
2289c     01 14 06 F6 | 	mov	arg02, #1
228a0     EC 78 B0 FD | 	call	#__system___float_tointeger
228a4     FD 14 02 F6 | 	mov	arg02, result1
228a8     15 13 02 F6 | 	mov	arg01, local03
228ac     6C 0D B0 FD | 	call	#_psdpoke
228b0     01 28 06 F1 | 	add	local02, #1
228b4     02 00 00 FF 
228b8     00 28 56 F2 | 	cmps	local02, ##1024 wc
228bc     80 FF 9F CD |  if_b	jmp	#LR__2630
228c0                 | ' for i=0 to 511  : psdpoke  2048+2*i, -32512+127*i: psdpoke 2048+2*(512+i),32512-127*i : next i   		' 1 : triangle 
228c0     00 28 06 F6 | 	mov	local02, #0
228c4                 | LR__2631
228c4     14 15 02 F6 | 	mov	arg02, local02
228c8     01 14 66 F0 | 	shl	arg02, #1
228cc     0B 12 C6 F9 | 	decod	arg01, #11
228d0     0A 13 02 F1 | 	add	arg01, arg02
228d4     14 2D 02 F6 | 	mov	local04, local02
228d8     07 2C 66 F0 | 	shl	local04, #7
228dc     14 2D 82 F1 | 	sub	local04, local02
228e0     C0 FF 7F FF 
228e4     00 15 06 F6 | 	mov	arg02, ##-32512
228e8     16 15 02 F1 | 	add	arg02, local04
228ec     2C 0D B0 FD | 	call	#_psdpoke
228f0     09 2C C6 F9 | 	decod	local04, #9
228f4     14 2D 02 F1 | 	add	local04, local02
228f8     01 2C 66 F0 | 	shl	local04, #1
228fc     0B 12 C6 F9 | 	decod	arg01, #11
22900     16 13 02 F1 | 	add	arg01, local04
22904     14 2F 02 F6 | 	mov	local05, local02
22908     07 2E 66 F0 | 	shl	local05, #7
2290c     14 2F 82 F1 | 	sub	local05, local02
22910     3F 00 00 FF 
22914     00 15 06 F6 | 	mov	arg02, ##32512
22918     17 15 82 F1 | 	sub	arg02, local05
2291c     FC 0C B0 FD | 	call	#_psdpoke
22920     01 28 06 F1 | 	add	local02, #1
22924     01 00 00 FF 
22928     00 28 56 F2 | 	cmps	local02, ##512 wc
2292c     94 FF 9F CD |  if_b	jmp	#LR__2631
22930                 | ' for i=0 to 1023 : psdpoke  4096+2*i, -32256+63*i : next i 							' 2 saw 4 sqr 8 noise 3567 
22930     00 28 06 F6 | 	mov	local02, #0
22934                 | LR__2632
22934     14 2F 02 F6 | 	mov	local05, local02
22938     01 2E 66 F0 | 	shl	local05, #1
2293c     0C 12 C6 F9 | 	decod	arg01, #12
22940     17 13 02 F1 | 	add	arg01, local05
22944     14 2F 02 F6 | 	mov	local05, local02
22948     06 2E 66 F0 | 	shl	local05, #6
2294c     14 2F 82 F1 | 	sub	local05, local02
22950     C1 FF 7F FF 
22954     00 14 06 F6 | 	mov	arg02, ##-32256
22958     17 15 02 F1 | 	add	arg02, local05
2295c     BC 0C B0 FD | 	call	#_psdpoke
22960     01 28 06 F1 | 	add	local02, #1
22964     02 00 00 FF 
22968     00 28 56 F2 | 	cmps	local02, ##1024 wc
2296c     C4 FF 9F CD |  if_b	jmp	#LR__2632
22970                 | ' for i=0 to 127  : psdpoke  6144+2*i, -32600 : next i : for i=128 to 1023 :  psdpoke 6144+2*i, 32600 : next i 	' 3 pulse 12.5%
22970     00 28 06 F6 | 	mov	local02, #0
22974                 | LR__2633
22974     14 2F 02 F6 | 	mov	local05, local02
22978     01 2E 66 F0 | 	shl	local05, #1
2297c     0C 00 00 FF 
22980     00 12 06 F6 | 	mov	arg01, ##6144
22984     17 13 02 F1 | 	add	arg01, local05
22988     C0 FF 7F FF 
2298c     A8 14 06 F6 | 	mov	arg02, ##-32600
22990     88 0C B0 FD | 	call	#_psdpoke
22994     01 28 06 F1 | 	add	local02, #1
22998     80 28 56 F2 | 	cmps	local02, #128 wc
2299c     D4 FF 9F CD |  if_b	jmp	#LR__2633
229a0     80 28 06 F6 | 	mov	local02, #128
229a4                 | LR__2634
229a4     14 2F 02 F6 | 	mov	local05, local02
229a8     01 2E 66 F0 | 	shl	local05, #1
229ac     0C 00 00 FF 
229b0     00 12 06 F6 | 	mov	arg01, ##6144
229b4     17 13 02 F1 | 	add	arg01, local05
229b8     3F 00 00 FF 
229bc     58 15 06 F6 | 	mov	arg02, ##32600
229c0     58 0C B0 FD | 	call	#_psdpoke
229c4     01 28 06 F1 | 	add	local02, #1
229c8     02 00 00 FF 
229cc     00 28 16 F2 | 	cmp	local02, ##1024 wc
229d0     D0 FF 9F CD |  if_b	jmp	#LR__2634
229d4                 | ' for i=0 to 511  : psdpoke  8192+2*i, -32600 : next i : for i=512 to 1023 :  psdpoke 8192+2*i, 32600 : next i 	' 4 square
229d4     00 28 06 F6 | 	mov	local02, #0
229d8                 | LR__2635
229d8     14 2F 02 F6 | 	mov	local05, local02
229dc     01 2E 66 F0 | 	shl	local05, #1
229e0     0D 12 C6 F9 | 	decod	arg01, #13
229e4     17 13 02 F1 | 	add	arg01, local05
229e8     C0 FF 7F FF 
229ec     A8 14 06 F6 | 	mov	arg02, ##-32600
229f0     28 0C B0 FD | 	call	#_psdpoke
229f4     01 28 06 F1 | 	add	local02, #1
229f8     01 00 00 FF 
229fc     00 28 56 F2 | 	cmps	local02, ##512 wc
22a00     D4 FF 9F CD |  if_b	jmp	#LR__2635
22a04     09 28 C6 F9 | 	decod	local02, #9
22a08                 | LR__2636
22a08     14 2F 02 F6 | 	mov	local05, local02
22a0c     01 2E 66 F0 | 	shl	local05, #1
22a10     0D 12 C6 F9 | 	decod	arg01, #13
22a14     17 13 02 F1 | 	add	arg01, local05
22a18     3F 00 00 FF 
22a1c     58 15 06 F6 | 	mov	arg02, ##32600
22a20     F8 0B B0 FD | 	call	#_psdpoke
22a24     01 28 06 F1 | 	add	local02, #1
22a28     02 00 00 FF 
22a2c     00 28 16 F2 | 	cmp	local02, ##1024 wc
22a30     D4 FF 9F CD |  if_b	jmp	#LR__2636
22a34                 | ' for i=0 to 255  : psdpoke 10240+2*i, -32600 : next i : for i=256 to 1023 : psdpoke 10240+2*i, 32600 : next i 	' 5 pulse 25%
22a34     00 28 06 F6 | 	mov	local02, #0
22a38                 | LR__2637
22a38     14 2F 02 F6 | 	mov	local05, local02
22a3c     01 2E 66 F0 | 	shl	local05, #1
22a40     14 00 00 FF 
22a44     00 12 06 F6 | 	mov	arg01, ##10240
22a48     17 13 02 F1 | 	add	arg01, local05
22a4c     C0 FF 7F FF 
22a50     A8 14 06 F6 | 	mov	arg02, ##-32600
22a54     C4 0B B0 FD | 	call	#_psdpoke
22a58     01 28 06 F1 | 	add	local02, #1
22a5c     00 29 56 F2 | 	cmps	local02, #256 wc
22a60     D4 FF 9F CD |  if_b	jmp	#LR__2637
22a64     00 29 06 F6 | 	mov	local02, #256
22a68                 | LR__2638
22a68     14 2F 02 F6 | 	mov	local05, local02
22a6c     01 2E 66 F0 | 	shl	local05, #1
22a70     14 00 00 FF 
22a74     00 12 06 F6 | 	mov	arg01, ##10240
22a78     17 13 02 F1 | 	add	arg01, local05
22a7c     3F 00 00 FF 
22a80     58 15 06 F6 | 	mov	arg02, ##32600
22a84     94 0B B0 FD | 	call	#_psdpoke
22a88     01 28 06 F1 | 	add	local02, #1
22a8c     02 00 00 FF 
22a90     00 28 16 F2 | 	cmp	local02, ##1024 wc
22a94     D0 FF 9F CD |  if_b	jmp	#LR__2638
22a98                 | ' for i=12288 to 61436 step 4 : pslpoke i,0 : next i 
22a98     18 00 00 FF 
22a9c     00 28 06 F6 | 	mov	local02, ##12288
22aa0                 | LR__2639
22aa0     14 13 02 F6 | 	mov	arg01, local02
22aa4     00 14 06 F6 | 	mov	arg02, #0
22aa8     28 0B B0 FD | 	call	#_pslpoke
22aac     04 28 06 F1 | 	add	local02, #4
22ab0     77 00 00 FF 
22ab4     FD 29 56 F2 | 	cmps	local02, ##61437 wc
22ab8     E4 FF 9F CD |  if_b	jmp	#LR__2639
22abc                 | ' for i=0 to 1023 : psdpoke 61440+2*i, dpeek(varptr(atari12)+16+2*i) : next i 				' 6 pokey waveform 12	
22abc     00 28 06 F6 | 	mov	local02, #0
22ac0                 | LR__2640
22ac0     14 2F 02 F6 | 	mov	local05, local02
22ac4     01 2E 66 F0 | 	shl	local05, #1
22ac8     78 00 00 FF 
22acc     00 2A 06 F6 | 	mov	local03, ##61440
22ad0     17 2B 02 F1 | 	add	local03, local05
22ad4     12 00 00 FF 
22ad8     BA EA 05 F1 | 	add	ptr__dat__, ##9402
22adc     F5 12 02 F6 | 	mov	arg01, ptr__dat__
22ae0     12 00 00 FF 
22ae4     BA EA 85 F1 | 	sub	ptr__dat__, ##9402
22ae8     10 12 06 F1 | 	add	arg01, #16
22aec     14 15 02 F6 | 	mov	arg02, local02
22af0     01 14 66 F0 | 	shl	arg02, #1
22af4     0A 13 02 F1 | 	add	arg01, arg02
22af8     09 15 E2 FA | 	rdword	arg02, arg01
22afc     15 13 02 F6 | 	mov	arg01, local03
22b00     18 0B B0 FD | 	call	#_psdpoke
22b04     01 28 06 F1 | 	add	local02, #1
22b08     02 00 00 FF 
22b0c     00 28 56 F2 | 	cmps	local02, ##1024 wc
22b10     AC FF 9F CD |  if_b	jmp	#LR__2640
22b14                 | ' for i=0 to 1023 : psdpoke 63488+2*i, dpeek(varptr(atari2)+16+2*i) : next i 				' 7 pokey waveform 2	
22b14     00 28 06 F6 | 	mov	local02, #0
22b18                 | LR__2641
22b18     14 2F 02 F6 | 	mov	local05, local02
22b1c     01 2E 66 F0 | 	shl	local05, #1
22b20     7C 00 00 FF 
22b24     00 2A 06 F6 | 	mov	local03, ##63488
22b28     17 2B 02 F1 | 	add	local03, local05
22b2c     0E 00 00 FF 
22b30     AA EA 05 F1 | 	add	ptr__dat__, ##7338
22b34     F5 12 02 F6 | 	mov	arg01, ptr__dat__
22b38     0E 00 00 FF 
22b3c     AA EA 85 F1 | 	sub	ptr__dat__, ##7338
22b40     10 12 06 F1 | 	add	arg01, #16
22b44     14 15 02 F6 | 	mov	arg02, local02
22b48     01 14 66 F0 | 	shl	arg02, #1
22b4c     0A 13 02 F1 | 	add	arg01, arg02
22b50     09 15 E2 FA | 	rdword	arg02, arg01
22b54     15 13 02 F6 | 	mov	arg01, local03
22b58     C0 0A B0 FD | 	call	#_psdpoke
22b5c     01 28 06 F1 | 	add	local02, #1
22b60     02 00 00 FF 
22b64     00 28 56 F2 | 	cmps	local02, ##1024 wc
22b68     AC FF 9F CD |  if_b	jmp	#LR__2641
22b6c                 | ' for i=0 to 255 : envbuf(0,i)=65280-256*i : next i							' instant attack, linear release	
22b6c     00 28 06 F6 | 	mov	local02, #0
22b70     0C 00 00 FF 
22b74     D8 E4 05 F1 | 	add	objptr, ##6360
22b78     97 18 48 FB | 	callpa	#(@LR__2643-@LR__2642)>>2,fcache_load_ptr_
22b7c                 | LR__2642
22b7c     14 2F 02 F6 | 	mov	local05, local02
22b80     01 2E 66 F0 | 	shl	local05, #1
22b84     F2 2E 02 F1 | 	add	local05, objptr
22b88     14 2B 02 F6 | 	mov	local03, local02
22b8c     08 2A 66 F0 | 	shl	local03, #8
22b90     7F 00 00 FF 
22b94     00 31 06 F6 | 	mov	local06, ##65280
22b98     15 31 82 F1 | 	sub	local06, local03
22b9c     17 31 52 FC | 	wrword	local06, local05
22ba0     01 28 06 F1 | 	add	local02, #1
22ba4     00 29 56 F2 | 	cmps	local02, #256 wc
22ba8     D0 FF 9F CD |  if_b	jmp	#LR__2642
22bac                 | LR__2643
22bac     0C 00 00 FF 
22bb0     D8 E4 85 F1 | 	sub	objptr, ##6360
22bb4                 | ' for i=0 to 255 : envbuf(1,i)=round(65280.0*k) : k=k*0.975 :  next i : envbuf(1,255)=0			' instant attack, log release
22bb4     00 28 06 F6 | 	mov	local02, #0
22bb8                 | LR__2644
22bb8     14 2F 02 F6 | 	mov	local05, local02
22bbc     01 2E 66 F0 | 	shl	local05, #1
22bc0     0D 00 00 FF 
22bc4     D8 E4 05 F1 | 	add	objptr, ##6872
22bc8     F2 2E 02 F1 | 	add	local05, objptr
22bcc     80 BF 23 FF 
22bd0     00 12 06 F6 | 	mov	arg01, ##1199505408
22bd4     13 15 02 F6 | 	mov	arg02, local01
22bd8     0D 00 00 FF 
22bdc     D8 E4 85 F1 | 	sub	objptr, ##6872
22be0     E4 70 B0 FD | 	call	#__system___float_mul
22be4     FD 12 02 F6 | 	mov	arg01, result1
22be8     01 14 06 F6 | 	mov	arg02, #1
22bec     A0 75 B0 FD | 	call	#__system___float_tointeger
22bf0     17 FB 51 FC | 	wrword	result1, local05
22bf4     13 13 02 F6 | 	mov	arg01, local01
22bf8     CC BC 1F FF 
22bfc     9A 15 06 F6 | 	mov	arg02, ##1064933786
22c00     C4 70 B0 FD | 	call	#__system___float_mul
22c04     FD 26 02 F6 | 	mov	local01, result1
22c08     01 28 06 F1 | 	add	local02, #1
22c0c     00 29 56 F2 | 	cmps	local02, #256 wc
22c10     A4 FF 9F CD |  if_b	jmp	#LR__2644
22c14     0E 00 00 FF 
22c18     D6 E4 05 F1 | 	add	objptr, ##7382
22c1c     F2 00 58 FC | 	wrword	#0, objptr
22c20                 | ' for i=0 to 254 : envbuf(2,i)=65280 : next i : envbuf(2,255)=0						' instant attack, instant release
22c20     00 28 06 F6 | 	mov	local02, #0
22c24     02 E4 05 F1 | 	add	objptr, #2
22c28     97 10 48 FB | 	callpa	#(@LR__2646-@LR__2645)>>2,fcache_load_ptr_
22c2c                 | LR__2645
22c2c     14 2F 02 F6 | 	mov	local05, local02
22c30     01 2E 66 F0 | 	shl	local05, #1
22c34     F2 2E 02 F1 | 	add	local05, objptr
22c38     7F 00 80 FF 
22c3c     17 01 5A FC | 	wrword	##65280, local05
22c40     01 28 06 F1 | 	add	local02, #1
22c44     FF 28 56 F2 | 	cmps	local02, #255 wc
22c48     E0 FF 9F CD |  if_b	jmp	#LR__2645
22c4c                 | LR__2646
22c4c     FE E5 05 F1 | 	add	objptr, #510
22c50     F2 00 58 FC | 	wrword	#0, objptr
22c54                 | ' for i=0 to 15 :  envbuf(3,i)=4096*i : next i 
22c54     00 28 06 F6 | 	mov	local02, #0
22c58     02 E4 05 F1 | 	add	objptr, #2
22c5c     97 52 48 FB | 	callpa	#(@LR__2651-@LR__2647)>>2,fcache_load_ptr_
22c60                 | LR__2647
22c60     14 2F 02 F6 | 	mov	local05, local02
22c64     01 2E 66 F0 | 	shl	local05, #1
22c68     F2 2E 02 F1 | 	add	local05, objptr
22c6c     14 31 02 F6 | 	mov	local06, local02
22c70     0C 30 66 F0 | 	shl	local06, #12
22c74     17 31 52 FC | 	wrword	local06, local05
22c78     01 28 06 F1 | 	add	local02, #1
22c7c     10 28 56 F2 | 	cmps	local02, #16 wc
22c80     DC FF 9F CD |  if_b	jmp	#LR__2647
22c84                 | ' for i=16 to 239: envbuf(3,i)=65280 : next i
22c84     10 28 06 F6 | 	mov	local02, #16
22c88                 | LR__2648
22c88     14 2F 02 F6 | 	mov	local05, local02
22c8c     01 2E 66 F0 | 	shl	local05, #1
22c90     F2 2E 02 F1 | 	add	local05, objptr
22c94     7F 00 80 FF 
22c98     17 01 5A FC | 	wrword	##65280, local05
22c9c     01 28 06 F1 | 	add	local02, #1
22ca0     F0 28 16 F2 | 	cmp	local02, #240 wc
22ca4     E0 FF 9F CD |  if_b	jmp	#LR__2648
22ca8                 | ' for i=240 to 255 : envbuf(3,i)=4096*(255-i) : next i							' smooth attack, smooth release
22ca8     F0 28 06 F6 | 	mov	local02, #240
22cac                 | LR__2649
22cac     14 2F 02 F6 | 	mov	local05, local02
22cb0     01 2E 66 F0 | 	shl	local05, #1
22cb4     F2 2E 02 F1 | 	add	local05, objptr
22cb8     FF 2A 06 F6 | 	mov	local03, #255
22cbc     14 2B 82 F1 | 	sub	local03, local02
22cc0     0C 2A 66 F0 | 	shl	local03, #12
22cc4     17 2B 52 FC | 	wrword	local03, local05
22cc8     01 28 06 F1 | 	add	local02, #1
22ccc     00 29 16 F2 | 	cmp	local02, #256 wc
22cd0     D8 FF 9F CD |  if_b	jmp	#LR__2649
22cd4                 | ' for i=0 to 255 : envbuf(4,i)=256*i : next i : envbuf(4,255)=0						' slow attack, instant release
22cd4     00 28 06 F6 | 	mov	local02, #0
22cd8     01 00 00 FF 
22cdc     00 E4 05 F1 | 	add	objptr, ##512
22ce0                 | LR__2650
22ce0     14 2F 02 F6 | 	mov	local05, local02
22ce4     01 2E 66 F0 | 	shl	local05, #1
22ce8     F2 2E 02 F1 | 	add	local05, objptr
22cec     14 31 02 F6 | 	mov	local06, local02
22cf0     08 30 66 F0 | 	shl	local06, #8
22cf4     17 31 52 FC | 	wrword	local06, local05
22cf8     01 28 06 F1 | 	add	local02, #1
22cfc     00 29 56 F2 | 	cmps	local02, #256 wc
22d00     DC FF 9F CD |  if_b	jmp	#LR__2650
22d04                 | LR__2651
22d04     FE E5 05 F1 | 	add	objptr, #510
22d08     F2 00 58 FC | 	wrword	#0, objptr
22d0c                 | ' for i=0 to 239 : envbuf(5,i)=272*i : next i : for i=240 to 255 : envbuf(5,i)=4096*(255-i) : next i	' slow attack, smooth release
22d0c     00 28 06 F6 | 	mov	local02, #0
22d10     02 E4 05 F1 | 	add	objptr, #2
22d14     97 6A 48 FB | 	callpa	#(@LR__2656-@LR__2652)>>2,fcache_load_ptr_
22d18                 | LR__2652
22d18     14 2F 02 F6 | 	mov	local05, local02
22d1c     01 2E 66 F0 | 	shl	local05, #1
22d20     F2 2E 02 F1 | 	add	local05, objptr
22d24     14 31 02 F6 | 	mov	local06, local02
22d28     04 30 66 F0 | 	shl	local06, #4
22d2c     14 31 02 F1 | 	add	local06, local02
22d30     04 30 66 F0 | 	shl	local06, #4
22d34     17 31 52 FC | 	wrword	local06, local05
22d38     01 28 06 F1 | 	add	local02, #1
22d3c     F0 28 56 F2 | 	cmps	local02, #240 wc
22d40     D4 FF 9F CD |  if_b	jmp	#LR__2652
22d44     F0 28 06 F6 | 	mov	local02, #240
22d48                 | LR__2653
22d48     14 2F 02 F6 | 	mov	local05, local02
22d4c     01 2E 66 F0 | 	shl	local05, #1
22d50     F2 2E 02 F1 | 	add	local05, objptr
22d54     FF 2A 06 F6 | 	mov	local03, #255
22d58     14 2B 82 F1 | 	sub	local03, local02
22d5c     0C 2A 66 F0 | 	shl	local03, #12
22d60     17 2B 52 FC | 	wrword	local03, local05
22d64     01 28 06 F1 | 	add	local02, #1
22d68     00 29 16 F2 | 	cmp	local02, #256 wc
22d6c     D8 FF 9F CD |  if_b	jmp	#LR__2653
22d70                 | ' for i=0 to 127 : envbuf(6,i)=512*i : envbuf(6,255-i)=512*i : next i 					' triangle
22d70     00 28 06 F6 | 	mov	local02, #0
22d74     01 00 00 FF 
22d78     00 E4 05 F1 | 	add	objptr, ##512
22d7c                 | LR__2654
22d7c     14 2F 02 F6 | 	mov	local05, local02
22d80     01 2E 66 F0 | 	shl	local05, #1
22d84     F2 2E 02 F1 | 	add	local05, objptr
22d88     14 31 02 F6 | 	mov	local06, local02
22d8c     09 30 66 F0 | 	shl	local06, #9
22d90     17 31 52 FC | 	wrword	local06, local05
22d94     FF 2E 06 F6 | 	mov	local05, #255
22d98     14 2F 82 F1 | 	sub	local05, local02
22d9c     01 2E 66 F0 | 	shl	local05, #1
22da0     F2 2E 02 F1 | 	add	local05, objptr
22da4     14 31 02 F6 | 	mov	local06, local02
22da8     09 30 66 F0 | 	shl	local06, #9
22dac     17 31 52 FC | 	wrword	local06, local05
22db0     01 28 06 F1 | 	add	local02, #1
22db4     80 28 56 F2 | 	cmps	local02, #128 wc
22db8     C0 FF 9F CD |  if_b	jmp	#LR__2654
22dbc                 | ' for i=0 to 7: envbuf(7,i)=8192*i : next i
22dbc     00 28 06 F6 | 	mov	local02, #0
22dc0     01 00 00 FF 
22dc4     00 E4 05 F1 | 	add	objptr, ##512
22dc8                 | LR__2655
22dc8     14 2F 02 F6 | 	mov	local05, local02
22dcc     01 2E 66 F0 | 	shl	local05, #1
22dd0     F2 2E 02 F1 | 	add	local05, objptr
22dd4     14 31 02 F6 | 	mov	local06, local02
22dd8     0D 30 66 F0 | 	shl	local06, #13
22ddc     17 31 52 FC | 	wrword	local06, local05
22de0     01 28 06 F1 | 	add	local02, #1
22de4     08 28 56 F2 | 	cmps	local02, #8 wc
22de8     DC FF 9F CD |  if_b	jmp	#LR__2655
22dec                 | LR__2656
22dec                 | ' for i=8 to 23 : envbuf(7,i)=65280-2048*(i-8) : next i 	
22dec     08 28 06 F6 | 	mov	local02, #8
22df0     97 42 48 FB | 	callpa	#(@LR__2660-@LR__2657)>>2,fcache_load_ptr_
22df4                 | LR__2657
22df4     14 2F 02 F6 | 	mov	local05, local02
22df8     01 2E 66 F0 | 	shl	local05, #1
22dfc     F2 2E 02 F1 | 	add	local05, objptr
22e00     14 27 02 F6 | 	mov	local01, local02
22e04     08 26 86 F1 | 	sub	local01, #8
22e08     0B 26 66 F0 | 	shl	local01, #11
22e0c     7F 00 00 FF 
22e10     00 31 06 F6 | 	mov	local06, ##65280
22e14     13 31 82 F1 | 	sub	local06, local01
22e18     17 31 52 FC | 	wrword	local06, local05
22e1c     01 28 06 F1 | 	add	local02, #1
22e20     18 28 16 F2 | 	cmp	local02, #24 wc
22e24     CC FF 9F CD |  if_b	jmp	#LR__2657
22e28                 | ' for i=24 to 128 : envbuf(7,i)=32768 : next i
22e28     18 28 06 F6 | 	mov	local02, #24
22e2c                 | LR__2658
22e2c     14 2F 02 F6 | 	mov	local05, local02
22e30     01 2E 66 F0 | 	shl	local05, #1
22e34     F2 2E 02 F1 | 	add	local05, objptr
22e38     40 00 80 FF 
22e3c     17 01 58 FC | 	wrword	##32768, local05
22e40     01 28 06 F1 | 	add	local02, #1
22e44     81 28 16 F2 | 	cmp	local02, #129 wc
22e48     E0 FF 9F CD |  if_b	jmp	#LR__2658
22e4c                 | ' for i=129 to 255: envbuf(7,i)=256*(255-i) : next i : suspoints(7)=128							' classic adsr
22e4c     81 28 06 F6 | 	mov	local02, #129
22e50                 | LR__2659
22e50     14 2F 02 F6 | 	mov	local05, local02
22e54     01 2E 66 F0 | 	shl	local05, #1
22e58     F2 2E 02 F1 | 	add	local05, objptr
22e5c     FF 2A 06 F6 | 	mov	local03, #255
22e60     14 2B 82 F1 | 	sub	local03, local02
22e64     08 2A 66 F0 | 	shl	local03, #8
22e68     17 2B 52 FC | 	wrword	local03, local05
22e6c     01 28 06 F1 | 	add	local02, #1
22e70     00 29 16 F2 | 	cmp	local02, #256 wc
22e74     D8 FF 9F CD |  if_b	jmp	#LR__2659
22e78                 | LR__2660
22e78     3E 00 00 FF 
22e7c     EA E5 05 F1 | 	add	objptr, ##32234
22e80     F2 00 59 FC | 	wrword	#128, objptr
22e84     52 00 00 FF 
22e88     C2 E4 85 F1 | 	sub	objptr, ##42178
22e8c                 | ' for i=0 to 7
22e8c     00 28 06 F6 | 	mov	local02, #0
22e90     97 8E 48 FB | 	callpa	#(@LR__2662-@LR__2661)>>2,fcache_load_ptr_
22e94                 | LR__2661
22e94     14 2F 02 F6 | 	mov	local05, local02
22e98     01 2E 66 F0 | 	shl	local05, #1
22e9c     14 2F 02 F1 | 	add	local05, local02
22ea0     03 2E 66 F0 | 	shl	local05, #3
22ea4     14 00 00 FF 
22ea8     38 E5 05 F1 | 	add	objptr, ##10552
22eac     F2 2E 02 F1 | 	add	local05, objptr
22eb0     00 EE A1 FF 
22eb4     17 01 68 FC | 	wrlong	##1138491392, local05
22eb8     14 2F 02 F6 | 	mov	local05, local02
22ebc     01 2E 66 F0 | 	shl	local05, #1
22ec0     14 2F 02 F1 | 	add	local05, local02
22ec4     03 2E 66 F0 | 	shl	local05, #3
22ec8     F2 2E 02 F1 | 	add	local05, objptr
22ecc     04 2E 06 F1 | 	add	local05, #4
22ed0     17 29 42 FC | 	wrbyte	local02, local05
22ed4     14 2F 02 F6 | 	mov	local05, local02
22ed8     01 2E 66 F0 | 	shl	local05, #1
22edc     14 2F 02 F1 | 	add	local05, local02
22ee0     03 2E 66 F0 | 	shl	local05, #3
22ee4     F2 2E 02 F1 | 	add	local05, objptr
22ee8     05 2E 06 F1 | 	add	local05, #5
22eec     17 29 42 FC | 	wrbyte	local02, local05
22ef0     14 2F 02 F6 | 	mov	local05, local02
22ef4     01 2E 66 F0 | 	shl	local05, #1
22ef8     14 2F 02 F1 | 	add	local05, local02
22efc     03 2E 66 F0 | 	shl	local05, #3
22f00     F2 2E 02 F1 | 	add	local05, objptr
22f04     06 2E 06 F1 | 	add	local05, #6
22f08     17 01 58 FC | 	wrword	#0, local05
22f0c     14 2F 02 F6 | 	mov	local05, local02
22f10     01 2E 66 F0 | 	shl	local05, #1
22f14     14 2F 02 F1 | 	add	local05, local02
22f18     03 2E 66 F0 | 	shl	local05, #3
22f1c     F2 2E 02 F1 | 	add	local05, objptr
22f20     08 2E 06 F1 | 	add	local05, #8
22f24     00 C0 9F FF 
22f28     17 01 68 FC | 	wrlong	##1065353216, local05
22f2c     14 2F 02 F6 | 	mov	local05, local02
22f30     01 2E 66 F0 | 	shl	local05, #1
22f34     14 2F 02 F1 | 	add	local05, local02
22f38     03 2E 66 F0 | 	shl	local05, #3
22f3c     F2 2E 02 F1 | 	add	local05, objptr
22f40     0C 2E 06 F1 | 	add	local05, #12
22f44     00 40 A0 FF 
22f48     17 01 68 FC | 	wrlong	##1082130432, local05
22f4c     14 2F 02 F6 | 	mov	local05, local02
22f50     01 2E 66 F0 | 	shl	local05, #1
22f54     14 2F 02 F1 | 	add	local05, local02
22f58     03 2E 66 F0 | 	shl	local05, #3
22f5c     F2 2E 02 F1 | 	add	local05, objptr
22f60     10 2E 06 F1 | 	add	local05, #16
22f64     17 01 68 FC | 	wrlong	#0, local05
22f68     14 2F 02 F6 | 	mov	local05, local02
22f6c     01 2E 66 F0 | 	shl	local05, #1
22f70     14 2F 02 F1 | 	add	local05, local02
22f74     03 2E 66 F0 | 	shl	local05, #3
22f78     F2 2E 02 F1 | 	add	local05, objptr
22f7c     14 2E 06 F1 | 	add	local05, #20
22f80     17 FF 59 FC | 	wrword	#255, local05
22f84     14 2F 02 F6 | 	mov	local05, local02
22f88     01 2E 66 F0 | 	shl	local05, #1
22f8c     3D 00 00 FF 
22f90     7C E5 05 F1 | 	add	objptr, ##31612
22f94     F2 2E 02 F1 | 	add	local05, objptr
22f98     17 FF 59 FC | 	wrword	#255, local05
22f9c     01 28 06 F1 | 	add	local02, #1
22fa0     08 28 56 F2 | 	cmps	local02, #8 wc
22fa4     52 00 00 FF 
22fa8     B4 E4 85 F1 | 	sub	objptr, ##42164
22fac     E4 FE 9F CD |  if_b	jmp	#LR__2661
22fb0                 | LR__2662
22fb0     00 6E 20 FF 
22fb4     00 30 06 F6 | 	mov	local06, ##1088159744
22fb8                 | ' a=6.875 : for i=1 to 3 : a=a*(2.0^(1.0/12.0)) : next i : for i=0 to 11 : notetable(i) = a : a=a*(2.0^(1.0/12.0)) : next i
22fb8     03 2E 06 F6 | 	mov	local05, #3
22fbc                 | LR__2663
22fbc     18 13 02 F6 | 	mov	arg01, local06
22fc0     CE C3 1F FF 
22fc4     7D 14 06 F6 | 	mov	arg02, ##1065852029
22fc8     FC 6C B0 FD | 	call	#__system___float_mul
22fcc     FD 30 02 F6 | 	mov	local06, result1
22fd0     FA 2F 6E FB | 	djnz	local05, #LR__2663
22fd4     00 28 06 F6 | 	mov	local02, #0
22fd8                 | LR__2664
22fd8     14 2D 02 F6 | 	mov	local04, local02
22fdc     02 2C 66 F0 | 	shl	local04, #2
22fe0     14 00 00 FF 
22fe4     D8 E4 05 F1 | 	add	objptr, ##10456
22fe8     F2 2C 02 F1 | 	add	local04, objptr
22fec     16 31 62 FC | 	wrlong	local06, local04
22ff0     18 13 02 F6 | 	mov	arg01, local06
22ff4     CE C3 1F FF 
22ff8     7D 14 06 F6 | 	mov	arg02, ##1065852029
22ffc     14 00 00 FF 
23000     D8 E4 85 F1 | 	sub	objptr, ##10456
23004     C0 6C B0 FD | 	call	#__system___float_mul
23008     FD 30 02 F6 | 	mov	local06, result1
2300c     01 28 06 F1 | 	add	local02, #1
23010     0C 28 56 F2 | 	cmps	local02, #12 wc
23014     C0 FF 9F CD |  if_b	jmp	#LR__2664
23018     14 00 00 FF 
2301c     08 E5 05 F1 | 	add	objptr, ##10504
23020     F2 50 6B FC | 	wrlong	#424, objptr
23024     04 E4 05 F1 | 	add	objptr, #4
23028     F2 20 6B FC | 	wrlong	#400, objptr
2302c     04 E4 05 F1 | 	add	objptr, #4
23030     F2 F2 6A FC | 	wrlong	#377, objptr
23034     04 E4 05 F1 | 	add	objptr, #4
23038     F2 C8 6A FC | 	wrlong	#356, objptr
2303c     04 E4 05 F1 | 	add	objptr, #4
23040     F2 A0 6A FC | 	wrlong	#336, objptr
23044     04 E4 05 F1 | 	add	objptr, #4
23048     F2 7A 6A FC | 	wrlong	#317, objptr
2304c     04 E4 05 F1 | 	add	objptr, #4
23050     F2 58 6A FC | 	wrlong	#300, objptr
23054     04 E4 05 F1 | 	add	objptr, #4
23058     F2 36 6A FC | 	wrlong	#283, objptr
2305c     04 E4 05 F1 | 	add	objptr, #4
23060     F2 16 6A FC | 	wrlong	#267, objptr
23064     04 E4 05 F1 | 	add	objptr, #4
23068     F2 F8 69 FC | 	wrlong	#252, objptr
2306c     04 E4 05 F1 | 	add	objptr, #4
23070     F2 DC 69 FC | 	wrlong	#238, objptr
23074     04 E4 05 F1 | 	add	objptr, #4
23078     F2 C0 69 FC | 	wrlong	#224, objptr
2307c     3D 00 00 FF 
23080     8E E5 05 F1 | 	add	objptr, ##31630
23084     F2 00 59 FC | 	wrword	#128, objptr
23088     02 E4 85 F1 | 	sub	objptr, #2
2308c     F2 00 59 FC | 	wrword	#128, objptr
23090     52 00 00 FF 
23094     C0 E4 85 F1 | 	sub	objptr, ##42176
23098     A7 F0 03 F6 | 	mov	ptra, fp
2309c     B2 00 A0 FD | 	call	#popregs_
230a0                 | _init_audio_ret
230a0     2D 00 64 FD | 	ret
230a4                 | 
230a4                 | ' 
230a4                 | ' '------------------- Error messages
230a4                 | ' 
230a4                 | ' sub init_error_strings
230a4                 | _init_error_strings
230a4     BA 01 00 FF 
230a8     6F 01 06 F6 | 	mov	_var01, ##@LR__6007
230ac     45 00 00 FF 
230b0     7C E4 05 F1 | 	add	objptr, ##35452
230b4     F2 00 62 FC | 	wrlong	_var01, objptr
230b8     BA 01 00 FF 
230bc     70 01 06 F6 | 	mov	_var01, ##@LR__6008
230c0     04 E4 05 F1 | 	add	objptr, #4
230c4     F2 00 62 FC | 	wrlong	_var01, objptr
230c8     BA 01 00 FF 
230cc     94 01 06 F6 | 	mov	_var01, ##@LR__6009
230d0     04 E4 05 F1 | 	add	objptr, #4
230d4     F2 00 62 FC | 	wrlong	_var01, objptr
230d8     BA 01 00 FF 
230dc     B4 01 06 F6 | 	mov	_var01, ##@LR__6010
230e0     04 E4 05 F1 | 	add	objptr, #4
230e4     F2 00 62 FC | 	wrlong	_var01, objptr
230e8     BA 01 00 FF 
230ec     CD 01 06 F6 | 	mov	_var01, ##@LR__6011
230f0     04 E4 05 F1 | 	add	objptr, #4
230f4     F2 00 62 FC | 	wrlong	_var01, objptr
230f8     BA 01 00 FF 
230fc     E8 01 06 F6 | 	mov	_var01, ##@LR__6012
23100     04 E4 05 F1 | 	add	objptr, #4
23104     F2 00 62 FC | 	wrlong	_var01, objptr
23108     BB 01 00 FF 
2310c     09 00 06 F6 | 	mov	_var01, ##@LR__6013
23110     04 E4 05 F1 | 	add	objptr, #4
23114     F2 00 62 FC | 	wrlong	_var01, objptr
23118     BB 01 00 FF 
2311c     36 00 06 F6 | 	mov	_var01, ##@LR__6014
23120     04 E4 05 F1 | 	add	objptr, #4
23124     F2 00 62 FC | 	wrlong	_var01, objptr
23128     BB 01 00 FF 
2312c     60 00 06 F6 | 	mov	_var01, ##@LR__6015
23130     04 E4 05 F1 | 	add	objptr, #4
23134     F2 00 62 FC | 	wrlong	_var01, objptr
23138     BB 01 00 FF 
2313c     78 00 06 F6 | 	mov	_var01, ##@LR__6016
23140     04 E4 05 F1 | 	add	objptr, #4
23144     F2 00 62 FC | 	wrlong	_var01, objptr
23148     BB 01 00 FF 
2314c     98 00 06 F6 | 	mov	_var01, ##@LR__6017
23150     04 E4 05 F1 | 	add	objptr, #4
23154     F2 00 62 FC | 	wrlong	_var01, objptr
23158     BB 01 00 FF 
2315c     AE 00 06 F6 | 	mov	_var01, ##@LR__6018
23160     04 E4 05 F1 | 	add	objptr, #4
23164     F2 00 62 FC | 	wrlong	_var01, objptr
23168     BB 01 00 FF 
2316c     CB 00 06 F6 | 	mov	_var01, ##@LR__6019
23170     04 E4 05 F1 | 	add	objptr, #4
23174     F2 00 62 FC | 	wrlong	_var01, objptr
23178     BB 01 00 FF 
2317c     EE 00 06 F6 | 	mov	_var01, ##@LR__6020
23180     04 E4 05 F1 | 	add	objptr, #4
23184     F2 00 62 FC | 	wrlong	_var01, objptr
23188     BB 01 00 FF 
2318c     14 01 06 F6 | 	mov	_var01, ##@LR__6021
23190     04 E4 05 F1 | 	add	objptr, #4
23194     F2 00 62 FC | 	wrlong	_var01, objptr
23198     BB 01 00 FF 
2319c     2F 01 06 F6 | 	mov	_var01, ##@LR__6022
231a0     04 E4 05 F1 | 	add	objptr, #4
231a4     F2 00 62 FC | 	wrlong	_var01, objptr
231a8     BB 01 00 FF 
231ac     3F 01 06 F6 | 	mov	_var01, ##@LR__6023
231b0     04 E4 05 F1 | 	add	objptr, #4
231b4     F2 00 62 FC | 	wrlong	_var01, objptr
231b8     BB 01 00 FF 
231bc     4E 01 06 F6 | 	mov	_var01, ##@LR__6024
231c0     04 E4 05 F1 | 	add	objptr, #4
231c4     F2 00 62 FC | 	wrlong	_var01, objptr
231c8     BB 01 00 FF 
231cc     68 01 06 F6 | 	mov	_var01, ##@LR__6025
231d0     04 E4 05 F1 | 	add	objptr, #4
231d4     F2 00 62 FC | 	wrlong	_var01, objptr
231d8     BB 01 00 FF 
231dc     79 01 06 F6 | 	mov	_var01, ##@LR__6026
231e0     04 E4 05 F1 | 	add	objptr, #4
231e4     F2 00 62 FC | 	wrlong	_var01, objptr
231e8     BB 01 00 FF 
231ec     90 01 06 F6 | 	mov	_var01, ##@LR__6027
231f0     04 E4 05 F1 | 	add	objptr, #4
231f4     F2 00 62 FC | 	wrlong	_var01, objptr
231f8     BB 01 00 FF 
231fc     A3 01 06 F6 | 	mov	_var01, ##@LR__6028
23200     04 E4 05 F1 | 	add	objptr, #4
23204     F2 00 62 FC | 	wrlong	_var01, objptr
23208     BB 01 00 FF 
2320c     B2 01 06 F6 | 	mov	_var01, ##@LR__6029
23210     04 E4 05 F1 | 	add	objptr, #4
23214     F2 00 62 FC | 	wrlong	_var01, objptr
23218     BB 01 00 FF 
2321c     CE 01 06 F6 | 	mov	_var01, ##@LR__6030
23220     04 E4 05 F1 | 	add	objptr, #4
23224     F2 00 62 FC | 	wrlong	_var01, objptr
23228     BB 01 00 FF 
2322c     DE 01 06 F6 | 	mov	_var01, ##@LR__6031
23230     04 E4 05 F1 | 	add	objptr, #4
23234     F2 00 62 FC | 	wrlong	_var01, objptr
23238     BB 01 00 FF 
2323c     EE 01 06 F6 | 	mov	_var01, ##@LR__6032
23240     04 E4 05 F1 | 	add	objptr, #4
23244     F2 00 62 FC | 	wrlong	_var01, objptr
23248     BC 01 00 FF 
2324c     21 00 06 F6 | 	mov	_var01, ##@LR__6033
23250     04 E4 05 F1 | 	add	objptr, #4
23254     F2 00 62 FC | 	wrlong	_var01, objptr
23258     BC 01 00 FF 
2325c     3C 00 06 F6 | 	mov	_var01, ##@LR__6034
23260     04 E4 05 F1 | 	add	objptr, #4
23264     F2 00 62 FC | 	wrlong	_var01, objptr
23268     BC 01 00 FF 
2326c     51 00 06 F6 | 	mov	_var01, ##@LR__6035
23270     04 E4 05 F1 | 	add	objptr, #4
23274     F2 00 62 FC | 	wrlong	_var01, objptr
23278     BC 01 00 FF 
2327c     5D 00 06 F6 | 	mov	_var01, ##@LR__6036
23280     04 E4 05 F1 | 	add	objptr, #4
23284     F2 00 62 FC | 	wrlong	_var01, objptr
23288     BC 01 00 FF 
2328c     6E 00 06 F6 | 	mov	_var01, ##@LR__6037
23290     04 E4 05 F1 | 	add	objptr, #4
23294     F2 00 62 FC | 	wrlong	_var01, objptr
23298     BC 01 00 FF 
2329c     7E 00 06 F6 | 	mov	_var01, ##@LR__6038
232a0     04 E4 05 F1 | 	add	objptr, #4
232a4     F2 00 62 FC | 	wrlong	_var01, objptr
232a8     BC 01 00 FF 
232ac     99 00 06 F6 | 	mov	_var01, ##@LR__6039
232b0     04 E4 05 F1 | 	add	objptr, #4
232b4     F2 00 62 FC | 	wrlong	_var01, objptr
232b8     BC 01 00 FF 
232bc     A9 00 06 F6 | 	mov	_var01, ##@LR__6040
232c0     04 E4 05 F1 | 	add	objptr, #4
232c4     F2 00 62 FC | 	wrlong	_var01, objptr
232c8     BC 01 00 FF 
232cc     B7 00 06 F6 | 	mov	_var01, ##@LR__6041
232d0     04 E4 05 F1 | 	add	objptr, #4
232d4     F2 00 62 FC | 	wrlong	_var01, objptr
232d8     BC 01 00 FF 
232dc     D1 00 06 F6 | 	mov	_var01, ##@LR__6042
232e0     04 E4 05 F1 | 	add	objptr, #4
232e4     F2 00 62 FC | 	wrlong	_var01, objptr
232e8     BC 01 00 FF 
232ec     04 01 06 F6 | 	mov	_var01, ##@LR__6043
232f0     04 E4 05 F1 | 	add	objptr, #4
232f4     F2 00 62 FC | 	wrlong	_var01, objptr
232f8     BC 01 00 FF 
232fc     1C 01 06 F6 | 	mov	_var01, ##@LR__6044
23300     04 E4 05 F1 | 	add	objptr, #4
23304     F2 00 62 FC | 	wrlong	_var01, objptr
23308     BC 01 00 FF 
2330c     37 01 06 F6 | 	mov	_var01, ##@LR__6045
23310     04 E4 05 F1 | 	add	objptr, #4
23314     F2 00 62 FC | 	wrlong	_var01, objptr
23318     BC 01 00 FF 
2331c     54 01 06 F6 | 	mov	_var01, ##@LR__6046
23320     04 E4 05 F1 | 	add	objptr, #4
23324     F2 00 62 FC | 	wrlong	_var01, objptr
23328     BC 01 00 FF 
2332c     6D 01 06 F6 | 	mov	_var01, ##@LR__6047
23330     04 E4 05 F1 | 	add	objptr, #4
23334     F2 00 62 FC | 	wrlong	_var01, objptr
23338     BC 01 00 FF 
2333c     8C 01 06 F6 | 	mov	_var01, ##@LR__6048
23340     04 E4 05 F1 | 	add	objptr, #4
23344     F2 00 62 FC | 	wrlong	_var01, objptr
23348     BC 01 00 FF 
2334c     9A 01 06 F6 | 	mov	_var01, ##@LR__6049
23350     04 E4 05 F1 | 	add	objptr, #4
23354     F2 00 62 FC | 	wrlong	_var01, objptr
23358     BC 01 00 FF 
2335c     C7 01 06 F6 | 	mov	_var01, ##@LR__6050
23360     04 E4 05 F1 | 	add	objptr, #4
23364     F2 00 62 FC | 	wrlong	_var01, objptr
23368     BC 01 00 FF 
2336c     D4 01 06 F6 | 	mov	_var01, ##@LR__6051
23370     04 E4 05 F1 | 	add	objptr, #4
23374     F2 00 62 FC | 	wrlong	_var01, objptr
23378     BC 01 00 FF 
2337c     E8 01 06 F6 | 	mov	_var01, ##@LR__6052
23380     04 E4 05 F1 | 	add	objptr, #4
23384     F2 00 62 FC | 	wrlong	_var01, objptr
23388     BD 01 00 FF 
2338c     0C 00 06 F6 | 	mov	_var01, ##@LR__6053
23390     04 E4 05 F1 | 	add	objptr, #4
23394     F2 00 62 FC | 	wrlong	_var01, objptr
23398     BD 01 00 FF 
2339c     23 00 06 F6 | 	mov	_var01, ##@LR__6054
233a0     04 E4 05 F1 | 	add	objptr, #4
233a4     F2 00 62 FC | 	wrlong	_var01, objptr
233a8     BD 01 00 FF 
233ac     36 00 06 F6 | 	mov	_var01, ##@LR__6055
233b0     04 E4 05 F1 | 	add	objptr, #4
233b4     F2 00 62 FC | 	wrlong	_var01, objptr
233b8     BD 01 00 FF 
233bc     4D 00 06 F6 | 	mov	_var01, ##@LR__6056
233c0     04 E4 05 F1 | 	add	objptr, #4
233c4     F2 00 62 FC | 	wrlong	_var01, objptr
233c8     BD 01 00 FF 
233cc     66 00 06 F6 | 	mov	_var01, ##@LR__6057
233d0     04 E4 05 F1 | 	add	objptr, #4
233d4     F2 00 62 FC | 	wrlong	_var01, objptr
233d8     BD 01 00 FF 
233dc     88 00 06 F6 | 	mov	_var01, ##@LR__6058
233e0     04 E4 05 F1 | 	add	objptr, #4
233e4     F2 00 62 FC | 	wrlong	_var01, objptr
233e8     BD 01 00 FF 
233ec     9B 00 06 F6 | 	mov	_var01, ##@LR__6059
233f0     04 E4 05 F1 | 	add	objptr, #4
233f4     F2 00 62 FC | 	wrlong	_var01, objptr
233f8     BD 01 00 FF 
233fc     AB 00 06 F6 | 	mov	_var01, ##@LR__6060
23400     04 E4 05 F1 | 	add	objptr, #4
23404     F2 00 62 FC | 	wrlong	_var01, objptr
23408     BD 01 00 FF 
2340c     C3 00 06 F6 | 	mov	_var01, ##@LR__6061
23410     04 E4 05 F1 | 	add	objptr, #4
23414     F2 00 62 FC | 	wrlong	_var01, objptr
23418     BD 01 00 FF 
2341c     DA 00 06 F6 | 	mov	_var01, ##@LR__6062
23420     04 E4 05 F1 | 	add	objptr, #4
23424     F2 00 62 FC | 	wrlong	_var01, objptr
23428     45 00 00 FF 
2342c     58 E5 85 F1 | 	sub	objptr, ##35672
23430                 | _init_error_strings_ret
23430     2D 00 64 FD | 	ret
23434                 | 
23434                 | '         
23434                 | ' sub printerror(err as integer, linenum=0 as integer)
23434                 | _printerror
23434     02 4A 05 F6 | 	mov	COUNT_, #2
23438     A8 00 A0 FD | 	call	#pushregs_
2343c     09 27 02 F6 | 	mov	local01, arg01
23440     0A 29 02 F6 | 	mov	local02, arg02
23444     BD 01 00 FF 
23448     E7 12 06 F6 | 	mov	arg01, ##@LR__6063
2344c     3C 21 B0 FD | 	call	#_hg010b_spin2_write
23450     13 13 02 F6 | 	mov	arg01, local01
23454     D8 26 B0 FD | 	call	#_hg010b_spin2_inttostr
23458     FD 12 02 F6 | 	mov	arg01, result1
2345c     2C 21 B0 FD | 	call	#_hg010b_spin2_write
23460     BD 01 00 FF 
23464     EE 12 06 F6 | 	mov	arg01, ##@LR__6064
23468     20 21 B0 FD | 	call	#_hg010b_spin2_write
2346c     02 26 66 F0 | 	shl	local01, #2
23470     45 00 00 FF 
23474     7C E4 05 F1 | 	add	objptr, ##35452
23478     F2 26 02 F1 | 	add	local01, objptr
2347c     13 13 02 FB | 	rdlong	arg01, local01
23480     45 00 00 FF 
23484     7C E4 85 F1 | 	sub	objptr, ##35452
23488     00 21 B0 FD | 	call	#_hg010b_spin2_write
2348c                 | ' v.write("Error " ): v.write(v.inttostr(err)) : v.write(" - ")  : v.write(errors$(err))
2348c                 | ' if linenum>0 then v.write(" in line " ): v.writeln(v.inttostr(linenum)) else v.writeln("")
2348c     01 28 56 F2 | 	cmps	local02, #1 wc
23490     24 00 90 CD |  if_b	jmp	#LR__2670
23494     BD 01 00 FF 
23498     F2 12 06 F6 | 	mov	arg01, ##@LR__6065
2349c     EC 20 B0 FD | 	call	#_hg010b_spin2_write
234a0     14 13 02 F6 | 	mov	arg01, local02
234a4     88 26 B0 FD | 	call	#_hg010b_spin2_inttostr
234a8     FD 12 02 F6 | 	mov	arg01, result1
234ac                 | ' 
234ac                 | ' write(text)
234ac     DC 20 B0 FD | 	call	#_hg010b_spin2_write
234b0                 | ' crlf
234b0     D8 25 B0 FD | 	call	#_hg010b_spin2_crlf
234b4     10 00 90 FD | 	jmp	#LR__2671
234b8                 | LR__2670
234b8     BD 01 00 FF 
234bc     FC 12 06 F6 | 	mov	arg01, ##@LR__6066
234c0                 | ' 
234c0                 | ' write(text)
234c0     C8 20 B0 FD | 	call	#_hg010b_spin2_write
234c4                 | ' crlf
234c4     C4 25 B0 FD | 	call	#_hg010b_spin2_crlf
234c8                 | LR__2671
234c8     A7 F0 03 F6 | 	mov	ptra, fp
234cc     B2 00 A0 FD | 	call	#popregs_
234d0                 | _printerror_ret
234d0     2D 00 64 FD | 	ret
234d4                 | 
234d4                 | ' 
234d4                 | ' '' ------------------------------- Hardware start/stop/initialization 
234d4                 | ' 
234d4                 | ' sub startpsram
234d4                 | _startpsram
234d4     00 12 06 F6 | 	mov	arg01, #0
234d8     0A 14 C6 F9 | 	decod	arg02, #10
234dc     0B 16 06 F6 | 	mov	arg03, #11
234e0     07 18 06 F6 | 	mov	arg04, #7
234e4     0B 00 00 FF 
234e8     CC E4 05 F1 | 	add	objptr, ##5836
234ec     AC 2A B0 FD | 	call	#_psram_spin2_startx
234f0     2B 00 00 FF 
234f4     3C E5 05 F1 | 	add	objptr, ##22332
234f8     F2 FA 61 FC | 	wrlong	result1, objptr
234fc                 | '     return $7FF00 + cog*12
234fc     0C E4 05 F1 | 	add	objptr, #12
23500     FF 03 80 FF 
23504     F2 00 6A FC | 	wrlong	##524032, objptr
23508     37 00 00 FF 
2350c     14 E4 85 F1 | 	sub	objptr, ##28180
23510                 | _startpsram_ret
23510     2D 00 64 FD | 	ret
23514                 | 
23514                 | ' 
23514                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
23514                 | _startvideo
23514     01 4A 05 F6 | 	mov	COUNT_, #1
23518     A8 00 A0 FD | 	call	#pushregs_
2351c     37 00 00 FF 
23520     14 E4 05 F1 | 	add	objptr, ##28180
23524     F2 18 02 FB | 	rdlong	arg04, objptr
23528     37 00 00 FF 
2352c     14 E4 85 F1 | 	sub	objptr, ##28180
23530     0A 13 02 F6 | 	mov	arg01, arg02
23534     0C 15 02 F6 | 	mov	arg02, arg04
23538     18 08 B0 FD | 	call	#_hg010b_spin2_start
2353c     37 00 00 FF 
23540     00 E4 05 F1 | 	add	objptr, ##28160
23544     F2 FA 61 FC | 	wrlong	result1, objptr
23548                 | ' 
23548                 | ' videocog=v.start(pin,mbox)
23548                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
23548     00 26 06 F6 | 	mov	local01, #0
2354c     2B 00 00 FF 
23550     34 E5 85 F1 | 	sub	objptr, ##22324
23554                 | LR__2680
23554     13 13 02 F6 | 	mov	arg01, local01
23558     00 28 00 FF 
2355c     00 14 06 F6 | 	mov	arg02, ##5242880
23560     90 2E B0 FD | 	call	#_psram_spin2_setQos
23564     01 26 06 F1 | 	add	local01, #1
23568     08 26 56 F2 | 	cmps	local01, #8 wc
2356c     E4 FF 9F CD |  if_b	jmp	#LR__2680
23570     2B 00 00 FF 
23574     34 E5 05 F1 | 	add	objptr, ##22324
23578     F2 12 02 FB | 	rdlong	arg01, objptr
2357c     7A 00 02 FF 
23580     00 14 06 F6 | 	mov	arg02, ##67171328
23584     2B 00 00 FF 
23588     34 E5 85 F1 | 	sub	objptr, ##22324
2358c     64 2E B0 FD | 	call	#_psram_spin2_setQos
23590     0B 00 00 FF 
23594     CC E4 85 F1 | 	sub	objptr, ##5836
23598                 | ' psram.setQoS(videocog, $0400f400) 
23598                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
23598     F2 14 02 F6 | 	mov	arg02, objptr
2359c     00 28 05 FF 
235a0     00 14 46 F5 | 	or	arg02, ##173015040
235a4     00 16 06 F6 | 	mov	arg03, #0
235a8     00 18 06 F6 | 	mov	arg04, #0
235ac     00 12 06 F6 | 	mov	arg01, #0
235b0     44 43 B0 FD | 	call	#__system___basic_open
235b4                 | ' return videocog
235b4     37 00 00 FF 
235b8     00 E4 05 F1 | 	add	objptr, ##28160
235bc     F2 FA 01 FB | 	rdlong	result1, objptr
235c0     37 00 00 FF 
235c4     00 E4 85 F1 | 	sub	objptr, ##28160
235c8     A7 F0 03 F6 | 	mov	ptra, fp
235cc     B2 00 A0 FD | 	call	#popregs_
235d0                 | _startvideo_ret
235d0     2D 00 64 FD | 	ret
235d4                 | 
235d4                 | ' 
235d4                 | ' 
235d4                 | ' 
235d4                 | ' '' ------------------------------- Convenient psram peek/poke
235d4                 | ' 
235d4                 | ' sub pslpoke(addr as ulong,value as ulong)
235d4                 | _pslpoke
235d4     00 4A 05 F6 | 	mov	COUNT_, #0
235d8     A8 00 A0 FD | 	call	#pushregs_
235dc     08 F0 07 F1 | 	add	ptra, #8
235e0     A7 12 62 FC | 	wrlong	arg01, fp
235e4     04 4E 05 F1 | 	add	fp, #4
235e8     A7 14 62 FC | 	wrlong	arg02, fp
235ec     A7 12 02 F6 | 	mov	arg01, fp
235f0     04 4E 85 F1 | 	sub	fp, #4
235f4     A7 14 02 FB | 	rdlong	arg02, fp
235f8     04 16 06 F6 | 	mov	arg03, #4
235fc     0B 00 00 FF 
23600     CC E4 05 F1 | 	add	objptr, ##5836
23604     5C 2C B0 FD | 	call	#_psram_spin2_write
23608     0B 00 00 FF 
2360c     CC E4 85 F1 | 	sub	objptr, ##5836
23610     A7 F0 03 F6 | 	mov	ptra, fp
23614     B2 00 A0 FD | 	call	#popregs_
23618                 | _pslpoke_ret
23618     2D 00 64 FD | 	ret
2361c                 | 
2361c                 | ' 
2361c                 | ' sub psdpoke(addr as ulong,value as ulong)
2361c                 | _psdpoke
2361c     00 4A 05 F6 | 	mov	COUNT_, #0
23620     A8 00 A0 FD | 	call	#pushregs_
23624     08 F0 07 F1 | 	add	ptra, #8
23628     A7 12 62 FC | 	wrlong	arg01, fp
2362c     04 4E 05 F1 | 	add	fp, #4
23630     A7 14 62 FC | 	wrlong	arg02, fp
23634     A7 12 02 F6 | 	mov	arg01, fp
23638     04 4E 85 F1 | 	sub	fp, #4
2363c     A7 14 02 FB | 	rdlong	arg02, fp
23640     02 16 06 F6 | 	mov	arg03, #2
23644     0B 00 00 FF 
23648     CC E4 05 F1 | 	add	objptr, ##5836
2364c     14 2C B0 FD | 	call	#_psram_spin2_write
23650     0B 00 00 FF 
23654     CC E4 85 F1 | 	sub	objptr, ##5836
23658     A7 F0 03 F6 | 	mov	ptra, fp
2365c     B2 00 A0 FD | 	call	#popregs_
23660                 | _psdpoke_ret
23660     2D 00 64 FD | 	ret
23664                 | 
23664                 | ' 
23664                 | ' sub pspoke(addr as ulong,value as ulong)
23664                 | _pspoke
23664     00 4A 05 F6 | 	mov	COUNT_, #0
23668     A8 00 A0 FD | 	call	#pushregs_
2366c     08 F0 07 F1 | 	add	ptra, #8
23670     A7 12 62 FC | 	wrlong	arg01, fp
23674     04 4E 05 F1 | 	add	fp, #4
23678     A7 14 62 FC | 	wrlong	arg02, fp
2367c     A7 12 02 F6 | 	mov	arg01, fp
23680     04 4E 85 F1 | 	sub	fp, #4
23684     A7 14 02 FB | 	rdlong	arg02, fp
23688     01 16 06 F6 | 	mov	arg03, #1
2368c     0B 00 00 FF 
23690     CC E4 05 F1 | 	add	objptr, ##5836
23694     CC 2B B0 FD | 	call	#_psram_spin2_write
23698     0B 00 00 FF 
2369c     CC E4 85 F1 | 	sub	objptr, ##5836
236a0     A7 F0 03 F6 | 	mov	ptra, fp
236a4     B2 00 A0 FD | 	call	#popregs_
236a8                 | _pspoke_ret
236a8     2D 00 64 FD | 	ret
236ac                 | 
236ac                 | ' 
236ac                 | ' function pspeek(adr as ulong) as ubyte
236ac                 | _pspeek
236ac     00 4A 05 F6 | 	mov	COUNT_, #0
236b0     A8 00 A0 FD | 	call	#pushregs_
236b4     0C F0 07 F1 | 	add	ptra, #12
236b8     04 4E 05 F1 | 	add	fp, #4
236bc     A7 12 62 FC | 	wrlong	arg01, fp
236c0     04 4E 05 F1 | 	add	fp, #4
236c4     A7 12 02 F6 | 	mov	arg01, fp
236c8     04 4E 85 F1 | 	sub	fp, #4
236cc     A7 14 02 FB | 	rdlong	arg02, fp
236d0     04 4E 85 F1 | 	sub	fp, #4
236d4     01 16 06 F6 | 	mov	arg03, #1
236d8     0B 00 00 FF 
236dc     CC E4 05 F1 | 	add	objptr, ##5836
236e0     E4 2A B0 FD | 	call	#_psram_spin2_read1
236e4     0B 00 00 FF 
236e8     CC E4 85 F1 | 	sub	objptr, ##5836
236ec                 | ' psram.read1(varptr(res),adr,1)
236ec                 | ' return res
236ec     08 4E 05 F1 | 	add	fp, #8
236f0     A7 FA C1 FA | 	rdbyte	result1, fp
236f4     08 4E 85 F1 | 	sub	fp, #8
236f8     A7 F0 03 F6 | 	mov	ptra, fp
236fc     B2 00 A0 FD | 	call	#popregs_
23700                 | _pspeek_ret
23700     2D 00 64 FD | 	ret
23704                 | 
23704                 | ' 
23704                 | ' function pslpeek(adr as ulong) as ulong
23704                 | _pslpeek
23704     00 4A 05 F6 | 	mov	COUNT_, #0
23708     A8 00 A0 FD | 	call	#pushregs_
2370c     0C F0 07 F1 | 	add	ptra, #12
23710     04 4E 05 F1 | 	add	fp, #4
23714     A7 12 62 FC | 	wrlong	arg01, fp
23718     04 4E 05 F1 | 	add	fp, #4
2371c     A7 12 02 F6 | 	mov	arg01, fp
23720     04 4E 85 F1 | 	sub	fp, #4
23724     A7 14 02 FB | 	rdlong	arg02, fp
23728     04 4E 85 F1 | 	sub	fp, #4
2372c     04 16 06 F6 | 	mov	arg03, #4
23730     0B 00 00 FF 
23734     CC E4 05 F1 | 	add	objptr, ##5836
23738     8C 2A B0 FD | 	call	#_psram_spin2_read1
2373c     0B 00 00 FF 
23740     CC E4 85 F1 | 	sub	objptr, ##5836
23744                 | ' psram.read1(varptr(res),adr,4)
23744                 | ' return res
23744     08 4E 05 F1 | 	add	fp, #8
23748     A7 FA 01 FB | 	rdlong	result1, fp
2374c     08 4E 85 F1 | 	sub	fp, #8
23750     A7 F0 03 F6 | 	mov	ptra, fp
23754     B2 00 A0 FD | 	call	#popregs_
23758                 | _pslpeek_ret
23758     2D 00 64 FD | 	ret
2375c                 | 
2375c                 | ' 
2375c                 | ' function psdpeek(adr as ulong) as ulong
2375c                 | _psdpeek
2375c     00 4A 05 F6 | 	mov	COUNT_, #0
23760     A8 00 A0 FD | 	call	#pushregs_
23764     0C F0 07 F1 | 	add	ptra, #12
23768     04 4E 05 F1 | 	add	fp, #4
2376c     A7 12 62 FC | 	wrlong	arg01, fp
23770     04 4E 05 F1 | 	add	fp, #4
23774     A7 12 02 F6 | 	mov	arg01, fp
23778     04 4E 85 F1 | 	sub	fp, #4
2377c     A7 14 02 FB | 	rdlong	arg02, fp
23780     04 4E 85 F1 | 	sub	fp, #4
23784     02 16 06 F6 | 	mov	arg03, #2
23788     0B 00 00 FF 
2378c     CC E4 05 F1 | 	add	objptr, ##5836
23790     34 2A B0 FD | 	call	#_psram_spin2_read1
23794     0B 00 00 FF 
23798     CC E4 85 F1 | 	sub	objptr, ##5836
2379c                 | ' psram.read1(varptr(res),adr,2)
2379c                 | ' return res
2379c     08 4E 05 F1 | 	add	fp, #8
237a0     A7 FA E1 FA | 	rdword	result1, fp
237a4     08 4E 85 F1 | 	sub	fp, #8
237a8     A7 F0 03 F6 | 	mov	ptra, fp
237ac     B2 00 A0 FD | 	call	#popregs_
237b0                 | _psdpeek_ret
237b0     2D 00 64 FD | 	ret
237b4                 | 
237b4                 | ' 
237b4                 | ' '' ------------------------------- USB keyboard scan to char translator
237b4                 | ' 
237b4                 | ' function scantochar(key)
237b4                 | _scantochar
237b4                 | ' 
237b4                 | ' select case (key shr 8) and 255
237b4     09 01 02 F6 | 	mov	_var01, arg01
237b8     08 00 C6 F0 | 	sar	_var01, #8
237bc     FF 00 0E F5 | 	and	_var01, #255 wz
237c0     24 00 90 AD |  if_e	jmp	#LR__2690
237c4     02 00 0E F2 | 	cmp	_var01, #2 wz
237c8     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
237cc     30 00 90 AD |  if_e	jmp	#LR__2691
237d0     40 00 0E F2 | 	cmp	_var01, #64 wz
237d4     44 00 90 AD |  if_e	jmp	#LR__2692
237d8     42 00 0E F2 | 	cmp	_var01, #66 wz
237dc     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
237e0     70 00 90 5D |  if_ne	jmp	#LR__2694
237e4     50 00 90 FD | 	jmp	#LR__2693
237e8                 | LR__2690
237e8     09 FB 01 F6 | 	mov	result1, arg01
237ec     7F FA 05 F5 | 	and	result1, #127
237f0     02 FA 65 F0 | 	shl	result1, #2
237f4     F5 FA 01 F1 | 	add	result1, ptr__dat__
237f8     FD FA C1 FA | 	rdbyte	result1, result1
237fc     54 00 90 FD | 	jmp	#_scantochar_ret
23800                 | LR__2691
23800     09 FB 01 F6 | 	mov	result1, arg01
23804     7F FA 05 F5 | 	and	result1, #127
23808     02 FA 65 F0 | 	shl	result1, #2
2380c     01 FA 05 F1 | 	add	result1, #1
23810     F5 FA 01 F1 | 	add	result1, ptr__dat__
23814     FD FA C1 FA | 	rdbyte	result1, result1
23818     38 00 90 FD | 	jmp	#_scantochar_ret
2381c                 | LR__2692
2381c     09 FB 01 F6 | 	mov	result1, arg01
23820     7F FA 05 F5 | 	and	result1, #127
23824     02 FA 65 F0 | 	shl	result1, #2
23828     02 FA 05 F1 | 	add	result1, #2
2382c     F5 FA 01 F1 | 	add	result1, ptr__dat__
23830     FD FA C1 FA | 	rdbyte	result1, result1
23834     1C 00 90 FD | 	jmp	#_scantochar_ret
23838                 | LR__2693
23838     09 FB 01 F6 | 	mov	result1, arg01
2383c     7F FA 05 F5 | 	and	result1, #127
23840     02 FA 65 F0 | 	shl	result1, #2
23844     03 FA 05 F1 | 	add	result1, #3
23848     F5 FA 01 F1 | 	add	result1, ptr__dat__
2384c     FD FA C1 FA | 	rdbyte	result1, result1
23850     00 00 90 FD | 	jmp	#_scantochar_ret
23854                 | LR__2694
23854                 | _scantochar_ret
23854     2D 00 64 FD | 	ret
23858                 | 
23858                 | _program
23858     01 4A 05 F6 | 	mov	COUNT_, #1
2385c     A8 00 A0 FD | 	call	#pushregs_
23860     70 FC BF FD | 	call	#_startpsram
23864     40 12 06 F6 | 	mov	arg01, #64
23868     00 14 06 F6 | 	mov	arg02, #0
2386c     00 16 06 F6 | 	mov	arg03, #0
23870     A0 FC BF FD | 	call	#_startvideo
23874     37 00 00 FF 
23878     14 E4 05 F1 | 	add	objptr, ##28180
2387c     F2 12 02 FB | 	rdlong	arg01, objptr
23880     00 14 06 F6 | 	mov	arg02, #0
23884     FB 03 00 FF 
23888     00 17 06 F6 | 	mov	arg03, ##521984
2388c     2B 00 00 FF 
23890     48 E5 85 F1 | 	sub	objptr, ##22344
23894     54 2F B0 FD | 	call	#_audio096_spin2_start
23898     FE 16 02 F6 | 	mov	arg03, result2
2389c     2B 00 00 FF 
238a0     30 E5 05 F1 | 	add	objptr, ##22320
238a4     F2 FA 61 FC | 	wrlong	result1, objptr
238a8     14 E4 05 F1 | 	add	objptr, #20
238ac     F2 16 62 FC | 	wrlong	arg03, objptr
238b0     37 00 00 FF 
238b4     10 E4 85 F1 | 	sub	objptr, ##28176
238b8     32 12 06 F6 | 	mov	arg01, #50
238bc     84 38 B0 FD | 	call	#__system___waitms
238c0     37 00 00 FF 
238c4     10 E4 05 F1 | 	add	objptr, ##28176
238c8     F2 12 02 FB | 	rdlong	arg01, objptr
238cc     37 00 00 FF 
238d0     10 E4 85 F1 | 	sub	objptr, ##28176
238d4     14 12 06 F1 | 	add	arg01, #20
238d8     20 00 80 FF 
238dc     09 01 58 FC | 	wrword	##16384, arg01
238e0     18 2C B0 FD | 	call	#_usbnew_spin2_start
238e4     37 00 00 FF 
238e8     04 E4 05 F1 | 	add	objptr, ##28164
238ec     F2 FA 61 FC | 	wrlong	result1, objptr
238f0                 | '   mouse_limits[0] := xlim
238f0     0F 00 00 FF 
238f4     B8 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7864
238f8     01 00 80 FF 
238fc     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
23900                 | '   mouse_limits[1] := ylim
23900     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
23904     01 00 80 FF 
23908     FB AE 68 FC | 	wrlong	##599, ptr__usbnew_spin2_dat__
2390c     36 00 00 FF 
23910     F3 E4 85 F1 | 	sub	objptr, ##27891
23914     F2 12 02 F6 | 	mov	arg01, objptr
23918     11 E5 85 F1 | 	sub	objptr, #273
2391c     C4 12 06 F1 | 	add	arg01, #196
23920                 | '   mouse_outptr := ptr
23920     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
23924     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
23928     0F 00 00 FF 
2392c     C0 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7872
23930     16 00 00 FF 
23934     CA EA 05 F1 | 	add	ptr__dat__, ##11466
23938     F5 14 02 F6 | 	mov	arg02, ptr__dat__
2393c     16 00 00 FF 
23940     CA EA 85 F1 | 	sub	ptr__dat__, ##11466
23944     10 12 06 F6 | 	mov	arg01, #16
23948     A0 0A B0 FD | 	call	#_hg010b_spin2_setspriteptr
2394c     10 12 06 F6 | 	mov	arg01, #16
23950     20 14 06 F6 | 	mov	arg02, #32
23954     20 16 06 F6 | 	mov	arg03, #32
23958     20 0B B0 FD | 	call	#_hg010b_spin2_setspritesize
2395c     09 12 C6 F9 | 	decod	arg01, #9
23960     2C 15 06 F6 | 	mov	arg02, #300
23964     EC 2C B0 FD | 	call	#_usbnew_spin2_mouse_move
23968     F2 16 02 F6 | 	mov	arg03, objptr
2396c     50 00 00 FF 
23970     44 E5 05 F1 | 	add	objptr, ##41284
23974     F2 14 02 F6 | 	mov	arg02, objptr
23978     0A 17 62 FC | 	wrlong	arg03, arg02
2397c     04 14 06 F1 | 	add	arg02, #4
23980     0A F1 61 FC | 	wrlong	ptr__housekeeper_, arg02
23984     EF 14 02 F6 | 	mov	arg02, entryptr__
23988     1E FA 05 F6 | 	mov	result1, #30
2398c     28 E4 61 FD | 	setq	objptr
23990     0A FB F1 FC | 	coginit	result1, arg02 wc
23994     01 FA 65 C6 |  if_b	neg	result1, #1
23998     04 E4 85 F1 | 	sub	objptr, #4
2399c     F2 FA 61 FC | 	wrlong	result1, objptr
239a0     01 00 00 FF 
239a4     54 E5 05 F1 | 	add	objptr, ##852
239a8     F2 00 68 FC | 	wrlong	#0, objptr
239ac     1B 00 00 FF 
239b0     60 E4 85 F1 | 	sub	objptr, ##13920
239b4     F2 04 68 FC | 	wrlong	#2, objptr
239b8     04 E4 05 F1 | 	add	objptr, #4
239bc     F2 26 69 FC | 	wrlong	#147, objptr
239c0     04 E4 05 F1 | 	add	objptr, #4
239c4     F2 34 69 FC | 	wrlong	#154, objptr
239c8     04 E4 05 F1 | 	add	objptr, #4
239cc     F2 08 68 FC | 	wrlong	#4, objptr
239d0     04 E4 85 F1 | 	sub	objptr, #4
239d4     F2 16 02 FB | 	rdlong	arg03, objptr
239d8     14 E4 85 F1 | 	sub	objptr, #20
239dc     F2 16 62 FC | 	wrlong	arg03, objptr
239e0     04 E4 05 F1 | 	add	objptr, #4
239e4     F2 00 68 FC | 	wrlong	#0, objptr
239e8     04 E4 05 F1 | 	add	objptr, #4
239ec     F2 00 68 FC | 	wrlong	#0, objptr
239f0     19 00 00 FF 
239f4     0C E5 05 F1 | 	add	objptr, ##13068
239f8     F2 02 68 FC | 	wrlong	#1, objptr
239fc     01 00 00 FF 
23a00     60 E5 05 F1 | 	add	objptr, ##864
23a04     F2 00 68 FC | 	wrlong	#0, objptr
23a08     01 00 00 FF 
23a0c     00 EA 05 F1 | 	add	ptr__dat__, ##512
23a10     08 E4 05 F1 | 	add	objptr, #8
23a14     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
23a18     04 E4 85 F1 | 	sub	objptr, #4
23a1c     03 00 80 FF 
23a20     F2 3C 69 FC | 	wrlong	##1694, objptr
23a24     0D 00 00 FF 
23a28     3C E4 85 F1 | 	sub	objptr, ##6716
23a2c     F2 18 68 FC | 	wrlong	#12, objptr
23a30     45 00 00 FF 
23a34     64 E4 85 F1 | 	sub	objptr, ##35428
23a38     01 00 00 FF 
23a3c     00 EA 85 F1 | 	sub	ptr__dat__, ##512
23a40     28 D8 BF FD | 	call	#_init_commands
23a44     5C F6 BF FD | 	call	#_init_error_strings
23a48     E0 ED BF FD | 	call	#_init_audio
23a4c     00 25 BF FD | 	call	#_do_new
23a50     37 00 00 FF 
23a54     3C E4 05 F1 | 	add	objptr, ##28220
23a58     F2 12 02 FB | 	rdlong	arg01, objptr
23a5c     04 E4 85 F1 | 	sub	objptr, #4
23a60     F2 14 02 FB | 	rdlong	arg02, objptr
23a64     37 00 00 FF 
23a68     38 E4 85 F1 | 	sub	objptr, ##28216
23a6c     5C 17 B0 FD | 	call	#_hg010b_spin2_cls
23a70     37 00 00 FF 
23a74     40 E4 05 F1 | 	add	objptr, ##28224
23a78     F2 12 02 FB | 	rdlong	arg01, objptr
23a7c     37 00 00 FF 
23a80     40 E4 85 F1 | 	sub	objptr, ##28224
23a84     C4 15 B0 FD | 	call	#_hg010b_spin2_setfontfamily
23a88                 | ' 
23a88                 | ' leading_spaces:=amount
23a88     01 00 00 FF 
23a8c     B6 E4 05 F1 | 	add	objptr, ##694
23a90     F2 04 68 FC | 	wrlong	#2, objptr
23a94     01 00 00 FF 
23a98     B6 E4 85 F1 | 	sub	objptr, ##694
23a9c     BD 01 00 FF 
23aa0     FD 26 06 F6 | 	mov	local01, ##@LR__6067
23aa4     3D 12 06 F6 | 	mov	arg01, #61
23aa8     3C 14 06 F6 | 	mov	arg02, #60
23aac     3B 16 06 F6 | 	mov	arg03, #59
23ab0     3A 18 06 F6 | 	mov	arg04, #58
23ab4     1C 81 B0 FD | 	call	#__system___vfs_open_sdcardx
23ab8     FD 14 02 F6 | 	mov	arg02, result1
23abc     13 13 02 F6 | 	mov	arg01, local01
23ac0     58 37 B0 FD | 	call	#__system___mount
23ac4     BD 01 00 FF 
23ac8     01 13 06 F6 | 	mov	arg01, ##@LR__6068
23acc     0C 3A B0 FD | 	call	#__system___chdir
23ad0     BD 01 00 FF 
23ad4     09 27 06 F6 | 	mov	local01, ##@LR__6069
23ad8     4A 00 00 FF 
23adc     94 E4 05 F1 | 	add	objptr, ##38036
23ae0     F2 26 62 FC | 	wrlong	local01, objptr
23ae4     13 00 00 FF 
23ae8     60 E4 85 F1 | 	sub	objptr, ##9824
23aec     F2 12 02 FB | 	rdlong	arg01, objptr
23af0     37 00 00 FF 
23af4     34 E4 85 F1 | 	sub	objptr, ##28212
23af8     01 12 66 F0 | 	shl	arg01, #1
23afc     01 14 06 F6 | 	mov	arg02, #1
23b00     88 15 B0 FD | 	call	#_hg010b_spin2_setcursorpos
23b04                 | ' init_commands
23b04                 | ' init_error_strings
23b04                 | ' init_audio
23b04                 | ' do_new
23b04                 | ' cls(ink, paper)
23b04                 | ' v.setfontfamily(font) 				' use ST Mono font
23b04                 | ' v.setleadingspaces(2)
23b04                 | ' mount "/sd", _vfs_open_sdcard()
23b04                 | ' chdir "/sd/bas"
23b04                 | ' currentdir$="/sd/bas"
23b04                 | ' position 2*editor_spaces,1 : print ver$
23b04     00 12 06 F6 | 	mov	arg01, #0
23b08     6C 90 B0 FD | 	call	#__system___getiolock_0611
23b0c     FD 12 02 F6 | 	mov	arg01, result1
23b10     3C 33 B0 FD | 	call	#__system___lockmem
23b14     18 00 00 FF 
23b18     40 EB 05 F1 | 	add	ptr__dat__, ##12608
23b1c     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
23b20     18 00 00 FF 
23b24     40 EB 85 F1 | 	sub	ptr__dat__, ##12608
23b28     00 12 06 F6 | 	mov	arg01, #0
23b2c     00 16 06 F6 | 	mov	arg03, #0
23b30     10 40 B0 FD | 	call	#__system___basic_print_string
23b34     00 12 06 F6 | 	mov	arg01, #0
23b38     0A 14 06 F6 | 	mov	arg02, #10
23b3c     00 16 06 F6 | 	mov	arg03, #0
23b40     A8 3F B0 FD | 	call	#__system___basic_print_char
23b44     00 12 06 F6 | 	mov	arg01, #0
23b48     2C 90 B0 FD | 	call	#__system___getiolock_0611
23b4c     FD 00 68 FC | 	wrlong	#0, result1
23b50     52 00 00 FF 
23b54     98 E4 05 F1 | 	add	objptr, ##42136
23b58     F2 12 02 FB | 	rdlong	arg01, objptr
23b5c     0F 00 00 FF 
23b60     3C E4 85 F1 | 	sub	objptr, ##7740
23b64     F2 26 02 FB | 	rdlong	local01, objptr
23b68     43 00 00 FF 
23b6c     5C E4 85 F1 | 	sub	objptr, ##34396
23b70     13 13 82 F1 | 	sub	arg01, local01
23b74     00 14 06 F6 | 	mov	arg02, #0
23b78     0A 16 06 F6 | 	mov	arg03, #10
23b7c     A0 55 B0 FD | 	call	#__system__Number_S
23b80     FD 12 02 F6 | 	mov	arg01, result1
23b84     BD 01 00 FF 
23b88     11 15 06 F6 | 	mov	arg02, ##@LR__6070
23b8c     1C 33 B0 FD | 	call	#__system___string_concat
23b90     FD 26 02 F6 | 	mov	local01, result1
23b94     50 00 00 FF 
23b98     38 E5 05 F1 | 	add	objptr, ##41272
23b9c     F2 26 62 FC | 	wrlong	local01, objptr
23ba0     50 00 00 FF 
23ba4     38 E5 85 F1 | 	sub	objptr, ##41272
23ba8                 | ' free$=decuns$(memtop-programptr)+" BASIC bytes free" : print free$
23ba8     00 12 06 F6 | 	mov	arg01, #0
23bac     C8 8F B0 FD | 	call	#__system___getiolock_0611
23bb0     FD 12 02 F6 | 	mov	arg01, result1
23bb4     98 32 B0 FD | 	call	#__system___lockmem
23bb8     50 00 00 FF 
23bbc     38 E5 05 F1 | 	add	objptr, ##41272
23bc0     F2 14 02 FB | 	rdlong	arg02, objptr
23bc4     50 00 00 FF 
23bc8     38 E5 85 F1 | 	sub	objptr, ##41272
23bcc     00 12 06 F6 | 	mov	arg01, #0
23bd0     00 16 06 F6 | 	mov	arg03, #0
23bd4     6C 3F B0 FD | 	call	#__system___basic_print_string
23bd8     00 12 06 F6 | 	mov	arg01, #0
23bdc     0A 14 06 F6 | 	mov	arg02, #10
23be0     00 16 06 F6 | 	mov	arg03, #0
23be4     04 3F B0 FD | 	call	#__system___basic_print_char
23be8     00 12 06 F6 | 	mov	arg01, #0
23bec     88 8F B0 FD | 	call	#__system___getiolock_0611
23bf0     FD 00 68 FC | 	wrlong	#0, result1
23bf4     37 00 00 FF 
23bf8     34 E4 05 F1 | 	add	objptr, ##28212
23bfc     F2 12 02 FB | 	rdlong	arg01, objptr
23c00     37 00 00 FF 
23c04     34 E4 85 F1 | 	sub	objptr, ##28212
23c08     01 12 66 F0 | 	shl	arg01, #1
23c0c     04 14 06 F6 | 	mov	arg02, #4
23c10     78 14 B0 FD | 	call	#_hg010b_spin2_setcursorpos
23c14                 | ' position 2*editor_spaces,4 : print "Ready"
23c14     00 12 06 F6 | 	mov	arg01, #0
23c18     5C 8F B0 FD | 	call	#__system___getiolock_0611
23c1c     FD 12 02 F6 | 	mov	arg01, result1
23c20     2C 32 B0 FD | 	call	#__system___lockmem
23c24     BD 01 00 FF 
23c28     23 15 06 F6 | 	mov	arg02, ##@LR__6071
23c2c     00 12 06 F6 | 	mov	arg01, #0
23c30     00 16 06 F6 | 	mov	arg03, #0
23c34     0C 3F B0 FD | 	call	#__system___basic_print_string
23c38     00 12 06 F6 | 	mov	arg01, #0
23c3c     0A 14 06 F6 | 	mov	arg02, #10
23c40     00 16 06 F6 | 	mov	arg03, #0
23c44     A4 3E B0 FD | 	call	#__system___basic_print_char
23c48     00 12 06 F6 | 	mov	arg01, #0
23c4c     28 8F B0 FD | 	call	#__system___getiolock_0611
23c50     FD 00 68 FC | 	wrlong	#0, result1
23c54     00 14 06 F6 | 	mov	arg02, #0
23c58     01 14 D6 F7 | 	test	arg02, #1 wc
23c5c     5A 4C 64 FD | 	drvc	#38
23c60     01 14 D6 F7 | 	test	arg02, #1 wc
23c64     5A 4E 64 FD | 	drvc	#39
23c68     BD 01 00 FF 
23c6c     29 27 06 F6 | 	mov	local01, ##@LR__6072
23c70     52 00 00 FF 
23c74     C4 E4 05 F1 | 	add	objptr, ##42180
23c78     F2 26 62 FC | 	wrlong	local01, objptr
23c7c     04 E4 05 F1 | 	add	objptr, #4
23c80     FF FF FF FF 
23c84     F2 FE 6B FC | 	wrlong	##-1, objptr
23c88     0C E4 05 F1 | 	add	objptr, #12
23c8c     F2 00 68 FC | 	wrlong	#0, objptr
23c90     52 00 00 FF 
23c94     D4 E4 85 F1 | 	sub	objptr, ##42196
23c98                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
23c98                 | ' loadname="noname.bas"
23c98                 | ' do_insert=-1
23c98                 | ' inload=0
23c98                 | ' 
23c98                 | ' open "/sd/bas/autorun.bas" for input as #9
23c98     BD 01 00 FF 
23c9c     34 15 06 F6 | 	mov	arg02, ##@LR__6073
23ca0     09 12 06 F6 | 	mov	arg01, #9
23ca4     00 16 06 F6 | 	mov	arg03, #0
23ca8     A8 3D B0 FD | 	call	#__system___basic_open_string
23cac     20 E6 05 F1 | 	add	ptr___system__dat__, #32
23cb0     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
23cb4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
23cb8     52 00 00 FF 
23cbc     D8 E4 05 F1 | 	add	objptr, ##42200
23cc0     F2 FA 61 FC | 	wrlong	result1, objptr
23cc4     52 00 00 FF 
23cc8     D8 E4 85 F1 | 	sub	objptr, ##42200
23ccc                 | ' err=geterr()
23ccc                 | ' close #9
23ccc     09 12 06 F6 | 	mov	arg01, #9
23cd0     D4 84 B0 FD | 	call	#__system__close
23cd4                 | ' if err=0 then line$="run autorun.bas" : interpret
23cd4     52 00 00 FF 
23cd8     D8 E4 05 F1 | 	add	objptr, ##42200
23cdc     F2 26 0A FB | 	rdlong	local01, objptr wz
23ce0     52 00 00 FF 
23ce4     D8 E4 85 F1 | 	sub	objptr, ##42200
23ce8     BD 01 00 AF 
23cec     48 27 06 A6 |  if_e	mov	local01, ##@LR__6074
23cf0     37 00 00 AF 
23cf4     1C E4 05 A1 |  if_e	add	objptr, ##28188
23cf8     F2 26 62 AC |  if_e	wrlong	local01, objptr
23cfc     37 00 00 AF 
23d00     1C E4 85 A1 |  if_e	sub	objptr, ##28188
23d04     20 DB BD AD |  if_e	call	#_interpret
23d08                 | ' 
23d08                 | ' 
23d08                 | ' '-------------------------------------------------------------------------------------------------------- 
23d08                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
23d08                 | ' '--------------------------------------------------------------------------------------------------------
23d08                 | ' 
23d08                 | ' do
23d08                 | LR__2700
23d08     F8 CA BD FD | 	call	#_edit
23d0c     FD 26 02 F6 | 	mov	local01, result1
23d10     37 00 00 FF 
23d14     1C E4 05 F1 | 	add	objptr, ##28188
23d18     F2 26 62 FC | 	wrlong	local01, objptr
23d1c     37 00 00 FF 
23d20     1C E4 85 F1 | 	sub	objptr, ##28188
23d24     00 DB BD FD | 	call	#_interpret
23d28     BD 01 00 FF 
23d2c     58 27 06 F6 | 	mov	local01, ##@LR__6075
23d30     37 00 00 FF 
23d34     1C E4 05 F1 | 	add	objptr, ##28188
23d38     F2 26 62 FC | 	wrlong	local01, objptr
23d3c     37 00 00 FF 
23d40     1C E4 85 F1 | 	sub	objptr, ##28188
23d44     C0 FF 9F FD | 	jmp	#LR__2700
23d48     A7 F0 03 F6 | 	mov	ptra, fp
23d4c     B2 00 A0 FD | 	call	#popregs_
23d50                 | _program_ret
23d50     2D 00 64 FD | 	ret
23d54                 | 
23d54                 | ' '' this is not a main program.
23d54                 | ' 
23d54                 | ' '****************************************************************************************************************
23d54                 | ' '                                                                                                             	*
23d54                 | ' 'Start the driver  at pins 'base'                            					rev 20230829 	*
23d54                 | ' '                                                                                                            	*
23d54                 | ' ' base - HDMI base pin												*
23d54                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
23d54                 | ' '														*
23d54                 | ' '														*
23d54                 | ' '****************************************************************************************************************
23d54                 | ' 
23d54                 | ' pub start(base,mb):result |i
23d54                 | _hg010b_spin2_start
23d54                 | ' 
23d54                 | ' '--------------------------- initialize pointers and variables
23d54                 | ' 
23d54                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
23d54     34 E4 05 F1 | 	add	objptr, #52
23d58     F2 FA 01 F6 | 	mov	result1, objptr
23d5c     28 E4 85 F1 | 	sub	objptr, #40
23d60     F2 FA 61 FC | 	wrlong	result1, objptr
23d64                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
23d64                 | ' hdmibase:=base							' HDMI base pin, 8*n
23d64     18 E4 05 F1 | 	add	objptr, #24
23d68     F2 12 62 FC | 	wrlong	arg01, objptr
23d6c                 | ' mailbox_ptr:=mb		
23d6c     04 E4 05 F1 | 	add	objptr, #4
23d70     F2 14 62 FC | 	wrlong	arg02, objptr
23d74                 | ' mailbox0:=mb				' PSRAM mailbox pointer
23d74     C1 E5 05 F1 | 	add	objptr, #449
23d78     F2 14 62 FC | 	wrlong	arg02, objptr
23d7c                 | ' sprite_ptr:=@spr1ptr
23d7c     D8 E4 85 F1 | 	sub	objptr, #216
23d80     F2 FA 01 F6 | 	mov	result1, objptr
23d84     E5 E4 85 F1 | 	sub	objptr, #229
23d88     F2 FA 61 FC | 	wrlong	result1, objptr
23d8c                 | ' 
23d8c                 | ' 		'
23d8c                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
23d8c     E5 E4 05 F1 | 	add	objptr, #229
23d90     F2 FA 01 FB | 	rdlong	result1, objptr
23d94     D0 FA 05 F1 | 	add	result1, #208
23d98     FD 10 58 FC | 	wrword	#8, result1
23d9c                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
23d9c     F2 16 02 FB | 	rdlong	arg03, objptr
23da0     D2 16 06 F1 | 	add	arg03, #210
23da4     0B 21 58 FC | 	wrword	#16, arg03
23da8                 | ' leading_spaces:=0				'
23da8     A5 E5 05 F1 | 	add	objptr, #421
23dac     F2 00 68 FC | 	wrlong	#0, objptr
23db0                 | ' 
23db0                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
23db0     99 E4 85 F1 | 	sub	objptr, #153
23db4     00 00 A0 FF 
23db8     F2 0E 68 FC | 	wrlong	##1073741831, objptr
23dbc                 | ' emptydl[1]:=0
23dbc     04 E4 05 F1 | 	add	objptr, #4
23dc0     F2 00 68 FC | 	wrlong	#0, objptr
23dc4                 | ' 
23dc4                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
23dc4                 | ' 
23dc4                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
23dc4     28 E5 85 F1 | 	sub	objptr, #296
23dc8     F2 02 68 FC | 	wrlong	#1, objptr
23dcc                 | ' if s_debug<>0
23dcc                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
23dcc     20 00 80 FF 
23dd0     F2 00 68 FC | 	wrlong	##16384, objptr
23dd4     F9 E4 85 F1 | 	sub	objptr, #249
23dd8                 | ' setmode()							' set the mode, see below
23dd8     EC 02 B0 FD | 	call	#_hg010b_spin2_setmode
23ddc                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
23ddc     49 E4 05 F1 | 	add	objptr, #73
23de0     F2 FA 01 F6 | 	mov	result1, objptr
23de4     35 E4 85 F1 | 	sub	objptr, #53
23de8     F2 FA 61 FC | 	wrlong	result1, objptr
23dec                 | ' cursor_ptr:=@cursor_x						
23dec     28 E4 05 F1 | 	add	objptr, #40
23df0     F2 16 02 F6 | 	mov	arg03, objptr
23df4     2C E4 85 F1 | 	sub	objptr, #44
23df8     F2 16 62 FC | 	wrlong	arg03, objptr
23dfc                 | ' fontnum:=0  							' start with a PC type font 
23dfc     55 E4 05 F1 | 	add	objptr, #85
23e00     F2 00 68 FC | 	wrlong	#0, objptr
23e04                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
23e04     1C E4 05 F1 | 	add	objptr, #28
23e08     F2 12 02 F6 | 	mov	arg01, objptr
23e0c     81 E4 85 F1 | 	sub	objptr, #129
23e10     10 00 00 FF 
23e14     80 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8320
23e18     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
23e1c     10 00 00 FF 
23e20     80 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8320
23e24     10 16 06 F6 | 	mov	arg03, #16
23e28     44 2F B0 FD | 	call	#__system____builtin_memmove
23e2c                 | ' leading_spaces:=0
23e2c     01 00 00 FF 
23e30     B6 E4 05 F1 | 	add	objptr, ##694
23e34     F2 00 68 FC | 	wrlong	#0, objptr
23e38     01 00 00 FF 
23e3c     B6 E4 85 F1 | 	sub	objptr, ##694
23e40                 | ' '---------------------------- initialize a cursor (MSDOS type)
23e40                 | ' 
23e40                 | ' initcursor(154)
23e40     9A 12 06 F6 | 	mov	arg01, #154
23e44     4C 00 B0 FD | 	call	#_hg010b_spin2_initcursor
23e48                 | ' 
23e48                 | ' '---------------------------- start the cog
23e48                 | ' 
23e48                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
23e48     10 00 00 FF 
23e4c     90 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8336
23e50     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
23e54     10 00 00 FF 
23e58     90 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8336
23e5c     14 E4 05 F1 | 	add	objptr, #20
23e60     10 FA 05 F6 | 	mov	result1, #16
23e64     28 E4 61 FD | 	setq	objptr
23e68     0A FB F1 FC | 	coginit	result1, arg02 wc
23e6c     01 FA 65 C6 |  if_b	neg	result1, #1
23e70     1C E4 05 F1 | 	add	objptr, #28
23e74     F2 FA 61 FC | 	wrlong	result1, objptr
23e78     30 E4 85 F1 | 	sub	objptr, #48
23e7c                 | ' waitms(40)							' wait for stabilize
23e7c     28 12 06 F6 | 	mov	arg01, #40
23e80     C0 32 B0 FD | 	call	#__system___waitms
23e84                 | ' return cog							' return the driver's cog #
23e84     30 E4 05 F1 | 	add	objptr, #48
23e88     F2 FA 01 FB | 	rdlong	result1, objptr
23e8c     30 E4 85 F1 | 	sub	objptr, #48
23e90                 | _hg010b_spin2_start_ret
23e90     2D 00 64 FD | 	ret
23e94                 | 
23e94                 | ' 
23e94                 | ' 
23e94                 | ' '**************************************************************************************************************** 
23e94                 | ' '                                                                                                             	*
23e94                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
23e94                 | ' '  Mode number - see start() above or bits below								*
23e94                 | ' '                                                                                                             	*
23e94                 | ' '****************************************************************************************************************
23e94                 | ' 
23e94                 | ' '---------------------------- initialize a cursor (MSDOS type)
23e94                 | ' pub initcursor(color) |i
23e94                 | _hg010b_spin2_initcursor
23e94     03 4A 05 F6 | 	mov	COUNT_, #3
23e98     A8 00 A0 FD | 	call	#pushregs_
23e9c     09 27 02 F6 | 	mov	local01, arg01
23ea0                 | ' 
23ea0                 | ' cursor_x:=0							' place the cursor at 0:0
23ea0     3C E4 05 F1 | 	add	objptr, #60
23ea4     F2 00 58 FC | 	wrword	#0, objptr
23ea8                 | ' cursor_y:=0
23ea8     02 E4 05 F1 | 	add	objptr, #2
23eac     F2 00 48 FC | 	wrbyte	#0, objptr
23eb0                 | ' repeat i from 0 to 111
23eb0     00 28 06 F6 | 	mov	local02, #0
23eb4     F8 E5 05 F1 | 	add	objptr, #504
23eb8     97 1A 48 FB | 	callpa	#(@LR__2712-@LR__2710)>>2,fcache_load_ptr_
23ebc                 | LR__2710
23ebc                 | '   cursor[i]:=0
23ebc     14 2B 02 F6 | 	mov	local03, local02
23ec0     F2 2A 02 F1 | 	add	local03, objptr
23ec4     15 01 48 FC | 	wrbyte	#0, local03
23ec8     01 28 06 F1 | 	add	local02, #1
23ecc     70 28 56 F2 | 	cmps	local02, #112 wc
23ed0     E8 FF 9F CD |  if_b	jmp	#LR__2710
23ed4                 | ' repeat i from 112 to 127
23ed4     70 28 06 F6 | 	mov	local02, #112
23ed8                 | LR__2711
23ed8                 | '   cursor[i]:=color  
23ed8     14 2B 02 F6 | 	mov	local03, local02
23edc     F2 2A 02 F1 | 	add	local03, objptr
23ee0     15 27 42 FC | 	wrbyte	local01, local03
23ee4     01 28 06 F1 | 	add	local02, #1
23ee8     80 28 16 F2 | 	cmp	local02, #128 wc
23eec     E8 FF 9F CD |  if_b	jmp	#LR__2711
23ef0                 | LR__2712
23ef0                 | ' 'repeat i from 0 to 127
23ef0                 | ' '  if ((i/8)//2)
23ef0                 | ' '    cursor[i]:=15
23ef0                 | ' '  else
23ef0                 | ' '    cursor[i]:=0
23ef0                 | ' '  if i>=120    
23ef0                 | ' '    cursor[i]:=40
23ef0                 | ' setspriteptr(17,@cursor)
23ef0     F2 14 02 F6 | 	mov	arg02, objptr
23ef4     01 00 00 FF 
23ef8     36 E4 85 F1 | 	sub	objptr, ##566
23efc     11 12 06 F6 | 	mov	arg01, #17
23f00     E8 04 B0 FD | 	call	#_hg010b_spin2_setspriteptr
23f04                 | ' setspritesize(17,8,16)
23f04     11 12 06 F6 | 	mov	arg01, #17
23f08     08 14 06 F6 | 	mov	arg02, #8
23f0c     10 16 06 F6 | 	mov	arg03, #16
23f10     68 05 B0 FD | 	call	#_hg010b_spin2_setspritesize
23f14                 | ' setspritepos(17,0,0)
23f14     11 12 06 F6 | 	mov	arg01, #17
23f18     00 14 06 F6 | 	mov	arg02, #0
23f1c     00 16 06 F6 | 	mov	arg03, #0
23f20     F0 04 B0 FD | 	call	#_hg010b_spin2_setspritepos
23f24                 | ' cursorshape:=14
23f24     0B 00 00 FF 
23f28     C6 E4 05 F1 | 	add	objptr, ##5830
23f2c     F2 1C 68 FC | 	wrlong	#14, objptr
23f30                 | ' cursorcolor:=color
23f30     04 E4 85 F1 | 	sub	objptr, #4
23f34     F2 26 62 FC | 	wrlong	local01, objptr
23f38     0B 00 00 FF 
23f3c     C2 E4 85 F1 | 	sub	objptr, ##5826
23f40     A7 F0 03 F6 | 	mov	ptra, fp
23f44     B2 00 A0 FD | 	call	#popregs_
23f48                 | _hg010b_spin2_initcursor_ret
23f48     2D 00 64 FD | 	ret
23f4c                 | 
23f4c                 | ' 
23f4c                 | ' pub setcursorshape(shape) | i
23f4c                 | _hg010b_spin2_setcursorshape
23f4c                 | ' 
23f4c                 | ' cursorshape:=shape
23f4c     0B 00 00 FF 
23f50     C6 E4 05 F1 | 	add	objptr, ##5830
23f54     F2 12 62 FC | 	wrlong	arg01, objptr
23f58                 | ' repeat i from 0 to (8*cursorshape)-1
23f58     00 00 06 F6 | 	mov	_var01, #0
23f5c     09 03 02 F6 | 	mov	_var02, arg01
23f60     03 02 66 F0 | 	shl	_var02, #3
23f64     01 02 86 F1 | 	sub	_var02, #1
23f68     00 02 56 F2 | 	cmps	_var02, #0 wc
23f6c     01 04 86 F6 | 	negc	_var03, #1
23f70     02 07 02 F6 | 	mov	_var04, _var03
23f74     02 03 02 F1 | 	add	_var02, _var03
23f78     0A 00 00 FF 
23f7c     90 E4 85 F1 | 	sub	objptr, ##5264
23f80     97 0C 48 FB | 	callpa	#(@LR__2721-@LR__2720)>>2,fcache_load_ptr_
23f84                 | LR__2720
23f84                 | '   cursor[i]:=0
23f84     00 05 02 F6 | 	mov	_var03, _var01
23f88     F2 04 02 F1 | 	add	_var03, objptr
23f8c     02 01 48 FC | 	wrbyte	#0, _var03
23f90     03 01 02 F1 | 	add	_var01, _var04
23f94     01 01 0A F2 | 	cmp	_var01, _var02 wz
23f98     E8 FF 9F 5D |  if_ne	jmp	#LR__2720
23f9c                 | LR__2721
23f9c                 | ' repeat i from 8*cursorshape to 127
23f9c     0A 00 00 FF 
23fa0     90 E4 05 F1 | 	add	objptr, ##5264
23fa4     F2 06 02 FB | 	rdlong	_var04, objptr
23fa8     03 01 02 F6 | 	mov	_var01, _var04
23fac     03 00 66 F0 | 	shl	_var01, #3
23fb0     0B 00 00 FF 
23fb4     C6 E4 85 F1 | 	sub	objptr, ##5830
23fb8     03 06 66 F0 | 	shl	_var04, #3
23fbc     80 06 56 F2 | 	cmps	_var04, #128 wc
23fc0     01 04 A6 F6 | 	negnc	_var03, #1
23fc4     7F 02 06 F6 | 	mov	_var02, #127
23fc8     02 03 02 F1 | 	add	_var02, _var03
23fcc     97 1A 48 FB | 	callpa	#(@LR__2723-@LR__2722)>>2,fcache_load_ptr_
23fd0                 | LR__2722
23fd0                 | '   cursor[i]:=cursorcolor
23fd0     00 07 02 F6 | 	mov	_var04, _var01
23fd4     01 00 00 FF 
23fd8     36 E4 05 F1 | 	add	objptr, ##566
23fdc     F2 06 02 F1 | 	add	_var04, objptr
23fe0     0A 00 00 FF 
23fe4     8C E4 05 F1 | 	add	objptr, ##5260
23fe8     F2 12 02 FB | 	rdlong	arg01, objptr
23fec     0B 00 00 FF 
23ff0     C2 E4 85 F1 | 	sub	objptr, ##5826
23ff4     03 13 42 FC | 	wrbyte	arg01, _var04
23ff8     02 01 02 F1 | 	add	_var01, _var03
23ffc     01 01 0A F2 | 	cmp	_var01, _var02 wz
24000     CC FF 9F 5D |  if_ne	jmp	#LR__2722
24004                 | LR__2723
24004                 | _hg010b_spin2_setcursorshape_ret
24004     2D 00 64 FD | 	ret
24008                 | 
24008                 | ' 
24008                 | ' pub setcursorcolor(color) | i
24008                 | _hg010b_spin2_setcursorcolor
24008                 | ' 
24008                 | ' cursorcolor:=color
24008     0B 00 00 FF 
2400c     C2 E4 05 F1 | 	add	objptr, ##5826
24010     F2 12 62 FC | 	wrlong	arg01, objptr
24014                 | ' repeat i from 0 to (8*cursorshape)-1
24014     00 12 06 F6 | 	mov	arg01, #0
24018     04 E4 05 F1 | 	add	objptr, #4
2401c     F2 00 02 FB | 	rdlong	_var01, objptr
24020     03 00 66 F0 | 	shl	_var01, #3
24024     01 00 86 F1 | 	sub	_var01, #1
24028     00 00 56 F2 | 	cmps	_var01, #0 wc
2402c     01 02 86 F6 | 	negc	_var02, #1
24030     01 05 02 F6 | 	mov	_var03, _var02
24034     01 01 02 F1 | 	add	_var01, _var02
24038     0A 00 00 FF 
2403c     90 E4 85 F1 | 	sub	objptr, ##5264
24040     97 0C 48 FB | 	callpa	#(@LR__2731-@LR__2730)>>2,fcache_load_ptr_
24044                 | LR__2730
24044                 | '   cursor[i]:=0
24044     09 03 02 F6 | 	mov	_var02, arg01
24048     F2 02 02 F1 | 	add	_var02, objptr
2404c     01 01 48 FC | 	wrbyte	#0, _var02
24050     02 13 02 F1 | 	add	arg01, _var03
24054     00 13 0A F2 | 	cmp	arg01, _var01 wz
24058     E8 FF 9F 5D |  if_ne	jmp	#LR__2730
2405c                 | LR__2731
2405c                 | ' repeat i from 8*cursorshape to 127
2405c     0A 00 00 FF 
24060     90 E4 05 F1 | 	add	objptr, ##5264
24064     F2 04 02 FB | 	rdlong	_var03, objptr
24068     02 13 02 F6 | 	mov	arg01, _var03
2406c     03 12 66 F0 | 	shl	arg01, #3
24070     0B 00 00 FF 
24074     C6 E4 85 F1 | 	sub	objptr, ##5830
24078     03 04 66 F0 | 	shl	_var03, #3
2407c     80 04 56 F2 | 	cmps	_var03, #128 wc
24080     01 02 A6 F6 | 	negnc	_var02, #1
24084     7F 00 06 F6 | 	mov	_var01, #127
24088     01 01 02 F1 | 	add	_var01, _var02
2408c     97 1A 48 FB | 	callpa	#(@LR__2733-@LR__2732)>>2,fcache_load_ptr_
24090                 | LR__2732
24090                 | '   cursor[i]:=cursorcolor
24090     09 05 02 F6 | 	mov	_var03, arg01
24094     01 00 00 FF 
24098     36 E4 05 F1 | 	add	objptr, ##566
2409c     F2 04 02 F1 | 	add	_var03, objptr
240a0     0A 00 00 FF 
240a4     8C E4 05 F1 | 	add	objptr, ##5260
240a8     F2 06 02 FB | 	rdlong	_var04, objptr
240ac     0B 00 00 FF 
240b0     C2 E4 85 F1 | 	sub	objptr, ##5826
240b4     02 07 42 FC | 	wrbyte	_var04, _var03
240b8     01 13 02 F1 | 	add	arg01, _var02
240bc     00 13 0A F2 | 	cmp	arg01, _var01 wz
240c0     CC FF 9F 5D |  if_ne	jmp	#LR__2732
240c4                 | LR__2733
240c4                 | _hg010b_spin2_setcursorcolor_ret
240c4     2D 00 64 FD | 	ret
240c8                 | 
240c8                 | '   
240c8                 | '   
240c8                 | '   
240c8                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
240c8                 | _hg010b_spin2_setmode
240c8     02 4A 05 F6 | 	mov	COUNT_, #2
240cc     A8 00 A0 FD | 	call	#pushregs_
240d0                 | ' 
240d0                 | ' 
240d0                 | ' dl_ptr:=@emptydl[0]
240d0     01 00 00 FF 
240d4     1D E4 05 F1 | 	add	objptr, ##541
240d8     F2 1A 02 F6 | 	mov	arg05, objptr
240dc     FD E5 85 F1 | 	sub	objptr, #509
240e0     F2 1A 62 FC | 	wrlong	arg05, objptr
240e4                 | ' 
240e4                 | ' if cog>0 
240e4     10 E4 05 F1 | 	add	objptr, #16
240e8     F2 1A 02 FB | 	rdlong	arg05, objptr
240ec     30 E4 85 F1 | 	sub	objptr, #48
240f0     01 1A 56 F2 | 	cmps	arg05, #1 wc
240f4                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
240f4     01 12 06 36 |  if_ae	mov	arg01, #1
240f8     30 10 B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
240fc                 | ' xres:=1024
240fc     01 00 00 FF 
24100     26 E4 05 F1 | 	add	objptr, ##550
24104     02 00 80 FF 
24108     F2 00 68 FC | 	wrlong	##1024, objptr
2410c                 | ' yres:=600
2410c     04 E4 05 F1 | 	add	objptr, #4
24110     01 00 80 FF 
24114     F2 B0 68 FC | 	wrlong	##600, objptr
24118                 | ' ppl:=(timings[3])
24118     10 00 00 FF 
2411c     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8268
24120     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
24124     51 E5 85 F1 | 	sub	objptr, #337
24128     F2 1A 62 FC | 	wrlong	arg05, objptr
2412c                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
2412c     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
24130     F7 26 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
24134     01 26 66 F0 | 	shl	local01, #1
24138     80 E4 85 F1 | 	sub	objptr, #128
2413c     F2 26 62 FC | 	wrlong	local01, objptr
24140                 | ' cpl1:=cpl '' todo remove
24140     04 E4 05 F1 | 	add	objptr, #4
24144     F2 26 62 FC | 	wrlong	local01, objptr
24148                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
24148     02 00 00 FF 
2414c     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##1052
24150     41 E4 85 F1 | 	sub	objptr, #65
24154     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
24158                 | ' repeat i from 0 to 3
24158     00 28 06 F6 | 	mov	local02, #0
2415c     02 00 00 FF 
24160     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
24164     08 E4 05 F1 | 	add	objptr, #8
24168     97 20 48 FB | 	callpa	#(@LR__2741-@LR__2740)>>2,fcache_load_ptr_
2416c                 | LR__2740
2416c                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
2416c     14 27 02 F6 | 	mov	local01, local02
24170     02 26 66 F0 | 	shl	local01, #2
24174     F7 26 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
24178     F2 1A 02 FB | 	rdlong	arg05, objptr
2417c     11 1A 66 F0 | 	shl	arg05, #17
24180     13 27 02 FB | 	rdlong	local01, local01
24184     0D 27 02 F1 | 	add	local01, arg05
24188     80 40 38 FF 
2418c     00 26 06 F1 | 	add	local01, ##1887502336
24190     14 1B 02 F6 | 	mov	arg05, local02
24194     02 1A 66 F0 | 	shl	arg05, #2
24198     F7 1A 02 F1 | 	add	arg05, ptr__hg010b_spin2_dat__
2419c     0D 27 62 FC | 	wrlong	local01, arg05
241a0     01 28 06 F1 | 	add	local02, #1
241a4     04 28 56 F2 | 	cmps	local02, #4 wc
241a8     C0 FF 9F CD |  if_b	jmp	#LR__2740
241ac                 | LR__2741
241ac     24 E4 85 F1 | 	sub	objptr, #36
241b0                 | ' clkfreq:=timings[9]					    	' set the clock frequency for the mode
241b0     24 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #36
241b4     F7 26 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
241b8     14 26 66 FC | 	wrlong	local01, #20
241bc                 | ' hubset(timings[10])
241bc     04 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #4
241c0     F7 12 02 FB | 	rdlong	arg01, ptr__hg010b_spin2_dat__
241c4     10 00 00 FF 
241c8     68 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8296
241cc     00 12 62 FD | 	hubset	arg01
241d0                 | ' waitms(1)                                                   	' wait for stabilization
241d0     01 12 06 F6 | 	mov	arg01, #1
241d4     6C 2F B0 FD | 	call	#__system___waitms
241d8     10 00 00 FF 
241dc     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8300
241e0     F7 28 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
241e4     61 E4 05 F1 | 	add	objptr, #97
241e8     F2 28 62 FC | 	wrlong	local02, objptr
241ec     14 27 52 F6 | 	abs	local01, local02 wc
241f0     04 26 46 F0 | 	shr	local01, #4
241f4     13 27 82 F6 | 	negc	local01, local01
241f8     9C E4 05 F1 | 	add	objptr, #156
241fc     F2 26 62 FC | 	wrlong	local01, objptr
24200     A4 E4 85 F1 | 	sub	objptr, #164
24204     F2 28 02 FB | 	rdlong	local02, objptr
24208     08 E4 05 F1 | 	add	objptr, #8
2420c     F2 26 02 FB | 	rdlong	local01, objptr
24210     13 29 02 FD | 	qmul	local02, local01
24214                 | ' lines:=timings[11]
24214                 | ' t_lines:=lines/16
24214                 | ' buflen:=cpl*lines						' framebuffer length in longs
24214     29 E4 85 F1 | 	sub	objptr, #41
24218     19 26 C6 F9 | 	decod	local01, #25
2421c     10 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #16
24220     18 28 62 FD | 	getqx	local02
24224     F2 28 62 FC | 	wrlong	local02, objptr
24228     38 E4 85 F1 | 	sub	objptr, #56
2422c     02 28 66 F0 | 	shl	local02, #2
24230     14 27 82 F1 | 	sub	local01, local02
24234     F2 26 62 FC | 	wrlong	local01, objptr
24238     FD E4 05 F1 | 	add	objptr, #253
2423c     F2 28 02 FB | 	rdlong	local02, objptr
24240     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
24244     0D 29 02 FD | 	qmul	local02, arg05
24248                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
24248                 | ' textbuf_ptr:=buf_ptr-t_lines*timings[7]
24248     F9 E4 85 F1 | 	sub	objptr, #249
2424c                 | ' mode_ptr:=@timings						' set pointers to timings
2424c     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #28
24250                 | ' graphmode:=1024+512+192+48							' det global variable
24250                 | ' makedl(graphmode)							' make a DL for the mode
24250     03 00 00 FF 
24254     F0 12 06 F6 | 	mov	arg01, ##1776
24258     18 28 62 FD | 	getqx	local02
2425c     14 27 82 F1 | 	sub	local01, local02
24260     F2 26 62 FC | 	wrlong	local01, objptr
24264     14 E4 05 F1 | 	add	objptr, #20
24268     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
2426c     79 E4 05 F1 | 	add	objptr, #121
24270     03 00 80 FF 
24274     F2 E0 69 FC | 	wrlong	##1776, objptr
24278     91 E4 85 F1 | 	sub	objptr, #145
2427c     10 00 00 FF 
24280     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8256
24284     E0 00 B0 FD | 	call	#_hg010b_spin2_makedl
24288                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
24288     F2 26 02 FB | 	rdlong	local01, objptr
2428c     DD E4 05 F1 | 	add	objptr, #221
24290     F2 26 62 FC | 	wrlong	local01, objptr
24294                 | ' s_font_ptr:=font_ptr
24294     D5 E4 85 F1 | 	sub	objptr, #213
24298     F2 26 02 FB | 	rdlong	local01, objptr
2429c     D9 E4 05 F1 | 	add	objptr, #217
242a0     F2 26 62 FC | 	wrlong	local01, objptr
242a4                 | ' s_lines:=lines
242a4     80 E4 85 F1 | 	sub	objptr, #128
242a8     F2 26 02 FB | 	rdlong	local01, objptr
242ac     84 E4 05 F1 | 	add	objptr, #132
242b0     F2 26 62 FC | 	wrlong	local01, objptr
242b4                 | ' s_buflen:=buflen
242b4     AD E4 85 F1 | 	sub	objptr, #173
242b8     F2 26 02 FB | 	rdlong	local01, objptr
242bc     B5 E4 05 F1 | 	add	objptr, #181
242c0     F2 26 62 FC | 	wrlong	local01, objptr
242c4                 | ' s_cpl:=cpl
242c4     94 E4 85 F1 | 	sub	objptr, #148
242c8     F2 26 02 FB | 	rdlong	local01, objptr
242cc     90 E4 05 F1 | 	add	objptr, #144
242d0     F2 26 62 FC | 	wrlong	local01, objptr
242d4                 | ' s_cpl1:=cpl
242d4     90 E4 85 F1 | 	sub	objptr, #144
242d8     F2 26 02 FB | 	rdlong	local01, objptr
242dc     98 E4 05 F1 | 	add	objptr, #152
242e0     F2 26 62 FC | 	wrlong	local01, objptr
242e4                 | ' st_lines:=t_lines
242e4     0C E4 05 F1 | 	add	objptr, #12
242e8     F2 26 02 FB | 	rdlong	local01, objptr
242ec     04 E4 05 F1 | 	add	objptr, #4
242f0     F2 26 62 FC | 	wrlong	local01, objptr
242f4                 | ' ppl:=ppl/xzoom  
242f4     28 E4 85 F1 | 	sub	objptr, #40
242f8     F2 90 02 FB | 	rdlong	muldiva_, objptr
242fc     2C E4 05 F1 | 	add	objptr, #44
24300     F2 92 02 FB | 	rdlong	muldivb_, objptr
24304     05 E5 85 F1 | 	sub	objptr, #261
24308     BA 00 A0 FD | 	call	#divide_
2430c     D9 E4 05 F1 | 	add	objptr, #217
24310     F2 92 62 FC | 	wrlong	muldivb_, objptr
24314                 | ' s_ppl:=ppl
24314     1C E4 05 F1 | 	add	objptr, #28
24318     F2 92 62 FC | 	wrlong	muldivb_, objptr
2431c     F5 E4 85 F1 | 	sub	objptr, #245
24320                 | ' waitms(20)							' wait 
24320     14 12 06 F6 | 	mov	arg01, #20
24324     1C 2E B0 FD | 	call	#__system___waitms
24328                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
24328     04 E4 05 F1 | 	add	objptr, #4
2432c     F2 12 02 FB | 	rdlong	arg01, objptr
24330     04 E4 85 F1 | 	sub	objptr, #4
24334     F2 16 02 FB | 	rdlong	arg03, objptr
24338     09 17 82 F1 | 	sub	arg03, arg01
2433c     20 14 06 F6 | 	mov	arg02, #32
24340     00 18 06 F6 | 	mov	arg04, #0
24344     01 1A 06 F6 | 	mov	arg05, #1
24348     0B 00 00 FF 
2434c     CC E4 05 F1 | 	add	objptr, ##5836
24350     AC 1F B0 FD | 	call	#_psram_spin2_fill
24354     0B 00 00 FF 
24358     CC E4 85 F1 | 	sub	objptr, ##5836
2435c     A7 F0 03 F6 | 	mov	ptra, fp
24360     B2 00 A0 FD | 	call	#popregs_
24364                 | _hg010b_spin2_setmode_ret
24364     2D 00 64 FD | 	ret
24368                 | 
24368                 | ' 
24368                 | ' '****************************************************************************************************************
24368                 | ' '                                                                                                             	*
24368                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
24368                 | ' '                                                                                                             	*
24368                 | ' '****************************************************************************************************************
24368                 | ' 
24368                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
24368                 | _hg010b_spin2_makedl
24368                 | ' 
24368                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
24368                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
24368                 | ' repeat i from 0 to 11                                                           ' clear DL
24368     00 00 06 F6 | 	mov	_var01, #0
2436c     ED E5 05 F1 | 	add	objptr, #493
24370     97 0E 48 FB | 	callpa	#(@LR__2751-@LR__2750)>>2,fcache_load_ptr_
24374                 | LR__2750
24374                 | '   displaylist[i]:=0 
24374     00 03 02 F6 | 	mov	_var02, _var01
24378     02 02 66 F0 | 	shl	_var02, #2
2437c     F2 02 02 F1 | 	add	_var02, objptr
24380     01 01 68 FC | 	wrlong	#0, _var02
24384     01 00 06 F1 | 	add	_var01, #1
24388     0C 00 56 F2 | 	cmps	_var01, #12 wc
2438c     E4 FF 9F CD |  if_b	jmp	#LR__2750
24390                 | LR__2751
24390                 | '                         ' 
24390                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
24390     8C E5 85 F1 | 	sub	objptr, #396
24394     F2 02 02 FB | 	rdlong	_var02, objptr
24398     14 02 66 F0 | 	shl	_var02, #20
2439c     01 02 06 F1 | 	add	_var02, #1
243a0     04 E4 85 F1 | 	sub	objptr, #4
243a4     F2 00 02 FB | 	rdlong	_var01, objptr
243a8     02 00 66 F0 | 	shl	_var01, #2
243ac     04 00 66 F0 | 	shl	_var01, #4
243b0     00 03 02 F1 | 	add	_var02, _var01
243b4     90 E5 05 F1 | 	add	objptr, #400
243b8     F2 02 62 FC | 	wrlong	_var02, objptr
243bc     ED E5 85 F1 | 	sub	objptr, #493
243c0                 | ' displaylist[1]:=buf_ptr<<4+%10  
243c0     F2 02 02 FB | 	rdlong	_var02, objptr
243c4     04 02 66 F0 | 	shl	_var02, #4
243c8     02 02 06 F1 | 	add	_var02, #2
243cc     F1 E5 05 F1 | 	add	objptr, #497
243d0     F2 02 62 FC | 	wrlong	_var02, objptr
243d4                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
243d4     04 E4 85 F1 | 	sub	objptr, #4
243d8     F2 02 02 F6 | 	mov	_var02, objptr
243dc     CD E5 85 F1 | 	sub	objptr, #461
243e0     F2 02 62 FC | 	wrlong	_var02, objptr
243e4     20 E4 85 F1 | 	sub	objptr, #32
243e8                 | _hg010b_spin2_makedl_ret
243e8     2D 00 64 FD | 	ret
243ec                 | 
243ec                 | ' 
243ec                 | ' 
243ec                 | ' '****************************************************************************************************************
243ec                 | ' '                                                                        					*
243ec                 | ' '  Graphic primitives                                                    					*
243ec                 | ' '                                                                        					*
243ec                 | ' '****************************************************************************************************************
243ec                 | ' 
243ec                 | ' pub setspriteptr(num,ptr)
243ec                 | _hg010b_spin2_setspriteptr
243ec                 | ' long[@spr1ptr+12*num]:=ptr
243ec     11 E5 05 F1 | 	add	objptr, #273
243f0     F2 00 02 F6 | 	mov	_var01, objptr
243f4     09 03 02 F6 | 	mov	_var02, arg01
243f8     01 02 66 F0 | 	shl	_var02, #1
243fc     09 03 02 F1 | 	add	_var02, arg01
24400     02 02 66 F0 | 	shl	_var02, #2
24404     01 01 02 F1 | 	add	_var01, _var02
24408     00 15 62 FC | 	wrlong	arg02, _var01
2440c     11 E5 85 F1 | 	sub	objptr, #273
24410                 | _hg010b_spin2_setspriteptr_ret
24410     2D 00 64 FD | 	ret
24414                 | 
24414                 | ' 
24414                 | ' pub setspritepos(num,x,y)
24414                 | _hg010b_spin2_setspritepos
24414                 | ' if y>601
24414     01 00 00 FF 
24418     5A 16 56 F2 | 	cmps	arg03, ##602 wc
2441c                 | '   y:=601
2441c     01 00 00 3F 
24420     59 16 06 36 |  if_ae	mov	arg03, ##601
24424                 | ' if x>1024
24424     02 00 00 FF 
24428     01 14 56 F2 | 	cmps	arg02, ##1025 wc
2442c                 | '   x:=1024
2442c     0A 14 C6 39 |  if_ae	decod	arg02, #10
24430                 | ' word[@spr1ptr+12*num+4]:=x
24430     11 E5 05 F1 | 	add	objptr, #273
24434     F2 00 02 F6 | 	mov	_var01, objptr
24438     09 03 02 F6 | 	mov	_var02, arg01
2443c     01 02 66 F0 | 	shl	_var02, #1
24440     09 03 02 F1 | 	add	_var02, arg01
24444     02 02 66 F0 | 	shl	_var02, #2
24448     01 01 02 F1 | 	add	_var01, _var02
2444c     04 00 06 F1 | 	add	_var01, #4
24450     00 15 52 FC | 	wrword	arg02, _var01
24454                 | ' word[@spr1ptr+12*num+6]:=y
24454     F2 00 02 F6 | 	mov	_var01, objptr
24458     09 03 02 F6 | 	mov	_var02, arg01
2445c     01 02 66 F0 | 	shl	_var02, #1
24460     09 03 02 F1 | 	add	_var02, arg01
24464     02 02 66 F0 | 	shl	_var02, #2
24468     01 01 02 F1 | 	add	_var01, _var02
2446c     06 00 06 F1 | 	add	_var01, #6
24470     00 17 52 FC | 	wrword	arg03, _var01
24474     11 E5 85 F1 | 	sub	objptr, #273
24478                 | _hg010b_spin2_setspritepos_ret
24478     2D 00 64 FD | 	ret
2447c                 | 
2447c                 | ' 
2447c                 | ' pub setspritesize(num,w,h)
2447c                 | _hg010b_spin2_setspritesize
2447c                 | ' word[@spr1ptr+12*num+8]:=w
2447c     11 E5 05 F1 | 	add	objptr, #273
24480     F2 00 02 F6 | 	mov	_var01, objptr
24484     09 03 02 F6 | 	mov	_var02, arg01
24488     01 02 66 F0 | 	shl	_var02, #1
2448c     09 03 02 F1 | 	add	_var02, arg01
24490     02 02 66 F0 | 	shl	_var02, #2
24494     01 01 02 F1 | 	add	_var01, _var02
24498     08 00 06 F1 | 	add	_var01, #8
2449c     00 15 52 FC | 	wrword	arg02, _var01
244a0                 | ' word[@spr1ptr+12*num+10]:=h
244a0     F2 00 02 F6 | 	mov	_var01, objptr
244a4     09 03 02 F6 | 	mov	_var02, arg01
244a8     01 02 66 F0 | 	shl	_var02, #1
244ac     09 03 02 F1 | 	add	_var02, arg01
244b0     02 02 66 F0 | 	shl	_var02, #2
244b4     01 01 02 F1 | 	add	_var01, _var02
244b8     0A 00 06 F1 | 	add	_var01, #10
244bc     00 17 52 FC | 	wrword	arg03, _var01
244c0     11 E5 85 F1 | 	sub	objptr, #273
244c4                 | _hg010b_spin2_setspritesize_ret
244c4     2D 00 64 FD | 	ret
244c8                 | 
244c8                 | ' 
244c8                 | ' 
244c8                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
244c8                 | ' 
244c8                 | ' 
244c8                 | ' pub putpixel(x,y,c)
244c8                 | _hg010b_spin2_putpixel
244c8     04 4A 05 F6 | 	mov	COUNT_, #4
244cc     A8 00 A0 FD | 	call	#pushregs_
244d0     09 27 02 F6 | 	mov	local01, arg01
244d4                 | ' 
244d4                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
244d4     00 28 06 F6 | 	mov	local02, #0
244d8     00 26 56 F2 | 	cmps	local01, #0 wc
244dc     01 28 66 36 |  if_ae	neg	local02, #1
244e0     E9 E4 05 F1 | 	add	objptr, #233
244e4     F2 1A 02 FB | 	rdlong	arg05, objptr
244e8     02 1A 66 F0 | 	shl	arg05, #2
244ec     0D 27 52 F2 | 	cmps	local01, arg05 wc
244f0     15 2B A2 F1 | 	subx	local03, local03
244f4     15 29 02 F5 | 	and	local02, local03
244f8     00 2A 06 F6 | 	mov	local03, #0
244fc     00 14 56 F2 | 	cmps	arg02, #0 wc
24500     01 2A 66 36 |  if_ae	neg	local03, #1
24504     15 29 02 F5 | 	and	local02, local03
24508     04 E4 85 F1 | 	sub	objptr, #4
2450c     F2 2A 02 FB | 	rdlong	local03, objptr
24510     E5 E4 85 F1 | 	sub	objptr, #229
24514     15 15 52 F2 | 	cmps	arg02, local03 wc
24518     16 2D A2 F1 | 	subx	local04, local04
2451c     16 29 CA F7 | 	test	local02, local04 wz
24520     48 00 90 AD |  if_e	jmp	#LR__2760
24524     DD E4 05 F1 | 	add	objptr, #221
24528     F2 12 02 FB | 	rdlong	arg01, objptr
2452c     14 E4 05 F1 | 	add	objptr, #20
24530     F2 2C 02 FB | 	rdlong	local04, objptr
24534     02 2C 66 F0 | 	shl	local04, #2
24538     0A 2D 02 FD | 	qmul	local04, arg02
2453c                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
2453c     0B 15 02 F6 | 	mov	arg02, arg03
24540     01 16 06 F6 | 	mov	arg03, #1
24544     00 18 06 F6 | 	mov	arg04, #0
24548     01 1A 06 F6 | 	mov	arg05, #1
2454c     0A 00 00 FF 
24550     DB E5 05 F1 | 	add	objptr, ##5595
24554     18 2C 62 FD | 	getqx	local04
24558     13 2D 02 F1 | 	add	local04, local01
2455c     16 13 02 F1 | 	add	arg01, local04
24560     9C 1D B0 FD | 	call	#_psram_spin2_fill
24564     0B 00 00 FF 
24568     CC E4 85 F1 | 	sub	objptr, ##5836
2456c                 | LR__2760
2456c     A7 F0 03 F6 | 	mov	ptra, fp
24570     B2 00 A0 FD | 	call	#popregs_
24574                 | _hg010b_spin2_putpixel_ret
24574     2D 00 64 FD | 	ret
24578                 | 
24578                 | ' 
24578                 | ' pub putpixel2(x,y,c)
24578                 | _hg010b_spin2_putpixel2
24578     02 4A 05 F6 | 	mov	COUNT_, #2
2457c     A8 00 A0 FD | 	call	#pushregs_
24580     DD E4 05 F1 | 	add	objptr, #221
24584     F2 26 02 FB | 	rdlong	local01, objptr
24588     14 E4 05 F1 | 	add	objptr, #20
2458c     F2 1A 02 FB | 	rdlong	arg05, objptr
24590     02 1A 66 F0 | 	shl	arg05, #2
24594     0A 1B 02 FD | 	qmul	arg05, arg02
24598                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
24598     0B 15 02 F6 | 	mov	arg02, arg03
2459c     01 16 06 F6 | 	mov	arg03, #1
245a0     00 18 06 F6 | 	mov	arg04, #0
245a4     01 1A 06 F6 | 	mov	arg05, #1
245a8     0A 00 00 FF 
245ac     DB E5 05 F1 | 	add	objptr, ##5595
245b0     18 28 62 FD | 	getqx	local02
245b4     09 29 02 F1 | 	add	local02, arg01
245b8     14 27 02 F1 | 	add	local01, local02
245bc     13 13 02 F6 | 	mov	arg01, local01
245c0     3C 1D B0 FD | 	call	#_psram_spin2_fill
245c4     0B 00 00 FF 
245c8     CC E4 85 F1 | 	sub	objptr, ##5836
245cc     A7 F0 03 F6 | 	mov	ptra, fp
245d0     B2 00 A0 FD | 	call	#popregs_
245d4                 | _hg010b_spin2_putpixel2_ret
245d4     2D 00 64 FD | 	ret
245d8                 | 
245d8                 | ' 
245d8                 | ' pub getpixel2(x,y): c 
245d8                 | _hg010b_spin2_getpixel2
245d8     02 4A 05 F6 | 	mov	COUNT_, #2
245dc     A8 00 A0 FD | 	call	#pushregs_
245e0     0C F0 07 F1 | 	add	ptra, #12
245e4     04 4E 05 F1 | 	add	fp, #4
245e8     A7 12 62 FC | 	wrlong	arg01, fp
245ec     04 4E 05 F1 | 	add	fp, #4
245f0     A7 14 62 FC | 	wrlong	arg02, fp
245f4     08 4E 85 F1 | 	sub	fp, #8
245f8     A7 00 68 FC | 	wrlong	#0, fp
245fc     A7 12 02 F6 | 	mov	arg01, fp
24600     DD E4 05 F1 | 	add	objptr, #221
24604     F2 14 02 FB | 	rdlong	arg02, objptr
24608     14 E4 05 F1 | 	add	objptr, #20
2460c     F2 16 02 FB | 	rdlong	arg03, objptr
24610     02 16 66 F0 | 	shl	arg03, #2
24614     08 4E 05 F1 | 	add	fp, #8
24618     A7 FA 01 FB | 	rdlong	result1, fp
2461c     FD 16 02 FD | 	qmul	arg03, result1
24620                 | ' 
24620                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
24620     04 4E 85 F1 | 	sub	fp, #4
24624     A7 26 02 FB | 	rdlong	local01, fp
24628     04 4E 85 F1 | 	sub	fp, #4
2462c     01 16 06 F6 | 	mov	arg03, #1
24630     0A 00 00 FF 
24634     DB E5 05 F1 | 	add	objptr, ##5595
24638     18 28 62 FD | 	getqx	local02
2463c     13 29 02 F1 | 	add	local02, local01
24640     14 15 02 F1 | 	add	arg02, local02
24644     80 1B B0 FD | 	call	#_psram_spin2_read1
24648     0B 00 00 FF 
2464c     CC E4 85 F1 | 	sub	objptr, ##5836
24650                 | ' return c
24650     A7 FA 01 FB | 	rdlong	result1, fp
24654     A7 F0 03 F6 | 	mov	ptra, fp
24658     B2 00 A0 FD | 	call	#popregs_
2465c                 | _hg010b_spin2_getpixel2_ret
2465c     2D 00 64 FD | 	ret
24660                 | 
24660                 | '   
24660                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
24660                 | ' 
24660                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
24660                 | _hg010b_spin2_fastline
24660     02 4A 05 F6 | 	mov	COUNT_, #2
24664     A8 00 A0 FD | 	call	#pushregs_
24668     09 27 02 F6 | 	mov	local01, arg01
2466c     0A 29 02 F6 | 	mov	local02, arg02
24670                 | ' 
24670                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
24670     00 16 56 F2 | 	cmps	arg03, #0 wc
24674     F4 00 90 CD |  if_b	jmp	#LR__2770
24678     01 00 00 FF 
2467c     2A E4 05 F1 | 	add	objptr, ##554
24680     F2 1A 02 FB | 	rdlong	arg05, objptr
24684     01 00 00 FF 
24688     2A E4 85 F1 | 	sub	objptr, ##554
2468c     0D 17 52 F2 | 	cmps	arg03, arg05 wc
24690     D8 00 90 3D |  if_ae	jmp	#LR__2770
24694     00 26 56 F2 | 	cmps	local01, #0 wc
24698     00 28 56 C2 |  if_b	cmps	local02, #0 wc
2469c     CC 00 90 CD |  if_b	jmp	#LR__2770
246a0     01 00 00 FF 
246a4     26 E4 05 F1 | 	add	objptr, ##550
246a8     F2 1A 02 FB | 	rdlong	arg05, objptr
246ac     01 00 00 FF 
246b0     26 E4 85 F1 | 	sub	objptr, ##550
246b4     0D 27 5A F2 | 	cmps	local01, arg05 wcz
246b8     01 00 00 1F 
246bc     26 E4 05 11 |  if_a	add	objptr, ##550
246c0     F2 12 02 1B |  if_a	rdlong	arg01, objptr
246c4     01 00 00 1F 
246c8     26 E4 85 11 |  if_a	sub	objptr, ##550
246cc     09 29 5A 12 |  if_a	cmps	local02, arg01 wcz
246d0                 | '   return
246d0     98 00 90 1D |  if_a	jmp	#LR__2770
246d4     14 27 5A F2 | 	cmps	local01, local02 wcz
246d8     13 1B 02 16 |  if_a	mov	arg05, local01
246dc     14 27 02 16 |  if_a	mov	local01, local02
246e0     0D 29 02 16 |  if_a	mov	local02, arg05
246e4     00 26 56 F2 | 	cmps	local01, #0 wc
246e8     00 26 06 C6 |  if_b	mov	local01, #0
246ec     01 00 00 FF 
246f0     26 E4 05 F1 | 	add	objptr, ##550
246f4     F2 1A 02 FB | 	rdlong	arg05, objptr
246f8     01 00 00 FF 
246fc     26 E4 85 F1 | 	sub	objptr, ##550
24700     0D 29 52 F2 | 	cmps	local02, arg05 wc
24704     01 00 00 3F 
24708     26 E4 05 31 |  if_ae	add	objptr, ##550
2470c     F2 28 02 3B |  if_ae	rdlong	local02, objptr
24710     01 00 00 3F 
24714     26 E4 85 31 |  if_ae	sub	objptr, ##550
24718     DD E4 05 F1 | 	add	objptr, #221
2471c     F2 12 02 FB | 	rdlong	arg01, objptr
24720     14 E4 05 F1 | 	add	objptr, #20
24724     F2 1A 02 FB | 	rdlong	arg05, objptr
24728     02 1A 66 F0 | 	shl	arg05, #2
2472c     0B 1B 02 FD | 	qmul	arg05, arg03
24730                 | ' if x1>x2
24730                 | '   x1,x2:=x2,x1
24730                 | ' if x1<0 
24730                 | '   x1:=0
24730                 | ' if x2>=xres
24730                 | '   x2:=xres-1  
24730     01 28 86 31 |  if_ae	sub	local02, #1
24734                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
24734     01 16 06 F6 | 	mov	arg03, #1
24738     14 17 02 F1 | 	add	arg03, local02
2473c     13 17 82 F1 | 	sub	arg03, local01
24740     0C 15 02 F6 | 	mov	arg02, arg04
24744     00 18 06 F6 | 	mov	arg04, #0
24748     01 1A 06 F6 | 	mov	arg05, #1
2474c     0A 00 00 FF 
24750     DB E5 05 F1 | 	add	objptr, ##5595
24754     18 28 62 FD | 	getqx	local02
24758     13 29 02 F1 | 	add	local02, local01
2475c     14 13 02 F1 | 	add	arg01, local02
24760     9C 1B B0 FD | 	call	#_psram_spin2_fill
24764     0B 00 00 FF 
24768     CC E4 85 F1 | 	sub	objptr, ##5836
2476c                 | LR__2770
2476c     A7 F0 03 F6 | 	mov	ptra, fp
24770     B2 00 A0 FD | 	call	#popregs_
24774                 | _hg010b_spin2_fastline_ret
24774     2D 00 64 FD | 	ret
24778                 | 
24778                 | ' 
24778                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
24778                 | _hg010b_spin2_draw
24778     0E 4A 05 F6 | 	mov	COUNT_, #14
2477c     A8 00 A0 FD | 	call	#pushregs_
24780     09 27 02 F6 | 	mov	local01, arg01
24784     0A 29 02 F6 | 	mov	local02, arg02
24788     0B 2B 02 F6 | 	mov	local03, arg03
2478c     0C 2D 02 F6 | 	mov	local04, arg04
24790     0D 2F 02 F6 | 	mov	local05, arg05
24794                 | ' 
24794                 | ' if (y1==y2)
24794     16 29 0A F2 | 	cmp	local02, local04 wz
24798     18 00 90 5D |  if_ne	jmp	#LR__2780
2479c                 | '   fastline(x1,x2,y1,c)
2479c     13 13 02 F6 | 	mov	arg01, local01
247a0     15 15 02 F6 | 	mov	arg02, local03
247a4     14 17 02 F6 | 	mov	arg03, local02
247a8     17 19 02 F6 | 	mov	arg04, local05
247ac     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
247b0     F8 00 90 FD | 	jmp	#LR__2786
247b4                 | LR__2780
247b4                 | ' else  
247b4                 | '   x:=x1
247b4     13 31 02 F6 | 	mov	local06, local01
247b8                 | '   y:=y1
247b8     14 33 02 F6 | 	mov	local07, local02
247bc                 | ' 
247bc                 | '   if (x1<x2) 
247bc     15 27 52 F2 | 	cmps	local01, local03 wc
247c0                 | '     xi:=1
247c0     01 34 06 C6 |  if_b	mov	local08, #1
247c4                 | '     dx:=x2-x1
247c4     15 37 02 C6 |  if_b	mov	local09, local03
247c8     13 37 82 C1 |  if_b	sub	local09, local01
247cc                 | '   else
247cc                 | '     xi:=-1
247cc     01 34 66 36 |  if_ae	neg	local08, #1
247d0                 | '     dx:=x1-x2
247d0     15 27 82 31 |  if_ae	sub	local01, local03
247d4     13 37 02 36 |  if_ae	mov	local09, local01
247d8                 | '   
247d8                 | '   if (y1<y2) 
247d8     16 29 52 F2 | 	cmps	local02, local04 wc
247dc                 | '     yi:=1
247dc     01 38 06 C6 |  if_b	mov	local10, #1
247e0                 | '     dy:=y2-y1
247e0     16 3B 02 C6 |  if_b	mov	local11, local04
247e4     14 3B 82 C1 |  if_b	sub	local11, local02
247e8                 | '   else
247e8                 | '     yi:=-1
247e8     01 38 66 36 |  if_ae	neg	local10, #1
247ec                 | '     dy:=y1-y2
247ec     16 29 82 31 |  if_ae	sub	local02, local04
247f0     14 3B 02 36 |  if_ae	mov	local11, local02
247f4                 | ' 
247f4                 | '   putpixel(x,y,c)
247f4     17 17 02 F6 | 	mov	arg03, local05
247f8     18 13 02 F6 | 	mov	arg01, local06
247fc     19 15 02 F6 | 	mov	arg02, local07
24800     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
24804                 | ' 
24804                 | '   if (dx>dy)
24804     1D 37 5A F2 | 	cmps	local09, local11 wcz
24808     50 00 90 ED |  if_be	jmp	#LR__2782
2480c                 | '     ai:=(dy-dx)*2
2480c     1D 3D 02 F6 | 	mov	local12, local11
24810     1B 3D 82 F1 | 	sub	local12, local09
24814     01 3C 66 F0 | 	shl	local12, #1
24818                 | '     bi:=dy*2
24818     01 3A 66 F0 | 	shl	local11, #1
2481c     1D 3F 02 F6 | 	mov	local13, local11
24820                 | '     d:= bi-dx
24820     1F 41 02 F6 | 	mov	local14, local13
24824     1B 41 82 F1 | 	sub	local14, local09
24828                 | '     repeat while (x<>x2) 
24828                 | LR__2781
24828     15 31 0A F2 | 	cmp	local06, local03 wz
2482c     7C 00 90 AD |  if_e	jmp	#LR__2785
24830                 | '       if (d>=0) 
24830     00 40 56 F2 | 	cmps	local14, #0 wc
24834                 | '         x+=xi
24834     1A 31 02 31 |  if_ae	add	local06, local08
24838                 | '         y+=yi
24838     1C 33 02 31 |  if_ae	add	local07, local10
2483c                 | '         d+=ai
2483c     1E 41 02 31 |  if_ae	add	local14, local12
24840                 | '       else
24840                 | '         d+=bi
24840     1F 41 02 C1 |  if_b	add	local14, local13
24844                 | '         x+=xi
24844     1A 31 02 C1 |  if_b	add	local06, local08
24848                 | '       putpixel(x,y,c)
24848     18 13 02 F6 | 	mov	arg01, local06
2484c     19 15 02 F6 | 	mov	arg02, local07
24850     17 17 02 F6 | 	mov	arg03, local05
24854     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
24858     CC FF 9F FD | 	jmp	#LR__2781
2485c                 | LR__2782
2485c                 | '   else
2485c                 | '     ai:=(dx-dy)*2
2485c     1B 3D 02 F6 | 	mov	local12, local09
24860     1D 3D 82 F1 | 	sub	local12, local11
24864     01 3C 66 F0 | 	shl	local12, #1
24868                 | '     bi:=dx*2
24868     01 36 66 F0 | 	shl	local09, #1
2486c     1B 3F 02 F6 | 	mov	local13, local09
24870                 | '     d:=bi-dy
24870     1F 41 02 F6 | 	mov	local14, local13
24874     1D 41 82 F1 | 	sub	local14, local11
24878                 | '     repeat while (y<>y2)
24878                 | LR__2783
24878     16 33 0A F2 | 	cmp	local07, local04 wz
2487c     2C 00 90 AD |  if_e	jmp	#LR__2784
24880                 | '       if (d>=0)
24880     00 40 56 F2 | 	cmps	local14, #0 wc
24884                 | '         x+=xi
24884     1A 31 02 31 |  if_ae	add	local06, local08
24888                 | '         y+=yi
24888     1C 33 02 31 |  if_ae	add	local07, local10
2488c                 | '         d+=ai
2488c     1E 41 02 31 |  if_ae	add	local14, local12
24890                 | '       else
24890                 | '         d+=bi
24890     1F 41 02 C1 |  if_b	add	local14, local13
24894                 | '         y+=yi
24894     1C 33 02 C1 |  if_b	add	local07, local10
24898                 | '       putpixel(x, y,c)
24898     18 13 02 F6 | 	mov	arg01, local06
2489c     19 15 02 F6 | 	mov	arg02, local07
248a0     17 17 02 F6 | 	mov	arg03, local05
248a4     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
248a8     CC FF 9F FD | 	jmp	#LR__2783
248ac                 | LR__2784
248ac                 | LR__2785
248ac                 | LR__2786
248ac     A7 F0 03 F6 | 	mov	ptra, fp
248b0     B2 00 A0 FD | 	call	#popregs_
248b4                 | _hg010b_spin2_draw_ret
248b4     2D 00 64 FD | 	ret
248b8                 | 
248b8                 | '  
248b8                 | ' pub fillpush(val) 
248b8                 | _hg010b_spin2_fillpush
248b8                 | ' fillstack[fillptr]:=val
248b8     0B 00 00 FF 
248bc     BA E4 05 F1 | 	add	objptr, ##5818
248c0     F2 00 02 FB | 	rdlong	_var01, objptr
248c4     02 00 66 F0 | 	shl	_var01, #2
248c8     0A 00 00 FF 
248cc     00 E4 85 F1 | 	sub	objptr, ##5120
248d0     F2 00 02 F1 | 	add	_var01, objptr
248d4     00 13 62 FC | 	wrlong	arg01, _var01
248d8                 | ' fillptr+=1   
248d8     0A 00 00 FF 
248dc     00 E4 05 F1 | 	add	objptr, ##5120
248e0     F2 00 02 FB | 	rdlong	_var01, objptr
248e4     01 00 06 F1 | 	add	_var01, #1
248e8     F2 00 62 FC | 	wrlong	_var01, objptr
248ec     0B 00 00 FF 
248f0     BA E4 85 F1 | 	sub	objptr, ##5818
248f4                 | _hg010b_spin2_fillpush_ret
248f4     2D 00 64 FD | 	ret
248f8                 | 
248f8                 | ' 
248f8                 | '     
248f8                 | ' pub fillpop() : val
248f8                 | _hg010b_spin2_fillpop
248f8                 | ' 
248f8                 | ' fillptr-=1
248f8     0B 00 00 FF 
248fc     BA E4 05 F1 | 	add	objptr, ##5818
24900     F2 FA 01 FB | 	rdlong	result1, objptr
24904     01 FA 85 F1 | 	sub	result1, #1
24908     F2 FA 61 FC | 	wrlong	result1, objptr
2490c                 | ' if fillptr<0
2490c     0B 00 00 FF 
24910     BA E4 85 F1 | 	sub	objptr, ##5818
24914     00 FA 55 F2 | 	cmps	result1, #0 wc
24918                 | '   fillptr:=0
24918     0B 00 00 CF 
2491c     BA E4 05 C1 |  if_b	add	objptr, ##5818
24920     F2 00 68 CC |  if_b	wrlong	#0, objptr
24924     0B 00 00 CF 
24928     BA E4 85 C1 |  if_b	sub	objptr, ##5818
2492c                 | '   val:=-12345
2492c     E7 FF 7F CF 
24930     C7 01 06 C6 |  if_b	mov	_var01, ##-12345
24934     28 00 90 CD |  if_b	jmp	#LR__2790
24938                 | ' else 
24938                 | '   val:=fillstack[fillptr]
24938     0B 00 00 FF 
2493c     BA E4 05 F1 | 	add	objptr, ##5818
24940     F2 00 02 FB | 	rdlong	_var01, objptr
24944     02 00 66 F0 | 	shl	_var01, #2
24948     0A 00 00 FF 
2494c     00 E4 85 F1 | 	sub	objptr, ##5120
24950     F2 00 02 F1 | 	add	_var01, objptr
24954     00 01 02 FB | 	rdlong	_var01, _var01
24958     01 00 00 FF 
2495c     BA E4 85 F1 | 	sub	objptr, ##698
24960                 | LR__2790
24960                 | ' return val
24960     00 FB 01 F6 | 	mov	result1, _var01
24964                 | _hg010b_spin2_fillpop_ret
24964     2D 00 64 FD | 	ret
24968                 | 
24968                 | ' 
24968                 | '       
24968                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
24968                 | _hg010b_spin2_fill
24968     0B 4A 05 F6 | 	mov	COUNT_, #11
2496c     A8 00 A0 FD | 	call	#pushregs_
24970                 | ' 
24970                 | ' newcolor:=newcolor & 255
24970     0B 27 E2 F8 | 	getbyte	local01, arg03, #0
24974                 | ' oldcolor:=oldcolor & 255
24974     0C 29 E2 F8 | 	getbyte	local02, arg04, #0
24978                 | ' 
24978                 | ' if (oldcolor == newcolor) 
24978     13 29 0A F2 | 	cmp	local02, local01 wz
2497c                 | '   return
2497c     70 02 90 AD |  if_e	jmp	#LR__2809
24980                 | ' 
24980                 | ' fillptr:=0
24980     0B 00 00 FF 
24984     BA E4 05 F1 | 	add	objptr, ##5818
24988     F2 00 68 FC | 	wrlong	#0, objptr
2498c                 | ' fillmax:=0
2498c     04 E4 05 F1 | 	add	objptr, #4
24990     F2 00 68 FC | 	wrlong	#0, objptr
24994     0B 00 00 FF 
24998     BE E4 85 F1 | 	sub	objptr, ##5822
2499c                 | ' fillpush(x)
2499c     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
249a0                 | ' fillpush(y)
249a0     0A 13 02 F6 | 	mov	arg01, arg02
249a4     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
249a8                 | ' y:=fillpop()
249a8     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
249ac     FD 2A 02 F6 | 	mov	local03, result1
249b0                 | ' x:=fillpop()
249b0     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
249b4     FD 2C 02 F6 | 	mov	local04, result1
249b8                 | ' 'pinhigh(38)
249b8                 | ' repeat while (x>-1)       
249b8                 | LR__2800
249b8     00 2C 56 F2 | 	cmps	local04, #0 wc
249bc     30 02 90 CD |  if_b	jmp	#LR__2808
249c0                 | '  ' pintoggle(39)
249c0                 | '   x1 := x
249c0     16 2F 02 F6 | 	mov	local05, local04
249c4                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
249c4                 | LR__2801
249c4     00 30 06 F6 | 	mov	local06, #0
249c8     00 32 06 F6 | 	mov	local07, #0
249cc     00 2E 56 F2 | 	cmps	local05, #0 wc
249d0     01 32 66 36 |  if_ae	neg	local07, #1
249d4     00 32 0E F2 | 	cmp	local07, #0 wz
249d8     00 30 26 56 |  if_ne	not	local06, #0
249dc     00 34 06 F6 | 	mov	local08, #0
249e0     00 36 06 F6 | 	mov	local09, #0
249e4     15 15 02 F6 | 	mov	arg02, local03
249e8     17 13 02 F6 | 	mov	arg01, local05
249ec     E8 FB BF FD | 	call	#_hg010b_spin2_getpixel2
249f0     14 FB 09 F2 | 	cmp	result1, local02 wz
249f4     00 36 26 A6 |  if_e	not	local09, #0
249f8     00 36 0E F2 | 	cmp	local09, #0 wz
249fc     00 34 26 56 |  if_ne	not	local08, #0
24a00     1A 31 CA F7 | 	test	local06, local08 wz
24a04                 | '     x1--
24a04     01 2E 86 51 |  if_ne	sub	local05, #1
24a08     B8 FF 9F 5D |  if_ne	jmp	#LR__2801
24a0c                 | '   x1++
24a0c     01 2E 06 F1 | 	add	local05, #1
24a10                 | '   spanabove := 0
24a10     00 38 06 F6 | 	mov	local10, #0
24a14                 | '   spanbelow := 0
24a14     00 3A 06 F6 | 	mov	local11, #0
24a18                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
24a18                 | LR__2802
24a18     00 30 06 F6 | 	mov	local06, #0
24a1c     02 00 00 FF 
24a20     00 2E 56 F2 | 	cmps	local05, ##1024 wc
24a24     00 30 26 C6 |  if_b	not	local06, #0
24a28     00 34 06 F6 | 	mov	local08, #0
24a2c     00 36 06 F6 | 	mov	local09, #0
24a30     15 15 02 F6 | 	mov	arg02, local03
24a34     17 13 02 F6 | 	mov	arg01, local05
24a38     9C FB BF FD | 	call	#_hg010b_spin2_getpixel2
24a3c     14 FB 09 F2 | 	cmp	result1, local02 wz
24a40     00 36 26 A6 |  if_e	not	local09, #0
24a44     00 36 0E F2 | 	cmp	local09, #0 wz
24a48     00 34 26 56 |  if_ne	not	local08, #0
24a4c     1A 31 CA F7 | 	test	local06, local08 wz
24a50     88 01 90 AD |  if_e	jmp	#LR__2807
24a54                 | '     putpixel2 (x1,y, newcolor & 255)
24a54     13 17 E2 F8 | 	getbyte	arg03, local01, #0
24a58     17 13 02 F6 | 	mov	arg01, local05
24a5c     15 15 02 F6 | 	mov	arg02, local03
24a60     14 FB BF FD | 	call	#_hg010b_spin2_putpixel2
24a64                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
24a64     00 30 06 F6 | 	mov	local06, #0
24a68     00 32 06 F6 | 	mov	local07, #0
24a6c     00 38 0E F2 | 	cmp	local10, #0 wz
24a70     01 2A 56 A2 |  if_e	cmps	local03, #1 wc
24a74     01 32 66 26 |  if_nc_and_z	neg	local07, #1
24a78     00 32 0E F2 | 	cmp	local07, #0 wz
24a7c     00 30 26 56 |  if_ne	not	local06, #0
24a80     00 34 06 F6 | 	mov	local08, #0
24a84     00 36 06 F6 | 	mov	local09, #0
24a88     15 15 02 F6 | 	mov	arg02, local03
24a8c     01 14 86 F1 | 	sub	arg02, #1
24a90     17 13 02 F6 | 	mov	arg01, local05
24a94     40 FB BF FD | 	call	#_hg010b_spin2_getpixel2
24a98     14 FB 09 F2 | 	cmp	result1, local02 wz
24a9c     00 36 26 A6 |  if_e	not	local09, #0
24aa0     00 36 0E F2 | 	cmp	local09, #0 wz
24aa4     00 34 26 56 |  if_ne	not	local08, #0
24aa8     1A 31 CA F7 | 	test	local06, local08 wz
24aac     1C 00 90 AD |  if_e	jmp	#LR__2803
24ab0                 | '       fillpush(x1)
24ab0     17 13 02 F6 | 	mov	arg01, local05
24ab4     00 FE BF FD | 	call	#_hg010b_spin2_fillpush
24ab8                 | '       fillpush(y-1)
24ab8     15 13 02 F6 | 	mov	arg01, local03
24abc     01 12 86 F1 | 	sub	arg01, #1
24ac0     F4 FD BF FD | 	call	#_hg010b_spin2_fillpush
24ac4                 | '       spanabove := 1 
24ac4     01 38 06 F6 | 	mov	local10, #1
24ac8     4C 00 90 FD | 	jmp	#LR__2804
24acc                 | LR__2803
24acc                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
24acc     00 30 06 F6 | 	mov	local06, #0
24ad0     00 32 06 F6 | 	mov	local07, #0
24ad4     00 38 0E F2 | 	cmp	local10, #0 wz
24ad8     01 2A 56 52 |  if_ne	cmps	local03, #1 wc
24adc     01 32 66 16 |  if_a	neg	local07, #1
24ae0     00 32 0E F2 | 	cmp	local07, #0 wz
24ae4     00 30 26 56 |  if_ne	not	local06, #0
24ae8     00 34 06 F6 | 	mov	local08, #0
24aec     00 36 06 F6 | 	mov	local09, #0
24af0     15 15 02 F6 | 	mov	arg02, local03
24af4     01 14 86 F1 | 	sub	arg02, #1
24af8     17 13 02 F6 | 	mov	arg01, local05
24afc     D8 FA BF FD | 	call	#_hg010b_spin2_getpixel2
24b00     14 FB 09 F2 | 	cmp	result1, local02 wz
24b04     00 36 26 56 |  if_ne	not	local09, #0
24b08     00 36 0E F2 | 	cmp	local09, #0 wz
24b0c     00 34 26 56 |  if_ne	not	local08, #0
24b10     1A 31 CA F7 | 	test	local06, local08 wz
24b14                 | '       spanabove := 0 
24b14     00 38 06 56 |  if_ne	mov	local10, #0
24b18                 | LR__2804
24b18                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
24b18     00 30 06 F6 | 	mov	local06, #0
24b1c     00 32 06 F6 | 	mov	local07, #0
24b20     00 3A 0E F2 | 	cmp	local11, #0 wz
24b24     01 00 00 AF 
24b28     3F 2A 56 A2 |  if_e	cmps	local03, ##575 wc
24b2c     01 32 66 86 |  if_c_and_z	neg	local07, #1
24b30     00 32 0E F2 | 	cmp	local07, #0 wz
24b34     00 30 26 56 |  if_ne	not	local06, #0
24b38     00 34 06 F6 | 	mov	local08, #0
24b3c     00 36 06 F6 | 	mov	local09, #0
24b40     15 15 02 F6 | 	mov	arg02, local03
24b44     01 14 06 F1 | 	add	arg02, #1
24b48     17 13 02 F6 | 	mov	arg01, local05
24b4c     88 FA BF FD | 	call	#_hg010b_spin2_getpixel2
24b50     14 FB 09 F2 | 	cmp	result1, local02 wz
24b54     00 36 26 A6 |  if_e	not	local09, #0
24b58     00 36 0E F2 | 	cmp	local09, #0 wz
24b5c     00 34 26 56 |  if_ne	not	local08, #0
24b60     1A 31 CA F7 | 	test	local06, local08 wz
24b64     1C 00 90 AD |  if_e	jmp	#LR__2805
24b68                 | '       fillpush(x1)
24b68     17 13 02 F6 | 	mov	arg01, local05
24b6c     48 FD BF FD | 	call	#_hg010b_spin2_fillpush
24b70                 | '       fillpush(y + 1)
24b70     15 13 02 F6 | 	mov	arg01, local03
24b74     01 12 06 F1 | 	add	arg01, #1
24b78     3C FD BF FD | 	call	#_hg010b_spin2_fillpush
24b7c                 | '       spanBelow := 1
24b7c     01 3A 06 F6 | 	mov	local11, #1
24b80     50 00 90 FD | 	jmp	#LR__2806
24b84                 | LR__2805
24b84                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
24b84     00 30 06 F6 | 	mov	local06, #0
24b88     00 32 06 F6 | 	mov	local07, #0
24b8c     00 3A 0E F2 | 	cmp	local11, #0 wz
24b90     01 00 00 5F 
24b94     3F 2A 56 52 |  if_ne	cmps	local03, ##575 wc
24b98     01 32 66 46 |  if_c_and_nz	neg	local07, #1
24b9c     00 32 0E F2 | 	cmp	local07, #0 wz
24ba0     00 30 26 56 |  if_ne	not	local06, #0
24ba4     00 34 06 F6 | 	mov	local08, #0
24ba8     00 36 06 F6 | 	mov	local09, #0
24bac     15 15 02 F6 | 	mov	arg02, local03
24bb0     01 14 06 F1 | 	add	arg02, #1
24bb4     17 13 02 F6 | 	mov	arg01, local05
24bb8     1C FA BF FD | 	call	#_hg010b_spin2_getpixel2
24bbc     14 FB 09 F2 | 	cmp	result1, local02 wz
24bc0     00 36 26 56 |  if_ne	not	local09, #0
24bc4     00 36 0E F2 | 	cmp	local09, #0 wz
24bc8     00 34 26 56 |  if_ne	not	local08, #0
24bcc     1A 31 CA F7 | 	test	local06, local08 wz
24bd0                 | '       spanbelow := 0
24bd0     00 3A 06 56 |  if_ne	mov	local11, #0
24bd4                 | LR__2806
24bd4                 | '     x1++
24bd4     01 2E 06 F1 | 	add	local05, #1
24bd8     3C FE 9F FD | 	jmp	#LR__2802
24bdc                 | LR__2807
24bdc                 | '   y:=fillpop()
24bdc     18 FD BF FD | 	call	#_hg010b_spin2_fillpop
24be0     FD 2A 02 F6 | 	mov	local03, result1
24be4                 | '   x:=fillpop()
24be4     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
24be8     FD 2C 02 F6 | 	mov	local04, result1
24bec     C8 FD 9F FD | 	jmp	#LR__2800
24bf0                 | LR__2808
24bf0                 | LR__2809
24bf0     A7 F0 03 F6 | 	mov	ptra, fp
24bf4     B2 00 A0 FD | 	call	#popregs_
24bf8                 | _hg010b_spin2_fill_ret
24bf8     2D 00 64 FD | 	ret
24bfc                 | 
24bfc                 | ' 'pinlow(38)    
24bfc                 | ' 
24bfc                 | ' '-- A filled circle -----------------------------------------------------
24bfc                 | ' 
24bfc                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
24bfc                 | _hg010b_spin2_fcircle
24bfc     08 4A 05 F6 | 	mov	COUNT_, #8
24c00     A8 00 A0 FD | 	call	#pushregs_
24c04     0B 27 02 F6 | 	mov	local01, arg03
24c08     FF FF 7F FF 
24c0c     FE 27 06 FD | 	qmul	local01, ##-2
24c10     09 29 02 F6 | 	mov	local02, arg01
24c14     0A 2B 02 F6 | 	mov	local03, arg02
24c18     0C 2D 02 F6 | 	mov	local04, arg04
24c1c                 | ' 
24c1c                 | ' d:=5-4*r
24c1c     13 19 02 F6 | 	mov	arg04, local01
24c20     02 18 66 F0 | 	shl	arg04, #2
24c24     05 2E 06 F6 | 	mov	local05, #5
24c28     0C 2F 82 F1 | 	sub	local05, arg04
24c2c                 | ' x:=0
24c2c     00 30 06 F6 | 	mov	local06, #0
24c30                 | ' y:=r
24c30                 | ' da:=(-2*r+5)*4
24c30                 | ' db:=3*4
24c30     0C 32 06 F6 | 	mov	local07, #12
24c34                 | ' repeat while (x<=y) 
24c34     18 34 62 FD | 	getqx	local08
24c38     05 34 06 F1 | 	add	local08, #5
24c3c     02 34 66 F0 | 	shl	local08, #2
24c40                 | LR__2810
24c40     13 31 5A F2 | 	cmps	local06, local01 wcz
24c44     B4 00 90 1D |  if_a	jmp	#LR__2812
24c48                 | '   fastline(x0-x,x0+x,y0-y,c)
24c48     14 13 02 F6 | 	mov	arg01, local02
24c4c     18 13 82 F1 | 	sub	arg01, local06
24c50     14 15 02 F6 | 	mov	arg02, local02
24c54     18 15 02 F1 | 	add	arg02, local06
24c58     15 17 02 F6 | 	mov	arg03, local03
24c5c     13 17 82 F1 | 	sub	arg03, local01
24c60     16 19 02 F6 | 	mov	arg04, local04
24c64     F8 F9 BF FD | 	call	#_hg010b_spin2_fastline
24c68                 | '   fastline(x0-x,x0+x,y0+y,c)
24c68     14 13 02 F6 | 	mov	arg01, local02
24c6c     18 13 82 F1 | 	sub	arg01, local06
24c70     14 15 02 F6 | 	mov	arg02, local02
24c74     18 15 02 F1 | 	add	arg02, local06
24c78     15 17 02 F6 | 	mov	arg03, local03
24c7c     13 17 02 F1 | 	add	arg03, local01
24c80     16 19 02 F6 | 	mov	arg04, local04
24c84     D8 F9 BF FD | 	call	#_hg010b_spin2_fastline
24c88                 | '   fastline(x0-y,x0+y,y0-x,c)
24c88     14 13 02 F6 | 	mov	arg01, local02
24c8c     13 13 82 F1 | 	sub	arg01, local01
24c90     14 15 02 F6 | 	mov	arg02, local02
24c94     13 15 02 F1 | 	add	arg02, local01
24c98     15 17 02 F6 | 	mov	arg03, local03
24c9c     18 17 82 F1 | 	sub	arg03, local06
24ca0     16 19 02 F6 | 	mov	arg04, local04
24ca4     B8 F9 BF FD | 	call	#_hg010b_spin2_fastline
24ca8                 | '   fastline(x0-y,x0+y,y0+x,c)
24ca8     14 13 02 F6 | 	mov	arg01, local02
24cac     13 13 82 F1 | 	sub	arg01, local01
24cb0     14 15 02 F6 | 	mov	arg02, local02
24cb4     13 15 02 F1 | 	add	arg02, local01
24cb8     15 17 02 F6 | 	mov	arg03, local03
24cbc     18 17 02 F1 | 	add	arg03, local06
24cc0     16 19 02 F6 | 	mov	arg04, local04
24cc4     98 F9 BF FD | 	call	#_hg010b_spin2_fastline
24cc8                 | '   if d>0 
24cc8     01 2E 56 F2 | 	cmps	local05, #1 wc
24ccc     18 00 90 CD |  if_b	jmp	#LR__2811
24cd0                 | '     d+=da
24cd0     1A 2F 02 F1 | 	add	local05, local08
24cd4                 | '     y-=1
24cd4     01 26 86 F1 | 	sub	local01, #1
24cd8                 | '     x+=1
24cd8     01 30 06 F1 | 	add	local06, #1
24cdc                 | '     da+=4*4
24cdc     10 34 06 F1 | 	add	local08, #16
24ce0                 | '     db+=2*4
24ce0     08 32 06 F1 | 	add	local07, #8
24ce4     58 FF 9F FD | 	jmp	#LR__2810
24ce8                 | LR__2811
24ce8                 | '   else
24ce8                 | '     d+=db
24ce8     19 2F 02 F1 | 	add	local05, local07
24cec                 | '     x+=1
24cec     01 30 06 F1 | 	add	local06, #1
24cf0                 | '     da+=2*4
24cf0     08 34 06 F1 | 	add	local08, #8
24cf4                 | '     db+=2*4
24cf4     08 32 06 F1 | 	add	local07, #8
24cf8     44 FF 9F FD | 	jmp	#LR__2810
24cfc                 | LR__2812
24cfc     A7 F0 03 F6 | 	mov	ptra, fp
24d00     B2 00 A0 FD | 	call	#popregs_
24d04                 | _hg010b_spin2_fcircle_ret
24d04     2D 00 64 FD | 	ret
24d08                 | 
24d08                 | '  
24d08                 | ' '-- A circle ------------------------------------------------------------ 
24d08                 | '  
24d08                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
24d08                 | _hg010b_spin2_circle
24d08     08 4A 05 F6 | 	mov	COUNT_, #8
24d0c     A8 00 A0 FD | 	call	#pushregs_
24d10     0B 27 02 F6 | 	mov	local01, arg03
24d14     FF FF 7F FF 
24d18     FE 27 06 FD | 	qmul	local01, ##-2
24d1c     09 29 02 F6 | 	mov	local02, arg01
24d20     0A 2B 02 F6 | 	mov	local03, arg02
24d24     0C 2D 02 F6 | 	mov	local04, arg04
24d28                 | ' 
24d28                 | '  
24d28                 | ' d:=5-4*r
24d28     13 19 02 F6 | 	mov	arg04, local01
24d2c     02 18 66 F0 | 	shl	arg04, #2
24d30     05 2E 06 F6 | 	mov	local05, #5
24d34     0C 2F 82 F1 | 	sub	local05, arg04
24d38                 | ' x:=0
24d38     00 30 06 F6 | 	mov	local06, #0
24d3c                 | ' y:=r
24d3c                 | ' da:=(-2*r+5)*4
24d3c                 | ' db:=3*4
24d3c     0C 32 06 F6 | 	mov	local07, #12
24d40                 | ' repeat while (x<=y) 
24d40     18 34 62 FD | 	getqx	local08
24d44     05 34 06 F1 | 	add	local08, #5
24d48     02 34 66 F0 | 	shl	local08, #2
24d4c                 | LR__2820
24d4c     13 31 5A F2 | 	cmps	local06, local01 wcz
24d50     F4 00 90 1D |  if_a	jmp	#LR__2822
24d54                 | '   putpixel(x0-x,y0-y,c)
24d54     14 13 02 F6 | 	mov	arg01, local02
24d58     18 13 82 F1 | 	sub	arg01, local06
24d5c     15 15 02 F6 | 	mov	arg02, local03
24d60     13 15 82 F1 | 	sub	arg02, local01
24d64     16 17 02 F6 | 	mov	arg03, local04
24d68     5C F7 BF FD | 	call	#_hg010b_spin2_putpixel
24d6c                 | '   putpixel(x0-x,y0+y,c)
24d6c     14 13 02 F6 | 	mov	arg01, local02
24d70     18 13 82 F1 | 	sub	arg01, local06
24d74     15 15 02 F6 | 	mov	arg02, local03
24d78     13 15 02 F1 | 	add	arg02, local01
24d7c     16 17 02 F6 | 	mov	arg03, local04
24d80     44 F7 BF FD | 	call	#_hg010b_spin2_putpixel
24d84                 | '   putpixel(x0+x,y0-y,c)
24d84     14 13 02 F6 | 	mov	arg01, local02
24d88     18 13 02 F1 | 	add	arg01, local06
24d8c     15 15 02 F6 | 	mov	arg02, local03
24d90     13 15 82 F1 | 	sub	arg02, local01
24d94     16 17 02 F6 | 	mov	arg03, local04
24d98     2C F7 BF FD | 	call	#_hg010b_spin2_putpixel
24d9c                 | '   putpixel(x0+x,y0+y,c)
24d9c     14 13 02 F6 | 	mov	arg01, local02
24da0     18 13 02 F1 | 	add	arg01, local06
24da4     15 15 02 F6 | 	mov	arg02, local03
24da8     13 15 02 F1 | 	add	arg02, local01
24dac     16 17 02 F6 | 	mov	arg03, local04
24db0     14 F7 BF FD | 	call	#_hg010b_spin2_putpixel
24db4                 | '   putpixel(x0-y,y0-x,c)
24db4     14 13 02 F6 | 	mov	arg01, local02
24db8     13 13 82 F1 | 	sub	arg01, local01
24dbc     15 15 02 F6 | 	mov	arg02, local03
24dc0     18 15 82 F1 | 	sub	arg02, local06
24dc4     16 17 02 F6 | 	mov	arg03, local04
24dc8     FC F6 BF FD | 	call	#_hg010b_spin2_putpixel
24dcc                 | '   putpixel(x0-y,y0+x,c)
24dcc     14 13 02 F6 | 	mov	arg01, local02
24dd0     13 13 82 F1 | 	sub	arg01, local01
24dd4     15 15 02 F6 | 	mov	arg02, local03
24dd8     18 15 02 F1 | 	add	arg02, local06
24ddc     16 17 02 F6 | 	mov	arg03, local04
24de0     E4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
24de4                 | '   putpixel(x0+y,y0-x,c)
24de4     14 13 02 F6 | 	mov	arg01, local02
24de8     13 13 02 F1 | 	add	arg01, local01
24dec     15 15 02 F6 | 	mov	arg02, local03
24df0     18 15 82 F1 | 	sub	arg02, local06
24df4     16 17 02 F6 | 	mov	arg03, local04
24df8     CC F6 BF FD | 	call	#_hg010b_spin2_putpixel
24dfc                 | '   putpixel(x0+y,y0+x,c)
24dfc     14 13 02 F6 | 	mov	arg01, local02
24e00     13 13 02 F1 | 	add	arg01, local01
24e04     15 15 02 F6 | 	mov	arg02, local03
24e08     18 15 02 F1 | 	add	arg02, local06
24e0c     16 17 02 F6 | 	mov	arg03, local04
24e10     B4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
24e14                 | '   if d>0 
24e14     01 2E 56 F2 | 	cmps	local05, #1 wc
24e18     18 00 90 CD |  if_b	jmp	#LR__2821
24e1c                 | '     d+=da
24e1c     1A 2F 02 F1 | 	add	local05, local08
24e20                 | '     y-=1
24e20     01 26 86 F1 | 	sub	local01, #1
24e24                 | '     x+=1
24e24     01 30 06 F1 | 	add	local06, #1
24e28                 | '     da+=4*4
24e28     10 34 06 F1 | 	add	local08, #16
24e2c                 | '     db+=2*4
24e2c     08 32 06 F1 | 	add	local07, #8
24e30     18 FF 9F FD | 	jmp	#LR__2820
24e34                 | LR__2821
24e34                 | '   else
24e34                 | '     d+=db
24e34     19 2F 02 F1 | 	add	local05, local07
24e38                 | '     x+=1
24e38     01 30 06 F1 | 	add	local06, #1
24e3c                 | '     da+=2*4
24e3c     08 34 06 F1 | 	add	local08, #8
24e40                 | '     db+=2*4
24e40     08 32 06 F1 | 	add	local07, #8
24e44     04 FF 9F FD | 	jmp	#LR__2820
24e48                 | LR__2822
24e48     A7 F0 03 F6 | 	mov	ptra, fp
24e4c     B2 00 A0 FD | 	call	#popregs_
24e50                 | _hg010b_spin2_circle_ret
24e50     2D 00 64 FD | 	ret
24e54                 | 
24e54                 | '     
24e54                 | ' '-- A frame (an empty rectangle) ---------------------------------------
24e54                 | ' 
24e54                 | ' pub frame(x1,y1,x2,y2,c)
24e54                 | _hg010b_spin2_frame
24e54     05 4A 05 F6 | 	mov	COUNT_, #5
24e58     A8 00 A0 FD | 	call	#pushregs_
24e5c     09 27 02 F6 | 	mov	local01, arg01
24e60     0A 29 02 F6 | 	mov	local02, arg02
24e64     0B 2B 02 F6 | 	mov	local03, arg03
24e68     0C 2D 02 F6 | 	mov	local04, arg04
24e6c     0D 2F 02 F6 | 	mov	local05, arg05
24e70                 | ' 
24e70                 | ' fastline(x1,x2,y1,c)
24e70     13 13 02 F6 | 	mov	arg01, local01
24e74     15 15 02 F6 | 	mov	arg02, local03
24e78     14 17 02 F6 | 	mov	arg03, local02
24e7c     17 19 02 F6 | 	mov	arg04, local05
24e80     DC F7 BF FD | 	call	#_hg010b_spin2_fastline
24e84                 | ' fastline(x1,x2,y2,c)
24e84     13 13 02 F6 | 	mov	arg01, local01
24e88     15 15 02 F6 | 	mov	arg02, local03
24e8c     16 17 02 F6 | 	mov	arg03, local04
24e90     17 19 02 F6 | 	mov	arg04, local05
24e94     C8 F7 BF FD | 	call	#_hg010b_spin2_fastline
24e98                 | ' line(x1,y1,x1,y2,c)
24e98     13 13 02 F6 | 	mov	arg01, local01
24e9c     14 15 02 F6 | 	mov	arg02, local02
24ea0     13 17 02 F6 | 	mov	arg03, local01
24ea4     16 19 02 F6 | 	mov	arg04, local04
24ea8     17 1B 02 F6 | 	mov	arg05, local05
24eac                 | ' draw(x1,y1,x2,y2,c)
24eac     C8 F8 BF FD | 	call	#_hg010b_spin2_draw
24eb0                 | ' line(x2,y1,x2,y2,c)
24eb0     15 13 02 F6 | 	mov	arg01, local03
24eb4     14 15 02 F6 | 	mov	arg02, local02
24eb8     15 17 02 F6 | 	mov	arg03, local03
24ebc     16 19 02 F6 | 	mov	arg04, local04
24ec0     17 1B 02 F6 | 	mov	arg05, local05
24ec4                 | ' draw(x1,y1,x2,y2,c)
24ec4     B0 F8 BF FD | 	call	#_hg010b_spin2_draw
24ec8     A7 F0 03 F6 | 	mov	ptra, fp
24ecc     B2 00 A0 FD | 	call	#popregs_
24ed0                 | _hg010b_spin2_frame_ret
24ed0     2D 00 64 FD | 	ret
24ed4                 | 
24ed4                 | ' 
24ed4                 | ' '-- A box (a filled rectangle) ----------------------------------------
24ed4                 | ' 
24ed4                 | ' pub box(x1,y1,x2,y2,c) |yy
24ed4                 | _hg010b_spin2_box
24ed4     06 4A 05 F6 | 	mov	COUNT_, #6
24ed8     A8 00 A0 FD | 	call	#pushregs_
24edc     09 27 02 F6 | 	mov	local01, arg01
24ee0     0A 29 02 F6 | 	mov	local02, arg02
24ee4     0B 2B 02 F6 | 	mov	local03, arg03
24ee8     0C 2D 02 F6 | 	mov	local04, arg04
24eec     0D 2F 02 F6 | 	mov	local05, arg05
24ef0                 | ' 
24ef0                 | ' repeat yy from y1 to y2
24ef0     14 2D 52 F2 | 	cmps	local04, local02 wc
24ef4     01 30 86 F6 | 	negc	local06, #1
24ef8     18 2D 02 F1 | 	add	local04, local06
24efc                 | LR__2830
24efc                 | '   fastline(x1,x2,yy,c)
24efc     13 13 02 F6 | 	mov	arg01, local01
24f00     15 15 02 F6 | 	mov	arg02, local03
24f04     17 19 02 F6 | 	mov	arg04, local05
24f08     14 17 02 F6 | 	mov	arg03, local02
24f0c     50 F7 BF FD | 	call	#_hg010b_spin2_fastline
24f10     18 29 02 F1 | 	add	local02, local06
24f14     16 29 0A F2 | 	cmp	local02, local04 wz
24f18     E0 FF 9F 5D |  if_ne	jmp	#LR__2830
24f1c     A7 F0 03 F6 | 	mov	ptra, fp
24f20     B2 00 A0 FD | 	call	#popregs_
24f24                 | _hg010b_spin2_box_ret
24f24     2D 00 64 FD | 	ret
24f28                 | 
24f28                 | '       
24f28                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
24f28                 | _hg010b_spin2_putcharxycgf
24f28                 | ' 
24f28                 | '  
24f28                 | ' repeat yy from 0 to 15
24f28     00 00 06 F6 | 	mov	_var01, #0
24f2c     97 8C 48 FB | 	callpa	#(@LR__2842-@LR__2840)>>2,fcache_load_ptr_
24f30                 | LR__2840
24f30                 | ' 
24f30                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
24f30     95 E4 05 F1 | 	add	objptr, #149
24f34     F2 02 02 FB | 	rdlong	_var02, objptr
24f38     0A 02 66 F0 | 	shl	_var02, #10
24f3c     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
24f40     01 05 02 F1 | 	add	_var03, _var02
24f44     0B 03 02 F6 | 	mov	_var02, arg03
24f48     04 02 66 F0 | 	shl	_var02, #4
24f4c     01 05 02 F1 | 	add	_var03, _var02
24f50     00 05 02 F1 | 	add	_var03, _var01
24f54     02 05 C2 FA | 	rdbyte	_var03, _var03
24f58                 | '   asm
24f58     00 04 0E F4 | 	testb	_var03, #0 wz
24f5c     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
24f60     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
24f64     01 04 0E F4 | 	testb	_var03, #1 wz
24f68     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
24f6c     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
24f70     02 04 0E F4 | 	testb	_var03, #2 wz
24f74     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
24f78     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
24f7c     03 04 0E F4 | 	testb	_var03, #3 wz
24f80     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
24f84     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
24f88     04 04 0E F4 | 	testb	_var03, #4 wz
24f8c     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
24f90     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
24f94     05 04 0E F4 | 	testb	_var03, #5 wz
24f98     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
24f9c     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
24fa0     06 04 0E F4 | 	testb	_var03, #6 wz
24fa4     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
24fa8     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
24fac     07 04 0E F4 | 	testb	_var03, #7 wz
24fb0     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
24fb4     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
24fb8                 | '   
24fb8                 | '   ccc[0]:=c1
24fb8     99 E5 05 F1 | 	add	objptr, #409
24fbc     F2 06 62 FC | 	wrlong	_var04, objptr
24fc0                 | '   ccc[1]:=c2 
24fc0     04 E4 05 F1 | 	add	objptr, #4
24fc4     F2 08 62 FC | 	wrlong	_var05, objptr
24fc8                 | '   long[mailbox0][2]:=8
24fc8     49 E4 85 F1 | 	sub	objptr, #73
24fcc     F2 04 02 FB | 	rdlong	_var03, objptr
24fd0     08 04 06 F1 | 	add	_var03, #8
24fd4     02 11 68 FC | 	wrlong	#8, _var03
24fd8                 | '   long[mailbox0][1]:=@ccc
24fd8     45 E4 05 F1 | 	add	objptr, #69
24fdc     F2 04 02 F6 | 	mov	_var03, objptr
24fe0     45 E4 85 F1 | 	sub	objptr, #69
24fe4     F2 02 02 FB | 	rdlong	_var02, objptr
24fe8     04 02 06 F1 | 	add	_var02, #4
24fec     01 05 62 FC | 	wrlong	_var03, _var02
24ff0                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
24ff0     0C E5 85 F1 | 	sub	objptr, #268
24ff4     F2 04 02 FB | 	rdlong	_var03, objptr
24ff8     0A 03 02 F6 | 	mov	_var02, arg02
24ffc     00 03 02 F1 | 	add	_var02, _var01
25000     0A 02 66 F0 | 	shl	_var02, #10
25004     09 0B 02 F6 | 	mov	_var06, arg01
25008     02 0A 66 F0 | 	shl	_var06, #2
2500c     05 03 02 F1 | 	add	_var02, _var06
25010     01 05 02 F1 | 	add	_var03, _var02
25014     00 00 78 FF 
25018     00 04 06 F1 | 	add	_var03, ##-268435456
2501c     0C E5 05 F1 | 	add	objptr, #268
25020     F2 0A 02 FB | 	rdlong	_var06, objptr
25024     05 05 62 FC | 	wrlong	_var03, _var06
25028                 | '   repeat
25028                 | LR__2841
25028     F2 04 02 FB | 	rdlong	_var03, objptr
2502c     02 03 02 FB | 	rdlong	_var02, _var03
25030     00 02 56 F2 | 	cmps	_var02, #0 wc
25034     F0 FF 9F CD |  if_b	jmp	#LR__2841
25038     E9 E5 85 F1 | 	sub	objptr, #489
2503c     01 00 06 F1 | 	add	_var01, #1
25040     10 00 56 F2 | 	cmps	_var01, #16 wc
25044     E8 FE 9F CD |  if_b	jmp	#LR__2840
25048                 | LR__2842
25048                 | _hg010b_spin2_putcharxycgf_ret
25048     2D 00 64 FD | 	ret
2504c                 | 
2504c                 | ' 
2504c                 | ' 
2504c                 | ' '**********************************************************************r***
2504c                 | ' '                                                                        *
2504c                 | ' ' Font related functions                                                 *
2504c                 | ' '                                                                        *
2504c                 | ' '*************************************************************************
2504c                 | ' 
2504c                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
2504c                 | ' 
2504c                 | ' pub setfontfamily(afontnum)
2504c                 | _hg010b_spin2_setfontfamily
2504c                 | ' 
2504c                 | ' font_family:=afontnum
2504c     95 E4 05 F1 | 	add	objptr, #149
25050     F2 12 62 FC | 	wrlong	arg01, objptr
25054     95 E4 85 F1 | 	sub	objptr, #149
25058                 | ' 'if afontnum==8
25058                 | ' '  font_ptr:=@amiga_font
25058                 | ' 
25058                 | ' if afontnum==4
25058     04 12 0E F2 | 	cmp	arg01, #4 wz
2505c                 | '   font_ptr:=@st_font
2505c     08 00 00 AF 
25060     00 EE 05 A1 |  if_e	add	ptr__hg010b_spin2_dat__, ##4096
25064     08 E4 05 A1 |  if_e	add	objptr, #8
25068     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
2506c     08 E4 85 A1 |  if_e	sub	objptr, #8
25070     08 00 00 AF 
25074     00 EE 85 A1 |  if_e	sub	ptr__hg010b_spin2_dat__, ##4096
25078                 | ' if afontnum==0
25078     00 12 0E F2 | 	cmp	arg01, #0 wz
2507c                 | '   font_ptr:=@vga_font
2507c     08 E4 05 A1 |  if_e	add	objptr, #8
25080     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
25084     08 E4 85 A1 |  if_e	sub	objptr, #8
25088                 | _hg010b_spin2_setfontfamily_ret
25088     2D 00 64 FD | 	ret
2508c                 | 
2508c                 | ' 
2508c                 | ' '*************************************************************************
2508c                 | ' '                                                                        *
2508c                 | ' '  Cursor functions                                                      *
2508c                 | ' '                                                                        *
2508c                 | ' '*************************************************************************
2508c                 | ' 
2508c                 | ' 
2508c                 | ' pub setcursorpos(x,y)
2508c                 | _hg010b_spin2_setcursorpos
2508c                 | ' 
2508c                 | ' ''---------- Set the (x,y) position of cursor
2508c                 | ' 
2508c                 | ' cursor_x:=x
2508c     3C E4 05 F1 | 	add	objptr, #60
25090     F2 12 52 FC | 	wrword	arg01, objptr
25094                 | ' cursor_y:=y
25094     02 E4 05 F1 | 	add	objptr, #2
25098     F2 14 42 FC | 	wrbyte	arg02, objptr
2509c                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
2509c     02 E4 85 F1 | 	sub	objptr, #2
250a0     F2 14 E2 FA | 	rdword	arg02, objptr
250a4     02 14 66 F0 | 	shl	arg02, #2
250a8     02 E4 05 F1 | 	add	objptr, #2
250ac     F2 16 C2 FA | 	rdbyte	arg03, objptr
250b0     3E E4 85 F1 | 	sub	objptr, #62
250b4     04 16 66 F0 | 	shl	arg03, #4
250b8     04 16 06 F1 | 	add	arg03, #4
250bc     11 12 06 F6 | 	mov	arg01, #17
250c0     50 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
250c4                 | _hg010b_spin2_setcursorpos_ret
250c4     2D 00 64 FD | 	ret
250c8                 | 
250c8                 | ' 
250c8                 | ' pub setcursorx(x)
250c8                 | _hg010b_spin2_setcursorx
250c8                 | ' cursor_x:=x
250c8     3C E4 05 F1 | 	add	objptr, #60
250cc     F2 12 52 FC | 	wrword	arg01, objptr
250d0                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
250d0     F2 14 E2 FA | 	rdword	arg02, objptr
250d4     02 14 66 F0 | 	shl	arg02, #2
250d8     02 E4 05 F1 | 	add	objptr, #2
250dc     F2 16 C2 FA | 	rdbyte	arg03, objptr
250e0     3E E4 85 F1 | 	sub	objptr, #62
250e4     04 16 66 F0 | 	shl	arg03, #4
250e8     04 16 06 F1 | 	add	arg03, #4
250ec     11 12 06 F6 | 	mov	arg01, #17
250f0     20 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
250f4                 | _hg010b_spin2_setcursorx_ret
250f4     2D 00 64 FD | 	ret
250f8                 | 
250f8                 | ' 
250f8                 | ' pub setcursory(y) 
250f8                 | _hg010b_spin2_setcursory
250f8                 | ' cursor_y:=y
250f8     3E E4 05 F1 | 	add	objptr, #62
250fc     F2 12 42 FC | 	wrbyte	arg01, objptr
25100                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4)
25100     02 E4 85 F1 | 	sub	objptr, #2
25104     F2 14 E2 FA | 	rdword	arg02, objptr
25108     02 14 66 F0 | 	shl	arg02, #2
2510c     02 E4 05 F1 | 	add	objptr, #2
25110     F2 16 C2 FA | 	rdbyte	arg03, objptr
25114     3E E4 85 F1 | 	sub	objptr, #62
25118     04 16 66 F0 | 	shl	arg03, #4
2511c     04 16 06 F1 | 	add	arg03, #4
25120     11 12 06 F6 | 	mov	arg01, #17
25124     EC F2 BF FD | 	call	#_hg010b_spin2_setspritepos
25128                 | _hg010b_spin2_setcursory_ret
25128     2D 00 64 FD | 	ret
2512c                 | 
2512c                 | ' 
2512c                 | ' '*************************************************************************
2512c                 | ' '                                                                        *
2512c                 | ' '  VBlank functions                                                      *
2512c                 | ' '                                                                        *
2512c                 | ' '*************************************************************************
2512c                 | ' 
2512c                 | ' pub waitvbl(amount) | i
2512c                 | _hg010b_spin2_waitvbl
2512c     03 4A 05 F6 | 	mov	COUNT_, #3
25130     A8 00 A0 FD | 	call	#pushregs_
25134     09 27 02 F6 | 	mov	local01, arg01
25138                 | ' 
25138                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
25138                 | ' 
25138                 | ' repeat i from 1 to amount
25138     01 28 06 F6 | 	mov	local02, #1
2513c     01 26 56 F2 | 	cmps	local01, #1 wc
25140     01 2A 86 F6 | 	negc	local03, #1
25144     15 27 02 F1 | 	add	local01, local03
25148                 | LR__2850
25148                 | '   repeat until vblank==0
25148                 | LR__2851
25148     49 E4 05 F1 | 	add	objptr, #73
2514c     F2 12 0A FB | 	rdlong	arg01, objptr wz
25150     49 E4 85 F1 | 	sub	objptr, #73
25154     0C 00 90 AD |  if_e	jmp	#LR__2852
25158                 | '     waitus(100)
25158     64 12 06 F6 | 	mov	arg01, #100
2515c     50 20 B0 FD | 	call	#__system___waitus
25160     E4 FF 9F FD | 	jmp	#LR__2851
25164                 | LR__2852
25164                 | '   repeat until vblank==1
25164                 | LR__2853
25164     49 E4 05 F1 | 	add	objptr, #73
25168     F2 12 02 FB | 	rdlong	arg01, objptr
2516c     49 E4 85 F1 | 	sub	objptr, #73
25170     01 12 0E F2 | 	cmp	arg01, #1 wz
25174     0C 00 90 AD |  if_e	jmp	#LR__2854
25178                 | '     waitus(100)
25178     64 12 06 F6 | 	mov	arg01, #100
2517c     30 20 B0 FD | 	call	#__system___waitus
25180     E0 FF 9F FD | 	jmp	#LR__2853
25184                 | LR__2854
25184     15 29 02 F1 | 	add	local02, local03
25188     13 29 0A F2 | 	cmp	local02, local01 wz
2518c     B8 FF 9F 5D |  if_ne	jmp	#LR__2850
25190     A7 F0 03 F6 | 	mov	ptra, fp
25194     B2 00 A0 FD | 	call	#popregs_
25198                 | _hg010b_spin2_waitvbl_ret
25198     2D 00 64 FD | 	ret
2519c                 | 
2519c                 | ' 
2519c                 | ' ''---------- Set color #c in palette to r,g,b
2519c                 | ' 
2519c                 | ' pub setcolor(c,r,g,b)  |cc
2519c                 | _hg010b_spin2_setcolor
2519c                 | ' 
2519c                 | ' cc:=r<<24+g<<16+b<<8
2519c     18 14 66 F0 | 	shl	arg02, #24
251a0     10 16 66 F0 | 	shl	arg03, #16
251a4     0B 15 02 F1 | 	add	arg02, arg03
251a8     08 18 66 F0 | 	shl	arg04, #8
251ac     0C 15 02 F1 | 	add	arg02, arg04
251b0                 | ' long[palette_ptr+4*c]:=cc
251b0     1C E4 05 F1 | 	add	objptr, #28
251b4     F2 18 02 FB | 	rdlong	arg04, objptr
251b8     1C E4 85 F1 | 	sub	objptr, #28
251bc     02 12 66 F0 | 	shl	arg01, #2
251c0     09 19 02 F1 | 	add	arg04, arg01
251c4     0C 15 62 FC | 	wrlong	arg02, arg04
251c8                 | _hg010b_spin2_setcolor_ret
251c8     2D 00 64 FD | 	ret
251cc                 | 
251cc                 | ' 
251cc                 | ' 
251cc                 | ' pub cls(fc,bc)   :c,i
251cc                 | _hg010b_spin2_cls
251cc     02 4A 05 F6 | 	mov	COUNT_, #2
251d0     A8 00 A0 FD | 	call	#pushregs_
251d4     09 27 02 F6 | 	mov	local01, arg01
251d8     0A 29 02 F6 | 	mov	local02, arg02
251dc                 | ' 
251dc                 | ' c:=bc
251dc                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
251dc     DD E4 05 F1 | 	add	objptr, #221
251e0     F2 12 02 FB | 	rdlong	arg01, objptr
251e4     A5 E4 85 F1 | 	sub	objptr, #165
251e8     F2 16 02 FB | 	rdlong	arg03, objptr
251ec     02 16 66 F0 | 	shl	arg03, #2
251f0     14 15 02 F6 | 	mov	arg02, local02
251f4     00 18 06 F6 | 	mov	arg04, #0
251f8     01 1A 06 F6 | 	mov	arg05, #1
251fc     0B 00 00 FF 
25200     94 E4 05 F1 | 	add	objptr, ##5780
25204     F8 10 B0 FD | 	call	#_psram_spin2_fill
25208                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
25208     0B 00 00 FF 
2520c     C8 E4 85 F1 | 	sub	objptr, ##5832
25210     F2 12 02 FB | 	rdlong	arg01, objptr
25214     04 E4 85 F1 | 	sub	objptr, #4
25218     F2 16 02 FB | 	rdlong	arg03, objptr
2521c     09 17 82 F1 | 	sub	arg03, arg01
25220     20 14 06 F6 | 	mov	arg02, #32
25224     00 18 06 F6 | 	mov	arg04, #0
25228     01 1A 06 F6 | 	mov	arg05, #1
2522c     0B 00 00 FF 
25230     CC E4 05 F1 | 	add	objptr, ##5836
25234     C8 10 B0 FD | 	call	#_psram_spin2_fill
25238                 | ' setwritecolors(fc,bc)
25238                 | ' 
25238                 | ' write_color:=ff
25238     0B 00 00 FF 
2523c     8B E4 85 F1 | 	sub	objptr, ##5771
25240     F2 26 62 FC | 	wrlong	local01, objptr
25244                 | ' write_background:=bb
25244     04 E4 05 F1 | 	add	objptr, #4
25248     F2 28 62 FC | 	wrlong	local02, objptr
2524c                 | ' cursor_x:=0
2524c     09 E4 85 F1 | 	sub	objptr, #9
25250     F2 00 58 FC | 	wrword	#0, objptr
25254                 | ' cursor_y:=0
25254     02 E4 05 F1 | 	add	objptr, #2
25258     F2 00 48 FC | 	wrbyte	#0, objptr
2525c                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
2525c     02 E4 85 F1 | 	sub	objptr, #2
25260     F2 14 E2 FA | 	rdword	arg02, objptr
25264     02 14 66 F0 | 	shl	arg02, #2
25268     02 E4 05 F1 | 	add	objptr, #2
2526c     F2 16 C2 FA | 	rdbyte	arg03, objptr
25270     3E E4 85 F1 | 	sub	objptr, #62
25274     04 16 66 F0 | 	shl	arg03, #4
25278     04 16 06 F1 | 	add	arg03, #4
2527c     11 12 06 F6 | 	mov	arg01, #17
25280     90 F1 BF FD | 	call	#_hg010b_spin2_setspritepos
25284                 | ' setcursorcolor(fc)
25284     13 13 02 F6 | 	mov	arg01, local01
25288     7C ED BF FD | 	call	#_hg010b_spin2_setcursorcolor
2528c     14 FB 01 F6 | 	mov	result1, local02
25290     00 FC 05 F6 | 	mov	result2, #0
25294     A7 F0 03 F6 | 	mov	ptra, fp
25298     B2 00 A0 FD | 	call	#popregs_
2529c                 | _hg010b_spin2_cls_ret
2529c     2D 00 64 FD | 	ret
252a0                 | 
252a0                 | ' 
252a0                 | ' ''---------- Output a char at the cursor position, move the cursor 
252a0                 | ' 
252a0                 | ' pub putchar(achar) | c,x,y,l,newcpl
252a0                 | _hg010b_spin2_putchar
252a0     02 4A 05 F6 | 	mov	COUNT_, #2
252a4     A8 00 A0 FD | 	call	#pushregs_
252a8     09 27 02 F6 | 	mov	local01, arg01
252ac                 | ' 
252ac                 | ' if achar==10
252ac     0A 26 0E F2 | 	cmp	local01, #10 wz
252b0                 | '   crlf()
252b0     D8 07 B0 AD |  if_e	call	#_hg010b_spin2_crlf
252b4                 | ' if achar==9
252b4     09 26 0E F2 | 	cmp	local01, #9 wz
252b8     18 00 90 5D |  if_ne	jmp	#LR__2860
252bc                 | '   cursor_x:=(cursor_x& %11110000)+16
252bc     3C E4 05 F1 | 	add	objptr, #60
252c0     F2 16 E2 FA | 	rdword	arg03, objptr
252c4     F0 16 06 F5 | 	and	arg03, #240
252c8     10 16 06 F1 | 	add	arg03, #16
252cc     F2 16 52 FC | 	wrword	arg03, objptr
252d0     3C E4 85 F1 | 	sub	objptr, #60
252d4                 | LR__2860
252d4                 | '   
252d4                 | ' if (achar<>9) && (achar<>10) 
252d4     09 26 0E F2 | 	cmp	local01, #9 wz
252d8     0A 26 0E 52 |  if_ne	cmp	local01, #10 wz
252dc     A8 00 90 AD |  if_e	jmp	#LR__2861
252e0                 | '   putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
252e0     3C E4 05 F1 | 	add	objptr, #60
252e4     F2 12 E2 FA | 	rdword	arg01, objptr
252e8     02 E4 05 F1 | 	add	objptr, #2
252ec     F2 14 C2 FA | 	rdbyte	arg02, objptr
252f0     04 14 66 F0 | 	shl	arg02, #4
252f4     04 14 06 F1 | 	add	arg02, #4
252f8     03 E4 05 F1 | 	add	objptr, #3
252fc     F2 18 02 FB | 	rdlong	arg04, objptr
25300     04 E4 05 F1 | 	add	objptr, #4
25304     F2 1A 02 FB | 	rdlong	arg05, objptr
25308     45 E4 85 F1 | 	sub	objptr, #69
2530c     13 17 02 F6 | 	mov	arg03, local01
25310     14 FC BF FD | 	call	#_hg010b_spin2_putcharxycgf
25314     04 E4 05 F1 | 	add	objptr, #4
25318     F2 12 02 FB | 	rdlong	arg01, objptr
2531c     10 00 00 FF 
25320     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
25324     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
25328     3A E4 05 F1 | 	add	objptr, #58
2532c     F2 1A C2 FA | 	rdbyte	arg05, objptr
25330     0D 17 02 FD | 	qmul	arg03, arg05
25334                 | '   ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
25334     10 00 00 FF 
25338     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
2533c     02 E4 85 F1 | 	sub	objptr, #2
25340     F2 28 E2 FA | 	rdword	local02, objptr
25344     01 28 46 F0 | 	shr	local02, #1
25348     13 15 02 F6 | 	mov	arg02, local01
2534c     01 16 06 F6 | 	mov	arg03, #1
25350     00 18 06 F6 | 	mov	arg04, #0
25354     01 1A 06 F6 | 	mov	arg05, #1
25358     0B 00 00 FF 
2535c     90 E4 05 F1 | 	add	objptr, ##5776
25360     18 26 62 FD | 	getqx	local01
25364     14 27 02 F1 | 	add	local01, local02
25368     13 13 02 F1 | 	add	arg01, local01
2536c     90 0F B0 FD | 	call	#_psram_spin2_fill
25370                 | '   cursor_x+=2
25370     0B 00 00 FF 
25374     90 E4 85 F1 | 	sub	objptr, ##5776
25378     F2 28 E2 FA | 	rdword	local02, objptr
2537c     02 28 06 F1 | 	add	local02, #2
25380     F2 28 52 FC | 	wrword	local02, objptr
25384     3C E4 85 F1 | 	sub	objptr, #60
25388                 | LR__2861
25388                 | ' 
25388                 | ' if cursor_x>=256
25388     3C E4 05 F1 | 	add	objptr, #60
2538c     F2 28 E2 FA | 	rdword	local02, objptr
25390     3C E4 85 F1 | 	sub	objptr, #60
25394     00 29 56 F2 | 	cmps	local02, #256 wc
25398     64 00 90 CD |  if_b	jmp	#LR__2863
2539c                 | '   cursor_x:=0
2539c     3C E4 05 F1 | 	add	objptr, #60
253a0     F2 00 58 FC | 	wrword	#0, objptr
253a4                 | '   cursor_y+=1
253a4     02 E4 05 F1 | 	add	objptr, #2
253a8     F2 28 C2 FA | 	rdbyte	local02, objptr
253ac     01 28 06 F1 | 	add	local02, #1
253b0     F2 28 42 FC | 	wrbyte	local02, objptr
253b4                 | '   if cursor_y>st_lines-1
253b4     C3 E4 05 F1 | 	add	objptr, #195
253b8     F2 28 02 FB | 	rdlong	local02, objptr
253bc     01 28 86 F1 | 	sub	local02, #1
253c0     C3 E4 85 F1 | 	sub	objptr, #195
253c4     F2 16 C2 FA | 	rdbyte	arg03, objptr
253c8     3E E4 85 F1 | 	sub	objptr, #62
253cc     14 17 5A F2 | 	cmps	arg03, local02 wcz
253d0     2C 00 90 ED |  if_be	jmp	#LR__2862
253d4                 | '     scrollup2()
253d4     00 12 06 F6 | 	mov	arg01, #0
253d8     01 00 00 FF 
253dc     58 14 06 F6 | 	mov	arg02, ##600
253e0     10 16 06 F6 | 	mov	arg03, #16
253e4     08 02 B0 FD | 	call	#_hg010b_spin2_scrollup2
253e8                 | '     cursor_y:=st_lines-1
253e8     01 E5 05 F1 | 	add	objptr, #257
253ec     F2 28 02 FB | 	rdlong	local02, objptr
253f0     01 28 86 F1 | 	sub	local02, #1
253f4     C3 E4 85 F1 | 	sub	objptr, #195
253f8     F2 28 42 FC | 	wrbyte	local02, objptr
253fc     3E E4 85 F1 | 	sub	objptr, #62
25400                 | LR__2862
25400                 | LR__2863
25400                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
25400     3C E4 05 F1 | 	add	objptr, #60
25404     F2 14 E2 FA | 	rdword	arg02, objptr
25408     02 14 66 F0 | 	shl	arg02, #2
2540c     02 E4 05 F1 | 	add	objptr, #2
25410     F2 16 C2 FA | 	rdbyte	arg03, objptr
25414     3E E4 85 F1 | 	sub	objptr, #62
25418     04 16 66 F0 | 	shl	arg03, #4
2541c     04 16 06 F1 | 	add	arg03, #4
25420     11 12 06 F6 | 	mov	arg01, #17
25424     EC EF BF FD | 	call	#_hg010b_spin2_setspritepos
25428     A7 F0 03 F6 | 	mov	ptra, fp
2542c     B2 00 A0 FD | 	call	#popregs_
25430                 | _hg010b_spin2_putchar_ret
25430     2D 00 64 FD | 	ret
25434                 | 
25434                 | '     
25434                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
25434                 | ' 
25434                 | ' pub putchar2(achar) | c,x,y,l,newcpl
25434                 | _hg010b_spin2_putchar2
25434     02 4A 05 F6 | 	mov	COUNT_, #2
25438     A8 00 A0 FD | 	call	#pushregs_
2543c     09 27 02 F6 | 	mov	local01, arg01
25440                 | ' 
25440                 | ' putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
25440     3C E4 05 F1 | 	add	objptr, #60
25444     F2 12 E2 FA | 	rdword	arg01, objptr
25448     02 E4 05 F1 | 	add	objptr, #2
2544c     F2 14 C2 FA | 	rdbyte	arg02, objptr
25450     04 14 66 F0 | 	shl	arg02, #4
25454     04 14 06 F1 | 	add	arg02, #4
25458     03 E4 05 F1 | 	add	objptr, #3
2545c     F2 18 02 FB | 	rdlong	arg04, objptr
25460     04 E4 05 F1 | 	add	objptr, #4
25464     F2 1A 02 FB | 	rdlong	arg05, objptr
25468     45 E4 85 F1 | 	sub	objptr, #69
2546c     13 17 02 F6 | 	mov	arg03, local01
25470     B4 FA BF FD | 	call	#_hg010b_spin2_putcharxycgf
25474     04 E4 05 F1 | 	add	objptr, #4
25478     F2 12 02 FB | 	rdlong	arg01, objptr
2547c     10 00 00 FF 
25480     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
25484     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
25488     3A E4 05 F1 | 	add	objptr, #58
2548c     F2 1A C2 FA | 	rdbyte	arg05, objptr
25490     0D 17 02 FD | 	qmul	arg03, arg05
25494                 | ' ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
25494     10 00 00 FF 
25498     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
2549c     02 E4 85 F1 | 	sub	objptr, #2
254a0     F2 28 E2 FA | 	rdword	local02, objptr
254a4     01 28 46 F0 | 	shr	local02, #1
254a8     13 15 02 F6 | 	mov	arg02, local01
254ac     01 16 06 F6 | 	mov	arg03, #1
254b0     00 18 06 F6 | 	mov	arg04, #0
254b4     01 1A 06 F6 | 	mov	arg05, #1
254b8     0B 00 00 FF 
254bc     90 E4 05 F1 | 	add	objptr, ##5776
254c0     18 26 62 FD | 	getqx	local01
254c4     14 27 02 F1 | 	add	local01, local02
254c8     13 13 02 F1 | 	add	arg01, local01
254cc     30 0E B0 FD | 	call	#_psram_spin2_fill
254d0                 | ' 
254d0                 | ' cursor_x+=2
254d0     0B 00 00 FF 
254d4     90 E4 85 F1 | 	sub	objptr, ##5776
254d8     F2 28 E2 FA | 	rdword	local02, objptr
254dc     02 28 06 F1 | 	add	local02, #2
254e0     F2 28 52 FC | 	wrword	local02, objptr
254e4                 | ' if cursor_x>=256
254e4     F2 28 E2 FA | 	rdword	local02, objptr
254e8     3C E4 85 F1 | 	sub	objptr, #60
254ec     00 29 56 F2 | 	cmps	local02, #256 wc
254f0     64 00 90 CD |  if_b	jmp	#LR__2871
254f4                 | '   cursor_x:=0
254f4     3C E4 05 F1 | 	add	objptr, #60
254f8     F2 00 58 FC | 	wrword	#0, objptr
254fc                 | '   cursor_y+=1
254fc     02 E4 05 F1 | 	add	objptr, #2
25500     F2 28 C2 FA | 	rdbyte	local02, objptr
25504     01 28 06 F1 | 	add	local02, #1
25508     F2 28 42 FC | 	wrbyte	local02, objptr
2550c                 | '   if cursor_y>st_lines-1
2550c     C3 E4 05 F1 | 	add	objptr, #195
25510     F2 28 02 FB | 	rdlong	local02, objptr
25514     01 28 86 F1 | 	sub	local02, #1
25518     C3 E4 85 F1 | 	sub	objptr, #195
2551c     F2 16 C2 FA | 	rdbyte	arg03, objptr
25520     3E E4 85 F1 | 	sub	objptr, #62
25524     14 17 5A F2 | 	cmps	arg03, local02 wcz
25528     2C 00 90 ED |  if_be	jmp	#LR__2870
2552c                 | '     scrollup2()
2552c     00 12 06 F6 | 	mov	arg01, #0
25530     01 00 00 FF 
25534     58 14 06 F6 | 	mov	arg02, ##600
25538     10 16 06 F6 | 	mov	arg03, #16
2553c     B0 00 B0 FD | 	call	#_hg010b_spin2_scrollup2
25540                 | '     cursor_y:=st_lines-1
25540     01 E5 05 F1 | 	add	objptr, #257
25544     F2 28 02 FB | 	rdlong	local02, objptr
25548     01 28 86 F1 | 	sub	local02, #1
2554c     C3 E4 85 F1 | 	sub	objptr, #195
25550     F2 28 42 FC | 	wrbyte	local02, objptr
25554     3E E4 85 F1 | 	sub	objptr, #62
25558                 | LR__2870
25558                 | LR__2871
25558                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 ) 
25558     3C E4 05 F1 | 	add	objptr, #60
2555c     F2 14 E2 FA | 	rdword	arg02, objptr
25560     02 14 66 F0 | 	shl	arg02, #2
25564     02 E4 05 F1 | 	add	objptr, #2
25568     F2 16 C2 FA | 	rdbyte	arg03, objptr
2556c     3E E4 85 F1 | 	sub	objptr, #62
25570     04 16 66 F0 | 	shl	arg03, #4
25574     04 16 06 F1 | 	add	arg03, #4
25578     11 12 06 F6 | 	mov	arg01, #17
2557c     94 EE BF FD | 	call	#_hg010b_spin2_setspritepos
25580     A7 F0 03 F6 | 	mov	ptra, fp
25584     B2 00 A0 FD | 	call	#popregs_
25588                 | _hg010b_spin2_putchar2_ret
25588     2D 00 64 FD | 	ret
2558c                 | 
2558c                 | ' ''--------- Output a string at the cursor position, move the cursor  
2558c                 | ' 
2558c                 | ' pub write(text) | iii,c,ncx,ncy
2558c                 | _hg010b_spin2_write
2558c     04 4A 05 F6 | 	mov	COUNT_, #4
25590     A8 00 A0 FD | 	call	#pushregs_
25594     09 27 02 F6 | 	mov	local01, arg01
25598                 | ' 
25598                 | ' repeat iii from 0 to strsize(text)-1
25598     00 28 06 F6 | 	mov	local02, #0
2559c     13 13 02 F6 | 	mov	arg01, local01
255a0     09 2B 02 F6 | 	mov	local03, arg01
255a4     97 06 48 FB | 	callpa	#(@LR__2881-@LR__2880)>>2,fcache_load_ptr_
255a8                 | LR__2880
255a8     15 FB C9 FA | 	rdbyte	result1, local03 wz
255ac     01 2A 06 51 |  if_ne	add	local03, #1
255b0     F4 FF 9F 5D |  if_ne	jmp	#LR__2880
255b4                 | LR__2881
255b4     09 2B 82 F1 | 	sub	local03, arg01
255b8     01 2A 86 F1 | 	sub	local03, #1
255bc     00 2A 56 F2 | 	cmps	local03, #0 wc
255c0     01 2C 86 F6 | 	negc	local04, #1
255c4     16 2B 02 F1 | 	add	local03, local04
255c8                 | LR__2882
255c8                 | '   putchar2(byte[text+iii])
255c8     13 13 02 F6 | 	mov	arg01, local01
255cc     14 13 02 F1 | 	add	arg01, local02
255d0     09 13 C2 FA | 	rdbyte	arg01, arg01
255d4     5C FE BF FD | 	call	#_hg010b_spin2_putchar2
255d8     16 29 02 F1 | 	add	local02, local04
255dc     15 29 0A F2 | 	cmp	local02, local03 wz
255e0     E4 FF 9F 5D |  if_ne	jmp	#LR__2882
255e4     A7 F0 03 F6 | 	mov	ptra, fp
255e8     B2 00 A0 FD | 	call	#popregs_
255ec                 | _hg010b_spin2_write_ret
255ec     2D 00 64 FD | 	ret
255f0                 | 
255f0                 | '    
255f0                 | ' ' a version for text scrolling in Basic shifted 4 lines down
255f0                 | ' 
255f0                 | ' pub scrollup2(start=0, end=600 , amount=16) | i
255f0                 | _hg010b_spin2_scrollup2
255f0     03 4A 05 F6 | 	mov	COUNT_, #3
255f4     A8 00 A0 FD | 	call	#pushregs_
255f8                 | ' 	
255f8                 | ' repeat i from 4 to 579 
255f8     04 26 06 F6 | 	mov	local01, #4
255fc                 | LR__2890
255fc     F9 E4 05 F1 | 	add	objptr, #249
25600     F2 1A 02 FB | 	rdlong	arg05, objptr
25604     1C E4 85 F1 | 	sub	objptr, #28
25608     F2 14 02 FB | 	rdlong	arg02, objptr
2560c     13 19 02 F6 | 	mov	arg04, local01
25610     10 18 06 F1 | 	add	arg04, #16
25614     02 18 66 F0 | 	shl	arg04, #2
25618     14 E4 05 F1 | 	add	objptr, #20
2561c     F2 16 02 FB | 	rdlong	arg03, objptr
25620     0B 19 02 FD | 	qmul	arg04, arg03
25624                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
25624     F6 03 00 FF 
25628     00 12 06 F6 | 	mov	arg01, ##519168
2562c     0D 13 82 F1 | 	sub	arg01, arg05
25630     02 16 66 F0 | 	shl	arg03, #2
25634     0A 00 00 FF 
25638     DB E5 05 F1 | 	add	objptr, ##5595
2563c     18 1A 62 FD | 	getqx	arg05
25640     0D 15 02 F1 | 	add	arg02, arg05
25644     80 0B B0 FD | 	call	#_psram_spin2_read1
25648     0A 00 00 FF 
2564c     D3 E5 85 F1 | 	sub	objptr, ##5587
25650     F2 1A 02 FB | 	rdlong	arg05, objptr
25654     1C E4 85 F1 | 	sub	objptr, #28
25658     F2 14 02 FB | 	rdlong	arg02, objptr
2565c     13 19 02 F6 | 	mov	arg04, local01
25660     02 18 66 F0 | 	shl	arg04, #2
25664     14 E4 05 F1 | 	add	objptr, #20
25668     F2 16 02 FB | 	rdlong	arg03, objptr
2566c     0B 19 02 FD | 	qmul	arg04, arg03
25670                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
25670     F6 03 00 FF 
25674     00 12 06 F6 | 	mov	arg01, ##519168
25678     0D 13 82 F1 | 	sub	arg01, arg05
2567c     02 16 66 F0 | 	shl	arg03, #2
25680     0A 00 00 FF 
25684     DB E5 05 F1 | 	add	objptr, ##5595
25688     18 1A 62 FD | 	getqx	arg05
2568c     0D 15 02 F1 | 	add	arg02, arg05
25690     D0 0B B0 FD | 	call	#_psram_spin2_write
25694     0B 00 00 FF 
25698     CC E4 85 F1 | 	sub	objptr, ##5836
2569c     01 26 06 F1 | 	add	local01, #1
256a0     01 00 00 FF 
256a4     44 26 16 F2 | 	cmp	local01, ##580 wc
256a8     50 FF 9F CD |  if_b	jmp	#LR__2890
256ac                 | ' 
256ac                 | ' repeat i from 580 to 599
256ac     01 00 00 FF 
256b0     44 26 06 F6 | 	mov	local01, ##580
256b4                 | LR__2891
256b4                 | '    fastline(0,1023,i,write_background)   
256b4     45 E4 05 F1 | 	add	objptr, #69
256b8     F2 18 02 FB | 	rdlong	arg04, objptr
256bc     45 E4 85 F1 | 	sub	objptr, #69
256c0     00 12 06 F6 | 	mov	arg01, #0
256c4     09 14 CE F9 | 	bmask	arg02, #9
256c8     13 17 02 F6 | 	mov	arg03, local01
256cc     90 EF BF FD | 	call	#_hg010b_spin2_fastline
256d0     01 26 06 F1 | 	add	local01, #1
256d4     01 00 00 FF 
256d8     58 26 16 F2 | 	cmp	local01, ##600 wc
256dc     D4 FF 9F CD |  if_b	jmp	#LR__2891
256e0                 | ' repeat i from 0 to 3
256e0     00 26 06 F6 | 	mov	local01, #0
256e4                 | LR__2892
256e4                 | '    fastline(0,1023,i,write_background)      
256e4     45 E4 05 F1 | 	add	objptr, #69
256e8     F2 18 02 FB | 	rdlong	arg04, objptr
256ec     45 E4 85 F1 | 	sub	objptr, #69
256f0     00 12 06 F6 | 	mov	arg01, #0
256f4     09 14 CE F9 | 	bmask	arg02, #9
256f8     13 17 02 F6 | 	mov	arg03, local01
256fc     60 EF BF FD | 	call	#_hg010b_spin2_fastline
25700     01 26 06 F1 | 	add	local01, #1
25704     04 26 56 F2 | 	cmps	local01, #4 wc
25708     D8 FF 9F CD |  if_b	jmp	#LR__2892
2570c                 | ' 
2570c                 | ' repeat i from 0 to 35
2570c     00 26 06 F6 | 	mov	local01, #0
25710                 | LR__2893
25710     13 1B 02 F6 | 	mov	arg05, local01
25714     01 1A 06 F1 | 	add	arg05, #1
25718     10 00 00 FF 
2571c     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
25720     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
25724     0B 1B 02 FD | 	qmul	arg05, arg03
25728                 | '   ram.read1($80000-4096-1024-s_debug, textbuf_ptr+(i+1)*timings[7], timings[7])
25728     F6 03 00 FF 
2572c     00 12 06 F6 | 	mov	arg01, ##519168
25730     F9 E4 05 F1 | 	add	objptr, #249
25734     F2 1A 02 FB | 	rdlong	arg05, objptr
25738     0D 13 82 F1 | 	sub	arg01, arg05
2573c     F5 E4 85 F1 | 	sub	objptr, #245
25740     F2 14 02 FB | 	rdlong	arg02, objptr
25744     10 00 00 FF 
25748     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
2574c     0B 00 00 FF 
25750     C8 E4 05 F1 | 	add	objptr, ##5832
25754     18 1A 62 FD | 	getqx	arg05
25758     0D 15 02 F1 | 	add	arg02, arg05
2575c     68 0A B0 FD | 	call	#_psram_spin2_read1
25760     10 00 00 FF 
25764     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
25768     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
2576c     0B 27 02 FD | 	qmul	local01, arg03
25770                 | '   ram.write($80000-4096-1024-s_debug, textbuf_ptr+i*timings[7], timings[7])
25770     F6 03 00 FF 
25774     00 12 06 F6 | 	mov	arg01, ##519168
25778     0A 00 00 FF 
2577c     D3 E5 85 F1 | 	sub	objptr, ##5587
25780     F2 1A 02 FB | 	rdlong	arg05, objptr
25784     0D 13 82 F1 | 	sub	arg01, arg05
25788     F5 E4 85 F1 | 	sub	objptr, #245
2578c     F2 14 02 FB | 	rdlong	arg02, objptr
25790     10 00 00 FF 
25794     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
25798     0B 00 00 FF 
2579c     C8 E4 05 F1 | 	add	objptr, ##5832
257a0     18 1A 62 FD | 	getqx	arg05
257a4     0D 15 02 F1 | 	add	arg02, arg05
257a8     B8 0A B0 FD | 	call	#_psram_spin2_write
257ac     0B 00 00 FF 
257b0     CC E4 85 F1 | 	sub	objptr, ##5836
257b4     01 26 06 F1 | 	add	local01, #1
257b8     24 26 56 F2 | 	cmps	local01, #36 wc
257bc     50 FF 9F CD |  if_b	jmp	#LR__2893
257c0                 | ' repeat i from 0 to timings[7]-1
257c0     00 26 06 F6 | 	mov	local01, #0
257c4     10 00 00 FF 
257c8     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
257cc     F7 28 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
257d0     10 00 00 FF 
257d4     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
257d8     01 28 86 F1 | 	sub	local02, #1
257dc     00 28 56 F2 | 	cmps	local02, #0 wc
257e0     01 2A 86 F6 | 	negc	local03, #1
257e4     15 29 02 F1 | 	add	local02, local03
257e8                 | LR__2894
257e8                 | '   ram.fill(textbuf_ptr+(36*timings[7]+i),32,1,0,1) 
257e8     04 E4 05 F1 | 	add	objptr, #4
257ec     F2 12 02 FB | 	rdlong	arg01, objptr
257f0     10 00 00 FF 
257f4     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
257f8     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
257fc     10 00 00 FF 
25800     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
25804     0D 19 02 F6 | 	mov	arg04, arg05
25808     03 18 66 F0 | 	shl	arg04, #3
2580c     0D 19 02 F1 | 	add	arg04, arg05
25810     02 18 66 F0 | 	shl	arg04, #2
25814     13 19 02 F1 | 	add	arg04, local01
25818     0C 13 02 F1 | 	add	arg01, arg04
2581c     20 14 06 F6 | 	mov	arg02, #32
25820     01 16 06 F6 | 	mov	arg03, #1
25824     00 18 06 F6 | 	mov	arg04, #0
25828     01 1A 06 F6 | 	mov	arg05, #1
2582c     0B 00 00 FF 
25830     C8 E4 05 F1 | 	add	objptr, ##5832
25834     C8 0A B0 FD | 	call	#_psram_spin2_fill
25838     0B 00 00 FF 
2583c     CC E4 85 F1 | 	sub	objptr, ##5836
25840     15 27 02 F1 | 	add	local01, local03
25844     14 27 0A F2 | 	cmp	local01, local02 wz
25848     9C FF 9F 5D |  if_ne	jmp	#LR__2894
2584c     A7 F0 03 F6 | 	mov	ptra, fp
25850     B2 00 A0 FD | 	call	#popregs_
25854                 | _hg010b_spin2_scrollup2_ret
25854     2D 00 64 FD | 	ret
25858                 | 
25858                 | '  
25858                 | ' ''----------- Scroll the screen one line down 
25858                 | ' 
25858                 | ' pub scrolldown(start=0) | i
25858                 | _hg010b_spin2_scrolldown
25858     05 4A 05 F6 | 	mov	COUNT_, #5
2585c     A8 00 A0 FD | 	call	#pushregs_
25860     09 27 02 F6 | 	mov	local01, arg01
25864                 | ' 
25864                 | ' repeat i from 579 to (start*16)+4
25864     01 00 00 FF 
25868     43 28 06 F6 | 	mov	local02, ##579
2586c     13 2B 02 F6 | 	mov	local03, local01
25870     04 2A 66 F0 | 	shl	local03, #4
25874     04 2A 06 F1 | 	add	local03, #4
25878     01 00 00 FF 
2587c     43 2A 56 F2 | 	cmps	local03, ##579 wc
25880     01 2C 86 F6 | 	negc	local04, #1
25884     16 2F 02 F6 | 	mov	local05, local04
25888     16 2B 02 F1 | 	add	local03, local04
2588c                 | LR__2900
2588c     F9 E4 05 F1 | 	add	objptr, #249
25890     F2 2C 02 FB | 	rdlong	local04, objptr
25894     1C E4 85 F1 | 	sub	objptr, #28
25898     F2 14 02 FB | 	rdlong	arg02, objptr
2589c     14 1B 02 F6 | 	mov	arg05, local02
258a0     02 1A 66 F0 | 	shl	arg05, #2
258a4     14 E4 05 F1 | 	add	objptr, #20
258a8     F2 16 02 FB | 	rdlong	arg03, objptr
258ac     0B 1B 02 FD | 	qmul	arg05, arg03
258b0                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
258b0     F6 03 00 FF 
258b4     00 12 06 F6 | 	mov	arg01, ##519168
258b8     16 13 82 F1 | 	sub	arg01, local04
258bc     02 16 66 F0 | 	shl	arg03, #2
258c0     0A 00 00 FF 
258c4     DB E5 05 F1 | 	add	objptr, ##5595
258c8     18 2C 62 FD | 	getqx	local04
258cc     16 15 02 F1 | 	add	arg02, local04
258d0     F4 08 B0 FD | 	call	#_psram_spin2_read1
258d4     0A 00 00 FF 
258d8     D3 E5 85 F1 | 	sub	objptr, ##5587
258dc     F2 2C 02 FB | 	rdlong	local04, objptr
258e0     1C E4 85 F1 | 	sub	objptr, #28
258e4     F2 14 02 FB | 	rdlong	arg02, objptr
258e8     14 1B 02 F6 | 	mov	arg05, local02
258ec     10 1A 06 F1 | 	add	arg05, #16
258f0     02 1A 66 F0 | 	shl	arg05, #2
258f4     14 E4 05 F1 | 	add	objptr, #20
258f8     F2 16 02 FB | 	rdlong	arg03, objptr
258fc     0B 1B 02 FD | 	qmul	arg05, arg03
25900                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
25900     F6 03 00 FF 
25904     00 12 06 F6 | 	mov	arg01, ##519168
25908     16 13 82 F1 | 	sub	arg01, local04
2590c     02 16 66 F0 | 	shl	arg03, #2
25910     0A 00 00 FF 
25914     DB E5 05 F1 | 	add	objptr, ##5595
25918     18 2C 62 FD | 	getqx	local04
2591c     16 15 02 F1 | 	add	arg02, local04
25920     40 09 B0 FD | 	call	#_psram_spin2_write
25924     0B 00 00 FF 
25928     CC E4 85 F1 | 	sub	objptr, ##5836
2592c     17 29 02 F1 | 	add	local02, local05
25930     15 29 0A F2 | 	cmp	local02, local03 wz
25934     54 FF 9F 5D |  if_ne	jmp	#LR__2900
25938                 | ' 
25938                 | ' repeat i from (start*16)+4 to (start*16)+19
25938     13 29 02 F6 | 	mov	local02, local01
2593c     04 28 66 F0 | 	shl	local02, #4
25940     04 28 06 F1 | 	add	local02, #4
25944     13 2F 02 F6 | 	mov	local05, local01
25948     04 2E 66 F0 | 	shl	local05, #4
2594c     13 2E 06 F1 | 	add	local05, #19
25950     13 2D 02 F6 | 	mov	local04, local01
25954     04 2C 66 F0 | 	shl	local04, #4
25958     04 2C 06 F1 | 	add	local04, #4
2595c     16 2F 52 F2 | 	cmps	local05, local04 wc
25960     01 2C 86 F6 | 	negc	local04, #1
25964     16 2B 02 F6 | 	mov	local03, local04
25968     16 2F 02 F1 | 	add	local05, local04
2596c                 | LR__2901
2596c                 | '    fastline(0,1023,i,write_background)    
2596c     45 E4 05 F1 | 	add	objptr, #69
25970     F2 18 02 FB | 	rdlong	arg04, objptr
25974     45 E4 85 F1 | 	sub	objptr, #69
25978     00 12 06 F6 | 	mov	arg01, #0
2597c     09 14 CE F9 | 	bmask	arg02, #9
25980     14 17 02 F6 | 	mov	arg03, local02
25984     D8 EC BF FD | 	call	#_hg010b_spin2_fastline
25988     15 29 02 F1 | 	add	local02, local03
2598c     17 29 0A F2 | 	cmp	local02, local05 wz
25990     D8 FF 9F 5D |  if_ne	jmp	#LR__2901
25994                 | '    
25994                 | ' repeat i from 35 to start
25994     23 28 06 F6 | 	mov	local02, #35
25998     23 26 56 F2 | 	cmps	local01, #35 wc
2599c     01 2C 86 F6 | 	negc	local04, #1
259a0     13 2F 02 F6 | 	mov	local05, local01
259a4     16 2F 02 F1 | 	add	local05, local04
259a8                 | LR__2902
259a8                 | '   ram.read1($80000-4096-1024-s_debug, textbuf_ptr+(i*128), 128)
259a8     F6 03 00 FF 
259ac     00 12 06 F6 | 	mov	arg01, ##519168
259b0     F9 E4 05 F1 | 	add	objptr, #249
259b4     F2 2A 02 FB | 	rdlong	local03, objptr
259b8     15 13 82 F1 | 	sub	arg01, local03
259bc     F5 E4 85 F1 | 	sub	objptr, #245
259c0     F2 14 02 FB | 	rdlong	arg02, objptr
259c4     14 2B 02 F6 | 	mov	local03, local02
259c8     07 2A 66 F0 | 	shl	local03, #7
259cc     15 15 02 F1 | 	add	arg02, local03
259d0     80 16 06 F6 | 	mov	arg03, #128
259d4     0B 00 00 FF 
259d8     C8 E4 05 F1 | 	add	objptr, ##5832
259dc     E8 07 B0 FD | 	call	#_psram_spin2_read1
259e0                 | '   ram.write($80000-4096-1024-s_debug, textbuf_ptr+(i+1)*128,128)
259e0     F6 03 00 FF 
259e4     00 12 06 F6 | 	mov	arg01, ##519168
259e8     0A 00 00 FF 
259ec     D3 E5 85 F1 | 	sub	objptr, ##5587
259f0     F2 2A 02 FB | 	rdlong	local03, objptr
259f4     15 13 82 F1 | 	sub	arg01, local03
259f8     F5 E4 85 F1 | 	sub	objptr, #245
259fc     F2 14 02 FB | 	rdlong	arg02, objptr
25a00     14 2B 02 F6 | 	mov	local03, local02
25a04     01 2A 06 F1 | 	add	local03, #1
25a08     07 2A 66 F0 | 	shl	local03, #7
25a0c     15 15 02 F1 | 	add	arg02, local03
25a10     80 16 06 F6 | 	mov	arg03, #128
25a14     0B 00 00 FF 
25a18     C8 E4 05 F1 | 	add	objptr, ##5832
25a1c     44 08 B0 FD | 	call	#_psram_spin2_write
25a20     0B 00 00 FF 
25a24     CC E4 85 F1 | 	sub	objptr, ##5836
25a28     16 29 02 F1 | 	add	local02, local04
25a2c     17 29 0A F2 | 	cmp	local02, local05 wz
25a30     74 FF 9F 5D |  if_ne	jmp	#LR__2902
25a34                 | ' repeat i from 0 to 127
25a34     00 28 06 F6 | 	mov	local02, #0
25a38                 | LR__2903
25a38                 | '   ram.fill((textbuf_ptr+start*128+i),32,1,0,1)      
25a38     04 E4 05 F1 | 	add	objptr, #4
25a3c     F2 12 02 FB | 	rdlong	arg01, objptr
25a40     13 2F 02 F6 | 	mov	local05, local01
25a44     07 2E 66 F0 | 	shl	local05, #7
25a48     17 13 02 F1 | 	add	arg01, local05
25a4c     14 13 02 F1 | 	add	arg01, local02
25a50     20 14 06 F6 | 	mov	arg02, #32
25a54     01 16 06 F6 | 	mov	arg03, #1
25a58     00 18 06 F6 | 	mov	arg04, #0
25a5c     01 1A 06 F6 | 	mov	arg05, #1
25a60     0B 00 00 FF 
25a64     C8 E4 05 F1 | 	add	objptr, ##5832
25a68     94 08 B0 FD | 	call	#_psram_spin2_fill
25a6c     0B 00 00 FF 
25a70     CC E4 85 F1 | 	sub	objptr, ##5836
25a74     01 28 06 F1 | 	add	local02, #1
25a78     80 28 56 F2 | 	cmps	local02, #128 wc
25a7c     B8 FF 9F CD |  if_b	jmp	#LR__2903
25a80     A7 F0 03 F6 | 	mov	ptra, fp
25a84     B2 00 A0 FD | 	call	#popregs_
25a88                 | _hg010b_spin2_scrolldown_ret
25a88     2D 00 64 FD | 	ret
25a8c                 | 
25a8c                 | ' 
25a8c                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
25a8c                 | ' 
25a8c                 | ' pub crlf()
25a8c                 | _hg010b_spin2_crlf
25a8c                 | ' 
25a8c                 | ' cursor_x:=leading_spaces*2
25a8c     01 00 00 FF 
25a90     B6 E4 05 F1 | 	add	objptr, ##694
25a94     F2 16 02 FB | 	rdlong	arg03, objptr
25a98     01 16 66 F0 | 	shl	arg03, #1
25a9c     01 00 00 FF 
25aa0     7A E4 85 F1 | 	sub	objptr, ##634
25aa4     F2 16 52 FC | 	wrword	arg03, objptr
25aa8                 | ' cursor_y+=1
25aa8     02 E4 05 F1 | 	add	objptr, #2
25aac     F2 16 C2 FA | 	rdbyte	arg03, objptr
25ab0     01 16 06 F1 | 	add	arg03, #1
25ab4     F2 16 42 FC | 	wrbyte	arg03, objptr
25ab8                 | ' if cursor_y>st_lines-1
25ab8     C3 E4 05 F1 | 	add	objptr, #195
25abc     F2 16 02 FB | 	rdlong	arg03, objptr
25ac0     01 16 86 F1 | 	sub	arg03, #1
25ac4     C3 E4 85 F1 | 	sub	objptr, #195
25ac8     F2 14 C2 FA | 	rdbyte	arg02, objptr
25acc     3E E4 85 F1 | 	sub	objptr, #62
25ad0     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
25ad4     2C 00 90 ED |  if_be	jmp	#LR__2910
25ad8                 | '   scrollup2()
25ad8     00 12 06 F6 | 	mov	arg01, #0
25adc     01 00 00 FF 
25ae0     58 14 06 F6 | 	mov	arg02, ##600
25ae4     10 16 06 F6 | 	mov	arg03, #16
25ae8     04 FB BF FD | 	call	#_hg010b_spin2_scrollup2
25aec                 | '   cursor_y:=st_lines-1
25aec     01 E5 05 F1 | 	add	objptr, #257
25af0     F2 16 02 FB | 	rdlong	arg03, objptr
25af4     01 16 86 F1 | 	sub	arg03, #1
25af8     C3 E4 85 F1 | 	sub	objptr, #195
25afc     F2 16 42 FC | 	wrbyte	arg03, objptr
25b00     3E E4 85 F1 | 	sub	objptr, #62
25b04                 | LR__2910
25b04                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )  
25b04     3C E4 05 F1 | 	add	objptr, #60
25b08     F2 14 E2 FA | 	rdword	arg02, objptr
25b0c     02 14 66 F0 | 	shl	arg02, #2
25b10     02 E4 05 F1 | 	add	objptr, #2
25b14     F2 16 C2 FA | 	rdbyte	arg03, objptr
25b18     3E E4 85 F1 | 	sub	objptr, #62
25b1c     04 16 66 F0 | 	shl	arg03, #4
25b20     04 16 06 F1 | 	add	arg03, #4
25b24     11 12 06 F6 | 	mov	arg01, #17
25b28     E8 E8 BF FD | 	call	#_hg010b_spin2_setspritepos
25b2c                 | _hg010b_spin2_crlf_ret
25b2c     2D 00 64 FD | 	ret
25b30                 | 
25b30                 | ' 
25b30                 | ' 
25b30                 | ' '*************************************************************************
25b30                 | ' '                                                                        *
25b30                 | ' '  Conversions                                                           *
25b30                 | ' '                                                                        *
25b30                 | ' '*************************************************************************
25b30                 | ' 
25b30                 | ' ''---------- Convert a integer to dec string, return a pointer
25b30                 | ' 
25b30                 | ' pub inttostr(i):result |q,pos,k,j
25b30                 | _hg010b_spin2_inttostr
25b30     03 4A 05 F6 | 	mov	COUNT_, #3
25b34     A8 00 A0 FD | 	call	#pushregs_
25b38     09 27 0A F6 | 	mov	local01, arg01 wz
25b3c                 | ' 
25b3c                 | ' j:=i
25b3c                 | ' pos:=10
25b3c     0A 28 06 F6 | 	mov	local02, #10
25b40                 | ' k:=0
25b40     00 2A 06 F6 | 	mov	local03, #0
25b44                 | ' 
25b44                 | ' if (j==0)
25b44     18 00 90 5D |  if_ne	jmp	#LR__2920
25b48                 | '   n_string[0]:=48
25b48     4D E4 05 F1 | 	add	objptr, #77
25b4c     F2 60 48 FC | 	wrbyte	#48, objptr
25b50                 | '   n_string[1]:=0
25b50     01 E4 05 F1 | 	add	objptr, #1
25b54     F2 00 48 FC | 	wrbyte	#0, objptr
25b58     4E E4 85 F1 | 	sub	objptr, #78
25b5c     C4 00 90 FD | 	jmp	#LR__2927
25b60                 | LR__2920
25b60                 | ' 
25b60                 | ' else
25b60                 | '   if (j<0)
25b60     13 27 52 F6 | 	abs	local01, local01 wc
25b64                 | '     j:=0-j
25b64                 | '     k:=45
25b64     2D 2A 06 C6 |  if_b	mov	local03, #45
25b68                 | ' 
25b68                 | '   n_string[11]:=0
25b68     58 E4 05 F1 | 	add	objptr, #88
25b6c     F2 00 48 FC | 	wrbyte	#0, objptr
25b70     58 E4 85 F1 | 	sub	objptr, #88
25b74     97 24 48 FB | 	callpa	#(@LR__2922-@LR__2921)>>2,fcache_load_ptr_
25b78                 | '   repeat while (pos>-1)
25b78                 | LR__2921
25b78     00 28 56 F2 | 	cmps	local02, #0 wc
25b7c     40 00 90 CD |  if_b	jmp	#LR__2923
25b80     13 FB 51 F6 | 	abs	result1, local01 wc
25b84     0A FA 15 FD | 	qdiv	result1, #10
25b88                 | '     q:=j//10
25b88     19 FA 61 FD | 	getqy	result1
25b8c     FD FA 81 F6 | 	negc	result1, result1
25b90     13 27 52 F6 | 	abs	local01, local01 wc
25b94     0A 26 16 FD | 	qdiv	local01, #10
25b98                 | '     q:=48+q
25b98     30 FA 05 F1 | 	add	result1, #48
25b9c                 | '     n_string[pos]:=q
25b9c     14 27 02 F6 | 	mov	local01, local02
25ba0     4D E4 05 F1 | 	add	objptr, #77
25ba4     F2 26 02 F1 | 	add	local01, objptr
25ba8     13 FB 41 FC | 	wrbyte	result1, local01
25bac                 | '     j:=j/10
25bac     4D E4 85 F1 | 	sub	objptr, #77
25bb0                 | '     pos-=1
25bb0     01 28 86 F1 | 	sub	local02, #1
25bb4     18 26 62 FD | 	getqx	local01
25bb8     13 27 82 F6 | 	negc	local01, local01
25bbc     B8 FF 9F FD | 	jmp	#LR__2921
25bc0                 | LR__2922
25bc0                 | LR__2923
25bc0                 | '   repeat while n_string[0]==48
25bc0                 | LR__2924
25bc0     4D E4 05 F1 | 	add	objptr, #77
25bc4     F2 16 C2 FA | 	rdbyte	arg03, objptr
25bc8     4D E4 85 F1 | 	sub	objptr, #77
25bcc     30 16 0E F2 | 	cmp	arg03, #48 wz
25bd0     20 00 90 5D |  if_ne	jmp	#LR__2925
25bd4                 | '     bytemove(@n_string,@n_string+1,12)
25bd4     4D E4 05 F1 | 	add	objptr, #77
25bd8     F2 12 02 F6 | 	mov	arg01, objptr
25bdc     F2 14 02 F6 | 	mov	arg02, objptr
25be0     4D E4 85 F1 | 	sub	objptr, #77
25be4     01 14 06 F1 | 	add	arg02, #1
25be8     0C 16 06 F6 | 	mov	arg03, #12
25bec     80 11 B0 FD | 	call	#__system____builtin_memmove
25bf0     CC FF 9F FD | 	jmp	#LR__2924
25bf4                 | LR__2925
25bf4                 | ' 
25bf4                 | '   if k==45
25bf4     2D 2A 0E F2 | 	cmp	local03, #45 wz
25bf8     28 00 90 5D |  if_ne	jmp	#LR__2926
25bfc                 | '      bytemove(@n_string+1,@n_string,12)
25bfc     4D E4 05 F1 | 	add	objptr, #77
25c00     F2 12 02 F6 | 	mov	arg01, objptr
25c04     01 12 06 F1 | 	add	arg01, #1
25c08     F2 14 02 F6 | 	mov	arg02, objptr
25c0c     4D E4 85 F1 | 	sub	objptr, #77
25c10     0C 16 06 F6 | 	mov	arg03, #12
25c14     58 11 B0 FD | 	call	#__system____builtin_memmove
25c18                 | '      n_string[0]:=k
25c18     4D E4 05 F1 | 	add	objptr, #77
25c1c     F2 2A 42 FC | 	wrbyte	local03, objptr
25c20     4D E4 85 F1 | 	sub	objptr, #77
25c24                 | LR__2926
25c24                 | LR__2927
25c24                 | ' 
25c24                 | ' q:=@n_string
25c24     4D E4 05 F1 | 	add	objptr, #77
25c28     F2 FA 01 F6 | 	mov	result1, objptr
25c2c     4D E4 85 F1 | 	sub	objptr, #77
25c30                 | ' return q
25c30     A7 F0 03 F6 | 	mov	ptra, fp
25c34     B2 00 A0 FD | 	call	#popregs_
25c38                 | _hg010b_spin2_inttostr_ret
25c38     2D 00 64 FD | 	ret
25c3c                 | 
25c3c                 | ' 
25c3c                 | ' '**********************************************************************************
25c3c                 | ' '
25c3c                 | ' '        Blitting
25c3c                 | ' '
25c3c                 | ' '**********************************************************************************
25c3c                 | ' 
25c3c                 | ' pub blit(f,x1a,y1a,x2a,y2a,s1,t,x1b,y1b,s2) | y
25c3c                 | _hg010b_spin2_blit
25c3c     18 4A 05 F6 | 	mov	COUNT_, #24
25c40     A8 00 A0 FD | 	call	#pushregs_
25c44     09 27 02 F6 | 	mov	local01, arg01
25c48     0A 29 02 F6 | 	mov	local02, arg02
25c4c     0B 2B 02 F6 | 	mov	local03, arg03
25c50     0C 2D 02 F6 | 	mov	local04, arg04
25c54     0D 2F 02 F6 | 	mov	local05, arg05
25c58     0E 31 02 F6 | 	mov	local06, arg06
25c5c     0F 33 02 F6 | 	mov	local07, arg07
25c60     10 35 02 F6 | 	mov	local08, arg08
25c64     11 37 02 F6 | 	mov	local09, arg09
25c68     12 39 02 F6 | 	mov	local10, arg10
25c6c                 | ' 
25c6c                 | ' if ((f>=$80000) && (t>=$80000)) ' todo: check if the fields overlap and reorder the move
25c6c     00 04 00 FF 
25c70     00 26 56 F2 | 	cmps	local01, ##524288 wc
25c74     00 04 00 3F 
25c78     00 32 56 32 |  if_ae	cmps	local07, ##524288 wc
25c7c     7C 01 90 CD |  if_b	jmp	#LR__2934
25c80     16 29 5A F2 | 	cmps	local02, local04 wcz
25c84     14 3B 02 16 |  if_a	mov	local11, local02
25c88     16 29 02 16 |  if_a	mov	local02, local04
25c8c     1D 2D 02 16 |  if_a	mov	local04, local11
25c90     17 2B 5A F2 | 	cmps	local03, local05 wcz
25c94     15 3B 02 16 |  if_a	mov	local11, local03
25c98     17 2B 02 16 |  if_a	mov	local03, local05
25c9c     18 2B 02 FD | 	qmul	local03, local06
25ca0                 | '   if x1a>x2a
25ca0                 | '     x1a,x2a:=x2a,x1a
25ca0                 | '   if y1a>y2a
25ca0                 | '     y1a,y2a:=y2a,y1a  
25ca0     1D 2F 02 16 |  if_a	mov	local05, local11
25ca4                 | ' 
25ca4                 | '   if t+x1a+y1a*s1>f+x1b+y1b*s2
25ca4     19 3D 02 F6 | 	mov	local12, local07
25ca8     14 3D 02 F1 | 	add	local12, local02
25cac     18 3A 62 FD | 	getqx	local11
25cb0     1C 37 02 FD | 	qmul	local09, local10
25cb4     1D 3D 02 F1 | 	add	local12, local11
25cb8     13 3F 02 F6 | 	mov	local13, local01
25cbc     1A 3F 02 F1 | 	add	local13, local08
25cc0     18 3A 62 FD | 	getqx	local11
25cc4     1D 3F 02 F1 | 	add	local13, local11
25cc8     1F 3D 5A F2 | 	cmps	local12, local13 wcz
25ccc     98 00 90 ED |  if_be	jmp	#LR__2931
25cd0                 | '     repeat y from y1a to y2a
25cd0     15 41 02 F6 | 	mov	local14, local03
25cd4     15 2F 52 F2 | 	cmps	local05, local03 wc
25cd8     01 42 86 F6 | 	negc	local15, #1
25cdc     17 45 02 F6 | 	mov	local16, local05
25ce0     21 45 02 F1 | 	add	local16, local15
25ce4     0B 00 00 FF 
25ce8     CC E4 05 F1 | 	add	objptr, ##5836
25cec                 | LR__2930
25cec     18 41 02 FD | 	qmul	local14, local06
25cf0                 | '   '    writeln(string("I am here"))
25cf0                 | '       ram.read1($80000-4096-1024, f+(y)*s1+x1a, x2a-x1a+1)
25cf0     13 15 02 F6 | 	mov	arg02, local01
25cf4     16 17 02 F6 | 	mov	arg03, local04
25cf8     14 17 82 F1 | 	sub	arg03, local02
25cfc     01 16 06 F1 | 	add	arg03, #1
25d00     F6 03 00 FF 
25d04     00 12 06 F6 | 	mov	arg01, ##519168
25d08     18 3E 62 FD | 	getqx	local13
25d0c     1F 15 02 F1 | 	add	arg02, local13
25d10     14 15 02 F1 | 	add	arg02, local02
25d14     B0 04 B0 FD | 	call	#_psram_spin2_read1
25d18     1B 3F 02 F6 | 	mov	local13, local09
25d1c     15 3F 82 F1 | 	sub	local13, local03
25d20     20 3F 02 F1 | 	add	local13, local14
25d24     1C 3F 02 FD | 	qmul	local13, local10
25d28                 | '       ram.write($80000-4096-1024, t+(y1b-y1a+y)*s2+x1b, x2a-x1a+1)
25d28     19 15 02 F6 | 	mov	arg02, local07
25d2c     16 17 02 F6 | 	mov	arg03, local04
25d30     14 17 82 F1 | 	sub	arg03, local02
25d34     01 16 06 F1 | 	add	arg03, #1
25d38     F6 03 00 FF 
25d3c     00 12 06 F6 | 	mov	arg01, ##519168
25d40     18 3E 62 FD | 	getqx	local13
25d44     1F 15 02 F1 | 	add	arg02, local13
25d48     1A 15 02 F1 | 	add	arg02, local08
25d4c     14 05 B0 FD | 	call	#_psram_spin2_write
25d50     21 41 02 F1 | 	add	local14, local15
25d54     22 41 0A F2 | 	cmp	local14, local16 wz
25d58     90 FF 9F 5D |  if_ne	jmp	#LR__2930
25d5c     0B 00 00 FF 
25d60     CC E4 85 F1 | 	sub	objptr, ##5836
25d64     94 00 90 FD | 	jmp	#LR__2933
25d68                 | LR__2931
25d68                 | '   else
25d68                 | '     repeat y from y2a to y1a
25d68     17 41 02 F6 | 	mov	local14, local05
25d6c     17 2B 52 F2 | 	cmps	local03, local05 wc
25d70     01 46 86 F6 | 	negc	local17, #1
25d74     15 49 02 F6 | 	mov	local18, local03
25d78     23 49 02 F1 | 	add	local18, local17
25d7c     0B 00 00 FF 
25d80     CC E4 05 F1 | 	add	objptr, ##5836
25d84                 | LR__2932
25d84     18 41 02 FD | 	qmul	local14, local06
25d88                 | '  '     writeln(string("I am there"))
25d88                 | '       ram.read1($80000-4096-1024, f+(y)*s1+x1a, x2a-x1a+1)
25d88     13 15 02 F6 | 	mov	arg02, local01
25d8c     16 17 02 F6 | 	mov	arg03, local04
25d90     14 17 82 F1 | 	sub	arg03, local02
25d94     01 16 06 F1 | 	add	arg03, #1
25d98     F6 03 00 FF 
25d9c     00 12 06 F6 | 	mov	arg01, ##519168
25da0     18 44 62 FD | 	getqx	local16
25da4     22 15 02 F1 | 	add	arg02, local16
25da8     14 15 02 F1 | 	add	arg02, local02
25dac     18 04 B0 FD | 	call	#_psram_spin2_read1
25db0     1B 45 02 F6 | 	mov	local16, local09
25db4     15 45 82 F1 | 	sub	local16, local03
25db8     20 45 02 F1 | 	add	local16, local14
25dbc     1C 45 02 FD | 	qmul	local16, local10
25dc0                 | '       ram.write($80000-4096-1024, t+(y1b-y1a+y)*s2+x1b, x2a-x1a+1)     
25dc0     19 15 02 F6 | 	mov	arg02, local07
25dc4     16 17 02 F6 | 	mov	arg03, local04
25dc8     14 17 82 F1 | 	sub	arg03, local02
25dcc     01 16 06 F1 | 	add	arg03, #1
25dd0     F6 03 00 FF 
25dd4     00 12 06 F6 | 	mov	arg01, ##519168
25dd8     18 44 62 FD | 	getqx	local16
25ddc     22 15 02 F1 | 	add	arg02, local16
25de0     1A 15 02 F1 | 	add	arg02, local08
25de4     7C 04 B0 FD | 	call	#_psram_spin2_write
25de8     23 41 02 F1 | 	add	local14, local17
25dec     24 41 0A F2 | 	cmp	local14, local18 wz
25df0     90 FF 9F 5D |  if_ne	jmp	#LR__2932
25df4     0B 00 00 FF 
25df8     CC E4 85 F1 | 	sub	objptr, ##5836
25dfc                 | LR__2933
25dfc                 | LR__2934
25dfc                 | '     
25dfc                 | ' if ((f>=$80000) && (t<$80000)) 
25dfc     00 04 00 FF 
25e00     00 26 56 F2 | 	cmps	local01, ##524288 wc
25e04     80 00 90 CD |  if_b	jmp	#LR__2936
25e08     00 04 00 FF 
25e0c     00 32 56 F2 | 	cmps	local07, ##524288 wc
25e10     74 00 90 3D |  if_ae	jmp	#LR__2936
25e14                 | '   repeat y from y1a to y2a
25e14     15 41 02 F6 | 	mov	local14, local03
25e18     15 2F 52 F2 | 	cmps	local05, local03 wc
25e1c     01 4A 86 F6 | 	negc	local19, #1
25e20     17 4D 02 F6 | 	mov	local20, local05
25e24     25 4D 02 F1 | 	add	local20, local19
25e28     0B 00 00 FF 
25e2c     CC E4 05 F1 | 	add	objptr, ##5836
25e30                 | LR__2935
25e30     1B 49 02 F6 | 	mov	local18, local09
25e34     15 49 82 F1 | 	sub	local18, local03
25e38     20 49 02 F1 | 	add	local18, local14
25e3c     1C 49 02 FD | 	qmul	local18, local10
25e40                 | '     ram.read1(t+(y1b-y1a+y)*s2+x1b,f+(y)*s1+x1a,x2a-x1a+1)
25e40     19 13 02 F6 | 	mov	arg01, local07
25e44     18 48 62 FD | 	getqx	local18
25e48     18 41 02 FD | 	qmul	local14, local06
25e4c     24 13 02 F1 | 	add	arg01, local18
25e50     1A 13 02 F1 | 	add	arg01, local08
25e54     13 15 02 F6 | 	mov	arg02, local01
25e58     16 17 02 F6 | 	mov	arg03, local04
25e5c     14 17 82 F1 | 	sub	arg03, local02
25e60     01 16 06 F1 | 	add	arg03, #1
25e64     18 48 62 FD | 	getqx	local18
25e68     24 15 02 F1 | 	add	arg02, local18
25e6c     14 15 02 F1 | 	add	arg02, local02
25e70     54 03 B0 FD | 	call	#_psram_spin2_read1
25e74     25 41 02 F1 | 	add	local14, local19
25e78     26 41 0A F2 | 	cmp	local14, local20 wz
25e7c     B0 FF 9F 5D |  if_ne	jmp	#LR__2935
25e80     0B 00 00 FF 
25e84     CC E4 85 F1 | 	sub	objptr, ##5836
25e88                 | LR__2936
25e88                 | '     
25e88                 | ' if ((f<$80000) && (t>=$80000)) 
25e88     00 04 00 FF 
25e8c     00 26 56 F2 | 	cmps	local01, ##524288 wc
25e90     84 00 90 3D |  if_ae	jmp	#LR__2938
25e94     00 04 00 FF 
25e98     00 32 56 F2 | 	cmps	local07, ##524288 wc
25e9c     78 00 90 CD |  if_b	jmp	#LR__2938
25ea0                 | '   t:=t & $FFFFFFF
25ea0     7C 32 06 F4 | 	bitl	local07, #124
25ea4                 | '   repeat y from y1a to y2a
25ea4     15 41 02 F6 | 	mov	local14, local03
25ea8     15 2F 52 F2 | 	cmps	local05, local03 wc
25eac     01 4E 86 F6 | 	negc	local21, #1
25eb0     17 51 02 F6 | 	mov	local22, local05
25eb4     27 51 02 F1 | 	add	local22, local21
25eb8     0B 00 00 FF 
25ebc     CC E4 05 F1 | 	add	objptr, ##5836
25ec0                 | LR__2937
25ec0     18 41 02 FD | 	qmul	local14, local06
25ec4                 | '     ram.write(f+(y)*s1+x1a,t+(y1b-y1a+y)*s2+x1b,x2a-x1a+1)
25ec4     13 13 02 F6 | 	mov	arg01, local01
25ec8     1B 4D 02 F6 | 	mov	local20, local09
25ecc     15 4D 82 F1 | 	sub	local20, local03
25ed0     20 4D 02 F1 | 	add	local20, local14
25ed4     18 4A 62 FD | 	getqx	local19
25ed8     1C 4D 02 FD | 	qmul	local20, local10
25edc     25 13 02 F1 | 	add	arg01, local19
25ee0     14 13 02 F1 | 	add	arg01, local02
25ee4     19 15 02 F6 | 	mov	arg02, local07
25ee8     16 17 02 F6 | 	mov	arg03, local04
25eec     14 17 82 F1 | 	sub	arg03, local02
25ef0     01 16 06 F1 | 	add	arg03, #1
25ef4     18 4C 62 FD | 	getqx	local20
25ef8     26 15 02 F1 | 	add	arg02, local20
25efc     1A 15 02 F1 | 	add	arg02, local08
25f00     60 03 B0 FD | 	call	#_psram_spin2_write
25f04     27 41 02 F1 | 	add	local14, local21
25f08     28 41 0A F2 | 	cmp	local14, local22 wz
25f0c     B0 FF 9F 5D |  if_ne	jmp	#LR__2937
25f10     0B 00 00 FF 
25f14     CC E4 85 F1 | 	sub	objptr, ##5836
25f18                 | LR__2938
25f18                 | '     
25f18                 | ' if ((f<$80000) && (t<$80000)) 
25f18     00 04 00 FF 
25f1c     00 26 56 F2 | 	cmps	local01, ##524288 wc
25f20     00 04 00 CF 
25f24     00 32 56 C2 |  if_b	cmps	local07, ##524288 wc
25f28     64 00 90 3D |  if_ae	jmp	#LR__2940
25f2c                 | '   repeat y from y1a to y2a
25f2c     15 41 02 F6 | 	mov	local14, local03
25f30     15 2F 52 F2 | 	cmps	local05, local03 wc
25f34     01 52 86 F6 | 	negc	local23, #1
25f38     17 55 02 F6 | 	mov	local24, local05
25f3c     29 55 02 F1 | 	add	local24, local23
25f40                 | LR__2939
25f40     18 41 02 FD | 	qmul	local14, local06
25f44                 | '     bytemove (f+(y)*s1+x1a,t+(y1b-y1a+y)*s2+x1b,x2a-x1a+1)
25f44     13 13 02 F6 | 	mov	arg01, local01
25f48     1B 51 02 F6 | 	mov	local22, local09
25f4c     15 51 82 F1 | 	sub	local22, local03
25f50     20 51 02 F1 | 	add	local22, local14
25f54     18 4E 62 FD | 	getqx	local21
25f58     1C 51 02 FD | 	qmul	local22, local10
25f5c     27 13 02 F1 | 	add	arg01, local21
25f60     14 13 02 F1 | 	add	arg01, local02
25f64     19 15 02 F6 | 	mov	arg02, local07
25f68     16 17 02 F6 | 	mov	arg03, local04
25f6c     14 17 82 F1 | 	sub	arg03, local02
25f70     01 16 06 F1 | 	add	arg03, #1
25f74     18 50 62 FD | 	getqx	local22
25f78     28 15 02 F1 | 	add	arg02, local22
25f7c     1A 15 02 F1 | 	add	arg02, local08
25f80     EC 0D B0 FD | 	call	#__system____builtin_memmove
25f84     29 41 02 F1 | 	add	local14, local23
25f88     2A 41 0A F2 | 	cmp	local14, local24 wz
25f8c     B0 FF 9F 5D |  if_ne	jmp	#LR__2939
25f90                 | LR__2940
25f90     A7 F0 03 F6 | 	mov	ptra, fp
25f94     B2 00 A0 FD | 	call	#popregs_
25f98                 | _hg010b_spin2_blit_ret
25f98     2D 00 64 FD | 	ret
25f9c                 | 
25f9c                 | ' 
25f9c                 | ' '..............................................................................
25f9c                 | ' 
25f9c                 | ' {{
25f9c                 | ' }}
25f9c                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
25f9c                 | _psram_spin2_startx
25f9c     04 4A 05 F6 | 	mov	COUNT_, #4
25fa0     A8 00 A0 FD | 	call	#pushregs_
25fa4     09 27 02 F6 | 	mov	local01, arg01
25fa8     0B 29 02 F6 | 	mov	local02, arg03
25fac     0C 2B 02 F6 | 	mov	local03, arg04
25fb0                 | '     stop() ' restart driver if required
25fb0     54 01 B0 FD | 	call	#_psram_spin2_stop
25fb4     00 26 0E F2 | 	cmp	local01, #0 wz
25fb8     14 26 06 AB |  if_e	rdlong	local01, #20
25fbc     13 15 52 F6 | 	abs	arg02, local01 wc
25fc0     A1 07 00 FF 
25fc4     40 14 16 FD | 	qdiv	arg02, ##1000000
25fc8                 | ' 
25fc8                 | '     ' use current frequency if none specified
25fc8                 | ' 
25fc8                 | '     if freq == 0 
25fc8                 | '         freq := clkfreq 
25fc8                 | ' 
25fc8                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
25fc8                 | ' 
25fc8                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
25fc8                 | '     if burst < 0
25fc8                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
25fc8     18 14 62 FD | 	getqx	arg02
25fcc     0A 19 82 F6 | 	negc	arg04, arg02
25fd0     03 18 66 F0 | 	shl	arg04, #3
25fd4     84 18 86 F1 | 	sub	arg04, #132
25fd8     04 18 46 F0 | 	shr	arg04, #4
25fdc     04 18 66 F0 | 	shl	arg04, #4
25fe0     00 18 56 F2 | 	cmps	arg04, #0 wc
25fe4     0E FA 65 C6 |  if_b	neg	result1, #14
25fe8     10 01 90 CD |  if_b	jmp	#LR__2953
25fec                 | ' 
25fec                 | '     ' compute the input delay
25fec                 | ' 
25fec                 | '     if delay <= 0
25fec     01 28 56 F2 | 	cmps	local02, #1 wc
25ff0     10 00 90 3D |  if_ae	jmp	#LR__2950
25ff4                 | '         delay := lookupDelay(freq)
25ff4     13 13 02 F6 | 	mov	arg01, local01
25ff8     B8 04 B0 FD | 	call	#_psram_spin2_lookupDelay
25ffc     FD 28 02 F6 | 	mov	local02, result1
26000     04 00 90 FD | 	jmp	#LR__2951
26004                 | LR__2950
26004                 | '     else
26004                 | '         delay <#= $f ' limit to 15
26004     0F 28 66 F3 | 	fles	local02, #15
26008                 | LR__2951
26008                 | ' 
26008                 | '     ' create our lock
26008                 | ' 
26008                 | '     driverlock := LOCKNEW()  
26008     00 FA 05 F6 | 	mov	result1, #0
2600c     04 FA 61 FD | 	locknew	result1
26010     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
26014     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
26018                 | '     if driverlock == -1
26018     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
2601c     FF FF 7F FF 
26020     FF FB 0D F2 | 	cmp	result1, ##-1 wz
26024                 | '         return ERR_NO_LOCK
26024     1A FA 65 A6 |  if_e	neg	result1, #26
26028     D0 00 90 AD |  if_e	jmp	#LR__2953
2602c                 | ' 
2602c                 | '     ' patch in the proper data and HUB addresses to the startup structure
2602c                 | ' 
2602c                 | '     long[@startupData][0]:=clkfreq
2602c     14 26 06 FB | 	rdlong	local01, #20
26030     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
26034     FA 26 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
26038                 | ' '    long[@startupData][1]:=$1000_0000
26038                 | '     long[@startupData][5]:=@deviceData
26038     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
2603c     FA 26 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
26040     20 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #32
26044     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
26048     14 14 06 F1 | 	add	arg02, #20
2604c     0A 27 62 FC | 	wrlong	local01, arg02
26050                 | '     long[@startupData][6]:=@qosData
26050     A0 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #160
26054     FA 26 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
26058     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
2605c     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
26060     18 14 06 F1 | 	add	arg02, #24
26064     0A 27 62 FC | 	wrlong	local01, arg02
26068                 | '     long[@startupData][7]:=$7FF00
26068     FA 26 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
2606c     1C 26 06 F1 | 	add	local01, #28
26070     FF 03 80 FF 
26074     13 01 6A FC | 	wrlong	##524032, local01
26078                 | ' 
26078                 | '     ' setup some default bank and QoS parameter values
26078                 | ' 
26078                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
26078     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
2607c     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
26080     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
26084     10 18 66 F0 | 	shl	arg04, #16
26088     0C 28 66 F0 | 	shl	local02, #12
2608c     14 19 42 F5 | 	or	arg04, local02
26090     18 18 46 F5 | 	or	arg04, #24
26094     0C 15 02 F6 | 	mov	arg02, arg04
26098     02 16 06 F6 | 	mov	arg03, #2
2609c     A0 00 A0 FD | 	call	#\builtin_longfill_
260a0                 | '     longfill(@qosData, $FFFF0000, 8)
260a0     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
260a4     07 16 06 F6 | 	mov	arg03, #7
260a8     28 16 62 FD | 	setq	arg03
260ac     80 FF FF FF 
260b0     FA 00 68 FC | 	wrlong	##-65536, ptr__psram_spin2_dat__
260b4                 | ' 
260b4                 | '     ' get the address of the PSRAM memory driver so we can start it
260b4                 | ' 
260b4                 | '     driverAddr:= driver.getDriverAddr()
260b4                 | '     return @driver_start
260b4     20 F2 05 F1 | 	add	ptr__psram16drv_spin2_dat__, #32
260b8     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
260bc     20 F2 85 F1 | 	sub	ptr__psram16drv_spin2_dat__, #32
260c0                 | ' 
260c0                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
260c0                 | ' 
260c0                 | '     if desiredcog < 0
260c0     00 2A 56 F2 | 	cmps	local03, #0 wc
260c4                 | '         desiredcog := NEWCOG
260c4     10 2A 06 C6 |  if_b	mov	local03, #16
260c8                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
260c8     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
260cc     15 2D 02 F6 | 	mov	local04, local03
260d0     28 F4 61 FD | 	setq	ptr__psram_spin2_dat__
260d4     0A 2D F2 FC | 	coginit	local04, arg02 wc
260d8     01 2C 66 C6 |  if_b	neg	local04, #1
260dc     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
260e0     FA 2C 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
260e4                 | '     repeat until long[@startupData] == 0 
260e4     28 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #40
260e8                 | LR__2952
260e8     FA 2C 0A FB | 	rdlong	local04, ptr__psram_spin2_dat__ wz
260ec     F8 FF 9F 5D |  if_ne	jmp	#LR__2952
260f0                 | ' 
260f0                 | '     return drivercog
260f0     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
260f4     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
260f8     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
260fc                 | LR__2953
260fc     A7 F0 03 F6 | 	mov	ptra, fp
26100     B2 00 A0 FD | 	call	#popregs_
26104                 | _psram_spin2_startx_ret
26104     2D 00 64 FD | 	ret
26108                 | 
26108                 | ' 
26108                 | ' '..............................................................................
26108                 | ' 
26108                 | ' {{
26108                 | ' }}
26108                 | ' PUB stop() : i
26108                 | _psram_spin2_stop
26108     00 00 06 F6 | 	mov	_var01, #0
2610c                 | '     if drivercog <> -1
2610c     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
26110     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
26114     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
26118     FF FF 7F FF 
2611c     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
26120     70 00 90 AD |  if_e	jmp	#LR__2963
26124                 | '         cogstop(drivercog) ' a rather brutal stop
26124     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
26128     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
2612c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
26130     03 12 62 FD | 	cogstop	arg01
26134     97 26 48 FB | 	callpa	#(@LR__2962-@LR__2960)>>2,fcache_load_ptr_
26138                 | '         repeat i from 0 to 7
26138                 | LR__2960
26138                 | '             if long[$7FF00][i*3] < 0
26138     00 FB 01 F6 | 	mov	result1, _var01
2613c     01 FA 65 F0 | 	shl	result1, #1
26140     00 FB 01 F1 | 	add	result1, _var01
26144     02 FA 65 F0 | 	shl	result1, #2
26148     FF 03 00 FF 
2614c     00 FB 05 F1 | 	add	result1, ##524032
26150     FD FA 01 FB | 	rdlong	result1, result1
26154     00 FA 55 F2 | 	cmps	result1, #0 wc
26158     1C 00 90 3D |  if_ae	jmp	#LR__2961
2615c                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
2615c     00 FB 01 F6 | 	mov	result1, _var01
26160     01 FA 65 F0 | 	shl	result1, #1
26164     00 FB 01 F1 | 	add	result1, _var01
26168     02 FA 65 F0 | 	shl	result1, #2
2616c     FF 03 00 FF 
26170     00 FB 05 F1 | 	add	result1, ##524032
26174     FD 20 68 FC | 	wrlong	#16, result1
26178                 | LR__2961
26178     01 00 06 F1 | 	add	_var01, #1
2617c     08 00 56 F2 | 	cmps	_var01, #8 wc
26180     B4 FF 9F CD |  if_b	jmp	#LR__2960
26184                 | LR__2962
26184                 | '         drivercog := -1
26184     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
26188     FF FF FF FF 
2618c     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
26190     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
26194                 | LR__2963
26194                 | '     if driverlock <> -1
26194     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
26198     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
2619c     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
261a0     FF FF 7F FF 
261a4     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
261a8                 | '         LOCKRET(driverlock)
261a8     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
261ac     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
261b0     05 12 62 5D |  if_ne	lockret	arg01
261b4                 | '         driverlock := -1
261b4     FF FF FF 5F 
261b8     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
261bc     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
261c0     00 FB 01 F6 | 	mov	result1, _var01
261c4                 | _psram_spin2_stop_ret
261c4     2D 00 64 FD | 	ret
261c8                 | 
261c8                 | ' 
261c8                 | ' '..............................................................................
261c8                 | ' 
261c8                 | ' {{
261c8                 | ' }}
261c8                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
261c8                 | _psram_spin2_read1
261c8                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
261c8                 | '     if drivercog == -1 ' driver must be running
261c8     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
261cc     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
261d0     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
261d4     FF FF 7F FF 
261d8     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
261dc                 | '         return ERR_INACTIVE
261dc     0F FA 65 A6 |  if_e	neg	result1, #15
261e0     7C 00 90 AD |  if_e	jmp	#LR__2971
261e4                 | '     if count == 0 ' don't even bother reading
261e4     00 16 0E F2 | 	cmp	arg03, #0 wz
261e8                 | '         return 0
261e8     00 FA 05 A6 |  if_e	mov	result1, #0
261ec     70 00 90 AD |  if_e	jmp	#LR__2971
261f0                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
261f0     00 FA 05 F6 | 	mov	result1, #0
261f4     01 FA 61 FD | 	cogid	result1
261f8     FD 00 02 F6 | 	mov	_var01, result1
261fc     01 00 66 F0 | 	shl	_var01, #1
26200     FD 00 02 F1 | 	add	_var01, result1
26204     02 00 66 F0 | 	shl	_var01, #2
26208     FF 03 00 FF 
2620c     00 03 06 F6 | 	mov	_var02, ##524032
26210     00 03 02 F1 | 	add	_var02, _var01
26214                 | '     if long[mailbox] < 0
26214     01 01 02 FB | 	rdlong	_var01, _var02
26218     00 00 56 F2 | 	cmps	_var01, #0 wc
2621c                 | '         return ERR_MAILBOX_BUSY
2621c     1C FA 65 C6 |  if_b	neg	result1, #28
26220     3C 00 90 CD |  if_b	jmp	#LR__2971
26224                 | '     long[mailbox][2] := count
26224     08 02 06 F1 | 	add	_var02, #8
26228     01 17 62 FC | 	wrlong	arg03, _var02
2622c                 | '     long[mailbox][1] := dstHubAddr
2622c     04 02 86 F1 | 	sub	_var02, #4
26230     01 13 62 FC | 	wrlong	arg01, _var02
26234     04 02 86 F1 | 	sub	_var02, #4
26238                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
26238     0A 05 02 F6 | 	mov	_var03, arg02
2623c     D9 04 06 F4 | 	bitl	_var03, #217
26240     00 00 58 FF 
26244     00 00 06 F6 | 	mov	_var01, ##-1342177280
26248     02 01 02 F1 | 	add	_var01, _var03
2624c     01 01 62 FC | 	wrlong	_var01, _var02
26250                 | '     repeat
26250                 | LR__2970
26250                 | '         result := long[mailbox]    
26250     01 05 02 FB | 	rdlong	_var03, _var02
26254     00 04 56 F2 | 	cmps	_var03, #0 wc
26258     F4 FF 9F CD |  if_b	jmp	#LR__2970
2625c                 | '     while result < 0   
2625c                 | '     return -result                       'return success or error
2625c     02 FB 61 F6 | 	neg	result1, _var03
26260                 | LR__2971
26260                 | _psram_spin2_read1_ret
26260     2D 00 64 FD | 	ret
26264                 | 
26264                 | ' 
26264                 | ' '..............................................................................
26264                 | ' 
26264                 | ' {{
26264                 | ' }}
26264                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
26264                 | _psram_spin2_write
26264                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
26264                 | '     if drivercog == -1 ' driver must be running
26264     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
26268     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
2626c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
26270     FF FF 7F FF 
26274     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
26278                 | '         return ERR_INACTIVE
26278     0F FA 65 A6 |  if_e	neg	result1, #15
2627c     7C 00 90 AD |  if_e	jmp	#LR__2981
26280                 | '     if count == 0 ' don't even bother writing
26280     00 16 0E F2 | 	cmp	arg03, #0 wz
26284                 | '         return 0
26284     00 FA 05 A6 |  if_e	mov	result1, #0
26288     70 00 90 AD |  if_e	jmp	#LR__2981
2628c                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
2628c     00 FA 05 F6 | 	mov	result1, #0
26290     01 FA 61 FD | 	cogid	result1
26294     FD 00 02 F6 | 	mov	_var01, result1
26298     01 00 66 F0 | 	shl	_var01, #1
2629c     FD 00 02 F1 | 	add	_var01, result1
262a0     02 00 66 F0 | 	shl	_var01, #2
262a4     FF 03 00 FF 
262a8     00 03 06 F6 | 	mov	_var02, ##524032
262ac     00 03 02 F1 | 	add	_var02, _var01
262b0                 | '     if long[mailbox] < 0
262b0     01 01 02 FB | 	rdlong	_var01, _var02
262b4     00 00 56 F2 | 	cmps	_var01, #0 wc
262b8                 | '         return ERR_MAILBOX_BUSY
262b8     1C FA 65 C6 |  if_b	neg	result1, #28
262bc     3C 00 90 CD |  if_b	jmp	#LR__2981
262c0                 | '     long[mailbox][2] := count
262c0     08 02 06 F1 | 	add	_var02, #8
262c4     01 17 62 FC | 	wrlong	arg03, _var02
262c8                 | '     long[mailbox][1] := srcHubAddr
262c8     04 02 86 F1 | 	sub	_var02, #4
262cc     01 13 62 FC | 	wrlong	arg01, _var02
262d0     04 02 86 F1 | 	sub	_var02, #4
262d4                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
262d4     0A 05 02 F6 | 	mov	_var03, arg02
262d8     D9 04 06 F4 | 	bitl	_var03, #217
262dc     00 00 78 FF 
262e0     00 00 06 F6 | 	mov	_var01, ##-268435456
262e4     02 01 02 F1 | 	add	_var01, _var03
262e8     01 01 62 FC | 	wrlong	_var01, _var02
262ec                 | '     repeat
262ec                 | LR__2980
262ec                 | '         result := long[mailbox]    
262ec     01 05 02 FB | 	rdlong	_var03, _var02
262f0     00 04 56 F2 | 	cmps	_var03, #0 wc
262f4     F4 FF 9F CD |  if_b	jmp	#LR__2980
262f8                 | '     while result < 0   
262f8                 | '     return -result                       'return success or error
262f8     02 FB 61 F6 | 	neg	result1, _var03
262fc                 | LR__2981
262fc                 | _psram_spin2_write_ret
262fc     2D 00 64 FD | 	ret
26300                 | 
26300                 | ' 
26300                 | ' ' generalized fill
26300                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
26300                 | _psram_spin2_fill
26300     09 01 02 F6 | 	mov	_var01, arg01
26304     0A 03 02 F6 | 	mov	_var02, arg02
26308     0B 05 02 F6 | 	mov	_var03, arg03
2630c     0D 07 02 F6 | 	mov	_var04, arg05
26310                 | '     case datasize 
26310     01 06 86 F1 | 	sub	_var04, #1
26314     04 06 26 F3 | 	fle	_var04, #4
26318     30 06 62 FD | 	jmprel	_var04
2631c                 | LR__2990
2631c     10 00 90 FD | 	jmp	#LR__2991
26320     18 00 90 FD | 	jmp	#LR__2992
26324     2C 00 90 FD | 	jmp	#LR__2994
26328     1C 00 90 FD | 	jmp	#LR__2993
2632c     24 00 90 FD | 	jmp	#LR__2994
26330                 | LR__2991
26330                 | '         1: req := driver.R_WRITEBYTE
26330     00 00 60 FF 
26334     00 08 06 F6 | 	mov	_var05, ##-1073741824
26338     20 00 90 FD | 	jmp	#LR__2995
2633c                 | LR__2992
2633c                 | '         2: req := driver.R_WRITEWORD
2633c     00 00 68 FF 
26340     00 08 06 F6 | 	mov	_var05, ##-805306368
26344     14 00 90 FD | 	jmp	#LR__2995
26348                 | LR__2993
26348                 | '         4: req := driver.R_WRITELONG
26348     00 00 70 FF 
2634c     00 08 06 F6 | 	mov	_var05, ##-536870912
26350     08 00 90 FD | 	jmp	#LR__2995
26354                 | LR__2994
26354                 | '         other : return ERR_INVALID
26354     06 FA 65 F6 | 	neg	result1, #6
26358     94 00 90 FD | 	jmp	#LR__2997
2635c                 | LR__2995
2635c                 | '     if count == 0   ' nothing to do
2635c     00 04 0E F2 | 	cmp	_var03, #0 wz
26360                 | '         return 0
26360     00 FA 05 A6 |  if_e	mov	result1, #0
26364     88 00 90 AD |  if_e	jmp	#LR__2997
26368                 | '     if drivercog == -1
26368     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
2636c     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
26370     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
26374     FF FF 7F FF 
26378     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
2637c                 | '         return ERR_INACTIVE
2637c     0F FA 65 A6 |  if_e	neg	result1, #15
26380     6C 00 90 AD |  if_e	jmp	#LR__2997
26384                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
26384     00 FA 05 F6 | 	mov	result1, #0
26388     01 FA 61 FD | 	cogid	result1
2638c     FD 06 02 F6 | 	mov	_var04, result1
26390     01 06 66 F0 | 	shl	_var04, #1
26394     FD 06 02 F1 | 	add	_var04, result1
26398     02 06 66 F0 | 	shl	_var04, #2
2639c     FF 03 00 FF 
263a0     00 0B 06 F6 | 	mov	_var06, ##524032
263a4     03 0B 02 F1 | 	add	_var06, _var04
263a8                 | '     if long[mailbox] < 0
263a8     05 07 02 FB | 	rdlong	_var04, _var06
263ac     00 06 56 F2 | 	cmps	_var04, #0 wc
263b0                 | '         return ERR_MAILBOX_BUSY
263b0     1C FA 65 C6 |  if_b	neg	result1, #28
263b4     38 00 90 CD |  if_b	jmp	#LR__2997
263b8                 | '     long[mailbox][2] := count
263b8     08 0A 06 F1 | 	add	_var06, #8
263bc     05 05 62 FC | 	wrlong	_var03, _var06
263c0                 | '     long[mailbox][1] := pattern
263c0     04 0A 86 F1 | 	sub	_var06, #4
263c4     05 03 62 FC | 	wrlong	_var02, _var06
263c8     04 0A 86 F1 | 	sub	_var06, #4
263cc                 | '     long[mailbox] := req + (addr & $1ffffff)
263cc     04 0D 02 F6 | 	mov	_var07, _var05
263d0     00 0F 02 F6 | 	mov	_var08, _var01
263d4     D9 0E 06 F4 | 	bitl	_var08, #217
263d8     07 0D 02 F1 | 	add	_var07, _var08
263dc     05 0D 62 FC | 	wrlong	_var07, _var06
263e0                 | '     repeat
263e0                 | LR__2996
263e0                 | '         r := long[mailbox]
263e0     05 0F 02 FB | 	rdlong	_var08, _var06
263e4     00 0E 56 F2 | 	cmps	_var08, #0 wc
263e8     F4 FF 9F CD |  if_b	jmp	#LR__2996
263ec                 | '     while r < 0
263ec                 | '     return -r                  ' return 0 for success or negated error code
263ec     07 FB 61 F6 | 	neg	result1, _var08
263f0                 | LR__2997
263f0                 | _psram_spin2_fill_ret
263f0     2D 00 64 FD | 	ret
263f4                 | 
263f4                 | ' 
263f4                 | ' '..............................................................................
263f4                 | ' 
263f4                 | ' {{
263f4                 | ' }}
263f4                 | ' PUB setQos(cog, qos) : result | mailbox
263f4                 | _psram_spin2_setQos
263f4     09 01 02 F6 | 	mov	_var01, arg01
263f8                 | '     if drivercog == -1 ' driver must be running
263f8     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
263fc     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
26400     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
26404     FF FF 7F FF 
26408     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
2640c                 | '         return ERR_INACTIVE
2640c     0F FA 65 A6 |  if_e	neg	result1, #15
26410     9C 00 90 AD |  if_e	jmp	#LR__3004
26414                 | '     if cog < 0 or cog > 7 ' enforce cog id range
26414     00 00 56 F2 | 	cmps	_var01, #0 wc
26418     08 00 90 CD |  if_b	jmp	#LR__3000
2641c     08 00 56 F2 | 	cmps	_var01, #8 wc
26420     08 00 90 CD |  if_b	jmp	#LR__3001
26424                 | LR__3000
26424                 | '         return ERR_INVALID
26424     06 FA 65 F6 | 	neg	result1, #6
26428     84 00 90 FD | 	jmp	#LR__3004
2642c                 | LR__3001
2642c                 | '     long[@qosData][cog] := qos & !$1ff
2642c     FF 15 26 F5 | 	andn	arg02, #511
26430     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
26434     02 00 66 F0 | 	shl	_var01, #2
26438     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
2643c     00 15 62 FC | 	wrlong	arg02, _var01
26440                 | '     mailbox := $7FF00 + drivercog*12
26440     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
26444     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
26448     02 07 02 F6 | 	mov	_var04, _var03
2644c     01 06 66 F0 | 	shl	_var04, #1
26450     02 07 02 F1 | 	add	_var04, _var03
26454     02 06 66 F0 | 	shl	_var04, #2
26458     FF 03 00 FF 
2645c     00 09 06 F6 | 	mov	_var05, ##524032
26460     03 09 02 F1 | 	add	_var05, _var04
26464                 | '     repeat until LOCKTRY(driverlock)
26464     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
26468                 | LR__3002
26468     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
2646c     06 12 72 FD | 	locktry	arg01 wc
26470     F4 FF 9F 3D |  if_ae	jmp	#LR__3002
26474     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
26478                 | '     long[mailbox] := driver.R_CONFIG + cogid()
26478     00 06 06 F6 | 	mov	_var04, #0
2647c     01 06 62 FD | 	cogid	_var04
26480     00 00 78 FF 
26484     00 02 06 F6 | 	mov	_var02, ##-268435456
26488     03 03 02 F1 | 	add	_var02, _var04
2648c     04 03 62 FC | 	wrlong	_var02, _var05
26490                 | '     repeat while long[mailbox] < 0
26490                 | LR__3003
26490     04 03 02 FB | 	rdlong	_var02, _var05
26494     00 02 56 F2 | 	cmps	_var02, #0 wc
26498     F4 FF 9F CD |  if_b	jmp	#LR__3003
2649c                 | '     LOCKREL(driverlock)
2649c     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
264a0     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
264a4     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
264a8     07 12 72 FD | 	lockrel	arg01 wc
264ac     00 FA 05 F6 | 	mov	result1, #0
264b0                 | LR__3004
264b0                 | _psram_spin2_setQos_ret
264b0     2D 00 64 FD | 	ret
264b4                 | 
264b4                 | ' 
264b4                 | ' '..............................................................................
264b4                 | ' 
264b4                 | ' {{
264b4                 | ' }}
264b4                 | ' PRI lookupDelay(freq) : delay | profile
264b4                 | _psram_spin2_lookupDelay
264b4                 | '     profile := @delayTable
264b4     08 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #264
264b8     FA 00 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
264bc                 | '     delay := long[profile][0]
264bc     00 03 02 FB | 	rdlong	_var02, _var01
264c0                 | '     repeat while long[profile][1] 
264c0     08 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #264
264c4     97 16 48 FB | 	callpa	#(@LR__3011-@LR__3010)>>2,fcache_load_ptr_
264c8                 | LR__3010
264c8     04 00 06 F1 | 	add	_var01, #4
264cc     00 FB 09 FB | 	rdlong	result1, _var01 wz
264d0     04 00 86 F1 | 	sub	_var01, #4
264d4     1C 00 90 AD |  if_e	jmp	#LR__3012
264d8                 | '         if freq +< long[profile][1] 
264d8     04 00 06 F1 | 	add	_var01, #4
264dc     00 FB 01 FB | 	rdlong	result1, _var01
264e0     04 00 86 F1 | 	sub	_var01, #4
264e4     FD 12 12 F2 | 	cmp	arg01, result1 wc
264e8                 | '             quit
264e8                 | '         profile += 4
264e8     04 00 06 31 |  if_ae	add	_var01, #4
264ec                 | '         delay++
264ec     01 02 06 31 |  if_ae	add	_var02, #1
264f0     D4 FF 9F 3D |  if_ae	jmp	#LR__3010
264f4                 | LR__3011
264f4                 | LR__3012
264f4     01 FB 01 F6 | 	mov	result1, _var02
264f8                 | _psram_spin2_lookupDelay_ret
264f8     2D 00 64 FD | 	ret
264fc                 | 
264fc                 | ' 
264fc                 | ' PUB start() : r
264fc                 | _usbnew_spin2_start
264fc     00 00 06 F6 | 	mov	_var01, #0
26500                 | '   ifnot driver_cog
26500     15 00 00 FF 
26504     47 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10823
26508     FB 02 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
2650c     15 00 00 FF 
26510     47 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10823
26514     38 00 90 5D |  if_ne	jmp	#LR__3020
26518                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
26518     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
2651c     10 00 06 F6 | 	mov	_var01, #16
26520     00 16 06 F6 | 	mov	arg03, #0
26524     28 16 62 FD | 	setq	arg03
26528     0A 01 F2 FC | 	coginit	_var01, arg02 wc
2652c     01 00 66 C6 |  if_b	neg	_var01, #1
26530                 | '     if r >= 0
26530     00 00 56 F2 | 	cmps	_var01, #0 wc
26534                 | '       driver_cog := r+1
26534     00 03 02 36 |  if_ae	mov	_var02, _var01
26538     01 02 06 31 |  if_ae	add	_var02, #1
2653c     15 00 00 3F 
26540     47 F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10823
26544     FB 02 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
26548     15 00 00 3F 
2654c     47 F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10823
26550                 | LR__3020
26550     00 FB 01 F6 | 	mov	result1, _var01
26554                 | _usbnew_spin2_start_ret
26554     2D 00 64 FD | 	ret
26558                 | 
26558                 | '     '' (Always enabled)
26558                 | ' 
26558                 | ' '' Get current pressed state of a keyboard key
26558                 | ' PUB keystate(key) : r | buf[2],tmp
26558                 | _usbnew_spin2_keystate
26558     00 04 06 F6 | 	mov	_var03, #0
2655c                 | '   if key >= $E0 && key < $E8
2655c     E0 12 56 F2 | 	cmps	arg01, #224 wc
26560     34 00 90 CD |  if_b	jmp	#LR__3030
26564     E8 12 56 F2 | 	cmps	arg01, #232 wc
26568     2C 00 90 3D |  if_ae	jmp	#LR__3030
2656c                 | '     return not not (hkbd_report.byte[0] >> (key-$E0))
2656c     00 FA 05 F6 | 	mov	result1, #0
26570     13 00 00 FF 
26574     C8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10184
26578     09 07 02 F6 | 	mov	_var04, arg01
2657c     E0 06 86 F1 | 	sub	_var04, #224
26580     FB 08 C2 FA | 	rdbyte	_var05, ptr__usbnew_spin2_dat__
26584     03 09 4A F0 | 	shr	_var05, _var04 wz
26588     13 00 00 FF 
2658c     C8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10184
26590     01 FA 65 56 |  if_ne	neg	result1, #1
26594     58 00 90 FD | 	jmp	#_usbnew_spin2_keystate_ret
26598                 | LR__3030
26598                 | '   else
26598                 | '     '' Do this in inline ASM to ensure atomicity
26598                 | '     tmp := @hkbd_report
26598     13 00 00 FF 
2659c     C8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10184
265a0     FB 08 02 F6 | 	mov	_var05, ptr__usbnew_spin2_dat__
265a4                 | '     org
265a4     13 00 00 FF 
265a8     C8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10184
265ac     97 1E 48 FB | 	callpa	#(@LR__3032-@LR__3031)>>2,fcache_load_ptr_
265b0                 | LR__3031
265b0 000             | 	org	0
265b0 000 28 02 64 FD | 	setq	#1
265b4 001 04 01 02 FB | 	rdlong	_var01, _var05
265b8 002 00 0B F2 F8 | 	getbyte	_var06, _var01, #2
265bc 003 09 0B 0A F2 | 	cmp	_var06, arg01 wz
265c0 004 00 0B FA F8 | 	getbyte	_var06, _var01, #3
265c4 005 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
265c8 006 01 0B E2 F8 | 	getbyte	_var06, _var02, #0
265cc 007 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
265d0 008 01 0B EA F8 | 	getbyte	_var06, _var02, #1
265d4 009 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
265d8 00a 01 0B F2 F8 | 	getbyte	_var06, _var02, #2
265dc 00b 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
265e0 00c 01 0B FA F8 | 	getbyte	_var06, _var02, #3
265e4 00d 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
265e8 00e 01 04 66 A6 |  if_e	neg	_var03, #1
265ec 00f             | LR__3032
265ec                 | 	orgh
265ec     02 FB 01 F6 | 	mov	result1, _var03
265f0                 | _usbnew_spin2_keystate_ret
265f0     2D 00 64 FD | 	ret
265f4                 | 
265f4                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
265f4                 | ' 
265f4                 | ' '' Return key event from buffer if there is one
265f4                 | ' PUB get_key() : r | tail
265f4                 | _usbnew_spin2_get_key
265f4                 | '   tail := keyq_tail
265f4     0F 00 00 FF 
265f8     C5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7877
265fc     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
26600                 | '   if keyq_head == tail
26600     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
26604     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
26608     0F 00 00 FF 
2660c     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
26610     00 03 0A F2 | 	cmp	_var02, _var01 wz
26614                 | '     return 0 ' No event
26614     00 FA 05 A6 |  if_e	mov	result1, #0
26618     34 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
2661c                 | '   r := keyq_data[tail]
2661c     00 03 02 F6 | 	mov	_var02, _var01
26620     02 02 66 F0 | 	shl	_var02, #2
26624     0F 00 00 FF 
26628     C6 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7878
2662c     FB 02 02 F1 | 	add	_var02, ptr__usbnew_spin2_dat__
26630     01 FB 01 FB | 	rdlong	result1, _var02
26634                 | '   if ++tail == KEYQUEUE_SIZE
26634     01 00 06 F1 | 	add	_var01, #1
26638     80 00 0E F2 | 	cmp	_var01, #128 wz
2663c                 | '     tail := 0
2663c     00 00 06 A6 |  if_e	mov	_var01, #0
26640                 | '   keyq_tail := tail
26640     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
26644     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
26648     0F 00 00 FF 
2664c     C5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7877
26650                 | _usbnew_spin2_get_key_ret
26650     2D 00 64 FD | 	ret
26654                 | 
26654                 | ' 
26654                 | ' '' Emulate mouse movement
26654                 | ' PUB mouse_move(x,y)
26654                 | _usbnew_spin2_mouse_move
26654     02 4A 05 F6 | 	mov	COUNT_, #2
26658     A8 00 A0 FD | 	call	#pushregs_
2665c     09 27 02 F6 | 	mov	local01, arg01
26660     0A 29 02 F6 | 	mov	local02, arg02
26664                 | '   mouse_lock := 1
26664     14 00 00 FF 
26668     B1 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10417
2666c     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
26670     14 00 00 FF 
26674     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
26678                 | '   waitus(2) ' hope driver is now done
26678     02 12 06 F6 | 	mov	arg01, #2
2667c     30 0B B0 FD | 	call	#__system___waitus
26680                 | '   mouse_xacc := x
26680     14 00 00 FF 
26684     A1 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10401
26688     FB 26 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
2668c                 | '   mouse_yacc := y
2668c     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
26690     FB 28 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
26694                 | '   if mouse_outptr
26694     04 00 00 FF 
26698     E5 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2533
2669c     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
266a0     0F 00 00 FF 
266a4     C0 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7872
266a8     24 00 90 AD |  if_e	jmp	#LR__3040
266ac                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
266ac     10 28 66 F0 | 	shl	local02, #16
266b0     13 27 32 F9 | 	getword	local01, local01, #0
266b4     13 29 42 F5 | 	or	local02, local01
266b8     0F 00 00 FF 
266bc     C0 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7872
266c0     FB 26 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
266c4     0F 00 00 FF 
266c8     C0 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7872
266cc     13 29 62 FC | 	wrlong	local02, local01
266d0                 | LR__3040
266d0                 | '   mouse_lock := 0
266d0     14 00 00 FF 
266d4     B1 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10417
266d8     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
266dc     14 00 00 FF 
266e0     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
266e4     A7 F0 03 F6 | 	mov	ptra, fp
266e8     B2 00 A0 FD | 	call	#popregs_
266ec                 | _usbnew_spin2_mouse_move_ret
266ec     2D 00 64 FD | 	ret
266f0                 | 
266f0                 | '     '' Set HAVE_HIDPAD to enable.
266f0                 | '     '' Warning: never pass a device ID larger or equal than MAX_DEVICES
266f0                 | ' 
266f0                 | ' '' Get VID/PID pair for connected device. 0 means disconnected
266f0                 | ' PUB hidpad_id(dev) : r
266f0                 | _usbnew_spin2_hidpad_id
266f0                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
266f0     13 00 00 FF 
266f4     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
266f8     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
266fc     09 01 02 F6 | 	mov	_var01, arg01
26700     03 00 66 F0 | 	shl	_var01, #3
26704     09 01 82 F1 | 	sub	_var01, arg01
26708     02 00 66 F0 | 	shl	_var01, #2
2670c     00 FB 01 F1 | 	add	result1, _var01
26710     FD FA 01 FB | 	rdlong	result1, result1
26714     13 00 00 FF 
26718     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
2671c                 | _usbnew_spin2_hidpad_id_ret
2671c     2D 00 64 FD | 	ret
26720                 | 
26720                 | ' 
26720                 | ' '' Get all button states for a device
26720                 | ' PUB hidpad_buttons(dev) : r 
26720                 | _usbnew_spin2_hidpad_buttons
26720                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][5]
26720     13 00 00 FF 
26724     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
26728     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
2672c     09 01 02 F6 | 	mov	_var01, arg01
26730     03 00 66 F0 | 	shl	_var01, #3
26734     09 01 82 F1 | 	sub	_var01, arg01
26738     02 00 66 F0 | 	shl	_var01, #2
2673c     00 FB 01 F1 | 	add	result1, _var01
26740     14 FA 05 F1 | 	add	result1, #20
26744     FD FA 01 FB | 	rdlong	result1, result1
26748     13 00 00 FF 
2674c     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
26750                 | _usbnew_spin2_hidpad_buttons_ret
26750     2D 00 64 FD | 	ret
26754                 | 
26754                 | ' 
26754                 | ' '' Get state of an axis (normalized between -32768 and 32767)
26754                 | ' PUB hidpad_axis(dev,axnum) : r
26754                 | _usbnew_spin2_hidpad_axis
26754                 | '   if axnum +>= 6
26754     06 14 16 F2 | 	cmp	arg02, #6 wc
26758                 | '     return 0
26758     00 FA 05 36 |  if_ae	mov	result1, #0
2675c     40 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
26760                 | '   else 
26760                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
26760     13 00 00 FF 
26764     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
26768     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
2676c     09 01 02 F6 | 	mov	_var01, arg01
26770     03 00 66 F0 | 	shl	_var01, #3
26774     09 01 82 F1 | 	sub	_var01, arg01
26778     02 00 66 F0 | 	shl	_var01, #2
2677c     00 FB 01 F1 | 	add	result1, _var01
26780     04 00 06 F6 | 	mov	_var01, #4
26784     0A 01 02 F1 | 	add	_var01, arg02
26788     01 00 66 F0 | 	shl	_var01, #1
2678c     FD 00 02 F1 | 	add	_var01, result1
26790     00 FB E1 FA | 	rdword	result1, _var01
26794     0F FA 65 F7 | 	signx	result1, #15
26798     13 00 00 FF 
2679c     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
267a0                 | _usbnew_spin2_hidpad_axis_ret
267a0     2D 00 64 FD | 	ret
267a4                 | 
267a4                 | ' 
267a4                 | ' '' Get state of a hat
267a4                 | ' PUB hidpad_hat(dev,hatnum) : r
267a4                 | _usbnew_spin2_hidpad_hat
267a4                 | '   if hatnum +>= 4
267a4     04 14 16 F2 | 	cmp	arg02, #4 wc
267a8                 | '     return 0
267a8     00 FA 05 36 |  if_ae	mov	result1, #0
267ac     38 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_hat_ret
267b0                 | '   else 
267b0                 | '     return byte[@hidpad_report+dev*HIDPAD_REPORT_SIZE][6*4+hatnum]
267b0     13 00 00 FF 
267b4     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
267b8     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
267bc     09 01 02 F6 | 	mov	_var01, arg01
267c0     03 00 66 F0 | 	shl	_var01, #3
267c4     09 01 82 F1 | 	sub	_var01, arg01
267c8     02 00 66 F0 | 	shl	_var01, #2
267cc     00 FB 01 F1 | 	add	result1, _var01
267d0     18 00 06 F6 | 	mov	_var01, #24
267d4     0A 01 02 F1 | 	add	_var01, arg02
267d8     FD 00 02 F1 | 	add	_var01, result1
267dc     00 FB C1 FA | 	rdbyte	result1, _var01
267e0     13 00 00 FF 
267e4     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
267e8                 | _usbnew_spin2_hidpad_hat_ret
267e8     2D 00 64 FD | 	ret
267ec                 | 
267ec                 | ' 
267ec                 | ' 
267ec                 | ' '--------------------------------------------------------------
267ec                 | ' '---------- Init the variables, start the cog. ----------------
267ec                 | ' '--------------------------------------------------------------
267ec                 | ' 
267ec                 | ' pub start(mbox,scope,cache) :cog,base | iii
267ec                 | _audio096_spin2_start
267ec     04 4A 05 F6 | 	mov	COUNT_, #4
267f0     A8 00 A0 FD | 	call	#pushregs_
267f4     09 27 02 F6 | 	mov	local01, arg01
267f8                 | ' 
267f8                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
267f8                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
267f8                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
267f8                 | ' 
267f8                 | ' mailboxaddr:=mbox 
267f8     F2 26 62 FC | 	wrlong	local01, objptr
267fc                 | ' scope_ptr:=scope
267fc     04 E4 05 F1 | 	add	objptr, #4
26800     F2 14 62 FC | 	wrlong	arg02, objptr
26804                 | ' cache_ptr:=cache
26804     04 E4 05 F1 | 	add	objptr, #4
26808     F2 16 62 FC | 	wrlong	arg03, objptr
2680c                 | ' base:=@channel1[0]
2680c     04 E4 05 F1 | 	add	objptr, #4
26810     F2 28 02 F6 | 	mov	local02, objptr
26814                 | ' long[$40]:=mbox
26814     40 26 66 FC | 	wrlong	local01, #64
26818                 | ' repeat iii from 0 to 7
26818     00 2A 06 F6 | 	mov	local03, #0
2681c     02 00 00 FF 
26820     A0 E8 05 F1 | 	add	ptr__audio096_spin2_dat__, ##1184
26824     0C E4 85 F1 | 	sub	objptr, #12
26828     97 BC 48 FB | 	callpa	#(@LR__3051-@LR__3050)>>2,fcache_load_ptr_
2682c                 | LR__3050
2682c                 | '   long[base+64*iii]:=0
2682c     14 27 02 F6 | 	mov	local01, local02
26830     15 FD 01 F6 | 	mov	result2, local03
26834     06 FC 65 F0 | 	shl	result2, #6
26838     FE 26 02 F1 | 	add	local01, result2
2683c     13 01 68 FC | 	wrlong	#0, local01
26840                 | '   long[base+64*iii+4]:=0
26840     14 27 02 F6 | 	mov	local01, local02
26844     15 FD 01 F6 | 	mov	result2, local03
26848     06 FC 65 F0 | 	shl	result2, #6
2684c     FE 26 02 F1 | 	add	local01, result2
26850     04 26 06 F1 | 	add	local01, #4
26854     13 01 68 FC | 	wrlong	#0, local01
26858                 | '   long[base+64*iii+12]:=0
26858     14 2D 02 F6 | 	mov	local04, local02
2685c     15 27 02 F6 | 	mov	local01, local03
26860     06 26 66 F0 | 	shl	local01, #6
26864     13 2D 02 F1 | 	add	local04, local01
26868     0C 2C 06 F1 | 	add	local04, #12
2686c     16 01 68 FC | 	wrlong	#0, local04
26870                 | '   long[base+64*iii+16]:=2 
26870     14 2D 02 F6 | 	mov	local04, local02
26874     15 27 02 F6 | 	mov	local01, local03
26878     06 26 66 F0 | 	shl	local01, #6
2687c     13 2D 02 F1 | 	add	local04, local01
26880     10 2C 06 F1 | 	add	local04, #16
26884     16 05 68 FC | 	wrlong	#2, local04
26888                 | '   word[base+64*iii+20]:=0
26888     14 2D 02 F6 | 	mov	local04, local02
2688c     15 27 02 F6 | 	mov	local01, local03
26890     06 26 66 F0 | 	shl	local01, #6
26894     13 2D 02 F1 | 	add	local04, local01
26898     14 2C 06 F1 | 	add	local04, #20
2689c     16 01 58 FC | 	wrword	#0, local04
268a0                 | '   word[base+64*iii+22]:=8192
268a0     14 2D 02 F6 | 	mov	local04, local02
268a4     15 27 02 F6 | 	mov	local01, local03
268a8     06 26 66 F0 | 	shl	local01, #6
268ac     13 2D 02 F1 | 	add	local04, local01
268b0     16 2C 06 F1 | 	add	local04, #22
268b4     10 00 80 FF 
268b8     16 01 58 FC | 	wrword	##8192, local04
268bc                 | '   word[base+64*iii+24]:=4000+2*iii
268bc     15 2D 02 F6 | 	mov	local04, local03
268c0     01 2C 66 F0 | 	shl	local04, #1
268c4     07 00 00 FF 
268c8     A0 27 06 F6 | 	mov	local01, ##4000
268cc     16 27 02 F1 | 	add	local01, local04
268d0     14 2D 02 F6 | 	mov	local04, local02
268d4     15 FD 01 F6 | 	mov	result2, local03
268d8     06 FC 65 F0 | 	shl	result2, #6
268dc     FE 2C 02 F1 | 	add	local04, result2
268e0     18 2C 06 F1 | 	add	local04, #24
268e4     16 27 52 FC | 	wrword	local01, local04
268e8                 | '   word[base+64*iii+26]:=2
268e8     14 2D 02 F6 | 	mov	local04, local02
268ec     15 27 02 F6 | 	mov	local01, local03
268f0     06 26 66 F0 | 	shl	local01, #6
268f4     13 2D 02 F1 | 	add	local04, local01
268f8     1A 2C 06 F1 | 	add	local04, #26
268fc     16 05 58 FC | 	wrword	#2, local04
26900                 | '   long [base+64*iii+8]:=@null | $C0000000
26900     F4 26 02 F6 | 	mov	local01, ptr__audio096_spin2_dat__
26904     3E 26 26 F4 | 	bith	local01, #62
26908     14 2D 02 F6 | 	mov	local04, local02
2690c     15 17 02 F6 | 	mov	arg03, local03
26910     06 16 66 F0 | 	shl	arg03, #6
26914     0B 2D 02 F1 | 	add	local04, arg03
26918     08 2C 06 F1 | 	add	local04, #8
2691c     16 27 62 FC | 	wrlong	local01, local04
26920                 | '   long[base+64*iii+32]:=0
26920     14 2D 02 F6 | 	mov	local04, local02
26924     15 27 02 F6 | 	mov	local01, local03
26928     06 26 66 F0 | 	shl	local01, #6
2692c     13 2D 02 F1 | 	add	local04, local01
26930     20 2C 06 F1 | 	add	local04, #32
26934     16 01 68 FC | 	wrlong	#0, local04
26938                 | '   long[base+64*iii+36]:=0
26938     14 2D 02 F6 | 	mov	local04, local02
2693c     15 27 02 F6 | 	mov	local01, local03
26940     06 26 66 F0 | 	shl	local01, #6
26944     13 2D 02 F1 | 	add	local04, local01
26948     24 2C 06 F1 | 	add	local04, #36
2694c     16 01 68 FC | 	wrlong	#0, local04
26950                 | '   long[base+64*iii+40]:=0
26950     14 2D 02 F6 | 	mov	local04, local02
26954     15 27 02 F6 | 	mov	local01, local03
26958     06 26 66 F0 | 	shl	local01, #6
2695c     13 2D 02 F1 | 	add	local04, local01
26960     28 2C 06 F1 | 	add	local04, #40
26964     16 01 68 FC | 	wrlong	#0, local04
26968                 | '   long[base+64*iii+44]:=0
26968     14 2D 02 F6 | 	mov	local04, local02
2696c     15 27 02 F6 | 	mov	local01, local03
26970     06 26 66 F0 | 	shl	local01, #6
26974     13 2D 02 F1 | 	add	local04, local01
26978     2C 2C 06 F1 | 	add	local04, #44
2697c     16 01 68 FC | 	wrlong	#0, local04
26980                 | '   long[base+64*iii+28]:=0
26980     14 2D 02 F6 | 	mov	local04, local02
26984     15 27 02 F6 | 	mov	local01, local03
26988     06 26 66 F0 | 	shl	local01, #6
2698c     13 2D 02 F1 | 	add	local04, local01
26990     1C 2C 06 F1 | 	add	local04, #28
26994     16 01 68 FC | 	wrlong	#0, local04
26998     01 2A 06 F1 | 	add	local03, #1
2699c     08 2A 56 F2 | 	cmps	local03, #8 wc
269a0     88 FE 9F CD |  if_b	jmp	#LR__3050
269a4                 | LR__3051
269a4     02 00 00 FF 
269a8     A0 E8 85 F1 | 	sub	ptr__audio096_spin2_dat__, ##1184
269ac                 | '   
269ac                 | ' cog:=coginit(16,@audio,@mailboxaddr)
269ac     F4 14 02 F6 | 	mov	arg02, ptr__audio096_spin2_dat__
269b0     F2 16 02 F6 | 	mov	arg03, objptr
269b4     10 2C 06 F6 | 	mov	local04, #16
269b8     28 16 62 FD | 	setq	arg03
269bc     0A 2D F2 FC | 	coginit	local04, arg02 wc
269c0     01 2C 66 C6 |  if_b	neg	local04, #1
269c4                 | ' waitms(100)
269c4     64 12 06 F6 | 	mov	arg01, #100
269c8     78 07 B0 FD | 	call	#__system___waitms
269cc                 | ' return cog,base
269cc     14 FD 01 F6 | 	mov	result2, local02
269d0     16 FB 01 F6 | 	mov	result1, local04
269d4     A7 F0 03 F6 | 	mov	ptra, fp
269d8     B2 00 A0 FD | 	call	#popregs_
269dc                 | _audio096_spin2_start_ret
269dc     2D 00 64 FD | 	ret
269e0                 | 
269e0                 | ' 
269e0                 | ' ' a simple play procedure to not poke everything. 
269e0                 | ' 
269e0                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
269e0                 | _audio096_spin2_play
269e0     0C E4 05 F1 | 	add	objptr, #12
269e4     F2 00 02 F6 | 	mov	_var01, objptr
269e8     06 12 66 F0 | 	shl	arg01, #6
269ec     09 01 02 F1 | 	add	_var01, arg01
269f0     00 13 02 F6 | 	mov	arg01, _var01
269f4     0C 12 06 F1 | 	add	arg01, #12
269f8     09 1B 62 FC | 	wrlong	arg05, arg01
269fc     00 1C 56 F2 | 	cmps	arg06, #0 wc
26a00     00 13 02 36 |  if_ae	mov	arg01, _var01
26a04     10 12 06 31 |  if_ae	add	arg01, #16
26a08     09 1D 62 3C |  if_ae	wrlong	arg06, arg01
26a0c     02 1A 06 C1 |  if_b	add	arg05, #2
26a10     00 13 02 C6 |  if_b	mov	arg01, _var01
26a14     10 12 06 C1 |  if_b	add	arg01, #16
26a18     09 1B 62 CC |  if_b	wrlong	arg05, arg01
26a1c     0B 13 52 F6 | 	abs	arg01, arg03 wc
26a20     0F 1B 80 FF 
26a24     09 1F 1A FD | 	qdiv	##3546895, arg01
26a28                 | ' 
26a28                 | ' base2:=@channel1[0]+64*channel
26a28                 | ' 
26a28                 | ' 
26a28                 | ' long[base2+12]:= len
26a28                 | ' if loop >=0 
26a28                 | '   long[base2+16]:= loop
26a28     0C E4 85 F1 | 	sub	objptr, #12
26a2c                 | ' else
26a2c                 | '   long[base2+16]:= len+2
26a2c                 | ' word[base2+20]:=vol
26a2c     00 13 02 F6 | 	mov	arg01, _var01
26a30     14 12 06 F1 | 	add	arg01, #20
26a34     09 19 52 FC | 	wrword	arg04, arg01
26a38                 | ' word[base2+24]:= 3546895/splfreq 
26a38     00 19 02 F6 | 	mov	arg04, _var01
26a3c     18 18 06 F1 | 	add	arg04, #24
26a40                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
26a40                 | ' long[base2+28]:=$40000000    
26a40                 | ' long[base2+32]:=0    
26a40                 | ' long[base2+36]:=0    
26a40                 | ' long[base2+40]:=0    
26a40                 | ' long[base2+44]:=0    
26a40                 | ' long[base2+8]:=sample+$C0000000     
26a40     00 00 60 FF 
26a44     00 14 06 F1 | 	add	arg02, ##-1073741824
26a48     18 12 62 FD | 	getqx	arg01
26a4c     09 13 82 F6 | 	negc	arg01, arg01
26a50     0C 13 52 FC | 	wrword	arg01, arg04
26a54     00 13 02 F6 | 	mov	arg01, _var01
26a58     1A 12 06 F1 | 	add	arg01, #26
26a5c     09 01 5A FC | 	wrword	#256, arg01
26a60     00 13 02 F6 | 	mov	arg01, _var01
26a64     1C 12 06 F1 | 	add	arg01, #28
26a68     00 00 A0 FF 
26a6c     09 01 68 FC | 	wrlong	##1073741824, arg01
26a70     00 13 02 F6 | 	mov	arg01, _var01
26a74     20 12 06 F1 | 	add	arg01, #32
26a78     09 01 68 FC | 	wrlong	#0, arg01
26a7c     00 13 02 F6 | 	mov	arg01, _var01
26a80     24 12 06 F1 | 	add	arg01, #36
26a84     09 01 68 FC | 	wrlong	#0, arg01
26a88     00 13 02 F6 | 	mov	arg01, _var01
26a8c     28 12 06 F1 | 	add	arg01, #40
26a90     09 01 68 FC | 	wrlong	#0, arg01
26a94     00 13 02 F6 | 	mov	arg01, _var01
26a98     2C 12 06 F1 | 	add	arg01, #44
26a9c     09 01 68 FC | 	wrlong	#0, arg01
26aa0     08 00 06 F1 | 	add	_var01, #8
26aa4     00 15 62 FC | 	wrlong	arg02, _var01
26aa8                 | _audio096_spin2_play_ret
26aa8     2D 00 64 FD | 	ret
26aac                 | 
26aac                 | ' 
26aac                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
26aac                 | _audio096_spin2_play8
26aac                 | ' 
26aac                 | ' base2:=@channel1[0]+64*channel
26aac     0C E4 05 F1 | 	add	objptr, #12
26ab0     F2 00 02 F6 | 	mov	_var01, objptr
26ab4     06 12 66 F0 | 	shl	arg01, #6
26ab8     09 01 02 F1 | 	add	_var01, arg01
26abc                 | ' long[base2]:=0
26abc     00 01 68 FC | 	wrlong	#0, _var01
26ac0                 | ' long[base2+8]:=sample+$40000000 
26ac0     00 00 20 FF 
26ac4     00 14 06 F1 | 	add	arg02, ##1073741824
26ac8     00 13 02 F6 | 	mov	arg01, _var01
26acc     08 12 06 F1 | 	add	arg01, #8
26ad0     09 15 62 FC | 	wrlong	arg02, arg01
26ad4                 | ' if loop>=0
26ad4     00 1C 56 F2 | 	cmps	arg06, #0 wc
26ad8     0C E4 85 F1 | 	sub	objptr, #12
26adc     1C 00 90 CD |  if_b	jmp	#LR__3060
26ae0                 | '   long[base2+12]:=loop
26ae0     00 15 02 F6 | 	mov	arg02, _var01
26ae4     0C 14 06 F1 | 	add	arg02, #12
26ae8     0A 1D 62 FC | 	wrlong	arg06, arg02
26aec                 | '   long[base2+16]:= len
26aec     00 1D 02 F6 | 	mov	arg06, _var01
26af0     10 1C 06 F1 | 	add	arg06, #16
26af4     0E 1B 62 FC | 	wrlong	arg05, arg06
26af8     1C 00 90 FD | 	jmp	#LR__3061
26afc                 | LR__3060
26afc                 | ' else
26afc                 | '   long[base2+12]:= len
26afc     00 1D 02 F6 | 	mov	arg06, _var01
26b00     0C 1C 06 F1 | 	add	arg06, #12
26b04     0E 1B 62 FC | 	wrlong	arg05, arg06
26b08                 | '   long[base2+16]:= len+1
26b08     01 1A 06 F1 | 	add	arg05, #1
26b0c     00 13 02 F6 | 	mov	arg01, _var01
26b10     10 12 06 F1 | 	add	arg01, #16
26b14     09 1B 62 FC | 	wrlong	arg05, arg01
26b18                 | LR__3061
26b18     0B 17 52 F6 | 	abs	arg03, arg03 wc
26b1c     0F 1B 80 FF 
26b20     0B 1F 1A FD | 	qdiv	##3546895, arg03
26b24                 | ' word[base2+20]:=vol
26b24     00 17 02 F6 | 	mov	arg03, _var01
26b28     14 16 06 F1 | 	add	arg03, #20
26b2c     0B 19 52 FC | 	wrword	arg04, arg03
26b30                 | ' word[base2+24]:= 3546895 /splfreq 
26b30     00 13 02 F6 | 	mov	arg01, _var01
26b34     18 12 06 F1 | 	add	arg01, #24
26b38                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
26b38     1A 00 06 F1 | 	add	_var01, #26
26b3c     18 18 62 FD | 	getqx	arg04
26b40     0C 19 82 F6 | 	negc	arg04, arg04
26b44     09 19 52 FC | 	wrword	arg04, arg01
26b48     00 01 5A FC | 	wrword	#256, _var01
26b4c                 | _audio096_spin2_play8_ret
26b4c     2D 00 64 FD | 	ret
26b50                 | 
26b50                 | ' 'long[base2+28]:=$40000000
26b50                 | ' 
26b50                 | '     
26b50                 | ' pub stop(channel) 'silence it
26b50                 | _audio096_spin2_stop
26b50                 | ' 
26b50                 | ' word[@channel1[0]+64*channel+20]:=0
26b50     0C E4 05 F1 | 	add	objptr, #12
26b54     F2 00 02 F6 | 	mov	_var01, objptr
26b58     09 03 02 F6 | 	mov	_var02, arg01
26b5c     06 02 66 F0 | 	shl	_var02, #6
26b60     01 01 02 F1 | 	add	_var01, _var02
26b64     14 00 06 F1 | 	add	_var01, #20
26b68     00 01 58 FC | 	wrword	#0, _var01
26b6c                 | ' word[@channel1[0]+64*channel+20]:=0
26b6c     F2 00 02 F6 | 	mov	_var01, objptr
26b70     06 12 66 F0 | 	shl	arg01, #6
26b74     09 01 02 F1 | 	add	_var01, arg01
26b78     14 00 06 F1 | 	add	_var01, #20
26b7c     00 01 58 FC | 	wrword	#0, _var01
26b80     0C E4 85 F1 | 	sub	objptr, #12
26b84                 | _audio096_spin2_stop_ret
26b84     2D 00 64 FD | 	ret
26b88                 | hubexit
26b88     81 00 80 FD | 	jmp	#cogexit
26b8c                 | 
26b8c                 | __system___setbaud
26b8c     14 90 06 FB | 	rdlong	muldiva_, #20
26b90     09 93 02 F6 | 	mov	muldivb_, arg01
26b94     BA 00 A0 FD | 	call	#divide_
26b98     97 06 48 FB | 	callpa	#(@LR__3071-@LR__3070)>>2,fcache_load_ptr_
26b9c                 | LR__3070
26b9c     3E FA 9D FA | 	rdpin	result1, #62 wc
26ba0     FE FC A1 F1 | 	subx	result2, result2
26ba4     F4 FF 9F CD |  if_b	jmp	#LR__3070
26ba8                 | LR__3071
26ba8     40 7C 64 FD | 	dirl	#62
26bac     40 7E 64 FD | 	dirl	#63
26bb0     F3 92 62 FC | 	wrlong	muldivb_, ptr___system__dat__
26bb4     10 92 66 F0 | 	shl	muldivb_, #16
26bb8     07 14 06 F6 | 	mov	arg02, #7
26bbc     49 15 02 F1 | 	add	arg02, muldivb_
26bc0     3E F8 0C FC | 	wrpin	#124, #62
26bc4     3E 14 16 FC | 	wxpin	arg02, #62
26bc8     3F 7C 0C FC | 	wrpin	#62, #63
26bcc     14 14 06 F1 | 	add	arg02, #20
26bd0     3F 14 16 FC | 	wxpin	arg02, #63
26bd4     41 7C 64 FD | 	dirh	#62
26bd8     41 7E 64 FD | 	dirh	#63
26bdc                 | __system___setbaud_ret
26bdc     2D 00 64 FD | 	ret
26be0                 | 
26be0                 | __system___txraw
26be0     01 4A 05 F6 | 	mov	COUNT_, #1
26be4     A8 00 A0 FD | 	call	#pushregs_
26be8     09 27 02 F6 | 	mov	local01, arg01
26bec     97 06 48 FB | 	callpa	#(@LR__3081-@LR__3080)>>2,fcache_load_ptr_
26bf0                 | LR__3080
26bf0     3E FA 9D FA | 	rdpin	result1, #62 wc
26bf4     FE FC A1 F1 | 	subx	result2, result2
26bf8     F4 FF 9F CD |  if_b	jmp	#LR__3080
26bfc                 | LR__3081
26bfc     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
26c00     C2 01 00 AF 
26c04     00 12 06 A6 |  if_e	mov	arg01, ##230400
26c08     80 FF BF AD |  if_e	call	#__system___setbaud
26c0c     58 7C 64 FD | 	drvl	#62
26c10     3E 26 26 FC | 	wypin	local01, #62
26c14     01 FA 05 F6 | 	mov	result1, #1
26c18     A7 F0 03 F6 | 	mov	ptra, fp
26c1c     B2 00 A0 FD | 	call	#popregs_
26c20                 | __system___txraw_ret
26c20     2D 00 64 FD | 	ret
26c24                 | 
26c24                 | __system___rxraw
26c24     0D 4A 05 F6 | 	mov	COUNT_, #13
26c28     A8 00 A0 FD | 	call	#pushregs_
26c2c     09 27 02 F6 | 	mov	local01, arg01
26c30     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
26c34     C2 01 00 AF 
26c38     00 12 06 A6 |  if_e	mov	arg01, ##230400
26c3c     4C FF BF AD |  if_e	call	#__system___setbaud
26c40     00 26 0E F2 | 	cmp	local01, #0 wz
26c44     20 00 90 AD |  if_e	jmp	#LR__3090
26c48     14 2A 06 FB | 	rdlong	local03, #20
26c4c     0A 2A 46 F0 | 	shr	local03, #10
26c50     15 27 02 FD | 	qmul	local01, local03
26c54     1A FA 61 FD | 	getct	result1
26c58     18 2C 62 FD | 	getqx	local04
26c5c     16 FB 01 F1 | 	add	result1, local04
26c60     FD 2E 02 F6 | 	mov	local05, result1
26c64     04 00 90 FD | 	jmp	#LR__3091
26c68                 | LR__3090
26c68     00 2E 06 F6 | 	mov	local05, #0
26c6c                 | LR__3091
26c6c     01 30 66 F6 | 	neg	local06, #1
26c70     3F 32 06 F6 | 	mov	local07, #63
26c74     00 34 06 F6 | 	mov	local08, #0
26c78     04 E6 05 F1 | 	add	ptr___system__dat__, #4
26c7c     F3 36 02 FB | 	rdlong	local09, ptr___system__dat__
26c80     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
26c84                 | LR__3092
26c84     08 36 16 F4 | 	testb	local09, #8 wc
26c88     09 36 76 F4 | 	testbn	local09, #9 andc
26c8c     0A 36 46 F0 | 	shr	local09, #10
26c90     01 34 06 C6 |  if_b	mov	local08, #1
26c94     40 7E 6C 3D |  if_ae	testp	#63 wz
26c98     01 34 06 26 |  if_nc_and_z	mov	local08, #1
26c9c     3F 36 8E 2A |  if_nc_and_z	rdpin	local09, #63
26ca0     04 36 46 20 |  if_nc_and_z	shr	local09, #4
26ca4                 | LR__3093
26ca4     00 28 06 F6 | 	mov	local02, #0
26ca8     00 34 0E F2 | 	cmp	local08, #0 wz
26cac     01 28 66 56 |  if_ne	neg	local02, #1
26cb0     00 38 06 F6 | 	mov	local10, #0
26cb4     00 2A 06 F6 | 	mov	local03, #0
26cb8     00 26 0E F2 | 	cmp	local01, #0 wz
26cbc     01 2A 66 56 |  if_ne	neg	local03, #1
26cc0     00 2C 06 F6 | 	mov	local04, #0
26cc4     00 3A 06 F6 | 	mov	local11, #0
26cc8     17 3D 02 F6 | 	mov	local12, local05
26ccc     1A FA 61 FD | 	getct	result1
26cd0     FD 3E 02 F6 | 	mov	local13, result1
26cd4     1F 3D 82 F1 | 	sub	local12, local13
26cd8     00 3C 56 F2 | 	cmps	local12, #0 wc
26cdc     00 3A 26 C6 |  if_b	not	local11, #0
26ce0     00 3A 0E F2 | 	cmp	local11, #0 wz
26ce4     00 2C 26 56 |  if_ne	not	local04, #0
26ce8     16 2B CA F7 | 	test	local03, local04 wz
26cec     00 38 26 56 |  if_ne	not	local10, #0
26cf0     1C 29 4A F5 | 	or	local02, local10 wz
26cf4     8C FF 9F AD |  if_e	jmp	#LR__3092
26cf8     00 34 0E F2 | 	cmp	local08, #0 wz
26cfc     1B 31 02 56 |  if_ne	mov	local06, local09
26d00     18 31 E2 58 |  if_ne	getbyte	local06, local06, #0
26d04     04 E6 05 F1 | 	add	ptr___system__dat__, #4
26d08     F3 36 62 FC | 	wrlong	local09, ptr___system__dat__
26d0c     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
26d10     18 FB 01 F6 | 	mov	result1, local06
26d14     A7 F0 03 F6 | 	mov	ptra, fp
26d18     B2 00 A0 FD | 	call	#popregs_
26d1c                 | __system___rxraw_ret
26d1c     2D 00 64 FD | 	ret
26d20                 | 
26d20                 | __system___getus
26d20     1A FC 71 FD | 	getct	result2 wc
26d24     1A 00 62 FD | 	getct	_var01
26d28     10 E6 05 F1 | 	add	ptr___system__dat__, #16
26d2c     F3 02 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
26d30     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
26d34     20 00 90 5D |  if_ne	jmp	#LR__3100
26d38     14 02 06 FB | 	rdlong	_var02, #20
26d3c     A1 07 00 FF 
26d40     40 02 16 FD | 	qdiv	_var02, ##1000000
26d44     10 E6 05 F1 | 	add	ptr___system__dat__, #16
26d48     18 FA 61 FD | 	getqx	result1
26d4c     FD 02 02 F6 | 	mov	_var02, result1
26d50     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
26d54     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
26d58                 | LR__3100
26d58     01 FD 11 FD | 	qdiv	result2, _var02
26d5c     19 FC 61 FD | 	getqy	result2
26d60     28 FC 61 FD | 	setq	result2
26d64     01 01 12 FD | 	qdiv	_var01, _var02
26d68     18 FA 61 FD | 	getqx	result1
26d6c                 | __system___getus_ret
26d6c     2D 00 64 FD | 	ret
26d70                 | 
26d70                 | __system____builtin_memmove
26d70     09 01 02 F6 | 	mov	_var01, arg01
26d74     0A 13 52 F2 | 	cmps	arg01, arg02 wc
26d78     10 00 90 CD |  if_b	jmp	#LR__3110
26d7c     0A 03 02 F6 | 	mov	_var02, arg02
26d80     0B 03 02 F1 | 	add	_var02, arg03
26d84     01 13 52 F2 | 	cmps	arg01, _var02 wc
26d88     48 00 90 CD |  if_b	jmp	#LR__3116
26d8c                 | LR__3110
26d8c     0B 05 02 F6 | 	mov	_var03, arg03
26d90     02 04 4E F0 | 	shr	_var03, #2 wz
26d94     18 00 90 AD |  if_e	jmp	#LR__3115
26d98     97 0A 48 FB | 	callpa	#(@LR__3113-@LR__3111)>>2,fcache_load_ptr_
26d9c                 | LR__3111
26d9c     02 09 D8 FC | 	rep	@LR__3114, _var03
26da0                 | LR__3112
26da0     0A 05 02 FB | 	rdlong	_var03, arg02
26da4     09 05 62 FC | 	wrlong	_var03, arg01
26da8     04 12 06 F1 | 	add	arg01, #4
26dac     04 14 06 F1 | 	add	arg02, #4
26db0                 | LR__3113
26db0                 | LR__3114
26db0                 | LR__3115
26db0     02 16 CE F7 | 	test	arg03, #2 wz
26db4     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
26db8     09 03 52 5C |  if_ne	wrword	_var02, arg01
26dbc     02 12 06 51 |  if_ne	add	arg01, #2
26dc0     02 14 06 51 |  if_ne	add	arg02, #2
26dc4     01 16 CE F7 | 	test	arg03, #1 wz
26dc8     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
26dcc     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
26dd0     28 00 90 FD | 	jmp	#LR__3122
26dd4                 | LR__3116
26dd4     0B 13 02 F1 | 	add	arg01, arg03
26dd8     0B 15 02 F1 | 	add	arg02, arg03
26ddc     0B 07 0A F6 | 	mov	_var04, arg03 wz
26de0     18 00 90 AD |  if_e	jmp	#LR__3121
26de4     97 0A 48 FB | 	callpa	#(@LR__3119-@LR__3117)>>2,fcache_load_ptr_
26de8                 | LR__3117
26de8     03 09 D8 FC | 	rep	@LR__3120, _var04
26dec                 | LR__3118
26dec     01 12 86 F1 | 	sub	arg01, #1
26df0     01 14 86 F1 | 	sub	arg02, #1
26df4     0A 03 C2 FA | 	rdbyte	_var02, arg02
26df8     09 03 42 FC | 	wrbyte	_var02, arg01
26dfc                 | LR__3119
26dfc                 | LR__3120
26dfc                 | LR__3121
26dfc                 | LR__3122
26dfc     00 FB 01 F6 | 	mov	result1, _var01
26e00                 | __system____builtin_memmove_ret
26e00     2D 00 64 FD | 	ret
26e04                 | 
26e04                 | __system____builtin_strcpy
26e04     09 01 02 F6 | 	mov	_var01, arg01
26e08     97 0A 48 FB | 	callpa	#(@LR__3131-@LR__3130)>>2,fcache_load_ptr_
26e0c                 | LR__3130
26e0c     0A FB C9 FA | 	rdbyte	result1, arg02 wz
26e10     09 FB 41 FC | 	wrbyte	result1, arg01
26e14     01 14 06 F1 | 	add	arg02, #1
26e18     01 12 06 F1 | 	add	arg01, #1
26e1c     EC FF 9F 5D |  if_ne	jmp	#LR__3130
26e20                 | LR__3131
26e20     00 FB 01 F6 | 	mov	result1, _var01
26e24                 | __system____builtin_strcpy_ret
26e24     2D 00 64 FD | 	ret
26e28                 | 
26e28                 | __system____topofstack
26e28     00 4A 05 F6 | 	mov	COUNT_, #0
26e2c     A8 00 A0 FD | 	call	#pushregs_
26e30     08 F0 07 F1 | 	add	ptra, #8
26e34     04 4E 05 F1 | 	add	fp, #4
26e38     A7 12 62 FC | 	wrlong	arg01, fp
26e3c     A7 FA 01 F6 | 	mov	result1, fp
26e40     04 4E 85 F1 | 	sub	fp, #4
26e44     A7 F0 03 F6 | 	mov	ptra, fp
26e48     B2 00 A0 FD | 	call	#popregs_
26e4c                 | __system____topofstack_ret
26e4c     2D 00 64 FD | 	ret
26e50                 | 
26e50                 | __system___lockmem
26e50     00 FA 05 F6 | 	mov	result1, #0
26e54     01 FA 61 FD | 	cogid	result1
26e58     00 FB 05 F1 | 	add	result1, #256
26e5c                 | LR__3140
26e5c     09 01 0A FB | 	rdlong	_var01, arg01 wz
26e60     09 FB 61 AC |  if_e	wrlong	result1, arg01
26e64     09 01 02 AB |  if_e	rdlong	_var01, arg01
26e68     09 01 02 AB |  if_e	rdlong	_var01, arg01
26e6c     FD 00 0A F2 | 	cmp	_var01, result1 wz
26e70     E8 FF 9F 5D |  if_ne	jmp	#LR__3140
26e74                 | __system___lockmem_ret
26e74     2D 00 64 FD | 	ret
26e78                 | 
26e78                 | __system___string_cmp
26e78     97 14 48 FB | 	callpa	#(@LR__3151-@LR__3150)>>2,fcache_load_ptr_
26e7c                 | LR__3150
26e7c     09 01 C2 FA | 	rdbyte	_var01, arg01
26e80     0A 03 C2 FA | 	rdbyte	_var02, arg02
26e84     00 05 02 F6 | 	mov	_var03, _var01
26e88     01 05 8A F1 | 	sub	_var03, _var02 wz
26e8c     01 12 06 F1 | 	add	arg01, #1
26e90     01 14 06 F1 | 	add	arg02, #1
26e94     0C 00 90 5D |  if_ne	jmp	#LR__3152
26e98     00 00 0E F2 | 	cmp	_var01, #0 wz
26e9c     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
26ea0     D8 FF 9F 5D |  if_ne	jmp	#LR__3150
26ea4                 | LR__3151
26ea4                 | LR__3152
26ea4     02 FB 01 F6 | 	mov	result1, _var03
26ea8                 | __system___string_cmp_ret
26ea8     2D 00 64 FD | 	ret
26eac                 | 
26eac                 | __system___string_concat
26eac     05 4A 05 F6 | 	mov	COUNT_, #5
26eb0     A8 00 A0 FD | 	call	#pushregs_
26eb4     09 27 02 F6 | 	mov	local01, arg01
26eb8     0A 29 02 F6 | 	mov	local02, arg02
26ebc     13 13 02 F6 | 	mov	arg01, local01
26ec0     09 2B 02 F6 | 	mov	local03, arg01
26ec4     97 06 48 FB | 	callpa	#(@LR__3161-@LR__3160)>>2,fcache_load_ptr_
26ec8                 | LR__3160
26ec8     15 FB C9 FA | 	rdbyte	result1, local03 wz
26ecc     01 2A 06 51 |  if_ne	add	local03, #1
26ed0     F4 FF 9F 5D |  if_ne	jmp	#LR__3160
26ed4                 | LR__3161
26ed4     09 2B 82 F1 | 	sub	local03, arg01
26ed8     15 2D 02 F6 | 	mov	local04, local03
26edc     14 13 02 F6 | 	mov	arg01, local02
26ee0     09 2B 02 F6 | 	mov	local03, arg01
26ee4     97 06 48 FB | 	callpa	#(@LR__3163-@LR__3162)>>2,fcache_load_ptr_
26ee8                 | LR__3162
26ee8     15 FB C9 FA | 	rdbyte	result1, local03 wz
26eec     01 2A 06 51 |  if_ne	add	local03, #1
26ef0     F4 FF 9F 5D |  if_ne	jmp	#LR__3162
26ef4                 | LR__3163
26ef4     09 2B 82 F1 | 	sub	local03, arg01
26ef8     16 13 02 F6 | 	mov	arg01, local04
26efc     15 13 02 F1 | 	add	arg01, local03
26f00     01 12 06 F1 | 	add	arg01, #1
26f04     E8 40 B0 FD | 	call	#__system___gc_alloc_managed
26f08     FD 2E 0A F6 | 	mov	local05, result1 wz
26f0c     28 00 90 AD |  if_e	jmp	#LR__3164
26f10     17 13 02 F6 | 	mov	arg01, local05
26f14     13 15 02 F6 | 	mov	arg02, local01
26f18     16 17 02 F6 | 	mov	arg03, local04
26f1c     50 FE BF FD | 	call	#__system____builtin_memmove
26f20     17 13 02 F6 | 	mov	arg01, local05
26f24     16 13 02 F1 | 	add	arg01, local04
26f28     01 2A 06 F1 | 	add	local03, #1
26f2c     14 15 02 F6 | 	mov	arg02, local02
26f30     15 17 02 F6 | 	mov	arg03, local03
26f34     38 FE BF FD | 	call	#__system____builtin_memmove
26f38                 | LR__3164
26f38     17 FB 01 F6 | 	mov	result1, local05
26f3c     A7 F0 03 F6 | 	mov	ptra, fp
26f40     B2 00 A0 FD | 	call	#popregs_
26f44                 | __system___string_concat_ret
26f44     2D 00 64 FD | 	ret
26f48                 | 
26f48                 | __system___tx
26f48     02 4A 05 F6 | 	mov	COUNT_, #2
26f4c     A8 00 A0 FD | 	call	#pushregs_
26f50     09 27 02 F6 | 	mov	local01, arg01
26f54     0A 26 0E F2 | 	cmp	local01, #10 wz
26f58     18 00 90 5D |  if_ne	jmp	#LR__3170
26f5c     08 E6 05 F1 | 	add	ptr___system__dat__, #8
26f60     F3 28 02 FB | 	rdlong	local02, ptr___system__dat__
26f64     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
26f68     02 28 CE F7 | 	test	local02, #2 wz
26f6c     0D 12 06 56 |  if_ne	mov	arg01, #13
26f70     6C FC BF 5D |  if_ne	call	#__system___txraw
26f74                 | LR__3170
26f74     13 13 02 F6 | 	mov	arg01, local01
26f78     64 FC BF FD | 	call	#__system___txraw
26f7c     A7 F0 03 F6 | 	mov	ptra, fp
26f80     B2 00 A0 FD | 	call	#popregs_
26f84                 | __system___tx_ret
26f84     2D 00 64 FD | 	ret
26f88                 | 
26f88                 | __system___rx
26f88     01 4A 05 F6 | 	mov	COUNT_, #1
26f8c     A8 00 A0 FD | 	call	#pushregs_
26f90                 | LR__3180
26f90     00 12 06 F6 | 	mov	arg01, #0
26f94     8C FC BF FD | 	call	#__system___rxraw
26f98     FD 26 02 F6 | 	mov	local01, result1
26f9c     FF FF 7F FF 
26fa0     FF 27 0E F2 | 	cmp	local01, ##-1 wz
26fa4     E8 FF 9F AD |  if_e	jmp	#LR__3180
26fa8     0D 26 0E F2 | 	cmp	local01, #13 wz
26fac     14 00 90 5D |  if_ne	jmp	#LR__3181
26fb0     08 E6 05 F1 | 	add	ptr___system__dat__, #8
26fb4     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
26fb8     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
26fbc     02 FA CD F7 | 	test	result1, #2 wz
26fc0     0A 26 06 56 |  if_ne	mov	local01, #10
26fc4                 | LR__3181
26fc4     08 E6 05 F1 | 	add	ptr___system__dat__, #8
26fc8     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
26fcc     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
26fd0     01 12 CE F7 | 	test	arg01, #1 wz
26fd4     1C 00 90 AD |  if_e	jmp	#LR__3184
26fd8     7F 26 0E F2 | 	cmp	local01, #127 wz
26fdc     0C 00 90 5D |  if_ne	jmp	#LR__3182
26fe0     08 12 06 F6 | 	mov	arg01, #8
26fe4     60 FF BF FD | 	call	#__system___tx
26fe8     08 00 90 FD | 	jmp	#LR__3183
26fec                 | LR__3182
26fec     13 13 02 F6 | 	mov	arg01, local01
26ff0     54 FF BF FD | 	call	#__system___tx
26ff4                 | LR__3183
26ff4                 | LR__3184
26ff4     13 FB 01 F6 | 	mov	result1, local01
26ff8     A7 F0 03 F6 | 	mov	ptra, fp
26ffc     B2 00 A0 FD | 	call	#popregs_
27000                 | __system___rx_ret
27000     2D 00 64 FD | 	ret
27004                 | 
27004                 | __system___pinwrite
27004     09 01 02 F6 | 	mov	_var01, arg01
27008     1F 00 06 F5 | 	and	_var01, #31
2700c     20 12 CE F7 | 	test	arg01, #32 wz
27010     06 12 46 F0 | 	shr	arg01, #6
27014     09 13 CA F9 | 	bmask	arg01, arg01
27018     00 13 62 F0 | 	shl	arg01, _var01
2701c     00 15 62 F0 | 	shl	arg02, _var01
27020     1C 00 90 AD |  if_e	jmp	#LR__3190
27024     09 F7 43 F5 | 	or	dirb, arg01
27028     FD 01 02 F6 | 	mov	_var01, outb
2702c     09 01 22 F5 | 	andn	_var01, arg01
27030     09 15 02 F5 | 	and	arg02, arg01
27034     0A 01 42 F5 | 	or	_var01, arg02
27038     00 FB 03 F6 | 	mov	outb, _var01
2703c     18 00 90 FD | 	jmp	#LR__3191
27040                 | LR__3190
27040     09 F5 43 F5 | 	or	dira, arg01
27044     FC 01 02 F6 | 	mov	_var01, outa
27048     09 01 22 F5 | 	andn	_var01, arg01
2704c     09 15 02 F5 | 	and	arg02, arg01
27050     0A 01 42 F5 | 	or	_var01, arg02
27054     00 F9 03 F6 | 	mov	outa, _var01
27058                 | LR__3191
27058                 | __system___pinwrite_ret
27058     2D 00 64 FD | 	ret
2705c                 | 
2705c                 | __system___basic_read_line
2705c     06 4A 05 F6 | 	mov	COUNT_, #6
27060     A8 00 A0 FD | 	call	#pushregs_
27064     09 27 02 F6 | 	mov	local01, arg01
27068     00 28 06 F6 | 	mov	local02, #0
2706c     18 2A 06 F6 | 	mov	local03, #24
27070     00 2C 06 F6 | 	mov	local04, #0
27074     18 12 06 F6 | 	mov	arg01, #24
27078     74 3F B0 FD | 	call	#__system___gc_alloc_managed
2707c     FD 2E 0A F6 | 	mov	local05, result1 wz
27080     17 FB 01 A6 |  if_e	mov	result1, local05
27084     B0 00 90 AD |  if_e	jmp	#LR__3203
27088                 | LR__3200
27088     13 13 02 F6 | 	mov	arg01, local01
2708c     78 0B B0 FD | 	call	#__system___basic_get_char
27090     FD 30 02 F6 | 	mov	local06, result1
27094     01 30 56 F2 | 	cmps	local06, #1 wc
27098     8C 00 90 CD |  if_b	jmp	#LR__3202
2709c     0A 30 0E F2 | 	cmp	local06, #10 wz
270a0     10 00 90 5D |  if_ne	jmp	#LR__3201
270a4     00 2C 0E F2 | 	cmp	local04, #0 wz
270a8     01 28 56 52 |  if_ne	cmps	local02, #1 wc
270ac     01 28 86 11 |  if_a	sub	local02, #1
270b0     74 00 90 FD | 	jmp	#LR__3202
270b4                 | LR__3201
270b4     0D 30 0E F2 | 	cmp	local06, #13 wz
270b8     01 2C 06 A6 |  if_e	mov	local04, #1
270bc     00 2C 06 56 |  if_ne	mov	local04, #0
270c0     08 30 0E F2 | 	cmp	local06, #8 wz
270c4     7F 30 0E 52 |  if_ne	cmp	local06, #127 wz
270c8     01 28 56 A2 |  if_e	cmps	local02, #1 wc
270cc     01 28 86 21 |  if_nc_and_z	sub	local02, #1
270d0     B4 FF 9F AD |  if_e	jmp	#LR__3200
270d4     17 17 02 F6 | 	mov	arg03, local05
270d8     14 17 02 F1 | 	add	arg03, local02
270dc     0B 31 42 FC | 	wrbyte	local06, arg03
270e0     01 28 06 F1 | 	add	local02, #1
270e4     15 29 0A F2 | 	cmp	local02, local03 wz
270e8     9C FF 9F 5D |  if_ne	jmp	#LR__3200
270ec     15 13 02 F6 | 	mov	arg01, local03
270f0     20 12 06 F1 | 	add	arg01, #32
270f4     F8 3E B0 FD | 	call	#__system___gc_alloc_managed
270f8     FD 30 0A F6 | 	mov	local06, result1 wz
270fc     18 FB 01 A6 |  if_e	mov	result1, local06
27100     34 00 90 AD |  if_e	jmp	#LR__3203
27104     18 13 02 F6 | 	mov	arg01, local06
27108     17 15 02 F6 | 	mov	arg02, local05
2710c     15 17 02 F6 | 	mov	arg03, local03
27110     5C FC BF FD | 	call	#__system____builtin_memmove
27114     20 2A 06 F1 | 	add	local03, #32
27118     17 13 02 F6 | 	mov	arg01, local05
2711c     0C 40 B0 FD | 	call	#__system___gc_free
27120     18 2F 02 F6 | 	mov	local05, local06
27124     60 FF 9F FD | 	jmp	#LR__3200
27128                 | LR__3202
27128     17 31 02 F6 | 	mov	local06, local05
2712c     14 31 02 F1 | 	add	local06, local02
27130     18 01 48 FC | 	wrbyte	#0, local06
27134     17 FB 01 F6 | 	mov	result1, local05
27138                 | LR__3203
27138     A7 F0 03 F6 | 	mov	ptra, fp
2713c     B2 00 A0 FD | 	call	#popregs_
27140                 | __system___basic_read_line_ret
27140     2D 00 64 FD | 	ret
27144                 | 
27144                 | __system___waitms
27144     09 01 02 F6 | 	mov	_var01, arg01
27148     1A 02 62 FD | 	getct	_var02
2714c     14 04 06 FB | 	rdlong	_var03, #20
27150     97 14 48 FB | 	callpa	#(@LR__3211-@LR__3210)>>2,fcache_load_ptr_
27154                 | LR__3210
27154     01 00 00 FF 
27158     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
2715c     1C 00 90 CD |  if_b	jmp	#LR__3212
27160     02 03 02 F1 | 	add	_var02, _var03
27164     01 13 02 F6 | 	mov	arg01, _var02
27168     00 12 66 FA | 	addct1	arg01, #0
2716c     24 22 60 FD | 	waitct1
27170     01 00 00 FF 
27174     E8 01 86 F1 | 	sub	_var01, ##1000
27178     D8 FF 9F FD | 	jmp	#LR__3210
2717c                 | LR__3211
2717c                 | LR__3212
2717c     01 00 56 F2 | 	cmps	_var01, #1 wc
27180     28 00 90 CD |  if_b	jmp	#LR__3213
27184     02 01 02 FD | 	qmul	_var01, _var03
27188     01 00 00 FF 
2718c     E8 17 06 F6 | 	mov	arg03, ##1000
27190     19 FA 61 FD | 	getqy	result1
27194     18 12 62 FD | 	getqx	arg01
27198     28 FA 61 FD | 	setq	result1
2719c     0B 13 12 FD | 	qdiv	arg01, arg03
271a0     18 12 62 FD | 	getqx	arg01
271a4     01 13 62 FA | 	addct1	arg01, _var02
271a8     24 22 60 FD | 	waitct1
271ac                 | LR__3213
271ac                 | __system___waitms_ret
271ac     2D 00 64 FD | 	ret
271b0                 | 
271b0                 | __system___waitus
271b0     09 01 02 F6 | 	mov	_var01, arg01
271b4     1A 02 62 FD | 	getct	_var02
271b8     14 04 06 FB | 	rdlong	_var03, #20
271bc     97 14 48 FB | 	callpa	#(@LR__3221-@LR__3220)>>2,fcache_load_ptr_
271c0                 | LR__3220
271c0     A1 07 00 FF 
271c4     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
271c8     1C 00 90 CD |  if_b	jmp	#LR__3222
271cc     02 03 02 F1 | 	add	_var02, _var03
271d0     01 13 02 F6 | 	mov	arg01, _var02
271d4     00 12 66 FA | 	addct1	arg01, #0
271d8     24 22 60 FD | 	waitct1
271dc     A1 07 00 FF 
271e0     40 00 86 F1 | 	sub	_var01, ##1000000
271e4     D8 FF 9F FD | 	jmp	#LR__3220
271e8                 | LR__3221
271e8                 | LR__3222
271e8     01 00 56 F2 | 	cmps	_var01, #1 wc
271ec     28 00 90 CD |  if_b	jmp	#LR__3223
271f0     02 01 02 FD | 	qmul	_var01, _var03
271f4     A1 07 00 FF 
271f8     40 16 06 F6 | 	mov	arg03, ##1000000
271fc     19 FA 61 FD | 	getqy	result1
27200     18 12 62 FD | 	getqx	arg01
27204     28 FA 61 FD | 	setq	result1
27208     0B 13 12 FD | 	qdiv	arg01, arg03
2720c     18 FA 61 FD | 	getqx	result1
27210     FD 02 62 FA | 	addct1	_var02, result1
27214     24 22 60 FD | 	waitct1
27218                 | LR__3223
27218                 | __system___waitus_ret
27218     2D 00 64 FD | 	ret
2721c                 | 
2721c                 | __system___mount
2721c     0B 4A 05 F6 | 	mov	COUNT_, #11
27220     A8 00 A0 FD | 	call	#pushregs_
27224     09 27 02 F6 | 	mov	local01, arg01
27228     0A 29 0A F6 | 	mov	local02, arg02 wz
2722c     01 2A 66 F6 | 	neg	local03, #1
27230     01 FA 65 A6 |  if_e	neg	result1, #1
27234     98 02 90 AD |  if_e	jmp	#LR__3245
27238     13 FB C1 FA | 	rdbyte	result1, local01
2723c     2F FA 0D F2 | 	cmp	result1, #47 wz
27240     28 00 90 5D |  if_ne	jmp	#LR__3232
27244     13 13 02 F6 | 	mov	arg01, local01
27248     09 2D 02 F6 | 	mov	local04, arg01
2724c     97 06 48 FB | 	callpa	#(@LR__3231-@LR__3230)>>2,fcache_load_ptr_
27250                 | LR__3230
27250     16 FB C9 FA | 	rdbyte	result1, local04 wz
27254     01 2C 06 51 |  if_ne	add	local04, #1
27258     F4 FF 9F 5D |  if_ne	jmp	#LR__3230
2725c                 | LR__3231
2725c     09 2D 82 F1 | 	sub	local04, arg01
27260     16 FB 01 F6 | 	mov	result1, local04
27264     10 FA 55 F2 | 	cmps	result1, #16 wc
27268     14 00 90 CD |  if_b	jmp	#LR__3233
2726c                 | LR__3232
2726c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
27270     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
27274     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
27278     01 FA 65 F6 | 	neg	result1, #1
2727c     50 02 90 FD | 	jmp	#LR__3245
27280                 | LR__3233
27280     00 2E 06 F6 | 	mov	local05, #0
27284                 | LR__3234
27284     04 2E 56 F2 | 	cmps	local05, #4 wc
27288     B0 00 90 3D |  if_ae	jmp	#LR__3239
2728c     17 13 02 F6 | 	mov	arg01, local05
27290     02 12 66 F0 | 	shl	arg01, #2
27294     64 E6 05 F1 | 	add	ptr___system__dat__, #100
27298     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2729c     09 FB 09 FB | 	rdlong	result1, arg01 wz
272a0     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
272a4     00 2A 56 A2 |  if_e	cmps	local03, #0 wc
272a8     17 2B 02 86 |  if_c_and_z	mov	local03, local05
272ac     84 00 90 8D |  if_c_and_z	jmp	#LR__3238
272b0     17 13 02 F6 | 	mov	arg01, local05
272b4     02 12 66 F0 | 	shl	arg01, #2
272b8     64 E6 05 F1 | 	add	ptr___system__dat__, #100
272bc     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
272c0     09 13 02 FB | 	rdlong	arg01, arg01
272c4     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
272c8     09 2D 02 F6 | 	mov	local04, arg01
272cc     97 06 48 FB | 	callpa	#(@LR__3236-@LR__3235)>>2,fcache_load_ptr_
272d0                 | LR__3235
272d0     16 FB C9 FA | 	rdbyte	result1, local04 wz
272d4     01 2C 06 51 |  if_ne	add	local04, #1
272d8     F4 FF 9F 5D |  if_ne	jmp	#LR__3235
272dc                 | LR__3236
272dc     09 2D 82 F1 | 	sub	local04, arg01
272e0     16 31 02 F6 | 	mov	local06, local04
272e4     18 13 02 F6 | 	mov	arg01, local06
272e8     13 13 02 F1 | 	add	arg01, local01
272ec     09 FB C1 FA | 	rdbyte	result1, arg01
272f0     2F FA 0D F2 | 	cmp	result1, #47 wz
272f4     18 33 02 56 |  if_ne	mov	local07, local06
272f8     13 33 02 51 |  if_ne	add	local07, local01
272fc     19 13 CA 5A |  if_ne	rdbyte	arg01, local07 wz
27300     30 00 90 5D |  if_ne	jmp	#LR__3237
27304     17 17 02 F6 | 	mov	arg03, local05
27308     02 16 66 F0 | 	shl	arg03, #2
2730c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
27310     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
27314     0B 15 02 FB | 	rdlong	arg02, arg03
27318     13 13 02 F6 | 	mov	arg01, local01
2731c     18 17 02 F6 | 	mov	arg03, local06
27320     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
27324     48 51 B0 FD | 	call	#__system__strncmp
27328     00 FA 0D F2 | 	cmp	result1, #0 wz
2732c     17 2B 02 A6 |  if_e	mov	local03, local05
27330     08 00 90 AD |  if_e	jmp	#LR__3239
27334                 | LR__3237
27334                 | LR__3238
27334     01 2E 06 F1 | 	add	local05, #1
27338     48 FF 9F FD | 	jmp	#LR__3234
2733c                 | LR__3239
2733c     FF FF 7F FF 
27340     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
27344     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
27348     F3 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
2734c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
27350     01 FA 65 A6 |  if_e	neg	result1, #1
27354     78 01 90 AD |  if_e	jmp	#LR__3245
27358     15 2F 02 F6 | 	mov	local05, local03
2735c     17 33 02 F6 | 	mov	local07, local05
27360     02 32 66 F0 | 	shl	local07, #2
27364     74 E6 05 F1 | 	add	ptr___system__dat__, #116
27368     F3 32 02 F1 | 	add	local07, ptr___system__dat__
2736c     19 31 0A FB | 	rdlong	local06, local07 wz
27370     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
27374     58 00 90 AD |  if_e	jmp	#LR__3240
27378     4C 30 06 F1 | 	add	local06, #76
2737c     18 33 0A FB | 	rdlong	local07, local06 wz
27380     4C 30 86 F1 | 	sub	local06, #76
27384     48 00 90 AD |  if_e	jmp	#LR__3240
27388     4C 30 06 F1 | 	add	local06, #76
2738c     18 33 02 FB | 	rdlong	local07, local06
27390     19 2B 02 F6 | 	mov	local03, local07
27394     13 32 46 F7 | 	zerox	local07, #19
27398     14 2A 46 F0 | 	shr	local03, #20
2739c     02 2A 66 F0 | 	shl	local03, #2
273a0     ED 2A 02 F1 | 	add	local03, __methods__
273a4     15 2B 02 FB | 	rdlong	local03, local03
273a8     17 31 02 F6 | 	mov	local06, local05
273ac     02 30 66 F0 | 	shl	local06, #2
273b0     64 E6 05 F1 | 	add	ptr___system__dat__, #100
273b4     F3 30 02 F1 | 	add	local06, ptr___system__dat__
273b8     18 13 02 FB | 	rdlong	arg01, local06
273bc     F2 30 02 F6 | 	mov	local06, objptr
273c0     19 E5 01 F6 | 	mov	objptr, local07
273c4     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
273c8     2D 2A 62 FD | 	call	local03
273cc     18 E5 01 F6 | 	mov	objptr, local06
273d0                 | LR__3240
273d0     17 35 02 F6 | 	mov	local08, local05
273d4     02 34 66 F0 | 	shl	local08, #2
273d8     74 E6 05 F1 | 	add	ptr___system__dat__, #116
273dc     F3 34 02 F1 | 	add	local08, ptr___system__dat__
273e0     1A 29 62 FC | 	wrlong	local02, local08
273e4     00 28 0E F2 | 	cmp	local02, #0 wz
273e8     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
273ec     18 00 90 5D |  if_ne	jmp	#LR__3241
273f0     02 2E 66 F0 | 	shl	local05, #2
273f4     64 E6 05 F1 | 	add	ptr___system__dat__, #100
273f8     F3 2E 02 F1 | 	add	local05, ptr___system__dat__
273fc     17 01 68 FC | 	wrlong	#0, local05
27400     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
27404     C4 00 90 FD | 	jmp	#LR__3244
27408                 | LR__3241
27408     17 37 02 F6 | 	mov	local09, local05
2740c     04 36 66 F0 | 	shl	local09, #4
27410     24 E6 05 F1 | 	add	ptr___system__dat__, #36
27414     F3 36 02 F1 | 	add	local09, ptr___system__dat__
27418     1B 13 02 F6 | 	mov	arg01, local09
2741c     13 15 02 F6 | 	mov	arg02, local01
27420     10 16 06 F6 | 	mov	arg03, #16
27424     24 E6 85 F1 | 	sub	ptr___system__dat__, #36
27428     98 4F B0 FD | 	call	#__system__strncpy
2742c     48 28 06 F1 | 	add	local02, #72
27430     14 35 0A FB | 	rdlong	local08, local02 wz
27434     48 28 86 F1 | 	sub	local02, #72
27438     7C 00 90 AD |  if_e	jmp	#LR__3243
2743c     48 28 06 F1 | 	add	local02, #72
27440     14 35 02 FB | 	rdlong	local08, local02
27444     1A 39 02 F6 | 	mov	local10, local08
27448     13 34 46 F7 | 	zerox	local08, #19
2744c     14 38 46 F0 | 	shr	local10, #20
27450     02 38 66 F0 | 	shl	local10, #2
27454     ED 38 02 F1 | 	add	local10, __methods__
27458     1C 39 02 FB | 	rdlong	local10, local10
2745c     1B 13 02 F6 | 	mov	arg01, local09
27460     F2 3A 02 F6 | 	mov	local11, objptr
27464     1A E5 01 F6 | 	mov	objptr, local08
27468     2D 38 62 FD | 	call	local10
2746c     1D E5 01 F6 | 	mov	objptr, local11
27470     FD 12 0A F6 | 	mov	arg01, result1 wz
27474     40 00 90 AD |  if_e	jmp	#LR__3242
27478     17 35 02 F6 | 	mov	local08, local05
2747c     02 34 66 F0 | 	shl	local08, #2
27480     74 E6 05 F1 | 	add	ptr___system__dat__, #116
27484     F3 34 02 F1 | 	add	local08, ptr___system__dat__
27488     1A 01 68 FC | 	wrlong	#0, local08
2748c     02 2E 66 F0 | 	shl	local05, #2
27490     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
27494     F3 2E 02 F1 | 	add	local05, ptr___system__dat__
27498     17 01 68 FC | 	wrlong	#0, local05
2749c     09 13 6A F6 | 	neg	arg01, arg01 wz
274a0     44 E6 85 F1 | 	sub	ptr___system__dat__, #68
274a4     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
274a8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
274ac     01 FA 65 56 |  if_ne	neg	result1, #1
274b0     00 FA 05 A6 |  if_e	mov	result1, #0
274b4     18 00 90 FD | 	jmp	#LR__3245
274b8                 | LR__3242
274b8                 | LR__3243
274b8     02 2E 66 F0 | 	shl	local05, #2
274bc     64 E6 05 F1 | 	add	ptr___system__dat__, #100
274c0     F3 2E 02 F1 | 	add	local05, ptr___system__dat__
274c4     17 37 62 FC | 	wrlong	local09, local05
274c8     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
274cc                 | LR__3244
274cc     00 FA 05 F6 | 	mov	result1, #0
274d0                 | LR__3245
274d0     A7 F0 03 F6 | 	mov	ptra, fp
274d4     B2 00 A0 FD | 	call	#popregs_
274d8                 | __system___mount_ret
274d8     2D 00 64 FD | 	ret
274dc                 | 
274dc                 | __system___chdir
274dc     00 4A 05 F6 | 	mov	COUNT_, #0
274e0     A8 00 A0 FD | 	call	#pushregs_
274e4     40 F0 07 F1 | 	add	ptra, #64
274e8     04 4E 05 F1 | 	add	fp, #4
274ec     A7 12 62 FC | 	wrlong	arg01, fp
274f0     04 4E 05 F1 | 	add	fp, #4
274f4     A7 14 02 F6 | 	mov	arg02, fp
274f8     08 4E 85 F1 | 	sub	fp, #8
274fc     68 4B B0 FD | 	call	#__system__stat
27500     3C 4E 05 F1 | 	add	fp, #60
27504     A7 FA 61 FC | 	wrlong	result1, fp
27508     3C 4E 85 F1 | 	sub	fp, #60
2750c     00 FA 0D F2 | 	cmp	result1, #0 wz
27510     3C 4E 05 51 |  if_ne	add	fp, #60
27514     A7 FA 01 5B |  if_ne	rdlong	result1, fp
27518     3C 4E 85 51 |  if_ne	sub	fp, #60
2751c     BC 00 90 5D |  if_ne	jmp	#LR__3252
27520     10 4E 05 F1 | 	add	fp, #16
27524     A7 12 02 FB | 	rdlong	arg01, fp
27528     10 4E 85 F1 | 	sub	fp, #16
2752c     78 00 00 FF 
27530     00 12 06 F5 | 	and	arg01, ##61440
27534     08 00 00 FF 
27538     00 12 0E F2 | 	cmp	arg01, ##4096 wz
2753c     20 E6 05 51 |  if_ne	add	ptr___system__dat__, #32
27540     F3 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
27544     20 E6 85 51 |  if_ne	sub	ptr___system__dat__, #32
27548     01 FA 65 56 |  if_ne	neg	result1, #1
2754c     8C 00 90 5D |  if_ne	jmp	#LR__3252
27550     04 4E 05 F1 | 	add	fp, #4
27554     A7 16 02 FB | 	rdlong	arg03, fp
27558     04 4E 85 F1 | 	sub	fp, #4
2755c     0B 17 C2 FA | 	rdbyte	arg03, arg03
27560     2F 16 0E F2 | 	cmp	arg03, #47 wz
27564     24 00 90 5D |  if_ne	jmp	#LR__3250
27568     84 E6 05 F1 | 	add	ptr___system__dat__, #132
2756c     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
27570     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
27574     04 4E 05 F1 | 	add	fp, #4
27578     A7 14 02 FB | 	rdlong	arg02, fp
2757c     04 4E 85 F1 | 	sub	fp, #4
27580     00 17 06 F6 | 	mov	arg03, #256
27584     3C 4E B0 FD | 	call	#__system__strncpy
27588     4C 00 90 FD | 	jmp	#LR__3251
2758c                 | LR__3250
2758c     84 E7 05 F1 | 	add	ptr___system__dat__, #388
27590     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
27594     38 4E 05 F1 | 	add	fp, #56
27598     A7 12 62 FC | 	wrlong	arg01, fp
2759c     38 4E 85 F1 | 	sub	fp, #56
275a0     00 E7 85 F1 | 	sub	ptr___system__dat__, #256
275a4     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
275a8     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
275ac     00 17 06 F6 | 	mov	arg03, #256
275b0     10 4E B0 FD | 	call	#__system__strncpy
275b4     38 4E 05 F1 | 	add	fp, #56
275b8     A7 12 02 FB | 	rdlong	arg01, fp
275bc     34 4E 85 F1 | 	sub	fp, #52
275c0     A7 14 02 FB | 	rdlong	arg02, fp
275c4     04 4E 85 F1 | 	sub	fp, #4
275c8     84 E6 05 F1 | 	add	ptr___system__dat__, #132
275cc     F3 16 02 F6 | 	mov	arg03, ptr___system__dat__
275d0     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
275d4     10 00 B0 FD | 	call	#__system____getvfsforfile
275d8                 | LR__3251
275d8     00 FA 05 F6 | 	mov	result1, #0
275dc                 | LR__3252
275dc     A7 F0 03 F6 | 	mov	ptra, fp
275e0     B2 00 A0 FD | 	call	#popregs_
275e4                 | __system___chdir_ret
275e4     2D 00 64 FD | 	ret
275e8                 | 
275e8                 | __system____getvfsforfile
275e8     0E 4A 05 F6 | 	mov	COUNT_, #14
275ec     A8 00 A0 FD | 	call	#pushregs_
275f0     09 27 02 F6 | 	mov	local01, arg01
275f4     0A 29 02 F6 | 	mov	local02, arg02
275f8     0B 2B 02 F6 | 	mov	local03, arg03
275fc     97 10 48 FB | 	callpa	#(@LR__3261-@LR__3260)>>2,fcache_load_ptr_
27600                 | LR__3260
27600     14 FB C1 FA | 	rdbyte	result1, local02
27604     2F FA 0D F2 | 	cmp	result1, #47 wz
27608     01 28 06 A1 |  if_e	add	local02, #1
2760c     14 2D C2 AA |  if_e	rdbyte	local04, local02
27610     01 28 86 A1 |  if_e	sub	local02, #1
27614     2F 2C 0E A2 |  if_e	cmp	local04, #47 wz
27618     01 28 06 A1 |  if_e	add	local02, #1
2761c     E0 FF 9F AD |  if_e	jmp	#LR__3260
27620                 | LR__3261
27620     14 2D C2 FA | 	rdbyte	local04, local02
27624     2F 2C 0E F2 | 	cmp	local04, #47 wz
27628     14 00 90 5D |  if_ne	jmp	#LR__3262
2762c     13 13 02 F6 | 	mov	arg01, local01
27630     14 15 02 F6 | 	mov	arg02, local02
27634     00 17 06 F6 | 	mov	arg03, #256
27638     88 4D B0 FD | 	call	#__system__strncpy
2763c     7C 00 90 FD | 	jmp	#LR__3264
27640                 | LR__3262
27640     84 E6 05 F1 | 	add	ptr___system__dat__, #132
27644     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
27648     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
2764c     13 13 02 F6 | 	mov	arg01, local01
27650     00 17 06 F6 | 	mov	arg03, #256
27654     6C 4D B0 FD | 	call	#__system__strncpy
27658     14 2D CA FA | 	rdbyte	local04, local02 wz
2765c     5C 00 90 AD |  if_e	jmp	#LR__3263
27660     14 2D C2 FA | 	rdbyte	local04, local02
27664     2E 2C 0E F2 | 	cmp	local04, #46 wz
27668     01 28 06 A1 |  if_e	add	local02, #1
2766c     14 2F C2 AA |  if_e	rdbyte	local05, local02
27670     01 28 86 A1 |  if_e	sub	local02, #1
27674     17 31 02 A6 |  if_e	mov	local06, local05
27678     07 30 4E A7 |  if_e	zerox	local06, #7 wz
2767c     3C 00 90 AD |  if_e	jmp	#LR__3263
27680     13 2F C2 FA | 	rdbyte	local05, local01
27684     2F 2E 0E F2 | 	cmp	local05, #47 wz
27688     01 26 06 A1 |  if_e	add	local01, #1
2768c     13 2D C2 AA |  if_e	rdbyte	local04, local01
27690     01 26 86 A1 |  if_e	sub	local01, #1
27694     00 2C 4E A2 |  if_e	cmps	local04, #0 wz
27698     B4 01 00 5F 
2769c     58 15 06 56 |  if_ne	mov	arg02, ##@LR__5390
276a0     13 13 02 56 |  if_ne	mov	arg01, local01
276a4     00 17 06 56 |  if_ne	mov	arg03, #256
276a8     64 4D B0 5D |  if_ne	call	#__system__strncat
276ac     13 13 02 F6 | 	mov	arg01, local01
276b0     14 15 02 F6 | 	mov	arg02, local02
276b4     00 17 06 F6 | 	mov	arg03, #256
276b8     54 4D B0 FD | 	call	#__system__strncat
276bc                 | LR__3263
276bc                 | LR__3264
276bc     13 13 02 F6 | 	mov	arg01, local01
276c0     0C 4F B0 FD | 	call	#__system___normalizeName
276c4     13 2D CA FA | 	rdbyte	local04, local01 wz
276c8     1C 00 90 AD |  if_e	jmp	#LR__3265
276cc     13 2D C2 FA | 	rdbyte	local04, local01
276d0     2F 2C 0E F2 | 	cmp	local04, #47 wz
276d4     01 26 06 A1 |  if_e	add	local01, #1
276d8     13 31 C2 AA |  if_e	rdbyte	local06, local01
276dc     01 26 86 A1 |  if_e	sub	local01, #1
276e0     00 30 4E A2 |  if_e	cmps	local06, #0 wz
276e4     18 00 90 5D |  if_ne	jmp	#LR__3266
276e8                 | LR__3265
276e8     01 00 00 FF 
276ec     84 E6 05 F1 | 	add	ptr___system__dat__, ##644
276f0     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
276f4     01 00 00 FF 
276f8     84 E6 85 F1 | 	sub	ptr___system__dat__, ##644
276fc     EC 01 90 FD | 	jmp	#LR__3280
27700                 | LR__3266
27700     00 32 06 F6 | 	mov	local07, #0
27704                 | LR__3267
27704     04 32 56 F2 | 	cmps	local07, #4 wc
27708     CC 01 90 3D |  if_ae	jmp	#LR__3279
2770c     19 31 02 F6 | 	mov	local06, local07
27710     02 30 66 F0 | 	shl	local06, #2
27714     64 E6 05 F1 | 	add	ptr___system__dat__, #100
27718     F3 30 02 F1 | 	add	local06, ptr___system__dat__
2771c     18 31 0A FB | 	rdlong	local06, local06 wz
27720     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
27724     A8 01 90 AD |  if_e	jmp	#LR__3278
27728     19 2D 02 F6 | 	mov	local04, local07
2772c     02 2C 66 F0 | 	shl	local04, #2
27730     64 E6 05 F1 | 	add	ptr___system__dat__, #100
27734     F3 2C 02 F1 | 	add	local04, ptr___system__dat__
27738     16 13 02 FB | 	rdlong	arg01, local04
2773c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
27740     09 35 02 F6 | 	mov	local08, arg01
27744     97 06 48 FB | 	callpa	#(@LR__3269-@LR__3268)>>2,fcache_load_ptr_
27748                 | LR__3268
27748     1A FB C9 FA | 	rdbyte	result1, local08 wz
2774c     01 34 06 51 |  if_ne	add	local08, #1
27750     F4 FF 9F 5D |  if_ne	jmp	#LR__3268
27754                 | LR__3269
27754     09 35 82 F1 | 	sub	local08, arg01
27758     1A 37 02 F6 | 	mov	local09, local08
2775c     1B 2D 02 F6 | 	mov	local04, local09
27760     13 2D 02 F1 | 	add	local04, local01
27764     16 31 C2 FA | 	rdbyte	local06, local04
27768     2F 30 0E F2 | 	cmp	local06, #47 wz
2776c     1B 39 02 56 |  if_ne	mov	local10, local09
27770     13 39 02 51 |  if_ne	add	local10, local01
27774     1C 2F CA 5A |  if_ne	rdbyte	local05, local10 wz
27778     54 01 90 5D |  if_ne	jmp	#LR__3277
2777c     19 17 02 F6 | 	mov	arg03, local07
27780     02 16 66 F0 | 	shl	arg03, #2
27784     64 E6 05 F1 | 	add	ptr___system__dat__, #100
27788     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
2778c     0B 15 02 FB | 	rdlong	arg02, arg03
27790     1B 17 02 F6 | 	mov	arg03, local09
27794     13 13 02 F6 | 	mov	arg01, local01
27798     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
2779c     D0 4C B0 FD | 	call	#__system__strncmp
277a0     00 FA 4D F2 | 	cmps	result1, #0 wz
277a4     28 01 90 5D |  if_ne	jmp	#LR__3277
277a8     19 3B 02 F6 | 	mov	local11, local07
277ac     02 3A 66 F0 | 	shl	local11, #2
277b0     74 E6 05 F1 | 	add	ptr___system__dat__, #116
277b4     F3 3A 02 F1 | 	add	local11, ptr___system__dat__
277b8     1D 3D 02 FB | 	rdlong	local12, local11
277bc     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
277c0     97 22 48 FB | 	callpa	#(@LR__3271-@LR__3270)>>2,fcache_load_ptr_
277c4                 | LR__3270
277c4     1B 31 02 F6 | 	mov	local06, local09
277c8     01 30 06 F1 | 	add	local06, #1
277cc     13 31 02 F1 | 	add	local06, local01
277d0     18 3B C2 FA | 	rdbyte	local11, local06
277d4     2E 3A 0E F2 | 	cmp	local11, #46 wz
277d8     2C 00 90 5D |  if_ne	jmp	#LR__3272
277dc     1B 3B 02 F6 | 	mov	local11, local09
277e0     02 3A 06 F1 | 	add	local11, #2
277e4     13 3B 02 F1 | 	add	local11, local01
277e8     1D 39 C2 FA | 	rdbyte	local10, local11
277ec     2F 38 0E F2 | 	cmp	local10, #47 wz
277f0     1B 3F 02 56 |  if_ne	mov	local13, local09
277f4     02 3E 06 51 |  if_ne	add	local13, #2
277f8     13 3F 02 51 |  if_ne	add	local13, local01
277fc     1F 41 CA 5A |  if_ne	rdbyte	local14, local13 wz
27800     01 36 06 A1 |  if_e	add	local09, #1
27804     BC FF 9F AD |  if_e	jmp	#LR__3270
27808                 | LR__3271
27808                 | LR__3272
27808     00 2A 0E F2 | 	cmp	local03, #0 wz
2780c     15 13 02 56 |  if_ne	mov	arg01, local03
27810     13 15 02 56 |  if_ne	mov	arg02, local01
27814     00 17 06 56 |  if_ne	mov	arg03, #256
27818     A8 4B B0 5D |  if_ne	call	#__system__strncpy
2781c     13 15 02 F6 | 	mov	arg02, local01
27820     1B 15 02 F1 | 	add	arg02, local09
27824     01 14 06 F1 | 	add	arg02, #1
27828     13 13 02 F6 | 	mov	arg01, local01
2782c     D4 F5 BF FD | 	call	#__system____builtin_strcpy
27830     13 13 02 F6 | 	mov	arg01, local01
27834     09 35 02 F6 | 	mov	local08, arg01
27838     97 06 48 FB | 	callpa	#(@LR__3274-@LR__3273)>>2,fcache_load_ptr_
2783c                 | LR__3273
2783c     1A FB C9 FA | 	rdbyte	result1, local08 wz
27840     01 34 06 51 |  if_ne	add	local08, #1
27844     F4 FF 9F 5D |  if_ne	jmp	#LR__3273
27848                 | LR__3274
27848     09 35 82 F1 | 	sub	local08, arg01
2784c     1A 37 02 F6 | 	mov	local09, local08
27850                 | LR__3275
27850     01 36 56 F2 | 	cmps	local09, #1 wc
27854     70 00 90 CD |  if_b	jmp	#LR__3276
27858     1B 2D 02 F6 | 	mov	local04, local09
2785c     13 2D 02 F1 | 	add	local04, local01
27860     16 3B C2 FA | 	rdbyte	local11, local04
27864     2F 3A 0E F2 | 	cmp	local11, #47 wz
27868     1B 3B 02 A6 |  if_e	mov	local11, local09
2786c     13 3B 02 A1 |  if_e	add	local11, local01
27870     1D 01 48 AC |  if_e	wrbyte	#0, local11
27874     01 36 86 A1 |  if_e	sub	local09, #1
27878     D4 FF 9F AD |  if_e	jmp	#LR__3275
2787c     1B 2D 02 F6 | 	mov	local04, local09
27880     13 2D 02 F1 | 	add	local04, local01
27884     16 3B C2 FA | 	rdbyte	local11, local04
27888     2E 3A 0E F2 | 	cmp	local11, #46 wz
2788c     38 00 90 5D |  if_ne	jmp	#LR__3276
27890     02 36 56 F2 | 	cmps	local09, #2 wc
27894     30 00 90 CD |  if_b	jmp	#LR__3276
27898     1B 41 02 F6 | 	mov	local14, local09
2789c     01 40 86 F1 | 	sub	local14, #1
278a0     13 41 02 F1 | 	add	local14, local01
278a4     20 2F C2 FA | 	rdbyte	local05, local14
278a8     2F 2E 0E F2 | 	cmp	local05, #47 wz
278ac     18 00 90 5D |  if_ne	jmp	#LR__3276
278b0     1B 2D 02 F6 | 	mov	local04, local09
278b4     01 2C 86 F1 | 	sub	local04, #1
278b8     13 2D 02 F1 | 	add	local04, local01
278bc     16 01 48 FC | 	wrbyte	#0, local04
278c0     02 36 86 F1 | 	sub	local09, #2
278c4     88 FF 9F FD | 	jmp	#LR__3275
278c8                 | LR__3276
278c8     1E FB 01 F6 | 	mov	result1, local12
278cc     1C 00 90 FD | 	jmp	#LR__3280
278d0                 | LR__3277
278d0                 | LR__3278
278d0     01 32 06 F1 | 	add	local07, #1
278d4     2C FE 9F FD | 	jmp	#LR__3267
278d8                 | LR__3279
278d8     02 00 00 FF 
278dc     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
278e0     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
278e4     02 00 00 FF 
278e8     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
278ec                 | LR__3280
278ec     A7 F0 03 F6 | 	mov	ptra, fp
278f0     B2 00 A0 FD | 	call	#popregs_
278f4                 | __system____getvfsforfile_ret
278f4     2D 00 64 FD | 	ret
278f8                 | 
278f8                 | __system___basic_open
278f8     05 4A 05 F6 | 	mov	COUNT_, #5
278fc     A8 00 A0 FD | 	call	#pushregs_
27900     0A 27 02 F6 | 	mov	local01, arg02
27904     0B 29 02 F6 | 	mov	local02, arg03
27908     0C 2B 02 F6 | 	mov	local03, arg04
2790c     00 2C 06 F6 | 	mov	local04, #0
27910     88 4A B0 FD | 	call	#__system____getftab
27914     FD 2E 0A F6 | 	mov	local05, result1 wz
27918     18 00 90 5D |  if_ne	jmp	#LR__3290
2791c     EE 12 02 F6 | 	mov	arg01, abortchain
27920     0C 14 06 F6 | 	mov	arg02, #12
27924     01 16 06 F6 | 	mov	arg03, #1
27928     DA 00 A0 FD | 	call	#__longjmp
2792c     01 FA 65 F6 | 	neg	result1, #1
27930     14 01 90 FD | 	jmp	#LR__3299
27934                 | LR__3290
27934     08 2E 06 F1 | 	add	local05, #8
27938     17 FB 09 FB | 	rdlong	result1, local05 wz
2793c     08 2E 86 F1 | 	sub	local05, #8
27940     17 13 02 56 |  if_ne	mov	arg01, local05
27944     A8 41 B0 5D |  if_ne	call	#__system___closeraw
27948     00 26 0E F2 | 	cmp	local01, #0 wz
2794c     00 28 0E A2 |  if_e	cmp	local02, #0 wz
27950     00 2A 0E A2 |  if_e	cmp	local03, #0 wz
27954     3C 00 90 AD |  if_e	jmp	#LR__3292
27958     0C 12 06 F6 | 	mov	arg01, #12
2795c     90 36 B0 FD | 	call	#__system___gc_alloc_managed
27960     FD 2C 0A F6 | 	mov	local04, result1 wz
27964     18 00 90 5D |  if_ne	jmp	#LR__3291
27968     EE 12 02 F6 | 	mov	arg01, abortchain
2796c     07 14 06 F6 | 	mov	arg02, #7
27970     01 16 06 F6 | 	mov	arg03, #1
27974     DA 00 A0 FD | 	call	#__longjmp
27978     01 FA 65 F6 | 	neg	result1, #1
2797c     C8 00 90 FD | 	jmp	#LR__3299
27980                 | LR__3291
27980     16 01 68 FC | 	wrlong	#0, local04
27984     04 2C 06 F1 | 	add	local04, #4
27988     16 01 68 FC | 	wrlong	#0, local04
2798c     04 2C 86 F1 | 	sub	local04, #4
27990     17 2D 62 FC | 	wrlong	local04, local05
27994                 | LR__3292
27994     00 26 0E F2 | 	cmp	local01, #0 wz
27998     20 00 90 AD |  if_e	jmp	#LR__3293
2799c     16 27 62 FC | 	wrlong	local01, local04
279a0     16 FB 01 F6 | 	mov	result1, local04
279a4     00 30 05 FF 
279a8     00 FA 45 F5 | 	or	result1, ##174063616
279ac     1C 2E 06 F1 | 	add	local05, #28
279b0     17 FB 61 FC | 	wrlong	result1, local05
279b4     1C 2E 86 F1 | 	sub	local05, #28
279b8     0C 00 90 FD | 	jmp	#LR__3294
279bc                 | LR__3293
279bc     1C 2E 06 F1 | 	add	local05, #28
279c0     17 01 68 FC | 	wrlong	#0, local05
279c4     1C 2E 86 F1 | 	sub	local05, #28
279c8                 | LR__3294
279c8     00 28 0E F2 | 	cmp	local02, #0 wz
279cc     28 00 90 AD |  if_e	jmp	#LR__3295
279d0     04 2C 06 F1 | 	add	local04, #4
279d4     16 29 62 FC | 	wrlong	local02, local04
279d8     04 2C 86 F1 | 	sub	local04, #4
279dc     16 FB 01 F6 | 	mov	result1, local04
279e0     00 38 05 FF 
279e4     00 FA 45 F5 | 	or	result1, ##175112192
279e8     20 2E 06 F1 | 	add	local05, #32
279ec     17 FB 61 FC | 	wrlong	result1, local05
279f0     20 2E 86 F1 | 	sub	local05, #32
279f4     0C 00 90 FD | 	jmp	#LR__3296
279f8                 | LR__3295
279f8     20 2E 06 F1 | 	add	local05, #32
279fc     17 01 68 FC | 	wrlong	#0, local05
27a00     20 2E 86 F1 | 	sub	local05, #32
27a04                 | LR__3296
27a04     00 2A 0E F2 | 	cmp	local03, #0 wz
27a08     24 00 90 AD |  if_e	jmp	#LR__3297
27a0c     08 2C 06 F1 | 	add	local04, #8
27a10     16 2B 62 FC | 	wrlong	local03, local04
27a14     08 2C 86 F1 | 	sub	local04, #8
27a18     00 40 05 FF 
27a1c     00 2C 46 F5 | 	or	local04, ##176160768
27a20     24 2E 06 F1 | 	add	local05, #36
27a24     17 2D 62 FC | 	wrlong	local04, local05
27a28     24 2E 86 F1 | 	sub	local05, #36
27a2c     0C 00 90 FD | 	jmp	#LR__3298
27a30                 | LR__3297
27a30     24 2E 06 F1 | 	add	local05, #36
27a34     17 01 68 FC | 	wrlong	#0, local05
27a38     24 2E 86 F1 | 	sub	local05, #36
27a3c                 | LR__3298
27a3c     08 2E 06 F1 | 	add	local05, #8
27a40     17 0F 68 FC | 	wrlong	#7, local05
27a44     00 FA 05 F6 | 	mov	result1, #0
27a48                 | LR__3299
27a48     A7 F0 03 F6 | 	mov	ptra, fp
27a4c     B2 00 A0 FD | 	call	#popregs_
27a50                 | __system___basic_open_ret
27a50     2D 00 64 FD | 	ret
27a54                 | 
27a54                 | __system___basic_open_string
27a54     04 4A 05 F6 | 	mov	COUNT_, #4
27a58     A8 00 A0 FD | 	call	#pushregs_
27a5c     0A 27 02 F6 | 	mov	local01, arg02
27a60     0B 29 02 F6 | 	mov	local02, arg03
27a64     34 49 B0 FD | 	call	#__system____getftab
27a68     FD 2A 0A F6 | 	mov	local03, result1 wz
27a6c     18 00 90 5D |  if_ne	jmp	#LR__3300
27a70     EE 12 02 F6 | 	mov	arg01, abortchain
27a74     0C 14 06 F6 | 	mov	arg02, #12
27a78     01 16 06 F6 | 	mov	arg03, #1
27a7c     DA 00 A0 FD | 	call	#__longjmp
27a80     01 FA 65 F6 | 	neg	result1, #1
27a84     58 00 90 FD | 	jmp	#LR__3302
27a88                 | LR__3300
27a88     08 2A 06 F1 | 	add	local03, #8
27a8c     15 19 0A FB | 	rdlong	arg04, local03 wz
27a90     08 2A 86 F1 | 	sub	local03, #8
27a94     15 13 02 56 |  if_ne	mov	arg01, local03
27a98     54 40 B0 5D |  if_ne	call	#__system___closeraw
27a9c     13 15 02 F6 | 	mov	arg02, local01
27aa0     14 17 02 F6 | 	mov	arg03, local02
27aa4     15 13 02 F6 | 	mov	arg01, local03
27aa8     B6 19 06 F6 | 	mov	arg04, #438
27aac     3C 3D B0 FD | 	call	#__system___openraw
27ab0     FD 2C 02 F6 | 	mov	local04, result1
27ab4     00 2C 56 F2 | 	cmps	local04, #0 wc
27ab8     20 00 90 3D |  if_ae	jmp	#LR__3301
27abc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
27ac0     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
27ac4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
27ac8     EE 12 02 F6 | 	mov	arg01, abortchain
27acc     01 16 06 F6 | 	mov	arg03, #1
27ad0     DA 00 A0 FD | 	call	#__longjmp
27ad4     01 FA 65 F6 | 	neg	result1, #1
27ad8     04 00 90 FD | 	jmp	#LR__3302
27adc                 | LR__3301
27adc     16 FB 01 F6 | 	mov	result1, local04
27ae0                 | LR__3302
27ae0     A7 F0 03 F6 | 	mov	ptra, fp
27ae4     B2 00 A0 FD | 	call	#popregs_
27ae8                 | __system___basic_open_string_ret
27ae8     2D 00 64 FD | 	ret
27aec                 | 
27aec                 | __system___basic_print_char
27aec     03 4A 05 F6 | 	mov	COUNT_, #3
27af0     A8 00 A0 FD | 	call	#pushregs_
27af4     0A 27 02 F6 | 	mov	local01, arg02
27af8     F4 4F B0 FD | 	call	#__system___gettxfunc
27afc     FD 28 0A F6 | 	mov	local02, result1 wz
27b00     00 FA 05 A6 |  if_e	mov	result1, #0
27b04     30 00 90 AD |  if_e	jmp	#LR__3310
27b08     14 2B 02 F6 | 	mov	local03, local02
27b0c     13 28 46 F7 | 	zerox	local02, #19
27b10     14 2A 46 F0 | 	shr	local03, #20
27b14     02 2A 66 F0 | 	shl	local03, #2
27b18     ED 2A 02 F1 | 	add	local03, __methods__
27b1c     15 2B 02 FB | 	rdlong	local03, local03
27b20     13 13 02 F6 | 	mov	arg01, local01
27b24     F2 26 02 F6 | 	mov	local01, objptr
27b28     14 E5 01 F6 | 	mov	objptr, local02
27b2c     2D 2A 62 FD | 	call	local03
27b30     13 E5 01 F6 | 	mov	objptr, local01
27b34     01 FA 05 F6 | 	mov	result1, #1
27b38                 | LR__3310
27b38     A7 F0 03 F6 | 	mov	ptra, fp
27b3c     B2 00 A0 FD | 	call	#popregs_
27b40                 | __system___basic_print_char_ret
27b40     2D 00 64 FD | 	ret
27b44                 | 
27b44                 | __system___basic_print_string
27b44     03 4A 05 F6 | 	mov	COUNT_, #3
27b48     A8 00 A0 FD | 	call	#pushregs_
27b4c     0A 27 02 F6 | 	mov	local01, arg02
27b50     0B 29 02 F6 | 	mov	local02, arg03
27b54     98 4F B0 FD | 	call	#__system___gettxfunc
27b58     FD 2A 0A F6 | 	mov	local03, result1 wz
27b5c     00 FA 05 A6 |  if_e	mov	result1, #0
27b60     18 00 90 AD |  if_e	jmp	#LR__3320
27b64     00 26 0E F2 | 	cmp	local01, #0 wz
27b68     00 FA 05 A6 |  if_e	mov	result1, #0
27b6c     15 13 02 56 |  if_ne	mov	arg01, local03
27b70     14 15 02 56 |  if_ne	mov	arg02, local02
27b74     13 17 02 56 |  if_ne	mov	arg03, local01
27b78     08 02 B0 5D |  if_ne	call	#__system___fmtstr
27b7c                 | LR__3320
27b7c     A7 F0 03 F6 | 	mov	ptra, fp
27b80     B2 00 A0 FD | 	call	#popregs_
27b84                 | __system___basic_print_string_ret
27b84     2D 00 64 FD | 	ret
27b88                 | 
27b88                 | __system___basic_print_integer
27b88     04 4A 05 F6 | 	mov	COUNT_, #4
27b8c     A8 00 A0 FD | 	call	#pushregs_
27b90     0A 27 02 F6 | 	mov	local01, arg02
27b94     0B 29 02 F6 | 	mov	local02, arg03
27b98     0C 2B 02 F6 | 	mov	local03, arg04
27b9c     50 4F B0 FD | 	call	#__system___gettxfunc
27ba0     FD 2C 0A F6 | 	mov	local04, result1 wz
27ba4     00 FA 05 A6 |  if_e	mov	result1, #0
27ba8     16 13 02 56 |  if_ne	mov	arg01, local04
27bac     14 15 02 56 |  if_ne	mov	arg02, local02
27bb0     13 17 02 56 |  if_ne	mov	arg03, local01
27bb4     15 19 02 56 |  if_ne	mov	arg04, local03
27bb8     B4 02 B0 5D |  if_ne	call	#__system___fmtnum
27bbc     A7 F0 03 F6 | 	mov	ptra, fp
27bc0     B2 00 A0 FD | 	call	#popregs_
27bc4                 | __system___basic_print_integer_ret
27bc4     2D 00 64 FD | 	ret
27bc8                 | 
27bc8                 | __system___basic_print_unsigned
27bc8     03 4A 05 F6 | 	mov	COUNT_, #3
27bcc     A8 00 A0 FD | 	call	#pushregs_
27bd0     0A 27 02 F6 | 	mov	local01, arg02
27bd4     0B 29 02 F6 | 	mov	local02, arg03
27bd8     0C 2B 02 F6 | 	mov	local03, arg04
27bdc     10 4F B0 FD | 	call	#__system___gettxfunc
27be0     FD 12 0A F6 | 	mov	arg01, result1 wz
27be4     00 FA 05 A6 |  if_e	mov	result1, #0
27be8     3A 28 26 54 |  if_ne	bith	local02, #58
27bec     14 15 02 56 |  if_ne	mov	arg02, local02
27bf0     13 17 02 56 |  if_ne	mov	arg03, local01
27bf4     15 19 02 56 |  if_ne	mov	arg04, local03
27bf8     74 02 B0 5D |  if_ne	call	#__system___fmtnum
27bfc     A7 F0 03 F6 | 	mov	ptra, fp
27c00     B2 00 A0 FD | 	call	#popregs_
27c04                 | __system___basic_print_unsigned_ret
27c04     2D 00 64 FD | 	ret
27c08                 | 
27c08                 | __system___basic_get_char
27c08     03 4A 05 F6 | 	mov	COUNT_, #3
27c0c     A8 00 A0 FD | 	call	#pushregs_
27c10     20 4F B0 FD | 	call	#__system___getrxfunc
27c14     FD 26 0A F6 | 	mov	local01, result1 wz
27c18     01 FA 65 A6 |  if_e	neg	result1, #1
27c1c     28 00 90 AD |  if_e	jmp	#LR__3330
27c20     13 29 02 F6 | 	mov	local02, local01
27c24     13 26 46 F7 | 	zerox	local01, #19
27c28     14 28 46 F0 | 	shr	local02, #20
27c2c     02 28 66 F0 | 	shl	local02, #2
27c30     ED 28 02 F1 | 	add	local02, __methods__
27c34     14 29 02 FB | 	rdlong	local02, local02
27c38     F2 2A 02 F6 | 	mov	local03, objptr
27c3c     13 E5 01 F6 | 	mov	objptr, local01
27c40     2D 28 62 FD | 	call	local02
27c44     15 E5 01 F6 | 	mov	objptr, local03
27c48                 | LR__3330
27c48     A7 F0 03 F6 | 	mov	ptra, fp
27c4c     B2 00 A0 FD | 	call	#popregs_
27c50                 | __system___basic_get_char_ret
27c50     2D 00 64 FD | 	ret
27c54                 | 
27c54                 | __system___basic_put
27c54     04 4A 05 F6 | 	mov	COUNT_, #4
27c58     A8 00 A0 FD | 	call	#pushregs_
27c5c     0D 27 02 F6 | 	mov	local01, arg05
27c60     13 19 02 FD | 	qmul	arg04, local01
27c64     09 29 02 F6 | 	mov	local02, arg01
27c68     0B 2B 02 F6 | 	mov	local03, arg03
27c6c     00 14 0E F2 | 	cmp	arg02, #0 wz
27c70     01 14 86 51 |  if_ne	sub	arg02, #1
27c74     14 13 02 56 |  if_ne	mov	arg01, local02
27c78     00 16 06 56 |  if_ne	mov	arg03, #0
27c7c     18 2C 62 FD | 	getqx	local04
27c80     60 45 B0 5D |  if_ne	call	#__system__lseek
27c84     15 15 02 F6 | 	mov	arg02, local03
27c88     16 17 02 F6 | 	mov	arg03, local04
27c8c     14 13 02 F6 | 	mov	arg01, local02
27c90     9C 44 B0 FD | 	call	#__system__write
27c94     FD 2C 02 F6 | 	mov	local04, result1
27c98     01 2C 56 F2 | 	cmps	local04, #1 wc
27c9c     10 00 90 CD |  if_b	jmp	#LR__3340
27ca0     16 91 02 F6 | 	mov	muldiva_, local04
27ca4     13 93 02 F6 | 	mov	muldivb_, local01
27ca8     BA 00 A0 FD | 	call	#divide_
27cac     49 2D 02 F6 | 	mov	local04, muldivb_
27cb0                 | LR__3340
27cb0     16 FB 01 F6 | 	mov	result1, local04
27cb4     A7 F0 03 F6 | 	mov	ptra, fp
27cb8     B2 00 A0 FD | 	call	#popregs_
27cbc                 | __system___basic_put_ret
27cbc     2D 00 64 FD | 	ret
27cc0                 | 
27cc0                 | __system___basic_get
27cc0     04 4A 05 F6 | 	mov	COUNT_, #4
27cc4     A8 00 A0 FD | 	call	#pushregs_
27cc8     0D 27 02 F6 | 	mov	local01, arg05
27ccc     13 19 02 FD | 	qmul	arg04, local01
27cd0     09 29 02 F6 | 	mov	local02, arg01
27cd4     0B 2B 02 F6 | 	mov	local03, arg03
27cd8     00 14 0E F2 | 	cmp	arg02, #0 wz
27cdc     01 14 86 51 |  if_ne	sub	arg02, #1
27ce0     14 13 02 56 |  if_ne	mov	arg01, local02
27ce4     00 16 06 56 |  if_ne	mov	arg03, #0
27ce8     18 2C 62 FD | 	getqx	local04
27cec     F4 44 B0 5D |  if_ne	call	#__system__lseek
27cf0     15 15 02 F6 | 	mov	arg02, local03
27cf4     16 17 02 F6 | 	mov	arg03, local04
27cf8     14 13 02 F6 | 	mov	arg01, local02
27cfc     6C 44 B0 FD | 	call	#__system__read
27d00     FD 2C 02 F6 | 	mov	local04, result1
27d04     01 2C 56 F2 | 	cmps	local04, #1 wc
27d08     10 00 90 CD |  if_b	jmp	#LR__3350
27d0c     16 91 02 F6 | 	mov	muldiva_, local04
27d10     13 93 02 F6 | 	mov	muldivb_, local01
27d14     BA 00 A0 FD | 	call	#divide_
27d18     49 2D 02 F6 | 	mov	local04, muldivb_
27d1c                 | LR__3350
27d1c     16 FB 01 F6 | 	mov	result1, local04
27d20     A7 F0 03 F6 | 	mov	ptra, fp
27d24     B2 00 A0 FD | 	call	#popregs_
27d28                 | __system___basic_get_ret
27d28     2D 00 64 FD | 	ret
27d2c                 | 
27d2c                 | __system___fmtchar
27d2c     00 4A 05 F6 | 	mov	COUNT_, #0
27d30     A8 00 A0 FD | 	call	#pushregs_
27d34     10 F0 07 F1 | 	add	ptra, #16
27d38     04 4E 05 F1 | 	add	fp, #4
27d3c     A7 12 62 FC | 	wrlong	arg01, fp
27d40     04 4E 05 F1 | 	add	fp, #4
27d44     A7 14 62 FC | 	wrlong	arg02, fp
27d48     04 4E 05 F1 | 	add	fp, #4
27d4c     A7 16 62 FC | 	wrlong	arg03, fp
27d50     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
27d54     A7 16 62 FC | 	wrlong	arg03, fp
27d58     08 4E 85 F1 | 	sub	fp, #8
27d5c     A7 12 02 FB | 	rdlong	arg01, fp
27d60     04 4E 05 F1 | 	add	fp, #4
27d64     A7 14 02 FB | 	rdlong	arg02, fp
27d68     04 4E 05 F1 | 	add	fp, #4
27d6c     A7 16 02 F6 | 	mov	arg03, fp
27d70     0C 4E 85 F1 | 	sub	fp, #12
27d74     0C 00 B0 FD | 	call	#__system___fmtstr
27d78     A7 F0 03 F6 | 	mov	ptra, fp
27d7c     B2 00 A0 FD | 	call	#popregs_
27d80                 | __system___fmtchar_ret
27d80     2D 00 64 FD | 	ret
27d84                 | 
27d84                 | __system___fmtstr
27d84     09 4A 05 F6 | 	mov	COUNT_, #9
27d88     A8 00 A0 FD | 	call	#pushregs_
27d8c     09 27 02 F6 | 	mov	local01, arg01
27d90     0A 29 02 F6 | 	mov	local02, arg02
27d94     0B 2B 02 F6 | 	mov	local03, arg03
27d98     14 19 E2 F8 | 	getbyte	arg04, local02, #0
27d9c     15 13 02 F6 | 	mov	arg01, local03
27da0     09 2D 02 F6 | 	mov	local04, arg01
27da4     97 06 48 FB | 	callpa	#(@LR__3361-@LR__3360)>>2,fcache_load_ptr_
27da8                 | LR__3360
27da8     16 FB C9 FA | 	rdbyte	result1, local04 wz
27dac     01 2C 06 51 |  if_ne	add	local04, #1
27db0     F4 FF 9F 5D |  if_ne	jmp	#LR__3360
27db4                 | LR__3361
27db4     09 2D 82 F1 | 	sub	local04, arg01
27db8     00 18 0E F2 | 	cmp	arg04, #0 wz
27dbc     0C 2D 7A 53 |  if_ne	fles	local04, arg04 wcz
27dc0     14 15 02 F6 | 	mov	arg02, local02
27dc4     16 17 02 F6 | 	mov	arg03, local04
27dc8     13 13 02 F6 | 	mov	arg01, local01
27dcc     02 18 06 F6 | 	mov	arg04, #2
27dd0     BC 49 B0 FD | 	call	#__system___fmtpad
27dd4     FD 2E 02 F6 | 	mov	local05, result1
27dd8     00 2E 56 F2 | 	cmps	local05, #0 wc
27ddc     17 FB 01 C6 |  if_b	mov	result1, local05
27de0     80 00 90 CD |  if_b	jmp	#LR__3364
27de4     01 2C 56 F2 | 	cmps	local04, #1 wc
27de8     50 00 90 CD |  if_b	jmp	#LR__3363
27dec     16 31 02 F6 | 	mov	local06, local04
27df0                 | LR__3362
27df0     13 33 02 F6 | 	mov	local07, local01
27df4     13 35 02 F6 | 	mov	local08, local01
27df8     13 32 46 F7 | 	zerox	local07, #19
27dfc     14 34 46 F0 | 	shr	local08, #20
27e00     02 34 66 F0 | 	shl	local08, #2
27e04     ED 34 02 F1 | 	add	local08, __methods__
27e08     1A 35 02 FB | 	rdlong	local08, local08
27e0c     15 13 C2 FA | 	rdbyte	arg01, local03
27e10     F2 36 02 F6 | 	mov	local09, objptr
27e14     19 E5 01 F6 | 	mov	objptr, local07
27e18     01 2A 06 F1 | 	add	local03, #1
27e1c     2D 34 62 FD | 	call	local08
27e20     1B E5 01 F6 | 	mov	objptr, local09
27e24     FD 36 02 F6 | 	mov	local09, result1
27e28     00 36 56 F2 | 	cmps	local09, #0 wc
27e2c     1B FB 01 C6 |  if_b	mov	result1, local09
27e30     30 00 90 CD |  if_b	jmp	#LR__3364
27e34     1B 2F 02 F1 | 	add	local05, local09
27e38     ED 31 6E FB | 	djnz	local06, #LR__3362
27e3c                 | LR__3363
27e3c     14 15 02 F6 | 	mov	arg02, local02
27e40     16 17 02 F6 | 	mov	arg03, local04
27e44     13 13 02 F6 | 	mov	arg01, local01
27e48     01 18 06 F6 | 	mov	arg04, #1
27e4c     40 49 B0 FD | 	call	#__system___fmtpad
27e50     FD 36 02 F6 | 	mov	local09, result1
27e54     00 36 56 F2 | 	cmps	local09, #0 wc
27e58     1B FB 01 C6 |  if_b	mov	result1, local09
27e5c     1B 2F 02 31 |  if_ae	add	local05, local09
27e60     17 FB 01 36 |  if_ae	mov	result1, local05
27e64                 | LR__3364
27e64     A7 F0 03 F6 | 	mov	ptra, fp
27e68     B2 00 A0 FD | 	call	#popregs_
27e6c                 | __system___fmtstr_ret
27e6c     2D 00 64 FD | 	ret
27e70                 | 
27e70                 | __system___fmtnum
27e70     0B 4A 05 F6 | 	mov	COUNT_, #11
27e74     A8 00 A0 FD | 	call	#pushregs_
27e78     09 27 02 F6 | 	mov	local01, arg01
27e7c     0A 29 02 F6 | 	mov	local02, arg02
27e80     0B 2B 02 F6 | 	mov	local03, arg03
27e84     0C 2D 02 F6 | 	mov	local04, arg04
27e88     F8 2F 02 F6 | 	mov	local05, ptra
27e8c     17 31 02 F6 | 	mov	local06, local05
27e90     00 32 06 F6 | 	mov	local07, #0
27e94     14 35 02 F6 | 	mov	local08, local02
27e98     10 34 46 F0 | 	shr	local08, #16
27e9c     3F 34 06 F5 | 	and	local08, #63
27ea0     14 37 E2 F8 | 	getbyte	local09, local02, #0
27ea4     14 39 02 F6 | 	mov	local10, local02
27ea8     1A 38 46 F0 | 	shr	local10, #26
27eac     03 38 06 F5 | 	and	local10, #3
27eb0     1C 3B 02 F6 | 	mov	local11, local10
27eb4     01 34 56 F2 | 	cmps	local08, #1 wc
27eb8     44 F0 07 F1 | 	add	ptra, #68
27ebc     01 34 86 31 |  if_ae	sub	local08, #1
27ec0     41 36 56 F2 | 	cmps	local09, #65 wc
27ec4     00 36 0E C2 |  if_b	cmp	local09, #0 wz
27ec8     40 36 06 B6 |  if_nc_or_z	mov	local09, #64
27ecc     03 3A 0E F2 | 	cmp	local11, #3 wz
27ed0     00 3A 06 A6 |  if_e	mov	local11, #0
27ed4     00 2A 56 52 |  if_ne	cmps	local03, #0 wc
27ed8     04 3A 06 46 |  if_c_and_nz	mov	local11, #4
27edc     15 2B 62 46 |  if_c_and_nz	neg	local03, local03
27ee0     00 3A 0E F2 | 	cmp	local11, #0 wz
27ee4     4C 00 90 AD |  if_e	jmp	#LR__3373
27ee8     01 32 06 F6 | 	mov	local07, #1
27eec     1B 35 0A F2 | 	cmp	local08, local09 wz
27ef0     18 00 90 5D |  if_ne	jmp	#LR__3371
27ef4     05 34 6E FB | 	djnz	local08, #LR__3370
27ef8     13 13 02 F6 | 	mov	arg01, local01
27efc     14 15 02 F6 | 	mov	arg02, local02
27f00     23 16 06 F6 | 	mov	arg03, #35
27f04     24 FE BF FD | 	call	#__system___fmtchar
27f08     88 00 90 FD | 	jmp	#LR__3377
27f0c                 | LR__3370
27f0c                 | LR__3371
27f0c     02 3A 0E F2 | 	cmp	local11, #2 wz
27f10     18 39 02 A6 |  if_e	mov	local10, local06
27f14     01 30 06 A1 |  if_e	add	local06, #1
27f18     1C 41 48 AC |  if_e	wrbyte	#32, local10
27f1c     14 00 90 AD |  if_e	jmp	#LR__3372
27f20     04 3A 0E F2 | 	cmp	local11, #4 wz
27f24     18 5B 48 AC |  if_e	wrbyte	#45, local06
27f28     01 30 06 A1 |  if_e	add	local06, #1
27f2c     18 57 48 5C |  if_ne	wrbyte	#43, local06
27f30     01 30 06 51 |  if_ne	add	local06, #1
27f34                 | LR__3372
27f34                 | LR__3373
27f34     18 13 02 F6 | 	mov	arg01, local06
27f38     15 15 02 F6 | 	mov	arg02, local03
27f3c     16 17 02 F6 | 	mov	arg03, local04
27f40     1A 19 02 F6 | 	mov	arg04, local08
27f44     00 1A 06 F6 | 	mov	arg05, #0
27f48     1D 28 2E F4 | 	testbn	local02, #29 wz
27f4c     01 1A 06 56 |  if_ne	mov	arg05, #1
27f50     04 49 B0 FD | 	call	#__system___uitoa
27f54     FD 32 02 F1 | 	add	local07, result1
27f58     1B 33 5A F2 | 	cmps	local07, local09 wcz
27f5c     24 00 90 ED |  if_be	jmp	#LR__3376
27f60     97 0E 48 FB | 	callpa	#(@LR__3375-@LR__3374)>>2,fcache_load_ptr_
27f64                 | LR__3374
27f64     1B 39 02 F6 | 	mov	local10, local09
27f68     01 38 56 F2 | 	cmps	local10, #1 wc
27f6c     01 36 86 F1 | 	sub	local09, #1
27f70     18 39 02 36 |  if_ae	mov	local10, local06
27f74     01 30 06 31 |  if_ae	add	local06, #1
27f78     1C 47 48 3C |  if_ae	wrbyte	#35, local10
27f7c     E4 FF 9F 3D |  if_ae	jmp	#LR__3374
27f80                 | LR__3375
27f80     18 01 48 FC | 	wrbyte	#0, local06
27f84                 | LR__3376
27f84     13 13 02 F6 | 	mov	arg01, local01
27f88     14 15 02 F6 | 	mov	arg02, local02
27f8c     17 17 02 F6 | 	mov	arg03, local05
27f90     F0 FD BF FD | 	call	#__system___fmtstr
27f94                 | LR__3377
27f94     A7 F0 03 F6 | 	mov	ptra, fp
27f98     B2 00 A0 FD | 	call	#popregs_
27f9c                 | __system___fmtnum_ret
27f9c     2D 00 64 FD | 	ret
27fa0                 | 
27fa0                 | __system___fmtfloat
27fa0     10 4A 05 F6 | 	mov	COUNT_, #16
27fa4     A8 00 A0 FD | 	call	#pushregs_
27fa8     24 F1 07 F1 | 	add	ptra, #292
27fac     04 4E 05 F1 | 	add	fp, #4
27fb0     A7 12 62 FC | 	wrlong	arg01, fp
27fb4     04 4E 05 F1 | 	add	fp, #4
27fb8     A7 14 62 FC | 	wrlong	arg02, fp
27fbc     04 4E 05 F1 | 	add	fp, #4
27fc0     A7 16 62 FC | 	wrlong	arg03, fp
27fc4     04 4E 05 F1 | 	add	fp, #4
27fc8     A7 18 62 FC | 	wrlong	arg04, fp
27fcc     0C 4E 05 F1 | 	add	fp, #12
27fd0     A7 14 68 FC | 	wrlong	#10, fp
27fd4     08 4E 05 F1 | 	add	fp, #8
27fd8     A7 00 68 FC | 	wrlong	#0, fp
27fdc     08 4E 05 F1 | 	add	fp, #8
27fe0     A7 00 68 FC | 	wrlong	#0, fp
27fe4     08 4E 05 F1 | 	add	fp, #8
27fe8     A7 00 68 FC | 	wrlong	#0, fp
27fec     04 4E 05 F1 | 	add	fp, #4
27ff0     A7 04 68 FC | 	wrlong	#2, fp
27ff4     04 4E 05 F1 | 	add	fp, #4
27ff8     A7 00 68 FC | 	wrlong	#0, fp
27ffc     04 4E 05 F1 | 	add	fp, #4
28000     A7 00 68 FC | 	wrlong	#0, fp
28004     04 4E 05 F1 | 	add	fp, #4
28008     A7 00 68 FC | 	wrlong	#0, fp
2800c     04 4E 05 F1 | 	add	fp, #4
28010     A7 00 68 FC | 	wrlong	#0, fp
28014     18 4E 05 F1 | 	add	fp, #24
28018     A7 00 68 FC | 	wrlong	#0, fp
2801c     68 4E 05 F1 | 	add	fp, #104
28020     A7 26 02 F6 | 	mov	local01, fp
28024     08 4E 85 F1 | 	sub	fp, #8
28028     A7 26 62 FC | 	wrlong	local01, fp
2802c     04 4E 05 F1 | 	add	fp, #4
28030     A7 26 62 FC | 	wrlong	local01, fp
28034     BC 4E 85 F1 | 	sub	fp, #188
28038     A7 26 02 FB | 	rdlong	local01, fp
2803c     10 26 46 F0 | 	shr	local01, #16
28040     3F 26 06 F5 | 	and	local01, #63
28044     B0 4E 05 F1 | 	add	fp, #176
28048     A7 26 62 FC | 	wrlong	local01, fp
2804c     B0 4E 85 F1 | 	sub	fp, #176
28050     A7 26 02 FB | 	rdlong	local01, fp
28054     1C 26 46 F0 | 	shr	local01, #28
28058     01 26 06 F5 | 	and	local01, #1
2805c     08 4F 05 F1 | 	add	fp, #264
28060     A7 26 62 FC | 	wrlong	local01, fp
28064     58 4E 85 F1 | 	sub	fp, #88
28068     A7 26 0A FB | 	rdlong	local01, fp wz
2806c     B8 4E 85 F1 | 	sub	fp, #184
28070     3C 00 90 5D |  if_ne	jmp	#LR__3381
28074     10 4E 05 F1 | 	add	fp, #16
28078     A7 26 02 FB | 	rdlong	local01, fp
2807c     10 4E 85 F1 | 	sub	fp, #16
28080     61 26 0E F2 | 	cmp	local01, #97 wz
28084     18 00 90 5D |  if_ne	jmp	#LR__3380
28088     B8 4E 05 F1 | 	add	fp, #184
2808c     A7 1A 68 FC | 	wrlong	#13, fp
28090     84 4E 85 F1 | 	sub	fp, #132
28094     A7 02 68 FC | 	wrlong	#1, fp
28098     34 4E 85 F1 | 	sub	fp, #52
2809c     24 00 90 FD | 	jmp	#LR__3382
280a0                 | LR__3380
280a0     B8 4E 05 F1 | 	add	fp, #184
280a4     A7 0C 68 FC | 	wrlong	#6, fp
280a8     B8 4E 85 F1 | 	sub	fp, #184
280ac     14 00 90 FD | 	jmp	#LR__3382
280b0                 | LR__3381
280b0     B8 4E 05 F1 | 	add	fp, #184
280b4     A7 26 02 FB | 	rdlong	local01, fp
280b8     01 26 86 F1 | 	sub	local01, #1
280bc     A7 26 62 FC | 	wrlong	local01, fp
280c0     B8 4E 85 F1 | 	sub	fp, #184
280c4                 | LR__3382
280c4     08 4E 05 F1 | 	add	fp, #8
280c8     A7 26 02 FB | 	rdlong	local01, fp
280cc     16 26 46 F0 | 	shr	local01, #22
280d0     03 26 06 F5 | 	and	local01, #3
280d4     04 4F 05 F1 | 	add	fp, #260
280d8     A7 26 62 FC | 	wrlong	local01, fp
280dc     04 4F 85 F1 | 	sub	fp, #260
280e0     A7 26 02 FB | 	rdlong	local01, fp
280e4     1D 26 46 F0 | 	shr	local01, #29
280e8     01 26 06 F5 | 	and	local01, #1
280ec     B4 4E 05 F1 | 	add	fp, #180
280f0     A7 26 62 FC | 	wrlong	local01, fp
280f4     B4 4E 85 F1 | 	sub	fp, #180
280f8     A7 26 02 FB | 	rdlong	local01, fp
280fc     13 27 EA F8 | 	getbyte	local01, local01, #1
28100     60 4E 05 F1 | 	add	fp, #96
28104     A7 26 62 FC | 	wrlong	local01, fp
28108     60 4E 85 F1 | 	sub	fp, #96
2810c     A7 26 02 FB | 	rdlong	local01, fp
28110     13 27 E2 F8 | 	getbyte	local01, local01, #0
28114     64 4E 05 F1 | 	add	fp, #100
28118     A7 26 62 FC | 	wrlong	local01, fp
2811c     00 26 06 F6 | 	mov	local01, #0
28120     5C 4E 85 F1 | 	sub	fp, #92
28124     A7 1A 02 FB | 	rdlong	arg05, fp
28128     65 1A 0E F2 | 	cmp	arg05, #101 wz
2812c     01 26 06 A6 |  if_e	mov	local01, #1
28130     14 4E 05 F1 | 	add	fp, #20
28134     A7 26 62 FC | 	wrlong	local01, fp
28138     98 4E 05 F1 | 	add	fp, #152
2813c     A7 28 0A FB | 	rdlong	local02, fp wz
28140     45 26 06 56 |  if_ne	mov	local01, #69
28144     65 26 06 A6 |  if_e	mov	local01, #101
28148     8C 4E 85 F1 | 	sub	fp, #140
2814c     A7 26 62 FC | 	wrlong	local01, fp
28150     20 4E 85 F1 | 	sub	fp, #32
28154     A7 26 02 FB | 	rdlong	local01, fp
28158     10 4E 85 F1 | 	sub	fp, #16
2815c     61 26 0E F2 | 	cmp	local01, #97 wz
28160     4C 00 90 5D |  if_ne	jmp	#LR__3383
28164     24 4E 05 F1 | 	add	fp, #36
28168     A7 02 68 FC | 	wrlong	#1, fp
2816c     98 4E 05 F1 | 	add	fp, #152
28170     A7 28 0A FB | 	rdlong	local02, fp wz
28174     50 26 06 56 |  if_ne	mov	local01, #80
28178     70 26 06 A6 |  if_e	mov	local01, #112
2817c     8C 4E 85 F1 | 	sub	fp, #140
28180     A7 26 62 FC | 	wrlong	local01, fp
28184     14 4E 85 F1 | 	sub	fp, #20
28188     A7 04 68 FC | 	wrlong	#2, fp
2818c     1C 4E 05 F1 | 	add	fp, #28
28190     A7 02 68 FC | 	wrlong	#1, fp
28194     84 4E 05 F1 | 	add	fp, #132
28198     A7 28 0A FB | 	rdlong	local02, fp wz
2819c     58 26 06 56 |  if_ne	mov	local01, #88
281a0     78 26 06 A6 |  if_e	mov	local01, #120
281a4     7C 4E 85 F1 | 	sub	fp, #124
281a8     A7 26 62 FC | 	wrlong	local01, fp
281ac     40 4E 85 F1 | 	sub	fp, #64
281b0                 | LR__3383
281b0     10 4E 05 F1 | 	add	fp, #16
281b4     A7 26 02 FB | 	rdlong	local01, fp
281b8     10 4E 85 F1 | 	sub	fp, #16
281bc     23 26 0E F2 | 	cmp	local01, #35 wz
281c0     3C 00 90 5D |  if_ne	jmp	#LR__3386
281c4     48 4E 05 F1 | 	add	fp, #72
281c8     A7 02 68 FC | 	wrlong	#1, fp
281cc     C8 4E 05 F1 | 	add	fp, #200
281d0     A7 26 0A FB | 	rdlong	local01, fp wz
281d4     10 4F 85 F1 | 	sub	fp, #272
281d8     18 00 90 AD |  if_e	jmp	#LR__3384
281dc     10 4E 05 F1 | 	add	fp, #16
281e0     A7 CC 68 FC | 	wrlong	#102, fp
281e4     00 4F 05 F1 | 	add	fp, #256
281e8     A7 00 68 FC | 	wrlong	#0, fp
281ec     10 4F 85 F1 | 	sub	fp, #272
281f0     0C 00 90 FD | 	jmp	#LR__3385
281f4                 | LR__3384
281f4     10 4F 05 F1 | 	add	fp, #272
281f8     A7 02 68 FC | 	wrlong	#1, fp
281fc     10 4F 85 F1 | 	sub	fp, #272
28200                 | LR__3385
28200                 | LR__3386
28200     08 4E 05 F1 | 	add	fp, #8
28204     A7 26 02 FB | 	rdlong	local01, fp
28208     1A 26 46 F0 | 	shr	local01, #26
2820c     03 26 06 F5 | 	and	local01, #3
28210     5C 4E 05 F1 | 	add	fp, #92
28214     A7 26 62 FC | 	wrlong	local01, fp
28218     58 4E 85 F1 | 	sub	fp, #88
2821c     A7 FA 01 FB | 	rdlong	result1, fp
28220     0C 4E 85 F1 | 	sub	fp, #12
28224     1F FA 4D F0 | 	shr	result1, #31 wz
28228     20 00 90 AD |  if_e	jmp	#LR__3387
2822c     2C 4E 05 F1 | 	add	fp, #44
28230     A7 5A 68 FC | 	wrlong	#45, fp
28234     20 4E 85 F1 | 	sub	fp, #32
28238     A7 FA 01 FB | 	rdlong	result1, fp
2823c     1F FA E5 F4 | 	bitnot	result1, #31
28240     A7 FA 61 FC | 	wrlong	result1, fp
28244     0C 4E 85 F1 | 	sub	fp, #12
28248     3C 00 90 FD | 	jmp	#LR__3389
2824c                 | LR__3387
2824c     64 4E 05 F1 | 	add	fp, #100
28250     A7 26 02 FB | 	rdlong	local01, fp
28254     64 4E 85 F1 | 	sub	fp, #100
28258     01 26 0E F2 | 	cmp	local01, #1 wz
2825c     2C 4E 05 A1 |  if_e	add	fp, #44
28260     A7 56 68 AC |  if_e	wrlong	#43, fp
28264     2C 4E 85 A1 |  if_e	sub	fp, #44
28268     1C 00 90 AD |  if_e	jmp	#LR__3388
2826c     64 4E 05 F1 | 	add	fp, #100
28270     A7 26 02 FB | 	rdlong	local01, fp
28274     64 4E 85 F1 | 	sub	fp, #100
28278     02 26 0E F2 | 	cmp	local01, #2 wz
2827c     2C 4E 05 A1 |  if_e	add	fp, #44
28280     A7 40 68 AC |  if_e	wrlong	#32, fp
28284     2C 4E 85 A1 |  if_e	sub	fp, #44
28288                 | LR__3388
28288                 | LR__3389
28288     08 4E 05 F1 | 	add	fp, #8
2828c     A7 26 02 FB | 	rdlong	local01, fp
28290     18 26 46 F0 | 	shr	local01, #24
28294     03 26 06 F5 | 	and	local01, #3
28298     3C 4E 05 F1 | 	add	fp, #60
2829c     A7 26 62 FC | 	wrlong	local01, fp
282a0     00 26 06 F6 | 	mov	local01, #0
282a4     18 4E 85 F1 | 	sub	fp, #24
282a8     A7 2A 0A FB | 	rdlong	local03, fp wz
282ac     2C 4E 85 F1 | 	sub	fp, #44
282b0     18 00 90 5D |  if_ne	jmp	#LR__3390
282b4     1C 4E 05 F1 | 	add	fp, #28
282b8     A7 2C 02 FB | 	rdlong	local04, fp
282bc     1C 4E 85 F1 | 	sub	fp, #28
282c0     16 2F 02 F6 | 	mov	local05, local04
282c4     0A 2E 0E F2 | 	cmp	local05, #10 wz
282c8     04 00 90 AD |  if_e	jmp	#LR__3391
282cc                 | LR__3390
282cc     01 26 66 F5 | 	xor	local01, #1
282d0                 | LR__3391
282d0     3C 4E 05 F1 | 	add	fp, #60
282d4     A7 26 62 FC | 	wrlong	local01, fp
282d8     3C 4E 85 F1 | 	sub	fp, #60
282dc     00 26 0E F2 | 	cmp	local01, #0 wz
282e0     0C 01 90 AD |  if_e	jmp	#LR__3393
282e4     44 4E 05 F1 | 	add	fp, #68
282e8     A7 2E 02 FB | 	rdlong	local05, fp
282ec     44 4E 85 F1 | 	sub	fp, #68
282f0     17 2B 02 F6 | 	mov	local03, local05
282f4     02 2A 0E F2 | 	cmp	local03, #2 wz
282f8     F4 00 90 5D |  if_ne	jmp	#LR__3393
282fc     0C 4F 05 F1 | 	add	fp, #268
28300     A7 30 02 FB | 	rdlong	local06, fp
28304     0C 4F 85 F1 | 	sub	fp, #268
28308     18 2D 02 F6 | 	mov	local04, local06
2830c     02 2C 0E F2 | 	cmp	local04, #2 wz
28310     DC 00 90 AD |  if_e	jmp	#LR__3393
28314     C0 4E 05 F1 | 	add	fp, #192
28318     A7 12 02 FB | 	rdlong	arg01, fp
2831c     94 4E 85 F1 | 	sub	fp, #148
28320     A7 14 02 FB | 	rdlong	arg02, fp
28324     14 4E 05 F1 | 	add	fp, #20
28328     A7 16 02 FB | 	rdlong	arg03, fp
2832c     40 4E 85 F1 | 	sub	fp, #64
28330     8C 47 B0 FD | 	call	#__system__emitsign_0571
28334     14 4F 05 F1 | 	add	fp, #276
28338     A7 FA 61 FC | 	wrlong	result1, fp
2833c     14 4F 85 F1 | 	sub	fp, #276
28340     00 FA 55 F2 | 	cmps	result1, #0 wc
28344     14 4F 05 C1 |  if_b	add	fp, #276
28348     A7 FA 01 CB |  if_b	rdlong	result1, fp
2834c     14 4F 85 C1 |  if_b	sub	fp, #276
28350     6C 0B 90 CD |  if_b	jmp	#LR__3443
28354     C0 4E 05 F1 | 	add	fp, #192
28358     A7 26 02 FB | 	rdlong	local01, fp
2835c     54 4E 05 F1 | 	add	fp, #84
28360     A7 2E 02 FB | 	rdlong	local05, fp
28364     17 2B 02 F6 | 	mov	local03, local05
28368     17 27 02 F1 | 	add	local01, local05
2836c     54 4E 85 F1 | 	sub	fp, #84
28370     A7 26 62 FC | 	wrlong	local01, fp
28374     58 4E 85 F1 | 	sub	fp, #88
28378     A7 26 0A FB | 	rdlong	local01, fp wz
2837c     68 4E 85 F1 | 	sub	fp, #104
28380     60 00 90 AD |  if_e	jmp	#LR__3392
28384     68 4E 05 F1 | 	add	fp, #104
28388     A7 26 02 FB | 	rdlong	local01, fp
2838c     AC 4E 05 F1 | 	add	fp, #172
28390     A7 2A 02 FB | 	rdlong	local03, fp
28394     15 27 82 F1 | 	sub	local01, local03
28398     AC 4E 85 F1 | 	sub	fp, #172
2839c     A7 26 62 FC | 	wrlong	local01, fp
283a0     68 4E 85 F1 | 	sub	fp, #104
283a4     00 26 56 F2 | 	cmps	local01, #0 wc
283a8     68 4E 05 C1 |  if_b	add	fp, #104
283ac     A7 00 68 CC |  if_b	wrlong	#0, fp
283b0     68 4E 85 C1 |  if_b	sub	fp, #104
283b4     08 4E 05 F1 | 	add	fp, #8
283b8     A7 26 02 FB | 	rdlong	local01, fp
283bc     E8 26 06 F4 | 	bitl	local01, #232
283c0     A7 26 62 FC | 	wrlong	local01, fp
283c4     60 4E 05 F1 | 	add	fp, #96
283c8     A7 2E 02 FB | 	rdlong	local05, fp
283cc     17 2B 02 F6 | 	mov	local03, local05
283d0     08 2A 66 F0 | 	shl	local03, #8
283d4     15 27 42 F5 | 	or	local01, local03
283d8     60 4E 85 F1 | 	sub	fp, #96
283dc     A7 26 62 FC | 	wrlong	local01, fp
283e0     08 4E 85 F1 | 	sub	fp, #8
283e4                 | LR__3392
283e4     3C 4E 05 F1 | 	add	fp, #60
283e8     A7 00 68 FC | 	wrlong	#0, fp
283ec     3C 4E 85 F1 | 	sub	fp, #60
283f0                 | LR__3393
283f0     0C 4E 05 F1 | 	add	fp, #12
283f4     A7 12 02 FB | 	rdlong	arg01, fp
283f8     0C 4E 85 F1 | 	sub	fp, #12
283fc     EC 21 B0 FD | 	call	#__system____builtin_ilogb
28400     FF FF 3F FF 
28404     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
28408     50 00 90 5D |  if_ne	jmp	#LR__3395
2840c     2C 4E 05 F1 | 	add	fp, #44
28410     A7 26 0A FB | 	rdlong	local01, fp wz
28414     2C 4E 85 F1 | 	sub	fp, #44
28418     24 00 90 AD |  if_e	jmp	#LR__3394
2841c     C0 4E 05 F1 | 	add	fp, #192
28420     A7 28 02 FB | 	rdlong	local02, fp
28424     14 2B 02 F6 | 	mov	local03, local02
28428     01 2A 06 F1 | 	add	local03, #1
2842c     A7 2A 62 FC | 	wrlong	local03, fp
28430     94 4E 85 F1 | 	sub	fp, #148
28434     A7 2C 02 FB | 	rdlong	local04, fp
28438     2C 4E 85 F1 | 	sub	fp, #44
2843c     14 2D 42 FC | 	wrbyte	local04, local02
28440                 | LR__3394
28440     C0 4E 05 F1 | 	add	fp, #192
28444     A7 12 02 FB | 	rdlong	arg01, fp
28448     C0 4E 85 F1 | 	sub	fp, #192
2844c     B4 01 00 FF 
28450     5A 15 06 F6 | 	mov	arg02, ##@LR__5391
28454     AC E9 BF FD | 	call	#__system____builtin_strcpy
28458     A4 08 90 FD | 	jmp	#LR__3431
2845c                 | LR__3395
2845c     0C 4E 05 F1 | 	add	fp, #12
28460     A7 28 02 FB | 	rdlong	local02, fp
28464     0C 4E 85 F1 | 	sub	fp, #12
28468     14 13 02 F6 | 	mov	arg01, local02
2846c     7C 21 B0 FD | 	call	#__system____builtin_ilogb
28470     00 00 40 FF 
28474     00 FA 0D F2 | 	cmp	result1, ##-2147483648 wz
28478     50 00 90 5D |  if_ne	jmp	#LR__3397
2847c     2C 4E 05 F1 | 	add	fp, #44
28480     A7 26 0A FB | 	rdlong	local01, fp wz
28484     2C 4E 85 F1 | 	sub	fp, #44
28488     24 00 90 AD |  if_e	jmp	#LR__3396
2848c     C0 4E 05 F1 | 	add	fp, #192
28490     A7 28 02 FB | 	rdlong	local02, fp
28494     14 2B 02 F6 | 	mov	local03, local02
28498     01 2A 06 F1 | 	add	local03, #1
2849c     A7 2A 62 FC | 	wrlong	local03, fp
284a0     94 4E 85 F1 | 	sub	fp, #148
284a4     A7 2C 02 FB | 	rdlong	local04, fp
284a8     2C 4E 85 F1 | 	sub	fp, #44
284ac     14 2D 42 FC | 	wrbyte	local04, local02
284b0                 | LR__3396
284b0     C0 4E 05 F1 | 	add	fp, #192
284b4     A7 12 02 FB | 	rdlong	arg01, fp
284b8     C0 4E 85 F1 | 	sub	fp, #192
284bc     B4 01 00 FF 
284c0     5E 15 06 F6 | 	mov	arg02, ##@LR__5392
284c4     3C E9 BF FD | 	call	#__system____builtin_strcpy
284c8     34 08 90 FD | 	jmp	#LR__3431
284cc                 | LR__3397
284cc     10 4E 05 F1 | 	add	fp, #16
284d0     A7 26 02 FB | 	rdlong	local01, fp
284d4     10 4E 85 F1 | 	sub	fp, #16
284d8     67 26 0E F2 | 	cmp	local01, #103 wz
284dc     10 4E 05 51 |  if_ne	add	fp, #16
284e0     A7 2A 02 5B |  if_ne	rdlong	local03, fp
284e4     10 4E 85 51 |  if_ne	sub	fp, #16
284e8     23 2A 0E 52 |  if_ne	cmp	local03, #35 wz
284ec     94 01 90 5D |  if_ne	jmp	#LR__3402
284f0     0C 4E 05 F1 | 	add	fp, #12
284f4     A7 12 02 FB | 	rdlong	arg01, fp
284f8     08 4E 05 F1 | 	add	fp, #8
284fc     A7 14 02 F6 | 	mov	arg02, fp
28500     0C 4E 05 F1 | 	add	fp, #12
28504     A7 16 02 F6 | 	mov	arg03, fp
28508     98 4E 05 F1 | 	add	fp, #152
2850c     A7 18 02 FB | 	rdlong	arg04, fp
28510     9C 4E 85 F1 | 	sub	fp, #156
28514     A7 1A 02 FB | 	rdlong	arg05, fp
28518     1C 4E 85 F1 | 	sub	fp, #28
2851c     AC 43 B0 FD | 	call	#__system__disassemble_0569
28520     10 4E 05 F1 | 	add	fp, #16
28524     A7 26 02 FB | 	rdlong	local01, fp
28528     10 4E 85 F1 | 	sub	fp, #16
2852c     23 26 0E F2 | 	cmp	local01, #35 wz
28530     A0 00 90 5D |  if_ne	jmp	#LR__3399
28534     20 4E 05 F1 | 	add	fp, #32
28538     A7 26 02 FB | 	rdlong	local01, fp
2853c     98 4E 05 F1 | 	add	fp, #152
28540     A7 2A 02 FB | 	rdlong	local03, fp
28544     B8 4E 85 F1 | 	sub	fp, #184
28548     15 27 5A F2 | 	cmps	local01, local03 wcz
2854c     24 4E 05 11 |  if_a	add	fp, #36
28550     A7 02 68 1C |  if_a	wrlong	#1, fp
28554     24 4E 85 11 |  if_a	sub	fp, #36
28558     A4 01 90 1D |  if_a	jmp	#LR__3405
2855c     20 4E 05 F1 | 	add	fp, #32
28560     A7 26 02 FB | 	rdlong	local01, fp
28564     20 4E 85 F1 | 	sub	fp, #32
28568     00 26 56 F2 | 	cmps	local01, #0 wc
2856c     2C 00 90 3D |  if_ae	jmp	#LR__3398
28570     B8 4E 05 F1 | 	add	fp, #184
28574     A7 26 02 FB | 	rdlong	local01, fp
28578     13 27 62 F6 | 	neg	local01, local01
2857c     98 4E 85 F1 | 	sub	fp, #152
28580     A7 2A 02 FB | 	rdlong	local03, fp
28584     20 4E 85 F1 | 	sub	fp, #32
28588     13 2B 5A F2 | 	cmps	local03, local01 wcz
2858c     24 4E 05 E1 |  if_be	add	fp, #36
28590     A7 02 68 EC |  if_be	wrlong	#1, fp
28594     24 4E 85 E1 |  if_be	sub	fp, #36
28598     64 01 90 FD | 	jmp	#LR__3405
2859c                 | LR__3398
2859c     20 4E 05 F1 | 	add	fp, #32
285a0     A7 26 02 FB | 	rdlong	local01, fp
285a4     20 4E 85 F1 | 	sub	fp, #32
285a8     01 26 56 F2 | 	cmps	local01, #1 wc
285ac     50 01 90 CD |  if_b	jmp	#LR__3405
285b0     B8 4E 05 F1 | 	add	fp, #184
285b4     A7 26 02 FB | 	rdlong	local01, fp
285b8     98 4E 85 F1 | 	sub	fp, #152
285bc     A7 2A 02 FB | 	rdlong	local03, fp
285c0     15 27 82 F1 | 	sub	local01, local03
285c4     98 4E 05 F1 | 	add	fp, #152
285c8     A7 26 62 FC | 	wrlong	local01, fp
285cc     B8 4E 85 F1 | 	sub	fp, #184
285d0     2C 01 90 FD | 	jmp	#LR__3405
285d4                 | LR__3399
285d4     00 26 06 F6 | 	mov	local01, #0
285d8     08 4E 05 F1 | 	add	fp, #8
285dc     A7 28 02 FB | 	rdlong	local02, fp
285e0     1C 28 46 F0 | 	shr	local02, #28
285e4     01 28 0E F5 | 	and	local02, #1 wz
285e8     01 26 06 A6 |  if_e	mov	local01, #1
285ec     2C 4E 05 F1 | 	add	fp, #44
285f0     A7 26 62 FC | 	wrlong	local01, fp
285f4     14 4E 85 F1 | 	sub	fp, #20
285f8     A7 26 02 FB | 	rdlong	local01, fp
285fc     98 4E 05 F1 | 	add	fp, #152
28600     A7 2A 02 FB | 	rdlong	local03, fp
28604     B8 4E 85 F1 | 	sub	fp, #184
28608     15 27 52 F2 | 	cmps	local01, local03 wc
2860c     18 00 90 3D |  if_ae	jmp	#LR__3400
28610     20 4E 05 F1 | 	add	fp, #32
28614     A7 2C 02 FB | 	rdlong	local04, fp
28618     20 4E 85 F1 | 	sub	fp, #32
2861c     FF FF 7F FF 
28620     FC 2D 56 F2 | 	cmps	local04, ##-4 wc
28624     10 00 90 3D |  if_ae	jmp	#LR__3401
28628                 | LR__3400
28628     24 4E 05 F1 | 	add	fp, #36
2862c     A7 02 68 FC | 	wrlong	#1, fp
28630     24 4E 85 F1 | 	sub	fp, #36
28634     C8 00 90 FD | 	jmp	#LR__3405
28638                 | LR__3401
28638     B8 4E 05 F1 | 	add	fp, #184
2863c     A7 2C 02 FB | 	rdlong	local04, fp
28640     98 4E 85 F1 | 	sub	fp, #152
28644     A7 2A 02 FB | 	rdlong	local03, fp
28648     15 2D 82 F1 | 	sub	local04, local03
2864c     98 4E 05 F1 | 	add	fp, #152
28650     A7 2C 62 FC | 	wrlong	local04, fp
28654     AC 4E 85 F1 | 	sub	fp, #172
28658     A7 12 02 FB | 	rdlong	arg01, fp
2865c     08 4E 05 F1 | 	add	fp, #8
28660     A7 14 02 F6 | 	mov	arg02, fp
28664     0C 4E 05 F1 | 	add	fp, #12
28668     A7 16 02 F6 | 	mov	arg03, fp
2866c     16 19 62 F6 | 	neg	arg04, local04
28670     04 4E 85 F1 | 	sub	fp, #4
28674     A7 1A 02 FB | 	rdlong	arg05, fp
28678     1C 4E 85 F1 | 	sub	fp, #28
2867c     4C 42 B0 FD | 	call	#__system__disassemble_0569
28680     7C 00 90 FD | 	jmp	#LR__3405
28684                 | LR__3402
28684     24 4E 05 F1 | 	add	fp, #36
28688     A7 26 0A FB | 	rdlong	local01, fp wz
2868c     24 4E 85 F1 | 	sub	fp, #36
28690     34 00 90 AD |  if_e	jmp	#LR__3403
28694     0C 4E 05 F1 | 	add	fp, #12
28698     A7 12 02 FB | 	rdlong	arg01, fp
2869c     08 4E 05 F1 | 	add	fp, #8
286a0     A7 14 02 F6 | 	mov	arg02, fp
286a4     0C 4E 05 F1 | 	add	fp, #12
286a8     A7 16 02 F6 | 	mov	arg03, fp
286ac     98 4E 05 F1 | 	add	fp, #152
286b0     A7 18 02 FB | 	rdlong	arg04, fp
286b4     9C 4E 85 F1 | 	sub	fp, #156
286b8     A7 1A 02 FB | 	rdlong	arg05, fp
286bc     1C 4E 85 F1 | 	sub	fp, #28
286c0     08 42 B0 FD | 	call	#__system__disassemble_0569
286c4     38 00 90 FD | 	jmp	#LR__3404
286c8                 | LR__3403
286c8     0C 4E 05 F1 | 	add	fp, #12
286cc     A7 12 02 FB | 	rdlong	arg01, fp
286d0     08 4E 05 F1 | 	add	fp, #8
286d4     A7 14 02 F6 | 	mov	arg02, fp
286d8     0C 4E 05 F1 | 	add	fp, #12
286dc     A7 16 02 F6 | 	mov	arg03, fp
286e0     98 4E 05 F1 | 	add	fp, #152
286e4     A7 2C 02 FB | 	rdlong	local04, fp
286e8     01 2C 06 F1 | 	add	local04, #1
286ec     16 19 62 F6 | 	neg	arg04, local04
286f0     9C 4E 85 F1 | 	sub	fp, #156
286f4     A7 1A 02 FB | 	rdlong	arg05, fp
286f8     1C 4E 85 F1 | 	sub	fp, #28
286fc     CC 41 B0 FD | 	call	#__system__disassemble_0569
28700                 | LR__3404
28700                 | LR__3405
28700     1C 4E 05 F1 | 	add	fp, #28
28704     A7 26 02 FB | 	rdlong	local01, fp
28708     1C 4E 85 F1 | 	sub	fp, #28
2870c     02 26 0E F2 | 	cmp	local01, #2 wz
28710     4C 00 90 5D |  if_ne	jmp	#LR__3408
28714     1C 4E 05 F1 | 	add	fp, #28
28718     A7 20 68 FC | 	wrlong	#16, fp
2871c     1C 4E 85 F1 | 	sub	fp, #28
28720                 | LR__3406
28720     14 4E 05 F1 | 	add	fp, #20
28724     A7 26 0A FB | 	rdlong	local01, fp wz
28728     14 4E 85 F1 | 	sub	fp, #20
2872c     30 00 90 AD |  if_e	jmp	#LR__3407
28730     14 4E 05 F1 | 	add	fp, #20
28734     A7 2A 02 FB | 	rdlong	local03, fp
28738     14 4E 85 F1 | 	sub	fp, #20
2873c     00 80 00 FF 
28740     00 2A 16 F2 | 	cmp	local03, ##16777216 wc
28744     18 00 90 3D |  if_ae	jmp	#LR__3407
28748     14 4E 05 F1 | 	add	fp, #20
2874c     A7 26 02 FB | 	rdlong	local01, fp
28750     01 26 66 F0 | 	shl	local01, #1
28754     A7 26 62 FC | 	wrlong	local01, fp
28758     14 4E 85 F1 | 	sub	fp, #20
2875c     C0 FF 9F FD | 	jmp	#LR__3406
28760                 | LR__3407
28760                 | LR__3408
28760     70 4E 05 F1 | 	add	fp, #112
28764     A7 12 02 F6 | 	mov	arg01, fp
28768     5C 4E 85 F1 | 	sub	fp, #92
2876c     A7 14 02 FB | 	rdlong	arg02, fp
28770     08 4E 05 F1 | 	add	fp, #8
28774     A7 16 02 FB | 	rdlong	arg03, fp
28778     A0 4E 05 F1 | 	add	fp, #160
2877c     A7 1A 02 FB | 	rdlong	arg05, fp
28780     BC 4E 85 F1 | 	sub	fp, #188
28784     01 18 06 F6 | 	mov	arg04, #1
28788     CC 40 B0 FD | 	call	#__system___uitoa
2878c     58 4E 05 F1 | 	add	fp, #88
28790     A7 FA 61 FC | 	wrlong	result1, fp
28794     38 4E 85 F1 | 	sub	fp, #56
28798     A7 26 02 FB | 	rdlong	local01, fp
2879c     20 4E 85 F1 | 	sub	fp, #32
287a0     00 26 56 F2 | 	cmps	local01, #0 wc
287a4     50 00 90 3D |  if_ae	jmp	#LR__3409
287a8     60 4E 05 F1 | 	add	fp, #96
287ac     A7 5A 68 FC | 	wrlong	#45, fp
287b0     50 4E 05 F1 | 	add	fp, #80
287b4     A7 12 02 F6 | 	mov	arg01, fp
287b8     90 4E 85 F1 | 	sub	fp, #144
287bc     A7 2A 02 FB | 	rdlong	local03, fp
287c0     15 15 62 F6 | 	neg	arg02, local03
287c4     18 4E 05 F1 | 	add	fp, #24
287c8     A7 18 02 FB | 	rdlong	arg04, fp
287cc     84 4E 05 F1 | 	add	fp, #132
287d0     A7 30 02 FB | 	rdlong	local06, fp
287d4     BC 4E 85 F1 | 	sub	fp, #188
287d8     18 2D 02 F6 | 	mov	local04, local06
287dc     0A 16 06 F6 | 	mov	arg03, #10
287e0     16 1B 02 F6 | 	mov	arg05, local04
287e4     70 40 B0 FD | 	call	#__system___uitoa
287e8     5C 4E 05 F1 | 	add	fp, #92
287ec     A7 FA 61 FC | 	wrlong	result1, fp
287f0     5C 4E 85 F1 | 	sub	fp, #92
287f4     48 00 90 FD | 	jmp	#LR__3410
287f8                 | LR__3409
287f8     60 4E 05 F1 | 	add	fp, #96
287fc     A7 56 68 FC | 	wrlong	#43, fp
28800     50 4E 05 F1 | 	add	fp, #80
28804     A7 12 02 F6 | 	mov	arg01, fp
28808     90 4E 85 F1 | 	sub	fp, #144
2880c     A7 14 02 FB | 	rdlong	arg02, fp
28810     18 4E 05 F1 | 	add	fp, #24
28814     A7 18 02 FB | 	rdlong	arg04, fp
28818     84 4E 05 F1 | 	add	fp, #132
2881c     A7 30 02 FB | 	rdlong	local06, fp
28820     BC 4E 85 F1 | 	sub	fp, #188
28824     18 2D 02 F6 | 	mov	local04, local06
28828     0A 16 06 F6 | 	mov	arg03, #10
2882c     16 1B 02 F6 | 	mov	arg05, local04
28830     24 40 B0 FD | 	call	#__system___uitoa
28834     5C 4E 05 F1 | 	add	fp, #92
28838     A7 FA 61 FC | 	wrlong	result1, fp
2883c     5C 4E 85 F1 | 	sub	fp, #92
28840                 | LR__3410
28840     24 4E 05 F1 | 	add	fp, #36
28844     A7 26 0A FB | 	rdlong	local01, fp wz
28848     24 4E 85 F1 | 	sub	fp, #36
2884c     2C 00 90 AD |  if_e	jmp	#LR__3411
28850     50 4E 05 F1 | 	add	fp, #80
28854     A7 00 68 FC | 	wrlong	#0, fp
28858     04 4E 85 F1 | 	sub	fp, #4
2885c     A7 00 68 FC | 	wrlong	#0, fp
28860     6C 4E 05 F1 | 	add	fp, #108
28864     A7 26 02 FB | 	rdlong	local01, fp
28868     01 26 06 F1 | 	add	local01, #1
2886c     64 4E 85 F1 | 	sub	fp, #100
28870     A7 26 62 FC | 	wrlong	local01, fp
28874     54 4E 85 F1 | 	sub	fp, #84
28878     88 00 90 FD | 	jmp	#LR__3414
2887c                 | LR__3411
2887c     20 4E 05 F1 | 	add	fp, #32
28880     A7 26 02 FB | 	rdlong	local01, fp
28884     20 4E 85 F1 | 	sub	fp, #32
28888     00 26 56 F2 | 	cmps	local01, #0 wc
2888c     40 00 90 3D |  if_ae	jmp	#LR__3412
28890     20 4E 05 F1 | 	add	fp, #32
28894     A7 28 02 FB | 	rdlong	local02, fp
28898     30 4E 05 F1 | 	add	fp, #48
2889c     A7 28 62 FC | 	wrlong	local02, fp
288a0     04 4E 85 F1 | 	sub	fp, #4
288a4     A7 28 62 FC | 	wrlong	local02, fp
288a8     2C 4E 85 F1 | 	sub	fp, #44
288ac     A7 26 02 FB | 	rdlong	local01, fp
288b0     98 4E 05 F1 | 	add	fp, #152
288b4     A7 2A 02 FB | 	rdlong	local03, fp
288b8     15 27 02 F1 | 	add	local01, local03
288bc     01 26 06 F1 | 	add	local01, #1
288c0     64 4E 85 F1 | 	sub	fp, #100
288c4     A7 26 62 FC | 	wrlong	local01, fp
288c8     54 4E 85 F1 | 	sub	fp, #84
288cc     34 00 90 FD | 	jmp	#LR__3413
288d0                 | LR__3412
288d0     4C 4E 05 F1 | 	add	fp, #76
288d4     A7 00 68 FC | 	wrlong	#0, fp
288d8     2C 4E 85 F1 | 	sub	fp, #44
288dc     A7 26 02 FB | 	rdlong	local01, fp
288e0     30 4E 05 F1 | 	add	fp, #48
288e4     A7 26 62 FC | 	wrlong	local01, fp
288e8     68 4E 05 F1 | 	add	fp, #104
288ec     A7 2A 02 FB | 	rdlong	local03, fp
288f0     15 27 02 F1 | 	add	local01, local03
288f4     01 26 06 F1 | 	add	local01, #1
288f8     64 4E 85 F1 | 	sub	fp, #100
288fc     A7 26 62 FC | 	wrlong	local01, fp
28900     54 4E 85 F1 | 	sub	fp, #84
28904                 | LR__3413
28904                 | LR__3414
28904     54 4E 05 F1 | 	add	fp, #84
28908     A7 26 02 FB | 	rdlong	local01, fp
2890c     08 4E 85 F1 | 	sub	fp, #8
28910     A7 2A 02 FB | 	rdlong	local03, fp
28914     15 27 82 F1 | 	sub	local01, local03
28918     01 26 06 F1 | 	add	local01, #1
2891c     24 4E 85 F1 | 	sub	fp, #36
28920     A7 26 62 FC | 	wrlong	local01, fp
28924     04 4E 05 F1 | 	add	fp, #4
28928     A7 26 0A FB | 	rdlong	local01, fp wz
2892c     2C 4E 85 F1 | 	sub	fp, #44
28930     28 4E 05 51 |  if_ne	add	fp, #40
28934     A7 2A 02 5B |  if_ne	rdlong	local03, fp
28938     01 2A 06 51 |  if_ne	add	local03, #1
2893c     A7 2A 62 5C |  if_ne	wrlong	local03, fp
28940     28 4E 85 51 |  if_ne	sub	fp, #40
28944     1C 4E 05 F1 | 	add	fp, #28
28948     A7 26 02 FB | 	rdlong	local01, fp
2894c     1C 4E 85 F1 | 	sub	fp, #28
28950     10 26 0E F2 | 	cmp	local01, #16 wz
28954     28 4E 05 A1 |  if_e	add	fp, #40
28958     A7 26 02 AB |  if_e	rdlong	local01, fp
2895c     02 26 06 A1 |  if_e	add	local01, #2
28960     A7 26 62 AC |  if_e	wrlong	local01, fp
28964     28 4E 85 A1 |  if_e	sub	fp, #40
28968     24 4E 05 F1 | 	add	fp, #36
2896c     A7 26 0A FB | 	rdlong	local01, fp wz
28970     24 4E 85 F1 | 	sub	fp, #36
28974     28 00 90 AD |  if_e	jmp	#LR__3415
28978     28 4E 05 F1 | 	add	fp, #40
2897c     A7 26 02 FB | 	rdlong	local01, fp
28980     02 2A 06 F6 | 	mov	local03, #2
28984     34 4E 05 F1 | 	add	fp, #52
28988     A7 2E 02 FB | 	rdlong	local05, fp
2898c     17 2B 02 F1 | 	add	local03, local05
28990     15 27 02 F1 | 	add	local01, local03
28994     34 4E 85 F1 | 	sub	fp, #52
28998     A7 26 62 FC | 	wrlong	local01, fp
2899c     28 4E 85 F1 | 	sub	fp, #40
289a0                 | LR__3415
289a0     28 4E 05 F1 | 	add	fp, #40
289a4     A7 26 02 FB | 	rdlong	local01, fp
289a8     28 4E 85 F1 | 	sub	fp, #40
289ac     41 26 56 F2 | 	cmps	local01, #65 wc
289b0     01 FA 65 36 |  if_ae	neg	result1, #1
289b4     08 05 90 3D |  if_ae	jmp	#LR__3443
289b8     3C 4E 05 F1 | 	add	fp, #60
289bc     A7 26 0A FB | 	rdlong	local01, fp wz
289c0     3C 4E 85 F1 | 	sub	fp, #60
289c4     60 00 90 AD |  if_e	jmp	#LR__3416
289c8     C0 4E 05 F1 | 	add	fp, #192
289cc     A7 12 02 FB | 	rdlong	arg01, fp
289d0     94 4E 85 F1 | 	sub	fp, #148
289d4     A7 14 02 FB | 	rdlong	arg02, fp
289d8     14 4E 05 F1 | 	add	fp, #20
289dc     A7 16 02 FB | 	rdlong	arg03, fp
289e0     40 4E 85 F1 | 	sub	fp, #64
289e4     D8 40 B0 FD | 	call	#__system__emitsign_0571
289e8     18 4F 05 F1 | 	add	fp, #280
289ec     A7 FA 61 FC | 	wrlong	result1, fp
289f0     18 4F 85 F1 | 	sub	fp, #280
289f4     00 FA 55 F2 | 	cmps	result1, #0 wc
289f8     18 4F 05 C1 |  if_b	add	fp, #280
289fc     A7 FA 01 CB |  if_b	rdlong	result1, fp
28a00     18 4F 85 C1 |  if_b	sub	fp, #280
28a04     B8 04 90 CD |  if_b	jmp	#LR__3443
28a08     C0 4E 05 F1 | 	add	fp, #192
28a0c     A7 26 02 FB | 	rdlong	local01, fp
28a10     58 4E 05 F1 | 	add	fp, #88
28a14     A7 2A 02 FB | 	rdlong	local03, fp
28a18     15 27 02 F1 | 	add	local01, local03
28a1c     58 4E 85 F1 | 	sub	fp, #88
28a20     A7 26 62 FC | 	wrlong	local01, fp
28a24     C0 4E 85 F1 | 	sub	fp, #192
28a28                 | LR__3416
28a28     4C 4E 05 F1 | 	add	fp, #76
28a2c     A7 26 02 FB | 	rdlong	local01, fp
28a30     34 4E 85 F1 | 	sub	fp, #52
28a34     A7 26 62 FC | 	wrlong	local01, fp
28a38     18 4E 85 F1 | 	sub	fp, #24
28a3c     97 9E 48 FB | 	callpa	#(@LR__3422-@LR__3417)>>2,fcache_load_ptr_
28a40                 | LR__3417
28a40     18 4E 05 F1 | 	add	fp, #24
28a44     A7 28 02 FB | 	rdlong	local02, fp
28a48     3C 4E 05 F1 | 	add	fp, #60
28a4c     A7 2E 02 FB | 	rdlong	local05, fp
28a50     54 4E 85 F1 | 	sub	fp, #84
28a54     17 29 52 F2 | 	cmps	local02, local05 wc
28a58     20 01 90 3D |  if_ae	jmp	#LR__3423
28a5c     18 4E 05 F1 | 	add	fp, #24
28a60     A7 30 02 FB | 	rdlong	local06, fp
28a64     18 4E 85 F1 | 	sub	fp, #24
28a68     00 30 56 F2 | 	cmps	local06, #0 wc
28a6c     58 00 90 CD |  if_b	jmp	#LR__3418
28a70     18 4E 05 F1 | 	add	fp, #24
28a74     A7 30 02 FB | 	rdlong	local06, fp
28a78     40 4E 05 F1 | 	add	fp, #64
28a7c     A7 32 02 FB | 	rdlong	local07, fp
28a80     58 4E 85 F1 | 	sub	fp, #88
28a84     19 31 52 F2 | 	cmps	local06, local07 wc
28a88     3C 00 90 3D |  if_ae	jmp	#LR__3418
28a8c     C0 4E 05 F1 | 	add	fp, #192
28a90     A7 34 02 FB | 	rdlong	local08, fp
28a94     1A 33 02 F6 | 	mov	local07, local08
28a98     01 32 06 F1 | 	add	local07, #1
28a9c     A7 32 62 FC | 	wrlong	local07, fp
28aa0     A8 4E 85 F1 | 	sub	fp, #168
28aa4     A7 32 02 FB | 	rdlong	local07, fp
28aa8     19 37 02 F6 | 	mov	local09, local07
28aac     58 4E 05 F1 | 	add	fp, #88
28ab0     A7 38 02 F6 | 	mov	local10, fp
28ab4     A7 36 02 F1 | 	add	local09, fp
28ab8     1B 3B C2 FA | 	rdbyte	local11, local09
28abc     1A 3B 42 FC | 	wrbyte	local11, local08
28ac0     70 4E 85 F1 | 	sub	fp, #112
28ac4     20 00 90 FD | 	jmp	#LR__3419
28ac8                 | LR__3418
28ac8     C0 4E 05 F1 | 	add	fp, #192
28acc     A7 34 02 FB | 	rdlong	local08, fp
28ad0     1A 37 02 F6 | 	mov	local09, local08
28ad4     01 36 06 F1 | 	add	local09, #1
28ad8     A7 36 62 FC | 	wrlong	local09, fp
28adc     C0 4E 85 F1 | 	sub	fp, #192
28ae0     30 36 06 F6 | 	mov	local09, #48
28ae4     1A 61 48 FC | 	wrbyte	#48, local08
28ae8                 | LR__3419
28ae8     18 4E 05 F1 | 	add	fp, #24
28aec     A7 30 02 FB | 	rdlong	local06, fp
28af0     38 4E 05 F1 | 	add	fp, #56
28af4     A7 3C 02 FB | 	rdlong	local12, fp
28af8     50 4E 85 F1 | 	sub	fp, #80
28afc     1E 31 0A F2 | 	cmp	local06, local12 wz
28b00     5C 00 90 5D |  if_ne	jmp	#LR__3421
28b04     10 4F 05 F1 | 	add	fp, #272
28b08     A7 32 02 FB | 	rdlong	local07, fp
28b0c     10 4F 85 F1 | 	sub	fp, #272
28b10     19 37 0A F6 | 	mov	local09, local07 wz
28b14     28 00 90 5D |  if_ne	jmp	#LR__3420
28b18     54 4E 05 F1 | 	add	fp, #84
28b1c     A7 3A 02 FB | 	rdlong	local11, fp
28b20     1D 39 02 F6 | 	mov	local10, local11
28b24     01 38 86 F1 | 	sub	local10, #1
28b28     3C 4E 85 F1 | 	sub	fp, #60
28b2c     A7 3E 02 FB | 	rdlong	local13, fp
28b30     18 4E 85 F1 | 	sub	fp, #24
28b34     1F 41 02 F6 | 	mov	local14, local13
28b38     1C 41 52 F2 | 	cmps	local14, local10 wc
28b3c     20 00 90 3D |  if_ae	jmp	#LR__3421
28b40                 | LR__3420
28b40     C0 4E 05 F1 | 	add	fp, #192
28b44     A7 34 02 FB | 	rdlong	local08, fp
28b48     1A 3D 02 F6 | 	mov	local12, local08
28b4c     01 3C 06 F1 | 	add	local12, #1
28b50     A7 3C 62 FC | 	wrlong	local12, fp
28b54     C0 4E 85 F1 | 	sub	fp, #192
28b58     2E 36 06 F6 | 	mov	local09, #46
28b5c     1A 5D 48 FC | 	wrbyte	#46, local08
28b60                 | LR__3421
28b60     18 4E 05 F1 | 	add	fp, #24
28b64     A7 42 02 FB | 	rdlong	local15, fp
28b68     21 3D 02 F6 | 	mov	local12, local15
28b6c     01 3C 06 F1 | 	add	local12, #1
28b70     A7 3C 62 FC | 	wrlong	local12, fp
28b74     18 4E 85 F1 | 	sub	fp, #24
28b78     C4 FE 9F FD | 	jmp	#LR__3417
28b7c                 | LR__3422
28b7c                 | LR__3423
28b7c     34 4E 05 F1 | 	add	fp, #52
28b80     A7 26 0A FB | 	rdlong	local01, fp wz
28b84     34 4E 85 F1 | 	sub	fp, #52
28b88     A0 00 90 AD |  if_e	jmp	#LR__3427
28b8c     C0 4E 05 F1 | 	add	fp, #192
28b90     A7 26 02 FB | 	rdlong	local01, fp
28b94     01 26 86 F1 | 	sub	local01, #1
28b98     A7 26 62 FC | 	wrlong	local01, fp
28b9c     C0 4E 85 F1 | 	sub	fp, #192
28ba0     97 26 48 FB | 	callpa	#(@LR__3425-@LR__3424)>>2,fcache_load_ptr_
28ba4                 | LR__3424
28ba4     C0 4E 05 F1 | 	add	fp, #192
28ba8     A7 26 02 FB | 	rdlong	local01, fp
28bac     04 4E 05 F1 | 	add	fp, #4
28bb0     A7 2A 02 FB | 	rdlong	local03, fp
28bb4     C4 4E 85 F1 | 	sub	fp, #196
28bb8     15 27 5A F2 | 	cmps	local01, local03 wcz
28bbc     30 00 90 ED |  if_be	jmp	#LR__3426
28bc0     C0 4E 05 F1 | 	add	fp, #192
28bc4     A7 30 02 FB | 	rdlong	local06, fp
28bc8     C0 4E 85 F1 | 	sub	fp, #192
28bcc     18 2D C2 FA | 	rdbyte	local04, local06
28bd0     30 2C 0E F2 | 	cmp	local04, #48 wz
28bd4     18 00 90 5D |  if_ne	jmp	#LR__3426
28bd8     C0 4E 05 F1 | 	add	fp, #192
28bdc     A7 26 02 FB | 	rdlong	local01, fp
28be0     01 26 86 F1 | 	sub	local01, #1
28be4     A7 26 62 FC | 	wrlong	local01, fp
28be8     C0 4E 85 F1 | 	sub	fp, #192
28bec     B4 FF 9F FD | 	jmp	#LR__3424
28bf0                 | LR__3425
28bf0                 | LR__3426
28bf0     C0 4E 05 F1 | 	add	fp, #192
28bf4     A7 28 02 FB | 	rdlong	local02, fp
28bf8     C0 4E 85 F1 | 	sub	fp, #192
28bfc     14 27 C2 FA | 	rdbyte	local01, local02
28c00     2E 26 0E F2 | 	cmp	local01, #46 wz
28c04     C0 4E 05 A1 |  if_e	add	fp, #192
28c08     A7 26 02 AB |  if_e	rdlong	local01, fp
28c0c     01 26 86 A1 |  if_e	sub	local01, #1
28c10     A7 26 62 AC |  if_e	wrlong	local01, fp
28c14     C0 4E 85 A1 |  if_e	sub	fp, #192
28c18     C0 4E 05 F1 | 	add	fp, #192
28c1c     A7 2A 02 FB | 	rdlong	local03, fp
28c20     01 2A 06 F1 | 	add	local03, #1
28c24     A7 2A 62 FC | 	wrlong	local03, fp
28c28     C0 4E 85 F1 | 	sub	fp, #192
28c2c                 | LR__3427
28c2c     24 4E 05 F1 | 	add	fp, #36
28c30     A7 26 0A FB | 	rdlong	local01, fp wz
28c34     24 4E 85 F1 | 	sub	fp, #36
28c38     B4 00 90 AD |  if_e	jmp	#LR__3430
28c3c     C0 4E 05 F1 | 	add	fp, #192
28c40     A7 28 02 FB | 	rdlong	local02, fp
28c44     14 2B 02 F6 | 	mov	local03, local02
28c48     01 2A 06 F1 | 	add	local03, #1
28c4c     A7 2A 62 FC | 	wrlong	local03, fp
28c50     90 4E 85 F1 | 	sub	fp, #144
28c54     A7 2C 02 FB | 	rdlong	local04, fp
28c58     14 2D 42 FC | 	wrbyte	local04, local02
28c5c     90 4E 05 F1 | 	add	fp, #144
28c60     A7 28 02 FB | 	rdlong	local02, fp
28c64     14 2B 02 F6 | 	mov	local03, local02
28c68     01 2A 06 F1 | 	add	local03, #1
28c6c     A7 2A 62 FC | 	wrlong	local03, fp
28c70     60 4E 85 F1 | 	sub	fp, #96
28c74     A7 2C 02 FB | 	rdlong	local04, fp
28c78     14 2D 42 FC | 	wrbyte	local04, local02
28c7c     48 4E 85 F1 | 	sub	fp, #72
28c80     A7 00 68 FC | 	wrlong	#0, fp
28c84     18 4E 85 F1 | 	sub	fp, #24
28c88                 | LR__3428
28c88     18 4E 05 F1 | 	add	fp, #24
28c8c     A7 28 02 FB | 	rdlong	local02, fp
28c90     44 4E 05 F1 | 	add	fp, #68
28c94     A7 2E 02 FB | 	rdlong	local05, fp
28c98     5C 4E 85 F1 | 	sub	fp, #92
28c9c     17 29 52 F2 | 	cmps	local02, local05 wc
28ca0     4C 00 90 3D |  if_ae	jmp	#LR__3429
28ca4     C0 4E 05 F1 | 	add	fp, #192
28ca8     A7 34 02 FB | 	rdlong	local08, fp
28cac     1A 3D 02 F6 | 	mov	local12, local08
28cb0     01 3C 06 F1 | 	add	local12, #1
28cb4     A7 3C 62 FC | 	wrlong	local12, fp
28cb8     A8 4E 85 F1 | 	sub	fp, #168
28cbc     A7 32 02 FB | 	rdlong	local07, fp
28cc0     19 37 02 F6 | 	mov	local09, local07
28cc4     98 4E 05 F1 | 	add	fp, #152
28cc8     A7 38 02 F6 | 	mov	local10, fp
28ccc     A7 36 02 F1 | 	add	local09, fp
28cd0     1B 3B C2 FA | 	rdbyte	local11, local09
28cd4     1A 3B 42 FC | 	wrbyte	local11, local08
28cd8     98 4E 85 F1 | 	sub	fp, #152
28cdc     A7 3C 02 FB | 	rdlong	local12, fp
28ce0     01 3C 06 F1 | 	add	local12, #1
28ce4     A7 3C 62 FC | 	wrlong	local12, fp
28ce8     18 4E 85 F1 | 	sub	fp, #24
28cec     98 FF 9F FD | 	jmp	#LR__3428
28cf0                 | LR__3429
28cf0                 | LR__3430
28cf0     C0 4E 05 F1 | 	add	fp, #192
28cf4     A7 26 02 FB | 	rdlong	local01, fp
28cf8     C0 4E 85 F1 | 	sub	fp, #192
28cfc     13 01 48 FC | 	wrbyte	#0, local01
28d00                 | LR__3431
28d00     6C 4E 05 F1 | 	add	fp, #108
28d04     A7 26 0A FB | 	rdlong	local01, fp wz
28d08     6C 4E 85 F1 | 	sub	fp, #108
28d0c     90 01 90 AD |  if_e	jmp	#LR__3442
28d10     48 4E 05 F1 | 	add	fp, #72
28d14     A7 2A 0A FB | 	rdlong	local03, fp wz
28d18     48 4E 85 F1 | 	sub	fp, #72
28d1c     80 01 90 AD |  if_e	jmp	#LR__3442
28d20     C4 4E 05 F1 | 	add	fp, #196
28d24     A7 12 02 FB | 	rdlong	arg01, fp
28d28     C4 4E 85 F1 | 	sub	fp, #196
28d2c     09 45 02 F6 | 	mov	local16, arg01
28d30     97 06 48 FB | 	callpa	#(@LR__3433-@LR__3432)>>2,fcache_load_ptr_
28d34                 | LR__3432
28d34     22 FB C9 FA | 	rdbyte	result1, local16 wz
28d38     01 44 06 51 |  if_ne	add	local16, #1
28d3c     F4 FF 9F 5D |  if_ne	jmp	#LR__3432
28d40                 | LR__3433
28d40     09 45 82 F1 | 	sub	local16, arg01
28d44     22 2D 02 F6 | 	mov	local04, local16
28d48     6C 4E 05 F1 | 	add	fp, #108
28d4c     A7 30 02 FB | 	rdlong	local06, fp
28d50     6C 4E 85 F1 | 	sub	fp, #108
28d54     18 2D 5A F2 | 	cmps	local04, local06 wcz
28d58     44 01 90 ED |  if_be	jmp	#LR__3442
28d5c     C4 4E 05 F1 | 	add	fp, #196
28d60     A7 26 02 FB | 	rdlong	local01, fp
28d64     5C 4E 05 F1 | 	add	fp, #92
28d68     A7 26 62 FC | 	wrlong	local01, fp
28d6c     FC 4E 85 F1 | 	sub	fp, #252
28d70     A7 26 0A FB | 	rdlong	local01, fp wz
28d74     24 4E 85 F1 | 	sub	fp, #36
28d78     20 00 90 AD |  if_e	jmp	#LR__3434
28d7c     B8 4E 05 F1 | 	add	fp, #184
28d80     A7 00 68 FC | 	wrlong	#0, fp
28d84     4C 4E 85 F1 | 	sub	fp, #76
28d88     A7 26 02 FB | 	rdlong	local01, fp
28d8c     B0 4E 05 F1 | 	add	fp, #176
28d90     A7 26 62 FC | 	wrlong	local01, fp
28d94     1C 4F 85 F1 | 	sub	fp, #284
28d98     24 00 90 FD | 	jmp	#LR__3435
28d9c                 | LR__3434
28d9c     6C 4E 05 F1 | 	add	fp, #108
28da0     A7 26 02 FB | 	rdlong	local01, fp
28da4     01 26 86 F1 | 	sub	local01, #1
28da8     4C 4E 05 F1 | 	add	fp, #76
28dac     A7 2A 02 FB | 	rdlong	local03, fp
28db0     15 27 82 F1 | 	sub	local01, local03
28db4     64 4E 05 F1 | 	add	fp, #100
28db8     A7 26 62 FC | 	wrlong	local01, fp
28dbc     1C 4F 85 F1 | 	sub	fp, #284
28dc0                 | LR__3435
28dc0     97 20 48 FB | 	callpa	#(@LR__3437-@LR__3436)>>2,fcache_load_ptr_
28dc4                 | LR__3436
28dc4     1C 4F 05 F1 | 	add	fp, #284
28dc8     A7 26 0A FB | 	rdlong	local01, fp wz
28dcc     1C 4F 85 F1 | 	sub	fp, #284
28dd0     30 00 90 AD |  if_e	jmp	#LR__3438
28dd4     20 4F 05 F1 | 	add	fp, #288
28dd8     A7 28 02 FB | 	rdlong	local02, fp
28ddc     14 2B 02 F6 | 	mov	local03, local02
28de0     01 2A 06 F1 | 	add	local03, #1
28de4     A7 2A 62 FC | 	wrlong	local03, fp
28de8     14 55 48 FC | 	wrbyte	#42, local02
28dec     04 4E 85 F1 | 	sub	fp, #4
28df0     A7 26 02 FB | 	rdlong	local01, fp
28df4     01 26 86 F1 | 	sub	local01, #1
28df8     A7 26 62 FC | 	wrlong	local01, fp
28dfc     1C 4F 85 F1 | 	sub	fp, #284
28e00     C0 FF 9F FD | 	jmp	#LR__3436
28e04                 | LR__3437
28e04                 | LR__3438
28e04     B8 4E 05 F1 | 	add	fp, #184
28e08     A7 26 0A FB | 	rdlong	local01, fp wz
28e0c     B8 4E 85 F1 | 	sub	fp, #184
28e10     70 00 90 AD |  if_e	jmp	#LR__3441
28e14     20 4F 05 F1 | 	add	fp, #288
28e18     A7 28 02 FB | 	rdlong	local02, fp
28e1c     14 2B 02 F6 | 	mov	local03, local02
28e20     01 2A 06 F1 | 	add	local03, #1
28e24     A7 2A 62 FC | 	wrlong	local03, fp
28e28     14 5D 48 FC | 	wrbyte	#46, local02
28e2c     04 4E 85 F1 | 	sub	fp, #4
28e30     A7 00 68 FC | 	wrlong	#0, fp
28e34     1C 4F 85 F1 | 	sub	fp, #284
28e38                 | LR__3439
28e38     1C 4F 05 F1 | 	add	fp, #284
28e3c     A7 28 02 FB | 	rdlong	local02, fp
28e40     64 4E 85 F1 | 	sub	fp, #100
28e44     A7 2E 02 FB | 	rdlong	local05, fp
28e48     B8 4E 85 F1 | 	sub	fp, #184
28e4c     17 29 52 F2 | 	cmps	local02, local05 wc
28e50     30 00 90 3D |  if_ae	jmp	#LR__3440
28e54     20 4F 05 F1 | 	add	fp, #288
28e58     A7 34 02 FB | 	rdlong	local08, fp
28e5c     1A 3D 02 F6 | 	mov	local12, local08
28e60     01 3C 06 F1 | 	add	local12, #1
28e64     A7 3C 62 FC | 	wrlong	local12, fp
28e68     1A 55 48 FC | 	wrbyte	#42, local08
28e6c     04 4E 85 F1 | 	sub	fp, #4
28e70     A7 3C 02 FB | 	rdlong	local12, fp
28e74     01 3C 06 F1 | 	add	local12, #1
28e78     A7 3C 62 FC | 	wrlong	local12, fp
28e7c     1C 4F 85 F1 | 	sub	fp, #284
28e80     B4 FF 9F FD | 	jmp	#LR__3439
28e84                 | LR__3440
28e84                 | LR__3441
28e84     20 4F 05 F1 | 	add	fp, #288
28e88     A7 28 02 FB | 	rdlong	local02, fp
28e8c     14 2B 02 F6 | 	mov	local03, local02
28e90     01 2A 06 F1 | 	add	local03, #1
28e94     A7 2A 62 FC | 	wrlong	local03, fp
28e98     20 4F 85 F1 | 	sub	fp, #288
28e9c     14 01 48 FC | 	wrbyte	#0, local02
28ea0                 | LR__3442
28ea0     04 4E 05 F1 | 	add	fp, #4
28ea4     A7 12 02 FB | 	rdlong	arg01, fp
28ea8     04 4E 05 F1 | 	add	fp, #4
28eac     A7 14 02 FB | 	rdlong	arg02, fp
28eb0     BC 4E 05 F1 | 	add	fp, #188
28eb4     A7 16 02 FB | 	rdlong	arg03, fp
28eb8     C4 4E 85 F1 | 	sub	fp, #196
28ebc     C4 EE BF FD | 	call	#__system___fmtstr
28ec0                 | LR__3443
28ec0     A7 F0 03 F6 | 	mov	ptra, fp
28ec4     B2 00 A0 FD | 	call	#popregs_
28ec8                 | __system___fmtfloat_ret
28ec8     2D 00 64 FD | 	ret
28ecc                 | 
28ecc                 | __system__Left_S
28ecc     04 4A 05 F6 | 	mov	COUNT_, #4
28ed0     A8 00 A0 FD | 	call	#pushregs_
28ed4     09 27 02 F6 | 	mov	local01, arg01
28ed8     0A 29 02 F6 | 	mov	local02, arg02
28edc     01 28 56 F2 | 	cmps	local02, #1 wc
28ee0     B4 01 00 CF 
28ee4     62 FB 05 C6 |  if_b	mov	result1, ##@LR__5393
28ee8     5C 00 90 CD |  if_b	jmp	#LR__3453
28eec     13 13 02 F6 | 	mov	arg01, local01
28ef0     09 2B 02 F6 | 	mov	local03, arg01
28ef4     97 06 48 FB | 	callpa	#(@LR__3451-@LR__3450)>>2,fcache_load_ptr_
28ef8                 | LR__3450
28ef8     15 FB C9 FA | 	rdbyte	result1, local03 wz
28efc     01 2A 06 51 |  if_ne	add	local03, #1
28f00     F4 FF 9F 5D |  if_ne	jmp	#LR__3450
28f04                 | LR__3451
28f04     09 2B 82 F1 | 	sub	local03, arg01
28f08     15 FB 01 F6 | 	mov	result1, local03
28f0c     14 FB 59 F2 | 	cmps	result1, local02 wcz
28f10     13 FB 01 E6 |  if_be	mov	result1, local01
28f14     30 00 90 ED |  if_be	jmp	#LR__3453
28f18     14 13 02 F6 | 	mov	arg01, local02
28f1c     02 12 06 F1 | 	add	arg01, #2
28f20     CC 20 B0 FD | 	call	#__system___gc_alloc_managed
28f24     FD 2C 0A F6 | 	mov	local04, result1 wz
28f28     18 00 90 AD |  if_e	jmp	#LR__3452
28f2c     16 13 02 F6 | 	mov	arg01, local04
28f30     13 15 02 F6 | 	mov	arg02, local01
28f34     14 17 02 F6 | 	mov	arg03, local02
28f38     34 DE BF FD | 	call	#__system____builtin_memmove
28f3c     16 29 02 F1 | 	add	local02, local04
28f40     14 01 48 FC | 	wrbyte	#0, local02
28f44                 | LR__3452
28f44     16 FB 01 F6 | 	mov	result1, local04
28f48                 | LR__3453
28f48     A7 F0 03 F6 | 	mov	ptra, fp
28f4c     B2 00 A0 FD | 	call	#popregs_
28f50                 | __system__Left_S_ret
28f50     2D 00 64 FD | 	ret
28f54                 | 
28f54                 | __system__Right_S
28f54     05 4A 05 F6 | 	mov	COUNT_, #5
28f58     A8 00 A0 FD | 	call	#pushregs_
28f5c     09 27 02 F6 | 	mov	local01, arg01
28f60     0A 29 02 F6 | 	mov	local02, arg02
28f64     01 28 56 F2 | 	cmps	local02, #1 wc
28f68     B4 01 00 CF 
28f6c     63 FB 05 C6 |  if_b	mov	result1, ##@LR__5394
28f70     64 00 90 CD |  if_b	jmp	#LR__3463
28f74     13 13 02 F6 | 	mov	arg01, local01
28f78     09 2B 02 F6 | 	mov	local03, arg01
28f7c     97 06 48 FB | 	callpa	#(@LR__3461-@LR__3460)>>2,fcache_load_ptr_
28f80                 | LR__3460
28f80     15 FB C9 FA | 	rdbyte	result1, local03 wz
28f84     01 2A 06 51 |  if_ne	add	local03, #1
28f88     F4 FF 9F 5D |  if_ne	jmp	#LR__3460
28f8c                 | LR__3461
28f8c     09 2B 82 F1 | 	sub	local03, arg01
28f90     15 FB 01 F6 | 	mov	result1, local03
28f94     FD 2C 02 F6 | 	mov	local04, result1
28f98     14 2D 5A F2 | 	cmps	local04, local02 wcz
28f9c     13 FB 01 E6 |  if_be	mov	result1, local01
28fa0     34 00 90 ED |  if_be	jmp	#LR__3463
28fa4     14 13 02 F6 | 	mov	arg01, local02
28fa8     02 12 06 F1 | 	add	arg01, #2
28fac     40 20 B0 FD | 	call	#__system___gc_alloc_managed
28fb0     FD 2E 0A F6 | 	mov	local05, result1 wz
28fb4     1C 00 90 AD |  if_e	jmp	#LR__3462
28fb8     14 2D 82 F1 | 	sub	local04, local02
28fbc     13 2D 02 F1 | 	add	local04, local01
28fc0     01 28 06 F1 | 	add	local02, #1
28fc4     17 13 02 F6 | 	mov	arg01, local05
28fc8     16 15 02 F6 | 	mov	arg02, local04
28fcc     14 17 02 F6 | 	mov	arg03, local02
28fd0     9C DD BF FD | 	call	#__system____builtin_memmove
28fd4                 | LR__3462
28fd4     17 FB 01 F6 | 	mov	result1, local05
28fd8                 | LR__3463
28fd8     A7 F0 03 F6 | 	mov	ptra, fp
28fdc     B2 00 A0 FD | 	call	#popregs_
28fe0                 | __system__Right_S_ret
28fe0     2D 00 64 FD | 	ret
28fe4                 | 
28fe4                 | __system__Mid_S
28fe4     05 4A 05 F6 | 	mov	COUNT_, #5
28fe8     A8 00 A0 FD | 	call	#pushregs_
28fec     09 27 02 F6 | 	mov	local01, arg01
28ff0     0A 29 02 F6 | 	mov	local02, arg02
28ff4     01 16 56 F2 | 	cmps	arg03, #1 wc
28ff8     B4 01 00 CF 
28ffc     64 FB 05 C6 |  if_b	mov	result1, ##@LR__5395
29000     80 00 90 CD |  if_b	jmp	#LR__3473
29004     01 28 86 F1 | 	sub	local02, #1
29008     00 28 56 F3 | 	fges	local02, #0 wc
2900c     13 13 02 F6 | 	mov	arg01, local01
29010     09 2B 02 F6 | 	mov	local03, arg01
29014     97 06 48 FB | 	callpa	#(@LR__3471-@LR__3470)>>2,fcache_load_ptr_
29018                 | LR__3470
29018     15 FB C9 FA | 	rdbyte	result1, local03 wz
2901c     01 2A 06 51 |  if_ne	add	local03, #1
29020     F4 FF 9F 5D |  if_ne	jmp	#LR__3470
29024                 | LR__3471
29024     09 2B 82 F1 | 	sub	local03, arg01
29028     15 FB 01 F6 | 	mov	result1, local03
2902c     FD 14 02 F6 | 	mov	arg02, result1
29030     14 15 52 F2 | 	cmps	arg02, local02 wc
29034     B4 01 00 CF 
29038     65 FB 05 C6 |  if_b	mov	result1, ##@LR__5396
2903c     44 00 90 CD |  if_b	jmp	#LR__3473
29040     0A 2D 02 F6 | 	mov	local04, arg02
29044     14 2D 82 F1 | 	sub	local04, local02
29048     0B 2D 5A F2 | 	cmps	local04, arg03 wcz
2904c     0B 2D 02 16 |  if_a	mov	local04, arg03
29050     16 13 02 F6 | 	mov	arg01, local04
29054     02 12 06 F1 | 	add	arg01, #2
29058     94 1F B0 FD | 	call	#__system___gc_alloc_managed
2905c     FD 2E 0A F6 | 	mov	local05, result1 wz
29060     1C 00 90 AD |  if_e	jmp	#LR__3472
29064     13 29 02 F1 | 	add	local02, local01
29068     17 13 02 F6 | 	mov	arg01, local05
2906c     14 15 02 F6 | 	mov	arg02, local02
29070     16 17 02 F6 | 	mov	arg03, local04
29074     F8 DC BF FD | 	call	#__system____builtin_memmove
29078     17 2D 02 F1 | 	add	local04, local05
2907c     16 01 48 FC | 	wrbyte	#0, local04
29080                 | LR__3472
29080     17 FB 01 F6 | 	mov	result1, local05
29084                 | LR__3473
29084     A7 F0 03 F6 | 	mov	ptra, fp
29088     B2 00 A0 FD | 	call	#popregs_
2908c                 | __system__Mid_S_ret
2908c     2D 00 64 FD | 	ret
29090                 | 
29090                 | __system__Chr_S
29090     01 4A 05 F6 | 	mov	COUNT_, #1
29094     A8 00 A0 FD | 	call	#pushregs_
29098     09 27 02 F6 | 	mov	local01, arg01
2909c     03 12 06 F6 | 	mov	arg01, #3
290a0     4C 1F B0 FD | 	call	#__system___gc_alloc_managed
290a4     00 FA 4D F2 | 	cmps	result1, #0 wz
290a8     FD 26 42 5C |  if_ne	wrbyte	local01, result1
290ac     01 FA 05 51 |  if_ne	add	result1, #1
290b0     FD 00 48 5C |  if_ne	wrbyte	#0, result1
290b4     01 FA 85 51 |  if_ne	sub	result1, #1
290b8     A7 F0 03 F6 | 	mov	ptra, fp
290bc     B2 00 A0 FD | 	call	#popregs_
290c0                 | __system__Chr_S_ret
290c0     2D 00 64 FD | 	ret
290c4                 | 
290c4                 | __system__str_S
290c4     02 4A 05 F6 | 	mov	COUNT_, #2
290c8     A8 00 A0 FD | 	call	#pushregs_
290cc     09 27 02 F6 | 	mov	local01, arg01
290d0     10 12 06 F6 | 	mov	arg01, #16
290d4     18 1F B0 FD | 	call	#__system___gc_alloc_managed
290d8     FD 28 0A F6 | 	mov	local02, result1 wz
290dc     30 00 90 AD |  if_e	jmp	#LR__3480
290e0     F8 13 02 F6 | 	mov	arg01, ptra
290e4     08 F0 07 F1 | 	add	ptra, #8
290e8     09 29 62 FC | 	wrlong	local02, arg01
290ec     04 12 06 F1 | 	add	arg01, #4
290f0     09 01 68 FC | 	wrlong	#0, arg01
290f4     04 12 86 F1 | 	sub	arg01, #4
290f8     00 58 05 FF 
290fc     00 12 46 F5 | 	or	arg01, ##179306496
29100     00 14 06 F6 | 	mov	arg02, #0
29104     13 17 02 F6 | 	mov	arg03, local01
29108     67 18 06 F6 | 	mov	arg04, #103
2910c     90 EE BF FD | 	call	#__system___fmtfloat
29110                 | LR__3480
29110     14 FB 01 F6 | 	mov	result1, local02
29114     A7 F0 03 F6 | 	mov	ptra, fp
29118     B2 00 A0 FD | 	call	#popregs_
2911c                 | __system__str_S_ret
2911c     2D 00 64 FD | 	ret
29120                 | 
29120                 | __system__Number_S
29120     08 4A 05 F6 | 	mov	COUNT_, #8
29124     A8 00 A0 FD | 	call	#pushregs_
29128     09 27 02 F6 | 	mov	local01, arg01
2912c     0A 29 0A F6 | 	mov	local02, arg02 wz
29130     0B 2B 02 F6 | 	mov	local03, arg03
29134     3C 00 90 5D |  if_ne	jmp	#LR__3492
29138     01 28 06 F6 | 	mov	local02, #1
2913c     15 2D 02 F6 | 	mov	local04, local03
29140     01 2E 06 F6 | 	mov	local05, #1
29144     97 16 48 FB | 	callpa	#(@LR__3491-@LR__3490)>>2,fcache_load_ptr_
29148                 | LR__3490
29148     00 30 06 F6 | 	mov	local06, #0
2914c     13 2D 1A F2 | 	cmp	local04, local01 wcz
29150     01 30 66 E6 |  if_be	neg	local06, #1
29154     16 2F 12 F2 | 	cmp	local05, local04 wc
29158     19 33 A2 F1 | 	subx	local07, local07
2915c     19 31 CA F7 | 	test	local06, local07 wz
29160     15 2D 02 5D |  if_ne	qmul	local04, local03
29164     16 2F 02 56 |  if_ne	mov	local05, local04
29168     01 28 06 51 |  if_ne	add	local02, #1
2916c     18 2C 62 5D |  if_ne	getqx	local04
29170     D4 FF 9F 5D |  if_ne	jmp	#LR__3490
29174                 | LR__3491
29174                 | LR__3492
29174     20 28 36 F3 | 	fle	local02, #32 wc
29178     14 13 02 F6 | 	mov	arg01, local02
2917c     02 12 06 F1 | 	add	arg01, #2
29180     6C 1E B0 FD | 	call	#__system___gc_alloc_managed
29184     FD 30 02 F6 | 	mov	local06, result1
29188     14 33 02 F6 | 	mov	local07, local02
2918c     18 33 02 F1 | 	add	local07, local06
29190     19 01 48 FC | 	wrbyte	#0, local07
29194     97 1A 48 FB | 	callpa	#(@LR__3494-@LR__3493)>>2,fcache_load_ptr_
29198                 | LR__3493
29198     01 28 16 F2 | 	cmp	local02, #1 wc
2919c     2C 00 90 CD |  if_b	jmp	#LR__3495
291a0     15 27 12 FD | 	qdiv	local01, local03
291a4     01 28 86 F1 | 	sub	local02, #1
291a8     14 33 02 F6 | 	mov	local07, local02
291ac     18 33 02 F1 | 	add	local07, local06
291b0     19 34 62 FD | 	getqy	local08
291b4     0A 34 16 F2 | 	cmp	local08, #10 wc
291b8     30 34 06 C1 |  if_b	add	local08, #48
291bc     37 34 06 31 |  if_ae	add	local08, #55
291c0     19 35 42 FC | 	wrbyte	local08, local07
291c4     18 26 62 FD | 	getqx	local01
291c8     CC FF 9F FD | 	jmp	#LR__3493
291cc                 | LR__3494
291cc                 | LR__3495
291cc     18 FB 01 F6 | 	mov	result1, local06
291d0     A7 F0 03 F6 | 	mov	ptra, fp
291d4     B2 00 A0 FD | 	call	#popregs_
291d8                 | __system__Number_S_ret
291d8     2D 00 64 FD | 	ret
291dc                 | 
291dc                 | __system__LCase_S
291dc     07 4A 05 F6 | 	mov	COUNT_, #7
291e0     A8 00 A0 FD | 	call	#pushregs_
291e4     09 27 02 F6 | 	mov	local01, arg01
291e8     09 29 02 F6 | 	mov	local02, arg01
291ec     97 06 48 FB | 	callpa	#(@LR__3501-@LR__3500)>>2,fcache_load_ptr_
291f0                 | LR__3500
291f0     14 FB C9 FA | 	rdbyte	result1, local02 wz
291f4     01 28 06 51 |  if_ne	add	local02, #1
291f8     F4 FF 9F 5D |  if_ne	jmp	#LR__3500
291fc                 | LR__3501
291fc     09 29 82 F1 | 	sub	local02, arg01
29200     14 FB 01 F6 | 	mov	result1, local02
29204     FD 28 0A F6 | 	mov	local02, result1 wz
29208     B4 01 00 AF 
2920c     66 FB 05 A6 |  if_e	mov	result1, ##@LR__5397
29210     7C 00 90 AD |  if_e	jmp	#LR__3507
29214     14 13 02 F6 | 	mov	arg01, local02
29218     02 12 06 F1 | 	add	arg01, #2
2921c     D0 1D B0 FD | 	call	#__system___gc_alloc_managed
29220     FD 2A 0A F6 | 	mov	local03, result1 wz
29224     64 00 90 AD |  if_e	jmp	#LR__3506
29228     01 2C 66 F6 | 	neg	local04, #1
2922c     97 26 48 FB | 	callpa	#(@LR__3505-@LR__3502)>>2,fcache_load_ptr_
29230                 | LR__3502
29230     01 2C 06 F1 | 	add	local04, #1
29234     16 2F 02 F6 | 	mov	local05, local04
29238     13 2F 02 F1 | 	add	local05, local01
2923c     17 31 C2 FA | 	rdbyte	local06, local05
29240     41 30 56 F2 | 	cmps	local06, #65 wc
29244     18 00 90 CD |  if_b	jmp	#LR__3503
29248     5B 30 56 F2 | 	cmps	local06, #91 wc
2924c     16 33 02 C6 |  if_b	mov	local07, local04
29250     15 33 02 C1 |  if_b	add	local07, local03
29254     20 30 06 C1 |  if_b	add	local06, #32
29258     19 31 42 CC |  if_b	wrbyte	local06, local07
2925c     0C 00 90 CD |  if_b	jmp	#LR__3504
29260                 | LR__3503
29260     16 33 02 F6 | 	mov	local07, local04
29264     15 33 02 F1 | 	add	local07, local03
29268     19 31 42 FC | 	wrbyte	local06, local07
2926c                 | LR__3504
2926c     14 31 02 F6 | 	mov	local06, local02
29270     01 30 86 F1 | 	sub	local06, #1
29274     18 2D 0A F2 | 	cmp	local04, local06 wz
29278     B4 FF 9F 5D |  if_ne	jmp	#LR__3502
2927c                 | LR__3505
2927c     15 29 02 F1 | 	add	local02, local03
29280     14 01 48 FC | 	wrbyte	#0, local02
29284     15 FB 01 F6 | 	mov	result1, local03
29288     04 00 90 FD | 	jmp	#LR__3507
2928c                 | LR__3506
2928c     15 FB 01 F6 | 	mov	result1, local03
29290                 | LR__3507
29290     A7 F0 03 F6 | 	mov	ptra, fp
29294     B2 00 A0 FD | 	call	#popregs_
29298                 | __system__LCase_S_ret
29298     2D 00 64 FD | 	ret
2929c                 | 
2929c                 | __system__LTrim_S
2929c     05 4A 05 F6 | 	mov	COUNT_, #5
292a0     A8 00 A0 FD | 	call	#pushregs_
292a4     09 27 02 F6 | 	mov	local01, arg01
292a8     09 29 02 F6 | 	mov	local02, arg01
292ac     97 06 48 FB | 	callpa	#(@LR__3511-@LR__3510)>>2,fcache_load_ptr_
292b0                 | LR__3510
292b0     14 FB C9 FA | 	rdbyte	result1, local02 wz
292b4     01 28 06 51 |  if_ne	add	local02, #1
292b8     F4 FF 9F 5D |  if_ne	jmp	#LR__3510
292bc                 | LR__3511
292bc     09 29 82 F1 | 	sub	local02, arg01
292c0     14 FB 01 F6 | 	mov	result1, local02
292c4     FD 28 0A F6 | 	mov	local02, result1 wz
292c8     B4 01 00 AF 
292cc     67 FB 05 A6 |  if_e	mov	result1, ##@LR__5398
292d0     7C 00 90 AD |  if_e	jmp	#LR__3516
292d4     00 2A 06 F6 | 	mov	local03, #0
292d8     14 2D 02 F6 | 	mov	local04, local02
292dc                 | LR__3512
292dc     16 2B 52 F2 | 	cmps	local03, local04 wc
292e0     68 00 90 3D |  if_ae	jmp	#LR__3515
292e4     15 17 02 F6 | 	mov	arg03, local03
292e8     13 17 02 F1 | 	add	arg03, local01
292ec     0B 17 C2 FA | 	rdbyte	arg03, arg03
292f0     20 16 0E F2 | 	cmp	arg03, #32 wz
292f4     4C 00 90 AD |  if_e	jmp	#LR__3514
292f8     14 13 02 F6 | 	mov	arg01, local02
292fc     15 13 82 F1 | 	sub	arg01, local03
29300     02 12 06 F1 | 	add	arg01, #2
29304     E8 1C B0 FD | 	call	#__system___gc_alloc_managed
29308     FD 2E 0A F6 | 	mov	local05, result1 wz
2930c     2C 00 90 AD |  if_e	jmp	#LR__3513
29310     15 15 02 F6 | 	mov	arg02, local03
29314     13 15 02 F1 | 	add	arg02, local01
29318     14 17 02 F6 | 	mov	arg03, local02
2931c     15 17 82 F1 | 	sub	arg03, local03
29320     17 13 02 F6 | 	mov	arg01, local05
29324     48 DA BF FD | 	call	#__system____builtin_memmove
29328     15 29 82 F1 | 	sub	local02, local03
2932c     17 29 02 F1 | 	add	local02, local05
29330     14 01 48 FC | 	wrbyte	#0, local02
29334     17 FB 01 F6 | 	mov	result1, local05
29338     14 00 90 FD | 	jmp	#LR__3516
2933c                 | LR__3513
2933c     17 FB 01 F6 | 	mov	result1, local05
29340     0C 00 90 FD | 	jmp	#LR__3516
29344                 | LR__3514
29344     01 2A 06 F1 | 	add	local03, #1
29348     90 FF 9F FD | 	jmp	#LR__3512
2934c                 | LR__3515
2934c     13 FB 01 F6 | 	mov	result1, local01
29350                 | LR__3516
29350     A7 F0 03 F6 | 	mov	ptra, fp
29354     B2 00 A0 FD | 	call	#popregs_
29358                 | __system__LTrim_S_ret
29358     2D 00 64 FD | 	ret
2935c                 | 
2935c                 | __system__RTrim_S
2935c     04 4A 05 F6 | 	mov	COUNT_, #4
29360     A8 00 A0 FD | 	call	#pushregs_
29364     09 27 02 F6 | 	mov	local01, arg01
29368     09 29 02 F6 | 	mov	local02, arg01
2936c     97 06 48 FB | 	callpa	#(@LR__3521-@LR__3520)>>2,fcache_load_ptr_
29370                 | LR__3520
29370     14 FB C9 FA | 	rdbyte	result1, local02 wz
29374     01 28 06 51 |  if_ne	add	local02, #1
29378     F4 FF 9F 5D |  if_ne	jmp	#LR__3520
2937c                 | LR__3521
2937c     09 29 82 F1 | 	sub	local02, arg01
29380     14 FB 01 F6 | 	mov	result1, local02
29384     FD 28 0A F6 | 	mov	local02, result1 wz
29388     B4 01 00 AF 
2938c     68 FB 05 A6 |  if_e	mov	result1, ##@LR__5399
29390     74 00 90 AD |  if_e	jmp	#LR__3525
29394     14 2B 02 F6 | 	mov	local03, local02
29398     01 2A 86 F1 | 	sub	local03, #1
2939c                 | LR__3522
2939c     15 15 02 F6 | 	mov	arg02, local03
293a0     13 15 02 F1 | 	add	arg02, local01
293a4     0A 29 C2 FA | 	rdbyte	local02, arg02
293a8     20 28 0E F2 | 	cmp	local02, #32 wz
293ac     44 00 90 AD |  if_e	jmp	#LR__3524
293b0     15 13 02 F6 | 	mov	arg01, local03
293b4     02 12 06 F1 | 	add	arg01, #2
293b8     34 1C B0 FD | 	call	#__system___gc_alloc_managed
293bc     FD 2C 0A F6 | 	mov	local04, result1 wz
293c0     28 00 90 AD |  if_e	jmp	#LR__3523
293c4     15 17 02 F6 | 	mov	arg03, local03
293c8     01 16 06 F1 | 	add	arg03, #1
293cc     16 13 02 F6 | 	mov	arg01, local04
293d0     13 15 02 F6 | 	mov	arg02, local01
293d4     98 D9 BF FD | 	call	#__system____builtin_memmove
293d8     01 2A 06 F1 | 	add	local03, #1
293dc     16 2B 02 F1 | 	add	local03, local04
293e0     15 01 48 FC | 	wrbyte	#0, local03
293e4     16 FB 01 F6 | 	mov	result1, local04
293e8     1C 00 90 FD | 	jmp	#LR__3525
293ec                 | LR__3523
293ec     16 FB 01 F6 | 	mov	result1, local04
293f0     14 00 90 FD | 	jmp	#LR__3525
293f4                 | LR__3524
293f4     01 2A 86 F1 | 	sub	local03, #1
293f8     00 2A 56 F2 | 	cmps	local03, #0 wc
293fc     9C FF 9F 3D |  if_ae	jmp	#LR__3522
29400     B4 01 00 FF 
29404     69 FB 05 F6 | 	mov	result1, ##@LR__5400
29408                 | LR__3525
29408     A7 F0 03 F6 | 	mov	ptra, fp
2940c     B2 00 A0 FD | 	call	#popregs_
29410                 | __system__RTrim_S_ret
29410     2D 00 64 FD | 	ret
29414                 | 
29414                 | __system__Instr
29414     07 4A 05 F6 | 	mov	COUNT_, #7
29418     A8 00 A0 FD | 	call	#pushregs_
2941c     09 27 02 F6 | 	mov	local01, arg01
29420     0A 29 02 F6 | 	mov	local02, arg02
29424     0B 2B 02 F6 | 	mov	local03, arg03
29428     15 13 02 F6 | 	mov	arg01, local03
2942c     09 2D 02 F6 | 	mov	local04, arg01
29430     97 06 48 FB | 	callpa	#(@LR__3531-@LR__3530)>>2,fcache_load_ptr_
29434                 | LR__3530
29434     16 FB C9 FA | 	rdbyte	result1, local04 wz
29438     01 2C 06 51 |  if_ne	add	local04, #1
2943c     F4 FF 9F 5D |  if_ne	jmp	#LR__3530
29440                 | LR__3531
29440     09 2D 82 F1 | 	sub	local04, arg01
29444     16 2F 02 F6 | 	mov	local05, local04
29448     14 13 02 F6 | 	mov	arg01, local02
2944c     09 2D 02 F6 | 	mov	local04, arg01
29450     97 06 48 FB | 	callpa	#(@LR__3533-@LR__3532)>>2,fcache_load_ptr_
29454                 | LR__3532
29454     16 FB C9 FA | 	rdbyte	result1, local04 wz
29458     01 2C 06 51 |  if_ne	add	local04, #1
2945c     F4 FF 9F 5D |  if_ne	jmp	#LR__3532
29460                 | LR__3533
29460     09 2D 82 F1 | 	sub	local04, arg01
29464     16 FB 01 F6 | 	mov	result1, local04
29468     FD 18 0A F6 | 	mov	arg04, result1 wz
2946c     00 FA 05 A6 |  if_e	mov	result1, #0
29470     98 00 90 AD |  if_e	jmp	#LR__3537
29474     00 2E 0E F2 | 	cmp	local05, #0 wz
29478     00 FA 05 A6 |  if_e	mov	result1, #0
2947c     8C 00 90 AD |  if_e	jmp	#LR__3537
29480     0C 27 5A F2 | 	cmps	local01, arg04 wcz
29484     00 FA 05 16 |  if_a	mov	result1, #0
29488     80 00 90 1D |  if_a	jmp	#LR__3537
2948c     01 26 56 F2 | 	cmps	local01, #1 wc
29490     01 26 06 C6 |  if_b	mov	local01, #1
29494     15 31 C2 FA | 	rdbyte	local06, local03
29498     01 2E 0E F2 | 	cmp	local05, #1 wz
2949c     18 00 90 5D |  if_ne	jmp	#LR__3534
294a0     14 13 02 F6 | 	mov	arg01, local02
294a4     18 15 02 F6 | 	mov	arg02, local06
294a8     13 17 02 F6 | 	mov	arg03, local01
294ac     00 18 06 F6 | 	mov	arg04, #0
294b0     14 37 B0 FD | 	call	#__system____ScanForChar
294b4     54 00 90 FD | 	jmp	#LR__3537
294b8                 | LR__3534
294b8     13 33 02 F6 | 	mov	local07, local01
294bc                 | LR__3535
294bc     14 13 02 F6 | 	mov	arg01, local02
294c0     18 15 02 F6 | 	mov	arg02, local06
294c4     19 17 02 F6 | 	mov	arg03, local07
294c8     00 18 06 F6 | 	mov	arg04, #0
294cc     F8 36 B0 FD | 	call	#__system____ScanForChar
294d0     FD 32 0A F6 | 	mov	local07, result1 wz
294d4     30 00 90 AD |  if_e	jmp	#LR__3536
294d8     17 17 02 F6 | 	mov	arg03, local05
294dc     14 13 02 F6 | 	mov	arg01, local02
294e0     19 15 02 F6 | 	mov	arg02, local07
294e4     FC FA BF FD | 	call	#__system__Mid_S
294e8     FD 12 02 F6 | 	mov	arg01, result1
294ec     15 15 02 F6 | 	mov	arg02, local03
294f0     84 D9 BF FD | 	call	#__system___string_cmp
294f4     00 FA 0D F2 | 	cmp	result1, #0 wz
294f8     19 FB 01 A6 |  if_e	mov	result1, local07
294fc     0C 00 90 AD |  if_e	jmp	#LR__3537
29500     17 33 02 F1 | 	add	local07, local05
29504     B4 FF 9F FD | 	jmp	#LR__3535
29508                 | LR__3536
29508     00 FA 05 F6 | 	mov	result1, #0
2950c                 | LR__3537
2950c     A7 F0 03 F6 | 	mov	ptra, fp
29510     B2 00 A0 FD | 	call	#popregs_
29514                 | __system__Instr_ret
29514     2D 00 64 FD | 	ret
29518                 | 
29518                 | __system__InstrRev
29518     07 4A 05 F6 | 	mov	COUNT_, #7
2951c     A8 00 A0 FD | 	call	#pushregs_
29520     09 27 02 F6 | 	mov	local01, arg01
29524     0A 29 02 F6 | 	mov	local02, arg02
29528     0B 2B 02 F6 | 	mov	local03, arg03
2952c     15 13 02 F6 | 	mov	arg01, local03
29530     09 2D 02 F6 | 	mov	local04, arg01
29534     97 06 48 FB | 	callpa	#(@LR__3541-@LR__3540)>>2,fcache_load_ptr_
29538                 | LR__3540
29538     16 FB C9 FA | 	rdbyte	result1, local04 wz
2953c     01 2C 06 51 |  if_ne	add	local04, #1
29540     F4 FF 9F 5D |  if_ne	jmp	#LR__3540
29544                 | LR__3541
29544     09 2D 82 F1 | 	sub	local04, arg01
29548     16 2F 02 F6 | 	mov	local05, local04
2954c     14 13 02 F6 | 	mov	arg01, local02
29550     09 2D 02 F6 | 	mov	local04, arg01
29554     97 06 48 FB | 	callpa	#(@LR__3543-@LR__3542)>>2,fcache_load_ptr_
29558                 | LR__3542
29558     16 FB C9 FA | 	rdbyte	result1, local04 wz
2955c     01 2C 06 51 |  if_ne	add	local04, #1
29560     F4 FF 9F 5D |  if_ne	jmp	#LR__3542
29564                 | LR__3543
29564     09 2D 82 F1 | 	sub	local04, arg01
29568     16 FB 01 F6 | 	mov	result1, local04
2956c     FD 18 0A F6 | 	mov	arg04, result1 wz
29570     00 FA 05 A6 |  if_e	mov	result1, #0
29574     98 00 90 AD |  if_e	jmp	#LR__3547
29578     00 2E 0E F2 | 	cmp	local05, #0 wz
2957c     00 FA 05 A6 |  if_e	mov	result1, #0
29580     8C 00 90 AD |  if_e	jmp	#LR__3547
29584     0C 27 5A F2 | 	cmps	local01, arg04 wcz
29588     0C 27 02 16 |  if_a	mov	local01, arg04
2958c     01 26 56 F2 | 	cmps	local01, #1 wc
29590     01 26 06 C6 |  if_b	mov	local01, #1
29594     15 31 C2 FA | 	rdbyte	local06, local03
29598     01 2E 0E F2 | 	cmp	local05, #1 wz
2959c     18 00 90 5D |  if_ne	jmp	#LR__3544
295a0     14 13 02 F6 | 	mov	arg01, local02
295a4     18 15 02 F6 | 	mov	arg02, local06
295a8     13 17 02 F6 | 	mov	arg03, local01
295ac     01 18 06 F6 | 	mov	arg04, #1
295b0     14 36 B0 FD | 	call	#__system____ScanForChar
295b4     58 00 90 FD | 	jmp	#LR__3547
295b8                 | LR__3544
295b8     17 33 02 F6 | 	mov	local07, local05
295bc     01 32 86 F1 | 	sub	local07, #1
295c0                 | LR__3545
295c0     14 13 02 F6 | 	mov	arg01, local02
295c4     18 15 02 F6 | 	mov	arg02, local06
295c8     19 17 02 F6 | 	mov	arg03, local07
295cc     01 18 06 F6 | 	mov	arg04, #1
295d0     F4 35 B0 FD | 	call	#__system____ScanForChar
295d4     FD 32 0A F6 | 	mov	local07, result1 wz
295d8     30 00 90 AD |  if_e	jmp	#LR__3546
295dc     17 17 02 F6 | 	mov	arg03, local05
295e0     14 13 02 F6 | 	mov	arg01, local02
295e4     19 15 02 F6 | 	mov	arg02, local07
295e8     F8 F9 BF FD | 	call	#__system__Mid_S
295ec     FD 12 02 F6 | 	mov	arg01, result1
295f0     15 15 02 F6 | 	mov	arg02, local03
295f4     80 D8 BF FD | 	call	#__system___string_cmp
295f8     00 FA 0D F2 | 	cmp	result1, #0 wz
295fc     19 FB 01 A6 |  if_e	mov	result1, local07
29600     0C 00 90 AD |  if_e	jmp	#LR__3547
29604     17 33 82 F1 | 	sub	local07, local05
29608     B4 FF 9F FD | 	jmp	#LR__3545
2960c                 | LR__3546
2960c     00 FA 05 F6 | 	mov	result1, #0
29610                 | LR__3547
29610     A7 F0 03 F6 | 	mov	ptra, fp
29614     B2 00 A0 FD | 	call	#popregs_
29618                 | __system__InstrRev_ret
29618     2D 00 64 FD | 	ret
2961c                 | 
2961c                 | __system___remove
2961c     06 4A 05 F6 | 	mov	COUNT_, #6
29620     A8 00 A0 FD | 	call	#pushregs_
29624     84 E7 05 F1 | 	add	ptr___system__dat__, #388
29628     F3 26 02 F6 | 	mov	local01, ptr___system__dat__
2962c     09 15 02 F6 | 	mov	arg02, arg01
29630     13 13 02 F6 | 	mov	arg01, local01
29634     00 16 06 F6 | 	mov	arg03, #0
29638     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2963c     A8 DF BF FD | 	call	#__system____getvfsforfile
29640     FD 28 0A F6 | 	mov	local02, result1 wz
29644     10 00 90 AD |  if_e	jmp	#LR__3550
29648     20 28 06 F1 | 	add	local02, #32
2964c     14 13 0A FB | 	rdlong	arg01, local02 wz
29650     20 28 86 F1 | 	sub	local02, #32
29654     14 00 90 5D |  if_ne	jmp	#LR__3551
29658                 | LR__3550
29658     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2965c     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
29660     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
29664     01 FA 65 F6 | 	neg	result1, #1
29668     A8 00 90 FD | 	jmp	#LR__3554
2966c                 | LR__3551
2966c     40 28 06 F1 | 	add	local02, #64
29670     14 2B 02 FB | 	rdlong	local03, local02
29674     15 2D 02 F6 | 	mov	local04, local03
29678     40 28 86 F1 | 	sub	local02, #64
2967c     13 2C 46 F7 | 	zerox	local04, #19
29680     14 2A 46 F0 | 	shr	local03, #20
29684     02 2A 66 F0 | 	shl	local03, #2
29688     ED 2A 02 F1 | 	add	local03, __methods__
2968c     15 2B 02 FB | 	rdlong	local03, local03
29690     13 13 02 F6 | 	mov	arg01, local01
29694     F2 2E 02 F6 | 	mov	local05, objptr
29698     16 E5 01 F6 | 	mov	objptr, local04
2969c     2D 2A 62 FD | 	call	local03
296a0     17 E5 01 F6 | 	mov	objptr, local05
296a4     FD 30 02 F6 | 	mov	local06, result1
296a8     FF FF 7F FF 
296ac     F2 31 0E F2 | 	cmp	local06, ##-14 wz
296b0     38 00 90 5D |  if_ne	jmp	#LR__3552
296b4     3C 28 06 F1 | 	add	local02, #60
296b8     14 31 02 FB | 	rdlong	local06, local02
296bc     18 2B 02 F6 | 	mov	local03, local06
296c0     13 30 46 F7 | 	zerox	local06, #19
296c4     14 2A 46 F0 | 	shr	local03, #20
296c8     02 2A 66 F0 | 	shl	local03, #2
296cc     ED 2A 02 F1 | 	add	local03, __methods__
296d0     15 2B 02 FB | 	rdlong	local03, local03
296d4     13 13 02 F6 | 	mov	arg01, local01
296d8     F2 2E 02 F6 | 	mov	local05, objptr
296dc     18 E5 01 F6 | 	mov	objptr, local06
296e0     2D 2A 62 FD | 	call	local03
296e4     17 E5 01 F6 | 	mov	objptr, local05
296e8     FD 30 02 F6 | 	mov	local06, result1
296ec                 | LR__3552
296ec     00 30 0E F2 | 	cmp	local06, #0 wz
296f0     1C 00 90 AD |  if_e	jmp	#LR__3553
296f4     18 13 6A F6 | 	neg	arg01, local06 wz
296f8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
296fc     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
29700     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
29704     01 FA 65 56 |  if_ne	neg	result1, #1
29708     00 FA 05 A6 |  if_e	mov	result1, #0
2970c     04 00 90 FD | 	jmp	#LR__3554
29710                 | LR__3553
29710     00 FA 05 F6 | 	mov	result1, #0
29714                 | LR__3554
29714     A7 F0 03 F6 | 	mov	ptra, fp
29718     B2 00 A0 FD | 	call	#popregs_
2971c                 | __system___remove_ret
2971c     2D 00 64 FD | 	ret
29720                 | 
29720                 | __system___mkdir
29720     05 4A 05 F6 | 	mov	COUNT_, #5
29724     A8 00 A0 FD | 	call	#pushregs_
29728     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2972c     F3 26 02 F6 | 	mov	local01, ptr___system__dat__
29730     09 15 02 F6 | 	mov	arg02, arg01
29734     13 13 02 F6 | 	mov	arg01, local01
29738     00 16 06 F6 | 	mov	arg03, #0
2973c     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
29740     A4 DE BF FD | 	call	#__system____getvfsforfile
29744     FD 28 0A F6 | 	mov	local02, result1 wz
29748     10 00 90 AD |  if_e	jmp	#LR__3560
2974c     20 28 06 F1 | 	add	local02, #32
29750     14 15 0A FB | 	rdlong	arg02, local02 wz
29754     20 28 86 F1 | 	sub	local02, #32
29758     14 00 90 5D |  if_ne	jmp	#LR__3561
2975c                 | LR__3560
2975c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
29760     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
29764     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
29768     01 FA 65 F6 | 	neg	result1, #1
2976c     60 00 90 FD | 	jmp	#LR__3563
29770                 | LR__3561
29770     38 28 06 F1 | 	add	local02, #56
29774     14 2B 02 FB | 	rdlong	local03, local02
29778     15 2D 02 F6 | 	mov	local04, local03
2977c     13 2A 46 F7 | 	zerox	local03, #19
29780     14 2C 46 F0 | 	shr	local04, #20
29784     02 2C 66 F0 | 	shl	local04, #2
29788     ED 2C 02 F1 | 	add	local04, __methods__
2978c     16 2D 02 FB | 	rdlong	local04, local04
29790     13 13 02 F6 | 	mov	arg01, local01
29794     FF 15 06 F6 | 	mov	arg02, #511
29798     F2 2E 02 F6 | 	mov	local05, objptr
2979c     15 E5 01 F6 | 	mov	objptr, local03
297a0     2D 2C 62 FD | 	call	local04
297a4     17 E5 01 F6 | 	mov	objptr, local05
297a8     FD 12 0A F6 | 	mov	arg01, result1 wz
297ac     1C 00 90 AD |  if_e	jmp	#LR__3562
297b0     09 13 6A F6 | 	neg	arg01, arg01 wz
297b4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
297b8     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
297bc     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
297c0     01 FA 65 56 |  if_ne	neg	result1, #1
297c4     00 FA 05 A6 |  if_e	mov	result1, #0
297c8     04 00 90 FD | 	jmp	#LR__3563
297cc                 | LR__3562
297cc     00 FA 05 F6 | 	mov	result1, #0
297d0                 | LR__3563
297d0     A7 F0 03 F6 | 	mov	ptra, fp
297d4     B2 00 A0 FD | 	call	#popregs_
297d8                 | __system___mkdir_ret
297d8     2D 00 64 FD | 	ret
297dc                 | 
297dc                 | __system___strerror
297dc     00 12 56 F2 | 	cmps	arg01, #0 wc
297e0     08 00 90 CD |  if_b	jmp	#LR__3570
297e4     1A 12 56 F2 | 	cmps	arg01, #26 wc
297e8     04 00 90 CD |  if_b	jmp	#LR__3571
297ec                 | LR__3570
297ec     19 12 06 F6 | 	mov	arg01, #25
297f0                 | LR__3571
297f0     02 12 66 F0 | 	shl	arg01, #2
297f4     01 00 00 FF 
297f8     D8 E6 05 F1 | 	add	ptr___system__dat__, ##728
297fc     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
29800     09 FB 01 FB | 	rdlong	result1, arg01
29804     01 00 00 FF 
29808     D8 E6 85 F1 | 	sub	ptr___system__dat__, ##728
2980c                 | __system___strerror_ret
2980c     2D 00 64 FD | 	ret
29810                 | 
29810                 | __system___int64_shl
29810     20 16 CE F7 | 	test	arg03, #32 wz
29814     09 15 02 56 |  if_ne	mov	arg02, arg01
29818     00 12 06 56 |  if_ne	mov	arg01, #0
2981c     1F 16 CE F7 | 	test	arg03, #31 wz
29820     18 00 90 AD |  if_e	jmp	#LR__3580
29824     0B 15 62 F0 | 	shl	arg02, arg03
29828     09 FB 01 F6 | 	mov	result1, arg01
2982c     0B FD 61 F6 | 	neg	result2, arg03
29830     FE FA 41 F0 | 	shr	result1, result2
29834     FD 14 42 F5 | 	or	arg02, result1
29838     0B 13 62 F0 | 	shl	arg01, arg03
2983c                 | LR__3580
2983c     0A FD 01 F6 | 	mov	result2, arg02
29840     09 FB 01 F6 | 	mov	result1, arg01
29844                 | __system___int64_shl_ret
29844     2D 00 64 FD | 	ret
29848                 | 
29848                 | __system___usepins
29848     14 E6 05 F1 | 	add	ptr___system__dat__, #20
2984c     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
29850     14 E6 85 F1 | 	sub	ptr___system__dat__, #20
29854     00 13 CA F7 | 	test	arg01, _var01 wz
29858     18 E6 05 A1 |  if_e	add	ptr___system__dat__, #24
2985c     F3 02 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
29860     18 E6 85 A1 |  if_e	sub	ptr___system__dat__, #24
29864     01 15 CA A7 |  if_e	test	arg02, _var02 wz
29868     00 FA 05 56 |  if_ne	mov	result1, #0
2986c     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
29870     14 E6 05 F1 | 	add	ptr___system__dat__, #20
29874     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
29878     09 03 42 F5 | 	or	_var02, arg01
2987c     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
29880     04 E6 05 F1 | 	add	ptr___system__dat__, #4
29884     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
29888     0A 03 42 F5 | 	or	_var02, arg02
2988c     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
29890     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
29894     01 FA 65 F6 | 	neg	result1, #1
29898                 | __system___usepins_ret
29898     2D 00 64 FD | 	ret
2989c                 | 
2989c                 | __system___freepins
2989c     14 E6 05 F1 | 	add	ptr___system__dat__, #20
298a0     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
298a4     09 01 22 F5 | 	andn	_var01, arg01
298a8     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
298ac     04 E6 05 F1 | 	add	ptr___system__dat__, #4
298b0     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
298b4     0A 01 22 F5 | 	andn	_var01, arg02
298b8     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
298bc     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
298c0                 | __system___freepins_ret
298c0     2D 00 64 FD | 	ret
298c4                 | 
298c4                 | __system___float_fromuns
298c4     09 17 0A F6 | 	mov	arg03, arg01 wz
298c8     0B FB 01 A6 |  if_e	mov	result1, arg03
298cc     24 00 90 AD |  if_e	jmp	#LR__3590
298d0     0B 15 92 F7 | 	encod	arg02, arg03 wc
298d4     01 14 06 C1 |  if_b	add	arg02, #1
298d8     01 14 86 F1 | 	sub	arg02, #1
298dc     1F 12 06 F6 | 	mov	arg01, #31
298e0     0A 13 82 F1 | 	sub	arg01, arg02
298e4     09 17 62 F0 | 	shl	arg03, arg01
298e8     02 16 46 F0 | 	shr	arg03, #2
298ec     00 12 06 F6 | 	mov	arg01, #0
298f0     4C 09 B0 FD | 	call	#__system___float_Pack
298f4                 | LR__3590
298f4                 | __system___float_fromuns_ret
298f4     2D 00 64 FD | 	ret
298f8                 | 
298f8                 | __system___float_add
298f8     0F 4A 05 F6 | 	mov	COUNT_, #15
298fc     A8 00 A0 FD | 	call	#pushregs_
29900     09 27 02 F6 | 	mov	local01, arg01
29904     0A 29 02 F6 | 	mov	local02, arg02
29908     00 2A 06 F6 | 	mov	local03, #0
2990c     13 2D 02 F6 | 	mov	local04, local01
29910     16 2F 02 F6 | 	mov	local05, local04
29914     16 2E 46 F7 | 	zerox	local05, #22
29918     16 31 02 F6 | 	mov	local06, local04
2991c     01 30 66 F0 | 	shl	local06, #1
29920     18 30 46 F0 | 	shr	local06, #24
29924     1F 2C 46 F0 | 	shr	local04, #31
29928     14 13 02 F6 | 	mov	arg01, local02
2992c     09 FB 01 F6 | 	mov	result1, arg01
29930     FD 32 02 F6 | 	mov	local07, result1
29934     19 35 02 F6 | 	mov	local08, local07
29938     16 34 46 F7 | 	zerox	local08, #22
2993c     19 37 02 F6 | 	mov	local09, local07
29940     01 36 66 F0 | 	shl	local09, #1
29944     18 36 46 F0 | 	shr	local09, #24
29948     1B 39 02 F6 | 	mov	local10, local09
2994c     1F 32 46 F0 | 	shr	local07, #31
29950     00 3A 06 F6 | 	mov	local11, #0
29954     00 3C 06 F6 | 	mov	local12, #0
29958     1C 31 12 F2 | 	cmp	local06, local10 wc
2995c     1C 31 0A 32 |  if_ae	cmp	local06, local10 wz
29960     2C 00 90 1D |  if_a	jmp	#LR__3600
29964     1A 2F 12 32 |  if_ae	cmp	local05, local08 wc
29968     24 00 90 3D |  if_ae	jmp	#LR__3600
2996c     17 3F 02 F6 | 	mov	local13, local05
29970     1A 2F 02 F6 | 	mov	local05, local08
29974     1F 35 02 F6 | 	mov	local08, local13
29978     18 3F 02 F6 | 	mov	local13, local06
2997c     1C 31 02 F6 | 	mov	local06, local10
29980     1F 39 02 F6 | 	mov	local10, local13
29984     16 3F 02 F6 | 	mov	local13, local04
29988     19 2D 02 F6 | 	mov	local04, local07
2998c     1F 33 02 F6 | 	mov	local07, local13
29990                 | LR__3600
29990     FF 30 0E F2 | 	cmp	local06, #255 wz
29994     70 01 90 AD |  if_e	jmp	#LR__3615
29998     00 30 0E F2 | 	cmp	local06, #0 wz
2999c     AC 01 90 AD |  if_e	jmp	#LR__3617
299a0     17 2E 26 F4 | 	bith	local05, #23
299a4                 | LR__3601
299a4     00 38 0E F2 | 	cmp	local10, #0 wz
299a8     F0 01 90 AD |  if_e	jmp	#LR__3621
299ac     17 34 26 F4 | 	bith	local08, #23
299b0                 | LR__3602
299b0     7F 30 86 F1 | 	sub	local06, #127
299b4     7F 38 86 F1 | 	sub	local10, #127
299b8     18 41 02 F6 | 	mov	local14, local06
299bc     1C 41 82 F1 | 	sub	local14, local10
299c0     97 14 48 FB | 	callpa	#(@LR__3604-@LR__3603)>>2,fcache_load_ptr_
299c4                 | LR__3603
299c4     20 40 56 F2 | 	cmps	local14, #32 wc
299c8     20 00 90 CD |  if_b	jmp	#LR__3605
299cc     1A 37 02 F6 | 	mov	local09, local08
299d0     00 3A 0E F2 | 	cmp	local11, #0 wz
299d4     6F 3A 62 FD | 	wrnz	local11
299d8     1D 37 42 F5 | 	or	local09, local11
299dc     1B 3B 02 F6 | 	mov	local11, local09
299e0     00 34 06 F6 | 	mov	local08, #0
299e4     20 40 86 F1 | 	sub	local14, #32
299e8     D8 FF 9F FD | 	jmp	#LR__3603
299ec                 | LR__3604
299ec                 | LR__3605
299ec     00 40 0E F2 | 	cmp	local14, #0 wz
299f0     38 00 90 AD |  if_e	jmp	#LR__3606
299f4     1A 3F 02 F6 | 	mov	local13, local08
299f8     20 38 06 F6 | 	mov	local10, #32
299fc     20 39 82 F1 | 	sub	local10, local14
29a00     1C 3F 62 F0 | 	shl	local13, local10
29a04     1D 39 02 F6 | 	mov	local10, local11
29a08     20 36 06 F6 | 	mov	local09, #32
29a0c     20 37 82 F1 | 	sub	local09, local14
29a10     1B 39 6A F0 | 	shl	local10, local09 wz
29a14     20 3B 42 F0 | 	shr	local11, local14
29a18     20 35 42 F0 | 	shr	local08, local14
29a1c     1F 3B 42 F5 | 	or	local11, local13
29a20     00 42 06 F6 | 	mov	local15, #0
29a24     01 42 06 56 |  if_ne	mov	local15, #1
29a28     21 3B 42 F5 | 	or	local11, local15
29a2c                 | LR__3606
29a2c     16 43 02 F6 | 	mov	local15, local04
29a30     19 43 62 F5 | 	xor	local15, local07
29a34     01 42 CE F7 | 	test	local15, #1 wz
29a38     18 00 90 AD |  if_e	jmp	#LR__3607
29a3c     1A 35 22 F6 | 	not	local08, local08
29a40     1D 3B 22 F6 | 	not	local11, local11
29a44     01 3A 0E F1 | 	add	local11, #1 wz
29a48     00 42 06 F6 | 	mov	local15, #0
29a4c     01 42 06 A6 |  if_e	mov	local15, #1
29a50     21 35 02 F1 | 	add	local08, local15
29a54                 | LR__3607
29a54     1D 3D 12 F1 | 	add	local12, local11 wc
29a58     1A 2F 22 F1 | 	addx	local05, local08
29a5c     00 2E 56 F2 | 	cmps	local05, #0 wc
29a60     1C 00 90 3D |  if_ae	jmp	#LR__3608
29a64     01 2C 66 F5 | 	xor	local04, #1
29a68     17 2F 22 F6 | 	not	local05, local05
29a6c     1E 3D 22 F6 | 	not	local12, local12
29a70     01 3C 0E F1 | 	add	local12, #1 wz
29a74     00 42 06 F6 | 	mov	local15, #0
29a78     01 42 06 A6 |  if_e	mov	local15, #1
29a7c     21 2F 02 F1 | 	add	local05, local15
29a80                 | LR__3608
29a80     00 80 00 FF 
29a84     00 2E 16 F2 | 	cmp	local05, ##16777216 wc
29a88     28 00 90 CD |  if_b	jmp	#LR__3609
29a8c     01 30 06 F1 | 	add	local06, #1
29a90     1E 41 02 F6 | 	mov	local14, local12
29a94     01 40 06 F5 | 	and	local14, #1
29a98     01 3C 46 F0 | 	shr	local12, #1
29a9c     17 43 02 F6 | 	mov	local15, local05
29aa0     1F 42 66 F0 | 	shl	local15, #31
29aa4     21 3D 42 F5 | 	or	local12, local15
29aa8     20 3D 42 F5 | 	or	local12, local14
29aac     01 2E 46 F0 | 	shr	local05, #1
29ab0     3C 00 90 FD | 	jmp	#LR__3614
29ab4                 | LR__3609
29ab4     00 40 00 FF 
29ab8     00 2E 16 F2 | 	cmp	local05, ##8388608 wc
29abc     30 00 90 3D |  if_ae	jmp	#LR__3613
29ac0     00 2E 0E F2 | 	cmp	local05, #0 wz
29ac4     00 3C 0E A2 |  if_e	cmp	local12, #0 wz
29ac8     08 2C 46 A5 |  if_e	or	local04, #8
29acc     01 2C 26 A5 |  if_e	andn	local04, #1
29ad0     1C 00 90 AD |  if_e	jmp	#LR__3612
29ad4                 | LR__3610
29ad4     00 40 00 FF 
29ad8     00 2E 16 F2 | 	cmp	local05, ##8388608 wc
29adc     10 00 90 3D |  if_ae	jmp	#LR__3611
29ae0     1E 3D 12 F1 | 	add	local12, local12 wc
29ae4     17 2F 22 F1 | 	addx	local05, local05
29ae8     01 30 86 F1 | 	sub	local06, #1
29aec     E4 FF 9F FD | 	jmp	#LR__3610
29af0                 | LR__3611
29af0                 | LR__3612
29af0                 | LR__3613
29af0                 | LR__3614
29af0     17 13 02 F6 | 	mov	arg01, local05
29af4     1E 15 02 F6 | 	mov	arg02, local12
29af8     18 17 02 F6 | 	mov	arg03, local06
29afc     16 19 02 F6 | 	mov	arg04, local04
29b00     08 35 B0 FD | 	call	#__system__pack_0683
29b04     DC 00 90 FD | 	jmp	#LR__3625
29b08                 | LR__3615
29b08     FF 38 0E F2 | 	cmp	local10, #255 wz
29b0c     10 00 90 5D |  if_ne	jmp	#LR__3616
29b10     16 33 0A F2 | 	cmp	local07, local04 wz
29b14     00 F8 3F 5F 
29b18     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
29b1c     C4 00 90 5D |  if_ne	jmp	#LR__3625
29b20                 | LR__3616
29b20     00 2E 0E F2 | 	cmp	local05, #0 wz
29b24     00 F8 3F 5F 
29b28     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
29b2c     B4 00 90 5D |  if_ne	jmp	#LR__3625
29b30     1E 15 02 F6 | 	mov	arg02, local12
29b34     18 17 02 F6 | 	mov	arg03, local06
29b38     16 19 02 F6 | 	mov	arg04, local04
29b3c     02 18 46 F5 | 	or	arg04, #2
29b40     17 13 02 F6 | 	mov	arg01, local05
29b44     C4 34 B0 FD | 	call	#__system__pack_0683
29b48     98 00 90 FD | 	jmp	#LR__3625
29b4c                 | LR__3617
29b4c     00 2E 0E F2 | 	cmp	local05, #0 wz
29b50     28 00 90 AD |  if_e	jmp	#LR__3620
29b54     01 2E 66 F0 | 	shl	local05, #1
29b58     97 0E 48 FB | 	callpa	#(@LR__3619-@LR__3618)>>2,fcache_load_ptr_
29b5c                 | LR__3618
29b5c     00 40 00 FF 
29b60     00 2E 16 F2 | 	cmp	local05, ##8388608 wc
29b64     18 43 02 C6 |  if_b	mov	local15, local06
29b68     01 42 86 C1 |  if_b	sub	local15, #1
29b6c     21 31 02 C6 |  if_b	mov	local06, local15
29b70     01 2E 66 C0 |  if_b	shl	local05, #1
29b74     E4 FF 9F CD |  if_b	jmp	#LR__3618
29b78                 | LR__3619
29b78     28 FE 9F FD | 	jmp	#LR__3601
29b7c                 | LR__3620
29b7c     19 2D 02 F5 | 	and	local04, local07
29b80     16 19 02 F6 | 	mov	arg04, local04
29b84     08 18 46 F5 | 	or	arg04, #8
29b88     00 12 06 F6 | 	mov	arg01, #0
29b8c     00 14 06 F6 | 	mov	arg02, #0
29b90     00 16 06 F6 | 	mov	arg03, #0
29b94     74 34 B0 FD | 	call	#__system__pack_0683
29b98     48 00 90 FD | 	jmp	#LR__3625
29b9c                 | LR__3621
29b9c     00 34 0E F2 | 	cmp	local08, #0 wz
29ba0     28 00 90 AD |  if_e	jmp	#LR__3624
29ba4     01 34 66 F0 | 	shl	local08, #1
29ba8     97 0E 48 FB | 	callpa	#(@LR__3623-@LR__3622)>>2,fcache_load_ptr_
29bac                 | LR__3622
29bac     00 40 00 FF 
29bb0     00 34 16 F2 | 	cmp	local08, ##8388608 wc
29bb4     1C 43 02 C6 |  if_b	mov	local15, local10
29bb8     01 42 86 C1 |  if_b	sub	local15, #1
29bbc     21 39 02 C6 |  if_b	mov	local10, local15
29bc0     01 34 66 C0 |  if_b	shl	local08, #1
29bc4     E4 FF 9F CD |  if_b	jmp	#LR__3622
29bc8                 | LR__3623
29bc8     E4 FD 9F FD | 	jmp	#LR__3602
29bcc                 | LR__3624
29bcc     7F 30 86 F1 | 	sub	local06, #127
29bd0     17 13 02 F6 | 	mov	arg01, local05
29bd4     1E 15 02 F6 | 	mov	arg02, local12
29bd8     18 17 02 F6 | 	mov	arg03, local06
29bdc     16 19 02 F6 | 	mov	arg04, local04
29be0     28 34 B0 FD | 	call	#__system__pack_0683
29be4                 | LR__3625
29be4     A7 F0 03 F6 | 	mov	ptra, fp
29be8     B2 00 A0 FD | 	call	#popregs_
29bec                 | __system___float_add_ret
29bec     2D 00 64 FD | 	ret
29bf0                 | 
29bf0                 | __system___float_sqrt
29bf0     04 4A 05 F6 | 	mov	COUNT_, #4
29bf4     A8 00 A0 FD | 	call	#pushregs_
29bf8     09 27 02 F6 | 	mov	local01, arg01
29bfc     09 FB 01 F6 | 	mov	result1, arg01
29c00     FD 28 02 F6 | 	mov	local02, result1
29c04     14 2B 02 F6 | 	mov	local03, local02
29c08     16 2A 46 F7 | 	zerox	local03, #22
29c0c     14 2D 02 F6 | 	mov	local04, local02
29c10     01 2C 66 F0 | 	shl	local04, #1
29c14     18 2C 4E F0 | 	shr	local04, #24 wz
29c18     1F 28 46 F0 | 	shr	local02, #31
29c1c     70 00 90 AD |  if_e	jmp	#LR__3631
29c20     17 2A 26 F4 | 	bith	local03, #23
29c24                 | LR__3630
29c24     00 28 0E F2 | 	cmp	local02, #0 wz
29c28     00 F8 3F 5F 
29c2c     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
29c30     88 00 90 5D |  if_ne	jmp	#LR__3634
29c34     FF 2C 0E F2 | 	cmp	local04, #255 wz
29c38     13 FB 01 A6 |  if_e	mov	result1, local01
29c3c     7C 00 90 AD |  if_e	jmp	#LR__3634
29c40     7F 2C 86 F1 | 	sub	local04, #127
29c44     01 2C CE F7 | 	test	local04, #1 wz
29c48     01 2A 66 50 |  if_ne	shl	local03, #1
29c4c     05 2A 66 F0 | 	shl	local03, #5
29c50     15 01 38 FD | 	qsqrt	#0, local03
29c54     01 2C 86 51 |  if_ne	sub	local04, #1
29c58     16 2D 52 F6 | 	abs	local04, local04 wc
29c5c     01 2C 46 F0 | 	shr	local04, #1
29c60     16 17 82 F6 | 	negc	arg03, local04
29c64     14 19 02 F6 | 	mov	arg04, local02
29c68     18 12 62 FD | 	getqx	arg01
29c6c     09 15 02 F6 | 	mov	arg02, arg01
29c70     19 14 66 F0 | 	shl	arg02, #25
29c74     07 12 46 F0 | 	shr	arg01, #7
29c78     00 80 00 FF 
29c7c     01 12 16 F2 | 	cmp	arg01, ##16777217 wc
29c80     01 16 06 31 |  if_ae	add	arg03, #1
29c84     01 12 46 30 |  if_ae	shr	arg01, #1
29c88     80 33 B0 FD | 	call	#__system__pack_0683
29c8c     2C 00 90 FD | 	jmp	#LR__3634
29c90                 | LR__3631
29c90     00 2A 0E F2 | 	cmp	local03, #0 wz
29c94     13 FB 01 A6 |  if_e	mov	result1, local01
29c98     20 00 90 AD |  if_e	jmp	#LR__3634
29c9c     01 2A 66 F0 | 	shl	local03, #1
29ca0     97 0A 48 FB | 	callpa	#(@LR__3633-@LR__3632)>>2,fcache_load_ptr_
29ca4                 | LR__3632
29ca4     00 40 00 FF 
29ca8     00 2A 16 F2 | 	cmp	local03, ##8388608 wc
29cac     01 2C 86 C1 |  if_b	sub	local04, #1
29cb0     01 2A 66 C0 |  if_b	shl	local03, #1
29cb4     EC FF 9F CD |  if_b	jmp	#LR__3632
29cb8                 | LR__3633
29cb8     68 FF 9F FD | 	jmp	#LR__3630
29cbc                 | LR__3634
29cbc     A7 F0 03 F6 | 	mov	ptra, fp
29cc0     B2 00 A0 FD | 	call	#popregs_
29cc4                 | __system___float_sqrt_ret
29cc4     2D 00 64 FD | 	ret
29cc8                 | 
29cc8                 | __system___float_mul
29cc8     0B 4A 05 F6 | 	mov	COUNT_, #11
29ccc     A8 00 A0 FD | 	call	#pushregs_
29cd0     09 27 02 F6 | 	mov	local01, arg01
29cd4     0A 29 02 F6 | 	mov	local02, arg02
29cd8     13 2B 02 F6 | 	mov	local03, local01
29cdc     15 2D 02 F6 | 	mov	local04, local03
29ce0     16 2C 46 F7 | 	zerox	local04, #22
29ce4     15 2F 02 F6 | 	mov	local05, local03
29ce8     01 2E 66 F0 | 	shl	local05, #1
29cec     18 2E 46 F0 | 	shr	local05, #24
29cf0     1F 2A 46 F0 | 	shr	local03, #31
29cf4     14 FB 01 F6 | 	mov	result1, local02
29cf8     FD 30 02 F6 | 	mov	local06, result1
29cfc     18 33 02 F6 | 	mov	local07, local06
29d00     16 32 46 F7 | 	zerox	local07, #22
29d04     18 35 02 F6 | 	mov	local08, local06
29d08     01 34 66 F0 | 	shl	local08, #1
29d0c     18 34 46 F0 | 	shr	local08, #24
29d10     1F 30 46 F0 | 	shr	local06, #31
29d14     18 2B 62 F5 | 	xor	local03, local06
29d18     FF 2E 0E F2 | 	cmp	local05, #255 wz
29d1c     90 00 90 AD |  if_e	jmp	#LR__3643
29d20     FF 34 0E F2 | 	cmp	local08, #255 wz
29d24     D8 00 90 AD |  if_e	jmp	#LR__3645
29d28     00 2E 0E F2 | 	cmp	local05, #0 wz
29d2c     0C 01 90 AD |  if_e	jmp	#LR__3646
29d30     17 2C 26 F4 | 	bith	local04, #23
29d34                 | LR__3640
29d34     00 34 0E F2 | 	cmp	local08, #0 wz
29d38     44 01 90 AD |  if_e	jmp	#LR__3650
29d3c     17 32 26 F4 | 	bith	local07, #23
29d40                 | LR__3641
29d40     16 29 02 F6 | 	mov	local02, local04
29d44     04 28 66 F0 | 	shl	local02, #4
29d48     19 31 02 F6 | 	mov	local06, local07
29d4c     05 30 66 F0 | 	shl	local06, #5
29d50     18 29 02 FD | 	qmul	local02, local06
29d54     1A 2F 02 F1 | 	add	local05, local08
29d58     FE 2E 86 F1 | 	sub	local05, #254
29d5c     17 37 02 F6 | 	mov	local09, local05
29d60     04 2C 66 F0 | 	shl	local04, #4
29d64     05 32 66 F0 | 	shl	local07, #5
29d68     18 38 62 FD | 	getqx	local10
29d6c     19 2D 02 FD | 	qmul	local04, local07
29d70     19 3A 62 FD | 	getqy	local11
29d74     00 80 00 FF 
29d78     00 3A 16 F2 | 	cmp	local11, ##16777216 wc
29d7c     18 00 90 CD |  if_b	jmp	#LR__3642
29d80     01 36 06 F1 | 	add	local09, #1
29d84     01 38 46 F0 | 	shr	local10, #1
29d88     1D 35 02 F6 | 	mov	local08, local11
29d8c     1F 34 66 F0 | 	shl	local08, #31
29d90     1A 39 42 F5 | 	or	local10, local08
29d94     01 3A 46 F0 | 	shr	local11, #1
29d98                 | LR__3642
29d98     1D 13 02 F6 | 	mov	arg01, local11
29d9c     1C 15 02 F6 | 	mov	arg02, local10
29da0     1B 17 02 F6 | 	mov	arg03, local09
29da4     15 19 02 F6 | 	mov	arg04, local03
29da8     60 32 B0 FD | 	call	#__system__pack_0683
29dac     10 01 90 FD | 	jmp	#LR__3654
29db0                 | LR__3643
29db0     00 2C 0E F2 | 	cmp	local04, #0 wz
29db4     13 FB 01 56 |  if_ne	mov	result1, local01
29db8     04 01 90 5D |  if_ne	jmp	#LR__3654
29dbc     FF 34 56 F2 | 	cmps	local08, #255 wc
29dc0     00 34 0E C2 |  if_b	cmp	local08, #0 wz
29dc4     00 32 0E 82 |  if_c_and_z	cmp	local07, #0 wz
29dc8     18 00 90 4D |  if_c_and_nz	jmp	#LR__3644
29dcc     00 F8 3F CF 
29dd0     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
29dd4     E8 00 90 CD |  if_b	jmp	#LR__3654
29dd8     00 32 0E F2 | 	cmp	local07, #0 wz
29ddc     14 FB 01 56 |  if_ne	mov	result1, local02
29de0     DC 00 90 5D |  if_ne	jmp	#LR__3654
29de4                 | LR__3644
29de4     02 2A 46 F5 | 	or	local03, #2
29de8     00 12 06 F6 | 	mov	arg01, #0
29dec     00 14 06 F6 | 	mov	arg02, #0
29df0     17 17 02 F6 | 	mov	arg03, local05
29df4     15 19 02 F6 | 	mov	arg04, local03
29df8     10 32 B0 FD | 	call	#__system__pack_0683
29dfc     C0 00 90 FD | 	jmp	#LR__3654
29e00                 | LR__3645
29e00     00 2E 0E F2 | 	cmp	local05, #0 wz
29e04     00 2C 0E A2 |  if_e	cmp	local04, #0 wz
29e08     00 F8 3F AF 
29e0c     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
29e10     AC 00 90 AD |  if_e	jmp	#LR__3654
29e14     00 32 0E F2 | 	cmp	local07, #0 wz
29e18     14 FB 01 56 |  if_ne	mov	result1, local02
29e1c     A0 00 90 5D |  if_ne	jmp	#LR__3654
29e20     1A 17 02 F6 | 	mov	arg03, local08
29e24     15 19 02 F6 | 	mov	arg04, local03
29e28     02 18 46 F5 | 	or	arg04, #2
29e2c     00 12 06 F6 | 	mov	arg01, #0
29e30     00 14 06 F6 | 	mov	arg02, #0
29e34     D4 31 B0 FD | 	call	#__system__pack_0683
29e38     84 00 90 FD | 	jmp	#LR__3654
29e3c                 | LR__3646
29e3c     00 2C 0E F2 | 	cmp	local04, #0 wz
29e40     20 00 90 AD |  if_e	jmp	#LR__3649
29e44     01 2C 66 F0 | 	shl	local04, #1
29e48     97 0A 48 FB | 	callpa	#(@LR__3648-@LR__3647)>>2,fcache_load_ptr_
29e4c                 | LR__3647
29e4c     00 40 00 FF 
29e50     00 2C 16 F2 | 	cmp	local04, ##8388608 wc
29e54     01 2E 86 C1 |  if_b	sub	local05, #1
29e58     01 2C 66 C0 |  if_b	shl	local04, #1
29e5c     EC FF 9F CD |  if_b	jmp	#LR__3647
29e60                 | LR__3648
29e60     D0 FE 9F FD | 	jmp	#LR__3640
29e64                 | LR__3649
29e64     08 2A 46 F5 | 	or	local03, #8
29e68     00 12 06 F6 | 	mov	arg01, #0
29e6c     00 14 06 F6 | 	mov	arg02, #0
29e70     00 16 06 F6 | 	mov	arg03, #0
29e74     15 19 02 F6 | 	mov	arg04, local03
29e78     90 31 B0 FD | 	call	#__system__pack_0683
29e7c     40 00 90 FD | 	jmp	#LR__3654
29e80                 | LR__3650
29e80     00 32 0E F2 | 	cmp	local07, #0 wz
29e84     20 00 90 AD |  if_e	jmp	#LR__3653
29e88     01 32 66 F0 | 	shl	local07, #1
29e8c     97 0A 48 FB | 	callpa	#(@LR__3652-@LR__3651)>>2,fcache_load_ptr_
29e90                 | LR__3651
29e90     00 40 00 FF 
29e94     00 32 16 F2 | 	cmp	local07, ##8388608 wc
29e98     01 34 86 C1 |  if_b	sub	local08, #1
29e9c     01 32 66 C0 |  if_b	shl	local07, #1
29ea0     EC FF 9F CD |  if_b	jmp	#LR__3651
29ea4                 | LR__3652
29ea4     98 FE 9F FD | 	jmp	#LR__3641
29ea8                 | LR__3653
29ea8     08 2A 46 F5 | 	or	local03, #8
29eac     00 12 06 F6 | 	mov	arg01, #0
29eb0     00 14 06 F6 | 	mov	arg02, #0
29eb4     00 16 06 F6 | 	mov	arg03, #0
29eb8     15 19 02 F6 | 	mov	arg04, local03
29ebc     4C 31 B0 FD | 	call	#__system__pack_0683
29ec0                 | LR__3654
29ec0     A7 F0 03 F6 | 	mov	ptra, fp
29ec4     B2 00 A0 FD | 	call	#popregs_
29ec8                 | __system___float_mul_ret
29ec8     2D 00 64 FD | 	ret
29ecc                 | 
29ecc                 | __system___float_div
29ecc     0E 4A 05 F6 | 	mov	COUNT_, #14
29ed0     A8 00 A0 FD | 	call	#pushregs_
29ed4     09 2B 02 F6 | 	mov	local03, arg01
29ed8     0A 2D 02 F6 | 	mov	local04, arg02
29edc     15 2F 02 F6 | 	mov	local05, local03
29ee0     17 31 02 F6 | 	mov	local06, local05
29ee4     16 30 46 F7 | 	zerox	local06, #22
29ee8     17 33 02 F6 | 	mov	local07, local05
29eec     01 32 66 F0 | 	shl	local07, #1
29ef0     18 32 46 F0 | 	shr	local07, #24
29ef4     1F 2E 46 F0 | 	shr	local05, #31
29ef8     16 FB 01 F6 | 	mov	result1, local04
29efc     FD 34 02 F6 | 	mov	local08, result1
29f00     1A 37 02 F6 | 	mov	local09, local08
29f04     16 36 46 F7 | 	zerox	local09, #22
29f08     1A 39 02 F6 | 	mov	local10, local08
29f0c     01 38 66 F0 | 	shl	local10, #1
29f10     18 38 46 F0 | 	shr	local10, #24
29f14     1F 34 46 F0 | 	shr	local08, #31
29f18     1A 2F 62 F5 | 	xor	local05, local08
29f1c     FF 32 0E F2 | 	cmp	local07, #255 wz
29f20     D4 00 90 AD |  if_e	jmp	#LR__3665
29f24     FF 38 0E F2 | 	cmp	local10, #255 wz
29f28     04 01 90 AD |  if_e	jmp	#LR__3666
29f2c     00 32 0E F2 | 	cmp	local07, #0 wz
29f30     24 01 90 AD |  if_e	jmp	#LR__3667
29f34     17 30 26 F4 | 	bith	local06, #23
29f38                 | LR__3660
29f38     00 38 0E F2 | 	cmp	local10, #0 wz
29f3c     70 01 90 AD |  if_e	jmp	#LR__3671
29f40     17 36 26 F4 | 	bith	local09, #23
29f44                 | LR__3661
29f44     1C 33 82 F1 | 	sub	local07, local10
29f48     19 3B 02 F6 | 	mov	local11, local07
29f4c     18 13 02 F6 | 	mov	arg01, local06
29f50     02 12 46 F0 | 	shr	arg01, #2
29f54     1E 30 66 F0 | 	shl	local06, #30
29f58     18 15 02 F6 | 	mov	arg02, local06
29f5c     1B 17 02 F6 | 	mov	arg03, local09
29f60     28 12 62 FD | 	setq	arg01
29f64     0B 15 12 FD | 	qdiv	arg02, arg03
29f68     00 3C 06 F6 | 	mov	local12, #0
29f6c     18 26 62 FD | 	getqx	local01
29f70     19 FC 61 FD | 	getqy	result2
29f74     FE 28 02 F6 | 	mov	local02, result2
29f78     13 3F 02 F6 | 	mov	local13, local01
29f7c     00 28 4E F2 | 	cmps	local02, #0 wz
29f80     1F 41 02 F6 | 	mov	local14, local13
29f84     19 40 66 F0 | 	shl	local14, #25
29f88     01 3C 06 56 |  if_ne	mov	local12, #1
29f8c     1E 41 42 F5 | 	or	local14, local12
29f90     07 3E 46 F0 | 	shr	local13, #7
29f94     00 80 00 FF 
29f98     00 3E 16 F2 | 	cmp	local13, ##16777216 wc
29f9c     1C 00 90 CD |  if_b	jmp	#LR__3662
29fa0     01 3A 06 F1 | 	add	local11, #1
29fa4     01 40 46 F0 | 	shr	local14, #1
29fa8     1F 3D 02 F6 | 	mov	local12, local13
29fac     1F 3C 66 F0 | 	shl	local12, #31
29fb0     1E 41 42 F5 | 	or	local14, local12
29fb4     01 3E 46 F0 | 	shr	local13, #1
29fb8     24 00 90 FD | 	jmp	#LR__3664
29fbc                 | LR__3662
29fbc     00 40 00 FF 
29fc0     00 3E 16 F2 | 	cmp	local13, ##8388608 wc
29fc4     18 00 90 3D |  if_ae	jmp	#LR__3663
29fc8     01 3A 86 F1 | 	sub	local11, #1
29fcc     01 3E 66 F0 | 	shl	local13, #1
29fd0     20 3D 02 F6 | 	mov	local12, local14
29fd4     1F 3C 46 F0 | 	shr	local12, #31
29fd8     1E 3F 42 F5 | 	or	local13, local12
29fdc     01 40 66 F0 | 	shl	local14, #1
29fe0                 | LR__3663
29fe0                 | LR__3664
29fe0     1F 13 02 F6 | 	mov	arg01, local13
29fe4     20 15 02 F6 | 	mov	arg02, local14
29fe8     1D 17 02 F6 | 	mov	arg03, local11
29fec     17 19 02 F6 | 	mov	arg04, local05
29ff0     18 30 B0 FD | 	call	#__system__pack_0683
29ff4     F8 00 90 FD | 	jmp	#LR__3675
29ff8                 | LR__3665
29ff8     00 30 0E F2 | 	cmp	local06, #0 wz
29ffc     15 FB 01 56 |  if_ne	mov	result1, local03
2a000     EC 00 90 5D |  if_ne	jmp	#LR__3675
2a004     FF 38 0E F2 | 	cmp	local10, #255 wz
2a008     00 F8 3F AF 
2a00c     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
2a010     DC 00 90 AD |  if_e	jmp	#LR__3675
2a014     02 2E 46 F5 | 	or	local05, #2
2a018     00 12 06 F6 | 	mov	arg01, #0
2a01c     00 14 06 F6 | 	mov	arg02, #0
2a020     19 17 02 F6 | 	mov	arg03, local07
2a024     17 19 02 F6 | 	mov	arg04, local05
2a028     E0 2F B0 FD | 	call	#__system__pack_0683
2a02c     C0 00 90 FD | 	jmp	#LR__3675
2a030                 | LR__3666
2a030     00 36 0E F2 | 	cmp	local09, #0 wz
2a034     16 FB 01 56 |  if_ne	mov	result1, local04
2a038     B4 00 90 5D |  if_ne	jmp	#LR__3675
2a03c     17 19 02 F6 | 	mov	arg04, local05
2a040     08 18 46 F5 | 	or	arg04, #8
2a044     00 12 06 F6 | 	mov	arg01, #0
2a048     00 14 06 F6 | 	mov	arg02, #0
2a04c     00 16 06 F6 | 	mov	arg03, #0
2a050     B8 2F B0 FD | 	call	#__system__pack_0683
2a054     98 00 90 FD | 	jmp	#LR__3675
2a058                 | LR__3667
2a058     00 30 0E F2 | 	cmp	local06, #0 wz
2a05c     20 00 90 AD |  if_e	jmp	#LR__3670
2a060     01 30 66 F0 | 	shl	local06, #1
2a064     97 0A 48 FB | 	callpa	#(@LR__3669-@LR__3668)>>2,fcache_load_ptr_
2a068                 | LR__3668
2a068     00 40 00 FF 
2a06c     00 30 16 F2 | 	cmp	local06, ##8388608 wc
2a070     01 32 86 C1 |  if_b	sub	local07, #1
2a074     01 30 66 C0 |  if_b	shl	local06, #1
2a078     EC FF 9F CD |  if_b	jmp	#LR__3668
2a07c                 | LR__3669
2a07c     B8 FE 9F FD | 	jmp	#LR__3660
2a080                 | LR__3670
2a080     00 38 0E F2 | 	cmp	local10, #0 wz
2a084     00 36 0E A2 |  if_e	cmp	local09, #0 wz
2a088     00 F8 3F AF 
2a08c     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
2a090     5C 00 90 AD |  if_e	jmp	#LR__3675
2a094     17 19 02 F6 | 	mov	arg04, local05
2a098     08 18 46 F5 | 	or	arg04, #8
2a09c     00 12 06 F6 | 	mov	arg01, #0
2a0a0     00 14 06 F6 | 	mov	arg02, #0
2a0a4     00 16 06 F6 | 	mov	arg03, #0
2a0a8     60 2F B0 FD | 	call	#__system__pack_0683
2a0ac     40 00 90 FD | 	jmp	#LR__3675
2a0b0                 | LR__3671
2a0b0     00 36 0E F2 | 	cmp	local09, #0 wz
2a0b4     20 00 90 AD |  if_e	jmp	#LR__3674
2a0b8     01 36 66 F0 | 	shl	local09, #1
2a0bc     97 0A 48 FB | 	callpa	#(@LR__3673-@LR__3672)>>2,fcache_load_ptr_
2a0c0                 | LR__3672
2a0c0     00 40 00 FF 
2a0c4     00 36 16 F2 | 	cmp	local09, ##8388608 wc
2a0c8     01 38 86 C1 |  if_b	sub	local10, #1
2a0cc     01 36 66 C0 |  if_b	shl	local09, #1
2a0d0     EC FF 9F CD |  if_b	jmp	#LR__3672
2a0d4                 | LR__3673
2a0d4     6C FE 9F FD | 	jmp	#LR__3661
2a0d8                 | LR__3674
2a0d8     02 2E 46 F5 | 	or	local05, #2
2a0dc     00 12 06 F6 | 	mov	arg01, #0
2a0e0     00 14 06 F6 | 	mov	arg02, #0
2a0e4     00 16 06 F6 | 	mov	arg03, #0
2a0e8     17 19 02 F6 | 	mov	arg04, local05
2a0ec     1C 2F B0 FD | 	call	#__system__pack_0683
2a0f0                 | LR__3675
2a0f0     A7 F0 03 F6 | 	mov	ptra, fp
2a0f4     B2 00 A0 FD | 	call	#popregs_
2a0f8                 | __system___float_div_ret
2a0f8     2D 00 64 FD | 	ret
2a0fc                 | 
2a0fc                 | __system___float_cmp
2a0fc     00 C0 3F FF 
2a100     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
2a104     00 C0 3F CF 
2a108     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
2a10c     0B FB 01 36 |  if_ae	mov	result1, arg03
2a110     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
2a114     00 C0 7F FF 
2a118     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
2a11c     00 C0 7F CF 
2a120     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
2a124     0B FB 01 36 |  if_ae	mov	result1, arg03
2a128     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
2a12c     00 12 56 F2 | 	cmps	arg01, #0 wc
2a130     2C 00 90 3D |  if_ae	jmp	#LR__3680
2a134     00 14 56 F2 | 	cmps	arg02, #0 wc
2a138     0A FB 01 C6 |  if_b	mov	result1, arg02
2a13c     09 FB 81 C1 |  if_b	sub	result1, arg01
2a140     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
2a144     00 14 0E F2 | 	cmp	arg02, #0 wz
2a148     00 00 40 AF 
2a14c     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
2a150     00 FA 05 A6 |  if_e	mov	result1, #0
2a154     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
2a158     01 FA 65 F6 | 	neg	result1, #1
2a15c     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
2a160                 | LR__3680
2a160     00 14 56 F2 | 	cmps	arg02, #0 wc
2a164     1C 00 90 3D |  if_ae	jmp	#LR__3681
2a168     00 12 0E F2 | 	cmp	arg01, #0 wz
2a16c     00 00 40 AF 
2a170     00 14 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
2a174     00 FA 05 A6 |  if_e	mov	result1, #0
2a178     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
2a17c     01 FA 05 F6 | 	mov	result1, #1
2a180     08 00 90 FD | 	jmp	#__system___float_cmp_ret
2a184                 | LR__3681
2a184     0A 13 82 F1 | 	sub	arg01, arg02
2a188     09 FB 01 F6 | 	mov	result1, arg01
2a18c                 | __system___float_cmp_ret
2a18c     2D 00 64 FD | 	ret
2a190                 | 
2a190                 | __system___float_tointeger
2a190     02 4A 05 F6 | 	mov	COUNT_, #2
2a194     A8 00 A0 FD | 	call	#pushregs_
2a198     50 00 B0 FD | 	call	#__system___float_Unpack
2a19c     FF FF 7F FF 
2a1a0     FF FD 55 F2 | 	cmps	result2, ##-1 wc
2a1a4     34 00 90 CD |  if_b	jmp	#LR__3690
2a1a8     1F FC 55 F2 | 	cmps	result2, #31 wc
2a1ac     2C 00 90 3D |  if_ae	jmp	#LR__3690
2a1b0     02 FE 65 F0 | 	shl	result3, #2
2a1b4     1E 26 06 F6 | 	mov	local01, #30
2a1b8     FE 26 82 F1 | 	sub	local01, result2
2a1bc     13 FF 41 F0 | 	shr	result3, local01
2a1c0     FF 28 02 F6 | 	mov	local02, result3
2a1c4     0A 29 02 F1 | 	add	local02, arg02
2a1c8     01 28 46 F0 | 	shr	local02, #1
2a1cc     00 FA 0D F2 | 	cmp	result1, #0 wz
2a1d0     14 29 62 56 |  if_ne	neg	local02, local02
2a1d4     14 FB 01 F6 | 	mov	result1, local02
2a1d8     04 00 90 FD | 	jmp	#LR__3691
2a1dc                 | LR__3690
2a1dc     00 FA 05 F6 | 	mov	result1, #0
2a1e0                 | LR__3691
2a1e0     A7 F0 03 F6 | 	mov	ptra, fp
2a1e4     B2 00 A0 FD | 	call	#popregs_
2a1e8                 | __system___float_tointeger_ret
2a1e8     2D 00 64 FD | 	ret
2a1ec                 | 
2a1ec                 | __system___float_Unpack
2a1ec     09 01 02 F6 | 	mov	_var01, arg01
2a1f0     1F 00 46 F0 | 	shr	_var01, #31
2a1f4     09 03 02 F6 | 	mov	_var02, arg01
2a1f8     01 02 66 F0 | 	shl	_var02, #1
2a1fc     18 02 4E F0 | 	shr	_var02, #24 wz
2a200     17 13 06 F4 | 	bitl	arg01, #279
2a204     06 12 66 50 |  if_ne	shl	arg01, #6
2a208     1D 12 26 54 |  if_ne	bith	arg01, #29
2a20c     1C 00 90 5D |  if_ne	jmp	#LR__3700
2a210     09 05 92 F7 | 	encod	_var03, arg01 wc
2a214     01 04 06 C1 |  if_b	add	_var03, #1
2a218     17 04 86 F1 | 	sub	_var03, #23
2a21c     02 03 02 F6 | 	mov	_var02, _var03
2a220     07 FC 05 F6 | 	mov	result2, #7
2a224     02 FD 81 F1 | 	sub	result2, _var03
2a228     FE 12 62 F0 | 	shl	arg01, result2
2a22c                 | LR__3700
2a22c     7F 02 86 F1 | 	sub	_var02, #127
2a230     09 FF 01 F6 | 	mov	result3, arg01
2a234     00 FB 01 F6 | 	mov	result1, _var01
2a238     01 FD 01 F6 | 	mov	result2, _var02
2a23c                 | __system___float_Unpack_ret
2a23c     2D 00 64 FD | 	ret
2a240                 | 
2a240                 | __system___float_Pack
2a240     00 00 06 F6 | 	mov	_var01, #0
2a244     00 16 0E F2 | 	cmp	arg03, #0 wz
2a248     8C 00 90 AD |  if_e	jmp	#LR__3711
2a24c     0B 03 92 F7 | 	encod	_var02, arg03 wc
2a250     01 02 06 C1 |  if_b	add	_var02, #1
2a254     21 00 06 F6 | 	mov	_var01, #33
2a258     01 01 82 F1 | 	sub	_var01, _var02
2a25c     00 17 62 F0 | 	shl	arg03, _var01
2a260     03 02 06 F6 | 	mov	_var02, #3
2a264     00 03 82 F1 | 	sub	_var02, _var01
2a268     01 15 02 F1 | 	add	arg02, _var02
2a26c     0A 05 02 F6 | 	mov	_var03, arg02
2a270     00 17 06 F1 | 	add	arg03, #256
2a274     0B 03 02 F6 | 	mov	_var02, arg03
2a278     FF 02 2E F5 | 	andn	_var02, #255 wz
2a27c     01 04 06 A1 |  if_e	add	_var03, #1
2a280     7F 04 06 F1 | 	add	_var03, #127
2a284     FF FF 7F FF 
2a288     E9 05 46 F3 | 	fges	_var03, ##-23
2a28c     FF 04 66 F3 | 	fles	_var03, #255
2a290     01 04 56 F2 | 	cmps	_var03, #1 wc
2a294     1C 00 90 3D |  if_ae	jmp	#LR__3710
2a298     01 16 46 F0 | 	shr	arg03, #1
2a29c     1F 02 C6 F9 | 	decod	_var02, #31
2a2a0     0B 03 02 F1 | 	add	_var02, arg03
2a2a4     02 05 62 F6 | 	neg	_var03, _var03
2a2a8     02 03 42 F0 | 	shr	_var02, _var03
2a2ac     01 17 02 F6 | 	mov	arg03, _var02
2a2b0     00 04 06 F6 | 	mov	_var03, #0
2a2b4                 | LR__3710
2a2b4     09 FB 01 F6 | 	mov	result1, arg01
2a2b8     1F FA 65 F0 | 	shl	result1, #31
2a2bc     02 03 02 F6 | 	mov	_var02, _var03
2a2c0     17 02 66 F0 | 	shl	_var02, #23
2a2c4     01 FB 41 F5 | 	or	result1, _var02
2a2c8     0B 07 02 F6 | 	mov	_var04, arg03
2a2cc     09 06 46 F0 | 	shr	_var04, #9
2a2d0     03 FB 41 F5 | 	or	result1, _var04
2a2d4     04 00 90 FD | 	jmp	#__system___float_Pack_ret
2a2d8                 | LR__3711
2a2d8     00 FB 01 F6 | 	mov	result1, _var01
2a2dc                 | __system___float_Pack_ret
2a2dc     2D 00 64 FD | 	ret
2a2e0                 | 
2a2e0                 | __system___basic_print_float
2a2e0     05 4A 05 F6 | 	mov	COUNT_, #5
2a2e4     A8 00 A0 FD | 	call	#pushregs_
2a2e8     09 27 02 F6 | 	mov	local01, arg01
2a2ec     0A 29 02 F6 | 	mov	local02, arg02
2a2f0     0B 2B 0A F6 | 	mov	local03, arg03 wz
2a2f4     0C 2D 02 F6 | 	mov	local04, arg04
2a2f8     14 00 90 5D |  if_ne	jmp	#LR__3720
2a2fc     23 2C 0E F2 | 	cmp	local04, #35 wz
2a300     80 02 10 AF 
2a304     00 2E 06 A6 |  if_e	mov	local05, ##537198592
2a308     1D 2E C6 59 |  if_ne	decod	local05, #29
2a30c     17 2B 02 F6 | 	mov	local03, local05
2a310                 | LR__3720
2a310     13 13 02 F6 | 	mov	arg01, local01
2a314     D8 27 B0 FD | 	call	#__system___gettxfunc
2a318     FD 2E 0A F6 | 	mov	local05, result1 wz
2a31c     00 FA 05 A6 |  if_e	mov	result1, #0
2a320     17 13 02 56 |  if_ne	mov	arg01, local05
2a324     15 15 02 56 |  if_ne	mov	arg02, local03
2a328     14 17 02 56 |  if_ne	mov	arg03, local02
2a32c     16 19 02 56 |  if_ne	mov	arg04, local04
2a330     6C DC BF 5D |  if_ne	call	#__system___fmtfloat
2a334     A7 F0 03 F6 | 	mov	ptra, fp
2a338     B2 00 A0 FD | 	call	#popregs_
2a33c                 | __system___basic_print_float_ret
2a33c     2D 00 64 FD | 	ret
2a340                 | 
2a340                 | __system____builtin_atoi
2a340     07 4A 05 F6 | 	mov	COUNT_, #7
2a344     A8 00 A0 FD | 	call	#pushregs_
2a348                 | __system____builtin_atoi_enter
2a348     09 27 02 F6 | 	mov	local01, arg01
2a34c     0A 29 02 F6 | 	mov	local02, arg02
2a350     00 2A 06 F6 | 	mov	local03, #0
2a354     00 2C 06 F6 | 	mov	local04, #0
2a358     00 2E 06 F6 | 	mov	local05, #0
2a35c     97 1C 48 FB | 	callpa	#(@LR__3732-@LR__3730)>>2,fcache_load_ptr_
2a360                 | LR__3730
2a360     13 31 C2 FA | 	rdbyte	local06, local01
2a364     20 30 0E F2 | 	cmp	local06, #32 wz
2a368     01 26 06 A1 |  if_e	add	local01, #1
2a36c     F0 FF 9F AD |  if_e	jmp	#LR__3730
2a370     13 33 C2 FA | 	rdbyte	local07, local01
2a374                 | LR__3731
2a374     2D 32 0E F2 | 	cmp	local07, #45 wz
2a378     2B 32 0E 52 |  if_ne	cmp	local07, #43 wz
2a37c     18 00 90 5D |  if_ne	jmp	#LR__3733
2a380     01 26 06 F1 | 	add	local01, #1
2a384     2D 32 0E F2 | 	cmp	local07, #45 wz
2a388     01 30 06 A6 |  if_e	mov	local06, #1
2a38c     18 2F C2 A2 |  if_e	subr	local05, local06
2a390     13 33 C2 FA | 	rdbyte	local07, local01
2a394     DC FF 9F FD | 	jmp	#LR__3731
2a398                 | LR__3732
2a398                 | LR__3733
2a398     00 28 0E F2 | 	cmp	local02, #0 wz
2a39c     1C 00 90 5D |  if_ne	jmp	#LR__3735
2a3a0     24 32 0E F2 | 	cmp	local07, #36 wz
2a3a4     10 28 06 A6 |  if_e	mov	local02, #16
2a3a8     01 26 06 A1 |  if_e	add	local01, #1
2a3ac     0C 00 90 AD |  if_e	jmp	#LR__3734
2a3b0     25 32 0E F2 | 	cmp	local07, #37 wz
2a3b4     02 28 06 A6 |  if_e	mov	local02, #2
2a3b8     01 26 06 A1 |  if_e	add	local01, #1
2a3bc                 | LR__3734
2a3bc                 | LR__3735
2a3bc     97 48 48 FB | 	callpa	#(@LR__3743-@LR__3736)>>2,fcache_load_ptr_
2a3c0                 | LR__3736
2a3c0                 | LR__3737
2a3c0     13 33 C2 FA | 	rdbyte	local07, local01
2a3c4     5F 32 0E F2 | 	cmp	local07, #95 wz
2a3c8     01 26 06 F1 | 	add	local01, #1
2a3cc     F0 FF 9F AD |  if_e	jmp	#LR__3737
2a3d0     30 32 0E F2 | 	cmp	local07, #48 wz
2a3d4     26 32 0E 52 |  if_ne	cmp	local07, #38 wz
2a3d8     00 2C 06 A6 |  if_e	mov	local04, #0
2a3dc     60 00 90 AD |  if_e	jmp	#LR__3742
2a3e0     31 32 56 F2 | 	cmps	local07, #49 wc
2a3e4     18 00 90 CD |  if_b	jmp	#LR__3738
2a3e8     3A 32 56 F2 | 	cmps	local07, #58 wc
2a3ec     19 2D 02 C6 |  if_b	mov	local04, local07
2a3f0     30 2C 86 C1 |  if_b	sub	local04, #48
2a3f4     00 28 0E C2 |  if_b	cmp	local02, #0 wz
2a3f8     0A 28 06 86 |  if_c_and_z	mov	local02, #10
2a3fc     40 00 90 CD |  if_b	jmp	#LR__3741
2a400                 | LR__3738
2a400     0B 28 56 F2 | 	cmps	local02, #11 wc
2a404     61 32 56 32 |  if_ae	cmps	local07, #97 wc
2a408     14 00 90 CD |  if_b	jmp	#LR__3739
2a40c     67 32 56 F2 | 	cmps	local07, #103 wc
2a410     61 32 86 C1 |  if_b	sub	local07, #97
2a414     0A 2C 06 C6 |  if_b	mov	local04, #10
2a418     19 2D 02 C1 |  if_b	add	local04, local07
2a41c     20 00 90 CD |  if_b	jmp	#LR__3740
2a420                 | LR__3739
2a420     0B 28 56 F2 | 	cmps	local02, #11 wc
2a424     41 32 56 32 |  if_ae	cmps	local07, #65 wc
2a428     24 00 90 CD |  if_b	jmp	#LR__3744
2a42c     47 32 56 F2 | 	cmps	local07, #71 wc
2a430     41 32 86 C1 |  if_b	sub	local07, #65
2a434     0A 2C 06 C6 |  if_b	mov	local04, #10
2a438     19 2D 02 C1 |  if_b	add	local04, local07
2a43c     10 00 90 3D |  if_ae	jmp	#LR__3744
2a440                 | LR__3740
2a440                 | LR__3741
2a440                 | LR__3742
2a440     15 29 02 FD | 	qmul	local02, local03
2a444     18 2A 62 FD | 	getqx	local03
2a448     16 2B 02 F1 | 	add	local03, local04
2a44c     70 FF 9F FD | 	jmp	#LR__3736
2a450                 | LR__3743
2a450                 | LR__3744
2a450     00 28 0E F2 | 	cmp	local02, #0 wz
2a454     64 00 90 5D |  if_ne	jmp	#LR__3750
2a458     78 32 0E F2 | 	cmp	local07, #120 wz
2a45c     68 32 0E 52 |  if_ne	cmp	local07, #104 wz
2a460     58 32 0E 52 |  if_ne	cmp	local07, #88 wz
2a464     48 32 0E 52 |  if_ne	cmp	local07, #72 wz
2a468     14 00 90 5D |  if_ne	jmp	#LR__3745
2a46c     13 13 02 F6 | 	mov	arg01, local01
2a470     10 14 06 F6 | 	mov	arg02, #16
2a474     C8 FE BF FD | 	call	#__system____builtin_atoi
2a478     FD 2A 02 F6 | 	mov	local03, result1
2a47c     3C 00 90 FD | 	jmp	#LR__3749
2a480                 | LR__3745
2a480     62 32 0E F2 | 	cmp	local07, #98 wz
2a484     42 32 0E 52 |  if_ne	cmp	local07, #66 wz
2a488     14 00 90 5D |  if_ne	jmp	#LR__3746
2a48c     13 13 02 F6 | 	mov	arg01, local01
2a490     02 14 06 F6 | 	mov	arg02, #2
2a494     A8 FE BF FD | 	call	#__system____builtin_atoi
2a498     FD 2A 02 F6 | 	mov	local03, result1
2a49c     1C 00 90 FD | 	jmp	#LR__3748
2a4a0                 | LR__3746
2a4a0     6F 32 0E F2 | 	cmp	local07, #111 wz
2a4a4     4F 32 0E 52 |  if_ne	cmp	local07, #79 wz
2a4a8     10 00 90 5D |  if_ne	jmp	#LR__3747
2a4ac     13 13 02 F6 | 	mov	arg01, local01
2a4b0     08 14 06 F6 | 	mov	arg02, #8
2a4b4     88 FE BF FD | 	call	#__system____builtin_atoi
2a4b8     FD 2A 02 F6 | 	mov	local03, result1
2a4bc                 | LR__3747
2a4bc                 | LR__3748
2a4bc                 | LR__3749
2a4bc                 | LR__3750
2a4bc     00 2E 0E F2 | 	cmp	local05, #0 wz
2a4c0     15 2B 62 56 |  if_ne	neg	local03, local03
2a4c4     15 FB 01 F6 | 	mov	result1, local03
2a4c8     A7 F0 03 F6 | 	mov	ptra, fp
2a4cc     B2 00 A0 FD | 	call	#popregs_
2a4d0                 | __system____builtin_atoi_ret
2a4d0     2D 00 64 FD | 	ret
2a4d4                 | 
2a4d4                 | __system____builtin_atof
2a4d4     07 4A 05 F6 | 	mov	COUNT_, #7
2a4d8     A8 00 A0 FD | 	call	#pushregs_
2a4dc     09 27 02 F6 | 	mov	local01, arg01
2a4e0     00 28 06 F6 | 	mov	local02, #0
2a4e4     00 2A 06 F6 | 	mov	local03, #0
2a4e8     00 2C 06 F6 | 	mov	local04, #0
2a4ec     00 2E 06 F6 | 	mov	local05, #0
2a4f0     97 08 48 FB | 	callpa	#(@LR__3761-@LR__3760)>>2,fcache_load_ptr_
2a4f4                 | LR__3760
2a4f4     13 17 C2 FA | 	rdbyte	arg03, local01
2a4f8     20 16 0E F2 | 	cmp	arg03, #32 wz
2a4fc     01 26 06 A1 |  if_e	add	local01, #1
2a500     F0 FF 9F AD |  if_e	jmp	#LR__3760
2a504                 | LR__3761
2a504     13 31 C2 FA | 	rdbyte	local06, local01
2a508                 | LR__3762
2a508     2B 30 0E F2 | 	cmp	local06, #43 wz
2a50c     2D 30 0E 52 |  if_ne	cmp	local06, #45 wz
2a510     14 00 90 5D |  if_ne	jmp	#LR__3763
2a514     2D 30 0E F2 | 	cmp	local06, #45 wz
2a518     1F 2C E6 A4 |  if_e	bitnot	local04, #31
2a51c     01 26 06 F1 | 	add	local01, #1
2a520     13 31 C2 FA | 	rdbyte	local06, local01
2a524     E0 FF 9F FD | 	jmp	#LR__3762
2a528                 | LR__3763
2a528                 | LR__3764
2a528     97 08 48 FB | 	callpa	#(@LR__3766-@LR__3765)>>2,fcache_load_ptr_
2a52c                 | LR__3765
2a52c     13 31 C2 FA | 	rdbyte	local06, local01
2a530     5F 30 0E F2 | 	cmp	local06, #95 wz
2a534     01 26 06 F1 | 	add	local01, #1
2a538     F0 FF 9F AD |  if_e	jmp	#LR__3765
2a53c                 | LR__3766
2a53c     00 30 0E F2 | 	cmp	local06, #0 wz
2a540     5C 00 90 AD |  if_e	jmp	#LR__3768
2a544     30 30 56 F2 | 	cmps	local06, #48 wc
2a548     44 00 90 CD |  if_b	jmp	#LR__3767
2a54c     3A 30 56 F2 | 	cmps	local06, #58 wc
2a550     3C 00 90 3D |  if_ae	jmp	#LR__3767
2a554     14 13 02 F6 | 	mov	arg01, local02
2a558     00 90 20 FF 
2a55c     00 14 06 F6 | 	mov	arg02, ##1092616192
2a560     64 F7 BF FD | 	call	#__system___float_mul
2a564     FD 28 02 F6 | 	mov	local02, result1
2a568     30 30 86 F1 | 	sub	local06, #48
2a56c     18 13 02 F6 | 	mov	arg01, local06
2a570     50 F3 BF FD | 	call	#__system___float_fromuns
2a574     FD 14 02 F6 | 	mov	arg02, result1
2a578     14 13 02 F6 | 	mov	arg01, local02
2a57c     78 F3 BF FD | 	call	#__system___float_add
2a580     FD 28 02 F6 | 	mov	local02, result1
2a584     00 2E 0E F2 | 	cmp	local05, #0 wz
2a588     01 2A 86 51 |  if_ne	sub	local03, #1
2a58c     98 FF 9F FD | 	jmp	#LR__3764
2a590                 | LR__3767
2a590     2E 30 0E F2 | 	cmp	local06, #46 wz
2a594     00 2E 0E A2 |  if_e	cmp	local05, #0 wz
2a598     01 2E 06 A6 |  if_e	mov	local05, #1
2a59c     88 FF 9F AD |  if_e	jmp	#LR__3764
2a5a0                 | LR__3768
2a5a0     45 30 0E F2 | 	cmp	local06, #69 wz
2a5a4     65 30 0E 52 |  if_ne	cmp	local06, #101 wz
2a5a8     18 00 90 5D |  if_ne	jmp	#LR__3769
2a5ac     13 13 02 F6 | 	mov	arg01, local01
2a5b0     00 14 06 F6 | 	mov	arg02, #0
2a5b4     88 FD BF FD | 	call	#__system____builtin_atoi
2a5b8     15 FB 01 F1 | 	add	result1, local03
2a5bc     FD 32 02 F6 | 	mov	local07, result1
2a5c0     04 00 90 FD | 	jmp	#LR__3770
2a5c4                 | LR__3769
2a5c4     15 33 02 F6 | 	mov	local07, local03
2a5c8                 | LR__3770
2a5c8     19 17 02 F6 | 	mov	arg03, local07
2a5cc     14 13 02 F6 | 	mov	arg01, local02
2a5d0     00 90 20 FF 
2a5d4     00 14 06 F6 | 	mov	arg02, ##1092616192
2a5d8     F4 06 B0 FD | 	call	#__system___float_pow_n
2a5dc     16 FB 61 F5 | 	xor	result1, local04
2a5e0     A7 F0 03 F6 | 	mov	ptra, fp
2a5e4     B2 00 A0 FD | 	call	#popregs_
2a5e8                 | __system____builtin_atof_ret
2a5e8     2D 00 64 FD | 	ret
2a5ec                 | 
2a5ec                 | __system____builtin_ilogb
2a5ec     FC FB BF FD | 	call	#__system___float_Unpack
2a5f0     00 FE 0D F2 | 	cmp	result3, #0 wz
2a5f4     00 00 40 AF 
2a5f8     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
2a5fc     24 00 90 AD |  if_e	jmp	#LR__3781
2a600     80 FC 0D F2 | 	cmp	result2, #128 wz
2a604     18 00 90 5D |  if_ne	jmp	#LR__3780
2a608     00 00 10 FF 
2a60c     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
2a610     1E FA CD A9 |  if_e	bmask	result1, #30
2a614     0C 00 90 AD |  if_e	jmp	#LR__3781
2a618     1F FA C5 F9 | 	decod	result1, #31
2a61c     04 00 90 FD | 	jmp	#LR__3781
2a620                 | LR__3780
2a620     FE FA 01 F6 | 	mov	result1, result2
2a624                 | LR__3781
2a624                 | __system____builtin_ilogb_ret
2a624     2D 00 64 FD | 	ret
2a628                 | 
2a628                 | __system____builtin_sinf
2a628     03 4A 05 F6 | 	mov	COUNT_, #3
2a62c     A8 00 A0 FD | 	call	#pushregs_
2a630     09 27 02 F6 | 	mov	local01, arg01
2a634     87 64 20 FF 
2a638     DB 15 06 F6 | 	mov	arg02, ##1086918619
2a63c     8C F8 BF FD | 	call	#__system___float_div
2a640     FD 12 02 F6 | 	mov	arg01, result1
2a644     00 14 06 F6 | 	mov	arg02, #0
2a648     44 FB BF FD | 	call	#__system___float_tointeger
2a64c     FD 16 0A F6 | 	mov	arg03, result1 wz
2a650     44 00 90 AD |  if_e	jmp	#LR__3790
2a654     0B 13 52 F6 | 	abs	arg01, arg03 wc
2a658     1F 28 C6 C9 |  if_b	decod	local02, #31
2a65c     00 28 06 36 |  if_ae	mov	local02, #0
2a660     60 F2 BF FD | 	call	#__system___float_fromuns
2a664     14 FB 61 F5 | 	xor	result1, local02
2a668     FD 12 02 F6 | 	mov	arg01, result1
2a66c     1E 14 C6 F9 | 	decod	arg02, #30
2a670     54 F6 BF FD | 	call	#__system___float_mul
2a674     FD 12 02 F6 | 	mov	arg01, result1
2a678     87 24 20 FF 
2a67c     DB 15 06 F6 | 	mov	arg02, ##1078530011
2a680     44 F6 BF FD | 	call	#__system___float_mul
2a684     FD 14 02 F6 | 	mov	arg02, result1
2a688     13 13 02 F6 | 	mov	arg01, local01
2a68c     1F 14 E6 F4 | 	bitnot	arg02, #31
2a690     64 F2 BF FD | 	call	#__system___float_add
2a694     FD 26 02 F6 | 	mov	local01, result1
2a698                 | LR__3790
2a698     13 13 02 F6 | 	mov	arg01, local01
2a69c     66 E6 1E FF 
2a6a0     CD 14 06 F6 | 	mov	arg02, ##1036831949
2a6a4     01 16 06 F6 | 	mov	arg03, #1
2a6a8     50 FA BF FD | 	call	#__system___float_cmp
2a6ac     00 FA 55 F2 | 	cmps	result1, #0 wc
2a6b0     5C 00 90 3D |  if_ae	jmp	#LR__3791
2a6b4     13 13 02 F6 | 	mov	arg01, local01
2a6b8     66 E6 5E FF 
2a6bc     CD 14 06 F6 | 	mov	arg02, ##-1110651699
2a6c0     01 16 66 F6 | 	neg	arg03, #1
2a6c4     34 FA BF FD | 	call	#__system___float_cmp
2a6c8     01 FA 55 F2 | 	cmps	result1, #1 wc
2a6cc     40 00 90 CD |  if_b	jmp	#LR__3791
2a6d0     13 13 02 F6 | 	mov	arg01, local01
2a6d4     13 15 02 F6 | 	mov	arg02, local01
2a6d8     EC F5 BF FD | 	call	#__system___float_mul
2a6dc     FD 12 02 F6 | 	mov	arg01, result1
2a6e0     13 15 02 F6 | 	mov	arg02, local01
2a6e4     E0 F5 BF FD | 	call	#__system___float_mul
2a6e8     FD 12 02 F6 | 	mov	arg01, result1
2a6ec     00 60 20 FF 
2a6f0     00 14 06 F6 | 	mov	arg02, ##1086324736
2a6f4     D4 F7 BF FD | 	call	#__system___float_div
2a6f8     FD 14 02 F6 | 	mov	arg02, result1
2a6fc     13 13 02 F6 | 	mov	arg01, local01
2a700     1F 14 E6 F4 | 	bitnot	arg02, #31
2a704     F0 F1 BF FD | 	call	#__system___float_add
2a708     FD 2A 02 F6 | 	mov	local03, result1
2a70c     54 00 90 FD | 	jmp	#LR__3792
2a710                 | LR__3791
2a710     13 13 02 F6 | 	mov	arg01, local01
2a714     7C 91 26 FF 
2a718     83 15 06 F6 | 	mov	arg02, ##1294137731
2a71c     A8 F5 BF FD | 	call	#__system___float_mul
2a720     FD 12 02 F6 | 	mov	arg01, result1
2a724     00 14 06 F6 | 	mov	arg02, #0
2a728     64 FA BF FD | 	call	#__system___float_tointeger
2a72c     02 FA 65 F0 | 	shl	result1, #2
2a730     00 00 A0 FF 
2a734     FD 00 48 FD | 	qrotate	##1073741824, result1
2a738     19 12 62 FD | 	getqy	arg01
2a73c     09 13 52 F6 | 	abs	arg01, arg01 wc
2a740     1F 28 C6 C9 |  if_b	decod	local02, #31
2a744     00 28 06 36 |  if_ae	mov	local02, #0
2a748     78 F1 BF FD | 	call	#__system___float_fromuns
2a74c     14 FB 61 F5 | 	xor	result1, local02
2a750     FD 12 02 F6 | 	mov	arg01, result1
2a754     00 40 27 FF 
2a758     00 14 06 F6 | 	mov	arg02, ##1317011456
2a75c     6C F7 BF FD | 	call	#__system___float_div
2a760     FD 2A 02 F6 | 	mov	local03, result1
2a764                 | LR__3792
2a764     15 FB 01 F6 | 	mov	result1, local03
2a768     A7 F0 03 F6 | 	mov	ptra, fp
2a76c     B2 00 A0 FD | 	call	#popregs_
2a770                 | __system____builtin_sinf_ret
2a770     2D 00 64 FD | 	ret
2a774                 | 
2a774                 | __system____builtin_tanf
2a774     02 4A 05 F6 | 	mov	COUNT_, #2
2a778     A8 00 A0 FD | 	call	#pushregs_
2a77c     09 27 02 F6 | 	mov	local01, arg01
2a780     A4 FE BF FD | 	call	#__system____builtin_sinf
2a784     FD 28 02 F6 | 	mov	local02, result1
2a788     13 15 02 F6 | 	mov	arg02, local01
2a78c     87 E4 1F FF 
2a790     DB 13 06 F6 | 	mov	arg01, ##1070141403
2a794     1F 14 E6 F4 | 	bitnot	arg02, #31
2a798     5C F1 BF FD | 	call	#__system___float_add
2a79c     FD 12 02 F6 | 	mov	arg01, result1
2a7a0     84 FE BF FD | 	call	#__system____builtin_sinf
2a7a4     FD 14 02 F6 | 	mov	arg02, result1
2a7a8     14 13 02 F6 | 	mov	arg01, local02
2a7ac     1C F7 BF FD | 	call	#__system___float_div
2a7b0     A7 F0 03 F6 | 	mov	ptra, fp
2a7b4     B2 00 A0 FD | 	call	#popregs_
2a7b8                 | __system____builtin_tanf_ret
2a7b8     2D 00 64 FD | 	ret
2a7bc                 | 
2a7bc                 | __system____builtin_asinf
2a7bc     01 4A 05 F6 | 	mov	COUNT_, #1
2a7c0     A8 00 A0 FD | 	call	#pushregs_
2a7c4     09 27 02 F6 | 	mov	local01, arg01
2a7c8     13 15 02 F6 | 	mov	arg02, local01
2a7cc     13 13 02 F6 | 	mov	arg01, local01
2a7d0     F4 F4 BF FD | 	call	#__system___float_mul
2a7d4     FD 14 02 F6 | 	mov	arg02, result1
2a7d8     00 C0 1F FF 
2a7dc     00 12 06 F6 | 	mov	arg01, ##1065353216
2a7e0     1F 14 E6 F4 | 	bitnot	arg02, #31
2a7e4     10 F1 BF FD | 	call	#__system___float_add
2a7e8     FD 12 02 F6 | 	mov	arg01, result1
2a7ec     00 F4 BF FD | 	call	#__system___float_sqrt
2a7f0     FD 14 02 F6 | 	mov	arg02, result1
2a7f4     13 13 02 F6 | 	mov	arg01, local01
2a7f8     58 00 B0 FD | 	call	#__system____builtin_atan2f
2a7fc     A7 F0 03 F6 | 	mov	ptra, fp
2a800     B2 00 A0 FD | 	call	#popregs_
2a804                 | __system____builtin_asinf_ret
2a804     2D 00 64 FD | 	ret
2a808                 | 
2a808                 | __system____builtin_acosf
2a808     01 4A 05 F6 | 	mov	COUNT_, #1
2a80c     A8 00 A0 FD | 	call	#pushregs_
2a810     09 27 02 F6 | 	mov	local01, arg01
2a814     13 15 02 F6 | 	mov	arg02, local01
2a818     13 13 02 F6 | 	mov	arg01, local01
2a81c     A8 F4 BF FD | 	call	#__system___float_mul
2a820     FD 14 02 F6 | 	mov	arg02, result1
2a824     00 C0 1F FF 
2a828     00 12 06 F6 | 	mov	arg01, ##1065353216
2a82c     1F 14 E6 F4 | 	bitnot	arg02, #31
2a830     C4 F0 BF FD | 	call	#__system___float_add
2a834     FD 12 02 F6 | 	mov	arg01, result1
2a838     B4 F3 BF FD | 	call	#__system___float_sqrt
2a83c     FD 12 02 F6 | 	mov	arg01, result1
2a840     13 15 02 F6 | 	mov	arg02, local01
2a844     0C 00 B0 FD | 	call	#__system____builtin_atan2f
2a848     A7 F0 03 F6 | 	mov	ptra, fp
2a84c     B2 00 A0 FD | 	call	#popregs_
2a850                 | __system____builtin_acosf_ret
2a850     2D 00 64 FD | 	ret
2a854                 | 
2a854                 | __system____builtin_atan2f
2a854     04 4A 05 F6 | 	mov	COUNT_, #4
2a858     A8 00 A0 FD | 	call	#pushregs_
2a85c     09 27 02 F6 | 	mov	local01, arg01
2a860     0A 29 02 F6 | 	mov	local02, arg02
2a864     13 13 02 F6 | 	mov	arg01, local01
2a868     00 14 06 F6 | 	mov	arg02, #0
2a86c     01 16 06 F6 | 	mov	arg03, #1
2a870     88 F8 BF FD | 	call	#__system___float_cmp
2a874     00 FA 0D F2 | 	cmp	result1, #0 wz
2a878     28 00 90 5D |  if_ne	jmp	#LR__3800
2a87c     14 13 02 F6 | 	mov	arg01, local02
2a880     00 14 06 F6 | 	mov	arg02, #0
2a884     01 16 06 F6 | 	mov	arg03, #1
2a888     70 F8 BF FD | 	call	#__system___float_cmp
2a88c     00 FA 55 F2 | 	cmps	result1, #0 wc
2a890     87 24 60 CF 
2a894     DB FB 05 C6 |  if_b	mov	result1, ##-1068953637
2a898     DC 00 90 CD |  if_b	jmp	#LR__3801
2a89c     00 FA 05 F6 | 	mov	result1, #0
2a8a0     D4 00 90 FD | 	jmp	#LR__3801
2a8a4                 | LR__3800
2a8a4     14 13 02 F6 | 	mov	arg01, local02
2a8a8     14 15 02 F6 | 	mov	arg02, local02
2a8ac     18 F4 BF FD | 	call	#__system___float_mul
2a8b0     FD 2A 02 F6 | 	mov	local03, result1
2a8b4     13 13 02 F6 | 	mov	arg01, local01
2a8b8     13 15 02 F6 | 	mov	arg02, local01
2a8bc     08 F4 BF FD | 	call	#__system___float_mul
2a8c0     FD 14 02 F6 | 	mov	arg02, result1
2a8c4     15 13 02 F6 | 	mov	arg01, local03
2a8c8     2C F0 BF FD | 	call	#__system___float_add
2a8cc     FD 12 02 F6 | 	mov	arg01, result1
2a8d0     1C F3 BF FD | 	call	#__system___float_sqrt
2a8d4     FD 2A 02 F6 | 	mov	local03, result1
2a8d8     14 13 02 F6 | 	mov	arg01, local02
2a8dc     15 15 02 F6 | 	mov	arg02, local03
2a8e0     E8 F5 BF FD | 	call	#__system___float_div
2a8e4     FD 28 02 F6 | 	mov	local02, result1
2a8e8     13 13 02 F6 | 	mov	arg01, local01
2a8ec     15 15 02 F6 | 	mov	arg02, local03
2a8f0     D8 F5 BF FD | 	call	#__system___float_div
2a8f4     FD 26 02 F6 | 	mov	local01, result1
2a8f8     00 40 27 FF 
2a8fc     00 12 06 F6 | 	mov	arg01, ##1317011456
2a900     14 15 02 F6 | 	mov	arg02, local02
2a904     C0 F3 BF FD | 	call	#__system___float_mul
2a908     FD 12 02 F6 | 	mov	arg01, result1
2a90c     00 14 06 F6 | 	mov	arg02, #0
2a910     7C F8 BF FD | 	call	#__system___float_tointeger
2a914     FD 2A 02 F6 | 	mov	local03, result1
2a918     00 40 27 FF 
2a91c     00 12 06 F6 | 	mov	arg01, ##1317011456
2a920     13 15 02 F6 | 	mov	arg02, local01
2a924     A0 F3 BF FD | 	call	#__system___float_mul
2a928     FD 12 02 F6 | 	mov	arg01, result1
2a92c     00 14 06 F6 | 	mov	arg02, #0
2a930     5C F8 BF FD | 	call	#__system___float_tointeger
2a934     FD 2A 52 FD | 	qvector	local03, result1
2a938     87 24 20 FF 
2a93c     DB 2B 06 F6 | 	mov	local03, ##1078530011
2a940     19 12 62 FD | 	getqy	arg01
2a944     01 12 C6 F0 | 	sar	arg01, #1
2a948     09 13 52 F6 | 	abs	arg01, arg01 wc
2a94c     1F 2C C6 C9 |  if_b	decod	local04, #31
2a950     00 2C 06 36 |  if_ae	mov	local04, #0
2a954     6C EF BF FD | 	call	#__system___float_fromuns
2a958     16 FB 61 F5 | 	xor	result1, local04
2a95c     FD 12 02 F6 | 	mov	arg01, result1
2a960     00 40 27 FF 
2a964     00 14 06 F6 | 	mov	arg02, ##1317011456
2a968     60 F5 BF FD | 	call	#__system___float_div
2a96c     FD 14 02 F6 | 	mov	arg02, result1
2a970     15 13 02 F6 | 	mov	arg01, local03
2a974     50 F3 BF FD | 	call	#__system___float_mul
2a978                 | LR__3801
2a978     A7 F0 03 F6 | 	mov	ptra, fp
2a97c     B2 00 A0 FD | 	call	#popregs_
2a980                 | __system____builtin_atan2f_ret
2a980     2D 00 64 FD | 	ret
2a984                 | 
2a984                 | __system____builtin_exp2f
2a984     04 4A 05 F6 | 	mov	COUNT_, #4
2a988     A8 00 A0 FD | 	call	#pushregs_
2a98c     09 27 02 F6 | 	mov	local01, arg01
2a990     00 7F 21 FF 
2a994     00 14 06 F6 | 	mov	arg02, ##1123942400
2a998     01 16 66 F6 | 	neg	arg03, #1
2a99c     5C F7 BF FD | 	call	#__system___float_cmp
2a9a0     00 FA 55 F2 | 	cmps	result1, #0 wc
2a9a4     00 C0 3F 3F 
2a9a8     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
2a9ac     DC 00 90 3D |  if_ae	jmp	#LR__3811
2a9b0     13 13 02 F6 | 	mov	arg01, local01
2a9b4     00 7F 61 FF 
2a9b8     00 14 06 F6 | 	mov	arg02, ##-1023541248
2a9bc     01 16 06 F6 | 	mov	arg03, #1
2a9c0     38 F7 BF FD | 	call	#__system___float_cmp
2a9c4     00 FA 55 F2 | 	cmps	result1, #0 wc
2a9c8     00 FA 05 C6 |  if_b	mov	result1, #0
2a9cc     BC 00 90 CD |  if_b	jmp	#LR__3811
2a9d0     13 13 02 F6 | 	mov	arg01, local01
2a9d4     00 14 06 F6 | 	mov	arg02, #0
2a9d8     B4 F7 BF FD | 	call	#__system___float_tointeger
2a9dc     FD 28 02 F6 | 	mov	local02, result1
2a9e0     14 13 52 F6 | 	abs	arg01, local02 wc
2a9e4     1F 2A C6 C9 |  if_b	decod	local03, #31
2a9e8     00 2A 06 36 |  if_ae	mov	local03, #0
2a9ec     D4 EE BF FD | 	call	#__system___float_fromuns
2a9f0     15 FB 61 F5 | 	xor	result1, local03
2a9f4     FD 14 02 F6 | 	mov	arg02, result1
2a9f8     13 13 02 F6 | 	mov	arg01, local01
2a9fc     1F 14 E6 F4 | 	bitnot	arg02, #31
2aa00     F4 EE BF FD | 	call	#__system___float_add
2aa04     FD 2C 02 F6 | 	mov	local04, result1
2aa08     16 13 02 F6 | 	mov	arg01, local04
2aa0c     00 14 06 F6 | 	mov	arg02, #0
2aa10     01 16 06 F6 | 	mov	arg03, #1
2aa14     E4 F6 BF FD | 	call	#__system___float_cmp
2aa18     00 FA 55 F2 | 	cmps	result1, #0 wc
2aa1c     18 00 90 3D |  if_ae	jmp	#LR__3810
2aa20     16 13 02 F6 | 	mov	arg01, local04
2aa24     00 C0 1F FF 
2aa28     00 14 06 F6 | 	mov	arg02, ##1065353216
2aa2c     C8 EE BF FD | 	call	#__system___float_add
2aa30     FD 2C 02 F6 | 	mov	local04, result1
2aa34     01 28 86 F1 | 	sub	local02, #1
2aa38                 | LR__3810
2aa38     7F 28 06 F1 | 	add	local02, #127
2aa3c     17 28 66 F0 | 	shl	local02, #23
2aa40     16 13 02 F6 | 	mov	arg01, local04
2aa44     00 80 26 FF 
2aa48     00 14 06 F6 | 	mov	arg02, ##1291845632
2aa4c     78 F2 BF FD | 	call	#__system___float_mul
2aa50     FD 12 02 F6 | 	mov	arg01, result1
2aa54     00 14 06 F6 | 	mov	arg02, #0
2aa58     34 F7 BF FD | 	call	#__system___float_tointeger
2aa5c     FD 2C 0A F6 | 	mov	local04, result1 wz
2aa60     14 FB 01 A6 |  if_e	mov	result1, local02
2aa64     24 00 90 AD |  if_e	jmp	#LR__3811
2aa68     3E 2C 26 F4 | 	bith	local04, #62
2aa6c     0F 2C 62 FD | 	qexp	local04
2aa70     14 13 02 F6 | 	mov	arg01, local02
2aa74     18 14 62 FD | 	getqx	arg02
2aa78     01 14 06 F1 | 	add	arg02, #1
2aa7c     01 14 46 F0 | 	shr	arg02, #1
2aa80     00 80 1F FF 
2aa84     00 14 06 F1 | 	add	arg02, ##1056964608
2aa88     3C F2 BF FD | 	call	#__system___float_mul
2aa8c                 | LR__3811
2aa8c     A7 F0 03 F6 | 	mov	ptra, fp
2aa90     B2 00 A0 FD | 	call	#popregs_
2aa94                 | __system____builtin_exp2f_ret
2aa94     2D 00 64 FD | 	ret
2aa98                 | 
2aa98                 | __system____builtin_log2f
2aa98     06 4A 05 F6 | 	mov	COUNT_, #6
2aa9c     A8 00 A0 FD | 	call	#pushregs_
2aaa0     09 27 02 F6 | 	mov	local01, arg01
2aaa4     09 29 0A F6 | 	mov	local02, arg01 wz
2aaa8     00 00 40 5F 
2aaac     00 28 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
2aab0     00 40 00 AF 
2aab4     00 FA 65 A6 |  if_e	neg	result1, ##8388608
2aab8     08 01 90 AD |  if_e	jmp	#LR__3824
2aabc     00 28 56 F2 | 	cmps	local02, #0 wc
2aac0     00 E0 3F CF 
2aac4     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
2aac8     F8 00 90 CD |  if_b	jmp	#LR__3824
2aacc     13 13 02 F6 | 	mov	arg01, local01
2aad0     00 90 20 FF 
2aad4     00 14 06 F6 | 	mov	arg02, ##1092616192
2aad8     01 16 06 F6 | 	mov	arg03, #1
2aadc     1C F6 BF FD | 	call	#__system___float_cmp
2aae0     00 FA 0D F2 | 	cmp	result1, #0 wz
2aae4     4D 2A 20 AF 
2aae8     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
2aaec     D4 00 90 AD |  if_e	jmp	#LR__3824
2aaf0     13 13 02 F6 | 	mov	arg01, local01
2aaf4     FC 16 20 FF 
2aaf8     54 14 06 F6 | 	mov	arg02, ##1076754516
2aafc     01 16 06 F6 | 	mov	arg03, #1
2ab00     F8 F5 BF FD | 	call	#__system___float_cmp
2ab04     00 FA 0D F2 | 	cmp	result1, #0 wz
2ab08     55 DC 1F AF 
2ab0c     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
2ab10     B0 00 90 AD |  if_e	jmp	#LR__3824
2ab14     14 2B 02 F6 | 	mov	local03, local02
2ab18     17 2A 46 F0 | 	shr	local03, #23
2ab1c     15 2B E2 F8 | 	getbyte	local03, local03, #0
2ab20     17 29 06 F4 | 	bitl	local02, #279
2ab24     14 2D 02 F6 | 	mov	local04, local02
2ab28     FF 2A 0E F2 | 	cmp	local03, #255 wz
2ab2c     1C 00 90 5D |  if_ne	jmp	#LR__3820
2ab30     00 2C 0E F2 | 	cmp	local04, #0 wz
2ab34     00 C0 3F 5F 
2ab38     00 2E 06 56 |  if_ne	mov	local05, ##2139095040
2ab3c     00 E0 3F AF 
2ab40     00 2E 06 A6 |  if_e	mov	local05, ##2143289344
2ab44     17 FB 01 F6 | 	mov	result1, local05
2ab48     78 00 90 FD | 	jmp	#LR__3824
2ab4c                 | LR__3820
2ab4c     00 2A 0E F2 | 	cmp	local03, #0 wz
2ab50     17 2C 26 54 |  if_ne	bith	local04, #23
2ab54     7F 2A 86 51 |  if_ne	sub	local03, #127
2ab58     28 00 90 5D |  if_ne	jmp	#LR__3823
2ab5c     00 2C 0E F2 | 	cmp	local04, #0 wz
2ab60     00 40 00 AF 
2ab64     00 FA 65 A6 |  if_e	neg	result1, ##8388608
2ab68     58 00 90 AD |  if_e	jmp	#LR__3824
2ab6c     7E 2A 66 F6 | 	neg	local03, #126
2ab70     97 08 48 FB | 	callpa	#(@LR__3822-@LR__3821)>>2,fcache_load_ptr_
2ab74                 | LR__3821
2ab74     17 2C 2E F4 | 	testbn	local04, #23 wz
2ab78     01 2C 66 A0 |  if_e	shl	local04, #1
2ab7c     01 2A 06 A1 |  if_e	add	local03, #1
2ab80     F0 FF 9F AD |  if_e	jmp	#LR__3821
2ab84                 | LR__3822
2ab84                 | LR__3823
2ab84     0E 2C 62 FD | 	qlog	local04
2ab88     01 2A 86 F1 | 	sub	local03, #1
2ab8c     15 13 52 F6 | 	abs	arg01, local03 wc
2ab90     1F 30 C6 C9 |  if_b	decod	local06, #31
2ab94     00 30 06 36 |  if_ae	mov	local06, #0
2ab98     18 2E 62 FD | 	getqx	local05
2ab9c     9B 2E 06 F4 | 	bitl	local05, #155
2aba0     08 2E 06 F1 | 	add	local05, #8
2aba4     04 2E 46 F0 | 	shr	local05, #4
2aba8     00 C0 1F FF 
2abac     00 2E 06 F1 | 	add	local05, ##1065353216
2abb0     10 ED BF FD | 	call	#__system___float_fromuns
2abb4     18 FB 61 F5 | 	xor	result1, local06
2abb8     FD 14 02 F6 | 	mov	arg02, result1
2abbc     17 13 02 F6 | 	mov	arg01, local05
2abc0     34 ED BF FD | 	call	#__system___float_add
2abc4                 | LR__3824
2abc4     A7 F0 03 F6 | 	mov	ptra, fp
2abc8     B2 00 A0 FD | 	call	#popregs_
2abcc                 | __system____builtin_log2f_ret
2abcc     2D 00 64 FD | 	ret
2abd0                 | 
2abd0                 | __system____builtin_powf
2abd0     04 4A 05 F6 | 	mov	COUNT_, #4
2abd4     A8 00 A0 FD | 	call	#pushregs_
2abd8     09 27 02 F6 | 	mov	local01, arg01
2abdc     0A 29 02 F6 | 	mov	local02, arg02
2abe0     14 13 02 F6 | 	mov	arg01, local02
2abe4     00 14 06 F6 | 	mov	arg02, #0
2abe8     A4 F5 BF FD | 	call	#__system___float_tointeger
2abec     FD 2A 02 F6 | 	mov	local03, result1
2abf0     15 13 52 F6 | 	abs	arg01, local03 wc
2abf4     1F 2C C6 C9 |  if_b	decod	local04, #31
2abf8     00 2C 06 36 |  if_ae	mov	local04, #0
2abfc     C4 EC BF FD | 	call	#__system___float_fromuns
2ac00     16 FB 61 F5 | 	xor	result1, local04
2ac04     FD 12 02 F6 | 	mov	arg01, result1
2ac08     14 15 02 F6 | 	mov	arg02, local02
2ac0c     01 16 06 F6 | 	mov	arg03, #1
2ac10     E8 F4 BF FD | 	call	#__system___float_cmp
2ac14     00 FA 0D F2 | 	cmp	result1, #0 wz
2ac18     18 00 90 5D |  if_ne	jmp	#LR__3830
2ac1c     00 C0 1F FF 
2ac20     00 12 06 F6 | 	mov	arg01, ##1065353216
2ac24     13 15 02 F6 | 	mov	arg02, local01
2ac28     15 17 02 F6 | 	mov	arg03, local03
2ac2c     A0 00 B0 FD | 	call	#__system___float_pow_n
2ac30     58 00 90 FD | 	jmp	#LR__3831
2ac34                 | LR__3830
2ac34     13 13 02 F6 | 	mov	arg01, local01
2ac38     00 14 06 F6 | 	mov	arg02, #0
2ac3c     01 16 06 F6 | 	mov	arg03, #1
2ac40     B8 F4 BF FD | 	call	#__system___float_cmp
2ac44     00 FA 55 F2 | 	cmps	result1, #0 wc
2ac48     00 E0 3F CF 
2ac4c     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
2ac50     38 00 90 CD |  if_b	jmp	#LR__3831
2ac54     13 13 02 F6 | 	mov	arg01, local01
2ac58     00 14 06 F6 | 	mov	arg02, #0
2ac5c     01 16 06 F6 | 	mov	arg03, #1
2ac60     98 F4 BF FD | 	call	#__system___float_cmp
2ac64     00 FA 0D F2 | 	cmp	result1, #0 wz
2ac68     00 FA 05 A6 |  if_e	mov	result1, #0
2ac6c     1C 00 90 AD |  if_e	jmp	#LR__3831
2ac70     13 13 02 F6 | 	mov	arg01, local01
2ac74     20 FE BF FD | 	call	#__system____builtin_log2f
2ac78     FD 12 02 F6 | 	mov	arg01, result1
2ac7c     14 15 02 F6 | 	mov	arg02, local02
2ac80     44 F0 BF FD | 	call	#__system___float_mul
2ac84     FD 12 02 F6 | 	mov	arg01, result1
2ac88     F8 FC BF FD | 	call	#__system____builtin_exp2f
2ac8c                 | LR__3831
2ac8c     A7 F0 03 F6 | 	mov	ptra, fp
2ac90     B2 00 A0 FD | 	call	#popregs_
2ac94                 | __system____builtin_powf_ret
2ac94     2D 00 64 FD | 	ret
2ac98                 | 
2ac98                 | __system____builtin_logbase
2ac98     02 4A 05 F6 | 	mov	COUNT_, #2
2ac9c     A8 00 A0 FD | 	call	#pushregs_
2aca0     09 27 02 F6 | 	mov	local01, arg01
2aca4     0A 13 02 F6 | 	mov	arg01, arg02
2aca8     EC FD BF FD | 	call	#__system____builtin_log2f
2acac     FD 28 02 F6 | 	mov	local02, result1
2acb0     13 13 02 F6 | 	mov	arg01, local01
2acb4     E0 FD BF FD | 	call	#__system____builtin_log2f
2acb8     FD 14 02 F6 | 	mov	arg02, result1
2acbc     14 13 02 F6 | 	mov	arg01, local02
2acc0     08 F2 BF FD | 	call	#__system___float_div
2acc4     A7 F0 03 F6 | 	mov	ptra, fp
2acc8     B2 00 A0 FD | 	call	#popregs_
2accc                 | __system____builtin_logbase_ret
2accc     2D 00 64 FD | 	ret
2acd0                 | 
2acd0                 | __system___float_pow_n
2acd0     05 4A 05 F6 | 	mov	COUNT_, #5
2acd4     A8 00 A0 FD | 	call	#pushregs_
2acd8     09 27 02 F6 | 	mov	local01, arg01
2acdc     0A 29 02 F6 | 	mov	local02, arg02
2ace0     0B 2B 02 F6 | 	mov	local03, arg03
2ace4     00 2A 56 F2 | 	cmps	local03, #0 wc
2ace8     18 00 90 3D |  if_ae	jmp	#LR__3840
2acec     01 2C 06 F6 | 	mov	local04, #1
2acf0     15 2B 62 F6 | 	neg	local03, local03
2acf4     00 2A 56 F2 | 	cmps	local03, #0 wc
2acf8     00 FA 05 C6 |  if_b	mov	result1, #0
2acfc     94 00 90 CD |  if_b	jmp	#LR__3848
2ad00     04 00 90 FD | 	jmp	#LR__3841
2ad04                 | LR__3840
2ad04     00 2C 06 F6 | 	mov	local04, #0
2ad08                 | LR__3841
2ad08     00 C0 1F FF 
2ad0c     00 2E 06 F6 | 	mov	local05, ##1065353216
2ad10                 | LR__3842
2ad10     01 2A 56 F2 | 	cmps	local03, #1 wc
2ad14     30 00 90 CD |  if_b	jmp	#LR__3844
2ad18     01 2A CE F7 | 	test	local03, #1 wz
2ad1c     10 00 90 AD |  if_e	jmp	#LR__3843
2ad20     17 13 02 F6 | 	mov	arg01, local05
2ad24     14 15 02 F6 | 	mov	arg02, local02
2ad28     9C EF BF FD | 	call	#__system___float_mul
2ad2c     FD 2E 02 F6 | 	mov	local05, result1
2ad30                 | LR__3843
2ad30     01 2A C6 F0 | 	sar	local03, #1
2ad34     14 13 02 F6 | 	mov	arg01, local02
2ad38     14 15 02 F6 | 	mov	arg02, local02
2ad3c     88 EF BF FD | 	call	#__system___float_mul
2ad40     FD 28 02 F6 | 	mov	local02, result1
2ad44     C8 FF 9F FD | 	jmp	#LR__3842
2ad48                 | LR__3844
2ad48     00 2C 0E F2 | 	cmp	local04, #0 wz
2ad4c     14 00 90 AD |  if_e	jmp	#LR__3845
2ad50     13 13 02 F6 | 	mov	arg01, local01
2ad54     17 15 02 F6 | 	mov	arg02, local05
2ad58     70 F1 BF FD | 	call	#__system___float_div
2ad5c     FD 2E 02 F6 | 	mov	local05, result1
2ad60     2C 00 90 FD | 	jmp	#LR__3847
2ad64                 | LR__3845
2ad64     13 13 02 F6 | 	mov	arg01, local01
2ad68     00 C0 1F FF 
2ad6c     00 14 06 F6 | 	mov	arg02, ##1065353216
2ad70     01 16 06 F6 | 	mov	arg03, #1
2ad74     84 F3 BF FD | 	call	#__system___float_cmp
2ad78     00 FA 0D F2 | 	cmp	result1, #0 wz
2ad7c     10 00 90 AD |  if_e	jmp	#LR__3846
2ad80     13 13 02 F6 | 	mov	arg01, local01
2ad84     17 15 02 F6 | 	mov	arg02, local05
2ad88     3C EF BF FD | 	call	#__system___float_mul
2ad8c     FD 2E 02 F6 | 	mov	local05, result1
2ad90                 | LR__3846
2ad90                 | LR__3847
2ad90     17 FB 01 F6 | 	mov	result1, local05
2ad94                 | LR__3848
2ad94     A7 F0 03 F6 | 	mov	ptra, fp
2ad98     B2 00 A0 FD | 	call	#popregs_
2ad9c                 | __system___float_pow_n_ret
2ad9c     2D 00 64 FD | 	ret
2ada0                 | 
2ada0                 | __system___gc_ptrs
2ada0     EC 00 02 F6 | 	mov	_var01, __heap_ptr
2ada4     00 03 02 F6 | 	mov	_var02, _var01
2ada8     BB 00 00 FF 
2adac     F8 02 06 F1 | 	add	_var02, ##95992
2adb0     00 FD 09 FB | 	rdlong	result2, _var01 wz
2adb4     74 00 90 5D |  if_ne	jmp	#LR__3850
2adb8     01 FD 01 F6 | 	mov	result2, _var02
2adbc     00 FD 81 F1 | 	sub	result2, _var01
2adc0     00 03 58 FC | 	wrword	#1, _var01
2adc4     00 FB 01 F6 | 	mov	result1, _var01
2adc8     02 FA 05 F1 | 	add	result1, #2
2adcc     36 00 80 FF 
2add0     FD 20 59 FC | 	wrword	##27792, result1
2add4     00 FB 01 F6 | 	mov	result1, _var01
2add8     04 FA 05 F1 | 	add	result1, #4
2addc     FD 00 58 FC | 	wrword	#0, result1
2ade0     00 FB 01 F6 | 	mov	result1, _var01
2ade4     06 FA 05 F1 | 	add	result1, #6
2ade8     FD 02 58 FC | 	wrword	#1, result1
2adec     10 00 06 F1 | 	add	_var01, #16
2adf0     FE FC 51 F6 | 	abs	result2, result2 wc
2adf4     04 FC 45 F0 | 	shr	result2, #4
2adf8     FE FC 81 F6 | 	negc	result2, result2
2adfc     00 FD 51 FC | 	wrword	result2, _var01
2ae00     00 FD 01 F6 | 	mov	result2, _var01
2ae04     02 FC 05 F1 | 	add	result2, #2
2ae08     36 00 80 FF 
2ae0c     FE 1E 59 FC | 	wrword	##27791, result2
2ae10     00 FD 01 F6 | 	mov	result2, _var01
2ae14     04 FC 05 F1 | 	add	result2, #4
2ae18     FE 00 58 FC | 	wrword	#0, result2
2ae1c     00 FD 01 F6 | 	mov	result2, _var01
2ae20     06 FC 05 F1 | 	add	result2, #6
2ae24     FE 00 58 FC | 	wrword	#0, result2
2ae28     10 00 86 F1 | 	sub	_var01, #16
2ae2c                 | LR__3850
2ae2c     00 FB 01 F6 | 	mov	result1, _var01
2ae30     01 FD 01 F6 | 	mov	result2, _var02
2ae34                 | __system___gc_ptrs_ret
2ae34     2D 00 64 FD | 	ret
2ae38                 | 
2ae38                 | __system___gc_tryalloc
2ae38     0B 4A 05 F6 | 	mov	COUNT_, #11
2ae3c     A8 00 A0 FD | 	call	#pushregs_
2ae40     09 27 02 F6 | 	mov	local01, arg01
2ae44     0A 29 02 F6 | 	mov	local02, arg02
2ae48     54 FF BF FD | 	call	#__system___gc_ptrs
2ae4c     FD 2A 02 F6 | 	mov	local03, result1
2ae50     FE 2C 02 F6 | 	mov	local04, result2
2ae54     15 2F 02 F6 | 	mov	local05, local03
2ae58     00 30 06 F6 | 	mov	local06, #0
2ae5c     97 1E 48 FB | 	callpa	#(@LR__3861-@LR__3860)>>2,fcache_load_ptr_
2ae60                 | LR__3860
2ae60     17 33 02 F6 | 	mov	local07, local05
2ae64     06 2E 06 F1 | 	add	local05, #6
2ae68     17 15 EA FA | 	rdword	arg02, local05 wz
2ae6c     15 13 02 F6 | 	mov	arg01, local03
2ae70     00 FA 05 A6 |  if_e	mov	result1, #0
2ae74     04 14 66 50 |  if_ne	shl	arg02, #4
2ae78     0A 13 02 51 |  if_ne	add	arg01, arg02
2ae7c     09 FB 01 56 |  if_ne	mov	result1, arg01
2ae80     FD 2E 0A F6 | 	mov	local05, result1 wz
2ae84     17 31 E2 5A |  if_ne	rdword	local06, local05
2ae88     00 2E 0E F2 | 	cmp	local05, #0 wz
2ae8c     16 2F 52 52 |  if_ne	cmps	local05, local04 wc
2ae90     08 00 90 1D |  if_a	jmp	#LR__3862
2ae94     18 27 5A 52 |  if_ne	cmps	local01, local06 wcz
2ae98     C4 FF 9F 1D |  if_a	jmp	#LR__3860
2ae9c                 | LR__3861
2ae9c                 | LR__3862
2ae9c     00 2E 0E F2 | 	cmp	local05, #0 wz
2aea0     17 FB 01 A6 |  if_e	mov	result1, local05
2aea4     3C 01 90 AD |  if_e	jmp	#LR__3865
2aea8     17 FD 01 F6 | 	mov	result2, local05
2aeac     06 FC 05 F1 | 	add	result2, #6
2aeb0     FE 34 E2 FA | 	rdword	local08, result2
2aeb4     18 27 52 F2 | 	cmps	local01, local06 wc
2aeb8     C0 00 90 3D |  if_ae	jmp	#LR__3864
2aebc     17 27 52 FC | 	wrword	local01, local05
2aec0     17 13 02 F6 | 	mov	arg01, local05
2aec4     13 35 02 F6 | 	mov	local08, local01
2aec8     04 34 66 F0 | 	shl	local08, #4
2aecc     1A 13 02 F1 | 	add	arg01, local08
2aed0     13 31 82 F1 | 	sub	local06, local01
2aed4     09 31 52 FC | 	wrword	local06, arg01
2aed8     09 35 02 F6 | 	mov	local08, arg01
2aedc     02 34 06 F1 | 	add	local08, #2
2aee0     36 00 80 FF 
2aee4     1A 1F 59 FC | 	wrword	##27791, local08
2aee8     17 15 0A F6 | 	mov	arg02, local05 wz
2aeec     00 FA 05 A6 |  if_e	mov	result1, #0
2aef0     15 15 82 51 |  if_ne	sub	arg02, local03
2aef4     04 14 46 50 |  if_ne	shr	arg02, #4
2aef8     0A FB 01 56 |  if_ne	mov	result1, arg02
2aefc     09 35 02 F6 | 	mov	local08, arg01
2af00     04 34 06 F1 | 	add	local08, #4
2af04     1A FB 51 FC | 	wrword	result1, local08
2af08     17 35 02 F6 | 	mov	local08, local05
2af0c     06 34 06 F1 | 	add	local08, #6
2af10     09 15 02 F6 | 	mov	arg02, arg01
2af14     1A 35 E2 FA | 	rdword	local08, local08
2af18     06 14 06 F1 | 	add	arg02, #6
2af1c     0A 35 52 FC | 	wrword	local08, arg02
2af20     09 37 02 F6 | 	mov	local09, arg01
2af24     1B 15 0A F6 | 	mov	arg02, local09 wz
2af28     00 FA 05 A6 |  if_e	mov	result1, #0
2af2c     15 15 82 51 |  if_ne	sub	arg02, local03
2af30     04 14 46 50 |  if_ne	shr	arg02, #4
2af34     0A FB 01 56 |  if_ne	mov	result1, arg02
2af38     FD 34 02 F6 | 	mov	local08, result1
2af3c     09 39 EA FA | 	rdword	local10, arg01 wz
2af40     00 FA 05 A6 |  if_e	mov	result1, #0
2af44     04 38 66 50 |  if_ne	shl	local10, #4
2af48     1C 13 02 51 |  if_ne	add	arg01, local10
2af4c     09 FB 01 56 |  if_ne	mov	result1, arg01
2af50     FD 3A 0A F6 | 	mov	local11, result1 wz
2af54     24 00 90 AD |  if_e	jmp	#LR__3863
2af58     16 3B 52 F2 | 	cmps	local11, local04 wc
2af5c     1C 00 90 3D |  if_ae	jmp	#LR__3863
2af60     1B 15 0A F6 | 	mov	arg02, local09 wz
2af64     00 FA 05 A6 |  if_e	mov	result1, #0
2af68     15 15 82 51 |  if_ne	sub	arg02, local03
2af6c     04 14 46 50 |  if_ne	shr	arg02, #4
2af70     0A FB 01 56 |  if_ne	mov	result1, arg02
2af74     04 3A 06 F1 | 	add	local11, #4
2af78     1D FB 51 FC | 	wrword	result1, local11
2af7c                 | LR__3863
2af7c                 | LR__3864
2af7c     06 32 06 F1 | 	add	local07, #6
2af80     19 35 52 FC | 	wrword	local08, local07
2af84     36 00 00 FF 
2af88     80 36 06 F6 | 	mov	local09, ##27776
2af8c     14 37 42 F5 | 	or	local09, local02
2af90     00 FA 05 F6 | 	mov	result1, #0
2af94     01 FA 61 FD | 	cogid	result1
2af98     FD 36 42 F5 | 	or	local09, result1
2af9c     17 3B 02 F6 | 	mov	local11, local05
2afa0     02 3A 06 F1 | 	add	local11, #2
2afa4     1D 37 52 FC | 	wrword	local09, local11
2afa8     15 37 02 F6 | 	mov	local09, local03
2afac     08 36 06 F1 | 	add	local09, #8
2afb0     17 3B 02 F6 | 	mov	local11, local05
2afb4     1B 37 E2 FA | 	rdword	local09, local09
2afb8     06 3A 06 F1 | 	add	local11, #6
2afbc     1D 37 52 FC | 	wrword	local09, local11
2afc0     17 15 0A F6 | 	mov	arg02, local05 wz
2afc4     00 FA 05 A6 |  if_e	mov	result1, #0
2afc8     15 15 82 51 |  if_ne	sub	arg02, local03
2afcc     04 14 46 50 |  if_ne	shr	arg02, #4
2afd0     0A FB 01 56 |  if_ne	mov	result1, arg02
2afd4     08 2A 06 F1 | 	add	local03, #8
2afd8     15 FB 51 FC | 	wrword	result1, local03
2afdc     08 2E 06 F1 | 	add	local05, #8
2afe0     17 FB 01 F6 | 	mov	result1, local05
2afe4                 | LR__3865
2afe4     A7 F0 03 F6 | 	mov	ptra, fp
2afe8     B2 00 A0 FD | 	call	#popregs_
2afec                 | __system___gc_tryalloc_ret
2afec     2D 00 64 FD | 	ret
2aff0                 | 
2aff0                 | __system___gc_alloc_managed
2aff0     01 4A 05 F6 | 	mov	COUNT_, #1
2aff4     A8 00 A0 FD | 	call	#pushregs_
2aff8     09 27 02 F6 | 	mov	local01, arg01
2affc     00 14 06 F6 | 	mov	arg02, #0
2b000     1C 00 B0 FD | 	call	#__system___gc_doalloc
2b004     FD 14 0A F6 | 	mov	arg02, result1 wz
2b008     01 26 56 A2 |  if_e	cmps	local01, #1 wc
2b00c     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
2b010     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
2b014     A7 F0 03 F6 | 	mov	ptra, fp
2b018     B2 00 A0 FD | 	call	#popregs_
2b01c                 | __system___gc_alloc_managed_ret
2b01c     2D 00 64 FD | 	ret
2b020                 | 
2b020                 | __system___gc_doalloc
2b020     06 4A 05 F6 | 	mov	COUNT_, #6
2b024     A8 00 A0 FD | 	call	#pushregs_
2b028     09 27 0A F6 | 	mov	local01, arg01 wz
2b02c     0A 29 02 F6 | 	mov	local02, arg02
2b030     00 FA 05 A6 |  if_e	mov	result1, #0
2b034     8C 00 90 AD |  if_e	jmp	#LR__3877
2b038     17 26 06 F1 | 	add	local01, #23
2b03c     0F 26 26 F5 | 	andn	local01, #15
2b040     04 26 46 F0 | 	shr	local01, #4
2b044     1C E6 05 F1 | 	add	ptr___system__dat__, #28
2b048     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2b04c     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
2b050     FC BD BF FD | 	call	#__system___lockmem
2b054     13 13 02 F6 | 	mov	arg01, local01
2b058     14 15 02 F6 | 	mov	arg02, local02
2b05c     D8 FD BF FD | 	call	#__system___gc_tryalloc
2b060     FD 2A 0A F6 | 	mov	local03, result1 wz
2b064     14 00 90 5D |  if_ne	jmp	#LR__3870
2b068     70 03 B0 FD | 	call	#__system___gc_docollect
2b06c     13 13 02 F6 | 	mov	arg01, local01
2b070     14 15 02 F6 | 	mov	arg02, local02
2b074     C0 FD BF FD | 	call	#__system___gc_tryalloc
2b078     FD 2A 02 F6 | 	mov	local03, result1
2b07c                 | LR__3870
2b07c     1C E6 05 F1 | 	add	ptr___system__dat__, #28
2b080     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2b084     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
2b088     09 01 68 FC | 	wrlong	#0, arg01
2b08c     00 2A 0E F2 | 	cmp	local03, #0 wz
2b090     2C 00 90 AD |  if_e	jmp	#LR__3876
2b094     04 26 66 F0 | 	shl	local01, #4
2b098     08 26 86 F1 | 	sub	local01, #8
2b09c     13 2D 52 F6 | 	abs	local04, local01 wc
2b0a0     02 2C 46 F0 | 	shr	local04, #2
2b0a4     16 2F 8A F6 | 	negc	local05, local04 wz
2b0a8     15 31 02 F6 | 	mov	local06, local03
2b0ac     10 00 90 AD |  if_e	jmp	#LR__3875
2b0b0     97 06 48 FB | 	callpa	#(@LR__3873-@LR__3871)>>2,fcache_load_ptr_
2b0b4                 | LR__3871
2b0b4     17 05 D8 FC | 	rep	@LR__3874, local05
2b0b8                 | LR__3872
2b0b8     18 01 68 FC | 	wrlong	#0, local06
2b0bc     04 30 06 F1 | 	add	local06, #4
2b0c0                 | LR__3873
2b0c0                 | LR__3874
2b0c0                 | LR__3875
2b0c0                 | LR__3876
2b0c0     15 FB 01 F6 | 	mov	result1, local03
2b0c4                 | LR__3877
2b0c4     A7 F0 03 F6 | 	mov	ptra, fp
2b0c8     B2 00 A0 FD | 	call	#popregs_
2b0cc                 | __system___gc_doalloc_ret
2b0cc     2D 00 64 FD | 	ret
2b0d0                 | 
2b0d0                 | __system___gc_isvalidptr
2b0d0     F8 16 06 F4 | 	bitl	arg03, #248
2b0d4     08 16 86 F1 | 	sub	arg03, #8
2b0d8     09 17 52 F2 | 	cmps	arg03, arg01 wc
2b0dc     08 00 90 CD |  if_b	jmp	#LR__3880
2b0e0     0A 17 52 F2 | 	cmps	arg03, arg02 wc
2b0e4     08 00 90 CD |  if_b	jmp	#LR__3881
2b0e8                 | LR__3880
2b0e8     00 FA 05 F6 | 	mov	result1, #0
2b0ec     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
2b0f0                 | LR__3881
2b0f0     0B 01 02 F6 | 	mov	_var01, arg03
2b0f4     09 01 62 F5 | 	xor	_var01, arg01
2b0f8     0F 00 CE F7 | 	test	_var01, #15 wz
2b0fc     00 FA 05 56 |  if_ne	mov	result1, #0
2b100     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
2b104     0B 01 02 F6 | 	mov	_var01, arg03
2b108     02 00 06 F1 | 	add	_var01, #2
2b10c     00 01 E2 FA | 	rdword	_var01, _var01
2b110     7F 00 00 FF 
2b114     C0 01 06 F5 | 	and	_var01, ##65472
2b118     36 00 00 FF 
2b11c     80 00 0E F2 | 	cmp	_var01, ##27776 wz
2b120     00 FA 05 56 |  if_ne	mov	result1, #0
2b124     0B FB 01 A6 |  if_e	mov	result1, arg03
2b128                 | __system___gc_isvalidptr_ret
2b128     2D 00 64 FD | 	ret
2b12c                 | 
2b12c                 | __system___gc_free
2b12c     09 17 02 F6 | 	mov	arg03, arg01
2b130     6C FC BF FD | 	call	#__system___gc_ptrs
2b134     FD 12 02 F6 | 	mov	arg01, result1
2b138     FE 14 02 F6 | 	mov	arg02, result2
2b13c     90 FF BF FD | 	call	#__system___gc_isvalidptr
2b140     FD 14 0A F6 | 	mov	arg02, result1 wz
2b144     28 00 90 AD |  if_e	jmp	#LR__3890
2b148     1C E6 05 F1 | 	add	ptr___system__dat__, #28
2b14c     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2b150     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
2b154     F8 BC BF FD | 	call	#__system___lockmem
2b158     0A 13 02 F6 | 	mov	arg01, arg02
2b15c     14 00 B0 FD | 	call	#__system___gc_dofree
2b160     1C E6 05 F1 | 	add	ptr___system__dat__, #28
2b164     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2b168     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
2b16c     09 01 68 FC | 	wrlong	#0, arg01
2b170                 | LR__3890
2b170                 | __system___gc_free_ret
2b170     2D 00 64 FD | 	ret
2b174                 | 
2b174                 | __system___gc_dofree
2b174     06 4A 05 F6 | 	mov	COUNT_, #6
2b178     A8 00 A0 FD | 	call	#pushregs_
2b17c     09 27 02 F6 | 	mov	local01, arg01
2b180     1C FC BF FD | 	call	#__system___gc_ptrs
2b184     FD 28 02 F6 | 	mov	local02, result1
2b188     FE 2A 02 F6 | 	mov	local03, result2
2b18c     13 15 02 F6 | 	mov	arg02, local01
2b190     02 14 06 F1 | 	add	arg02, #2
2b194     36 00 80 FF 
2b198     0A 1F 59 FC | 	wrword	##27791, arg02
2b19c     13 2D 02 F6 | 	mov	local04, local01
2b1a0     13 13 02 F6 | 	mov	arg01, local01
2b1a4     09 2F EA FA | 	rdword	local05, arg01 wz
2b1a8     00 FA 05 A6 |  if_e	mov	result1, #0
2b1ac     04 2E 66 50 |  if_ne	shl	local05, #4
2b1b0     17 13 02 51 |  if_ne	add	arg01, local05
2b1b4     09 FB 01 56 |  if_ne	mov	result1, arg01
2b1b8     FD 30 02 F6 | 	mov	local06, result1
2b1bc     97 24 48 FB | 	callpa	#(@LR__3901-@LR__3900)>>2,fcache_load_ptr_
2b1c0                 | LR__3900
2b1c0     04 2C 06 F1 | 	add	local04, #4
2b1c4     16 15 EA FA | 	rdword	arg02, local04 wz
2b1c8     14 13 02 F6 | 	mov	arg01, local02
2b1cc     00 FA 05 A6 |  if_e	mov	result1, #0
2b1d0     04 14 66 50 |  if_ne	shl	arg02, #4
2b1d4     0A 13 02 51 |  if_ne	add	arg01, arg02
2b1d8     09 FB 01 56 |  if_ne	mov	result1, arg01
2b1dc     FD 2C 0A F6 | 	mov	local04, result1 wz
2b1e0     24 00 90 AD |  if_e	jmp	#LR__3902
2b1e4     16 13 02 F6 | 	mov	arg01, local04
2b1e8     00 FA 05 F6 | 	mov	result1, #0
2b1ec     02 12 06 F1 | 	add	arg01, #2
2b1f0     09 13 E2 FA | 	rdword	arg01, arg01
2b1f4     36 00 00 FF 
2b1f8     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
2b1fc     01 FA 65 A6 |  if_e	neg	result1, #1
2b200     00 FA 0D F2 | 	cmp	result1, #0 wz
2b204     B8 FF 9F AD |  if_e	jmp	#LR__3900
2b208                 | LR__3901
2b208                 | LR__3902
2b208     00 2C 0E F2 | 	cmp	local04, #0 wz
2b20c     14 2D 02 A6 |  if_e	mov	local04, local02
2b210     16 15 02 F6 | 	mov	arg02, local04
2b214     06 14 06 F1 | 	add	arg02, #6
2b218     13 13 02 F6 | 	mov	arg01, local01
2b21c     0A 15 E2 FA | 	rdword	arg02, arg02
2b220     06 12 06 F1 | 	add	arg01, #6
2b224     09 15 52 FC | 	wrword	arg02, arg01
2b228     13 15 0A F6 | 	mov	arg02, local01 wz
2b22c     00 FA 05 A6 |  if_e	mov	result1, #0
2b230     14 15 82 51 |  if_ne	sub	arg02, local02
2b234     04 14 46 50 |  if_ne	shr	arg02, #4
2b238     0A FB 01 56 |  if_ne	mov	result1, arg02
2b23c     16 15 02 F6 | 	mov	arg02, local04
2b240     06 14 06 F1 | 	add	arg02, #6
2b244     0A FB 51 FC | 	wrword	result1, arg02
2b248     14 2D 0A F2 | 	cmp	local04, local02 wz
2b24c     A4 00 90 AD |  if_e	jmp	#LR__3905
2b250     16 13 02 F6 | 	mov	arg01, local04
2b254     09 2F EA FA | 	rdword	local05, arg01 wz
2b258     00 FA 05 A6 |  if_e	mov	result1, #0
2b25c     04 2E 66 50 |  if_ne	shl	local05, #4
2b260     17 13 02 51 |  if_ne	add	arg01, local05
2b264     09 FB 01 56 |  if_ne	mov	result1, arg01
2b268     13 FB 09 F2 | 	cmp	result1, local01 wz
2b26c     84 00 90 5D |  if_ne	jmp	#LR__3904
2b270     16 31 E2 FA | 	rdword	local06, local04
2b274     13 15 E2 FA | 	rdword	arg02, local01
2b278     0A 31 02 F1 | 	add	local06, arg02
2b27c     16 31 52 FC | 	wrword	local06, local04
2b280     13 31 02 F6 | 	mov	local06, local01
2b284     02 30 06 F1 | 	add	local06, #2
2b288     18 01 58 FC | 	wrword	#0, local06
2b28c     13 13 02 F6 | 	mov	arg01, local01
2b290     09 2F EA FA | 	rdword	local05, arg01 wz
2b294     00 FA 05 A6 |  if_e	mov	result1, #0
2b298     04 2E 66 50 |  if_ne	shl	local05, #4
2b29c     17 13 02 51 |  if_ne	add	arg01, local05
2b2a0     09 FB 01 56 |  if_ne	mov	result1, arg01
2b2a4     FD 30 02 F6 | 	mov	local06, result1
2b2a8     15 31 52 F2 | 	cmps	local06, local03 wc
2b2ac     20 00 90 3D |  if_ae	jmp	#LR__3903
2b2b0     16 15 0A F6 | 	mov	arg02, local04 wz
2b2b4     00 FA 05 A6 |  if_e	mov	result1, #0
2b2b8     14 15 82 51 |  if_ne	sub	arg02, local02
2b2bc     04 14 46 50 |  if_ne	shr	arg02, #4
2b2c0     0A FB 01 56 |  if_ne	mov	result1, arg02
2b2c4     18 15 02 F6 | 	mov	arg02, local06
2b2c8     04 14 06 F1 | 	add	arg02, #4
2b2cc     0A FB 51 FC | 	wrword	result1, arg02
2b2d0                 | LR__3903
2b2d0     13 15 02 F6 | 	mov	arg02, local01
2b2d4     06 14 06 F1 | 	add	arg02, #6
2b2d8     16 FD 01 F6 | 	mov	result2, local04
2b2dc     0A 15 E2 FA | 	rdword	arg02, arg02
2b2e0     06 FC 05 F1 | 	add	result2, #6
2b2e4     FE 14 52 FC | 	wrword	arg02, result2
2b2e8     06 26 06 F1 | 	add	local01, #6
2b2ec     13 01 58 FC | 	wrword	#0, local01
2b2f0     16 27 02 F6 | 	mov	local01, local04
2b2f4                 | LR__3904
2b2f4                 | LR__3905
2b2f4     13 13 02 F6 | 	mov	arg01, local01
2b2f8     09 2F EA FA | 	rdword	local05, arg01 wz
2b2fc     00 FA 05 A6 |  if_e	mov	result1, #0
2b300     04 2E 66 50 |  if_ne	shl	local05, #4
2b304     17 13 02 51 |  if_ne	add	arg01, local05
2b308     09 FB 01 56 |  if_ne	mov	result1, arg01
2b30c     FD 14 0A F6 | 	mov	arg02, result1 wz
2b310     B8 00 90 AD |  if_e	jmp	#LR__3907
2b314     15 15 52 F2 | 	cmps	arg02, local03 wc
2b318     B0 00 90 3D |  if_ae	jmp	#LR__3907
2b31c     0A 13 02 F6 | 	mov	arg01, arg02
2b320     00 FA 05 F6 | 	mov	result1, #0
2b324     02 12 06 F1 | 	add	arg01, #2
2b328     09 13 E2 FA | 	rdword	arg01, arg01
2b32c     36 00 00 FF 
2b330     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
2b334     01 FA 65 A6 |  if_e	neg	result1, #1
2b338     00 FA 0D F2 | 	cmp	result1, #0 wz
2b33c     8C 00 90 AD |  if_e	jmp	#LR__3907
2b340     13 2D 02 F6 | 	mov	local04, local01
2b344     16 31 E2 FA | 	rdword	local06, local04
2b348     0A 13 02 F6 | 	mov	arg01, arg02
2b34c     09 27 E2 FA | 	rdword	local01, arg01
2b350     13 31 02 F1 | 	add	local06, local01
2b354     16 31 52 FC | 	wrword	local06, local04
2b358     09 31 02 F6 | 	mov	local06, arg01
2b35c     06 30 06 F1 | 	add	local06, #6
2b360     16 27 02 F6 | 	mov	local01, local04
2b364     18 31 E2 FA | 	rdword	local06, local06
2b368     06 26 06 F1 | 	add	local01, #6
2b36c     13 31 52 FC | 	wrword	local06, local01
2b370     09 31 02 F6 | 	mov	local06, arg01
2b374     02 30 06 F1 | 	add	local06, #2
2b378     18 55 59 FC | 	wrword	#170, local06
2b37c     09 31 02 F6 | 	mov	local06, arg01
2b380     06 30 06 F1 | 	add	local06, #6
2b384     18 01 58 FC | 	wrword	#0, local06
2b388     09 2F EA FA | 	rdword	local05, arg01 wz
2b38c     00 FA 05 A6 |  if_e	mov	result1, #0
2b390     04 2E 66 50 |  if_ne	shl	local05, #4
2b394     17 13 02 51 |  if_ne	add	arg01, local05
2b398     09 FB 01 56 |  if_ne	mov	result1, arg01
2b39c     FD 30 0A F6 | 	mov	local06, result1 wz
2b3a0     28 00 90 AD |  if_e	jmp	#LR__3906
2b3a4     15 31 52 F2 | 	cmps	local06, local03 wc
2b3a8     20 00 90 3D |  if_ae	jmp	#LR__3906
2b3ac     16 15 0A F6 | 	mov	arg02, local04 wz
2b3b0     00 FA 05 A6 |  if_e	mov	result1, #0
2b3b4     14 15 82 51 |  if_ne	sub	arg02, local02
2b3b8     04 14 46 50 |  if_ne	shr	arg02, #4
2b3bc     0A FB 01 56 |  if_ne	mov	result1, arg02
2b3c0     18 2D 02 F6 | 	mov	local04, local06
2b3c4     04 2C 06 F1 | 	add	local04, #4
2b3c8     16 FB 51 FC | 	wrword	result1, local04
2b3cc                 | LR__3906
2b3cc                 | LR__3907
2b3cc     18 FB 01 F6 | 	mov	result1, local06
2b3d0     A7 F0 03 F6 | 	mov	ptra, fp
2b3d4     B2 00 A0 FD | 	call	#popregs_
2b3d8                 | __system___gc_dofree_ret
2b3d8     2D 00 64 FD | 	ret
2b3dc                 | 
2b3dc                 | __system___gc_docollect
2b3dc     05 4A 05 F6 | 	mov	COUNT_, #5
2b3e0     A8 00 A0 FD | 	call	#pushregs_
2b3e4     B8 F9 BF FD | 	call	#__system___gc_ptrs
2b3e8     FE 26 02 F6 | 	mov	local01, result2
2b3ec     FD 28 02 F6 | 	mov	local02, result1
2b3f0     14 13 02 F6 | 	mov	arg01, local02
2b3f4     09 2B EA FA | 	rdword	local03, arg01 wz
2b3f8     00 FA 05 A6 |  if_e	mov	result1, #0
2b3fc     04 2A 66 50 |  if_ne	shl	local03, #4
2b400     15 13 02 51 |  if_ne	add	arg01, local03
2b404     09 FB 01 56 |  if_ne	mov	result1, arg01
2b408     FD 2C 0A F6 | 	mov	local04, result1 wz
2b40c     00 FA 05 F6 | 	mov	result1, #0
2b410     01 FA 61 FD | 	cogid	result1
2b414     FD 2E 02 F6 | 	mov	local05, result1
2b418     48 00 90 AD |  if_e	jmp	#LR__3912
2b41c     97 22 48 FB | 	callpa	#(@LR__3911-@LR__3910)>>2,fcache_load_ptr_
2b420                 | LR__3910
2b420     13 2D 52 F2 | 	cmps	local04, local01 wc
2b424     3C 00 90 3D |  if_ae	jmp	#LR__3912
2b428     16 15 02 F6 | 	mov	arg02, local04
2b42c     02 14 06 F1 | 	add	arg02, #2
2b430     0A 15 E2 FA | 	rdword	arg02, arg02
2b434     20 14 26 F5 | 	andn	arg02, #32
2b438     16 13 02 F6 | 	mov	arg01, local04
2b43c     02 12 06 F1 | 	add	arg01, #2
2b440     09 15 52 FC | 	wrword	arg02, arg01
2b444     16 13 02 F6 | 	mov	arg01, local04
2b448     09 2B EA FA | 	rdword	local03, arg01 wz
2b44c     00 FA 05 A6 |  if_e	mov	result1, #0
2b450     04 2A 66 50 |  if_ne	shl	local03, #4
2b454     15 13 02 51 |  if_ne	add	arg01, local03
2b458     09 FB 01 56 |  if_ne	mov	result1, arg01
2b45c     FD 2C 0A F6 | 	mov	local04, result1 wz
2b460     BC FF 9F 5D |  if_ne	jmp	#LR__3910
2b464                 | LR__3911
2b464                 | LR__3912
2b464     00 2A 06 F6 | 	mov	local03, #0
2b468     00 12 06 F6 | 	mov	arg01, #0
2b46c     B8 B9 BF FD | 	call	#__system____topofstack
2b470     FD 14 02 F6 | 	mov	arg02, result1
2b474     15 13 02 F6 | 	mov	arg01, local03
2b478     90 00 B0 FD | 	call	#__system___gc_markhub
2b47c     1C 01 B0 FD | 	call	#__system___gc_markcog
2b480     14 13 02 F6 | 	mov	arg01, local02
2b484     09 2B EA FA | 	rdword	local03, arg01 wz
2b488     00 FA 05 A6 |  if_e	mov	result1, #0
2b48c     04 2A 66 50 |  if_ne	shl	local03, #4
2b490     15 13 02 51 |  if_ne	add	arg01, local03
2b494     09 FB 01 56 |  if_ne	mov	result1, arg01
2b498     FD 28 0A F6 | 	mov	local02, result1 wz
2b49c     60 00 90 AD |  if_e	jmp	#LR__3916
2b4a0                 | LR__3913
2b4a0     14 2D 02 F6 | 	mov	local04, local02
2b4a4     16 13 02 F6 | 	mov	arg01, local04
2b4a8     09 2B EA FA | 	rdword	local03, arg01 wz
2b4ac     00 FA 05 A6 |  if_e	mov	result1, #0
2b4b0     04 2A 66 50 |  if_ne	shl	local03, #4
2b4b4     15 13 02 51 |  if_ne	add	arg01, local03
2b4b8     09 FB 01 56 |  if_ne	mov	result1, arg01
2b4bc     FD 28 02 F6 | 	mov	local02, result1
2b4c0     16 15 02 F6 | 	mov	arg02, local04
2b4c4     02 14 06 F1 | 	add	arg02, #2
2b4c8     0A 15 E2 FA | 	rdword	arg02, arg02
2b4cc     20 14 CE F7 | 	test	arg02, #32 wz
2b4d0     10 14 CE A7 |  if_e	test	arg02, #16 wz
2b4d4     1C 00 90 5D |  if_ne	jmp	#LR__3915
2b4d8     0A 15 42 F8 | 	getnib	arg02, arg02, #0
2b4dc     17 15 0A F2 | 	cmp	arg02, local05 wz
2b4e0     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
2b4e4     0C 00 90 5D |  if_ne	jmp	#LR__3914
2b4e8     16 13 02 F6 | 	mov	arg01, local04
2b4ec     84 FC BF FD | 	call	#__system___gc_dofree
2b4f0     FD 28 02 F6 | 	mov	local02, result1
2b4f4                 | LR__3914
2b4f4                 | LR__3915
2b4f4     00 28 0E F2 | 	cmp	local02, #0 wz
2b4f8     13 29 52 52 |  if_ne	cmps	local02, local01 wc
2b4fc     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__3913
2b500                 | LR__3916
2b500     A7 F0 03 F6 | 	mov	ptra, fp
2b504     B2 00 A0 FD | 	call	#popregs_
2b508                 | __system___gc_docollect_ret
2b508     2D 00 64 FD | 	ret
2b50c                 | 
2b50c                 | __system___gc_markhub
2b50c     04 4A 05 F6 | 	mov	COUNT_, #4
2b510     A8 00 A0 FD | 	call	#pushregs_
2b514     09 27 02 F6 | 	mov	local01, arg01
2b518     0A 29 02 F6 | 	mov	local02, arg02
2b51c     80 F8 BF FD | 	call	#__system___gc_ptrs
2b520     FD 2A 02 F6 | 	mov	local03, result1
2b524     FE 2C 02 F6 | 	mov	local04, result2
2b528                 | LR__3920
2b528     14 27 52 F2 | 	cmps	local01, local02 wc
2b52c     60 00 90 3D |  if_ae	jmp	#LR__3921
2b530     13 17 02 FB | 	rdlong	arg03, local01
2b534     04 26 06 F1 | 	add	local01, #4
2b538     16 15 02 F6 | 	mov	arg02, local04
2b53c     15 13 02 F6 | 	mov	arg01, local03
2b540     8C FB BF FD | 	call	#__system___gc_isvalidptr
2b544     FD 16 0A F6 | 	mov	arg03, result1 wz
2b548     DC FF 9F AD |  if_e	jmp	#LR__3920
2b54c     0B 13 02 F6 | 	mov	arg01, arg03
2b550     00 FA 05 F6 | 	mov	result1, #0
2b554     02 12 06 F1 | 	add	arg01, #2
2b558     09 13 E2 FA | 	rdword	arg01, arg01
2b55c     36 00 00 FF 
2b560     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
2b564     01 FA 65 A6 |  if_e	neg	result1, #1
2b568     00 FA 0D F2 | 	cmp	result1, #0 wz
2b56c     B8 FF 9F 5D |  if_ne	jmp	#LR__3920
2b570     0B FD 01 F6 | 	mov	result2, arg03
2b574     02 FC 05 F1 | 	add	result2, #2
2b578     FE FC E1 FA | 	rdword	result2, result2
2b57c     0F FC 25 F5 | 	andn	result2, #15
2b580     2E FC 45 F5 | 	or	result2, #46
2b584     02 16 06 F1 | 	add	arg03, #2
2b588     0B FD 51 FC | 	wrword	result2, arg03
2b58c     98 FF 9F FD | 	jmp	#LR__3920
2b590                 | LR__3921
2b590     A7 F0 03 F6 | 	mov	ptra, fp
2b594     B2 00 A0 FD | 	call	#popregs_
2b598                 | __system___gc_markhub_ret
2b598     2D 00 64 FD | 	ret
2b59c                 | 
2b59c                 | __system___gc_markcog
2b59c     04 4A 05 F6 | 	mov	COUNT_, #4
2b5a0     A8 00 A0 FD | 	call	#pushregs_
2b5a4     F8 F7 BF FD | 	call	#__system___gc_ptrs
2b5a8     FD 26 02 F6 | 	mov	local01, result1
2b5ac     FE 28 02 F6 | 	mov	local02, result2
2b5b0     EF 2B 06 F6 | 	mov	local03, #495
2b5b4                 | LR__3930
2b5b4                 | 	'.live	local03
2b5b4     00 2A 96 F9 | 	alts	local03, #0
2b5b8     15 2D 02 F6 | 	mov	local04, local03
2b5bc     13 13 02 F6 | 	mov	arg01, local01
2b5c0     14 15 02 F6 | 	mov	arg02, local02
2b5c4     16 17 02 F6 | 	mov	arg03, local04
2b5c8     04 FB BF FD | 	call	#__system___gc_isvalidptr
2b5cc     00 FA 0D F2 | 	cmp	result1, #0 wz
2b5d0     18 00 90 AD |  if_e	jmp	#LR__3931
2b5d4     FD 2C 02 F6 | 	mov	local04, result1
2b5d8     02 2C 06 F1 | 	add	local04, #2
2b5dc     16 2D E2 FA | 	rdword	local04, local04
2b5e0     20 2C 46 F5 | 	or	local04, #32
2b5e4     02 FA 05 F1 | 	add	result1, #2
2b5e8     FD 2C 52 FC | 	wrword	local04, result1
2b5ec                 | LR__3931
2b5ec     01 2A 86 F1 | 	sub	local03, #1
2b5f0     00 2A 56 F2 | 	cmps	local03, #0 wc
2b5f4     BC FF 9F 3D |  if_ae	jmp	#LR__3930
2b5f8     A7 F0 03 F6 | 	mov	ptra, fp
2b5fc     B2 00 A0 FD | 	call	#popregs_
2b600                 | __system___gc_markcog_ret
2b600     2D 00 64 FD | 	ret
2b604                 | 
2b604                 | __system__opendir
2b604     06 4A 05 F6 | 	mov	COUNT_, #6
2b608     A8 00 A0 FD | 	call	#pushregs_
2b60c     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2b610     F3 26 02 F6 | 	mov	local01, ptr___system__dat__
2b614     09 15 02 F6 | 	mov	arg02, arg01
2b618     13 13 02 F6 | 	mov	arg01, local01
2b61c     00 16 06 F6 | 	mov	arg03, #0
2b620     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2b624     C0 BF BF FD | 	call	#__system____getvfsforfile
2b628     FD 28 0A F6 | 	mov	local02, result1 wz
2b62c     10 00 90 AD |  if_e	jmp	#LR__3940
2b630     28 28 06 F1 | 	add	local02, #40
2b634     14 17 0A FB | 	rdlong	arg03, local02 wz
2b638     28 28 86 F1 | 	sub	local02, #40
2b63c     14 00 90 5D |  if_ne	jmp	#LR__3941
2b640                 | LR__3940
2b640     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2b644     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
2b648     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2b64c     00 FA 05 F6 | 	mov	result1, #0
2b650     90 00 90 FD | 	jmp	#LR__3943
2b654                 | LR__3941
2b654     5C 12 06 F6 | 	mov	arg01, #92
2b658     10 14 06 F6 | 	mov	arg02, #16
2b65c     C0 F9 BF FD | 	call	#__system___gc_doalloc
2b660     FD 2A 0A F6 | 	mov	local03, result1 wz
2b664     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2b668     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2b66c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2b670     00 FA 05 A6 |  if_e	mov	result1, #0
2b674     6C 00 90 AD |  if_e	jmp	#LR__3943
2b678     28 28 06 F1 | 	add	local02, #40
2b67c     14 2D 02 FB | 	rdlong	local04, local02
2b680     16 2F 02 F6 | 	mov	local05, local04
2b684     28 28 86 F1 | 	sub	local02, #40
2b688     13 2E 46 F7 | 	zerox	local05, #19
2b68c     14 2C 46 F0 | 	shr	local04, #20
2b690     02 2C 66 F0 | 	shl	local04, #2
2b694     ED 2C 02 F1 | 	add	local04, __methods__
2b698     16 2D 02 FB | 	rdlong	local04, local04
2b69c     15 13 02 F6 | 	mov	arg01, local03
2b6a0     13 15 02 F6 | 	mov	arg02, local01
2b6a4     F2 30 02 F6 | 	mov	local06, objptr
2b6a8     17 E5 01 F6 | 	mov	objptr, local05
2b6ac     2D 2C 62 FD | 	call	local04
2b6b0     18 E5 01 F6 | 	mov	objptr, local06
2b6b4     FD 16 0A F6 | 	mov	arg03, result1 wz
2b6b8     20 00 90 AD |  if_e	jmp	#LR__3942
2b6bc     00 16 4E F2 | 	cmps	arg03, #0 wz
2b6c0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2b6c4     F3 16 62 FC | 	wrlong	arg03, ptr___system__dat__
2b6c8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2b6cc     15 13 02 F6 | 	mov	arg01, local03
2b6d0     58 FA BF FD | 	call	#__system___gc_free
2b6d4     00 FA 05 F6 | 	mov	result1, #0
2b6d8     08 00 90 FD | 	jmp	#LR__3943
2b6dc                 | LR__3942
2b6dc     15 29 62 FC | 	wrlong	local02, local03
2b6e0     15 FB 01 F6 | 	mov	result1, local03
2b6e4                 | LR__3943
2b6e4     A7 F0 03 F6 | 	mov	ptra, fp
2b6e8     B2 00 A0 FD | 	call	#popregs_
2b6ec                 | __system__opendir_ret
2b6ec     2D 00 64 FD | 	ret
2b6f0                 | 
2b6f0                 | __system__closedir
2b6f0     04 4A 05 F6 | 	mov	COUNT_, #4
2b6f4     A8 00 A0 FD | 	call	#pushregs_
2b6f8     09 27 02 F6 | 	mov	local01, arg01
2b6fc     13 13 02 FB | 	rdlong	arg01, local01
2b700     2C 12 06 F1 | 	add	arg01, #44
2b704     09 29 02 FB | 	rdlong	local02, arg01
2b708     14 2B 02 F6 | 	mov	local03, local02
2b70c     13 2A 46 F7 | 	zerox	local03, #19
2b710     14 28 46 F0 | 	shr	local02, #20
2b714     02 28 66 F0 | 	shl	local02, #2
2b718     ED 28 02 F1 | 	add	local02, __methods__
2b71c     14 29 02 FB | 	rdlong	local02, local02
2b720     13 13 02 F6 | 	mov	arg01, local01
2b724     F2 2C 02 F6 | 	mov	local04, objptr
2b728     15 E5 01 F6 | 	mov	objptr, local03
2b72c     2D 28 62 FD | 	call	local02
2b730     16 E5 01 F6 | 	mov	objptr, local04
2b734     FD 2C 02 F6 | 	mov	local04, result1
2b738     13 13 02 F6 | 	mov	arg01, local01
2b73c     EC F9 BF FD | 	call	#__system___gc_free
2b740     00 2C 4E F2 | 	cmps	local04, #0 wz
2b744     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2b748     F3 2C 62 FC | 	wrlong	local04, ptr___system__dat__
2b74c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2b750     01 FA 65 56 |  if_ne	neg	result1, #1
2b754     00 FA 05 A6 |  if_e	mov	result1, #0
2b758     A7 F0 03 F6 | 	mov	ptra, fp
2b75c     B2 00 A0 FD | 	call	#popregs_
2b760                 | __system__closedir_ret
2b760     2D 00 64 FD | 	ret
2b764                 | 
2b764                 | __system__readdir
2b764     04 4A 05 F6 | 	mov	COUNT_, #4
2b768     A8 00 A0 FD | 	call	#pushregs_
2b76c     09 15 0A FB | 	rdlong	arg02, arg01 wz
2b770     08 12 06 F1 | 	add	arg01, #8
2b774     09 27 02 F6 | 	mov	local01, arg01
2b778     08 12 86 F1 | 	sub	arg01, #8
2b77c     00 FA 05 A6 |  if_e	mov	result1, #0
2b780     5C 00 90 AD |  if_e	jmp	#LR__3951
2b784     30 14 06 F1 | 	add	arg02, #48
2b788     0A 29 02 FB | 	rdlong	local02, arg02
2b78c     14 2B 02 F6 | 	mov	local03, local02
2b790     13 2A 46 F7 | 	zerox	local03, #19
2b794     14 28 46 F0 | 	shr	local02, #20
2b798     02 28 66 F0 | 	shl	local02, #2
2b79c     ED 28 02 F1 | 	add	local02, __methods__
2b7a0     14 29 02 FB | 	rdlong	local02, local02
2b7a4     13 15 02 F6 | 	mov	arg02, local01
2b7a8     F2 2C 02 F6 | 	mov	local04, objptr
2b7ac     15 E5 01 F6 | 	mov	objptr, local03
2b7b0     2D 28 62 FD | 	call	local02
2b7b4     16 E5 01 F6 | 	mov	objptr, local04
2b7b8     00 FA 4D F2 | 	cmps	result1, #0 wz
2b7bc     1C 00 90 AD |  if_e	jmp	#LR__3950
2b7c0     01 FA 55 F2 | 	cmps	result1, #1 wc
2b7c4     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
2b7c8     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2b7cc     F3 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
2b7d0     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2b7d4     00 FA 05 F6 | 	mov	result1, #0
2b7d8     04 00 90 FD | 	jmp	#LR__3951
2b7dc                 | LR__3950
2b7dc     13 FB 01 F6 | 	mov	result1, local01
2b7e0                 | LR__3951
2b7e0     A7 F0 03 F6 | 	mov	ptra, fp
2b7e4     B2 00 A0 FD | 	call	#popregs_
2b7e8                 | __system__readdir_ret
2b7e8     2D 00 64 FD | 	ret
2b7ec                 | 
2b7ec                 | __system___openraw
2b7ec     15 4A 05 F6 | 	mov	COUNT_, #21
2b7f0     A8 00 A0 FD | 	call	#pushregs_
2b7f4     09 27 02 F6 | 	mov	local01, arg01
2b7f8     0A 29 02 F6 | 	mov	local02, arg02
2b7fc     0B 2B 02 F6 | 	mov	local03, arg03
2b800     0C 2D 02 F6 | 	mov	local04, arg04
2b804     04 2E 06 F6 | 	mov	local05, #4
2b808     13 31 02 F6 | 	mov	local06, local01
2b80c     00 32 06 F6 | 	mov	local07, #0
2b810     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2b814     F3 34 02 F6 | 	mov	local08, ptr___system__dat__
2b818     1A 13 02 F6 | 	mov	arg01, local08
2b81c     14 15 02 F6 | 	mov	arg02, local02
2b820     00 16 06 F6 | 	mov	arg03, #0
2b824     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2b828     BC BD BF FD | 	call	#__system____getvfsforfile
2b82c     FD 36 0A F6 | 	mov	local09, result1 wz
2b830     10 00 90 AD |  if_e	jmp	#LR__3960
2b834     20 36 06 F1 | 	add	local09, #32
2b838     1B FB 09 FB | 	rdlong	result1, local09 wz
2b83c     20 36 86 F1 | 	sub	local09, #32
2b840     14 00 90 5D |  if_ne	jmp	#LR__3961
2b844                 | LR__3960
2b844     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2b848     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
2b84c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2b850     01 FA 65 F6 | 	neg	result1, #1
2b854     8C 02 90 FD | 	jmp	#LR__3974
2b858                 | LR__3961
2b858     18 13 02 F6 | 	mov	arg01, local06
2b85c     00 14 06 F6 | 	mov	arg02, #0
2b860     34 16 06 F6 | 	mov	arg03, #52
2b864     09 39 02 F6 | 	mov	local10, arg01
2b868     98 00 A0 FD | 	call	#\builtin_bytefill_
2b86c     20 36 06 F1 | 	add	local09, #32
2b870     1B 3B 02 FB | 	rdlong	local11, local09
2b874     1D 3D 02 F6 | 	mov	local12, local11
2b878     1D 3F 02 F6 | 	mov	local13, local11
2b87c     20 36 86 F1 | 	sub	local09, #32
2b880     1F 41 02 F6 | 	mov	local14, local13
2b884     13 3C 46 F7 | 	zerox	local12, #19
2b888     14 40 46 F0 | 	shr	local14, #20
2b88c     02 40 66 F0 | 	shl	local14, #2
2b890     ED 40 02 F1 | 	add	local14, __methods__
2b894     20 41 02 FB | 	rdlong	local14, local14
2b898     18 43 02 F6 | 	mov	local15, local06
2b89c     1A 45 02 F6 | 	mov	local16, local08
2b8a0     15 47 02 F6 | 	mov	local17, local03
2b8a4     21 13 02 F6 | 	mov	arg01, local15
2b8a8     22 15 02 F6 | 	mov	arg02, local16
2b8ac     23 17 02 F6 | 	mov	arg03, local17
2b8b0     F2 48 02 F6 | 	mov	local18, objptr
2b8b4     1E E5 01 F6 | 	mov	objptr, local12
2b8b8     2D 40 62 FD | 	call	local14
2b8bc     24 E5 01 F6 | 	mov	objptr, local18
2b8c0     FD 4A 0A F6 | 	mov	local19, result1 wz
2b8c4     04 2A CE 57 |  if_ne	test	local03, #4 wz
2b8c8     58 00 90 AD |  if_e	jmp	#LR__3962
2b8cc     24 36 06 F1 | 	add	local09, #36
2b8d0     1B 3B 02 FB | 	rdlong	local11, local09
2b8d4     1D 3D 02 F6 | 	mov	local12, local11
2b8d8     1D 3F 02 F6 | 	mov	local13, local11
2b8dc     24 36 86 F1 | 	sub	local09, #36
2b8e0     1F 41 02 F6 | 	mov	local14, local13
2b8e4     13 3C 46 F7 | 	zerox	local12, #19
2b8e8     14 40 46 F0 | 	shr	local14, #20
2b8ec     02 40 66 F0 | 	shl	local14, #2
2b8f0     ED 40 02 F1 | 	add	local14, __methods__
2b8f4     20 41 02 FB | 	rdlong	local14, local14
2b8f8     18 43 02 F6 | 	mov	local15, local06
2b8fc     1A 45 02 F6 | 	mov	local16, local08
2b900     16 47 02 F6 | 	mov	local17, local04
2b904     21 13 02 F6 | 	mov	arg01, local15
2b908     22 15 02 F6 | 	mov	arg02, local16
2b90c     23 17 02 F6 | 	mov	arg03, local17
2b910     F2 48 02 F6 | 	mov	local18, objptr
2b914     1E E5 01 F6 | 	mov	objptr, local12
2b918     2D 40 62 FD | 	call	local14
2b91c     24 E5 01 F6 | 	mov	objptr, local18
2b920     FD 4A 02 F6 | 	mov	local19, result1
2b924                 | LR__3962
2b924     00 4A 0E F2 | 	cmp	local19, #0 wz
2b928     8C 01 90 5D |  if_ne	jmp	#LR__3972
2b92c     15 4D 02 F6 | 	mov	local20, local03
2b930     03 4C 0E F5 | 	and	local20, #3 wz
2b934     02 2E 46 55 |  if_ne	or	local05, #2
2b938     01 4C 0E F2 | 	cmp	local20, #1 wz
2b93c     01 2E 46 55 |  if_ne	or	local05, #1
2b940     20 2A CE F7 | 	test	local03, #32 wz
2b944     C0 2E 46 55 |  if_ne	or	local05, #192
2b948     08 30 06 F1 | 	add	local06, #8
2b94c     18 2F 62 FC | 	wrlong	local05, local06
2b950     0C 30 06 F1 | 	add	local06, #12
2b954     18 4F 0A FB | 	rdlong	local21, local06 wz
2b958     14 30 86 F1 | 	sub	local06, #20
2b95c     18 00 90 5D |  if_ne	jmp	#LR__3963
2b960     04 36 06 F1 | 	add	local09, #4
2b964     1B 4F 02 FB | 	rdlong	local21, local09
2b968     04 36 86 F1 | 	sub	local09, #4
2b96c     14 30 06 F1 | 	add	local06, #20
2b970     18 4F 62 FC | 	wrlong	local21, local06
2b974     14 30 86 F1 | 	sub	local06, #20
2b978                 | LR__3963
2b978     18 30 06 F1 | 	add	local06, #24
2b97c     18 4F 0A FB | 	rdlong	local21, local06 wz
2b980     18 30 86 F1 | 	sub	local06, #24
2b984     18 00 90 5D |  if_ne	jmp	#LR__3964
2b988     08 36 06 F1 | 	add	local09, #8
2b98c     1B 4F 02 FB | 	rdlong	local21, local09
2b990     08 36 86 F1 | 	sub	local09, #8
2b994     18 30 06 F1 | 	add	local06, #24
2b998     18 4F 62 FC | 	wrlong	local21, local06
2b99c     18 30 86 F1 | 	sub	local06, #24
2b9a0                 | LR__3964
2b9a0     24 30 06 F1 | 	add	local06, #36
2b9a4     18 4F 0A FB | 	rdlong	local21, local06 wz
2b9a8     24 30 86 F1 | 	sub	local06, #36
2b9ac     1B 4F 02 AB |  if_e	rdlong	local21, local09
2b9b0     24 30 06 A1 |  if_e	add	local06, #36
2b9b4     18 4F 62 AC |  if_e	wrlong	local21, local06
2b9b8     24 30 86 A1 |  if_e	sub	local06, #36
2b9bc     28 30 06 F1 | 	add	local06, #40
2b9c0     18 4F 0A FB | 	rdlong	local21, local06 wz
2b9c4     28 30 86 F1 | 	sub	local06, #40
2b9c8     18 00 90 5D |  if_ne	jmp	#LR__3965
2b9cc     10 36 06 F1 | 	add	local09, #16
2b9d0     1B 4F 02 FB | 	rdlong	local21, local09
2b9d4     10 36 86 F1 | 	sub	local09, #16
2b9d8     28 30 06 F1 | 	add	local06, #40
2b9dc     18 4F 62 FC | 	wrlong	local21, local06
2b9e0     28 30 86 F1 | 	sub	local06, #40
2b9e4                 | LR__3965
2b9e4     30 30 06 F1 | 	add	local06, #48
2b9e8     18 4F 0A FB | 	rdlong	local21, local06 wz
2b9ec     30 30 86 F1 | 	sub	local06, #48
2b9f0     18 00 90 5D |  if_ne	jmp	#LR__3966
2b9f4     0C 36 06 F1 | 	add	local09, #12
2b9f8     1B 4F 02 FB | 	rdlong	local21, local09
2b9fc     0C 36 86 F1 | 	sub	local09, #12
2ba00     30 30 06 F1 | 	add	local06, #48
2ba04     18 4F 62 FC | 	wrlong	local21, local06
2ba08     30 30 86 F1 | 	sub	local06, #48
2ba0c                 | LR__3966
2ba0c     1C 30 06 F1 | 	add	local06, #28
2ba10     18 4F 0A FB | 	rdlong	local21, local06 wz
2ba14     1C 30 86 F1 | 	sub	local06, #28
2ba18     1C 00 90 5D |  if_ne	jmp	#LR__3967
2ba1c     01 32 06 F6 | 	mov	local07, #1
2ba20     F2 12 02 F6 | 	mov	arg01, objptr
2ba24     00 80 05 FF 
2ba28     00 12 46 F5 | 	or	arg01, ##184549376
2ba2c     1C 30 06 F1 | 	add	local06, #28
2ba30     18 13 62 FC | 	wrlong	arg01, local06
2ba34     1C 30 86 F1 | 	sub	local06, #28
2ba38                 | LR__3967
2ba38     20 30 06 F1 | 	add	local06, #32
2ba3c     18 4F 0A FB | 	rdlong	local21, local06 wz
2ba40     20 30 86 F1 | 	sub	local06, #32
2ba44     1C 00 90 5D |  if_ne	jmp	#LR__3968
2ba48     01 32 06 F6 | 	mov	local07, #1
2ba4c     F2 12 02 F6 | 	mov	arg01, objptr
2ba50     00 88 05 FF 
2ba54     00 12 46 F5 | 	or	arg01, ##185597952
2ba58     20 30 06 F1 | 	add	local06, #32
2ba5c     18 13 62 FC | 	wrlong	arg01, local06
2ba60     20 30 86 F1 | 	sub	local06, #32
2ba64                 | LR__3968
2ba64     2C 30 06 F1 | 	add	local06, #44
2ba68     18 4F 0A FB | 	rdlong	local21, local06 wz
2ba6c     2C 30 86 F1 | 	sub	local06, #44
2ba70     44 00 90 5D |  if_ne	jmp	#LR__3971
2ba74     14 36 06 F1 | 	add	local09, #20
2ba78     1B 4F 0A FB | 	rdlong	local21, local09 wz
2ba7c     14 36 86 F1 | 	sub	local09, #20
2ba80     18 00 90 AD |  if_e	jmp	#LR__3969
2ba84     14 36 06 F1 | 	add	local09, #20
2ba88     1B 4F 02 FB | 	rdlong	local21, local09
2ba8c     2C 30 06 F1 | 	add	local06, #44
2ba90     18 4F 62 FC | 	wrlong	local21, local06
2ba94     2C 30 86 F1 | 	sub	local06, #44
2ba98     1C 00 90 FD | 	jmp	#LR__3970
2ba9c                 | LR__3969
2ba9c     01 32 06 F6 | 	mov	local07, #1
2baa0     F2 12 02 F6 | 	mov	arg01, objptr
2baa4     00 90 05 FF 
2baa8     00 12 46 F5 | 	or	arg01, ##186646528
2baac     2C 30 06 F1 | 	add	local06, #44
2bab0     18 13 62 FC | 	wrlong	arg01, local06
2bab4     2C 30 86 F1 | 	sub	local06, #44
2bab8                 | LR__3970
2bab8                 | LR__3971
2bab8                 | LR__3972
2bab8     00 32 0E F2 | 	cmp	local07, #0 wz
2babc     18 13 02 56 |  if_ne	mov	arg01, local06
2bac0     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
2bac4     00 4A 0E F2 | 	cmp	local19, #0 wz
2bac8     00 12 06 A6 |  if_e	mov	arg01, #0
2bacc     10 00 90 5D |  if_ne	jmp	#LR__3973
2bad0     00 12 4E F2 | 	cmps	arg01, #0 wz
2bad4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2bad8     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2badc     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2bae0                 | LR__3973
2bae0     25 FB 01 F6 | 	mov	result1, local19
2bae4                 | LR__3974
2bae4     A7 F0 03 F6 | 	mov	ptra, fp
2bae8     B2 00 A0 FD | 	call	#popregs_
2baec                 | __system___openraw_ret
2baec     2D 00 64 FD | 	ret
2baf0                 | 
2baf0                 | __system___closeraw
2baf0     05 4A 05 F6 | 	mov	COUNT_, #5
2baf4     A8 00 A0 FD | 	call	#pushregs_
2baf8     09 27 02 F6 | 	mov	local01, arg01
2bafc     00 28 06 F6 | 	mov	local02, #0
2bb00     08 26 06 F1 | 	add	local01, #8
2bb04     13 FB 09 FB | 	rdlong	result1, local01 wz
2bb08     08 26 86 F1 | 	sub	local01, #8
2bb0c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2bb10     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2bb14     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2bb18     01 FA 65 A6 |  if_e	neg	result1, #1
2bb1c     A8 00 90 AD |  if_e	jmp	#LR__3982
2bb20     2C 26 06 F1 | 	add	local01, #44
2bb24     13 FB 09 FB | 	rdlong	result1, local01 wz
2bb28     2C 26 86 F1 | 	sub	local01, #44
2bb2c     38 00 90 AD |  if_e	jmp	#LR__3980
2bb30     2C 26 06 F1 | 	add	local01, #44
2bb34     13 2B 02 FB | 	rdlong	local03, local01
2bb38     15 2D 02 F6 | 	mov	local04, local03
2bb3c     2C 26 86 F1 | 	sub	local01, #44
2bb40     13 2C 46 F7 | 	zerox	local04, #19
2bb44     14 2A 46 F0 | 	shr	local03, #20
2bb48     02 2A 66 F0 | 	shl	local03, #2
2bb4c     ED 2A 02 F1 | 	add	local03, __methods__
2bb50     15 2B 02 FB | 	rdlong	local03, local03
2bb54     13 13 02 F6 | 	mov	arg01, local01
2bb58     F2 2E 02 F6 | 	mov	local05, objptr
2bb5c     16 E5 01 F6 | 	mov	objptr, local04
2bb60     2D 2A 62 FD | 	call	local03
2bb64     17 E5 01 F6 | 	mov	objptr, local05
2bb68                 | LR__3980
2bb68     24 26 06 F1 | 	add	local01, #36
2bb6c     13 2F 0A FB | 	rdlong	local05, local01 wz
2bb70     24 26 86 F1 | 	sub	local01, #36
2bb74     3C 00 90 AD |  if_e	jmp	#LR__3981
2bb78     24 26 06 F1 | 	add	local01, #36
2bb7c     13 2B 02 FB | 	rdlong	local03, local01
2bb80     15 2D 02 F6 | 	mov	local04, local03
2bb84     24 26 86 F1 | 	sub	local01, #36
2bb88     13 2C 46 F7 | 	zerox	local04, #19
2bb8c     14 2A 46 F0 | 	shr	local03, #20
2bb90     02 2A 66 F0 | 	shl	local03, #2
2bb94     ED 2A 02 F1 | 	add	local03, __methods__
2bb98     15 2B 02 FB | 	rdlong	local03, local03
2bb9c     13 13 02 F6 | 	mov	arg01, local01
2bba0     F2 2E 02 F6 | 	mov	local05, objptr
2bba4     16 E5 01 F6 | 	mov	objptr, local04
2bba8     2D 2A 62 FD | 	call	local03
2bbac     17 E5 01 F6 | 	mov	objptr, local05
2bbb0     FD 28 02 F6 | 	mov	local02, result1
2bbb4                 | LR__3981
2bbb4     13 13 02 F6 | 	mov	arg01, local01
2bbb8     00 14 06 F6 | 	mov	arg02, #0
2bbbc     34 16 06 F6 | 	mov	arg03, #52
2bbc0     98 00 A0 FD | 	call	#\builtin_bytefill_
2bbc4     14 FB 01 F6 | 	mov	result1, local02
2bbc8                 | LR__3982
2bbc8     A7 F0 03 F6 | 	mov	ptra, fp
2bbcc     B2 00 A0 FD | 	call	#popregs_
2bbd0                 | __system___closeraw_ret
2bbd0     2D 00 64 FD | 	ret
2bbd4                 | 
2bbd4                 | __system___vfs_open_sdcardx
2bbd4     0B 4A 05 F6 | 	mov	COUNT_, #11
2bbd8     A8 00 A0 FD | 	call	#pushregs_
2bbdc     09 2B 02 F6 | 	mov	local03, arg01
2bbe0     0A 2D 02 F6 | 	mov	local04, arg02
2bbe4     0B 2F 02 F6 | 	mov	local05, arg03
2bbe8     0C 31 02 F6 | 	mov	local06, arg04
2bbec     01 00 00 FF 
2bbf0     24 12 06 F6 | 	mov	arg01, ##548
2bbf4     F8 F3 BF FD | 	call	#__system___gc_alloc_managed
2bbf8     FD 32 02 F6 | 	mov	local07, result1
2bbfc     01 00 00 FF 
2bc00     34 12 06 F6 | 	mov	arg01, ##564
2bc04     E8 F3 BF FD | 	call	#__system___gc_alloc_managed
2bc08     FD 34 02 F6 | 	mov	local08, result1
2bc0c     15 19 02 F6 | 	mov	arg04, local03
2bc10     1F 18 C6 F0 | 	sar	arg04, #31
2bc14     15 17 02 F6 | 	mov	arg03, local03
2bc18     01 12 06 F6 | 	mov	arg01, #1
2bc1c     00 14 06 F6 | 	mov	arg02, #0
2bc20     EC DB BF FD | 	call	#__system___int64_shl
2bc24     FD 26 02 F6 | 	mov	local01, result1
2bc28     FE 36 02 F6 | 	mov	local09, result2
2bc2c     16 19 02 F6 | 	mov	arg04, local04
2bc30     1F 18 C6 F0 | 	sar	arg04, #31
2bc34     16 17 02 F6 | 	mov	arg03, local04
2bc38     01 12 06 F6 | 	mov	arg01, #1
2bc3c     00 14 06 F6 | 	mov	arg02, #0
2bc40     CC DB BF FD | 	call	#__system___int64_shl
2bc44     FD 26 42 F5 | 	or	local01, result1
2bc48     FE 36 42 F5 | 	or	local09, result2
2bc4c     17 19 02 F6 | 	mov	arg04, local05
2bc50     1F 18 C6 F0 | 	sar	arg04, #31
2bc54     17 17 02 F6 | 	mov	arg03, local05
2bc58     01 12 06 F6 | 	mov	arg01, #1
2bc5c     00 14 06 F6 | 	mov	arg02, #0
2bc60     AC DB BF FD | 	call	#__system___int64_shl
2bc64     FD 26 42 F5 | 	or	local01, result1
2bc68     FE 36 42 F5 | 	or	local09, result2
2bc6c     18 19 02 F6 | 	mov	arg04, local06
2bc70     1F 18 C6 F0 | 	sar	arg04, #31
2bc74     18 17 02 F6 | 	mov	arg03, local06
2bc78     01 12 06 F6 | 	mov	arg01, #1
2bc7c     00 14 06 F6 | 	mov	arg02, #0
2bc80     8C DB BF FD | 	call	#__system___int64_shl
2bc84     1B 15 02 F6 | 	mov	arg02, local09
2bc88     FD 26 42 F5 | 	or	local01, result1
2bc8c     0A FD 41 F5 | 	or	result2, arg02
2bc90     FE 28 02 F6 | 	mov	local02, result2
2bc94     13 13 02 F6 | 	mov	arg01, local01
2bc98     14 15 02 F6 | 	mov	arg02, local02
2bc9c     A8 DB BF FD | 	call	#__system___usepins
2bca0     00 FA 0D F2 | 	cmp	result1, #0 wz
2bca4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2bca8     F3 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
2bcac     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2bcb0     00 FA 05 A6 |  if_e	mov	result1, #0
2bcb4     B4 00 90 AD |  if_e	jmp	#LR__3992
2bcb8     13 39 02 F6 | 	mov	local10, local01
2bcbc     14 37 02 F6 | 	mov	local09, local02
2bcc0     01 00 00 FF 
2bcc4     08 32 06 F1 | 	add	local07, ##520
2bcc8     19 39 62 FC | 	wrlong	local10, local07
2bccc     04 32 06 F1 | 	add	local07, #4
2bcd0     19 37 62 FC | 	wrlong	local09, local07
2bcd4     01 00 00 FF 
2bcd8     0C 32 86 F1 | 	sub	local07, ##524
2bcdc     18 1B 02 F6 | 	mov	arg05, local06
2bce0     00 12 06 F6 | 	mov	arg01, #0
2bce4     15 15 02 F6 | 	mov	arg02, local03
2bce8     16 17 02 F6 | 	mov	arg03, local04
2bcec     17 19 02 F6 | 	mov	arg04, local05
2bcf0     F2 38 02 F6 | 	mov	local10, objptr
2bcf4     19 E5 01 F6 | 	mov	objptr, local07
2bcf8     80 29 B0 FD | 	call	#_fatfs_cc_disk_setpins
2bcfc     1C E5 01 F6 | 	mov	objptr, local10
2bd00     FD 3A 0A F6 | 	mov	local11, result1 wz
2bd04     24 00 90 5D |  if_ne	jmp	#LR__3990
2bd08     B4 01 00 FF 
2bd0c     C2 15 06 F6 | 	mov	arg02, ##@LR__5407
2bd10     1A 13 02 F6 | 	mov	arg01, local08
2bd14     00 16 06 F6 | 	mov	arg03, #0
2bd18     F2 3A 02 F6 | 	mov	local11, objptr
2bd1c     19 E5 01 F6 | 	mov	objptr, local07
2bd20     B0 60 B0 FD | 	call	#_fatfs_cc_f_mount
2bd24     1D E5 01 F6 | 	mov	objptr, local11
2bd28     FD 3A 02 F6 | 	mov	local11, result1
2bd2c                 | LR__3990
2bd2c     00 3A 0E F2 | 	cmp	local11, #0 wz
2bd30     24 00 90 AD |  if_e	jmp	#LR__3991
2bd34     13 13 02 F6 | 	mov	arg01, local01
2bd38     14 15 02 F6 | 	mov	arg02, local02
2bd3c     5C DB BF FD | 	call	#__system___freepins
2bd40     1D 13 6A F6 | 	neg	arg01, local11 wz
2bd44     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2bd48     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2bd4c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2bd50     00 FA 05 F6 | 	mov	result1, #0
2bd54     14 00 90 FD | 	jmp	#LR__3992
2bd58                 | LR__3991
2bd58     19 13 02 F6 | 	mov	arg01, local07
2bd5c     F2 3A 02 F6 | 	mov	local11, objptr
2bd60     19 E5 01 F6 | 	mov	objptr, local07
2bd64     4C 9D B0 FD | 	call	#_fatfs_cc_get_vfs
2bd68     1D E5 01 F6 | 	mov	objptr, local11
2bd6c                 | LR__3992
2bd6c     A7 F0 03 F6 | 	mov	ptra, fp
2bd70     B2 00 A0 FD | 	call	#popregs_
2bd74                 | __system___vfs_open_sdcardx_ret
2bd74     2D 00 64 FD | 	ret
2bd78                 | 
2bd78                 | __system____default_getc
2bd78     03 4A 05 F6 | 	mov	COUNT_, #3
2bd7c     A8 00 A0 FD | 	call	#pushregs_
2bd80     09 27 02 F6 | 	mov	local01, arg01
2bd84     13 29 02 FB | 	rdlong	local02, local01
2bd88     08 28 06 F1 | 	add	local02, #8
2bd8c     14 2B 02 FB | 	rdlong	local03, local02
2bd90     02 2A CE F7 | 	test	local03, #2 wz
2bd94     13 13 02 56 |  if_ne	mov	arg01, local01
2bd98     00 01 B0 5D |  if_ne	call	#__system____default_flush
2bd9c     14 2B 02 FB | 	rdlong	local03, local02
2bda0     01 2A 46 F5 | 	or	local03, #1
2bda4     14 2B 62 FC | 	wrlong	local03, local02
2bda8     08 28 86 F1 | 	sub	local02, #8
2bdac     14 2B 0A FB | 	rdlong	local03, local02 wz
2bdb0     0C 00 90 5D |  if_ne	jmp	#LR__4000
2bdb4     13 13 02 F6 | 	mov	arg01, local01
2bdb8     68 18 B0 FD | 	call	#__system____default_filbuf
2bdbc     FD 2A 02 F6 | 	mov	local03, result1
2bdc0                 | LR__4000
2bdc0     01 2A 56 F2 | 	cmps	local03, #1 wc
2bdc4     01 FA 65 C6 |  if_b	neg	result1, #1
2bdc8     1C 00 90 CD |  if_b	jmp	#LR__4001
2bdcc     01 2A 86 F1 | 	sub	local03, #1
2bdd0     14 2B 62 FC | 	wrlong	local03, local02
2bdd4     04 28 06 F1 | 	add	local02, #4
2bdd8     14 2B 02 FB | 	rdlong	local03, local02
2bddc     15 FB C1 FA | 	rdbyte	result1, local03
2bde0     01 2A 06 F1 | 	add	local03, #1
2bde4     14 2B 62 FC | 	wrlong	local03, local02
2bde8                 | LR__4001
2bde8     A7 F0 03 F6 | 	mov	ptra, fp
2bdec     B2 00 A0 FD | 	call	#popregs_
2bdf0                 | __system____default_getc_ret
2bdf0     2D 00 64 FD | 	ret
2bdf4                 | 
2bdf4                 | __system____default_putc
2bdf4     06 4A 05 F6 | 	mov	COUNT_, #6
2bdf8     A8 00 A0 FD | 	call	#pushregs_
2bdfc     09 27 02 F6 | 	mov	local01, arg01
2be00     0A 29 02 F6 | 	mov	local02, arg02
2be04     14 2B 02 FB | 	rdlong	local03, local02
2be08     08 2A 06 F1 | 	add	local03, #8
2be0c     15 FB 01 FB | 	rdlong	result1, local03
2be10     01 FA CD F7 | 	test	result1, #1 wz
2be14     14 13 02 56 |  if_ne	mov	arg01, local02
2be18     80 00 B0 5D |  if_ne	call	#__system____default_flush
2be1c     15 2D 02 FB | 	rdlong	local04, local03
2be20     02 2C 46 F5 | 	or	local04, #2
2be24     15 2D 62 FC | 	wrlong	local04, local03
2be28     08 2A 86 F1 | 	sub	local03, #8
2be2c     15 2F 02 FB | 	rdlong	local05, local03
2be30     10 2A 06 F1 | 	add	local03, #16
2be34     15 15 02 FB | 	rdlong	arg02, local03
2be38     10 2A 86 F1 | 	sub	local03, #16
2be3c     17 FB 01 F6 | 	mov	result1, local05
2be40     0A FB 01 F1 | 	add	result1, arg02
2be44     FD 26 42 FC | 	wrbyte	local01, result1
2be48     13 27 E2 F8 | 	getbyte	local01, local01, #0
2be4c     01 2E 06 F1 | 	add	local05, #1
2be50     15 2F 62 FC | 	wrlong	local05, local03
2be54     06 28 06 F1 | 	add	local02, #6
2be58     14 31 EA FA | 	rdword	local06, local02 wz
2be5c     06 28 86 F1 | 	sub	local02, #6
2be60     0C 2A 06 51 |  if_ne	add	local03, #12
2be64     15 2D 02 5B |  if_ne	rdlong	local04, local03
2be68     16 2F 0A 52 |  if_ne	cmp	local05, local04 wz
2be6c     0C 00 90 AD |  if_e	jmp	#LR__4010
2be70     0A 26 0E F2 | 	cmp	local01, #10 wz
2be74     01 30 0E A2 |  if_e	cmp	local06, #1 wz
2be78     10 00 90 5D |  if_ne	jmp	#LR__4011
2be7c                 | LR__4010
2be7c     14 13 02 F6 | 	mov	arg01, local02
2be80     18 00 B0 FD | 	call	#__system____default_flush
2be84     00 FA 0D F2 | 	cmp	result1, #0 wz
2be88     01 26 66 56 |  if_ne	neg	local01, #1
2be8c                 | LR__4011
2be8c     13 FB 01 F6 | 	mov	result1, local01
2be90     A7 F0 03 F6 | 	mov	ptra, fp
2be94     B2 00 A0 FD | 	call	#popregs_
2be98                 | __system____default_putc_ret
2be98     2D 00 64 FD | 	ret
2be9c                 | 
2be9c                 | __system____default_flush
2be9c     06 4A 05 F6 | 	mov	COUNT_, #6
2bea0     A8 00 A0 FD | 	call	#pushregs_
2bea4     09 27 02 F6 | 	mov	local01, arg01
2bea8     13 29 02 FB | 	rdlong	local02, local01
2beac     14 2B 02 FB | 	rdlong	local03, local02
2beb0     08 28 06 F1 | 	add	local02, #8
2beb4     14 FB 01 FB | 	rdlong	result1, local02
2beb8     08 28 86 F1 | 	sub	local02, #8
2bebc     02 FA CD F7 | 	test	result1, #2 wz
2bec0     D0 00 90 AD |  if_e	jmp	#LR__4022
2bec4     01 2A 56 F2 | 	cmps	local03, #1 wc
2bec8     20 01 90 CD |  if_b	jmp	#LR__4024
2becc     08 26 06 F1 | 	add	local01, #8
2bed0     13 FB 01 FB | 	rdlong	result1, local01
2bed4     08 26 86 F1 | 	sub	local01, #8
2bed8     40 FA CD F7 | 	test	result1, #64 wz
2bedc     68 00 90 AD |  if_e	jmp	#LR__4021
2bee0     08 26 06 F1 | 	add	local01, #8
2bee4     13 17 02 FB | 	rdlong	arg03, local01
2bee8     08 26 86 F1 | 	sub	local01, #8
2beec     80 16 CE F7 | 	test	arg03, #128 wz
2bef0     54 00 90 AD |  if_e	jmp	#LR__4020
2bef4     30 26 06 F1 | 	add	local01, #48
2bef8     13 2D 02 FB | 	rdlong	local04, local01
2befc     16 2F 02 F6 | 	mov	local05, local04
2bf00     30 26 86 F1 | 	sub	local01, #48
2bf04     13 2E 46 F7 | 	zerox	local05, #19
2bf08     14 2C 46 F0 | 	shr	local04, #20
2bf0c     02 2C 66 F0 | 	shl	local04, #2
2bf10     ED 2C 02 F1 | 	add	local04, __methods__
2bf14     16 2D 02 FB | 	rdlong	local04, local04
2bf18     13 13 02 F6 | 	mov	arg01, local01
2bf1c     00 14 06 F6 | 	mov	arg02, #0
2bf20     02 16 06 F6 | 	mov	arg03, #2
2bf24     F2 30 02 F6 | 	mov	local06, objptr
2bf28     17 E5 01 F6 | 	mov	objptr, local05
2bf2c     2D 2C 62 FD | 	call	local04
2bf30     18 E5 01 F6 | 	mov	objptr, local06
2bf34     08 26 06 F1 | 	add	local01, #8
2bf38     13 31 02 FB | 	rdlong	local06, local01
2bf3c     80 30 26 F5 | 	andn	local06, #128
2bf40     13 31 62 FC | 	wrlong	local06, local01
2bf44     08 26 86 F1 | 	sub	local01, #8
2bf48                 | LR__4020
2bf48                 | LR__4021
2bf48     18 26 06 F1 | 	add	local01, #24
2bf4c     13 2D 02 FB | 	rdlong	local04, local01
2bf50     16 2F 02 F6 | 	mov	local05, local04
2bf54     18 26 86 F1 | 	sub	local01, #24
2bf58     13 2E 46 F7 | 	zerox	local05, #19
2bf5c     14 2C 46 F0 | 	shr	local04, #20
2bf60     02 2C 66 F0 | 	shl	local04, #2
2bf64     ED 2C 02 F1 | 	add	local04, __methods__
2bf68     16 2D 02 FB | 	rdlong	local04, local04
2bf6c     10 28 06 F1 | 	add	local02, #16
2bf70     14 15 02 FB | 	rdlong	arg02, local02
2bf74     10 28 86 F1 | 	sub	local02, #16
2bf78     13 13 02 F6 | 	mov	arg01, local01
2bf7c     15 17 02 F6 | 	mov	arg03, local03
2bf80     F2 30 02 F6 | 	mov	local06, objptr
2bf84     17 E5 01 F6 | 	mov	objptr, local05
2bf88     2D 2C 62 FD | 	call	local04
2bf8c     18 E5 01 F6 | 	mov	objptr, local06
2bf90     58 00 90 FD | 	jmp	#LR__4024
2bf94                 | LR__4022
2bf94     08 28 06 F1 | 	add	local02, #8
2bf98     14 31 02 FB | 	rdlong	local06, local02
2bf9c     08 28 86 F1 | 	sub	local02, #8
2bfa0     01 30 CE F7 | 	test	local06, #1 wz
2bfa4     00 2A 0E 52 |  if_ne	cmp	local03, #0 wz
2bfa8     40 00 90 AD |  if_e	jmp	#LR__4023
2bfac     30 26 06 F1 | 	add	local01, #48
2bfb0     13 2D 02 FB | 	rdlong	local04, local01
2bfb4     16 2F 02 F6 | 	mov	local05, local04
2bfb8     30 26 86 F1 | 	sub	local01, #48
2bfbc     13 2E 46 F7 | 	zerox	local05, #19
2bfc0     14 2C 46 F0 | 	shr	local04, #20
2bfc4     02 2C 66 F0 | 	shl	local04, #2
2bfc8     ED 2C 02 F1 | 	add	local04, __methods__
2bfcc     16 2D 02 FB | 	rdlong	local04, local04
2bfd0     13 13 02 F6 | 	mov	arg01, local01
2bfd4     15 15 62 F6 | 	neg	arg02, local03
2bfd8     01 16 06 F6 | 	mov	arg03, #1
2bfdc     F2 30 02 F6 | 	mov	local06, objptr
2bfe0     17 E5 01 F6 | 	mov	objptr, local05
2bfe4     2D 2C 62 FD | 	call	local04
2bfe8     18 E5 01 F6 | 	mov	objptr, local06
2bfec                 | LR__4023
2bfec                 | LR__4024
2bfec     14 01 68 FC | 	wrlong	#0, local02
2bff0     04 28 06 F1 | 	add	local02, #4
2bff4     14 01 68 FC | 	wrlong	#0, local02
2bff8     04 28 06 F1 | 	add	local02, #4
2bffc     14 01 68 FC | 	wrlong	#0, local02
2c000     00 FA 05 F6 | 	mov	result1, #0
2c004     A7 F0 03 F6 | 	mov	ptra, fp
2c008     B2 00 A0 FD | 	call	#popregs_
2c00c                 | __system____default_flush_ret
2c00c     2D 00 64 FD | 	ret
2c010                 | 
2c010                 | __system____default_buffer_init
2c010     02 4A 05 F6 | 	mov	COUNT_, #2
2c014     A8 00 A0 FD | 	call	#pushregs_
2c018     09 27 02 F6 | 	mov	local01, arg01
2c01c     13 29 02 FB | 	rdlong	local02, local01
2c020     13 13 02 F6 | 	mov	arg01, local01
2c024     34 03 B0 FD | 	call	#__system___isatty
2c028     00 FA 0D F2 | 	cmp	result1, #0 wz
2c02c     06 26 06 51 |  if_ne	add	local01, #6
2c030     13 0B 58 5C |  if_ne	wrword	#5, local01
2c034     06 26 06 A1 |  if_e	add	local01, #6
2c038     13 0D 58 AC |  if_e	wrword	#6, local01
2c03c     14 28 06 F1 | 	add	local02, #20
2c040     14 27 02 F6 | 	mov	local01, local02
2c044     04 28 86 F1 | 	sub	local02, #4
2c048     14 27 62 FC | 	wrlong	local01, local02
2c04c     04 28 86 F1 | 	sub	local02, #4
2c050     02 00 80 FF 
2c054     14 01 68 FC | 	wrlong	##1024, local02
2c058     00 FA 05 F6 | 	mov	result1, #0
2c05c     A7 F0 03 F6 | 	mov	ptra, fp
2c060     B2 00 A0 FD | 	call	#popregs_
2c064                 | __system____default_buffer_init_ret
2c064     2D 00 64 FD | 	ret
2c068                 | 
2c068                 | __system__stat
2c068     04 4A 05 F6 | 	mov	COUNT_, #4
2c06c     A8 00 A0 FD | 	call	#pushregs_
2c070     0A 27 02 F6 | 	mov	local01, arg02
2c074     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2c078     F3 28 02 F6 | 	mov	local02, ptr___system__dat__
2c07c     09 15 02 F6 | 	mov	arg02, arg01
2c080     14 13 02 F6 | 	mov	arg01, local02
2c084     00 16 06 F6 | 	mov	arg03, #0
2c088     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2c08c     58 B5 BF FD | 	call	#__system____getvfsforfile
2c090     FD 2A 0A F6 | 	mov	local03, result1 wz
2c094     10 00 90 AD |  if_e	jmp	#LR__4030
2c098     34 2A 06 F1 | 	add	local03, #52
2c09c     15 17 0A FB | 	rdlong	arg03, local03 wz
2c0a0     34 2A 86 F1 | 	sub	local03, #52
2c0a4     14 00 90 5D |  if_ne	jmp	#LR__4031
2c0a8                 | LR__4030
2c0a8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2c0ac     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
2c0b0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2c0b4     01 FA 65 F6 | 	neg	result1, #1
2c0b8     68 00 90 FD | 	jmp	#LR__4032
2c0bc                 | LR__4031
2c0bc     13 13 02 F6 | 	mov	arg01, local01
2c0c0     00 14 06 F6 | 	mov	arg02, #0
2c0c4     30 16 06 F6 | 	mov	arg03, #48
2c0c8     09 2D 02 F6 | 	mov	local04, arg01
2c0cc     98 00 A0 FD | 	call	#\builtin_bytefill_
2c0d0     16 FB 01 F6 | 	mov	result1, local04
2c0d4     14 13 CA FA | 	rdbyte	arg01, local02 wz
2c0d8     08 26 06 A1 |  if_e	add	local01, #8
2c0dc     08 00 80 AF 
2c0e0     13 FF 6B AC |  if_e	wrlong	##4607, local01
2c0e4     00 FA 05 A6 |  if_e	mov	result1, #0
2c0e8     38 00 90 AD |  if_e	jmp	#LR__4032
2c0ec     34 2A 06 F1 | 	add	local03, #52
2c0f0     15 2B 02 FB | 	rdlong	local03, local03
2c0f4     15 2D 02 F6 | 	mov	local04, local03
2c0f8     13 2A 46 F7 | 	zerox	local03, #19
2c0fc     14 2C 46 F0 | 	shr	local04, #20
2c100     02 2C 66 F0 | 	shl	local04, #2
2c104     ED 2C 02 F1 | 	add	local04, __methods__
2c108     16 2D 02 FB | 	rdlong	local04, local04
2c10c     14 13 02 F6 | 	mov	arg01, local02
2c110     13 15 02 F6 | 	mov	arg02, local01
2c114     F2 28 02 F6 | 	mov	local02, objptr
2c118     15 E5 01 F6 | 	mov	objptr, local03
2c11c     2D 2C 62 FD | 	call	local04
2c120     14 E5 01 F6 | 	mov	objptr, local02
2c124                 | LR__4032
2c124     A7 F0 03 F6 | 	mov	ptra, fp
2c128     B2 00 A0 FD | 	call	#popregs_
2c12c                 | __system__stat_ret
2c12c     2D 00 64 FD | 	ret
2c130                 | 
2c130                 | __system__write
2c130     0A 12 16 F2 | 	cmp	arg01, #10 wc
2c134     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2c138     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2c13c     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2c140     01 FA 65 36 |  if_ae	neg	result1, #1
2c144     20 00 90 3D |  if_ae	jmp	#LR__4040
2c148     34 12 06 FD | 	qmul	arg01, #52
2c14c     02 00 00 FF 
2c150     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
2c154     18 12 62 FD | 	getqx	arg01
2c158     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2c15c     02 00 00 FF 
2c160     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
2c164     0C 10 B0 FD | 	call	#__system___vfswrite
2c168                 | LR__4040
2c168                 | __system__write_ret
2c168     2D 00 64 FD | 	ret
2c16c                 | 
2c16c                 | __system__read
2c16c     0A 12 16 F2 | 	cmp	arg01, #10 wc
2c170     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2c174     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2c178     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2c17c     01 FA 65 36 |  if_ae	neg	result1, #1
2c180     20 00 90 3D |  if_ae	jmp	#LR__4050
2c184     34 12 06 FD | 	qmul	arg01, #52
2c188     02 00 00 FF 
2c18c     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
2c190     18 12 62 FD | 	getqx	arg01
2c194     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2c198     02 00 00 FF 
2c19c     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
2c1a0     98 11 B0 FD | 	call	#__system___vfsread
2c1a4                 | LR__4050
2c1a4                 | __system__read_ret
2c1a4     2D 00 64 FD | 	ret
2c1a8                 | 
2c1a8                 | __system__close
2c1a8     0A 12 16 F2 | 	cmp	arg01, #10 wc
2c1ac     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2c1b0     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2c1b4     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2c1b8     01 FA 65 36 |  if_ae	neg	result1, #1
2c1bc     20 00 90 3D |  if_ae	jmp	#LR__4060
2c1c0     34 12 06 FD | 	qmul	arg01, #52
2c1c4     02 00 00 FF 
2c1c8     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
2c1cc     18 12 62 FD | 	getqx	arg01
2c1d0     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2c1d4     02 00 00 FF 
2c1d8     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
2c1dc     10 F9 BF FD | 	call	#__system___closeraw
2c1e0                 | LR__4060
2c1e0                 | __system__close_ret
2c1e0     2D 00 64 FD | 	ret
2c1e4                 | 
2c1e4                 | __system__lseek
2c1e4     06 4A 05 F6 | 	mov	COUNT_, #6
2c1e8     A8 00 A0 FD | 	call	#pushregs_
2c1ec     0A 12 16 F2 | 	cmp	arg01, #10 wc
2c1f0     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2c1f4     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2c1f8     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2c1fc     01 FA 65 36 |  if_ae	neg	result1, #1
2c200     C4 00 90 3D |  if_ae	jmp	#LR__4071
2c204     34 12 06 FD | 	qmul	arg01, #52
2c208     02 00 00 FF 
2c20c     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
2c210     18 26 62 FD | 	getqx	local01
2c214     F3 26 02 F1 | 	add	local01, ptr___system__dat__
2c218     30 26 06 F1 | 	add	local01, #48
2c21c     13 13 0A FB | 	rdlong	arg01, local01 wz
2c220     30 26 86 F1 | 	sub	local01, #48
2c224     02 00 00 FF 
2c228     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
2c22c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2c230     F3 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
2c234     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2c238     01 FA 65 A6 |  if_e	neg	result1, #1
2c23c     88 00 90 AD |  if_e	jmp	#LR__4071
2c240     08 26 06 F1 | 	add	local01, #8
2c244     13 29 02 FB | 	rdlong	local02, local01
2c248     08 26 86 F1 | 	sub	local01, #8
2c24c     40 28 CE F7 | 	test	local02, #64 wz
2c250     08 26 06 51 |  if_ne	add	local01, #8
2c254     13 29 02 5B |  if_ne	rdlong	local02, local01
2c258     80 28 46 55 |  if_ne	or	local02, #128
2c25c     13 29 62 5C |  if_ne	wrlong	local02, local01
2c260     08 26 86 51 |  if_ne	sub	local01, #8
2c264     30 26 06 F1 | 	add	local01, #48
2c268     13 2B 02 FB | 	rdlong	local03, local01
2c26c     15 2D 02 F6 | 	mov	local04, local03
2c270     30 26 86 F1 | 	sub	local01, #48
2c274     13 2C 46 F7 | 	zerox	local04, #19
2c278     14 2A 46 F0 | 	shr	local03, #20
2c27c     02 2A 66 F0 | 	shl	local03, #2
2c280     ED 2A 02 F1 | 	add	local03, __methods__
2c284     15 2B 02 FB | 	rdlong	local03, local03
2c288     13 13 02 F6 | 	mov	arg01, local01
2c28c     F2 2E 02 F6 | 	mov	local05, objptr
2c290     16 E5 01 F6 | 	mov	objptr, local04
2c294     2D 2A 62 FD | 	call	local03
2c298     17 E5 01 F6 | 	mov	objptr, local05
2c29c     FD 30 02 F6 | 	mov	local06, result1
2c2a0     00 30 56 F2 | 	cmps	local06, #0 wc
2c2a4     1C 00 90 3D |  if_ae	jmp	#LR__4070
2c2a8     18 13 6A F6 | 	neg	arg01, local06 wz
2c2ac     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2c2b0     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2c2b4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2c2b8     01 FA 65 56 |  if_ne	neg	result1, #1
2c2bc     00 FA 05 A6 |  if_e	mov	result1, #0
2c2c0     04 00 90 FD | 	jmp	#LR__4071
2c2c4                 | LR__4070
2c2c4     18 FB 01 F6 | 	mov	result1, local06
2c2c8                 | LR__4071
2c2c8     A7 F0 03 F6 | 	mov	ptra, fp
2c2cc     B2 00 A0 FD | 	call	#popregs_
2c2d0                 | __system__lseek_ret
2c2d0     2D 00 64 FD | 	ret
2c2d4                 | 
2c2d4                 | __system___ioctl
2c2d4     03 4A 05 F6 | 	mov	COUNT_, #3
2c2d8     A8 00 A0 FD | 	call	#pushregs_
2c2dc     00 12 4E F2 | 	cmps	arg01, #0 wz
2c2e0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2c2e4     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2c2e8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2c2ec     01 FA 65 A6 |  if_e	neg	result1, #1
2c2f0     5C 00 90 AD |  if_e	jmp	#LR__4081
2c2f4     28 12 06 F1 | 	add	arg01, #40
2c2f8     09 27 02 FB | 	rdlong	local01, arg01
2c2fc     13 29 02 F6 | 	mov	local02, local01
2c300     28 12 86 F1 | 	sub	arg01, #40
2c304     13 28 46 F7 | 	zerox	local02, #19
2c308     14 26 46 F0 | 	shr	local01, #20
2c30c     02 26 66 F0 | 	shl	local01, #2
2c310     ED 26 02 F1 | 	add	local01, __methods__
2c314     13 27 02 FB | 	rdlong	local01, local01
2c318     F2 2A 02 F6 | 	mov	local03, objptr
2c31c     14 E5 01 F6 | 	mov	objptr, local02
2c320     2D 26 62 FD | 	call	local01
2c324     15 E5 01 F6 | 	mov	objptr, local03
2c328     FD 12 0A F6 | 	mov	arg01, result1 wz
2c32c     1C 00 90 AD |  if_e	jmp	#LR__4080
2c330     00 12 4E F2 | 	cmps	arg01, #0 wz
2c334     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2c338     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2c33c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2c340     01 FA 65 56 |  if_ne	neg	result1, #1
2c344     00 FA 05 A6 |  if_e	mov	result1, #0
2c348     04 00 90 FD | 	jmp	#LR__4081
2c34c                 | LR__4080
2c34c     00 FA 05 F6 | 	mov	result1, #0
2c350                 | LR__4081
2c350     A7 F0 03 F6 | 	mov	ptra, fp
2c354     B2 00 A0 FD | 	call	#popregs_
2c358                 | __system___ioctl_ret
2c358     2D 00 64 FD | 	ret
2c35c                 | 
2c35c                 | __system___isatty
2c35c     00 4A 05 F6 | 	mov	COUNT_, #0
2c360     A8 00 A0 FD | 	call	#pushregs_
2c364     0C F0 07 F1 | 	add	ptra, #12
2c368     04 4E 05 F1 | 	add	fp, #4
2c36c     A7 12 62 FC | 	wrlong	arg01, fp
2c370     04 4E 05 F1 | 	add	fp, #4
2c374     A7 16 02 F6 | 	mov	arg03, fp
2c378     08 4E 85 F1 | 	sub	fp, #8
2c37c     00 15 06 F6 | 	mov	arg02, #256
2c380     50 FF BF FD | 	call	#__system___ioctl
2c384     00 FA 0D F2 | 	cmp	result1, #0 wz
2c388     01 FA 05 A6 |  if_e	mov	result1, #1
2c38c     00 FA 05 56 |  if_ne	mov	result1, #0
2c390     A7 F0 03 F6 | 	mov	ptra, fp
2c394     B2 00 A0 FD | 	call	#popregs_
2c398                 | __system___isatty_ret
2c398     2D 00 64 FD | 	ret
2c39c                 | 
2c39c                 | __system____getftab
2c39c     0A 12 16 F2 | 	cmp	arg01, #10 wc
2c3a0     34 12 06 CD |  if_b	qmul	arg01, #52
2c3a4     00 FA 05 36 |  if_ae	mov	result1, #0
2c3a8     02 00 00 CF 
2c3ac     24 E7 05 C1 |  if_b	add	ptr___system__dat__, ##1316
2c3b0     18 FA 61 CD |  if_b	getqx	result1
2c3b4     F3 FA 01 C1 |  if_b	add	result1, ptr___system__dat__
2c3b8     02 00 00 CF 
2c3bc     24 E7 85 C1 |  if_b	sub	ptr___system__dat__, ##1316
2c3c0                 | __system____getftab_ret
2c3c0     2D 00 64 FD | 	ret
2c3c4                 | 
2c3c4                 | __system__strncpy
2c3c4     09 01 02 F6 | 	mov	_var01, arg01
2c3c8                 | LR__4090
2c3c8     01 16 86 F1 | 	sub	arg03, #1
2c3cc     00 16 56 F2 | 	cmps	arg03, #0 wc
2c3d0     18 00 90 CD |  if_b	jmp	#LR__4091
2c3d4     0A FB C1 FA | 	rdbyte	result1, arg02
2c3d8     00 FB 41 FC | 	wrbyte	result1, _var01
2c3dc     01 14 06 F1 | 	add	arg02, #1
2c3e0     00 FB C9 FA | 	rdbyte	result1, _var01 wz
2c3e4     01 00 06 F1 | 	add	_var01, #1
2c3e8     DC FF 9F 5D |  if_ne	jmp	#LR__4090
2c3ec                 | LR__4091
2c3ec     97 0C 48 FB | 	callpa	#(@LR__4093-@LR__4092)>>2,fcache_load_ptr_
2c3f0                 | LR__4092
2c3f0     01 16 86 F1 | 	sub	arg03, #1
2c3f4     00 16 56 F2 | 	cmps	arg03, #0 wc
2c3f8     00 03 02 36 |  if_ae	mov	_var02, _var01
2c3fc     01 00 06 31 |  if_ae	add	_var01, #1
2c400     01 01 48 3C |  if_ae	wrbyte	#0, _var02
2c404     E8 FF 9F 3D |  if_ae	jmp	#LR__4092
2c408                 | LR__4093
2c408     09 FB 01 F6 | 	mov	result1, arg01
2c40c                 | __system__strncpy_ret
2c40c     2D 00 64 FD | 	ret
2c410                 | 
2c410                 | __system__strncat
2c410     00 14 4E F2 | 	cmps	arg02, #0 wz
2c414     50 00 90 AD |  if_e	jmp	#LR__4104
2c418     01 16 16 F2 | 	cmp	arg03, #1 wc
2c41c     48 00 90 CD |  if_b	jmp	#LR__4104
2c420     09 01 02 F6 | 	mov	_var01, arg01
2c424     97 1E 48 FB | 	callpa	#(@LR__4102-@LR__4100)>>2,fcache_load_ptr_
2c428                 | LR__4100
2c428     00 FB C9 FA | 	rdbyte	result1, _var01 wz
2c42c     01 00 06 51 |  if_ne	add	_var01, #1
2c430     F4 FF 9F 5D |  if_ne	jmp	#LR__4100
2c434     0B 03 02 F6 | 	mov	_var02, arg03
2c438                 | LR__4101
2c438     0A 05 C2 FA | 	rdbyte	_var03, arg02
2c43c     02 07 02 F6 | 	mov	_var04, _var03
2c440     07 06 4E F7 | 	zerox	_var04, #7 wz
2c444     01 14 06 F1 | 	add	arg02, #1
2c448     18 00 90 AD |  if_e	jmp	#LR__4103
2c44c     01 02 86 F1 | 	sub	_var02, #1
2c450     00 02 56 F2 | 	cmps	_var02, #0 wc
2c454     00 07 02 36 |  if_ae	mov	_var04, _var01
2c458     01 00 06 31 |  if_ae	add	_var01, #1
2c45c     03 05 42 3C |  if_ae	wrbyte	_var03, _var04
2c460     D4 FF 9F 3D |  if_ae	jmp	#LR__4101
2c464                 | LR__4102
2c464                 | LR__4103
2c464     00 01 48 FC | 	wrbyte	#0, _var01
2c468                 | LR__4104
2c468     09 FB 01 F6 | 	mov	result1, arg01
2c46c                 | __system__strncat_ret
2c46c     2D 00 64 FD | 	ret
2c470                 | 
2c470                 | __system__strncmp
2c470     09 01 0A F6 | 	mov	_var01, arg01 wz
2c474     14 00 90 5D |  if_ne	jmp	#LR__4110
2c478     00 14 0E F2 | 	cmp	arg02, #0 wz
2c47c     01 02 66 56 |  if_ne	neg	_var02, #1
2c480     00 02 06 A6 |  if_e	mov	_var02, #0
2c484     01 FB 01 F6 | 	mov	result1, _var02
2c488     74 00 90 FD | 	jmp	#__system__strncmp_ret
2c48c                 | LR__4110
2c48c     00 14 0E F2 | 	cmp	arg02, #0 wz
2c490     01 FA 05 A6 |  if_e	mov	result1, #1
2c494     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
2c498     0B 05 02 F6 | 	mov	_var03, arg03
2c49c     97 16 48 FB | 	callpa	#(@LR__4112-@LR__4111)>>2,fcache_load_ptr_
2c4a0                 | LR__4111
2c4a0     00 07 C2 FA | 	rdbyte	_var04, _var01
2c4a4     0A 09 02 F6 | 	mov	_var05, arg02
2c4a8     04 0B C2 FA | 	rdbyte	_var06, _var05
2c4ac     01 04 86 F1 | 	sub	_var03, #1
2c4b0     00 04 56 F2 | 	cmps	_var03, #0 wc
2c4b4     01 00 06 F1 | 	add	_var01, #1
2c4b8     01 14 06 F1 | 	add	arg02, #1
2c4bc     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
2c4c0     08 00 90 2D |  if_nc_and_z	jmp	#LR__4113
2c4c4     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
2c4c8     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__4111
2c4cc                 | LR__4112
2c4cc                 | LR__4113
2c4cc     00 04 56 F2 | 	cmps	_var03, #0 wc
2c4d0     00 FA 05 C6 |  if_b	mov	result1, #0
2c4d4     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
2c4d8     05 07 0A F2 | 	cmp	_var04, _var06 wz
2c4dc     00 FA 05 A6 |  if_e	mov	result1, #0
2c4e0     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
2c4e4     00 06 0E F2 | 	cmp	_var04, #0 wz
2c4e8     01 FA 65 A6 |  if_e	neg	result1, #1
2c4ec     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
2c4f0     00 0A 0E F2 | 	cmp	_var06, #0 wz
2c4f4     01 FA 05 A6 |  if_e	mov	result1, #1
2c4f8     03 FB 01 56 |  if_ne	mov	result1, _var04
2c4fc     05 FB 81 51 |  if_ne	sub	result1, _var06
2c500                 | __system__strncmp_ret
2c500     2D 00 64 FD | 	ret
2c504                 | 
2c504                 | __system____root_opendir
2c504     64 E6 05 F1 | 	add	ptr___system__dat__, #100
2c508     04 12 06 F1 | 	add	arg01, #4
2c50c     09 E7 61 FC | 	wrlong	ptr___system__dat__, arg01
2c510     00 FA 05 F6 | 	mov	result1, #0
2c514     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
2c518                 | __system____root_opendir_ret
2c518     2D 00 64 FD | 	ret
2c51c                 | 
2c51c                 | __system____root_readdir
2c51c     03 4A 05 F6 | 	mov	COUNT_, #3
2c520     A8 00 A0 FD | 	call	#pushregs_
2c524     09 27 02 F6 | 	mov	local01, arg01
2c528     0A 29 02 F6 | 	mov	local02, arg02
2c52c     04 26 06 F1 | 	add	local01, #4
2c530     13 2B 02 FB | 	rdlong	local03, local01
2c534     04 26 86 F1 | 	sub	local01, #4
2c538                 | LR__4120
2c538     74 E6 05 F1 | 	add	ptr___system__dat__, #116
2c53c     F3 2A 0A F2 | 	cmp	local03, ptr___system__dat__ wz
2c540     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
2c544     01 FA 65 A6 |  if_e	neg	result1, #1
2c548     48 00 90 AD |  if_e	jmp	#LR__4121
2c54c     15 17 0A FB | 	rdlong	arg03, local03 wz
2c550     04 2A 06 A1 |  if_e	add	local03, #4
2c554     E0 FF 9F AD |  if_e	jmp	#LR__4120
2c558     15 15 02 FB | 	rdlong	arg02, local03
2c55c     01 14 06 F1 | 	add	arg02, #1
2c560     14 13 02 F6 | 	mov	arg01, local02
2c564     40 16 06 F6 | 	mov	arg03, #64
2c568     58 FE BF FD | 	call	#__system__strncpy
2c56c     50 28 06 F1 | 	add	local02, #80
2c570     14 03 48 FC | 	wrbyte	#1, local02
2c574     08 28 86 F1 | 	sub	local02, #8
2c578     14 01 68 FC | 	wrlong	#0, local02
2c57c     04 28 06 F1 | 	add	local02, #4
2c580     14 01 68 FC | 	wrlong	#0, local02
2c584     04 2A 06 F1 | 	add	local03, #4
2c588     04 26 06 F1 | 	add	local01, #4
2c58c     13 2B 62 FC | 	wrlong	local03, local01
2c590     00 FA 05 F6 | 	mov	result1, #0
2c594                 | LR__4121
2c594     A7 F0 03 F6 | 	mov	ptra, fp
2c598     B2 00 A0 FD | 	call	#popregs_
2c59c                 | __system____root_readdir_ret
2c59c     2D 00 64 FD | 	ret
2c5a0                 | 
2c5a0                 | __system____root_closedir
2c5a0     00 FA 05 F6 | 	mov	result1, #0
2c5a4                 | __system____root_closedir_ret
2c5a4     2D 00 64 FD | 	ret
2c5a8                 | 
2c5a8                 | __system____root_stat
2c5a8     0A 01 02 F6 | 	mov	_var01, arg02
2c5ac     00 13 02 F6 | 	mov	arg01, _var01
2c5b0     00 14 06 F6 | 	mov	arg02, #0
2c5b4     30 16 06 F6 | 	mov	arg03, #48
2c5b8     98 00 A0 FD | 	call	#\builtin_bytefill_
2c5bc     08 00 06 F1 | 	add	_var01, #8
2c5c0     08 00 80 FF 
2c5c4     00 FF 6B FC | 	wrlong	##4607, _var01
2c5c8     00 FA 05 F6 | 	mov	result1, #0
2c5cc                 | __system____root_stat_ret
2c5cc     2D 00 64 FD | 	ret
2c5d0                 | 
2c5d0                 | __system___normalizeName
2c5d0     00 00 06 F6 | 	mov	_var01, #0
2c5d4     09 03 02 F6 | 	mov	_var02, arg01
2c5d8     01 05 02 F6 | 	mov	_var03, _var02
2c5dc                 | LR__4130
2c5dc     01 07 CA FA | 	rdbyte	_var04, _var02 wz
2c5e0     5C 01 90 AD |  if_e	jmp	#LR__4149
2c5e4     00 00 0E F2 | 	cmp	_var01, #0 wz
2c5e8     02 07 02 56 |  if_ne	mov	_var04, _var03
2c5ec     01 04 06 51 |  if_ne	add	_var03, #1
2c5f0     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
2c5f4     00 00 06 56 |  if_ne	mov	_var01, #0
2c5f8     01 07 C2 FA | 	rdbyte	_var04, _var02
2c5fc     2E 06 0E F2 | 	cmp	_var04, #46 wz
2c600     D8 00 90 5D |  if_ne	jmp	#LR__4142
2c604     01 02 06 F1 | 	add	_var02, #1
2c608     01 07 C2 FA | 	rdbyte	_var04, _var02
2c60c     01 02 86 F1 | 	sub	_var02, #1
2c610     2F 06 0E F2 | 	cmp	_var04, #47 wz
2c614     18 00 90 AD |  if_e	jmp	#LR__4131
2c618     01 02 06 F1 | 	add	_var02, #1
2c61c     01 09 C2 FA | 	rdbyte	_var05, _var02
2c620     01 02 86 F1 | 	sub	_var02, #1
2c624     04 0B 02 F6 | 	mov	_var06, _var05
2c628     07 0A 4E F7 | 	zerox	_var06, #7 wz
2c62c     10 00 90 5D |  if_ne	jmp	#LR__4132
2c630                 | LR__4131
2c630     01 0D 02 F6 | 	mov	_var07, _var02
2c634     01 0C 06 F1 | 	add	_var07, #1
2c638     06 03 02 F6 | 	mov	_var02, _var07
2c63c     E0 00 90 FD | 	jmp	#LR__4146
2c640                 | LR__4132
2c640     01 02 06 F1 | 	add	_var02, #1
2c644     01 0D C2 FA | 	rdbyte	_var07, _var02
2c648     01 02 86 F1 | 	sub	_var02, #1
2c64c     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
2c650     2E 06 0E F2 | 	cmp	_var04, #46 wz
2c654     84 00 90 5D |  if_ne	jmp	#LR__4141
2c658     02 02 06 F1 | 	add	_var02, #2
2c65c     01 0D C2 FA | 	rdbyte	_var07, _var02
2c660     02 02 86 F1 | 	sub	_var02, #2
2c664     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
2c668     2F 06 0E F2 | 	cmp	_var04, #47 wz
2c66c     18 00 90 AD |  if_e	jmp	#LR__4133
2c670     02 02 06 F1 | 	add	_var02, #2
2c674     01 09 C2 FA | 	rdbyte	_var05, _var02
2c678     02 02 86 F1 | 	sub	_var02, #2
2c67c     04 0B 02 F6 | 	mov	_var06, _var05
2c680     07 0A 4E F7 | 	zerox	_var06, #7 wz
2c684     54 00 90 5D |  if_ne	jmp	#LR__4140
2c688                 | LR__4133
2c688     02 02 06 F1 | 	add	_var02, #2
2c68c     09 05 5A F2 | 	cmps	_var03, arg01 wcz
2c690     40 00 90 ED |  if_be	jmp	#LR__4139
2c694     02 0F 02 F6 | 	mov	_var08, _var03
2c698     01 0E 86 F1 | 	sub	_var08, #1
2c69c                 | LR__4134
2c69c     07 07 C2 FA | 	rdbyte	_var04, _var08
2c6a0     2F 06 0E F2 | 	cmp	_var04, #47 wz
2c6a4     0C 00 90 5D |  if_ne	jmp	#LR__4135
2c6a8     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
2c6ac     01 0E 86 11 |  if_a	sub	_var08, #1
2c6b0     E8 FF 9F 1D |  if_a	jmp	#LR__4134
2c6b4                 | LR__4135
2c6b4     97 0C 48 FB | 	callpa	#(@LR__4137-@LR__4136)>>2,fcache_load_ptr_
2c6b8                 | LR__4136
2c6b8     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
2c6bc     10 00 90 ED |  if_be	jmp	#LR__4138
2c6c0     07 07 C2 FA | 	rdbyte	_var04, _var08
2c6c4     2F 06 0E F2 | 	cmp	_var04, #47 wz
2c6c8     01 0E 86 51 |  if_ne	sub	_var08, #1
2c6cc     E8 FF 9F 5D |  if_ne	jmp	#LR__4136
2c6d0                 | LR__4137
2c6d0                 | LR__4138
2c6d0     07 05 02 F6 | 	mov	_var03, _var08
2c6d4                 | LR__4139
2c6d4     01 00 06 F6 | 	mov	_var01, #1
2c6d8     44 00 90 FD | 	jmp	#LR__4146
2c6dc                 | LR__4140
2c6dc                 | LR__4141
2c6dc                 | LR__4142
2c6dc     97 18 48 FB | 	callpa	#(@LR__4144-@LR__4143)>>2,fcache_load_ptr_
2c6e0                 | LR__4143
2c6e0     01 07 CA FA | 	rdbyte	_var04, _var02 wz
2c6e4     01 0D C2 5A |  if_ne	rdbyte	_var07, _var02
2c6e8     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
2c6ec     20 00 90 AD |  if_e	jmp	#LR__4145
2c6f0     01 0B 02 F6 | 	mov	_var06, _var02
2c6f4     01 09 02 F6 | 	mov	_var05, _var02
2c6f8     01 08 06 F1 | 	add	_var05, #1
2c6fc     05 11 C2 FA | 	rdbyte	_var09, _var06
2c700     04 03 02 F6 | 	mov	_var02, _var05
2c704     02 11 42 FC | 	wrbyte	_var09, _var03
2c708     01 04 06 F1 | 	add	_var03, #1
2c70c     D0 FF 9F FD | 	jmp	#LR__4143
2c710                 | LR__4144
2c710                 | LR__4145
2c710     01 07 C2 FA | 	rdbyte	_var04, _var02
2c714     2F 06 0E F2 | 	cmp	_var04, #47 wz
2c718     C0 FE 9F 5D |  if_ne	jmp	#LR__4130
2c71c     01 00 06 F6 | 	mov	_var01, #1
2c720                 | LR__4146
2c720     97 0C 48 FB | 	callpa	#(@LR__4148-@LR__4147)>>2,fcache_load_ptr_
2c724                 | LR__4147
2c724     01 07 C2 FA | 	rdbyte	_var04, _var02
2c728     2F 06 0E F2 | 	cmp	_var04, #47 wz
2c72c     01 0D 02 A6 |  if_e	mov	_var07, _var02
2c730     01 0C 06 A1 |  if_e	add	_var07, #1
2c734     06 03 02 A6 |  if_e	mov	_var02, _var07
2c738     E8 FF 9F AD |  if_e	jmp	#LR__4147
2c73c                 | LR__4148
2c73c     9C FE 9F FD | 	jmp	#LR__4130
2c740                 | LR__4149
2c740     02 01 48 FC | 	wrbyte	#0, _var03
2c744                 | __system___normalizeName_ret
2c744     2D 00 64 FD | 	ret
2c748                 | 
2c748                 | __system___strrev
2c748     09 01 CA FA | 	rdbyte	_var01, arg01 wz
2c74c     3C 00 90 AD |  if_e	jmp	#__system___strrev_ret
2c750     09 03 02 F6 | 	mov	_var02, arg01
2c754     97 1A 48 FB | 	callpa	#(@LR__4152-@LR__4150)>>2,fcache_load_ptr_
2c758                 | LR__4150
2c758     01 01 CA FA | 	rdbyte	_var01, _var02 wz
2c75c     01 02 06 51 |  if_ne	add	_var02, #1
2c760     F4 FF 9F 5D |  if_ne	jmp	#LR__4150
2c764     01 02 86 F1 | 	sub	_var02, #1
2c768                 | LR__4151
2c768     09 03 5A F2 | 	cmps	_var02, arg01 wcz
2c76c     1C 00 90 ED |  if_be	jmp	#LR__4153
2c770     09 01 C2 FA | 	rdbyte	_var01, arg01
2c774     01 05 C2 FA | 	rdbyte	_var03, _var02
2c778     09 05 42 FC | 	wrbyte	_var03, arg01
2c77c     01 01 42 FC | 	wrbyte	_var01, _var02
2c780     01 12 06 F1 | 	add	arg01, #1
2c784     01 02 86 F1 | 	sub	_var02, #1
2c788     DC FF 9F FD | 	jmp	#LR__4151
2c78c                 | LR__4152
2c78c                 | LR__4153
2c78c                 | __system___strrev_ret
2c78c     2D 00 64 FD | 	ret
2c790                 | 
2c790                 | __system___fmtpad
2c790     06 4A 05 F6 | 	mov	COUNT_, #6
2c794     A8 00 A0 FD | 	call	#pushregs_
2c798     09 27 02 F6 | 	mov	local01, arg01
2c79c     0A 29 02 F6 | 	mov	local02, arg02
2c7a0     0B 2B 02 F6 | 	mov	local03, arg03
2c7a4     14 13 EA F8 | 	getbyte	arg01, local02, #1
2c7a8     16 28 46 F0 | 	shr	local02, #22
2c7ac     03 28 0E F5 | 	and	local02, #3 wz
2c7b0     00 2C 06 F6 | 	mov	local04, #0
2c7b4     01 28 06 A6 |  if_e	mov	local02, #1
2c7b8     0C 29 CA F7 | 	test	local02, arg04 wz
2c7bc     00 FA 05 A6 |  if_e	mov	result1, #0
2c7c0     88 00 90 AD |  if_e	jmp	#LR__4163
2c7c4     09 2B C2 F2 | 	subr	local03, arg01
2c7c8     01 2A 56 F2 | 	cmps	local03, #1 wc
2c7cc     00 FA 05 C6 |  if_b	mov	result1, #0
2c7d0     78 00 90 CD |  if_b	jmp	#LR__4163
2c7d4     03 28 0E F2 | 	cmp	local02, #3 wz
2c7d8     18 00 90 5D |  if_ne	jmp	#LR__4160
2c7dc     01 18 0E F2 | 	cmp	arg04, #1 wz
2c7e0     6E 28 62 FD | 	wrz	local02
2c7e4     14 2B 02 F1 | 	add	local03, local02
2c7e8     15 2B 52 F6 | 	abs	local03, local03 wc
2c7ec     01 2A 46 F0 | 	shr	local03, #1
2c7f0     15 2B 82 F6 | 	negc	local03, local03
2c7f4                 | LR__4160
2c7f4     01 2A 56 F2 | 	cmps	local03, #1 wc
2c7f8     4C 00 90 CD |  if_b	jmp	#LR__4162
2c7fc     15 2F 02 F6 | 	mov	local05, local03
2c800                 | LR__4161
2c800     13 29 02 F6 | 	mov	local02, local01
2c804     13 31 02 F6 | 	mov	local06, local01
2c808     13 28 46 F7 | 	zerox	local02, #19
2c80c     14 30 46 F0 | 	shr	local06, #20
2c810     02 30 66 F0 | 	shl	local06, #2
2c814     ED 30 02 F1 | 	add	local06, __methods__
2c818     18 31 02 FB | 	rdlong	local06, local06
2c81c     20 12 06 F6 | 	mov	arg01, #32
2c820     F2 2A 02 F6 | 	mov	local03, objptr
2c824     14 E5 01 F6 | 	mov	objptr, local02
2c828     2D 30 62 FD | 	call	local06
2c82c     15 E5 01 F6 | 	mov	objptr, local03
2c830     FD 30 02 F6 | 	mov	local06, result1
2c834     00 30 56 F2 | 	cmps	local06, #0 wc
2c838     18 FB 01 C6 |  if_b	mov	result1, local06
2c83c     0C 00 90 CD |  if_b	jmp	#LR__4163
2c840     18 2D 02 F1 | 	add	local04, local06
2c844     EE 2F 6E FB | 	djnz	local05, #LR__4161
2c848                 | LR__4162
2c848     16 FB 01 F6 | 	mov	result1, local04
2c84c                 | LR__4163
2c84c     A7 F0 03 F6 | 	mov	ptra, fp
2c850     B2 00 A0 FD | 	call	#popregs_
2c854                 | __system___fmtpad_ret
2c854     2D 00 64 FD | 	ret
2c858                 | 
2c858                 | __system___uitoa
2c858     04 4A 05 F6 | 	mov	COUNT_, #4
2c85c     A8 00 A0 FD | 	call	#pushregs_
2c860     09 27 02 F6 | 	mov	local01, arg01
2c864     00 1A 4E F2 | 	cmps	arg05, #0 wz
2c868     13 1B 02 F6 | 	mov	arg05, local01
2c86c     00 28 06 F6 | 	mov	local02, #0
2c870     37 2A 06 56 |  if_ne	mov	local03, #55
2c874     57 2A 06 A6 |  if_e	mov	local03, #87
2c878                 | LR__4170
2c878     0B 15 12 FD | 	qdiv	arg02, arg03
2c87c     19 2C 62 FD | 	getqy	local04
2c880     0B 15 12 FD | 	qdiv	arg02, arg03
2c884     0A 2C 16 F2 | 	cmp	local04, #10 wc
2c888     30 2C 06 C1 |  if_b	add	local04, #48
2c88c     15 2D 02 31 |  if_ae	add	local04, local03
2c890     0D 2D 42 FC | 	wrbyte	local04, arg05
2c894     01 1A 06 F1 | 	add	arg05, #1
2c898     01 28 06 F1 | 	add	local02, #1
2c89c     18 14 62 FD | 	getqx	arg02
2c8a0     00 14 0E F2 | 	cmp	arg02, #0 wz
2c8a4     D0 FF 9F 5D |  if_ne	jmp	#LR__4170
2c8a8     0C 29 12 F2 | 	cmp	local02, arg04 wc
2c8ac     C8 FF 9F CD |  if_b	jmp	#LR__4170
2c8b0     0D 01 48 FC | 	wrbyte	#0, arg05
2c8b4     13 13 02 F6 | 	mov	arg01, local01
2c8b8     8C FE BF FD | 	call	#__system___strrev
2c8bc     14 FB 01 F6 | 	mov	result1, local02
2c8c0     A7 F0 03 F6 | 	mov	ptra, fp
2c8c4     B2 00 A0 FD | 	call	#popregs_
2c8c8                 | __system___uitoa_ret
2c8c8     2D 00 64 FD | 	ret
2c8cc                 | 
2c8cc                 | __system__disassemble_0569
2c8cc     10 4A 05 F6 | 	mov	COUNT_, #16
2c8d0     A8 00 A0 FD | 	call	#pushregs_
2c8d4     09 27 02 F6 | 	mov	local01, arg01
2c8d8     0A 29 02 F6 | 	mov	local02, arg02
2c8dc     0B 2B 02 F6 | 	mov	local03, arg03
2c8e0     0C 2D 02 F6 | 	mov	local04, arg04
2c8e4     0D 2F 02 F6 | 	mov	local05, arg05
2c8e8     17 13 52 F6 | 	abs	arg01, local05 wc
2c8ec     1F 30 C6 C9 |  if_b	decod	local06, #31
2c8f0     00 30 06 36 |  if_ae	mov	local06, #0
2c8f4     CC CF BF FD | 	call	#__system___float_fromuns
2c8f8     18 FB 61 F5 | 	xor	result1, local06
2c8fc     FD 32 02 F6 | 	mov	local07, result1
2c900     00 34 06 F6 | 	mov	local08, #0
2c904     13 13 02 F6 | 	mov	arg01, local01
2c908     00 14 06 F6 | 	mov	arg02, #0
2c90c     01 16 06 F6 | 	mov	arg03, #1
2c910     E8 D7 BF FD | 	call	#__system___float_cmp
2c914     00 FA 0D F2 | 	cmp	result1, #0 wz
2c918     00 36 06 A6 |  if_e	mov	local09, #0
2c91c     14 01 68 AC |  if_e	wrlong	#0, local02
2c920     15 37 62 AC |  if_e	wrlong	local09, local03
2c924     8C 01 90 AD |  if_e	jmp	#LR__4192
2c928     13 13 02 F6 | 	mov	arg01, local01
2c92c     BC DC BF FD | 	call	#__system____builtin_ilogb
2c930     FD 38 02 F6 | 	mov	local10, result1
2c934     0A 2E 0E F2 | 	cmp	local05, #10 wz
2c938     24 00 90 5D |  if_ne	jmp	#LR__4180
2c93c     1C 37 02 F6 | 	mov	local09, local10
2c940     01 36 66 F0 | 	shl	local09, #1
2c944     1C 37 02 F1 | 	add	local09, local10
2c948     1B 39 52 F6 | 	abs	local10, local09 wc
2c94c     0A 38 16 FD | 	qdiv	local10, #10
2c950     09 3A 06 F6 | 	mov	local11, #9
2c954     18 38 62 FD | 	getqx	local10
2c958     1C 39 82 F6 | 	negc	local10, local10
2c95c     04 00 90 FD | 	jmp	#LR__4181
2c960                 | LR__4180
2c960     18 3A 06 F6 | 	mov	local11, #24
2c964                 | LR__4181
2c964                 | LR__4182
2c964     08 34 56 F2 | 	cmps	local08, #8 wc
2c968     01 34 06 F1 | 	add	local08, #1
2c96c     60 00 90 3D |  if_ae	jmp	#LR__4183
2c970     00 C0 1F FF 
2c974     00 12 06 F6 | 	mov	arg01, ##1065353216
2c978     19 15 02 F6 | 	mov	arg02, local07
2c97c     1C 17 02 F6 | 	mov	arg03, local10
2c980     4C E3 BF FD | 	call	#__system___float_pow_n
2c984     FD 14 02 F6 | 	mov	arg02, result1
2c988     13 13 02 F6 | 	mov	arg01, local01
2c98c     3C D5 BF FD | 	call	#__system___float_div
2c990     FD 3C 02 F6 | 	mov	local12, result1
2c994     1E 13 02 F6 | 	mov	arg01, local12
2c998     00 C0 1F FF 
2c99c     00 14 06 F6 | 	mov	arg02, ##1065353216
2c9a0     01 16 06 F6 | 	mov	arg03, #1
2c9a4     54 D7 BF FD | 	call	#__system___float_cmp
2c9a8     00 FA 55 F2 | 	cmps	result1, #0 wc
2c9ac     01 38 86 C1 |  if_b	sub	local10, #1
2c9b0     B0 FF 9F CD |  if_b	jmp	#LR__4182
2c9b4     19 15 02 F6 | 	mov	arg02, local07
2c9b8     1E 13 02 F6 | 	mov	arg01, local12
2c9bc     01 16 66 F6 | 	neg	arg03, #1
2c9c0     38 D7 BF FD | 	call	#__system___float_cmp
2c9c4     00 FA 55 F2 | 	cmps	result1, #0 wc
2c9c8     01 38 06 31 |  if_ae	add	local10, #1
2c9cc     94 FF 9F 3D |  if_ae	jmp	#LR__4182
2c9d0                 | LR__4183
2c9d0     1E 13 02 F6 | 	mov	arg01, local12
2c9d4     14 DC BF FD | 	call	#__system____builtin_ilogb
2c9d8     FD 3E 02 F6 | 	mov	local13, result1
2c9dc     1E 41 02 F6 | 	mov	local14, local12
2c9e0     17 41 06 F4 | 	bitl	local14, #279
2c9e4     17 40 26 F4 | 	bith	local14, #23
2c9e8     1F 41 62 F0 | 	shl	local14, local13
2c9ec     02 2E 0E F2 | 	cmp	local05, #2 wz
2c9f0     02 2C 66 A0 |  if_e	shl	local04, #2
2c9f4     00 42 06 F6 | 	mov	local15, #0
2c9f8     00 2C 56 F2 | 	cmps	local04, #0 wc
2c9fc     10 00 90 3D |  if_ae	jmp	#LR__4184
2ca00     1C 2D C2 F2 | 	subr	local04, local10
2ca04     00 2C 56 F2 | 	cmps	local04, #0 wc
2ca08     A0 00 90 CD |  if_b	jmp	#LR__4191
2ca0c     04 00 90 FD | 	jmp	#LR__4185
2ca10                 | LR__4184
2ca10     01 2C 06 F1 | 	add	local04, #1
2ca14                 | LR__4185
2ca14     1D 2D 7A F3 | 	fles	local04, local11 wcz
2ca18     01 44 06 F6 | 	mov	local16, #1
2ca1c     97 22 48 FB | 	callpa	#(@LR__4187-@LR__4186)>>2,fcache_load_ptr_
2ca20                 | LR__4186
2ca20     00 40 00 FF 
2ca24     00 42 16 F2 | 	cmp	local15, ##8388608 wc
2ca28     38 00 90 3D |  if_ae	jmp	#LR__4188
2ca2c     01 2C 56 F2 | 	cmps	local04, #1 wc
2ca30     01 2C 86 F1 | 	sub	local04, #1
2ca34     2C 00 90 CD |  if_b	jmp	#LR__4188
2ca38     17 43 02 FD | 	qmul	local15, local05
2ca3c     20 3F 02 F6 | 	mov	local13, local14
2ca40     17 3E 46 F0 | 	shr	local13, #23
2ca44     17 41 06 F4 | 	bitl	local14, #279
2ca48     18 42 62 FD | 	getqx	local15
2ca4c     17 45 02 FD | 	qmul	local16, local05
2ca50     18 44 62 FD | 	getqx	local16
2ca54     17 41 02 FD | 	qmul	local14, local05
2ca58     1F 43 02 F1 | 	add	local15, local13
2ca5c     18 40 62 FD | 	getqx	local14
2ca60     BC FF 9F FD | 	jmp	#LR__4186
2ca64                 | LR__4187
2ca64                 | LR__4188
2ca64     17 37 02 F6 | 	mov	local09, local05
2ca68     17 36 66 F0 | 	shl	local09, #23
2ca6c     1B 3F 52 F6 | 	abs	local13, local09 wc
2ca70     01 3E 46 F0 | 	shr	local13, #1
2ca74     1F 3F 82 F6 | 	negc	local13, local13
2ca78     1F 41 1A F2 | 	cmp	local14, local13 wcz
2ca7c     20 00 90 1D |  if_a	jmp	#LR__4189
2ca80     17 2E 66 F0 | 	shl	local05, #23
2ca84     17 3F 52 F6 | 	abs	local13, local05 wc
2ca88     01 3E 46 F0 | 	shr	local13, #1
2ca8c     1F 3F 82 F6 | 	negc	local13, local13
2ca90     1F 41 0A F2 | 	cmp	local14, local13 wz
2ca94     14 00 90 5D |  if_ne	jmp	#LR__4190
2ca98     01 42 CE F7 | 	test	local15, #1 wz
2ca9c     0C 00 90 AD |  if_e	jmp	#LR__4190
2caa0                 | LR__4189
2caa0     01 42 06 F1 | 	add	local15, #1
2caa4     22 43 0A F2 | 	cmp	local15, local16 wz
2caa8     01 38 06 A1 |  if_e	add	local10, #1
2caac                 | LR__4190
2caac                 | LR__4191
2caac     14 43 62 FC | 	wrlong	local15, local02
2cab0     15 39 62 FC | 	wrlong	local10, local03
2cab4                 | LR__4192
2cab4     A7 F0 03 F6 | 	mov	ptra, fp
2cab8     B2 00 A0 FD | 	call	#popregs_
2cabc                 | __system__disassemble_0569_ret
2cabc     2D 00 64 FD | 	ret
2cac0                 | 
2cac0                 | __system__emitsign_0571
2cac0     00 FA 05 F6 | 	mov	result1, #0
2cac4     00 14 0E F2 | 	cmp	arg02, #0 wz
2cac8     09 01 02 56 |  if_ne	mov	_var01, arg01
2cacc     01 12 06 51 |  if_ne	add	arg01, #1
2cad0     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
2cad4     01 FA 05 56 |  if_ne	mov	result1, #1
2cad8     00 16 0E F2 | 	cmp	arg03, #0 wz
2cadc     09 61 48 5C |  if_ne	wrbyte	#48, arg01
2cae0     01 12 06 51 |  if_ne	add	arg01, #1
2cae4     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
2cae8     02 FA 05 51 |  if_ne	add	result1, #2
2caec                 | __system__emitsign_0571_ret
2caec     2D 00 64 FD | 	ret
2caf0                 | 
2caf0                 | __system___gettxfunc
2caf0     01 4A 05 F6 | 	mov	COUNT_, #1
2caf4     A8 00 A0 FD | 	call	#pushregs_
2caf8     A0 F8 BF FD | 	call	#__system____getftab
2cafc     FD 26 0A F6 | 	mov	local01, result1 wz
2cb00     10 00 90 AD |  if_e	jmp	#LR__4200
2cb04     08 26 06 F1 | 	add	local01, #8
2cb08     13 15 0A FB | 	rdlong	arg02, local01 wz
2cb0c     08 26 86 F1 | 	sub	local01, #8
2cb10     08 00 90 5D |  if_ne	jmp	#LR__4201
2cb14                 | LR__4200
2cb14     00 FA 05 F6 | 	mov	result1, #0
2cb18     0C 00 90 FD | 	jmp	#LR__4202
2cb1c                 | LR__4201
2cb1c     00 48 05 FF 
2cb20     00 26 46 F5 | 	or	local01, ##177209344
2cb24     13 FB 01 F6 | 	mov	result1, local01
2cb28                 | LR__4202
2cb28     A7 F0 03 F6 | 	mov	ptra, fp
2cb2c     B2 00 A0 FD | 	call	#popregs_
2cb30                 | __system___gettxfunc_ret
2cb30     2D 00 64 FD | 	ret
2cb34                 | 
2cb34                 | __system___getrxfunc
2cb34     01 4A 05 F6 | 	mov	COUNT_, #1
2cb38     A8 00 A0 FD | 	call	#pushregs_
2cb3c     5C F8 BF FD | 	call	#__system____getftab
2cb40     FD 26 0A F6 | 	mov	local01, result1 wz
2cb44     10 00 90 AD |  if_e	jmp	#LR__4210
2cb48     08 26 06 F1 | 	add	local01, #8
2cb4c     13 15 0A FB | 	rdlong	arg02, local01 wz
2cb50     08 26 86 F1 | 	sub	local01, #8
2cb54     08 00 90 5D |  if_ne	jmp	#LR__4211
2cb58                 | LR__4210
2cb58     00 FA 05 F6 | 	mov	result1, #0
2cb5c     0C 00 90 FD | 	jmp	#LR__4212
2cb60                 | LR__4211
2cb60     00 50 05 FF 
2cb64     00 26 46 F5 | 	or	local01, ##178257920
2cb68     13 FB 01 F6 | 	mov	result1, local01
2cb6c                 | LR__4212
2cb6c     A7 F0 03 F6 | 	mov	ptra, fp
2cb70     B2 00 A0 FD | 	call	#popregs_
2cb74                 | __system___getrxfunc_ret
2cb74     2D 00 64 FD | 	ret
2cb78                 | 
2cb78                 | __system___getiolock_0611
2cb78     01 4A 05 F6 | 	mov	COUNT_, #1
2cb7c     A8 00 A0 FD | 	call	#pushregs_
2cb80     18 F8 BF FD | 	call	#__system____getftab
2cb84     FD 26 0A F6 | 	mov	local01, result1 wz
2cb88     10 00 90 AD |  if_e	jmp	#LR__4220
2cb8c     08 26 06 F1 | 	add	local01, #8
2cb90     13 FB 09 FB | 	rdlong	result1, local01 wz
2cb94     08 26 86 F1 | 	sub	local01, #8
2cb98     18 00 90 5D |  if_ne	jmp	#LR__4221
2cb9c                 | LR__4220
2cb9c     01 00 00 FF 
2cba0     D4 E6 05 F1 | 	add	ptr___system__dat__, ##724
2cba4     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
2cba8     01 00 00 FF 
2cbac     D4 E6 85 F1 | 	sub	ptr___system__dat__, ##724
2cbb0     08 00 90 FD | 	jmp	#LR__4222
2cbb4                 | LR__4221
2cbb4     0C 26 06 F1 | 	add	local01, #12
2cbb8     13 FB 01 F6 | 	mov	result1, local01
2cbbc                 | LR__4222
2cbbc     A7 F0 03 F6 | 	mov	ptra, fp
2cbc0     B2 00 A0 FD | 	call	#popregs_
2cbc4                 | __system___getiolock_0611_ret
2cbc4     2D 00 64 FD | 	ret
2cbc8                 | 
2cbc8                 | __system____ScanForChar
2cbc8     09 01 02 F6 | 	mov	_var01, arg01
2cbcc     09 03 02 F6 | 	mov	_var02, arg01
2cbd0     97 06 48 FB | 	callpa	#(@LR__4231-@LR__4230)>>2,fcache_load_ptr_
2cbd4                 | LR__4230
2cbd4     01 FB C9 FA | 	rdbyte	result1, _var02 wz
2cbd8     01 02 06 51 |  if_ne	add	_var02, #1
2cbdc     F4 FF 9F 5D |  if_ne	jmp	#LR__4230
2cbe0                 | LR__4231
2cbe0     09 03 82 F1 | 	sub	_var02, arg01
2cbe4     01 FB 01 F6 | 	mov	result1, _var02
2cbe8     FD 12 0A F6 | 	mov	arg01, result1 wz
2cbec     00 FA 05 A6 |  if_e	mov	result1, #0
2cbf0     B8 00 90 AD |  if_e	jmp	#LR__4238
2cbf4     0A 05 02 F6 | 	mov	_var03, arg02
2cbf8     07 04 4E F7 | 	zerox	_var03, #7 wz
2cbfc     00 FA 05 A6 |  if_e	mov	result1, #0
2cc00     A8 00 90 AD |  if_e	jmp	#LR__4238
2cc04     01 16 16 F2 | 	cmp	arg03, #1 wc
2cc08     00 18 0E C2 |  if_b	cmp	arg04, #0 wz
2cc0c     01 16 06 86 |  if_c_and_z	mov	arg03, #1
2cc10     00 FA 05 46 |  if_c_and_nz	mov	result1, #0
2cc14     94 00 90 4D |  if_c_and_nz	jmp	#LR__4238
2cc18     09 17 1A F2 | 	cmp	arg03, arg01 wcz
2cc1c     10 00 90 ED |  if_be	jmp	#LR__4232
2cc20     00 18 0E F2 | 	cmp	arg04, #0 wz
2cc24     00 FA 05 A6 |  if_e	mov	result1, #0
2cc28     80 00 90 AD |  if_e	jmp	#LR__4238
2cc2c     09 17 02 F6 | 	mov	arg03, arg01
2cc30                 | LR__4232
2cc30     01 16 86 F1 | 	sub	arg03, #1
2cc34     00 18 0E F2 | 	cmp	arg04, #0 wz
2cc38     38 00 90 5D |  if_ne	jmp	#LR__4234
2cc3c     0B 07 02 F6 | 	mov	_var04, arg03
2cc40     09 09 02 F6 | 	mov	_var05, arg01
2cc44                 | LR__4233
2cc44     04 07 12 F2 | 	cmp	_var04, _var05 wc
2cc48     5C 00 90 3D |  if_ae	jmp	#LR__4237
2cc4c     03 05 02 F6 | 	mov	_var03, _var04
2cc50     00 05 02 F1 | 	add	_var03, _var01
2cc54     02 05 C2 FA | 	rdbyte	_var03, _var03
2cc58     0A 19 E2 F8 | 	getbyte	arg04, arg02, #0
2cc5c     0C 05 0A F2 | 	cmp	_var03, arg04 wz
2cc60     01 06 06 A1 |  if_e	add	_var04, #1
2cc64     03 FB 01 A6 |  if_e	mov	result1, _var04
2cc68     40 00 90 AD |  if_e	jmp	#LR__4238
2cc6c     01 06 06 F1 | 	add	_var04, #1
2cc70     D0 FF 9F FD | 	jmp	#LR__4233
2cc74                 | LR__4234
2cc74     0B 07 02 F6 | 	mov	_var04, arg03
2cc78                 | LR__4235
2cc78     0B 07 1A F2 | 	cmp	_var04, arg03 wcz
2cc7c     28 00 90 1D |  if_a	jmp	#LR__4236
2cc80     03 09 02 F6 | 	mov	_var05, _var04
2cc84     00 09 02 F1 | 	add	_var05, _var01
2cc88     04 05 C2 FA | 	rdbyte	_var03, _var05
2cc8c     0A 09 E2 F8 | 	getbyte	_var05, arg02, #0
2cc90     04 05 0A F2 | 	cmp	_var03, _var05 wz
2cc94     01 06 06 A1 |  if_e	add	_var04, #1
2cc98     03 FB 01 A6 |  if_e	mov	result1, _var04
2cc9c     0C 00 90 AD |  if_e	jmp	#LR__4238
2cca0     01 06 86 F1 | 	sub	_var04, #1
2cca4     D0 FF 9F FD | 	jmp	#LR__4235
2cca8                 | LR__4236
2cca8                 | LR__4237
2cca8     00 FA 05 F6 | 	mov	result1, #0
2ccac                 | LR__4238
2ccac                 | __system____ScanForChar_ret
2ccac     2D 00 64 FD | 	ret
2ccb0                 | 
2ccb0                 | __system___basic_dir
2ccb0     05 4A 05 F6 | 	mov	COUNT_, #5
2ccb4     A8 00 A0 FD | 	call	#pushregs_
2ccb8     4C F0 07 F1 | 	add	ptra, #76
2ccbc     04 4E 05 F1 | 	add	fp, #4
2ccc0     A7 12 62 FC | 	wrlong	arg01, fp
2ccc4     04 4E 05 F1 | 	add	fp, #4
2ccc8     A7 14 62 FC | 	wrlong	arg02, fp
2cccc     04 4E 85 F1 | 	sub	fp, #4
2ccd0     A7 14 0A FB | 	rdlong	arg02, fp wz
2ccd4     04 4E 85 F1 | 	sub	fp, #4
2ccd8     04 4E 05 51 |  if_ne	add	fp, #4
2ccdc     A7 26 02 5B |  if_ne	rdlong	local01, fp
2cce0     04 4E 85 51 |  if_ne	sub	fp, #4
2cce4     13 29 CA 5A |  if_ne	rdbyte	local02, local01 wz
2cce8     70 00 90 AD |  if_e	jmp	#LR__4240
2ccec     03 00 00 FF 
2ccf0     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2ccf4     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2ccf8     03 00 00 FF 
2ccfc     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2cd00     03 00 00 5F 
2cd04     2C E7 05 51 |  if_ne	add	ptr___system__dat__, ##1836
2cd08     F3 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
2cd0c     03 00 00 5F 
2cd10     2C E7 85 51 |  if_ne	sub	ptr___system__dat__, ##1836
2cd14     D8 E9 BF 5D |  if_ne	call	#__system__closedir
2cd18     B4 01 00 FF 
2cd1c     C4 13 06 F6 | 	mov	arg01, ##@LR__5408
2cd20     E0 E8 BF FD | 	call	#__system__opendir
2cd24     03 00 00 FF 
2cd28     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2cd2c     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
2cd30     08 4E 05 F1 | 	add	fp, #8
2cd34     A7 28 02 FB | 	rdlong	local02, fp
2cd38     04 E6 05 F1 | 	add	ptr___system__dat__, #4
2cd3c     F3 28 62 FC | 	wrlong	local02, ptr___system__dat__
2cd40     04 4E 85 F1 | 	sub	fp, #4
2cd44     A7 28 02 FB | 	rdlong	local02, fp
2cd48     04 4E 85 F1 | 	sub	fp, #4
2cd4c     04 E6 05 F1 | 	add	ptr___system__dat__, #4
2cd50     F3 28 62 FC | 	wrlong	local02, ptr___system__dat__
2cd54     03 00 00 FF 
2cd58     34 E7 85 F1 | 	sub	ptr___system__dat__, ##1844
2cd5c                 | LR__4240
2cd5c     03 00 00 FF 
2cd60     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2cd64     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2cd68     03 00 00 FF 
2cd6c     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2cd70     B4 01 00 AF 
2cd74     C6 FB 05 A6 |  if_e	mov	result1, ##@LR__5409
2cd78     84 02 90 AD |  if_e	jmp	#LR__4253
2cd7c                 | LR__4241
2cd7c     03 00 00 FF 
2cd80     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2cd84     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
2cd88     03 00 00 FF 
2cd8c     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2cd90     D0 E9 BF FD | 	call	#__system__readdir
2cd94     0C 4E 05 F1 | 	add	fp, #12
2cd98     A7 FA 61 FC | 	wrlong	result1, fp
2cd9c     0C 4E 85 F1 | 	sub	fp, #12
2cda0     00 FA 0D F2 | 	cmp	result1, #0 wz
2cda4     38 00 90 5D |  if_ne	jmp	#LR__4242
2cda8     03 00 00 FF 
2cdac     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2cdb0     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
2cdb4     03 00 00 FF 
2cdb8     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2cdbc     30 E9 BF FD | 	call	#__system__closedir
2cdc0     03 00 00 FF 
2cdc4     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2cdc8     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
2cdcc     03 00 00 FF 
2cdd0     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2cdd4     B4 01 00 FF 
2cdd8     C8 FB 05 F6 | 	mov	result1, ##@LR__5410
2cddc     20 02 90 FD | 	jmp	#LR__4253
2cde0                 | LR__4242
2cde0     0C 4E 05 F1 | 	add	fp, #12
2cde4     A7 12 02 FB | 	rdlong	arg01, fp
2cde8     0C 4E 85 F1 | 	sub	fp, #12
2cdec     03 00 00 FF 
2cdf0     34 E7 05 F1 | 	add	ptr___system__dat__, ##1844
2cdf4     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
2cdf8     03 00 00 FF 
2cdfc     34 E7 85 F1 | 	sub	ptr___system__dat__, ##1844
2ce00     10 09 B0 FD | 	call	#__system___pat_match
2ce04     00 FA 0D F2 | 	cmp	result1, #0 wz
2ce08     70 FF 9F AD |  if_e	jmp	#LR__4241
2ce0c     03 00 00 FF 
2ce10     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
2ce14     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2ce18     03 00 00 FF 
2ce1c     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
2ce20     78 01 90 AD |  if_e	jmp	#LR__4249
2ce24     0C 4E 05 F1 | 	add	fp, #12
2ce28     A7 12 02 FB | 	rdlong	arg01, fp
2ce2c     04 4E 05 F1 | 	add	fp, #4
2ce30     A7 14 02 F6 | 	mov	arg02, fp
2ce34     10 4E 85 F1 | 	sub	fp, #16
2ce38     2C F2 BF FD | 	call	#__system__stat
2ce3c     40 4E 05 F1 | 	add	fp, #64
2ce40     A7 FA 61 FC | 	wrlong	result1, fp
2ce44     40 4E 85 F1 | 	sub	fp, #64
2ce48     00 FA 0D F2 | 	cmp	result1, #0 wz
2ce4c     B4 01 00 5F 
2ce50     CA FB 05 56 |  if_ne	mov	result1, ##@LR__5411
2ce54     A8 01 90 5D |  if_ne	jmp	#LR__4253
2ce58     18 4E 05 F1 | 	add	fp, #24
2ce5c     A7 28 02 FB | 	rdlong	local02, fp
2ce60     78 00 00 FF 
2ce64     00 28 06 F5 | 	and	local02, ##61440
2ce68     2C 4E 05 F1 | 	add	fp, #44
2ce6c     A7 28 62 FC | 	wrlong	local02, fp
2ce70     38 4E 85 F1 | 	sub	fp, #56
2ce74     A7 28 02 FB | 	rdlong	local02, fp
2ce78     0C 4E 85 F1 | 	sub	fp, #12
2ce7c     14 29 C2 FA | 	rdbyte	local02, local02
2ce80     2E 28 0E F2 | 	cmp	local02, #46 wz
2ce84     08 4E 05 A1 |  if_e	add	fp, #8
2ce88     A7 04 68 AC |  if_e	wrlong	#2, fp
2ce8c     08 4E C5 F3 | 	sumz	fp, #8
2ce90     A7 00 68 5C |  if_ne	wrlong	#0, fp
2ce94     08 4E 85 51 |  if_ne	sub	fp, #8
2ce98     44 4E 05 F1 | 	add	fp, #68
2ce9c     A7 28 02 FB | 	rdlong	local02, fp
2cea0     44 4E 85 F1 | 	sub	fp, #68
2cea4     08 00 00 FF 
2cea8     00 28 0E F2 | 	cmp	local02, ##4096 wz
2ceac     18 00 90 5D |  if_ne	jmp	#LR__4243
2ceb0     08 4E 05 F1 | 	add	fp, #8
2ceb4     A7 28 02 FB | 	rdlong	local02, fp
2ceb8     10 28 46 F5 | 	or	local02, #16
2cebc     A7 28 62 FC | 	wrlong	local02, fp
2cec0     08 4E 85 F1 | 	sub	fp, #8
2cec4     AC 00 90 FD | 	jmp	#LR__4248
2cec8                 | LR__4243
2cec8     44 4E 05 F1 | 	add	fp, #68
2cecc     A7 28 02 FB | 	rdlong	local02, fp
2ced0     44 4E 85 F1 | 	sub	fp, #68
2ced4     10 00 00 FF 
2ced8     00 28 0E F2 | 	cmp	local02, ##8192 wz
2cedc     44 4E 05 51 |  if_ne	add	fp, #68
2cee0     A7 26 02 5B |  if_ne	rdlong	local01, fp
2cee4     44 4E 85 51 |  if_ne	sub	fp, #68
2cee8     18 00 00 5F 
2ceec     00 26 0E 52 |  if_ne	cmp	local01, ##12288 wz
2cef0     44 4E 05 51 |  if_ne	add	fp, #68
2cef4     13 2B 02 56 |  if_ne	mov	local03, local01
2cef8     44 4E 85 51 |  if_ne	sub	fp, #68
2cefc     20 00 00 5F 
2cf00     00 2A 0E 52 |  if_ne	cmp	local03, ##16384 wz
2cf04     18 00 90 5D |  if_ne	jmp	#LR__4244
2cf08     08 4E 05 F1 | 	add	fp, #8
2cf0c     A7 28 02 FB | 	rdlong	local02, fp
2cf10     04 28 46 F5 | 	or	local02, #4
2cf14     A7 28 62 FC | 	wrlong	local02, fp
2cf18     08 4E 85 F1 | 	sub	fp, #8
2cf1c     54 00 90 FD | 	jmp	#LR__4247
2cf20                 | LR__4244
2cf20     18 4E 05 F1 | 	add	fp, #24
2cf24     A7 28 02 FB | 	rdlong	local02, fp
2cf28     18 4E 85 F1 | 	sub	fp, #24
2cf2c     92 28 CE F7 | 	test	local02, #146 wz
2cf30     18 00 90 5D |  if_ne	jmp	#LR__4245
2cf34     08 4E 05 F1 | 	add	fp, #8
2cf38     A7 28 02 FB | 	rdlong	local02, fp
2cf3c     01 28 46 F5 | 	or	local02, #1
2cf40     A7 28 62 FC | 	wrlong	local02, fp
2cf44     08 4E 85 F1 | 	sub	fp, #8
2cf48     28 00 90 FD | 	jmp	#LR__4246
2cf4c                 | LR__4245
2cf4c     44 4E 05 F1 | 	add	fp, #68
2cf50     A7 2C 02 FB | 	rdlong	local04, fp
2cf54     44 4E 85 F1 | 	sub	fp, #68
2cf58     08 00 00 FF 
2cf5c     00 2C 0E F2 | 	cmp	local04, ##4096 wz
2cf60     08 4E 05 51 |  if_ne	add	fp, #8
2cf64     A7 2C 02 5B |  if_ne	rdlong	local04, fp
2cf68     20 2C 46 55 |  if_ne	or	local04, #32
2cf6c     A7 2C 62 5C |  if_ne	wrlong	local04, fp
2cf70     08 4E 85 51 |  if_ne	sub	fp, #8
2cf74                 | LR__4246
2cf74                 | LR__4247
2cf74                 | LR__4248
2cf74     08 4E 05 F1 | 	add	fp, #8
2cf78     A7 2C 02 FB | 	rdlong	local04, fp
2cf7c     08 4E 85 F1 | 	sub	fp, #8
2cf80     03 00 00 FF 
2cf84     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
2cf88     F3 26 02 FB | 	rdlong	local01, ptr___system__dat__
2cf8c     03 00 00 FF 
2cf90     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
2cf94     13 2D CA F7 | 	test	local04, local01 wz
2cf98     E0 FD 9F AD |  if_e	jmp	#LR__4241
2cf9c                 | LR__4249
2cf9c     0C 4E 05 F1 | 	add	fp, #12
2cfa0     A7 12 02 FB | 	rdlong	arg01, fp
2cfa4     0C 4E 85 F1 | 	sub	fp, #12
2cfa8     09 2F 02 F6 | 	mov	local05, arg01
2cfac     97 06 48 FB | 	callpa	#(@LR__4251-@LR__4250)>>2,fcache_load_ptr_
2cfb0                 | LR__4250
2cfb0     17 FB C9 FA | 	rdbyte	result1, local05 wz
2cfb4     01 2E 06 51 |  if_ne	add	local05, #1
2cfb8     F4 FF 9F 5D |  if_ne	jmp	#LR__4250
2cfbc                 | LR__4251
2cfbc     17 13 C2 F2 | 	subr	arg01, local05
2cfc0     01 12 06 F1 | 	add	arg01, #1
2cfc4     28 E0 BF FD | 	call	#__system___gc_alloc_managed
2cfc8     48 4E 05 F1 | 	add	fp, #72
2cfcc     A7 FA 61 FC | 	wrlong	result1, fp
2cfd0     48 4E 85 F1 | 	sub	fp, #72
2cfd4     00 FA 0D F2 | 	cmp	result1, #0 wz
2cfd8     18 00 90 AD |  if_e	jmp	#LR__4252
2cfdc     48 4E 05 F1 | 	add	fp, #72
2cfe0     A7 12 02 FB | 	rdlong	arg01, fp
2cfe4     3C 4E 85 F1 | 	sub	fp, #60
2cfe8     A7 14 02 FB | 	rdlong	arg02, fp
2cfec     0C 4E 85 F1 | 	sub	fp, #12
2cff0     10 9E BF FD | 	call	#__system____builtin_strcpy
2cff4                 | LR__4252
2cff4     48 4E 05 F1 | 	add	fp, #72
2cff8     A7 FA 01 FB | 	rdlong	result1, fp
2cffc     48 4E 85 F1 | 	sub	fp, #72
2d000                 | LR__4253
2d000     A7 F0 03 F6 | 	mov	ptra, fp
2d004     B2 00 A0 FD | 	call	#popregs_
2d008                 | __system___basic_dir_ret
2d008     2D 00 64 FD | 	ret
2d00c                 | 
2d00c                 | __system__pack_0683
2d00c     09 01 02 F6 | 	mov	_var01, arg01
2d010     7F 16 06 F1 | 	add	arg03, #127
2d014     04 18 CE F7 | 	test	arg04, #4 wz
2d018     10 00 90 AD |  if_e	jmp	#LR__4260
2d01c     00 00 0E F2 | 	cmp	_var01, #0 wz
2d020     16 00 C6 A9 |  if_e	decod	_var01, #22
2d024     F7 00 26 F4 | 	bith	_var01, #247
2d028     B4 00 90 FD | 	jmp	#LR__4269
2d02c                 | LR__4260
2d02c     02 18 CE F7 | 	test	arg04, #2 wz
2d030     00 C0 3F 5F 
2d034     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
2d038     00 14 06 56 |  if_ne	mov	arg02, #0
2d03c     A0 00 90 5D |  if_ne	jmp	#LR__4268
2d040     08 18 CE F7 | 	test	arg04, #8 wz
2d044     00 00 06 56 |  if_ne	mov	_var01, #0
2d048     94 00 90 5D |  if_ne	jmp	#LR__4267
2d04c     FF 16 56 F2 | 	cmps	arg03, #255 wc
2d050     00 C0 3F 3F 
2d054     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
2d058     00 14 06 36 |  if_ae	mov	arg02, #0
2d05c     80 00 90 3D |  if_ae	jmp	#LR__4266
2d060     01 16 56 F2 | 	cmps	arg03, #1 wc
2d064     6C 00 90 3D |  if_ae	jmp	#LR__4264
2d068     01 14 46 F0 | 	shr	arg02, #1
2d06c     00 03 02 F6 | 	mov	_var02, _var01
2d070     01 02 06 F5 | 	and	_var02, #1
2d074     1F 02 66 F0 | 	shl	_var02, #31
2d078     01 15 42 F5 | 	or	arg02, _var02
2d07c     01 00 46 F0 | 	shr	_var01, #1
2d080     97 1E 48 FB | 	callpa	#(@LR__4262-@LR__4261)>>2,fcache_load_ptr_
2d084                 | LR__4261
2d084     00 16 56 F2 | 	cmps	arg03, #0 wc
2d088     34 00 90 3D |  if_ae	jmp	#LR__4263
2d08c     00 00 0E F2 | 	cmp	_var01, #0 wz
2d090     2C 00 90 AD |  if_e	jmp	#LR__4263
2d094     0A 13 02 F6 | 	mov	arg01, arg02
2d098     01 12 06 F5 | 	and	arg01, #1
2d09c     01 16 06 F1 | 	add	arg03, #1
2d0a0     01 14 46 F0 | 	shr	arg02, #1
2d0a4     00 03 02 F6 | 	mov	_var02, _var01
2d0a8     01 02 06 F5 | 	and	_var02, #1
2d0ac     1F 02 66 F0 | 	shl	_var02, #31
2d0b0     01 15 42 F5 | 	or	arg02, _var02
2d0b4     09 15 42 F5 | 	or	arg02, arg01
2d0b8     01 00 46 F0 | 	shr	_var01, #1
2d0bc     C4 FF 9F FD | 	jmp	#LR__4261
2d0c0                 | LR__4262
2d0c0                 | LR__4263
2d0c0     00 16 56 F2 | 	cmps	arg03, #0 wc
2d0c4     18 00 90 3D |  if_ae	jmp	#LR__4265
2d0c8     00 14 0E F2 | 	cmp	arg02, #0 wz
2d0cc     6F 14 62 FD | 	wrnz	arg02
2d0d0     0C 00 90 FD | 	jmp	#LR__4265
2d0d4                 | LR__4264
2d0d4     17 01 06 F4 | 	bitl	_var01, #279
2d0d8     17 16 66 F0 | 	shl	arg03, #23
2d0dc     0B 01 42 F5 | 	or	_var01, arg03
2d0e0                 | LR__4265
2d0e0                 | LR__4266
2d0e0                 | LR__4267
2d0e0                 | LR__4268
2d0e0                 | LR__4269
2d0e0     01 00 CE F7 | 	test	_var01, #1 wz
2d0e4     01 14 46 55 |  if_ne	or	arg02, #1
2d0e8     0A 17 02 F6 | 	mov	arg03, arg02
2d0ec     00 02 06 F6 | 	mov	_var02, #0
2d0f0     FF FF 3F FF 
2d0f4     FF 15 06 F1 | 	add	arg02, ##2147483647
2d0f8     0B 15 12 F2 | 	cmp	arg02, arg03 wc
2d0fc     01 02 06 C6 |  if_b	mov	_var02, #1
2d100     01 01 02 F1 | 	add	_var01, _var02
2d104     01 18 CE F7 | 	test	arg04, #1 wz
2d108     1F 00 26 54 |  if_ne	bith	_var01, #31
2d10c     00 FB 01 F6 | 	mov	result1, _var01
2d110                 | __system__pack_0683_ret
2d110     2D 00 64 FD | 	ret
2d114                 | 
2d114                 | __system___rxtxioctl_0773
2d114     00 15 0E F2 | 	cmp	arg02, #256 wz
2d118     0C 00 90 AD |  if_e	jmp	#LR__4270
2d11c     01 15 0E F2 | 	cmp	arg02, #257 wz
2d120     1C 00 90 AD |  if_e	jmp	#LR__4271
2d124     30 00 90 FD | 	jmp	#LR__4272
2d128                 | LR__4270
2d128     08 E6 05 F1 | 	add	ptr___system__dat__, #8
2d12c     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
2d130     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
2d134     0B FB 61 FC | 	wrlong	result1, arg03
2d138     00 FA 05 F6 | 	mov	result1, #0
2d13c     28 00 90 FD | 	jmp	#LR__4273
2d140                 | LR__4271
2d140     0B 13 02 FB | 	rdlong	arg01, arg03
2d144     08 E6 05 F1 | 	add	ptr___system__dat__, #8
2d148     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2d14c     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
2d150     00 FA 05 F6 | 	mov	result1, #0
2d154     10 00 90 FD | 	jmp	#LR__4273
2d158                 | LR__4272
2d158     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2d15c     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
2d160     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2d164     01 FA 65 F6 | 	neg	result1, #1
2d168                 | LR__4273
2d168                 | __system___rxtxioctl_0773_ret
2d168     2D 00 64 FD | 	ret
2d16c                 | 
2d16c                 | __system____dummy_flush_0774
2d16c     00 FA 05 F6 | 	mov	result1, #0
2d170                 | __system____dummy_flush_0774_ret
2d170     2D 00 64 FD | 	ret
2d174                 | 
2d174                 | __system___vfswrite
2d174     09 4A 05 F6 | 	mov	COUNT_, #9
2d178     A8 00 A0 FD | 	call	#pushregs_
2d17c     09 27 02 F6 | 	mov	local01, arg01
2d180     0A 29 02 F6 | 	mov	local02, arg02
2d184     0B 2B 02 F6 | 	mov	local03, arg03
2d188     14 2D 02 F6 | 	mov	local04, local02
2d18c     08 26 06 F1 | 	add	local01, #8
2d190     13 13 02 FB | 	rdlong	arg01, local01
2d194     08 26 86 F1 | 	sub	local01, #8
2d198     02 12 CE F7 | 	test	arg01, #2 wz
2d19c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2d1a0     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2d1a4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2d1a8     01 FA 65 A6 |  if_e	neg	result1, #1
2d1ac     80 01 90 AD |  if_e	jmp	#LR__4286
2d1b0     08 26 06 F1 | 	add	local01, #8
2d1b4     13 FB 01 FB | 	rdlong	result1, local01
2d1b8     08 26 86 F1 | 	sub	local01, #8
2d1bc     40 FA CD F7 | 	test	result1, #64 wz
2d1c0     68 00 90 AD |  if_e	jmp	#LR__4281
2d1c4     08 26 06 F1 | 	add	local01, #8
2d1c8     13 15 02 FB | 	rdlong	arg02, local01
2d1cc     08 26 86 F1 | 	sub	local01, #8
2d1d0     80 14 CE F7 | 	test	arg02, #128 wz
2d1d4     54 00 90 AD |  if_e	jmp	#LR__4280
2d1d8     30 26 06 F1 | 	add	local01, #48
2d1dc     13 2F 02 FB | 	rdlong	local05, local01
2d1e0     17 31 02 F6 | 	mov	local06, local05
2d1e4     30 26 86 F1 | 	sub	local01, #48
2d1e8     13 30 46 F7 | 	zerox	local06, #19
2d1ec     14 2E 46 F0 | 	shr	local05, #20
2d1f0     02 2E 66 F0 | 	shl	local05, #2
2d1f4     ED 2E 02 F1 | 	add	local05, __methods__
2d1f8     17 2F 02 FB | 	rdlong	local05, local05
2d1fc     13 13 02 F6 | 	mov	arg01, local01
2d200     00 14 06 F6 | 	mov	arg02, #0
2d204     02 16 06 F6 | 	mov	arg03, #2
2d208     F2 32 02 F6 | 	mov	local07, objptr
2d20c     18 E5 01 F6 | 	mov	objptr, local06
2d210     2D 2E 62 FD | 	call	local05
2d214     19 E5 01 F6 | 	mov	objptr, local07
2d218     08 26 06 F1 | 	add	local01, #8
2d21c     13 33 02 FB | 	rdlong	local07, local01
2d220     80 32 26 F5 | 	andn	local07, #128
2d224     13 33 62 FC | 	wrlong	local07, local01
2d228     08 26 86 F1 | 	sub	local01, #8
2d22c                 | LR__4280
2d22c                 | LR__4281
2d22c     18 26 06 F1 | 	add	local01, #24
2d230     13 33 0A FB | 	rdlong	local07, local01 wz
2d234     18 26 86 F1 | 	sub	local01, #24
2d238     80 00 90 AD |  if_e	jmp	#LR__4283
2d23c     18 26 06 F1 | 	add	local01, #24
2d240     13 2F 02 FB | 	rdlong	local05, local01
2d244     17 31 02 F6 | 	mov	local06, local05
2d248     18 26 86 F1 | 	sub	local01, #24
2d24c     13 30 46 F7 | 	zerox	local06, #19
2d250     14 2E 46 F0 | 	shr	local05, #20
2d254     02 2E 66 F0 | 	shl	local05, #2
2d258     ED 2E 02 F1 | 	add	local05, __methods__
2d25c     17 2F 02 FB | 	rdlong	local05, local05
2d260     14 15 02 F6 | 	mov	arg02, local02
2d264     15 17 02 F6 | 	mov	arg03, local03
2d268     13 13 02 F6 | 	mov	arg01, local01
2d26c     F2 32 02 F6 | 	mov	local07, objptr
2d270     18 E5 01 F6 | 	mov	objptr, local06
2d274     2D 2E 62 FD | 	call	local05
2d278     19 E5 01 F6 | 	mov	objptr, local07
2d27c     FD 34 02 F6 | 	mov	local08, result1
2d280     00 34 56 F2 | 	cmps	local08, #0 wc
2d284     2C 00 90 3D |  if_ae	jmp	#LR__4282
2d288     08 26 06 F1 | 	add	local01, #8
2d28c     13 33 02 FB | 	rdlong	local07, local01
2d290     20 32 46 F5 | 	or	local07, #32
2d294     13 33 62 FC | 	wrlong	local07, local01
2d298     00 34 4E F2 | 	cmps	local08, #0 wz
2d29c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2d2a0     F3 34 62 FC | 	wrlong	local08, ptr___system__dat__
2d2a4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2d2a8     01 FA 65 56 |  if_ne	neg	result1, #1
2d2ac     00 FA 05 A6 |  if_e	mov	result1, #0
2d2b0     7C 00 90 FD | 	jmp	#LR__4286
2d2b4                 | LR__4282
2d2b4     1A FB 01 F6 | 	mov	result1, local08
2d2b8     74 00 90 FD | 	jmp	#LR__4286
2d2bc                 | LR__4283
2d2bc     1C 26 06 F1 | 	add	local01, #28
2d2c0     13 37 0A FB | 	rdlong	local09, local01 wz
2d2c4     1C 26 86 F1 | 	sub	local01, #28
2d2c8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2d2cc     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2d2d0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2d2d4     01 FA 65 A6 |  if_e	neg	result1, #1
2d2d8     54 00 90 AD |  if_e	jmp	#LR__4286
2d2dc     00 34 06 F6 | 	mov	local08, #0
2d2e0                 | LR__4284
2d2e0     01 2A 16 F2 | 	cmp	local03, #1 wc
2d2e4     44 00 90 CD |  if_b	jmp	#LR__4285
2d2e8     1B 31 02 F6 | 	mov	local06, local09
2d2ec     1B 2F 02 F6 | 	mov	local05, local09
2d2f0     13 30 46 F7 | 	zerox	local06, #19
2d2f4     14 2E 46 F0 | 	shr	local05, #20
2d2f8     02 2E 66 F0 | 	shl	local05, #2
2d2fc     ED 2E 02 F1 | 	add	local05, __methods__
2d300     17 2F 02 FB | 	rdlong	local05, local05
2d304     16 13 C2 FA | 	rdbyte	arg01, local04
2d308     13 15 02 F6 | 	mov	arg02, local01
2d30c     F2 32 02 F6 | 	mov	local07, objptr
2d310     18 E5 01 F6 | 	mov	objptr, local06
2d314     01 2C 06 F1 | 	add	local04, #1
2d318     2D 2E 62 FD | 	call	local05
2d31c     19 E5 01 F6 | 	mov	objptr, local07
2d320     FD 34 02 F1 | 	add	local08, result1
2d324     01 2A 86 F1 | 	sub	local03, #1
2d328     B4 FF 9F FD | 	jmp	#LR__4284
2d32c                 | LR__4285
2d32c     1A FB 01 F6 | 	mov	result1, local08
2d330                 | LR__4286
2d330     A7 F0 03 F6 | 	mov	ptra, fp
2d334     B2 00 A0 FD | 	call	#popregs_
2d338                 | __system___vfswrite_ret
2d338     2D 00 64 FD | 	ret
2d33c                 | 
2d33c                 | __system___vfsread
2d33c     03 4A 05 F6 | 	mov	COUNT_, #3
2d340     A8 00 A0 FD | 	call	#pushregs_
2d344     28 F0 07 F1 | 	add	ptra, #40
2d348     04 4E 05 F1 | 	add	fp, #4
2d34c     A7 12 62 FC | 	wrlong	arg01, fp
2d350     04 4E 05 F1 | 	add	fp, #4
2d354     A7 14 62 FC | 	wrlong	arg02, fp
2d358     04 4E 05 F1 | 	add	fp, #4
2d35c     A7 16 62 FC | 	wrlong	arg03, fp
2d360     04 4E 85 F1 | 	sub	fp, #4
2d364     A7 FA 01 FB | 	rdlong	result1, fp
2d368     14 4E 05 F1 | 	add	fp, #20
2d36c     A7 FA 61 FC | 	wrlong	result1, fp
2d370     04 4E 05 F1 | 	add	fp, #4
2d374     A7 00 68 FC | 	wrlong	#0, fp
2d378     1C 4E 85 F1 | 	sub	fp, #28
2d37c     A7 12 02 FB | 	rdlong	arg01, fp
2d380     04 4E 85 F1 | 	sub	fp, #4
2d384     08 12 06 F1 | 	add	arg01, #8
2d388     09 FB 01 FB | 	rdlong	result1, arg01
2d38c     01 FA CD F7 | 	test	result1, #1 wz
2d390     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2d394     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2d398     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2d39c     01 FA 65 A6 |  if_e	neg	result1, #1
2d3a0     74 02 90 AD |  if_e	jmp	#LR__4296
2d3a4     04 4E 05 F1 | 	add	fp, #4
2d3a8     A7 12 02 FB | 	rdlong	arg01, fp
2d3ac     04 4E 85 F1 | 	sub	fp, #4
2d3b0     14 12 06 F1 | 	add	arg01, #20
2d3b4     09 FB 09 FB | 	rdlong	result1, arg01 wz
2d3b8     B8 00 90 AD |  if_e	jmp	#LR__4291
2d3bc     04 4E 05 F1 | 	add	fp, #4
2d3c0     A7 12 02 FB | 	rdlong	arg01, fp
2d3c4     09 17 02 F6 | 	mov	arg03, arg01
2d3c8     14 16 06 F1 | 	add	arg03, #20
2d3cc     0B 27 02 FB | 	rdlong	local01, arg03
2d3d0     13 29 02 F6 | 	mov	local02, local01
2d3d4     13 26 46 F7 | 	zerox	local01, #19
2d3d8     14 28 46 F0 | 	shr	local02, #20
2d3dc     02 28 66 F0 | 	shl	local02, #2
2d3e0     ED 28 02 F1 | 	add	local02, __methods__
2d3e4     14 29 02 FB | 	rdlong	local02, local02
2d3e8     04 4E 05 F1 | 	add	fp, #4
2d3ec     A7 14 02 FB | 	rdlong	arg02, fp
2d3f0     04 4E 05 F1 | 	add	fp, #4
2d3f4     A7 16 02 FB | 	rdlong	arg03, fp
2d3f8     0C 4E 85 F1 | 	sub	fp, #12
2d3fc     F2 2A 02 F6 | 	mov	local03, objptr
2d400     13 E5 01 F6 | 	mov	objptr, local01
2d404     2D 28 62 FD | 	call	local02
2d408     15 E5 01 F6 | 	mov	objptr, local03
2d40c     10 4E 05 F1 | 	add	fp, #16
2d410     A7 FA 61 FC | 	wrlong	result1, fp
2d414     10 4E 85 F1 | 	sub	fp, #16
2d418     00 FA 55 F2 | 	cmps	result1, #0 wc
2d41c     44 00 90 3D |  if_ae	jmp	#LR__4290
2d420     04 4E 05 F1 | 	add	fp, #4
2d424     A7 2A 02 FB | 	rdlong	local03, fp
2d428     15 27 02 F6 | 	mov	local01, local03
2d42c     08 2A 06 F1 | 	add	local03, #8
2d430     15 29 02 FB | 	rdlong	local02, local03
2d434     20 28 46 F5 | 	or	local02, #32
2d438     08 26 06 F1 | 	add	local01, #8
2d43c     13 29 62 FC | 	wrlong	local02, local01
2d440     0C 4E 05 F1 | 	add	fp, #12
2d444     A7 12 0A FB | 	rdlong	arg01, fp wz
2d448     10 4E 85 F1 | 	sub	fp, #16
2d44c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2d450     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2d454     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2d458     01 FA 65 56 |  if_ne	neg	result1, #1
2d45c     00 FA 05 A6 |  if_e	mov	result1, #0
2d460     B4 01 90 FD | 	jmp	#LR__4296
2d464                 | LR__4290
2d464     10 4E 05 F1 | 	add	fp, #16
2d468     A7 FA 01 FB | 	rdlong	result1, fp
2d46c     10 4E 85 F1 | 	sub	fp, #16
2d470     A4 01 90 FD | 	jmp	#LR__4296
2d474                 | LR__4291
2d474     04 4E 05 F1 | 	add	fp, #4
2d478     A7 12 02 FB | 	rdlong	arg01, fp
2d47c     20 12 06 F1 | 	add	arg01, #32
2d480     09 13 0A FB | 	rdlong	arg01, arg01 wz
2d484     14 4E 05 F1 | 	add	fp, #20
2d488     A7 12 62 FC | 	wrlong	arg01, fp
2d48c     18 4E 85 F1 | 	sub	fp, #24
2d490     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2d494     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2d498     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2d49c     01 FA 65 A6 |  if_e	neg	result1, #1
2d4a0     74 01 90 AD |  if_e	jmp	#LR__4296
2d4a4     04 4E 05 F1 | 	add	fp, #4
2d4a8     A7 2A 02 FB | 	rdlong	local03, fp
2d4ac     04 4E 85 F1 | 	sub	fp, #4
2d4b0     28 2A 06 F1 | 	add	local03, #40
2d4b4     15 29 0A FB | 	rdlong	local02, local03 wz
2d4b8     7C 00 90 AD |  if_e	jmp	#LR__4293
2d4bc     04 4E 05 F1 | 	add	fp, #4
2d4c0     A7 12 02 FB | 	rdlong	arg01, fp
2d4c4     09 2B 02 F6 | 	mov	local03, arg01
2d4c8     28 2A 06 F1 | 	add	local03, #40
2d4cc     15 27 02 FB | 	rdlong	local01, local03
2d4d0     13 29 02 F6 | 	mov	local02, local01
2d4d4     13 26 46 F7 | 	zerox	local01, #19
2d4d8     14 28 46 F0 | 	shr	local02, #20
2d4dc     02 28 66 F0 | 	shl	local02, #2
2d4e0     ED 28 02 F1 | 	add	local02, __methods__
2d4e4     14 29 02 FB | 	rdlong	local02, local02
2d4e8     20 4E 05 F1 | 	add	fp, #32
2d4ec     A7 16 02 F6 | 	mov	arg03, fp
2d4f0     24 4E 85 F1 | 	sub	fp, #36
2d4f4     00 15 06 F6 | 	mov	arg02, #256
2d4f8     F2 2A 02 F6 | 	mov	local03, objptr
2d4fc     13 E5 01 F6 | 	mov	objptr, local01
2d500     2D 28 62 FD | 	call	local02
2d504     15 E5 01 F6 | 	mov	objptr, local03
2d508     10 4E 05 F1 | 	add	fp, #16
2d50c     A7 FA 61 FC | 	wrlong	result1, fp
2d510     00 FA 4D F2 | 	cmps	result1, #0 wz
2d514     10 4E 85 F1 | 	sub	fp, #16
2d518     1C 00 90 5D |  if_ne	jmp	#LR__4292
2d51c     24 4E 05 F1 | 	add	fp, #36
2d520     A7 28 02 FB | 	rdlong	local02, fp
2d524     24 4E 85 F1 | 	sub	fp, #36
2d528     02 28 CE F7 | 	test	local02, #2 wz
2d52c     20 4E 05 51 |  if_ne	add	fp, #32
2d530     A7 02 68 5C |  if_ne	wrlong	#1, fp
2d534     20 4E 85 51 |  if_ne	sub	fp, #32
2d538                 | LR__4292
2d538                 | LR__4293
2d538     10 4E 05 F1 | 	add	fp, #16
2d53c     A7 00 68 FC | 	wrlong	#0, fp
2d540     10 4E 85 F1 | 	sub	fp, #16
2d544                 | LR__4294
2d544     0C 4E 05 F1 | 	add	fp, #12
2d548     A7 2A 02 FB | 	rdlong	local03, fp
2d54c     0C 4E 85 F1 | 	sub	fp, #12
2d550     01 2A 16 F2 | 	cmp	local03, #1 wc
2d554     B4 00 90 CD |  if_b	jmp	#LR__4295
2d558     18 4E 05 F1 | 	add	fp, #24
2d55c     A7 28 02 FB | 	rdlong	local02, fp
2d560     14 2B 02 F6 | 	mov	local03, local02
2d564     13 2A 46 F7 | 	zerox	local03, #19
2d568     14 28 46 F0 | 	shr	local02, #20
2d56c     02 28 66 F0 | 	shl	local02, #2
2d570     ED 28 02 F1 | 	add	local02, __methods__
2d574     14 29 02 FB | 	rdlong	local02, local02
2d578     14 4E 85 F1 | 	sub	fp, #20
2d57c     A7 12 02 FB | 	rdlong	arg01, fp
2d580     04 4E 85 F1 | 	sub	fp, #4
2d584     F2 26 02 F6 | 	mov	local01, objptr
2d588     15 E5 01 F6 | 	mov	objptr, local03
2d58c     2D 28 62 FD | 	call	local02
2d590     13 E5 01 F6 | 	mov	objptr, local01
2d594     14 4E 05 F1 | 	add	fp, #20
2d598     A7 FA 61 FC | 	wrlong	result1, fp
2d59c     14 4E 85 F1 | 	sub	fp, #20
2d5a0     00 FA 55 F2 | 	cmps	result1, #0 wc
2d5a4     64 00 90 CD |  if_b	jmp	#LR__4295
2d5a8     1C 4E 05 F1 | 	add	fp, #28
2d5ac     A7 2A 02 FB | 	rdlong	local03, fp
2d5b0     15 29 02 F6 | 	mov	local02, local03
2d5b4     01 28 06 F1 | 	add	local02, #1
2d5b8     A7 28 62 FC | 	wrlong	local02, fp
2d5bc     08 4E 85 F1 | 	sub	fp, #8
2d5c0     A7 28 02 FB | 	rdlong	local02, fp
2d5c4     15 29 42 FC | 	wrbyte	local02, local03
2d5c8     04 4E 85 F1 | 	sub	fp, #4
2d5cc     A7 2A 02 FB | 	rdlong	local03, fp
2d5d0     01 2A 06 F1 | 	add	local03, #1
2d5d4     A7 2A 62 FC | 	wrlong	local03, fp
2d5d8     04 4E 85 F1 | 	sub	fp, #4
2d5dc     A7 2A 02 FB | 	rdlong	local03, fp
2d5e0     01 2A 86 F1 | 	sub	local03, #1
2d5e4     A7 2A 62 FC | 	wrlong	local03, fp
2d5e8     14 4E 05 F1 | 	add	fp, #20
2d5ec     A7 2A 0A FB | 	rdlong	local03, fp wz
2d5f0     20 4E 85 F1 | 	sub	fp, #32
2d5f4     4C FF 9F AD |  if_e	jmp	#LR__4294
2d5f8     14 4E 05 F1 | 	add	fp, #20
2d5fc     A7 28 02 FB | 	rdlong	local02, fp
2d600     14 4E 85 F1 | 	sub	fp, #20
2d604     0A 28 0E F2 | 	cmp	local02, #10 wz
2d608     38 FF 9F 5D |  if_ne	jmp	#LR__4294
2d60c                 | LR__4295
2d60c     10 4E 05 F1 | 	add	fp, #16
2d610     A7 FA 01 FB | 	rdlong	result1, fp
2d614     10 4E 85 F1 | 	sub	fp, #16
2d618                 | LR__4296
2d618     A7 F0 03 F6 | 	mov	ptra, fp
2d61c     B2 00 A0 FD | 	call	#popregs_
2d620                 | __system___vfsread_ret
2d620     2D 00 64 FD | 	ret
2d624                 | 
2d624                 | __system____default_filbuf
2d624     04 4A 05 F6 | 	mov	COUNT_, #4
2d628     A8 00 A0 FD | 	call	#pushregs_
2d62c     09 27 02 F6 | 	mov	local01, arg01
2d630     13 29 02 FB | 	rdlong	local02, local01
2d634     0C 28 06 F1 | 	add	local02, #12
2d638     14 FB 09 FB | 	rdlong	result1, local02 wz
2d63c     0C 28 86 F1 | 	sub	local02, #12
2d640     20 00 90 5D |  if_ne	jmp	#LR__4300
2d644     14 28 06 F1 | 	add	local02, #20
2d648     14 FB 01 F6 | 	mov	result1, local02
2d64c     04 28 86 F1 | 	sub	local02, #4
2d650     14 FB 61 FC | 	wrlong	result1, local02
2d654     04 28 86 F1 | 	sub	local02, #4
2d658     02 00 80 FF 
2d65c     14 01 68 FC | 	wrlong	##1024, local02
2d660     0C 28 86 F1 | 	sub	local02, #12
2d664                 | LR__4300
2d664     14 26 06 F1 | 	add	local01, #20
2d668     13 2B 02 FB | 	rdlong	local03, local01
2d66c     15 2D 02 F6 | 	mov	local04, local03
2d670     14 26 86 F1 | 	sub	local01, #20
2d674     13 2C 46 F7 | 	zerox	local04, #19
2d678     14 2A 46 F0 | 	shr	local03, #20
2d67c     02 2A 66 F0 | 	shl	local03, #2
2d680     ED 2A 02 F1 | 	add	local03, __methods__
2d684     15 2B 02 FB | 	rdlong	local03, local03
2d688     10 28 06 F1 | 	add	local02, #16
2d68c     14 15 02 FB | 	rdlong	arg02, local02
2d690     04 28 86 F1 | 	sub	local02, #4
2d694     14 17 02 FB | 	rdlong	arg03, local02
2d698     0C 28 86 F1 | 	sub	local02, #12
2d69c     13 13 02 F6 | 	mov	arg01, local01
2d6a0     F2 26 02 F6 | 	mov	local01, objptr
2d6a4     16 E5 01 F6 | 	mov	objptr, local04
2d6a8     2D 2A 62 FD | 	call	local03
2d6ac     13 E5 01 F6 | 	mov	objptr, local01
2d6b0     FD 2C 02 F6 | 	mov	local04, result1
2d6b4     00 2C 56 F2 | 	cmps	local04, #0 wc
2d6b8     01 FA 65 C6 |  if_b	neg	result1, #1
2d6bc     28 00 90 CD |  if_b	jmp	#LR__4301
2d6c0     14 2D 62 FC | 	wrlong	local04, local02
2d6c4     10 28 06 F1 | 	add	local02, #16
2d6c8     14 2B 02 FB | 	rdlong	local03, local02
2d6cc     0C 28 86 F1 | 	sub	local02, #12
2d6d0     14 2B 62 FC | 	wrlong	local03, local02
2d6d4     04 28 06 F1 | 	add	local02, #4
2d6d8     14 2B 02 FB | 	rdlong	local03, local02
2d6dc     01 2A 46 F5 | 	or	local03, #1
2d6e0     14 2B 62 FC | 	wrlong	local03, local02
2d6e4     16 FB 01 F6 | 	mov	result1, local04
2d6e8                 | LR__4301
2d6e8     A7 F0 03 F6 | 	mov	ptra, fp
2d6ec     B2 00 A0 FD | 	call	#popregs_
2d6f0                 | __system____default_filbuf_ret
2d6f0     2D 00 64 FD | 	ret
2d6f4                 | 
2d6f4                 | __system__getlower_1163
2d6f4     41 12 56 F2 | 	cmps	arg01, #65 wc
2d6f8     10 00 90 CD |  if_b	jmp	#LR__4310
2d6fc     5B 12 56 F2 | 	cmps	arg01, #91 wc
2d700     09 FB 01 C6 |  if_b	mov	result1, arg01
2d704     20 FA 05 C1 |  if_b	add	result1, #32
2d708     04 00 90 CD |  if_b	jmp	#__system__getlower_1163_ret
2d70c                 | LR__4310
2d70c     09 FB 01 F6 | 	mov	result1, arg01
2d710                 | __system__getlower_1163_ret
2d710     2D 00 64 FD | 	ret
2d714                 | 
2d714                 | __system___pat_match
2d714     08 4A 05 F6 | 	mov	COUNT_, #8
2d718     A8 00 A0 FD | 	call	#pushregs_
2d71c     09 27 02 F6 | 	mov	local01, arg01
2d720                 | LR__4320
2d720     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
2d724     13 13 CA 5A |  if_ne	rdbyte	arg01, local01 wz
2d728     0A 29 C2 5A |  if_ne	rdbyte	local02, arg02
2d72c     2A 28 0E 52 |  if_ne	cmp	local02, #42 wz
2d730     2C 00 90 AD |  if_e	jmp	#LR__4321
2d734     0A 13 C2 FA | 	rdbyte	arg01, arg02
2d738     B8 FF BF FD | 	call	#__system__getlower_1163
2d73c     FD 2A 02 F6 | 	mov	local03, result1
2d740     13 13 C2 FA | 	rdbyte	arg01, local01
2d744     AC FF BF FD | 	call	#__system__getlower_1163
2d748     15 FB 09 F2 | 	cmp	result1, local03 wz
2d74c     00 FA 05 56 |  if_ne	mov	result1, #0
2d750     FC 00 90 5D |  if_ne	jmp	#LR__4329
2d754     01 26 06 F1 | 	add	local01, #1
2d758     01 14 06 F1 | 	add	arg02, #1
2d75c     C0 FF 9F FD | 	jmp	#LR__4320
2d760                 | LR__4321
2d760     0A 2B C2 FA | 	rdbyte	local03, arg02
2d764     2A 2A 0E F2 | 	cmp	local03, #42 wz
2d768     D4 00 90 5D |  if_ne	jmp	#LR__4328
2d76c     01 14 06 F1 | 	add	arg02, #1
2d770     0A 29 C2 FA | 	rdbyte	local02, arg02
2d774     01 14 86 F1 | 	sub	arg02, #1
2d778     2E 28 0E F2 | 	cmp	local02, #46 wz
2d77c     28 00 90 5D |  if_ne	jmp	#LR__4322
2d780     02 14 06 F1 | 	add	arg02, #2
2d784     0A 29 C2 FA | 	rdbyte	local02, arg02
2d788     02 14 86 F1 | 	sub	arg02, #2
2d78c     2A 28 0E F2 | 	cmp	local02, #42 wz
2d790     03 14 06 A1 |  if_e	add	arg02, #3
2d794     0A 2D C2 AA |  if_e	rdbyte	local04, arg02
2d798     03 14 86 A1 |  if_e	sub	arg02, #3
2d79c     16 2F 0A A6 |  if_e	mov	local05, local04 wz
2d7a0     01 FA 05 A6 |  if_e	mov	result1, #1
2d7a4     A8 00 90 AD |  if_e	jmp	#LR__4329
2d7a8                 | LR__4322
2d7a8     01 14 06 F1 | 	add	arg02, #1
2d7ac     00 30 06 F6 | 	mov	local06, #0
2d7b0     97 1E 48 FB | 	callpa	#(@LR__4325-@LR__4323)>>2,fcache_load_ptr_
2d7b4                 | LR__4323
2d7b4     18 33 02 F6 | 	mov	local07, local06
2d7b8     0A 33 02 F1 | 	add	local07, arg02
2d7bc     19 33 CA FA | 	rdbyte	local07, local07 wz
2d7c0     18 2F 02 56 |  if_ne	mov	local05, local06
2d7c4     01 2E 06 51 |  if_ne	add	local05, #1
2d7c8     17 31 02 56 |  if_ne	mov	local06, local05
2d7cc     E4 FF 9F 5D |  if_ne	jmp	#LR__4323
2d7d0     00 34 06 F6 | 	mov	local08, #0
2d7d4                 | LR__4324
2d7d4     1A 33 02 F6 | 	mov	local07, local08
2d7d8     13 33 02 F1 | 	add	local07, local01
2d7dc     19 33 CA FA | 	rdbyte	local07, local07 wz
2d7e0     1A 2F 02 56 |  if_ne	mov	local05, local08
2d7e4     01 2E 06 51 |  if_ne	add	local05, #1
2d7e8     17 35 02 56 |  if_ne	mov	local08, local05
2d7ec     E4 FF 9F 5D |  if_ne	jmp	#LR__4324
2d7f0                 | LR__4325
2d7f0     18 35 52 F2 | 	cmps	local08, local06 wc
2d7f4     00 FA 05 C6 |  if_b	mov	result1, #0
2d7f8     54 00 90 CD |  if_b	jmp	#LR__4329
2d7fc     1A 29 02 F6 | 	mov	local02, local08
2d800     18 29 82 F1 | 	sub	local02, local06
2d804     14 27 02 F1 | 	add	local01, local02
2d808                 | LR__4326
2d808     01 30 56 F2 | 	cmps	local06, #1 wc
2d80c     30 00 90 CD |  if_b	jmp	#LR__4327
2d810     13 13 C2 FA | 	rdbyte	arg01, local01
2d814     DC FE BF FD | 	call	#__system__getlower_1163
2d818     FD 34 02 F6 | 	mov	local08, result1
2d81c     0A 13 C2 FA | 	rdbyte	arg01, arg02
2d820     D0 FE BF FD | 	call	#__system__getlower_1163
2d824     FD 34 0A F2 | 	cmp	local08, result1 wz
2d828     00 FA 05 56 |  if_ne	mov	result1, #0
2d82c     20 00 90 5D |  if_ne	jmp	#LR__4329
2d830     01 26 06 F1 | 	add	local01, #1
2d834     01 14 06 F1 | 	add	arg02, #1
2d838     01 30 86 F1 | 	sub	local06, #1
2d83c     C8 FF 9F FD | 	jmp	#LR__4326
2d840                 | LR__4327
2d840                 | LR__4328
2d840     0A 35 CA FA | 	rdbyte	local08, arg02 wz
2d844     13 33 CA AA |  if_e	rdbyte	local07, local01 wz
2d848     01 FA 05 A6 |  if_e	mov	result1, #1
2d84c     00 FA 05 56 |  if_ne	mov	result1, #0
2d850                 | LR__4329
2d850     A7 F0 03 F6 | 	mov	ptra, fp
2d854     B2 00 A0 FD | 	call	#popregs_
2d858                 | __system___pat_match_ret
2d858     2D 00 64 FD | 	ret
2d85c                 | 
2d85c                 | _fatfs_cc_ff_uni2oem
2d85c     00 00 06 F6 | 	mov	_var01, #0
2d860     80 12 16 F2 | 	cmp	arg01, #128 wc
2d864     09 01 02 C6 |  if_b	mov	_var01, arg01
2d868     58 00 90 CD |  if_b	jmp	#LR__4334
2d86c     80 00 00 FF 
2d870     00 12 16 F2 | 	cmp	arg01, ##65536 wc
2d874     4C 00 90 3D |  if_ae	jmp	#LR__4333
2d878     0A FB 31 F9 | 	getword	result1, arg02, #0
2d87c     01 00 00 FF 
2d880     52 FB 0D F2 | 	cmp	result1, ##850 wz
2d884     3C 00 90 5D |  if_ne	jmp	#LR__4333
2d888                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
2d888     00 00 06 F6 | 	mov	_var01, #0
2d88c     97 14 48 FB | 	callpa	#(@LR__4331-@LR__4330)>>2,fcache_load_ptr_
2d890                 | LR__4330
2d890     00 FB 31 F9 | 	getword	result1, _var01, #0
2d894     80 FA 15 F2 | 	cmp	result1, #128 wc
2d898     1C 00 90 3D |  if_ae	jmp	#LR__4332
2d89c     00 FB 31 F9 | 	getword	result1, _var01, #0
2d8a0     01 FA 65 F0 | 	shl	result1, #1
2d8a4     F6 FA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
2d8a8     FD FA E1 FA | 	rdword	result1, result1
2d8ac     FD 12 0A F2 | 	cmp	arg01, result1 wz
2d8b0     01 00 06 51 |  if_ne	add	_var01, #1
2d8b4     D8 FF 9F 5D |  if_ne	jmp	#LR__4330
2d8b8                 | LR__4331
2d8b8                 | LR__4332
2d8b8     00 01 32 F9 | 	getword	_var01, _var01, #0
2d8bc     80 00 06 F1 | 	add	_var01, #128
2d8c0     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
2d8c4                 | LR__4333
2d8c4                 | LR__4334
2d8c4                 | ' 			c = (c + 0x80) & 0xFF;
2d8c4                 | ' 		}
2d8c4                 | ' 	}
2d8c4                 | ' 
2d8c4                 | ' 	return c;
2d8c4     00 FB 01 F6 | 	mov	result1, _var01
2d8c8                 | _fatfs_cc_ff_uni2oem_ret
2d8c8     2D 00 64 FD | 	ret
2d8cc                 | 
2d8cc                 | _fatfs_cc_ff_oem2uni
2d8cc     00 00 06 F6 | 	mov	_var01, #0
2d8d0     09 FB 31 F9 | 	getword	result1, arg01, #0
2d8d4     80 FA 15 F2 | 	cmp	result1, #128 wc
2d8d8     09 01 02 C6 |  if_b	mov	_var01, arg01
2d8dc     2C 00 90 CD |  if_b	jmp	#LR__4341
2d8e0     0A 15 32 F9 | 	getword	arg02, arg02, #0
2d8e4     01 00 00 FF 
2d8e8     52 15 0E F2 | 	cmp	arg02, ##850 wz
2d8ec     1C 00 90 5D |  if_ne	jmp	#LR__4340
2d8f0     09 FB 31 F9 | 	getword	result1, arg01, #0
2d8f4     00 FB 15 F2 | 	cmp	result1, #256 wc
2d8f8     09 13 32 C9 |  if_b	getword	arg01, arg01, #0
2d8fc     80 12 86 C1 |  if_b	sub	arg01, #128
2d900     01 12 66 C0 |  if_b	shl	arg01, #1
2d904     F6 12 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
2d908     09 01 E2 CA |  if_b	rdword	_var01, arg01
2d90c                 | LR__4340
2d90c                 | LR__4341
2d90c                 | ' 		}
2d90c                 | ' 	}
2d90c                 | ' 
2d90c                 | ' 	return c;
2d90c     00 FB 01 F6 | 	mov	result1, _var01
2d910                 | _fatfs_cc_ff_oem2uni_ret
2d910     2D 00 64 FD | 	ret
2d914                 | 
2d914                 | _fatfs_cc_ff_wtoupper
2d914     09 01 02 F6 | 	mov	_var01, arg01
2d918     80 00 00 FF 
2d91c     00 00 16 F2 | 	cmp	_var01, ##65536 wc
2d920     60 01 90 3D |  if_ae	jmp	#LR__4363
2d924     00 03 02 F6 | 	mov	_var02, _var01
2d928     01 01 32 F9 | 	getword	_var01, _var02, #0
2d92c     08 00 00 FF 
2d930     00 00 16 F2 | 	cmp	_var01, ##4096 wc
2d934     00 ED 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
2d938     F6 04 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
2d93c     00 ED 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
2d940     01 00 00 3F 
2d944     F2 EC 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
2d948     F6 04 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
2d94c     01 00 00 3F 
2d950     F2 EC 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
2d954     02 07 02 F6 | 	mov	_var04, _var03
2d958                 | ' 		uc = (WORD)uni;
2d958                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
2d958                 | ' 		for (;;) {
2d958                 | LR__4350
2d958     03 09 E2 FA | 	rdword	_var05, _var04
2d95c     04 05 02 F6 | 	mov	_var03, _var05
2d960     0F 04 4E F7 | 	zerox	_var03, #15 wz
2d964     02 06 06 F1 | 	add	_var04, #2
2d968     14 01 90 AD |  if_e	jmp	#LR__4362
2d96c     01 05 32 F9 | 	getword	_var03, _var02, #0
2d970     04 01 32 F9 | 	getword	_var01, _var05, #0
2d974     00 05 12 F2 | 	cmp	_var03, _var01 wc
2d978     04 01 90 CD |  if_b	jmp	#LR__4362
2d97c     03 0B E2 FA | 	rdword	_var06, _var04
2d980     05 0D 32 F9 | 	getword	_var07, _var06, #0
2d984     08 0C 46 F0 | 	shr	_var07, #8
2d988     05 0B 32 F9 | 	getword	_var06, _var06, #0
2d98c     05 0B E2 F8 | 	getbyte	_var06, _var06, #0
2d990     01 05 32 F9 | 	getword	_var03, _var02, #0
2d994     04 0F 32 F9 | 	getword	_var08, _var05, #0
2d998     05 01 32 F9 | 	getword	_var01, _var06, #0
2d99c     00 0F 02 F1 | 	add	_var08, _var01
2d9a0     07 05 52 F2 | 	cmps	_var03, _var08 wc
2d9a4     02 06 06 F1 | 	add	_var04, #2
2d9a8     C4 00 90 3D |  if_ae	jmp	#LR__4361
2d9ac                 | ' 				switch (cmd) {
2d9ac     06 11 32 F9 | 	getword	_var09, _var07, #0
2d9b0     09 10 26 F3 | 	fle	_var09, #9
2d9b4     30 10 62 FD | 	jmprel	_var09
2d9b8                 | LR__4351
2d9b8     24 00 90 FD | 	jmp	#LR__4352
2d9bc     3C 00 90 FD | 	jmp	#LR__4353
2d9c0     54 00 90 FD | 	jmp	#LR__4354
2d9c4     5C 00 90 FD | 	jmp	#LR__4355
2d9c8     64 00 90 FD | 	jmp	#LR__4356
2d9cc     6C 00 90 FD | 	jmp	#LR__4357
2d9d0     74 00 90 FD | 	jmp	#LR__4358
2d9d4     7C 00 90 FD | 	jmp	#LR__4359
2d9d8     84 00 90 FD | 	jmp	#LR__4360
2d9dc     A0 00 90 FD | 	jmp	#LR__4362
2d9e0                 | LR__4352
2d9e0     01 03 32 F9 | 	getword	_var02, _var02, #0
2d9e4     04 09 32 F9 | 	getword	_var05, _var05, #0
2d9e8     04 03 82 F1 | 	sub	_var02, _var05
2d9ec     01 02 66 F0 | 	shl	_var02, #1
2d9f0     03 03 02 F1 | 	add	_var02, _var04
2d9f4     01 03 E2 FA | 	rdword	_var02, _var02
2d9f8     84 00 90 FD | 	jmp	#LR__4362
2d9fc                 | LR__4353
2d9fc     01 05 32 F9 | 	getword	_var03, _var02, #0
2da00     01 03 32 F9 | 	getword	_var02, _var02, #0
2da04     04 09 32 F9 | 	getword	_var05, _var05, #0
2da08     04 03 82 F1 | 	sub	_var02, _var05
2da0c     01 02 06 F5 | 	and	_var02, #1
2da10     02 03 C2 F2 | 	subr	_var02, _var03
2da14     68 00 90 FD | 	jmp	#LR__4362
2da18                 | LR__4354
2da18     01 03 32 F9 | 	getword	_var02, _var02, #0
2da1c     10 02 86 F1 | 	sub	_var02, #16
2da20     5C 00 90 FD | 	jmp	#LR__4362
2da24                 | LR__4355
2da24     01 03 32 F9 | 	getword	_var02, _var02, #0
2da28     20 02 86 F1 | 	sub	_var02, #32
2da2c     50 00 90 FD | 	jmp	#LR__4362
2da30                 | LR__4356
2da30     01 03 32 F9 | 	getword	_var02, _var02, #0
2da34     30 02 86 F1 | 	sub	_var02, #48
2da38     44 00 90 FD | 	jmp	#LR__4362
2da3c                 | LR__4357
2da3c     01 03 32 F9 | 	getword	_var02, _var02, #0
2da40     1A 02 86 F1 | 	sub	_var02, #26
2da44     38 00 90 FD | 	jmp	#LR__4362
2da48                 | LR__4358
2da48     01 03 32 F9 | 	getword	_var02, _var02, #0
2da4c     08 02 06 F1 | 	add	_var02, #8
2da50     2C 00 90 FD | 	jmp	#LR__4362
2da54                 | LR__4359
2da54     01 03 32 F9 | 	getword	_var02, _var02, #0
2da58     50 02 86 F1 | 	sub	_var02, #80
2da5c     20 00 90 FD | 	jmp	#LR__4362
2da60                 | LR__4360
2da60     01 03 32 F9 | 	getword	_var02, _var02, #0
2da64     0E 00 00 FF 
2da68     60 02 86 F1 | 	sub	_var02, ##7264
2da6c                 | ' 				}
2da6c                 | ' 				break;
2da6c     10 00 90 FD | 	jmp	#LR__4362
2da70                 | LR__4361
2da70     0F 0C 4E F7 | 	zerox	_var07, #15 wz
2da74     02 0A 06 AA |  if_e	mul	_var06, #2
2da78     05 07 02 A1 |  if_e	add	_var04, _var06
2da7c     D8 FE 9F FD | 	jmp	#LR__4350
2da80                 | LR__4362
2da80     01 01 32 F9 | 	getword	_var01, _var02, #0
2da84                 | LR__4363
2da84                 | ' 		}
2da84                 | ' 		uni = uc;
2da84                 | ' 	}
2da84                 | ' 
2da84                 | ' 	return uni;
2da84     00 FB 01 F6 | 	mov	result1, _var01
2da88                 | _fatfs_cc_ff_wtoupper_ret
2da88     2D 00 64 FD | 	ret
2da8c                 | 
2da8c                 | _fatfs_cc_strncpy
2da8c     09 01 02 F6 | 	mov	_var01, arg01
2da90     97 12 48 FB | 	callpa	#(@LR__4371-@LR__4370)>>2,fcache_load_ptr_
2da94                 | ' 
2da94                 | ' 	dscan = dst;
2da94                 | ' 	sscan = src;
2da94                 | ' 	count = n;
2da94                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
2da94                 | LR__4370
2da94     01 16 86 F1 | 	sub	arg03, #1
2da98     00 16 56 F2 | 	cmps	arg03, #0 wc
2da9c     18 00 90 CD |  if_b	jmp	#LR__4372
2daa0     0A FB C1 FA | 	rdbyte	result1, arg02
2daa4     00 FB 41 FC | 	wrbyte	result1, _var01
2daa8     01 14 06 F1 | 	add	arg02, #1
2daac     00 FB C9 FA | 	rdbyte	result1, _var01 wz
2dab0                 | ' 		continue;
2dab0     01 00 06 F1 | 	add	_var01, #1
2dab4     DC FF 9F 5D |  if_ne	jmp	#LR__4370
2dab8                 | LR__4371
2dab8                 | LR__4372
2dab8     97 0C 48 FB | 	callpa	#(@LR__4374-@LR__4373)>>2,fcache_load_ptr_
2dabc                 | ' 	while (--count >= 0)
2dabc                 | LR__4373
2dabc     01 16 86 F1 | 	sub	arg03, #1
2dac0     00 16 56 F2 | 	cmps	arg03, #0 wc
2dac4     00 03 02 36 |  if_ae	mov	_var02, _var01
2dac8     01 00 06 31 |  if_ae	add	_var01, #1
2dacc     01 01 48 3C |  if_ae	wrbyte	#0, _var02
2dad0     E8 FF 9F 3D |  if_ae	jmp	#LR__4373
2dad4                 | LR__4374
2dad4                 | ' 		*dscan++ = '\0';
2dad4                 | ' 	return(dst);
2dad4     09 FB 01 F6 | 	mov	result1, arg01
2dad8                 | _fatfs_cc_strncpy_ret
2dad8     2D 00 64 FD | 	ret
2dadc                 | 
2dadc                 | _fatfs_cc_memcmp
2dadc                 | ' 	for (n = size; n > 0; n--)
2dadc     00 16 0E F2 | 	cmp	arg03, #0 wz
2dae0     28 00 90 AD |  if_e	jmp	#LR__4381
2dae4                 | LR__4380
2dae4     09 01 C2 FA | 	rdbyte	_var01, arg01
2dae8     0A 03 C2 FA | 	rdbyte	_var02, arg02
2daec     01 01 0A F2 | 	cmp	_var01, _var02 wz
2daf0     01 12 06 A1 |  if_e	add	arg01, #1
2daf4     01 14 06 A1 |  if_e	add	arg02, #1
2daf8                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
2daf8     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
2dafc     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
2db00     01 FB 81 51 |  if_ne	sub	result1, _var02
2db04     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
2db08     F6 17 6E FB | 	djnz	arg03, #LR__4380
2db0c                 | LR__4381
2db0c                 | ' 
2db0c                 | ' 	return(0);
2db0c     00 FA 05 F6 | 	mov	result1, #0
2db10                 | _fatfs_cc_memcmp_ret
2db10     2D 00 64 FD | 	ret
2db14                 | 
2db14                 | _fatfs_cc_strncmp
2db14     09 01 0A F6 | 	mov	_var01, arg01 wz
2db18     14 00 90 5D |  if_ne	jmp	#LR__4390
2db1c                 | ' 		return scan2 ? -1 : 0;
2db1c     00 14 0E F2 | 	cmp	arg02, #0 wz
2db20     01 02 66 56 |  if_ne	neg	_var02, #1
2db24     00 02 06 A6 |  if_e	mov	_var02, #0
2db28     01 FB 01 F6 | 	mov	result1, _var02
2db2c     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
2db30                 | LR__4390
2db30     00 14 0E F2 | 	cmp	arg02, #0 wz
2db34     01 FA 05 A6 |  if_e	mov	result1, #1
2db38     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2db3c     0B 05 02 F6 | 	mov	_var03, arg03
2db40     97 16 48 FB | 	callpa	#(@LR__4392-@LR__4391)>>2,fcache_load_ptr_
2db44                 | ' 	count = n;
2db44                 | ' 	do {
2db44                 | LR__4391
2db44     00 07 C2 FA | 	rdbyte	_var04, _var01
2db48     0A 09 02 F6 | 	mov	_var05, arg02
2db4c     04 0B C2 FA | 	rdbyte	_var06, _var05
2db50     01 04 86 F1 | 	sub	_var03, #1
2db54     00 04 56 F2 | 	cmps	_var03, #0 wc
2db58     01 00 06 F1 | 	add	_var01, #1
2db5c     01 14 06 F1 | 	add	arg02, #1
2db60     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
2db64     08 00 90 2D |  if_nc_and_z	jmp	#LR__4393
2db68     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
2db6c     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__4391
2db70                 | LR__4392
2db70                 | LR__4393
2db70     00 04 56 F2 | 	cmps	_var03, #0 wc
2db74                 | ' 		return(0);
2db74     00 FA 05 C6 |  if_b	mov	result1, #0
2db78     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
2db7c     05 07 0A F2 | 	cmp	_var04, _var06 wz
2db80                 | ' 		return(0);
2db80     00 FA 05 A6 |  if_e	mov	result1, #0
2db84     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2db88     00 06 0E F2 | 	cmp	_var04, #0 wz
2db8c                 | ' 		return(-1);
2db8c     01 FA 65 A6 |  if_e	neg	result1, #1
2db90     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2db94     00 0A 0E F2 | 	cmp	_var06, #0 wz
2db98                 | ' 		return(1);
2db98     01 FA 05 A6 |  if_e	mov	result1, #1
2db9c                 | ' 		return(c1 - c2);
2db9c     03 FB 01 56 |  if_ne	mov	result1, _var04
2dba0     05 FB 81 51 |  if_ne	sub	result1, _var06
2dba4                 | _fatfs_cc_strncmp_ret
2dba4     2D 00 64 FD | 	ret
2dba8                 | 
2dba8                 | _fatfs_cc_strchr
2dba8                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/libc/string/strchr.c"
2dba8                 | ' 	while ((c = *s++) != (char) charwanted)
2dba8                 | LR__4400
2dba8     09 01 02 F6 | 	mov	_var01, arg01
2dbac     00 03 C2 FA | 	rdbyte	_var02, _var01
2dbb0     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
2dbb4     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
2dbb8     03 05 0A F2 | 	cmp	_var03, _var04 wz
2dbbc     01 12 06 F1 | 	add	arg01, #1
2dbc0     14 00 90 AD |  if_e	jmp	#LR__4401
2dbc4     01 05 02 F6 | 	mov	_var03, _var02
2dbc8     07 04 4E F7 | 	zerox	_var03, #7 wz
2dbcc     00 FA 05 A6 |  if_e	mov	result1, #0
2dbd0     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
2dbd4     D0 FF 9F FD | 	jmp	#LR__4400
2dbd8                 | LR__4401
2dbd8                 | ' 	return((char *)--s);
2dbd8     01 12 86 F1 | 	sub	arg01, #1
2dbdc     09 FB 01 F6 | 	mov	result1, arg01
2dbe0                 | _fatfs_cc_strchr_ret
2dbe0     2D 00 64 FD | 	ret
2dbe4                 | 
2dbe4                 | _fatfs_cc_disk_initialize
2dbe4     04 4A 05 F6 | 	mov	COUNT_, #4
2dbe8     A8 00 A0 FD | 	call	#pushregs_
2dbec     40 F0 07 F1 | 	add	ptra, #64
2dbf0     04 4E 05 F1 | 	add	fp, #4
2dbf4     A7 12 42 FC | 	wrbyte	arg01, fp
2dbf8     01 00 00 FF 
2dbfc     14 E4 05 F1 | 	add	objptr, ##532
2dc00     F2 18 02 FB | 	rdlong	arg04, objptr
2dc04     2C 4E 05 F1 | 	add	fp, #44
2dc08     A7 18 62 FC | 	wrlong	arg04, fp
2dc0c     04 E4 85 F1 | 	sub	objptr, #4
2dc10     F2 18 02 FB | 	rdlong	arg04, objptr
2dc14     04 4E 05 F1 | 	add	fp, #4
2dc18     A7 18 62 FC | 	wrlong	arg04, fp
2dc1c     08 E4 05 F1 | 	add	objptr, #8
2dc20     F2 18 02 FB | 	rdlong	arg04, objptr
2dc24     04 4E 05 F1 | 	add	fp, #4
2dc28     A7 18 62 FC | 	wrlong	arg04, fp
2dc2c     04 E4 05 F1 | 	add	objptr, #4
2dc30     F2 18 02 FB | 	rdlong	arg04, objptr
2dc34     04 4E 05 F1 | 	add	fp, #4
2dc38     A7 18 62 FC | 	wrlong	arg04, fp
2dc3c     04 E4 05 F1 | 	add	objptr, #4
2dc40     F2 02 48 FC | 	wrbyte	#1, objptr
2dc44     01 00 00 FF 
2dc48     20 E4 85 F1 | 	sub	objptr, ##544
2dc4c     38 4E 85 F1 | 	sub	fp, #56
2dc50     A7 18 CA FA | 	rdbyte	arg04, fp wz
2dc54     04 4E 85 F1 | 	sub	fp, #4
2dc58                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
2dc58                 | '             return RES_NOTRDY;
2dc58     03 FA 05 56 |  if_ne	mov	result1, #3
2dc5c     D8 05 90 5D |  if_ne	jmp	#LR__4428
2dc60     13 00 00 FF 
2dc64     10 13 06 F6 | 	mov	arg01, ##10000
2dc68     44 95 BF FD | 	call	#__system___waitus
2dc6c     30 4E 05 F1 | 	add	fp, #48
2dc70     A7 12 02 FB | 	rdlong	arg01, fp
2dc74     09 01 08 FC | 	wrpin	#0, arg01
2dc78     04 4E 05 F1 | 	add	fp, #4
2dc7c     A7 12 02 FB | 	rdlong	arg01, fp
2dc80     09 01 08 FC | 	wrpin	#0, arg01
2dc84     04 4E 05 F1 | 	add	fp, #4
2dc88     A7 12 02 FB | 	rdlong	arg01, fp
2dc8c     09 01 08 FC | 	wrpin	#0, arg01
2dc90     04 4E 05 F1 | 	add	fp, #4
2dc94     A7 12 02 FB | 	rdlong	arg01, fp
2dc98     09 00 80 FF 
2dc9c     09 01 08 FC | 	wrpin	##4608, arg01
2dca0     0C 4E 85 F1 | 	sub	fp, #12
2dca4     A7 12 02 FB | 	rdlong	arg01, fp
2dca8     59 12 62 FD | 	drvh	arg01
2dcac     04 4E 05 F1 | 	add	fp, #4
2dcb0     A7 12 02 FB | 	rdlong	arg01, fp
2dcb4     59 12 62 FD | 	drvh	arg01
2dcb8     04 4E 05 F1 | 	add	fp, #4
2dcbc     A7 12 02 FB | 	rdlong	arg01, fp
2dcc0     59 12 62 FD | 	drvh	arg01
2dcc4     04 4E 05 F1 | 	add	fp, #4
2dcc8     A7 12 02 FB | 	rdlong	arg01, fp
2dccc     59 12 62 FD | 	drvh	arg01
2dcd0     20 4E 85 F1 | 	sub	fp, #32
2dcd4     00 04 80 FF 
2dcd8     A7 20 68 FC | 	wrlong	##524304, fp
2dcdc     04 4E 05 F1 | 	add	fp, #4
2dce0     20 03 80 FF 
2dce4     A7 90 68 FC | 	wrlong	##409672, fp
2dce8     14 4E 05 F1 | 	add	fp, #20
2dcec     A7 26 02 FB | 	rdlong	local01, fp
2dcf0     18 4E 85 F1 | 	sub	fp, #24
2dcf4     A7 16 02 FB | 	rdlong	arg03, fp
2dcf8     40 26 62 FD | 	dirl	local01
2dcfc     A0 03 80 FF 
2dd00     13 91 08 FC | 	wrpin	##475208, local01
2dd04     13 17 12 FC | 	wxpin	arg03, local01
2dd08     13 01 28 FC | 	wypin	#0, local01
2dd0c     41 26 62 FD | 	dirh	local01
2dd10     1C 4E 05 F1 | 	add	fp, #28
2dd14     A7 28 02 FB | 	rdlong	local02, fp
2dd18     14 27 82 F1 | 	sub	local01, local02
2dd1c     07 26 06 F5 | 	and	local01, #7
2dd20     18 26 66 F0 | 	shl	local01, #24
2dd24     78 14 06 F6 | 	mov	arg02, #120
2dd28     13 15 42 F5 | 	or	arg02, local01
2dd2c     14 4E 85 F1 | 	sub	fp, #20
2dd30     A7 14 62 FC | 	wrlong	arg02, fp
2dd34     14 4E 05 F1 | 	add	fp, #20
2dd38     A7 12 02 FB | 	rdlong	arg01, fp
2dd3c     10 14 26 F4 | 	bith	arg02, #16
2dd40     40 12 62 FD | 	dirl	arg01
2dd44     09 15 02 FC | 	wrpin	arg02, arg01
2dd48     09 3F 18 FC | 	wxpin	#31, arg01
2dd4c     FF FF FF FF 
2dd50     09 FF 2B FC | 	wypin	##-1, arg01
2dd54     41 12 62 FD | 	dirh	arg01
2dd58     04 4E 85 F1 | 	sub	fp, #4
2dd5c     A7 14 02 FB | 	rdlong	arg02, fp
2dd60     08 4E 05 F1 | 	add	fp, #8
2dd64     A7 2A 02 FB | 	rdlong	local03, fp
2dd68     15 15 82 F1 | 	sub	arg02, local03
2dd6c     07 14 06 F5 | 	and	arg02, #7
2dd70     18 14 66 F0 | 	shl	arg02, #24
2dd74     14 4E 85 F1 | 	sub	fp, #20
2dd78     A7 14 62 FC | 	wrlong	arg02, fp
2dd7c     29 00 00 FF 
2dd80     7A 14 46 F5 | 	or	arg02, ##21114
2dd84     A7 14 62 FC | 	wrlong	arg02, fp
2dd88     14 4E 05 F1 | 	add	fp, #20
2dd8c     A7 12 02 FB | 	rdlong	arg01, fp
2dd90     40 12 62 FD | 	dirl	arg01
2dd94     09 15 02 FC | 	wrpin	arg02, arg01
2dd98     09 4F 18 FC | 	wxpin	#39, arg01
2dd9c     09 01 28 FC | 	wypin	#0, arg01
2dda0     41 12 62 FD | 	dirh	arg01
2dda4     28 4E 85 F1 | 	sub	fp, #40
2dda8     A7 12 02 F6 | 	mov	arg01, fp
2ddac     14 4E 85 F1 | 	sub	fp, #20
2ddb0     0A 14 06 F6 | 	mov	arg02, #10
2ddb4     1C 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1197
2ddb8     00 12 06 F6 | 	mov	arg01, #0
2ddbc     00 14 06 F6 | 	mov	arg02, #0
2ddc0     E8 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1221
2ddc4     24 80 B0 FD | 	call	#_fatfs_cc_deselect_1207
2ddc8     64 12 06 F6 | 	mov	arg01, #100
2ddcc     E0 93 BF FD | 	call	#__system___waitus
2ddd0     14 4E 05 F1 | 	add	fp, #20
2ddd4     A7 12 02 F6 | 	mov	arg01, fp
2ddd8     14 4E 85 F1 | 	sub	fp, #20
2dddc     0A 14 06 F6 | 	mov	arg02, #10
2dde0     F0 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1197
2dde4     0C 4E 05 F1 | 	add	fp, #12
2dde8     A7 00 48 FC | 	wrbyte	#0, fp
2ddec     0C 4E 85 F1 | 	sub	fp, #12
2ddf0     00 12 06 F6 | 	mov	arg01, #0
2ddf4     00 14 06 F6 | 	mov	arg02, #0
2ddf8     B0 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1221
2ddfc     FD 18 E2 F8 | 	getbyte	arg04, result1, #0
2de00     01 18 0E F2 | 	cmp	arg04, #1 wz
2de04     B8 03 90 5D |  if_ne	jmp	#LR__4427
2de08     08 12 06 F6 | 	mov	arg01, #8
2de0c     AA 15 06 F6 | 	mov	arg02, #426
2de10     98 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1221
2de14     FD FA E1 F8 | 	getbyte	result1, result1, #0
2de18     01 FA 0D F2 | 	cmp	result1, #1 wz
2de1c     98 01 90 5D |  if_ne	jmp	#LR__4413
2de20     14 4E 05 F1 | 	add	fp, #20
2de24     A7 12 02 F6 | 	mov	arg01, fp
2de28     14 4E 85 F1 | 	sub	fp, #20
2de2c     04 14 06 F6 | 	mov	arg02, #4
2de30     A0 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1197
2de34     16 4E 05 F1 | 	add	fp, #22
2de38     A7 2C C2 FA | 	rdbyte	local04, fp
2de3c     16 4E 85 F1 | 	sub	fp, #22
2de40     01 2C 0E F2 | 	cmp	local04, #1 wz
2de44     17 4E 05 A1 |  if_e	add	fp, #23
2de48     A7 2A C2 AA |  if_e	rdbyte	local03, fp
2de4c     17 4E 85 A1 |  if_e	sub	fp, #23
2de50     AA 2A 0E A2 |  if_e	cmp	local03, #170 wz
2de54     68 03 90 5D |  if_ne	jmp	#LR__4426
2de58                 | ' 				for (tmr = 1000; tmr; tmr--) {
2de58     18 4E 05 F1 | 	add	fp, #24
2de5c     01 00 80 FF 
2de60     A7 D0 6B FC | 	wrlong	##1000, fp
2de64     18 4E 85 F1 | 	sub	fp, #24
2de68                 | LR__4410
2de68     18 4E 05 F1 | 	add	fp, #24
2de6c     A7 26 0A FB | 	rdlong	local01, fp wz
2de70     18 4E 85 F1 | 	sub	fp, #24
2de74     3C 00 90 AD |  if_e	jmp	#LR__4411
2de78     A9 12 06 F6 | 	mov	arg01, #169
2de7c     1E 14 C6 F9 | 	decod	arg02, #30
2de80     28 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1221
2de84     FD 2C 02 F6 | 	mov	local04, result1
2de88     07 2C 4E F7 | 	zerox	local04, #7 wz
2de8c     24 00 90 AD |  if_e	jmp	#LR__4411
2de90     01 00 00 FF 
2de94     E8 13 06 F6 | 	mov	arg01, ##1000
2de98     14 93 BF FD | 	call	#__system___waitus
2de9c     18 4E 05 F1 | 	add	fp, #24
2dea0     A7 2C 02 FB | 	rdlong	local04, fp
2dea4     01 2C 86 F1 | 	sub	local04, #1
2dea8     A7 2C 62 FC | 	wrlong	local04, fp
2deac     18 4E 85 F1 | 	sub	fp, #24
2deb0     B4 FF 9F FD | 	jmp	#LR__4410
2deb4                 | LR__4411
2deb4     18 4E 05 F1 | 	add	fp, #24
2deb8     A7 2C 0A FB | 	rdlong	local04, fp wz
2debc     18 4E 85 F1 | 	sub	fp, #24
2dec0     4C 00 90 AD |  if_e	jmp	#LR__4412
2dec4     3A 12 06 F6 | 	mov	arg01, #58
2dec8     00 14 06 F6 | 	mov	arg02, #0
2decc     DC 81 B0 FD | 	call	#_fatfs_cc_send_cmd_1221
2ded0     FD 2A 02 F6 | 	mov	local03, result1
2ded4     07 2A 4E F7 | 	zerox	local03, #7 wz
2ded8     34 00 90 5D |  if_ne	jmp	#LR__4412
2dedc     14 4E 05 F1 | 	add	fp, #20
2dee0     A7 12 02 F6 | 	mov	arg01, fp
2dee4     14 4E 85 F1 | 	sub	fp, #20
2dee8     04 14 06 F6 | 	mov	arg02, #4
2deec     E4 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1197
2def0     14 4E 05 F1 | 	add	fp, #20
2def4     A7 26 C2 FA | 	rdbyte	local01, fp
2def8     40 26 CE F7 | 	test	local01, #64 wz
2defc     0C 2C 06 56 |  if_ne	mov	local04, #12
2df00     04 2C 06 A6 |  if_e	mov	local04, #4
2df04     08 4E 85 F1 | 	sub	fp, #8
2df08     A7 2C 42 FC | 	wrbyte	local04, fp
2df0c     0C 4E 85 F1 | 	sub	fp, #12
2df10                 | LR__4412
2df10     14 2C 06 FB | 	rdlong	local04, #20
2df14     18 4E 05 F1 | 	add	fp, #24
2df18     A7 2C 62 FC | 	wrlong	local04, fp
2df1c     0C 4E 05 F1 | 	add	fp, #12
2df20     A7 2C 02 FB | 	rdlong	local04, fp
2df24     1B 2C 26 F4 | 	bith	local04, #27
2df28     A7 2C 62 FC | 	wrlong	local04, fp
2df2c     0C 4E 85 F1 | 	sub	fp, #12
2df30     A7 2C 02 FB | 	rdlong	local04, fp
2df34     18 4E 85 F1 | 	sub	fp, #24
2df38     68 78 04 FF 
2df3c     81 2D 16 F2 | 	cmp	local04, ##150000001 wc
2df40     1C 4E 05 C1 |  if_b	add	fp, #28
2df44     00 01 80 CF 
2df48     A7 08 68 CC |  if_b	wrlong	##131076, fp
2df4c     1C 4E 85 C1 |  if_b	sub	fp, #28
2df50     6C 02 90 CD |  if_b	jmp	#LR__4426
2df54     18 4E 05 F1 | 	add	fp, #24
2df58     A7 2C 02 FB | 	rdlong	local04, fp
2df5c     18 4E 85 F1 | 	sub	fp, #24
2df60     E1 F5 05 FF 
2df64     01 2C 16 F2 | 	cmp	local04, ##200000001 wc
2df68     1C 4E 05 C1 |  if_b	add	fp, #28
2df6c     00 01 80 CF 
2df70     A7 0A 68 CC |  if_b	wrlong	##131077, fp
2df74     1C 4E 85 C1 |  if_b	sub	fp, #28
2df78     44 02 90 CD |  if_b	jmp	#LR__4426
2df7c     18 4E 05 F1 | 	add	fp, #24
2df80     A7 2C 02 FB | 	rdlong	local04, fp
2df84     18 4E 85 F1 | 	sub	fp, #24
2df88     3B 58 08 FF 
2df8c     01 2C 16 F2 | 	cmp	local04, ##280000001 wc
2df90     1C 4E 05 C1 |  if_b	add	fp, #28
2df94     00 01 80 CF 
2df98     A7 0C 68 CC |  if_b	wrlong	##131078, fp
2df9c     1C 4E 85 C1 |  if_b	sub	fp, #28
2dfa0     1C 02 90 CD |  if_b	jmp	#LR__4426
2dfa4     1C 4E 05 F1 | 	add	fp, #28
2dfa8     80 01 80 FF 
2dfac     A7 10 68 FC | 	wrlong	##196616, fp
2dfb0     1C 4E 85 F1 | 	sub	fp, #28
2dfb4     08 02 90 FD | 	jmp	#LR__4426
2dfb8                 | LR__4413
2dfb8     A9 12 06 F6 | 	mov	arg01, #169
2dfbc     00 14 06 F6 | 	mov	arg02, #0
2dfc0     E8 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1221
2dfc4     FD 2C E2 F8 | 	getbyte	local04, result1, #0
2dfc8     02 2C 16 F2 | 	cmp	local04, #2 wc
2dfcc     18 00 90 3D |  if_ae	jmp	#LR__4414
2dfd0     0C 4E 05 F1 | 	add	fp, #12
2dfd4     A7 04 48 FC | 	wrbyte	#2, fp
2dfd8     04 4E 05 F1 | 	add	fp, #4
2dfdc     A7 52 49 FC | 	wrbyte	#169, fp
2dfe0     10 4E 85 F1 | 	sub	fp, #16
2dfe4     14 00 90 FD | 	jmp	#LR__4415
2dfe8                 | LR__4414
2dfe8     0C 4E 05 F1 | 	add	fp, #12
2dfec     A7 02 48 FC | 	wrbyte	#1, fp
2dff0     04 4E 05 F1 | 	add	fp, #4
2dff4     A7 02 48 FC | 	wrbyte	#1, fp
2dff8     10 4E 85 F1 | 	sub	fp, #16
2dffc                 | LR__4415
2dffc                 | ' 				ty =  0x01 ; cmd =  (1) ;
2dffc                 | ' 			}
2dffc                 | ' 			for (tmr = 1000; tmr; tmr--) {
2dffc     18 4E 05 F1 | 	add	fp, #24
2e000     01 00 80 FF 
2e004     A7 D0 6B FC | 	wrlong	##1000, fp
2e008     18 4E 85 F1 | 	sub	fp, #24
2e00c                 | LR__4416
2e00c     18 4E 05 F1 | 	add	fp, #24
2e010     A7 2A 0A FB | 	rdlong	local03, fp wz
2e014     18 4E 85 F1 | 	sub	fp, #24
2e018     44 00 90 AD |  if_e	jmp	#LR__4417
2e01c     10 4E 05 F1 | 	add	fp, #16
2e020     A7 12 C2 FA | 	rdbyte	arg01, fp
2e024     10 4E 85 F1 | 	sub	fp, #16
2e028     00 14 06 F6 | 	mov	arg02, #0
2e02c     7C 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1221
2e030     FD 2C 02 F6 | 	mov	local04, result1
2e034     07 2C 4E F7 | 	zerox	local04, #7 wz
2e038     24 00 90 AD |  if_e	jmp	#LR__4417
2e03c     01 00 00 FF 
2e040     E8 13 06 F6 | 	mov	arg01, ##1000
2e044     68 91 BF FD | 	call	#__system___waitus
2e048     18 4E 05 F1 | 	add	fp, #24
2e04c     A7 2C 02 FB | 	rdlong	local04, fp
2e050     01 2C 86 F1 | 	sub	local04, #1
2e054     A7 2C 62 FC | 	wrlong	local04, fp
2e058     18 4E 85 F1 | 	sub	fp, #24
2e05c     AC FF 9F FD | 	jmp	#LR__4416
2e060                 | LR__4417
2e060     18 4E 05 F1 | 	add	fp, #24
2e064     A7 2C 0A FB | 	rdlong	local04, fp wz
2e068     18 4E 85 F1 | 	sub	fp, #24
2e06c     14 00 90 AD |  if_e	jmp	#LR__4418
2e070     10 12 06 F6 | 	mov	arg01, #16
2e074     09 14 C6 F9 | 	decod	arg02, #9
2e078     30 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1221
2e07c     07 FA 4D F7 | 	zerox	result1, #7 wz
2e080     0C 00 90 AD |  if_e	jmp	#LR__4419
2e084                 | LR__4418
2e084     0C 4E 05 F1 | 	add	fp, #12
2e088     A7 00 48 FC | 	wrbyte	#0, fp
2e08c     0C 4E 85 F1 | 	sub	fp, #12
2e090                 | LR__4419
2e090     14 2C 06 FB | 	rdlong	local04, #20
2e094     18 4E 05 F1 | 	add	fp, #24
2e098     A7 2C 62 FC | 	wrlong	local04, fp
2e09c     18 4E 85 F1 | 	sub	fp, #24
2e0a0     F0 FA 02 FF 
2e0a4     01 2D 16 F2 | 	cmp	local04, ##100000001 wc
2e0a8     18 00 90 3D |  if_ae	jmp	#LR__4420
2e0ac     24 4E 05 F1 | 	add	fp, #36
2e0b0     A7 2C 02 FB | 	rdlong	local04, fp
2e0b4     1B 2C 26 F4 | 	bith	local04, #27
2e0b8     A7 2C 62 FC | 	wrlong	local04, fp
2e0bc     24 4E 85 F1 | 	sub	fp, #36
2e0c0     2C 00 90 FD | 	jmp	#LR__4421
2e0c4                 | LR__4420
2e0c4     18 4E 05 F1 | 	add	fp, #24
2e0c8     A7 2C 02 FB | 	rdlong	local04, fp
2e0cc     18 4E 85 F1 | 	sub	fp, #24
2e0d0     E1 F5 05 FF 
2e0d4     01 2C 16 F2 | 	cmp	local04, ##200000001 wc
2e0d8     24 4E 05 C1 |  if_b	add	fp, #36
2e0dc     A7 2C 02 CB |  if_b	rdlong	local04, fp
2e0e0     80 00 04 CF 
2e0e4     00 2C 46 C5 |  if_b	or	local04, ##134283264
2e0e8     A7 2C 62 CC |  if_b	wrlong	local04, fp
2e0ec     24 4E 85 C1 |  if_b	sub	fp, #36
2e0f0                 | LR__4421
2e0f0     18 4E 05 F1 | 	add	fp, #24
2e0f4     A7 2C 02 FB | 	rdlong	local04, fp
2e0f8     18 4E 85 F1 | 	sub	fp, #24
2e0fc     F0 FA 02 FF 
2e100     01 2D 16 F2 | 	cmp	local04, ##100000001 wc
2e104     1C 4E 05 C1 |  if_b	add	fp, #28
2e108     00 01 80 CF 
2e10c     A7 08 68 CC |  if_b	wrlong	##131076, fp
2e110     1C 4E 85 C1 |  if_b	sub	fp, #28
2e114     A8 00 90 CD |  if_b	jmp	#LR__4425
2e118     18 4E 05 F1 | 	add	fp, #24
2e11c     A7 2C 02 FB | 	rdlong	local04, fp
2e120     18 4E 85 F1 | 	sub	fp, #24
2e124     68 78 04 FF 
2e128     81 2D 16 F2 | 	cmp	local04, ##150000001 wc
2e12c     1C 4E 05 C1 |  if_b	add	fp, #28
2e130     80 01 80 CF 
2e134     A7 0C 68 CC |  if_b	wrlong	##196614, fp
2e138     1C 4E 85 C1 |  if_b	sub	fp, #28
2e13c     80 00 90 CD |  if_b	jmp	#LR__4424
2e140     18 4E 05 F1 | 	add	fp, #24
2e144     A7 2C 02 FB | 	rdlong	local04, fp
2e148     18 4E 85 F1 | 	sub	fp, #24
2e14c     E1 F5 05 FF 
2e150     01 2C 16 F2 | 	cmp	local04, ##200000001 wc
2e154     1C 4E 05 C1 |  if_b	add	fp, #28
2e158     00 02 80 CF 
2e15c     A7 10 68 CC |  if_b	wrlong	##262152, fp
2e160     1C 4E 85 C1 |  if_b	sub	fp, #28
2e164     58 00 90 CD |  if_b	jmp	#LR__4423
2e168     18 4E 05 F1 | 	add	fp, #24
2e16c     A7 2C 02 FB | 	rdlong	local04, fp
2e170     18 4E 85 F1 | 	sub	fp, #24
2e174     59 73 07 FF 
2e178     81 2C 16 F2 | 	cmp	local04, ##250000001 wc
2e17c     1C 4E 05 C1 |  if_b	add	fp, #28
2e180     80 02 80 CF 
2e184     A7 14 68 CC |  if_b	wrlong	##327690, fp
2e188     1C 4E 85 C1 |  if_b	sub	fp, #28
2e18c     30 00 90 CD |  if_b	jmp	#LR__4422
2e190     18 4E 05 F1 | 	add	fp, #24
2e194     A7 2C 02 FB | 	rdlong	local04, fp
2e198     18 4E 85 F1 | 	sub	fp, #24
2e19c     D1 F0 08 FF 
2e1a0     01 2D 16 F2 | 	cmp	local04, ##300000001 wc
2e1a4     1C 4E 05 C1 |  if_b	add	fp, #28
2e1a8     00 03 80 CF 
2e1ac     A7 18 68 CC |  if_b	wrlong	##393228, fp
2e1b0     1C 4E 85 F3 | 	sumc	fp, #28
2e1b4     80 03 80 3F 
2e1b8     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
2e1bc     1C 4E 85 31 |  if_ae	sub	fp, #28
2e1c0                 | LR__4422
2e1c0                 | LR__4423
2e1c0                 | LR__4424
2e1c0                 | LR__4425
2e1c0                 | LR__4426
2e1c0                 | LR__4427
2e1c0     0C 4E 05 F1 | 	add	fp, #12
2e1c4     A7 2C C2 FA | 	rdbyte	local04, fp
2e1c8     01 00 00 FF 
2e1cc     21 E4 05 F1 | 	add	objptr, ##545
2e1d0     F2 2C 42 FC | 	wrbyte	local04, objptr
2e1d4     A7 26 CA FA | 	rdbyte	local01, fp wz
2e1d8     00 2C 06 56 |  if_ne	mov	local04, #0
2e1dc     01 2C 06 A6 |  if_e	mov	local04, #1
2e1e0     20 4E 05 F1 | 	add	fp, #32
2e1e4     A7 2C 42 FC | 	wrbyte	local04, fp
2e1e8     A7 2C C2 FA | 	rdbyte	local04, fp
2e1ec     2C 4E 85 F1 | 	sub	fp, #44
2e1f0     01 E4 85 F1 | 	sub	objptr, #1
2e1f4     F2 2C 42 FC | 	wrbyte	local04, objptr
2e1f8     01 00 00 FF 
2e1fc     20 E4 85 F1 | 	sub	objptr, ##544
2e200     E8 7B B0 FD | 	call	#_fatfs_cc_deselect_1207
2e204     34 4E 05 F1 | 	add	fp, #52
2e208     A7 12 02 FB | 	rdlong	arg01, fp
2e20c     18 4E 85 F1 | 	sub	fp, #24
2e210     A7 14 02 FB | 	rdlong	arg02, fp
2e214     09 15 12 FC | 	wxpin	arg02, arg01
2e218     1C 4E 05 F1 | 	add	fp, #28
2e21c     A7 12 02 FB | 	rdlong	arg01, fp
2e220     14 4E 85 F1 | 	sub	fp, #20
2e224     A7 14 02 FB | 	rdlong	arg02, fp
2e228     09 15 02 FC | 	wrpin	arg02, arg01
2e22c                 | ' 
2e22c                 | ' 		}
2e22c                 | ' 	}
2e22c                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
2e22c                 | ' 	CardType = ty;
2e22c                 | ' 	s = ty ? 0 :  0x01 ;
2e22c                 | ' 	Stat = s;
2e22c                 | ' 
2e22c                 | ' 	deselect();
2e22c                 | ' 
2e22c                 | ' 
2e22c                 | ' 	_wxpin( PIN_CLK, ck_div );
2e22c                 | ' 	_wrpin( PIN_DI, spm_tx );
2e22c                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
2e22c                 | ' 	return s;
2e22c     08 4E 05 F1 | 	add	fp, #8
2e230     A7 FA C1 FA | 	rdbyte	result1, fp
2e234     2C 4E 85 F1 | 	sub	fp, #44
2e238                 | LR__4428
2e238     A7 F0 03 F6 | 	mov	ptra, fp
2e23c     B2 00 A0 FD | 	call	#popregs_
2e240                 | _fatfs_cc_disk_initialize_ret
2e240     2D 00 64 FD | 	ret
2e244                 | 
2e244                 | _fatfs_cc_disk_read
2e244     05 4A 05 F6 | 	mov	COUNT_, #5
2e248     A8 00 A0 FD | 	call	#pushregs_
2e24c     0A 27 02 F6 | 	mov	local01, arg02
2e250     0B 29 02 F6 | 	mov	local02, arg03
2e254     0C 2B 02 F6 | 	mov	local03, arg04
2e258     00 12 0E F2 | 	cmp	arg01, #0 wz
2e25c     01 FA 05 56 |  if_ne	mov	result1, #1
2e260                 | ' 
2e260                 | ' 	return Stat;
2e260     01 00 00 AF 
2e264     20 E4 05 A1 |  if_e	add	objptr, ##544
2e268     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2e26c     01 00 00 AF 
2e270     20 E4 85 A1 |  if_e	sub	objptr, ##544
2e274     FD FA E1 F8 | 	getbyte	result1, result1, #0
2e278     01 FA CD F7 | 	test	result1, #1 wz
2e27c     03 FA 05 56 |  if_ne	mov	result1, #3
2e280     84 00 90 5D |  if_ne	jmp	#LR__4432
2e284     01 00 00 FF 
2e288     21 E4 05 F1 | 	add	objptr, ##545
2e28c     F2 2C C2 FA | 	rdbyte	local04, objptr
2e290     01 00 00 FF 
2e294     21 E4 85 F1 | 	sub	objptr, ##545
2e298     08 2C CE F7 | 	test	local04, #8 wz
2e29c     09 28 66 A0 |  if_e	shl	local02, #9
2e2a0     02 2A 16 F2 | 	cmp	local03, #2 wc
2e2a4     12 2C 06 36 |  if_ae	mov	local04, #18
2e2a8     11 2C 06 C6 |  if_b	mov	local04, #17
2e2ac     14 15 02 F6 | 	mov	arg02, local02
2e2b0     16 13 02 F6 | 	mov	arg01, local04
2e2b4     F4 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1221
2e2b8     FD 2E 02 F6 | 	mov	local05, result1
2e2bc     07 2E 4E F7 | 	zerox	local05, #7 wz
2e2c0     30 00 90 5D |  if_ne	jmp	#LR__4431
2e2c4                 | ' 		do {
2e2c4                 | LR__4430
2e2c4     13 13 02 F6 | 	mov	arg01, local01
2e2c8     09 14 C6 F9 | 	decod	arg02, #9
2e2cc     30 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1215
2e2d0     00 FA 0D F2 | 	cmp	result1, #0 wz
2e2d4     01 00 00 5F 
2e2d8     00 26 06 51 |  if_ne	add	local01, ##512
2e2dc     F9 2B 6E 5B |  if_ne	djnz	local03, #LR__4430
2e2e0     16 2D E2 F8 | 	getbyte	local04, local04, #0
2e2e4     12 2C 0E F2 | 	cmp	local04, #18 wz
2e2e8     0C 12 06 A6 |  if_e	mov	arg01, #12
2e2ec     00 14 06 A6 |  if_e	mov	arg02, #0
2e2f0     B8 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_1221
2e2f4                 | LR__4431
2e2f4     F4 7A B0 FD | 	call	#_fatfs_cc_deselect_1207
2e2f8                 | ' 	}
2e2f8                 | ' 	deselect();
2e2f8                 | ' 
2e2f8                 | ' 	return count ? RES_ERROR : RES_OK;
2e2f8     00 2A 0E F2 | 	cmp	local03, #0 wz
2e2fc     01 2E 06 56 |  if_ne	mov	local05, #1
2e300     00 2E 06 A6 |  if_e	mov	local05, #0
2e304     17 FB 01 F6 | 	mov	result1, local05
2e308                 | LR__4432
2e308     A7 F0 03 F6 | 	mov	ptra, fp
2e30c     B2 00 A0 FD | 	call	#popregs_
2e310                 | _fatfs_cc_disk_read_ret
2e310     2D 00 64 FD | 	ret
2e314                 | 
2e314                 | _fatfs_cc_disk_write
2e314     04 4A 05 F6 | 	mov	COUNT_, #4
2e318     A8 00 A0 FD | 	call	#pushregs_
2e31c     0A 27 02 F6 | 	mov	local01, arg02
2e320     0C 29 02 F6 | 	mov	local02, arg04
2e324     0B 2B 02 F6 | 	mov	local03, arg03
2e328     00 12 0E F2 | 	cmp	arg01, #0 wz
2e32c     01 FA 05 56 |  if_ne	mov	result1, #1
2e330                 | ' 
2e330                 | ' 	return Stat;
2e330     01 00 00 AF 
2e334     20 E4 05 A1 |  if_e	add	objptr, ##544
2e338     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2e33c     01 00 00 AF 
2e340     20 E4 85 A1 |  if_e	sub	objptr, ##544
2e344     FD FA E1 F8 | 	getbyte	result1, result1, #0
2e348     01 FA CD F7 | 	test	result1, #1 wz
2e34c     03 FA 05 56 |  if_ne	mov	result1, #3
2e350     D4 00 90 5D |  if_ne	jmp	#LR__4444
2e354     01 00 00 FF 
2e358     21 E4 05 F1 | 	add	objptr, ##545
2e35c     F2 16 C2 FA | 	rdbyte	arg03, objptr
2e360     01 00 00 FF 
2e364     21 E4 85 F1 | 	sub	objptr, ##545
2e368     08 16 CE F7 | 	test	arg03, #8 wz
2e36c     09 2A 66 A0 |  if_e	shl	local03, #9
2e370     01 28 0E F2 | 	cmp	local02, #1 wz
2e374     30 00 90 5D |  if_ne	jmp	#LR__4440
2e378     18 12 06 F6 | 	mov	arg01, #24
2e37c     15 15 02 F6 | 	mov	arg02, local03
2e380     28 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1221
2e384     FD 2C 02 F6 | 	mov	local04, result1
2e388     07 2C 4E F7 | 	zerox	local04, #7 wz
2e38c     84 00 90 5D |  if_ne	jmp	#LR__4443
2e390     13 13 02 F6 | 	mov	arg01, local01
2e394     FE 14 06 F6 | 	mov	arg02, #254
2e398     44 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_1217
2e39c     00 FA 0D F2 | 	cmp	result1, #0 wz
2e3a0     00 28 06 56 |  if_ne	mov	local02, #0
2e3a4     6C 00 90 FD | 	jmp	#LR__4443
2e3a8                 | LR__4440
2e3a8     01 00 00 FF 
2e3ac     21 E4 05 F1 | 	add	objptr, ##545
2e3b0     F2 2C C2 FA | 	rdbyte	local04, objptr
2e3b4     01 00 00 FF 
2e3b8     21 E4 85 F1 | 	sub	objptr, ##545
2e3bc     06 2C CE F7 | 	test	local04, #6 wz
2e3c0     97 12 06 56 |  if_ne	mov	arg01, #151
2e3c4     14 15 02 56 |  if_ne	mov	arg02, local02
2e3c8     E0 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_1221
2e3cc     15 15 02 F6 | 	mov	arg02, local03
2e3d0     19 12 06 F6 | 	mov	arg01, #25
2e3d4     D4 7C B0 FD | 	call	#_fatfs_cc_send_cmd_1221
2e3d8     FD 2C 02 F6 | 	mov	local04, result1
2e3dc     07 2C 4E F7 | 	zerox	local04, #7 wz
2e3e0     30 00 90 5D |  if_ne	jmp	#LR__4442
2e3e4                 | ' 			do {
2e3e4                 | LR__4441
2e3e4     13 13 02 F6 | 	mov	arg01, local01
2e3e8     FC 14 06 F6 | 	mov	arg02, #252
2e3ec     F0 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1217
2e3f0     00 FA 0D F2 | 	cmp	result1, #0 wz
2e3f4     01 00 00 5F 
2e3f8     00 26 06 51 |  if_ne	add	local01, ##512
2e3fc     F9 29 6E 5B |  if_ne	djnz	local02, #LR__4441
2e400     00 12 06 F6 | 	mov	arg01, #0
2e404     FD 14 06 F6 | 	mov	arg02, #253
2e408     D4 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1217
2e40c     00 FA 0D F2 | 	cmp	result1, #0 wz
2e410     01 28 06 A6 |  if_e	mov	local02, #1
2e414                 | LR__4442
2e414                 | LR__4443
2e414     D4 79 B0 FD | 	call	#_fatfs_cc_deselect_1207
2e418                 | ' 				count = 1;
2e418                 | ' 		}
2e418                 | ' 	}
2e418                 | ' 	deselect();
2e418                 | ' 
2e418                 | ' 	return count ? RES_ERROR : RES_OK;
2e418     00 28 0E F2 | 	cmp	local02, #0 wz
2e41c     01 2C 06 56 |  if_ne	mov	local04, #1
2e420     00 2C 06 A6 |  if_e	mov	local04, #0
2e424     16 FB 01 F6 | 	mov	result1, local04
2e428                 | LR__4444
2e428     A7 F0 03 F6 | 	mov	ptra, fp
2e42c     B2 00 A0 FD | 	call	#popregs_
2e430                 | _fatfs_cc_disk_write_ret
2e430     2D 00 64 FD | 	ret
2e434                 | 
2e434                 | _fatfs_cc_disk_ioctl
2e434     01 4A 05 F6 | 	mov	COUNT_, #1
2e438     A8 00 A0 FD | 	call	#pushregs_
2e43c     30 F0 07 F1 | 	add	ptra, #48
2e440     04 4E 05 F1 | 	add	fp, #4
2e444     A7 12 42 FC | 	wrbyte	arg01, fp
2e448     04 4E 05 F1 | 	add	fp, #4
2e44c     A7 14 42 FC | 	wrbyte	arg02, fp
2e450     04 4E 05 F1 | 	add	fp, #4
2e454     A7 16 62 FC | 	wrlong	arg03, fp
2e458     08 4E 85 F1 | 	sub	fp, #8
2e45c     A7 12 CA FA | 	rdbyte	arg01, fp wz
2e460     04 4E 85 F1 | 	sub	fp, #4
2e464     01 FA 05 56 |  if_ne	mov	result1, #1
2e468                 | ' 
2e468                 | ' 	return Stat;
2e468     01 00 00 AF 
2e46c     20 E4 05 A1 |  if_e	add	objptr, ##544
2e470     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2e474     01 00 00 AF 
2e478     20 E4 85 A1 |  if_e	sub	objptr, ##544
2e47c     FD FA E1 F8 | 	getbyte	result1, result1, #0
2e480     01 FA CD F7 | 	test	result1, #1 wz
2e484     03 FA 05 56 |  if_ne	mov	result1, #3
2e488     E4 01 90 5D |  if_ne	jmp	#LR__4458
2e48c     10 4E 05 F1 | 	add	fp, #16
2e490     A7 02 68 FC | 	wrlong	#1, fp
2e494                 | ' 
2e494                 | ' 	res = RES_ERROR;
2e494                 | ' 	switch (ctrl) {
2e494     08 4E 85 F1 | 	sub	fp, #8
2e498     A7 26 C2 FA | 	rdbyte	local01, fp
2e49c     08 4E 85 F1 | 	sub	fp, #8
2e4a0     04 26 26 F3 | 	fle	local01, #4
2e4a4     30 26 62 FD | 	jmprel	local01
2e4a8                 | LR__4450
2e4a8     10 00 90 FD | 	jmp	#LR__4451
2e4ac     24 00 90 FD | 	jmp	#LR__4452
2e4b0     A0 01 90 FD | 	jmp	#LR__4456
2e4b4     80 01 90 FD | 	jmp	#LR__4455
2e4b8     98 01 90 FD | 	jmp	#LR__4456
2e4bc                 | LR__4451
2e4bc     B0 79 B0 FD | 	call	#_fatfs_cc_select_1211
2e4c0     00 FA 0D F2 | 	cmp	result1, #0 wz
2e4c4     10 4E 05 51 |  if_ne	add	fp, #16
2e4c8     A7 00 68 5C |  if_ne	wrlong	#0, fp
2e4cc     10 4E 85 51 |  if_ne	sub	fp, #16
2e4d0                 | ' 			break;
2e4d0     8C 01 90 FD | 	jmp	#LR__4457
2e4d4                 | LR__4452
2e4d4     09 12 06 F6 | 	mov	arg01, #9
2e4d8     00 14 06 F6 | 	mov	arg02, #0
2e4dc     CC 7B B0 FD | 	call	#_fatfs_cc_send_cmd_1221
2e4e0     FD 26 02 F6 | 	mov	local01, result1
2e4e4     07 26 4E F7 | 	zerox	local01, #7 wz
2e4e8     74 01 90 5D |  if_ne	jmp	#LR__4457
2e4ec     18 4E 05 F1 | 	add	fp, #24
2e4f0     A7 12 02 F6 | 	mov	arg01, fp
2e4f4     18 4E 85 F1 | 	sub	fp, #24
2e4f8     10 14 06 F6 | 	mov	arg02, #16
2e4fc     00 7A B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1215
2e500     00 FA 0D F2 | 	cmp	result1, #0 wz
2e504     58 01 90 AD |  if_e	jmp	#LR__4457
2e508     18 4E 05 F1 | 	add	fp, #24
2e50c     A7 26 C2 FA | 	rdbyte	local01, fp
2e510     18 4E 85 F1 | 	sub	fp, #24
2e514     06 26 46 F0 | 	shr	local01, #6
2e518     01 26 0E F2 | 	cmp	local01, #1 wz
2e51c     5C 00 90 5D |  if_ne	jmp	#LR__4453
2e520     21 4E 05 F1 | 	add	fp, #33
2e524     A7 26 C2 FA | 	rdbyte	local01, fp
2e528     01 4E 85 F1 | 	sub	fp, #1
2e52c     A7 FA C1 FA | 	rdbyte	result1, fp
2e530     FD FA 31 F9 | 	getword	result1, result1, #0
2e534     08 FA 65 F0 | 	shl	result1, #8
2e538     FD 26 02 F1 | 	add	local01, result1
2e53c     01 4E 85 F1 | 	sub	fp, #1
2e540     A7 FA C1 FA | 	rdbyte	result1, fp
2e544     3F FA 05 F5 | 	and	result1, #63
2e548     10 FA 65 F0 | 	shl	result1, #16
2e54c     FD 26 02 F1 | 	add	local01, result1
2e550     01 26 06 F1 | 	add	local01, #1
2e554     09 4E 05 F1 | 	add	fp, #9
2e558     A7 26 62 FC | 	wrlong	local01, fp
2e55c     1C 4E 85 F1 | 	sub	fp, #28
2e560     A7 26 02 FB | 	rdlong	local01, fp
2e564     1C 4E 05 F1 | 	add	fp, #28
2e568     A7 FA 01 FB | 	rdlong	result1, fp
2e56c     28 4E 85 F1 | 	sub	fp, #40
2e570     0A FA 65 F0 | 	shl	result1, #10
2e574     13 FB 61 FC | 	wrlong	result1, local01
2e578     AC 00 90 FD | 	jmp	#LR__4454
2e57c                 | LR__4453
2e57c     1D 4E 05 F1 | 	add	fp, #29
2e580     A7 26 C2 FA | 	rdbyte	local01, fp
2e584     13 27 42 F8 | 	getnib	local01, local01, #0
2e588     05 4E 05 F1 | 	add	fp, #5
2e58c     A7 FA C1 FA | 	rdbyte	result1, fp
2e590     80 FA 05 F5 | 	and	result1, #128
2e594     07 FA C5 F0 | 	sar	result1, #7
2e598     FD 26 02 F1 | 	add	local01, result1
2e59c     01 4E 85 F1 | 	sub	fp, #1
2e5a0     A7 FA C1 FA | 	rdbyte	result1, fp
2e5a4     03 FA 05 F5 | 	and	result1, #3
2e5a8     01 FA 65 F0 | 	shl	result1, #1
2e5ac     FD 26 02 F1 | 	add	local01, result1
2e5b0     02 26 06 F1 | 	add	local01, #2
2e5b4     0D 4E 85 F1 | 	sub	fp, #13
2e5b8     A7 26 42 FC | 	wrbyte	local01, fp
2e5bc     0C 4E 05 F1 | 	add	fp, #12
2e5c0     A7 26 C2 FA | 	rdbyte	local01, fp
2e5c4     06 26 46 F0 | 	shr	local01, #6
2e5c8     01 4E 85 F1 | 	sub	fp, #1
2e5cc     A7 FA C1 FA | 	rdbyte	result1, fp
2e5d0     FD FA 31 F9 | 	getword	result1, result1, #0
2e5d4     02 FA 65 F0 | 	shl	result1, #2
2e5d8     FD 26 02 F1 | 	add	local01, result1
2e5dc     01 4E 85 F1 | 	sub	fp, #1
2e5e0     A7 FA C1 FA | 	rdbyte	result1, fp
2e5e4     03 FA 05 F5 | 	and	result1, #3
2e5e8     FD FA 31 F9 | 	getword	result1, result1, #0
2e5ec     0A FA 65 F0 | 	shl	result1, #10
2e5f0     FD 26 02 F1 | 	add	local01, result1
2e5f4     01 26 06 F1 | 	add	local01, #1
2e5f8     0A 4E 05 F1 | 	add	fp, #10
2e5fc     A7 26 62 FC | 	wrlong	local01, fp
2e600     1C 4E 85 F1 | 	sub	fp, #28
2e604     A7 26 02 FB | 	rdlong	local01, fp
2e608     1C 4E 05 F1 | 	add	fp, #28
2e60c     A7 FA 01 FB | 	rdlong	result1, fp
2e610     14 4E 85 F1 | 	sub	fp, #20
2e614     A7 16 C2 FA | 	rdbyte	arg03, fp
2e618     14 4E 85 F1 | 	sub	fp, #20
2e61c     09 16 86 F1 | 	sub	arg03, #9
2e620     0B FB 61 F0 | 	shl	result1, arg03
2e624     13 FB 61 FC | 	wrlong	result1, local01
2e628                 | LR__4454
2e628     10 4E 05 F1 | 	add	fp, #16
2e62c     A7 00 68 FC | 	wrlong	#0, fp
2e630     10 4E 85 F1 | 	sub	fp, #16
2e634                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
2e634                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
2e634                 | ' 					*(LBA_t*)buff = cs << (n - 9);
2e634                 | ' 				}
2e634                 | ' 				res = RES_OK;
2e634                 | ' 			}
2e634                 | ' 			break;
2e634     28 00 90 FD | 	jmp	#LR__4457
2e638                 | LR__4455
2e638     0C 4E 05 F1 | 	add	fp, #12
2e63c     A7 26 02 FB | 	rdlong	local01, fp
2e640     13 01 69 FC | 	wrlong	#128, local01
2e644     04 4E 05 F1 | 	add	fp, #4
2e648     A7 00 68 FC | 	wrlong	#0, fp
2e64c     10 4E 85 F1 | 	sub	fp, #16
2e650                 | ' 			*(DWORD*)buff = 128;
2e650                 | ' 			res = RES_OK;
2e650                 | ' 			break;
2e650     0C 00 90 FD | 	jmp	#LR__4457
2e654                 | LR__4456
2e654     10 4E 05 F1 | 	add	fp, #16
2e658     A7 08 68 FC | 	wrlong	#4, fp
2e65c     10 4E 85 F1 | 	sub	fp, #16
2e660                 | LR__4457
2e660     88 77 B0 FD | 	call	#_fatfs_cc_deselect_1207
2e664                 | ' 			res = RES_PARERR;
2e664                 | ' 	}
2e664                 | ' 
2e664                 | ' 	deselect();
2e664                 | ' 
2e664                 | ' 	return res;
2e664     10 4E 05 F1 | 	add	fp, #16
2e668     A7 FA 01 FB | 	rdlong	result1, fp
2e66c     10 4E 85 F1 | 	sub	fp, #16
2e670                 | LR__4458
2e670     A7 F0 03 F6 | 	mov	ptra, fp
2e674     B2 00 A0 FD | 	call	#popregs_
2e678                 | _fatfs_cc_disk_ioctl_ret
2e678     2D 00 64 FD | 	ret
2e67c                 | 
2e67c                 | _fatfs_cc_disk_setpins
2e67c     00 12 0E F2 | 	cmp	arg01, #0 wz
2e680     01 FA 65 56 |  if_ne	neg	result1, #1
2e684     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
2e688     01 00 00 FF 
2e68c     10 E4 05 F1 | 	add	objptr, ##528
2e690     F2 14 62 FC | 	wrlong	arg02, objptr
2e694     04 E4 05 F1 | 	add	objptr, #4
2e698     F2 16 62 FC | 	wrlong	arg03, objptr
2e69c     04 E4 05 F1 | 	add	objptr, #4
2e6a0     F2 18 62 FC | 	wrlong	arg04, objptr
2e6a4     04 E4 05 F1 | 	add	objptr, #4
2e6a8     F2 1A 62 FC | 	wrlong	arg05, objptr
2e6ac     01 00 00 FF 
2e6b0     1C E4 85 F1 | 	sub	objptr, ##540
2e6b4     00 FA 05 F6 | 	mov	result1, #0
2e6b8                 | _fatfs_cc_disk_setpins_ret
2e6b8     2D 00 64 FD | 	ret
2e6bc                 | 
2e6bc                 | _fatfs_cc_tchar2uni
2e6bc     09 01 02 FB | 	rdlong	_var01, arg01
2e6c0     00 03 02 F6 | 	mov	_var02, _var01
2e6c4     01 00 06 F1 | 	add	_var01, #1
2e6c8     00 05 02 F6 | 	mov	_var03, _var01
2e6cc     01 07 C2 FA | 	rdbyte	_var04, _var02
2e6d0     80 06 CE F7 | 	test	_var04, #128 wz
2e6d4     E8 00 90 AD |  if_e	jmp	#LR__4467
2e6d8     03 09 02 F6 | 	mov	_var05, _var04
2e6dc     E0 08 06 F5 | 	and	_var05, #224
2e6e0     C0 08 0E F2 | 	cmp	_var05, #192 wz
2e6e4     1F 06 06 A5 |  if_e	and	_var04, #31
2e6e8     01 0A 06 A6 |  if_e	mov	_var06, #1
2e6ec     34 00 90 AD |  if_e	jmp	#LR__4461
2e6f0     03 09 02 F6 | 	mov	_var05, _var04
2e6f4     F0 08 06 F5 | 	and	_var05, #240
2e6f8     E0 08 0E F2 | 	cmp	_var05, #224 wz
2e6fc     03 07 42 A8 |  if_e	getnib	_var04, _var04, #0
2e700     02 0A 06 A6 |  if_e	mov	_var06, #2
2e704     1C 00 90 AD |  if_e	jmp	#LR__4460
2e708     03 09 02 F6 | 	mov	_var05, _var04
2e70c     F8 08 06 F5 | 	and	_var05, #248
2e710     F0 08 0E F2 | 	cmp	_var05, #240 wz
2e714     07 06 06 A5 |  if_e	and	_var04, #7
2e718     03 0A 06 A6 |  if_e	mov	_var06, #3
2e71c                 | ' 			return 0xFFFFFFFF;
2e71c     01 FA 65 56 |  if_ne	neg	result1, #1
2e720     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
2e724                 | LR__4460
2e724                 | LR__4461
2e724                 | ' 		}
2e724                 | ' 		do {
2e724                 | LR__4462
2e724     02 0D C2 FA | 	rdbyte	_var07, _var03
2e728     06 09 E2 F8 | 	getbyte	_var05, _var07, #0
2e72c     C0 08 06 F5 | 	and	_var05, #192
2e730     80 08 0E F2 | 	cmp	_var05, #128 wz
2e734     01 04 06 F1 | 	add	_var03, #1
2e738     01 FA 65 56 |  if_ne	neg	result1, #1
2e73c     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
2e740     06 06 66 F0 | 	shl	_var04, #6
2e744     06 03 E2 F8 | 	getbyte	_var02, _var07, #0
2e748     3F 02 06 F5 | 	and	_var02, #63
2e74c     01 07 42 F5 | 	or	_var04, _var02
2e750     F4 0B 6E FB | 	djnz	_var06, #LR__4462
2e754     80 06 16 F2 | 	cmp	_var04, #128 wc
2e758     24 00 90 CD |  if_b	jmp	#LR__4464
2e75c     6C 00 00 FF 
2e760     00 06 16 F2 | 	cmp	_var04, ##55296 wc
2e764     0C 00 90 CD |  if_b	jmp	#LR__4463
2e768     70 00 00 FF 
2e76c     00 06 16 F2 | 	cmp	_var04, ##57344 wc
2e770     0C 00 90 CD |  if_b	jmp	#LR__4464
2e774                 | LR__4463
2e774     80 08 00 FF 
2e778     00 06 16 F2 | 	cmp	_var04, ##1114112 wc
2e77c     08 00 90 CD |  if_b	jmp	#LR__4465
2e780                 | LR__4464
2e780     01 FA 65 F6 | 	neg	result1, #1
2e784     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
2e788                 | LR__4465
2e788     80 00 00 FF 
2e78c     00 06 16 F2 | 	cmp	_var04, ##65536 wc
2e790     2C 00 90 CD |  if_b	jmp	#LR__4466
2e794     03 03 02 F6 | 	mov	_var02, _var04
2e798     80 00 00 FF 
2e79c     00 02 86 F1 | 	sub	_var02, ##65536
2e7a0     06 02 66 F0 | 	shl	_var02, #6
2e7a4     80 FF 01 FF 
2e7a8     00 02 06 F5 | 	and	_var02, ##67043328
2e7ac     6E 00 6C FF 
2e7b0     00 08 06 F6 | 	mov	_var05, ##-671032320
2e7b4     01 09 42 F5 | 	or	_var05, _var02
2e7b8     09 06 46 F7 | 	zerox	_var04, #9
2e7bc     04 07 42 F5 | 	or	_var04, _var05
2e7c0                 | LR__4466
2e7c0                 | LR__4467
2e7c0     09 05 62 FC | 	wrlong	_var03, arg01
2e7c4                 | ' 	}
2e7c4                 | ' #line 811 "ff.c"
2e7c4                 | ' 	*str = p;
2e7c4                 | ' 	return uc;
2e7c4     03 FB 01 F6 | 	mov	result1, _var04
2e7c8                 | _fatfs_cc_tchar2uni_ret
2e7c8     2D 00 64 FD | 	ret
2e7cc                 | 
2e7cc                 | _fatfs_cc_put_utf
2e7cc     80 12 16 F2 | 	cmp	arg01, #128 wc
2e7d0     18 00 90 3D |  if_ae	jmp	#LR__4470
2e7d4     01 16 16 F2 | 	cmp	arg03, #1 wc
2e7d8     00 FA 05 C6 |  if_b	mov	result1, #0
2e7dc     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2e7e0     0A 13 42 FC | 	wrbyte	arg01, arg02
2e7e4                 | ' 		*buf = (TCHAR)chr;
2e7e4                 | ' 		return 1;
2e7e4     01 FA 05 F6 | 	mov	result1, #1
2e7e8     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2e7ec                 | LR__4470
2e7ec     04 00 00 FF 
2e7f0     00 12 16 F2 | 	cmp	arg01, ##2048 wc
2e7f4     40 00 90 3D |  if_ae	jmp	#LR__4471
2e7f8     02 16 16 F2 | 	cmp	arg03, #2 wc
2e7fc     00 FA 05 C6 |  if_b	mov	result1, #0
2e800     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2e804     09 FB 01 F6 | 	mov	result1, arg01
2e808     06 FA 45 F0 | 	shr	result1, #6
2e80c     1F FA 05 F5 | 	and	result1, #31
2e810     C0 16 06 F6 | 	mov	arg03, #192
2e814     FD 16 42 F5 | 	or	arg03, result1
2e818     0A 17 42 FC | 	wrbyte	arg03, arg02
2e81c     01 14 06 F1 | 	add	arg02, #1
2e820     3F 12 06 F5 | 	and	arg01, #63
2e824     80 FA 05 F6 | 	mov	result1, #128
2e828     09 FB 41 F5 | 	or	result1, arg01
2e82c     0A FB 41 FC | 	wrbyte	result1, arg02
2e830                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
2e830                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2e830                 | ' 		return 2;
2e830     02 FA 05 F6 | 	mov	result1, #2
2e834     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2e838                 | LR__4471
2e838     80 00 00 FF 
2e83c     00 12 16 F2 | 	cmp	arg01, ##65536 wc
2e840     70 00 90 3D |  if_ae	jmp	#LR__4474
2e844     03 16 16 F2 | 	cmp	arg03, #3 wc
2e848     18 00 90 CD |  if_b	jmp	#LR__4472
2e84c     6C 00 00 FF 
2e850     00 12 16 F2 | 	cmp	arg01, ##55296 wc
2e854     14 00 90 CD |  if_b	jmp	#LR__4473
2e858     70 00 00 FF 
2e85c     00 12 16 F2 | 	cmp	arg01, ##57344 wc
2e860     08 00 90 3D |  if_ae	jmp	#LR__4473
2e864                 | LR__4472
2e864     00 FA 05 F6 | 	mov	result1, #0
2e868     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2e86c                 | LR__4473
2e86c     09 FB 59 F8 | 	getnib	result1, arg01, #3
2e870     E0 16 06 F6 | 	mov	arg03, #224
2e874     FD 16 42 F5 | 	or	arg03, result1
2e878     0A 17 42 FC | 	wrbyte	arg03, arg02
2e87c     01 14 06 F1 | 	add	arg02, #1
2e880     09 FB 01 F6 | 	mov	result1, arg01
2e884     06 FA 45 F0 | 	shr	result1, #6
2e888     3F FA 05 F5 | 	and	result1, #63
2e88c     80 16 06 F6 | 	mov	arg03, #128
2e890     FD 16 42 F5 | 	or	arg03, result1
2e894     0A 17 42 FC | 	wrbyte	arg03, arg02
2e898     01 14 06 F1 | 	add	arg02, #1
2e89c     3F 12 06 F5 | 	and	arg01, #63
2e8a0     80 FA 05 F6 | 	mov	result1, #128
2e8a4     09 FB 41 F5 | 	or	result1, arg01
2e8a8     0A FB 41 FC | 	wrbyte	result1, arg02
2e8ac                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
2e8ac                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
2e8ac                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2e8ac                 | ' 		return 3;
2e8ac     03 FA 05 F6 | 	mov	result1, #3
2e8b0     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2e8b4                 | LR__4474
2e8b4     04 16 16 F2 | 	cmp	arg03, #4 wc
2e8b8     00 FA 05 C6 |  if_b	mov	result1, #0
2e8bc     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2e8c0     09 01 02 F6 | 	mov	_var01, arg01
2e8c4     E0 01 06 F4 | 	bitl	_var01, #480
2e8c8     00 00 6C FF 
2e8cc     00 00 86 F1 | 	sub	_var01, ##-671088640
2e8d0     06 00 46 F0 | 	shr	_var01, #6
2e8d4     09 13 32 F9 | 	getword	arg01, arg01, #0
2e8d8     6E 00 00 FF 
2e8dc     00 12 86 F1 | 	sub	arg01, ##56320
2e8e0     00 08 00 FF 
2e8e4     00 00 16 F2 | 	cmp	_var01, ##1048576 wc
2e8e8     02 00 00 CF 
2e8ec     00 12 16 C2 |  if_b	cmp	arg01, ##1024 wc
2e8f0     00 FA 05 36 |  if_ae	mov	result1, #0
2e8f4     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
2e8f8     09 01 42 F5 | 	or	_var01, arg01
2e8fc     80 00 00 FF 
2e900     00 00 06 F1 | 	add	_var01, ##65536
2e904     00 FB 01 F6 | 	mov	result1, _var01
2e908     12 FA 45 F0 | 	shr	result1, #18
2e90c     07 FA 05 F5 | 	and	result1, #7
2e910     F0 16 06 F6 | 	mov	arg03, #240
2e914     FD 16 42 F5 | 	or	arg03, result1
2e918     0A 17 42 FC | 	wrbyte	arg03, arg02
2e91c     01 14 06 F1 | 	add	arg02, #1
2e920     00 FB 01 F6 | 	mov	result1, _var01
2e924     0C FA 45 F0 | 	shr	result1, #12
2e928     3F FA 05 F5 | 	and	result1, #63
2e92c     80 16 06 F6 | 	mov	arg03, #128
2e930     FD 16 42 F5 | 	or	arg03, result1
2e934     0A 17 42 FC | 	wrbyte	arg03, arg02
2e938     01 14 06 F1 | 	add	arg02, #1
2e93c     00 FB 01 F6 | 	mov	result1, _var01
2e940     06 FA 45 F0 | 	shr	result1, #6
2e944     3F FA 05 F5 | 	and	result1, #63
2e948     80 16 06 F6 | 	mov	arg03, #128
2e94c     FD 16 42 F5 | 	or	arg03, result1
2e950     0A 17 42 FC | 	wrbyte	arg03, arg02
2e954     01 14 06 F1 | 	add	arg02, #1
2e958     3F 00 06 F5 | 	and	_var01, #63
2e95c     80 FA 05 F6 | 	mov	result1, #128
2e960     00 FB 41 F5 | 	or	result1, _var01
2e964     0A FB 41 FC | 	wrbyte	result1, arg02
2e968                 | ' 	chr = (hc | chr) + 0x10000;
2e968                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
2e968                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
2e968                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
2e968                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2e968                 | ' 	return 4;
2e968     04 FA 05 F6 | 	mov	result1, #4
2e96c                 | _fatfs_cc_put_utf_ret
2e96c     2D 00 64 FD | 	ret
2e970                 | 
2e970                 | _fatfs_cc_sync_window
2e970     02 4A 05 F6 | 	mov	COUNT_, #2
2e974     A8 00 A0 FD | 	call	#pushregs_
2e978     09 27 02 F6 | 	mov	local01, arg01
2e97c     00 28 06 F6 | 	mov	local02, #0
2e980     03 26 06 F1 | 	add	local01, #3
2e984     13 FB C9 FA | 	rdbyte	result1, local01 wz
2e988     03 26 86 F1 | 	sub	local01, #3
2e98c     A4 00 90 AD |  if_e	jmp	#LR__4482
2e990     01 26 06 F1 | 	add	local01, #1
2e994     13 13 C2 FA | 	rdbyte	arg01, local01
2e998     33 26 06 F1 | 	add	local01, #51
2e99c     13 15 02 F6 | 	mov	arg02, local01
2e9a0     04 26 86 F1 | 	sub	local01, #4
2e9a4     13 17 02 FB | 	rdlong	arg03, local01
2e9a8     30 26 86 F1 | 	sub	local01, #48
2e9ac     01 18 06 F6 | 	mov	arg04, #1
2e9b0     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
2e9b4     00 FA 0D F2 | 	cmp	result1, #0 wz
2e9b8     74 00 90 5D |  if_ne	jmp	#LR__4480
2e9bc     03 26 06 F1 | 	add	local01, #3
2e9c0     13 01 48 FC | 	wrbyte	#0, local01
2e9c4     2D 26 06 F1 | 	add	local01, #45
2e9c8     13 FB 01 FB | 	rdlong	result1, local01
2e9cc     0C 26 86 F1 | 	sub	local01, #12
2e9d0     13 19 02 FB | 	rdlong	arg04, local01
2e9d4     0C FB 81 F1 | 	sub	result1, arg04
2e9d8     08 26 86 F1 | 	sub	local01, #8
2e9dc     13 19 02 FB | 	rdlong	arg04, local01
2e9e0     1C 26 86 F1 | 	sub	local01, #28
2e9e4     0C FB 11 F2 | 	cmp	result1, arg04 wc
2e9e8     48 00 90 3D |  if_ae	jmp	#LR__4481
2e9ec     02 26 06 F1 | 	add	local01, #2
2e9f0     13 19 C2 FA | 	rdbyte	arg04, local01
2e9f4     02 26 86 F1 | 	sub	local01, #2
2e9f8     02 18 0E F2 | 	cmp	arg04, #2 wz
2e9fc     34 00 90 5D |  if_ne	jmp	#LR__4481
2ea00     01 26 06 F1 | 	add	local01, #1
2ea04     13 13 C2 FA | 	rdbyte	arg01, local01
2ea08     33 26 06 F1 | 	add	local01, #51
2ea0c     13 15 02 F6 | 	mov	arg02, local01
2ea10     04 26 86 F1 | 	sub	local01, #4
2ea14     13 17 02 FB | 	rdlong	arg03, local01
2ea18     14 26 86 F1 | 	sub	local01, #20
2ea1c     13 27 02 FB | 	rdlong	local01, local01
2ea20     13 17 02 F1 | 	add	arg03, local01
2ea24     01 18 06 F6 | 	mov	arg04, #1
2ea28     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
2ea2c     04 00 90 FD | 	jmp	#LR__4481
2ea30                 | LR__4480
2ea30     01 28 06 F6 | 	mov	local02, #1
2ea34                 | LR__4481
2ea34                 | LR__4482
2ea34                 | ' 			res = FR_DISK_ERR;
2ea34                 | ' 		}
2ea34                 | ' 	}
2ea34                 | ' 	return res;
2ea34     14 FB 01 F6 | 	mov	result1, local02
2ea38     A7 F0 03 F6 | 	mov	ptra, fp
2ea3c     B2 00 A0 FD | 	call	#popregs_
2ea40                 | _fatfs_cc_sync_window_ret
2ea40     2D 00 64 FD | 	ret
2ea44                 | 
2ea44                 | _fatfs_cc_move_window
2ea44     03 4A 05 F6 | 	mov	COUNT_, #3
2ea48     A8 00 A0 FD | 	call	#pushregs_
2ea4c     09 27 02 F6 | 	mov	local01, arg01
2ea50     0A 29 02 F6 | 	mov	local02, arg02
2ea54     00 2A 06 F6 | 	mov	local03, #0
2ea58     30 26 06 F1 | 	add	local01, #48
2ea5c     13 19 02 FB | 	rdlong	arg04, local01
2ea60     30 26 86 F1 | 	sub	local01, #48
2ea64     0C 29 0A F2 | 	cmp	local02, arg04 wz
2ea68     40 00 90 AD |  if_e	jmp	#LR__4491
2ea6c     13 13 02 F6 | 	mov	arg01, local01
2ea70     FC FE BF FD | 	call	#_fatfs_cc_sync_window
2ea74     FD 2A 0A F6 | 	mov	local03, result1 wz
2ea78     30 00 90 5D |  if_ne	jmp	#LR__4490
2ea7c     01 26 06 F1 | 	add	local01, #1
2ea80     13 13 C2 FA | 	rdbyte	arg01, local01
2ea84     33 26 06 F1 | 	add	local01, #51
2ea88     13 15 02 F6 | 	mov	arg02, local01
2ea8c     14 17 02 F6 | 	mov	arg03, local02
2ea90     01 18 06 F6 | 	mov	arg04, #1
2ea94     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
2ea98     00 FA 0D F2 | 	cmp	result1, #0 wz
2ea9c     01 28 66 56 |  if_ne	neg	local02, #1
2eaa0     01 2A 06 56 |  if_ne	mov	local03, #1
2eaa4     04 26 86 F1 | 	sub	local01, #4
2eaa8     13 29 62 FC | 	wrlong	local02, local01
2eaac                 | LR__4490
2eaac                 | LR__4491
2eaac                 | ' 				sect = (LBA_t)0 - 1;
2eaac                 | ' 				res = FR_DISK_ERR;
2eaac                 | ' 			}
2eaac                 | ' 			fs->winsect = sect;
2eaac                 | ' 		}
2eaac                 | ' 	}
2eaac                 | ' 	return res;
2eaac     15 FB 01 F6 | 	mov	result1, local03
2eab0     A7 F0 03 F6 | 	mov	ptra, fp
2eab4     B2 00 A0 FD | 	call	#popregs_
2eab8                 | _fatfs_cc_move_window_ret
2eab8     2D 00 64 FD | 	ret
2eabc                 | 
2eabc                 | _fatfs_cc_sync_fs
2eabc     02 4A 05 F6 | 	mov	COUNT_, #2
2eac0     A8 00 A0 FD | 	call	#pushregs_
2eac4     09 27 02 F6 | 	mov	local01, arg01
2eac8     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
2eacc     FD 28 0A F6 | 	mov	local02, result1 wz
2ead0     D8 00 90 5D |  if_ne	jmp	#LR__4501
2ead4     13 19 C2 FA | 	rdbyte	arg04, local01
2ead8     03 18 0E F2 | 	cmp	arg04, #3 wz
2eadc     04 26 06 A1 |  if_e	add	local01, #4
2eae0     13 19 C2 AA |  if_e	rdbyte	arg04, local01
2eae4     04 26 86 A1 |  if_e	sub	local01, #4
2eae8     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
2eaec     A0 00 90 5D |  if_ne	jmp	#LR__4500
2eaf0     34 26 06 F1 | 	add	local01, #52
2eaf4     13 13 02 F6 | 	mov	arg01, local01
2eaf8     00 14 06 F6 | 	mov	arg02, #0
2eafc     09 16 C6 F9 | 	decod	arg03, #9
2eb00     98 00 A0 FD | 	call	#\builtin_bytefill_
2eb04     13 13 02 F6 | 	mov	arg01, local01
2eb08     FE 13 06 F1 | 	add	arg01, #510
2eb0c     55 00 80 FF 
2eb10     09 AB 58 FC | 	wrword	##43605, arg01
2eb14     A9 B0 A0 FF 
2eb18     13 A5 68 FC | 	wrlong	##1096897106, local01
2eb1c     13 13 02 F6 | 	mov	arg01, local01
2eb20     E4 13 06 F1 | 	add	arg01, #484
2eb24     B9 A0 B0 FF 
2eb28     09 E5 68 FC | 	wrlong	##1631679090, arg01
2eb2c     13 13 02 F6 | 	mov	arg01, local01
2eb30     E8 13 06 F1 | 	add	arg01, #488
2eb34     20 26 86 F1 | 	sub	local01, #32
2eb38     13 15 02 FB | 	rdlong	arg02, local01
2eb3c     09 15 62 FC | 	wrlong	arg02, arg01
2eb40     20 26 06 F1 | 	add	local01, #32
2eb44     13 13 02 F6 | 	mov	arg01, local01
2eb48     EC 13 06 F1 | 	add	arg01, #492
2eb4c     24 26 86 F1 | 	sub	local01, #36
2eb50     13 15 02 FB | 	rdlong	arg02, local01
2eb54     09 15 62 FC | 	wrlong	arg02, arg01
2eb58     10 26 06 F1 | 	add	local01, #16
2eb5c     13 17 02 FB | 	rdlong	arg03, local01
2eb60     01 16 06 F1 | 	add	arg03, #1
2eb64     10 26 06 F1 | 	add	local01, #16
2eb68     13 17 62 FC | 	wrlong	arg03, local01
2eb6c     2F 26 86 F1 | 	sub	local01, #47
2eb70     13 13 C2 FA | 	rdbyte	arg01, local01
2eb74     33 26 06 F1 | 	add	local01, #51
2eb78     13 15 02 F6 | 	mov	arg02, local01
2eb7c     01 18 06 F6 | 	mov	arg04, #1
2eb80     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
2eb84     30 26 86 F1 | 	sub	local01, #48
2eb88     13 01 48 FC | 	wrbyte	#0, local01
2eb8c     04 26 86 F1 | 	sub	local01, #4
2eb90                 | LR__4500
2eb90     01 26 06 F1 | 	add	local01, #1
2eb94     13 13 C2 FA | 	rdbyte	arg01, local01
2eb98     00 14 06 F6 | 	mov	arg02, #0
2eb9c     00 16 06 F6 | 	mov	arg03, #0
2eba0     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
2eba4     00 FA 0D F2 | 	cmp	result1, #0 wz
2eba8     01 28 06 56 |  if_ne	mov	local02, #1
2ebac                 | LR__4501
2ebac                 | ' 	}
2ebac                 | ' 
2ebac                 | ' 	return res;
2ebac     14 FB 01 F6 | 	mov	result1, local02
2ebb0     A7 F0 03 F6 | 	mov	ptra, fp
2ebb4     B2 00 A0 FD | 	call	#popregs_
2ebb8                 | _fatfs_cc_sync_fs_ret
2ebb8     2D 00 64 FD | 	ret
2ebbc                 | 
2ebbc                 | _fatfs_cc_clst2sect
2ebbc     02 14 86 F1 | 	sub	arg02, #2
2ebc0     18 12 06 F1 | 	add	arg01, #24
2ebc4     09 01 02 FB | 	rdlong	_var01, arg01
2ebc8     18 12 86 F1 | 	sub	arg01, #24
2ebcc     02 00 86 F1 | 	sub	_var01, #2
2ebd0     00 15 12 F2 | 	cmp	arg02, _var01 wc
2ebd4     00 FA 05 36 |  if_ae	mov	result1, #0
2ebd8     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
2ebdc     0A 12 06 F1 | 	add	arg01, #10
2ebe0     09 01 E2 FA | 	rdword	_var01, arg01
2ebe4     0A 01 02 FD | 	qmul	_var01, arg02
2ebe8                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
2ebe8     22 12 06 F1 | 	add	arg01, #34
2ebec     09 FB 01 FB | 	rdlong	result1, arg01
2ebf0     18 00 62 FD | 	getqx	_var01
2ebf4     00 FB 01 F1 | 	add	result1, _var01
2ebf8                 | _fatfs_cc_clst2sect_ret
2ebf8     2D 00 64 FD | 	ret
2ebfc                 | 
2ebfc                 | _fatfs_cc_get_fat
2ebfc     07 4A 05 F6 | 	mov	COUNT_, #7
2ec00     A8 00 A0 FD | 	call	#pushregs_
2ec04     0A 27 02 F6 | 	mov	local01, arg02
2ec08     09 29 02 FB | 	rdlong	local02, arg01
2ec0c     02 26 16 F2 | 	cmp	local01, #2 wc
2ec10     14 00 90 CD |  if_b	jmp	#LR__4510
2ec14     18 28 06 F1 | 	add	local02, #24
2ec18     14 2B 02 FB | 	rdlong	local03, local02
2ec1c     18 28 86 F1 | 	sub	local02, #24
2ec20     15 27 12 F2 | 	cmp	local01, local03 wc
2ec24     08 00 90 CD |  if_b	jmp	#LR__4511
2ec28                 | LR__4510
2ec28     01 2C 06 F6 | 	mov	local04, #1
2ec2c     60 01 90 FD | 	jmp	#LR__4518
2ec30                 | LR__4511
2ec30     01 2C 66 F6 | 	neg	local04, #1
2ec34                 | ' 		val = 0xFFFFFFFF;
2ec34                 | ' 
2ec34                 | ' 		switch (fs->fs_type) {
2ec34     14 2F C2 FA | 	rdbyte	local05, local02
2ec38     01 2E 86 F1 | 	sub	local05, #1
2ec3c     03 2E 26 F3 | 	fle	local05, #3
2ec40     30 2E 62 FD | 	jmprel	local05
2ec44                 | LR__4512
2ec44     0C 00 90 FD | 	jmp	#LR__4513
2ec48     B8 00 90 FD | 	jmp	#LR__4514
2ec4c     F8 00 90 FD | 	jmp	#LR__4515
2ec50     38 01 90 FD | 	jmp	#LR__4516
2ec54                 | LR__4513
2ec54     13 2F 02 F6 | 	mov	local05, local01
2ec58     13 13 02 F6 | 	mov	arg01, local01
2ec5c     01 12 46 F0 | 	shr	arg01, #1
2ec60     09 2F 02 F1 | 	add	local05, arg01
2ec64     14 13 02 F6 | 	mov	arg01, local02
2ec68     17 31 02 F6 | 	mov	local06, local05
2ec6c     09 30 46 F0 | 	shr	local06, #9
2ec70     24 28 06 F1 | 	add	local02, #36
2ec74     14 15 02 FB | 	rdlong	arg02, local02
2ec78     24 28 86 F1 | 	sub	local02, #36
2ec7c     18 15 02 F1 | 	add	arg02, local06
2ec80     C0 FD BF FD | 	call	#_fatfs_cc_move_window
2ec84     00 FA 0D F2 | 	cmp	result1, #0 wz
2ec88     04 01 90 5D |  if_ne	jmp	#LR__4517
2ec8c     17 31 02 F6 | 	mov	local06, local05
2ec90     FF 31 06 F5 | 	and	local06, #511
2ec94     34 28 06 F1 | 	add	local02, #52
2ec98     14 31 02 F1 | 	add	local06, local02
2ec9c     18 33 C2 FA | 	rdbyte	local07, local06
2eca0     34 28 86 F1 | 	sub	local02, #52
2eca4     14 13 02 F6 | 	mov	arg01, local02
2eca8     01 2E 06 F1 | 	add	local05, #1
2ecac     17 31 02 F6 | 	mov	local06, local05
2ecb0     09 30 46 F0 | 	shr	local06, #9
2ecb4     24 28 06 F1 | 	add	local02, #36
2ecb8     14 15 02 FB | 	rdlong	arg02, local02
2ecbc     24 28 86 F1 | 	sub	local02, #36
2ecc0     18 15 02 F1 | 	add	arg02, local06
2ecc4     7C FD BF FD | 	call	#_fatfs_cc_move_window
2ecc8     00 FA 0D F2 | 	cmp	result1, #0 wz
2eccc     C0 00 90 5D |  if_ne	jmp	#LR__4517
2ecd0     FF 2F 06 F5 | 	and	local05, #511
2ecd4     34 28 06 F1 | 	add	local02, #52
2ecd8     14 2F 02 F1 | 	add	local05, local02
2ecdc     17 31 C2 FA | 	rdbyte	local06, local05
2ece0     08 30 66 F0 | 	shl	local06, #8
2ece4     18 33 42 F5 | 	or	local07, local06
2ece8     01 26 CE F7 | 	test	local01, #1 wz
2ecec     04 32 46 50 |  if_ne	shr	local07, #4
2ecf0     19 2B 02 56 |  if_ne	mov	local03, local07
2ecf4     0B 32 46 A7 |  if_e	zerox	local07, #11
2ecf8     19 2B 02 A6 |  if_e	mov	local03, local07
2ecfc     15 2D 02 F6 | 	mov	local04, local03
2ed00                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
2ed00                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2ed00                 | ' 			break;
2ed00     8C 00 90 FD | 	jmp	#LR__4517
2ed04                 | LR__4514
2ed04     14 13 02 F6 | 	mov	arg01, local02
2ed08     13 31 02 F6 | 	mov	local06, local01
2ed0c     08 30 46 F0 | 	shr	local06, #8
2ed10     24 28 06 F1 | 	add	local02, #36
2ed14     14 15 02 FB | 	rdlong	arg02, local02
2ed18     24 28 86 F1 | 	sub	local02, #36
2ed1c     18 15 02 F1 | 	add	arg02, local06
2ed20     20 FD BF FD | 	call	#_fatfs_cc_move_window
2ed24     00 FA 0D F2 | 	cmp	result1, #0 wz
2ed28     64 00 90 5D |  if_ne	jmp	#LR__4517
2ed2c     34 28 06 F1 | 	add	local02, #52
2ed30     01 26 66 F0 | 	shl	local01, #1
2ed34     FF 27 06 F5 | 	and	local01, #511
2ed38     13 29 02 F1 | 	add	local02, local01
2ed3c                 | ' {
2ed3c                 | ' 
2ed3c                 | ' 	return *((WORD*)ptr);
2ed3c     14 FB E1 FA | 	rdword	result1, local02
2ed40     FD 2C 32 F9 | 	getword	local04, result1, #0
2ed44                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
2ed44                 | ' 			break;
2ed44     48 00 90 FD | 	jmp	#LR__4517
2ed48                 | LR__4515
2ed48     14 13 02 F6 | 	mov	arg01, local02
2ed4c     13 31 02 F6 | 	mov	local06, local01
2ed50     07 30 46 F0 | 	shr	local06, #7
2ed54     24 28 06 F1 | 	add	local02, #36
2ed58     14 15 02 FB | 	rdlong	arg02, local02
2ed5c     24 28 86 F1 | 	sub	local02, #36
2ed60     18 15 02 F1 | 	add	arg02, local06
2ed64     DC FC BF FD | 	call	#_fatfs_cc_move_window
2ed68     00 FA 0D F2 | 	cmp	result1, #0 wz
2ed6c     20 00 90 5D |  if_ne	jmp	#LR__4517
2ed70     34 28 06 F1 | 	add	local02, #52
2ed74     02 26 66 F0 | 	shl	local01, #2
2ed78     FF 27 06 F5 | 	and	local01, #511
2ed7c     13 29 02 F1 | 	add	local02, local01
2ed80                 | ' {
2ed80                 | ' 
2ed80                 | ' 	return *((DWORD*)ptr);
2ed80     14 2D 02 FB | 	rdlong	local04, local02
2ed84     7C 2C 06 F4 | 	bitl	local04, #124
2ed88                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
2ed88                 | ' 			break;
2ed88     04 00 90 FD | 	jmp	#LR__4517
2ed8c                 | LR__4516
2ed8c     01 2C 06 F6 | 	mov	local04, #1
2ed90                 | LR__4517
2ed90                 | LR__4518
2ed90                 | ' 			val = 1;
2ed90                 | ' 		}
2ed90                 | ' 	}
2ed90                 | ' 
2ed90                 | ' 	return val;
2ed90     16 FB 01 F6 | 	mov	result1, local04
2ed94     A7 F0 03 F6 | 	mov	ptra, fp
2ed98     B2 00 A0 FD | 	call	#popregs_
2ed9c                 | _fatfs_cc_get_fat_ret
2ed9c     2D 00 64 FD | 	ret
2eda0                 | 
2eda0                 | _fatfs_cc_put_fat
2eda0     08 4A 05 F6 | 	mov	COUNT_, #8
2eda4     A8 00 A0 FD | 	call	#pushregs_
2eda8     09 27 02 F6 | 	mov	local01, arg01
2edac     0A 29 02 F6 | 	mov	local02, arg02
2edb0     0B 2B 02 F6 | 	mov	local03, arg03
2edb4     02 2C 06 F6 | 	mov	local04, #2
2edb8     02 28 16 F2 | 	cmp	local02, #2 wc
2edbc     E0 01 90 CD |  if_b	jmp	#LR__4527
2edc0     18 26 06 F1 | 	add	local01, #24
2edc4     13 2F 02 FB | 	rdlong	local05, local01
2edc8     18 26 86 F1 | 	sub	local01, #24
2edcc     17 29 12 F2 | 	cmp	local02, local05 wc
2edd0     CC 01 90 3D |  if_ae	jmp	#LR__4527
2edd4                 | ' 		switch (fs->fs_type) {
2edd4     13 31 C2 FA | 	rdbyte	local06, local01
2edd8     01 30 86 F1 | 	sub	local06, #1
2eddc     03 30 26 F3 | 	fle	local06, #3
2ede0     30 30 62 FD | 	jmprel	local06
2ede4                 | LR__4520
2ede4     0C 00 90 FD | 	jmp	#LR__4521
2ede8     F8 00 90 FD | 	jmp	#LR__4524
2edec     40 01 90 FD | 	jmp	#LR__4525
2edf0     AC 01 90 FD | 	jmp	#LR__4526
2edf4                 | LR__4521
2edf4     14 33 02 F6 | 	mov	local07, local02
2edf8     14 2F 02 F6 | 	mov	local05, local02
2edfc     01 2E 46 F0 | 	shr	local05, #1
2ee00     17 33 02 F1 | 	add	local07, local05
2ee04     13 13 02 F6 | 	mov	arg01, local01
2ee08     19 31 02 F6 | 	mov	local06, local07
2ee0c     09 30 46 F0 | 	shr	local06, #9
2ee10     24 26 06 F1 | 	add	local01, #36
2ee14     13 15 02 FB | 	rdlong	arg02, local01
2ee18     24 26 86 F1 | 	sub	local01, #36
2ee1c     18 15 02 F1 | 	add	arg02, local06
2ee20     20 FC BF FD | 	call	#_fatfs_cc_move_window
2ee24     FD 2C 0A F6 | 	mov	local04, result1 wz
2ee28     74 01 90 5D |  if_ne	jmp	#LR__4526
2ee2c     34 26 06 F1 | 	add	local01, #52
2ee30     13 35 02 F6 | 	mov	local08, local01
2ee34     19 2F 02 F6 | 	mov	local05, local07
2ee38     FF 2F 06 F5 | 	and	local05, #511
2ee3c     17 35 02 F1 | 	add	local08, local05
2ee40     01 28 CE F7 | 	test	local02, #1 wz
2ee44     34 26 86 F1 | 	sub	local01, #52
2ee48     01 32 06 F1 | 	add	local07, #1
2ee4c     18 00 90 AD |  if_e	jmp	#LR__4522
2ee50     1A 2F C2 FA | 	rdbyte	local05, local08
2ee54     17 2F 42 F8 | 	getnib	local05, local05, #0
2ee58     15 31 E2 F8 | 	getbyte	local06, local03, #0
2ee5c     04 30 66 F0 | 	shl	local06, #4
2ee60     18 2F 42 F5 | 	or	local05, local06
2ee64     04 00 90 FD | 	jmp	#LR__4523
2ee68                 | LR__4522
2ee68     15 2F 02 F6 | 	mov	local05, local03
2ee6c                 | LR__4523
2ee6c     1A 2F 42 FC | 	wrbyte	local05, local08
2ee70     03 26 06 F1 | 	add	local01, #3
2ee74     13 03 48 FC | 	wrbyte	#1, local01
2ee78     03 26 86 F1 | 	sub	local01, #3
2ee7c     13 13 02 F6 | 	mov	arg01, local01
2ee80     19 35 02 F6 | 	mov	local08, local07
2ee84     09 34 46 F0 | 	shr	local08, #9
2ee88     24 26 06 F1 | 	add	local01, #36
2ee8c     13 15 02 FB | 	rdlong	arg02, local01
2ee90     24 26 86 F1 | 	sub	local01, #36
2ee94     1A 15 02 F1 | 	add	arg02, local08
2ee98     A8 FB BF FD | 	call	#_fatfs_cc_move_window
2ee9c     FD 2C 0A F6 | 	mov	local04, result1 wz
2eea0     FC 00 90 5D |  if_ne	jmp	#LR__4526
2eea4     34 26 06 F1 | 	add	local01, #52
2eea8     13 35 02 F6 | 	mov	local08, local01
2eeac     FF 33 06 F5 | 	and	local07, #511
2eeb0     19 35 02 F1 | 	add	local08, local07
2eeb4     01 28 CE F7 | 	test	local02, #1 wz
2eeb8     04 2A 46 50 |  if_ne	shr	local03, #4
2eebc     15 2F 02 56 |  if_ne	mov	local05, local03
2eec0     1A 2F C2 AA |  if_e	rdbyte	local05, local08
2eec4     F0 2E 06 A5 |  if_e	and	local05, #240
2eec8     15 2B EA A8 |  if_e	getbyte	local03, local03, #1
2eecc     15 2B 42 A8 |  if_e	getnib	local03, local03, #0
2eed0     15 2F 42 A5 |  if_e	or	local05, local03
2eed4     1A 2F 42 FC | 	wrbyte	local05, local08
2eed8     31 26 86 F1 | 	sub	local01, #49
2eedc     13 03 48 FC | 	wrbyte	#1, local01
2eee0                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
2eee0                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2eee0                 | ' 			fs->wflag = 1;
2eee0                 | ' 			break;
2eee0     BC 00 90 FD | 	jmp	#LR__4526
2eee4                 | LR__4524
2eee4     13 13 02 F6 | 	mov	arg01, local01
2eee8     14 35 02 F6 | 	mov	local08, local02
2eeec     08 34 46 F0 | 	shr	local08, #8
2eef0     24 26 06 F1 | 	add	local01, #36
2eef4     13 15 02 FB | 	rdlong	arg02, local01
2eef8     24 26 86 F1 | 	sub	local01, #36
2eefc     1A 15 02 F1 | 	add	arg02, local08
2ef00     40 FB BF FD | 	call	#_fatfs_cc_move_window
2ef04     FD 2C 0A F6 | 	mov	local04, result1 wz
2ef08     94 00 90 5D |  if_ne	jmp	#LR__4526
2ef0c     34 26 06 F1 | 	add	local01, #52
2ef10     13 13 02 F6 | 	mov	arg01, local01
2ef14     01 28 66 F0 | 	shl	local02, #1
2ef18     FF 29 06 F5 | 	and	local02, #511
2ef1c     14 13 02 F1 | 	add	arg01, local02
2ef20     09 2B 52 FC | 	wrword	local03, arg01
2ef24     31 26 86 F1 | 	sub	local01, #49
2ef28     13 03 48 FC | 	wrbyte	#1, local01
2ef2c                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
2ef2c                 | ' 			fs->wflag = 1;
2ef2c                 | ' 			break;
2ef2c     70 00 90 FD | 	jmp	#LR__4526
2ef30                 | LR__4525
2ef30     13 13 02 F6 | 	mov	arg01, local01
2ef34     14 35 02 F6 | 	mov	local08, local02
2ef38     07 34 46 F0 | 	shr	local08, #7
2ef3c     24 26 06 F1 | 	add	local01, #36
2ef40     13 15 02 FB | 	rdlong	arg02, local01
2ef44     24 26 86 F1 | 	sub	local01, #36
2ef48     1A 15 02 F1 | 	add	arg02, local08
2ef4c     F4 FA BF FD | 	call	#_fatfs_cc_move_window
2ef50     FD 2C 0A F6 | 	mov	local04, result1 wz
2ef54     48 00 90 5D |  if_ne	jmp	#LR__4526
2ef58     7C 2A 06 F4 | 	bitl	local03, #124
2ef5c     34 26 06 F1 | 	add	local01, #52
2ef60     14 35 02 F6 | 	mov	local08, local02
2ef64     02 34 66 F0 | 	shl	local08, #2
2ef68     FF 35 06 F5 | 	and	local08, #511
2ef6c     13 13 02 F6 | 	mov	arg01, local01
2ef70     1A 13 02 F1 | 	add	arg01, local08
2ef74                 | ' {
2ef74                 | ' 
2ef74                 | ' 	return *((DWORD*)ptr);
2ef74     09 35 02 FB | 	rdlong	local08, arg01
2ef78     00 00 78 FF 
2ef7c     00 34 06 F5 | 	and	local08, ##-268435456
2ef80     1A 2B 42 F5 | 	or	local03, local08
2ef84     13 13 02 F6 | 	mov	arg01, local01
2ef88     02 28 66 F0 | 	shl	local02, #2
2ef8c     FF 29 06 F5 | 	and	local02, #511
2ef90     14 13 02 F1 | 	add	arg01, local02
2ef94     09 2B 62 FC | 	wrlong	local03, arg01
2ef98     31 26 86 F1 | 	sub	local01, #49
2ef9c     13 03 48 FC | 	wrbyte	#1, local01
2efa0                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
2efa0                 | ' 			}
2efa0                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
2efa0                 | ' 			fs->wflag = 1;
2efa0                 | ' 			break;
2efa0                 | LR__4526
2efa0                 | LR__4527
2efa0                 | ' 		}
2efa0                 | ' 	}
2efa0                 | ' 	return res;
2efa0     16 FB 01 F6 | 	mov	result1, local04
2efa4     A7 F0 03 F6 | 	mov	ptra, fp
2efa8     B2 00 A0 FD | 	call	#popregs_
2efac                 | _fatfs_cc_put_fat_ret
2efac     2D 00 64 FD | 	ret
2efb0                 | 
2efb0                 | _fatfs_cc_remove_chain
2efb0     05 4A 05 F6 | 	mov	COUNT_, #5
2efb4     A8 00 A0 FD | 	call	#pushregs_
2efb8     09 27 02 F6 | 	mov	local01, arg01
2efbc     0A 29 02 F6 | 	mov	local02, arg02
2efc0     0B 2B 02 F6 | 	mov	local03, arg03
2efc4     13 2D 02 FB | 	rdlong	local04, local01
2efc8     02 28 16 F2 | 	cmp	local02, #2 wc
2efcc     14 00 90 CD |  if_b	jmp	#LR__4530
2efd0     18 2C 06 F1 | 	add	local04, #24
2efd4     16 FB 01 FB | 	rdlong	result1, local04
2efd8     18 2C 86 F1 | 	sub	local04, #24
2efdc     FD 28 12 F2 | 	cmp	local02, result1 wc
2efe0     08 00 90 CD |  if_b	jmp	#LR__4531
2efe4                 | LR__4530
2efe4     02 FA 05 F6 | 	mov	result1, #2
2efe8     CC 00 90 FD | 	jmp	#LR__4536
2efec                 | LR__4531
2efec     00 2A 0E F2 | 	cmp	local03, #0 wz
2eff0     18 00 90 AD |  if_e	jmp	#LR__4532
2eff4     15 15 02 F6 | 	mov	arg02, local03
2eff8     16 13 02 F6 | 	mov	arg01, local04
2effc     01 16 66 F6 | 	neg	arg03, #1
2f000     9C FD BF FD | 	call	#_fatfs_cc_put_fat
2f004     00 FA 0D F2 | 	cmp	result1, #0 wz
2f008     AC 00 90 5D |  if_ne	jmp	#LR__4536
2f00c                 | LR__4532
2f00c                 | ' 	}
2f00c                 | ' 
2f00c                 | ' 
2f00c                 | ' 	do {
2f00c                 | LR__4533
2f00c     14 15 02 F6 | 	mov	arg02, local02
2f010     13 13 02 F6 | 	mov	arg01, local01
2f014     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
2f018     FD 2E 0A F6 | 	mov	local05, result1 wz
2f01c     94 00 90 AD |  if_e	jmp	#LR__4535
2f020     01 2E 0E F2 | 	cmp	local05, #1 wz
2f024     02 FA 05 A6 |  if_e	mov	result1, #2
2f028     8C 00 90 AD |  if_e	jmp	#LR__4536
2f02c     FF FF 7F FF 
2f030     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
2f034     01 FA 05 A6 |  if_e	mov	result1, #1
2f038     7C 00 90 AD |  if_e	jmp	#LR__4536
2f03c     14 15 02 F6 | 	mov	arg02, local02
2f040     16 13 02 F6 | 	mov	arg01, local04
2f044     00 16 06 F6 | 	mov	arg03, #0
2f048     54 FD BF FD | 	call	#_fatfs_cc_put_fat
2f04c     FD 2A 0A F6 | 	mov	local03, result1 wz
2f050     15 FB 01 56 |  if_ne	mov	result1, local03
2f054     60 00 90 5D |  if_ne	jmp	#LR__4536
2f058     18 2C 06 F1 | 	add	local04, #24
2f05c     16 2B 02 FB | 	rdlong	local03, local04
2f060     02 2A 86 F1 | 	sub	local03, #2
2f064     04 2C 86 F1 | 	sub	local04, #4
2f068     16 29 02 FB | 	rdlong	local02, local04
2f06c     14 2C 86 F1 | 	sub	local04, #20
2f070     15 29 12 F2 | 	cmp	local02, local03 wc
2f074     24 00 90 3D |  if_ae	jmp	#LR__4534
2f078     14 2C 06 F1 | 	add	local04, #20
2f07c     16 2B 02 FB | 	rdlong	local03, local04
2f080     01 2A 06 F1 | 	add	local03, #1
2f084     16 2B 62 FC | 	wrlong	local03, local04
2f088     10 2C 86 F1 | 	sub	local04, #16
2f08c     16 2B C2 FA | 	rdbyte	local03, local04
2f090     01 2A 46 F5 | 	or	local03, #1
2f094     16 2B 42 FC | 	wrbyte	local03, local04
2f098     04 2C 86 F1 | 	sub	local04, #4
2f09c                 | LR__4534
2f09c     17 29 02 F6 | 	mov	local02, local05
2f0a0     18 2C 06 F1 | 	add	local04, #24
2f0a4     16 2F 02 FB | 	rdlong	local05, local04
2f0a8     18 2C 86 F1 | 	sub	local04, #24
2f0ac     17 29 12 F2 | 	cmp	local02, local05 wc
2f0b0     58 FF 9F CD |  if_b	jmp	#LR__4533
2f0b4                 | LR__4535
2f0b4                 | ' #line 1500 "ff.c"
2f0b4                 | ' 	return FR_OK;
2f0b4     00 FA 05 F6 | 	mov	result1, #0
2f0b8                 | LR__4536
2f0b8     A7 F0 03 F6 | 	mov	ptra, fp
2f0bc     B2 00 A0 FD | 	call	#popregs_
2f0c0                 | _fatfs_cc_remove_chain_ret
2f0c0     2D 00 64 FD | 	ret
2f0c4                 | 
2f0c4                 | _fatfs_cc_create_chain
2f0c4     09 4A 05 F6 | 	mov	COUNT_, #9
2f0c8     A8 00 A0 FD | 	call	#pushregs_
2f0cc     09 27 02 F6 | 	mov	local01, arg01
2f0d0     0A 29 0A F6 | 	mov	local02, arg02 wz
2f0d4     13 2B 02 FB | 	rdlong	local03, local01
2f0d8     28 00 90 5D |  if_ne	jmp	#LR__4540
2f0dc     10 2A 06 F1 | 	add	local03, #16
2f0e0     15 2D 0A FB | 	rdlong	local04, local03 wz
2f0e4     10 2A 86 F1 | 	sub	local03, #16
2f0e8     18 2A 06 51 |  if_ne	add	local03, #24
2f0ec     15 2F 02 5B |  if_ne	rdlong	local05, local03
2f0f0     18 2A 86 51 |  if_ne	sub	local03, #24
2f0f4     17 2D 12 52 |  if_ne	cmp	local04, local05 wc
2f0f8     50 00 90 4D |  if_c_and_nz	jmp	#LR__4541
2f0fc     01 2C 06 F6 | 	mov	local04, #1
2f100     48 00 90 FD | 	jmp	#LR__4541
2f104                 | LR__4540
2f104     14 15 02 F6 | 	mov	arg02, local02
2f108     13 13 02 F6 | 	mov	arg01, local01
2f10c     EC FA BF FD | 	call	#_fatfs_cc_get_fat
2f110     FD 2C 02 F6 | 	mov	local04, result1
2f114     02 2C 16 F2 | 	cmp	local04, #2 wc
2f118     01 FA 05 C6 |  if_b	mov	result1, #1
2f11c     BC 01 90 CD |  if_b	jmp	#LR__4551
2f120     FF FF 7F FF 
2f124     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
2f128     16 FB 01 A6 |  if_e	mov	result1, local04
2f12c     AC 01 90 AD |  if_e	jmp	#LR__4551
2f130     18 2A 06 F1 | 	add	local03, #24
2f134     15 2F 02 FB | 	rdlong	local05, local03
2f138     18 2A 86 F1 | 	sub	local03, #24
2f13c     17 2D 12 F2 | 	cmp	local04, local05 wc
2f140     16 FB 01 C6 |  if_b	mov	result1, local04
2f144     94 01 90 CD |  if_b	jmp	#LR__4551
2f148     14 2D 02 F6 | 	mov	local04, local02
2f14c                 | LR__4541
2f14c     14 2A 06 F1 | 	add	local03, #20
2f150     15 2F 0A FB | 	rdlong	local05, local03 wz
2f154     14 2A 86 F1 | 	sub	local03, #20
2f158     00 FA 05 A6 |  if_e	mov	result1, #0
2f15c     7C 01 90 AD |  if_e	jmp	#LR__4551
2f160     00 30 06 F6 | 	mov	local06, #0
2f164     14 2D 0A F2 | 	cmp	local04, local02 wz
2f168     74 00 90 5D |  if_ne	jmp	#LR__4544
2f16c     16 31 02 F6 | 	mov	local06, local04
2f170     01 30 06 F1 | 	add	local06, #1
2f174     18 2A 06 F1 | 	add	local03, #24
2f178     15 2F 02 FB | 	rdlong	local05, local03
2f17c     18 2A 86 F1 | 	sub	local03, #24
2f180     17 31 12 F2 | 	cmp	local06, local05 wc
2f184     02 30 06 36 |  if_ae	mov	local06, #2
2f188     18 15 02 F6 | 	mov	arg02, local06
2f18c     13 13 02 F6 | 	mov	arg01, local01
2f190     68 FA BF FD | 	call	#_fatfs_cc_get_fat
2f194     FD 2E 02 F6 | 	mov	local05, result1
2f198     01 2E 0E F2 | 	cmp	local05, #1 wz
2f19c     FF FF 7F 5F 
2f1a0     FF 2F 0E 52 |  if_ne	cmp	local05, ##-1 wz
2f1a4     17 FB 01 A6 |  if_e	mov	result1, local05
2f1a8     30 01 90 AD |  if_e	jmp	#LR__4551
2f1ac     00 2E 0E F2 | 	cmp	local05, #0 wz
2f1b0     2C 00 90 AD |  if_e	jmp	#LR__4543
2f1b4     10 2A 06 F1 | 	add	local03, #16
2f1b8     15 33 02 FB | 	rdlong	local07, local03
2f1bc     10 2A 86 F1 | 	sub	local03, #16
2f1c0     02 32 16 F2 | 	cmp	local07, #2 wc
2f1c4     14 00 90 CD |  if_b	jmp	#LR__4542
2f1c8     18 2A 06 F1 | 	add	local03, #24
2f1cc     15 2F 02 FB | 	rdlong	local05, local03
2f1d0     18 2A 86 F1 | 	sub	local03, #24
2f1d4     17 33 12 F2 | 	cmp	local07, local05 wc
2f1d8     19 2D 02 C6 |  if_b	mov	local04, local07
2f1dc                 | LR__4542
2f1dc     00 30 06 F6 | 	mov	local06, #0
2f1e0                 | LR__4543
2f1e0                 | LR__4544
2f1e0     00 30 0E F2 | 	cmp	local06, #0 wz
2f1e4     60 00 90 5D |  if_ne	jmp	#LR__4547
2f1e8     16 31 02 F6 | 	mov	local06, local04
2f1ec                 | ' 			ncl = scl;
2f1ec                 | ' 			for (;;) {
2f1ec                 | LR__4545
2f1ec     01 30 06 F1 | 	add	local06, #1
2f1f0     18 2A 06 F1 | 	add	local03, #24
2f1f4     15 2F 02 FB | 	rdlong	local05, local03
2f1f8     18 2A 86 F1 | 	sub	local03, #24
2f1fc     17 31 12 F2 | 	cmp	local06, local05 wc
2f200     02 30 06 36 |  if_ae	mov	local06, #2
2f204     16 31 1A 32 |  if_ae	cmp	local06, local04 wcz
2f208     00 FA 05 16 |  if_a	mov	result1, #0
2f20c     CC 00 90 1D |  if_a	jmp	#LR__4551
2f210     18 15 02 F6 | 	mov	arg02, local06
2f214     13 13 02 F6 | 	mov	arg01, local01
2f218     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
2f21c     FD 32 0A F6 | 	mov	local07, result1 wz
2f220     24 00 90 AD |  if_e	jmp	#LR__4546
2f224     01 32 0E F2 | 	cmp	local07, #1 wz
2f228     FF FF 7F 5F 
2f22c     FF 33 0E 52 |  if_ne	cmp	local07, ##-1 wz
2f230     19 FB 01 A6 |  if_e	mov	result1, local07
2f234     A4 00 90 AD |  if_e	jmp	#LR__4551
2f238     16 31 0A F2 | 	cmp	local06, local04 wz
2f23c     00 FA 05 A6 |  if_e	mov	result1, #0
2f240     98 00 90 AD |  if_e	jmp	#LR__4551
2f244     A4 FF 9F FD | 	jmp	#LR__4545
2f248                 | LR__4546
2f248                 | LR__4547
2f248     15 13 02 F6 | 	mov	arg01, local03
2f24c     18 15 02 F6 | 	mov	arg02, local06
2f250     01 16 66 F6 | 	neg	arg03, #1
2f254     48 FB BF FD | 	call	#_fatfs_cc_put_fat
2f258     FD 34 0A F6 | 	mov	local08, result1 wz
2f25c     1C 00 90 5D |  if_ne	jmp	#LR__4548
2f260     00 28 0E F2 | 	cmp	local02, #0 wz
2f264     14 00 90 AD |  if_e	jmp	#LR__4548
2f268     15 13 02 F6 | 	mov	arg01, local03
2f26c     14 15 02 F6 | 	mov	arg02, local02
2f270     18 17 02 F6 | 	mov	arg03, local06
2f274     28 FB BF FD | 	call	#_fatfs_cc_put_fat
2f278     FD 34 02 F6 | 	mov	local08, result1
2f27c                 | LR__4548
2f27c     00 34 0E F2 | 	cmp	local08, #0 wz
2f280     4C 00 90 5D |  if_ne	jmp	#LR__4549
2f284     10 2A 06 F1 | 	add	local03, #16
2f288     15 31 62 FC | 	wrlong	local06, local03
2f28c     08 2A 06 F1 | 	add	local03, #8
2f290     15 2F 02 FB | 	rdlong	local05, local03
2f294     02 2E 86 F1 | 	sub	local05, #2
2f298     04 2A 86 F1 | 	sub	local03, #4
2f29c     15 37 02 FB | 	rdlong	local09, local03
2f2a0     14 2A 86 F1 | 	sub	local03, #20
2f2a4     17 37 1A F2 | 	cmp	local09, local05 wcz
2f2a8     14 2A 06 E1 |  if_be	add	local03, #20
2f2ac     15 37 02 EB |  if_be	rdlong	local09, local03
2f2b0     01 36 86 E1 |  if_be	sub	local09, #1
2f2b4     15 37 62 EC |  if_be	wrlong	local09, local03
2f2b8     14 2A 86 E1 |  if_be	sub	local03, #20
2f2bc     04 2A 06 F1 | 	add	local03, #4
2f2c0     15 2F C2 FA | 	rdbyte	local05, local03
2f2c4     01 2E 46 F5 | 	or	local05, #1
2f2c8     15 2F 42 FC | 	wrbyte	local05, local03
2f2cc     08 00 90 FD | 	jmp	#LR__4550
2f2d0                 | LR__4549
2f2d0     01 34 0E F2 | 	cmp	local08, #1 wz
2f2d4     01 30 C6 F6 | 	negz	local06, #1
2f2d8                 | LR__4550
2f2d8                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
2f2d8                 | ' 	}
2f2d8                 | ' 
2f2d8                 | ' 	return ncl;
2f2d8     18 FB 01 F6 | 	mov	result1, local06
2f2dc                 | LR__4551
2f2dc     A7 F0 03 F6 | 	mov	ptra, fp
2f2e0     B2 00 A0 FD | 	call	#popregs_
2f2e4                 | _fatfs_cc_create_chain_ret
2f2e4     2D 00 64 FD | 	ret
2f2e8                 | 
2f2e8                 | _fatfs_cc_dir_clear
2f2e8     06 4A 05 F6 | 	mov	COUNT_, #6
2f2ec     A8 00 A0 FD | 	call	#pushregs_
2f2f0     09 27 02 F6 | 	mov	local01, arg01
2f2f4     0A 29 02 F6 | 	mov	local02, arg02
2f2f8     13 13 02 F6 | 	mov	arg01, local01
2f2fc     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
2f300     00 FA 0D F2 | 	cmp	result1, #0 wz
2f304     01 FA 05 56 |  if_ne	mov	result1, #1
2f308     90 00 90 5D |  if_ne	jmp	#LR__4562
2f30c     13 13 02 F6 | 	mov	arg01, local01
2f310     14 15 02 F6 | 	mov	arg02, local02
2f314     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
2f318     FD 2A 02 F6 | 	mov	local03, result1
2f31c     30 26 06 F1 | 	add	local01, #48
2f320     13 2B 62 FC | 	wrlong	local03, local01
2f324     04 26 06 F1 | 	add	local01, #4
2f328     13 13 02 F6 | 	mov	arg01, local01
2f32c     00 14 06 F6 | 	mov	arg02, #0
2f330     09 16 C6 F9 | 	decod	arg03, #9
2f334     98 00 A0 FD | 	call	#\builtin_bytefill_
2f338     13 2D 02 F6 | 	mov	local04, local01
2f33c                 | ' #line 1667 "ff.c"
2f33c                 | ' 	{
2f33c                 | ' 		ibuf = fs->win; szb = 1;
2f33c                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
2f33c     00 2E 06 F6 | 	mov	local05, #0
2f340     34 26 86 F1 | 	sub	local01, #52
2f344                 | LR__4560
2f344     0A 26 06 F1 | 	add	local01, #10
2f348     13 31 E2 FA | 	rdword	local06, local01
2f34c     0A 26 86 F1 | 	sub	local01, #10
2f350     18 2F 12 F2 | 	cmp	local05, local06 wc
2f354     2C 00 90 3D |  if_ae	jmp	#LR__4561
2f358     01 26 06 F1 | 	add	local01, #1
2f35c     13 13 C2 FA | 	rdbyte	arg01, local01
2f360     01 26 86 F1 | 	sub	local01, #1
2f364     16 15 02 F6 | 	mov	arg02, local04
2f368     15 17 02 F6 | 	mov	arg03, local03
2f36c     17 17 02 F1 | 	add	arg03, local05
2f370     01 18 06 F6 | 	mov	arg04, #1
2f374     9C EF BF FD | 	call	#_fatfs_cc_disk_write
2f378     00 FA 0D F2 | 	cmp	result1, #0 wz
2f37c     01 2E 06 A1 |  if_e	add	local05, #1
2f380     C0 FF 9F AD |  if_e	jmp	#LR__4560
2f384                 | LR__4561
2f384                 | ' 	}
2f384                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
2f384     0A 26 06 F1 | 	add	local01, #10
2f388     13 2D E2 FA | 	rdword	local04, local01
2f38c     16 2F 0A F2 | 	cmp	local05, local04 wz
2f390     00 30 06 A6 |  if_e	mov	local06, #0
2f394     01 30 06 56 |  if_ne	mov	local06, #1
2f398     18 FB 01 F6 | 	mov	result1, local06
2f39c                 | LR__4562
2f39c     A7 F0 03 F6 | 	mov	ptra, fp
2f3a0     B2 00 A0 FD | 	call	#popregs_
2f3a4                 | _fatfs_cc_dir_clear_ret
2f3a4     2D 00 64 FD | 	ret
2f3a8                 | 
2f3a8                 | _fatfs_cc_dir_sdi
2f3a8     06 4A 05 F6 | 	mov	COUNT_, #6
2f3ac     A8 00 A0 FD | 	call	#pushregs_
2f3b0     09 27 02 F6 | 	mov	local01, arg01
2f3b4     0A 29 02 F6 | 	mov	local02, arg02
2f3b8     13 2B 02 FB | 	rdlong	local03, local01
2f3bc     00 10 00 FF 
2f3c0     00 28 16 F2 | 	cmp	local02, ##2097152 wc
2f3c4     1F 28 CE C7 |  if_b	test	local02, #31 wz
2f3c8                 | ' 		return FR_INT_ERR;
2f3c8     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
2f3cc     34 01 90 7D |  if_nc_or_nz	jmp	#LR__4576
2f3d0     10 26 06 F1 | 	add	local01, #16
2f3d4     13 29 62 FC | 	wrlong	local02, local01
2f3d8     08 26 86 F1 | 	sub	local01, #8
2f3dc     13 2D 0A FB | 	rdlong	local04, local01 wz
2f3e0     08 26 86 F1 | 	sub	local01, #8
2f3e4     15 2F C2 AA |  if_e	rdbyte	local05, local03
2f3e8     03 2E 16 A2 |  if_e	cmp	local05, #3 wc
2f3ec     28 2A 06 21 |  if_nc_and_z	add	local03, #40
2f3f0     15 2D 02 2B |  if_nc_and_z	rdlong	local04, local03
2f3f4     28 2A 86 21 |  if_nc_and_z	sub	local03, #40
2f3f8     00 2C 0E F2 | 	cmp	local04, #0 wz
2f3fc     3C 00 90 5D |  if_ne	jmp	#LR__4570
2f400     14 2F 02 F6 | 	mov	local05, local02
2f404     05 2E 46 F0 | 	shr	local05, #5
2f408     08 2A 06 F1 | 	add	local03, #8
2f40c     15 15 E2 FA | 	rdword	arg02, local03
2f410     08 2A 86 F1 | 	sub	local03, #8
2f414     0A 2F 12 F2 | 	cmp	local05, arg02 wc
2f418     02 FA 05 36 |  if_ae	mov	result1, #2
2f41c     E4 00 90 3D |  if_ae	jmp	#LR__4576
2f420     28 2A 06 F1 | 	add	local03, #40
2f424     15 2F 02 FB | 	rdlong	local05, local03
2f428     28 2A 86 F1 | 	sub	local03, #40
2f42c     18 26 06 F1 | 	add	local01, #24
2f430     13 2F 62 FC | 	wrlong	local05, local01
2f434     18 26 86 F1 | 	sub	local01, #24
2f438     7C 00 90 FD | 	jmp	#LR__4575
2f43c                 | LR__4570
2f43c     0A 2A 06 F1 | 	add	local03, #10
2f440     15 31 E2 FA | 	rdword	local06, local03
2f444     0A 2A 86 F1 | 	sub	local03, #10
2f448     09 30 66 F0 | 	shl	local06, #9
2f44c                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
2f44c                 | ' 		while (ofs >= csz) {
2f44c                 | LR__4571
2f44c     18 29 12 F2 | 	cmp	local02, local06 wc
2f450     4C 00 90 CD |  if_b	jmp	#LR__4574
2f454     13 13 02 F6 | 	mov	arg01, local01
2f458     16 15 02 F6 | 	mov	arg02, local04
2f45c     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
2f460     FD 2C 02 F6 | 	mov	local04, result1
2f464     FF FF 7F FF 
2f468     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
2f46c     01 FA 05 A6 |  if_e	mov	result1, #1
2f470     90 00 90 AD |  if_e	jmp	#LR__4576
2f474     02 2C 16 F2 | 	cmp	local04, #2 wc
2f478     14 00 90 CD |  if_b	jmp	#LR__4572
2f47c     18 2A 06 F1 | 	add	local03, #24
2f480     15 2F 02 FB | 	rdlong	local05, local03
2f484     18 2A 86 F1 | 	sub	local03, #24
2f488     17 2D 12 F2 | 	cmp	local04, local05 wc
2f48c     08 00 90 CD |  if_b	jmp	#LR__4573
2f490                 | LR__4572
2f490     02 FA 05 F6 | 	mov	result1, #2
2f494     6C 00 90 FD | 	jmp	#LR__4576
2f498                 | LR__4573
2f498     18 29 82 F1 | 	sub	local02, local06
2f49c     AC FF 9F FD | 	jmp	#LR__4571
2f4a0                 | LR__4574
2f4a0     15 13 02 F6 | 	mov	arg01, local03
2f4a4     16 15 02 F6 | 	mov	arg02, local04
2f4a8     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
2f4ac     18 26 06 F1 | 	add	local01, #24
2f4b0     13 FB 61 FC | 	wrlong	result1, local01
2f4b4     18 26 86 F1 | 	sub	local01, #24
2f4b8                 | LR__4575
2f4b8     14 26 06 F1 | 	add	local01, #20
2f4bc     13 2D 62 FC | 	wrlong	local04, local01
2f4c0     04 26 06 F1 | 	add	local01, #4
2f4c4     13 2F 0A FB | 	rdlong	local05, local01 wz
2f4c8     18 26 86 F1 | 	sub	local01, #24
2f4cc     02 FA 05 A6 |  if_e	mov	result1, #2
2f4d0     30 00 90 AD |  if_e	jmp	#LR__4576
2f4d4     14 31 02 F6 | 	mov	local06, local02
2f4d8     09 30 46 F0 | 	shr	local06, #9
2f4dc     18 26 06 F1 | 	add	local01, #24
2f4e0     13 2F 02 FB | 	rdlong	local05, local01
2f4e4     18 2F 02 F1 | 	add	local05, local06
2f4e8     13 2F 62 FC | 	wrlong	local05, local01
2f4ec     34 2A 06 F1 | 	add	local03, #52
2f4f0     FF 29 06 F5 | 	and	local02, #511
2f4f4     14 2B 02 F1 | 	add	local03, local02
2f4f8     04 26 06 F1 | 	add	local01, #4
2f4fc     13 2B 62 FC | 	wrlong	local03, local01
2f500                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
2f500                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
2f500                 | ' 
2f500                 | ' 	return FR_OK;
2f500     00 FA 05 F6 | 	mov	result1, #0
2f504                 | LR__4576
2f504     A7 F0 03 F6 | 	mov	ptra, fp
2f508     B2 00 A0 FD | 	call	#popregs_
2f50c                 | _fatfs_cc_dir_sdi_ret
2f50c     2D 00 64 FD | 	ret
2f510                 | 
2f510                 | _fatfs_cc_dir_next
2f510     05 4A 05 F6 | 	mov	COUNT_, #5
2f514     A8 00 A0 FD | 	call	#pushregs_
2f518     09 27 02 F6 | 	mov	local01, arg01
2f51c     0A 29 02 F6 | 	mov	local02, arg02
2f520     13 2B 02 FB | 	rdlong	local03, local01
2f524     10 26 06 F1 | 	add	local01, #16
2f528     13 2D 02 FB | 	rdlong	local04, local01
2f52c     10 26 86 F1 | 	sub	local01, #16
2f530     20 2C 06 F1 | 	add	local04, #32
2f534     00 10 00 FF 
2f538     00 2C 16 F2 | 	cmp	local04, ##2097152 wc
2f53c     18 26 06 31 |  if_ae	add	local01, #24
2f540     13 01 68 3C |  if_ae	wrlong	#0, local01
2f544     18 26 86 31 |  if_ae	sub	local01, #24
2f548     18 26 06 F1 | 	add	local01, #24
2f54c     13 15 0A FB | 	rdlong	arg02, local01 wz
2f550     18 26 86 F1 | 	sub	local01, #24
2f554     04 FA 05 A6 |  if_e	mov	result1, #4
2f558     64 01 90 AD |  if_e	jmp	#LR__4585
2f55c     FF 2D CE F7 | 	test	local04, #511 wz
2f560     3C 01 90 5D |  if_ne	jmp	#LR__4584
2f564     18 26 06 F1 | 	add	local01, #24
2f568     13 15 02 FB | 	rdlong	arg02, local01
2f56c     01 14 06 F1 | 	add	arg02, #1
2f570     13 15 62 FC | 	wrlong	arg02, local01
2f574     04 26 86 F1 | 	sub	local01, #4
2f578     13 15 0A FB | 	rdlong	arg02, local01 wz
2f57c     14 26 86 F1 | 	sub	local01, #20
2f580     2C 00 90 5D |  if_ne	jmp	#LR__4580
2f584     16 15 02 F6 | 	mov	arg02, local04
2f588     05 14 46 F0 | 	shr	arg02, #5
2f58c     08 2A 06 F1 | 	add	local03, #8
2f590     15 29 E2 FA | 	rdword	local02, local03
2f594     08 2A 86 F1 | 	sub	local03, #8
2f598     14 15 12 F2 | 	cmp	arg02, local02 wc
2f59c     18 26 06 31 |  if_ae	add	local01, #24
2f5a0     13 01 68 3C |  if_ae	wrlong	#0, local01
2f5a4                 | ' 				dp->sect = 0; return FR_NO_FILE;
2f5a4     04 FA 05 36 |  if_ae	mov	result1, #4
2f5a8     14 01 90 3D |  if_ae	jmp	#LR__4585
2f5ac     F0 00 90 FD | 	jmp	#LR__4583
2f5b0                 | LR__4580
2f5b0     16 13 02 F6 | 	mov	arg01, local04
2f5b4     09 12 46 F0 | 	shr	arg01, #9
2f5b8     0A 2A 06 F1 | 	add	local03, #10
2f5bc     15 15 E2 FA | 	rdword	arg02, local03
2f5c0     0A 2A 86 F1 | 	sub	local03, #10
2f5c4     01 14 86 F1 | 	sub	arg02, #1
2f5c8     0A 13 CA F7 | 	test	arg01, arg02 wz
2f5cc     D0 00 90 5D |  if_ne	jmp	#LR__4582
2f5d0     13 13 02 F6 | 	mov	arg01, local01
2f5d4     14 26 06 F1 | 	add	local01, #20
2f5d8     13 15 02 FB | 	rdlong	arg02, local01
2f5dc     14 26 86 F1 | 	sub	local01, #20
2f5e0     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
2f5e4     FD 2E 02 F6 | 	mov	local05, result1
2f5e8     02 2E 16 F2 | 	cmp	local05, #2 wc
2f5ec     02 FA 05 C6 |  if_b	mov	result1, #2
2f5f0     CC 00 90 CD |  if_b	jmp	#LR__4585
2f5f4     FF FF 7F FF 
2f5f8     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
2f5fc     01 FA 05 A6 |  if_e	mov	result1, #1
2f600     BC 00 90 AD |  if_e	jmp	#LR__4585
2f604     18 2A 06 F1 | 	add	local03, #24
2f608     15 15 02 FB | 	rdlong	arg02, local03
2f60c     18 2A 86 F1 | 	sub	local03, #24
2f610     0A 2F 12 F2 | 	cmp	local05, arg02 wc
2f614     68 00 90 CD |  if_b	jmp	#LR__4581
2f618     00 28 0E F2 | 	cmp	local02, #0 wz
2f61c     18 26 06 A1 |  if_e	add	local01, #24
2f620     13 01 68 AC |  if_e	wrlong	#0, local01
2f624                 | ' 						dp->sect = 0; return FR_NO_FILE;
2f624     04 FA 05 A6 |  if_e	mov	result1, #4
2f628     94 00 90 AD |  if_e	jmp	#LR__4585
2f62c     13 13 02 F6 | 	mov	arg01, local01
2f630     14 26 06 F1 | 	add	local01, #20
2f634     13 15 02 FB | 	rdlong	arg02, local01
2f638     14 26 86 F1 | 	sub	local01, #20
2f63c     84 FA BF FD | 	call	#_fatfs_cc_create_chain
2f640     FD 2E 0A F6 | 	mov	local05, result1 wz
2f644     07 FA 05 A6 |  if_e	mov	result1, #7
2f648     74 00 90 AD |  if_e	jmp	#LR__4585
2f64c     01 2E 0E F2 | 	cmp	local05, #1 wz
2f650     02 FA 05 A6 |  if_e	mov	result1, #2
2f654     68 00 90 AD |  if_e	jmp	#LR__4585
2f658     FF FF 7F FF 
2f65c     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
2f660     01 FA 05 A6 |  if_e	mov	result1, #1
2f664     58 00 90 AD |  if_e	jmp	#LR__4585
2f668     17 15 02 F6 | 	mov	arg02, local05
2f66c     15 13 02 F6 | 	mov	arg01, local03
2f670     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
2f674     00 FA 0D F2 | 	cmp	result1, #0 wz
2f678     01 FA 05 56 |  if_ne	mov	result1, #1
2f67c     40 00 90 5D |  if_ne	jmp	#LR__4585
2f680                 | LR__4581
2f680     14 26 06 F1 | 	add	local01, #20
2f684     13 2F 62 FC | 	wrlong	local05, local01
2f688     15 13 02 F6 | 	mov	arg01, local03
2f68c     17 15 02 F6 | 	mov	arg02, local05
2f690     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
2f694     04 26 06 F1 | 	add	local01, #4
2f698     13 FB 61 FC | 	wrlong	result1, local01
2f69c     18 26 86 F1 | 	sub	local01, #24
2f6a0                 | LR__4582
2f6a0                 | LR__4583
2f6a0                 | LR__4584
2f6a0     10 26 06 F1 | 	add	local01, #16
2f6a4     13 2D 62 FC | 	wrlong	local04, local01
2f6a8     34 2A 06 F1 | 	add	local03, #52
2f6ac     FF 2D 06 F5 | 	and	local04, #511
2f6b0     16 2B 02 F1 | 	add	local03, local04
2f6b4     0C 26 06 F1 | 	add	local01, #12
2f6b8     13 2B 62 FC | 	wrlong	local03, local01
2f6bc                 | ' #line 1771 "ff.c"
2f6bc                 | ' 				}
2f6bc                 | ' 				dp->clust = clst;
2f6bc                 | ' 				dp->sect = clst2sect(fs, clst);
2f6bc                 | ' 			}
2f6bc                 | ' 		}
2f6bc                 | ' 	}
2f6bc                 | ' 	dp->dptr = ofs;
2f6bc                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
2f6bc                 | ' 
2f6bc                 | ' 	return FR_OK;
2f6bc     00 FA 05 F6 | 	mov	result1, #0
2f6c0                 | LR__4585
2f6c0     A7 F0 03 F6 | 	mov	ptra, fp
2f6c4     B2 00 A0 FD | 	call	#popregs_
2f6c8                 | _fatfs_cc_dir_next_ret
2f6c8     2D 00 64 FD | 	ret
2f6cc                 | 
2f6cc                 | _fatfs_cc_dir_alloc
2f6cc     08 4A 05 F6 | 	mov	COUNT_, #8
2f6d0     A8 00 A0 FD | 	call	#pushregs_
2f6d4     09 27 02 F6 | 	mov	local01, arg01
2f6d8     0A 29 02 F6 | 	mov	local02, arg02
2f6dc     13 2B 02 FB | 	rdlong	local03, local01
2f6e0     13 13 02 F6 | 	mov	arg01, local01
2f6e4     00 14 06 F6 | 	mov	arg02, #0
2f6e8     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
2f6ec     FD 2C 0A F6 | 	mov	local04, result1 wz
2f6f0     70 00 90 5D |  if_ne	jmp	#LR__4594
2f6f4     00 2E 06 F6 | 	mov	local05, #0
2f6f8                 | ' 		n = 0;
2f6f8                 | ' 		do {
2f6f8                 | LR__4590
2f6f8     18 26 06 F1 | 	add	local01, #24
2f6fc     13 15 02 FB | 	rdlong	arg02, local01
2f700     18 26 86 F1 | 	sub	local01, #24
2f704     15 13 02 F6 | 	mov	arg01, local03
2f708     38 F3 BF FD | 	call	#_fatfs_cc_move_window
2f70c     FD 2C 0A F6 | 	mov	local04, result1 wz
2f710     50 00 90 5D |  if_ne	jmp	#LR__4593
2f714     1C 26 06 F1 | 	add	local01, #28
2f718     13 31 02 FB | 	rdlong	local06, local01
2f71c     1C 26 86 F1 | 	sub	local01, #28
2f720     18 31 C2 FA | 	rdbyte	local06, local06
2f724     E5 30 0E F2 | 	cmp	local06, #229 wz
2f728     1C 26 06 51 |  if_ne	add	local01, #28
2f72c     13 33 02 5B |  if_ne	rdlong	local07, local01
2f730     1C 26 86 51 |  if_ne	sub	local01, #28
2f734     19 35 CA 5A |  if_ne	rdbyte	local08, local07 wz
2f738     10 00 90 5D |  if_ne	jmp	#LR__4591
2f73c     01 2E 06 F1 | 	add	local05, #1
2f740     14 2F 0A F2 | 	cmp	local05, local02 wz
2f744     1C 00 90 AD |  if_e	jmp	#LR__4593
2f748     04 00 90 FD | 	jmp	#LR__4592
2f74c                 | LR__4591
2f74c     00 2E 06 F6 | 	mov	local05, #0
2f750                 | LR__4592
2f750     13 13 02 F6 | 	mov	arg01, local01
2f754     01 14 06 F6 | 	mov	arg02, #1
2f758     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
2f75c     FD 2C 0A F6 | 	mov	local04, result1 wz
2f760     94 FF 9F AD |  if_e	jmp	#LR__4590
2f764                 | LR__4593
2f764                 | LR__4594
2f764     04 2C 0E F2 | 	cmp	local04, #4 wz
2f768     07 2C 06 A6 |  if_e	mov	local04, #7
2f76c                 | ' 	return res;
2f76c     16 FB 01 F6 | 	mov	result1, local04
2f770     A7 F0 03 F6 | 	mov	ptra, fp
2f774     B2 00 A0 FD | 	call	#popregs_
2f778                 | _fatfs_cc_dir_alloc_ret
2f778     2D 00 64 FD | 	ret
2f77c                 | 
2f77c                 | _fatfs_cc_ld_clust
2f77c     09 01 02 F6 | 	mov	_var01, arg01
2f780     0A 13 02 F6 | 	mov	arg01, arg02
2f784     1A 12 06 F1 | 	add	arg01, #26
2f788                 | ' {
2f788                 | ' 
2f788                 | ' 	return *((WORD*)ptr);
2f788     09 FB E1 FA | 	rdword	result1, arg01
2f78c     FD 12 32 F9 | 	getword	arg01, result1, #0
2f790     00 01 C2 FA | 	rdbyte	_var01, _var01
2f794     03 00 0E F2 | 	cmp	_var01, #3 wz
2f798     14 14 06 A1 |  if_e	add	arg02, #20
2f79c                 | ' {
2f79c                 | ' 
2f79c                 | ' 	return *((WORD*)ptr);
2f79c     0A FB E1 AA |  if_e	rdword	result1, arg02
2f7a0     10 FA 65 A0 |  if_e	shl	result1, #16
2f7a4     FD 12 42 A5 |  if_e	or	arg01, result1
2f7a8                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
2f7a8                 | ' 	}
2f7a8                 | ' 
2f7a8                 | ' 	return cl;
2f7a8     09 FB 01 F6 | 	mov	result1, arg01
2f7ac                 | _fatfs_cc_ld_clust_ret
2f7ac     2D 00 64 FD | 	ret
2f7b0                 | 
2f7b0                 | _fatfs_cc_st_clust
2f7b0     09 01 02 F6 | 	mov	_var01, arg01
2f7b4     0A 13 02 F6 | 	mov	arg01, arg02
2f7b8     1A 12 06 F1 | 	add	arg01, #26
2f7bc     09 17 52 FC | 	wrword	arg03, arg01
2f7c0     00 01 C2 FA | 	rdbyte	_var01, _var01
2f7c4     03 00 0E F2 | 	cmp	_var01, #3 wz
2f7c8     14 14 06 A1 |  if_e	add	arg02, #20
2f7cc     10 16 46 A0 |  if_e	shr	arg03, #16
2f7d0     0A 17 52 AC |  if_e	wrword	arg03, arg02
2f7d4                 | _fatfs_cc_st_clust_ret
2f7d4     2D 00 64 FD | 	ret
2f7d8                 | 
2f7d8                 | _fatfs_cc_cmp_lfn
2f7d8     07 4A 05 F6 | 	mov	COUNT_, #7
2f7dc     A8 00 A0 FD | 	call	#pushregs_
2f7e0     09 27 02 F6 | 	mov	local01, arg01
2f7e4     0A 13 02 F6 | 	mov	arg01, arg02
2f7e8     1A 12 06 F1 | 	add	arg01, #26
2f7ec                 | ' {
2f7ec                 | ' 
2f7ec                 | ' 	return *((WORD*)ptr);
2f7ec     09 FB E9 FA | 	rdword	result1, arg01 wz
2f7f0     00 FA 05 56 |  if_ne	mov	result1, #0
2f7f4     E0 00 90 5D |  if_ne	jmp	#LR__4606
2f7f8     0A 29 C2 FA | 	rdbyte	local02, arg02
2f7fc     3F 28 06 F5 | 	and	local02, #63
2f800     01 28 86 F1 | 	sub	local02, #1
2f804     0D 28 06 FD | 	qmul	local02, #13
2f808                 | ' 
2f808                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
2f808                 | ' 
2f808                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
2f808     01 2A 06 F6 | 	mov	local03, #1
2f80c     00 2C 06 F6 | 	mov	local04, #0
2f810     18 2E 62 FD | 	getqx	local05
2f814                 | LR__4600
2f814     0D 2C 16 F2 | 	cmp	local04, #13 wc
2f818     9C 00 90 3D |  if_ae	jmp	#LR__4605
2f81c     0A 13 02 F6 | 	mov	arg01, arg02
2f820     16 29 02 F6 | 	mov	local02, local04
2f824     01 00 00 FF 
2f828     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2f82c     F6 28 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
2f830     14 29 C2 FA | 	rdbyte	local02, local02
2f834     01 28 06 FA | 	mul	local02, #1
2f838     14 13 02 F1 | 	add	arg01, local02
2f83c     01 00 00 FF 
2f840     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
2f844                 | ' {
2f844                 | ' 
2f844                 | ' 	return *((WORD*)ptr);
2f844     09 FB E1 FA | 	rdword	result1, arg01
2f848     FD 30 02 F6 | 	mov	local06, result1
2f84c     15 29 02 F6 | 	mov	local02, local03
2f850     0F 28 4E F7 | 	zerox	local02, #15 wz
2f854     44 00 90 AD |  if_e	jmp	#LR__4603
2f858     00 2F 16 F2 | 	cmp	local05, #256 wc
2f85c     2C 00 90 3D |  if_ae	jmp	#LR__4601
2f860     18 13 32 F9 | 	getword	arg01, local06, #0
2f864     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
2f868     FD 28 02 F6 | 	mov	local02, result1
2f86c     17 2B 02 F6 | 	mov	local03, local05
2f870     01 2A 66 F0 | 	shl	local03, #1
2f874     13 2B 02 F1 | 	add	local03, local01
2f878     15 13 E2 FA | 	rdword	arg01, local03
2f87c     01 2E 06 F1 | 	add	local05, #1
2f880     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
2f884     FD 28 0A F2 | 	cmp	local02, result1 wz
2f888     08 00 90 AD |  if_e	jmp	#LR__4602
2f88c                 | LR__4601
2f88c                 | ' 				return 0;
2f88c     00 FA 05 F6 | 	mov	result1, #0
2f890     44 00 90 FD | 	jmp	#LR__4606
2f894                 | LR__4602
2f894     18 2B 02 F6 | 	mov	local03, local06
2f898     14 00 90 FD | 	jmp	#LR__4604
2f89c                 | LR__4603
2f89c     18 31 32 F9 | 	getword	local06, local06, #0
2f8a0     7F 00 00 FF 
2f8a4     FF 31 0E F2 | 	cmp	local06, ##65535 wz
2f8a8     00 FA 05 56 |  if_ne	mov	result1, #0
2f8ac     28 00 90 5D |  if_ne	jmp	#LR__4606
2f8b0                 | LR__4604
2f8b0     01 2C 06 F1 | 	add	local04, #1
2f8b4     5C FF 9F FD | 	jmp	#LR__4600
2f8b8                 | LR__4605
2f8b8     0A 29 C2 FA | 	rdbyte	local02, arg02
2f8bc     40 28 CE F7 | 	test	local02, #64 wz
2f8c0     00 2A 0E 52 |  if_ne	cmp	local03, #0 wz
2f8c4     01 2E 66 50 |  if_ne	shl	local05, #1
2f8c8     13 2F 02 51 |  if_ne	add	local05, local01
2f8cc     17 33 EA 5A |  if_ne	rdword	local07, local05 wz
2f8d0     00 FA 05 56 |  if_ne	mov	result1, #0
2f8d4                 | ' 
2f8d4                 | ' 	return 1;
2f8d4     01 FA 05 A6 |  if_e	mov	result1, #1
2f8d8                 | LR__4606
2f8d8     A7 F0 03 F6 | 	mov	ptra, fp
2f8dc     B2 00 A0 FD | 	call	#popregs_
2f8e0                 | _fatfs_cc_cmp_lfn_ret
2f8e0     2D 00 64 FD | 	ret
2f8e4                 | 
2f8e4                 | _fatfs_cc_pick_lfn
2f8e4     09 01 02 F6 | 	mov	_var01, arg01
2f8e8     0A 13 02 F6 | 	mov	arg01, arg02
2f8ec     1A 12 06 F1 | 	add	arg01, #26
2f8f0                 | ' {
2f8f0                 | ' 
2f8f0                 | ' 	return *((WORD*)ptr);
2f8f0     09 FB E9 FA | 	rdword	result1, arg01 wz
2f8f4     00 FA 05 56 |  if_ne	mov	result1, #0
2f8f8     D4 00 90 5D |  if_ne	jmp	#LR__4615
2f8fc     0A 03 C2 FA | 	rdbyte	_var02, arg02
2f900     40 02 26 F5 | 	andn	_var02, #64
2f904     01 02 86 F1 | 	sub	_var02, #1
2f908     0D 02 06 FD | 	qmul	_var02, #13
2f90c                 | ' 
2f90c                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
2f90c                 | ' 
2f90c                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
2f90c     01 04 06 F6 | 	mov	_var03, #1
2f910     00 06 06 F6 | 	mov	_var04, #0
2f914     18 08 62 FD | 	getqx	_var05
2f918                 | LR__4610
2f918     0D 06 16 F2 | 	cmp	_var04, #13 wc
2f91c     80 00 90 3D |  if_ae	jmp	#LR__4613
2f920     0A 13 02 F6 | 	mov	arg01, arg02
2f924     03 03 02 F6 | 	mov	_var02, _var04
2f928     01 00 00 FF 
2f92c     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2f930     F6 02 02 F1 | 	add	_var02, ptr__fatfs_cc_dat__
2f934     01 03 C2 FA | 	rdbyte	_var02, _var02
2f938     01 02 06 FA | 	mul	_var02, #1
2f93c     01 13 02 F1 | 	add	arg01, _var02
2f940     01 00 00 FF 
2f944     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
2f948                 | ' {
2f948                 | ' 
2f948                 | ' 	return *((WORD*)ptr);
2f948     09 FB E1 FA | 	rdword	result1, arg01
2f94c     FD 0A 02 F6 | 	mov	_var06, result1
2f950     02 03 02 F6 | 	mov	_var02, _var03
2f954     0F 02 4E F7 | 	zerox	_var02, #15 wz
2f958     28 00 90 AD |  if_e	jmp	#LR__4611
2f95c     00 09 16 F2 | 	cmp	_var05, #256 wc
2f960     00 FA 05 36 |  if_ae	mov	result1, #0
2f964     68 00 90 3D |  if_ae	jmp	#LR__4615
2f968     04 03 02 F6 | 	mov	_var02, _var05
2f96c     01 02 66 F0 | 	shl	_var02, #1
2f970     00 03 02 F1 | 	add	_var02, _var01
2f974     05 05 02 F6 | 	mov	_var03, _var06
2f978     01 05 52 FC | 	wrword	_var03, _var02
2f97c     01 08 06 F1 | 	add	_var05, #1
2f980     14 00 90 FD | 	jmp	#LR__4612
2f984                 | LR__4611
2f984     05 0B 32 F9 | 	getword	_var06, _var06, #0
2f988     7F 00 00 FF 
2f98c     FF 0B 0E F2 | 	cmp	_var06, ##65535 wz
2f990     00 FA 05 56 |  if_ne	mov	result1, #0
2f994     38 00 90 5D |  if_ne	jmp	#LR__4615
2f998                 | LR__4612
2f998     01 06 06 F1 | 	add	_var04, #1
2f99c     78 FF 9F FD | 	jmp	#LR__4610
2f9a0                 | LR__4613
2f9a0     0A 03 C2 FA | 	rdbyte	_var02, arg02
2f9a4     40 02 CE F7 | 	test	_var02, #64 wz
2f9a8     02 0D 02 56 |  if_ne	mov	_var07, _var03
2f9ac     0F 0C 4E 57 |  if_ne	zerox	_var07, #15 wz
2f9b0     18 00 90 AD |  if_e	jmp	#LR__4614
2f9b4     00 09 16 F2 | 	cmp	_var05, #256 wc
2f9b8     00 FA 05 36 |  if_ae	mov	result1, #0
2f9bc     10 00 90 3D |  if_ae	jmp	#LR__4615
2f9c0     01 08 66 F0 | 	shl	_var05, #1
2f9c4     00 09 02 F1 | 	add	_var05, _var01
2f9c8     04 01 58 FC | 	wrword	#0, _var05
2f9cc                 | LR__4614
2f9cc                 | ' 		lfnbuf[i] = 0;
2f9cc                 | ' 	}
2f9cc                 | ' 
2f9cc                 | ' 	return 1;
2f9cc     01 FA 05 F6 | 	mov	result1, #1
2f9d0                 | LR__4615
2f9d0                 | _fatfs_cc_pick_lfn_ret
2f9d0     2D 00 64 FD | 	ret
2f9d4                 | 
2f9d4                 | _fatfs_cc_put_lfn
2f9d4     0D 14 06 F1 | 	add	arg02, #13
2f9d8     0A 19 42 FC | 	wrbyte	arg04, arg02
2f9dc     0B 19 E2 F8 | 	getbyte	arg04, arg03, #0
2f9e0     01 18 86 F1 | 	sub	arg04, #1
2f9e4     0D 18 06 FD | 	qmul	arg04, #13
2f9e8     09 01 02 F6 | 	mov	_var01, arg01
2f9ec     02 14 86 F1 | 	sub	arg02, #2
2f9f0     0A 1F 48 FC | 	wrbyte	#15, arg02
2f9f4     01 14 06 F1 | 	add	arg02, #1
2f9f8     0A 01 48 FC | 	wrbyte	#0, arg02
2f9fc     0C 14 86 F1 | 	sub	arg02, #12
2fa00     0A 13 02 F6 | 	mov	arg01, arg02
2fa04     1A 12 06 F1 | 	add	arg01, #26
2fa08     09 01 58 FC | 	wrword	#0, arg01
2fa0c     00 02 06 F6 | 	mov	_var02, #0
2fa10     00 04 06 F6 | 	mov	_var03, #0
2fa14                 | ' 	BYTE* dir,
2fa14                 | ' 	BYTE ord,
2fa14                 | ' 	BYTE sum
2fa14                 | ' )
2fa14                 | ' {
2fa14                 | ' 	UINT i, s;
2fa14                 | ' 	WCHAR wc;
2fa14                 | ' 
2fa14                 | ' 
2fa14                 | ' 	dir[ 13 ] = sum;
2fa14                 | ' 	dir[ 11 ] =  0x0F ;
2fa14                 | ' 	dir[ 12 ] = 0;
2fa14                 | ' 	st_word(dir +  26 , 0);
2fa14                 | ' 
2fa14                 | ' 	i = (ord - 1) * 13;
2fa14                 | ' 	s = wc = 0;
2fa14                 | ' 	do {
2fa14     01 00 00 FF 
2fa18     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2fa1c     18 06 62 FD | 	getqx	_var04
2fa20     97 2A 48 FB | 	callpa	#(@LR__4621-@LR__4620)>>2,fcache_load_ptr_
2fa24                 | LR__4620
2fa24     01 19 32 F9 | 	getword	arg04, _var02, #0
2fa28     7F 00 00 FF 
2fa2c     FF 19 0E F2 | 	cmp	arg04, ##65535 wz
2fa30     03 13 02 56 |  if_ne	mov	arg01, _var04
2fa34     01 06 06 51 |  if_ne	add	_var04, #1
2fa38     01 12 66 50 |  if_ne	shl	arg01, #1
2fa3c     00 13 02 51 |  if_ne	add	arg01, _var01
2fa40     09 03 E2 5A |  if_ne	rdword	_var02, arg01
2fa44     0A 13 02 F6 | 	mov	arg01, arg02
2fa48     02 19 02 F6 | 	mov	arg04, _var03
2fa4c     F6 18 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
2fa50     0C 19 C2 FA | 	rdbyte	arg04, arg04
2fa54     01 18 06 FA | 	mul	arg04, #1
2fa58     0C 13 02 F1 | 	add	arg01, arg04
2fa5c     09 03 52 FC | 	wrword	_var02, arg01
2fa60     01 19 02 F6 | 	mov	arg04, _var02
2fa64     0F 18 4E F7 | 	zerox	arg04, #15 wz
2fa68     0F 02 CE A9 |  if_e	bmask	_var02, #15
2fa6c     01 04 06 F1 | 	add	_var03, #1
2fa70     0D 04 16 F2 | 	cmp	_var03, #13 wc
2fa74     AC FF 9F CD |  if_b	jmp	#LR__4620
2fa78                 | LR__4621
2fa78     01 00 00 FF 
2fa7c     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
2fa80     01 03 32 F9 | 	getword	_var02, _var02, #0
2fa84     7F 00 00 FF 
2fa88     FF 03 0E F2 | 	cmp	_var02, ##65535 wz
2fa8c     01 06 66 50 |  if_ne	shl	_var04, #1
2fa90     00 07 02 51 |  if_ne	add	_var04, _var01
2fa94     03 07 EA 5A |  if_ne	rdword	_var04, _var04 wz
2fa98     0B 17 E2 A8 |  if_e	getbyte	arg03, arg03, #0
2fa9c     40 16 46 A5 |  if_e	or	arg03, #64
2faa0     0A 17 42 FC | 	wrbyte	arg03, arg02
2faa4                 | _fatfs_cc_put_lfn_ret
2faa4     2D 00 64 FD | 	ret
2faa8                 | 
2faa8                 | _fatfs_cc_gen_numname
2faa8     08 4A 05 F6 | 	mov	COUNT_, #8
2faac     A8 00 A0 FD | 	call	#pushregs_
2fab0     2C F0 07 F1 | 	add	ptra, #44
2fab4     09 27 02 F6 | 	mov	local01, arg01
2fab8     0A 29 02 F6 | 	mov	local02, arg02
2fabc     0B 2B 02 F6 | 	mov	local03, arg03
2fac0     0C 2D 02 F6 | 	mov	local04, arg04
2fac4     13 13 02 F6 | 	mov	arg01, local01
2fac8     14 15 02 F6 | 	mov	arg02, local02
2facc     0B 16 06 F6 | 	mov	arg03, #11
2fad0     9C 72 BF FD | 	call	#__system____builtin_memmove
2fad4     06 2C 16 F2 | 	cmp	local04, #6 wc
2fad8     48 00 90 CD |  if_b	jmp	#LR__4635
2fadc     16 2F 02 F6 | 	mov	local05, local04
2fae0     97 1E 48 FB | 	callpa	#(@LR__4633-@LR__4630)>>2,fcache_load_ptr_
2fae4                 | ' 		sreg = seq;
2fae4                 | ' 		while (*lfn) {
2fae4                 | LR__4630
2fae4     15 31 EA FA | 	rdword	local06, local03 wz
2fae8     34 00 90 AD |  if_e	jmp	#LR__4634
2faec     15 33 E2 FA | 	rdword	local07, local03
2faf0                 | ' 			wc = *lfn++;
2faf0                 | ' 			for (i = 0; i < 16; i++) {
2faf0     02 2A 06 F1 | 	add	local03, #2
2faf4     10 12 DC FC | 	rep	@LR__4632, #16
2faf8                 | LR__4631
2faf8     01 2E 66 F0 | 	shl	local05, #1
2fafc     19 31 32 F9 | 	getword	local06, local07, #0
2fb00     01 30 06 F5 | 	and	local06, #1
2fb04     18 2F 02 F1 | 	add	local05, local06
2fb08     19 33 32 F9 | 	getword	local07, local07, #0
2fb0c     01 32 46 F0 | 	shr	local07, #1
2fb10     10 2E 2E F4 | 	testbn	local05, #16 wz
2fb14     88 00 00 5F 
2fb18     21 2E 66 55 |  if_ne	xor	local05, ##69665
2fb1c                 | LR__4632
2fb1c     C4 FF 9F FD | 	jmp	#LR__4630
2fb20                 | LR__4633
2fb20                 | LR__4634
2fb20     17 2D 02 F6 | 	mov	local04, local05
2fb24                 | LR__4635
2fb24     07 32 06 F6 | 	mov	local07, #7
2fb28                 | ' 			}
2fb28                 | ' 		}
2fb28                 | ' 		seq = (UINT)sreg;
2fb28                 | ' 	}
2fb28                 | ' 
2fb28                 | ' 
2fb28                 | ' 	i = 7;
2fb28                 | ' 	do {
2fb28     10 4E 05 F1 | 	add	fp, #16
2fb2c     97 1A 48 FB | 	callpa	#(@LR__4637-@LR__4636)>>2,fcache_load_ptr_
2fb30                 | LR__4636
2fb30     16 2F 42 F8 | 	getnib	local05, local04, #0
2fb34     30 2E 06 F1 | 	add	local05, #48
2fb38     04 2C 46 F0 | 	shr	local04, #4
2fb3c     17 31 E2 F8 | 	getbyte	local06, local05, #0
2fb40     3A 30 16 F2 | 	cmp	local06, #58 wc
2fb44     17 2F E2 38 |  if_ae	getbyte	local05, local05, #0
2fb48     07 2E 06 31 |  if_ae	add	local05, #7
2fb4c     19 31 02 F6 | 	mov	local06, local07
2fb50     01 32 8E F1 | 	sub	local07, #1 wz
2fb54     A7 30 02 F1 | 	add	local06, fp
2fb58     18 2F 42 FC | 	wrbyte	local05, local06
2fb5c     00 2C 0E 52 |  if_ne	cmp	local04, #0 wz
2fb60     CC FF 9F 5D |  if_ne	jmp	#LR__4636
2fb64                 | LR__4637
2fb64     19 31 02 F6 | 	mov	local06, local07
2fb68     A7 30 02 F1 | 	add	local06, fp
2fb6c     18 FD 48 FC | 	wrbyte	#126, local06
2fb70                 | ' 	ns[i] = '~';
2fb70                 | ' 
2fb70                 | ' 
2fb70                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
2fb70     00 2E 06 F6 | 	mov	local05, #0
2fb74     10 4E 85 F1 | 	sub	fp, #16
2fb78     97 2A 48 FB | 	callpa	#(@LR__4640-@LR__4638)>>2,fcache_load_ptr_
2fb7c                 | LR__4638
2fb7c     19 2F 12 F2 | 	cmp	local05, local07 wc
2fb80     4C 00 90 3D |  if_ae	jmp	#LR__4641
2fb84     17 31 02 F6 | 	mov	local06, local05
2fb88     13 31 02 F1 | 	add	local06, local01
2fb8c     18 31 C2 FA | 	rdbyte	local06, local06
2fb90     20 30 0E F2 | 	cmp	local06, #32 wz
2fb94     38 00 90 AD |  if_e	jmp	#LR__4641
2fb98     17 13 02 F6 | 	mov	arg01, local05
2fb9c     13 13 02 F1 | 	add	arg01, local01
2fba0     09 13 CA FA | 	rdbyte	arg01, arg01 wz
2fba4     00 FA 05 56 |  if_ne	mov	result1, #0
2fba8                 | ' 
2fba8                 | ' 	return 0;
2fba8     00 FA 05 A6 |  if_e	mov	result1, #0
2fbac     00 FA 0D F2 | 	cmp	result1, #0 wz
2fbb0     14 00 90 AD |  if_e	jmp	#LR__4639
2fbb4     19 31 02 F6 | 	mov	local06, local07
2fbb8     01 30 86 F1 | 	sub	local06, #1
2fbbc     18 2F 0A F2 | 	cmp	local05, local06 wz
2fbc0     0C 00 90 AD |  if_e	jmp	#LR__4641
2fbc4     01 2E 06 F1 | 	add	local05, #1
2fbc8                 | LR__4639
2fbc8     01 2E 06 F1 | 	add	local05, #1
2fbcc     AC FF 9F FD | 	jmp	#LR__4638
2fbd0                 | LR__4640
2fbd0                 | LR__4641
2fbd0     97 20 48 FB | 	callpa	#(@LR__4645-@LR__4642)>>2,fcache_load_ptr_
2fbd4                 | ' 			j++;
2fbd4                 | ' 		}
2fbd4                 | ' 	}
2fbd4                 | ' 	do {
2fbd4                 | LR__4642
2fbd4     17 31 02 F6 | 	mov	local06, local05
2fbd8     13 31 02 F1 | 	add	local06, local01
2fbdc     08 32 16 F2 | 	cmp	local07, #8 wc
2fbe0     01 2E 06 F1 | 	add	local05, #1
2fbe4     1C 00 90 3D |  if_ae	jmp	#LR__4643
2fbe8     19 2D 02 F6 | 	mov	local04, local07
2fbec     10 4E 05 F1 | 	add	fp, #16
2fbf0     A7 2C 02 F1 | 	add	local04, fp
2fbf4     16 35 C2 FA | 	rdbyte	local08, local04
2fbf8     01 32 06 F1 | 	add	local07, #1
2fbfc     10 4E 85 F1 | 	sub	fp, #16
2fc00     04 00 90 FD | 	jmp	#LR__4644
2fc04                 | LR__4643
2fc04     20 34 06 F6 | 	mov	local08, #32
2fc08                 | LR__4644
2fc08     18 35 42 FC | 	wrbyte	local08, local06
2fc0c     08 2E 16 F2 | 	cmp	local05, #8 wc
2fc10     C0 FF 9F CD |  if_b	jmp	#LR__4642
2fc14                 | LR__4645
2fc14     A7 F0 03 F6 | 	mov	ptra, fp
2fc18     B2 00 A0 FD | 	call	#popregs_
2fc1c                 | _fatfs_cc_gen_numname_ret
2fc1c     2D 00 64 FD | 	ret
2fc20                 | 
2fc20                 | _fatfs_cc_sum_sfn
2fc20     00 00 06 F6 | 	mov	_var01, #0
2fc24                 | ' )
2fc24                 | ' {
2fc24                 | ' 	BYTE sum = 0;
2fc24                 | ' 	UINT n = 11;
2fc24                 | ' 
2fc24                 | ' 	do {
2fc24     97 12 48 FB | 	callpa	#(@LR__4652-@LR__4650)>>2,fcache_load_ptr_
2fc28                 | LR__4650
2fc28     0B 10 DC FC | 	rep	@LR__4653, #11
2fc2c                 | LR__4651
2fc2c     00 FB E1 F8 | 	getbyte	result1, _var01, #0
2fc30     01 FA 45 F0 | 	shr	result1, #1
2fc34     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
2fc38     07 00 66 F0 | 	shl	_var01, #7
2fc3c     00 FB 01 F1 | 	add	result1, _var01
2fc40     09 01 C2 FA | 	rdbyte	_var01, arg01
2fc44     FD 00 02 F1 | 	add	_var01, result1
2fc48     01 12 06 F1 | 	add	arg01, #1
2fc4c                 | LR__4652
2fc4c                 | LR__4653
2fc4c                 | ' 	return sum;
2fc4c     00 FB 01 F6 | 	mov	result1, _var01
2fc50                 | _fatfs_cc_sum_sfn_ret
2fc50     2D 00 64 FD | 	ret
2fc54                 | 
2fc54                 | _fatfs_cc_dir_read
2fc54     0C 4A 05 F6 | 	mov	COUNT_, #12
2fc58     A8 00 A0 FD | 	call	#pushregs_
2fc5c     09 27 02 F6 | 	mov	local01, arg01
2fc60     0A 29 02 F6 | 	mov	local02, arg02
2fc64     04 2A 06 F6 | 	mov	local03, #4
2fc68     13 2D 02 FB | 	rdlong	local04, local01
2fc6c     FF 2E 06 F6 | 	mov	local05, #255
2fc70     FF 30 06 F6 | 	mov	local06, #255
2fc74                 | ' )
2fc74                 | ' {
2fc74                 | ' 	FRESULT res = FR_NO_FILE;
2fc74                 | ' 	FATFS *fs = dp->obj.fs;
2fc74                 | ' 	BYTE attr, b;
2fc74                 | ' 
2fc74                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
2fc74                 | ' 
2fc74                 | ' 
2fc74                 | ' 	while (dp->sect) {
2fc74                 | LR__4660
2fc74     18 26 06 F1 | 	add	local01, #24
2fc78     13 FB 09 FB | 	rdlong	result1, local01 wz
2fc7c     18 26 86 F1 | 	sub	local01, #24
2fc80     AC 01 90 AD |  if_e	jmp	#LR__4670
2fc84     18 26 06 F1 | 	add	local01, #24
2fc88     13 15 02 FB | 	rdlong	arg02, local01
2fc8c     18 26 86 F1 | 	sub	local01, #24
2fc90     16 13 02 F6 | 	mov	arg01, local04
2fc94     AC ED BF FD | 	call	#_fatfs_cc_move_window
2fc98     FD 2A 0A F6 | 	mov	local03, result1 wz
2fc9c     90 01 90 5D |  if_ne	jmp	#LR__4670
2fca0     1C 26 06 F1 | 	add	local01, #28
2fca4     13 FB 01 FB | 	rdlong	result1, local01
2fca8     1C 26 86 F1 | 	sub	local01, #28
2fcac     FD 32 C2 FA | 	rdbyte	local07, result1
2fcb0     19 FB 01 F6 | 	mov	result1, local07
2fcb4     07 FA 4D F7 | 	zerox	result1, #7 wz
2fcb8     04 2A 06 A6 |  if_e	mov	local03, #4
2fcbc                 | ' 			res = FR_NO_FILE; break;
2fcbc     70 01 90 AD |  if_e	jmp	#LR__4670
2fcc0     1C 26 06 F1 | 	add	local01, #28
2fcc4     13 35 02 FB | 	rdlong	local08, local01
2fcc8     0B 34 06 F1 | 	add	local08, #11
2fccc     1A 37 C2 FA | 	rdbyte	local09, local08
2fcd0     3F 36 06 F5 | 	and	local09, #63
2fcd4     16 26 86 F1 | 	sub	local01, #22
2fcd8     13 37 42 FC | 	wrbyte	local09, local01
2fcdc     06 26 86 F1 | 	sub	local01, #6
2fce0     19 FB E1 F8 | 	getbyte	result1, local07, #0
2fce4     E5 FA 0D F2 | 	cmp	result1, #229 wz
2fce8     19 35 02 56 |  if_ne	mov	local08, local07
2fcec     1A 35 E2 58 |  if_ne	getbyte	local08, local08, #0
2fcf0     2E 34 0E 52 |  if_ne	cmp	local08, #46 wz
2fcf4     1C 00 90 AD |  if_e	jmp	#LR__4661
2fcf8     00 38 06 F6 | 	mov	local10, #0
2fcfc     1B 35 E2 F8 | 	getbyte	local08, local09, #0
2fd00     20 34 26 F5 | 	andn	local08, #32
2fd04     08 34 0E F2 | 	cmp	local08, #8 wz
2fd08     01 38 06 A6 |  if_e	mov	local10, #1
2fd0c     14 39 0A F2 | 	cmp	local10, local02 wz
2fd10     08 00 90 AD |  if_e	jmp	#LR__4662
2fd14                 | LR__4661
2fd14     FF 2E 06 F6 | 	mov	local05, #255
2fd18     00 01 90 FD | 	jmp	#LR__4669
2fd1c                 | LR__4662
2fd1c     1B 37 E2 F8 | 	getbyte	local09, local09, #0
2fd20     0F 36 0E F2 | 	cmp	local09, #15 wz
2fd24     B4 00 90 5D |  if_ne	jmp	#LR__4666
2fd28     19 3B E2 F8 | 	getbyte	local11, local07, #0
2fd2c     40 3A CE F7 | 	test	local11, #64 wz
2fd30     30 00 90 AD |  if_e	jmp	#LR__4663
2fd34     1C 26 06 F1 | 	add	local01, #28
2fd38     13 3B 02 FB | 	rdlong	local11, local01
2fd3c     0D 3A 06 F1 | 	add	local11, #13
2fd40     1D 31 C2 FA | 	rdbyte	local06, local11
2fd44     19 33 E2 F8 | 	getbyte	local07, local07, #0
2fd48     BF 32 06 F5 | 	and	local07, #191
2fd4c     19 2F 02 F6 | 	mov	local05, local07
2fd50     0C 26 86 F1 | 	sub	local01, #12
2fd54     13 3B 02 FB | 	rdlong	local11, local01
2fd58     1C 26 06 F1 | 	add	local01, #28
2fd5c     13 3B 62 FC | 	wrlong	local11, local01
2fd60     2C 26 86 F1 | 	sub	local01, #44
2fd64                 | LR__4663
2fd64     19 35 E2 F8 | 	getbyte	local08, local07, #0
2fd68     17 39 E2 F8 | 	getbyte	local10, local05, #0
2fd6c     1C 35 0A F2 | 	cmp	local08, local10 wz
2fd70     5C 00 90 5D |  if_ne	jmp	#LR__4664
2fd74     18 39 E2 F8 | 	getbyte	local10, local06, #0
2fd78     1C 26 06 F1 | 	add	local01, #28
2fd7c     13 37 02 FB | 	rdlong	local09, local01
2fd80     1C 26 86 F1 | 	sub	local01, #28
2fd84     0D 36 06 F1 | 	add	local09, #13
2fd88     1B 35 C2 FA | 	rdbyte	local08, local09
2fd8c     1A 37 E2 F8 | 	getbyte	local09, local08, #0
2fd90     1B 39 0A F2 | 	cmp	local10, local09 wz
2fd94     38 00 90 5D |  if_ne	jmp	#LR__4664
2fd98     0C 2C 06 F1 | 	add	local04, #12
2fd9c     16 13 02 FB | 	rdlong	arg01, local04
2fda0     0C 2C 86 F1 | 	sub	local04, #12
2fda4     1C 26 06 F1 | 	add	local01, #28
2fda8     13 3D 02 FB | 	rdlong	local12, local01
2fdac     1C 26 86 F1 | 	sub	local01, #28
2fdb0     1E 15 02 F6 | 	mov	arg02, local12
2fdb4     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
2fdb8     00 FA 4D F2 | 	cmps	result1, #0 wz
2fdbc     17 3D 02 56 |  if_ne	mov	local12, local05
2fdc0     1E 3D E2 58 |  if_ne	getbyte	local12, local12, #0
2fdc4     01 3C 86 51 |  if_ne	sub	local12, #1
2fdc8     1E 3B 02 56 |  if_ne	mov	local11, local12
2fdcc     04 00 90 5D |  if_ne	jmp	#LR__4665
2fdd0                 | LR__4664
2fdd0     FF 3A 06 F6 | 	mov	local11, #255
2fdd4                 | LR__4665
2fdd4     1D 2F 02 F6 | 	mov	local05, local11
2fdd8     40 00 90 FD | 	jmp	#LR__4668
2fddc                 | LR__4666
2fddc     17 3B 02 F6 | 	mov	local11, local05
2fde0     07 3A 4E F7 | 	zerox	local11, #7 wz
2fde4     20 00 90 5D |  if_ne	jmp	#LR__4667
2fde8     18 31 E2 F8 | 	getbyte	local06, local06, #0
2fdec     1C 26 06 F1 | 	add	local01, #28
2fdf0     13 13 02 FB | 	rdlong	arg01, local01
2fdf4     1C 26 86 F1 | 	sub	local01, #28
2fdf8     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
2fdfc     FD FA E1 F8 | 	getbyte	result1, result1, #0
2fe00     FD 30 0A F2 | 	cmp	local06, result1 wz
2fe04     28 00 90 AD |  if_e	jmp	#LR__4670
2fe08                 | LR__4667
2fe08     2C 26 06 F1 | 	add	local01, #44
2fe0c     FF FF FF FF 
2fe10     13 FF 6B FC | 	wrlong	##-1, local01
2fe14     2C 26 86 F1 | 	sub	local01, #44
2fe18                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
2fe18                 | ' 					}
2fe18                 | ' 					break;
2fe18     14 00 90 FD | 	jmp	#LR__4670
2fe1c                 | LR__4668
2fe1c                 | LR__4669
2fe1c     13 13 02 F6 | 	mov	arg01, local01
2fe20     00 14 06 F6 | 	mov	arg02, #0
2fe24     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
2fe28     FD 2A 0A F6 | 	mov	local03, result1 wz
2fe2c     44 FE 9F AD |  if_e	jmp	#LR__4660
2fe30                 | LR__4670
2fe30     00 2A 0E F2 | 	cmp	local03, #0 wz
2fe34     18 26 06 51 |  if_ne	add	local01, #24
2fe38     13 01 68 5C |  if_ne	wrlong	#0, local01
2fe3c                 | ' 	return res;
2fe3c     15 FB 01 F6 | 	mov	result1, local03
2fe40     A7 F0 03 F6 | 	mov	ptra, fp
2fe44     B2 00 A0 FD | 	call	#popregs_
2fe48                 | _fatfs_cc_dir_read_ret
2fe48     2D 00 64 FD | 	ret
2fe4c                 | 
2fe4c                 | _fatfs_cc_dir_find
2fe4c     0B 4A 05 F6 | 	mov	COUNT_, #11
2fe50     A8 00 A0 FD | 	call	#pushregs_
2fe54     09 27 02 F6 | 	mov	local01, arg01
2fe58     13 29 02 FB | 	rdlong	local02, local01
2fe5c     13 13 02 F6 | 	mov	arg01, local01
2fe60     00 14 06 F6 | 	mov	arg02, #0
2fe64     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
2fe68     00 FA 0D F2 | 	cmp	result1, #0 wz
2fe6c     18 02 90 5D |  if_ne	jmp	#LR__4692
2fe70     FF 2A 06 F6 | 	mov	local03, #255
2fe74     FF 2C 06 F6 | 	mov	local04, #255
2fe78     2C 26 06 F1 | 	add	local01, #44
2fe7c     FF FF FF FF 
2fe80     13 FF 6B FC | 	wrlong	##-1, local01
2fe84     2C 26 86 F1 | 	sub	local01, #44
2fe88                 | ' #line 2404 "ff.c"
2fe88                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
2fe88                 | ' 
2fe88                 | ' 	do {
2fe88                 | LR__4680
2fe88     18 26 06 F1 | 	add	local01, #24
2fe8c     13 15 02 FB | 	rdlong	arg02, local01
2fe90     18 26 86 F1 | 	sub	local01, #24
2fe94     14 13 02 F6 | 	mov	arg01, local02
2fe98     A8 EB BF FD | 	call	#_fatfs_cc_move_window
2fe9c     FD 2E 0A F6 | 	mov	local05, result1 wz
2fea0     E0 01 90 5D |  if_ne	jmp	#LR__4691
2fea4     1C 26 06 F1 | 	add	local01, #28
2fea8     13 17 02 FB | 	rdlong	arg03, local01
2feac     1C 26 86 F1 | 	sub	local01, #28
2feb0     0B 31 C2 FA | 	rdbyte	local06, arg03
2feb4     18 17 02 F6 | 	mov	arg03, local06
2feb8     07 16 4E F7 | 	zerox	arg03, #7 wz
2febc     04 2E 06 A6 |  if_e	mov	local05, #4
2fec0     C0 01 90 AD |  if_e	jmp	#LR__4691
2fec4     1C 26 06 F1 | 	add	local01, #28
2fec8     13 33 02 FB | 	rdlong	local07, local01
2fecc     19 17 02 F6 | 	mov	arg03, local07
2fed0     0B 16 06 F1 | 	add	arg03, #11
2fed4     0B 35 C2 FA | 	rdbyte	local08, arg03
2fed8     3F 34 06 F5 | 	and	local08, #63
2fedc     16 26 86 F1 | 	sub	local01, #22
2fee0     13 35 42 FC | 	wrbyte	local08, local01
2fee4     06 26 86 F1 | 	sub	local01, #6
2fee8     18 17 E2 F8 | 	getbyte	arg03, local06, #0
2feec     E5 16 0E F2 | 	cmp	arg03, #229 wz
2fef0     18 00 90 AD |  if_e	jmp	#LR__4681
2fef4     1A 17 E2 F8 | 	getbyte	arg03, local08, #0
2fef8     08 16 CE F7 | 	test	arg03, #8 wz
2fefc     1A 33 02 56 |  if_ne	mov	local07, local08
2ff00     19 33 E2 58 |  if_ne	getbyte	local07, local07, #0
2ff04     0F 32 0E 52 |  if_ne	cmp	local07, #15 wz
2ff08     18 00 90 AD |  if_e	jmp	#LR__4682
2ff0c                 | LR__4681
2ff0c     FF 2C 06 F6 | 	mov	local04, #255
2ff10     2C 26 06 F1 | 	add	local01, #44
2ff14     FF FF FF FF 
2ff18     13 FF 6B FC | 	wrlong	##-1, local01
2ff1c     2C 26 86 F1 | 	sub	local01, #44
2ff20     4C 01 90 FD | 	jmp	#LR__4690
2ff24                 | LR__4682
2ff24     1A 35 E2 F8 | 	getbyte	local08, local08, #0
2ff28     0F 34 0E F2 | 	cmp	local08, #15 wz
2ff2c     C8 00 90 5D |  if_ne	jmp	#LR__4686
2ff30     2B 26 06 F1 | 	add	local01, #43
2ff34     13 35 C2 FA | 	rdbyte	local08, local01
2ff38     2B 26 86 F1 | 	sub	local01, #43
2ff3c     40 34 CE F7 | 	test	local08, #64 wz
2ff40     2C 01 90 5D |  if_ne	jmp	#LR__4689
2ff44     18 37 E2 F8 | 	getbyte	local09, local06, #0
2ff48     40 36 CE F7 | 	test	local09, #64 wz
2ff4c     30 00 90 AD |  if_e	jmp	#LR__4683
2ff50     1C 26 06 F1 | 	add	local01, #28
2ff54     13 37 02 FB | 	rdlong	local09, local01
2ff58     0D 36 06 F1 | 	add	local09, #13
2ff5c     1B 2B C2 FA | 	rdbyte	local03, local09
2ff60     18 31 E2 F8 | 	getbyte	local06, local06, #0
2ff64     BF 30 06 F5 | 	and	local06, #191
2ff68     18 2D 02 F6 | 	mov	local04, local06
2ff6c     0C 26 86 F1 | 	sub	local01, #12
2ff70     13 37 02 FB | 	rdlong	local09, local01
2ff74     1C 26 06 F1 | 	add	local01, #28
2ff78     13 37 62 FC | 	wrlong	local09, local01
2ff7c     2C 26 86 F1 | 	sub	local01, #44
2ff80                 | LR__4683
2ff80     18 39 E2 F8 | 	getbyte	local10, local06, #0
2ff84     16 33 E2 F8 | 	getbyte	local07, local04, #0
2ff88     19 39 0A F2 | 	cmp	local10, local07 wz
2ff8c     5C 00 90 5D |  if_ne	jmp	#LR__4684
2ff90     15 35 E2 F8 | 	getbyte	local08, local03, #0
2ff94     1C 26 06 F1 | 	add	local01, #28
2ff98     13 33 02 FB | 	rdlong	local07, local01
2ff9c     1C 26 86 F1 | 	sub	local01, #28
2ffa0     0D 32 06 F1 | 	add	local07, #13
2ffa4     19 31 C2 FA | 	rdbyte	local06, local07
2ffa8     18 33 E2 F8 | 	getbyte	local07, local06, #0
2ffac     19 35 0A F2 | 	cmp	local08, local07 wz
2ffb0     38 00 90 5D |  if_ne	jmp	#LR__4684
2ffb4     0C 28 06 F1 | 	add	local02, #12
2ffb8     14 13 02 FB | 	rdlong	arg01, local02
2ffbc     0C 28 86 F1 | 	sub	local02, #12
2ffc0     1C 26 06 F1 | 	add	local01, #28
2ffc4     13 3B 02 FB | 	rdlong	local11, local01
2ffc8     1C 26 86 F1 | 	sub	local01, #28
2ffcc     1D 15 02 F6 | 	mov	arg02, local11
2ffd0     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
2ffd4     00 FA 4D F2 | 	cmps	result1, #0 wz
2ffd8     16 3B 02 56 |  if_ne	mov	local11, local04
2ffdc     1D 3B E2 58 |  if_ne	getbyte	local11, local11, #0
2ffe0     01 3A 86 51 |  if_ne	sub	local11, #1
2ffe4     1D 37 02 56 |  if_ne	mov	local09, local11
2ffe8     04 00 90 5D |  if_ne	jmp	#LR__4685
2ffec                 | LR__4684
2ffec     FF 36 06 F6 | 	mov	local09, #255
2fff0                 | LR__4685
2fff0     1B 2D 02 F6 | 	mov	local04, local09
2fff4     78 00 90 FD | 	jmp	#LR__4689
2fff8                 | LR__4686
2fff8     16 37 02 F6 | 	mov	local09, local04
2fffc     07 36 4E F7 | 	zerox	local09, #7 wz
30000     20 00 90 5D |  if_ne	jmp	#LR__4687
30004     15 39 E2 F8 | 	getbyte	local10, local03, #0
30008     1C 26 06 F1 | 	add	local01, #28
3000c     13 13 02 FB | 	rdlong	arg01, local01
30010     1C 26 86 F1 | 	sub	local01, #28
30014     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
30018     FD FA E1 F8 | 	getbyte	result1, result1, #0
3001c     FD 38 0A F2 | 	cmp	local10, result1 wz
30020     60 00 90 AD |  if_e	jmp	#LR__4691
30024                 | LR__4687
30024     2B 26 06 F1 | 	add	local01, #43
30028     13 37 C2 FA | 	rdbyte	local09, local01
3002c     2B 26 86 F1 | 	sub	local01, #43
30030     01 36 CE F7 | 	test	local09, #1 wz
30034     24 00 90 5D |  if_ne	jmp	#LR__4688
30038     1C 26 06 F1 | 	add	local01, #28
3003c     13 13 02 FB | 	rdlong	arg01, local01
30040     04 26 06 F1 | 	add	local01, #4
30044     13 15 02 F6 | 	mov	arg02, local01
30048     20 26 86 F1 | 	sub	local01, #32
3004c     0B 16 06 F6 | 	mov	arg03, #11
30050     88 DA BF FD | 	call	#_fatfs_cc_memcmp
30054     00 FA 0D F2 | 	cmp	result1, #0 wz
30058     28 00 90 AD |  if_e	jmp	#LR__4691
3005c                 | LR__4688
3005c     FF 2C 06 F6 | 	mov	local04, #255
30060     2C 26 06 F1 | 	add	local01, #44
30064     FF FF FF FF 
30068     13 FF 6B FC | 	wrlong	##-1, local01
3006c     2C 26 86 F1 | 	sub	local01, #44
30070                 | LR__4689
30070                 | LR__4690
30070     13 13 02 F6 | 	mov	arg01, local01
30074     00 14 06 F6 | 	mov	arg02, #0
30078     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
3007c     FD 2E 0A F6 | 	mov	local05, result1 wz
30080     04 FE 9F AD |  if_e	jmp	#LR__4680
30084                 | LR__4691
30084                 | ' 
30084                 | ' 	return res;
30084     17 FB 01 F6 | 	mov	result1, local05
30088                 | LR__4692
30088     A7 F0 03 F6 | 	mov	ptra, fp
3008c     B2 00 A0 FD | 	call	#popregs_
30090                 | _fatfs_cc_dir_find_ret
30090     2D 00 64 FD | 	ret
30094                 | 
30094                 | _fatfs_cc_dir_register
30094     0A 4A 05 F6 | 	mov	COUNT_, #10
30098     A8 00 A0 FD | 	call	#pushregs_
3009c     2C F0 07 F1 | 	add	ptra, #44
300a0     04 4E 05 F1 | 	add	fp, #4
300a4     A7 12 62 FC | 	wrlong	arg01, fp
300a8     09 27 02 FB | 	rdlong	local01, arg01
300ac     08 4E 05 F1 | 	add	fp, #8
300b0     A7 26 62 FC | 	wrlong	local01, fp
300b4     08 4E 85 F1 | 	sub	fp, #8
300b8     A7 28 02 FB | 	rdlong	local02, fp
300bc     04 4E 85 F1 | 	sub	fp, #4
300c0     2B 28 06 F1 | 	add	local02, #43
300c4     14 29 C2 FA | 	rdbyte	local02, local02
300c8     A0 28 CE F7 | 	test	local02, #160 wz
300cc     06 FA 05 56 |  if_ne	mov	result1, #6
300d0     F8 03 90 5D |  if_ne	jmp	#LR__4715
300d4                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
300d4     14 4E 05 F1 | 	add	fp, #20
300d8     A7 00 68 FC | 	wrlong	#0, fp
300dc     14 4E 85 F1 | 	sub	fp, #20
300e0     97 28 48 FB | 	callpa	#(@LR__4701-@LR__4700)>>2,fcache_load_ptr_
300e4                 | LR__4700
300e4     0C 4E 05 F1 | 	add	fp, #12
300e8     A7 28 02 FB | 	rdlong	local02, fp
300ec     0C 28 06 F1 | 	add	local02, #12
300f0     14 2B 02 FB | 	rdlong	local03, local02
300f4     08 4E 05 F1 | 	add	fp, #8
300f8     A7 2C 02 FB | 	rdlong	local04, fp
300fc     14 4E 85 F1 | 	sub	fp, #20
30100     01 2C 66 F0 | 	shl	local04, #1
30104     15 2D 02 F1 | 	add	local04, local03
30108     16 29 EA FA | 	rdword	local02, local04 wz
3010c     24 00 90 AD |  if_e	jmp	#LR__4702
30110     14 4E 05 F1 | 	add	fp, #20
30114     A7 2E 02 FB | 	rdlong	local05, fp
30118     17 31 02 F6 | 	mov	local06, local05
3011c     17 33 02 F6 | 	mov	local07, local05
30120     19 35 02 F6 | 	mov	local08, local07
30124     01 34 06 F1 | 	add	local08, #1
30128     A7 34 62 FC | 	wrlong	local08, fp
3012c     14 4E 85 F1 | 	sub	fp, #20
30130     B0 FF 9F FD | 	jmp	#LR__4700
30134                 | LR__4701
30134                 | LR__4702
30134     1C 4E 05 F1 | 	add	fp, #28
30138     A7 12 02 F6 | 	mov	arg01, fp
3013c     18 4E 85 F1 | 	sub	fp, #24
30140     A7 14 02 FB | 	rdlong	arg02, fp
30144     04 4E 85 F1 | 	sub	fp, #4
30148     20 14 06 F1 | 	add	arg02, #32
3014c     0C 16 06 F6 | 	mov	arg03, #12
30150     1C 6C BF FD | 	call	#__system____builtin_memmove
30154     27 4E 05 F1 | 	add	fp, #39
30158     A7 36 C2 FA | 	rdbyte	local09, fp
3015c     27 4E 85 F1 | 	sub	fp, #39
30160     01 36 CE F7 | 	test	local09, #1 wz
30164     F4 00 90 AD |  if_e	jmp	#LR__4705
30168     04 4E 05 F1 | 	add	fp, #4
3016c     A7 38 02 FB | 	rdlong	local10, fp
30170     2B 38 06 F1 | 	add	local10, #43
30174     1C 81 48 FC | 	wrbyte	#64, local10
30178                 | ' 		dp->fn[ 11 ] =  0x40 ;
30178                 | ' 		for (n = 1; n < 100; n++) {
30178     0C 4E 05 F1 | 	add	fp, #12
3017c     A7 02 68 FC | 	wrlong	#1, fp
30180     10 4E 85 F1 | 	sub	fp, #16
30184                 | LR__4703
30184     10 4E 05 F1 | 	add	fp, #16
30188     A7 28 02 FB | 	rdlong	local02, fp
3018c     10 4E 85 F1 | 	sub	fp, #16
30190     64 28 16 F2 | 	cmp	local02, #100 wc
30194     70 00 90 3D |  if_ae	jmp	#LR__4704
30198     04 4E 05 F1 | 	add	fp, #4
3019c     A7 12 02 FB | 	rdlong	arg01, fp
301a0     20 12 06 F1 | 	add	arg01, #32
301a4     18 4E 05 F1 | 	add	fp, #24
301a8     A7 14 02 F6 | 	mov	arg02, fp
301ac     10 4E 85 F1 | 	sub	fp, #16
301b0     A7 38 02 FB | 	rdlong	local10, fp
301b4     0C 38 06 F1 | 	add	local10, #12
301b8     1C 17 02 FB | 	rdlong	arg03, local10
301bc     04 4E 05 F1 | 	add	fp, #4
301c0     A7 18 02 FB | 	rdlong	arg04, fp
301c4     10 4E 85 F1 | 	sub	fp, #16
301c8     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
301cc     04 4E 05 F1 | 	add	fp, #4
301d0     A7 12 02 FB | 	rdlong	arg01, fp
301d4     04 4E 85 F1 | 	sub	fp, #4
301d8     70 FC BF FD | 	call	#_fatfs_cc_dir_find
301dc     08 4E 05 F1 | 	add	fp, #8
301e0     A7 FA 61 FC | 	wrlong	result1, fp
301e4     00 FA 4D F2 | 	cmps	result1, #0 wz
301e8     08 4E 85 F1 | 	sub	fp, #8
301ec     18 00 90 5D |  if_ne	jmp	#LR__4704
301f0     10 4E 05 F1 | 	add	fp, #16
301f4     A7 38 02 FB | 	rdlong	local10, fp
301f8     01 38 06 F1 | 	add	local10, #1
301fc     A7 38 62 FC | 	wrlong	local10, fp
30200     10 4E 85 F1 | 	sub	fp, #16
30204     7C FF 9F FD | 	jmp	#LR__4703
30208                 | LR__4704
30208     10 4E 05 F1 | 	add	fp, #16
3020c     A7 38 02 FB | 	rdlong	local10, fp
30210     10 4E 85 F1 | 	sub	fp, #16
30214     64 38 0E F2 | 	cmp	local10, #100 wz
30218     07 FA 05 A6 |  if_e	mov	result1, #7
3021c     AC 02 90 AD |  if_e	jmp	#LR__4715
30220     08 4E 05 F1 | 	add	fp, #8
30224     A7 38 02 FB | 	rdlong	local10, fp
30228     08 4E 85 F1 | 	sub	fp, #8
3022c     04 38 0E F2 | 	cmp	local10, #4 wz
30230     08 4E 05 51 |  if_ne	add	fp, #8
30234     A7 FA 01 5B |  if_ne	rdlong	result1, fp
30238     08 4E 85 51 |  if_ne	sub	fp, #8
3023c     8C 02 90 5D |  if_ne	jmp	#LR__4715
30240     04 4E 05 F1 | 	add	fp, #4
30244     A7 38 02 FB | 	rdlong	local10, fp
30248     23 4E 05 F1 | 	add	fp, #35
3024c     A7 26 C2 FA | 	rdbyte	local01, fp
30250     27 4E 85 F1 | 	sub	fp, #39
30254     2B 38 06 F1 | 	add	local10, #43
30258     1C 27 42 FC | 	wrbyte	local01, local10
3025c                 | LR__4705
3025c     27 4E 05 F1 | 	add	fp, #39
30260     A7 28 C2 FA | 	rdbyte	local02, fp
30264     27 4E 85 F1 | 	sub	fp, #39
30268     02 28 CE F7 | 	test	local02, #2 wz
3026c     20 00 90 AD |  if_e	jmp	#LR__4706
30270     14 4E 05 F1 | 	add	fp, #20
30274     A7 38 02 FB | 	rdlong	local10, fp
30278     0C 38 06 F1 | 	add	local10, #12
3027c     0D 38 16 FD | 	qdiv	local10, #13
30280     14 4E 85 F1 | 	sub	fp, #20
30284     18 38 62 FD | 	getqx	local10
30288     01 38 06 F1 | 	add	local10, #1
3028c     04 00 90 FD | 	jmp	#LR__4707
30290                 | LR__4706
30290     01 38 06 F6 | 	mov	local10, #1
30294                 | LR__4707
30294     18 4E 05 F1 | 	add	fp, #24
30298     A7 38 62 FC | 	wrlong	local10, fp
3029c     14 4E 85 F1 | 	sub	fp, #20
302a0     A7 12 02 FB | 	rdlong	arg01, fp
302a4     1C 15 02 F6 | 	mov	arg02, local10
302a8     04 4E 85 F1 | 	sub	fp, #4
302ac     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
302b0     08 4E 05 F1 | 	add	fp, #8
302b4     A7 FA 61 FC | 	wrlong	result1, fp
302b8     08 4E 85 F1 | 	sub	fp, #8
302bc     00 FA 0D F2 | 	cmp	result1, #0 wz
302c0     38 01 90 5D |  if_ne	jmp	#LR__4712
302c4     18 4E 05 F1 | 	add	fp, #24
302c8     A7 38 02 FB | 	rdlong	local10, fp
302cc     01 38 8E F1 | 	sub	local10, #1 wz
302d0     A7 38 62 FC | 	wrlong	local10, fp
302d4     18 4E 85 F1 | 	sub	fp, #24
302d8     20 01 90 AD |  if_e	jmp	#LR__4712
302dc     04 4E 05 F1 | 	add	fp, #4
302e0     A7 38 02 FB | 	rdlong	local10, fp
302e4     1C 13 02 F6 | 	mov	arg01, local10
302e8     14 4E 05 F1 | 	add	fp, #20
302ec     A7 18 02 FB | 	rdlong	arg04, fp
302f0     18 4E 85 F1 | 	sub	fp, #24
302f4     05 18 66 F0 | 	shl	arg04, #5
302f8     10 38 06 F1 | 	add	local10, #16
302fc     1C 15 02 FB | 	rdlong	arg02, local10
30300     0C 15 82 F1 | 	sub	arg02, arg04
30304     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
30308     08 4E 05 F1 | 	add	fp, #8
3030c     A7 FA 61 FC | 	wrlong	result1, fp
30310     08 4E 85 F1 | 	sub	fp, #8
30314     00 FA 0D F2 | 	cmp	result1, #0 wz
30318     E0 00 90 5D |  if_ne	jmp	#LR__4711
3031c     04 4E 05 F1 | 	add	fp, #4
30320     A7 12 02 FB | 	rdlong	arg01, fp
30324     04 4E 85 F1 | 	sub	fp, #4
30328     20 12 06 F1 | 	add	arg01, #32
3032c     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
30330     FD 38 02 F6 | 	mov	local10, result1
30334     28 4E 05 F1 | 	add	fp, #40
30338     A7 38 42 FC | 	wrbyte	local10, fp
3033c     28 4E 85 F1 | 	sub	fp, #40
30340                 | ' 			sum = sum_sfn(dp->fn);
30340                 | ' 			do {
30340                 | LR__4708
30340     0C 4E 05 F1 | 	add	fp, #12
30344     A7 12 02 FB | 	rdlong	arg01, fp
30348     08 4E 85 F1 | 	sub	fp, #8
3034c     A7 26 02 FB | 	rdlong	local01, fp
30350     04 4E 85 F1 | 	sub	fp, #4
30354     18 26 06 F1 | 	add	local01, #24
30358     13 15 02 FB | 	rdlong	arg02, local01
3035c     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
30360     08 4E 05 F1 | 	add	fp, #8
30364     A7 FA 61 FC | 	wrlong	result1, fp
30368     00 FA 4D F2 | 	cmps	result1, #0 wz
3036c     08 4E 85 F1 | 	sub	fp, #8
30370     88 00 90 5D |  if_ne	jmp	#LR__4710
30374     0C 4E 05 F1 | 	add	fp, #12
30378     A7 28 02 FB | 	rdlong	local02, fp
3037c     0C 28 06 F1 | 	add	local02, #12
30380     14 13 02 FB | 	rdlong	arg01, local02
30384     08 4E 85 F1 | 	sub	fp, #8
30388     A7 26 02 FB | 	rdlong	local01, fp
3038c     1C 26 06 F1 | 	add	local01, #28
30390     13 15 02 FB | 	rdlong	arg02, local01
30394     14 4E 05 F1 | 	add	fp, #20
30398     A7 16 02 FB | 	rdlong	arg03, fp
3039c     10 4E 05 F1 | 	add	fp, #16
303a0     A7 18 C2 FA | 	rdbyte	arg04, fp
303a4     28 4E 85 F1 | 	sub	fp, #40
303a8     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
303ac     0C 4E 05 F1 | 	add	fp, #12
303b0     A7 38 02 FB | 	rdlong	local10, fp
303b4     03 38 06 F1 | 	add	local10, #3
303b8     1C 03 48 FC | 	wrbyte	#1, local10
303bc     08 4E 85 F1 | 	sub	fp, #8
303c0     A7 12 02 FB | 	rdlong	arg01, fp
303c4     04 4E 85 F1 | 	sub	fp, #4
303c8     00 14 06 F6 | 	mov	arg02, #0
303cc     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
303d0     08 4E 05 F1 | 	add	fp, #8
303d4     A7 FA 61 FC | 	wrlong	result1, fp
303d8     00 FA 4D F2 | 	cmps	result1, #0 wz
303dc     08 4E 85 F1 | 	sub	fp, #8
303e0     18 00 90 5D |  if_ne	jmp	#LR__4709
303e4     18 4E 05 F1 | 	add	fp, #24
303e8     A7 38 02 FB | 	rdlong	local10, fp
303ec     01 38 8E F1 | 	sub	local10, #1 wz
303f0     A7 38 62 FC | 	wrlong	local10, fp
303f4     18 4E 85 F1 | 	sub	fp, #24
303f8     44 FF 9F 5D |  if_ne	jmp	#LR__4708
303fc                 | LR__4709
303fc                 | LR__4710
303fc                 | LR__4711
303fc                 | LR__4712
303fc     08 4E 05 F1 | 	add	fp, #8
30400     A7 38 0A FB | 	rdlong	local10, fp wz
30404     08 4E 85 F1 | 	sub	fp, #8
30408     B4 00 90 5D |  if_ne	jmp	#LR__4714
3040c     0C 4E 05 F1 | 	add	fp, #12
30410     A7 12 02 FB | 	rdlong	arg01, fp
30414     08 4E 85 F1 | 	sub	fp, #8
30418     A7 26 02 FB | 	rdlong	local01, fp
3041c     04 4E 85 F1 | 	sub	fp, #4
30420     18 26 06 F1 | 	add	local01, #24
30424     13 15 02 FB | 	rdlong	arg02, local01
30428     18 E6 BF FD | 	call	#_fatfs_cc_move_window
3042c     08 4E 05 F1 | 	add	fp, #8
30430     A7 FA 61 FC | 	wrlong	result1, fp
30434     08 4E 85 F1 | 	sub	fp, #8
30438     00 FA 0D F2 | 	cmp	result1, #0 wz
3043c     80 00 90 5D |  if_ne	jmp	#LR__4713
30440     04 4E 05 F1 | 	add	fp, #4
30444     A7 28 02 FB | 	rdlong	local02, fp
30448     04 4E 85 F1 | 	sub	fp, #4
3044c     1C 28 06 F1 | 	add	local02, #28
30450     14 13 02 FB | 	rdlong	arg01, local02
30454     00 14 06 F6 | 	mov	arg02, #0
30458     20 16 06 F6 | 	mov	arg03, #32
3045c     98 00 A0 FD | 	call	#\builtin_bytefill_
30460     04 4E 05 F1 | 	add	fp, #4
30464     A7 14 02 FB | 	rdlong	arg02, fp
30468     0A 27 02 F6 | 	mov	local01, arg02
3046c     1C 26 06 F1 | 	add	local01, #28
30470     13 13 02 FB | 	rdlong	arg01, local01
30474     04 4E 85 F1 | 	sub	fp, #4
30478     20 14 06 F1 | 	add	arg02, #32
3047c     0B 16 06 F6 | 	mov	arg03, #11
30480     EC 68 BF FD | 	call	#__system____builtin_memmove
30484     04 4E 05 F1 | 	add	fp, #4
30488     A7 36 02 FB | 	rdlong	local09, fp
3048c     1B 39 02 F6 | 	mov	local10, local09
30490     1C 38 06 F1 | 	add	local10, #28
30494     1C 27 02 FB | 	rdlong	local01, local10
30498     2B 36 06 F1 | 	add	local09, #43
3049c     1B 39 C2 FA | 	rdbyte	local10, local09
304a0     18 38 06 F5 | 	and	local10, #24
304a4     0C 26 06 F1 | 	add	local01, #12
304a8     13 39 42 FC | 	wrbyte	local10, local01
304ac     08 4E 05 F1 | 	add	fp, #8
304b0     A7 38 02 FB | 	rdlong	local10, fp
304b4     0C 4E 85 F1 | 	sub	fp, #12
304b8     03 38 06 F1 | 	add	local10, #3
304bc     1C 03 48 FC | 	wrbyte	#1, local10
304c0                 | LR__4713
304c0                 | LR__4714
304c0                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
304c0                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
304c0                 | ' 
304c0                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
304c0                 | ' 
304c0                 | ' 			fs->wflag = 1;
304c0                 | ' 		}
304c0                 | ' 	}
304c0                 | ' 
304c0                 | ' 	return res;
304c0     08 4E 05 F1 | 	add	fp, #8
304c4     A7 FA 01 FB | 	rdlong	result1, fp
304c8     08 4E 85 F1 | 	sub	fp, #8
304cc                 | LR__4715
304cc     A7 F0 03 F6 | 	mov	ptra, fp
304d0     B2 00 A0 FD | 	call	#popregs_
304d4                 | _fatfs_cc_dir_register_ret
304d4     2D 00 64 FD | 	ret
304d8                 | 
304d8                 | _fatfs_cc_dir_remove
304d8     05 4A 05 F6 | 	mov	COUNT_, #5
304dc     A8 00 A0 FD | 	call	#pushregs_
304e0     09 27 02 F6 | 	mov	local01, arg01
304e4     13 29 02 FB | 	rdlong	local02, local01
304e8     10 26 06 F1 | 	add	local01, #16
304ec     13 2B 02 FB | 	rdlong	local03, local01
304f0     1C 26 06 F1 | 	add	local01, #28
304f4     13 15 02 FB | 	rdlong	arg02, local01
304f8     2C 26 86 F1 | 	sub	local01, #44
304fc     FF FF 7F FF 
30500     FF 15 0E F2 | 	cmp	arg02, ##-1 wz
30504     00 2C 06 A6 |  if_e	mov	local04, #0
30508     18 00 90 AD |  if_e	jmp	#LR__4720
3050c     13 13 02 F6 | 	mov	arg01, local01
30510     2C 26 06 F1 | 	add	local01, #44
30514     13 15 02 FB | 	rdlong	arg02, local01
30518     2C 26 86 F1 | 	sub	local01, #44
3051c     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
30520     FD 2C 02 F6 | 	mov	local04, result1
30524                 | LR__4720
30524     16 2F 0A F6 | 	mov	local05, local04 wz
30528     64 00 90 5D |  if_ne	jmp	#LR__4723
3052c                 | ' 		do {
3052c                 | LR__4721
3052c     18 26 06 F1 | 	add	local01, #24
30530     13 15 02 FB | 	rdlong	arg02, local01
30534     18 26 86 F1 | 	sub	local01, #24
30538     14 13 02 F6 | 	mov	arg01, local02
3053c     04 E5 BF FD | 	call	#_fatfs_cc_move_window
30540     FD 2E 0A F6 | 	mov	local05, result1 wz
30544     40 00 90 5D |  if_ne	jmp	#LR__4722
30548     1C 26 06 F1 | 	add	local01, #28
3054c     13 2D 02 FB | 	rdlong	local04, local01
30550     16 CB 49 FC | 	wrbyte	#229, local04
30554     03 28 06 F1 | 	add	local02, #3
30558     14 03 48 FC | 	wrbyte	#1, local02
3055c     03 28 86 F1 | 	sub	local02, #3
30560     0C 26 86 F1 | 	sub	local01, #12
30564     13 2D 02 FB | 	rdlong	local04, local01
30568     10 26 86 F1 | 	sub	local01, #16
3056c     15 2D 12 F2 | 	cmp	local04, local03 wc
30570     14 00 90 3D |  if_ae	jmp	#LR__4722
30574     13 13 02 F6 | 	mov	arg01, local01
30578     00 14 06 F6 | 	mov	arg02, #0
3057c     90 EF BF FD | 	call	#_fatfs_cc_dir_next
30580     FD 2E 0A F6 | 	mov	local05, result1 wz
30584     A4 FF 9F AD |  if_e	jmp	#LR__4721
30588                 | LR__4722
30588     04 2E 0E F2 | 	cmp	local05, #4 wz
3058c     02 2E 06 A6 |  if_e	mov	local05, #2
30590                 | LR__4723
30590                 | ' 	}
30590                 | ' #line 2590 "ff.c"
30590                 | ' 	return res;
30590     17 FB 01 F6 | 	mov	result1, local05
30594     A7 F0 03 F6 | 	mov	ptra, fp
30598     B2 00 A0 FD | 	call	#popregs_
3059c                 | _fatfs_cc_dir_remove_ret
3059c     2D 00 64 FD | 	ret
305a0                 | 
305a0                 | _fatfs_cc_get_fileinfo
305a0     0F 4A 05 F6 | 	mov	COUNT_, #15
305a4     A8 00 A0 FD | 	call	#pushregs_
305a8     09 27 02 F6 | 	mov	local01, arg01
305ac     0A 29 02 F6 | 	mov	local02, arg02
305b0     13 2B 02 FB | 	rdlong	local03, local01
305b4     1C 28 06 F1 | 	add	local02, #28
305b8     14 01 48 FC | 	wrbyte	#0, local02
305bc     1C 28 86 F1 | 	sub	local02, #28
305c0     18 26 06 F1 | 	add	local01, #24
305c4     13 2D 0A FB | 	rdlong	local04, local01 wz
305c8     18 26 86 F1 | 	sub	local01, #24
305cc     90 03 90 AD |  if_e	jmp	#LR__4744
305d0     2C 26 06 F1 | 	add	local01, #44
305d4     13 2D 02 FB | 	rdlong	local04, local01
305d8     2C 26 86 F1 | 	sub	local01, #44
305dc     FF FF 7F FF 
305e0     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
305e4     D8 00 90 AD |  if_e	jmp	#LR__4733
305e8     00 2E 06 F6 | 	mov	local05, #0
305ec     00 30 06 F6 | 	mov	local06, #0
305f0     00 32 06 F6 | 	mov	local07, #0
305f4                 | ' 			si = di = 0;
305f4                 | ' 			hs = 0;
305f4                 | ' 			while (fs->lfnbuf[si] != 0) {
305f4                 | LR__4730
305f4     0C 2A 06 F1 | 	add	local03, #12
305f8     15 2D 02 FB | 	rdlong	local04, local03
305fc     0C 2A 86 F1 | 	sub	local03, #12
30600     18 35 02 F6 | 	mov	local08, local06
30604     01 34 66 F0 | 	shl	local08, #1
30608     16 35 02 F1 | 	add	local08, local04
3060c     1A 2D EA FA | 	rdword	local04, local08 wz
30610     90 00 90 AD |  if_e	jmp	#LR__4732
30614     0C 2A 06 F1 | 	add	local03, #12
30618     15 37 02 FB | 	rdlong	local09, local03
3061c     0C 2A 86 F1 | 	sub	local03, #12
30620     18 39 02 F6 | 	mov	local10, local06
30624     01 38 66 F0 | 	shl	local10, #1
30628     1B 39 02 F1 | 	add	local10, local09
3062c     1C 3B E2 FA | 	rdword	local11, local10
30630     19 2D 02 F6 | 	mov	local04, local07
30634     0F 2C 4E F7 | 	zerox	local04, #15 wz
30638     01 30 06 F1 | 	add	local06, #1
3063c     24 00 90 5D |  if_ne	jmp	#LR__4731
30640     1D 3D 32 F9 | 	getword	local12, local11, #0
30644     6C 00 00 FF 
30648     00 3C 16 F2 | 	cmp	local12, ##55296 wc
3064c     14 00 90 CD |  if_b	jmp	#LR__4731
30650     1D 3F 32 F9 | 	getword	local13, local11, #0
30654     70 00 00 FF 
30658     00 3E 16 F2 | 	cmp	local13, ##57344 wc
3065c     1D 33 02 C6 |  if_b	mov	local07, local11
30660                 | ' 					hs = wc; continue;
30660     90 FF 9F CD |  if_b	jmp	#LR__4730
30664                 | LR__4731
30664     19 13 32 F9 | 	getword	arg01, local07, #0
30668     10 12 66 F0 | 	shl	arg01, #16
3066c     1D 3B 32 F9 | 	getword	local11, local11, #0
30670     1D 13 42 F5 | 	or	arg01, local11
30674     17 15 02 F6 | 	mov	arg02, local05
30678     1C 28 06 F1 | 	add	local02, #28
3067c     14 15 02 F1 | 	add	arg02, local02
30680     FF 16 06 F6 | 	mov	arg03, #255
30684     17 17 82 F1 | 	sub	arg03, local05
30688     1C 28 86 F1 | 	sub	local02, #28
3068c     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
30690     FD 40 0A F6 | 	mov	local14, result1 wz
30694     00 2E 06 A6 |  if_e	mov	local05, #0
30698     20 2F 02 51 |  if_ne	add	local05, local14
3069c     00 32 06 56 |  if_ne	mov	local07, #0
306a0     50 FF 9F 5D |  if_ne	jmp	#LR__4730
306a4                 | LR__4732
306a4     19 2D 02 F6 | 	mov	local04, local07
306a8     0F 2C 4E F7 | 	zerox	local04, #15 wz
306ac     00 2E 06 56 |  if_ne	mov	local05, #0
306b0     1C 28 06 F1 | 	add	local02, #28
306b4     14 2F 02 F1 | 	add	local05, local02
306b8     17 01 48 FC | 	wrbyte	#0, local05
306bc     1C 28 86 F1 | 	sub	local02, #28
306c0                 | LR__4733
306c0     00 2E 06 F6 | 	mov	local05, #0
306c4     00 30 06 F6 | 	mov	local06, #0
306c8                 | ' 			fno->fname[di] = 0;
306c8                 | ' 		}
306c8                 | ' 	}
306c8                 | ' 
306c8                 | ' 	si = di = 0;
306c8                 | ' 	while (si < 11) {
306c8                 | LR__4734
306c8     0B 30 16 F2 | 	cmp	local06, #11 wc
306cc     20 01 90 3D |  if_ae	jmp	#LR__4737
306d0     1C 26 06 F1 | 	add	local01, #28
306d4     13 37 02 FB | 	rdlong	local09, local01
306d8     1C 26 86 F1 | 	sub	local01, #28
306dc     18 39 02 F6 | 	mov	local10, local06
306e0     1B 39 02 F1 | 	add	local10, local09
306e4     1C 3B C2 FA | 	rdbyte	local11, local10
306e8     1D 2D 32 F9 | 	getword	local04, local11, #0
306ec     20 2C 0E F2 | 	cmp	local04, #32 wz
306f0     01 30 06 F1 | 	add	local06, #1
306f4     D0 FF 9F AD |  if_e	jmp	#LR__4734
306f8     1D 2D 32 F9 | 	getword	local04, local11, #0
306fc     05 2C 0E F2 | 	cmp	local04, #5 wz
30700     E5 3A 06 A6 |  if_e	mov	local11, #229
30704     09 30 0E F2 | 	cmp	local06, #9 wz
30708     20 00 90 5D |  if_ne	jmp	#LR__4735
3070c     0C 2E 16 F2 | 	cmp	local05, #12 wc
30710     18 00 90 3D |  if_ae	jmp	#LR__4735
30714     17 3F 02 F6 | 	mov	local13, local05
30718     0C 28 06 F1 | 	add	local02, #12
3071c     14 3F 02 F1 | 	add	local13, local02
30720     1F 5D 48 FC | 	wrbyte	#46, local13
30724     01 2E 06 F1 | 	add	local05, #1
30728     0C 28 86 F1 | 	sub	local02, #12
3072c                 | LR__4735
3072c     1D 13 32 F9 | 	getword	arg01, local11, #0
30730     07 12 4E F7 | 	zerox	arg01, #7 wz
30734     00 FA 05 56 |  if_ne	mov	result1, #0
30738                 | ' 
30738                 | ' 	return 0;
30738     00 FA 05 A6 |  if_e	mov	result1, #0
3073c     00 FA 0D F2 | 	cmp	result1, #0 wz
30740     08 30 0E 52 |  if_ne	cmp	local06, #8 wz
30744     0B 30 0E 52 |  if_ne	cmp	local06, #11 wz
30748     50 00 90 AD |  if_e	jmp	#LR__4736
3074c     1C 26 06 F1 | 	add	local01, #28
30750     13 39 02 FB | 	rdlong	local10, local01
30754     1C 26 86 F1 | 	sub	local01, #28
30758     18 35 02 F6 | 	mov	local08, local06
3075c     1C 35 02 F1 | 	add	local08, local10
30760     1A 13 CA FA | 	rdbyte	arg01, local08 wz
30764     00 FA 05 56 |  if_ne	mov	result1, #0
30768                 | ' 
30768                 | ' 	return 0;
30768     00 FA 05 A6 |  if_e	mov	result1, #0
3076c     00 FA 0D F2 | 	cmp	result1, #0 wz
30770     28 00 90 AD |  if_e	jmp	#LR__4736
30774     1D 3B 32 F9 | 	getword	local11, local11, #0
30778     08 3A 66 F0 | 	shl	local11, #8
3077c     1C 26 06 F1 | 	add	local01, #28
30780     13 41 02 FB | 	rdlong	local14, local01
30784     1C 26 86 F1 | 	sub	local01, #28
30788     18 37 02 F6 | 	mov	local09, local06
3078c     20 37 02 F1 | 	add	local09, local14
30790     1B 3D C2 FA | 	rdbyte	local12, local09
30794     1E 3B 42 F5 | 	or	local11, local12
30798     01 30 06 F1 | 	add	local06, #1
3079c                 | LR__4736
3079c     1D 13 02 F6 | 	mov	arg01, local11
307a0     01 00 00 FF 
307a4     52 15 06 F6 | 	mov	arg02, ##850
307a8     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
307ac     FD 3A 02 F6 | 	mov	local11, result1
307b0     1D 2D 02 F6 | 	mov	local04, local11
307b4     0F 2C 4E F7 | 	zerox	local04, #15 wz
307b8     00 2E 06 A6 |  if_e	mov	local05, #0
307bc     30 00 90 AD |  if_e	jmp	#LR__4737
307c0     1D 13 32 F9 | 	getword	arg01, local11, #0
307c4     17 15 02 F6 | 	mov	arg02, local05
307c8     0C 28 06 F1 | 	add	local02, #12
307cc     14 15 02 F1 | 	add	arg02, local02
307d0     0C 16 06 F6 | 	mov	arg03, #12
307d4     17 17 82 F1 | 	sub	arg03, local05
307d8     0C 28 86 F1 | 	sub	local02, #12
307dc     EC DF BF FD | 	call	#_fatfs_cc_put_utf
307e0     FD 40 0A F6 | 	mov	local14, result1 wz
307e4     00 2E 06 A6 |  if_e	mov	local05, #0
307e8     20 2F 02 51 |  if_ne	add	local05, local14
307ec     D8 FE 9F 5D |  if_ne	jmp	#LR__4734
307f0                 | LR__4737
307f0     17 2D 02 F6 | 	mov	local04, local05
307f4     0C 28 06 F1 | 	add	local02, #12
307f8     14 2D 02 F1 | 	add	local04, local02
307fc     16 01 48 FC | 	wrbyte	#0, local04
30800     10 28 06 F1 | 	add	local02, #16
30804     14 2D CA FA | 	rdbyte	local04, local02 wz
30808     1C 28 86 F1 | 	sub	local02, #28
3080c     F8 00 90 5D |  if_ne	jmp	#LR__4743
30810     00 2E 0E F2 | 	cmp	local05, #0 wz
30814     1C 00 90 5D |  if_ne	jmp	#LR__4738
30818     17 3F 02 F6 | 	mov	local13, local05
3081c     1C 28 06 F1 | 	add	local02, #28
30820     14 3F 02 F1 | 	add	local13, local02
30824     1F 7F 48 FC | 	wrbyte	#63, local13
30828     01 2E 06 F1 | 	add	local05, #1
3082c     1C 28 86 F1 | 	sub	local02, #28
30830     A4 00 90 FD | 	jmp	#LR__4742
30834                 | LR__4738
30834                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
30834     00 2E 06 F6 | 	mov	local05, #0
30838     00 30 06 F6 | 	mov	local06, #0
3083c     08 42 06 F6 | 	mov	local15, #8
30840                 | LR__4739
30840     18 2D 02 F6 | 	mov	local04, local06
30844     0C 28 06 F1 | 	add	local02, #12
30848     14 2D 02 F1 | 	add	local04, local02
3084c     16 3F CA FA | 	rdbyte	local13, local04 wz
30850     0C 28 86 F1 | 	sub	local02, #12
30854     80 00 90 AD |  if_e	jmp	#LR__4741
30858     18 35 02 F6 | 	mov	local08, local06
3085c     0C 28 06 F1 | 	add	local02, #12
30860     14 35 02 F1 | 	add	local08, local02
30864     1A 3B C2 FA | 	rdbyte	local11, local08
30868     1D 41 32 F9 | 	getword	local14, local11, #0
3086c     2E 40 0E F2 | 	cmp	local14, #46 wz
30870     0C 28 86 F1 | 	sub	local02, #12
30874     10 42 06 A6 |  if_e	mov	local15, #16
30878     1D 41 32 F9 | 	getword	local14, local11, #0
3087c     41 40 16 F2 | 	cmp	local14, #65 wc
30880     30 00 90 CD |  if_b	jmp	#LR__4740
30884     1D 35 32 F9 | 	getword	local08, local11, #0
30888     5B 34 16 F2 | 	cmp	local08, #91 wc
3088c     24 00 90 3D |  if_ae	jmp	#LR__4740
30890     1C 26 06 F1 | 	add	local01, #28
30894     13 37 02 FB | 	rdlong	local09, local01
30898     1C 26 86 F1 | 	sub	local01, #28
3089c     0C 36 06 F1 | 	add	local09, #12
308a0     1B 39 C2 FA | 	rdbyte	local10, local09
308a4     21 41 E2 F8 | 	getbyte	local14, local15, #0
308a8     20 39 CA F7 | 	test	local10, local14 wz
308ac     1D 3B 32 59 |  if_ne	getword	local11, local11, #0
308b0     20 3A 06 51 |  if_ne	add	local11, #32
308b4                 | LR__4740
308b4     17 41 02 F6 | 	mov	local14, local05
308b8     1C 28 06 F1 | 	add	local02, #28
308bc     14 41 02 F1 | 	add	local14, local02
308c0     1D 3B 32 F9 | 	getword	local11, local11, #0
308c4     20 3B 42 FC | 	wrbyte	local11, local14
308c8     01 30 06 F1 | 	add	local06, #1
308cc     01 2E 06 F1 | 	add	local05, #1
308d0     1C 28 86 F1 | 	sub	local02, #28
308d4     68 FF 9F FD | 	jmp	#LR__4739
308d8                 | LR__4741
308d8                 | LR__4742
308d8     1C 28 06 F1 | 	add	local02, #28
308dc     14 2F 02 F1 | 	add	local05, local02
308e0     17 01 48 FC | 	wrbyte	#0, local05
308e4     1C 26 06 F1 | 	add	local01, #28
308e8     13 2D 02 FB | 	rdlong	local04, local01
308ec     1C 26 86 F1 | 	sub	local01, #28
308f0     0C 2C 06 F1 | 	add	local04, #12
308f4     16 3F CA FA | 	rdbyte	local13, local04 wz
308f8     1C 28 86 F1 | 	sub	local02, #28
308fc     0C 28 06 A1 |  if_e	add	local02, #12
30900     14 01 48 AC |  if_e	wrbyte	#0, local02
30904     0C 28 86 A1 |  if_e	sub	local02, #12
30908                 | LR__4743
30908     1C 26 06 F1 | 	add	local01, #28
3090c     13 3D 02 FB | 	rdlong	local12, local01
30910     0B 3C 06 F1 | 	add	local12, #11
30914     1E 2D C2 FA | 	rdbyte	local04, local12
30918     3F 2C 06 F5 | 	and	local04, #63
3091c     08 28 06 F1 | 	add	local02, #8
30920     14 2D 42 FC | 	wrbyte	local04, local02
30924     08 28 86 F1 | 	sub	local02, #8
30928     13 13 02 FB | 	rdlong	arg01, local01
3092c     1C 12 06 F1 | 	add	arg01, #28
30930                 | ' {
30930                 | ' 
30930                 | ' 	return *((DWORD*)ptr);
30930     09 FB 01 FB | 	rdlong	result1, arg01
30934     14 FB 61 FC | 	wrlong	result1, local02
30938     13 13 02 FB | 	rdlong	arg01, local01
3093c     16 12 06 F1 | 	add	arg01, #22
30940                 | ' {
30940                 | ' 
30940                 | ' 	return *((WORD*)ptr);
30940     09 FB E1 FA | 	rdword	result1, arg01
30944     06 28 06 F1 | 	add	local02, #6
30948     14 FB 51 FC | 	wrword	result1, local02
3094c     13 13 02 FB | 	rdlong	arg01, local01
30950     18 12 06 F1 | 	add	arg01, #24
30954                 | ' {
30954                 | ' 
30954                 | ' 	return *((WORD*)ptr);
30954     09 FB E1 FA | 	rdword	result1, arg01
30958     02 28 86 F1 | 	sub	local02, #2
3095c     14 FB 51 FC | 	wrword	result1, local02
30960                 | LR__4744
30960     A7 F0 03 F6 | 	mov	ptra, fp
30964     B2 00 A0 FD | 	call	#popregs_
30968                 | _fatfs_cc_get_fileinfo_ret
30968     2D 00 64 FD | 	ret
3096c                 | 
3096c                 | _fatfs_cc_create_name
3096c     0D 4A 05 F6 | 	mov	COUNT_, #13
30970     A8 00 A0 FD | 	call	#pushregs_
30974     34 F0 07 F1 | 	add	ptra, #52
30978     04 4E 05 F1 | 	add	fp, #4
3097c     A7 12 62 FC | 	wrlong	arg01, fp
30980     04 4E 05 F1 | 	add	fp, #4
30984     A7 14 62 FC | 	wrlong	arg02, fp
30988     0A FB 01 FB | 	rdlong	result1, arg02
3098c     28 4E 05 F1 | 	add	fp, #40
30990     A7 FA 61 FC | 	wrlong	result1, fp
30994     2C 4E 85 F1 | 	sub	fp, #44
30998     A7 FA 01 FB | 	rdlong	result1, fp
3099c     FD 26 02 FB | 	rdlong	local01, result1
309a0     0C 26 06 F1 | 	add	local01, #12
309a4     13 29 02 FB | 	rdlong	local02, local01
309a8     14 4E 05 F1 | 	add	fp, #20
309ac     A7 28 62 FC | 	wrlong	local02, fp
309b0     14 4E 05 F1 | 	add	fp, #20
309b4     A7 00 68 FC | 	wrlong	#0, fp
309b8     2C 4E 85 F1 | 	sub	fp, #44
309bc                 | ' 
309bc                 | ' 
309bc                 | ' 
309bc                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
309bc                 | ' 	for (;;) {
309bc                 | LR__4750
309bc     30 4E 05 F1 | 	add	fp, #48
309c0     A7 12 02 F6 | 	mov	arg01, fp
309c4     30 4E 85 F1 | 	sub	fp, #48
309c8     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
309cc     1C 4E 05 F1 | 	add	fp, #28
309d0     A7 FA 61 FC | 	wrlong	result1, fp
309d4     1C 4E 85 F1 | 	sub	fp, #28
309d8     FF FF 7F FF 
309dc     FF FB 0D F2 | 	cmp	result1, ##-1 wz
309e0     06 FA 05 A6 |  if_e	mov	result1, #6
309e4     74 08 90 AD |  if_e	jmp	#LR__4790
309e8     1C 4E 05 F1 | 	add	fp, #28
309ec     A7 26 02 FB | 	rdlong	local01, fp
309f0     1C 4E 85 F1 | 	sub	fp, #28
309f4     80 00 00 FF 
309f8     00 26 16 F2 | 	cmp	local01, ##65536 wc
309fc     3C 00 90 CD |  if_b	jmp	#LR__4751
30a00     18 4E 05 F1 | 	add	fp, #24
30a04     A7 2A 02 FB | 	rdlong	local03, fp
30a08     14 4E 05 F1 | 	add	fp, #20
30a0c     A7 26 02 FB | 	rdlong	local01, fp
30a10     13 2D 02 F6 | 	mov	local04, local01
30a14     01 2C 06 F1 | 	add	local04, #1
30a18     A7 2C 62 FC | 	wrlong	local04, fp
30a1c     01 26 66 F0 | 	shl	local01, #1
30a20     15 27 02 F1 | 	add	local01, local03
30a24     10 4E 85 F1 | 	sub	fp, #16
30a28     A7 2E 02 FB | 	rdlong	local05, fp
30a2c     1C 4E 85 F1 | 	sub	fp, #28
30a30     17 31 02 F6 | 	mov	local06, local05
30a34     10 30 46 F0 | 	shr	local06, #16
30a38     13 31 52 FC | 	wrword	local06, local01
30a3c                 | LR__4751
30a3c     1C 4E 05 F1 | 	add	fp, #28
30a40     A7 26 02 FB | 	rdlong	local01, fp
30a44     08 4E 85 F1 | 	sub	fp, #8
30a48     A7 26 52 FC | 	wrword	local01, fp
30a4c     A7 26 E2 FA | 	rdword	local01, fp
30a50     14 4E 85 F1 | 	sub	fp, #20
30a54     20 26 16 F2 | 	cmp	local01, #32 wc
30a58     B0 00 90 CD |  if_b	jmp	#LR__4753
30a5c     14 4E 05 F1 | 	add	fp, #20
30a60     A7 26 E2 FA | 	rdword	local01, fp
30a64     14 4E 85 F1 | 	sub	fp, #20
30a68     2F 26 0E F2 | 	cmp	local01, #47 wz
30a6c     14 4E 05 51 |  if_ne	add	fp, #20
30a70     A7 2C E2 5A |  if_ne	rdword	local04, fp
30a74     14 4E 85 51 |  if_ne	sub	fp, #20
30a78     5C 2C 0E 52 |  if_ne	cmp	local04, #92 wz
30a7c     8C 00 90 AD |  if_e	jmp	#LR__4753
30a80     14 4E 05 F1 | 	add	fp, #20
30a84     A7 12 E2 FA | 	rdword	arg01, fp
30a88     14 4E 85 F1 | 	sub	fp, #20
30a8c     80 12 16 F2 | 	cmp	arg01, #128 wc
30a90     24 00 90 3D |  if_ae	jmp	#LR__4752
30a94     B4 01 00 FF 
30a98     CC 13 06 F6 | 	mov	arg01, ##@LR__5412
30a9c     14 4E 05 F1 | 	add	fp, #20
30aa0     A7 14 E2 FA | 	rdword	arg02, fp
30aa4     14 4E 85 F1 | 	sub	fp, #20
30aa8     FC D0 BF FD | 	call	#_fatfs_cc_strchr
30aac     00 FA 0D F2 | 	cmp	result1, #0 wz
30ab0     06 FA 05 56 |  if_ne	mov	result1, #6
30ab4     A4 07 90 5D |  if_ne	jmp	#LR__4790
30ab8                 | LR__4752
30ab8     2C 4E 05 F1 | 	add	fp, #44
30abc     A7 30 02 FB | 	rdlong	local06, fp
30ac0     2C 4E 85 F1 | 	sub	fp, #44
30ac4     FF 30 16 F2 | 	cmp	local06, #255 wc
30ac8     06 FA 05 36 |  if_ae	mov	result1, #6
30acc     8C 07 90 3D |  if_ae	jmp	#LR__4790
30ad0     18 4E 05 F1 | 	add	fp, #24
30ad4     A7 2A 02 FB | 	rdlong	local03, fp
30ad8     14 4E 05 F1 | 	add	fp, #20
30adc     A7 28 02 FB | 	rdlong	local02, fp
30ae0     14 2D 02 F6 | 	mov	local04, local02
30ae4     01 2C 06 F1 | 	add	local04, #1
30ae8     A7 2C 62 FC | 	wrlong	local04, fp
30aec     14 27 02 F6 | 	mov	local01, local02
30af0     01 26 66 F0 | 	shl	local01, #1
30af4     15 27 02 F1 | 	add	local01, local03
30af8     18 4E 85 F1 | 	sub	fp, #24
30afc     A7 30 E2 FA | 	rdword	local06, fp
30b00     14 4E 85 F1 | 	sub	fp, #20
30b04     13 31 52 FC | 	wrword	local06, local01
30b08     B0 FE 9F FD | 	jmp	#LR__4750
30b0c                 | LR__4753
30b0c     14 4E 05 F1 | 	add	fp, #20
30b10     A7 32 E2 FA | 	rdword	local07, fp
30b14     14 4E 85 F1 | 	sub	fp, #20
30b18     20 32 16 F2 | 	cmp	local07, #32 wc
30b1c     10 4E 05 C1 |  if_b	add	fp, #16
30b20     A7 08 48 CC |  if_b	wrbyte	#4, fp
30b24     10 4E 85 C1 |  if_b	sub	fp, #16
30b28     74 00 90 CD |  if_b	jmp	#LR__4758
30b2c     97 24 48 FB | 	callpa	#(@LR__4756-@LR__4754)>>2,fcache_load_ptr_
30b30                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
30b30                 | LR__4754
30b30     30 4E 05 F1 | 	add	fp, #48
30b34     A7 2C 02 FB | 	rdlong	local04, fp
30b38     30 4E 85 F1 | 	sub	fp, #48
30b3c     16 33 C2 FA | 	rdbyte	local07, local04
30b40     2F 32 0E F2 | 	cmp	local07, #47 wz
30b44     18 00 90 AD |  if_e	jmp	#LR__4755
30b48     30 4E 05 F1 | 	add	fp, #48
30b4c     A7 2C 02 FB | 	rdlong	local04, fp
30b50     30 4E 85 F1 | 	sub	fp, #48
30b54     16 29 C2 FA | 	rdbyte	local02, local04
30b58     5C 28 0E F2 | 	cmp	local02, #92 wz
30b5c     18 00 90 5D |  if_ne	jmp	#LR__4757
30b60                 | LR__4755
30b60     30 4E 05 F1 | 	add	fp, #48
30b64     A7 26 02 FB | 	rdlong	local01, fp
30b68     01 26 06 F1 | 	add	local01, #1
30b6c     A7 26 62 FC | 	wrlong	local01, fp
30b70     30 4E 85 F1 | 	sub	fp, #48
30b74     B8 FF 9F FD | 	jmp	#LR__4754
30b78                 | LR__4756
30b78                 | LR__4757
30b78     10 4E 05 F1 | 	add	fp, #16
30b7c     A7 00 48 FC | 	wrbyte	#0, fp
30b80     20 4E 05 F1 | 	add	fp, #32
30b84     A7 30 02 FB | 	rdlong	local06, fp
30b88     30 4E 85 F1 | 	sub	fp, #48
30b8c     18 33 C2 FA | 	rdbyte	local07, local06
30b90     20 32 16 F2 | 	cmp	local07, #32 wc
30b94     10 4E 05 C1 |  if_b	add	fp, #16
30b98     A7 08 48 CC |  if_b	wrbyte	#4, fp
30b9c     10 4E 85 C1 |  if_b	sub	fp, #16
30ba0                 | LR__4758
30ba0     08 4E 05 F1 | 	add	fp, #8
30ba4     A7 32 02 FB | 	rdlong	local07, fp
30ba8     28 4E 05 F1 | 	add	fp, #40
30bac     A7 26 02 FB | 	rdlong	local01, fp
30bb0     30 4E 85 F1 | 	sub	fp, #48
30bb4     19 27 62 FC | 	wrlong	local01, local07
30bb8     97 38 48 FB | 	callpa	#(@LR__4760-@LR__4759)>>2,fcache_load_ptr_
30bbc                 | ' 	}
30bbc                 | ' 	*path = p;
30bbc                 | ' #line 2862 "ff.c"
30bbc                 | ' 	while (di) {
30bbc                 | LR__4759
30bbc     2C 4E 05 F1 | 	add	fp, #44
30bc0     A7 32 0A FB | 	rdlong	local07, fp wz
30bc4     2C 4E 85 F1 | 	sub	fp, #44
30bc8     60 00 90 AD |  if_e	jmp	#LR__4761
30bcc     18 4E 05 F1 | 	add	fp, #24
30bd0     A7 30 02 FB | 	rdlong	local06, fp
30bd4     14 4E 05 F1 | 	add	fp, #20
30bd8     A7 2C 02 FB | 	rdlong	local04, fp
30bdc     01 2C 86 F1 | 	sub	local04, #1
30be0     01 2C 66 F0 | 	shl	local04, #1
30be4     18 2D 02 F1 | 	add	local04, local06
30be8     16 31 E2 FA | 	rdword	local06, local04
30bec     18 4E 85 F1 | 	sub	fp, #24
30bf0     A7 30 52 FC | 	wrword	local06, fp
30bf4     A7 32 E2 FA | 	rdword	local07, fp
30bf8     14 4E 85 F1 | 	sub	fp, #20
30bfc     20 32 0E F2 | 	cmp	local07, #32 wz
30c00     14 4E 05 51 |  if_ne	add	fp, #20
30c04     A7 26 E2 5A |  if_ne	rdword	local01, fp
30c08     14 4E 85 51 |  if_ne	sub	fp, #20
30c0c     2E 26 0E 52 |  if_ne	cmp	local01, #46 wz
30c10     18 00 90 5D |  if_ne	jmp	#LR__4761
30c14     2C 4E 05 F1 | 	add	fp, #44
30c18     A7 26 02 FB | 	rdlong	local01, fp
30c1c     01 26 86 F1 | 	sub	local01, #1
30c20     A7 26 62 FC | 	wrlong	local01, fp
30c24     2C 4E 85 F1 | 	sub	fp, #44
30c28     90 FF 9F FD | 	jmp	#LR__4759
30c2c                 | LR__4760
30c2c                 | LR__4761
30c2c     18 4E 05 F1 | 	add	fp, #24
30c30     A7 34 02 FB | 	rdlong	local08, fp
30c34     14 4E 05 F1 | 	add	fp, #20
30c38     A7 2C 02 FB | 	rdlong	local04, fp
30c3c     01 2C 66 F0 | 	shl	local04, #1
30c40     1A 2D 02 F1 | 	add	local04, local08
30c44     16 01 58 FC | 	wrword	#0, local04
30c48     A7 32 0A FB | 	rdlong	local07, fp wz
30c4c     2C 4E 85 F1 | 	sub	fp, #44
30c50     06 FA 05 A6 |  if_e	mov	result1, #6
30c54     04 06 90 AD |  if_e	jmp	#LR__4790
30c58                 | ' 
30c58                 | ' 
30c58                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
30c58     28 4E 05 F1 | 	add	fp, #40
30c5c     A7 00 68 FC | 	wrlong	#0, fp
30c60     28 4E 85 F1 | 	sub	fp, #40
30c64     97 22 48 FB | 	callpa	#(@LR__4763-@LR__4762)>>2,fcache_load_ptr_
30c68                 | LR__4762
30c68     18 4E 05 F1 | 	add	fp, #24
30c6c     A7 36 02 FB | 	rdlong	local09, fp
30c70     10 4E 05 F1 | 	add	fp, #16
30c74     A7 38 02 FB | 	rdlong	local10, fp
30c78     28 4E 85 F1 | 	sub	fp, #40
30c7c     01 38 66 F0 | 	shl	local10, #1
30c80     1B 39 02 F1 | 	add	local10, local09
30c84     1C 3B E2 FA | 	rdword	local11, local10
30c88     20 3A 0E F2 | 	cmp	local11, #32 wz
30c8c     1C 00 90 5D |  if_ne	jmp	#LR__4764
30c90     28 4E 05 F1 | 	add	fp, #40
30c94     A7 3C 02 FB | 	rdlong	local12, fp
30c98     1E 2F 02 F6 | 	mov	local05, local12
30c9c     01 2E 06 F1 | 	add	local05, #1
30ca0     A7 2E 62 FC | 	wrlong	local05, fp
30ca4     28 4E 85 F1 | 	sub	fp, #40
30ca8     BC FF 9F FD | 	jmp	#LR__4762
30cac                 | LR__4763
30cac                 | LR__4764
30cac     28 4E 05 F1 | 	add	fp, #40
30cb0     A7 32 02 FB | 	rdlong	local07, fp
30cb4     28 4E 85 F1 | 	sub	fp, #40
30cb8     01 32 16 F2 | 	cmp	local07, #1 wc
30cbc     28 00 90 3D |  if_ae	jmp	#LR__4765
30cc0     18 4E 05 F1 | 	add	fp, #24
30cc4     A7 2A 02 FB | 	rdlong	local03, fp
30cc8     10 4E 05 F1 | 	add	fp, #16
30ccc     A7 36 02 FB | 	rdlong	local09, fp
30cd0     28 4E 85 F1 | 	sub	fp, #40
30cd4     01 36 66 F0 | 	shl	local09, #1
30cd8     15 37 02 F1 | 	add	local09, local03
30cdc     1B 27 E2 FA | 	rdword	local01, local09
30ce0     2E 26 0E F2 | 	cmp	local01, #46 wz
30ce4     14 00 90 5D |  if_ne	jmp	#LR__4766
30ce8                 | LR__4765
30ce8     10 4E 05 F1 | 	add	fp, #16
30cec     A7 32 C2 FA | 	rdbyte	local07, fp
30cf0     03 32 46 F5 | 	or	local07, #3
30cf4     A7 32 42 FC | 	wrbyte	local07, fp
30cf8     10 4E 85 F1 | 	sub	fp, #16
30cfc                 | LR__4766
30cfc     97 2C 48 FB | 	callpa	#(@LR__4768-@LR__4767)>>2,fcache_load_ptr_
30d00                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
30d00                 | LR__4767
30d00     2C 4E 05 F1 | 	add	fp, #44
30d04     A7 32 02 FB | 	rdlong	local07, fp
30d08     2C 4E 85 F1 | 	sub	fp, #44
30d0c     01 32 16 F2 | 	cmp	local07, #1 wc
30d10     44 00 90 CD |  if_b	jmp	#LR__4769
30d14     18 4E 05 F1 | 	add	fp, #24
30d18     A7 30 02 FB | 	rdlong	local06, fp
30d1c     14 4E 05 F1 | 	add	fp, #20
30d20     A7 2A 02 FB | 	rdlong	local03, fp
30d24     2C 4E 85 F1 | 	sub	fp, #44
30d28     01 2A 86 F1 | 	sub	local03, #1
30d2c     01 2A 66 F0 | 	shl	local03, #1
30d30     18 2B 02 F1 | 	add	local03, local06
30d34     15 27 E2 FA | 	rdword	local01, local03
30d38     2E 26 0E F2 | 	cmp	local01, #46 wz
30d3c     18 00 90 AD |  if_e	jmp	#LR__4769
30d40     2C 4E 05 F1 | 	add	fp, #44
30d44     A7 26 02 FB | 	rdlong	local01, fp
30d48     01 26 86 F1 | 	sub	local01, #1
30d4c     A7 26 62 FC | 	wrlong	local01, fp
30d50     2C 4E 85 F1 | 	sub	fp, #44
30d54     A8 FF 9F FD | 	jmp	#LR__4767
30d58                 | LR__4768
30d58                 | LR__4769
30d58     04 4E 05 F1 | 	add	fp, #4
30d5c     A7 12 02 FB | 	rdlong	arg01, fp
30d60     04 4E 85 F1 | 	sub	fp, #4
30d64     20 12 06 F1 | 	add	arg01, #32
30d68     20 14 06 F6 | 	mov	arg02, #32
30d6c     0B 16 06 F6 | 	mov	arg03, #11
30d70     09 3F 02 F6 | 	mov	local13, arg01
30d74     98 00 A0 FD | 	call	#\builtin_bytefill_
30d78     1F FB 01 F6 | 	mov	result1, local13
30d7c     0C 4E 05 F1 | 	add	fp, #12
30d80     A7 00 48 FC | 	wrbyte	#0, fp
30d84     A7 32 C2 FA | 	rdbyte	local07, fp
30d88     14 4E 05 F1 | 	add	fp, #20
30d8c     A7 32 62 FC | 	wrlong	local07, fp
30d90     04 4E 05 F1 | 	add	fp, #4
30d94     A7 10 68 FC | 	wrlong	#8, fp
30d98     24 4E 85 F1 | 	sub	fp, #36
30d9c                 | ' 
30d9c                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
30d9c                 | ' 	i = b = 0; ni = 8;
30d9c                 | ' 	for (;;) {
30d9c                 | LR__4770
30d9c     18 4E 05 F1 | 	add	fp, #24
30da0     A7 2A 02 FB | 	rdlong	local03, fp
30da4     10 4E 05 F1 | 	add	fp, #16
30da8     A7 36 02 FB | 	rdlong	local09, fp
30dac     1B 2D 02 F6 | 	mov	local04, local09
30db0     01 2C 06 F1 | 	add	local04, #1
30db4     A7 2C 62 FC | 	wrlong	local04, fp
30db8     01 36 66 F0 | 	shl	local09, #1
30dbc     15 37 02 F1 | 	add	local09, local03
30dc0     1B 31 E2 FA | 	rdword	local06, local09
30dc4     14 4E 85 F1 | 	sub	fp, #20
30dc8     A7 30 52 FC | 	wrword	local06, fp
30dcc     A7 32 EA FA | 	rdword	local07, fp wz
30dd0     14 4E 85 F1 | 	sub	fp, #20
30dd4     74 03 90 AD |  if_e	jmp	#LR__4786
30dd8     14 4E 05 F1 | 	add	fp, #20
30ddc     A7 32 E2 FA | 	rdword	local07, fp
30de0     14 4E 85 F1 | 	sub	fp, #20
30de4     20 32 0E F2 | 	cmp	local07, #32 wz
30de8     30 00 90 AD |  if_e	jmp	#LR__4771
30dec     14 4E 05 F1 | 	add	fp, #20
30df0     A7 26 E2 FA | 	rdword	local01, fp
30df4     14 4E 85 F1 | 	sub	fp, #20
30df8     2E 26 0E F2 | 	cmp	local01, #46 wz
30dfc     34 00 90 5D |  if_ne	jmp	#LR__4772
30e00     28 4E 05 F1 | 	add	fp, #40
30e04     A7 2C 02 FB | 	rdlong	local04, fp
30e08     04 4E 05 F1 | 	add	fp, #4
30e0c     A7 38 02 FB | 	rdlong	local10, fp
30e10     2C 4E 85 F1 | 	sub	fp, #44
30e14     1C 2D 0A F2 | 	cmp	local04, local10 wz
30e18     18 00 90 AD |  if_e	jmp	#LR__4772
30e1c                 | LR__4771
30e1c     10 4E 05 F1 | 	add	fp, #16
30e20     A7 32 C2 FA | 	rdbyte	local07, fp
30e24     03 32 46 F5 | 	or	local07, #3
30e28     A7 32 42 FC | 	wrbyte	local07, fp
30e2c     10 4E 85 F1 | 	sub	fp, #16
30e30                 | ' 			cf |=  0x01  |  0x02 ;
30e30                 | ' 			continue;
30e30     68 FF 9F FD | 	jmp	#LR__4770
30e34                 | LR__4772
30e34     20 4E 05 F1 | 	add	fp, #32
30e38     A7 32 02 FB | 	rdlong	local07, fp
30e3c     04 4E 05 F1 | 	add	fp, #4
30e40     A7 26 02 FB | 	rdlong	local01, fp
30e44     24 4E 85 F1 | 	sub	fp, #36
30e48     13 33 12 F2 | 	cmp	local07, local01 wc
30e4c     1C 00 90 3D |  if_ae	jmp	#LR__4773
30e50     28 4E 05 F1 | 	add	fp, #40
30e54     A7 34 02 FB | 	rdlong	local08, fp
30e58     04 4E 05 F1 | 	add	fp, #4
30e5c     A7 38 02 FB | 	rdlong	local10, fp
30e60     2C 4E 85 F1 | 	sub	fp, #44
30e64     1C 35 0A F2 | 	cmp	local08, local10 wz
30e68     B0 00 90 5D |  if_ne	jmp	#LR__4775
30e6c                 | LR__4773
30e6c     24 4E 05 F1 | 	add	fp, #36
30e70     A7 32 02 FB | 	rdlong	local07, fp
30e74     24 4E 85 F1 | 	sub	fp, #36
30e78     0B 32 0E F2 | 	cmp	local07, #11 wz
30e7c     18 00 90 5D |  if_ne	jmp	#LR__4774
30e80     10 4E 05 F1 | 	add	fp, #16
30e84     A7 32 C2 FA | 	rdbyte	local07, fp
30e88     03 32 46 F5 | 	or	local07, #3
30e8c     A7 32 42 FC | 	wrbyte	local07, fp
30e90     10 4E 85 F1 | 	sub	fp, #16
30e94                 | ' 				cf |=  0x01  |  0x02 ;
30e94                 | ' 				break;
30e94     B4 02 90 FD | 	jmp	#LR__4786
30e98                 | LR__4774
30e98     28 4E 05 F1 | 	add	fp, #40
30e9c     A7 32 02 FB | 	rdlong	local07, fp
30ea0     04 4E 05 F1 | 	add	fp, #4
30ea4     A7 26 02 FB | 	rdlong	local01, fp
30ea8     2C 4E 85 F1 | 	sub	fp, #44
30eac     13 33 0A F2 | 	cmp	local07, local01 wz
30eb0     10 4E 05 51 |  if_ne	add	fp, #16
30eb4     A7 32 C2 5A |  if_ne	rdbyte	local07, fp
30eb8     03 32 46 55 |  if_ne	or	local07, #3
30ebc     A7 32 42 5C |  if_ne	wrbyte	local07, fp
30ec0     10 4E 85 51 |  if_ne	sub	fp, #16
30ec4     28 4E 05 F1 | 	add	fp, #40
30ec8     A7 32 02 FB | 	rdlong	local07, fp
30ecc     04 4E 05 F1 | 	add	fp, #4
30ed0     A7 28 02 FB | 	rdlong	local02, fp
30ed4     2C 4E 85 F1 | 	sub	fp, #44
30ed8     14 33 1A F2 | 	cmp	local07, local02 wcz
30edc     6C 02 90 1D |  if_a	jmp	#LR__4786
30ee0     2C 4E 05 F1 | 	add	fp, #44
30ee4     A7 32 02 FB | 	rdlong	local07, fp
30ee8     04 4E 85 F1 | 	sub	fp, #4
30eec     A7 32 62 FC | 	wrlong	local07, fp
30ef0     08 4E 85 F1 | 	sub	fp, #8
30ef4     A7 10 68 FC | 	wrlong	#8, fp
30ef8     04 4E 05 F1 | 	add	fp, #4
30efc     A7 16 68 FC | 	wrlong	#11, fp
30f00     18 4E 85 F1 | 	sub	fp, #24
30f04     A7 3A C2 FA | 	rdbyte	local11, fp
30f08     1D 33 E2 F8 | 	getbyte	local07, local11, #0
30f0c     02 32 66 F0 | 	shl	local07, #2
30f10     A7 32 42 FC | 	wrbyte	local07, fp
30f14     0C 4E 85 F1 | 	sub	fp, #12
30f18                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
30f18                 | ' 			continue;
30f18     80 FE 9F FD | 	jmp	#LR__4770
30f1c                 | LR__4775
30f1c     14 4E 05 F1 | 	add	fp, #20
30f20     A7 32 E2 FA | 	rdword	local07, fp
30f24     14 4E 85 F1 | 	sub	fp, #20
30f28     80 32 16 F2 | 	cmp	local07, #128 wc
30f2c     6C 00 90 CD |  if_b	jmp	#LR__4777
30f30     10 4E 05 F1 | 	add	fp, #16
30f34     A7 32 C2 FA | 	rdbyte	local07, fp
30f38     02 32 46 F5 | 	or	local07, #2
30f3c     A7 32 42 FC | 	wrbyte	local07, fp
30f40     04 4E 05 F1 | 	add	fp, #4
30f44     A7 12 E2 FA | 	rdword	arg01, fp
30f48     14 4E 85 F1 | 	sub	fp, #20
30f4c     01 00 00 FF 
30f50     52 15 06 F6 | 	mov	arg02, ##850
30f54     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
30f58     14 4E 05 F1 | 	add	fp, #20
30f5c     A7 FA 51 FC | 	wrword	result1, fp
30f60     A7 32 E2 FA | 	rdword	local07, fp
30f64     14 4E 85 F1 | 	sub	fp, #20
30f68     80 32 CE F7 | 	test	local07, #128 wz
30f6c     2C 00 90 AD |  if_e	jmp	#LR__4776
30f70     14 4E 05 F1 | 	add	fp, #20
30f74     A7 28 E2 FA | 	rdword	local02, fp
30f78     7F 28 06 F5 | 	and	local02, #127
30f7c     01 00 00 FF 
30f80     BB ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
30f84     F6 28 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
30f88     14 33 C2 FA | 	rdbyte	local07, local02
30f8c     A7 32 52 FC | 	wrword	local07, fp
30f90     14 4E 85 F1 | 	sub	fp, #20
30f94     01 00 00 FF 
30f98     BB ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
30f9c                 | LR__4776
30f9c                 | LR__4777
30f9c     14 4E 05 F1 | 	add	fp, #20
30fa0     A7 32 E2 FA | 	rdword	local07, fp
30fa4     14 4E 85 F1 | 	sub	fp, #20
30fa8     00 33 16 F2 | 	cmp	local07, #256 wc
30fac     88 00 90 CD |  if_b	jmp	#LR__4779
30fb0     24 4E 05 F1 | 	add	fp, #36
30fb4     A7 32 02 FB | 	rdlong	local07, fp
30fb8     01 32 86 F1 | 	sub	local07, #1
30fbc     04 4E 85 F1 | 	sub	fp, #4
30fc0     A7 28 02 FB | 	rdlong	local02, fp
30fc4     20 4E 85 F1 | 	sub	fp, #32
30fc8     19 29 12 F2 | 	cmp	local02, local07 wc
30fcc     2C 00 90 CD |  if_b	jmp	#LR__4778
30fd0     10 4E 05 F1 | 	add	fp, #16
30fd4     A7 3A C2 FA | 	rdbyte	local11, fp
30fd8     1D 33 E2 F8 | 	getbyte	local07, local11, #0
30fdc     03 32 46 F5 | 	or	local07, #3
30fe0     A7 32 42 FC | 	wrbyte	local07, fp
30fe4     14 4E 05 F1 | 	add	fp, #20
30fe8     A7 32 02 FB | 	rdlong	local07, fp
30fec     04 4E 85 F1 | 	sub	fp, #4
30ff0     A7 32 62 FC | 	wrlong	local07, fp
30ff4     20 4E 85 F1 | 	sub	fp, #32
30ff8                 | ' 				cf |=  0x01  |  0x02 ;
30ff8                 | ' 				i = ni; continue;
30ff8     A0 FD 9F FD | 	jmp	#LR__4770
30ffc                 | LR__4778
30ffc     04 4E 05 F1 | 	add	fp, #4
31000     A7 36 02 FB | 	rdlong	local09, fp
31004     1C 4E 05 F1 | 	add	fp, #28
31008     A7 38 02 FB | 	rdlong	local10, fp
3100c     1C 2D 02 F6 | 	mov	local04, local10
31010     01 2C 06 F1 | 	add	local04, #1
31014     A7 2C 62 FC | 	wrlong	local04, fp
31018     20 36 06 F1 | 	add	local09, #32
3101c     1B 39 02 F1 | 	add	local10, local09
31020     0C 4E 85 F1 | 	sub	fp, #12
31024     A7 2A E2 FA | 	rdword	local03, fp
31028     14 4E 85 F1 | 	sub	fp, #20
3102c     08 2A 46 F0 | 	shr	local03, #8
31030     1C 2B 42 FC | 	wrbyte	local03, local10
31034     D4 00 90 FD | 	jmp	#LR__4785
31038                 | LR__4779
31038     14 4E 05 F1 | 	add	fp, #20
3103c     A7 32 EA FA | 	rdword	local07, fp wz
31040     14 4E 85 F1 | 	sub	fp, #20
31044     20 00 90 AD |  if_e	jmp	#LR__4780
31048     B4 01 00 FF 
3104c     D5 13 06 F6 | 	mov	arg01, ##@LR__5413
31050     14 4E 05 F1 | 	add	fp, #20
31054     A7 14 E2 FA | 	rdword	arg02, fp
31058     14 4E 85 F1 | 	sub	fp, #20
3105c     48 CB BF FD | 	call	#_fatfs_cc_strchr
31060     00 FA 0D F2 | 	cmp	result1, #0 wz
31064     20 00 90 AD |  if_e	jmp	#LR__4781
31068                 | LR__4780
31068     14 4E 05 F1 | 	add	fp, #20
3106c     A7 BE 58 FC | 	wrword	#95, fp
31070     04 4E 85 F1 | 	sub	fp, #4
31074     A7 32 C2 FA | 	rdbyte	local07, fp
31078     03 32 46 F5 | 	or	local07, #3
3107c     A7 32 42 FC | 	wrbyte	local07, fp
31080     10 4E 85 F1 | 	sub	fp, #16
31084     84 00 90 FD | 	jmp	#LR__4784
31088                 | LR__4781
31088     14 4E 05 F1 | 	add	fp, #20
3108c     A7 32 E2 FA | 	rdword	local07, fp
31090     14 4E 85 F1 | 	sub	fp, #20
31094     41 32 16 F2 | 	cmp	local07, #65 wc
31098     24 00 90 CD |  if_b	jmp	#LR__4782
3109c     14 4E 05 F1 | 	add	fp, #20
310a0     A7 26 E2 FA | 	rdword	local01, fp
310a4     14 4E 85 F1 | 	sub	fp, #20
310a8     5B 26 16 F2 | 	cmp	local01, #91 wc
310ac     0C 4E 05 C1 |  if_b	add	fp, #12
310b0     A7 32 C2 CA |  if_b	rdbyte	local07, fp
310b4     02 32 46 C5 |  if_b	or	local07, #2
310b8     A7 32 42 CC |  if_b	wrbyte	local07, fp
310bc     0C 4E 85 C1 |  if_b	sub	fp, #12
310c0                 | LR__4782
310c0     14 4E 05 F1 | 	add	fp, #20
310c4     A7 32 E2 FA | 	rdword	local07, fp
310c8     14 4E 85 F1 | 	sub	fp, #20
310cc     61 32 16 F2 | 	cmp	local07, #97 wc
310d0     38 00 90 CD |  if_b	jmp	#LR__4783
310d4     14 4E 05 F1 | 	add	fp, #20
310d8     A7 26 E2 FA | 	rdword	local01, fp
310dc     14 4E 85 F1 | 	sub	fp, #20
310e0     7B 26 16 F2 | 	cmp	local01, #123 wc
310e4     24 00 90 3D |  if_ae	jmp	#LR__4783
310e8     0C 4E 05 F1 | 	add	fp, #12
310ec     A7 32 C2 FA | 	rdbyte	local07, fp
310f0     01 32 46 F5 | 	or	local07, #1
310f4     A7 32 42 FC | 	wrbyte	local07, fp
310f8     08 4E 05 F1 | 	add	fp, #8
310fc     A7 32 E2 FA | 	rdword	local07, fp
31100     20 32 86 F1 | 	sub	local07, #32
31104     A7 32 52 FC | 	wrword	local07, fp
31108     14 4E 85 F1 | 	sub	fp, #20
3110c                 | LR__4783
3110c                 | LR__4784
3110c                 | LR__4785
3110c     04 4E 05 F1 | 	add	fp, #4
31110     A7 3A 02 FB | 	rdlong	local11, fp
31114     1D 37 02 F6 | 	mov	local09, local11
31118     1C 4E 05 F1 | 	add	fp, #28
3111c     A7 28 02 FB | 	rdlong	local02, fp
31120     14 2D 02 F6 | 	mov	local04, local02
31124     01 2C 06 F1 | 	add	local04, #1
31128     A7 2C 62 FC | 	wrlong	local04, fp
3112c     14 39 02 F6 | 	mov	local10, local02
31130     20 36 06 F1 | 	add	local09, #32
31134     1B 39 02 F1 | 	add	local10, local09
31138     0C 4E 85 F1 | 	sub	fp, #12
3113c     A7 2A E2 FA | 	rdword	local03, fp
31140     14 4E 85 F1 | 	sub	fp, #20
31144     1C 2B 42 FC | 	wrbyte	local03, local10
31148     50 FC 9F FD | 	jmp	#LR__4770
3114c                 | LR__4786
3114c     04 4E 05 F1 | 	add	fp, #4
31150     A7 3A 02 FB | 	rdlong	local11, fp
31154     04 4E 85 F1 | 	sub	fp, #4
31158     20 3A 06 F1 | 	add	local11, #32
3115c     1D 33 C2 FA | 	rdbyte	local07, local11
31160     E5 32 0E F2 | 	cmp	local07, #229 wz
31164     04 4E 05 A1 |  if_e	add	fp, #4
31168     A7 32 02 AB |  if_e	rdlong	local07, fp
3116c     04 4E 85 A1 |  if_e	sub	fp, #4
31170     20 32 06 A1 |  if_e	add	local07, #32
31174     19 0B 48 AC |  if_e	wrbyte	#5, local07
31178     24 4E 05 F1 | 	add	fp, #36
3117c     A7 32 02 FB | 	rdlong	local07, fp
31180     24 4E 85 F1 | 	sub	fp, #36
31184     08 32 0E F2 | 	cmp	local07, #8 wz
31188     0C 4E 05 A1 |  if_e	add	fp, #12
3118c     A7 32 C2 AA |  if_e	rdbyte	local07, fp
31190     02 32 66 A0 |  if_e	shl	local07, #2
31194     A7 32 42 AC |  if_e	wrbyte	local07, fp
31198     0C 4E 85 A1 |  if_e	sub	fp, #12
3119c     0C 4E 05 F1 | 	add	fp, #12
311a0     A7 32 C2 FA | 	rdbyte	local07, fp
311a4     0C 4E 85 F1 | 	sub	fp, #12
311a8     0C 32 06 F5 | 	and	local07, #12
311ac     0C 32 0E F2 | 	cmp	local07, #12 wz
311b0     18 00 90 AD |  if_e	jmp	#LR__4787
311b4     0C 4E 05 F1 | 	add	fp, #12
311b8     A7 26 C2 FA | 	rdbyte	local01, fp
311bc     0C 4E 85 F1 | 	sub	fp, #12
311c0     03 26 06 F5 | 	and	local01, #3
311c4     03 26 0E F2 | 	cmp	local01, #3 wz
311c8     14 00 90 5D |  if_ne	jmp	#LR__4788
311cc                 | LR__4787
311cc     10 4E 05 F1 | 	add	fp, #16
311d0     A7 32 C2 FA | 	rdbyte	local07, fp
311d4     02 32 46 F5 | 	or	local07, #2
311d8     A7 32 42 FC | 	wrbyte	local07, fp
311dc     10 4E 85 F1 | 	sub	fp, #16
311e0                 | LR__4788
311e0     10 4E 05 F1 | 	add	fp, #16
311e4     A7 32 C2 FA | 	rdbyte	local07, fp
311e8     10 4E 85 F1 | 	sub	fp, #16
311ec     02 32 CE F7 | 	test	local07, #2 wz
311f0     48 00 90 5D |  if_ne	jmp	#LR__4789
311f4     0C 4E 05 F1 | 	add	fp, #12
311f8     A7 32 C2 FA | 	rdbyte	local07, fp
311fc     0C 4E 85 F1 | 	sub	fp, #12
31200     01 32 CE F7 | 	test	local07, #1 wz
31204     10 4E 05 51 |  if_ne	add	fp, #16
31208     A7 32 C2 5A |  if_ne	rdbyte	local07, fp
3120c     10 32 46 55 |  if_ne	or	local07, #16
31210     A7 32 42 5C |  if_ne	wrbyte	local07, fp
31214     10 4E 85 51 |  if_ne	sub	fp, #16
31218     0C 4E 05 F1 | 	add	fp, #12
3121c     A7 32 C2 FA | 	rdbyte	local07, fp
31220     0C 4E 85 F1 | 	sub	fp, #12
31224     04 32 CE F7 | 	test	local07, #4 wz
31228     10 4E 05 51 |  if_ne	add	fp, #16
3122c     A7 32 C2 5A |  if_ne	rdbyte	local07, fp
31230     08 32 46 55 |  if_ne	or	local07, #8
31234     A7 32 42 5C |  if_ne	wrbyte	local07, fp
31238     10 4E 85 51 |  if_ne	sub	fp, #16
3123c                 | LR__4789
3123c     04 4E 05 F1 | 	add	fp, #4
31240     A7 32 02 FB | 	rdlong	local07, fp
31244     0C 4E 05 F1 | 	add	fp, #12
31248     A7 26 C2 FA | 	rdbyte	local01, fp
3124c     10 4E 85 F1 | 	sub	fp, #16
31250     2B 32 06 F1 | 	add	local07, #43
31254     19 27 42 FC | 	wrbyte	local01, local07
31258                 | ' 	}
31258                 | ' 
31258                 | ' 	dp->fn[ 11 ] = cf;
31258                 | ' 
31258                 | ' 	return FR_OK;
31258     00 FA 05 F6 | 	mov	result1, #0
3125c                 | LR__4790
3125c     A7 F0 03 F6 | 	mov	ptra, fp
31260     B2 00 A0 FD | 	call	#popregs_
31264                 | _fatfs_cc_create_name_ret
31264     2D 00 64 FD | 	ret
31268                 | 
31268                 | _fatfs_cc_follow_path
31268     02 4A 05 F6 | 	mov	COUNT_, #2
3126c     A8 00 A0 FD | 	call	#pushregs_
31270     18 F0 07 F1 | 	add	ptra, #24
31274     04 4E 05 F1 | 	add	fp, #4
31278     A7 12 62 FC | 	wrlong	arg01, fp
3127c     04 4E 05 F1 | 	add	fp, #4
31280     A7 14 62 FC | 	wrlong	arg02, fp
31284     04 4E 85 F1 | 	sub	fp, #4
31288     A7 FA 01 FB | 	rdlong	result1, fp
3128c     FD 26 02 FB | 	rdlong	local01, result1
31290     10 4E 05 F1 | 	add	fp, #16
31294     A7 26 62 FC | 	wrlong	local01, fp
31298     14 4E 85 F1 | 	sub	fp, #20
3129c     97 24 48 FB | 	callpa	#(@LR__4802-@LR__4800)>>2,fcache_load_ptr_
312a0                 | ' )
312a0                 | ' {
312a0                 | ' 	FRESULT res;
312a0                 | ' 	BYTE ns;
312a0                 | ' 	FATFS *fs = dp->obj.fs;
312a0                 | ' #line 3034 "ff.c"
312a0                 | ' 	{
312a0                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
312a0                 | LR__4800
312a0     08 4E 05 F1 | 	add	fp, #8
312a4     A7 26 02 FB | 	rdlong	local01, fp
312a8     08 4E 85 F1 | 	sub	fp, #8
312ac     13 27 C2 FA | 	rdbyte	local01, local01
312b0     2F 26 0E F2 | 	cmp	local01, #47 wz
312b4     18 00 90 AD |  if_e	jmp	#LR__4801
312b8     08 4E 05 F1 | 	add	fp, #8
312bc     A7 26 02 FB | 	rdlong	local01, fp
312c0     08 4E 85 F1 | 	sub	fp, #8
312c4     13 27 C2 FA | 	rdbyte	local01, local01
312c8     5C 26 0E F2 | 	cmp	local01, #92 wz
312cc     18 00 90 5D |  if_ne	jmp	#LR__4803
312d0                 | LR__4801
312d0     08 4E 05 F1 | 	add	fp, #8
312d4     A7 26 02 FB | 	rdlong	local01, fp
312d8     01 26 06 F1 | 	add	local01, #1
312dc     A7 26 62 FC | 	wrlong	local01, fp
312e0     08 4E 85 F1 | 	sub	fp, #8
312e4     B8 FF 9F FD | 	jmp	#LR__4800
312e8                 | LR__4802
312e8                 | LR__4803
312e8     04 4E 05 F1 | 	add	fp, #4
312ec     A7 26 02 FB | 	rdlong	local01, fp
312f0     08 26 06 F1 | 	add	local01, #8
312f4     13 01 68 FC | 	wrlong	#0, local01
312f8     04 4E 05 F1 | 	add	fp, #4
312fc     A7 26 02 FB | 	rdlong	local01, fp
31300     08 4E 85 F1 | 	sub	fp, #8
31304     13 27 C2 FA | 	rdbyte	local01, local01
31308     20 26 16 F2 | 	cmp	local01, #32 wc
3130c     30 00 90 3D |  if_ae	jmp	#LR__4804
31310     04 4E 05 F1 | 	add	fp, #4
31314     A7 26 02 FB | 	rdlong	local01, fp
31318     2B 26 06 F1 | 	add	local01, #43
3131c     13 01 49 FC | 	wrbyte	#128, local01
31320     A7 12 02 FB | 	rdlong	arg01, fp
31324     04 4E 85 F1 | 	sub	fp, #4
31328     00 14 06 F6 | 	mov	arg02, #0
3132c     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
31330     0C 4E 05 F1 | 	add	fp, #12
31334     A7 FA 61 FC | 	wrlong	result1, fp
31338     0C 4E 85 F1 | 	sub	fp, #12
3133c     1C 01 90 FD | 	jmp	#LR__4808
31340                 | LR__4804
31340                 | ' 		for (;;) {
31340                 | LR__4805
31340     04 4E 05 F1 | 	add	fp, #4
31344     A7 12 02 FB | 	rdlong	arg01, fp
31348     04 4E 05 F1 | 	add	fp, #4
3134c     A7 14 02 F6 | 	mov	arg02, fp
31350     08 4E 85 F1 | 	sub	fp, #8
31354     14 F6 BF FD | 	call	#_fatfs_cc_create_name
31358     0C 4E 05 F1 | 	add	fp, #12
3135c     A7 FA 61 FC | 	wrlong	result1, fp
31360     00 FA 4D F2 | 	cmps	result1, #0 wz
31364     0C 4E 85 F1 | 	sub	fp, #12
31368     F0 00 90 5D |  if_ne	jmp	#LR__4807
3136c     04 4E 05 F1 | 	add	fp, #4
31370     A7 12 02 FB | 	rdlong	arg01, fp
31374     04 4E 85 F1 | 	sub	fp, #4
31378     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
3137c     0C 4E 05 F1 | 	add	fp, #12
31380     A7 FA 61 FC | 	wrlong	result1, fp
31384     08 4E 85 F1 | 	sub	fp, #8
31388     A7 26 02 FB | 	rdlong	local01, fp
3138c     2B 26 06 F1 | 	add	local01, #43
31390     13 27 C2 FA | 	rdbyte	local01, local01
31394     0C 4E 05 F1 | 	add	fp, #12
31398     A7 26 42 FC | 	wrbyte	local01, fp
3139c     04 4E 85 F1 | 	sub	fp, #4
313a0     A7 26 0A FB | 	rdlong	local01, fp wz
313a4     0C 4E 85 F1 | 	sub	fp, #12
313a8     34 00 90 AD |  if_e	jmp	#LR__4806
313ac     0C 4E 05 F1 | 	add	fp, #12
313b0     A7 26 02 FB | 	rdlong	local01, fp
313b4     0C 4E 85 F1 | 	sub	fp, #12
313b8     04 26 0E F2 | 	cmp	local01, #4 wz
313bc     9C 00 90 5D |  if_ne	jmp	#LR__4807
313c0     10 4E 05 F1 | 	add	fp, #16
313c4     A7 26 C2 FA | 	rdbyte	local01, fp
313c8     10 4E 85 F1 | 	sub	fp, #16
313cc     04 26 CE F7 | 	test	local01, #4 wz
313d0     0C 4E 05 A1 |  if_e	add	fp, #12
313d4     A7 0A 68 AC |  if_e	wrlong	#5, fp
313d8     0C 4E 85 A1 |  if_e	sub	fp, #12
313dc                 | ' 					}
313dc                 | ' 				}
313dc                 | ' 				break;
313dc     7C 00 90 FD | 	jmp	#LR__4807
313e0                 | LR__4806
313e0     10 4E 05 F1 | 	add	fp, #16
313e4     A7 26 C2 FA | 	rdbyte	local01, fp
313e8     10 4E 85 F1 | 	sub	fp, #16
313ec     04 26 CE F7 | 	test	local01, #4 wz
313f0     68 00 90 5D |  if_ne	jmp	#LR__4807
313f4     04 4E 05 F1 | 	add	fp, #4
313f8     A7 26 02 FB | 	rdlong	local01, fp
313fc     04 4E 85 F1 | 	sub	fp, #4
31400     06 26 06 F1 | 	add	local01, #6
31404     13 27 C2 FA | 	rdbyte	local01, local01
31408     10 26 CE F7 | 	test	local01, #16 wz
3140c     0C 4E 05 A1 |  if_e	add	fp, #12
31410     A7 0A 68 AC |  if_e	wrlong	#5, fp
31414     0C 4E 85 A1 |  if_e	sub	fp, #12
31418                 | ' 				res = FR_NO_PATH; break;
31418     40 00 90 AD |  if_e	jmp	#LR__4807
3141c     04 4E 05 F1 | 	add	fp, #4
31420     A7 28 02 FB | 	rdlong	local02, fp
31424     14 27 02 F6 | 	mov	local01, local02
31428     10 4E 05 F1 | 	add	fp, #16
3142c     A7 14 02 FB | 	rdlong	arg02, fp
31430     0A 13 02 F6 | 	mov	arg01, arg02
31434     34 14 06 F1 | 	add	arg02, #52
31438     14 4E 85 F1 | 	sub	fp, #20
3143c     10 28 06 F1 | 	add	local02, #16
31440     14 29 02 FB | 	rdlong	local02, local02
31444     FF 29 06 F5 | 	and	local02, #511
31448     14 15 02 F1 | 	add	arg02, local02
3144c     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
31450     08 26 06 F1 | 	add	local01, #8
31454     13 FB 61 FC | 	wrlong	result1, local01
31458     E4 FE 9F FD | 	jmp	#LR__4805
3145c                 | LR__4807
3145c                 | LR__4808
3145c                 | ' 			}
3145c                 | ' #line 3090 "ff.c"
3145c                 | ' 			{
3145c                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
3145c                 | ' 			}
3145c                 | ' 		}
3145c                 | ' 	}
3145c                 | ' 
3145c                 | ' 	return res;
3145c     0C 4E 05 F1 | 	add	fp, #12
31460     A7 FA 01 FB | 	rdlong	result1, fp
31464     0C 4E 85 F1 | 	sub	fp, #12
31468     A7 F0 03 F6 | 	mov	ptra, fp
3146c     B2 00 A0 FD | 	call	#popregs_
31470                 | _fatfs_cc_follow_path_ret
31470     2D 00 64 FD | 	ret
31474                 | 
31474                 | _fatfs_cc_get_ldnumber
31474     01 00 66 F6 | 	neg	_var01, #1
31478     09 03 0A FB | 	rdlong	_var02, arg01 wz
3147c     01 05 02 F6 | 	mov	_var03, _var02
31480     01 FA 65 A6 |  if_e	neg	result1, #1
31484     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
31488     97 10 48 FB | 	callpa	#(@LR__4811-@LR__4810)>>2,fcache_load_ptr_
3148c                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
3148c                 | LR__4810
3148c     02 07 C2 FA | 	rdbyte	_var04, _var03
31490     03 FB E1 F8 | 	getbyte	result1, _var04, #0
31494     20 FA 15 F2 | 	cmp	result1, #32 wc
31498     01 04 06 F1 | 	add	_var03, #1
3149c     03 09 02 36 |  if_ae	mov	_var05, _var04
314a0     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
314a4     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
314a8     E0 FF 9F 1D |  if_a	jmp	#LR__4810
314ac                 | LR__4811
314ac     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
314b0     3A 06 0E F2 | 	cmp	_var04, #58 wz
314b4     40 00 90 5D |  if_ne	jmp	#LR__4813
314b8     01 0A 06 F6 | 	mov	_var06, #1
314bc     01 09 C2 FA | 	rdbyte	_var05, _var02
314c0     30 08 16 F2 | 	cmp	_var05, #48 wc
314c4     1C 00 90 CD |  if_b	jmp	#LR__4812
314c8     01 09 C2 FA | 	rdbyte	_var05, _var02
314cc     3A 08 16 F2 | 	cmp	_var05, #58 wc
314d0     01 0D 02 C6 |  if_b	mov	_var07, _var02
314d4     02 0C 06 C1 |  if_b	add	_var07, #2
314d8     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
314dc     01 0B C2 8A |  if_c_and_z	rdbyte	_var06, _var02
314e0     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
314e4                 | LR__4812
314e4     01 0A 56 F2 | 	cmps	_var06, #1 wc
314e8     05 01 02 C6 |  if_b	mov	_var01, _var06
314ec     09 05 62 CC |  if_b	wrlong	_var03, arg01
314f0                 | ' 			vol = i;
314f0                 | ' 			*path = tt;
314f0                 | ' 		}
314f0                 | ' 		return vol;
314f0     00 FB 01 F6 | 	mov	result1, _var01
314f4     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
314f8                 | LR__4813
314f8                 | ' 	}
314f8                 | ' #line 3170 "ff.c"
314f8                 | ' 	vol = 0;
314f8                 | ' 
314f8                 | ' 	return vol;
314f8     00 FA 05 F6 | 	mov	result1, #0
314fc                 | _fatfs_cc_get_ldnumber_ret
314fc     2D 00 64 FD | 	ret
31500                 | 
31500                 | _fatfs_cc_check_fs
31500     04 4A 05 F6 | 	mov	COUNT_, #4
31504     A8 00 A0 FD | 	call	#pushregs_
31508     09 27 02 F6 | 	mov	local01, arg01
3150c     03 26 06 F1 | 	add	local01, #3
31510     13 01 48 FC | 	wrbyte	#0, local01
31514     2D 26 06 F1 | 	add	local01, #45
31518     FF FF FF FF 
3151c     13 FF 6B FC | 	wrlong	##-1, local01
31520     30 26 86 F1 | 	sub	local01, #48
31524     13 13 02 F6 | 	mov	arg01, local01
31528     18 D5 BF FD | 	call	#_fatfs_cc_move_window
3152c     00 FA 0D F2 | 	cmp	result1, #0 wz
31530     04 FA 05 56 |  if_ne	mov	result1, #4
31534     94 01 90 5D |  if_ne	jmp	#LR__4824
31538     34 26 06 F1 | 	add	local01, #52
3153c     13 13 02 F6 | 	mov	arg01, local01
31540     FE 13 06 F1 | 	add	arg01, #510
31544                 | ' {
31544                 | ' 
31544                 | ' 	return *((WORD*)ptr);
31544     09 29 E2 FA | 	rdword	local02, arg01
31548     13 2B C2 FA | 	rdbyte	local03, local01
3154c     34 26 86 F1 | 	sub	local01, #52
31550     15 2D E2 F8 | 	getbyte	local04, local03, #0
31554     EB 2C 0E F2 | 	cmp	local04, #235 wz
31558     15 17 02 56 |  if_ne	mov	arg03, local03
3155c     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
31560     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
31564     15 2B E2 58 |  if_ne	getbyte	local03, local03, #0
31568     E8 2A 0E 52 |  if_ne	cmp	local03, #232 wz
3156c     44 01 90 5D |  if_ne	jmp	#LR__4823
31570     14 2D 32 F9 | 	getword	local04, local02, #0
31574     55 00 00 FF 
31578     55 2C 0E F2 | 	cmp	local04, ##43605 wz
3157c     2C 00 90 5D |  if_ne	jmp	#LR__4820
31580     34 26 06 F1 | 	add	local01, #52
31584     13 13 02 F6 | 	mov	arg01, local01
31588     34 26 86 F1 | 	sub	local01, #52
3158c     52 12 06 F1 | 	add	arg01, #82
31590     B4 01 00 FF 
31594     DC 15 06 F6 | 	mov	arg02, ##@LR__5414
31598     08 16 06 F6 | 	mov	arg03, #8
3159c     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
315a0     00 FA 0D F2 | 	cmp	result1, #0 wz
315a4                 | ' 			return 0;
315a4     00 FA 05 A6 |  if_e	mov	result1, #0
315a8     20 01 90 AD |  if_e	jmp	#LR__4824
315ac                 | LR__4820
315ac     34 26 06 F1 | 	add	local01, #52
315b0     13 13 02 F6 | 	mov	arg01, local01
315b4     0B 12 06 F1 | 	add	arg01, #11
315b8                 | ' {
315b8                 | ' 
315b8                 | ' 	return *((WORD*)ptr);
315b8     09 FB E1 FA | 	rdword	result1, arg01
315bc     0D 26 06 F1 | 	add	local01, #13
315c0     13 2B C2 FA | 	rdbyte	local03, local01
315c4     41 26 86 F1 | 	sub	local01, #65
315c8     FD 2C 32 F9 | 	getword	local04, result1, #0
315cc     FD 14 32 F9 | 	getword	arg02, result1, #0
315d0     01 14 86 F1 | 	sub	arg02, #1
315d4     0A 2D CA F7 | 	test	local04, arg02 wz
315d8     D8 00 90 5D |  if_ne	jmp	#LR__4822
315dc     FD 14 32 F9 | 	getword	arg02, result1, #0
315e0     01 00 00 FF 
315e4     00 14 16 F2 | 	cmp	arg02, ##512 wc
315e8     C8 00 90 CD |  if_b	jmp	#LR__4822
315ec     FD 14 32 F9 | 	getword	arg02, result1, #0
315f0     01 00 00 FF 
315f4     01 14 16 F2 | 	cmp	arg02, ##513 wc
315f8     B8 00 90 3D |  if_ae	jmp	#LR__4822
315fc     15 13 02 F6 | 	mov	arg01, local03
31600     07 12 4E F7 | 	zerox	arg01, #7 wz
31604     AC 00 90 AD |  if_e	jmp	#LR__4822
31608     15 13 E2 F8 | 	getbyte	arg01, local03, #0
3160c     15 2B E2 F8 | 	getbyte	local03, local03, #0
31610     01 2A 86 F1 | 	sub	local03, #1
31614     15 13 CA F7 | 	test	arg01, local03 wz
31618     98 00 90 5D |  if_ne	jmp	#LR__4822
3161c     34 26 06 F1 | 	add	local01, #52
31620     13 13 02 F6 | 	mov	arg01, local01
31624     34 26 86 F1 | 	sub	local01, #52
31628     0E 12 06 F1 | 	add	arg01, #14
3162c                 | ' {
3162c                 | ' 
3162c                 | ' 	return *((WORD*)ptr);
3162c     09 FB E9 FA | 	rdword	result1, arg01 wz
31630     80 00 90 AD |  if_e	jmp	#LR__4822
31634     44 26 06 F1 | 	add	local01, #68
31638     13 13 C2 FA | 	rdbyte	arg01, local01
3163c     44 26 86 F1 | 	sub	local01, #68
31640     01 12 86 F1 | 	sub	arg01, #1
31644     02 12 16 F2 | 	cmp	arg01, #2 wc
31648     68 00 90 3D |  if_ae	jmp	#LR__4822
3164c     34 26 06 F1 | 	add	local01, #52
31650     13 13 02 F6 | 	mov	arg01, local01
31654     34 26 86 F1 | 	sub	local01, #52
31658     11 12 06 F1 | 	add	arg01, #17
3165c                 | ' {
3165c                 | ' 
3165c                 | ' 	return *((WORD*)ptr);
3165c     09 FB E9 FA | 	rdword	result1, arg01 wz
31660     50 00 90 AD |  if_e	jmp	#LR__4822
31664     34 26 06 F1 | 	add	local01, #52
31668     13 13 02 F6 | 	mov	arg01, local01
3166c     34 26 86 F1 | 	sub	local01, #52
31670     13 12 06 F1 | 	add	arg01, #19
31674                 | ' {
31674                 | ' 
31674                 | ' 	return *((WORD*)ptr);
31674     09 FB E1 FA | 	rdword	result1, arg01
31678     FD 2A 32 F9 | 	getword	local03, result1, #0
3167c     80 2A 16 F2 | 	cmp	local03, #128 wc
31680     20 00 90 3D |  if_ae	jmp	#LR__4821
31684     34 26 06 F1 | 	add	local01, #52
31688     13 13 02 F6 | 	mov	arg01, local01
3168c     34 26 86 F1 | 	sub	local01, #52
31690     20 12 06 F1 | 	add	arg01, #32
31694                 | ' {
31694                 | ' 
31694                 | ' 	return *((DWORD*)ptr);
31694     09 FB 01 FB | 	rdlong	result1, arg01
31698     80 00 00 FF 
3169c     00 FA 15 F2 | 	cmp	result1, ##65536 wc
316a0     10 00 90 CD |  if_b	jmp	#LR__4822
316a4                 | LR__4821
316a4     4A 26 06 F1 | 	add	local01, #74
316a8                 | ' {
316a8                 | ' 
316a8                 | ' 	return *((WORD*)ptr);
316a8     13 FB E9 FA | 	rdword	result1, local01 wz
316ac                 | ' 			&& b != 0 && (b & (b - 1)) == 0
316ac                 | ' 			&& ld_word(fs->win +  14 ) != 0
316ac                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
316ac                 | ' 			&& ld_word(fs->win +  17 ) != 0
316ac                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
316ac                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
316ac                 | ' 				return 0;
316ac     00 FA 05 56 |  if_ne	mov	result1, #0
316b0     18 00 90 5D |  if_ne	jmp	#LR__4824
316b4                 | LR__4822
316b4                 | LR__4823
316b4                 | ' 		}
316b4                 | ' 	}
316b4                 | ' 	return sign == 0xAA55 ? 2 : 3;
316b4     14 2B 32 F9 | 	getword	local03, local02, #0
316b8     55 00 00 FF 
316bc     55 2A 0E F2 | 	cmp	local03, ##43605 wz
316c0     02 2C 06 A6 |  if_e	mov	local04, #2
316c4     03 2C 06 56 |  if_ne	mov	local04, #3
316c8     16 FB 01 F6 | 	mov	result1, local04
316cc                 | LR__4824
316cc     A7 F0 03 F6 | 	mov	ptra, fp
316d0     B2 00 A0 FD | 	call	#popregs_
316d4                 | _fatfs_cc_check_fs_ret
316d4     2D 00 64 FD | 	ret
316d8                 | 
316d8                 | _fatfs_cc_find_volume
316d8     05 4A 05 F6 | 	mov	COUNT_, #5
316dc     A8 00 A0 FD | 	call	#pushregs_
316e0     24 F0 07 F1 | 	add	ptra, #36
316e4     09 27 02 F6 | 	mov	local01, arg01
316e8     0A 29 02 F6 | 	mov	local02, arg02
316ec     13 13 02 F6 | 	mov	arg01, local01
316f0     00 14 06 F6 | 	mov	arg02, #0
316f4     08 FE BF FD | 	call	#_fatfs_cc_check_fs
316f8     02 FA 0D F2 | 	cmp	result1, #2 wz
316fc     0C 00 90 AD |  if_e	jmp	#LR__4830
31700     03 FA 15 F2 | 	cmp	result1, #3 wc
31704     00 28 0E C2 |  if_b	cmp	local02, #0 wz
31708     D0 00 90 BD |  if_nc_or_z	jmp	#LR__4838
3170c                 | LR__4830
3170c                 | ' 	for (i = 0; i < 4; i++) {
3170c     00 2A 06 F6 | 	mov	local03, #0
31710     97 26 48 FB | 	callpa	#(@LR__4832-@LR__4831)>>2,fcache_load_ptr_
31714                 | LR__4831
31714     04 2A 16 F2 | 	cmp	local03, #4 wc
31718     44 00 90 3D |  if_ae	jmp	#LR__4833
3171c     15 2D 02 F6 | 	mov	local04, local03
31720     02 2C 66 F0 | 	shl	local04, #2
31724     14 4E 05 F1 | 	add	fp, #20
31728     A7 2C 02 F1 | 	add	local04, fp
3172c     34 26 06 F1 | 	add	local01, #52
31730     13 13 02 F6 | 	mov	arg01, local01
31734     34 26 86 F1 | 	sub	local01, #52
31738     BE 13 06 F1 | 	add	arg01, #446
3173c     15 15 02 F6 | 	mov	arg02, local03
31740     04 14 66 F0 | 	shl	arg02, #4
31744     0A 13 02 F1 | 	add	arg01, arg02
31748     08 12 06 F1 | 	add	arg01, #8
3174c                 | ' {
3174c                 | ' 
3174c                 | ' 	return *((DWORD*)ptr);
3174c     09 FB 01 FB | 	rdlong	result1, arg01
31750     14 4E 85 F1 | 	sub	fp, #20
31754     16 FB 61 FC | 	wrlong	result1, local04
31758     01 2A 06 F1 | 	add	local03, #1
3175c     B4 FF 9F FD | 	jmp	#LR__4831
31760                 | LR__4832
31760                 | LR__4833
31760     00 28 0E F2 | 	cmp	local02, #0 wz
31764     14 2D 02 56 |  if_ne	mov	local04, local02
31768     01 2C 86 51 |  if_ne	sub	local04, #1
3176c     00 2C 06 A6 |  if_e	mov	local04, #0
31770     16 2B 02 F6 | 	mov	local03, local04
31774                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
31774                 | ' 	}
31774                 | ' 	i = part ? part - 1 : 0;
31774                 | ' 	do {
31774                 | LR__4834
31774     15 2D 02 F6 | 	mov	local04, local03
31778     02 2C 66 F0 | 	shl	local04, #2
3177c     14 4E 05 F1 | 	add	fp, #20
31780     A7 2C 02 F1 | 	add	local04, fp
31784     16 2D 0A FB | 	rdlong	local04, local04 wz
31788     14 4E 85 F1 | 	sub	fp, #20
3178c     28 00 90 AD |  if_e	jmp	#LR__4835
31790     15 2D 02 F6 | 	mov	local04, local03
31794     02 2C 66 F0 | 	shl	local04, #2
31798     14 4E 05 F1 | 	add	fp, #20
3179c     A7 2C 02 F1 | 	add	local04, fp
317a0     16 15 02 FB | 	rdlong	arg02, local04
317a4     13 13 02 F6 | 	mov	arg01, local01
317a8     14 4E 85 F1 | 	sub	fp, #20
317ac     50 FD BF FD | 	call	#_fatfs_cc_check_fs
317b0     FD 2C 02 F6 | 	mov	local04, result1
317b4     04 00 90 FD | 	jmp	#LR__4836
317b8                 | LR__4835
317b8     03 2C 06 F6 | 	mov	local04, #3
317bc                 | LR__4836
317bc     16 2F 02 F6 | 	mov	local05, local04
317c0     00 28 0E F2 | 	cmp	local02, #0 wz
317c4     02 2E 16 A2 |  if_e	cmp	local05, #2 wc
317c8     0C 00 90 8D |  if_c_and_z	jmp	#LR__4837
317cc     01 2A 06 A1 |  if_e	add	local03, #1
317d0     04 2A 16 A2 |  if_e	cmp	local03, #4 wc
317d4     9C FF 9F 8D |  if_c_and_z	jmp	#LR__4834
317d8                 | LR__4837
317d8                 | ' 	return fmt;
317d8     17 FB 01 F6 | 	mov	result1, local05
317dc                 | LR__4838
317dc     A7 F0 03 F6 | 	mov	ptra, fp
317e0     B2 00 A0 FD | 	call	#popregs_
317e4                 | _fatfs_cc_find_volume_ret
317e4     2D 00 64 FD | 	ret
317e8                 | 
317e8                 | _fatfs_cc_mount_volume
317e8     0B 4A 05 F6 | 	mov	COUNT_, #11
317ec     A8 00 A0 FD | 	call	#pushregs_
317f0     0A 27 02 F6 | 	mov	local01, arg02
317f4     0B 29 02 F6 | 	mov	local02, arg03
317f8     13 01 68 FC | 	wrlong	#0, local01
317fc     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
31800     FD 2A 02 F6 | 	mov	local03, result1
31804     00 2A 56 F2 | 	cmps	local03, #0 wc
31808     0B FA 05 C6 |  if_b	mov	result1, #11
3180c     3C 05 90 CD |  if_b	jmp	#LR__4850
31810     15 17 02 F6 | 	mov	arg03, local03
31814     02 16 66 F0 | 	shl	arg03, #2
31818     F2 16 02 F1 | 	add	arg03, objptr
3181c     0B 2D 0A FB | 	rdlong	local04, arg03 wz
31820     0C FA 05 A6 |  if_e	mov	result1, #12
31824     24 05 90 AD |  if_e	jmp	#LR__4850
31828     13 2D 62 FC | 	wrlong	local04, local01
3182c     14 29 E2 F8 | 	getbyte	local02, local02, #0
31830     FE 28 06 F5 | 	and	local02, #254
31834     16 17 CA FA | 	rdbyte	arg03, local04 wz
31838     4C 00 90 AD |  if_e	jmp	#LR__4841
3183c     01 2C 06 F1 | 	add	local04, #1
31840     16 13 CA FA | 	rdbyte	arg01, local04 wz
31844     01 2C 86 F1 | 	sub	local04, #1
31848     01 FA 05 56 |  if_ne	mov	result1, #1
3184c                 | ' 
3184c                 | ' 	return Stat;
3184c     01 00 00 AF 
31850     20 E4 05 A1 |  if_e	add	objptr, ##544
31854     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
31858     01 00 00 AF 
3185c     20 E4 85 A1 |  if_e	sub	objptr, ##544
31860     FD 16 E2 F8 | 	getbyte	arg03, result1, #0
31864     01 16 CE F7 | 	test	arg03, #1 wz
31868     1C 00 90 5D |  if_ne	jmp	#LR__4840
3186c     00 28 0E F2 | 	cmp	local02, #0 wz
31870     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
31874     04 FA CD 57 |  if_ne	test	result1, #4 wz
31878                 | ' 				return FR_WRITE_PROTECTED;
31878     0A FA 05 56 |  if_ne	mov	result1, #10
3187c     CC 04 90 5D |  if_ne	jmp	#LR__4850
31880                 | ' 			}
31880                 | ' 			return FR_OK;
31880     00 FA 05 F6 | 	mov	result1, #0
31884     C4 04 90 FD | 	jmp	#LR__4850
31888                 | LR__4840
31888                 | LR__4841
31888     16 01 48 FC | 	wrbyte	#0, local04
3188c     01 2C 06 F1 | 	add	local04, #1
31890     16 2B 42 FC | 	wrbyte	local03, local04
31894     16 13 C2 FA | 	rdbyte	arg01, local04
31898     01 2C 86 F1 | 	sub	local04, #1
3189c     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
318a0     FD 16 02 F6 | 	mov	arg03, result1
318a4     0B 2F E2 F8 | 	getbyte	local05, arg03, #0
318a8     01 2E CE F7 | 	test	local05, #1 wz
318ac                 | ' 		return FR_NOT_READY;
318ac     03 FA 05 56 |  if_ne	mov	result1, #3
318b0     98 04 90 5D |  if_ne	jmp	#LR__4850
318b4     00 28 0E F2 | 	cmp	local02, #0 wz
318b8     0B 2F 02 56 |  if_ne	mov	local05, arg03
318bc     17 2F E2 58 |  if_ne	getbyte	local05, local05, #0
318c0     04 2E CE 57 |  if_ne	test	local05, #4 wz
318c4                 | ' 		return FR_WRITE_PROTECTED;
318c4     0A FA 05 56 |  if_ne	mov	result1, #10
318c8     80 04 90 5D |  if_ne	jmp	#LR__4850
318cc     16 13 02 F6 | 	mov	arg01, local04
318d0     00 14 06 F6 | 	mov	arg02, #0
318d4     00 FE BF FD | 	call	#_fatfs_cc_find_volume
318d8     FD 12 02 F6 | 	mov	arg01, result1
318dc     04 12 0E F2 | 	cmp	arg01, #4 wz
318e0     01 FA 05 A6 |  if_e	mov	result1, #1
318e4     64 04 90 AD |  if_e	jmp	#LR__4850
318e8     02 12 16 F2 | 	cmp	arg01, #2 wc
318ec     0D FA 05 36 |  if_ae	mov	result1, #13
318f0     58 04 90 3D |  if_ae	jmp	#LR__4850
318f4     30 2C 06 F1 | 	add	local04, #48
318f8     16 31 02 FB | 	rdlong	local06, local04
318fc     04 2C 06 F1 | 	add	local04, #4
31900     16 13 02 F6 | 	mov	arg01, local04
31904     34 2C 86 F1 | 	sub	local04, #52
31908     0B 12 06 F1 | 	add	arg01, #11
3190c                 | ' {
3190c                 | ' 
3190c                 | ' 	return *((WORD*)ptr);
3190c     09 FB E1 FA | 	rdword	result1, arg01
31910     01 00 00 FF 
31914     00 FA 0D F2 | 	cmp	result1, ##512 wz
31918     0D FA 05 56 |  if_ne	mov	result1, #13
3191c     2C 04 90 5D |  if_ne	jmp	#LR__4850
31920     34 2C 06 F1 | 	add	local04, #52
31924     16 13 02 F6 | 	mov	arg01, local04
31928     34 2C 86 F1 | 	sub	local04, #52
3192c     16 12 06 F1 | 	add	arg01, #22
31930                 | ' {
31930                 | ' 
31930                 | ' 	return *((WORD*)ptr);
31930     09 FB E1 FA | 	rdword	result1, arg01
31934     FD 32 0A F6 | 	mov	local07, result1 wz
31938     18 00 90 5D |  if_ne	jmp	#LR__4842
3193c     34 2C 06 F1 | 	add	local04, #52
31940     16 13 02 F6 | 	mov	arg01, local04
31944     34 2C 86 F1 | 	sub	local04, #52
31948     24 12 06 F1 | 	add	arg01, #36
3194c                 | ' {
3194c                 | ' 
3194c                 | ' 	return *((DWORD*)ptr);
3194c     09 FB 01 FB | 	rdlong	result1, arg01
31950     FD 32 02 F6 | 	mov	local07, result1
31954                 | LR__4842
31954     1C 2C 06 F1 | 	add	local04, #28
31958     16 33 62 FC | 	wrlong	local07, local04
3195c     28 2C 06 F1 | 	add	local04, #40
31960     16 2F C2 FA | 	rdbyte	local05, local04
31964     42 2C 86 F1 | 	sub	local04, #66
31968     16 2F 42 FC | 	wrbyte	local05, local04
3196c     16 2F C2 FA | 	rdbyte	local05, local04
31970     02 2C 86 F1 | 	sub	local04, #2
31974     01 2E 0E F2 | 	cmp	local05, #1 wz
31978     02 2C 06 51 |  if_ne	add	local04, #2
3197c     16 2F C2 5A |  if_ne	rdbyte	local05, local04
31980     02 2C 86 51 |  if_ne	sub	local04, #2
31984     02 2E 0E 52 |  if_ne	cmp	local05, #2 wz
31988     0D FA 05 56 |  if_ne	mov	result1, #13
3198c     BC 03 90 5D |  if_ne	jmp	#LR__4850
31990     02 2C 06 F1 | 	add	local04, #2
31994     16 2F C2 FA | 	rdbyte	local05, local04
31998     17 33 02 FD | 	qmul	local07, local05
3199c     3F 2C 06 F1 | 	add	local04, #63
319a0     16 2F C2 FA | 	rdbyte	local05, local04
319a4     37 2C 86 F1 | 	sub	local04, #55
319a8     16 2F 52 FC | 	wrword	local05, local04
319ac     16 2F EA FA | 	rdword	local05, local04 wz
319b0     0A 2C 86 F1 | 	sub	local04, #10
319b4     18 32 62 FD | 	getqx	local07
319b8     20 00 90 AD |  if_e	jmp	#LR__4843
319bc     0A 2C 06 F1 | 	add	local04, #10
319c0     16 2F E2 FA | 	rdword	local05, local04
319c4     17 2B 32 F9 | 	getword	local03, local05, #0
319c8     0A 2C 86 F1 | 	sub	local04, #10
319cc     17 2F 32 F9 | 	getword	local05, local05, #0
319d0     01 2E 86 F1 | 	sub	local05, #1
319d4     17 2B CA F7 | 	test	local03, local05 wz
319d8     08 00 90 AD |  if_e	jmp	#LR__4844
319dc                 | LR__4843
319dc     0D FA 05 F6 | 	mov	result1, #13
319e0     68 03 90 FD | 	jmp	#LR__4850
319e4                 | LR__4844
319e4     34 2C 06 F1 | 	add	local04, #52
319e8     16 13 02 F6 | 	mov	arg01, local04
319ec     11 12 06 F1 | 	add	arg01, #17
319f0                 | ' {
319f0                 | ' 
319f0                 | ' 	return *((WORD*)ptr);
319f0     09 FB E1 FA | 	rdword	result1, arg01
319f4     2C 2C 86 F1 | 	sub	local04, #44
319f8     16 FB 51 FC | 	wrword	result1, local04
319fc     16 2F E2 FA | 	rdword	local05, local04
31a00     08 2C 86 F1 | 	sub	local04, #8
31a04     17 13 52 F6 | 	abs	arg01, local05 wc
31a08     09 13 42 F8 | 	getnib	arg01, arg01, #0
31a0c     09 13 8A F6 | 	negc	arg01, arg01 wz
31a10     0D FA 05 56 |  if_ne	mov	result1, #13
31a14     34 03 90 5D |  if_ne	jmp	#LR__4850
31a18     34 2C 06 F1 | 	add	local04, #52
31a1c     16 13 02 F6 | 	mov	arg01, local04
31a20     34 2C 86 F1 | 	sub	local04, #52
31a24     13 12 06 F1 | 	add	arg01, #19
31a28                 | ' {
31a28                 | ' 
31a28                 | ' 	return *((WORD*)ptr);
31a28     09 FB E1 FA | 	rdword	result1, arg01
31a2c     FD 34 0A F6 | 	mov	local08, result1 wz
31a30     34 2C 06 A1 |  if_e	add	local04, #52
31a34     16 13 02 A6 |  if_e	mov	arg01, local04
31a38     34 2C 86 A1 |  if_e	sub	local04, #52
31a3c     20 12 06 A1 |  if_e	add	arg01, #32
31a40                 | ' {
31a40                 | ' 
31a40                 | ' 	return *((DWORD*)ptr);
31a40     09 35 02 AB |  if_e	rdlong	local08, arg01
31a44     34 2C 06 F1 | 	add	local04, #52
31a48     16 13 02 F6 | 	mov	arg01, local04
31a4c     34 2C 86 F1 | 	sub	local04, #52
31a50     0E 12 06 F1 | 	add	arg01, #14
31a54                 | ' {
31a54                 | ' 
31a54                 | ' 	return *((WORD*)ptr);
31a54     09 FB E1 FA | 	rdword	result1, arg01
31a58     FD 12 02 F6 | 	mov	arg01, result1
31a5c     09 2F 02 F6 | 	mov	local05, arg01
31a60     0F 2E 4E F7 | 	zerox	local05, #15 wz
31a64     0D FA 05 A6 |  if_e	mov	result1, #13
31a68     E0 02 90 AD |  if_e	jmp	#LR__4850
31a6c     09 37 32 F9 | 	getword	local09, arg01, #0
31a70     19 37 02 F1 | 	add	local09, local07
31a74     08 2C 06 F1 | 	add	local04, #8
31a78     16 2F E2 FA | 	rdword	local05, local04
31a7c     08 2C 86 F1 | 	sub	local04, #8
31a80     17 2F 52 F6 | 	abs	local05, local05 wc
31a84     04 2E 46 F0 | 	shr	local05, #4
31a88     17 37 82 F3 | 	sumc	local09, local05
31a8c     1B 35 12 F2 | 	cmp	local08, local09 wc
31a90     0D FA 05 C6 |  if_b	mov	result1, #13
31a94     B4 02 90 CD |  if_b	jmp	#LR__4850
31a98     1B 35 82 F1 | 	sub	local08, local09
31a9c     0A 2C 06 F1 | 	add	local04, #10
31aa0     16 2F E2 FA | 	rdword	local05, local04
31aa4     17 35 12 FD | 	qdiv	local08, local05
31aa8     0A 2C 86 F1 | 	sub	local04, #10
31aac     18 2E 62 FD | 	getqx	local05
31ab0     00 2E 0E F2 | 	cmp	local05, #0 wz
31ab4     0D FA 05 A6 |  if_e	mov	result1, #13
31ab8     90 02 90 AD |  if_e	jmp	#LR__4850
31abc     00 38 06 F6 | 	mov	local10, #0
31ac0     FF FF 07 FF 
31ac4     F6 2F 16 F2 | 	cmp	local05, ##268435446 wc
31ac8     03 38 06 C6 |  if_b	mov	local10, #3
31acc     7F 00 00 FF 
31ad0     F6 2F 16 F2 | 	cmp	local05, ##65526 wc
31ad4     02 38 06 C6 |  if_b	mov	local10, #2
31ad8     07 00 00 FF 
31adc     F6 2F 16 F2 | 	cmp	local05, ##4086 wc
31ae0     01 38 06 C6 |  if_b	mov	local10, #1
31ae4     00 38 0E F2 | 	cmp	local10, #0 wz
31ae8     0D FA 05 A6 |  if_e	mov	result1, #13
31aec     5C 02 90 AD |  if_e	jmp	#LR__4850
31af0     02 2E 06 F1 | 	add	local05, #2
31af4     18 2C 06 F1 | 	add	local04, #24
31af8     16 2F 62 FC | 	wrlong	local05, local04
31afc     08 2C 06 F1 | 	add	local04, #8
31b00     16 31 62 FC | 	wrlong	local06, local04
31b04     18 2F 02 F6 | 	mov	local05, local06
31b08     09 13 32 F9 | 	getword	arg01, arg01, #0
31b0c     09 2F 02 F1 | 	add	local05, arg01
31b10     04 2C 06 F1 | 	add	local04, #4
31b14     16 2F 62 FC | 	wrlong	local05, local04
31b18     18 2F 02 F6 | 	mov	local05, local06
31b1c     1B 2F 02 F1 | 	add	local05, local09
31b20     08 2C 06 F1 | 	add	local04, #8
31b24     16 2F 62 FC | 	wrlong	local05, local04
31b28     2C 2C 86 F1 | 	sub	local04, #44
31b2c     03 38 0E F2 | 	cmp	local10, #3 wz
31b30     5C 00 90 5D |  if_ne	jmp	#LR__4845
31b34     34 2C 06 F1 | 	add	local04, #52
31b38     16 13 02 F6 | 	mov	arg01, local04
31b3c     34 2C 86 F1 | 	sub	local04, #52
31b40     2A 12 06 F1 | 	add	arg01, #42
31b44                 | ' {
31b44                 | ' 
31b44                 | ' 	return *((WORD*)ptr);
31b44     09 FB E9 FA | 	rdword	result1, arg01 wz
31b48     0D FA 05 56 |  if_ne	mov	result1, #13
31b4c     FC 01 90 5D |  if_ne	jmp	#LR__4850
31b50     08 2C 06 F1 | 	add	local04, #8
31b54     16 2F EA FA | 	rdword	local05, local04 wz
31b58     08 2C 86 F1 | 	sub	local04, #8
31b5c     0D FA 05 56 |  if_ne	mov	result1, #13
31b60     E8 01 90 5D |  if_ne	jmp	#LR__4850
31b64     34 2C 06 F1 | 	add	local04, #52
31b68     16 13 02 F6 | 	mov	arg01, local04
31b6c     2C 12 06 F1 | 	add	arg01, #44
31b70                 | ' {
31b70                 | ' 
31b70                 | ' 	return *((DWORD*)ptr);
31b70     09 FB 01 FB | 	rdlong	result1, arg01
31b74     0C 2C 86 F1 | 	sub	local04, #12
31b78     16 FB 61 FC | 	wrlong	result1, local04
31b7c     10 2C 86 F1 | 	sub	local04, #16
31b80     16 3B 02 FB | 	rdlong	local11, local04
31b84     18 2C 86 F1 | 	sub	local04, #24
31b88     02 3A 66 F0 | 	shl	local11, #2
31b8c     6C 00 90 FD | 	jmp	#LR__4847
31b90                 | LR__4845
31b90     08 2C 06 F1 | 	add	local04, #8
31b94     16 2F EA FA | 	rdword	local05, local04 wz
31b98     08 2C 86 F1 | 	sub	local04, #8
31b9c     0D FA 05 A6 |  if_e	mov	result1, #13
31ba0     A8 01 90 AD |  if_e	jmp	#LR__4850
31ba4     24 2C 06 F1 | 	add	local04, #36
31ba8     16 2F 02 FB | 	rdlong	local05, local04
31bac     19 2F 02 F1 | 	add	local05, local07
31bb0     04 2C 06 F1 | 	add	local04, #4
31bb4     16 2F 62 FC | 	wrlong	local05, local04
31bb8     28 2C 86 F1 | 	sub	local04, #40
31bbc     02 38 0E F2 | 	cmp	local10, #2 wz
31bc0     18 2C 06 A1 |  if_e	add	local04, #24
31bc4     16 2F 02 AB |  if_e	rdlong	local05, local04
31bc8     18 2C 86 A1 |  if_e	sub	local04, #24
31bcc     01 2E 66 A0 |  if_e	shl	local05, #1
31bd0     24 00 90 AD |  if_e	jmp	#LR__4846
31bd4     18 2C 06 F1 | 	add	local04, #24
31bd8     16 3B 02 FB | 	rdlong	local11, local04
31bdc     1D 2F 02 F6 | 	mov	local05, local11
31be0     01 2E 66 F0 | 	shl	local05, #1
31be4     1D 2F 02 F1 | 	add	local05, local11
31be8     01 2E 46 F0 | 	shr	local05, #1
31bec     18 2C 86 F1 | 	sub	local04, #24
31bf0     01 3A 06 F5 | 	and	local11, #1
31bf4     1D 2F 02 F1 | 	add	local05, local11
31bf8                 | LR__4846
31bf8     17 3B 02 F6 | 	mov	local11, local05
31bfc                 | LR__4847
31bfc     FF 3B 06 F1 | 	add	local11, #511
31c00     09 3A 46 F0 | 	shr	local11, #9
31c04     1C 2C 06 F1 | 	add	local04, #28
31c08     16 17 02 FB | 	rdlong	arg03, local04
31c0c     1C 2C 86 F1 | 	sub	local04, #28
31c10     1D 17 12 F2 | 	cmp	arg03, local11 wc
31c14     0D FA 05 C6 |  if_b	mov	result1, #13
31c18     30 01 90 CD |  if_b	jmp	#LR__4850
31c1c     14 2C 06 F1 | 	add	local04, #20
31c20     FF FF FF FF 
31c24     16 FF 6B FC | 	wrlong	##-1, local04
31c28     04 2C 86 F1 | 	sub	local04, #4
31c2c     FF FF FF FF 
31c30     16 FF 6B FC | 	wrlong	##-1, local04
31c34     0C 2C 86 F1 | 	sub	local04, #12
31c38     16 01 49 FC | 	wrbyte	#128, local04
31c3c     04 2C 86 F1 | 	sub	local04, #4
31c40     03 38 0E F2 | 	cmp	local10, #3 wz
31c44     D0 00 90 5D |  if_ne	jmp	#LR__4849
31c48     34 2C 06 F1 | 	add	local04, #52
31c4c     16 13 02 F6 | 	mov	arg01, local04
31c50     34 2C 86 F1 | 	sub	local04, #52
31c54     30 12 06 F1 | 	add	arg01, #48
31c58                 | ' {
31c58                 | ' 
31c58                 | ' 	return *((WORD*)ptr);
31c58     09 FB E1 FA | 	rdword	result1, arg01
31c5c     FD 2E 32 F9 | 	getword	local05, result1, #0
31c60     01 2E 0E F2 | 	cmp	local05, #1 wz
31c64     B0 00 90 5D |  if_ne	jmp	#LR__4849
31c68     01 30 06 F1 | 	add	local06, #1
31c6c     16 13 02 F6 | 	mov	arg01, local04
31c70     18 15 02 F6 | 	mov	arg02, local06
31c74     CC CD BF FD | 	call	#_fatfs_cc_move_window
31c78     00 FA 0D F2 | 	cmp	result1, #0 wz
31c7c     98 00 90 5D |  if_ne	jmp	#LR__4849
31c80     04 2C 06 F1 | 	add	local04, #4
31c84     16 01 48 FC | 	wrbyte	#0, local04
31c88     30 2C 06 F1 | 	add	local04, #48
31c8c     16 13 02 F6 | 	mov	arg01, local04
31c90     34 2C 86 F1 | 	sub	local04, #52
31c94     FE 13 06 F1 | 	add	arg01, #510
31c98                 | ' {
31c98                 | ' 
31c98                 | ' 	return *((WORD*)ptr);
31c98     09 FB E1 FA | 	rdword	result1, arg01
31c9c     FD 2E 32 F9 | 	getword	local05, result1, #0
31ca0     55 00 00 FF 
31ca4     55 2E 0E F2 | 	cmp	local05, ##43605 wz
31ca8     34 2C 06 A1 |  if_e	add	local04, #52
31cac     16 13 02 A6 |  if_e	mov	arg01, local04
31cb0     34 2C 86 A1 |  if_e	sub	local04, #52
31cb4                 | ' {
31cb4                 | ' 
31cb4                 | ' 	return *((DWORD*)ptr);
31cb4     09 FB 01 AB |  if_e	rdlong	result1, arg01
31cb8     A9 B0 20 AF 
31cbc     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
31cc0     54 00 90 5D |  if_ne	jmp	#LR__4848
31cc4     34 2C 06 F1 | 	add	local04, #52
31cc8     16 13 02 F6 | 	mov	arg01, local04
31ccc     34 2C 86 F1 | 	sub	local04, #52
31cd0     E4 13 06 F1 | 	add	arg01, #484
31cd4                 | ' {
31cd4                 | ' 
31cd4                 | ' 	return *((DWORD*)ptr);
31cd4     09 FB 01 FB | 	rdlong	result1, arg01
31cd8     B9 A0 30 FF 
31cdc     72 FA 0D F2 | 	cmp	result1, ##1631679090 wz
31ce0     34 00 90 5D |  if_ne	jmp	#LR__4848
31ce4     34 2C 06 F1 | 	add	local04, #52
31ce8     16 13 02 F6 | 	mov	arg01, local04
31cec     E8 13 06 F1 | 	add	arg01, #488
31cf0                 | ' {
31cf0                 | ' 
31cf0                 | ' 	return *((DWORD*)ptr);
31cf0     09 FB 01 FB | 	rdlong	result1, arg01
31cf4     20 2C 86 F1 | 	sub	local04, #32
31cf8     16 FB 61 FC | 	wrlong	result1, local04
31cfc     20 2C 06 F1 | 	add	local04, #32
31d00     16 13 02 F6 | 	mov	arg01, local04
31d04     EC 13 06 F1 | 	add	arg01, #492
31d08                 | ' {
31d08                 | ' 
31d08                 | ' 	return *((DWORD*)ptr);
31d08     09 FB 01 FB | 	rdlong	result1, arg01
31d0c     24 2C 86 F1 | 	sub	local04, #36
31d10     16 FB 61 FC | 	wrlong	result1, local04
31d14     10 2C 86 F1 | 	sub	local04, #16
31d18                 | LR__4848
31d18                 | LR__4849
31d18     16 39 42 FC | 	wrbyte	local10, local04
31d1c     04 E4 05 F1 | 	add	objptr, #4
31d20     F2 2E E2 FA | 	rdword	local05, objptr
31d24     01 2E 06 F1 | 	add	local05, #1
31d28     F2 2E 52 FC | 	wrword	local05, objptr
31d2c     F2 3A E2 FA | 	rdword	local11, objptr
31d30     06 2C 06 F1 | 	add	local04, #6
31d34     16 3B 52 FC | 	wrword	local11, local04
31d38     04 E4 05 F1 | 	add	objptr, #4
31d3c     06 2C 06 F1 | 	add	local04, #6
31d40     16 E5 61 FC | 	wrlong	objptr, local04
31d44                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
31d44                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
31d44                 | ' 			{
31d44                 | ' 
31d44                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
31d44                 | ' 
31d44                 | ' 
31d44                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
31d44                 | ' 
31d44                 | ' 			}
31d44                 | ' 		}
31d44                 | ' 
31d44                 | ' 
31d44                 | ' 	}
31d44                 | ' 
31d44                 | ' 	fs->fs_type = (BYTE)fmt;
31d44                 | ' 	fs->id = ++Fsid;
31d44                 | ' 
31d44                 | ' 	fs->lfnbuf = LfnBuf;
31d44                 | ' #line 3567 "ff.c"
31d44                 | ' 	return FR_OK;
31d44     00 FA 05 F6 | 	mov	result1, #0
31d48     08 E4 85 F1 | 	sub	objptr, #8
31d4c                 | LR__4850
31d4c     A7 F0 03 F6 | 	mov	ptra, fp
31d50     B2 00 A0 FD | 	call	#popregs_
31d54                 | _fatfs_cc_mount_volume_ret
31d54     2D 00 64 FD | 	ret
31d58                 | 
31d58                 | _fatfs_cc_validate
31d58     09 01 0A F6 | 	mov	_var01, arg01 wz
31d5c     09 02 06 F6 | 	mov	_var02, #9
31d60     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
31d64     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
31d68     50 00 90 AD |  if_e	jmp	#LR__4860
31d6c     04 00 06 F1 | 	add	_var01, #4
31d70     00 07 E2 FA | 	rdword	_var04, _var01
31d74     04 00 86 F1 | 	sub	_var01, #4
31d78     00 13 02 FB | 	rdlong	arg01, _var01
31d7c     06 12 06 F1 | 	add	arg01, #6
31d80     09 FB E1 FA | 	rdword	result1, arg01
31d84     FD 06 0A F2 | 	cmp	_var04, result1 wz
31d88     30 00 90 5D |  if_ne	jmp	#LR__4860
31d8c     00 07 02 FB | 	rdlong	_var04, _var01
31d90     01 06 06 F1 | 	add	_var04, #1
31d94     03 13 CA FA | 	rdbyte	arg01, _var04 wz
31d98     01 FA 05 56 |  if_ne	mov	result1, #1
31d9c                 | ' 
31d9c                 | ' 	return Stat;
31d9c     01 00 00 AF 
31da0     20 E4 05 A1 |  if_e	add	objptr, ##544
31da4     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
31da8     01 00 00 AF 
31dac     20 E4 85 A1 |  if_e	sub	objptr, ##544
31db0     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
31db4     01 04 CE F7 | 	test	_var03, #1 wz
31db8     00 02 06 A6 |  if_e	mov	_var02, #0
31dbc                 | LR__4860
31dbc     00 02 0E F2 | 	cmp	_var02, #0 wz
31dc0     00 05 02 AB |  if_e	rdlong	_var03, _var01
31dc4     00 04 06 56 |  if_ne	mov	_var03, #0
31dc8     0A 05 62 FC | 	wrlong	_var03, arg02
31dcc                 | ' 			res = FR_OK;
31dcc                 | ' 		}
31dcc                 | ' 
31dcc                 | ' 	}
31dcc                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
31dcc                 | ' 	return res;
31dcc     01 FB 01 F6 | 	mov	result1, _var02
31dd0                 | _fatfs_cc_validate_ret
31dd0     2D 00 64 FD | 	ret
31dd4                 | 
31dd4                 | _fatfs_cc_f_mount
31dd4     01 4A 05 F6 | 	mov	COUNT_, #1
31dd8     A8 00 A0 FD | 	call	#pushregs_
31ddc     20 F0 07 F1 | 	add	ptra, #32
31de0     04 4E 05 F1 | 	add	fp, #4
31de4     A7 12 62 FC | 	wrlong	arg01, fp
31de8     04 4E 05 F1 | 	add	fp, #4
31dec     A7 14 62 FC | 	wrlong	arg02, fp
31df0     04 4E 05 F1 | 	add	fp, #4
31df4     A7 16 42 FC | 	wrbyte	arg03, fp
31df8     04 4E 85 F1 | 	sub	fp, #4
31dfc     A7 16 02 FB | 	rdlong	arg03, fp
31e00     14 4E 05 F1 | 	add	fp, #20
31e04     A7 16 62 FC | 	wrlong	arg03, fp
31e08     A7 12 02 F6 | 	mov	arg01, fp
31e0c     1C 4E 85 F1 | 	sub	fp, #28
31e10     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
31e14     14 4E 05 F1 | 	add	fp, #20
31e18     A7 FA 61 FC | 	wrlong	result1, fp
31e1c     14 4E 85 F1 | 	sub	fp, #20
31e20     00 FA 55 F2 | 	cmps	result1, #0 wc
31e24     0B FA 05 C6 |  if_b	mov	result1, #11
31e28     C0 00 90 CD |  if_b	jmp	#LR__4871
31e2c     14 4E 05 F1 | 	add	fp, #20
31e30     A7 16 02 FB | 	rdlong	arg03, fp
31e34     02 16 66 F0 | 	shl	arg03, #2
31e38     F2 16 02 F1 | 	add	arg03, objptr
31e3c     0B 17 0A FB | 	rdlong	arg03, arg03 wz
31e40     04 4E 85 F1 | 	sub	fp, #4
31e44     A7 16 62 FC | 	wrlong	arg03, fp
31e48     10 4E 85 F1 | 	sub	fp, #16
31e4c     28 00 90 AD |  if_e	jmp	#LR__4870
31e50     10 4E 05 F1 | 	add	fp, #16
31e54     A7 16 02 FB | 	rdlong	arg03, fp
31e58     10 4E 85 F1 | 	sub	fp, #16
31e5c     01 16 06 F1 | 	add	arg03, #1
31e60     0B 13 C2 FA | 	rdbyte	arg01, arg03
31e64     30 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
31e68     10 4E 05 F1 | 	add	fp, #16
31e6c     A7 16 02 FB | 	rdlong	arg03, fp
31e70     10 4E 85 F1 | 	sub	fp, #16
31e74     0B 01 48 FC | 	wrbyte	#0, arg03
31e78                 | LR__4870
31e78     04 4E 05 F1 | 	add	fp, #4
31e7c     A7 26 0A FB | 	rdlong	local01, fp wz
31e80     04 4E 85 F1 | 	sub	fp, #4
31e84     04 4E 05 51 |  if_ne	add	fp, #4
31e88     A7 26 02 5B |  if_ne	rdlong	local01, fp
31e8c     04 4E 85 51 |  if_ne	sub	fp, #4
31e90     13 01 48 5C |  if_ne	wrbyte	#0, local01
31e94     14 4E 05 F1 | 	add	fp, #20
31e98     A7 26 02 FB | 	rdlong	local01, fp
31e9c     02 26 66 F0 | 	shl	local01, #2
31ea0     F2 26 02 F1 | 	add	local01, objptr
31ea4     10 4E 85 F1 | 	sub	fp, #16
31ea8     A7 16 02 FB | 	rdlong	arg03, fp
31eac     13 17 62 FC | 	wrlong	arg03, local01
31eb0     08 4E 05 F1 | 	add	fp, #8
31eb4     A7 26 CA FA | 	rdbyte	local01, fp wz
31eb8     0C 4E 85 F1 | 	sub	fp, #12
31ebc     00 FA 05 A6 |  if_e	mov	result1, #0
31ec0     28 00 90 AD |  if_e	jmp	#LR__4871
31ec4     08 4E 05 F1 | 	add	fp, #8
31ec8     A7 12 02 F6 | 	mov	arg01, fp
31ecc     04 4E 85 F1 | 	sub	fp, #4
31ed0     A7 14 02 F6 | 	mov	arg02, fp
31ed4     04 4E 85 F1 | 	sub	fp, #4
31ed8     00 16 06 F6 | 	mov	arg03, #0
31edc     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
31ee0     18 4E 05 F1 | 	add	fp, #24
31ee4     A7 FA 61 FC | 	wrlong	result1, fp
31ee8                 | ' 
31ee8                 | ' 	res = mount_volume(&path, &fs, 0);
31ee8                 | ' 	return res ;
31ee8     18 4E 85 F1 | 	sub	fp, #24
31eec                 | LR__4871
31eec     A7 F0 03 F6 | 	mov	ptra, fp
31ef0     B2 00 A0 FD | 	call	#popregs_
31ef4                 | _fatfs_cc_f_mount_ret
31ef4     2D 00 64 FD | 	ret
31ef8                 | 
31ef8                 | _fatfs_cc_f_open
31ef8     02 4A 05 F6 | 	mov	COUNT_, #2
31efc     A8 00 A0 FD | 	call	#pushregs_
31f00     60 F0 07 F1 | 	add	ptra, #96
31f04     04 4E 05 F1 | 	add	fp, #4
31f08     A7 12 62 FC | 	wrlong	arg01, fp
31f0c     04 4E 05 F1 | 	add	fp, #4
31f10     A7 14 62 FC | 	wrlong	arg02, fp
31f14     04 4E 05 F1 | 	add	fp, #4
31f18     A7 16 42 FC | 	wrbyte	arg03, fp
31f1c     08 4E 85 F1 | 	sub	fp, #8
31f20     A7 18 0A FB | 	rdlong	arg04, fp wz
31f24     04 4E 85 F1 | 	sub	fp, #4
31f28     09 FA 05 A6 |  if_e	mov	result1, #9
31f2c     98 06 90 AD |  if_e	jmp	#LR__4897
31f30     0C 4E 05 F1 | 	add	fp, #12
31f34     A7 18 C2 FA | 	rdbyte	arg04, fp
31f38     3F 18 06 F5 | 	and	arg04, #63
31f3c     A7 18 42 FC | 	wrbyte	arg04, fp
31f40     04 4E 85 F1 | 	sub	fp, #4
31f44     A7 12 02 F6 | 	mov	arg01, fp
31f48     3C 4E 05 F1 | 	add	fp, #60
31f4c     A7 14 02 F6 | 	mov	arg02, fp
31f50     38 4E 85 F1 | 	sub	fp, #56
31f54     A7 16 C2 FA | 	rdbyte	arg03, fp
31f58     0C 4E 85 F1 | 	sub	fp, #12
31f5c     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
31f60     10 4E 05 F1 | 	add	fp, #16
31f64     A7 FA 61 FC | 	wrlong	result1, fp
31f68     10 4E 85 F1 | 	sub	fp, #16
31f6c     00 FA 0D F2 | 	cmp	result1, #0 wz
31f70     2C 06 90 5D |  if_ne	jmp	#LR__4896
31f74     44 4E 05 F1 | 	add	fp, #68
31f78     A7 18 02 FB | 	rdlong	arg04, fp
31f7c     30 4E 85 F1 | 	sub	fp, #48
31f80     A7 18 62 FC | 	wrlong	arg04, fp
31f84     A7 12 02 F6 | 	mov	arg01, fp
31f88     0C 4E 85 F1 | 	sub	fp, #12
31f8c     A7 26 02 FB | 	rdlong	local01, fp
31f90     08 4E 85 F1 | 	sub	fp, #8
31f94     13 15 02 F6 | 	mov	arg02, local01
31f98     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
31f9c     10 4E 05 F1 | 	add	fp, #16
31fa0     A7 FA 61 FC | 	wrlong	result1, fp
31fa4     10 4E 85 F1 | 	sub	fp, #16
31fa8     00 FA 0D F2 | 	cmp	result1, #0 wz
31fac     1C 00 90 5D |  if_ne	jmp	#LR__4880
31fb0     3F 4E 05 F1 | 	add	fp, #63
31fb4     A7 18 C2 FA | 	rdbyte	arg04, fp
31fb8     3F 4E 85 F1 | 	sub	fp, #63
31fbc     80 18 CE F7 | 	test	arg04, #128 wz
31fc0     10 4E 05 51 |  if_ne	add	fp, #16
31fc4     A7 0C 68 5C |  if_ne	wrlong	#6, fp
31fc8     10 4E 85 51 |  if_ne	sub	fp, #16
31fcc                 | LR__4880
31fcc     0C 4E 05 F1 | 	add	fp, #12
31fd0     A7 18 C2 FA | 	rdbyte	arg04, fp
31fd4     0C 4E 85 F1 | 	sub	fp, #12
31fd8     1C 18 CE F7 | 	test	arg04, #28 wz
31fdc     F0 01 90 AD |  if_e	jmp	#LR__4885
31fe0     10 4E 05 F1 | 	add	fp, #16
31fe4     A7 26 0A FB | 	rdlong	local01, fp wz
31fe8     10 4E 85 F1 | 	sub	fp, #16
31fec     48 00 90 AD |  if_e	jmp	#LR__4882
31ff0     10 4E 05 F1 | 	add	fp, #16
31ff4     A7 18 02 FB | 	rdlong	arg04, fp
31ff8     10 4E 85 F1 | 	sub	fp, #16
31ffc     04 18 0E F2 | 	cmp	arg04, #4 wz
32000     1C 00 90 5D |  if_ne	jmp	#LR__4881
32004     14 4E 05 F1 | 	add	fp, #20
32008     A7 12 02 F6 | 	mov	arg01, fp
3200c     14 4E 85 F1 | 	sub	fp, #20
32010     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
32014     10 4E 05 F1 | 	add	fp, #16
32018     A7 FA 61 FC | 	wrlong	result1, fp
3201c     10 4E 85 F1 | 	sub	fp, #16
32020                 | LR__4881
32020     0C 4E 05 F1 | 	add	fp, #12
32024     A7 26 C2 FA | 	rdbyte	local01, fp
32028     08 26 46 F5 | 	or	local01, #8
3202c     A7 26 42 FC | 	wrbyte	local01, fp
32030     0C 4E 85 F1 | 	sub	fp, #12
32034     3C 00 90 FD | 	jmp	#LR__4884
32038                 | LR__4882
32038     1A 4E 05 F1 | 	add	fp, #26
3203c     A7 26 C2 FA | 	rdbyte	local01, fp
32040     1A 4E 85 F1 | 	sub	fp, #26
32044     11 26 CE F7 | 	test	local01, #17 wz
32048     10 4E 05 51 |  if_ne	add	fp, #16
3204c     A7 0E 68 5C |  if_ne	wrlong	#7, fp
32050     10 4E 85 51 |  if_ne	sub	fp, #16
32054     1C 00 90 5D |  if_ne	jmp	#LR__4883
32058     0C 4E 05 F1 | 	add	fp, #12
3205c     A7 26 C2 FA | 	rdbyte	local01, fp
32060     0C 4E 85 F1 | 	sub	fp, #12
32064     04 26 CE F7 | 	test	local01, #4 wz
32068     10 4E 05 51 |  if_ne	add	fp, #16
3206c     A7 10 68 5C |  if_ne	wrlong	#8, fp
32070     10 4E 85 51 |  if_ne	sub	fp, #16
32074                 | LR__4883
32074                 | LR__4884
32074     10 4E 05 F1 | 	add	fp, #16
32078     A7 26 0A FB | 	rdlong	local01, fp wz
3207c     10 4E 85 F1 | 	sub	fp, #16
32080     A8 01 90 5D |  if_ne	jmp	#LR__4888
32084     0C 4E 05 F1 | 	add	fp, #12
32088     A7 26 C2 FA | 	rdbyte	local01, fp
3208c     0C 4E 85 F1 | 	sub	fp, #12
32090     08 26 CE F7 | 	test	local01, #8 wz
32094     94 01 90 AD |  if_e	jmp	#LR__4888
32098     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
3209c     54 4E 05 F1 | 	add	fp, #84
320a0     A7 FA 61 FC | 	wrlong	result1, fp
320a4     24 4E 85 F1 | 	sub	fp, #36
320a8     A7 12 02 FB | 	rdlong	arg01, fp
320ac     0E 12 06 F1 | 	add	arg01, #14
320b0     09 FB 61 FC | 	wrlong	result1, arg01
320b4     A7 12 02 FB | 	rdlong	arg01, fp
320b8     16 12 06 F1 | 	add	arg01, #22
320bc     24 4E 05 F1 | 	add	fp, #36
320c0     A7 14 02 FB | 	rdlong	arg02, fp
320c4     09 15 62 FC | 	wrlong	arg02, arg01
320c8     10 4E 85 F1 | 	sub	fp, #16
320cc     A7 12 02 FB | 	rdlong	arg01, fp
320d0     14 4E 85 F1 | 	sub	fp, #20
320d4     A7 14 02 FB | 	rdlong	arg02, fp
320d8     30 4E 85 F1 | 	sub	fp, #48
320dc     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
320e0     48 4E 05 F1 | 	add	fp, #72
320e4     A7 FA 61 FC | 	wrlong	result1, fp
320e8     18 4E 85 F1 | 	sub	fp, #24
320ec     A7 26 02 FB | 	rdlong	local01, fp
320f0     0B 26 06 F1 | 	add	local01, #11
320f4     13 41 48 FC | 	wrbyte	#32, local01
320f8     14 4E 05 F1 | 	add	fp, #20
320fc     A7 12 02 FB | 	rdlong	arg01, fp
32100     14 4E 85 F1 | 	sub	fp, #20
32104     A7 14 02 FB | 	rdlong	arg02, fp
32108     30 4E 85 F1 | 	sub	fp, #48
3210c     00 16 06 F6 | 	mov	arg03, #0
32110     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
32114     30 4E 05 F1 | 	add	fp, #48
32118     A7 12 02 FB | 	rdlong	arg01, fp
3211c     1C 12 06 F1 | 	add	arg01, #28
32120     09 01 68 FC | 	wrlong	#0, arg01
32124     14 4E 05 F1 | 	add	fp, #20
32128     A7 26 02 FB | 	rdlong	local01, fp
3212c     03 26 06 F1 | 	add	local01, #3
32130     13 03 48 FC | 	wrbyte	#1, local01
32134     04 4E 05 F1 | 	add	fp, #4
32138     A7 26 0A FB | 	rdlong	local01, fp wz
3213c     48 4E 85 F1 | 	sub	fp, #72
32140     E8 00 90 AD |  if_e	jmp	#LR__4888
32144     44 4E 05 F1 | 	add	fp, #68
32148     A7 26 02 FB | 	rdlong	local01, fp
3214c     30 26 06 F1 | 	add	local01, #48
32150     13 27 02 FB | 	rdlong	local01, local01
32154     14 4E 05 F1 | 	add	fp, #20
32158     A7 26 62 FC | 	wrlong	local01, fp
3215c     44 4E 85 F1 | 	sub	fp, #68
32160     A7 12 02 F6 | 	mov	arg01, fp
32164     34 4E 05 F1 | 	add	fp, #52
32168     A7 14 02 FB | 	rdlong	arg02, fp
3216c     48 4E 85 F1 | 	sub	fp, #72
32170     00 16 06 F6 | 	mov	arg03, #0
32174     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
32178     10 4E 05 F1 | 	add	fp, #16
3217c     A7 FA 61 FC | 	wrlong	result1, fp
32180     10 4E 85 F1 | 	sub	fp, #16
32184     00 FA 0D F2 | 	cmp	result1, #0 wz
32188     A0 00 90 5D |  if_ne	jmp	#LR__4888
3218c     44 4E 05 F1 | 	add	fp, #68
32190     A7 12 02 FB | 	rdlong	arg01, fp
32194     14 4E 05 F1 | 	add	fp, #20
32198     A7 14 02 FB | 	rdlong	arg02, fp
3219c     58 4E 85 F1 | 	sub	fp, #88
321a0     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
321a4     10 4E 05 F1 | 	add	fp, #16
321a8     A7 FA 61 FC | 	wrlong	result1, fp
321ac     34 4E 05 F1 | 	add	fp, #52
321b0     A7 18 02 FB | 	rdlong	arg04, fp
321b4     04 4E 05 F1 | 	add	fp, #4
321b8     A7 26 02 FB | 	rdlong	local01, fp
321bc     48 4E 85 F1 | 	sub	fp, #72
321c0     01 26 86 F1 | 	sub	local01, #1
321c4     10 18 06 F1 | 	add	arg04, #16
321c8     0C 27 62 FC | 	wrlong	local01, arg04
321cc     5C 00 90 FD | 	jmp	#LR__4888
321d0                 | LR__4885
321d0     10 4E 05 F1 | 	add	fp, #16
321d4     A7 18 0A FB | 	rdlong	arg04, fp wz
321d8     10 4E 85 F1 | 	sub	fp, #16
321dc     4C 00 90 5D |  if_ne	jmp	#LR__4887
321e0     1A 4E 05 F1 | 	add	fp, #26
321e4     A7 18 C2 FA | 	rdbyte	arg04, fp
321e8     1A 4E 85 F1 | 	sub	fp, #26
321ec     10 18 CE F7 | 	test	arg04, #16 wz
321f0     10 4E 05 51 |  if_ne	add	fp, #16
321f4     A7 08 68 5C |  if_ne	wrlong	#4, fp
321f8     10 4E 85 51 |  if_ne	sub	fp, #16
321fc     2C 00 90 5D |  if_ne	jmp	#LR__4886
32200     0C 4E 05 F1 | 	add	fp, #12
32204     A7 18 C2 FA | 	rdbyte	arg04, fp
32208     0C 4E 85 F1 | 	sub	fp, #12
3220c     02 18 CE F7 | 	test	arg04, #2 wz
32210     1A 4E 05 51 |  if_ne	add	fp, #26
32214     A7 26 C2 5A |  if_ne	rdbyte	local01, fp
32218     1A 4E 85 51 |  if_ne	sub	fp, #26
3221c     01 26 CE 57 |  if_ne	test	local01, #1 wz
32220     10 4E 05 51 |  if_ne	add	fp, #16
32224     A7 0E 68 5C |  if_ne	wrlong	#7, fp
32228     10 4E 85 51 |  if_ne	sub	fp, #16
3222c                 | LR__4886
3222c                 | LR__4887
3222c                 | LR__4888
3222c     10 4E 05 F1 | 	add	fp, #16
32230     A7 26 0A FB | 	rdlong	local01, fp wz
32234     10 4E 85 F1 | 	sub	fp, #16
32238     60 00 90 5D |  if_ne	jmp	#LR__4889
3223c     0C 4E 05 F1 | 	add	fp, #12
32240     A7 28 C2 FA | 	rdbyte	local02, fp
32244     0C 4E 85 F1 | 	sub	fp, #12
32248     08 28 CE F7 | 	test	local02, #8 wz
3224c     0C 4E 05 51 |  if_ne	add	fp, #12
32250     A7 28 C2 5A |  if_ne	rdbyte	local02, fp
32254     40 28 46 55 |  if_ne	or	local02, #64
32258     A7 28 42 5C |  if_ne	wrbyte	local02, fp
3225c     0C 4E 85 51 |  if_ne	sub	fp, #12
32260     04 4E 05 F1 | 	add	fp, #4
32264     A7 28 02 FB | 	rdlong	local02, fp
32268     40 4E 05 F1 | 	add	fp, #64
3226c     A7 26 02 FB | 	rdlong	local01, fp
32270     30 26 06 F1 | 	add	local01, #48
32274     13 27 02 FB | 	rdlong	local01, local01
32278     20 28 06 F1 | 	add	local02, #32
3227c     14 27 62 FC | 	wrlong	local01, local02
32280     40 4E 85 F1 | 	sub	fp, #64
32284     A7 28 02 FB | 	rdlong	local02, fp
32288     2C 4E 05 F1 | 	add	fp, #44
3228c     A7 26 02 FB | 	rdlong	local01, fp
32290     30 4E 85 F1 | 	sub	fp, #48
32294     24 28 06 F1 | 	add	local02, #36
32298     14 27 62 FC | 	wrlong	local01, local02
3229c                 | LR__4889
3229c     10 4E 05 F1 | 	add	fp, #16
322a0     A7 28 0A FB | 	rdlong	local02, fp wz
322a4     10 4E 85 F1 | 	sub	fp, #16
322a8     F4 02 90 5D |  if_ne	jmp	#LR__4895
322ac     04 4E 05 F1 | 	add	fp, #4
322b0     A7 28 02 FB | 	rdlong	local02, fp
322b4     40 4E 05 F1 | 	add	fp, #64
322b8     A7 12 02 FB | 	rdlong	arg01, fp
322bc     14 4E 85 F1 | 	sub	fp, #20
322c0     A7 14 02 FB | 	rdlong	arg02, fp
322c4     30 4E 85 F1 | 	sub	fp, #48
322c8     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
322cc     08 28 06 F1 | 	add	local02, #8
322d0     14 FB 61 FC | 	wrlong	result1, local02
322d4     04 4E 05 F1 | 	add	fp, #4
322d8     A7 28 02 FB | 	rdlong	local02, fp
322dc     2C 4E 05 F1 | 	add	fp, #44
322e0     A7 12 02 FB | 	rdlong	arg01, fp
322e4     1C 12 06 F1 | 	add	arg01, #28
322e8                 | ' {
322e8                 | ' 
322e8                 | ' 	return *((DWORD*)ptr);
322e8     09 FB 01 FB | 	rdlong	result1, arg01
322ec     0C 28 06 F1 | 	add	local02, #12
322f0     14 FB 61 FC | 	wrlong	result1, local02
322f4     2C 4E 85 F1 | 	sub	fp, #44
322f8     A7 28 02 FB | 	rdlong	local02, fp
322fc     40 4E 05 F1 | 	add	fp, #64
32300     A7 26 02 FB | 	rdlong	local01, fp
32304     14 27 62 FC | 	wrlong	local01, local02
32308     40 4E 85 F1 | 	sub	fp, #64
3230c     A7 28 02 FB | 	rdlong	local02, fp
32310     40 4E 05 F1 | 	add	fp, #64
32314     A7 26 02 FB | 	rdlong	local01, fp
32318     06 26 06 F1 | 	add	local01, #6
3231c     13 27 E2 FA | 	rdword	local01, local01
32320     04 28 06 F1 | 	add	local02, #4
32324     14 27 52 FC | 	wrword	local01, local02
32328     40 4E 85 F1 | 	sub	fp, #64
3232c     A7 28 02 FB | 	rdlong	local02, fp
32330     08 4E 05 F1 | 	add	fp, #8
32334     A7 26 C2 FA | 	rdbyte	local01, fp
32338     10 28 06 F1 | 	add	local02, #16
3233c     14 27 42 FC | 	wrbyte	local01, local02
32340     08 4E 85 F1 | 	sub	fp, #8
32344     A7 28 02 FB | 	rdlong	local02, fp
32348     11 28 06 F1 | 	add	local02, #17
3234c     14 01 48 FC | 	wrbyte	#0, local02
32350     A7 28 02 FB | 	rdlong	local02, fp
32354     1C 28 06 F1 | 	add	local02, #28
32358     14 01 68 FC | 	wrlong	#0, local02
3235c     A7 28 02 FB | 	rdlong	local02, fp
32360     14 28 06 F1 | 	add	local02, #20
32364     14 01 68 FC | 	wrlong	#0, local02
32368     A7 12 02 FB | 	rdlong	arg01, fp
3236c     04 4E 85 F1 | 	sub	fp, #4
32370     28 12 06 F1 | 	add	arg01, #40
32374     00 14 06 F6 | 	mov	arg02, #0
32378     09 16 C6 F9 | 	decod	arg03, #9
3237c     98 00 A0 FD | 	call	#\builtin_bytefill_
32380     0C 4E 05 F1 | 	add	fp, #12
32384     A7 28 C2 FA | 	rdbyte	local02, fp
32388     0C 4E 85 F1 | 	sub	fp, #12
3238c     20 28 CE F7 | 	test	local02, #32 wz
32390     0C 02 90 AD |  if_e	jmp	#LR__4894
32394     04 4E 05 F1 | 	add	fp, #4
32398     A7 26 02 FB | 	rdlong	local01, fp
3239c     04 4E 85 F1 | 	sub	fp, #4
323a0     0C 26 06 F1 | 	add	local01, #12
323a4     13 29 02 FB | 	rdlong	local02, local01
323a8     01 28 16 F2 | 	cmp	local02, #1 wc
323ac     F0 01 90 CD |  if_b	jmp	#LR__4894
323b0     04 4E 05 F1 | 	add	fp, #4
323b4     A7 26 02 FB | 	rdlong	local01, fp
323b8     13 29 02 F6 | 	mov	local02, local01
323bc     0C 26 06 F1 | 	add	local01, #12
323c0     13 27 02 FB | 	rdlong	local01, local01
323c4     14 28 06 F1 | 	add	local02, #20
323c8     14 27 62 FC | 	wrlong	local01, local02
323cc     40 4E 05 F1 | 	add	fp, #64
323d0     A7 28 02 FB | 	rdlong	local02, fp
323d4     0A 28 06 F1 | 	add	local02, #10
323d8     14 29 E2 FA | 	rdword	local02, local02
323dc     09 28 66 F0 | 	shl	local02, #9
323e0     08 4E 05 F1 | 	add	fp, #8
323e4     A7 28 62 FC | 	wrlong	local02, fp
323e8     48 4E 85 F1 | 	sub	fp, #72
323ec     A7 28 02 FB | 	rdlong	local02, fp
323f0     08 28 06 F1 | 	add	local02, #8
323f4     14 27 02 FB | 	rdlong	local01, local02
323f8     4C 4E 05 F1 | 	add	fp, #76
323fc     A7 26 62 FC | 	wrlong	local01, fp
32400                 | ' 				fp->fptr = fp->obj.objsize;
32400                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
32400                 | ' 				clst = fp->obj.sclust;
32400                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
32400     4C 4E 85 F1 | 	sub	fp, #76
32404     A7 28 02 FB | 	rdlong	local02, fp
32408     0C 28 06 F1 | 	add	local02, #12
3240c     14 27 02 FB | 	rdlong	local01, local02
32410     58 4E 05 F1 | 	add	fp, #88
32414     A7 26 62 FC | 	wrlong	local01, fp
32418     5C 4E 85 F1 | 	sub	fp, #92
3241c                 | LR__4890
3241c     10 4E 05 F1 | 	add	fp, #16
32420     A7 28 0A FB | 	rdlong	local02, fp wz
32424     10 4E 85 F1 | 	sub	fp, #16
32428     94 00 90 5D |  if_ne	jmp	#LR__4891
3242c     5C 4E 05 F1 | 	add	fp, #92
32430     A7 28 02 FB | 	rdlong	local02, fp
32434     10 4E 85 F1 | 	sub	fp, #16
32438     A7 26 02 FB | 	rdlong	local01, fp
3243c     4C 4E 85 F1 | 	sub	fp, #76
32440     13 29 1A F2 | 	cmp	local02, local01 wcz
32444     78 00 90 ED |  if_be	jmp	#LR__4891
32448     04 4E 05 F1 | 	add	fp, #4
3244c     A7 12 02 FB | 	rdlong	arg01, fp
32450     4C 4E 05 F1 | 	add	fp, #76
32454     A7 14 02 FB | 	rdlong	arg02, fp
32458     50 4E 85 F1 | 	sub	fp, #80
3245c     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
32460     50 4E 05 F1 | 	add	fp, #80
32464     A7 FA 61 FC | 	wrlong	result1, fp
32468     50 4E 85 F1 | 	sub	fp, #80
3246c     02 FA 15 F2 | 	cmp	result1, #2 wc
32470     10 4E 05 C1 |  if_b	add	fp, #16
32474     A7 04 68 CC |  if_b	wrlong	#2, fp
32478     10 4E 85 C1 |  if_b	sub	fp, #16
3247c     50 4E 05 F1 | 	add	fp, #80
32480     A7 28 02 FB | 	rdlong	local02, fp
32484     50 4E 85 F1 | 	sub	fp, #80
32488     FF FF 7F FF 
3248c     FF 29 0E F2 | 	cmp	local02, ##-1 wz
32490     10 4E 05 A1 |  if_e	add	fp, #16
32494     A7 02 68 AC |  if_e	wrlong	#1, fp
32498     10 4E 85 A1 |  if_e	sub	fp, #16
3249c     5C 4E 05 F1 | 	add	fp, #92
324a0     A7 28 02 FB | 	rdlong	local02, fp
324a4     10 4E 85 F1 | 	sub	fp, #16
324a8     A7 26 02 FB | 	rdlong	local01, fp
324ac     13 29 82 F1 | 	sub	local02, local01
324b0     10 4E 05 F1 | 	add	fp, #16
324b4     A7 28 62 FC | 	wrlong	local02, fp
324b8     5C 4E 85 F1 | 	sub	fp, #92
324bc     5C FF 9F FD | 	jmp	#LR__4890
324c0                 | LR__4891
324c0     04 4E 05 F1 | 	add	fp, #4
324c4     A7 28 02 FB | 	rdlong	local02, fp
324c8     4C 4E 05 F1 | 	add	fp, #76
324cc     A7 26 02 FB | 	rdlong	local01, fp
324d0     18 28 06 F1 | 	add	local02, #24
324d4     14 27 62 FC | 	wrlong	local01, local02
324d8     40 4E 85 F1 | 	sub	fp, #64
324dc     A7 28 0A FB | 	rdlong	local02, fp wz
324e0     10 4E 85 F1 | 	sub	fp, #16
324e4     B8 00 90 5D |  if_ne	jmp	#LR__4893
324e8     5C 4E 05 F1 | 	add	fp, #92
324ec     A7 26 02 FB | 	rdlong	local01, fp
324f0     5C 4E 85 F1 | 	sub	fp, #92
324f4     FF 27 CE F7 | 	test	local01, #511 wz
324f8     A4 00 90 AD |  if_e	jmp	#LR__4893
324fc     44 4E 05 F1 | 	add	fp, #68
32500     A7 12 02 FB | 	rdlong	arg01, fp
32504     0C 4E 05 F1 | 	add	fp, #12
32508     A7 14 02 FB | 	rdlong	arg02, fp
3250c     50 4E 85 F1 | 	sub	fp, #80
32510     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
32514     58 4E 05 F1 | 	add	fp, #88
32518     A7 FA 61 FC | 	wrlong	result1, fp
3251c     00 FA 4D F2 | 	cmps	result1, #0 wz
32520     58 4E 85 F1 | 	sub	fp, #88
32524     10 4E 05 A1 |  if_e	add	fp, #16
32528     A7 04 68 AC |  if_e	wrlong	#2, fp
3252c     10 4E 85 A1 |  if_e	sub	fp, #16
32530     6C 00 90 AD |  if_e	jmp	#LR__4892
32534     04 4E 05 F1 | 	add	fp, #4
32538     A7 28 02 FB | 	rdlong	local02, fp
3253c     54 4E 05 F1 | 	add	fp, #84
32540     A7 26 02 FB | 	rdlong	local01, fp
32544     04 4E 05 F1 | 	add	fp, #4
32548     A7 18 02 FB | 	rdlong	arg04, fp
3254c     09 18 46 F0 | 	shr	arg04, #9
32550     0C 27 02 F1 | 	add	local01, arg04
32554     1C 28 06 F1 | 	add	local02, #28
32558     14 27 62 FC | 	wrlong	local01, local02
3255c     18 4E 85 F1 | 	sub	fp, #24
32560     A7 28 02 FB | 	rdlong	local02, fp
32564     01 28 06 F1 | 	add	local02, #1
32568     14 13 C2 FA | 	rdbyte	arg01, local02
3256c     40 4E 85 F1 | 	sub	fp, #64
32570     A7 28 02 FB | 	rdlong	local02, fp
32574     14 15 02 F6 | 	mov	arg02, local02
32578     28 14 06 F1 | 	add	arg02, #40
3257c     04 4E 85 F1 | 	sub	fp, #4
32580     1C 28 06 F1 | 	add	local02, #28
32584     14 17 02 FB | 	rdlong	arg03, local02
32588     01 18 06 F6 | 	mov	arg04, #1
3258c     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
32590     00 FA 0D F2 | 	cmp	result1, #0 wz
32594     10 4E 05 51 |  if_ne	add	fp, #16
32598     A7 02 68 5C |  if_ne	wrlong	#1, fp
3259c     10 4E 85 51 |  if_ne	sub	fp, #16
325a0                 | LR__4892
325a0                 | LR__4893
325a0                 | LR__4894
325a0                 | LR__4895
325a0                 | LR__4896
325a0     10 4E 05 F1 | 	add	fp, #16
325a4     A7 28 0A FB | 	rdlong	local02, fp wz
325a8     10 4E 85 F1 | 	sub	fp, #16
325ac     04 4E 05 51 |  if_ne	add	fp, #4
325b0     A7 28 02 5B |  if_ne	rdlong	local02, fp
325b4     04 4E 85 51 |  if_ne	sub	fp, #4
325b8     14 01 68 5C |  if_ne	wrlong	#0, local02
325bc                 | ' 
325bc                 | ' 	return res ;
325bc     10 4E 05 F1 | 	add	fp, #16
325c0     A7 FA 01 FB | 	rdlong	result1, fp
325c4     10 4E 85 F1 | 	sub	fp, #16
325c8                 | LR__4897
325c8     A7 F0 03 F6 | 	mov	ptra, fp
325cc     B2 00 A0 FD | 	call	#popregs_
325d0                 | _fatfs_cc_f_open_ret
325d0     2D 00 64 FD | 	ret
325d4                 | 
325d4                 | _fatfs_cc_f_read
325d4     0E 4A 05 F6 | 	mov	COUNT_, #14
325d8     A8 00 A0 FD | 	call	#pushregs_
325dc     38 F0 07 F1 | 	add	ptra, #56
325e0     04 4E 05 F1 | 	add	fp, #4
325e4     A7 12 62 FC | 	wrlong	arg01, fp
325e8     04 4E 05 F1 | 	add	fp, #4
325ec     A7 14 62 FC | 	wrlong	arg02, fp
325f0     04 4E 05 F1 | 	add	fp, #4
325f4     A7 16 62 FC | 	wrlong	arg03, fp
325f8     04 4E 05 F1 | 	add	fp, #4
325fc     A7 18 62 FC | 	wrlong	arg04, fp
32600     08 4E 85 F1 | 	sub	fp, #8
32604     A7 FA 01 FB | 	rdlong	result1, fp
32608     2C 4E 05 F1 | 	add	fp, #44
3260c     A7 FA 61 FC | 	wrlong	result1, fp
32610     24 4E 85 F1 | 	sub	fp, #36
32614     A7 FA 01 FB | 	rdlong	result1, fp
32618     FD 00 68 FC | 	wrlong	#0, result1
3261c     0C 4E 85 F1 | 	sub	fp, #12
32620     A7 12 02 FB | 	rdlong	arg01, fp
32624     14 4E 05 F1 | 	add	fp, #20
32628     A7 14 02 F6 | 	mov	arg02, fp
3262c     18 4E 85 F1 | 	sub	fp, #24
32630     24 F7 BF FD | 	call	#_fatfs_cc_validate
32634     14 4E 05 F1 | 	add	fp, #20
32638     A7 FA 61 FC | 	wrlong	result1, fp
3263c     00 FA 4D F2 | 	cmps	result1, #0 wz
32640     14 4E 85 F1 | 	sub	fp, #20
32644     20 00 90 5D |  if_ne	jmp	#LR__4900
32648     04 4E 05 F1 | 	add	fp, #4
3264c     A7 14 02 FB | 	rdlong	arg02, fp
32650     11 14 06 F1 | 	add	arg02, #17
32654     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
32658     10 4E 05 F1 | 	add	fp, #16
3265c     A7 14 62 FC | 	wrlong	arg02, fp
32660     14 4E 85 F1 | 	sub	fp, #20
32664     10 00 90 AD |  if_e	jmp	#LR__4901
32668                 | LR__4900
32668     14 4E 05 F1 | 	add	fp, #20
3266c     A7 FA 01 FB | 	rdlong	result1, fp
32670     14 4E 85 F1 | 	sub	fp, #20
32674     EC 05 90 FD | 	jmp	#LR__4920
32678                 | LR__4901
32678     04 4E 05 F1 | 	add	fp, #4
3267c     A7 18 02 FB | 	rdlong	arg04, fp
32680     04 4E 85 F1 | 	sub	fp, #4
32684     10 18 06 F1 | 	add	arg04, #16
32688     0C 19 C2 FA | 	rdbyte	arg04, arg04
3268c     01 18 CE F7 | 	test	arg04, #1 wz
32690     07 FA 05 A6 |  if_e	mov	result1, #7
32694     CC 05 90 AD |  if_e	jmp	#LR__4920
32698     04 4E 05 F1 | 	add	fp, #4
3269c     A7 26 02 FB | 	rdlong	local01, fp
326a0     13 29 02 F6 | 	mov	local02, local01
326a4     0C 28 06 F1 | 	add	local02, #12
326a8     14 2B 02 FB | 	rdlong	local03, local02
326ac     14 26 06 F1 | 	add	local01, #20
326b0     13 27 02 FB | 	rdlong	local01, local01
326b4     13 2B 82 F1 | 	sub	local03, local01
326b8     20 4E 05 F1 | 	add	fp, #32
326bc     A7 2A 62 FC | 	wrlong	local03, fp
326c0     18 4E 85 F1 | 	sub	fp, #24
326c4     A7 2C 02 FB | 	rdlong	local04, fp
326c8     0C 4E 85 F1 | 	sub	fp, #12
326cc     15 2D 1A F2 | 	cmp	local04, local03 wcz
326d0     24 4E 05 11 |  if_a	add	fp, #36
326d4     A7 2C 02 1B |  if_a	rdlong	local04, fp
326d8     18 4E 85 11 |  if_a	sub	fp, #24
326dc     A7 2C 62 1C |  if_a	wrlong	local04, fp
326e0     0C 4E 85 11 |  if_a	sub	fp, #12
326e4                 | ' 
326e4                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
326e4                 | LR__4902
326e4     0C 4E 05 F1 | 	add	fp, #12
326e8     A7 28 02 FB | 	rdlong	local02, fp
326ec     0C 4E 85 F1 | 	sub	fp, #12
326f0     14 2D 02 F6 | 	mov	local04, local02
326f4     01 2C 16 F2 | 	cmp	local04, #1 wc
326f8     64 05 90 CD |  if_b	jmp	#LR__4919
326fc     04 4E 05 F1 | 	add	fp, #4
32700     A7 2A 02 FB | 	rdlong	local03, fp
32704     04 4E 85 F1 | 	sub	fp, #4
32708     14 2A 06 F1 | 	add	local03, #20
3270c     15 2B 02 FB | 	rdlong	local03, local03
32710     FF 2B CE F7 | 	test	local03, #511 wz
32714     3C 04 90 5D |  if_ne	jmp	#LR__4917
32718     04 4E 05 F1 | 	add	fp, #4
3271c     A7 26 02 FB | 	rdlong	local01, fp
32720     14 26 06 F1 | 	add	local01, #20
32724     13 2B 02 FB | 	rdlong	local03, local01
32728     09 2A 46 F0 | 	shr	local03, #9
3272c     14 4E 05 F1 | 	add	fp, #20
32730     A7 2E 02 FB | 	rdlong	local05, fp
32734     17 31 02 F6 | 	mov	local06, local05
32738     0A 30 06 F1 | 	add	local06, #10
3273c     18 33 E2 FA | 	rdword	local07, local06
32740     0A 30 86 F1 | 	sub	local06, #10
32744     19 35 32 F9 | 	getword	local08, local07, #0
32748     01 34 86 F1 | 	sub	local08, #1
3274c     1A 2B 0A F5 | 	and	local03, local08 wz
32750     18 4E 05 F1 | 	add	fp, #24
32754     A7 2A 62 FC | 	wrlong	local03, fp
32758     30 4E 85 F1 | 	sub	fp, #48
3275c     E0 00 90 5D |  if_ne	jmp	#LR__4907
32760     04 4E 05 F1 | 	add	fp, #4
32764     A7 2A 02 FB | 	rdlong	local03, fp
32768     04 4E 85 F1 | 	sub	fp, #4
3276c     14 2A 06 F1 | 	add	local03, #20
32770     15 2B 0A FB | 	rdlong	local03, local03 wz
32774     20 00 90 5D |  if_ne	jmp	#LR__4903
32778     04 4E 05 F1 | 	add	fp, #4
3277c     A7 2A 02 FB | 	rdlong	local03, fp
32780     08 2A 06 F1 | 	add	local03, #8
32784     15 2B 02 FB | 	rdlong	local03, local03
32788     18 4E 05 F1 | 	add	fp, #24
3278c     A7 2A 62 FC | 	wrlong	local03, fp
32790     1C 4E 85 F1 | 	sub	fp, #28
32794     28 00 90 FD | 	jmp	#LR__4904
32798                 | LR__4903
32798     04 4E 05 F1 | 	add	fp, #4
3279c     A7 34 02 FB | 	rdlong	local08, fp
327a0     1A 13 02 F6 | 	mov	arg01, local08
327a4     04 4E 85 F1 | 	sub	fp, #4
327a8     18 34 06 F1 | 	add	local08, #24
327ac     1A 15 02 FB | 	rdlong	arg02, local08
327b0     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
327b4     1C 4E 05 F1 | 	add	fp, #28
327b8     A7 FA 61 FC | 	wrlong	result1, fp
327bc     1C 4E 85 F1 | 	sub	fp, #28
327c0                 | LR__4904
327c0     1C 4E 05 F1 | 	add	fp, #28
327c4     A7 2A 02 FB | 	rdlong	local03, fp
327c8     1C 4E 85 F1 | 	sub	fp, #28
327cc     02 2A 16 F2 | 	cmp	local03, #2 wc
327d0     1C 00 90 3D |  if_ae	jmp	#LR__4905
327d4     04 4E 05 F1 | 	add	fp, #4
327d8     A7 2A 02 FB | 	rdlong	local03, fp
327dc     04 4E 85 F1 | 	sub	fp, #4
327e0     11 2A 06 F1 | 	add	local03, #17
327e4     15 05 48 FC | 	wrbyte	#2, local03
327e8     02 FA 05 F6 | 	mov	result1, #2
327ec     74 04 90 FD | 	jmp	#LR__4920
327f0                 | LR__4905
327f0     1C 4E 05 F1 | 	add	fp, #28
327f4     A7 2A 02 FB | 	rdlong	local03, fp
327f8     1C 4E 85 F1 | 	sub	fp, #28
327fc     FF FF 7F FF 
32800     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
32804     1C 00 90 5D |  if_ne	jmp	#LR__4906
32808     04 4E 05 F1 | 	add	fp, #4
3280c     A7 2A 02 FB | 	rdlong	local03, fp
32810     04 4E 85 F1 | 	sub	fp, #4
32814     11 2A 06 F1 | 	add	local03, #17
32818     15 03 48 FC | 	wrbyte	#1, local03
3281c     01 FA 05 F6 | 	mov	result1, #1
32820     40 04 90 FD | 	jmp	#LR__4920
32824                 | LR__4906
32824     04 4E 05 F1 | 	add	fp, #4
32828     A7 2A 02 FB | 	rdlong	local03, fp
3282c     18 4E 05 F1 | 	add	fp, #24
32830     A7 34 02 FB | 	rdlong	local08, fp
32834     1C 4E 85 F1 | 	sub	fp, #28
32838     18 2A 06 F1 | 	add	local03, #24
3283c     15 35 62 FC | 	wrlong	local08, local03
32840                 | LR__4907
32840     18 4E 05 F1 | 	add	fp, #24
32844     A7 12 02 FB | 	rdlong	arg01, fp
32848     14 4E 85 F1 | 	sub	fp, #20
3284c     A7 2A 02 FB | 	rdlong	local03, fp
32850     04 4E 85 F1 | 	sub	fp, #4
32854     18 2A 06 F1 | 	add	local03, #24
32858     15 15 02 FB | 	rdlong	arg02, local03
3285c     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
32860     20 4E 05 F1 | 	add	fp, #32
32864     A7 FA 61 FC | 	wrlong	result1, fp
32868     20 4E 85 F1 | 	sub	fp, #32
3286c     00 FA 0D F2 | 	cmp	result1, #0 wz
32870     1C 00 90 5D |  if_ne	jmp	#LR__4908
32874     04 4E 05 F1 | 	add	fp, #4
32878     A7 2A 02 FB | 	rdlong	local03, fp
3287c     04 4E 85 F1 | 	sub	fp, #4
32880     11 2A 06 F1 | 	add	local03, #17
32884     15 05 48 FC | 	wrbyte	#2, local03
32888     02 FA 05 F6 | 	mov	result1, #2
3288c     D4 03 90 FD | 	jmp	#LR__4920
32890                 | LR__4908
32890     20 4E 05 F1 | 	add	fp, #32
32894     A7 2A 02 FB | 	rdlong	local03, fp
32898     10 4E 05 F1 | 	add	fp, #16
3289c     A7 34 02 FB | 	rdlong	local08, fp
328a0     1A 2B 02 F1 | 	add	local03, local08
328a4     10 4E 85 F1 | 	sub	fp, #16
328a8     A7 2A 62 FC | 	wrlong	local03, fp
328ac     14 4E 85 F1 | 	sub	fp, #20
328b0     A7 2A 02 FB | 	rdlong	local03, fp
328b4     09 2A 46 F0 | 	shr	local03, #9
328b8     20 4E 05 F1 | 	add	fp, #32
328bc     A7 2A 62 FC | 	wrlong	local03, fp
328c0     2C 4E 85 F1 | 	sub	fp, #44
328c4     01 2A 16 F2 | 	cmp	local03, #1 wc
328c8     5C 01 90 CD |  if_b	jmp	#LR__4912
328cc     30 4E 05 F1 | 	add	fp, #48
328d0     A7 2A 02 FB | 	rdlong	local03, fp
328d4     04 4E 85 F1 | 	sub	fp, #4
328d8     A7 34 02 FB | 	rdlong	local08, fp
328dc     1A 2B 02 F1 | 	add	local03, local08
328e0     14 4E 85 F1 | 	sub	fp, #20
328e4     A7 34 02 FB | 	rdlong	local08, fp
328e8     18 4E 85 F1 | 	sub	fp, #24
328ec     0A 34 06 F1 | 	add	local08, #10
328f0     1A 35 E2 FA | 	rdword	local08, local08
328f4     1A 2B 1A F2 | 	cmp	local03, local08 wcz
328f8     28 00 90 ED |  if_be	jmp	#LR__4909
328fc     18 4E 05 F1 | 	add	fp, #24
32900     A7 26 02 FB | 	rdlong	local01, fp
32904     0A 26 06 F1 | 	add	local01, #10
32908     13 2B E2 FA | 	rdword	local03, local01
3290c     18 4E 05 F1 | 	add	fp, #24
32910     A7 34 02 FB | 	rdlong	local08, fp
32914     1A 2B 82 F1 | 	sub	local03, local08
32918     04 4E 85 F1 | 	sub	fp, #4
3291c     A7 2A 62 FC | 	wrlong	local03, fp
32920     2C 4E 85 F1 | 	sub	fp, #44
32924                 | LR__4909
32924     18 4E 05 F1 | 	add	fp, #24
32928     A7 26 02 FB | 	rdlong	local01, fp
3292c     01 26 06 F1 | 	add	local01, #1
32930     13 13 C2 FA | 	rdbyte	arg01, local01
32934     1C 4E 05 F1 | 	add	fp, #28
32938     A7 14 02 FB | 	rdlong	arg02, fp
3293c     14 4E 85 F1 | 	sub	fp, #20
32940     A7 16 02 FB | 	rdlong	arg03, fp
32944     0C 4E 05 F1 | 	add	fp, #12
32948     A7 18 02 FB | 	rdlong	arg04, fp
3294c     2C 4E 85 F1 | 	sub	fp, #44
32950     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
32954     00 FA 0D F2 | 	cmp	result1, #0 wz
32958     1C 00 90 AD |  if_e	jmp	#LR__4910
3295c     04 4E 05 F1 | 	add	fp, #4
32960     A7 2A 02 FB | 	rdlong	local03, fp
32964     04 4E 85 F1 | 	sub	fp, #4
32968     11 2A 06 F1 | 	add	local03, #17
3296c     15 03 48 FC | 	wrbyte	#1, local03
32970     01 FA 05 F6 | 	mov	result1, #1
32974     EC 02 90 FD | 	jmp	#LR__4920
32978                 | LR__4910
32978     04 4E 05 F1 | 	add	fp, #4
3297c     A7 26 02 FB | 	rdlong	local01, fp
32980     04 4E 85 F1 | 	sub	fp, #4
32984     10 26 06 F1 | 	add	local01, #16
32988     13 2B C2 FA | 	rdbyte	local03, local01
3298c     80 2A CE F7 | 	test	local03, #128 wz
32990     78 00 90 AD |  if_e	jmp	#LR__4911
32994     04 4E 05 F1 | 	add	fp, #4
32998     A7 34 02 FB | 	rdlong	local08, fp
3299c     1C 34 06 F1 | 	add	local08, #28
329a0     1A 35 02 FB | 	rdlong	local08, local08
329a4     1C 4E 05 F1 | 	add	fp, #28
329a8     A7 36 02 FB | 	rdlong	local09, fp
329ac     1B 35 82 F1 | 	sub	local08, local09
329b0     0C 4E 05 F1 | 	add	fp, #12
329b4     A7 38 02 FB | 	rdlong	local10, fp
329b8     2C 4E 85 F1 | 	sub	fp, #44
329bc     1C 3B 02 F6 | 	mov	local11, local10
329c0     1D 35 12 F2 | 	cmp	local08, local11 wc
329c4     44 00 90 3D |  if_ae	jmp	#LR__4911
329c8     34 4E 05 F1 | 	add	fp, #52
329cc     A7 12 02 FB | 	rdlong	arg01, fp
329d0     30 4E 85 F1 | 	sub	fp, #48
329d4     A7 14 02 FB | 	rdlong	arg02, fp
329d8     0A 3B 02 F6 | 	mov	local11, arg02
329dc     1C 3A 06 F1 | 	add	local11, #28
329e0     1D 37 02 FB | 	rdlong	local09, local11
329e4     1C 4E 05 F1 | 	add	fp, #28
329e8     A7 2E 02 FB | 	rdlong	local05, fp
329ec     17 37 82 F1 | 	sub	local09, local05
329f0     09 36 66 F0 | 	shl	local09, #9
329f4     1B 3B 02 F6 | 	mov	local11, local09
329f8     1B 13 02 F1 | 	add	arg01, local09
329fc     20 4E 85 F1 | 	sub	fp, #32
32a00     28 14 06 F1 | 	add	arg02, #40
32a04     09 16 C6 F9 | 	decod	arg03, #9
32a08     64 43 BF FD | 	call	#__system____builtin_memmove
32a0c                 | LR__4911
32a0c     2C 4E 05 F1 | 	add	fp, #44
32a10     A7 2A 02 FB | 	rdlong	local03, fp
32a14     09 2A 66 F0 | 	shl	local03, #9
32a18     04 4E 85 F1 | 	sub	fp, #4
32a1c     A7 2A 62 FC | 	wrlong	local03, fp
32a20     28 4E 85 F1 | 	sub	fp, #40
32a24                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
32a24                 | ' 				}
32a24                 | ' 
32a24                 | ' 
32a24                 | ' 				rcnt =  ((UINT) 512 )  * cc;
32a24                 | ' 				continue;
32a24     B4 01 90 FD | 	jmp	#LR__4918
32a28                 | LR__4912
32a28     04 4E 05 F1 | 	add	fp, #4
32a2c     A7 2A 02 FB | 	rdlong	local03, fp
32a30     1C 2A 06 F1 | 	add	local03, #28
32a34     15 2B 02 FB | 	rdlong	local03, local03
32a38     1C 4E 05 F1 | 	add	fp, #28
32a3c     A7 26 02 FB | 	rdlong	local01, fp
32a40     20 4E 85 F1 | 	sub	fp, #32
32a44     13 2B 0A F2 | 	cmp	local03, local01 wz
32a48     EC 00 90 AD |  if_e	jmp	#LR__4916
32a4c     04 4E 05 F1 | 	add	fp, #4
32a50     A7 26 02 FB | 	rdlong	local01, fp
32a54     04 4E 85 F1 | 	sub	fp, #4
32a58     10 26 06 F1 | 	add	local01, #16
32a5c     13 2B C2 FA | 	rdbyte	local03, local01
32a60     80 2A CE F7 | 	test	local03, #128 wz
32a64     7C 00 90 AD |  if_e	jmp	#LR__4914
32a68     18 4E 05 F1 | 	add	fp, #24
32a6c     A7 26 02 FB | 	rdlong	local01, fp
32a70     01 26 06 F1 | 	add	local01, #1
32a74     13 13 C2 FA | 	rdbyte	arg01, local01
32a78     14 4E 85 F1 | 	sub	fp, #20
32a7c     A7 2A 02 FB | 	rdlong	local03, fp
32a80     15 15 02 F6 | 	mov	arg02, local03
32a84     28 14 06 F1 | 	add	arg02, #40
32a88     04 4E 85 F1 | 	sub	fp, #4
32a8c     1C 2A 06 F1 | 	add	local03, #28
32a90     15 17 02 FB | 	rdlong	arg03, local03
32a94     01 18 06 F6 | 	mov	arg04, #1
32a98     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
32a9c     00 FA 0D F2 | 	cmp	result1, #0 wz
32aa0     1C 00 90 AD |  if_e	jmp	#LR__4913
32aa4     04 4E 05 F1 | 	add	fp, #4
32aa8     A7 2A 02 FB | 	rdlong	local03, fp
32aac     04 4E 85 F1 | 	sub	fp, #4
32ab0     11 2A 06 F1 | 	add	local03, #17
32ab4     15 03 48 FC | 	wrbyte	#1, local03
32ab8     01 FA 05 F6 | 	mov	result1, #1
32abc     A4 01 90 FD | 	jmp	#LR__4920
32ac0                 | LR__4913
32ac0     04 4E 05 F1 | 	add	fp, #4
32ac4     A7 3A 02 FB | 	rdlong	local11, fp
32ac8     1D 2B 02 F6 | 	mov	local03, local11
32acc     04 4E 85 F1 | 	sub	fp, #4
32ad0     10 3A 06 F1 | 	add	local11, #16
32ad4     1D 3B C2 FA | 	rdbyte	local11, local11
32ad8     7F 3A 06 F5 | 	and	local11, #127
32adc     10 2A 06 F1 | 	add	local03, #16
32ae0     15 3B 42 FC | 	wrbyte	local11, local03
32ae4                 | LR__4914
32ae4     18 4E 05 F1 | 	add	fp, #24
32ae8     A7 26 02 FB | 	rdlong	local01, fp
32aec     01 26 06 F1 | 	add	local01, #1
32af0     13 13 C2 FA | 	rdbyte	arg01, local01
32af4     14 4E 85 F1 | 	sub	fp, #20
32af8     A7 14 02 FB | 	rdlong	arg02, fp
32afc     28 14 06 F1 | 	add	arg02, #40
32b00     1C 4E 05 F1 | 	add	fp, #28
32b04     A7 16 02 FB | 	rdlong	arg03, fp
32b08     20 4E 85 F1 | 	sub	fp, #32
32b0c     01 18 06 F6 | 	mov	arg04, #1
32b10     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
32b14     00 FA 0D F2 | 	cmp	result1, #0 wz
32b18     1C 00 90 AD |  if_e	jmp	#LR__4915
32b1c     04 4E 05 F1 | 	add	fp, #4
32b20     A7 2A 02 FB | 	rdlong	local03, fp
32b24     04 4E 85 F1 | 	sub	fp, #4
32b28     11 2A 06 F1 | 	add	local03, #17
32b2c     15 03 48 FC | 	wrbyte	#1, local03
32b30     01 FA 05 F6 | 	mov	result1, #1
32b34     2C 01 90 FD | 	jmp	#LR__4920
32b38                 | LR__4915
32b38                 | LR__4916
32b38     04 4E 05 F1 | 	add	fp, #4
32b3c     A7 2A 02 FB | 	rdlong	local03, fp
32b40     1C 4E 05 F1 | 	add	fp, #28
32b44     A7 3A 02 FB | 	rdlong	local11, fp
32b48     20 4E 85 F1 | 	sub	fp, #32
32b4c     1C 2A 06 F1 | 	add	local03, #28
32b50     15 3B 62 FC | 	wrlong	local11, local03
32b54                 | LR__4917
32b54     04 4E 05 F1 | 	add	fp, #4
32b58     A7 26 02 FB | 	rdlong	local01, fp
32b5c     14 26 06 F1 | 	add	local01, #20
32b60     13 3B 02 FB | 	rdlong	local11, local01
32b64     FF 3B 06 F5 | 	and	local11, #511
32b68     09 2A C6 F9 | 	decod	local03, #9
32b6c     1D 2B 82 F1 | 	sub	local03, local11
32b70     24 4E 05 F1 | 	add	fp, #36
32b74     A7 2A 62 FC | 	wrlong	local03, fp
32b78     1C 4E 85 F1 | 	sub	fp, #28
32b7c     A7 3A 02 FB | 	rdlong	local11, fp
32b80     0C 4E 85 F1 | 	sub	fp, #12
32b84     1D 2B 1A F2 | 	cmp	local03, local11 wcz
32b88     0C 4E 05 11 |  if_a	add	fp, #12
32b8c     A7 2A 02 1B |  if_a	rdlong	local03, fp
32b90     1C 4E 05 11 |  if_a	add	fp, #28
32b94     A7 2A 62 1C |  if_a	wrlong	local03, fp
32b98     28 4E 85 11 |  if_a	sub	fp, #40
32b9c     34 4E 05 F1 | 	add	fp, #52
32ba0     A7 12 02 FB | 	rdlong	arg01, fp
32ba4     30 4E 85 F1 | 	sub	fp, #48
32ba8     A7 30 02 FB | 	rdlong	local06, fp
32bac     18 15 02 F6 | 	mov	arg02, local06
32bb0     28 14 06 F1 | 	add	arg02, #40
32bb4     14 30 06 F1 | 	add	local06, #20
32bb8     18 3B 02 FB | 	rdlong	local11, local06
32bbc     1D 37 02 F6 | 	mov	local09, local11
32bc0     1B 39 02 F6 | 	mov	local10, local09
32bc4     FF 39 06 F5 | 	and	local10, #511
32bc8     1C 15 02 F1 | 	add	arg02, local10
32bcc     24 4E 05 F1 | 	add	fp, #36
32bd0     A7 16 02 FB | 	rdlong	arg03, fp
32bd4     28 4E 85 F1 | 	sub	fp, #40
32bd8     94 41 BF FD | 	call	#__system____builtin_memmove
32bdc                 | LR__4918
32bdc     0C 4E 05 F1 | 	add	fp, #12
32be0     A7 2A 02 FB | 	rdlong	local03, fp
32be4     1C 4E 05 F1 | 	add	fp, #28
32be8     A7 34 02 FB | 	rdlong	local08, fp
32bec     1A 2B 82 F1 | 	sub	local03, local08
32bf0     1C 4E 85 F1 | 	sub	fp, #28
32bf4     A7 2A 62 FC | 	wrlong	local03, fp
32bf8     04 4E 05 F1 | 	add	fp, #4
32bfc     A7 26 02 FB | 	rdlong	local01, fp
32c00     13 33 02 FB | 	rdlong	local07, local01
32c04     18 4E 05 F1 | 	add	fp, #24
32c08     A7 34 02 FB | 	rdlong	local08, fp
32c0c     1A 33 02 F1 | 	add	local07, local08
32c10     13 33 62 FC | 	wrlong	local07, local01
32c14     0C 4E 05 F1 | 	add	fp, #12
32c18     A7 2A 02 FB | 	rdlong	local03, fp
32c1c     0C 4E 85 F1 | 	sub	fp, #12
32c20     A7 3C 02 FB | 	rdlong	local12, fp
32c24     1E 2B 02 F1 | 	add	local03, local12
32c28     0C 4E 05 F1 | 	add	fp, #12
32c2c     A7 2A 62 FC | 	wrlong	local03, fp
32c30     30 4E 85 F1 | 	sub	fp, #48
32c34     A7 3E 02 FB | 	rdlong	local13, fp
32c38     1F 2B 02 F6 | 	mov	local03, local13
32c3c     14 3E 06 F1 | 	add	local13, #20
32c40     1F 41 02 FB | 	rdlong	local14, local13
32c44     24 4E 05 F1 | 	add	fp, #36
32c48     A7 30 02 FB | 	rdlong	local06, fp
32c4c     28 4E 85 F1 | 	sub	fp, #40
32c50     18 41 02 F1 | 	add	local14, local06
32c54     14 2A 06 F1 | 	add	local03, #20
32c58     15 41 62 FC | 	wrlong	local14, local03
32c5c     84 FA 9F FD | 	jmp	#LR__4902
32c60                 | LR__4919
32c60                 | ' 
32c60                 | ' 
32c60                 | ' 
32c60                 | ' 
32c60                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
32c60                 | ' 
32c60                 | ' 	}
32c60                 | ' 
32c60                 | ' 	return FR_OK ;
32c60     00 FA 05 F6 | 	mov	result1, #0
32c64                 | LR__4920
32c64     A7 F0 03 F6 | 	mov	ptra, fp
32c68     B2 00 A0 FD | 	call	#popregs_
32c6c                 | _fatfs_cc_f_read_ret
32c6c     2D 00 64 FD | 	ret
32c70                 | 
32c70                 | _fatfs_cc_f_write
32c70     15 4A 05 F6 | 	mov	COUNT_, #21
32c74     A8 00 A0 FD | 	call	#pushregs_
32c78     34 F0 07 F1 | 	add	ptra, #52
32c7c     04 4E 05 F1 | 	add	fp, #4
32c80     A7 12 62 FC | 	wrlong	arg01, fp
32c84     04 4E 05 F1 | 	add	fp, #4
32c88     A7 14 62 FC | 	wrlong	arg02, fp
32c8c     04 4E 05 F1 | 	add	fp, #4
32c90     A7 16 62 FC | 	wrlong	arg03, fp
32c94     04 4E 05 F1 | 	add	fp, #4
32c98     A7 18 62 FC | 	wrlong	arg04, fp
32c9c     08 4E 85 F1 | 	sub	fp, #8
32ca0     A7 FA 01 FB | 	rdlong	result1, fp
32ca4     28 4E 05 F1 | 	add	fp, #40
32ca8     A7 FA 61 FC | 	wrlong	result1, fp
32cac     20 4E 85 F1 | 	sub	fp, #32
32cb0     A7 FA 01 FB | 	rdlong	result1, fp
32cb4     FD 00 68 FC | 	wrlong	#0, result1
32cb8     0C 4E 85 F1 | 	sub	fp, #12
32cbc     A7 12 02 FB | 	rdlong	arg01, fp
32cc0     14 4E 05 F1 | 	add	fp, #20
32cc4     A7 14 02 F6 | 	mov	arg02, fp
32cc8     18 4E 85 F1 | 	sub	fp, #24
32ccc     88 F0 BF FD | 	call	#_fatfs_cc_validate
32cd0     14 4E 05 F1 | 	add	fp, #20
32cd4     A7 FA 61 FC | 	wrlong	result1, fp
32cd8     00 FA 4D F2 | 	cmps	result1, #0 wz
32cdc     14 4E 85 F1 | 	sub	fp, #20
32ce0     20 00 90 5D |  if_ne	jmp	#LR__4930
32ce4     04 4E 05 F1 | 	add	fp, #4
32ce8     A7 14 02 FB | 	rdlong	arg02, fp
32cec     11 14 06 F1 | 	add	arg02, #17
32cf0     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
32cf4     10 4E 05 F1 | 	add	fp, #16
32cf8     A7 14 62 FC | 	wrlong	arg02, fp
32cfc     14 4E 85 F1 | 	sub	fp, #20
32d00     10 00 90 AD |  if_e	jmp	#LR__4931
32d04                 | LR__4930
32d04     14 4E 05 F1 | 	add	fp, #20
32d08     A7 FA 01 FB | 	rdlong	result1, fp
32d0c     14 4E 85 F1 | 	sub	fp, #20
32d10     44 07 90 FD | 	jmp	#LR__4953
32d14                 | LR__4931
32d14     04 4E 05 F1 | 	add	fp, #4
32d18     A7 14 02 FB | 	rdlong	arg02, fp
32d1c     04 4E 85 F1 | 	sub	fp, #4
32d20     10 14 06 F1 | 	add	arg02, #16
32d24     0A 15 C2 FA | 	rdbyte	arg02, arg02
32d28     02 14 CE F7 | 	test	arg02, #2 wz
32d2c     07 FA 05 A6 |  if_e	mov	result1, #7
32d30     24 07 90 AD |  if_e	jmp	#LR__4953
32d34     04 4E 05 F1 | 	add	fp, #4
32d38     A7 14 02 FB | 	rdlong	arg02, fp
32d3c     0A 13 02 F6 | 	mov	arg01, arg02
32d40     14 12 06 F1 | 	add	arg01, #20
32d44     09 13 02 FB | 	rdlong	arg01, arg01
32d48     08 4E 05 F1 | 	add	fp, #8
32d4c     A7 FA 01 FB | 	rdlong	result1, fp
32d50     FD 12 02 F1 | 	add	arg01, result1
32d54     0C 4E 85 F1 | 	sub	fp, #12
32d58     14 14 06 F1 | 	add	arg02, #20
32d5c     0A FB 01 FB | 	rdlong	result1, arg02
32d60     FD 12 12 F2 | 	cmp	arg01, result1 wc
32d64     24 00 90 3D |  if_ae	jmp	#LR__4932
32d68     04 4E 05 F1 | 	add	fp, #4
32d6c     A7 14 02 FB | 	rdlong	arg02, fp
32d70     01 FA 65 F6 | 	neg	result1, #1
32d74     14 14 06 F1 | 	add	arg02, #20
32d78     0A 15 02 FB | 	rdlong	arg02, arg02
32d7c     0A FB 81 F1 | 	sub	result1, arg02
32d80     08 4E 05 F1 | 	add	fp, #8
32d84     A7 FA 61 FC | 	wrlong	result1, fp
32d88     0C 4E 85 F1 | 	sub	fp, #12
32d8c                 | LR__4932
32d8c                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
32d8c                 | ' 	}
32d8c                 | ' 
32d8c                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
32d8c                 | LR__4933
32d8c     0C 4E 05 F1 | 	add	fp, #12
32d90     A7 FA 01 FB | 	rdlong	result1, fp
32d94     0C 4E 85 F1 | 	sub	fp, #12
32d98     01 FA 15 F2 | 	cmp	result1, #1 wc
32d9c     90 06 90 CD |  if_b	jmp	#LR__4952
32da0     04 4E 05 F1 | 	add	fp, #4
32da4     A7 FA 01 FB | 	rdlong	result1, fp
32da8     04 4E 85 F1 | 	sub	fp, #4
32dac     14 FA 05 F1 | 	add	result1, #20
32db0     FD FA 01 FB | 	rdlong	result1, result1
32db4     FF FB CD F7 | 	test	result1, #511 wz
32db8     D8 04 90 5D |  if_ne	jmp	#LR__4948
32dbc     04 4E 05 F1 | 	add	fp, #4
32dc0     A7 FA 01 FB | 	rdlong	result1, fp
32dc4     14 FA 05 F1 | 	add	result1, #20
32dc8     FD FA 01 FB | 	rdlong	result1, result1
32dcc     09 FA 45 F0 | 	shr	result1, #9
32dd0     14 4E 05 F1 | 	add	fp, #20
32dd4     A7 14 02 FB | 	rdlong	arg02, fp
32dd8     0A 14 06 F1 | 	add	arg02, #10
32ddc     0A 19 E2 FA | 	rdword	arg04, arg02
32de0     0C 15 32 F9 | 	getword	arg02, arg04, #0
32de4     01 14 86 F1 | 	sub	arg02, #1
32de8     0A FB 09 F5 | 	and	result1, arg02 wz
32dec     14 4E 05 F1 | 	add	fp, #20
32df0     A7 FA 61 FC | 	wrlong	result1, fp
32df4     2C 4E 85 F1 | 	sub	fp, #44
32df8     44 01 90 5D |  if_ne	jmp	#LR__4939
32dfc     04 4E 05 F1 | 	add	fp, #4
32e00     A7 FA 01 FB | 	rdlong	result1, fp
32e04     04 4E 85 F1 | 	sub	fp, #4
32e08     14 FA 05 F1 | 	add	result1, #20
32e0c     FD 14 0A FB | 	rdlong	arg02, result1 wz
32e10     44 00 90 5D |  if_ne	jmp	#LR__4934
32e14     04 4E 05 F1 | 	add	fp, #4
32e18     A7 14 02 FB | 	rdlong	arg02, fp
32e1c     08 14 06 F1 | 	add	arg02, #8
32e20     0A 15 0A FB | 	rdlong	arg02, arg02 wz
32e24     18 4E 05 F1 | 	add	fp, #24
32e28     A7 14 62 FC | 	wrlong	arg02, fp
32e2c     1C 4E 85 F1 | 	sub	fp, #28
32e30     4C 00 90 5D |  if_ne	jmp	#LR__4935
32e34     04 4E 05 F1 | 	add	fp, #4
32e38     A7 12 02 FB | 	rdlong	arg01, fp
32e3c     04 4E 85 F1 | 	sub	fp, #4
32e40     00 14 06 F6 | 	mov	arg02, #0
32e44     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
32e48     1C 4E 05 F1 | 	add	fp, #28
32e4c     A7 FA 61 FC | 	wrlong	result1, fp
32e50     1C 4E 85 F1 | 	sub	fp, #28
32e54     28 00 90 FD | 	jmp	#LR__4935
32e58                 | LR__4934
32e58     04 4E 05 F1 | 	add	fp, #4
32e5c     A7 18 02 FB | 	rdlong	arg04, fp
32e60     0C 13 02 F6 | 	mov	arg01, arg04
32e64     04 4E 85 F1 | 	sub	fp, #4
32e68     18 18 06 F1 | 	add	arg04, #24
32e6c     0C 15 02 FB | 	rdlong	arg02, arg04
32e70     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
32e74     1C 4E 05 F1 | 	add	fp, #28
32e78     A7 FA 61 FC | 	wrlong	result1, fp
32e7c     1C 4E 85 F1 | 	sub	fp, #28
32e80                 | LR__4935
32e80     1C 4E 05 F1 | 	add	fp, #28
32e84     A7 FA 09 FB | 	rdlong	result1, fp wz
32e88     1C 4E 85 F1 | 	sub	fp, #28
32e8c     A0 05 90 AD |  if_e	jmp	#LR__4952
32e90     1C 4E 05 F1 | 	add	fp, #28
32e94     A7 FA 01 FB | 	rdlong	result1, fp
32e98     1C 4E 85 F1 | 	sub	fp, #28
32e9c     01 FA 0D F2 | 	cmp	result1, #1 wz
32ea0     1C 00 90 5D |  if_ne	jmp	#LR__4936
32ea4     04 4E 05 F1 | 	add	fp, #4
32ea8     A7 FA 01 FB | 	rdlong	result1, fp
32eac     04 4E 85 F1 | 	sub	fp, #4
32eb0     11 FA 05 F1 | 	add	result1, #17
32eb4     FD 04 48 FC | 	wrbyte	#2, result1
32eb8     02 FA 05 F6 | 	mov	result1, #2
32ebc     98 05 90 FD | 	jmp	#LR__4953
32ec0                 | LR__4936
32ec0     1C 4E 05 F1 | 	add	fp, #28
32ec4     A7 FA 01 FB | 	rdlong	result1, fp
32ec8     1C 4E 85 F1 | 	sub	fp, #28
32ecc     FF FF 7F FF 
32ed0     FF FB 0D F2 | 	cmp	result1, ##-1 wz
32ed4     1C 00 90 5D |  if_ne	jmp	#LR__4937
32ed8     04 4E 05 F1 | 	add	fp, #4
32edc     A7 FA 01 FB | 	rdlong	result1, fp
32ee0     04 4E 85 F1 | 	sub	fp, #4
32ee4     11 FA 05 F1 | 	add	result1, #17
32ee8     FD 02 48 FC | 	wrbyte	#1, result1
32eec     01 FA 05 F6 | 	mov	result1, #1
32ef0     64 05 90 FD | 	jmp	#LR__4953
32ef4                 | LR__4937
32ef4     04 4E 05 F1 | 	add	fp, #4
32ef8     A7 FA 01 FB | 	rdlong	result1, fp
32efc     18 4E 05 F1 | 	add	fp, #24
32f00     A7 18 02 FB | 	rdlong	arg04, fp
32f04     18 FA 05 F1 | 	add	result1, #24
32f08     FD 18 62 FC | 	wrlong	arg04, result1
32f0c     18 4E 85 F1 | 	sub	fp, #24
32f10     A7 FA 01 FB | 	rdlong	result1, fp
32f14     04 4E 85 F1 | 	sub	fp, #4
32f18     08 FA 05 F1 | 	add	result1, #8
32f1c     FD FA 09 FB | 	rdlong	result1, result1 wz
32f20     1C 00 90 5D |  if_ne	jmp	#LR__4938
32f24     04 4E 05 F1 | 	add	fp, #4
32f28     A7 18 02 FB | 	rdlong	arg04, fp
32f2c     18 4E 05 F1 | 	add	fp, #24
32f30     A7 FA 01 FB | 	rdlong	result1, fp
32f34     1C 4E 85 F1 | 	sub	fp, #28
32f38     08 18 06 F1 | 	add	arg04, #8
32f3c     0C FB 61 FC | 	wrlong	result1, arg04
32f40                 | LR__4938
32f40                 | LR__4939
32f40     04 4E 05 F1 | 	add	fp, #4
32f44     A7 18 02 FB | 	rdlong	arg04, fp
32f48     04 4E 85 F1 | 	sub	fp, #4
32f4c     10 18 06 F1 | 	add	arg04, #16
32f50     0C 19 C2 FA | 	rdbyte	arg04, arg04
32f54     80 18 CE F7 | 	test	arg04, #128 wz
32f58     7C 00 90 AD |  if_e	jmp	#LR__4941
32f5c     18 4E 05 F1 | 	add	fp, #24
32f60     A7 18 02 FB | 	rdlong	arg04, fp
32f64     01 18 06 F1 | 	add	arg04, #1
32f68     0C 13 C2 FA | 	rdbyte	arg01, arg04
32f6c     14 4E 85 F1 | 	sub	fp, #20
32f70     A7 18 02 FB | 	rdlong	arg04, fp
32f74     0C 15 02 F6 | 	mov	arg02, arg04
32f78     28 14 06 F1 | 	add	arg02, #40
32f7c     04 4E 85 F1 | 	sub	fp, #4
32f80     1C 18 06 F1 | 	add	arg04, #28
32f84     0C 17 02 FB | 	rdlong	arg03, arg04
32f88     01 18 06 F6 | 	mov	arg04, #1
32f8c     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
32f90     00 FA 0D F2 | 	cmp	result1, #0 wz
32f94     1C 00 90 AD |  if_e	jmp	#LR__4940
32f98     04 4E 05 F1 | 	add	fp, #4
32f9c     A7 FA 01 FB | 	rdlong	result1, fp
32fa0     04 4E 85 F1 | 	sub	fp, #4
32fa4     11 FA 05 F1 | 	add	result1, #17
32fa8     FD 02 48 FC | 	wrbyte	#1, result1
32fac     01 FA 05 F6 | 	mov	result1, #1
32fb0     A4 04 90 FD | 	jmp	#LR__4953
32fb4                 | LR__4940
32fb4     04 4E 05 F1 | 	add	fp, #4
32fb8     A7 18 02 FB | 	rdlong	arg04, fp
32fbc     0C FB 01 F6 | 	mov	result1, arg04
32fc0     04 4E 85 F1 | 	sub	fp, #4
32fc4     10 18 06 F1 | 	add	arg04, #16
32fc8     0C 19 C2 FA | 	rdbyte	arg04, arg04
32fcc     7F 18 06 F5 | 	and	arg04, #127
32fd0     10 FA 05 F1 | 	add	result1, #16
32fd4     FD 18 42 FC | 	wrbyte	arg04, result1
32fd8                 | LR__4941
32fd8     18 4E 05 F1 | 	add	fp, #24
32fdc     A7 12 02 FB | 	rdlong	arg01, fp
32fe0     14 4E 85 F1 | 	sub	fp, #20
32fe4     A7 14 02 FB | 	rdlong	arg02, fp
32fe8     04 4E 85 F1 | 	sub	fp, #4
32fec     18 14 06 F1 | 	add	arg02, #24
32ff0     0A 15 02 FB | 	rdlong	arg02, arg02
32ff4     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
32ff8     20 4E 05 F1 | 	add	fp, #32
32ffc     A7 FA 61 FC | 	wrlong	result1, fp
33000     20 4E 85 F1 | 	sub	fp, #32
33004     00 FA 0D F2 | 	cmp	result1, #0 wz
33008     1C 00 90 5D |  if_ne	jmp	#LR__4942
3300c     04 4E 05 F1 | 	add	fp, #4
33010     A7 FA 01 FB | 	rdlong	result1, fp
33014     04 4E 85 F1 | 	sub	fp, #4
33018     11 FA 05 F1 | 	add	result1, #17
3301c     FD 04 48 FC | 	wrbyte	#2, result1
33020     02 FA 05 F6 | 	mov	result1, #2
33024     30 04 90 FD | 	jmp	#LR__4953
33028                 | LR__4942
33028     20 4E 05 F1 | 	add	fp, #32
3302c     A7 FA 01 FB | 	rdlong	result1, fp
33030     0C 4E 05 F1 | 	add	fp, #12
33034     A7 26 02 FB | 	rdlong	local01, fp
33038     13 FB 01 F1 | 	add	result1, local01
3303c     0C 4E 85 F1 | 	sub	fp, #12
33040     A7 FA 61 FC | 	wrlong	result1, fp
33044     14 4E 85 F1 | 	sub	fp, #20
33048     A7 FA 01 FB | 	rdlong	result1, fp
3304c     09 FA 45 F0 | 	shr	result1, #9
33050     1C 4E 05 F1 | 	add	fp, #28
33054     A7 FA 61 FC | 	wrlong	result1, fp
33058     28 4E 85 F1 | 	sub	fp, #40
3305c     01 FA 15 F2 | 	cmp	result1, #1 wc
33060     60 01 90 CD |  if_b	jmp	#LR__4946
33064     2C 4E 05 F1 | 	add	fp, #44
33068     A7 FA 01 FB | 	rdlong	result1, fp
3306c     04 4E 85 F1 | 	sub	fp, #4
33070     A7 18 02 FB | 	rdlong	arg04, fp
33074     0C FB 01 F1 | 	add	result1, arg04
33078     10 4E 85 F1 | 	sub	fp, #16
3307c     A7 18 02 FB | 	rdlong	arg04, fp
33080     18 4E 85 F1 | 	sub	fp, #24
33084     0A 18 06 F1 | 	add	arg04, #10
33088     0C 19 E2 FA | 	rdword	arg04, arg04
3308c     0C FB 19 F2 | 	cmp	result1, arg04 wcz
33090     28 00 90 ED |  if_be	jmp	#LR__4943
33094     18 4E 05 F1 | 	add	fp, #24
33098     A7 FA 01 FB | 	rdlong	result1, fp
3309c     0A FA 05 F1 | 	add	result1, #10
330a0     FD FA E1 FA | 	rdword	result1, result1
330a4     14 4E 05 F1 | 	add	fp, #20
330a8     A7 18 02 FB | 	rdlong	arg04, fp
330ac     0C FB 81 F1 | 	sub	result1, arg04
330b0     04 4E 85 F1 | 	sub	fp, #4
330b4     A7 FA 61 FC | 	wrlong	result1, fp
330b8     28 4E 85 F1 | 	sub	fp, #40
330bc                 | LR__4943
330bc     18 4E 05 F1 | 	add	fp, #24
330c0     A7 18 02 FB | 	rdlong	arg04, fp
330c4     01 18 06 F1 | 	add	arg04, #1
330c8     0C 13 C2 FA | 	rdbyte	arg01, arg04
330cc     18 4E 05 F1 | 	add	fp, #24
330d0     A7 14 02 FB | 	rdlong	arg02, fp
330d4     10 4E 85 F1 | 	sub	fp, #16
330d8     A7 16 02 FB | 	rdlong	arg03, fp
330dc     08 4E 05 F1 | 	add	fp, #8
330e0     A7 18 02 FB | 	rdlong	arg04, fp
330e4     28 4E 85 F1 | 	sub	fp, #40
330e8     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
330ec     00 FA 0D F2 | 	cmp	result1, #0 wz
330f0     1C 00 90 AD |  if_e	jmp	#LR__4944
330f4     04 4E 05 F1 | 	add	fp, #4
330f8     A7 26 02 FB | 	rdlong	local01, fp
330fc     04 4E 85 F1 | 	sub	fp, #4
33100     11 26 06 F1 | 	add	local01, #17
33104     13 03 48 FC | 	wrbyte	#1, local01
33108     01 FA 05 F6 | 	mov	result1, #1
3310c     48 03 90 FD | 	jmp	#LR__4953
33110                 | LR__4944
33110     04 4E 05 F1 | 	add	fp, #4
33114     A7 FA 01 FB | 	rdlong	result1, fp
33118     1C FA 05 F1 | 	add	result1, #28
3311c     FD FA 01 FB | 	rdlong	result1, result1
33120     1C 4E 05 F1 | 	add	fp, #28
33124     A7 28 02 FB | 	rdlong	local02, fp
33128     14 FB 81 F1 | 	sub	result1, local02
3312c     08 4E 05 F1 | 	add	fp, #8
33130     A7 18 02 FB | 	rdlong	arg04, fp
33134     28 4E 85 F1 | 	sub	fp, #40
33138     0C FB 11 F2 | 	cmp	result1, arg04 wc
3313c     68 00 90 3D |  if_ae	jmp	#LR__4945
33140     04 4E 05 F1 | 	add	fp, #4
33144     A7 12 02 FB | 	rdlong	arg01, fp
33148     28 12 06 F1 | 	add	arg01, #40
3314c     2C 4E 05 F1 | 	add	fp, #44
33150     A7 14 02 FB | 	rdlong	arg02, fp
33154     2C 4E 85 F1 | 	sub	fp, #44
33158     A7 FA 01 FB | 	rdlong	result1, fp
3315c     1C FA 05 F1 | 	add	result1, #28
33160     FD 2A 02 FB | 	rdlong	local03, result1
33164     1C 4E 05 F1 | 	add	fp, #28
33168     A7 18 02 FB | 	rdlong	arg04, fp
3316c     20 4E 85 F1 | 	sub	fp, #32
33170     0C 2B 82 F1 | 	sub	local03, arg04
33174     09 2A 66 F0 | 	shl	local03, #9
33178     15 15 02 F1 | 	add	arg02, local03
3317c     09 16 C6 F9 | 	decod	arg03, #9
33180     EC 3B BF FD | 	call	#__system____builtin_memmove
33184     04 4E 05 F1 | 	add	fp, #4
33188     A7 18 02 FB | 	rdlong	arg04, fp
3318c     0C FB 01 F6 | 	mov	result1, arg04
33190     04 4E 85 F1 | 	sub	fp, #4
33194     10 18 06 F1 | 	add	arg04, #16
33198     0C 19 C2 FA | 	rdbyte	arg04, arg04
3319c     7F 18 06 F5 | 	and	arg04, #127
331a0     10 FA 05 F1 | 	add	result1, #16
331a4     FD 18 42 FC | 	wrbyte	arg04, result1
331a8                 | LR__4945
331a8     28 4E 05 F1 | 	add	fp, #40
331ac     A7 FA 01 FB | 	rdlong	result1, fp
331b0     09 FA 65 F0 | 	shl	result1, #9
331b4     04 4E 85 F1 | 	sub	fp, #4
331b8     A7 FA 61 FC | 	wrlong	result1, fp
331bc     24 4E 85 F1 | 	sub	fp, #36
331c0                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
331c0                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
331c0                 | ' 				}
331c0                 | ' 
331c0                 | ' 
331c0                 | ' 				wcnt =  ((UINT) 512 )  * cc;
331c0                 | ' 				continue;
331c0     74 01 90 FD | 	jmp	#LR__4949
331c4                 | LR__4946
331c4     04 4E 05 F1 | 	add	fp, #4
331c8     A7 28 02 FB | 	rdlong	local02, fp
331cc     1C 28 06 F1 | 	add	local02, #28
331d0     14 FB 01 FB | 	rdlong	result1, local02
331d4     1C 4E 05 F1 | 	add	fp, #28
331d8     A7 28 02 FB | 	rdlong	local02, fp
331dc     20 4E 85 F1 | 	sub	fp, #32
331e0     14 FB 09 F2 | 	cmp	result1, local02 wz
331e4     90 00 90 AD |  if_e	jmp	#LR__4947
331e8     04 4E 05 F1 | 	add	fp, #4
331ec     A7 FA 01 FB | 	rdlong	result1, fp
331f0     FD 2A 02 F6 | 	mov	local03, result1
331f4     04 4E 85 F1 | 	sub	fp, #4
331f8     14 2A 06 F1 | 	add	local03, #20
331fc     15 2B 02 FB | 	rdlong	local03, local03
33200     0C FA 05 F1 | 	add	result1, #12
33204     FD 2C 02 FB | 	rdlong	local04, result1
33208     16 2F 02 F6 | 	mov	local05, local04
3320c     17 2B 12 F2 | 	cmp	local03, local05 wc
33210     64 00 90 3D |  if_ae	jmp	#LR__4947
33214     18 4E 05 F1 | 	add	fp, #24
33218     A7 18 02 FB | 	rdlong	arg04, fp
3321c     01 18 06 F1 | 	add	arg04, #1
33220     0C 13 C2 FA | 	rdbyte	arg01, arg04
33224     14 4E 85 F1 | 	sub	fp, #20
33228     A7 30 02 FB | 	rdlong	local06, fp
3322c     28 30 06 F1 | 	add	local06, #40
33230     18 33 02 F6 | 	mov	local07, local06
33234     1C 4E 05 F1 | 	add	fp, #28
33238     A7 34 02 FB | 	rdlong	local08, fp
3323c     20 4E 85 F1 | 	sub	fp, #32
33240     01 36 06 F6 | 	mov	local09, #1
33244     19 15 02 F6 | 	mov	arg02, local07
33248     1A 17 02 F6 | 	mov	arg03, local08
3324c     01 18 06 F6 | 	mov	arg04, #1
33250     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
33254     FD 38 0A F6 | 	mov	local10, result1 wz
33258     1C 00 90 AD |  if_e	jmp	#LR__4947
3325c     04 4E 05 F1 | 	add	fp, #4
33260     A7 38 02 FB | 	rdlong	local10, fp
33264     04 4E 85 F1 | 	sub	fp, #4
33268     11 38 06 F1 | 	add	local10, #17
3326c     1C 03 48 FC | 	wrbyte	#1, local10
33270                 | ' 				fp->fptr < fp->obj.objsize &&
33270                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
33270                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
33270     01 FA 05 F6 | 	mov	result1, #1
33274     E0 01 90 FD | 	jmp	#LR__4953
33278                 | LR__4947
33278     04 4E 05 F1 | 	add	fp, #4
3327c     A7 18 02 FB | 	rdlong	arg04, fp
33280     1C 4E 05 F1 | 	add	fp, #28
33284     A7 FA 01 FB | 	rdlong	result1, fp
33288     20 4E 85 F1 | 	sub	fp, #32
3328c     1C 18 06 F1 | 	add	arg04, #28
33290     0C FB 61 FC | 	wrlong	result1, arg04
33294                 | LR__4948
33294     04 4E 05 F1 | 	add	fp, #4
33298     A7 FA 01 FB | 	rdlong	result1, fp
3329c     14 FA 05 F1 | 	add	result1, #20
332a0     FD FA 01 FB | 	rdlong	result1, result1
332a4     FF FB 05 F5 | 	and	result1, #511
332a8     09 3A C6 F9 | 	decod	local11, #9
332ac     FD 3A 82 F1 | 	sub	local11, result1
332b0     20 4E 05 F1 | 	add	fp, #32
332b4     A7 3A 62 FC | 	wrlong	local11, fp
332b8     18 4E 85 F1 | 	sub	fp, #24
332bc     A7 FA 01 FB | 	rdlong	result1, fp
332c0     0C 4E 85 F1 | 	sub	fp, #12
332c4     FD 3A 1A F2 | 	cmp	local11, result1 wcz
332c8     0C 4E 05 11 |  if_a	add	fp, #12
332cc     A7 3A 02 1B |  if_a	rdlong	local11, fp
332d0     18 4E 05 11 |  if_a	add	fp, #24
332d4     A7 3A 62 1C |  if_a	wrlong	local11, fp
332d8     24 4E 85 11 |  if_a	sub	fp, #36
332dc     04 4E 05 F1 | 	add	fp, #4
332e0     A7 3A 02 FB | 	rdlong	local11, fp
332e4     1D 13 02 F6 | 	mov	arg01, local11
332e8     28 12 06 F1 | 	add	arg01, #40
332ec     14 3A 06 F1 | 	add	local11, #20
332f0     1D 3B 02 FB | 	rdlong	local11, local11
332f4     FF 3B 06 F5 | 	and	local11, #511
332f8     1D 13 02 F1 | 	add	arg01, local11
332fc     2C 4E 05 F1 | 	add	fp, #44
33300     A7 14 02 FB | 	rdlong	arg02, fp
33304     0C 4E 85 F1 | 	sub	fp, #12
33308     A7 16 02 FB | 	rdlong	arg03, fp
3330c     24 4E 85 F1 | 	sub	fp, #36
33310     5C 3A BF FD | 	call	#__system____builtin_memmove
33314     04 4E 05 F1 | 	add	fp, #4
33318     A7 FA 01 FB | 	rdlong	result1, fp
3331c     FD 3A 02 F6 | 	mov	local11, result1
33320     04 4E 85 F1 | 	sub	fp, #4
33324     10 FA 05 F1 | 	add	result1, #16
33328     FD FA C1 FA | 	rdbyte	result1, result1
3332c     80 FA 45 F5 | 	or	result1, #128
33330     10 3A 06 F1 | 	add	local11, #16
33334     1D FB 41 FC | 	wrbyte	result1, local11
33338                 | LR__4949
33338     0C 4E 05 F1 | 	add	fp, #12
3333c     A7 3A 02 FB | 	rdlong	local11, fp
33340     18 4E 05 F1 | 	add	fp, #24
33344     A7 FA 01 FB | 	rdlong	result1, fp
33348     FD 3A 82 F1 | 	sub	local11, result1
3334c     18 4E 85 F1 | 	sub	fp, #24
33350     A7 3A 62 FC | 	wrlong	local11, fp
33354     04 4E 05 F1 | 	add	fp, #4
33358     A7 3C 02 FB | 	rdlong	local12, fp
3335c     1E 3B 02 FB | 	rdlong	local11, local12
33360     14 4E 05 F1 | 	add	fp, #20
33364     A7 3E 02 FB | 	rdlong	local13, fp
33368     1F 3B 02 F1 | 	add	local11, local13
3336c     1E 3B 62 FC | 	wrlong	local11, local12
33370     0C 4E 05 F1 | 	add	fp, #12
33374     A7 3A 02 FB | 	rdlong	local11, fp
33378     0C 4E 85 F1 | 	sub	fp, #12
3337c     A7 40 02 FB | 	rdlong	local14, fp
33380     20 3B 02 F1 | 	add	local11, local14
33384     0C 4E 05 F1 | 	add	fp, #12
33388     A7 3A 62 FC | 	wrlong	local11, fp
3338c     2C 4E 85 F1 | 	sub	fp, #44
33390     A7 42 02 FB | 	rdlong	local15, fp
33394     21 3B 02 F6 | 	mov	local11, local15
33398     14 42 06 F1 | 	add	local15, #20
3339c     21 43 02 FB | 	rdlong	local15, local15
333a0     20 4E 05 F1 | 	add	fp, #32
333a4     A7 44 02 FB | 	rdlong	local16, fp
333a8     22 43 02 F1 | 	add	local15, local16
333ac     14 3A 06 F1 | 	add	local11, #20
333b0     1D 43 62 FC | 	wrlong	local15, local11
333b4     20 4E 85 F1 | 	sub	fp, #32
333b8     A7 46 02 FB | 	rdlong	local17, fp
333bc     23 3B 02 F6 | 	mov	local11, local17
333c0     23 49 02 F6 | 	mov	local18, local17
333c4     04 4E 85 F1 | 	sub	fp, #4
333c8     14 46 06 F1 | 	add	local17, #20
333cc     23 4B 02 FB | 	rdlong	local19, local17
333d0     0C 48 06 F1 | 	add	local18, #12
333d4     24 4D 02 FB | 	rdlong	local20, local18
333d8     26 4B 1A F2 | 	cmp	local19, local20 wcz
333dc     24 00 90 ED |  if_be	jmp	#LR__4950
333e0     04 4E 05 F1 | 	add	fp, #4
333e4     A7 2E 02 FB | 	rdlong	local05, fp
333e8     04 4E 85 F1 | 	sub	fp, #4
333ec     17 2B 02 F6 | 	mov	local03, local05
333f0     14 2A 06 F1 | 	add	local03, #20
333f4     15 2D 02 FB | 	rdlong	local04, local03
333f8     14 2A 86 F1 | 	sub	local03, #20
333fc     16 4F 02 F6 | 	mov	local21, local04
33400     20 00 90 FD | 	jmp	#LR__4951
33404                 | LR__4950
33404     04 4E 05 F1 | 	add	fp, #4
33408     A7 32 02 FB | 	rdlong	local07, fp
3340c     04 4E 85 F1 | 	sub	fp, #4
33410     19 39 02 F6 | 	mov	local10, local07
33414     0C 38 06 F1 | 	add	local10, #12
33418     1C 35 02 FB | 	rdlong	local08, local10
3341c     0C 38 86 F1 | 	sub	local10, #12
33420     1A 4F 02 F6 | 	mov	local21, local08
33424                 | LR__4951
33424     0C 3A 06 F1 | 	add	local11, #12
33428     1D 4F 62 FC | 	wrlong	local21, local11
3342c     5C F9 9F FD | 	jmp	#LR__4933
33430                 | LR__4952
33430     04 4E 05 F1 | 	add	fp, #4
33434     A7 3C 02 FB | 	rdlong	local12, fp
33438     1E 27 02 F6 | 	mov	local01, local12
3343c     04 4E 85 F1 | 	sub	fp, #4
33440     10 3C 06 F1 | 	add	local12, #16
33444     1E 3B C2 FA | 	rdbyte	local11, local12
33448     40 3A 46 F5 | 	or	local11, #64
3344c     10 26 06 F1 | 	add	local01, #16
33450     13 3B 42 FC | 	wrbyte	local11, local01
33454                 | ' 
33454                 | ' 
33454                 | ' 
33454                 | ' 
33454                 | ' 
33454                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
33454                 | ' 		fp->flag |=  0x80 ;
33454                 | ' 
33454                 | ' 	}
33454                 | ' 
33454                 | ' 	fp->flag |=  0x40 ;
33454                 | ' 
33454                 | ' 	return FR_OK ;
33454     00 FA 05 F6 | 	mov	result1, #0
33458                 | LR__4953
33458     A7 F0 03 F6 | 	mov	ptra, fp
3345c     B2 00 A0 FD | 	call	#popregs_
33460                 | _fatfs_cc_f_write_ret
33460     2D 00 64 FD | 	ret
33464                 | 
33464                 | _fatfs_cc_f_sync
33464     00 4A 05 F6 | 	mov	COUNT_, #0
33468     A8 00 A0 FD | 	call	#pushregs_
3346c     18 F0 07 F1 | 	add	ptra, #24
33470     04 4E 05 F1 | 	add	fp, #4
33474     A7 12 62 FC | 	wrlong	arg01, fp
33478     08 4E 05 F1 | 	add	fp, #8
3347c     A7 14 02 F6 | 	mov	arg02, fp
33480     0C 4E 85 F1 | 	sub	fp, #12
33484     D0 E8 BF FD | 	call	#_fatfs_cc_validate
33488     08 4E 05 F1 | 	add	fp, #8
3348c     A7 FA 61 FC | 	wrlong	result1, fp
33490     08 4E 85 F1 | 	sub	fp, #8
33494     00 FA 0D F2 | 	cmp	result1, #0 wz
33498     C0 01 90 5D |  if_ne	jmp	#LR__4963
3349c     04 4E 05 F1 | 	add	fp, #4
334a0     A7 18 02 FB | 	rdlong	arg04, fp
334a4     04 4E 85 F1 | 	sub	fp, #4
334a8     10 18 06 F1 | 	add	arg04, #16
334ac     0C 19 C2 FA | 	rdbyte	arg04, arg04
334b0     40 18 CE F7 | 	test	arg04, #64 wz
334b4     A4 01 90 AD |  if_e	jmp	#LR__4962
334b8     04 4E 05 F1 | 	add	fp, #4
334bc     A7 18 02 FB | 	rdlong	arg04, fp
334c0     04 4E 85 F1 | 	sub	fp, #4
334c4     10 18 06 F1 | 	add	arg04, #16
334c8     0C 19 C2 FA | 	rdbyte	arg04, arg04
334cc     80 18 CE F7 | 	test	arg04, #128 wz
334d0     64 00 90 AD |  if_e	jmp	#LR__4960
334d4     0C 4E 05 F1 | 	add	fp, #12
334d8     A7 18 02 FB | 	rdlong	arg04, fp
334dc     01 18 06 F1 | 	add	arg04, #1
334e0     0C 13 C2 FA | 	rdbyte	arg01, arg04
334e4     08 4E 85 F1 | 	sub	fp, #8
334e8     A7 18 02 FB | 	rdlong	arg04, fp
334ec     0C 15 02 F6 | 	mov	arg02, arg04
334f0     28 14 06 F1 | 	add	arg02, #40
334f4     04 4E 85 F1 | 	sub	fp, #4
334f8     1C 18 06 F1 | 	add	arg04, #28
334fc     0C 17 02 FB | 	rdlong	arg03, arg04
33500     01 18 06 F6 | 	mov	arg04, #1
33504     0C AE BF FD | 	call	#_fatfs_cc_disk_write
33508     00 FA 0D F2 | 	cmp	result1, #0 wz
3350c     01 FA 05 56 |  if_ne	mov	result1, #1
33510     54 01 90 5D |  if_ne	jmp	#LR__4964
33514     04 4E 05 F1 | 	add	fp, #4
33518     A7 18 02 FB | 	rdlong	arg04, fp
3351c     0C 17 02 F6 | 	mov	arg03, arg04
33520     04 4E 85 F1 | 	sub	fp, #4
33524     10 18 06 F1 | 	add	arg04, #16
33528     0C 19 C2 FA | 	rdbyte	arg04, arg04
3352c     7F 18 06 F5 | 	and	arg04, #127
33530     10 16 06 F1 | 	add	arg03, #16
33534     0B 19 42 FC | 	wrbyte	arg04, arg03
33538                 | LR__4960
33538     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
3353c     10 4E 05 F1 | 	add	fp, #16
33540     A7 FA 61 FC | 	wrlong	result1, fp
33544     04 4E 85 F1 | 	sub	fp, #4
33548     A7 12 02 FB | 	rdlong	arg01, fp
3354c     08 4E 85 F1 | 	sub	fp, #8
33550     A7 18 02 FB | 	rdlong	arg04, fp
33554     04 4E 85 F1 | 	sub	fp, #4
33558     20 18 06 F1 | 	add	arg04, #32
3355c     0C 15 02 FB | 	rdlong	arg02, arg04
33560     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
33564     08 4E 05 F1 | 	add	fp, #8
33568     A7 FA 61 FC | 	wrlong	result1, fp
3356c     08 4E 85 F1 | 	sub	fp, #8
33570     00 FA 0D F2 | 	cmp	result1, #0 wz
33574     E4 00 90 5D |  if_ne	jmp	#LR__4961
33578     04 4E 05 F1 | 	add	fp, #4
3357c     A7 18 02 FB | 	rdlong	arg04, fp
33580     24 18 06 F1 | 	add	arg04, #36
33584     0C 19 02 FB | 	rdlong	arg04, arg04
33588     10 4E 05 F1 | 	add	fp, #16
3358c     A7 18 62 FC | 	wrlong	arg04, fp
33590     0C 17 02 F6 | 	mov	arg03, arg04
33594     0B 16 06 F1 | 	add	arg03, #11
33598     0B 17 C2 FA | 	rdbyte	arg03, arg03
3359c     20 16 46 F5 | 	or	arg03, #32
335a0     0B 18 06 F1 | 	add	arg04, #11
335a4     0C 17 42 FC | 	wrbyte	arg03, arg04
335a8     10 4E 85 F1 | 	sub	fp, #16
335ac     A7 18 02 FB | 	rdlong	arg04, fp
335b0     0C 13 02 FB | 	rdlong	arg01, arg04
335b4     10 4E 05 F1 | 	add	fp, #16
335b8     A7 14 02 FB | 	rdlong	arg02, fp
335bc     14 4E 85 F1 | 	sub	fp, #20
335c0     08 18 06 F1 | 	add	arg04, #8
335c4     0C 17 02 FB | 	rdlong	arg03, arg04
335c8     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
335cc     14 4E 05 F1 | 	add	fp, #20
335d0     A7 12 02 FB | 	rdlong	arg01, fp
335d4     1C 12 06 F1 | 	add	arg01, #28
335d8     10 4E 85 F1 | 	sub	fp, #16
335dc     A7 18 02 FB | 	rdlong	arg04, fp
335e0     0C 18 06 F1 | 	add	arg04, #12
335e4     0C 15 02 FB | 	rdlong	arg02, arg04
335e8     09 15 62 FC | 	wrlong	arg02, arg01
335ec     10 4E 05 F1 | 	add	fp, #16
335f0     A7 12 02 FB | 	rdlong	arg01, fp
335f4     16 12 06 F1 | 	add	arg01, #22
335f8     04 4E 85 F1 | 	sub	fp, #4
335fc     A7 14 02 FB | 	rdlong	arg02, fp
33600     09 15 62 FC | 	wrlong	arg02, arg01
33604     04 4E 05 F1 | 	add	fp, #4
33608     A7 12 02 FB | 	rdlong	arg01, fp
3360c     12 12 06 F1 | 	add	arg01, #18
33610     09 01 58 FC | 	wrword	#0, arg01
33614     08 4E 85 F1 | 	sub	fp, #8
33618     A7 18 02 FB | 	rdlong	arg04, fp
3361c     03 18 06 F1 | 	add	arg04, #3
33620     0C 03 48 FC | 	wrbyte	#1, arg04
33624     A7 12 02 FB | 	rdlong	arg01, fp
33628     0C 4E 85 F1 | 	sub	fp, #12
3362c     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
33630     08 4E 05 F1 | 	add	fp, #8
33634     A7 FA 61 FC | 	wrlong	result1, fp
33638     04 4E 85 F1 | 	sub	fp, #4
3363c     A7 18 02 FB | 	rdlong	arg04, fp
33640     0C 17 02 F6 | 	mov	arg03, arg04
33644     04 4E 85 F1 | 	sub	fp, #4
33648     10 18 06 F1 | 	add	arg04, #16
3364c     0C 19 C2 FA | 	rdbyte	arg04, arg04
33650     BF 18 06 F5 | 	and	arg04, #191
33654     10 16 06 F1 | 	add	arg03, #16
33658     0B 19 42 FC | 	wrbyte	arg04, arg03
3365c                 | LR__4961
3365c                 | LR__4962
3365c                 | LR__4963
3365c                 | ' 					dir = fp->dir_ptr;
3365c                 | ' 					dir[ 11 ] |=  0x20 ;
3365c                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
3365c                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
3365c                 | ' 					st_dword(dir +  22 , tm);
3365c                 | ' 					st_word(dir +  18 , 0);
3365c                 | ' 					fs->wflag = 1;
3365c                 | ' 					res = sync_fs(fs);
3365c                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
3365c                 | ' 				}
3365c                 | ' 			}
3365c                 | ' 		}
3365c                 | ' 	}
3365c                 | ' 
3365c                 | ' 	return res ;
3365c     08 4E 05 F1 | 	add	fp, #8
33660     A7 FA 01 FB | 	rdlong	result1, fp
33664     08 4E 85 F1 | 	sub	fp, #8
33668                 | LR__4964
33668     A7 F0 03 F6 | 	mov	ptra, fp
3366c     B2 00 A0 FD | 	call	#popregs_
33670                 | _fatfs_cc_f_sync_ret
33670     2D 00 64 FD | 	ret
33674                 | 
33674                 | _fatfs_cc_f_close
33674     01 4A 05 F6 | 	mov	COUNT_, #1
33678     A8 00 A0 FD | 	call	#pushregs_
3367c     10 F0 07 F1 | 	add	ptra, #16
33680     04 4E 05 F1 | 	add	fp, #4
33684     A7 12 62 FC | 	wrlong	arg01, fp
33688     04 4E 85 F1 | 	sub	fp, #4
3368c     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
33690     08 4E 05 F1 | 	add	fp, #8
33694     A7 FA 61 FC | 	wrlong	result1, fp
33698     08 4E 85 F1 | 	sub	fp, #8
3369c     00 FA 0D F2 | 	cmp	result1, #0 wz
336a0     38 00 90 5D |  if_ne	jmp	#LR__4970
336a4     04 4E 05 F1 | 	add	fp, #4
336a8     A7 12 02 FB | 	rdlong	arg01, fp
336ac     08 4E 05 F1 | 	add	fp, #8
336b0     A7 14 02 F6 | 	mov	arg02, fp
336b4     0C 4E 85 F1 | 	sub	fp, #12
336b8     9C E6 BF FD | 	call	#_fatfs_cc_validate
336bc     08 4E 05 F1 | 	add	fp, #8
336c0     A7 FA 61 FC | 	wrlong	result1, fp
336c4     08 4E 85 F1 | 	sub	fp, #8
336c8     00 FA 0D F2 | 	cmp	result1, #0 wz
336cc     04 4E 05 A1 |  if_e	add	fp, #4
336d0     A7 26 02 AB |  if_e	rdlong	local01, fp
336d4     04 4E 85 A1 |  if_e	sub	fp, #4
336d8     13 01 68 AC |  if_e	wrlong	#0, local01
336dc                 | LR__4970
336dc                 | ' 
336dc                 | ' 
336dc                 | ' 
336dc                 | ' 
336dc                 | ' 			fp->obj.fs = 0;
336dc                 | ' #line 4192 "ff.c"
336dc                 | ' 		}
336dc                 | ' 	}
336dc                 | ' 	return res;
336dc     08 4E 05 F1 | 	add	fp, #8
336e0     A7 FA 01 FB | 	rdlong	result1, fp
336e4     08 4E 85 F1 | 	sub	fp, #8
336e8     A7 F0 03 F6 | 	mov	ptra, fp
336ec     B2 00 A0 FD | 	call	#popregs_
336f0                 | _fatfs_cc_f_close_ret
336f0     2D 00 64 FD | 	ret
336f4                 | 
336f4                 | _fatfs_cc_f_lseek
336f4     00 4A 05 F6 | 	mov	COUNT_, #0
336f8     A8 00 A0 FD | 	call	#pushregs_
336fc     24 F0 07 F1 | 	add	ptra, #36
33700     04 4E 05 F1 | 	add	fp, #4
33704     A7 12 62 FC | 	wrlong	arg01, fp
33708     04 4E 05 F1 | 	add	fp, #4
3370c     A7 14 62 FC | 	wrlong	arg02, fp
33710     04 4E 85 F1 | 	sub	fp, #4
33714     A7 12 02 FB | 	rdlong	arg01, fp
33718     0C 4E 05 F1 | 	add	fp, #12
3371c     A7 14 02 F6 | 	mov	arg02, fp
33720     10 4E 85 F1 | 	sub	fp, #16
33724     30 E6 BF FD | 	call	#_fatfs_cc_validate
33728     0C 4E 05 F1 | 	add	fp, #12
3372c     A7 FA 61 FC | 	wrlong	result1, fp
33730     0C 4E 85 F1 | 	sub	fp, #12
33734     00 FA 0D F2 | 	cmp	result1, #0 wz
33738     1C 00 90 5D |  if_ne	jmp	#LR__4980
3373c     04 4E 05 F1 | 	add	fp, #4
33740     A7 18 02 FB | 	rdlong	arg04, fp
33744     11 18 06 F1 | 	add	arg04, #17
33748     0C 19 C2 FA | 	rdbyte	arg04, arg04
3374c     08 4E 05 F1 | 	add	fp, #8
33750     A7 18 62 FC | 	wrlong	arg04, fp
33754     0C 4E 85 F1 | 	sub	fp, #12
33758                 | LR__4980
33758     0C 4E 05 F1 | 	add	fp, #12
3375c     A7 18 0A FB | 	rdlong	arg04, fp wz
33760     0C 4E 85 F1 | 	sub	fp, #12
33764     0C 4E 05 51 |  if_ne	add	fp, #12
33768     A7 FA 01 5B |  if_ne	rdlong	result1, fp
3376c     0C 4E 85 51 |  if_ne	sub	fp, #12
33770     40 06 90 5D |  if_ne	jmp	#LR__5003
33774     04 4E 05 F1 | 	add	fp, #4
33778     A7 18 02 FB | 	rdlong	arg04, fp
3377c     04 4E 05 F1 | 	add	fp, #4
33780     A7 16 02 FB | 	rdlong	arg03, fp
33784     08 4E 85 F1 | 	sub	fp, #8
33788     0C 18 06 F1 | 	add	arg04, #12
3378c     0C 19 02 FB | 	rdlong	arg04, arg04
33790     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
33794     3C 00 90 ED |  if_be	jmp	#LR__4981
33798     04 4E 05 F1 | 	add	fp, #4
3379c     A7 16 02 FB | 	rdlong	arg03, fp
337a0     04 4E 85 F1 | 	sub	fp, #4
337a4     10 16 06 F1 | 	add	arg03, #16
337a8     0B 17 C2 FA | 	rdbyte	arg03, arg03
337ac     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
337b0     02 16 CE F7 | 	test	arg03, #2 wz
337b4     1C 00 90 5D |  if_ne	jmp	#LR__4981
337b8     04 4E 05 F1 | 	add	fp, #4
337bc     A7 16 02 FB | 	rdlong	arg03, fp
337c0     0C 16 06 F1 | 	add	arg03, #12
337c4     0B 17 02 FB | 	rdlong	arg03, arg03
337c8     04 4E 05 F1 | 	add	fp, #4
337cc     A7 16 62 FC | 	wrlong	arg03, fp
337d0     08 4E 85 F1 | 	sub	fp, #8
337d4                 | LR__4981
337d4     04 4E 05 F1 | 	add	fp, #4
337d8     A7 16 02 FB | 	rdlong	arg03, fp
337dc     14 16 06 F1 | 	add	arg03, #20
337e0     0B 17 02 FB | 	rdlong	arg03, arg03
337e4     1C 4E 05 F1 | 	add	fp, #28
337e8     A7 16 62 FC | 	wrlong	arg03, fp
337ec     1C 4E 85 F1 | 	sub	fp, #28
337f0     A7 16 02 FB | 	rdlong	arg03, fp
337f4     18 4E 05 F1 | 	add	fp, #24
337f8     A7 00 68 FC | 	wrlong	#0, fp
337fc     14 16 06 F1 | 	add	arg03, #20
33800     0B 01 68 FC | 	wrlong	#0, arg03
33804     14 4E 85 F1 | 	sub	fp, #20
33808     A7 16 02 FB | 	rdlong	arg03, fp
3380c     08 4E 85 F1 | 	sub	fp, #8
33810     01 16 16 F2 | 	cmp	arg03, #1 wc
33814     E4 03 90 CD |  if_b	jmp	#LR__4997
33818     10 4E 05 F1 | 	add	fp, #16
3381c     A7 16 02 FB | 	rdlong	arg03, fp
33820     0A 16 06 F1 | 	add	arg03, #10
33824     0B 19 E2 FA | 	rdword	arg04, arg03
33828     09 18 66 F0 | 	shl	arg04, #9
3382c     08 4E 05 F1 | 	add	fp, #8
33830     A7 18 62 FC | 	wrlong	arg04, fp
33834     08 4E 05 F1 | 	add	fp, #8
33838     A7 18 02 FB | 	rdlong	arg04, fp
3383c     20 4E 85 F1 | 	sub	fp, #32
33840     01 18 16 F2 | 	cmp	arg04, #1 wc
33844     AC 00 90 CD |  if_b	jmp	#LR__4982
33848     08 4E 05 F1 | 	add	fp, #8
3384c     A7 18 02 FB | 	rdlong	arg04, fp
33850     01 18 86 F1 | 	sub	arg04, #1
33854     10 4E 05 F1 | 	add	fp, #16
33858     A7 16 02 FB | 	rdlong	arg03, fp
3385c     0B 19 12 FD | 	qdiv	arg04, arg03
33860     08 4E 05 F1 | 	add	fp, #8
33864     A7 FA 01 FB | 	rdlong	result1, fp
33868     01 FA 85 F1 | 	sub	result1, #1
3386c     18 18 62 FD | 	getqx	arg04
33870     0B FB 11 FD | 	qdiv	result1, arg03
33874     20 4E 85 F1 | 	sub	fp, #32
33878     18 16 62 FD | 	getqx	arg03
3387c     0B 19 12 F2 | 	cmp	arg04, arg03 wc
33880     70 00 90 CD |  if_b	jmp	#LR__4982
33884     04 4E 05 F1 | 	add	fp, #4
33888     A7 16 02 FB | 	rdlong	arg03, fp
3388c     1C 4E 05 F1 | 	add	fp, #28
33890     A7 FA 01 FB | 	rdlong	result1, fp
33894     01 FA 85 F1 | 	sub	result1, #1
33898     08 4E 85 F1 | 	sub	fp, #8
3389c     A7 18 02 FB | 	rdlong	arg04, fp
338a0     01 18 86 F1 | 	sub	arg04, #1
338a4     0C FB 21 F5 | 	andn	result1, arg04
338a8     14 16 06 F1 | 	add	arg03, #20
338ac     0B FB 61 FC | 	wrlong	result1, arg03
338b0     10 4E 85 F1 | 	sub	fp, #16
338b4     A7 16 02 FB | 	rdlong	arg03, fp
338b8     04 4E 85 F1 | 	sub	fp, #4
338bc     A7 18 02 FB | 	rdlong	arg04, fp
338c0     14 18 06 F1 | 	add	arg04, #20
338c4     0C 19 02 FB | 	rdlong	arg04, arg04
338c8     0C 17 82 F1 | 	sub	arg03, arg04
338cc     04 4E 05 F1 | 	add	fp, #4
338d0     A7 16 62 FC | 	wrlong	arg03, fp
338d4     04 4E 85 F1 | 	sub	fp, #4
338d8     A7 16 02 FB | 	rdlong	arg03, fp
338dc     18 16 06 F1 | 	add	arg03, #24
338e0     0B 17 02 FB | 	rdlong	arg03, arg03
338e4     10 4E 05 F1 | 	add	fp, #16
338e8     A7 16 62 FC | 	wrlong	arg03, fp
338ec     14 4E 85 F1 | 	sub	fp, #20
338f0     D0 00 90 FD | 	jmp	#LR__4986
338f4                 | LR__4982
338f4     04 4E 05 F1 | 	add	fp, #4
338f8     A7 16 02 FB | 	rdlong	arg03, fp
338fc     08 16 06 F1 | 	add	arg03, #8
33900     0B 17 0A FB | 	rdlong	arg03, arg03 wz
33904     10 4E 05 F1 | 	add	fp, #16
33908     A7 16 62 FC | 	wrlong	arg03, fp
3390c     14 4E 85 F1 | 	sub	fp, #20
33910     94 00 90 5D |  if_ne	jmp	#LR__4985
33914     04 4E 05 F1 | 	add	fp, #4
33918     A7 12 02 FB | 	rdlong	arg01, fp
3391c     04 4E 85 F1 | 	sub	fp, #4
33920     00 14 06 F6 | 	mov	arg02, #0
33924     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
33928     14 4E 05 F1 | 	add	fp, #20
3392c     A7 FA 61 FC | 	wrlong	result1, fp
33930     14 4E 85 F1 | 	sub	fp, #20
33934     01 FA 0D F2 | 	cmp	result1, #1 wz
33938     1C 00 90 5D |  if_ne	jmp	#LR__4983
3393c     04 4E 05 F1 | 	add	fp, #4
33940     A7 16 02 FB | 	rdlong	arg03, fp
33944     04 4E 85 F1 | 	sub	fp, #4
33948     11 16 06 F1 | 	add	arg03, #17
3394c     0B 05 48 FC | 	wrbyte	#2, arg03
33950     02 FA 05 F6 | 	mov	result1, #2
33954     5C 04 90 FD | 	jmp	#LR__5003
33958                 | LR__4983
33958     14 4E 05 F1 | 	add	fp, #20
3395c     A7 FA 01 FB | 	rdlong	result1, fp
33960     14 4E 85 F1 | 	sub	fp, #20
33964     FF FF 7F FF 
33968     FF FB 0D F2 | 	cmp	result1, ##-1 wz
3396c     1C 00 90 5D |  if_ne	jmp	#LR__4984
33970     04 4E 05 F1 | 	add	fp, #4
33974     A7 16 02 FB | 	rdlong	arg03, fp
33978     04 4E 85 F1 | 	sub	fp, #4
3397c     11 16 06 F1 | 	add	arg03, #17
33980     0B 03 48 FC | 	wrbyte	#1, arg03
33984     01 FA 05 F6 | 	mov	result1, #1
33988     28 04 90 FD | 	jmp	#LR__5003
3398c                 | LR__4984
3398c     04 4E 05 F1 | 	add	fp, #4
33990     A7 16 02 FB | 	rdlong	arg03, fp
33994     10 4E 05 F1 | 	add	fp, #16
33998     A7 18 02 FB | 	rdlong	arg04, fp
3399c     14 4E 85 F1 | 	sub	fp, #20
339a0     08 16 06 F1 | 	add	arg03, #8
339a4     0B 19 62 FC | 	wrlong	arg04, arg03
339a8                 | LR__4985
339a8     04 4E 05 F1 | 	add	fp, #4
339ac     A7 16 02 FB | 	rdlong	arg03, fp
339b0     10 4E 05 F1 | 	add	fp, #16
339b4     A7 18 02 FB | 	rdlong	arg04, fp
339b8     14 4E 85 F1 | 	sub	fp, #20
339bc     18 16 06 F1 | 	add	arg03, #24
339c0     0B 19 62 FC | 	wrlong	arg04, arg03
339c4                 | LR__4986
339c4     14 4E 05 F1 | 	add	fp, #20
339c8     A7 16 0A FB | 	rdlong	arg03, fp wz
339cc     14 4E 85 F1 | 	sub	fp, #20
339d0     28 02 90 AD |  if_e	jmp	#LR__4996
339d4                 | ' 				while (ofs > bcs) {
339d4                 | LR__4987
339d4     08 4E 05 F1 | 	add	fp, #8
339d8     A7 18 02 FB | 	rdlong	arg04, fp
339dc     10 4E 05 F1 | 	add	fp, #16
339e0     A7 16 02 FB | 	rdlong	arg03, fp
339e4     18 4E 85 F1 | 	sub	fp, #24
339e8     0B 19 1A F2 | 	cmp	arg04, arg03 wcz
339ec     68 01 90 ED |  if_be	jmp	#LR__4993
339f0     08 4E 05 F1 | 	add	fp, #8
339f4     A7 18 02 FB | 	rdlong	arg04, fp
339f8     10 4E 05 F1 | 	add	fp, #16
339fc     A7 16 02 FB | 	rdlong	arg03, fp
33a00     0B 19 82 F1 | 	sub	arg04, arg03
33a04     10 4E 85 F1 | 	sub	fp, #16
33a08     A7 18 62 FC | 	wrlong	arg04, fp
33a0c     04 4E 85 F1 | 	sub	fp, #4
33a10     A7 18 02 FB | 	rdlong	arg04, fp
33a14     0C FB 01 F6 | 	mov	result1, arg04
33a18     14 18 06 F1 | 	add	arg04, #20
33a1c     0C 19 02 FB | 	rdlong	arg04, arg04
33a20     14 4E 05 F1 | 	add	fp, #20
33a24     A7 16 02 FB | 	rdlong	arg03, fp
33a28     0B 19 02 F1 | 	add	arg04, arg03
33a2c     14 FA 05 F1 | 	add	result1, #20
33a30     FD 18 62 FC | 	wrlong	arg04, result1
33a34     14 4E 85 F1 | 	sub	fp, #20
33a38     A7 16 02 FB | 	rdlong	arg03, fp
33a3c     04 4E 85 F1 | 	sub	fp, #4
33a40     10 16 06 F1 | 	add	arg03, #16
33a44     0B 17 C2 FA | 	rdbyte	arg03, arg03
33a48     02 16 CE F7 | 	test	arg03, #2 wz
33a4c     3C 00 90 AD |  if_e	jmp	#LR__4988
33a50     04 4E 05 F1 | 	add	fp, #4
33a54     A7 12 02 FB | 	rdlong	arg01, fp
33a58     10 4E 05 F1 | 	add	fp, #16
33a5c     A7 14 02 FB | 	rdlong	arg02, fp
33a60     14 4E 85 F1 | 	sub	fp, #20
33a64     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
33a68     14 4E 05 F1 | 	add	fp, #20
33a6c     A7 FA 61 FC | 	wrlong	result1, fp
33a70     00 FA 4D F2 | 	cmps	result1, #0 wz
33a74     14 4E 85 F1 | 	sub	fp, #20
33a78     08 4E 05 A1 |  if_e	add	fp, #8
33a7c     A7 00 68 AC |  if_e	wrlong	#0, fp
33a80     08 4E 85 A1 |  if_e	sub	fp, #8
33a84                 | ' 							ofs = 0; break;
33a84     D0 00 90 AD |  if_e	jmp	#LR__4993
33a88     24 00 90 FD | 	jmp	#LR__4989
33a8c                 | LR__4988
33a8c     04 4E 05 F1 | 	add	fp, #4
33a90     A7 12 02 FB | 	rdlong	arg01, fp
33a94     10 4E 05 F1 | 	add	fp, #16
33a98     A7 14 02 FB | 	rdlong	arg02, fp
33a9c     14 4E 85 F1 | 	sub	fp, #20
33aa0     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
33aa4     14 4E 05 F1 | 	add	fp, #20
33aa8     A7 FA 61 FC | 	wrlong	result1, fp
33aac     14 4E 85 F1 | 	sub	fp, #20
33ab0                 | LR__4989
33ab0     14 4E 05 F1 | 	add	fp, #20
33ab4     A7 16 02 FB | 	rdlong	arg03, fp
33ab8     14 4E 85 F1 | 	sub	fp, #20
33abc     FF FF 7F FF 
33ac0     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
33ac4     1C 00 90 5D |  if_ne	jmp	#LR__4990
33ac8     04 4E 05 F1 | 	add	fp, #4
33acc     A7 16 02 FB | 	rdlong	arg03, fp
33ad0     04 4E 85 F1 | 	sub	fp, #4
33ad4     11 16 06 F1 | 	add	arg03, #17
33ad8     0B 03 48 FC | 	wrbyte	#1, arg03
33adc     01 FA 05 F6 | 	mov	result1, #1
33ae0     D0 02 90 FD | 	jmp	#LR__5003
33ae4                 | LR__4990
33ae4     14 4E 05 F1 | 	add	fp, #20
33ae8     A7 16 02 FB | 	rdlong	arg03, fp
33aec     14 4E 85 F1 | 	sub	fp, #20
33af0     02 16 16 F2 | 	cmp	arg03, #2 wc
33af4     24 00 90 CD |  if_b	jmp	#LR__4991
33af8     10 4E 05 F1 | 	add	fp, #16
33afc     A7 18 02 FB | 	rdlong	arg04, fp
33b00     04 4E 05 F1 | 	add	fp, #4
33b04     A7 16 02 FB | 	rdlong	arg03, fp
33b08     14 4E 85 F1 | 	sub	fp, #20
33b0c     18 18 06 F1 | 	add	arg04, #24
33b10     0C 19 02 FB | 	rdlong	arg04, arg04
33b14     0C 17 12 F2 | 	cmp	arg03, arg04 wc
33b18     1C 00 90 CD |  if_b	jmp	#LR__4992
33b1c                 | LR__4991
33b1c     04 4E 05 F1 | 	add	fp, #4
33b20     A7 16 02 FB | 	rdlong	arg03, fp
33b24     04 4E 85 F1 | 	sub	fp, #4
33b28     11 16 06 F1 | 	add	arg03, #17
33b2c     0B 05 48 FC | 	wrbyte	#2, arg03
33b30     02 FA 05 F6 | 	mov	result1, #2
33b34     7C 02 90 FD | 	jmp	#LR__5003
33b38                 | LR__4992
33b38     04 4E 05 F1 | 	add	fp, #4
33b3c     A7 18 02 FB | 	rdlong	arg04, fp
33b40     10 4E 05 F1 | 	add	fp, #16
33b44     A7 16 02 FB | 	rdlong	arg03, fp
33b48     14 4E 85 F1 | 	sub	fp, #20
33b4c     18 18 06 F1 | 	add	arg04, #24
33b50     0C 17 62 FC | 	wrlong	arg03, arg04
33b54     7C FE 9F FD | 	jmp	#LR__4987
33b58                 | LR__4993
33b58     04 4E 05 F1 | 	add	fp, #4
33b5c     A7 16 02 FB | 	rdlong	arg03, fp
33b60     0B 13 02 F6 | 	mov	arg01, arg03
33b64     14 16 06 F1 | 	add	arg03, #20
33b68     0B 15 02 FB | 	rdlong	arg02, arg03
33b6c     04 4E 05 F1 | 	add	fp, #4
33b70     A7 16 02 FB | 	rdlong	arg03, fp
33b74     0B 15 02 F1 | 	add	arg02, arg03
33b78     14 12 06 F1 | 	add	arg01, #20
33b7c     09 15 62 FC | 	wrlong	arg02, arg01
33b80     A7 16 02 FB | 	rdlong	arg03, fp
33b84     08 4E 85 F1 | 	sub	fp, #8
33b88     FF 17 CE F7 | 	test	arg03, #511 wz
33b8c     6C 00 90 AD |  if_e	jmp	#LR__4995
33b90     10 4E 05 F1 | 	add	fp, #16
33b94     A7 12 02 FB | 	rdlong	arg01, fp
33b98     04 4E 05 F1 | 	add	fp, #4
33b9c     A7 14 02 FB | 	rdlong	arg02, fp
33ba0     14 4E 85 F1 | 	sub	fp, #20
33ba4     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
33ba8     1C 4E 05 F1 | 	add	fp, #28
33bac     A7 FA 61 FC | 	wrlong	result1, fp
33bb0     1C 4E 85 F1 | 	sub	fp, #28
33bb4     00 FA 0D F2 | 	cmp	result1, #0 wz
33bb8     1C 00 90 5D |  if_ne	jmp	#LR__4994
33bbc     04 4E 05 F1 | 	add	fp, #4
33bc0     A7 16 02 FB | 	rdlong	arg03, fp
33bc4     04 4E 85 F1 | 	sub	fp, #4
33bc8     11 16 06 F1 | 	add	arg03, #17
33bcc     0B 05 48 FC | 	wrbyte	#2, arg03
33bd0     02 FA 05 F6 | 	mov	result1, #2
33bd4     DC 01 90 FD | 	jmp	#LR__5003
33bd8                 | LR__4994
33bd8     1C 4E 05 F1 | 	add	fp, #28
33bdc     A7 18 02 FB | 	rdlong	arg04, fp
33be0     14 4E 85 F1 | 	sub	fp, #20
33be4     A7 16 02 FB | 	rdlong	arg03, fp
33be8     09 16 46 F0 | 	shr	arg03, #9
33bec     0B 19 02 F1 | 	add	arg04, arg03
33bf0     14 4E 05 F1 | 	add	fp, #20
33bf4     A7 18 62 FC | 	wrlong	arg04, fp
33bf8     1C 4E 85 F1 | 	sub	fp, #28
33bfc                 | LR__4995
33bfc                 | LR__4996
33bfc                 | LR__4997
33bfc     04 4E 05 F1 | 	add	fp, #4
33c00     A7 18 02 FB | 	rdlong	arg04, fp
33c04     0C 17 02 F6 | 	mov	arg03, arg04
33c08     04 4E 85 F1 | 	sub	fp, #4
33c0c     14 16 06 F1 | 	add	arg03, #20
33c10     0B 17 02 FB | 	rdlong	arg03, arg03
33c14     0C 18 06 F1 | 	add	arg04, #12
33c18     0C 19 02 FB | 	rdlong	arg04, arg04
33c1c     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
33c20     3C 00 90 ED |  if_be	jmp	#LR__4998
33c24     04 4E 05 F1 | 	add	fp, #4
33c28     A7 18 02 FB | 	rdlong	arg04, fp
33c2c     0C 17 02 F6 | 	mov	arg03, arg04
33c30     14 18 06 F1 | 	add	arg04, #20
33c34     0C 19 02 FB | 	rdlong	arg04, arg04
33c38     0C 16 06 F1 | 	add	arg03, #12
33c3c     0B 19 62 FC | 	wrlong	arg04, arg03
33c40     A7 18 02 FB | 	rdlong	arg04, fp
33c44     0C 17 02 F6 | 	mov	arg03, arg04
33c48     04 4E 85 F1 | 	sub	fp, #4
33c4c     10 18 06 F1 | 	add	arg04, #16
33c50     0C 19 C2 FA | 	rdbyte	arg04, arg04
33c54     40 18 46 F5 | 	or	arg04, #64
33c58     10 16 06 F1 | 	add	arg03, #16
33c5c     0B 19 42 FC | 	wrbyte	arg04, arg03
33c60                 | LR__4998
33c60     04 4E 05 F1 | 	add	fp, #4
33c64     A7 16 02 FB | 	rdlong	arg03, fp
33c68     04 4E 85 F1 | 	sub	fp, #4
33c6c     14 16 06 F1 | 	add	arg03, #20
33c70     0B 17 02 FB | 	rdlong	arg03, arg03
33c74     FF 17 CE F7 | 	test	arg03, #511 wz
33c78     2C 01 90 AD |  if_e	jmp	#LR__5002
33c7c     04 4E 05 F1 | 	add	fp, #4
33c80     A7 18 02 FB | 	rdlong	arg04, fp
33c84     18 4E 05 F1 | 	add	fp, #24
33c88     A7 16 02 FB | 	rdlong	arg03, fp
33c8c     1C 4E 85 F1 | 	sub	fp, #28
33c90     1C 18 06 F1 | 	add	arg04, #28
33c94     0C 19 02 FB | 	rdlong	arg04, arg04
33c98     0C 17 0A F2 | 	cmp	arg03, arg04 wz
33c9c     08 01 90 AD |  if_e	jmp	#LR__5002
33ca0     04 4E 05 F1 | 	add	fp, #4
33ca4     A7 16 02 FB | 	rdlong	arg03, fp
33ca8     04 4E 85 F1 | 	sub	fp, #4
33cac     10 16 06 F1 | 	add	arg03, #16
33cb0     0B 17 C2 FA | 	rdbyte	arg03, arg03
33cb4     80 16 CE F7 | 	test	arg03, #128 wz
33cb8     7C 00 90 AD |  if_e	jmp	#LR__5000
33cbc     10 4E 05 F1 | 	add	fp, #16
33cc0     A7 16 02 FB | 	rdlong	arg03, fp
33cc4     01 16 06 F1 | 	add	arg03, #1
33cc8     0B 13 C2 FA | 	rdbyte	arg01, arg03
33ccc     0C 4E 85 F1 | 	sub	fp, #12
33cd0     A7 16 02 FB | 	rdlong	arg03, fp
33cd4     0B 15 02 F6 | 	mov	arg02, arg03
33cd8     28 14 06 F1 | 	add	arg02, #40
33cdc     04 4E 85 F1 | 	sub	fp, #4
33ce0     1C 16 06 F1 | 	add	arg03, #28
33ce4     0B 17 02 FB | 	rdlong	arg03, arg03
33ce8     01 18 06 F6 | 	mov	arg04, #1
33cec     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
33cf0     00 FA 0D F2 | 	cmp	result1, #0 wz
33cf4     1C 00 90 AD |  if_e	jmp	#LR__4999
33cf8     04 4E 05 F1 | 	add	fp, #4
33cfc     A7 16 02 FB | 	rdlong	arg03, fp
33d00     04 4E 85 F1 | 	sub	fp, #4
33d04     11 16 06 F1 | 	add	arg03, #17
33d08     0B 03 48 FC | 	wrbyte	#1, arg03
33d0c     01 FA 05 F6 | 	mov	result1, #1
33d10     A0 00 90 FD | 	jmp	#LR__5003
33d14                 | LR__4999
33d14     04 4E 05 F1 | 	add	fp, #4
33d18     A7 18 02 FB | 	rdlong	arg04, fp
33d1c     0C 17 02 F6 | 	mov	arg03, arg04
33d20     04 4E 85 F1 | 	sub	fp, #4
33d24     10 18 06 F1 | 	add	arg04, #16
33d28     0C 19 C2 FA | 	rdbyte	arg04, arg04
33d2c     7F 18 06 F5 | 	and	arg04, #127
33d30     10 16 06 F1 | 	add	arg03, #16
33d34     0B 19 42 FC | 	wrbyte	arg04, arg03
33d38                 | LR__5000
33d38     10 4E 05 F1 | 	add	fp, #16
33d3c     A7 16 02 FB | 	rdlong	arg03, fp
33d40     01 16 06 F1 | 	add	arg03, #1
33d44     0B 13 C2 FA | 	rdbyte	arg01, arg03
33d48     0C 4E 85 F1 | 	sub	fp, #12
33d4c     A7 14 02 FB | 	rdlong	arg02, fp
33d50     28 14 06 F1 | 	add	arg02, #40
33d54     18 4E 05 F1 | 	add	fp, #24
33d58     A7 16 02 FB | 	rdlong	arg03, fp
33d5c     1C 4E 85 F1 | 	sub	fp, #28
33d60     01 18 06 F6 | 	mov	arg04, #1
33d64     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
33d68     00 FA 0D F2 | 	cmp	result1, #0 wz
33d6c     1C 00 90 AD |  if_e	jmp	#LR__5001
33d70     04 4E 05 F1 | 	add	fp, #4
33d74     A7 16 02 FB | 	rdlong	arg03, fp
33d78     04 4E 85 F1 | 	sub	fp, #4
33d7c     11 16 06 F1 | 	add	arg03, #17
33d80     0B 03 48 FC | 	wrbyte	#1, arg03
33d84     01 FA 05 F6 | 	mov	result1, #1
33d88     28 00 90 FD | 	jmp	#LR__5003
33d8c                 | LR__5001
33d8c     04 4E 05 F1 | 	add	fp, #4
33d90     A7 18 02 FB | 	rdlong	arg04, fp
33d94     18 4E 05 F1 | 	add	fp, #24
33d98     A7 16 02 FB | 	rdlong	arg03, fp
33d9c     1C 4E 85 F1 | 	sub	fp, #28
33da0     1C 18 06 F1 | 	add	arg04, #28
33da4     0C 17 62 FC | 	wrlong	arg03, arg04
33da8                 | LR__5002
33da8                 | ' 
33da8                 | ' 			fp->sect = nsect;
33da8                 | ' 		}
33da8                 | ' 	}
33da8                 | ' 
33da8                 | ' 	return res ;
33da8     0C 4E 05 F1 | 	add	fp, #12
33dac     A7 FA 01 FB | 	rdlong	result1, fp
33db0     0C 4E 85 F1 | 	sub	fp, #12
33db4                 | LR__5003
33db4     A7 F0 03 F6 | 	mov	ptra, fp
33db8     B2 00 A0 FD | 	call	#popregs_
33dbc                 | _fatfs_cc_f_lseek_ret
33dbc     2D 00 64 FD | 	ret
33dc0                 | 
33dc0                 | _fatfs_cc_f_opendir
33dc0     01 4A 05 F6 | 	mov	COUNT_, #1
33dc4     A8 00 A0 FD | 	call	#pushregs_
33dc8     14 F0 07 F1 | 	add	ptra, #20
33dcc     04 4E 05 F1 | 	add	fp, #4
33dd0     A7 12 62 FC | 	wrlong	arg01, fp
33dd4     04 4E 05 F1 | 	add	fp, #4
33dd8     A7 14 62 FC | 	wrlong	arg02, fp
33ddc     04 4E 85 F1 | 	sub	fp, #4
33de0     A7 16 0A FB | 	rdlong	arg03, fp wz
33de4     04 4E 85 F1 | 	sub	fp, #4
33de8     09 FA 05 A6 |  if_e	mov	result1, #9
33dec     78 01 90 AD |  if_e	jmp	#LR__5016
33df0     08 4E 05 F1 | 	add	fp, #8
33df4     A7 12 02 F6 | 	mov	arg01, fp
33df8     08 4E 05 F1 | 	add	fp, #8
33dfc     A7 14 02 F6 | 	mov	arg02, fp
33e00     10 4E 85 F1 | 	sub	fp, #16
33e04     00 16 06 F6 | 	mov	arg03, #0
33e08     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
33e0c     0C 4E 05 F1 | 	add	fp, #12
33e10     A7 FA 61 FC | 	wrlong	result1, fp
33e14     0C 4E 85 F1 | 	sub	fp, #12
33e18     00 FA 0D F2 | 	cmp	result1, #0 wz
33e1c     20 01 90 5D |  if_ne	jmp	#LR__5015
33e20     04 4E 05 F1 | 	add	fp, #4
33e24     A7 16 02 FB | 	rdlong	arg03, fp
33e28     0C 4E 05 F1 | 	add	fp, #12
33e2c     A7 FA 01 FB | 	rdlong	result1, fp
33e30     0B FB 61 FC | 	wrlong	result1, arg03
33e34     0C 4E 85 F1 | 	sub	fp, #12
33e38     A7 12 02 FB | 	rdlong	arg01, fp
33e3c     04 4E 05 F1 | 	add	fp, #4
33e40     A7 14 02 FB | 	rdlong	arg02, fp
33e44     08 4E 85 F1 | 	sub	fp, #8
33e48     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
33e4c     0C 4E 05 F1 | 	add	fp, #12
33e50     A7 FA 61 FC | 	wrlong	result1, fp
33e54     0C 4E 85 F1 | 	sub	fp, #12
33e58     00 FA 0D F2 | 	cmp	result1, #0 wz
33e5c     C4 00 90 5D |  if_ne	jmp	#LR__5014
33e60     04 4E 05 F1 | 	add	fp, #4
33e64     A7 16 02 FB | 	rdlong	arg03, fp
33e68     04 4E 85 F1 | 	sub	fp, #4
33e6c     2B 16 06 F1 | 	add	arg03, #43
33e70     0B 17 C2 FA | 	rdbyte	arg03, arg03
33e74     80 16 CE F7 | 	test	arg03, #128 wz
33e78     58 00 90 5D |  if_ne	jmp	#LR__5012
33e7c     04 4E 05 F1 | 	add	fp, #4
33e80     A7 16 02 FB | 	rdlong	arg03, fp
33e84     04 4E 85 F1 | 	sub	fp, #4
33e88     06 16 06 F1 | 	add	arg03, #6
33e8c     0B 17 C2 FA | 	rdbyte	arg03, arg03
33e90     10 16 CE F7 | 	test	arg03, #16 wz
33e94     30 00 90 AD |  if_e	jmp	#LR__5010
33e98     04 4E 05 F1 | 	add	fp, #4
33e9c     A7 16 02 FB | 	rdlong	arg03, fp
33ea0     0B 27 02 F6 | 	mov	local01, arg03
33ea4     0C 4E 05 F1 | 	add	fp, #12
33ea8     A7 12 02 FB | 	rdlong	arg01, fp
33eac     10 4E 85 F1 | 	sub	fp, #16
33eb0     1C 16 06 F1 | 	add	arg03, #28
33eb4     0B 15 02 FB | 	rdlong	arg02, arg03
33eb8     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
33ebc     08 26 06 F1 | 	add	local01, #8
33ec0     13 FB 61 FC | 	wrlong	result1, local01
33ec4     0C 00 90 FD | 	jmp	#LR__5011
33ec8                 | LR__5010
33ec8     0C 4E 05 F1 | 	add	fp, #12
33ecc     A7 0A 68 FC | 	wrlong	#5, fp
33ed0     0C 4E 85 F1 | 	sub	fp, #12
33ed4                 | LR__5011
33ed4                 | LR__5012
33ed4     0C 4E 05 F1 | 	add	fp, #12
33ed8     A7 26 0A FB | 	rdlong	local01, fp wz
33edc     0C 4E 85 F1 | 	sub	fp, #12
33ee0     40 00 90 5D |  if_ne	jmp	#LR__5013
33ee4     04 4E 05 F1 | 	add	fp, #4
33ee8     A7 26 02 FB | 	rdlong	local01, fp
33eec     0C 4E 05 F1 | 	add	fp, #12
33ef0     A7 16 02 FB | 	rdlong	arg03, fp
33ef4     06 16 06 F1 | 	add	arg03, #6
33ef8     0B 17 E2 FA | 	rdword	arg03, arg03
33efc     04 26 06 F1 | 	add	local01, #4
33f00     13 17 52 FC | 	wrword	arg03, local01
33f04     0C 4E 85 F1 | 	sub	fp, #12
33f08     A7 12 02 FB | 	rdlong	arg01, fp
33f0c     04 4E 85 F1 | 	sub	fp, #4
33f10     00 14 06 F6 | 	mov	arg02, #0
33f14     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
33f18     0C 4E 05 F1 | 	add	fp, #12
33f1c     A7 FA 61 FC | 	wrlong	result1, fp
33f20     0C 4E 85 F1 | 	sub	fp, #12
33f24                 | LR__5013
33f24                 | LR__5014
33f24     0C 4E 05 F1 | 	add	fp, #12
33f28     A7 26 02 FB | 	rdlong	local01, fp
33f2c     0C 4E 85 F1 | 	sub	fp, #12
33f30     04 26 0E F2 | 	cmp	local01, #4 wz
33f34     0C 4E 05 A1 |  if_e	add	fp, #12
33f38     A7 0A 68 AC |  if_e	wrlong	#5, fp
33f3c     0C 4E 85 A1 |  if_e	sub	fp, #12
33f40                 | LR__5015
33f40     0C 4E 05 F1 | 	add	fp, #12
33f44     A7 26 0A FB | 	rdlong	local01, fp wz
33f48     0C 4E 85 F1 | 	sub	fp, #12
33f4c     04 4E 05 51 |  if_ne	add	fp, #4
33f50     A7 26 02 5B |  if_ne	rdlong	local01, fp
33f54     04 4E 85 51 |  if_ne	sub	fp, #4
33f58     13 01 68 5C |  if_ne	wrlong	#0, local01
33f5c                 | ' 
33f5c                 | ' 	return res ;
33f5c     0C 4E 05 F1 | 	add	fp, #12
33f60     A7 FA 01 FB | 	rdlong	result1, fp
33f64     0C 4E 85 F1 | 	sub	fp, #12
33f68                 | LR__5016
33f68     A7 F0 03 F6 | 	mov	ptra, fp
33f6c     B2 00 A0 FD | 	call	#popregs_
33f70                 | _fatfs_cc_f_opendir_ret
33f70     2D 00 64 FD | 	ret
33f74                 | 
33f74                 | _fatfs_cc_f_closedir
33f74     00 4A 05 F6 | 	mov	COUNT_, #0
33f78     A8 00 A0 FD | 	call	#pushregs_
33f7c     10 F0 07 F1 | 	add	ptra, #16
33f80     04 4E 05 F1 | 	add	fp, #4
33f84     A7 12 62 FC | 	wrlong	arg01, fp
33f88     08 4E 05 F1 | 	add	fp, #8
33f8c     A7 14 02 F6 | 	mov	arg02, fp
33f90     0C 4E 85 F1 | 	sub	fp, #12
33f94     C0 DD BF FD | 	call	#_fatfs_cc_validate
33f98     08 4E 05 F1 | 	add	fp, #8
33f9c     A7 FA 61 FC | 	wrlong	result1, fp
33fa0     08 4E 85 F1 | 	sub	fp, #8
33fa4     00 FA 0D F2 | 	cmp	result1, #0 wz
33fa8     04 4E 05 A1 |  if_e	add	fp, #4
33fac     A7 FA 01 AB |  if_e	rdlong	result1, fp
33fb0     04 4E 85 A1 |  if_e	sub	fp, #4
33fb4     FD 00 68 AC |  if_e	wrlong	#0, result1
33fb8                 | ' 
33fb8                 | ' 
33fb8                 | ' 
33fb8                 | ' 
33fb8                 | ' 		dp->obj.fs = 0;
33fb8                 | ' #line 4633 "ff.c"
33fb8                 | ' 	}
33fb8                 | ' 	return res;
33fb8     08 4E 05 F1 | 	add	fp, #8
33fbc     A7 FA 01 FB | 	rdlong	result1, fp
33fc0     08 4E 85 F1 | 	sub	fp, #8
33fc4     A7 F0 03 F6 | 	mov	ptra, fp
33fc8     B2 00 A0 FD | 	call	#popregs_
33fcc                 | _fatfs_cc_f_closedir_ret
33fcc     2D 00 64 FD | 	ret
33fd0                 | 
33fd0                 | _fatfs_cc_f_readdir
33fd0     00 4A 05 F6 | 	mov	COUNT_, #0
33fd4     A8 00 A0 FD | 	call	#pushregs_
33fd8     14 F0 07 F1 | 	add	ptra, #20
33fdc     04 4E 05 F1 | 	add	fp, #4
33fe0     A7 12 62 FC | 	wrlong	arg01, fp
33fe4     04 4E 05 F1 | 	add	fp, #4
33fe8     A7 14 62 FC | 	wrlong	arg02, fp
33fec     04 4E 85 F1 | 	sub	fp, #4
33ff0     A7 12 02 FB | 	rdlong	arg01, fp
33ff4     0C 4E 05 F1 | 	add	fp, #12
33ff8     A7 14 02 F6 | 	mov	arg02, fp
33ffc     10 4E 85 F1 | 	sub	fp, #16
34000     54 DD BF FD | 	call	#_fatfs_cc_validate
34004     0C 4E 05 F1 | 	add	fp, #12
34008     A7 FA 61 FC | 	wrlong	result1, fp
3400c     0C 4E 85 F1 | 	sub	fp, #12
34010     00 FA 0D F2 | 	cmp	result1, #0 wz
34014     BC 00 90 5D |  if_ne	jmp	#LR__5023
34018     08 4E 05 F1 | 	add	fp, #8
3401c     A7 FA 09 FB | 	rdlong	result1, fp wz
34020     08 4E 85 F1 | 	sub	fp, #8
34024     24 00 90 5D |  if_ne	jmp	#LR__5020
34028     04 4E 05 F1 | 	add	fp, #4
3402c     A7 12 02 FB | 	rdlong	arg01, fp
34030     04 4E 85 F1 | 	sub	fp, #4
34034     00 14 06 F6 | 	mov	arg02, #0
34038     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
3403c     0C 4E 05 F1 | 	add	fp, #12
34040     A7 FA 61 FC | 	wrlong	result1, fp
34044     0C 4E 85 F1 | 	sub	fp, #12
34048     88 00 90 FD | 	jmp	#LR__5022
3404c                 | LR__5020
3404c     04 4E 05 F1 | 	add	fp, #4
34050     A7 12 02 FB | 	rdlong	arg01, fp
34054     04 4E 85 F1 | 	sub	fp, #4
34058     00 14 06 F6 | 	mov	arg02, #0
3405c     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
34060     0C 4E 05 F1 | 	add	fp, #12
34064     A7 FA 61 FC | 	wrlong	result1, fp
34068     0C 4E 85 F1 | 	sub	fp, #12
3406c     04 FA 0D F2 | 	cmp	result1, #4 wz
34070     0C 4E 05 A1 |  if_e	add	fp, #12
34074     A7 00 68 AC |  if_e	wrlong	#0, fp
34078     0C 4E 85 A1 |  if_e	sub	fp, #12
3407c     0C 4E 05 F1 | 	add	fp, #12
34080     A7 FA 09 FB | 	rdlong	result1, fp wz
34084     0C 4E 85 F1 | 	sub	fp, #12
34088     48 00 90 5D |  if_ne	jmp	#LR__5021
3408c     04 4E 05 F1 | 	add	fp, #4
34090     A7 12 02 FB | 	rdlong	arg01, fp
34094     04 4E 05 F1 | 	add	fp, #4
34098     A7 14 02 FB | 	rdlong	arg02, fp
3409c     08 4E 85 F1 | 	sub	fp, #8
340a0     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
340a4     04 4E 05 F1 | 	add	fp, #4
340a8     A7 12 02 FB | 	rdlong	arg01, fp
340ac     04 4E 85 F1 | 	sub	fp, #4
340b0     00 14 06 F6 | 	mov	arg02, #0
340b4     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
340b8     0C 4E 05 F1 | 	add	fp, #12
340bc     A7 FA 61 FC | 	wrlong	result1, fp
340c0     0C 4E 85 F1 | 	sub	fp, #12
340c4     04 FA 0D F2 | 	cmp	result1, #4 wz
340c8     0C 4E 05 A1 |  if_e	add	fp, #12
340cc     A7 00 68 AC |  if_e	wrlong	#0, fp
340d0     0C 4E 85 A1 |  if_e	sub	fp, #12
340d4                 | LR__5021
340d4                 | LR__5022
340d4                 | LR__5023
340d4                 | ' 			}
340d4                 | ' 			;
340d4                 | ' 		}
340d4                 | ' 	}
340d4                 | ' 	return res ;
340d4     0C 4E 05 F1 | 	add	fp, #12
340d8     A7 FA 01 FB | 	rdlong	result1, fp
340dc     0C 4E 85 F1 | 	sub	fp, #12
340e0     A7 F0 03 F6 | 	mov	ptra, fp
340e4     B2 00 A0 FD | 	call	#popregs_
340e8                 | _fatfs_cc_f_readdir_ret
340e8     2D 00 64 FD | 	ret
340ec                 | 
340ec                 | _fatfs_cc_f_stat
340ec     00 4A 05 F6 | 	mov	COUNT_, #0
340f0     A8 00 A0 FD | 	call	#pushregs_
340f4     40 F0 07 F1 | 	add	ptra, #64
340f8     04 4E 05 F1 | 	add	fp, #4
340fc     A7 12 62 FC | 	wrlong	arg01, fp
34100     04 4E 05 F1 | 	add	fp, #4
34104     A7 14 62 FC | 	wrlong	arg02, fp
34108     04 4E 85 F1 | 	sub	fp, #4
3410c     A7 12 02 F6 | 	mov	arg01, fp
34110     0C 4E 05 F1 | 	add	fp, #12
34114     A7 14 02 F6 | 	mov	arg02, fp
34118     10 4E 85 F1 | 	sub	fp, #16
3411c     00 16 06 F6 | 	mov	arg03, #0
34120     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
34124     0C 4E 05 F1 | 	add	fp, #12
34128     A7 FA 61 FC | 	wrlong	result1, fp
3412c     0C 4E 85 F1 | 	sub	fp, #12
34130     00 FA 0D F2 | 	cmp	result1, #0 wz
34134     74 00 90 5D |  if_ne	jmp	#LR__5033
34138     10 4E 05 F1 | 	add	fp, #16
3413c     A7 12 02 F6 | 	mov	arg01, fp
34140     0C 4E 85 F1 | 	sub	fp, #12
34144     A7 14 02 FB | 	rdlong	arg02, fp
34148     04 4E 85 F1 | 	sub	fp, #4
3414c     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
34150     0C 4E 05 F1 | 	add	fp, #12
34154     A7 FA 61 FC | 	wrlong	result1, fp
34158     0C 4E 85 F1 | 	sub	fp, #12
3415c     00 FA 0D F2 | 	cmp	result1, #0 wz
34160     48 00 90 5D |  if_ne	jmp	#LR__5032
34164     3B 4E 05 F1 | 	add	fp, #59
34168     A7 FA C1 FA | 	rdbyte	result1, fp
3416c     3B 4E 85 F1 | 	sub	fp, #59
34170     80 FA CD F7 | 	test	result1, #128 wz
34174     0C 4E 05 51 |  if_ne	add	fp, #12
34178     A7 0C 68 5C |  if_ne	wrlong	#6, fp
3417c     0C 4E 85 51 |  if_ne	sub	fp, #12
34180     28 00 90 5D |  if_ne	jmp	#LR__5031
34184     08 4E 05 F1 | 	add	fp, #8
34188     A7 FA 09 FB | 	rdlong	result1, fp wz
3418c     08 4E 85 F1 | 	sub	fp, #8
34190     18 00 90 AD |  if_e	jmp	#LR__5030
34194     10 4E 05 F1 | 	add	fp, #16
34198     A7 12 02 F6 | 	mov	arg01, fp
3419c     08 4E 85 F1 | 	sub	fp, #8
341a0     A7 14 02 FB | 	rdlong	arg02, fp
341a4     08 4E 85 F1 | 	sub	fp, #8
341a8     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
341ac                 | LR__5030
341ac                 | LR__5031
341ac                 | LR__5032
341ac                 | LR__5033
341ac                 | ' 			}
341ac                 | ' 		}
341ac                 | ' 		;
341ac                 | ' 	}
341ac                 | ' 
341ac                 | ' 	return res ;
341ac     0C 4E 05 F1 | 	add	fp, #12
341b0     A7 FA 01 FB | 	rdlong	result1, fp
341b4     0C 4E 85 F1 | 	sub	fp, #12
341b8     A7 F0 03 F6 | 	mov	ptra, fp
341bc     B2 00 A0 FD | 	call	#popregs_
341c0                 | _fatfs_cc_f_stat_ret
341c0     2D 00 64 FD | 	ret
341c4                 | 
341c4                 | _fatfs_cc_f_unlink
341c4     00 4A 05 F6 | 	mov	COUNT_, #0
341c8     A8 00 A0 FD | 	call	#pushregs_
341cc     74 F0 07 F1 | 	add	ptra, #116
341d0     04 4E 05 F1 | 	add	fp, #4
341d4     A7 12 62 FC | 	wrlong	arg01, fp
341d8     68 4E 05 F1 | 	add	fp, #104
341dc     A7 00 68 FC | 	wrlong	#0, fp
341e0     68 4E 85 F1 | 	sub	fp, #104
341e4     A7 12 02 F6 | 	mov	arg01, fp
341e8     6C 4E 05 F1 | 	add	fp, #108
341ec     A7 14 02 F6 | 	mov	arg02, fp
341f0     70 4E 85 F1 | 	sub	fp, #112
341f4     02 16 06 F6 | 	mov	arg03, #2
341f8     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
341fc     08 4E 05 F1 | 	add	fp, #8
34200     A7 FA 61 FC | 	wrlong	result1, fp
34204     08 4E 85 F1 | 	sub	fp, #8
34208     00 FA 0D F2 | 	cmp	result1, #0 wz
3420c     E4 01 90 5D |  if_ne	jmp	#LR__5048
34210     70 4E 05 F1 | 	add	fp, #112
34214     A7 16 02 FB | 	rdlong	arg03, fp
34218     64 4E 85 F1 | 	sub	fp, #100
3421c     A7 16 62 FC | 	wrlong	arg03, fp
34220     A7 12 02 F6 | 	mov	arg01, fp
34224     08 4E 85 F1 | 	sub	fp, #8
34228     A7 14 02 FB | 	rdlong	arg02, fp
3422c     04 4E 85 F1 | 	sub	fp, #4
34230     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
34234     08 4E 05 F1 | 	add	fp, #8
34238     A7 FA 61 FC | 	wrlong	result1, fp
3423c     00 FA 4D F2 | 	cmps	result1, #0 wz
34240     08 4E 85 F1 | 	sub	fp, #8
34244     AC 01 90 5D |  if_ne	jmp	#LR__5047
34248     37 4E 05 F1 | 	add	fp, #55
3424c     A7 FA C1 FA | 	rdbyte	result1, fp
34250     37 4E 85 F1 | 	sub	fp, #55
34254     80 FA CD F7 | 	test	result1, #128 wz
34258     08 4E 05 51 |  if_ne	add	fp, #8
3425c     A7 0C 68 5C |  if_ne	wrlong	#6, fp
34260     08 4E 85 51 |  if_ne	sub	fp, #8
34264     1C 00 90 5D |  if_ne	jmp	#LR__5040
34268     12 4E 05 F1 | 	add	fp, #18
3426c     A7 FA C1 FA | 	rdbyte	result1, fp
34270     12 4E 85 F1 | 	sub	fp, #18
34274     01 FA CD F7 | 	test	result1, #1 wz
34278     08 4E 05 51 |  if_ne	add	fp, #8
3427c     A7 0E 68 5C |  if_ne	wrlong	#7, fp
34280     08 4E 85 51 |  if_ne	sub	fp, #8
34284                 | LR__5040
34284     08 4E 05 F1 | 	add	fp, #8
34288     A7 FA 09 FB | 	rdlong	result1, fp wz
3428c     08 4E 85 F1 | 	sub	fp, #8
34290     C8 00 90 5D |  if_ne	jmp	#LR__5043
34294     70 4E 05 F1 | 	add	fp, #112
34298     A7 12 02 FB | 	rdlong	arg01, fp
3429c     48 4E 85 F1 | 	sub	fp, #72
342a0     A7 14 02 FB | 	rdlong	arg02, fp
342a4     28 4E 85 F1 | 	sub	fp, #40
342a8     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
342ac     6C 4E 05 F1 | 	add	fp, #108
342b0     A7 FA 61 FC | 	wrlong	result1, fp
342b4     5A 4E 85 F1 | 	sub	fp, #90
342b8     A7 FA C1 FA | 	rdbyte	result1, fp
342bc     12 4E 85 F1 | 	sub	fp, #18
342c0     10 FA CD F7 | 	test	result1, #16 wz
342c4     94 00 90 AD |  if_e	jmp	#LR__5042
342c8     70 4E 05 F1 | 	add	fp, #112
342cc     A7 FA 01 FB | 	rdlong	result1, fp
342d0     34 4E 85 F1 | 	sub	fp, #52
342d4     A7 FA 61 FC | 	wrlong	result1, fp
342d8     30 4E 05 F1 | 	add	fp, #48
342dc     A7 16 02 FB | 	rdlong	arg03, fp
342e0     28 4E 85 F1 | 	sub	fp, #40
342e4     A7 16 62 FC | 	wrlong	arg03, fp
342e8     08 4E 85 F1 | 	sub	fp, #8
342ec     A7 12 02 F6 | 	mov	arg01, fp
342f0     3C 4E 85 F1 | 	sub	fp, #60
342f4     00 14 06 F6 | 	mov	arg02, #0
342f8     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
342fc     08 4E 05 F1 | 	add	fp, #8
34300     A7 FA 61 FC | 	wrlong	result1, fp
34304     08 4E 85 F1 | 	sub	fp, #8
34308     00 FA 0D F2 | 	cmp	result1, #0 wz
3430c     4C 00 90 5D |  if_ne	jmp	#LR__5041
34310     3C 4E 05 F1 | 	add	fp, #60
34314     A7 12 02 F6 | 	mov	arg01, fp
34318     3C 4E 85 F1 | 	sub	fp, #60
3431c     00 14 06 F6 | 	mov	arg02, #0
34320     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
34324     08 4E 05 F1 | 	add	fp, #8
34328     A7 FA 61 FC | 	wrlong	result1, fp
3432c     00 FA 4D F2 | 	cmps	result1, #0 wz
34330     08 4E 85 F1 | 	sub	fp, #8
34334     08 4E 05 A1 |  if_e	add	fp, #8
34338     A7 0E 68 AC |  if_e	wrlong	#7, fp
3433c     08 4E 85 A1 |  if_e	sub	fp, #8
34340     08 4E 05 F1 | 	add	fp, #8
34344     A7 FA 01 FB | 	rdlong	result1, fp
34348     08 4E 85 F1 | 	sub	fp, #8
3434c     04 FA 0D F2 | 	cmp	result1, #4 wz
34350     08 4E 05 A1 |  if_e	add	fp, #8
34354     A7 00 68 AC |  if_e	wrlong	#0, fp
34358     08 4E 85 A1 |  if_e	sub	fp, #8
3435c                 | LR__5041
3435c                 | LR__5042
3435c                 | LR__5043
3435c     08 4E 05 F1 | 	add	fp, #8
34360     A7 FA 09 FB | 	rdlong	result1, fp wz
34364     08 4E 85 F1 | 	sub	fp, #8
34368     88 00 90 5D |  if_ne	jmp	#LR__5046
3436c     0C 4E 05 F1 | 	add	fp, #12
34370     A7 12 02 F6 | 	mov	arg01, fp
34374     0C 4E 85 F1 | 	sub	fp, #12
34378     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
3437c     08 4E 05 F1 | 	add	fp, #8
34380     A7 FA 61 FC | 	wrlong	result1, fp
34384     08 4E 85 F1 | 	sub	fp, #8
34388     00 FA 0D F2 | 	cmp	result1, #0 wz
3438c     38 00 90 5D |  if_ne	jmp	#LR__5044
34390     6C 4E 05 F1 | 	add	fp, #108
34394     A7 FA 09 FB | 	rdlong	result1, fp wz
34398     6C 4E 85 F1 | 	sub	fp, #108
3439c     28 00 90 AD |  if_e	jmp	#LR__5044
343a0     0C 4E 05 F1 | 	add	fp, #12
343a4     A7 12 02 F6 | 	mov	arg01, fp
343a8     60 4E 05 F1 | 	add	fp, #96
343ac     A7 14 02 FB | 	rdlong	arg02, fp
343b0     6C 4E 85 F1 | 	sub	fp, #108
343b4     00 16 06 F6 | 	mov	arg03, #0
343b8     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
343bc     08 4E 05 F1 | 	add	fp, #8
343c0     A7 FA 61 FC | 	wrlong	result1, fp
343c4     08 4E 85 F1 | 	sub	fp, #8
343c8                 | LR__5044
343c8     08 4E 05 F1 | 	add	fp, #8
343cc     A7 FA 09 FB | 	rdlong	result1, fp wz
343d0     08 4E 85 F1 | 	sub	fp, #8
343d4     1C 00 90 5D |  if_ne	jmp	#LR__5045
343d8     70 4E 05 F1 | 	add	fp, #112
343dc     A7 12 02 FB | 	rdlong	arg01, fp
343e0     70 4E 85 F1 | 	sub	fp, #112
343e4     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
343e8     08 4E 05 F1 | 	add	fp, #8
343ec     A7 FA 61 FC | 	wrlong	result1, fp
343f0     08 4E 85 F1 | 	sub	fp, #8
343f4                 | LR__5045
343f4                 | LR__5046
343f4                 | LR__5047
343f4                 | LR__5048
343f4                 | ' 			}
343f4                 | ' 		}
343f4                 | ' 		;
343f4                 | ' 	}
343f4                 | ' 
343f4                 | ' 	return res ;
343f4     08 4E 05 F1 | 	add	fp, #8
343f8     A7 FA 01 FB | 	rdlong	result1, fp
343fc     08 4E 85 F1 | 	sub	fp, #8
34400     A7 F0 03 F6 | 	mov	ptra, fp
34404     B2 00 A0 FD | 	call	#popregs_
34408                 | _fatfs_cc_f_unlink_ret
34408     2D 00 64 FD | 	ret
3440c                 | 
3440c                 | _fatfs_cc_f_mkdir
3440c     00 4A 05 F6 | 	mov	COUNT_, #0
34410     A8 00 A0 FD | 	call	#pushregs_
34414     5C F0 07 F1 | 	add	ptra, #92
34418     04 4E 05 F1 | 	add	fp, #4
3441c     A7 12 62 FC | 	wrlong	arg01, fp
34420     A7 12 02 F6 | 	mov	arg01, fp
34424     48 4E 05 F1 | 	add	fp, #72
34428     A7 14 02 F6 | 	mov	arg02, fp
3442c     4C 4E 85 F1 | 	sub	fp, #76
34430     02 16 06 F6 | 	mov	arg03, #2
34434     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
34438     08 4E 05 F1 | 	add	fp, #8
3443c     A7 FA 61 FC | 	wrlong	result1, fp
34440     08 4E 85 F1 | 	sub	fp, #8
34444     00 FA 0D F2 | 	cmp	result1, #0 wz
34448     C4 02 90 5D |  if_ne	jmp	#LR__5055
3444c     4C 4E 05 F1 | 	add	fp, #76
34450     A7 16 02 FB | 	rdlong	arg03, fp
34454     40 4E 85 F1 | 	sub	fp, #64
34458     A7 16 62 FC | 	wrlong	arg03, fp
3445c     A7 12 02 F6 | 	mov	arg01, fp
34460     08 4E 85 F1 | 	sub	fp, #8
34464     A7 14 02 FB | 	rdlong	arg02, fp
34468     04 4E 85 F1 | 	sub	fp, #4
3446c     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
34470     08 4E 05 F1 | 	add	fp, #8
34474     A7 FA 61 FC | 	wrlong	result1, fp
34478     00 FA 4D F2 | 	cmps	result1, #0 wz
3447c     08 4E 85 F1 | 	sub	fp, #8
34480     08 4E 05 A1 |  if_e	add	fp, #8
34484     A7 10 68 AC |  if_e	wrlong	#8, fp
34488     08 4E 85 A1 |  if_e	sub	fp, #8
3448c     08 4E 05 F1 | 	add	fp, #8
34490     A7 FA 01 FB | 	rdlong	result1, fp
34494     08 4E 85 F1 | 	sub	fp, #8
34498     04 FA 0D F2 | 	cmp	result1, #4 wz
3449c     70 02 90 5D |  if_ne	jmp	#LR__5054
344a0     4C 4E 05 F1 | 	add	fp, #76
344a4     A7 16 02 FB | 	rdlong	arg03, fp
344a8     10 4E 85 F1 | 	sub	fp, #16
344ac     A7 16 62 FC | 	wrlong	arg03, fp
344b0     A7 12 02 F6 | 	mov	arg01, fp
344b4     3C 4E 85 F1 | 	sub	fp, #60
344b8     00 14 06 F6 | 	mov	arg02, #0
344bc     04 AC BF FD | 	call	#_fatfs_cc_create_chain
344c0     50 4E 05 F1 | 	add	fp, #80
344c4     A7 FA 61 FC | 	wrlong	result1, fp
344c8     48 4E 85 F1 | 	sub	fp, #72
344cc     A7 00 68 FC | 	wrlong	#0, fp
344d0     48 4E 05 F1 | 	add	fp, #72
344d4     A7 FA 09 FB | 	rdlong	result1, fp wz
344d8     50 4E 85 F1 | 	sub	fp, #80
344dc     08 4E 05 A1 |  if_e	add	fp, #8
344e0     A7 0E 68 AC |  if_e	wrlong	#7, fp
344e4     08 4E 85 A1 |  if_e	sub	fp, #8
344e8     50 4E 05 F1 | 	add	fp, #80
344ec     A7 FA 01 FB | 	rdlong	result1, fp
344f0     50 4E 85 F1 | 	sub	fp, #80
344f4     01 FA 0D F2 | 	cmp	result1, #1 wz
344f8     08 4E 05 A1 |  if_e	add	fp, #8
344fc     A7 04 68 AC |  if_e	wrlong	#2, fp
34500     08 4E 85 A1 |  if_e	sub	fp, #8
34504     50 4E 05 F1 | 	add	fp, #80
34508     A7 16 02 FB | 	rdlong	arg03, fp
3450c     50 4E 85 F1 | 	sub	fp, #80
34510     FF FF 7F FF 
34514     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
34518     08 4E 05 A1 |  if_e	add	fp, #8
3451c     A7 02 68 AC |  if_e	wrlong	#1, fp
34520     08 4E 85 A1 |  if_e	sub	fp, #8
34524     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
34528     58 4E 05 F1 | 	add	fp, #88
3452c     A7 FA 61 FC | 	wrlong	result1, fp
34530     50 4E 85 F1 | 	sub	fp, #80
34534     A7 FA 09 FB | 	rdlong	result1, fp wz
34538     08 4E 85 F1 | 	sub	fp, #8
3453c     1C 01 90 5D |  if_ne	jmp	#LR__5051
34540     4C 4E 05 F1 | 	add	fp, #76
34544     A7 12 02 FB | 	rdlong	arg01, fp
34548     04 4E 05 F1 | 	add	fp, #4
3454c     A7 14 02 FB | 	rdlong	arg02, fp
34550     50 4E 85 F1 | 	sub	fp, #80
34554     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
34558     08 4E 05 F1 | 	add	fp, #8
3455c     A7 FA 61 FC | 	wrlong	result1, fp
34560     00 FA 4D F2 | 	cmps	result1, #0 wz
34564     08 4E 85 F1 | 	sub	fp, #8
34568     F0 00 90 5D |  if_ne	jmp	#LR__5050
3456c     4C 4E 05 F1 | 	add	fp, #76
34570     A7 12 02 FB | 	rdlong	arg01, fp
34574     4C 4E 85 F1 | 	sub	fp, #76
34578     34 12 06 F1 | 	add	arg01, #52
3457c     20 14 06 F6 | 	mov	arg02, #32
34580     0B 16 06 F6 | 	mov	arg03, #11
34584     98 00 A0 FD | 	call	#\builtin_bytefill_
34588     4C 4E 05 F1 | 	add	fp, #76
3458c     A7 FA 01 FB | 	rdlong	result1, fp
34590     34 FA 05 F1 | 	add	result1, #52
34594     FD 5C 48 FC | 	wrbyte	#46, result1
34598     A7 16 02 FB | 	rdlong	arg03, fp
3459c     3F 16 06 F1 | 	add	arg03, #63
345a0     0B 21 48 FC | 	wrbyte	#16, arg03
345a4     A7 12 02 FB | 	rdlong	arg01, fp
345a8     4A 12 06 F1 | 	add	arg01, #74
345ac     0C 4E 05 F1 | 	add	fp, #12
345b0     A7 14 02 FB | 	rdlong	arg02, fp
345b4     09 15 62 FC | 	wrlong	arg02, arg01
345b8     0C 4E 85 F1 | 	sub	fp, #12
345bc     A7 14 02 FB | 	rdlong	arg02, fp
345c0     0A 13 02 F6 | 	mov	arg01, arg02
345c4     34 14 06 F1 | 	add	arg02, #52
345c8     04 4E 05 F1 | 	add	fp, #4
345cc     A7 16 02 FB | 	rdlong	arg03, fp
345d0     50 4E 85 F1 | 	sub	fp, #80
345d4     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
345d8     4C 4E 05 F1 | 	add	fp, #76
345dc     A7 14 02 FB | 	rdlong	arg02, fp
345e0     0A 13 02 F6 | 	mov	arg01, arg02
345e4     54 12 06 F1 | 	add	arg01, #84
345e8     4C 4E 85 F1 | 	sub	fp, #76
345ec     34 14 06 F1 | 	add	arg02, #52
345f0     20 16 06 F6 | 	mov	arg03, #32
345f4     78 27 BF FD | 	call	#__system____builtin_memmove
345f8     4C 4E 05 F1 | 	add	fp, #76
345fc     A7 16 02 FB | 	rdlong	arg03, fp
34600     55 16 06 F1 | 	add	arg03, #85
34604     0B 5D 48 FC | 	wrbyte	#46, arg03
34608     38 4E 85 F1 | 	sub	fp, #56
3460c     A7 16 02 FB | 	rdlong	arg03, fp
34610     40 4E 05 F1 | 	add	fp, #64
34614     A7 16 62 FC | 	wrlong	arg03, fp
34618     08 4E 85 F1 | 	sub	fp, #8
3461c     A7 14 02 FB | 	rdlong	arg02, fp
34620     0A 13 02 F6 | 	mov	arg01, arg02
34624     54 14 06 F1 | 	add	arg02, #84
34628     4C 4E 85 F1 | 	sub	fp, #76
3462c     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
34630     4C 4E 05 F1 | 	add	fp, #76
34634     A7 16 02 FB | 	rdlong	arg03, fp
34638     03 16 06 F1 | 	add	arg03, #3
3463c     0B 03 48 FC | 	wrbyte	#1, arg03
34640     40 4E 85 F1 | 	sub	fp, #64
34644     A7 12 02 F6 | 	mov	arg01, fp
34648     0C 4E 85 F1 | 	sub	fp, #12
3464c     44 BA BF FD | 	call	#_fatfs_cc_dir_register
34650     08 4E 05 F1 | 	add	fp, #8
34654     A7 FA 61 FC | 	wrlong	result1, fp
34658     08 4E 85 F1 | 	sub	fp, #8
3465c                 | LR__5050
3465c                 | LR__5051
3465c     08 4E 05 F1 | 	add	fp, #8
34660     A7 FA 09 FB | 	rdlong	result1, fp wz
34664     08 4E 85 F1 | 	sub	fp, #8
34668     88 00 90 5D |  if_ne	jmp	#LR__5052
3466c     28 4E 05 F1 | 	add	fp, #40
34670     A7 12 02 FB | 	rdlong	arg01, fp
34674     16 12 06 F1 | 	add	arg01, #22
34678     30 4E 05 F1 | 	add	fp, #48
3467c     A7 14 02 FB | 	rdlong	arg02, fp
34680     09 15 62 FC | 	wrlong	arg02, arg01
34684     0C 4E 85 F1 | 	sub	fp, #12
34688     A7 12 02 FB | 	rdlong	arg01, fp
3468c     24 4E 85 F1 | 	sub	fp, #36
34690     A7 14 02 FB | 	rdlong	arg02, fp
34694     28 4E 05 F1 | 	add	fp, #40
34698     A7 16 02 FB | 	rdlong	arg03, fp
3469c     50 4E 85 F1 | 	sub	fp, #80
346a0     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
346a4     28 4E 05 F1 | 	add	fp, #40
346a8     A7 FA 01 FB | 	rdlong	result1, fp
346ac     0B FA 05 F1 | 	add	result1, #11
346b0     FD 20 48 FC | 	wrbyte	#16, result1
346b4     24 4E 05 F1 | 	add	fp, #36
346b8     A7 FA 01 FB | 	rdlong	result1, fp
346bc     03 FA 05 F1 | 	add	result1, #3
346c0     FD 02 48 FC | 	wrbyte	#1, result1
346c4     44 4E 85 F1 | 	sub	fp, #68
346c8     A7 FA 09 FB | 	rdlong	result1, fp wz
346cc     08 4E 85 F1 | 	sub	fp, #8
346d0     3C 00 90 5D |  if_ne	jmp	#LR__5053
346d4     4C 4E 05 F1 | 	add	fp, #76
346d8     A7 12 02 FB | 	rdlong	arg01, fp
346dc     4C 4E 85 F1 | 	sub	fp, #76
346e0     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
346e4     08 4E 05 F1 | 	add	fp, #8
346e8     A7 FA 61 FC | 	wrlong	result1, fp
346ec     08 4E 85 F1 | 	sub	fp, #8
346f0     1C 00 90 FD | 	jmp	#LR__5053
346f4                 | LR__5052
346f4     3C 4E 05 F1 | 	add	fp, #60
346f8     A7 12 02 F6 | 	mov	arg01, fp
346fc     14 4E 05 F1 | 	add	fp, #20
34700     A7 14 02 FB | 	rdlong	arg02, fp
34704     50 4E 85 F1 | 	sub	fp, #80
34708     00 16 06 F6 | 	mov	arg03, #0
3470c     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
34710                 | LR__5053
34710                 | LR__5054
34710                 | LR__5055
34710                 | ' 				remove_chain(&sobj, dcl, 0);
34710                 | ' 			}
34710                 | ' 		}
34710                 | ' 		;
34710                 | ' 	}
34710                 | ' 
34710                 | ' 	return res ;
34710     08 4E 05 F1 | 	add	fp, #8
34714     A7 FA 01 FB | 	rdlong	result1, fp
34718     08 4E 85 F1 | 	sub	fp, #8
3471c     A7 F0 03 F6 | 	mov	ptra, fp
34720     B2 00 A0 FD | 	call	#popregs_
34724                 | _fatfs_cc_f_mkdir_ret
34724     2D 00 64 FD | 	ret
34728                 | 
34728                 | _fatfs_cc_f_rename
34728     01 4A 05 F6 | 	mov	COUNT_, #1
3472c     A8 00 A0 FD | 	call	#pushregs_
34730     9C F0 07 F1 | 	add	ptra, #156
34734     04 4E 05 F1 | 	add	fp, #4
34738     A7 12 62 FC | 	wrlong	arg01, fp
3473c     04 4E 05 F1 | 	add	fp, #4
34740     A7 14 62 FC | 	wrlong	arg02, fp
34744     A7 12 02 F6 | 	mov	arg01, fp
34748     08 4E 85 F1 | 	sub	fp, #8
3474c     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
34750     04 4E 05 F1 | 	add	fp, #4
34754     A7 12 02 F6 | 	mov	arg01, fp
34758     6C 4E 05 F1 | 	add	fp, #108
3475c     A7 14 02 F6 | 	mov	arg02, fp
34760     70 4E 85 F1 | 	sub	fp, #112
34764     02 16 06 F6 | 	mov	arg03, #2
34768     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
3476c     0C 4E 05 F1 | 	add	fp, #12
34770     A7 FA 61 FC | 	wrlong	result1, fp
34774     0C 4E 85 F1 | 	sub	fp, #12
34778     00 FA 0D F2 | 	cmp	result1, #0 wz
3477c     44 03 90 5D |  if_ne	jmp	#LR__5073
34780     70 4E 05 F1 | 	add	fp, #112
34784     A7 16 02 FB | 	rdlong	arg03, fp
34788     60 4E 85 F1 | 	sub	fp, #96
3478c     A7 16 62 FC | 	wrlong	arg03, fp
34790     A7 12 02 F6 | 	mov	arg01, fp
34794     0C 4E 85 F1 | 	sub	fp, #12
34798     A7 14 02 FB | 	rdlong	arg02, fp
3479c     04 4E 85 F1 | 	sub	fp, #4
347a0     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
347a4     0C 4E 05 F1 | 	add	fp, #12
347a8     A7 FA 61 FC | 	wrlong	result1, fp
347ac     00 FA 4D F2 | 	cmps	result1, #0 wz
347b0     0C 4E 85 F1 | 	sub	fp, #12
347b4     1C 00 90 5D |  if_ne	jmp	#LR__5060
347b8     3B 4E 05 F1 | 	add	fp, #59
347bc     A7 FA C1 FA | 	rdbyte	result1, fp
347c0     3B 4E 85 F1 | 	sub	fp, #59
347c4     A0 FA CD F7 | 	test	result1, #160 wz
347c8     0C 4E 05 51 |  if_ne	add	fp, #12
347cc     A7 0C 68 5C |  if_ne	wrlong	#6, fp
347d0     0C 4E 85 51 |  if_ne	sub	fp, #12
347d4                 | LR__5060
347d4     0C 4E 05 F1 | 	add	fp, #12
347d8     A7 26 0A FB | 	rdlong	local01, fp wz
347dc     0C 4E 85 F1 | 	sub	fp, #12
347e0     E0 02 90 5D |  if_ne	jmp	#LR__5072
347e4     74 4E 05 F1 | 	add	fp, #116
347e8     A7 12 02 F6 | 	mov	arg01, fp
347ec     48 4E 85 F1 | 	sub	fp, #72
347f0     A7 14 02 FB | 	rdlong	arg02, fp
347f4     2C 4E 85 F1 | 	sub	fp, #44
347f8     20 16 06 F6 | 	mov	arg03, #32
347fc     70 25 BF FD | 	call	#__system____builtin_memmove
34800     40 4E 05 F1 | 	add	fp, #64
34804     A7 12 02 F6 | 	mov	arg01, fp
34808     30 4E 85 F1 | 	sub	fp, #48
3480c     A7 14 02 F6 | 	mov	arg02, fp
34810     10 4E 85 F1 | 	sub	fp, #16
34814     30 16 06 F6 | 	mov	arg03, #48
34818     54 25 BF FD | 	call	#__system____builtin_memmove
3481c     40 4E 05 F1 | 	add	fp, #64
34820     A7 12 02 F6 | 	mov	arg01, fp
34824     38 4E 85 F1 | 	sub	fp, #56
34828     A7 14 02 FB | 	rdlong	arg02, fp
3482c     08 4E 85 F1 | 	sub	fp, #8
34830     34 CA BF FD | 	call	#_fatfs_cc_follow_path
34834     0C 4E 05 F1 | 	add	fp, #12
34838     A7 FA 61 FC | 	wrlong	result1, fp
3483c     0C 4E 85 F1 | 	sub	fp, #12
34840     00 FA 0D F2 | 	cmp	result1, #0 wz
34844     4C 00 90 5D |  if_ne	jmp	#LR__5063
34848     48 4E 05 F1 | 	add	fp, #72
3484c     A7 FA 01 FB | 	rdlong	result1, fp
34850     30 4E 85 F1 | 	sub	fp, #48
34854     A7 16 02 FB | 	rdlong	arg03, fp
34858     18 4E 85 F1 | 	sub	fp, #24
3485c     0B FB 09 F2 | 	cmp	result1, arg03 wz
34860     20 00 90 5D |  if_ne	jmp	#LR__5061
34864     50 4E 05 F1 | 	add	fp, #80
34868     A7 FA 01 FB | 	rdlong	result1, fp
3486c     30 4E 85 F1 | 	sub	fp, #48
34870     A7 16 02 FB | 	rdlong	arg03, fp
34874     20 4E 85 F1 | 	sub	fp, #32
34878     0B FB 09 F2 | 	cmp	result1, arg03 wz
3487c     04 26 06 A6 |  if_e	mov	local01, #4
34880     04 00 90 AD |  if_e	jmp	#LR__5062
34884                 | LR__5061
34884     08 26 06 F6 | 	mov	local01, #8
34888                 | LR__5062
34888     0C 4E 05 F1 | 	add	fp, #12
3488c     A7 26 62 FC | 	wrlong	local01, fp
34890     0C 4E 85 F1 | 	sub	fp, #12
34894                 | LR__5063
34894     0C 4E 05 F1 | 	add	fp, #12
34898     A7 26 02 FB | 	rdlong	local01, fp
3489c     0C 4E 85 F1 | 	sub	fp, #12
348a0     04 26 0E F2 | 	cmp	local01, #4 wz
348a4     CC 01 90 5D |  if_ne	jmp	#LR__5069
348a8     40 4E 05 F1 | 	add	fp, #64
348ac     A7 12 02 F6 | 	mov	arg01, fp
348b0     40 4E 85 F1 | 	sub	fp, #64
348b4     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
348b8     0C 4E 05 F1 | 	add	fp, #12
348bc     A7 FA 61 FC | 	wrlong	result1, fp
348c0     0C 4E 85 F1 | 	sub	fp, #12
348c4     00 FA 0D F2 | 	cmp	result1, #0 wz
348c8     A8 01 90 5D |  if_ne	jmp	#LR__5068
348cc     5C 4E 05 F1 | 	add	fp, #92
348d0     A7 12 02 FB | 	rdlong	arg01, fp
348d4     38 4E 05 F1 | 	add	fp, #56
348d8     A7 12 62 FC | 	wrlong	arg01, fp
348dc     0D 12 06 F1 | 	add	arg01, #13
348e0     20 4E 85 F1 | 	sub	fp, #32
348e4     A7 14 02 F6 | 	mov	arg02, fp
348e8     74 4E 85 F1 | 	sub	fp, #116
348ec     0D 14 06 F1 | 	add	arg02, #13
348f0     13 16 06 F6 | 	mov	arg03, #19
348f4     78 24 BF FD | 	call	#__system____builtin_memmove
348f8     94 4E 05 F1 | 	add	fp, #148
348fc     A7 26 02 FB | 	rdlong	local01, fp
34900     15 4E 85 F1 | 	sub	fp, #21
34904     A7 FA C1 FA | 	rdbyte	result1, fp
34908     0B 26 06 F1 | 	add	local01, #11
3490c     13 FB 41 FC | 	wrbyte	result1, local01
34910     15 4E 05 F1 | 	add	fp, #21
34914     A7 26 02 FB | 	rdlong	local01, fp
34918     94 4E 85 F1 | 	sub	fp, #148
3491c     0B 26 06 F1 | 	add	local01, #11
34920     13 27 C2 FA | 	rdbyte	local01, local01
34924     10 26 CE F7 | 	test	local01, #16 wz
34928     24 00 90 5D |  if_ne	jmp	#LR__5064
3492c     94 4E 05 F1 | 	add	fp, #148
34930     A7 FA 01 FB | 	rdlong	result1, fp
34934     FD 26 02 F6 | 	mov	local01, result1
34938     94 4E 85 F1 | 	sub	fp, #148
3493c     0B FA 05 F1 | 	add	result1, #11
34940     FD FA C1 FA | 	rdbyte	result1, result1
34944     20 FA 45 F5 | 	or	result1, #32
34948     0B 26 06 F1 | 	add	local01, #11
3494c     13 FB 41 FC | 	wrbyte	result1, local01
34950                 | LR__5064
34950     70 4E 05 F1 | 	add	fp, #112
34954     A7 26 02 FB | 	rdlong	local01, fp
34958     03 26 06 F1 | 	add	local01, #3
3495c     13 03 48 FC | 	wrbyte	#1, local01
34960     24 4E 05 F1 | 	add	fp, #36
34964     A7 26 02 FB | 	rdlong	local01, fp
34968     94 4E 85 F1 | 	sub	fp, #148
3496c     0B 26 06 F1 | 	add	local01, #11
34970     13 27 C2 FA | 	rdbyte	local01, local01
34974     10 26 CE F7 | 	test	local01, #16 wz
34978     F8 00 90 AD |  if_e	jmp	#LR__5067
3497c     18 4E 05 F1 | 	add	fp, #24
34980     A7 16 02 FB | 	rdlong	arg03, fp
34984     30 4E 05 F1 | 	add	fp, #48
34988     A7 26 02 FB | 	rdlong	local01, fp
3498c     48 4E 85 F1 | 	sub	fp, #72
34990     13 17 0A F2 | 	cmp	arg03, local01 wz
34994     DC 00 90 AD |  if_e	jmp	#LR__5067
34998     70 4E 05 F1 | 	add	fp, #112
3499c     A7 12 02 FB | 	rdlong	arg01, fp
349a0     09 27 02 F6 | 	mov	local01, arg01
349a4     24 4E 05 F1 | 	add	fp, #36
349a8     A7 14 02 FB | 	rdlong	arg02, fp
349ac     94 4E 85 F1 | 	sub	fp, #148
349b0     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
349b4     FD 14 02 F6 | 	mov	arg02, result1
349b8     13 13 02 F6 | 	mov	arg01, local01
349bc     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
349c0     98 4E 05 F1 | 	add	fp, #152
349c4     A7 FA 61 FC | 	wrlong	result1, fp
349c8     00 FA 4D F2 | 	cmps	result1, #0 wz
349cc     98 4E 85 F1 | 	sub	fp, #152
349d0     0C 4E 05 A1 |  if_e	add	fp, #12
349d4     A7 04 68 AC |  if_e	wrlong	#2, fp
349d8     0C 4E 85 A1 |  if_e	sub	fp, #12
349dc     94 00 90 AD |  if_e	jmp	#LR__5066
349e0     70 4E 05 F1 | 	add	fp, #112
349e4     A7 12 02 FB | 	rdlong	arg01, fp
349e8     28 4E 05 F1 | 	add	fp, #40
349ec     A7 14 02 FB | 	rdlong	arg02, fp
349f0     98 4E 85 F1 | 	sub	fp, #152
349f4     4C A0 BF FD | 	call	#_fatfs_cc_move_window
349f8     0C 4E 05 F1 | 	add	fp, #12
349fc     A7 FA 61 FC | 	wrlong	result1, fp
34a00     64 4E 05 F1 | 	add	fp, #100
34a04     A7 26 02 FB | 	rdlong	local01, fp
34a08     54 26 06 F1 | 	add	local01, #84
34a0c     24 4E 05 F1 | 	add	fp, #36
34a10     A7 26 62 FC | 	wrlong	local01, fp
34a14     88 4E 85 F1 | 	sub	fp, #136
34a18     A7 26 0A FB | 	rdlong	local01, fp wz
34a1c     0C 4E 85 F1 | 	sub	fp, #12
34a20     50 00 90 5D |  if_ne	jmp	#LR__5065
34a24     94 4E 05 F1 | 	add	fp, #148
34a28     A7 26 02 FB | 	rdlong	local01, fp
34a2c     94 4E 85 F1 | 	sub	fp, #148
34a30     01 26 06 F1 | 	add	local01, #1
34a34     13 27 C2 FA | 	rdbyte	local01, local01
34a38     2E 26 0E F2 | 	cmp	local01, #46 wz
34a3c     34 00 90 5D |  if_ne	jmp	#LR__5065
34a40     70 4E 05 F1 | 	add	fp, #112
34a44     A7 12 02 FB | 	rdlong	arg01, fp
34a48     24 4E 05 F1 | 	add	fp, #36
34a4c     A7 14 02 FB | 	rdlong	arg02, fp
34a50     4C 4E 85 F1 | 	sub	fp, #76
34a54     A7 16 02 FB | 	rdlong	arg03, fp
34a58     48 4E 85 F1 | 	sub	fp, #72
34a5c     50 AD BF FD | 	call	#_fatfs_cc_st_clust
34a60     70 4E 05 F1 | 	add	fp, #112
34a64     A7 26 02 FB | 	rdlong	local01, fp
34a68     70 4E 85 F1 | 	sub	fp, #112
34a6c     03 26 06 F1 | 	add	local01, #3
34a70     13 03 48 FC | 	wrbyte	#1, local01
34a74                 | LR__5065
34a74                 | LR__5066
34a74                 | LR__5067
34a74                 | LR__5068
34a74                 | LR__5069
34a74     0C 4E 05 F1 | 	add	fp, #12
34a78     A7 26 0A FB | 	rdlong	local01, fp wz
34a7c     0C 4E 85 F1 | 	sub	fp, #12
34a80     40 00 90 5D |  if_ne	jmp	#LR__5071
34a84     10 4E 05 F1 | 	add	fp, #16
34a88     A7 12 02 F6 | 	mov	arg01, fp
34a8c     10 4E 85 F1 | 	sub	fp, #16
34a90     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
34a94     0C 4E 05 F1 | 	add	fp, #12
34a98     A7 FA 61 FC | 	wrlong	result1, fp
34a9c     0C 4E 85 F1 | 	sub	fp, #12
34aa0     00 FA 0D F2 | 	cmp	result1, #0 wz
34aa4     1C 00 90 5D |  if_ne	jmp	#LR__5070
34aa8     70 4E 05 F1 | 	add	fp, #112
34aac     A7 12 02 FB | 	rdlong	arg01, fp
34ab0     70 4E 85 F1 | 	sub	fp, #112
34ab4     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
34ab8     0C 4E 05 F1 | 	add	fp, #12
34abc     A7 FA 61 FC | 	wrlong	result1, fp
34ac0     0C 4E 85 F1 | 	sub	fp, #12
34ac4                 | LR__5070
34ac4                 | LR__5071
34ac4                 | LR__5072
34ac4                 | LR__5073
34ac4                 | ' 					res = sync_fs(fs);
34ac4                 | ' 				}
34ac4                 | ' 			}
34ac4                 | ' 
34ac4                 | ' 		}
34ac4                 | ' 		;
34ac4                 | ' 	}
34ac4                 | ' 
34ac4                 | ' 	return res ;
34ac4     0C 4E 05 F1 | 	add	fp, #12
34ac8     A7 FA 01 FB | 	rdlong	result1, fp
34acc     0C 4E 85 F1 | 	sub	fp, #12
34ad0     A7 F0 03 F6 | 	mov	ptra, fp
34ad4     B2 00 A0 FD | 	call	#popregs_
34ad8                 | _fatfs_cc_f_rename_ret
34ad8     2D 00 64 FD | 	ret
34adc                 | 
34adc                 | _fatfs_cc_time
34adc     00 4A 05 F6 | 	mov	COUNT_, #0
34ae0     A8 00 A0 FD | 	call	#pushregs_
34ae4     14 F0 07 F1 | 	add	ptra, #20
34ae8     04 4E 05 F1 | 	add	fp, #4
34aec     A7 12 62 FC | 	wrlong	arg01, fp
34af0     04 4E 05 F1 | 	add	fp, #4
34af4     A7 12 02 F6 | 	mov	arg01, fp
34af8     08 4E 85 F1 | 	sub	fp, #8
34afc     00 14 06 F6 | 	mov	arg02, #0
34b00     0C 18 B0 FD | 	call	#_fatfs_cc_gettimeofday
34b04     08 4E 05 F1 | 	add	fp, #8
34b08     A7 FA 01 FB | 	rdlong	result1, fp
34b0c     08 4E 05 F1 | 	add	fp, #8
34b10     A7 FA 61 FC | 	wrlong	result1, fp
34b14     0C 4E 85 F1 | 	sub	fp, #12
34b18     A7 FA 09 FB | 	rdlong	result1, fp wz
34b1c     04 4E 85 F1 | 	sub	fp, #4
34b20     18 00 90 AD |  if_e	jmp	#LR__5080
34b24     04 4E 05 F1 | 	add	fp, #4
34b28     A7 FA 01 FB | 	rdlong	result1, fp
34b2c     0C 4E 05 F1 | 	add	fp, #12
34b30     A7 14 02 FB | 	rdlong	arg02, fp
34b34     10 4E 85 F1 | 	sub	fp, #16
34b38     FD 14 62 FC | 	wrlong	arg02, result1
34b3c                 | LR__5080
34b3c                 | '         *tp = now;
34b3c                 | '     return now;
34b3c     10 4E 05 F1 | 	add	fp, #16
34b40     A7 FA 01 FB | 	rdlong	result1, fp
34b44     10 4E 85 F1 | 	sub	fp, #16
34b48     A7 F0 03 F6 | 	mov	ptra, fp
34b4c     B2 00 A0 FD | 	call	#popregs_
34b50                 | _fatfs_cc_time_ret
34b50     2D 00 64 FD | 	ret
34b54                 | 
34b54                 | _fatfs_cc_mktime
34b54     06 4A 05 F6 | 	mov	COUNT_, #6
34b58     A8 00 A0 FD | 	call	#pushregs_
34b5c     09 27 02 F6 | 	mov	local01, arg01
34b60     14 26 06 F1 | 	add	local01, #20
34b64     13 13 02 FB | 	rdlong	arg01, local01
34b68     14 26 86 F1 | 	sub	local01, #20
34b6c     46 12 56 F2 | 	cmps	arg01, #70 wc
34b70                 | '                 return (time_t) -1;
34b70     01 FA 65 C6 |  if_b	neg	result1, #1
34b74     7C 01 90 CD |  if_b	jmp	#LR__5094
34b78     03 00 00 FF 
34b7c     6C 29 06 F6 | 	mov	local02, ##1900
34b80     14 26 06 F1 | 	add	local01, #20
34b84     13 FB 01 FB | 	rdlong	result1, local01
34b88     FD 28 02 F1 | 	add	local02, result1
34b8c     08 26 86 F1 | 	sub	local01, #8
34b90     13 2B 02 FB | 	rdlong	local03, local01
34b94     01 2A 86 F1 | 	sub	local03, #1
34b98     04 26 06 F1 | 	add	local01, #4
34b9c     13 13 02 FB | 	rdlong	arg01, local01
34ba0     10 26 86 F1 | 	sub	local01, #16
34ba4     02 12 66 F0 | 	shl	arg01, #2
34ba8     02 00 00 FF 
34bac     C8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
34bb0     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
34bb4     09 FB 01 FB | 	rdlong	result1, arg01
34bb8     FD 2A 02 F1 | 	add	local03, result1
34bbc     14 13 02 F6 | 	mov	arg01, local02
34bc0     02 00 00 FF 
34bc4     C8 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
34bc8     EC 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
34bcc     00 FA 0D F2 | 	cmp	result1, #0 wz
34bd0     1C 00 90 AD |  if_e	jmp	#LR__5090
34bd4     00 2C 06 F6 | 	mov	local04, #0
34bd8     10 26 06 F1 | 	add	local01, #16
34bdc     13 FB 01 FB | 	rdlong	result1, local01
34be0     10 26 86 F1 | 	sub	local01, #16
34be4     02 FA 55 F2 | 	cmps	result1, #2 wc
34be8     01 2C 06 36 |  if_ae	mov	local04, #1
34bec     04 00 90 FD | 	jmp	#LR__5091
34bf0                 | LR__5090
34bf0     00 2C 06 F6 | 	mov	local04, #0
34bf4                 | LR__5091
34bf4     04 26 06 F1 | 	add	local01, #4
34bf8     13 FB 01 FB | 	rdlong	result1, local01
34bfc     04 26 86 F1 | 	sub	local01, #4
34c00     13 2F 02 FB | 	rdlong	local05, local01
34c04     08 26 06 F1 | 	add	local01, #8
34c08     13 13 02 FB | 	rdlong	arg01, local01
34c0c     07 00 00 FF 
34c10     10 12 06 FD | 	qmul	arg01, ##3600
34c14     16 2B 02 F1 | 	add	local03, local04
34c18     FD 2C 02 F6 | 	mov	local04, result1
34c1c     04 2C 66 F0 | 	shl	local04, #4
34c20     FD 2C 82 F1 | 	sub	local04, result1
34c24     02 2C 66 F0 | 	shl	local04, #2
34c28     16 2F 02 F1 | 	add	local05, local04
34c2c     08 26 86 F1 | 	sub	local01, #8
34c30     18 2C 62 FD | 	getqx	local04
34c34     A8 00 00 FF 
34c38     80 2B 06 FD | 	qmul	local03, ##86400
34c3c     16 2F 02 F1 | 	add	local05, local04
34c40     14 2B 02 F6 | 	mov	local03, local02
34c44     03 00 00 FF 
34c48     B2 2B 86 F1 | 	sub	local03, ##1970
34c4c     18 2C 62 FD | 	getqx	local04
34c50     99 F0 00 FF 
34c54     80 2B 06 FD | 	qmul	local03, ##31536000
34c58     16 2F 02 F1 | 	add	local05, local04
34c5c     14 2B 02 F6 | 	mov	local03, local02
34c60     03 00 00 FF 
34c64     B1 2B 86 F1 | 	sub	local03, ##1969
34c68     15 31 52 F6 | 	abs	local06, local03 wc
34c6c     02 30 46 F0 | 	shr	local06, #2
34c70     18 31 82 F6 | 	negc	local06, local06
34c74     03 00 00 FF 
34c78     D1 29 56 F2 | 	cmps	local02, ##2001 wc
34c7c     18 2C 62 FD | 	getqx	local04
34c80     16 2F 02 F1 | 	add	local05, local04
34c84     18 00 90 CD |  if_b	jmp	#LR__5092
34c88     03 00 00 FF 
34c8c     D0 29 86 F1 | 	sub	local02, ##2000
34c90     14 2D 52 F6 | 	abs	local04, local02 wc
34c94     64 2C 16 FD | 	qdiv	local04, #100
34c98     18 2C 62 FD | 	getqx	local04
34c9c     16 31 A2 F3 | 	sumnc	local06, local04
34ca0                 | LR__5092
34ca0     A8 00 00 FF 
34ca4     80 31 06 FD | 	qmul	local06, ##86400
34ca8     18 30 62 FD | 	getqx	local06
34cac     18 2F 02 F1 | 	add	local05, local06
34cb0     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
34cb4     02 00 00 FF 
34cb8     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
34cbc     F6 30 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
34cc0     18 2F 02 F1 | 	add	local05, local06
34cc4     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
34cc8     F6 2A 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
34ccc     02 00 00 FF 
34cd0     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
34cd4     01 2A 0E F2 | 	cmp	local03, #1 wz
34cd8     14 00 90 5D |  if_ne	jmp	#LR__5093
34cdc     13 13 02 F6 | 	mov	arg01, local01
34ce0     D8 19 B0 FD | 	call	#_fatfs_cc___indst
34ce4     00 FA 0D F2 | 	cmp	result1, #0 wz
34ce8     07 00 00 5F 
34cec     10 2E 86 51 |  if_ne	sub	local05, ##3600
34cf0                 | LR__5093
34cf0                 | '                 s -=  (3600L) ;
34cf0                 | ' 
34cf0                 | '         return s;
34cf0     17 FB 01 F6 | 	mov	result1, local05
34cf4                 | LR__5094
34cf4     A7 F0 03 F6 | 	mov	ptra, fp
34cf8     B2 00 A0 FD | 	call	#popregs_
34cfc                 | _fatfs_cc_mktime_ret
34cfc     2D 00 64 FD | 	ret
34d00                 | 
34d00                 | _fatfs_cc__gmtime_r
34d00     03 4A 05 F6 | 	mov	COUNT_, #3
34d04     A8 00 A0 FD | 	call	#pushregs_
34d08     09 27 02 FB | 	rdlong	local01, arg01
34d0c     A8 00 00 FF 
34d10     80 27 16 FD | 	qdiv	local01, ##86400
34d14     18 FA 61 FD | 	getqx	result1
34d18     04 FA 05 F1 | 	add	result1, #4
34d1c     07 FA 15 FD | 	qdiv	result1, #7
34d20     18 14 06 F1 | 	add	arg02, #24
34d24     D1 7F 27 FF 
34d28     00 26 16 F2 | 	cmp	local01, ##1325376000 wc
34d2c     D1 7F 27 3F 
34d30     00 26 86 31 |  if_ae	sub	local01, ##1325376000
34d34     03 00 00 3F 
34d38     DC 29 06 36 |  if_ae	mov	local02, ##2012
34d3c     03 00 00 CF 
34d40     B2 29 06 C6 |  if_b	mov	local02, ##1970
34d44                 | ' 	  year = 1970;
34d44                 | ' 	}
34d44                 | ' 
34d44                 | ' 	for(;;) {
34d44     19 FA 61 FD | 	getqy	result1
34d48     0A FB 61 FC | 	wrlong	result1, arg02
34d4c     18 14 86 F1 | 	sub	arg02, #24
34d50                 | LR__5100
34d50     14 13 02 F6 | 	mov	arg01, local02
34d54     60 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
34d58     00 FA 0D F2 | 	cmp	result1, #0 wz
34d5c     42 F1 00 5F 
34d60     00 2B 06 56 |  if_ne	mov	local03, ##31622400
34d64     99 F0 00 AF 
34d68     80 2B 06 A6 |  if_e	mov	local03, ##31536000
34d6c     15 27 12 F2 | 	cmp	local01, local03 wc
34d70                 | ' 	    break;
34d70     01 28 06 31 |  if_ae	add	local02, #1
34d74     15 27 82 31 |  if_ae	sub	local01, local03
34d78     D4 FF 9F 3D |  if_ae	jmp	#LR__5100
34d7c     A8 00 00 FF 
34d80     80 27 16 FD | 	qdiv	local01, ##86400
34d84     14 2B 02 F6 | 	mov	local03, local02
34d88     03 00 00 FF 
34d8c     6C 2B 86 F1 | 	sub	local03, ##1900
34d90     14 14 06 F1 | 	add	arg02, #20
34d94     0A 2B 62 FC | 	wrlong	local03, arg02
34d98     08 14 06 F1 | 	add	arg02, #8
34d9c     14 13 02 F6 | 	mov	arg01, local02
34da0     18 28 62 FD | 	getqx	local02
34da4     0A 29 62 FC | 	wrlong	local02, arg02
34da8     1C 14 86 F1 | 	sub	arg02, #28
34dac     08 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
34db0     00 FA 0D F2 | 	cmp	result1, #0 wz
34db4     1D 2A 06 56 |  if_ne	mov	local03, #29
34db8     1C 2A 06 A6 |  if_e	mov	local03, #28
34dbc     02 00 00 FF 
34dc0     9C EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
34dc4     F6 2A 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
34dc8     02 00 00 FF 
34dcc     9C EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
34dd0                 | ' 
34dd0                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
34dd0                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
34dd0     00 12 06 F6 | 	mov	arg01, #0
34dd4     97 2A 48 FB | 	callpa	#(@LR__5102-@LR__5101)>>2,fcache_load_ptr_
34dd8                 | LR__5101
34dd8     09 2B 02 F6 | 	mov	local03, arg01
34ddc     02 2A 66 F0 | 	shl	local03, #2
34de0     02 00 00 FF 
34de4     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
34de8     F6 2A 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
34dec     15 2B 02 FB | 	rdlong	local03, local03
34df0     15 29 52 F2 | 	cmps	local02, local03 wc
34df4     02 00 00 FF 
34df8     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
34dfc     2C 00 90 CD |  if_b	jmp	#LR__5103
34e00     09 2B 02 F6 | 	mov	local03, arg01
34e04     02 2A 66 F0 | 	shl	local03, #2
34e08     02 00 00 FF 
34e0c     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
34e10     F6 2A 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
34e14     15 2B 02 FB | 	rdlong	local03, local03
34e18     15 29 82 F1 | 	sub	local02, local03
34e1c     01 12 06 F1 | 	add	arg01, #1
34e20     02 00 00 FF 
34e24     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
34e28     AC FF 9F FD | 	jmp	#LR__5101
34e2c                 | LR__5102
34e2c                 | LR__5103
34e2c     A8 00 00 FF 
34e30     80 27 16 FD | 	qdiv	local01, ##86400
34e34     10 14 06 F1 | 	add	arg02, #16
34e38     0A 13 62 FC | 	wrlong	arg01, arg02
34e3c     01 28 06 F1 | 	add	local02, #1
34e40     04 14 86 F1 | 	sub	arg02, #4
34e44     0A 29 62 FC | 	wrlong	local02, arg02
34e48     19 26 62 FD | 	getqy	local01
34e4c     07 00 00 FF 
34e50     10 26 16 FD | 	qdiv	local01, ##3600
34e54     18 2A 62 FD | 	getqx	local03
34e58     07 00 00 FF 
34e5c     10 26 16 FD | 	qdiv	local01, ##3600
34e60     04 14 86 F1 | 	sub	arg02, #4
34e64     0A 2B 62 FC | 	wrlong	local03, arg02
34e68     19 26 62 FD | 	getqy	local01
34e6c     3C 26 16 FD | 	qdiv	local01, #60
34e70     18 2A 62 FD | 	getqx	local03
34e74     3C 26 16 FD | 	qdiv	local01, #60
34e78     04 14 86 F1 | 	sub	arg02, #4
34e7c     0A 2B 62 FC | 	wrlong	local03, arg02
34e80     04 14 86 F1 | 	sub	arg02, #4
34e84                 | '         stm->tm_isdst = 0;
34e84                 | ' 
34e84                 | ' ;
34e84                 | '         return stm;
34e84     0A FB 01 F6 | 	mov	result1, arg02
34e88     19 2A 62 FD | 	getqy	local03
34e8c     0A 2B 62 FC | 	wrlong	local03, arg02
34e90     20 14 06 F1 | 	add	arg02, #32
34e94     0A 01 68 FC | 	wrlong	#0, arg02
34e98     A7 F0 03 F6 | 	mov	ptra, fp
34e9c     B2 00 A0 FD | 	call	#popregs_
34ea0                 | _fatfs_cc__gmtime_r_ret
34ea0     2D 00 64 FD | 	ret
34ea4                 | 
34ea4                 | _fatfs_cc__tzset
34ea4     B4 01 00 FF 
34ea8     E5 13 06 F6 | 	mov	arg01, ##@LR__5415
34eac     34 00 B0 FD | 	call	#_fatfs_cc_getenv
34eb0     FD 12 02 F6 | 	mov	arg01, result1
34eb4     02 00 00 FF 
34eb8     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
34ebc     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
34ec0     02 00 00 FF 
34ec4     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
34ec8     3C 15 B0 FD | 	call	#_fatfs_cc___tzoffset
34ecc     02 00 00 FF 
34ed0     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
34ed4     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
34ed8     02 00 00 FF 
34edc     94 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
34ee0                 | _fatfs_cc__tzset_ret
34ee0     2D 00 64 FD | 	ret
34ee4                 | 
34ee4                 | _fatfs_cc_getenv
34ee4     06 4A 05 F6 | 	mov	COUNT_, #6
34ee8     A8 00 A0 FD | 	call	#pushregs_
34eec     09 27 02 F6 | 	mov	local01, arg01
34ef0     09 29 02 F6 | 	mov	local02, arg01
34ef4     97 06 48 FB | 	callpa	#(@LR__5111-@LR__5110)>>2,fcache_load_ptr_
34ef8                 | LR__5110
34ef8     14 FB C9 FA | 	rdbyte	result1, local02 wz
34efc     01 28 06 51 |  if_ne	add	local02, #1
34f00     F4 FF 9F 5D |  if_ne	jmp	#LR__5110
34f04                 | LR__5111
34f04     09 29 82 F1 | 	sub	local02, arg01
34f08     14 FB 01 F6 | 	mov	result1, local02
34f0c     02 00 00 FF 
34f10     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
34f14     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
34f18     02 00 00 FF 
34f1c     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
34f20                 | '             return 0;
34f20     00 FA 05 A6 |  if_e	mov	result1, #0
34f24     5C 00 90 AD |  if_e	jmp	#LR__5114
34f28                 | ' 
34f28                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
34f28     02 00 00 FF 
34f2c     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
34f30     F6 2A 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
34f34     02 00 00 FF 
34f38     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
34f3c                 | LR__5112
34f3c     15 2D 0A FB | 	rdlong	local04, local03 wz
34f40     3C 00 90 AD |  if_e	jmp	#LR__5113
34f44     16 13 02 F6 | 	mov	arg01, local04
34f48     13 15 02 F6 | 	mov	arg02, local01
34f4c     14 17 02 F6 | 	mov	arg03, local02
34f50     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
34f54     00 FA 0D F2 | 	cmp	result1, #0 wz
34f58     14 2F 02 A6 |  if_e	mov	local05, local02
34f5c     16 2F 02 A1 |  if_e	add	local05, local04
34f60     17 31 C2 AA |  if_e	rdbyte	local06, local05
34f64     3D 30 0E A2 |  if_e	cmp	local06, #61 wz
34f68                 | ' 			return name+len+1;
34f68     14 2D 02 A1 |  if_e	add	local04, local02
34f6c     01 2C 06 A1 |  if_e	add	local04, #1
34f70     16 FB 01 A6 |  if_e	mov	result1, local04
34f74     0C 00 90 AD |  if_e	jmp	#LR__5114
34f78     04 2A 06 F1 | 	add	local03, #4
34f7c     BC FF 9F FD | 	jmp	#LR__5112
34f80                 | LR__5113
34f80                 | ' 	}
34f80                 | ' 	return 0;
34f80     00 FA 05 F6 | 	mov	result1, #0
34f84                 | LR__5114
34f84     A7 F0 03 F6 | 	mov	ptra, fp
34f88     B2 00 A0 FD | 	call	#popregs_
34f8c                 | _fatfs_cc_getenv_ret
34f8c     2D 00 64 FD | 	ret
34f90                 | 
34f90                 | _fatfs_cc__get_fattime
34f90     00 4A 05 F6 | 	mov	COUNT_, #0
34f94     A8 00 A0 FD | 	call	#pushregs_
34f98     34 F0 07 F1 | 	add	ptra, #52
34f9c     00 12 06 F6 | 	mov	arg01, #0
34fa0     38 FB BF FD | 	call	#_fatfs_cc_time
34fa4     04 4E 05 F1 | 	add	fp, #4
34fa8     A7 FA 61 FC | 	wrlong	result1, fp
34fac     A7 12 02 F6 | 	mov	arg01, fp
34fb0     0C 4E 05 F1 | 	add	fp, #12
34fb4     A7 14 02 F6 | 	mov	arg02, fp
34fb8     10 4E 85 F1 | 	sub	fp, #16
34fbc     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
34fc0     24 4E 05 F1 | 	add	fp, #36
34fc4     A7 14 02 FB | 	rdlong	arg02, fp
34fc8     50 14 86 F1 | 	sub	arg02, #80
34fcc     09 14 66 F0 | 	shl	arg02, #9
34fd0     04 4E 85 F1 | 	sub	fp, #4
34fd4     A7 FA 01 FB | 	rdlong	result1, fp
34fd8     01 FA 05 F1 | 	add	result1, #1
34fdc     05 FA 65 F0 | 	shl	result1, #5
34fe0     FD 14 42 F5 | 	or	arg02, result1
34fe4     04 4E 85 F1 | 	sub	fp, #4
34fe8     A7 FA 01 FB | 	rdlong	result1, fp
34fec     FD 14 42 F5 | 	or	arg02, result1
34ff0     14 4E 85 F1 | 	sub	fp, #20
34ff4     A7 14 62 FC | 	wrlong	arg02, fp
34ff8     10 4E 05 F1 | 	add	fp, #16
34ffc     A7 14 02 FB | 	rdlong	arg02, fp
35000     0B 14 66 F0 | 	shl	arg02, #11
35004     04 4E 85 F1 | 	sub	fp, #4
35008     A7 FA 01 FB | 	rdlong	result1, fp
3500c     05 FA 65 F0 | 	shl	result1, #5
35010     FD 14 42 F5 | 	or	arg02, result1
35014     04 4E 85 F1 | 	sub	fp, #4
35018     A7 FA 01 FB | 	rdlong	result1, fp
3501c     FD 14 42 F5 | 	or	arg02, result1
35020     04 4E 85 F1 | 	sub	fp, #4
35024     A7 14 62 FC | 	wrlong	arg02, fp
35028                 | ' 
35028                 | '     now = time(0);
35028                 | '     _gmtime_r (&now, &date);
35028                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
35028                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
35028                 | '     return (ffdate << 16) | fftime;
35028     04 4E 85 F1 | 	sub	fp, #4
3502c     A7 FA 01 FB | 	rdlong	result1, fp
35030     10 FA 65 F0 | 	shl	result1, #16
35034     08 4E 85 F1 | 	sub	fp, #8
35038     0A FB 41 F5 | 	or	result1, arg02
3503c     A7 F0 03 F6 | 	mov	ptra, fp
35040     B2 00 A0 FD | 	call	#popregs_
35044                 | _fatfs_cc__get_fattime_ret
35044     2D 00 64 FD | 	ret
35048                 | 
35048                 | _fatfs_cc_unixtime_1037
35048     00 4A 05 F6 | 	mov	COUNT_, #0
3504c     A8 00 A0 FD | 	call	#pushregs_
35050     34 F0 07 F1 | 	add	ptra, #52
35054     04 4E 05 F1 | 	add	fp, #4
35058     A7 12 62 FC | 	wrlong	arg01, fp
3505c     04 4E 05 F1 | 	add	fp, #4
35060     A7 14 62 FC | 	wrlong	arg02, fp
35064     04 4E 85 F1 | 	sub	fp, #4
35068     A7 14 02 FB | 	rdlong	arg02, fp
3506c     09 14 46 F0 | 	shr	arg02, #9
35070     7F 14 06 F5 | 	and	arg02, #127
35074     50 FA 05 F6 | 	mov	result1, #80
35078     0A FB 01 F1 | 	add	result1, arg02
3507c     20 4E 05 F1 | 	add	fp, #32
35080     A7 FA 61 FC | 	wrlong	result1, fp
35084     20 4E 85 F1 | 	sub	fp, #32
35088     A7 FA 01 FB | 	rdlong	result1, fp
3508c     05 FA 45 F0 | 	shr	result1, #5
35090     FD FA 41 F8 | 	getnib	result1, result1, #0
35094     01 FA 85 F1 | 	sub	result1, #1
35098     1C 4E 05 F1 | 	add	fp, #28
3509c     A7 FA 61 FC | 	wrlong	result1, fp
350a0     1C 4E 85 F1 | 	sub	fp, #28
350a4     A7 FA 01 FB | 	rdlong	result1, fp
350a8     1F FA 05 F5 | 	and	result1, #31
350ac     18 4E 05 F1 | 	add	fp, #24
350b0     A7 FA 61 FC | 	wrlong	result1, fp
350b4     14 4E 85 F1 | 	sub	fp, #20
350b8     A7 FA 01 FB | 	rdlong	result1, fp
350bc     0B FA 45 F0 | 	shr	result1, #11
350c0     1F FA 05 F5 | 	and	result1, #31
350c4     10 4E 05 F1 | 	add	fp, #16
350c8     A7 FA 61 FC | 	wrlong	result1, fp
350cc     10 4E 85 F1 | 	sub	fp, #16
350d0     A7 FA 01 FB | 	rdlong	result1, fp
350d4     05 FA 45 F0 | 	shr	result1, #5
350d8     3F FA 05 F5 | 	and	result1, #63
350dc     0C 4E 05 F1 | 	add	fp, #12
350e0     A7 FA 61 FC | 	wrlong	result1, fp
350e4     0C 4E 85 F1 | 	sub	fp, #12
350e8     A7 14 02 FB | 	rdlong	arg02, fp
350ec     1F 14 06 F5 | 	and	arg02, #31
350f0     01 14 66 F0 | 	shl	arg02, #1
350f4     08 4E 05 F1 | 	add	fp, #8
350f8     A7 14 62 FC | 	wrlong	arg02, fp
350fc     A7 12 02 F6 | 	mov	arg01, fp
35100     10 4E 85 F1 | 	sub	fp, #16
35104     4C FA BF FD | 	call	#_fatfs_cc_mktime
35108     0C 4E 05 F1 | 	add	fp, #12
3510c     A7 FA 61 FC | 	wrlong	result1, fp
35110                 | ' 
35110                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
35110                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
35110                 | '     date.tm_mday = (dosdate & 0x1f);
35110                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
35110                 | '     date.tm_min = (dostime >> 5) & 0x3f;
35110                 | '     date.tm_sec = (dostime & 0x1f) << 1;
35110                 | ' 
35110                 | '     t = mktime(&date);
35110                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
35110                 | '     return t;
35110     0C 4E 85 F1 | 	sub	fp, #12
35114     A7 F0 03 F6 | 	mov	ptra, fp
35118     B2 00 A0 FD | 	call	#popregs_
3511c                 | _fatfs_cc_unixtime_1037_ret
3511c     2D 00 64 FD | 	ret
35120                 | 
35120                 | _fatfs_cc__set_dos_error_1039
35120     09 01 02 F6 | 	mov	_var01, arg01
35124                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
35124                 | '     switch (derr) {
35124     14 00 26 F3 | 	fle	_var01, #20
35128     30 00 62 FD | 	jmprel	_var01
3512c                 | LR__5120
3512c     50 00 90 FD | 	jmp	#LR__5121
35130     84 00 90 FD | 	jmp	#LR__5135
35134     80 00 90 FD | 	jmp	#LR__5136
35138     7C 00 90 FD | 	jmp	#LR__5137
3513c     48 00 90 FD | 	jmp	#LR__5122
35140     44 00 90 FD | 	jmp	#LR__5123
35144     40 00 90 FD | 	jmp	#LR__5124
35148     44 00 90 FD | 	jmp	#LR__5125
3514c     48 00 90 FD | 	jmp	#LR__5127
35150     54 00 90 FD | 	jmp	#LR__5130
35154     38 00 90 FD | 	jmp	#LR__5126
35158     4C 00 90 FD | 	jmp	#LR__5131
3515c     48 00 90 FD | 	jmp	#LR__5132
35160     44 00 90 FD | 	jmp	#LR__5133
35164     50 00 90 FD | 	jmp	#LR__5138
35168     4C 00 90 FD | 	jmp	#LR__5138
3516c     48 00 90 FD | 	jmp	#LR__5138
35170     2C 00 90 FD | 	jmp	#LR__5128
35174     38 00 90 FD | 	jmp	#LR__5134
35178     2C 00 90 FD | 	jmp	#LR__5129
3517c     38 00 90 FD | 	jmp	#LR__5138
35180                 | LR__5121
35180     00 02 06 F6 | 	mov	_var02, #0
35184                 | '         r = 0;
35184                 | '         break;
35184     34 00 90 FD | 	jmp	#LR__5139
35188                 | LR__5122
35188                 | LR__5123
35188                 | LR__5124
35188     04 02 06 F6 | 	mov	_var02, #4
3518c                 | '         r =  4 ;
3518c                 | '         break;
3518c     2C 00 90 FD | 	jmp	#LR__5139
35190                 | LR__5125
35190                 | LR__5126
35190     06 02 06 F6 | 	mov	_var02, #6
35194                 | '         r =  6 ;
35194                 | '         break;
35194     24 00 90 FD | 	jmp	#LR__5139
35198                 | LR__5127
35198     09 02 06 F6 | 	mov	_var02, #9
3519c                 | '         r =  9 ;
3519c                 | '         break;
3519c     1C 00 90 FD | 	jmp	#LR__5139
351a0                 | LR__5128
351a0     07 02 06 F6 | 	mov	_var02, #7
351a4                 | '         r =  7 ;
351a4                 | '         break;
351a4     14 00 90 FD | 	jmp	#LR__5139
351a8                 | LR__5129
351a8                 | LR__5130
351a8                 | LR__5131
351a8                 | LR__5132
351a8                 | LR__5133
351a8     0A 02 06 F6 | 	mov	_var02, #10
351ac                 | '         r =  10 ;
351ac                 | '         break;
351ac     0C 00 90 FD | 	jmp	#LR__5139
351b0                 | LR__5134
351b0     0B 02 06 F6 | 	mov	_var02, #11
351b4                 | '         r =  11 ;
351b4                 | '         break;
351b4     04 00 90 FD | 	jmp	#LR__5139
351b8                 | LR__5135
351b8                 | LR__5136
351b8                 | LR__5137
351b8                 | LR__5138
351b8     0C 02 06 F6 | 	mov	_var02, #12
351bc                 | '         r =  12 ;
351bc                 | '         break;
351bc                 | LR__5139
351bc                 | '     }
351bc                 | '     return _seterror(r);
351bc     00 02 4E F2 | 	cmps	_var02, #0 wz
351c0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
351c4     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
351c8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
351cc     01 FA 65 56 |  if_ne	neg	result1, #1
351d0     00 FA 05 A6 |  if_e	mov	result1, #0
351d4                 | _fatfs_cc__set_dos_error_1039_ret
351d4     2D 00 64 FD | 	ret
351d8                 | 
351d8                 | _fatfs_cc_v_creat
351d8     04 4A 05 F6 | 	mov	COUNT_, #4
351dc     A8 00 A0 FD | 	call	#pushregs_
351e0     09 27 02 F6 | 	mov	local01, arg01
351e4     0A 29 02 F6 | 	mov	local02, arg02
351e8     03 00 00 FF 
351ec     3C 12 06 F6 | 	mov	arg01, ##1596
351f0                 | '     return _gc_alloc(size);
351f0     10 14 06 F6 | 	mov	arg02, #16
351f4     28 5E BF FD | 	call	#__system___gc_doalloc
351f8     FD 2A 0A F6 | 	mov	local03, result1 wz
351fc                 | '       return _seterror( 7 );
351fc     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
35200     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
35204     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
35208     01 FA 65 A6 |  if_e	neg	result1, #1
3520c     58 00 90 AD |  if_e	jmp	#LR__5141
35210     15 13 02 F6 | 	mov	arg01, local03
35214     00 14 06 F6 | 	mov	arg02, #0
35218     03 00 00 FF 
3521c     3C 16 06 F6 | 	mov	arg03, ##1596
35220     98 00 A0 FD | 	call	#\builtin_bytefill_
35224     02 00 00 FF 
35228     14 2A 06 F1 | 	add	local03, ##1044
3522c     15 13 02 F6 | 	mov	arg01, local03
35230     02 00 00 FF 
35234     14 2A 86 F1 | 	sub	local03, ##1044
35238     14 15 02 F6 | 	mov	arg02, local02
3523c     07 16 06 F6 | 	mov	arg03, #7
35240     B4 CC BF FD | 	call	#_fatfs_cc_f_open
35244     FD 2C 0A F6 | 	mov	local04, result1 wz
35248     14 00 90 AD |  if_e	jmp	#LR__5140
3524c     15 13 02 F6 | 	mov	arg01, local03
35250                 | '     return _gc_free(ptr);
35250     D8 5E BF FD | 	call	#__system___gc_free
35254                 | '     free(f);
35254                 | '     return _set_dos_error(r);
35254     16 13 02 F6 | 	mov	arg01, local04
35258     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1039
3525c     08 00 90 FD | 	jmp	#LR__5141
35260                 | LR__5140
35260     13 2B 62 FC | 	wrlong	local03, local01
35264                 | '   }
35264                 | '   fil->vfsdata = f;
35264                 | '   return 0;
35264     00 FA 05 F6 | 	mov	result1, #0
35268                 | LR__5141
35268     A7 F0 03 F6 | 	mov	ptra, fp
3526c     B2 00 A0 FD | 	call	#popregs_
35270                 | _fatfs_cc_v_creat_ret
35270     2D 00 64 FD | 	ret
35274                 | 
35274                 | _fatfs_cc_v_close
35274     02 4A 05 F6 | 	mov	COUNT_, #2
35278     A8 00 A0 FD | 	call	#pushregs_
3527c     09 27 02 FB | 	rdlong	local01, arg01
35280     02 00 00 FF 
35284     14 26 06 F1 | 	add	local01, ##1044
35288     13 13 02 F6 | 	mov	arg01, local01
3528c     02 00 00 FF 
35290     14 26 86 F1 | 	sub	local01, ##1044
35294     DC E3 BF FD | 	call	#_fatfs_cc_f_close
35298     FD 28 02 F6 | 	mov	local02, result1
3529c     13 13 02 F6 | 	mov	arg01, local01
352a0                 | '     return _gc_free(ptr);
352a0     88 5E BF FD | 	call	#__system___gc_free
352a4                 | '     FAT_FIL *f = fil->vfsdata;
352a4                 | '     r=f_close(&f->fil);
352a4                 | '     free(f);
352a4                 | '     return _set_dos_error(r);
352a4     14 13 02 F6 | 	mov	arg01, local02
352a8     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1039
352ac     A7 F0 03 F6 | 	mov	ptra, fp
352b0     B2 00 A0 FD | 	call	#popregs_
352b4                 | _fatfs_cc_v_close_ret
352b4     2D 00 64 FD | 	ret
352b8                 | 
352b8                 | _fatfs_cc_v_opendir
352b8     04 4A 05 F6 | 	mov	COUNT_, #4
352bc     A8 00 A0 FD | 	call	#pushregs_
352c0     09 27 02 F6 | 	mov	local01, arg01
352c4     0A 29 02 F6 | 	mov	local02, arg02
352c8     30 12 06 F6 | 	mov	arg01, #48
352cc                 | '     return _gc_alloc(size);
352cc     10 14 06 F6 | 	mov	arg02, #16
352d0     4C 5D BF FD | 	call	#__system___gc_doalloc
352d4     FD 2A 0A F6 | 	mov	local03, result1 wz
352d8                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
352d8                 | '       return _seterror( 7 );
352d8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
352dc     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
352e0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
352e4     01 FA 65 A6 |  if_e	neg	result1, #1
352e8     34 00 90 AD |  if_e	jmp	#LR__5151
352ec     14 15 02 F6 | 	mov	arg02, local02
352f0     15 13 02 F6 | 	mov	arg01, local03
352f4     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
352f8     FD 2C 0A F6 | 	mov	local04, result1 wz
352fc     14 00 90 AD |  if_e	jmp	#LR__5150
35300     15 13 02 F6 | 	mov	arg01, local03
35304                 | '     return _gc_free(ptr);
35304     24 5E BF FD | 	call	#__system___gc_free
35308                 | '         free(f);
35308                 | '         return _set_dos_error(r);
35308     16 13 02 F6 | 	mov	arg01, local04
3530c     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1039
35310     0C 00 90 FD | 	jmp	#LR__5151
35314                 | LR__5150
35314     04 26 06 F1 | 	add	local01, #4
35318     13 2B 62 FC | 	wrlong	local03, local01
3531c                 | '     }
3531c                 | '     dir->vfsdata = f;
3531c                 | '     return 0;
3531c     00 FA 05 F6 | 	mov	result1, #0
35320                 | LR__5151
35320     A7 F0 03 F6 | 	mov	ptra, fp
35324     B2 00 A0 FD | 	call	#popregs_
35328                 | _fatfs_cc_v_opendir_ret
35328     2D 00 64 FD | 	ret
3532c                 | 
3532c                 | _fatfs_cc_v_closedir
3532c     02 4A 05 F6 | 	mov	COUNT_, #2
35330     A8 00 A0 FD | 	call	#pushregs_
35334     04 12 06 F1 | 	add	arg01, #4
35338     09 27 02 FB | 	rdlong	local01, arg01
3533c     13 13 02 F6 | 	mov	arg01, local01
35340     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
35344     FD 28 02 F6 | 	mov	local02, result1
35348     13 13 02 F6 | 	mov	arg01, local01
3534c                 | '     return _gc_free(ptr);
3534c     DC 5D BF FD | 	call	#__system___gc_free
35350     00 28 0E F2 | 	cmp	local02, #0 wz
35354     14 13 02 56 |  if_ne	mov	arg01, local02
35358     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_1039
3535c                 | '     return r;
3535c     14 FB 01 F6 | 	mov	result1, local02
35360     A7 F0 03 F6 | 	mov	ptra, fp
35364     B2 00 A0 FD | 	call	#popregs_
35368                 | _fatfs_cc_v_closedir_ret
35368     2D 00 64 FD | 	ret
3536c                 | 
3536c                 | _fatfs_cc_v_readdir
3536c     01 4A 05 F6 | 	mov	COUNT_, #1
35370     A8 00 A0 FD | 	call	#pushregs_
35374     2C F1 07 F1 | 	add	ptra, #300
35378     04 4E 05 F1 | 	add	fp, #4
3537c     A7 12 62 FC | 	wrlong	arg01, fp
35380     04 4E 05 F1 | 	add	fp, #4
35384     A7 14 62 FC | 	wrlong	arg02, fp
35388     04 4E 85 F1 | 	sub	fp, #4
3538c     A7 16 02 FB | 	rdlong	arg03, fp
35390     04 16 06 F1 | 	add	arg03, #4
35394     0B 13 02 FB | 	rdlong	arg01, arg03
35398     08 4E 05 F1 | 	add	fp, #8
3539c     A7 14 02 F6 | 	mov	arg02, fp
353a0     0C 4E 85 F1 | 	sub	fp, #12
353a4     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
353a8     28 4F 05 F1 | 	add	fp, #296
353ac     A7 FA 61 FC | 	wrlong	result1, fp
353b0     28 4F 85 F1 | 	sub	fp, #296
353b4     00 FA 0D F2 | 	cmp	result1, #0 wz
353b8     14 00 90 AD |  if_e	jmp	#LR__5160
353bc                 | '         return _set_dos_error(r);
353bc     28 4F 05 F1 | 	add	fp, #296
353c0     A7 12 02 FB | 	rdlong	arg01, fp
353c4     28 4F 85 F1 | 	sub	fp, #296
353c8     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_1039
353cc     C4 00 90 FD | 	jmp	#LR__5163
353d0                 | LR__5160
353d0     28 4E 05 F1 | 	add	fp, #40
353d4     A7 16 CA FA | 	rdbyte	arg03, fp wz
353d8     28 4E 85 F1 | 	sub	fp, #40
353dc                 | '         return -1;
353dc     01 FA 65 A6 |  if_e	neg	result1, #1
353e0     B0 00 90 AD |  if_e	jmp	#LR__5163
353e4     08 4E 05 F1 | 	add	fp, #8
353e8     A7 12 02 FB | 	rdlong	arg01, fp
353ec     20 4E 05 F1 | 	add	fp, #32
353f0     A7 14 02 F6 | 	mov	arg02, fp
353f4     28 4E 85 F1 | 	sub	fp, #40
353f8     3F 16 06 F6 | 	mov	arg03, #63
353fc     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
35400     08 4E 05 F1 | 	add	fp, #8
35404     A7 16 02 FB | 	rdlong	arg03, fp
35408     3F 16 06 F1 | 	add	arg03, #63
3540c     0B 01 48 FC | 	wrbyte	#0, arg03
35410     0C 4E 05 F1 | 	add	fp, #12
35414     A7 16 C2 FA | 	rdbyte	arg03, fp
35418     14 4E 85 F1 | 	sub	fp, #20
3541c     10 16 CE F7 | 	test	arg03, #16 wz
35420     18 00 90 AD |  if_e	jmp	#LR__5161
35424     08 4E 05 F1 | 	add	fp, #8
35428     A7 16 02 FB | 	rdlong	arg03, fp
3542c     08 4E 85 F1 | 	sub	fp, #8
35430     50 16 06 F1 | 	add	arg03, #80
35434     0B 03 48 FC | 	wrbyte	#1, arg03
35438     14 00 90 FD | 	jmp	#LR__5162
3543c                 | LR__5161
3543c     08 4E 05 F1 | 	add	fp, #8
35440     A7 16 02 FB | 	rdlong	arg03, fp
35444     08 4E 85 F1 | 	sub	fp, #8
35448     50 16 06 F1 | 	add	arg03, #80
3544c     0B 01 48 FC | 	wrbyte	#0, arg03
35450                 | LR__5162
35450     08 4E 05 F1 | 	add	fp, #8
35454     A7 16 02 FB | 	rdlong	arg03, fp
35458     04 4E 05 F1 | 	add	fp, #4
3545c     A7 14 02 FB | 	rdlong	arg02, fp
35460     48 16 06 F1 | 	add	arg03, #72
35464     0B 15 62 FC | 	wrlong	arg02, arg03
35468     04 4E 85 F1 | 	sub	fp, #4
3546c     A7 26 02 FB | 	rdlong	local01, fp
35470     08 4E 05 F1 | 	add	fp, #8
35474     A7 12 E2 FA | 	rdword	arg01, fp
35478     02 4E 05 F1 | 	add	fp, #2
3547c     A7 14 E2 FA | 	rdword	arg02, fp
35480     12 4E 85 F1 | 	sub	fp, #18
35484     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_1037
35488     4C 26 06 F1 | 	add	local01, #76
3548c     13 FB 61 FC | 	wrlong	result1, local01
35490                 | '         ent->d_type =  (0) ;
35490                 | '     }
35490                 | '     ent->d_size = finfo.fsize;
35490                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
35490                 | '     return 0;
35490     00 FA 05 F6 | 	mov	result1, #0
35494                 | LR__5163
35494     A7 F0 03 F6 | 	mov	ptra, fp
35498     B2 00 A0 FD | 	call	#popregs_
3549c                 | _fatfs_cc_v_readdir_ret
3549c     2D 00 64 FD | 	ret
354a0                 | 
354a0                 | _fatfs_cc_v_stat
354a0     03 4A 05 F6 | 	mov	COUNT_, #3
354a4     A8 00 A0 FD | 	call	#pushregs_
354a8     30 F1 07 F1 | 	add	ptra, #304
354ac     04 4E 05 F1 | 	add	fp, #4
354b0     A7 12 62 FC | 	wrlong	arg01, fp
354b4     04 4E 05 F1 | 	add	fp, #4
354b8     A7 14 62 FC | 	wrlong	arg02, fp
354bc     08 4E 85 F1 | 	sub	fp, #8
354c0     0A 13 02 F6 | 	mov	arg01, arg02
354c4     00 14 06 F6 | 	mov	arg02, #0
354c8     30 16 06 F6 | 	mov	arg03, #48
354cc     98 00 A0 FD | 	call	#\builtin_bytefill_
354d0     04 4E 05 F1 | 	add	fp, #4
354d4     A7 FA 01 FB | 	rdlong	result1, fp
354d8     04 4E 85 F1 | 	sub	fp, #4
354dc     FD FA C9 FA | 	rdbyte	result1, result1 wz
354e0     2C 00 90 AD |  if_e	jmp	#LR__5170
354e4     04 4E 05 F1 | 	add	fp, #4
354e8     A7 FA 01 FB | 	rdlong	result1, fp
354ec     04 4E 85 F1 | 	sub	fp, #4
354f0     FD FA C1 FA | 	rdbyte	result1, result1
354f4     2E FA 0D F2 | 	cmp	result1, #46 wz
354f8     04 4E 05 A1 |  if_e	add	fp, #4
354fc     A7 26 02 AB |  if_e	rdlong	local01, fp
35500     04 4E 85 A1 |  if_e	sub	fp, #4
35504     01 26 06 A1 |  if_e	add	local01, #1
35508     13 29 CA AA |  if_e	rdbyte	local02, local01 wz
3550c     18 00 90 5D |  if_ne	jmp	#LR__5171
35510                 | LR__5170
35510     18 4E 05 F1 | 	add	fp, #24
35514     A7 20 48 FC | 	wrbyte	#16, fp
35518     0C 4E 85 F1 | 	sub	fp, #12
3551c     A7 00 68 FC | 	wrlong	#0, fp
35520     0C 4E 85 F1 | 	sub	fp, #12
35524     24 00 90 FD | 	jmp	#LR__5172
35528                 | LR__5171
35528     04 4E 05 F1 | 	add	fp, #4
3552c     A7 12 02 FB | 	rdlong	arg01, fp
35530     0C 4E 05 F1 | 	add	fp, #12
35534     A7 14 02 F6 | 	mov	arg02, fp
35538     10 4E 85 F1 | 	sub	fp, #16
3553c     AC EB BF FD | 	call	#_fatfs_cc_f_stat
35540     0C 4E 05 F1 | 	add	fp, #12
35544     A7 FA 61 FC | 	wrlong	result1, fp
35548     0C 4E 85 F1 | 	sub	fp, #12
3554c                 | LR__5172
3554c     0C 4E 05 F1 | 	add	fp, #12
35550     A7 28 0A FB | 	rdlong	local02, fp wz
35554     0C 4E 85 F1 | 	sub	fp, #12
35558     14 00 90 AD |  if_e	jmp	#LR__5173
3555c                 | '         return _set_dos_error(r);
3555c     0C 4E 05 F1 | 	add	fp, #12
35560     A7 12 02 FB | 	rdlong	arg01, fp
35564     0C 4E 85 F1 | 	sub	fp, #12
35568     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_1039
3556c     14 01 90 FD | 	jmp	#LR__5174
35570                 | LR__5173
35570     2C 4F 05 F1 | 	add	fp, #300
35574     A7 48 6A FC | 	wrlong	#292, fp
35578     14 4F 85 F1 | 	sub	fp, #276
3557c     A7 2A C2 FA | 	rdbyte	local03, fp
35580     18 4E 85 F1 | 	sub	fp, #24
35584     01 2A CE F7 | 	test	local03, #1 wz
35588     2C 4F 05 A1 |  if_e	add	fp, #300
3558c     A7 2A 02 AB |  if_e	rdlong	local03, fp
35590     92 2A 46 A5 |  if_e	or	local03, #146
35594     A7 2A 62 AC |  if_e	wrlong	local03, fp
35598     2C 4F 85 A1 |  if_e	sub	fp, #300
3559c     18 4E 05 F1 | 	add	fp, #24
355a0     A7 2A C2 FA | 	rdbyte	local03, fp
355a4     18 4E 85 F1 | 	sub	fp, #24
355a8     10 2A CE F7 | 	test	local03, #16 wz
355ac     2C 4F 05 51 |  if_ne	add	fp, #300
355b0     A7 2A 02 5B |  if_ne	rdlong	local03, fp
355b4     08 00 00 5F 
355b8     49 2A 46 55 |  if_ne	or	local03, ##4169
355bc     A7 2A 62 5C |  if_ne	wrlong	local03, fp
355c0     2C 4F 85 51 |  if_ne	sub	fp, #300
355c4     08 4E 05 F1 | 	add	fp, #8
355c8     A7 2A 02 FB | 	rdlong	local03, fp
355cc     24 4F 05 F1 | 	add	fp, #292
355d0     A7 28 02 FB | 	rdlong	local02, fp
355d4     08 2A 06 F1 | 	add	local03, #8
355d8     15 29 62 FC | 	wrlong	local02, local03
355dc     24 4F 85 F1 | 	sub	fp, #292
355e0     A7 2A 02 FB | 	rdlong	local03, fp
355e4     0C 2A 06 F1 | 	add	local03, #12
355e8     15 03 68 FC | 	wrlong	#1, local03
355ec     A7 2A 02 FB | 	rdlong	local03, fp
355f0     08 4E 05 F1 | 	add	fp, #8
355f4     A7 28 02 FB | 	rdlong	local02, fp
355f8     18 2A 06 F1 | 	add	local03, #24
355fc     15 29 62 FC | 	wrlong	local02, local03
35600     08 4E 85 F1 | 	sub	fp, #8
35604     A7 2A 02 FB | 	rdlong	local03, fp
35608     1C 2A 06 F1 | 	add	local03, #28
3560c     01 00 80 FF 
35610     15 01 68 FC | 	wrlong	##512, local03
35614     A7 28 02 FB | 	rdlong	local02, fp
35618     14 2B 02 F6 | 	mov	local03, local02
3561c     18 28 06 F1 | 	add	local02, #24
35620     14 29 02 FB | 	rdlong	local02, local02
35624     FF 29 06 F1 | 	add	local02, #511
35628     14 29 52 F6 | 	abs	local02, local02 wc
3562c     09 28 46 F0 | 	shr	local02, #9
35630     14 29 82 F6 | 	negc	local02, local02
35634     20 2A 06 F1 | 	add	local03, #32
35638     15 29 62 FC | 	wrlong	local02, local03
3563c     A7 28 02 FB | 	rdlong	local02, fp
35640     14 2B 02 F6 | 	mov	local03, local02
35644     14 27 02 F6 | 	mov	local01, local02
35648     0C 4E 05 F1 | 	add	fp, #12
3564c     A7 12 E2 FA | 	rdword	arg01, fp
35650     02 4E 05 F1 | 	add	fp, #2
35654     A7 14 E2 FA | 	rdword	arg02, fp
35658     16 4E 85 F1 | 	sub	fp, #22
3565c     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_1037
35660     2C 26 06 F1 | 	add	local01, #44
35664     13 FB 61 FC | 	wrlong	result1, local01
35668     28 28 06 F1 | 	add	local02, #40
3566c     14 FB 61 FC | 	wrlong	result1, local02
35670     24 2A 06 F1 | 	add	local03, #36
35674     15 FB 61 FC | 	wrlong	result1, local03
35678                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
35678                 | '     }
35678                 | '     buf->st_mode = mode;
35678                 | '     buf->st_nlink = 1;
35678                 | '     buf->st_size = finfo.fsize;
35678                 | '     buf->st_blksize = 512;
35678                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
35678                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
35678                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
35678                 | '     return r;
35678     0C 4E 05 F1 | 	add	fp, #12
3567c     A7 FA 01 FB | 	rdlong	result1, fp
35680     0C 4E 85 F1 | 	sub	fp, #12
35684                 | LR__5174
35684     A7 F0 03 F6 | 	mov	ptra, fp
35688     B2 00 A0 FD | 	call	#popregs_
3568c                 | _fatfs_cc_v_stat_ret
3568c     2D 00 64 FD | 	ret
35690                 | 
35690                 | _fatfs_cc_v_read
35690     00 4A 05 F6 | 	mov	COUNT_, #0
35694     A8 00 A0 FD | 	call	#pushregs_
35698     1C F0 07 F1 | 	add	ptra, #28
3569c     04 4E 05 F1 | 	add	fp, #4
356a0     A7 12 62 FC | 	wrlong	arg01, fp
356a4     04 4E 05 F1 | 	add	fp, #4
356a8     A7 14 62 FC | 	wrlong	arg02, fp
356ac     04 4E 05 F1 | 	add	fp, #4
356b0     A7 16 62 FC | 	wrlong	arg03, fp
356b4     08 4E 85 F1 | 	sub	fp, #8
356b8     A7 12 02 FB | 	rdlong	arg01, fp
356bc     09 13 0A FB | 	rdlong	arg01, arg01 wz
356c0     0C 4E 05 F1 | 	add	fp, #12
356c4     A7 12 62 FC | 	wrlong	arg01, fp
356c8     10 4E 85 F1 | 	sub	fp, #16
356cc                 | '         return _seterror( 5 );
356cc     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
356d0     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
356d4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
356d8     01 FA 65 A6 |  if_e	neg	result1, #1
356dc     B8 00 90 AD |  if_e	jmp	#LR__5182
356e0     10 4E 05 F1 | 	add	fp, #16
356e4     A7 12 02 FB | 	rdlong	arg01, fp
356e8     02 00 00 FF 
356ec     14 12 06 F1 | 	add	arg01, ##1044
356f0     08 4E 85 F1 | 	sub	fp, #8
356f4     A7 14 02 FB | 	rdlong	arg02, fp
356f8     04 4E 05 F1 | 	add	fp, #4
356fc     A7 16 02 FB | 	rdlong	arg03, fp
35700     0C 4E 05 F1 | 	add	fp, #12
35704     A7 18 02 F6 | 	mov	arg04, fp
35708     18 4E 85 F1 | 	sub	fp, #24
3570c     C4 CE BF FD | 	call	#_fatfs_cc_f_read
35710     14 4E 05 F1 | 	add	fp, #20
35714     A7 FA 61 FC | 	wrlong	result1, fp
35718     14 4E 85 F1 | 	sub	fp, #20
3571c     00 FA 0D F2 | 	cmp	result1, #0 wz
35720     34 00 90 AD |  if_e	jmp	#LR__5180
35724     04 4E 05 F1 | 	add	fp, #4
35728     A7 18 02 FB | 	rdlong	arg04, fp
3572c     0C 17 02 F6 | 	mov	arg03, arg04
35730     08 18 06 F1 | 	add	arg04, #8
35734     0C 19 02 FB | 	rdlong	arg04, arg04
35738     20 18 46 F5 | 	or	arg04, #32
3573c     08 16 06 F1 | 	add	arg03, #8
35740     0B 19 62 FC | 	wrlong	arg04, arg03
35744                 | '         fil->state |=  (0x20) ;
35744                 | '         return _set_dos_error(r);
35744     10 4E 05 F1 | 	add	fp, #16
35748     A7 12 02 FB | 	rdlong	arg01, fp
3574c     14 4E 85 F1 | 	sub	fp, #20
35750     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_1039
35754     40 00 90 FD | 	jmp	#LR__5182
35758                 | LR__5180
35758     18 4E 05 F1 | 	add	fp, #24
3575c     A7 FA 09 FB | 	rdlong	result1, fp wz
35760     18 4E 85 F1 | 	sub	fp, #24
35764     24 00 90 5D |  if_ne	jmp	#LR__5181
35768     04 4E 05 F1 | 	add	fp, #4
3576c     A7 FA 01 FB | 	rdlong	result1, fp
35770     FD 18 02 F6 | 	mov	arg04, result1
35774     04 4E 85 F1 | 	sub	fp, #4
35778     08 FA 05 F1 | 	add	result1, #8
3577c     FD FA 01 FB | 	rdlong	result1, result1
35780     10 FA 45 F5 | 	or	result1, #16
35784     08 18 06 F1 | 	add	arg04, #8
35788     0C FB 61 FC | 	wrlong	result1, arg04
3578c                 | LR__5181
3578c                 | '         fil->state |=  (0x10) ;
3578c                 | '     }
3578c                 | '     return x;
3578c     18 4E 05 F1 | 	add	fp, #24
35790     A7 FA 01 FB | 	rdlong	result1, fp
35794     18 4E 85 F1 | 	sub	fp, #24
35798                 | LR__5182
35798     A7 F0 03 F6 | 	mov	ptra, fp
3579c     B2 00 A0 FD | 	call	#popregs_
357a0                 | _fatfs_cc_v_read_ret
357a0     2D 00 64 FD | 	ret
357a4                 | 
357a4                 | _fatfs_cc_v_write
357a4     00 4A 05 F6 | 	mov	COUNT_, #0
357a8     A8 00 A0 FD | 	call	#pushregs_
357ac     1C F0 07 F1 | 	add	ptra, #28
357b0     04 4E 05 F1 | 	add	fp, #4
357b4     A7 12 62 FC | 	wrlong	arg01, fp
357b8     04 4E 05 F1 | 	add	fp, #4
357bc     A7 14 62 FC | 	wrlong	arg02, fp
357c0     04 4E 05 F1 | 	add	fp, #4
357c4     A7 16 62 FC | 	wrlong	arg03, fp
357c8     08 4E 85 F1 | 	sub	fp, #8
357cc     A7 12 02 FB | 	rdlong	arg01, fp
357d0     09 13 0A FB | 	rdlong	arg01, arg01 wz
357d4     0C 4E 05 F1 | 	add	fp, #12
357d8     A7 12 62 FC | 	wrlong	arg01, fp
357dc     10 4E 85 F1 | 	sub	fp, #16
357e0                 | '         return _seterror( 5 );
357e0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
357e4     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
357e8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
357ec     01 FA 65 A6 |  if_e	neg	result1, #1
357f0     84 00 90 AD |  if_e	jmp	#LR__5191
357f4     10 4E 05 F1 | 	add	fp, #16
357f8     A7 12 02 FB | 	rdlong	arg01, fp
357fc     02 00 00 FF 
35800     14 12 06 F1 | 	add	arg01, ##1044
35804     08 4E 85 F1 | 	sub	fp, #8
35808     A7 14 02 FB | 	rdlong	arg02, fp
3580c     04 4E 05 F1 | 	add	fp, #4
35810     A7 16 02 FB | 	rdlong	arg03, fp
35814     0C 4E 05 F1 | 	add	fp, #12
35818     A7 18 02 F6 | 	mov	arg04, fp
3581c     18 4E 85 F1 | 	sub	fp, #24
35820     4C D4 BF FD | 	call	#_fatfs_cc_f_write
35824     14 4E 05 F1 | 	add	fp, #20
35828     A7 FA 61 FC | 	wrlong	result1, fp
3582c     14 4E 85 F1 | 	sub	fp, #20
35830     00 FA 0D F2 | 	cmp	result1, #0 wz
35834     34 00 90 AD |  if_e	jmp	#LR__5190
35838     04 4E 05 F1 | 	add	fp, #4
3583c     A7 18 02 FB | 	rdlong	arg04, fp
35840     0C 17 02 F6 | 	mov	arg03, arg04
35844     08 18 06 F1 | 	add	arg04, #8
35848     0C 19 02 FB | 	rdlong	arg04, arg04
3584c     20 18 46 F5 | 	or	arg04, #32
35850     08 16 06 F1 | 	add	arg03, #8
35854     0B 19 62 FC | 	wrlong	arg04, arg03
35858                 | '         fil->state |=  (0x20) ;
35858                 | '         return _set_dos_error(r);
35858     10 4E 05 F1 | 	add	fp, #16
3585c     A7 12 02 FB | 	rdlong	arg01, fp
35860     14 4E 85 F1 | 	sub	fp, #20
35864     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_1039
35868     0C 00 90 FD | 	jmp	#LR__5191
3586c                 | LR__5190
3586c                 | '     }
3586c                 | '     return x;
3586c     18 4E 05 F1 | 	add	fp, #24
35870     A7 FA 01 FB | 	rdlong	result1, fp
35874     18 4E 85 F1 | 	sub	fp, #24
35878                 | LR__5191
35878     A7 F0 03 F6 | 	mov	ptra, fp
3587c     B2 00 A0 FD | 	call	#popregs_
35880                 | _fatfs_cc_v_write_ret
35880     2D 00 64 FD | 	ret
35884                 | 
35884                 | _fatfs_cc_v_lseek
35884     04 4A 05 F6 | 	mov	COUNT_, #4
35888     A8 00 A0 FD | 	call	#pushregs_
3588c     0A 27 02 F6 | 	mov	local01, arg02
35890     0B 29 02 F6 | 	mov	local02, arg03
35894     09 2B 02 FB | 	rdlong	local03, arg01
35898     02 00 00 FF 
3589c     14 2A 0E F1 | 	add	local03, ##1044 wz
358a0                 | '         return _seterror( 5 );
358a0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
358a4     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
358a8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
358ac     01 FA 65 A6 |  if_e	neg	result1, #1
358b0     4C 00 90 AD |  if_e	jmp	#LR__5202
358b4     00 28 0E F2 | 	cmp	local02, #0 wz
358b8     24 00 90 AD |  if_e	jmp	#LR__5200
358bc     01 28 0E F2 | 	cmp	local02, #1 wz
358c0     14 2A 06 A1 |  if_e	add	local03, #20
358c4     15 2D 02 AB |  if_e	rdlong	local04, local03
358c8     14 2A 86 A1 |  if_e	sub	local03, #20
358cc     16 27 02 A1 |  if_e	add	local01, local04
358d0     0C 2A 06 51 |  if_ne	add	local03, #12
358d4     15 2D 02 5B |  if_ne	rdlong	local04, local03
358d8     0C 2A 86 51 |  if_ne	sub	local03, #12
358dc     16 27 02 51 |  if_ne	add	local01, local04
358e0                 | LR__5200
358e0     13 15 02 F6 | 	mov	arg02, local01
358e4     15 13 02 F6 | 	mov	arg01, local03
358e8     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
358ec     FD 12 0A F6 | 	mov	arg01, result1 wz
358f0     08 00 90 AD |  if_e	jmp	#LR__5201
358f4                 | '         return _set_dos_error(result);
358f4     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_1039
358f8     04 00 90 FD | 	jmp	#LR__5202
358fc                 | LR__5201
358fc                 | '     }
358fc                 | '     return offset;
358fc     13 FB 01 F6 | 	mov	result1, local01
35900                 | LR__5202
35900     A7 F0 03 F6 | 	mov	ptra, fp
35904     B2 00 A0 FD | 	call	#popregs_
35908                 | _fatfs_cc_v_lseek_ret
35908     2D 00 64 FD | 	ret
3590c                 | 
3590c                 | _fatfs_cc_v_ioctl
3590c                 | ' {
3590c                 | '     return _seterror( 10 );
3590c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
35910     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
35914     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
35918     01 FA 65 F6 | 	neg	result1, #1
3591c                 | _fatfs_cc_v_ioctl_ret
3591c     2D 00 64 FD | 	ret
35920                 | 
35920                 | _fatfs_cc_v_mkdir
35920     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
35924     FD 12 02 F6 | 	mov	arg01, result1
35928                 | ' 
35928                 | '     r = f_mkdir(name);
35928                 | '     return _set_dos_error(r);
35928     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1039
3592c                 | _fatfs_cc_v_mkdir_ret
3592c     2D 00 64 FD | 	ret
35930                 | 
35930                 | _fatfs_cc_v_remove
35930     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
35934     FD 12 02 F6 | 	mov	arg01, result1
35938                 | ' 
35938                 | '     r = f_unlink(name);
35938                 | '     return _set_dos_error(r);
35938     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1039
3593c                 | _fatfs_cc_v_remove_ret
3593c     2D 00 64 FD | 	ret
35940                 | 
35940                 | _fatfs_cc_v_rmdir
35940     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
35944     FD 12 02 F6 | 	mov	arg01, result1
35948                 | ' 
35948                 | '     r = f_unlink(name);
35948                 | '     return _set_dos_error(r);
35948     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1039
3594c                 | _fatfs_cc_v_rmdir_ret
3594c     2D 00 64 FD | 	ret
35950                 | 
35950                 | _fatfs_cc_v_rename
35950     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
35954     FD 12 02 F6 | 	mov	arg01, result1
35958                 | '     return _set_dos_error(r);
35958     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1039
3595c                 | _fatfs_cc_v_rename_ret
3595c     2D 00 64 FD | 	ret
35960                 | 
35960                 | _fatfs_cc_v_open
35960     07 4A 05 F6 | 	mov	COUNT_, #7
35964     A8 00 A0 FD | 	call	#pushregs_
35968     09 27 02 F6 | 	mov	local01, arg01
3596c     0A 29 02 F6 | 	mov	local02, arg02
35970     0B 2B 02 F6 | 	mov	local03, arg03
35974     03 00 00 FF 
35978     3C 12 06 F6 | 	mov	arg01, ##1596
3597c                 | '     return _gc_alloc(size);
3597c     10 14 06 F6 | 	mov	arg02, #16
35980     9C 56 BF FD | 	call	#__system___gc_doalloc
35984     FD 2C 0A F6 | 	mov	local04, result1 wz
35988                 | '       return _seterror( 7 );
35988     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
3598c     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
35990     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
35994     01 FA 65 A6 |  if_e	neg	result1, #1
35998     98 00 90 AD |  if_e	jmp	#LR__5216
3599c     16 13 02 F6 | 	mov	arg01, local04
359a0     00 14 06 F6 | 	mov	arg02, #0
359a4     03 00 00 FF 
359a8     3C 16 06 F6 | 	mov	arg03, ##1596
359ac     98 00 A0 FD | 	call	#\builtin_bytefill_
359b0                 | '   switch (flags & 3) {
359b0     15 2F 02 F6 | 	mov	local05, local03
359b4     03 2E 0E F5 | 	and	local05, #3 wz
359b8     0C 00 90 AD |  if_e	jmp	#LR__5210
359bc     01 2E 0E F2 | 	cmp	local05, #1 wz
359c0     0C 00 90 AD |  if_e	jmp	#LR__5211
359c4     10 00 90 FD | 	jmp	#LR__5212
359c8                 | LR__5210
359c8     01 30 06 F6 | 	mov	local06, #1
359cc                 | '       fs_flags =  0x01 ;
359cc                 | '       break;
359cc     0C 00 90 FD | 	jmp	#LR__5213
359d0                 | LR__5211
359d0     02 30 06 F6 | 	mov	local06, #2
359d4                 | '       fs_flags =  0x02 ;
359d4                 | '       break;
359d4     04 00 90 FD | 	jmp	#LR__5213
359d8                 | LR__5212
359d8     03 30 06 F6 | 	mov	local06, #3
359dc                 | '       fs_flags =  0x01  |  0x02 ;
359dc                 | '       break;
359dc                 | LR__5213
359dc     08 2A CE F7 | 	test	local03, #8 wz
359e0     18 30 46 55 |  if_ne	or	local06, #24
359e4     08 00 90 5D |  if_ne	jmp	#LR__5214
359e8     20 2A CE F7 | 	test	local03, #32 wz
359ec     30 30 46 55 |  if_ne	or	local06, #48
359f0                 | LR__5214
359f0     02 00 00 FF 
359f4     14 2C 06 F1 | 	add	local04, ##1044
359f8     16 13 02 F6 | 	mov	arg01, local04
359fc     02 00 00 FF 
35a00     14 2C 86 F1 | 	sub	local04, ##1044
35a04     14 15 02 F6 | 	mov	arg02, local02
35a08     18 17 02 F6 | 	mov	arg03, local06
35a0c     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
35a10     FD 32 0A F6 | 	mov	local07, result1 wz
35a14     14 00 90 AD |  if_e	jmp	#LR__5215
35a18     16 13 02 F6 | 	mov	arg01, local04
35a1c                 | '     return _gc_free(ptr);
35a1c     0C 57 BF FD | 	call	#__system___gc_free
35a20                 | '     free(f);
35a20                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
35a20                 | '     return _set_dos_error(r);
35a20     19 13 02 F6 | 	mov	arg01, local07
35a24     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_1039
35a28     08 00 90 FD | 	jmp	#LR__5216
35a2c                 | LR__5215
35a2c     13 2D 62 FC | 	wrlong	local04, local01
35a30                 | '   }
35a30                 | '   fil->vfsdata = f;
35a30                 | '   return 0;
35a30     00 FA 05 F6 | 	mov	result1, #0
35a34                 | LR__5216
35a34     A7 F0 03 F6 | 	mov	ptra, fp
35a38     B2 00 A0 FD | 	call	#popregs_
35a3c                 | _fatfs_cc_v_open_ret
35a3c     2D 00 64 FD | 	ret
35a40                 | 
35a40                 | _fatfs_cc_v_flush
35a40     09 13 02 FB | 	rdlong	arg01, arg01
35a44     02 00 00 FF 
35a48     14 12 0E F1 | 	add	arg01, ##1044 wz
35a4c                 | '         return _seterror( 5 );
35a4c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
35a50     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
35a54     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
35a58     01 FA 65 A6 |  if_e	neg	result1, #1
35a5c     0C 00 90 AD |  if_e	jmp	#LR__5220
35a60     00 DA BF FD | 	call	#_fatfs_cc_f_sync
35a64     FD 12 02 F6 | 	mov	arg01, result1
35a68                 | '     }
35a68                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
35a68                 | '     result = f_sync(f);
35a68                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
35a68                 | '     return _set_dos_error(result);
35a68     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_1039
35a6c                 | LR__5220
35a6c                 | _fatfs_cc_v_flush_ret
35a6c     2D 00 64 FD | 	ret
35a70                 | 
35a70                 | _fatfs_cc_v_init
35a70                 | ' {
35a70                 | '     return 0;
35a70     00 FA 05 F6 | 	mov	result1, #0
35a74                 | _fatfs_cc_v_init_ret
35a74     2D 00 64 FD | 	ret
35a78                 | 
35a78                 | _fatfs_cc_v_deinit
35a78     B4 01 00 FF 
35a7c     E8 15 06 F6 | 	mov	arg02, ##@LR__5416
35a80     00 12 06 F6 | 	mov	arg01, #0
35a84     00 16 06 F6 | 	mov	arg03, #0
35a88     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
35a8c     01 00 00 FF 
35a90     08 E4 05 F1 | 	add	objptr, ##520
35a94     F2 12 02 FB | 	rdlong	arg01, objptr
35a98     04 E4 05 F1 | 	add	objptr, #4
35a9c     F2 14 02 FB | 	rdlong	arg02, objptr
35aa0     01 00 00 FF 
35aa4     0C E4 85 F1 | 	sub	objptr, ##524
35aa8     F0 3D BF FD | 	call	#__system___freepins
35aac                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
35aac                 | '     _freepins(f_pinmask);
35aac                 | '     return 0;
35aac     00 FA 05 F6 | 	mov	result1, #0
35ab0                 | _fatfs_cc_v_deinit_ret
35ab0     2D 00 64 FD | 	ret
35ab4                 | 
35ab4                 | _fatfs_cc_get_vfs
35ab4     01 4A 05 F6 | 	mov	COUNT_, #1
35ab8     A8 00 A0 FD | 	call	#pushregs_
35abc     09 27 02 F6 | 	mov	local01, arg01
35ac0     50 12 06 F6 | 	mov	arg01, #80
35ac4     28 55 BF FD | 	call	#__system___gc_alloc_managed
35ac8     FD 12 02 F6 | 	mov	arg01, result1
35acc     F2 FA 01 F6 | 	mov	result1, objptr
35ad0     00 98 05 FF 
35ad4     00 FA 45 F5 | 	or	result1, ##187695104
35ad8     09 FB 61 FC | 	wrlong	result1, arg01
35adc     F2 FA 01 F6 | 	mov	result1, objptr
35ae0     00 A0 05 FF 
35ae4     00 FA 45 F5 | 	or	result1, ##188743680
35ae8     04 12 06 F1 | 	add	arg01, #4
35aec     09 FB 61 FC | 	wrlong	result1, arg01
35af0     F2 FA 01 F6 | 	mov	result1, objptr
35af4     00 A8 05 FF 
35af8     00 FA 45 F5 | 	or	result1, ##189792256
35afc     04 12 06 F1 | 	add	arg01, #4
35b00     09 FB 61 FC | 	wrlong	result1, arg01
35b04     F2 FA 01 F6 | 	mov	result1, objptr
35b08     00 B0 05 FF 
35b0c     00 FA 45 F5 | 	or	result1, ##190840832
35b10     04 12 06 F1 | 	add	arg01, #4
35b14     09 FB 61 FC | 	wrlong	result1, arg01
35b18     F2 FA 01 F6 | 	mov	result1, objptr
35b1c     00 B8 05 FF 
35b20     00 FA 45 F5 | 	or	result1, ##191889408
35b24     04 12 06 F1 | 	add	arg01, #4
35b28     09 FB 61 FC | 	wrlong	result1, arg01
35b2c     04 12 06 F1 | 	add	arg01, #4
35b30     09 01 68 FC | 	wrlong	#0, arg01
35b34     04 12 06 F1 | 	add	arg01, #4
35b38     09 27 62 FC | 	wrlong	local01, arg01
35b3c     04 12 06 F1 | 	add	arg01, #4
35b40     09 01 68 FC | 	wrlong	#0, arg01
35b44     F2 FA 01 F6 | 	mov	result1, objptr
35b48     00 C0 05 FF 
35b4c     00 FA 45 F5 | 	or	result1, ##192937984
35b50     04 12 06 F1 | 	add	arg01, #4
35b54     09 FB 61 FC | 	wrlong	result1, arg01
35b58     F2 FA 01 F6 | 	mov	result1, objptr
35b5c     00 C8 05 FF 
35b60     00 FA 45 F5 | 	or	result1, ##193986560
35b64     04 12 06 F1 | 	add	arg01, #4
35b68     09 FB 61 FC | 	wrlong	result1, arg01
35b6c     F2 FA 01 F6 | 	mov	result1, objptr
35b70     00 D0 05 FF 
35b74     00 FA 45 F5 | 	or	result1, ##195035136
35b78     04 12 06 F1 | 	add	arg01, #4
35b7c     09 FB 61 FC | 	wrlong	result1, arg01
35b80     F2 FA 01 F6 | 	mov	result1, objptr
35b84     00 D8 05 FF 
35b88     00 FA 45 F5 | 	or	result1, ##196083712
35b8c     04 12 06 F1 | 	add	arg01, #4
35b90     09 FB 61 FC | 	wrlong	result1, arg01
35b94     F2 FA 01 F6 | 	mov	result1, objptr
35b98     00 E0 05 FF 
35b9c     00 FA 45 F5 | 	or	result1, ##197132288
35ba0     04 12 06 F1 | 	add	arg01, #4
35ba4     09 FB 61 FC | 	wrlong	result1, arg01
35ba8     F2 FA 01 F6 | 	mov	result1, objptr
35bac     00 E8 05 FF 
35bb0     00 FA 45 F5 | 	or	result1, ##198180864
35bb4     04 12 06 F1 | 	add	arg01, #4
35bb8     09 FB 61 FC | 	wrlong	result1, arg01
35bbc     F2 FA 01 F6 | 	mov	result1, objptr
35bc0     00 F0 05 FF 
35bc4     00 FA 45 F5 | 	or	result1, ##199229440
35bc8     04 12 06 F1 | 	add	arg01, #4
35bcc     09 FB 61 FC | 	wrlong	result1, arg01
35bd0     F2 FA 01 F6 | 	mov	result1, objptr
35bd4     00 F8 05 FF 
35bd8     00 FA 45 F5 | 	or	result1, ##200278016
35bdc     04 12 06 F1 | 	add	arg01, #4
35be0     09 FB 61 FC | 	wrlong	result1, arg01
35be4     F2 FA 01 F6 | 	mov	result1, objptr
35be8     3A FA 25 F4 | 	bith	result1, #58
35bec     04 12 06 F1 | 	add	arg01, #4
35bf0     09 FB 61 FC | 	wrlong	result1, arg01
35bf4     F2 FA 01 F6 | 	mov	result1, objptr
35bf8     00 08 06 FF 
35bfc     00 FA 45 F5 | 	or	result1, ##202375168
35c00     04 12 06 F1 | 	add	arg01, #4
35c04     09 FB 61 FC | 	wrlong	result1, arg01
35c08     F2 FA 01 F6 | 	mov	result1, objptr
35c0c     00 10 06 FF 
35c10     00 FA 45 F5 | 	or	result1, ##203423744
35c14     04 12 06 F1 | 	add	arg01, #4
35c18     09 FB 61 FC | 	wrlong	result1, arg01
35c1c     F2 FA 01 F6 | 	mov	result1, objptr
35c20     00 18 06 FF 
35c24     00 FA 45 F5 | 	or	result1, ##204472320
35c28     04 12 06 F1 | 	add	arg01, #4
35c2c     09 FB 61 FC | 	wrlong	result1, arg01
35c30     4C 12 86 F1 | 	sub	arg01, #76
35c34                 | ' 
35c34                 | '     v->close = &v_close;
35c34                 | '     v->read = &v_read;
35c34                 | '     v->write = &v_write;
35c34                 | '     v->lseek = &v_lseek;
35c34                 | '     v->ioctl = &v_ioctl;
35c34                 | '     v->flush = 0;
35c34                 | '     v->vfs_data = ptr;
35c34                 | '     v->reserved = 0;
35c34                 | ' 
35c34                 | '     v->open = &v_open;
35c34                 | '     v->creat = &v_creat;
35c34                 | '     v->opendir = &v_opendir;
35c34                 | '     v->closedir = &v_closedir;
35c34                 | '     v->readdir = &v_readdir;
35c34                 | '     v->stat = &v_stat;
35c34                 | ' 
35c34                 | '     v->mkdir = &v_mkdir;
35c34                 | '     v->rmdir = &v_rmdir;
35c34                 | ' 
35c34                 | '     v->remove = &v_remove;
35c34                 | '     v->rename = &v_rename;
35c34                 | ' 
35c34                 | '     v->init = &v_init;
35c34                 | '     v->deinit = &v_deinit;
35c34                 | ' 
35c34                 | '     return v;
35c34     09 FB 01 F6 | 	mov	result1, arg01
35c38     A7 F0 03 F6 | 	mov	ptra, fp
35c3c     B2 00 A0 FD | 	call	#popregs_
35c40                 | _fatfs_cc_get_vfs_ret
35c40     2D 00 64 FD | 	ret
35c44                 | 
35c44                 | _fatfs_cc_xmit_mmc_1190
35c44     01 00 00 FF 
35c48     10 E4 05 F1 | 	add	objptr, ##528
35c4c     F2 00 02 FB | 	rdlong	_var01, objptr
35c50     08 E4 05 F1 | 	add	objptr, #8
35c54     F2 02 02 FB | 	rdlong	_var02, objptr
35c58     01 00 00 FF 
35c5c     18 E4 85 F1 | 	sub	objptr, ##536
35c60     40 02 62 FD | 	dirl	_var02
35c64     28 02 64 FD | 	setq	#1
35c68     09 05 02 FB | 	rdlong	_var03, arg01
35c6c     69 04 62 FD | 	rev	_var03
35c70     1B 04 FE F9 | 	movbyts	_var03, #27
35c74     01 05 22 FC | 	wypin	_var03, _var02
35c78     0A 05 02 F6 | 	mov	_var03, arg02
35c7c     02 14 4E F0 | 	shr	arg02, #2 wz
35c80     03 04 66 F0 | 	shl	_var03, #3
35c84     00 05 22 FC | 	wypin	_var03, _var01
35c88     41 02 62 FD | 	dirh	_var02
35c8c     08 12 06 F1 | 	add	arg01, #8
35c90     69 06 62 FD | 	rev	_var04
35c94     1B 06 FE F9 | 	movbyts	_var04, #27
35c98                 | LR__5230
35c98     01 07 22 5C |  if_ne	wypin	_var04, _var02
35c9c     09 07 02 5B |  if_ne	rdlong	_var04, arg01
35ca0     04 12 06 51 |  if_ne	add	arg01, #4
35ca4     69 06 62 5D |  if_ne	rev	_var04
35ca8     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
35cac                 | LR__5231
35cac     40 02 72 5D |  if_ne	testp	_var02 wc
35cb0     F8 FF 9F 1D |  if_a	jmp	#LR__5231
35cb4     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__5230
35cb8                 | LR__5232
35cb8     40 00 72 FD | 	testp	_var01 wc
35cbc     F8 FF 9F 3D |  if_ae	jmp	#LR__5232
35cc0     40 02 62 FD | 	dirl	_var02
35cc4     FF FF FF FF 
35cc8     01 FF 2B FC | 	wypin	##-1, _var02
35ccc     41 02 62 FD | 	dirh	_var02
35cd0                 | _fatfs_cc_xmit_mmc_1190_ret
35cd0     2D 00 64 FD | 	ret
35cd4                 | 
35cd4                 | _fatfs_cc_rcvr_mmc_1197
35cd4     01 00 00 FF 
35cd8     10 E4 05 F1 | 	add	objptr, ##528
35cdc     F2 00 02 FB | 	rdlong	_var01, objptr
35ce0     0C E4 05 F1 | 	add	objptr, #12
35ce4     F2 02 02 FB | 	rdlong	_var02, objptr
35ce8     01 00 00 FF 
35cec     1C E4 85 F1 | 	sub	objptr, ##540
35cf0     01 03 08 FC | 	akpin	_var02
35cf4     0A 05 0A F6 | 	mov	_var03, arg02 wz
35cf8     02 04 4E F0 | 	shr	_var03, #2 wz
35cfc     30 00 90 AD |  if_e	jmp	#LR__5242
35d00     02 07 02 F6 | 	mov	_var04, _var03
35d04     05 06 66 F0 | 	shl	_var04, #5
35d08     00 07 22 FC | 	wypin	_var04, _var01
35d0c     01 7F 18 FC | 	wxpin	#63, _var02
35d10                 | LR__5240
35d10                 | LR__5241
35d10     40 02 72 FD | 	testp	_var02 wc
35d14     F8 FF 9F 3D |  if_ae	jmp	#LR__5241
35d18     01 07 8A FA | 	rdpin	_var04, _var02
35d1c     69 06 62 FD | 	rev	_var04
35d20     1B 06 FE F9 | 	movbyts	_var04, #27
35d24     09 07 62 FC | 	wrlong	_var04, arg01
35d28     04 12 06 F1 | 	add	arg01, #4
35d2c     F8 05 6E FB | 	djnz	_var03, #LR__5240
35d30                 | LR__5242
35d30     03 14 0E F5 | 	and	arg02, #3 wz
35d34     24 00 90 AD |  if_e	jmp	#LR__5245
35d38     01 4F 18 FC | 	wxpin	#39, _var02
35d3c                 | LR__5243
35d3c     00 11 28 FC | 	wypin	#8, _var01
35d40                 | LR__5244
35d40     40 02 72 FD | 	testp	_var02 wc
35d44     F8 FF 9F 3D |  if_ae	jmp	#LR__5244
35d48     01 07 8A FA | 	rdpin	_var04, _var02
35d4c     69 06 62 FD | 	rev	_var04
35d50     09 07 42 FC | 	wrbyte	_var04, arg01
35d54     01 12 06 F1 | 	add	arg01, #1
35d58     F8 15 6E FB | 	djnz	arg02, #LR__5243
35d5c                 | LR__5245
35d5c                 | _fatfs_cc_rcvr_mmc_1197_ret
35d5c     2D 00 64 FD | 	ret
35d60                 | 
35d60                 | _fatfs_cc_wait_ready_1201
35d60     01 4A 05 F6 | 	mov	COUNT_, #1
35d64     A8 00 A0 FD | 	call	#pushregs_
35d68     10 F0 07 F1 | 	add	ptra, #16
35d6c     1A FA 61 FD | 	getct	result1
35d70     08 4E 05 F1 | 	add	fp, #8
35d74     A7 FA 61 FC | 	wrlong	result1, fp
35d78     14 26 06 FB | 	rdlong	local01, #20
35d7c     01 26 46 F0 | 	shr	local01, #1
35d80     04 4E 05 F1 | 	add	fp, #4
35d84     A7 26 62 FC | 	wrlong	local01, fp
35d88     0C 4E 85 F1 | 	sub	fp, #12
35d8c                 | ' {
35d8c                 | ' 	BYTE d;
35d8c                 | ' 	UINT tmr, tmout;
35d8c                 | ' 
35d8c                 | ' 	tmr = _cnt();
35d8c                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
35d8c                 | ' 	for(;;) {
35d8c                 | LR__5250
35d8c     04 4E 05 F1 | 	add	fp, #4
35d90     A7 12 02 F6 | 	mov	arg01, fp
35d94     04 4E 85 F1 | 	sub	fp, #4
35d98     01 14 06 F6 | 	mov	arg02, #1
35d9c     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_1197
35da0     04 4E 05 F1 | 	add	fp, #4
35da4     A7 26 C2 FA | 	rdbyte	local01, fp
35da8     04 4E 85 F1 | 	sub	fp, #4
35dac     FF 26 0E F2 | 	cmp	local01, #255 wz
35db0     01 FA 05 A6 |  if_e	mov	result1, #1
35db4     28 00 90 AD |  if_e	jmp	#LR__5251
35db8     1A FA 61 FD | 	getct	result1
35dbc     08 4E 05 F1 | 	add	fp, #8
35dc0     A7 26 02 FB | 	rdlong	local01, fp
35dc4     13 FB 81 F1 | 	sub	result1, local01
35dc8     04 4E 05 F1 | 	add	fp, #4
35dcc     A7 26 02 FB | 	rdlong	local01, fp
35dd0     0C 4E 85 F1 | 	sub	fp, #12
35dd4     13 FB 11 F2 | 	cmp	result1, local01 wc
35dd8     00 FA 05 36 |  if_ae	mov	result1, #0
35ddc     AC FF 9F CD |  if_b	jmp	#LR__5250
35de0                 | LR__5251
35de0     A7 F0 03 F6 | 	mov	ptra, fp
35de4     B2 00 A0 FD | 	call	#popregs_
35de8                 | _fatfs_cc_wait_ready_1201_ret
35de8     2D 00 64 FD | 	ret
35dec                 | 
35dec                 | _fatfs_cc_deselect_1207
35dec     00 4A 05 F6 | 	mov	COUNT_, #0
35df0     A8 00 A0 FD | 	call	#pushregs_
35df4     14 F0 07 F1 | 	add	ptra, #20
35df8     01 00 00 FF 
35dfc     14 E4 05 F1 | 	add	objptr, ##532
35e00     F2 14 02 FB | 	rdlong	arg02, objptr
35e04     04 4E 05 F1 | 	add	fp, #4
35e08     A7 14 62 FC | 	wrlong	arg02, fp
35e0c     04 E4 85 F1 | 	sub	objptr, #4
35e10     F2 14 02 FB | 	rdlong	arg02, objptr
35e14     04 4E 05 F1 | 	add	fp, #4
35e18     A7 14 62 FC | 	wrlong	arg02, fp
35e1c     08 E4 05 F1 | 	add	objptr, #8
35e20     F2 14 02 FB | 	rdlong	arg02, objptr
35e24     04 4E 05 F1 | 	add	fp, #4
35e28     A7 14 62 FC | 	wrlong	arg02, fp
35e2c     04 E4 05 F1 | 	add	objptr, #4
35e30     F2 14 02 FB | 	rdlong	arg02, objptr
35e34     01 00 00 FF 
35e38     1C E4 85 F1 | 	sub	objptr, ##540
35e3c     04 4E 05 F1 | 	add	fp, #4
35e40     A7 14 62 FC | 	wrlong	arg02, fp
35e44     0C 4E 85 F1 | 	sub	fp, #12
35e48     A7 12 02 FB | 	rdlong	arg01, fp
35e4c     04 4E 85 F1 | 	sub	fp, #4
35e50     59 12 62 FD | 	drvh	arg01
35e54     1F 20 64 FD | 	waitx	#16
35e58     A7 12 02 F6 | 	mov	arg01, fp
35e5c     01 14 06 F6 | 	mov	arg02, #1
35e60     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_1197
35e64     A7 F0 03 F6 | 	mov	ptra, fp
35e68     B2 00 A0 FD | 	call	#popregs_
35e6c                 | _fatfs_cc_deselect_1207_ret
35e6c     2D 00 64 FD | 	ret
35e70                 | 
35e70                 | _fatfs_cc_select_1211
35e70     00 4A 05 F6 | 	mov	COUNT_, #0
35e74     A8 00 A0 FD | 	call	#pushregs_
35e78     10 F0 07 F1 | 	add	ptra, #16
35e7c     01 00 00 FF 
35e80     14 E4 05 F1 | 	add	objptr, ##532
35e84     F2 14 02 FB | 	rdlong	arg02, objptr
35e88     08 4E 05 F1 | 	add	fp, #8
35e8c     A7 14 62 FC | 	wrlong	arg02, fp
35e90     08 E4 05 F1 | 	add	objptr, #8
35e94     F2 12 02 FB | 	rdlong	arg01, objptr
35e98     01 00 00 FF 
35e9c     1C E4 85 F1 | 	sub	objptr, ##540
35ea0     04 4E 05 F1 | 	add	fp, #4
35ea4     A7 12 62 FC | 	wrlong	arg01, fp
35ea8     50 12 62 FD | 	fltl	arg01
35eac     04 4E 85 F1 | 	sub	fp, #4
35eb0     A7 12 02 FB | 	rdlong	arg01, fp
35eb4     58 12 62 FD | 	drvl	arg01
35eb8     1F 20 64 FD | 	waitx	#16
35ebc     04 4E 05 F1 | 	add	fp, #4
35ec0     A7 12 02 FB | 	rdlong	arg01, fp
35ec4     41 12 62 FD | 	dirh	arg01
35ec8     08 4E 85 F1 | 	sub	fp, #8
35ecc     A7 12 02 F6 | 	mov	arg01, fp
35ed0     04 4E 85 F1 | 	sub	fp, #4
35ed4     01 14 06 F6 | 	mov	arg02, #1
35ed8     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1197
35edc     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_1201
35ee0     00 FA 0D F2 | 	cmp	result1, #0 wz
35ee4     01 FA 05 56 |  if_ne	mov	result1, #1
35ee8     08 00 90 5D |  if_ne	jmp	#LR__5260
35eec     FC FE BF FD | 	call	#_fatfs_cc_deselect_1207
35ef0                 | ' 
35ef0                 | ' 	deselect();
35ef0                 | ' 	return 0;
35ef0     00 FA 05 F6 | 	mov	result1, #0
35ef4                 | LR__5260
35ef4     A7 F0 03 F6 | 	mov	ptra, fp
35ef8     B2 00 A0 FD | 	call	#popregs_
35efc                 | _fatfs_cc_select_1211_ret
35efc     2D 00 64 FD | 	ret
35f00                 | 
35f00                 | _fatfs_cc_rcvr_datablock_1215
35f00     01 4A 05 F6 | 	mov	COUNT_, #1
35f04     A8 00 A0 FD | 	call	#pushregs_
35f08     18 F0 07 F1 | 	add	ptra, #24
35f0c     04 4E 05 F1 | 	add	fp, #4
35f10     A7 12 62 FC | 	wrlong	arg01, fp
35f14     04 4E 05 F1 | 	add	fp, #4
35f18     A7 14 62 FC | 	wrlong	arg02, fp
35f1c     1A FA 61 FD | 	getct	result1
35f20     08 4E 05 F1 | 	add	fp, #8
35f24     A7 FA 61 FC | 	wrlong	result1, fp
35f28     14 26 06 FB | 	rdlong	local01, #20
35f2c     03 26 46 F0 | 	shr	local01, #3
35f30     04 4E 05 F1 | 	add	fp, #4
35f34     A7 26 62 FC | 	wrlong	local01, fp
35f38     14 4E 85 F1 | 	sub	fp, #20
35f3c                 | ' 	BYTE *buff,
35f3c                 | ' 	UINT btr
35f3c                 | ' )
35f3c                 | ' {
35f3c                 | ' 	BYTE d[2];
35f3c                 | ' 	UINT tmr, tmout;
35f3c                 | ' 
35f3c                 | ' 	tmr = _cnt();
35f3c                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
35f3c                 | ' 	for(;;) {
35f3c                 | LR__5270
35f3c     0C 4E 05 F1 | 	add	fp, #12
35f40     A7 12 02 F6 | 	mov	arg01, fp
35f44     0C 4E 85 F1 | 	sub	fp, #12
35f48     01 14 06 F6 | 	mov	arg02, #1
35f4c     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1197
35f50     0C 4E 05 F1 | 	add	fp, #12
35f54     A7 26 C2 FA | 	rdbyte	local01, fp
35f58     0C 4E 85 F1 | 	sub	fp, #12
35f5c     FF 26 0E F2 | 	cmp	local01, #255 wz
35f60     28 00 90 5D |  if_ne	jmp	#LR__5271
35f64     1A FA 61 FD | 	getct	result1
35f68     FD 26 02 F6 | 	mov	local01, result1
35f6c     10 4E 05 F1 | 	add	fp, #16
35f70     A7 14 02 FB | 	rdlong	arg02, fp
35f74     0A 27 82 F1 | 	sub	local01, arg02
35f78     04 4E 05 F1 | 	add	fp, #4
35f7c     A7 14 02 FB | 	rdlong	arg02, fp
35f80     14 4E 85 F1 | 	sub	fp, #20
35f84     0A 27 12 F2 | 	cmp	local01, arg02 wc
35f88     B0 FF 9F CD |  if_b	jmp	#LR__5270
35f8c                 | LR__5271
35f8c     0C 4E 05 F1 | 	add	fp, #12
35f90     A7 26 C2 FA | 	rdbyte	local01, fp
35f94     0C 4E 85 F1 | 	sub	fp, #12
35f98     FE 26 0E F2 | 	cmp	local01, #254 wz
35f9c     00 FA 05 56 |  if_ne	mov	result1, #0
35fa0     30 00 90 5D |  if_ne	jmp	#LR__5272
35fa4     04 4E 05 F1 | 	add	fp, #4
35fa8     A7 12 02 FB | 	rdlong	arg01, fp
35fac     04 4E 05 F1 | 	add	fp, #4
35fb0     A7 14 02 FB | 	rdlong	arg02, fp
35fb4     08 4E 85 F1 | 	sub	fp, #8
35fb8     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1197
35fbc     0C 4E 05 F1 | 	add	fp, #12
35fc0     A7 12 02 F6 | 	mov	arg01, fp
35fc4     0C 4E 85 F1 | 	sub	fp, #12
35fc8     02 14 06 F6 | 	mov	arg02, #2
35fcc     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1197
35fd0                 | ' 
35fd0                 | ' 	rcvr_mmc(buff, btr);
35fd0                 | ' 	rcvr_mmc(d, 2);
35fd0                 | ' 
35fd0                 | ' 	return 1;
35fd0     01 FA 05 F6 | 	mov	result1, #1
35fd4                 | LR__5272
35fd4     A7 F0 03 F6 | 	mov	ptra, fp
35fd8     B2 00 A0 FD | 	call	#popregs_
35fdc                 | _fatfs_cc_rcvr_datablock_1215_ret
35fdc     2D 00 64 FD | 	ret
35fe0                 | 
35fe0                 | _fatfs_cc_xmit_datablock_1217
35fe0     00 4A 05 F6 | 	mov	COUNT_, #0
35fe4     A8 00 A0 FD | 	call	#pushregs_
35fe8     10 F0 07 F1 | 	add	ptra, #16
35fec     04 4E 05 F1 | 	add	fp, #4
35ff0     A7 12 62 FC | 	wrlong	arg01, fp
35ff4     04 4E 05 F1 | 	add	fp, #4
35ff8     A7 14 42 FC | 	wrbyte	arg02, fp
35ffc     08 4E 85 F1 | 	sub	fp, #8
36000     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_1201
36004     00 FA 0D F2 | 	cmp	result1, #0 wz
36008     00 FA 05 A6 |  if_e	mov	result1, #0
3600c     90 00 90 AD |  if_e	jmp	#LR__5281
36010     08 4E 05 F1 | 	add	fp, #8
36014     A7 14 C2 FA | 	rdbyte	arg02, fp
36018     04 4E 05 F1 | 	add	fp, #4
3601c     A7 14 42 FC | 	wrbyte	arg02, fp
36020     A7 12 02 F6 | 	mov	arg01, fp
36024     0C 4E 85 F1 | 	sub	fp, #12
36028     01 14 06 F6 | 	mov	arg02, #1
3602c     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_1190
36030     08 4E 05 F1 | 	add	fp, #8
36034     A7 14 C2 FA | 	rdbyte	arg02, fp
36038     08 4E 85 F1 | 	sub	fp, #8
3603c     FD 14 0E F2 | 	cmp	arg02, #253 wz
36040     58 00 90 AD |  if_e	jmp	#LR__5280
36044     04 4E 05 F1 | 	add	fp, #4
36048     A7 12 02 FB | 	rdlong	arg01, fp
3604c     04 4E 85 F1 | 	sub	fp, #4
36050     09 14 C6 F9 | 	decod	arg02, #9
36054     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_1190
36058     0C 4E 05 F1 | 	add	fp, #12
3605c     A7 12 02 F6 | 	mov	arg01, fp
36060     0C 4E 85 F1 | 	sub	fp, #12
36064     02 14 06 F6 | 	mov	arg02, #2
36068     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1197
3606c     0C 4E 05 F1 | 	add	fp, #12
36070     A7 12 02 F6 | 	mov	arg01, fp
36074     0C 4E 85 F1 | 	sub	fp, #12
36078     01 14 06 F6 | 	mov	arg02, #1
3607c     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1197
36080     0C 4E 05 F1 | 	add	fp, #12
36084     A7 14 C2 FA | 	rdbyte	arg02, fp
36088     0C 4E 85 F1 | 	sub	fp, #12
3608c     1F 14 06 F5 | 	and	arg02, #31
36090     05 14 0E F2 | 	cmp	arg02, #5 wz
36094                 | ' 			return 0;
36094     00 FA 05 56 |  if_ne	mov	result1, #0
36098     04 00 90 5D |  if_ne	jmp	#LR__5281
3609c                 | LR__5280
3609c                 | ' 	}
3609c                 | ' 
3609c                 | ' 	return 1;
3609c     01 FA 05 F6 | 	mov	result1, #1
360a0                 | LR__5281
360a0     A7 F0 03 F6 | 	mov	ptra, fp
360a4     B2 00 A0 FD | 	call	#popregs_
360a8                 | _fatfs_cc_xmit_datablock_1217_ret
360a8     2D 00 64 FD | 	ret
360ac                 | 
360ac                 | _fatfs_cc_send_cmd_1221
360ac     01 4A 05 F6 | 	mov	COUNT_, #1
360b0     A8 00 A0 FD | 	call	#pushregs_
360b4     1C F0 07 F1 | 	add	ptra, #28
360b8                 | _fatfs_cc_send_cmd_1221_enter
360b8     04 4E 05 F1 | 	add	fp, #4
360bc     A7 12 42 FC | 	wrbyte	arg01, fp
360c0     04 4E 05 F1 | 	add	fp, #4
360c4     A7 14 62 FC | 	wrlong	arg02, fp
360c8     04 4E 85 F1 | 	sub	fp, #4
360cc     A7 FA C1 FA | 	rdbyte	result1, fp
360d0     04 4E 85 F1 | 	sub	fp, #4
360d4     80 FA CD F7 | 	test	result1, #128 wz
360d8     44 00 90 AD |  if_e	jmp	#LR__5290
360dc     04 4E 05 F1 | 	add	fp, #4
360e0     A7 14 C2 FA | 	rdbyte	arg02, fp
360e4     7F 14 06 F5 | 	and	arg02, #127
360e8     A7 14 42 FC | 	wrbyte	arg02, fp
360ec     04 4E 85 F1 | 	sub	fp, #4
360f0     37 12 06 F6 | 	mov	arg01, #55
360f4     00 14 06 F6 | 	mov	arg02, #0
360f8     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_1221
360fc     0C 4E 05 F1 | 	add	fp, #12
36100     A7 FA 41 FC | 	wrbyte	result1, fp
36104     A7 14 C2 FA | 	rdbyte	arg02, fp
36108     0C 4E 85 F1 | 	sub	fp, #12
3610c     02 14 16 F2 | 	cmp	arg02, #2 wc
36110     0C 4E 05 31 |  if_ae	add	fp, #12
36114     A7 FA C1 3A |  if_ae	rdbyte	result1, fp
36118     0C 4E 85 31 |  if_ae	sub	fp, #12
3611c     6C 01 90 3D |  if_ae	jmp	#LR__5294
36120                 | LR__5290
36120     04 4E 05 F1 | 	add	fp, #4
36124     A7 14 C2 FA | 	rdbyte	arg02, fp
36128     04 4E 85 F1 | 	sub	fp, #4
3612c     0C 14 0E F2 | 	cmp	arg02, #12 wz
36130     14 00 90 AD |  if_e	jmp	#LR__5291
36134     B4 FC BF FD | 	call	#_fatfs_cc_deselect_1207
36138     34 FD BF FD | 	call	#_fatfs_cc_select_1211
3613c     00 FA 0D F2 | 	cmp	result1, #0 wz
36140     FF FA 05 A6 |  if_e	mov	result1, #255
36144     44 01 90 AD |  if_e	jmp	#LR__5294
36148                 | LR__5291
36148     04 4E 05 F1 | 	add	fp, #4
3614c     A7 14 C2 FA | 	rdbyte	arg02, fp
36150     40 FA 05 F6 | 	mov	result1, #64
36154     0A FB 41 F5 | 	or	result1, arg02
36158     10 4E 05 F1 | 	add	fp, #16
3615c     A7 FA 41 FC | 	wrbyte	result1, fp
36160     0C 4E 85 F1 | 	sub	fp, #12
36164     A7 FA 01 FB | 	rdlong	result1, fp
36168     18 FA 45 F0 | 	shr	result1, #24
3616c     0D 4E 05 F1 | 	add	fp, #13
36170     A7 FA 41 FC | 	wrbyte	result1, fp
36174     0D 4E 85 F1 | 	sub	fp, #13
36178     A7 FA 01 FB | 	rdlong	result1, fp
3617c     10 FA 45 F0 | 	shr	result1, #16
36180     0E 4E 05 F1 | 	add	fp, #14
36184     A7 FA 41 FC | 	wrbyte	result1, fp
36188     0E 4E 85 F1 | 	sub	fp, #14
3618c     A7 FA 01 FB | 	rdlong	result1, fp
36190     08 FA 45 F0 | 	shr	result1, #8
36194     0F 4E 05 F1 | 	add	fp, #15
36198     A7 FA 41 FC | 	wrbyte	result1, fp
3619c     0F 4E 85 F1 | 	sub	fp, #15
361a0     A7 FA 01 FB | 	rdlong	result1, fp
361a4     10 4E 05 F1 | 	add	fp, #16
361a8     A7 FA 41 FC | 	wrbyte	result1, fp
361ac     0C 4E 85 F1 | 	sub	fp, #12
361b0     A7 02 48 FC | 	wrbyte	#1, fp
361b4     08 4E 85 F1 | 	sub	fp, #8
361b8     A7 FA C9 FA | 	rdbyte	result1, fp wz
361bc     04 4E 85 F1 | 	sub	fp, #4
361c0     0C 4E 05 A1 |  if_e	add	fp, #12
361c4     A7 2A 49 AC |  if_e	wrbyte	#149, fp
361c8     0C 4E 85 A1 |  if_e	sub	fp, #12
361cc     04 4E 05 F1 | 	add	fp, #4
361d0     A7 FA C1 FA | 	rdbyte	result1, fp
361d4     04 4E 85 F1 | 	sub	fp, #4
361d8     08 FA 0D F2 | 	cmp	result1, #8 wz
361dc     0C 4E 05 A1 |  if_e	add	fp, #12
361e0     A7 0E 49 AC |  if_e	wrbyte	#135, fp
361e4     0C 4E 85 A1 |  if_e	sub	fp, #12
361e8     0C 4E 05 F1 | 	add	fp, #12
361ec     A7 14 C2 FA | 	rdbyte	arg02, fp
361f0     0D 4E 05 F1 | 	add	fp, #13
361f4     A7 14 42 FC | 	wrbyte	arg02, fp
361f8     05 4E 85 F1 | 	sub	fp, #5
361fc     A7 12 02 F6 | 	mov	arg01, fp
36200     14 4E 85 F1 | 	sub	fp, #20
36204     06 14 06 F6 | 	mov	arg02, #6
36208     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_1190
3620c     04 4E 05 F1 | 	add	fp, #4
36210     A7 26 C2 FA | 	rdbyte	local01, fp
36214     04 4E 85 F1 | 	sub	fp, #4
36218     0C 26 0E F2 | 	cmp	local01, #12 wz
3621c     10 4E 05 A1 |  if_e	add	fp, #16
36220     A7 12 02 A6 |  if_e	mov	arg01, fp
36224     10 4E 85 A1 |  if_e	sub	fp, #16
36228     01 14 06 A6 |  if_e	mov	arg02, #1
3622c     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_1197
36230     0C 4E 05 F1 | 	add	fp, #12
36234     A7 14 48 FC | 	wrbyte	#10, fp
36238     0C 4E 85 F1 | 	sub	fp, #12
3623c                 | ' 	n = 10;
3623c                 | ' 	do
3623c                 | LR__5292
3623c     10 4E 05 F1 | 	add	fp, #16
36240     A7 12 02 F6 | 	mov	arg01, fp
36244     10 4E 85 F1 | 	sub	fp, #16
36248     01 14 06 F6 | 	mov	arg02, #1
3624c     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_1197
36250     10 4E 05 F1 | 	add	fp, #16
36254     A7 26 C2 FA | 	rdbyte	local01, fp
36258     10 4E 85 F1 | 	sub	fp, #16
3625c     80 26 CE F7 | 	test	local01, #128 wz
36260     1C 00 90 AD |  if_e	jmp	#LR__5293
36264     0C 4E 05 F1 | 	add	fp, #12
36268     A7 26 C2 FA | 	rdbyte	local01, fp
3626c     01 26 86 F1 | 	sub	local01, #1
36270     A7 26 42 FC | 	wrbyte	local01, fp
36274     A7 26 CA FA | 	rdbyte	local01, fp wz
36278     0C 4E 85 F1 | 	sub	fp, #12
3627c     BC FF 9F 5D |  if_ne	jmp	#LR__5292
36280                 | LR__5293
36280                 | ' 
36280                 | ' 	return d;
36280     10 4E 05 F1 | 	add	fp, #16
36284     A7 FA C1 FA | 	rdbyte	result1, fp
36288     10 4E 85 F1 | 	sub	fp, #16
3628c                 | LR__5294
3628c     A7 F0 03 F6 | 	mov	ptra, fp
36290     B2 00 A0 FD | 	call	#popregs_
36294                 | _fatfs_cc_send_cmd_1221_ret
36294     2D 00 64 FD | 	ret
36298                 | 
36298                 | _fatfs_cc_disk_deinitialize
36298     03 4A 05 F6 | 	mov	COUNT_, #3
3629c     A8 00 A0 FD | 	call	#pushregs_
362a0     00 12 4E F2 | 	cmps	arg01, #0 wz
362a4     01 00 00 FF 
362a8     14 E4 05 F1 | 	add	objptr, ##532
362ac     F2 12 02 FB | 	rdlong	arg01, objptr
362b0     04 E4 85 F1 | 	sub	objptr, #4
362b4     F2 26 02 FB | 	rdlong	local01, objptr
362b8     08 E4 05 F1 | 	add	objptr, #8
362bc     F2 28 02 FB | 	rdlong	local02, objptr
362c0     04 E4 05 F1 | 	add	objptr, #4
362c4     F2 2A 02 FB | 	rdlong	local03, objptr
362c8     01 00 00 FF 
362cc     1C E4 85 F1 | 	sub	objptr, ##540
362d0                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
362d0                 | '         return RES_NOTRDY;
362d0     03 FA 05 56 |  if_ne	mov	result1, #3
362d4     2C 00 90 5D |  if_ne	jmp	#LR__5300
362d8     50 12 62 FD | 	fltl	arg01
362dc     09 01 08 FC | 	wrpin	#0, arg01
362e0     50 26 62 FD | 	fltl	local01
362e4     13 01 08 FC | 	wrpin	#0, local01
362e8     50 28 62 FD | 	fltl	local02
362ec     14 01 08 FC | 	wrpin	#0, local02
362f0     50 2A 62 FD | 	fltl	local03
362f4     15 01 08 FC | 	wrpin	#0, local03
362f8     0A 12 06 F6 | 	mov	arg01, #10
362fc     44 0E BF FD | 	call	#__system___waitms
36300                 | '     }
36300                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
36300                 | '     _pinclear(PIN_SS);
36300                 | '     _pinclear(PIN_CLK);
36300                 | '     _pinclear(PIN_DI);
36300                 | '     _pinclear(PIN_DO);
36300                 | ' 
36300                 | '     _waitms(10);
36300                 | ' 
36300                 | '     return 0;
36300     00 FA 05 F6 | 	mov	result1, #0
36304                 | LR__5300
36304     A7 F0 03 F6 | 	mov	ptra, fp
36308     B2 00 A0 FD | 	call	#popregs_
3630c                 | _fatfs_cc_disk_deinitialize_ret
3630c     2D 00 64 FD | 	ret
36310                 | 
36310                 | _fatfs_cc_gettimeofday
36310     04 4A 05 F6 | 	mov	COUNT_, #4
36314     A8 00 A0 FD | 	call	#pushregs_
36318     09 27 02 F6 | 	mov	local01, arg01
3631c     00 0A BF FD | 	call	#__system___getus
36320     FD 12 02 F6 | 	mov	arg01, result1
36324     02 00 00 FF 
36328     58 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
3632c     F6 28 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
36330     09 FB 01 F6 | 	mov	result1, arg01
36334     14 FB 81 F1 | 	sub	result1, local02
36338     A1 07 00 FF 
3633c     40 FA 15 FD | 	qdiv	result1, ##1000000
36340     02 00 00 FF 
36344     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
36348     18 28 62 FD | 	getqx	local02
3634c     A1 07 00 FF 
36350     40 FA 15 FD | 	qdiv	result1, ##1000000
36354     00 28 0E F2 | 	cmp	local02, #0 wz
36358     19 2A 62 FD | 	getqy	local03
3635c     28 00 90 AD |  if_e	jmp	#LR__5310
36360     02 00 00 FF 
36364     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
36368     F6 2C 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
3636c     14 2D 02 F1 | 	add	local04, local02
36370     F6 2C 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
36374     15 13 82 F1 | 	sub	arg01, local03
36378     04 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
3637c     F6 12 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
36380     02 00 00 FF 
36384     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
36388                 | LR__5310
36388     02 00 00 FF 
3638c     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
36390     F6 2C 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
36394     02 00 00 FF 
36398     54 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
3639c     13 2D 62 FC | 	wrlong	local04, local01
363a0     04 26 06 F1 | 	add	local01, #4
363a4     13 2B 62 FC | 	wrlong	local03, local01
363a8                 | '         lastsec += secs;
363a8                 | '         lastus = now - leftover;
363a8                 | '     }
363a8                 | '     tv->tv_sec = lastsec;
363a8                 | '     tv->tv_usec = leftover;
363a8                 | '     return 0;
363a8     00 FA 05 F6 | 	mov	result1, #0
363ac     A7 F0 03 F6 | 	mov	ptra, fp
363b0     B2 00 A0 FD | 	call	#popregs_
363b4                 | _fatfs_cc_gettimeofday_ret
363b4     2D 00 64 FD | 	ret
363b8                 | 
363b8                 | _fatfs_cc__is_leap_year
363b8     09 FB 51 F6 | 	abs	result1, arg01 wc
363bc     03 FA 05 F5 | 	and	result1, #3
363c0     FD FA 89 F6 | 	negc	result1, result1 wz
363c4     38 00 90 5D |  if_ne	jmp	#LR__5321
363c8     09 FB 51 F6 | 	abs	result1, arg01 wc
363cc     64 FA 15 FD | 	qdiv	result1, #100
363d0     19 FA 61 FD | 	getqy	result1
363d4     FD FA 89 F6 | 	negc	result1, result1 wz
363d8     1C 00 90 5D |  if_ne	jmp	#LR__5320
363dc     09 FB 51 F6 | 	abs	result1, arg01 wc
363e0     90 FB 15 FD | 	qdiv	result1, #400
363e4                 | '       return (0 == y % 400);
363e4     00 FA 05 F6 | 	mov	result1, #0
363e8     19 00 62 FD | 	getqy	_var01
363ec     00 01 8A F6 | 	negc	_var01, _var01 wz
363f0     01 FA 05 A6 |  if_e	mov	result1, #1
363f4     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
363f8                 | LR__5320
363f8                 | '     return 1;
363f8     01 FA 05 F6 | 	mov	result1, #1
363fc     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
36400                 | LR__5321
36400                 | '   }
36400                 | '   return 0;
36400     00 FA 05 F6 | 	mov	result1, #0
36404                 | _fatfs_cc__is_leap_year_ret
36404     2D 00 64 FD | 	ret
36408                 | 
36408                 | _fatfs_cc___tzoffset
36408     09 01 0A F6 | 	mov	_var01, arg01 wz
3640c     FF FF FF FF 
36410     0A FF 6B FC | 	wrlong	##-1, arg02
36414     01 02 06 F6 | 	mov	_var02, #1
36418     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
3641c                 | '                 return 0;
3641c     00 FA 05 A6 |  if_e	mov	result1, #0
36420     94 02 90 AD |  if_e	jmp	#LR__5347
36424     0A 01 68 FC | 	wrlong	#0, arg02
36428     02 00 00 FF 
3642c     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
36430     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
36434                 | ' 
36434                 | '        *hasdst = 0;
36434                 | ' 
36434                 | ' 	n = stdname;
36434                 | '         while (*s && isalpha(*s)) {
36434     02 00 00 FF 
36438     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
3643c     97 28 48 FB | 	callpa	#(@LR__5331-@LR__5330)>>2,fcache_load_ptr_
36440                 | LR__5330
36440     00 05 CA FA | 	rdbyte	_var03, _var01 wz
36444     48 00 90 AD |  if_e	jmp	#LR__5332
36448     00 13 C2 FA | 	rdbyte	arg01, _var01
3644c                 | ' {
3644c                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
3644c     80 12 36 F3 | 	fle	arg01, #128 wc
36450                 | '     return __ctype[c];
36450     02 00 00 FF 
36454     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
36458     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
3645c     09 FB C1 FA | 	rdbyte	result1, arg01
36460     02 00 00 FF 
36464     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
36468     0C FA CD F7 | 	test	result1, #12 wz
3646c     20 00 90 AD |  if_e	jmp	#LR__5332
36470     00 09 02 F6 | 	mov	_var05, _var01
36474     00 0B 02 F6 | 	mov	_var06, _var01
36478     01 0A 06 F1 | 	add	_var06, #1
3647c     04 0D C2 FA | 	rdbyte	_var07, _var05
36480     05 01 02 F6 | 	mov	_var01, _var06
36484     03 0D 42 FC | 	wrbyte	_var07, _var04
36488     01 06 06 F1 | 	add	_var04, #1
3648c     B0 FF 9F FD | 	jmp	#LR__5330
36490                 | LR__5331
36490                 | LR__5332
36490     03 01 48 FC | 	wrbyte	#0, _var04
36494     00 0E 06 F6 | 	mov	_var08, #0
36498     00 05 C2 FA | 	rdbyte	_var03, _var01
3649c     2D 04 0E F2 | 	cmp	_var03, #45 wz
364a0     01 02 66 A6 |  if_e	neg	_var02, #1
364a4     01 00 06 A1 |  if_e	add	_var01, #1
364a8     97 28 48 FB | 	callpa	#(@LR__5334-@LR__5333)>>2,fcache_load_ptr_
364ac                 | '                 sgn = -1;
364ac                 | '                 s++;
364ac                 | '         }
364ac                 | '         while (isdigit(*s)) {
364ac                 | LR__5333
364ac     00 13 C2 FA | 	rdbyte	arg01, _var01
364b0                 | ' {
364b0                 | '   return  (__ctype_get(c) & 0x02 ) ;
364b0     80 12 36 F3 | 	fle	arg01, #128 wc
364b4                 | '     return __ctype[c];
364b4     02 00 00 FF 
364b8     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
364bc     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
364c0     09 FB C1 FA | 	rdbyte	result1, arg01
364c4     02 00 00 FF 
364c8     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
364cc     02 FA CD F7 | 	test	result1, #2 wz
364d0     28 00 90 AD |  if_e	jmp	#LR__5335
364d4     07 05 02 F6 | 	mov	_var03, _var08
364d8     02 04 66 F0 | 	shl	_var03, #2
364dc     07 05 02 F1 | 	add	_var03, _var08
364e0     01 04 66 F0 | 	shl	_var03, #1
364e4     00 09 C2 FA | 	rdbyte	_var05, _var01
364e8     30 08 86 F1 | 	sub	_var05, #48
364ec     04 05 02 F1 | 	add	_var03, _var05
364f0     02 0F 02 F6 | 	mov	_var08, _var03
364f4     01 00 06 F1 | 	add	_var01, #1
364f8     B0 FF 9F FD | 	jmp	#LR__5333
364fc                 | LR__5334
364fc                 | LR__5335
364fc     07 00 00 FF 
36500     10 0E 06 FD | 	qmul	_var08, ##3600
36504     00 05 C2 FA | 	rdbyte	_var03, _var01
36508     3A 04 0E F2 | 	cmp	_var03, #58 wz
3650c     18 10 62 FD | 	getqx	_var09
36510     70 00 90 5D |  if_ne	jmp	#LR__5339
36514     00 0E 06 F6 | 	mov	_var08, #0
36518     01 00 06 F1 | 	add	_var01, #1
3651c     97 28 48 FB | 	callpa	#(@LR__5337-@LR__5336)>>2,fcache_load_ptr_
36520                 | '                 x = 0;
36520                 | '                 s++;
36520                 | '                 while (isdigit(*s)) {
36520                 | LR__5336
36520     00 13 C2 FA | 	rdbyte	arg01, _var01
36524                 | ' {
36524                 | '   return  (__ctype_get(c) & 0x02 ) ;
36524     80 12 36 F3 | 	fle	arg01, #128 wc
36528                 | '     return __ctype[c];
36528     02 00 00 FF 
3652c     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
36530     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
36534     09 FB C1 FA | 	rdbyte	result1, arg01
36538     02 00 00 FF 
3653c     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
36540     02 FA CD F7 | 	test	result1, #2 wz
36544     28 00 90 AD |  if_e	jmp	#LR__5338
36548     07 05 02 F6 | 	mov	_var03, _var08
3654c     02 04 66 F0 | 	shl	_var03, #2
36550     07 05 02 F1 | 	add	_var03, _var08
36554     01 04 66 F0 | 	shl	_var03, #1
36558     00 09 C2 FA | 	rdbyte	_var05, _var01
3655c     30 08 86 F1 | 	sub	_var05, #48
36560     04 05 02 F1 | 	add	_var03, _var05
36564     02 0F 02 F6 | 	mov	_var08, _var03
36568     01 00 06 F1 | 	add	_var01, #1
3656c     B0 FF 9F FD | 	jmp	#LR__5336
36570                 | LR__5337
36570                 | LR__5338
36570     07 0D 02 F6 | 	mov	_var07, _var08
36574     04 0C 66 F0 | 	shl	_var07, #4
36578     07 0D 82 F1 | 	sub	_var07, _var08
3657c     02 0C 66 F0 | 	shl	_var07, #2
36580     06 11 02 F1 | 	add	_var09, _var07
36584                 | LR__5339
36584     02 00 00 FF 
36588     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
3658c     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
36590     00 13 C2 FA | 	rdbyte	arg01, _var01
36594                 | ' {
36594                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
36594     80 12 36 F3 | 	fle	arg01, #128 wc
36598                 | '     return __ctype[c];
36598     27 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
3659c     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
365a0     09 FB C1 FA | 	rdbyte	result1, arg01
365a4     02 00 00 FF 
365a8     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
365ac     0C FA CD F7 | 	test	result1, #12 wz
365b0     50 00 90 AD |  if_e	jmp	#LR__5342
365b4     0A 03 68 FC | 	wrlong	#1, arg02
365b8                 | '                 *hasdst = 1;
365b8                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
365b8                 | LR__5340
365b8     00 05 CA FA | 	rdbyte	_var03, _var01 wz
365bc     44 00 90 AD |  if_e	jmp	#LR__5341
365c0     00 13 C2 FA | 	rdbyte	arg01, _var01
365c4                 | ' {
365c4                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
365c4     80 12 36 F3 | 	fle	arg01, #128 wc
365c8                 | '     return __ctype[c];
365c8     02 00 00 FF 
365cc     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
365d0     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
365d4     09 FB C1 FA | 	rdbyte	result1, arg01
365d8     02 00 00 FF 
365dc     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
365e0     0C FA CD F7 | 	test	result1, #12 wz
365e4     1C 00 90 AD |  if_e	jmp	#LR__5341
365e8     00 0B 02 F6 | 	mov	_var06, _var01
365ec     01 0A 06 F1 | 	add	_var06, #1
365f0     00 0D C2 FA | 	rdbyte	_var07, _var01
365f4     05 01 02 F6 | 	mov	_var01, _var06
365f8     03 0D 42 FC | 	wrbyte	_var07, _var04
365fc     01 06 06 F1 | 	add	_var04, #1
36600     B4 FF 9F FD | 	jmp	#LR__5340
36604                 | LR__5341
36604                 | LR__5342
36604     03 01 48 FC | 	wrbyte	#0, _var04
36608     02 00 00 FF 
3660c     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
36610     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
36614     02 00 00 FF 
36618     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
3661c     20 00 90 AD |  if_e	jmp	#LR__5343
36620     02 00 00 FF 
36624     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
36628     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
3662c     08 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
36630     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
36634     02 00 00 FF 
36638     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
3663c     1C 00 90 FD | 	jmp	#LR__5344
36640                 | LR__5343
36640     02 00 00 FF 
36644     3E ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
36648     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
3664c     1A EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
36650     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
36654     02 00 00 FF 
36658     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
3665c                 | LR__5344
3665c     02 00 00 FF 
36660     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
36664     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
36668     02 00 00 FF 
3666c     35 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
36670     20 00 90 AD |  if_e	jmp	#LR__5345
36674     02 00 00 FF 
36678     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
3667c     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
36680     0D EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
36684     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
36688     02 00 00 FF 
3668c     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
36690     1C 00 90 FD | 	jmp	#LR__5346
36694                 | LR__5345
36694     02 00 00 FF 
36698     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
3669c     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
366a0     04 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
366a4     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
366a8     02 00 00 FF 
366ac     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
366b0                 | LR__5346
366b0     08 03 02 FD | 	qmul	_var02, _var09
366b4                 | ' 		_tzname[1] = stdname;
366b4                 | ' 
366b4                 | '         return sgn * off;
366b4     18 FA 61 FD | 	getqx	result1
366b8                 | LR__5347
366b8                 | _fatfs_cc___tzoffset_ret
366b8     2D 00 64 FD | 	ret
366bc                 | 
366bc                 | _fatfs_cc___indst
366bc     10 12 06 F1 | 	add	arg01, #16
366c0     09 01 02 FB | 	rdlong	_var01, arg01
366c4     10 12 86 F1 | 	sub	arg01, #16
366c8     02 00 0E F2 | 	cmp	_var01, #2 wz
366cc     30 00 90 5D |  if_ne	jmp	#LR__5350
366d0     07 00 06 F6 | 	mov	_var01, #7
366d4     18 12 06 F1 | 	add	arg01, #24
366d8     09 03 02 FB | 	rdlong	_var02, arg01
366dc     01 01 02 F1 | 	add	_var01, _var02
366e0     0C 12 86 F1 | 	sub	arg01, #12
366e4     09 05 02 FB | 	rdlong	_var03, arg01
366e8     02 01 82 F1 | 	sub	_var01, _var03
366ec     00 00 56 F2 | 	cmps	_var01, #0 wc
366f0                 | '                         return 1;
366f0     01 FA 05 C6 |  if_b	mov	result1, #1
366f4     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
366f8                 | '                 return 0;
366f8     00 FA 05 F6 | 	mov	result1, #0
366fc     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
36700                 | LR__5350
36700     10 12 06 F1 | 	add	arg01, #16
36704     09 01 02 FB | 	rdlong	_var01, arg01
36708     10 12 86 F1 | 	sub	arg01, #16
3670c     0A 00 0E F2 | 	cmp	_var01, #10 wz
36710     28 00 90 5D |  if_ne	jmp	#LR__5351
36714     18 12 06 F1 | 	add	arg01, #24
36718     09 01 02 FB | 	rdlong	_var01, arg01
3671c     0C 12 86 F1 | 	sub	arg01, #12
36720     09 07 02 FB | 	rdlong	_var04, arg01
36724     03 01 82 F1 | 	sub	_var01, _var04
36728     00 00 56 F2 | 	cmps	_var01, #0 wc
3672c                 | '                         return 0;
3672c     00 FA 05 C6 |  if_b	mov	result1, #0
36730     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
36734                 | '                 return 1;
36734     01 FA 05 F6 | 	mov	result1, #1
36738     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
3673c                 | LR__5351
3673c                 | '         }
3673c                 | ' 
3673c                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
3673c     00 00 06 F6 | 	mov	_var01, #0
36740     10 12 06 F1 | 	add	arg01, #16
36744     09 03 02 FB | 	rdlong	_var02, arg01
36748     10 12 86 F1 | 	sub	arg01, #16
3674c     03 02 56 F2 | 	cmps	_var02, #3 wc
36750     10 00 90 CD |  if_b	jmp	#LR__5352
36754     10 12 06 F1 | 	add	arg01, #16
36758     09 05 02 FB | 	rdlong	_var03, arg01
3675c     0A 04 56 F2 | 	cmps	_var03, #10 wc
36760     01 00 06 C6 |  if_b	mov	_var01, #1
36764                 | LR__5352
36764     00 FB 01 F6 | 	mov	result1, _var01
36768                 | _fatfs_cc___indst_ret
36768     2D 00 64 FD | 	ret
3676c                 | 
3676c                 | ' 	
3676c                 | ' 	FUNCTION pfunc(c as integer) as integer
3676c                 | ___strs_cl_pfunc
3676c                 | ' 		if (i < 16) then
3676c     04 E4 05 F1 | 	add	objptr, #4
36770     F2 FA 01 FB | 	rdlong	result1, objptr
36774     04 E4 85 F1 | 	sub	objptr, #4
36778     10 FA 55 F2 | 	cmps	result1, #16 wc
3677c     2C 00 90 3D |  if_ae	jmp	#LR__5360
36780     F2 FA 01 FB | 	rdlong	result1, objptr
36784     04 E4 05 F1 | 	add	objptr, #4
36788     F2 00 02 FB | 	rdlong	_var01, objptr
3678c     FD 00 02 F1 | 	add	_var01, result1
36790     00 13 42 FC | 	wrbyte	arg01, _var01
36794     F2 FA 01 FB | 	rdlong	result1, objptr
36798     01 FA 05 F1 | 	add	result1, #1
3679c     F2 FA 61 FC | 	wrlong	result1, objptr
367a0     04 E4 85 F1 | 	sub	objptr, #4
367a4                 | ' 			p(i) = c
367a4                 | ' 			i = i+1
367a4                 | ' 			return 1
367a4     01 FA 05 F6 | 	mov	result1, #1
367a8     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
367ac                 | LR__5360
367ac                 | ' 			return -1
367ac     01 FA 65 F6 | 	neg	result1, #1
367b0                 | ___strs_cl_pfunc_ret
367b0     2D 00 64 FD | 	ret
367b4                 | 
367b4                 | __struct__s_vfs_file_t_putchar
367b4     04 4A 05 F6 | 	mov	COUNT_, #4
367b8     A8 00 A0 FD | 	call	#pushregs_
367bc     1C E4 05 F1 | 	add	objptr, #28
367c0     F2 26 0A FB | 	rdlong	local01, objptr wz
367c4     1C E4 85 F1 | 	sub	objptr, #28
367c8     00 FA 05 A6 |  if_e	mov	result1, #0
367cc     48 00 90 AD |  if_e	jmp	#LR__5370
367d0     1C E4 05 F1 | 	add	objptr, #28
367d4     F2 28 02 FB | 	rdlong	local02, objptr
367d8     14 2B 02 F6 | 	mov	local03, local02
367dc     1C E4 85 F1 | 	sub	objptr, #28
367e0     13 2A 46 F7 | 	zerox	local03, #19
367e4     14 28 46 F0 | 	shr	local02, #20
367e8     02 28 66 F0 | 	shl	local02, #2
367ec     ED 28 02 F1 | 	add	local02, __methods__
367f0     14 29 02 FB | 	rdlong	local02, local02
367f4     F2 14 02 F6 | 	mov	arg02, objptr
367f8     F2 2C 02 F6 | 	mov	local04, objptr
367fc     15 E5 01 F6 | 	mov	objptr, local03
36800     2D 28 62 FD | 	call	local02
36804     16 E5 01 F6 | 	mov	objptr, local04
36808                 | '     return (i < 0) ? 0 : 1;
36808     00 FA 55 F2 | 	cmps	result1, #0 wc
3680c     00 26 06 C6 |  if_b	mov	local01, #0
36810     01 26 06 36 |  if_ae	mov	local01, #1
36814     13 FB 01 F6 | 	mov	result1, local01
36818                 | LR__5370
36818     A7 F0 03 F6 | 	mov	ptra, fp
3681c     B2 00 A0 FD | 	call	#popregs_
36820                 | __struct__s_vfs_file_t_putchar_ret
36820     2D 00 64 FD | 	ret
36824                 | 
36824                 | __struct__s_vfs_file_t_getchar
36824     03 4A 05 F6 | 	mov	COUNT_, #3
36828     A8 00 A0 FD | 	call	#pushregs_
3682c     20 E4 05 F1 | 	add	objptr, #32
36830     F2 12 0A FB | 	rdlong	arg01, objptr wz
36834     20 E4 85 F1 | 	sub	objptr, #32
36838     01 FA 65 A6 |  if_e	neg	result1, #1
3683c     38 00 90 AD |  if_e	jmp	#LR__5380
36840                 | '     return getcf(__this);
36840     20 E4 05 F1 | 	add	objptr, #32
36844     F2 26 02 FB | 	rdlong	local01, objptr
36848     13 29 02 F6 | 	mov	local02, local01
3684c     20 E4 85 F1 | 	sub	objptr, #32
36850     13 28 46 F7 | 	zerox	local02, #19
36854     14 26 46 F0 | 	shr	local01, #20
36858     02 26 66 F0 | 	shl	local01, #2
3685c     ED 26 02 F1 | 	add	local01, __methods__
36860     13 27 02 FB | 	rdlong	local01, local01
36864     F2 12 02 F6 | 	mov	arg01, objptr
36868     F2 2A 02 F6 | 	mov	local03, objptr
3686c     14 E5 01 F6 | 	mov	objptr, local02
36870     2D 26 62 FD | 	call	local01
36874     15 E5 01 F6 | 	mov	objptr, local03
36878                 | LR__5380
36878     A7 F0 03 F6 | 	mov	ptra, fp
3687c     B2 00 A0 FD | 	call	#popregs_
36880                 | __struct__s_vfs_file_t_getchar_ret
36880     2D 00 64 FD | 	ret
36884                 | 
36884                 | __struct___bas_wrap_sender_tx
36884     03 4A 05 F6 | 	mov	COUNT_, #3
36888     A8 00 A0 FD | 	call	#pushregs_
3688c     F2 26 02 FB | 	rdlong	local01, objptr
36890     13 29 02 F6 | 	mov	local02, local01
36894     13 26 46 F7 | 	zerox	local01, #19
36898     14 28 46 F0 | 	shr	local02, #20
3689c     02 28 66 F0 | 	shl	local02, #2
368a0     ED 28 02 F1 | 	add	local02, __methods__
368a4     14 29 02 FB | 	rdlong	local02, local02
368a8     F2 2A 02 F6 | 	mov	local03, objptr
368ac     13 E5 01 F6 | 	mov	objptr, local01
368b0     2D 28 62 FD | 	call	local02
368b4     15 E5 01 F6 | 	mov	objptr, local03
368b8     01 FA 05 F6 | 	mov	result1, #1
368bc     A7 F0 03 F6 | 	mov	ptra, fp
368c0     B2 00 A0 FD | 	call	#popregs_
368c4                 | __struct___bas_wrap_sender_tx_ret
368c4     2D 00 64 FD | 	ret
368c8                 | 
368c8                 | __struct___bas_wrap_sender_rx
368c8     03 4A 05 F6 | 	mov	COUNT_, #3
368cc     A8 00 A0 FD | 	call	#pushregs_
368d0     04 E4 05 F1 | 	add	objptr, #4
368d4     F2 26 02 FB | 	rdlong	local01, objptr
368d8     13 29 02 F6 | 	mov	local02, local01
368dc     04 E4 85 F1 | 	sub	objptr, #4
368e0     13 28 46 F7 | 	zerox	local02, #19
368e4     14 26 46 F0 | 	shr	local01, #20
368e8     02 26 66 F0 | 	shl	local01, #2
368ec     ED 26 02 F1 | 	add	local01, __methods__
368f0     13 27 02 FB | 	rdlong	local01, local01
368f4     F2 2A 02 F6 | 	mov	local03, objptr
368f8     14 E5 01 F6 | 	mov	objptr, local02
368fc     2D 26 62 FD | 	call	local01
36900     15 E5 01 F6 | 	mov	objptr, local03
36904     A7 F0 03 F6 | 	mov	ptra, fp
36908     B2 00 A0 FD | 	call	#popregs_
3690c                 | __struct___bas_wrap_sender_rx_ret
3690c     2D 00 64 FD | 	ret
36910                 | 
36910                 | __struct___bas_wrap_sender_close
36910     03 4A 05 F6 | 	mov	COUNT_, #3
36914     A8 00 A0 FD | 	call	#pushregs_
36918     08 E4 05 F1 | 	add	objptr, #8
3691c     F2 26 02 FB | 	rdlong	local01, objptr
36920     13 29 02 F6 | 	mov	local02, local01
36924     08 E4 85 F1 | 	sub	objptr, #8
36928     13 28 46 F7 | 	zerox	local02, #19
3692c     14 26 46 F0 | 	shr	local01, #20
36930     02 26 66 F0 | 	shl	local01, #2
36934     ED 26 02 F1 | 	add	local01, __methods__
36938     13 27 02 FB | 	rdlong	local01, local01
3693c     F2 2A 02 F6 | 	mov	local03, objptr
36940     14 E5 01 F6 | 	mov	objptr, local02
36944     2D 26 62 FD | 	call	local01
36948     15 E5 01 F6 | 	mov	objptr, local03
3694c     A7 F0 03 F6 | 	mov	ptra, fp
36950     B2 00 A0 FD | 	call	#popregs_
36954                 | __struct___bas_wrap_sender_close_ret
36954     2D 00 64 FD | 	ret
36958                 | 
36958                 | LR__5390
36958     2F          | 	byte	"/"
36959     00          | 	byte	0
3695a                 | LR__5391
3695a     69 6E 66    | 	byte	"inf"
3695d     00          | 	byte	0
3695e                 | LR__5392
3695e     6E 61 6E    | 	byte	"nan"
36961     00          | 	byte	0
36962                 | LR__5393
36962                 | 	byte	
36962     00          | 	byte	0
36963                 | LR__5394
36963                 | 	byte	
36963     00          | 	byte	0
36964                 | LR__5395
36964                 | 	byte	
36964     00          | 	byte	0
36965                 | LR__5396
36965                 | 	byte	
36965     00          | 	byte	0
36966                 | LR__5397
36966                 | 	byte	
36966     00          | 	byte	0
36967                 | LR__5398
36967                 | 	byte	
36967     00          | 	byte	0
36968                 | LR__5399
36968                 | 	byte	
36968     00          | 	byte	0
36969                 | LR__5400
36969                 | 	byte	
36969     00          | 	byte	0
3696a                 | LR__5401
3696a     00          | 	byte	0
3696b     00          | 	byte	0
3696c                 | LR__5402
3696c     00          | 	byte	0
3696d     00          | 	byte	0
3696e                 | LR__5403
3696e     00          | 	byte	0
3696f     00          | 	byte	0
36970                 | LR__5404
36970     20 21 21 21 
36974     20 63 6F 72 
36978     72 75 70 74 
3697c     65 64 20 68 
36980     65 61 70 3F 
36984     3F 3F 20 21 
36988     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
3698b     00          | 	byte	0
3698c                 | LR__5405
3698c     20 21 21 21 
36990     20 6F 75 74 
36994     20 6F 66 20 
36998     68 65 61 70 
3699c     20 6D 65 6D 
369a0     6F 72 79 20 
369a4     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
369a8     00          | 	byte	0
369a9                 | LR__5406
369a9     20 21 21 21 
369ad     20 63 6F 72 
369b1     72 75 70 74 
369b5     65 64 20 68 
369b9     65 61 70 20 
369bd     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
369c1     00          | 	byte	0
369c2                 | LR__5407
369c2     00          | 	byte	0
369c3     00          | 	byte	0
369c4                 | LR__5408
369c4     2E          | 	byte	"."
369c5     00          | 	byte	0
369c6                 | LR__5409
369c6     00          | 	byte	0
369c7     00          | 	byte	0
369c8                 | LR__5410
369c8     00          | 	byte	0
369c9     00          | 	byte	0
369ca                 | LR__5411
369ca     00          | 	byte	0
369cb     00          | 	byte	0
369cc                 | LR__5412
369cc     2A 3A 3C 3E 
369d0     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
369d4     00          | 	byte	0
369d5                 | LR__5413
369d5     2B 2C 3B 3D 
369d9     5B 5D       | 	byte	"+,;=[]"
369db     00          | 	byte	0
369dc                 | LR__5414
369dc     46 41 54 33 
369e0     32 20 20 20 | 	byte	"FAT32   "
369e4     00          | 	byte	0
369e5                 | LR__5415
369e5     54 5A       | 	byte	"TZ"
369e7     00          | 	byte	0
369e8                 | LR__5416
369e8     00          | 	byte	0
369e9     00          | 	byte	0
369ea                 | LR__5417
369ea                 | 	byte	
369ea     00          | 	byte	0
369eb                 | LR__5418
369eb                 | 	byte	
369eb     00          | 	byte	0
369ec                 | LR__5419
369ec                 | 	byte	
369ec     00          | 	byte	0
369ed                 | LR__5420
369ed                 | 	byte	
369ed     00          | 	byte	0
369ee                 | LR__5421
369ee     22          | 	byte	34
369ef     00          | 	byte	0
369f0                 | LR__5422
369f0     22          | 	byte	34
369f1     00          | 	byte	0
369f2                 | LR__5423
369f2     3A          | 	byte	":"
369f3     00          | 	byte	0
369f4                 | LR__5424
369f4                 | 	byte	
369f4     00          | 	byte	0
369f5                 | LR__5425
369f5                 | 	byte	
369f5     00          | 	byte	0
369f6                 | LR__5426
369f6                 | 	byte	
369f6     00          | 	byte	0
369f7                 | LR__5427
369f7                 | 	byte	
369f7     00          | 	byte	0
369f8                 | LR__5428
369f8                 | 	byte	
369f8     00          | 	byte	0
369f9                 | LR__5429
369f9                 | 	byte	
369f9     00          | 	byte	0
369fa                 | LR__5430
369fa                 | 	byte	
369fa     00          | 	byte	0
369fb                 | LR__5431
369fb     30          | 	byte	"0"
369fc     00          | 	byte	0
369fd                 | LR__5432
369fd     22          | 	byte	34
369fe     00          | 	byte	0
369ff                 | LR__5433
369ff     22          | 	byte	34
36a00     00          | 	byte	0
36a01                 | LR__5434
36a01     22          | 	byte	34
36a02     00          | 	byte	0
36a03                 | LR__5435
36a03     22          | 	byte	34
36a04     00          | 	byte	0
36a05                 | LR__5436
36a05     22          | 	byte	34
36a06     00          | 	byte	0
36a07                 | LR__5437
36a07     3E          | 	byte	">"
36a08     00          | 	byte	0
36a09                 | LR__5438
36a09     3C          | 	byte	"<"
36a0a     00          | 	byte	0
36a0b                 | LR__5439
36a0b     2B          | 	byte	"+"
36a0c     00          | 	byte	0
36a0d                 | LR__5440
36a0d     2D          | 	byte	"-"
36a0e     00          | 	byte	0
36a0f                 | LR__5441
36a0f     2A          | 	byte	"*"
36a10     00          | 	byte	0
36a11                 | LR__5442
36a11     2F          | 	byte	"/"
36a12     00          | 	byte	0
36a13                 | LR__5443
36a13     5E          | 	byte	"^"
36a14     00          | 	byte	0
36a15                 | LR__5444
36a15     3D          | 	byte	"="
36a16     00          | 	byte	0
36a17                 | LR__5445
36a17     2B          | 	byte	"+"
36a18     00          | 	byte	0
36a19                 | LR__5446
36a19     2B          | 	byte	"+"
36a1a     00          | 	byte	0
36a1b                 | LR__5447
36a1b     2D          | 	byte	"-"
36a1c     00          | 	byte	0
36a1d                 | LR__5448
36a1d     2D          | 	byte	"-"
36a1e     00          | 	byte	0
36a1f                 | LR__5449
36a1f     3C          | 	byte	"<"
36a20     00          | 	byte	0
36a21                 | LR__5450
36a21     3E          | 	byte	">"
36a22     00          | 	byte	0
36a23                 | LR__5451
36a23     22          | 	byte	34
36a24     00          | 	byte	0
36a25                 | LR__5452
36a25     22          | 	byte	34
36a26     00          | 	byte	0
36a27                 | LR__5453
36a27     65 6C 73 65 | 	byte	"else"
36a2b     00          | 	byte	0
36a2c                 | LR__5454
36a2c     74 68 65 6E | 	byte	"then"
36a30     00          | 	byte	0
36a31                 | LR__5455
36a31     3F          | 	byte	"?"
36a32     00          | 	byte	0
36a33                 | LR__5456
36a33     3F          | 	byte	"?"
36a34     00          | 	byte	0
36a35                 | LR__5457
36a35     2E          | 	byte	"."
36a36     00          | 	byte	0
36a37                 | LR__5458
36a37     6D 6F 75 73 
36a3b     65          | 	byte	"mouse"
36a3c     00          | 	byte	0
36a3d                 | LR__5459
36a3d     63 75 72 73 
36a41     6F 72       | 	byte	"cursor"
36a43     00          | 	byte	0
36a44                 | LR__5460
36a44     63 6C 69 63 
36a48     6B          | 	byte	"click"
36a49     00          | 	byte	0
36a4a                 | LR__5461
36a4a     6F 6E       | 	byte	"on"
36a4c     00          | 	byte	0
36a4d                 | LR__5462
36a4d     31          | 	byte	"1"
36a4e     00          | 	byte	0
36a4f                 | LR__5463
36a4f     6F 66 66    | 	byte	"off"
36a52     00          | 	byte	0
36a53                 | LR__5464
36a53     30          | 	byte	"0"
36a54     00          | 	byte	0
36a55                 | LR__5465
36a55     6D 6F 64 65 | 	byte	"mode"
36a59     00          | 	byte	0
36a5a                 | LR__5466
36a5a     6D 2E       | 	byte	"m."
36a5c     00          | 	byte	0
36a5d                 | LR__5467
36a5d     61 74 61 72 
36a61     69          | 	byte	"atari"
36a62     00          | 	byte	0
36a63                 | LR__5468
36a63     30          | 	byte	"0"
36a64     00          | 	byte	0
36a65                 | LR__5469
36a65     70 63 5F 61 
36a69     6D 62 65 72 | 	byte	"pc_amber"
36a6d     00          | 	byte	0
36a6e                 | LR__5470
36a6e     31          | 	byte	"1"
36a6f     00          | 	byte	0
36a70                 | LR__5471
36a70     70 63 5F 67 
36a74     72 65 65 6E | 	byte	"pc_green"
36a78     00          | 	byte	0
36a79                 | LR__5472
36a79     32          | 	byte	"2"
36a7a     00          | 	byte	0
36a7b                 | LR__5473
36a7b     70 63 5F 77 
36a7f     68 69 74 65 | 	byte	"pc_white"
36a83     00          | 	byte	0
36a84                 | LR__5474
36a84     33          | 	byte	"3"
36a85     00          | 	byte	0
36a86                 | LR__5475
36a86     73 74       | 	byte	"st"
36a88     00          | 	byte	0
36a89                 | LR__5476
36a89     34          | 	byte	"4"
36a8a     00          | 	byte	0
36a8b                 | LR__5477
36a8b                 | 	byte	
36a8b     00          | 	byte	0
36a8c                 | LR__5478
36a8c     6C 6F 61 64 | 	byte	"load"
36a90     00          | 	byte	0
36a91                 | LR__5479
36a91     73 61 76 65 | 	byte	"save"
36a95     00          | 	byte	0
36a96                 | LR__5480
36a96     62 72 75 6E | 	byte	"brun"
36a9a     00          | 	byte	0
36a9b                 | LR__5481
36a9b     72 75 6E    | 	byte	"run"
36a9e     00          | 	byte	0
36a9f                 | LR__5482
36a9f     6C 6F 2E    | 	byte	"lo."
36aa2     00          | 	byte	0
36aa3                 | LR__5483
36aa3     73 2E       | 	byte	"s."
36aa5     00          | 	byte	0
36aa6                 | LR__5484
36aa6     62 72 2E    | 	byte	"br."
36aa9     00          | 	byte	0
36aaa                 | LR__5485
36aaa     65 6E 74 65 
36aae     72          | 	byte	"enter"
36aaf     00          | 	byte	0
36ab0                 | LR__5486
36ab0     65 2E       | 	byte	"e."
36ab2     00          | 	byte	0
36ab3                 | LR__5487
36ab3     24          | 	byte	"$"
36ab4     00          | 	byte	0
36ab5                 | LR__5488
36ab5     64 65 6C 65 
36ab9     74 65       | 	byte	"delete"
36abb     00          | 	byte	0
36abc                 | LR__5489
36abc     6D 6B 64 69 
36ac0     72          | 	byte	"mkdir"
36ac1     00          | 	byte	0
36ac2                 | LR__5490
36ac2     24          | 	byte	"$"
36ac3     00          | 	byte	0
36ac4                 | LR__5491
36ac4     63 6F 70 79 | 	byte	"copy"
36ac8     00          | 	byte	0
36ac9                 | LR__5492
36ac9     24          | 	byte	"$"
36aca     00          | 	byte	0
36acb                 | LR__5493
36acb     63 6F 70 79 | 	byte	"copy"
36acf     00          | 	byte	0
36ad0                 | LR__5494
36ad0     24          | 	byte	"$"
36ad1     00          | 	byte	0
36ad2                 | LR__5495
36ad2     63 64       | 	byte	"cd"
36ad4     00          | 	byte	0
36ad5                 | LR__5496
36ad5     63 64 2E    | 	byte	"cd."
36ad8     00          | 	byte	0
36ad9                 | LR__5497
36ad9     2E          | 	byte	"."
36ada     00          | 	byte	0
36adb                 | LR__5498
36adb     2E 2E       | 	byte	".."
36add     00          | 	byte	0
36ade                 | LR__5499
36ade     63 64       | 	byte	"cd"
36ae0     00          | 	byte	0
36ae1                 | LR__5500
36ae1     2F          | 	byte	"/"
36ae2     00          | 	byte	0
36ae3                 | LR__5501
36ae3                 | 	byte	
36ae3     00          | 	byte	0
36ae4                 | LR__5502
36ae4                 | 	byte	
36ae4     00          | 	byte	0
36ae5                 | LR__5503
36ae5                 | 	byte	
36ae5     00          | 	byte	0
36ae6                 | LR__5504
36ae6                 | 	byte	
36ae6     00          | 	byte	0
36ae7                 | LR__5505
36ae7                 | 	byte	
36ae7     00          | 	byte	0
36ae8                 | LR__5506
36ae8     52 65 61 64 
36aec     79          | 	byte	"Ready"
36aed     00          | 	byte	0
36aee                 | LR__5507
36aee     2B          | 	byte	"+"
36aef     00          | 	byte	0
36af0                 | LR__5508
36af0     2D          | 	byte	"-"
36af1     00          | 	byte	0
36af2                 | LR__5509
36af2     6F 72       | 	byte	"or"
36af4     00          | 	byte	0
36af5                 | LR__5510
36af5     78 6F 72    | 	byte	"xor"
36af8     00          | 	byte	0
36af9                 | LR__5511
36af9     2A          | 	byte	"*"
36afa     00          | 	byte	0
36afb                 | LR__5512
36afb     2F          | 	byte	"/"
36afc     00          | 	byte	0
36afd                 | LR__5513
36afd     61 6E 64    | 	byte	"and"
36b00     00          | 	byte	0
36b01                 | LR__5514
36b01     64 69 76    | 	byte	"div"
36b04     00          | 	byte	0
36b05                 | LR__5515
36b05     6D 6F 64    | 	byte	"mod"
36b08     00          | 	byte	0
36b09                 | LR__5516
36b09     73 68 6C    | 	byte	"shl"
36b0c     00          | 	byte	0
36b0d                 | LR__5517
36b0d     73 68 72    | 	byte	"shr"
36b10     00          | 	byte	0
36b11                 | LR__5518
36b11     5E          | 	byte	"^"
36b12     00          | 	byte	0
36b13                 | LR__5519
36b13     6E 6F 74    | 	byte	"not"
36b16     00          | 	byte	0
36b17                 | LR__5520
36b17     40          | 	byte	"@"
36b18     00          | 	byte	0
36b19                 | LR__5521
36b19     3D          | 	byte	"="
36b1a     00          | 	byte	0
36b1b                 | LR__5522
36b1b     3E 3D       | 	byte	">="
36b1d     00          | 	byte	0
36b1e                 | LR__5523
36b1e     3C 3D       | 	byte	"<="
36b20     00          | 	byte	0
36b21                 | LR__5524
36b21     3C          | 	byte	"<"
36b22     00          | 	byte	0
36b23                 | LR__5525
36b23     3E          | 	byte	">"
36b24     00          | 	byte	0
36b25                 | LR__5526
36b25     3C 3E       | 	byte	"<>"
36b27     00          | 	byte	0
36b28                 | LR__5527
36b28     2B 2B       | 	byte	"++"
36b2a     00          | 	byte	0
36b2b                 | LR__5528
36b2b     2D 2D       | 	byte	"--"
36b2d     00          | 	byte	0
36b2e                 | LR__5529
36b2e     23          | 	byte	"#"
36b2f     00          | 	byte	0
36b30                 | LR__5530
36b30     30          | 	byte	"0"
36b31     00          | 	byte	0
36b32                 | LR__5531
36b32     39          | 	byte	"9"
36b33     00          | 	byte	0
36b34                 | LR__5532
36b34     23 72 65 61 
36b38     64          | 	byte	"#read"
36b39     00          | 	byte	0
36b3a                 | LR__5533
36b3a     23 77 72 69 
36b3e     74 65       | 	byte	"#write"
36b40     00          | 	byte	0
36b41                 | LR__5534
36b41     23 61 70 70 
36b45     65 6E 64    | 	byte	"#append"
36b48     00          | 	byte	0
36b49                 | LR__5535
36b49     23          | 	byte	"#"
36b4a     00          | 	byte	0
36b4b                 | LR__5536
36b4b     23          | 	byte	"#"
36b4c     00          | 	byte	0
36b4d                 | LR__5537
36b4d     2D          | 	byte	"-"
36b4e     00          | 	byte	0
36b4f                 | LR__5538
36b4f     30          | 	byte	"0"
36b50     00          | 	byte	0
36b51                 | LR__5539
36b51     63          | 	byte	"c"
36b52     00          | 	byte	0
36b53                 | LR__5540
36b53     63 23       | 	byte	"c#"
36b55     00          | 	byte	0
36b56                 | LR__5541
36b56     64          | 	byte	"d"
36b57     00          | 	byte	0
36b58                 | LR__5542
36b58     64 23       | 	byte	"d#"
36b5a     00          | 	byte	0
36b5b                 | LR__5543
36b5b     65          | 	byte	"e"
36b5c     00          | 	byte	0
36b5d                 | LR__5544
36b5d     66          | 	byte	"f"
36b5e     00          | 	byte	0
36b5f                 | LR__5545
36b5f     66 23       | 	byte	"f#"
36b61     00          | 	byte	0
36b62                 | LR__5546
36b62     67          | 	byte	"g"
36b63     00          | 	byte	0
36b64                 | LR__5547
36b64     67 23       | 	byte	"g#"
36b66     00          | 	byte	0
36b67                 | LR__5548
36b67     61          | 	byte	"a"
36b68     00          | 	byte	0
36b69                 | LR__5549
36b69     61 23       | 	byte	"a#"
36b6b     00          | 	byte	0
36b6c                 | LR__5550
36b6c     68          | 	byte	"h"
36b6d     00          | 	byte	0
36b6e                 | LR__5551
36b6e     62          | 	byte	"b"
36b6f     00          | 	byte	0
36b70                 | LR__5552
36b70     2B          | 	byte	"+"
36b71     00          | 	byte	0
36b72                 | LR__5553
36b72     2D          | 	byte	"-"
36b73     00          | 	byte	0
36b74                 | LR__5554
36b74     3D          | 	byte	"="
36b75     00          | 	byte	0
36b76                 | LR__5555
36b76     2C          | 	byte	","
36b77     00          | 	byte	0
36b78                 | LR__5556
36b78     2A          | 	byte	"*"
36b79     00          | 	byte	0
36b7a                 | LR__5557
36b7a     2F          | 	byte	"/"
36b7b     00          | 	byte	0
36b7c                 | LR__5558
36b7c     3B          | 	byte	";"
36b7d     00          | 	byte	0
36b7e                 | LR__5559
36b7e     22          | 	byte	34
36b7f     00          | 	byte	0
36b80                 | LR__5560
36b80     5E          | 	byte	"^"
36b81     00          | 	byte	0
36b82                 | LR__5561
36b82     29          | 	byte	")"
36b83     00          | 	byte	0
36b84                 | LR__5562
36b84     28          | 	byte	"("
36b85     00          | 	byte	0
36b86                 | LR__5563
36b86     3A          | 	byte	":"
36b87     00          | 	byte	0
36b88                 | LR__5564
36b88     20          | 	byte	" "
36b89     00          | 	byte	0
36b8a                 | LR__5565
36b8a     3E          | 	byte	">"
36b8b     00          | 	byte	0
36b8c                 | LR__5566
36b8c     3C          | 	byte	"<"
36b8d     00          | 	byte	0
36b8e                 | LR__5567
36b8e     3D          | 	byte	"="
36b8f     00          | 	byte	0
36b90                 | LR__5568
36b90     62 65 65 70 | 	byte	"beep"
36b94     00          | 	byte	0
36b95                 | LR__5569
36b95     62 2E       | 	byte	"b."
36b97     00          | 	byte	0
36b98                 | LR__5570
36b98     62 6C 69 74 | 	byte	"blit"
36b9c     00          | 	byte	0
36b9d                 | LR__5571
36b9d     62 6F 78    | 	byte	"box"
36ba0     00          | 	byte	0
36ba1                 | LR__5572
36ba1     62 72 75 6E | 	byte	"brun"
36ba5     00          | 	byte	0
36ba6                 | LR__5573
36ba6     62 72 2E    | 	byte	"br."
36ba9     00          | 	byte	0
36baa                 | LR__5574
36baa     63 64       | 	byte	"cd"
36bac     00          | 	byte	0
36bad                 | LR__5575
36bad     63 68 61 6E 
36bb1     67 65 66 72 
36bb5     65 71       | 	byte	"changefreq"
36bb7     00          | 	byte	0
36bb8                 | LR__5576
36bb8     63 66 2E    | 	byte	"cf."
36bbb     00          | 	byte	0
36bbc                 | LR__5577
36bbc     63 68 61 6E 
36bc0     67 65 70 61 
36bc4     6E          | 	byte	"changepan"
36bc5     00          | 	byte	0
36bc6                 | LR__5578
36bc6     63 70 2E    | 	byte	"cp."
36bc9     00          | 	byte	0
36bca                 | LR__5579
36bca     63 68 61 6E 
36bce     67 65 76 6F 
36bd2     6C          | 	byte	"changevol"
36bd3     00          | 	byte	0
36bd4                 | LR__5580
36bd4     63 76 2E    | 	byte	"cv."
36bd7     00          | 	byte	0
36bd8                 | LR__5581
36bd8     63 68 61 6E 
36bdc     67 65 77 61 
36be0     76 65       | 	byte	"changewave"
36be2     00          | 	byte	0
36be3                 | LR__5582
36be3     63 77 2E    | 	byte	"cw."
36be6     00          | 	byte	0
36be7                 | LR__5583
36be7     63 69 72 63 
36beb     6C 65       | 	byte	"circle"
36bed     00          | 	byte	0
36bee                 | LR__5584
36bee     63 69 2E    | 	byte	"ci."
36bf1     00          | 	byte	0
36bf2                 | LR__5585
36bf2     63 6C 69 63 
36bf6     6B          | 	byte	"click"
36bf7     00          | 	byte	0
36bf8                 | LR__5586
36bf8     63 6C 6F 73 
36bfc     65          | 	byte	"close"
36bfd     00          | 	byte	0
36bfe                 | LR__5587
36bfe     63 6C 73    | 	byte	"cls"
36c01     00          | 	byte	0
36c02                 | LR__5588
36c02     63 6F 67 73 
36c06     74 6F 70    | 	byte	"cogstop"
36c09     00          | 	byte	0
36c0a                 | LR__5589
36c0a     63 6F 6C 6F 
36c0e     72          | 	byte	"color"
36c0f     00          | 	byte	0
36c10                 | LR__5590
36c10     63 2E       | 	byte	"c."
36c12     00          | 	byte	0
36c13                 | LR__5591
36c13     63 6F 70 79 | 	byte	"copy"
36c17     00          | 	byte	0
36c18                 | LR__5592
36c18     63 75 72 73 
36c1c     6F 72       | 	byte	"cursor"
36c1e     00          | 	byte	0
36c1f                 | LR__5593
36c1f     64 61 74 61 | 	byte	"data"
36c23     00          | 	byte	0
36c24                 | LR__5594
36c24     64 65 66 73 
36c28     6E 64       | 	byte	"defsnd"
36c2a     00          | 	byte	0
36c2b                 | LR__5595
36c2b     64 65 66 65 
36c2f     6E 76       | 	byte	"defenv"
36c31     00          | 	byte	0
36c32                 | LR__5596
36c32     64 65 66 73 
36c36     70 72 69 74 
36c3a     65          | 	byte	"defsprite"
36c3b     00          | 	byte	0
36c3c                 | LR__5597
36c3c     64 73 2E    | 	byte	"ds."
36c3f     00          | 	byte	0
36c40                 | LR__5598
36c40     64 65 67    | 	byte	"deg"
36c43     00          | 	byte	0
36c44                 | LR__5599
36c44     64 65 6C 65 
36c48     74 65       | 	byte	"delete"
36c4a     00          | 	byte	0
36c4b                 | LR__5600
36c4b     64 69 6D    | 	byte	"dim"
36c4e     00          | 	byte	0
36c4f                 | LR__5601
36c4f     64 69 72    | 	byte	"dir"
36c52     00          | 	byte	0
36c53                 | LR__5602
36c53     64 70 6F 6B 
36c57     65          | 	byte	"dpoke"
36c58     00          | 	byte	0
36c59                 | LR__5603
36c59     64 72 61 77 | 	byte	"draw"
36c5d     00          | 	byte	0
36c5e                 | LR__5604
36c5e     64 72 61 77 
36c62     74 6F       | 	byte	"drawto"
36c64     00          | 	byte	0
36c65                 | LR__5605
36c65     64 72 2E    | 	byte	"dr."
36c68     00          | 	byte	0
36c69                 | LR__5606
36c69     65 6C 73 65 | 	byte	"else"
36c6d     00          | 	byte	0
36c6e                 | LR__5607
36c6e     65 6E 64    | 	byte	"end"
36c71     00          | 	byte	0
36c72                 | LR__5608
36c72     65 6E 74 65 
36c76     72          | 	byte	"enter"
36c77     00          | 	byte	0
36c78                 | LR__5609
36c78     65 2E       | 	byte	"e."
36c7a     00          | 	byte	0
36c7b                 | LR__5610
36c7b     66 63 69 72 
36c7f     63 6C 65    | 	byte	"fcircle"
36c82     00          | 	byte	0
36c83                 | LR__5611
36c83     66 63 2E    | 	byte	"fc."
36c86     00          | 	byte	0
36c87                 | LR__5612
36c87     66 69 6C 6C | 	byte	"fill"
36c8b     00          | 	byte	0
36c8c                 | LR__5613
36c8c     66 69 2E    | 	byte	"fi."
36c8f     00          | 	byte	0
36c90                 | LR__5614
36c90     66 6F 6E 74 | 	byte	"font"
36c94     00          | 	byte	0
36c95                 | LR__5615
36c95     66 6F 72    | 	byte	"for"
36c98     00          | 	byte	0
36c99                 | LR__5616
36c99     66 2E       | 	byte	"f."
36c9b     00          | 	byte	0
36c9c                 | LR__5617
36c9c     66 72 61 6D 
36ca0     65          | 	byte	"frame"
36ca1     00          | 	byte	0
36ca2                 | LR__5618
36ca2     66 72 2E    | 	byte	"fr."
36ca5     00          | 	byte	0
36ca6                 | LR__5619
36ca6     67 65 74    | 	byte	"get"
36ca9     00          | 	byte	0
36caa                 | LR__5620
36caa     67 6F 73 75 
36cae     62          | 	byte	"gosub"
36caf     00          | 	byte	0
36cb0                 | LR__5621
36cb0     67 6F 74 6F | 	byte	"goto"
36cb4     00          | 	byte	0
36cb5                 | LR__5622
36cb5     67 2E       | 	byte	"g."
36cb7     00          | 	byte	0
36cb8                 | LR__5623
36cb8     69 66       | 	byte	"if"
36cba     00          | 	byte	0
36cbb                 | LR__5624
36cbb     69 6E 6B    | 	byte	"ink"
36cbe     00          | 	byte	0
36cbf                 | LR__5625
36cbf     69 2E       | 	byte	"i."
36cc1     00          | 	byte	0
36cc2                 | LR__5626
36cc2     69 6E 70 75 
36cc6     74          | 	byte	"input"
36cc7     00          | 	byte	0
36cc8                 | LR__5627
36cc8     6C 69 73 74 | 	byte	"list"
36ccc     00          | 	byte	0
36ccd                 | LR__5628
36ccd     6C 2E       | 	byte	"l."
36ccf     00          | 	byte	0
36cd0                 | LR__5629
36cd0     6C 6F 61 64 | 	byte	"load"
36cd4     00          | 	byte	0
36cd5                 | LR__5630
36cd5     6C 6F 2E    | 	byte	"lo."
36cd8     00          | 	byte	0
36cd9                 | LR__5631
36cd9     6C 70 6F 6B 
36cdd     65          | 	byte	"lpoke"
36cde     00          | 	byte	0
36cdf                 | LR__5632
36cdf     6D 6B 64 69 
36ce3     72          | 	byte	"mkdir"
36ce4     00          | 	byte	0
36ce5                 | LR__5633
36ce5     6D 6F 64 65 | 	byte	"mode"
36ce9     00          | 	byte	0
36cea                 | LR__5634
36cea     6D 2E       | 	byte	"m."
36cec     00          | 	byte	0
36ced                 | LR__5635
36ced     6D 6F 75 73 
36cf1     65          | 	byte	"mouse"
36cf2     00          | 	byte	0
36cf3                 | LR__5636
36cf3     6E 65 77    | 	byte	"new"
36cf6     00          | 	byte	0
36cf7                 | LR__5637
36cf7     6E 65 78 74 | 	byte	"next"
36cfb     00          | 	byte	0
36cfc                 | LR__5638
36cfc     6E 2E       | 	byte	"n."
36cfe     00          | 	byte	0
36cff                 | LR__5639
36cff     6F 6E       | 	byte	"on"
36d01     00          | 	byte	0
36d02                 | LR__5640
36d02     6F 70 65 6E | 	byte	"open"
36d06     00          | 	byte	0
36d07                 | LR__5641
36d07     70 61 70 65 
36d0b     72          | 	byte	"paper"
36d0c     00          | 	byte	0
36d0d                 | LR__5642
36d0d     70 61 2E    | 	byte	"pa."
36d10     00          | 	byte	0
36d11                 | LR__5643
36d11     70 69 6E 66 
36d15     6C 6F 61 74 | 	byte	"pinfloat"
36d19     00          | 	byte	0
36d1a                 | LR__5644
36d1a     70 69 6E 68 
36d1e     69          | 	byte	"pinhi"
36d1f     00          | 	byte	0
36d20                 | LR__5645
36d20     70 69 6E 6C 
36d24     6F          | 	byte	"pinlo"
36d25     00          | 	byte	0
36d26                 | LR__5646
36d26     70 69 6E 73 
36d2a     74 61 72 74 | 	byte	"pinstart"
36d2e     00          | 	byte	0
36d2f                 | LR__5647
36d2f     70 69 6E 74 
36d33     6F 67 67 6C 
36d37     65          | 	byte	"pintoggle"
36d38     00          | 	byte	0
36d39                 | LR__5648
36d39     70 69 6E 77 
36d3d     72 69 74 65 | 	byte	"pinwrite"
36d41     00          | 	byte	0
36d42                 | LR__5649
36d42     70 6C 61 79 | 	byte	"play"
36d46     00          | 	byte	0
36d47                 | LR__5650
36d47     70 2E       | 	byte	"p."
36d49     00          | 	byte	0
36d4a                 | LR__5651
36d4a     70 6C 6F 74 | 	byte	"plot"
36d4e     00          | 	byte	0
36d4f                 | LR__5652
36d4f     70 6C 2E    | 	byte	"pl."
36d52     00          | 	byte	0
36d53                 | LR__5653
36d53     70 6F 6B 65 | 	byte	"poke"
36d57     00          | 	byte	0
36d58                 | LR__5654
36d58     70 6F 70    | 	byte	"pop"
36d5b     00          | 	byte	0
36d5c                 | LR__5655
36d5c     70 6F 73 69 
36d60     74 69 6F 6E | 	byte	"position"
36d64     00          | 	byte	0
36d65                 | LR__5656
36d65     70 6F 73 2E | 	byte	"pos."
36d69     00          | 	byte	0
36d6a                 | LR__5657
36d6a     70 72 69 6E 
36d6e     74          | 	byte	"print"
36d6f     00          | 	byte	0
36d70                 | LR__5658
36d70     3F          | 	byte	"?"
36d71     00          | 	byte	0
36d72                 | LR__5659
36d72     70 75 74    | 	byte	"put"
36d75     00          | 	byte	0
36d76                 | LR__5660
36d76     72 61 64    | 	byte	"rad"
36d79     00          | 	byte	0
36d7a                 | LR__5661
36d7a     72 65 61 64 | 	byte	"read"
36d7e     00          | 	byte	0
36d7f                 | LR__5662
36d7f     72 65 6C 65 
36d83     61 73 65    | 	byte	"release"
36d86     00          | 	byte	0
36d87                 | LR__5663
36d87     72 65 6D    | 	byte	"rem"
36d8a     00          | 	byte	0
36d8b                 | LR__5664
36d8b     27          | 	byte	"'"
36d8c     00          | 	byte	0
36d8d                 | LR__5665
36d8d     72 65 73 74 
36d91     6F 72 65    | 	byte	"restore"
36d94     00          | 	byte	0
36d95                 | LR__5666
36d95     72 65 74 75 
36d99     72 6E       | 	byte	"return"
36d9b     00          | 	byte	0
36d9c                 | LR__5667
36d9c     72 75 6E    | 	byte	"run"
36d9f     00          | 	byte	0
36da0                 | LR__5668
36da0     73 61 76 65 | 	byte	"save"
36da4     00          | 	byte	0
36da5                 | LR__5669
36da5     73 2E       | 	byte	"s."
36da7     00          | 	byte	0
36da8                 | LR__5670
36da8     73 65 74 63 
36dac     6F 6C 6F 72 | 	byte	"setcolor"
36db0     00          | 	byte	0
36db1                 | LR__5671
36db1     73 63       | 	byte	"sc"
36db3     00          | 	byte	0
36db4                 | LR__5672
36db4     73 65 74 64 
36db8     65 6C 61 79 | 	byte	"setdelay"
36dbc     00          | 	byte	0
36dbd                 | LR__5673
36dbd     73 64 2E    | 	byte	"sd."
36dc0     00          | 	byte	0
36dc1                 | LR__5674
36dc1     73 65 74 65 
36dc5     6E 76       | 	byte	"setenv"
36dc7     00          | 	byte	0
36dc8                 | LR__5675
36dc8     73 65 2E    | 	byte	"se."
36dcb     00          | 	byte	0
36dcc                 | LR__5676
36dcc     73 65 74 6C 
36dd0     65 6E       | 	byte	"setlen"
36dd2     00          | 	byte	0
36dd3                 | LR__5677
36dd3     73 6C 2E    | 	byte	"sl."
36dd6     00          | 	byte	0
36dd7                 | LR__5678
36dd7     73 65 74 70 
36ddb     61 6E       | 	byte	"setpan"
36ddd     00          | 	byte	0
36dde                 | LR__5679
36dde     73 70 2E    | 	byte	"sp."
36de1     00          | 	byte	0
36de2                 | LR__5680
36de2     73 65 74 73 
36de6     75 73 74 61 
36dea     69 6E       | 	byte	"setsustain"
36dec     00          | 	byte	0
36ded                 | LR__5681
36ded     73 73 2E    | 	byte	"ss."
36df0     00          | 	byte	0
36df1                 | LR__5682
36df1     73 65 74 76 
36df5     6F 6C       | 	byte	"setvol"
36df7     00          | 	byte	0
36df8                 | LR__5683
36df8     73 76 2E    | 	byte	"sv."
36dfb     00          | 	byte	0
36dfc                 | LR__5684
36dfc     73 65 74 77 
36e00     61 76 65    | 	byte	"setwave"
36e03     00          | 	byte	0
36e04                 | LR__5685
36e04     73 77 2E    | 	byte	"sw."
36e07     00          | 	byte	0
36e08                 | LR__5686
36e08     73 65 74 77 
36e0c     61 76       | 	byte	"setwav"
36e0e     00          | 	byte	0
36e0f                 | LR__5687
36e0f     73 68 75 74 
36e13     75 70       | 	byte	"shutup"
36e15     00          | 	byte	0
36e16                 | LR__5688
36e16     73 68 2E    | 	byte	"sh."
36e19     00          | 	byte	0
36e1a                 | LR__5689
36e1a     73 6F 75 6E 
36e1e     64          | 	byte	"sound"
36e1f     00          | 	byte	0
36e20                 | LR__5690
36e20     73 6F 2E    | 	byte	"so."
36e23     00          | 	byte	0
36e24                 | LR__5691
36e24     73 70 72 69 
36e28     74 65       | 	byte	"sprite"
36e2a     00          | 	byte	0
36e2b                 | LR__5692
36e2b     73 70 72 2E | 	byte	"spr."
36e2f     00          | 	byte	0
36e30                 | LR__5693
36e30     74 68 65 6E | 	byte	"then"
36e34     00          | 	byte	0
36e35                 | LR__5694
36e35     77 61 69 74 
36e39     6D 73       | 	byte	"waitms"
36e3b     00          | 	byte	0
36e3c                 | LR__5695
36e3c     77 2E       | 	byte	"w."
36e3e     00          | 	byte	0
36e3f                 | LR__5696
36e3f     77 61 69 74 
36e43     63 6C 6F 63 
36e47     6B          | 	byte	"waitclock"
36e48     00          | 	byte	0
36e49                 | LR__5697
36e49     77 63 2E    | 	byte	"wc."
36e4c     00          | 	byte	0
36e4d                 | LR__5698
36e4d     77 61 69 74 
36e51     76 62 6C    | 	byte	"waitvbl"
36e54     00          | 	byte	0
36e55                 | LR__5699
36e55     77 76 2E    | 	byte	"wv."
36e58     00          | 	byte	0
36e59                 | LR__5700
36e59     77 72 70 69 
36e5d     6E          | 	byte	"wrpin"
36e5e     00          | 	byte	0
36e5f                 | LR__5701
36e5f     77 78 70 69 
36e63     6E          | 	byte	"wxpin"
36e64     00          | 	byte	0
36e65                 | LR__5702
36e65     77 79 70 69 
36e69     6E          | 	byte	"wypin"
36e6a     00          | 	byte	0
36e6b                 | LR__5703
36e6b     61 62 73    | 	byte	"abs"
36e6e     00          | 	byte	0
36e6f                 | LR__5704
36e6f     61 63 6F 73 | 	byte	"acos"
36e73     00          | 	byte	0
36e74                 | LR__5705
36e74     61 64 72    | 	byte	"adr"
36e77     00          | 	byte	0
36e78                 | LR__5706
36e78     61 64 64 72 | 	byte	"addr"
36e7c     00          | 	byte	0
36e7d                 | LR__5707
36e7d     61 73 63    | 	byte	"asc"
36e80     00          | 	byte	0
36e81                 | LR__5708
36e81     61 73 69 6E | 	byte	"asin"
36e85     00          | 	byte	0
36e86                 | LR__5709
36e86     61 74 6E    | 	byte	"atn"
36e89     00          | 	byte	0
36e8a                 | LR__5710
36e8a     62 69 6E 24 | 	byte	"bin$"
36e8e     00          | 	byte	0
36e8f                 | LR__5711
36e8f     63 68 72 24 | 	byte	"chr$"
36e93     00          | 	byte	0
36e94                 | LR__5712
36e94     63 6F 67 69 
36e98     6E 69 74    | 	byte	"coginit"
36e9b     00          | 	byte	0
36e9c                 | LR__5713
36e9c     63 6F 73    | 	byte	"cos"
36e9f     00          | 	byte	0
36ea0                 | LR__5714
36ea0     64 70 65 65 
36ea4     6B          | 	byte	"dpeek"
36ea5     00          | 	byte	0
36ea6                 | LR__5715
36ea6     66 72 61 6D 
36eaa     65 62 75 66 | 	byte	"framebuf"
36eae     00          | 	byte	0
36eaf                 | LR__5716
36eaf     66 62 2E    | 	byte	"fb."
36eb2     00          | 	byte	0
36eb3                 | LR__5717
36eb3     66 72 65    | 	byte	"fre"
36eb6     00          | 	byte	0
36eb7                 | LR__5718
36eb7     67 63 2E    | 	byte	"gc."
36eba     00          | 	byte	0
36ebb                 | LR__5719
36ebb     67 65 74 63 
36ebf     6F 6C 6F 72 | 	byte	"getcolor"
36ec3     00          | 	byte	0
36ec4                 | LR__5720
36ec4     67 65 74 70 
36ec8     69 78 65 6C | 	byte	"getpixel"
36ecc     00          | 	byte	0
36ecd                 | LR__5721
36ecd     67 65 2E    | 	byte	"ge."
36ed0     00          | 	byte	0
36ed1                 | LR__5722
36ed1     67 65 74 65 
36ed5     6E 76 73 75 
36ed9     73 74 61 69 
36edd     6E          | 	byte	"getenvsustain"
36ede     00          | 	byte	0
36edf                 | LR__5723
36edf     67 65 74 6E 
36ee3     6F 74 65 76 
36ee7     61 6C 75 65 | 	byte	"getnotevalue"
36eeb     00          | 	byte	0
36eec                 | LR__5724
36eec     67 65 74 74 
36ef0     69 6D 65    | 	byte	"gettime"
36ef3     00          | 	byte	0
36ef4                 | LR__5725
36ef4     68 65 78 24 | 	byte	"hex$"
36ef8     00          | 	byte	0
36ef9                 | LR__5726
36ef9     69 6E 6B 65 
36efd     79 24       | 	byte	"inkey$"
36eff     00          | 	byte	0
36f00                 | LR__5727
36f00     69 6E 74    | 	byte	"int"
36f03     00          | 	byte	0
36f04                 | LR__5728
36f04     6C 65 66 74 
36f08     24          | 	byte	"left$"
36f09     00          | 	byte	0
36f0a                 | LR__5729
36f0a     6C 65 6E    | 	byte	"len"
36f0d     00          | 	byte	0
36f0e                 | LR__5730
36f0e     6C 6F 67    | 	byte	"log"
36f11     00          | 	byte	0
36f12                 | LR__5731
36f12     6C 70 65 65 
36f16     6B          | 	byte	"lpeek"
36f17     00          | 	byte	0
36f18                 | LR__5732
36f18     6D 65 6D 74 
36f1c     6F 70       | 	byte	"memtop"
36f1e     00          | 	byte	0
36f1f                 | LR__5733
36f1f     6D 65 6D 6C 
36f23     6F          | 	byte	"memlo"
36f24     00          | 	byte	0
36f25                 | LR__5734
36f25     6D 69 64 24 | 	byte	"mid$"
36f29     00          | 	byte	0
36f2a                 | LR__5735
36f2a     6D 6F 75 73 
36f2e     65 6B       | 	byte	"mousek"
36f30     00          | 	byte	0
36f31                 | LR__5736
36f31     6D 6F 75 73 
36f35     65 77       | 	byte	"mousew"
36f37     00          | 	byte	0
36f38                 | LR__5737
36f38     6D 6F 75 73 
36f3c     65 78       | 	byte	"mousex"
36f3e     00          | 	byte	0
36f3f                 | LR__5738
36f3f     6D 6F 75 73 
36f43     65 79       | 	byte	"mousey"
36f45     00          | 	byte	0
36f46                 | LR__5739
36f46     70 61 64 78 | 	byte	"padx"
36f4a     00          | 	byte	0
36f4b                 | LR__5740
36f4b     70 61 64 79 | 	byte	"pady"
36f4f     00          | 	byte	0
36f50                 | LR__5741
36f50     70 61 64 7A | 	byte	"padz"
36f54     00          | 	byte	0
36f55                 | LR__5742
36f55     70 61 64 72 
36f59     78          | 	byte	"padrx"
36f5a     00          | 	byte	0
36f5b                 | LR__5743
36f5b     70 61 64 72 
36f5f     79          | 	byte	"padry"
36f60     00          | 	byte	0
36f61                 | LR__5744
36f61     70 61 64 72 
36f65     7A          | 	byte	"padrz"
36f66     00          | 	byte	0
36f67                 | LR__5745
36f67     70 61 64 68 | 	byte	"padh"
36f6b     00          | 	byte	0
36f6c                 | LR__5746
36f6c     70 65 65 6B | 	byte	"peek"
36f70     00          | 	byte	0
36f71                 | LR__5747
36f71     70 69 6E 72 
36f75     65 61 64    | 	byte	"pinread"
36f78     00          | 	byte	0
36f79                 | LR__5748
36f79     72 64 70 69 
36f7d     6E          | 	byte	"rdpin"
36f7e     00          | 	byte	0
36f7f                 | LR__5749
36f7f     72 69 67 68 
36f83     74 24       | 	byte	"right$"
36f85     00          | 	byte	0
36f86                 | LR__5750
36f86     72 71 70 69 
36f8a     6E          | 	byte	"rqpin"
36f8b     00          | 	byte	0
36f8c                 | LR__5751
36f8c     72 6F 75 6E 
36f90     64          | 	byte	"round"
36f91     00          | 	byte	0
36f92                 | LR__5752
36f92     72 6E 64    | 	byte	"rnd"
36f95     00          | 	byte	0
36f96                 | LR__5753
36f96     73 69 6E    | 	byte	"sin"
36f99     00          | 	byte	0
36f9a                 | LR__5754
36f9a     73 71 72    | 	byte	"sqr"
36f9d     00          | 	byte	0
36f9e                 | LR__5755
36f9e     73 74 69 63 
36fa2     6B          | 	byte	"stick"
36fa3     00          | 	byte	0
36fa4                 | LR__5756
36fa4     73 74 72 69 
36fa8     67          | 	byte	"strig"
36fa9     00          | 	byte	0
36faa                 | LR__5757
36faa     73 74 72 24 | 	byte	"str$"
36fae     00          | 	byte	0
36faf                 | LR__5758
36faf     74 61 6E    | 	byte	"tan"
36fb2     00          | 	byte	0
36fb3                 | LR__5759
36fb3     76 61 6C    | 	byte	"val"
36fb6     00          | 	byte	0
36fb7                 | LR__5760
36fb7     76 61 72 70 
36fbb     74 72       | 	byte	"varptr"
36fbd     00          | 	byte	0
36fbe                 | LR__5761
36fbe     61          | 	byte	"a"
36fbf     00          | 	byte	0
36fc0                 | LR__5762
36fc0     7A          | 	byte	"z"
36fc1     00          | 	byte	0
36fc2                 | LR__5763
36fc2     5F          | 	byte	"_"
36fc3     00          | 	byte	0
36fc4                 | LR__5764
36fc4     61          | 	byte	"a"
36fc5     00          | 	byte	0
36fc6                 | LR__5765
36fc6     7A          | 	byte	"z"
36fc7     00          | 	byte	0
36fc8                 | LR__5766
36fc8     30          | 	byte	"0"
36fc9     00          | 	byte	0
36fca                 | LR__5767
36fca     39          | 	byte	"9"
36fcb     00          | 	byte	0
36fcc                 | LR__5768
36fcc     5F          | 	byte	"_"
36fcd     00          | 	byte	0
36fce                 | LR__5769
36fce     2E          | 	byte	"."
36fcf     00          | 	byte	0
36fd0                 | LR__5770
36fd0     61          | 	byte	"a"
36fd1     00          | 	byte	0
36fd2                 | LR__5771
36fd2     7A          | 	byte	"z"
36fd3     00          | 	byte	0
36fd4                 | LR__5772
36fd4     30          | 	byte	"0"
36fd5     00          | 	byte	0
36fd6                 | LR__5773
36fd6     39          | 	byte	"9"
36fd7     00          | 	byte	0
36fd8                 | LR__5774
36fd8     5F          | 	byte	"_"
36fd9     00          | 	byte	0
36fda                 | LR__5775
36fda     24          | 	byte	"$"
36fdb     00          | 	byte	0
36fdc                 | LR__5776
36fdc     25          | 	byte	"%"
36fdd     00          | 	byte	0
36fde                 | LR__5777
36fde     21          | 	byte	"!"
36fdf     00          | 	byte	0
36fe0                 | LR__5778
36fe0     30          | 	byte	"0"
36fe1     00          | 	byte	0
36fe2                 | LR__5779
36fe2     39          | 	byte	"9"
36fe3     00          | 	byte	0
36fe4                 | LR__5780
36fe4     2E          | 	byte	"."
36fe5     00          | 	byte	0
36fe6                 | LR__5781
36fe6     24          | 	byte	"$"
36fe7     00          | 	byte	0
36fe8                 | LR__5782
36fe8     25          | 	byte	"%"
36fe9     00          | 	byte	0
36fea                 | LR__5783
36fea     2D          | 	byte	"-"
36feb     00          | 	byte	0
36fec                 | LR__5784
36fec     2E          | 	byte	"."
36fed     00          | 	byte	0
36fee                 | LR__5785
36fee     24          | 	byte	"$"
36fef     00          | 	byte	0
36ff0                 | LR__5786
36ff0     25          | 	byte	"%"
36ff1     00          | 	byte	0
36ff2                 | LR__5787
36ff2     30          | 	byte	"0"
36ff3     00          | 	byte	0
36ff4                 | LR__5788
36ff4     39          | 	byte	"9"
36ff5     00          | 	byte	0
36ff6                 | LR__5789
36ff6     5F          | 	byte	"_"
36ff7     00          | 	byte	0
36ff8                 | LR__5790
36ff8     2E          | 	byte	"."
36ff9     00          | 	byte	0
36ffa                 | LR__5791
36ffa     45          | 	byte	"E"
36ffb     00          | 	byte	0
36ffc                 | LR__5792
36ffc     65          | 	byte	"e"
36ffd     00          | 	byte	0
36ffe                 | LR__5793
36ffe     2D          | 	byte	"-"
36fff     00          | 	byte	0
37000                 | LR__5794
37000     61          | 	byte	"a"
37001     00          | 	byte	0
37002                 | LR__5795
37002     66          | 	byte	"f"
37003     00          | 	byte	0
37004                 | LR__5796
37004     30          | 	byte	"0"
37005     00          | 	byte	0
37006                 | LR__5797
37006     31          | 	byte	"1"
37007     00          | 	byte	0
37008                 | LR__5798
37008     5F          | 	byte	"_"
37009     00          | 	byte	0
3700a                 | LR__5799
3700a     2D          | 	byte	"-"
3700b     00          | 	byte	0
3700c                 | LR__5800
3700c     65          | 	byte	"e"
3700d     00          | 	byte	0
3700e                 | LR__5801
3700e     2E          | 	byte	"."
3700f     00          | 	byte	0
37010                 | LR__5802
37010     45          | 	byte	"E"
37011     00          | 	byte	0
37012                 | LR__5803
37012     65          | 	byte	"e"
37013     00          | 	byte	0
37014                 | LR__5804
37014     30          | 	byte	"0"
37015     00          | 	byte	0
37016                 | LR__5805
37016     39          | 	byte	"9"
37017     00          | 	byte	0
37018                 | LR__5806
37018     24          | 	byte	"$"
37019     00          | 	byte	0
3701a                 | LR__5807
3701a     25          | 	byte	"%"
3701b     00          | 	byte	0
3701c                 | LR__5808
3701c     2D          | 	byte	"-"
3701d     00          | 	byte	0
3701e                 | LR__5809
3701e     24          | 	byte	"$"
3701f     00          | 	byte	0
37020                 | LR__5810
37020     25          | 	byte	"%"
37021     00          | 	byte	0
37022                 | LR__5811
37022     30          | 	byte	"0"
37023     00          | 	byte	0
37024                 | LR__5812
37024     39          | 	byte	"9"
37025     00          | 	byte	0
37026                 | LR__5813
37026     5F          | 	byte	"_"
37027     00          | 	byte	0
37028                 | LR__5814
37028     30          | 	byte	"0"
37029     00          | 	byte	0
3702a                 | LR__5815
3702a     39          | 	byte	"9"
3702b     00          | 	byte	0
3702c                 | LR__5816
3702c     61          | 	byte	"a"
3702d     00          | 	byte	0
3702e                 | LR__5817
3702e     66          | 	byte	"f"
3702f     00          | 	byte	0
37030                 | LR__5818
37030     5F          | 	byte	"_"
37031     00          | 	byte	0
37032                 | LR__5819
37032     30          | 	byte	"0"
37033     00          | 	byte	0
37034                 | LR__5820
37034     31          | 	byte	"1"
37035     00          | 	byte	0
37036                 | LR__5821
37036     5F          | 	byte	"_"
37037     00          | 	byte	0
37038                 | LR__5822
37038     30          | 	byte	"0"
37039     00          | 	byte	0
3703a                 | LR__5823
3703a     39          | 	byte	"9"
3703b     00          | 	byte	0
3703c                 | LR__5824
3703c     5F          | 	byte	"_"
3703d     00          | 	byte	0
3703e                 | LR__5825
3703e     22          | 	byte	34
3703f     00          | 	byte	0
37040                 | LR__5826
37040     22          | 	byte	34
37041     00          | 	byte	0
37042                 | LR__5827
37042     44 69 6D 3A 
37046     20 61 74 20 
3704a     6C 69 6E 65 
3704e     20          | 	byte	"Dim: at line "
3704f     00          | 	byte	0
37050                 | LR__5828
37050     3A 20 77 61 
37054     72 6E 69 6E 
37058     67 3A 20 74 
3705c     68 65 20 76 
37060     61 72 69 61 
37064     62 6C 65 20 
37068     65 78 69 73 
3706c     74 65 64 2E | 	byte	": warning: the variable existed."
37070     00          | 	byte	0
37071                 | LR__5829
37071     28          | 	byte	"("
37072     00          | 	byte	0
37073                 | LR__5830
37073     61 73       | 	byte	"as"
37075     00          | 	byte	0
37076                 | LR__5831
37076     61 73       | 	byte	"as"
37078     00          | 	byte	0
37079                 | LR__5832
37079     2C          | 	byte	","
3707a     00          | 	byte	0
3707b                 | LR__5833
3707b     29          | 	byte	")"
3707c     00          | 	byte	0
3707d                 | LR__5834
3707d     29          | 	byte	")"
3707e     00          | 	byte	0
3707f                 | LR__5835
3707f     61 73       | 	byte	"as"
37081     00          | 	byte	0
37082                 | LR__5836
37082     62 79 74 65 | 	byte	"byte"
37086     00          | 	byte	0
37087                 | LR__5837
37087     75 62 79 74 
3708b     65          | 	byte	"ubyte"
3708c     00          | 	byte	0
3708d                 | LR__5838
3708d     73 68 6F 72 
37091     74          | 	byte	"short"
37092     00          | 	byte	0
37093                 | LR__5839
37093     75 73 68 6F 
37097     72 74       | 	byte	"ushort"
37099     00          | 	byte	0
3709a                 | LR__5840
3709a     6C 6F 6E 67 | 	byte	"long"
3709e     00          | 	byte	0
3709f                 | LR__5841
3709f     69 6E 74 65 
370a3     67 65 72    | 	byte	"integer"
370a6     00          | 	byte	0
370a7                 | LR__5842
370a7     75 6C 6F 6E 
370ab     67          | 	byte	"ulong"
370ac     00          | 	byte	0
370ad                 | LR__5843
370ad     69 6E 74 36 
370b1     34          | 	byte	"int64"
370b2     00          | 	byte	0
370b3                 | LR__5844
370b3     75 69 6E 74 
370b7     36 34       | 	byte	"uint64"
370b9     00          | 	byte	0
370ba                 | LR__5845
370ba     73 69 6E 67 
370be     6C 65       | 	byte	"single"
370c0     00          | 	byte	0
370c1                 | LR__5846
370c1     64 6F 75 62 
370c5     6C 65       | 	byte	"double"
370c7     00          | 	byte	0
370c8                 | LR__5847
370c8     73 74 72 69 
370cc     6E 67       | 	byte	"string"
370ce     00          | 	byte	0
370cf                 | LR__5848
370cf     74 6F       | 	byte	"to"
370d1     00          | 	byte	0
370d2                 | LR__5849
370d2     73 74 65 70 | 	byte	"step"
370d6     00          | 	byte	0
370d7                 | LR__5850
370d7     73 2E       | 	byte	"s."
370d9     00          | 	byte	0
370da                 | LR__5851
370da     73 2E       | 	byte	"s."
370dc     00          | 	byte	0
370dd                 | LR__5852
370dd     67 6F 74 6F | 	byte	"goto"
370e1     00          | 	byte	0
370e2                 | LR__5853
370e2     67 6F 73 75 
370e6     62          | 	byte	"gosub"
370e7     00          | 	byte	0
370e8                 | LR__5854
370e8     24          | 	byte	"$"
370e9     00          | 	byte	0
370ea                 | LR__5855
370ea     26 68       | 	byte	"&h"
370ec     00          | 	byte	0
370ed                 | LR__5856
370ed     25          | 	byte	"%"
370ee     00          | 	byte	0
370ef                 | LR__5857
370ef     26 62       | 	byte	"&b"
370f1     00          | 	byte	0
370f2                 | LR__5858
370f2                 | 	byte	
370f2     00          | 	byte	0
370f3                 | LR__5859
370f3     61 63 6F 73 
370f7     3A 20       | 	byte	"acos: "
370f9     00          | 	byte	0
370fa                 | LR__5860
370fa     61 73 63 3A 
370fe     20          | 	byte	"asc: "
370ff     00          | 	byte	0
37100                 | LR__5861
37100     61 73 63 3A 
37104     20          | 	byte	"asc: "
37105     00          | 	byte	0
37106                 | LR__5862
37106     61 73 69 6E 
3710a     3A 20       | 	byte	"asin: "
3710c     00          | 	byte	0
3710d                 | LR__5863
3710d     61 74 6E 3A 
37111     20          | 	byte	"atn: "
37112     00          | 	byte	0
37113                 | LR__5864
37113     62 6C 69 74 
37117     3A 20       | 	byte	"blit: "
37119     00          | 	byte	0
3711a                 | LR__5865
3711a     62 69 6E 24 
3711e     3A 20       | 	byte	"bin$: "
37120     00          | 	byte	0
37121                 | LR__5866
37121     2F          | 	byte	"/"
37122     00          | 	byte	0
37123                 | LR__5867
37123     2F 73 64 2F 
37127     62 69 6E 2F | 	byte	"/sd/bin/"
3712b     00          | 	byte	0
3712c                 | LR__5868
3712c     53 79 73 74 
37130     65 6D 20 65 
37134     72 72 6F 72 
37138     20          | 	byte	"System error "
37139     00          | 	byte	0
3713a                 | LR__5869
3713a     3A 20       | 	byte	": "
3713c     00          | 	byte	0
3713d                 | LR__5870
3713d     2A          | 	byte	"*"
3713e     00          | 	byte	0
3713f                 | LR__5871
3713f     2E 2E       | 	byte	".."
37141     00          | 	byte	0
37142                 | LR__5872
37142     2F          | 	byte	"/"
37143     00          | 	byte	0
37144                 | LR__5873
37144     2F          | 	byte	"/"
37145     00          | 	byte	0
37146                 | LR__5874
37146     53 79 73 74 
3714a     65 6D 20 65 
3714e     72 72 6F 72 
37152     20          | 	byte	"System error "
37153     00          | 	byte	0
37154                 | LR__5875
37154     3A 20       | 	byte	": "
37156     00          | 	byte	0
37157                 | LR__5876
37157     43 75 72 72 
3715b     65 6E 74 20 
3715f     64 69 72 65 
37163     63 74 6F 72 
37167     79 3A 20    | 	byte	"Current directory: "
3716a     00          | 	byte	0
3716b                 | LR__5877
3716b     2F          | 	byte	"/"
3716c     00          | 	byte	0
3716d                 | LR__5878
3716d     53 79 73 74 
37171     65 6D 20 65 
37175     72 72 6F 72 
37179     20          | 	byte	"System error "
3717a     00          | 	byte	0
3717b                 | LR__5879
3717b     3A 20       | 	byte	": "
3717d     00          | 	byte	0
3717e                 | LR__5880
3717e     43 75 72 72 
37182     65 6E 74 20 
37186     64 69 72 65 
3718a     63 74 6F 72 
3718e     79 3A 20    | 	byte	"Current directory: "
37191     00          | 	byte	0
37192                 | LR__5881
37192     2F          | 	byte	"/"
37193     00          | 	byte	0
37194                 | LR__5882
37194     2F          | 	byte	"/"
37195     00          | 	byte	0
37196                 | LR__5883
37196     2F          | 	byte	"/"
37197     00          | 	byte	0
37198                 | LR__5884
37198     53 79 73 74 
3719c     65 6D 20 65 
371a0     72 72 6F 72 
371a4     20          | 	byte	"System error "
371a5     00          | 	byte	0
371a6                 | LR__5885
371a6     3A 20       | 	byte	": "
371a8     00          | 	byte	0
371a9                 | LR__5886
371a9     43 75 72 72 
371ad     65 6E 74 20 
371b1     64 69 72 65 
371b5     63 74 6F 72 
371b9     79 3A 20    | 	byte	"Current directory: "
371bc     00          | 	byte	0
371bd                 | LR__5887
371bd     63 68 72 24 
371c1     3A 20       | 	byte	"chr$: "
371c3     00          | 	byte	0
371c4                 | LR__5888
371c4     63 68 61 6E 
371c8     6E 65 6C 23 
371cc     20 65 78 70 
371d0     65 63 74 65 
371d4     64          | 	byte	"channel# expected"
371d5     00          | 	byte	0
371d6                 | LR__5889
371d6     63 6F 67 69 
371da     6E 69 74 3A 
371de     20          | 	byte	"coginit: "
371df     00          | 	byte	0
371e0                 | LR__5890
371e0     53 79 73 74 
371e4     65 6D 20 65 
371e8     72 72 6F 72 
371ec     20 2D 20    | 	byte	"System error - "
371ef     00          | 	byte	0
371f0                 | LR__5891
371f0     20 69 6E 20 
371f4     6C 69 6E 65 
371f8     20          | 	byte	" in line "
371f9     00          | 	byte	0
371fa                 | LR__5892
371fa     3A 20       | 	byte	": "
371fc     00          | 	byte	0
371fd                 | LR__5893
371fd     2C 20 66 69 
37201     6C 65 20 6E 
37205     61 6D 65 3A 
37209     20          | 	byte	", file name: "
3720a     00          | 	byte	0
3720b                 | LR__5894
3720b     53 79 73 74 
3720f     65 6D 20 65 
37213     72 72 6F 72 
37217     20 2D 20    | 	byte	"System error - "
3721a     00          | 	byte	0
3721b                 | LR__5895
3721b     20 69 6E 20 
3721f     6C 69 6E 65 
37223     20          | 	byte	" in line "
37224     00          | 	byte	0
37225                 | LR__5896
37225     3A 20       | 	byte	": "
37227     00          | 	byte	0
37228                 | LR__5897
37228     2C 20 66 69 
3722c     6C 65 20 6E 
37230     61 6D 65 3A 
37234     20          | 	byte	", file name: "
37235     00          | 	byte	0
37236                 | LR__5898
37236     63 6F 73 3A 
3723a     20          | 	byte	"cos: "
3723b     00          | 	byte	0
3723c                 | LR__5899
3723c                 | 	byte	
3723c     00          | 	byte	0
3723d                 | LR__5900
3723d                 | 	byte	
3723d     00          | 	byte	0
3723e                 | LR__5901
3723e     2F 73 64 2F 
37242     6D 65 64 69 
37246     61 2F 68 2F | 	byte	"/sd/media/h/"
3724a     00          | 	byte	0
3724b                 | LR__5902
3724b     53 79 73 74 
3724f     65 6D 20 65 
37253     72 72 6F 72 
37257     20          | 	byte	"System error "
37258     00          | 	byte	0
37259                 | LR__5903
37259     3A 20       | 	byte	": "
3725b     00          | 	byte	0
3725c                 | LR__5904
3725c                 | 	byte	
3725c     00          | 	byte	0
3725d                 | LR__5905
3725d                 | 	byte	
3725d     00          | 	byte	0
3725e                 | LR__5906
3725e     2F 73 64 2F 
37262     6D 65 64 69 
37266     61 2F 73 2F | 	byte	"/sd/media/s/"
3726a     00          | 	byte	0
3726b                 | LR__5907
3726b     53 79 73 74 
3726f     65 6D 20 65 
37273     72 72 6F 72 
37277     20          | 	byte	"System error "
37278     00          | 	byte	0
37279                 | LR__5908
37279     3A 20       | 	byte	": "
3727b     00          | 	byte	0
3727c                 | LR__5909
3727c     2F          | 	byte	"/"
3727d     00          | 	byte	0
3727e                 | LR__5910
3727e     2F          | 	byte	"/"
3727f     00          | 	byte	0
37280                 | LR__5911
37280     2F          | 	byte	"/"
37281     00          | 	byte	0
37282                 | LR__5912
37282     43 61 6E 6E 
37286     6F 74 20 64 
3728a     65 6C 65 74 
3728e     65 20 66 69 
37292     6C 65 20 6F 
37296     72 20 66 69 
3729a     6C 65 20 64 
3729e     6F 65 73 6E 
372a2     27 74 20 65 
372a6     78 69 73 74 
372aa     3A 20 73 79 
372ae     73 74 65 6D 
372b2     20 65 72 72 
372b6     6F 72 20    | 	byte	"Cannot delete file or file doesn't exist: system error "
372b9     00          | 	byte	0
372ba                 | LR__5913
372ba     43 75 72 72 
372be     65 6E 74 20 
372c2     64 69 72 65 
372c6     63 74 6F 72 
372ca     79 3A 20    | 	byte	"Current directory: "
372cd     00          | 	byte	0
372ce                 | LR__5914
372ce                 | 	byte	
372ce     00          | 	byte	0
372cf                 | LR__5915
372cf     2A          | 	byte	"*"
372d0     00          | 	byte	0
372d1                 | LR__5916
372d1                 | 	byte	
372d1     00          | 	byte	0
372d2                 | LR__5917
372d2     5B 64 69 72 
372d6     5D 20       | 	byte	"[dir] "
372d8     00          | 	byte	0
372d9                 | LR__5918
372d9     4D 6F 72 65 
372dd     20 74 68 61 
372e1     6E 20 31 32 
372e5     38 20 65 6E 
372e9     74 72 69 65 
372ed     73 20 66 6F 
372f1     75 6E 64 3A 
372f5     20 63 6C 65 
372f9     61 6E 20 79 
372fd     6F 75 72 20 
37301     64 69 72 65 
37305     63 74 6F 72 
37309     79          | 	byte	"More than 128 entries found: clean your directory"
3730a     00          | 	byte	0
3730b                 | LR__5919
3730b     2A          | 	byte	"*"
3730c     00          | 	byte	0
3730d                 | LR__5920
3730d                 | 	byte	
3730d     00          | 	byte	0
3730e                 | LR__5921
3730e     4D 6F 72 65 
37312     20 74 68 61 
37316     6E 20 31 32 
3731a     38 20 65 6E 
3731e     74 72 69 65 
37322     73 20 66 6F 
37326     75 6E 64 3A 
3732a     20 63 6C 65 
3732e     61 6E 20 79 
37332     6F 75 72 20 
37336     64 69 72 65 
3733a     63 74 6F 72 
3733e     79          | 	byte	"More than 128 entries found: clean your directory"
3733f     00          | 	byte	0
37340                 | LR__5922
37340     45 72 72 6F 
37344     72 20       | 	byte	"Error "
37346     00          | 	byte	0
37347                 | LR__5923
37347     3A 20       | 	byte	": "
37349     00          | 	byte	0
3734a                 | LR__5924
3734a     67 65 74 63 
3734e     6F 6C 6F 72 
37352     20          | 	byte	"getcolor "
37353     00          | 	byte	0
37354                 | LR__5925
37354     67 65 74 65 
37358     6E 76 73 75 
3735c     73 74 61 69 
37360     6E 3A 20    | 	byte	"getenvsustain: "
37363     00          | 	byte	0
37364                 | LR__5926
37364     67 65 74 70 
37368     69 78 65 6C 
3736c     3A 20       | 	byte	"getpixel: "
3736e     00          | 	byte	0
3736f                 | LR__5927
3736f     68 65 78 24 
37373     3A 20       | 	byte	"hex$: "
37375     00          | 	byte	0
37376                 | LR__5928
37376                 | 	byte	
37376     00          | 	byte	0
37377                 | LR__5929
37377     49 6E 20 69 
3737b     6E 70 75 74 
3737f     3A 20       | 	byte	"In input: "
37381     00          | 	byte	0
37382                 | LR__5930
37382     2C          | 	byte	","
37383     00          | 	byte	0
37384                 | LR__5931
37384                 | 	byte	
37384     00          | 	byte	0
37385                 | LR__5932
37385                 | 	byte	
37385     00          | 	byte	0
37386                 | LR__5933
37386     6C 65 66 74 
3738a     24 3A 20    | 	byte	"left$: "
3738d     00          | 	byte	0
3738e                 | LR__5934
3738e     6C 65 66 74 
37392     24 3A 20    | 	byte	"left$: "
37395     00          | 	byte	0
37396                 | LR__5935
37396     6C 65 6E 3A 
3739a     20          | 	byte	"len: "
3739b     00          | 	byte	0
3739c                 | LR__5936
3739c     6C 65 6E 3A 
373a0     20          | 	byte	"len: "
373a1     00          | 	byte	0
373a2                 | LR__5937
373a2                 | 	byte	
373a2     00          | 	byte	0
373a3                 | LR__5938
373a3     2F          | 	byte	"/"
373a4     00          | 	byte	0
373a5                 | LR__5939
373a5     2F          | 	byte	"/"
373a6     00          | 	byte	0
373a7                 | LR__5940
373a7     2E 62 61 73 | 	byte	".bas"
373ab     00          | 	byte	0
373ac                 | LR__5941
373ac     53 79 73 74 
373b0     65 6D 20 65 
373b4     72 72 6F 72 
373b8     20          | 	byte	"System error "
373b9     00          | 	byte	0
373ba                 | LR__5942
373ba     3A 20       | 	byte	": "
373bc     00          | 	byte	0
373bd                 | LR__5943
373bd     2E 62 61 73 | 	byte	".bas"
373c1     00          | 	byte	0
373c2                 | LR__5944
373c2     2F          | 	byte	"/"
373c3     00          | 	byte	0
373c4                 | LR__5945
373c4                 | 	byte	
373c4     00          | 	byte	0
373c5                 | LR__5946
373c5     4C 6F 61 64 
373c9     65 64 20    | 	byte	"Loaded "
373cc     00          | 	byte	0
373cd                 | LR__5947
373cd     2F          | 	byte	"/"
373ce     00          | 	byte	0
373cf                 | LR__5948
373cf     6C 6F 67 3A 
373d3     20          | 	byte	"log: "
373d4     00          | 	byte	0
373d5                 | LR__5949
373d5     6D 69 64 24 
373d9     3A 20       | 	byte	"mid$: "
373db     00          | 	byte	0
373dc                 | LR__5950
373dc     6D 69 64 24 
373e0     3A 20       | 	byte	"mid$: "
373e2     00          | 	byte	0
373e3                 | LR__5951
373e3     43 61 6E 6E 
373e7     6F 74 20 63 
373eb     72 65 61 74 
373ef     65 20 61 20 
373f3     64 69 72 65 
373f7     63 74 6F 72 
373fb     79 3A 20 73 
373ff     79 73 74 65 
37403     6D 20 65 72 
37407     72 6F 72 20 | 	byte	"Cannot create a directory: system error "
3740b     00          | 	byte	0
3740c                 | LR__5952
3740c     20 42 41 53 
37410     49 43 20 62 
37414     79 74 65 73 
37418     20 66 72 65 
3741c     65          | 	byte	" BASIC bytes free"
3741d     00          | 	byte	0
3741e                 | LR__5953
3741e                 | 	byte	
3741e     00          | 	byte	0
3741f                 | LR__5954
3741f                 | 	byte	
3741f     00          | 	byte	0
37420                 | LR__5955
37420                 | 	byte	
37420     00          | 	byte	0
37421                 | LR__5956
37421     6E 6F 6E 61 
37425     6D 65 2E 62 
37429     61 73       | 	byte	"noname.bas"
3742b     00          | 	byte	0
3742c                 | LR__5957
3742c     66 69 6C 65 
37430     6E 61 6D 65 
37434     20 65 78 70 
37438     65 63 74 65 
3743c     64          | 	byte	"filename expected"
3743d     00          | 	byte	0
3743e                 | LR__5958
3743e     72 65 61 64 | 	byte	"read"
37442     00          | 	byte	0
37443                 | LR__5959
37443     77 72 69 74 
37447     65          | 	byte	"write"
37448     00          | 	byte	0
37449                 | LR__5960
37449     61 70 70 65 
3744d     6E 64       | 	byte	"append"
3744f     00          | 	byte	0
37450                 | LR__5961
37450     63 68 61 6E 
37454     6E 65 6C 23 
37458     20 65 78 70 
3745c     65 63 74 65 
37460     64          | 	byte	"channel# expected"
37461     00          | 	byte	0
37462                 | LR__5962
37462     4F 70 65 6E 
37466     3A 20 69 6E 
3746a     76 61 6C 69 
3746e     64 20 6D 6F 
37472     64 65       | 	byte	"Open: invalid mode"
37474     00          | 	byte	0
37475                 | LR__5963
37475     70 61 64 68 
37479     3A 20       | 	byte	"padh: "
3747b     00          | 	byte	0
3747c                 | LR__5964
3747c     70 61 64 72 
37480     78 3A 20    | 	byte	"padrx: "
37483     00          | 	byte	0
37484                 | LR__5965
37484     70 61 64 72 
37488     79 3A 20    | 	byte	"padry: "
3748b     00          | 	byte	0
3748c                 | LR__5966
3748c     70 61 64 72 
37490     7A 3A 20    | 	byte	"padrz: "
37493     00          | 	byte	0
37494                 | LR__5967
37494     70 61 64 78 
37498     3A 20       | 	byte	"padx: "
3749a     00          | 	byte	0
3749b                 | LR__5968
3749b     70 61 64 79 
3749f     3A 20       | 	byte	"pady: "
374a1     00          | 	byte	0
374a2                 | LR__5969
374a2     70 61 64 7A 
374a6     3A 20       | 	byte	"padz: "
374a8     00          | 	byte	0
374a9                 | LR__5970
374a9     50 72 69 6E 
374ad     74 20 74 6F 
374b1     20 63 68 61 
374b5     6E 6E 65 6C 
374b9     20 28 6E 6F 
374bd     74 20 79 65 
374c1     74 20 69 6D 
374c5     70 6C 65 6D 
374c9     65 6E 74 65 
374cd     64 29       | 	byte	"Print to channel (not yet implemented)"
374cf     00          | 	byte	0
374d0                 | LR__5971
374d0                 | 	byte	
374d0     00          | 	byte	0
374d1                 | LR__5972
374d1     64 61 74 61 | 	byte	"data"
374d5     00          | 	byte	0
374d6                 | LR__5973
374d6                 | 	byte	
374d6     00          | 	byte	0
374d7                 | LR__5974
374d7     49 6E 20 72 
374db     65 61 64 3A 
374df     20          | 	byte	"In read: "
374e0     00          | 	byte	0
374e1                 | LR__5975
374e1                 | 	byte	
374e1     00          | 	byte	0
374e2                 | LR__5976
374e2                 | 	byte	
374e2     00          | 	byte	0
374e3                 | LR__5977
374e3     27          | 	byte	"'"
374e4     00          | 	byte	0
374e5                 | LR__5978
374e5     2C          | 	byte	","
374e6     00          | 	byte	0
374e7                 | LR__5979
374e7                 | 	byte	
374e7     00          | 	byte	0
374e8                 | LR__5980
374e8                 | 	byte	
374e8     00          | 	byte	0
374e9                 | LR__5981
374e9                 | 	byte	
374e9     00          | 	byte	0
374ea                 | LR__5982
374ea                 | 	byte	
374ea     00          | 	byte	0
374eb                 | LR__5983
374eb                 | 	byte	
374eb     00          | 	byte	0
374ec                 | LR__5984
374ec     72 69 67 68 
374f0     74 24 3A 20 | 	byte	"right$: "
374f4     00          | 	byte	0
374f5                 | LR__5985
374f5     72 69 67 68 
374f9     74 24 3A 20 | 	byte	"right$: "
374fd     00          | 	byte	0
374fe                 | LR__5986
374fe     72 6E 64 3A 
37502     20          | 	byte	"rnd: "
37503     00          | 	byte	0
37504                 | LR__5987
37504     72 6E 64 3A 
37508     20          | 	byte	"rnd: "
37509     00          | 	byte	0
3750a                 | LR__5988
3750a                 | 	byte	
3750a     00          | 	byte	0
3750b                 | LR__5989
3750b     53 74 6F 70 
3750f     70 65 64 20 
37513     61 74 20 6C 
37517     69 6E 65 20 | 	byte	"Stopped at line "
3751b     00          | 	byte	0
3751c                 | LR__5990
3751c                 | 	byte	
3751c     00          | 	byte	0
3751d                 | LR__5991
3751d     2F          | 	byte	"/"
3751e     00          | 	byte	0
3751f                 | LR__5992
3751f                 | 	byte	
3751f     00          | 	byte	0
37520                 | LR__5993
37520     53 61 76 65 
37524     64 20 61 73 
37528     20          | 	byte	"Saved as "
37529     00          | 	byte	0
3752a                 | LR__5994
3752a     2F          | 	byte	"/"
3752b     00          | 	byte	0
3752c                 | LR__5995
3752c     73 65 74 63 
37530     6F 6C 6F 72 
37534     3A 20       | 	byte	"setcolor: "
37536     00          | 	byte	0
37537                 | LR__5996
37537     73 69 6E 3A 
3753b     20          | 	byte	"sin: "
3753c     00          | 	byte	0
3753d                 | LR__5997
3753d     73 71 72 3A 
37541     20          | 	byte	"sqr: "
37542     00          | 	byte	0
37543                 | LR__5998
37543     73 74 69 63 
37547     6B 3A 20    | 	byte	"stick: "
3754a     00          | 	byte	0
3754b                 | LR__5999
3754b     73 74 72 69 
3754f     67 3A 20    | 	byte	"strig: "
37552     00          | 	byte	0
37553                 | LR__6000
37553     74 61 6E 3A 
37557     20          | 	byte	"tan: "
37558     00          | 	byte	0
37559                 | LR__6001
37559     76 61 6C 3A 
3755d     20          | 	byte	"val: "
3755e     00          | 	byte	0
3755f                 | LR__6002
3755f     76 61 6C 3A 
37563     20          | 	byte	"val: "
37564     00          | 	byte	0
37565                 | LR__6003
37565     24          | 	byte	"$"
37566     00          | 	byte	0
37567                 | LR__6004
37567     26 68       | 	byte	"&h"
37569     00          | 	byte	0
3756a                 | LR__6005
3756a     25          | 	byte	"%"
3756b     00          | 	byte	0
3756c                 | LR__6006
3756c     26 62       | 	byte	"&b"
3756e     00          | 	byte	0
3756f                 | LR__6007
3756f                 | 	byte	
3756f     00          | 	byte	0
37570                 | LR__6008
37570     45 78 70 65 
37574     63 74 65 64 
37578     20 6E 75 6D 
3757c     62 65 72 2C 
37580     20 67 6F 74 
37584     20 73 6F 6D 
37588     65 74 68 69 
3758c     6E 67 20 65 
37590     6C 73 65    | 	byte	"Expected number, got something else"
37593     00          | 	byte	0
37594                 | LR__6009
37594     43 61 6E 6E 
37598     6F 74 20 61 
3759c     64 64 20 61 
375a0     20 6E 75 6D 
375a4     62 65 72 20 
375a8     74 6F 20 61 
375ac     20 73 74 72 
375b0     69 6E 67    | 	byte	"Cannot add a number to a string"
375b3     00          | 	byte	0
375b4                 | LR__6010
375b4     43 61 6E 6E 
375b8     6F 74 20 73 
375bc     75 62 73 74 
375c0     72 61 63 74 
375c4     20 73 74 72 
375c8     69 6E 67 73 | 	byte	"Cannot substract strings"
375cc     00          | 	byte	0
375cd                 | LR__6011
375cd     55 6E 6B 6E 
375d1     6F 77 6E 20 
375d5     65 72 72 6F 
375d9     72 20 77 68 
375dd     69 6C 65 20 
375e1     61 64 64 69 
375e5     6E 67       | 	byte	"Unknown error while adding"
375e7     00          | 	byte	0
375e8                 | LR__6012
375e8     55 6E 6B 6E 
375ec     6F 77 6E 20 
375f0     65 72 72 6F 
375f4     72 20 77 68 
375f8     69 6C 65 20 
375fc     73 75 62 73 
37600     74 72 61 63 
37604     74 69 6E 67 | 	byte	"Unknown error while substracting"
37608     00          | 	byte	0
37609                 | LR__6013
37609     43 61 6E 6E 
3760d     6F 74 20 64 
37611     6F 20 6C 6F 
37615     67 69 63 20 
37619     6F 70 65 72 
3761d     61 74 69 6F 
37621     6E 20 6F 6E 
37625     20 73 74 72 
37629     69 6E 67 20 
3762d     6F 72 20 66 
37631     6C 6F 61 74 | 	byte	"Cannot do logic operation on string or float"
37635     00          | 	byte	0
37636                 | LR__6014
37636     55 6E 6B 6E 
3763a     6F 77 6E 20 
3763e     65 72 72 6F 
37642     72 20 77 68 
37646     69 6C 65 20 
3764a     64 6F 69 6E 
3764e     67 20 6C 6F 
37652     67 69 63 20 
37656     6F 70 65 72 
3765a     61 74 69 6F 
3765e     6E          | 	byte	"Unknown error while doing logic operation"
3765f     00          | 	byte	0
37660                 | LR__6015
37660     43 61 6E 6E 
37664     6F 74 20 6D 
37668     75 6C 74 69 
3766c     70 6C 79 20 
37670     73 74 72 69 
37674     6E 67 73    | 	byte	"Cannot multiply strings"
37677     00          | 	byte	0
37678                 | LR__6016
37678     55 6E 6B 6E 
3767c     6F 77 6E 20 
37680     65 72 72 6F 
37684     72 20 77 68 
37688     69 6C 65 20 
3768c     6D 75 6C 74 
37690     69 70 6C 79 
37694     69 6E 67    | 	byte	"Unknown error while multiplying"
37697     00          | 	byte	0
37698                 | LR__6017
37698     43 61 6E 6E 
3769c     6F 74 20 64 
376a0     69 76 69 64 
376a4     65 20 73 74 
376a8     72 69 6E 67 
376ac     73          | 	byte	"Cannot divide strings"
376ad     00          | 	byte	0
376ae                 | LR__6018
376ae     55 6E 6B 6E 
376b2     6F 77 6E 20 
376b6     65 72 72 6F 
376ba     72 20 77 68 
376be     69 6C 65 20 
376c2     64 69 76 69 
376c6     64 69 6E 67 | 	byte	"Unknown error while dividing"
376ca     00          | 	byte	0
376cb                 | LR__6019
376cb     43 61 6E 6E 
376cf     6F 74 20 63 
376d3     6F 6D 70 75 
376d7     74 65 20 61 
376db     20 70 6F 77 
376df     65 72 20 6F 
376e3     66 20 61 20 
376e7     73 74 72 69 
376eb     6E 67       | 	byte	"Cannot compute a power of a string"
376ed     00          | 	byte	0
376ee                 | LR__6020
376ee     55 6E 6B 6E 
376f2     6F 77 6E 20 
376f6     65 72 72 6F 
376fa     72 20 77 68 
376fe     69 6C 65 20 
37702     63 6F 6D 70 
37706     75 74 69 6E 
3770a     67 20 61 20 
3770e     70 6F 77 65 
37712     72          | 	byte	"Unknown error while computing a power"
37713     00          | 	byte	0
37714                 | LR__6021
37714     52 69 67 68 
37718     74 20 70 61 
3771c     72 65 6E 74 
37720     68 65 73 69 
37724     73 20 65 78 
37728     70 65 63 74 
3772c     65 64       | 	byte	"Right parenthesis expected"
3772e     00          | 	byte	0
3772f                 | LR__6022
3772f     45 78 70 65 
37733     63 74 65 64 
37737     20 73 74 72 
3773b     69 6E 67    | 	byte	"Expected string"
3773e     00          | 	byte	0
3773f                 | LR__6023
3773f     45 78 70 65 
37743     63 74 65 64 
37747     20 66 6C 6F 
3774b     61 74       | 	byte	"Expected float"
3774d     00          | 	byte	0
3774e                 | LR__6024
3774e     45 78 70 65 
37752     63 74 65 64 
37756     20 75 6E 73 
3775a     69 67 6E 65 
3775e     64 20 69 6E 
37762     74 65 67 65 
37766     72          | 	byte	"Expected unsigned integer"
37767     00          | 	byte	0
37768                 | LR__6025
37768     45 78 70 65 
3776c     63 74 65 64 
37770     20 69 6E 74 
37774     65 67 65 72 | 	byte	"Expected integer"
37778     00          | 	byte	0
37779                 | LR__6026
37779     4E 6F 20 6D 
3777d     6F 72 65 20 
37781     76 61 72 69 
37785     61 62 6C 65 
37789     20 73 6C 6F 
3778d     74 73       | 	byte	"No more variable slots"
3778f     00          | 	byte	0
37790                 | LR__6027
37790     56 61 72 69 
37794     61 62 6C 65 
37798     20 6E 6F 74 
3779c     20 66 6F 75 
377a0     6E 64       | 	byte	"Variable not found"
377a2     00          | 	byte	0
377a3                 | LR__6028
377a3     43 6F 6D 6D 
377a7     61 20 65 78 
377ab     70 65 63 74 
377af     65 64       | 	byte	"Comma expected"
377b1     00          | 	byte	0
377b2                 | LR__6029
377b2     43 6F 6D 6D 
377b6     61 20 6F 72 
377ba     20 73 65 6D 
377be     69 63 6F 6C 
377c2     6F 6E 20 65 
377c6     78 70 65 63 
377ca     74 65 64    | 	byte	"Comma or semicolon expected"
377cd     00          | 	byte	0
377ce                 | LR__6030
377ce     55 6E 6B 6E 
377d2     6F 77 6E 20 
377d6     63 6F 6D 6D 
377da     61 6E 64    | 	byte	"Unknown command"
377dd     00          | 	byte	0
377de                 | LR__6031
377de     53 74 61 63 
377e2     6B 20 75 6E 
377e6     64 65 72 66 
377ea     6C 6F 77    | 	byte	"Stack underflow"
377ed     00          | 	byte	0
377ee                 | LR__6032
377ee     43 61 6E 6E 
377f2     6F 74 20 65 
377f6     78 65 63 75 
377fa     74 65 20 67 
377fe     6F 74 6F 20 
37802     6F 72 20 67 
37806     6F 73 75 62 
3780a     20 69 6E 20 
3780e     74 68 65 20 
37812     69 6D 6D 65 
37816     64 69 61 74 
3781a     65 20 6D 6F 
3781e     64 65       | 	byte	"Cannot execute goto or gosub in the immediate mode"
37820     00          | 	byte	0
37821                 | LR__6033
37821     43 61 6E 6E 
37825     6F 74 20 6C 
37829     6F 61 64 20 
3782d     66 72 6F 6D 
37831     20 74 68 69 
37835     73 20 66 69 
37839     6C 65       | 	byte	"Cannot load from this file"
3783b     00          | 	byte	0
3783c                 | LR__6034
3783c     54 68 65 20 
37840     70 72 6F 67 
37844     72 61 6D 20 
37848     69 73 20 65 
3784c     6D 70 74 79 | 	byte	"The program is empty"
37850     00          | 	byte	0
37851                 | LR__6035
37851     49 66 20 61 
37855     66 74 65 72 
37859     20 69 66    | 	byte	"If after if"
3785c     00          | 	byte	0
3785d                 | LR__6036
3785d     45 6D 70 74 
37861     79 20 65 78 
37865     70 72 65 73 
37869     73 69 6F 6E | 	byte	"Empty expression"
3786d     00          | 	byte	0
3786e                 | LR__6037
3786e     53 74 72 69 
37872     6E 67 20 65 
37876     78 70 65 63 
3787a     74 65 64    | 	byte	"String expected"
3787d     00          | 	byte	0
3787e                 | LR__6038
3787e     49 6E 74 65 
37882     72 70 72 65 
37886     74 65 72 20 
3788a     69 6E 74 65 
3788e     72 6E 61 6C 
37892     20 65 72 72 
37896     6F 72       | 	byte	"Interpreter internal error"
37898     00          | 	byte	0
37899                 | LR__6039
37899     45 78 70 65 
3789d     63 74 65 64 
378a1     20 61 73 73 
378a5     69 67 6E    | 	byte	"Expected assign"
378a8     00          | 	byte	0
378a9                 | LR__6040
378a9     45 78 70 65 
378ad     63 74 65 64 
378b1     20 27 74 6F 
378b5     27          | 	byte	"Expected 'to'"
378b6     00          | 	byte	0
378b7                 | LR__6041
378b7     45 78 70 65 
378bb     63 74 65 64 
378bf     20 69 6E 74 
378c3     65 67 65 72 
378c7     20 76 61 72 
378cb     69 61 62 6C 
378cf     65          | 	byte	"Expected integer variable"
378d0     00          | 	byte	0
378d1                 | LR__6042
378d1     55 6E 69 6E 
378d5     69 74 69 61 
378d9     6C 69 7A 65 
378dd     64 20 76 61 
378e1     72 69 61 62 
378e5     6C 65 20 69 
378e9     6E 20 27 6E 
378ed     65 78 74 27 
378f1     2C 20 75 73 
378f5     65 20 27 66 
378f9     6F 72 27 20 
378fd     62 65 66 6F 
37901     72 65       | 	byte	"Uninitialized variable in 'next', use 'for' before"
37903     00          | 	byte	0
37904                 | LR__6043
37904     4E 6F 20 6D 
37908     6F 72 65 20 
3790c     73 6C 6F 74 
37910     73 20 66 6F 
37914     72 20 27 66 
37918     6F 72 27    | 	byte	"No more slots for 'for'"
3791b     00          | 	byte	0
3791c                 | LR__6044
3791c     27 4E 65 78 
37920     74 27 20 64 
37924     6F 65 73 6E 
37928     27 74 20 6D 
3792c     61 74 63 68 
37930     20 27 66 6F 
37934     72 27       | 	byte	"'Next' doesn't match 'for'"
37936     00          | 	byte	0
37937                 | LR__6045
37937     27 47 6F 74 
3793b     6F 27 20 74 
3793f     61 72 67 65 
37943     74 20 6C 69 
37947     6E 65 20 6E 
3794b     6F 74 20 66 
3794f     6F 75 6E 64 | 	byte	"'Goto' target line not found"
37953     00          | 	byte	0
37954                 | LR__6046
37954     42 61 64 20 
37958     6E 75 6D 62 
3795c     65 72 20 6F 
37960     66 20 70 61 
37964     72 61 6D 65 
37968     74 65 72 73 | 	byte	"Bad number of parameters"
3796c     00          | 	byte	0
3796d                 | LR__6047
3796d     46 75 6E 63 
37971     74 69 6F 6E 
37975     20 75 6E 64 
37979     65 66 69 6E 
3797d     65 64 20 66 
37981     6F 72 20 73 
37985     74 72 69 6E 
37989     67 73       | 	byte	"Function undefined for strings"
3798b     00          | 	byte	0
3798c                 | LR__6048
3798c     42 61 64 20 
37990     70 61 72 61 
37994     6D 65 74 65 
37998     72          | 	byte	"Bad parameter"
37999     00          | 	byte	0
3799a                 | LR__6049
3799a     43 61 6E 6E 
3799e     6F 74 20 64 
379a2     65 63 6C 61 
379a6     72 65 20 61 
379aa     6E 20 61 72 
379ae     72 61 79 3A 
379b2     20 74 68 65 
379b6     20 76 61 72 
379ba     69 61 62 6C 
379be     65 20 65 78 
379c2     69 73 74 73 | 	byte	"Cannot declare an array: the variable exists"
379c6     00          | 	byte	0
379c7                 | LR__6050
379c7     45 78 70 65 
379cb     63 74 65 64 
379cf     20 27 28 27 | 	byte	"Expected '('"
379d3     00          | 	byte	0
379d4                 | LR__6051
379d4     45 78 70 65 
379d8     63 74 65 64 
379dc     20 27 29 27 
379e0     20 6F 72 20 
379e4     27 2C 27    | 	byte	"Expected ')' or ','"
379e7     00          | 	byte	0
379e8                 | LR__6052
379e8     4E 6F 20 6D 
379ec     6F 72 65 20 
379f0     74 68 61 6E 
379f4     20 33 20 64 
379f8     69 6D 65 6E 
379fc     73 69 6F 6E 
37a00     73 20 73 75 
37a04     70 70 6F 72 
37a08     74 65 64    | 	byte	"No more than 3 dimensions supported"
37a0b     00          | 	byte	0
37a0c                 | LR__6053
37a0c     56 61 72 69 
37a10     61 62 6C 65 
37a14     20 6E 61 6D 
37a18     65 20 65 78 
37a1c     70 65 63 74 
37a20     65 64       | 	byte	"Variable name expected"
37a22     00          | 	byte	0
37a23                 | LR__6054
37a23     54 79 70 65 
37a27     20 6E 61 6D 
37a2b     65 20 65 78 
37a2f     70 65 63 74 
37a33     65 64       | 	byte	"Type name expected"
37a35     00          | 	byte	0
37a36                 | LR__6055
37a36     54 79 70 65 
37a3a     20 6E 6F 74 
37a3e     20 73 75 70 
37a42     70 6F 72 74 
37a46     65 64 20 79 
37a4a     65 74       | 	byte	"Type not supported yet"
37a4c     00          | 	byte	0
37a4d                 | LR__6056
37a4d     41 72 72 61 
37a51     79 20 69 6E 
37a55     64 65 78 20 
37a59     6F 75 74 20 
37a5d     6F 66 20 72 
37a61     61 6E 67 65 | 	byte	"Array index out of range"
37a65     00          | 	byte	0
37a66                 | LR__6057
37a66     42 61 64 20 
37a6a     74 79 70 65 
37a6e     20 77 68 69 
37a72     6C 65 20 61 
37a76     73 73 69 67 
37a7a     6E 69 6E 67 
37a7e     20 74 6F 20 
37a82     61 72 72 61 
37a86     79          | 	byte	"Bad type while assigning to array"
37a87     00          | 	byte	0
37a88                 | LR__6058
37a88     54 6F 6F 20 
37a8c     6D 61 6E 79 
37a90     20 76 61 72 
37a94     69 61 62 6C 
37a98     65 73       | 	byte	"Too many variables"
37a9a     00          | 	byte	0
37a9b                 | LR__6059
37a9b     27 54 68 65 
37a9f     6E 27 20 65 
37aa3     78 70 65 63 
37aa7     74 65 64    | 	byte	"'Then' expected"
37aaa     00          | 	byte	0
37aab                 | LR__6060
37aab     44 69 72 65 
37aaf     63 74 6F 72 
37ab3     79 20 64 6F 
37ab7     65 73 6E 27 
37abb     74 20 65 78 
37abf     69 73 74    | 	byte	"Directory doesn't exist"
37ac2     00          | 	byte	0
37ac3                 | LR__6061
37ac3     55 6E 65 78 
37ac7     70 65 63 74 
37acb     65 64 20 65 
37acf     6E 64 20 6F 
37ad3     66 20 6C 69 
37ad7     6E 65       | 	byte	"Unexpected end of line"
37ad9     00          | 	byte	0
37ada                 | LR__6062
37ada     4E 6F 20 6D 
37ade     6F 72 65 20 
37ae2     64 61 74 61 | 	byte	"No more data"
37ae6     00          | 	byte	0
37ae7                 | LR__6063
37ae7     45 72 72 6F 
37aeb     72 20       | 	byte	"Error "
37aed     00          | 	byte	0
37aee                 | LR__6064
37aee     20 2D 20    | 	byte	" - "
37af1     00          | 	byte	0
37af2                 | LR__6065
37af2     20 69 6E 20 
37af6     6C 69 6E 65 
37afa     20          | 	byte	" in line "
37afb     00          | 	byte	0
37afc                 | LR__6066
37afc                 | 	byte	
37afc     00          | 	byte	0
37afd                 | LR__6067
37afd     2F 73 64    | 	byte	"/sd"
37b00     00          | 	byte	0
37b01                 | LR__6068
37b01     2F 73 64 2F 
37b05     62 61 73    | 	byte	"/sd/bas"
37b08     00          | 	byte	0
37b09                 | LR__6069
37b09     2F 73 64 2F 
37b0d     62 61 73    | 	byte	"/sd/bas"
37b10     00          | 	byte	0
37b11                 | LR__6070
37b11     20 42 41 53 
37b15     49 43 20 62 
37b19     79 74 65 73 
37b1d     20 66 72 65 
37b21     65          | 	byte	" BASIC bytes free"
37b22     00          | 	byte	0
37b23                 | LR__6071
37b23     52 65 61 64 
37b27     79          | 	byte	"Ready"
37b28     00          | 	byte	0
37b29                 | LR__6072
37b29     6E 6F 6E 61 
37b2d     6D 65 2E 62 
37b31     61 73       | 	byte	"noname.bas"
37b33     00          | 	byte	0
37b34                 | LR__6073
37b34     2F 73 64 2F 
37b38     62 61 73 2F 
37b3c     61 75 74 6F 
37b40     72 75 6E 2E 
37b44     62 61 73    | 	byte	"/sd/bas/autorun.bas"
37b47     00          | 	byte	0
37b48                 | LR__6074
37b48     72 75 6E 20 
37b4c     61 75 74 6F 
37b50     72 75 6E 2E 
37b54     62 61 73    | 	byte	"run autorun.bas"
37b57     00          | 	byte	0
37b58                 | LR__6075
37b58                 | 	byte	
37b58     00          | 	byte	0
37b59     00 00 00    | 	alignl
37b5c                 | _dat_
37b5c     00 00 00 00 
37b60     00 00 00 00 
37b64     00 00 00 00 
37b68     00 00 00 00 | 	byte	$00[16]
37b6c     61 41 17 0E 
37b70     62 42 00 00 
37b74     63 43 19 10 
37b78     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
37b7c     65 45 18 0F 
37b80     66 46 00 00 
37b84     67 47 00 00 
37b88     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
37b8c     69 49 00 00 
37b90     6A 4A 00 00 
37b94     6B 4B 00 00 
37b98     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
37b9c     6D 4D 00 00 
37ba0     6E 4E 1A 11 
37ba4     6F 4F 1E 15 
37ba8     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
37bac     71 51 00 00 
37bb0     72 52 00 00 
37bb4     73 53 1B 12 
37bb8     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
37bbc     75 55 00 00 
37bc0     76 56 00 00 
37bc4     77 57 00 00 
37bc8     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
37bcc     79 59 00 00 
37bd0     7A 5A 1D 14 
37bd4     31 21 04 00 
37bd8     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
37bdc     33 23 06 00 
37be0     34 24 07 00 
37be4     35 25 08 00 
37be8     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
37bec     37 26 0A 00 
37bf0     38 2A 0B 00 
37bf4     39 28 0C 00 
37bf8     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
37bfc     8D 8D 00 00 
37c00     9B 9B 00 00 
37c04     88 88 00 00 
37c08     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
37c0c     20 20 00 00 
37c10     2D 5F 00 00 
37c14     3D 2B 00 00 
37c18     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
37c1c     5D 7D 00 00 
37c20     5C 7C 00 00 
37c24     23 7E 00 00 
37c28     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
37c2c     27 22 00 00 
37c30     60 7E 03 00 
37c34     2C 3C 00 00 
37c38     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
37c3c     2F 3F 00 00 
37c40     B9 B9 00 00 
37c44     BA 00 00 00 
37c48     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
37c4c     BC 00 00 00 
37c50     BD 00 00 00 
37c54     BE 00 00 00 
37c58     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
37c5c     C0 00 00 00 
37c60     C1 00 00 00 
37c64     C2 00 00 00 
37c68     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
37c6c     C4 00 00 00 
37c70     C5 00 00 00 
37c74     C6 00 00 00 
37c78     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
37c7c     C8 00 00 00 
37c80     C9 00 00 00 
37c84     CA 00 00 00 
37c88     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
37c8c     7F 7F 00 00 
37c90     CC 00 00 00 
37c94     CD 00 00 00 
37c98     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
37c9c     CF 00 00 00 
37ca0     D0 00 00 00 
37ca4     D1 00 00 00 
37ca8     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
37cac     2F 2F 00 00 
37cb0     2A 2A 00 00 
37cb4     2D 2D 00 00 
37cb8     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
37cbc     8D 8D 00 00 
37cc0     31 31 00 00 
37cc4     32 32 00 00 
37cc8     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
37ccc     34 34 00 00 
37cd0     35 35 00 00 
37cd4     36 36 00 00 
37cd8     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
37cdc     38 38 00 00 
37ce0     39 39 00 00 
37ce4     30 30 00 00 
37ce8     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
37cec     5C 7C 00 00 
37cf0     00 00 00 00 
37cf4     00 00 00 00 
37cf8     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
37cfc     00 00 00 00 
      ...             
37d54     00 00 00 00 
37d58     00 00 00 00 | 	byte	$00[96]
37d5c     2B 00 A6 F2 
37d60     24 A7 09 80 
37d64     5B 88 4D 89 
37d68     80 88 A5 88 | atari_spl file "atari.spl"
37d6c     6D 88 B8 88 
37d70     80 88 CB 88 
37d74     92 88 A5 88 
37d78     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
37d7c     A5 88 CA 88 
37d80     A6 88 DD 88 
37d84     B8 88 AB 89 
37d88     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
37d8c     C8 AD C6 F1 
37d90     91 06 B6 FF 
37d94     13 00 4A 00 
37d98     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
37d9c     5D 00 5E 00 
37da0     5D 00 5E 00 
37da4     5E 00 5D 00 
37da8     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
37dac     38 00 83 00 
37db0     25 00 83 00 
37db4     C3 FE D1 04 
37db8     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
37dbc     48 88 38 85 
37dc0     41 8A CB 88 
37dc4     28 89 B8 88 
37dc8     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
37dcc     15 89 03 89 
37dd0     02 89 15 89 
37dd4     16 89 15 89 
37dd8     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
37ddc     15 89 3A 89 
37de0     72 89 E3 89 
37de4     52 83 AD 97 
37de8     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
37dec     0C 02 B6 FF 
37df0     E1 00 A8 00 
37df4     F3 00 A8 00 
37df8     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
37dfc     CE 00 CD 00 
37e00     CD 00 BA 00 
37e04     E1 00 BB 00 
37e08     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
37e0c     DF 00 C9 FF 
37e10     E6 01 B6 06 
37e14     EE DD 8D 98 
37e18     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
37e1c     97 89 73 89 
37e20     3B 89 60 89 
37e24     60 89 60 89 
37e28     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
37e2c     73 89 72 89 
37e30     85 89 73 89 
37e34     AA 89 60 89 
37e38     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
37e3c     E8 8A 18 86 
37e40     92 88 A5 C2 
37e44     E0 00 C3 05 
37e48     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
37e4c     F2 00 64 01 
37e50     06 01 3E 01 
37e54     2B 01 2B 01 
37e58     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
37e5c     2B 01 2A 01 
37e60     2B 01 2B 01 
37e64     2B 01 18 01 
37e68     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
37e6c     39 07 61 F3 
37e70     C0 AF 37 85 
37e74     0F 88 8B 8A 
37e78     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
37e7c     AB 89 D0 89 
37e80     AB 89 D0 89 
37e84     D0 89 CF 89 
37e88     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
37e8c     D0 89 F5 89 
37e90     BD 89 08 8A 
37e94     CF 89 E8 8A 
37e98     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
37e9c     53 B3 0D F8 
37ea0     F4 07 38 00 
37ea4     63 01 63 01 
37ea8     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
37eac     88 01 88 01 
37eb0     76 01 88 01 
37eb4     88 01 89 01 
37eb8     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
37ebc     75 01 AE 01 
37ec0     76 01 88 01 
37ec4     4A 00 46 06 
37ec8     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
37ecc     08 8A 9A 86 
37ed0     33 8B 08 8A 
37ed4     2D 8A F5 89 
37ed8     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
37edc     2D 8A 2D 8A 
37ee0     2E 8A 1B 8A 
37ee4     40 8A 2D 8A 
37ee8     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
37eec     2E 8A 79 8A 
37ef0     66 8A C8 8B 
37ef4     72 82 2B 97 
37ef8     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
37efc     1D 02 05 01 
37f00     F8 01 C0 01 
37f04     0B 02 C0 01 
37f08     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
37f0c     F9 01 D3 01 
37f10     F8 01 D3 01 
37f14     F8 01 D2 01 
37f18     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
37f1c     E6 01 2B 01 
37f20     8E 02 5F 07 
37f24     F7 E2 ED 9C 
37f28     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
37f2c     E8 8A 78 8A 
37f30     78 8A 65 8A 
37f34     8B 8A 78 8A 
37f38     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
37f3c     8B 8A 9D 8A 
37f40     9D 8A 8B 8A 
37f44     C2 8A 78 8A 
37f48     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
37f4c     70 8C 18 86 
37f50     8B 8A 23 C9 
37f54     CB 03 C4 05 
37f58     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
37f5c     0B 02 7B 02 
37f60     1E 02 55 02 
37f64     30 02 43 02 
37f68     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
37f6c     43 02 44 02 
37f70     43 02 30 02 
37f74     68 02 31 02 
37f78     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
37f7c     07 08 3F F7 
37f80     73 B2 13 85 
37f84     15 89 ED 8B 
37f88     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
37f8c     B0 8A FB 8A 
37f90     D5 8A FA 8A 
37f94     E8 8A FB 8A 
37f98     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
37f9c     E8 8A 21 8B 
37fa0     E7 8A 33 8B 
37fa4     E8 8A 26 8C 
37fa8     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
37fac     8D B0 27 F6 
37fb0     9C 08 AD 01 
37fb4     7B 02 8D 02 
37fb8     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
37fbc     A1 02 A0 02 
37fc0     A1 02 A0 02 
37fc4     A0 02 A0 02 
37fc8     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
37fcc     7B 02 D8 02 
37fd0     7B 02 C6 02 
37fd4     3E 01 C3 05 
37fd8     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
37fdc     00 8C 2A 86 
37fe0     E0 8C FA 8A 
37fe4     6A 8B FB 8A 
37fe8     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
37fec     45 8B 45 8B 
37ff0     45 8B 6B 8B 
37ff4     46 8B 59 8B 
37ff8     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
37ffc     6B 8B 6B 8B 
38000     6B 8B 6B 8B 
38004     7D 8B 7D 8B 
38008     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
3800c     90 8B 91 8B 
38010     90 8B 90 8B 
38014     A3 8B A3 8B 
38018     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
3801c     B5 8B B6 8B 
38020     B5 8B B5 8B 
38024     B6 8B C8 8B 
38028     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
3802c     C8 8B DA 8B 
38030     DB 8B DB 8B 
38034     DB 8B DC 8B 
38038     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
3803c     EE 8B EE 8B 
38040     00 8C 01 8C 
38044     00 8C 01 8C 
38048     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
3804c     12 8C 13 8C 
38050     13 8C 26 8C 
38054     26 8C 26 8C 
38058     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
3805c     38 8C 38 8C 
38060     38 8C 38 8C 
38064     4B 8C 4B 8C 
38068     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
3806c     5E 8C 5E 8C 
38070     5E 8C 5E 8C 
38074     70 8C 70 8C 
38078     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
3807c     70 8C 83 8C 
38080     83 8C 83 8C 
38084     83 8C 96 8C 
38088     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
3808c     95 8C A9 8C 
38090     A9 8C A8 8C 
38094     A8 8C A8 8C 
38098     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
3809c     BB 8C BB 8C 
380a0     BB 8C CE 8C 
380a4     CE 8C CE 8C 
380a8     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
380ac     E0 8C E1 8C 
380b0     E1 8C E0 8C 
380b4     F4 8C F2 8C 
380b8     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
380bc     05 8D 05 8D 
380c0     06 8D 06 8D 
380c4     19 8D 19 8D 
380c8     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
380cc     18 8D 2B 8D 
380d0     2B 8D 2B 8D 
380d4     2A 8D 3E 8D 
380d8     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
380dc     3E 8D 51 8D 
380e0     50 8D 50 8D 
380e4     50 8D 51 8D 
380e8     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
380ec     63 8D 64 8D 
380f0     76 8D 75 8D 
380f4     75 8D 76 8D 
380f8     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
380fc     88 8D 88 8D 
38100     89 8D 9B 8D 
38104     9A 8D 9B 8D 
38108     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
3810c     AD 8D AE 8D 
38110     AD 8D AE 8D 
38114     C1 8D C1 8D 
38118     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
3811c     D3 8D D3 8D 
38120     D3 8D D3 8D 
38124     D3 8D E6 8D 
38128     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
3812c     E6 8D E6 8D 
38130     F9 8D F9 8D 
38134     F9 8D F8 8D 
38138     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
3813c     0B 8E 0B 8E 
38140     1D 8E 1D 8E 
38144     1E 8E 1E 8E 
38148     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
3814c     31 8E 31 8E 
38150     31 8E 42 8E 
38154     43 8E 43 8E 
38158     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
3815c     56 8E 56 8E 
38160     55 8E 56 8E 
38164     68 8E 69 8E 
38168     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
3816c     69 8E 7B 8E 
38170     7C 8E 7B 8E 
38174     7B 8E 8D 8E 
38178     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
3817c     8D 8E A1 8E 
38180     A0 8E A1 8E 
38184     A1 8E A0 8E 
38188     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
3818c     B3 8E B3 8E 
38190     C6 8E C5 8E 
38194     C6 8E C6 8E 
38198     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
3819c     D8 8E D9 8E 
381a0     D8 8E EC 8E 
381a4     EB 8E EC 8E 
381a8     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
381ac     FE 8E FE 8E 
381b0     FE 8E FE 8E 
381b4     10 8F 10 8F 
381b8     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
381bc     11 8F 23 8F 
381c0     24 8F 23 8F 
381c4     24 8F 37 8F 
381c8     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
381cc     36 8F 36 8F 
381d0     48 8F 49 8F 
381d4     49 8F 49 8F 
381d8     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
381dc     5B 8F 5C 8F 
381e0     5B 8F 6E 8F 
381e4     6E 8F 6E 8F 
381e8     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
381ec     81 8F 81 8F 
381f0     81 8F 81 8F 
381f4     93 8F 93 8F 
381f8     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
381fc     93 8F A6 8F 
38200     A6 8F A6 8F 
38204     A6 8F B9 8F 
38208     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
3820c     B9 8F B9 8F 
38210     CC 8F CB 8F 
38214     CB 8F CC 8F 
38218     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
3821c     DF 8F DE 8F 
38220     DE 8F F1 8F 
38224     F1 8F F1 8F 
38228     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
3822c     03 90 04 90 
38230     04 90 04 90 
38234     16 90 17 90 
38238     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
3823c     29 90 28 90 
38240     29 90 28 90 
38244     29 90 3C 90 
38248     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
3824c     3C 90 4F 90 
38250     4E 90 4E 90 
38254     4E 90 4E 90 
38258     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
3825c     61 90 61 90 
38260     73 90 74 90 
38264     74 90 74 90 
38268     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
3826c     87 90 86 90 
38270     87 90 86 90 
38274     99 90 99 90 
38278     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
3827c     AB 90 AB 90 
38280     AC 90 AB 90 
38284     AB 90 BF 90 
38288     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
3828c     BE 90 D1 90 
38290     D0 90 D1 90 
38294     D1 90 D1 90 
38298     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
3829c     E3 90 E4 90 
382a0     F6 90 F6 90 
382a4     F6 90 F6 90 
382a8     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
382ac     09 91 0A 91 
382b0     0A 91 1C 91 
382b4     1C 91 1C 91 
382b8     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
382bc     2F 91 2E 91 
382c0     2F 91 2F 91 
382c4     2E 91 41 91 
382c8     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
382cc     41 91 53 91 
382d0     54 91 54 91 
382d4     53 91 54 91 
382d8     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
382dc     67 91 67 91 
382e0     79 91 7A 91 
382e4     79 91 78 91 
382e8     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
382ec     8C 91 8B 91 
382f0     8C 91 8C 91 
382f4     9E 91 9E 91 
382f8     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
382fc     B1 91 B1 91 
38300     B2 91 B1 91 
38304     B1 91 C4 91 
38308     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
3830c     C4 91 D6 91 
38310     D7 91 D7 91 
38314     D7 91 D6 91 
38318     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
3831c     EA 91 EA 91 
38320     EA 91 FC 91 
38324     FC 91 FB 91 
38328     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
3832c     0E 92 0F 92 
38330     0F 92 0E 92 
38334     21 92 21 92 
38338     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
3833c     21 92 34 92 
38340     33 92 34 92 
38344     34 92 47 92 
38348     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
3834c     46 92 47 92 
38350     59 92 59 92 
38354     59 92 59 92 
38358     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
3835c     6C 92 6C 92 
38360     6B 92 7E 92 
38364     7E 92 7E 92 
38368     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
3836c     92 92 91 92 
38370     91 92 90 92 
38374     91 92 A4 92 
38378     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
3837c     A3 92 B6 92 
38380     B6 92 B7 92 
38384     B7 92 B6 92 
38388     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
3838c     CA 92 C9 92 
38390     CA 92 DC 92 
38394     DC 92 DC 92 
38398     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
3839c     EF 92 EF 92 
383a0     EF 92 EF 92 
383a4     01 93 01 93 
383a8     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
383ac     15 93 14 93 
383b0     14 93 14 93 
383b4     14 93 27 93 
383b8     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
383bc     27 93 39 93 
383c0     3A 93 39 93 
383c4     39 93 39 93 
383c8     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
383cc     4B 93 4C 93 
383d0     5F 93 5F 93 
383d4     5F 93 5E 93 
383d8     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
383dc     5F 93 84 93 
383e0     4C 93 96 93 
383e4     5F 93 AE 94 
383e8     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
383ec     7B C1 00 00 
383f0     00 00 00 00 
383f4     00 00 00 00 
383f8     00 00 00 00 | 	byte	$7b, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
383fc     00 00 00 00 | 	byte	$00, $00, $00, $00
38400     7A D7 00 80 
38404     87 8A 48 8F 
38408     EC 8C 76 8D 
3840c     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
38410     3C 8D 82 8D 
38414     42 8D 88 8D 
38418     8C 8D 8E 8D 
3841c     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
38420     97 8D DE 8D 
38424     E1 8D F1 8E 
38428     D8 8C A3 83 
3842c     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
38430     65 71 C9 65 
38434     FC 64 C4 65 
38438     C1 65 BF 65 
3843c     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
38440     B6 65 B4 65 
38444     B2 65 AE 65 
38448     AC 65 ED 65 
3844c     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
38450     5E 65 25 66 
38454     FA 62 23 6B 
38458     B5 6C 61 0A 
3845c     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
38460     5D 90 BE 8D 
38464     47 8E C3 8D 
38468     09 8E C9 8D 
3846c     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
38470     15 8E 19 8E 
38474     1B 8E 62 8E 
38478     64 8E 68 8E 
3847c     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
38480     B5 8E 4C 90 
38484     FA 84 3C 9D 
38488     98 13 79 6D 
3848c     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
38490     D9 66 50 66 
38494     D4 66 4B 66 
38498     8C 66 46 66 
3849c     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
384a0     81 66 3A 66 
384a4     7C 66 36 66 
384a8     76 66 30 66 
384ac     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
384b0     6B 66 88 72 
384b4     BF 37 E7 B7 
384b8     75 83 8B 8E 
384bc     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
384c0     94 8E 96 8E 
384c4     DD 8E 9C 8E 
384c8     E2 8E A2 8E 
384cc     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
384d0     EE 8E AE 8E 
384d4     38 8F B5 8E 
384d8     3F 8F FD 8E 
384dc     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
384e0     A5 87 1E E3 
384e4     6D 5D FA 71 
384e8     41 64 25 67 
384ec     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
384f0     D9 66 1A 67 
384f4     18 67 15 67 
384f8     12 67 0F 67 
384fc     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
38500     07 67 C0 66 
38504     01 67 BC 66 
38508     B8 66 DE 64 
3850c     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
38510     43 E5 1F 8B 
38514     14 8A F1 90 
38518     1C 8F 63 8F 
3851c     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
38520     29 8F 6E 8F 
38524     72 8F 75 8F 
38528     34 8F BE 8F 
3852c     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
38530     84 8F 87 8F 
38534     CC 8F 56 90 
38538     67 91 49 80 
3853c     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
38540     46 77 A6 66 
38544     E8 66 B0 67 
38548     AD 67 ED 67 
3854c     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
38550     A2 67 E3 67 
38554     9D 67 9A 67 
38558     98 67 94 67 
3855c     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
38560     49 67 CD 67 
38564     28 65 5F 6E 
38568     82 67 3A 01 
3856c     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
38570     C2 91 A9 8F 
38574     EF 8F AE 8F 
38578     F4 8F B5 8F 
3857c     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
38580     01 90 03 90 
38584     07 90 09 90 
38588     0C 90 53 90 
3858c     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
38590     18 90 44 93 
38594     85 84 D6 9D 
38598     87 1F 2F 75 
3859c     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
385a0     C4 68 F6 67 
385a4     BE 68 F1 67 
385a8     76 68 2E 68 
385ac     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
385b0     27 68 24 68 
385b4     64 68 1E 68 
385b8     5F 68 19 68 
385bc     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
385c0     DC 68 56 72 
385c4     7E 36 C2 B8 
385c8     D7 84 73 90 
385cc     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
385d0     7B 90 7F 90 
385d4     82 90 84 90 
385d8     CB 90 8B 90 
385dc     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
385e0     D7 90 96 90 
385e4     20 91 59 90 
385e8     25 91 A2 90 
385ec     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
385f0     D0 89 40 EE 
385f4     12 64 C4 71 
385f8     29 66 0C 69 
385fc     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
38600     C0 68 02 69 
38604     FE 68 FB 68 
38608     F9 68 F6 68 
3860c     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
38610     EE 68 A8 68 
38614     2C 69 5F 68 
38618     E2 68 81 66 
3861c     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
38620     1E EB A6 8A 
38624     73 8B 5E 93 
38628     7B 90 48 91 
3862c     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
38630     0D 91 11 91 
38634     14 91 16 91 
38638     5C 91 1C 91 
3863c     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
38640     68 91 AF 91 
38644     2A 91 B5 91 
38648     75 91 1A 94 
3864c     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
38650     70 0E CB 6C 
38654     5D 6E C4 67 
38658     99 69 54 69 
3865c     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
38660     D2 69 49 69 
38664     89 69 86 69 
38668     40 69 C4 69 
3866c     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
38670     35 69 76 69 
38674     58 67 EB 6D 
38678     E9 6D 89 0F 
3867c     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
38680     33 94 94 91 
38684     D9 91 56 91 
38688     E0 91 9F 91 
3868c     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
38690     EC 91 EE 91 
38694     F1 91 F4 91 
38698     F7 91 3D 92 
3869c     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
386a0     46 92 21 94 
386a4     11 89 A4 9D 
386a8     FD 0E 8F 6C 
386ac     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
386b0     28 6A E1 69 
386b4     65 6A 1F 6A 
386b8     5F 6A 1A 6A 
386bc     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
386c0     54 6A 0F 6A 
386c4     4F 6A 09 6A 
386c8     06 6A 03 6A 
386cc     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
386d0     23 68 69 77 
386d4     3A 4D 38 CA 
386d8     38 86 4E 91 
386dc     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
386e0     64 92 24 92 
386e4     6A 92 2A 92 
386e8     70 92 30 92 
386ec     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
386f0     7B 92 7E 92 
386f4     C5 92 84 92 
386f8     CB 92 8A 92 
386fc     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
38700     4D 8D F9 E2 
38704     97 59 FE 74 
38708     DB 68 6D 6A 
3870c     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
38710     A8 6A A5 6A 
38714     A3 6A 9F 6A 
38718     9D 6A 9B 6A 
3871c     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
38720     D6 6A 8F 6A 
38724     CF 6A 46 6A 
38728     CA 6A E1 67 
3872c     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
38730     D3 F7 15 92 
38734     90 8C BF 94 
38738     A6 92 EB 92 
3873c     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
38740     B1 92 F7 92 
38744     FA 92 FD 92 
38748     00 93 02 93 
3874c     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
38750     4F 93 52 93 
38754     54 93 22 94 
38758     5A 93 8F 88 
3875c     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
38760     1C 77 07 6C 
38764     E8 69 7A 6B 
38768     34 6B 75 6B 
3876c     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
38770     29 6B 26 6B 
38774     24 6B 21 6B 
38778     1D 6B 5E 6B 
3877c     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
38780     12 6B 52 6B 
38784     34 69 34 6E 
38788     BA 73 A4 24 
3878c     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
38790     7A 94 B3 93 
38794     72 93 31 93 
38798     78 93 7A 93 
3879c     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
387a0     83 93 86 93 
387a4     89 93 D0 93 
387a8     D2 93 D5 93 
387ac     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
387b0     DD 93 40 96 
387b4     30 8B 99 9C 
387b8     52 10 94 71 
387bc     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
387c0     46 6C 79 6B 
387c4     40 6C B7 6B 
387c8     F7 6B B1 6B 
387cc     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
387d0     EC 6B A5 6B 
387d4     A2 6B 9F 6B 
387d8     9D 6B 9A 6B 
387dc     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
387e0     C8 6A E4 76 
387e4     20 4B F9 CE 
387e8     2E 8A 1A 92 
387ec     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
387f0     FB 93 BA 93 
387f4     01 94 03 94 
387f8     4A 94 09 94 
387fc     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
38800     55 94 14 94 
38804     9E 94 1A 94 
38808     61 94 20 94 
3880c     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
38810     3E 87 E5 CD 
38814     5F 50 6C 78 
38818     B5 6A 04 6C 
3881c     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
38820     83 6C 7F 6C 
38824     7C 6C 36 6C 
38828     76 6C 74 6C 
3882c     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
38830     6B 6C 25 6C 
38834     66 6C 1F 6C 
38838     1D 6C 41 6A 
3883c     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
38840     BA FA FC 94 
38844     5B 8D 97 96 
38848     3B 94 C5 94 
3884c     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
38850     89 94 8C 94 
38854     8F 94 92 94 
38858     94 94 DB 94 
3885c     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
38860     E4 94 E7 94 
38864     2D 95 74 95 
38868     C8 96 15 89 
3886c     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
38870     CB 75 31 6F 
38874     7E 6B 10 6D 
38878     C9 6C 0A 6D 
3887c     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
38880     BD 6C FF 6C 
38884     FB 6C F9 6C 
38888     B2 6C F3 6C 
3888c     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
38890     A7 6C E8 6C 
38894     0D 6B 85 6F 
38898     C7 74 10 28 
3889c     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
388a0     96 96 47 95 
388a4     06 95 0A 95 
388a8     0C 95 0F 95 
388ac     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
388b0     17 95 5E 95 
388b4     61 95 63 95 
388b8     22 95 AC 95 
388bc     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
388c0     72 95 17 98 
388c4     59 8E 01 96 
388c8     CF FC 5A 68 
388cc     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
388d0     96 6D 50 6D 
388d4     D5 6D 4A 6D 
388d8     8C 6D 89 6D 
388dc     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
388e0     80 6D 3A 6D 
388e4     7A 6D 77 6D 
388e8     75 6D 71 6D 
388ec     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
388f0     18 6C BC 78 
388f4     9A 4F 7E CF 
388f8     1F 89 F1 93 
388fc     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
38900     D2 95 4E 95 
38904     D7 95 53 95 
38908     DD 95 E0 95 
3890c     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
38910     A5 95 EB 95 
38914     EE 95 F0 95 
38918     37 96 B3 95 
3891c     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
38920     1A 98 D5 8D 
38924     C5 9F CD 0F 
38928     0F 71 F3 73 
3892c     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
38930     D9 6D 5E 6E 
38934     D3 6D 58 6E 
38938     12 6E 0F 6E 
3893c     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
38940     49 6E BF 6D 
38944     87 6E 76 6D 
38948     81 6E 11 6B 
3894c     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
38950     3F 09 44 95 
38954     E5 8D 3F 99 
38958     D4 95 A2 96 
3895c     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
38960     23 96 69 96 
38964     6B 96 6E 96 
38968     71 96 74 96 
3896c     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
38970     BF 96 3C 96 
38974     C6 96 C8 96 
38978     A3 98 51 8D 
3897c     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
38980     CF 75 29 73 
38984     90 6C EC 6E 
38988     62 6E E7 6E 
3898c     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
38990     9A 6E 98 6E 
38994     95 6E 91 6E 
38998     8E 6E CF 6E 
3899c     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
389a0     40 6E C3 6E 
389a4     E8 6C 45 6F 
389a8     A5 7B C9 35 
389ac     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
389b0     2D 98 23 97 
389b4     E1 96 A0 96 
389b8     A4 96 EA 96 
389bc     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
389c0     AF 96 F4 96 
389c4     F8 96 3E 97 
389c8     FD 96 43 97 
389cc     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
389d0     08 97 6B 99 
389d4     D6 92 88 91 
389d8     D8 EE 84 66 
389dc     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
389e0     2E 6F E7 6E 
389e4     6C 6F 24 6F 
389e8     21 6F 1F 6F 
389ec     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
389f0     17 6F 13 6F 
389f4     54 6F 0E 6F 
389f8     0B 6F 4B 6F 
389fc     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
38a00     27 6D 1C 7B 
38a04     19 59 9F DB 
38a08     66 8E BC 94 
38a0c     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
38a10     67 97 26 97 
38a14     6D 97 2B 97 
38a18     72 97 32 97 
38a1c     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
38a20     C1 97 7F 97 
38a24     C6 97 85 97 
38a28     CB 97 CE 97 
38a2c     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
38a30     EC 8A C4 C6 
38a34     68 4C F4 7D 
38a38     63 6E E8 6E 
38a3c     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
38a40     ED 6F A7 6F 
38a44     E7 6F A0 6F 
38a48     E1 6F 9B 6F 
38a4c     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
38a50     D5 6F 8F 6F 
38a54     CE 6F 45 6F 
38a58     86 6F 68 6D 
38a5c     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
38a60     C0 13 AD A2 
38a64     A7 8E 79 99 
38a68     E6 97 E8 97 
38a6c     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
38a70     F1 97 F3 97 
38a74     F6 97 F9 97 
38a78     FB 97 FE 97 
38a7c     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
38a80     4A 98 0A 98 
38a84     93 98 0F 98 
38a88     7F 9B BF 8C 
38a8c     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
38a90     91 7B 62 73 
38a94     1A 6E B9 70 
38a98     EB 6F B3 70 
38a9c     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
38aa0     25 70 20 70 
38aa4     1E 70 1B 70 
38aa8     18 70 15 70 
38aac     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
38ab0     0D 70 09 70 
38ab4     07 70 03 70 
38ab8     01 70 FD 6F 
38abc     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
38ac0     F6 6F F2 6F 
38ac4     EF 6F EC 6F 
38ac8     2C 70 E6 6F 
38acc     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
38ad0     DD 6F 97 6F 
38ad4     D7 6F 84 6E 
38ad8     8F 6F 3F 7D 
38adc     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
38ade     FF FF FF FF 
38ae2     FF FF       | atarist_spl file "atarist.spl" '512
38ae4     00 00 00 00 
38ae8     00 00 00 00 
38aec     00 00       | 	byte	$00[10]
38aee     17 7F F2 7F 
38af2     B2 7F 72 7F 
38af6     33 7F F4 7E 
38afa     B4 7E 75 7E | 	byte	$17, $7f, $f2, $7f, $b2, $7f, $72, $7f, $33, $7f, $f4, $7e, $b4, $7e, $75, $7e
38afe     36 7E F5 7D 
38b02     E9 51 F2 0D 
38b06     8E 00 F3 FD 
38b0a     72 FD 5A FD | 	byte	$36, $7e, $f5, $7d, $e9, $51, $f2, $0d, $8e, $00, $f3, $fd, $72, $fd, $5a, $fd
38b0e     57 FD 58 FD 
38b12     5B FD 5C FD 
38b16     5C FD 60 7D 
38b1a     52 7D 14 7D | 	byte	$57, $fd, $58, $fd, $5b, $fd, $5c, $fd, $5c, $fd, $60, $7d, $52, $7d, $14, $7d
38b1e     D6 7C 98 7C 
38b22     59 7C 1A 7C 
38b26     DC 7B 9E 7B 
38b2a     61 7B 72 34 | 	byte	$d6, $7c, $98, $7c, $59, $7c, $1a, $7c, $dc, $7b, $9e, $7b, $61, $7b, $72, $34
38b2e     F3 05 00 FD 
38b32     41 FB EA FA 
38b36     D9 FA DB FA 
38b3a     DE FA E1 FA | 	byte	$f3, $05, $00, $fd, $41, $fb, $ea, $fa, $d9, $fa, $db, $fa, $de, $fa, $e1, $fa
38b3e     E4 FA 9B 36 
38b42     F8 7A C0 7A 
38b46     84 7A 45 7A 
38b4a     08 7A CD 79 | 	byte	$e4, $fa, $9b, $36, $f8, $7a, $c0, $7a, $84, $7a, $45, $7a, $08, $7a, $cd, $79
38b4e     8E 79 51 79 
38b52     15 79 D7 78 
38b56     3C 1F EB FF 
38b5a     CF F9 A5 F8 | 	byte	$8e, $79, $51, $79, $15, $79, $d7, $78, $3c, $1f, $eb, $ff, $cf, $f9, $a5, $f8
38b5e     6D F8 65 F8 
38b62     68 F8 6D F8 
38b66     70 F8 74 F8 
38b6a     84 57 DB 60 | 	byte	$6d, $f8, $65, $f8, $68, $f8, $6d, $f8, $70, $f8, $74, $f8, $84, $57, $db, $60
38b6e     AB 60 79 60 
38b72     4B 60 1A 60 
38b76     E9 5F B9 5F 
38b7a     89 5F 5A 5F | 	byte	$ab, $60, $79, $60, $4b, $60, $1a, $60, $e9, $5f, $b9, $5f, $89, $5f, $5a, $5f
38b7e     FB 59 B2 0B 
38b82     92 FA 3A F7 
38b86     96 F6 79 F6 
38b8a     79 F6 7C F6 | 	byte	$fb, $59, $b2, $0b, $92, $fa, $3a, $f7, $96, $f6, $79, $f6, $79, $f6, $7c, $f6
38b8e     82 F6 86 F6 
38b92     8C F6 DB 5D 
38b96     F1 5E C1 5E 
38b9a     92 5E 63 5E | 	byte	$82, $f6, $86, $f6, $8c, $f6, $db, $5d, $f1, $5e, $c1, $5e, $92, $5e, $63, $5e
38b9e     34 5E 04 5E 
38ba2     D6 5D A6 5D 
38ba6     78 5D D4 3E 
38baa     11 03 63 F7 | 	byte	$34, $5e, $04, $5e, $d6, $5d, $a6, $5d, $78, $5d, $d4, $3e, $11, $03, $63, $f7
38bae     27 F5 BA F4 
38bb2     AB F4 AD F4 
38bb6     B2 F4 B8 F4 
38bba     BE F4 C3 F4 | 	byte	$27, $f5, $ba, $f4, $ab, $f4, $ad, $f4, $b2, $f4, $b8, $f4, $be, $f4, $c3, $f4
38bbe     26 5D 2B 5D 
38bc2     FC 5C CD 5C 
38bc6     9F 5C 70 5C 
38bca     42 5C 15 5C | 	byte	$26, $5d, $2b, $5d, $fc, $5c, $cd, $5c, $9f, $5c, $70, $5c, $42, $5c, $15, $5c
38bce     E5 5B B8 5B 
38bd2     DB 24 A7 FC 
38bd6     D1 F4 4D F3 
38bda     05 F3 FD F2 | 	byte	$e5, $5b, $b8, $5b, $db, $24, $a7, $fc, $d1, $f4, $4d, $f3, $05, $f3, $fd, $f2
38bde     04 F3 0B F3 
38be2     11 F3 16 F3 
38be6     DE 18 98 5B 
38bea     73 5B 99 54 | 	byte	$04, $f3, $0b, $f3, $11, $f3, $16, $f3, $de, $18, $98, $5b, $73, $5b, $99, $54
38bee     4E 4A 29 48 
38bf2     A0 47 6A 47 
38bf6     43 47 20 47 
38bfa     FD 46 35 0D | 	byte	$4e, $4a, $29, $48, $a0, $47, $6a, $47, $43, $47, $20, $47, $fd, $46, $35, $0d
38bfe     E2 F6 98 F2 
38c02     C5 F1 A3 F1 
38c06     A3 F1 A8 F1 
38c0a     B0 F1 B8 F1 | 	byte	$e2, $f6, $98, $f2, $c5, $f1, $a3, $f1, $a3, $f1, $a8, $f1, $b0, $f1, $b8, $f1
38c0e     BF F1 00 3D 
38c12     EF 46 CD 46 
38c16     AA 46 86 46 
38c1a     63 46 3F 46 | 	byte	$bf, $f1, $00, $3d, $ef, $46, $cd, $46, $aa, $46, $86, $46, $63, $46, $3f, $46
38c1e     1C 46 F9 45 
38c22     D7 45 EE 43 
38c26     DE 02 E8 F3 
38c2a     01 F1 76 F0 | 	byte	$1c, $46, $f9, $45, $d7, $45, $ee, $43, $de, $02, $e8, $f3, $01, $f1, $76, $f0
38c2e     61 F0 65 F0 
38c32     6D F0 74 F0 
38c36     7C F0 84 F0 
38c3a     39 44 B1 45 | 	byte	$61, $f0, $65, $f0, $6d, $f0, $74, $f0, $7c, $f0, $84, $f0, $39, $44, $b1, $45
38c3e     8E 45 6D 45 
38c42     49 45 27 45 
38c46     05 45 E1 44 
38c4a     BF 44 9D 44 | 	byte	$8e, $45, $6d, $45, $49, $45, $27, $45, $05, $45, $e1, $44, $bf, $44, $9d, $44
38c4e     F1 2F A9 FB 
38c52     8B F1 9B EF 
38c56     40 EF 36 EF 
38c5a     3D EF 46 EF | 	byte	$f1, $2f, $a9, $fb, $8b, $f1, $9b, $ef, $40, $ef, $36, $ef, $3d, $ef, $46, $ef
38c5e     4D EF 56 EF 
38c62     5E EF 7B 44 
38c66     8C 44 69 44 
38c6a     47 44 26 44 | 	byte	$4d, $ef, $56, $ef, $5e, $ef, $7b, $44, $8c, $44, $69, $44, $47, $44, $26, $44
38c6e     03 44 E1 43 
38c72     C0 43 F5 37 
38c76     69 33 0F 11 
38c7a     F0 F4 70 EF | 	byte	$03, $44, $e1, $43, $c0, $43, $f5, $37, $69, $33, $0f, $11, $f0, $f4, $70, $ef
38c7e     66 EE 37 EE 
38c82     38 EE 40 EE 
38c86     48 EE 51 EE 
38c8a     5B EE 18 01 | 	byte	$66, $ee, $37, $ee, $38, $ee, $40, $ee, $48, $ee, $51, $ee, $5b, $ee, $18, $01
38c8e     7D 32 6A 32 
38c92     51 32 37 32 
38c96     1F 32 05 32 
38c9a     EB 31 D2 31 | 	byte	$7d, $32, $6a, $32, $51, $32, $37, $32, $1f, $32, $05, $32, $eb, $31, $d2, $31
38c9e     B9 31 A1 31 
38ca2     F1 04 F4 F1 
38ca6     50 EE A0 ED 
38caa     85 ED 88 ED | 	byte	$b9, $31, $a1, $31, $f1, $04, $f4, $f1, $50, $ee, $a0, $ed, $85, $ed, $88, $ed
38cae     93 ED 9A ED 
38cb2     A4 ED AD ED 
38cb6     F4 27 C1 31 
38cba     A9 31 90 31 | 	byte	$93, $ed, $9a, $ed, $a4, $ed, $ad, $ed, $f4, $27, $c1, $31, $a9, $31, $90, $31
38cbe     78 31 5F 31 
38cc2     46 31 2E 31 
38cc6     15 31 FC 30 
38cca     E4 30 9B FC | 	byte	$78, $31, $5f, $31, $46, $31, $2e, $31, $15, $31, $fc, $30, $e4, $30, $9b, $fc
38cce     C4 EF 4A ED 
38cd2     DC EC CB EC 
38cd6     D2 EC DA EC 
38cda     E6 EC EF EC | 	byte	$c4, $ef, $4a, $ed, $dc, $ec, $cb, $ec, $d2, $ec, $da, $ec, $e6, $ec, $ef, $ec
38cde     F9 EC 64 2F 
38ce2     0A 31 F1 30 
38ce6     D9 30 C0 30 
38cea     A7 30 91 30 | 	byte	$f9, $ec, $64, $2f, $0a, $31, $f1, $30, $d9, $30, $c0, $30, $a7, $30, $91, $30
38cee     78 30 5F 30 
38cf2     46 30 38 23 
38cf6     A6 F6 19 EE 
38cfa     70 EC 25 EC | 	byte	$78, $30, $5f, $30, $46, $30, $38, $23, $a6, $f6, $19, $ee, $70, $ec, $25, $ec
38cfe     20 EC 28 EC 
38d02     32 EC 3C EC 
38d06     47 EC 51 EC 
38d0a     93 22 B5 22 | 	byte	$20, $ec, $28, $ec, $32, $ec, $3c, $ec, $47, $ec, $51, $ec, $93, $22, $b5, $22
38d0e     A3 22 93 22 
38d12     7F 22 6E 22 
38d16     5D 22 4C 22 
38d1a     3C 22 2B 22 | 	byte	$a3, $22, $93, $22, $7f, $22, $6e, $22, $5d, $22, $4c, $22, $3c, $22, $2b, $22
38d1e     77 09 76 F1 
38d22     CC EC F0 EB 
38d26     CD EB CE EB 
38d2a     D7 EB E3 EB | 	byte	$77, $09, $76, $f1, $cc, $ec, $f0, $eb, $cd, $eb, $ce, $eb, $d7, $eb, $e3, $eb
38d2e     ED EB F5 EB 
38d32     3E F6 6B 22 
38d36     5F 22 4E 22 
38d3a     3D 22 2C 22 | 	byte	$ed, $eb, $f5, $eb, $3e, $f6, $6b, $22, $5f, $22, $4e, $22, $3d, $22, $2c, $22
38d3e     1B 22 0B 22 
38d42     FA 21 E9 21 
38d46     D8 21 4D FF 
38d4a     44 EF 25 EC | 	byte	$1b, $22, $0b, $22, $fa, $21, $e9, $21, $d8, $21, $4d, $ff, $44, $ef, $25, $ec
38d4e     92 EB 7B EB 
38d52     82 EB 8C EB 
38d56     97 EB A1 EB 
38d5a     AB EB 2E 16 | 	byte	$92, $eb, $7b, $eb, $82, $eb, $8c, $eb, $97, $eb, $a1, $eb, $ab, $eb, $2e, $16
38d5e     15 22 04 22 
38d62     F3 21 E3 21 
38d66     D2 21 C0 21 
38d6a     AF 21 9E 21 | 	byte	$15, $22, $04, $22, $f3, $21, $e3, $21, $d2, $21, $c0, $21, $af, $21, $9e, $21
38d6e     8E 21 7D 21 
38d72     9A F8 A4 ED 
38d76     8E EB 2F EB 
38d7a     24 EB 2D EB | 	byte	$8e, $21, $7d, $21, $9a, $f8, $a4, $ed, $8e, $eb, $2f, $eb, $24, $eb, $2d, $eb
38d7e     37 EB 42 EB 
38d82     4C EB 57 EB 
38d86     B2 17 22 19 
38d8a     15 19 0A 19 | 	byte	$37, $eb, $42, $eb, $4c, $eb, $57, $eb, $b2, $17, $22, $19, $15, $19, $0a, $19
38d8e     FD 18 EF 18 
38d92     E3 18 D6 18 
38d96     CA 18 BD 18 
38d9a     49 12 92 F2 | 	byte	$fd, $18, $ef, $18, $e3, $18, $d6, $18, $ca, $18, $bd, $18, $49, $12, $92, $f2
38d9e     60 EC 35 EB 
38da2     01 EB 01 EB 
38da6     0C EB 16 EB 
38daa     20 EB 2B EB | 	byte	$60, $ec, $35, $eb, $01, $eb, $01, $eb, $0c, $eb, $16, $eb, $20, $eb, $2b, $eb
38dae     34 EB D0 18 
38db2     00 19 F4 18 
38db6     E8 18 DA 18 
38dba     CF 18 C2 18 | 	byte	$34, $eb, $d0, $18, $00, $19, $f4, $18, $e8, $18, $da, $18, $cf, $18, $c2, $18
38dbe     B6 18 A9 18 
38dc2     9D 18 91 05 
38dc6     F0 EF CA EB 
38dca     02 EB E6 EA | 	byte	$b6, $18, $a9, $18, $9d, $18, $91, $05, $f0, $ef, $ca, $eb, $02, $eb, $e6, $ea
38dce     E8 EA F2 EA 
38dd2     FE EA 07 EB 
38dd6     12 EB C2 EF 
38dda     E9 18 E6 18 | 	byte	$e8, $ea, $f2, $ea, $fe, $ea, $07, $eb, $12, $eb, $c2, $ef, $e9, $18, $e6, $18
38dde     D9 18 CD 18 
38de2     C0 18 B3 18 
38de6     A7 18 9B 18 
38dea     8E 18 83 18 | 	byte	$d9, $18, $cd, $18, $c0, $18, $b3, $18, $a7, $18, $9b, $18, $8e, $18, $83, $18
38dee     B8 FC 30 EE 
38df2     61 EB DC EA 
38df6     CD EA D2 EA 
38dfa     DE EA E7 EA | 	byte	$b8, $fc, $30, $ee, $61, $eb, $dc, $ea, $cd, $ea, $d2, $ea, $de, $ea, $e7, $ea
38dfe     F3 EA FE EA 
38e02     D2 09 D1 18 
38e06     C3 18 17 18 
38e0a     C7 12 A5 11 | 	byte	$f3, $ea, $fe, $ea, $d2, $09, $d1, $18, $c3, $18, $17, $18, $c7, $12, $a5, $11
38e0e     66 11 52 11 
38e12     49 11 41 11 
38e16     38 11 E0 F4 
38e1a     A5 EC 13 EB | 	byte	$66, $11, $52, $11, $49, $11, $41, $11, $38, $11, $e0, $f4, $a5, $ec, $13, $eb
38e1e     C9 EA C5 EA 
38e22     CF EA DB EA 
38e26     E6 EA EF EA 
38e2a     FB EA 0E 10 | 	byte	$c9, $ea, $c5, $ea, $cf, $ea, $db, $ea, $e6, $ea, $ef, $ea, $fb, $ea, $0e, $10
38e2e     89 11 80 11 
38e32     78 11 6E 11 
38e36     67 11 5D 11 
38e3a     54 11 4C 11 | 	byte	$89, $11, $80, $11, $78, $11, $6e, $11, $67, $11, $5d, $11, $54, $11, $4c, $11
38e3e     43 11 32 0D 
38e42     9C F1 07 EC 
38e46     F8 EA CD EA 
38e4a     CC EA D8 EA | 	byte	$43, $11, $32, $0d, $9c, $f1, $07, $ec, $f8, $ea, $cd, $ea, $cc, $ea, $d8, $ea
38e4e     E4 EA ED EA 
38e52     F8 EA 02 EB 
38e56     55 11 91 11 
38e5a     89 11 80 11 | 	byte	$e4, $ea, $ed, $ea, $f8, $ea, $02, $eb, $55, $11, $91, $11, $89, $11, $80, $11
38e5e     75 11 6E 11 
38e62     64 11 5E 11 
38e66     54 11 4A 11 
38e6a     BC 02 5E EF | 	byte	$75, $11, $6e, $11, $64, $11, $5e, $11, $54, $11, $4a, $11, $bc, $02, $5e, $ef
38e6e     A8 EB F1 EA 
38e72     D9 EA DC EA 
38e76     E8 EA F1 EA 
38e7a     FC EA 06 EB | 	byte	$a8, $eb, $f1, $ea, $d9, $ea, $dc, $ea, $e8, $ea, $f1, $ea, $fc, $ea, $06, $eb
38e7e     A6 EB 9E 11 
38e82     A0 11 96 11 
38e86     8D 11 85 11 
38e8a     7B 11 72 11 | 	byte	$a6, $eb, $9e, $11, $a0, $11, $96, $11, $8d, $11, $85, $11, $7b, $11, $72, $11
38e8e     6A 11 CA 0D 
38e92     36 0B 57 F8 
38e96     6C ED 57 EB 
38e9a     F8 EA EE EA | 	byte	$6a, $11, $ca, $0d, $36, $0b, $57, $f8, $6c, $ed, $57, $eb, $f8, $ea, $ee, $ea
38e9e     F4 EA FF EA 
38ea2     09 EB 15 EB 
38ea6     1E EB 1A FD 
38eaa     F9 0A F2 0A | 	byte	$f4, $ea, $ff, $ea, $09, $eb, $15, $eb, $1e, $eb, $1a, $fd, $f9, $0a, $f2, $0a
38eae     ED 0A E8 0A 
38eb2     E2 0A DC 0A 
38eb6     D6 0A D1 0A 
38eba     CD 0A C7 0A | 	byte	$ed, $0a, $e8, $0a, $e2, $0a, $dc, $0a, $d6, $0a, $d1, $0a, $cd, $0a, $c7, $0a
38ebe     F8 F3 BC EC 
38ec2     57 EB 1E EB 
38ec6     18 EB 24 EB 
38eca     2D EB 39 EB | 	byte	$f8, $f3, $bc, $ec, $57, $eb, $1e, $eb, $18, $eb, $24, $eb, $2d, $eb, $39, $eb
38ece     42 EB 4D EB 
38ed2     08 09 20 0B 
38ed6     1A 0B 14 0B 
38eda     0F 0B 09 0B | 	byte	$42, $eb, $4d, $eb, $08, $09, $20, $0b, $1a, $0b, $14, $0b, $0f, $0b, $09, $0b
38ede     04 0B FE 0A 
38ee2     F9 0A F2 0A 
38ee6     84 08 3A F1 
38eea     4F EC 66 EB | 	byte	$04, $0b, $fe, $0a, $f9, $0a, $f2, $0a, $84, $08, $3a, $f1, $4f, $ec, $66, $eb
38eee     42 EB 42 EB 
38ef2     4E EB 57 EB 
38ef6     62 EB 6B EB 
38efa     77 EB 06 0B | 	byte	$42, $eb, $42, $eb, $4e, $eb, $57, $eb, $62, $eb, $6b, $eb, $77, $eb, $06, $0b
38efe     48 0B 43 0B 
38f02     3C 0B 36 0B 
38f06     31 0B 2C 0B 
38f0a     26 0B 20 0B | 	byte	$48, $0b, $43, $0b, $3c, $0b, $36, $0b, $31, $0b, $2c, $0b, $26, $0b, $20, $0b
38f0e     1B 0B 5C 00 
38f12     6A EF 1B EC 
38f16     81 EB 6A EB 
38f1a     6F EB 79 EB | 	byte	$1b, $0b, $5c, $00, $6a, $ef, $1b, $ec, $81, $eb, $6a, $eb, $6f, $eb, $79, $eb
38f1e     85 EB 8E EB 
38f22     99 EB A3 EB 
38f26     DD 05 E5 05 
38f2a     E1 05 DF 05 | 	byte	$85, $eb, $8e, $eb, $99, $eb, $a3, $eb, $dd, $05, $e5, $05, $e1, $05, $df, $05
38f2e     DB 05 D8 05 
38f32     D5 05 D1 05 
38f36     D0 05 CB 05 
38f3a     63 F7 DA ED | 	byte	$db, $05, $d8, $05, $d5, $05, $d1, $05, $d0, $05, $cb, $05, $63, $f7, $da, $ed
38f3e     0C EC BB EB 
38f42     B3 EB BB EB 
38f46     C5 EB D0 EB 
38f4a     D9 EB E3 EB | 	byte	$0c, $ec, $bb, $eb, $b3, $eb, $bb, $eb, $c5, $eb, $d0, $eb, $d9, $eb, $e3, $eb
38f4e     E4 F7 2C 06 
38f52     28 06 24 06 
38f56     22 06 1F 06 
38f5a     1C 06 1A 06 | 	byte	$e4, $f7, $2c, $06, $28, $06, $24, $06, $22, $06, $1f, $06, $1c, $06, $1a, $06
38f5e     16 06 14 06 
38f62     0F 06 D0 F3 
38f66     65 ED 2D EC 
38f6a     F9 EB F6 EB | 	byte	$16, $06, $14, $06, $0f, $06, $d0, $f3, $65, $ed, $2d, $ec, $f9, $eb, $f6, $eb
38f6e     01 EC 0A EC 
38f72     14 EC 1E EC 
38f76     29 EC FB 03 
38f7a     6A 06 67 06 | 	byte	$01, $ec, $0a, $ec, $14, $ec, $1e, $ec, $29, $ec, $fb, $03, $6a, $06, $67, $06
38f7e     63 06 60 06 
38f82     5E 06 59 06 
38f86     58 06 54 06 
38f8a     50 06 12 05 | 	byte	$63, $06, $60, $06, $5e, $06, $59, $06, $58, $06, $54, $06, $50, $06, $12, $05
38f8e     69 F1 21 ED 
38f92     55 EC 33 EC 
38f96     36 EC 40 EC 
38f9a     49 EC 53 EC | 	byte	$69, $f1, $21, $ed, $55, $ec, $33, $ec, $36, $ec, $40, $ec, $49, $ec, $53, $ec
38f9e     5C EC 68 EC 
38fa2     92 02 D9 02 
38fa6     D7 02 D7 02 
38faa     D5 02 D3 02 | 	byte	$5c, $ec, $68, $ec, $92, $02, $d9, $02, $d7, $02, $d7, $02, $d5, $02, $d3, $02
38fae     D1 02 D1 02 
38fb2     CE 02 CD 02 
38fb6     5D FC 80 EF 
38fba     07 ED 90 EC | 	byte	$d1, $02, $d1, $02, $ce, $02, $cd, $02, $5d, $fc, $80, $ef, $07, $ed, $90, $ec
38fbe     83 EC 8A EC 
38fc2     93 EC 9C EC 
38fc6     A5 EC B1 EC 
38fca     BA EC 24 03 | 	byte	$83, $ec, $8a, $ec, $93, $ec, $9c, $ec, $a5, $ec, $b1, $ec, $ba, $ec, $24, $03
38fce     2B 03 2A 03 
38fd2     29 03 26 03 
38fd6     25 03 24 03 
38fda     22 03 20 03 | 	byte	$2b, $03, $2a, $03, $29, $03, $26, $03, $25, $03, $24, $03, $22, $03, $20, $03
38fde     1F 03 70 F7 
38fe2     D0 EE 27 ED 
38fe6     DB EC D4 EC 
38fea     DD EC E7 EC | 	byte	$1f, $03, $70, $f7, $d0, $ee, $27, $ed, $db, $ec, $d4, $ec, $dd, $ec, $e7, $ec
38fee     F0 EC FA EC 
38ff2     02 ED F9 F4 
38ff6     7B 03 7C 03 
38ffa     7A 03 78 03 | 	byte	$f0, $ec, $fa, $ec, $02, $ed, $f9, $f4, $7b, $03, $7c, $03, $7a, $03, $78, $03
38ffe     75 03 73 03 
39002     72 03 70 03 
39006     6D 03 6C 03 
3900a     4F F4 70 EE | 	byte	$75, $03, $73, $03, $72, $03, $70, $03, $6d, $03, $6c, $03, $4f, $f4, $70, $ee
3900e     54 ED 22 ED 
39012     22 ED 2C ED 
39016     35 ED 3F ED 
3901a     48 ED 52 ED | 	byte	$54, $ed, $22, $ed, $22, $ed, $2c, $ed, $35, $ed, $3f, $ed, $48, $ed, $52, $ed
3901e     14 01 C3 03 
39022     C1 03 C0 03 
39026     5F 01 A5 00 
3902a     82 00 7B 00 | 	byte	$14, $01, $c3, $03, $c1, $03, $c0, $03, $5f, $01, $a5, $00, $82, $00, $7b, $00
3902e     7B 00 7C 00 
39032     20 00 85 F1 
39036     2A EE 89 ED 
3903a     73 ED 76 ED | 	byte	$7b, $00, $7c, $00, $20, $00, $85, $f1, $2a, $ee, $89, $ed, $73, $ed, $76, $ed
3903e     80 ED 87 ED 
39042     90 ED 9A ED 
39046     A3 ED 73 00 
3904a     D2 00 D2 00 | 	byte	$80, $ed, $87, $ed, $90, $ed, $9a, $ed, $a3, $ed, $73, $00, $d2, $00, $d2, $00
3904e     D0 00 D0 00 
39052     D0 00 D0 00 
39056     D0 00 CF 00 
3905a     CE 00 48 FC | 	byte	$d0, $00, $d0, $00, $d0, $00, $d0, $00, $d0, $00, $cf, $00, $ce, $00, $48, $fc
3905e     80 F0 3D EE 
39062     D5 ED C7 ED 
39066     CD ED D6 ED 
3906a     DF ED E9 ED | 	byte	$80, $f0, $3d, $ee, $d5, $ed, $c7, $ed, $cd, $ed, $d6, $ed, $df, $ed, $e9, $ed
3906e     F2 ED FA ED 
39072     1D 01 29 01 
39076     27 01 27 01 
3907a     27 01 25 01 | 	byte	$f2, $ed, $fa, $ed, $1d, $01, $29, $01, $27, $01, $27, $01, $27, $01, $25, $01
3907e     25 01 26 01 
39082     26 01 23 01 
39086     D0 F7 EC EF 
3908a     65 EE 23 EE | 	byte	$25, $01, $26, $01, $26, $01, $23, $01, $d0, $f7, $ec, $ef, $65, $ee, $23, $ee
3908e     1C EE 24 EE 
39092     2D EE 37 EE 
39096     40 EE 47 EE 
3909a     6E F3 7A 01 | 	byte	$1c, $ee, $24, $ee, $2d, $ee, $37, $ee, $40, $ee, $47, $ee, $6e, $f3, $7a, $01
3909e     7D 01 7B 01 
390a2     7A 01 7A 01 
390a6     79 01 78 01 
390aa     79 01 62 00 | 	byte	$7d, $01, $7b, $01, $7a, $01, $7a, $01, $79, $01, $78, $01, $79, $01, $62, $00
390ae     84 FE DE F3 
390b2     6C EF 93 EE 
390b6     72 EE 72 EE 
390ba     7A EE 85 EE | 	byte	$84, $fe, $de, $f3, $6c, $ef, $93, $ee, $72, $ee, $72, $ee, $7a, $ee, $85, $ee
390be     8B EE 95 EE 
390c2     9E EE 15 FC 
390c6     67 FE 67 FE 
390ca     69 FE 69 FE | 	byte	$8b, $ee, $95, $ee, $9e, $ee, $15, $fc, $67, $fe, $67, $fe, $69, $fe, $69, $fe
390ce     6B FE 6B FE 
390d2     6D FE 6D FE 
390d6     6D FE 6F FE 
390da     63 F2 6D EF | 	byte	$6b, $fe, $6b, $fe, $6d, $fe, $6d, $fe, $6d, $fe, $6f, $fe, $63, $f2, $6d, $ef
390de     DF EE CC EE 
390e2     CF EE D9 EE 
390e6     E1 EE EA EE 
390ea     F2 EE FC EE | 	byte	$df, $ee, $cc, $ee, $cf, $ee, $d9, $ee, $e1, $ee, $ea, $ee, $f2, $ee, $fc, $ee
390ee     5A FE C4 FE 
390f2     C3 FE C5 FE 
390f6     C6 FE C6 FE 
390fa     C6 FE C7 FE | 	byte	$5a, $fe, $c4, $fe, $c3, $fe, $c5, $fe, $c6, $fe, $c6, $fe, $c6, $fe, $c7, $fe
390fe     C8 FE C7 FE 
39102     DA FB 85 F1 
39106     8D EF 31 EF 
3910a     25 EF 2D EF | 	byte	$c8, $fe, $c7, $fe, $da, $fb, $85, $f1, $8d, $ef, $31, $ef, $25, $ef, $2d, $ef
3910e     34 EF 3E EF 
39112     46 EF 4F EF 
39116     57 EF 0D FF 
3911a     1F FF 1F FF | 	byte	$34, $ef, $3e, $ef, $46, $ef, $4f, $ef, $57, $ef, $0d, $ff, $1f, $ff, $1f, $ff
3911e     1F FF 1F FF 
39122     21 FF 21 FF 
39126     21 FF 21 FF 
3912a     23 FF 10 F8 | 	byte	$1f, $ff, $1f, $ff, $21, $ff, $21, $ff, $21, $ff, $21, $ff, $23, $ff, $10, $f8
3912e     15 F1 BE EF 
39132     84 EF 7E EF 
39136     88 EF 8F EF 
3913a     97 EF A0 EF | 	byte	$15, $f1, $be, $ef, $84, $ef, $7e, $ef, $88, $ef, $8f, $ef, $97, $ef, $a0, $ef
3913e     A9 EF 06 F2 
39142     A6 FC AB FC 
39146     AD FC AE FC 
3914a     B0 FC B2 FC | 	byte	$a9, $ef, $06, $f2, $a6, $fc, $ab, $fc, $ad, $fc, $ae, $fc, $b0, $fc, $b2, $fc
3914e     B2 FC B4 FC 
39152     B6 FC B7 FC 
39156     8B F4 BD F0 
3915a     01 F0 E3 EF | 	byte	$b2, $fc, $b4, $fc, $b6, $fc, $b7, $fc, $8b, $f4, $bd, $f0, $01, $f0, $e3, $ef
3915e     E4 EF EE EF 
39162     F6 EF FD EF 
39166     04 F0 0E F0 
3916a     11 FA 09 FD | 	byte	$e4, $ef, $ee, $ef, $f6, $ef, $fd, $ef, $04, $f0, $0e, $f0, $11, $fa, $09, $fd
3916e     0B FD 0D FD 
39172     0F FD 11 FD 
39176     11 FD 13 FD 
3917a     14 FD 17 FD | 	byte	$0b, $fd, $0d, $fd, $0f, $fd, $11, $fd, $11, $fd, $13, $fd, $14, $fd, $17, $fd
3917e     17 FD 64 F3 
39182     CD F0 52 F0 
39186     41 F0 45 F0 
3918a     4C F0 55 F0 | 	byte	$17, $fd, $64, $f3, $cd, $f0, $52, $f0, $41, $f0, $45, $f0, $4c, $f0, $55, $f0
3918e     5B F0 64 F0 
39192     6D F0 FB FC 
39196     65 FD 68 FD 
3919a     69 FD 6C FD | 	byte	$5b, $f0, $64, $f0, $6d, $f0, $fb, $fc, $65, $fd, $68, $fd, $69, $fd, $6c, $fd
3919e     6C FD 6D FD 
391a2     6F FD 70 FD 
391a6     72 FD B3 FB 
391aa     B1 F2 F4 F0 | 	byte	$6c, $fd, $6d, $fd, $6f, $fd, $70, $fd, $72, $fd, $b3, $fb, $b1, $f2, $f4, $f0
391ae     A4 F0 99 F0 
391b2     A0 F0 A8 F0 
391b6     AE F0 B9 F0 
391ba     C1 F0 C8 F0 | 	byte	$a4, $f0, $99, $f0, $a0, $f0, $a8, $f0, $ae, $f0, $b9, $f0, $c1, $f0, $c8, $f0
391be     CB FB DD FB 
391c2     DE FB E0 FB 
391c6     E3 FB E3 FB 
391ca     E5 FB E8 FB | 	byte	$cb, $fb, $dd, $fb, $de, $fb, $e0, $fb, $e3, $fb, $e3, $fb, $e5, $fb, $e8, $fb
391ce     E9 FB EC FB 
391d2     62 F7 27 F2 
391d6     2A F1 FF F0 
391da     FD F0 05 F1 | 	byte	$e9, $fb, $ec, $fb, $62, $f7, $27, $f2, $2a, $f1, $ff, $f0, $fd, $f0, $05, $f1
391de     0C F1 13 F1 
391e2     1B F1 23 F1 
391e6     33 F2 3C FC 
391ea     3E FC 40 FC | 	byte	$0c, $f1, $13, $f1, $1b, $f1, $23, $f1, $33, $f2, $3c, $fc, $3e, $fc, $40, $fc
391ee     42 FC 45 FC 
391f2     47 FC 48 FC 
391f6     4A FC 4C FC 
391fa     4E FC A5 F5 | 	byte	$42, $fc, $45, $fc, $47, $fc, $48, $fc, $4a, $fc, $4c, $fc, $4e, $fc, $a5, $f5
391fe     20 F2 77 F1 
39202     5C F1 5F F1 
39206     64 F1 6C F1 
3920a     73 F1 7C F1 | 	byte	$20, $f2, $77, $f1, $5c, $f1, $5f, $f1, $64, $f1, $6c, $f1, $73, $f1, $7c, $f1
3920e     83 F1 DC F8 
39212     9A FC 9A FC 
39216     9B FC 9E FC 
3921a     9F FC A1 FC | 	byte	$83, $f1, $dc, $f8, $9a, $fc, $9a, $fc, $9b, $fc, $9e, $fc, $9f, $fc, $a1, $fc
3921e     A3 FC A4 FC 
39222     A6 FC A9 FC 
39226     90 F4 33 F2 
3922a     C5 F1 B6 F1 | 	byte	$a3, $fc, $a4, $fc, $a6, $fc, $a9, $fc, $90, $f4, $33, $f2, $c5, $f1, $b6, $f1
3922e     BA F1 BF F1 
39232     C7 F1 CE F1 
39236     D6 F1 DC F1 
3923a     79 FC F0 FC | 	byte	$ba, $f1, $bf, $f1, $c7, $f1, $ce, $f1, $d6, $f1, $dc, $f1, $79, $fc, $f0, $fc
3923e     F3 FC F5 FC 
39242     FE FB 79 FB 
39246     62 FB 5F FB 
3924a     61 FB 63 FB | 	byte	$f3, $fc, $f5, $fc, $fe, $fb, $79, $fb, $62, $fb, $5f, $fb, $61, $fb, $63, $fb
3924e     6F FA AF F3 
39252     53 F2 12 F2 
39256     0F F2 15 F2 
3925a     1D F2 24 F2 | 	byte	$6f, $fa, $af, $f3, $53, $f2, $12, $f2, $0f, $f2, $15, $f2, $1d, $f2, $24, $f2
3925e     2A F2 32 F2 
39262     38 F2 9A FB 
39266     AF FB B1 FB 
3926a     B3 FB B4 FB | 	byte	$2a, $f2, $32, $f2, $38, $f2, $9a, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
3926e     B7 FB B8 FB 
39272     BA FB BC FB 
39276     C1 FB 3B F8 
3927a     7E F3 96 F2 | 	byte	$b7, $fb, $b8, $fb, $ba, $fb, $bc, $fb, $c1, $fb, $3b, $f8, $7e, $f3, $96, $f2
3927e     6E F2 6C F2 
39282     74 F2 7A F2 
39286     81 F2 87 F2 
3928a     8E F2 A7 F2 | 	byte	$6e, $f2, $6c, $f2, $74, $f2, $7a, $f2, $81, $f2, $87, $f2, $8e, $f2, $a7, $f2
3928e     06 FC 09 FC 
39292     0C FC 0E FC 
39296     0F FC 12 FC 
3929a     13 FC 16 FC | 	byte	$06, $fc, $09, $fc, $0c, $fc, $0e, $fc, $0f, $fc, $12, $fc, $13, $fc, $16, $fc
3929e     17 FC 1A FC 
392a2     B2 F6 7B F3 
392a6     DD F2 C5 F2 
392aa     C7 F2 CF F2 | 	byte	$17, $fc, $1a, $fc, $b2, $f6, $7b, $f3, $dd, $f2, $c5, $f2, $c7, $f2, $cf, $f2
392ae     D4 F2 DB F2 
392b2     E0 F2 E8 F2 
392b6     28 F8 60 FC 
392ba     61 FC 62 FC | 	byte	$d4, $f2, $db, $f2, $e0, $f2, $e8, $f2, $28, $f8, $60, $fc, $61, $fc, $62, $fc
392be     64 FC 66 FC 
392c2     68 FC 6A FC 
392c6     6D FC 52 FC 
392ca     19 FB 4A F5 | 	byte	$64, $fc, $66, $fc, $68, $fc, $6a, $fc, $6d, $fc, $52, $fc, $19, $fb, $4a, $f5
392ce     78 F3 24 F3 
392d2     1A F3 1E F3 
392d6     24 F3 2A F3 
392da     31 F3 38 F3 | 	byte	$78, $f3, $24, $f3, $1a, $f3, $1e, $f3, $24, $f3, $2a, $f3, $31, $f3, $38, $f3
392de     3D F3 80 FA 
392e2     0C FB 0F FB 
392e6     10 FB 14 FB 
392ea     15 FB 17 FB | 	byte	$3d, $f3, $80, $fa, $0c, $fb, $0f, $fb, $10, $fb, $14, $fb, $15, $fb, $17, $fb
392ee     1B FB 1D FB 
392f2     1F FB 92 FA 
392f6     DE F4 AE F3 
392fa     79 F3 72 F3 | 	byte	$1b, $fb, $1d, $fb, $1f, $fb, $92, $fa, $de, $f4, $ae, $f3, $79, $f3, $72, $f3
392fe     79 F3 7E F3 
39302     84 F3 8C F3 
39306     92 F3 97 F3 
3930a     52 FB 65 FB | 	byte	$79, $f3, $7e, $f3, $84, $f3, $8c, $f3, $92, $f3, $97, $f3, $52, $fb, $65, $fb
3930e     67 FB 69 FB 
39312     6B FB 6F FB 
39316     71 FB 72 FB 
3931a     74 FB 76 FB | 	byte	$67, $fb, $69, $fb, $6b, $fb, $6f, $fb, $71, $fb, $72, $fb, $74, $fb, $76, $fb
3931e     E3 F8 BA F4 
39322     EE F3 CC F3 
39326     CA F3 CF F3 
3932a     D5 F3 DD F3 | 	byte	$e3, $f8, $ba, $f4, $ee, $f3, $cc, $f3, $ca, $f3, $cf, $f3, $d5, $f3, $dd, $f3
3932e     E2 F3 E8 F3 
39332     ED F3 B7 FB 
39336     BC FB BE FB 
3933a     C0 FB C1 FB | 	byte	$e2, $f3, $e8, $f3, $ed, $f3, $b7, $fb, $bc, $fb, $be, $fb, $c0, $fb, $c1, $fb
3933e     C4 FB C6 FB 
39342     C8 FB C9 FB 
39346     CC FB 8F F7 
3934a     B9 F4 33 F4 | 	byte	$c4, $fb, $c6, $fb, $c8, $fb, $c9, $fb, $cc, $fb, $8f, $f7, $b9, $f4, $33, $f4
3934e     1E F4 1E F4 
39352     24 F4 2A F4 
39356     30 F4 38 F4 
3935a     3E F4 1F F7 | 	byte	$1e, $f4, $1e, $f4, $24, $f4, $2a, $f4, $30, $f4, $38, $f4, $3e, $f4, $1f, $f7
3935e     AD FA B1 FA 
39362     B4 FA B6 FA 
39366     BA FA BB FA 
3936a     BE FA C1 FA | 	byte	$ad, $fa, $b1, $fa, $b4, $fa, $b6, $fa, $ba, $fa, $bb, $fa, $be, $fa, $c1, $fa
3936e     C2 FA C6 FA 
39372     55 F6 C6 F4 
39376     7D F4 72 F4 
3937a     78 F4 7E F4 | 	byte	$c2, $fa, $c6, $fa, $55, $f6, $c6, $f4, $7d, $f4, $72, $f4, $78, $f4, $7e, $f4
3937e     83 F4 89 F4 
39382     8F F4 94 F4 
39386     66 FA 03 FB 
3938a     07 FB 08 FB | 	byte	$83, $f4, $89, $f4, $8f, $f4, $94, $f4, $66, $fa, $03, $fb, $07, $fb, $08, $fb
3938e     0A FB 0E FB 
39392     10 FB 11 FB 
39396     16 FB 18 FB 
3939a     D0 FA 02 F6 | 	byte	$0a, $fb, $0e, $fb, $10, $fb, $11, $fb, $16, $fb, $18, $fb, $d0, $fa, $02, $f6
3939e     F9 F4 CA F4 
393a2     C5 F4 CB F4 
393a6     D1 F4 D7 F4 
393aa     DC F4 E1 F4 | 	byte	$f9, $f4, $ca, $f4, $c5, $f4, $cb, $f4, $d1, $f4, $d7, $f4, $dc, $f4, $e1, $f4
393ae     E8 F4 3F FB 
393b2     56 FB 58 FB 
393b6     5A FB 5E FB 
393ba     5F FB 61 FB | 	byte	$e8, $f4, $3f, $fb, $56, $fb, $58, $fb, $5a, $fb, $5e, $fb, $5f, $fb, $61, $fb
393be     64 FB 64 FB 
393c2     69 FB 99 F9 
393c6     E9 F5 33 F5 
393ca     17 F5 17 F5 | 	byte	$64, $fb, $64, $fb, $69, $fb, $99, $f9, $e9, $f5, $33, $f5, $17, $f5, $17, $f5
393ce     1D F5 22 F5 
393d2     27 F5 2E F5 
393d6     32 F5 37 F5 
393da     B3 FA B6 FA | 	byte	$1d, $f5, $22, $f5, $27, $f5, $2e, $f5, $32, $f5, $37, $f5, $b3, $fa, $b6, $fa
393de     BC FA BC FA 
393e2     C1 FA C2 FA 
393e6     C4 FA C8 FA 
393ea     CA FA CE FA | 	byte	$bc, $fa, $bc, $fa, $c1, $fa, $c2, $fa, $c4, $fa, $c8, $fa, $ca, $fa, $ce, $fa
393ee     F9 F7 DB F5 
393f2     78 F5 69 F5 
393f6     6A F5 70 F5 
393fa     75 F5 7B F5 | 	byte	$f9, $f7, $db, $f5, $78, $f5, $69, $f5, $6a, $f5, $70, $f5, $75, $f5, $7b, $f5
393fe     7F F5 85 F5 
39402     6E F7 06 FB 
39406     0A FB 0B FB 
3940a     0D FB 12 FB | 	byte	$7f, $f5, $85, $f5, $6e, $f7, $06, $fb, $0a, $fb, $0b, $fb, $0d, $fb, $12, $fb
3940e     14 FB 15 FB 
39412     18 FB 1B FB 
39416     1D FB 70 F7 
3941a     01 F6 C0 F5 | 	byte	$14, $fb, $15, $fb, $18, $fb, $1b, $fb, $1d, $fb, $70, $f7, $01, $f6, $c0, $f5
3941e     B6 F5 BB F5 
39422     C0 F5 C6 F5 
39426     CA F5 CF F5 
3942a     D4 F5 A8 FA | 	byte	$b6, $f5, $bb, $f5, $c0, $f5, $c6, $f5, $ca, $f5, $cf, $f5, $d4, $f5, $a8, $fa
3942e     54 FB 56 FB 
39432     5A FB 5B FB 
39436     5E FB 5F FB 
3943a     63 FB 65 FB | 	byte	$54, $fb, $56, $fb, $5a, $fb, $5b, $fb, $5e, $fb, $5f, $fb, $63, $fb, $65, $fb
3943e     67 FB 52 FB 
39442     29 F7 33 F6 
39446     06 F6 02 F6 
3944a     08 F6 0B F6 | 	byte	$67, $fb, $52, $fb, $29, $f7, $33, $f6, $06, $f6, $02, $f6, $08, $f6, $0b, $f6
3944e     10 F6 16 F6 
39452     1A F6 1F F6 
39456     81 FB 9F FB 
3945a     A2 FB A4 FB | 	byte	$10, $f6, $16, $f6, $1a, $f6, $1f, $f6, $81, $fb, $9f, $fb, $a2, $fb, $a4, $fb
3945e     51 FB F2 FA 
39462     E3 FA E3 FA 
39466     E5 FA E9 FA 
3946a     D2 F9 F0 F6 | 	byte	$51, $fb, $f2, $fa, $e3, $fa, $e3, $fa, $e5, $fa, $e9, $fa, $d2, $f9, $f0, $f6
3946e     64 F6 4D F6 
39472     4D F6 53 F6 
39476     57 F6 5C F6 
3947a     60 F6 66 F6 | 	byte	$64, $f6, $4d, $f6, $4d, $f6, $53, $f6, $57, $f6, $5c, $f6, $60, $f6, $66, $f6
3947e     6A F6 19 FB 
39482     1E FB 22 FB 
39486     23 FB 24 FB 
3948a     26 FB 2A FB | 	byte	$6a, $f6, $19, $fb, $1e, $fb, $22, $fb, $23, $fb, $24, $fb, $26, $fb, $2a, $fb
3948e     2C FB 2E FB 
39492     32 FB F0 F8 
39496     01 F7 A5 F6 
3949a     98 F6 9A F6 | 	byte	$2c, $fb, $2e, $fb, $32, $fb, $f0, $f8, $01, $f7, $a5, $f6, $98, $f6, $9a, $f6
3949e     9F F6 A3 F6 
394a2     A6 F6 AC F6 
394a6     B0 F6 EB F7 
394aa     65 FB 68 FB | 	byte	$9f, $f6, $a3, $f6, $a6, $f6, $ac, $f6, $b0, $f6, $eb, $f7, $65, $fb, $68, $fb
394ae     68 FB 6C FB 
394b2     6E FB 71 FB 
394b6     72 FB 74 FB 
394ba     78 FB 7A FB | 	byte	$68, $fb, $6c, $fb, $6e, $fb, $71, $fb, $72, $fb, $74, $fb, $78, $fb, $7a, $fb
394be     71 F8 21 F7 
394c2     E5 F6 DD F6 
394c6     E1 F6 E6 F6 
394ca     EA F6 EF F6 | 	byte	$71, $f8, $21, $f7, $e5, $f6, $dd, $f6, $e1, $f6, $e6, $f6, $ea, $f6, $ef, $f6
394ce     F5 F6 F7 F6 
394d2     F7 FA AB FB 
394d6     AD FB AF FB 
394da     B0 FB B5 FB | 	byte	$f5, $f6, $f7, $f6, $f7, $fa, $ab, $fb, $ad, $fb, $af, $fb, $b0, $fb, $b5, $fb
394de     B6 FB B9 FB 
394e2     BB FB BC FB 
394e6     21 FB 07 F8 
394ea     46 F7 23 F7 | 	byte	$b6, $fb, $b9, $fb, $bb, $fb, $bc, $fb, $21, $fb, $07, $f8, $46, $f7, $23, $f7
394ee     22 F7 26 F7 
394f2     2B F7 2E F7 
394f6     34 F7 38 F7 
394fa     3C F7 F7 FA | 	byte	$22, $f7, $26, $f7, $2b, $f7, $2e, $f7, $34, $f7, $38, $f7, $3c, $f7, $f7, $fa
394fe     13 FB 16 FB 
39502     17 FB 1B FB 
39506     1E FB 20 FB 
3950a     23 FB 25 FB | 	byte	$13, $fb, $16, $fb, $17, $fb, $1b, $fb, $1e, $fb, $20, $fb, $23, $fb, $25, $fb
3950e     26 FB 77 FA 
39512     F3 F7 7C F7 
39516     67 F7 6A F7 
3951a     6D F7 70 F7 | 	byte	$26, $fb, $77, $fa, $f3, $f7, $7c, $f7, $67, $f7, $6a, $f7, $6d, $f7, $70, $f7
3951e     74 F7 7A F7 
39522     7E F7 82 F7 
39526     53 FB 5A FB 
3952a     5B FB 5D FB | 	byte	$74, $f7, $7a, $f7, $7e, $f7, $82, $f7, $53, $fb, $5a, $fb, $5b, $fb, $5d, $fb
3952e     5F FB 63 FB 
39532     65 FB 67 FB 
39536     69 FB 6A FB 
3953a     B9 F9 03 F8 | 	byte	$5f, $fb, $63, $fb, $65, $fb, $67, $fb, $69, $fb, $6a, $fb, $b9, $f9, $03, $f8
3953e     B5 F7 A9 F7 
39542     AD F7 B0 F7 
39546     B5 F7 B8 F7 
3954a     BE F7 C3 F7 | 	byte	$b5, $f7, $a9, $f7, $ad, $f7, $b0, $f7, $b5, $f7, $b8, $f7, $be, $f7, $c3, $f7
3954e     6E F8 99 FB 
39552     9C FB 9D FB 
39556     9F FB A4 FB 
3955a     A5 FB A8 FB | 	byte	$6e, $f8, $99, $fb, $9c, $fb, $9d, $fb, $9f, $fb, $a4, $fb, $a5, $fb, $a8, $fb
3955e     A9 FB AB FB 
39562     AD FB 46 F9 
39566     26 F8 F0 F7 
3956a     EA F7 F0 F7 | 	byte	$a9, $fb, $ab, $fb, $ad, $fb, $46, $f9, $26, $f8, $f0, $f7, $ea, $f7, $f0, $f7
3956e     F4 F7 F8 F7 
39572     FB F7 FF F7 
39576     03 F8 65 FA 
3957a     26 FB 29 FB | 	byte	$f4, $f7, $f8, $f7, $fb, $f7, $ff, $f7, $03, $f8, $65, $fa, $26, $fb, $29, $fb
3957e     2B FB 2F FB 
39582     30 FB 32 FB 
39586     34 FB 38 FB 
3958a     39 FB 3B FB | 	byte	$2b, $fb, $2f, $fb, $30, $fb, $32, $fb, $34, $fb, $38, $fb, $39, $fb, $3b, $fb
3958e     E9 F8 4A F8 
39592     2E F8 2C F8 
39596     2F F8 36 F8 
3959a     3A F8 3E F8 | 	byte	$e9, $f8, $4a, $f8, $2e, $f8, $2c, $f8, $2f, $f8, $36, $f8, $3a, $f8, $3e, $f8
3959e     41 F8 44 F8 
395a2     4A FB 67 FB 
395a6     68 FB 6B FB 
395aa     6F FB 70 FB | 	byte	$41, $f8, $44, $f8, $4a, $fb, $67, $fb, $68, $fb, $6b, $fb, $6f, $fb, $70, $fb
395ae     73 FB 74 FB 
395b2     78 FB 7A FB 
395b6     14 FB E7 F8 
395ba     7D F8 6D F8 | 	byte	$73, $fb, $74, $fb, $78, $fb, $7a, $fb, $14, $fb, $e7, $f8, $7d, $f8, $6d, $f8
395be     6D F8 70 F8 
395c2     73 F8 78 F8 
395c6     7C F8 80 F8 
395ca     84 F8 9F FB | 	byte	$6d, $f8, $70, $f8, $73, $f8, $78, $f8, $7c, $f8, $80, $f8, $84, $f8, $9f, $fb
395ce     A6 FB A7 FB 
395d2     A9 FB AC FB 
395d6     AF FB B1 FB 
395da     B3 FB B4 FB | 	byte	$a6, $fb, $a7, $fb, $a9, $fb, $ac, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
395de     B7 FB 73 FA 
395e2     F8 F8 B4 F8 
395e6     A9 F8 AB F8 
395ea     AF F8 B1 F8 | 	byte	$b7, $fb, $73, $fa, $f8, $f8, $b4, $f8, $a9, $f8, $ab, $f8, $af, $f8, $b1, $f8
395ee     B4 F8 B8 F8 
395f2     BB F8 FA F8 
395f6     64 FB 65 FB 
395fa     67 FB 6B FB | 	byte	$b4, $f8, $b8, $f8, $bb, $f8, $fa, $f8, $64, $fb, $65, $fb, $67, $fb, $6b, $fb
395fe     6D FB 6F FB 
39602     70 FB 74 FB 
39606     77 FB 77 FB 
3960a     E4 F9 0F F9 | 	byte	$6d, $fb, $6f, $fb, $70, $fb, $74, $fb, $77, $fb, $77, $fb, $e4, $f9, $0f, $f9
3960e     E9 F8 E4 F8 
39612     E8 F8 EB F8 
39616     EE F8 F2 F8 
3961a     F7 F8 FB F8 | 	byte	$e9, $f8, $e4, $f8, $e8, $f8, $eb, $f8, $ee, $f8, $f2, $f8, $f7, $f8, $fb, $f8
3961e     B5 FA 9F FB 
39622     A1 FB A4 FB 
39626     A5 FB A9 FB 
3962a     AB FB AE FB | 	byte	$b5, $fa, $9f, $fb, $a1, $fb, $a4, $fb, $a5, $fb, $a9, $fb, $ab, $fb, $ae, $fb
3962e     AE FB B1 FB 
39632     B2 FB C7 F9 
39636     39 F9 22 F9 
3963a     20 F9 22 F9 | 	byte	$ae, $fb, $b1, $fb, $b2, $fb, $c7, $f9, $39, $f9, $22, $f9, $20, $f9, $22, $f9
3963e     26 F9 2A F9 
39642     2E F9 32 F9 
39646     33 F9 BA FB 
3964a     D8 FB DB FB | 	byte	$26, $f9, $2a, $f9, $2e, $f9, $32, $f9, $33, $f9, $ba, $fb, $d8, $fb, $db, $fb
3964e     DE FB E1 FB 
39652     E2 FB E4 FB 
39656     E5 FB E7 FB 
3965a     E9 FB A7 FB | 	byte	$de, $fb, $e1, $fb, $e2, $fb, $e4, $fb, $e5, $fb, $e7, $fb, $e9, $fb, $a7, $fb
3965e     C5 F9 67 F9 
39662     57 F9 56 F9 
39666     5B F9 5F F9 
3966a     62 F9 66 F9 | 	byte	$c5, $f9, $67, $f9, $57, $f9, $56, $f9, $5b, $f9, $5f, $f9, $62, $f9, $66, $f9
3966e     68 F9 6C F9 
39672     0B FC 11 FC 
39676     14 FC 15 FC 
3967a     07 FC C2 FB | 	byte	$68, $f9, $6c, $f9, $0b, $fc, $11, $fc, $14, $fc, $15, $fc, $07, $fc, $c2, $fb
3967e     B5 FB B5 FB 
39682     B6 FB B8 FB 
39686     E9 FA C8 F9 
3968a     94 F9 8D F9 | 	byte	$b5, $fb, $b5, $fb, $b6, $fb, $b8, $fb, $e9, $fa, $c8, $f9, $94, $f9, $8d, $f9
3968e     90 F9 94 F9 
39692     95 F9 99 F9 
39696     9D F9 9F F9 
3969a     A3 F9 DD FB | 	byte	$90, $f9, $94, $f9, $95, $f9, $99, $f9, $9d, $f9, $9f, $f9, $a3, $f9, $dd, $fb
3969e     DE FB DF FB 
396a2     E2 FB E4 FB 
396a6     E6 FB E8 FB 
396aa     E9 FB ED FB | 	byte	$de, $fb, $df, $fb, $e2, $fb, $e4, $fb, $e6, $fb, $e8, $fb, $e9, $fb, $ed, $fb
396ae     EF FB AC FA 
396b2     E9 F9 C7 F9 
396b6     C3 F9 C8 F9 
396ba     CA F9 CC F9 | 	byte	$ef, $fb, $ac, $fa, $e9, $f9, $c7, $f9, $c3, $f9, $c8, $f9, $ca, $f9, $cc, $f9
396be     D0 F9 D4 F9 
396c2     D6 F9 0E FB 
396c6     11 FC 13 FC 
396ca     16 FC 17 FC | 	byte	$d0, $f9, $d4, $f9, $d6, $f9, $0e, $fb, $11, $fc, $13, $fc, $16, $fc, $17, $fc
396ce     19 FC 1B FC 
396d2     1D FC 1E FC 
396d6     21 FC 22 FC 
396da     8D FA 0F FA | 	byte	$19, $fc, $1b, $fc, $1d, $fc, $1e, $fc, $21, $fc, $22, $fc, $8d, $fa, $0f, $fa
396de     F7 F9 F7 F9 
396e2     FB F9 FE F9 
396e6     00 FA 03 FA 
396ea     07 FA 0B FA | 	byte	$f7, $f9, $f7, $f9, $fb, $f9, $fe, $f9, $00, $fa, $03, $fa, $07, $fa, $0b, $fa
396ee     1B FC 45 FC 
396f2     46 FC 48 FC 
396f6     4A FC 4B FC 
396fa     4E FC 50 FC | 	byte	$1b, $fc, $45, $fc, $46, $fc, $48, $fc, $4a, $fc, $4b, $fc, $4e, $fc, $50, $fc
396fe     52 FC 54 FC 
39702     F3 FB 82 FA 
39706     35 FA 28 FA 
3970a     2A FA 2D FA | 	byte	$52, $fc, $54, $fc, $f3, $fb, $82, $fa, $35, $fa, $28, $fa, $2a, $fa, $2d, $fa
3970e     31 FA 32 FA 
39712     37 FA 37 FA 
39716     3C FA 00 FC 
3971a     06 FC 09 FC | 	byte	$31, $fa, $32, $fa, $37, $fa, $37, $fa, $3c, $fa, $00, $fc, $06, $fc, $09, $fc
3971e     09 FC 0B FC 
39722     0F FC 12 FC 
39726     12 FC 15 FC 
3972a     17 FC 84 FB | 	byte	$09, $fc, $0b, $fc, $0f, $fc, $12, $fc, $12, $fc, $15, $fc, $17, $fc, $84, $fb
3972e     8D FA 60 FA 
39732     5B FA 5C FA 
39736     60 FA 61 FA 
3973a     66 FA 67 FA | 	byte	$8d, $fa, $60, $fa, $5b, $fa, $5c, $fa, $60, $fa, $61, $fa, $66, $fa, $67, $fa
3973e     6C FA 6D FA 
39742     37 FC 3A FC 
39746     3B FC 3D FC 
3974a     3E FC 41 FC | 	byte	$6c, $fa, $6d, $fa, $37, $fc, $3a, $fc, $3b, $fc, $3d, $fc, $3e, $fc, $41, $fc
3974e     43 FC 44 FC 
39752     45 FC 47 FC 
39756     51 FB AB FA 
3975a     8E FA 8B FA | 	byte	$43, $fc, $44, $fc, $45, $fc, $47, $fc, $51, $fb, $ab, $fa, $8e, $fa, $8b, $fa
3975e     8E FA 91 FA 
39762     93 FA 95 FA 
39766     98 FA 9B FA 
3976a     64 FB 67 FC | 	byte	$8e, $fa, $91, $fa, $93, $fa, $95, $fa, $98, $fa, $9b, $fa, $64, $fb, $67, $fc
3976e     68 FC 6A FC 
39772     6C FC 6E FC 
39776     70 FC 72 FC 
3977a     74 FC 74 FC | 	byte	$68, $fc, $6a, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc, $74, $fc, $74, $fc
3977e     76 FC 3B FB 
39782     D0 FA BB FA 
39786     B9 FA BD FA 
3978a     BF FA C2 FA | 	byte	$76, $fc, $3b, $fb, $d0, $fa, $bb, $fa, $b9, $fa, $bd, $fa, $bf, $fa, $c2, $fa
3978e     C4 FA C6 FA 
39792     CA FA 13 FC 
39796     3A FC 3A FC 
3979a     3E FC 3E FC | 	byte	$c4, $fa, $c6, $fa, $ca, $fa, $13, $fc, $3a, $fc, $3a, $fc, $3e, $fc, $3e, $fc
3979e     41 FC 43 FC 
397a2     44 FC 47 FC 
397a6     48 FC 3C FC 
397aa     2B FB F0 FA | 	byte	$41, $fc, $43, $fc, $44, $fc, $47, $fc, $48, $fc, $3c, $fc, $2b, $fb, $f0, $fa
397ae     E6 FA E8 FA 
397b2     EB FA EE FA 
397b6     F0 FA F2 FA 
397ba     F6 FA F7 FA | 	byte	$e6, $fa, $e8, $fa, $eb, $fa, $ee, $fa, $f0, $fa, $f2, $fa, $f6, $fa, $f7, $fa
397be     61 FC 66 FC 
397c2     68 FC 6B FC 
397c6     6C FC 6E FC 
397ca     70 FC 72 FC | 	byte	$61, $fc, $66, $fc, $68, $fc, $6b, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc
397ce     73 FC 75 FC 
397d2     13 FC 3F FB 
397d6     17 FB 12 FB 
397da     16 FB 18 FB | 	byte	$73, $fc, $75, $fc, $13, $fc, $3f, $fb, $17, $fb, $12, $fb, $16, $fb, $18, $fb
397de     1A FB 1D FB 
397e2     1F FB 20 FB 
397e6     23 FB 92 FC 
397ea     94 FC 96 FC | 	byte	$1a, $fb, $1d, $fb, $1f, $fb, $20, $fb, $23, $fb, $92, $fc, $94, $fc, $96, $fc
397ee     96 FC 97 FC 
397f2     9A FC 9C FC 
397f6     9E FC 9F FC 
397fa     A1 FC E7 FB | 	byte	$96, $fc, $97, $fc, $9a, $fc, $9c, $fc, $9e, $fc, $9f, $fc, $a1, $fc, $e7, $fb
397fe     5A FB 41 FB 
39802     3E FB 41 FB | 	byte	$5a, $fb, $41, $fb, $3e, $fb, $41, $fb
39806     73 32 00 04 
3980a     00 00 10 00 
3980e     00 00 00 00 
39812     00 00 00 00 | atari2 file "atari2.s2"
39816     43 87 43 87 
3981a     43 87 44 87 
3981e     43 87 44 87 
39822     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
39826     43 87 43 87 
3982a     43 87 44 87 
3982e     43 87 43 87 
39832     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
39836     44 87 43 87 
3983a     44 87 43 87 
3983e     43 87 43 87 
39842     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
39846     43 87 43 87 
3984a     44 87 43 87 
3984e     44 87 44 87 
39852     44 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87, $43, $87
39856     43 87 43 87 
3985a     44 87 43 87 
3985e     43 87 42 87 
39862     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
39866     43 87 43 87 
3986a     43 87 43 87 
3986e     44 87 43 87 
39872     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
39876     44 87 44 87 
3987a     43 87 44 87 
3987e     43 87 44 87 
39882     44 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $43, $87
39886     44 87 43 87 
3988a     44 87 44 87 
3988e     43 87 43 87 
39892     43 87 44 87 | 	byte	$44, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
39896     43 87 44 87 
3989a     44 87 43 87 
3989e     43 87 44 87 
398a2     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
398a6     43 87 43 87 
398aa     43 87 43 87 
398ae     43 87 43 87 
398b2     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87
398b6     42 87 43 87 
398ba     44 87 42 87 
398be     43 87 43 87 
398c2     43 87 43 87 | 	byte	$42, $87, $43, $87, $44, $87, $42, $87, $43, $87, $43, $87, $43, $87, $43, $87
398c6     43 87 44 87 
398ca     44 87 43 87 
398ce     43 87 43 87 
398d2     43 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
398d6     43 87 5C 87 
398da     EE 86 AC 87 
398de     4C 7C A3 78 
398e2     BB 78 BC 78 | 	byte	$43, $87, $5c, $87, $ee, $86, $ac, $87, $4c, $7c, $a3, $78, $bb, $78, $bc, $78
398e6     BC 78 BB 78 
398ea     BD 78 BC 78 
398ee     BB 78 BD 78 
398f2     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bd, $78, $bc, $78, $bb, $78, $bd, $78, $bb, $78, $bc, $78
398f6     BB 78 BB 78 
398fa     BC 78 BC 78 
398fe     BC 78 BB 78 
39902     BC 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
39906     BC 78 BC 78 
3990a     BC 78 BC 78 
3990e     BC 78 BC 78 
39912     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
39916     BB 78 BC 78 
3991a     A0 78 4C 7C 
3991e     11 7A 29 89 
39922     5F 87 44 87 | 	byte	$bb, $78, $bc, $78, $a0, $78, $4c, $7c, $11, $7a, $29, $89, $5f, $87, $44, $87
39926     44 87 43 87 
3992a     44 87 43 87 
3992e     43 87 42 87 
39932     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
39936     43 87 43 87 
3993a     44 87 ED 85 
3993e     71 85 52 79 
39942     43 7A B9 78 | 	byte	$43, $87, $43, $87, $44, $87, $ed, $85, $71, $85, $52, $79, $43, $7a, $b9, $78
39946     BC 78 BC 78 
3994a     BC 78 BC 78 
3994e     BC 78 BC 78 
39952     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
39956     BC 78 BC 78 
3995a     BC 78 A0 78 
3995e     CF 7A B9 81 
39962     9D 80 5F 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $a0, $78, $cf, $7a, $b9, $81, $9d, $80, $5f, $87
39966     44 87 43 87 
3996a     43 87 44 87 
3996e     43 87 44 87 
39972     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
39976     43 87 43 87 
3997a     43 87 43 87 
3997e     44 87 43 87 
39982     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
39986     43 87 43 87 
3998a     44 87 43 87 
3998e     44 87 43 87 
39992     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
39996     44 87 43 87 
3999a     43 87 43 87 
3999e     5A 87 39 81 
399a2     F4 83 52 79 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $5a, $87, $39, $81, $f4, $83, $52, $79
399a6     A5 78 BC 78 
399aa     BB 78 BC 78 
399ae     BB 78 BC 78 
399b2     BC 78 BD 78 | 	byte	$a5, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78
399b6     BC 78 BC 78 
399ba     BC 78 BC 78 
399be     BC 78 8F 79 
399c2     17 77 AC 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $8f, $79, $17, $77, $ac, $87
399c6     09 85 47 87 
399ca     43 87 43 87 
399ce     42 87 42 87 
399d2     43 87 43 87 | 	byte	$09, $85, $47, $87, $43, $87, $43, $87, $42, $87, $42, $87, $43, $87, $43, $87
399d6     43 87 43 87 
399da     43 87 43 87 
399de     43 87 44 87 
399e2     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
399e6     43 87 43 87 
399ea     44 87 43 87 
399ee     42 87 43 87 
399f2     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $42, $87, $43, $87, $43, $87, $43, $87
399f6     44 87 43 87 
399fa     43 87 43 87 
399fe     44 87 44 87 
39a02     FD 85 2F 86 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $fd, $85, $2f, $86
39a06     94 78 55 7A 
39a0a     B9 78 BC 78 
39a0e     BC 78 BC 78 
39a12     BC 78 BB 78 | 	byte	$94, $78, $55, $7a, $b9, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
39a16     BC 78 BB 78 
39a1a     BC 78 BC 78 
39a1e     BC 78 BC 78 
39a22     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
39a26     BB 78 BC 78 
39a2a     BC 78 BC 78 
39a2e     BB 78 BC 78 
39a32     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
39a36     BC 78 BC 78 
39a3a     BD 78 BC 78 
39a3e     BC 78 BB 78 
39a42     BC 78 2F 79 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $2f, $79
39a46     94 78 B3 84 
39a4a     36 84 4A 87 
39a4e     43 87 43 87 
39a52     44 87 43 87 | 	byte	$94, $78, $b3, $84, $36, $84, $4a, $87, $43, $87, $43, $87, $44, $87, $43, $87
39a56     43 87 44 87 
39a5a     43 87 43 87 
39a5e     43 87 43 87 
39a62     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
39a66     43 87 44 87 
39a6a     43 87 44 87 
39a6e     43 87 43 87 
39a72     44 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
39a76     43 87 43 87 
39a7a     43 87 45 87 
39a7e     43 87 43 87 
39a82     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $45, $87, $43, $87, $43, $87, $43, $87, $43, $87
39a86     43 87 44 87 
39a8a     44 87 44 87 
39a8e     43 87 43 87 
39a92     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
39a96     43 87 42 87 
39a9a     43 87 43 87 
39a9e     44 87 43 87 
39aa2     43 87 44 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
39aa6     54 87 3C 82 
39aaa     36 83 52 79 
39aae     C6 78 BC 78 
39ab2     BC 78 BC 78 | 	byte	$54, $87, $3c, $82, $36, $83, $52, $79, $c6, $78, $bc, $78, $bc, $78, $bc, $78
39ab6     BB 78 BB 78 
39aba     BC 78 BC 78 
39abe     BC 78 BC 78 
39ac2     BB 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
39ac6     BD 78 ED 78 
39aca     1B 79 F4 83 
39ace     4D 83 4E 87 
39ad2     42 87 44 87 | 	byte	$bd, $78, $ed, $78, $1b, $79, $f4, $83, $4d, $83, $4e, $87, $42, $87, $44, $87
39ad6     44 87 43 87 
39ada     42 87 44 87 
39ade     43 87 42 87 
39ae2     44 87 43 87 | 	byte	$44, $87, $43, $87, $42, $87, $44, $87, $43, $87, $42, $87, $44, $87, $43, $87
39ae6     43 87 54 87 
39aea     26 82 B3 84 
39aee     D6 77 BB 78 
39af2     BB 78 BC 78 | 	byte	$43, $87, $54, $87, $26, $82, $b3, $84, $d6, $77, $bb, $78, $bb, $78, $bc, $78
39af6     BC 78 BB 78 
39afa     BB 78 BB 78 
39afe     BB 78 BB 78 
39b02     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78
39b06     BC 78 BC 78 
39b0a     26 79 18 75 
39b0e     36 83 1F 84 
39b12     4A 87 43 87 | 	byte	$bc, $78, $bc, $78, $26, $79, $18, $75, $36, $83, $1f, $84, $4a, $87, $43, $87
39b16     43 87 43 87 
39b1a     43 87 43 87 
39b1e     43 87 44 87 
39b22     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
39b26     43 87 44 87 
39b2a     44 87 43 87 
39b2e     43 87 43 87 
39b32     42 87 44 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87, $44, $87
39b36     43 87 43 87 
39b3a     43 87 43 87 
39b3e     44 87 44 87 
39b42     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $44, $87
39b46     44 87 43 87 
39b4a     43 87 43 87 
39b4e     43 87 44 87 
39b52     44 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
39b56     44 87 44 87 
39b5a     44 87 43 87 
39b5e     44 87 43 87 
39b62     43 87 43 87 | 	byte	$44, $87, $44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
39b66     43 87 43 87 
39b6a     43 87 44 87 
39b6e     44 87 43 87 
39b72     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
39b76     43 87 43 87 
39b7a     43 87 43 87 
39b7e     43 87 44 87 
39b82     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
39b86     43 87 44 87 
39b8a     43 87 44 87 
39b8e     19 87 7D 86 
39b92     AC 87 CB 7C | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $19, $87, $7d, $86, $ac, $87, $cb, $7c
39b96     B1 78 BC 78 
39b9a     BC 78 BC 78 
39b9e     BC 78 BC 78 
39ba2     BC 78 BB 78 | 	byte	$b1, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
39ba6     BC 78 BC 78 
39baa     BD 78 BC 78 
39bae     B7 78 3B 7B 
39bb2     CF 7A 6A 88 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $b7, $78, $3b, $7b, $cf, $7a, $6a, $88
39bb6     96 86 44 87 
39bba     43 87 43 87 
39bbe     43 87 43 87 
39bc2     43 87 44 87 | 	byte	$96, $86, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87
39bc6     44 87 44 87 
39bca     43 87 44 87 
39bce     43 87 44 87 
39bd2     44 87 44 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87
39bd6     43 87 44 87 
39bda     43 87 44 87 
39bde     43 87 44 87 
39be2     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
39be6     43 87 44 87 
39bea     43 87 43 87 
39bee     44 87 43 87 
39bf2     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
39bf6     44 87 44 87 
39bfa     43 87 43 87 
39bfe     43 87 44 87 
39c02     43 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
39c06     43 87 43 87 
39c0a     43 87 43 87 
39c0e     44 87 44 87 
39c12     40 87 76 83 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $40, $87, $76, $83
39c16     36 83 CF 7A 
39c1a     AB 78 BB 78 
39c1e     BC 78 BC 78 
39c22     BB 78 BB 78 | 	byte	$36, $83, $cf, $7a, $ab, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78
39c26     BB 78 BC 78 
39c2a     BC 78 BC 78 
39c2e     BC 78 BC 78 
39c32     BC 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
39c36     BC 78 BC 78 
39c3a     BC 78 BB 78 
39c3e     BC 78 BC 78 
39c42     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
39c46     BB 78 BC 78 
39c4a     BB 78 BC 78 
39c4e     BC 78 BD 78 
39c52     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78
39c56     BC 78 BC 78 
39c5a     BC 78 BC 78 
39c5e     BC 78 BD 78 
39c62     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78
39c66     BC 78 BB 78 
39c6a     BC 78 BB 78 
39c6e     BB 78 BC 78 
39c72     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78
39c76     BC 78 BC 78 
39c7a     BC 78 BC 78 
39c7e     BC 78 BB 78 
39c82     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78
39c86     BC 78 BC 78 
39c8a     BC 78 BD 78 
39c8e     BB 78 BC 78 
39c92     BB 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
39c96     BC 78 BC 78 
39c9a     BC 78 BB 78 
39c9e     BC 78 BB 78 
39ca2     BC 78 BD 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
39ca6     BB 78 BC 78 
39caa     BC 78 BC 78 
39cae     BC 78 BB 78 
39cb2     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
39cb6     BC 78 BC 78 
39cba     BC 78 BB 78 
39cbe     BC 78 BB 78 
39cc2     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
39cc6     BC 78 BC 78 
39cca     BC 78 BC 78 
39cce     BB 78 BC 78 
39cd2     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
39cd6     BC 78 9F 78 
39cda     52 79 B3 84 
39cde     2F 86 60 87 
39ce2     44 87 43 87 | 	byte	$bc, $78, $9f, $78, $52, $79, $b3, $84, $2f, $86, $60, $87, $44, $87, $43, $87
39ce6     44 87 43 87 
39cea     43 87 43 87 
39cee     43 87 43 87 
39cf2     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
39cf6     43 87 43 87 
39cfa     43 87 44 87 
39cfe     43 87 43 87 
39d02     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
39d06     43 87 43 87 
39d0a     43 87 43 87 
39d0e     43 87 44 87 
39d12     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
39d16     44 87 44 87 
39d1a     5E 87 BC 80 
39d1e     FB 80 94 78 
39d22     A2 78 BB 78 | 	byte	$44, $87, $44, $87, $5e, $87, $bc, $80, $fb, $80, $94, $78, $a2, $78, $bb, $78
39d26     BD 78 BC 78 
39d2a     BB 78 BC 78 
39d2e     BB 78 BB 78 
39d32     BC 78 BC 78 | 	byte	$bd, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78
39d36     BC 78 BB 78 
39d3a     BB 78 6B 79 
39d3e     D6 77 AC 87 
39d42     C6 84 48 87 | 	byte	$bc, $78, $bb, $78, $bb, $78, $6b, $79, $d6, $77, $ac, $87, $c6, $84, $48, $87
39d46     43 87 44 87 
39d4a     43 87 43 87 
39d4e     44 87 43 87 
39d52     43 87 44 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
39d56     43 87 44 87 
39d5a     43 87 5C 87 
39d5e     E7 80 00 80 
39d62     52 79 A1 78 | 	byte	$43, $87, $44, $87, $43, $87, $5c, $87, $e7, $80, $00, $80, $52, $79, $a1, $78
39d66     BC 78 BD 78 
39d6a     BC 78 BC 78 
39d6e     BC 78 BB 78 
39d72     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
39d76     BC 78 BC 78 
39d7a     BB 78 BC 78 
39d7e     BB 78 BC 78 
39d82     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
39d86     BB 78 BC 78 
39d8a     BC 78 BC 78 
39d8e     BC 78 BC 78 
39d92     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
39d96     BC 78 BC 78 
39d9a     BC 78 BC 78 
39d9e     A0 78 8D 7B 
39da2     11 7A 29 89 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $a0, $78, $8d, $7b, $11, $7a, $29, $89
39da6     60 87 43 87 
39daa     44 87 44 87 
39dae     43 87 43 87 
39db2     43 87 43 87 | 	byte	$60, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87
39db6     44 87 43 87 
39dba     43 87 43 87 
39dbe     44 87 73 86 
39dc2     0E 91 11 7A | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $73, $86, $0e, $91, $11, $7a
39dc6     51 7B B6 78 
39dca     BC 78 BD 78 
39dce     BC 78 BC 78 
39dd2     BB 78 BC 78 | 	byte	$51, $7b, $b6, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
39dd6     BB 78 BC 78 
39dda     BD 78 BB 78 
39dde     BC 78 BB 78 
39de2     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
39de6     BC 78 BC 78 
39dea     BC 78 BC 78 
39dee     BB 78 BC 78 
39df2     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
39df6     BC 78 BB 78 
39dfa     BB 78 BC 78 
39dfe     BC 78 BB 78 
39e02     60 79 51 71 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $60, $79, $51, $71
39e06     22 8C AF 84 
39e0a     48 87 43 87 
39e0e     44 87 43 87 
39e12     44 87 44 87 | 	byte	$22, $8c, $af, $84, $48, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87
39e16     43 87 42 87 
39e1a     43 87 43 87 
39e1e     44 87 43 87 
39e22     43 87 43 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
39e26     43 87 43 87 
39e2a     44 87 44 87 
39e2e     43 87 43 87 
39e32     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
39e36     43 87 43 87 
39e3a     43 87 43 87 
39e3e     44 87 43 87 
39e42     44 87 C8 86 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $c8, $86
39e46     9F 8B D6 77 
39e4a     16 7C B3 78 
39e4e     BC 78 BB 78 
39e52     BB 78 BB 78 | 	byte	$9f, $8b, $d6, $77, $16, $7c, $b3, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
39e56     BB 78 BC 78 
39e5a     BB 78 BC 78 
39e5e     BC 78 BC 78 
39e62     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
39e66     BC 78 BB 78 
39e6a     BB 78 BC 78 
39e6e     BB 78 BC 78 
39e72     BB 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
39e76     BB 78 BB 78 
39e7a     BC 78 BC 78 
39e7e     BC 78 BB 78 
39e82     BC 78 BD 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
39e86     BC 78 BC 78 
39e8a     BC 78 BD 78 
39e8e     BB 78 BC 78 
39e92     BB 78 BA 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $ba, $78
39e96     BC 78 BC 78 
39e9a     BC 78 BB 78 
39e9e     BC 78 BC 78 
39ea2     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
39ea6     A8 78 54 7E 
39eaa     F4 83 17 82 
39eae     50 87 43 87 
39eb2     43 87 43 87 | 	byte	$a8, $78, $54, $7e, $f4, $83, $17, $82, $50, $87, $43, $87, $43, $87, $43, $87
39eb6     44 87 43 87 
39eba     44 87 43 87 
39ebe     43 87 44 87 
39ec2     44 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
39ec6     43 87 28 87 
39eca     20 85 CF 7A 
39ece     70 7D AD 78 
39ed2     BD 78 BC 78 | 	byte	$43, $87, $28, $87, $20, $85, $cf, $7a, $70, $7d, $ad, $78, $bd, $78, $bc, $78
39ed6     BB 78 BC 78 
39eda     BC 78 BC 78 
39ede     BB 78 BB 78 
39ee2     BB 78 BD 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78, $bd, $78
39ee6     BB 78 B2 78 
39eea     9A 7C CF 7A 
39eee     4A 87 0D 87 
39ef2     43 87 43 87 | 	byte	$bb, $78, $b2, $78, $9a, $7c, $cf, $7a, $4a, $87, $0d, $87, $43, $87, $43, $87
39ef6     43 87 44 87 
39efa     43 87 44 87 
39efe     43 87 43 87 
39f02     43 87 42 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87
39f06     44 87 43 87 
39f0a     28 87 51 85 
39f0e     11 7A 1E 7D 
39f12     AF 78 BB 78 | 	byte	$44, $87, $43, $87, $28, $87, $51, $85, $11, $7a, $1e, $7d, $af, $78, $bb, $78
39f16     BC 78 BB 78 
39f1a     BC 78 BC 78 
39f1e     BC 78 BC 78 
39f22     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
39f26     BB 78 BC 78 
39f2a     BB 78 BC 78 
39f2e     BC 78 BC 78 
39f32     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
39f36     BB 78 BC 78 
39f3a     BC 78 BC 78 
39f3e     BD 78 BB 78 
39f42     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bb, $78, $bb, $78
39f46     BC 78 BB 78 
39f4a     BC 78 BC 78 
39f4e     BC 78 BB 78 
39f52     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
39f56     BC 78 BC 78 
39f5a     BC 78 BC 78 
39f5e     BB 78 BC 78 
39f62     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
39f66     BC 78 BD 78 
39f6a     BC 78 BC 78 
39f6e     BC 78 BB 78 
39f72     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
39f76     BC 78 BB 78 
39f7a     BB 78 BC 78 
39f7e     BC 78 BB 78 
39f82     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
39f86     BB 78 BB 78 
39f8a     BB 78 BC 78 
39f8e     B6 78 48 7D 
39f92     78 82 F7 81 | 	byte	$bb, $78, $bb, $78, $bb, $78, $bc, $78, $b6, $78, $48, $7d, $78, $82, $f7, $81
39f96     56 87 43 87 
39f9a     42 87 44 87 
39f9e     44 87 43 87 
39fa2     43 87 43 87 | 	byte	$56, $87, $43, $87, $42, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
39fa6     43 87 44 87 
39faa     43 87 44 87 
39fae     4C 87 7E 83 
39fb2     F4 83 47 78 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $4c, $87, $7e, $83, $f4, $83, $47, $78
39fb6     F7 78 BC 78 
39fba     BC 78 BB 78 
39fbe     BB 78 BC 78 
39fc2     BC 78 BC 78 | 	byte	$f7, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
39fc6     BC 78 BB 78 
39fca     BC 78 BC 78 
39fce     BB 78 BC 78 
39fd2     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
39fd6     BB 78 BC 78 
39fda     BC 78 BC 78 
39fde     BC 78 BB 78 
39fe2     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
39fe6     BC 78 BC 78 
39fea     BC 78 BC 78 
39fee     BC 78 BB 78 
39ff2     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
39ff6     BC 78 BB 78 
39ffa     BB 78 BC 78 
39ffe     BC 78 BB 78 
3a002     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3a006     BC 78 BC 78 
3a00a     BB 78 BC 78 
3a00e     BC 78 BC 78 
3a012     B0 78 C1 7B | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $b0, $78, $c1, $7b
3a016     73 32 00 04 
3a01a     00 00 10 00 
3a01e     00 00 00 00 
3a022     00 00 00 00 | atari12 file "atari12.s2"
3a026     00 6D 00 6D 
3a02a     00 6D 00 6D 
3a02e     00 6D 00 6D 
3a032     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a036     00 6D 00 6D 
3a03a     00 6D 00 6D 
3a03e     00 6D 00 6D 
3a042     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a046     00 6D 00 6D 
3a04a     00 6D 00 6D 
3a04e     00 6D 00 6D 
3a052     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a056     00 6D 00 6D 
3a05a     00 6D 00 6D 
3a05e     00 6D 00 6D 
3a062     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a066     00 6D 00 6D 
3a06a     00 6D 00 6D 
3a06e     00 6D 00 6D 
3a072     00 6D 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6c
3a076     00 6C 00 6C 
3a07a     00 6C 00 6C 
3a07e     00 6C 00 6C 
3a082     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3a086     00 6C 00 6C 
3a08a     00 6C 00 6C 
3a08e     00 6C 00 6C 
3a092     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3a096     00 6C 00 6C 
3a09a     00 6C 00 6C 
3a09e     00 6C 00 6C 
3a0a2     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3a0a6     00 6C 00 6C 
3a0aa     00 6C 00 6C 
3a0ae     00 6C 00 6C 
3a0b2     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3a0b6     00 6C 00 6C 
3a0ba     00 6C 00 6C 
3a0be     00 6C 00 6C 
3a0c2     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3a0c6     00 6C 00 6C 
3a0ca     00 6C 00 6C 
3a0ce     00 6C 00 6C 
3a0d2     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3a0d6     00 6C 00 6C 
3a0da     00 6C 00 6C 
3a0de     00 6C 00 6C 
3a0e2     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3a0e6     00 6C 00 6C 
3a0ea     00 6C 00 6C 
3a0ee     00 6C 00 6C 
3a0f2     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3a0f6     00 6C 00 6C 
3a0fa     00 6C 00 6C 
3a0fe     00 6C 00 6C 
3a102     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3a106     00 6C 00 6C 
3a10a     00 6C 00 6C 
3a10e     00 6C 00 6C 
3a112     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3a116     00 6C 00 6C 
3a11a     00 6C 00 6C 
3a11e     00 6C 00 6C 
3a122     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3a126     00 6C 00 6B 
3a12a     00 6B 00 6B 
3a12e     00 6B 00 6B 
3a132     00 6B 00 6B | 	byte	$00, $6c, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3a136     00 6B 00 6B 
3a13a     00 6B 00 6B 
3a13e     00 6B 00 6B 
3a142     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3a146     00 6B 00 6B 
3a14a     00 6B 00 6B 
3a14e     00 6B 00 6B 
3a152     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3a156     00 6B 00 6B 
3a15a     00 6B 00 6B 
3a15e     00 6B 00 6B 
3a162     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3a166     00 6B 00 6B 
3a16a     00 6B 00 6B 
3a16e     00 6B 00 6B 
3a172     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3a176     00 6B 00 6B 
3a17a     00 6B 00 6B 
3a17e     00 6B 00 6B 
3a182     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3a186     00 6B 00 6B 
3a18a     00 6B 00 6B 
3a18e     00 6B 00 6B 
3a192     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3a196     00 6B 00 6B 
3a19a     00 6B 00 6B 
3a19e     00 6B 00 6B 
3a1a2     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3a1a6     00 6B 00 6B 
3a1aa     00 6B 00 6B 
3a1ae     00 6B 00 6B 
3a1b2     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3a1b6     00 6B 00 6B 
3a1ba     00 6B 00 6B 
3a1be     00 6A 00 9D 
3a1c2     00 9D 00 9E | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6a, $00, $9d, $00, $9d, $00, $9e
3a1c6     00 9E 00 9E 
3a1ca     00 9E 00 9E 
3a1ce     00 9E 00 9E 
3a1d2     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3a1d6     00 9E 00 9E 
3a1da     00 9E 00 9E 
3a1de     00 9E 00 9E 
3a1e2     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3a1e6     00 9E 00 9E 
3a1ea     00 9E 00 9E 
3a1ee     00 9E 00 9E 
3a1f2     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3a1f6     00 9E 00 9E 
3a1fa     00 9E 00 9E 
3a1fe     00 9E 00 9E 
3a202     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3a206     00 9E 00 9E 
3a20a     00 9E 00 9E 
3a20e     00 9E 00 9E 
3a212     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3a216     00 9E 00 9E 
3a21a     00 9E 00 9E 
3a21e     00 9E 00 9E 
3a222     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3a226     00 9E 00 9E 
3a22a     00 9E 00 9E 
3a22e     00 9E 00 9E 
3a232     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3a236     00 9E 00 9E 
3a23a     00 9E 00 9E 
3a23e     00 9E 00 9E 
3a242     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3a246     00 9E 00 9E 
3a24a     00 9E 00 9E 
3a24e     00 9E 00 9E 
3a252     00 9F 00 9F | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9f, $00, $9f
3a256     00 9F 00 9F 
3a25a     00 9F 00 9F 
3a25e     00 9F 00 9F 
3a262     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3a266     00 9F 00 9F 
3a26a     00 9F 00 9F 
3a26e     00 9F 00 9F 
3a272     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3a276     00 9F 00 9F 
3a27a     00 9F 00 9F 
3a27e     00 9F 00 9F 
3a282     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3a286     00 9F 00 9F 
3a28a     00 9F 00 9F 
3a28e     00 9F 00 9F 
3a292     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3a296     00 9F 00 9F 
3a29a     00 9F 00 9F 
3a29e     00 9F 00 9F 
3a2a2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3a2a6     00 9F 00 9F 
3a2aa     00 9F 00 9F 
3a2ae     00 9F 00 9F 
3a2b2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3a2b6     00 9F 00 9F 
3a2ba     00 9F 00 9F 
3a2be     00 9F 00 9F 
3a2c2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3a2c6     00 9F 00 9F 
3a2ca     00 9F 00 9F 
3a2ce     00 9F 00 9F 
3a2d2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3a2d6     00 9F 00 9F 
3a2da     00 9F 00 9F 
3a2de     00 9F 00 9F 
3a2e2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3a2e6     00 9F 00 9F 
3a2ea     00 9F 00 9F 
3a2ee     00 9F 00 9F 
3a2f2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3a2f6     00 9F 00 9F 
3a2fa     00 9F 00 9F 
3a2fe     00 9F 00 9F 
3a302     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3a306     00 9F 00 9F 
3a30a     00 9F 00 9F 
3a30e     00 9F 00 9F 
3a312     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3a316     00 9F 00 9F 
3a31a     00 9F 00 A0 
3a31e     00 A0 00 A0 
3a322     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a326     00 A0 00 A0 
3a32a     00 A0 00 A0 
3a32e     00 A0 00 A0 
3a332     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a336     00 A0 00 A0 
3a33a     00 A0 00 A0 
3a33e     00 A0 00 A0 
3a342     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a346     00 A0 00 A0 
3a34a     00 A0 00 A0 
3a34e     00 A0 00 A0 
3a352     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a356     00 A0 00 A0 
3a35a     00 A0 00 A0 
3a35e     00 A0 00 A0 
3a362     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a366     00 A0 00 A0 
3a36a     00 A0 00 A0 
3a36e     00 A0 00 A0 
3a372     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a376     00 A0 00 A0 
3a37a     00 A0 00 A0 
3a37e     00 A0 00 A0 
3a382     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a386     00 A0 00 A0 
3a38a     00 A0 00 A0 
3a38e     00 A0 00 A0 
3a392     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a396     00 A0 00 A0 
3a39a     00 A0 00 A0 
3a39e     00 A0 00 A0 
3a3a2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a3a6     00 A0 00 A0 
3a3aa     00 A0 00 A0 
3a3ae     00 A0 00 A0 
3a3b2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a3b6     00 A0 00 A0 
3a3ba     00 A0 00 A0 
3a3be     00 A0 00 A0 
3a3c2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a3c6     00 A0 00 A0 
3a3ca     00 A0 00 A0 
3a3ce     00 A0 00 A0 
3a3d2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a3d6     00 A0 00 A0 
3a3da     00 A0 00 A0 
3a3de     00 A0 00 A0 
3a3e2     00 6E 00 6E | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $6e, $00, $6e
3a3e6     00 6D 00 6D 
3a3ea     00 6D 00 6D 
3a3ee     00 6D 00 6D 
3a3f2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a3f6     00 6D 00 6D 
3a3fa     00 6D 00 6D 
3a3fe     00 6D 00 6D 
3a402     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a406     00 6D 00 6D 
3a40a     00 6D 00 6D 
3a40e     00 6D 00 6D 
3a412     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a416     00 6D 00 6D 
3a41a     00 6D 00 6D 
3a41e     00 6D 00 6D 
3a422     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a426     00 6D 00 6D 
3a42a     00 6D 00 6D 
3a42e     00 6D 00 6D 
3a432     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a436     00 6D 00 6D 
3a43a     00 6D 00 6D 
3a43e     00 6D 00 6D 
3a442     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a446     00 6D 00 6D 
3a44a     00 6D 00 6D 
3a44e     00 6D 00 6D 
3a452     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a456     00 6D 00 6D 
3a45a     00 6D 00 6D 
3a45e     00 6D 00 6D 
3a462     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a466     00 6D 00 6D 
3a46a     00 A0 00 A0 
3a46e     00 A0 00 A0 
3a472     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a476     00 A0 00 A0 
3a47a     00 A0 00 A0 
3a47e     00 A0 00 A0 
3a482     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a486     00 A0 00 A0 
3a48a     00 A0 00 A0 
3a48e     00 A0 00 A0 
3a492     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a496     00 A0 00 A0 
3a49a     00 A0 00 A0 
3a49e     00 A0 00 A0 
3a4a2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a4a6     00 A0 00 A0 
3a4aa     00 A0 00 A0 
3a4ae     00 A0 00 A0 
3a4b2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a4b6     00 A0 00 A0 
3a4ba     00 A0 00 A0 
3a4be     00 A0 00 A0 
3a4c2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a4c6     00 A0 00 A0 
3a4ca     00 A0 00 A0 
3a4ce     00 A0 00 A0 
3a4d2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a4d6     00 A0 00 A0 
3a4da     00 A0 00 A0 
3a4de     00 A0 00 A0 
3a4e2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a4e6     00 A0 00 A0 
3a4ea     00 A0 00 A0 
3a4ee     00 A0 00 A0 
3a4f2     00 A1 00 6D | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $6d
3a4f6     00 6D 00 6D 
3a4fa     00 6D 00 6D 
3a4fe     00 6D 00 6D 
3a502     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a506     00 6D 00 6D 
3a50a     00 6D 00 6D 
3a50e     00 6D 00 6D 
3a512     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a516     00 6D 00 6D 
3a51a     00 6D 00 6D 
3a51e     00 6D 00 6D 
3a522     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a526     00 6D 00 6D 
3a52a     00 6D 00 6D 
3a52e     00 6D 00 6D 
3a532     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a536     00 6D 00 6D 
3a53a     00 6D 00 6D 
3a53e     00 6D 00 6D 
3a542     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a546     00 6D 00 6D 
3a54a     00 6D 00 6D 
3a54e     00 6D 00 6D 
3a552     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a556     00 6D 00 6D 
3a55a     00 6D 00 6D 
3a55e     00 6D 00 6D 
3a562     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a566     00 6D 00 6D 
3a56a     00 6D 00 6D 
3a56e     00 6D 00 6D 
3a572     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a576     00 6D 00 6D 
3a57a     00 6C 00 A0 
3a57e     00 9F 00 A0 
3a582     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $a0, $00, $9f, $00, $a0, $00, $a0, $00, $a0
3a586     00 A0 00 A0 
3a58a     00 A0 00 A0 
3a58e     00 A0 00 A0 
3a592     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a596     00 A0 00 A0 
3a59a     00 A0 00 A0 
3a59e     00 A0 00 A0 
3a5a2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a5a6     00 A0 00 A0 
3a5aa     00 A0 00 A0 
3a5ae     00 A0 00 A0 
3a5b2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a5b6     00 A0 00 A0 
3a5ba     00 A0 00 A0 
3a5be     00 A0 00 A0 
3a5c2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a5c6     00 A0 00 A0 
3a5ca     00 A0 00 A0 
3a5ce     00 A0 00 A0 
3a5d2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a5d6     00 A0 00 A0 
3a5da     00 A0 00 A0 
3a5de     00 A0 00 A0 
3a5e2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a5e6     00 A0 00 A0 
3a5ea     00 A0 00 A0 
3a5ee     00 A0 00 A0 
3a5f2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a5f6     00 A0 00 A0 
3a5fa     00 A0 00 A0 
3a5fe     00 A0 00 A0 
3a602     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a606     00 A0 00 A0 
3a60a     00 A0 00 A0 
3a60e     00 A0 00 A0 
3a612     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a616     00 A0 00 A0 
3a61a     00 A0 00 A0 
3a61e     00 A0 00 A0 
3a622     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a626     00 A0 00 A0 
3a62a     00 A0 00 A0 
3a62e     00 A0 00 A0 
3a632     00 A1 00 A1 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $a1
3a636     00 A1 00 A1 
3a63a     00 A1 00 A1 
3a63e     00 A1 00 A1 
3a642     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3a646     00 A1 00 A1 
3a64a     00 A1 00 A1 
3a64e     00 A1 00 A1 
3a652     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3a656     00 A1 00 A1 
3a65a     00 A1 00 A1 
3a65e     00 A1 00 A1 
3a662     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3a666     00 A1 00 A1 
3a66a     00 A1 00 A1 
3a66e     00 A1 00 A1 
3a672     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3a676     00 A1 00 A1 
3a67a     00 A1 00 A1 
3a67e     00 A1 00 A1 
3a682     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3a686     00 A1 00 A1 
3a68a     00 A1 00 A1 
3a68e     00 6E 00 6E 
3a692     00 6E 00 6E | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3a696     00 6E 00 6E 
3a69a     00 6E 00 6E 
3a69e     00 6E 00 6E 
3a6a2     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3a6a6     00 6E 00 6E 
3a6aa     00 6E 00 6E 
3a6ae     00 6E 00 6E 
3a6b2     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3a6b6     00 6E 00 6E 
3a6ba     00 6E 00 6E 
3a6be     00 6E 00 6E 
3a6c2     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3a6c6     00 6E 00 6D 
3a6ca     00 6D 00 6D 
3a6ce     00 6D 00 6D 
3a6d2     00 6D 00 6D | 	byte	$00, $6e, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a6d6     00 6D 00 6D 
3a6da     00 6D 00 6D 
3a6de     00 6D 00 6D 
3a6e2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a6e6     00 6D 00 6D 
3a6ea     00 6D 00 6D 
3a6ee     00 6D 00 6D 
3a6f2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a6f6     00 6D 00 6D 
3a6fa     00 6D 00 6D 
3a6fe     00 6D 00 6D 
3a702     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a706     00 6D 00 6D 
3a70a     00 6D 00 6D 
3a70e     00 6D 00 6D 
3a712     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a716     00 6D 00 6D 
3a71a     00 6D 00 6D 
3a71e     00 6D 00 6D 
3a722     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a726     00 6D 00 6D 
3a72a     00 6D 00 6D 
3a72e     00 6D 00 6D 
3a732     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a736     00 6D 00 6D 
3a73a     00 6D 00 6D 
3a73e     00 6D 00 6D 
3a742     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a746     00 6D 00 6D 
3a74a     00 6D 00 6D 
3a74e     00 6D 00 6D 
3a752     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a756     00 6D 00 6D 
3a75a     00 6D 00 6D 
3a75e     00 6D 00 6D 
3a762     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a766     00 6D 00 6D 
3a76a     00 6D 00 6D 
3a76e     00 6D 00 6D 
3a772     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a776     00 6D 00 6D 
3a77a     00 6C 00 6C 
3a77e     00 6C 00 6C 
3a782     00 6C 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3a786     00 6C 00 6C 
3a78a     00 6C 00 6C 
3a78e     00 6C 00 6C 
3a792     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3a796     00 6C 00 6C 
3a79a     00 6C 00 6C 
3a79e     00 9D 00 9F 
3a7a2     00 9F 00 9F | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $9d, $00, $9f, $00, $9f, $00, $9f
3a7a6     00 9F 00 9F 
3a7aa     00 9F 00 9F 
3a7ae     00 A0 00 A0 
3a7b2     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a7b6     00 A0 00 A0 
3a7ba     00 A0 00 A0 
3a7be     00 A0 00 A0 
3a7c2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a7c6     00 A0 00 A0 
3a7ca     00 A0 00 A0 
3a7ce     00 A0 00 A0 
3a7d2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a7d6     00 A0 00 A0 
3a7da     00 A0 00 A0 
3a7de     00 A0 00 A0 
3a7e2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a7e6     00 A0 00 A0 
3a7ea     00 A0 00 A0 
3a7ee     00 A0 00 A0 
3a7f2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a7f6     00 A0 00 A0 
3a7fa     00 A0 00 A0 
3a7fe     00 A0 00 A0 
3a802     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a806     00 A0 00 A0 
3a80a     00 A0 00 A0 
3a80e     00 A0 00 A0 
3a812     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a816     00 A0 00 A0 
3a81a     00 A0 00 A0 
3a81e     00 A0 00 A0 
3a822     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a826     01 00 00 00 
3a82a     00 00 00 00 
3a82e     00 00 00 00 
3a832     00 00 00 00 | mouse  file "mouse2.def"
3a836     00 00 00 00 
3a83a     00 00 00 00 
3a83e     00 00 00 00 
3a842     00 00 00 00 | 	byte	$00[16]
3a846     01 01 00 00 
3a84a     00 00 00 00 
3a84e     00 00 00 00 
3a852     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a856     00 00 00 00 
3a85a     00 00 00 00 
3a85e     00 00 00 00 
3a862     00 00 00 00 | 	byte	$00[16]
3a866     01 0D 01 00 
3a86a     00 00 00 00 
3a86e     00 00 00 00 
3a872     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a876     00 00 00 00 
3a87a     00 00 00 00 
3a87e     00 00 00 00 
3a882     00 00 00 00 | 	byte	$00[16]
3a886     01 0D 0D 01 
3a88a     00 00 00 00 
3a88e     00 00 00 00 
3a892     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a896     00 00 00 00 
3a89a     00 00 00 00 
3a89e     00 00 00 00 
3a8a2     00 00 00 00 | 	byte	$00[16]
3a8a6     01 0D 0D 0D 
3a8aa     01 00 00 00 
3a8ae     00 00 00 00 
3a8b2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a8b6     00 00 00 00 
3a8ba     00 00 00 00 
3a8be     00 00 00 00 
3a8c2     00 00 00 00 | 	byte	$00[16]
3a8c6     01 0D 0D 0D 
3a8ca     0D 01 00 00 
3a8ce     00 00 00 00 
3a8d2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a8d6     00 00 00 00 
3a8da     00 00 00 00 
3a8de     00 00 00 00 
3a8e2     00 00 00 00 | 	byte	$00[16]
3a8e6     01 0D 0D 0D 
3a8ea     0D 0D 01 00 
3a8ee     00 00 00 00 
3a8f2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a8f6     00 00 00 00 
3a8fa     00 00 00 00 
3a8fe     00 00 00 00 
3a902     00 00 00 00 | 	byte	$00[16]
3a906     01 0D 0D 0D 
3a90a     0D 0D 0D 01 
3a90e     00 00 00 00 
3a912     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
3a916     00 00 00 00 
3a91a     00 00 00 00 
3a91e     00 00 00 00 
3a922     00 00 00 00 | 	byte	$00[16]
3a926     01 0D 0D 0D 
3a92a     0D 0D 0D 0C 
3a92e     01 00 00 00 
3a932     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
3a936     00 00 00 00 
3a93a     00 00 00 00 
3a93e     00 00 00 00 
3a942     00 00 00 00 | 	byte	$00[16]
3a946     01 0D 0D 0D 
3a94a     0D 0D 0D 0D 
3a94e     0C 01 00 00 
3a952     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
3a956     00 00 00 00 
3a95a     00 00 00 00 
3a95e     00 00 00 00 
3a962     00 00 00 00 | 	byte	$00[16]
3a966     01 0D 0D 0D 
3a96a     0D 0D 0D 0D 
3a96e     0D 0C 01 00 
3a972     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
3a976     00 00 00 00 
3a97a     00 00 00 00 
3a97e     00 00 00 00 
3a982     00 00 00 00 | 	byte	$00[16]
3a986     01 0D 0D 0D 
3a98a     0D 0D 0D 0D 
3a98e     0D 0D 0B 01 
3a992     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
3a996     00 00 00 00 
3a99a     00 00 00 00 
3a99e     00 00 00 00 
3a9a2     00 00 00 00 | 	byte	$00[16]
3a9a6     01 0D 0D 0D 
3a9aa     0C 0D 0D 03 
3a9ae     01 01 01 01 
3a9b2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
3a9b6     00 00 00 00 
3a9ba     00 00 00 00 
3a9be     00 00 00 00 
3a9c2     00 00 00 00 | 	byte	$00[16]
3a9c6     01 0D 0D 0C 
3a9ca     01 09 0D 03 
3a9ce     00 00 00 00 
3a9d2     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
3a9d6     00 00 00 00 
3a9da     00 00 00 00 
3a9de     00 00 00 00 
3a9e2     00 00 00 00 | 	byte	$00[16]
3a9e6     01 0D 0C 01 
3a9ea     00 01 0D 0B 
3a9ee     01 00 00 00 
3a9f2     00 00 00 00 | 	byte	$01, $0d, $0c, $01, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
3a9f6     00 00 00 00 
3a9fa     00 00 00 00 
3a9fe     00 00 00 00 
3aa02     00 00 00 00 | 	byte	$00[16]
3aa06     01 0C 01 00 
3aa0a     00 01 0A 0D 
3aa0e     01 00 00 00 
3aa12     00 00 00 00 | 	byte	$01, $0c, $01, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
3aa16     00 00 00 00 
3aa1a     00 00 00 00 
3aa1e     00 00 00 00 
3aa22     00 00 00 00 | 	byte	$00[16]
3aa26     01 01 00 00 
3aa2a     00 00 01 0D 
3aa2e     0B 01 00 00 
3aa32     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
3aa36     00 00 00 00 
3aa3a     00 00 00 00 
3aa3e     00 00 00 00 
3aa42     00 00 00 00 
3aa46     00 00 00 00 
3aa4a     00 00       | 	byte	$00[22]
3aa4c     01 0B 0D 01 
3aa50     00 00 00 00 
3aa54     00 00 00 00 
3aa58     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3aa5c     00 00 00 00 
3aa60     00 00 00 00 
3aa64     00 00 00 00 
3aa68     00 00 00 00 
3aa6c     00          | 	byte	$00[17]
3aa6d     01 01 00 00 
3aa71     00 00 00 00 
3aa75     00 00 00 00 
3aa79     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3aa7d     00 00 00 00 
      ...             
3ac21     00 00 00 00 
3ac25     00          | 	byte	$00[425]
3ac26                 | 
3ac26     00 00       |              	org
3ac28 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
3ac2c 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
3ac30 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
3ac34 003             | 
3ac34 003 00 30 04 F6 |                 mov     psramaddr,#0
3ac38 004             | 
3ac38 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
3ac3c 005 20 00 00 FF 
3ac40 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
3ac44 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
3ac48 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
3ac4c 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
3ac50 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
3ac54 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
3ac58 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
3ac5c 00d             | 
3ac5c 00d 20 00 00 FF 
3ac60 00e 00 30 04 F1 |                 add 	psramaddr,##16384
3ac64 00f E0 03 00 FF 
3ac68 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
3ac6c 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
3ac70 012             | 
3ac70 012             |                 
3ac70 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
3ac74 013             |     
3ac74 013 01 2C 60 FD |                 cogid 	t11				' get id
3ac78 014 00 00 EC FC |                 coginit #0,#0				' start the new program
3ac7c 015 03 2C 60 FD |                 cogstop t11				' stop the loader
3ac80 016             | 
3ac80 016 00 00 00 00 | t11 		long 	0
3ac84 017 00 FF 07 00 | mailbox 	long 	$7FF00
3ac88 018 00 00 00 00 | psramaddr 	long 	0
3ac8c 019 00 00 00 00 | pslockval	long 	0
3ac90 01a 00 00 00 00 | cmd             long    0
3ac94 01b 00 00 00 00 | buf1            long    0
3ac98 01c 00 40 00 00 | buf2            long    16384
3ac9c 01d A0 AC 03 00 | 	long	@@@_dat_ + 12612
3aca0 01e 50 32 20 52 
3aca4 01f 65 74 72 6F 
3aca8 020 6D 61 63 68 
3acac 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
3acb0 022 42 41 53 49 
3acb4 023 43 20 76 65 
3acb8 024 72 73 69 6F 
3acbc 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
3acc0 026 34 39 20 62 
3acc4 027 65 74 61 20 
3acc8 028 31 00 00 00 | 	byte	$34, $39, $20, $62, $65, $74, $61, $20, $31, $00, $00, $00
3accc 029             | 	alignl
3accc 029             | _hg010b_spin2_dat_
3accc 029             | 
3accc 029 00 00 00 00 
3acd0 02a 00 00 00 00 
3acd4 02b 00 00 00 00 
3acd8 02c 00 00 00 00 
3acdc 02d 00 00 00    | vga_font       file "vgafont.def"
3acdf 02d 7E 81 A5 81 
3ace3 02e 81 BD 99 81 
3ace7 02f 81 7E 00 00 
3aceb 030 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
3acef 031 7E FF DB FF 
3acf3 032 FF C3 E7 FF 
3acf7 033 FF 7E 00 00 
3acfb 034 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
3acff 035 00 36 7F 7F 
3ad03 036 7F 7F 3E 1C 
3ad07 037 08 00 00 00 
3ad0b 038 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
3ad0f 039 00 08 1C 3E 
3ad13 03a 7F 3E 1C 08 
3ad17 03b 00 00 00 00 
3ad1b 03c 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
3ad1f 03d 18 3C 3C E7 
3ad23 03e E7 E7 18 18 
3ad27 03f 3C 00 00 00 
3ad2b 040 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3ad2f 041 18 3C 7E FF 
3ad33 042 FF 7E 18 18 
3ad37 043 3C 00 00 00 
3ad3b 044 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3ad3f 045 00 00 00 18 
3ad43 046 3C 3C 18 00 
3ad47 047 00 00 00 00 
3ad4b 048 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
3ad4f 049 FF FF FF E7 
3ad53 04a C3 C3 E7 FF 
3ad57 04b FF FF FF FF 
3ad5b 04c FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
3ad5f 04d 00 00 3C 66 
3ad63 04e 42 42 66 3C 
3ad67 04f 00 00 00 00 
3ad6b 050 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
3ad6f 051 FF FF C3 99 
3ad73 052 BD BD 99 C3 
3ad77 053 FF FF FF FF 
3ad7b 054 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
3ad7f 055 78 70 58 4C 
3ad83 056 1E 33 33 33 
3ad87 057 33 1E 00 00 
3ad8b 058 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
3ad8f 059 3C 66 66 66 
3ad93 05a 66 3C 18 7E 
3ad97 05b 18 18 00 00 
3ad9b 05c 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
3ad9f 05d FC CC FC 0C 
3ada3 05e 0C 0C 0C 0E 
3ada7 05f 0F 07 00 00 
3adab 060 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
3adaf 061 FE C6 FE C6 
3adb3 062 C6 C6 C6 E6 
3adb7 063 E7 67 03 00 
3adbb 064 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
3adbf 065 18 18 DB 3C 
3adc3 066 E7 3C DB 18 
3adc7 067 18 00 00 00 
3adcb 068 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
3adcf 069 03 07 0F 1F 
3add3 06a 7F 1F 0F 07 
3add7 06b 03 01 00 00 
3addb 06c 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
3addf 06d 60 70 78 7C 
3ade3 06e 7F 7C 78 70 
3ade7 06f 60 40 00 00 
3adeb 070 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
3adef 071 18 3C 7E 18 
3adf3 072 18 18 7E 3C 
3adf7 073 18 00 00 00 
3adfb 074 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
3adff 075 66 66 66 66 
3ae03 076 66 66 66    | 	byte	$66[7]
3ae06 077 00 66 66 00 
3ae0a 078 00 00 00 00 
3ae0e 079 00 FE DB DB 
3ae12 07a DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
3ae16 07b D8 D8 D8 00 
3ae1a 07c 00 00 00 3E 
3ae1e 07d 63 06 1C 36 
3ae22 07e 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
3ae26 07f 30 63 3E 00 
3ae2a 080 00 00 00 00 
3ae2e 081 00 00 00 00 
3ae32 082 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
3ae36 083 7F 7F 7F 00 
3ae3a 084 00 00 00 00 
3ae3e 085 00 18 3C 7E 
3ae42 086 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
3ae46 087 3C 18 7E 00 
3ae4a 088 00 00 00 00 
3ae4e 089 00 18 3C 7E 
3ae52 08a 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
3ae56 08b 18 18 18 00 
3ae5a 08c 00 00 00 00 
3ae5e 08d 00 18 18 18 
3ae62 08e 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3ae66 08f 7E 3C 18 00 
3ae6a 090 00 00 00 00 
3ae6e 091 00 00 00 18 
3ae72 092 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
3ae76 093 00 00 00 00 
3ae7a 094 00 00 00 00 
3ae7e 095 00 00 00    | 	byte	$00[11]
3ae81 096 0C 06 7F 06 
3ae85 097 0C 00 00 00 
3ae89 098 00 00 00 00 
3ae8d 099 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ae91 09a 00 03 03 03 
3ae95 09b 7F 00 00 00 
3ae99 09c 00 00 00 00 
3ae9d 09d 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3aea1 09e 14 36 7F 36 
3aea5 09f 14 00 00 00 
3aea9 0a0 00 00 00 00 
3aead 0a1 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
3aeb1 0a2 1C 1C 3E 3E 
3aeb5 0a3 7F 7F 00 00 
3aeb9 0a4 00 00 00 00 
3aebd 0a5 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
3aec1 0a6 7F 3E 3E 1C 
3aec5 0a7 1C 08 00 00 
3aec9 0a8 00 00 00 00 
3aecd 0a9 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3aed1 0aa 00 00 00 00 
3aed5 0ab 00 00 00 00 
3aed9 0ac 00 00 00 00 
3aedd 0ad 00 00       | 	byte	$00[14]
3aedf 0ad 18 3C 3C 3C 
3aee3 0ae 18 18 18 00 
3aee7 0af 18 18 00 00 
3aeeb 0b0 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
3aeef 0b1 66 24 00 00 
3aef3 0b2 00 00 00 00 
3aef7 0b3 00 00 00 00 
3aefb 0b4 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3aeff 0b5 00 36 36 7F 
3af03 0b6 36 36 36 7F 
3af07 0b7 36 36 00 00 
3af0b 0b8 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
3af0f 0b9 3E 63 43 03 
3af13 0ba 3E 60 60 61 
3af17 0bb 63 3E 18 18 
3af1b 0bc 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
3af1f 0bd 00 00 43 63 
3af23 0be 30 18 0C 06 
3af27 0bf 63 61 00 00 
3af2b 0c0 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
3af2f 0c1 1C 36 36 1C 
3af33 0c2 6E 3B 33 33 
3af37 0c3 33 6E 00 00 
3af3b 0c4 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
3af3f 0c5 0C 0C 0C 06 
3af43 0c6 00 00 00 00 
3af47 0c7 00 00 00 00 
3af4b 0c8 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3af4f 0c9 30 18 0C 0C 
3af53 0ca 0C 0C 0C 0C 
3af57 0cb 18 30 00 00 
3af5b 0cc 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
3af5f 0cd 0C 18 30 30 
3af63 0ce 30 30 30 30 
3af67 0cf 18 0C 00 00 
3af6b 0d0 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
3af6f 0d1 00 00 00 66 
3af73 0d2 3C FF 3C 66 
3af77 0d3 00 00 00 00 
3af7b 0d4 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
3af7f 0d5 00 00 00 18 
3af83 0d6 18 7E 18 18 
3af87 0d7 00 00 00 00 
3af8b 0d8 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
3af8f 0d9 00 00 00 00 
3af93 0da 00 00 00 00 | 	byte	$00[8]
3af97 0db 18 18 18 0C 
3af9b 0dc 00 00 00 00 
3af9f 0dd 00 00 00 00 
3afa3 0de 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
3afa7 0df 00 00 00 00 
3afab 0e0 00 00 00 00 
3afaf 0e1 00 00 00 00 
3afb3 0e2 00 00 00 00 | 	byte	$00[16]
3afb7 0e3 18 18 00 00 
3afbb 0e4 00 00 00 00 
3afbf 0e5 00 00 40 60 
3afc3 0e6 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
3afc7 0e7 03 01 00 00 
3afcb 0e8 00 00 00 00 
3afcf 0e9 1C 36 63 63 
3afd3 0ea 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
3afd7 0eb 36 1C 00 00 
3afdb 0ec 00 00 00 00 
3afdf 0ed 18 1C 1E 18 
3afe3 0ee 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
3afe7 0ef 18 7E 00 00 
3afeb 0f0 00 00 00 00 
3afef 0f1 3E 63 60 30 
3aff3 0f2 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
3aff7 0f3 63 7F 00 00 
3affb 0f4 00 00 00 00 
3afff 0f5 3E 63 60 60 
3b003 0f6 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
3b007 0f7 63 3E 00 00 
3b00b 0f8 00 00 00 00 
3b00f 0f9 30 38 3C 36 
3b013 0fa 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
3b017 0fb 30 78 00 00 
3b01b 0fc 00 00 00 00 
3b01f 0fd 7F 03 03 03 
3b023 0fe 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
3b027 0ff 63 3E 00 00 
3b02b 100 00 00 00 00 
3b02f 101 1C 06 03 03 
3b033 102 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
3b037 103 63 3E 00 00 
3b03b 104 00 00 00 00 
3b03f 105 7F 63 60 60 
3b043 106 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
3b047 107 0C 0C 00 00 
3b04b 108 00 00 00 00 
3b04f 109 3E 63 63 63 
3b053 10a 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
3b057 10b 63 3E 00 00 
3b05b 10c 00 00 00 00 
3b05f 10d 3E 63 63 63 
3b063 10e 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
3b067 10f 30 1E 00 00 
3b06b 110 00 00 00 00 
3b06f 111 00 00 00 18 
3b073 112 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
3b077 113 18 18 00 00 
3b07b 114 00 00 00 00 
3b07f 115 00 00 00 18 
3b083 116 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
3b087 117 18 18 0C 00 
3b08b 118 00 00 00 00 
3b08f 119 00 60 30 18 
3b093 11a 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
3b097 11b 30 60 00 00 
3b09b 11c 00 00 00 00 
3b09f 11d 00 00 00 7E 
3b0a3 11e 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
3b0a7 11f 00 00 00 00 
3b0ab 120 00 00 00 00 
3b0af 121 00          | 	byte	$00[9]
3b0b0 122 06 0C 18 30 
3b0b4 123 60 30 18 0C 
3b0b8 124 06 00 00 00 
3b0bc 125 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
3b0c0 126 63 63 30 18 
3b0c4 127 18 18 00 18 
3b0c8 128 18 00 00 00 
3b0cc 129 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
3b0d0 12a 3E 63 63 7B 
3b0d4 12b 7B 7B 3B 03 
3b0d8 12c 3E 00 00 00 
3b0dc 12d 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
3b0e0 12e 1C 36 63 63 
3b0e4 12f 7F 63 63 63 
3b0e8 130 63 00 00 00 
3b0ec 131 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
3b0f0 132 66 66 66 3E 
3b0f4 133 66 66 66 66 
3b0f8 134 3F 00 00 00 
3b0fc 135 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
3b100 136 66 43 03 03 
3b104 137 03 03 43 66 
3b108 138 3C 00 00 00 
3b10c 139 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
3b110 13a 36 66 66 66 
3b114 13b 66 66 66 36 
3b118 13c 1F 00 00 00 
3b11c 13d 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
3b120 13e 66 46 16 1E 
3b124 13f 16 06 46 66 
3b128 140 7F 00 00 00 
3b12c 141 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
3b130 142 66 46 16 1E 
3b134 143 16 06 06 06 
3b138 144 0F 00 00 00 
3b13c 145 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
3b140 146 66 43 03 03 
3b144 147 7B 63 63 66 
3b148 148 5C 00 00 00 
3b14c 149 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
3b150 14a 63 63 63 7F 
3b154 14b 63 63 63 63 
3b158 14c 63 00 00 00 
3b15c 14d 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
3b160 14e 18 18 18 18 
3b164 14f 18 18 18 18 | 	byte	$18[8]
3b168 150 3C 00 00 00 
3b16c 151 00 00 00 78 
3b170 152 30 30 30 30 
3b174 153 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
3b178 154 1E 00 00 00 
3b17c 155 00 00 00 67 
3b180 156 66 66 36 1E 
3b184 157 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
3b188 158 67 00 00 00 
3b18c 159 00 00 00 0F 
3b190 15a 06 06 06 06 
3b194 15b 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
3b198 15c 7F 00 00 00 
3b19c 15d 00 00 00 63 
3b1a0 15e 77 7F 7F 6B 
3b1a4 15f 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
3b1a8 160 63 00 00 00 
3b1ac 161 00 00 00 63 
3b1b0 162 67 6F 7F 7B 
3b1b4 163 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
3b1b8 164 63 00 00 00 
3b1bc 165 00 00 00 3E 
3b1c0 166 63 63 63 63 
3b1c4 167 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
3b1c8 168 3E 00 00 00 
3b1cc 169 00 00 00 3F 
3b1d0 16a 66 66 66 3E 
3b1d4 16b 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
3b1d8 16c 0F 00 00 00 
3b1dc 16d 00 00 00 3E 
3b1e0 16e 63 63 63 63 
3b1e4 16f 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
3b1e8 170 3E 30 70 00 
3b1ec 171 00 00 00 3F 
3b1f0 172 66 66 66 3E 
3b1f4 173 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
3b1f8 174 67 00 00 00 
3b1fc 175 00 00 00 3E 
3b200 176 63 63 06 1C 
3b204 177 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
3b208 178 3E 00 00 00 
3b20c 179 00 00 00 7E 
3b210 17a 7E 5A 18 18 
3b214 17b 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
3b218 17c 3C 00 00 00 
3b21c 17d 00 00 00 63 
3b220 17e 63 63 63 63 
3b224 17f 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
3b228 180 3E 00 00 00 
3b22c 181 00 00 00 63 
3b230 182 63 63 63 63 
3b234 183 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
3b238 184 08 00 00 00 
3b23c 185 00 00 00 63 
3b240 186 63 63 63 6B 
3b244 187 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
3b248 188 36 00 00 00 
3b24c 189 00 00 00 63 
3b250 18a 63 36 3E 1C 
3b254 18b 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
3b258 18c 63 00 00 00 
3b25c 18d 00 00 00 66 
3b260 18e 66 66 66 3C 
3b264 18f 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
3b268 190 3C 00 00 00 
3b26c 191 00 00 00 7F 
3b270 192 63 61 30 18 
3b274 193 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
3b278 194 7F 00 00 00 
3b27c 195 00 00 00 3C 
3b280 196 0C 0C 0C 0C 
3b284 197 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
3b288 198 3C 00 00 00 
3b28c 199 00 00 00 00 
3b290 19a 01 03 07 0E 
3b294 19b 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
3b298 19c 40 00 00 00 
3b29c 19d 00 00 00 3C 
3b2a0 19e 30 30 30 30 
3b2a4 19f 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
3b2a8 1a0 3C 00 00 00 
3b2ac 1a1 1C 36 00 00 
3b2b0 1a2 00 00 00 00 
3b2b4 1a3 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b2b8 1a4 00 00 00 00 
3b2bc 1a5 00 00 00 00 
3b2c0 1a6 00 00 00 00 
3b2c4 1a7 00 00 00 00 
3b2c8 1a8 00          | 	byte	$00[17]
3b2c9 1a8 FF 00 00 0C 
3b2cd 1a9 18 00 00 00 
3b2d1 1aa 00 00 00 00 
3b2d5 1ab 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b2d9 1ac 00 00 00 00 
3b2dd 1ad 00 00 00 00 
3b2e1 1ae 00          | 	byte	$00[9]
3b2e2 1ae 1E 30 3E 33 
3b2e6 1af 33 33 6E 00 
3b2ea 1b0 00 00 00 00 
3b2ee 1b1 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
3b2f2 1b2 1E 36 66 66 
3b2f6 1b3 66 66 3E 00 
3b2fa 1b4 00 00 00 00 
3b2fe 1b5 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b302 1b6 3E 63 03 03 
3b306 1b7 03 63 3E 00 
3b30a 1b8 00 00 00 00 
3b30e 1b9 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
3b312 1ba 3C 36 33 33 
3b316 1bb 33 33 6E 00 
3b31a 1bc 00 00 00 00 
3b31e 1bd 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b322 1be 3E 63 7F 03 
3b326 1bf 03 63 3E 00 
3b32a 1c0 00 00 00 00 
3b32e 1c1 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
3b332 1c2 0C 1E 0C 0C 
3b336 1c3 0C 0C 1E 00 
3b33a 1c4 00 00 00 00 
3b33e 1c5 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b342 1c6 6E 33 33 33 
3b346 1c7 33 33 3E 30 
3b34a 1c8 33 1E 00 00 
3b34e 1c9 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
3b352 1ca 36 6E 66 66 
3b356 1cb 66 66 67 00 
3b35a 1cc 00 00 00 00 
3b35e 1cd 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
3b362 1ce 1C 18 18 18 
3b366 1cf 18 18 3C 00 
3b36a 1d0 00 00 00 00 
3b36e 1d1 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
3b372 1d2 70 60 60 60 
3b376 1d3 60 60 60 66 
3b37a 1d4 66 3C 00 00 
3b37e 1d5 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
3b382 1d6 66 36 1E 1E 
3b386 1d7 36 66 67 00 
3b38a 1d8 00 00 00 00 
3b38e 1d9 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
3b392 1da 18 18 18 18 
3b396 1db 18 18       | 	byte	$18[6]
3b398 1dc 3C 00 00 00 
3b39c 1dd 00 00 00 00 
3b3a0 1de 00 00 37 7F 
3b3a4 1df 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
3b3a8 1e0 63 00 00 00 
3b3ac 1e1 00 00 00 00 
3b3b0 1e2 00 00 3B 66 
3b3b4 1e3 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
3b3b8 1e4 66 00 00 00 
3b3bc 1e5 00 00 00 00 
3b3c0 1e6 00 00 3E 63 
3b3c4 1e7 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
3b3c8 1e8 3E 00 00 00 
3b3cc 1e9 00 00 00 00 
3b3d0 1ea 00 00 3B 66 
3b3d4 1eb 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
3b3d8 1ec 3E 06 06 0F 
3b3dc 1ed 00 00 00 00 
3b3e0 1ee 00 00 6E 33 
3b3e4 1ef 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
3b3e8 1f0 3E 30 30 78 
3b3ec 1f1 00 00 00 00 
3b3f0 1f2 00 00 3B 6E 
3b3f4 1f3 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
3b3f8 1f4 0F 00 00 00 
3b3fc 1f5 00 00 00 00 
3b400 1f6 00 00 3E 63 
3b404 1f7 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
3b408 1f8 3E 00 00 00 
3b40c 1f9 00 00 00 08 
3b410 1fa 0C 0C 3F 0C 
3b414 1fb 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
3b418 1fc 38 00 00 00 
3b41c 1fd 00 00 00 00 
3b420 1fe 00 00 33 33 
3b424 1ff 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
3b428 200 6E 00 00 00 
3b42c 201 00 00 00 00 
3b430 202 00 00 63 63 
3b434 203 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
3b438 204 1C 00 00 00 
3b43c 205 00 00 00 00 
3b440 206 00 00 63 63 
3b444 207 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
3b448 208 36 00 00 00 
3b44c 209 00 00 00 00 
3b450 20a 00 00 63 36 
3b454 20b 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
3b458 20c 63 00 00 00 
3b45c 20d 00 00 00 00 
3b460 20e 00 00 63 63 
3b464 20f 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
3b468 210 7E 60 30 1F 
3b46c 211 00 00 00 00 
3b470 212 00 00 7F 33 
3b474 213 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
3b478 214 7F 00 00 00 
3b47c 215 00 00 00 70 
3b480 216 18 18 18 0E 
3b484 217 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
3b488 218 70 00 00 00 
3b48c 219 00 00 00 18 
3b490 21a 18 18 18 18 
3b494 21b 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
3b498 21c 18 00 00 00 
3b49c 21d 00 00 00 0E 
3b4a0 21e 18 18 18 70 
3b4a4 21f 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
3b4a8 220 0E 00 00 00 
3b4ac 221 6E 3B 00 00 
3b4b0 222 00 00 00 00 
3b4b4 223 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b4b8 224 00 00 00 00 
3b4bc 225 00 00 00 00 
3b4c0 226 00 00       | 	byte	$00[10]
3b4c2 226 08 1C 36 63 
3b4c6 227 63 63 7F 00 
3b4ca 228 00 00 00 00 
3b4ce 229 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
3b4d2 22a 03 03 03 03 
3b4d6 22b 43 66 3C 18 
3b4da 22c 30 1E 00 00 
3b4de 22d 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
3b4e2 22e 33 33 33 33 
3b4e6 22f 33 33       | 	byte	$33[6]
3b4e8 230 6E 00 00 00 
3b4ec 231 00 00 60 30 
3b4f0 232 18 00 3E 63 
3b4f4 233 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
3b4f8 234 3E 00 00 00 
3b4fc 235 00 00 08 1C 
3b500 236 36 00 1E 30 
3b504 237 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
3b508 238 6E 00 00 00 
3b50c 239 00 00 00 00 
3b510 23a 33 00 1E 30 
3b514 23b 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
3b518 23c 6E 00 00 00 
3b51c 23d 00 00 1C 36 
3b520 23e 1C 00 33 33 
3b524 23f 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
3b528 240 6E 00 00 00 
3b52c 241 00 00 60 30 
3b530 242 18 00 3E 63 
3b534 243 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
3b538 244 3E 00 00 00 
3b53c 245 00 00 00 00 
3b540 246 00 00 3E 63 
3b544 247 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
3b548 248 3E 18 30 1E 
3b54c 249 00 00 00 1C 
3b550 24a 58 78 38 18 
3b554 24b 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
3b558 24c 3C 00 00 00 
3b55c 24d 00 00 00 00 
3b560 24e 63 00 3E 63 
3b564 24f 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
3b568 250 3E 00 00 00 
3b56c 251 66 33 00 3E 
3b570 252 63 63 63 63 
3b574 253 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
3b578 254 3E 00 00 00 
3b57c 255 00 00 CC 66 
3b580 256 33 00 3E 63 
3b584 257 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
3b588 258 3E 00 00 00 
3b58c 259 00 00 18 3C 
3b590 25a 66 00 1C 18 
3b594 25b 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
3b598 25c 3C 00 00 00 
3b59c 25d 30 18 00 7F 
3b5a0 25e 63 61 30 18 
3b5a4 25f 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
3b5a8 260 7F 00 00 00 
3b5ac 261 00 63 00 08 
3b5b0 262 1C 36 63 63 
3b5b4 263 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
3b5b8 264 63 00 00 00 
3b5bc 265 30 18 00 3C 
3b5c0 266 66 43 03 03 
3b5c4 267 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
3b5c8 268 3C 00 00 00 
3b5cc 269 30 18 00 7F 
3b5d0 26a 66 46 16 1E 
3b5d4 26b 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
3b5d8 26c 7F 00 00 00 
3b5dc 26d 0C 06 00 0F 
3b5e0 26e 06 06 06 06 
3b5e4 26f 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
3b5e8 270 7F 00 00 00 
3b5ec 271 30 18 00 1C 
3b5f0 272 18 18 18 18 
3b5f4 273 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
3b5f8 274 3C 00 00 00 
3b5fc 275 00 00 08 1C 
3b600 276 36 00 3E 63 
3b604 277 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
3b608 278 3E 00 00 00 
3b60c 279 00 00 00 00 
3b610 27a 63 00 3E 63 
3b614 27b 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
3b618 27c 3E 00 00 00 
3b61c 27d 00 00 00 6F 
3b620 27e 46 26 06 06 
3b624 27f 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
3b628 280 7F 00 00 00 
3b62c 281 00 00 00 6E 
3b630 282 4C 2C 0C 0C 
3b634 283 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
3b638 284 1E 00 00 00 
3b63c 285 30 18 00 3E 
3b640 286 63 63 06 1C 
3b644 287 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
3b648 288 3E 00 00 00 
3b64c 289 00 00 60 30 
3b650 28a 18 00 3E 63 
3b654 28b 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
3b658 28c 3E 00 00 00 
3b65c 28d 00 63 00 3E 
3b660 28e 63 63 63 63 
3b664 28f 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
3b668 290 3E 00 00 00 
3b66c 291 00 63 00 63 
3b670 292 63 63 63 63 
3b674 293 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
3b678 294 3E 00 00 00 
3b67c 295 6C 38 00 7E 
3b680 296 7E 5A 18 18 
3b684 297 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
3b688 298 3C 00 00 00 
3b68c 299 00 00 60 48 
3b690 29a 2C 0C 3F 0C 
3b694 29b 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
3b698 29c 38 00 00 00 
3b69c 29d 00 00 00 0F 
3b6a0 29e 26 36 1E 0E 
3b6a4 29f 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
3b6a8 2a0 7F 00 00 00 
3b6ac 2a1 00 00 00 00 
3b6b0 2a2 00 63 36 1C 
3b6b4 2a3 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
3b6b8 2a4 00 00 00 00 
3b6bc 2a5 00 00       | 	byte	$00[6]
3b6be 2a5 36 1C 08 00 
3b6c2 2a6 3E 63 03 03 
3b6c6 2a7 03 63 3E 00 
3b6ca 2a8 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
3b6ce 2a9 30 18 0C 00 
3b6d2 2aa 1E 30 3E 33 
3b6d6 2ab 33 33 6E 00 
3b6da 2ac 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
3b6de 2ad 60 30 18 00 
3b6e2 2ae 1C 18 18 18 
3b6e6 2af 18 18 3C 00 
3b6ea 2b0 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
3b6ee 2b1 60 30 18 00 
3b6f2 2b2 3E 63 63 63 
3b6f6 2b3 63 63 3E 00 
3b6fa 2b4 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
3b6fe 2b5 30 18 0C 00 
3b702 2b6 33 33 33 33 
3b706 2b7 33 33 6E 00 
3b70a 2b8 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
3b70e 2b9 00 08 1C 36 
3b712 2ba 63 63 7F 63 
3b716 2bb 63 63 63 18 
3b71a 2bc 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
3b71e 2bd 00 00 00 00 
3b722 2be 1E 30 3E 33 
3b726 2bf 33 33 6E 18 
3b72a 2c0 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
3b72e 2c1 00 7F 63 61 
3b732 2c2 30 18 0C 06 
3b736 2c3 43 63 7F 00 
3b73a 2c4 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
3b73e 2c5 36 1C 08 00 
3b742 2c6 7F 33 18 0C 
3b746 2c7 06 63 7F 00 
3b74a 2c8 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
3b74e 2c9 00 7F 66 46 
3b752 2ca 16 1E 16 06 
3b756 2cb 46 66 7F 18 
3b75a 2cc 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
3b75e 2cd 00 00 00 00 
3b762 2ce 3E 63 7F 03 
3b766 2cf 03 63 3E 18 
3b76a 2d0 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
3b76e 2d1 00 3C 66 03 
3b772 2d2 1F 03 0F 03 
3b776 2d3 03 66 3C 00 
3b77a 2d4 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
3b77e 2d5 60 30 18 00 
3b782 2d6 7F 33 18 0C 
3b786 2d7 06 63 7F 00 
3b78a 2d8 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
3b78e 2d9 00 3C 66 43 
3b792 2da 03 03 03 03 
3b796 2db 43 66 3C 00 
3b79a 2dc 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
3b79e 2dd 00 00 00 00 
3b7a2 2de 3E 63 06 1C 
3b7a6 2df 30 63 3E 18 
3b7aa 2e0 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
3b7ae 2e1 00 00 00 00 
3b7b2 2e2 00 00       | 	byte	$00[6]
3b7b4 2e3 6C 36 1B 36 
3b7b8 2e4 6C 00 00 00 
3b7bc 2e5 00 00 00 00 
3b7c0 2e6 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b7c4 2e7 1B 36 6C 36 
3b7c8 2e8 1B 00 00 00 
3b7cc 2e9 88 22 88 22 
3b7d0 2ea 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
3b7d4 2eb 88 22 88 22 
3b7d8 2ec 88 22 88 22 
3b7dc 2ed AA 55 AA 55 
3b7e0 2ee AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
3b7e4 2ef AA 55 AA 55 
3b7e8 2f0 AA 55 AA 55 
3b7ec 2f1 BB EE BB EE 
3b7f0 2f2 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
3b7f4 2f3 BB EE BB EE 
3b7f8 2f4 BB EE BB EE 
3b7fc 2f5 18 18 18 18 
3b800 2f6 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
3b804 2f7 18 18 18 18 
3b808 2f8 18 18 18 18 
3b80c 2f9 18 18 18 18 
3b810 2fa 18 18 18    | 	byte	$18[15]
3b813 2fa 1F 18 18 18 
3b817 2fb 18 18 18 18 
3b81b 2fc 18 30 18 00 
3b81f 2fd 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
3b823 2fe 63 7F 63 63 
3b827 2ff 63 63 00 00 
3b82b 300 00 1C 36 00 
3b82f 301 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
3b833 302 63 7F 63 63 
3b837 303 63 63 00 00 
3b83b 304 00 36 1C 00 
3b83f 305 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
3b843 306 1E 16 06 46 
3b847 307 66 7F 00 00 
3b84b 308 00 00 00 00 
3b84f 309 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
3b853 30a 1C 30 60 63 
3b857 30b 63 3E 18 30 
3b85b 30c 1E 6C 6C 6C 
3b85f 30d 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
3b863 30e 6F 6C 6C 6C 
3b867 30f 6C 6C 6C 6C 
3b86b 310 6C 6C 6C 6C 
3b86f 311 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3b873 312 6C 6C 6C 6C 
3b877 313 6C 6C 6C 6C 
3b87b 314 6C          | 	byte	$6c[9]
3b87c 315 00 00 00 00 
3b880 316 00          | 	byte	$00[5]
3b881 316 7F 60 6F 6C 
3b885 317 6C 6C 6C 6C 
3b889 318 6C 6C 6C 6C 
3b88d 319 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3b891 31a 6F 60 7F 00 
3b895 31b 00 00 00 00 
3b899 31c 00 00 00 18 
3b89d 31d 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
3b8a1 31e 61 30 18 0C 
3b8a5 31f 06 43 63 7F 
3b8a9 320 00 00 00 00 
3b8ad 321 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
3b8b1 322 00 7F 33 18 
3b8b5 323 0C 06 63 7F 
3b8b9 324 00 00 00 00 
3b8bd 325 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
3b8c1 326 00 00 1F 18 
3b8c5 327 18 18 18 18 
3b8c9 328 18 18 18 18 
3b8cd 329 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3b8d1 32a 18 18 F8 00 
3b8d5 32b 00 00 00 00 
3b8d9 32c 00 00 00 18 
3b8dd 32d 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
3b8e1 32e 18 18 FF 00 
3b8e5 32f 00 00 00 00 
3b8e9 330 00 00 00 00 
3b8ed 331 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b8f1 332 00 00 FF 18 
3b8f5 333 18 18 18 18 
3b8f9 334 18 18 18 18 
3b8fd 335 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3b901 336 18 18 F8 18 
3b905 337 18 18 18 18 
3b909 338 18 18 18 00 
3b90d 339 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
3b911 33a 00 00 FF 00 
3b915 33b 00 00 00 00 
3b919 33c 00 00 00 18 
3b91d 33d 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
3b921 33e 18 18 FF 18 
3b925 33f 18 18 18 18 
3b929 340 18 18 18 63 
3b92d 341 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
3b931 342 36 63 63 7F 
3b935 343 63 63 63 63 
3b939 344 00 00 00 00 
3b93d 345 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
3b941 346 00 1E 30 3E 
3b945 347 33 33 33 6E 
3b949 348 00 00 00 6C 
3b94d 349 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
3b951 34a EC 0C FC 00 
3b955 34b 00 00 00 00 
3b959 34c 00 00 00 00 
3b95d 34d 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b961 34e FC 0C EC 6C 
3b965 34f 6C 6C 6C 6C 
3b969 350 6C 6C 6C 6C 
3b96d 351 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3b971 352 EF 00 FF 00 
3b975 353 00 00 00 00 
3b979 354 00 00 00 00 
3b97d 355 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b981 356 FF 00 EF 6C 
3b985 357 6C 6C 6C 6C 
3b989 358 6C 6C 6C 6C 
3b98d 359 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3b991 35a EC 0C EC 6C 
3b995 35b 6C 6C 6C 6C 
3b999 35c 6C 6C 6C 00 
3b99d 35d 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
3b9a1 35e FF 00 FF 00 
3b9a5 35f 00 00 00 00 
3b9a9 360 00 00 00 6C 
3b9ad 361 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
3b9b1 362 EF 00 EF 6C 
3b9b5 363 6C 6C 6C 6C 
3b9b9 364 6C 6C 6C 00 
3b9bd 365 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
3b9c1 366 63 3E 63 63 
3b9c5 367 63 63 3E 63 
3b9c9 368 00 00 00 00 
3b9cd 369 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
3b9d1 36a 30 3C 36 33 
3b9d5 36b 33 33 33 6E 
3b9d9 36c 00 00 00 00 
3b9dd 36d 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
3b9e1 36e 66 66 6F 66 
3b9e5 36f 66 66 36 1F 
3b9e9 370 00 00 00 36 
3b9ed 371 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
3b9f1 372 66 66 66 66 
3b9f5 373 66 66       | 	byte	$66[6]
3b9f7 373 36 1F 00 00 
3b9fb 374 00 00 63 00 
3b9ff 375 7F 66 46 16 
3ba03 376 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
3ba07 377 66 7F 00 00 
3ba0b 378 00 6C 38 00 
3ba0f 379 38 30 30 3C 
3ba13 37a 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
3ba17 37b 33 6E 00 00 
3ba1b 37c 00 36 1C 00 
3ba1f 37d 63 67 6F 7F 
3ba23 37e 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
3ba27 37f 63 63 00 00 
3ba2b 380 00 30 18 00 
3ba2f 381 3C 18 18 18 
3ba33 382 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
3ba37 383 18 3C 00 00 
3ba3b 384 00 3C 66 00 
3ba3f 385 3C 18 18 18 
3ba43 386 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
3ba47 387 18 3C 00 00 
3ba4b 388 00 00 00 36 
3ba4f 389 1C 08 00 3E 
3ba53 38a 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
3ba57 38b 63 3E 00 00 
3ba5b 38c 00 18 18 18 
3ba5f 38d 18 18 18 18 
3ba63 38e 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
3ba67 38f 00 00 00 00 
3ba6b 390 00 00 00 00 
3ba6f 391 00 00 00 00 | 	byte	$00[12]
3ba73 392 F8 18 18 18 
3ba77 393 18 18 18 18 
3ba7b 394 18 FF FF FF 
3ba7f 395 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
3ba83 396 FF FF FF FF 
3ba87 397 FF FF FF FF 
3ba8b 398 FF          | 	byte	$ff[9]
3ba8c 399 00 00 00 00 
3ba90 39a 00 00 00    | 	byte	$00[7]
3ba93 39a FF FF FF FF 
3ba97 39b FF FF FF FF 
3ba9b 39c FF          | 	byte	$ff[9]
3ba9c 39d 00 00 00 7E 
3baa0 39e 7E 5A 18 18 
3baa4 39f 18 18 18 18 
3baa8 3a0 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
3baac 3a1 1C 36 1C 63 
3bab0 3a2 63 63 63 63 
3bab4 3a3 63 63 63 63 
3bab8 3a4 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3babc 3a5 FF FF FF FF 
3bac0 3a6 FF FF FF    | 	byte	$ff[7]
3bac3 3a6 00 00 00 00 
3bac7 3a7 00 00 00 00 
3bacb 3a8 00          | 	byte	$00[9]
3bacc 3a9 30 18 00 3E 
3bad0 3aa 63 63 63 63 
3bad4 3ab 63 63 63 63 
3bad8 3ac 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3badc 3ad 00 00 00 1E 
3bae0 3ae 33 33 33 1B 
3bae4 3af 33 63 63 63 
3bae8 3b0 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
3baec 3b1 1C 36 00 3E 
3baf0 3b2 63 63 63 63 
3baf4 3b3 63 63 63 63 
3baf8 3b4 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3bafc 3b5 30 18 00 63 
3bb00 3b6 67 6F 7F 7B 
3bb04 3b7 73 63 63 63 
3bb08 3b8 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
3bb0c 3b9 00 00 60 30 
3bb10 3ba 18 00 3B 66 
3bb14 3bb 66 66 66 66 
3bb18 3bc 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
3bb1c 3bd 00 00 36 1C 
3bb20 3be 08 00 3B 66 
3bb24 3bf 66 66 66 66 
3bb28 3c0 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
3bb2c 3c1 36 1C 00 3E 
3bb30 3c2 63 63 06 1C 
3bb34 3c3 30 60 63 63 
3bb38 3c4 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
3bb3c 3c5 00 00 36 1C 
3bb40 3c6 08 00 3E 63 
3bb44 3c7 06 1C 30 63 
3bb48 3c8 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
3bb4c 3c9 30 18 00 3F 
3bb50 3ca 66 66 66 3E 
3bb54 3cb 36 66 66 66 
3bb58 3cc 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
3bb5c 3cd 30 18 00 63 
3bb60 3ce 63 63 63 63 
3bb64 3cf 63 63 63 63 
3bb68 3d0 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3bb6c 3d1 00 00 60 30 
3bb70 3d2 18 00 3B 6E 
3bb74 3d3 66 06 06 06 
3bb78 3d4 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
3bb7c 3d5 66 33 00 63 
3bb80 3d6 63 63 63 63 
3bb84 3d7 63 63 63 63 
3bb88 3d8 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3bb8c 3d9 00 00 60 30 
3bb90 3da 18 00 63 63 
3bb94 3db 63 63 63 63 
3bb98 3dc 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
3bb9c 3dd 30 18 00 66 
3bba0 3de 66 66 66 3C 
3bba4 3df 18 18 18 18 
3bba8 3e0 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
3bbac 3e1 00 00 00 08 
3bbb0 3e2 0C 0C 3F 0C 
3bbb4 3e3 0C 0C 0C 6C 
3bbb8 3e4 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
3bbbc 3e5 30 18 00 00 
3bbc0 3e6 00 00 00 00 
3bbc4 3e7 00 00 00 00 
3bbc8 3e8 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3bbcc 3e9 00 00 00 00 
3bbd0 3ea 00 00 00 00 | 	byte	$00[8]
3bbd4 3eb 7F 00 00 00 
3bbd8 3ec 00 00 00 00 
3bbdc 3ed 66 33 00 00 
3bbe0 3ee 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
3bbe4 3ef 00 00 00 00 
3bbe8 3f0 00 00 00 00 
3bbec 3f1 00 00 00 00 
3bbf0 3f2 00 00 00 00 
3bbf4 3f3 00 00 00 00 
3bbf8 3f4 00          | 	byte	$00[21]
3bbf9 3f4 0C 06 3C 36 
3bbfd 3f5 1C 00 00 00 
3bc01 3f6 00 00 00 00 
3bc05 3f7 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3bc09 3f8 00 00 00 63 
3bc0d 3f9 3E 00 00 00 
3bc11 3fa 00 00 00 00 
3bc15 3fb 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3bc19 3fc 00 00 00 00 
3bc1d 3fd 3E 63 06 1C 
3bc21 3fe 36 63 63 36 
3bc25 3ff 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
3bc29 400 00 00 00 00 
3bc2d 401 00 00 00 00 | 	byte	$00[8]
3bc31 402 18 00 7E 00 
3bc35 403 18 00 00 00 
3bc39 404 00 00 00 00 
3bc3d 405 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3bc41 406 00 00 00 00 
3bc45 407 00 00 00 00 | 	byte	$00[8]
3bc49 408 18 30 1E 00 
3bc4d 409 00 00 1C 36 
3bc51 40a 36 1C 00 00 
3bc55 40b 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
3bc59 40c 00 00 00 00 
3bc5d 40d 63 00 00 00 
3bc61 40e 00 00 00 00 
3bc65 40f 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3bc69 410 00 00 00 18 
3bc6d 411 18 00 00 00 
3bc71 412 00 00 00 00 
3bc75 413 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3bc79 414 00 00 00 00 
3bc7d 415 00          | 	byte	$00[5]
3bc7e 415 CC 66 33 00 
3bc82 416 33 33 33 33 
3bc86 417 33 33 6E 00 
3bc8a 418 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
3bc8e 419 00 3F 66 66 
3bc92 41a 66 3E 36 66 
3bc96 41b 66 66 6F 00 
3bc9a 41c 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
3bc9e 41d 36 1C 08 00 
3bca2 41e 3B 6E 66 06 
3bca6 41f 06 06 0F 00 
3bcaa 420 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
3bcae 421 00 00 00 7E 
3bcb2 422 7E 7E 7E 7E 
3bcb6 423 7E 7E 00 00 
3bcba 424 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
3bcbe 425 00 00 00 00 
3bcc2 426 00 00 00 00 
3bcc6 427 00 00 00 00 
3bcca 428 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3bccc 429             | 'vga_font       file "vgafont.def"
3bccc 429 00 00 00 00 
      ...             
3bcfc 435 00 00 00 00 
3bd00 436 00 00 00    | st_font        file "st4font.def"
3bd03 436 FF FF 00 00 
3bd07 437 00 00 00 00 
3bd0b 438 00 18 18 18 
3bd0f 439 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3bd13 43a 18 18 18 18 
3bd17 43b 18 18 18 18 
3bd1b 43c 18          | 	byte	$18[9]
3bd1c 43d 00 00 00 00 
3bd20 43e 00 00 00    | 	byte	$00[7]
3bd23 43e FF FF 18 18 
3bd27 43f 18 18 18 18 
3bd2b 440 18 18 18 18 
3bd2f 441 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3bd33 442 FF FF 00 00 
3bd37 443 00 00 00 00 
3bd3b 444 00 18 18 18 
3bd3f 445 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3bd43 446 1F 1F 18 18 
3bd47 447 18 18 18 18 
3bd4b 448 18 18 18 18 
3bd4f 449 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3bd53 44a F8 F8 18 18 
3bd57 44b 18 18 18 18 
3bd5b 44c 18 00 00 00 
3bd5f 44d 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3bd63 44e 1F 1F 18 18 
3bd67 44f 18 18 18 18 
3bd6b 450 18 00 00 00 
3bd6f 451 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3bd73 452 F8 F8 18 18 
3bd77 453 18 18 18 18 
3bd7b 454 18 18 18 18 
3bd7f 455 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3bd83 456 1F 1F 00 00 
3bd87 457 00 00 00 00 
3bd8b 458 00 18 18 18 
3bd8f 459 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3bd93 45a F8 F8 00 00 
3bd97 45b 00 00 00 00 
3bd9b 45c 00 18 18 18 
3bd9f 45d 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3bda3 45e FF FF 18 18 
3bda7 45f 18 18 18 18 
3bdab 460 18 00 00 18 
3bdaf 461 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
3bdb3 462 66 7E 7E 66 
3bdb7 463 66 66 66 30 
3bdbb 464 18 00 00 7E 
3bdbf 465 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
3bdc3 466 3E 06 06 06 
3bdc7 467 06 7E 7E 18 
3bdcb 468 0C 30 18 3C 
3bdcf 469 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
3bdd3 46a 06 06 06 66 
3bdd7 46b 66 7E 3C 00 
3bddb 46c 00 30 18 66 
3bddf 46d 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
3bde3 46e 7E 7E 76 76 
3bde7 46f 66 66 66 00 
3bdeb 470 00 30 18 7C 
3bdef 471 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
3bdf3 472 1C 38 70 60 
3bdf7 473 60 7E 3E 00 
3bdfb 474 00 30 18 7E 
3bdff 475 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
3be03 476 18 0C 0C 06 
3be07 477 06 7E 7E 00 
3be0b 478 00 18 18 00 
3be0f 479 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
3be13 47a 18 18 0C 0C 
3be17 47b 06 7E 7E 00 
3be1b 47c 00 30 18 3C 
3be1f 47d 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
3be23 47e 66 66 66 66 
3be27 47f 66          | 	byte	$66[5]
3be28 480 7E 3C 00 00 
3be2c 481 00 00 06 06 
3be30 482 06 06 16 1E 
3be34 483 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
3be38 484 7E 7E 00 00 
3be3c 485 00 00 00 00 
3be40 486 00 3C 7C 60 
3be44 487 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
3be48 488 7E 7C 30 18 
3be4c 489 00 00 00 00 
3be50 48a 00 3C 7E 66 
3be54 48b 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
3be58 48c 7E 7C 18 0C 
3be5c 48d 00 00 30 18 
3be60 48e 00 3C 3E 06 
3be64 48f 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
3be68 490 7E 7C 00 00 
3be6c 491 00 00 30 18 
3be70 492 00 3E 7E 66 
3be74 493 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
3be78 494 66 66 00 00 
3be7c 495 00 00 30 18 
3be80 496 00 7C 7E 06 
3be84 497 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
3be88 498 7E 3E 00 00 
3be8c 499 00 00 30 18 
3be90 49a 00 7E 7E 30 
3be94 49b 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
3be98 49c 7E 7E 00 00 
3be9c 49d 00 00 18 18 
3bea0 49e 00 7E 7E 30 
3bea4 49f 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
3bea8 4a0 7E 7E 00 00 
3beac 4a1 00 00 30 18 
3beb0 4a2 00 3C 7E 66 
3beb4 4a3 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
3beb8 4a4 7E 3C 00 00 
3bebc 4a5 00 00 1C 1C 
3bec0 4a6 18 18 38 3C 
3bec4 4a7 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
3bec8 4a8 3C 3C 00 00 
3becc 4a9 00 00 00 00 
3bed0 4aa 00 00 00 00 
3bed4 4ab 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3bed8 4ac 00 00 00 00 
3bedc 4ad 00 00       | 	byte	$00[6]
3bede 4ad 18 18 18 18 
3bee2 4ae 18 18 18 18 | 	byte	$18[8]
3bee6 4af 00 00 18 18 
3beea 4b0 00 00 00 00 
3beee 4b1 66 66 66 66 
3bef2 4b2 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
3bef6 4b3 00 00 00 00 
3befa 4b4 00 00 00 00 
3befe 4b5 00          | 	byte	$00[9]
3beff 4b5 66 66 FF FF 
3bf03 4b6 66 66 FF FF 
3bf07 4b7 66 66 00 00 
3bf0b 4b8 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
3bf0f 4b9 7C 7E 06 06 
3bf13 4ba 3E 7C 60 60 
3bf17 4bb 7E 3E 18 18 
3bf1b 4bc 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
3bf1f 4bd 66 30 30 18 
3bf23 4be 18 0C 0C 66 
3bf27 4bf 66 00 00 00 
3bf2b 4c0 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
3bf2f 4c1 66 66 3C 1C 
3bf33 4c2 1C FC FE 66 
3bf37 4c3 66 FE FC 00 
3bf3b 4c4 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
3bf3f 4c5 18 18 18 18 
3bf43 4c6 00 00 00 00 
3bf47 4c7 00 00 00 00 
3bf4b 4c8 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
3bf4f 4c9 18 1C 0C 0C 
3bf53 4ca 0C 0C 0C 0C 
3bf57 4cb 1C 18 30 00 
3bf5b 4cc 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
3bf5f 4cd 18 38 30 30 
3bf63 4ce 30 30 30 30 
3bf67 4cf 38 18 0C 00 
3bf6b 4d0 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
3bf6f 4d1 66 66 3C 3C 
3bf73 4d2 FF FF 3C 3C 
3bf77 4d3 66 66 00 00 
3bf7b 4d4 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
3bf7f 4d5 00 18 18 18 
3bf83 4d6 7E 7E 18 18 
3bf87 4d7 18 00 00 00 
3bf8b 4d8 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3bf8f 4d9 00 00 00 00 
3bf93 4da 00 00       | 	byte	$00[6]
3bf95 4db 18 18 18 18 
3bf99 4dc 18          | 	byte	$18[5]
3bf9a 4dc 0C 04 00 00 
3bf9e 4dd 00 00 00 00 
3bfa2 4de 7E 7E 00 00 
3bfa6 4df 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
3bfaa 4e0 00 00 00 00 
3bfae 4e1 00 00 00 00 
3bfb2 4e2 00 00 00 00 
3bfb6 4e3 00          | 	byte	$00[13]
3bfb7 4e3 18 18 18 00 
3bfbb 4e4 00 00 00 60 
3bfbf 4e5 60 60 30 30 
3bfc3 4e6 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
3bfc7 4e7 06 06 06 00 
3bfcb 4e8 00 00 00 3C 
3bfcf 4e9 7E 66 66 66 
3bfd3 4ea 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
3bfd7 4eb 66 7E 3C 00 
3bfdb 4ec 00 00 00 18 
3bfdf 4ed 18 1C 1C 18 
3bfe3 4ee 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
3bfe7 4ef 18 7E 7E 00 
3bfeb 4f0 00 00 00 3C 
3bfef 4f1 7E 66 66 30 
3bff3 4f2 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
3bff7 4f3 0C 7E 7E 00 
3bffb 4f4 00 00 00 7E 
3bfff 4f5 7E 30 30 18 
3c003 4f6 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
3c007 4f7 66 7E 3C 00 
3c00b 4f8 00 00 00 30 
3c00f 4f9 30 38 38 3C 
3c013 4fa 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
3c017 4fb 7E 30 30 00 
3c01b 4fc 00 00 00 7E 
3c01f 4fd 7E 06 06 3E 
3c023 4fe 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
3c027 4ff 66 7E 3C 00 
3c02b 500 00 00 00 38 
3c02f 501 3C 0E 06 06 
3c033 502 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
3c037 503 66 7E 3C 00 
3c03b 504 00 00 00 7E 
3c03f 505 7E 60 60 30 
3c043 506 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
3c047 507 0C 0C 0C 00 
3c04b 508 00 00 00 3C 
3c04f 509 7E 66 66 3C 
3c053 50a 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
3c057 50b 66 7E 3C 00 
3c05b 50c 00 00 00 3C 
3c05f 50d 7E 66 66 7E 
3c063 50e 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
3c067 50f 70 3C 1C 00 
3c06b 510 00 00 00 00 
3c06f 511 00 00 18 18 
3c073 512 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
3c077 513 18 18 18 00 
3c07b 514 00 00 00 00 
3c07f 515 00 00 18 18 
3c083 516 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
3c087 517 18 18 18 0C 
3c08b 518 04 00 00 00 
3c08f 519 70 38 1C 0E 
3c093 51a 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
3c097 51b 70 00 00 00 
3c09b 51c 00 00 00 00 
3c09f 51d 00 00 7E 7E 
3c0a3 51e 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
3c0a7 51f 00 00 00 00 
3c0ab 520 00 00 00 00 | 	byte	$00[8]
3c0af 521 0E 1C 38 70 
3c0b3 522 E0 70 38 1C 
3c0b7 523 0E 00 00 00 
3c0bb 524 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
3c0bf 525 7E 66 66 30 
3c0c3 526 30 18 18 18 
3c0c7 527 00 18 18 00 
3c0cb 528 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
3c0cf 529 7E 66 66 66 
3c0d3 52a 66 36 06 66 
3c0d7 52b 66 7E 3C 00 
3c0db 52c 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
3c0df 52d 3C 7E 66 66 
3c0e3 52e 66 7E 7E 66 
3c0e7 52f 66 66 66 00 
3c0eb 530 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
3c0ef 531 7E 66 66 7E 
3c0f3 532 3E 66 66 66 
3c0f7 533 66 7E 3E 00 
3c0fb 534 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
3c0ff 535 7E 66 66 06 
3c103 536 06 06 06 66 
3c107 537 66 7E 3C 00 
3c10b 538 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
3c10f 539 7E 66 66 66 
3c113 53a 66 66 66 66 
3c117 53b 66 7E 3E 00 
3c11b 53c 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
3c11f 53d 7E 06 06 3E 
3c123 53e 3E 06 06 06 
3c127 53f 06 7E 7E 00 
3c12b 540 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
3c12f 541 7E 06 06 3E 
3c133 542 3E 06 06 06 
3c137 543 06 06 06 00 
3c13b 544 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
3c13f 545 7E 06 06 76 
3c143 546 76 66 66 66 
3c147 547 66 7E 3C 00 
3c14b 548 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
3c14f 549 66 66 66 7E 
3c153 54a 7E 66 66 66 
3c157 54b 66 66 66 00 
3c15b 54c 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
3c15f 54d 7E 18 18 18 
3c163 54e 18 18 18 18 
3c167 54f 18 7E 7E 00 
3c16b 550 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
3c16f 551 60 60 60 60 
3c173 552 60 60 60    | 	byte	$60[7]
3c176 553 66 66 7E 3C 
3c17a 554 00 00 00 00 
3c17e 555 66 66 36 36 
3c182 556 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
3c186 557 66 66 C6 C6 
3c18a 558 00 00 00 00 
3c18e 559 06 06 06 06 
3c192 55a 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
3c196 55b 06 06 7E 7E 
3c19a 55c 00 00 00 00 
3c19e 55d C6 C6 EE EE 
3c1a2 55e FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
3c1a6 55f C6 C6 C6 C6 
3c1aa 560 00 00 00 00 
3c1ae 561 66 66 66 6E 
3c1b2 562 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
3c1b6 563 76 66 66 66 
3c1ba 564 00 00 00 00 
3c1be 565 3C 7E 66 66 
3c1c2 566 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
3c1c6 567 66 66 7E 3C 
3c1ca 568 00 00 00 00 
3c1ce 569 3E 7E 66 66 
3c1d2 56a 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
3c1d6 56b 06 06 06 06 
3c1da 56c 00 00 00 00 
3c1de 56d 3C 7E 66 66 
3c1e2 56e 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
3c1e6 56f 66 56 3E 6C 
3c1ea 570 00 00 00 00 
3c1ee 571 3E 7E 66 66 
3c1f2 572 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
3c1f6 573 66 66 C6 C6 
3c1fa 574 00 00 00 00 
3c1fe 575 7C 7E 06 06 
3c202 576 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
3c206 577 60 60 7E 3E 
3c20a 578 00 00 00 00 
3c20e 579 7E 7E 18 18 
3c212 57a 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
3c216 57b 18 18 18 18 
3c21a 57c 00 00 00 00 
3c21e 57d 66 66 66 66 
3c222 57e 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
3c226 57f 66 66 7E 3C 
3c22a 580 00 00 00 00 
3c22e 581 66 66 66 66 
3c232 582 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
3c236 583 3C 3C 18 18 
3c23a 584 00 00 00 00 
3c23e 585 C6 C6 C6 C6 
3c242 586 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
3c246 587 FE EE C6 82 
3c24a 588 00 00 00 00 
3c24e 589 66 66 66 3C 
3c252 58a 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
3c256 58b 3C 66 66 66 
3c25a 58c 00 00 00 00 
3c25e 58d 66 66 66 66 
3c262 58e 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
3c266 58f 18 18 18 18 
3c26a 590 00 00 00 00 
3c26e 591 7E 7E 30 30 
3c272 592 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
3c276 593 06 06 7E 7E 
3c27a 594 00 00 00 00 
3c27e 595 3C 3C 0C 0C 
3c282 596 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
3c286 597 0C 0C 3C 3C 
3c28a 598 00 00 00 00 
3c28e 599 06 06 0C 0C 
3c292 59a 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
3c296 59b 60 60 C0 C0 
3c29a 59c 00 00 00 00 
3c29e 59d 3C 3C 30 30 
3c2a2 59e 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
3c2a6 59f 30 30 3C 3C 
3c2aa 5a0 00 00 00 00 
3c2ae 5a1 18 18 3C 3C 
3c2b2 5a2 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
3c2b6 5a3 00 00 00 00 
3c2ba 5a4 00 00 00 00 
3c2be 5a5 00 00 00 00 
3c2c2 5a6 00 00 00 00 
3c2c6 5a7 00 00       | 	byte	$00[18]
3c2c8 5a8 FE FE 00 00 
3c2cc 5a9 00 00 0C 0C 
3c2d0 5aa 18 18 00 00 
3c2d4 5ab 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
3c2d8 5ac 00 00 00 00 
3c2dc 5ad 00 00 00 00 
3c2e0 5ae 00          | 	byte	$00[9]
3c2e1 5ae 3C 7C 60 7C 
3c2e5 5af 7E 66 66 7E 
3c2e9 5b0 7C 00 00 00 
3c2ed 5b1 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
3c2f1 5b2 3E 7E 66 66 
3c2f5 5b3 66 66 66 7E 
3c2f9 5b4 3E 00 00 00 
3c2fd 5b5 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
3c301 5b6 3C 3E 06 06 
3c305 5b7 06 06 06 7E 
3c309 5b8 7C 00 00 00 
3c30d 5b9 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
3c311 5ba 7C 7E 66 66 
3c315 5bb 66 66 66 7E 
3c319 5bc 7C 00 00 00 
3c31d 5bd 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
3c321 5be 3C 7E 66 66 
3c325 5bf 7E 06 06 7E 
3c329 5c0 7C 00 00 00 
3c32d 5c1 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
3c331 5c2 18 7E 7E 18 
3c335 5c3 18 18 18 18 
3c339 5c4 18 00 00 00 
3c33d 5c5 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3c341 5c6 7C 7E 66 66 
3c345 5c7 66 66 7E 7C 
3c349 5c8 60 7E 3E 00 
3c34d 5c9 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
3c351 5ca 3E 7E 66 66 
3c355 5cb 66 66 66 66 
3c359 5cc 66 00 00 00 
3c35d 5cd 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
3c361 5ce 1C 1C 18 18 
3c365 5cf 18 18 18 3C 
3c369 5d0 3C 00 00 00 
3c36d 5d1 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
3c371 5d2 30 30 30 30 
3c375 5d3 30 30 30 30 
3c379 5d4 30          | 	byte	$30[9]
3c37a 5d4 3E 1E 00 00 
3c37e 5d5 06 06 06 36 
3c382 5d6 36 1E 1E 1E 
3c386 5d7 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
3c38a 5d8 00 00 00 00 
3c38e 5d9 1C 1C 18 18 
3c392 5da 18 18 18 18 
3c396 5db 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
3c39a 5dc 00 00 00 00 
3c39e 5dd 00 00 00    | 	byte	$00[7]
3c3a1 5de 6C FE FE D6 
3c3a5 5df D6 C6 C6 C6 
3c3a9 5e0 C6 00 00 00 
3c3ad 5e1 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
3c3b1 5e2 3E 7E 66 66 
3c3b5 5e3 66 66 66 66 
3c3b9 5e4 66 00 00 00 
3c3bd 5e5 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
3c3c1 5e6 3C 7E 66 66 
3c3c5 5e7 66 66 66 7E 
3c3c9 5e8 3C 00 00 00 
3c3cd 5e9 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
3c3d1 5ea 3E 7E 66 66 
3c3d5 5eb 66 66 66 7E 
3c3d9 5ec 3E 06 06 00 
3c3dd 5ed 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
3c3e1 5ee 7C 7E 66 66 
3c3e5 5ef 66 66 66 7E 
3c3e9 5f0 7C 60 60 00 
3c3ed 5f1 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
3c3f1 5f2 3E 7E 66 06 
3c3f5 5f3 06 06 06 06 
3c3f9 5f4 06 00 00 00 
3c3fd 5f5 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
3c401 5f6 7C 7E 06 0E 
3c405 5f7 3C 70 60 7E 
3c409 5f8 3E 00 00 00 
3c40d 5f9 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
3c411 5fa 7E 7E 18 18 
3c415 5fb 18 18 18 78 
3c419 5fc 70 00 00 00 
3c41d 5fd 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
3c421 5fe 66 66 66 66 
3c425 5ff 66 66 66    | 	byte	$66[7]
3c428 600 7E 7C 00 00 
3c42c 601 00 00 00 00 
3c430 602 00 66 66 66 
3c434 603 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
3c438 604 18 18 00 00 
3c43c 605 00 00 00 00 
3c440 606 00 C6 C6 D6 
3c444 607 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
3c448 608 C6 82 00 00 
3c44c 609 00 00 00 00 
3c450 60a 00 66 66 3C 
3c454 60b 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
3c458 60c 66 66 00 00 
3c45c 60d 00 00 00 00 
3c460 60e 00 66 66 66 
3c464 60f 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
3c468 610 7C 60 7E 3E 
3c46c 611 00 00 00 00 
3c470 612 00 7E 7E 30 
3c474 613 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
3c478 614 7E 7E 00 00 
3c47c 615 00 00 30 18 
3c480 616 18 18 18 0C 
3c484 617 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
3c488 618 18 30 00 00 
3c48c 619 00 00 18 18 
3c490 61a 18 18 18 18 
3c494 61b 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3c498 61c 18 18 00 00 
3c49c 61d 00 00 0C 18 
3c4a0 61e 18 18 18 30 
3c4a4 61f 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
3c4a8 620 18 0C 00 00 
3c4ac 621 00 00 6C 7E 
3c4b0 622 36 00 00 00 
3c4b4 623 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
3c4b8 624 00 00 00 00 
3c4bc 625 00 00 00 00 
3c4c0 626 00          | 	byte	$00[9]
3c4c1 626 18 18 18 18 
3c4c5 627 18 18 00 00 
3c4c9 628 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
3c4cc 629             | 'amiga_font     file "amigafont.def"
3c4cc 629 00 6C FE FE 
3c4d0 62a 7C 38 10 00 
3c4d4 62b 18 18 18 F8 
3c4d8 62c F8 18 18 18 | a8_font        file "atari8.fnt"
3c4dc 62d C0 C0 C0 C0 
3c4e0 62e C0 C0 C0 C0 | 	byte	$c0[8]
3c4e4 62f 18 18 18 1F 
3c4e8 630 1F 00 00 00 
3c4ec 631 18 18 18 1F 
3c4f0 632 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
3c4f4 633 00 00 00 1F 
3c4f8 634 1F 18 18 18 
3c4fc 635 C0 E0 70 38 
3c500 636 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
3c504 637 03 07 0E 1C 
3c508 638 38 70 E0 C0 
3c50c 639 80 C0 E0 F0 
3c510 63a F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
3c514 63b 00 00 00 00 
3c518 63c F0 F0 F0 F0 
3c51c 63d 01 03 07 0F 
3c520 63e 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
3c524 63f F0 F0 F0 F0 
3c528 640 00 00 00 00 
3c52c 641 0F 0F 0F 0F 
3c530 642 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
3c534 643 FF FF 00 00 
3c538 644 00 00 00 00 
3c53c 645 00 00 00 00 
3c540 646 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
3c544 647 00 00 00 00 
3c548 648 0F 0F 0F 0F 
3c54c 649 00 38 38 EE 
3c550 64a EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
3c554 64b 00 00 00 F8 
3c558 64c F8 18 18 18 
3c55c 64d 00 00 00 FF 
3c560 64e FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
3c564 64f 18 18 18 FF 
3c568 650 FF 18 18 18 
3c56c 651 00 00 3C 7E 
3c570 652 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
3c574 653 00 00 00 00 
3c578 654 FF FF FF FF 
3c57c 655 03 03 03 03 
3c580 656 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
3c584 657 00 00 00 FF 
3c588 658 FF 18 18 18 
3c58c 659 18 18 18 FF 
3c590 65a FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
3c594 65b 0F 0F 0F 0F 
3c598 65c 0F 0F 0F 0F | 	byte	$0f[8]
3c59c 65d 18 18 18 F8 
3c5a0 65e F8 00 00 00 
3c5a4 65f 1E 06 1E 06 
3c5a8 660 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
3c5ac 661 00 18 3C 7E 
3c5b0 662 18 18 18 00 
3c5b4 663 00 18 18 18 
3c5b8 664 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
3c5bc 665 00 18 0C 7E 
3c5c0 666 0C 18 00 00 
3c5c4 667 00 18 30 7E 
3c5c8 668 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
3c5cc 669 00 00 00 00 
3c5d0 66a 00 00 00 00 
3c5d4 66b 00          | 	byte	$00[9]
3c5d5 66b 18 18 18 18 
3c5d9 66c 00 18 00 00 
3c5dd 66d 66 66 66 00 
3c5e1 66e 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
3c5e5 66f 66 FF 66 66 
3c5e9 670 FF 66 00 18 
3c5ed 671 7C 06 3C 60 
3c5f1 672 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
3c5f5 673 66 36 18 0C 
3c5f9 674 66 62 00 38 
3c5fd 675 6C 38 1C F6 
3c601 676 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
3c605 677 18 18 18 00 
3c609 678 00 00 00 00 
3c60d 679 70 38 18 18 
3c611 67a 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
3c615 67b 0E 1C 18 18 
3c619 67c 1C 0E 00 00 
3c61d 67d 66 3C FF 3C 
3c621 67e 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
3c625 67f 18 18 7E 18 
3c629 680 18 00 00 00 
3c62d 681 00 00 00 00 
3c631 682 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
3c635 683 00 00 7E 00 
3c639 684 00 00 00 00 
3c63d 685 00 00 00 00 
3c641 686 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
3c645 687 60 30 18 0C 
3c649 688 06 02 00 00 
3c64d 689 3C 66 76 6E 
3c651 68a 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
3c655 68b 18 1C 18 18 
3c659 68c 18 7E 00 00 
3c65d 68d 3C 66 30 18 
3c661 68e 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
3c665 68f 7E 30 18 30 
3c669 690 66 3C 00 00 
3c66d 691 30 38 3C 36 
3c671 692 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
3c675 693 7E 06 3E 60 
3c679 694 66 3C 00 00 
3c67d 695 3C 06 3E 66 
3c681 696 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
3c685 697 7E 60 30 18 
3c689 698 0C 0C 00 00 
3c68d 699 3C 66 3C 66 
3c691 69a 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
3c695 69b 3C 66 7C 60 
3c699 69c 30 1C 00 00 
3c69d 69d 00 18 18 00 
3c6a1 69e 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
3c6a5 69f 00 18 18 00 
3c6a9 6a0 18 18 0C 60 
3c6ad 6a1 30 18 0C 18 
3c6b1 6a2 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
3c6b5 6a3 00 7E 00 00 
3c6b9 6a4 7E 00 00 06 
3c6bd 6a5 0C 18 30 18 
3c6c1 6a6 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
3c6c5 6a7 3C 66 30 18 
3c6c9 6a8 00 18 00 00 
3c6cd 6a9 3C 66 76 76 
3c6d1 6aa 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
3c6d5 6ab 18 3C 66 66 
3c6d9 6ac 7E 66 00 00 
3c6dd 6ad 3E 66 3E 66 
3c6e1 6ae 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
3c6e5 6af 3C 66 06 06 
3c6e9 6b0 66 3C 00 00 
3c6ed 6b1 1E 36 66 66 
3c6f1 6b2 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
3c6f5 6b3 7E 06 3E 06 
3c6f9 6b4 06 7E 00 00 
3c6fd 6b5 7E 06 3E 06 
3c701 6b6 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
3c705 6b7 7C 06 06 76 
3c709 6b8 66 7C 00 00 
3c70d 6b9 66 66 7E 66 
3c711 6ba 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
3c715 6bb 7E 18 18 18 
3c719 6bc 18 7E 00 00 
3c71d 6bd 60 60 60 60 
3c721 6be 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
3c725 6bf 66 36 1E 1E 
3c729 6c0 36 66 00 00 
3c72d 6c1 06 06 06 06 
3c731 6c2 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
3c735 6c3 C6 EE FE D6 
3c739 6c4 C6 C6 00 00 
3c73d 6c5 66 6E 7E 7E 
3c741 6c6 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
3c745 6c7 3C 66 66 66 
3c749 6c8 66 3C 00 00 
3c74d 6c9 3E 66 66 3E 
3c751 6ca 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
3c755 6cb 3C 66 66 66 
3c759 6cc 36 6C 00 00 
3c75d 6cd 3E 66 66 3E 
3c761 6ce 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
3c765 6cf 3C 06 3C 60 
3c769 6d0 60 3C 00 00 
3c76d 6d1 7E 18 18 18 
3c771 6d2 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
3c775 6d3 66 66 66 66 
3c779 6d4 66          | 	byte	$66[5]
3c77a 6d4 7E 00 00 66 
3c77e 6d5 66 66 66 3C 
3c782 6d6 18 00 00 C6 
3c786 6d7 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
3c78a 6d8 C6 00 00 66 
3c78e 6d9 66 3C 3C 66 
3c792 6da 66 00 00 66 
3c796 6db 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
3c79a 6dc 18 00 00 7E 
3c79e 6dd 30 18 0C 06 
3c7a2 6de 7E 00 00 78 
3c7a6 6df 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
3c7aa 6e0 78 00 00 02 
3c7ae 6e1 06 0C 18 30 
3c7b2 6e2 60 00 00 1E 
3c7b6 6e3 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
3c7ba 6e4 1E 00 00 10 
3c7be 6e5 38 6C C6 00 
3c7c2 6e6 00 00 00 00 
3c7c6 6e7 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
3c7ca 6e8 FF 00 00 18 
3c7ce 6e9 3C 7E 7E 3C 
3c7d2 6ea 18 00 00 00 
3c7d6 6eb 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
3c7da 6ec 7C 00 00 06 
3c7de 6ed 06 3E 66 66 
3c7e2 6ee 3E 00 00 00 
3c7e6 6ef 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
3c7ea 6f0 3C 00 00 60 
3c7ee 6f1 60 7C 66 66 
3c7f2 6f2 7C 00 00 00 
3c7f6 6f3 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
3c7fa 6f4 3C 00 00 70 
3c7fe 6f5 18 7C 18 18 
3c802 6f6 18 00 00 00 
3c806 6f7 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
3c80a 6f8 60 3E 00 06 
3c80e 6f9 06 3E 66 66 
3c812 6fa 66 00 00 18 
3c816 6fb 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
3c81a 6fc 3C 00 00 60 
3c81e 6fd 00 60 60 60 
3c822 6fe 60 3C 00 06 
3c826 6ff 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
3c82a 700 66 00 00 1C 
3c82e 701 18 18 18 18 
3c832 702 3C 00 00 00 
3c836 703 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
3c83a 704 C6 00 00 00 
3c83e 705 3E 66 66 66 
3c842 706 66 00 00 00 
3c846 707 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
3c84a 708 3C 00 00 00 
3c84e 709 3E 66 66 3E 
3c852 70a 06 06 00 00 
3c856 70b 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
3c85a 70c 60 60 00 00 
3c85e 70d 3E 66 06 06 
3c862 70e 06 00 00 00 
3c866 70f 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
3c86a 710 3E 00 00 18 
3c86e 711 7E 18 18 18 
3c872 712 70 00 00 00 
3c876 713 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
3c87a 714 7C 00 00 00 
3c87e 715 66 66 66 3C 
3c882 716 18 00 00 00 
3c886 717 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
3c88a 718 6C 00 00 00 
3c88e 719 66 3C 18 3C 
3c892 71a 66 00 00 00 
3c896 71b 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
3c89a 71c 30 1E 00 00 
3c89e 71d 7E 30 18 0C 
3c8a2 71e 7E 00 00 18 
3c8a6 71f 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
3c8aa 720 3C 00 18 18 
3c8ae 721 18 18 18 18 
3c8b2 722 18 18 00 7E 
3c8b6 723 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
3c8ba 724 60 00 10 18 
3c8be 725 1C 1E 1C 18 
3c8c2 726 10 00 08 18 
3c8c6 727 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
3c8ca 728 08 00       | 	byte	$08, $00
3c8cc 729 00 00 00 00 
3c8d0 72a 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
3c8d1 72a 80 00 00 00 
3c8d5 72b 00 80 00 00 
3c8d9 72c 80 80 00 00 
3c8dd 72d 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
3c8e1 72e 80 00 80 00 
3c8e5 72f 00 40 80 00 
3c8e9 730 AA AA AA 00 
3c8ed 731 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
3c8f1 732 FF 00 00 00 
3c8f5 733 00 FF 00 00 
3c8f9 734 FF FF 00 00 
3c8fd 735 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
3c901 736 FF 00 FF 00 
3c905 737 00 FF FF 00 
3c909 738 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
3c90c 739 00 00 00 00 
3c910 73a 00          | ataripalette   file "ataripalettep2.def"
3c911 73a 11 11 11 00 
3c915 73b 22 22 22 00 
3c919 73c 33 33 33 00 
3c91d 73d 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
3c921 73e 55 55 55 00 
3c925 73f 66 66 66 00 
3c929 740 77 77 77 00 
3c92d 741 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
3c931 742 99 99 99 00 
3c935 743 AA AA AA 00 
3c939 744 BB BB BB 00 
3c93d 745 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
3c941 746 DD DD DD 00 
3c945 747 EE EE EE 00 
3c949 748 FF FF FF 00 
3c94d 749 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
3c951 74a 00 14 40 00 
3c955 74b 00 1E 60 00 
3c959 74c 00 28 80 00 
3c95d 74d 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
3c961 74e 00 3C BF 00 
3c965 74f 00 46 DF 00 
3c969 750 00 50 FF 00 
3c96d 751 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
3c971 752 39 77 FF 00 
3c975 753 55 8A FF 00 
3c979 754 71 9E FF 00 
3c97d 755 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
3c981 756 AA C5 FF 00 
3c985 757 C6 D8 FF 00 
3c989 758 E3 EC FF 00 
3c98d 759 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
3c991 75a 00 00 40 00 
3c995 75b 00 00 60 00 
3c999 75c 00 00 80 00 
3c99d 75d 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
3c9a1 75e 00 00 BF 00 
3c9a5 75f 00 00 DF 00 
3c9a9 760 00 00 FF 00 
3c9ad 761 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
3c9b1 762 39 39 FF 00 
3c9b5 763 55 55 FF 00 
3c9b9 764 71 71 FF 00 
3c9bd 765 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
3c9c1 766 AA AA FF 00 
3c9c5 767 C6 C6 FF 00 
3c9c9 768 E3 E3 FF 00 
3c9cd 769 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
3c9d1 76a 20 00 40 00 
3c9d5 76b 30 00 60 00 
3c9d9 76c 40 00 80 00 
3c9dd 76d 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
3c9e1 76e 60 00 BF 00 
3c9e5 76f 70 00 DF 00 
3c9e9 770 80 00 FF 00 
3c9ed 771 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
3c9f1 772 9C 39 FF 00 
3c9f5 773 AA 55 FF 00 
3c9f9 774 B8 71 FF 00 
3c9fd 775 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
3ca01 776 D5 AA FF 00 
3ca05 777 E3 C6 FF 00 
3ca09 778 F1 E3 FF 00 
3ca0d 779 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
3ca11 77a 40 00 40 00 
3ca15 77b 60 00 60 00 
3ca19 77c 80 00 80 00 
3ca1d 77d 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
3ca21 77e BF 00 BF 00 
3ca25 77f DF 00 DF 00 
3ca29 780 FF 00 FF 00 
3ca2d 781 FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
3ca31 782 FF 39 FF 00 
3ca35 783 FF 55 FF 00 
3ca39 784 FF 71 FF 00 
3ca3d 785 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
3ca41 786 FF AA FF 00 
3ca45 787 FF C6 FF 00 
3ca49 788 FF E3 FF 00 
3ca4d 789 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
3ca51 78a 40 00 20 00 
3ca55 78b 60 00 30 00 
3ca59 78c 80 00 40 00 
3ca5d 78d 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
3ca61 78e BF 00 60 00 
3ca65 78f DF 00 70 00 
3ca69 790 FF 00 80 00 
3ca6d 791 FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
3ca71 792 FF 39 9C 00 
3ca75 793 FF 55 AA 00 
3ca79 794 FF 71 B8 00 
3ca7d 795 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
3ca81 796 FF AA D5 00 
3ca85 797 FF C6 E3 00 
3ca89 798 FF E3 F1 00 
3ca8d 799 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
3ca91 79a 40 00 00 00 
3ca95 79b 60 00 00 00 
3ca99 79c 80 00 00 00 
3ca9d 79d 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
3caa1 79e BF 00 00 00 
3caa5 79f DF 00 00 00 
3caa9 7a0 FF 00 00 00 
3caad 7a1 FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
3cab1 7a2 FF 39 39 00 
3cab5 7a3 FF 55 55 00 
3cab9 7a4 FF 71 71 00 
3cabd 7a5 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
3cac1 7a6 FF AA AA 00 
3cac5 7a7 FF C6 C6 00 
3cac9 7a8 FF E3 E3 00 
3cacd 7a9 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
3cad1 7aa 40 10 00 00 
3cad5 7ab 60 18 00 00 
3cad9 7ac 80 20 00 00 
3cadd 7ad 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
3cae1 7ae BF 30 00 00 
3cae5 7af DF 38 00 00 
3cae9 7b0 FF 40 00 00 
3caed 7b1 FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
3caf1 7b2 FF 6A 39 00 
3caf5 7b3 FF 80 55 00 
3caf9 7b4 FF 95 71 00 
3cafd 7b5 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
3cb01 7b6 FF BF AA 00 
3cb05 7b7 FF D5 C6 00 
3cb09 7b8 FF EA E3 00 
3cb0d 7b9 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
3cb11 7ba 40 20 00 00 
3cb15 7bb 60 30 00 00 
3cb19 7bc 80 40 00 00 
3cb1d 7bd 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
3cb21 7be BF 60 00 00 
3cb25 7bf DF 70 00 00 
3cb29 7c0 FF 80 00 00 
3cb2d 7c1 FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
3cb31 7c2 FF 9C 39 00 
3cb35 7c3 FF AA 55 00 
3cb39 7c4 FF B8 71 00 
3cb3d 7c5 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
3cb41 7c6 FF D5 AA 00 
3cb45 7c7 FF E3 C6 00 
3cb49 7c8 FF F1 E3 00 
3cb4d 7c9 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
3cb51 7ca 40 30 00 00 
3cb55 7cb 60 48 00 00 
3cb59 7cc 80 60 00 00 
3cb5d 7cd 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
3cb61 7ce BF 90 00 00 
3cb65 7cf DF A8 00 00 
3cb69 7d0 FF C0 00 00 
3cb6d 7d1 FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
3cb71 7d2 FF CE 39 00 
3cb75 7d3 FF D5 55 00 
3cb79 7d4 FF DC 71 00 
3cb7d 7d5 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
3cb81 7d6 FF EA AA 00 
3cb85 7d7 FF F1 C6 00 
3cb89 7d8 FF F8 E3 00 
3cb8d 7d9 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
3cb91 7da 30 40 00 00 
3cb95 7db 48 60 00 00 
3cb99 7dc 60 80 00 00 
3cb9d 7dd 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
3cba1 7de 90 BF 00 00 
3cba5 7df A8 DF 00 00 
3cba9 7e0 C0 FF 00 00 
3cbad 7e1 C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
3cbb1 7e2 CE FF 39 00 
3cbb5 7e3 D5 FF 55 00 
3cbb9 7e4 DC FF 71 00 
3cbbd 7e5 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
3cbc1 7e6 EA FF AA 00 
3cbc5 7e7 F1 FF C6 00 
3cbc9 7e8 F8 FF E3 00 
3cbcd 7e9 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
3cbd1 7ea 00 40 00 00 
3cbd5 7eb 00 60 00 00 
3cbd9 7ec 00 80 00 00 
3cbdd 7ed 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
3cbe1 7ee 00 BF 00 00 
3cbe5 7ef 00 DF 00 00 
3cbe9 7f0 00 FF 00 00 
3cbed 7f1 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
3cbf1 7f2 39 FF 39 00 
3cbf5 7f3 55 FF 55 00 
3cbf9 7f4 71 FF 71 00 
3cbfd 7f5 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
3cc01 7f6 AA FF AA 00 
3cc05 7f7 C6 FF C6 00 
3cc09 7f8 E3 FF E3 00 
3cc0d 7f9 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
3cc11 7fa 00 40 14 00 
3cc15 7fb 00 60 1E 00 
3cc19 7fc 00 80 28 00 
3cc1d 7fd 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
3cc21 7fe 00 BF 3C 00 
3cc25 7ff 00 DF 46 00 
3cc29 800 00 FF 50 00 
3cc2d 801 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
3cc31 802 39 FF 77 00 
3cc35 803 55 FF 8A 00 
3cc39 804 71 FF 9E 00 
3cc3d 805 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
3cc41 806 AA FF C5 00 
3cc45 807 C6 FF D8 00 
3cc49 808 E3 FF EC 00 
3cc4d 809 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
3cc51 80a 00 40 28 00 
3cc55 80b 00 60 3C 00 
3cc59 80c 00 80 50 00 
3cc5d 80d 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
3cc61 80e 00 BF 78 00 
3cc65 80f 00 DF 8C 00 
3cc69 810 00 FF A0 00 
3cc6d 811 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
3cc71 812 39 FF B5 00 
3cc75 813 55 FF C0 00 
3cc79 814 71 FF CA 00 
3cc7d 815 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
3cc81 816 AA FF DF 00 
3cc85 817 C6 FF EA 00 
3cc89 818 E3 FF F4 00 
3cc8d 819 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
3cc91 81a 00 40 40 00 
3cc95 81b 00 60 60 00 
3cc99 81c 00 80 80 00 
3cc9d 81d 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
3cca1 81e 00 BF BF 00 
3cca5 81f 00 DF DF 00 
3cca9 820 00 FF FF 00 
3ccad 821 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
3ccb1 822 39 FF FF 00 
3ccb5 823 55 FF FF 00 
3ccb9 824 71 FF FF 00 
3ccbd 825 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
3ccc1 826 AA FF FF 00 
3ccc5 827 C6 FF FF 00 
3ccc9 828 E3 FF FF 00 
3cccd 829 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
3ccd1 82a 00 28 40 00 
3ccd5 82b 00 3C 60 00 
3ccd9 82c 00 50 80 00 
3ccdd 82d 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
3cce1 82e 00 78 BF 00 
3cce5 82f 00 8C DF 00 
3cce9 830 00 A0 FF 00 
3cced 831 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
3ccf1 832 39 B5 FF 00 
3ccf5 833 55 C0 FF 00 
3ccf9 834 71 CA FF 00 
3ccfd 835 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
3cd01 836 AA DF FF 00 
3cd05 837 C6 EA FF 00 
3cd09 838 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
3cd0c 839             | 
3cd0c 839             | '**********************************************************************************
3cd0c 839             | '
3cd0c 839             | '        Timings and colors definitions
3cd0c 839             | '
3cd0c 839             | '**********************************************************************************
3cd0c 839             | 
3cd0c 839             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
3cd0c 839 08 00 00 00 
3cd10 83a 3C 00 00 00 
3cd14 83b 08 00 00 00 
3cd18 83c 00 04 00 00 | timings         long   8,     60,  8,       1024,   7,     4,     1,        128, 600,         340500000,   %1_100111__10_1010_1000__1111_1011,   600,        0,     192, 0, 0
3cd1c 83d 07 00 00 00 
3cd20 83e 04 00 00 00 
3cd24 83f 01 00 00 00 
3cd28 840 80 00 00 00 | 	byte	$07, $00, $00, $00, $04, $00, $00, $00, $01, $00, $00, $00, $80, $00, $00, $00
3cd2c 841 58 02 00 00 
3cd30 842 20 9E 4B 14 
3cd34 843 FB A8 9E 01 
3cd38 844 58 02 00 00 | 	byte	$58, $02, $00, $00, $20, $9e, $4b, $14, $fb, $a8, $9e, $01, $58, $02, $00, $00
3cd3c 845 00 00 00 00 
3cd40 846 C0 00 00 00 
3cd44 847 00 00 00 00 
3cd48 848 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3cd4c 849             | 'timings        long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
3cd4c 849 00 75 C7 97 
3cd50 84a 27 47 F6 0A 
3cd54 84b 05 79 CB 9B 
3cd58 84c 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
3cd5c 84d             | 
3cd5c 84d             | ''--------  Initialization  ----------------------------------------------------------------
3cd5c 84d             | 
3cd5c 84d 28 0C 64 FD | hdmi            setq    #6
3cd60 84e 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
3cd64 84f 28 10 64 FD |                 setq    #8
3cd68 850 D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
3cd6c 851             | 
3cd6c 851 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
3cd70 852 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
3cd74 853 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
3cd78 854 D6 C6 01 F1 |                 add     t1,hbase
3cd7c 855 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
3cd80 856 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
3cd84 857 7B 0B 80 5F 
3cd88 858 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
3cd8c 859 66 66 86 FF 
3cd90 85a 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
3cd94 85b             | '
3cd94 85b D6 C6 01 F6 |                 mov 	t1,hbase			   '
3cd98 85c 11 C6 65 F0 |                 shl 	t1,#17                             '
3cd9c 85d E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
3cda0 85e 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
3cda4 85f             | 
3cda4 85f 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
3cda8 860 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
3cdac 861 E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
3cdb0 862             | 
3cdb0 862             | ''--------  frame rendering main loop  ---------------------------------------------------
3cdb0 862             | 
3cdb0 862 28 06 64 FD | p101            setq 	#3
3cdb4 863 00 A5 05 FB | 		rdlong  vblankptr,ptra
3cdb8 864 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
3cdbc 865 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
3cdc0 866 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
3cdc4 867 00 A0 05 F6 |                 mov     dlinum, #0
3cdc8 868 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
3cdcc 869 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
3cdd0 86a             | 
3cdd0 86a             | 
3cdd0 86a 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
3cdd4 86b 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
3cdd8 86c ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
3cddc 86d             |                 
3cddc 86d             | 
3cddc 86d             | 
3cddc 86d             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
3cddc 86d             |   
3cddc 86d 1F A8 15 F4 |                 testb   paletteptr,#31 wc
3cde0 86e 29 FE 65 3D |          if_nc  setq2   #255
3cde4 86f D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
3cde8 870             | 
3cde8 870             | '' -----   up porch (before the picture)
3cde8 870             | 
3cde8 870 C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
3cdec 871 C1 C4 01 F6 |                 mov     hsync1,sync_001	
3cdf0 872 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
3cdf4 873 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
3cdf8 874             |  
3cdf8 874             |    
3cdf8 874             |  
3cdf8 874 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
3cdfc 875 E2 8C B1 FC |                 xzero   m_sn,hsync1
3ce00 876 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
3ce04 877 E1 8E C1 FC |                 xcont   m_bv,hsync0     
3ce08 878 E1 90 C1 FC |                 xcont   m_vi,hsync0
3ce0c 879 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
3ce10 87a             | 
3ce10 87a E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
3ce14 87b E2 8C B1 FC |                 xzero   m_sn,hsync1
3ce18 87c 48 00 B0 FD | 		call    #dli
3ce1c 87d E1 8E C1 FC |                 xcont   m_bv,hsync0     
3ce20 87e E1 90 C1 FC |                 xcont   m_vi,hsync0
3ce24 87f 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
3ce28 880             |                 	
3ce28 880             |                 
3ce28 880             | 
3ce28 880             |  
3ce28 880             | '' ------- the main screen drawing starts here
3ce28 880             | 
3ce28 880 E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
3ce2c 881 E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
3ce30 882 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
3ce34 883 E1 8E C1 FC |                 xcont   m_bv,hsync0
3ce38 884 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
3ce3c 885 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
3ce40 886 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
3ce44 887             |               
3ce44 887             | 
3ce44 887 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
3ce48 888 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
3ce4c 889             | 
3ce4c 889             | ' ---------------- All visible lines displayed now, start vblank  
3ce4c 889             | 
3ce4c 889 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
3ce50 88a 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
3ce54 88b C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
3ce58 88c C3 C4 01 F6 |                 mov     hsync1,sync_223
3ce5c 88d 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
3ce60 88e 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
3ce64 88f             | 
3ce64 88f             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
3ce64 88f             | 
3ce64 88f             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
3ce64 88f             | 
3ce64 88f 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
3ce68 890             | 
3ce68 890 DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
3ce6c 891 04 B8 05 A1 |     if_z        add     dlptr2,#4
3ce70 892 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
3ce74 893             | 
3ce74 893 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
3ce78 894 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
3ce7c 895 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
3ce80 896 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
3ce84 897 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
3ce88 898             | 
3ce88 898 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
3ce8c 899 DD C6 41 F8 |                 getnib  t1,dl,#0
3ce90 89a 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
3ce94 89b 70 00 90 AD |     if_z        jmp     #preload
3ce98 89c 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
3ce9c 89d 94 00 90 AD |     if_z        jmp     #preload2
3cea0 89e 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
3cea4 89f 0C 00 90 AD |     if_z        jmp     #p390
3cea8 8a0 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
3ceac 8a1 28 00 90 AD |     if_z        jmp     #p391  
3ceb0 8a2             | 
3ceb0 8a2 2D 00 64 FD | p308            ret
3ceb4 8a3             |    
3ceb4 8a3 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
3ceb8 8a4 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
3cebc 8a5 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
3cec0 8a6 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
3cec4 8a7 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
3cec8 8a8 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
3cecc 8a9 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
3ced0 8aa 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
3ced4 8ab 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
3ced8 8ac             |  
3ced8 8ac             | '' --------  Reload palette. To do 
3ced8 8ac             | 
3ced8 8ac E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
3cedc 8ad 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
3cee0 8ae 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
3cee4 8af 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
3cee8 8b0 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
3ceec 8b1 E0 00 00 FB |         	rdlong  $000, framebuf2         	
3cef0 8b2 70 FF 9F FD |         	jmp     #dli                
3cef4 8b3             |       
3cef4 8b3             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
3cef4 8b3             | 
3cef4 8b3             | 
3cef4 8b3             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
3cef4 8b3             | 
3cef4 8b3 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
3cef8 8b4 E2 8C B1 FC |                 xzero   m_sn,hsync1
3cefc 8b5 E1 8E C1 FC |                 xcont   m_bv,hsync0     
3cf00 8b6 E1 90 C1 FC |                 xcont   m_vi,hsync0
3cf04 8b7 FB ED 6F 0B |         _ret_   djnz    pa,#blank
3cf08 8b8             |         
3cf08 8b8             | '' -------------- Preload a line from PSRAM        
3cf08 8b8             |         
3cf08 8b8 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
3cf0c 8b9 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
3cf10 8ba DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
3cf14 8bb DE B4 01 F6 |                 mov     buf1,buf1c
3cf18 8bc 03 A0 05 F7 |                 incmod  dlinum,#3
3cf1c 8bd             | 
3cf1c 8bd 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
3cf20 8be 32 B7 01 F6 |                 mov     buf2,a1024
3cf24 8bf E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
3cf28 8c0 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
3cf2c 8c1 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
3cf30 8c2 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
3cf34 8c3             |  
3cf34 8c3             |  
3cf34 8c3             | preload2      '  incmod  dlinum,#3
3cf34 8c3 04 C0 45 F0 |                 shr 	framebuf2,#4
3cf38 8c4 ED B2 01 F6 |                 mov 	cmd,affffffff
3cf3c 8c5 E0 B4 01 F6 |                 mov 	buf1,framebuf2
3cf40 8c6 28 02 64 FD |                 setq	#1
3cf44 8c7 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
3cf48 8c8             |                 
3cf48 8c8             | 
3cf48 8c8             | '' -------------- Draw sprites
3cf48 8c8             | 
3cf48 8c8 CF 5C 02 F6 | sprite          mov t8,frames
3cf4c 8c9 10 5C 0E F5 | 		and t8,#16 wz
3cf50 8ca 11 48 06 F6 |                 mov     spritenum,#17			' 16 +2 sprites. Todo: this should be a parameter
3cf54 8cb 10 48 06 A6 | 	if_z    mov spritenum, #16	
3cf58 8cc             | 		
3cf58 8cc             | 
3cf58 8cc 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
3cf5c 8cd 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
3cf60 8ce EF 56 96 F9 |                 alts    t5,#sprite1xy
3cf64 8cf 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
3cf68 8d0 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
3cf6c 8d1 EF 56 96 F9 |                 alts    t5,#sprite1xy
3cf70 8d2 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
3cf74 8d3 0F 4C 66 F7 |                 signx	sprite_x,#15
3cf78 8d4 F0 56 96 F9 |                 alts    t5,#sprite1wh
3cf7c 8d5 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
3cf80 8d6 01 52 86 F1 |                 sub     sprite_h,#1
3cf84 8d7 F0 56 96 F9 |                 alts    t5,#sprite1wh
3cf88 8d8 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
3cf8c 8d9             | 
3cf8c 8d9             | 
3cf8c 8d9 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
3cf90 8da BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
3cf94 8db 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
3cf98 8dc B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
3cf9c 8dd 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
3cfa0 8de AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
3cfa4 8df 00 5E 06 F6 |                 mov 	t9,#0
3cfa8 8e0 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
3cfac 8e1 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
3cfb0 8e2 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
3cfb4 8e3             |      
3cfb4 8e3 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
3cfb8 8e4 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
3cfbc 8e5 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
3cfc0 8e6 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
3cfc4 8e7 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
3cfc8 8e8             |                 
3cfc8 8e8 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
3cfcc 8e9 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
3cfd0 8ea DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
3cfd4 8eb             |   		
3cfd4 8eb 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
3cfd8 8ec 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
3cfdc 8ed             | 
3cfdc 8ed 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
3cfe0 8ee 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
3cfe4 8ef 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
3cfe8 8f0             |  
3cfe8 8f0 EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
3cfec 8f1 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
3cff0 8f2 10 00 90 CD |      if_c 	jmp     #p899		
3cff4 8f3             | 	
3cff4 8f3             | 	
3cff4 8f3 26 CD 01 F6 | 		mov 	t4,sprite_x	'
3cff8 8f4 28 CD 01 F1 | 		add	t4,sprite_w
3cffc 8f5 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
3d000 8f6             | 
3d000 8f6 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
3d004 8f7             | 
3d004 8f7 28 59 02 F6 | p899		mov 	t6,sprite_w
3d008 8f8 01 58 86 F1 | 	 	sub     t6,#1
3d00c 8f9 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
3d010 8fa             | 
3d010 8fa 28 58 62 FD |                 setq   	t6
3d014 8fb E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
3d018 8fc 28 5D 02 F6 |                 mov t8,sprite_w
3d01c 8fd 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
3d020 8fe 24 00 90 AD |         if_z    jmp #p898
3d024 8ff             |          
3d024 8ff             |         
3d024 8ff 70 5F 06 F6 |                 mov  t9,#368
3d028 900 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
3d02c 901             | 
3d02c 901 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
3d030 902 08 5C 06 FA |                 mul t8,#8				' bits to shr
3d034 903 FF FF 7F FF 
3d038 904 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
3d03c 905 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
3d040 906 00 5E 8E F9 |                 altd t9,#0				' and mask 
3d044 907 2D 01 00 F5 |                 and 0-0, t7
3d048 908             |                
3d048 908             | 
3d048 908 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
3d04c 909 E5 E0 7A FA |                 wmlong 368,t3				
3d050 90a             |                 
3d050 90a C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
3d054 90b 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
3d058 90c 2D 00 64 FD |                 ret
3d05c 90d             | 	
3d05c 90d             | 	
3d05c 90d             |                
3d05c 90d             |  
3d05c 90d             | '' -------------- Graphics line ------------------------------------------------------------
3d05c 90d             |  
3d05c 90d             | 
3d05c 90d             | '' consts and vars
3d05c 90d             | 
3d05c 90d 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
3d060 90e AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
3d064 90f 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
3d068 910 AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
3d06c 911             | 
3d06c 911 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
3d070 912             | 
3d070 912             | '------ these longs will be set by setmode function
3d070 912             | 
3d070 912 00 00 00 00 | m_bs            long    0        'blanks before sync
3d074 913 00 00 00 00 | m_sn            long    0        'sync
3d078 914 00 00 00 00 | m_bv            long    0        'blanks before visible
3d07c 915 00 00 00 00 | m_vi            long    0        'visible pixels #
3d080 916             | 'm_border        long    0        'left/right borders
3d080 916 00 00 00 00 | i_upporch       long    0        'up porch lines
3d084 917 00 00 00 00 | i_vsync         long    0        'vsync lines
3d088 918 00 00 00 00 | i_downporch     long    0        'down porch lines
3d08c 919 00 00 00 00 | i_cpl           long    0        'chars/longs per line
3d090 91a 00 00 00 00 | i_totalvis      long    0
3d094 91b             | 
3d094 91b             | '-------------------------------------
3d094 91b             |  
3d094 91b 00 00 00 00 | linenum         long    0
3d098 91c 00 00 00 00 | frames          long    0
3d09c 91d 00 00 00 00 | dlinum long 0
3d0a0 91e 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
3d0a4 91f             | 
3d0a4 91f 00 00 00 00 | vblankptr       long    0
3d0a8 920 00 00 00 00 | modeptr         long    0
3d0ac 921 00 00 00 00 | paletteptr      long    0
3d0b0 922 00 00 00 00 | dlptr           long    0
3d0b4 923 01 00 00 00 | hbase           long    1
3d0b8 924 00 00 00 00 | mailbox         long    0
3d0bc 925 00 00 00 00 | spriteptr          long 0
3d0c0 926             | 
3d0c0 926 00 00 00 00 | cmd             long    0
3d0c4 927 00 B0 07 00 | buf1            long    $80000-16384-4096
3d0c8 928 00 04 00 00 | buf2            long    1024
3d0cc 929 01 00 00 00 | dlptr2          long    1
3d0d0 92a 01 00 00 00 | dl              long    1
3d0d4 92b             | 
3d0d4 92b 00 00 00 00 | buf1c long 0
3d0d8 92c 00 B0 07 00 | buf1d            long    $80000-16384-4096
3d0dc 92d 01 00 00 00 | framebuf2       long    1
3d0e0 92e 01 00 00 00 | hsync0          long    1
3d0e4 92f 01 00 00 00 | hsync1          long    1
3d0e8 930             | 
3d0e8 930 01 00 00 00 | t1              long    1
3d0ec 931 00 00 00 00 | t2 long 0
3d0f0 932 00 00 00 00 | t3 long 0
3d0f4 933 00 00 00 00 | t4 long 0
3d0f8 934             | 
3d0f8 934 00 00 00 00 | rcnt            long    0  'dl repeat count
3d0fc 935 00 00 00 00 | rcnt2           long    0
3d100 936 00 00 00 00 | rcnt2a          long    0
3d104 937 00 00 00 00 | roffset         long    0
3d108 938 00 00 00 00 | rdl             long    0  'dl repeat line
3d10c 939 00 00 00 00 | dlc             long    0  'dl command
3d110 93a             | 
3d110 93a FF FF FF FF | affffffff       long    $ffffffff
3d114 93b 00 00 00 00 | sprite1pointer long 0
3d118 93c 00 00 00 00 | sprite1xy      long 0
3d11c 93d 00 00 00 00 | sprite1wh      long 0
3d120 93e 00 00 00 00 | sprite2pointer long 0
3d124 93f 00 00 00 00 | sprite2xy      long 0
3d128 940 00 00 00 00 | sprite2wh      long 0
3d12c 941 00 00 00 00 | sprite3pointer long 0
3d130 942 00 00 00 00 | sprite3xy      long 0
3d134 943 00 00 00 00 | sprite3wh      long 0
3d138 944 00 00 00 00 | sprite4pointer long 0
3d13c 945 00 00 00 00 | sprite4xy      long 0
3d140 946 00 00 00 00 | sprite4wh      long 0
3d144 947 00 00 00 00 | sprite5pointer long 0
3d148 948 00 00 00 00 | sprite5xy      long 0
3d14c 949 00 00 00 00 | sprite5wh      long 0
3d150 94a 00 00 00 00 | sprite6pointer long 0
3d154 94b 00 00 00 00 | sprite6xy      long 0
3d158 94c 00 00 00 00 | sprite6wh      long 0
3d15c 94d 00 00 00 00 | sprite7pointer long 0
3d160 94e 00 00 00 00 | sprite7xy      long 0
3d164 94f 00 00 00 00 | sprite7wh      long 0
3d168 950 00 00 00 00 | sprite8pointer long 0
3d16c 951 00 00 00 00 | sprite8xy      long 0
3d170 952 00 00 00 00 | sprite8wh      long 0
3d174 953 00 00 00 00 | sprite9pointer long 0
3d178 954 00 00 00 00 | sprite9xy      long 0
3d17c 955 00 00 00 00 | sprite9wh      long 0
3d180 956 00 00 00 00 | sprite10pointer long 0
3d184 957 00 00 00 00 | sprite10xy      long 0
3d188 958 00 00 00 00 | sprite10wh      long 0
3d18c 959 00 00 00 00 | sprite11pointer long 0
3d190 95a 00 00 00 00 | sprite11xy      long 0
3d194 95b 00 00 00 00 | sprite11wh      long 0
3d198 95c 00 00 00 00 | sprite12pointer long 0
3d19c 95d 00 00 00 00 | sprite12xy      long 0
3d1a0 95e 00 00 00 00 | sprite12wh      long 0
3d1a4 95f 00 00 00 00 | sprite13pointer long 0
3d1a8 960 00 00 00 00 | sprite13xy      long 0
3d1ac 961 00 00 00 00 | sprite13wh      long 0
3d1b0 962 00 00 00 00 | sprite14pointer long 0
3d1b4 963 00 00 00 00 | sprite14xy      long 0
3d1b8 964 00 00 00 00 | sprite14wh      long 0
3d1bc 965 00 00 00 00 | sprite15pointer long 0
3d1c0 966 00 00 00 00 | sprite15xy      long 0
3d1c4 967 00 00 00 00 | sprite15wh      long 0
3d1c8 968 00 00 00 00 | sprite16pointer long 0
3d1cc 969 00 00 00 00 | sprite16xy      long 0
3d1d0 96a 00 00 00 00 | sprite16wh      long 0
3d1d4 96b 00 00 00 00 | sprite17pointer long 0
3d1d8 96c 00 00 00 00 | sprite17xy      long 0
3d1dc 96d 00 00 00 00 | sprite17wh      long 0
3d1e0 96e 00 00 00 00 | sprite18pointer long 0
3d1e4 96f 00 00 00 00 | sprite18xy      long 0
3d1e8 970 00 00 00 00 | sprite18wh      long 0
3d1ec 971 00 00 00 00 | spritenum long 0
3d1f0 972             | 
3d1f0 972 00 00 00 00 | spriteline long 0
3d1f4 973 84 03 00 00 | sprite_x long 900
3d1f8 974 00 00 00 00 | sprite_y long 0
3d1fc 975 10 00 00 00 | sprite_w long 16
3d200 976 40 00 00 00 | sprite_h long 64
3d204 977 00 00 00 00 | l2 long 0
3d208 978 00 00 00 00 | t5 long 0
3d20c 979 00 00 00 00 | t6 long 0
3d210 97a 00 00 00 00 | t7 long 0
3d214 97b 00 00 00 00 | t8 long 0
3d218 97c 00 00 00 00 | t9 long 0
3d21c 97d 00 00 00 00 | preloadaddr long 0
3d220 97e 00 00 00 00 | preloadlineaddr long 0
3d224 97f 00 04 00 00 | a1024 long 1024
3d228 980             | 
3d228 980 E0 03 00 00 | aa long 992
3d22c 981 FF 03 00 00 | a1023 long 1023
3d230 982 00 10 00 00 | a4096 long 4096
3d234 983             |  fit 368
3d234 983             | _psram_spin2_dat_
3d234 983 00 00 00 00 
      ...             
3d32c 9c1 00 00 00 00 
3d330 9c2 00 00 00 00 |     listdata long 0[8*8]
3d334 9c3             |             orgh
3d334                 | 
3d334                 | ' driver state
3d334     FF FF FF FF | drivercog   long    -1  ' COG id of driver
3d338     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
3d33c                 | 
3d33c                 | ' delay profile
3d33c     07 00 00 00 
3d340     00 CF 7B 05 
3d344     80 D1 F0 08 
3d348     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
3d34c     80 C4 60 0F 
3d350     80 39 7A 12 
3d354     40 2D D9 13 
3d358     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
3d35c                 | 
3d35c                 | ' data to be passed to driver when starting it
3d35c                 | startupData
3d35c     00 00 00 00 |     long    0           ' current frequency
3d360     00 00 00 00 |     long    FLAGS       ' optional flags for driver
3d364     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
3d368     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
3d36c     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
3d370     7C D3 03 00 |     long    deviceData  ' address of devices data structure in HUBRAM
3d374     FC D3 03 00 |     long    qosData     ' address of QoS data structure in HUBRAM
3d378     1C D4 03 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
3d37c                 | 
3d37c                 | ' data for memory
3d37c                 | deviceData
3d37c                 |     ' 16 bank parameters follow (16MB per bank)
3d37c     00 00 00 00 
      ...             
3d3b4     00 00 00 00 
3d3b8     00 00 00 00 |     long    0[16]                               ' banks 0-15
3d3bc                 |     ' 16 banks of pin parameters follow
3d3bc     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
3d3c0     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
3d3c4     FF FF FF FF 
      ...             
3d3f4     FF FF FF FF 
3d3f8     FF FF FF FF |     long    -1[14]                              ' banks 2-15
3d3fc                 | 
3d3fc                 | ' data for COG polling
3d3fc                 | qosData 
3d3fc     00 00 FF FF 
3d400     00 00 FF FF 
3d404     00 00 FF FF 
3d408     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
3d40c     00 00 FF FF 
3d410     00 00 FF FF 
3d414     00 00 FF FF 
3d418     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
3d41c                 |     
3d41c                 | ' mailbox storage
3d41c                 | 
3d41c                 | mailboxes
3d41c     00 00 00 00 
      ...             
3d474     00 00 00 00 
3d478     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
3d47c                 | 	alignl
3d47c                 | _psram16drv_spin2_dat_
3d47c                 |                             orgh
3d47c     00 00 00 00 
      ...             
3d494     00 00 00 00 
3d498     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
3d49c                 | 
3d49c                 | driver_start
3d49c                 |                             org
3d49c 000             | '..................................................................................................
3d49c 000             | ' Memory layout for COG RAM once operational:
3d49c 000             | '
3d49c 000             | '  COG RAM address      Usage
3d49c 000             | '  ---------------      ----
3d49c 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
3d49c 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
3d49c 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
3d49c 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
3d49c 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
3d49c 000             | '  ~$198-$1F3           State and register variables
3d49c 000             | '
3d49c 000             | ' Also during driver COG startup:
3d49c 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
3d49c 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
3d49c 000             | '..................................................................................................
3d49c 000             |                             
3d49c 000             | ' Mailbox storage after vector initialization
3d49c 000             | 
3d49c 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
3d4a0 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
3d4a4 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
3d4a8 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
3d4ac 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
3d4b0 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
3d4b4 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
3d4b8 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
3d4bc 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
3d4c0 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
3d4c4 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
3d4c8 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
3d4cc 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
3d4d0 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
3d4d4 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
3d4d8 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
3d4dc 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
3d4e0 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
3d4e4 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
3d4e8 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
3d4ec 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
3d4f0 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
3d4f4 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
3d4f8 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
3d4fc 018             | 
3d4fc 018             | ' Mailbox parameter addresses per COG once patched
3d4fc 018             |                             
3d4fc 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
3d500 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
3d504 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
3d508 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
3d50c 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
3d510 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
3d514 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
3d518 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
3d51c 020             | 
3d51c 020             | '..................................................................................................
3d51c 020             | ' Per COG request and state setup and service branching
3d51c 020             |         
3d51c 020             | cog0                 
3d51c 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
3d520 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
3d524 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
3d528 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
3d52c 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3d530 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3d534 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
3d538 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
3d53c 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
3d540 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3d544 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3d548 02b 33 CA 63 FD |                             execf   request-0               'jump to service
3d54c 02c             | cog1                        
3d54c 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
3d550 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
3d554 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
3d558 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
3d55c 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3d560 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3d564 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
3d568 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
3d56c 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
3d570 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3d574 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3d578 037 33 CA 63 FD |                             execf   request-0               'jump to service
3d57c 038             | cog2                         
3d57c 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
3d580 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
3d584 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
3d588 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
3d58c 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3d590 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3d594 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
3d598 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
3d59c 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
3d5a0 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3d5a4 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3d5a8 043 33 CA 63 FD |                             execf   request-0               'jump to service
3d5ac 044             | cog3                        
3d5ac 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
3d5b0 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
3d5b4 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
3d5b8 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
3d5bc 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3d5c0 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3d5c4 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
3d5c8 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
3d5cc 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
3d5d0 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3d5d4 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3d5d8 04f 33 CA 63 FD |                             execf   request-0               'jump to service
3d5dc 050             | cog4                        
3d5dc 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
3d5e0 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
3d5e4 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
3d5e8 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
3d5ec 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3d5f0 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3d5f4 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
3d5f8 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
3d5fc 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
3d600 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3d604 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3d608 05b 33 CA 63 FD |                             execf   request-0               'jump to service
3d60c 05c             | cog5                        
3d60c 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
3d610 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
3d614 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
3d618 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
3d61c 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3d620 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3d624 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
3d628 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
3d62c 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
3d630 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3d634 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3d638 067 33 CA 63 FD |                             execf   request-0               'jump to service
3d63c 068             | cog6                        
3d63c 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
3d640 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
3d644 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
3d648 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
3d64c 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3d650 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3d654 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
3d658 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
3d65c 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
3d660 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3d664 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3d668 073 33 CA 63 FD |                             execf   request-0               'jump to service
3d66c 074             | cog7                        
3d66c 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
3d670 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
3d674 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
3d678 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
3d67c 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3d680 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3d684 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
3d688 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
3d68c 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
3d690 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3d694 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3d698 07f 33 CA 63 FD |                             execf   request-0               'jump to service
3d69c 080             |                             fit     128
3d69c 080             | 
3d69c 080             |                             fit     128
3d69c 080             | pad                         long    0[128-$]                'align init code to $80
3d69c 080             | 
3d69c 080             | '..................................................................................................
3d69c 080             | 
3d69c 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
3d69c 080             | 
3d69c 080             | init                        
3d69c 080             |                             ' get driver scratch long address in hub
3d69c 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
3d6a0 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
3d6a4 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
3d6a8 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
3d6ac 084             |                     
3d6ac 084             |                             ' read in the additional LUT RAM code
3d6ac 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
3d6b0 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
3d6b4 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
3d6b8 087             | 
3d6b8 087             |                             ' read the startup parameters
3d6b8 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
3d6bc 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
3d6c0 089             | 
3d6c0 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
3d6c0 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
3d6c4 08a             | 
3d6c4 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
3d6c8 08b 01 00 00 5F 
3d6cc 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
3d6d0 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
3d6d4 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
3d6d8 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
3d6dc 090             | 
3d6dc 090             |                             ' setup data pin modes and data bus pin group in streamer commands
3d6dc 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
3d6e0 091 01 00 00 FF 
3d6e4 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
3d6e8 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
3d6ec 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
3d6f0 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
3d6f4 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
3d6f8 097 08 DE 47 F5 |                             or      a, #8
3d6fc 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
3d700 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
3d704 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
3d708 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
3d70c 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
3d710 09d 01 DE 07 F1 |                             add     a, #1
3d714 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
3d718 09f             |  
3d718 09f             |                             ' setup device control pin states
3d718 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
3d71c 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
3d720 0a1 01 00 00 FF 
3d724 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
3d728 0a3             | 
3d728 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
3d72c 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
3d730 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
3d734 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
3d738 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
3d73c 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
3d740 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
3d744 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
3d748 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
3d74c 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
3d750 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
3d754 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
3d758 0af             | pinloop
3d758 0af             |                             ' generate minimum CE high time before access
3d758 0af A1 07 00 FF 
3d75c 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
3d760 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
3d764 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
3d768 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
3d76c 0b4 1F DE 63 FD |                             waitx   a                       'delay
3d770 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
3d774 0b6             | 
3d774 0b6             |                             ' setup the COG mailboxes and addresses 
3d774 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
3d778 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
3d77c 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
3d780 0b9             | 
3d780 0b9 28 2E 64 FD |                             setq    #24-1
3d784 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
3d788 0bb             | 
3d788 0bb             |                             ' setup the polling loop for active COGs 
3d788 0bb 01 C2 63 FD |                             cogid   id
3d78c 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
3d790 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
3d794 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
3d798 0bf 0A F0 07 F6 |                             mov     ptra, #10
3d79c 0c0 E1 F1 03 FA |                             mul     ptra, id
3d7a0 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
3d7a4 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
3d7a8 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
3d7ac 0c4 03 C2 07 FA |                             mul     id, #3
3d7b0 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
3d7b4 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
3d7b8 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
3d7bc 0c8 D8 01 B0 FD |                             call    #reloadcogs
3d7c0 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
3d7c4 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
3d7c8 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
3d7c8 0cb D8 E5 B7 F9 |                             setd    d, #addr1
3d7cc 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
3d7d0 0cd 08 04 DC FC |                             rep     #2, #8
3d7d4 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
3d7d8 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
3d7dc 0d0             | 
3d7dc 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
3d7dc 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
3d7dc 0d0 01 C2 63 FD |                             cogid   id
3d7e0 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
3d7e4 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
3d7e8 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
3d7ec 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
3d7f0 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
3d7f4 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
3d7f8 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
3d7fc 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
3d800 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
3d804 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
3d808 0db 3F E4 A7 F9 |                             alti    d, #%111_111
3d80c 0dc 00 00 00 F6 |                             mov     0-0, 0-0
3d810 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
3d814 0de A5 E5 03 F1 |                             add     d, const512
3d818 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
3d81c 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
3d820 0e1 00 00 00 F6 |                             mov     0-0, 0-0
3d824 0e2             |                             
3d824 0e2             |                             ' setup register values for control vector loop setup after we return
3d824 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
3d828 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
3d82c 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
3d830 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
3d834 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
3d838 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
3d83c 0e8 D0 C3 8F F9 |                             altd    id, #id0
3d840 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
3d844 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
3d848 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
3d84c 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
3d850 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
3d854 0ee             |  
3d854 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
3d858 0ef 07 CA 07 F5 |                             and     request, #7
3d85c 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
3d860 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
3d864 0f2             |                             fit     $100                    'ensure all init code fits this space
3d864 0f2             | 
3d864 0f2             |                             fit     $100                    'ensure all init code fits this space
3d864 0f2             | 
3d864 0f2 00 00 00 00 
      ...             
3d894 0fe 00 00 00 00 
3d898 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
3d89c 100             | 
3d89c 100             | '..................................................................................................
3d89c 100             | ' Error result handling and COG notification of request completion
3d89c 100             | 
3d89c 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
3d8a0 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
3d8a4 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
3d8a8 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
3d8ac 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
3d8b0 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
3d8b4 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
3d8b8 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
3d8bc 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
3d8c0 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
3d8c4 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
3d8c8 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
3d8cc 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
3d8d0 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
3d8d4 10e             | ' Poller re-starts here after a COG is serviced
3d8d4 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
3d8d8 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
3d8dc 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
3d8e0 111             | ' Main dynamic polling loop repeats until a request arrives
3d8e0 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
3d8e4 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
3d8e8 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
3d8ec 114             | 
3d8ec 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
3d8f0 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
3d8f4 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
3d8f8 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
3d8fc 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
3d900 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
3d904 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
3d908 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
3d90c 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
3d910 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
3d914 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
3d918 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
3d91c 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
3d920 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
3d924 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
3d928 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
3d92c 124             | 
3d92c 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
3d930 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
3d934 126             |  
3d934 126             | '..................................................................................................
3d934 126             | ' List handler                               
3d934 126             | 
3d934 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
3d938 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
3d93c 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
3d940 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
3d944 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
3d948 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
3d94c 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
3d950 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
3d954 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
3d958 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
3d95c 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
3d960 131 33 00 60 FD |                             execf   0-0                     'process the request 
3d964 132             | 
3d964 132             | '..................................................................................................
3d964 132             | ' Restoring per COG state and resuming where we left off
3d964 132             | 
3d964 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
3d968 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
3d96c 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
3d970 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
3d974 136 D8 CB FB F8 |                             getbyte request, addr1, #3
3d978 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
3d97c 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
3d980 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
3d984 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
3d988 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
3d98c 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
3d990 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
3d994 13e             |                    
3d994 13e             | '..................................................................................................
3d994 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
3d994 13e             | 
3d994 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
3d998 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
3d99c 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
3d9a0 141 D0 DF B7 F9 |                             setd    a, #id0
3d9a4 142 D8 DF BF F9 |                             sets    a, #addr1
3d9a8 143 FE FF FF FF 
3d9ac 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
3d9b0 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
3d9b4 146 3F DE A7 F9 |                             alti    a, #%111_111 
3d9b8 147 00 00 F0 F9 |                             muxq    0-0, 0-0
3d9bc 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
3d9c0 149 01 E2 63 FD |                             cogid   c
3d9c4 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
3d9c8 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
3d9cc 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
3d9d0 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
3d9d4 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
3d9d8 14f 00 E0 03 F6 |                             mov     b, 0-0
3d9dc 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
3d9e0 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
3d9e4 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
3d9e8 153 0C 00 90 AD |             if_z            jmp     #excluded               
3d9ec 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
3d9f0 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
3d9f4 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
3d9f8 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
3d9fc 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
3da00 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
3da04 15a             | 
3da04 15a             | 'determine priority cogs and build instructions for the polling sequence
3da04 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
3da08 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
3da0c 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
3da10 15d             | 
3da10 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
3da14 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
3da18 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
3da1c 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
3da20 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
3da24 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
3da28 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
3da2c 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
3da30 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
3da34 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
3da38 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
3da3c 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
3da40 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
3da44 16a             | endprioloop
3da44 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
3da48 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
3da4c 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
3da50 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
3da54 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
3da58 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
3da5c 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
3da60 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
3da64 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
3da68 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
3da6c 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
3da70 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
3da74 176             | 
3da74 176             | ' populate the round robin COG polling instructions
3da74 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
3da78 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
3da7c 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
3da80 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
3da84 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
3da88 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
3da8c 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
3da90 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
3da94 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
3da98 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
3da9c 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
3daa0 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
3daa4 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
3daa8 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
3daac 184             | '..................................................................................................
3daac 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
3daac 184             | 
3daac 184             | set_latency                                                 '            (a) set latency
3daac 184             | get_latency                                                 '            (b) get latency
3daac 184             | set_burst                                                   '            (c) set burst size of bank
3daac 184             | get_burst                                                   '            (d) get burst size of bank
3daac 184             |                                                             '            (e) dump state
3daac 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
3dab0 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
3dab4 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
3dab8 187             |                                                             ' | | | | e  account for following AUGS
3dab8 187 04 00 00 FF 
3dabc 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
3dac0 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
3dac4 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
3dac8 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
3dacc 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
3dad0 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
3dad4 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
3dad8 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
3dadc 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
3dae0 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
3dae4 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
3dae8 193             | 
3dae8 193             | '..................................................................................................
3dae8 193             | ' Misc EXECF code
3dae8 193             | 
3dae8 193 33 72 63 FD | start_read_exec             execf   newburstr
3daec 194 33 7C 63 FD | start_write_exec            execf   resumewrites
3daf0 195 33 78 63 FD | continue_read_exec          execf   lockedreads
3daf4 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
3daf8 197             | 
3daf8 197             | '..................................................................................................
3daf8 197             | ' Variables
3daf8 197             | 
3daf8 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
3dafc 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
3db00 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
3db04 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
3db08 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
3db0c 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
3db10 19d             | 
3db10 19d 00 00 00 80 | xfreq1          long    $80000000
3db14 19e 00 00 00 40 | xfreq2          long    $40000000
3db18 19f 03 00 00 00 | delay           long    3
3db1c 1a0             | 
3db1c 1a0             | lutcodeaddr                 
3db1c 1a0             | startupparams
3db1c 1a0             | excludedcogs                                    'careful: shared register use!
3db1c 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
3db20 1a1 00 00 00 00 | flags           long    0
3db24 1a2             | mask                                            'careful: shared register use!
3db24 1a2 00 00 00 00 | resetmaskA      long    0
3db28 1a3             | limit                                           'careful: shared register use!
3db28 1a3 00 00 00 00 | resetmaskB      long    0
3db2c 1a4 00 00 00 00 | datapins        long    0
3db30 1a5             | const512                                        'careful: shared register use!
3db30 1a5 00 00 00 00 | devicelist      long    0
3db34 1a6 00 00 00 00 | coglist         long    0
3db38 1a7 00 00 00 00 | mbox            long    0 
3db3c 1a8             | 
3db3c 1a8             | clkpin                                          'shared with code patched during init
3db3c 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
3db40 1a9             | cspin                                           'shared with code patched during init
3db40 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
3db44 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
3db48 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
3db4c 1ac 01 00 00 00 | clkdelay        long    1
3db50 1ad 00 00 00 00 | regdatabus      long    0
3db54 1ae             | 
3db54 1ae 10 00 00 00 | deviceaddr      long    $10
3db58 1af             | rrcounter
3db58 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
3db5c 1b0             | 
3db5c 1b0             | ' jump addresses for the per COG handlers
3db5c 1b0 20 00 00 00 | cog0_handler    long    cog0
3db60 1b1 2C 00 00 00 | cog1_handler    long    cog1
3db64 1b2 38 00 00 00 | cog2_handler    long    cog2
3db68 1b3 44 00 00 00 | cog3_handler    long    cog3
3db6c 1b4 50 00 00 00 | cog4_handler    long    cog4
3db70 1b5 5C 00 00 00 | cog5_handler    long    cog5
3db74 1b6 68 00 00 00 | cog6_handler    long    cog6
3db78 1b7 74 00 00 00 | cog7_handler    long    cog7
3db7c 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
3db80 1b9             | 
3db80 1b9             | ' EXECF sequences
3db80 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
3db84 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
3db88 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
3db8c 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
3db90 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
3db94 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
3db98 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
3db9c 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
3db9c 1c0             | 
3db9c 1c0             | 
3db9c 1c0             | ' SKIPF sequences
3db9c 1c0             | skiptable
3db9c 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
3dba0 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
3dba4 1c2 00 00 00 00 |                 long    0                      ' read modify write long
3dba8 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
3dbac 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
3dbb0 1c5 00 00 00 00 | pattern2        long    0
3dbb4 1c6 00 00 00 00 | pattern3        long    0
3dbb8 1c7 77 02 00 00 | singlelong      long    %1001110111  
3dbbc 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
3dbc0 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
3dbc4 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
3dbc8 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
3dbcc 1cc             | 
3dbcc 1cc             | ' LUT RAM address values
3dbcc 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
3dbd0 1cd DD 02 00 00 | continue_read   long    continue_read_lut
3dbd4 1ce DB 02 00 00 | continue_write  long    continue_write_lut
3dbd8 1cf F6 02 00 00 | noread          long    noread_lut
3dbdc 1d0             | 
3dbdc 1d0 00 00 00 00 | id0             long    0
3dbe0 1d1 01 00 00 00 | id1             long    1
3dbe4 1d2 02 00 00 00 | id2             long    2
3dbe8 1d3 03 00 00 00 | id3             long    3
3dbec 1d4 04 00 00 00 | id4             long    4
3dbf0 1d5 05 00 00 00 | id5             long    5
3dbf4 1d6 06 00 00 00 | id6             long    6
3dbf8 1d7 07 00 00 00 | id7             long    7
3dbfc 1d8             | 
3dbfc 1d8             | 'These next 10 request registers below are also temporarily reused during init 
3dbfc 1d8             | 'and COG updates and need to follow immediately after id0-id7
3dbfc 1d8 00 00 00 00 | addr1           long    0
3dc00 1d9 00 00 00 00 | hubdata         long    0
3dc04 1da 00 00 00 00 | count           long    0
3dc08 1db 00 00 00 00 | addr2           long    0
3dc0c 1dc 00 00 00 00 | total           long    0
3dc10 1dd 00 00 00 00 | offset1         long    0
3dc14 1de 00 00 00 00 | offset2         long    0
3dc18 1df 00 00 00 00 | link            long    0
3dc1c 1e0             | 
3dc1c 1e0             | burstwrite                                      'note shared register use during init
3dc1c 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
3dc20 1e1 00 00 00 00 | id              long    0
3dc24 1e2             | 
3dc24 1e2 00 00 00 00 | header          long    0
3dc28 1e3 00 00 00 00 | trailer         long    0
3dc2c 1e4 00 00 00 00 | cmdaddr         long    0
3dc30 1e5 00 00 00 00 | request         long    0
3dc34 1e6 00 00 00 00 | rrlimit         long    0
3dc38 1e7 00 00 00 00 | pinconfig       long    0
3dc3c 1e8 00 00 00 00 | clks            long    0
3dc40 1e9 00 00 00 00 | resume          long    0
3dc44 1ea 00 00 00 00 | orighubsize     long    0
3dc48 1eb 00 00 00 00 | wrclks          long    0
3dc4c 1ec             | 
3dc4c 1ec 00 00 00 00 | pattern         long    0
3dc50 1ed 00 00 00 00 | hubscratch      long    0
3dc54 1ee 00 10 00 00 | val4k           long    4096
3dc58 1ef             | 
3dc58 1ef             | ' temporary general purpose regs
3dc58 1ef 00 00 00 00 | a               long    0
3dc5c 1f0 00 00 00 00 | b               long    0
3dc60 1f1 00 00 00 00 | c               long    0
3dc64 1f2 00 00 00 00 | d               long    0
3dc68 1f3             |                 fit     502
3dc68 1f3             | 
3dc68 1f3             |                 fit     502
3dc68 1f3             | 
3dc68 1f3             | '..................................................................................................
3dc68 1f3             | 
3dc68 1f3             |             orgh
3dc68                 | 
3dc68                 | lut_code
3dc68                 | 'HW init code up to 80 longs
3dc68                 | 
3dc68                 | '..................................................................................................
3dc68                 | ' Memory layout for LUT RAM once operational:
3dc68                 | '
3dc68                 | '  LUT RAM address      Usage
3dc68                 | '  ---------------      ----
3dc68                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
3dc68                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
3dc68                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
3dc68                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
3dc68                 | '
3dc68                 | ' Also during driver COG startup:
3dc68                 | ' $230-$24F is used for HW init setup
3dc68                 | ' $250-$26F is used as temporary vector storage 
3dc68                 | '..................................................................................................
3dc68                 | 
3dc68                 |                 org $230    
3dc68 230             | 
3dc68 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
3dc68 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
3dc6c 231 24 16 60 FD |                             pollxfi
3dc70 232 FF AA 2A FF 
3dc74 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
3dc78 234 28 00 B0 FD |                             call    #sendqspi
3dc7c 235 07 F8 07 FF 
3dc80 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
3dc84 237 28 00 B0 FD |                             call    #sendspi
3dc88 238 F8 07 78 FF 
3dc8c 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
3dc90 23a 1C 00 B0 FD |                             call    #sendspi
3dc94 23b 7F 78 78 FF 
3dc98 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
3dc9c 23d 10 00 B0 FD |                             call    #sendspi 
3dca0 23e 2D 00 64 FD |                             ret
3dca4 23f             | 
3dca4 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
3dca8 240 32 0C 64 FD |                             skipf   #%110
3dcac 241 9C EF 03 F6 |                             mov     pb, xsendimm
3dcb0 242             | 
3dcb0 242 10 D0 07 F6 | sendspi                     mov     clks, #16
3dcb4 243 97 EF 03 F6 |                             mov     pb, ximm8lut
3dcb8 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
3dcbc 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
3dcc0 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
3dcc4 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
3dcc8 248 24 36 60 FD |                             waitxfi                         'wait for the completion
3dccc 249 50 48 63 FD |                             fltl    datapins                'float data bus
3dcd0 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
3dcd4 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
3dcd8 24c             | 
3dcd8 24c 00 00 00 00 
3dcdc 24d 00 00 00 00 
3dce0 24e 00 00 00 00 
3dce4 24f 00 00 00 00 |                 long    0[$270-32-$]
3dce8 250             |                 fit     $270-32  ' keep room for 32 vector longs
3dce8 250             |     
3dce8 250             |                 fit     $270-32  ' keep room for 32 vector longs
3dce8 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
3dce8 250             | rw_vect ' PSRAM jump vectors
3dce8 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3dcec 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3dcf0 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
3dcf4 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
3dcf8 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
3dcfc 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
3dd00 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
3dd04 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
3dd08 258             | ro_vect ' R/O PSRAM jump vectors
3dd08 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3dd0c 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3dd10 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
3dd14 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
3dd18 25c 00 01 00 00 |                 long    unsupported
3dd1c 25d 00 01 00 00 |                 long    unsupported
3dd20 25e 00 01 00 00 |                 long    unsupported
3dd24 25f 00 01 00 00 |                 long    unsupported
3dd28 260             | ctrl_vect ' Control jump vectors
3dd28 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
3dd2c 261 00 01 00 00 |                 long    unsupported
3dd30 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
3dd34 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
3dd38 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
3dd3c 265 00 01 00 00 |                 long    unsupported
3dd40 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
3dd44 267 3E 01 00 00 |                 long    reconfig 
3dd48 268             | no_vect ' Invalid bank jump vectors
3dd48 268 01 01 00 00 |                 long    invalidbank
3dd4c 269 01 01 00 00 |                 long    invalidbank
3dd50 26a 01 01 00 00 |                 long    invalidbank
3dd54 26b 01 01 00 00 |                 long    invalidbank
3dd58 26c 01 01 00 00 |                 long    invalidbank
3dd5c 26d 01 01 00 00 |                 long    invalidbank
3dd60 26e 01 01 00 00 |                 long    invalidbank
3dd64 26f 01 01 00 00 |                 long    invalidbank
3dd68 270             |                 fit     $270
3dd68 270             | 
3dd68 270             |                 fit     $270
3dd68 270             | '..................................................................................................
3dd68 270             | ' PSRAM READS
3dd68 270             |                                                             ' a b c d e f
3dd68 270             |                                                             ' B W L B R L  (a) byte read
3dd68 270             |                                                             ' Y O O U E O  (b) word read
3dd68 270             |                                                             ' T R N R S C  (c) long read
3dd68 270             |                                                             ' E D G S U K  (d) new burst read
3dd68 270             |                                                             '       T M E  (e) resumed sub-burst
3dd68 270             |                                                             '         E D  (f) locked sub-burst
3dd68 270             | 
3dd68 270             | 
3dd68 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
3dd6c 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
3dd70 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
3dd74 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
3dd78 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
3dd7c 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
3dd80 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
3dd84 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
3dd88 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
3dd8c 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
3dd90 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
3dd94 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
3dd98 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
3dd9c 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
3dda0 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
3dda4 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
3dda8 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
3ddac 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
3ddb0 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
3ddb4 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
3ddb8 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
3ddbc 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
3ddc0 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
3ddc4 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
3ddc8 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
3ddcc 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
3ddd0 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
3ddd4 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
3ddd8 28c             | 
3ddd8 28c             |                             ' fall through to read bursts
3ddd8 28c             |                         
3ddd8 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
3ddd8 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
3dddc 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
3dde0 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
3dde4 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
3dde8 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
3ddec 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
3ddf0 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
3ddf4 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
3ddf8 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
3ddfc 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
3de00 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
3de04 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
3de08 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
3de0c 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
3de10 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
3de14 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
3de18 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
3de1c 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
3de20 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
3de24 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
3de28 2a0 E8 D1 03 F1 |                             add     clks, clks
3de2c 2a1             | readcommon
3de2c 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
3de30 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
3de34 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
3de38 2a4             | 
3de38 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
3de3c 2a5 69 C8 63 FD |                             rev     cmdaddr
3de40 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
3de44 2a7 61 C8 63 FD |                             mergeb  cmdaddr
3de48 2a8             | 
3de48 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
3de4c 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
3de50 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
3de50 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
3de54 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
3de58 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
3de5c 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
3de60 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
3de60 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
3de64 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
3de68 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
3de6c 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
3de70 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
3de74 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
3de78 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
3de78 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
3de7c 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
3de80 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
3de84 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
3de88 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
3de8c 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
3de90 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
3de94 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
3de98 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
3de9c 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
3dea0 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
3dea4 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
3dea8 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
3deac 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
3deb0 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
3deb0 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
3deb4 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
3deb8 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
3debc 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
3dec0 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
3dec4 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
3dec8 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
3decc 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
3ded0 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
3ded4 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
3ded8 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
3dedc 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
3dee0 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
3dee4 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
3dee8 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
3deec 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
3def0 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
3def4 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
3def8 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
3defc 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
3df00 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
3df04 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
3df08 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
3df0c 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
3df10 2da 10 03 90 FD |                             jmp     #writecommon
3df14 2db             | 
3df14 2db             | '..................................................................................................
3df14 2db             | ' Burst continuation testing
3df14 2db             | 
3df14 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
3df18 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
3df1c 2dd             | continue_read_lut          
3df1c 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
3df20 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
3df24 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
3df28 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
3df2c 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
3df30 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
3df34 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
3df38 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
3df3c 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
3df40 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
3df44 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
3df48 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
3df4c 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
3df50 2ea             | 
3df50 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
3df54 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
3df58 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
3df5c 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
3df60 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
3df64 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
3df68 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
3df6c 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
3df70 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
3df74 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
3df78 2f4 2A 1C 66 0D |             _ret_           push    #poller
3df7c 2f5             | 
3df7c 2f5             | 
3df7c 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
3df80 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
3df80 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
3df84 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
3df88 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
3df8c 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
3df90 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
3df94 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
3df98 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
3df9c 2fd 2D 00 64 FD |                             ret                             ' | continue processing
3dfa0 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
3dfa4 2ff             | '..................................................................................................
3dfa4 2ff             | ' Completion of requests
3dfa4 2ff             | 
3dfa4 2ff             | complete_rw_lut             
3dfa4 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
3dfa8 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
3dfac 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
3dfb0 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
3dfb4 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
3dfb8 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
3dfbc 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
3dfc0 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
3dfc4 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
3dfc8 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
3dfcc 309 32 62 64 AD |             if_z            skipf   #%110001
3dfd0 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
3dfd4 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
3dfd8 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
3dfdc 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
3dfe0 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
3dfe4 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
3dfe8 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
3dfec 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
3dff0 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
3dff4 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
3dff8 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
3dffc 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
3e000 316             |                                                             ' skipcase (a) gfx copy to/from hub
3e000 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
3e000 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
3e000 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
3e004 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
3e008 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
3e00c 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
3e010 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
3e014 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
3e018 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
3e01c 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
3e020 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
3e024 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
3e028 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
3e02c 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
3e030 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
3e034 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
3e038 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
3e03c 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
3e040 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
3e044 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
3e048 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
3e04c 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
3e050 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
3e054 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
3e058 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
3e05c 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
3e060 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
3e064 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
3e068 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
3e06c 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
3e070 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
3e074 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
3e078 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
3e07c 335 DF B7 03 A6 |             if_z            mov     addr2, link
3e080 336 34 FF 9F AD |             if_z            jmp     #checknext
3e084 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
3e088 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
3e08c 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
3e090 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
3e094 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
3e098 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
3e09c 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
3e0a0 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
3e0a4 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
3e0a8 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
3e0ac 341             | 
3e0ac 341             | '..................................................................................................
3e0ac 341             | ' PSRAM WRITES
3e0ac 341             |                                                             '  a b c d e f g h
3e0ac 341             | 
3e0ac 341             |                                                             '  B W L F B R L L (a) byte write(s)
3e0ac 341             |                                                             '  Y O O I U E O O (b) word write(s)
3e0ac 341             |                                                             '  T R N L R S C C (c) long write(s)
3e0ac 341             |                                                             '  E D G L S U K K (d) resumed fill
3e0ac 341             |                                                             '          T M E E (e) new burst write
3e0ac 341             |                                                             '            E D D (f) resumed burst
3e0ac 341             |                                                             '              F B (g) locked fill
3e0ac 341             |                                                             '              I U (h) locked burst write
3e0ac 341             |                                                             '              L R 
3e0ac 341             |                                                             '              L S 
3e0ac 341             |                                                             '                T 
3e0ac 341             | 
3e0ac 341             | w_single                   
3e0ac 341             | w_fill_cont           
3e0ac 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
3e0b0 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
3e0b4 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
3e0b8 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
3e0bc 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
3e0c0 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
3e0c4 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
3e0c8 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
3e0cc 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
3e0d0 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
3e0d4 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
3e0d8 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
3e0dc 34d             |                ' disable call to r_resume_burst for single longs when z=0
3e0dc 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
3e0e0 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
3e0e4 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
3e0e8 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
3e0ec 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
3e0f0 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
3e0f4 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
3e0f8 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
3e0fc 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
3e100 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
3e104 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
3e108 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
3e10c 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
3e110 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
3e114 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
3e118 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
3e11c 35d             |         
3e11c 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
3e11c 35d             |             '
3e11c 35d             |             '  At least one of these 3 optional components will be sent
3e11c 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
3e11c 35d             |             '     body - N x full longs of data
3e11c 35d             |             '     trailer - last partial long of data
3e11c 35d             |             '
3e11c 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
3e11c 35d             |             '
3e11c 35d             |             'Case    Type                           Sends
3e11c 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
3e11c 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
3e11c 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
3e11c 35d             |             ' 4)     Multiple long fill             body only
3e11c 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
3e11c 35d             | 
3e11c 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
3e11c 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
3e120 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
3e124 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
3e128 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
3e12c 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
3e130 362 13 8C 07 F6 |                             mov     pattern3, #%10011
3e134 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
3e138 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
3e13c 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
3e140 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
3e144 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
3e148 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
3e14c 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
3e150 36a             |                             
3e150 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
3e154 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
3e158 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
3e15c 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
3e160 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
3e164 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
3e168 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
3e16c 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
3e170 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
3e174 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
3e178 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
3e17c 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
3e180 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
3e184 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
3e188 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
3e18c 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
3e190 37a             | 
3e190 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
3e194 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
3e198 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
3e19c 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
3e1a0 37e             |                  
3e1a0 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
3e1a4 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
3e1a8 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
3e1ac 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
3e1b0 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
3e1b4 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
3e1b8 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
3e1bc 385             | 
3e1bc 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
3e1c0 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
3e1c4 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
3e1c8 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
3e1cc 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
3e1d0 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
3e1d4 38b             | 
3e1d4 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
3e1d4 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
3e1d8 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
3e1dc 38d 2A B0 63 FD |                             push    addr1                   'save address
3e1e0 38e             | 
3e1e0 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
3e1e0 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
3e1e4 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
3e1e8 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
3e1ec 391             |             
3e1ec 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
3e1f0 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
3e1f4 393 2B B0 63 FD |                             pop     addr1                   'restore address
3e1f8 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
3e1fc 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
3e200 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
3e204 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
3e208 398             | 
3e208 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
3e20c 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
3e210 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
3e214 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
3e218 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
3e21c 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
3e220 39e             | 
3e220 39e             |                             'trailer is done
3e220 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
3e224 39f             | 
3e224 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
3e228 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
3e22c 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
3e230 3a2             | 
3e230 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
3e234 3a3 69 C8 63 FD |                             rev     cmdaddr                 
3e238 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
3e23c 3a5 61 C8 63 FD |                             mergeb  cmdaddr
3e240 3a6             |                             
3e240 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
3e244 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
3e248 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
3e24c 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
3e250 3aa             |                                                          
3e250 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
3e254 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
3e258 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
3e25c 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
3e260 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
3e264 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
3e268 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
3e26c 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
3e270 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
3e274 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
3e278 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
3e27c 3b5             |  
3e27c 3b5 59 52 63 FD |                             drvh    cspin
3e280 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
3e284 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
3e288 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
3e28c 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
3e290 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
3e294 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
3e298 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
3e29c 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
3e2a0 3be EA E5 03 F6 |                             mov     d, orighubsize
3e2a4 3bf EF E5 63 F0 |                             shl     d, a
3e2a8 3c0 F2 E3 83 F1 |                             sub     c, d
3e2ac 3c1 DD E3 03 F1 |                             add     c, offset1
3e2b0 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
3e2b4 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
3e2b8 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
3e2bc 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
3e2c0 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
3e2c4 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
3e2c8 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
3e2cc 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
3e2d0 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
3e2d4 3cb BB D3 03 F6 |                             mov     resume, restorefill
3e2d8 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
3e2dc 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
3e2e0 3ce 6C FC BF CD |             if_c            call    #yield
3e2e4 3cf 2D 00 64 FD |                             ret
3e2e8 3d0             |                            
3e2e8 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
3e2e8 3d0             |                       '     rczl    pa                      'rotate left into address offset
3e2e8 3d0             |                       '     rczl    c wcz                   'restore count and flags
3e2e8 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
3e2ec 3d1 02 EC 67 F0 |                             shl     pa, #2
3e2f0 3d2 28 06 64 AD |             if_z            setq    #3
3e2f4 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
3e2f8 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
3e2fc 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
3e300 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
3e304 3d7             | 
3e304 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
3e308 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
3e30c 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
3e310 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
3e314 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
3e318 3dc             |                 fit 1024-32
3e318 3dc             |         
3e318 3dc             | 
3e318 3dc             | '..................................................................................................
3e318 3dc             | 
3e318 3dc             |                 fit 1024-32
3e318 3dc 00 00 00 00 
3e31c 3dd 00 00 00 00 
3e320 3de 00 00 00 00 
3e324 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
3e328 3e0             |                 org 1024-32
3e328 000             | 
3e328 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
3e328 000 00 00 00 00 |                 long $0000
3e32c 001 11 11 00 00 |                 long $1111
3e330 002 22 22 00 00 |                 long $2222
3e334 003 33 33 00 00 |                 long $3333
3e338 004 44 44 00 00 |                 long $4444
3e33c 005 55 55 00 00 |                 long $5555
3e340 006 66 66 00 00 |                 long $6666
3e344 007 77 77 00 00 |                 long $7777
3e348 008 88 88 00 00 |                 long $8888
3e34c 009 99 99 00 00 |                 long $9999
3e350 00a AA AA 00 00 |                 long $aaaa
3e354 00b BB BB 00 00 |                 long $bbbb
3e358 00c CC CC 00 00 |                 long $cccc
3e35c 00d DD DD 00 00 |                 long $dddd
3e360 00e EE EE 00 00 |                 long $eeee
3e364 00f FF FF 00 00 |                 long $ffff
3e368 010             | 
3e368 010             | 'masks
3e368 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
3e36c 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
3e370 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
3e374 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
3e378 014             | 
3e378 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
3e37c 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
3e380 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
3e384 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
3e388 018             | 
3e388 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
3e38c 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
3e390 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
3e394 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
3e398 01c             | 
3e398 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
3e39c 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
3e3a0 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
3e3a4 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
3e3a8 020             |         fit 1024
3e3a8 020             | 
3e3a8 020             |         fit 1024
3e3a8 020             | 
3e3a8 020             | '--------------------------------------------------------------------------------------------------
3e3a8 020             |         orgh
3e3a8                 | 
3e3a8                 | gfxexpansion
3e3a8                 |                             'simple line drawing graphics expansion of memory driver
3e3a8                 |                             'jmp     #donerepeats                'just return for now
3e3a8                 | 
3e3a8     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
3e3ac     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
3e3b0     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
3e3b4     DD E1 03 F6 |                             mov     b, offset1              'get error term
3e3b8     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
3e3bc     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
3e3c0     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
3e3c4     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
3e3c8     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
3e3cc     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
3e3d0     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
3e3d4     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
3e3d8     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
3e3dc     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
3e3e0     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
3e3e4     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
3e3e8     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
3e3ec     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
3e3f0     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
3e3f4     DC E5 33 F9 |                             getword d, total, #0            'get line width
3e3f8     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
3e3fc     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
3e400     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
3e404     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
3e408     C3 03 80 FD |                             jmp     #readmask               'continue filling
3e40c                 | 	alignl
3e40c                 | _usbnew_spin2_dat_
3e40c                 |                 org     $000
3e40c 000             | 
3e40c 000             | usb_host_start
3e40c 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
3e410 001             | 
3e410 001 03 00 00 FF 
3e414 002 D0 70 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
3e418 003 02 70 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
3e41c 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
3e420 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
3e424 006 29 70 63 FD |                 setq2   htmp
3e428 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
3e42c 008             | 
3e42c 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
3e430 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
3e434 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
3e438 00b             | 
3e438 00b             | '------------------------------------------------------------------------------
3e438 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
3e438 00b             | ' special because the receiving function must not respond with either STALL or
3e438 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
3e438 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
3e438 00b             | ' corrupt packet, it must ignore the transaction
3e438 00b             | '------------------------------------------------------------------------------
3e438 00b             | ' On entry:
3e438 00b             | '   PTRA - start address of the SETUP data struct.
3e438 00b             | ' On exit:
3e438 00b             | '   retval - PID_ACK on success, otherwise error code.
3e438 00b             | '------------------------------------------------------------------------------
3e438 00b             | txn_setup
3e438 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
3e43c 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
3e440 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
3e444 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
3e448 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
3e44c 010             | .setup
3e44c 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
3e450 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3e454 012 2D 00 64 AD |         if_z    ret
3e458 013 7C 0B B0 FD |                 call    #retry_wait
3e45c 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3e460 015 2D 00 64 AD |         if_z    ret
3e464 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
3e468 017 E0 FF 9F FD |                 jmp     #.setup
3e46c 018             | 
3e46c 018             | '------------------------------------------------------------------------------
3e46c 018             | ' IN/INTERRUPT transaction.
3e46c 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
3e46c 018             | '------------------------------------------------------------------------------
3e46c 018             | ' On entry:
3e46c 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
3e46c 018             | '     CRC(b19..23).
3e46c 018             | ' On exit:
3e46c 018             | '------------------------------------------------------------------------------
3e46c 018             | txn_in
3e46c 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
3e470 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
3e474 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
3e478 01b             | 
3e478 01b             |                 ' Fall through to urx_packet
3e478 01b             | 
3e478 01b             | '------------------------------------------------------------------------------
3e478 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
3e478 01b             | ' received are handshakes and IN DATAx.
3e478 01b             | '------------------------------------------------------------------------------
3e478 01b             | ' On entry:
3e478 01b             | ' On exit:
3e478 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
3e478 01b             | '     returned.
3e478 01b             | '------------------------------------------------------------------------------
3e478 01b             | urx_packet
3e478 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
3e47c 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3e480 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
3e484 01e 1A 92 63 FD |                 getct   hct2
3e488 01f 4E 93 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
3e48c 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
3e490 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
3e494 022             | .wait_sop
3e494 022 22 A7 8A FA |                 rdpin   urx, dm
3e498 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3e49c 024 08 00 90 CD |         if_c    jmp     #.get_pid
3e4a0 025 FC 25 CC FB |                 jnct2   #.wait_sop
3e4a4 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
3e4a8 027             | .get_pid
3e4a8 027 28 02 B0 FD |                 call    #urx_next
3e4ac 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
3e4b0 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
3e4b4 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
3e4b8 02b             | .chk_pid
3e4b8 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3e4bc 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
3e4c0 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
3e4c4 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
3e4c8 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
3e4cc 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
3e4d0 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
3e4d4 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
3e4d8 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
3e4dc 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
3e4e0 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
3e4e4 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
3e4e8 037             | .ack_resend
3e4e8 037 22 A7 82 FA |                 rqpin   urx, dm
3e4ec 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
3e4f0 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
3e4f4 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
3e4f8 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
3e4fc 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
3e500 03d             | .chk_eop
3e500 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3e504 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
3e508 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
3e50c 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
3e510 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
3e514 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
3e518 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
3e51c 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
3e520 045 2D 00 64 FD |                 ret
3e524 046             | .idle
3e524 046 22 A7 82 FA |                 rqpin   urx, dm
3e528 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3e52c 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
3e530 049 2D 00 64 FD |                 ret
3e534 04a             | 
3e534 04a             | '------------------------------------------------------------------------------
3e534 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
3e534 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
3e534 04a             | ' if one is required.
3e534 04a             | '------------------------------------------------------------------------------
3e534 04a             | ' On entry:
3e534 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
3e534 04a             | ' On exit:
3e534 04a             | '------------------------------------------------------------------------------
3e534 04a             | utx_token
3e534 04a 22 A7 82 FA |                 rqpin   urx, dm
3e538 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3e53c 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
3e540 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3e544 04e 34 0D B0 CD |         if_c    call    #utx_pre
3e548 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3e54c 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
3e550 051 5E 71 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
3e554 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
3e558 053             | .next_byte
3e558 053 B8 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
3e55c 054 08 70 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
3e560 055             | .wait
3e560 055 40 46 72 FD |                 testp   dp                      wc
3e564 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
3e568 057 23 03 08 FC |                 akpin   dp
3e56c 058 22 A5 22 FC |                 wypin   utx, dm
3e570 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
3e574 05a             | 
3e574 05a             | '------------------------------------------------------------------------------
3e574 05a             | ' SETUP/OUT/INTERRUPT transaction.
3e574 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
3e574 05a             | '------------------------------------------------------------------------------
3e574 05a             | ' On entry:
3e574 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
3e574 05a             | '     CRC(b19..23).
3e574 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
3e574 05a             | '   pkt_data - count of DATAx payload bytes to send.
3e574 05a             | ' On exit:
3e574 05a             | '------------------------------------------------------------------------------
3e574 05a             | txn_out
3e574 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
3e578 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
3e57c 05c 00 00 C0 FF 
3e580 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
3e584 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
3e588 05f             | 
3e588 05f             |                 ' Fall through to utx_data
3e588 05f             | 
3e588 05f             | '------------------------------------------------------------------------------
3e588 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
3e588 05f             | ' calculated while the data byte is being shifted out. Since data stage
3e588 05f             | ' success/fail is not determined until the status stage of the transaction,
3e588 05f             | ' this routine is only concerned about the current DATAx packet.
3e588 05f             | '------------------------------------------------------------------------------
3e588 05f             | ' On entry:
3e588 05f             | '   PTRA - hub start address of the data to read.
3e588 05f             | '   pkt_cnt - data payload size.
3e588 05f             | ' On exit:
3e588 05f             | '------------------------------------------------------------------------------
3e588 05f             | utx_data
3e588 05f 22 A7 82 FA |                 rqpin   urx, dm
3e58c 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3e590 061 F4 FF 9F CD |         if_c    jmp     #utx_data
3e594 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
3e598 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
3e59c 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3e5a0 065 D8 0C B0 CD |         if_c    call    #utx_pre
3e5a4 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3e5a8 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
3e5ac 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
3e5b0 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
3e5b4 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
3e5b8 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
3e5bc 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
3e5c0 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
3e5c4 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
3e5c8 06f             | .read_byte
3e5c8 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
3e5cc 070 F0 00 B0 FD |                 call    #utx_byte
3e5d0 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
3e5d4 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
3e5d8 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
3e5dc 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
3e5e0 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
3e5e4 076             | .send_crc
3e5e4 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
3e5e8 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
3e5ec 078 D0 00 B0 FD |                 call    #utx_byte
3e5f0 079 5D A5 EA F8 |                 getbyte utx, crc, #1
3e5f4 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
3e5f8 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
3e5fc 07c             | 
3e5fc 07c             | '------------------------------------------------------------------------------
3e5fc 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
3e5fc 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
3e5fc 07c             | ' expects that the packet includes at least the CRC word.
3e5fc 07c             | '
3e5fc 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
3e5fc 07c             | ' was requested, which makes it difficult to determine where the data stops
3e5fc 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
3e5fc 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
3e5fc 07c             | ' USB-16 expected residual value of 0xB001.
3e5fc 07c             | '
3e5fc 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
3e5fc 07c             | ' so the caller can verify IN success before writing the data to its final
3e5fc 07c             | ' destination.
3e5fc 07c             | '------------------------------------------------------------------------------
3e5fc 07c             | ' On entry:
3e5fc 07c             | '   pkt_data - max byte count expected to be in the packet.
3e5fc 07c             | '   newb_flg - signals new byte ready when toggled.
3e5fc 07c             | ' On exit:
3e5fc 07c             | '   pkt_cnt - actual number of bytes read.
3e5fc 07c             | '------------------------------------------------------------------------------
3e5fc 07c             | urx_data
3e5fc 07c F7 75 03 F6 |                 mov     htmp2, pb
3e600 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
3e604 07e 00 00 C0 FF 
3e608 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
3e60c 080 BA EF 03 F6 |                 mov     pb, htmp2
3e610 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
3e614 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
3e618 083 58 83 03 F6 |                 mov     pkt_tmp, pkt_data
3e61c 084 02 82 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
3e620 085             | .wait_byte
3e620 085             | ' In-line rx for max speed
3e620 085 22 A7 82 FA |                 rqpin   urx, dm
3e624 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
3e628 087 53 A5 02 F5 |                 and     utx, urx
3e62c 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
3e630 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
3e634 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
3e638 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
3e63c 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
3e640 08d DC FF 9F FD |                 jmp     #.wait_byte
3e644 08e             | .get_byte
3e644 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
3e648 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
3e64c 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
3e650 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
3e654 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
3e658 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
3e65c 094             | .end_crc
3e65c 094 01 B8 06 F1 |                 add     pkt_cnt, #1
3e660 095 C1 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
3e664 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
3e668 097 2D 00 64 1D |         if_a    ret
3e66c 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
3e66c 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
3e66c 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
3e66c 098             | ' to miss it, so cheat a bit and look for SOP clear here.
3e66c 098 22 A7 82 FA |                 rqpin   urx, dm
3e670 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
3e674 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
3e678 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
3e678 09b             | .chk_crc
3e678 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
3e67c 09c 58 00 00 FF 
3e680 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
3e684 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
3e688 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
3e68c 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
3e690 0a1 34 09 B0 FD |                 call    #poll_waitx
3e694 0a2             | 
3e694 0a2             |                 ' Fall through to utx_handshake
3e694 0a2             | 
3e694 0a2             | '------------------------------------------------------------------------------
3e694 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
3e694 0a2             | ' the appropriate IP delay has been inserted.
3e694 0a2             | '------------------------------------------------------------------------------
3e694 0a2             | ' On entry:
3e694 0a2             | '   retval - handshake PID to send.
3e694 0a2             | ' On exit:
3e694 0a2             | '   retval unchanged.
3e694 0a2             | '------------------------------------------------------------------------------
3e694 0a2             | utx_handshake
3e694 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3e698 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
3e69c 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3e6a0 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
3e6a4 0a6 5F A5 02 F6 |                 mov     utx, retval
3e6a8 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
3e6ac 0a8             | .idle
3e6ac 0a8 22 A7 82 FA |                 rqpin   urx, dm
3e6b0 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3e6b4 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
3e6b8 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
3e6bc 0ac 08 09 90 FD |                 jmp     #poll_waitx
3e6c0 0ad             | 
3e6c0 0ad             | '------------------------------------------------------------------------------
3e6c0 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
3e6c0 0ad             | '------------------------------------------------------------------------------
3e6c0 0ad             | ' On entry:
3e6c0 0ad             | '   utx - byte to transmit.
3e6c0 0ad             | ' On exit:
3e6c0 0ad             | '------------------------------------------------------------------------------
3e6c0 0ad             | utx_byte
3e6c0 0ad 40 46 72 FD |                 testp   dp                      wc
3e6c4 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
3e6c8 0af 23 03 08 FC |                 akpin   dp
3e6cc 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
3e6d0 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
3e6d4 0b2             | 
3e6d4 0b2             | '------------------------------------------------------------------------------
3e6d4 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
3e6d4 0b2             | '------------------------------------------------------------------------------
3e6d4 0b2             | ' On entry:
3e6d4 0b2             | ' On exit:
3e6d4 0b2             | '   retval - the byte read.
3e6d4 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
3e6d4 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
3e6d4 0b2             | '     received.
3e6d4 0b2             | '------------------------------------------------------------------------------
3e6d4 0b2             | urx_next
3e6d4 0b2 22 A7 8A FA |                 rdpin   urx, dm
3e6d8 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
3e6dc 0b4 53 A5 02 F5 |                 and     utx, urx
3e6e0 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
3e6e4 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
3e6e8 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
3e6ec 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
3e6f0 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3e6f4 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
3e6f8 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
3e6fc 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
3e700 0bd 2D 00 64 FD |                 ret
3e704 0be             | 
3e704 0be             | '------------------------------------------------------------------------------
3e704 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
3e704 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
3e704 0be             | ' length, and the PID is not included in the CRC calculation:
3e704 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
3e704 0be             | '  CRC5  ENDP ADDRESS PID
3e704 0be             | ' %00000_1111_1111111_xxxxxxxx
3e704 0be             | '------------------------------------------------------------------------------
3e704 0be             | ' On entry:
3e704 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
3e704 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
3e704 0be             | ' On exit:
3e704 0be             | '   ep_addr_pid - CRC value appended to the packet.
3e704 0be             | '------------------------------------------------------------------------------
3e704 0be             | calc_crc5
3e704 0be FF 03 00 FF 
3e708 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
3e70c 0c0 5E 71 03 F6 |                 mov     htmp, ep_addr_pid
3e710 0c1 08 70 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
3e714 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
3e718 0c3 69 70 63 FD |                 rev     htmp                            ' Input data reflected
3e71c 0c4 28 70 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
3e720 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
3e724 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
3e728 0c7 09 70 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
3e72c 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
3e730 0c9 01 70 77 F0 |                 shl     htmp, #1                wc
3e734 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
3e738 0cb 01 70 77 F0 |                 shl     htmp, #1                wc
3e73c 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
3e740 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
3e744 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
3e748 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
3e74c 0d0             | 
3e74c 0d0             | '------------------------------------------------------------------------------
3e74c 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
3e74c 0d0             | '------------------------------------------------------------------------------
3e74c 0d0             | isr1_fsframe
3e74c 0d0 1A 92 62 FD |                 getct   iframe_ct_base
3e750 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3e754 0d2 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3e758 0d3 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3e75c 0d4             | .wait
3e75c 0d4 40 46 72 FD |                 testp   dp                      wc
3e760 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
3e764 0d6 23 03 08 FC |                 akpin   dp
3e768 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
3e76c 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
3e770 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
3e774 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
3e778 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
3e77c 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
3e780 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
3e784 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
3e788 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
3e78c 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
3e790 0e1 2C FF BF FD |                 call    #utx_byte
3e794 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
3e798 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
3e79c 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
3e7a0 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
3e7a4 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
3e7a8 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
3e7ac 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
3e7b0 0e9 5B A5 42 F5 |                 or      utx, icrc
3e7b4 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
3e7b8 0eb A3 81 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
3e7bc 0ec 20 00 90 FD |                 jmp     #isr1_wait
3e7c0 0ed             | isr1_lsframe
3e7c0 0ed 1A 92 62 FD |                 getct   iframe_ct_base
3e7c4 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3e7c8 0ef B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3e7cc 0f0             | .wait
3e7cc 0f0 40 46 72 FD |                 testp   dp                      wc
3e7d0 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
3e7d4 0f2 23 03 08 FC |                 akpin   dp
3e7d8 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
3e7dc 0f4 A2 81 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
3e7e0 0f5             | isr1_wait
3e7e0 0f5 22 A5 82 FA |                 rqpin   utx, dm
3e7e4 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
3e7e8 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
3e7ec 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
3e7f0 0f9 03 00 00 FF 
3e7f4 0fa FF B3 06 F5 |                 and     frame, ##$7ff
3e7f8 0fb 1F 80 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
3e7fc 0fc F5 FF 3B FB |                 reti1
3e800 0fd             | 
3e800 0fd             | '------------------------------------------------------------------------------
3e800 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
3e800 0fd             | ' transaction will complete before the next frame is triggered.
3e800 0fd             | '------------------------------------------------------------------------------
3e800 0fd             | ' On entry:
3e800 0fd             | ' On exit:
3e800 0fd             | '------------------------------------------------------------------------------
3e800 0fd             | wait_txn_ok
3e800 0fd 1A 74 63 FD |                 getct   htmp2
3e804 0fe 49 75 83 F1 |                 sub     htmp2, iframe_ct_base
3e808 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3e80c 100 A0 75 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
3e810 101 A1 75 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
3e814 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
3e818 103 2D 00 64 FD |                 ret
3e81c 104             | 
3e81c 104             | '------------------------------------------------------------------------------
3e81c 104             | ' A device connection was detected, or a bus reset was requested by the USB
3e81c 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
3e81c 104             | ' and perform a reset sequence prior to device enumeration.
3e81c 104             | '------------------------------------------------------------------------------
3e81c 104             | dev_reset
3e81c 104 22 A7 82 FA |                 rqpin   urx, dm
3e820 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
3e824 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
3e828 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
3e82c 108             | reset
3e82c 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
3e830 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
3e834 10a 1F 5A 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
3e838 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3e83c 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
3e840 10d 1A 92 62 FD |                 getct   iframe_ct_base
3e844 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3e848 10f B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3e84c 110 59 71 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
3e850 111 24 70 07 F1 |                 add     htmp, #36
3e854 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
3e858 113             | .framewait
3e858 113 B8 B3 1A F2 |                 cmp     frame, htmp             wcz
3e85c 114 F8 FF 9F CD |         if_b    jmp     #.framewait
3e860 115 2D 00 64 FD |                 ret
3e864 116             | 
3e864 116             | '------------------------------------------------------------------------------
3e864 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
3e864 116             | '------------------------------------------------------------------------------
3e864 116             | ' On entry:
3e864 116             | '   PTRA - source address.
3e864 116             | '   PB - destination address.
3e864 116             | '   hr0 - length of copy, in bytes.
3e864 116             | ' On exit:
3e864 116             | '------------------------------------------------------------------------------
3e864 116             | hmemcpy
3e864 116 61 71 C7 FA |                 rdbyte  htmp, ptra++
3e868 117 F7 71 43 FC |                 wrbyte  htmp, pb
3e86c 118 01 EE 07 F1 |                 add     pb, #1
3e870 119 FC 85 6F 0B |         _ret_   djnz    hr0, #hmemcpy
3e874 11a             | 
3e874 11a             | '------------------------------------------------------------------------------
3e874 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
3e874 11a             | ' loop until the errant device is disconnected.
3e874 11a             | '------------------------------------------------------------------------------
3e874 11a             | ' On entry:
3e874 11a             | ' On exit:
3e874 11a             | '------------------------------------------------------------------------------
3e874 11a             | host_error
3e874 11a             |           if ERROR_LED >= 0
3e874 11a             |           end
3e874 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
3e878 11b             | 
3e878 11b             | '------------------------------------------------------------------------------
3e878 11b             | ' Get HID descriptor buffer for current port
3e878 11b             | '------------------------------------------------------------------------------
3e878 11b             | ' On entry:
3e878 11b             | ' On exit:
3e878 11b             | '   PB - HID descriptor buffer pointer
3e878 11b             | '------------------------------------------------------------------------------
3e878 11b             | get_hid_descr_buffer
3e878 11b 2D EF 03 F6 |                 mov     pb, hdev_port
3e87c 11c 01 EE E7 F2 |                 cmpsub  pb, #1
3e880 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
3e884 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
3e888 11f             | 
3e888 11f             | 
3e888 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
3e88c 120             | 
3e88c 120             | ' USB commands and error codes
3e88c 120 00 00 00 00 | cmd_data        long    0
3e890 121 00 00 00 00 | usb_err_code    long    ERR_NONE
3e894 122             | 
3e894 122             | ' Parameters block assigned at cog startup
3e894 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
3e898 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
3e89c 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
3e8a0 125             | if ACTIVITY_LED >= 0
3e8a0 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
3e8a0 125             | end
3e8a0 125             | if ERROR_LED >= 0
3e8a0 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
3e8a0 125             | end
3e8a0 125 00 00 00 00 | hid_descr_p     long    0
3e8a4 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
3e8a4 126             | 'hkbd_report_p   long    0
3e8a4 126 00 00 00 00 | hub_descr_p     long    0
3e8a8 127 00 00 00 00 | urx_buff_p      long    0
3e8ac 128 00 00 00 00 | dev_desc_buff_p long    0
3e8b0 129 00 00 00 00 | con_desc_buff_p long    0
3e8b4 12a 00 00 00 00 | cache_start_p   long    0
3e8b8 12b 00 00 00 00 | cache_end_p     long    0
3e8bc 12c             | if EMUPAD_MAX_PLAYER > 0
3e8bc 12c             | emupad_out_ptr  long    0
3e8bc 12c             | end
3e8bc 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
3e8c0 12d             | 
3e8c0 12d             | hdev_init_start
3e8c0 12d             | hdev_port       res     1
3e8c0 12d             | hdev_port       res     1
3e8c0 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
3e8c0 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
3e8c0 12d             | kbm_next_datax  res     1
3e8c0 12d             | kbm_next_datax  res     1
3e8c0 12d             | hub_intf_num    res     1
3e8c0 12d             | hub_intf_num    res     1
3e8c0 12d             | hub_next_datax  res     1
3e8c0 12d             | hub_next_datax  res     1
3e8c0 12d             | hub_status_chg  res     1
3e8c0 12d             | hub_status_chg  res     1
3e8c0 12d             | hub_port_status res     1
3e8c0 12d             | hub_port_status res     1
3e8c0 12d             | if HAVE_MOUSE
3e8c0 12d             | ms_intf_num     res     1
3e8c0 12d             | ms_intf_num     res     1
3e8c0 12d             | ms_in_max_pkt   res     1
3e8c0 12d             | ms_in_max_pkt   res     1
3e8c0 12d             | end
3e8c0 12d             | kb_intf_num     res     1
3e8c0 12d             | kb_intf_num     res     1
3e8c0 12d             | kb_interval     res     1
3e8c0 12d             | kb_interval     res     1
3e8c0 12d             | kb_in_max_pkt   res     1
3e8c0 12d             | kb_in_max_pkt   res     1
3e8c0 12d             | kb_max_index    res     1
3e8c0 12d             | kb_max_index    res     1
3e8c0 12d             | kb_led_states   res     1
3e8c0 12d             | kb_led_states   res     1
3e8c0 12d             | gp_intf_num     res     1
3e8c0 12d             | gp_intf_num     res     1
3e8c0 12d             | gp_interval     res     1
3e8c0 12d             | gp_interval     res     1
3e8c0 12d             | gp_max_index    res     1
3e8c0 12d             | gp_max_index    res     1
3e8c0 12d             | gp_descr_len    res     1+MAX_DEVICES
3e8c0 12d             | gp_descr_len    res     1+MAX_DEVICES
3e8c0 12d             | hdev_init_end
3e8c0 12d             | 
3e8c0 12d             | ' Initialized at cog startup:
3e8c0 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
3e8c0 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
3e8c0 12d             | iframe_ct_new   res     1
3e8c0 12d             | iframe_ct_new   res     1
3e8c0 12d             | iframe_ct_base  res     1
3e8c0 12d             | iframe_ct_base  res     1
3e8c0 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
3e8c0 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
3e8c0 12d             | 
3e8c0 12d             | ' This register block is reset to zero when a USB device connects
3e8c0 12d             | hreg_init_start
3e8c0 12d             | hstatus         res     1         ' Host status flags
3e8c0 12d             | hstatus         res     1         ' Host status flags
3e8c0 12d             | hctwait         res     1         ' Poll-based wait clocks
3e8c0 12d             | hctwait         res     1         ' Poll-based wait clocks
3e8c0 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
3e8c0 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
3e8c0 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
3e8c0 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
3e8c0 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
3e8c0 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
3e8c0 12d             | xfer_retry      res     1         ' Control transfer retry count
3e8c0 12d             | xfer_retry      res     1         ' Control transfer retry count
3e8c0 12d             | retry           res     1         ' Transaction retry count
3e8c0 12d             | retry           res     1         ' Transaction retry count
3e8c0 12d             | utx             res     1         ' Byte to transmit on USB
3e8c0 12d             | utx             res     1         ' Byte to transmit on USB
3e8c0 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
3e8c0 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
3e8c0 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
3e8c0 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
3e8c0 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
3e8c0 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
3e8c0 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
3e8c0 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
3e8c0 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
3e8c0 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
3e8c0 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
3e8c0 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
3e8c0 12d             | frame           res     1         ' USB 1ms frame counter value
3e8c0 12d             | frame           res     1         ' USB 1ms frame counter value
3e8c0 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
3e8c0 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
3e8c0 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
3e8c0 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
3e8c0 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
3e8c0 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
3e8c0 12d             | crc             res     1         ' Used for CRC16 calculation
3e8c0 12d             | crc             res     1         ' Used for CRC16 calculation
3e8c0 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
3e8c0 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
3e8c0 12d             | retval          res     1         ' Global success/fail return parameter
3e8c0 12d             | retval          res     1         ' Global success/fail return parameter
3e8c0 12d             | context_retval  res     1         ' Operation contextual return parameter
3e8c0 12d             | context_retval  res     1         ' Operation contextual return parameter
3e8c0 12d             | ' Device stuff
3e8c0 12d             | hdev_id         res     1+MAX_DEVICES
3e8c0 12d             | hdev_id         res     1+MAX_DEVICES
3e8c0 12d             | hdev_bcd        res     1
3e8c0 12d             | hdev_bcd        res     1
3e8c0 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
3e8c0 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
3e8c0 12d             | ' Keyboard/mouse stuff
3e8c0 12d             | hctrl_ep_addr   res     1
3e8c0 12d             | hctrl_ep_addr   res     1
3e8c0 12d             | hctrl_max_pkt   res     1
3e8c0 12d             | hctrl_max_pkt   res     1
3e8c0 12d             | hconfig_base    res     1
3e8c0 12d             | hconfig_base    res     1
3e8c0 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
3e8c0 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
3e8c0 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
3e8c0 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
3e8c0 12d             | hdev_class      res     1
3e8c0 12d             | hdev_class      res     1
3e8c0 12d             | hdev_subclass   res     1
3e8c0 12d             | hdev_subclass   res     1
3e8c0 12d             | hdev_protocol   res     1
3e8c0 12d             | hdev_protocol   res     1
3e8c0 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
3e8c0 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
3e8c0 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
3e8c0 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
3e8c0 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
3e8c0 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
3e8c0 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
3e8c0 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
3e8c0 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
3e8c0 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
3e8c0 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
3e8c0 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
3e8c0 12d             | if HAVE_MOUSE
3e8c0 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
3e8c0 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
3e8c0 12d             | end
3e8c0 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
3e8c0 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
3e8c0 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
3e8c0 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
3e8c0 12d             | hdev_ep_addr    res     1+MAX_DEVICES
3e8c0 12d             | hdev_ep_addr    res     1+MAX_DEVICES
3e8c0 12d             | hdev_out_addr   res     1
3e8c0 12d             | hdev_out_addr   res     1
3e8c0 12d             | 
3e8c0 12d             | if EMUPAD_MAX_PLAYER > 0
3e8c0 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
3e8c0 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
3e8c0 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
3e8c0 12d             | end
3e8c0 12d             | 
3e8c0 12d             | hreg_init_end
3e8c0 12d             | 
3e8c0 12d             | hidr_start
3e8c0 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
3e8c0 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
3e8c0 12d             | hidr_flags      res     1
3e8c0 12d             | hidr_flags      res     1
3e8c0 12d             | hidr_axis       res     3
3e8c0 12d             | hidr_axis       res     3
3e8c0 12d             | hidr_buttons    res     1
3e8c0 12d             | hidr_buttons    res     1
3e8c0 12d             | hidr_hats       res     1
3e8c0 12d             | hidr_hats       res     1
3e8c0 12d             | '' Above are actually useful values, 6 longs
3e8c0 12d             | hidr_id         res     1
3e8c0 12d             | hidr_id         res     1
3e8c0 12d             | hidr_state      res     1
3e8c0 12d             | hidr_state      res     1
3e8c0 12d             | hidr_size       res     1
3e8c0 12d             | hidr_size       res     1
3e8c0 12d             | hidr_count      res     1
3e8c0 12d             | hidr_count      res     1
3e8c0 12d             | hidr_offset     res     1
3e8c0 12d             | hidr_offset     res     1
3e8c0 12d             | hidr_usage_idx  res     1
3e8c0 12d             | hidr_usage_idx  res     1
3e8c0 12d             | hidr_lminmax    res     1
3e8c0 12d             | hidr_lminmax    res     1
3e8c0 12d             | hidr_pminmax    res     1
3e8c0 12d             | hidr_pminmax    res     1
3e8c0 12d             | hidr_type       res     1
3e8c0 12d             | hidr_type       res     1
3e8c0 12d             | hidr_end
3e8c0 12d             | 
3e8c0 12d             | ' Variables dependent on the system freqency
3e8c0 12d             | _var_64_lower_  res     1
3e8c0 12d             | _var_64_lower_  res     1
3e8c0 12d             | _var_64_upper_  res     1
3e8c0 12d             | _var_64_upper_  res     1
3e8c0 12d             | _12Mbps_        res     1
3e8c0 12d             | _12Mbps_        res     1
3e8c0 12d             | _1_5Mbps_       res     1
3e8c0 12d             | _1_5Mbps_       res     1
3e8c0 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
3e8c0 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
3e8c0 12d             | _1us_           res     1         ' 1us
3e8c0 12d             | _1us_           res     1         ' 1us
3e8c0 12d             | _10us_          res     1         ' 10us
3e8c0 12d             | _10us_          res     1         ' 10us
3e8c0 12d             | _33us_          res     1         ' 33us
3e8c0 12d             | _33us_          res     1         ' 33us
3e8c0 12d             | _txn_err_       res     1         ' 250us
3e8c0 12d             | _txn_err_       res     1         ' 250us
3e8c0 12d             | _500us_         res     1         ' 500us
3e8c0 12d             | _500us_         res     1         ' 500us
3e8c0 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
3e8c0 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
3e8c0 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
3e8c0 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
3e8c0 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
3e8c0 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
3e8c0 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
3e8c0 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
3e8c0 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
3e8c0 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
3e8c0 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
3e8c0 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
3e8c0 12d             | _preamble_wait_ res     1
3e8c0 12d             | _preamble_wait_ res     1
3e8c0 12d             | _1ms_           res     1         ' 1ms
3e8c0 12d             | _1ms_           res     1         ' 1ms
3e8c0 12d             | _2ms_           res     1         ' 2ms
3e8c0 12d             | _2ms_           res     1         ' 2ms
3e8c0 12d             | _suspend_wait_  res     1         ' 3ms
3e8c0 12d             | _suspend_wait_  res     1         ' 3ms
3e8c0 12d             | _4ms_           res     1         ' 4ms
3e8c0 12d             | _4ms_           res     1         ' 4ms
3e8c0 12d             | _xfer_wait_     res     1         ' 5ms
3e8c0 12d             | _xfer_wait_     res     1         ' 5ms
3e8c0 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
3e8c0 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
3e8c0 12d             | _reset_hold_    res     1         ' 15ms
3e8c0 12d             | _reset_hold_    res     1         ' 15ms
3e8c0 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
3e8c0 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
3e8c0 12d             | _21ms_          res     1         ' 21ms
3e8c0 12d             | _21ms_          res     1         ' 21ms
3e8c0 12d             | _100ms_         res     1         ' 100ms
3e8c0 12d             | _100ms_         res     1         ' 100ms
3e8c0 12d             | _500ms_         res     1         ' 500ms
3e8c0 12d             | _500ms_         res     1         ' 500ms
3e8c0 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
3e8c0 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
3e8c0 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
3e8c0 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
3e8c0 12d             | '------------------------------------------------------------------------------
3e8c0 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
3e8c0 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
3e8c0 12d             | _usb_d_ls_nco_  res     1
3e8c0 12d             | _usb_d_ls_nco_  res     1
3e8c0 12d             | _usb_h_fs_nco_  res     1
3e8c0 12d             | _usb_h_fs_nco_  res     1
3e8c0 12d             | _usb_d_fs_nco_  res     1
3e8c0 12d             | _usb_d_fs_nco_  res     1
3e8c0 12d             | '------------------------------------------------------------------------------
3e8c0 12d             | ' Scratch registers
3e8c0 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
3e8c0 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
3e8c0 12d             | htmp1           res     1
3e8c0 12d             | htmp1           res     1
3e8c0 12d             | htmp2           res     1
3e8c0 12d             | htmp2           res     1
3e8c0 12d             | htmp3           res     1
3e8c0 12d             | htmp3           res     1
3e8c0 12d             | hrep            res     1         ' Repeat count
3e8c0 12d             | hrep            res     1         ' Repeat count
3e8c0 12d             | hsave0          res     1         ' Subroutine parameter saves
3e8c0 12d             | hsave0          res     1         ' Subroutine parameter saves
3e8c0 12d             | hsave1          res     1
3e8c0 12d             | hsave1          res     1
3e8c0 12d             | hsave2          res     1
3e8c0 12d             | hsave2          res     1
3e8c0 12d             | isrtmp1         res     1
3e8c0 12d             | isrtmp1         res     1
3e8c0 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
3e8c0 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
3e8c0 12d             | hr0             res     1         ' Multi-purpose registers
3e8c0 12d             | hr0             res     1         ' Multi-purpose registers
3e8c0 12d             | hr1             res     1
3e8c0 12d             | hr1             res     1
3e8c0 12d             | hr2             res     1
3e8c0 12d             | hr2             res     1
3e8c0 12d             | hr3             res     1
3e8c0 12d             | hr3             res     1
3e8c0 12d             | hpar1           res     1         ' Routine entry/exit parameters
3e8c0 12d             | hpar1           res     1         ' Routine entry/exit parameters
3e8c0 12d             | hpar2           res     1
3e8c0 12d             | hpar2           res     1
3e8c0 12d             | hpar3           res     1
3e8c0 12d             | hpar3           res     1
3e8c0 12d             | hct2            res     1         ' Function response bus turn-around timer
3e8c0 12d             | hct2            res     1         ' Function response bus turn-around timer
3e8c0 12d             | hct3            res     1         ' Keyboard/mouse poll timer
3e8c0 12d             | hct3            res     1         ' Keyboard/mouse poll timer
3e8c0 12d             | mod_cnt         res     1         ' Used in idle loops
3e8c0 12d             | mod_cnt         res     1         ' Used in idle loops
3e8c0 12d             |                 fit     $1F0
3e8c0 12d             |                 org     $200
3e8c0 200             | hlut_start
3e8c0 200             | 
3e8c0 200             | '------------------------------------------------------------------------------
3e8c0 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
3e8c0 200             | ' settings to startup defaults.
3e8c0 200             | '------------------------------------------------------------------------------
3e8c0 200             | ' On entry:
3e8c0 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
3e8c0 200             | '------------------------------------------------------------------------------
3e8c0 200             | set_speed_full
3e8c0 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
3e8c4 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
3e8c8 202 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
3e8cc 203 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
3e8d0 204             | '                ret                             wcz     ' Restore caller flags on exit
3e8d0 204             | 
3e8d0 204             | '------------------------------------------------------------------------------
3e8d0 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
3e8d0 204             | ' is a downstream hub connected (not yet implemented), the baud generator
3e8d0 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
3e8d0 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
3e8d0 204             | ' putting the smart pins into reset.
3e8d0 204             | '------------------------------------------------------------------------------
3e8d0 204             | ' On entry:
3e8d0 204             | ' On exit: CZ flags restored to caller states
3e8d0 204             | '------------------------------------------------------------------------------
3e8d0 204             | set_speed_low
3e8d0 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
3e8d4 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
3e8d8 206 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
3e8dc 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
3e8e0 208 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
3e8e4 209 A2 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
3e8e8 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
3e8ec 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
3e8f0 20c             | 
3e8f0 20c             | '------------------------------------------------------------------------------
3e8f0 20c             | ' Perform configuration stuff required when a device intitially connects.
3e8f0 20c             | '------------------------------------------------------------------------------
3e8f0 20c             | ' On entry:
3e8f0 20c             | ' On exit:
3e8f0 20c             | '------------------------------------------------------------------------------
3e8f0 20c             | on_connect
3e8f0 20c 02 84 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
3e8f4 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
3e8f8 20e             | .retry
3e8f8 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3e8fc 20f 01 8C 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
3e900 210 02 8C 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
3e904 211 00 08 00 FF 
3e908 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
3e90c 213 18 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
3e910 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3e914 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
3e918 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
3e91c 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
3e920 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3e924 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
3e928 21a B1 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
3e92c 21b 4C 03 B0 FD |                 call    #poll_waitx
3e930 21c 01 84 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
3e934 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
3e938 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
3e93c 21f B8 FF 9F FD |                 jmp     #.retry
3e940 220             | .get_dev_desc
3e940 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
3e944 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
3e948 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
3e94c 223 A7 99 02 F6 |                 mov     hctwait, _1ms_
3e950 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
3e954 225 88 FB BF FD |                 call    #reset
3e958 226 30 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
3e95c 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3e960 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
3e964 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
3e968 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3e96c 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
3e970 22c AC 99 02 F6 |                 mov     hctwait, _8ms_
3e974 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
3e978 22e 04 00 00 FF 
3e97c 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
3e980 230 34 FA BF FD |                 call    #calc_crc5
3e984 231 18 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
3e988 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3e98c 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
3e990 234 F7 AD C2 FA |                 rdbyte  total_data, pb
3e994 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
3e998 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
3e99c 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3e9a0 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
3e9a4 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
3e9a8 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
3e9ac 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
3e9b0 23c 9F 99 02 F6 |                 mov     hctwait, _500us_
3e9b4 23d C4 02 B0 FD |                 call    #poll_waitx
3e9b8 23e 20 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
3e9bc 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3e9c0 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
3e9c4 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
3e9c8 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
3e9cc 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3e9d0 244 2D 00 64 5D |         if_nz   ret
3e9d4 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
3e9d8 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
3e9dc 247 61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
3e9e0 248 61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
3e9e4 249 00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
3e9e8 24a 09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
3e9ec 24b 02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
3e9f0 24c 56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
3e9f4 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
3e9f8 24e 2C FB 9F CD |         if_b    jmp     #host_error
3e9fc 24f 10 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
3ea00 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
3ea04 251 2D EC 63 FD |                 call    pa
3ea08 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
3ea0c 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
3ea10 254 2C EC 63 FD |                 jmp     pa
3ea14 255             | 
3ea14 255             | '------------------------------------------------------------------------------
3ea14 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
3ea14 255             | ' Status reporting is always in the function-to-host direction.
3ea14 255             | '------------------------------------------------------------------------------
3ea14 255             | ' On entry:
3ea14 255             | '   PTRA - start address of the SETUP data in hub.
3ea14 255             | '   PB - start address of the buffer/struct to be written to during the IN data
3ea14 255             | '     stage.
3ea14 255             | '   ep_addr_pid - device address, endpoint and CRC5.
3ea14 255             | ' On exit:
3ea14 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
3ea14 255             | '     contains the count of data stage bytes actually received, which must
3ea14 255             | '     always be <= the count requested.
3ea14 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
3ea14 255             | '     more specific USB operation error code.
3ea14 255             | '------------------------------------------------------------------------------
3ea14 255             | control_read
3ea14 255 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
3ea18 256 F8 8F 03 F6 |                 mov     hpar2, ptra
3ea1c 257 F7 91 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
3ea20 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
3ea24 259             | .xfer_start
3ea24 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
3ea28 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
3ea2c 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3ea30 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
3ea34 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
3ea38 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
3ea3c 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
3ea40 260 61 00 00 FF 
3ea44 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
3ea48 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
3ea4c 263             | .data
3ea4c 263 56 B1 02 F6 |                 mov     pkt_data, total_data
3ea50 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
3ea54 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
3ea58 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
3ea5c 267             | .nak_retry
3ea5c 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
3ea60 268             | .in_retry
3ea60 268 BC F6 BF FD |                 call    #txn_in
3ea64 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
3ea68 26a 28 00 90 AD |         if_z    jmp     #.commit
3ea6c 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3ea70 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
3ea74 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
3ea78 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3ea7c 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
3ea80 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
3ea84 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
3ea88 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3ea8c 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
3ea90 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
3ea94 275             | .commit
3ea94 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
3ea98 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
3ea9c 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
3eaa0 278 5C 85 03 F6 |                 mov     hr0, pkt_cnt
3eaa4 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
3eaa8 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
3eaac 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
3eab0 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
3eab4 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
3eab8 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
3eabc 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
3eac0 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
3eac4 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
3eac8 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
3eacc 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
3ead0 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
3ead4 285             | .pre_status
3ead4 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
3ead8 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
3eadc 287 00 B0 06 F6 |                 mov     pkt_data, #0
3eae0 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
3eae4 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3eae8 28a 61 00 00 FF 
3eaec 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
3eaf0 28c             | .out_retry
3eaf0 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
3eaf4 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3eaf8 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
3eafc 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3eb00 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
3eb04 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
3eb08 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
3eb0c 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
3eb10 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3eb14 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
3eb18 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
3eb1c 297             | ' I've encountered transfer STALL, even though the data looks correct, and
3eb1c 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
3eb1c 297             | ' ControlRead() transfer gets things unstuck most of the time...
3eb1c 297             | .xfer_retry
3eb1c 297 AB 99 02 F6 |                 mov     hctwait, _xfer_wait_
3eb20 298 58 01 B0 FD |                 call    #poll_waitx
3eb24 299 8C F9 BF FD |                 call    #wait_txn_ok
3eb28 29a C6 BD 02 F6 |                 mov     ep_addr_pid, hpar1
3eb2c 29b C7 F1 03 F6 |                 mov     ptra, hpar2
3eb30 29c C8 EF 03 F6 |                 mov     pb, hpar3
3eb34 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
3eb38 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
3eb3c 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
3eb40 2a0             | 
3eb40 2a0             | '------------------------------------------------------------------------------
3eb40 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
3eb40 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
3eb40 2a0             | ' the SETUP data struct is filled with the required values.
3eb40 2a0             | '------------------------------------------------------------------------------
3eb40 2a0             | ' On entry:
3eb40 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
3eb40 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
3eb40 2a0             | '     stage.
3eb40 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
3eb40 2a0             | ' On exit:
3eb40 2a0             | '   retval - used to convey the success/failure of each stage.
3eb40 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
3eb40 2a0             | '     more specific USB operation error code.
3eb40 2a0             | '------------------------------------------------------------------------------
3eb40 2a0             | control_write
3eb40 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3eb44 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3eb48 2a2 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3eb4c 2a3             | 
3eb4c 2a3 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
3eb50 2a4 F8 8F 03 F6 |                 mov     hpar2, ptra
3eb54 2a5 F7 91 03 F6 |                 mov     hpar3, pb
3eb58 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
3eb5c 2a7             | .xfer_start
3eb5c 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
3eb60 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
3eb64 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
3eb68 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3eb6c 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
3eb70 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
3eb74 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
3eb78 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
3eb7c 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
3eb80 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
3eb84 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3eb88 2b2             | .data
3eb88 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
3eb8c 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
3eb90 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
3eb94 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
3eb98 2b6             | .out_retry
3eb98 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
3eb9c 2b7 88 F6 BF FD |                 call    #txn_out
3eba0 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3eba4 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
3eba8 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
3ebac 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
3ebb0 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
3ebb4 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
3ebb8 2be             | .commit
3ebb8 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
3ebbc 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
3ebc0 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
3ebc4 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
3ebc8 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
3ebcc 2c3             | pre_status_in
3ebcc 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
3ebd0 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3ebd4 2c5             | .status_retry
3ebd4 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
3ebd8 2c6 44 F5 BF FD |                 call    #txn_in
3ebdc 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
3ebe0 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
3ebe4 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
3ebe8 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
3ebec 2cb 2D 00 64 AD |         if_z    ret
3ebf0 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
3ebf4 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3ebf8 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
3ebfc 2cf             | '               ret                                     ' Caller must handle transfer retirement
3ebfc 2cf             | 
3ebfc 2cf             | '------------------------------------------------------------------------------
3ebfc 2cf             | ' Execute an IN interrupt transaction.
3ebfc 2cf             | '------------------------------------------------------------------------------
3ebfc 2cf             | ' On entry:
3ebfc 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
3ebfc 2cf             | '   hpar2 - Address of the IN data buffer
3ebfc 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
3ebfc 2cf             | ' On exit:
3ebfc 2cf             | '   retval - the result of the operation.
3ebfc 2cf             | '   hpar3 - the count of IN data bytes actually received.
3ebfc 2cf             | '------------------------------------------------------------------------------
3ebfc 2cf             | do_int_in
3ebfc 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3ec00 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3ec04 2d1 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3ec08 2d2             | 
3ec08 2d2 C8 71 33 F9 |                 getword htmp, hpar3, #0
3ec0c 2d3 C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz
3ec10 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
3ec14 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
3ec18 2d6             | .retry
3ec18 2d6 C8 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
3ec1c 2d7 00 F5 BF FD |                 call    #txn_in
3ec20 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
3ec24 2d9 1C 00 90 AD |         if_z    jmp     #.commit
3ec28 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
3ec2c 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
3ec30 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
3ec34 2dd 54 00 B0 FD |                 call    #retry_wait
3ec38 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3ec3c 2df 18 00 90 AD |         if_z    jmp     #.post_ret
3ec40 2e0 D4 FF 9F FD |                 jmp     #.retry
3ec44 2e1             | .commit
3ec44 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
3ec48 2e2 C7 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
3ec4c 2e3 5C 85 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
3ec50 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
3ec54 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
3ec58 2e6             | .post_ret
3ec58 2e6 5C 91 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
3ec5c 2e7             | 
3ec5c 2e7             | 
3ec5c 2e7             | '------------------------------------------------------------------------------
3ec5c 2e7             | ' Resets the downstream hub port to FS
3ec5c 2e7             | '------------------------------------------------------------------------------
3ec5c 2e7             | dwnstream_reset
3ec5c 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3ec60 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
3ec64 2e9             | 
3ec64 2e9 0E 68 07 F4 |                 bitl    _usb_h_ls_nco_, #14
3ec68 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
3ec6c 2eb 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3ec70 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
3ec74 2ed A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
3ec78 2ee A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
3ec7c 2ef             | 
3ec7c 2ef             | '------------------------------------------------------------------------------
3ec7c 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
3ec7c 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
3ec7c 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
3ec7c 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
3ec7c 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
3ec7c 2ef             | '------------------------------------------------------------------------------
3ec7c 2ef             | ' On entry:
3ec7c 2ef             | '   hctwait - wait interval in sysclocks.
3ec7c 2ef             | ' On exit:
3ec7c 2ef             | '------------------------------------------------------------------------------
3ec7c 2ef             | poll_waitx
3ec7c 2ef 1A 92 63 FD |                 getct   hct2
3ec80 2f0 4C 93 6B FA |                 addct2  hct2, hctwait
3ec84 2f1             | .wait
3ec84 2f1 FF 25 CC FB |                 jnct2   #.wait
3ec88 2f2 2D 00 64 FD |                 ret
3ec8c 2f3             | 
3ec8c 2f3             | '------------------------------------------------------------------------------
3ec8c 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
3ec8c 2f3             | '------------------------------------------------------------------------------
3ec8c 2f3             | ' On entry:
3ec8c 2f3             | '   retval - transaction response PID or error code.
3ec8c 2f3             | ' On exit:
3ec8c 2f3             | '------------------------------------------------------------------------------
3ec8c 2f3             | retry_wait
3ec8c 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3ec90 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
3ec94 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3ec98 2f6 14 00 90 AD |         if_z    jmp     #.nak
3ec9c 2f7 9E 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
3eca0 2f8 D8 FF BF FD |                 call    #poll_waitx
3eca4 2f9             | .dec
3eca4 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
3eca8 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
3ecac 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
3ecb0 2fc             | .nak
3ecb0 2fc 9D 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
3ecb4 2fd C4 FF BF FD |                 call    #poll_waitx
3ecb8 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
3ecbc 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
3ecc0 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
3ecc4 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
3ecc8 302 2D 00 64 FD |                 ret
3eccc 303             | 
3eccc 303             | host_reset
3eccc 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
3ecd0 304 14 70 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
3ecd4 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
3ecd4 305 BD 01 05 FF 
3ecd8 306 00 70 1F F2 |                 cmp     htmp, ##168_000_000     wcz
3ecdc 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
3ece0 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
3ece4 309             | ' Check to see if the system clock has been changed.
3ece4 309 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
3ece8 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
3ecec 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
3ecf0 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
3ecf4 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3ecf8 30e 40 46 62 FD |                 dirl    dp
3ecfc 30f             | 
3ecfc 30f 28 02 64 FD |                 setq    #1
3ed00 310 80 00 80 FF 
3ed04 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
3ed08 312 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
3ed0c 313             | .enable
3ed0c 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
3ed10 314 41 46 62 FD |                 dirh    dp
3ed14 315 1F 36 63 FD |                 waitx   _1us_
3ed18 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3ed1c 317             | 
3ed1c 317             |                 ' Handle Port protection enable and startup delay
3ed1c 317 00 48 16 F2 |                 cmp     usb_enable_pin, #0      wc
3ed20 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
3ed24 319 1F 5E 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
3ed28 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
3ed2c 31b 1F 5E 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
3ed30 31c             | 
3ed30 31c 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
3ed34 31d 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
3ed38 31e 38 EC A7 F9 |                 alti    pa, #%000_111_000
3ed3c 31f 00 00 04 F6 |                 mov     0-0, #0
3ed40 320             | .regloop
3ed40 320             | 
3ed40 320             |                 'call #dev_reset ' TODO THINK ABOUT THIS
3ed40 320             | 
3ed40 320             | discon_entry
3ed40 320 03 96 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
3ed44 321             | 
3ed44 321             |               
3ed44 321             |         if HAVE_HIDPAD
3ed44 321 D4 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
3ed48 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
3ed4c 323 28 60 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
3ed50 324 F7 01 68 FC |                 wrlong  #0,pb
3ed54 325             |         end
3ed54 325             |         if EMUPAD_MAX_PLAYER > 0
3ed54 325             |         end
3ed54 325             | 
3ed54 325             |                 ' Fall through to disconnected loop
3ed54 325             | 
3ed54 325             | '-----------------------------------------------------------------------------------------------------------------
3ed54 325             | ' Device connect handling (Section 7.1.7.3).
3ed54 325             | '-----------------------------------------------------------------------------------------------------------------
3ed54 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
3ed54 325             | ' device to connect (Section 7.1.7.3).
3ed54 325             | '-----------------------------------------------------------------------------------------------------------------
3ed54 325             | disconnected
3ed54 325 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
3ed58 326 2C 87 0B F2 |                 cmp     hr1, save_sysclk        wz
3ed5c 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
3ed60 328 03 86 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
3ed64 329 1F 86 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
3ed68 32a             |         if ACTIVITY_LED >= 0
3ed68 32a             |         end
3ed68 32a 22 A7 82 FA |                 rqpin   urx, dm
3ed6c 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
3ed70 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
3ed74 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
3ed78 32e             | .se1_test
3ed78 32e B0 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
3ed7c 32f FC FE BF FD |                 call    #poll_waitx
3ed80 330 22 A7 82 FA |                 rqpin   urx, dm
3ed84 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
3ed88 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
3ed8c 333 B0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
3ed90 334             | .se1            'SE1 is a fatal error condition
3ed90 334 B0 99 02 F6 |                 mov     hctwait, _100ms_
3ed94 335 E4 FE BF FD |                 call    #poll_waitx
3ed98 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
3ed9c 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
3eda0 338             | .connect_test                                           ' Test lines until stable J/K state seen
3eda0 338 1F 60 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
3eda4 339 22 A7 82 FA |                 rqpin   urx, dm
3eda8 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
3edac 33b 90 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
3edb0 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
3edb4 33d             | connected
3edb4 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
3edb8 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
3edbc 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
3edc0 340 7C FF 9F 5D |         if_nz   jmp     #discon_entry
3edc4 341             | .set_pulse
3edc4 341 1A 64 63 FD |                 getct   _pulse_time_
3edc8 342 B1 65 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
3edcc 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
3edcc 343             | ' of 1ms and make a correction, if necessary.
3edcc 343             | '                mov     htmp, _1ms_
3edcc 343             | '                subs    htmp, iframe_delta
3edcc 343             | '                adds    _frame1ms_clks_, htmp
3edcc 343             | '                debug(udec(_frame1ms_clks_))
3edcc 343             | 
3edcc 343             |                 ' Fall through to idle/processing loop
3edcc 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
3edd0 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
3edd4 345             | 
3edd4 345             | hidle
3edd4 345 22 A7 82 FA |                 rqpin   urx, dm
3edd8 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
3eddc 347 98 00 90 CD |         if_c    jmp     #.se0_test
3ede0 348 24 06 70 FD |                 pollct3                         wc
3ede4 349 68 00 90 3D |         if_nc   jmp     #.nopoll
3ede8 34a 1A 94 63 FD |                 getct   hct3
3edec 34b A7 95 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
3edf0 34c             | 
3edf0 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3edf4 34d 00 70 E3 F8 |                 getbyte htmp
3edf8 34e             | 
3edf8 34e 09 70 0F F2 |                 cmp     htmp, #HUB_READY        wz
3edfc 34f 84 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
3ee00 350 40 00 90 AD |         if_z    jmp     #.poll
3ee04 351             | 
3ee04 351             |         if _HAVE_GAMEPAD
3ee04 351 06 70 0F F2 |                 cmp     htmp, #HID_READY        wz
3ee08 352 08 70 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
3ee0c 353 07 70 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
3ee10 354 0C 16 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
3ee14 355 2C 00 90 AD |         if_z    jmp     #.poll
3ee18 356             |         end
3ee18 356             | 
3ee18 356             |         if HAVE_MOUSE
3ee18 356 04 70 0F F2 |                 cmp     htmp, #M_READY          wz
3ee1c 357 30 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
3ee20 358 20 00 90 AD |         if_z    jmp     #.poll
3ee24 359             |         end
3ee24 359             | 
3ee24 359 03 70 0F F2 |                 cmp     htmp, #KB_READY         wz
3ee28 35a 98 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
3ee2c 35b 14 00 90 AD |         if_z    jmp     #.poll
3ee30 35c             | 
3ee30 35c 05 70 0F F2 |                 cmp     htmp, #KBM_READY        wz
3ee34 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
3ee38 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
3ee3c 35f 98 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
3ee40 360             |         if HAVE_MOUSE
3ee40 360 30 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
3ee44 361             |         else
3ee44 361             |         end
3ee44 361             | 
3ee44 361             | .poll
3ee44 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
3ee48 362 2D EC 63 FD |                 call    pa
3ee4c 363             | .skip_poll
3ee4c 363             | 
3ee4c 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
3ee50 364             | 
3ee50 364             | .nopoll
3ee50 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
3ee54 365 44 00 90 AD |         if_z    jmp     #hsuspend
3ee58 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
3ee5c 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
3ee60 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
3ee64 369 1A 84 63 FD |                 getct   hr0
3ee68 36a B2 85 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
3ee6c 36b             |         if ACTIVITY_LED >= 0
3ee6c 36b             |         end
3ee6c 36b 1A 64 63 3D |         if_ae   getct   _pulse_time_
3ee70 36c B1 65 03 31 |         if_ae   add     _pulse_time_, _500ms_
3ee74 36d 5C FF 9F FD |                 jmp     #hidle
3ee78 36e             | ' Check for extended SE0 state on the bus
3ee78 36e             | .se0_test
3ee78 36e A7 99 02 F6 |                 mov     hctwait, _1ms_
3ee7c 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
3ee80 370 22 A7 82 FA |                 rqpin   urx, dm
3ee84 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
3ee88 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
3ee8c 373 24 F6 BF FD |                 call    #wait_txn_ok
3ee90 374 00 00 80 FF 
3ee94 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
3ee98 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
3ee98 376 30 FE 9F FD |                 jmp     #host_reset                     ' Device disconnected
3ee9c 377             | 
3ee9c 377             | hsuspend
3ee9c 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
3eea0 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
3eea4 379 1F 52 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
3eea8 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
3eeac 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
3eeb0 37c 00 96 07 F6 |                 mov     mod_cnt, #0
3eeb4 37d             | 
3eeb4 37d             |                 ' Fall through to resume wait loop
3eeb4 37d             | 
3eeb4 37d             | hwait_resume
3eeb4 37d 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
3eeb8 37e 02 86 47 F0 |                 shr     hr1, #2
3eebc 37f 1F 86 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
3eec0 380             |         if ACTIVITY_LED >= 0
3eec0 380             |         end
3eec0 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
3eec4 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
3eec8 382 14 70 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
3eecc 383 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
3eed0 384 18 00 90 AD |         if_z    jmp     #.resume
3eed4 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
3eed8 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
3eedc 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
3eee0 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3eee4 389 22 6D 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
3eee8 38a 22 69 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
3eeec 38b             | .resume
3eeec 38b 22 05 28 FC |                 wypin   #OUT_K, dm
3eef0 38c 1F 5C 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
3eef4 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
3eef8 38e A2 71 03 F6 |                 mov     htmp, _ip_delay_ls_
3eefc 38f 01 70 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
3ef00 390 1F 70 63 FD |                 waitx   htmp
3ef04 391 22 07 28 FC |                 wypin   #OUT_J, dm
3ef08 392 01 70 47 F0 |                 shr     htmp, #1
3ef0c 393 1F 70 63 FD |                 waitx   htmp
3ef10 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3ef14 395 1A 92 62 FD |                 getct   iframe_ct_base
3ef18 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3ef1c 397 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3ef20 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
3ef24 399 AA 99 02 F6 |                 mov     hctwait, _4ms_
3ef28 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
3ef2c 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
3ef30 39c             | 
3ef30 39c             | '------------------------------------------------------------------------------
3ef30 39c             | ' Send preamble to enable low-speed HUB ports
3ef30 39c             | '------------------------------------------------------------------------------
3ef30 39c             | ' On entry:
3ef30 39c             | ' On exit:
3ef30 39c             | '   USB baud rate set to low-speed
3ef30 39c             | '------------------------------------------------------------------------------
3ef30 39c             | utx_pre
3ef30 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3ef34 39d 40 46 62 FD |                 dirl    dp
3ef38 39e 28 02 64 FD |                 setq    #1
3ef3c 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
3ef40 3a0 58 44 62 FD |                 drvl    dm
3ef44 3a1 59 46 62 FD |                 drvh    dp
3ef48 3a2             | 
3ef48 3a2 1E 00 00 FF 
3ef4c 3a3 80 70 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
3ef50 3a4             | 
3ef50 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
3ef54 3a5 01 70 57 F0 |                 shr     htmp, #1        wc
3ef58 3a6 28 02 64 3D |         if_nc   setq    #1
3ef5c 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
3ef60 3a8 1F 4C 63 FD |                 waitx   _preamble_wait_
3ef64 3a9             | .l1
3ef64 3a9             | 
3ef64 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3ef68 3aa 40 46 62 FD |                 dirl    dp
3ef6c 3ab 28 02 64 FD |                 setq    #1
3ef70 3ac 80 00 80 FF 
3ef74 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
3ef78 3ae 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
3ef7c 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
3ef80 3b0 41 46 62 FD |                 dirh    dp
3ef84 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3ef88 3b2             | 
3ef88 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
3ef8c 3b3 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
3ef90 3b4 A2 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
3ef94 3b5             | 
3ef94 3b5             | hlut_end
3ef94 3b5             |                 fit     $400
3ef94 3b5             |                 orgh
3ef94                 | if OVERLAP_MEMORY
3ef94                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
3ef94                 | end
3ef94                 | '------------------------------------------------------------------------------
3ef94                 | ' Routines called from cog space.
3ef94                 | '------------------------------------------------------------------------------
3ef94                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
3ef94                 | '------------------------------------------------------------------------------
3ef94                 | 
3ef94                 | '------------------------------------------------------------------------------
3ef94                 | ' USB host cog initialization.
3ef94                 | '------------------------------------------------------------------------------
3ef94                 | usb_host_init
3ef94                 |                 ' Initialize buffer pointers
3ef94                 |         if OVERLAP_MEMORY
3ef94                 |         else
3ef94     3C 15 B0 FE |                 loc     pb, #hid_descr
3ef98                 |         end
3ef98     F7 4B 02 F6 |                 mov     hid_descr_p, pb
3ef9c                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
3ef9c                 |                 {
3ef9c                 |                 }
3ef9c                 |         
3ef9c                 |                 {
3ef9c                 |                 }
3ef9c                 |                 'loc     pb,#hkbd_report
3ef9c                 |                 'mov     hkbd_report_p,pb
3ef9c                 | 
3ef9c     04 1D B0 FE |                 loc     pb, #hub_descr
3efa0     F7 4D 02 F6 |                 mov     hub_descr_p, pb
3efa4     19 1D B0 FE |                 loc     pb, #urx_buff
3efa8     F7 4F 02 F6 |                 mov     urx_buff_p, pb
3efac     91 1D B0 FE |                 loc     pb, #dev_desc_buff
3efb0     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
3efb4     9B 1D B0 FE |                 loc     pb, #con_desc_buff
3efb8     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
3efbc     14 15 B0 FE |                 loc     pb, #usb_cache_start
3efc0     F7 55 02 F6 |                 mov     cache_start_p, pb
3efc4     E5 1C B0 FE |                 loc     pb, #usb_cache_end
3efc8     F7 57 02 F6 |                 mov     cache_end_p, pb
3efcc                 | 
3efcc                 |         if ERROR_LED >= 0
3efcc                 |         end
3efcc                 | 
3efcc                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
3efcc                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
3efcc                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
3efcc                 | ' Configure and enable the Serial Host USB port.
3efcc     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
3efd0                 | 
3efd0                 | '------------------------------------------------------------------------------
3efd0                 | ' Timing calculations happen before any interrupt(s) are enabled.
3efd0                 | '------------------------------------------------------------------------------
3efd0                 | ' On entry:
3efd0                 | '   htmp - current CLKFREQ value.
3efd0                 | '------------------------------------------------------------------------------
3efd0                 | hinit_usb_timings
3efd0                 | '                getct   htmp2
3efd0     B8 59 02 F6 |                 mov     save_sysclk, htmp
3efd4     8D 5B 80 FF 
3efd8     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
3efdc     18 30 63 FD |                 getqx   _12Mbps_
3efe0     10 30 57 F0 |                 shr     _12Mbps_, #16           wc
3efe4     00 30 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
3efe8     03 6C 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
3efec     0E 6C 67 F0 |                 shl     _usb_h_fs_nco_, #14
3eff0     98 6D 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
3eff4     01 6E 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
3eff8     0E 6E 67 F0 |                 shl     _usb_d_fs_nco_, #14
3effc     98 6F 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
3f000     98 33 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
3f004     03 32 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
3f008     02 68 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
3f00c     0E 68 67 F0 |                 shl     _usb_h_ls_nco_, #14
3f010     99 69 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
3f014     99 6B 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
3f018     80 00 00 FF 
3f01c     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
3f020     18 2C 63 FD |                 getqx   _var_64_lower_
3f024     19 2E 63 FD |                 getqy   _var_64_upper_
3f028     28 2C 63 FD |                 setq    _var_64_lower_
3f02c     65 CD 1D FF 
3f030     00 2E 27 FD |                 qfrac   _var_64_upper_, ##_1b
3f034     18 34 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
3f038     01 00 00 FF 
3f03c     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
3f040     18 2C 63 FD |                 getqx   _var_64_lower_
3f044     19 2E 63 FD |                 getqy   _var_64_upper_
3f048     28 2C 63 FD |                 setq    _var_64_lower_
3f04c     A1 07 00 FF 
3f050     40 2E 27 FD |                 qfrac   _var_64_upper_, ##_1m
3f054     18 36 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
3f058     9B 7B 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
3f05c     09 36 57 F0 |                 shr     _1us_, #9               wc
3f060     00 36 27 F1 |                 addx    _1us_, #0                       ' Round to final value
3f064     0A 7A 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
3f068     18 38 63 FD |                 getqx   _10us_
3f06c     09 38 57 F0 |                 shr     _10us_, #9              wc
3f070     00 38 27 F1 |                 addx    _10us_, #0                      ' 10us
3f074     21 7A 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
3f078     18 3A 63 FD |                 getqx   _33us_
3f07c     09 3A 57 F0 |                 shr     _33us_, #9              wc
3f080     00 3A 27 F1 |                 addx    _33us_, #0                      ' 33us
3f084     FA 7A 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
3f088     18 3C 63 FD |                 getqx   _txn_err_
3f08c     09 3C 57 F0 |                 shr     _txn_err_, #9           wc
3f090     00 3C 27 F1 |                 addx    _txn_err_, #0                   ' 250us
3f094     F4 7B 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
3f098     18 3E 63 FD |                 getqx   _500us_
3f09c     09 3E 57 F0 |                 shr     _500us_, #9             wc
3f0a0     00 3E 27 F1 |                 addx    _500us_, #0                     ' 500us
3f0a4     01 00 00 FF 
3f0a8     9A 7A 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
3f0ac     18 40 63 FD |                 getqx   _txn_ok_ls_
3f0b0     09 40 57 F0 |                 shr     _txn_ok_ls_, #9         wc
3f0b4     00 40 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
3f0b8     01 00 00 FF 
3f0bc     52 7B 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
3f0c0     18 42 63 FD |                 getqx   _txn_ok_fs_
3f0c4     09 42 57 F0 |                 shr     _txn_ok_fs_, #9         wc
3f0c8     00 42 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
3f0cc     9A 45 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
3f0d0     05 00 00 FF 
3f0d4     80 44 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
3f0d8     10 44 57 F0 |                 shr     _ip_delay_ls_, #16      wc
3f0dc     00 44 27 F1 |                 addx    _ip_delay_ls_, #0
3f0e0     9A 49 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
3f0e4     1C 00 00 FF 
3f0e8     C0 49 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
3f0ec     10 48 57 F0 |                 shr     _tat_wait_ls_, #16      wc
3f0f0     00 48 27 F1 |                 addx    _tat_wait_ls_, #0
3f0f4     9A 47 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
3f0f8     00 00 00 FF 
3f0fc     4E 47 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
3f100     10 46 57 F0 |                 shr     _ip_delay_fs_, #16      wc
3f104     00 46 27 F1 |                 addx    _ip_delay_fs_, #0
3f108     9A 4B 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
3f10c     04 00 00 FF 
3f110     23 4B 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
3f114     10 4A 57 F0 |                 shr     _tat_wait_fs_, #16      wc
3f118     00 4A 27 F1 |                 addx    _tat_wait_fs_, #0
3f11c     8D 5B 00 FF 
3f120     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
3f124     18 4C 63 FD |                 getqx   _preamble_wait_
3f128     08 4C 87 F1 |                 sub     _preamble_wait_,# 9 - 1
3f12c     01 00 00 FF 
3f130     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
3f134     18 2C 63 FD |                 getqx   _var_64_lower_
3f138     19 2E 63 FD |                 getqy   _var_64_upper_
3f13c     28 2C 63 FD |                 setq    _var_64_lower_
3f140     01 00 00 FF 
3f144     E8 2F 27 FD |                 qfrac   _var_64_upper_, ##_1thou
3f148     18 4E 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
3f14c     09 4E 57 F0 |                 shr     _1ms_, #9               wc
3f150     00 4E 27 F1 |                 addx    _1ms_, #0                       ' 1ms
3f154     FF FF 7F FF 
3f158     F2 67 07 F6 |                 mov     _frame1ms_clks_, ##-14
3f15c     A7 67 43 F1 |                 adds    _frame1ms_clks_, _1ms_
3f160     A7 51 03 F6 |                 mov     _2ms_, _1ms_
3f164     01 50 67 F0 |                 shl     _2ms_, #1                       ' 2ms
3f168     A7 53 03 F6 |                 mov     _suspend_wait_, _1ms_
3f16c     A7 53 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
3f170     A7 55 03 F6 |                 mov     _4ms_, _1ms_
3f174     02 54 67 F0 |                 shl     _4ms_, #2                       ' 4ms
3f178     AA 57 03 F6 |                 mov     _xfer_wait_, _4ms_
3f17c     A7 57 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
3f180     AB 5B 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
3f184     AD 5D 03 F6 |                 mov     _resume_hold_, _reset_hold_
3f188     02 5C 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
3f18c     AE 61 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
3f190     01 60 67 F0 |                 shl     _100ms_, #1                     ' 40ms
3f194     A7 59 03 F6 |                 mov     _8ms_, _1ms_
3f198     03 58 67 F0 |                 shl     _8ms_, #3                       ' 8ms
3f19c     01 5A 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
3f1a0     AD 61 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
3f1a4     AB 5B 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
3f1a8     AB 5F 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
3f1ac     02 5E 67 F0 |                 shl     _21ms_, #2                      ' 20ms
3f1b0     A7 5F 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
3f1b4     B0 63 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
3f1b8     01 60 67 F0 |                 shl     _100ms_, #1                     ' 100ms
3f1bc     03 62 67 F0 |                 shl     _500ms_, #3                     ' 400ms
3f1c0     B0 63 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
3f1c4                 | '        _ret_   mov     _1sec_, save_sysclk
3f1c4                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
3f1c4                 | '                ret
3f1c4                 | {
3f1c4                 | }
3f1c4                 | 
3f1c4                 | '------------------------------------------------------------------------------
3f1c4                 | ' Parse a configuration descriptor chain to see if the device is a recognized
3f1c4                 | ' one. If it is, start the task progression that will configure the device for
3f1c4                 | ' use.
3f1c4                 | '------------------------------------------------------------------------------
3f1c4                 | ' On entry:
3f1c4                 | '   hconfig_base - start address of the cached config descriptor chain.
3f1c4                 | ' On exit:
3f1c4                 | '------------------------------------------------------------------------------
3f1c4                 | hparse_con_desc
3f1c4     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
3f1c8     82 71 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
3f1cc     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
3f1d0     4E 70 FF F9 |                 movbyts htmp,#%%1032
3f1d4     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
3f1d8                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
3f1d8                 | 
3f1d8     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
3f1dc     6E ED 03 F1 |                 add     pa, hconfig_base
3f1e0     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
3f1e4                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
3f1e4                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
3f1e4                 | ' that defines a keyboard and/or mouse.
3f1e4     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
3f1e8                 | .next_intf
3f1e8     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
3f1ec     B8 01 90 3D |         if_ae   jmp     #hset_config
3f1f0     6E F3 03 F6 |                 mov     ptrb, hconfig_base
3f1f4     75 F3 03 F1 |                 add     ptrb, hnext_desc
3f1f8     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
3f1fc     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
3f200     0C 00 90 AD |         if_z    jmp     #.intf
3f204     80 71 C7 FA |                 rdbyte  htmp, ptrb
3f208     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
3f20c     D8 FF 9F FD |                 jmp     #.next_intf
3f210                 | .intf
3f210     00 8E 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
3f214     00 90 07 F6 |                 mov     hpar3, #0
3f218     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
3f21c     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
3f220     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
3f224     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
3f228                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
3f228                 | 
3f228                 | .endp
3f228     80 71 C7 FA |                 rdbyte  htmp, ptrb
3f22c     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
3f230     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
3f234     78 00 90 3D |         if_ae   jmp     #.get_device
3f238     6E F3 03 F6 |                 mov     ptrb, hconfig_base
3f23c     75 F3 03 F1 |                 add     ptrb, hnext_desc
3f240     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
3f244     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
3f248     64 00 90 AD |         if_z    jmp     #.get_device
3f24c     05 70 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
3f250     04 00 90 AD |         if_z    jmp     #.get_ep
3f254     D0 FF 9F FD |                 jmp     #.endp
3f258                 | .get_ep
3f258     82 87 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
3f25c     07 86 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
3f260     0F 86 67 F0 |                 shl     hr1, #8 + 7
3f264     6C 71 03 F6 |                 mov     htmp, hctrl_ep_addr
3f268     3F 00 00 FF 
3f26c     00 71 07 F5 |                 and     htmp, ##ADDR_MASK
3f270     C3 71 43 F5 |                 or      htmp, hr1                       ' endpoint address
3f274     00 8E 0F F2 |                 cmp     hpar2, #0               wz
3f278     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
3f27c     00 90 0F F2 |                 cmp     hpar3, #0               wz
3f280     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
3f284     A0 FF 9F FD |                 jmp     #.endp
3f288                 | .in_ep
3f288     B8 8F 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
3f28c     84 89 C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
3f290                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
3f290     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
3f294     C2 89 DB F8 |                 setbyte hr2, hr0, #3
3f298     8C FF 9F FD |                 jmp     #.endp
3f29c                 | .out_ep
3f29c     B8 91 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
3f2a0     84 8B C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
3f2a4                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
3f2a4     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
3f2a8     C2 8B DB F8 |                 setbyte hr3, hr0, #3
3f2ac     78 FF 9F FD |                 jmp     #.endp
3f2b0                 | 
3f2b0                 | .get_device
3f2b0     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
3f2b4     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
3f2b8     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
3f2bc     64 00 90 AD |         if_z    jmp     #.gamepad
3f2c0     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
3f2c4     A8 00 90 AD |         if_z    jmp     #.hub
3f2c8     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
3f2cc     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
3f2d0                 |  '               cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
3f2d0     00 E6 0E F2 |            cmp     hdev_protocol, #INTF_PROTO_NONE     wz
3f2d4     4C 00 90 AD |         if_z    jmp     #.gamepad
3f2d8     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
3f2dc     08 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
3f2e0                 | .keyboard
3f2e0     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
3f2e4                 |         if HAVE_MOUSE
3f2e4     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
3f2e8                 |         else
3f2e8                 |         end
3f2e8     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
3f2ec     F8 FE 9F 5D |         if_nz   jmp     #.next_intf
3f2f0     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3f2f4     C4 71 FA F8 |                 getbyte kb_interval, hr2, #3
3f2f8     C4 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
3f2fc     C7 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
3f300                 |                 'debug(udec(kb_intf_num))
3f300                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
3f300     E4 FE 9F FD |                 jmp     #.next_intf
3f304                 | if HAVE_MOUSE
3f304                 | .mouse
3f304     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
3f308     DC FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
3f30c     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
3f310     D4 FE 9F 5D |         if_nz   jmp     #.next_intf
3f314     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3f318                 |                 'getbyte ms_interval, hr2, #3
3f318     C4 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
3f31c     C7 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
3f320                 |                 'debug(udec(kb_intf_num))
3f320                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
3f320     C4 FE 9F FD |                 jmp     #.next_intf
3f324                 | end
3f324                 | .gamepad
3f324     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
3f328     C7 71 63 F5 |                 xor     htmp, hpar2
3f32c     3F 00 00 FF 
3f330     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3f334     B0 FE 9F AD |         if_z    jmp     #.next_intf
3f338                 |         if HAVE_MOUSE
3f338     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
3f33c     C7 71 63 F5 |                 xor     htmp, hpar2
3f340     3F 00 00 FF 
3f344     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3f348     9C FE 9F AD |         if_z    jmp     #.next_intf
3f34c                 |         end
3f34c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
3f350     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
3f354     90 FE 9F 5D |         if_nz   jmp     #.next_intf
3f358                 | 
3f358     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3f35c     C4 7B FA F8 |                 getbyte gp_interval, hr2, #3
3f360     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3f364     C7 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
3f368     C8 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
3f36c                 |                 'debug(udec(gp_intf_num))
3f36c                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
3f36c     78 FE 9F FD |                 jmp     #.next_intf
3f370                 | .hub
3f370     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
3f374     70 FE 9F 5D |         if_nz   jmp     #.next_intf
3f378     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
3f37c     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
3f380     64 FE 9F 5D |         if_nz   jmp     #.next_intf
3f384     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
3f388     5C FE 9F 5D |         if_nz   jmp     #.next_intf
3f38c     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
3f390     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
3f394     C7 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
3f398     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3f39c     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
3f3a0     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
3f3a4                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
3f3a4     40 FE 9F FD |                 jmp     #.next_intf
3f3a8                 | 
3f3a8                 | '------------------------------------------------------------------------------
3f3a8                 | ' If a newly-connected device is recognized, do whatever is needed to configure
3f3a8                 | ' it according to its function, or functions. In the case of this boot protocol
3f3a8                 | ' keyboard/mouse class driver:
3f3a8                 | ' - SetConfiguration(config_num)
3f3a8                 | ' - SetProtocol(boot)
3f3a8                 | ' - SetIdle(indefinite)
3f3a8                 | ' - Enter the device interrupt IN polling task stage.
3f3a8                 | '------------------------------------------------------------------------------
3f3a8                 | ' On entry:
3f3a8                 | ' On exit:
3f3a8                 | '------------------------------------------------------------------------------
3f3a8                 | hset_config
3f3a8                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
3f3a8                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
3f3a8     02 74 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
3f3ac     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3f3b0     00 00 0C F2 |                 cmp     0-0, #0                 wz
3f3b4     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
3f3b8                 |         if HAVE_MOUSE
3f3b8     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
3f3bc                 |         end
3f3bc     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
3f3c0     4C 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
3f3c4                 | .set_config
3f3c4     6C 0E D0 FE |                 loc     ptra, #set_config
3f3c8     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
3f3cc     6E ED 03 F1 |                 add     pa, hconfig_base
3f3d0     F6 8D C3 FA |                 rdbyte  hpar1, pa
3f3d4     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
3f3d8     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
3f3dc     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
3f3e0     A0 02 A0 FD |                 call    #control_write
3f3e4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3f3e8     2D 00 64 5D |         if_nz   ret
3f3ec                 | .kbd_config
3f3ec     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
3f3f0     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
3f3f4                 | 
3f3f4     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
3f3f8     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3f3fc     3F 00 00 FF 
3f400     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3f404     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
3f408                 | 
3f408     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
3f40c     34 0E D0 FE |                 loc     ptra, #set_protocol
3f410     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
3f414     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3f418     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
3f41c     A0 02 A0 FD |                 call    #control_write
3f420     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3f424     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
3f428     E4 02 90 5D |         if_nz   jmp     #.notify_client
3f42c     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
3f430     37 8F E3 F8 |                 getbyte hpar2, kb_intf_num, #0
3f434     30 03 B0 FD |                 call    #hset_idle
3f438                 |                 'cmp     retval, #PID_ACK        wz
3f438                 |         'if_nz   mov     hkbd_ep_addr, #0
3f438                 |         'if_nz   jmp     #.notify_client
3f438     A8 99 02 F6 |                 mov     hctwait, _2ms_
3f43c     EF 02 A0 FD |                 call    #poll_waitx
3f440     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
3f444     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
3f448     90 17 90 FE |                 loc     pa, #hkbd_led_rep
3f44c     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
3f450     2C 03 B0 FD |                 call    #hset_kbdled_report
3f454     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3f458     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
3f45c     B0 02 90 5D |         if_nz   jmp     #.notify_client
3f460     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
3f464     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3f468     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3f46c     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3f470     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
3f474     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
3f478     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
3f47c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3f480     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
3f484     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
3f488     03 74 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
3f48c                 |         if !!HAVE_MOUSE
3f48c                 |         end
3f48c                 | 
3f48c                 | .mouse_config
3f48c                 | if HAVE_MOUSE
3f48c     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
3f490     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
3f494     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
3f498     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3f49c     3F 00 00 FF 
3f4a0     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3f4a4     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
3f4a8                 | 
3f4a8                 |                 debug("mouse passed addr check")
3f4a8                 | 
3f4a8     B0 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
3f4ac     00 00 80 FF 
3f4b0     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
3f4b4     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
3f4b8     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3f4bc     55 02 A0 FD |                 call    #control_read
3f4c0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3f4c4     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
3f4c8     44 02 90 5D |         if_nz   jmp     #.notify_client
3f4cc     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
3f4d0     56 01 00 F6 |                 mov     0-0, total_data
3f4d4     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3f4d8                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
3f4d8                 | 
3f4d8     35 71 E3 F8 |                 getbyte htmp, ms_intf_num, #0
3f4dc     64 0D D0 FE |                 loc     ptra, #set_protocol
3f4e0     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
3f4e4     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3f4e8     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
3f4ec     A0 02 A0 FD |                 call    #control_write
3f4f0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3f4f4     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
3f4f8     14 02 90 5D |         if_nz   jmp     #.notify_client
3f4fc                 |                 debug("mouse passed SetProtocol")
3f4fc     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
3f500     35 8F E3 F8 |                 getbyte hpar2, ms_intf_num, #0
3f504     60 02 B0 FD |                 call    #hset_idle
3f508                 |                 'cmp     retval, #PID_ACK        wz
3f508                 |         'if_nz   mov     hmouse_ep_addr, #0
3f508                 |         'if_nz   jmp     #.notify_client
3f508                 |                 debug("mouse passed SetIdle")
3f508     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
3f50c     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3f510     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3f514     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3f518     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
3f51c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3f520     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
3f524     79 75 03 F6 |                 mov     htmp2, hkbd_ep_addr
3f528     7A 75 63 F5 |                 xor     htmp2, hmouse_ep_addr
3f52c     3F 00 00 FF 
3f530     00 75 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
3f534     05 74 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
3f538     04 74 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
3f53c     D0 01 90 FD |                 jmp     #.notify_client
3f540                 | end
3f540                 | .gamepad_config
3f540                 | if _HAVE_GAMEPAD
3f540     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3f544     00 00 0C F2 |                 cmp     0-0, #0                 wz
3f548     58 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
3f54c     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3f550     00 70 03 F6 |                 mov     htmp, 0-0
3f554     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3f558     3F 00 00 FF 
3f55c     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3f560     40 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
3f564                 | 
3f564     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3f568     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
3f56c     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3f570     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3f574     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3f578     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3f57c     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
3f580     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
3f584     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
3f588     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3f58c     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3f590     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
3f594     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
3f598     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3f59c                 | 
3f59c                 |                 if EMUPAD_MAX_PLAYER > 0
3f59c                 |                 
3f59c                 | .rule_loop           
3f59c                 |                 end
3f59c                 | 
3f59c     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
3f5a0     5C 00 90 AD |         if_e    jmp     #.xinput
3f5a4     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
3f5a8     00 70 03 F6 |                 mov     htmp,0-0
3f5ac     01 A6 02 FF 
3f5b0     68 70 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
3f5b4     7C 00 90 AD |         if_e    jmp     #.ps3
3f5b8                 | 
3f5b8     A0 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
3f5bc     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
3f5c0     00 00 80 5F 
3f5c4     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
3f5c8     03 00 80 AF 
3f5cc     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
3f5d0     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
3f5d4     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3f5d8     55 02 A0 FD |                 call    #control_read
3f5dc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3f5e0     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
3f5e4     00 00 04 56 |         if_nz   mov     0-0, #0
3f5e8     24 01 90 5D |         if_nz   jmp     #.notify_client
3f5ec     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
3f5f0     56 01 00 F6 |                 mov     0-0, total_data
3f5f4     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3f5f8                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
3f5f8                 | 
3f5f8     06 74 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
3f5fc     10 01 90 FD |                 jmp     #.notify_client
3f600                 | .xinput
3f600     B4 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
3f604     2D EF 03 F6 |                 mov     pb,hdev_port
3f608     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
3f60c     03 EE 27 F3 |                 fle     pb,#3
3f610     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
3f614     02 EF 47 FC |                 wrbyte  pb, ptra[2]
3f618                 | 
3f618     03 B0 06 F6 |                 mov     pkt_data, #3
3f61c     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
3f620     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
3f624     5A 00 A0 FD |                 call    #txn_out
3f628     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
3f62c                 | 
3f62c     07 74 07 F6 |                 mov     htmp2, #XINPUT_READY
3f630     DC 00 90 FD |                 jmp     #.notify_client
3f634                 | .ps3
3f634     50 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
3f638     2D EF 03 F6 |                 mov     pb,hdev_port
3f63c     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
3f640     04 EE 27 F3 |                 fle     pb,#4
3f644     F7 EF C3 F9 |                 decod   pb
3f648     09 EF 47 FC |                 wrbyte  pb, ptra[9]
3f64c                 | 
3f64c     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
3f650     00 0C D0 FE |                 loc     ptra, #set_report
3f654     01 00 80 FF 
3f658     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
3f65c     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3f660     03 61 5C FC |                 wrword  #48, ptra[wLength]
3f664     20 0C B0 FE |                 loc     pb, #ps3_command_buff
3f668     A0 02 A0 FD |                 call    #control_write
3f66c                 | 
3f66c     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
3f670     E0 0B D0 FE |                 loc     ptra, #set_report
3f674     01 00 80 FF 
3f678     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
3f67c     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3f680     03 09 5C FC |                 wrword  #4, ptra[wLength]
3f684     FC 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
3f688     A0 02 A0 FD |                 call    #control_write
3f68c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
3f690     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
3f694     00 00 04 56 |         if_nz   mov     0-0, #0
3f698     74 00 90 5D |         if_nz   jmp     #.notify_client
3f69c                 | 
3f69c     08 74 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
3f6a0     6C 00 90 FD |                 jmp     #.notify_client
3f6a4                 | end
3f6a4                 | 
3f6a4                 | .hub_config
3f6a4     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
3f6a8     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
3f6ac     77 71 03 F6 |                 mov     htmp, hhub_ep_addr
3f6b0     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3f6b4     3F 00 00 FF 
3f6b8     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3f6bc     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
3f6c0                 | 
3f6c0     A0 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
3f6c4     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
3f6c8     26 EF 03 F6 |                 mov     pb, hub_descr_p
3f6cc     55 02 A0 FD |                 call    #control_read
3f6d0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3f6d4     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
3f6d8     34 00 90 5D |         if_nz   jmp     #.notify_client
3f6dc                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
3f6dc                 | 
3f6dc     26 F1 03 F6 |                 mov     ptra, hub_descr_p
3f6e0     02 77 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
3f6e4     07 76 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
3f6e8                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
3f6e8                 | .pwr_loop
3f6e8     80 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
3f6ec     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
3f6f0     02 77 57 FC |                 wrword  htmp3, ptra[wIndex]
3f6f4     A0 02 A0 FD |                 call    #control_write
3f6f8     FB 77 6F FB |                 djnz    htmp3, #.pwr_loop
3f6fc                 | 
3f6fc     B1 99 02 F6 |                 mov     hctwait, _500ms_
3f700     B0 99 02 F1 |                 add     hctwait, _100ms_
3f704     EF 02 A0 FD |                 call    #poll_waitx
3f708                 | 
3f708     09 74 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
3f70c     00 00 90 FD |                 jmp     #.notify_client
3f710                 | 
3f710                 | .notify_client
3f710     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
3f714     BA 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
3f718                 |                 debug(uhex_long(hdev_type,hdev_type+1))
3f718                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
3f718     2D 00 64 FD |                 ret
3f71c                 | 
3f71c                 | '------------------------------------------------------------------------------
3f71c                 | ' Initialize the keyboard/mouse data area to start-up values.
3f71c                 | '------------------------------------------------------------------------------
3f71c                 | ' On entry:
3f71c                 | ' On exit:
3f71c                 | '------------------------------------------------------------------------------
3f71c                 | init_kbdm_data
3f71c     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
3f720     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
3f724                 | 
3f724     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
3f728     2B ED 03 F6 |                 mov     pa, cache_end_p
3f72c                 | .loop
3f72c     61 01 4C FC |                 wrbyte  #0, ptra++
3f730     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
3f734     F4 FF 9F CD |         if_b    jmp     #.loop
3f738                 |         
3f738                 |         if EMUPAD_MAX_PLAYER > 0
3f738                 |         end
3f738                 | 
3f738                 | 
3f738     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
3f73c                 | .regloop
3f73c     00 EC 8F F9 |                 altd    pa
3f740     00 00 04 F6 |                 mov     0-0, #0
3f744     01 EC 07 F1 |                 add     pa, #1
3f748     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
3f74c     EC FF 9F 5D |         if_nz   jmp     #.regloop
3f750                 | 
3f750     E1 E1 61 FF 
3f754     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
3f758     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
3f75c     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
3f760     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
3f764                 | 
3f764     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
3f768                 | 
3f768                 | '------------------------------------------------------------------------------
3f768                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
3f768                 | ' function.
3f768                 | '------------------------------------------------------------------------------
3f768                 | ' On entry:
3f768                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
3f768                 | '   hpar2 - index number of the target interface.
3f768                 | ' On exit:
3f768                 | '------------------------------------------------------------------------------
3f768                 | hset_idle
3f768     A8 99 02 F6 |                 mov     hctwait, _2ms_
3f76c     EF 02 A0 FD |                 call    #poll_waitx
3f770     D8 0A D0 FE |                 loc     ptra, #set_idle
3f774     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]
3f778     02 8F 57 FC |                 wrword  hpar2, ptra[wIndex]
3f77c     A0 02 80 FD |                 jmp     #control_write
3f780                 | 
3f780                 | '------------------------------------------------------------------------------
3f780                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
3f780                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
3f780                 | '------------------------------------------------------------------------------
3f780                 | ' On entry:
3f780                 | '   ep_addr_pid - device address and enpoint for the request.
3f780                 | ' On exit:
3f780                 | '   retval - transaction result.
3f780                 | '------------------------------------------------------------------------------
3f780                 | hset_kbdled_report
3f780     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
3f784     CC 0A D0 FE |                 loc     ptra, #set_report
3f788     01 00 80 FF 
3f78c     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
3f790     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3f794     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
3f798     27 EF 03 F6 |                 mov     pb, urx_buff_p
3f79c     F7 77 42 FC |                 wrbyte  kb_led_states, pb
3f7a0     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
3f7a4                 | 
3f7a4                 | '------------------------------------------------------------------------------
3f7a4                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
3f7a4                 | '------------------------------------------------------------------------------
3f7a4                 | ' On entry:
3f7a4                 | ' On exit:
3f7a4                 | '------------------------------------------------------------------------------
3f7a4                 | hget_kbd_in_report
3f7a4     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
3f7a8     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3f7ac     30 91 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
3f7b0     39 91 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
3f7b4     CF 02 A0 FD |                 call    #do_int_in
3f7b8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3f7bc     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3f7c0                 | 
3f7c0     00 90 0F F2 |                 cmp     hpar3, #0               wz
3f7c4     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3f7c8                 | 
3f7c8     30 71 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
3f7cc     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3f7d0     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
3f7d4     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
3f7d8                 | 
3f7d8     C8 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
3f7dc     18 00 B0 FD |                 call    #hkbd_compare
3f7e0                 |         if EMUPAD_MAX_PLAYER > 0
3f7e0                 |         end
3f7e0                 | 
3f7e0                 | .led_check
3f7e0     3B 71 03 F6 |                 mov     htmp, kb_led_states
3f7e4     B8 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
3f7e8     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
3f7ec     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
3f7f0     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
3f7f4     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
3f7f8                 | 
3f7f8                 | '------------------------------------------------------------------------------
3f7f8                 | ' Compare current and previous keyboard data buffers for keypress changes.
3f7f8                 | '------------------------------------------------------------------------------
3f7f8                 | hkbd_compare
3f7f8     27 F1 03 F6 |                 mov     ptra, urx_buff_p
3f7fc     D4 13 F0 FE |                 loc     ptrb, #hkbd_report
3f800     61 73 07 FB |                 rdlong  htmp1, ptra++
3f804     E1 75 07 FB |                 rdlong  htmp2, ptrb++
3f808     BA 73 0B F2 |                 cmp     htmp1, htmp2    wz
3f80c     61 73 07 FB |                 rdlong  htmp1, ptra++
3f810     E1 75 07 FB |                 rdlong  htmp2, ptrb++
3f814     BA 73 0B A2 |         if_z    cmp     htmp1, htmp2    wz
3f818     2D 00 64 AD |         if_z    ret
3f81c                 | 
3f81c     B4 13 D0 FE |                 loc     ptra, #hkbd_report
3f820                 | 
3f820                 |                 ' Handle modifiers
3f820     27 8F C3 FA |                 rdbyte  hpar2, urx_buff_p
3f824     00 87 C7 FA |                 rdbyte  hr1, ptra
3f828     C7 87 43 F9 |                 rolword hr1,hpar2,#0
3f82c     63 86 63 FD |                 mergew  hr1
3f830     08 EC 07 F6 |                 mov     pa,#8
3f834                 | .modloop
3f834     6A 86 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
3f838     E8 8C 07 F6 |                 mov     hpar1,#$E8
3f83c     F6 8D 83 F1 |                 sub     hpar1,pa
3f840     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
3f844     FB ED 6F FB |                 djnz    pa,#.modloop
3f848                 | 
3f848     6F E0 75 FD | .release        modc    _set    wc
3f84c                 |                 'alts    hdev_port, #hid_report_p
3f84c                 |                 'mov     ptra, hid_report_p
3f84c     02 F0 07 F1 |                 add     ptra, #2
3f850     06 EC 07 F6 |                 mov     pa, #6
3f854     61 8D CF FA | .rl1            rdbyte  hpar1, ptra++   wz
3f858     20 00 90 AD |         if_z    jmp     #.rl3
3f85c     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
3f860     02 F2 07 F1 |                 add     ptrb, #2
3f864     06 EE 07 F6 |                 mov     pb, #6
3f868     E1 71 C7 FA | .rl2            rdbyte  htmp, ptrb++
3f86c     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
3f870     08 00 90 AD |         if_z    jmp     #.rl3
3f874     FC EF 6F FB |                 djnz    pb, #.rl2
3f878     68 00 B0 FD |                 call    #hkbd_translate
3f87c     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
3f880                 | 
3f880     00 90 07 F6 |                 mov     hpar3, #0
3f884     1F 90 27 F4 |                 bith    hpar3, #31
3f888                 | 
3f888     6F 00 74 FD | .press          modc    _clr    wc
3f88c     27 F1 03 F6 |                 mov     ptra, urx_buff_p
3f890     02 F0 07 F1 |                 add     ptra, #2
3f894     06 EC 07 F6 |                 mov     pa, #6
3f898     61 8D CF FA | .pl1            rdbyte  hpar1, ptra++   wz
3f89c     20 00 90 AD |         if_z    jmp     #.pl3
3f8a0     30 13 F0 FE |                 loc     ptrb, #hkbd_report
3f8a4     02 F2 07 F1 |                 add     ptrb, #2
3f8a8     06 EE 07 F6 |                 mov     pb, #6
3f8ac     E1 71 C7 FA | .pl2            rdbyte  htmp, ptrb++
3f8b0     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
3f8b4     08 00 90 AD |         if_z    jmp     #.pl3
3f8b8     FC EF 6F FB |                 djnz    pb, #.pl2
3f8bc     24 00 B0 FD |                 call    #hkbd_translate
3f8c0     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
3f8c4                 | 
3f8c4     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
3f8c8     08 13 F0 FE |                 loc     ptrb, #hkbd_report
3f8cc     28 02 64 FD |                 setq #1
3f8d0     61 73 07 FB |                 rdlong  htmp1, ptra++
3f8d4     28 02 64 FD |                 setq #1
3f8d8     E1 73 67 FC |                 wrlong  htmp1, ptrb++
3f8dc     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
3f8e0                 | 
3f8e0     2D 00 64 FD |                 ret
3f8e4                 | 
3f8e4                 | '------------------------------------------------------------------------------
3f8e4                 | ' Translate keyboard scancode to ASCII
3f8e4                 | '------------------------------------------------------------------------------
3f8e4                 | ' On entry:
3f8e4                 | '   hpar1 - scancode
3f8e4                 | '   hpar2 - key modifiers state
3f8e4                 | '       c - pressed (0) or released (1) flag
3f8e4                 | ' On exit:
3f8e4                 | '   hpar1 - bit     31 = 0 pressed, 1 released
3f8e4                 | '               30..17 = unused
3f8e4                 | '                   18 = scroll-lock state 
3f8e4                 | '                   17 = caps-lock state
3f8e4                 | '                   16 = num-lock state 
3f8e4                 | '                15..8 = key modifiers state
3f8e4                 | '                 7..0 = scancode
3f8e4                 | '------------------------------------------------------------------------------
3f8e4                 | hkbd_translate
3f8e4     39 8C 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
3f8e8     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
3f8ec     53 8C 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
3f8f0     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
3f8f4     47 8C 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
3f8f8     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
3f8fc                 | 
3f8fc                 |         if EMUPAD_MAX_PLAYER > 0
3f8fc                 | 
3f8fc                 |         if EMUPAD_BT0_BIT >= 0
3f8fc                 |         end
3f8fc                 |         if EMUPAD_BT1_BIT >= 0
3f8fc                 |         end
3f8fc                 |         if EMUPAD_BT2_BIT >= 0
3f8fc                 |         end
3f8fc                 |         if EMUPAD_BT3_BIT >= 0
3f8fc                 |         end
3f8fc                 |         if EMUPAD_BT4_BIT >= 0
3f8fc                 |         end
3f8fc                 |         if EMUPAD_BT5_BIT >= 0
3f8fc                 |         end
3f8fc                 |         if EMUPAD_BT6_BIT >= 0
3f8fc                 |         end
3f8fc                 |         if EMUPAD_BT7_BIT >= 0
3f8fc                 |         end
3f8fc                 |         if EMUPAD_BT8_BIT >= 0
3f8fc                 |         end
3f8fc                 |         if EMUPAD_BT9_BIT >= 0
3f8fc                 |         end
3f8fc                 | 
3f8fc                 |         end
3f8fc     C7 8D CB F8 |                 setbyte hpar1, hpar2, #1
3f900     7C 8D D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
3f904     1F 8C 47 F4 |                 bitc    hpar1, #31
3f908                 |         if KEYQUEUE_SIZE > 0
3f908     C4 09 B0 FE |                 loc pb,#keyq_head
3f90c     F7 71 E3 FA |                 rdword htmp,pb
3f910     B8 73 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
3f914     B8 71 E3 F8 |                 getbyte htmp,htmp,#0 ' head
3f918     B8 75 03 F6 |                 mov htmp2,htmp
3f91c     04 74 07 FA |                 mul htmp2,#4
3f920     F7 75 03 F1 |                 add htmp2,pb
3f924     02 74 07 F1 |                 add htmp2,#2
3f928     7F 70 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
3f92c     B8 73 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
3f930     BA 8D 63 5C |         if_nz   wrlong hpar1,htmp2
3f934     F7 71 43 5C |         if_nz   wrbyte htmp,pb
3f938                 |         end
3f938     2D 00 7C FD |                 ret wcz
3f93c                 | 
3f93c                 | if HAVE_MOUSE
3f93c                 | '------------------------------------------------------------------------------
3f93c                 | ' Execute an IN interrupt transaction to poll for mouse activity.
3f93c                 | '------------------------------------------------------------------------------
3f93c                 | ' On entry:
3f93c                 | ' On exit:
3f93c                 | '------------------------------------------------------------------------------
3f93c                 | hget_mouse_in_report
3f93c     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
3f940     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3f944     30 91 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
3f948     36 91 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
3f94c     CF 02 A0 FD |                 call    #do_int_in
3f950     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3f954     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3f958                 | 
3f958     00 90 0F F2 |                 cmp     hpar3, #0               wz
3f95c     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3f960                 | 
3f960     30 71 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
3f964     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3f968     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
3f96c     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
3f970                 | 
3f970     27 F1 03 F6 |                 mov     ptra, urx_buff_p
3f974     05 90 1F F2 |                 cmp     hpar3, #5               wcz     ' Hack: Combo PS/2-USB adapters adds report-id
3f978     01 F0 07 31 |         if_ae   add     ptra, #1                        ' | skip
3f97c     01 90 87 31 |         if_ae   sub     hpar3, #1
3f980                 | 
3f980     40 09 90 FE |                 loc     pa, #mouse_limits
3f984     25 13 F0 FE |                 loc     ptrb, #mouse_xacc
3f988                 | 
3f988                 |                 ' load xacc,yacc,zacc
3f988     28 04 64 FD |                 setq    #3-1
3f98c     80 87 07 FB |                 rdlong  hr1,ptrb
3f990                 |                 ' load limits and outptr
3f990     28 04 64 FD |                 setq    #3-1
3f994     F6 73 03 FB |                 rdlong  htmp1,pa
3f998                 | 
3f998     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Button flags
3f99c     8C 71 47 FC |                 wrbyte  htmp, ptrb[12]                    ' write verbatim into extra byte
3f9a0     00 70 17 F4 |                 testb   htmp,#0                 wc       ' left button flag
3f9a4     8D 03 4C CC |         if_c    wrbyte  #1,ptrb[13]
3f9a8     01 70 17 F4 |                 testb   htmp,#1                 wc       ' left button flag
3f9ac     8E 03 4C CC |         if_c    wrbyte  #1,ptrb[14]
3f9b0     02 70 17 F4 |                 testb   htmp,#2                 wc       ' left button flag
3f9b4     8F 03 4C CC |         if_c    wrbyte  #1,ptrb[15]
3f9b8                 |               
3f9b8                 | 
3f9b8     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' X direction and velocity is 8-bit signed
3f9bc     07 70 67 F7 |                 signx   htmp, #7
3f9c0     B8 87 03 F1 |                 add     hr1,htmp
3f9c4     00 72 0F F2 |                 cmp     htmp1,#0 wz
3f9c8     B9 87 63 53 |         if_ne   fles    hr1,htmp1
3f9cc     00 86 47 53 |         if_ne   fges    hr1,#0
3f9d0                 | 
3f9d0     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Y direction and velocity is 8-bit signed
3f9d4     07 70 67 F7 |                 signx   htmp, #7
3f9d8     B8 89 03 F1 |                 add     hr2,htmp
3f9dc     00 74 0F F2 |                 cmp     htmp2,#0 wz
3f9e0     BA 89 63 53 |         if_ne   fles    hr2,htmp2
3f9e4     00 88 47 53 |         if_ne   fges    hr2,#0
3f9e8                 |                 
3f9e8                 | 
3f9e8     04 90 0F F2 |                 cmp     hpar3, #4               wz      ' Very few mice send +/- scroll wheel data in boot protocol
3f9ec     00 71 C7 AA |         if_z    rdbyte  htmp, ptra
3f9f0     07 70 67 A7 |         if_z    signx   htmp, #7                        ' If it's there, use it
3f9f4     B8 8B 03 A1 |         if_z    add     hr3,htmp
3f9f8                 | 
3f9f8     90 71 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
3f9fc     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
3fa00                 | 
3fa00                 |                 ' write back accumulators
3fa00     28 04 64 FD |                 setq    #3-1
3fa04     80 87 67 FC |                 wrlong  hr1,ptrb
3fa08                 |                 ' if outptr set, write X/Y words
3fa08     00 76 0F F2 |                 cmp htmp3,#0                    wz
3fa0c     C4 87 2B 59 |         if_nz   setword hr1,hr2,#1
3fa10     BB 87 63 5C |         if_nz   wrlong hr1,htmp3
3fa14     2D 00 64 FD |                 ret
3fa18                 | end
3fa18                 | 
3fa18                 | '------------------------------------------------------------------------------
3fa18                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
3fa18                 | '------------------------------------------------------------------------------
3fa18                 | ' On entry:
3fa18                 | ' On exit:
3fa18                 | '------------------------------------------------------------------------------
3fa18                 | if _HAVE_GAMEPAD
3fa18                 | hget_gp_in_report
3fa18     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3fa1c     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
3fa20                 | 
3fa20     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3fa24     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
3fa28     00 90 E3 F8 |                 getbyte hpar3
3fa2c     FF 90 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
3fa30     CF 02 A0 FD |                 call    #do_int_in
3fa34     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3fa38     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3fa3c                 | 
3fa3c     00 90 0F F2 |                 cmp     hpar3, #0               wz
3fa40     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3fa44                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
3fa44                 | 
3fa44     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
3fa48     00 70 E3 F8 |                 getbyte htmp                            ' |
3fa4c     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3fa50     4B 70 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
3fa54     C3 70 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
3fa58     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
3fa5c     B8 01 C0 F8 |                 setbyte htmp                            ' |
3fa60                 | 
3fa60                 | ' Note: the following code compares the current and previous reports
3fa60                 | ' and process the data if there are changes to ease the debug output.
3fa60                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
3fa60                 | ' gpPreReport buffer.
3fa60                 | 
3fa60                 |                 ' ----- start of block to remove
3fa60                 |                 {
3fa60                 |                 }
3fa60                 |                 ' ----- end of block to remove
3fa60     F4 04 90 FE |                 loc pa,#hpad_translate
3fa64     2A EC 63 FD |                 push pa
3fa68                 | 
3fa68                 |                 ' FALL THROUGH !!!!
3fa68                 | 
3fa68                 | '------------------------------------------------------------------------------
3fa68                 | ' Decode controller report
3fa68                 | '------------------------------------------------------------------------------
3fa68                 | hid_decode
3fa68                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
3fa68     28 1E 64 FD |                 setq #(hidr_end-hidr_start)-1
3fa6c     00 04 00 FF 
3fa70     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
3fa74                 | 
3fa74     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
3fa78                 | 
3fa78     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3fa7c     00 2A E3 F8 |                 getbyte hidr_type
3fa80     07 2A 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
3fa84     34 02 90 AD |         if_z    jmp     #hpad_xinput
3fa88     08 2A 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
3fa8c     1C 03 90 AD |         if_z    jmp     #hpad_ps3
3fa90     05 2A 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
3fa94     04 2A 07 A6 |         if_z    mov     hidr_type,#M_READY
3fa98     04 2A 0F F2 |                 cmp     hidr_type, #M_READY             wz
3fa9c                 |                 
3fa9c                 | 
3fa9c                 | '------------------------------------------------------------------------------
3fa9c                 | ' Handle HID controller (or mouse now
3fa9c                 | ' On entry:
3fa9c                 | '   ptrb - controller report
3fa9c                 | '------------------------------------------------------------------------------
3fa9c                 | hpad_hid
3fa9c     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3faa0     F7 F1 03 F6 |                 mov     ptra, pb
3faa4     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
3faa8     00 EC 03 F6 |                 mov     pa, 0-0
3faac                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
3faac     19 2A 3B FF 
3fab0     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
3fab4                 | 
3fab4                 | .next
3fab4     00 EC 5F F2 |                 cmps    pa, #0      wcz
3fab8     2D 00 7C ED |         if_be   ret     wcz
3fabc                 | 
3fabc     61 8D C7 FA |                 rdbyte  hpar1, ptra++
3fac0     01 EC 87 F1 |                 sub     pa, #1
3fac4     00 8E 07 F6 |                 mov     hpar2, #0
3fac8                 | 
3fac8     C6 71 03 F6 |                 mov     htmp, hpar1
3facc     03 70 07 F5 |                 and     htmp, #$03
3fad0     01 70 0F F2 |                 cmp     htmp, #1    wz
3fad4     61 8F C7 AA |         if_z    rdbyte  hpar2, ptra++
3fad8     07 8E 67 A7 |         if_z    signx   hpar2,#7
3fadc     01 EC 87 A1 |         if_z    sub     pa, #1
3fae0     02 70 0F F2 |                 cmp     htmp, #2    wz
3fae4     61 8F E7 AA |         if_z    rdword  hpar2, ptra++
3fae8     0F 8E 67 A7 |         if_z    signx   hpar2,#15
3faec     02 EC 87 A1 |         if_z    sub     pa, #2
3faf0     03 70 0F F2 |                 cmp     htmp, #3    wz
3faf4     61 8F 07 AB |         if_z    rdlong  hpar2, ptra++
3faf8     04 EC 87 A1 |         if_z    sub     pa, #4
3fafc                 | 
3fafc     FC 8C 07 F5 |                 and     hpar1, #$FC
3fb00                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
3fb00                 | 
3fb00     84 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
3fb04     0C 01 90 AD |         if_z    jmp     #.report_id
3fb08     04 8C 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
3fb0c     24 01 90 AD |         if_z    jmp     #.usage_page
3fb10     08 8C 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
3fb14     2C 01 90 AD |         if_z    jmp     #.usage
3fb18     14 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
3fb1c     C7 27 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
3fb20     24 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
3fb24     C7 27 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
3fb28     34 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
3fb2c     C7 29 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
3fb30     44 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
3fb34     C7 29 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
3fb38     74 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
3fb3c     C7 1F 03 A6 |         if_z    mov     hidr_size, hpar2
3fb40     94 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
3fb44     C7 21 03 A6 |         if_z    mov     hidr_count, hpar2
3fb48     80 8C 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
3fb4c     64 FF 9F 5D |         if_nz   jmp     #.next
3fb50                 | 
3fb50     D8 1D A7 FB |                 tjf     hidr_state,#.next
3fb54                 | 
3fb54     03 8E 07 F5 |                 and     hpar2, #$03
3fb58     02 8E 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
3fb5c     18 00 90 5D |         if_nz   jmp     #.skip
3fb60                 | 
3fb60     02 1C 0F F2 |                 cmp     hidr_state, #2  wz
3fb64     20 00 90 AD |         if_z    jmp     #.axes
3fb68     03 1C 0F F2 |                 cmp     hidr_state, #3  wz
3fb6c     5C 00 90 AD |         if_z    jmp     #.hats
3fb70     04 1C 0F F2 |                 cmp     hidr_state, #4  wz
3fb74     70 00 90 AD |         if_z    jmp     #.buttons
3fb78                 | .skip
3fb78     8F 71 03 F6 |                 mov     htmp, hidr_size
3fb7c     90 71 03 FA |                 mul     htmp, hidr_count
3fb80     B8 23 03 F1 |                 add     hidr_offset, htmp
3fb84     2C FF 9F FD |                 jmp     #.next
3fb88                 | .axes
3fb88                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count))
3fb88     87 85 53 F8 |                 getnib  hr0, hidr_flags, #2
3fb8c     90 87 03 F6 |                 mov     hr1, hidr_count
3fb90                 | .l1
3fb90     91 8D 03 F6 |                 mov     hpar1, hidr_offset
3fb94     8F 8F 03 F6 |                 mov     hpar2, hidr_size
3fb98     04 03 B0 FD |                 call    #hpad_getbits
3fb9c     64 03 B0 FD |                 call    #hpad_normalize
3fba0     06 84 1F F2 |                 cmp     hr0, #6         wcz
3fba4     86 85 5F C9 |         if_b    altgn   hr0, #hidr_usage
3fba8     00 88 43 C8 |         if_b    getnib  hr2
3fbac     88 89 77 C9 |         if_b    altsw   hr2, #hidr_axis
3fbb0     5F 01 20 C9 |         if_b    setword retval
3fbb4     01 84 07 C1 |         if_b    add     hr0, #1
3fbb8     8F 23 03 F1 |                 add     hidr_offset, hidr_size
3fbbc     F4 87 6F FB |                 djnz    hr1, #.l1
3fbc0                 | 
3fbc0     C2 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
3fbc4     01 1C 07 F6 |                 mov     hidr_state, #1
3fbc8     E8 FE 9F FD |                 jmp     #.next
3fbcc                 | .hats
3fbcc                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
3fbcc     91 8D 03 F6 |                 mov     hpar1, hidr_offset
3fbd0     8F 8F 03 F6 |                 mov     hpar2, hidr_size
3fbd4     C8 02 B0 FD |                 call    #hpad_getbits
3fbd8     5F 19 C3 F8 |                 setbyte hidr_hats, retval, #0
3fbdc     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3fbe0     01 1C 07 F6 |                 mov     hidr_state, #1
3fbe4     90 FF 9F FD |                 jmp     #.skip
3fbe8                 | .buttons
3fbe8                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
3fbe8     91 8D 03 F6 |                 mov     hpar1, hidr_offset
3fbec     8F 8F 03 F6 |                 mov     hpar2, hidr_size
3fbf0     90 8F 03 FA |                 mul     hpar2, hidr_count
3fbf4     A8 02 B0 FD |                 call    #hpad_getbits
3fbf8     87 71 E3 F8 |                 getbyte htmp, hidr_flags, #0
3fbfc     B8 BF 62 F0 |                 shl     retval, htmp
3fc00     5F 17 43 F5 |                 or      hidr_buttons, retval
3fc04     90 71 03 F1 |                 add     htmp, hidr_count
3fc08     B8 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
3fc0c     01 1C 07 F6 |                 mov     hidr_state, #1
3fc10     64 FF 9F FD |                 jmp     #.skip
3fc14                 | .report_id
3fc14     00 1A 0F F2 |                 cmp     hidr_id, #0     wz
3fc18     2D 00 7C 5D |         if_nz   ret     wcz
3fc1c     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
3fc20     C7 71 0B F2 |                 cmp     htmp, hpar2     wz
3fc24     B8 1B 03 A6 |         if_z    mov     hidr_id, htmp
3fc28     01 1C 67 56 |         if_nz   neg     hidr_state,#1
3fc2c     01 F2 87 51 |         if_nz   sub     ptrb,#1
3fc30     80 FE 9F FD |                 jmp     #.next
3fc34                 | .usage_page
3fc34     09 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
3fc38     01 1C 0F A2 |         if_z    cmp     hidr_state, #1  wz
3fc3c     04 1C 07 A6 |         if_z    mov     hidr_state, #4
3fc40     70 FE 9F FD |                 jmp     #.next
3fc44                 | .usage
3fc44     04 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
3fc48     05 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
3fc4c     06 2A 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
3fc50     01 1C 07 A6 |         if_z    mov     hidr_state, #1
3fc54     5C FE 9F AD |         if_z    jmp     #.next
3fc58     02 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
3fc5c     04 2A 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
3fc60     01 1C 07 A6 |         if_z    mov     hidr_state, #1
3fc64     4C FE 9F AD |         if_z    jmp     #.next
3fc68     30 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_X     wz
3fc6c     31 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Y     wz
3fc70     32 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Z     wz
3fc74     33 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RX    wz
3fc78     34 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RY    wz
3fc7c     35 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RZ    wz
3fc80     10 00 90 AD |         if_z    jmp     #.usage_axis
3fc84     39 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
3fc88     01 1C 0F A2 |         if_z    cmp     hidr_state, #1      wz
3fc8c     03 1C 07 A6 |         if_z    mov     hidr_state, #3
3fc90     20 FE 9F FD |                 jmp     #.next
3fc94                 | .usage_axis
3fc94     01 1C 57 F2 |                 cmps    hidr_state, #1          wc
3fc98     18 FE 9F CD |         if_b    jmp     #.next
3fc9c     86 25 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
3fca0     C7 01 00 F8 |                 setnib  hpar2
3fca4                 | 
3fca4     20 8E 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
3fca8     C7 8F C3 F9 |                 decod   hpar2
3fcac     C7 0F 43 F5 |                 or      hidr_flags, hpar2
3fcb0                 | 
3fcb0     01 24 07 F1 |                 add     hidr_usage_idx, #1
3fcb4     02 1C 07 F6 |                 mov     hidr_state, #2
3fcb8     F8 FD 9F FD |                 jmp     #.next
3fcbc                 | 
3fcbc                 | '------------------------------------------------------------------------------
3fcbc                 | ' Handle XInput controller
3fcbc                 | ' On entry:
3fcbc                 | '   ptrb - controller report
3fcbc                 | '------------------------------------------------------------------------------
3fcbc                 | '   Default implementation translates the report to a pseudo-defacto hid
3fcbc                 | '   standard and jumps to hpad_translate for actions.
3fcbc                 | '   Implementors may take specific actions for this kind of controller.
3fcbc                 | '------------------------------------------------------------------------------
3fcbc                 | hpad_xinput
3fcbc     80 71 CF FA |                 rdbyte  htmp, ptrb      wz
3fcc0     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
3fcc4     81 71 C7 FA |                 rdbyte  htmp, ptrb[1]
3fcc8     14 70 0F F2 |                 cmp     htmp, #$14      wz
3fccc     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
3fcd0                 | 
3fcd0                 |                 debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
3fcd0                 | 
3fcd0     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
3fcd4     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
3fcd8                 | 
3fcd8     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
3fcdc     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
3fce0     5F BF 22 F6 |                 not     retval
3fce4     5F 11 2B F9 |                 setword hidr_axis, retval, #1
3fce8     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
3fcec     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
3fcf0     5F BF 22 F6 |                 not     retval
3fcf4     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
3fcf8                 | 
3fcf8     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
3fcfc     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
3fd00     C0 BE 1E F2 |                 cmp     retval, #192    wcz
3fd04     06 16 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
3fd08     F8 01 B0 FD |                 call    #hpad_normalize
3fd0c     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
3fd10     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
3fd14     C0 BE 1E F2 |                 cmp     retval, #192    wcz
3fd18     07 16 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
3fd1c     E4 01 B0 FD |                 call    #hpad_normalize
3fd20     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
3fd24                 | 
3fd24     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
3fd28     81 BF E6 FA |                 rdword  retval, ptrb[1]
3fd2c     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
3fd30     00 16 47 F4 |                 bitc    hidr_buttons, #0
3fd34     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
3fd38     01 16 47 F4 |                 bitc    hidr_buttons, #1
3fd3c     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
3fd40     02 16 47 F4 |                 bitc    hidr_buttons, #2
3fd44     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
3fd48     03 16 47 F4 |                 bitc    hidr_buttons, #3
3fd4c     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
3fd50     04 16 47 F4 |                 bitc    hidr_buttons, #4
3fd54     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
3fd58     05 16 47 F4 |                 bitc    hidr_buttons, #5
3fd5c     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
3fd60     08 16 47 F4 |                 bitc    hidr_buttons, #8
3fd64     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
3fd68     09 16 47 F4 |                 bitc    hidr_buttons, #9
3fd6c     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
3fd70     0A 16 47 F4 |                 bitc    hidr_buttons, #10
3fd74     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
3fd78     0B 16 47 F4 |                 bitc    hidr_buttons, #11
3fd7c     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
3fd80     0C 16 47 F4 |                 bitc    hidr_buttons, #12
3fd84                 | 
3fd84     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3fd88     5F 71 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
3fd8c     7A BB 7A FF 
3fd90     0F 72 07 F6 |                 mov     htmp1, ##$F576_F40F
3fd94     F9 FF 7F FF 
3fd98     12 75 07 F6 |                 mov     htmp2, ##$FFFF_F312
3fd9c     B9 71 5F F9 |                 altgn   htmp, #htmp1
3fda0     00 70 43 F8 |                 getnib  htmp
3fda4     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
3fda8                 | 
3fda8     AC 01 90 FD |                 jmp     #hpad_translate
3fdac                 | 
3fdac                 | '------------------------------------------------------------------------------
3fdac                 | ' Handle PS3 controller
3fdac                 | ' On entry:
3fdac                 | '   ptrb - controller report
3fdac                 | '------------------------------------------------------------------------------
3fdac                 | '   Default implementation translates the report to a pseudo-defacto hid
3fdac                 | '   standard and jumps to hpad_translate for actions.
3fdac                 | '   Implementors may take specific actions for this kind of controller.
3fdac                 | '------------------------------------------------------------------------------
3fdac                 | hpad_ps3
3fdac     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
3fdb0     01 70 0F F2 |                 cmp     htmp, #$01      wz
3fdb4     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
3fdb8                 | 
3fdb8                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
3fdb8                 | 
3fdb8     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
3fdbc     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
3fdc0     40 01 B0 FD |                 call    #hpad_normalize
3fdc4     5F 11 23 F9 |                 setword hidr_axis, retval, #0
3fdc8     10 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X
3fdcc     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
3fdd0     30 01 B0 FD |                 call    #hpad_normalize
3fdd4     5F 11 2B F9 |                 setword hidr_axis, retval, #1
3fdd8     11 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Y
3fddc     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
3fde0     20 01 B0 FD |                 call    #hpad_normalize
3fde4     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
3fde8     12 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Z
3fdec     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
3fdf0     10 01 B0 FD |                 call    #hpad_normalize
3fdf4     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
3fdf8     15 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_RZ
3fdfc     04 0E 17 F8 |                 setnib  hidr_flags, #4, #2
3fe00                 | 
3fe00     08 8C 07 F6 |                 mov     hpar1, #8
3fe04     13 8E 07 F6 |                 mov     hpar2, #19
3fe08     94 00 B0 FD |                 call    #hpad_getbits
3fe0c                 | 
3fe0c     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
3fe10     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
3fe14     00 16 47 F4 |                 bitc    hidr_buttons, #0
3fe18     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
3fe1c     01 16 47 F4 |                 bitc    hidr_buttons, #1
3fe20     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
3fe24     02 16 47 F4 |                 bitc    hidr_buttons, #2
3fe28     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
3fe2c     03 16 47 F4 |                 bitc    hidr_buttons, #3
3fe30     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
3fe34     04 16 47 F4 |                 bitc    hidr_buttons, #4
3fe38     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
3fe3c     05 16 47 F4 |                 bitc    hidr_buttons, #5
3fe40     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
3fe44     06 16 47 F4 |                 bitc    hidr_buttons, #6
3fe48     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
3fe4c     07 16 47 F4 |                 bitc    hidr_buttons, #7
3fe50     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
3fe54     08 16 47 F4 |                 bitc    hidr_buttons, #8
3fe58     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
3fe5c     09 16 47 F4 |                 bitc    hidr_buttons, #9
3fe60     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
3fe64     0A 16 47 F4 |                 bitc    hidr_buttons, #10
3fe68     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
3fe6c     0B 16 47 F4 |                 bitc    hidr_buttons, #11
3fe70     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
3fe74     0C 16 47 F4 |                 bitc    hidr_buttons, #12
3fe78                 | 
3fe78     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3fe7c     5F 71 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
3fe80     09 FA 79 FF 
3fe84     0F 72 07 F6 |                 mov     htmp1, ##$F3F4_120F
3fe88     FF FA 7F FF 
3fe8c     76 75 07 F6 |                 mov     htmp2, ##$FFF5_FF76
3fe90     B9 71 5F F9 |                 altgn   htmp, #htmp1
3fe94     00 70 43 F8 |                 getnib  htmp
3fe98     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
3fe9c                 | 
3fe9c     B8 00 90 FD |                 jmp     #hpad_translate
3fea0                 | 
3fea0                 | '------------------------------------------------------------------------------
3fea0                 | ' Read bits from report data buffer
3fea0                 | '------------------------------------------------------------------------------
3fea0                 | ' On entry:
3fea0                 | '   PTRB - report buffer
3fea0                 | '   hpar1 - start bit
3fea0                 | '   hpar2 - number of bits
3fea0                 | ' On exit:
3fea0                 | '   retval - bits
3fea0                 | '------------------------------------------------------------------------------
3fea0                 | hpad_getbits
3fea0     C6 71 03 F6 |                 mov     htmp, hpar1
3fea4     03 70 47 F0 |                 shr     htmp, #3        ' byte offset
3fea8     F9 71 03 F1 |                 add     htmp, ptrb
3feac     B8 BF 02 FB |                 rdlong  retval, htmp
3feb0                 | 
3feb0     C6 73 03 F6 |                 mov     htmp1, hpar1
3feb4     07 72 07 F5 |                 and     htmp1, #$07     ' shift
3feb8     B9 BF 42 F0 |                 shr     retval, htmp1
3febc                 | 
3febc     18 8E 1F F2 |                 cmp     hpar2, #24      wcz
3fec0     10 00 90 1D |         if_a    jmp     #.l1
3fec4                 | 
3fec4     C7 8F C3 F9 |                 decod   hpar2
3fec8     01 8E 87 F1 |                 sub     hpar2, #1
3fecc     C7 BF 02 F5 |                 and     retval, hpar2
3fed0     2D 00 64 FD |                 ret
3fed4                 | .l1
3fed4     FF 7F 00 FF 
3fed8     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
3fedc     03 70 07 F1 |                 add     htmp, #3
3fee0     B8 75 03 FB |                 rdlong  htmp2, htmp
3fee4     18 8E 87 F1 |                 sub     hpar2, #24
3fee8     C7 8F C3 F9 |                 decod   hpar2
3feec     01 8E 87 F1 |                 sub     hpar2, #1
3fef0     B9 75 43 F0 |                 shr     htmp2, htmp1
3fef4     C7 75 03 F5 |                 and     htmp2, hpar2
3fef8     18 74 67 F0 |                 shl     htmp2, #24
3fefc     BA BF 42 F5 |                 or      retval, htmp2
3ff00     2D 00 64 FD |                 ret
3ff04                 | 
3ff04                 | '------------------------------------------------------------------------------
3ff04                 | ' Normalize value to signed word (-32768 / 32767)
3ff04                 | '------------------------------------------------------------------------------
3ff04                 | ' On entry:
3ff04                 | '   retval - value to normalize
3ff04                 | '   hidr_lminmax - min (word 1) max (word 0) value range
3ff04                 | '   - or -
3ff04                 | '   hidr_pminmax - min (word 1) max (word 0) value range
3ff04                 | '   hidr_size - value bits length
3ff04                 | ' On exit:
3ff04                 | '   retval - normalized value
3ff04                 | '------------------------------------------------------------------------------
3ff04                 | hpad_normalize
3ff04     93 71 0B F6 |                 mov     htmp, hidr_lminmax  wz
3ff08     94 71 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
3ff0c     2D 00 64 AD |         if_z    ret
3ff10     B8 73 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
3ff14     B8 71 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
3ff18     0F 72 77 F7 |                 signx   htmp1, #15      wc
3ff1c     FF 1F 97 C9 |         if_c    alts    hidr_size, #511
3ff20     00 BE 66 C7 |         if_c    signx   retval, #0-0
3ff24     B9 71 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
3ff28     B9 BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
3ff2c     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
3ff30     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
3ff34     B8 71 53 F6 |                 abs     htmp            wc
3ff38     1F BE 0E F4 |                 testb   retval, #31     wz
3ff3c     5F BF 42 F6 |                 abs     retval
3ff40     B8 BF 12 FD |                 qdiv    retval, htmp
3ff44     18 BE 62 FD |                 getqx   retval
3ff48     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
3ff4c     C0 FF 7F FF 
3ff50     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
3ff54     2D 00 64 FD |                 ret
3ff58                 | 
3ff58                 | '------------------------------------------------------------------------------
3ff58                 | ' Perform controller actions
3ff58                 | ' On entry:
3ff58                 | '    hidr_id        report id
3ff58                 | '    hidr_axis      axis value (signed word, 2 axes per long)
3ff58                 | '                      X = hidr_axis+0, #0
3ff58                 | '                      Y = hidr_axis+0, #1
3ff58                 | '                      Z = hidr_axis+1, #0
3ff58                 | '                     RX = hidr_axis+1, #1
3ff58                 | '                     RY = hidr_axis+2, #0
3ff58                 | '                     RZ = hidr_axis+2, #1
3ff58                 | '    hidr_buttons   buttons state (bits 0 to 31)
3ff58                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
3ff58                 | '
3ff58                 | '                     -------3 -------2 -------1 -------0 byte
3ff58                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
3ff58                 | '    hidr_flags       xxxxxxxx_xxrrrzyx_hhhhaaaa_bbbbbbbb
3ff58                 | '                                zyx||| |||||||| ++++++++ n. buttons
3ff58                 | '                                |||||| ||||++++--------- n. axes
3ff58                 | '                                |||||| ++++------------- n. hats
3ff58                 | '                                ++++++------------------ valid axes
3ff58                 | '------------------------------------------------------------------------------
3ff58                 | hpad_translate
3ff58                 | 
3ff58                 | 
3ff58                 |         if HAVE_HIDPAD
3ff58     84 0C F0 FE |                 loc     ptrb,#hidpad_report
3ff5c     2D 71 0B F6 |                 mov     htmp,hdev_port          wz
3ff60     8D 71 03 A6 |         if_z    mov     htmp,hidr_id
3ff64     01 70 E7 F2 |                 cmpsub  htmp,#1
3ff68     07 1A 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
3ff6c     02 1A 17 52 |         if_nz   cmp     hidr_id, #2             wc
3ff70     2D 00 7C 3D |         if_ae   ret     wcz
3ff74     1C 70 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
3ff78     B8 F3 03 F1 |                 add     ptrb,htmp
3ff7c     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
3ff80     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
3ff84     28 0C 64 FD |                 setq    #7-1
3ff88     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
3ff8c                 |         end
3ff8c                 | 
3ff8c                 | 
3ff8c                 |         if EMUPAD_MAX_PLAYER > 0
3ff8c                 | .emupad_no_hat
3ff8c                 |         if EMUPAD_BT0_BIT >= 0
3ff8c                 |         end
3ff8c                 |         if EMUPAD_BT1_BIT >= 0
3ff8c                 |         end
3ff8c                 |         if EMUPAD_BT2_BIT >= 0
3ff8c                 |         end
3ff8c                 |         if EMUPAD_BT3_BIT >= 0
3ff8c                 |         end
3ff8c                 |         if EMUPAD_BT4_BIT >= 0
3ff8c                 |         end
3ff8c                 |         if EMUPAD_BT5_BIT >= 0
3ff8c                 |         end
3ff8c                 |         if EMUPAD_BT6_BIT >= 0
3ff8c                 |         end
3ff8c                 |         if EMUPAD_BT7_BIT >= 0
3ff8c                 |         end
3ff8c                 |         if EMUPAD_BT8_BIT >= 0
3ff8c                 |         end
3ff8c                 |         if EMUPAD_BT9_BIT >= 0
3ff8c                 |         end
3ff8c                 | .emupad_slot_over
3ff8c                 |         end
3ff8c                 | 
3ff8c                 |         if 0
3ff8c                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
3ff8c                 | 
3ff8c                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
3ff8c                 | 
3ff8c                 |         end
3ff8c     2D 00 64 FD |                 ret
3ff90                 | end
3ff90                 | 
3ff90                 | if EMUPAD_MAX_PLAYER > 0
3ff90                 | '------------------------------------------------------------------------------
3ff90                 | ' Clear EmuPad state
3ff90                 | '------------------------------------------------------------------------------
3ff90                 | emupad_reset
3ff90                 | 
3ff90                 | '------------------------------------------------------------------------------
3ff90                 | ' Get EmuPad Player number for current device (into retval)
3ff90                 | ' Z flag is also set if current device is valid
3ff90                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
3ff90                 | '------------------------------------------------------------------------------
3ff90                 | emupad_getnum
3ff90                 | .loop
3ff90                 | '------------------------------------------------------------------------------
3ff90                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
3ff90                 | '------------------------------------------------------------------------------
3ff90                 | emupad_discon
3ff90                 | .loop         
3ff90                 |         
3ff90                 |         ' FALL THROUGH!!!
3ff90                 | 
3ff90                 | '------------------------------------------------------------------------------
3ff90                 | ' Update EmuPad reports (all of them...)
3ff90                 | '------------------------------------------------------------------------------
3ff90                 | emupad_write_reports
3ff90                 | .devloop
3ff90                 | 
3ff90                 | end
3ff90                 | 
3ff90                 | 
3ff90                 | '------------------------------------------------------------------------------
3ff90                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
3ff90                 | '------------------------------------------------------------------------------
3ff90                 | ' On entry:
3ff90                 | ' On exit:
3ff90                 | '------------------------------------------------------------------------------
3ff90                 | hget_hub_status
3ff90     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
3ff94     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3ff98     32 91 23 F9 |                 setword hpar3, hub_next_datax, #0
3ff9c     01 90 2F F9 |                 setword hpar3, #1, #1
3ffa0     CF 02 A0 FD |                 call    #do_int_in
3ffa4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3ffa8     0C 00 90 AD |         if_z    jmp     #.data
3ffac     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3ffb0     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
3ffb4     2D 00 64 FD |                 ret
3ffb8                 | .data
3ffb8     00 90 0F F2 |                 cmp     hpar3, #0               wz
3ffbc     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3ffc0                 | 
3ffc0     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
3ffc4     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
3ffc8     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
3ffcc     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
3ffd0                 |                 debug(ubin_long(hub_status_chg))
3ffd0                 | 
3ffd0     01 5A 06 F6 |                 mov     hdev_port, #1
3ffd4                 | .loop
3ffd4     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
3ffd8     0C 00 B0 AD |         if_x1   call    #hub_port_handler
3ffdc     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
3ffe0     F0 FF 9F 3D |         if_nc   jmp     #.loop
3ffe4     2D 00 64 FD |                 ret
3ffe8                 | 
3ffe8                 | hub_port_handler
3ffe8     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
3ffec     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3fff0     27 EF 03 F6 |                 mov     pb, urx_buff_p
3fff4     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3fff8     55 02 A0 FD |                 call    #control_read
3fffc     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
40000                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
40000                 | 
40000     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
40004     50 01 90 5D |         if_x0   jmp     #.other
40008     68 02 D0 FE |                 loc     ptra, #clr_port_feat
4000c     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
40010     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
40014     A0 02 A0 FD |                 call    #control_write
40018     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
4001c     7C 01 90 5D |         if_x0   jmp     #.disconnect
40020     B0 99 02 F6 |                 mov     hctwait, _100ms_
40024     EF 02 A0 FD |                 call    #poll_waitx
40028                 | 
40028     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
4002c     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
40030     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
40034     A0 02 A0 FD |                 call    #control_write
40038                 | 
40038     02 76 07 F6 |                 mov     htmp3, #2
4003c                 | .wait_reset
4003c     AC 99 02 F6 |                 mov     hctwait, _8ms_
40040     EF 02 A0 FD |                 call    #poll_waitx
40044     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
40048     27 EF 03 F6 |                 mov     pb, urx_buff_p
4004c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
40050     55 02 A0 FD |                 call    #control_read
40054     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
40058     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
4005c     F7 77 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
40060                 | 
40060     10 02 D0 FE |                 loc     ptra, #clr_port_feat
40064     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
40068     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
4006c     A0 02 A0 FD |                 call    #control_write
40070                 | 
40070     24 70 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
40074                 | .wait_recover
40074     A7 99 02 F6 |                 mov     hctwait, _1ms_
40078     EF 02 A0 FD |                 call    #poll_waitx
4007c     FD 71 6F FB |                 djnz    htmp,#.wait_recover
40080                 | 
40080     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
40084     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
40088     0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
4008c                 | 
4008c     00 08 00 FF 
40090     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
40094     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
40098     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
4009c     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
400a0     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
400a4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
400a8     48 01 90 5D |         if_nz   jmp     #.done
400ac                 | .get_dev_desc
400ac     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
400b0     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
400b4     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
400b8     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
400bc     2D 71 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
400c0     01 71 57 FC |                 wrword  htmp, ptra[wValue]
400c4     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
400c8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
400cc     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
400d0     AC 99 02 F6 |                 mov     hctwait, _8ms_
400d4     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
400d8     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
400dc     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
400e0     BE 00 A0 FD |                 call    #calc_crc5
400e4     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
400e8     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
400ec     F7 AD C2 FA |                 rdbyte  total_data, pb
400f0     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
400f4     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
400f8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
400fc     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
40100     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
40104     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
40108                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
40108     9F 99 02 F6 |                 mov     hctwait, _500us_
4010c     EF 02 A0 FD |                 call    #poll_waitx
40110     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
40114     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
40118     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
4011c     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
40120     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
40124     CC 00 90 5D |         if_nz   jmp     #.done
40128     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
4012c     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
40130     61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
40134     61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
40138     00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
4013c     09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
40140     02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
40144     56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
40148     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
4014c     A4 00 90 CD |         if_b    jmp     #.done
40150     70 F0 BF FD |                 call    #hparse_con_desc
40154     9C 00 90 FD |                 jmp     #.done
40158                 | 
40158                 | .other
40158     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
4015c     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
40160     28 00 90 AD |         if_x1   jmp     #.reset_feature
40164     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
40168     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
4016c     1C 00 90 AD |         if_x1   jmp     #.reset_feature
40170     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
40174     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
40178     10 00 90 AD |         if_x1   jmp     #.reset_feature
4017c     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
40180     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
40184     04 00 90 AD |         if_x1   jmp     #.reset_feature
40188     68 00 90 FD |                 jmp     #.done
4018c                 | .reset_feature
4018c     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
40190     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
40194     A0 02 A0 FD |                 call    #control_write
40198     58 00 90 FD |                 jmp     #.done
4019c                 | .disconnect
4019c                 | 
4019c     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
401a0     00 70 E3 F8 |                 getbyte htmp
401a4     03 70 0F F2 |                 cmp     htmp,#KB_READY wz
401a8     05 70 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
401ac     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
401b0     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
401b4     00 76 06 A6 |         if_z    mov     kb_led_states, #0
401b8     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
401bc                 |         if EMUPAD_MAX_PLAYER > 0
401bc                 |         end
401bc                 |         if HAVE_MOUSE
401bc     04 70 0F F2 |                 cmp     htmp, #M_READY          wz
401c0     05 70 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
401c4     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
401c8                 |         end
401c8                 |         if HAVE_HIDPAD
401c8     14 0A F0 FE |                 loc ptrb,#hidpad_report
401cc     2D 71 03 F6 |                 mov htmp,hdev_port
401d0     01 70 E7 F2 |                 cmpsub htmp,#1
401d4     1C 70 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
401d8     B8 F3 03 F1 |                 add ptrb,htmp
401dc     28 0C 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
401e0     80 01 6C FC |                 wrlong #0,ptrb
401e4                 |         end
401e4                 | 
401e4     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
401e8     00 00 C4 F8 |                 setbyte #0
401ec     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
401f0     00 00 04 F6 |                 mov     0-0, #0
401f4                 | 
401f4                 | .done
401f4     0E 68 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
401f8     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
401fc     22 6D 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
40200     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
40204     A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
40208     A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
4020c                 | 
4020c     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
40210     27 EF 03 F6 |                 mov     pb, urx_buff_p
40214     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
40218     55 02 A0 FD |                 call    #control_read
4021c     00 69 06 FB |                 rdlong  hub_port_status, ptra
40220                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
40220     2D 00 64 FD |                 ret
40224                 | 
40224                 | '------------------------------------------------------------------------------
40224                 | ' Partially populated SETUP packets
40224                 | '------------------------------------------------------------------------------
40224     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
40225     06          |                 byte    REQ_GET_DESC
40226     00 01       |                 word    TYPE_DEVICE << 8
40228     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
4022a     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
4022c     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
4022d     06          |                 byte    REQ_GET_DESC
4022e     00 02       |                 word    TYPE_CONFIG << 8
40230     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
40232     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
40234     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
40235     09          |                 byte    REQ_SET_CONFIG
40236     00 00       |                 word    0       ' Configuration value
40238     00 00       |                 word    0       ' Zero
4023a     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
4023c     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
4023d     05          |                 byte    REQ_SET_ADDR
4023e     00 00       |                 word    0       ' Zero
40240     00 00       |                 word    0       ' Zero
40242     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
40244                 | '------------------------------------------------------------------------------
40244                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
40244                 | ' wValue field dictates which protocol should be used.
40244                 | '
40244                 | ' When initialized, all devices default to report protocol. However the host
40244                 | ' should not make any assumptions about the device state and should set the
40244                 | ' desired protocol whenever initializing a device.
40244                 | '------------------------------------------------------------------------------
40244     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
40245     0B          |                 byte    HID_SET_PROTO
40246     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
40248                 |                                                 ' (HID 1.11 Section 7.2.6).
40248     00 00       |                 word    0               ' Interface index number.
4024a     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
4024c                 | '------------------------------------------------------------------------------
4024c     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
4024d     0A          |                 byte    HID_SET_IDLE
4024e     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
40250                 |                                         ' reporting until a change is detected in the report data
40250                 | 
40250                 |                                         ' (HID 1.11 Section 7.2.4).
40250     00 00       |                 word    0       ' Interface index number.
40252     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
40254     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
40255     09          |                 byte    HID_SET_REPORT
40256     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
40258                 |                                         ' (HID 1.11 Section 7.2.2).
40258     00 00       |                 word    0       ' Interface index number.
4025a     00 00       |                 word    0       ' Size of the report, in bytes.
4025c     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
4025d     06          |                 byte    REQ_GET_DESC
4025e     00 22       |                 word    TYPE_REPORT << 8
40260     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
40262     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
40264                 | '------------------------------------------------------------------------------
40264     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
40265     06          |                 byte    REQ_GET_DESC
40266     00 29       |                 word    TYPE_HUB << 8
40268     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
4026a     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
4026c     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
4026d     03          |                 byte    REQ_SET_FEATURE
4026e     00 00       |                 word    0       ' port power
40270     01 00       |                 word    1       ' Port index number (1+)
40272     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
40274     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
40275     01          |                 byte    REQ_CLEAR_FEATURE
40276     00 00       |                 word    0       ' port power
40278     01 00       |                 word    1       ' Port index number (1+)
4027a     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
4027c     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
4027d     00          |                 byte    REQ_GET_STATUS
4027e     00 00       |                 word    0
40280     01 00       |                 word    1       ' Port index number (1+)
40282     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
40284                 | '------------------------------------------------------------------------------
40284                 | if _HAVE_GAMEPAD
40284     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
40288                 | ps3_command_buff
40288     00 00 00 00 
4028c     00          |                 byte    $00, $00, $00, $00, $00
4028d     00 00 00 00 
40291     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
40292     FF 27 10 00 
40296     32          |                 byte    $FF, $27, $10, $00, $32
40297     FF 27 10 00 
4029b     32          |                 byte    $FF, $27, $10, $00, $32
4029c     FF 27 10 00 
402a0     32          |                 byte    $FF, $27, $10, $00, $32
402a1     FF 27 10 00 
402a5     32          |                 byte    $FF, $27, $10, $00, $32
402a6     00 00 00 00 
402aa     00          |                 byte    $00, $00, $00, $00, $00
402ab     00 00 00 00 
402af     00          |                 byte    $00, $00, $00, $00, $00
402b0     00 00 00 00 
402b4     00          |                 byte    $00, $00, $00, $00, $00
402b5     00 00 00    |                 byte    $00, $00, $00
402b8                 | '------------------------------------------------------------------------------
402b8     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
402bb                 |                                         ' 0x01 All blinking
402bb                 |                                         ' 0x02 1 flashes, then on
402bb                 |                                         ' 0x03 2 flashes, then on
402bb                 |                                         ' 0x04 3 flashes, then on
402bb                 |                                         ' 0x05 4 flashes, then on
402bb                 |                                         ' 0x06 1 on
402bb                 |                                         ' 0x07 2 on
402bb                 |                                         ' 0x08 3 on
402bb                 |                                         ' 0x09 4 on
402bb                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
402bb                 |                                         ' 0x0B Blinking*
402bb                 |                                         ' 0x0C Slow blinking*
402bb                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
402bb     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
402be     00          |                 byte    $00             ' Left rumble
402bf     00          |                 byte    $00             ' Right rumble
402c0     00 00 00    |                 byte    $00, $00, $00
402c3     00          | end
402c4                 | alignl
402c4                 | 
402c4                 | if HAVE_MOUSE
402c4     00 00 00 00 
402c8     00 00 00 00 | mouse_limits long 0[2]
402cc     00 00 00 00 | mouse_outptr long 0
402d0                 | end
402d0                 | 
402d0                 | if KEYQUEUE_SIZE > 0
402d0     00          | keyq_head byte 0
402d1     00          | keyq_tail byte 0
402d2     00 00 00 00 
      ...             
404ce     00 00 00 00 
404d2     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
404d4                 | alignl
404d4                 | end
404d4                 | 
404d4                 | if EMUPAD_MAX_PLAYER > 0
404d4                 | emupad_rule_buffer
404d4                 | if EMUPAD_BUILTIN_RULES
404d4                 | file "padmap_builtin.dat"
404d4                 | end
404d4                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
404d4                 | '' Default rule directly follows!
404d4                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
404d4                 | end
404d4                 | 
404d4                 | '------------------------------------------------------------------------------
404d4                 | ' The USB data cache area gets zero-filled at every device disconnect
404d4                 | '------------------------------------------------------------------------------
404d4                 | usb_cache_start
404d4                 | 
404d4                 | ' HID descriptor and report buffers
404d4                 | if !!OVERLAP_MEMORY
404d4     00 00 00 00 
      ...             
40bcc     00 00 00 00 
40bd0     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
40bd4                 | end
40bd4     00 00 00 00 
40bd8     00 00 00 00 | hkbd_report     byte    0[8]
40bdc     00 00 00 00 | hkbd_led_rep    byte    0
40be0                 | alignl
40be0                 | 
40be0                 | if HAVE_HIDPAD
40be0     00 00 00 00 
      ...             
40c9c     00 00 00 00 
40ca0     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
40ca4                 | end
40ca4                 | 
40ca4                 | ' HUB descriptor
40ca4     00          | hub_descr       byte    0   ' bDescLength
40ca5     00          |                 byte    0   ' bDescriptorType
40ca6     00          |                 byte    0   ' bNbrPorts
40ca7     00 00       |                 word    0   ' wHubCharacteristics
40ca9     00          |                 byte    0   ' bPwrOn2PwrGood
40caa     00          |                 byte    0   ' bHubContrCurrent
40cab     00          |                 byte    0   ' DeviceRemoveable
40cac     00          |                 byte    0   ' PortPwrCtrlMask
40cad                 | 
40cad                 | usb_cache_end
40cad                 | 
40cad                 | if HAVE_MOUSE
40cad     00 00 00 00 | mouse_xacc      long 0
40cb1     00 00 00 00 | mouse_yacc      long 0
40cb5     00 00 00 00 | mouse_zacc      long 0
40cb9     00          | mouse_bstate    byte 0
40cba     00          | mouse_lpending  byte 0
40cbb     00          | mouse_rpending  byte 0
40cbc     00          | mouse_mpending  byte 0
40cbd     00          | mouse_lock      byte 0
40cbe     00 00 00    |                 byte 0[3] ' padding
40cc1                 | end
40cc1                 | 
40cc1     00 00 00 00 
      ...             
40d39     00 00 00 00 
40d3d     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
40d41     00 00 00 00 
40d45     00 00 00 00 
40d49     00 00 00 00 
40d4d     00 00 00 00 
40d51     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
40d53     00 00 00 00 
      ...             
40e4b     00 00 00 00 
40e4f     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
40e53                 | 
40e53     00          | driver_cog      byte    0                       ' Current driver cog + 1
40e54                 | 	alignl
40e54                 | _audio096_spin2_dat_
40e54                 | 
40e54                 | audio       org     0
40e54                 | 
40e54     61 CD 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
40e58     61 1B 06 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
40e5c     61 27 06 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
40e60                 |  
40e60     01 EC 63 FD |             cogid   pa                   ' compute cogid
40e64     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
40e68     F6 CD 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
40e6c     E6 CA 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
40e70                 | 
40e70     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
40e74     0E 24 06 FC |             wrpin   dac2,#left            ' Noise dither DACs at clk/95
40e78     0E 00 1E FC |             wxpin   #256,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
40e7c     0F 24 06 FC |             wrpin   dac2,#right
40e80     0F 00 1E FC |             wxpin   #256,#right    
40e84     41 9C 64 FD |             dirh    #left addpins 1
40e88     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
40e8c     CD E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
40e90     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
40e94                 |             
40e94                 | '---------------------------------------------------------------------------------        
40e94                 | '----------------- The main loop -------------------------------------------------
40e94                 | '---------------------------------------------------------------------------------
40e94                 | 
40e94     D6 AE 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
40e98     10 00 90 CD |       if_c  jmp     #loop1
40e9c                 |   
40e9c     09 00 06 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
40ea0     D6 00 8E F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
40ea4     D5 00 80 F1 |             sub     0-0,a40000000
40ea8     FD 01 6E FB |             djnz    cn,#p402
40eac                 |     
40eac     00 00 06 F6 | loop1       mov     cn,#0               ' Find the channel to compute
40eb0     D8 02 02 F6 |             mov     ct,time1            ' with the lowest next sample time
40eb4     D9 02 3A F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
40eb8     01 00 06 C6 |     if_c    mov     cn,#1
40ebc     DA 02 3A F3 |             fle     ct,time3 wcz
40ec0     02 00 06 C6 |     if_c    mov     cn,#2     
40ec4     DB 02 3A F3 |             fle     ct,time4 wcz
40ec8     03 00 06 C6 |     if_c    mov     cn,#3
40ecc     DC 02 3A F3 |             fle     ct,time5 wcz
40ed0     04 00 06 C6 |     if_c    mov     cn,#4
40ed4     DD 02 3A F3 |             fle     ct,time6 wcz
40ed8     05 00 06 C6 |     if_c    mov     cn,#5
40edc     DE 02 3A F3 |             fle     ct,time7 wcz
40ee0     06 00 06 C6 |     if_c    mov     cn,#6
40ee4     DF 02 3A F3 |             fle     ct,time8 wcz
40ee8     07 00 06 C6 |     if_c    mov     cn,#7
40eec                 | 
40eec                 | 
40eec                 | '----------------------------------------------------------------------------------
40eec                 | '------------- Compute channel samples --------------------------------------------
40eec                 | '----------------------------------------------------------------------------------
40eec                 | 
40eec                 | 
40eec     00 C1 01 F6 | p401        mov     channeladd,cn             	' compute the pointer to channel parameters block
40ef0     06 C0 65 F0 |             shl     channeladd,#6
40ef4     E0 F0 03 F1 |             add     ptra,channeladd
40ef8                 | 
40ef8     28 16 64 FD |             setq    #11                        	' read parameters
40efc     00 D7 05 FB |             rdlong  pointer0,ptra
40f00                 |     	    
40f00     1F E4 0D F4 | p408        testb   command0,#31 wz	      	' bit #31 command - set the DAC sample rate
40f04     18 00 90 5D |     if_nz   jmp     #p404                     	' if not set, proceed
40f08     F2 C4 31 F9 |             getword qq,command0,#0            	' get the new rate
40f0c     4E C4 15 FC |             wxpin   qq,#left addpins 1        	' and program the pins
40f10     E2 C4 E1 F8 |             getbyte qq,qq,#0 		      	' check if the rate is n*256
40f14     00 C4 0D F2 |             cmp     qq,#0 wz                         
40f18     4E 24 06 AC |     if_z    wrpin   dac2,#left addpins 1      	' if yes, set PWM DAC mode
40f1c     4E 22 06 5C |     if_nz   wrpin   dac,#left addpins 1       	' else set noise DAC mode
40f20                 |             
40f20     1E E4 1D F4 | p404        bitl    command0,#30 wcz          	' bit #30: select PSRAM/HUB
40f24     E6 CA 01 56 |     if_nz   mov     mailbox,mailbox2            ' if not set, use PSRAM
40f28     00 CA 05 A6 |     if_z    mov     mailbox,#0                  ' if set, use HUB 
40f2c                 | 
40f2c     EC 06 32 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
40f30     EC 08 3A F9 |             getword oldrs,sample0,#1
40f34     F0 FC 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
40f38     F0 FA 31 F9 |     	    getword avol0,volpan0,#0
40f3c     F1 F8 39 F9 |             getword askip0,freqskip0,#1    	    
40f40     F1 F6 31 F9 |             getword afreq0,freqskip0,#0
40f44                 | 
40f44     D8 00 96 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
40f48     00 04 02 F6 |             mov     dt0,0-0    
40f4c     D7 04 82 F1 |             sub     dt0,time0
40f50                 |             
40f50     D8 00 8E F9 |             altd    cn, #time1                ' add channel period to channel time
40f54     FB 00 00 F1 |             add     0-0,afreq0  	
40f58                 |             
40f58                 | '---- envelopes
40f58                 |             
40f58     00 E8 1D F2 |             cmp     envptr0,#0 wcz    		' read the pointer
40f5c     20 00 00 AF 
40f60     00 48 06 A6 |     if_z    mov     envs1,##$4000		' if 0, no envelope, load $4000=1 for scas
40f64     5C 00 90 AD |     if_z    jmp     #p410			' and run away	
40f68                 | 
40f68     FB 48 02 F6 |             mov     envs1,afreq0
40f6c     F5 48 02 FA |             mul     envs1,envspd0
40f70     24 E7 01 F1 |             add     envph0,envs1 
40f74                 | 
40f74     F3 44 02 F6 |       	    mov     envhi, envph0		' move phase acc to high part of env pointer
40f78     06 44 46 F0 | 	    shr     envhi,#6			' leave 10 bits in hi
40f7c     22 47 32 F9 | 	    getword envlo,envhi,#0              ' and 16 bit in lo
40f80     10 44 46 F0 | 	    shr     envhi,#16			' move 10 bits of hi to the lower word
40f84     F6 44 1A F2 | 	    cmp     envhi,envlen0 wcz		' compare this to envelope length
40f88     F6 44 02 36 |     if_ge   mov     envhi,envlen0		' if greater than, set it at envlen
40f8c     00 46 06 36 |     if_ge   mov     envlo,#0
40f90     F6 E6 01 36 |     if_ge   mov     envph0,envlen0
40f94     16 E6 65 30 |     if_ge   shl     envph0,#22
40f98                 | 
40f98     22 49 02 F6 |             mov     envs1,envhi			' get the phase acc
40f9c     01 48 66 F0 |             shl     envs1,#1			' env defs are words, so phase acc*=2
40fa0     F4 48 02 F1 |             add     envs1,envptr0		' and add the pointer
40fa4     24 49 02 FB |             rdlong  envs1,envs1			' then read 2 entries
40fa8     24 4B 3A F9 |             getword envs2,envs1,#1		' next value
40fac     24 49 32 F9 |             getword envs1,envs1,#0		' current value
40fb0     23 4B 02 FA |             mul     envs2,envlo			' linear interpolate : new val x envlo
40fb4     23 47 22 F6 |             not     envlo			' sum of envlo and not envlo is always $FFFF
40fb8     23 49 02 FA |             mul     envs1,envlo
40fbc     25 49 02 F1 |             add     envs1,envs2
40fc0     12 48 46 F0 |             shr     envs1,#18			' normalize it to $4000
40fc4                 |             
40fc4     1B DA 0D F4 | p410        testb   sstart0, #27 wz
40fc8     1B C6 61 AD |     if_z    getrnd  spl
40fcc     58 00 90 AD |     if_z    jmp     #p406
40fd0                 |  
40fd0     FC D6 01 F1 |             add     pointer0,askip0           	' compute the pointer to the next sample       
40fd4     EB 42 C2 F8 |             setbyte pointer00,pointer0,#0
40fd8     08 D6 45 F0 |             shr     pointer0,#8
40fdc                 |          
40fdc     1F DA 0D F4 |             testb   sstart0,#31 wz            
40fe0     01 D6 65 A0 |     if_z    shl     pointer0,#1        
40fe4     1C DA 0D F4 |             testb   sstart0,#28 wz            
40fe8     01 D6 65 A0 |     if_z    shl     pointer0,#1        
40fec                 |         
40fec     EF D6 19 F2 |             cmp     pointer0,lend0 wcz
40ff0     EF D6 81 31 |     if_ge   sub     pointer0,lend0	      	' and loop if needed     
40ff4     EE D6 01 31 |     if_ge   add     pointer0,lstart0       
40ff8                 |             
40ff8     EB C4 01 F6 |             mov     qq,pointer0               	' compute place in the memory from where the sample will be loaded
40ffc     ED C4 01 F1 |             add     qq,sstart0            
41000                 | 
41000     FF CB 5D F2 |             cmps    mailbox,#$1FF wcz          	' the mailbox has to point somewhere not at the start of HUB RAM
41004     E2 C6 E1 EA |     if_le   rdword  spl,qq                     	' if not, use HUB RAM for samples
41008     1C 01 B0 1D |     if_gt   call    #cache_read
4100c                 |          
4100c     1F DA 0D F4 |             testb   sstart0,#31 wz 
41010     08 C6 65 50 |     if_nz   shl     spl,#8
41014     08 D6 65 50 |     if_nz   shl     pointer0,#8
41018     07 D6 65 A0 |     if_z    shl     pointer0,#7
4101c     1C DA 0D F4 |             testb   sstart0,#28 wz            
41020     01 D6 45 A0 |     if_z    shr     pointer0,#1    
41024     21 D7 C1 F8 | 	    setbyte pointer0,pointer00,#0       
41028                 | 
41028                 | 
41028     24 C7 31 FA | p406        scas    spl,envs1			' apply envelope
4102c     00 C6 01 F6 |             mov     spl,0-0
41030     FD C6 31 FA |             scas    spl,avol0                 	' apply volume
41034     00 C6 01 F6 |             mov     spl,0-0
41038                 | 
41038     FE C6 31 FA |             scas    spl,apan0                 	' apply pan
4103c     00 0A 02 F6 |             mov     ls0,0-0
41040     20 00 00 FF 
41044     00 C4 05 F6 |             mov     qq,##16384
41048     FE C4 81 F1 |             sub     qq,apan0
4104c     E2 C6 31 FA |             scas    spl,qq
41050     00 0C 02 F6 |             mov     rs0, 0-0
41054                 | 
41054     04 11 82 F1 |             sub     rs,oldrs 		      	' replace the old sample with the new one in the mix
41058     06 11 02 F1 |             add     rs,rs0
4105c     03 0F 82 F1 |             sub     ls,oldls
41060     05 0F 02 F1 |             add     ls,ls0
41064                 |    
41064     06 D9 29 F9 |             setword sample0,rs0,#1           	' pack samples into long
41068     05 D9 21 F9 |             setword sample0,ls0,#0
4106c                 |             
4106c     1E DA 1D F4 |             bitl    sstart0, #30 wcz          	' if bit #30 of start pointer is set, the current pointers needs resetting  
41070     00 D6 05 A6 |     if_z    mov     pointer0, #0  		
41074     00 E6 05 A6 |     if_z    mov     envph0, #0  		' reset also envelope pha and sample value
41078                 |   '  if_z    mov     sample0,#0
41078     02 DB 65 AC |     if_z    wrlong  sstart0, ptra[2]          	' reset bit #30 in hub
4107c     1D DA 1D F4 |             bitl    sstart0, #29 wcz	      	' if bit #29 is set, synchronize stereo at channels 1 and 2
41080     04 00 00 AF 
41084     00 B0 05 A1 |     if_z    add     time1,##2048
41088     D8 B2 01 A6 |     if_z    mov     time2,time1
4108c     02 DB 65 AC |     if_z    wrlong  sstart0,ptra[2]
41090                 | 
41090     28 02 64 FD | p403        setq    #1                         	' write new pointer and sample value to the hub
41094     00 D7 65 FC |             wrlong  pointer0,ptra
41098     08 E7 65 FC |             wrlong  envph0,ptra[8]
4109c     E0 F0 83 F1 |             sub     ptra, channeladd         	' reset the pointer to channel parameters
410a0                 |                       
410a0     D7 FE 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
410a4     FF C3 25 A7 |     if_z    decmod  front, #511          
410a8                 |          
410a8     07 07 32 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
410ac     08 09 32 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
410b0     0F 06 E6 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
410b4     0F 08 E6 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
410b8                 | 	    
410b8                 | 		    
410b8     03 09 2A F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
410bc     0A 13 02 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
410c0     04 15 02 F6 |             mov     newsample, oldrs       
410c4                 | 
410c4     D7 FE 01 F6 |             mov     oldt0,time0              ' update global time
410c8     02 AF 01 F1 |             add     time0,dt0    
410cc                 |                                      
410cc     00 04 0E F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
410d0     D8 FD 9F AD |     if_z    jmp     #loop1
410d4     02 C5 01 F6 |             mov     qq,dt0
410d8                 | 
410d8                 |     
410d8                 |             
410d8     01 4E 36 F0 | p301        rol     dropper,#1 wc
410dc     40 00 90 3D |     if_nc   jmp     #p399
410e0     FF F3 97 F9 | p398        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
410e4     00 C2 9D F2 |             cmpr    front, #0-0 wcz
410e8     F4 FF 9F AD |     if_e    jmp     #p398   
410ec                 | 		
410ec     00 1A 0E F2 | 	    cmp     scbase,#0 wz
410f0     20 00 90 AD |     if_z    jmp     #p302	   
410f4                 |   
410f4     3F 20 16 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
410f8     0E 1F 02 C6 |     if_c    mov     scptr2,scptr
410fc     02 1E 66 C0 |     if_c    shl     scptr2,#2
41100     0D 1F 02 C1 |     if_c    add     scptr2,scbase     
41104     60 1E 66 FC |             wrlong  scptr2,#$60
41108     0F 13 62 CC |     if_c    wrlong  oldsample,scptr2
4110c     01 00 00 CF 
41110     7F 1C 06 C7 |     if_c    incmod  scptr,##639
41114                 | 			    
41114     E1 12 32 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
41118     00 00 00 FF 
4111c     FF C3 05 F7 |             incmod  front, ##511
41120     ED C5 6D FB | p399        djnz    qq,#p301
41124                 |             
41124     6C FD 9F FD |             jmp     #loop            'loop
41128                 | 
41128                 | '----------------------------------------------------------------------------------
41128                 | '------------- This is the end of the main loop -----------------------------------
41128                 | '----------------------------------------------------------------------------------
41128                 | 
41128                 | '----------------------------------------------------------------------------------
41128                 | '------------- PSRAM cache ----------- --------------------------------------------
41128                 | '----------------------------------------------------------------------------------
41128                 | 
41128                 | ' There are 8 cache pointers for 8 channels
41128                 | ' if 24 higher bits of address=cache, then get a word from the cache
41128                 | ' else load the cache from PSRAM, update the pointer, then read a sample
41128                 | 
41128                 | 
41128     E2 3E E2 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
4112c                 |             
4112c     E2 40 02 F6 | 	    mov     addrhi,qq		
41130     08 40 46 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
41134     14 01 96 F9 | 	    alts    cn,#cache1            
41138     00 40 0A F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
4113c     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
41140                 | 	
41140     14 01 8E F9 | p702	    altd    cn,#cache1			' cache miss. 
41144     20 01 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
41148     20 39 02 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
4114c     08 38 66 F0 | 	    shl     cmd,#8
41150     0B 38 3E F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
41154     00 3B 02 F6 |             mov     hubaddr,cn                  ' to the channel cache
41158     08 3A 66 F0 |             shl     hubaddr,#8                  '
4115c     13 3B 02 F1 |             add     hubaddr,hubptr 
41160     00 3D 06 F6 |             mov     count,#256                  ' 256 bytes
41164     28 04 64 FD |             setq    #2                          ' write 3 longs
41168     E5 38 62 FC |             wrlong  cmd, mailbox                ' run it
4116c     E5 38 02 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
41170     FE 39 B6 FB |             tjs     cmd, #poll1                 ' retry until valid 
41174                 |             
41174                 | 	
41174     00 C5 01 F6 | p701	    mov     qq,cn			' cache hit
41178     08 C4 65 F0 | 	    shl     qq,#8			' compute the cache start
4117c     13 C5 01 F1 | 	    add     qq,hubptr
41180     1F C5 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
41184     E2 C6 E1 0A |     _ret_   rdword  spl,qq                      ' read a word
41188                 |           
41188                 | 
41188                 | '--------------------------------------------------------------------------
41188                 | '------ Interrupt service -------------------------------------------------
41188                 | '------ Output the sample, get the next one if exists ---------------------
41188                 | '--------------------------------------------------------------------------
41188                 | 
41188     0E CE 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 95 cycles     
4118c     0F D0 25 FC |             wypin   rsample,#right       '4
41190     E1 F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
41194     80 D3 A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
41198     FF F3 07 57 |     if_ne   incmod  ptrb,#511
4119c     E9 D0 39 59 |     if_ne   getword rsample,lsnext,#1    '13
411a0     E9 CE 31 59 |     if_ne   getword lsample,lsnext,#0    '15
411a4                 |     
411a4     F5 FF 3B FB |             reti1                        '17/19 
411a8                 |           
411a8                 | '---------------------------------------------------------------------------
411a8                 | '-------- End of interrupt -------------------------------------------------
411a8                 | '---------------------------------------------------------------------------    
411a8                 | 
411a8                 | 
411a8                 | '---------------------------------------------------------------------------
411a8                 | '------- Variables ---------------------------------------------------------
411a8                 | '---------------------------------------------------------------------------
411a8                 | 
411a8                 | ' constants
411a8                 | 
411a8     00 00 00 40 | a40000000   long $40000000
411ac     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
411b0                 | 
411b0                 | ' Time variables
411b0                 | 
411b0     00 00 00 00 | time0       long 0    ' Global sample computing time
411b4     01 00 00 00 | time1       long 1    ' Local channels time
411b8     02 00 00 00 | time2       long 2
411bc     03 00 00 00 | time3       long 3
411c0     04 00 00 00 | time4       long 4
411c4     05 00 00 00 | time5       long 5
411c8     06 00 00 00 | time6       long 6
411cc     07 00 00 00 | time7       long 7
411d0     08 00 00 00 | time8       long 8
411d4                 | 
411d4     00 00 00 00 | channeladd long 0
411d8                 | 
411d8     00 00 00 00 | front       long 0
411dc                 | 
411dc                 | ' temporary variables 
411dc     00 00 00 00 | qq          long 0
411e0     00 00 00 00 | spl         long 0
411e4     00 00 00 00 | zero        long 0
411e8     00 00 00 00 | mailbox     long 0
411ec     00 00 00 00 | mailbox2 long 0
411f0                 | 
411f0                 | ' Interrupt ISR variables
411f0                 | 
411f0     00 00 00 00 | lsample     long 0
411f4     00 00 00 00 | rsample     long 0
411f8     00 00 00 00 | lsnext      long 0
411fc     00 00 00 00 | rsnext      long 0 
41200                 | 
41200                 | ' channel parameter block
41200                 | 
41200     00 00 00 00 | pointer0    long 0     
41204     00 00 00 00 | sample0     long 0
41208     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
4120c     00 00 00 00 | lstart0     long 0
41210     00 00 00 00 | lend0       long 0
41214     00 00 00 00 | volpan0     long 0
41218     00 00 00 00 | freqskip0   long 0
4121c     00 00 00 00 | command0    long 0
41220     00 00 00 00 | envph0	    long 0
41224     00 00 00 00 | envptr0	    long 0
41228     00 00 00 00 | envspd0	    long 0
4122c     00 00 00 00 | envlen0	    long 0
41230     00 00 00 00 | res5	    long 0
41234     00 00 00 00 | res6	    long 0
41238     00 00 00 00 | res7	    long 0
4123c     00 00 00 00 | res8	    long 0
41240                 | 
41240     00 00 00 00 | afreq0      long 0
41244     00 00 00 00 | askip0      long 0
41248     00 00 00 00 | avol0       long 0
4124c     00 00 00 00 | apan0       long 0
41250                 | 
41250     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
41254     00 00 00 00 | cn          long 0
41258     00 00 00 00 | ct          long 0
4125c     00 00 00 00 | dt0         long 0
41260                 | 
41260                 | ' Samples
41260     00 00 00 00 | oldls       long 0
41264     00 00 00 00 | oldrs       long 0
41268                 | 
41268     00 00 00 00 | ls0         long 0
4126c     00 00 00 00 | rs0         long 0
41270                 | 
41270     00 00 00 00 | ls          long 0    
41274     00 00 00 00 | rs          long 0
41278                 | 
41278     00 00 00 00 | oldsample   long 0
4127c     00 00 00 00 | newsample   long 0
41280                 | 
41280     00 00 00 00 | nrsample    long 0
41284     00 00 00 00 | nlsample    long 0
41288                 | 
41288     00 00 00 00 | scbase long 0
4128c     00 00 00 00 | scptr long 0
41290     00 00 00 00 | scptr2 long 0
41294     00 00 00 00 | scope long 0
41298                 | 
41298     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
4129c     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
412a0                 | 
412a0     00 18 07 00 | hubptr      long $71800
412a4     00 00 00 00 | cache1      long 0
412a8     00 00 00 00 | cache2      long 0
412ac     00 00 00 00 | cache3      long 0
412b0     00 00 00 00 | cache4      long 0
412b4     00 00 00 00 | cache5      long 0
412b8     00 00 00 00 | cache6      long 0
412bc     00 00 00 00 | cache7      long 0
412c0     00 00 00 00 | cache8      long 0
412c4                 | 
412c4                 | 
412c4     00 00 00 00 | cmd         long 0
412c8     00 00 00 00 | hubaddr     long 0
412cc     00 01 00 00 | count       long 256
412d0     00 00 00 00 | addrlo long 0
412d4     00 00 00 00 | addrhi long 0
412d8     00 00 00 00 | pointer00 long 0
412dc     00 00 00 00 | envhi long 0
412e0     00 00 00 00 | envlo long 0
412e4     00 00 00 00 | envs1 long 0
412e8     00 00 00 00 | envs2 long 0
412ec     00 00 00 00 | noise0 long 0
412f0     92 92 92 92 | dropper long %10010010_10010010_10010010_10010010
412f4     00 00 00 00 
412f8     00 00 00 00 | null  			long 	0,0           ' for channel reset
412fc                 | 	alignl
412fc                 | __system__dat_
412fc     00 00 00 00 
41300     00 00 00 00 | 	byte	$00[8]
41304     03 00 00 00 
41308     00 00 00 00 
4130c     00 00 00 00 
41310     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
41314     00 00 00 00 
      ...             
415a0     00 00 00 00 
415a4     00 00 00 00 | 	byte	$00[660]
415a8     00 00 C0 0A | 	long	(172 {__system____root_opendir})<<20
415ac     00 00 D0 0A | 	long	(173 {__system____root_closedir})<<20
415b0     00 00 E0 0A | 	long	(174 {__system____root_readdir})<<20
415b4     00 00 F0 0A | 	long	(175 {__system____root_stat})<<20
415b8     00 00 00 00 
415bc     00 00 00 00 
415c0     00 00 00 00 
415c4     00 00 00 00 
415c8     00 00 00 00 
415cc     00 00 00 00 
415d0     00 00 00 00 | 	byte	$00[28]
415d4     3C 16 04 00 | 	long	@@@__system__dat_ + 832
415d8     3F 16 04 00 | 	long	@@@__system__dat_ + 835
415dc     60 16 04 00 | 	long	@@@__system__dat_ + 868
415e0     79 16 04 00 | 	long	@@@__system__dat_ + 893
415e4     94 16 04 00 | 	long	@@@__system__dat_ + 920
415e8     AE 16 04 00 | 	long	@@@__system__dat_ + 946
415ec     BE 16 04 00 | 	long	@@@__system__dat_ + 962
415f0     D0 16 04 00 | 	long	@@@__system__dat_ + 980
415f4     E2 16 04 00 | 	long	@@@__system__dat_ + 998
415f8     F4 16 04 00 | 	long	@@@__system__dat_ + 1016
415fc     00 17 04 00 | 	long	@@@__system__dat_ + 1028
41600     11 17 04 00 | 	long	@@@__system__dat_ + 1045
41604     25 17 04 00 | 	long	@@@__system__dat_ + 1065
41608     2F 17 04 00 | 	long	@@@__system__dat_ + 1075
4160c     3F 17 04 00 | 	long	@@@__system__dat_ + 1091
41610     4E 17 04 00 | 	long	@@@__system__dat_ + 1106
41614     64 17 04 00 | 	long	@@@__system__dat_ + 1128
41618     7D 17 04 00 | 	long	@@@__system__dat_ + 1153
4161c     91 17 04 00 | 	long	@@@__system__dat_ + 1173
41620     9F 17 04 00 | 	long	@@@__system__dat_ + 1187
41624     B3 17 04 00 | 	long	@@@__system__dat_ + 1207
41628     BF 17 04 00 | 	long	@@@__system__dat_ + 1219
4162c     D1 17 04 00 | 	long	@@@__system__dat_ + 1237
41630     E9 17 04 00 | 	long	@@@__system__dat_ + 1261
41634     FB 17 04 00 | 	long	@@@__system__dat_ + 1279
41638     0E 18 04 00 | 	long	@@@__system__dat_ + 1298
4163c     4F 4B 00 4E 
41640     75 6D 65 72 
41644     69 63 61 6C 
41648     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
4164c     75 6D 65 6E 
41650     74 20 6F 75 
41654     74 20 6F 66 
41658     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
4165c     61 69 6E 00 
41660     52 65 73 75 
41664     6C 74 20 6E 
41668     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
4166c     65 70 72 65 
41670     73 65 6E 74 
41674     61 62 6C 65 
41678     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
4167c     65 67 61 6C 
41680     20 6D 75 6C 
41684     74 69 62 79 
41688     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
4168c     65 71 75 65 
41690     6E 63 65 00 
41694     4E 6F 20 73 
41698     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
4169c     66 69 6C 65 
416a0     20 6F 72 20 
416a4     64 69 72 65 
416a8     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
416ac     79 00 42 61 
416b0     64 20 66 69 
416b4     6C 65 20 6E 
416b8     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
416bc     72 00 50 65 
416c0     72 6D 69 73 
416c4     73 69 6F 6E 
416c8     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
416cc     69 65 64 00 
416d0     4E 6F 74 20 
416d4     65 6E 6F 75 
416d8     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
416dc     65 6D 6F 72 
416e0     79 00 54 65 
416e4     6D 70 6F 72 
416e8     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
416ec     66 61 69 6C 
416f0     75 72 65 00 
416f4     46 69 6C 65 
416f8     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
416fc     73 74 73 00 
41700     49 6E 76 61 
41704     6C 69 64 20 
41708     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
4170c     6D 65 6E 74 
41710     00 54 6F 6F 
41714     20 6D 61 6E 
41718     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
4171c     65 6E 20 66 
41720     69 6C 65 73 
41724     00 49 2F 4F 
41728     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
4172c     6F 72 00 4E 
41730     6F 74 20 61 
41734     20 64 69 72 
41738     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
4173c     72 79 00 49 
41740     73 20 61 20 
41744     64 69 72 65 
41748     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
4174c     79 00 52 65 
41750     61 64 20 6F 
41754     6E 6C 79 20 
41758     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
4175c     20 73 79 73 
41760     74 65 6D 00 
41764     46 75 6E 63 
41768     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
4176c     20 6E 6F 74 
41770     20 69 6D 70 
41774     6C 65 6D 65 
41778     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
4177c     00 44 69 72 
41780     65 63 74 6F 
41784     72 79 20 6E 
41788     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
4178c     6D 70 74 79 
41790     00 4E 61 6D 
41794     65 20 74 6F 
41798     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
4179c     6E 67 00 44 
417a0     65 76 69 63 
417a4     65 20 6E 6F 
417a8     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
417ac     65 6B 61 62 
417b0     6C 65 00 42 
417b4     61 64 20 61 
417b8     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
417bc     73 73 00 42 
417c0     72 6F 6B 65 
417c4     6E 20 63 6F 
417c8     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
417cc     74 69 6F 6E 
417d0     00 44 65 76 
417d4     69 63 65 20 
417d8     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
417dc     65 73 6F 75 
417e0     72 63 65 20 
417e4     62 75 73 79 
417e8     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
417ec     73 73 20 64 
417f0     65 76 69 63 
417f4     65 20 6C 69 
417f8     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
417fc     6F 20 73 70 
41800     61 63 65 20 
41804     6F 6E 20 64 
41808     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
4180c     65 00 55 6E 
41810     6B 6E 6F 77 
41814     6E 20 65 72 
41818     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
4181c     00 00 00 00 
41820     00 00 00 00 
41824     00 00 00 00 | 	byte	$00[12]
41828     05 00 00 00 
4182c     00 00 00 00 
41830     00 00 00 00 
41834     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
41838     00 00 00 00 | 	byte	$00, $00, $00, $00
4183c     00 00 40 0C | 	long	(196 {__system___tx})<<20
41840     00 00 50 0C | 	long	(197 {__system___rx})<<20
41844     00 00 00 00 | 	byte	$00, $00, $00, $00
41848     00 00 60 0C | 	long	(198 {__system___rxtxioctl_0773})<<20
4184c     00 00 70 0C | 	long	(199 {__system____dummy_flush_0774})<<20
41850     00 00 00 00 
41854     00 00 00 00 | 	byte	$00[8]
41858     01 00 00 00 
4185c     06 00 00 00 
41860     00 00 00 00 
41864     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
41868     00 00 00 00 
4186c     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
41870     00 00 40 0C | 	long	(196 {__system___tx})<<20
41874     00 00 50 0C | 	long	(197 {__system___rx})<<20
41878     00 00 00 00 | 	byte	$00, $00, $00, $00
4187c     00 00 60 0C | 	long	(198 {__system___rxtxioctl_0773})<<20
41880     00 00 70 0C | 	long	(199 {__system____dummy_flush_0774})<<20
41884     00 00 00 00 
41888     00 00 00 00 | 	byte	$00[8]
4188c     01 00 00 00 
41890     06 00 00 00 
41894     00 00 00 00 
41898     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
4189c     00 00 00 00 
418a0     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
418a4     00 00 40 0C | 	long	(196 {__system___tx})<<20
418a8     00 00 50 0C | 	long	(197 {__system___rx})<<20
418ac     00 00 00 00 | 	byte	$00, $00, $00, $00
418b0     00 00 60 0C | 	long	(198 {__system___rxtxioctl_0773})<<20
418b4     00 00 70 0C | 	long	(199 {__system____dummy_flush_0774})<<20
418b8     00 00 00 00 
      ...             
41a28     00 00 00 00 
41a2c     00 00 00 00 | 	byte	$00[376]
41a30     34 1A 04 00 | 	long	@@@__system__dat_ + 1848
41a34     00 00 00 00 
41a38     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
41a3c                 | 	alignl
41a3c                 | _fatfs_cc_dat_
41a3c     C7 00 FC 00 
41a40     E9 00 E2 00 
41a44     E4 00 E0 00 
41a48     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
41a4c     EA 00 EB 00 
41a50     E8 00 EF 00 
41a54     EE 00 EC 00 
41a58     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
41a5c     C9 00 E6 00 
41a60     C6 00 F4 00 
41a64     F6 00 F2 00 
41a68     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
41a6c     FF 00 D6 00 
41a70     DC 00 F8 00 
41a74     A3 00 D8 00 
41a78     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
41a7c     E1 00 ED 00 
41a80     F3 00 FA 00 
41a84     F1 00 D1 00 
41a88     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
41a8c     BF 00 AE 00 
41a90     AC 00 BD 00 
41a94     BC 00 A1 00 
41a98     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
41a9c     91 25 92 25 
41aa0     93 25 02 25 
41aa4     24 25 C1 00 
41aa8     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
41aac     A9 00 63 25 
41ab0     51 25 57 25 
41ab4     5D 25 A2 00 
41ab8     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
41abc     14 25 34 25 
41ac0     2C 25 1C 25 
41ac4     00 25 3C 25 
41ac8     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
41acc     5A 25 54 25 
41ad0     69 25 66 25 
41ad4     60 25 50 25 
41ad8     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
41adc     F0 00 D0 00 
41ae0     CA 00 CB 00 
41ae4     C8 00 31 01 
41ae8     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
41aec     CF 00 18 25 
41af0     0C 25 88 25 
41af4     84 25 A6 00 
41af8     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
41afc     D3 00 DF 00 
41b00     D4 00 D2 00 
41b04     F5 00 D5 00 
41b08     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
41b0c     DE 00 DA 00 
41b10     DB 00 D9 00 
41b14     FD 00 DD 00 
41b18     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
41b1c     AD 00 B1 00 
41b20     17 20 BE 00 
41b24     B6 00 A7 00 
41b28     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
41b2c     B0 00 A8 00 
41b30     B7 00 B9 00 
41b34     B3 00 B2 00 
41b38     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
41b3c     61 00 1A 03 
41b40     E0 00 17 03 
41b44     F8 00 07 03 
41b48     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
41b4c     78 01 00 01 
41b50     30 01 32 01 
41b54     06 01 39 01 
41b58     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
41b5c     2E 01 79 01 
41b60     06 01 80 01 
41b64     4D 00 43 02 
41b68     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
41b6c     82 01 84 01 
41b70     84 01 86 01 
41b74     87 01 87 01 
41b78     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
41b7c     8B 01 8B 01 
41b80     8D 01 8E 01 
41b84     8F 01 90 01 
41b88     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
41b8c     93 01 94 01 
41b90     F6 01 96 01 
41b94     97 01 98 01 
41b98     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
41b9c     9B 01 9C 01 
41ba0     9D 01 20 02 
41ba4     9F 01 A0 01 
41ba8     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
41bac     A2 01 A4 01 
41bb0     A4 01 A6 01 
41bb4     A7 01 A7 01 
41bb8     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
41bbc     AB 01 AC 01 
41bc0     AC 01 AE 01 
41bc4     AF 01 AF 01 
41bc8     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
41bcc     B3 01 B3 01 
41bd0     B5 01 B5 01 
41bd4     B7 01 B8 01 
41bd8     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
41bdc     BB 01 BC 01 
41be0     BC 01 BE 01 
41be4     F7 01 C0 01 
41be8     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
41bec     C3 01 C4 01 
41bf0     C5 01 C4 01 
41bf4     C7 01 C8 01 
41bf8     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
41bfc     CB 01 CA 01 
41c00     CD 01 10 01 
41c04     DD 01 01 00 
41c08     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
41c0c     12 01 F3 01 
41c10     03 00 F1 01 
41c14     F4 01 F4 01 
41c18     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
41c1c     22 02 12 01 
41c20     3A 02 09 00 
41c24     65 2C 3B 02 
41c28     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
41c2c     66 2C 3F 02 
41c30     40 02 41 02 
41c34     41 02 46 02 
41c38     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
41c3c     40 00 81 01 
41c40     86 01 55 02 
41c44     89 01 8A 01 
41c48     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
41c4c     5A 02 90 01 
41c50     5C 02 5D 02 
41c54     5E 02 5F 02 
41c58     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
41c5c     62 02 94 01 
41c60     64 02 65 02 
41c64     66 02 67 02 
41c68     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
41c6c     6A 02 62 2C 
41c70     6C 02 6D 02 
41c74     6E 02 9C 01 
41c78     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
41c7c     9D 01 73 02 
41c80     74 02 9F 01 
41c84     76 02 77 02 
41c88     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
41c8c     7A 02 7B 02 
41c90     7C 02 64 2C 
41c94     7E 02 7F 02 
41c98     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
41c9c     82 02 A9 01 
41ca0     84 02 85 02 
41ca4     86 02 87 02 
41ca8     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
41cac     B1 01 B2 01 
41cb0     45 02 8D 02 
41cb4     8E 02 8F 02 
41cb8     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
41cbc     B7 01 7B 03 
41cc0     03 00 FD 03 
41cc4     FE 03 FF 03 
41cc8     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
41ccc     86 03 88 03 
41cd0     89 03 8A 03 
41cd4     B1 03 11 03 
41cd8     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
41cdc     A3 03 A3 03 
41ce0     C4 03 08 03 
41ce4     CC 03 03 00 
41ce8     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
41cec     8F 03 D8 03 
41cf0     18 01 F2 03 
41cf4     0A 00 F9 03 
41cf8     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
41cfc     F5 03 F6 03 
41d00     F7 03 F7 03 
41d04     F9 03 FA 03 
41d08     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
41d0c     20 03 50 04 
41d10     10 07 60 04 
41d14     22 01 8A 04 
41d18     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
41d1c     0E 01 CF 04 
41d20     01 00 C0 04 
41d24     D0 04 44 01 
41d28     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
41d2c     00 00 7D 1D 
41d30     01 00 63 2C 
41d34     00 1E 96 01 
41d38     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
41d3c     00 1F 08 06 
41d40     10 1F 06 06 
41d44     20 1F 08 06 
41d48     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
41d4c     40 1F 06 06 
41d50     51 1F 07 00 
41d54     59 1F 52 1F 
41d58     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
41d5c     5D 1F 56 1F 
41d60     5F 1F 60 1F 
41d64     08 06 70 1F 
41d68     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
41d6c     BB 1F C8 1F 
41d70     C9 1F CA 1F 
41d74     CB 1F DA 1F 
41d78     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
41d7c     F9 1F EA 1F 
41d80     EB 1F FA 1F 
41d84     FB 1F 80 1F 
41d88     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
41d8c     08 06 A0 1F 
41d90     08 06 B0 1F 
41d94     04 00 B8 1F 
41d98     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
41d9c     BC 1F CC 1F 
41da0     01 00 C3 1F 
41da4     D0 1F 02 06 
41da8     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
41dac     E5 1F 01 00 
41db0     EC 1F F3 1F 
41db4     01 00 FC 1F 
41db8     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
41dbc     32 21 70 21 
41dc0     10 02 84 21 
41dc4     01 00 83 21 
41dc8     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
41dcc     30 2C 2F 04 
41dd0     60 2C 02 01 
41dd4     67 2C 06 01 
41dd8     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
41ddc     80 2C 64 01 
41de0     00 2D 26 08 
41de4     41 FF 1A 03 
41de8     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
41dec     05 07 09 0E 
41df0     10 12 14 16 
41df4     18 1C 1E 43 
41df8     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
41dfc     41 41 43 45 
41e00     45 45 49 49 
41e04     49 41 41 45 
41e08     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
41e0c     4F 55 55 59 
41e10     4F 55 4F 9C 
41e14     4F 9E 9F 41 
41e18     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
41e1c     A5 A6 A7 A8 
41e20     A9 AA AB AC 
41e24     AD AE AF B0 
41e28     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
41e2c     41 41 41 B8 
41e30     B9 BA BB BC 
41e34     BD BE BF C0 
41e38     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
41e3c     C5 41 41 C8 
41e40     C9 CA CB CC 
41e44     CD CE CF D1 
41e48     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
41e4c     49 49 49 49 
41e50     D9 DA DB DC 
41e54     DD 49 DF 4F 
41e58     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
41e5c     4F E6 E8 E8 
41e60     55 55 55 59 
41e64     59 EE EF F0 
41e68     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
41e6c     F5 F6 F7 F8 
41e70     F9 FA FB FC 
41e74     FD FE FF 00 
41e78     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
41e7c     00 00 00 00 | 	byte	$00, $00, $00, $00
41e80     00 00 30 0B | 	long	(179 {_fatfs_cc_v_close})<<20
41e84     00 00 40 0B | 	long	(180 {_fatfs_cc_v_read})<<20
41e88     00 00 50 0B | 	long	(181 {_fatfs_cc_v_write})<<20
41e8c     00 00 60 0B | 	long	(182 {_fatfs_cc_v_lseek})<<20
41e90     00 00 70 0B | 	long	(183 {_fatfs_cc_v_ioctl})<<20
41e94     00 00 80 0C | 	long	(200 {_fatfs_cc_v_flush})<<20
41e98     00 00 00 00 
41e9c     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
41ea0     00 00 80 0B | 	long	(184 {_fatfs_cc_v_open})<<20
41ea4     00 00 90 0B | 	long	(185 {_fatfs_cc_v_creat})<<20
41ea8     00 00 A0 0B | 	long	(186 {_fatfs_cc_v_opendir})<<20
41eac     00 00 B0 0B | 	long	(187 {_fatfs_cc_v_closedir})<<20
41eb0     00 00 C0 0B | 	long	(188 {_fatfs_cc_v_readdir})<<20
41eb4     00 00 D0 0B | 	long	(189 {_fatfs_cc_v_stat})<<20
41eb8     00 00 E0 0B | 	long	(190 {_fatfs_cc_v_mkdir})<<20
41ebc     00 00 F0 0B | 	long	(191 {_fatfs_cc_v_rmdir})<<20
41ec0     00 00 00 0C | 	long	(192 {_fatfs_cc_v_remove})<<20
41ec4     00 00 10 0C | 	long	(193 {_fatfs_cc_v_rename})<<20
41ec8     00 00 20 0C | 	long	(194 {_fatfs_cc_v_init})<<20
41ecc     00 00 30 0C | 	long	(195 {_fatfs_cc_v_deinit})<<20
41ed0     FF FF FF FF 
41ed4     1F 00 00 00 
41ed8     1C 00 00 00 
41edc     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
41ee0     1E 00 00 00 
41ee4     1F 00 00 00 
41ee8     1E 00 00 00 
41eec     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
41ef0     1F 00 00 00 
41ef4     1E 00 00 00 
41ef8     1F 00 00 00 
41efc     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
41f00     1F 00 00 00 
41f04     00 00 00 00 
41f08     1F 00 00 00 
41f0c     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
41f10     5A 00 00 00 
41f14     78 00 00 00 
41f18     97 00 00 00 
41f1c     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
41f20     D4 00 00 00 
41f24     F3 00 00 00 
41f28     11 01 00 00 
41f2c     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
41f30     4E 01 00 00 
41f34     6D 01 00 00 
41f38     FF FF FF FF 
41f3c     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
41f40     00 00 00 00 
      ...             
41f58     00 00 00 00 
41f5c     00 00 00 00 | 	byte	$00[32]
41f60     7E 1F 04 00 | 	long	@@@_fatfs_cc_dat_ + 1346
41f64     82 1F 04 00 | 	long	@@@_fatfs_cc_dat_ + 1350
41f68     00 00 00 00 
41f6c     00 00 00 00 
41f70     00 00 00 00 
41f74     00 00 00 00 
41f78     00 00       | 	byte	$00[18]
41f7a     3F 3F 3F 00 
41f7e     55 43 54 00 
41f82     55 43 54 00 
41f86     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
41f8a     00 00 00 00 
41f8e     00 00 00    | 	byte	$00[7]
41f91     CA 9A 3B 00 
41f95     00 00 00 01 
41f99     01 01 01 01 
41f9d     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
41fa1     91 11 11 11 
41fa5     11 01 01 01 
41fa9     01 01 01 01 
41fad     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
41fb1     01 01 01 01 
41fb5     01 01 01    | 	byte	$01[7]
41fb8     90 20 20 20 
41fbc     20 20 20 20 
41fc0     20 20 20 20 
41fc4     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
41fc8     42 42 42 42 
41fcc     42 42 42 42 
41fd0     42 42       | 	byte	$42[10]
41fd2     20 20 20 20 
41fd6     20 20 20    | 	byte	$20[7]
41fd9     44 44 44 44 
41fdd     44 44       | 	byte	$44[6]
41fdf     04 04 04 04 
41fe3     04 04 04 04 
41fe7     04 04 04 04 
41feb     04 04 04 04 
41fef     04 04 04 04 | 	byte	$04[20]
41ff3     20 20 20 20 
41ff7     20 20       | 	byte	$20[6]
41ff9     48 48 48 48 
41ffd     48 48       | 	byte	$48[6]
41fff     08 08 08 08 
42003     08 08 08 08 
42007     08 08 08 08 
4200b     08 08 08 08 
4200f     08 08 08 08 | 	byte	$08[20]
42013     20 20 20 20 
42017     01 00 00 00 
4201b     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
4201c                 | __methodtable__
4201c     84 65 01 00 | 	long	@_do_no_command
42020     88 09 02 00 | 	long	@_do_plus
42024     A8 F9 01 00 | 	long	@_do_minus
42028     70 08 02 00 | 	long	@_do_or
4202c     28 00 02 00 | 	long	@_do_mul
42030     6C E4 01 00 | 	long	@_do_fdiv
42034     58 DC 01 00 | 	long	@_do_and
42038     70 DD 01 00 | 	long	@_do_div
4203c     08 FE 01 00 | 	long	@_do_mod
42040     3C 10 02 00 | 	long	@_do_shl
42044     54 11 02 00 | 	long	@_do_shr
42048     74 0E 02 00 | 	long	@_do_power
4204c     10 D2 01 00 | 	long	@_do_getvar
42050     C0 92 01 00 | 	long	@_do_push
42054     08 CC 01 00 | 	long	@_do_assign
42058     44 F6 00 00 | 	long	@_do_cls
4205c     50 5F 01 00 | 	long	@_do_new
42060     04 8B 01 00 | 	long	@_do_plot
42064     98 1E 01 00 | 	long	@_do_draw
42068     6C 8D 01 00 | 	long	@_do_print
4206c     24 F4 00 00 | 	long	@_do_circle
42070     CC 20 01 00 | 	long	@_do_fcircle
42074     18 E3 00 00 | 	long	@_do_box
42078     B0 25 01 00 | 	long	@_do_frame
4207c     00 F9 00 00 | 	long	@_do_color
42080     40 23 01 00 | 	long	@_do_for
42084     BC 61 01 00 | 	long	@_do_next
42088     00 4D 01 00 | 	long	@_do_list
4208c     DC AE 01 00 | 	long	@_do_run
42090     F4 1F 01 00 | 	long	@_do_error
42094     08 33 01 00 | 	long	@_do_fast_goto
42098     F8 33 01 00 | 	long	@_do_find_goto
4209c     0C 36 01 00 | 	long	@_do_slow_goto
420a0     A4 65 01 00 | 	long	@_do_nothing
420a4     F8 B2 01 00 | 	long	@_do_save
420a8     9C 4F 01 00 | 	long	@_do_load
420ac     40 7E 01 00 | 	long	@_do_pinwrite
420b0     48 C9 01 00 | 	long	@_do_waitms
420b4     7C CA 01 00 | 	long	@_do_waitvbl
420b8     00 39 01 00 | 	long	@_do_if
420bc     8C 1F 01 00 | 	long	@_do_else
420c0     90 DF 01 00 | 	long	@_do_eq
420c4     34 E6 01 00 | 	long	@_do_ge
420c8     00 F0 01 00 | 	long	@_do_le
420cc     1C EB 01 00 | 	long	@_do_gt
420d0     DC F4 01 00 | 	long	@_do_lt
420d4     94 03 02 00 | 	long	@_do_ne
420d8     44 AC 01 00 | 	long	@_do_rnd
420dc     00 E5 00 00 | 	long	@_do_brun
420e0     9C DE 00 00 | 	long	@_do_beep
420e4     28 17 01 00 | 	long	@_do_dir
420e8     74 7A 01 00 | 	long	@_do_paper
420ec     BC 3C 01 00 | 	long	@_do_ink
420f0     C4 22 01 00 | 	long	@_do_font
420f4     60 5A 01 00 | 	long	@_do_mode
420f8     0C 5E 01 00 | 	long	@_do_mouse
420fc     88 31 01 00 | 	long	@_do_gettime
42100     34 FE 00 00 | 	long	@_do_cursor
42104     9C F5 00 00 | 	long	@_do_click
42108     C8 5E 01 00 | 	long	@_do_mousex
4210c     0C 5F 01 00 | 	long	@_do_mousey
42110     40 5E 01 00 | 	long	@_do_mousek
42114     84 5E 01 00 | 	long	@_do_mousew
42118     B0 BE 01 00 | 	long	@_do_sin
4211c     E8 C1 01 00 | 	long	@_do_stick
42120     78 C3 01 00 | 	long	@_do_strig
42124     08 C0 01 00 | 	long	@_do_sprite
42128     50 12 01 00 | 	long	@_do_defsprite
4212c     34 30 01 00 | 	long	@_do_getpixel
42130     24 C9 01 00 | 	long	@_do_waitclock
42134     58 FD 01 00 | 	long	@_do_negative
42138     44 99 01 00 | 	long	@_do_rdpin
4213c     68 AE 01 00 | 	long	@_do_rqpin
42140     6C 7C 01 00 | 	long	@_do_pinread
42144     88 CA 01 00 | 	long	@_do_wrpin
42148     08 CB 01 00 | 	long	@_do_wxpin
4214c     88 CB 01 00 | 	long	@_do_wypin
42150     AC 7B 01 00 | 	long	@_do_pinfloat
42154     2C 7C 01 00 | 	long	@_do_pinlo
42158     EC 7B 01 00 | 	long	@_do_pinhi
4215c     F0 7C 01 00 | 	long	@_do_pinstart
42160     00 7E 01 00 | 	long	@_do_pintoggle
42164     E4 8C 01 00 | 	long	@_do_position
42168     10 FD 00 00 | 	long	@_do_cos
4216c     08 C5 01 00 | 	long	@_do_tan
42170     84 DD 00 00 | 	long	@_do_atn
42174     74 DC 00 00 | 	long	@_do_asin
42178     04 DA 00 00 | 	long	@_do_acos
4217c     F4 C0 01 00 | 	long	@_do_sqr
42180     B0 21 01 00 | 	long	@_do_fill
42184     64 09 01 00 | 	long	@_do_defsnd
42188     68 FE 00 00 | 	long	@_do_defenv
4218c     1C 99 01 00 | 	long	@_do_rad
42190     C4 15 01 00 | 	long	@_do_deg
42194     3C 3D 01 00 | 	long	@_do_int
42198     C8 7E 01 00 | 	long	@_do_play
4219c     08 B9 01 00 | 	long	@_do_setdelay
421a0     B0 B9 01 00 | 	long	@_do_setenv
421a4     58 BA 01 00 | 	long	@_do_setlen
421a8     00 BB 01 00 | 	long	@_do_setpan
421ac     50 BC 01 00 | 	long	@_do_setvol
421b0     F8 BC 01 00 | 	long	@_do_setwave
421b4     A8 BB 01 00 | 	long	@_do_setsustain
421b8     3C A9 01 00 | 	long	@_do_release
421bc     20 2E 01 00 | 	long	@_do_getenvsustain
421c0     D4 8B 01 00 | 	long	@_do_poke
421c4     C0 1D 01 00 | 	long	@_do_dpoke
421c8     74 56 01 00 | 	long	@_do_lpoke
421cc     FC 7A 01 00 | 	long	@_do_peek
421d0     14 1D 01 00 | 	long	@_do_dpeek
421d4     C8 55 01 00 | 	long	@_do_lpeek
421d8     0C 27 01 00 | 	long	@_do_fre
421dc     30 2F 01 00 | 	long	@_do_getnotevalue
421e0     C8 D7 01 00 | 	long	@_do_getaddr
421e4     E4 39 01 00 | 	long	@_do_inkey
421e8     84 D9 00 00 | 	long	@_do_abs
421ec     9C 37 01 00 | 	long	@_do_hex
421f0     B4 E1 00 00 | 	long	@_do_bin
421f4     18 C6 01 00 | 	long	@_do_val
421f8     24 F3 00 00 | 	long	@_do_chr
421fc     14 DB 00 00 | 	long	@_do_asc
42200     00 4A 01 00 | 	long	@_do_left
42204     B8 AA 01 00 | 	long	@_do_right
42208     D4 57 01 00 | 	long	@_do_mid
4220c     8C 4B 01 00 | 	long	@_do_len
42210     F0 31 01 00 | 	long	@_do_gosub
42214     0C AA 01 00 | 	long	@_do_return
42218     B0 1F 01 00 | 	long	@_do_end
4221c     AC 8C 01 00 | 	long	@_do_pop
42220     4C 54 01 00 | 	long	@_do_log
42224     18 F1 00 00 | 	long	@_do_changevol
42228     F8 F1 00 00 | 	long	@_do_changewav
4222c     08 F0 00 00 | 	long	@_do_changepan
42230     EC EC 00 00 | 	long	@_do_changefreq
42234     A0 BD 01 00 | 	long	@_do_shutup
42238     14 AE 01 00 | 	long	@_do_round
4223c     E4 1F 01 00 | 	long	@_do_enter
42240     CC 66 01 00 | 	long	@_do_open
42244     C8 F5 00 00 | 	long	@_do_close
42248     70 27 01 00 | 	long	@_do_get
4224c     DC 93 01 00 | 	long	@_do_put
42250     38 E7 00 00 | 	long	@_do_cd
42254     EC 15 01 00 | 	long	@_do_delete
42258     A0 59 01 00 | 	long	@_do_mkdir
4225c     B0 DF 00 00 | 	long	@_do_blit
42260     D8 26 01 00 | 	long	@_do_framebuf
42264     A8 65 01 00 | 	long	@_do_on
42268     C0 BF 01 00 | 	long	@_do_skip
4226c     F8 3D 01 00 | 	long	@_do_input
42270     A8 9B 01 00 | 	long	@_do_read
42274     D4 A9 01 00 | 	long	@_do_restore
42278     F4 72 01 00 | 	long	@_do_padx
4227c     74 75 01 00 | 	long	@_do_pady
42280     F4 77 01 00 | 	long	@_do_padz
42284     74 6B 01 00 | 	long	@_do_padrx
42288     F4 6D 01 00 | 	long	@_do_padry
4228c     74 70 01 00 | 	long	@_do_padrz
42290     E4 69 01 00 | 	long	@_do_padh
42294     38 F9 00 00 | 	long	@_do_copy
42298     84 F6 00 00 | 	long	@_do_coginit
4229c     C0 F8 00 00 | 	long	@_do_cogstop
422a0     4C 57 01 00 | 	long	@_do_memlo
422a4     90 57 01 00 | 	long	@_do_memtop
422a8     9C B6 01 00 | 	long	@_do_setcolor
422ac     14 2D 01 00 | 	long	@_do_getcolor
422b0     A0 52 02 00 | 	long	@_hg010b_spin2_putchar
422b4     84 68 03 00 | 	long	@__struct___bas_wrap_sender_tx
422b8     C8 68 03 00 | 	long	@__struct___bas_wrap_sender_rx
422bc     10 69 03 00 | 	long	@__struct___bas_wrap_sender_close
422c0     B4 67 03 00 | 	long	@__struct__s_vfs_file_t_putchar
422c4     24 68 03 00 | 	long	@__struct__s_vfs_file_t_getchar
422c8     6C 67 03 00 | 	long	@___strs_cl_pfunc
422cc     04 C5 02 00 | 	long	@__system____root_opendir
422d0     A0 C5 02 00 | 	long	@__system____root_closedir
422d4     1C C5 02 00 | 	long	@__system____root_readdir
422d8     A8 C5 02 00 | 	long	@__system____root_stat
422dc     F4 BD 02 00 | 	long	@__system____default_putc
422e0     78 BD 02 00 | 	long	@__system____default_getc
422e4     9C BE 02 00 | 	long	@__system____default_flush
422e8     74 52 03 00 | 	long	@_fatfs_cc_v_close
422ec     90 56 03 00 | 	long	@_fatfs_cc_v_read
422f0     A4 57 03 00 | 	long	@_fatfs_cc_v_write
422f4     84 58 03 00 | 	long	@_fatfs_cc_v_lseek
422f8     0C 59 03 00 | 	long	@_fatfs_cc_v_ioctl
422fc     60 59 03 00 | 	long	@_fatfs_cc_v_open
42300     D8 51 03 00 | 	long	@_fatfs_cc_v_creat
42304     B8 52 03 00 | 	long	@_fatfs_cc_v_opendir
42308     2C 53 03 00 | 	long	@_fatfs_cc_v_closedir
4230c     6C 53 03 00 | 	long	@_fatfs_cc_v_readdir
42310     A0 54 03 00 | 	long	@_fatfs_cc_v_stat
42314     20 59 03 00 | 	long	@_fatfs_cc_v_mkdir
42318     40 59 03 00 | 	long	@_fatfs_cc_v_rmdir
4231c     30 59 03 00 | 	long	@_fatfs_cc_v_remove
42320     50 59 03 00 | 	long	@_fatfs_cc_v_rename
42324     70 5A 03 00 | 	long	@_fatfs_cc_v_init
42328     78 5A 03 00 | 	long	@_fatfs_cc_v_deinit
4232c     48 6F 02 00 | 	long	@__system___tx
42330     88 6F 02 00 | 	long	@__system___rx
42334     14 D1 02 00 | 	long	@__system___rxtxioctl_0773
42338     6C D1 02 00 | 	long	@__system____dummy_flush_0774
4233c     40 5A 03 00 | 	long	@_fatfs_cc_v_flush
42340                 | __heap_base
42340     00 00 00 00 
      ...             
59a40     00 00 00 00 
59a44     00 00 00 00 | 	long	0[24002]
59a48                 | objmem
59a48     00 00 00 00 
      ...             
63f60     00 00 00 00 
63f64     00 00 00 00 | 	long	0[10568]
63f68                 | stackspace
63f68     00 00 00 00 | 	long	0[1]
63f6c 100             | 	org	COG_BSS_START
63f6c 100             | _var01
63f6c 100             | 	res	1
63f6c 101             | _var02
63f6c 101             | 	res	1
63f6c 102             | _var03
63f6c 102             | 	res	1
63f6c 103             | _var04
63f6c 103             | 	res	1
63f6c 104             | _var05
63f6c 104             | 	res	1
63f6c 105             | _var06
63f6c 105             | 	res	1
63f6c 106             | _var07
63f6c 106             | 	res	1
63f6c 107             | _var08
63f6c 107             | 	res	1
63f6c 108             | _var09
63f6c 108             | 	res	1
63f6c 109             | arg01
63f6c 109             | 	res	1
63f6c 10a             | arg02
63f6c 10a             | 	res	1
63f6c 10b             | arg03
63f6c 10b             | 	res	1
63f6c 10c             | arg04
63f6c 10c             | 	res	1
63f6c 10d             | arg05
63f6c 10d             | 	res	1
63f6c 10e             | arg06
63f6c 10e             | 	res	1
63f6c 10f             | arg07
63f6c 10f             | 	res	1
63f6c 110             | arg08
63f6c 110             | 	res	1
63f6c 111             | arg09
63f6c 111             | 	res	1
63f6c 112             | arg10
63f6c 112             | 	res	1
63f6c 113             | local01
63f6c 113             | 	res	1
63f6c 114             | local02
63f6c 114             | 	res	1
63f6c 115             | local03
63f6c 115             | 	res	1
63f6c 116             | local04
63f6c 116             | 	res	1
63f6c 117             | local05
63f6c 117             | 	res	1
63f6c 118             | local06
63f6c 118             | 	res	1
63f6c 119             | local07
63f6c 119             | 	res	1
63f6c 11a             | local08
63f6c 11a             | 	res	1
63f6c 11b             | local09
63f6c 11b             | 	res	1
63f6c 11c             | local10
63f6c 11c             | 	res	1
63f6c 11d             | local11
63f6c 11d             | 	res	1
63f6c 11e             | local12
63f6c 11e             | 	res	1
63f6c 11f             | local13
63f6c 11f             | 	res	1
63f6c 120             | local14
63f6c 120             | 	res	1
63f6c 121             | local15
63f6c 121             | 	res	1
63f6c 122             | local16
63f6c 122             | 	res	1
63f6c 123             | local17
63f6c 123             | 	res	1
63f6c 124             | local18
63f6c 124             | 	res	1
63f6c 125             | local19
63f6c 125             | 	res	1
63f6c 126             | local20
63f6c 126             | 	res	1
63f6c 127             | local21
63f6c 127             | 	res	1
63f6c 128             | local22
63f6c 128             | 	res	1
63f6c 129             | local23
63f6c 129             | 	res	1
63f6c 12a             | local24
63f6c 12a             | 	res	1
63f6c 12b             | local25
63f6c 12b             | 	res	1
63f6c 12c             | local26
63f6c 12c             | 	res	1
63f6c 12d             | local27
63f6c 12d             | 	res	1
63f6c 12e             | local28
63f6c 12e             | 	res	1
63f6c 12f             | local29
63f6c 12f             | 	res	1
63f6c 130             | local30
63f6c 130             | 	res	1
63f6c 131             | local31
63f6c 131             | 	res	1
63f6c 132             | local32
63f6c 132             | 	res	1
63f6c 133             | local33
63f6c 133             | 	res	1
63f6c 134             | local34
63f6c 134             | 	res	1
63f6c 135             | local35
63f6c 135             | 	res	1
63f6c 136             | local36
63f6c 136             | 	res	1
63f6c 137             | local37
63f6c 137             | 	res	1
63f6c 138             | local38
63f6c 138             | 	res	1
63f6c 139             | local39
63f6c 139             | 	res	1
63f6c 13a             | local40
63f6c 13a             | 	res	1
63f6c 13b             | local41
63f6c 13b             | 	res	1
63f6c 13c             | local42
63f6c 13c             | 	res	1
63f6c 13d             | local43
63f6c 13d             | 	res	1
63f6c 13e             | local44
63f6c 13e             | 	res	1
63f6c 13f             | local45
63f6c 13f             | 	res	1
63f6c 140             | local46
63f6c 140             | 	res	1
63f6c 141             | local47
63f6c 141             | 	res	1
63f6c 142             | local48
63f6c 142             | 	res	1
63f6c 143             | local49
63f6c 143             | 	res	1
63f6c 144             | local50
63f6c 144             | 	res	1
63f6c 145             | local51
63f6c 145             | 	res	1
63f6c 146             | local52
63f6c 146             | 	res	1
63f6c 147             | local53
63f6c 147             | 	res	1
63f6c 148             | muldiva_
63f6c 148             | 	res	1
63f6c 149             | muldivb_
63f6c 149             | 	res	1
63f6c 14a             | 	fit	480
63f6c 14a             | 
